[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.ArtifactEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Key { get; }
    [NullableAttribute("2")]
public string Value { get; }
    internal ArtifactEventArgs(string key, string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.ByteArrayWrapper : object {
    private Byte[] _bytes;
    private int _offset;
    private int _length;
    public Byte[] GetBytes();
    public long Read(IntPtr data, UIntPtr count, IntPtr user_data);
    public long Seek(long offset, IntPtr whence, IntPtr user_data);
    public long Tell(IntPtr user_data);
    public long Write(IntPtr data, UIntPtr count, IntPtr user_data);
    private void EnsureLength(int length);
    private void ResizeBytes(int length);
}
internal static class ImageMagick.ByteConverter : object {
    [NullableContextAttribute("2")]
public static Byte[] ToArray(IntPtr nativeData, int length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.Bytes : object {
    private static int BufferSize;
    private Byte[] _data;
    private int _length;
    public int Length { get; }
    private Bytes(Byte[] data, int length);
    public int get_Length();
    public static Bytes Create(Stream stream, bool allowEmptyStream);
    [AsyncStateMachineAttribute("ImageMagick.Bytes/<CreateAsync>d__7")]
public static Task`1<Bytes> CreateAsync(Stream stream, CancellationToken cancellationToken);
    public static Bytes FromStreamBuffer(Stream stream);
    public Byte[] GetData();
    private static Byte[] GetData(Stream stream, Int32& length);
    [AsyncStateMachineAttribute("ImageMagick.Bytes/<GetDataAsync>d__11")]
private static Task`1<ValueTuple`2<Byte[], int>> GetDataAsync(Stream stream, CancellationToken cancellationToken);
    private static Byte[] GetDataWithSeekableStream(Stream stream, Int32& length);
    [AsyncStateMachineAttribute("ImageMagick.Bytes/<GetDataWithSeekableStreamAsync>d__13")]
private static Task`1<ValueTuple`2<Byte[], int>> GetDataWithSeekableStreamAsync(Stream stream, CancellationToken cancellationToken);
    private static Byte[] GetDataFromMemoryStream(MemoryStream memStream, Int32& length);
    private static Byte[] GetDataFromMemoryStreamBuffer(MemoryStream memStream, Int32& length);
    private static void CheckLength(long length);
    private static bool IsSupportedLength(long length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.ChannelMoments : object {
    private Double[] _huInvariants;
    [CompilerGeneratedAttribute]
private PointD <Centroid>k__BackingField;
    [CompilerGeneratedAttribute]
private PixelChannel <Channel>k__BackingField;
    [CompilerGeneratedAttribute]
private PointD <EllipseAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private double <EllipseAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <EllipseEccentricity>k__BackingField;
    [CompilerGeneratedAttribute]
private double <EllipseIntensity>k__BackingField;
    public PointD Centroid { get; }
    public PixelChannel Channel { get; }
    public PointD EllipseAxis { get; }
    public double EllipseAngle { get; }
    public double EllipseEccentricity { get; }
    public double EllipseIntensity { get; }
    private ChannelMoments(PixelChannel channel, NativeChannelMoments instance);
    [NullableContextAttribute("2")]
internal static ChannelMoments Create(PixelChannel channel, IntPtr instance);
    [CompilerGeneratedAttribute]
public sealed virtual PointD get_Centroid();
    [CompilerGeneratedAttribute]
public sealed virtual PixelChannel get_Channel();
    [CompilerGeneratedAttribute]
public sealed virtual PointD get_EllipseAxis();
    [CompilerGeneratedAttribute]
public sealed virtual double get_EllipseAngle();
    [CompilerGeneratedAttribute]
public sealed virtual double get_EllipseEccentricity();
    [CompilerGeneratedAttribute]
public sealed virtual double get_EllipseIntensity();
    public sealed virtual double HuInvariants(int index);
    private static Double[] GetHuInvariants(NativeChannelMoments nativeInstance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.ChannelPerceptualHash : object {
    private Dictionary`2<ColorSpace, HuPhashList> _huPhashes;
    private string _hash;
    [CompilerGeneratedAttribute]
private PixelChannel <Channel>k__BackingField;
    public PixelChannel Channel { get; }
    internal ChannelPerceptualHash(PixelChannel channel, ColorSpace[] colorSpaces, string hash);
    internal ChannelPerceptualHash(PixelChannel channel, ColorSpace[] colorSpaces, IntPtr instance);
    [CompilerGeneratedAttribute]
public sealed virtual PixelChannel get_Channel();
    public sealed virtual double HuPhash(ColorSpace colorSpace, int index);
    public sealed virtual double SumSquaredDistance(IChannelPerceptualHash other);
    public virtual string ToString();
    private static double PowerOfTen(int power);
    [NullableContextAttribute("2")]
private HuPhashList GetHuPhashListByColorSpace(ColorSpace colorSpace);
    private void ParseHash(ColorSpace[] colorSpaces, string hash);
    private void SetHash();
    private void AddHuPhash(NativeChannelPerceptualHash instance, ColorSpace colorSpace, UInt32 colorSpaceIndex);
}
internal class ImageMagick.ChannelStatistics : object {
    [CompilerGeneratedAttribute]
private PixelChannel <Channel>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Depth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Entropy>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Kurtosis>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Maximum>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Mean>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Skewness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StandardDeviation>k__BackingField;
    public PixelChannel Channel { get; }
    public UInt32 Depth { get; }
    public double Entropy { get; }
    public double Kurtosis { get; }
    public double Maximum { get; }
    public double Mean { get; }
    public double Minimum { get; }
    public double Skewness { get; }
    public double StandardDeviation { get; }
    private ChannelStatistics(PixelChannel channel, IntPtr instance);
    [CompilerGeneratedAttribute]
public sealed virtual PixelChannel get_Channel();
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Depth();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Entropy();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Kurtosis();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Maximum();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Mean();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Minimum();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Skewness();
    [CompilerGeneratedAttribute]
public sealed virtual double get_StandardDeviation();
    [NullableContextAttribute("2")]
internal static ChannelStatistics Create(PixelChannel channel, IntPtr instance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.ChromaticityInfo : object {
    [CompilerGeneratedAttribute]
private IPrimaryInfo <Blue>k__BackingField;
    [CompilerGeneratedAttribute]
private IPrimaryInfo <Green>k__BackingField;
    [CompilerGeneratedAttribute]
private IPrimaryInfo <Red>k__BackingField;
    [CompilerGeneratedAttribute]
private IPrimaryInfo <White>k__BackingField;
    public IPrimaryInfo Blue { get; }
    public IPrimaryInfo Green { get; }
    public IPrimaryInfo Red { get; }
    public IPrimaryInfo White { get; }
    public ChromaticityInfo(IPrimaryInfo red, IPrimaryInfo green, IPrimaryInfo blue, IPrimaryInfo white);
    [CompilerGeneratedAttribute]
public sealed virtual IPrimaryInfo get_Blue();
    [CompilerGeneratedAttribute]
public sealed virtual IPrimaryInfo get_Green();
    [CompilerGeneratedAttribute]
public sealed virtual IPrimaryInfo get_Red();
    [CompilerGeneratedAttribute]
public sealed virtual IPrimaryInfo get_White();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class ImageMagick.Colors.ColorBase : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IMagickColor`1<byte> <Color>k__BackingField;
    [NullableAttribute("1")]
protected IMagickColor`1<byte> Color { get; }
    [NullableContextAttribute("1")]
protected ColorBase(IMagickColor`1<byte> color);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected IMagickColor`1<byte> get_Color();
    public static bool op_Equality(ColorBase left, ColorBase right);
    public static bool op_Inequality(ColorBase left, ColorBase right);
    public static bool op_GreaterThan(ColorBase left, ColorBase right);
    public static bool op_LessThan(ColorBase left, ColorBase right);
    public static bool op_GreaterThanOrEqual(ColorBase left, ColorBase right);
    public static bool op_LessThanOrEqual(ColorBase left, ColorBase right);
    public sealed virtual int CompareTo(ColorBase other);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ColorBase other);
    public bool FuzzyEquals(ColorBase other, Percentage fuzz);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public IMagickColor`1<byte> ToMagickColor();
    [NullableContextAttribute("1")]
public virtual string ToString();
    protected virtual void UpdateColor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Colors.ColorCMYK : ColorBase {
    public byte A { get; public set; }
    public byte C { get; public set; }
    public byte K { get; public set; }
    public byte M { get; public set; }
    public byte Y { get; public set; }
    public ColorCMYK(Percentage cyan, Percentage magenta, Percentage yellow, Percentage key);
    public ColorCMYK(Percentage cyan, Percentage magenta, Percentage yellow, Percentage key, Percentage alpha);
    public ColorCMYK(byte cyan, byte magenta, byte yellow, byte key);
    public ColorCMYK(byte cyan, byte magenta, byte yellow, byte key, byte alpha);
    public ColorCMYK(string color);
    private ColorCMYK(IMagickColor`1<byte> color);
    public byte get_A();
    public void set_A(byte value);
    public byte get_C();
    public void set_C(byte value);
    public byte get_K();
    public void set_K(byte value);
    public byte get_M();
    public void set_M(byte value);
    public byte get_Y();
    public void set_Y(byte value);
    public static ColorCMYK op_Explicit(MagickColor color);
    public static ColorCMYK FromMagickColor(IMagickColor`1<byte> color);
    private static IMagickColor`1<byte> CreateColor(string color);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Colors.ColorGray : ColorBase {
    private double _shade;
    public double Shade { get; public set; }
    public ColorGray(double shade);
    private ColorGray(IMagickColor`1<byte> color);
    public double get_Shade();
    public void set_Shade(double value);
    public static ColorGray op_Explicit(MagickColor color);
    public static ColorGray FromMagickColor(MagickColor color);
    protected virtual void UpdateColor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Colors.ColorHSL : ColorBase {
    [CompilerGeneratedAttribute]
private double <Hue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Lightness>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Saturation>k__BackingField;
    public double Hue { get; public set; }
    public double Lightness { get; public set; }
    public double Saturation { get; public set; }
    public ColorHSL(double hue, double saturation, double lightness);
    private ColorHSL(IMagickColor`1<byte> color);
    [CompilerGeneratedAttribute]
public double get_Hue();
    [CompilerGeneratedAttribute]
public void set_Hue(double value);
    [CompilerGeneratedAttribute]
public double get_Lightness();
    [CompilerGeneratedAttribute]
public void set_Lightness(double value);
    [CompilerGeneratedAttribute]
public double get_Saturation();
    [CompilerGeneratedAttribute]
public void set_Saturation(double value);
    public static ColorHSL op_Explicit(MagickColor color);
    public static ColorHSL FromMagickColor(IMagickColor`1<byte> color);
    protected virtual void UpdateColor();
    private void Initialize(double red, double green, double blue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Colors.ColorHSV : ColorBase {
    [CompilerGeneratedAttribute]
private double <Hue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Saturation>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    public double Hue { get; public set; }
    public double Saturation { get; public set; }
    public double Value { get; public set; }
    public ColorHSV(double hue, double saturation, double value);
    private ColorHSV(IMagickColor`1<byte> color);
    [CompilerGeneratedAttribute]
public double get_Hue();
    [CompilerGeneratedAttribute]
public void set_Hue(double value);
    [CompilerGeneratedAttribute]
public double get_Saturation();
    [CompilerGeneratedAttribute]
public void set_Saturation(double value);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(double value);
    public static ColorHSV op_Explicit(MagickColor color);
    public static ColorHSV FromMagickColor(IMagickColor`1<byte> color);
    public void HueShift(double degrees);
    protected virtual void UpdateColor();
    private void Initialize(double red, double green, double blue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Colors.ColorMono : ColorBase {
    [CompilerGeneratedAttribute]
private bool <IsBlack>k__BackingField;
    public static ColorMono Black { get; }
    public static ColorMono White { get; }
    public bool IsBlack { get; public set; }
    private ColorMono(bool isBlack);
    private ColorMono(IMagickColor`1<byte> color);
    public static ColorMono get_Black();
    public static ColorMono get_White();
    [CompilerGeneratedAttribute]
public bool get_IsBlack();
    [CompilerGeneratedAttribute]
public void set_IsBlack(bool value);
    public static ColorMono op_Explicit(MagickColor color);
    public static ColorMono FromMagickColor(IMagickColor`1<byte> color);
    protected virtual void UpdateColor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Colors.ColorRGB : ColorBase {
    public byte B { get; public set; }
    public byte G { get; public set; }
    public byte R { get; public set; }
    public ColorRGB(IMagickColor`1<byte> value);
    public ColorRGB(byte red, byte green, byte blue);
    public byte get_B();
    public void set_B(byte value);
    public byte get_G();
    public void set_G(byte value);
    public byte get_R();
    public void set_R(byte value);
    public static ColorRGB op_Explicit(MagickColor color);
    public static ColorRGB FromMagickColor(IMagickColor`1<byte> color);
    [NullableContextAttribute("2")]
public ColorRGB ComplementaryColor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Colors.ColorYUV : ColorBase {
    [CompilerGeneratedAttribute]
private double <U>k__BackingField;
    [CompilerGeneratedAttribute]
private double <V>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double U { get; public set; }
    public double V { get; public set; }
    public double Y { get; public set; }
    public ColorYUV(double y, double u, double v);
    private ColorYUV(IMagickColor`1<byte> color);
    [CompilerGeneratedAttribute]
public double get_U();
    [CompilerGeneratedAttribute]
public void set_U(double value);
    [CompilerGeneratedAttribute]
public double get_V();
    [CompilerGeneratedAttribute]
public void set_V(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    public static ColorYUV op_Explicit(MagickColor color);
    public static ColorYUV FromMagickColor(IMagickColor`1<byte> color);
    protected virtual void UpdateColor();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ImageMagick.CompareSettings : object {
    [CompilerGeneratedAttribute]
private ErrorMetric <Metric>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickColor`1<byte> <HighlightColor>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickColor`1<byte> <LowlightColor>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickColor`1<byte> <MasklightColor>k__BackingField;
    public ErrorMetric Metric { get; }
    public IMagickColor`1<byte> HighlightColor { get; public set; }
    public IMagickColor`1<byte> LowlightColor { get; public set; }
    public IMagickColor`1<byte> MasklightColor { get; public set; }
    public CompareSettings(ErrorMetric metric);
    [CompilerGeneratedAttribute]
public sealed virtual ErrorMetric get_Metric();
    [CompilerGeneratedAttribute]
public sealed virtual IMagickColor`1<byte> get_HighlightColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HighlightColor(IMagickColor`1<byte> value);
    [CompilerGeneratedAttribute]
public sealed virtual IMagickColor`1<byte> get_LowlightColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LowlightColor(IMagickColor`1<byte> value);
    [CompilerGeneratedAttribute]
public sealed virtual IMagickColor`1<byte> get_MasklightColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MasklightColor(IMagickColor`1<byte> value);
}
public class ImageMagick.ComplexSettings : object {
    [CompilerGeneratedAttribute]
private ComplexOperator <ComplexOperator>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <SignalToNoiseRatio>k__BackingField;
    public ComplexOperator ComplexOperator { get; }
    public Nullable`1<double> SignalToNoiseRatio { get; public set; }
    public ComplexSettings(ComplexOperator complexOperator);
    [CompilerGeneratedAttribute]
public sealed virtual ComplexOperator get_ComplexOperator();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<double> get_SignalToNoiseRatio();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SignalToNoiseRatio(Nullable`1<double> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.Configuration.ConfigurationFile : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    public string FileName { get; }
    public string Data { get; public set; }
    public ConfigurationFile(string fileName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FileName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Data();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Data(string value);
    private string LoadData();
    private string UpdateDelegatesXml(string data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Configuration.ConfigurationFiles : object {
    [CompilerGeneratedAttribute]
private IConfigurationFile <Colors>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigurationFile <Configure>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigurationFile <Delegates>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigurationFile <English>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigurationFile <Locale>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigurationFile <Log>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigurationFile <Policy>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigurationFile <Thresholds>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigurationFile <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigurationFile <TypeGhostscript>k__BackingField;
    public static IConfigurationFiles Default { get; }
    private IEnumerable`1<IConfigurationFile> ImageMagick.Configuration.IConfigurationFiles.All { get; }
    private IConfigurationFiles ImageMagick.Configuration.IConfigurationFiles.Default { get; }
    public IConfigurationFile Colors { get; }
    public IConfigurationFile Configure { get; }
    public IConfigurationFile Delegates { get; }
    public IConfigurationFile English { get; }
    public IConfigurationFile Locale { get; }
    public IConfigurationFile Log { get; }
    public IConfigurationFile Policy { get; }
    public IConfigurationFile Thresholds { get; }
    public IConfigurationFile Type { get; }
    public IConfigurationFile TypeGhostscript { get; }
    public static IConfigurationFiles get_Default();
    [IteratorStateMachineAttribute("ImageMagick.Configuration.ConfigurationFiles/<ImageMagick-Configuration-IConfigurationFiles-get_All>d__4")]
private sealed virtual override IEnumerable`1<IConfigurationFile> ImageMagick.Configuration.IConfigurationFiles.get_All();
    private sealed virtual override IConfigurationFiles ImageMagick.Configuration.IConfigurationFiles.get_Default();
    [CompilerGeneratedAttribute]
public sealed virtual IConfigurationFile get_Colors();
    [CompilerGeneratedAttribute]
public sealed virtual IConfigurationFile get_Configure();
    [CompilerGeneratedAttribute]
public sealed virtual IConfigurationFile get_Delegates();
    [CompilerGeneratedAttribute]
public sealed virtual IConfigurationFile get_English();
    [CompilerGeneratedAttribute]
public sealed virtual IConfigurationFile get_Locale();
    [CompilerGeneratedAttribute]
public sealed virtual IConfigurationFile get_Log();
    [CompilerGeneratedAttribute]
public sealed virtual IConfigurationFile get_Policy();
    [CompilerGeneratedAttribute]
public sealed virtual IConfigurationFile get_Thresholds();
    [CompilerGeneratedAttribute]
public sealed virtual IConfigurationFile get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual IConfigurationFile get_TypeGhostscript();
}
public class ImageMagick.ConnectedComponent : object {
    [CompilerGeneratedAttribute]
private UInt32 <Area>k__BackingField;
    [CompilerGeneratedAttribute]
private PointD <Centroid>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IMagickColor`1<byte> <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    public UInt32 Area { get; }
    public PointD Centroid { get; }
    [NullableAttribute("2")]
public IMagickColor`1<byte> Color { get; }
    public UInt32 Height { get; }
    public int Id { get; }
    public UInt32 Width { get; }
    public int X { get; }
    public int Y { get; }
    private ConnectedComponent(IntPtr instance);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Area();
    [CompilerGeneratedAttribute]
public sealed virtual PointD get_Centroid();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IMagickColor`1<byte> get_Color();
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Height();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Width();
    [CompilerGeneratedAttribute]
public sealed virtual int get_X();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Y();
    [NullableContextAttribute("1")]
public sealed virtual IMagickGeometry ToGeometry();
    [NullableContextAttribute("1")]
public sealed virtual IMagickGeometry ToGeometry(UInt32 extent);
    [NullableContextAttribute("1")]
internal static IReadOnlyList`1<IConnectedComponent`1<byte>> Create(IntPtr list, int length);
    internal static void DisposeList(IntPtr list);
}
public class ImageMagick.ConnectedComponentsSettings : object {
    [CompilerGeneratedAttribute]
private Nullable`1<Threshold> <AngleThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Threshold> <AreaThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Threshold> <CircularityThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Connectivity>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Threshold> <DiameterThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Threshold> <EccentricityThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Threshold> <MajorAxisThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MeanColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Threshold> <MinorAxisThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Threshold> <PerimeterThreshold>k__BackingField;
    public Nullable`1<Threshold> AngleThreshold { get; public set; }
    public Nullable`1<Threshold> AreaThreshold { get; public set; }
    public Nullable`1<Threshold> CircularityThreshold { get; public set; }
    public UInt32 Connectivity { get; public set; }
    public Nullable`1<Threshold> DiameterThreshold { get; public set; }
    public Nullable`1<Threshold> EccentricityThreshold { get; public set; }
    public Nullable`1<Threshold> MajorAxisThreshold { get; public set; }
    public bool MeanColor { get; public set; }
    public Nullable`1<Threshold> MinorAxisThreshold { get; public set; }
    public Nullable`1<Threshold> PerimeterThreshold { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Threshold> get_AngleThreshold();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AngleThreshold(Nullable`1<Threshold> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Threshold> get_AreaThreshold();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AreaThreshold(Nullable`1<Threshold> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Threshold> get_CircularityThreshold();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CircularityThreshold(Nullable`1<Threshold> value);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Connectivity();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Connectivity(UInt32 value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Threshold> get_DiameterThreshold();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DiameterThreshold(Nullable`1<Threshold> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Threshold> get_EccentricityThreshold();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EccentricityThreshold(Nullable`1<Threshold> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Threshold> get_MajorAxisThreshold();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MajorAxisThreshold(Nullable`1<Threshold> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_MeanColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MeanColor(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Threshold> get_MinorAxisThreshold();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MinorAxisThreshold(Nullable`1<Threshold> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Threshold> get_PerimeterThreshold();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PerimeterThreshold(Nullable`1<Threshold> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class ImageMagick.ConstNativeInstance : NativeHelper {
    private IntPtr _instance;
    public IntPtr Instance { get; public set; }
    public bool HasInstance { get; }
    protected string TypeName { get; }
    public IntPtr get_Instance();
    public void set_Instance(IntPtr value);
    public bool get_HasInstance();
    protected abstract virtual string get_TypeName();
}
public class ImageMagick.ConvolveMatrix : DoubleMatrix {
    public ConvolveMatrix(UInt32 order);
    [NullableContextAttribute("1")]
public ConvolveMatrix(UInt32 order, Double[] values);
    private static void CheckOrder(UInt32 order);
}
[ExtensionAttribute]
public static class ImageMagick.DensityExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IMagickGeometry ToGeometry(Density self, double width, double height);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ImageMagick.DistortSettings : object {
    [CompilerGeneratedAttribute]
private bool <Bestfit>k__BackingField;
    [CompilerGeneratedAttribute]
private DistortMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickGeometry <Viewport>k__BackingField;
    public bool Bestfit { get; public set; }
    public DistortMethod Method { get; }
    public Nullable`1<double> Scale { get; public set; }
    public IMagickGeometry Viewport { get; public set; }
    public DistortSettings(DistortMethod method);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Bestfit();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Bestfit(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual DistortMethod get_Method();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<double> get_Scale();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Scale(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public sealed virtual IMagickGeometry get_Viewport();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Viewport(IMagickGeometry value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public abstract class ImageMagick.DoubleMatrix : object {
    private Double[] _values;
    [CompilerGeneratedAttribute]
private UInt32 <Order>k__BackingField;
    public UInt32 Order { get; }
    public double Item { get; public set; }
    [NullableContextAttribute("2")]
protected DoubleMatrix(UInt32 order, Double[] values);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Order();
    public sealed virtual double get_Item(int x, int y);
    public sealed virtual void set_Item(int x, int y, double value);
    public sealed virtual double GetValue(int x, int y);
    public sealed virtual void SetColumn(int x, Double[] values);
    public sealed virtual void SetRow(int y, Double[] values);
    public sealed virtual void SetValue(int x, int y, double value);
    public sealed virtual Double[] ToArray();
    private static INativeInstance CreateNativeInstance(IDoubleMatrix instance);
    private int GetIndex(int x, int y);
    internal static INativeInstance CreateInstance(IDoubleMatrix instance);
}
public class ImageMagick.Drawing.DrawableAffine : object {
    [CompilerGeneratedAttribute]
private double <ScaleX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ScaleY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ShearX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ShearY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TranslateX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TranslateY>k__BackingField;
    public double ScaleX { get; private set; }
    public double ScaleY { get; private set; }
    public double ShearX { get; private set; }
    public double ShearY { get; private set; }
    public double TranslateX { get; private set; }
    public double TranslateY { get; private set; }
    public DrawableAffine(double scaleX, double scaleY, double shearX, double shearY, double translateX, double translateY);
    [CompilerGeneratedAttribute]
public sealed virtual double get_ScaleX();
    [CompilerGeneratedAttribute]
private void set_ScaleX(double value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_ScaleY();
    [CompilerGeneratedAttribute]
private void set_ScaleY(double value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_ShearX();
    [CompilerGeneratedAttribute]
private void set_ShearX(double value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_ShearY();
    [CompilerGeneratedAttribute]
private void set_ShearY(double value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_TranslateX();
    [CompilerGeneratedAttribute]
private void set_TranslateX(double value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_TranslateY();
    [CompilerGeneratedAttribute]
private void set_TranslateY(double value);
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
    public sealed virtual void Reset();
    public sealed virtual void TransformOrigin(double translateX, double translateY);
    public sealed virtual void TransformRotation(double angle);
    public sealed virtual void TransformScale(double scaleX, double scaleY);
    public sealed virtual void TransformSkewX(double skewX);
    public sealed virtual void TransformSkewY(double skewY);
    private static double DegreesToRadians(double x);
    [NullableContextAttribute("1")]
private void Transform(DrawableAffine affine);
}
public class ImageMagick.Drawing.DrawableAlpha : object {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private PaintMethod <PaintMethod>k__BackingField;
    public double X { get; }
    public double Y { get; }
    public PaintMethod PaintMethod { get; }
    public DrawableAlpha(double x, double y, PaintMethod paintMethod);
    [CompilerGeneratedAttribute]
public sealed virtual double get_X();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Y();
    [CompilerGeneratedAttribute]
public sealed virtual PaintMethod get_PaintMethod();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableArc : object {
    [CompilerGeneratedAttribute]
private double <StartX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StartY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <EndX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <EndY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StartDegrees>k__BackingField;
    [CompilerGeneratedAttribute]
private double <EndDegrees>k__BackingField;
    public double StartX { get; }
    public double StartY { get; }
    public double EndX { get; }
    public double EndY { get; }
    public double StartDegrees { get; }
    public double EndDegrees { get; }
    public DrawableArc(double startX, double startY, double endX, double endY, double startDegrees, double endDegrees);
    [CompilerGeneratedAttribute]
public sealed virtual double get_StartX();
    [CompilerGeneratedAttribute]
public sealed virtual double get_StartY();
    [CompilerGeneratedAttribute]
public sealed virtual double get_EndX();
    [CompilerGeneratedAttribute]
public sealed virtual double get_EndY();
    [CompilerGeneratedAttribute]
public sealed virtual double get_StartDegrees();
    [CompilerGeneratedAttribute]
public sealed virtual double get_EndDegrees();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.DrawableBezier : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PointD> <Coordinates>k__BackingField;
    public IReadOnlyList`1<PointD> Coordinates { get; }
    public DrawableBezier(PointD[] coordinates);
    public DrawableBezier(IEnumerable`1<PointD> coordinates);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<PointD> get_Coordinates();
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.DrawableBorderColor : object {
    [CompilerGeneratedAttribute]
private IMagickColor`1<byte> <Color>k__BackingField;
    public IMagickColor`1<byte> Color { get; }
    public DrawableBorderColor(IMagickColor`1<byte> color);
    [CompilerGeneratedAttribute]
public sealed virtual IMagickColor`1<byte> get_Color();
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableCircle : object {
    [CompilerGeneratedAttribute]
private double <OriginX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <OriginY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PerimeterX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PerimeterY>k__BackingField;
    public double OriginX { get; }
    public double OriginY { get; }
    public double PerimeterX { get; }
    public double PerimeterY { get; }
    public DrawableCircle(double originX, double originY, double perimeterX, double perimeterY);
    [CompilerGeneratedAttribute]
public sealed virtual double get_OriginX();
    [CompilerGeneratedAttribute]
public sealed virtual double get_OriginY();
    [CompilerGeneratedAttribute]
public sealed virtual double get_PerimeterX();
    [CompilerGeneratedAttribute]
public sealed virtual double get_PerimeterY();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.DrawableClipPath : object {
    [CompilerGeneratedAttribute]
private string <ClipPath>k__BackingField;
    public string ClipPath { get; }
    public DrawableClipPath(string clipPath);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClipPath();
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableClipRule : object {
    [CompilerGeneratedAttribute]
private FillRule <FillRule>k__BackingField;
    public FillRule FillRule { get; }
    public DrawableClipRule(FillRule fillRule);
    [CompilerGeneratedAttribute]
public sealed virtual FillRule get_FillRule();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableClipUnits : object {
    [CompilerGeneratedAttribute]
private ClipPathUnit <Units>k__BackingField;
    public ClipPathUnit Units { get; }
    public DrawableClipUnits(ClipPathUnit units);
    [CompilerGeneratedAttribute]
public sealed virtual ClipPathUnit get_Units();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableColor : object {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private PaintMethod <PaintMethod>k__BackingField;
    public double X { get; }
    public double Y { get; }
    public PaintMethod PaintMethod { get; }
    public DrawableColor(double x, double y, PaintMethod paintMethod);
    [CompilerGeneratedAttribute]
public sealed virtual double get_X();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Y();
    [CompilerGeneratedAttribute]
public sealed virtual PaintMethod get_PaintMethod();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.DrawableComposite : object {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private CompositeOperator <Compose>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickImage`1<byte> <Image>k__BackingField;
    public double X { get; }
    public double Y { get; }
    public double Width { get; }
    public double Height { get; }
    public CompositeOperator Compose { get; }
    public IMagickImage`1<byte> Image { get; }
    public DrawableComposite(double x, double y, CompositeOperator compose, IMagickImage`1<byte> image);
    public DrawableComposite(double x, double y, double width, double height, CompositeOperator compose, IMagickImage`1<byte> image);
    private DrawableComposite(IMagickImage`1<byte> image);
    [CompilerGeneratedAttribute]
public sealed virtual double get_X();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Y();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Width();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Height();
    [CompilerGeneratedAttribute]
public sealed virtual CompositeOperator get_Compose();
    [CompilerGeneratedAttribute]
public sealed virtual IMagickImage`1<byte> get_Image();
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal abstract class ImageMagick.Drawing.DrawableCoordinates`1 : object {
    private List`1<TCoordinateType> _coordinates;
    public int Count { get; }
    public TCoordinateType Item { get; }
    protected DrawableCoordinates`1(IEnumerable`1<TCoordinateType> coordinates, int minCount);
    public sealed virtual int get_Count();
    public sealed virtual TCoordinateType get_Item(int index);
    public sealed virtual IEnumerator`1<TCoordinateType> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private static List`1<TCoordinateType> CheckCoordinates(List`1<TCoordinateType> coordinates, int minCount);
}
public class ImageMagick.Drawing.DrawableDensity : object {
    [CompilerGeneratedAttribute]
private PointD <Density>k__BackingField;
    public PointD Density { get; }
    public DrawableDensity(double density);
    public DrawableDensity(PointD pointDensity);
    [CompilerGeneratedAttribute]
public sealed virtual PointD get_Density();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableEllipse : object {
    [CompilerGeneratedAttribute]
private double <OriginX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <OriginY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RadiusX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RadiusY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StartDegrees>k__BackingField;
    [CompilerGeneratedAttribute]
private double <EndDegrees>k__BackingField;
    public double OriginX { get; }
    public double OriginY { get; }
    public double RadiusX { get; }
    public double RadiusY { get; }
    public double StartDegrees { get; }
    public double EndDegrees { get; }
    public DrawableEllipse(double originX, double originY, double radiusX, double radiusY, double startDegrees, double endDegrees);
    [CompilerGeneratedAttribute]
public sealed virtual double get_OriginX();
    [CompilerGeneratedAttribute]
public sealed virtual double get_OriginY();
    [CompilerGeneratedAttribute]
public sealed virtual double get_RadiusX();
    [CompilerGeneratedAttribute]
public sealed virtual double get_RadiusY();
    [CompilerGeneratedAttribute]
public sealed virtual double get_StartDegrees();
    [CompilerGeneratedAttribute]
public sealed virtual double get_EndDegrees();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.DrawableFillColor : object {
    [CompilerGeneratedAttribute]
private IMagickColor`1<byte> <Color>k__BackingField;
    public IMagickColor`1<byte> Color { get; }
    public DrawableFillColor(IMagickColor`1<byte> color);
    [CompilerGeneratedAttribute]
public sealed virtual IMagickColor`1<byte> get_Color();
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableFillOpacity : object {
    [CompilerGeneratedAttribute]
private Percentage <Opacity>k__BackingField;
    public Percentage Opacity { get; }
    public DrawableFillOpacity(Percentage opacity);
    [CompilerGeneratedAttribute]
public sealed virtual Percentage get_Opacity();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.DrawableFillPatternUrl : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Url { get; }
    public DrawableFillPatternUrl(string url);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Url();
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableFillRule : object {
    [CompilerGeneratedAttribute]
private FillRule <FillRule>k__BackingField;
    public FillRule FillRule { get; }
    public DrawableFillRule(FillRule fillRule);
    [CompilerGeneratedAttribute]
public sealed virtual FillRule get_FillRule();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.DrawableFont : object {
    private static String[] _fontExtensions;
    [CompilerGeneratedAttribute]
private string <Family>k__BackingField;
    [CompilerGeneratedAttribute]
private FontStyleType <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private FontWeight <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private FontStretch <Stretch>k__BackingField;
    public string Family { get; }
    public FontStyleType Style { get; }
    public FontWeight Weight { get; }
    public FontStretch Stretch { get; }
    public DrawableFont(string family);
    public DrawableFont(string family, FontStyleType style, FontWeight weight, FontStretch stretch);
    private static DrawableFont();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Family();
    [CompilerGeneratedAttribute]
public sealed virtual FontStyleType get_Style();
    [CompilerGeneratedAttribute]
public sealed virtual FontWeight get_Weight();
    [CompilerGeneratedAttribute]
public sealed virtual FontStretch get_Stretch();
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableFontPointSize : object {
    [CompilerGeneratedAttribute]
private double <PointSize>k__BackingField;
    public double PointSize { get; }
    public DrawableFontPointSize(double pointSize);
    [CompilerGeneratedAttribute]
public sealed virtual double get_PointSize();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableGravity : object {
    [CompilerGeneratedAttribute]
private Gravity <Gravity>k__BackingField;
    public Gravity Gravity { get; }
    public DrawableGravity(Gravity gravity);
    [CompilerGeneratedAttribute]
public sealed virtual Gravity get_Gravity();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableLine : object {
    [CompilerGeneratedAttribute]
private double <StartX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StartY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <EndX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <EndY>k__BackingField;
    public double StartX { get; }
    public double StartY { get; }
    public double EndX { get; }
    public double EndY { get; }
    public DrawableLine(double startX, double startY, double endX, double endY);
    [CompilerGeneratedAttribute]
public sealed virtual double get_StartX();
    [CompilerGeneratedAttribute]
public sealed virtual double get_StartY();
    [CompilerGeneratedAttribute]
public sealed virtual double get_EndX();
    [CompilerGeneratedAttribute]
public sealed virtual double get_EndY();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.DrawablePath : object {
    private List`1<IPath> _paths;
    public IReadOnlyList`1<IPath> Paths { get; }
    public DrawablePath(IPath[] paths);
    public DrawablePath(IEnumerable`1<IPath> paths);
    public sealed virtual IReadOnlyList`1<IPath> get_Paths();
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawablePoint : object {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double X { get; }
    public double Y { get; }
    public DrawablePoint(double x, double y);
    [CompilerGeneratedAttribute]
public sealed virtual double get_X();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Y();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.DrawablePolygon : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PointD> <Coordinates>k__BackingField;
    public IReadOnlyList`1<PointD> Coordinates { get; }
    public DrawablePolygon(PointD[] coordinates);
    public DrawablePolygon(IEnumerable`1<PointD> coordinates);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<PointD> get_Coordinates();
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.DrawablePolyline : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PointD> <Coordinates>k__BackingField;
    public IReadOnlyList`1<PointD> Coordinates { get; }
    public DrawablePolyline(PointD[] coordinates);
    public DrawablePolyline(IEnumerable`1<PointD> coordinates);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<PointD> get_Coordinates();
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawablePopClipPath : object {
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawablePopGraphicContext : object {
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawablePopPattern : object {
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.DrawablePushClipPath : object {
    [CompilerGeneratedAttribute]
private string <ClipPath>k__BackingField;
    public string ClipPath { get; }
    public DrawablePushClipPath(string clipPath);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClipPath();
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawablePushGraphicContext : object {
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.DrawablePushPattern : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    public string Id { get; }
    public double X { get; }
    public double Y { get; }
    public double Width { get; }
    public double Height { get; }
    public DrawablePushPattern(string id, double x, double y, double width, double height);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual double get_X();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Y();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Width();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Height();
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableRectangle : object {
    [CompilerGeneratedAttribute]
private double <UpperLeftX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UpperLeftY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LowerRightX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LowerRightY>k__BackingField;
    public double UpperLeftX { get; }
    public double UpperLeftY { get; }
    public double LowerRightX { get; }
    public double LowerRightY { get; }
    public DrawableRectangle(double upperLeftX, double upperLeftY, double lowerRightX, double lowerRightY);
    [CompilerGeneratedAttribute]
public sealed virtual double get_UpperLeftX();
    [CompilerGeneratedAttribute]
public sealed virtual double get_UpperLeftY();
    [CompilerGeneratedAttribute]
public sealed virtual double get_LowerRightX();
    [CompilerGeneratedAttribute]
public sealed virtual double get_LowerRightY();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableRotation : object {
    [CompilerGeneratedAttribute]
private double <Angle>k__BackingField;
    public double Angle { get; }
    public DrawableRotation(double angle);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Angle();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableRoundRectangle : object {
    [CompilerGeneratedAttribute]
private double <UpperLeftX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UpperLeftY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LowerRightX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LowerRightY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CornerWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CornerHeight>k__BackingField;
    public double UpperLeftX { get; }
    public double UpperLeftY { get; }
    public double LowerRightX { get; }
    public double LowerRightY { get; }
    public double CornerWidth { get; }
    public double CornerHeight { get; }
    public DrawableRoundRectangle(double upperLeftX, double upperLeftY, double lowerRightX, double lowerRightY, double cornerWidth, double cornerHeight);
    [CompilerGeneratedAttribute]
public sealed virtual double get_UpperLeftX();
    [CompilerGeneratedAttribute]
public sealed virtual double get_UpperLeftY();
    [CompilerGeneratedAttribute]
public sealed virtual double get_LowerRightX();
    [CompilerGeneratedAttribute]
public sealed virtual double get_LowerRightY();
    [CompilerGeneratedAttribute]
public sealed virtual double get_CornerWidth();
    [CompilerGeneratedAttribute]
public sealed virtual double get_CornerHeight();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DrawablesAttribute]
public class ImageMagick.Drawing.Drawables : object {
    private Collection`1<IDrawable> _drawables;
    public sealed virtual IDrawables`1<byte> Composite(double x, double y, CompositeOperator compose, IMagickImage`1<byte> image);
    public sealed virtual IDrawables`1<byte> Density(double density);
    public sealed virtual IDrawables`1<byte> Draw(IMagickImage`1<byte> image);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IDrawables`1<byte> Font(string family);
    public sealed virtual ITypeMetric FontTypeMetrics(string text);
    public sealed virtual ITypeMetric FontTypeMetrics(string text, bool ignoreNewlines);
    public sealed virtual IPaths`1<byte> Paths();
    public sealed virtual IEnumerator`1<IDrawable> GetEnumerator();
    public sealed virtual IDrawables`1<byte> Affine(double scaleX, double scaleY, double shearX, double shearY, double translateX, double translateY);
    public sealed virtual IDrawables`1<byte> Alpha(double x, double y, PaintMethod paintMethod);
    public sealed virtual IDrawables`1<byte> Arc(double startX, double startY, double endX, double endY, double startDegrees, double endDegrees);
    public sealed virtual IDrawables`1<byte> Bezier(PointD[] coordinates);
    public sealed virtual IDrawables`1<byte> Bezier(IEnumerable`1<PointD> coordinates);
    public sealed virtual IDrawables`1<byte> BorderColor(IMagickColor`1<byte> color);
    public sealed virtual IDrawables`1<byte> Circle(double originX, double originY, double perimeterX, double perimeterY);
    public sealed virtual IDrawables`1<byte> ClipPath(string clipPath);
    public sealed virtual IDrawables`1<byte> ClipRule(FillRule fillRule);
    public sealed virtual IDrawables`1<byte> ClipUnits(ClipPathUnit units);
    public sealed virtual IDrawables`1<byte> Color(double x, double y, PaintMethod paintMethod);
    public sealed virtual IDrawables`1<byte> Composite(double x, double y, double width, double height, CompositeOperator compose, IMagickImage`1<byte> image);
    public sealed virtual IDrawables`1<byte> Density(PointD density);
    public sealed virtual IDrawables`1<byte> Ellipse(double originX, double originY, double radiusX, double radiusY, double startDegrees, double endDegrees);
    public sealed virtual IDrawables`1<byte> FillColor(IMagickColor`1<byte> color);
    public sealed virtual IDrawables`1<byte> FillOpacity(Percentage opacity);
    public sealed virtual IDrawables`1<byte> FillPatternUrl(string url);
    public sealed virtual IDrawables`1<byte> FillRule(FillRule fillRule);
    public sealed virtual IDrawables`1<byte> Font(string family, FontStyleType style, FontWeight weight, FontStretch stretch);
    public sealed virtual IDrawables`1<byte> FontPointSize(double pointSize);
    public sealed virtual IDrawables`1<byte> Gravity(Gravity gravity);
    public sealed virtual IDrawables`1<byte> Line(double startX, double startY, double endX, double endY);
    public sealed virtual IDrawables`1<byte> Path(IPath[] paths);
    public sealed virtual IDrawables`1<byte> Path(IEnumerable`1<IPath> paths);
    public sealed virtual IDrawables`1<byte> Point(double x, double y);
    public sealed virtual IDrawables`1<byte> Polygon(PointD[] coordinates);
    public sealed virtual IDrawables`1<byte> Polygon(IEnumerable`1<PointD> coordinates);
    public sealed virtual IDrawables`1<byte> Polyline(PointD[] coordinates);
    public sealed virtual IDrawables`1<byte> Polyline(IEnumerable`1<PointD> coordinates);
    public sealed virtual IDrawables`1<byte> PopClipPath();
    public sealed virtual IDrawables`1<byte> PopGraphicContext();
    public sealed virtual IDrawables`1<byte> PopPattern();
    public sealed virtual IDrawables`1<byte> PushClipPath(string clipPath);
    public sealed virtual IDrawables`1<byte> PushGraphicContext();
    public sealed virtual IDrawables`1<byte> PushPattern(string id, double x, double y, double width, double height);
    public sealed virtual IDrawables`1<byte> Rectangle(double upperLeftX, double upperLeftY, double lowerRightX, double lowerRightY);
    public sealed virtual IDrawables`1<byte> Rotation(double angle);
    public sealed virtual IDrawables`1<byte> RoundRectangle(double upperLeftX, double upperLeftY, double lowerRightX, double lowerRightY, double cornerWidth, double cornerHeight);
    public sealed virtual IDrawables`1<byte> Scaling(double x, double y);
    public sealed virtual IDrawables`1<byte> SkewX(double angle);
    public sealed virtual IDrawables`1<byte> SkewY(double angle);
    public sealed virtual IDrawables`1<byte> DisableStrokeAntialias();
    public sealed virtual IDrawables`1<byte> EnableStrokeAntialias();
    public sealed virtual IDrawables`1<byte> StrokeColor(IMagickColor`1<byte> color);
    public sealed virtual IDrawables`1<byte> StrokeDashArray(Double[] dash);
    public sealed virtual IDrawables`1<byte> StrokeDashArray(IEnumerable`1<double> dash);
    public sealed virtual IDrawables`1<byte> StrokeDashOffset(double offset);
    public sealed virtual IDrawables`1<byte> StrokeLineCap(LineCap lineCap);
    public sealed virtual IDrawables`1<byte> StrokeLineJoin(LineJoin lineJoin);
    public sealed virtual IDrawables`1<byte> StrokeMiterLimit(UInt32 miterlimit);
    public sealed virtual IDrawables`1<byte> StrokeOpacity(Percentage opacity);
    public sealed virtual IDrawables`1<byte> StrokePatternUrl(string url);
    public sealed virtual IDrawables`1<byte> StrokeWidth(double width);
    public sealed virtual IDrawables`1<byte> Text(double x, double y, string value);
    public sealed virtual IDrawables`1<byte> TextAlignment(TextAlignment alignment);
    public sealed virtual IDrawables`1<byte> DisableTextAntialias();
    public sealed virtual IDrawables`1<byte> EnableTextAntialias();
    public sealed virtual IDrawables`1<byte> TextDecoration(TextDecoration decoration);
    public sealed virtual IDrawables`1<byte> TextDirection(TextDirection direction);
    public sealed virtual IDrawables`1<byte> TextEncoding(Encoding encoding);
    public sealed virtual IDrawables`1<byte> TextInterlineSpacing(double spacing);
    public sealed virtual IDrawables`1<byte> TextInterwordSpacing(double spacing);
    public sealed virtual IDrawables`1<byte> TextKerning(double kerning);
    public sealed virtual IDrawables`1<byte> TextUnderColor(IMagickColor`1<byte> color);
    public sealed virtual IDrawables`1<byte> Translation(double x, double y);
    public sealed virtual IDrawables`1<byte> Viewbox(double upperLeftX, double upperLeftY, double lowerRightX, double lowerRightY);
}
public class ImageMagick.Drawing.DrawableScaling : object {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double X { get; }
    public double Y { get; }
    public DrawableScaling(double x, double y);
    [CompilerGeneratedAttribute]
public sealed virtual double get_X();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Y();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableSkewX : object {
    [CompilerGeneratedAttribute]
private double <Angle>k__BackingField;
    public double Angle { get; }
    public DrawableSkewX(double angle);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Angle();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableSkewY : object {
    [CompilerGeneratedAttribute]
private double <Angle>k__BackingField;
    public double Angle { get; }
    public DrawableSkewY(double angle);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Angle();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.DrawableStrokeAntialias : object {
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    public static DrawableStrokeAntialias Disabled { get; }
    public static DrawableStrokeAntialias Enabled { get; }
    public bool IsEnabled { get; public set; }
    private DrawableStrokeAntialias(bool isEnabled);
    public static DrawableStrokeAntialias get_Disabled();
    public static DrawableStrokeAntialias get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.DrawableStrokeColor : object {
    [CompilerGeneratedAttribute]
private IMagickColor`1<byte> <Color>k__BackingField;
    public IMagickColor`1<byte> Color { get; }
    public DrawableStrokeColor(IMagickColor`1<byte> color);
    [CompilerGeneratedAttribute]
public sealed virtual IMagickColor`1<byte> get_Color();
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.DrawableStrokeDashArray : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<double> <Dash>k__BackingField;
    public IReadOnlyList`1<double> Dash { get; }
    public DrawableStrokeDashArray(Double[] dash);
    public DrawableStrokeDashArray(IEnumerable`1<double> dash);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<double> get_Dash();
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableStrokeDashOffset : object {
    [CompilerGeneratedAttribute]
private double <Offset>k__BackingField;
    public double Offset { get; }
    public DrawableStrokeDashOffset(double offset);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Offset();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableStrokeLineCap : object {
    [CompilerGeneratedAttribute]
private LineCap <LineCap>k__BackingField;
    public LineCap LineCap { get; }
    public DrawableStrokeLineCap(LineCap lineCap);
    [CompilerGeneratedAttribute]
public sealed virtual LineCap get_LineCap();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableStrokeLineJoin : object {
    [CompilerGeneratedAttribute]
private LineJoin <LineJoin>k__BackingField;
    public LineJoin LineJoin { get; }
    public DrawableStrokeLineJoin(LineJoin lineJoin);
    [CompilerGeneratedAttribute]
public sealed virtual LineJoin get_LineJoin();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableStrokeMiterLimit : object {
    [CompilerGeneratedAttribute]
private UInt32 <Miterlimit>k__BackingField;
    public UInt32 Miterlimit { get; }
    public DrawableStrokeMiterLimit(UInt32 miterlimit);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Miterlimit();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableStrokeOpacity : object {
    [CompilerGeneratedAttribute]
private Percentage <Opacity>k__BackingField;
    public Percentage Opacity { get; }
    public DrawableStrokeOpacity(Percentage opacity);
    [CompilerGeneratedAttribute]
public sealed virtual Percentage get_Opacity();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.DrawableStrokePatternUrl : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Url { get; }
    public DrawableStrokePatternUrl(string url);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Url();
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableStrokeWidth : object {
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    public double Width { get; }
    public DrawableStrokeWidth(double width);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Width();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.DrawableText : object {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public double X { get; }
    public double Y { get; }
    public string Value { get; }
    public DrawableText(double x, double y, string value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_X();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Y();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Value();
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableTextAlignment : object {
    [CompilerGeneratedAttribute]
private TextAlignment <Alignment>k__BackingField;
    public TextAlignment Alignment { get; }
    public DrawableTextAlignment(TextAlignment alignment);
    [CompilerGeneratedAttribute]
public sealed virtual TextAlignment get_Alignment();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.DrawableTextAntialias : object {
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    public static DrawableTextAntialias Disabled { get; }
    public static DrawableTextAntialias Enabled { get; }
    public bool IsEnabled { get; }
    private DrawableTextAntialias(bool isEnabled);
    public static DrawableTextAntialias get_Disabled();
    public static DrawableTextAntialias get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEnabled();
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableTextDecoration : object {
    [CompilerGeneratedAttribute]
private TextDecoration <Decoration>k__BackingField;
    public TextDecoration Decoration { get; }
    public DrawableTextDecoration(TextDecoration decoration);
    [CompilerGeneratedAttribute]
public sealed virtual TextDecoration get_Decoration();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableTextDirection : object {
    [CompilerGeneratedAttribute]
private TextDirection <Direction>k__BackingField;
    public TextDirection Direction { get; }
    public DrawableTextDirection(TextDirection direction);
    [CompilerGeneratedAttribute]
public sealed virtual TextDirection get_Direction();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.DrawableTextEncoding : object {
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public Encoding Encoding { get; }
    public DrawableTextEncoding(Encoding encoding);
    [CompilerGeneratedAttribute]
public sealed virtual Encoding get_Encoding();
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableTextInterlineSpacing : object {
    [CompilerGeneratedAttribute]
private double <Spacing>k__BackingField;
    public double Spacing { get; }
    public DrawableTextInterlineSpacing(double spacing);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Spacing();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableTextInterwordSpacing : object {
    [CompilerGeneratedAttribute]
private double <Spacing>k__BackingField;
    public double Spacing { get; }
    public DrawableTextInterwordSpacing(double spacing);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Spacing();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableTextKerning : object {
    [CompilerGeneratedAttribute]
private double <Kerning>k__BackingField;
    public double Kerning { get; }
    public DrawableTextKerning(double kerning);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Kerning();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.DrawableTextUnderColor : object {
    [CompilerGeneratedAttribute]
private IMagickColor`1<byte> <Color>k__BackingField;
    public IMagickColor`1<byte> Color { get; }
    public DrawableTextUnderColor(IMagickColor`1<byte> color);
    [CompilerGeneratedAttribute]
public sealed virtual IMagickColor`1<byte> get_Color();
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableTranslation : object {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double X { get; }
    public double Y { get; }
    public DrawableTranslation(double x, double y);
    [CompilerGeneratedAttribute]
public sealed virtual double get_X();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Y();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.DrawableViewbox : object {
    [CompilerGeneratedAttribute]
private double <UpperLeftX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UpperLeftY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LowerRightX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LowerRightY>k__BackingField;
    public double UpperLeftX { get; }
    public double UpperLeftY { get; }
    public double LowerRightX { get; }
    public double LowerRightY { get; }
    public DrawableViewbox(double upperLeftX, double upperLeftY, double lowerRightX, double lowerRightY);
    [CompilerGeneratedAttribute]
public sealed virtual double get_UpperLeftX();
    [CompilerGeneratedAttribute]
public sealed virtual double get_UpperLeftY();
    [CompilerGeneratedAttribute]
public sealed virtual double get_LowerRightX();
    [CompilerGeneratedAttribute]
public sealed virtual double get_LowerRightY();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.Drawing.DrawingWand : object {
    private NativeDrawingWand _nativeInstance;
    public DrawingWand(IMagickImage`1<byte> image);
    public void Draw(IEnumerable`1<IDrawable> drawables);
    public void Affine(double scaleX, double scaleY, double shearX, double shearY, double translateX, double translateY);
    public void Alpha(double x, double y, PaintMethod paintMethod);
    public void Arc(double startX, double startY, double endX, double endY, double startDegrees, double endDegrees);
    public void Bezier(IReadOnlyList`1<PointD> coordinates);
    public void BorderColor(IMagickColor`1<byte> color);
    public void Circle(double originX, double originY, double perimeterX, double perimeterY);
    public void ClipPath(string value);
    public void ClipRule(FillRule value);
    public void ClipUnits(ClipPathUnit value);
    public void Color(double x, double y, PaintMethod paintMethod);
    public void Composite(double x, double y, double width, double height, CompositeOperator compositeOperator, IMagickImage`1<byte> image);
    public void Density(PointD value);
    public sealed virtual void Dispose();
    public void Ellipse(double originX, double originY, double radiusX, double radiusY, double startDegrees, double endDegrees);
    public void FillColor(IMagickColor`1<byte> color);
    public void FillOpacity(double value);
    public void FillPatternUrl(string url);
    public void FillRule(FillRule value);
    public void Font(string fontName);
    public void FontFamily(string family, FontStyleType style, FontWeight weight, FontStretch stretch);
    public void FontPointSize(double value);
    public ITypeMetric FontTypeMetrics(string text, bool ignoreNewlines);
    public void Gravity(Gravity value);
    public void Line(double startX, double startY, double endX, double endY);
    public void PathArcAbs(IEnumerable`1<PathArc> pathArcs);
    public void PathArcRel(IEnumerable`1<PathArc> pathArcs);
    public void PathClose();
    public void PathCurveToAbs(PointD controlPointStart, PointD controlPointEnd, PointD endPoint);
    public void PathCurveToRel(PointD controlPointStart, PointD controlPointEnd, PointD endPoint);
    public void PathFinish();
    public void PathLineToAbs(IEnumerable`1<PointD> coordinates);
    public void PathLineToHorizontalAbs(double x);
    public void PathLineToVerticalRel(double y);
    public void PathLineToHorizontalRel(double x);
    public void PathLineToVerticalAbs(double y);
    public void PathLineToRel(IEnumerable`1<PointD> coordinates);
    public void PathMoveToAbs(PointD coordinate);
    public void PathMoveToRel(PointD coordinate);
    public void PathQuadraticCurveToAbs(PointD controlPoint, PointD endPoint);
    public void PathQuadraticCurveToRel(PointD controlPoint, PointD endPoint);
    public void PathSmoothCurveToAbs(PointD controlPoint, PointD endPoint);
    public void PathSmoothCurveToRel(PointD controlPoint, PointD endPoint);
    public void PathSmoothQuadraticCurveToAbs(PointD endPoint);
    public void PathSmoothQuadraticCurveToRel(PointD endPoint);
    public void PathStart();
    public void Point(double x, double y);
    public void Polygon(IReadOnlyList`1<PointD> coordinates);
    public void Polyline(IReadOnlyList`1<PointD> coordinates);
    public void PopClipPath();
    public void PopGraphicContext();
    public void PopPattern();
    public void PushClipPath(string clipPath);
    public void PushGraphicContext();
    public void PushPattern(string id, double x, double y, double width, double height);
    public void Rectangle(double upperLeftX, double upperLeftY, double lowerRightX, double lowerRightY);
    public void Rotation(double angle);
    public void RoundRectangle(double upperLeftX, double upperLeftY, double lowerRightX, double lowerRightY, double cornerWidth, double cornerHeight);
    public void Scaling(double x, double y);
    public void SkewX(double angle);
    public void SkewY(double angle);
    public void StrokeAntialias(bool isEnabled);
    public void StrokeColor(IMagickColor`1<byte> color);
    public void StrokeDashArray(Double[] dash);
    public void StrokeDashOffset(double value);
    public void StrokeLineCap(LineCap value);
    public void StrokeLineJoin(LineJoin value);
    public void StrokeMiterLimit(UInt32 value);
    public void StrokeOpacity(double value);
    public void StrokePatternUrl(string url);
    public void StrokeWidth(double value);
    public void Text(double x, double y, string value);
    public void TextAlignment(TextAlignment value);
    public void TextAntialias(bool isEnabled);
    public void TextDecoration(TextDecoration value);
    public void TextDirection(TextDirection value);
    public void TextEncoding(Encoding value);
    public void TextInterlineSpacing(double spacing);
    public void TextInterwordSpacing(double spacing);
    public void TextKerning(double value);
    public void TextUnderColor(IMagickColor`1<byte> color);
    public void Translation(double x, double y);
    public void Viewbox(double upperLeftX, double upperLeftY, double lowerRightX, double lowerRightY);
}
[NullableContextAttribute("1")]
internal interface ImageMagick.Drawing.IDrawingWand {
    public abstract virtual void Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.PathArcAbs : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PathArc> <Coordinates>k__BackingField;
    public IReadOnlyList`1<PathArc> Coordinates { get; }
    public PathArcAbs(PathArc[] coordinates);
    public PathArcAbs(IEnumerable`1<PathArc> coordinates);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<PathArc> get_Coordinates();
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class ImageMagick.Drawing.PathArcCoordinates : DrawableCoordinates`1<PathArc> {
    public PathArcCoordinates(IEnumerable`1<PathArc> coordinates);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.PathArcRel : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PathArc> <Coordinates>k__BackingField;
    public IReadOnlyList`1<PathArc> Coordinates { get; }
    public PathArcRel(PathArc[] coordinates);
    public PathArcRel(IEnumerable`1<PathArc> coordinates);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<PathArc> get_Coordinates();
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.PathClose : object {
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.PathCurveToAbs : object {
    [CompilerGeneratedAttribute]
private PointD <ControlPointStart>k__BackingField;
    [CompilerGeneratedAttribute]
private PointD <ControlPointEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private PointD <End>k__BackingField;
    public PointD ControlPointStart { get; }
    public PointD ControlPointEnd { get; }
    public PointD End { get; }
    public PathCurveToAbs(double x1, double y1, double x2, double y2, double x, double y);
    public PathCurveToAbs(PointD controlPointStart, PointD controlPointEnd, PointD end);
    [CompilerGeneratedAttribute]
public sealed virtual PointD get_ControlPointStart();
    [CompilerGeneratedAttribute]
public sealed virtual PointD get_ControlPointEnd();
    [CompilerGeneratedAttribute]
public sealed virtual PointD get_End();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.PathCurveToRel : object {
    [CompilerGeneratedAttribute]
private PointD <ControlPointStart>k__BackingField;
    [CompilerGeneratedAttribute]
private PointD <ControlPointEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private PointD <End>k__BackingField;
    public PointD ControlPointStart { get; }
    public PointD ControlPointEnd { get; }
    public PointD End { get; }
    public PathCurveToRel(double x1, double y1, double x2, double y2, double x, double y);
    public PathCurveToRel(PointD controlPointStart, PointD controlPointEnd, PointD end);
    [CompilerGeneratedAttribute]
public sealed virtual PointD get_ControlPointStart();
    [CompilerGeneratedAttribute]
public sealed virtual PointD get_ControlPointEnd();
    [CompilerGeneratedAttribute]
public sealed virtual PointD get_End();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.PathLineToAbs : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PointD> <Coordinates>k__BackingField;
    public IReadOnlyList`1<PointD> Coordinates { get; }
    public PathLineToAbs(double x, double y);
    public PathLineToAbs(PointD[] coordinates);
    public PathLineToAbs(IEnumerable`1<PointD> coordinates);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<PointD> get_Coordinates();
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.PathLineToHorizontalAbs : object {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    public double X { get; }
    public PathLineToHorizontalAbs(double x);
    [CompilerGeneratedAttribute]
public sealed virtual double get_X();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.PathLineToHorizontalRel : object {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    public double X { get; }
    public PathLineToHorizontalRel(double x);
    [CompilerGeneratedAttribute]
public sealed virtual double get_X();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Drawing.PathLineToRel : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PointD> <Coordinates>k__BackingField;
    public IReadOnlyList`1<PointD> Coordinates { get; }
    public PathLineToRel(double x, double y);
    public PathLineToRel(PointD[] coordinates);
    public PathLineToRel(IEnumerable`1<PointD> coordinates);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<PointD> get_Coordinates();
    private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.PathLineToVerticalAbs : object {
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double Y { get; }
    public PathLineToVerticalAbs(double y);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Y();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.PathLineToVerticalRel : object {
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double Y { get; }
    public PathLineToVerticalRel(double y);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Y();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.PathMoveToAbs : object {
    [CompilerGeneratedAttribute]
private PointD <Coordinate>k__BackingField;
    public PointD Coordinate { get; }
    public PathMoveToAbs(double x, double y);
    public PathMoveToAbs(PointD coordinate);
    [CompilerGeneratedAttribute]
public sealed virtual PointD get_Coordinate();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.PathMoveToRel : object {
    [CompilerGeneratedAttribute]
private PointD <Coordinate>k__BackingField;
    public PointD Coordinate { get; }
    public PathMoveToRel(double x, double y);
    public PathMoveToRel(PointD coordinate);
    [CompilerGeneratedAttribute]
public sealed virtual PointD get_Coordinate();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.PathQuadraticCurveToAbs : object {
    [CompilerGeneratedAttribute]
private PointD <ControlPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private PointD <End>k__BackingField;
    public PointD ControlPoint { get; }
    public PointD End { get; }
    public PathQuadraticCurveToAbs(double x1, double y1, double x, double y);
    public PathQuadraticCurveToAbs(PointD controlPoint, PointD end);
    [CompilerGeneratedAttribute]
public sealed virtual PointD get_ControlPoint();
    [CompilerGeneratedAttribute]
public sealed virtual PointD get_End();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.PathQuadraticCurveToRel : object {
    [CompilerGeneratedAttribute]
private PointD <ControlPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private PointD <End>k__BackingField;
    public PointD ControlPoint { get; }
    public PointD End { get; }
    public PathQuadraticCurveToRel(double x1, double y1, double x, double y);
    public PathQuadraticCurveToRel(PointD controlPoint, PointD end);
    [CompilerGeneratedAttribute]
public sealed virtual PointD get_ControlPoint();
    [CompilerGeneratedAttribute]
public sealed virtual PointD get_End();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PathsAttribute]
public class ImageMagick.Drawing.Paths : object {
    [NullableAttribute("2")]
private Drawables _drawables;
    private Collection`1<IPath> _paths;
    internal Paths(Drawables drawables);
    public sealed virtual IPaths`1<byte> CurveToAbs(double x1, double y1, double x2, double y2, double x, double y);
    public sealed virtual IPaths`1<byte> CurveToRel(double x1, double y1, double x2, double y2, double x, double y);
    public sealed virtual IDrawables`1<byte> Drawables();
    public sealed virtual IEnumerator`1<IPath> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IPaths`1<byte> LineToAbs(double x, double y);
    public sealed virtual IPaths`1<byte> LineToRel(double x, double y);
    public sealed virtual IPaths`1<byte> MoveToAbs(double x, double y);
    public sealed virtual IPaths`1<byte> MoveToRel(double x, double y);
    public sealed virtual IPaths`1<byte> QuadraticCurveToAbs(double x1, double y1, double x, double y);
    public sealed virtual IPaths`1<byte> QuadraticCurveToRel(double x1, double y1, double x, double y);
    public sealed virtual IPaths`1<byte> SmoothCurveToAbs(double x2, double y2, double x, double y);
    public sealed virtual IPaths`1<byte> SmoothCurveToRel(double x2, double y2, double x, double y);
    public sealed virtual IPaths`1<byte> SmoothQuadraticCurveToAbs(double x, double y);
    public sealed virtual IPaths`1<byte> SmoothQuadraticCurveToRel(double x, double y);
    public sealed virtual IPaths`1<byte> ArcAbs(PathArc[] coordinates);
    public sealed virtual IPaths`1<byte> ArcAbs(IEnumerable`1<PathArc> coordinates);
    public sealed virtual IPaths`1<byte> ArcRel(PathArc[] coordinates);
    public sealed virtual IPaths`1<byte> ArcRel(IEnumerable`1<PathArc> coordinates);
    public sealed virtual IPaths`1<byte> Close();
    public sealed virtual IPaths`1<byte> CurveToAbs(PointD controlPointStart, PointD controlPointEnd, PointD end);
    public sealed virtual IPaths`1<byte> CurveToRel(PointD controlPointStart, PointD controlPointEnd, PointD end);
    public sealed virtual IPaths`1<byte> LineToAbs(PointD[] coordinates);
    public sealed virtual IPaths`1<byte> LineToAbs(IEnumerable`1<PointD> coordinates);
    public sealed virtual IPaths`1<byte> LineToHorizontalAbs(double x);
    public sealed virtual IPaths`1<byte> LineToHorizontalRel(double x);
    public sealed virtual IPaths`1<byte> LineToRel(PointD[] coordinates);
    public sealed virtual IPaths`1<byte> LineToRel(IEnumerable`1<PointD> coordinates);
    public sealed virtual IPaths`1<byte> LineToVerticalAbs(double y);
    public sealed virtual IPaths`1<byte> LineToVerticalRel(double y);
    public sealed virtual IPaths`1<byte> MoveToAbs(PointD coordinate);
    public sealed virtual IPaths`1<byte> MoveToRel(PointD coordinate);
    public sealed virtual IPaths`1<byte> QuadraticCurveToAbs(PointD controlPoint, PointD end);
    public sealed virtual IPaths`1<byte> QuadraticCurveToRel(PointD controlPoint, PointD end);
    public sealed virtual IPaths`1<byte> SmoothCurveToAbs(PointD controlPoint, PointD end);
    public sealed virtual IPaths`1<byte> SmoothCurveToRel(PointD controlPoint, PointD end);
    public sealed virtual IPaths`1<byte> SmoothQuadraticCurveToAbs(PointD end);
    public sealed virtual IPaths`1<byte> SmoothQuadraticCurveToRel(PointD end);
}
public class ImageMagick.Drawing.PathSmoothCurveToAbs : object {
    [CompilerGeneratedAttribute]
private PointD <ControlPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private PointD <End>k__BackingField;
    public PointD ControlPoint { get; }
    public PointD End { get; }
    public PathSmoothCurveToAbs(double x2, double y2, double x, double y);
    public PathSmoothCurveToAbs(PointD controlPoint, PointD end);
    [CompilerGeneratedAttribute]
public sealed virtual PointD get_ControlPoint();
    [CompilerGeneratedAttribute]
public sealed virtual PointD get_End();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.PathSmoothCurveToRel : object {
    [CompilerGeneratedAttribute]
private PointD <ControlPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private PointD <End>k__BackingField;
    public PointD ControlPoint { get; }
    public PointD End { get; }
    public PathSmoothCurveToRel(double x2, double y2, double x, double y);
    public PathSmoothCurveToRel(PointD controlPoint, PointD end);
    [CompilerGeneratedAttribute]
public PointD get_ControlPoint();
    [CompilerGeneratedAttribute]
public PointD get_End();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.PathSmoothQuadraticCurveToAbs : object {
    [CompilerGeneratedAttribute]
private PointD <End>k__BackingField;
    public PointD End { get; }
    public PathSmoothQuadraticCurveToAbs(double x, double y);
    public PathSmoothQuadraticCurveToAbs(PointD end);
    [CompilerGeneratedAttribute]
public sealed virtual PointD get_End();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
public class ImageMagick.Drawing.PathSmoothQuadraticCurveToRel : object {
    [CompilerGeneratedAttribute]
private PointD <End>k__BackingField;
    public PointD End { get; }
    public PathSmoothQuadraticCurveToRel(double x, double y);
    public PathSmoothQuadraticCurveToRel(PointD end);
    [CompilerGeneratedAttribute]
public sealed virtual PointD get_End();
    [NullableContextAttribute("1")]
private sealed virtual override void ImageMagick.Drawing.IDrawingWand.Draw(DrawingWand wand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.Drawing.PointDCoordinates : DrawableCoordinates`1<PointD> {
    public PointDCoordinates(IEnumerable`1<PointD> coordinates);
    public PointDCoordinates(IEnumerable`1<PointD> coordinates, int minCount);
    public PointDCoordinates(PointD[] coordinates);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class ImageMagick.DrawingSettings : object {
    private Double[] _strokeDashArray;
    [CompilerGeneratedAttribute]
private IDrawableAffine <Affine>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickColor`1<byte> <BorderColor>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickColor`1<byte> <FillColor>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickImage`1<byte> <FillPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private FillRule <FillRule>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FontPointsize>k__BackingField;
    [CompilerGeneratedAttribute]
private FontStyleType <FontStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private FontWeight <FontWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StrokeAntiAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickColor`1<byte> <StrokeColor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeDashOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private LineCap <StrokeLineCap>k__BackingField;
    [CompilerGeneratedAttribute]
private LineJoin <StrokeLineJoin>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <StrokeMiterLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickImage`1<byte> <StrokePattern>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TextAntiAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private TextDirection <TextDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <TextEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private Gravity <TextGravity>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TextInterlineSpacing>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TextInterwordSpacing>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TextKerning>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickColor`1<byte> <TextUnderColor>k__BackingField;
    public IDrawableAffine Affine { get; public set; }
    public IMagickColor`1<byte> BorderColor { get; public set; }
    public IMagickColor`1<byte> FillColor { get; public set; }
    public IMagickImage`1<byte> FillPattern { get; public set; }
    public FillRule FillRule { get; public set; }
    public string Font { get; public set; }
    public string FontFamily { get; public set; }
    public double FontPointsize { get; public set; }
    public FontStyleType FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public bool StrokeAntiAlias { get; public set; }
    public IMagickColor`1<byte> StrokeColor { get; public set; }
    public IEnumerable`1<double> StrokeDashArray { get; public set; }
    public double StrokeDashOffset { get; public set; }
    public LineCap StrokeLineCap { get; public set; }
    public LineJoin StrokeLineJoin { get; public set; }
    public UInt32 StrokeMiterLimit { get; public set; }
    public IMagickImage`1<byte> StrokePattern { get; public set; }
    public double StrokeWidth { get; public set; }
    public string Text { get; public set; }
    public bool TextAntiAlias { get; public set; }
    public TextDirection TextDirection { get; public set; }
    public Encoding TextEncoding { get; public set; }
    public Gravity TextGravity { get; public set; }
    public double TextInterlineSpacing { get; public set; }
    public double TextInterwordSpacing { get; public set; }
    public double TextKerning { get; public set; }
    public IMagickColor`1<byte> TextUnderColor { get; public set; }
    [CompilerGeneratedAttribute]
public IDrawableAffine get_Affine();
    [CompilerGeneratedAttribute]
public void set_Affine(IDrawableAffine value);
    [CompilerGeneratedAttribute]
public IMagickColor`1<byte> get_BorderColor();
    [CompilerGeneratedAttribute]
public void set_BorderColor(IMagickColor`1<byte> value);
    [CompilerGeneratedAttribute]
public IMagickColor`1<byte> get_FillColor();
    [CompilerGeneratedAttribute]
public void set_FillColor(IMagickColor`1<byte> value);
    [CompilerGeneratedAttribute]
public IMagickImage`1<byte> get_FillPattern();
    [CompilerGeneratedAttribute]
public void set_FillPattern(IMagickImage`1<byte> value);
    [CompilerGeneratedAttribute]
public FillRule get_FillRule();
    [CompilerGeneratedAttribute]
public void set_FillRule(FillRule value);
    [CompilerGeneratedAttribute]
public string get_Font();
    [CompilerGeneratedAttribute]
public void set_Font(string value);
    [CompilerGeneratedAttribute]
public string get_FontFamily();
    [CompilerGeneratedAttribute]
public void set_FontFamily(string value);
    [CompilerGeneratedAttribute]
public double get_FontPointsize();
    [CompilerGeneratedAttribute]
public void set_FontPointsize(double value);
    [CompilerGeneratedAttribute]
public FontStyleType get_FontStyle();
    [CompilerGeneratedAttribute]
public void set_FontStyle(FontStyleType value);
    [CompilerGeneratedAttribute]
public FontWeight get_FontWeight();
    [CompilerGeneratedAttribute]
public void set_FontWeight(FontWeight value);
    [CompilerGeneratedAttribute]
public bool get_StrokeAntiAlias();
    [CompilerGeneratedAttribute]
public void set_StrokeAntiAlias(bool value);
    [CompilerGeneratedAttribute]
public IMagickColor`1<byte> get_StrokeColor();
    [CompilerGeneratedAttribute]
public void set_StrokeColor(IMagickColor`1<byte> value);
    public IEnumerable`1<double> get_StrokeDashArray();
    public void set_StrokeDashArray(IEnumerable`1<double> value);
    [CompilerGeneratedAttribute]
public double get_StrokeDashOffset();
    [CompilerGeneratedAttribute]
public void set_StrokeDashOffset(double value);
    [CompilerGeneratedAttribute]
public LineCap get_StrokeLineCap();
    [CompilerGeneratedAttribute]
public void set_StrokeLineCap(LineCap value);
    [CompilerGeneratedAttribute]
public LineJoin get_StrokeLineJoin();
    [CompilerGeneratedAttribute]
public void set_StrokeLineJoin(LineJoin value);
    [CompilerGeneratedAttribute]
public UInt32 get_StrokeMiterLimit();
    [CompilerGeneratedAttribute]
public void set_StrokeMiterLimit(UInt32 value);
    [CompilerGeneratedAttribute]
public IMagickImage`1<byte> get_StrokePattern();
    [CompilerGeneratedAttribute]
public void set_StrokePattern(IMagickImage`1<byte> value);
    [CompilerGeneratedAttribute]
public double get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(double value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public bool get_TextAntiAlias();
    [CompilerGeneratedAttribute]
public void set_TextAntiAlias(bool value);
    [CompilerGeneratedAttribute]
public TextDirection get_TextDirection();
    [CompilerGeneratedAttribute]
public void set_TextDirection(TextDirection value);
    [CompilerGeneratedAttribute]
public Encoding get_TextEncoding();
    [CompilerGeneratedAttribute]
public void set_TextEncoding(Encoding value);
    [CompilerGeneratedAttribute]
public Gravity get_TextGravity();
    [CompilerGeneratedAttribute]
public void set_TextGravity(Gravity value);
    [CompilerGeneratedAttribute]
public double get_TextInterlineSpacing();
    [CompilerGeneratedAttribute]
public void set_TextInterlineSpacing(double value);
    [CompilerGeneratedAttribute]
public double get_TextInterwordSpacing();
    [CompilerGeneratedAttribute]
public void set_TextInterwordSpacing(double value);
    [CompilerGeneratedAttribute]
public double get_TextKerning();
    [CompilerGeneratedAttribute]
public void set_TextKerning(double value);
    [CompilerGeneratedAttribute]
public IMagickColor`1<byte> get_TextUnderColor();
    [CompilerGeneratedAttribute]
public void set_TextUnderColor(IMagickColor`1<byte> value);
    [NullableContextAttribute("1")]
internal DrawingSettings Clone();
    [NullableContextAttribute("1")]
private static Encoding GetTextEncoding(NativeDrawingSettings instance);
    [NullableContextAttribute("1")]
private NativeDrawingSettings CreateNativeInstance();
    [NullableContextAttribute("1")]
internal static INativeInstance CreateInstance(DrawingSettings instance);
}
internal static class ImageMagick.EnumHelper : object {
    public static string ConvertFlags(TEnum value);
    [NullableContextAttribute("1")]
public static string GetName(Enum value);
    public static bool HasFlag(TEnum value, TEnum flag);
    public static TEnum Parse(int value, TEnum defaultValue);
    public static TEnum Parse(string value, TEnum defaultValue);
    public static TEnum Parse(ushort value, TEnum defaultValue);
    [NullableContextAttribute("1")]
public static MagickFormat ParseMagickFormatFromExtension(FileInfo file);
    private static TEnum Parse(object value, TEnum defaultValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ImageMagick.Environment : object {
    private static object _lock;
    private static bool _initialized;
    private static Environment();
    public static void Initialize();
    public static string GetEnv(string name);
    public static void SetEnv(string name, string value);
}
internal enum ImageMagick.ExceptionSeverity : Enum {
    public int value__;
    public static ExceptionSeverity Undefined;
    public static ExceptionSeverity Warning;
    public static ExceptionSeverity ResourceLimitWarning;
    public static ExceptionSeverity TypeWarning;
    public static ExceptionSeverity OptionWarning;
    public static ExceptionSeverity DelegateWarning;
    public static ExceptionSeverity MissingDelegateWarning;
    public static ExceptionSeverity CorruptImageWarning;
    public static ExceptionSeverity FileOpenWarning;
    public static ExceptionSeverity BlobWarning;
    public static ExceptionSeverity StreamWarning;
    public static ExceptionSeverity CacheWarning;
    public static ExceptionSeverity CoderWarning;
    public static ExceptionSeverity FilterWarning;
    public static ExceptionSeverity ModuleWarning;
    public static ExceptionSeverity DrawWarning;
    public static ExceptionSeverity ImageWarning;
    public static ExceptionSeverity WandWarning;
    public static ExceptionSeverity RandomWarning;
    public static ExceptionSeverity XServerWarning;
    public static ExceptionSeverity MonitorWarning;
    public static ExceptionSeverity RegistryWarning;
    public static ExceptionSeverity ConfigureWarning;
    public static ExceptionSeverity PolicyWarning;
    public static ExceptionSeverity Error;
    public static ExceptionSeverity ResourceLimitError;
    public static ExceptionSeverity TypeError;
    public static ExceptionSeverity OptionError;
    public static ExceptionSeverity DelegateError;
    public static ExceptionSeverity MissingDelegateError;
    public static ExceptionSeverity CorruptImageError;
    public static ExceptionSeverity FileOpenError;
    public static ExceptionSeverity BlobError;
    public static ExceptionSeverity StreamError;
    public static ExceptionSeverity CacheError;
    public static ExceptionSeverity CoderError;
    public static ExceptionSeverity FilterError;
    public static ExceptionSeverity ModuleError;
    public static ExceptionSeverity DrawError;
    public static ExceptionSeverity ImageError;
    public static ExceptionSeverity WandError;
    public static ExceptionSeverity RandomError;
    public static ExceptionSeverity XServerError;
    public static ExceptionSeverity MonitorError;
    public static ExceptionSeverity RegistryError;
    public static ExceptionSeverity ConfigureError;
    public static ExceptionSeverity PolicyError;
}
public class ImageMagick.Factories.DrawablesFactory : object {
    [NullableContextAttribute("1")]
public sealed virtual IDrawables`1<byte> Create();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Factories.MagickColorFactory : object {
    public sealed virtual IMagickColor`1<byte> Create();
    public sealed virtual IMagickColor`1<byte> Create(IMagickColor`1<byte> color);
    public sealed virtual IMagickColor`1<byte> Create(byte red, byte green, byte blue);
    public sealed virtual IMagickColor`1<byte> Create(byte red, byte green, byte blue, byte alpha);
    public sealed virtual IMagickColor`1<byte> Create(byte cyan, byte magenta, byte yellow, byte black, byte alpha);
    public sealed virtual IMagickColor`1<byte> Create(string color);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Factories.MagickFactory : object {
    [CompilerGeneratedAttribute]
private IMagickColorFactory`1<byte> <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickColors`1<byte> <Colors>k__BackingField;
    [CompilerGeneratedAttribute]
private IDrawablesFactory`1<byte> <Drawables>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickGeometryFactory <Geometry>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickImageFactory`1<byte> <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickImageCollectionFactory`1<byte> <ImageCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickImageInfoFactory <ImageInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickNET <MagickNET>k__BackingField;
    [CompilerGeneratedAttribute]
private IMatrixFactory <Matrix>k__BackingField;
    [CompilerGeneratedAttribute]
private IOpenCL <OpenCL>k__BackingField;
    [CompilerGeneratedAttribute]
private IQuantum`1<byte> <Quantum>k__BackingField;
    [CompilerGeneratedAttribute]
private IResourceLimits <ResourceLimits>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingsFactory`1<byte> <Settings>k__BackingField;
    public IMagickColorFactory`1<byte> Color { get; }
    public IMagickColors`1<byte> Colors { get; }
    public IConfigurationFiles ConfigurationFiles { get; }
    public IDrawablesFactory`1<byte> Drawables { get; }
    public IMagickGeometryFactory Geometry { get; }
    public IMagickImageFactory`1<byte> Image { get; }
    public IMagickImageCollectionFactory`1<byte> ImageCollection { get; }
    public IMagickImageInfoFactory ImageInfo { get; }
    public IMagickNET MagickNET { get; }
    public IMatrixFactory Matrix { get; }
    public IOpenCL OpenCL { get; }
    public IQuantum`1<byte> Quantum { get; }
    public IResourceLimits ResourceLimits { get; }
    public ISettingsFactory`1<byte> Settings { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IMagickColorFactory`1<byte> get_Color();
    [CompilerGeneratedAttribute]
public sealed virtual IMagickColors`1<byte> get_Colors();
    public sealed virtual IConfigurationFiles get_ConfigurationFiles();
    [CompilerGeneratedAttribute]
public sealed virtual IDrawablesFactory`1<byte> get_Drawables();
    [CompilerGeneratedAttribute]
public sealed virtual IMagickGeometryFactory get_Geometry();
    [CompilerGeneratedAttribute]
public sealed virtual IMagickImageFactory`1<byte> get_Image();
    [CompilerGeneratedAttribute]
public sealed virtual IMagickImageCollectionFactory`1<byte> get_ImageCollection();
    [CompilerGeneratedAttribute]
public sealed virtual IMagickImageInfoFactory get_ImageInfo();
    [CompilerGeneratedAttribute]
public sealed virtual IMagickNET get_MagickNET();
    [CompilerGeneratedAttribute]
public sealed virtual IMatrixFactory get_Matrix();
    [CompilerGeneratedAttribute]
public sealed virtual IOpenCL get_OpenCL();
    [CompilerGeneratedAttribute]
public sealed virtual IQuantum`1<byte> get_Quantum();
    [CompilerGeneratedAttribute]
public sealed virtual IResourceLimits get_ResourceLimits();
    [CompilerGeneratedAttribute]
public sealed virtual ISettingsFactory`1<byte> get_Settings();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Factories.MagickGeometryFactory : object {
    public sealed virtual IMagickGeometry Create();
    public sealed virtual IMagickGeometry Create(UInt32 widthAndHeight);
    public sealed virtual IMagickGeometry Create(UInt32 width, UInt32 height);
    public sealed virtual IMagickGeometry Create(int x, int y, UInt32 width, UInt32 height);
    public sealed virtual IMagickGeometry Create(Percentage percentageWidth, Percentage percentageHeight);
    public sealed virtual IMagickGeometry Create(int x, int y, Percentage percentageWidth, Percentage percentageHeight);
    public sealed virtual IMagickGeometry Create(string value);
    public sealed virtual IMagickGeometry CreateFromPageSize(string pageSize);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Factories.MagickImageCollectionFactory : object {
    public sealed virtual IMagickImageCollection`1<byte> Create();
    public sealed virtual IMagickImageCollection`1<byte> Create(Byte[] data);
    public sealed virtual IMagickImageCollection`1<byte> Create(Byte[] data, UInt32 offset, UInt32 count);
    public sealed virtual IMagickImageCollection`1<byte> Create(Byte[] data, UInt32 offset, UInt32 count, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual IMagickImageCollection`1<byte> Create(Byte[] data, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual IMagickImageCollection`1<byte> Create(FileInfo file);
    public sealed virtual IMagickImageCollection`1<byte> Create(FileInfo file, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual IMagickImageCollection`1<byte> Create(IEnumerable`1<IMagickImage`1<byte>> images);
    public sealed virtual IMagickImageCollection`1<byte> Create(Stream stream);
    public sealed virtual IMagickImageCollection`1<byte> Create(Stream stream, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual IMagickImageCollection`1<byte> Create(string fileName);
    public sealed virtual IMagickImageCollection`1<byte> Create(string fileName, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual Task`1<IMagickImageCollection`1<byte>> CreateAsync(FileInfo file);
    [AsyncStateMachineAttribute("ImageMagick.Factories.MagickImageCollectionFactory/<CreateAsync>d__13")]
public sealed virtual Task`1<IMagickImageCollection`1<byte>> CreateAsync(FileInfo file, CancellationToken cancellationToken);
    public sealed virtual Task`1<IMagickImageCollection`1<byte>> CreateAsync(FileInfo file, IMagickReadSettings`1<byte> readSettings);
    [AsyncStateMachineAttribute("ImageMagick.Factories.MagickImageCollectionFactory/<CreateAsync>d__15")]
public sealed virtual Task`1<IMagickImageCollection`1<byte>> CreateAsync(FileInfo file, IMagickReadSettings`1<byte> readSettings, CancellationToken cancellationToken);
    public sealed virtual Task`1<IMagickImageCollection`1<byte>> CreateAsync(string fileName);
    [AsyncStateMachineAttribute("ImageMagick.Factories.MagickImageCollectionFactory/<CreateAsync>d__17")]
public sealed virtual Task`1<IMagickImageCollection`1<byte>> CreateAsync(string fileName, CancellationToken cancellationToken);
    public sealed virtual Task`1<IMagickImageCollection`1<byte>> CreateAsync(string fileName, IMagickReadSettings`1<byte> readSettings);
    [AsyncStateMachineAttribute("ImageMagick.Factories.MagickImageCollectionFactory/<CreateAsync>d__19")]
public sealed virtual Task`1<IMagickImageCollection`1<byte>> CreateAsync(string fileName, IMagickReadSettings`1<byte> readSettings, CancellationToken cancellationToken);
    public sealed virtual Task`1<IMagickImageCollection`1<byte>> CreateAsync(Stream stream);
    [AsyncStateMachineAttribute("ImageMagick.Factories.MagickImageCollectionFactory/<CreateAsync>d__21")]
public sealed virtual Task`1<IMagickImageCollection`1<byte>> CreateAsync(Stream stream, CancellationToken cancellationToken);
    public sealed virtual Task`1<IMagickImageCollection`1<byte>> CreateAsync(Stream stream, IMagickReadSettings`1<byte> readSettings);
    [AsyncStateMachineAttribute("ImageMagick.Factories.MagickImageCollectionFactory/<CreateAsync>d__23")]
public sealed virtual Task`1<IMagickImageCollection`1<byte>> CreateAsync(Stream stream, IMagickReadSettings`1<byte> readSettings, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Factories.MagickImageFactory : object {
    public sealed virtual IMagickImage`1<byte> Create();
    public sealed virtual IMagickImage`1<byte> Create(Byte[] data);
    public sealed virtual IMagickImage`1<byte> Create(Byte[] data, UInt32 offset, UInt32 count);
    public sealed virtual IMagickImage`1<byte> Create(Byte[] data, UInt32 offset, UInt32 count, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual IMagickImage`1<byte> Create(Byte[] data, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual IMagickImage`1<byte> Create(FileInfo file);
    public sealed virtual IMagickImage`1<byte> Create(FileInfo file, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual IMagickImage`1<byte> Create(IMagickColor`1<byte> color, UInt32 width, UInt32 height);
    public sealed virtual IMagickImage`1<byte> Create(Stream stream);
    public sealed virtual IMagickImage`1<byte> Create(Stream stream, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual IMagickImage`1<byte> Create(string fileName);
    public sealed virtual IMagickImage`1<byte> Create(string fileName, UInt32 width, UInt32 height);
    public sealed virtual IMagickImage`1<byte> Create(string fileName, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual Task`1<IMagickImage`1<byte>> CreateAsync(FileInfo file);
    [AsyncStateMachineAttribute("ImageMagick.Factories.MagickImageFactory/<CreateAsync>d__14")]
public sealed virtual Task`1<IMagickImage`1<byte>> CreateAsync(FileInfo file, CancellationToken cancellationToken);
    public sealed virtual Task`1<IMagickImage`1<byte>> CreateAsync(FileInfo file, IMagickReadSettings`1<byte> readSettings);
    [AsyncStateMachineAttribute("ImageMagick.Factories.MagickImageFactory/<CreateAsync>d__16")]
public sealed virtual Task`1<IMagickImage`1<byte>> CreateAsync(FileInfo file, IMagickReadSettings`1<byte> readSettings, CancellationToken cancellationToken);
    public sealed virtual Task`1<IMagickImage`1<byte>> CreateAsync(FileInfo file, IPixelReadSettings`1<byte> settings);
    [AsyncStateMachineAttribute("ImageMagick.Factories.MagickImageFactory/<CreateAsync>d__18")]
public sealed virtual Task`1<IMagickImage`1<byte>> CreateAsync(FileInfo file, IPixelReadSettings`1<byte> settings, CancellationToken cancellationToken);
    public sealed virtual Task`1<IMagickImage`1<byte>> CreateAsync(Stream stream);
    [AsyncStateMachineAttribute("ImageMagick.Factories.MagickImageFactory/<CreateAsync>d__20")]
public sealed virtual Task`1<IMagickImage`1<byte>> CreateAsync(Stream stream, CancellationToken cancellationToken);
    public sealed virtual Task`1<IMagickImage`1<byte>> CreateAsync(Stream stream, IMagickReadSettings`1<byte> readSettings);
    [AsyncStateMachineAttribute("ImageMagick.Factories.MagickImageFactory/<CreateAsync>d__22")]
public sealed virtual Task`1<IMagickImage`1<byte>> CreateAsync(Stream stream, IMagickReadSettings`1<byte> readSettings, CancellationToken cancellationToken);
    public sealed virtual Task`1<IMagickImage`1<byte>> CreateAsync(Stream stream, IPixelReadSettings`1<byte> settings);
    [AsyncStateMachineAttribute("ImageMagick.Factories.MagickImageFactory/<CreateAsync>d__24")]
public sealed virtual Task`1<IMagickImage`1<byte>> CreateAsync(Stream stream, IPixelReadSettings`1<byte> settings, CancellationToken cancellationToken);
    public sealed virtual Task`1<IMagickImage`1<byte>> CreateAsync(string fileName);
    [AsyncStateMachineAttribute("ImageMagick.Factories.MagickImageFactory/<CreateAsync>d__26")]
public sealed virtual Task`1<IMagickImage`1<byte>> CreateAsync(string fileName, CancellationToken cancellationToken);
    public sealed virtual Task`1<IMagickImage`1<byte>> CreateAsync(string fileName, IMagickReadSettings`1<byte> readSettings);
    [AsyncStateMachineAttribute("ImageMagick.Factories.MagickImageFactory/<CreateAsync>d__28")]
public sealed virtual Task`1<IMagickImage`1<byte>> CreateAsync(string fileName, IMagickReadSettings`1<byte> readSettings, CancellationToken cancellationToken);
    public sealed virtual Task`1<IMagickImage`1<byte>> CreateAsync(string fileName, IPixelReadSettings`1<byte> settings);
    [AsyncStateMachineAttribute("ImageMagick.Factories.MagickImageFactory/<CreateAsync>d__30")]
public sealed virtual Task`1<IMagickImage`1<byte>> CreateAsync(string fileName, IPixelReadSettings`1<byte> settings, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Factories.MagickImageInfoFactory : object {
    public sealed virtual IMagickImageInfo Create();
    public sealed virtual IMagickImageInfo Create(Byte[] data);
    public sealed virtual IMagickImageInfo Create(Byte[] data, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual IMagickImageInfo Create(Byte[] data, UInt32 offset, UInt32 count);
    public sealed virtual IMagickImageInfo Create(Byte[] data, UInt32 offset, UInt32 count, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual IMagickImageInfo Create(FileInfo file);
    public sealed virtual IMagickImageInfo Create(FileInfo file, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual IMagickImageInfo Create(Stream stream);
    public sealed virtual IMagickImageInfo Create(Stream stream, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual IMagickImageInfo Create(string fileName);
    public sealed virtual IMagickImageInfo Create(string fileName, IMagickReadSettings`1<byte> readSettings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Factories.MatrixFactory : object {
    public sealed virtual IMagickColorMatrix CreateColorMatrix(UInt32 order);
    public sealed virtual IMagickColorMatrix CreateColorMatrix(UInt32 order, Double[] values);
    public sealed virtual IConvolveMatrix CreateConvolveMatrix(UInt32 order);
    public sealed virtual IConvolveMatrix CreateConvolveMatrix(UInt32 order, Double[] values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Factories.SettingsFactory : object {
    public sealed virtual ICompareSettings`1<byte> CreateCompareSettings(ErrorMetric metric);
    public sealed virtual IComplexSettings CreateComplexSettings(ComplexOperator complexOperator);
    public sealed virtual IConnectedComponentsSettings CreateConnectedComponentsSettings();
    public sealed virtual IDistortSettings CreateDistortSettings(DistortMethod method);
    public sealed virtual IKmeansSettings CreateKmeansSettings();
    public sealed virtual IMagickReadSettings`1<byte> CreateMagickReadSettings();
    public sealed virtual IMontageSettings`1<byte> CreateMontageSettings();
    public sealed virtual IMorphologySettings CreateMorphologySettings();
    public sealed virtual IPixelReadSettings`1<byte> CreatePixelReadSettings();
    public sealed virtual IQuantizeSettings CreateQuantizeSettings();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ImageMagick.FileHelper : object {
    public static string CheckForBaseDirectory(string fileName);
    public static string GetFullPath(string path);
    [AsyncStateMachineAttribute("ImageMagick.FileHelper/<ReadAllBytesAsync>d__2")]
public static Task`1<Byte[]> ReadAllBytesAsync(string fileName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("ImageMagick.FileHelper/<WriteAllBytesAsync>d__3")]
internal static Task WriteAllBytesAsync(string fileName, Byte[] bytes, CancellationToken cancellationToken);
}
public class ImageMagick.Formats.BmpReadDefines : object {
    [CompilerGeneratedAttribute]
private bool <IgnoreFileSize>k__BackingField;
    public MagickFormat Format { get; }
    public bool IgnoreFileSize { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<IDefine> Defines { get; }
    public sealed virtual MagickFormat get_Format();
    [CompilerGeneratedAttribute]
public bool get_IgnoreFileSize();
    [CompilerGeneratedAttribute]
public void set_IgnoreFileSize(bool value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ImageMagick.Formats.BmpReadDefines/<get_Defines>d__7")]
public sealed virtual IEnumerable`1<IDefine> get_Defines();
}
public enum ImageMagick.Formats.BmpSubtype : Enum {
    public int value__;
    public static BmpSubtype ARGB1555;
    public static BmpSubtype ARGB4444;
    public static BmpSubtype RGB555;
    public static BmpSubtype RGB565;
}
public class ImageMagick.Formats.BmpWriteDefines : object {
    [CompilerGeneratedAttribute]
private Nullable`1<BmpSubtype> <Subtype>k__BackingField;
    public MagickFormat Format { get; }
    public Nullable`1<BmpSubtype> Subtype { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<IDefine> Defines { get; }
    public sealed virtual MagickFormat get_Format();
    [CompilerGeneratedAttribute]
public Nullable`1<BmpSubtype> get_Subtype();
    [CompilerGeneratedAttribute]
public void set_Subtype(Nullable`1<BmpSubtype> value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ImageMagick.Formats.BmpWriteDefines/<get_Defines>d__7")]
public sealed virtual IEnumerable`1<IDefine> get_Defines();
}
public class ImageMagick.Formats.CaptionReadDefines : object {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <MaxFontPointsize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <StartFontPointsize>k__BackingField;
    public MagickFormat Format { get; }
    public Nullable`1<double> MaxFontPointsize { get; public set; }
    public Nullable`1<double> StartFontPointsize { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<IDefine> Defines { get; }
    public sealed virtual MagickFormat get_Format();
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_MaxFontPointsize();
    [CompilerGeneratedAttribute]
public void set_MaxFontPointsize(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_StartFontPointsize();
    [CompilerGeneratedAttribute]
public void set_StartFontPointsize(Nullable`1<double> value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ImageMagick.Formats.CaptionReadDefines/<get_Defines>d__11")]
public sealed virtual IEnumerable`1<IDefine> get_Defines();
}
public enum ImageMagick.Formats.DdsCompression : Enum {
    public int value__;
    public static DdsCompression None;
    public static DdsCompression Dxt1;
}
public class ImageMagick.Formats.DdsReadDefines : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SkipMipmaps>k__BackingField;
    public MagickFormat Format { get; }
    public Nullable`1<bool> SkipMipmaps { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<IDefine> Defines { get; }
    public sealed virtual MagickFormat get_Format();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SkipMipmaps();
    [CompilerGeneratedAttribute]
public void set_SkipMipmaps(Nullable`1<bool> value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ImageMagick.Formats.DdsReadDefines/<get_Defines>d__7")]
public sealed virtual IEnumerable`1<IDefine> get_Defines();
}
public class ImageMagick.Formats.DdsWriteDefines : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ClusterFit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DdsCompression> <Compression>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <FastMipmaps>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MipmapCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <MipmapsFromCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Raw>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <WeightByAlpha>k__BackingField;
    public Nullable`1<bool> ClusterFit { get; public set; }
    public Nullable`1<DdsCompression> Compression { get; public set; }
    public Nullable`1<bool> FastMipmaps { get; public set; }
    public MagickFormat Format { get; }
    public Nullable`1<int> MipmapCount { get; public set; }
    public Nullable`1<bool> MipmapsFromCollection { get; public set; }
    public Nullable`1<bool> Raw { get; public set; }
    public Nullable`1<bool> WeightByAlpha { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<IDefine> Defines { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ClusterFit();
    [CompilerGeneratedAttribute]
public void set_ClusterFit(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DdsCompression> get_Compression();
    [CompilerGeneratedAttribute]
public void set_Compression(Nullable`1<DdsCompression> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_FastMipmaps();
    [CompilerGeneratedAttribute]
public void set_FastMipmaps(Nullable`1<bool> value);
    public sealed virtual MagickFormat get_Format();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MipmapCount();
    [CompilerGeneratedAttribute]
public void set_MipmapCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_MipmapsFromCollection();
    [CompilerGeneratedAttribute]
public void set_MipmapsFromCollection(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Raw();
    [CompilerGeneratedAttribute]
public void set_Raw(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_WeightByAlpha();
    [CompilerGeneratedAttribute]
public void set_WeightByAlpha(Nullable`1<bool> value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ImageMagick.Formats.DdsWriteDefines/<get_Defines>d__31")]
public sealed virtual IEnumerable`1<IDefine> get_Defines();
}
public enum ImageMagick.Formats.DngInterpolation : Enum {
    public int value__;
    public static DngInterpolation Disabled;
    public static DngInterpolation Linear;
    public static DngInterpolation Vng;
    public static DngInterpolation Ppg;
    public static DngInterpolation Ahd;
    public static DngInterpolation Dcb;
    public static DngInterpolation Dht;
    public static DngInterpolation ModifiedAhd;
}
public enum ImageMagick.Formats.DngOutputColor : Enum {
    public int value__;
    public static DngOutputColor Raw;
    public static DngOutputColor SRGB;
    public static DngOutputColor AdobeRGB;
    public static DngOutputColor WideGamutRGB;
    public static DngOutputColor KodakProPhotoRGB;
    public static DngOutputColor XYZ;
    public static DngOutputColor ACES;
}
public class ImageMagick.Formats.DngReadDefines : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableAutoBrightness>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DngInterpolation> <InterpolationQuality>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DngOutputColor> <OutputColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ReadThumbnail>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseAutoWhiteBalance>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseCameraWhiteBalance>k__BackingField;
    public Nullable`1<bool> DisableAutoBrightness { get; public set; }
    public MagickFormat Format { get; }
    public Nullable`1<DngInterpolation> InterpolationQuality { get; public set; }
    public Nullable`1<DngOutputColor> OutputColor { get; public set; }
    public Nullable`1<bool> ReadThumbnail { get; public set; }
    public Nullable`1<bool> UseAutoWhiteBalance { get; public set; }
    public Nullable`1<bool> UseCameraWhiteBalance { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<IDefine> Defines { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DisableAutoBrightness();
    [CompilerGeneratedAttribute]
public void set_DisableAutoBrightness(Nullable`1<bool> value);
    public sealed virtual MagickFormat get_Format();
    [CompilerGeneratedAttribute]
public Nullable`1<DngInterpolation> get_InterpolationQuality();
    [CompilerGeneratedAttribute]
public void set_InterpolationQuality(Nullable`1<DngInterpolation> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DngOutputColor> get_OutputColor();
    [CompilerGeneratedAttribute]
public void set_OutputColor(Nullable`1<DngOutputColor> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ReadThumbnail();
    [CompilerGeneratedAttribute]
public void set_ReadThumbnail(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseAutoWhiteBalance();
    [CompilerGeneratedAttribute]
public void set_UseAutoWhiteBalance(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseCameraWhiteBalance();
    [CompilerGeneratedAttribute]
public void set_UseCameraWhiteBalance(Nullable`1<bool> value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ImageMagick.Formats.DngReadDefines/<get_Defines>d__27")]
public sealed virtual IEnumerable`1<IDefine> get_Defines();
}
public enum ImageMagick.Formats.HeicChromaUpsampling : Enum {
    public int value__;
    public static HeicChromaUpsampling Bilinear;
    public static HeicChromaUpsampling NearestNeighbor;
}
public class ImageMagick.Formats.HeicReadDefines : object {
    [CompilerGeneratedAttribute]
private Nullable`1<HeicChromaUpsampling> <ChromaUpsampling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DepthImage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PreserveOrientation>k__BackingField;
    public Nullable`1<HeicChromaUpsampling> ChromaUpsampling { get; public set; }
    public Nullable`1<bool> DepthImage { get; public set; }
    public MagickFormat Format { get; }
    public Nullable`1<bool> PreserveOrientation { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<IDefine> Defines { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<HeicChromaUpsampling> get_ChromaUpsampling();
    [CompilerGeneratedAttribute]
public void set_ChromaUpsampling(Nullable`1<HeicChromaUpsampling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DepthImage();
    [CompilerGeneratedAttribute]
public void set_DepthImage(Nullable`1<bool> value);
    public sealed virtual MagickFormat get_Format();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PreserveOrientation();
    [CompilerGeneratedAttribute]
public void set_PreserveOrientation(Nullable`1<bool> value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ImageMagick.Formats.HeicReadDefines/<get_Defines>d__15")]
public sealed virtual IEnumerable`1<IDefine> get_Defines();
    [NullableContextAttribute("2")]
private string GetChromaUpsampling();
}
public enum ImageMagick.Formats.Jp2ProgressionOrder : Enum {
    public int value__;
    public static Jp2ProgressionOrder LRCP;
    public static Jp2ProgressionOrder RLCP;
    public static Jp2ProgressionOrder RPCL;
    public static Jp2ProgressionOrder PCRL;
    public static Jp2ProgressionOrder CPRL;
}
public class ImageMagick.Formats.Jp2ReadDefines : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AssumeAlpha>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <QualityLayers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ReduceFactor>k__BackingField;
    public MagickFormat Format { get; }
    public Nullable`1<bool> AssumeAlpha { get; public set; }
    public Nullable`1<int> QualityLayers { get; public set; }
    public Nullable`1<int> ReduceFactor { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<IDefine> Defines { get; }
    public sealed virtual MagickFormat get_Format();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AssumeAlpha();
    [CompilerGeneratedAttribute]
public void set_AssumeAlpha(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_QualityLayers();
    [CompilerGeneratedAttribute]
public void set_QualityLayers(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ReduceFactor();
    [CompilerGeneratedAttribute]
public void set_ReduceFactor(Nullable`1<int> value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ImageMagick.Formats.Jp2ReadDefines/<get_Defines>d__15")]
public sealed virtual IEnumerable`1<IDefine> get_Defines();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ImageMagick.Formats.Jp2WriteDefines : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <NumberResolutions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Jp2ProgressionOrder> <ProgressionOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<float> <Quality>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<float> <Rate>k__BackingField;
    public MagickFormat Format { get; }
    public Nullable`1<int> NumberResolutions { get; public set; }
    public Nullable`1<Jp2ProgressionOrder> ProgressionOrder { get; public set; }
    public IEnumerable`1<float> Quality { get; public set; }
    public IEnumerable`1<float> Rate { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<IDefine> Defines { get; }
    public sealed virtual MagickFormat get_Format();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NumberResolutions();
    [CompilerGeneratedAttribute]
public void set_NumberResolutions(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Jp2ProgressionOrder> get_ProgressionOrder();
    [CompilerGeneratedAttribute]
public void set_ProgressionOrder(Nullable`1<Jp2ProgressionOrder> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<float> get_Quality();
    [CompilerGeneratedAttribute]
public void set_Quality(IEnumerable`1<float> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<float> get_Rate();
    [CompilerGeneratedAttribute]
public void set_Rate(IEnumerable`1<float> value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ImageMagick.Formats.Jp2WriteDefines/<get_Defines>d__19")]
public sealed virtual IEnumerable`1<IDefine> get_Defines();
}
public enum ImageMagick.Formats.JpegDctMethod : Enum {
    public int value__;
    public static JpegDctMethod Fast;
    public static JpegDctMethod Float;
    public static JpegDctMethod Slow;
}
[FlagsAttribute]
public enum ImageMagick.Formats.JpegProfileTypes : Enum {
    public int value__;
    public static JpegProfileTypes App;
    public static JpegProfileTypes EightBim;
    public static JpegProfileTypes Exif;
    public static JpegProfileTypes Icc;
    public static JpegProfileTypes Iptc;
    public static JpegProfileTypes Xmp;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ImageMagick.Formats.JpegReadDefines : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <BlockSmoothing>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Colors>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<JpegDctMethod> <DctMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <FancyUpsampling>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickGeometry <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<JpegProfileTypes> <SkipProfiles>k__BackingField;
    public Nullable`1<bool> BlockSmoothing { get; public set; }
    public Nullable`1<int> Colors { get; public set; }
    public Nullable`1<JpegDctMethod> DctMethod { get; public set; }
    public Nullable`1<bool> FancyUpsampling { get; public set; }
    public MagickFormat Format { get; }
    public IMagickGeometry Size { get; public set; }
    public Nullable`1<JpegProfileTypes> SkipProfiles { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<IDefine> Defines { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_BlockSmoothing();
    [CompilerGeneratedAttribute]
public void set_BlockSmoothing(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Colors();
    [CompilerGeneratedAttribute]
public void set_Colors(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<JpegDctMethod> get_DctMethod();
    [CompilerGeneratedAttribute]
public void set_DctMethod(Nullable`1<JpegDctMethod> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_FancyUpsampling();
    [CompilerGeneratedAttribute]
public void set_FancyUpsampling(Nullable`1<bool> value);
    public sealed virtual MagickFormat get_Format();
    [CompilerGeneratedAttribute]
public IMagickGeometry get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(IMagickGeometry value);
    [CompilerGeneratedAttribute]
public Nullable`1<JpegProfileTypes> get_SkipProfiles();
    [CompilerGeneratedAttribute]
public void set_SkipProfiles(Nullable`1<JpegProfileTypes> value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ImageMagick.Formats.JpegReadDefines/<get_Defines>d__27")]
public sealed virtual IEnumerable`1<IDefine> get_Defines();
}
public enum ImageMagick.Formats.JpegSamplingFactor : Enum {
    public int value__;
    public static JpegSamplingFactor Ratio444;
    public static JpegSamplingFactor Ratio422;
    public static JpegSamplingFactor Ratio411;
    public static JpegSamplingFactor Ratio440;
    public static JpegSamplingFactor Ratio420;
    public static JpegSamplingFactor Ratio410;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ImageMagick.Formats.JpegWriteDefines : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ArithmeticCoding>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<JpegDctMethod> <DctMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Extent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OptimizeCoding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QuantizationTables>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<JpegSamplingFactor> <SamplingFactor>k__BackingField;
    public Nullable`1<bool> ArithmeticCoding { get; public set; }
    public Nullable`1<JpegDctMethod> DctMethod { get; public set; }
    public Nullable`1<int> Extent { get; public set; }
    public MagickFormat Format { get; }
    public Nullable`1<bool> OptimizeCoding { get; public set; }
    public string QuantizationTables { get; public set; }
    public Nullable`1<JpegSamplingFactor> SamplingFactor { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<IDefine> Defines { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ArithmeticCoding();
    [CompilerGeneratedAttribute]
public void set_ArithmeticCoding(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<JpegDctMethod> get_DctMethod();
    [CompilerGeneratedAttribute]
public void set_DctMethod(Nullable`1<JpegDctMethod> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Extent();
    [CompilerGeneratedAttribute]
public void set_Extent(Nullable`1<int> value);
    public sealed virtual MagickFormat get_Format();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OptimizeCoding();
    [CompilerGeneratedAttribute]
public void set_OptimizeCoding(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_QuantizationTables();
    [CompilerGeneratedAttribute]
public void set_QuantizationTables(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<JpegSamplingFactor> get_SamplingFactor();
    [CompilerGeneratedAttribute]
public void set_SamplingFactor(Nullable`1<JpegSamplingFactor> value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ImageMagick.Formats.JpegWriteDefines/<get_Defines>d__27")]
public sealed virtual IEnumerable`1<IDefine> get_Defines();
    [NullableContextAttribute("1")]
private static string CreateSamplingFactors(JpegSamplingFactor samplingFactor);
}
public class ImageMagick.Formats.JxlWriteDefines : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Effort>k__BackingField;
    public Nullable`1<int> Effort { get; public set; }
    public MagickFormat Format { get; }
    [NullableAttribute("1")]
public IEnumerable`1<IDefine> Defines { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Effort();
    [CompilerGeneratedAttribute]
public void set_Effort(Nullable`1<int> value);
    public sealed virtual MagickFormat get_Format();
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ImageMagick.Formats.JxlWriteDefines/<get_Defines>d__7")]
public sealed virtual IEnumerable`1<IDefine> get_Defines();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Formats.PdfInfo : object {
    [CompilerGeneratedAttribute]
private UInt32 <PageCount>k__BackingField;
    public UInt32 PageCount { get; }
    private PdfInfo(UInt32 pageCount);
    [CompilerGeneratedAttribute]
public UInt32 get_PageCount();
    public static PdfInfo Create(FileInfo file);
    public static PdfInfo Create(FileInfo file, string password);
    public static PdfInfo Create(string fileName);
    public static PdfInfo Create(string fileName, string password);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ImageMagick.Formats.PdfReadDefines : object {
    [CompilerGeneratedAttribute]
private IMagickGeometry <FitPage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HideAnnotations>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Interpolate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseCropBox>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseTrimBox>k__BackingField;
    public IMagickGeometry FitPage { get; public set; }
    public MagickFormat Format { get; }
    public Nullable`1<bool> HideAnnotations { get; public set; }
    public Nullable`1<bool> Interpolate { get; public set; }
    public string Password { get; public set; }
    public Nullable`1<bool> UseCropBox { get; public set; }
    public Nullable`1<bool> UseTrimBox { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<IDefine> Defines { get; }
    [CompilerGeneratedAttribute]
public IMagickGeometry get_FitPage();
    [CompilerGeneratedAttribute]
public void set_FitPage(IMagickGeometry value);
    public sealed virtual MagickFormat get_Format();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HideAnnotations();
    [CompilerGeneratedAttribute]
public void set_HideAnnotations(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Interpolate();
    [CompilerGeneratedAttribute]
public void set_Interpolate(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseCropBox();
    [CompilerGeneratedAttribute]
public void set_UseCropBox(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseTrimBox();
    [CompilerGeneratedAttribute]
public void set_UseTrimBox(Nullable`1<bool> value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ImageMagick.Formats.PdfReadDefines/<get_Defines>d__27")]
public sealed virtual IEnumerable`1<IDefine> get_Defines();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ImageMagick.Formats.PdfWriteDefines : object {
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Creator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Keywords>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ModificationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Producer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Thumbnail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Version>k__BackingField;
    public string Author { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    public string Creator { get; public set; }
    public MagickFormat Format { get; }
    public string Keywords { get; public set; }
    public Nullable`1<DateTime> ModificationTime { get; public set; }
    public Nullable`1<bool> NoIdentifier { get; public set; }
    public string Producer { get; public set; }
    public string Subject { get; public set; }
    public Nullable`1<bool> Thumbnail { get; public set; }
    public string Title { get; public set; }
    public Nullable`1<double> Version { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<IDefine> Defines { get; }
    [CompilerGeneratedAttribute]
public string get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_CreationTime();
    [CompilerGeneratedAttribute]
public void set_CreationTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_Creator();
    [CompilerGeneratedAttribute]
public void set_Creator(string value);
    public sealed virtual MagickFormat get_Format();
    [CompilerGeneratedAttribute]
public string get_Keywords();
    [CompilerGeneratedAttribute]
public void set_Keywords(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ModificationTime();
    [CompilerGeneratedAttribute]
public void set_ModificationTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoIdentifier();
    [CompilerGeneratedAttribute]
public void set_NoIdentifier(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Producer();
    [CompilerGeneratedAttribute]
public void set_Producer(string value);
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Thumbnail();
    [CompilerGeneratedAttribute]
public void set_Thumbnail(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(Nullable`1<double> value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ImageMagick.Formats.PdfWriteDefines/<get_Defines>d__47")]
public sealed virtual IEnumerable`1<IDefine> get_Defines();
    private static long ToUnixTimeSeconds(DateTime value);
}
[FlagsAttribute]
public enum ImageMagick.Formats.PngChunkFlags : Enum {
    public int value__;
    public static PngChunkFlags None;
    public static PngChunkFlags All;
    public static PngChunkFlags bKGD;
    public static PngChunkFlags cHRM;
    public static PngChunkFlags EXIF;
    public static PngChunkFlags gAMA;
    public static PngChunkFlags iCCP;
    public static PngChunkFlags iTXt;
    public static PngChunkFlags sRGB;
    public static PngChunkFlags tEXt;
    public static PngChunkFlags zCCP;
    public static PngChunkFlags zTXt;
    public static PngChunkFlags date;
}
public enum ImageMagick.Formats.PngCompressionFilter : Enum {
    public int value__;
    public static PngCompressionFilter None;
    public static PngCompressionFilter Sub;
    public static PngCompressionFilter Up;
    public static PngCompressionFilter Average;
    public static PngCompressionFilter Paeth;
}
public enum ImageMagick.Formats.PngCompressionStrategy : Enum {
    public int value__;
    public static PngCompressionStrategy HuffmanOnly;
    public static PngCompressionStrategy Filtered;
    public static PngCompressionStrategy RLE;
    public static PngCompressionStrategy Fixed;
    public static PngCompressionStrategy Default;
    public static PngCompressionStrategy Adaptive;
    public static PngCompressionStrategy AdaptiveMinimumSum;
    public static PngCompressionStrategy LOCO;
    public static PngCompressionStrategy ZRLEAdaptive;
    public static PngCompressionStrategy ZRLENoFilter;
}
[FlagsAttribute]
public enum ImageMagick.Formats.PngProfileTypes : Enum {
    public int value__;
    public static PngProfileTypes App;
    public static PngProfileTypes EightBim;
    public static PngProfileTypes Exif;
    public static PngProfileTypes Icc;
    public static PngProfileTypes Iptc;
    public static PngProfileTypes Xmp;
}
public class ImageMagick.Formats.PngReadDefines : object {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ChunkCacheMax>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ChunkMallocMax>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveiCCP>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreCrc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PngProfileTypes> <SkipProfiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SwapBytes>k__BackingField;
    public Nullable`1<long> ChunkCacheMax { get; public set; }
    public Nullable`1<long> ChunkMallocMax { get; public set; }
    public MagickFormat Format { get; }
    public bool PreserveiCCP { get; public set; }
    public bool IgnoreCrc { get; public set; }
    public Nullable`1<PngProfileTypes> SkipProfiles { get; public set; }
    public bool SwapBytes { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<IDefine> Defines { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ChunkCacheMax();
    [CompilerGeneratedAttribute]
public void set_ChunkCacheMax(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ChunkMallocMax();
    [CompilerGeneratedAttribute]
public void set_ChunkMallocMax(Nullable`1<long> value);
    public sealed virtual MagickFormat get_Format();
    [CompilerGeneratedAttribute]
public bool get_PreserveiCCP();
    [CompilerGeneratedAttribute]
public void set_PreserveiCCP(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreCrc();
    [CompilerGeneratedAttribute]
public void set_IgnoreCrc(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<PngProfileTypes> get_SkipProfiles();
    [CompilerGeneratedAttribute]
public void set_SkipProfiles(Nullable`1<PngProfileTypes> value);
    [CompilerGeneratedAttribute]
public bool get_SwapBytes();
    [CompilerGeneratedAttribute]
public void set_SwapBytes(bool value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ImageMagick.Formats.PngReadDefines/<get_Defines>d__27")]
public sealed virtual IEnumerable`1<IDefine> get_Defines();
}
public class ImageMagick.Formats.PngWriteDefines : object {
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <BitDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ColorType> <ColorType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PngCompressionFilter> <CompressionFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <CompressionLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PngCompressionStrategy> <CompressionStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PngChunkFlags> <ExcludeChunks>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PngChunkFlags> <IncludeChunks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveiCCP>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveColorMap>k__BackingField;
    public Nullable`1<UInt32> BitDepth { get; public set; }
    public Nullable`1<ColorType> ColorType { get; public set; }
    public Nullable`1<PngCompressionFilter> CompressionFilter { get; public set; }
    public Nullable`1<UInt32> CompressionLevel { get; public set; }
    public Nullable`1<PngCompressionStrategy> CompressionStrategy { get; public set; }
    public Nullable`1<PngChunkFlags> ExcludeChunks { get; public set; }
    public Nullable`1<PngChunkFlags> IncludeChunks { get; public set; }
    public bool PreserveiCCP { get; public set; }
    public bool PreserveColorMap { get; public set; }
    public MagickFormat Format { get; }
    [NullableAttribute("1")]
public IEnumerable`1<IDefine> Defines { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_BitDepth();
    [CompilerGeneratedAttribute]
public void set_BitDepth(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ColorType> get_ColorType();
    [CompilerGeneratedAttribute]
public void set_ColorType(Nullable`1<ColorType> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PngCompressionFilter> get_CompressionFilter();
    [CompilerGeneratedAttribute]
public void set_CompressionFilter(Nullable`1<PngCompressionFilter> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_CompressionLevel();
    [CompilerGeneratedAttribute]
public void set_CompressionLevel(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PngCompressionStrategy> get_CompressionStrategy();
    [CompilerGeneratedAttribute]
public void set_CompressionStrategy(Nullable`1<PngCompressionStrategy> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PngChunkFlags> get_ExcludeChunks();
    [CompilerGeneratedAttribute]
public void set_ExcludeChunks(Nullable`1<PngChunkFlags> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PngChunkFlags> get_IncludeChunks();
    [CompilerGeneratedAttribute]
public void set_IncludeChunks(Nullable`1<PngChunkFlags> value);
    [CompilerGeneratedAttribute]
public bool get_PreserveiCCP();
    [CompilerGeneratedAttribute]
public void set_PreserveiCCP(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreserveColorMap();
    [CompilerGeneratedAttribute]
public void set_PreserveColorMap(bool value);
    public sealed virtual MagickFormat get_Format();
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ImageMagick.Formats.PngWriteDefines/<get_Defines>d__39")]
public sealed virtual IEnumerable`1<IDefine> get_Defines();
    private int GetPngColorTypeValue(ColorType colorType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Formats.PsdAdditionalInfo : object {
    [CompilerGeneratedAttribute]
private string <LayerName>k__BackingField;
    public string LayerName { get; }
    private PsdAdditionalInfo(string layerName);
    [CompilerGeneratedAttribute]
public string get_LayerName();
    public static PsdAdditionalInfo FromImage(IMagickImage`1<byte> image);
    private static PsdAdditionalInfo ParseAdditionalInfo(Byte[] bytes);
    private static void SwapBytes(Byte[] bytes, int start, int end);
}
public enum ImageMagick.Formats.PsdAdditionalInfoPart : Enum {
    public int value__;
    public static PsdAdditionalInfoPart None;
    public static PsdAdditionalInfoPart All;
    public static PsdAdditionalInfoPart Selective;
}
public class ImageMagick.Formats.PsdReadDefines : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AlphaUnblend>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PreserveOpacityMask>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ReplicateProfile>k__BackingField;
    public Nullable`1<bool> AlphaUnblend { get; public set; }
    public MagickFormat Format { get; }
    public Nullable`1<bool> PreserveOpacityMask { get; public set; }
    public Nullable`1<bool> ReplicateProfile { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<IDefine> Defines { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AlphaUnblend();
    [CompilerGeneratedAttribute]
public void set_AlphaUnblend(Nullable`1<bool> value);
    public sealed virtual MagickFormat get_Format();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PreserveOpacityMask();
    [CompilerGeneratedAttribute]
public void set_PreserveOpacityMask(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ReplicateProfile();
    [CompilerGeneratedAttribute]
public void set_ReplicateProfile(Nullable`1<bool> value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ImageMagick.Formats.PsdReadDefines/<get_Defines>d__15")]
public sealed virtual IEnumerable`1<IDefine> get_Defines();
}
public class ImageMagick.Formats.PsdWriteDefines : object {
    [CompilerGeneratedAttribute]
private PsdAdditionalInfoPart <AdditionalInfo>k__BackingField;
    public PsdAdditionalInfoPart AdditionalInfo { get; public set; }
    public MagickFormat Format { get; }
    [NullableAttribute("1")]
public IEnumerable`1<IDefine> Defines { get; }
    [CompilerGeneratedAttribute]
public PsdAdditionalInfoPart get_AdditionalInfo();
    [CompilerGeneratedAttribute]
public void set_AdditionalInfo(PsdAdditionalInfoPart value);
    public sealed virtual MagickFormat get_Format();
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ImageMagick.Formats.PsdWriteDefines/<get_Defines>d__7")]
public sealed virtual IEnumerable`1<IDefine> get_Defines();
}
public enum ImageMagick.Formats.TiffAlpha : Enum {
    public int value__;
    public static TiffAlpha Unspecified;
    public static TiffAlpha Associated;
    public static TiffAlpha Unassociated;
}
[FlagsAttribute]
public enum ImageMagick.Formats.TiffJpegTablesMode : Enum {
    public int value__;
    public static TiffJpegTablesMode None;
    public static TiffJpegTablesMode Quant;
    public static TiffJpegTablesMode Huff;
}
public class ImageMagick.Formats.TiffReadDefines : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AssumeAlpha>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IgnoreExifProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IgnoreLayers>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<string> <IgnoreTags>k__BackingField;
    public Nullable`1<bool> AssumeAlpha { get; public set; }
    public MagickFormat Format { get; }
    public Nullable`1<bool> IgnoreExifProperties { get; public set; }
    public Nullable`1<bool> IgnoreLayers { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<string> IgnoreTags { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<IDefine> Defines { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AssumeAlpha();
    [CompilerGeneratedAttribute]
public void set_AssumeAlpha(Nullable`1<bool> value);
    public sealed virtual MagickFormat get_Format();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IgnoreExifProperties();
    [CompilerGeneratedAttribute]
public void set_IgnoreExifProperties(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IgnoreLayers();
    [CompilerGeneratedAttribute]
public void set_IgnoreLayers(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_IgnoreTags();
    [CompilerGeneratedAttribute]
public void set_IgnoreTags(IEnumerable`1<string> value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ImageMagick.Formats.TiffReadDefines/<get_Defines>d__19")]
public sealed virtual IEnumerable`1<IDefine> get_Defines();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ImageMagick.Formats.TiffWriteDefines : object {
    [CompilerGeneratedAttribute]
private Nullable`1<TiffAlpha> <Alpha>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Endian> <Endian>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Endian> <FillOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TiffJpegTablesMode> <JpegTablesMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Predictor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveCompression>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RowsPerStrip>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickGeometry <TileGeometry>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteLayers>k__BackingField;
    public Nullable`1<TiffAlpha> Alpha { get; public set; }
    public Nullable`1<Endian> Endian { get; public set; }
    public Nullable`1<Endian> FillOrder { get; public set; }
    public MagickFormat Format { get; }
    public Nullable`1<TiffJpegTablesMode> JpegTablesMode { get; public set; }
    public Nullable`1<int> Predictor { get; public set; }
    public bool PreserveCompression { get; public set; }
    public Nullable`1<int> RowsPerStrip { get; public set; }
    public IMagickGeometry TileGeometry { get; public set; }
    public bool WriteLayers { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<IDefine> Defines { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<TiffAlpha> get_Alpha();
    [CompilerGeneratedAttribute]
public void set_Alpha(Nullable`1<TiffAlpha> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Endian> get_Endian();
    [CompilerGeneratedAttribute]
public void set_Endian(Nullable`1<Endian> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Endian> get_FillOrder();
    [CompilerGeneratedAttribute]
public void set_FillOrder(Nullable`1<Endian> value);
    public sealed virtual MagickFormat get_Format();
    [CompilerGeneratedAttribute]
public Nullable`1<TiffJpegTablesMode> get_JpegTablesMode();
    [CompilerGeneratedAttribute]
public void set_JpegTablesMode(Nullable`1<TiffJpegTablesMode> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Predictor();
    [CompilerGeneratedAttribute]
public void set_Predictor(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_PreserveCompression();
    [CompilerGeneratedAttribute]
public void set_PreserveCompression(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RowsPerStrip();
    [CompilerGeneratedAttribute]
public void set_RowsPerStrip(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IMagickGeometry get_TileGeometry();
    [CompilerGeneratedAttribute]
public void set_TileGeometry(IMagickGeometry value);
    [CompilerGeneratedAttribute]
public bool get_WriteLayers();
    [CompilerGeneratedAttribute]
public void set_WriteLayers(bool value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ImageMagick.Formats.TiffWriteDefines/<get_Defines>d__39")]
public sealed virtual IEnumerable`1<IDefine> get_Defines();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ImageMagick.Formats.VideoReadDefines : object {
    [NullableAttribute("1")]
private static List`1<MagickFormat> AllowedFormats;
    [CompilerGeneratedAttribute]
private MagickFormat <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PixelFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<VideoReadMode> <ReadMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<VideoSync> <VideoSync>k__BackingField;
    public MagickFormat Format { get; }
    public string PixelFormat { get; public set; }
    public Nullable`1<VideoReadMode> ReadMode { get; public set; }
    public Nullable`1<VideoSync> VideoSync { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<IDefine> Defines { get; }
    public VideoReadDefines(MagickFormat format);
    private static VideoReadDefines();
    [CompilerGeneratedAttribute]
public sealed virtual MagickFormat get_Format();
    [CompilerGeneratedAttribute]
public string get_PixelFormat();
    [CompilerGeneratedAttribute]
public void set_PixelFormat(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<VideoReadMode> get_ReadMode();
    [CompilerGeneratedAttribute]
public void set_ReadMode(Nullable`1<VideoReadMode> value);
    [CompilerGeneratedAttribute]
public Nullable`1<VideoSync> get_VideoSync();
    [CompilerGeneratedAttribute]
public void set_VideoSync(Nullable`1<VideoSync> value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ImageMagick.Formats.VideoReadDefines/<get_Defines>d__18")]
public sealed virtual IEnumerable`1<IDefine> get_Defines();
    private static MagickFormat CheckFormat(MagickFormat format);
}
public enum ImageMagick.Formats.VideoReadMode : Enum {
    public int value__;
    public static VideoReadMode ByDuration;
    public static VideoReadMode ByFrame;
}
public enum ImageMagick.Formats.VideoSync : Enum {
    public int value__;
    public static VideoSync Auto;
    public static VideoSync Cfr;
    public static VideoSync Drop;
    public static VideoSync PassThrough;
    public static VideoSync Vfr;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ImageMagick.Formats.VideoWriteDefines : object {
    [NullableAttribute("1")]
private static List`1<MagickFormat> AllowedFormats;
    [CompilerGeneratedAttribute]
private MagickFormat <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PixelFormat>k__BackingField;
    public MagickFormat Format { get; }
    public string PixelFormat { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<IDefine> Defines { get; }
    public VideoWriteDefines(MagickFormat format);
    private static VideoWriteDefines();
    [CompilerGeneratedAttribute]
public sealed virtual MagickFormat get_Format();
    [CompilerGeneratedAttribute]
public string get_PixelFormat();
    [CompilerGeneratedAttribute]
public void set_PixelFormat(string value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ImageMagick.Formats.VideoWriteDefines/<get_Defines>d__10")]
public sealed virtual IEnumerable`1<IDefine> get_Defines();
    private static MagickFormat CheckFormat(MagickFormat format);
}
public enum ImageMagick.Formats.WebPAlphaCompression : Enum {
    public int value__;
    public static WebPAlphaCompression None;
    public static WebPAlphaCompression Compressed;
}
public enum ImageMagick.Formats.WebPAlphaFiltering : Enum {
    public int value__;
    public static WebPAlphaFiltering None;
    public static WebPAlphaFiltering Fast;
    public static WebPAlphaFiltering Best;
}
public enum ImageMagick.Formats.WebPFilterType : Enum {
    public int value__;
    public static WebPFilterType Simple;
    public static WebPFilterType Strong;
}
public enum ImageMagick.Formats.WebPImageHint : Enum {
    public int value__;
    public static WebPImageHint Default;
    public static WebPImageHint Photo;
    public static WebPImageHint Picture;
    public static WebPImageHint Graph;
}
public enum ImageMagick.Formats.WebPPreprocessing : Enum {
    public int value__;
    public static WebPPreprocessing None;
    public static WebPPreprocessing SegmentSmooth;
    public static WebPPreprocessing PseudoRandom;
}
public class ImageMagick.Formats.WebPWriteDefines : object {
    [CompilerGeneratedAttribute]
private Nullable`1<WebPAlphaCompression> <AlphaCompression>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WebPAlphaFiltering> <AlphaFiltering>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <AlphaQuality>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AutoFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EmulateJpegSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <FilterSharpness>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <FilterStrength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WebPFilterType> <FilterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WebPImageHint> <ImageHint>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Lossless>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <LowMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PartitionLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Partitions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Pass>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WebPPreprocessing> <Preprocessing>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Segment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowCompressed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SnsStrength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <TargetPsnr>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TargetSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ThreadLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseSharpYuv>k__BackingField;
    public Nullable`1<WebPAlphaCompression> AlphaCompression { get; public set; }
    public Nullable`1<WebPAlphaFiltering> AlphaFiltering { get; public set; }
    public Nullable`1<int> AlphaQuality { get; public set; }
    public Nullable`1<bool> AutoFilter { get; public set; }
    public Nullable`1<bool> EmulateJpegSize { get; public set; }
    public Nullable`1<bool> Exact { get; public set; }
    public Nullable`1<int> FilterSharpness { get; public set; }
    public Nullable`1<int> FilterStrength { get; public set; }
    public Nullable`1<WebPFilterType> FilterType { get; public set; }
    public MagickFormat Format { get; }
    public Nullable`1<WebPImageHint> ImageHint { get; public set; }
    public Nullable`1<bool> Lossless { get; public set; }
    public Nullable`1<bool> LowMemory { get; public set; }
    public Nullable`1<int> Method { get; public set; }
    public Nullable`1<int> PartitionLimit { get; public set; }
    public Nullable`1<int> Partitions { get; public set; }
    public Nullable`1<int> Pass { get; public set; }
    public Nullable`1<WebPPreprocessing> Preprocessing { get; public set; }
    public Nullable`1<int> Segment { get; public set; }
    public Nullable`1<bool> ShowCompressed { get; public set; }
    public Nullable`1<int> SnsStrength { get; public set; }
    public Nullable`1<double> TargetPsnr { get; public set; }
    public Nullable`1<int> TargetSize { get; public set; }
    public Nullable`1<bool> ThreadLevel { get; public set; }
    public Nullable`1<bool> UseSharpYuv { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<IDefine> Defines { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<WebPAlphaCompression> get_AlphaCompression();
    [CompilerGeneratedAttribute]
public void set_AlphaCompression(Nullable`1<WebPAlphaCompression> value);
    [CompilerGeneratedAttribute]
public Nullable`1<WebPAlphaFiltering> get_AlphaFiltering();
    [CompilerGeneratedAttribute]
public void set_AlphaFiltering(Nullable`1<WebPAlphaFiltering> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_AlphaQuality();
    [CompilerGeneratedAttribute]
public void set_AlphaQuality(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AutoFilter();
    [CompilerGeneratedAttribute]
public void set_AutoFilter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EmulateJpegSize();
    [CompilerGeneratedAttribute]
public void set_EmulateJpegSize(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_FilterSharpness();
    [CompilerGeneratedAttribute]
public void set_FilterSharpness(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_FilterStrength();
    [CompilerGeneratedAttribute]
public void set_FilterStrength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<WebPFilterType> get_FilterType();
    [CompilerGeneratedAttribute]
public void set_FilterType(Nullable`1<WebPFilterType> value);
    public sealed virtual MagickFormat get_Format();
    [CompilerGeneratedAttribute]
public Nullable`1<WebPImageHint> get_ImageHint();
    [CompilerGeneratedAttribute]
public void set_ImageHint(Nullable`1<WebPImageHint> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Lossless();
    [CompilerGeneratedAttribute]
public void set_Lossless(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_LowMemory();
    [CompilerGeneratedAttribute]
public void set_LowMemory(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PartitionLimit();
    [CompilerGeneratedAttribute]
public void set_PartitionLimit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Partitions();
    [CompilerGeneratedAttribute]
public void set_Partitions(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Pass();
    [CompilerGeneratedAttribute]
public void set_Pass(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<WebPPreprocessing> get_Preprocessing();
    [CompilerGeneratedAttribute]
public void set_Preprocessing(Nullable`1<WebPPreprocessing> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Segment();
    [CompilerGeneratedAttribute]
public void set_Segment(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ShowCompressed();
    [CompilerGeneratedAttribute]
public void set_ShowCompressed(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SnsStrength();
    [CompilerGeneratedAttribute]
public void set_SnsStrength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_TargetPsnr();
    [CompilerGeneratedAttribute]
public void set_TargetPsnr(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TargetSize();
    [CompilerGeneratedAttribute]
public void set_TargetSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ThreadLevel();
    [CompilerGeneratedAttribute]
public void set_ThreadLevel(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseSharpYuv();
    [CompilerGeneratedAttribute]
public void set_UseSharpYuv(Nullable`1<bool> value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("ImageMagick.Formats.WebPWriteDefines/<get_Defines>d__99")]
public sealed virtual IEnumerable`1<IDefine> get_Defines();
}
internal enum ImageMagick.GeometryFlags : Enum {
    public int value__;
    public static GeometryFlags NoValue;
    public static GeometryFlags PercentValue;
    public static GeometryFlags IgnoreAspectRatio;
    public static GeometryFlags Less;
    public static GeometryFlags Greater;
    public static GeometryFlags FillArea;
    public static GeometryFlags LimitPixels;
    public static GeometryFlags AspectRatio;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ImageMagick.HexColor : object {
    public static bool TryParse(string value, List`1& channels);
    private static bool TryParseQ8(string value, List`1<byte> channels);
    private static bool TryParseQ16(string value, List`1<byte> channels);
    private static bool TryParseHex(string color, int offset, int length, UInt16& channel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.ImageOptimizer : object {
    private Collection`1<IImageOptimizer> _optimizers;
    [CompilerGeneratedAttribute]
private bool <IgnoreUnsupportedFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OptimalCompression>k__BackingField;
    public bool IgnoreUnsupportedFormats { get; public set; }
    public bool OptimalCompression { get; public set; }
    private string SupportedFormats { get; }
    [CompilerGeneratedAttribute]
public bool get_IgnoreUnsupportedFormats();
    [CompilerGeneratedAttribute]
public void set_IgnoreUnsupportedFormats(bool value);
    [CompilerGeneratedAttribute]
public bool get_OptimalCompression();
    [CompilerGeneratedAttribute]
public void set_OptimalCompression(bool value);
    private string get_SupportedFormats();
    public bool Compress(FileInfo file);
    public bool Compress(string fileName);
    public bool Compress(Stream stream);
    public bool IsSupported(FileInfo file);
    [NullableContextAttribute("2")]
public bool IsSupported(IMagickFormatInfo formatInfo);
    public bool IsSupported(string fileName);
    public bool IsSupported(Stream stream);
    public bool LosslessCompress(FileInfo file);
    public bool LosslessCompress(string fileName);
    public bool LosslessCompress(Stream stream);
    private static Collection`1<IImageOptimizer> CreateImageOptimizers();
    private bool DoLosslessCompress(FileInfo file);
    private bool DoCompress(FileInfo file);
    private IImageOptimizer GetOptimizer(FileInfo file);
    private IImageOptimizer GetOptimizer(Stream stream);
    [NullableContextAttribute("2")]
private IImageOptimizer GetOptimizer(IMagickFormatInfo info);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ImageMagick.ImageOptimizerHelper : object {
    public static void CheckFormat(IMagickImage`1<byte> image, MagickFormat expectedFormat);
    public static void CheckStream(Stream stream);
    public static IMagickFormatInfo GetFormatInformation(FileInfo file);
    public static IMagickFormatInfo GetFormatInformation(string fileName);
    public static IMagickFormatInfo GetFormatInformation(Stream stream);
    private static IMagickFormatInfo GetFormatInformationFromHeader(Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.ImageOptimizers.GifOptimizer : object {
    [CompilerGeneratedAttribute]
private bool <ImageMagick.ImageOptimizers.IImageOptimizer.OptimalCompression>k__BackingField;
    public IMagickFormatInfo Format { get; }
    private bool ImageMagick.ImageOptimizers.IImageOptimizer.OptimalCompression { get; private set; }
    public sealed virtual IMagickFormatInfo get_Format();
    [CompilerGeneratedAttribute]
private sealed virtual override bool ImageMagick.ImageOptimizers.IImageOptimizer.get_OptimalCompression();
    [CompilerGeneratedAttribute]
private sealed virtual override void ImageMagick.ImageOptimizers.IImageOptimizer.set_OptimalCompression(bool value);
    public sealed virtual bool Compress(FileInfo file);
    public sealed virtual bool Compress(string fileName);
    public sealed virtual bool Compress(Stream stream);
    public sealed virtual bool LosslessCompress(FileInfo file);
    public sealed virtual bool LosslessCompress(string fileName);
    public sealed virtual bool LosslessCompress(Stream stream);
    private static bool DoLosslessCompress(FileInfo file);
    private static bool DoLosslessCompress(FileInfo file, IMagickImage`1<byte> image);
    private static void LosslessCompress(IMagickImage`1<byte> image);
    private static bool DoLosslessCompress(IMagickImage`1<byte> image, Stream stream, long startPosition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.ImageOptimizers.IcoOptimizer : object {
    [CompilerGeneratedAttribute]
private bool <OptimalCompression>k__BackingField;
    public IMagickFormatInfo Format { get; }
    public bool OptimalCompression { get; public set; }
    public sealed virtual IMagickFormatInfo get_Format();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_OptimalCompression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OptimalCompression(bool value);
    public sealed virtual bool Compress(FileInfo file);
    public sealed virtual bool Compress(string fileName);
    public sealed virtual bool Compress(Stream stream);
    public sealed virtual bool LosslessCompress(FileInfo file);
    public sealed virtual bool LosslessCompress(string fileName);
    public sealed virtual bool LosslessCompress(Stream stream);
    private static bool CanUseColormap(IMagickImage`1<byte> image, bool lossless);
    private static void FixAlpha(IMagickImage`1<byte> image, byte min, byte max);
    private bool DoCompress(FileInfo file, bool lossless);
    private bool DoCompress(Stream stream, bool lossless);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.ImageOptimizers.JpegOptimizer : object {
    [CompilerGeneratedAttribute]
private bool <OptimalCompression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Progressive>k__BackingField;
    public IMagickFormatInfo Format { get; }
    public bool OptimalCompression { get; public set; }
    public bool Progressive { get; public set; }
    public sealed virtual IMagickFormatInfo get_Format();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_OptimalCompression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OptimalCompression(bool value);
    [CompilerGeneratedAttribute]
public bool get_Progressive();
    [CompilerGeneratedAttribute]
public void set_Progressive(bool value);
    public sealed virtual bool Compress(FileInfo file);
    public bool Compress(FileInfo file, UInt32 quality);
    public sealed virtual bool Compress(string fileName);
    public bool Compress(string fileName, UInt32 quality);
    public sealed virtual bool Compress(Stream stream);
    public bool Compress(Stream stream, UInt32 quality);
    public sealed virtual bool LosslessCompress(FileInfo file);
    public sealed virtual bool LosslessCompress(string fileName);
    public sealed virtual bool LosslessCompress(Stream stream);
    private static void DoNativeCompress(string filename, string outputFilename, bool progressive, bool lossless, UInt32 quality);
    private static void DoNativeCompress(Stream input, Stream output, bool progressive, bool lossless, UInt32 quality);
    private bool DoCompress(FileInfo file, bool lossless, UInt32 quality);
    private bool DoCompress(Stream stream, bool lossless, UInt32 quality);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.ImageOptimizers.PngHelper : object {
    private bool _optimalCompression;
    public PngHelper(IImageOptimizer optimizer);
    public TemporaryFile FindBestFileQuality(IMagickImage`1<byte> image, UInt32& bestQuality);
    public MemoryStream FindBestStreamQuality(IMagickImage`1<byte> image, UInt32& bestQuality);
    private static void CheckTransparency(IMagickImage`1<byte> image);
    private UInt32[] GetQualityList();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.ImageOptimizers.PngOptimizer : object {
    [CompilerGeneratedAttribute]
private bool <OptimalCompression>k__BackingField;
    public IMagickFormatInfo Format { get; }
    public bool OptimalCompression { get; public set; }
    public sealed virtual IMagickFormatInfo get_Format();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_OptimalCompression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OptimalCompression(bool value);
    public sealed virtual bool Compress(FileInfo file);
    public sealed virtual bool Compress(string fileName);
    public sealed virtual bool Compress(Stream stream);
    public sealed virtual bool LosslessCompress(FileInfo file);
    public sealed virtual bool LosslessCompress(string fileName);
    public sealed virtual bool LosslessCompress(Stream stream);
    private static void StartCompression(MagickImage image, bool lossless);
    private bool DoCompress(FileInfo file, bool lossless);
    private bool DoCompress(Stream stream, bool lossless);
}
internal interface ImageMagick.INativeInstance {
    public IntPtr Instance { get; }
    public abstract virtual IntPtr get_Instance();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ImageMagick.KmeansSettings : object {
    [CompilerGeneratedAttribute]
private string <SeedColors>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <NumberColors>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MaxIterations>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Tolerance>k__BackingField;
    public string SeedColors { get; public set; }
    public UInt32 NumberColors { get; public set; }
    public UInt32 MaxIterations { get; public set; }
    public double Tolerance { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_SeedColors();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SeedColors(string value);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_NumberColors();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NumberColors(UInt32 value);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_MaxIterations();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxIterations(UInt32 value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Tolerance();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tolerance(double value);
}
internal enum ImageMagick.LayerMethod : Enum {
    public int value__;
    public static LayerMethod Undefined;
    public static LayerMethod Coalesce;
    public static LayerMethod CompareAny;
    public static LayerMethod CompareClear;
    public static LayerMethod CompareOverlay;
    public static LayerMethod Dispose;
    public static LayerMethod Optimize;
    public static LayerMethod OptimizeImage;
    public static LayerMethod OptimizePlus;
    public static LayerMethod OptimizeTrans;
    public static LayerMethod RemoveDups;
    public static LayerMethod RemoveZero;
    public static LayerMethod Composite;
    public static LayerMethod Merge;
    public static LayerMethod Flatten;
    public static LayerMethod Mosaic;
    public static LayerMethod Trimbounds;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.MagickColor : object {
    [CompilerGeneratedAttribute]
private byte <A>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <B>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <G>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCmyk>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <K>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <R>k__BackingField;
    public byte A { get; public set; }
    public byte B { get; public set; }
    public byte G { get; public set; }
    public bool IsCmyk { get; private set; }
    public byte K { get; public set; }
    public byte R { get; public set; }
    public MagickColor(IMagickColor`1<byte> color);
    public MagickColor(byte red, byte green, byte blue);
    public MagickColor(byte red, byte green, byte blue, byte alpha);
    public MagickColor(byte cyan, byte magenta, byte yellow, byte black, byte alpha);
    public MagickColor(string color);
    private MagickColor(NativeMagickColor nativeInstance);
    [CompilerGeneratedAttribute]
public sealed virtual byte get_A();
    [CompilerGeneratedAttribute]
public sealed virtual void set_A(byte value);
    [CompilerGeneratedAttribute]
public sealed virtual byte get_B();
    [CompilerGeneratedAttribute]
public sealed virtual void set_B(byte value);
    [CompilerGeneratedAttribute]
public sealed virtual byte get_G();
    [CompilerGeneratedAttribute]
public sealed virtual void set_G(byte value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCmyk();
    [CompilerGeneratedAttribute]
private void set_IsCmyk(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual byte get_K();
    [CompilerGeneratedAttribute]
public sealed virtual void set_K(byte value);
    [CompilerGeneratedAttribute]
public sealed virtual byte get_R();
    [CompilerGeneratedAttribute]
public sealed virtual void set_R(byte value);
    [NullableContextAttribute("2")]
public static bool op_Equality(MagickColor left, MagickColor right);
    [NullableContextAttribute("2")]
public static bool op_Inequality(MagickColor left, MagickColor right);
    [NullableContextAttribute("2")]
public static bool op_GreaterThan(MagickColor left, MagickColor right);
    [NullableContextAttribute("2")]
public static bool op_LessThan(MagickColor left, MagickColor right);
    [NullableContextAttribute("2")]
public static bool op_GreaterThanOrEqual(MagickColor left, MagickColor right);
    [NullableContextAttribute("2")]
public static bool op_LessThanOrEqual(MagickColor left, MagickColor right);
    [NullableContextAttribute("2")]
public static MagickColor op_Multiply(MagickColor color, Percentage percentage);
    public static MagickColor FromRgb(byte red, byte green, byte blue);
    public static MagickColor FromRgba(byte red, byte green, byte blue, byte alpha);
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(IMagickColor`1<byte> other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IMagickColor`1<byte> other);
    public sealed virtual bool FuzzyEquals(IMagickColor`1<byte> other, Percentage fuzz);
    public virtual int GetHashCode();
    public sealed virtual void SetFromBytes(byte red, byte green, byte blue, byte alpha);
    public sealed virtual Byte[] ToByteArray();
    public sealed virtual string ToHexString();
    public sealed virtual string ToShortString();
    public virtual string ToString();
    [NullableContextAttribute("2")]
internal static IMagickColor`1<byte> Clone(IMagickColor`1<byte> value);
    private void Initialize(byte red, byte green, byte blue, byte alpha);
    private void ParseHexColor(string color);
    [NullableContextAttribute("2")]
internal static MagickColor CreateInstance(IntPtr instance);
    [NullableContextAttribute("2")]
internal static MagickColor CreateInstance(IntPtr instance, UInt32& count);
    private static NativeMagickColor CreateNativeInstance(IMagickColor`1<byte> instance);
    private void Initialize(NativeMagickColor instance);
    internal static INativeInstance CreateInstance(IMagickColor`1<byte> instance);
}
internal static class ImageMagick.MagickColorCollection : object {
    public static void DisposeList(IntPtr list);
    [NullableContextAttribute("1")]
public static IReadOnlyDictionary`2<IMagickColor`1<byte>, UInt32> ToDictionary(IntPtr list, UInt32 length);
}
public class ImageMagick.MagickColorMatrix : DoubleMatrix {
    public MagickColorMatrix(UInt32 order);
    [NullableContextAttribute("1")]
public MagickColorMatrix(UInt32 order, Double[] values);
    private static void CheckOrder(UInt32 order);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.MagickColors : object {
    public static MagickColor None { get; }
    public static MagickColor Transparent { get; }
    public static MagickColor AliceBlue { get; }
    public static MagickColor AntiqueWhite { get; }
    public static MagickColor Aqua { get; }
    public static MagickColor Aquamarine { get; }
    public static MagickColor Azure { get; }
    public static MagickColor Beige { get; }
    public static MagickColor Bisque { get; }
    public static MagickColor Black { get; }
    public static MagickColor BlanchedAlmond { get; }
    public static MagickColor Blue { get; }
    public static MagickColor BlueViolet { get; }
    public static MagickColor Brown { get; }
    public static MagickColor BurlyWood { get; }
    public static MagickColor CadetBlue { get; }
    public static MagickColor Chartreuse { get; }
    public static MagickColor Chocolate { get; }
    public static MagickColor Coral { get; }
    public static MagickColor CornflowerBlue { get; }
    public static MagickColor Cornsilk { get; }
    public static MagickColor Crimson { get; }
    public static MagickColor Cyan { get; }
    public static MagickColor DarkBlue { get; }
    public static MagickColor DarkCyan { get; }
    public static MagickColor DarkGoldenrod { get; }
    public static MagickColor DarkGray { get; }
    public static MagickColor DarkGreen { get; }
    public static MagickColor DarkKhaki { get; }
    public static MagickColor DarkMagenta { get; }
    public static MagickColor DarkOliveGreen { get; }
    public static MagickColor DarkOrange { get; }
    public static MagickColor DarkOrchid { get; }
    public static MagickColor DarkRed { get; }
    public static MagickColor DarkSalmon { get; }
    public static MagickColor DarkSeaGreen { get; }
    public static MagickColor DarkSlateBlue { get; }
    public static MagickColor DarkSlateGray { get; }
    public static MagickColor DarkTurquoise { get; }
    public static MagickColor DarkViolet { get; }
    public static MagickColor DeepPink { get; }
    public static MagickColor DeepSkyBlue { get; }
    public static MagickColor DimGray { get; }
    public static MagickColor DodgerBlue { get; }
    public static MagickColor Firebrick { get; }
    public static MagickColor FloralWhite { get; }
    public static MagickColor ForestGreen { get; }
    public static MagickColor Fuchsia { get; }
    public static MagickColor Gainsboro { get; }
    public static MagickColor GhostWhite { get; }
    public static MagickColor Gold { get; }
    public static MagickColor Goldenrod { get; }
    public static MagickColor Gray { get; }
    public static MagickColor Green { get; }
    public static MagickColor GreenYellow { get; }
    public static MagickColor Honeydew { get; }
    public static MagickColor HotPink { get; }
    public static MagickColor IndianRed { get; }
    public static MagickColor Indigo { get; }
    public static MagickColor Ivory { get; }
    public static MagickColor Khaki { get; }
    public static MagickColor Lavender { get; }
    public static MagickColor LavenderBlush { get; }
    public static MagickColor LawnGreen { get; }
    public static MagickColor LemonChiffon { get; }
    public static MagickColor LightBlue { get; }
    public static MagickColor LightCoral { get; }
    public static MagickColor LightCyan { get; }
    public static MagickColor LightGoldenrodYellow { get; }
    public static MagickColor LightGreen { get; }
    public static MagickColor LightGray { get; }
    public static MagickColor LightPink { get; }
    public static MagickColor LightSalmon { get; }
    public static MagickColor LightSeaGreen { get; }
    public static MagickColor LightSkyBlue { get; }
    public static MagickColor LightSlateGray { get; }
    public static MagickColor LightSteelBlue { get; }
    public static MagickColor LightYellow { get; }
    public static MagickColor Lime { get; }
    public static MagickColor LimeGreen { get; }
    public static MagickColor Linen { get; }
    public static MagickColor Magenta { get; }
    public static MagickColor Maroon { get; }
    public static MagickColor MediumAquamarine { get; }
    public static MagickColor MediumBlue { get; }
    public static MagickColor MediumOrchid { get; }
    public static MagickColor MediumPurple { get; }
    public static MagickColor MediumSeaGreen { get; }
    public static MagickColor MediumSlateBlue { get; }
    public static MagickColor MediumSpringGreen { get; }
    public static MagickColor MediumTurquoise { get; }
    public static MagickColor MediumVioletRed { get; }
    public static MagickColor MidnightBlue { get; }
    public static MagickColor MintCream { get; }
    public static MagickColor MistyRose { get; }
    public static MagickColor Moccasin { get; }
    public static MagickColor NavajoWhite { get; }
    public static MagickColor Navy { get; }
    public static MagickColor OldLace { get; }
    public static MagickColor Olive { get; }
    public static MagickColor OliveDrab { get; }
    public static MagickColor Orange { get; }
    public static MagickColor OrangeRed { get; }
    public static MagickColor Orchid { get; }
    public static MagickColor PaleGoldenrod { get; }
    public static MagickColor PaleGreen { get; }
    public static MagickColor PaleTurquoise { get; }
    public static MagickColor PaleVioletRed { get; }
    public static MagickColor PapayaWhip { get; }
    public static MagickColor PeachPuff { get; }
    public static MagickColor Peru { get; }
    public static MagickColor Pink { get; }
    public static MagickColor Plum { get; }
    public static MagickColor PowderBlue { get; }
    public static MagickColor Purple { get; }
    public static MagickColor RebeccaPurple { get; }
    public static MagickColor Red { get; }
    public static MagickColor RosyBrown { get; }
    public static MagickColor RoyalBlue { get; }
    public static MagickColor SaddleBrown { get; }
    public static MagickColor Salmon { get; }
    public static MagickColor SandyBrown { get; }
    public static MagickColor SeaGreen { get; }
    public static MagickColor SeaShell { get; }
    public static MagickColor Sienna { get; }
    public static MagickColor Silver { get; }
    public static MagickColor SkyBlue { get; }
    public static MagickColor SlateBlue { get; }
    public static MagickColor SlateGray { get; }
    public static MagickColor Snow { get; }
    public static MagickColor SpringGreen { get; }
    public static MagickColor SteelBlue { get; }
    public static MagickColor Tan { get; }
    public static MagickColor Teal { get; }
    public static MagickColor Thistle { get; }
    public static MagickColor Tomato { get; }
    public static MagickColor Turquoise { get; }
    public static MagickColor Violet { get; }
    public static MagickColor Wheat { get; }
    public static MagickColor White { get; }
    public static MagickColor WhiteSmoke { get; }
    public static MagickColor Yellow { get; }
    public static MagickColor YellowGreen { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.None { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Transparent { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.AliceBlue { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.AntiqueWhite { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Aqua { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Aquamarine { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Azure { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Beige { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Bisque { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Black { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.BlanchedAlmond { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Blue { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.BlueViolet { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Brown { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.BurlyWood { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.CadetBlue { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Chartreuse { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Chocolate { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Coral { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.CornflowerBlue { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Cornsilk { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Crimson { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Cyan { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.DarkBlue { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.DarkCyan { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.DarkGoldenrod { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.DarkGray { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.DarkGreen { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.DarkKhaki { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.DarkMagenta { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.DarkOliveGreen { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.DarkOrange { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.DarkOrchid { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.DarkRed { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.DarkSalmon { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.DarkSeaGreen { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.DarkSlateBlue { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.DarkSlateGray { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.DarkTurquoise { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.DarkViolet { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.DeepPink { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.DeepSkyBlue { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.DimGray { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.DodgerBlue { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Firebrick { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.FloralWhite { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.ForestGreen { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Fuchsia { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Gainsboro { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.GhostWhite { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Gold { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Goldenrod { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Gray { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Green { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.GreenYellow { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Honeydew { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.HotPink { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.IndianRed { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Indigo { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Ivory { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Khaki { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Lavender { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.LavenderBlush { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.LawnGreen { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.LemonChiffon { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.LightBlue { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.LightCoral { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.LightCyan { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.LightGoldenrodYellow { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.LightGreen { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.LightGray { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.LightPink { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.LightSalmon { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.LightSeaGreen { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.LightSkyBlue { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.LightSlateGray { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.LightSteelBlue { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.LightYellow { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Lime { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.LimeGreen { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Linen { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Magenta { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Maroon { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.MediumAquamarine { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.MediumBlue { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.MediumOrchid { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.MediumPurple { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.MediumSeaGreen { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.MediumSlateBlue { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.MediumSpringGreen { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.MediumTurquoise { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.MediumVioletRed { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.MidnightBlue { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.MintCream { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.MistyRose { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Moccasin { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.NavajoWhite { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Navy { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.OldLace { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Olive { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.OliveDrab { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Orange { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.OrangeRed { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Orchid { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.PaleGoldenrod { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.PaleGreen { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.PaleTurquoise { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.PaleVioletRed { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.PapayaWhip { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.PeachPuff { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Peru { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Pink { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Plum { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.PowderBlue { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Purple { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.RebeccaPurple { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Red { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.RosyBrown { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.RoyalBlue { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.SaddleBrown { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Salmon { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.SandyBrown { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.SeaGreen { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.SeaShell { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Sienna { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Silver { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.SkyBlue { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.SlateBlue { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.SlateGray { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Snow { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.SpringGreen { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.SteelBlue { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Tan { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Teal { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Thistle { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Tomato { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Turquoise { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Violet { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Wheat { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.White { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.WhiteSmoke { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.Yellow { get; }
    private IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.YellowGreen { get; }
    public static MagickColor get_None();
    public static MagickColor get_Transparent();
    public static MagickColor get_AliceBlue();
    public static MagickColor get_AntiqueWhite();
    public static MagickColor get_Aqua();
    public static MagickColor get_Aquamarine();
    public static MagickColor get_Azure();
    public static MagickColor get_Beige();
    public static MagickColor get_Bisque();
    public static MagickColor get_Black();
    public static MagickColor get_BlanchedAlmond();
    public static MagickColor get_Blue();
    public static MagickColor get_BlueViolet();
    public static MagickColor get_Brown();
    public static MagickColor get_BurlyWood();
    public static MagickColor get_CadetBlue();
    public static MagickColor get_Chartreuse();
    public static MagickColor get_Chocolate();
    public static MagickColor get_Coral();
    public static MagickColor get_CornflowerBlue();
    public static MagickColor get_Cornsilk();
    public static MagickColor get_Crimson();
    public static MagickColor get_Cyan();
    public static MagickColor get_DarkBlue();
    public static MagickColor get_DarkCyan();
    public static MagickColor get_DarkGoldenrod();
    public static MagickColor get_DarkGray();
    public static MagickColor get_DarkGreen();
    public static MagickColor get_DarkKhaki();
    public static MagickColor get_DarkMagenta();
    public static MagickColor get_DarkOliveGreen();
    public static MagickColor get_DarkOrange();
    public static MagickColor get_DarkOrchid();
    public static MagickColor get_DarkRed();
    public static MagickColor get_DarkSalmon();
    public static MagickColor get_DarkSeaGreen();
    public static MagickColor get_DarkSlateBlue();
    public static MagickColor get_DarkSlateGray();
    public static MagickColor get_DarkTurquoise();
    public static MagickColor get_DarkViolet();
    public static MagickColor get_DeepPink();
    public static MagickColor get_DeepSkyBlue();
    public static MagickColor get_DimGray();
    public static MagickColor get_DodgerBlue();
    public static MagickColor get_Firebrick();
    public static MagickColor get_FloralWhite();
    public static MagickColor get_ForestGreen();
    public static MagickColor get_Fuchsia();
    public static MagickColor get_Gainsboro();
    public static MagickColor get_GhostWhite();
    public static MagickColor get_Gold();
    public static MagickColor get_Goldenrod();
    public static MagickColor get_Gray();
    public static MagickColor get_Green();
    public static MagickColor get_GreenYellow();
    public static MagickColor get_Honeydew();
    public static MagickColor get_HotPink();
    public static MagickColor get_IndianRed();
    public static MagickColor get_Indigo();
    public static MagickColor get_Ivory();
    public static MagickColor get_Khaki();
    public static MagickColor get_Lavender();
    public static MagickColor get_LavenderBlush();
    public static MagickColor get_LawnGreen();
    public static MagickColor get_LemonChiffon();
    public static MagickColor get_LightBlue();
    public static MagickColor get_LightCoral();
    public static MagickColor get_LightCyan();
    public static MagickColor get_LightGoldenrodYellow();
    public static MagickColor get_LightGreen();
    public static MagickColor get_LightGray();
    public static MagickColor get_LightPink();
    public static MagickColor get_LightSalmon();
    public static MagickColor get_LightSeaGreen();
    public static MagickColor get_LightSkyBlue();
    public static MagickColor get_LightSlateGray();
    public static MagickColor get_LightSteelBlue();
    public static MagickColor get_LightYellow();
    public static MagickColor get_Lime();
    public static MagickColor get_LimeGreen();
    public static MagickColor get_Linen();
    public static MagickColor get_Magenta();
    public static MagickColor get_Maroon();
    public static MagickColor get_MediumAquamarine();
    public static MagickColor get_MediumBlue();
    public static MagickColor get_MediumOrchid();
    public static MagickColor get_MediumPurple();
    public static MagickColor get_MediumSeaGreen();
    public static MagickColor get_MediumSlateBlue();
    public static MagickColor get_MediumSpringGreen();
    public static MagickColor get_MediumTurquoise();
    public static MagickColor get_MediumVioletRed();
    public static MagickColor get_MidnightBlue();
    public static MagickColor get_MintCream();
    public static MagickColor get_MistyRose();
    public static MagickColor get_Moccasin();
    public static MagickColor get_NavajoWhite();
    public static MagickColor get_Navy();
    public static MagickColor get_OldLace();
    public static MagickColor get_Olive();
    public static MagickColor get_OliveDrab();
    public static MagickColor get_Orange();
    public static MagickColor get_OrangeRed();
    public static MagickColor get_Orchid();
    public static MagickColor get_PaleGoldenrod();
    public static MagickColor get_PaleGreen();
    public static MagickColor get_PaleTurquoise();
    public static MagickColor get_PaleVioletRed();
    public static MagickColor get_PapayaWhip();
    public static MagickColor get_PeachPuff();
    public static MagickColor get_Peru();
    public static MagickColor get_Pink();
    public static MagickColor get_Plum();
    public static MagickColor get_PowderBlue();
    public static MagickColor get_Purple();
    public static MagickColor get_RebeccaPurple();
    public static MagickColor get_Red();
    public static MagickColor get_RosyBrown();
    public static MagickColor get_RoyalBlue();
    public static MagickColor get_SaddleBrown();
    public static MagickColor get_Salmon();
    public static MagickColor get_SandyBrown();
    public static MagickColor get_SeaGreen();
    public static MagickColor get_SeaShell();
    public static MagickColor get_Sienna();
    public static MagickColor get_Silver();
    public static MagickColor get_SkyBlue();
    public static MagickColor get_SlateBlue();
    public static MagickColor get_SlateGray();
    public static MagickColor get_Snow();
    public static MagickColor get_SpringGreen();
    public static MagickColor get_SteelBlue();
    public static MagickColor get_Tan();
    public static MagickColor get_Teal();
    public static MagickColor get_Thistle();
    public static MagickColor get_Tomato();
    public static MagickColor get_Turquoise();
    public static MagickColor get_Violet();
    public static MagickColor get_Wheat();
    public static MagickColor get_White();
    public static MagickColor get_WhiteSmoke();
    public static MagickColor get_Yellow();
    public static MagickColor get_YellowGreen();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_None();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Transparent();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_AliceBlue();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_AntiqueWhite();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Aqua();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Aquamarine();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Azure();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Beige();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Bisque();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Black();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_BlanchedAlmond();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Blue();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_BlueViolet();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Brown();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_BurlyWood();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_CadetBlue();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Chartreuse();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Chocolate();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Coral();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_CornflowerBlue();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Cornsilk();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Crimson();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Cyan();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_DarkBlue();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_DarkCyan();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_DarkGoldenrod();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_DarkGray();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_DarkGreen();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_DarkKhaki();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_DarkMagenta();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_DarkOliveGreen();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_DarkOrange();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_DarkOrchid();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_DarkRed();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_DarkSalmon();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_DarkSeaGreen();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_DarkSlateBlue();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_DarkSlateGray();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_DarkTurquoise();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_DarkViolet();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_DeepPink();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_DeepSkyBlue();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_DimGray();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_DodgerBlue();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Firebrick();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_FloralWhite();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_ForestGreen();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Fuchsia();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Gainsboro();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_GhostWhite();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Gold();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Goldenrod();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Gray();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Green();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_GreenYellow();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Honeydew();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_HotPink();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_IndianRed();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Indigo();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Ivory();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Khaki();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Lavender();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_LavenderBlush();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_LawnGreen();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_LemonChiffon();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_LightBlue();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_LightCoral();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_LightCyan();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_LightGoldenrodYellow();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_LightGreen();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_LightGray();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_LightPink();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_LightSalmon();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_LightSeaGreen();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_LightSkyBlue();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_LightSlateGray();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_LightSteelBlue();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_LightYellow();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Lime();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_LimeGreen();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Linen();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Magenta();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Maroon();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_MediumAquamarine();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_MediumBlue();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_MediumOrchid();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_MediumPurple();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_MediumSeaGreen();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_MediumSlateBlue();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_MediumSpringGreen();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_MediumTurquoise();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_MediumVioletRed();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_MidnightBlue();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_MintCream();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_MistyRose();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Moccasin();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_NavajoWhite();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Navy();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_OldLace();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Olive();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_OliveDrab();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Orange();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_OrangeRed();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Orchid();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_PaleGoldenrod();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_PaleGreen();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_PaleTurquoise();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_PaleVioletRed();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_PapayaWhip();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_PeachPuff();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Peru();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Pink();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Plum();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_PowderBlue();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Purple();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_RebeccaPurple();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Red();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_RosyBrown();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_RoyalBlue();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_SaddleBrown();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Salmon();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_SandyBrown();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_SeaGreen();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_SeaShell();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Sienna();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Silver();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_SkyBlue();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_SlateBlue();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_SlateGray();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Snow();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_SpringGreen();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_SteelBlue();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Tan();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Teal();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Thistle();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Tomato();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Turquoise();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Violet();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Wheat();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_White();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_WhiteSmoke();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_Yellow();
    private sealed virtual override IMagickColor`1<byte> ImageMagick.IMagickColors<System.Byte>.get_YellowGreen();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.MagickDefine : object {
    [CompilerGeneratedAttribute]
private MagickFormat <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public MagickFormat Format { get; }
    public string Name { get; }
    public string Value { get; }
    public MagickDefine(string name, string value);
    public MagickDefine(string name, Enum value);
    public MagickDefine(MagickFormat format, string name, bool value);
    public MagickDefine(MagickFormat format, string name, double value);
    public MagickDefine(MagickFormat format, string name, Enum value);
    public MagickDefine(MagickFormat format, string name, int value);
    public MagickDefine(MagickFormat format, string name, IMagickGeometry value);
    public MagickDefine(MagickFormat format, string name, long value);
    public MagickDefine(MagickFormat format, string name, string value);
    [CompilerGeneratedAttribute]
public sealed virtual MagickFormat get_Format();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Value();
    [NullableContextAttribute("2")]
public static MagickDefine Create(MagickFormat format, string name, IEnumerable`1<T> value);
}
public class ImageMagick.MagickErrorInfo : object {
    [CompilerGeneratedAttribute]
private double <MeanErrorPerPixel>k__BackingField;
    [CompilerGeneratedAttribute]
private double <NormalizedMaximumError>k__BackingField;
    [CompilerGeneratedAttribute]
private double <NormalizedMeanError>k__BackingField;
    public double MeanErrorPerPixel { get; }
    public double NormalizedMaximumError { get; }
    public double NormalizedMeanError { get; }
    internal MagickErrorInfo(double meanErrorPerPixel, double normalizedMeanError, double normalizedMaximumError);
    [CompilerGeneratedAttribute]
public sealed virtual double get_MeanErrorPerPixel();
    [CompilerGeneratedAttribute]
public sealed virtual double get_NormalizedMaximumError();
    [CompilerGeneratedAttribute]
public sealed virtual double get_NormalizedMeanError();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class ImageMagick.MagickExceptionHelper : object {
    public static MagickException Check(IntPtr exception);
    public static MagickException Create(IntPtr exception);
    [NullableContextAttribute("1")]
public static MagickException CreateException(IntPtr exception);
    private static List`1<MagickException> CreateRelatedExceptions(IntPtr exception);
    [NullableContextAttribute("1")]
private static MagickException Create(ExceptionSeverity severity, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.MagickFormatInfo : object {
    private static Dictionary`2<MagickFormat, IMagickFormatInfo> _all;
    [CompilerGeneratedAttribute]
private bool <CanReadMultithreaded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanWriteMultithreaded>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private MagickFormat <Format>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <MimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private MagickFormat <ModuleFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsMultipleFrames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsReading>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsWriting>k__BackingField;
    public bool CanReadMultithreaded { get; }
    public bool CanWriteMultithreaded { get; }
    [NullableAttribute("2")]
public string Description { get; }
    public MagickFormat Format { get; }
    [NullableAttribute("2")]
public string MimeType { get; }
    public MagickFormat ModuleFormat { get; }
    public bool SupportsMultipleFrames { get; }
    public bool SupportsReading { get; }
    public bool SupportsWriting { get; }
    internal static IReadOnlyCollection`1<IMagickFormatInfo> All { get; }
    private MagickFormatInfo(NativeMagickFormatInfo instance);
    private static MagickFormatInfo();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CanReadMultithreaded();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CanWriteMultithreaded();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual MagickFormat get_Format();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_MimeType();
    [CompilerGeneratedAttribute]
public sealed virtual MagickFormat get_ModuleFormat();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SupportsMultipleFrames();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SupportsReading();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SupportsWriting();
    internal static IReadOnlyCollection`1<IMagickFormatInfo> get_All();
    public static IMagickFormatInfo Create(FileInfo file);
    [NullableContextAttribute("2")]
public static IMagickFormatInfo Create(MagickFormat format);
    public static IMagickFormatInfo Create(Byte[] data);
    public static IMagickFormatInfo Create(string fileName);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IMagickFormatInfo other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool Unregister();
    [NullableContextAttribute("2")]
private static MagickFormat GetFormat(string format);
    private static Dictionary`2<MagickFormat, IMagickFormatInfo> LoadFormats();
    private static void AddStealthCoders(Dictionary`2<MagickFormat, IMagickFormatInfo> formats);
    [NullableContextAttribute("2")]
private static MagickFormatInfo CreateInstance(IntPtr instance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.MagickGeometry : object {
    private bool _includeXyInToString;
    [CompilerGeneratedAttribute]
private bool <AspectRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FillArea>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Greater>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreAspectRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPercentage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Less>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LimitPixels>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    public bool AspectRatio { get; internal set; }
    public bool FillArea { get; public set; }
    public bool Greater { get; public set; }
    public UInt32 Height { get; public set; }
    public bool IgnoreAspectRatio { get; public set; }
    public bool IsPercentage { get; public set; }
    public bool Less { get; public set; }
    public bool LimitPixels { get; public set; }
    public UInt32 Width { get; public set; }
    public int X { get; public set; }
    public int Y { get; public set; }
    public MagickGeometry(UInt32 widthAndHeight);
    public MagickGeometry(UInt32 width, UInt32 height);
    public MagickGeometry(int x, int y, UInt32 width, UInt32 height);
    public MagickGeometry(Percentage percentageWidth, Percentage percentageHeight);
    public MagickGeometry(int x, int y, Percentage percentageWidth, Percentage percentageHeight);
    public MagickGeometry(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AspectRatio();
    [CompilerGeneratedAttribute]
internal void set_AspectRatio(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_FillArea();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FillArea(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Greater();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Greater(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Height();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Height(UInt32 value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IgnoreAspectRatio();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IgnoreAspectRatio(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsPercentage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsPercentage(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Less();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Less(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_LimitPixels();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LimitPixels(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Width();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Width(UInt32 value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_X();
    [CompilerGeneratedAttribute]
public sealed virtual void set_X(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Y();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Y(int value);
    public static MagickGeometry op_Explicit(string value);
    public static bool op_Equality(MagickGeometry left, MagickGeometry right);
    public static bool op_Inequality(MagickGeometry left, MagickGeometry right);
    public static bool op_GreaterThan(MagickGeometry left, MagickGeometry right);
    public static bool op_LessThan(MagickGeometry left, MagickGeometry right);
    public static bool op_GreaterThanOrEqual(MagickGeometry left, MagickGeometry right);
    public static bool op_LessThanOrEqual(MagickGeometry left, MagickGeometry right);
    public static IMagickGeometry FromPageSize(string pageSize);
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(IMagickGeometry other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IMagickGeometry other);
    public virtual int GetHashCode();
    public sealed virtual void Initialize(int x, int y, UInt32 width, UInt32 height);
    public virtual string ToString();
    [NullableContextAttribute("2")]
internal static IMagickGeometry Clone(IMagickGeometry value);
    internal static IMagickGeometry FromRectangle(MagickRectangle rectangle);
    [NullableContextAttribute("2")]
internal static IMagickGeometry FromString(string value);
    private static UInt32 ParseUInt(string value);
    private void InitializeFromPercentage(int x, int y, Percentage percentageWidth, Percentage percentageHeight);
    private void Initialize(NativeMagickGeometry instance, GeometryFlags flags);
    private void InitializeFromAspectRation(NativeMagickGeometry instance, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.MagickImage : object {
    [NullableAttribute("2")]
private ProgressDelegate _nativeProgress;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private EventHandler`1<ProgressEventArgs> _progress;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private EventHandler`1<WarningEventArgs> _warning;
    private MagickSettings _settings;
    private NativeMagickImage _nativeInstance;
    private IntPtr ImageMagick.INativeInstance.Instance { get; }
    public UInt32 AnimationDelay { get; public set; }
    public UInt32 AnimationIterations { get; public set; }
    public int AnimationTicksPerSecond { get; public set; }
    public IEnumerable`1<string> ArtifactNames { get; }
    public IEnumerable`1<string> AttributeNames { get; }
    [NullableAttribute("2")]
public IMagickColor`1<byte> BackgroundColor { get; public set; }
    public UInt32 BaseHeight { get; }
    public UInt32 BaseWidth { get; }
    public bool BlackPointCompensation { get; public set; }
    [NullableAttribute("2")]
public IMagickColor`1<byte> BorderColor { get; public set; }
    [NullableAttribute("2")]
public IMagickGeometry BoundingBox { get; }
    public UInt32 ChannelCount { get; }
    public IEnumerable`1<PixelChannel> Channels { get; }
    public IChromaticityInfo Chromaticity { get; public set; }
    public ClassType ClassType { get; public set; }
    public Percentage ColorFuzz { get; public set; }
    public int ColormapSize { get; public set; }
    public ColorSpace ColorSpace { get; public set; }
    public ColorType ColorType { get; public set; }
    [NullableAttribute("2")]
public string Comment { get; public set; }
    public CompositeOperator Compose { get; public set; }
    public CompressionMethod Compression { get; }
    public Density Density { get; public set; }
    public UInt32 Depth { get; public set; }
    public Endian Endian { get; public set; }
    [NullableAttribute("2")]
public string FileName { get; }
    public FilterType FilterType { get; public set; }
    public MagickFormat Format { get; public set; }
    public double Gamma { get; }
    public GifDisposeMethod GifDisposeMethod { get; public set; }
    public bool HasAlpha { get; public set; }
    public UInt32 Height { get; }
    public Interlace Interlace { get; }
    public PixelInterpolateMethod Interpolate { get; public set; }
    public bool IsOpaque { get; }
    [NullableAttribute("2")]
public string Label { get; public set; }
    [NullableAttribute("2")]
public IMagickColor`1<byte> MatteColor { get; public set; }
    public UInt32 MetaChannelCount { get; public set; }
    public OrientationType Orientation { get; public set; }
    public IMagickGeometry Page { get; public set; }
    public IEnumerable`1<string> ProfileNames { get; }
    public UInt32 Quality { get; public set; }
    public RenderingIntent RenderingIntent { get; public set; }
    public IMagickSettings`1<byte> Settings { get; }
    public string Signature { get; }
    public UInt32 TotalColors { get; }
    public VirtualPixelMethod VirtualPixelMethod { get; public set; }
    public UInt32 Width { get; }
    private bool HasColorProfile { get; }
    public MagickImage(Byte[] data);
    public MagickImage(Byte[] data, UInt32 offset, UInt32 count);
    public MagickImage(Byte[] data, UInt32 offset, UInt32 count, MagickFormat format);
    public MagickImage(Byte[] data, UInt32 offset, UInt32 count, IMagickReadSettings`1<byte> readSettings);
    public MagickImage(Byte[] data, MagickFormat format);
    public MagickImage(Byte[] data, IMagickReadSettings`1<byte> readSettings);
    public MagickImage(FileInfo file);
    public MagickImage(FileInfo file, MagickFormat format);
    public MagickImage(FileInfo file, IMagickReadSettings`1<byte> readSettings);
    public MagickImage(IMagickColor`1<byte> color, UInt32 width, UInt32 height);
    public MagickImage(IMagickImage`1<byte> image);
    public MagickImage(Stream stream);
    public MagickImage(Stream stream, MagickFormat format);
    public MagickImage(Stream stream, IMagickReadSettings`1<byte> readSettings);
    public MagickImage(string fileName);
    public MagickImage(string fileName, UInt32 width, UInt32 height);
    public MagickImage(string fileName, IMagickReadSettings`1<byte> readSettings);
    public MagickImage(string fileName, MagickFormat format);
    private MagickImage(NativeMagickImage instance, MagickSettings settings);
    protected virtual override void Finalize();
    public sealed virtual void add_Progress(EventHandler`1<ProgressEventArgs> value);
    public sealed virtual void remove_Progress(EventHandler`1<ProgressEventArgs> value);
    public sealed virtual void add_Warning(EventHandler`1<WarningEventArgs> value);
    public sealed virtual void remove_Warning(EventHandler`1<WarningEventArgs> value);
    private sealed virtual override IntPtr ImageMagick.INativeInstance.get_Instance();
    public sealed virtual UInt32 get_AnimationDelay();
    public sealed virtual void set_AnimationDelay(UInt32 value);
    public sealed virtual UInt32 get_AnimationIterations();
    public sealed virtual void set_AnimationIterations(UInt32 value);
    public sealed virtual int get_AnimationTicksPerSecond();
    public sealed virtual void set_AnimationTicksPerSecond(int value);
    [IteratorStateMachineAttribute("ImageMagick.MagickImage/<get_ArtifactNames>d__43")]
public sealed virtual IEnumerable`1<string> get_ArtifactNames();
    [IteratorStateMachineAttribute("ImageMagick.MagickImage/<get_AttributeNames>d__45")]
public sealed virtual IEnumerable`1<string> get_AttributeNames();
    [NullableContextAttribute("2")]
public sealed virtual IMagickColor`1<byte> get_BackgroundColor();
    [NullableContextAttribute("2")]
public sealed virtual void set_BackgroundColor(IMagickColor`1<byte> value);
    public sealed virtual UInt32 get_BaseHeight();
    public sealed virtual UInt32 get_BaseWidth();
    public sealed virtual bool get_BlackPointCompensation();
    public sealed virtual void set_BlackPointCompensation(bool value);
    [NullableContextAttribute("2")]
public sealed virtual IMagickColor`1<byte> get_BorderColor();
    [NullableContextAttribute("2")]
public sealed virtual void set_BorderColor(IMagickColor`1<byte> value);
    [NullableContextAttribute("2")]
public sealed virtual IMagickGeometry get_BoundingBox();
    public sealed virtual UInt32 get_ChannelCount();
    [IteratorStateMachineAttribute("ImageMagick.MagickImage/<get_Channels>d__64")]
public sealed virtual IEnumerable`1<PixelChannel> get_Channels();
    public sealed virtual IChromaticityInfo get_Chromaticity();
    public sealed virtual void set_Chromaticity(IChromaticityInfo value);
    public sealed virtual ClassType get_ClassType();
    public sealed virtual void set_ClassType(ClassType value);
    public sealed virtual Percentage get_ColorFuzz();
    public sealed virtual void set_ColorFuzz(Percentage value);
    public sealed virtual int get_ColormapSize();
    public sealed virtual void set_ColormapSize(int value);
    public sealed virtual ColorSpace get_ColorSpace();
    public sealed virtual void set_ColorSpace(ColorSpace value);
    public sealed virtual ColorType get_ColorType();
    public sealed virtual void set_ColorType(ColorType value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Comment();
    [NullableContextAttribute("2")]
public sealed virtual void set_Comment(string value);
    public sealed virtual CompositeOperator get_Compose();
    public sealed virtual void set_Compose(CompositeOperator value);
    public sealed virtual CompressionMethod get_Compression();
    public sealed virtual Density get_Density();
    public sealed virtual void set_Density(Density value);
    public sealed virtual UInt32 get_Depth();
    public sealed virtual void set_Depth(UInt32 value);
    public sealed virtual Endian get_Endian();
    public sealed virtual void set_Endian(Endian value);
    [NullableContextAttribute("2")]
public sealed virtual string get_FileName();
    public sealed virtual FilterType get_FilterType();
    public sealed virtual void set_FilterType(FilterType value);
    public sealed virtual MagickFormat get_Format();
    public sealed virtual void set_Format(MagickFormat value);
    public sealed virtual double get_Gamma();
    public sealed virtual GifDisposeMethod get_GifDisposeMethod();
    public sealed virtual void set_GifDisposeMethod(GifDisposeMethod value);
    public sealed virtual bool get_HasAlpha();
    public sealed virtual void set_HasAlpha(bool value);
    public sealed virtual UInt32 get_Height();
    public sealed virtual Interlace get_Interlace();
    public sealed virtual PixelInterpolateMethod get_Interpolate();
    public sealed virtual void set_Interpolate(PixelInterpolateMethod value);
    public sealed virtual bool get_IsOpaque();
    [NullableContextAttribute("2")]
public sealed virtual string get_Label();
    [NullableContextAttribute("2")]
public sealed virtual void set_Label(string value);
    [NullableContextAttribute("2")]
public sealed virtual IMagickColor`1<byte> get_MatteColor();
    [NullableContextAttribute("2")]
public sealed virtual void set_MatteColor(IMagickColor`1<byte> value);
    public sealed virtual UInt32 get_MetaChannelCount();
    public sealed virtual void set_MetaChannelCount(UInt32 value);
    public sealed virtual OrientationType get_Orientation();
    public sealed virtual void set_Orientation(OrientationType value);
    public sealed virtual IMagickGeometry get_Page();
    public sealed virtual void set_Page(IMagickGeometry value);
    [IteratorStateMachineAttribute("ImageMagick.MagickImage/<get_ProfileNames>d__141")]
public sealed virtual IEnumerable`1<string> get_ProfileNames();
    public sealed virtual UInt32 get_Quality();
    public sealed virtual void set_Quality(UInt32 value);
    public sealed virtual RenderingIntent get_RenderingIntent();
    public sealed virtual void set_RenderingIntent(RenderingIntent value);
    public sealed virtual IMagickSettings`1<byte> get_Settings();
    public sealed virtual string get_Signature();
    public sealed virtual UInt32 get_TotalColors();
    public sealed virtual VirtualPixelMethod get_VirtualPixelMethod();
    public sealed virtual void set_VirtualPixelMethod(VirtualPixelMethod value);
    public sealed virtual UInt32 get_Width();
    private bool get_HasColorProfile();
    [NullableContextAttribute("2")]
public static bool op_GreaterThan(MagickImage left, MagickImage right);
    [NullableContextAttribute("2")]
public static bool op_LessThan(MagickImage left, MagickImage right);
    [NullableContextAttribute("2")]
public static bool op_GreaterThanOrEqual(MagickImage left, MagickImage right);
    [NullableContextAttribute("2")]
public static bool op_LessThanOrEqual(MagickImage left, MagickImage right);
    public static IMagickImage`1<byte> FromBase64(string value);
    public sealed virtual void AdaptiveBlur();
    public sealed virtual void AdaptiveBlur(double radius);
    public sealed virtual void AdaptiveBlur(double radius, double sigma);
    public sealed virtual void AdaptiveResize(UInt32 width, UInt32 height);
    public sealed virtual void AdaptiveResize(IMagickGeometry geometry);
    public sealed virtual void AdaptiveSharpen();
    public sealed virtual void AdaptiveSharpen(Channels channels);
    public sealed virtual void AdaptiveSharpen(double radius, double sigma);
    public sealed virtual void AdaptiveSharpen(double radius, double sigma, Channels channels);
    public sealed virtual void AdaptiveThreshold(UInt32 width, UInt32 height);
    public sealed virtual void AdaptiveThreshold(UInt32 width, UInt32 height, Channels channels);
    public sealed virtual void AdaptiveThreshold(UInt32 width, UInt32 height, double bias);
    public sealed virtual void AdaptiveThreshold(UInt32 width, UInt32 height, double bias, Channels channels);
    public sealed virtual void AdaptiveThreshold(UInt32 width, UInt32 height, Percentage biasPercentage);
    public sealed virtual void AdaptiveThreshold(UInt32 width, UInt32 height, Percentage biasPercentage, Channels channels);
    public sealed virtual void AddNoise(NoiseType noiseType);
    public sealed virtual void AddNoise(NoiseType noiseType, Channels channels);
    public sealed virtual void AddNoise(NoiseType noiseType, double attenuate);
    public sealed virtual void AddNoise(NoiseType noiseType, double attenuate, Channels channels);
    public sealed virtual void AffineTransform(IDrawableAffine affineMatrix);
    public sealed virtual void Alpha(AlphaOption value);
    public sealed virtual void Annotate(string text, IMagickGeometry boundingArea);
    public sealed virtual void Annotate(string text, IMagickGeometry boundingArea, Gravity gravity);
    public sealed virtual void Annotate(string text, IMagickGeometry boundingArea, Gravity gravity, double angle);
    public sealed virtual void Annotate(string text, Gravity gravity);
    public sealed virtual void AutoGamma();
    public sealed virtual void AutoGamma(Channels channels);
    public sealed virtual void AutoLevel();
    public sealed virtual void AutoLevel(Channels channels);
    public sealed virtual void AutoOrient();
    public sealed virtual void AutoThreshold(AutoThresholdMethod method);
    public sealed virtual void BilateralBlur(UInt32 width, UInt32 height);
    public sealed virtual void BilateralBlur(UInt32 width, UInt32 height, double intensitySigma, double spatialSigma);
    public sealed virtual void BlackThreshold(Percentage threshold);
    public sealed virtual void BlackThreshold(Percentage threshold, Channels channels);
    public sealed virtual void BlueShift();
    public sealed virtual void BlueShift(double factor);
    public sealed virtual void Blur();
    public sealed virtual void Blur(Channels channels);
    public sealed virtual void Blur(double radius, double sigma);
    public sealed virtual void Blur(double radius, double sigma, Channels channels);
    public sealed virtual void Border(UInt32 size);
    public sealed virtual void Border(UInt32 width, UInt32 height);
    public sealed virtual void Border(Percentage percentage);
    public sealed virtual void BrightnessContrast(Percentage brightness, Percentage contrast);
    public sealed virtual void BrightnessContrast(Percentage brightness, Percentage contrast, Channels channels);
    public sealed virtual void CannyEdge();
    public sealed virtual void CannyEdge(double radius, double sigma, Percentage lower, Percentage upper);
    public sealed virtual void Charcoal();
    public sealed virtual void Charcoal(double radius, double sigma);
    public sealed virtual void Chop(IMagickGeometry geometry);
    public sealed virtual void ChopHorizontal(int offset, UInt32 width);
    public sealed virtual void ChopVertical(int offset, UInt32 height);
    public sealed virtual void Clahe(Percentage xTiles, Percentage yTiles, UInt32 numberBins, double clipLimit);
    public sealed virtual void Clahe(UInt32 xTiles, UInt32 yTiles, UInt32 numberBins, double clipLimit);
    public sealed virtual void Clamp();
    public sealed virtual void Clamp(Channels channels);
    public sealed virtual void Clip();
    public sealed virtual void Clip(string pathName);
    public sealed virtual void ClipOutside();
    public sealed virtual void ClipOutside(string pathName);
    public sealed virtual IMagickImage`1<byte> Clone();
    public sealed virtual IMagickImage`1<byte> Clone(IMagickGeometry geometry);
    public sealed virtual IMagickImage`1<byte> Clone(UInt32 width, UInt32 height);
    public sealed virtual IMagickImage`1<byte> Clone(int x, int y, UInt32 width, UInt32 height);
    public sealed virtual void Clut(IMagickImage image);
    public sealed virtual void Clut(IMagickImage image, Channels channels);
    public sealed virtual void Clut(IMagickImage image, PixelInterpolateMethod method);
    public sealed virtual void Clut(IMagickImage image, PixelInterpolateMethod method, Channels channels);
    public sealed virtual void ColorAlpha(IMagickColor`1<byte> color);
    public sealed virtual void ColorDecisionList(string fileName);
    public sealed virtual void Colorize(IMagickColor`1<byte> color, Percentage alpha);
    public sealed virtual void Colorize(IMagickColor`1<byte> color, Percentage alphaRed, Percentage alphaGreen, Percentage alphaBlue);
    public sealed virtual void ColorMatrix(IMagickColorMatrix matrix);
    public sealed virtual void ColorThreshold(IMagickColor`1<byte> startColor, IMagickColor`1<byte> stopColor);
    public sealed virtual IMagickErrorInfo Compare(IMagickImage image);
    public sealed virtual double Compare(IMagickImage image, ErrorMetric metric);
    public sealed virtual double Compare(IMagickImage image, ErrorMetric metric, Channels channels);
    public sealed virtual IMagickImage`1<byte> Compare(IMagickImage image, ErrorMetric metric, Double& distortion);
    public sealed virtual IMagickImage`1<byte> Compare(IMagickImage image, ErrorMetric metric, Channels channels, Double& distortion);
    public sealed virtual IMagickImage`1<byte> Compare(IMagickImage image, ICompareSettings`1<byte> settings, Double& distortion);
    public sealed virtual IMagickImage`1<byte> Compare(IMagickImage image, ICompareSettings`1<byte> settings, Channels channels, Double& distortion);
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(IMagickImage`1<byte> other);
    public sealed virtual void Composite(IMagickImage image);
    public sealed virtual void Composite(IMagickImage image, Channels channels);
    public sealed virtual void Composite(IMagickImage image, CompositeOperator compose);
    public sealed virtual void Composite(IMagickImage image, CompositeOperator compose, Channels channels);
    public sealed virtual void Composite(IMagickImage image, CompositeOperator compose, string args);
    public sealed virtual void Composite(IMagickImage image, CompositeOperator compose, string args, Channels channels);
    public sealed virtual void Composite(IMagickImage image, int x, int y);
    public sealed virtual void Composite(IMagickImage image, int x, int y, Channels channels);
    public sealed virtual void Composite(IMagickImage image, int x, int y, CompositeOperator compose);
    public sealed virtual void Composite(IMagickImage image, int x, int y, CompositeOperator compose, Channels channels);
    public sealed virtual void Composite(IMagickImage image, int x, int y, CompositeOperator compose, string args);
    public sealed virtual void Composite(IMagickImage image, int x, int y, CompositeOperator compose, string args, Channels channels);
    public sealed virtual void Composite(IMagickImage image, Gravity gravity);
    public sealed virtual void Composite(IMagickImage image, Gravity gravity, Channels channels);
    public sealed virtual void Composite(IMagickImage image, Gravity gravity, CompositeOperator compose);
    public sealed virtual void Composite(IMagickImage image, Gravity gravity, CompositeOperator compose, Channels channels);
    public sealed virtual void Composite(IMagickImage image, Gravity gravity, CompositeOperator compose, string args);
    public sealed virtual void Composite(IMagickImage image, Gravity gravity, CompositeOperator compose, string args, Channels channels);
    public sealed virtual void Composite(IMagickImage image, Gravity gravity, int x, int y);
    public sealed virtual void Composite(IMagickImage image, Gravity gravity, int x, int y, Channels channels);
    public sealed virtual void Composite(IMagickImage image, Gravity gravity, int x, int y, CompositeOperator compose);
    public sealed virtual void Composite(IMagickImage image, Gravity gravity, int x, int y, CompositeOperator compose, Channels channels);
    public sealed virtual void Composite(IMagickImage image, Gravity gravity, int x, int y, CompositeOperator compose, string args);
    public sealed virtual void Composite(IMagickImage image, Gravity gravity, int x, int y, CompositeOperator compose, string args, Channels channels);
    public sealed virtual IReadOnlyList`1<IConnectedComponent`1<byte>> ConnectedComponents(UInt32 connectivity);
    public sealed virtual IReadOnlyList`1<IConnectedComponent`1<byte>> ConnectedComponents(IConnectedComponentsSettings settings);
    public sealed virtual void Contrast();
    public sealed virtual void ContrastStretch(Percentage blackPoint);
    public sealed virtual void ContrastStretch(Percentage blackPoint, Percentage whitePoint);
    public sealed virtual void ContrastStretch(Percentage blackPoint, Percentage whitePoint, Channels channels);
    [IteratorStateMachineAttribute("ImageMagick.MagickImage/<ConvexHull>d__279")]
public sealed virtual IEnumerable`1<PointD> ConvexHull();
    public sealed virtual void Convolve(IConvolveMatrix matrix);
    public sealed virtual void CopyPixels(IMagickImage source);
    public sealed virtual void CopyPixels(IMagickImage source, Channels channels);
    public sealed virtual void CopyPixels(IMagickImage source, IMagickGeometry geometry);
    public sealed virtual void CopyPixels(IMagickImage source, IMagickGeometry geometry, Channels channels);
    public sealed virtual void CopyPixels(IMagickImage source, IMagickGeometry geometry, int x, int y);
    public sealed virtual void CopyPixels(IMagickImage source, IMagickGeometry geometry, int x, int y, Channels channels);
    public sealed virtual void Crop(UInt32 width, UInt32 height);
    public sealed virtual void Crop(UInt32 width, UInt32 height, Gravity gravity);
    public sealed virtual void Crop(IMagickGeometry geometry);
    public sealed virtual void Crop(IMagickGeometry geometry, Gravity gravity);
    public sealed virtual IReadOnlyList`1<IMagickImage`1<byte>> CropToTiles(UInt32 width, UInt32 height);
    public sealed virtual IReadOnlyList`1<IMagickImage`1<byte>> CropToTiles(IMagickGeometry geometry);
    public sealed virtual void CycleColormap(int amount);
    public sealed virtual void Decipher(string passphrase);
    public sealed virtual double Deskew(Percentage threshold);
    public sealed virtual double DeskewAndCrop(Percentage threshold);
    public sealed virtual void Despeckle();
    public sealed virtual UInt32 DetermineBitDepth();
    public sealed virtual UInt32 DetermineBitDepth(Channels channels);
    public sealed virtual ColorType DetermineColorType();
    public sealed virtual void Dispose();
    public sealed virtual void Distort(DistortMethod method, Double[] arguments);
    public sealed virtual void Distort(IDistortSettings settings, Double[] arguments);
    public sealed virtual void Draw(IDrawables`1<byte> drawables);
    public sealed virtual void Draw(IDrawable[] drawables);
    public sealed virtual void Draw(IEnumerable`1<IDrawable> drawables);
    public sealed virtual void Edge(double radius);
    public sealed virtual void Emboss();
    public sealed virtual void Emboss(double radius, double sigma);
    public sealed virtual void Encipher(string passphrase);
    public sealed virtual void Enhance();
    public sealed virtual void Equalize();
    public sealed virtual void Equalize(Channels channels);
    public sealed virtual void Evaluate(Channels channels, EvaluateFunction evaluateFunction, Double[] arguments);
    public sealed virtual void Evaluate(Channels channels, EvaluateOperator evaluateOperator, double value);
    public sealed virtual void Evaluate(Channels channels, EvaluateOperator evaluateOperator, Percentage percentage);
    public sealed virtual void Evaluate(Channels channels, IMagickGeometry geometry, EvaluateOperator evaluateOperator, double value);
    public sealed virtual void Evaluate(Channels channels, IMagickGeometry geometry, EvaluateOperator evaluateOperator, Percentage percentage);
    public sealed virtual void Extent(UInt32 width, UInt32 height);
    public sealed virtual void Extent(int x, int y, UInt32 width, UInt32 height);
    public sealed virtual void Extent(UInt32 width, UInt32 height, IMagickColor`1<byte> backgroundColor);
    public sealed virtual void Extent(UInt32 width, UInt32 height, Gravity gravity);
    public sealed virtual void Extent(UInt32 width, UInt32 height, Gravity gravity, IMagickColor`1<byte> backgroundColor);
    public sealed virtual void Extent(IMagickGeometry geometry);
    public sealed virtual void Extent(IMagickGeometry geometry, IMagickColor`1<byte> backgroundColor);
    public sealed virtual void Extent(IMagickGeometry geometry, Gravity gravity);
    public sealed virtual void Extent(IMagickGeometry geometry, Gravity gravity, IMagickColor`1<byte> backgroundColor);
    public sealed virtual void Flip();
    public sealed virtual void FloodFill(byte alpha, int x, int y);
    public sealed virtual void FloodFill(IMagickColor`1<byte> color, int x, int y);
    public sealed virtual void FloodFill(IMagickColor`1<byte> color, int x, int y, IMagickColor`1<byte> target);
    public sealed virtual void FloodFill(IMagickImage`1<byte> image, int x, int y);
    public sealed virtual void FloodFill(IMagickImage`1<byte> image, int x, int y, IMagickColor`1<byte> target);
    public sealed virtual void Flop();
    public sealed virtual ITypeMetric FontTypeMetrics(string text);
    public sealed virtual ITypeMetric FontTypeMetrics(string text, bool ignoreNewlines);
    public sealed virtual string FormatExpression(string expression);
    public sealed virtual void Frame();
    public sealed virtual void Frame(IMagickGeometry geometry);
    public sealed virtual void Frame(UInt32 width, UInt32 height);
    public sealed virtual void Frame(UInt32 width, UInt32 height, int innerBevel, int outerBevel);
    public sealed virtual void Fx(string expression);
    public sealed virtual void Fx(string expression, Channels channels);
    public sealed virtual void GammaCorrect(double gamma);
    public sealed virtual void GammaCorrect(double gamma, Channels channels);
    public sealed virtual void GaussianBlur(double radius);
    public sealed virtual void GaussianBlur(double radius, Channels channels);
    public sealed virtual void GaussianBlur(double radius, double sigma);
    public sealed virtual void GaussianBlur(double radius, double sigma, Channels channels);
    [NullableContextAttribute("2")]
public sealed virtual IEightBimProfile Get8BimProfile();
    public sealed virtual string GetArtifact(string name);
    public sealed virtual string GetAttribute(string name);
    [NullableContextAttribute("2")]
public sealed virtual string GetClippingPath();
    public sealed virtual string GetClippingPath(string pathName);
    [NullableContextAttribute("2")]
public sealed virtual IMagickColor`1<byte> GetColormapColor(int index);
    [NullableContextAttribute("2")]
public sealed virtual IColorProfile GetColorProfile();
    [NullableContextAttribute("2")]
public sealed virtual IExifProfile GetExifProfile();
    [NullableContextAttribute("2")]
public sealed virtual IIptcProfile GetIptcProfile();
    public sealed virtual IPixelCollection`1<byte> GetPixels();
    public sealed virtual IUnsafePixelCollection`1<byte> GetPixelsUnsafe();
    public sealed virtual IImageProfile GetProfile(string name);
    [NullableContextAttribute("2")]
public sealed virtual IMagickImage`1<byte> GetReadMask();
    [NullableContextAttribute("2")]
public sealed virtual IMagickImage`1<byte> GetWriteMask();
    [NullableContextAttribute("2")]
public sealed virtual IXmpProfile GetXmpProfile();
    public sealed virtual void Grayscale();
    public sealed virtual void Grayscale(PixelIntensityMethod method);
    public sealed virtual bool HasProfile(string name);
    public sealed virtual void HaldClut(IMagickImage image);
    public sealed virtual void HaldClut(IMagickImage image, Channels channels);
    public sealed virtual IReadOnlyDictionary`2<IMagickColor`1<byte>, UInt32> Histogram();
    public sealed virtual void HoughLine();
    public sealed virtual void HoughLine(UInt32 width, UInt32 height, UInt32 threshold);
    public sealed virtual void Implode(double amount, PixelInterpolateMethod method);
    public sealed virtual void ImportPixels(Byte[] data, IPixelImportSettings settings);
    public sealed virtual void ImportPixels(Byte[] data, UInt32 offset, IPixelImportSettings settings);
    [NullableContextAttribute("2")]
public sealed virtual IMagickImage`1<byte> Integral();
    public sealed virtual void InterpolativeResize(UInt32 width, UInt32 height, PixelInterpolateMethod method);
    public sealed virtual void InterpolativeResize(IMagickGeometry geometry, PixelInterpolateMethod method);
    public sealed virtual void InterpolativeResize(Percentage percentage, PixelInterpolateMethod method);
    public sealed virtual void InterpolativeResize(Percentage percentageWidth, Percentage percentageHeight, PixelInterpolateMethod method);
    public sealed virtual void InverseContrast();
    public sealed virtual void InverseFloodFill(byte alpha, int x, int y);
    public sealed virtual void InverseFloodFill(IMagickColor`1<byte> color, int x, int y);
    public sealed virtual void InverseFloodFill(IMagickColor`1<byte> color, int x, int y, IMagickColor`1<byte> target);
    public sealed virtual void InverseFloodFill(IMagickImage`1<byte> image, int x, int y);
    public sealed virtual void InverseFloodFill(IMagickImage`1<byte> image, int x, int y, IMagickColor`1<byte> target);
    public sealed virtual void InverseLevel(byte blackPoint, byte whitePoint);
    public sealed virtual void InverseLevel(Percentage blackPointPercentage, Percentage whitePointPercentage);
    public sealed virtual void InverseLevel(byte blackPoint, byte whitePoint, Channels channels);
    public sealed virtual void InverseLevel(Percentage blackPointPercentage, Percentage whitePointPercentage, Channels channels);
    public sealed virtual void InverseLevel(byte blackPoint, byte whitePoint, double gamma);
    public sealed virtual void InverseLevel(Percentage blackPointPercentage, Percentage whitePointPercentage, double gamma);
    public sealed virtual void InverseLevel(byte blackPoint, byte whitePoint, double gamma, Channels channels);
    public sealed virtual void InverseLevel(Percentage blackPointPercentage, Percentage whitePointPercentage, double gamma, Channels channels);
    public sealed virtual void InverseLevelColors(IMagickColor`1<byte> blackColor, IMagickColor`1<byte> whiteColor);
    public sealed virtual void InverseLevelColors(IMagickColor`1<byte> blackColor, IMagickColor`1<byte> whiteColor, Channels channels);
    public sealed virtual void InverseOpaque(IMagickColor`1<byte> target, IMagickColor`1<byte> fill);
    public sealed virtual void InverseSigmoidalContrast(double contrast);
    public sealed virtual void InverseSigmoidalContrast(double contrast, double midpoint);
    public sealed virtual void InverseSigmoidalContrast(double contrast, double midpoint, Channels channels);
    public sealed virtual void InverseSigmoidalContrast(double contrast, Percentage midpointPercentage);
    public sealed virtual void InverseTransparent(IMagickColor`1<byte> color);
    public sealed virtual void InverseTransparentChroma(IMagickColor`1<byte> colorLow, IMagickColor`1<byte> colorHigh);
    public sealed virtual void Kmeans(IKmeansSettings settings);
    public sealed virtual void Kuwahara();
    public sealed virtual void Kuwahara(double radius, double sigma);
    public sealed virtual void Level(byte blackPoint, byte whitePoint);
    public sealed virtual void Level(Percentage blackPointPercentage, Percentage whitePointPercentage);
    public sealed virtual void Level(byte blackPoint, byte whitePoint, Channels channels);
    public sealed virtual void Level(Percentage blackPointPercentage, Percentage whitePointPercentage, Channels channels);
    public sealed virtual void Level(byte blackPoint, byte whitePoint, double gamma);
    public sealed virtual void Level(Percentage blackPointPercentage, Percentage whitePointPercentage, double gamma);
    public sealed virtual void Level(byte blackPoint, byte whitePoint, double gamma, Channels channels);
    public sealed virtual void Level(Percentage blackPointPercentage, Percentage whitePointPercentage, double gamma, Channels channels);
    public sealed virtual void LevelColors(IMagickColor`1<byte> blackColor, IMagickColor`1<byte> whiteColor);
    public sealed virtual void LevelColors(IMagickColor`1<byte> blackColor, IMagickColor`1<byte> whiteColor, Channels channels);
    public sealed virtual void LinearStretch(Percentage blackPoint, Percentage whitePoint);
    public sealed virtual void LiquidRescale(UInt32 width, UInt32 height);
    public sealed virtual void LiquidRescale(UInt32 width, UInt32 height, double deltaX, double rigidity);
    public sealed virtual void LiquidRescale(IMagickGeometry geometry);
    public sealed virtual void LiquidRescale(Percentage percentage);
    public sealed virtual void LiquidRescale(Percentage percentageWidth, Percentage percentageHeight);
    public sealed virtual void LiquidRescale(Percentage percentageWidth, Percentage percentageHeight, double deltaX, double rigidity);
    public sealed virtual void LocalContrast(double radius, Percentage strength);
    public sealed virtual void LocalContrast(double radius, Percentage strength, Channels channels);
    public sealed virtual void Lower(UInt32 size);
    public sealed virtual void Magnify();
    public sealed virtual void MeanShift(UInt32 size);
    public sealed virtual void MeanShift(UInt32 size, Percentage colorDistance);
    public sealed virtual void MeanShift(UInt32 width, UInt32 height);
    public sealed virtual void MeanShift(UInt32 width, UInt32 height, Percentage colorDistance);
    public sealed virtual void MedianFilter();
    public sealed virtual void MedianFilter(UInt32 radius);
    public sealed virtual void Minify();
    [IteratorStateMachineAttribute("ImageMagick.MagickImage/<MinimumBoundingBox>d__435")]
public sealed virtual IEnumerable`1<PointD> MinimumBoundingBox();
    public sealed virtual void Modulate(Percentage brightness);
    public sealed virtual void Modulate(Percentage brightness, Percentage saturation);
    public sealed virtual void Modulate(Percentage brightness, Percentage saturation, Percentage hue);
    public sealed virtual void Morphology(IMorphologySettings settings);
    public sealed virtual IMoments Moments();
    public sealed virtual void MotionBlur(double radius, double sigma, double angle);
    public sealed virtual void Negate();
    public sealed virtual void Negate(Channels channels);
    public sealed virtual void NegateGrayscale();
    public sealed virtual void NegateGrayscale(Channels channels);
    public sealed virtual void Normalize();
    public sealed virtual void OilPaint();
    public sealed virtual void OilPaint(double radius, double sigma);
    public sealed virtual void Opaque(IMagickColor`1<byte> target, IMagickColor`1<byte> fill);
    public sealed virtual void OrderedDither(string thresholdMap);
    public sealed virtual void OrderedDither(string thresholdMap, Channels channels);
    public sealed virtual void Perceptible(double epsilon);
    public sealed virtual void Perceptible(double epsilon, Channels channels);
    [NullableContextAttribute("2")]
public sealed virtual IPerceptualHash PerceptualHash();
    public sealed virtual IPerceptualHash PerceptualHash(ColorSpace[] colorSpaces);
    public sealed virtual void Ping(Byte[] data);
    public sealed virtual void Ping(Byte[] data, UInt32 offset, UInt32 count);
    public sealed virtual void Ping(Byte[] data, UInt32 offset, UInt32 count, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void Ping(Byte[] data, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void Ping(FileInfo file);
    public sealed virtual void Ping(FileInfo file, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void Ping(Stream stream);
    public sealed virtual void Ping(Stream stream, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void Ping(string fileName);
    public sealed virtual void Ping(string fileName, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void Polaroid(string caption, double angle, PixelInterpolateMethod method);
    public sealed virtual void Posterize(int levels);
    public sealed virtual void Posterize(int levels, Channels channels);
    public sealed virtual void Posterize(int levels, DitherMethod method);
    public sealed virtual void Posterize(int levels, DitherMethod method, Channels channels);
    public sealed virtual void PreserveColorType();
    public sealed virtual IMagickErrorInfo Quantize(IQuantizeSettings settings);
    public sealed virtual void Raise(int size);
    public sealed virtual void RandomThreshold(Percentage percentageLow, Percentage percentageHigh);
    public sealed virtual void RandomThreshold(Percentage percentageLow, Percentage percentageHigh, Channels channels);
    public sealed virtual void RandomThreshold(byte low, byte high);
    public sealed virtual void RandomThreshold(byte low, byte high, Channels channels);
    public sealed virtual void RangeThreshold(Percentage percentageLowBlack, Percentage percentageLowWhite, Percentage percentageHighWhite, Percentage percentageHighBlack);
    public sealed virtual void RangeThreshold(byte lowBlack, byte lowWhite, byte highWhite, byte highBlack);
    public sealed virtual void Read(Byte[] data);
    public sealed virtual void Read(Byte[] data, UInt32 offset, UInt32 count);
    public sealed virtual void Read(Byte[] data, UInt32 offset, UInt32 count, MagickFormat format);
    public sealed virtual void Read(Byte[] data, UInt32 offset, UInt32 count, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void Read(Byte[] data, MagickFormat format);
    public sealed virtual void Read(Byte[] data, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void Read(FileInfo file);
    public sealed virtual void Read(FileInfo file, UInt32 width, UInt32 height);
    public sealed virtual void Read(FileInfo file, MagickFormat format);
    public sealed virtual void Read(FileInfo file, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void Read(IMagickColor`1<byte> color, UInt32 width, UInt32 height);
    public sealed virtual void Read(Stream stream);
    public sealed virtual void Read(Stream stream, MagickFormat format);
    public sealed virtual void Read(Stream stream, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void Read(string fileName);
    public sealed virtual void Read(string fileName, UInt32 width, UInt32 height);
    public sealed virtual void Read(string fileName, MagickFormat format);
    public sealed virtual void Read(string fileName, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual Task ReadAsync(FileInfo file);
    public sealed virtual Task ReadAsync(FileInfo file, CancellationToken cancellationToken);
    public sealed virtual Task ReadAsync(FileInfo file, MagickFormat format);
    public sealed virtual Task ReadAsync(FileInfo file, MagickFormat format, CancellationToken cancellationToken);
    public sealed virtual Task ReadAsync(FileInfo file, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual Task ReadAsync(FileInfo file, IMagickReadSettings`1<byte> readSettings, CancellationToken cancellationToken);
    public sealed virtual Task ReadAsync(Stream stream);
    public sealed virtual Task ReadAsync(Stream stream, CancellationToken cancellationToken);
    public sealed virtual Task ReadAsync(Stream stream, MagickFormat format);
    public sealed virtual Task ReadAsync(Stream stream, MagickFormat format, CancellationToken cancellationToken);
    public sealed virtual Task ReadAsync(Stream stream, IMagickReadSettings`1<byte> readSettings);
    [AsyncStateMachineAttribute("ImageMagick.MagickImage/<ReadAsync>d__509")]
public sealed virtual Task ReadAsync(Stream stream, IMagickReadSettings`1<byte> readSettings, CancellationToken cancellationToken);
    public sealed virtual Task ReadAsync(string fileName);
    public sealed virtual Task ReadAsync(string fileName, CancellationToken cancellationToken);
    public sealed virtual Task ReadAsync(string fileName, MagickFormat format);
    public sealed virtual Task ReadAsync(string fileName, MagickFormat format, CancellationToken cancellationToken);
    public sealed virtual Task ReadAsync(string fileName, IMagickReadSettings`1<byte> readSettings);
    [AsyncStateMachineAttribute("ImageMagick.MagickImage/<ReadAsync>d__515")]
public sealed virtual Task ReadAsync(string fileName, IMagickReadSettings`1<byte> readSettings, CancellationToken cancellationToken);
    public sealed virtual void ReadPixels(Byte[] data, IPixelReadSettings`1<byte> settings);
    public sealed virtual void ReadPixels(Byte[] data, UInt32 offset, UInt32 count, IPixelReadSettings`1<byte> settings);
    public sealed virtual void ReadPixels(FileInfo file, IPixelReadSettings`1<byte> settings);
    public sealed virtual void ReadPixels(Stream stream, IPixelReadSettings`1<byte> settings);
    public sealed virtual void ReadPixels(string fileName, IPixelReadSettings`1<byte> settings);
    public sealed virtual Task ReadPixelsAsync(FileInfo file, IPixelReadSettings`1<byte> settings);
    public sealed virtual Task ReadPixelsAsync(FileInfo file, IPixelReadSettings`1<byte> settings, CancellationToken cancellationToken);
    public sealed virtual Task ReadPixelsAsync(Stream stream, IPixelReadSettings`1<byte> settings);
    [AsyncStateMachineAttribute("ImageMagick.MagickImage/<ReadPixelsAsync>d__524")]
public sealed virtual Task ReadPixelsAsync(Stream stream, IPixelReadSettings`1<byte> settings, CancellationToken cancellationToken);
    public sealed virtual Task ReadPixelsAsync(string fileName, IPixelReadSettings`1<byte> settings);
    [AsyncStateMachineAttribute("ImageMagick.MagickImage/<ReadPixelsAsync>d__526")]
public sealed virtual Task ReadPixelsAsync(string fileName, IPixelReadSettings`1<byte> settings, CancellationToken cancellationToken);
    public sealed virtual void ReduceNoise();
    public sealed virtual void ReduceNoise(UInt32 order);
    public sealed virtual void RegionMask(IMagickGeometry geometry);
    public sealed virtual IMagickErrorInfo Remap(IEnumerable`1<IMagickColor`1<byte>> colors);
    public sealed virtual IMagickErrorInfo Remap(IEnumerable`1<IMagickColor`1<byte>> colors, IQuantizeSettings settings);
    public sealed virtual IMagickErrorInfo Remap(IMagickImage image);
    public sealed virtual IMagickErrorInfo Remap(IMagickImage image, IQuantizeSettings settings);
    public sealed virtual void RemoveArtifact(string name);
    public sealed virtual void RemoveAttribute(string name);
    public sealed virtual void RemoveRegionMask();
    public sealed virtual void RemoveProfile(IImageProfile profile);
    public sealed virtual void RemoveProfile(string name);
    public sealed virtual void RemoveReadMask();
    public sealed virtual void RemoveWriteMask();
    public sealed virtual void Resample(double resolutionX, double resolutionY);
    public sealed virtual void Resample(PointD density);
    public sealed virtual void ResetPage();
    public sealed virtual void Resize(UInt32 width, UInt32 height);
    public sealed virtual void Resize(IMagickGeometry geometry);
    public sealed virtual void Resize(Percentage percentage);
    public sealed virtual void Resize(Percentage percentageWidth, Percentage percentageHeight);
    public sealed virtual void Roll(int x, int y);
    public sealed virtual void Rotate(double degrees);
    public sealed virtual void RotationalBlur(double angle);
    public sealed virtual void RotationalBlur(double angle, Channels channels);
    public sealed virtual void Sample(UInt32 width, UInt32 height);
    public sealed virtual void Sample(IMagickGeometry geometry);
    public sealed virtual void Sample(Percentage percentage);
    public sealed virtual void Sample(Percentage percentageWidth, Percentage percentageHeight);
    public sealed virtual void Scale(UInt32 width, UInt32 height);
    public sealed virtual void Scale(IMagickGeometry geometry);
    public sealed virtual void Scale(Percentage percentage);
    public sealed virtual void Scale(Percentage percentageWidth, Percentage percentageHeight);
    public sealed virtual void Segment();
    public sealed virtual void Segment(ColorSpace quantizeColorSpace, double clusterThreshold, double smoothingThreshold);
    public sealed virtual void SelectiveBlur(double radius, double sigma, double threshold);
    public sealed virtual void SelectiveBlur(double radius, double sigma, double threshold, Channels channels);
    public sealed virtual void SelectiveBlur(double radius, double sigma, Percentage thresholdPercentage);
    public sealed virtual void SelectiveBlur(double radius, double sigma, Percentage thresholdPercentage, Channels channels);
    public sealed virtual IReadOnlyList`1<IMagickImage`1<byte>> Separate();
    public sealed virtual IReadOnlyList`1<IMagickImage`1<byte>> Separate(Channels channels);
    public sealed virtual void SepiaTone();
    public sealed virtual void SepiaTone(Percentage threshold);
    public sealed virtual void SetArtifact(string name, string value);
    public sealed virtual void SetArtifact(string name, bool flag);
    public sealed virtual void SetAttenuate(double attenuate);
    public sealed virtual void SetAttribute(string name, string value);
    public sealed virtual void SetAttribute(string name, bool flag);
    public sealed virtual void SetBitDepth(UInt32 value);
    public sealed virtual void SetBitDepth(UInt32 value, Channels channels);
    public sealed virtual void SetClippingPath(string value);
    public sealed virtual void SetClippingPath(string value, string pathName);
    public sealed virtual void SetColormapColor(int index, IMagickColor`1<byte> color);
    public sealed virtual void SetCompression(CompressionMethod compression);
    public sealed virtual void SetProfile(IImageProfile profile);
    public sealed virtual void SetProfile(IColorProfile profile);
    public sealed virtual void SetProfile(IColorProfile profile, ColorTransformMode mode);
    public sealed virtual void SetReadMask(IMagickImage image);
    public sealed virtual void SetWriteMask(IMagickImage image);
    public sealed virtual void Shade();
    public sealed virtual void Shade(double azimuth, double elevation);
    public sealed virtual void Shade(double azimuth, double elevation, Channels channels);
    public sealed virtual void ShadeGrayscale();
    public sealed virtual void ShadeGrayscale(double azimuth, double elevation);
    public sealed virtual void ShadeGrayscale(double azimuth, double elevation, Channels channels);
    public sealed virtual void Shadow();
    public sealed virtual void Shadow(IMagickColor`1<byte> color);
    public sealed virtual void Shadow(int x, int y, double sigma, Percentage alpha);
    public sealed virtual void Shadow(int x, int y, double sigma, Percentage alpha, IMagickColor`1<byte> color);
    public sealed virtual void Sharpen();
    public sealed virtual void Sharpen(Channels channels);
    public sealed virtual void Sharpen(double radius, double sigma);
    public sealed virtual void Sharpen(double radius, double sigma, Channels channels);
    public sealed virtual void Shave(UInt32 size);
    public sealed virtual void Shave(UInt32 leftRight, UInt32 topBottom);
    public sealed virtual void Shear(double xAngle, double yAngle);
    public sealed virtual void SigmoidalContrast(double contrast);
    public sealed virtual void SigmoidalContrast(double contrast, double midpoint);
    public sealed virtual void SigmoidalContrast(double contrast, double midpoint, Channels channels);
    public sealed virtual void SigmoidalContrast(double contrast, Percentage midpointPercentage);
    public sealed virtual void SparseColor(SparseColorMethod method, IEnumerable`1<ISparseColorArg`1<byte>> args);
    public sealed virtual void SparseColor(SparseColorMethod method, ISparseColorArg`1[] args);
    public sealed virtual void SparseColor(Channels channels, SparseColorMethod method, IEnumerable`1<ISparseColorArg`1<byte>> args);
    public sealed virtual void SparseColor(Channels channels, SparseColorMethod method, ISparseColorArg`1[] args);
    public sealed virtual void Sketch();
    public sealed virtual void Sketch(double radius, double sigma, double angle);
    public sealed virtual void Solarize();
    public sealed virtual void Solarize(double factor);
    public sealed virtual void Solarize(Percentage factorPercentage);
    public sealed virtual void SortPixels();
    public sealed virtual void Splice(IMagickGeometry geometry);
    public sealed virtual void Spread();
    public sealed virtual void Spread(double radius);
    public sealed virtual void Spread(PixelInterpolateMethod method, double radius);
    public sealed virtual void Statistic(StatisticType type, UInt32 width, UInt32 height);
    public sealed virtual IStatistics Statistics();
    public sealed virtual IStatistics Statistics(Channels channels);
    public sealed virtual void Stegano(IMagickImage watermark);
    public sealed virtual void Stereo(IMagickImage rightImage);
    public sealed virtual void Strip();
    public sealed virtual void Swirl(double degrees);
    public sealed virtual void Swirl(PixelInterpolateMethod method, double degrees);
    public sealed virtual IMagickSearchResult`1<byte> SubImageSearch(IMagickImage`1<byte> image);
    public sealed virtual IMagickSearchResult`1<byte> SubImageSearch(IMagickImage`1<byte> image, ErrorMetric metric);
    public sealed virtual IMagickSearchResult`1<byte> SubImageSearch(IMagickImage`1<byte> image, ErrorMetric metric, double similarityThreshold);
    public sealed virtual void Texture(IMagickImage image);
    public sealed virtual void Threshold(Percentage percentage);
    public sealed virtual void Threshold(Percentage percentage, Channels channels);
    public sealed virtual void Thumbnail(UInt32 width, UInt32 height);
    public sealed virtual void Thumbnail(IMagickGeometry geometry);
    public sealed virtual void Thumbnail(Percentage percentage);
    public sealed virtual void Thumbnail(Percentage percentageWidth, Percentage percentageHeight);
    public sealed virtual void Tile(IMagickImage image, CompositeOperator compose);
    public sealed virtual void Tile(IMagickImage image, CompositeOperator compose, string args);
    public sealed virtual void Tint(IMagickGeometry opacity, IMagickColor`1<byte> color);
    public sealed virtual string ToBase64();
    public sealed virtual string ToBase64(MagickFormat format);
    public sealed virtual string ToBase64(IWriteDefines defines);
    public sealed virtual Byte[] ToByteArray();
    public sealed virtual Byte[] ToByteArray(IWriteDefines defines);
    public sealed virtual Byte[] ToByteArray(MagickFormat format);
    public virtual string ToString();
    public sealed virtual bool TransformColorSpace(IColorProfile target);
    public sealed virtual bool TransformColorSpace(IColorProfile target, ColorTransformMode mode);
    public sealed virtual bool TransformColorSpace(IColorProfile source, IColorProfile target);
    public sealed virtual bool TransformColorSpace(IColorProfile source, IColorProfile target, ColorTransformMode mode);
    public sealed virtual void Transparent(IMagickColor`1<byte> color);
    public sealed virtual void TransparentChroma(IMagickColor`1<byte> colorLow, IMagickColor`1<byte> colorHigh);
    public sealed virtual void Transpose();
    public sealed virtual void Transverse();
    public sealed virtual void Trim();
    public sealed virtual void Trim(Gravity[] edges);
    public sealed virtual void Trim(Percentage percentBackground);
    public sealed virtual IMagickImage`1<byte> UniqueColors();
    public sealed virtual void UnsharpMask(double radius, double sigma);
    public sealed virtual void UnsharpMask(double radius, double sigma, Channels channels);
    public sealed virtual void UnsharpMask(double radius, double sigma, double amount, double threshold);
    public sealed virtual void UnsharpMask(double radius, double sigma, double amount, double threshold, Channels channels);
    public sealed virtual void Vignette();
    public sealed virtual void Vignette(double radius, double sigma, int x, int y);
    public sealed virtual void Wave();
    public sealed virtual void Wave(PixelInterpolateMethod method, double amplitude, double length);
    public sealed virtual void WaveletDenoise(byte threshold);
    public sealed virtual void WaveletDenoise(byte threshold, double softness);
    public sealed virtual void WaveletDenoise(Percentage thresholdPercentage);
    public sealed virtual void WaveletDenoise(Percentage thresholdPercentage, double softness);
    public sealed virtual void WhiteBalance();
    public sealed virtual void WhiteBalance(Percentage vibrance);
    public sealed virtual void WhiteThreshold(Percentage threshold);
    public sealed virtual void WhiteThreshold(Percentage threshold, Channels channels);
    public sealed virtual void Write(FileInfo file);
    public sealed virtual void Write(FileInfo file, IWriteDefines defines);
    public sealed virtual void Write(FileInfo file, MagickFormat format);
    public sealed virtual void Write(Stream stream);
    public sealed virtual void Write(Stream stream, IWriteDefines defines);
    public sealed virtual void Write(Stream stream, MagickFormat format);
    public sealed virtual void Write(string fileName);
    public sealed virtual void Write(string fileName, IWriteDefines defines);
    public sealed virtual void Write(string fileName, MagickFormat format);
    public sealed virtual Task WriteAsync(FileInfo file);
    public sealed virtual Task WriteAsync(FileInfo file, CancellationToken cancellationToken);
    public sealed virtual Task WriteAsync(FileInfo file, IWriteDefines defines);
    public sealed virtual Task WriteAsync(FileInfo file, IWriteDefines defines, CancellationToken cancellationToken);
    public sealed virtual Task WriteAsync(FileInfo file, MagickFormat format);
    public sealed virtual Task WriteAsync(FileInfo file, MagickFormat format, CancellationToken cancellationToken);
    public sealed virtual Task WriteAsync(Stream stream);
    public sealed virtual Task WriteAsync(Stream stream, CancellationToken cancellationToken);
    public sealed virtual Task WriteAsync(Stream stream, IWriteDefines defines);
    public sealed virtual Task WriteAsync(Stream stream, IWriteDefines defines, CancellationToken cancellationToken);
    public sealed virtual Task WriteAsync(Stream stream, MagickFormat format);
    [AsyncStateMachineAttribute("ImageMagick.MagickImage/<WriteAsync>d__697")]
public sealed virtual Task WriteAsync(Stream stream, MagickFormat format, CancellationToken cancellationToken);
    public sealed virtual Task WriteAsync(string fileName);
    public sealed virtual Task WriteAsync(string fileName, CancellationToken cancellationToken);
    public sealed virtual Task WriteAsync(string fileName, IWriteDefines defines);
    public sealed virtual Task WriteAsync(string fileName, IWriteDefines defines, CancellationToken cancellationToken);
    public sealed virtual Task WriteAsync(string fileName, MagickFormat format);
    public sealed virtual Task WriteAsync(string fileName, MagickFormat format, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
internal static IMagickImage`1<byte> Clone(IMagickImage`1<byte> image);
    internal static IMagickImage`1<byte> Create(IntPtr image, MagickSettings settings);
    internal static IMagickErrorInfo CreateErrorInfo(MagickImage image);
    internal static IReadOnlyList`1<IMagickImage`1<byte>> CreateList(IntPtr images, MagickSettings settings);
    internal static IMagickImage`1<byte> Fx(IMagickImage`1<byte> image, string expression, Channels channels);
    [NullableContextAttribute("2")]
internal static IntPtr GetInstance(IMagickImage image);
    internal static MagickSettings GetSettings(IMagickImage`1<byte> image);
    internal Nullable`1<UInt32> ChannelOffset(PixelChannel pixelChannel);
    [NullableContextAttribute("2")]
internal void SetNext(IMagickImage image);
    [NullableContextAttribute("2")]
private static MagickImage Create(IntPtr image);
    private static UInt32 GetExpectedByteLength(IPixelReadSettings`1<byte> settings);
    private static UInt32 GetExpectedByteLength(IPixelImportSettings settings);
    private static UInt32 GetExpectedLength(IPixelImportSettings settings);
    private static UInt32 GetExpectedLength(IPixelReadSettings`1<byte> settings);
    private static string ToBase64(Byte[] bytes);
    private static UInt32 ToByteCount(StorageType storageType, UInt32 length);
    private PointD CalculateContrastStretch(Percentage blackPoint, Percentage whitePoint);
    private IReadOnlyList`1<IMagickImage`1<byte>> CreateList(IntPtr images);
    private MagickReadSettings CreateReadSettings(IMagickReadSettings`1<byte> readSettings);
    private double Deskew(Percentage threshold, bool autoCrop);
    private void Dispose(bool disposing);
    private void DisposeInstance();
    private void FloodFill(byte alpha, int x, int y, bool invert);
    private void FloodFill(IMagickColor`1<byte> color, int x, int y, bool invert);
    private void FloodFill(IMagickColor`1<byte> color, int x, int y, IMagickColor`1<byte> target, bool invert);
    private void FloodFill(IMagickImage`1<byte> image, int x, int y, bool invert);
    private void FloodFill(IMagickImage`1<byte> image, int x, int y, IMagickColor`1<byte> target, bool invert);
    private void LevelColors(IMagickColor`1<byte> blackColor, IMagickColor`1<byte> whiteColor, bool invert);
    private void LevelColors(IMagickColor`1<byte> blackColor, IMagickColor`1<byte> whiteColor, Channels channels, bool invert);
    private void Opaque(IMagickColor`1<byte> target, IMagickColor`1<byte> fill, bool invert);
    private ColorProfile GetColorProfile(string name);
    private void OnArtifact(object sender, ArtifactEventArgs arguments);
    private bool OnProgress(IntPtr origin, long offset, ulong extent, IntPtr userData);
    private void OnWarning(object sender, WarningEventArgs arguments);
    [NullableContextAttribute("2")]
private void Read(Byte[] data, UIntPtr offset, UIntPtr length, IMagickReadSettings`1<byte> readSettings, bool ping, string fileName);
    private void Read(Stream stream, IMagickReadSettings`1<byte> readSettings, bool ping);
    private void Read(string fileName, IMagickReadSettings`1<byte> readSettings, bool ping);
    private void ResetSettings();
    [MemberNotNullAttribute("_nativeInstance")]
private void SetInstance(NativeMagickImage instance);
    [MemberNotNullAttribute("_settings")]
private void SetSettings(MagickSettings settings);
    [IteratorStateMachineAttribute("ImageMagick.MagickImage/<<Trim>g__GravityToEdge|658_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<string> <Trim>g__GravityToEdge|658_0(Gravity[] edges);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class ImageMagick.MagickImageCollection : object {
    private List`1<IMagickImage`1<byte>> _images;
    private NativeMagickImageCollection _nativeInstance;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private EventHandler`1<WarningEventArgs> _warning;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public IMagickImage`1<byte> Item { get; public set; }
    public MagickImageCollection(Byte[] data);
    public MagickImageCollection(Byte[] data, UInt32 offset, UInt32 count);
    public MagickImageCollection(Byte[] data, UInt32 offset, UInt32 count, MagickFormat format);
    public MagickImageCollection(Byte[] data, UInt32 offset, UInt32 count, IMagickReadSettings`1<byte> readSettings);
    public MagickImageCollection(Byte[] data, MagickFormat format);
    public MagickImageCollection(Byte[] data, IMagickReadSettings`1<byte> readSettings);
    public MagickImageCollection(FileInfo file);
    public MagickImageCollection(FileInfo file, MagickFormat format);
    public MagickImageCollection(FileInfo file, IMagickReadSettings`1<byte> readSettings);
    public MagickImageCollection(IEnumerable`1<IMagickImage`1<byte>> images);
    public MagickImageCollection(Stream stream);
    public MagickImageCollection(Stream stream, MagickFormat format);
    public MagickImageCollection(Stream stream, IMagickReadSettings`1<byte> readSettings);
    public MagickImageCollection(string fileName);
    public MagickImageCollection(string fileName, MagickFormat format);
    public MagickImageCollection(string fileName, IMagickReadSettings`1<byte> readSettings);
    protected virtual override void Finalize();
    public sealed virtual void add_Warning(EventHandler`1<WarningEventArgs> value);
    public sealed virtual void remove_Warning(EventHandler`1<WarningEventArgs> value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual IMagickImage`1<byte> get_Item(int index);
    public sealed virtual void set_Item(int index, IMagickImage`1<byte> value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(IMagickImage`1<byte> item);
    public sealed virtual void Add(string fileName);
    public sealed virtual void AddRange(Byte[] data);
    public sealed virtual void AddRange(Byte[] data, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void AddRange(IEnumerable`1<IMagickImage`1<byte>> images);
    public sealed virtual void AddRange(string fileName);
    public sealed virtual void AddRange(string fileName, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void AddRange(Stream stream);
    public sealed virtual void AddRange(Stream stream, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual IMagickImage`1<byte> AppendHorizontally();
    public sealed virtual IMagickImage`1<byte> AppendVertically();
    public sealed virtual void Clear();
    public sealed virtual IMagickImageCollection`1<byte> Clone();
    public sealed virtual void Coalesce();
    public sealed virtual IMagickImage`1<byte> Combine();
    public sealed virtual IMagickImage`1<byte> Combine(ColorSpace colorSpace);
    public sealed virtual void Complex(IComplexSettings complexSettings);
    public sealed virtual bool Contains(IMagickImage`1<byte> item);
    public sealed virtual void CopyTo(IMagickImage`1[] array, int arrayIndex);
    public sealed virtual void Deconstruct();
    public sealed virtual void Dispose();
    public sealed virtual IMagickImage`1<byte> Evaluate(EvaluateOperator evaluateOperator);
    public sealed virtual IMagickImage`1<byte> Flatten();
    public sealed virtual IMagickImage`1<byte> Flatten(IMagickColor`1<byte> backgroundColor);
    public sealed virtual IMagickImage`1<byte> Fx(string expression);
    public sealed virtual IMagickImage`1<byte> Fx(string expression, Channels channels);
    public sealed virtual IEnumerator`1<IMagickImage`1<byte>> GetEnumerator();
    public sealed virtual int IndexOf(IMagickImage`1<byte> item);
    public sealed virtual void Insert(int index, IMagickImage`1<byte> item);
    public sealed virtual void Insert(int index, string fileName);
    public sealed virtual IMagickImage`1<byte> Merge();
    public sealed virtual IMagickImage`1<byte> Montage(IMontageSettings`1<byte> settings);
    public sealed virtual void Morph(UInt32 frames);
    public sealed virtual IMagickImage`1<byte> Mosaic();
    public sealed virtual void Optimize();
    public sealed virtual void OptimizePlus();
    public sealed virtual void OptimizeTransparency();
    public sealed virtual void Ping(Byte[] data);
    public sealed virtual void Ping(Byte[] data, UInt32 offset, UInt32 count);
    public sealed virtual void Ping(Byte[] data, UInt32 offset, UInt32 count, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void Ping(Byte[] data, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void Ping(FileInfo file);
    public sealed virtual void Ping(FileInfo file, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void Ping(Stream stream);
    public sealed virtual void Ping(Stream stream, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void Ping(string fileName);
    public sealed virtual void Ping(string fileName, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual IMagickImage`1<byte> Polynomial(Double[] terms);
    public sealed virtual void Remap(IMagickImage image);
    public sealed virtual void Remap(IMagickImage image, IQuantizeSettings settings);
    [NullableContextAttribute("2")]
public sealed virtual IMagickErrorInfo Quantize();
    public sealed virtual IMagickErrorInfo Quantize(IQuantizeSettings settings);
    public sealed virtual void Read(Byte[] data);
    public sealed virtual void Read(Byte[] data, UInt32 offset, UInt32 count);
    public sealed virtual void Read(Byte[] data, UInt32 offset, UInt32 count, MagickFormat format);
    public sealed virtual void Read(Byte[] data, UInt32 offset, UInt32 count, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void Read(Byte[] data, MagickFormat format);
    public sealed virtual void Read(Byte[] data, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void Read(FileInfo file);
    public sealed virtual void Read(FileInfo file, MagickFormat format);
    public sealed virtual void Read(FileInfo file, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void Read(Stream stream);
    public sealed virtual void Read(Stream stream, MagickFormat format);
    public sealed virtual void Read(Stream stream, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void Read(string fileName);
    public sealed virtual void Read(string fileName, MagickFormat format);
    public sealed virtual void Read(string fileName, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual Task ReadAsync(FileInfo file);
    public sealed virtual Task ReadAsync(FileInfo file, CancellationToken cancellationToken);
    public sealed virtual Task ReadAsync(FileInfo file, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual Task ReadAsync(FileInfo file, IMagickReadSettings`1<byte> readSettings, CancellationToken cancellationToken);
    public sealed virtual Task ReadAsync(FileInfo file, MagickFormat format);
    public sealed virtual Task ReadAsync(FileInfo file, MagickFormat format, CancellationToken cancellationToken);
    public sealed virtual Task ReadAsync(string fileName);
    public sealed virtual Task ReadAsync(string fileName, CancellationToken cancellationToken);
    public sealed virtual Task ReadAsync(string fileName, IMagickReadSettings`1<byte> readSettings);
    [AsyncStateMachineAttribute("ImageMagick.MagickImageCollection/<ReadAsync>d__108")]
public sealed virtual Task ReadAsync(string fileName, IMagickReadSettings`1<byte> readSettings, CancellationToken cancellationToken);
    public sealed virtual Task ReadAsync(string fileName, MagickFormat format);
    public sealed virtual Task ReadAsync(string fileName, MagickFormat format, CancellationToken cancellationToken);
    public sealed virtual Task ReadAsync(Stream stream);
    public sealed virtual Task ReadAsync(Stream stream, CancellationToken cancellationToken);
    public sealed virtual Task ReadAsync(Stream stream, MagickFormat format);
    public sealed virtual Task ReadAsync(Stream stream, MagickFormat format, CancellationToken cancellationToken);
    public sealed virtual Task ReadAsync(Stream stream, IMagickReadSettings`1<byte> readSettings);
    [AsyncStateMachineAttribute("ImageMagick.MagickImageCollection/<ReadAsync>d__116")]
public sealed virtual Task ReadAsync(Stream stream, IMagickReadSettings`1<byte> readSettings, CancellationToken cancellationToken);
    public sealed virtual bool Remove(IMagickImage`1<byte> item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void ResetPage();
    public sealed virtual void Reverse();
    public sealed virtual IMagickImage`1<byte> SmushHorizontal(UInt32 offset);
    public sealed virtual IMagickImage`1<byte> SmushVertical(UInt32 offset);
    public sealed virtual Byte[] ToByteArray();
    public sealed virtual Byte[] ToByteArray(IWriteDefines defines);
    public sealed virtual Byte[] ToByteArray(MagickFormat format);
    public sealed virtual string ToBase64();
    public sealed virtual string ToBase64(MagickFormat format);
    public sealed virtual string ToBase64(IWriteDefines defines);
    public sealed virtual void TrimBounds();
    public sealed virtual void Write(FileInfo file);
    public sealed virtual void Write(FileInfo file, IWriteDefines defines);
    public sealed virtual void Write(FileInfo file, MagickFormat format);
    public sealed virtual void Write(Stream stream);
    public sealed virtual void Write(Stream stream, IWriteDefines defines);
    public sealed virtual void Write(Stream stream, MagickFormat format);
    public sealed virtual void Write(string fileName);
    public sealed virtual void Write(string fileName, IWriteDefines defines);
    public sealed virtual void Write(string fileName, MagickFormat format);
    public sealed virtual Task WriteAsync(FileInfo file);
    public sealed virtual Task WriteAsync(FileInfo file, CancellationToken cancellationToken);
    public sealed virtual Task WriteAsync(FileInfo file, IWriteDefines defines);
    public sealed virtual Task WriteAsync(FileInfo file, IWriteDefines defines, CancellationToken cancellationToken);
    public sealed virtual Task WriteAsync(FileInfo file, MagickFormat format);
    public sealed virtual Task WriteAsync(FileInfo file, MagickFormat format, CancellationToken cancellationToken);
    public sealed virtual Task WriteAsync(Stream stream);
    [AsyncStateMachineAttribute("ImageMagick.MagickImageCollection/<WriteAsync>d__146")]
public sealed virtual Task WriteAsync(Stream stream, CancellationToken cancellationToken);
    public sealed virtual Task WriteAsync(Stream stream, IWriteDefines defines);
    public sealed virtual Task WriteAsync(Stream stream, IWriteDefines defines, CancellationToken cancellationToken);
    public sealed virtual Task WriteAsync(Stream stream, MagickFormat format);
    [AsyncStateMachineAttribute("ImageMagick.MagickImageCollection/<WriteAsync>d__150")]
public sealed virtual Task WriteAsync(Stream stream, MagickFormat format, CancellationToken cancellationToken);
    public sealed virtual Task WriteAsync(string fileName);
    public sealed virtual Task WriteAsync(string fileName, CancellationToken cancellationToken);
    public sealed virtual Task WriteAsync(string fileName, IWriteDefines defines);
    public sealed virtual Task WriteAsync(string fileName, IWriteDefines defines, CancellationToken cancellationToken);
    public sealed virtual Task WriteAsync(string fileName, MagickFormat format);
    public sealed virtual Task WriteAsync(string fileName, MagickFormat format, CancellationToken cancellationToken);
    internal static void DisposeList(IntPtr value);
    private static MagickSettings CreateSettings(IMagickReadSettings`1<byte> readSettings);
    private static string ToBase64(Byte[] bytes);
    [NullableContextAttribute("2")]
private void AddImages(Byte[] data, UInt32 offset, UInt32 count, IMagickReadSettings`1<byte> readSettings, bool ping, string fileName);
    private void AddImages(string fileName, IMagickReadSettings`1<byte> readSettings, bool ping);
    private void AddImages(Stream stream, IMagickReadSettings`1<byte> readSettings, bool ping);
    private void AddImages(IntPtr result, MagickSettings settings);
    private void CheckDuplicate(IMagickImage`1<byte> item);
    private void Dispose(bool disposing);
    private MagickSettings GetSettings();
    private IMagickImage`1<byte> Merge(LayerMethod layerMethod);
    private void ReplaceImages(IntPtr images);
    private void OnWarning(object sender, WarningEventArgs arguments);
    private void SetDefines(IWriteDefines defines);
    private IMagickImage`1<byte> Smush(UInt32 offset, bool stack);
    [AsyncStateMachineAttribute("ImageMagick.MagickImageCollection/<WriteAsyncInternal>d__172")]
private Task WriteAsyncInternal(string fileName, Nullable`1<MagickFormat> format, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.MagickImageInfo : object {
    [CompilerGeneratedAttribute]
private ColorSpace <ColorSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private CompressionMethod <Compression>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Density <Density>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private MagickFormat <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private Interlace <Interlace>k__BackingField;
    [CompilerGeneratedAttribute]
private OrientationType <Orientation>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Quality>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Width>k__BackingField;
    public ColorSpace ColorSpace { get; private set; }
    public CompressionMethod Compression { get; private set; }
    [NullableAttribute("2")]
public Density Density { get; private set; }
    [NullableAttribute("2")]
public string FileName { get; private set; }
    public MagickFormat Format { get; private set; }
    public UInt32 Height { get; private set; }
    public Interlace Interlace { get; private set; }
    public OrientationType Orientation { get; private set; }
    public UInt32 Quality { get; private set; }
    public UInt32 Width { get; private set; }
    public MagickImageInfo(Byte[] data);
    public MagickImageInfo(Byte[] data, IMagickReadSettings`1<byte> readSettings);
    public MagickImageInfo(Byte[] data, UInt32 offset, UInt32 count);
    public MagickImageInfo(Byte[] data, UInt32 offset, UInt32 count, IMagickReadSettings`1<byte> readSettings);
    public MagickImageInfo(FileInfo file);
    public MagickImageInfo(FileInfo file, IMagickReadSettings`1<byte> readSettings);
    public MagickImageInfo(string fileName);
    public MagickImageInfo(string fileName, IMagickReadSettings`1<byte> readSettings);
    public MagickImageInfo(Stream stream);
    public MagickImageInfo(Stream stream, IMagickReadSettings`1<byte> readSettings);
    [CompilerGeneratedAttribute]
public sealed virtual ColorSpace get_ColorSpace();
    [CompilerGeneratedAttribute]
private void set_ColorSpace(ColorSpace value);
    [CompilerGeneratedAttribute]
public sealed virtual CompressionMethod get_Compression();
    [CompilerGeneratedAttribute]
private void set_Compression(CompressionMethod value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Density get_Density();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Density(Density value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_FileName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual MagickFormat get_Format();
    [CompilerGeneratedAttribute]
private void set_Format(MagickFormat value);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Height();
    [CompilerGeneratedAttribute]
private void set_Height(UInt32 value);
    [CompilerGeneratedAttribute]
public sealed virtual Interlace get_Interlace();
    [CompilerGeneratedAttribute]
private void set_Interlace(Interlace value);
    [CompilerGeneratedAttribute]
public sealed virtual OrientationType get_Orientation();
    [CompilerGeneratedAttribute]
private void set_Orientation(OrientationType value);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Quality();
    [CompilerGeneratedAttribute]
private void set_Quality(UInt32 value);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Width();
    [CompilerGeneratedAttribute]
private void set_Width(UInt32 value);
    public static IEnumerable`1<IMagickImageInfo> ReadCollection(Byte[] data);
    [IteratorStateMachineAttribute("ImageMagick.MagickImageInfo/<ReadCollection>d__52")]
public static IEnumerable`1<IMagickImageInfo> ReadCollection(Byte[] data, IMagickReadSettings`1<byte> readSettings);
    public static IEnumerable`1<IMagickImageInfo> ReadCollection(Byte[] data, UInt32 offset, UInt32 count);
    [IteratorStateMachineAttribute("ImageMagick.MagickImageInfo/<ReadCollection>d__54")]
public static IEnumerable`1<IMagickImageInfo> ReadCollection(Byte[] data, UInt32 offset, UInt32 count, IMagickReadSettings`1<byte> readSettings);
    public static IEnumerable`1<IMagickImageInfo> ReadCollection(FileInfo file);
    public static IEnumerable`1<IMagickImageInfo> ReadCollection(FileInfo file, IMagickReadSettings`1<byte> readSettings);
    public static IEnumerable`1<IMagickImageInfo> ReadCollection(Stream stream);
    [IteratorStateMachineAttribute("ImageMagick.MagickImageInfo/<ReadCollection>d__58")]
public static IEnumerable`1<IMagickImageInfo> ReadCollection(Stream stream, IMagickReadSettings`1<byte> readSettings);
    public static IEnumerable`1<IMagickImageInfo> ReadCollection(string fileName);
    [IteratorStateMachineAttribute("ImageMagick.MagickImageInfo/<ReadCollection>d__60")]
public static IEnumerable`1<IMagickImageInfo> ReadCollection(string fileName, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void Read(Byte[] data);
    public sealed virtual void Read(Byte[] data, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void Read(Byte[] data, UInt32 offset, UInt32 count);
    public sealed virtual void Read(Byte[] data, UInt32 offset, UInt32 count, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void Read(FileInfo file);
    public sealed virtual void Read(FileInfo file, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void Read(Stream stream);
    public sealed virtual void Read(Stream stream, IMagickReadSettings`1<byte> readSettings);
    public sealed virtual void Read(string fileName);
    public sealed virtual void Read(string fileName, IMagickReadSettings`1<byte> readSettings);
    private void Initialize(IMagickImage`1<byte> image);
}
internal static class ImageMagick.MagickMemory : object {
    public static void Relinquish(IntPtr value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.MagickNET : object {
    [NullableAttribute("2")]
private static LogDelegate _nativeLog;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static EventHandler`1<LogEventArgs> _log;
    private static LogEventTypes _logEvents;
    [CompilerGeneratedAttribute]
private static string <TemporaryDirectory>k__BackingField;
    public static string Delegates { get; }
    public static string Features { get; }
    public static IReadOnlyCollection`1<IMagickFormatInfo> SupportedFormats { get; }
    public static IReadOnlyList`1<string> FontFamilies { get; }
    public static IReadOnlyList`1<string> FontNames { get; }
    public static string ImageMagickVersion { get; }
    public static string Version { get; }
    private string ImageMagick.IMagickNET.Delegates { get; }
    private string ImageMagick.IMagickNET.Features { get; }
    private IReadOnlyList`1<string> ImageMagick.IMagickNET.FontFamilies { get; }
    private IReadOnlyList`1<string> ImageMagick.IMagickNET.FontNames { get; }
    private string ImageMagick.IMagickNET.ImageMagickVersion { get; }
    private IReadOnlyCollection`1<IMagickFormatInfo> ImageMagick.IMagickNET.SupportedFormats { get; }
    private string ImageMagick.IMagickNET.Version { get; }
    internal static string TemporaryDirectory { get; private set; }
    private static MagickNET();
    public static void add_Log(EventHandler`1<LogEventArgs> value);
    public static void remove_Log(EventHandler`1<LogEventArgs> value);
    private sealed virtual override void ImageMagick.IMagickNET.add_Log(EventHandler`1<LogEventArgs> value);
    private sealed virtual override void ImageMagick.IMagickNET.remove_Log(EventHandler`1<LogEventArgs> value);
    public static string get_Delegates();
    public static string get_Features();
    public static IReadOnlyCollection`1<IMagickFormatInfo> get_SupportedFormats();
    public static IReadOnlyList`1<string> get_FontFamilies();
    public static IReadOnlyList`1<string> get_FontNames();
    public static string get_ImageMagickVersion();
    public static string get_Version();
    private sealed virtual override string ImageMagick.IMagickNET.get_Delegates();
    private sealed virtual override string ImageMagick.IMagickNET.get_Features();
    private sealed virtual override IReadOnlyList`1<string> ImageMagick.IMagickNET.get_FontFamilies();
    private sealed virtual override IReadOnlyList`1<string> ImageMagick.IMagickNET.get_FontNames();
    private sealed virtual override string ImageMagick.IMagickNET.get_ImageMagickVersion();
    private sealed virtual override IReadOnlyCollection`1<IMagickFormatInfo> ImageMagick.IMagickNET.get_SupportedFormats();
    private sealed virtual override string ImageMagick.IMagickNET.get_Version();
    [CompilerGeneratedAttribute]
internal static string get_TemporaryDirectory();
    [CompilerGeneratedAttribute]
private static void set_TemporaryDirectory(string value);
    public static string GetEnvironmentVariable(string name);
    public static void Initialize();
    public static void Initialize(string path);
    public static string Initialize(IConfigurationFiles configFiles);
    public static void Initialize(IConfigurationFiles configFiles, string path);
    public static void ResetRandomSeed();
    public static void SetDefaultFontFile(FileInfo file);
    public static void SetDefaultFontFile(string fileName);
    public static void SetEnvironmentVariable(string name, string value);
    public static void SetFontConfigDirectory(string path);
    public static void SetGhostscriptDirectory(string path);
    public static void SetGhostscriptFontDirectory(string path);
    public static void SetLogEvents(LogEventTypes events);
    public static void SetNativeLibraryDirectory(string path);
    public static void SetTempDirectory(string path);
    public static void SetRandomSeed(ulong seed);
    private sealed virtual override string ImageMagick.IMagickNET.GetEnvironmentVariable(string name);
    private sealed virtual override void ImageMagick.IMagickNET.Initialize();
    private sealed virtual override void ImageMagick.IMagickNET.Initialize(string path);
    private sealed virtual override string ImageMagick.IMagickNET.Initialize(IConfigurationFiles configFiles);
    private sealed virtual override void ImageMagick.IMagickNET.Initialize(IConfigurationFiles configFiles, string path);
    private sealed virtual override void ImageMagick.IMagickNET.ResetRandomSeed();
    private sealed virtual override void ImageMagick.IMagickNET.SetDefaultFontFile(FileInfo file);
    private sealed virtual override void ImageMagick.IMagickNET.SetDefaultFontFile(string fileName);
    private sealed virtual override void ImageMagick.IMagickNET.SetEnvironmentVariable(string name, string value);
    private sealed virtual override void ImageMagick.IMagickNET.SetFontConfigDirectory(string path);
    private sealed virtual override void ImageMagick.IMagickNET.SetGhostscriptDirectory(string path);
    private sealed virtual override void ImageMagick.IMagickNET.SetGhostscriptFontDirectory(string path);
    private sealed virtual override void ImageMagick.IMagickNET.SetLogEvents(LogEventTypes events);
    private sealed virtual override void ImageMagick.IMagickNET.SetNativeLibraryDirectory(string path);
    private sealed virtual override void ImageMagick.IMagickNET.SetTempDirectory(string path);
    private sealed virtual override void ImageMagick.IMagickNET.SetRandomSeed(ulong seed);
    private static void CheckImageMagickFiles(string path);
    private static void InitializeConfiguration(IConfigurationFiles configFiles, string path);
    private static void OnLog(UIntPtr type, IntPtr text);
    private static void SetLogEvents();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ImageMagick.MagickReadSettings : MagickSettings {
    [CompilerGeneratedAttribute]
private IReadDefines <Defines>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <FrameIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <FrameCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <Width>k__BackingField;
    public IReadDefines Defines { get; public set; }
    public IMagickGeometry ExtractArea { get; public set; }
    public Nullable`1<UInt32> FrameIndex { get; public set; }
    public Nullable`1<UInt32> FrameCount { get; public set; }
    public Nullable`1<UInt32> Height { get; public set; }
    public bool SyncImageWithExifProfile { get; public set; }
    public bool SyncImageWithTiffProperties { get; public set; }
    public bool UseMonochrome { get; public set; }
    public Nullable`1<UInt32> Width { get; public set; }
    [NullableContextAttribute("1")]
public MagickReadSettings(IReadDefines readDefines);
    [NullableContextAttribute("1")]
internal MagickReadSettings(MagickSettings settings);
    [NullableContextAttribute("1")]
internal MagickReadSettings(IMagickReadSettings`1<byte> settings);
    [CompilerGeneratedAttribute]
public sealed virtual IReadDefines get_Defines();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Defines(IReadDefines value);
    public sealed virtual IMagickGeometry get_ExtractArea();
    public sealed virtual void set_ExtractArea(IMagickGeometry value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<UInt32> get_FrameIndex();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FrameIndex(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<UInt32> get_FrameCount();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FrameCount(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<UInt32> get_Height();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Height(Nullable`1<UInt32> value);
    public sealed virtual bool get_SyncImageWithExifProfile();
    public sealed virtual void set_SyncImageWithExifProfile(bool value);
    public bool get_SyncImageWithTiffProperties();
    public void set_SyncImageWithTiffProperties(bool value);
    public sealed virtual bool get_UseMonochrome();
    public sealed virtual void set_UseMonochrome(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<UInt32> get_Width();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Width(Nullable`1<UInt32> value);
    internal void ForceSingleFrame();
    [NullableContextAttribute("1")]
private static string GetDefineKey(IDefine define);
    private string GetScenes();
    private void ApplyDefines();
    private void ApplyDimensions();
    private void ApplyFrame();
    [NullableContextAttribute("1")]
private void Copy(IMagickReadSettings`1<byte> settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.MagickRectangle : object {
    [CompilerGeneratedAttribute]
private UInt32 <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    public UInt32 Height { get; public set; }
    public UInt32 Width { get; public set; }
    public int X { get; public set; }
    public int Y { get; public set; }
    public MagickRectangle(int x, int y, UInt32 width, UInt32 height);
    private MagickRectangle(NativeMagickRectangle instance);
    [NullableContextAttribute("2")]
internal static MagickRectangle CreateInstance(IntPtr instance);
    private NativeMagickRectangle CreateNativeInstance();
    [CompilerGeneratedAttribute]
public UInt32 get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(UInt32 value);
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public void set_X(int value);
    [CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(int value);
    public static MagickRectangle FromPageSize(string pageSize);
    public static MagickRectangle FromGeometry(IMagickGeometry geometry, MagickImage image);
    internal static INativeInstance CreateInstance();
    internal static MagickRectangle CreateInstance(INativeInstance nativeInstance);
    internal static INativeInstance CreateInstance(MagickRectangle instance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.MagickSearchResult : object {
    [CompilerGeneratedAttribute]
private IMagickGeometry <BestMatch>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickImage`1<byte> <SimilarityImage>k__BackingField;
    [CompilerGeneratedAttribute]
private double <SimilarityMetric>k__BackingField;
    public IMagickGeometry BestMatch { get; }
    public IMagickImage`1<byte> SimilarityImage { get; }
    public double SimilarityMetric { get; }
    internal MagickSearchResult(IMagickImage`1<byte> image, IMagickGeometry bestMatch, double similarityMetric);
    [CompilerGeneratedAttribute]
public sealed virtual IMagickGeometry get_BestMatch();
    [CompilerGeneratedAttribute]
public sealed virtual IMagickImage`1<byte> get_SimilarityImage();
    [CompilerGeneratedAttribute]
public sealed virtual double get_SimilarityMetric();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ImageMagick.MagickSettings : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, string> _options;
    private double _fontPointsize;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ArtifactEventArgs> Artifact;
    [CompilerGeneratedAttribute]
private bool <AntiAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickColor`1<byte> <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorSpace <ColorSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorType <ColorType>k__BackingField;
    [CompilerGeneratedAttribute]
private CompressionMethod <Compression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private Density <Density>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Depth>k__BackingField;
    [CompilerGeneratedAttribute]
private Endian <Endian>k__BackingField;
    [CompilerGeneratedAttribute]
private MagickFormat <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private Interlace <Interlace>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickGeometry <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private DrawingSettings <Drawing>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ColorFuzz>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ping>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Quality>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickGeometry <Extract>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <NumberScenes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Monochrome>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Scene>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scenes>k__BackingField;
    public IDrawableAffine Affine { get; public set; }
    public bool AntiAlias { get; public set; }
    public IMagickColor`1<byte> BackgroundColor { get; public set; }
    public IMagickColor`1<byte> BorderColor { get; public set; }
    public ColorSpace ColorSpace { get; public set; }
    public ColorType ColorType { get; public set; }
    public CompressionMethod Compression { get; public set; }
    public bool Debug { get; public set; }
    public Density Density { get; public set; }
    public UInt32 Depth { get; public set; }
    public Endian Endian { get; public set; }
    public IMagickColor`1<byte> FillColor { get; public set; }
    public IMagickImage`1<byte> FillPattern { get; public set; }
    public FillRule FillRule { get; public set; }
    public string Font { get; public set; }
    public string FontFamily { get; public set; }
    public double FontPointsize { get; public set; }
    public FontStyleType FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public MagickFormat Format { get; public set; }
    public Interlace Interlace { get; public set; }
    public IMagickGeometry Page { get; public set; }
    public bool StrokeAntiAlias { get; public set; }
    public IMagickColor`1<byte> StrokeColor { get; public set; }
    public IEnumerable`1<double> StrokeDashArray { get; public set; }
    public double StrokeDashOffset { get; public set; }
    public LineCap StrokeLineCap { get; public set; }
    public LineJoin StrokeLineJoin { get; public set; }
    public UInt32 StrokeMiterLimit { get; public set; }
    public IMagickImage`1<byte> StrokePattern { get; public set; }
    public double StrokeWidth { get; public set; }
    public bool TextAntiAlias { get; public set; }
    public TextDirection TextDirection { get; public set; }
    public Encoding TextEncoding { get; public set; }
    public Gravity TextGravity { get; public set; }
    public double TextInterlineSpacing { get; public set; }
    public double TextInterwordSpacing { get; public set; }
    public double TextKerning { get; public set; }
    public IMagickColor`1<byte> TextUnderColor { get; public set; }
    public bool Verbose { get; public set; }
    [NullableAttribute("1")]
internal DrawingSettings Drawing { get; private set; }
    internal double ColorFuzz { get; internal set; }
    internal string FileName { get; internal set; }
    internal bool Ping { get; internal set; }
    internal UInt32 Quality { get; internal set; }
    protected IMagickGeometry Extract { get; protected set; }
    protected UInt32 NumberScenes { get; protected set; }
    protected bool Monochrome { get; protected set; }
    protected string Size { get; protected set; }
    protected UInt32 Scene { get; protected set; }
    protected string Scenes { get; protected set; }
    [CompilerGeneratedAttribute]
internal void add_Artifact(EventHandler`1<ArtifactEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_Artifact(EventHandler`1<ArtifactEventArgs> value);
    public sealed virtual IDrawableAffine get_Affine();
    public sealed virtual void set_Affine(IDrawableAffine value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AntiAlias();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AntiAlias(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IMagickColor`1<byte> get_BackgroundColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BackgroundColor(IMagickColor`1<byte> value);
    public sealed virtual IMagickColor`1<byte> get_BorderColor();
    public sealed virtual void set_BorderColor(IMagickColor`1<byte> value);
    [CompilerGeneratedAttribute]
public sealed virtual ColorSpace get_ColorSpace();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ColorSpace(ColorSpace value);
    [CompilerGeneratedAttribute]
public sealed virtual ColorType get_ColorType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ColorType(ColorType value);
    [CompilerGeneratedAttribute]
public sealed virtual CompressionMethod get_Compression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Compression(CompressionMethod value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Debug();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Density get_Density();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Density(Density value);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Depth();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Depth(UInt32 value);
    [CompilerGeneratedAttribute]
public sealed virtual Endian get_Endian();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Endian(Endian value);
    public sealed virtual IMagickColor`1<byte> get_FillColor();
    public sealed virtual void set_FillColor(IMagickColor`1<byte> value);
    public sealed virtual IMagickImage`1<byte> get_FillPattern();
    public sealed virtual void set_FillPattern(IMagickImage`1<byte> value);
    public sealed virtual FillRule get_FillRule();
    public sealed virtual void set_FillRule(FillRule value);
    public sealed virtual string get_Font();
    public sealed virtual void set_Font(string value);
    public sealed virtual string get_FontFamily();
    public sealed virtual void set_FontFamily(string value);
    public sealed virtual double get_FontPointsize();
    public sealed virtual void set_FontPointsize(double value);
    public sealed virtual FontStyleType get_FontStyle();
    public sealed virtual void set_FontStyle(FontStyleType value);
    public sealed virtual FontWeight get_FontWeight();
    public sealed virtual void set_FontWeight(FontWeight value);
    [CompilerGeneratedAttribute]
public sealed virtual MagickFormat get_Format();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Format(MagickFormat value);
    [CompilerGeneratedAttribute]
public sealed virtual Interlace get_Interlace();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Interlace(Interlace value);
    [CompilerGeneratedAttribute]
public sealed virtual IMagickGeometry get_Page();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Page(IMagickGeometry value);
    public sealed virtual bool get_StrokeAntiAlias();
    public sealed virtual void set_StrokeAntiAlias(bool value);
    public sealed virtual IMagickColor`1<byte> get_StrokeColor();
    public sealed virtual void set_StrokeColor(IMagickColor`1<byte> value);
    public sealed virtual IEnumerable`1<double> get_StrokeDashArray();
    public sealed virtual void set_StrokeDashArray(IEnumerable`1<double> value);
    public sealed virtual double get_StrokeDashOffset();
    public sealed virtual void set_StrokeDashOffset(double value);
    public sealed virtual LineCap get_StrokeLineCap();
    public sealed virtual void set_StrokeLineCap(LineCap value);
    public sealed virtual LineJoin get_StrokeLineJoin();
    public sealed virtual void set_StrokeLineJoin(LineJoin value);
    public sealed virtual UInt32 get_StrokeMiterLimit();
    public sealed virtual void set_StrokeMiterLimit(UInt32 value);
    public sealed virtual IMagickImage`1<byte> get_StrokePattern();
    public sealed virtual void set_StrokePattern(IMagickImage`1<byte> value);
    public sealed virtual double get_StrokeWidth();
    public sealed virtual void set_StrokeWidth(double value);
    public sealed virtual bool get_TextAntiAlias();
    public sealed virtual void set_TextAntiAlias(bool value);
    public sealed virtual TextDirection get_TextDirection();
    public sealed virtual void set_TextDirection(TextDirection value);
    public sealed virtual Encoding get_TextEncoding();
    public sealed virtual void set_TextEncoding(Encoding value);
    public sealed virtual Gravity get_TextGravity();
    public sealed virtual void set_TextGravity(Gravity value);
    public sealed virtual double get_TextInterlineSpacing();
    public sealed virtual void set_TextInterlineSpacing(double value);
    public sealed virtual double get_TextInterwordSpacing();
    public sealed virtual void set_TextInterwordSpacing(double value);
    public sealed virtual double get_TextKerning();
    public sealed virtual void set_TextKerning(double value);
    public sealed virtual IMagickColor`1<byte> get_TextUnderColor();
    public sealed virtual void set_TextUnderColor(IMagickColor`1<byte> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Verbose();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Verbose(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal DrawingSettings get_Drawing();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_Drawing(DrawingSettings value);
    [CompilerGeneratedAttribute]
internal double get_ColorFuzz();
    [CompilerGeneratedAttribute]
internal void set_ColorFuzz(double value);
    [CompilerGeneratedAttribute]
internal string get_FileName();
    [CompilerGeneratedAttribute]
internal void set_FileName(string value);
    [CompilerGeneratedAttribute]
internal bool get_Ping();
    [CompilerGeneratedAttribute]
internal void set_Ping(bool value);
    [CompilerGeneratedAttribute]
internal UInt32 get_Quality();
    [CompilerGeneratedAttribute]
internal void set_Quality(UInt32 value);
    [CompilerGeneratedAttribute]
protected IMagickGeometry get_Extract();
    [CompilerGeneratedAttribute]
protected void set_Extract(IMagickGeometry value);
    [CompilerGeneratedAttribute]
protected UInt32 get_NumberScenes();
    [CompilerGeneratedAttribute]
protected void set_NumberScenes(UInt32 value);
    [CompilerGeneratedAttribute]
protected bool get_Monochrome();
    [CompilerGeneratedAttribute]
protected void set_Monochrome(bool value);
    [CompilerGeneratedAttribute]
protected string get_Size();
    [CompilerGeneratedAttribute]
protected void set_Size(string value);
    [CompilerGeneratedAttribute]
protected UInt32 get_Scene();
    [CompilerGeneratedAttribute]
protected void set_Scene(UInt32 value);
    [CompilerGeneratedAttribute]
protected string get_Scenes();
    [CompilerGeneratedAttribute]
protected void set_Scenes(string value);
    [NullableContextAttribute("1")]
public sealed virtual string GetDefine(MagickFormat format, string name);
    [NullableContextAttribute("1")]
public sealed virtual string GetDefine(string name);
    [NullableContextAttribute("1")]
public sealed virtual void RemoveDefine(MagickFormat format, string name);
    [NullableContextAttribute("1")]
public sealed virtual void RemoveDefine(string name);
    [NullableContextAttribute("1")]
public sealed virtual void SetDefine(MagickFormat format, string name, bool flag);
    [NullableContextAttribute("1")]
public sealed virtual void SetDefine(MagickFormat format, string name, int value);
    [NullableContextAttribute("1")]
public sealed virtual void SetDefine(MagickFormat format, string name, string value);
    [NullableContextAttribute("1")]
public sealed virtual void SetDefine(string name, string value);
    [NullableContextAttribute("1")]
public sealed virtual void SetDefines(IDefines defines);
    [NullableContextAttribute("1")]
internal MagickSettings Clone();
    [NullableContextAttribute("1")]
protected void CopyFrom(MagickSettings settings);
    [NullableContextAttribute("1")]
protected string GetOption(string key);
    [NullableContextAttribute("1")]
protected void SetOption(string key, string value);
    [NullableContextAttribute("1")]
private static string ParseDefine(MagickFormat format, string name);
    private static MagickFormat GetModule(MagickFormat format);
    private static Density CreateDensity(string value);
    private static Density CloneDensity(Density density);
    [NullableContextAttribute("1")]
private static NativeMagickSettings CreateNativeInstance(IMagickSettings`1<byte> instance);
    private string GetFormat();
    [NullableContextAttribute("1")]
private void SetOptionAndArtifact(string key, double value);
    [NullableContextAttribute("1")]
private void SetOptionAndArtifact(string key, Enum value);
    [NullableContextAttribute("1")]
private void SetOptionAndArtifact(string key, string value);
    [NullableContextAttribute("1")]
internal static INativeInstance CreateInstance(IMagickSettings`1<byte> instance);
}
public class ImageMagick.Moments : object {
    [NullableAttribute("1")]
private Dictionary`2<PixelChannel, ChannelMoments> _channels;
    [NullableContextAttribute("1")]
internal Moments(MagickImage image, IntPtr list);
    [NullableContextAttribute("1")]
public sealed virtual IChannelMoments Composite();
    [NullableContextAttribute("2")]
public sealed virtual IChannelMoments GetChannel(PixelChannel channel);
    internal static void DisposeList(IntPtr list);
    private void AddChannel(IntPtr list, PixelChannel channel);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ImageMagick.MontageSettings : object {
    [CompilerGeneratedAttribute]
private IMagickColor`1<byte> <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickColor`1<byte> <BorderColor>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <BorderWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickColor`1<byte> <FillColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <FontPointsize>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickGeometry <FrameGeometry>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickGeometry <Geometry>k__BackingField;
    [CompilerGeneratedAttribute]
private Gravity <Gravity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Shadow>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickColor`1<byte> <StrokeColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextureFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickGeometry <TileGeometry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickColor`1<byte> <TransparentColor>k__BackingField;
    public IMagickColor`1<byte> BackgroundColor { get; public set; }
    public IMagickColor`1<byte> BorderColor { get; public set; }
    public UInt32 BorderWidth { get; public set; }
    public IMagickColor`1<byte> FillColor { get; public set; }
    public string Font { get; public set; }
    public UInt32 FontPointsize { get; public set; }
    public IMagickGeometry FrameGeometry { get; public set; }
    public IMagickGeometry Geometry { get; public set; }
    public Gravity Gravity { get; public set; }
    public string Label { get; public set; }
    public bool Shadow { get; public set; }
    public IMagickColor`1<byte> StrokeColor { get; public set; }
    public string TextureFileName { get; public set; }
    public IMagickGeometry TileGeometry { get; public set; }
    public string Title { get; public set; }
    public IMagickColor`1<byte> TransparentColor { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IMagickColor`1<byte> get_BackgroundColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BackgroundColor(IMagickColor`1<byte> value);
    [CompilerGeneratedAttribute]
public sealed virtual IMagickColor`1<byte> get_BorderColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BorderColor(IMagickColor`1<byte> value);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_BorderWidth();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BorderWidth(UInt32 value);
    [CompilerGeneratedAttribute]
public sealed virtual IMagickColor`1<byte> get_FillColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FillColor(IMagickColor`1<byte> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Font();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Font(string value);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_FontPointsize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontPointsize(UInt32 value);
    [CompilerGeneratedAttribute]
public sealed virtual IMagickGeometry get_FrameGeometry();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FrameGeometry(IMagickGeometry value);
    [CompilerGeneratedAttribute]
public sealed virtual IMagickGeometry get_Geometry();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Geometry(IMagickGeometry value);
    [CompilerGeneratedAttribute]
public sealed virtual Gravity get_Gravity();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Gravity(Gravity value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Label();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Label(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Shadow();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Shadow(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IMagickColor`1<byte> get_StrokeColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StrokeColor(IMagickColor`1<byte> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TextureFileName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TextureFileName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IMagickGeometry get_TileGeometry();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TileGeometry(IMagickGeometry value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Title(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IMagickColor`1<byte> get_TransparentColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransparentColor(IMagickColor`1<byte> value);
    [NullableContextAttribute("1")]
private static INativeInstance CreateNativeInstance(IMontageSettings`1<byte> instance);
    [NullableContextAttribute("1")]
internal static INativeInstance CreateInstance(IMontageSettings`1<byte> instance);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ImageMagick.MorphologySettings : object {
    [CompilerGeneratedAttribute]
private Channels <Channels>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Percentage> <ConvolveBias>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickGeometry <ConvolveScale>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Iterations>k__BackingField;
    [CompilerGeneratedAttribute]
private Kernel <Kernel>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <KernelArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private MorphologyMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserKernel>k__BackingField;
    public Channels Channels { get; public set; }
    public Nullable`1<Percentage> ConvolveBias { get; public set; }
    public IMagickGeometry ConvolveScale { get; public set; }
    public int Iterations { get; public set; }
    public Kernel Kernel { get; public set; }
    [NullableAttribute("1")]
public string KernelArguments { get; public set; }
    public MorphologyMethod Method { get; public set; }
    public string UserKernel { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Channels get_Channels();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Channels(Channels value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Percentage> get_ConvolveBias();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConvolveBias(Nullable`1<Percentage> value);
    [CompilerGeneratedAttribute]
public sealed virtual IMagickGeometry get_ConvolveScale();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConvolveScale(IMagickGeometry value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Iterations();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Iterations(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Kernel get_Kernel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Kernel(Kernel value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_KernelArguments();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual void set_KernelArguments(string value);
    [CompilerGeneratedAttribute]
public sealed virtual MorphologyMethod get_Method();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Method(MorphologyMethod value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserKernel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserKernel(string value);
}
internal class ImageMagick.NativeChannels : ValueType {
    private UIntPtr _value;
    private NativeChannels(Channels channels);
    public static NativeChannels op_Explicit(Channels channels);
    public static UIntPtr op_Implicit(NativeChannels channels);
    private static UIntPtr ConvertValue(Channels channels);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class ImageMagick.NativeHelper : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private EventHandler`1<WarningEventArgs> _warningEvent;
    public void add_Warning(EventHandler`1<WarningEventArgs> value);
    public void remove_Warning(EventHandler`1<WarningEventArgs> value);
    protected void CheckException(IntPtr exception);
    [NullableContextAttribute("2")]
protected void RaiseWarning(MagickException exception);
}
internal abstract class ImageMagick.NativeInstance : NativeHelper {
    private IntPtr _instance;
    [NullableAttribute("1")]
public static INativeInstance Zero { get; }
    public IntPtr Instance { get; public set; }
    public bool IsDisposed { get; }
    [NullableAttribute("1")]
protected string TypeName { get; }
    [NullableContextAttribute("1")]
public static INativeInstance get_Zero();
    public sealed virtual IntPtr get_Instance();
    public void set_Instance(IntPtr value);
    public bool get_IsDisposed();
    [NullableContextAttribute("1")]
protected abstract virtual string get_TypeName();
    public sealed virtual void Dispose();
    protected abstract virtual void Dispose(IntPtr instance);
    protected void CheckException(IntPtr exception, IntPtr result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ImageMagick.NativeLibrary : object {
    public static string Name;
    public static string QuantumName;
    public static string X86Name;
    public static string X64Name;
    public static string ARM64Name;
    private static string Quantum;
    private static string OpenMP;
}
internal static class ImageMagick.NativeMemory : object {
    public static void Copy(Byte* source, Byte* destination, long length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.OffsetInfo : object {
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    public int X { get; }
    public int Y { get; }
    public OffsetInfo(int x, int y);
    private NativeOffsetInfo CreateNativeInstance();
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public int get_Y();
    internal static INativeInstance CreateInstance(OffsetInfo instance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.OpenCL : object {
    private static Nullable`1<bool> _isEnabled;
    public static bool IsEnabled { get; public set; }
    public static IReadOnlyList`1<IOpenCLDevice> Devices { get; }
    private bool ImageMagick.IOpenCL.IsEnabled { get; private set; }
    private IReadOnlyList`1<IOpenCLDevice> ImageMagick.IOpenCL.Devices { get; }
    public static bool get_IsEnabled();
    public static void set_IsEnabled(bool value);
    public static IReadOnlyList`1<IOpenCLDevice> get_Devices();
    private sealed virtual override bool ImageMagick.IOpenCL.get_IsEnabled();
    private sealed virtual override void ImageMagick.IOpenCL.set_IsEnabled(bool value);
    private sealed virtual override IReadOnlyList`1<IOpenCLDevice> ImageMagick.IOpenCL.get_Devices();
    public static void SetCacheDirectory(string path);
    private sealed virtual override void ImageMagick.IOpenCL.SetCacheDirectory(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.OpenCLDevice : object {
    private NativeOpenCLDevice _instance;
    private bool _profileKernels;
    public double BenchmarkScore { get; }
    public OpenCLDeviceType DeviceType { get; }
    public bool IsEnabled { get; public set; }
    public IReadOnlyList`1<IOpenCLKernelProfileRecord> KernelProfileRecords { get; }
    public string Name { get; }
    public bool ProfileKernels { get; public set; }
    public string Version { get; }
    private OpenCLDevice(NativeOpenCLDevice instance);
    internal static OpenCLDevice CreateInstance(IntPtr instance);
    public sealed virtual double get_BenchmarkScore();
    public sealed virtual OpenCLDeviceType get_DeviceType();
    public sealed virtual bool get_IsEnabled();
    public sealed virtual void set_IsEnabled(bool value);
    public sealed virtual IReadOnlyList`1<IOpenCLKernelProfileRecord> get_KernelProfileRecords();
    public sealed virtual string get_Name();
    public sealed virtual bool get_ProfileKernels();
    public sealed virtual void set_ProfileKernels(bool value);
    public sealed virtual string get_Version();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.OpenCLKernelProfileRecord : object {
    [CompilerGeneratedAttribute]
private ulong <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <MaximumDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <MinimumDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <TotalDuration>k__BackingField;
    public ulong Count { get; }
    public ulong MaximumDuration { get; }
    public ulong MinimumDuration { get; }
    public string Name { get; }
    public ulong TotalDuration { get; }
    private OpenCLKernelProfileRecord(NativeOpenCLKernelProfileRecord instance);
    internal static OpenCLKernelProfileRecord CreateInstance(IntPtr instance);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_MaximumDuration();
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_MinimumDuration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_TotalDuration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ImageMagick.PercentageHelper : object {
    public static Percentage FromQuantum(double value);
    public static double ToQuantum(string paramName, Percentage percentage);
    public static byte ToQuantumType(string paramName, Percentage percentage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.PerceptualHash : object {
    private Dictionary`2<PixelChannel, ChannelPerceptualHash> _channels;
    [CompilerGeneratedAttribute]
private static ColorSpace[] <DefaultColorSpaces>k__BackingField;
    internal static ColorSpace[] DefaultColorSpaces { get; }
    internal bool Isvalid { get; }
    public PerceptualHash(string hash);
    public PerceptualHash(string hash, ColorSpace[] colorSpaces);
    internal PerceptualHash(IMagickImage image, ColorSpace[] colorSpaces, IntPtr list);
    private static PerceptualHash();
    [CompilerGeneratedAttribute]
internal static ColorSpace[] get_DefaultColorSpaces();
    internal bool get_Isvalid();
    [NullableContextAttribute("2")]
public sealed virtual IChannelPerceptualHash GetChannel(PixelChannel channel);
    public sealed virtual double SumSquaredDistance(IPerceptualHash other);
    public virtual string ToString();
    internal static void ValidateColorSpaces(ColorSpace[] colorSpaces);
    internal static void DisposeList(IntPtr list);
    private static ChannelPerceptualHash CreateChannelPerceptualHash(IMagickImage image, ColorSpace[] colorSpaces, IntPtr list, PixelChannel channel);
    private void AddChannel(IMagickImage image, ColorSpace[] colorSpaces, IntPtr list, PixelChannel channel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class ImageMagick.Pixel : object {
    [NullableAttribute("2")]
private PixelCollection _collection;
    private Byte[] _value;
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    public UInt32 Channels { get; }
    public int X { get; private set; }
    public int Y { get; private set; }
    public byte Item { get; public set; }
    public Pixel(int x, int y, Byte[] value);
    public Pixel(int x, int y, UInt32 channels);
    private Pixel(PixelCollection collection, int x, int y, Byte[] value);
    public sealed virtual UInt32 get_Channels();
    [CompilerGeneratedAttribute]
public sealed virtual int get_X();
    [CompilerGeneratedAttribute]
private void set_X(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Y();
    [CompilerGeneratedAttribute]
private void set_Y(int value);
    public sealed virtual byte get_Item(UInt32 channel);
    public sealed virtual void set_Item(UInt32 channel, byte value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IMagickColor`1<byte> other);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IPixel`1<byte> other);
    public sealed virtual byte GetChannel(UInt32 channel);
    public virtual int GetHashCode();
    public sealed virtual void SetChannel(UInt32 channel, byte value);
    public sealed virtual void SetValues(Byte[] values);
    public sealed virtual Byte[] ToArray();
    [NullableContextAttribute("2")]
public sealed virtual IMagickColor`1<byte> ToColor();
    internal static Pixel Create(PixelCollection collection, int x, int y, Byte[] value);
    private static void CheckChannels(int channels);
    private Byte[] GetValueWithoutIndexChannel();
    private void UpdateCollection();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal abstract class ImageMagick.PixelCollection : object {
    [NullableAttribute("2")]
private NativePixelCollection _nativeInstance;
    [CompilerGeneratedAttribute]
private MagickImage <Image>k__BackingField;
    public UInt32 Channels { get; }
    protected MagickImage Image { get; }
    private NativePixelCollection NativeInstance { get; }
    [NullableAttribute("2")]
public IPixel`1<byte> Item { get; }
    protected PixelCollection(MagickImage image);
    public sealed virtual UInt32 get_Channels();
    [CompilerGeneratedAttribute]
protected MagickImage get_Image();
    private NativePixelCollection get_NativeInstance();
    [NullableContextAttribute("2")]
public sealed virtual IPixel`1<byte> get_Item(int x, int y);
    public sealed virtual void Dispose();
    [NullableContextAttribute("2")]
public virtual Byte[] GetArea(int x, int y, UInt32 width, UInt32 height);
    public virtual Byte[] GetArea(IMagickGeometry geometry);
    public virtual IntPtr GetAreaPointer(int x, int y, UInt32 width, UInt32 height);
    public virtual IntPtr GetAreaPointer(IMagickGeometry geometry);
    public sealed virtual Nullable`1<UInt32> GetChannelIndex(PixelChannel channel);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<IPixel`1<byte>> GetEnumerator();
    public virtual IPixel`1<byte> GetPixel(int x, int y);
    [NullableContextAttribute("2")]
public virtual Byte[] GetValue(int x, int y);
    [NullableContextAttribute("2")]
public sealed virtual Byte[] GetValues();
    public virtual void SetArea(int x, int y, UInt32 width, UInt32 height, Byte[] values);
    public virtual void SetArea(IMagickGeometry geometry, Byte[] values);
    public virtual void SetByteArea(int x, int y, UInt32 width, UInt32 height, Byte[] values);
    public virtual void SetByteArea(IMagickGeometry geometry, Byte[] values);
    public virtual void SetBytePixels(Byte[] values);
    public virtual void SetDoubleArea(int x, int y, UInt32 width, UInt32 height, Double[] values);
    public virtual void SetDoubleArea(IMagickGeometry geometry, Double[] values);
    public virtual void SetDoublePixels(Double[] values);
    public virtual void SetIntArea(int x, int y, UInt32 width, UInt32 height, Int32[] values);
    public virtual void SetIntArea(IMagickGeometry geometry, Int32[] values);
    public virtual void SetIntPixels(Int32[] values);
    public virtual void SetPixel(int x, int y, Byte[] value);
    public virtual void SetPixel(IPixel`1<byte> pixel);
    public virtual void SetPixel(IEnumerable`1<IPixel`1<byte>> pixels);
    public virtual void SetPixels(Byte[] values);
    [NullableContextAttribute("2")]
public sealed virtual Byte[] ToArray();
    public virtual Byte[] ToByteArray(int x, int y, UInt32 width, UInt32 height, string mapping);
    [NullableContextAttribute("2")]
public virtual Byte[] ToByteArray(int x, int y, UInt32 width, UInt32 height, PixelMapping mapping);
    public virtual Byte[] ToByteArray(IMagickGeometry geometry, string mapping);
    public virtual Byte[] ToByteArray(IMagickGeometry geometry, PixelMapping mapping);
    public sealed virtual Byte[] ToByteArray(string mapping);
    [NullableContextAttribute("2")]
public sealed virtual Byte[] ToByteArray(PixelMapping mapping);
    public virtual UInt16[] ToShortArray(int x, int y, UInt32 width, UInt32 height, string mapping);
    [NullableContextAttribute("2")]
public virtual UInt16[] ToShortArray(int x, int y, UInt32 width, UInt32 height, PixelMapping mapping);
    public virtual UInt16[] ToShortArray(IMagickGeometry geometry, string mapping);
    public virtual UInt16[] ToShortArray(IMagickGeometry geometry, PixelMapping mapping);
    public sealed virtual UInt16[] ToShortArray(string mapping);
    [NullableContextAttribute("2")]
public sealed virtual UInt16[] ToShortArray(PixelMapping mapping);
    [NullableContextAttribute("2")]
internal Byte[] GetAreaUnchecked(int x, int y, UInt32 width, UInt32 height);
    internal void SetPixelUnchecked(int x, int y, Byte[] value);
    private static Byte[] CastArray(T[] values, Func`2<T, byte> convertMethod);
    private void SetAreaUnchecked(int x, int y, UInt32 width, UInt32 height, Byte[] values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.PixelCollectionEnumerator : object {
    private PixelCollection _collection;
    private UInt32 _height;
    private UInt32 _width;
    [NullableAttribute("2")]
private Byte[] _row;
    private int _x;
    private int _y;
    [NullableAttribute("2")]
private object System.Collections.IEnumerator.Current { get; }
    public IPixel`1<byte> Current { get; }
    public PixelCollectionEnumerator(PixelCollection collection, UInt32 width, UInt32 height);
    [NullableContextAttribute("2")]
private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual IPixel`1<byte> get_Current();
    public sealed virtual void Dispose();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    private void SetRow();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.PixelImportSettings : object {
    [CompilerGeneratedAttribute]
private UInt32 <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mapping>k__BackingField;
    [CompilerGeneratedAttribute]
private StorageType <StorageType>k__BackingField;
    public UInt32 Height { get; }
    public UInt32 Width { get; }
    public int X { get; }
    public int Y { get; }
    public string Mapping { get; public set; }
    public StorageType StorageType { get; }
    public PixelImportSettings(UInt32 width, UInt32 height, StorageType storageType, PixelMapping mapping);
    public PixelImportSettings(UInt32 width, UInt32 height, StorageType storageType, string mapping);
    public PixelImportSettings(int x, int y, UInt32 width, UInt32 height, StorageType storageType, PixelMapping mapping);
    public PixelImportSettings(int x, int y, UInt32 width, UInt32 height, StorageType storageType, string mapping);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Height();
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Width();
    [CompilerGeneratedAttribute]
public sealed virtual int get_X();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Y();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Mapping();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Mapping(string value);
    [CompilerGeneratedAttribute]
public sealed virtual StorageType get_StorageType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.PixelReadSettings : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Mapping>k__BackingField;
    [CompilerGeneratedAttribute]
private StorageType <StorageType>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickReadSettings`1<byte> <ReadSettings>k__BackingField;
    [NullableAttribute("2")]
public string Mapping { get; public set; }
    public StorageType StorageType { get; public set; }
    public IMagickReadSettings`1<byte> ReadSettings { get; }
    public PixelReadSettings(UInt32 width, UInt32 height, StorageType storageType, PixelMapping mapping);
    public PixelReadSettings(UInt32 width, UInt32 height, StorageType storageType, string mapping);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Mapping();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Mapping(string value);
    [CompilerGeneratedAttribute]
public sealed virtual StorageType get_StorageType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StorageType(StorageType value);
    [CompilerGeneratedAttribute]
public sealed virtual IMagickReadSettings`1<byte> get_ReadSettings();
}
internal class ImageMagick.PointInfo : object {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double X { get; }
    public double Y { get; }
    private PointInfo(IntPtr instance);
    [NullableContextAttribute("1")]
public static PointInfo CreateInstance(IntPtr instance);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public double get_Y();
    public PointD ToPointD();
}
internal class ImageMagick.PointInfoCollection : object {
    [NullableAttribute("1")]
private NativePointInfoCollection _nativeInstance;
    [CompilerGeneratedAttribute]
private UInt32 <Count>k__BackingField;
    public UInt32 Count { get; private set; }
    private IntPtr ImageMagick.INativeInstance.Instance { get; }
    [NullableContextAttribute("1")]
public PointInfoCollection(IReadOnlyList`1<PointD> coordinates);
    public PointInfoCollection(IntPtr instance, UInt32 count);
    private PointInfoCollection(UInt32 count);
    [CompilerGeneratedAttribute]
public UInt32 get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(UInt32 value);
    private sealed virtual override IntPtr ImageMagick.INativeInstance.get_Instance();
    public static void DisposeList(IntPtr instance);
    public sealed virtual void Dispose();
    public double GetX(int index);
    public double GetY(int index);
    [NullableContextAttribute("1")]
internal static IntPtr GetInstance(PointInfoCollection pointInfoCollection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.PrimaryInfo : object {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Z>k__BackingField;
    public double X { get; }
    public double Y { get; }
    public double Z { get; }
    public PrimaryInfo(double x, double y, double z);
    private PrimaryInfo(IntPtr instance);
    internal static PrimaryInfo CreateInstance(IntPtr instance);
    private static INativeInstance CreateNativeInstance(IPrimaryInfo instance);
    [CompilerGeneratedAttribute]
public sealed virtual double get_X();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Y();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Z();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IPrimaryInfo other);
    public virtual int GetHashCode();
    internal static INativeInstance CreateInstance(IPrimaryInfo instance);
}
public class ImageMagick.QuantizeSettings : object {
    [CompilerGeneratedAttribute]
private UInt32 <Colors>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorSpace <ColorSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DitherMethod> <DitherMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MeasureErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <TreeDepth>k__BackingField;
    public UInt32 Colors { get; public set; }
    public ColorSpace ColorSpace { get; public set; }
    public Nullable`1<DitherMethod> DitherMethod { get; public set; }
    public bool MeasureErrors { get; public set; }
    public UInt32 TreeDepth { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_Colors();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Colors(UInt32 value);
    [CompilerGeneratedAttribute]
public sealed virtual ColorSpace get_ColorSpace();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ColorSpace(ColorSpace value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DitherMethod> get_DitherMethod();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DitherMethod(Nullable`1<DitherMethod> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_MeasureErrors();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MeasureErrors(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_TreeDepth();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TreeDepth(UInt32 value);
    [NullableContextAttribute("1")]
private static INativeInstance CreateNativeInstance(IQuantizeSettings settings);
    [NullableContextAttribute("1")]
internal static INativeInstance CreateInstance(IQuantizeSettings instance);
}
public class ImageMagick.Quantum : object {
    [CompilerGeneratedAttribute]
private static UInt32 <Depth>k__BackingField;
    [CompilerGeneratedAttribute]
private static byte <Max>k__BackingField;
    public static UInt32 Depth { get; }
    public static byte Max { get; }
    private UInt32 ImageMagick.IQuantum.Depth { get; }
    private byte ImageMagick.IQuantum<System.Byte>.Max { get; }
    private static Quantum();
    [CompilerGeneratedAttribute]
public static UInt32 get_Depth();
    [CompilerGeneratedAttribute]
public static byte get_Max();
    private sealed virtual override UInt32 ImageMagick.IQuantum.get_Depth();
    private sealed virtual override byte ImageMagick.IQuantum<System.Byte>.get_Max();
    internal static byte Convert(byte value);
    internal static byte Convert(double value);
    internal static byte Convert(int value);
    internal static byte Convert(ushort value);
    internal static byte ScaleToQuantum(double value);
    internal static byte ScaleToByte(byte value);
    internal static double ScaleToDouble(byte value);
}
internal static class ImageMagick.QuantumConverter : object {
    [NullableContextAttribute("2")]
public static Byte[] ToArray(IntPtr nativeData, UInt32 length);
}
public class ImageMagick.ResourceLimits : object {
    public static ulong Area { get; public set; }
    public static ulong Disk { get; public set; }
    public static ulong Height { get; public set; }
    public static ulong ListLength { get; public set; }
    public static ulong MaxMemoryRequest { get; public set; }
    public static ulong MaxProfileSize { get; public set; }
    public static ulong Memory { get; public set; }
    public static ulong Thread { get; public set; }
    public static ulong Throttle { get; public set; }
    public static ulong Time { get; public set; }
    public static ulong Width { get; public set; }
    private ulong ImageMagick.IResourceLimits.Area { get; private set; }
    private ulong ImageMagick.IResourceLimits.Disk { get; private set; }
    private ulong ImageMagick.IResourceLimits.Height { get; private set; }
    private ulong ImageMagick.IResourceLimits.ListLength { get; private set; }
    private ulong ImageMagick.IResourceLimits.MaxMemoryRequest { get; private set; }
    private ulong ImageMagick.IResourceLimits.MaxProfileSize { get; private set; }
    private ulong ImageMagick.IResourceLimits.Memory { get; private set; }
    private ulong ImageMagick.IResourceLimits.Thread { get; private set; }
    private ulong ImageMagick.IResourceLimits.Throttle { get; private set; }
    private ulong ImageMagick.IResourceLimits.Time { get; private set; }
    private ulong ImageMagick.IResourceLimits.Width { get; private set; }
    public static ulong get_Area();
    public static void set_Area(ulong value);
    public static ulong get_Disk();
    public static void set_Disk(ulong value);
    public static ulong get_Height();
    public static void set_Height(ulong value);
    public static ulong get_ListLength();
    public static void set_ListLength(ulong value);
    public static ulong get_MaxMemoryRequest();
    public static void set_MaxMemoryRequest(ulong value);
    public static ulong get_MaxProfileSize();
    public static void set_MaxProfileSize(ulong value);
    public static ulong get_Memory();
    public static void set_Memory(ulong value);
    public static ulong get_Thread();
    public static void set_Thread(ulong value);
    public static ulong get_Throttle();
    public static void set_Throttle(ulong value);
    public static ulong get_Time();
    public static void set_Time(ulong value);
    public static ulong get_Width();
    public static void set_Width(ulong value);
    private sealed virtual override ulong ImageMagick.IResourceLimits.get_Area();
    private sealed virtual override void ImageMagick.IResourceLimits.set_Area(ulong value);
    private sealed virtual override ulong ImageMagick.IResourceLimits.get_Disk();
    private sealed virtual override void ImageMagick.IResourceLimits.set_Disk(ulong value);
    private sealed virtual override ulong ImageMagick.IResourceLimits.get_Height();
    private sealed virtual override void ImageMagick.IResourceLimits.set_Height(ulong value);
    private sealed virtual override ulong ImageMagick.IResourceLimits.get_ListLength();
    private sealed virtual override void ImageMagick.IResourceLimits.set_ListLength(ulong value);
    private sealed virtual override ulong ImageMagick.IResourceLimits.get_MaxMemoryRequest();
    private sealed virtual override void ImageMagick.IResourceLimits.set_MaxMemoryRequest(ulong value);
    private sealed virtual override ulong ImageMagick.IResourceLimits.get_MaxProfileSize();
    private sealed virtual override void ImageMagick.IResourceLimits.set_MaxProfileSize(ulong value);
    private sealed virtual override ulong ImageMagick.IResourceLimits.get_Memory();
    private sealed virtual override void ImageMagick.IResourceLimits.set_Memory(ulong value);
    private sealed virtual override ulong ImageMagick.IResourceLimits.get_Thread();
    private sealed virtual override void ImageMagick.IResourceLimits.set_Thread(ulong value);
    private sealed virtual override ulong ImageMagick.IResourceLimits.get_Throttle();
    private sealed virtual override void ImageMagick.IResourceLimits.set_Throttle(ulong value);
    private sealed virtual override ulong ImageMagick.IResourceLimits.get_Time();
    private sealed virtual override void ImageMagick.IResourceLimits.set_Time(ulong value);
    private sealed virtual override ulong ImageMagick.IResourceLimits.get_Width();
    private sealed virtual override void ImageMagick.IResourceLimits.set_Width(ulong value);
    public static void LimitMemory(Percentage percentage);
    private sealed virtual override void ImageMagick.IResourceLimits.LimitMemory(Percentage percentage);
}
internal static class ImageMagick.Runtime : object {
    [CompilerGeneratedAttribute]
private static bool <Is64Bit>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsArm64>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsWindows>k__BackingField;
    public static bool Is64Bit { get; }
    public static bool IsArm64 { get; }
    public static bool IsWindows { get; }
    private static Runtime();
    [CompilerGeneratedAttribute]
public static bool get_Is64Bit();
    [CompilerGeneratedAttribute]
public static bool get_IsArm64();
    [CompilerGeneratedAttribute]
public static bool get_IsWindows();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.SafePixelCollection : PixelCollection {
    public SafePixelCollection(MagickImage image);
    public virtual Byte[] GetArea(IMagickGeometry geometry);
    [NullableContextAttribute("2")]
public virtual Byte[] GetArea(int x, int y, UInt32 width, UInt32 height);
    public virtual IPixel`1<byte> GetPixel(int x, int y);
    [NullableContextAttribute("2")]
public virtual Byte[] GetValue(int x, int y);
    public virtual void SetArea(int x, int y, UInt32 width, UInt32 height, Byte[] values);
    public virtual void SetArea(IMagickGeometry geometry, Byte[] values);
    public virtual void SetByteArea(int x, int y, UInt32 width, UInt32 height, Byte[] values);
    public virtual void SetByteArea(IMagickGeometry geometry, Byte[] values);
    public virtual void SetBytePixels(Byte[] values);
    public virtual void SetDoubleArea(int x, int y, UInt32 width, UInt32 height, Double[] values);
    public virtual void SetDoubleArea(IMagickGeometry geometry, Double[] values);
    public virtual void SetDoublePixels(Double[] values);
    public virtual void SetIntArea(int x, int y, UInt32 width, UInt32 height, Int32[] values);
    public virtual void SetIntArea(IMagickGeometry geometry, Int32[] values);
    public virtual void SetIntPixels(Int32[] values);
    public virtual void SetPixel(int x, int y, Byte[] value);
    public virtual void SetPixel(IPixel`1<byte> pixel);
    public virtual void SetPixel(IEnumerable`1<IPixel`1<byte>> pixels);
    public virtual void SetPixels(Byte[] values);
    public virtual Byte[] ToByteArray(IMagickGeometry geometry, string mapping);
    public virtual Byte[] ToByteArray(IMagickGeometry geometry, PixelMapping mapping);
    public virtual Byte[] ToByteArray(int x, int y, UInt32 width, UInt32 height, string mapping);
    public virtual UInt16[] ToShortArray(IMagickGeometry geometry, string mapping);
    public virtual UInt16[] ToShortArray(int x, int y, UInt32 width, UInt32 height, string mapping);
    private void CheckArea(int x, int y, UInt32 width, UInt32 height);
    private void CheckIndex(int x, int y);
    private void CheckValues(T[] values);
    private void CheckValues(int x, int y, T[] values);
    private void CheckValues(int x, int y, UInt32 width, UInt32 height, T[] values);
    private void SetPixelPrivate(int x, int y, Byte[] value);
}
internal static class ImageMagick.ShortConverter : object {
    [NullableContextAttribute("2")]
public static UInt16[] ToArray(IntPtr nativeData, int length);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
internal class ImageMagick.SourceGenerator.CleanupAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arguments>k__BackingField;
    public string Name { get; public set; }
    public string Arguments { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(string value);
}
[AttributeUsageAttribute("1028")]
internal class ImageMagick.SourceGenerator.DrawablesAttribute : Attribute {
}
[AttributeUsageAttribute("16")]
internal class ImageMagick.SourceGenerator.ExifTagDescriptionAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
internal class ImageMagick.SourceGenerator.NativeInteropAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <CustomInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ManagedToNative>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <QuantumType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StaticDispose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RaiseWarnings>k__BackingField;
    public bool CustomInstance { get; public set; }
    public bool ManagedToNative { get; public set; }
    public bool QuantumType { get; public set; }
    public bool StaticDispose { get; public set; }
    public bool RaiseWarnings { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CustomInstance();
    [CompilerGeneratedAttribute]
public void set_CustomInstance(bool value);
    [CompilerGeneratedAttribute]
public bool get_ManagedToNative();
    [CompilerGeneratedAttribute]
public void set_ManagedToNative(bool value);
    [CompilerGeneratedAttribute]
public bool get_QuantumType();
    [CompilerGeneratedAttribute]
public void set_QuantumType(bool value);
    [CompilerGeneratedAttribute]
public bool get_StaticDispose();
    [CompilerGeneratedAttribute]
public void set_StaticDispose(bool value);
    [CompilerGeneratedAttribute]
public bool get_RaiseWarnings();
    [CompilerGeneratedAttribute]
public void set_RaiseWarnings(bool value);
}
[AttributeUsageAttribute("1028")]
internal class ImageMagick.SourceGenerator.PathsAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class ImageMagick.SourceGenerator.ReadInstanceAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class ImageMagick.SourceGenerator.SetInstanceAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class ImageMagick.SourceGenerator.ThrowsAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.SparseColorArg : object {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private IMagickColor`1<byte> <Color>k__BackingField;
    public double X { get; public set; }
    public double Y { get; public set; }
    public IMagickColor`1<byte> Color { get; public set; }
    public SparseColorArg(double x, double y, IMagickColor`1<byte> color);
    [CompilerGeneratedAttribute]
public sealed virtual double get_X();
    [CompilerGeneratedAttribute]
public sealed virtual void set_X(double value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Y();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Y(double value);
    [CompilerGeneratedAttribute]
public sealed virtual IMagickColor`1<byte> get_Color();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Color(IMagickColor`1<byte> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.Statistics : object {
    private Dictionary`2<PixelChannel, ChannelStatistics> _channels;
    public IReadOnlyCollection`1<PixelChannel> Channels { get; }
    public Statistics(MagickImage image, IntPtr list, Channels channels);
    public sealed virtual IReadOnlyCollection`1<PixelChannel> get_Channels();
    public sealed virtual IChannelStatistics Composite();
    [NullableContextAttribute("2")]
public sealed virtual IChannelStatistics GetChannel(PixelChannel channel);
    internal static void DisposeList(IntPtr list);
    private void AddChannel(IntPtr list, PixelChannel channel);
}
internal class ImageMagick.StreamWrapper : object {
    private static int BufferSize;
    [NullableAttribute("1")]
private Byte[] _buffer;
    private Byte* _bufferStart;
    private long _streamStart;
    private GCHandle _handle;
    [NullableAttribute("1")]
private Stream _stream;
    [NullableContextAttribute("1")]
private StreamWrapper(Stream stream);
    [NullableContextAttribute("1")]
public static StreamWrapper CreateForReading(Stream stream);
    [NullableContextAttribute("1")]
public static StreamWrapper CreateForWriting(Stream stream);
    public sealed virtual void Dispose();
    public long Read(IntPtr data, UIntPtr count, IntPtr user_data);
    public long Seek(long offset, IntPtr whence, IntPtr user_data);
    public long Tell(IntPtr user_data);
    public long Write(IntPtr data, UIntPtr count, IntPtr user_data);
    private Byte* FillBuffer(Byte* source, long length);
    private Byte* ReadBuffer(Byte* destination, long length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.StringInfo : object {
    [CompilerGeneratedAttribute]
private Byte[] <Datum>k__BackingField;
    public Byte[] Datum { get; }
    public StringInfo(Byte[] datum);
    [CompilerGeneratedAttribute]
public Byte[] get_Datum();
    [NullableContextAttribute("2")]
public static StringInfo CreateInstance(IntPtr instance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.TemporaryDefines : object {
    private IMagickImage _image;
    private List`1<string> _names;
    public TemporaryDefines(IMagickImage image);
    public sealed virtual void Dispose();
    public void SetArtifact(string name, string value);
    public void SetArtifact(string name, bool value);
    [NullableContextAttribute("2")]
public void SetArtifact(string name, TValue value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.TemporaryFile : object {
    private FileInfo _tempFile;
    public long Length { get; }
    public string FullName { get; }
    public long get_Length();
    public string get_FullName();
    public void CopyTo(TemporaryFile temporaryFile);
    public void CopyTo(FileInfo file);
    public sealed virtual void Dispose();
}
internal class ImageMagick.TemporaryImageAttacher : object {
    [NullableAttribute("1")]
private List`1<IMagickImage`1<byte>> _images;
    [NullableContextAttribute("1")]
public TemporaryImageAttacher(List`1<IMagickImage`1<byte>> images);
    public sealed virtual void Dispose();
    private void AttachImages();
    private void DetachImages();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.TemporaryMagickFormat : object {
    private List`1<MagickFormatInfo> _formatInfos;
    public TemporaryMagickFormat(MagickImage image, MagickFormat format);
    public TemporaryMagickFormat(MagickImageCollection images, MagickFormat format);
    public sealed virtual void Dispose();
    private void AddImage(IMagickImage`1<byte> image, MagickFormat format);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ImageMagick.Throw : object {
    public static void IfFalse(string paramName, bool condition, string message);
    public static void IfFalse(string paramName, bool condition, string message, T0 arg0);
    public static void IfNull(string paramName, object value);
    public static void IfNull(string paramName, object value, string message);
    public static void IfNullOrEmpty(string paramName, Stream value);
    public static void IfNullOrEmpty(string paramName, string value);
    public static void IfNullOrEmpty(string paramName, string value, string message);
    public static void IfNullOrEmpty(string paramName, Array value);
    public static void IfNegative(string paramName, double value);
    public static void IfNegative(string paramName, Percentage value);
    public static void IfOutOfRange(string paramName, int index, UInt32 length);
    public static void IfOutOfRange(string paramName, int min, int max, int value, string message);
    public static void IfOutOfRange(string paramName, int min, int max, int value, string message, T arg0);
    public static void IfOutOfRange(string paramName, Percentage value);
    public static void IfTrue(string paramName, bool condition, string message);
    public static void IfTrue(string paramName, bool condition, string message, T0 arg0);
    public static void IfTrue(string paramName, bool condition, string message, T0 arg0, T1 arg1);
    private static string FormatMessage(string message, Object[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ImageMagick.TypeHelper : object {
    public static T GetCustomAttribute(Type type);
    public static Stream GetManifestResourceStream(Type type, string resourcePath, string resourceName);
}
public class ImageMagick.TypeMetric : object {
    [CompilerGeneratedAttribute]
private double <Ascent>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Descent>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaxHorizontalAdvance>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TextHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TextWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UnderlinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UnderlineThickness>k__BackingField;
    public double Ascent { get; }
    public double Descent { get; }
    public double MaxHorizontalAdvance { get; }
    public double TextHeight { get; }
    public double TextWidth { get; }
    public double UnderlinePosition { get; }
    public double UnderlineThickness { get; }
    [NullableContextAttribute("1")]
private TypeMetric(NativeTypeMetric instance);
    [NullableContextAttribute("1")]
internal static TypeMetric CreateInstance(IntPtr instance);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Ascent();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Descent();
    [CompilerGeneratedAttribute]
public sealed virtual double get_MaxHorizontalAdvance();
    [CompilerGeneratedAttribute]
public sealed virtual double get_TextHeight();
    [CompilerGeneratedAttribute]
public sealed virtual double get_TextWidth();
    [CompilerGeneratedAttribute]
public sealed virtual double get_UnderlinePosition();
    [CompilerGeneratedAttribute]
public sealed virtual double get_UnderlineThickness();
    internal static void Dispose(IntPtr instance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.UnsafePixelCollection : PixelCollection {
    public UnsafePixelCollection(MagickImage image);
    public virtual Byte[] GetArea(IMagickGeometry geometry);
    public virtual IntPtr GetAreaPointer(IMagickGeometry geometry);
    public virtual void SetArea(int x, int y, UInt32 width, UInt32 height, Byte[] values);
    public virtual void SetArea(IMagickGeometry geometry, Byte[] values);
    public virtual void SetByteArea(int x, int y, UInt32 width, UInt32 height, Byte[] values);
    public virtual void SetByteArea(IMagickGeometry geometry, Byte[] values);
    public virtual void SetBytePixels(Byte[] values);
    public virtual void SetDoubleArea(int x, int y, UInt32 width, UInt32 height, Double[] values);
    public virtual void SetDoubleArea(IMagickGeometry geometry, Double[] values);
    public virtual void SetDoublePixels(Double[] values);
    public virtual void SetIntArea(int x, int y, UInt32 width, UInt32 height, Int32[] values);
    public virtual void SetIntArea(IMagickGeometry geometry, Int32[] values);
    public virtual void SetIntPixels(Int32[] values);
    public virtual void SetPixel(IEnumerable`1<IPixel`1<byte>> pixels);
    public virtual void SetPixel(int x, int y, Byte[] value);
    public virtual void SetPixels(Byte[] values);
    public virtual Byte[] ToByteArray(IMagickGeometry geometry, string mapping);
    public virtual Byte[] ToByteArray(int x, int y, UInt32 width, UInt32 height, string mapping);
    public virtual UInt16[] ToShortArray(IMagickGeometry geometry, string mapping);
    public virtual UInt16[] ToShortArray(int x, int y, UInt32 width, UInt32 height, string mapping);
}
internal class ImageMagick.UTF8Marshaler : object {
    [CompilerGeneratedAttribute]
private IntPtr <Instance>k__BackingField;
    public IntPtr Instance { get; private set; }
    [NullableContextAttribute("2")]
private UTF8Marshaler(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_Instance();
    [CompilerGeneratedAttribute]
private void set_Instance(IntPtr value);
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
internal static UTF8Marshaler CreateInstance(string value);
    [NullableContextAttribute("1")]
internal static string CreateInstance(IntPtr nativeData);
    [NullableContextAttribute("2")]
internal static string CreateNullableInstance(IntPtr nativeData);
    [NullableContextAttribute("2")]
internal static string CreateInstanceAndRelinquish(IntPtr nativeData);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NativeIntegerAttribute : Attribute {
    public Boolean[] TransformFlags;
    public NativeIntegerAttribute(Boolean[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
