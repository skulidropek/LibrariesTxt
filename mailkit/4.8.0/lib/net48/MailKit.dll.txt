public class MailKit.AccessControl : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private AccessRights <Rights>k__BackingField;
    public string Name { get; private set; }
    public AccessRights Rights { get; private set; }
    public AccessControl(string name, IEnumerable`1<AccessRight> rights);
    public AccessControl(string name, string rights);
    public AccessControl(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public AccessRights get_Rights();
    [CompilerGeneratedAttribute]
private void set_Rights(AccessRights value);
}
public class MailKit.AccessControlList : List`1<AccessControl> {
    public AccessControlList(IEnumerable`1<AccessControl> controls);
}
[IsReadOnlyAttribute]
public class MailKit.AccessRight : ValueType {
    public static AccessRight LookupFolder;
    public static AccessRight OpenFolder;
    public static AccessRight SetMessageSeen;
    public static AccessRight SetMessageFlags;
    public static AccessRight AppendMessages;
    public static AccessRight CreateFolder;
    public static AccessRight DeleteFolder;
    public static AccessRight SetMessageDeleted;
    public static AccessRight ExpungeFolder;
    public static AccessRight Administer;
    public char Right;
    public AccessRight(char right);
    private static AccessRight();
    public sealed virtual bool Equals(AccessRight other);
    public static bool op_Equality(AccessRight right1, AccessRight right2);
    public static bool op_Inequality(AccessRight right1, AccessRight right2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class MailKit.AccessRights : object {
    private List`1<AccessRight> list;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public AccessRight Item { get; }
    public AccessRights(IEnumerable`1<AccessRight> rights);
    public AccessRights(string rights);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<MailKit.AccessRight>.Add(AccessRight right);
    public bool Add(AccessRight right);
    public bool Add(char right);
    public void AddRange(string rights);
    public void AddRange(IEnumerable`1<AccessRight> rights);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(AccessRight right);
    public sealed virtual void CopyTo(AccessRight[] array, int arrayIndex);
    public sealed virtual bool Remove(AccessRight right);
    public AccessRight get_Item(int index);
    public sealed virtual IEnumerator`1<AccessRight> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
public class MailKit.AlertEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; private set; }
    public AlertEventArgs(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
}
public class MailKit.Annotation : object {
    [CompilerGeneratedAttribute]
private AnnotationEntry <Entry>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<AnnotationAttribute, string> <Properties>k__BackingField;
    public AnnotationEntry Entry { get; private set; }
    public Dictionary`2<AnnotationAttribute, string> Properties { get; private set; }
    public Annotation(AnnotationEntry entry);
    [CompilerGeneratedAttribute]
public AnnotationEntry get_Entry();
    [CompilerGeneratedAttribute]
private void set_Entry(AnnotationEntry value);
    [CompilerGeneratedAttribute]
public Dictionary`2<AnnotationAttribute, string> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(Dictionary`2<AnnotationAttribute, string> value);
}
public enum MailKit.AnnotationAccess : Enum {
    public int value__;
    public static AnnotationAccess None;
    public static AnnotationAccess ReadOnly;
    public static AnnotationAccess ReadWrite;
}
public class MailKit.AnnotationAttribute : object {
    private static Char[] Wildcards;
    public static AnnotationAttribute Value;
    public static AnnotationAttribute SharedValue;
    public static AnnotationAttribute PrivateValue;
    public static AnnotationAttribute Size;
    public static AnnotationAttribute SharedSize;
    public static AnnotationAttribute PrivateSize;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private AnnotationScope <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Specifier>k__BackingField;
    public string Name { get; private set; }
    public AnnotationScope Scope { get; private set; }
    public string Specifier { get; private set; }
    private AnnotationAttribute(string name, AnnotationScope scope);
    public AnnotationAttribute(string specifier);
    private static AnnotationAttribute();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public AnnotationScope get_Scope();
    [CompilerGeneratedAttribute]
private void set_Scope(AnnotationScope value);
    [CompilerGeneratedAttribute]
public string get_Specifier();
    [CompilerGeneratedAttribute]
private void set_Specifier(string value);
    public sealed virtual bool Equals(AnnotationAttribute other);
    public static bool op_Equality(AnnotationAttribute attr1, AnnotationAttribute attr2);
    public static bool op_Inequality(AnnotationAttribute attr1, AnnotationAttribute attr2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class MailKit.AnnotationEntry : object {
    public static AnnotationEntry Comment;
    public static AnnotationEntry PrivateComment;
    public static AnnotationEntry SharedComment;
    public static AnnotationEntry Flags;
    public static AnnotationEntry PrivateFlags;
    public static AnnotationEntry SharedFlags;
    public static AnnotationEntry AltSubject;
    public static AnnotationEntry PrivateAltSubject;
    public static AnnotationEntry SharedAltSubject;
    [CompilerGeneratedAttribute]
private string <Entry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PartSpecifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private AnnotationScope <Scope>k__BackingField;
    public string Entry { get; private set; }
    public string PartSpecifier { get; private set; }
    public string Path { get; private set; }
    public AnnotationScope Scope { get; private set; }
    public AnnotationEntry(string path, AnnotationScope scope);
    public AnnotationEntry(string partSpecifier, string path, AnnotationScope scope);
    public AnnotationEntry(BodyPart part, string path, AnnotationScope scope);
    private static AnnotationEntry();
    private static void ValidatePath(string path);
    private static void ValidatePartSpecifier(string partSpecifier);
    [CompilerGeneratedAttribute]
public string get_Entry();
    [CompilerGeneratedAttribute]
private void set_Entry(string value);
    [CompilerGeneratedAttribute]
public string get_PartSpecifier();
    [CompilerGeneratedAttribute]
private void set_PartSpecifier(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public AnnotationScope get_Scope();
    [CompilerGeneratedAttribute]
private void set_Scope(AnnotationScope value);
    public sealed virtual bool Equals(AnnotationEntry other);
    public static bool op_Equality(AnnotationEntry entry1, AnnotationEntry entry2);
    public static bool op_Inequality(AnnotationEntry entry1, AnnotationEntry entry2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static AnnotationEntry Parse(string entry);
    internal static AnnotationEntry Create(string entry);
}
public class MailKit.AnnotationsChangedEventArgs : MessageEventArgs {
    [CompilerGeneratedAttribute]
private IList`1<Annotation> <Annotations>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <ModSeq>k__BackingField;
    public IList`1<Annotation> Annotations { get; internal set; }
    public Nullable`1<ulong> ModSeq { get; internal set; }
    internal AnnotationsChangedEventArgs(int index);
    public AnnotationsChangedEventArgs(int index, IEnumerable`1<Annotation> annotations);
    [CompilerGeneratedAttribute]
public IList`1<Annotation> get_Annotations();
    [CompilerGeneratedAttribute]
internal void set_Annotations(IList`1<Annotation> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_ModSeq();
    [CompilerGeneratedAttribute]
internal void set_ModSeq(Nullable`1<ulong> value);
}
[FlagsAttribute]
public enum MailKit.AnnotationScope : Enum {
    public int value__;
    public static AnnotationScope None;
    public static AnnotationScope Private;
    public static AnnotationScope Shared;
    public static AnnotationScope Both;
}
public class MailKit.AppendRequest : object {
    [CompilerGeneratedAttribute]
private MimeMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Keywords>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <InternalDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Annotation> <Annotations>k__BackingField;
    [CompilerGeneratedAttribute]
private ITransferProgress <TransferProgress>k__BackingField;
    public MimeMessage Message { get; private set; }
    public MessageFlags Flags { get; public set; }
    public ISet`1<string> Keywords { get; public set; }
    public Nullable`1<DateTimeOffset> InternalDate { get; public set; }
    public IList`1<Annotation> Annotations { get; public set; }
    public ITransferProgress TransferProgress { get; public set; }
    public AppendRequest(MimeMessage message, MessageFlags flags);
    public AppendRequest(MimeMessage message, MessageFlags flags, IEnumerable`1<string> keywords);
    public AppendRequest(MimeMessage message, MessageFlags flags, DateTimeOffset internalDate);
    public AppendRequest(MimeMessage message, MessageFlags flags, IEnumerable`1<string> keywords, DateTimeOffset internalDate);
    [CompilerGeneratedAttribute]
public sealed virtual MimeMessage get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(MimeMessage value);
    [CompilerGeneratedAttribute]
public sealed virtual MessageFlags get_Flags();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Flags(MessageFlags value);
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<string> get_Keywords();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Keywords(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_InternalDate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InternalDate(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<Annotation> get_Annotations();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Annotations(IList`1<Annotation> value);
    [CompilerGeneratedAttribute]
public sealed virtual ITransferProgress get_TransferProgress();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransferProgress(ITransferProgress value);
}
public class MailKit.AuthenticatedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; private set; }
    public AuthenticatedEventArgs(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
}
public class MailKit.AuthenticationSecret : ValueType {
    [CompilerGeneratedAttribute]
private int <StartIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int StartIndex { get; private set; }
    public int Length { get; private set; }
    public AuthenticationSecret(int startIndex, int length);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_StartIndex();
    [CompilerGeneratedAttribute]
private void set_StartIndex(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
}
public abstract class MailKit.BodyPart : object {
    [CompilerGeneratedAttribute]
private ContentType <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PartSpecifier>k__BackingField;
    public ContentType ContentType { get; public set; }
    public string PartSpecifier { get; public set; }
    [CompilerGeneratedAttribute]
public ContentType get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(ContentType value);
    [CompilerGeneratedAttribute]
public string get_PartSpecifier();
    [CompilerGeneratedAttribute]
public void set_PartSpecifier(string value);
    public abstract virtual void Accept(BodyPartVisitor visitor);
    internal static void Encode(StringBuilder builder, UInt32 value);
    internal static void Encode(StringBuilder builder, string value);
    internal static void Encode(StringBuilder builder, Uri location);
    internal static void Encode(StringBuilder builder, String[] values);
    internal static void Encode(StringBuilder builder, IList`1<Parameter> parameters);
    internal static void Encode(StringBuilder builder, ContentDisposition disposition);
    internal static void Encode(StringBuilder builder, ContentType contentType);
    internal static void Encode(StringBuilder builder, BodyPartCollection parts);
    internal static void Encode(StringBuilder builder, Envelope envelope);
    internal static void Encode(StringBuilder builder, BodyPart body);
    protected abstract virtual void Encode(StringBuilder builder);
    public virtual string ToString();
    private static bool IsNIL(string text, int index);
    private static bool TryParse(string text, Int32& index, UInt32& value);
    private static bool TryParse(string text, Int32& index, String& nstring);
    private static bool TryParse(string text, Int32& index, String[]& values);
    private static bool TryParse(string text, Int32& index, Uri& uri);
    private static bool TryParse(string text, Int32& index, IList`1& parameters);
    private static bool TryParse(string text, Int32& index, ContentDisposition& disposition);
    private static bool TryParse(string text, Int32& index, bool multipart, ContentType& contentType);
    private static bool TryParse(string text, Int32& index, string prefix, IList`1& children);
    private static bool TryParse(string text, Int32& index, string path, BodyPart& part);
    public static bool TryParse(string text, BodyPart& part);
}
public class MailKit.BodyPartBasic : BodyPart {
    [CompilerGeneratedAttribute]
private string <ContentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentTransferEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Octets>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentMd5>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentDisposition <ContentDisposition>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ContentLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ContentLocation>k__BackingField;
    public string ContentId { get; public set; }
    public string ContentDescription { get; public set; }
    public string ContentTransferEncoding { get; public set; }
    public UInt32 Octets { get; public set; }
    public string ContentMd5 { get; public set; }
    public ContentDisposition ContentDisposition { get; public set; }
    public String[] ContentLanguage { get; public set; }
    public Uri ContentLocation { get; public set; }
    public bool IsAttachment { get; }
    public string FileName { get; }
    [CompilerGeneratedAttribute]
public string get_ContentId();
    [CompilerGeneratedAttribute]
public void set_ContentId(string value);
    [CompilerGeneratedAttribute]
public string get_ContentDescription();
    [CompilerGeneratedAttribute]
public void set_ContentDescription(string value);
    [CompilerGeneratedAttribute]
public string get_ContentTransferEncoding();
    [CompilerGeneratedAttribute]
public void set_ContentTransferEncoding(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_Octets();
    [CompilerGeneratedAttribute]
public void set_Octets(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_ContentMd5();
    [CompilerGeneratedAttribute]
public void set_ContentMd5(string value);
    [CompilerGeneratedAttribute]
public ContentDisposition get_ContentDisposition();
    [CompilerGeneratedAttribute]
public void set_ContentDisposition(ContentDisposition value);
    [CompilerGeneratedAttribute]
public String[] get_ContentLanguage();
    [CompilerGeneratedAttribute]
public void set_ContentLanguage(String[] value);
    [CompilerGeneratedAttribute]
public Uri get_ContentLocation();
    [CompilerGeneratedAttribute]
public void set_ContentLocation(Uri value);
    public bool get_IsAttachment();
    public string get_FileName();
    public virtual void Accept(BodyPartVisitor visitor);
    protected virtual void Encode(StringBuilder builder);
}
[DefaultMemberAttribute("Item")]
public class MailKit.BodyPartCollection : object {
    private List`1<BodyPart> collection;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public BodyPart Item { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(BodyPart part);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(BodyPart part);
    public sealed virtual void CopyTo(BodyPart[] array, int arrayIndex);
    public sealed virtual bool Remove(BodyPart part);
    public BodyPart get_Item(int index);
    public int IndexOf(Uri uri);
    public sealed virtual IEnumerator`1<BodyPart> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class MailKit.BodyPartMessage : BodyPartBasic {
    [CompilerGeneratedAttribute]
private Envelope <Envelope>k__BackingField;
    [CompilerGeneratedAttribute]
private BodyPart <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Lines>k__BackingField;
    public Envelope Envelope { get; public set; }
    public BodyPart Body { get; public set; }
    public UInt32 Lines { get; public set; }
    [CompilerGeneratedAttribute]
public Envelope get_Envelope();
    [CompilerGeneratedAttribute]
public void set_Envelope(Envelope value);
    [CompilerGeneratedAttribute]
public BodyPart get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(BodyPart value);
    [CompilerGeneratedAttribute]
public UInt32 get_Lines();
    [CompilerGeneratedAttribute]
public void set_Lines(UInt32 value);
    public virtual void Accept(BodyPartVisitor visitor);
    protected virtual void Encode(StringBuilder builder);
}
public class MailKit.BodyPartMultipart : BodyPart {
    [CompilerGeneratedAttribute]
private BodyPartCollection <BodyParts>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentDisposition <ContentDisposition>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ContentLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ContentLocation>k__BackingField;
    public BodyPartCollection BodyParts { get; private set; }
    public ContentDisposition ContentDisposition { get; public set; }
    public String[] ContentLanguage { get; public set; }
    public Uri ContentLocation { get; public set; }
    [CompilerGeneratedAttribute]
public BodyPartCollection get_BodyParts();
    [CompilerGeneratedAttribute]
private void set_BodyParts(BodyPartCollection value);
    [CompilerGeneratedAttribute]
public ContentDisposition get_ContentDisposition();
    [CompilerGeneratedAttribute]
public void set_ContentDisposition(ContentDisposition value);
    [CompilerGeneratedAttribute]
public String[] get_ContentLanguage();
    [CompilerGeneratedAttribute]
public void set_ContentLanguage(String[] value);
    [CompilerGeneratedAttribute]
public Uri get_ContentLocation();
    [CompilerGeneratedAttribute]
public void set_ContentLocation(Uri value);
    public virtual void Accept(BodyPartVisitor visitor);
    protected virtual void Encode(StringBuilder builder);
}
public class MailKit.BodyPartText : BodyPartBasic {
    [CompilerGeneratedAttribute]
private UInt32 <Lines>k__BackingField;
    public bool IsPlain { get; }
    public bool IsHtml { get; }
    public UInt32 Lines { get; public set; }
    public bool get_IsPlain();
    public bool get_IsHtml();
    [CompilerGeneratedAttribute]
public UInt32 get_Lines();
    [CompilerGeneratedAttribute]
public void set_Lines(UInt32 value);
    public virtual void Accept(BodyPartVisitor visitor);
    protected virtual void Encode(StringBuilder builder);
}
public abstract class MailKit.BodyPartVisitor : object {
    public virtual void Visit(BodyPart body);
    protected internal virtual void VisitBodyPart(BodyPart entity);
    protected internal virtual void VisitBodyPartBasic(BodyPartBasic entity);
    protected virtual void VisitMessage(BodyPart message);
    protected internal virtual void VisitBodyPartMessage(BodyPartMessage entity);
    protected virtual void VisitChildren(BodyPartMultipart multipart);
    protected internal virtual void VisitBodyPartMultipart(BodyPartMultipart multipart);
    protected internal virtual void VisitBodyPartText(BodyPartText entity);
}
internal class MailKit.ByteArrayBuilder : object {
    private Byte[] buffer;
    private int length;
    public int Length { get; }
    public ByteArrayBuilder(int initialCapacity);
    public int get_Length();
    private void EnsureCapacity(int capacity);
    public void Append(byte c);
    public void Append(Byte[] text, int startIndex, int count);
    public void Clear();
    public Byte[] ToArray();
    public string ToString(Encoding encoding, Encoding fallback);
    public virtual string ToString();
    public bool Equals(string value, bool ignoreCase);
    public void TrimNewLine();
    internal static bool TryParse(Byte[] text, Int32& index, int endIndex, Int32& value);
    public bool TryParse(int startIndex, int endIndex, Int32& value);
    public sealed virtual void Dispose();
}
public abstract class MailKit.CommandException : Exception {
    [SecuritySafeCriticalAttribute]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
protected CommandException(SerializationInfo info, StreamingContext context);
    protected CommandException(string message, Exception innerException);
    protected CommandException(string message);
}
internal class MailKit.CompressedStream : Stream {
    private ZStream zIn;
    private ZStream zOut;
    private bool eos;
    private bool disposed;
    [CompilerGeneratedAttribute]
private Stream <InnerStream>k__BackingField;
    public Stream InnerStream { get; private set; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public long Position { get; public set; }
    public long Length { get; }
    public CompressedStream(Stream innerStream);
    [CompilerGeneratedAttribute]
public Stream get_InnerStream();
    [CompilerGeneratedAttribute]
private void set_InnerStream(Stream value);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long get_Length();
    private static void ValidateArguments(Byte[] buffer, int offset, int count);
    private void CheckDisposed();
    public virtual int Read(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("MailKit.CompressedStream/<ReadAsync>d__31")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("MailKit.CompressedStream/<WriteAsync>d__33")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    protected virtual void Dispose(bool disposing);
}
public class MailKit.ConnectedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private SecureSocketOptions <Options>k__BackingField;
    public string Host { get; private set; }
    public int Port { get; private set; }
    public SecureSocketOptions Options { get; private set; }
    public ConnectedEventArgs(string host, int port, SecureSocketOptions options);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
private void set_Host(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
private void set_Port(int value);
    [CompilerGeneratedAttribute]
public SecureSocketOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(SecureSocketOptions value);
}
[FlagsAttribute]
public enum MailKit.DeliveryStatusNotification : Enum {
    public int value__;
    public static DeliveryStatusNotification Never;
    public static DeliveryStatusNotification Success;
    public static DeliveryStatusNotification Failure;
    public static DeliveryStatusNotification Delay;
}
public class MailKit.DisconnectedEventArgs : ConnectedEventArgs {
    [CompilerGeneratedAttribute]
private bool <IsRequested>k__BackingField;
    public bool IsRequested { get; private set; }
    public DisconnectedEventArgs(string host, int port, SecureSocketOptions options, bool requested);
    [CompilerGeneratedAttribute]
public bool get_IsRequested();
    [CompilerGeneratedAttribute]
private void set_IsRequested(bool value);
}
internal class MailKit.DuplexStream : Stream {
    private bool disposed;
    [CompilerGeneratedAttribute]
private Stream <InputStream>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <OutputStream>k__BackingField;
    public Stream InputStream { get; private set; }
    public Stream OutputStream { get; private set; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public long Position { get; public set; }
    public long Length { get; }
    public DuplexStream(Stream istream, Stream ostream);
    [CompilerGeneratedAttribute]
public Stream get_InputStream();
    [CompilerGeneratedAttribute]
private void set_InputStream(Stream value);
    [CompilerGeneratedAttribute]
public Stream get_OutputStream();
    [CompilerGeneratedAttribute]
private void set_OutputStream(Stream value);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long get_Length();
    private static void ValidateArguments(Byte[] buffer, int offset, int count);
    private void CheckDisposed();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    protected virtual void Dispose(bool disposing);
}
public class MailKit.Envelope : object {
    [CompilerGeneratedAttribute]
private InternetAddressList <From>k__BackingField;
    [CompilerGeneratedAttribute]
private InternetAddressList <Sender>k__BackingField;
    [CompilerGeneratedAttribute]
private InternetAddressList <ReplyTo>k__BackingField;
    [CompilerGeneratedAttribute]
private InternetAddressList <To>k__BackingField;
    [CompilerGeneratedAttribute]
private InternetAddressList <Cc>k__BackingField;
    [CompilerGeneratedAttribute]
private InternetAddressList <Bcc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InReplyTo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    public InternetAddressList From { get; private set; }
    public InternetAddressList Sender { get; private set; }
    public InternetAddressList ReplyTo { get; private set; }
    public InternetAddressList To { get; private set; }
    public InternetAddressList Cc { get; private set; }
    public InternetAddressList Bcc { get; private set; }
    public string InReplyTo { get; public set; }
    public Nullable`1<DateTimeOffset> Date { get; public set; }
    public string MessageId { get; public set; }
    public string Subject { get; public set; }
    [CompilerGeneratedAttribute]
public InternetAddressList get_From();
    [CompilerGeneratedAttribute]
private void set_From(InternetAddressList value);
    [CompilerGeneratedAttribute]
public InternetAddressList get_Sender();
    [CompilerGeneratedAttribute]
private void set_Sender(InternetAddressList value);
    [CompilerGeneratedAttribute]
public InternetAddressList get_ReplyTo();
    [CompilerGeneratedAttribute]
private void set_ReplyTo(InternetAddressList value);
    [CompilerGeneratedAttribute]
public InternetAddressList get_To();
    [CompilerGeneratedAttribute]
private void set_To(InternetAddressList value);
    [CompilerGeneratedAttribute]
public InternetAddressList get_Cc();
    [CompilerGeneratedAttribute]
private void set_Cc(InternetAddressList value);
    [CompilerGeneratedAttribute]
public InternetAddressList get_Bcc();
    [CompilerGeneratedAttribute]
private void set_Bcc(InternetAddressList value);
    [CompilerGeneratedAttribute]
public string get_InReplyTo();
    [CompilerGeneratedAttribute]
public void set_InReplyTo(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Date();
    [CompilerGeneratedAttribute]
public void set_Date(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    private static void EncodeMailbox(StringBuilder builder, MailboxAddress mailbox);
    private static void EncodeInternetAddressListAddresses(StringBuilder builder, InternetAddressList addresses);
    private static void EncodeGroup(StringBuilder builder, GroupAddress group);
    private static void EncodeAddressList(StringBuilder builder, InternetAddressList list);
    internal void Encode(StringBuilder builder);
    public virtual string ToString();
    private static bool IsNIL(string text, int index);
    private static bool TryParse(string text, Int32& index, String& nstring);
    private static bool TryParse(string text, Int32& index, InternetAddress& addr);
    private static bool TryParse(string text, Int32& index, InternetAddressList& list);
    internal static bool TryParse(string text, Int32& index, Envelope& envelope);
    public static bool TryParse(string text, Envelope& envelope);
}
public class MailKit.FetchRequest : object {
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <ChangedSince>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageSummaryItems <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private HeaderSet <Headers>k__BackingField;
    public Nullable`1<ulong> ChangedSince { get; public set; }
    public MessageSummaryItems Items { get; public set; }
    public HeaderSet Headers { get; public set; }
    public FetchRequest(MessageSummaryItems items);
    public FetchRequest(MessageSummaryItems items, IEnumerable`1<HeaderId> headers);
    public FetchRequest(MessageSummaryItems items, IEnumerable`1<string> headers);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<ulong> get_ChangedSince();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ChangedSince(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public sealed virtual MessageSummaryItems get_Items();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Items(MessageSummaryItems value);
    [CompilerGeneratedAttribute]
public sealed virtual HeaderSet get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(HeaderSet value);
}
public enum MailKit.FolderAccess : Enum {
    public int value__;
    public static FolderAccess None;
    public static FolderAccess ReadOnly;
    public static FolderAccess ReadWrite;
}
[FlagsAttribute]
public enum MailKit.FolderAttributes : Enum {
    public int value__;
    public static FolderAttributes None;
    public static FolderAttributes NoInferiors;
    public static FolderAttributes NoSelect;
    public static FolderAttributes Marked;
    public static FolderAttributes Unmarked;
    public static FolderAttributes NonExistent;
    public static FolderAttributes Subscribed;
    public static FolderAttributes Remote;
    public static FolderAttributes HasChildren;
    public static FolderAttributes HasNoChildren;
    public static FolderAttributes All;
    public static FolderAttributes Archive;
    public static FolderAttributes Drafts;
    public static FolderAttributes Flagged;
    public static FolderAttributes Important;
    public static FolderAttributes Inbox;
    public static FolderAttributes Junk;
    public static FolderAttributes Sent;
    public static FolderAttributes Trash;
}
public class MailKit.FolderCreatedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IMailFolder <Folder>k__BackingField;
    public IMailFolder Folder { get; private set; }
    public FolderCreatedEventArgs(IMailFolder folder);
    [CompilerGeneratedAttribute]
public IMailFolder get_Folder();
    [CompilerGeneratedAttribute]
private void set_Folder(IMailFolder value);
}
public enum MailKit.FolderFeature : Enum {
    public int value__;
    public static FolderFeature AccessRights;
    public static FolderFeature Annotations;
    public static FolderFeature Metadata;
    public static FolderFeature ModSequences;
    public static FolderFeature QuickResync;
    public static FolderFeature Quotas;
    public static FolderFeature Sorting;
    public static FolderFeature Threading;
    public static FolderFeature UTF8;
}
public class MailKit.FolderNamespace : object {
    public char DirectorySeparator;
    public string Path;
    public FolderNamespace(char directorySeparator, string path);
}
[DefaultMemberAttribute("Item")]
public class MailKit.FolderNamespaceCollection : object {
    private List`1<FolderNamespace> namespaces;
    public int Count { get; }
    public FolderNamespace Item { get; public set; }
    public int get_Count();
    public void Add(FolderNamespace namespace);
    public void Clear();
    public bool Contains(FolderNamespace namespace);
    public bool Remove(FolderNamespace namespace);
    public FolderNamespace get_Item(int index);
    public void set_Item(int index, FolderNamespace value);
    public sealed virtual IEnumerator`1<FolderNamespace> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private static bool Escape(char directorySeparator);
    public virtual string ToString();
}
public class MailKit.FolderNotFoundException : Exception {
    [CompilerGeneratedAttribute]
private string <FolderName>k__BackingField;
    public string FolderName { get; private set; }
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
protected FolderNotFoundException(SerializationInfo info, StreamingContext context);
    public FolderNotFoundException(string message, string folderName, Exception innerException);
    public FolderNotFoundException(string message, string folderName);
    public FolderNotFoundException(string folderName);
    [CompilerGeneratedAttribute]
public string get_FolderName();
    [CompilerGeneratedAttribute]
private void set_FolderName(string value);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class MailKit.FolderNotOpenException : InvalidOperationException {
    [CompilerGeneratedAttribute]
private string <FolderName>k__BackingField;
    [CompilerGeneratedAttribute]
private FolderAccess <FolderAccess>k__BackingField;
    public string FolderName { get; private set; }
    public FolderAccess FolderAccess { get; private set; }
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
protected FolderNotOpenException(SerializationInfo info, StreamingContext context);
    public FolderNotOpenException(string folderName, FolderAccess access, string message, Exception innerException);
    public FolderNotOpenException(string folderName, FolderAccess access, string message);
    public FolderNotOpenException(string folderName, FolderAccess access);
    [CompilerGeneratedAttribute]
public string get_FolderName();
    [CompilerGeneratedAttribute]
private void set_FolderName(string value);
    [CompilerGeneratedAttribute]
public FolderAccess get_FolderAccess();
    [CompilerGeneratedAttribute]
private void set_FolderAccess(FolderAccess value);
    private static string GetDefaultMessage(FolderAccess access);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class MailKit.FolderQuota : object {
    [CompilerGeneratedAttribute]
private IMailFolder <QuotaRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <MessageLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <StorageLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <CurrentMessageCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <CurrentStorageSize>k__BackingField;
    public IMailFolder QuotaRoot { get; private set; }
    public Nullable`1<UInt32> MessageLimit { get; public set; }
    public Nullable`1<UInt32> StorageLimit { get; public set; }
    public Nullable`1<UInt32> CurrentMessageCount { get; public set; }
    public Nullable`1<UInt32> CurrentStorageSize { get; public set; }
    public FolderQuota(IMailFolder quotaRoot);
    [CompilerGeneratedAttribute]
public IMailFolder get_QuotaRoot();
    [CompilerGeneratedAttribute]
private void set_QuotaRoot(IMailFolder value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_MessageLimit();
    [CompilerGeneratedAttribute]
public void set_MessageLimit(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_StorageLimit();
    [CompilerGeneratedAttribute]
public void set_StorageLimit(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_CurrentMessageCount();
    [CompilerGeneratedAttribute]
public void set_CurrentMessageCount(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_CurrentStorageSize();
    [CompilerGeneratedAttribute]
public void set_CurrentStorageSize(Nullable`1<UInt32> value);
}
public class MailKit.FolderRenamedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <OldName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    public string OldName { get; private set; }
    public string NewName { get; private set; }
    public FolderRenamedEventArgs(string oldName, string newName);
    [CompilerGeneratedAttribute]
public string get_OldName();
    [CompilerGeneratedAttribute]
private void set_OldName(string value);
    [CompilerGeneratedAttribute]
public string get_NewName();
    [CompilerGeneratedAttribute]
private void set_NewName(string value);
}
public class MailKit.HeaderSet : object {
    private static string AtomSafeCharacters;
    public static HeaderSet All;
    public static HeaderSet Envelope;
    public static HeaderSet References;
    private HashSet`1<string> hash;
    private bool exclude;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    public int Count { get; }
    public bool Exclude { get; public set; }
    public bool IsReadOnly { get; private set; }
    public HeaderSet(IEnumerable`1<HeaderId> headers);
    public HeaderSet(IEnumerable`1<string> headers);
    private static HeaderSet();
    private void CheckReadOnly();
    public sealed virtual int get_Count();
    public bool get_Exclude();
    public void set_Exclude(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
private void set_IsReadOnly(bool value);
    private static bool IsAsciiAtom(char c);
    private static bool IsValid(string header);
    public bool Add(HeaderId header);
    public bool Add(string header);
    private sealed virtual override void System.Collections.Generic.ICollection<System.String>.Add(string item);
    public void AddRange(IEnumerable`1<HeaderId> headers);
    public void AddRange(IEnumerable`1<string> headers);
    public sealed virtual void Clear();
    public sealed virtual void CopyTo(String[] array, int arrayIndex);
    public bool Contains(HeaderId header);
    public sealed virtual bool Contains(string header);
    public bool Remove(HeaderId header);
    public sealed virtual bool Remove(string header);
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public interface MailKit.IAppendRequest {
    public MimeMessage Message { get; }
    public MessageFlags Flags { get; public set; }
    public ISet`1<string> Keywords { get; public set; }
    public Nullable`1<DateTimeOffset> InternalDate { get; public set; }
    public IList`1<Annotation> Annotations { get; public set; }
    public ITransferProgress TransferProgress { get; public set; }
    public abstract virtual MimeMessage get_Message();
    public abstract virtual MessageFlags get_Flags();
    public abstract virtual void set_Flags(MessageFlags value);
    public abstract virtual ISet`1<string> get_Keywords();
    public abstract virtual void set_Keywords(ISet`1<string> value);
    public abstract virtual Nullable`1<DateTimeOffset> get_InternalDate();
    public abstract virtual void set_InternalDate(Nullable`1<DateTimeOffset> value);
    public abstract virtual IList`1<Annotation> get_Annotations();
    public abstract virtual void set_Annotations(IList`1<Annotation> value);
    public abstract virtual ITransferProgress get_TransferProgress();
    public abstract virtual void set_TransferProgress(ITransferProgress value);
}
public interface MailKit.IAuthenticationSecretDetector {
    public abstract virtual IList`1<AuthenticationSecret> DetectSecrets(Byte[] buffer, int offset, int count);
}
public interface MailKit.IFetchRequest {
    public Nullable`1<ulong> ChangedSince { get; public set; }
    public MessageSummaryItems Items { get; public set; }
    public HeaderSet Headers { get; }
    public abstract virtual Nullable`1<ulong> get_ChangedSince();
    public abstract virtual void set_ChangedSince(Nullable`1<ulong> value);
    public abstract virtual MessageSummaryItems get_Items();
    public abstract virtual void set_Items(MessageSummaryItems value);
    public abstract virtual HeaderSet get_Headers();
}
public interface MailKit.IMailFolder {
    public object SyncRoot { get; }
    public IMailFolder ParentFolder { get; }
    public FolderAttributes Attributes { get; }
    public AnnotationAccess AnnotationAccess { get; }
    public AnnotationScope AnnotationScopes { get; }
    public UInt32 MaxAnnotationSize { get; }
    public MessageFlags PermanentFlags { get; }
    public ISet`1<string> PermanentKeywords { get; }
    public MessageFlags AcceptedFlags { get; }
    public ISet`1<string> AcceptedKeywords { get; }
    public char DirectorySeparator { get; }
    public FolderAccess Access { get; }
    public bool IsNamespace { get; }
    public string FullName { get; }
    public string Name { get; }
    public string Id { get; }
    public bool IsSubscribed { get; }
    public bool IsOpen { get; }
    public bool Exists { get; }
    public ulong HighestModSeq { get; }
    public UInt32 UidValidity { get; }
    public Nullable`1<UniqueId> UidNext { get; }
    public Nullable`1<UInt32> AppendLimit { get; }
    public Nullable`1<ulong> Size { get; }
    public int FirstUnread { get; }
    public int Unread { get; }
    public int Recent { get; }
    public int Count { get; }
    public HashSet`1<ThreadingAlgorithm> ThreadingAlgorithms { get; }
    public abstract virtual object get_SyncRoot();
    public abstract virtual IMailFolder get_ParentFolder();
    public abstract virtual FolderAttributes get_Attributes();
    public abstract virtual AnnotationAccess get_AnnotationAccess();
    public abstract virtual AnnotationScope get_AnnotationScopes();
    public abstract virtual UInt32 get_MaxAnnotationSize();
    public abstract virtual MessageFlags get_PermanentFlags();
    public abstract virtual ISet`1<string> get_PermanentKeywords();
    public abstract virtual MessageFlags get_AcceptedFlags();
    public abstract virtual ISet`1<string> get_AcceptedKeywords();
    public abstract virtual char get_DirectorySeparator();
    public abstract virtual FolderAccess get_Access();
    public abstract virtual bool get_IsNamespace();
    public abstract virtual string get_FullName();
    public abstract virtual string get_Name();
    public abstract virtual string get_Id();
    public abstract virtual bool get_IsSubscribed();
    public abstract virtual bool get_IsOpen();
    public abstract virtual bool get_Exists();
    public abstract virtual ulong get_HighestModSeq();
    public abstract virtual UInt32 get_UidValidity();
    public abstract virtual Nullable`1<UniqueId> get_UidNext();
    public abstract virtual Nullable`1<UInt32> get_AppendLimit();
    public abstract virtual Nullable`1<ulong> get_Size();
    public abstract virtual int get_FirstUnread();
    public abstract virtual int get_Unread();
    public abstract virtual int get_Recent();
    public abstract virtual int get_Count();
    public abstract virtual HashSet`1<ThreadingAlgorithm> get_ThreadingAlgorithms();
    public abstract virtual bool Supports(FolderFeature feature);
    public abstract virtual FolderAccess Open(FolderAccess access, UInt32 uidValidity, ulong highestModSeq, IList`1<UniqueId> uids, CancellationToken cancellationToken);
    public abstract virtual Task`1<FolderAccess> OpenAsync(FolderAccess access, UInt32 uidValidity, ulong highestModSeq, IList`1<UniqueId> uids, CancellationToken cancellationToken);
    public abstract virtual FolderAccess Open(FolderAccess access, CancellationToken cancellationToken);
    public abstract virtual Task`1<FolderAccess> OpenAsync(FolderAccess access, CancellationToken cancellationToken);
    public abstract virtual void Close(bool expunge, CancellationToken cancellationToken);
    public abstract virtual Task CloseAsync(bool expunge, CancellationToken cancellationToken);
    public abstract virtual IMailFolder Create(string name, bool isMessageFolder, CancellationToken cancellationToken);
    public abstract virtual Task`1<IMailFolder> CreateAsync(string name, bool isMessageFolder, CancellationToken cancellationToken);
    public abstract virtual IMailFolder Create(string name, IEnumerable`1<SpecialFolder> specialUses, CancellationToken cancellationToken);
    public abstract virtual Task`1<IMailFolder> CreateAsync(string name, IEnumerable`1<SpecialFolder> specialUses, CancellationToken cancellationToken);
    public abstract virtual IMailFolder Create(string name, SpecialFolder specialUse, CancellationToken cancellationToken);
    public abstract virtual Task`1<IMailFolder> CreateAsync(string name, SpecialFolder specialUse, CancellationToken cancellationToken);
    public abstract virtual void Rename(IMailFolder parent, string name, CancellationToken cancellationToken);
    public abstract virtual Task RenameAsync(IMailFolder parent, string name, CancellationToken cancellationToken);
    public abstract virtual void Delete(CancellationToken cancellationToken);
    public abstract virtual Task DeleteAsync(CancellationToken cancellationToken);
    public abstract virtual void Subscribe(CancellationToken cancellationToken);
    public abstract virtual Task SubscribeAsync(CancellationToken cancellationToken);
    public abstract virtual void Unsubscribe(CancellationToken cancellationToken);
    public abstract virtual Task UnsubscribeAsync(CancellationToken cancellationToken);
    public abstract virtual IList`1<IMailFolder> GetSubfolders(StatusItems items, bool subscribedOnly, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<IMailFolder>> GetSubfoldersAsync(StatusItems items, bool subscribedOnly, CancellationToken cancellationToken);
    public abstract virtual IList`1<IMailFolder> GetSubfolders(bool subscribedOnly, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<IMailFolder>> GetSubfoldersAsync(bool subscribedOnly, CancellationToken cancellationToken);
    public abstract virtual IMailFolder GetSubfolder(string name, CancellationToken cancellationToken);
    public abstract virtual Task`1<IMailFolder> GetSubfolderAsync(string name, CancellationToken cancellationToken);
    public abstract virtual void Check(CancellationToken cancellationToken);
    public abstract virtual Task CheckAsync(CancellationToken cancellationToken);
    public abstract virtual void Status(StatusItems items, CancellationToken cancellationToken);
    public abstract virtual Task StatusAsync(StatusItems items, CancellationToken cancellationToken);
    public abstract virtual AccessControlList GetAccessControlList(CancellationToken cancellationToken);
    public abstract virtual Task`1<AccessControlList> GetAccessControlListAsync(CancellationToken cancellationToken);
    public abstract virtual AccessRights GetAccessRights(string name, CancellationToken cancellationToken);
    public abstract virtual Task`1<AccessRights> GetAccessRightsAsync(string name, CancellationToken cancellationToken);
    public abstract virtual AccessRights GetMyAccessRights(CancellationToken cancellationToken);
    public abstract virtual Task`1<AccessRights> GetMyAccessRightsAsync(CancellationToken cancellationToken);
    public abstract virtual void AddAccessRights(string name, AccessRights rights, CancellationToken cancellationToken);
    public abstract virtual Task AddAccessRightsAsync(string name, AccessRights rights, CancellationToken cancellationToken);
    public abstract virtual void RemoveAccessRights(string name, AccessRights rights, CancellationToken cancellationToken);
    public abstract virtual Task RemoveAccessRightsAsync(string name, AccessRights rights, CancellationToken cancellationToken);
    public abstract virtual void SetAccessRights(string name, AccessRights rights, CancellationToken cancellationToken);
    public abstract virtual Task SetAccessRightsAsync(string name, AccessRights rights, CancellationToken cancellationToken);
    public abstract virtual void RemoveAccess(string name, CancellationToken cancellationToken);
    public abstract virtual Task RemoveAccessAsync(string name, CancellationToken cancellationToken);
    public abstract virtual FolderQuota GetQuota(CancellationToken cancellationToken);
    public abstract virtual Task`1<FolderQuota> GetQuotaAsync(CancellationToken cancellationToken);
    public abstract virtual FolderQuota SetQuota(Nullable`1<UInt32> messageLimit, Nullable`1<UInt32> storageLimit, CancellationToken cancellationToken);
    public abstract virtual Task`1<FolderQuota> SetQuotaAsync(Nullable`1<UInt32> messageLimit, Nullable`1<UInt32> storageLimit, CancellationToken cancellationToken);
    public abstract virtual string GetMetadata(MetadataTag tag, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetMetadataAsync(MetadataTag tag, CancellationToken cancellationToken);
    public abstract virtual MetadataCollection GetMetadata(IEnumerable`1<MetadataTag> tags, CancellationToken cancellationToken);
    public abstract virtual Task`1<MetadataCollection> GetMetadataAsync(IEnumerable`1<MetadataTag> tags, CancellationToken cancellationToken);
    public abstract virtual MetadataCollection GetMetadata(MetadataOptions options, IEnumerable`1<MetadataTag> tags, CancellationToken cancellationToken);
    public abstract virtual Task`1<MetadataCollection> GetMetadataAsync(MetadataOptions options, IEnumerable`1<MetadataTag> tags, CancellationToken cancellationToken);
    public abstract virtual void SetMetadata(MetadataCollection metadata, CancellationToken cancellationToken);
    public abstract virtual Task SetMetadataAsync(MetadataCollection metadata, CancellationToken cancellationToken);
    public abstract virtual void Expunge(CancellationToken cancellationToken);
    public abstract virtual Task ExpungeAsync(CancellationToken cancellationToken);
    public abstract virtual void Expunge(IList`1<UniqueId> uids, CancellationToken cancellationToken);
    public abstract virtual Task ExpungeAsync(IList`1<UniqueId> uids, CancellationToken cancellationToken);
    public abstract virtual Nullable`1<UniqueId> Append(IAppendRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<UniqueId>> AppendAsync(IAppendRequest request, CancellationToken cancellationToken);
    public abstract virtual Nullable`1<UniqueId> Append(FormatOptions options, IAppendRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<UniqueId>> AppendAsync(FormatOptions options, IAppendRequest request, CancellationToken cancellationToken);
    public abstract virtual IList`1<UniqueId> Append(IList`1<IAppendRequest> requests, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<UniqueId>> AppendAsync(IList`1<IAppendRequest> requests, CancellationToken cancellationToken);
    public abstract virtual IList`1<UniqueId> Append(FormatOptions options, IList`1<IAppendRequest> requests, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<UniqueId>> AppendAsync(FormatOptions options, IList`1<IAppendRequest> requests, CancellationToken cancellationToken);
    public abstract virtual Nullable`1<UniqueId> Replace(UniqueId uid, IReplaceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<UniqueId>> ReplaceAsync(UniqueId uid, IReplaceRequest request, CancellationToken cancellationToken);
    public abstract virtual Nullable`1<UniqueId> Replace(FormatOptions options, UniqueId uid, IReplaceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<UniqueId>> ReplaceAsync(FormatOptions options, UniqueId uid, IReplaceRequest request, CancellationToken cancellationToken);
    public abstract virtual Nullable`1<UniqueId> Replace(int index, IReplaceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<UniqueId>> ReplaceAsync(int index, IReplaceRequest request, CancellationToken cancellationToken);
    public abstract virtual Nullable`1<UniqueId> Replace(FormatOptions options, int index, IReplaceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<UniqueId>> ReplaceAsync(FormatOptions options, int index, IReplaceRequest request, CancellationToken cancellationToken);
    public abstract virtual Nullable`1<UniqueId> CopyTo(UniqueId uid, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<UniqueId>> CopyToAsync(UniqueId uid, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual UniqueIdMap CopyTo(IList`1<UniqueId> uids, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual Task`1<UniqueIdMap> CopyToAsync(IList`1<UniqueId> uids, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual Nullable`1<UniqueId> MoveTo(UniqueId uid, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<UniqueId>> MoveToAsync(UniqueId uid, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual UniqueIdMap MoveTo(IList`1<UniqueId> uids, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual Task`1<UniqueIdMap> MoveToAsync(IList`1<UniqueId> uids, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual void CopyTo(int index, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual Task CopyToAsync(int index, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual void CopyTo(IList`1<int> indexes, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual Task CopyToAsync(IList`1<int> indexes, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual void MoveTo(int index, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual Task MoveToAsync(int index, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual void MoveTo(IList`1<int> indexes, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual Task MoveToAsync(IList`1<int> indexes, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual IList`1<IMessageSummary> Fetch(IList`1<UniqueId> uids, IFetchRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<IMessageSummary>> FetchAsync(IList`1<UniqueId> uids, IFetchRequest request, CancellationToken cancellationToken);
    public abstract virtual IList`1<IMessageSummary> Fetch(IList`1<int> indexes, IFetchRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<IMessageSummary>> FetchAsync(IList`1<int> indexes, IFetchRequest request, CancellationToken cancellationToken);
    public abstract virtual IList`1<IMessageSummary> Fetch(int min, int max, IFetchRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<IMessageSummary>> FetchAsync(int min, int max, IFetchRequest request, CancellationToken cancellationToken);
    public abstract virtual HeaderList GetHeaders(UniqueId uid, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<HeaderList> GetHeadersAsync(UniqueId uid, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual HeaderList GetHeaders(UniqueId uid, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<HeaderList> GetHeadersAsync(UniqueId uid, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual HeaderList GetHeaders(int index, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<HeaderList> GetHeadersAsync(int index, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual HeaderList GetHeaders(int index, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<HeaderList> GetHeadersAsync(int index, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual MimeMessage GetMessage(UniqueId uid, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<MimeMessage> GetMessageAsync(UniqueId uid, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual MimeMessage GetMessage(int index, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<MimeMessage> GetMessageAsync(int index, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual MimeEntity GetBodyPart(UniqueId uid, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<MimeEntity> GetBodyPartAsync(UniqueId uid, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual MimeEntity GetBodyPart(int index, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<MimeEntity> GetBodyPartAsync(int index, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Stream GetStream(UniqueId uid, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<Stream> GetStreamAsync(UniqueId uid, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Stream GetStream(int index, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<Stream> GetStreamAsync(int index, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Stream GetStream(UniqueId uid, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<Stream> GetStreamAsync(UniqueId uid, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Stream GetStream(int index, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<Stream> GetStreamAsync(int index, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Stream GetStream(UniqueId uid, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<Stream> GetStreamAsync(UniqueId uid, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Stream GetStream(int index, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<Stream> GetStreamAsync(int index, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Stream GetStream(UniqueId uid, BodyPart part, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<Stream> GetStreamAsync(UniqueId uid, BodyPart part, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Stream GetStream(int index, BodyPart part, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<Stream> GetStreamAsync(int index, BodyPart part, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Stream GetStream(UniqueId uid, string section, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<Stream> GetStreamAsync(UniqueId uid, string section, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Stream GetStream(UniqueId uid, string section, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<Stream> GetStreamAsync(UniqueId uid, string section, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Stream GetStream(int index, string section, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<Stream> GetStreamAsync(int index, string section, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Stream GetStream(int index, string section, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<Stream> GetStreamAsync(int index, string section, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual bool Store(UniqueId uid, IStoreFlagsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> StoreAsync(UniqueId uid, IStoreFlagsRequest request, CancellationToken cancellationToken);
    public abstract virtual IList`1<UniqueId> Store(IList`1<UniqueId> uids, IStoreFlagsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<UniqueId>> StoreAsync(IList`1<UniqueId> uids, IStoreFlagsRequest request, CancellationToken cancellationToken);
    public abstract virtual bool Store(int index, IStoreFlagsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> StoreAsync(int index, IStoreFlagsRequest request, CancellationToken cancellationToken);
    public abstract virtual IList`1<int> Store(IList`1<int> indexes, IStoreFlagsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<int>> StoreAsync(IList`1<int> indexes, IStoreFlagsRequest request, CancellationToken cancellationToken);
    public abstract virtual bool Store(UniqueId uid, IStoreLabelsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> StoreAsync(UniqueId uid, IStoreLabelsRequest request, CancellationToken cancellationToken);
    public abstract virtual IList`1<UniqueId> Store(IList`1<UniqueId> uids, IStoreLabelsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<UniqueId>> StoreAsync(IList`1<UniqueId> uids, IStoreLabelsRequest request, CancellationToken cancellationToken);
    public abstract virtual bool Store(int index, IStoreLabelsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> StoreAsync(int index, IStoreLabelsRequest request, CancellationToken cancellationToken);
    public abstract virtual IList`1<int> Store(IList`1<int> indexes, IStoreLabelsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<int>> StoreAsync(IList`1<int> indexes, IStoreLabelsRequest request, CancellationToken cancellationToken);
    public abstract virtual void Store(UniqueId uid, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public abstract virtual Task StoreAsync(UniqueId uid, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public abstract virtual void Store(IList`1<UniqueId> uids, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public abstract virtual Task StoreAsync(IList`1<UniqueId> uids, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public abstract virtual IList`1<UniqueId> Store(IList`1<UniqueId> uids, ulong modseq, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<UniqueId>> StoreAsync(IList`1<UniqueId> uids, ulong modseq, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public abstract virtual void Store(int index, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public abstract virtual Task StoreAsync(int index, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public abstract virtual void Store(IList`1<int> indexes, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public abstract virtual Task StoreAsync(IList`1<int> indexes, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public abstract virtual IList`1<int> Store(IList`1<int> indexes, ulong modseq, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<int>> StoreAsync(IList`1<int> indexes, ulong modseq, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public abstract virtual IList`1<UniqueId> Search(SearchQuery query, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<UniqueId>> SearchAsync(SearchQuery query, CancellationToken cancellationToken);
    public abstract virtual IList`1<UniqueId> Search(IList`1<UniqueId> uids, SearchQuery query, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<UniqueId>> SearchAsync(IList`1<UniqueId> uids, SearchQuery query, CancellationToken cancellationToken);
    public abstract virtual SearchResults Search(SearchOptions options, SearchQuery query, CancellationToken cancellationToken);
    public abstract virtual Task`1<SearchResults> SearchAsync(SearchOptions options, SearchQuery query, CancellationToken cancellationToken);
    public abstract virtual SearchResults Search(SearchOptions options, IList`1<UniqueId> uids, SearchQuery query, CancellationToken cancellationToken);
    public abstract virtual Task`1<SearchResults> SearchAsync(SearchOptions options, IList`1<UniqueId> uids, SearchQuery query, CancellationToken cancellationToken);
    public abstract virtual IList`1<UniqueId> Sort(SearchQuery query, IList`1<OrderBy> orderBy, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<UniqueId>> SortAsync(SearchQuery query, IList`1<OrderBy> orderBy, CancellationToken cancellationToken);
    public abstract virtual IList`1<UniqueId> Sort(IList`1<UniqueId> uids, SearchQuery query, IList`1<OrderBy> orderBy, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<UniqueId>> SortAsync(IList`1<UniqueId> uids, SearchQuery query, IList`1<OrderBy> orderBy, CancellationToken cancellationToken);
    public abstract virtual SearchResults Sort(SearchOptions options, SearchQuery query, IList`1<OrderBy> orderBy, CancellationToken cancellationToken);
    public abstract virtual Task`1<SearchResults> SortAsync(SearchOptions options, SearchQuery query, IList`1<OrderBy> orderBy, CancellationToken cancellationToken);
    public abstract virtual SearchResults Sort(SearchOptions options, IList`1<UniqueId> uids, SearchQuery query, IList`1<OrderBy> orderBy, CancellationToken cancellationToken);
    public abstract virtual Task`1<SearchResults> SortAsync(SearchOptions options, IList`1<UniqueId> uids, SearchQuery query, IList`1<OrderBy> orderBy, CancellationToken cancellationToken);
    public abstract virtual IList`1<MessageThread> Thread(ThreadingAlgorithm algorithm, SearchQuery query, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<MessageThread>> ThreadAsync(ThreadingAlgorithm algorithm, SearchQuery query, CancellationToken cancellationToken);
    public abstract virtual IList`1<MessageThread> Thread(IList`1<UniqueId> uids, ThreadingAlgorithm algorithm, SearchQuery query, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<MessageThread>> ThreadAsync(IList`1<UniqueId> uids, ThreadingAlgorithm algorithm, SearchQuery query, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Opened(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Opened(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Deleted(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Deleted(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Renamed(EventHandler`1<FolderRenamedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Renamed(EventHandler`1<FolderRenamedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Subscribed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Subscribed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Unsubscribed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Unsubscribed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MessageExpunged(EventHandler`1<MessageEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MessageExpunged(EventHandler`1<MessageEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MessagesVanished(EventHandler`1<MessagesVanishedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MessagesVanished(EventHandler`1<MessagesVanishedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MessageFlagsChanged(EventHandler`1<MessageFlagsChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MessageFlagsChanged(EventHandler`1<MessageFlagsChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MessageLabelsChanged(EventHandler`1<MessageLabelsChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MessageLabelsChanged(EventHandler`1<MessageLabelsChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AnnotationsChanged(EventHandler`1<AnnotationsChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AnnotationsChanged(EventHandler`1<AnnotationsChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MessageSummaryFetched(EventHandler`1<MessageSummaryFetchedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MessageSummaryFetched(EventHandler`1<MessageSummaryFetchedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MetadataChanged(EventHandler`1<MetadataChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MetadataChanged(EventHandler`1<MetadataChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ModSeqChanged(EventHandler`1<ModSeqChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ModSeqChanged(EventHandler`1<ModSeqChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_HighestModSeqChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_HighestModSeqChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_UidNextChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_UidNextChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_UidValidityChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_UidValidityChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_IdChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_IdChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SizeChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SizeChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CountChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CountChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RecentChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RecentChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_UnreadChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_UnreadChanged(EventHandler`1<EventArgs> value);
}
[ExtensionAttribute]
public static class MailKit.IMailFolderExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<UniqueId> Append(IMailFolder folder, MimeMessage message, MessageFlags flags, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Task`1<Nullable`1<UniqueId>> AppendAsync(IMailFolder folder, MimeMessage message, MessageFlags flags, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Nullable`1<UniqueId> Append(IMailFolder folder, MimeMessage message, MessageFlags flags, DateTimeOffset date, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Task`1<Nullable`1<UniqueId>> AppendAsync(IMailFolder folder, MimeMessage message, MessageFlags flags, DateTimeOffset date, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Nullable`1<UniqueId> Append(IMailFolder folder, MimeMessage message, MessageFlags flags, Nullable`1<DateTimeOffset> date, IList`1<Annotation> annotations, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Task`1<Nullable`1<UniqueId>> AppendAsync(IMailFolder folder, MimeMessage message, MessageFlags flags, Nullable`1<DateTimeOffset> date, IList`1<Annotation> annotations, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Nullable`1<UniqueId> Append(IMailFolder folder, FormatOptions options, MimeMessage message, MessageFlags flags, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Task`1<Nullable`1<UniqueId>> AppendAsync(IMailFolder folder, FormatOptions options, MimeMessage message, MessageFlags flags, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Nullable`1<UniqueId> Append(IMailFolder folder, FormatOptions options, MimeMessage message, MessageFlags flags, DateTimeOffset date, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Task`1<Nullable`1<UniqueId>> AppendAsync(IMailFolder folder, FormatOptions options, MimeMessage message, MessageFlags flags, DateTimeOffset date, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Nullable`1<UniqueId> Append(IMailFolder folder, FormatOptions options, MimeMessage message, MessageFlags flags, Nullable`1<DateTimeOffset> date, IList`1<Annotation> annotations, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Task`1<Nullable`1<UniqueId>> AppendAsync(IMailFolder folder, FormatOptions options, MimeMessage message, MessageFlags flags, Nullable`1<DateTimeOffset> date, IList`1<Annotation> annotations, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static IList`1<UniqueId> Append(IMailFolder folder, IList`1<MimeMessage> messages, IList`1<MessageFlags> flags, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Task`1<IList`1<UniqueId>> AppendAsync(IMailFolder folder, IList`1<MimeMessage> messages, IList`1<MessageFlags> flags, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static IList`1<UniqueId> Append(IMailFolder folder, IList`1<MimeMessage> messages, IList`1<MessageFlags> flags, IList`1<DateTimeOffset> dates, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Task`1<IList`1<UniqueId>> AppendAsync(IMailFolder folder, IList`1<MimeMessage> messages, IList`1<MessageFlags> flags, IList`1<DateTimeOffset> dates, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static IList`1<UniqueId> Append(IMailFolder folder, FormatOptions options, IList`1<MimeMessage> messages, IList`1<MessageFlags> flags, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Task`1<IList`1<UniqueId>> AppendAsync(IMailFolder folder, FormatOptions options, IList`1<MimeMessage> messages, IList`1<MessageFlags> flags, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static IList`1<UniqueId> Append(IMailFolder folder, FormatOptions options, IList`1<MimeMessage> messages, IList`1<MessageFlags> flags, IList`1<DateTimeOffset> dates, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Task`1<IList`1<UniqueId>> AppendAsync(IMailFolder folder, FormatOptions options, IList`1<MimeMessage> messages, IList`1<MessageFlags> flags, IList`1<DateTimeOffset> dates, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Nullable`1<UniqueId> Replace(IMailFolder folder, UniqueId uid, MimeMessage message, MessageFlags flags, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Task`1<Nullable`1<UniqueId>> ReplaceAsync(IMailFolder folder, UniqueId uid, MimeMessage message, MessageFlags flags, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Nullable`1<UniqueId> Replace(IMailFolder folder, UniqueId uid, MimeMessage message, MessageFlags flags, DateTimeOffset date, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Task`1<Nullable`1<UniqueId>> ReplaceAsync(IMailFolder folder, UniqueId uid, MimeMessage message, MessageFlags flags, DateTimeOffset date, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Nullable`1<UniqueId> Replace(IMailFolder folder, FormatOptions options, UniqueId uid, MimeMessage message, MessageFlags flags, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Task`1<Nullable`1<UniqueId>> ReplaceAsync(IMailFolder folder, FormatOptions options, UniqueId uid, MimeMessage message, MessageFlags flags, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Nullable`1<UniqueId> Replace(IMailFolder folder, FormatOptions options, UniqueId uid, MimeMessage message, MessageFlags flags, DateTimeOffset date, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Task`1<Nullable`1<UniqueId>> ReplaceAsync(IMailFolder folder, FormatOptions options, UniqueId uid, MimeMessage message, MessageFlags flags, DateTimeOffset date, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Nullable`1<UniqueId> Replace(IMailFolder folder, int index, MimeMessage message, MessageFlags flags, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Task`1<Nullable`1<UniqueId>> ReplaceAsync(IMailFolder folder, int index, MimeMessage message, MessageFlags flags, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Nullable`1<UniqueId> Replace(IMailFolder folder, int index, MimeMessage message, MessageFlags flags, DateTimeOffset date, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Task`1<Nullable`1<UniqueId>> ReplaceAsync(IMailFolder folder, int index, MimeMessage message, MessageFlags flags, DateTimeOffset date, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Nullable`1<UniqueId> Replace(IMailFolder folder, FormatOptions options, int index, MimeMessage message, MessageFlags flags, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Task`1<Nullable`1<UniqueId>> ReplaceAsync(IMailFolder folder, FormatOptions options, int index, MimeMessage message, MessageFlags flags, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Nullable`1<UniqueId> Replace(IMailFolder folder, FormatOptions options, int index, MimeMessage message, MessageFlags flags, DateTimeOffset date, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static Task`1<Nullable`1<UniqueId>> ReplaceAsync(IMailFolder folder, FormatOptions options, int index, MimeMessage message, MessageFlags flags, DateTimeOffset date, CancellationToken cancellationToken, ITransferProgress progress);
    [ExtensionAttribute]
public static IList`1<IMessageSummary> Fetch(IMailFolder folder, IList`1<UniqueId> uids, MessageSummaryItems items, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<IMessageSummary>> FetchAsync(IMailFolder folder, IList`1<UniqueId> uids, MessageSummaryItems items, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<IMessageSummary> Fetch(IMailFolder folder, IList`1<UniqueId> uids, MessageSummaryItems items, IEnumerable`1<HeaderId> headers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<IMessageSummary>> FetchAsync(IMailFolder folder, IList`1<UniqueId> uids, MessageSummaryItems items, IEnumerable`1<HeaderId> headers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<IMessageSummary> Fetch(IMailFolder folder, IList`1<UniqueId> uids, MessageSummaryItems items, IEnumerable`1<string> headers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<IMessageSummary>> FetchAsync(IMailFolder folder, IList`1<UniqueId> uids, MessageSummaryItems items, IEnumerable`1<string> headers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<IMessageSummary> Fetch(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, MessageSummaryItems items, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<IMessageSummary>> FetchAsync(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, MessageSummaryItems items, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<IMessageSummary> Fetch(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, MessageSummaryItems items, IEnumerable`1<HeaderId> headers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<IMessageSummary>> FetchAsync(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, MessageSummaryItems items, IEnumerable`1<HeaderId> headers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<IMessageSummary> Fetch(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, MessageSummaryItems items, IEnumerable`1<string> headers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<IMessageSummary>> FetchAsync(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, MessageSummaryItems items, IEnumerable`1<string> headers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<IMessageSummary> Fetch(IMailFolder folder, IList`1<int> indexes, MessageSummaryItems items, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<IMessageSummary>> FetchAsync(IMailFolder folder, IList`1<int> indexes, MessageSummaryItems items, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<IMessageSummary> Fetch(IMailFolder folder, IList`1<int> indexes, MessageSummaryItems items, IEnumerable`1<HeaderId> headers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<IMessageSummary>> FetchAsync(IMailFolder folder, IList`1<int> indexes, MessageSummaryItems items, IEnumerable`1<HeaderId> headers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<IMessageSummary> Fetch(IMailFolder folder, IList`1<int> indexes, MessageSummaryItems items, IEnumerable`1<string> headers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<IMessageSummary>> FetchAsync(IMailFolder folder, IList`1<int> indexes, MessageSummaryItems items, IEnumerable`1<string> headers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<IMessageSummary> Fetch(IMailFolder folder, IList`1<int> indexes, ulong modseq, MessageSummaryItems items, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<IMessageSummary>> FetchAsync(IMailFolder folder, IList`1<int> indexes, ulong modseq, MessageSummaryItems items, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<IMessageSummary> Fetch(IMailFolder folder, IList`1<int> indexes, ulong modseq, MessageSummaryItems items, IEnumerable`1<HeaderId> headers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<IMessageSummary>> FetchAsync(IMailFolder folder, IList`1<int> indexes, ulong modseq, MessageSummaryItems items, IEnumerable`1<HeaderId> headers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<IMessageSummary> Fetch(IMailFolder folder, IList`1<int> indexes, ulong modseq, MessageSummaryItems items, IEnumerable`1<string> headers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<IMessageSummary>> FetchAsync(IMailFolder folder, IList`1<int> indexes, ulong modseq, MessageSummaryItems items, IEnumerable`1<string> headers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<IMessageSummary> Fetch(IMailFolder folder, int min, int max, MessageSummaryItems items, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<IMessageSummary>> FetchAsync(IMailFolder folder, int min, int max, MessageSummaryItems items, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<IMessageSummary> Fetch(IMailFolder folder, int min, int max, MessageSummaryItems items, IEnumerable`1<HeaderId> headers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<IMessageSummary>> FetchAsync(IMailFolder folder, int min, int max, MessageSummaryItems items, IEnumerable`1<HeaderId> headers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<IMessageSummary> Fetch(IMailFolder folder, int min, int max, MessageSummaryItems items, IEnumerable`1<string> headers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<IMessageSummary>> FetchAsync(IMailFolder folder, int min, int max, MessageSummaryItems items, IEnumerable`1<string> headers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<IMessageSummary> Fetch(IMailFolder folder, int min, int max, ulong modseq, MessageSummaryItems items, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<IMessageSummary>> FetchAsync(IMailFolder folder, int min, int max, ulong modseq, MessageSummaryItems items, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<IMessageSummary> Fetch(IMailFolder folder, int min, int max, ulong modseq, MessageSummaryItems items, IEnumerable`1<HeaderId> headers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<IMessageSummary>> FetchAsync(IMailFolder folder, int min, int max, ulong modseq, MessageSummaryItems items, IEnumerable`1<HeaderId> headers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<IMessageSummary> Fetch(IMailFolder folder, int min, int max, ulong modseq, MessageSummaryItems items, IEnumerable`1<string> headers, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<IMessageSummary>> FetchAsync(IMailFolder folder, int min, int max, ulong modseq, MessageSummaryItems items, IEnumerable`1<string> headers, CancellationToken cancellationToken);
    private static StoreFlagsRequest GetStoreFlagsRequest(StoreAction action, bool silent, MessageFlags flags, HashSet`1<string> keywords, Nullable`1<ulong> modseq);
    [ExtensionAttribute]
public static void AddFlags(IMailFolder folder, UniqueId uid, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task AddFlagsAsync(IMailFolder folder, UniqueId uid, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void AddFlags(IMailFolder folder, UniqueId uid, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task AddFlagsAsync(IMailFolder folder, UniqueId uid, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void AddFlags(IMailFolder folder, IList`1<UniqueId> uids, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task AddFlagsAsync(IMailFolder folder, IList`1<UniqueId> uids, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void AddFlags(IMailFolder folder, IList`1<UniqueId> uids, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task AddFlagsAsync(IMailFolder folder, IList`1<UniqueId> uids, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void RemoveFlags(IMailFolder folder, UniqueId uid, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RemoveFlagsAsync(IMailFolder folder, UniqueId uid, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void RemoveFlags(IMailFolder folder, UniqueId uid, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RemoveFlagsAsync(IMailFolder folder, UniqueId uid, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void RemoveFlags(IMailFolder folder, IList`1<UniqueId> uids, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RemoveFlagsAsync(IMailFolder folder, IList`1<UniqueId> uids, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void RemoveFlags(IMailFolder folder, IList`1<UniqueId> uids, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RemoveFlagsAsync(IMailFolder folder, IList`1<UniqueId> uids, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SetFlags(IMailFolder folder, UniqueId uid, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SetFlagsAsync(IMailFolder folder, UniqueId uid, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SetFlags(IMailFolder folder, UniqueId uid, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SetFlagsAsync(IMailFolder folder, UniqueId uid, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SetFlags(IMailFolder folder, IList`1<UniqueId> uids, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SetFlagsAsync(IMailFolder folder, IList`1<UniqueId> uids, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SetFlags(IMailFolder folder, IList`1<UniqueId> uids, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SetFlagsAsync(IMailFolder folder, IList`1<UniqueId> uids, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<UniqueId> AddFlags(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<UniqueId>> AddFlagsAsync(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<UniqueId> AddFlags(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<UniqueId>> AddFlagsAsync(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<UniqueId> RemoveFlags(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<UniqueId>> RemoveFlagsAsync(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<UniqueId> RemoveFlags(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<UniqueId>> RemoveFlagsAsync(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<UniqueId> SetFlags(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<UniqueId>> SetFlagsAsync(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<UniqueId> SetFlags(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<UniqueId>> SetFlagsAsync(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void AddFlags(IMailFolder folder, int index, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task AddFlagsAsync(IMailFolder folder, int index, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void AddFlags(IMailFolder folder, int index, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task AddFlagsAsync(IMailFolder folder, int index, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void AddFlags(IMailFolder folder, IList`1<int> indexes, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task AddFlagsAsync(IMailFolder folder, IList`1<int> indexes, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void AddFlags(IMailFolder folder, IList`1<int> indexes, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task AddFlagsAsync(IMailFolder folder, IList`1<int> indexes, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void RemoveFlags(IMailFolder folder, int index, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RemoveFlagsAsync(IMailFolder folder, int index, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void RemoveFlags(IMailFolder folder, int index, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RemoveFlagsAsync(IMailFolder folder, int index, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void RemoveFlags(IMailFolder folder, IList`1<int> indexes, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RemoveFlagsAsync(IMailFolder folder, IList`1<int> indexes, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void RemoveFlags(IMailFolder folder, IList`1<int> indexes, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RemoveFlagsAsync(IMailFolder folder, IList`1<int> indexes, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SetFlags(IMailFolder folder, int index, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SetFlagsAsync(IMailFolder folder, int index, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SetFlags(IMailFolder folder, int index, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SetFlagsAsync(IMailFolder folder, int index, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SetFlags(IMailFolder folder, IList`1<int> indexes, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SetFlagsAsync(IMailFolder folder, IList`1<int> indexes, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SetFlags(IMailFolder folder, IList`1<int> indexes, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SetFlagsAsync(IMailFolder folder, IList`1<int> indexes, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<int> AddFlags(IMailFolder folder, IList`1<int> indexes, ulong modseq, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<int>> AddFlagsAsync(IMailFolder folder, IList`1<int> indexes, ulong modseq, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<int> AddFlags(IMailFolder folder, IList`1<int> indexes, ulong modseq, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<int>> AddFlagsAsync(IMailFolder folder, IList`1<int> indexes, ulong modseq, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<int> RemoveFlags(IMailFolder folder, IList`1<int> indexes, ulong modseq, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<int>> RemoveFlagsAsync(IMailFolder folder, IList`1<int> indexes, ulong modseq, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<int> RemoveFlags(IMailFolder folder, IList`1<int> indexes, ulong modseq, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<int>> RemoveFlagsAsync(IMailFolder folder, IList`1<int> indexes, ulong modseq, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<int> SetFlags(IMailFolder folder, IList`1<int> indexes, ulong modseq, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<int>> SetFlagsAsync(IMailFolder folder, IList`1<int> indexes, ulong modseq, MessageFlags flags, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<int> SetFlags(IMailFolder folder, IList`1<int> indexes, ulong modseq, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<int>> SetFlagsAsync(IMailFolder folder, IList`1<int> indexes, ulong modseq, MessageFlags flags, HashSet`1<string> keywords, bool silent, CancellationToken cancellationToken);
    private static StoreLabelsRequest GetStoreLabelsRequest(StoreAction action, bool silent, IList`1<string> labels, Nullable`1<ulong> modseq);
    [ExtensionAttribute]
public static void AddLabels(IMailFolder folder, UniqueId uid, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task AddLabelsAsync(IMailFolder folder, UniqueId uid, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void AddLabels(IMailFolder folder, IList`1<UniqueId> uids, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task AddLabelsAsync(IMailFolder folder, IList`1<UniqueId> uids, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void RemoveLabels(IMailFolder folder, UniqueId uid, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RemoveLabelsAsync(IMailFolder folder, UniqueId uid, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void RemoveLabels(IMailFolder folder, IList`1<UniqueId> uids, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RemoveLabelsAsync(IMailFolder folder, IList`1<UniqueId> uids, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SetLabels(IMailFolder folder, UniqueId uid, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SetLabelsAsync(IMailFolder folder, UniqueId uid, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SetLabels(IMailFolder folder, IList`1<UniqueId> uids, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SetLabelsAsync(IMailFolder folder, IList`1<UniqueId> uids, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<UniqueId> AddLabels(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<UniqueId>> AddLabelsAsync(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<UniqueId> RemoveLabels(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<UniqueId>> RemoveLabelsAsync(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<UniqueId> SetLabels(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<UniqueId>> SetLabelsAsync(IMailFolder folder, IList`1<UniqueId> uids, ulong modseq, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void AddLabels(IMailFolder folder, int index, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task AddLabelsAsync(IMailFolder folder, int index, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void AddLabels(IMailFolder folder, IList`1<int> indexes, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task AddLabelsAsync(IMailFolder folder, IList`1<int> indexes, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void RemoveLabels(IMailFolder folder, int index, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RemoveLabelsAsync(IMailFolder folder, int index, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void RemoveLabels(IMailFolder folder, IList`1<int> indexes, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RemoveLabelsAsync(IMailFolder folder, IList`1<int> indexes, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SetLabels(IMailFolder folder, int index, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SetLabelsAsync(IMailFolder folder, int index, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void SetLabels(IMailFolder folder, IList`1<int> indexes, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SetLabelsAsync(IMailFolder folder, IList`1<int> indexes, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<int> AddLabels(IMailFolder folder, IList`1<int> indexes, ulong modseq, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<int>> AddLabelsAsync(IMailFolder folder, IList`1<int> indexes, ulong modseq, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<int> RemoveLabels(IMailFolder folder, IList`1<int> indexes, ulong modseq, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<int>> RemoveLabelsAsync(IMailFolder folder, IList`1<int> indexes, ulong modseq, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IList`1<int> SetLabels(IMailFolder folder, IList`1<int> indexes, ulong modseq, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IList`1<int>> SetLabelsAsync(IMailFolder folder, IList`1<int> indexes, ulong modseq, IList`1<string> labels, bool silent, CancellationToken cancellationToken);
}
public interface MailKit.IMailService {
    public object SyncRoot { get; }
    public SslProtocols SslProtocols { get; public set; }
    public X509CertificateCollection ClientCertificates { get; public set; }
    public bool CheckCertificateRevocation { get; public set; }
    public RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; public set; }
    public IPEndPoint LocalEndPoint { get; public set; }
    public IProxyClient ProxyClient { get; public set; }
    public HashSet`1<string> AuthenticationMechanisms { get; }
    public bool IsAuthenticated { get; }
    public bool IsConnected { get; }
    public bool IsSecure { get; }
    public bool IsEncrypted { get; }
    public bool IsSigned { get; }
    public SslProtocols SslProtocol { get; }
    public Nullable`1<CipherAlgorithmType> SslCipherAlgorithm { get; }
    public Nullable`1<int> SslCipherStrength { get; }
    public Nullable`1<HashAlgorithmType> SslHashAlgorithm { get; }
    public Nullable`1<int> SslHashStrength { get; }
    public Nullable`1<ExchangeAlgorithmType> SslKeyExchangeAlgorithm { get; }
    public Nullable`1<int> SslKeyExchangeStrength { get; }
    public int Timeout { get; public set; }
    public abstract virtual object get_SyncRoot();
    public abstract virtual SslProtocols get_SslProtocols();
    public abstract virtual void set_SslProtocols(SslProtocols value);
    public abstract virtual X509CertificateCollection get_ClientCertificates();
    public abstract virtual void set_ClientCertificates(X509CertificateCollection value);
    public abstract virtual bool get_CheckCertificateRevocation();
    public abstract virtual void set_CheckCertificateRevocation(bool value);
    public abstract virtual RemoteCertificateValidationCallback get_ServerCertificateValidationCallback();
    public abstract virtual void set_ServerCertificateValidationCallback(RemoteCertificateValidationCallback value);
    public abstract virtual IPEndPoint get_LocalEndPoint();
    public abstract virtual void set_LocalEndPoint(IPEndPoint value);
    public abstract virtual IProxyClient get_ProxyClient();
    public abstract virtual void set_ProxyClient(IProxyClient value);
    public abstract virtual HashSet`1<string> get_AuthenticationMechanisms();
    public abstract virtual bool get_IsAuthenticated();
    public abstract virtual bool get_IsConnected();
    public abstract virtual bool get_IsSecure();
    public abstract virtual bool get_IsEncrypted();
    public abstract virtual bool get_IsSigned();
    public abstract virtual SslProtocols get_SslProtocol();
    public abstract virtual Nullable`1<CipherAlgorithmType> get_SslCipherAlgorithm();
    public abstract virtual Nullable`1<int> get_SslCipherStrength();
    public abstract virtual Nullable`1<HashAlgorithmType> get_SslHashAlgorithm();
    public abstract virtual Nullable`1<int> get_SslHashStrength();
    public abstract virtual Nullable`1<ExchangeAlgorithmType> get_SslKeyExchangeAlgorithm();
    public abstract virtual Nullable`1<int> get_SslKeyExchangeStrength();
    public abstract virtual int get_Timeout();
    public abstract virtual void set_Timeout(int value);
    public abstract virtual void Connect(string host, int port, bool useSsl, CancellationToken cancellationToken);
    public abstract virtual Task ConnectAsync(string host, int port, bool useSsl, CancellationToken cancellationToken);
    public abstract virtual void Connect(string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    public abstract virtual Task ConnectAsync(string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    public abstract virtual void Connect(Socket socket, string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    public abstract virtual Task ConnectAsync(Socket socket, string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    public abstract virtual void Connect(Stream stream, string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    public abstract virtual Task ConnectAsync(Stream stream, string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    public abstract virtual void Authenticate(ICredentials credentials, CancellationToken cancellationToken);
    public abstract virtual Task AuthenticateAsync(ICredentials credentials, CancellationToken cancellationToken);
    public abstract virtual void Authenticate(Encoding encoding, ICredentials credentials, CancellationToken cancellationToken);
    public abstract virtual Task AuthenticateAsync(Encoding encoding, ICredentials credentials, CancellationToken cancellationToken);
    public abstract virtual void Authenticate(Encoding encoding, string userName, string password, CancellationToken cancellationToken);
    public abstract virtual Task AuthenticateAsync(Encoding encoding, string userName, string password, CancellationToken cancellationToken);
    public abstract virtual void Authenticate(string userName, string password, CancellationToken cancellationToken);
    public abstract virtual Task AuthenticateAsync(string userName, string password, CancellationToken cancellationToken);
    public abstract virtual void Authenticate(SaslMechanism mechanism, CancellationToken cancellationToken);
    public abstract virtual Task AuthenticateAsync(SaslMechanism mechanism, CancellationToken cancellationToken);
    public abstract virtual void Disconnect(bool quit, CancellationToken cancellationToken);
    public abstract virtual Task DisconnectAsync(bool quit, CancellationToken cancellationToken);
    public abstract virtual void NoOp(CancellationToken cancellationToken);
    public abstract virtual Task NoOpAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Connected(EventHandler`1<ConnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Connected(EventHandler`1<ConnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Disconnected(EventHandler`1<DisconnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Disconnected(EventHandler`1<DisconnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Authenticated(EventHandler`1<AuthenticatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Authenticated(EventHandler`1<AuthenticatedEventArgs> value);
}
public interface MailKit.IMailSpool {
    public int Count { get; }
    public bool SupportsUids { get; }
    public abstract virtual int get_Count();
    public abstract virtual bool get_SupportsUids();
    public abstract virtual int GetMessageCount(CancellationToken cancellationToken);
    public abstract virtual Task`1<int> GetMessageCountAsync(CancellationToken cancellationToken);
    public abstract virtual string GetMessageUid(int index, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetMessageUidAsync(int index, CancellationToken cancellationToken);
    public abstract virtual IList`1<string> GetMessageUids(CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<string>> GetMessageUidsAsync(CancellationToken cancellationToken);
    public abstract virtual int GetMessageSize(int index, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> GetMessageSizeAsync(int index, CancellationToken cancellationToken);
    public abstract virtual IList`1<int> GetMessageSizes(CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<int>> GetMessageSizesAsync(CancellationToken cancellationToken);
    public abstract virtual HeaderList GetMessageHeaders(int index, CancellationToken cancellationToken);
    public abstract virtual Task`1<HeaderList> GetMessageHeadersAsync(int index, CancellationToken cancellationToken);
    public abstract virtual IList`1<HeaderList> GetMessageHeaders(IList`1<int> indexes, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<HeaderList>> GetMessageHeadersAsync(IList`1<int> indexes, CancellationToken cancellationToken);
    public abstract virtual IList`1<HeaderList> GetMessageHeaders(int startIndex, int count, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<HeaderList>> GetMessageHeadersAsync(int startIndex, int count, CancellationToken cancellationToken);
    public abstract virtual MimeMessage GetMessage(int index, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<MimeMessage> GetMessageAsync(int index, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual IList`1<MimeMessage> GetMessages(IList`1<int> indexes, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<IList`1<MimeMessage>> GetMessagesAsync(IList`1<int> indexes, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual IList`1<MimeMessage> GetMessages(int startIndex, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<IList`1<MimeMessage>> GetMessagesAsync(int startIndex, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Stream GetStream(int index, bool headersOnly, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<Stream> GetStreamAsync(int index, bool headersOnly, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual IList`1<Stream> GetStreams(IList`1<int> indexes, bool headersOnly, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<IList`1<Stream>> GetStreamsAsync(IList`1<int> indexes, bool headersOnly, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual IList`1<Stream> GetStreams(int startIndex, int count, bool headersOnly, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<IList`1<Stream>> GetStreamsAsync(int startIndex, int count, bool headersOnly, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual void DeleteMessage(int index, CancellationToken cancellationToken);
    public abstract virtual Task DeleteMessageAsync(int index, CancellationToken cancellationToken);
    public abstract virtual void DeleteMessages(IList`1<int> indexes, CancellationToken cancellationToken);
    public abstract virtual Task DeleteMessagesAsync(IList`1<int> indexes, CancellationToken cancellationToken);
    public abstract virtual void DeleteMessages(int startIndex, int count, CancellationToken cancellationToken);
    public abstract virtual Task DeleteMessagesAsync(int startIndex, int count, CancellationToken cancellationToken);
    public abstract virtual void DeleteAllMessages(CancellationToken cancellationToken);
    public abstract virtual Task DeleteAllMessagesAsync(CancellationToken cancellationToken);
    public abstract virtual void Reset(CancellationToken cancellationToken);
    public abstract virtual Task ResetAsync(CancellationToken cancellationToken);
}
public interface MailKit.IMailStore {
    public FolderNamespaceCollection PersonalNamespaces { get; }
    public FolderNamespaceCollection SharedNamespaces { get; }
    public FolderNamespaceCollection OtherNamespaces { get; }
    public bool SupportsQuotas { get; }
    public HashSet`1<ThreadingAlgorithm> ThreadingAlgorithms { get; }
    public IMailFolder Inbox { get; }
    public abstract virtual FolderNamespaceCollection get_PersonalNamespaces();
    public abstract virtual FolderNamespaceCollection get_SharedNamespaces();
    public abstract virtual FolderNamespaceCollection get_OtherNamespaces();
    public abstract virtual bool get_SupportsQuotas();
    public abstract virtual HashSet`1<ThreadingAlgorithm> get_ThreadingAlgorithms();
    public abstract virtual IMailFolder get_Inbox();
    public abstract virtual void EnableQuickResync(CancellationToken cancellationToken);
    public abstract virtual Task EnableQuickResyncAsync(CancellationToken cancellationToken);
    public abstract virtual IMailFolder GetFolder(SpecialFolder folder);
    public abstract virtual IMailFolder GetFolder(FolderNamespace namespace);
    public abstract virtual IList`1<IMailFolder> GetFolders(FolderNamespace namespace, bool subscribedOnly, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<IMailFolder>> GetFoldersAsync(FolderNamespace namespace, bool subscribedOnly, CancellationToken cancellationToken);
    public abstract virtual IList`1<IMailFolder> GetFolders(FolderNamespace namespace, StatusItems items, bool subscribedOnly, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<IMailFolder>> GetFoldersAsync(FolderNamespace namespace, StatusItems items, bool subscribedOnly, CancellationToken cancellationToken);
    public abstract virtual IMailFolder GetFolder(string path, CancellationToken cancellationToken);
    public abstract virtual Task`1<IMailFolder> GetFolderAsync(string path, CancellationToken cancellationToken);
    public abstract virtual string GetMetadata(MetadataTag tag, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetMetadataAsync(MetadataTag tag, CancellationToken cancellationToken);
    public abstract virtual MetadataCollection GetMetadata(IEnumerable`1<MetadataTag> tags, CancellationToken cancellationToken);
    public abstract virtual Task`1<MetadataCollection> GetMetadataAsync(IEnumerable`1<MetadataTag> tags, CancellationToken cancellationToken);
    public abstract virtual MetadataCollection GetMetadata(MetadataOptions options, IEnumerable`1<MetadataTag> tags, CancellationToken cancellationToken);
    public abstract virtual Task`1<MetadataCollection> GetMetadataAsync(MetadataOptions options, IEnumerable`1<MetadataTag> tags, CancellationToken cancellationToken);
    public abstract virtual void SetMetadata(MetadataCollection metadata, CancellationToken cancellationToken);
    public abstract virtual Task SetMetadataAsync(MetadataCollection metadata, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Alert(EventHandler`1<AlertEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Alert(EventHandler`1<AlertEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FolderCreated(EventHandler`1<FolderCreatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FolderCreated(EventHandler`1<FolderCreatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MetadataChanged(EventHandler`1<MetadataChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MetadataChanged(EventHandler`1<MetadataChangedEventArgs> value);
}
public interface MailKit.IMailTransport {
    public abstract virtual string Send(MimeMessage message, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<string> SendAsync(MimeMessage message, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual string Send(MimeMessage message, MailboxAddress sender, IEnumerable`1<MailboxAddress> recipients, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<string> SendAsync(MimeMessage message, MailboxAddress sender, IEnumerable`1<MailboxAddress> recipients, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual string Send(FormatOptions options, MimeMessage message, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<string> SendAsync(FormatOptions options, MimeMessage message, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual string Send(FormatOptions options, MimeMessage message, MailboxAddress sender, IEnumerable`1<MailboxAddress> recipients, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<string> SendAsync(FormatOptions options, MimeMessage message, MailboxAddress sender, IEnumerable`1<MailboxAddress> recipients, CancellationToken cancellationToken, ITransferProgress progress);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MessageSent(EventHandler`1<MessageSentEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MessageSent(EventHandler`1<MessageSentEventArgs> value);
}
public interface MailKit.IMessageSummary {
    public IMailFolder Folder { get; }
    public MessageSummaryItems Fields { get; }
    public BodyPart Body { get; }
    public BodyPartText TextBody { get; }
    public BodyPartText HtmlBody { get; }
    public IEnumerable`1<BodyPartBasic> BodyParts { get; }
    public IEnumerable`1<BodyPartBasic> Attachments { get; }
    public string PreviewText { get; }
    public Envelope Envelope { get; }
    public string NormalizedSubject { get; }
    public DateTimeOffset Date { get; }
    public bool IsReply { get; }
    public Nullable`1<MessageFlags> Flags { get; }
    public ISet`1<string> Keywords { get; }
    public IReadOnlyList`1<Annotation> Annotations { get; }
    public HeaderList Headers { get; }
    public Nullable`1<DateTimeOffset> InternalDate { get; }
    public Nullable`1<DateTimeOffset> SaveDate { get; }
    public Nullable`1<UInt32> Size { get; }
    public Nullable`1<ulong> ModSeq { get; }
    public MessageIdList References { get; }
    public string EmailId { get; }
    public string ThreadId { get; }
    public UniqueId UniqueId { get; }
    public int Index { get; }
    public Nullable`1<ulong> GMailMessageId { get; }
    public Nullable`1<ulong> GMailThreadId { get; }
    public IList`1<string> GMailLabels { get; }
    public abstract virtual IMailFolder get_Folder();
    public abstract virtual MessageSummaryItems get_Fields();
    public abstract virtual BodyPart get_Body();
    public abstract virtual BodyPartText get_TextBody();
    public abstract virtual BodyPartText get_HtmlBody();
    public abstract virtual IEnumerable`1<BodyPartBasic> get_BodyParts();
    public abstract virtual IEnumerable`1<BodyPartBasic> get_Attachments();
    public abstract virtual string get_PreviewText();
    public abstract virtual Envelope get_Envelope();
    public abstract virtual string get_NormalizedSubject();
    public abstract virtual DateTimeOffset get_Date();
    public abstract virtual bool get_IsReply();
    public abstract virtual Nullable`1<MessageFlags> get_Flags();
    public abstract virtual ISet`1<string> get_Keywords();
    public abstract virtual IReadOnlyList`1<Annotation> get_Annotations();
    public abstract virtual HeaderList get_Headers();
    public abstract virtual Nullable`1<DateTimeOffset> get_InternalDate();
    public abstract virtual Nullable`1<DateTimeOffset> get_SaveDate();
    public abstract virtual Nullable`1<UInt32> get_Size();
    public abstract virtual Nullable`1<ulong> get_ModSeq();
    public abstract virtual MessageIdList get_References();
    public abstract virtual string get_EmailId();
    public abstract virtual string get_ThreadId();
    public abstract virtual UniqueId get_UniqueId();
    public abstract virtual int get_Index();
    public abstract virtual Nullable`1<ulong> get_GMailMessageId();
    public abstract virtual Nullable`1<ulong> get_GMailThreadId();
    public abstract virtual IList`1<string> get_GMailLabels();
}
public interface MailKit.IProtocolLogger {
    public IAuthenticationSecretDetector AuthenticationSecretDetector { get; public set; }
    public abstract virtual IAuthenticationSecretDetector get_AuthenticationSecretDetector();
    public abstract virtual void set_AuthenticationSecretDetector(IAuthenticationSecretDetector value);
    public abstract virtual void LogConnect(Uri uri);
    public abstract virtual void LogClient(Byte[] buffer, int offset, int count);
    public abstract virtual void LogServer(Byte[] buffer, int offset, int count);
}
public interface MailKit.IReplaceRequest {
    public IMailFolder Destination { get; public set; }
    public abstract virtual IMailFolder get_Destination();
    public abstract virtual void set_Destination(IMailFolder value);
}
public interface MailKit.IStoreFlagsRequest {
    public StoreAction Action { get; }
    public MessageFlags Flags { get; public set; }
    public ISet`1<string> Keywords { get; }
    public bool Silent { get; public set; }
    public abstract virtual StoreAction get_Action();
    public abstract virtual MessageFlags get_Flags();
    public abstract virtual void set_Flags(MessageFlags value);
    public abstract virtual ISet`1<string> get_Keywords();
    public abstract virtual bool get_Silent();
    public abstract virtual void set_Silent(bool value);
}
public interface MailKit.IStoreLabelsRequest {
    public StoreAction Action { get; }
    public ISet`1<string> Labels { get; }
    public bool Silent { get; public set; }
    public abstract virtual StoreAction get_Action();
    public abstract virtual ISet`1<string> get_Labels();
    public abstract virtual bool get_Silent();
    public abstract virtual void set_Silent(bool value);
}
public interface MailKit.IStoreRequest {
    public Nullable`1<ulong> UnchangedSince { get; public set; }
    public abstract virtual Nullable`1<ulong> get_UnchangedSince();
    public abstract virtual void set_UnchangedSince(Nullable`1<ulong> value);
}
public interface MailKit.ITransferProgress {
    public abstract virtual void Report(long bytesTransferred, long totalSize);
    public abstract virtual void Report(long bytesTransferred);
}
public abstract class MailKit.MailFolder : object {
    protected static MessageFlags SettableFlags;
    private IMailFolder parent;
    [CompilerGeneratedAttribute]
private FolderAttributes <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private AnnotationAccess <AnnotationAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private AnnotationScope <AnnotationScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MaxAnnotationSize>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageFlags <PermanentFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <PermanentKeywords>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageFlags <AcceptedFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <AcceptedKeywords>k__BackingField;
    [CompilerGeneratedAttribute]
private char <DirectorySeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private FolderAccess <Access>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <HighestModSeq>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <UidValidity>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UniqueId> <UidNext>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <AppendLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FirstUnread>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Unread>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Recent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Opened;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Closed;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Deleted;
    [CompilerGeneratedAttribute]
private EventHandler`1<FolderRenamedEventArgs> Renamed;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Subscribed;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Unsubscribed;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs> MessageExpunged;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessagesVanishedEventArgs> MessagesVanished;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageFlagsChangedEventArgs> MessageFlagsChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageLabelsChangedEventArgs> MessageLabelsChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<AnnotationsChangedEventArgs> AnnotationsChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageSummaryFetchedEventArgs> MessageSummaryFetched;
    [CompilerGeneratedAttribute]
private EventHandler`1<MetadataChangedEventArgs> MetadataChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<ModSeqChangedEventArgs> ModSeqChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> HighestModSeqChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> UidNextChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> UidValidityChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> IdChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> SizeChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> CountChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> RecentChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> UnreadChanged;
    public object SyncRoot { get; }
    public IMailFolder ParentFolder { get; protected internal set; }
    public FolderAttributes Attributes { get; protected internal set; }
    public AnnotationAccess AnnotationAccess { get; protected internal set; }
    public AnnotationScope AnnotationScopes { get; protected internal set; }
    public UInt32 MaxAnnotationSize { get; protected internal set; }
    public MessageFlags PermanentFlags { get; protected set; }
    public ISet`1<string> PermanentKeywords { get; protected set; }
    public MessageFlags AcceptedFlags { get; protected set; }
    public ISet`1<string> AcceptedKeywords { get; protected set; }
    public char DirectorySeparator { get; protected set; }
    public FolderAccess Access { get; protected internal set; }
    public bool IsNamespace { get; protected set; }
    public string FullName { get; protected set; }
    public string Name { get; protected set; }
    public string Id { get; protected set; }
    public bool IsSubscribed { get; }
    public bool IsOpen { get; }
    public bool Exists { get; }
    public ulong HighestModSeq { get; protected set; }
    public UInt32 UidValidity { get; protected set; }
    public Nullable`1<UniqueId> UidNext { get; protected set; }
    public Nullable`1<UInt32> AppendLimit { get; protected set; }
    public Nullable`1<ulong> Size { get; protected set; }
    public int FirstUnread { get; protected set; }
    public int Unread { get; protected set; }
    public int Recent { get; protected set; }
    public int Count { get; protected set; }
    public HashSet`1<ThreadingAlgorithm> ThreadingAlgorithms { get; }
    private static MailFolder();
    public abstract virtual object get_SyncRoot();
    public sealed virtual IMailFolder get_ParentFolder();
    protected internal void set_ParentFolder(IMailFolder value);
    [CompilerGeneratedAttribute]
public sealed virtual FolderAttributes get_Attributes();
    [CompilerGeneratedAttribute]
protected internal void set_Attributes(FolderAttributes value);
    [CompilerGeneratedAttribute]
public sealed virtual AnnotationAccess get_AnnotationAccess();
    [CompilerGeneratedAttribute]
protected internal void set_AnnotationAccess(AnnotationAccess value);
    [CompilerGeneratedAttribute]
public sealed virtual AnnotationScope get_AnnotationScopes();
    [CompilerGeneratedAttribute]
protected internal void set_AnnotationScopes(AnnotationScope value);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_MaxAnnotationSize();
    [CompilerGeneratedAttribute]
protected internal void set_MaxAnnotationSize(UInt32 value);
    [CompilerGeneratedAttribute]
public sealed virtual MessageFlags get_PermanentFlags();
    [CompilerGeneratedAttribute]
protected void set_PermanentFlags(MessageFlags value);
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<string> get_PermanentKeywords();
    [CompilerGeneratedAttribute]
protected void set_PermanentKeywords(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual MessageFlags get_AcceptedFlags();
    [CompilerGeneratedAttribute]
protected void set_AcceptedFlags(MessageFlags value);
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<string> get_AcceptedKeywords();
    [CompilerGeneratedAttribute]
protected void set_AcceptedKeywords(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual char get_DirectorySeparator();
    [CompilerGeneratedAttribute]
protected void set_DirectorySeparator(char value);
    [CompilerGeneratedAttribute]
public sealed virtual FolderAccess get_Access();
    [CompilerGeneratedAttribute]
protected internal void set_Access(FolderAccess value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsNamespace();
    [CompilerGeneratedAttribute]
protected void set_IsNamespace(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FullName();
    [CompilerGeneratedAttribute]
protected void set_FullName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(string value);
    public sealed virtual bool get_IsSubscribed();
    public abstract virtual bool get_IsOpen();
    public sealed virtual bool get_Exists();
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_HighestModSeq();
    [CompilerGeneratedAttribute]
protected void set_HighestModSeq(ulong value);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_UidValidity();
    [CompilerGeneratedAttribute]
protected void set_UidValidity(UInt32 value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<UniqueId> get_UidNext();
    [CompilerGeneratedAttribute]
protected void set_UidNext(Nullable`1<UniqueId> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<UInt32> get_AppendLimit();
    [CompilerGeneratedAttribute]
protected void set_AppendLimit(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<ulong> get_Size();
    [CompilerGeneratedAttribute]
protected void set_Size(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_FirstUnread();
    [CompilerGeneratedAttribute]
protected void set_FirstUnread(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Unread();
    [CompilerGeneratedAttribute]
protected void set_Unread(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Recent();
    [CompilerGeneratedAttribute]
protected void set_Recent(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
protected void set_Count(int value);
    public abstract virtual HashSet`1<ThreadingAlgorithm> get_ThreadingAlgorithms();
    public abstract virtual bool Supports(FolderFeature feature);
    public abstract virtual FolderAccess Open(FolderAccess access, UInt32 uidValidity, ulong highestModSeq, IList`1<UniqueId> uids, CancellationToken cancellationToken);
    public abstract virtual Task`1<FolderAccess> OpenAsync(FolderAccess access, UInt32 uidValidity, ulong highestModSeq, IList`1<UniqueId> uids, CancellationToken cancellationToken);
    public abstract virtual FolderAccess Open(FolderAccess access, CancellationToken cancellationToken);
    public abstract virtual Task`1<FolderAccess> OpenAsync(FolderAccess access, CancellationToken cancellationToken);
    public abstract virtual void Close(bool expunge, CancellationToken cancellationToken);
    public abstract virtual Task CloseAsync(bool expunge, CancellationToken cancellationToken);
    public abstract virtual IMailFolder Create(string name, bool isMessageFolder, CancellationToken cancellationToken);
    public abstract virtual Task`1<IMailFolder> CreateAsync(string name, bool isMessageFolder, CancellationToken cancellationToken);
    public abstract virtual IMailFolder Create(string name, IEnumerable`1<SpecialFolder> specialUses, CancellationToken cancellationToken);
    public abstract virtual Task`1<IMailFolder> CreateAsync(string name, IEnumerable`1<SpecialFolder> specialUses, CancellationToken cancellationToken);
    public virtual IMailFolder Create(string name, SpecialFolder specialUse, CancellationToken cancellationToken);
    public virtual Task`1<IMailFolder> CreateAsync(string name, SpecialFolder specialUse, CancellationToken cancellationToken);
    public abstract virtual void Rename(IMailFolder parent, string name, CancellationToken cancellationToken);
    public abstract virtual Task RenameAsync(IMailFolder parent, string name, CancellationToken cancellationToken);
    public abstract virtual void Delete(CancellationToken cancellationToken);
    public abstract virtual Task DeleteAsync(CancellationToken cancellationToken);
    public abstract virtual void Subscribe(CancellationToken cancellationToken);
    public abstract virtual Task SubscribeAsync(CancellationToken cancellationToken);
    public abstract virtual void Unsubscribe(CancellationToken cancellationToken);
    public abstract virtual Task UnsubscribeAsync(CancellationToken cancellationToken);
    public abstract virtual IList`1<IMailFolder> GetSubfolders(StatusItems items, bool subscribedOnly, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<IMailFolder>> GetSubfoldersAsync(StatusItems items, bool subscribedOnly, CancellationToken cancellationToken);
    public virtual IList`1<IMailFolder> GetSubfolders(bool subscribedOnly, CancellationToken cancellationToken);
    public virtual Task`1<IList`1<IMailFolder>> GetSubfoldersAsync(bool subscribedOnly, CancellationToken cancellationToken);
    public abstract virtual IMailFolder GetSubfolder(string name, CancellationToken cancellationToken);
    public abstract virtual Task`1<IMailFolder> GetSubfolderAsync(string name, CancellationToken cancellationToken);
    public abstract virtual void Check(CancellationToken cancellationToken);
    public abstract virtual Task CheckAsync(CancellationToken cancellationToken);
    public abstract virtual void Status(StatusItems items, CancellationToken cancellationToken);
    public abstract virtual Task StatusAsync(StatusItems items, CancellationToken cancellationToken);
    public abstract virtual AccessControlList GetAccessControlList(CancellationToken cancellationToken);
    public abstract virtual Task`1<AccessControlList> GetAccessControlListAsync(CancellationToken cancellationToken);
    public abstract virtual AccessRights GetAccessRights(string name, CancellationToken cancellationToken);
    public abstract virtual Task`1<AccessRights> GetAccessRightsAsync(string name, CancellationToken cancellationToken);
    public abstract virtual AccessRights GetMyAccessRights(CancellationToken cancellationToken);
    public abstract virtual Task`1<AccessRights> GetMyAccessRightsAsync(CancellationToken cancellationToken);
    public abstract virtual void AddAccessRights(string name, AccessRights rights, CancellationToken cancellationToken);
    public abstract virtual Task AddAccessRightsAsync(string name, AccessRights rights, CancellationToken cancellationToken);
    public abstract virtual void RemoveAccessRights(string name, AccessRights rights, CancellationToken cancellationToken);
    public abstract virtual Task RemoveAccessRightsAsync(string name, AccessRights rights, CancellationToken cancellationToken);
    public abstract virtual void SetAccessRights(string name, AccessRights rights, CancellationToken cancellationToken);
    public abstract virtual Task SetAccessRightsAsync(string name, AccessRights rights, CancellationToken cancellationToken);
    public abstract virtual void RemoveAccess(string name, CancellationToken cancellationToken);
    public abstract virtual Task RemoveAccessAsync(string name, CancellationToken cancellationToken);
    public abstract virtual FolderQuota GetQuota(CancellationToken cancellationToken);
    public abstract virtual Task`1<FolderQuota> GetQuotaAsync(CancellationToken cancellationToken);
    public abstract virtual FolderQuota SetQuota(Nullable`1<UInt32> messageLimit, Nullable`1<UInt32> storageLimit, CancellationToken cancellationToken);
    public abstract virtual Task`1<FolderQuota> SetQuotaAsync(Nullable`1<UInt32> messageLimit, Nullable`1<UInt32> storageLimit, CancellationToken cancellationToken);
    public abstract virtual string GetMetadata(MetadataTag tag, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetMetadataAsync(MetadataTag tag, CancellationToken cancellationToken);
    public sealed virtual MetadataCollection GetMetadata(IEnumerable`1<MetadataTag> tags, CancellationToken cancellationToken);
    public virtual Task`1<MetadataCollection> GetMetadataAsync(IEnumerable`1<MetadataTag> tags, CancellationToken cancellationToken);
    public abstract virtual MetadataCollection GetMetadata(MetadataOptions options, IEnumerable`1<MetadataTag> tags, CancellationToken cancellationToken);
    public abstract virtual Task`1<MetadataCollection> GetMetadataAsync(MetadataOptions options, IEnumerable`1<MetadataTag> tags, CancellationToken cancellationToken);
    public abstract virtual void SetMetadata(MetadataCollection metadata, CancellationToken cancellationToken);
    public abstract virtual Task SetMetadataAsync(MetadataCollection metadata, CancellationToken cancellationToken);
    public abstract virtual void Expunge(CancellationToken cancellationToken);
    public abstract virtual Task ExpungeAsync(CancellationToken cancellationToken);
    public abstract virtual void Expunge(IList`1<UniqueId> uids, CancellationToken cancellationToken);
    public abstract virtual Task ExpungeAsync(IList`1<UniqueId> uids, CancellationToken cancellationToken);
    public virtual Nullable`1<UniqueId> Append(IAppendRequest request, CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<UniqueId>> AppendAsync(IAppendRequest request, CancellationToken cancellationToken);
    public abstract virtual Nullable`1<UniqueId> Append(FormatOptions options, IAppendRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<UniqueId>> AppendAsync(FormatOptions options, IAppendRequest request, CancellationToken cancellationToken);
    public virtual IList`1<UniqueId> Append(IList`1<IAppendRequest> requests, CancellationToken cancellationToken);
    public virtual Task`1<IList`1<UniqueId>> AppendAsync(IList`1<IAppendRequest> requests, CancellationToken cancellationToken);
    public abstract virtual IList`1<UniqueId> Append(FormatOptions options, IList`1<IAppendRequest> requests, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<UniqueId>> AppendAsync(FormatOptions options, IList`1<IAppendRequest> requests, CancellationToken cancellationToken);
    public virtual Nullable`1<UniqueId> Replace(UniqueId uid, IReplaceRequest request, CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<UniqueId>> ReplaceAsync(UniqueId uid, IReplaceRequest request, CancellationToken cancellationToken);
    public abstract virtual Nullable`1<UniqueId> Replace(FormatOptions options, UniqueId uid, IReplaceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<UniqueId>> ReplaceAsync(FormatOptions options, UniqueId uid, IReplaceRequest request, CancellationToken cancellationToken);
    public virtual Nullable`1<UniqueId> Replace(int index, IReplaceRequest request, CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<UniqueId>> ReplaceAsync(int index, IReplaceRequest request, CancellationToken cancellationToken);
    public abstract virtual Nullable`1<UniqueId> Replace(FormatOptions options, int index, IReplaceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<UniqueId>> ReplaceAsync(FormatOptions options, int index, IReplaceRequest request, CancellationToken cancellationToken);
    public virtual Nullable`1<UniqueId> CopyTo(UniqueId uid, IMailFolder destination, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.MailFolder/<CopyToAsync>d__186")]
public virtual Task`1<Nullable`1<UniqueId>> CopyToAsync(UniqueId uid, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual UniqueIdMap CopyTo(IList`1<UniqueId> uids, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual Task`1<UniqueIdMap> CopyToAsync(IList`1<UniqueId> uids, IMailFolder destination, CancellationToken cancellationToken);
    public virtual Nullable`1<UniqueId> MoveTo(UniqueId uid, IMailFolder destination, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.MailFolder/<MoveToAsync>d__190")]
public virtual Task`1<Nullable`1<UniqueId>> MoveToAsync(UniqueId uid, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual UniqueIdMap MoveTo(IList`1<UniqueId> uids, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual Task`1<UniqueIdMap> MoveToAsync(IList`1<UniqueId> uids, IMailFolder destination, CancellationToken cancellationToken);
    public virtual void CopyTo(int index, IMailFolder destination, CancellationToken cancellationToken);
    public virtual Task CopyToAsync(int index, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual void CopyTo(IList`1<int> indexes, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual Task CopyToAsync(IList`1<int> indexes, IMailFolder destination, CancellationToken cancellationToken);
    public virtual void MoveTo(int index, IMailFolder destination, CancellationToken cancellationToken);
    public virtual Task MoveToAsync(int index, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual void MoveTo(IList`1<int> indexes, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual Task MoveToAsync(IList`1<int> indexes, IMailFolder destination, CancellationToken cancellationToken);
    public abstract virtual IList`1<IMessageSummary> Fetch(IList`1<UniqueId> uids, IFetchRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<IMessageSummary>> FetchAsync(IList`1<UniqueId> uids, IFetchRequest request, CancellationToken cancellationToken);
    public abstract virtual IList`1<IMessageSummary> Fetch(IList`1<int> indexes, IFetchRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<IMessageSummary>> FetchAsync(IList`1<int> indexes, IFetchRequest request, CancellationToken cancellationToken);
    public abstract virtual IList`1<IMessageSummary> Fetch(int min, int max, IFetchRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<IMessageSummary>> FetchAsync(int min, int max, IFetchRequest request, CancellationToken cancellationToken);
    public abstract virtual HeaderList GetHeaders(UniqueId uid, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<HeaderList> GetHeadersAsync(UniqueId uid, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual HeaderList GetHeaders(UniqueId uid, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<HeaderList> GetHeadersAsync(UniqueId uid, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual HeaderList GetHeaders(int index, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<HeaderList> GetHeadersAsync(int index, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual HeaderList GetHeaders(int index, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<HeaderList> GetHeadersAsync(int index, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual MimeMessage GetMessage(UniqueId uid, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<MimeMessage> GetMessageAsync(UniqueId uid, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual MimeMessage GetMessage(int index, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<MimeMessage> GetMessageAsync(int index, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual MimeEntity GetBodyPart(UniqueId uid, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<MimeEntity> GetBodyPartAsync(UniqueId uid, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual MimeEntity GetBodyPart(int index, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<MimeEntity> GetBodyPartAsync(int index, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Stream GetStream(UniqueId uid, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Task`1<Stream> GetStreamAsync(UniqueId uid, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Stream GetStream(int index, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Task`1<Stream> GetStreamAsync(int index, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Stream GetStream(UniqueId uid, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<Stream> GetStreamAsync(UniqueId uid, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Stream GetStream(int index, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<Stream> GetStreamAsync(int index, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Stream GetStream(UniqueId uid, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Task`1<Stream> GetStreamAsync(UniqueId uid, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Stream GetStream(int index, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Task`1<Stream> GetStreamAsync(int index, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Stream GetStream(UniqueId uid, BodyPart part, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Task`1<Stream> GetStreamAsync(UniqueId uid, BodyPart part, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Stream GetStream(int index, BodyPart part, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Task`1<Stream> GetStreamAsync(int index, BodyPart part, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Stream GetStream(UniqueId uid, string section, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<Stream> GetStreamAsync(UniqueId uid, string section, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Stream GetStream(UniqueId uid, string section, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<Stream> GetStreamAsync(UniqueId uid, string section, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Stream GetStream(int index, string section, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<Stream> GetStreamAsync(int index, string section, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Stream GetStream(int index, string section, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<Stream> GetStreamAsync(int index, string section, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual bool Store(UniqueId uid, IStoreFlagsRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.MailFolder/<StoreAsync>d__248")]
public virtual Task`1<bool> StoreAsync(UniqueId uid, IStoreFlagsRequest request, CancellationToken cancellationToken);
    public abstract virtual IList`1<UniqueId> Store(IList`1<UniqueId> uids, IStoreFlagsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<UniqueId>> StoreAsync(IList`1<UniqueId> uids, IStoreFlagsRequest request, CancellationToken cancellationToken);
    public virtual bool Store(int index, IStoreFlagsRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.MailFolder/<StoreAsync>d__252")]
public virtual Task`1<bool> StoreAsync(int index, IStoreFlagsRequest request, CancellationToken cancellationToken);
    public abstract virtual IList`1<int> Store(IList`1<int> indexes, IStoreFlagsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<int>> StoreAsync(IList`1<int> indexes, IStoreFlagsRequest request, CancellationToken cancellationToken);
    public virtual bool Store(UniqueId uid, IStoreLabelsRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.MailFolder/<StoreAsync>d__256")]
public virtual Task`1<bool> StoreAsync(UniqueId uid, IStoreLabelsRequest request, CancellationToken cancellationToken);
    public abstract virtual IList`1<UniqueId> Store(IList`1<UniqueId> uids, IStoreLabelsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<UniqueId>> StoreAsync(IList`1<UniqueId> uids, IStoreLabelsRequest request, CancellationToken cancellationToken);
    public virtual bool Store(int index, IStoreLabelsRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.MailFolder/<StoreAsync>d__260")]
public virtual Task`1<bool> StoreAsync(int index, IStoreLabelsRequest request, CancellationToken cancellationToken);
    public abstract virtual IList`1<int> Store(IList`1<int> indexes, IStoreLabelsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<int>> StoreAsync(IList`1<int> indexes, IStoreLabelsRequest request, CancellationToken cancellationToken);
    public virtual void Store(UniqueId uid, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public virtual Task StoreAsync(UniqueId uid, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public abstract virtual void Store(IList`1<UniqueId> uids, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public abstract virtual Task StoreAsync(IList`1<UniqueId> uids, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public abstract virtual IList`1<UniqueId> Store(IList`1<UniqueId> uids, ulong modseq, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<UniqueId>> StoreAsync(IList`1<UniqueId> uids, ulong modseq, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public virtual void Store(int index, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public virtual Task StoreAsync(int index, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public abstract virtual void Store(IList`1<int> indexes, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public abstract virtual Task StoreAsync(IList`1<int> indexes, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public abstract virtual IList`1<int> Store(IList`1<int> indexes, ulong modseq, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<int>> StoreAsync(IList`1<int> indexes, ulong modseq, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public virtual IList`1<UniqueId> Search(SearchQuery query, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.MailFolder/<SearchAsync>d__276")]
public virtual Task`1<IList`1<UniqueId>> SearchAsync(SearchQuery query, CancellationToken cancellationToken);
    public virtual IList`1<UniqueId> Search(IList`1<UniqueId> uids, SearchQuery query, CancellationToken cancellationToken);
    public virtual Task`1<IList`1<UniqueId>> SearchAsync(IList`1<UniqueId> uids, SearchQuery query, CancellationToken cancellationToken);
    public abstract virtual SearchResults Search(SearchOptions options, SearchQuery query, CancellationToken cancellationToken);
    public abstract virtual Task`1<SearchResults> SearchAsync(SearchOptions options, SearchQuery query, CancellationToken cancellationToken);
    public virtual SearchResults Search(SearchOptions options, IList`1<UniqueId> uids, SearchQuery query, CancellationToken cancellationToken);
    public virtual Task`1<SearchResults> SearchAsync(SearchOptions options, IList`1<UniqueId> uids, SearchQuery query, CancellationToken cancellationToken);
    public virtual IList`1<UniqueId> Sort(SearchQuery query, IList`1<OrderBy> orderBy, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.MailFolder/<SortAsync>d__284")]
public virtual Task`1<IList`1<UniqueId>> SortAsync(SearchQuery query, IList`1<OrderBy> orderBy, CancellationToken cancellationToken);
    public virtual IList`1<UniqueId> Sort(IList`1<UniqueId> uids, SearchQuery query, IList`1<OrderBy> orderBy, CancellationToken cancellationToken);
    public virtual Task`1<IList`1<UniqueId>> SortAsync(IList`1<UniqueId> uids, SearchQuery query, IList`1<OrderBy> orderBy, CancellationToken cancellationToken);
    public abstract virtual SearchResults Sort(SearchOptions options, SearchQuery query, IList`1<OrderBy> orderBy, CancellationToken cancellationToken);
    public abstract virtual Task`1<SearchResults> SortAsync(SearchOptions options, SearchQuery query, IList`1<OrderBy> orderBy, CancellationToken cancellationToken);
    public virtual SearchResults Sort(SearchOptions options, IList`1<UniqueId> uids, SearchQuery query, IList`1<OrderBy> orderBy, CancellationToken cancellationToken);
    public virtual Task`1<SearchResults> SortAsync(SearchOptions options, IList`1<UniqueId> uids, SearchQuery query, IList`1<OrderBy> orderBy, CancellationToken cancellationToken);
    public abstract virtual IList`1<MessageThread> Thread(ThreadingAlgorithm algorithm, SearchQuery query, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<MessageThread>> ThreadAsync(ThreadingAlgorithm algorithm, SearchQuery query, CancellationToken cancellationToken);
    public abstract virtual IList`1<MessageThread> Thread(IList`1<UniqueId> uids, ThreadingAlgorithm algorithm, SearchQuery query, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<MessageThread>> ThreadAsync(IList`1<UniqueId> uids, ThreadingAlgorithm algorithm, SearchQuery query, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Opened(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Opened(EventHandler`1<EventArgs> value);
    protected virtual void OnOpened();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Closed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Closed(EventHandler`1<EventArgs> value);
    protected internal virtual void OnClosed();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Deleted(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Deleted(EventHandler`1<EventArgs> value);
    protected virtual void OnDeleted();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Renamed(EventHandler`1<FolderRenamedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Renamed(EventHandler`1<FolderRenamedEventArgs> value);
    protected virtual void OnRenamed(string oldName, string newName);
    protected virtual void OnParentFolderRenamed();
    private void OnParentFolderRenamed(object sender, FolderRenamedEventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Subscribed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Subscribed(EventHandler`1<EventArgs> value);
    protected virtual void OnSubscribed();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Unsubscribed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Unsubscribed(EventHandler`1<EventArgs> value);
    protected virtual void OnUnsubscribed();
    [CompilerGeneratedAttribute]
public sealed virtual void add_MessageExpunged(EventHandler`1<MessageEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MessageExpunged(EventHandler`1<MessageEventArgs> value);
    protected virtual void OnMessageExpunged(MessageEventArgs args);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MessagesVanished(EventHandler`1<MessagesVanishedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MessagesVanished(EventHandler`1<MessagesVanishedEventArgs> value);
    protected virtual void OnMessagesVanished(MessagesVanishedEventArgs args);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MessageFlagsChanged(EventHandler`1<MessageFlagsChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MessageFlagsChanged(EventHandler`1<MessageFlagsChangedEventArgs> value);
    protected virtual void OnMessageFlagsChanged(MessageFlagsChangedEventArgs args);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MessageLabelsChanged(EventHandler`1<MessageLabelsChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MessageLabelsChanged(EventHandler`1<MessageLabelsChangedEventArgs> value);
    protected virtual void OnMessageLabelsChanged(MessageLabelsChangedEventArgs args);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AnnotationsChanged(EventHandler`1<AnnotationsChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AnnotationsChanged(EventHandler`1<AnnotationsChangedEventArgs> value);
    protected virtual void OnAnnotationsChanged(AnnotationsChangedEventArgs args);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MessageSummaryFetched(EventHandler`1<MessageSummaryFetchedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MessageSummaryFetched(EventHandler`1<MessageSummaryFetchedEventArgs> value);
    protected virtual void OnMessageSummaryFetched(IMessageSummary message);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MetadataChanged(EventHandler`1<MetadataChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MetadataChanged(EventHandler`1<MetadataChangedEventArgs> value);
    protected internal virtual void OnMetadataChanged(Metadata metadata);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ModSeqChanged(EventHandler`1<ModSeqChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ModSeqChanged(EventHandler`1<ModSeqChangedEventArgs> value);
    protected virtual void OnModSeqChanged(ModSeqChangedEventArgs args);
    [CompilerGeneratedAttribute]
public sealed virtual void add_HighestModSeqChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_HighestModSeqChanged(EventHandler`1<EventArgs> value);
    protected virtual void OnHighestModSeqChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void add_UidNextChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_UidNextChanged(EventHandler`1<EventArgs> value);
    protected virtual void OnUidNextChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void add_UidValidityChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_UidValidityChanged(EventHandler`1<EventArgs> value);
    protected virtual void OnUidValidityChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void add_IdChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_IdChanged(EventHandler`1<EventArgs> value);
    protected virtual void OnIdChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void add_SizeChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SizeChanged(EventHandler`1<EventArgs> value);
    protected virtual void OnSizeChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void add_CountChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CountChanged(EventHandler`1<EventArgs> value);
    protected virtual void OnCountChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void add_RecentChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RecentChanged(EventHandler`1<EventArgs> value);
    protected virtual void OnRecentChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void add_UnreadChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_UnreadChanged(EventHandler`1<EventArgs> value);
    protected virtual void OnUnreadChanged();
    public abstract virtual IEnumerator`1<MimeMessage> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
public abstract class MailKit.MailService : object {
    private static SslProtocols DefaultSslProtocols;
    [CompilerGeneratedAttribute]
private IProtocolLogger <ProtocolLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private SslProtocols <SslProtocols>k__BackingField;
    [CompilerGeneratedAttribute]
private X509CertificateCollection <ClientCertificates>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckCertificateRevocation>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <ServerCertificateValidationCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private IPEndPoint <LocalEndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IProxyClient <ProxyClient>k__BackingField;
    private static string AppleCertificateIssuer;
    private static string GMailCertificateIssuer;
    private static string OutlookCertificateIssuer;
    private static string YahooCertificateIssuer;
    private static string GmxDotComCertificateIssuer;
    private static string GmxDotNetCertificateIssuer;
    [CompilerGeneratedAttribute]
private EventHandler`1<ConnectedEventArgs> Connected;
    [CompilerGeneratedAttribute]
private EventHandler`1<DisconnectedEventArgs> Disconnected;
    [CompilerGeneratedAttribute]
private EventHandler`1<AuthenticatedEventArgs> Authenticated;
    public object SyncRoot { get; }
    protected string Protocol { get; }
    public IProtocolLogger ProtocolLogger { get; private set; }
    public SslProtocols SslProtocols { get; public set; }
    public X509CertificateCollection ClientCertificates { get; public set; }
    public bool CheckCertificateRevocation { get; public set; }
    public RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; public set; }
    public IPEndPoint LocalEndPoint { get; public set; }
    public IProxyClient ProxyClient { get; public set; }
    public HashSet`1<string> AuthenticationMechanisms { get; }
    public bool IsConnected { get; }
    public bool IsSecure { get; }
    public bool IsEncrypted { get; }
    public bool IsSigned { get; }
    public SslProtocols SslProtocol { get; }
    public Nullable`1<CipherAlgorithmType> SslCipherAlgorithm { get; }
    public Nullable`1<int> SslCipherStrength { get; }
    public Nullable`1<HashAlgorithmType> SslHashAlgorithm { get; }
    public Nullable`1<int> SslHashStrength { get; }
    public Nullable`1<ExchangeAlgorithmType> SslKeyExchangeAlgorithm { get; }
    public Nullable`1<int> SslKeyExchangeStrength { get; }
    public bool IsAuthenticated { get; }
    public int Timeout { get; public set; }
    protected MailService(IProtocolLogger protocolLogger);
    protected virtual override void Finalize();
    public abstract virtual object get_SyncRoot();
    protected abstract virtual string get_Protocol();
    [CompilerGeneratedAttribute]
public IProtocolLogger get_ProtocolLogger();
    [CompilerGeneratedAttribute]
private void set_ProtocolLogger(IProtocolLogger value);
    [CompilerGeneratedAttribute]
public sealed virtual SslProtocols get_SslProtocols();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SslProtocols(SslProtocols value);
    [CompilerGeneratedAttribute]
public sealed virtual X509CertificateCollection get_ClientCertificates();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClientCertificates(X509CertificateCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CheckCertificateRevocation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CheckCertificateRevocation(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual RemoteCertificateValidationCallback get_ServerCertificateValidationCallback();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ServerCertificateValidationCallback(RemoteCertificateValidationCallback value);
    [CompilerGeneratedAttribute]
public sealed virtual IPEndPoint get_LocalEndPoint();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LocalEndPoint(IPEndPoint value);
    [CompilerGeneratedAttribute]
public sealed virtual IProxyClient get_ProxyClient();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ProxyClient(IProxyClient value);
    public abstract virtual HashSet`1<string> get_AuthenticationMechanisms();
    public abstract virtual bool get_IsConnected();
    public abstract virtual bool get_IsSecure();
    public abstract virtual bool get_IsEncrypted();
    public abstract virtual bool get_IsSigned();
    public abstract virtual SslProtocols get_SslProtocol();
    public abstract virtual Nullable`1<CipherAlgorithmType> get_SslCipherAlgorithm();
    public abstract virtual Nullable`1<int> get_SslCipherStrength();
    public abstract virtual Nullable`1<HashAlgorithmType> get_SslHashAlgorithm();
    public abstract virtual Nullable`1<int> get_SslHashStrength();
    public abstract virtual Nullable`1<ExchangeAlgorithmType> get_SslKeyExchangeAlgorithm();
    public abstract virtual Nullable`1<int> get_SslKeyExchangeStrength();
    public abstract virtual bool get_IsAuthenticated();
    public abstract virtual int get_Timeout();
    public abstract virtual void set_Timeout(int value);
    internal static bool IsKnownMailServerCertificate(X509Certificate2 certificate);
    private static bool IsUntrustedRoot(X509Chain chain);
    protected static bool DefaultServerCertificateValidationCallback(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    internal Stream ConnectNetwork(string host, int port, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.MailService/<ConnectNetworkAsync>d__75")]
internal Task`1<Stream> ConnectNetworkAsync(string host, int port, CancellationToken cancellationToken);
    public abstract virtual void Connect(string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    public abstract virtual Task ConnectAsync(string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    public abstract virtual void Connect(Socket socket, string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    public abstract virtual Task ConnectAsync(Socket socket, string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    public abstract virtual void Connect(Stream stream, string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    public abstract virtual Task ConnectAsync(Stream stream, string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    private static bool IsAny(string value, String[] anyOf);
    internal SecureSocketOptions GetSecureSocketOptions(Uri uri);
    public void Connect(Uri uri, CancellationToken cancellationToken);
    public Task ConnectAsync(Uri uri, CancellationToken cancellationToken);
    public sealed virtual void Connect(string host, int port, bool useSsl, CancellationToken cancellationToken);
    public sealed virtual Task ConnectAsync(string host, int port, bool useSsl, CancellationToken cancellationToken);
    public abstract virtual void Authenticate(Encoding encoding, ICredentials credentials, CancellationToken cancellationToken);
    public abstract virtual Task AuthenticateAsync(Encoding encoding, ICredentials credentials, CancellationToken cancellationToken);
    public sealed virtual void Authenticate(ICredentials credentials, CancellationToken cancellationToken);
    public sealed virtual Task AuthenticateAsync(ICredentials credentials, CancellationToken cancellationToken);
    public sealed virtual void Authenticate(Encoding encoding, string userName, string password, CancellationToken cancellationToken);
    public sealed virtual Task AuthenticateAsync(Encoding encoding, string userName, string password, CancellationToken cancellationToken);
    public sealed virtual void Authenticate(string userName, string password, CancellationToken cancellationToken);
    public sealed virtual Task AuthenticateAsync(string userName, string password, CancellationToken cancellationToken);
    public abstract virtual void Authenticate(SaslMechanism mechanism, CancellationToken cancellationToken);
    public abstract virtual Task AuthenticateAsync(SaslMechanism mechanism, CancellationToken cancellationToken);
    public abstract virtual void Disconnect(bool quit, CancellationToken cancellationToken);
    public abstract virtual Task DisconnectAsync(bool quit, CancellationToken cancellationToken);
    public abstract virtual void NoOp(CancellationToken cancellationToken);
    public abstract virtual Task NoOpAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Connected(EventHandler`1<ConnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Connected(EventHandler`1<ConnectedEventArgs> value);
    protected virtual void OnConnected(string host, int port, SecureSocketOptions options);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Disconnected(EventHandler`1<DisconnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Disconnected(EventHandler`1<DisconnectedEventArgs> value);
    protected virtual void OnDisconnected(string host, int port, SecureSocketOptions options, bool requested);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Authenticated(EventHandler`1<AuthenticatedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Authenticated(EventHandler`1<AuthenticatedEventArgs> value);
    protected virtual void OnAuthenticated(string message);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public abstract class MailKit.MailSpool : MailService {
    public int Count { get; }
    public bool SupportsUids { get; }
    protected MailSpool(IProtocolLogger protocolLogger);
    public abstract virtual int get_Count();
    public abstract virtual bool get_SupportsUids();
    public abstract virtual int GetMessageCount(CancellationToken cancellationToken);
    public abstract virtual Task`1<int> GetMessageCountAsync(CancellationToken cancellationToken);
    public abstract virtual string GetMessageUid(int index, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetMessageUidAsync(int index, CancellationToken cancellationToken);
    public abstract virtual IList`1<string> GetMessageUids(CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<string>> GetMessageUidsAsync(CancellationToken cancellationToken);
    public abstract virtual int GetMessageSize(int index, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> GetMessageSizeAsync(int index, CancellationToken cancellationToken);
    public abstract virtual IList`1<int> GetMessageSizes(CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<int>> GetMessageSizesAsync(CancellationToken cancellationToken);
    public abstract virtual HeaderList GetMessageHeaders(int index, CancellationToken cancellationToken);
    public abstract virtual Task`1<HeaderList> GetMessageHeadersAsync(int index, CancellationToken cancellationToken);
    public abstract virtual IList`1<HeaderList> GetMessageHeaders(IList`1<int> indexes, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<HeaderList>> GetMessageHeadersAsync(IList`1<int> indexes, CancellationToken cancellationToken);
    public abstract virtual IList`1<HeaderList> GetMessageHeaders(int startIndex, int count, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<HeaderList>> GetMessageHeadersAsync(int startIndex, int count, CancellationToken cancellationToken);
    public abstract virtual MimeMessage GetMessage(int index, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<MimeMessage> GetMessageAsync(int index, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual IList`1<MimeMessage> GetMessages(IList`1<int> indexes, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<IList`1<MimeMessage>> GetMessagesAsync(IList`1<int> indexes, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual IList`1<MimeMessage> GetMessages(int startIndex, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<IList`1<MimeMessage>> GetMessagesAsync(int startIndex, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Stream GetStream(int index, bool headersOnly, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<Stream> GetStreamAsync(int index, bool headersOnly, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual IList`1<Stream> GetStreams(IList`1<int> indexes, bool headersOnly, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<IList`1<Stream>> GetStreamsAsync(IList`1<int> indexes, bool headersOnly, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual IList`1<Stream> GetStreams(int startIndex, int count, bool headersOnly, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<IList`1<Stream>> GetStreamsAsync(int startIndex, int count, bool headersOnly, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual void DeleteMessage(int index, CancellationToken cancellationToken);
    public abstract virtual Task DeleteMessageAsync(int index, CancellationToken cancellationToken);
    public abstract virtual void DeleteMessages(IList`1<int> indexes, CancellationToken cancellationToken);
    public abstract virtual Task DeleteMessagesAsync(IList`1<int> indexes, CancellationToken cancellationToken);
    public abstract virtual void DeleteMessages(int startIndex, int count, CancellationToken cancellationToken);
    public abstract virtual Task DeleteMessagesAsync(int startIndex, int count, CancellationToken cancellationToken);
    public abstract virtual void DeleteAllMessages(CancellationToken cancellationToken);
    public abstract virtual Task DeleteAllMessagesAsync(CancellationToken cancellationToken);
    public abstract virtual void Reset(CancellationToken cancellationToken);
    public abstract virtual Task ResetAsync(CancellationToken cancellationToken);
    public abstract virtual IEnumerator`1<MimeMessage> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public abstract class MailKit.MailStore : MailService {
    [CompilerGeneratedAttribute]
private EventHandler`1<AlertEventArgs> Alert;
    [CompilerGeneratedAttribute]
private EventHandler`1<FolderCreatedEventArgs> FolderCreated;
    [CompilerGeneratedAttribute]
private EventHandler`1<MetadataChangedEventArgs> MetadataChanged;
    public FolderNamespaceCollection PersonalNamespaces { get; }
    public FolderNamespaceCollection SharedNamespaces { get; }
    public FolderNamespaceCollection OtherNamespaces { get; }
    public bool SupportsQuotas { get; }
    public HashSet`1<ThreadingAlgorithm> ThreadingAlgorithms { get; }
    public IMailFolder Inbox { get; }
    protected MailStore(IProtocolLogger protocolLogger);
    public abstract virtual FolderNamespaceCollection get_PersonalNamespaces();
    public abstract virtual FolderNamespaceCollection get_SharedNamespaces();
    public abstract virtual FolderNamespaceCollection get_OtherNamespaces();
    public abstract virtual bool get_SupportsQuotas();
    public abstract virtual HashSet`1<ThreadingAlgorithm> get_ThreadingAlgorithms();
    public abstract virtual IMailFolder get_Inbox();
    public abstract virtual void EnableQuickResync(CancellationToken cancellationToken);
    public abstract virtual Task EnableQuickResyncAsync(CancellationToken cancellationToken);
    public abstract virtual IMailFolder GetFolder(SpecialFolder folder);
    public abstract virtual IMailFolder GetFolder(FolderNamespace namespace);
    public virtual IList`1<IMailFolder> GetFolders(FolderNamespace namespace, bool subscribedOnly, CancellationToken cancellationToken);
    public virtual Task`1<IList`1<IMailFolder>> GetFoldersAsync(FolderNamespace namespace, bool subscribedOnly, CancellationToken cancellationToken);
    public abstract virtual IList`1<IMailFolder> GetFolders(FolderNamespace namespace, StatusItems items, bool subscribedOnly, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<IMailFolder>> GetFoldersAsync(FolderNamespace namespace, StatusItems items, bool subscribedOnly, CancellationToken cancellationToken);
    public abstract virtual IMailFolder GetFolder(string path, CancellationToken cancellationToken);
    public abstract virtual Task`1<IMailFolder> GetFolderAsync(string path, CancellationToken cancellationToken);
    public abstract virtual string GetMetadata(MetadataTag tag, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetMetadataAsync(MetadataTag tag, CancellationToken cancellationToken);
    public virtual MetadataCollection GetMetadata(IEnumerable`1<MetadataTag> tags, CancellationToken cancellationToken);
    public virtual Task`1<MetadataCollection> GetMetadataAsync(IEnumerable`1<MetadataTag> tags, CancellationToken cancellationToken);
    public abstract virtual MetadataCollection GetMetadata(MetadataOptions options, IEnumerable`1<MetadataTag> tags, CancellationToken cancellationToken);
    public abstract virtual Task`1<MetadataCollection> GetMetadataAsync(MetadataOptions options, IEnumerable`1<MetadataTag> tags, CancellationToken cancellationToken);
    public abstract virtual void SetMetadata(MetadataCollection metadata, CancellationToken cancellationToken);
    public abstract virtual Task SetMetadataAsync(MetadataCollection metadata, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Alert(EventHandler`1<AlertEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Alert(EventHandler`1<AlertEventArgs> value);
    protected virtual void OnAlert(string message);
    [CompilerGeneratedAttribute]
public sealed virtual void add_FolderCreated(EventHandler`1<FolderCreatedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FolderCreated(EventHandler`1<FolderCreatedEventArgs> value);
    protected virtual void OnFolderCreated(IMailFolder folder);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MetadataChanged(EventHandler`1<MetadataChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MetadataChanged(EventHandler`1<MetadataChangedEventArgs> value);
    protected virtual void OnMetadataChanged(Metadata metadata);
}
public abstract class MailKit.MailTransport : MailService {
    private static FormatOptions DefaultOptions;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageSentEventArgs> MessageSent;
    private static MailTransport();
    protected MailTransport(IProtocolLogger protocolLogger);
    public virtual string Send(MimeMessage message, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Task`1<string> SendAsync(MimeMessage message, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual string Send(MimeMessage message, MailboxAddress sender, IEnumerable`1<MailboxAddress> recipients, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Task`1<string> SendAsync(MimeMessage message, MailboxAddress sender, IEnumerable`1<MailboxAddress> recipients, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual string Send(FormatOptions options, MimeMessage message, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<string> SendAsync(FormatOptions options, MimeMessage message, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual string Send(FormatOptions options, MimeMessage message, MailboxAddress sender, IEnumerable`1<MailboxAddress> recipients, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<string> SendAsync(FormatOptions options, MimeMessage message, MailboxAddress sender, IEnumerable`1<MailboxAddress> recipients, CancellationToken cancellationToken, ITransferProgress progress);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MessageSent(EventHandler`1<MessageSentEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MessageSent(EventHandler`1<MessageSentEventArgs> value);
    protected virtual void OnMessageSent(MessageSentEventArgs e);
}
public class MailKit.MessageEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UniqueId> <UniqueId>k__BackingField;
    public int Index { get; private set; }
    public Nullable`1<UniqueId> UniqueId { get; internal set; }
    public MessageEventArgs(int index);
    public MessageEventArgs(int index, UniqueId uid);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
private void set_Index(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<UniqueId> get_UniqueId();
    [CompilerGeneratedAttribute]
internal void set_UniqueId(Nullable`1<UniqueId> value);
}
[FlagsAttribute]
public enum MailKit.MessageFlags : Enum {
    public int value__;
    public static MessageFlags None;
    public static MessageFlags Seen;
    public static MessageFlags Answered;
    public static MessageFlags Flagged;
    public static MessageFlags Deleted;
    public static MessageFlags Draft;
    public static MessageFlags Recent;
    public static MessageFlags UserDefined;
}
public class MailKit.MessageFlagsChangedEventArgs : MessageEventArgs {
    [CompilerGeneratedAttribute]
private MessageFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Keywords>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <ModSeq>k__BackingField;
    public MessageFlags Flags { get; internal set; }
    public ISet`1<string> Keywords { get; private set; }
    public Nullable`1<ulong> ModSeq { get; internal set; }
    internal MessageFlagsChangedEventArgs(int index);
    public MessageFlagsChangedEventArgs(int index, MessageFlags flags);
    public MessageFlagsChangedEventArgs(int index, MessageFlags flags, ISet`1<string> keywords);
    public MessageFlagsChangedEventArgs(int index, MessageFlags flags, ulong modseq);
    public MessageFlagsChangedEventArgs(int index, MessageFlags flags, ISet`1<string> keywords, ulong modseq);
    public MessageFlagsChangedEventArgs(int index, UniqueId uid, MessageFlags flags);
    public MessageFlagsChangedEventArgs(int index, UniqueId uid, MessageFlags flags, ISet`1<string> keywords);
    public MessageFlagsChangedEventArgs(int index, UniqueId uid, MessageFlags flags, ulong modseq);
    public MessageFlagsChangedEventArgs(int index, UniqueId uid, MessageFlags flags, ISet`1<string> keywords, ulong modseq);
    [CompilerGeneratedAttribute]
public MessageFlags get_Flags();
    [CompilerGeneratedAttribute]
internal void set_Flags(MessageFlags value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_Keywords();
    [CompilerGeneratedAttribute]
private void set_Keywords(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_ModSeq();
    [CompilerGeneratedAttribute]
internal void set_ModSeq(Nullable`1<ulong> value);
}
public class MailKit.MessageLabelsChangedEventArgs : MessageEventArgs {
    [CompilerGeneratedAttribute]
private IList`1<string> <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <ModSeq>k__BackingField;
    public IList`1<string> Labels { get; internal set; }
    public Nullable`1<ulong> ModSeq { get; internal set; }
    internal MessageLabelsChangedEventArgs(int index);
    public MessageLabelsChangedEventArgs(int index, IList`1<string> labels);
    public MessageLabelsChangedEventArgs(int index, IList`1<string> labels, ulong modseq);
    public MessageLabelsChangedEventArgs(int index, UniqueId uid, IList`1<string> labels);
    public MessageLabelsChangedEventArgs(int index, UniqueId uid, IList`1<string> labels, ulong modseq);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Labels();
    [CompilerGeneratedAttribute]
internal void set_Labels(IList`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_ModSeq();
    [CompilerGeneratedAttribute]
internal void set_ModSeq(Nullable`1<ulong> value);
}
public class MailKit.MessageNotFoundException : Exception {
    [SecuritySafeCriticalAttribute]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
protected MessageNotFoundException(SerializationInfo info, StreamingContext context);
    public MessageNotFoundException(string message, Exception innerException);
    public MessageNotFoundException(string message);
}
public class MailKit.MessageSentEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private MimeMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Response>k__BackingField;
    public MimeMessage Message { get; private set; }
    public string Response { get; private set; }
    public MessageSentEventArgs(MimeMessage message, string response);
    [CompilerGeneratedAttribute]
public MimeMessage get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(MimeMessage value);
    [CompilerGeneratedAttribute]
public string get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(string value);
}
[ExtensionAttribute]
public static class MailKit.MessageSorter : object {
    private static MessageSummaryItems GetMessageSummaryItems(IList`1<OrderBy> orderBy);
    [ExtensionAttribute]
public static IList`1<T> Sort(IEnumerable`1<T> messages, IList`1<OrderBy> orderBy);
    [ExtensionAttribute]
public static void Sort(List`1<T> messages, IList`1<OrderBy> orderBy);
}
public class MailKit.MessageSummary : object {
    private ISet`1<string> keywords;
    private int threadableReplyDepth;
    private string normalizedSubject;
    [CompilerGeneratedAttribute]
private IMailFolder <Folder>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageSummaryItems <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
private BodyPart <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviewText>k__BackingField;
    [CompilerGeneratedAttribute]
private Envelope <Envelope>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MessageFlags> <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Annotation> <Annotations>k__BackingField;
    [CompilerGeneratedAttribute]
private HeaderList <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <InternalDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <SaveDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <ModSeq>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageIdList <References>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EmailId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private UniqueId <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <GMailMessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <GMailThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <GMailLabels>k__BackingField;
    public IMailFolder Folder { get; private set; }
    public MessageSummaryItems Fields { get; internal set; }
    public BodyPart Body { get; public set; }
    public BodyPartText TextBody { get; }
    public BodyPartText HtmlBody { get; }
    public IEnumerable`1<BodyPartBasic> BodyParts { get; }
    public IEnumerable`1<BodyPartBasic> Attachments { get; }
    public string PreviewText { get; public set; }
    public Envelope Envelope { get; public set; }
    public string NormalizedSubject { get; }
    public bool IsReply { get; }
    public DateTimeOffset Date { get; }
    public Nullable`1<MessageFlags> Flags { get; public set; }
    public ISet`1<string> Keywords { get; public set; }
    public IReadOnlyList`1<Annotation> Annotations { get; public set; }
    public HeaderList Headers { get; public set; }
    public Nullable`1<DateTimeOffset> InternalDate { get; public set; }
    public Nullable`1<DateTimeOffset> SaveDate { get; public set; }
    public Nullable`1<UInt32> Size { get; public set; }
    public Nullable`1<ulong> ModSeq { get; public set; }
    public MessageIdList References { get; public set; }
    public string EmailId { get; public set; }
    public string ThreadId { get; public set; }
    public UniqueId UniqueId { get; public set; }
    public int Index { get; internal set; }
    public Nullable`1<ulong> GMailMessageId { get; public set; }
    public Nullable`1<ulong> GMailThreadId { get; public set; }
    public IList`1<string> GMailLabels { get; public set; }
    public MessageSummary(int index);
    public MessageSummary(IMailFolder folder, int index);
    private void UpdateThreadableSubject();
    [CompilerGeneratedAttribute]
public sealed virtual IMailFolder get_Folder();
    [CompilerGeneratedAttribute]
private void set_Folder(IMailFolder value);
    [CompilerGeneratedAttribute]
public sealed virtual MessageSummaryItems get_Fields();
    [CompilerGeneratedAttribute]
internal void set_Fields(MessageSummaryItems value);
    [CompilerGeneratedAttribute]
public sealed virtual BodyPart get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(BodyPart value);
    private static BodyPart GetMultipartRelatedRoot(BodyPartMultipart related);
    private static bool TryGetMultipartAlternativeBody(BodyPartMultipart multipart, bool html, BodyPartText& body);
    private static bool TryGetMessageBody(BodyPartMultipart multipart, bool html, BodyPartText& body);
    public sealed virtual BodyPartText get_TextBody();
    public sealed virtual BodyPartText get_HtmlBody();
    [IteratorStateMachineAttribute("MailKit.MessageSummary/<EnumerateBodyParts>d__25")]
private static IEnumerable`1<BodyPartBasic> EnumerateBodyParts(BodyPart entity, bool attachmentsOnly);
    public sealed virtual IEnumerable`1<BodyPartBasic> get_BodyParts();
    public sealed virtual IEnumerable`1<BodyPartBasic> get_Attachments();
    [CompilerGeneratedAttribute]
public sealed virtual string get_PreviewText();
    [CompilerGeneratedAttribute]
public void set_PreviewText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Envelope get_Envelope();
    [CompilerGeneratedAttribute]
public void set_Envelope(Envelope value);
    public sealed virtual string get_NormalizedSubject();
    public sealed virtual bool get_IsReply();
    public sealed virtual DateTimeOffset get_Date();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<MessageFlags> get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(Nullable`1<MessageFlags> value);
    public sealed virtual ISet`1<string> get_Keywords();
    public void set_Keywords(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<Annotation> get_Annotations();
    [CompilerGeneratedAttribute]
public void set_Annotations(IReadOnlyList`1<Annotation> value);
    [CompilerGeneratedAttribute]
public sealed virtual HeaderList get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(HeaderList value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_InternalDate();
    [CompilerGeneratedAttribute]
public void set_InternalDate(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_SaveDate();
    [CompilerGeneratedAttribute]
public void set_SaveDate(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<UInt32> get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<ulong> get_ModSeq();
    [CompilerGeneratedAttribute]
public void set_ModSeq(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public sealed virtual MessageIdList get_References();
    [CompilerGeneratedAttribute]
public void set_References(MessageIdList value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_EmailId();
    [CompilerGeneratedAttribute]
public void set_EmailId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ThreadId();
    [CompilerGeneratedAttribute]
public void set_ThreadId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual UniqueId get_UniqueId();
    [CompilerGeneratedAttribute]
public void set_UniqueId(UniqueId value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<ulong> get_GMailMessageId();
    [CompilerGeneratedAttribute]
public void set_GMailMessageId(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<ulong> get_GMailThreadId();
    [CompilerGeneratedAttribute]
public void set_GMailThreadId(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<string> get_GMailLabels();
    [CompilerGeneratedAttribute]
public void set_GMailLabels(IList`1<string> value);
}
public class MailKit.MessageSummaryFetchedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IMessageSummary <Message>k__BackingField;
    public IMessageSummary Message { get; private set; }
    public MessageSummaryFetchedEventArgs(IMessageSummary message);
    [CompilerGeneratedAttribute]
public IMessageSummary get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(IMessageSummary value);
}
[FlagsAttribute]
public enum MailKit.MessageSummaryItems : Enum {
    public int value__;
    public static MessageSummaryItems None;
    public static MessageSummaryItems Annotations;
    public static MessageSummaryItems Body;
    public static MessageSummaryItems BodyStructure;
    public static MessageSummaryItems Envelope;
    public static MessageSummaryItems Flags;
    public static MessageSummaryItems InternalDate;
    public static MessageSummaryItems Size;
    public static MessageSummaryItems ModSeq;
    public static MessageSummaryItems References;
    public static MessageSummaryItems UniqueId;
    public static MessageSummaryItems EmailId;
    public static MessageSummaryItems ThreadId;
    public static MessageSummaryItems GMailMessageId;
    public static MessageSummaryItems GMailThreadId;
    public static MessageSummaryItems GMailLabels;
    public static MessageSummaryItems Headers;
    public static MessageSummaryItems PreviewText;
    public static MessageSummaryItems SaveDate;
    public static MessageSummaryItems All;
    public static MessageSummaryItems Fast;
    public static MessageSummaryItems Full;
}
public class MailKit.MessagesVanishedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IList`1<UniqueId> <UniqueIds>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Earlier>k__BackingField;
    public IList`1<UniqueId> UniqueIds { get; private set; }
    public bool Earlier { get; private set; }
    public MessagesVanishedEventArgs(IList`1<UniqueId> uids, bool earlier);
    [CompilerGeneratedAttribute]
public IList`1<UniqueId> get_UniqueIds();
    [CompilerGeneratedAttribute]
private void set_UniqueIds(IList`1<UniqueId> value);
    [CompilerGeneratedAttribute]
public bool get_Earlier();
    [CompilerGeneratedAttribute]
private void set_Earlier(bool value);
}
public class MailKit.MessageThread : object {
    [CompilerGeneratedAttribute]
private IMessageSummary <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UniqueId> <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<MessageThread> <Children>k__BackingField;
    public IMessageSummary Message { get; private set; }
    public Nullable`1<UniqueId> UniqueId { get; private set; }
    public IList`1<MessageThread> Children { get; private set; }
    public MessageThread(Nullable`1<UniqueId> uid);
    public MessageThread(IMessageSummary message);
    [CompilerGeneratedAttribute]
public IMessageSummary get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(IMessageSummary value);
    [CompilerGeneratedAttribute]
public Nullable`1<UniqueId> get_UniqueId();
    [CompilerGeneratedAttribute]
private void set_UniqueId(Nullable`1<UniqueId> value);
    [CompilerGeneratedAttribute]
public IList`1<MessageThread> get_Children();
    [CompilerGeneratedAttribute]
private void set_Children(IList`1<MessageThread> value);
}
[ExtensionAttribute]
public static class MailKit.MessageThreader : object {
    private static Dictionary`2<string, ThreadableNode> CreateIdTable(IEnumerable`1<IMessageSummary> messages);
    private static ThreadableNode CreateRoot(IDictionary`2<string, ThreadableNode> ids);
    private static void PruneEmptyContainers(ThreadableNode root);
    private static void GroupBySubject(ThreadableNode root);
    private static void GetThreads(ThreadableNode root, IList`1<MessageThread> threads, IList`1<OrderBy> orderBy);
    private static List`1<MessageThread> ThreadByReferences(IEnumerable`1<IMessageSummary> messages, IList`1<OrderBy> orderBy);
    private static List`1<MessageThread> ThreadBySubject(IEnumerable`1<IMessageSummary> messages, IList`1<OrderBy> orderBy);
    [ExtensionAttribute]
public static IList`1<MessageThread> Thread(IEnumerable`1<IMessageSummary> messages, ThreadingAlgorithm algorithm);
    [ExtensionAttribute]
public static IList`1<MessageThread> Thread(IEnumerable`1<IMessageSummary> messages, ThreadingAlgorithm algorithm, IList`1<OrderBy> orderBy);
    private static bool IsForward(string subject, int index);
    private static bool IsReply(string subject, int index);
    private static void SkipWhiteSpace(string subject, Int32& index);
    private static bool IsMailingListName(char c);
    private static void SkipMailingListName(string subject, Int32& index);
    private static bool SkipDigits(string subject, Int32& index, Int32& value);
    public static string GetThreadableSubject(string subject, Int32& replyDepth);
}
public class MailKit.Metadata : object {
    internal string EncodedName;
    [CompilerGeneratedAttribute]
private MetadataTag <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public MetadataTag Tag { get; private set; }
    public string Value { get; private set; }
    public Metadata(MetadataTag tag, string value);
    [CompilerGeneratedAttribute]
public MetadataTag get_Tag();
    [CompilerGeneratedAttribute]
private void set_Tag(MetadataTag value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
}
public class MailKit.MetadataChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Metadata <Metadata>k__BackingField;
    public Metadata Metadata { get; private set; }
    public MetadataChangedEventArgs(Metadata metadata);
    [CompilerGeneratedAttribute]
public Metadata get_Metadata();
    [CompilerGeneratedAttribute]
private void set_Metadata(Metadata value);
}
public class MailKit.MetadataCollection : List`1<Metadata> {
    public MetadataCollection(IEnumerable`1<Metadata> collection);
}
public class MailKit.MetadataOptions : object {
    private int depth;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <MaxSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LongEntries>k__BackingField;
    public int Depth { get; public set; }
    public Nullable`1<UInt32> MaxSize { get; public set; }
    public UInt32 LongEntries { get; public set; }
    public int get_Depth();
    public void set_Depth(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_MaxSize();
    [CompilerGeneratedAttribute]
public void set_MaxSize(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public UInt32 get_LongEntries();
    [CompilerGeneratedAttribute]
public void set_LongEntries(UInt32 value);
}
public class MailKit.MetadataTag : ValueType {
    public static MetadataTag SharedAdmin;
    public static MetadataTag PrivateComment;
    public static MetadataTag SharedComment;
    public static MetadataTag PrivateSpecialUse;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; private set; }
    public MetadataTag(string id);
    private static MetadataTag();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal static MetadataTag Create(string id);
}
public class MailKit.ModSeqChangedEventArgs : MessageEventArgs {
    [CompilerGeneratedAttribute]
private ulong <ModSeq>k__BackingField;
    public ulong ModSeq { get; internal set; }
    internal ModSeqChangedEventArgs(int index);
    public ModSeqChangedEventArgs(int index, ulong modseq);
    public ModSeqChangedEventArgs(int index, UniqueId uid, ulong modseq);
    [CompilerGeneratedAttribute]
public ulong get_ModSeq();
    [CompilerGeneratedAttribute]
internal void set_ModSeq(ulong value);
}
internal interface MailKit.Net.IChannelBindingContext {
    public abstract virtual bool TryGetChannelBindingToken(ChannelBindingKind kind, Byte[]& token);
}
internal class MailKit.Net.Imap.AnnotateResponseCode : ImapResponseCode {
    public AnnotateResponseCodeSubType SubType;
    internal AnnotateResponseCode(ImapResponseCodeType type);
}
internal enum MailKit.Net.Imap.AnnotateResponseCodeSubType : Enum {
    public int value__;
    public static AnnotateResponseCodeSubType TooBig;
    public static AnnotateResponseCodeSubType TooMany;
}
internal class MailKit.Net.Imap.AnnotationsResponseCode : ImapResponseCode {
    public AnnotationAccess Access;
    public AnnotationScope Scopes;
    public UInt32 MaxSize;
    internal AnnotationsResponseCode(ImapResponseCodeType type);
}
internal class MailKit.Net.Imap.AppendUidResponseCode : UidValidityResponseCode {
    public UniqueIdSet UidSet;
    internal AppendUidResponseCode(ImapResponseCodeType type);
}
internal class MailKit.Net.Imap.BadUrlResponseCode : ImapResponseCode {
    public string BadUrl;
    internal BadUrlResponseCode(ImapResponseCodeType type);
}
internal class MailKit.Net.Imap.CopyUidResponseCode : UidValidityResponseCode {
    public UniqueIdSet SrcUidSet;
    public UniqueIdSet DestUidSet;
    internal CopyUidResponseCode(ImapResponseCodeType type);
}
internal class MailKit.Net.Imap.CreateImapFolderDelegate : MulticastDelegate {
    public CreateImapFolderDelegate(object object, IntPtr method);
    public virtual ImapFolder Invoke(ImapFolderConstructorArgs args);
    public virtual IAsyncResult BeginInvoke(ImapFolderConstructorArgs args, AsyncCallback callback, object object);
    public virtual ImapFolder EndInvoke(IAsyncResult result);
}
internal class MailKit.Net.Imap.HighestModSeqResponseCode : ImapResponseCode {
    public ulong HighestModSeq;
    internal HighestModSeqResponseCode(ImapResponseCodeType type);
}
public interface MailKit.Net.Imap.IImapClient {
    public ImapCapabilities Capabilities { get; public set; }
    public Nullable`1<UInt32> AppendLimit { get; }
    public int InternationalizationLevel { get; }
    public AccessRights Rights { get; }
    public bool IsIdle { get; }
    public abstract virtual ImapCapabilities get_Capabilities();
    public abstract virtual void set_Capabilities(ImapCapabilities value);
    public abstract virtual Nullable`1<UInt32> get_AppendLimit();
    public abstract virtual int get_InternationalizationLevel();
    public abstract virtual AccessRights get_Rights();
    public abstract virtual bool get_IsIdle();
    public abstract virtual void Compress(CancellationToken cancellationToken);
    public abstract virtual Task CompressAsync(CancellationToken cancellationToken);
    public abstract virtual void EnableUTF8(CancellationToken cancellationToken);
    public abstract virtual Task EnableUTF8Async(CancellationToken cancellationToken);
    public abstract virtual ImapImplementation Identify(ImapImplementation clientImplementation, CancellationToken cancellationToken);
    public abstract virtual Task`1<ImapImplementation> IdentifyAsync(ImapImplementation clientImplementation, CancellationToken cancellationToken);
    public abstract virtual void Idle(CancellationToken doneToken, CancellationToken cancellationToken);
    public abstract virtual Task IdleAsync(CancellationToken doneToken, CancellationToken cancellationToken);
    public abstract virtual void Notify(bool status, IList`1<ImapEventGroup> eventGroups, CancellationToken cancellationToken);
    public abstract virtual Task NotifyAsync(bool status, IList`1<ImapEventGroup> eventGroups, CancellationToken cancellationToken);
    public abstract virtual void DisableNotify(CancellationToken cancellationToken);
    public abstract virtual Task DisableNotifyAsync(CancellationToken cancellationToken);
}
public interface MailKit.Net.Imap.IImapFolder {
    public abstract virtual HeaderList GetHeaders(UniqueId uid, string partSpecifier, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<HeaderList> GetHeadersAsync(UniqueId uid, string partSpecifier, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual HeaderList GetHeaders(int index, string partSpecifier, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<HeaderList> GetHeadersAsync(int index, string partSpecifier, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual MimeEntity GetBodyPart(UniqueId uid, string partSpecifier, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<MimeEntity> GetBodyPartAsync(UniqueId uid, string partSpecifier, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual MimeEntity GetBodyPart(int index, string partSpecifier, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task`1<MimeEntity> GetBodyPartAsync(int index, string partSpecifier, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual void GetStreams(IList`1<UniqueId> uids, ImapFetchStreamCallback callback, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task GetStreamsAsync(IList`1<UniqueId> uids, ImapFetchStreamAsyncCallback callback, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual void GetStreams(IList`1<int> indexes, ImapFetchStreamCallback callback, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task GetStreamsAsync(IList`1<int> indexes, ImapFetchStreamAsyncCallback callback, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual void GetStreams(int min, int max, ImapFetchStreamCallback callback, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual Task GetStreamsAsync(int min, int max, ImapFetchStreamAsyncCallback callback, CancellationToken cancellationToken, ITransferProgress progress);
    public abstract virtual SearchResults Search(string query, CancellationToken cancellationToken);
    public abstract virtual Task`1<SearchResults> SearchAsync(string query, CancellationToken cancellationToken);
    public abstract virtual SearchResults Sort(string query, CancellationToken cancellationToken);
    public abstract virtual Task`1<SearchResults> SortAsync(string query, CancellationToken cancellationToken);
}
internal class MailKit.Net.Imap.ImapAuthenticationSecretDetector : object {
    private static IList`1<AuthenticationSecret> EmptyAuthSecrets;
    private ImapAuthCommandState commandState;
    private ImapLiteralState literalState;
    private ImapQStringState qstringState;
    private ImapLoginTokenType tokenType;
    private bool isAuthenticating;
    private int literalOctets;
    private int literalSeen;
    private int textIndex;
    public bool IsAuthenticating { get; public set; }
    private static ImapAuthenticationSecretDetector();
    public bool get_IsAuthenticating();
    public void set_IsAuthenticating(bool value);
    private void ClearLoginTokenState();
    private bool SkipText(string text, Byte[] buffer, Int32& index, int endIndex);
    private IList`1<AuthenticationSecret> DetectAuthSecrets(Byte[] buffer, int offset, int endIndex);
    private bool SkipLiteralToken(List`1<AuthenticationSecret> secrets, Byte[] buffer, Int32& index, int endIndex, byte sentinel);
    private bool SkipLoginToken(List`1<AuthenticationSecret> secrets, Byte[] buffer, Int32& index, int endIndex, byte sentinel);
    private IList`1<AuthenticationSecret> DetectLoginSecrets(Byte[] buffer, int offset, int endIndex);
    public sealed virtual IList`1<AuthenticationSecret> DetectSecrets(Byte[] buffer, int offset, int count);
}
[FlagsAttribute]
public enum MailKit.Net.Imap.ImapCapabilities : Enum {
    public ulong value__;
    public static ImapCapabilities None;
    public static ImapCapabilities IMAP4;
    public static ImapCapabilities IMAP4rev1;
    public static ImapCapabilities IMAP4rev2;
    public static ImapCapabilities Status;
    public static ImapCapabilities Acl;
    public static ImapCapabilities Quota;
    public static ImapCapabilities LiteralPlus;
    public static ImapCapabilities Idle;
    public static ImapCapabilities MailboxReferrals;
    public static ImapCapabilities LoginReferrals;
    public static ImapCapabilities Namespace;
    public static ImapCapabilities Id;
    public static ImapCapabilities Children;
    public static ImapCapabilities LoginDisabled;
    public static ImapCapabilities StartTLS;
    public static ImapCapabilities MultiAppend;
    public static ImapCapabilities Binary;
    public static ImapCapabilities Unselect;
    public static ImapCapabilities UidPlus;
    public static ImapCapabilities Catenate;
    public static ImapCapabilities CondStore;
    public static ImapCapabilities ESearch;
    public static ImapCapabilities SaslIR;
    public static ImapCapabilities Compress;
    public static ImapCapabilities Within;
    public static ImapCapabilities Enable;
    public static ImapCapabilities QuickResync;
    public static ImapCapabilities SearchResults;
    public static ImapCapabilities Sort;
    public static ImapCapabilities Thread;
    public static ImapCapabilities Annotate;
    public static ImapCapabilities ListExtended;
    public static ImapCapabilities Convert;
    public static ImapCapabilities Language;
    public static ImapCapabilities I18NLevel;
    public static ImapCapabilities ESort;
    public static ImapCapabilities Context;
    public static ImapCapabilities Metadata;
    public static ImapCapabilities MetadataServer;
    public static ImapCapabilities Notify;
    public static ImapCapabilities Filters;
    public static ImapCapabilities ListStatus;
    public static ImapCapabilities SortDisplay;
    public static ImapCapabilities CreateSpecialUse;
    public static ImapCapabilities SpecialUse;
    public static ImapCapabilities FuzzySearch;
    public static ImapCapabilities MultiSearch;
    public static ImapCapabilities Move;
    public static ImapCapabilities UTF8Accept;
    public static ImapCapabilities UTF8Only;
    public static ImapCapabilities LiteralMinus;
    public static ImapCapabilities AppendLimit;
    public static ImapCapabilities Unauthenticate;
    public static ImapCapabilities StatusSize;
    public static ImapCapabilities ListMyRights;
    public static ImapCapabilities ObjectID;
    public static ImapCapabilities Replace;
    public static ImapCapabilities SaveDate;
    public static ImapCapabilities Preview;
    public static ImapCapabilities XList;
    public static ImapCapabilities GMailExt1;
}
public class MailKit.Net.Imap.ImapClient : MailStore {
    private static Char[] ReservedUriCharacters;
    private static string HexAlphabet;
    private ImapAuthenticationSecretDetector detector;
    private ImapEngine engine;
    private SslCertificateValidationInfo sslValidationInfo;
    private int timeout;
    private string identifier;
    private bool disconnecting;
    private bool connecting;
    private bool disposed;
    private bool secure;
    [CompilerGeneratedAttribute]
private EventHandler`1<WebAlertEventArgs> WebAlert;
    unknown char TagPrefix {internal set; }
    public object SyncRoot { get; }
    protected string Protocol { get; }
    public ImapCapabilities Capabilities { get; public set; }
    public Nullable`1<UInt32> AppendLimit { get; }
    public int InternationalizationLevel { get; }
    public AccessRights Rights { get; }
    public HashSet`1<string> AuthenticationMechanisms { get; }
    public HashSet`1<ThreadingAlgorithm> ThreadingAlgorithms { get; }
    public int Timeout { get; public set; }
    public bool IsConnected { get; }
    public bool IsSecure { get; }
    public bool IsEncrypted { get; }
    public bool IsSigned { get; }
    public SslProtocols SslProtocol { get; }
    public Nullable`1<CipherAlgorithmType> SslCipherAlgorithm { get; }
    public Nullable`1<int> SslCipherStrength { get; }
    public Nullable`1<HashAlgorithmType> SslHashAlgorithm { get; }
    public Nullable`1<int> SslHashStrength { get; }
    public Nullable`1<ExchangeAlgorithmType> SslKeyExchangeAlgorithm { get; }
    public Nullable`1<int> SslKeyExchangeStrength { get; }
    public bool IsAuthenticated { get; }
    public bool IsIdle { get; }
    public FolderNamespaceCollection PersonalNamespaces { get; }
    public FolderNamespaceCollection SharedNamespaces { get; }
    public FolderNamespaceCollection OtherNamespaces { get; }
    public bool SupportsQuotas { get; }
    public IMailFolder Inbox { get; }
    public ImapClient(IProtocolLogger protocolLogger);
    private static ImapClient();
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapClient/<CompressAsync>d__0")]
public sealed virtual Task CompressAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapClient/<EnableQuickResyncAsync>d__1")]
public virtual Task EnableQuickResyncAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapClient/<EnableUTF8Async>d__2")]
public sealed virtual Task EnableUTF8Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapClient/<IdentifyAsync>d__3")]
public sealed virtual Task`1<ImapImplementation> IdentifyAsync(ImapImplementation clientImplementation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapClient/<OnAuthenticatedAsync>d__4")]
private Task OnAuthenticatedAsync(string message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapClient/<AuthenticateAsync>d__5")]
public virtual Task AuthenticateAsync(SaslMechanism mechanism, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapClient/<AuthenticateAsync>d__6")]
public virtual Task AuthenticateAsync(Encoding encoding, ICredentials credentials, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapClient/<SslHandshakeAsync>d__7")]
private Task SslHandshakeAsync(SslStream ssl, string host, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapClient/<PostConnectAsync>d__8")]
private Task PostConnectAsync(Stream stream, string host, int port, SecureSocketOptions options, bool starttls, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapClient/<ConnectAsync>d__9")]
public virtual Task ConnectAsync(string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    public virtual Task ConnectAsync(Socket socket, string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapClient/<ConnectAsync>d__11")]
public virtual Task ConnectAsync(Stream stream, string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapClient/<DisconnectAsync>d__12")]
public virtual Task DisconnectAsync(bool quit, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapClient/<NoOpAsync>d__13")]
public virtual Task NoOpAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapClient/<IdleAsync>d__14")]
public sealed virtual Task IdleAsync(CancellationToken doneToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapClient/<NotifyAsync>d__15")]
public sealed virtual Task NotifyAsync(bool status, IList`1<ImapEventGroup> eventGroups, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapClient/<DisableNotifyAsync>d__16")]
public sealed virtual Task DisableNotifyAsync(CancellationToken cancellationToken);
    public virtual Task`1<IList`1<IMailFolder>> GetFoldersAsync(FolderNamespace namespace, StatusItems items, bool subscribedOnly, CancellationToken cancellationToken);
    public virtual Task`1<IMailFolder> GetFolderAsync(string path, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapClient/<GetMetadataAsync>d__19")]
public virtual Task`1<string> GetMetadataAsync(MetadataTag tag, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapClient/<GetMetadataAsync>d__20")]
public virtual Task`1<MetadataCollection> GetMetadataAsync(MetadataOptions options, IEnumerable`1<MetadataTag> tags, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapClient/<SetMetadataAsync>d__21")]
public virtual Task SetMetadataAsync(MetadataCollection metadata, CancellationToken cancellationToken);
    internal void set_TagPrefix(char value);
    public virtual object get_SyncRoot();
    protected virtual string get_Protocol();
    public sealed virtual ImapCapabilities get_Capabilities();
    public sealed virtual void set_Capabilities(ImapCapabilities value);
    public sealed virtual Nullable`1<UInt32> get_AppendLimit();
    public sealed virtual int get_InternationalizationLevel();
    public sealed virtual AccessRights get_Rights();
    private void CheckDisposed();
    private void CheckConnected();
    private void CheckAuthenticated();
    protected virtual ImapFolder CreateImapFolder(ImapFolderConstructorArgs args);
    private bool ValidateRemoteCertificate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    private ImapCommand QueueCompressCommand(CancellationToken cancellationToken);
    private void ProcessCompressResponse(ImapCommand ic);
    public sealed virtual void Compress(CancellationToken cancellationToken);
    private bool TryQueueEnableQuickResyncCommand(CancellationToken cancellationToken, ImapCommand& ic);
    private static void ProcessEnableResponse(ImapCommand ic);
    public virtual void EnableQuickResync(CancellationToken cancellationToken);
    private bool TryQueueEnableUTF8Command(CancellationToken cancellationToken, ImapCommand& ic);
    public sealed virtual void EnableUTF8(CancellationToken cancellationToken);
    private ImapCommand QueueIdentifyCommand(ImapImplementation clientImplementation, CancellationToken cancellationToken);
    private static ImapImplementation ProcessIdentifyResponse(ImapCommand ic);
    public sealed virtual ImapImplementation Identify(ImapImplementation clientImplementation, CancellationToken cancellationToken);
    public virtual HashSet`1<string> get_AuthenticationMechanisms();
    public virtual HashSet`1<ThreadingAlgorithm> get_ThreadingAlgorithms();
    public virtual int get_Timeout();
    public virtual void set_Timeout(int value);
    public virtual bool get_IsConnected();
    public virtual bool get_IsSecure();
    public virtual bool get_IsEncrypted();
    public virtual bool get_IsSigned();
    public virtual SslProtocols get_SslProtocol();
    public virtual Nullable`1<CipherAlgorithmType> get_SslCipherAlgorithm();
    public virtual Nullable`1<int> get_SslCipherStrength();
    public virtual Nullable`1<HashAlgorithmType> get_SslHashAlgorithm();
    public virtual Nullable`1<int> get_SslHashStrength();
    public virtual Nullable`1<ExchangeAlgorithmType> get_SslKeyExchangeAlgorithm();
    public virtual Nullable`1<int> get_SslKeyExchangeStrength();
    public virtual bool get_IsAuthenticated();
    public sealed virtual bool get_IsIdle();
    private static AuthenticationException CreateAuthenticationException(ImapCommand ic);
    private void EmitAndThrowOnAlert(ImapCommand ic);
    private static bool IsHexDigit(char c);
    private static UInt32 HexUnescape(UInt32 c);
    private static char HexUnescape(string pattern, Int32& index);
    internal static string UnescapeUserName(string escaped);
    private static void HexEscape(StringBuilder builder, char c);
    internal static void EscapeUserName(StringBuilder builder, string userName);
    private string GetSessionIdentifier(string userName);
    private void OnAuthenticated(string message, CancellationToken cancellationToken);
    private void CheckCanAuthenticate(SaslMechanism mechanism, CancellationToken cancellationToken);
    private void ConfigureSaslMechanism(SaslMechanism mechanism, Uri uri);
    private void ConfigureSaslMechanism(SaslMechanism mechanism);
    private void ProcessAuthenticateResponse(ImapCommand ic, SaslMechanism mechanism);
    public virtual void Authenticate(SaslMechanism mechanism, CancellationToken cancellationToken);
    private void CheckCanAuthenticate(Encoding encoding, ICredentials credentials);
    private void CheckCanLogin(ImapCommand ic);
    public virtual void Authenticate(Encoding encoding, ICredentials credentials, CancellationToken cancellationToken);
    internal static void ComputeDefaultValues(string host, Int32& port, SecureSocketOptions& options, Uri& uri, Boolean& starttls);
    private void CheckCanConnect(string host, int port);
    private void SslHandshake(SslStream ssl, string host, CancellationToken cancellationToken);
    private void PostConnect(Stream stream, string host, int port, SecureSocketOptions options, bool starttls, CancellationToken cancellationToken);
    public virtual void Connect(string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    private void CheckCanConnect(Stream stream, string host, int port);
    private void CheckCanConnect(Socket socket, string host, int port);
    public virtual void Connect(Socket socket, string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    public virtual void Connect(Stream stream, string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    public virtual void Disconnect(bool quit, CancellationToken cancellationToken);
    private ImapCommand QueueNoOpCommand(CancellationToken cancellationToken);
    private static void ProcessNoOpResponse(ImapCommand ic);
    public virtual void NoOp(CancellationToken cancellationToken);
    private void CheckCanIdle(CancellationToken doneToken);
    private ImapCommand QueueIdleCommand(ImapIdleContext context, CancellationToken cancellationToken);
    private static void ProcessIdleResponse(ImapCommand ic);
    public sealed virtual void Idle(CancellationToken doneToken, CancellationToken cancellationToken);
    private ImapCommand QueueNotifyCommand(bool status, IList`1<ImapEventGroup> eventGroups, CancellationToken cancellationToken, Boolean& notifySelectedNewExpunge);
    private void ProcessNotifyResponse(ImapCommand ic, bool notifySelectedNewExpunge);
    public sealed virtual void Notify(bool status, IList`1<ImapEventGroup> eventGroups, CancellationToken cancellationToken);
    private ImapCommand QueueDisableNotifyCommand(CancellationToken cancellationToken);
    public sealed virtual void DisableNotify(CancellationToken cancellationToken);
    public virtual FolderNamespaceCollection get_PersonalNamespaces();
    public virtual FolderNamespaceCollection get_SharedNamespaces();
    public virtual FolderNamespaceCollection get_OtherNamespaces();
    public virtual bool get_SupportsQuotas();
    public virtual IMailFolder get_Inbox();
    public virtual IMailFolder GetFolder(SpecialFolder folder);
    public virtual IMailFolder GetFolder(FolderNamespace namespace);
    public virtual IList`1<IMailFolder> GetFolders(FolderNamespace namespace, StatusItems items, bool subscribedOnly, CancellationToken cancellationToken);
    public virtual IMailFolder GetFolder(string path, CancellationToken cancellationToken);
    private ImapCommand QueueGetMetadataCommand(MetadataTag tag, CancellationToken cancellationToken);
    private string ProcessGetMetadataResponse(ImapCommand ic, MetadataTag tag);
    public virtual string GetMetadata(MetadataTag tag, CancellationToken cancellationToken);
    private bool TryQueueGetMetadataCommand(MetadataOptions options, IEnumerable`1<MetadataTag> tags, CancellationToken cancellationToken, ImapCommand& ic);
    private MetadataCollection ProcessGetMetadataResponse(ImapCommand ic, MetadataOptions options);
    public virtual MetadataCollection GetMetadata(MetadataOptions options, IEnumerable`1<MetadataTag> tags, CancellationToken cancellationToken);
    private bool TryQueueSetMetadataCommand(MetadataCollection metadata, CancellationToken cancellationToken, ImapCommand& ic);
    private static void ProcessSetMetadataResponse(ImapCommand ic);
    public virtual void SetMetadata(MetadataCollection metadata, CancellationToken cancellationToken);
    private void OnEngineMetadataChanged(object sender, MetadataChangedEventArgs e);
    private void OnEngineFolderCreated(object sender, FolderCreatedEventArgs e);
    private void OnEngineAlert(object sender, AlertEventArgs e);
    private void OnEngineWebAlert(object sender, WebAlertEventArgs e);
    [CompilerGeneratedAttribute]
public void add_WebAlert(EventHandler`1<WebAlertEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_WebAlert(EventHandler`1<WebAlertEventArgs> value);
    protected virtual void OnWebAlert(Uri uri, string message);
    private void OnEngineDisconnected(object sender, EventArgs e);
    protected virtual void Dispose(bool disposing);
}
internal class MailKit.Net.Imap.ImapCommand : object {
    private static Byte[] UTF8LiteralTokenPrefix;
    private static Byte[] LiteralTokenSuffix;
    private static Byte[] Nil;
    private static Byte[] NewLine;
    private static Byte[] LiteralTokenPrefix;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ImapUntaggedHandler> <UntaggedHandlers>k__BackingField;
    [CompilerGeneratedAttribute]
private ImapContinuationHandler <ContinuationHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private ImapCommandStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private ImapCommandResponse <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private ITransferProgress <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public List`1<ImapResponseCode> RespCodes;
    [CompilerGeneratedAttribute]
private string <ResponseText>k__BackingField;
    [CompilerGeneratedAttribute]
private ImapFolder <Folder>k__BackingField;
    [CompilerGeneratedAttribute]
private object <UserData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ListReturnsSubscribed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Logout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Lsub>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bye>k__BackingField;
    private List`1<ImapCommandPart> parts;
    private ImapEngine Engine;
    private long totalSize;
    private long nwritten;
    private int current;
    public Dictionary`2<string, ImapUntaggedHandler> UntaggedHandlers { get; private set; }
    public ImapContinuationHandler ContinuationHandler { get; public set; }
    public CancellationToken CancellationToken { get; private set; }
    public ImapCommandStatus Status { get; internal set; }
    public ImapCommandResponse Response { get; internal set; }
    public ITransferProgress Progress { get; internal set; }
    public Exception Exception { get; internal set; }
    public string ResponseText { get; internal set; }
    public ImapFolder Folder { get; private set; }
    public object UserData { get; internal set; }
    public bool ListReturnsSubscribed { get; internal set; }
    public bool Logout { get; private set; }
    public bool Lsub { get; internal set; }
    public string Tag { get; private set; }
    public bool Bye { get; internal set; }
    public ImapCommand(ImapEngine engine, CancellationToken cancellationToken, ImapFolder folder, FormatOptions options, string format, Object[] args);
    public ImapCommand(ImapEngine engine, CancellationToken cancellationToken, ImapFolder folder, string format, Object[] args);
    private static ImapCommand();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ImapUntaggedHandler> get_UntaggedHandlers();
    [CompilerGeneratedAttribute]
private void set_UntaggedHandlers(Dictionary`2<string, ImapUntaggedHandler> value);
    [CompilerGeneratedAttribute]
public ImapContinuationHandler get_ContinuationHandler();
    [CompilerGeneratedAttribute]
public void set_ContinuationHandler(ImapContinuationHandler value);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
private void set_CancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
public ImapCommandStatus get_Status();
    [CompilerGeneratedAttribute]
internal void set_Status(ImapCommandStatus value);
    [CompilerGeneratedAttribute]
public ImapCommandResponse get_Response();
    [CompilerGeneratedAttribute]
internal void set_Response(ImapCommandResponse value);
    [CompilerGeneratedAttribute]
public ITransferProgress get_Progress();
    [CompilerGeneratedAttribute]
internal void set_Progress(ITransferProgress value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
internal void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public string get_ResponseText();
    [CompilerGeneratedAttribute]
internal void set_ResponseText(string value);
    [CompilerGeneratedAttribute]
public ImapFolder get_Folder();
    [CompilerGeneratedAttribute]
private void set_Folder(ImapFolder value);
    [CompilerGeneratedAttribute]
public object get_UserData();
    [CompilerGeneratedAttribute]
internal void set_UserData(object value);
    [CompilerGeneratedAttribute]
public bool get_ListReturnsSubscribed();
    [CompilerGeneratedAttribute]
internal void set_ListReturnsSubscribed(bool value);
    [CompilerGeneratedAttribute]
public bool get_Logout();
    [CompilerGeneratedAttribute]
private void set_Logout(bool value);
    [CompilerGeneratedAttribute]
public bool get_Lsub();
    [CompilerGeneratedAttribute]
internal void set_Lsub(bool value);
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
private void set_Tag(string value);
    [CompilerGeneratedAttribute]
public bool get_Bye();
    [CompilerGeneratedAttribute]
internal void set_Bye(bool value);
    internal static int EstimateCommandLength(ImapEngine engine, FormatOptions options, string format, Object[] args);
    internal static int EstimateCommandLength(ImapEngine engine, string format, Object[] args);
    private void UpdateProgress(int n);
    private static bool IsAtom(char c);
    private static bool IsQuotedSafe(ImapEngine engine, char c);
    internal static ImapStringType GetStringType(ImapEngine engine, string value, bool allowAtom);
    private static bool CanUseNonSynchronizedLiteral(ImapEngine engine, long length);
    private static int EstimateStringLength(ImapEngine engine, bool allowAtom, string value, Boolean& eoln);
    private void AppendString(FormatOptions options, bool allowAtom, ByteArrayBuilder builder, string value);
    public void RegisterUntaggedHandler(string atom, ImapUntaggedHandler handler);
    private static bool IsOkNoOrBad(string atom, ImapCommandResponse& response);
    public bool Step();
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapCommand/<StepAsync>d__85")]
public Task`1<bool> StepAsync();
    public ImapResponseCode GetResponseCode(ImapResponseCodeType type);
    public void ThrowIfNotOk(string command);
}
public class MailKit.Net.Imap.ImapCommandException : CommandException {
    [CompilerGeneratedAttribute]
private ImapCommandResponse <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseText>k__BackingField;
    public ImapCommandResponse Response { get; private set; }
    public string ResponseText { get; private set; }
    [SecuritySafeCriticalAttribute]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
protected ImapCommandException(SerializationInfo info, StreamingContext context);
    public ImapCommandException(ImapCommandResponse response, string responseText, string message, Exception innerException);
    public ImapCommandException(ImapCommandResponse response, string responseText, string message);
    public ImapCommandException(ImapCommandResponse response, string responseText);
    internal static ImapCommandException Create(string command, ImapCommand ic);
    [CompilerGeneratedAttribute]
public ImapCommandResponse get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(ImapCommandResponse value);
    [CompilerGeneratedAttribute]
public string get_ResponseText();
    [CompilerGeneratedAttribute]
private void set_ResponseText(string value);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal class MailKit.Net.Imap.ImapCommandPart : object {
    public Byte[] Command;
    public ImapLiteral Literal;
    public bool WaitForContinuation;
    public ImapCommandPart(Byte[] command, ImapLiteral literal, bool wait);
}
internal class MailKit.Net.Imap.ImapCommandResetHandler : MulticastDelegate {
    public ImapCommandResetHandler(object object, IntPtr method);
    public virtual void Invoke(ImapCommand ic);
    public virtual IAsyncResult BeginInvoke(ImapCommand ic, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum MailKit.Net.Imap.ImapCommandResponse : Enum {
    public int value__;
    public static ImapCommandResponse None;
    public static ImapCommandResponse Ok;
    public static ImapCommandResponse No;
    public static ImapCommandResponse Bad;
}
internal enum MailKit.Net.Imap.ImapCommandStatus : Enum {
    public int value__;
    public static ImapCommandStatus Created;
    public static ImapCommandStatus Queued;
    public static ImapCommandStatus Active;
    public static ImapCommandStatus Complete;
    public static ImapCommandStatus Error;
}
internal class MailKit.Net.Imap.ImapContinuationHandler : MulticastDelegate {
    public ImapContinuationHandler(object object, IntPtr method);
    public virtual Task Invoke(ImapEngine engine, ImapCommand ic, string text, bool doAsync);
    public virtual IAsyncResult BeginInvoke(ImapEngine engine, ImapCommand ic, string text, bool doAsync, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
internal static class MailKit.Net.Imap.ImapEncoding : object {
    private static string utf7_alphabet;
    private static Byte[] utf7_rank;
    private static ImapEncoding();
    public static string Decode(string text);
    private static void Utf7ShiftOut(StringBuilder output, int u, int bits);
    public static string Encode(string text);
}
internal class MailKit.Net.Imap.ImapEngine : object {
    internal static string GenericUntaggedResponseSyntaxErrorFormat;
    internal static string GenericItemSyntaxErrorFormat;
    internal static string FetchBodySyntaxErrorFormat;
    private static string GenericResponseCodeSyntaxErrorFormat;
    private static string GreetingSyntaxErrorFormat;
    private static int BufferSize;
    private static int TagPrefixIndex;
    internal Dictionary`2<string, ImapFolder> FolderCache;
    private CreateImapFolderDelegate createImapFolder;
    private ImapFolderNameComparer cacheComparer;
    internal ImapQuirksMode QuirksMode;
    private List`1<ImapCommand> queue;
    private long clientConnectedTimestamp;
    internal char TagPrefix;
    private ImapCommand current;
    private MimeParser parser;
    internal int Tag;
    private bool disposed;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <AuthenticationMechanisms>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <CompressionAlgorithms>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<ThreadingAlgorithm> <ThreadingAlgorithms>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <AppendLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <I18NLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private ImapCapabilities <Capabilities>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CapabilitiesVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ImapProtocolVersion <ProtocolVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private AccessRights <Rights>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <SupportedCharsets>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <SupportedContexts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <QResyncEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UTF8Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private ImapStream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private ImapEngineState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private FolderNamespaceCollection <PersonalNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private FolderNamespaceCollection <SharedNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private FolderNamespaceCollection <OtherNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private ImapFolder <Selected>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotifySelectedNewExpunge>k__BackingField;
    [CompilerGeneratedAttribute]
private ImapFolder <Inbox>k__BackingField;
    [CompilerGeneratedAttribute]
private ImapFolder <All>k__BackingField;
    [CompilerGeneratedAttribute]
private ImapFolder <Archive>k__BackingField;
    [CompilerGeneratedAttribute]
private ImapFolder <Drafts>k__BackingField;
    [CompilerGeneratedAttribute]
private ImapFolder <Flagged>k__BackingField;
    [CompilerGeneratedAttribute]
private ImapFolder <Important>k__BackingField;
    [CompilerGeneratedAttribute]
private ImapFolder <Junk>k__BackingField;
    [CompilerGeneratedAttribute]
private ImapFolder <Sent>k__BackingField;
    [CompilerGeneratedAttribute]
private ImapFolder <Trash>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<AlertEventArgs> Alert;
    [CompilerGeneratedAttribute]
private EventHandler`1<WebAlertEventArgs> WebAlert;
    [CompilerGeneratedAttribute]
private EventHandler`1<FolderCreatedEventArgs> FolderCreated;
    [CompilerGeneratedAttribute]
private EventHandler`1<MetadataChangedEventArgs> MetadataChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> NotificationOverflow;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Disconnected;
    public HashSet`1<string> AuthenticationMechanisms { get; private set; }
    public HashSet`1<string> CompressionAlgorithms { get; private set; }
    public HashSet`1<ThreadingAlgorithm> ThreadingAlgorithms { get; private set; }
    public Nullable`1<UInt32> AppendLimit { get; private set; }
    public int I18NLevel { get; private set; }
    public ImapCapabilities Capabilities { get; public set; }
    internal bool IsBusy { get; }
    public int CapabilitiesVersion { get; private set; }
    public ImapProtocolVersion ProtocolVersion { get; private set; }
    public AccessRights Rights { get; private set; }
    public HashSet`1<string> SupportedCharsets { get; private set; }
    public HashSet`1<string> SupportedContexts { get; private set; }
    public bool QResyncEnabled { get; internal set; }
    public bool UTF8Enabled { get; internal set; }
    public Uri Uri { get; internal set; }
    public ImapStream Stream { get; private set; }
    public ImapEngineState State { get; internal set; }
    public bool IsConnected { get; }
    public FolderNamespaceCollection PersonalNamespaces { get; private set; }
    public FolderNamespaceCollection SharedNamespaces { get; private set; }
    public FolderNamespaceCollection OtherNamespaces { get; private set; }
    public ImapFolder Selected { get; internal set; }
    public bool IsDisposed { get; }
    internal bool NotifySelectedNewExpunge { get; internal set; }
    public ImapFolder Inbox { get; private set; }
    public ImapFolder All { get; private set; }
    public ImapFolder Archive { get; private set; }
    public ImapFolder Drafts { get; private set; }
    public ImapFolder Flagged { get; private set; }
    public ImapFolder Important { get; private set; }
    public ImapFolder Junk { get; private set; }
    public ImapFolder Sent { get; private set; }
    public ImapFolder Trash { get; private set; }
    public ImapEngine(CreateImapFolderDelegate createImapFolderDelegate);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_AuthenticationMechanisms();
    [CompilerGeneratedAttribute]
private void set_AuthenticationMechanisms(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_CompressionAlgorithms();
    [CompilerGeneratedAttribute]
private void set_CompressionAlgorithms(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public HashSet`1<ThreadingAlgorithm> get_ThreadingAlgorithms();
    [CompilerGeneratedAttribute]
private void set_ThreadingAlgorithms(HashSet`1<ThreadingAlgorithm> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_AppendLimit();
    [CompilerGeneratedAttribute]
private void set_AppendLimit(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public int get_I18NLevel();
    [CompilerGeneratedAttribute]
private void set_I18NLevel(int value);
    [CompilerGeneratedAttribute]
public ImapCapabilities get_Capabilities();
    [CompilerGeneratedAttribute]
public void set_Capabilities(ImapCapabilities value);
    internal bool get_IsBusy();
    [CompilerGeneratedAttribute]
public int get_CapabilitiesVersion();
    [CompilerGeneratedAttribute]
private void set_CapabilitiesVersion(int value);
    [CompilerGeneratedAttribute]
public ImapProtocolVersion get_ProtocolVersion();
    [CompilerGeneratedAttribute]
private void set_ProtocolVersion(ImapProtocolVersion value);
    [CompilerGeneratedAttribute]
public AccessRights get_Rights();
    [CompilerGeneratedAttribute]
private void set_Rights(AccessRights value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_SupportedCharsets();
    [CompilerGeneratedAttribute]
private void set_SupportedCharsets(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_SupportedContexts();
    [CompilerGeneratedAttribute]
private void set_SupportedContexts(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_QResyncEnabled();
    [CompilerGeneratedAttribute]
internal void set_QResyncEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_UTF8Enabled();
    [CompilerGeneratedAttribute]
internal void set_UTF8Enabled(bool value);
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
internal void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public ImapStream get_Stream();
    [CompilerGeneratedAttribute]
private void set_Stream(ImapStream value);
    [CompilerGeneratedAttribute]
public ImapEngineState get_State();
    [CompilerGeneratedAttribute]
internal void set_State(ImapEngineState value);
    public bool get_IsConnected();
    [CompilerGeneratedAttribute]
public FolderNamespaceCollection get_PersonalNamespaces();
    [CompilerGeneratedAttribute]
private void set_PersonalNamespaces(FolderNamespaceCollection value);
    [CompilerGeneratedAttribute]
public FolderNamespaceCollection get_SharedNamespaces();
    [CompilerGeneratedAttribute]
private void set_SharedNamespaces(FolderNamespaceCollection value);
    [CompilerGeneratedAttribute]
public FolderNamespaceCollection get_OtherNamespaces();
    [CompilerGeneratedAttribute]
private void set_OtherNamespaces(FolderNamespaceCollection value);
    [CompilerGeneratedAttribute]
public ImapFolder get_Selected();
    [CompilerGeneratedAttribute]
internal void set_Selected(ImapFolder value);
    public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
internal bool get_NotifySelectedNewExpunge();
    [CompilerGeneratedAttribute]
internal void set_NotifySelectedNewExpunge(bool value);
    [CompilerGeneratedAttribute]
public ImapFolder get_Inbox();
    [CompilerGeneratedAttribute]
private void set_Inbox(ImapFolder value);
    [CompilerGeneratedAttribute]
public ImapFolder get_All();
    [CompilerGeneratedAttribute]
private void set_All(ImapFolder value);
    [CompilerGeneratedAttribute]
public ImapFolder get_Archive();
    [CompilerGeneratedAttribute]
private void set_Archive(ImapFolder value);
    [CompilerGeneratedAttribute]
public ImapFolder get_Drafts();
    [CompilerGeneratedAttribute]
private void set_Drafts(ImapFolder value);
    [CompilerGeneratedAttribute]
public ImapFolder get_Flagged();
    [CompilerGeneratedAttribute]
private void set_Flagged(ImapFolder value);
    [CompilerGeneratedAttribute]
public ImapFolder get_Important();
    [CompilerGeneratedAttribute]
private void set_Important(ImapFolder value);
    [CompilerGeneratedAttribute]
public ImapFolder get_Junk();
    [CompilerGeneratedAttribute]
private void set_Junk(ImapFolder value);
    [CompilerGeneratedAttribute]
public ImapFolder get_Sent();
    [CompilerGeneratedAttribute]
private void set_Sent(ImapFolder value);
    [CompilerGeneratedAttribute]
public ImapFolder get_Trash();
    [CompilerGeneratedAttribute]
private void set_Trash(ImapFolder value);
    internal ImapFolder CreateImapFolder(string encodedName, FolderAttributes attributes, char delim);
    internal static ImapProtocolException UnexpectedToken(string format, Object[] args);
    internal static void AssertToken(ImapToken token, ImapTokenType type, string format, Object[] args);
    internal static void AssertToken(ImapToken token, ImapTokenType type1, ImapTokenType type2, string format, Object[] args);
    internal static UInt32 ParseNumber(ImapToken token, bool nonZero, string format, Object[] args);
    internal static ulong ParseNumber64(ImapToken token, bool nonZero, string format, Object[] args);
    internal static bool TryParseNumber64(ImapToken token, UInt64& value);
    internal static UniqueIdSet ParseUidSet(ImapToken token, UInt32 validity, Nullable`1& minValue, Nullable`1& maxValue, string format, Object[] args);
    internal void SetStream(ImapStream stream);
    public NetworkOperation StartNetworkOperation(NetworkOperationKind kind, Uri uri);
    private void Initialize(ImapStream stream);
    private ImapEngineState ParseConnectedState(ImapToken token, Boolean& bye);
    private void DetectQuirksMode(string text);
    public void Connect(ImapStream stream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapEngine/<ConnectAsync>d__159")]
public Task ConnectAsync(ImapStream stream, CancellationToken cancellationToken);
    private void RecordClientDisconnected(Exception ex);
    public void Disconnect(Exception ex);
    public string ReadLine(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapEngine/<ReadLineAsync>d__163")]
public Task`1<string> ReadLineAsync(CancellationToken cancellationToken);
    public ImapToken ReadToken(CancellationToken cancellationToken);
    public ValueTask`1<ImapToken> ReadTokenAsync(CancellationToken cancellationToken);
    public ImapToken ReadToken(string specials, CancellationToken cancellationToken);
    public ValueTask`1<ImapToken> ReadTokenAsync(string specials, CancellationToken cancellationToken);
    public ImapToken PeekToken(string specials, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapEngine/<PeekTokenAsync>d__169")]
public ValueTask`1<ImapToken> PeekTokenAsync(string specials, CancellationToken cancellationToken);
    public ImapToken PeekToken(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapEngine/<PeekTokenAsync>d__171")]
public ValueTask`1<ImapToken> PeekTokenAsync(CancellationToken cancellationToken);
    public string ReadLiteral(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapEngine/<ReadLiteralAsync>d__173")]
public Task`1<string> ReadLiteralAsync(CancellationToken cancellationToken);
    private void SkipLine(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapEngine/<SkipLineAsync>d__175")]
private Task SkipLineAsync(CancellationToken cancellationToken);
    private static bool TryParseUInt32(string text, int startIndex, UInt32& value);
    private void ResetCapabilities();
    private void ProcessCapabilityToken(string atom);
    private void StandardizeCapabilities();
    private void UpdateCapabilities(ImapTokenType sentinel, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapEngine/<UpdateCapabilitiesAsync>d__181")]
private Task UpdateCapabilitiesAsync(ImapTokenType sentinel, CancellationToken cancellationToken);
    private void UpdateNamespaces(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapEngine/<UpdateNamespacesAsync>d__183")]
private ValueTask UpdateNamespacesAsync(CancellationToken cancellationToken);
    private void ProcessResponseCodes(ImapCommand ic);
    private void EmitMetadataChanged(Metadata metadata);
    internal MetadataCollection FilterMetadata(MetadataCollection metadata, string encodedName);
    internal void ProcessMetadataChanges(MetadataCollection metadata);
    internal static ImapResponseCodeType GetResponseCodeType(string atom);
    public ImapResponseCode ParseResponseCode(bool isTagged, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapEngine/<ParseResponseCodeAsync>d__190")]
public ValueTask`1<ImapResponseCode> ParseResponseCodeAsync(bool isTagged, CancellationToken cancellationToken);
    private bool UpdateSimpleStatusValue(ImapFolder folder, string atom, ImapToken token);
    private void UpdateStatus(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapEngine/<UpdateStatusAsync>d__193")]
private ValueTask UpdateStatusAsync(CancellationToken cancellationToken);
    private static bool IsOkNoOrBad(string atom, ImapUntaggedResult& result);
    internal void ProcessUntaggedResponse(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapEngine/<ProcessUntaggedResponseAsync>d__196")]
internal Task ProcessUntaggedResponseAsync(CancellationToken cancellationToken);
    private void PopNextCommand();
    private void OnImapProtocolException(ImapProtocolException ex);
    private void Iterate();
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapEngine/<IterateAsync>d__200")]
private Task IterateAsync();
    public ImapCommandResponse Run(ImapCommand ic);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapEngine/<RunAsync>d__202")]
public Task`1<ImapCommandResponse> RunAsync(ImapCommand ic);
    [IteratorStateMachineAttribute("MailKit.Net.Imap.ImapEngine/<CreateCommands>d__203")]
public IEnumerable`1<ImapCommand> CreateCommands(CancellationToken cancellationToken, ImapFolder folder, string format, IList`1<UniqueId> uids, Object[] args);
    [IteratorStateMachineAttribute("MailKit.Net.Imap.ImapEngine/<QueueCommands>d__204")]
public IEnumerable`1<ImapCommand> QueueCommands(CancellationToken cancellationToken, ImapFolder folder, string format, IList`1<UniqueId> uids, Object[] args);
    public ImapCommand QueueCommand(CancellationToken cancellationToken, ImapFolder folder, FormatOptions options, string format, Object[] args);
    public ImapCommand QueueCommand(CancellationToken cancellationToken, ImapFolder folder, string format, Object[] args);
    public void QueueCommand(ImapCommand ic);
    public ImapCommandResponse QueryCapabilities(CancellationToken cancellationToken);
    public Task`1<ImapCommandResponse> QueryCapabilitiesAsync(CancellationToken cancellationToken);
    public void CacheFolder(ImapFolder folder);
    public bool TryGetCachedFolder(string encodedName, ImapFolder& folder);
    private bool RequiresParentLookup(ImapFolder folder, String& encodedParentName);
    private ImapCommand QueueLookupParentFolderCommand(string encodedName, CancellationToken cancellationToken);
    private void ProcessLookupParentFolderResponse(ImapCommand ic, List`1<ImapFolder> list, ImapFolder folder, string encodedParentName);
    internal void LookupParentFolders(IEnumerable`1<ImapFolder> folders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapEngine/<LookupParentFoldersAsync>d__216")]
internal Task LookupParentFoldersAsync(IEnumerable`1<ImapFolder> folders, CancellationToken cancellationToken);
    private void ProcessNamespaceResponse(ImapCommand ic);
    private ImapCommand QueueListNamespaceCommand(List`1<ImapFolder> list, CancellationToken cancellationToken);
    private void ProcessListNamespaceResponse(ImapCommand ic, List`1<ImapFolder> list);
    public ImapCommandResponse QueryNamespaces(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapEngine/<QueryNamespacesAsync>d__221")]
public Task`1<ImapCommandResponse> QueryNamespacesAsync(CancellationToken cancellationToken);
    internal static ImapFolder GetFolder(List`1<ImapFolder> folders, string encodedName);
    public void AssignSpecialFolder(ImapFolder folder);
    public void AssignSpecialFolders(IList`1<ImapFolder> list);
    private ImapCommand QueueListInboxCommand(CancellationToken cancellationToken, StringBuilder& command, List`1& list);
    private void ProcessListInboxResponse(ImapCommand ic, StringBuilder command, List`1<ImapFolder> list);
    private ImapCommand QueueListSpecialUseCommand(StringBuilder command, List`1<ImapFolder> list, CancellationToken cancellationToken);
    private ImapCommand QueueXListCommand(List`1<ImapFolder> list, CancellationToken cancellationToken);
    public void QuerySpecialFolders(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapEngine/<QuerySpecialFoldersAsync>d__230")]
public Task QuerySpecialFoldersAsync(CancellationToken cancellationToken);
    private ImapFolder ProcessGetQuotaRootResponse(ImapCommand ic, string quotaRoot, List`1& list);
    public ImapFolder GetQuotaRootFolder(string quotaRoot, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapEngine/<GetQuotaRootFolderAsync>d__233")]
public Task`1<ImapFolder> GetQuotaRootFolderAsync(string quotaRoot, CancellationToken cancellationToken);
    private ImapCommand QueueGetFolderCommand(string encodedName, CancellationToken cancellationToken);
    private static ImapFolder ProcessGetFolderResponse(ImapCommand ic, string path, string encodedName, List`1& list);
    public ImapFolder GetFolder(string path, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapEngine/<GetFolderAsync>d__237")]
public Task`1<IMailFolder> GetFolderAsync(string path, CancellationToken cancellationToken);
    internal string GetStatusQuery(StatusItems items);
    private ImapCommand QueueGetFoldersCommand(FolderNamespace namespace, StatusItems items, bool subscribedOnly, CancellationToken cancellationToken, Boolean& status);
    private static IList`1<IMailFolder> ToListOfIMailFolder(List`1<ImapFolder> list);
    public IList`1<IMailFolder> GetFolders(FolderNamespace namespace, StatusItems items, bool subscribedOnly, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapEngine/<GetFoldersAsync>d__242")]
public Task`1<IList`1<IMailFolder>> GetFoldersAsync(FolderNamespace namespace, StatusItems items, bool subscribedOnly, CancellationToken cancellationToken);
    public string DecodeMailboxName(string encodedName);
    public string EncodeMailboxName(string mailboxName);
    public static bool IsValidMailboxName(string mailboxName, char delim);
    private void InitializeParser(Stream stream, bool persistent);
    public HeaderList ParseHeaders(Stream stream, CancellationToken cancellationToken);
    public Task`1<HeaderList> ParseHeadersAsync(Stream stream, CancellationToken cancellationToken);
    public MimeMessage ParseMessage(Stream stream, bool persistent, CancellationToken cancellationToken);
    public Task`1<MimeMessage> ParseMessageAsync(Stream stream, bool persistent, CancellationToken cancellationToken);
    public MimeEntity ParseEntity(Stream stream, bool persistent, CancellationToken cancellationToken);
    public Task`1<MimeEntity> ParseEntityAsync(Stream stream, bool persistent, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public void add_Alert(EventHandler`1<AlertEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Alert(EventHandler`1<AlertEventArgs> value);
    internal void OnAlert(string message);
    [CompilerGeneratedAttribute]
public void add_WebAlert(EventHandler`1<WebAlertEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_WebAlert(EventHandler`1<WebAlertEventArgs> value);
    internal void OnWebAlert(Uri uri, string message);
    [CompilerGeneratedAttribute]
public void add_FolderCreated(EventHandler`1<FolderCreatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_FolderCreated(EventHandler`1<FolderCreatedEventArgs> value);
    internal void OnFolderCreated(IMailFolder folder);
    [CompilerGeneratedAttribute]
public void add_MetadataChanged(EventHandler`1<MetadataChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MetadataChanged(EventHandler`1<MetadataChangedEventArgs> value);
    internal void OnMetadataChanged(Metadata metadata);
    [CompilerGeneratedAttribute]
public void add_NotificationOverflow(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_NotificationOverflow(EventHandler`1<EventArgs> value);
    internal void OnNotificationOverflow();
    [CompilerGeneratedAttribute]
public void add_Disconnected(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Disconnected(EventHandler`1<EventArgs> value);
    private void OnDisconnected();
    public sealed virtual void Dispose();
}
internal enum MailKit.Net.Imap.ImapEngineState : Enum {
    public int value__;
    public static ImapEngineState Disconnected;
    public static ImapEngineState Connecting;
    public static ImapEngineState Connected;
    public static ImapEngineState Authenticated;
    public static ImapEngineState Selected;
    public static ImapEngineState Idle;
}
public class MailKit.Net.Imap.ImapEvent : object {
    public static ImapEvent MessageExpunge;
    public static ImapEvent FlagChange;
    public static ImapEvent AnnotationChange;
    public static ImapEvent MailboxName;
    public static ImapEvent SubscriptionChange;
    public static ImapEvent MailboxMetadataChange;
    public static ImapEvent ServerMetadataChange;
    [CompilerGeneratedAttribute]
private bool <IsMessageEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    internal bool IsMessageEvent { get; private set; }
    public string Name { get; private set; }
    internal ImapEvent(string name, bool isMessageEvent);
    private static ImapEvent();
    [CompilerGeneratedAttribute]
internal bool get_IsMessageEvent();
    [CompilerGeneratedAttribute]
private void set_IsMessageEvent(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    internal virtual void Format(ImapEngine engine, StringBuilder command, IList`1<object> args, bool isSelectedFilter);
}
public class MailKit.Net.Imap.ImapEventGroup : object {
    [CompilerGeneratedAttribute]
private ImapMailboxFilter <MailboxFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ImapEvent> <Events>k__BackingField;
    public ImapMailboxFilter MailboxFilter { get; private set; }
    public IList`1<ImapEvent> Events { get; private set; }
    public ImapEventGroup(ImapMailboxFilter mailboxFilter, IList`1<ImapEvent> events);
    public ImapEventGroup(ImapMailboxFilter mailboxFilter, ImapEvent[] events);
    [CompilerGeneratedAttribute]
public ImapMailboxFilter get_MailboxFilter();
    [CompilerGeneratedAttribute]
private void set_MailboxFilter(ImapMailboxFilter value);
    [CompilerGeneratedAttribute]
public IList`1<ImapEvent> get_Events();
    [CompilerGeneratedAttribute]
private void set_Events(IList`1<ImapEvent> value);
    internal void Format(ImapEngine engine, StringBuilder command, IList`1<object> args, Boolean& notifySelectedNewExpunge);
}
public class MailKit.Net.Imap.ImapFetchStreamAsyncCallback : MulticastDelegate {
    public ImapFetchStreamAsyncCallback(object object, IntPtr method);
    public virtual Task Invoke(ImapFolder folder, int index, UniqueId uid, Stream stream, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(ImapFolder folder, int index, UniqueId uid, Stream stream, CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class MailKit.Net.Imap.ImapFetchStreamCallback : MulticastDelegate {
    public ImapFetchStreamCallback(object object, IntPtr method);
    public virtual void Invoke(ImapFolder folder, int index, UniqueId uid, Stream stream);
    public virtual IAsyncResult BeginInvoke(ImapFolder folder, int index, UniqueId uid, Stream stream, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class MailKit.Net.Imap.ImapFolder : MailFolder {
    private bool supportsModSeq;
    private bool countChanged;
    [CompilerGeneratedAttribute]
private ImapEngine <Engine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodedName>k__BackingField;
    private static int PreviewHtmlLength;
    private static int PreviewTextLength;
    private static int BufferSize;
    private static IStoreFlagsRequest AddDeletedFlag;
    private static IStoreFlagsRequest RemoveDeletedFlag;
    internal ImapEngine Engine { get; private set; }
    internal string EncodedName { get; internal set; }
    public object SyncRoot { get; }
    public HashSet`1<ThreadingAlgorithm> ThreadingAlgorithms { get; }
    public bool IsOpen { get; }
    public ImapFolder(ImapFolderConstructorArgs args);
    private static ImapFolder();
    private void InitializeProperties(ImapFolderConstructorArgs args);
    [CompilerGeneratedAttribute]
internal ImapEngine get_Engine();
    [CompilerGeneratedAttribute]
private void set_Engine(ImapEngine value);
    [CompilerGeneratedAttribute]
internal string get_EncodedName();
    [CompilerGeneratedAttribute]
internal void set_EncodedName(string value);
    public virtual object get_SyncRoot();
    public virtual HashSet`1<ThreadingAlgorithm> get_ThreadingAlgorithms();
    public virtual bool Supports(FolderFeature feature);
    private void CheckState(bool open, bool rw);
    private void CheckAllowIndexes();
    private void CheckValidDestination(IMailFolder destination);
    internal void Reset();
    protected virtual void OnParentFolderRenamed();
    private void ProcessResponseCodes(ImapCommand ic, IMailFolder folder, bool throwNotFound);
    public virtual bool get_IsOpen();
    private static string SelectOrExamine(FolderAccess access);
    private static Task UntaggedQResyncFetchHandler(ImapEngine engine, ImapCommand ic, int index, bool doAsync);
    private ImapCommand QueueOpenCommand(FolderAccess access, UInt32 uidValidity, ulong highestModSeq, IList`1<UniqueId> uids, CancellationToken cancellationToken);
    private void ProcessOpenResponse(ImapCommand ic, FolderAccess access);
    private FolderAccess Open();
    private FolderAccess Open(ImapCommand ic, FolderAccess access);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<OpenAsync>d__31")]
private Task`1<FolderAccess> OpenAsync(ImapCommand ic, FolderAccess access);
    public virtual FolderAccess Open(FolderAccess access, UInt32 uidValidity, ulong highestModSeq, IList`1<UniqueId> uids, CancellationToken cancellationToken);
    public virtual Task`1<FolderAccess> OpenAsync(FolderAccess access, UInt32 uidValidity, ulong highestModSeq, IList`1<UniqueId> uids, CancellationToken cancellationToken);
    private ImapCommand QueueOpenCommand(FolderAccess access, CancellationToken cancellationToken);
    public virtual FolderAccess Open(FolderAccess access, CancellationToken cancellationToken);
    public virtual Task`1<FolderAccess> OpenAsync(FolderAccess access, CancellationToken cancellationToken);
    private ImapCommand QueueCloseCommand(bool expunge, CancellationToken cancellationToken);
    private void ProcessCloseResponse(ImapCommand ic, bool expunge);
    private void Close();
    public virtual void Close(bool expunge, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<CloseAsync>d__41")]
public virtual Task CloseAsync(bool expunge, CancellationToken cancellationToken);
    private ImapCommand QueueGetCreatedFolderCommand(string encodedName, CancellationToken cancellationToken);
    private IMailFolder ProcessGetCreatedFolderResponse(ImapCommand ic, string encodedName, string id, bool specialUse);
    private ImapCommand QueueCreateCommand(string name, bool isMessageFolder, CancellationToken cancellationToken, String& encodedName);
    private MailboxIdResponseCode ProcessCreateResponse(ImapCommand ic);
    private IMailFolder Create(ImapCommand ic, string encodedName, bool specialUse, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<CreateAsync>d__47")]
private Task`1<IMailFolder> CreateAsync(ImapCommand ic, string encodedName, bool specialUse, CancellationToken cancellationToken);
    public virtual IMailFolder Create(string name, bool isMessageFolder, CancellationToken cancellationToken);
    public virtual Task`1<IMailFolder> CreateAsync(string name, bool isMessageFolder, CancellationToken cancellationToken);
    private ImapCommand QueueCreateCommand(string name, IEnumerable`1<SpecialFolder> specialUses, CancellationToken cancellationToken, String& encodedName);
    public virtual IMailFolder Create(string name, IEnumerable`1<SpecialFolder> specialUses, CancellationToken cancellationToken);
    public virtual Task`1<IMailFolder> CreateAsync(string name, IEnumerable`1<SpecialFolder> specialUses, CancellationToken cancellationToken);
    private ImapCommand QueueRenameCommand(IMailFolder parent, string name, CancellationToken cancellationToken, String& encodedName);
    private void ProcessRenameResponse(ImapCommand ic, IMailFolder parent, string name, string encodedName);
    public virtual void Rename(IMailFolder parent, string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<RenameAsync>d__56")]
public virtual Task RenameAsync(IMailFolder parent, string name, CancellationToken cancellationToken);
    private ImapCommand QueueDeleteCommand(CancellationToken cancellationToken);
    private void ProcessDeleteResponse(ImapCommand ic);
    public virtual void Delete(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<DeleteAsync>d__60")]
public virtual Task DeleteAsync(CancellationToken cancellationToken);
    private ImapCommand QueueSubscribeCommand(CancellationToken cancellationToken);
    private void ProcessSubscribeResponse(ImapCommand ic);
    public virtual void Subscribe(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<SubscribeAsync>d__64")]
public virtual Task SubscribeAsync(CancellationToken cancellationToken);
    private ImapCommand QueueUnsubscribeCommand(CancellationToken cancellationToken);
    private void ProcessUnsubscribeResponse(ImapCommand ic);
    public virtual void Unsubscribe(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<UnsubscribeAsync>d__68")]
public virtual Task UnsubscribeAsync(CancellationToken cancellationToken);
    private ImapCommand QueueGetSubfoldersCommand(StatusItems items, bool subscribedOnly, CancellationToken cancellationToken, List`1& list, Boolean& status);
    private IList`1<IMailFolder> ProcessGetSubfoldersResponse(ImapCommand ic, List`1<ImapFolder> list, Boolean& unparented);
    public virtual IList`1<IMailFolder> GetSubfolders(StatusItems items, bool subscribedOnly, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetSubfoldersAsync>d__72")]
public virtual Task`1<IList`1<IMailFolder>> GetSubfoldersAsync(StatusItems items, bool subscribedOnly, CancellationToken cancellationToken);
    private ImapCommand QueueGetSubfolderCommand(string name, CancellationToken cancellationToken, List`1& list, String& fullName, String& encodedName, ImapFolder& folder);
    private ImapFolder ProcessGetSubfolderResponse(ImapCommand ic, List`1<ImapFolder> list, string encodedName);
    public virtual IMailFolder GetSubfolder(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetSubfolderAsync>d__76")]
public virtual Task`1<IMailFolder> GetSubfolderAsync(string name, CancellationToken cancellationToken);
    private ImapCommand QueueCheckCommand(CancellationToken cancellationToken);
    private void ProcessCheckResponse(ImapCommand ic);
    public virtual void Check(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<CheckAsync>d__80")]
public virtual Task CheckAsync(CancellationToken cancellationToken);
    private ImapCommand QueueStatusCommand(StatusItems items, CancellationToken cancellationToken);
    private void ProcessStatusResponse(ImapCommand ic, bool throwNotFound);
    internal void Status(StatusItems items, bool throwNotFound, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<StatusAsync>d__84")]
internal Task StatusAsync(StatusItems items, bool throwNotFound, CancellationToken cancellationToken);
    public virtual void Status(StatusItems items, CancellationToken cancellationToken);
    public virtual Task StatusAsync(StatusItems items, CancellationToken cancellationToken);
    private static void ParseAcl(ImapEngine engine, ImapCommand ic);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<ParseAclAsync>d__88")]
private static Task ParseAclAsync(ImapEngine engine, ImapCommand ic);
    private static Task UntaggedAclHandler(ImapEngine engine, ImapCommand ic, int index, bool doAsync);
    private ImapCommand QueueGetAccessControlListCommand(CancellationToken cancellationToken);
    private AccessControlList ProcessGetAccessControlListResponse(ImapCommand ic);
    public virtual AccessControlList GetAccessControlList(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetAccessControlListAsync>d__93")]
public virtual Task`1<AccessControlList> GetAccessControlListAsync(CancellationToken cancellationToken);
    private static void ParseListRights(ImapEngine engine, ImapCommand ic);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<ParseListRightsAsync>d__95")]
private static Task ParseListRightsAsync(ImapEngine engine, ImapCommand ic);
    private static Task UntaggedListRightsHandler(ImapEngine engine, ImapCommand ic, int index, bool doAsync);
    private ImapCommand QueueGetAccessRightsCommand(string name, CancellationToken cancellationToken);
    private AccessRights ProcessGetAccessRightsResponse(ImapCommand ic);
    public virtual AccessRights GetAccessRights(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetAccessRightsAsync>d__100")]
public virtual Task`1<AccessRights> GetAccessRightsAsync(string name, CancellationToken cancellationToken);
    private static void ParseMyRights(ImapEngine engine, ImapCommand ic);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<ParseMyRightsAsync>d__102")]
private static Task ParseMyRightsAsync(ImapEngine engine, ImapCommand ic);
    private static Task UntaggedMyRightsHandler(ImapEngine engine, ImapCommand ic, int index, bool doAsync);
    private ImapCommand QueueGetMyAccessRightsCommand(CancellationToken cancellationToken);
    private AccessRights ProcessGetMyAccessRightsResponse(ImapCommand ic);
    public virtual AccessRights GetMyAccessRights(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetMyAccessRightsAsync>d__107")]
public virtual Task`1<AccessRights> GetMyAccessRightsAsync(CancellationToken cancellationToken);
    private ImapCommand QueueModifyAccessRightsCommand(string name, string action, AccessRights rights, CancellationToken cancellationToken);
    private void ProcessModifyAccessRightsResponse(ImapCommand ic);
    public virtual void AddAccessRights(string name, AccessRights rights, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<AddAccessRightsAsync>d__111")]
public virtual Task AddAccessRightsAsync(string name, AccessRights rights, CancellationToken cancellationToken);
    public virtual void RemoveAccessRights(string name, AccessRights rights, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<RemoveAccessRightsAsync>d__113")]
public virtual Task RemoveAccessRightsAsync(string name, AccessRights rights, CancellationToken cancellationToken);
    public virtual void SetAccessRights(string name, AccessRights rights, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<SetAccessRightsAsync>d__115")]
public virtual Task SetAccessRightsAsync(string name, AccessRights rights, CancellationToken cancellationToken);
    private ImapCommand QueueRemoveAccessCommand(string name, CancellationToken cancellationToken);
    private void ProcessRemoveAccessResponse(ImapCommand ic);
    public virtual void RemoveAccess(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<RemoveAccessAsync>d__119")]
public virtual Task RemoveAccessAsync(string name, CancellationToken cancellationToken);
    private ImapCommand QueueGetMetadataCommand(MetadataTag tag, CancellationToken cancellationToken);
    private string ProcessGetMetadataResponse(ImapCommand ic, MetadataTag tag);
    public virtual string GetMetadata(MetadataTag tag, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetMetadataAsync>d__123")]
public virtual Task`1<string> GetMetadataAsync(MetadataTag tag, CancellationToken cancellationToken);
    private ImapCommand QueueGetMetadataCommand(MetadataOptions options, IEnumerable`1<MetadataTag> tags, CancellationToken cancellationToken);
    private MetadataCollection ProcessGetMetadataResponse(ImapCommand ic, MetadataOptions options);
    public virtual MetadataCollection GetMetadata(MetadataOptions options, IEnumerable`1<MetadataTag> tags, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetMetadataAsync>d__127")]
public virtual Task`1<MetadataCollection> GetMetadataAsync(MetadataOptions options, IEnumerable`1<MetadataTag> tags, CancellationToken cancellationToken);
    private ImapCommand QueueSetMetadataCommand(MetadataCollection metadata, CancellationToken cancellationToken);
    private void ProcessSetMetadataResponse(ImapCommand ic);
    public virtual void SetMetadata(MetadataCollection metadata, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<SetMetadataAsync>d__131")]
public virtual Task SetMetadataAsync(MetadataCollection metadata, CancellationToken cancellationToken);
    private static void ParseQuotaRoot(ImapEngine engine, ImapCommand ic);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<ParseQuotaRootAsync>d__135")]
private static Task ParseQuotaRootAsync(ImapEngine engine, ImapCommand ic);
    private static Task UntaggedQuotaRootHandler(ImapEngine engine, ImapCommand ic, int index, bool doAsync);
    private static void ParseQuota(ImapEngine engine, ImapCommand ic);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<ParseQuotaAsync>d__138")]
private static Task ParseQuotaAsync(ImapEngine engine, ImapCommand ic);
    private static Task UntaggedQuotaHandler(ImapEngine engine, ImapCommand ic, int index, bool doAsync);
    private ImapCommand QueueGetQuotaCommand(CancellationToken cancellationToken);
    private bool TryProcessGetQuotaResponse(ImapCommand ic, String& encodedName, Quota& quota);
    public virtual FolderQuota GetQuota(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetQuotaAsync>d__143")]
public virtual Task`1<FolderQuota> GetQuotaAsync(CancellationToken cancellationToken);
    private ImapCommand QueueSetQuotaCommand(Nullable`1<UInt32> messageLimit, Nullable`1<UInt32> storageLimit, CancellationToken cancellationToken);
    private FolderQuota ProcessSetQuotaResponse(ImapCommand ic);
    public virtual FolderQuota SetQuota(Nullable`1<UInt32> messageLimit, Nullable`1<UInt32> storageLimit, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<SetQuotaAsync>d__147")]
public virtual Task`1<FolderQuota> SetQuotaAsync(Nullable`1<UInt32> messageLimit, Nullable`1<UInt32> storageLimit, CancellationToken cancellationToken);
    private ImapCommand QueueExpungeCommand(CancellationToken cancellationToken);
    private void ProcessExpungeResponse(ImapCommand ic);
    public virtual void Expunge(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<ExpungeAsync>d__151")]
public virtual Task ExpungeAsync(CancellationToken cancellationToken);
    public virtual void Expunge(IList`1<UniqueId> uids, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<ExpungeAsync>d__153")]
public virtual Task ExpungeAsync(IList`1<UniqueId> uids, CancellationToken cancellationToken);
    private FormatOptions CreateAppendOptions(FormatOptions options);
    private ImapCommand QueueAppendCommand(FormatOptions options, IAppendRequest request, CancellationToken cancellationToken);
    private Nullable`1<UniqueId> ProcessAppendResponse(ImapCommand ic);
    public virtual Nullable`1<UniqueId> Append(FormatOptions options, IAppendRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<AppendAsync>d__158")]
public virtual Task`1<Nullable`1<UniqueId>> AppendAsync(FormatOptions options, IAppendRequest request, CancellationToken cancellationToken);
    private void ValidateArguments(FormatOptions options, IList`1<IAppendRequest> requests);
    private ImapCommand QueueMultiAppendCommand(FormatOptions options, IList`1<IAppendRequest> requests, CancellationToken cancellationToken);
    private IList`1<UniqueId> ProcessMultiAppendResponse(ImapCommand ic);
    public virtual IList`1<UniqueId> Append(FormatOptions options, IList`1<IAppendRequest> requests, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<AppendAsync>d__163")]
public virtual Task`1<IList`1<UniqueId>> AppendAsync(FormatOptions options, IList`1<IAppendRequest> requests, CancellationToken cancellationToken);
    private void ValidateArguments(FormatOptions options, UniqueId uid, IReplaceRequest request);
    private ImapCommand QueueReplaceCommand(FormatOptions options, UniqueId uid, IReplaceRequest request, CancellationToken cancellationToken);
    private Nullable`1<UniqueId> ProcessReplaceResponse(ImapCommand ic);
    public virtual Nullable`1<UniqueId> Replace(FormatOptions options, UniqueId uid, IReplaceRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<ReplaceAsync>d__168")]
public virtual Task`1<Nullable`1<UniqueId>> ReplaceAsync(FormatOptions options, UniqueId uid, IReplaceRequest request, CancellationToken cancellationToken);
    private ImapCommand QueueReplaceCommand(FormatOptions options, int index, IReplaceRequest request, CancellationToken cancellationToken);
    private void ValidateArguments(FormatOptions options, int index, IReplaceRequest request);
    public virtual Nullable`1<UniqueId> Replace(FormatOptions options, int index, IReplaceRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<ReplaceAsync>d__172")]
public virtual Task`1<Nullable`1<UniqueId>> ReplaceAsync(FormatOptions options, int index, IReplaceRequest request, CancellationToken cancellationToken);
    private ImapCommand QueueGetIndexesCommand(IList`1<UniqueId> uids, CancellationToken cancellationToken);
    private IList`1<int> ProcessGetIndexesResponse(ImapCommand ic);
    private IList`1<int> GetIndexes(IList`1<UniqueId> uids, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetIndexesAsync>d__176")]
private Task`1<IList`1<int>> GetIndexesAsync(IList`1<UniqueId> uids, CancellationToken cancellationToken);
    private void ValidateArguments(IList`1<UniqueId> uids, IMailFolder destination);
    private void GetCopiedUids(ImapCommand ic, UniqueIdSet& src, UniqueIdSet& dest);
    private void ProcessCopyToResponse(ImapCommand ic, IMailFolder destination, UniqueIdSet& src, UniqueIdSet& dest);
    public virtual UniqueIdMap CopyTo(IList`1<UniqueId> uids, IMailFolder destination, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<CopyToAsync>d__181")]
public virtual Task`1<UniqueIdMap> CopyToAsync(IList`1<UniqueId> uids, IMailFolder destination, CancellationToken cancellationToken);
    private void ProcessMoveToResponse(ImapCommand ic, IMailFolder destination, UniqueIdSet& src, UniqueIdSet& dest);
    public virtual UniqueIdMap MoveTo(IList`1<UniqueId> uids, IMailFolder destination, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<MoveToAsync>d__184")]
public virtual Task`1<UniqueIdMap> MoveToAsync(IList`1<UniqueId> uids, IMailFolder destination, CancellationToken cancellationToken);
    private void ValidateArguments(IList`1<int> indexes, IMailFolder destination);
    private ImapCommand QueueCopyToCommand(IList`1<int> indexes, IMailFolder destination, CancellationToken cancellationToken);
    private void ProcessCopyToResponse(ImapCommand ic, IMailFolder destination);
    public virtual void CopyTo(IList`1<int> indexes, IMailFolder destination, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<CopyToAsync>d__189")]
public virtual Task CopyToAsync(IList`1<int> indexes, IMailFolder destination, CancellationToken cancellationToken);
    private ImapCommand QueueMoveToCommand(IList`1<int> indexes, IMailFolder destination, CancellationToken cancellationToken);
    private void ProcessMoveToResponse(ImapCommand ic, IMailFolder destination);
    public virtual void MoveTo(IList`1<int> indexes, IMailFolder destination, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<MoveToAsync>d__193")]
public virtual Task MoveToAsync(IList`1<int> indexes, IMailFolder destination, CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetEnumerator>d__194")]
public virtual IEnumerator`1<MimeMessage> GetEnumerator();
    internal void OnExists(int count);
    internal void OnExpunge(int index);
    internal void FlushQueuedEvents();
    private void OnFetchAsyncCompleted(MessageSummary message);
    internal void OnUntaggedFetchResponse(ImapEngine engine, int index, CancellationToken cancellationToken);
    internal Task OnUntaggedFetchResponseAsync(ImapEngine engine, int index, CancellationToken cancellationToken);
    internal void OnRecent(int count);
    private void OnVanished(bool earlier, ImapToken token);
    internal void OnVanished(ImapEngine engine, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<OnVanishedAsync>d__204")]
internal Task OnVanishedAsync(ImapEngine engine, CancellationToken cancellationToken);
    internal void UpdateAttributes(FolderAttributes attrs);
    internal void UpdateAcceptedFlags(MessageFlags flags, ISet`1<string> keywords);
    internal void UnsetAcceptedFlags();
    internal void UnsetPermanentFlags();
    internal void UpdateIsNamespace(bool value);
    internal void UpdateUnread(int count);
    internal void UpdateUidNext(UniqueId uid);
    internal void UpdateAppendLimit(Nullable`1<UInt32> limit);
    internal void UpdateSize(Nullable`1<ulong> size);
    internal void UpdateId(string id);
    internal void UpdateHighestModSeq(ulong modseq);
    internal void UpdateUidValidity(UInt32 validity);
    internal void OnRenamed(ImapFolderConstructorArgs args);
    private IEnumerable`1<ImapCommand> QueueStoreCommands(IList`1<UniqueId> uids, Nullable`1<ulong> modseq, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    private void ProcessStoreAnnotationsResponse(ImapCommand ic);
    public virtual void Store(IList`1<UniqueId> uids, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<StoreAsync>d__221")]
public virtual Task StoreAsync(IList`1<UniqueId> uids, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public virtual IList`1<UniqueId> Store(IList`1<UniqueId> uids, ulong modseq, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<StoreAsync>d__223")]
public virtual Task`1<IList`1<UniqueId>> StoreAsync(IList`1<UniqueId> uids, ulong modseq, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    private ImapCommand QueueStoreCommand(IList`1<int> indexes, Nullable`1<ulong> modseq, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public virtual void Store(IList`1<int> indexes, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<StoreAsync>d__226")]
public virtual Task StoreAsync(IList`1<int> indexes, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    public virtual IList`1<int> Store(IList`1<int> indexes, ulong modseq, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<StoreAsync>d__228")]
public virtual Task`1<IList`1<int>> StoreAsync(IList`1<int> indexes, ulong modseq, IList`1<Annotation> annotations, CancellationToken cancellationToken);
    private static void ReadLiteralData(ImapEngine engine, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<ReadLiteralDataAsync>d__234")]
private static Task ReadLiteralDataAsync(ImapEngine engine, CancellationToken cancellationToken);
    private static void SkipParenthesizedList(ImapEngine engine, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<SkipParenthesizedListAsync>d__236")]
private static Task SkipParenthesizedListAsync(ImapEngine engine, CancellationToken cancellationToken);
    private static Nullable`1<DateTimeOffset> ReadDateTimeOffsetToken(ImapEngine engine, string atom, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<ReadDateTimeOffsetTokenAsync>d__238")]
private static Task`1<Nullable`1<DateTimeOffset>> ReadDateTimeOffsetTokenAsync(ImapEngine engine, string atom, CancellationToken cancellationToken);
    private void ParseSummaryItems(ImapEngine engine, MessageSummary message, FetchSummaryItemsCompletedCallback completed, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<ParseSummaryItemsAsync>d__241")]
private Task ParseSummaryItemsAsync(ImapEngine engine, MessageSummary message, FetchSummaryItemsCompletedCallback completed, CancellationToken cancellationToken);
    private Task UntaggedFetchSummaryItemsHandler(ImapEngine engine, ImapCommand ic, int index, bool doAsync);
    private static bool IsEmptyExclude(HeaderSet headers, bool requestReferences);
    internal static string FormatSummaryItems(ImapEngine engine, IFetchRequest request, Boolean& previewText, bool isNotify);
    private void ProcessFetchResponse(ImapCommand ic);
    private ImapCommand QueueFetchPreviewTextCommand(FetchSummaryContext sctx, KeyValuePair`2<string, UniqueIdSet> pair, int octets, CancellationToken cancellationToken);
    private void FetchPreviewText(FetchSummaryContext sctx, Dictionary`2<string, UniqueIdSet> bodies, int octets, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<FetchPreviewTextAsync>d__249")]
private Task FetchPreviewTextAsync(FetchSummaryContext sctx, Dictionary`2<string, UniqueIdSet> bodies, int octets, CancellationToken cancellationToken);
    private void CreateFetchPreviewTextMappings(FetchSummaryContext sctx, Dictionary`2& textBodies, Dictionary`2& htmlBodies);
    private void GetPreviewText(FetchSummaryContext sctx, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetPreviewTextAsync>d__252")]
private Task GetPreviewTextAsync(FetchSummaryContext sctx, CancellationToken cancellationToken);
    internal static bool IsEmptyFetchRequest(IFetchRequest request);
    private bool CheckCanFetch(IList`1<UniqueId> uids, IFetchRequest request);
    private string CreateFetchCommand(IList`1<UniqueId> uids, IFetchRequest request, Boolean& previewText);
    private static int EstimateInitialCapacity(IList`1<UniqueId> uids);
    public virtual IList`1<IMessageSummary> Fetch(IList`1<UniqueId> uids, IFetchRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<FetchAsync>d__258")]
public virtual Task`1<IList`1<IMessageSummary>> FetchAsync(IList`1<UniqueId> uids, IFetchRequest request, CancellationToken cancellationToken);
    private bool CheckCanFetch(IList`1<int> indexes, IFetchRequest request);
    private ImapCommand QueueFetchCommand(IList`1<int> indexes, IFetchRequest request, CancellationToken cancellationToken, Boolean& previewText);
    public virtual IList`1<IMessageSummary> Fetch(IList`1<int> indexes, IFetchRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<FetchAsync>d__262")]
public virtual Task`1<IList`1<IMessageSummary>> FetchAsync(IList`1<int> indexes, IFetchRequest request, CancellationToken cancellationToken);
    private static string GetFetchRange(int min, int max);
    private bool CheckCanFetch(int min, int max, IFetchRequest request);
    private ImapCommand QueueFetchCommand(int min, int max, IFetchRequest request, CancellationToken cancellationToken, Boolean& previewText);
    public virtual IList`1<IMessageSummary> Fetch(int min, int max, IFetchRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<FetchAsync>d__267")]
public virtual Task`1<IList`1<IMessageSummary>> FetchAsync(int min, int max, IFetchRequest request, CancellationToken cancellationToken);
    protected virtual Stream CreateStream(Nullable`1<UniqueId> uid, string section, int offset, int length);
    protected virtual Stream CommitStream(Stream stream, UniqueId uid, string section, int offset, int length);
    private HeaderList ParseHeaders(Stream stream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<ParseHeadersAsync>d__271")]
private Task`1<HeaderList> ParseHeadersAsync(Stream stream, CancellationToken cancellationToken);
    private MimeMessage ParseMessage(Stream stream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<ParseMessageAsync>d__273")]
private Task`1<MimeMessage> ParseMessageAsync(Stream stream, CancellationToken cancellationToken);
    private MimeEntity ParseEntity(Stream stream, bool dispose, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<ParseEntityAsync>d__275")]
private Task`1<MimeEntity> ParseEntityAsync(Stream stream, bool dispose, CancellationToken cancellationToken);
    private void FetchStream(ImapEngine engine, ImapCommand ic, int index);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<FetchStreamAsync>d__280")]
private Task FetchStreamAsync(ImapEngine engine, ImapCommand ic, int index);
    private Task FetchStreamHandler(ImapEngine engine, ImapCommand ic, int index, bool doAsync);
    private static string GetBodyPartQuery(string partSpec, bool headersOnly, String[]& tags);
    private ImapCommand QueueGetHeadersCommand(UniqueId uid, CancellationToken cancellationToken, ITransferProgress progress, FetchStreamContext& ctx);
    private void ProcessGetHeadersResponse(ImapCommand ic, FetchStreamContext ctx, UniqueId uid, Section& section);
    public virtual HeaderList GetHeaders(UniqueId uid, CancellationToken cancellationToken, ITransferProgress progress);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetHeadersAsync>d__286")]
public virtual Task`1<HeaderList> GetHeadersAsync(UniqueId uid, CancellationToken cancellationToken, ITransferProgress progress);
    private ImapCommand QueueGetHeadersCommand(UniqueId uid, string partSpecifier, CancellationToken cancellationToken, ITransferProgress progress, FetchStreamContext& ctx, String[]& tags);
    private void ProcessGetHeadersResponse(ImapCommand ic, FetchStreamContext ctx, UniqueId uid, String[] tags, Section& section);
    public virtual HeaderList GetHeaders(UniqueId uid, string partSpecifier, CancellationToken cancellationToken, ITransferProgress progress);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetHeadersAsync>d__290")]
public virtual Task`1<HeaderList> GetHeadersAsync(UniqueId uid, string partSpecifier, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual HeaderList GetHeaders(UniqueId uid, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Task`1<HeaderList> GetHeadersAsync(UniqueId uid, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    private ImapCommand QueueGetHeadersCommand(int index, CancellationToken cancellationToken, ITransferProgress progress, FetchStreamContext& ctx);
    private void ProcessGetHeadersResponse(ImapCommand ic, FetchStreamContext ctx, int index, Section& section);
    public virtual HeaderList GetHeaders(int index, CancellationToken cancellationToken, ITransferProgress progress);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetHeadersAsync>d__296")]
public virtual Task`1<HeaderList> GetHeadersAsync(int index, CancellationToken cancellationToken, ITransferProgress progress);
    private ImapCommand QueueGetHeadersCommand(int index, string partSpecifier, CancellationToken cancellationToken, ITransferProgress progress, FetchStreamContext& ctx, String[]& tags);
    private void ProcessGetHeadersResponse(ImapCommand ic, FetchStreamContext ctx, int index, String[] tags, Section& section);
    public virtual HeaderList GetHeaders(int index, string partSpecifier, CancellationToken cancellationToken, ITransferProgress progress);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetHeadersAsync>d__300")]
public virtual Task`1<HeaderList> GetHeadersAsync(int index, string partSpecifier, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual HeaderList GetHeaders(int index, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Task`1<HeaderList> GetHeadersAsync(int index, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    private ImapCommand QueueGetMessageCommand(UniqueId uid, CancellationToken cancellationToken, ITransferProgress progress, FetchStreamContext& ctx);
    private void ProcessGetMessageResponse(ImapCommand ic, FetchStreamContext ctx, UniqueId uid, Section& section);
    public virtual MimeMessage GetMessage(UniqueId uid, CancellationToken cancellationToken, ITransferProgress progress);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetMessageAsync>d__306")]
public virtual Task`1<MimeMessage> GetMessageAsync(UniqueId uid, CancellationToken cancellationToken, ITransferProgress progress);
    private ImapCommand QueueGetMessageCommand(int index, CancellationToken cancellationToken, ITransferProgress progress, FetchStreamContext& ctx);
    private void ProcessGetMessageResponse(ImapCommand ic, FetchStreamContext ctx, int index, Section& section);
    public virtual MimeMessage GetMessage(int index, CancellationToken cancellationToken, ITransferProgress progress);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetMessageAsync>d__310")]
public virtual Task`1<MimeMessage> GetMessageAsync(int index, CancellationToken cancellationToken, ITransferProgress progress);
    private ImapCommand QueueGetBodyPartCommand(UniqueId uid, string partSpecifier, CancellationToken cancellationToken, ITransferProgress progress, FetchStreamContext& ctx, String[]& tags);
    private void ProcessGetBodyPartResponse(ImapCommand ic, FetchStreamContext ctx, UniqueId uid, String[] tags, ChainedStream& chained, Boolean& dispose);
    private void RemoveMessageHeaders(MimeEntity entity);
    public virtual MimeEntity GetBodyPart(UniqueId uid, string partSpecifier, CancellationToken cancellationToken, ITransferProgress progress);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetBodyPartAsync>d__315")]
public virtual Task`1<MimeEntity> GetBodyPartAsync(UniqueId uid, string partSpecifier, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual MimeEntity GetBodyPart(UniqueId uid, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Task`1<MimeEntity> GetBodyPartAsync(UniqueId uid, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    private ImapCommand QueueGetBodyPartCommand(int index, string partSpecifier, CancellationToken cancellationToken, ITransferProgress progress, FetchStreamContext& ctx, String[]& tags);
    private void ProcessGetBodyPartResponse(ImapCommand ic, FetchStreamContext ctx, int index, String[] tags, ChainedStream& chained, Boolean& dispose);
    public virtual MimeEntity GetBodyPart(int index, string partSpecifier, CancellationToken cancellationToken, ITransferProgress progress);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetBodyPartAsync>d__321")]
public virtual Task`1<MimeEntity> GetBodyPartAsync(int index, string partSpecifier, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual MimeEntity GetBodyPart(int index, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Task`1<MimeEntity> GetBodyPartAsync(int index, BodyPart part, CancellationToken cancellationToken, ITransferProgress progress);
    private ImapCommand QueueGetStreamCommand(UniqueId uid, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress, FetchStreamContext& ctx);
    private void ProcessGetStreamResponse(ImapCommand ic, FetchStreamContext ctx, UniqueId uid, Section& section);
    public virtual Stream GetStream(UniqueId uid, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetStreamAsync>d__327")]
public virtual Task`1<Stream> GetStreamAsync(UniqueId uid, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    private ImapCommand QueueGetStreamCommand(int index, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress, FetchStreamContext& ctx);
    private void ProcessGetStreamResponse(ImapCommand ic, FetchStreamContext ctx, int index, Section& section);
    public virtual Stream GetStream(int index, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetStreamAsync>d__331")]
public virtual Task`1<Stream> GetStreamAsync(int index, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    private ImapCommand QueueGetStreamCommand(UniqueId uid, string section, CancellationToken cancellationToken, ITransferProgress progress, FetchStreamContext& ctx);
    private void ProcessGetStreamResponse(ImapCommand ic, FetchStreamContext ctx, UniqueId uid, string section, Section& s);
    public virtual Stream GetStream(UniqueId uid, string section, CancellationToken cancellationToken, ITransferProgress progress);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetStreamAsync>d__335")]
public virtual Task`1<Stream> GetStreamAsync(UniqueId uid, string section, CancellationToken cancellationToken, ITransferProgress progress);
    private ImapCommand QueueGetStreamCommand(UniqueId uid, string section, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress, FetchStreamContext& ctx);
    public virtual Stream GetStream(UniqueId uid, string section, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetStreamAsync>d__338")]
public virtual Task`1<Stream> GetStreamAsync(UniqueId uid, string section, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    private ImapCommand QueueGetStreamCommand(int index, string section, CancellationToken cancellationToken, ITransferProgress progress, FetchStreamContext& ctx);
    private void ProcessGetStreamResponse(ImapCommand ic, FetchStreamContext ctx, int index, string section, Section& s);
    public virtual Stream GetStream(int index, string section, CancellationToken cancellationToken, ITransferProgress progress);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetStreamAsync>d__342")]
public virtual Task`1<Stream> GetStreamAsync(int index, string section, CancellationToken cancellationToken, ITransferProgress progress);
    private ImapCommand QueueGetStreamCommand(int index, string section, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress, FetchStreamContext& ctx);
    public virtual Stream GetStream(int index, string section, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetStreamAsync>d__345")]
public virtual Task`1<Stream> GetStreamAsync(int index, string section, int offset, int count, CancellationToken cancellationToken, ITransferProgress progress);
    private void ValidateArguments(IList`1<UniqueId> uids, object callback);
    [IteratorStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<QueueGetStreamsCommands>d__348")]
private IEnumerable`1<ImapCommand> QueueGetStreamsCommands(FetchStreamCallbackContext ctx, IList`1<UniqueId> uids, object callback, CancellationToken cancellationToken);
    public virtual void GetStreams(IList`1<UniqueId> uids, ImapFetchStreamCallback callback, CancellationToken cancellationToken, ITransferProgress progress);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetStreamsAsync>d__350")]
public virtual Task GetStreamsAsync(IList`1<UniqueId> uids, ImapFetchStreamAsyncCallback callback, CancellationToken cancellationToken, ITransferProgress progress);
    private void ValidateArguments(IList`1<int> indexes, object callback);
    private ImapCommand QueueGetStreamsCommand(FetchStreamCallbackContext ctx, IList`1<int> indexes, CancellationToken cancellationToken);
    public virtual void GetStreams(IList`1<int> indexes, ImapFetchStreamCallback callback, CancellationToken cancellationToken, ITransferProgress progress);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetStreamsAsync>d__354")]
public virtual Task GetStreamsAsync(IList`1<int> indexes, ImapFetchStreamAsyncCallback callback, CancellationToken cancellationToken, ITransferProgress progress);
    private void ValidateArguments(int min, int max, object callback);
    private ImapCommand QueueGetStreamsCommand(FetchStreamCallbackContext ctx, int min, int max, CancellationToken cancellationToken);
    public virtual void GetStreams(int min, int max, ImapFetchStreamCallback callback, CancellationToken cancellationToken, ITransferProgress progress);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<GetStreamsAsync>d__358")]
public virtual Task GetStreamsAsync(int min, int max, ImapFetchStreamAsyncCallback callback, CancellationToken cancellationToken, ITransferProgress progress);
    private static void ProcessUnmodified(ImapCommand ic, UniqueIdSet& uids, Nullable`1<ulong> modseq);
    private void ProcessStoreResponse(ImapCommand ic);
    private static IList`1<int> GetUnmodified(ImapCommand ic, Nullable`1<ulong> modseq);
    private IEnumerable`1<ImapCommand> QueueStoreCommands(IList`1<UniqueId> uids, IStoreFlagsRequest request, CancellationToken cancellationToken);
    public virtual IList`1<UniqueId> Store(IList`1<UniqueId> uids, IStoreFlagsRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<StoreAsync>d__366")]
public virtual Task`1<IList`1<UniqueId>> StoreAsync(IList`1<UniqueId> uids, IStoreFlagsRequest request, CancellationToken cancellationToken);
    private ImapCommand QueueStoreCommand(IList`1<int> indexes, IStoreFlagsRequest request, CancellationToken cancellationToken);
    public virtual IList`1<int> Store(IList`1<int> indexes, IStoreFlagsRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<StoreAsync>d__369")]
public virtual Task`1<IList`1<int>> StoreAsync(IList`1<int> indexes, IStoreFlagsRequest request, CancellationToken cancellationToken);
    private void AppendLabelList(StringBuilder command, ISet`1<string> labels, List`1<object> args);
    private IEnumerable`1<ImapCommand> QueueStoreCommands(IList`1<UniqueId> uids, IStoreLabelsRequest request, CancellationToken cancellationToken);
    public virtual IList`1<UniqueId> Store(IList`1<UniqueId> uids, IStoreLabelsRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<StoreAsync>d__373")]
public virtual Task`1<IList`1<UniqueId>> StoreAsync(IList`1<UniqueId> uids, IStoreLabelsRequest request, CancellationToken cancellationToken);
    private ImapCommand QueueStoreCommand(IList`1<int> indexes, IStoreLabelsRequest request, CancellationToken cancellationToken);
    public virtual IList`1<int> Store(IList`1<int> indexes, IStoreLabelsRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<StoreAsync>d__376")]
public virtual Task`1<IList`1<int>> StoreAsync(IList`1<int> indexes, IStoreLabelsRequest request, CancellationToken cancellationToken);
    private static bool IsAscii(string text);
    private static string FormatDateTime(DateTime date);
    private bool IsBadCharset(ImapCommand ic, string charset);
    private void AddTextArgument(StringBuilder builder, List`1<object> args, string text, String& charset);
    private void BuildQuery(StringBuilder builder, SearchQuery query, List`1<object> args, bool parens, String& charset);
    private string BuildQueryExpression(SearchQuery query, List`1<object> args, String& charset);
    private string BuildSortOrder(IList`1<OrderBy> orderBy);
    private static void ParseESearchResults(ImapEngine engine, ImapCommand ic, SearchResults results);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<ParseESearchResultsAsync>d__385")]
private static Task ParseESearchResultsAsync(ImapEngine engine, ImapCommand ic, SearchResults results);
    private static Task UntaggedESearchHandler(ImapEngine engine, ImapCommand ic, int index, bool doAsync);
    private static void ParseSearchResults(ImapEngine engine, ImapCommand ic, SearchResults results);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<ParseSearchResultsAsync>d__388")]
private static Task ParseSearchResultsAsync(ImapEngine engine, ImapCommand ic, SearchResults results);
    private static Task UntaggedSearchHandler(ImapEngine engine, ImapCommand ic, int index, bool doAsync);
    private ImapCommand QueueSearchCommand(string query, CancellationToken cancellationToken);
    private SearchResults ProcessSearchResponse(ImapCommand ic);
    public virtual SearchResults Search(string query, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<SearchAsync>d__393")]
public virtual Task`1<SearchResults> SearchAsync(string query, CancellationToken cancellationToken);
    private ImapCommand QueueSearchCommand(SearchOptions options, SearchQuery query, CancellationToken cancellationToken, String& charset);
    private bool TryProcessSearchResponse(ImapCommand ic, string charset, bool retry, SearchResults& results);
    private SearchResults Search(SearchOptions options, SearchQuery query, bool retry, CancellationToken cancellationToken);
    public virtual SearchResults Search(SearchOptions options, SearchQuery query, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<SearchAsync>d__398")]
private Task`1<SearchResults> SearchAsync(SearchOptions options, SearchQuery query, bool retry, CancellationToken cancellationToken);
    public virtual Task`1<SearchResults> SearchAsync(SearchOptions options, SearchQuery query, CancellationToken cancellationToken);
    private ImapCommand QueueSortCommand(string query, CancellationToken cancellationToken);
    private SearchResults ProcessSortResponse(ImapCommand ic);
    public virtual SearchResults Sort(string query, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<SortAsync>d__403")]
public virtual Task`1<SearchResults> SortAsync(string query, CancellationToken cancellationToken);
    private ImapCommand QueueSortCommand(SearchQuery query, IList`1<OrderBy> orderBy, CancellationToken cancellationToken, String& charset);
    private bool TryProcessSortResponse(ImapCommand ic, string charset, bool retry, IList`1& results);
    private IList`1<UniqueId> Sort(SearchQuery query, IList`1<OrderBy> orderBy, bool retry, CancellationToken cancellationToken);
    public virtual IList`1<UniqueId> Sort(SearchQuery query, IList`1<OrderBy> orderBy, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<SortAsync>d__408")]
private Task`1<IList`1<UniqueId>> SortAsync(SearchQuery query, IList`1<OrderBy> orderBy, bool retry, CancellationToken cancellationToken);
    public virtual Task`1<IList`1<UniqueId>> SortAsync(SearchQuery query, IList`1<OrderBy> orderBy, CancellationToken cancellationToken);
    private ImapCommand QueueSortCommand(SearchOptions options, SearchQuery query, IList`1<OrderBy> orderBy, CancellationToken cancellationToken, String& charset);
    private bool TryProcessSortResponse(ImapCommand ic, string charset, bool retry, SearchResults& results);
    private SearchResults Sort(SearchOptions options, SearchQuery query, IList`1<OrderBy> orderBy, bool retry, CancellationToken cancellationToken);
    public virtual SearchResults Sort(SearchOptions options, SearchQuery query, IList`1<OrderBy> orderBy, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<SortAsync>d__414")]
private Task`1<SearchResults> SortAsync(SearchOptions options, SearchQuery query, IList`1<OrderBy> orderBy, bool retry, CancellationToken cancellationToken);
    public virtual Task`1<SearchResults> SortAsync(SearchOptions options, SearchQuery query, IList`1<OrderBy> orderBy, CancellationToken cancellationToken);
    private ImapCommand QueueThreadCommand(ThreadingAlgorithm algorithm, SearchQuery query, CancellationToken cancellationToken, String& charset);
    private bool TryProcessThreadResponse(ImapCommand ic, string charset, bool retry, IList`1& threads);
    private IList`1<MessageThread> Thread(ThreadingAlgorithm algorithm, SearchQuery query, bool retry, CancellationToken cancellationToken);
    public virtual IList`1<MessageThread> Thread(ThreadingAlgorithm algorithm, SearchQuery query, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<ThreadAsync>d__420")]
private Task`1<IList`1<MessageThread>> ThreadAsync(ThreadingAlgorithm algorithm, SearchQuery query, bool retry, CancellationToken cancellationToken);
    public virtual Task`1<IList`1<MessageThread>> ThreadAsync(ThreadingAlgorithm algorithm, SearchQuery query, CancellationToken cancellationToken);
    private ImapCommand QueueThreadCommand(IList`1<UniqueId> uids, ThreadingAlgorithm algorithm, SearchQuery query, CancellationToken cancellationToken, String& charset);
    private IList`1<MessageThread> Thread(IList`1<UniqueId> uids, ThreadingAlgorithm algorithm, SearchQuery query, bool retry, CancellationToken cancellationToken);
    public virtual IList`1<MessageThread> Thread(IList`1<UniqueId> uids, ThreadingAlgorithm algorithm, SearchQuery query, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapFolder/<ThreadAsync>d__425")]
private Task`1<IList`1<MessageThread>> ThreadAsync(IList`1<UniqueId> uids, ThreadingAlgorithm algorithm, SearchQuery query, bool retry, CancellationToken cancellationToken);
    public virtual Task`1<IList`1<MessageThread>> ThreadAsync(IList`1<UniqueId> uids, ThreadingAlgorithm algorithm, SearchQuery query, CancellationToken cancellationToken);
}
public class MailKit.Net.Imap.ImapFolderConstructorArgs : object {
    internal string EncodedName;
    internal ImapEngine Engine;
    [CompilerGeneratedAttribute]
private FolderAttributes <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private char <DirectorySeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public FolderAttributes Attributes { get; private set; }
    public char DirectorySeparator { get; private set; }
    public string FullName { get; private set; }
    public string Name { get; private set; }
    internal ImapFolderConstructorArgs(ImapEngine engine, string encodedName, FolderAttributes attributes, char delim);
    [CompilerGeneratedAttribute]
public FolderAttributes get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(FolderAttributes value);
    [CompilerGeneratedAttribute]
public char get_DirectorySeparator();
    [CompilerGeneratedAttribute]
private void set_DirectorySeparator(char value);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
private void set_FullName(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    private static string GetBaseName(string fullName, char delim);
}
internal class MailKit.Net.Imap.ImapFolderNameComparer : object {
    public char DirectorySeparator;
    public ImapFolderNameComparer(char directorySeparator);
    public sealed virtual bool Equals(string x, string y);
    public sealed virtual int GetHashCode(string obj);
}
internal class MailKit.Net.Imap.ImapIdleContext : object {
    private static Byte[] DoneCommand;
    private CancellationTokenRegistration registration;
    [CompilerGeneratedAttribute]
private ImapEngine <Engine>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <DoneToken>k__BackingField;
    public ImapEngine Engine { get; private set; }
    public CancellationToken CancellationToken { get; private set; }
    public CancellationToken DoneToken { get; private set; }
    public ImapIdleContext(ImapEngine engine, CancellationToken doneToken, CancellationToken cancellationToken);
    private static ImapIdleContext();
    [CompilerGeneratedAttribute]
public ImapEngine get_Engine();
    [CompilerGeneratedAttribute]
private void set_Engine(ImapEngine value);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
private void set_CancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
public CancellationToken get_DoneToken();
    [CompilerGeneratedAttribute]
private void set_DoneToken(CancellationToken value);
    private void IdleComplete();
    public Task ContinuationHandler(ImapEngine engine, ImapCommand ic, string text, bool doAsync);
    public sealed virtual void Dispose();
}
public class MailKit.Net.Imap.ImapImplementation : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Properties>k__BackingField;
    public Dictionary`2<string, string> Properties { get; private set; }
    public string Name { get; public set; }
    public string Version { get; public set; }
    public string OS { get; public set; }
    public string OSVersion { get; public set; }
    public string Vendor { get; public set; }
    public string SupportUrl { get; public set; }
    public string Address { get; public set; }
    public string ReleaseDate { get; public set; }
    public string Command { get; public set; }
    public string Arguments { get; public set; }
    public string Environment { get; public set; }
    private string GetProperty(string property);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(Dictionary`2<string, string> value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Version();
    public void set_Version(string value);
    public string get_OS();
    public void set_OS(string value);
    public string get_OSVersion();
    public void set_OSVersion(string value);
    public string get_Vendor();
    public void set_Vendor(string value);
    public string get_SupportUrl();
    public void set_SupportUrl(string value);
    public string get_Address();
    public void set_Address(string value);
    public string get_ReleaseDate();
    public void set_ReleaseDate(string value);
    public string get_Command();
    public void set_Command(string value);
    public string get_Arguments();
    public void set_Arguments(string value);
    public string get_Environment();
    public void set_Environment(string value);
}
internal class MailKit.Net.Imap.ImapLiteral : object {
    public ImapLiteralType Type;
    public object Literal;
    private FormatOptions format;
    private Action`1<int> update;
    public long Length { get; }
    public ImapLiteral(FormatOptions options, MimeMessage message, Action`1<int> action);
    public ImapLiteral(FormatOptions options, Byte[] literal);
    public long get_Length();
    public void WriteTo(ImapStream stream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapLiteral/<WriteToAsync>d__9")]
public Task WriteToAsync(ImapStream stream, CancellationToken cancellationToken);
}
internal enum MailKit.Net.Imap.ImapLiteralType : Enum {
    public int value__;
    public static ImapLiteralType String;
    public static ImapLiteralType MimeMessage;
}
public class MailKit.Net.Imap.ImapMailboxFilter : object {
    public static ImapMailboxFilter Selected;
    public static ImapMailboxFilter SelectedDelayed;
    public static ImapMailboxFilter Inboxes;
    public static ImapMailboxFilter Personal;
    public static ImapMailboxFilter Subscribed;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    internal ImapMailboxFilter(string name);
    private static ImapMailboxFilter();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    internal virtual void Format(ImapEngine engine, StringBuilder command, IList`1<object> args);
}
public class MailKit.Net.Imap.ImapProtocolException : ProtocolException {
    [CompilerGeneratedAttribute]
private bool <UnexpectedToken>k__BackingField;
    internal bool UnexpectedToken { get; internal set; }
    [SecuritySafeCriticalAttribute]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
protected ImapProtocolException(SerializationInfo info, StreamingContext context);
    public ImapProtocolException(string message, Exception innerException);
    public ImapProtocolException(string message);
    [CompilerGeneratedAttribute]
internal bool get_UnexpectedToken();
    [CompilerGeneratedAttribute]
internal void set_UnexpectedToken(bool value);
}
internal enum MailKit.Net.Imap.ImapProtocolVersion : Enum {
    public int value__;
    public static ImapProtocolVersion Unknown;
    public static ImapProtocolVersion IMAP4;
    public static ImapProtocolVersion IMAP4rev1;
    public static ImapProtocolVersion IMAP4rev2;
}
internal enum MailKit.Net.Imap.ImapQuirksMode : Enum {
    public int value__;
    public static ImapQuirksMode None;
    public static ImapQuirksMode Courier;
    public static ImapQuirksMode Cyrus;
    public static ImapQuirksMode Domino;
    public static ImapQuirksMode Dovecot;
    public static ImapQuirksMode Exchange;
    public static ImapQuirksMode Exchange2003;
    public static ImapQuirksMode Exchange2007;
    public static ImapQuirksMode GMail;
    public static ImapQuirksMode hMailServer;
    public static ImapQuirksMode ProtonMail;
    public static ImapQuirksMode SmarterMail;
    public static ImapQuirksMode SunMicrosystems;
    public static ImapQuirksMode UW;
    public static ImapQuirksMode Yahoo;
    public static ImapQuirksMode Yandex;
}
internal class MailKit.Net.Imap.ImapResponseCode : object {
    public ImapResponseCodeType Type;
    public bool IsTagged;
    public bool IsError;
    public string Message;
    internal ImapResponseCode(ImapResponseCodeType type, bool isError);
    public static ImapResponseCode Create(ImapResponseCodeType type);
}
internal enum MailKit.Net.Imap.ImapResponseCodeType : Enum {
    public byte value__;
    public static ImapResponseCodeType Alert;
    public static ImapResponseCodeType BadCharset;
    public static ImapResponseCodeType Capability;
    public static ImapResponseCodeType NewName;
    public static ImapResponseCodeType Parse;
    public static ImapResponseCodeType PermanentFlags;
    public static ImapResponseCodeType ReadOnly;
    public static ImapResponseCodeType ReadWrite;
    public static ImapResponseCodeType TryCreate;
    public static ImapResponseCodeType UidNext;
    public static ImapResponseCodeType UidValidity;
    public static ImapResponseCodeType Unseen;
    public static ImapResponseCodeType Referral;
    public static ImapResponseCodeType UnknownCte;
    public static ImapResponseCodeType AppendUid;
    public static ImapResponseCodeType CopyUid;
    public static ImapResponseCodeType UidNotSticky;
    public static ImapResponseCodeType UrlMech;
    public static ImapResponseCodeType BadUrl;
    public static ImapResponseCodeType TooBig;
    public static ImapResponseCodeType HighestModSeq;
    public static ImapResponseCodeType Modified;
    public static ImapResponseCodeType NoModSeq;
    public static ImapResponseCodeType CompressionActive;
    public static ImapResponseCodeType Closed;
    public static ImapResponseCodeType NotSaved;
    public static ImapResponseCodeType BadComparator;
    public static ImapResponseCodeType Annotate;
    public static ImapResponseCodeType Annotations;
    public static ImapResponseCodeType MaxConvertMessages;
    public static ImapResponseCodeType MaxConvertParts;
    public static ImapResponseCodeType TempFail;
    public static ImapResponseCodeType NoUpdate;
    public static ImapResponseCodeType Metadata;
    public static ImapResponseCodeType NotificationOverflow;
    public static ImapResponseCodeType BadEvent;
    public static ImapResponseCodeType UndefinedFilter;
    public static ImapResponseCodeType Unavailable;
    public static ImapResponseCodeType AuthenticationFailed;
    public static ImapResponseCodeType AuthorizationFailed;
    public static ImapResponseCodeType Expired;
    public static ImapResponseCodeType PrivacyRequired;
    public static ImapResponseCodeType ContactAdmin;
    public static ImapResponseCodeType NoPerm;
    public static ImapResponseCodeType InUse;
    public static ImapResponseCodeType ExpungeIssued;
    public static ImapResponseCodeType Corruption;
    public static ImapResponseCodeType ServerBug;
    public static ImapResponseCodeType ClientBug;
    public static ImapResponseCodeType CanNot;
    public static ImapResponseCodeType Limit;
    public static ImapResponseCodeType OverQuota;
    public static ImapResponseCodeType AlreadyExists;
    public static ImapResponseCodeType NonExistent;
    public static ImapResponseCodeType UseAttr;
    public static ImapResponseCodeType MailboxId;
    public static ImapResponseCodeType WebAlert;
    public static ImapResponseCodeType Unknown;
}
internal class MailKit.Net.Imap.ImapSearchQueryOptimizer : object {
    public sealed virtual SearchQuery Reduce(SearchQuery expr);
}
internal class MailKit.Net.Imap.ImapStream : Stream {
    public static string AtomSpecials;
    public static string DefaultSpecials;
    private static int ReadAheadSize;
    private static int BlockSize;
    private static int PadSize;
    private Byte[] input;
    private static int inputStart;
    private int inputIndex;
    private int inputEnd;
    private Byte[] output;
    private int outputIndex;
    private Stack`1<ImapToken> tokens;
    private IProtocolLogger logger;
    private int literalDataLeft;
    private bool disposed;
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private ImapStreamMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConnected>k__BackingField;
    public Stream Stream { get; internal set; }
    public ImapStreamMode Mode { get; public set; }
    public int LiteralLength { get; internal set; }
    public bool IsConnected { get; private set; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public long Position { get; public set; }
    public long Length { get; }
    public ImapStream(Stream source, IProtocolLogger protocolLogger);
    [CompilerGeneratedAttribute]
public Stream get_Stream();
    [CompilerGeneratedAttribute]
internal void set_Stream(Stream value);
    [CompilerGeneratedAttribute]
public ImapStreamMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(ImapStreamMode value);
    public int get_LiteralLength();
    internal void set_LiteralLength(int value);
    [CompilerGeneratedAttribute]
public bool get_IsConnected();
    [CompilerGeneratedAttribute]
private void set_IsConnected(bool value);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long get_Length();
    private bool AlignReadAheadBuffer(int atleast, Int32& left, Int32& start, Int32& end);
    private int ReadAhead(int atleast, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapStream/<ReadAheadAsync>d__52")]
private ValueTask`1<int> ReadAheadAsync(int atleast, CancellationToken cancellationToken);
    private static void ValidateArguments(Byte[] buffer, int offset, int count);
    private void CheckDisposed();
    public sealed virtual int Read(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapStream/<ReadAsync>d__57")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    private static bool IsAtom(byte c, string specials);
    private static bool IsCtrl(byte c);
    private static bool IsWhiteSpace(byte c);
    private bool TryReadQuotedString(ByteArrayBuilder builder, Boolean& escaped);
    private ImapToken ReadQuotedStringToken(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapStream/<ReadQuotedStringTokenAsync>d__63")]
private ValueTask`1<ImapToken> ReadQuotedStringTokenAsync(CancellationToken cancellationToken);
    private bool TryReadAtomString(ImapTokenType type, ByteArrayBuilder builder, string specials);
    private ImapToken ReadAtomString(ImapTokenType type, string specials, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapStream/<ReadAtomStringAsync>d__66")]
private ValueTask`1<ImapToken> ReadAtomStringAsync(ImapTokenType type, string specials, CancellationToken cancellationToken);
    private ImapToken ReadAtomToken(string specials, CancellationToken cancellationToken);
    private ValueTask`1<ImapToken> ReadAtomTokenAsync(string specials, CancellationToken cancellationToken);
    private ImapToken ReadFlagToken(string specials, CancellationToken cancellationToken);
    private ValueTask`1<ImapToken> ReadFlagTokenAsync(string specials, CancellationToken cancellationToken);
    private bool TryReadLiteralTokenValue(ByteArrayBuilder builder);
    private bool TryReadUntilCloseCurlyBrace(ByteArrayBuilder builder);
    private bool TrySkipUntilNewLine();
    private ImapToken ReadLiteralToken(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapStream/<ReadLiteralTokenAsync>d__75")]
private ValueTask`1<ImapToken> ReadLiteralTokenAsync(CancellationToken cancellationToken);
    private bool TrySkipWhiteSpace();
    public ImapToken ReadToken(string specials, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapStream/<ReadTokenAsync>d__78")]
public ValueTask`1<ImapToken> ReadTokenAsync(string specials, CancellationToken cancellationToken);
    public ImapToken ReadToken(CancellationToken cancellationToken);
    public ValueTask`1<ImapToken> ReadTokenAsync(CancellationToken cancellationToken);
    public void UngetToken(ImapToken token);
    private bool TryReadLine(ByteArrayBuilder builder);
    internal bool ReadLine(ByteArrayBuilder builder, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapStream/<ReadLineAsync>d__84")]
internal ValueTask`1<bool> ReadLineAsync(ByteArrayBuilder builder, CancellationToken cancellationToken);
    private void AppendToOutputBuffer(Byte[] buffer, Int32& index, Int32& left);
    public sealed virtual void Write(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapStream/<WriteAsync>d__88")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public sealed virtual void Flush(CancellationToken cancellationToken);
    public virtual void Flush();
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapStream/<FlushAsync>d__91")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    protected virtual void Dispose(bool disposing);
}
internal enum MailKit.Net.Imap.ImapStreamMode : Enum {
    public int value__;
    public static ImapStreamMode Token;
    public static ImapStreamMode Literal;
}
internal enum MailKit.Net.Imap.ImapStringType : Enum {
    public int value__;
    public static ImapStringType Atom;
    public static ImapStringType QString;
    public static ImapStringType Literal;
    public static ImapStringType Nil;
}
internal class MailKit.Net.Imap.ImapToken : object {
    public static ImapToken Plus;
    public static ImapToken Asterisk;
    public static ImapToken OpenParen;
    public static ImapToken CloseParen;
    public static ImapToken OpenBracket;
    public static ImapToken CloseBracket;
    public static ImapToken Nil;
    public static ImapToken Eoln;
    private static ImapToken[] CommonMessageFlagTokens;
    private static List`1<ImapToken> NilTokens;
    private static ImapToken Ok;
    private static ImapToken Fetch;
    private static ImapToken Body;
    private static ImapToken BodyStructure;
    private static ImapToken Envelope;
    private static ImapToken Flags;
    private static ImapToken InternalDate;
    private static ImapToken ModSeq;
    private static ImapToken Rfc822Size;
    private static ImapToken Uid;
    private static ImapToken XGMLabels;
    private static ImapToken XGMMsgId;
    private static ImapToken XGMThrId;
    public ImapTokenType Type;
    public object Value;
    private ImapToken(ImapTokenType type, object value);
    private static ImapToken();
    public static ImapToken Create(ImapTokenType type, char c);
    public static ImapToken Create(ImapTokenType type, int literalLength);
    public static ImapToken Create(ImapTokenType type, ByteArrayBuilder builder);
    public static ImapToken Create(ImapTokenType type, string value);
    public virtual string ToString();
}
internal enum MailKit.Net.Imap.ImapTokenType : Enum {
    public int value__;
    public static ImapTokenType NoData;
    public static ImapTokenType Error;
    public static ImapTokenType Nil;
    public static ImapTokenType Atom;
    public static ImapTokenType Flag;
    public static ImapTokenType QString;
    public static ImapTokenType Literal;
    public static ImapTokenType Eoln;
    public static ImapTokenType OpenParen;
    public static ImapTokenType CloseParen;
    public static ImapTokenType Asterisk;
    public static ImapTokenType OpenBracket;
    public static ImapTokenType CloseBracket;
    public static ImapTokenType Plus;
}
internal class MailKit.Net.Imap.ImapUntaggedHandler : MulticastDelegate {
    public ImapUntaggedHandler(object object, IntPtr method);
    public virtual Task Invoke(ImapEngine engine, ImapCommand ic, int index, bool doAsync);
    public virtual IAsyncResult BeginInvoke(ImapEngine engine, ImapCommand ic, int index, bool doAsync, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
internal enum MailKit.Net.Imap.ImapUntaggedResult : Enum {
    public int value__;
    public static ImapUntaggedResult Ok;
    public static ImapUntaggedResult No;
    public static ImapUntaggedResult Bad;
    public static ImapUntaggedResult Handled;
}
internal static class MailKit.Net.Imap.ImapUtils : object {
    private static FolderAttributes SpecialUseAttributes;
    private static string QuotedSpecials;
    private static int InboxLength;
    private static String[] Months;
    private static ImapUtils();
    public static string FormatInternalDate(DateTimeOffset date);
    private static bool TryGetInt32(string text, Int32& index, Int32& value);
    private static bool TryGetInt32(string text, Int32& index, char delim, Int32& value);
    private static bool TryGetMonth(string text, Int32& index, char delim, Int32& month);
    private static bool TryGetTimeZone(string text, Int32& index, TimeSpan& timezone);
    public static DateTimeOffset ParseInternalDate(string text);
    public static void FormatAnnotations(StringBuilder command, IList`1<Annotation> annotations, List`1<object> args, bool throwOnError);
    public static void FormatIndexSet(ImapEngine engine, StringBuilder builder, IList`1<int> indexes);
    public static string FormatIndexSet(ImapEngine engine, IList`1<int> indexes);
    private static void ParseImplementation(ImapEngine engine, ImapCommand ic);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ParseImplementationAsync>d__14")]
private static Task ParseImplementationAsync(ImapEngine engine, ImapCommand ic);
    public static Task UntaggedIdHandler(ImapEngine engine, ImapCommand ic, int index, bool doAsync);
    public static string CanonicalizeMailboxName(string mailboxName, char directorySeparator);
    public static bool IsInbox(string mailboxName);
    private static string ReadFolderName(ImapEngine engine, char delim, string format, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ReadFolderNameAsync>d__19")]
private static Task`1<string> ReadFolderNameAsync(ImapEngine engine, char delim, string format, CancellationToken cancellationToken);
    private static void AddFolderAttribute(FolderAttributes& attrs, string atom);
    private static void AddFolder(ImapEngine engine, List`1<ImapFolder> list, ImapFolder folder, string encodedName, char delim, FolderAttributes attrs, bool isLsub, bool returnsSubscribed);
    private static void ProcessListExtensionProperty(ImapEngine engine, ImapFolder& folder, string encodedName, char delim, FolderAttributes attrs, string property, string value);
    private static char ParseFolderSeparator(ImapToken token, string format);
    public static void ParseFolderList(ImapEngine engine, List`1<ImapFolder> list, bool isLsub, bool returnsSubscribed, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ParseFolderListAsync>d__25")]
public static Task ParseFolderListAsync(ImapEngine engine, List`1<ImapFolder> list, bool isLsub, bool returnsSubscribed, CancellationToken cancellationToken);
    public static Task UntaggedListHandler(ImapEngine engine, ImapCommand ic, int index, bool doAsync);
    public static void ParseMetadata(ImapEngine engine, MetadataCollection metadata, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ParseMetadataAsync>d__28")]
public static Task ParseMetadataAsync(ImapEngine engine, MetadataCollection metadata, CancellationToken cancellationToken);
    public static Task UntaggedMetadataHandler(ImapEngine engine, ImapCommand ic, int index, bool doAsync);
    internal static string ReadStringToken(ImapEngine engine, string format, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ReadStringTokenAsync>d__31")]
internal static ValueTask`1<string> ReadStringTokenAsync(ImapEngine engine, string format, CancellationToken cancellationToken);
    internal static string ReadNStringToken(ImapEngine engine, string format, bool rfc2047, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ReadNStringTokenAsync>d__33")]
internal static ValueTask`1<string> ReadNStringTokenAsync(ImapEngine engine, string format, bool rfc2047, CancellationToken cancellationToken);
    private static UInt32 ParseNumberToken(ImapToken token, string format);
    private static UInt32 ReadNumber(ImapEngine engine, string format, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ReadNumberAsync>d__36")]
private static ValueTask`1<UInt32> ReadNumberAsync(ImapEngine engine, string format, CancellationToken cancellationToken);
    private static bool NeedsQuoting(string value);
    private static void ParseParameterList(StringBuilder builder, ImapEngine engine, string format, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ParseParameterListAsync>d__39")]
private static Task ParseParameterListAsync(StringBuilder builder, ImapEngine engine, string format, CancellationToken cancellationToken);
    private static bool IsMediaTypeWithDefaultSubtype(string type, String& subtype);
    private static ContentType ParseContentType(ImapEngine engine, string format, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ParseContentTypeAsync>d__42")]
private static Task`1<ContentType> ParseContentTypeAsync(ImapEngine engine, string format, CancellationToken cancellationToken);
    private static ContentDisposition ParseContentDisposition(ImapEngine engine, string format, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ParseContentDispositionAsync>d__44")]
private static Task`1<ContentDisposition> ParseContentDispositionAsync(ImapEngine engine, string format, CancellationToken cancellationToken);
    private static String[] ParseContentLanguage(ImapEngine engine, string format, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ParseContentLanguageAsync>d__46")]
private static Task`1<String[]> ParseContentLanguageAsync(ImapEngine engine, string format, CancellationToken cancellationToken);
    private static Uri ParseContentLocation(string location);
    private static Uri ParseContentLocation(ImapEngine engine, string format, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ParseContentLocationAsync>d__49")]
private static Task`1<Uri> ParseContentLocationAsync(ImapEngine engine, string format, CancellationToken cancellationToken);
    private static void SkipBodyExtension(ImapEngine engine, string format, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<SkipBodyExtensionAsync>d__51")]
private static Task SkipBodyExtensionAsync(ImapEngine engine, string format, CancellationToken cancellationToken);
    private static BodyPart ParseMultipart(ImapEngine engine, string format, string path, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ParseMultipartAsync>d__53")]
private static Task`1<BodyPart> ParseMultipartAsync(ImapEngine engine, string format, string path, CancellationToken cancellationToken);
    private static bool ShouldParseMultipart(ImapEngine engine, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ShouldParseMultipartAsync>d__55")]
private static Task`1<bool> ShouldParseMultipartAsync(ImapEngine engine, CancellationToken cancellationToken);
    public static BodyPart ParseBody(ImapEngine engine, string format, string path, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ParseBodyAsync>d__57")]
public static Task`1<BodyPart> ParseBodyAsync(ImapEngine engine, string format, string path, CancellationToken cancellationToken);
    private static bool TryAddEnvelopeAddressToken(ImapToken token, Int32& index, String[] values, Boolean[] qstrings, string format);
    private static EnvelopeAddress ParseEnvelopeAddress(ImapEngine engine, string format, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ParseEnvelopeAddressAsync>d__61")]
private static Task`1<EnvelopeAddress> ParseEnvelopeAddressAsync(ImapEngine engine, string format, CancellationToken cancellationToken);
    private static void AddEnvelopeAddress(ImapEngine engine, List`1<InternetAddressList> stack, Int32& sp, EnvelopeAddress address);
    private static void ParseEnvelopeAddressList(InternetAddressList list, ImapEngine engine, string format, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ParseEnvelopeAddressListAsync>d__64")]
private static Task ParseEnvelopeAddressListAsync(InternetAddressList list, ImapEngine engine, string format, CancellationToken cancellationToken);
    private static Nullable`1<DateTimeOffset> ParseEnvelopeDate(ImapEngine engine, string format, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ParseEnvelopeDateAsync>d__66")]
private static Task`1<Nullable`1<DateTimeOffset>> ParseEnvelopeDateAsync(ImapEngine engine, string format, CancellationToken cancellationToken);
    public static Envelope ParseEnvelope(ImapEngine engine, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ParseEnvelopeAsync>d__68")]
public static Task`1<Envelope> ParseEnvelopeAsync(ImapEngine engine, CancellationToken cancellationToken);
    public static void FormatFlagsList(StringBuilder builder, MessageFlags flags, int numKeywords);
    public static string FormatFlagsList(MessageFlags flags, int numKeywords);
    private static void AddFlag(ImapToken token, MessageFlags& flags, HashSet`1<string> keywords);
    public static MessageFlags ParseFlagsList(ImapEngine engine, string name, HashSet`1<string> keywords, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ParseFlagsListAsync>d__73")]
public static Task`1<MessageFlags> ParseFlagsListAsync(ImapEngine engine, string name, HashSet`1<string> keywords, CancellationToken cancellationToken);
    public static ReadOnlyCollection`1<Annotation> ParseAnnotations(ImapEngine engine, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ParseAnnotationsAsync>d__75")]
public static Task`1<ReadOnlyCollection`1<Annotation>> ParseAnnotationsAsync(ImapEngine engine, CancellationToken cancellationToken);
    public static ReadOnlyCollection`1<string> ParseLabelsList(ImapEngine engine, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ParseLabelsListAsync>d__77")]
public static Task`1<ReadOnlyCollection`1<string>> ParseLabelsListAsync(ImapEngine engine, CancellationToken cancellationToken);
    private static MessageThread ParseThread(ImapEngine engine, UInt32 uidValidity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ParseThreadAsync>d__79")]
private static Task`1<MessageThread> ParseThreadAsync(ImapEngine engine, UInt32 uidValidity, CancellationToken cancellationToken);
    public static void ParseThreads(ImapEngine engine, UInt32 uidValidity, List`1<MessageThread> threads, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Imap.ImapUtils/<ParseThreadsAsync>d__81")]
public static Task ParseThreadsAsync(ImapEngine engine, UInt32 uidValidity, List`1<MessageThread> threads, CancellationToken cancellationToken);
    public static Task UntaggedThreadHandler(ImapEngine engine, ImapCommand ic, int index, bool doAsync);
}
internal class MailKit.Net.Imap.MailboxIdResponseCode : ImapResponseCode {
    public string MailboxId;
    internal MailboxIdResponseCode(ImapResponseCodeType type);
}
internal class MailKit.Net.Imap.MaxConvertResponseCode : ImapResponseCode {
    public UInt32 MaxConvert;
    internal MaxConvertResponseCode(ImapResponseCodeType type);
}
internal class MailKit.Net.Imap.MetadataResponseCode : ImapResponseCode {
    public MetadataResponseCodeSubType SubType;
    public UInt32 Value;
    internal MetadataResponseCode(ImapResponseCodeType type);
}
internal enum MailKit.Net.Imap.MetadataResponseCodeSubType : Enum {
    public int value__;
    public static MetadataResponseCodeSubType LongEntries;
    public static MetadataResponseCodeSubType MaxSize;
    public static MetadataResponseCodeSubType TooMany;
    public static MetadataResponseCodeSubType NoPrivate;
}
internal class MailKit.Net.Imap.ModifiedResponseCode : ImapResponseCode {
    public UniqueIdSet UidSet;
    internal ModifiedResponseCode(ImapResponseCodeType type);
}
internal class MailKit.Net.Imap.NewNameResponseCode : ImapResponseCode {
    public string OldName;
    public string NewName;
    internal NewNameResponseCode(ImapResponseCodeType type);
}
internal class MailKit.Net.Imap.NoUpdateResponseCode : ImapResponseCode {
    public string Tag;
    internal NoUpdateResponseCode(ImapResponseCodeType type);
}
internal class MailKit.Net.Imap.PermanentFlagsResponseCode : ImapResponseCode {
    public HashSet`1<string> Keywords;
    public MessageFlags Flags;
    internal PermanentFlagsResponseCode(ImapResponseCodeType type);
}
internal class MailKit.Net.Imap.UidNextResponseCode : ImapResponseCode {
    public UniqueId Uid;
    internal UidNextResponseCode(ImapResponseCodeType type);
}
internal class MailKit.Net.Imap.UidValidityResponseCode : ImapResponseCode {
    public UInt32 UidValidity;
    internal UidValidityResponseCode(ImapResponseCodeType type);
}
internal class MailKit.Net.Imap.UndefinedFilterResponseCode : ImapResponseCode {
    public string Name;
    internal UndefinedFilterResponseCode(ImapResponseCodeType type);
}
internal class MailKit.Net.Imap.UnseenResponseCode : ImapResponseCode {
    public int Index;
    internal UnseenResponseCode(ImapResponseCodeType type);
}
internal class MailKit.Net.Imap.WebAlertResponseCode : ImapResponseCode {
    public Uri WebUri;
    internal WebAlertResponseCode(ImapResponseCodeType type);
}
internal class MailKit.Net.NetworkOperation : object {
    private Exception ex;
    public void SetError(Exception ex);
    public sealed virtual void Dispose();
    public static NetworkOperation Start(NetworkOperationKind kind, Uri uri);
}
internal enum MailKit.Net.NetworkOperationKind : Enum {
    public int value__;
    public static NetworkOperationKind Authenticate;
    public static NetworkOperationKind Connect;
    public static NetworkOperationKind Send;
}
internal class MailKit.Net.NetworkStream : Stream {
    private SocketAsyncEventArgs send;
    private SocketAsyncEventArgs recv;
    private bool ownsSocket;
    private bool connected;
    [CompilerGeneratedAttribute]
private Socket <Socket>k__BackingField;
    public Socket Socket { get; private set; }
    public bool DataAvailable { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public NetworkStream(Socket socket, bool ownsSocket);
    [CompilerGeneratedAttribute]
public Socket get_Socket();
    [CompilerGeneratedAttribute]
private void set_Socket(Socket value);
    public bool get_DataAvailable();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    private void AsyncOperationCompleted(object sender, SocketAsyncEventArgs args);
    private void Cleanup();
    private void Disconnect();
    public virtual int Read(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("MailKit.Net.NetworkStream/<ReadAsync>d__34")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("MailKit.Net.NetworkStream/<WriteAsync>d__36")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public static NetworkStream Get(Stream stream);
    public void Poll(SelectMode mode, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
}
public interface MailKit.Net.Pop3.IPop3Client {
    public Pop3Capabilities Capabilities { get; public set; }
    public int ExpirePolicy { get; }
    public string Implementation { get; }
    public int LoginDelay { get; }
    public abstract virtual Pop3Capabilities get_Capabilities();
    public abstract virtual void set_Capabilities(Pop3Capabilities value);
    public abstract virtual int get_ExpirePolicy();
    public abstract virtual string get_Implementation();
    public abstract virtual int get_LoginDelay();
    public abstract virtual void EnableUTF8(CancellationToken cancellationToken);
    public abstract virtual Task EnableUTF8Async(CancellationToken cancellationToken);
    public abstract virtual IList`1<Pop3Language> GetLanguages(CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<Pop3Language>> GetLanguagesAsync(CancellationToken cancellationToken);
    public abstract virtual void SetLanguage(string lang, CancellationToken cancellationToken);
    public abstract virtual Task SetLanguageAsync(string lang, CancellationToken cancellationToken);
}
internal class MailKit.Net.Pop3.Pop3AuthenticationSecretDetector : object {
    private static IList`1<AuthenticationSecret> EmptyAuthSecrets;
    private Pop3AuthCommandState state;
    private bool isAuthenticating;
    private int commandIndex;
    public bool IsAuthenticating { get; public set; }
    private static Pop3AuthenticationSecretDetector();
    public bool get_IsAuthenticating();
    public void set_IsAuthenticating(bool value);
    private bool SkipCommand(string command, Byte[] buffer, Int32& index, int endIndex);
    private IList`1<AuthenticationSecret> DetectApopSecrets(Byte[] buffer, int offset, int endIndex);
    private IList`1<AuthenticationSecret> DetectAuthSecrets(Byte[] buffer, int offset, int endIndex);
    private IList`1<AuthenticationSecret> DetectUserPassSecrets(Byte[] buffer, int offset, int endIndex);
    public sealed virtual IList`1<AuthenticationSecret> DetectSecrets(Byte[] buffer, int offset, int count);
}
[FlagsAttribute]
public enum MailKit.Net.Pop3.Pop3Capabilities : Enum {
    public UInt32 value__;
    public static Pop3Capabilities None;
    public static Pop3Capabilities Apop;
    public static Pop3Capabilities Expire;
    public static Pop3Capabilities LoginDelay;
    public static Pop3Capabilities Pipelining;
    public static Pop3Capabilities ResponseCodes;
    public static Pop3Capabilities Sasl;
    public static Pop3Capabilities StartTLS;
    public static Pop3Capabilities Top;
    public static Pop3Capabilities UIDL;
    public static Pop3Capabilities User;
    public static Pop3Capabilities UTF8;
    public static Pop3Capabilities UTF8User;
    public static Pop3Capabilities Lang;
}
public class MailKit.Net.Pop3.Pop3Client : MailSpool {
    private static Char[] Space;
    private Pop3AuthenticationSecretDetector detector;
    private MimeParser parser;
    private Pop3Engine engine;
    private SslCertificateValidationInfo sslValidationInfo;
    private ProbedCapabilities probed;
    private bool disposed;
    private bool disconnecting;
    private bool secure;
    private bool utf8;
    private int timeout;
    private long octets;
    private int total;
    public object SyncRoot { get; }
    protected string Protocol { get; }
    public Pop3Capabilities Capabilities { get; public set; }
    public int ExpirePolicy { get; }
    public string Implementation { get; }
    public int LoginDelay { get; }
    public long Size { get; }
    public HashSet`1<string> AuthenticationMechanisms { get; }
    public int Timeout { get; public set; }
    public bool IsConnected { get; }
    public bool IsSecure { get; }
    public bool IsEncrypted { get; }
    public bool IsSigned { get; }
    public SslProtocols SslProtocol { get; }
    public Nullable`1<CipherAlgorithmType> SslCipherAlgorithm { get; }
    public Nullable`1<int> SslCipherStrength { get; }
    public Nullable`1<HashAlgorithmType> SslHashAlgorithm { get; }
    public Nullable`1<int> SslHashStrength { get; }
    public Nullable`1<ExchangeAlgorithmType> SslKeyExchangeAlgorithm { get; }
    public Nullable`1<int> SslKeyExchangeStrength { get; }
    public bool IsAuthenticated { get; }
    public int Count { get; }
    public bool SupportsUids { get; }
    public Pop3Client(IProtocolLogger protocolLogger);
    private static Pop3Client();
    private Task SendCommandAsync(CancellationToken token, string command);
    private Task`1<string> SendCommandAsync(CancellationToken token, string format, Object[] args);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Client/<SendCommandAsync>d__2")]
private Task`1<string> SendCommandAsync(CancellationToken token, Encoding encoding, string format, Object[] args);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Client/<ProbeCapabilitiesAsync>d__3")]
private Task ProbeCapabilitiesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Client/<UpdateMessageCountAsync>d__4")]
private Task`1<int> UpdateMessageCountAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Client/<OnAuthenticatedAsync>d__5")]
private Task OnAuthenticatedAsync(string message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Client/<AuthenticateAsync>d__6")]
public virtual Task AuthenticateAsync(SaslMechanism mechanism, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Client/<AuthenticateAsync>d__7")]
public virtual Task AuthenticateAsync(Encoding encoding, ICredentials credentials, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Client/<SslHandshakeAsync>d__8")]
private Task SslHandshakeAsync(SslStream ssl, string host, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Client/<PostConnectAsync>d__9")]
private Task PostConnectAsync(Stream stream, string host, int port, SecureSocketOptions options, bool starttls, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Client/<ConnectAsync>d__10")]
public virtual Task ConnectAsync(string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    public virtual Task ConnectAsync(Socket socket, string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Client/<ConnectAsync>d__12")]
public virtual Task ConnectAsync(Stream stream, string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Client/<DisconnectAsync>d__13")]
public virtual Task DisconnectAsync(bool quit, CancellationToken cancellationToken);
    public virtual Task`1<int> GetMessageCountAsync(CancellationToken cancellationToken);
    public virtual Task NoOpAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Client/<EnableUTF8Async>d__16")]
public sealed virtual Task EnableUTF8Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Client/<ReadLangResponseAsync>d__17")]
private static Task ReadLangResponseAsync(Pop3Engine engine, Pop3Command pc, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Client/<GetLanguagesAsync>d__18")]
public sealed virtual Task`1<IList`1<Pop3Language>> GetLanguagesAsync(CancellationToken cancellationToken);
    public sealed virtual Task SetLanguageAsync(string lang, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Client/<GetMessageUidAsync>d__20")]
public virtual Task`1<string> GetMessageUidAsync(int index, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Client/<ReadUidlAllResponseAsync>d__21")]
private static Task ReadUidlAllResponseAsync(Pop3Engine engine, Pop3Command pc, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Client/<GetMessageUidsAsync>d__22")]
public virtual Task`1<IList`1<string>> GetMessageUidsAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Client/<GetMessageSizeAsync>d__23")]
public virtual Task`1<int> GetMessageSizeAsync(int index, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Client/<ReadListAllResponseAsync>d__24")]
private static Task ReadListAllResponseAsync(Pop3Engine engine, Pop3Command pc, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Client/<GetMessageSizesAsync>d__25")]
public virtual Task`1<IList`1<int>> GetMessageSizesAsync(CancellationToken cancellationToken);
    public virtual Task`1<HeaderList> GetMessageHeadersAsync(int index, CancellationToken cancellationToken);
    public virtual Task`1<IList`1<HeaderList>> GetMessageHeadersAsync(IList`1<int> indexes, CancellationToken cancellationToken);
    public virtual Task`1<IList`1<HeaderList>> GetMessageHeadersAsync(int startIndex, int count, CancellationToken cancellationToken);
    public virtual Task`1<MimeMessage> GetMessageAsync(int index, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Task`1<IList`1<MimeMessage>> GetMessagesAsync(IList`1<int> indexes, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Task`1<IList`1<MimeMessage>> GetMessagesAsync(int startIndex, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Task`1<Stream> GetStreamAsync(int index, bool headersOnly, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Task`1<IList`1<Stream>> GetStreamsAsync(IList`1<int> indexes, bool headersOnly, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Task`1<IList`1<Stream>> GetStreamsAsync(int startIndex, int count, bool headersOnly, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Task DeleteMessageAsync(int index, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Client/<DeleteMessagesAsync>d__36")]
public virtual Task DeleteMessagesAsync(IList`1<int> indexes, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Client/<DeleteMessagesAsync>d__37")]
public virtual Task DeleteMessagesAsync(int startIndex, int count, CancellationToken cancellationToken);
    public virtual Task DeleteAllMessagesAsync(CancellationToken cancellationToken);
    public virtual Task ResetAsync(CancellationToken cancellationToken);
    public virtual object get_SyncRoot();
    protected virtual string get_Protocol();
    public sealed virtual Pop3Capabilities get_Capabilities();
    public sealed virtual void set_Capabilities(Pop3Capabilities value);
    public sealed virtual int get_ExpirePolicy();
    public sealed virtual string get_Implementation();
    public sealed virtual int get_LoginDelay();
    public long get_Size();
    private void CheckDisposed();
    private void CheckConnected();
    private void CheckAuthenticated();
    private bool ValidateRemoteCertificate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    private static ProtocolException CreatePop3ParseException(Exception innerException, string format, Object[] args);
    private static ProtocolException CreatePop3ParseException(string format, Object[] args);
    private static int GetExpectedSequenceId(Pop3Command pc);
    private void SendCommand(CancellationToken token, string command);
    private string SendCommand(CancellationToken token, string format, Object[] args);
    private string SendCommand(CancellationToken token, Encoding encoding, string format, Object[] args);
    public virtual HashSet`1<string> get_AuthenticationMechanisms();
    public virtual int get_Timeout();
    public virtual void set_Timeout(int value);
    public virtual bool get_IsConnected();
    public virtual bool get_IsSecure();
    public virtual bool get_IsEncrypted();
    public virtual bool get_IsSigned();
    public virtual SslProtocols get_SslProtocol();
    public virtual Nullable`1<CipherAlgorithmType> get_SslCipherAlgorithm();
    public virtual Nullable`1<int> get_SslCipherStrength();
    public virtual Nullable`1<HashAlgorithmType> get_SslHashAlgorithm();
    public virtual Nullable`1<int> get_SslHashStrength();
    public virtual Nullable`1<ExchangeAlgorithmType> get_SslKeyExchangeAlgorithm();
    public virtual Nullable`1<int> get_SslKeyExchangeStrength();
    public virtual bool get_IsAuthenticated();
    private Task ProcessStatResponse(Pop3Engine engine, Pop3Command pc, string text, bool doAsync, CancellationToken cancellationToken);
    private int UpdateMessageCount(CancellationToken cancellationToken);
    private void ProbeCapabilities(CancellationToken cancellationToken);
    private void CheckCanAuthenticate(SaslMechanism mechanism, CancellationToken cancellationToken);
    private SaslAuthContext GetSaslAuthContext(SaslMechanism mechanism, Uri saslUri);
    private void OnAuthenticated(string message, CancellationToken cancellationToken);
    public virtual void Authenticate(SaslMechanism mechanism, CancellationToken cancellationToken);
    private void CheckCanAuthenticate(Encoding encoding, ICredentials credentials, CancellationToken cancellationToken);
    private string GetApopCommand(Encoding encoding, ICredentials credentials, Uri saslUri);
    public virtual void Authenticate(Encoding encoding, ICredentials credentials, CancellationToken cancellationToken);
    internal static void ComputeDefaultValues(string host, Int32& port, SecureSocketOptions& options, Uri& uri, Boolean& starttls);
    private void CheckCanConnect(string host, int port);
    private void SslHandshake(SslStream ssl, string host, CancellationToken cancellationToken);
    private void PostConnect(Stream stream, string host, int port, SecureSocketOptions options, bool starttls, CancellationToken cancellationToken);
    public virtual void Connect(string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    private void CheckCanConnect(Stream stream, string host, int port);
    private void CheckCanConnect(Socket socket, string host, int port);
    public virtual void Connect(Socket socket, string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    public virtual void Connect(Stream stream, string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    public virtual void Disconnect(bool quit, CancellationToken cancellationToken);
    public virtual int GetMessageCount(CancellationToken cancellationToken);
    public virtual void NoOp(CancellationToken cancellationToken);
    private void OnEngineDisconnected(object sender, EventArgs e);
    private bool CheckCanEnableUTF8();
    public sealed virtual void EnableUTF8(CancellationToken cancellationToken);
    private static void ReadLangResponse(Pop3Engine engine, Pop3Command pc, CancellationToken cancellationToken);
    private static Task ProcessLangResponse(Pop3Engine engine, Pop3Command pc, string text, bool doAsync, CancellationToken cancellationToken);
    private Pop3Command QueueLangCommand(List`1& langs);
    public sealed virtual IList`1<Pop3Language> GetLanguages(CancellationToken cancellationToken);
    private void CheckCanSetLanguage(string lang);
    public sealed virtual void SetLanguage(string lang, CancellationToken cancellationToken);
    public virtual int get_Count();
    public virtual bool get_SupportsUids();
    private static Task ProcessUidlResponse(Pop3Engine engine, Pop3Command pc, string text, bool doAsync, CancellationToken cancellationToken);
    private Pop3Command QueueUidlCommand(int index);
    private T OnUidlComplete(Pop3Command pc);
    public virtual string GetMessageUid(int index, CancellationToken cancellationToken);
    private static void ParseUidlAllResponse(Pop3Command pc, string response);
    private static void ReadUidlAllResponse(Pop3Engine engine, Pop3Command pc, CancellationToken cancellationToken);
    private static Task ProcessUidlAllResponse(Pop3Engine engine, Pop3Command pc, string text, bool doAsync, CancellationToken cancellationToken);
    private Pop3Command QueueUidlCommand();
    public virtual IList`1<string> GetMessageUids(CancellationToken cancellationToken);
    private Task ProcessListResponse(Pop3Engine pop3, Pop3Command pc, string text, bool doAsync, CancellationToken cancellationToken);
    private Pop3Command QueueListCommand(int index);
    public virtual int GetMessageSize(int index, CancellationToken cancellationToken);
    private static void ParseListAllResponse(Pop3Command pc, string response);
    private static void ReadListAllResponse(Pop3Engine engine, Pop3Command pc, CancellationToken cancellationToken);
    private static Task ProcessListAllResponse(Pop3Engine engine, Pop3Command pc, string text, bool doAsync, CancellationToken cancellationToken);
    private List`1<int> QueueListCommand();
    public virtual IList`1<int> GetMessageSizes(CancellationToken cancellationToken);
    private void CheckCanDownload(int index);
    private bool CheckCanDownload(IList`1<int> indexes);
    private bool CheckCanDownload(int startIndex, int count);
    public virtual HeaderList GetMessageHeaders(int index, CancellationToken cancellationToken);
    public virtual IList`1<HeaderList> GetMessageHeaders(IList`1<int> indexes, CancellationToken cancellationToken);
    public virtual IList`1<HeaderList> GetMessageHeaders(int startIndex, int count, CancellationToken cancellationToken);
    public virtual MimeMessage GetMessage(int index, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual IList`1<MimeMessage> GetMessages(IList`1<int> indexes, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual IList`1<MimeMessage> GetMessages(int startIndex, int count, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Stream GetStream(int index, bool headersOnly, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual IList`1<Stream> GetStreams(IList`1<int> indexes, bool headersOnly, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual IList`1<Stream> GetStreams(int startIndex, int count, bool headersOnly, CancellationToken cancellationToken, ITransferProgress progress);
    private void CheckCanDelete(int index, String& seqid);
    public virtual void DeleteMessage(int index, CancellationToken cancellationToken);
    private bool CheckCanDelete(IList`1<int> indexes);
    public virtual void DeleteMessages(IList`1<int> indexes, CancellationToken cancellationToken);
    private bool CheckCanDelete(int startIndex, int count);
    public virtual void DeleteMessages(int startIndex, int count, CancellationToken cancellationToken);
    public virtual void DeleteAllMessages(CancellationToken cancellationToken);
    public virtual void Reset(CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("MailKit.Net.Pop3.Pop3Client/<GetEnumerator>d__187")]
public virtual IEnumerator`1<MimeMessage> GetEnumerator();
    protected virtual void Dispose(bool disposing);
}
internal class MailKit.Net.Pop3.Pop3Command : object {
    [CompilerGeneratedAttribute]
private Pop3CommandHandler <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private Pop3CommandStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private ProtocolException <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusText>k__BackingField;
    [CompilerGeneratedAttribute]
private object <UserData>k__BackingField;
    public Pop3CommandHandler Handler { get; private set; }
    public Encoding Encoding { get; private set; }
    public string Command { get; private set; }
    public Pop3CommandStatus Status { get; internal set; }
    public ProtocolException Exception { get; public set; }
    public string StatusText { get; public set; }
    public object UserData { get; public set; }
    public Pop3Command(Pop3CommandHandler handler, Encoding encoding, string format, Object[] args);
    [CompilerGeneratedAttribute]
public Pop3CommandHandler get_Handler();
    [CompilerGeneratedAttribute]
private void set_Handler(Pop3CommandHandler value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
private void set_Command(string value);
    [CompilerGeneratedAttribute]
public Pop3CommandStatus get_Status();
    [CompilerGeneratedAttribute]
internal void set_Status(Pop3CommandStatus value);
    [CompilerGeneratedAttribute]
public ProtocolException get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(ProtocolException value);
    [CompilerGeneratedAttribute]
public string get_StatusText();
    [CompilerGeneratedAttribute]
public void set_StatusText(string value);
    [CompilerGeneratedAttribute]
public object get_UserData();
    [CompilerGeneratedAttribute]
public void set_UserData(object value);
    private static Exception CreatePop3Exception(Pop3Command pc);
    public void ThrowIfError();
}
public class MailKit.Net.Pop3.Pop3CommandException : CommandException {
    [CompilerGeneratedAttribute]
private string <StatusText>k__BackingField;
    public string StatusText { get; private set; }
    [SecuritySafeCriticalAttribute]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
protected Pop3CommandException(SerializationInfo info, StreamingContext context);
    public Pop3CommandException(string message, Exception innerException);
    public Pop3CommandException(string message, string statusText, Exception innerException);
    public Pop3CommandException(string message);
    public Pop3CommandException(string message, string statusText);
    [CompilerGeneratedAttribute]
public string get_StatusText();
    [CompilerGeneratedAttribute]
private void set_StatusText(string value);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal class MailKit.Net.Pop3.Pop3CommandHandler : MulticastDelegate {
    public Pop3CommandHandler(object object, IntPtr method);
    public virtual Task Invoke(Pop3Engine engine, Pop3Command pc, string text, bool doAsync, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(Pop3Engine engine, Pop3Command pc, string text, bool doAsync, CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
internal enum MailKit.Net.Pop3.Pop3CommandStatus : Enum {
    public int value__;
    public static Pop3CommandStatus Queued;
    public static Pop3CommandStatus Active;
    public static Pop3CommandStatus Continue;
    public static Pop3CommandStatus ProtocolError;
    public static Pop3CommandStatus Error;
    public static Pop3CommandStatus Ok;
}
internal class MailKit.Net.Pop3.Pop3Engine : object {
    private List`1<Pop3Command> queue;
    private long clientConnectedTimestamp;
    private Pop3Stream stream;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <AuthenticationMechanisms>k__BackingField;
    [CompilerGeneratedAttribute]
private Pop3Capabilities <Capabilities>k__BackingField;
    [CompilerGeneratedAttribute]
private Pop3EngineState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApopToken>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExpirePolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Implementation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LoginDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Disconnected;
    public Uri Uri { get; internal set; }
    public HashSet`1<string> AuthenticationMechanisms { get; private set; }
    public Pop3Capabilities Capabilities { get; public set; }
    public Pop3Stream Stream { get; }
    public Pop3EngineState State { get; internal set; }
    public bool IsConnected { get; }
    public string ApopToken { get; private set; }
    public int ExpirePolicy { get; private set; }
    public string Implementation { get; private set; }
    public int LoginDelay { get; private set; }
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
internal void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_AuthenticationMechanisms();
    [CompilerGeneratedAttribute]
private void set_AuthenticationMechanisms(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public Pop3Capabilities get_Capabilities();
    [CompilerGeneratedAttribute]
public void set_Capabilities(Pop3Capabilities value);
    public Pop3Stream get_Stream();
    [CompilerGeneratedAttribute]
public Pop3EngineState get_State();
    [CompilerGeneratedAttribute]
internal void set_State(Pop3EngineState value);
    public bool get_IsConnected();
    [CompilerGeneratedAttribute]
public string get_ApopToken();
    [CompilerGeneratedAttribute]
private void set_ApopToken(string value);
    [CompilerGeneratedAttribute]
public int get_ExpirePolicy();
    [CompilerGeneratedAttribute]
private void set_ExpirePolicy(int value);
    [CompilerGeneratedAttribute]
public string get_Implementation();
    [CompilerGeneratedAttribute]
private void set_Implementation(string value);
    [CompilerGeneratedAttribute]
public int get_LoginDelay();
    [CompilerGeneratedAttribute]
private void set_LoginDelay(int value);
    private void CheckConnected();
    private void Initialize(Pop3Stream pop3);
    private void ParseGreeting(string greeting);
    public NetworkOperation StartNetworkOperation(NetworkOperationKind kind, Uri uri);
    public void Connect(Pop3Stream pop3, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Engine/<ConnectAsync>d__45")]
public Task ConnectAsync(Pop3Stream pop3, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public void add_Disconnected(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Disconnected(EventHandler`1<EventArgs> value);
    private void OnDisconnected();
    private void RecordClientDisconnected(Exception ex);
    public void Disconnect(Exception ex);
    public string ReadLine(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Engine/<ReadLineAsync>d__53")]
public Task`1<string> ReadLineAsync(CancellationToken cancellationToken);
    public static Pop3CommandStatus GetCommandStatus(string response, String& text);
    private void ReadResponse(Pop3Command pc, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Engine/<ReadResponseAsync>d__56")]
private Task ReadResponseAsync(Pop3Command pc, CancellationToken cancellationToken);
    private void CheckCanRun(CancellationToken cancellationToken);
    public void Run(bool throwOnError, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Engine/<RunAsync>d__59")]
public Task RunAsync(bool throwOnError, CancellationToken cancellationToken);
    public Pop3Command QueueCommand(Pop3CommandHandler handler, Encoding encoding, string format, Object[] args);
    public Pop3Command QueueCommand(Pop3CommandHandler handler, string format, Object[] args);
    private static bool IsCapability(string capability, string text, int length, bool hasValue);
    private static bool IsToken(string token, string text, int startIndex, int length);
    private static bool ReadNextToken(string text, Int32& index, Int32& startIndex, Int32& length);
    private void AddAuthenticationMechanisms(string text, int startIndex);
    private static bool TryParseInt32(string text, int startIndex, int length, Int32& value);
    private static void ParseCapaResponse(Pop3Engine engine, string response);
    private static void ReadCapaResponse(Pop3Engine engine, Pop3Command pc, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Engine/<ReadCapaResponseAsync>d__69")]
private static Task ReadCapaResponseAsync(Pop3Engine engine, Pop3Command pc, CancellationToken cancellationToken);
    private static Task ProcessCapaResponse(Pop3Engine engine, Pop3Command pc, string text, bool doAsync, CancellationToken cancellationToken);
    private Pop3Command QueueCapabilitiesCommand();
    public void QueryCapabilities(CancellationToken cancellationToken);
    public Task QueryCapabilitiesAsync(CancellationToken cancellationToken);
}
internal enum MailKit.Net.Pop3.Pop3EngineState : Enum {
    public int value__;
    public static Pop3EngineState Disconnected;
    public static Pop3EngineState Connected;
    public static Pop3EngineState Transaction;
}
public class MailKit.Net.Pop3.Pop3Language : object {
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Language { get; private set; }
    public string Description { get; private set; }
    internal Pop3Language(string lang, string desc);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
private void set_Language(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
}
public class MailKit.Net.Pop3.Pop3ProtocolException : ProtocolException {
    [SecuritySafeCriticalAttribute]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
protected Pop3ProtocolException(SerializationInfo info, StreamingContext context);
    public Pop3ProtocolException(string message, Exception innerException);
    public Pop3ProtocolException(string message);
}
internal class MailKit.Net.Pop3.Pop3Stream : Stream {
    private static int ReadAheadSize;
    private static int BlockSize;
    private static int PadSize;
    private Byte[] input;
    private static int inputStart;
    private Byte[] output;
    private int outputIndex;
    private IProtocolLogger logger;
    private int inputIndex;
    private int inputEnd;
    private Pop3StreamMode mode;
    private bool disposed;
    private bool midline;
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConnected>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEndOfData>k__BackingField;
    public Stream Stream { get; internal set; }
    public Pop3StreamMode Mode { get; public set; }
    public bool IsConnected { get; private set; }
    public bool IsEndOfData { get; private set; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public long Position { get; public set; }
    public long Length { get; }
    public Pop3Stream(Stream source, IProtocolLogger protocolLogger);
    [CompilerGeneratedAttribute]
public Stream get_Stream();
    [CompilerGeneratedAttribute]
internal void set_Stream(Stream value);
    public Pop3StreamMode get_Mode();
    public void set_Mode(Pop3StreamMode value);
    [CompilerGeneratedAttribute]
public bool get_IsConnected();
    [CompilerGeneratedAttribute]
private void set_IsConnected(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEndOfData();
    [CompilerGeneratedAttribute]
private void set_IsEndOfData(bool value);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long get_Length();
    private void AlignReadAheadBuffer(Int32& start, Int32& end);
    private void OnReadAhead(int start, int nread);
    private int ReadAhead(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Stream/<ReadAheadAsync>d__51")]
private Task`1<int> ReadAheadAsync(CancellationToken cancellationToken);
    private static void ValidateArguments(Byte[] buffer, int offset, int count);
    private void CheckDisposed();
    private bool NeedInput(int index, int inputLeft);
    private void Read(Byte[] buffer, Int32& index, int endIndex);
    public sealed virtual int Read(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Stream/<ReadAsync>d__58")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    private bool TryReadLine(ByteArrayBuilder builder);
    internal bool ReadLine(ByteArrayBuilder builder, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Stream/<ReadLineAsync>d__61")]
internal Task`1<bool> ReadLineAsync(ByteArrayBuilder builder, CancellationToken cancellationToken);
    private bool TryQueueCommand(Encoder encoder, string command, Int32& index);
    public void QueueCommand(Encoding encoding, string command, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Stream/<QueueCommandAsync>d__64")]
public Task QueueCommandAsync(Encoding encoding, string command, CancellationToken cancellationToken);
    private void OnWriteException(Exception ex, CancellationToken cancellationToken);
    public sealed virtual void Write(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Stream/<WriteAsync>d__68")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public sealed virtual void Flush(CancellationToken cancellationToken);
    public virtual void Flush();
    [AsyncStateMachineAttribute("MailKit.Net.Pop3.Pop3Stream/<FlushAsync>d__71")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    protected virtual void Dispose(bool disposing);
}
internal enum MailKit.Net.Pop3.Pop3StreamMode : Enum {
    public int value__;
    public static Pop3StreamMode Line;
    public static Pop3StreamMode Data;
}
public class MailKit.Net.Proxy.HttpProxyClient : ProxyClient {
    public HttpProxyClient(string host, int port);
    public HttpProxyClient(string host, int port, NetworkCredential credentials);
    internal static Byte[] GetConnectCommand(string host, int port, NetworkCredential proxyCredentials);
    internal static bool TryConsumeHeaders(ByteArrayBuilder builder, byte c, Boolean& newLine);
    internal static void ValidateHttpResponse(string response, string host, int port);
    public virtual Stream Connect(string host, int port, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Proxy.HttpProxyClient/<ConnectAsync>d__6")]
public virtual Task`1<Stream> ConnectAsync(string host, int port, CancellationToken cancellationToken);
}
public class MailKit.Net.Proxy.HttpsProxyClient : ProxyClient {
    private static SslProtocols DefaultSslProtocols;
    [CompilerGeneratedAttribute]
private SslProtocols <SslProtocols>k__BackingField;
    [CompilerGeneratedAttribute]
private X509CertificateCollection <ClientCertificates>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckCertificateRevocation>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <ServerCertificateValidationCallback>k__BackingField;
    private SslCertificateValidationInfo sslValidationInfo;
    public SslProtocols SslProtocols { get; public set; }
    public X509CertificateCollection ClientCertificates { get; public set; }
    public bool CheckCertificateRevocation { get; public set; }
    public RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; public set; }
    public HttpsProxyClient(string host, int port);
    public HttpsProxyClient(string host, int port, NetworkCredential credentials);
    [CompilerGeneratedAttribute]
public SslProtocols get_SslProtocols();
    [CompilerGeneratedAttribute]
public void set_SslProtocols(SslProtocols value);
    [CompilerGeneratedAttribute]
public X509CertificateCollection get_ClientCertificates();
    [CompilerGeneratedAttribute]
public void set_ClientCertificates(X509CertificateCollection value);
    [CompilerGeneratedAttribute]
public bool get_CheckCertificateRevocation();
    [CompilerGeneratedAttribute]
public void set_CheckCertificateRevocation(bool value);
    [CompilerGeneratedAttribute]
public RemoteCertificateValidationCallback get_ServerCertificateValidationCallback();
    [CompilerGeneratedAttribute]
public void set_ServerCertificateValidationCallback(RemoteCertificateValidationCallback value);
    private bool ValidateRemoteCertificate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    public virtual Stream Connect(string host, int port, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Proxy.HttpsProxyClient/<ConnectAsync>d__22")]
public virtual Task`1<Stream> ConnectAsync(string host, int port, CancellationToken cancellationToken);
}
public interface MailKit.Net.Proxy.IProxyClient {
    public NetworkCredential ProxyCredentials { get; }
    public string ProxyHost { get; }
    public int ProxyPort { get; }
    public IPEndPoint LocalEndPoint { get; public set; }
    public abstract virtual NetworkCredential get_ProxyCredentials();
    public abstract virtual string get_ProxyHost();
    public abstract virtual int get_ProxyPort();
    public abstract virtual IPEndPoint get_LocalEndPoint();
    public abstract virtual void set_LocalEndPoint(IPEndPoint value);
    public abstract virtual Stream Connect(string host, int port, CancellationToken cancellationToken);
    public abstract virtual Task`1<Stream> ConnectAsync(string host, int port, CancellationToken cancellationToken);
    public abstract virtual Stream Connect(string host, int port, int timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<Stream> ConnectAsync(string host, int port, int timeout, CancellationToken cancellationToken);
}
public abstract class MailKit.Net.Proxy.ProxyClient : object {
    [CompilerGeneratedAttribute]
private NetworkCredential <ProxyCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProxyHost>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProxyPort>k__BackingField;
    [CompilerGeneratedAttribute]
private IPEndPoint <LocalEndPoint>k__BackingField;
    public NetworkCredential ProxyCredentials { get; private set; }
    public string ProxyHost { get; private set; }
    public int ProxyPort { get; private set; }
    public IPEndPoint LocalEndPoint { get; public set; }
    protected ProxyClient(string host, int port);
    protected ProxyClient(string host, int port, NetworkCredential credentials);
    [CompilerGeneratedAttribute]
public sealed virtual NetworkCredential get_ProxyCredentials();
    [CompilerGeneratedAttribute]
private void set_ProxyCredentials(NetworkCredential value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProxyHost();
    [CompilerGeneratedAttribute]
private void set_ProxyHost(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ProxyPort();
    [CompilerGeneratedAttribute]
private void set_ProxyPort(int value);
    [CompilerGeneratedAttribute]
public sealed virtual IPEndPoint get_LocalEndPoint();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LocalEndPoint(IPEndPoint value);
    internal static void ValidateArguments(string host, int port);
    private static void ValidateArguments(string host, int port, int timeout);
    private static void AsyncOperationCompleted(object sender, SocketAsyncEventArgs args);
    internal static void Send(Socket socket, Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Proxy.ProxyClient/<SendAsync>d__22")]
internal static Task SendAsync(Socket socket, Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    internal static int Receive(Socket socket, Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Proxy.ProxyClient/<ReceiveAsync>d__24")]
internal static Task`1<int> ReceiveAsync(Socket socket, Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    public abstract virtual Stream Connect(string host, int port, CancellationToken cancellationToken);
    public abstract virtual Task`1<Stream> ConnectAsync(string host, int port, CancellationToken cancellationToken);
    public virtual Stream Connect(string host, int port, int timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Proxy.ProxyClient/<ConnectAsync>d__28")]
public virtual Task`1<Stream> ConnectAsync(string host, int port, int timeout, CancellationToken cancellationToken);
}
public class MailKit.Net.Proxy.ProxyProtocolException : ProtocolException {
    [SecuritySafeCriticalAttribute]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
protected ProxyProtocolException(SerializationInfo info, StreamingContext context);
    public ProxyProtocolException(string message, Exception innerException);
    public ProxyProtocolException(string message);
}
public class MailKit.Net.Proxy.Socks4aClient : Socks4Client {
    public Socks4aClient(string host, int port);
    public Socks4aClient(string host, int port, NetworkCredential credentials);
}
public class MailKit.Net.Proxy.Socks4Client : SocksClient {
    private static Byte[] InvalidIPAddress;
    [CompilerGeneratedAttribute]
private bool <IsSocks4a>k__BackingField;
    protected bool IsSocks4a { get; protected set; }
    public Socks4Client(string host, int port);
    public Socks4Client(string host, int port, NetworkCredential credentials);
    private static Socks4Client();
    [CompilerGeneratedAttribute]
protected bool get_IsSocks4a();
    [CompilerGeneratedAttribute]
protected void set_IsSocks4a(bool value);
    private static string GetFailureReason(byte reply);
    private static IPAddress Resolve(string host, IPAddress[] ipAddresses);
    private static IPAddress Resolve(string host, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Proxy.Socks4Client/<ResolveAsync>d__12")]
private static Task`1<IPAddress> ResolveAsync(string host, CancellationToken cancellationToken);
    private Byte[] GetConnectCommand(Byte[] domain, Byte[] addr, int port);
    public virtual Stream Connect(string host, int port, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Proxy.Socks4Client/<ConnectAsync>d__15")]
public virtual Task`1<Stream> ConnectAsync(string host, int port, CancellationToken cancellationToken);
}
public class MailKit.Net.Proxy.Socks5Client : SocksClient {
    public Socks5Client(string host, int port);
    public Socks5Client(string host, int port, NetworkCredential credentials);
    internal static string GetFailureReason(byte reply);
    internal static Socks5AddressType GetAddressType(string host, IPAddress& ip);
    private void VerifySocksVersion(byte version);
    private Byte[] GetNegotiateAuthMethodCommand(Socks5AuthMethod[] methods);
    private Socks5AuthMethod NegotiateAuthMethod(Socket socket, CancellationToken cancellationToken, Socks5AuthMethod[] methods);
    [AsyncStateMachineAttribute("MailKit.Net.Proxy.Socks5Client/<NegotiateAuthMethodAsync>d__11")]
private Task`1<Socks5AuthMethod> NegotiateAuthMethodAsync(Socket socket, CancellationToken cancellationToken, Socks5AuthMethod[] methods);
    private Byte[] GetAuthenticateCommand();
    private void Authenticate(Socket socket, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Proxy.Socks5Client/<AuthenticateAsync>d__14")]
private Task AuthenticateAsync(Socket socket, CancellationToken cancellationToken);
    private Byte[] GetConnectCommand(Socks5AddressType addrType, Byte[] domain, IPAddress ip, int port, Int32& n);
    private int ProcessPartialConnectResponse(string host, int port, Byte[] buffer);
    public virtual Stream Connect(string host, int port, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Proxy.Socks5Client/<ConnectAsync>d__18")]
public virtual Task`1<Stream> ConnectAsync(string host, int port, CancellationToken cancellationToken);
}
public abstract class MailKit.Net.Proxy.SocksClient : ProxyClient {
    [CompilerGeneratedAttribute]
private int <SocksVersion>k__BackingField;
    public int SocksVersion { get; private set; }
    protected SocksClient(int version, string host, int port);
    protected SocksClient(int version, string host, int port, NetworkCredential credentials);
    [CompilerGeneratedAttribute]
public int get_SocksVersion();
    [CompilerGeneratedAttribute]
private void set_SocksVersion(int value);
}
public enum MailKit.Net.Smtp.DeliveryStatusNotificationType : Enum {
    public int value__;
    public static DeliveryStatusNotificationType Unspecified;
    public static DeliveryStatusNotificationType Full;
    public static DeliveryStatusNotificationType HeadersOnly;
}
public interface MailKit.Net.Smtp.ISmtpClient {
    public SmtpCapabilities Capabilities { get; }
    public string LocalDomain { get; public set; }
    public UInt32 MaxSize { get; }
    public bool RequireTLS { get; public set; }
    public DeliveryStatusNotificationType DeliveryStatusNotificationType { get; public set; }
    public abstract virtual SmtpCapabilities get_Capabilities();
    public abstract virtual string get_LocalDomain();
    public abstract virtual void set_LocalDomain(string value);
    public abstract virtual UInt32 get_MaxSize();
    public abstract virtual bool get_RequireTLS();
    public abstract virtual void set_RequireTLS(bool value);
    public abstract virtual DeliveryStatusNotificationType get_DeliveryStatusNotificationType();
    public abstract virtual void set_DeliveryStatusNotificationType(DeliveryStatusNotificationType value);
    public abstract virtual InternetAddressList Expand(string alias, CancellationToken cancellationToken);
    public abstract virtual Task`1<InternetAddressList> ExpandAsync(string alias, CancellationToken cancellationToken);
    public abstract virtual MailboxAddress Verify(string address, CancellationToken cancellationToken);
    public abstract virtual Task`1<MailboxAddress> VerifyAsync(string address, CancellationToken cancellationToken);
}
internal class MailKit.Net.Smtp.SmtpAuthenticationSecretDetector : object {
    private static IList`1<AuthenticationSecret> EmptyAuthSecrets;
    private SmtpAuthCommandState state;
    private bool isAuthenticating;
    private int commandIndex;
    public bool IsAuthenticating { get; public set; }
    private static SmtpAuthenticationSecretDetector();
    public bool get_IsAuthenticating();
    public void set_IsAuthenticating(bool value);
    private bool SkipCommand(string command, Byte[] buffer, Int32& index, int endIndex);
    public sealed virtual IList`1<AuthenticationSecret> DetectSecrets(Byte[] buffer, int offset, int count);
}
[FlagsAttribute]
public enum MailKit.Net.Smtp.SmtpCapabilities : Enum {
    public UInt32 value__;
    public static SmtpCapabilities None;
    public static SmtpCapabilities Size;
    public static SmtpCapabilities Dsn;
    public static SmtpCapabilities EnhancedStatusCodes;
    public static SmtpCapabilities Authentication;
    public static SmtpCapabilities EightBitMime;
    public static SmtpCapabilities Pipelining;
    public static SmtpCapabilities BinaryMime;
    public static SmtpCapabilities Chunking;
    public static SmtpCapabilities StartTLS;
    public static SmtpCapabilities UTF8;
    public static SmtpCapabilities RequireTLS;
}
public class MailKit.Net.Smtp.SmtpClient : MailTransport {
    private static Byte[] EndData;
    private static Char[] NewLineCharacters;
    internal static string DefaultLocalDomain;
    private static int MaxLineLength;
    private HashSet`1<string> authenticationMechanisms;
    private SmtpAuthenticationSecretDetector detector;
    private List`1<SmtpCommand> queued;
    private SslCertificateValidationInfo sslValidationInfo;
    private long clientConnectedTimestamp;
    private SmtpCapabilities capabilities;
    private int timeout;
    private bool authenticated;
    private bool connected;
    private bool disposed;
    private bool secure;
    private Uri uri;
    [CompilerGeneratedAttribute]
private SmtpStream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MaxSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireTLS>k__BackingField;
    [CompilerGeneratedAttribute]
private DeliveryStatusNotificationType <DeliveryStatusNotificationType>k__BackingField;
    private SmtpStream Stream { get; private set; }
    public object SyncRoot { get; }
    protected string Protocol { get; }
    public SmtpCapabilities Capabilities { get; public set; }
    public string LocalDomain { get; public set; }
    protected bool PreferSendAsBinaryData { get; }
    public UInt32 MaxSize { get; private set; }
    public bool RequireTLS { get; public set; }
    public HashSet`1<string> AuthenticationMechanisms { get; }
    public int Timeout { get; public set; }
    public bool IsConnected { get; }
    public bool IsSecure { get; }
    public bool IsEncrypted { get; }
    public bool IsSigned { get; }
    public SslProtocols SslProtocol { get; }
    public Nullable`1<CipherAlgorithmType> SslCipherAlgorithm { get; }
    public Nullable`1<int> SslCipherStrength { get; }
    public Nullable`1<HashAlgorithmType> SslHashAlgorithm { get; }
    public Nullable`1<int> SslHashStrength { get; }
    public Nullable`1<ExchangeAlgorithmType> SslKeyExchangeAlgorithm { get; }
    public Nullable`1<int> SslKeyExchangeStrength { get; }
    public bool IsAuthenticated { get; }
    public DeliveryStatusNotificationType DeliveryStatusNotificationType { get; public set; }
    private static SmtpClient();
    public SmtpClient(IProtocolLogger protocolLogger);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpClient/<QueueCommandAsync>d__0")]
private Task QueueCommandAsync(SmtpCommand type, string command, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpClient/<FlushCommandQueueAsync>d__1")]
private Task`1<QueueResults> FlushCommandQueueAsync(MimeMessage message, MailboxAddress sender, IList`1<MailboxAddress> recipients, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpClient/<SendCommandInternalAsync>d__2")]
private Task`1<SmtpResponse> SendCommandInternalAsync(string command, CancellationToken cancellationToken);
    protected Task`1<SmtpResponse> SendCommandAsync(string command, CancellationToken cancellationToken);
    private Task`1<SmtpResponse> SendEhloAsync(bool connecting, string helo, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpClient/<EhloAsync>d__5")]
private Task EhloAsync(bool connecting, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpClient/<AuthenticateAsync>d__6")]
public virtual Task AuthenticateAsync(SaslMechanism mechanism, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpClient/<AuthenticateAsync>d__7")]
public virtual Task AuthenticateAsync(Encoding encoding, ICredentials credentials, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpClient/<SslHandshakeAsync>d__8")]
private Task SslHandshakeAsync(SslStream ssl, string host, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpClient/<PostConnectAsync>d__9")]
private Task PostConnectAsync(Stream stream, string host, int port, SecureSocketOptions options, bool starttls, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpClient/<ConnectAsync>d__10")]
public virtual Task ConnectAsync(string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    public virtual Task ConnectAsync(Socket socket, string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpClient/<ConnectAsync>d__12")]
public virtual Task ConnectAsync(Stream stream, string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpClient/<DisconnectAsync>d__13")]
public virtual Task DisconnectAsync(bool quit, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpClient/<NoOpAsync>d__14")]
public virtual Task NoOpAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpClient/<GetSizeAsync>d__15")]
protected virtual Task`1<long> GetSizeAsync(FormatOptions options, MimeMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpClient/<MailFromAsync>d__16")]
private Task MailFromAsync(FormatOptions options, MimeMessage message, MailboxAddress mailbox, SmtpExtensions extensions, long size, bool pipeline, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpClient/<RcptToAsync>d__17")]
private Task`1<bool> RcptToAsync(FormatOptions options, MimeMessage message, MailboxAddress mailbox, bool pipeline, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpClient/<BdatAsync>d__18")]
private Task`1<string> BdatAsync(FormatOptions options, MimeMessage message, long size, CancellationToken cancellationToken, ITransferProgress progress);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpClient/<MessageDataAsync>d__19")]
private Task`1<string> MessageDataAsync(FormatOptions options, MimeMessage message, long size, CancellationToken cancellationToken, ITransferProgress progress);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpClient/<ResetAsync>d__20")]
private Task ResetAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpClient/<SendAsync>d__21")]
private Task`1<string> SendAsync(FormatOptions options, MimeMessage message, MailboxAddress sender, IList`1<MailboxAddress> recipients, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Task`1<string> SendAsync(FormatOptions options, MimeMessage message, CancellationToken cancellationToken, ITransferProgress progress);
    public virtual Task`1<string> SendAsync(FormatOptions options, MimeMessage message, MailboxAddress sender, IEnumerable`1<MailboxAddress> recipients, CancellationToken cancellationToken, ITransferProgress progress);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpClient/<ExpandAsync>d__24")]
public sealed virtual Task`1<InternetAddressList> ExpandAsync(string alias, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpClient/<VerifyAsync>d__25")]
public sealed virtual Task`1<MailboxAddress> VerifyAsync(string address, CancellationToken cancellationToken);
    internal static string GetSafeHostName(string hostName);
    [CompilerGeneratedAttribute]
private SmtpStream get_Stream();
    [CompilerGeneratedAttribute]
private void set_Stream(SmtpStream value);
    public virtual object get_SyncRoot();
    protected virtual string get_Protocol();
    public sealed virtual SmtpCapabilities get_Capabilities();
    public void set_Capabilities(SmtpCapabilities value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LocalDomain();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LocalDomain(string value);
    protected virtual bool get_PreferSendAsBinaryData();
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_MaxSize();
    [CompilerGeneratedAttribute]
private void set_MaxSize(UInt32 value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RequireTLS();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequireTLS(bool value);
    private void CheckDisposed();
    public virtual HashSet`1<string> get_AuthenticationMechanisms();
    public virtual int get_Timeout();
    public virtual void set_Timeout(int value);
    public virtual bool get_IsConnected();
    public virtual bool get_IsSecure();
    public virtual bool get_IsEncrypted();
    public virtual bool get_IsSigned();
    public virtual SslProtocols get_SslProtocol();
    public virtual Nullable`1<CipherAlgorithmType> get_SslCipherAlgorithm();
    public virtual Nullable`1<int> get_SslCipherStrength();
    public virtual Nullable`1<HashAlgorithmType> get_SslHashAlgorithm();
    public virtual Nullable`1<int> get_SslHashStrength();
    public virtual Nullable`1<ExchangeAlgorithmType> get_SslKeyExchangeAlgorithm();
    public virtual Nullable`1<int> get_SslKeyExchangeStrength();
    public virtual bool get_IsAuthenticated();
    private NetworkOperation StartNetworkOperation(NetworkOperationKind kind);
    private bool ValidateRemoteCertificate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    protected virtual void OnNoRecipientsAccepted(MimeMessage message);
    private void QueueCommand(SmtpCommand type, string command, CancellationToken cancellationToken);
    private QueueResults ParseCommandQueueResponses(MimeMessage message, MailboxAddress sender, IList`1<MailboxAddress> recipients, List`1<SmtpResponse> responses, Exception readResponseException);
    private QueueResults FlushCommandQueue(MimeMessage message, MailboxAddress sender, IList`1<MailboxAddress> recipients, CancellationToken cancellationToken);
    private SmtpResponse SendCommandInternal(string command, CancellationToken cancellationToken);
    protected SmtpResponse SendCommand(string command, CancellationToken cancellationToken);
    private static bool ReadNextLine(string text, Int32& index, Int32& lineStartIndex, Int32& lineEndIndex);
    private static bool IsCapability(string capability, string text, int startIndex, int endIndex, bool hasValue);
    private void AddAuthenticationMechanisms(string mechanisms, int startIndex, int endIndex);
    private void SetMaxSize(string capability, int startIndex, int endIndex);
    private void UpdateCapabilities(SmtpResponse response);
    private string CreateEhloCommand(string helo);
    private SmtpResponse SendEhlo(bool connecting, string helo, CancellationToken cancellationToken);
    private void Ehlo(bool connecting, CancellationToken cancellationToken);
    private void ValidateArguments(SaslMechanism mechanism);
    public virtual void Authenticate(SaslMechanism mechanism, CancellationToken cancellationToken);
    private void ValidateArguments(Encoding encoding, ICredentials credentials);
    public virtual void Authenticate(Encoding encoding, ICredentials credentials, CancellationToken cancellationToken);
    internal static void ComputeDefaultValues(string host, Int32& port, SecureSocketOptions& options, Uri& uri, Boolean& starttls);
    private void SslHandshake(SslStream ssl, string host, CancellationToken cancellationToken);
    private void RecordClientDisconnected(Exception ex);
    private void PostConnect(Stream stream, string host, int port, SecureSocketOptions options, bool starttls, CancellationToken cancellationToken);
    private void ValidateArguments(string host, int port);
    public virtual void Connect(string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    private void ValidateArguments(Socket socket, string host, int port);
    public virtual void Connect(Socket socket, string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    private void ValidateArguments(Stream stream, string host, int port);
    public virtual void Connect(Stream stream, string host, int port, SecureSocketOptions options, CancellationToken cancellationToken);
    public virtual void Disconnect(bool quit, CancellationToken cancellationToken);
    public virtual void NoOp(CancellationToken cancellationToken);
    private void Disconnect(string host, int port, SecureSocketOptions options, bool requested);
    private static MailboxAddress GetMessageSender(MimeMessage message);
    private static void AddUnique(List`1<MailboxAddress> recipients, HashSet`1<string> unique, IEnumerable`1<MailboxAddress> mailboxes);
    private static IList`1<MailboxAddress> GetMessageRecipients(MimeMessage message);
    protected virtual void OnSenderAccepted(MimeMessage message, MailboxAddress mailbox, SmtpResponse response);
    protected virtual void OnSenderNotAccepted(MimeMessage message, MailboxAddress mailbox, SmtpResponse response);
    protected virtual string GetEnvelopeId(MimeMessage message);
    [CompilerGeneratedAttribute]
public sealed virtual DeliveryStatusNotificationType get_DeliveryStatusNotificationType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DeliveryStatusNotificationType(DeliveryStatusNotificationType value);
    private static void AppendHexEncoded(StringBuilder builder, string value);
    private string CreateMailFromCommand(FormatOptions options, MimeMessage message, MailboxAddress mailbox, SmtpExtensions extensions, long size);
    private void ParseMailFromResponse(MimeMessage message, MailboxAddress mailbox, SmtpResponse response);
    private void MailFrom(FormatOptions options, MimeMessage message, MailboxAddress mailbox, SmtpExtensions extensions, long size, bool pipeline, CancellationToken cancellationToken);
    protected virtual void OnRecipientAccepted(MimeMessage message, MailboxAddress mailbox, SmtpResponse response);
    protected virtual void OnRecipientNotAccepted(MimeMessage message, MailboxAddress mailbox, SmtpResponse response);
    protected virtual Nullable`1<DeliveryStatusNotification> GetDeliveryStatusNotifications(MimeMessage message, MailboxAddress mailbox);
    private OriginalRecipient GetOriginalRecipientAddress(MimeMessage message, MailboxAddress mailbox);
    private static string GetNotifyString(DeliveryStatusNotification notify);
    private string CreateRcptToCommand(FormatOptions options, MimeMessage message, MailboxAddress mailbox);
    private bool ParseRcptToResponse(MimeMessage message, MailboxAddress mailbox, SmtpResponse response);
    private bool RcptTo(FormatOptions options, MimeMessage message, MailboxAddress mailbox, bool pipeline, CancellationToken cancellationToken);
    private string ParseBdatResponse(MimeMessage message, SmtpResponse response);
    private string Bdat(FormatOptions options, MimeMessage message, long size, CancellationToken cancellationToken, ITransferProgress progress);
    private static void ParseDataResponse(SmtpResponse response);
    private string ParseMessageDataResponse(MimeMessage message, SmtpResponse response);
    private string MessageData(FormatOptions options, MimeMessage message, long size, CancellationToken cancellationToken, ITransferProgress progress);
    private void Reset(CancellationToken cancellationToken);
    protected virtual void Prepare(FormatOptions options, MimeMessage message, EncodingConstraint constraint, int maxLineLength);
    protected virtual long GetSize(FormatOptions options, MimeMessage message, CancellationToken cancellationToken);
    private FormatOptions Prepare(FormatOptions options, MimeMessage message, MailboxAddress sender, IList`1<MailboxAddress> recipients, SmtpExtensions& extensions);
    private bool UseBdatCommand(SmtpExtensions extensions);
    private string Send(FormatOptions options, MimeMessage message, MailboxAddress sender, IList`1<MailboxAddress> recipients, CancellationToken cancellationToken, ITransferProgress progress);
    private static void ValidateArguments(FormatOptions options, MimeMessage message, MailboxAddress& sender, IList`1& recipients);
    public virtual string Send(FormatOptions options, MimeMessage message, CancellationToken cancellationToken, ITransferProgress progress);
    private static List`1<MailboxAddress> ValidateArguments(FormatOptions options, MimeMessage message, MailboxAddress sender, IEnumerable`1<MailboxAddress> recipients);
    public virtual string Send(FormatOptions options, MimeMessage message, MailboxAddress sender, IEnumerable`1<MailboxAddress> recipients, CancellationToken cancellationToken, ITransferProgress progress);
    private string CreateExpandCommand(string alias);
    private static InternetAddressList ParseExpandResponse(SmtpResponse response);
    public sealed virtual InternetAddressList Expand(string alias, CancellationToken cancellationToken);
    private string CreateVerifyCommand(string address);
    private static MailboxAddress ParseVerifyResponse(SmtpResponse response);
    public sealed virtual MailboxAddress Verify(string address, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
}
public class MailKit.Net.Smtp.SmtpCommandException : CommandException {
    [CompilerGeneratedAttribute]
private SmtpErrorCode <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private MailboxAddress <Mailbox>k__BackingField;
    [CompilerGeneratedAttribute]
private SmtpStatusCode <StatusCode>k__BackingField;
    public SmtpErrorCode ErrorCode { get; private set; }
    public MailboxAddress Mailbox { get; private set; }
    public SmtpStatusCode StatusCode { get; private set; }
    [SecuritySafeCriticalAttribute]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
protected SmtpCommandException(SerializationInfo info, StreamingContext context);
    public SmtpCommandException(SmtpErrorCode code, SmtpStatusCode status, MailboxAddress mailbox, string message, Exception innerException);
    public SmtpCommandException(SmtpErrorCode code, SmtpStatusCode status, MailboxAddress mailbox, string message);
    public SmtpCommandException(SmtpErrorCode code, SmtpStatusCode status, string message, Exception innerException);
    public SmtpCommandException(SmtpErrorCode code, SmtpStatusCode status, string message);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public SmtpErrorCode get_ErrorCode();
    [CompilerGeneratedAttribute]
private void set_ErrorCode(SmtpErrorCode value);
    [CompilerGeneratedAttribute]
public MailboxAddress get_Mailbox();
    [CompilerGeneratedAttribute]
private void set_Mailbox(MailboxAddress value);
    [CompilerGeneratedAttribute]
public SmtpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
private void set_StatusCode(SmtpStatusCode value);
}
public class MailKit.Net.Smtp.SmtpDataFilter : MimeFilterBase {
    private bool decode;
    private bool bol;
    public SmtpDataFilter(bool decode);
    private Byte[] Encode(Byte[] input, int startIndex, int length, Int32& outputIndex, Int32& outputLength, bool flush);
    private Byte[] Decode(Byte[] input, int startIndex, int length, Int32& outputIndex, Int32& outputLength, bool flush);
    protected virtual Byte[] Filter(Byte[] input, int startIndex, int length, Int32& outputIndex, Int32& outputLength, bool flush);
    public virtual void Reset();
}
public enum MailKit.Net.Smtp.SmtpErrorCode : Enum {
    public int value__;
    public static SmtpErrorCode MessageNotAccepted;
    public static SmtpErrorCode SenderNotAccepted;
    public static SmtpErrorCode RecipientNotAccepted;
    public static SmtpErrorCode UnexpectedStatusCode;
}
public class MailKit.Net.Smtp.SmtpProtocolException : ProtocolException {
    [SecuritySafeCriticalAttribute]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
protected SmtpProtocolException(SerializationInfo info, StreamingContext context);
    public SmtpProtocolException(string message, Exception innerException);
    public SmtpProtocolException(string message);
}
public class MailKit.Net.Smtp.SmtpResponse : object {
    [CompilerGeneratedAttribute]
private SmtpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Response>k__BackingField;
    public SmtpStatusCode StatusCode { get; private set; }
    public string Response { get; private set; }
    public SmtpResponse(SmtpStatusCode code, string response);
    [CompilerGeneratedAttribute]
public SmtpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
private void set_StatusCode(SmtpStatusCode value);
    [CompilerGeneratedAttribute]
public string get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(string value);
}
public enum MailKit.Net.Smtp.SmtpStatusCode : Enum {
    public int value__;
    public static SmtpStatusCode SystemStatus;
    public static SmtpStatusCode HelpMessage;
    public static SmtpStatusCode ServiceReady;
    public static SmtpStatusCode ServiceClosingTransmissionChannel;
    public static SmtpStatusCode AuthenticationSuccessful;
    public static SmtpStatusCode Ok;
    public static SmtpStatusCode UserNotLocalWillForward;
    public static SmtpStatusCode CannotVerifyUserWillAttemptDelivery;
    public static SmtpStatusCode AuthenticationChallenge;
    public static SmtpStatusCode StartMailInput;
    public static SmtpStatusCode ServiceNotAvailable;
    public static SmtpStatusCode PasswordTransitionNeeded;
    public static SmtpStatusCode MailboxBusy;
    public static SmtpStatusCode ErrorInProcessing;
    public static SmtpStatusCode InsufficientStorage;
    public static SmtpStatusCode TemporaryAuthenticationFailure;
    public static SmtpStatusCode CommandUnrecognized;
    public static SmtpStatusCode SyntaxError;
    public static SmtpStatusCode CommandNotImplemented;
    public static SmtpStatusCode BadCommandSequence;
    public static SmtpStatusCode CommandParameterNotImplemented;
    public static SmtpStatusCode AuthenticationRequired;
    public static SmtpStatusCode AuthenticationMechanismTooWeak;
    public static SmtpStatusCode AuthenticationInvalidCredentials;
    public static SmtpStatusCode EncryptionRequiredForAuthenticationMechanism;
    public static SmtpStatusCode MailboxUnavailable;
    public static SmtpStatusCode UserNotLocalTryAlternatePath;
    public static SmtpStatusCode ExceededStorageAllocation;
    public static SmtpStatusCode MailboxNameNotAllowed;
    public static SmtpStatusCode TransactionFailed;
    public static SmtpStatusCode MailFromOrRcptToParametersNotRecognizedOrNotImplemented;
}
internal class MailKit.Net.Smtp.SmtpStream : Stream {
    private static int BlockSize;
    private static int PadSize;
    private Byte[] input;
    private Byte[] output;
    private int outputIndex;
    private IProtocolLogger logger;
    private int inputIndex;
    private int inputEnd;
    private string lastResponse;
    private bool disposed;
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConnected>k__BackingField;
    public Stream Stream { get; internal set; }
    public bool IsConnected { get; private set; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public long Position { get; public set; }
    public long Length { get; }
    public SmtpStream(Stream source, IProtocolLogger protocolLogger);
    [CompilerGeneratedAttribute]
public Stream get_Stream();
    [CompilerGeneratedAttribute]
internal void set_Stream(Stream value);
    [CompilerGeneratedAttribute]
public bool get_IsConnected();
    [CompilerGeneratedAttribute]
private void set_IsConnected(bool value);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long get_Length();
    private void AlignReadAheadBuffer(Int32& offset, Int32& count);
    private int ReadAhead(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpStream/<ReadAheadAsync>d__40")]
private Task`1<int> ReadAheadAsync(CancellationToken cancellationToken);
    private static void ValidateArguments(Byte[] buffer, int offset, int count);
    private void CheckDisposed();
    public sealed virtual int Read(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    private static bool TryParseStatusCode(Byte[] text, int startIndex, Int32& code);
    private static bool IsLegalAfterStatusCode(byte c);
    private bool ReadResponse(ByteArrayBuilder builder, Boolean& newLine, Boolean& more, Int32& code);
    public SmtpResponse ReadResponse(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpStream/<ReadResponseAsync>d__50")]
public Task`1<SmtpResponse> ReadResponseAsync(CancellationToken cancellationToken);
    private bool TryQueueCommand(Encoder encoder, string command, Int32& index);
    public void QueueCommand(string command, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpStream/<QueueCommandAsync>d__53")]
public Task QueueCommandAsync(string command, CancellationToken cancellationToken);
    public SmtpResponse SendCommand(string command, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpStream/<SendCommandAsync>d__55")]
public Task`1<SmtpResponse> SendCommandAsync(string command, CancellationToken cancellationToken);
    public sealed virtual void Write(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpStream/<WriteAsync>d__58")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public sealed virtual void Flush(CancellationToken cancellationToken);
    public virtual void Flush();
    [AsyncStateMachineAttribute("MailKit.Net.Smtp.SmtpStream/<FlushAsync>d__61")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    protected virtual void Dispose(bool disposing);
}
internal static class MailKit.Net.SocketUtils : object {
    private static void OnEndConnect(IAsyncResult ar);
    public static Socket Connect(string host, int port, IPEndPoint localEndPoint, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.SocketUtils/<ConnectAsync>d__3")]
public static Task`1<Socket> ConnectAsync(string host, int port, IPEndPoint localEndPoint, CancellationToken cancellationToken);
    public static Socket Connect(string host, int port, IPEndPoint localEndPoint, int timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Net.SocketUtils/<ConnectAsync>d__5")]
public static Task`1<Socket> ConnectAsync(string host, int port, IPEndPoint localEndPoint, int timeout, CancellationToken cancellationToken);
    public static void Poll(Socket socket, SelectMode mode, CancellationToken cancellationToken);
}
internal class MailKit.Net.SslStream : SslStream {
    private ChannelBinding tlsServerEndPoint;
    private ChannelBinding tlsUnique;
    public Stream InnerStream { get; }
    public SslStream(Stream innerStream, bool leaveInnerStreamOpen, RemoteCertificateValidationCallback userCertificateValidationCallback);
    public Stream get_InnerStream();
    private ChannelBinding GetChannelBinding(ChannelBindingKind kind);
    public sealed virtual bool TryGetChannelBindingToken(ChannelBindingKind kind, Byte[]& token);
    protected virtual void Dispose(bool disposing);
}
public class MailKit.NullProtocolLogger : object {
    [CompilerGeneratedAttribute]
private IAuthenticationSecretDetector <AuthenticationSecretDetector>k__BackingField;
    public IAuthenticationSecretDetector AuthenticationSecretDetector { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IAuthenticationSecretDetector get_AuthenticationSecretDetector();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AuthenticationSecretDetector(IAuthenticationSecretDetector value);
    public sealed virtual void LogConnect(Uri uri);
    public sealed virtual void LogClient(Byte[] buffer, int offset, int count);
    public sealed virtual void LogServer(Byte[] buffer, int offset, int count);
    public sealed virtual void Dispose();
}
internal class MailKit.ProgressStream : Stream {
    private ICancellableStream cancellable;
    [CompilerGeneratedAttribute]
private Stream <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<int> <Update>k__BackingField;
    public Stream Source { get; private set; }
    private Action`1<int> Update { get; private set; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public ProgressStream(Stream source, Action`1<int> update);
    [CompilerGeneratedAttribute]
public Stream get_Source();
    [CompilerGeneratedAttribute]
private void set_Source(Stream value);
    [CompilerGeneratedAttribute]
private Action`1<int> get_Update();
    [CompilerGeneratedAttribute]
private void set_Update(Action`1<int> value);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public sealed virtual int Read(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("MailKit.ProgressStream/<ReadAsync>d__31")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public sealed virtual void Write(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("MailKit.ProgressStream/<WriteAsync>d__34")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public sealed virtual void Flush(CancellationToken cancellationToken);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual void SetLength(long value);
}
public abstract class MailKit.ProtocolException : Exception {
    private static string ProtocolLogHelpLink;
    [SecuritySafeCriticalAttribute]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
protected ProtocolException(SerializationInfo info, StreamingContext context);
    protected ProtocolException(string message, Exception innerException);
    protected ProtocolException(string message);
}
public class MailKit.ProtocolLogger : object {
    private static Byte[] defaultClientPrefix;
    private static Byte[] defaultServerPrefix;
    private static Byte[] Secret;
    private static Byte[] Space;
    private static string DefaultTimestampFormat;
    private Byte[] clientPrefix;
    private Byte[] serverPrefix;
    private Stream stream;
    private bool leaveOpen;
    private bool clientMidline;
    private bool serverMidline;
    [CompilerGeneratedAttribute]
private bool <RedactSecrets>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogTimestamps>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimestampFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthenticationSecretDetector <AuthenticationSecretDetector>k__BackingField;
    public Stream Stream { get; }
    public static string DefaultClientPrefix { get; public set; }
    public static string DefaultServerPrefix { get; public set; }
    public string ClientPrefix { get; public set; }
    public string ServerPrefix { get; public set; }
    public bool RedactSecrets { get; public set; }
    public bool LogTimestamps { get; public set; }
    public string TimestampFormat { get; public set; }
    public IAuthenticationSecretDetector AuthenticationSecretDetector { get; public set; }
    public ProtocolLogger(string fileName, bool append);
    public ProtocolLogger(Stream stream, bool leaveOpen);
    private static ProtocolLogger();
    protected virtual override void Finalize();
    public Stream get_Stream();
    public static string get_DefaultClientPrefix();
    public static void set_DefaultClientPrefix(string value);
    public static string get_DefaultServerPrefix();
    public static void set_DefaultServerPrefix(string value);
    public string get_ClientPrefix();
    public void set_ClientPrefix(string value);
    public string get_ServerPrefix();
    public void set_ServerPrefix(string value);
    [CompilerGeneratedAttribute]
public bool get_RedactSecrets();
    [CompilerGeneratedAttribute]
public void set_RedactSecrets(bool value);
    [CompilerGeneratedAttribute]
public bool get_LogTimestamps();
    [CompilerGeneratedAttribute]
public void set_LogTimestamps(bool value);
    [CompilerGeneratedAttribute]
public string get_TimestampFormat();
    [CompilerGeneratedAttribute]
public void set_TimestampFormat(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IAuthenticationSecretDetector get_AuthenticationSecretDetector();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AuthenticationSecretDetector(IAuthenticationSecretDetector value);
    private static void ValidateArguments(Byte[] buffer, int offset, int count);
    private void Log(Byte[] prefix, Boolean& midline, Byte[] buffer, int offset, int count, bool isClient);
    public sealed virtual void LogConnect(Uri uri);
    public sealed virtual void LogClient(Byte[] buffer, int offset, int count);
    public sealed virtual void LogServer(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class MailKit.ReplaceRequest : AppendRequest {
    [CompilerGeneratedAttribute]
private IMailFolder <Destination>k__BackingField;
    public IMailFolder Destination { get; public set; }
    public ReplaceRequest(MimeMessage message, MessageFlags flags);
    public ReplaceRequest(MimeMessage message, MessageFlags flags, IEnumerable`1<string> keywords);
    public ReplaceRequest(MimeMessage message, MessageFlags flags, DateTimeOffset internalDate);
    public ReplaceRequest(MimeMessage message, MessageFlags flags, IEnumerable`1<string> keywords, DateTimeOffset internalDate);
    [CompilerGeneratedAttribute]
public sealed virtual IMailFolder get_Destination();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Destination(IMailFolder value);
}
public class MailKit.Search.AnnotationSearchQuery : SearchQuery {
    [CompilerGeneratedAttribute]
private AnnotationEntry <Entry>k__BackingField;
    [CompilerGeneratedAttribute]
private AnnotationAttribute <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public AnnotationEntry Entry { get; private set; }
    public AnnotationAttribute Attribute { get; private set; }
    public string Value { get; private set; }
    public AnnotationSearchQuery(AnnotationEntry entry, AnnotationAttribute attribute, string value);
    [CompilerGeneratedAttribute]
public AnnotationEntry get_Entry();
    [CompilerGeneratedAttribute]
private void set_Entry(AnnotationEntry value);
    [CompilerGeneratedAttribute]
public AnnotationAttribute get_Attribute();
    [CompilerGeneratedAttribute]
private void set_Attribute(AnnotationAttribute value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
}
public class MailKit.Search.BinarySearchQuery : SearchQuery {
    [CompilerGeneratedAttribute]
private SearchQuery <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchQuery <Right>k__BackingField;
    public SearchQuery Left { get; private set; }
    public SearchQuery Right { get; private set; }
    public BinarySearchQuery(SearchTerm term, SearchQuery left, SearchQuery right);
    [CompilerGeneratedAttribute]
public SearchQuery get_Left();
    [CompilerGeneratedAttribute]
private void set_Left(SearchQuery value);
    [CompilerGeneratedAttribute]
public SearchQuery get_Right();
    [CompilerGeneratedAttribute]
private void set_Right(SearchQuery value);
    internal virtual SearchQuery Optimize(ISearchQueryOptimizer optimizer);
}
public class MailKit.Search.DateSearchQuery : SearchQuery {
    [CompilerGeneratedAttribute]
private DateTime <Date>k__BackingField;
    public DateTime Date { get; private set; }
    public DateSearchQuery(SearchTerm term, DateTime date);
    [CompilerGeneratedAttribute]
public DateTime get_Date();
    [CompilerGeneratedAttribute]
private void set_Date(DateTime value);
}
public class MailKit.Search.FilterSearchQuery : SearchQuery {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public FilterSearchQuery(string name);
    public FilterSearchQuery(MetadataTag filter);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
public class MailKit.Search.HeaderSearchQuery : SearchQuery {
    [CompilerGeneratedAttribute]
private string <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Field { get; private set; }
    public string Value { get; private set; }
    public HeaderSearchQuery(string field, string value);
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
private void set_Field(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
}
internal interface MailKit.Search.ISearchQueryOptimizer {
    public abstract virtual SearchQuery Reduce(SearchQuery expr);
}
public class MailKit.Search.NumericSearchQuery : SearchQuery {
    [CompilerGeneratedAttribute]
private ulong <Value>k__BackingField;
    public ulong Value { get; private set; }
    public NumericSearchQuery(SearchTerm term, ulong value);
    [CompilerGeneratedAttribute]
public ulong get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(ulong value);
}
public class MailKit.Search.OrderBy : object {
    [CompilerGeneratedAttribute]
private OrderByType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private SortOrder <Order>k__BackingField;
    public static OrderBy Arrival;
    public static OrderBy ReverseArrival;
    public static OrderBy Cc;
    public static OrderBy ReverseCc;
    public static OrderBy Date;
    public static OrderBy ReverseDate;
    public static OrderBy From;
    public static OrderBy ReverseFrom;
    public static OrderBy DisplayFrom;
    public static OrderBy ReverseDisplayFrom;
    public static OrderBy Size;
    public static OrderBy ReverseSize;
    public static OrderBy Subject;
    public static OrderBy ReverseSubject;
    public static OrderBy To;
    public static OrderBy ReverseTo;
    public static OrderBy DisplayTo;
    public static OrderBy ReverseDisplayTo;
    public OrderByType Type { get; private set; }
    public SortOrder Order { get; private set; }
    public OrderBy(OrderByType type, SortOrder order);
    private static OrderBy();
    [CompilerGeneratedAttribute]
public OrderByType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(OrderByType value);
    [CompilerGeneratedAttribute]
public SortOrder get_Order();
    [CompilerGeneratedAttribute]
private void set_Order(SortOrder value);
}
public class MailKit.Search.OrderByAnnotation : OrderBy {
    [CompilerGeneratedAttribute]
private AnnotationEntry <Entry>k__BackingField;
    [CompilerGeneratedAttribute]
private AnnotationAttribute <Attribute>k__BackingField;
    public AnnotationEntry Entry { get; private set; }
    public AnnotationAttribute Attribute { get; private set; }
    public OrderByAnnotation(AnnotationEntry entry, AnnotationAttribute attribute, SortOrder order);
    [CompilerGeneratedAttribute]
public AnnotationEntry get_Entry();
    [CompilerGeneratedAttribute]
private void set_Entry(AnnotationEntry value);
    [CompilerGeneratedAttribute]
public AnnotationAttribute get_Attribute();
    [CompilerGeneratedAttribute]
private void set_Attribute(AnnotationAttribute value);
}
public enum MailKit.Search.OrderByType : Enum {
    public int value__;
    public static OrderByType Annotation;
    public static OrderByType Arrival;
    public static OrderByType Cc;
    public static OrderByType Date;
    public static OrderByType DisplayFrom;
    public static OrderByType DisplayTo;
    public static OrderByType From;
    public static OrderByType ModSeq;
    public static OrderByType Size;
    public static OrderByType Subject;
    public static OrderByType To;
}
[FlagsAttribute]
public enum MailKit.Search.SearchOptions : Enum {
    public int value__;
    public static SearchOptions None;
    public static SearchOptions All;
    public static SearchOptions Count;
    public static SearchOptions Min;
    public static SearchOptions Max;
    public static SearchOptions Relevancy;
}
public class MailKit.Search.SearchQuery : object {
    [CompilerGeneratedAttribute]
private SearchTerm <Term>k__BackingField;
    public static SearchQuery All;
    public static SearchQuery Answered;
    public static SearchQuery Deleted;
    public static SearchQuery Draft;
    public static SearchQuery Flagged;
    public static SearchQuery New;
    public static SearchQuery NotAnswered;
    public static SearchQuery NotDeleted;
    public static SearchQuery NotDraft;
    public static SearchQuery NotFlagged;
    public static SearchQuery NotRecent;
    public static SearchQuery NotSeen;
    public static SearchQuery Old;
    public static SearchQuery Recent;
    public static SearchQuery SaveDateSupported;
    public static SearchQuery Seen;
    public SearchTerm Term { get; private set; }
    protected SearchQuery(SearchTerm term);
    private static SearchQuery();
    [CompilerGeneratedAttribute]
public SearchTerm get_Term();
    [CompilerGeneratedAttribute]
private void set_Term(SearchTerm value);
    public static BinarySearchQuery And(SearchQuery left, SearchQuery right);
    public BinarySearchQuery And(SearchQuery expr);
    public static AnnotationSearchQuery AnnotationsContain(AnnotationEntry entry, AnnotationAttribute attribute, string value);
    public static TextSearchQuery BccContains(string text);
    public static TextSearchQuery BodyContains(string text);
    public static TextSearchQuery CcContains(string text);
    public static SearchQuery ChangedSince(ulong modseq);
    public static DateSearchQuery DeliveredAfter(DateTime date);
    public static DateSearchQuery DeliveredBefore(DateTime date);
    public static DateSearchQuery DeliveredOn(DateTime date);
    public static SearchQuery Filter(string name);
    public static SearchQuery Filter(MetadataTag filter);
    public static TextSearchQuery FromContains(string text);
    public static UnarySearchQuery Fuzzy(SearchQuery expr);
    public static SearchQuery HasFlags(MessageFlags flags);
    public static SearchQuery NotFlags(MessageFlags flags);
    public static TextSearchQuery HasKeyword(string keyword);
    public static SearchQuery HasKeywords(IEnumerable`1<string> keywords);
    public static TextSearchQuery NotKeyword(string keyword);
    public static SearchQuery NotKeywords(IEnumerable`1<string> keywords);
    public static HeaderSearchQuery HeaderContains(string field, string text);
    public static NumericSearchQuery LargerThan(int octets);
    public static TextSearchQuery MessageContains(string text);
    public static UnarySearchQuery Not(SearchQuery expr);
    public static NumericSearchQuery OlderThan(int seconds);
    public static BinarySearchQuery Or(SearchQuery left, SearchQuery right);
    public BinarySearchQuery Or(SearchQuery expr);
    public static DateSearchQuery SavedBefore(DateTime date);
    public static DateSearchQuery SavedOn(DateTime date);
    public static DateSearchQuery SavedSince(DateTime date);
    public static DateSearchQuery SentBefore(DateTime date);
    public static DateSearchQuery SentOn(DateTime date);
    public static DateSearchQuery SentSince(DateTime date);
    public static NumericSearchQuery SmallerThan(int octets);
    public static TextSearchQuery SubjectContains(string text);
    public static TextSearchQuery ToContains(string text);
    public static UidSearchQuery Uids(IList`1<UniqueId> uids);
    public static NumericSearchQuery YoungerThan(int seconds);
    public static NumericSearchQuery GMailMessageId(ulong id);
    public static NumericSearchQuery GMailThreadId(ulong thread);
    public static TextSearchQuery HasGMailLabel(string label);
    public static TextSearchQuery GMailRawSearch(string expression);
    internal virtual SearchQuery Optimize(ISearchQueryOptimizer optimizer);
}
public class MailKit.Search.SearchResults : object {
    [CompilerGeneratedAttribute]
private IList`1<UniqueId> <UniqueIds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UniqueId> <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UniqueId> <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <ModSeq>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<byte> <Relevancy>k__BackingField;
    public IList`1<UniqueId> UniqueIds { get; public set; }
    public int Count { get; public set; }
    public Nullable`1<UniqueId> Min { get; public set; }
    public Nullable`1<UniqueId> Max { get; public set; }
    public Nullable`1<ulong> ModSeq { get; public set; }
    public IList`1<byte> Relevancy { get; public set; }
    public SearchResults(UInt32 uidValidity, SortOrder order);
    public SearchResults(SortOrder order);
    [CompilerGeneratedAttribute]
public IList`1<UniqueId> get_UniqueIds();
    [CompilerGeneratedAttribute]
public void set_UniqueIds(IList`1<UniqueId> value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<UniqueId> get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(Nullable`1<UniqueId> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UniqueId> get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(Nullable`1<UniqueId> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_ModSeq();
    [CompilerGeneratedAttribute]
public void set_ModSeq(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public IList`1<byte> get_Relevancy();
    [CompilerGeneratedAttribute]
public void set_Relevancy(IList`1<byte> value);
}
public enum MailKit.Search.SearchTerm : Enum {
    public int value__;
    public static SearchTerm All;
    public static SearchTerm And;
    public static SearchTerm Annotation;
    public static SearchTerm Answered;
    public static SearchTerm BccContains;
    public static SearchTerm BodyContains;
    public static SearchTerm CcContains;
    public static SearchTerm Deleted;
    public static SearchTerm DeliveredAfter;
    public static SearchTerm DeliveredBefore;
    public static SearchTerm DeliveredOn;
    public static SearchTerm Draft;
    public static SearchTerm Filter;
    public static SearchTerm Flagged;
    public static SearchTerm FromContains;
    public static SearchTerm Fuzzy;
    public static SearchTerm HeaderContains;
    public static SearchTerm Keyword;
    public static SearchTerm LargerThan;
    public static SearchTerm MessageContains;
    public static SearchTerm ModSeq;
    public static SearchTerm New;
    public static SearchTerm Not;
    public static SearchTerm NotAnswered;
    public static SearchTerm NotDeleted;
    public static SearchTerm NotDraft;
    public static SearchTerm NotFlagged;
    public static SearchTerm NotKeyword;
    public static SearchTerm NotRecent;
    public static SearchTerm NotSeen;
    public static SearchTerm Older;
    public static SearchTerm Or;
    public static SearchTerm Recent;
    public static SearchTerm SaveDateSupported;
    public static SearchTerm SavedBefore;
    public static SearchTerm SavedOn;
    public static SearchTerm SavedSince;
    public static SearchTerm Seen;
    public static SearchTerm SentBefore;
    public static SearchTerm SentOn;
    public static SearchTerm SentSince;
    public static SearchTerm SmallerThan;
    public static SearchTerm SubjectContains;
    public static SearchTerm ToContains;
    public static SearchTerm Uid;
    public static SearchTerm Younger;
    public static SearchTerm GMailMessageId;
    public static SearchTerm GMailThreadId;
    public static SearchTerm GMailLabels;
    public static SearchTerm GMailRaw;
}
public enum MailKit.Search.SortOrder : Enum {
    public int value__;
    public static SortOrder None;
    public static SortOrder Ascending;
    public static SortOrder Descending;
}
public class MailKit.Search.TextSearchQuery : SearchQuery {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; private set; }
    public TextSearchQuery(SearchTerm term, string text);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
}
public class MailKit.Search.UidSearchQuery : SearchQuery {
    [CompilerGeneratedAttribute]
private IList`1<UniqueId> <Uids>k__BackingField;
    public IList`1<UniqueId> Uids { get; private set; }
    public UidSearchQuery(IList`1<UniqueId> uids);
    public UidSearchQuery(UniqueId uid);
    [CompilerGeneratedAttribute]
public IList`1<UniqueId> get_Uids();
    [CompilerGeneratedAttribute]
private void set_Uids(IList`1<UniqueId> value);
}
public class MailKit.Search.UnarySearchQuery : SearchQuery {
    [CompilerGeneratedAttribute]
private SearchQuery <Operand>k__BackingField;
    public SearchQuery Operand { get; private set; }
    public UnarySearchQuery(SearchTerm term, SearchQuery operand);
    [CompilerGeneratedAttribute]
public SearchQuery get_Operand();
    [CompilerGeneratedAttribute]
private void set_Operand(SearchQuery value);
    internal virtual SearchQuery Optimize(ISearchQueryOptimizer optimizer);
}
public class MailKit.Security.AuthenticationException : Exception {
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
protected AuthenticationException(SerializationInfo info, StreamingContext context);
    public AuthenticationException(string message, Exception innerException);
    public AuthenticationException(string message);
}
internal class MailKit.Security.DigestChallenge : object {
    [CompilerGeneratedAttribute]
private String[] <Realms>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <Qop>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Stale>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxBuf>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Charset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <Ciphers>k__BackingField;
    private static Char[] Comma;
    public String[] Realms { get; private set; }
    public string Nonce { get; private set; }
    public HashSet`1<string> Qop { get; private set; }
    public Nullable`1<bool> Stale { get; private set; }
    public Nullable`1<int> MaxBuf { get; private set; }
    public string Charset { get; private set; }
    public string Algorithm { get; private set; }
    public HashSet`1<string> Ciphers { get; private set; }
    private static DigestChallenge();
    [CompilerGeneratedAttribute]
public String[] get_Realms();
    [CompilerGeneratedAttribute]
private void set_Realms(String[] value);
    [CompilerGeneratedAttribute]
public string get_Nonce();
    [CompilerGeneratedAttribute]
private void set_Nonce(string value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_Qop();
    [CompilerGeneratedAttribute]
private void set_Qop(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Stale();
    [CompilerGeneratedAttribute]
private void set_Stale(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxBuf();
    [CompilerGeneratedAttribute]
private void set_MaxBuf(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Charset();
    [CompilerGeneratedAttribute]
private void set_Charset(string value);
    [CompilerGeneratedAttribute]
public string get_Algorithm();
    [CompilerGeneratedAttribute]
private void set_Algorithm(string value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_Ciphers();
    [CompilerGeneratedAttribute]
private void set_Ciphers(HashSet`1<string> value);
    private static bool SkipWhiteSpace(string text, Int32& index);
    private static string GetKey(string text, Int32& index);
    private static bool TryParseQuoted(string text, Int32& index, String& value);
    private static bool TryParseValue(string text, Int32& index, String& value);
    private static bool TryParseKeyValuePair(string text, Int32& index, String& key, String& value);
    public static bool TryParseKeyValuePair(string text, String& key, String& value);
    public static DigestChallenge Parse(string token);
}
internal class MailKit.Security.DigestResponse : object {
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Realm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CNonce>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Nc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Qop>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DigestUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxBuf>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Charset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Cipher>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthZid>k__BackingField;
    public string UserName { get; private set; }
    public string Realm { get; private set; }
    public string Nonce { get; private set; }
    public string CNonce { get; private set; }
    public int Nc { get; private set; }
    public string Qop { get; private set; }
    public string DigestUri { get; private set; }
    public string Response { get; private set; }
    public Nullable`1<int> MaxBuf { get; private set; }
    public string Charset { get; private set; }
    public string Algorithm { get; private set; }
    public string Cipher { get; private set; }
    public string AuthZid { get; private set; }
    public DigestResponse(DigestChallenge challenge, Encoding encoding, string protocol, string hostName, string authzid, string userName, string password, string cnonce);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
private void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_Realm();
    [CompilerGeneratedAttribute]
private void set_Realm(string value);
    [CompilerGeneratedAttribute]
public string get_Nonce();
    [CompilerGeneratedAttribute]
private void set_Nonce(string value);
    [CompilerGeneratedAttribute]
public string get_CNonce();
    [CompilerGeneratedAttribute]
private void set_CNonce(string value);
    [CompilerGeneratedAttribute]
public int get_Nc();
    [CompilerGeneratedAttribute]
private void set_Nc(int value);
    [CompilerGeneratedAttribute]
public string get_Qop();
    [CompilerGeneratedAttribute]
private void set_Qop(string value);
    [CompilerGeneratedAttribute]
public string get_DigestUri();
    [CompilerGeneratedAttribute]
private void set_DigestUri(string value);
    [CompilerGeneratedAttribute]
public string get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxBuf();
    [CompilerGeneratedAttribute]
private void set_MaxBuf(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Charset();
    [CompilerGeneratedAttribute]
private void set_Charset(string value);
    [CompilerGeneratedAttribute]
public string get_Algorithm();
    [CompilerGeneratedAttribute]
private void set_Algorithm(string value);
    [CompilerGeneratedAttribute]
public string get_Cipher();
    [CompilerGeneratedAttribute]
private void set_Cipher(string value);
    [CompilerGeneratedAttribute]
public string get_AuthZid();
    [CompilerGeneratedAttribute]
private void set_AuthZid(string value);
    private static string HexEncode(Byte[] digest);
    public string ComputeHash(Encoding encoding, string password, bool client);
    public Byte[] Encode(Encoding encoding);
}
internal static class MailKit.Security.Ntlm.BitConverterLE : object {
    private static Byte[] GetULongBytes(Byte* bytes);
    internal static Byte[] GetBytes(long value);
    private static void UShortFromBytes(Byte* dst, Byte[] src, int startIndex);
    private static void UIntFromBytes(Byte* dst, Byte[] src, int startIndex);
    public static short ToInt16(Byte[] value, int startIndex);
    public static int ToInt32(Byte[] value, int startIndex);
    public static ushort ToUInt16(Byte[] value, int startIndex);
    public static UInt32 ToUInt32(Byte[] value, int startIndex);
}
internal class MailKit.Security.Ntlm.MD4 : object {
    private static int S11;
    private static int S12;
    private static int S13;
    private static int S14;
    private static int S21;
    private static int S22;
    private static int S23;
    private static int S24;
    private static int S31;
    private static int S32;
    private static int S33;
    private static int S34;
    private bool disposed;
    private Byte[] hashValue;
    private Byte[] buffered;
    private UInt32[] state;
    private UInt32[] count;
    private UInt32[] x;
    public Byte[] Hash { get; }
    protected virtual override void Finalize();
    public Byte[] get_Hash();
    private void HashCore(Byte[] block, int offset, int size);
    private Byte[] HashFinal();
    public void Initialize();
    private static Byte[] Padding(int length);
    private static UInt32 F(UInt32 x, UInt32 y, UInt32 z);
    private static UInt32 G(UInt32 x, UInt32 y, UInt32 z);
    private static UInt32 H(UInt32 x, UInt32 y, UInt32 z);
    private static UInt32 ROL(UInt32 x, byte n);
    private static void FF(UInt32& a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, byte s);
    private static void GG(UInt32& a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, byte s);
    private static void HH(UInt32& a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, byte s);
    private static void Encode(Byte[] output, UInt32[] input);
    private static void Decode(UInt32[] output, Byte[] input, int index);
    private void MD4Transform(Byte[] block, int index);
    public Byte[] ComputeHash(Byte[] buffer, int offset, int count);
    public Byte[] ComputeHash(Byte[] buffer);
    public Byte[] ComputeHash(Stream inputStream);
    public int TransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public Byte[] TransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal enum MailKit.Security.Ntlm.NtlmAttribute : Enum {
    public short value__;
    public static NtlmAttribute EOL;
    public static NtlmAttribute ServerName;
    public static NtlmAttribute DomainName;
    public static NtlmAttribute DnsServerName;
    public static NtlmAttribute DnsDomainName;
    public static NtlmAttribute DnsTreeName;
    public static NtlmAttribute Flags;
    public static NtlmAttribute Timestamp;
    public static NtlmAttribute SingleHost;
    public static NtlmAttribute TargetName;
    public static NtlmAttribute ChannelBinding;
}
internal class MailKit.Security.Ntlm.NtlmAttributeByteArrayValuePair : NtlmAttributeValuePair {
    [CompilerGeneratedAttribute]
private Byte[] <Value>k__BackingField;
    public Byte[] Value { get; public set; }
    public NtlmAttributeByteArrayValuePair(NtlmAttribute attr, Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(Byte[] value);
    public virtual int GetEncodedLength(Encoding encoding);
    public virtual void EncodeTo(Encoding encoding, Byte[] buffer, Int32& index);
}
[DebuggerDisplayAttribute("{Attribute} = {Value}")]
internal class MailKit.Security.Ntlm.NtlmAttributeFlagsValuePair : NtlmAttributeValuePair {
    [CompilerGeneratedAttribute]
private short <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Value>k__BackingField;
    public short Size { get; internal set; }
    public int Value { get; public set; }
    internal NtlmAttributeFlagsValuePair(NtlmAttribute attr, int value, short size);
    public NtlmAttributeFlagsValuePair(NtlmAttribute attr, int value);
    [CompilerGeneratedAttribute]
public short get_Size();
    [CompilerGeneratedAttribute]
internal void set_Size(short value);
    [CompilerGeneratedAttribute]
public int get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(int value);
    public virtual int GetEncodedLength(Encoding encoding);
    public virtual void EncodeTo(Encoding encoding, Byte[] buffer, Int32& index);
}
[DebuggerDisplayAttribute("{Attribute} = {Value}")]
internal class MailKit.Security.Ntlm.NtlmAttributeStringValuePair : NtlmAttributeValuePair {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; public set; }
    public NtlmAttributeStringValuePair(NtlmAttribute attr, string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    public virtual int GetEncodedLength(Encoding encoding);
    public virtual void EncodeTo(Encoding encoding, Byte[] buffer, Int32& index);
}
[DebuggerDisplayAttribute("{Attribute} = {Value}")]
internal class MailKit.Security.Ntlm.NtlmAttributeTimestampValuePair : NtlmAttributeValuePair {
    [CompilerGeneratedAttribute]
private short <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Value>k__BackingField;
    public short Size { get; internal set; }
    public long Value { get; public set; }
    internal NtlmAttributeTimestampValuePair(NtlmAttribute attr, long value, short size);
    public NtlmAttributeTimestampValuePair(NtlmAttribute attr, long value);
    [CompilerGeneratedAttribute]
public short get_Size();
    [CompilerGeneratedAttribute]
internal void set_Size(short value);
    [CompilerGeneratedAttribute]
public long get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(long value);
    public virtual int GetEncodedLength(Encoding encoding);
    public virtual void EncodeTo(Encoding encoding, Byte[] buffer, Int32& index);
}
internal abstract class MailKit.Security.Ntlm.NtlmAttributeValuePair : object {
    [CompilerGeneratedAttribute]
private NtlmAttribute <Attribute>k__BackingField;
    public NtlmAttribute Attribute { get; private set; }
    protected NtlmAttributeValuePair(NtlmAttribute attr);
    [CompilerGeneratedAttribute]
public NtlmAttribute get_Attribute();
    [CompilerGeneratedAttribute]
private void set_Attribute(NtlmAttribute value);
    protected static void EncodeInt16(Byte[] buf, Int32& index, short value);
    protected static void EncodeInt32(Byte[] buf, Int32& index, int value);
    protected static void EncodeTypeAndLength(Byte[] buf, Int32& index, NtlmAttribute attr, short length);
    public abstract virtual int GetEncodedLength(Encoding encoding);
    public abstract virtual void EncodeTo(Encoding encoding, Byte[] buffer, Int32& index);
}
internal class MailKit.Security.Ntlm.NtlmAuthenticateMessage : NtlmMessageBase {
    private static Byte[] Z16;
    private NtlmNegotiateMessage negotiate;
    private NtlmChallengeMessage challenge;
    private Byte[] clientChallenge;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Workstation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Mic>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <LmChallengeResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <NtChallengeResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ExportedSessionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <EncryptedRandomSessionKey>k__BackingField;
    internal Byte[] ClientChallenge { get; internal set; }
    internal Nullable`1<long> Timestamp { get; internal set; }
    public string Domain { get; private set; }
    public string Workstation { get; private set; }
    public string Password { get; private set; }
    public string UserName { get; private set; }
    public Byte[] Mic { get; private set; }
    public Byte[] LmChallengeResponse { get; private set; }
    public Byte[] NtChallengeResponse { get; private set; }
    public Byte[] ExportedSessionKey { get; private set; }
    public Byte[] EncryptedRandomSessionKey { get; private set; }
    public NtlmAuthenticateMessage(NtlmNegotiateMessage negotiate, NtlmChallengeMessage challenge, string userName, string password, string domain, string workstation);
    public NtlmAuthenticateMessage(Byte[] message, int startIndex, int length);
    private static NtlmAuthenticateMessage();
    protected virtual override void Finalize();
    internal Byte[] get_ClientChallenge();
    internal void set_ClientChallenge(Byte[] value);
    [CompilerGeneratedAttribute]
internal Nullable`1<long> get_Timestamp();
    [CompilerGeneratedAttribute]
internal void set_Timestamp(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
private void set_Domain(string value);
    [CompilerGeneratedAttribute]
public string get_Workstation();
    [CompilerGeneratedAttribute]
private void set_Workstation(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
private void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
private void set_UserName(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_Mic();
    [CompilerGeneratedAttribute]
private void set_Mic(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_LmChallengeResponse();
    [CompilerGeneratedAttribute]
private void set_LmChallengeResponse(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_NtChallengeResponse();
    [CompilerGeneratedAttribute]
private void set_NtChallengeResponse(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_ExportedSessionKey();
    [CompilerGeneratedAttribute]
private void set_ExportedSessionKey(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_EncryptedRandomSessionKey();
    [CompilerGeneratedAttribute]
private void set_EncryptedRandomSessionKey(Byte[] value);
    private void Decode(Byte[] message, int startIndex, int length);
    private string DecodeString(Byte[] buffer, int offset, int len);
    private Byte[] EncodeString(string text);
    public void ComputeNtlmV2(string targetName, bool unverifiedTargetName, Byte[] channelBinding);
    public virtual Byte[] Encode();
}
internal class MailKit.Security.Ntlm.NtlmChallengeMessage : NtlmMessageBase {
    private static NtlmFlags DefaultFlags;
    private Byte[] serverChallenge;
    private Byte[] cached;
    [CompilerGeneratedAttribute]
private string <TargetName>k__BackingField;
    [CompilerGeneratedAttribute]
private NtlmTargetInfo <TargetInfo>k__BackingField;
    public Byte[] ServerChallenge { get; public set; }
    public string TargetName { get; public set; }
    public NtlmTargetInfo TargetInfo { get; public set; }
    public NtlmChallengeMessage(NtlmFlags flags, Version osVersion);
    public NtlmChallengeMessage(Version osVersion);
    public NtlmChallengeMessage(Byte[] message, int startIndex, int length);
    protected virtual override void Finalize();
    public Byte[] get_ServerChallenge();
    public void set_ServerChallenge(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_TargetName();
    [CompilerGeneratedAttribute]
public void set_TargetName(string value);
    [CompilerGeneratedAttribute]
public NtlmTargetInfo get_TargetInfo();
    [CompilerGeneratedAttribute]
public void set_TargetInfo(NtlmTargetInfo value);
    public Byte[] GetEncodedTargetInfo();
    private void Decode(Byte[] message, int startIndex, int length);
    public virtual Byte[] Encode();
}
[FlagsAttribute]
internal enum MailKit.Security.Ntlm.NtlmFlags : Enum {
    public int value__;
    public static NtlmFlags NegotiateUnicode;
    public static NtlmFlags NegotiateOem;
    public static NtlmFlags RequestTarget;
    public static NtlmFlags R10;
    public static NtlmFlags NegotiateSign;
    public static NtlmFlags NegotiateSeal;
    public static NtlmFlags NegotiateDatagramStyle;
    public static NtlmFlags NegotiateLanManagerKey;
    public static NtlmFlags R9;
    public static NtlmFlags NegotiateNtlm;
    public static NtlmFlags R8;
    public static NtlmFlags NegotiateAnonymous;
    public static NtlmFlags NegotiateDomainSupplied;
    public static NtlmFlags NegotiateWorkstationSupplied;
    public static NtlmFlags NegotiateLocalCall;
    public static NtlmFlags R7;
    public static NtlmFlags NegotiateAlwaysSign;
    public static NtlmFlags TargetTypeDomain;
    public static NtlmFlags TargetTypeServer;
    public static NtlmFlags TargetTypeShare;
    public static NtlmFlags R6;
    public static NtlmFlags NegotiateExtendedSessionSecurity;
    public static NtlmFlags NegotiateIdentify;
    public static NtlmFlags R5;
    public static NtlmFlags RequestNonNTSessionKey;
    public static NtlmFlags NegotiateTargetInfo;
    public static NtlmFlags R4;
    public static NtlmFlags NegotiateVersion;
    public static NtlmFlags R3;
    public static NtlmFlags R2;
    public static NtlmFlags R1;
    public static NtlmFlags Negotiate128;
    public static NtlmFlags NegotiateKeyExchange;
    public static NtlmFlags Negotiate56;
}
internal abstract class MailKit.Security.Ntlm.NtlmMessageBase : object {
    private static Byte[] Signature;
    [CompilerGeneratedAttribute]
private NtlmFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <OSVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Type>k__BackingField;
    public NtlmFlags Flags { get; protected set; }
    public Version OSVersion { get; protected set; }
    public int Type { get; private set; }
    protected NtlmMessageBase(int type);
    private static NtlmMessageBase();
    [CompilerGeneratedAttribute]
public NtlmFlags get_Flags();
    [CompilerGeneratedAttribute]
protected void set_Flags(NtlmFlags value);
    [CompilerGeneratedAttribute]
public Version get_OSVersion();
    [CompilerGeneratedAttribute]
protected void set_OSVersion(Version value);
    [CompilerGeneratedAttribute]
public int get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(int value);
    protected Byte[] PrepareMessage(int size);
    private bool CheckSignature(Byte[] message, int startIndex);
    protected void ValidateArguments(Byte[] message, int startIndex, int length);
    public abstract virtual Byte[] Encode();
}
internal class MailKit.Security.Ntlm.NtlmNegotiateMessage : NtlmMessageBase {
    internal static NtlmFlags DefaultFlags;
    private Byte[] cached;
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Workstation>k__BackingField;
    public string Domain { get; private set; }
    public string Workstation { get; private set; }
    public NtlmNegotiateMessage(NtlmFlags flags, string domain, string workstation, Version osVersion);
    public NtlmNegotiateMessage(string domain, string workstation, Version osVersion);
    public NtlmNegotiateMessage(Byte[] message, int startIndex, int length);
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
private void set_Domain(string value);
    [CompilerGeneratedAttribute]
public string get_Workstation();
    [CompilerGeneratedAttribute]
private void set_Workstation(string value);
    private void Decode(Byte[] message, int startIndex, int length);
    public virtual Byte[] Encode();
}
internal class MailKit.Security.Ntlm.NtlmSingleHostData : object {
    [CompilerGeneratedAttribute]
private Byte[] <CustomData>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <MachineId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    public Byte[] CustomData { get; private set; }
    public Byte[] MachineId { get; private set; }
    public int Size { get; private set; }
    public NtlmSingleHostData(Byte[] buffer, int startIndex, int length);
    public NtlmSingleHostData(Byte[] customData, Byte[] machineId);
    [CompilerGeneratedAttribute]
public Byte[] get_CustomData();
    [CompilerGeneratedAttribute]
private void set_CustomData(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_MachineId();
    [CompilerGeneratedAttribute]
private void set_MachineId(Byte[] value);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(int value);
    private void Decode(Byte[] buffer, int startIndex, int length);
    public Byte[] Encode();
}
internal class MailKit.Security.Ntlm.NtlmTargetInfo : object {
    private List`1<NtlmAttributeValuePair> attributes;
    public string ServerName { get; public set; }
    public string DomainName { get; public set; }
    public string DnsServerName { get; public set; }
    public string DnsDomainName { get; public set; }
    public string DnsTreeName { get; public set; }
    public Nullable`1<int> Flags { get; public set; }
    public Nullable`1<long> Timestamp { get; public set; }
    public Byte[] SingleHost { get; public set; }
    public string TargetName { get; public set; }
    public Byte[] ChannelBinding { get; public set; }
    public NtlmTargetInfo(Byte[] buffer, int startIndex, int length, bool unicode);
    public void CopyTo(NtlmTargetInfo targetInfo);
    internal NtlmAttributeValuePair GetAvPair(NtlmAttribute attr);
    private string GetAvPairString(NtlmAttribute attr);
    private void SetAvPairString(NtlmAttribute attr, string value);
    private Byte[] GetAvPairByteArray(NtlmAttribute attr);
    private void SetAvPairByteArray(NtlmAttribute attr, Byte[] value);
    public string get_ServerName();
    public void set_ServerName(string value);
    public string get_DomainName();
    public void set_DomainName(string value);
    public string get_DnsServerName();
    public void set_DnsServerName(string value);
    public string get_DnsDomainName();
    public void set_DnsDomainName(string value);
    public string get_DnsTreeName();
    public void set_DnsTreeName(string value);
    public Nullable`1<int> get_Flags();
    public void set_Flags(Nullable`1<int> value);
    public Nullable`1<long> get_Timestamp();
    public void set_Timestamp(Nullable`1<long> value);
    public Byte[] get_SingleHost();
    public void set_SingleHost(Byte[] value);
    public string get_TargetName();
    public void set_TargetName(string value);
    public Byte[] get_ChannelBinding();
    public void set_ChannelBinding(Byte[] value);
    private static Byte[] DecodeByteArray(Byte[] buffer, Int32& index);
    private static string DecodeString(Byte[] buffer, Int32& index, bool unicode);
    private static int DecodeFlags(Byte[] buffer, Int32& index, Int16& size);
    private static long DecodeTimestamp(Byte[] buffer, Int32& index, Int16& size);
    private void Decode(Byte[] buffer, int startIndex, int length, bool unicode);
    private int CalculateSize(Encoding encoding);
    public Byte[] Encode(bool unicode);
}
internal static class MailKit.Security.Ntlm.NtlmUtils : object {
    private static Byte[] Responserversion;
    private static Byte[] HiResponserversion;
    private static Byte[] Z24;
    private static Byte[] Z6;
    private static Byte[] Z4;
    private static Byte[] Z1;
    private static NtlmUtils();
    public static Byte[] ConcatenationOf(String[] values);
    public static Byte[] ConcatenationOf(Byte[][] values);
    private static Byte[] MD4(Byte[] buffer);
    private static Byte[] MD4(string password);
    public static Byte[] MD5(Byte[] buffer);
    public static Byte[] HMACMD5(Byte[] key, Byte[][] values);
    public static Byte[] NONCE(int size);
    public static Byte[] RC4K(Byte[] key, Byte[] message);
    private static Byte[] NTOWFv2(string domain, string userName, string password);
    public static void ComputeNtlmV2(NtlmChallengeMessage type2, string domain, string userName, string password, Byte[] targetInfo, Byte[] clientChallenge, Nullable`1<long> time, Byte[]& ntChallengeResponse, Byte[]& lmChallengeResponse, Byte[]& sessionBaseKey);
}
internal class MailKit.Security.Ntlm.RC4 : SymmetricAlgorithm {
    private Byte[] key;
    private Byte[] state;
    private byte x;
    private byte y;
    private bool disposed;
    public bool CanReuseTransform { get; }
    public bool CanTransformMultipleBlocks { get; }
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    public Byte[] Key { get; public set; }
    protected virtual override void Finalize();
    public sealed virtual bool get_CanReuseTransform();
    public sealed virtual bool get_CanTransformMultipleBlocks();
    public sealed virtual int get_InputBlockSize();
    public sealed virtual int get_OutputBlockSize();
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    public virtual ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgvIV);
    public virtual ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgvIV);
    public virtual void GenerateIV();
    public virtual void GenerateKey();
    private void KeySetup(Byte[] key);
    private static void CheckInput(Byte[] inputBuffer, int inputOffset, int inputCount);
    public sealed virtual int TransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    private int InternalTransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public sealed virtual Byte[] TransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
    protected virtual void Dispose(bool disposing);
}
public enum MailKit.Security.SaslErrorCode : Enum {
    public int value__;
    public static SaslErrorCode ChallengeTooLong;
    public static SaslErrorCode IncompleteChallenge;
    public static SaslErrorCode InvalidChallenge;
    public static SaslErrorCode MissingChallenge;
    public static SaslErrorCode IncorrectHash;
}
public class MailKit.Security.SaslException : AuthenticationException {
    [CompilerGeneratedAttribute]
private SaslErrorCode <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mechanism>k__BackingField;
    public SaslErrorCode ErrorCode { get; private set; }
    public string Mechanism { get; private set; }
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
protected SaslException(SerializationInfo info, StreamingContext context);
    public SaslException(string mechanism, SaslErrorCode code, string message);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public SaslErrorCode get_ErrorCode();
    [CompilerGeneratedAttribute]
private void set_ErrorCode(SaslErrorCode value);
    [CompilerGeneratedAttribute]
public string get_Mechanism();
    [CompilerGeneratedAttribute]
private void set_Mechanism(string value);
}
public abstract class MailKit.Security.SaslMechanism : object {
    private static String[] RankedAuthenticationMechanisms;
    private static bool md5supported;
    [CompilerGeneratedAttribute]
private NetworkCredential <Credentials>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAuthenticated>k__BackingField;
    [CompilerGeneratedAttribute]
private IChannelBindingContext <ChannelBindingContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    public string MechanismName { get; }
    public NetworkCredential Credentials { get; private set; }
    public bool SupportsChannelBinding { get; }
    public bool SupportsInitialResponse { get; }
    public bool IsAuthenticated { get; protected set; }
    public bool NegotiatedChannelBinding { get; }
    public bool NegotiatedSecurityLayer { get; }
    internal IChannelBindingContext ChannelBindingContext { get; internal set; }
    internal Uri Uri { get; internal set; }
    private static SaslMechanism();
    protected SaslMechanism(NetworkCredential credentials);
    protected SaslMechanism(string userName, string password);
    [IteratorStateMachineAttribute("MailKit.Security.SaslMechanism/<Rank>d__3")]
internal static IEnumerable`1<string> Rank(HashSet`1<string> authenticationMechanisms);
    public abstract virtual string get_MechanismName();
    [CompilerGeneratedAttribute]
public NetworkCredential get_Credentials();
    [CompilerGeneratedAttribute]
private void set_Credentials(NetworkCredential value);
    public virtual bool get_SupportsChannelBinding();
    public virtual bool get_SupportsInitialResponse();
    [CompilerGeneratedAttribute]
public bool get_IsAuthenticated();
    [CompilerGeneratedAttribute]
protected void set_IsAuthenticated(bool value);
    public virtual bool get_NegotiatedChannelBinding();
    public virtual bool get_NegotiatedSecurityLayer();
    [CompilerGeneratedAttribute]
internal IChannelBindingContext get_ChannelBindingContext();
    [CompilerGeneratedAttribute]
internal void set_ChannelBindingContext(IChannelBindingContext value);
    [CompilerGeneratedAttribute]
internal Uri get_Uri();
    [CompilerGeneratedAttribute]
internal void set_Uri(Uri value);
    protected bool TryGetChannelBindingToken(ChannelBindingKind kind, Byte[]& token);
    private static Byte[] Base64Decode(string token, Int32& length);
    private static string Base64Encode(Byte[] challenge);
    protected abstract virtual Byte[] Challenge(Byte[] token, int startIndex, int length, CancellationToken cancellationToken);
    public string Challenge(string token, CancellationToken cancellationToken);
    protected virtual Task`1<Byte[]> ChallengeAsync(Byte[] token, int startIndex, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MailKit.Security.SaslMechanism/<ChallengeAsync>d__38")]
public Task`1<string> ChallengeAsync(string token, CancellationToken cancellationToken);
    public virtual void Reset();
    public static bool IsSupported(string mechanism);
    public static SaslMechanism Create(string mechanism, Encoding encoding, NetworkCredential credentials);
    public static SaslMechanism Create(string mechanism, NetworkCredential credentials);
    private static bool IsNonAsciiSpace(char c);
    private static bool IsCommonlyMappedToNothing(char c);
    private static bool IsProhibited(string s, int index);
    public static string SaslPrep(string s);
    internal static string GenerateEntropy(int n);
}
public class MailKit.Security.SaslMechanismAnonymous : SaslMechanism {
    private Encoding encoding;
    public string MechanismName { get; }
    public bool SupportsInitialResponse { get; }
    public SaslMechanismAnonymous(Encoding encoding, NetworkCredential credentials);
    public SaslMechanismAnonymous(Encoding encoding, string userName);
    public SaslMechanismAnonymous(NetworkCredential credentials);
    public SaslMechanismAnonymous(string userName);
    public virtual string get_MechanismName();
    public virtual bool get_SupportsInitialResponse();
    protected virtual Byte[] Challenge(Byte[] token, int startIndex, int length, CancellationToken cancellationToken);
}
public class MailKit.Security.SaslMechanismCramMd5 : SaslMechanism {
    private static Byte[] HexAlphabet;
    public string MechanismName { get; }
    public SaslMechanismCramMd5(NetworkCredential credentials);
    public SaslMechanismCramMd5(string userName, string password);
    private static SaslMechanismCramMd5();
    public virtual string get_MechanismName();
    protected virtual Byte[] Challenge(Byte[] token, int startIndex, int length, CancellationToken cancellationToken);
}
public class MailKit.Security.SaslMechanismDigestMd5 : SaslMechanism {
    private DigestChallenge challenge;
    private DigestResponse response;
    internal string cnonce;
    private Encoding encoding;
    private LoginState state;
    [CompilerGeneratedAttribute]
private string <AuthorizationId>k__BackingField;
    public string AuthorizationId { get; public set; }
    public string MechanismName { get; }
    public SaslMechanismDigestMd5(NetworkCredential credentials);
    public SaslMechanismDigestMd5(string userName, string password);
    [CompilerGeneratedAttribute]
public string get_AuthorizationId();
    [CompilerGeneratedAttribute]
public void set_AuthorizationId(string value);
    public virtual string get_MechanismName();
    protected virtual Byte[] Challenge(Byte[] token, int startIndex, int length, CancellationToken cancellationToken);
    public virtual void Reset();
}
public class MailKit.Security.SaslMechanismLogin : SaslMechanism {
    private Encoding encoding;
    private LoginState state;
    public string MechanismName { get; }
    public bool SupportsInitialResponse { get; }
    public SaslMechanismLogin(Encoding encoding, NetworkCredential credentials);
    public SaslMechanismLogin(Encoding encoding, string userName, string password);
    public SaslMechanismLogin(NetworkCredential credentials);
    public SaslMechanismLogin(string userName, string password);
    public virtual string get_MechanismName();
    public virtual bool get_SupportsInitialResponse();
    protected virtual Byte[] Challenge(Byte[] token, int startIndex, int length, CancellationToken cancellationToken);
    public virtual void Reset();
}
public class MailKit.Security.SaslMechanismNtlm : SaslMechanism {
    private static Version DefaultOSVersion;
    private NtlmNegotiateMessage negotiate;
    private bool negotiatedChannelBinding;
    private LoginState state;
    [CompilerGeneratedAttribute]
private Byte[] <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowChannelBinding>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <OSVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Workstation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicePrincipalName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUnverifiedServicePrincipalName>k__BackingField;
    internal Byte[] Nonce { get; internal set; }
    internal Nullable`1<long> Timestamp { get; internal set; }
    public string MechanismName { get; }
    public bool SupportsChannelBinding { get; }
    public bool NegotiatedChannelBinding { get; }
    public bool SupportsInitialResponse { get; }
    public bool AllowChannelBinding { get; public set; }
    public Version OSVersion { get; public set; }
    public string Workstation { get; public set; }
    public string ServicePrincipalName { get; public set; }
    public bool IsUnverifiedServicePrincipalName { get; public set; }
    private static SaslMechanismNtlm();
    public SaslMechanismNtlm(NetworkCredential credentials);
    public SaslMechanismNtlm(string userName, string password);
    [CompilerGeneratedAttribute]
internal Byte[] get_Nonce();
    [CompilerGeneratedAttribute]
internal void set_Nonce(Byte[] value);
    [CompilerGeneratedAttribute]
internal Nullable`1<long> get_Timestamp();
    [CompilerGeneratedAttribute]
internal void set_Timestamp(Nullable`1<long> value);
    public virtual string get_MechanismName();
    public virtual bool get_SupportsChannelBinding();
    public virtual bool get_NegotiatedChannelBinding();
    public virtual bool get_SupportsInitialResponse();
    [CompilerGeneratedAttribute]
public bool get_AllowChannelBinding();
    [CompilerGeneratedAttribute]
public void set_AllowChannelBinding(bool value);
    [CompilerGeneratedAttribute]
public Version get_OSVersion();
    [CompilerGeneratedAttribute]
public void set_OSVersion(Version value);
    [CompilerGeneratedAttribute]
public string get_Workstation();
    [CompilerGeneratedAttribute]
public void set_Workstation(string value);
    [CompilerGeneratedAttribute]
public string get_ServicePrincipalName();
    [CompilerGeneratedAttribute]
public void set_ServicePrincipalName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsUnverifiedServicePrincipalName();
    [CompilerGeneratedAttribute]
public void set_IsUnverifiedServicePrincipalName(bool value);
    protected virtual Byte[] Challenge(Byte[] token, int startIndex, int length, CancellationToken cancellationToken);
    private NtlmAuthenticateMessage GetChallengeResponse(string domain, string userName, string password, Byte[] token, int startIndex, int length);
    public virtual void Reset();
}
public class MailKit.Security.SaslMechanismOAuth2 : SaslMechanism {
    private static string AuthBearer;
    private static string UserEquals;
    public string MechanismName { get; }
    public bool SupportsInitialResponse { get; }
    public SaslMechanismOAuth2(NetworkCredential credentials);
    public SaslMechanismOAuth2(string userName, string auth_token);
    public virtual string get_MechanismName();
    public virtual bool get_SupportsInitialResponse();
    protected virtual Byte[] Challenge(Byte[] token, int startIndex, int length, CancellationToken cancellationToken);
}
public class MailKit.Security.SaslMechanismOAuthBearer : SaslMechanism {
    private static Byte[] ErrorResponse;
    private static string AuthBearer;
    private static string HostEquals;
    private static string PortEquals;
    public string MechanismName { get; }
    public bool SupportsInitialResponse { get; }
    public SaslMechanismOAuthBearer(NetworkCredential credentials);
    public SaslMechanismOAuthBearer(string userName, string auth_token);
    private static SaslMechanismOAuthBearer();
    public virtual string get_MechanismName();
    public virtual bool get_SupportsInitialResponse();
    private static int CalculateBufferSize(Byte[] authzid, Byte[] host, string port, string token);
    protected virtual Byte[] Challenge(Byte[] token, int startIndex, int length, CancellationToken cancellationToken);
}
public class MailKit.Security.SaslMechanismPlain : SaslMechanism {
    private Encoding encoding;
    [CompilerGeneratedAttribute]
private string <AuthorizationId>k__BackingField;
    public string AuthorizationId { get; public set; }
    public string MechanismName { get; }
    public bool SupportsInitialResponse { get; }
    public SaslMechanismPlain(Encoding encoding, NetworkCredential credentials);
    public SaslMechanismPlain(Encoding encoding, string userName, string password);
    public SaslMechanismPlain(NetworkCredential credentials);
    public SaslMechanismPlain(string userName, string password);
    [CompilerGeneratedAttribute]
public string get_AuthorizationId();
    [CompilerGeneratedAttribute]
public void set_AuthorizationId(string value);
    public virtual string get_MechanismName();
    public virtual bool get_SupportsInitialResponse();
    protected virtual Byte[] Challenge(Byte[] token, int startIndex, int length, CancellationToken cancellationToken);
}
public abstract class MailKit.Security.SaslMechanismScramBase : SaslMechanism {
    private ChannelBindingKind channelBindingKind;
    private bool negotiatedChannelBinding;
    private Byte[] channelBindingToken;
    internal string cnonce;
    private string client;
    private string server;
    private Byte[] salted;
    private Byte[] auth;
    private LoginState state;
    [CompilerGeneratedAttribute]
private string <AuthorizationId>k__BackingField;
    public string AuthorizationId { get; public set; }
    public bool SupportsInitialResponse { get; }
    public bool NegotiatedChannelBinding { get; }
    protected SaslMechanismScramBase(NetworkCredential credentials);
    protected SaslMechanismScramBase(string userName, string password);
    [CompilerGeneratedAttribute]
public string get_AuthorizationId();
    [CompilerGeneratedAttribute]
public void set_AuthorizationId(string value);
    public virtual bool get_SupportsInitialResponse();
    public virtual bool get_NegotiatedChannelBinding();
    private static string Normalize(string str);
    protected abstract virtual KeyedHashAlgorithm CreateHMAC(Byte[] key);
    private Byte[] HMAC(Byte[] key, Byte[] str);
    protected abstract virtual Byte[] Hash(Byte[] str);
    private static void Xor(Byte[] a, Byte[] b);
    private Byte[] Hi(Byte[] str, Byte[] salt, int count);
    private static Dictionary`2<char, string> ParseServerChallenge(string challenge);
    private static string GetChannelBindingName(ChannelBindingKind kind);
    private static string GetChannelBindingInput(ChannelBindingKind kind, string authzid);
    protected virtual Byte[] Challenge(Byte[] token, int startIndex, int length, CancellationToken cancellationToken);
    public virtual void Reset();
}
public class MailKit.Security.SaslMechanismScramSha1 : SaslMechanismScramBase {
    public string MechanismName { get; }
    public SaslMechanismScramSha1(NetworkCredential credentials);
    public SaslMechanismScramSha1(string userName, string password);
    public virtual string get_MechanismName();
    protected virtual KeyedHashAlgorithm CreateHMAC(Byte[] key);
    protected virtual Byte[] Hash(Byte[] str);
}
public class MailKit.Security.SaslMechanismScramSha1Plus : SaslMechanismScramSha1 {
    public string MechanismName { get; }
    public bool SupportsChannelBinding { get; }
    public SaslMechanismScramSha1Plus(NetworkCredential credentials);
    public SaslMechanismScramSha1Plus(string userName, string password);
    public virtual string get_MechanismName();
    public virtual bool get_SupportsChannelBinding();
}
public class MailKit.Security.SaslMechanismScramSha256 : SaslMechanismScramBase {
    public string MechanismName { get; }
    public SaslMechanismScramSha256(NetworkCredential credentials);
    public SaslMechanismScramSha256(string userName, string password);
    public virtual string get_MechanismName();
    protected virtual KeyedHashAlgorithm CreateHMAC(Byte[] key);
    protected virtual Byte[] Hash(Byte[] str);
}
public class MailKit.Security.SaslMechanismScramSha256Plus : SaslMechanismScramSha256 {
    public string MechanismName { get; }
    public bool SupportsChannelBinding { get; }
    public SaslMechanismScramSha256Plus(NetworkCredential credentials);
    public SaslMechanismScramSha256Plus(string userName, string password);
    public virtual string get_MechanismName();
    public virtual bool get_SupportsChannelBinding();
}
public class MailKit.Security.SaslMechanismScramSha512 : SaslMechanismScramBase {
    public string MechanismName { get; }
    public SaslMechanismScramSha512(NetworkCredential credentials);
    public SaslMechanismScramSha512(string userName, string password);
    public virtual string get_MechanismName();
    protected virtual KeyedHashAlgorithm CreateHMAC(Byte[] key);
    protected virtual Byte[] Hash(Byte[] str);
}
public class MailKit.Security.SaslMechanismScramSha512Plus : SaslMechanismScramSha512 {
    public string MechanismName { get; }
    public bool SupportsChannelBinding { get; }
    public SaslMechanismScramSha512Plus(NetworkCredential credentials);
    public SaslMechanismScramSha512Plus(string userName, string password);
    public virtual string get_MechanismName();
    public virtual bool get_SupportsChannelBinding();
}
public enum MailKit.Security.SecureSocketOptions : Enum {
    public int value__;
    public static SecureSocketOptions None;
    public static SecureSocketOptions Auto;
    public static SecureSocketOptions SslOnConnect;
    public static SecureSocketOptions StartTls;
    public static SecureSocketOptions StartTlsWhenAvailable;
}
internal class MailKit.Security.SslCertificateValidationInfo : object {
    public List`1<SslChainElement> ChainElements;
    public X509ChainStatus[] ChainStatus;
    public SslPolicyErrors SslPolicyErrors;
    public X509Certificate2 Certificate;
    public string Host;
    public SslCertificateValidationInfo(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    public sealed virtual void Dispose();
}
internal class MailKit.Security.SslChainElement : object {
    public X509Certificate2 Certificate;
    public X509ChainStatus[] ChainElementStatus;
    public string Information;
    public SslChainElement(X509ChainElement element);
    public sealed virtual void Dispose();
}
public class MailKit.Security.SslHandshakeException : Exception {
    private static string SslHandshakeHelpLink;
    private static string DefaultMessage;
    [CompilerGeneratedAttribute]
private X509Certificate <ServerCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate <RootCertificateAuthority>k__BackingField;
    public X509Certificate ServerCertificate { get; private set; }
    public X509Certificate RootCertificateAuthority { get; private set; }
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
protected SslHandshakeException(SerializationInfo info, StreamingContext context);
    public SslHandshakeException(string message, Exception innerException);
    public SslHandshakeException(string message);
    [CompilerGeneratedAttribute]
public X509Certificate get_ServerCertificate();
    [CompilerGeneratedAttribute]
private void set_ServerCertificate(X509Certificate value);
    [CompilerGeneratedAttribute]
public X509Certificate get_RootCertificateAuthority();
    [CompilerGeneratedAttribute]
private void set_RootCertificateAuthority(X509Certificate value);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal static SslHandshakeException Create(SslCertificateValidationInfo& validationInfo, Exception ex, bool starttls, string protocol, string host, int port, int sslPort, Int32[] standardPorts);
    private static IReadOnlyCollection`1<string> GetDnsNames(X509Certificate2 certificate);
}
public class MailKit.ServiceNotAuthenticatedException : InvalidOperationException {
    [SecuritySafeCriticalAttribute]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
protected ServiceNotAuthenticatedException(SerializationInfo info, StreamingContext context);
    public ServiceNotAuthenticatedException(string message, Exception innerException);
    public ServiceNotAuthenticatedException(string message);
}
public class MailKit.ServiceNotConnectedException : InvalidOperationException {
    [SecuritySafeCriticalAttribute]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
protected ServiceNotConnectedException(SerializationInfo info, StreamingContext context);
    public ServiceNotConnectedException(string message, Exception innerException);
    public ServiceNotConnectedException(string message);
}
public enum MailKit.SpecialFolder : Enum {
    public int value__;
    public static SpecialFolder All;
    public static SpecialFolder Archive;
    public static SpecialFolder Drafts;
    public static SpecialFolder Flagged;
    public static SpecialFolder Important;
    public static SpecialFolder Junk;
    public static SpecialFolder Sent;
    public static SpecialFolder Trash;
}
[FlagsAttribute]
public enum MailKit.StatusItems : Enum {
    public int value__;
    public static StatusItems None;
    public static StatusItems Count;
    public static StatusItems Recent;
    public static StatusItems UidNext;
    public static StatusItems UidValidity;
    public static StatusItems Unread;
    public static StatusItems HighestModSeq;
    public static StatusItems AppendLimit;
    public static StatusItems Size;
    public static StatusItems MailboxId;
}
public enum MailKit.StoreAction : Enum {
    public int value__;
    public static StoreAction Add;
    public static StoreAction Remove;
    public static StoreAction Set;
}
public class MailKit.StoreFlagsRequest : object {
    [CompilerGeneratedAttribute]
private StoreAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Keywords>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Silent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <UnchangedSince>k__BackingField;
    public StoreAction Action { get; private set; }
    public MessageFlags Flags { get; public set; }
    public ISet`1<string> Keywords { get; }
    public bool Silent { get; public set; }
    public Nullable`1<ulong> UnchangedSince { get; public set; }
    public StoreFlagsRequest(StoreAction action, MessageFlags flags);
    public StoreFlagsRequest(StoreAction action, IEnumerable`1<string> keywords);
    public StoreFlagsRequest(StoreAction action, MessageFlags flags, IEnumerable`1<string> keywords);
    [CompilerGeneratedAttribute]
public sealed virtual StoreAction get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(StoreAction value);
    [CompilerGeneratedAttribute]
public sealed virtual MessageFlags get_Flags();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Flags(MessageFlags value);
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<string> get_Keywords();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Silent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Silent(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<ulong> get_UnchangedSince();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UnchangedSince(Nullable`1<ulong> value);
}
public class MailKit.StoreLabelsRequest : object {
    [CompilerGeneratedAttribute]
private StoreAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Silent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <UnchangedSince>k__BackingField;
    public StoreAction Action { get; private set; }
    public ISet`1<string> Labels { get; }
    public bool Silent { get; public set; }
    public Nullable`1<ulong> UnchangedSince { get; public set; }
    public StoreLabelsRequest(StoreAction action);
    public StoreLabelsRequest(StoreAction action, IEnumerable`1<string> labels);
    [CompilerGeneratedAttribute]
public sealed virtual StoreAction get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(StoreAction value);
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<string> get_Labels();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Silent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Silent(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<ulong> get_UnchangedSince();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UnchangedSince(Nullable`1<ulong> value);
}
internal static class MailKit.TextEncodings : object {
    public static Encoding Latin1;
    public static Encoding UTF8;
    private static TextEncodings();
}
public enum MailKit.ThreadingAlgorithm : Enum {
    public int value__;
    public static ThreadingAlgorithm OrderedSubject;
    public static ThreadingAlgorithm References;
}
[IsReadOnlyAttribute]
public class MailKit.UniqueId : ValueType {
    public static UniqueId Invalid;
    public static UniqueId MinValue;
    public static UniqueId MaxValue;
    private UInt32 validity;
    private UInt32 id;
    public UInt32 Id { get; }
    public UInt32 Validity { get; }
    public bool IsValid { get; }
    public UniqueId(UInt32 validity, UInt32 id);
    public UniqueId(UInt32 id);
    private static UniqueId();
    public UInt32 get_Id();
    public UInt32 get_Validity();
    public bool get_IsValid();
    public sealed virtual int CompareTo(UniqueId other);
    public sealed virtual bool Equals(UniqueId other);
    public static bool op_Equality(UniqueId uid1, UniqueId uid2);
    public static bool op_GreaterThan(UniqueId uid1, UniqueId uid2);
    public static bool op_GreaterThanOrEqual(UniqueId uid1, UniqueId uid2);
    public static bool op_Inequality(UniqueId uid1, UniqueId uid2);
    public static bool op_LessThan(UniqueId uid1, UniqueId uid2);
    public static bool op_LessThanOrEqual(UniqueId uid1, UniqueId uid2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal static bool TryParse(string token, Int32& index, UInt32& uid);
    public static bool TryParse(string token, UInt32 validity, UniqueId& uid);
    public static bool TryParse(string token, UniqueId& uid);
    public static UniqueId Parse(string token, UInt32 validity);
    public static UniqueId Parse(string token);
}
[DefaultMemberAttribute("Item")]
public class MailKit.UniqueIdMap : object {
    public static UniqueIdMap Empty;
    [CompilerGeneratedAttribute]
private IList`1<UniqueId> <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<UniqueId> <Destination>k__BackingField;
    public IList`1<UniqueId> Source { get; private set; }
    public IList`1<UniqueId> Destination { get; private set; }
    public int Count { get; }
    public IEnumerable`1<UniqueId> Keys { get; }
    public IEnumerable`1<UniqueId> Values { get; }
    public UniqueId Item { get; }
    public UniqueIdMap(IList`1<UniqueId> source, IList`1<UniqueId> destination);
    private static UniqueIdMap();
    [CompilerGeneratedAttribute]
public IList`1<UniqueId> get_Source();
    [CompilerGeneratedAttribute]
private void set_Source(IList`1<UniqueId> value);
    [CompilerGeneratedAttribute]
public IList`1<UniqueId> get_Destination();
    [CompilerGeneratedAttribute]
private void set_Destination(IList`1<UniqueId> value);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerable`1<UniqueId> get_Keys();
    public sealed virtual IEnumerable`1<UniqueId> get_Values();
    public sealed virtual bool ContainsKey(UniqueId key);
    public sealed virtual bool TryGetValue(UniqueId key, UniqueId& value);
    public sealed virtual UniqueId get_Item(UniqueId index);
    [IteratorStateMachineAttribute("MailKit.UniqueIdMap/<GetEnumerator>d__21")]
public sealed virtual IEnumerator`1<KeyValuePair`2<UniqueId, UniqueId>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class MailKit.UniqueIdRange : object {
    public static UniqueIdRange All;
    private static UniqueIdRange Invalid;
    private UInt32 validity;
    internal UInt32 start;
    internal UInt32 end;
    public SortOrder SortOrder { get; }
    public UInt32 Validity { get; }
    public UniqueId Min { get; }
    public UniqueId Max { get; }
    public UniqueId Start { get; }
    public UniqueId End { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public UniqueId Item { get; public set; }
    public UniqueIdRange(UInt32 validity, UInt32 start, UInt32 end);
    public UniqueIdRange(UniqueId start, UniqueId end);
    private static UniqueIdRange();
    public SortOrder get_SortOrder();
    public UInt32 get_Validity();
    public UniqueId get_Min();
    public UniqueId get_Max();
    public UniqueId get_Start();
    public UniqueId get_End();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(UniqueId uid);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(UniqueId uid);
    public sealed virtual void CopyTo(UniqueId[] array, int arrayIndex);
    public sealed virtual bool Remove(UniqueId uid);
    public sealed virtual int IndexOf(UniqueId uid);
    public sealed virtual void Insert(int index, UniqueId uid);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual UniqueId get_Item(int index);
    public sealed virtual void set_Item(int index, UniqueId value);
    [IteratorStateMachineAttribute("MailKit.UniqueIdRange/<GetEnumerator>d__35")]
public sealed virtual IEnumerator`1<UniqueId> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
    public static bool TryParse(string token, UInt32 validity, UniqueIdRange& range);
    public static bool TryParse(string token, UniqueIdRange& range);
}
[DefaultMemberAttribute("Item")]
public class MailKit.UniqueIdSet : object {
    private List`1<Range> ranges;
    private long count;
    [CompilerGeneratedAttribute]
private SortOrder <SortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Validity>k__BackingField;
    public SortOrder SortOrder { get; private set; }
    public UInt32 Validity { get; private set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public UniqueId Item { get; public set; }
    public UniqueIdSet(UInt32 validity, SortOrder order);
    public UniqueIdSet(SortOrder order);
    public UniqueIdSet(IEnumerable`1<UniqueId> uids, SortOrder order);
    [CompilerGeneratedAttribute]
public SortOrder get_SortOrder();
    [CompilerGeneratedAttribute]
private void set_SortOrder(SortOrder value);
    [CompilerGeneratedAttribute]
public UInt32 get_Validity();
    [CompilerGeneratedAttribute]
private void set_Validity(UInt32 value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private int BinarySearch(UInt32 uid);
    private int IndexOfRange(UInt32 uid);
    private void BinaryInsertAscending(UInt32 uid);
    private void BinaryInsertDescending(UInt32 uid);
    private void Append(UInt32 uid);
    public sealed virtual void Add(UniqueId uid);
    public void AddRange(IEnumerable`1<UniqueId> uids);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(UniqueId uid);
    public sealed virtual void CopyTo(UniqueId[] array, int arrayIndex);
    private void Remove(int index, UInt32 uid);
    public sealed virtual bool Remove(UniqueId uid);
    public sealed virtual int IndexOf(UniqueId uid);
    public sealed virtual void Insert(int index, UniqueId uid);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual UniqueId get_Item(int index);
    public sealed virtual void set_Item(int index, UniqueId value);
    [IteratorStateMachineAttribute("MailKit.UniqueIdSet/<GetEnumerator>d__36")]
public sealed virtual IEnumerator`1<UniqueId> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
    public static string ToString(IList`1<UniqueId> uids);
    [IteratorStateMachineAttribute("MailKit.UniqueIdSet/<EnumerateSerializedSubsets>d__40")]
private IEnumerable`1<string> EnumerateSerializedSubsets(int maxLength);
    [IteratorStateMachineAttribute("MailKit.UniqueIdSet/<EnumerateSerializedSubsets>d__41")]
internal static IEnumerable`1<string> EnumerateSerializedSubsets(IList`1<UniqueId> uids, int maxLength);
    internal static bool TryParse(string token, UInt32 validity, UniqueIdSet& uids, Nullable`1& minValue, Nullable`1& maxValue);
    public static bool TryParse(string token, UInt32 validity, UniqueIdSet& uids);
    public static bool TryParse(string token, UniqueIdSet& uids);
}
[ExtensionAttribute]
internal static class MailKit.UriExtensions : object {
    [ExtensionAttribute]
public static IDictionary`2<string, string> ParsedQuery(Uri uri);
}
public class MailKit.WebAlertEventArgs : AlertEventArgs {
    [CompilerGeneratedAttribute]
private Uri <WebUri>k__BackingField;
    public Uri WebUri { get; private set; }
    public WebAlertEventArgs(Uri uri, string message);
    [CompilerGeneratedAttribute]
public Uri get_WebUri();
    [CompilerGeneratedAttribute]
private void set_WebUri(Uri value);
}
