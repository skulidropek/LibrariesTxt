[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mapster.AdaptAttributeBuilder : object {
    [CompilerGeneratedAttribute]
private BaseAdaptAttribute <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, Dictionary`2<string, PropertySetting>> <TypeSettings>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<Func`2<Type, Type>> <AlterTypes>k__BackingField;
    public BaseAdaptAttribute Attribute { get; }
    public Dictionary`2<Type, Dictionary`2<string, PropertySetting>> TypeSettings { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<Func`2<Type, Type>> AlterTypes { get; }
    public AdaptAttributeBuilder(BaseAdaptAttribute attribute);
    [CompilerGeneratedAttribute]
public BaseAdaptAttribute get_Attribute();
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, Dictionary`2<string, PropertySetting>> get_TypeSettings();
    [CompilerGeneratedAttribute]
public List`1<Func`2<Type, Type>> get_AlterTypes();
    public AdaptAttributeBuilder ForTypes(Type[] types);
    public AdaptAttributeBuilder ForAllTypesInNamespace(Assembly assembly, string namespace);
    public AdaptAttributeBuilder ForType(Action`1<PropertySettingBuilder`1<T>> propertyConfig);
    public AdaptAttributeBuilder ExcludeTypes(Type[] types);
    public AdaptAttributeBuilder ExcludeTypes(Func`2<Type, bool> predicate);
    public AdaptAttributeBuilder IgnoreAttributes(Type[] attributes);
    public AdaptAttributeBuilder IgnoreNoAttributes(Type[] attributes);
    public AdaptAttributeBuilder IgnoreNamespaces(String[] namespaces);
    public AdaptAttributeBuilder IgnoreNullValues(bool value);
    public AdaptAttributeBuilder RequireDestinationMemberSource(bool value);
    public AdaptAttributeBuilder MapToConstructor(bool value);
    public AdaptAttributeBuilder MaxDepth(int depth);
    public AdaptAttributeBuilder PreserveReference(bool value);
    public AdaptAttributeBuilder ShallowCopyForSameType(bool value);
    [NullableContextAttribute("2")]
public AdaptAttributeBuilder AlterType();
    public AdaptAttributeBuilder AlterType(Func`2<Type, bool> predicate, Type toType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mapster.AdaptFromAttribute : BaseAdaptAttribute {
    public AdaptFromAttribute(Type type);
    public AdaptFromAttribute(string name);
}
[AttributeUsageAttribute("384")]
public class Mapster.AdaptIgnoreAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Nullable`1<MemberSide> <Side>k__BackingField;
    public Nullable`1<MemberSide> Side { get; public set; }
    public AdaptIgnoreAttribute(MemberSide side);
    [CompilerGeneratedAttribute]
public Nullable`1<MemberSide> get_Side();
    [CompilerGeneratedAttribute]
public void set_Side(Nullable`1<MemberSide> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
public class Mapster.AdaptMemberAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MemberSide> <Side>k__BackingField;
    public string Name { get; public set; }
    public Nullable`1<MemberSide> Side { get; public set; }
    [NullableContextAttribute("1")]
public AdaptMemberAttribute(string name);
    [NullableContextAttribute("1")]
public AdaptMemberAttribute(string name, MemberSide side);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<MemberSide> get_Side();
    [CompilerGeneratedAttribute]
public void set_Side(Nullable`1<MemberSide> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mapster.AdaptToAttribute : BaseAdaptAttribute {
    public AdaptToAttribute(Type type);
    public AdaptToAttribute(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mapster.AdaptTwoWaysAttribute : AdaptToAttribute {
    public AdaptTwoWaysAttribute(Type type);
    public AdaptTwoWaysAttribute(string name);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1036")]
public abstract class Mapster.BaseAdaptAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Type[] <IgnoreAttributes>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Type[] <IgnoreNoAttributes>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <IgnoreNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private MapType <MapType>k__BackingField;
    [NullableAttribute("1")]
private Dictionary`2<string, bool> _boolValues;
    public Type Type { get; }
    public string Name { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] IgnoreAttributes { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] IgnoreNoAttributes { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] IgnoreNamespaces { get; public set; }
    public int MaxDepth { get; public set; }
    public MapType MapType { get; public set; }
    public bool IgnoreNullValues { get; public set; }
    public bool MapToConstructor { get; public set; }
    public bool PreserveReference { get; public set; }
    public bool ShallowCopyForSameType { get; public set; }
    public bool RequireDestinationMemberSource { get; public set; }
    [NullableContextAttribute("1")]
protected BaseAdaptAttribute(Type type);
    [NullableContextAttribute("1")]
protected BaseAdaptAttribute(string name);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Type[] get_IgnoreAttributes();
    [CompilerGeneratedAttribute]
public void set_IgnoreAttributes(Type[] value);
    [CompilerGeneratedAttribute]
public Type[] get_IgnoreNoAttributes();
    [CompilerGeneratedAttribute]
public void set_IgnoreNoAttributes(Type[] value);
    [CompilerGeneratedAttribute]
public String[] get_IgnoreNamespaces();
    [CompilerGeneratedAttribute]
public void set_IgnoreNamespaces(String[] value);
    [CompilerGeneratedAttribute]
public int get_MaxDepth();
    [CompilerGeneratedAttribute]
public void set_MaxDepth(int value);
    [CompilerGeneratedAttribute]
public MapType get_MapType();
    [CompilerGeneratedAttribute]
public void set_MapType(MapType value);
    public bool get_IgnoreNullValues();
    public void set_IgnoreNullValues(bool value);
    public bool get_MapToConstructor();
    public void set_MapToConstructor(bool value);
    public bool get_PreserveReference();
    public void set_PreserveReference(bool value);
    public bool get_ShallowCopyForSameType();
    public void set_ShallowCopyForSameType(bool value);
    public bool get_RequireDestinationMemberSource();
    public void set_RequireDestinationMemberSource(bool value);
    [NullableContextAttribute("1")]
public Nullable`1<bool> GetBooleanSettingValues(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mapster.CodeGenerationConfig : object {
    [CompilerGeneratedAttribute]
private List`1<AdaptAttributeBuilder> <AdaptAttributeBuilders>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<GenerateMapperAttributeBuilder> <GenerateMapperAttributeBuilders>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptAttributeBuilder <Default>k__BackingField;
    public List`1<AdaptAttributeBuilder> AdaptAttributeBuilders { get; }
    public List`1<GenerateMapperAttributeBuilder> GenerateMapperAttributeBuilders { get; }
    public AdaptAttributeBuilder Default { get; }
    [CompilerGeneratedAttribute]
public List`1<AdaptAttributeBuilder> get_AdaptAttributeBuilders();
    [CompilerGeneratedAttribute]
public List`1<GenerateMapperAttributeBuilder> get_GenerateMapperAttributeBuilders();
    [CompilerGeneratedAttribute]
public AdaptAttributeBuilder get_Default();
    public AdaptAttributeBuilder AdaptTo(string name, Nullable`1<MapType> mapType);
    public AdaptAttributeBuilder AdaptFrom(string name, Nullable`1<MapType> mapType);
    public AdaptAttributeBuilder AdaptTwoWays(string name, Nullable`1<MapType> mapType);
    public GenerateMapperAttributeBuilder GenerateMapper(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1036")]
public class Mapster.GenerateMapperAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Type[] <ForAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHelperClass>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInternal>k__BackingField;
    public string Name { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] ForAttributes { get; public set; }
    public bool IsHelperClass { get; public set; }
    public bool IsInternal { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type[] get_ForAttributes();
    [CompilerGeneratedAttribute]
public void set_ForAttributes(Type[] value);
    [CompilerGeneratedAttribute]
public bool get_IsHelperClass();
    [CompilerGeneratedAttribute]
public void set_IsHelperClass(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsInternal();
    [CompilerGeneratedAttribute]
public void set_IsInternal(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mapster.GenerateMapperAttributeBuilder : object {
    [CompilerGeneratedAttribute]
private GenerateMapperAttribute <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Type> <Types>k__BackingField;
    public GenerateMapperAttribute Attribute { get; }
    public HashSet`1<Type> Types { get; }
    public GenerateMapperAttributeBuilder(GenerateMapperAttribute attribute);
    [CompilerGeneratedAttribute]
public GenerateMapperAttribute get_Attribute();
    [CompilerGeneratedAttribute]
public HashSet`1<Type> get_Types();
    public GenerateMapperAttributeBuilder ForTypes(Type[] types);
    public GenerateMapperAttributeBuilder ForAllTypesInNamespace(Assembly assembly, string namespace);
    public GenerateMapperAttributeBuilder ForType();
    public GenerateMapperAttributeBuilder ExcludeTypes(Type[] types);
    public GenerateMapperAttributeBuilder ExcludeTypes(Predicate`1<Type> predicate);
}
[NullableContextAttribute("1")]
public interface Mapster.ICodeGenerationRegister {
    public abstract virtual void Register(CodeGenerationConfig config);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mapster.MapContext : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static AsyncLocal`1<MapContext> _localContext;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ReferenceTuple, object> _references;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _parameters;
    [NullableAttribute("2")]
public static MapContext Current { get; public set; }
    public Dictionary`2<ReferenceTuple, object> References { get; }
    public Dictionary`2<string, object> Parameters { get; }
    private static MapContext();
    [NullableContextAttribute("2")]
public static MapContext get_Current();
    [NullableContextAttribute("2")]
public static void set_Current(MapContext value);
    public Dictionary`2<ReferenceTuple, object> get_References();
    public Dictionary`2<string, object> get_Parameters();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mapster.MapContextScope : object {
    [CompilerGeneratedAttribute]
private MapContext <Context>k__BackingField;
    [NullableAttribute("2")]
private MapContext _previousContext;
    public MapContext Context { get; }
    public MapContextScope(bool ignorePreviousContext);
    public static MapContextScope Required();
    public static MapContextScope RequiresNew();
    [CompilerGeneratedAttribute]
public MapContext get_Context();
    public sealed virtual void Dispose();
    public static TResult GetOrAddMapReference(ReferenceTuple key, Func`2<ReferenceTuple, TResult> mapFn);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1024")]
public class Mapster.MapperAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInternal>k__BackingField;
    public string Name { get; public set; }
    public bool IsInternal { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsInternal();
    [CompilerGeneratedAttribute]
public void set_IsInternal(bool value);
}
[FlagsAttribute]
public enum Mapster.MapType : Enum {
    public int value__;
    public static MapType Map;
    public static MapType MapToTarget;
    public static MapType Projection;
}
public enum Mapster.MemberSide : Enum {
    public int value__;
    public static MemberSide Source;
    public static MemberSide Destination;
}
public class Mapster.Models.Never : ValueType {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mapster.ProjectToAttribute : AdaptToAttribute {
    public ProjectToAttribute(Type type);
    public ProjectToAttribute(string name);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Mapster.PropertySetting : object {
    [CompilerGeneratedAttribute]
private bool <Ignore>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TargetPropertyType>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpression <MapFunc>k__BackingField;
    public bool Ignore { get; public set; }
    public string TargetPropertyName { get; public set; }
    public Type TargetPropertyType { get; public set; }
    public LambdaExpression MapFunc { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Ignore();
    [CompilerGeneratedAttribute]
public void set_Ignore(bool value);
    [CompilerGeneratedAttribute]
public string get_TargetPropertyName();
    [CompilerGeneratedAttribute]
public void set_TargetPropertyName(string value);
    [CompilerGeneratedAttribute]
public Type get_TargetPropertyType();
    [CompilerGeneratedAttribute]
public void set_TargetPropertyType(Type value);
    [CompilerGeneratedAttribute]
public LambdaExpression get_MapFunc();
    [CompilerGeneratedAttribute]
public void set_MapFunc(LambdaExpression value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mapster.PropertySettingBuilder`1 : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, PropertySetting> <Settings>k__BackingField;
    public Dictionary`2<string, PropertySetting> Settings { get; }
    public PropertySettingBuilder`1(Dictionary`2<string, PropertySetting> settings);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, PropertySetting> get_Settings();
    private PropertySetting ForProperty(string name);
    public PropertySettingBuilder`1<T> Ignore(Expression`1<Func`2<T, TReturn>> member);
    public PropertySettingBuilder`1<T> Map(Expression`1<Func`2<T, TReturn>> member, string targetPropertyName);
    public PropertySettingBuilder`1<T> Map(Expression`1<Func`2<T, TReturn>> member, Type targetPropertyType, string targetPropertyName);
    public PropertySettingBuilder`1<T> Map(Expression`1<Func`2<T, TReturn>> member, Expression`1<Func`2<T, TReturn2>> mapFunc, string targetPropertyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1420")]
public class Mapster.PropertyTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Type[] <ForAttributes>k__BackingField;
    public Type Type { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] ForAttributes { get; public set; }
    public PropertyTypeAttribute(Type type);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public Type[] get_ForAttributes();
    [CompilerGeneratedAttribute]
public void set_ForAttributes(Type[] value);
}
[AttributeUsageAttribute("384")]
public class Mapster.UseDestinationValueAttribute : Attribute {
}
public static class Mapster.Utils.Enum`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<string, TEnum> _lookup;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<TEnum, string> _reverseLookup;
    private static bool _isFlag;
    [NullableAttribute("1")]
private static Type _underlyingType;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`2<TEnum, ulong> _toUlong;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`2<ulong, TEnum> _toEnum;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`2<TEnum, string> _toIntString;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`2<string, TEnum> _toIntEnum;
    [NullableAttribute("1")]
private static UInt64[] _flagList;
    [NullableAttribute("1")]
private static string _zeroString;
    private static Enum`1();
    public static string ToString(TEnum val);
    public static TEnum Parse(string val);
    [NullableContextAttribute("1")]
internal static string ValidChoices();
    private static TEnum MatchByString(string val);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Mapster.Utils.Extensions : object {
    [ExtensionAttribute]
public static string GetMemberName(LambdaExpression lambda);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetLoadableTypes(Assembly assembly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Mapster.Utils.MapsterHelper : object {
    public static Func`2<string, string> Identity;
    public static Func`2<string, string> PascalCase;
    public static Func`2<string, string> CamelCase;
    public static Func`2<string, string> LowerCase;
    private static MapsterHelper();
    public static U GetValueOrDefault(IDictionary`2<T, U> dict, T key);
    public static U GetValueOrDefault(IReadOnlyDictionary`2<T, U> dict, T key);
    public static U FlexibleGet(IDictionary`2<string, U> dict, string key, Func`2<string, string> keyConverter);
    public static U FlexibleGet(IReadOnlyDictionary`2<string, U> dict, string key, Func`2<string, string> keyConverter);
    public static void FlexibleSet(IDictionary`2<string, U> dict, string key, Func`2<string, string> keyConverter, U value);
    [IteratorStateMachineAttribute("Mapster.Utils.MapsterHelper/<ToEnumerable>d__5`1")]
public static IEnumerable`1<T> ToEnumerable(IEnumerable`1<T> source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Mapster.Utils.NameHelper : object {
    internal static string Identity(string s);
    internal static string PascalCase(string s);
    internal static string CamelCase(string s);
    internal static string LowerCase(string s);
    private static string ProperCase(string s);
    [IteratorStateMachineAttribute("Mapster.Utils.NameHelper/<BreakWords>d__6")]
private static IEnumerable`1<string> BreakWords(string s);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Mapster.Utils.ReferenceTuple : ValueType {
    [CompilerGeneratedAttribute]
private object <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DestinationType>k__BackingField;
    public object Reference { get; }
    public Type DestinationType { get; }
    public ReferenceTuple(object reference, Type destinationType);
    [CompilerGeneratedAttribute]
public object get_Reference();
    [CompilerGeneratedAttribute]
public Type get_DestinationType();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ReferenceTuple other);
    public virtual int GetHashCode();
    public static bool op_Equality(ReferenceTuple left, ReferenceTuple right);
    public static bool op_Inequality(ReferenceTuple left, ReferenceTuple right);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
