[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class MartinCostello.Logging.XUnit.AmbientTestOutputHelperAccessor : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static AsyncLocal`1<ITestOutputHelper> _current;
    public ITestOutputHelper OutputHelper { get; public set; }
    private static AmbientTestOutputHelperAccessor();
    public sealed virtual ITestOutputHelper get_OutputHelper();
    public sealed virtual void set_OutputHelper(ITestOutputHelper value);
}
[NullableContextAttribute("2")]
public interface MartinCostello.Logging.XUnit.IMessageSinkAccessor {
    public IMessageSink MessageSink { get; public set; }
    public abstract virtual IMessageSink get_MessageSink();
    public abstract virtual void set_MessageSink(IMessageSink value);
}
[NullableContextAttribute("2")]
public interface MartinCostello.Logging.XUnit.ITestOutputHelperAccessor {
    public ITestOutputHelper OutputHelper { get; public set; }
    public abstract virtual ITestOutputHelper get_OutputHelper();
    public abstract virtual void set_OutputHelper(ITestOutputHelper value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class MartinCostello.Logging.XUnit.MessageSinkAccessor : object {
    [CompilerGeneratedAttribute]
private IMessageSink <MessageSink>k__BackingField;
    public IMessageSink MessageSink { get; public set; }
    [NullableContextAttribute("1")]
public MessageSinkAccessor(IMessageSink messageSink);
    [CompilerGeneratedAttribute]
public sealed virtual IMessageSink get_MessageSink();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MessageSink(IMessageSink value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class MartinCostello.Logging.XUnit.TestOutputHelperAccessor : object {
    [CompilerGeneratedAttribute]
private ITestOutputHelper <OutputHelper>k__BackingField;
    public ITestOutputHelper OutputHelper { get; public set; }
    [NullableContextAttribute("1")]
public TestOutputHelperAccessor(ITestOutputHelper outputHelper);
    [CompilerGeneratedAttribute]
public sealed virtual ITestOutputHelper get_OutputHelper();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OutputHelper(ITestOutputHelper value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MartinCostello.Logging.XUnit.XUnitLogger : object {
    private static string LogLevelPadding;
    private static string MessagePadding;
    private static string NewLineWithMessagePadding;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static StringBuilder _logBuilder;
    private string _timestampFormat;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<string, LogLevel, bool> _filter;
    [CompilerGeneratedAttribute]
private bool <IncludeScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<DateTimeOffset> <Clock>k__BackingField;
    [NullableAttribute("2")]
private IMessageSinkAccessor _messageSinkAccessor;
    private Func`2<string, IMessageSinkMessage> _messageSinkMessageFactory;
    [NullableAttribute("2")]
private ITestOutputHelperAccessor _outputHelperAccessor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<string, LogLevel, bool> Filter { get; public set; }
    public bool IncludeScopes { get; public set; }
    public string Name { get; }
    internal Func`1<DateTimeOffset> Clock { get; internal set; }
    public Func`2<string, IMessageSinkMessage> MessageSinkMessageFactory { get; public set; }
    private XUnitLogger(string name, XUnitLoggerOptions options);
    public XUnitLogger(string name, IMessageSink messageSink, XUnitLoggerOptions options);
    public XUnitLogger(string name, IMessageSinkAccessor accessor, XUnitLoggerOptions options);
    public XUnitLogger(string name, ITestOutputHelper outputHelper, XUnitLoggerOptions options);
    public XUnitLogger(string name, ITestOutputHelperAccessor accessor, XUnitLoggerOptions options);
    private static XUnitLogger();
    public Func`3<string, LogLevel, bool> get_Filter();
    public void set_Filter(Func`3<string, LogLevel, bool> value);
    [CompilerGeneratedAttribute]
public bool get_IncludeScopes();
    [CompilerGeneratedAttribute]
public void set_IncludeScopes(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal Func`1<DateTimeOffset> get_Clock();
    [CompilerGeneratedAttribute]
internal void set_Clock(Func`1<DateTimeOffset> value);
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    [NullableContextAttribute("2")]
public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    [NullableContextAttribute("2")]
public virtual void WriteMessage(LogLevel logLevel, int eventId, string message, Exception exception);
    private static string GetLogLevelString(LogLevel logLevel);
    private static void GetScopeInformation(StringBuilder builder);
    [IteratorStateMachineAttribute("MartinCostello.Logging.XUnit.XUnitLogger/<StringifyScope>d__27")]
private static IEnumerable`1<string> StringifyScope(XUnitLogScope scope);
    public Func`2<string, IMessageSinkMessage> get_MessageSinkMessageFactory();
    public void set_MessageSinkMessageFactory(Func`2<string, IMessageSinkMessage> value);
    [CompilerGeneratedAttribute]
internal static string <GetScopeInformation>g__DepthPadding|26_0(int depth);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MartinCostello.Logging.XUnit.XUnitLoggerOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<string, LogLevel, bool> <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, IMessageSinkMessage> <MessageSinkMessageFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeScopes>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TimestampFormat>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<string, LogLevel, bool> Filter { get; public set; }
    public Func`2<string, IMessageSinkMessage> MessageSinkMessageFactory { get; public set; }
    public bool IncludeScopes { get; public set; }
    [NullableAttribute("2")]
[StringSyntaxAttribute("DateTimeFormat")]
public string TimestampFormat { get; public set; }
    [CompilerGeneratedAttribute]
public Func`3<string, LogLevel, bool> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Func`3<string, LogLevel, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<string, IMessageSinkMessage> get_MessageSinkMessageFactory();
    [CompilerGeneratedAttribute]
public void set_MessageSinkMessageFactory(Func`2<string, IMessageSinkMessage> value);
    [CompilerGeneratedAttribute]
public bool get_IncludeScopes();
    [CompilerGeneratedAttribute]
public void set_IncludeScopes(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_TimestampFormat();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TimestampFormat(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ProviderAliasAttribute("XUnit")]
public class MartinCostello.Logging.XUnit.XUnitLoggerProvider : object {
    private XUnitLoggerOptions _options;
    [NullableAttribute("2")]
private IMessageSinkAccessor _messageSinkAccessor;
    [NullableAttribute("2")]
private ITestOutputHelperAccessor _outputHelperAccessor;
    public XUnitLoggerProvider(IMessageSink messageSink, XUnitLoggerOptions options);
    public XUnitLoggerProvider(IMessageSinkAccessor accessor, XUnitLoggerOptions options);
    public XUnitLoggerProvider(ITestOutputHelper outputHelper, XUnitLoggerOptions options);
    public XUnitLoggerProvider(ITestOutputHelperAccessor accessor, XUnitLoggerOptions options);
    protected virtual override void Finalize();
    public virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class MartinCostello.Logging.XUnit.XUnitLogScope : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static AsyncLocal`1<XUnitLogScope> _value;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private object <State>k__BackingField;
    [CompilerGeneratedAttribute]
private XUnitLogScope <Parent>k__BackingField;
    [NullableAttribute("1")]
public object State { get; }
    internal static XUnitLogScope Current { get; internal set; }
    internal XUnitLogScope Parent { get; private set; }
    [NullableContextAttribute("1")]
public XUnitLogScope(object state);
    private static XUnitLogScope();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public object get_State();
    internal static XUnitLogScope get_Current();
    internal static void set_Current(XUnitLogScope value);
    [CompilerGeneratedAttribute]
internal XUnitLogScope get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(XUnitLogScope value);
    public virtual string ToString();
    [NullableContextAttribute("1")]
internal static IDisposable Push(object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.Extensions.Logging.XUnitLoggerExtensions : object {
    [ExtensionAttribute]
public static ILoggingBuilder AddXUnit(ILoggingBuilder builder, IMessageSinkAccessor accessor);
    [ExtensionAttribute]
public static ILoggingBuilder AddXUnit(ILoggingBuilder builder, IMessageSinkAccessor accessor, Action`1<XUnitLoggerOptions> configure);
    [ExtensionAttribute]
public static ILoggingBuilder AddXUnit(ILoggingBuilder builder, IMessageSink messageSink);
    [ExtensionAttribute]
public static ILoggingBuilder AddXUnit(ILoggingBuilder builder, IMessageSink messageSink, Action`1<XUnitLoggerOptions> configure);
    [ExtensionAttribute]
public static ILoggerFactory AddXUnit(ILoggerFactory factory, IMessageSink messageSink, LogLevel minLevel);
    [ExtensionAttribute]
public static ILoggerFactory AddXUnit(ILoggerFactory factory, IMessageSink messageSink, Func`3<string, LogLevel, bool> filter);
    [ExtensionAttribute]
public static ILoggerFactory AddXUnit(ILoggerFactory factory, IMessageSink messageSink);
    [ExtensionAttribute]
public static ILoggerFactory AddXUnit(ILoggerFactory factory, IMessageSink messageSink, XUnitLoggerOptions options);
    [ExtensionAttribute]
public static ILoggerFactory AddXUnit(ILoggerFactory factory, IMessageSink messageSink, Action`1<XUnitLoggerOptions> configure);
    [ExtensionAttribute]
public static ILoggerFactory AddXUnit(ILoggerFactory factory, IMessageSink messageSink, Func`1<XUnitLoggerOptions> configure);
    [ExtensionAttribute]
public static ILoggingBuilder AddXUnit(ILoggingBuilder builder);
    [ExtensionAttribute]
public static ILoggingBuilder AddXUnit(ILoggingBuilder builder, ITestOutputHelperAccessor accessor);
    [ExtensionAttribute]
public static ILoggingBuilder AddXUnit(ILoggingBuilder builder, ITestOutputHelperAccessor accessor, Action`1<XUnitLoggerOptions> configure);
    [ExtensionAttribute]
public static ILoggingBuilder AddXUnit(ILoggingBuilder builder, ITestOutputHelper outputHelper);
    [ExtensionAttribute]
public static ILoggingBuilder AddXUnit(ILoggingBuilder builder, ITestOutputHelper outputHelper, Action`1<XUnitLoggerOptions> configure);
    [ExtensionAttribute]
public static ILoggerFactory AddXUnit(ILoggerFactory factory, ITestOutputHelper outputHelper, LogLevel minLevel);
    [ExtensionAttribute]
public static ILoggerFactory AddXUnit(ILoggerFactory factory, ITestOutputHelper outputHelper, Func`3<string, LogLevel, bool> filter);
    [ExtensionAttribute]
public static ILoggerFactory AddXUnit(ILoggerFactory factory, ITestOutputHelper outputHelper);
    [ExtensionAttribute]
public static ILoggerFactory AddXUnit(ILoggerFactory factory, ITestOutputHelper outputHelper, XUnitLoggerOptions options);
    [ExtensionAttribute]
public static ILoggerFactory AddXUnit(ILoggerFactory factory, ITestOutputHelper outputHelper, Action`1<XUnitLoggerOptions> configure);
    [ExtensionAttribute]
public static ILoggerFactory AddXUnit(ILoggerFactory factory, ITestOutputHelper outputHelper, Func`1<XUnitLoggerOptions> configure);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Xunit.Abstractions.IMessageSinkExtensions : object {
    [ExtensionAttribute]
public static ILoggerFactory ToLoggerFactory(IMessageSink messageSink);
    [ExtensionAttribute]
public static ILogger`1<T> ToLogger(IMessageSink messageSink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Xunit.Abstractions.ITestOutputHelperExtensions : object {
    [ExtensionAttribute]
public static ILoggerFactory ToLoggerFactory(ITestOutputHelper outputHelper);
    [ExtensionAttribute]
public static ILogger`1<T> ToLogger(ITestOutputHelper outputHelper);
}
