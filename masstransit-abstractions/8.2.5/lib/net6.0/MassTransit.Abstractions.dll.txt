[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MassTransit.AbstractUriException : MassTransitException {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [NullableAttribute("2")]
public Uri Uri { get; protected set; }
    protected AbstractUriException(Uri uri);
    protected AbstractUriException(Uri uri, string message);
    protected AbstractUriException(Uri uri, string message, Exception innerException);
    protected AbstractUriException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Uri get_Uri();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_Uri(Uri value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.ActivityCompensationException : CourierException {
    public ActivityCompensationException(string message);
    public ActivityCompensationException(string message, Exception innerException);
    protected ActivityCompensationException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.ActivityDefinition`3 : ExecuteActivityDefinition`2<TActivity, TArguments> {
    [NullableAttribute("2")]
private string _compensateEndpointName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEndpointDefinition`1<ICompensateActivity`1<TLog>> <CompensateEndpointDefinition>k__BackingField;
    unknown string CompensateEndpointName {protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEndpointDefinition`1<ICompensateActivity`1<TLog>> CompensateEndpointDefinition { get; public set; }
    [NullableAttribute("2")]
private IEndpointDefinition MassTransit.IActivityDefinition.CompensateEndpointDefinition { get; }
    private Type MassTransit.IActivityDefinition.LogType { get; }
    protected void set_CompensateEndpointName(string value);
    [CompilerGeneratedAttribute]
public IEndpointDefinition`1<ICompensateActivity`1<TLog>> get_CompensateEndpointDefinition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CompensateEndpointDefinition(IEndpointDefinition`1<ICompensateActivity`1<TLog>> value);
    [NullableContextAttribute("2")]
private sealed virtual override IEndpointDefinition MassTransit.IActivityDefinition.get_CompensateEndpointDefinition();
    private sealed virtual override void MassTransit.IActivityDefinition<TActivity,TArguments,TLog>.Configure(IReceiveEndpointConfigurator endpointConfigurator, ICompensateActivityConfigurator`2<TActivity, TLog> compensateActivityConfigurator, IRegistrationContext context);
    private sealed virtual override string MassTransit.IActivityDefinition.GetCompensateEndpointName(IEndpointNameFormatter formatter);
    private sealed virtual override Type MassTransit.IActivityDefinition.get_LogType();
    protected void CompensateEndpoint(Action`1<IEndpointRegistrationConfigurator> configure);
    [ObsoleteAttribute("Use the IRegistrationContext overload instead. Visit https://masstransit.io/obsolete for details.")]
protected virtual void ConfigureCompensateActivity(IReceiveEndpointConfigurator endpointConfigurator, ICompensateActivityConfigurator`2<TActivity, TLog> compensateActivityConfigurator);
    protected virtual void ConfigureCompensateActivity(IReceiveEndpointConfigurator endpointConfigurator, ICompensateActivityConfigurator`2<TActivity, TLog> compensateActivityConfigurator, IRegistrationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.ActivityExecutionException : CourierException {
    public ActivityExecutionException(string message);
    public ActivityExecutionException(string message, Exception innerException);
    protected ActivityExecutionException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.ActivityExecutionFaultedException : ActivityExecutionException {
    public ActivityExecutionFaultedException(string message);
    public ActivityExecutionFaultedException(string message, Exception innerException);
    protected ActivityExecutionFaultedException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.AgentExtensions : object {
    [ExtensionAttribute]
public static Task Stop(IAgent agent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task Stop(IAgent agent, string reason, CancellationToken cancellationToken);
}
public class MassTransit.ArrayMessageBody : object {
    private ArraySegment`1<byte> _bytes;
    public Nullable`1<long> Length { get; }
    public ArrayMessageBody(ArraySegment`1<byte> bytes);
    public sealed virtual Nullable`1<long> get_Length();
    [NullableContextAttribute("1")]
public sealed virtual Stream GetStream();
    [NullableContextAttribute("1")]
public sealed virtual Byte[] GetBytes();
    [NullableContextAttribute("1")]
public sealed virtual string GetString();
}
public class MassTransit.AsyncEventExceptionMessageFactory`3 : MulticastDelegate {
    public AsyncEventExceptionMessageFactory`3(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task`1<T> Invoke(BehaviorExceptionContext`2<TSaga, TException> context);
    public virtual IAsyncResult BeginInvoke(BehaviorExceptionContext`2<TSaga, TException> context, AsyncCallback callback, object object);
    public virtual Task`1<T> EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.AsyncEventExceptionMessageFactory`4 : MulticastDelegate {
    [NullableContextAttribute("0")]
public AsyncEventExceptionMessageFactory`4(object object, IntPtr method);
    public virtual Task`1<T> Invoke(BehaviorExceptionContext`3<TSaga, TMessage, TException> context);
    [NullableContextAttribute("0")]
public virtual IAsyncResult BeginInvoke(BehaviorExceptionContext`3<TSaga, TMessage, TException> context, AsyncCallback callback, object object);
    [NullableContextAttribute("0")]
public virtual Task`1<T> EndInvoke(IAsyncResult result);
}
public class MassTransit.AsyncEventMessageFactory`2 : MulticastDelegate {
    public AsyncEventMessageFactory`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task`1<T> Invoke(BehaviorContext`1<TSaga> context);
    public virtual IAsyncResult BeginInvoke(BehaviorContext`1<TSaga> context, AsyncCallback callback, object object);
    public virtual Task`1<T> EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.AsyncEventMessageFactory`3 : MulticastDelegate {
    [NullableContextAttribute("0")]
public AsyncEventMessageFactory`3(object object, IntPtr method);
    public virtual Task`1<T> Invoke(BehaviorContext`2<TSaga, TMessage> context);
    [NullableContextAttribute("0")]
public virtual IAsyncResult BeginInvoke(BehaviorContext`2<TSaga, TMessage> context, AsyncCallback callback, object object);
    [NullableContextAttribute("0")]
public virtual Task`1<T> EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Base64MessageBody : object {
    private string _text;
    [NullableAttribute("2")]
private Byte[] _bytes;
    public Nullable`1<long> Length { get; }
    public Base64MessageBody(string text);
    public sealed virtual Nullable`1<long> get_Length();
    public sealed virtual Stream GetStream();
    public sealed virtual Byte[] GetBytes();
    public sealed virtual string GetString();
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface MassTransit.Batch`1 {
    public BatchCompletionMode Mode { get; }
    public DateTime FirstMessageReceived { get; }
    public DateTime LastMessageReceived { get; }
    public ConsumeContext`1<T> Item { get; }
    public int Length { get; }
    public abstract virtual BatchCompletionMode get_Mode();
    public abstract virtual DateTime get_FirstMessageReceived();
    public abstract virtual DateTime get_LastMessageReceived();
    public abstract virtual ConsumeContext`1<T> get_Item(int index);
    public abstract virtual int get_Length();
}
public enum MassTransit.BatchCompletionMode : Enum {
    public int value__;
    public static BatchCompletionMode Time;
    public static BatchCompletionMode Size;
    public static BatchCompletionMode Forced;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.BatchOptions : object {
    [CompilerGeneratedAttribute]
private int <MessageLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConcurrencyLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TimeLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private BatchTimeLimitStart <TimeLimitStart>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <GroupKeyProvider>k__BackingField;
    public int MessageLimit { get; public set; }
    public int ConcurrencyLimit { get; public set; }
    public TimeSpan TimeLimit { get; public set; }
    public BatchTimeLimitStart TimeLimitStart { get; public set; }
    [NullableAttribute("2")]
public object GroupKeyProvider { get; private set; }
    [CompilerGeneratedAttribute]
public int get_MessageLimit();
    [CompilerGeneratedAttribute]
public void set_MessageLimit(int value);
    [CompilerGeneratedAttribute]
public int get_ConcurrencyLimit();
    [CompilerGeneratedAttribute]
public void set_ConcurrencyLimit(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_TimeLimit();
    [CompilerGeneratedAttribute]
public void set_TimeLimit(TimeSpan value);
    [CompilerGeneratedAttribute]
public BatchTimeLimitStart get_TimeLimitStart();
    [CompilerGeneratedAttribute]
public void set_TimeLimitStart(BatchTimeLimitStart value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_GroupKeyProvider();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_GroupKeyProvider(object value);
    public sealed virtual void Configure(string name, IReceiveEndpointConfigurator configurator);
    [IteratorStateMachineAttribute("MassTransit.BatchOptions/<Validate>d__22")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
    public BatchOptions SetMessageLimit(int limit);
    public BatchOptions SetConcurrencyLimit(int limit);
    public BatchOptions SetTimeLimit(TimeSpan limit);
    public BatchOptions SetTimeLimitStart(BatchTimeLimitStart timeLimitStart);
    public BatchOptions SetTimeLimit(Nullable`1<int> ms, Nullable`1<int> s, Nullable`1<int> m, Nullable`1<int> h, Nullable`1<int> d);
    public BatchOptions GroupBy(Func`2<ConsumeContext`1<T>, Nullable`1<TProperty>> provider);
    public BatchOptions GroupBy(Func`2<ConsumeContext`1<T>, TProperty> provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.BatchProduceExtensions : object {
    [ExtensionAttribute]
public static Task SendBatch(ISendEndpoint endpoint, IEnumerable`1<T> messages, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendBatch(ISendEndpoint endpoint, IEnumerable`1<T> messages, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendBatch(ISendEndpoint endpoint, IEnumerable`1<T> messages, Action`1<SendContext`1<T>> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendBatch(ISendEndpoint endpoint, IEnumerable`1<T> messages, Func`2<SendContext`1<T>, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendBatch(ISendEndpoint endpoint, IEnumerable`1<object> messages, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendBatch(ISendEndpoint endpoint, IEnumerable`1<object> messages, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendBatch(ISendEndpoint endpoint, IEnumerable`1<object> messages, Action`1<SendContext> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendBatch(ISendEndpoint endpoint, IEnumerable`1<object> messages, Func`2<SendContext, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendBatch(ISendEndpoint endpoint, IEnumerable`1<object> messages, Type messageType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendBatch(ISendEndpoint endpoint, IEnumerable`1<object> messages, Type messageType, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendBatch(ISendEndpoint endpoint, IEnumerable`1<object> messages, Type messageType, Action`1<SendContext> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendBatch(ISendEndpoint endpoint, IEnumerable`1<object> messages, Type messageType, Func`2<SendContext, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task PublishBatch(IPublishEndpoint endpoint, IEnumerable`1<T> messages, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task PublishBatch(IPublishEndpoint endpoint, IEnumerable`1<T> messages, IPipe`1<PublishContext`1<T>> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task PublishBatch(IPublishEndpoint endpoint, IEnumerable`1<T> messages, Action`1<PublishContext`1<T>> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task PublishBatch(IPublishEndpoint endpoint, IEnumerable`1<T> messages, Func`2<PublishContext`1<T>, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task PublishBatch(IPublishEndpoint endpoint, IEnumerable`1<object> messages, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task PublishBatch(IPublishEndpoint endpoint, IEnumerable`1<object> messages, IPipe`1<PublishContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task PublishBatch(IPublishEndpoint endpoint, IEnumerable`1<object> messages, Action`1<PublishContext> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task PublishBatch(IPublishEndpoint endpoint, IEnumerable`1<object> messages, Func`2<PublishContext, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task PublishBatch(IPublishEndpoint endpoint, IEnumerable`1<object> messages, Type messageType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task PublishBatch(IPublishEndpoint endpoint, IEnumerable`1<object> messages, Type messageType, IPipe`1<PublishContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task PublishBatch(IPublishEndpoint endpoint, IEnumerable`1<object> messages, Type messageType, Action`1<PublishContext> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task PublishBatch(IPublishEndpoint endpoint, IEnumerable`1<object> messages, Type messageType, Func`2<PublishContext, Task> callback, CancellationToken cancellationToken);
}
public enum MassTransit.BatchTimeLimitStart : Enum {
    public int value__;
    public static BatchTimeLimitStart FromFirst;
    public static BatchTimeLimitStart FromLast;
}
[NullableContextAttribute("1")]
public interface MassTransit.BehaviorContext`1 {
    public StateMachine`1<TSaga> StateMachine { get; }
    public Event Event { get; }
    [ObsoleteAttribute("Use Saga instead. Visit https://masstransit.io/obsolete for details.")]
public TSaga Instance { get; }
    public abstract virtual StateMachine`1<TSaga> get_StateMachine();
    public abstract virtual Event get_Event();
    public abstract virtual TSaga get_Instance();
    public abstract virtual Task Raise(Event event);
    public abstract virtual Task Raise(Event`1<T> event, T data);
    public abstract virtual Task`1<SendTuple`1<T>> Init(object values);
    public abstract virtual BehaviorContext`1<TSaga> CreateProxy(Event event);
    public abstract virtual BehaviorContext`2<TSaga, T> CreateProxy(Event`1<T> event, T data);
}
[NullableContextAttribute("1")]
public interface MassTransit.BehaviorContext`2 {
    public Event`1<TMessage> Event { get; }
    [ObsoleteAttribute("Use Message instead. Visit https://masstransit.io/obsolete for details.")]
public TMessage Data { get; }
    public abstract virtual Event`1<TMessage> get_Event();
    public abstract virtual TMessage get_Data();
    public abstract virtual Task`1<SendTuple`1<T>> Init(object values);
}
public interface MassTransit.BehaviorExceptionContext`2 {
    [NullableAttribute("1")]
public TException Exception { get; }
    [NullableContextAttribute("1")]
public abstract virtual TException get_Exception();
    [NullableContextAttribute("1")]
public abstract virtual BehaviorExceptionContext`3<TSaga, T, TException> CreateProxy(Event`1<T> event, T data);
}
public interface MassTransit.BehaviorExceptionContext`3 {
    [NullableContextAttribute("1")]
public abstract virtual BehaviorExceptionContext`3<TSaga, T, TException> CreateProxy(Event`1<T> event, T data);
}
[NullableContextAttribute("1")]
public interface MassTransit.BindContext`2 {
    public TLeft Left { get; }
    public TRight Right { get; }
    public abstract virtual TLeft get_Left();
    public abstract virtual TRight get_Right();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.BusControlHealthExtensions : object {
    [AsyncStateMachineAttribute("MassTransit.BusControlHealthExtensions/<WaitForHealthStatus>d__0")]
[ExtensionAttribute]
public static Task`1<BusHealthStatus> WaitForHealthStatus(IBusControl busControl, BusHealthStatus expectedStatus, TimeSpan timeout);
    [ExtensionAttribute]
public static Task`1<BusHealthStatus[]> WaitForHealthStatus(IEnumerable`1<IBusControl> busControls, BusHealthStatus expectedStatus, TimeSpan timeout);
    [AsyncStateMachineAttribute("MassTransit.BusControlHealthExtensions/<WaitForHealthStatus>d__2")]
[ExtensionAttribute]
public static Task`1<BusHealthStatus> WaitForHealthStatus(IBusControl busControl, BusHealthStatus expectedStatus, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<BusHealthStatus[]> WaitForHealthStatus(IEnumerable`1<IBusControl> busControls, BusHealthStatus expectedStatus, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.BusDepotExtensions : object {
    [AsyncStateMachineAttribute("MassTransit.BusDepotExtensions/<Start>d__0")]
[ExtensionAttribute]
public static Task Start(IBusDepot depot, TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.BusDepotExtensions/<Stop>d__1")]
[ExtensionAttribute]
public static Task Stop(IBusDepot depot, TimeSpan timeout, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface MassTransit.BusHandle {
    public Task`1<BusReady> Ready { get; }
    public abstract virtual Task`1<BusReady> get_Ready();
    public abstract virtual Task StopAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.BusHealthResult : object {
    public IReadOnlyDictionary`2<string, EndpointHealthResult> Endpoints;
    [NullableAttribute("2")]
public Exception Exception;
    public BusHealthStatus Status;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Description { get; }
    private BusHealthResult(BusHealthStatus status, string description, Exception exception, IReadOnlyDictionary`2<string, EndpointHealthResult> endpoints);
    [CompilerGeneratedAttribute]
public string get_Description();
    public static BusHealthResult Healthy(string description, IReadOnlyDictionary`2<string, EndpointHealthResult> endpoints);
    public static BusHealthResult Degraded(string description, Exception exception, IReadOnlyDictionary`2<string, EndpointHealthResult> endpoints);
    public static BusHealthResult Unhealthy(string description, Exception exception, IReadOnlyDictionary`2<string, EndpointHealthResult> endpoints);
}
public enum MassTransit.BusHealthStatus : Enum {
    public int value__;
    public static BusHealthStatus Unhealthy;
    public static BusHealthStatus Degraded;
    public static BusHealthStatus Healthy;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MassTransit.BusInstance`1 : object {
    private IBusControl _busControl;
    public Uri Address { get; }
    public IBusTopology Topology { get; }
    protected BusInstance`1(IBusControl busControl);
    public sealed virtual ConnectHandle ConnectPublishObserver(IPublishObserver observer);
    public sealed virtual Task Publish(T message, CancellationToken cancellationToken);
    public sealed virtual Task Publish(T message, IPipe`1<PublishContext`1<T>> publishPipe, CancellationToken cancellationToken);
    public sealed virtual Task Publish(T message, IPipe`1<PublishContext> publishPipe, CancellationToken cancellationToken);
    public sealed virtual Task Publish(object message, CancellationToken cancellationToken);
    public sealed virtual Task Publish(object message, IPipe`1<PublishContext> publishPipe, CancellationToken cancellationToken);
    public sealed virtual Task Publish(object message, Type messageType, CancellationToken cancellationToken);
    public sealed virtual Task Publish(object message, Type messageType, IPipe`1<PublishContext> publishPipe, CancellationToken cancellationToken);
    public sealed virtual Task Publish(object values, CancellationToken cancellationToken);
    public sealed virtual Task Publish(object values, IPipe`1<PublishContext`1<T>> publishPipe, CancellationToken cancellationToken);
    public sealed virtual Task Publish(object values, IPipe`1<PublishContext> publishPipe, CancellationToken cancellationToken);
    public sealed virtual Task`1<ISendEndpoint> GetPublishSendEndpoint();
    public sealed virtual ConnectHandle ConnectSendObserver(ISendObserver observer);
    public sealed virtual Task`1<ISendEndpoint> GetSendEndpoint(Uri address);
    public sealed virtual ConnectHandle ConnectConsumePipe(IPipe`1<ConsumeContext`1<T>> pipe);
    public sealed virtual ConnectHandle ConnectConsumePipe(IPipe`1<ConsumeContext`1<T>> pipe, ConnectPipeOptions options);
    public sealed virtual ConnectHandle ConnectRequestPipe(Guid requestId, IPipe`1<ConsumeContext`1<T>> pipe);
    public sealed virtual ConnectHandle ConnectConsumeMessageObserver(IConsumeMessageObserver`1<T> observer);
    public sealed virtual ConnectHandle ConnectConsumeObserver(IConsumeObserver observer);
    public sealed virtual ConnectHandle ConnectReceiveObserver(IReceiveObserver observer);
    public sealed virtual ConnectHandle ConnectReceiveEndpointObserver(IReceiveEndpointObserver observer);
    public sealed virtual ConnectHandle ConnectEndpointConfigurationObserver(IEndpointConfigurationObserver observer);
    public sealed virtual HostReceiveEndpointHandle ConnectReceiveEndpoint(IEndpointDefinition definition, IEndpointNameFormatter endpointNameFormatter, Action`1<IReceiveEndpointConfigurator> configureEndpoint);
    public sealed virtual HostReceiveEndpointHandle ConnectReceiveEndpoint(string queueName, Action`1<IReceiveEndpointConfigurator> configureEndpoint);
    public sealed virtual void Probe(ProbeContext context);
    public sealed virtual Uri get_Address();
    public sealed virtual IBusTopology get_Topology();
    public sealed virtual Task`1<BusHandle> StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual BusHealthResult CheckHealth();
}
[NullableContextAttribute("1")]
public interface MassTransit.BusReady {
    public IBus Bus { get; }
    public HostReady Host { get; }
    public abstract virtual IBus get_Bus();
    public abstract virtual HostReady get_Host();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.BytesMessageBody : object {
    private Byte[] _bytes;
    [NullableAttribute("2")]
private string _string;
    public Nullable`1<long> Length { get; }
    [NullableContextAttribute("2")]
public BytesMessageBody(Byte[] bytes);
    public sealed virtual Nullable`1<long> get_Length();
    public sealed virtual Stream GetStream();
    public sealed virtual Byte[] GetBytes();
    public sealed virtual string GetString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.CancelScheduledSendExtensions : object {
    [ExtensionAttribute]
public static Task CancelScheduledSend(IMessageScheduler scheduler, ScheduledMessage`1<T> message);
    [ExtensionAttribute]
public static Task CancelScheduledSend(ConsumeContext context, ScheduledMessage`1<T> message);
}
[NullableContextAttribute("1")]
public interface MassTransit.ClientFactoryContext {
    public RequestTimeout DefaultTimeout { get; }
    public Uri ResponseAddress { get; }
    public abstract virtual RequestTimeout get_DefaultTimeout();
    public abstract virtual Uri get_ResponseAddress();
    public abstract virtual IRequestSendEndpoint`1<T> GetRequestEndpoint(ConsumeContext consumeContext);
    public abstract virtual IRequestSendEndpoint`1<T> GetRequestEndpoint(Uri destinationAddress, ConsumeContext consumeContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.CommandException : MassTransitException {
    public CommandException(string message);
    public CommandException(string message, Exception innerException);
    protected CommandException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.CommandExtensions : object {
    [ExtensionAttribute]
public static Task SendCommand(IPipe`1<CommandContext> pipe, T command);
}
public interface MassTransit.CompensateActivityContext`1 {
}
public interface MassTransit.CompensateActivityContext`2 {
    [NullableAttribute("1")]
public TActivity Activity { get; }
    [NullableContextAttribute("1")]
public abstract virtual TActivity get_Activity();
}
public interface MassTransit.CompensateContext {
    [NullableAttribute("1")]
public CompensationResult Result { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual CompensationResult get_Result();
    [NullableContextAttribute("1")]
public abstract virtual void set_Result(CompensationResult value);
    [NullableContextAttribute("1")]
public abstract virtual CompensationResult Compensated();
    [NullableContextAttribute("1")]
public abstract virtual CompensationResult Compensated(object values);
    [NullableContextAttribute("1")]
public abstract virtual CompensationResult Compensated(IDictionary`2<string, object> variables);
    [NullableContextAttribute("1")]
public abstract virtual CompensationResult Failed();
    [NullableContextAttribute("1")]
public abstract virtual CompensationResult Failed(Exception exception);
}
public interface MassTransit.CompensateContext`1 {
    [NullableAttribute("1")]
public TLog Log { get; }
    [NullableContextAttribute("1")]
public abstract virtual TLog get_Log();
    [NullableContextAttribute("1")]
public abstract virtual CompensateActivityContext`2<TActivity, TLog> CreateActivityContext(TActivity activity);
}
[NullableContextAttribute("1")]
public interface MassTransit.CompensationResult {
    public abstract virtual Task Evaluate();
    public abstract virtual bool IsFailed(Exception& exception);
}
[FlagsAttribute]
public enum MassTransit.CompositeEventOptions : Enum {
    public int value__;
    public static CompositeEventOptions None;
    public static CompositeEventOptions IncludeInitial;
    public static CompositeEventOptions IncludeFinal;
    public static CompositeEventOptions RaiseOnce;
}
[DebuggerDisplayAttribute("{Status}")]
public class MassTransit.CompositeEventStatus : ValueType {
    private int _bits;
    [NullableAttribute("1")]
[EditorBrowsableAttribute("1")]
public string Status { get; }
    public int Bits { get; }
    public CompositeEventStatus(int bits);
    [NullableContextAttribute("1")]
public string get_Status();
    public int get_Bits();
    public sealed virtual int CompareTo(CompositeEventStatus other);
    public bool Equals(CompositeEventStatus other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void Set(int flag);
    public bool IsSet(int flag);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.ConcurrencyException : SagaException {
    public ConcurrencyException(string message, Type sagaType, Guid correlationId);
    public ConcurrencyException(string message, Type sagaType, Guid correlationId, Exception innerException);
}
[ExtensionAttribute]
public static class MassTransit.ConcurrencyLimitExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task SetConcurrencyLimit(IPipe`1<CommandContext> pipe, int concurrencyLimit);
}
public enum MassTransit.ConcurrencyMode : Enum {
    public int value__;
    public static ConcurrencyMode Optimistic;
    public static ConcurrencyMode Pessimistic;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Configuration.ActivityConfigurationObservable : Connectable`1<IActivityConfigurationObserver> {
    public sealed virtual void ActivityConfigured(IExecuteActivityConfigurator`2<TActivity, TArguments> configurator, Uri compensateAddress);
    public sealed virtual void ExecuteActivityConfigured(IExecuteActivityConfigurator`2<TActivity, TArguments> configurator);
    public sealed virtual void CompensateActivityConfigured(ICompensateActivityConfigurator`2<TActivity, TLog> configurator);
    public void Method4();
    public void Method5();
    public void Method6();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.AsyncDelegatePipeSpecification`1 : object {
    private Func`2<T, Task> _callback;
    public AsyncDelegatePipeSpecification`1(Func`2<T, Task> callback);
    public sealed virtual void Apply(IPipeBuilder`1<T> builder);
    [IteratorStateMachineAttribute("MassTransit.Configuration.AsyncDelegatePipeSpecification`1/<Validate>d__3")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Configuration.CompensateActivityEndpointDefinition`2 : SettingsEndpointDefinition`1<ICompensateActivity`1<TLog>> {
    public CompensateActivityEndpointDefinition`2(IEndpointSettings`1<IEndpointDefinition`1<ICompensateActivity`1<TLog>>> settings);
    protected virtual string FormatEndpointName(IEndpointNameFormatter formatter);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Configuration.ConsumePipeSpecificationObservable : Connectable`1<IConsumePipeSpecificationObserver> {
    [NullableContextAttribute("1")]
public sealed virtual void MessageSpecificationCreated(IMessageConsumePipeSpecification`1<T> specification);
    public void Method4();
    public void Method5();
    public void Method6();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Configuration.ConsumerConfigurationObservable : Connectable`1<IConsumerConfigurationObserver> {
    public sealed virtual void ConsumerConfigured(IConsumerConfigurator`1<TConsumer> configurator);
    public sealed virtual void ConsumerMessageConfigured(IConsumerMessageConfigurator`2<TConsumer, TMessage> configurator);
    public void Method4();
    public void Method5();
    public void Method6();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Configuration.ConsumerEndpointDefinition`1 : SettingsEndpointDefinition`1<TConsumer> {
    public ConsumerEndpointDefinition`1(IEndpointSettings`1<IEndpointDefinition`1<TConsumer>> settings);
    protected virtual string FormatEndpointName(IEndpointNameFormatter formatter);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Configuration.ConsumeTopologyConfigurationObservable : Connectable`1<IConsumeTopologyConfigurationObserver> {
    [NullableContextAttribute("1")]
public sealed virtual void MessageTopologyCreated(IMessageConsumeTopologyConfigurator`1<T> configuration);
    public void Method4();
    public void Method5();
    public void Method6();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.DelegatePipeSpecification`1 : object {
    private Action`1<T> _callback;
    public DelegatePipeSpecification`1(Action`1<T> callback);
    public sealed virtual void Apply(IPipeBuilder`1<T> builder);
    [IteratorStateMachineAttribute("MassTransit.Configuration.DelegatePipeSpecification`1/<Validate>d__3")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.DelegatePublishTopologyConfigurationObserver : object {
    private IPublishTopologyConfigurator _publishTopology;
    public DelegatePublishTopologyConfigurationObserver(IPublishTopologyConfigurator publishTopology);
    public sealed virtual void MessageTopologyCreated(IMessagePublishTopologyConfigurator`1<T> configurator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.DelegateSendTopologyConfigurationObserver : object {
    private ISendTopology _sendTopology;
    public DelegateSendTopologyConfigurationObserver(ISendTopology sendTopology);
    public sealed virtual void MessageTopologyCreated(IMessageSendTopologyConfigurator`1<T> configuration);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Configuration.EndpointConfigurationObservable : Connectable`1<IEndpointConfigurationObserver> {
    [NullableContextAttribute("1")]
public sealed virtual void EndpointConfigured(T configurator);
    public void Method4();
    public void Method5();
    public void Method6();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.EndpointRegistrationConfigurator`1 : object {
    private EndpointSettings`1<IEndpointDefinition`1<T>> _settings;
    public IEndpointSettings`1<IEndpointDefinition`1<T>> Settings { get; }
    unknown string Name {public set; }
    unknown bool Temporary {public set; }
    unknown Nullable`1<int> PrefetchCount {public set; }
    unknown Nullable`1<int> ConcurrentMessageLimit {public set; }
    unknown bool ConfigureConsumeTopology {public set; }
    unknown string InstanceId {public set; }
    public IEndpointSettings`1<IEndpointDefinition`1<T>> get_Settings();
    public sealed virtual void set_Name(string value);
    public sealed virtual void set_Temporary(bool value);
    public sealed virtual void set_PrefetchCount(Nullable`1<int> value);
    public sealed virtual void set_ConcurrentMessageLimit(Nullable`1<int> value);
    public sealed virtual void set_ConfigureConsumeTopology(bool value);
    public sealed virtual void set_InstanceId(string value);
    public sealed virtual void AddConfigureEndpointCallback(Action`1<IReceiveEndpointConfigurator> callback);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MassTransit.Configuration.EndpointSettings`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Action`1<IReceiveEndpointConfigurator>> _callbacks;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTemporary>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PrefetchCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ConcurrentMessageLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConfigureConsumeTopology>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    public string Name { get; public set; }
    public bool IsTemporary { get; public set; }
    public Nullable`1<int> PrefetchCount { get; public set; }
    public Nullable`1<int> ConcurrentMessageLimit { get; public set; }
    public bool ConfigureConsumeTopology { get; public set; }
    public string InstanceId { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsTemporary();
    [CompilerGeneratedAttribute]
public void set_IsTemporary(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_PrefetchCount();
    [CompilerGeneratedAttribute]
public void set_PrefetchCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_ConcurrentMessageLimit();
    [CompilerGeneratedAttribute]
public void set_ConcurrentMessageLimit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ConfigureConsumeTopology();
    [CompilerGeneratedAttribute]
public void set_ConfigureConsumeTopology(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_InstanceId();
    [CompilerGeneratedAttribute]
public void set_InstanceId(string value);
    [NullableContextAttribute("1")]
public sealed virtual void ConfigureEndpoint(IReceiveEndpointConfigurator configurator);
    public void AddConfigureEndpointCallback(Action`1<IReceiveEndpointConfigurator> callback);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MassTransit.Configuration.ExceptionSpecification : object {
    private CompositeFilter`1<Exception> _exceptionFilter;
    [CompilerGeneratedAttribute]
private IExceptionFilter <Filter>k__BackingField;
    protected IExceptionFilter Filter { get; }
    [CompilerGeneratedAttribute]
protected IExceptionFilter get_Filter();
    public sealed virtual void Handle(Type[] exceptionTypes);
    [NullableContextAttribute("0")]
public sealed virtual void Handle();
    public sealed virtual void Handle(Func`2<T, bool> filter);
    public sealed virtual void Ignore(Type[] exceptionTypes);
    [NullableContextAttribute("0")]
public sealed virtual void Ignore();
    public sealed virtual void Ignore(Func`2<T, bool> filter);
    private static bool Match(Exception exception, Type[] exceptionTypes);
    private static bool Match(Exception exception, Func`2<T, bool> filter);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Configuration.ExecuteActivityEndpointDefinition`2 : SettingsEndpointDefinition`1<IExecuteActivity`1<TArguments>> {
    public ExecuteActivityEndpointDefinition`2(IEndpointSettings`1<IEndpointDefinition`1<IExecuteActivity`1<TArguments>>> settings);
    protected virtual string FormatEndpointName(IEndpointNameFormatter formatter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.FilterPipeSpecification`1 : object {
    private IFilter`1<TContext> _filter;
    public FilterPipeSpecification`1(IFilter`1<TContext> filter);
    public sealed virtual void Apply(IPipeBuilder`1<TContext> builder);
    [IteratorStateMachineAttribute("MassTransit.Configuration.FilterPipeSpecification`1/<Validate>d__3")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Configuration.FutureEndpointDefinition`1 : SettingsEndpointDefinition`1<TFuture> {
    public FutureEndpointDefinition`1(IEndpointSettings`1<IEndpointDefinition`1<TFuture>> settings);
    protected virtual string FormatEndpointName(IEndpointNameFormatter formatter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.GroupKeyProvider`2 : object {
    private Func`2<ConsumeContext`1<TMessage>, TKey> _provider;
    public GroupKeyProvider`2(Func`2<ConsumeContext`1<TMessage>, TKey> provider);
    public sealed virtual bool TryGetKey(ConsumeContext`1<TMessage> context, TKey& key);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Configuration.HandlerConfigurationObservable : Connectable`1<IHandlerConfigurationObserver> {
    [NullableContextAttribute("1")]
public sealed virtual void HandlerConfigured(IHandlerConfigurator`1<TMessage> configurator);
    public void Method4();
    public void Method5();
    public void Method6();
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IBuildPipeConfigurator`1 {
    public abstract virtual IPipe`1<TContext> Build();
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IConsumePipeSpecification {
    public abstract virtual IMessageConsumePipeSpecification`1<T> GetMessageSpecification();
    public abstract virtual IConsumePipe BuildConsumePipe();
    public abstract virtual IConsumePipeSpecification CreateConsumePipeSpecification();
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IConsumePipeSpecificationObserver {
    public abstract virtual void MessageSpecificationCreated(IMessageConsumePipeSpecification`1<T> specification);
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IConsumePipeSpecificationObserverConnector {
    public abstract virtual ConnectHandle ConnectConsumePipeSpecificationObserver(IConsumePipeSpecificationObserver observer);
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IConsumeTopologyConfigurationObserver {
    public abstract virtual void MessageTopologyCreated(IMessageConsumeTopologyConfigurator`1<T> configuration);
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IConsumeTopologyConfigurationObserverConnector {
    public abstract virtual ConnectHandle ConnectConsumeTopologyConfigurationObserver(IConsumeTopologyConfigurationObserver observer);
}
public interface MassTransit.Configuration.IConsumeTopologyConvention {
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IMessageConsumePipeConfigurator`1 {
}
public interface MassTransit.Configuration.IMessageConsumePipeSpecification {
    [NullableContextAttribute("1")]
public abstract virtual IMessageConsumePipeSpecification`1<T> GetMessageSpecification();
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IMessageConsumePipeSpecification`1 {
    public abstract virtual void AddParentMessageSpecification(ISpecificationPipeSpecification`1<ConsumeContext`1<TMessage>> parentSpecification);
    public abstract virtual IPipe`1<ConsumeContext`1<TMessage>> BuildMessagePipe(IPipe`1<ConsumeContext`1<TMessage>> pipe);
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IMessageConsumeTopologyConvention {
    public abstract virtual bool TryGetMessageConsumeTopologyConvention(IMessageConsumeTopologyConvention`1& convention);
}
public interface MassTransit.Configuration.IMessageConsumeTopologyConvention`1 {
    public abstract virtual bool TryGetMessageConsumeTopology(IMessageConsumeTopology`1& messageConsumeTopology);
}
public interface MassTransit.Configuration.IMessagePublishPipeSpecification {
    [NullableContextAttribute("1")]
public abstract virtual IMessagePublishPipeSpecification`1<T> GetMessageSpecification();
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IMessagePublishPipeSpecification`1 {
    public abstract virtual void AddParentMessageSpecification(ISpecificationPipeSpecification`1<PublishContext`1<TMessage>> implementedMessageTypeSpecification);
    public abstract virtual IPipe`1<PublishContext`1<TMessage>> BuildMessagePipe();
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IMessagePublishTopologyConvention {
    public abstract virtual bool TryGetMessagePublishTopologyConvention(IMessagePublishTopologyConvention`1& convention);
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IMessagePublishTopologyConvention`1 {
    public abstract virtual bool TryGetMessagePublishTopology(IMessagePublishTopology`1& messagePublishTopology);
}
public interface MassTransit.Configuration.IMessageSendPipeSpecification {
    [NullableContextAttribute("1")]
public abstract virtual IMessageSendPipeSpecification`1<T> GetMessageSpecification();
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IMessageSendPipeSpecification`1 {
    public abstract virtual void AddParentMessageSpecification(ISpecificationPipeSpecification`1<SendContext`1<TMessage>> parentSpecification);
    public abstract virtual IPipe`1<SendContext`1<TMessage>> BuildMessagePipe();
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IMessageSendTopologyConvention {
    public abstract virtual bool TryGetMessageSendTopologyConvention(IMessageSendTopologyConvention`1& convention);
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IMessageSendTopologyConvention`1 {
    public abstract virtual bool TryGetMessageSendTopology(IMessageSendTopology`1& messageSendTopology);
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IMessageTopologyConfigurationObserver {
    public abstract virtual void MessageTopologyCreated(IMessageTopologyConfigurator`1<T> configuration);
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IMessageTopologyConfigurationObserverConnector {
    public abstract virtual ConnectHandle ConnectMessageTopologyConfigurationObserver(IMessageTopologyConfigurationObserver observer);
}
public interface MassTransit.Configuration.IMessageTopologyConfigurator {
    [NullableContextAttribute("1")]
public abstract virtual void SetEntityNameFormatter(IEntityNameFormatter entityNameFormatter);
    [NullableContextAttribute("1")]
public abstract virtual IMessageTopologyConfigurator`1<T> GetMessageTopology();
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IMessageTopologyConfigurator`1 {
    public abstract virtual void SetEntityNameFormatter(IMessageEntityNameFormatter`1<TMessage> entityNameFormatter);
    public abstract virtual void SetEntityName(string entityName);
}
public interface MassTransit.Configuration.IMessageTypeTopologyConfigurator {
}
public interface MassTransit.Configuration.IOptions {
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IOptionsSet {
    public abstract virtual T Options(Action`1<T> configure);
    public abstract virtual T Options(T options, Action`1<T> configure);
    public abstract virtual bool TryGetOptions(T& options);
    public abstract virtual IEnumerable`1<T> SelectOptions();
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IPipeBuilder`1 {
    public abstract virtual void AddFilter(IFilter`1<TContext> filter);
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IPipeSpecification`1 {
    public abstract virtual void Apply(IPipeBuilder`1<TContext> builder);
}
public interface MassTransit.Configuration.IPublishPipeSpecification {
    [NullableContextAttribute("1")]
public abstract virtual IMessagePublishPipeSpecification`1<T> GetMessageSpecification();
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IPublishPipeSpecificationObserver {
    public abstract virtual void MessageSpecificationCreated(IMessagePublishPipeSpecification`1<T> specification);
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IPublishPipeSpecificationObserverConnector {
    public abstract virtual ConnectHandle ConnectPublishPipeSpecificationObserver(IPublishPipeSpecificationObserver observer);
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IPublishTopologyConfigurationObserver {
    public abstract virtual void MessageTopologyCreated(IMessagePublishTopologyConfigurator`1<T> configurator);
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.IPublishTopologyConfigurationObserverConnector {
    public abstract virtual ConnectHandle ConnectPublishTopologyConfigurationObserver(IPublishTopologyConfigurationObserver observer);
}
public interface MassTransit.Configuration.IPublishTopologyConvention {
}
public interface MassTransit.Configuration.IReceiveEndpointBuilder {
}
public interface MassTransit.Configuration.ISendPipeSpecification {
    [NullableContextAttribute("1")]
public abstract virtual IMessageSendPipeSpecification`1<T> GetMessageSpecification();
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.ISendPipeSpecificationObserver {
    public abstract virtual void MessageSpecificationCreated(IMessageSendPipeSpecification`1<T> specification);
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.ISendPipeSpecificationObserverConnector {
    public abstract virtual ConnectHandle ConnectSendPipeSpecificationObserver(ISendPipeSpecificationObserver observer);
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.ISendTopologyConfigurationObserver {
    public abstract virtual void MessageTopologyCreated(IMessageSendTopologyConfigurator`1<T> configuration);
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.ISendTopologyConfigurationObserverConnector {
    public abstract virtual ConnectHandle ConnectSendTopologyConfigurationObserver(ISendTopologyConfigurationObserver observer);
}
public interface MassTransit.Configuration.ISendTopologyConvention {
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.ISpecificationPipeBuilder`1 {
    public bool IsDelegated { get; }
    public bool IsImplemented { get; }
    public abstract virtual bool get_IsDelegated();
    public abstract virtual bool get_IsImplemented();
    public abstract virtual ISpecificationPipeBuilder`1<T> CreateDelegatedBuilder();
    public abstract virtual ISpecificationPipeBuilder`1<T> CreateImplementedBuilder();
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.ISpecificationPipeSpecification`1 {
    public abstract virtual void Apply(ISpecificationPipeBuilder`1<T> builder);
}
[NullableContextAttribute("1")]
public interface MassTransit.Configuration.ITopologyPipeBuilder`1 {
    public bool IsDelegated { get; }
    public bool IsImplemented { get; }
    public abstract virtual bool get_IsDelegated();
    public abstract virtual bool get_IsImplemented();
    public abstract virtual ITopologyPipeBuilder`1<T> CreateDelegatedBuilder();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.MessageConsumeTopologyPipeSpecification`1 : object {
    private IMessageConsumeTopology`1<TMessage> _messageConsumeTopology;
    public MessageConsumeTopologyPipeSpecification`1(IMessageConsumeTopology`1<TMessage> messageConsumeTopology);
    public sealed virtual void Apply(ISpecificationPipeBuilder`1<ConsumeContext`1<TMessage>> builder);
    [IteratorStateMachineAttribute("MassTransit.Configuration.MessageConsumeTopologyPipeSpecification`1/<Validate>d__3")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.MessagePublishPipeSpecification`1 : object {
    private List`1<IPipeSpecification`1<PublishContext>> _baseSpecifications;
    private List`1<ISpecificationPipeSpecification`1<PublishContext`1<TMessage>>> _implementedMessageTypeSpecifications;
    private List`1<ISpecificationPipeSpecification`1<PublishContext`1<TMessage>>> _parentMessageSpecifications;
    private List`1<IPipeSpecification`1<PublishContext`1<TMessage>>> _specifications;
    public sealed virtual void AddPipeSpecification(IPipeSpecification`1<PublishContext> specification);
    private sealed virtual override IMessagePublishPipeSpecification`1<T> MassTransit.Configuration.IMessagePublishPipeSpecification.GetMessageSpecification();
    public sealed virtual void AddPipeSpecification(IPipeSpecification`1<PublishContext`1<TMessage>> specification);
    public sealed virtual IEnumerable`1<ValidationResult> Validate();
    public sealed virtual void Apply(ISpecificationPipeBuilder`1<PublishContext`1<TMessage>> builder);
    public sealed virtual IPipe`1<PublishContext`1<TMessage>> BuildMessagePipe();
    public sealed virtual void AddParentMessageSpecification(ISpecificationPipeSpecification`1<PublishContext`1<TMessage>> implementedMessageTypeSpecification);
    public void AddImplementedMessageSpecification(ISpecificationPipeSpecification`1<PublishContext`1<T>> implementedMessageTypeSpecification);
    private static PublishContext FilterContext(PublishContext`1<TMessage> context);
    private static PublishContext`1<TMessage> MergeContext(PublishContext`1<TMessage> input, PublishContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.MessagePublishPipeSplitFilterSpecification`2 : object {
    private ISpecificationPipeSpecification`1<PublishContext`1<T>> _specification;
    public MessagePublishPipeSplitFilterSpecification`2(ISpecificationPipeSpecification`1<PublishContext`1<T>> specification);
    public sealed virtual void Apply(ISpecificationPipeBuilder`1<PublishContext`1<TMessage>> builder);
    [IteratorStateMachineAttribute("MassTransit.Configuration.MessagePublishPipeSplitFilterSpecification`2/<Validate>d__3")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.MessagePublishTopologyPipeSpecification`1 : object {
    private IMessagePublishTopology`1<TMessage> _messagePublishTopology;
    public MessagePublishTopologyPipeSpecification`1(IMessagePublishTopology`1<TMessage> messagePublishTopology);
    public sealed virtual void Apply(ISpecificationPipeBuilder`1<PublishContext`1<TMessage>> builder);
    [IteratorStateMachineAttribute("MassTransit.Configuration.MessagePublishTopologyPipeSpecification`1/<Validate>d__3")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.MessageSendPipeSpecification`1 : object {
    private List`1<IPipeSpecification`1<SendContext>> _baseSpecifications;
    private List`1<ISpecificationPipeSpecification`1<SendContext`1<TMessage>>> _implementedMessageTypeSpecifications;
    private List`1<ISpecificationPipeSpecification`1<SendContext`1<TMessage>>> _parentMessageSpecifications;
    private List`1<IPipeSpecification`1<SendContext`1<TMessage>>> _specifications;
    public sealed virtual void AddPipeSpecification(IPipeSpecification`1<SendContext> specification);
    private sealed virtual override IMessageSendPipeSpecification`1<T> MassTransit.Configuration.IMessageSendPipeSpecification.GetMessageSpecification();
    public sealed virtual void AddPipeSpecification(IPipeSpecification`1<SendContext`1<TMessage>> specification);
    public sealed virtual IEnumerable`1<ValidationResult> Validate();
    public sealed virtual void Apply(ISpecificationPipeBuilder`1<SendContext`1<TMessage>> builder);
    public sealed virtual IPipe`1<SendContext`1<TMessage>> BuildMessagePipe();
    public sealed virtual void AddParentMessageSpecification(ISpecificationPipeSpecification`1<SendContext`1<TMessage>> parentSpecification);
    public void AddImplementedMessageSpecification(ISpecificationPipeSpecification`1<SendContext`1<T>> implementedSpecification);
    private static SendContext FilterContext(SendContext`1<TMessage> context);
    private static SendContext`1<TMessage> MergeContext(SendContext`1<TMessage> input, SendContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.MessageSendPipeSplitFilterSpecification`2 : object {
    private ISpecificationPipeSpecification`1<SendContext`1<T>> _specification;
    public MessageSendPipeSplitFilterSpecification`2(ISpecificationPipeSpecification`1<SendContext`1<T>> specification);
    public sealed virtual void Apply(ISpecificationPipeBuilder`1<SendContext`1<TMessage>> builder);
    [IteratorStateMachineAttribute("MassTransit.Configuration.MessageSendPipeSplitFilterSpecification`2/<Validate>d__3")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.MessageSendTopologyPipeSpecification`1 : object {
    private IMessageSendTopology`1<TMessage> _messageSendTopology;
    public MessageSendTopologyPipeSpecification`1(IMessageSendTopology`1<TMessage> messageSendTopology);
    public sealed virtual void Apply(ISpecificationPipeBuilder`1<SendContext`1<TMessage>> builder);
    [IteratorStateMachineAttribute("MassTransit.Configuration.MessageSendTopologyPipeSpecification`1/<Validate>d__3")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Configuration.MessageTopologyConfigurationObservable : Connectable`1<IMessageTopologyConfigurationObserver> {
    [NullableContextAttribute("1")]
public sealed virtual void MessageTopologyCreated(IMessageTopologyConfigurator`1<T> configuration);
    public void Method4();
    public void Method5();
    public void Method6();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.OptionsSet : object {
    private IDictionary`2<Type, IOptions> _options;
    public sealed virtual T Options(Action`1<T> configure);
    public sealed virtual T Options(T options, Action`1<T> configure);
    public sealed virtual bool TryGetOptions(T& options);
    [IteratorStateMachineAttribute("MassTransit.Configuration.OptionsSet/<SelectOptions>d__5`1")]
public sealed virtual IEnumerable`1<T> SelectOptions();
    protected IEnumerable`1<ValidationResult> ValidateOptions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.ParentConsumePipeSpecificationObserver : object {
    private IConsumePipeSpecification _specification;
    public ParentConsumePipeSpecificationObserver(IConsumePipeSpecification specification);
    public sealed virtual void MessageSpecificationCreated(IMessageConsumePipeSpecification`1<T> specification);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.PipeConfigurator`1 : object {
    private List`1<IPipeSpecification`1<TContext>> _specifications;
    [IteratorStateMachineAttribute("MassTransit.Configuration.PipeConfigurator`1/<Validate>d__10")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
    public sealed virtual void AddPipeSpecification(IPipeSpecification`1<TContext> specification);
    public sealed virtual IPipe`1<TContext> Build();
    public void Method1();
    public void Method2();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.PublishPipeSpecification : object {
    private object _lock;
    private ConcurrentDictionary`2<Type, IMessagePublishPipeSpecification> _messageSpecifications;
    private PublishPipeSpecificationObservable _observers;
    private List`1<IPipeSpecification`1<PublishContext>> _specifications;
    public sealed virtual void AddPipeSpecification(IPipeSpecification`1<PublishContext> specification);
    public sealed virtual void AddPipeSpecification(IPipeSpecification`1<PublishContext`1<T>> specification);
    private sealed virtual override void MassTransit.IPublishPipeConfigurator.AddPipeSpecification(IPipeSpecification`1<SendContext> specification);
    private sealed virtual override void MassTransit.IPublishPipeConfigurator.AddPipeSpecification(IPipeSpecification`1<SendContext`1<T>> specification);
    public sealed virtual ConnectHandle ConnectPublishPipeSpecificationObserver(IPublishPipeSpecificationObserver observer);
    public sealed virtual IEnumerable`1<ValidationResult> Validate();
    public sealed virtual IMessagePublishPipeSpecification`1<T> GetMessageSpecification();
    private static SendContext`1<T> FilterContext(PublishContext`1<T> context);
    private static PublishContext`1<T> MergeContext(PublishContext`1<T> input, SendContext context);
    private static SendContext FilterContext(PublishContext context);
    private static PublishContext MergeContext(PublishContext input, SendContext context);
    private IMessagePublishPipeSpecification CreateMessageSpecification(Type type);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Configuration.PublishPipeSpecificationObservable : Connectable`1<IPublishPipeSpecificationObserver> {
    [NullableContextAttribute("1")]
public sealed virtual void MessageSpecificationCreated(IMessagePublishPipeSpecification`1<T> specification);
    public void Method4();
    public void Method5();
    public void Method6();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Configuration.PublishTopologyConfigurationObservable : Connectable`1<IPublishTopologyConfigurationObserver> {
    [NullableContextAttribute("1")]
public sealed virtual void MessageTopologyCreated(IMessagePublishTopologyConfigurator`1<T> configurator);
    public void Method4();
    public void Method5();
    public void Method6();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.PublishToSendTopologyConfigurationObserver : object {
    private ISendTopology _sendTopology;
    public PublishToSendTopologyConfigurationObserver(ISendTopology sendTopology);
    public sealed virtual void MessageTopologyCreated(IMessagePublishTopologyConfigurator`1<T> configurator);
}
public class MassTransit.Configuration.RetryPolicyFactory : MulticastDelegate {
    public RetryPolicyFactory(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual IRetryPolicy Invoke(IExceptionFilter filter);
    public virtual IAsyncResult BeginInvoke(IExceptionFilter filter, AsyncCallback callback, object object);
    public virtual IRetryPolicy EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Configuration.SagaConfigurationObservable : Connectable`1<ISagaConfigurationObserver> {
    public sealed virtual void SagaConfigured(ISagaConfigurator`1<TSaga> configurator);
    public sealed virtual void StateMachineSagaConfigured(ISagaConfigurator`1<TInstance> configurator, SagaStateMachine`1<TInstance> stateMachine);
    public sealed virtual void SagaMessageConfigured(ISagaMessageConfigurator`2<TSaga, TMessage> configurator);
    public void Method4();
    public void Method5();
    public void Method6();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Configuration.SagaEndpointDefinition`1 : SettingsEndpointDefinition`1<TSaga> {
    public SagaEndpointDefinition`1(IEndpointSettings`1<IEndpointDefinition`1<TSaga>> settings);
    protected virtual string FormatEndpointName(IEndpointNameFormatter formatter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.SendPipeSpecification : object {
    private object _lock;
    private ConcurrentDictionary`2<Type, IMessageSendPipeSpecification> _messageSpecifications;
    private SendPipeSpecificationObservable _observers;
    private List`1<IPipeSpecification`1<SendContext>> _specifications;
    public sealed virtual void AddPipeSpecification(IPipeSpecification`1<SendContext> specification);
    private sealed virtual override void MassTransit.ISendPipeConfigurator.AddPipeSpecification(IPipeSpecification`1<SendContext`1<T>> specification);
    public sealed virtual ConnectHandle ConnectSendPipeSpecificationObserver(ISendPipeSpecificationObserver observer);
    public sealed virtual IEnumerable`1<ValidationResult> Validate();
    public sealed virtual IMessageSendPipeSpecification`1<T> GetMessageSpecification();
    private IMessageSendPipeSpecification CreateMessageSpecification(Type type);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Configuration.SendPipeSpecificationObservable : Connectable`1<ISendPipeSpecificationObserver> {
    [NullableContextAttribute("1")]
public sealed virtual void MessageSpecificationCreated(IMessageSendPipeSpecification`1<T> specification);
    public void Method4();
    public void Method5();
    public void Method6();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Configuration.SendTopologyConfigurationObservable : Connectable`1<ISendTopologyConfigurationObserver> {
    [NullableContextAttribute("1")]
public sealed virtual void MessageTopologyCreated(IMessageSendTopologyConfigurator`1<T> configuration);
    public void Method4();
    public void Method5();
    public void Method6();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MassTransit.Configuration.SettingsEndpointDefinition`1 : object {
    private IEndpointSettings`1<IEndpointDefinition`1<TSettings>> _settings;
    [NullableAttribute("2")]
private string _endpointName;
    public bool IsTemporary { get; }
    public Nullable`1<int> PrefetchCount { get; }
    public Nullable`1<int> ConcurrentMessageLimit { get; }
    public bool ConfigureConsumeTopology { get; }
    protected SettingsEndpointDefinition`1(IEndpointSettings`1<IEndpointDefinition`1<TSettings>> settings);
    public sealed virtual string GetEndpointName(IEndpointNameFormatter formatter);
    public sealed virtual bool get_IsTemporary();
    public sealed virtual Nullable`1<int> get_PrefetchCount();
    public sealed virtual Nullable`1<int> get_ConcurrentMessageLimit();
    public sealed virtual bool get_ConfigureConsumeTopology();
    public sealed virtual void Configure(T configurator);
    protected abstract virtual string FormatEndpointName(IEndpointNameFormatter formatter);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GetEndpointName>g__FormatName|3_0(<>c__DisplayClass3_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.TopologyConsumePipeSpecificationObserver : object {
    private IConsumeTopology _topology;
    public TopologyConsumePipeSpecificationObserver(IConsumeTopology topology);
    private sealed virtual override void MassTransit.Configuration.IConsumePipeSpecificationObserver.MessageSpecificationCreated(IMessageConsumePipeSpecification`1<T> specification);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.TopologyPublishPipeSpecificationObserver : object {
    private IPublishTopology _topology;
    public TopologyPublishPipeSpecificationObserver(IPublishTopology topology);
    private sealed virtual override void MassTransit.Configuration.IPublishPipeSpecificationObserver.MessageSpecificationCreated(IMessagePublishPipeSpecification`1<T> specification);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.TopologySendPipeSpecificationObserver : object {
    private ISendTopology _topology;
    public TopologySendPipeSpecificationObserver(ISendTopology topology);
    private sealed virtual override void MassTransit.Configuration.ISendPipeSpecificationObserver.MessageSpecificationCreated(IMessageSendPipeSpecification`1<T> specification);
}
public class MassTransit.Configuration.ValueTypeGroupKeyProvider`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<ConsumeContext`1<TMessage>, Nullable`1<TKey>> _provider;
    public ValueTypeGroupKeyProvider`2(Func`2<ConsumeContext`1<TMessage>, Nullable`1<TKey>> provider);
    public sealed virtual bool TryGetKey(ConsumeContext`1<TMessage> context, TKey& key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.ConfigurationException : MassTransitException {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ValidationResult> <Results>k__BackingField;
    public IEnumerable`1<ValidationResult> Results { get; protected set; }
    public ConfigurationException(IEnumerable`1<ValidationResult> results, string message);
    public ConfigurationException(IEnumerable`1<ValidationResult> results, string message, Exception innerException);
    public ConfigurationException(string message);
    public ConfigurationException(string message, Exception innerException);
    protected ConfigurationException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ValidationResult> get_Results();
    [CompilerGeneratedAttribute]
protected void set_Results(IEnumerable`1<ValidationResult> value);
}
[AttributeUsageAttribute("1028")]
public class MassTransit.ConfigureConsumeTopologyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ConfigureConsumeTopology>k__BackingField;
    public bool ConfigureConsumeTopology { get; }
    public ConfigureConsumeTopologyAttribute(bool configureConsumeTopology);
    [CompilerGeneratedAttribute]
public bool get_ConfigureConsumeTopology();
}
public interface MassTransit.ConnectHandle {
    public abstract virtual void Disconnect();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.ConnectionException : MassTransitException {
    [CompilerGeneratedAttribute]
private bool <IsTransient>k__BackingField;
    public bool IsTransient { get; }
    public ConnectionException(bool isTransient);
    public ConnectionException(string message, bool isTransient);
    public ConnectionException(string message, Exception innerException, bool isTransient);
    protected ConnectionException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public bool get_IsTransient();
}
[FlagsAttribute]
public enum MassTransit.ConnectPipeOptions : Enum {
    public int value__;
    public static ConnectPipeOptions ConfigureConsumeTopology;
    public static ConnectPipeOptions All;
}
[NullableContextAttribute("1")]
public interface MassTransit.ConsumeContext {
    public ReceiveContext ReceiveContext { get; }
    public SerializerContext SerializerContext { get; }
    public Task ConsumeCompleted { get; }
    public IEnumerable`1<string> SupportedMessageTypes { get; }
    public abstract virtual ReceiveContext get_ReceiveContext();
    public abstract virtual SerializerContext get_SerializerContext();
    public abstract virtual Task get_ConsumeCompleted();
    public abstract virtual IEnumerable`1<string> get_SupportedMessageTypes();
    public abstract virtual bool HasMessageType(Type messageType);
    public abstract virtual bool TryGetMessage(ConsumeContext`1& consumeContext);
    public abstract virtual void AddConsumeTask(Task task);
    public abstract virtual Task RespondAsync(T message);
    public abstract virtual Task RespondAsync(T message, IPipe`1<SendContext`1<T>> sendPipe);
    public abstract virtual Task RespondAsync(T message, IPipe`1<SendContext> sendPipe);
    public abstract virtual Task RespondAsync(object message);
    public abstract virtual Task RespondAsync(object message, Type messageType);
    public abstract virtual Task RespondAsync(object message, IPipe`1<SendContext> sendPipe);
    public abstract virtual Task RespondAsync(object message, Type messageType, IPipe`1<SendContext> sendPipe);
    public abstract virtual Task RespondAsync(object values);
    public abstract virtual Task RespondAsync(object values, IPipe`1<SendContext`1<T>> sendPipe);
    public abstract virtual Task RespondAsync(object values, IPipe`1<SendContext> sendPipe);
    public abstract virtual void Respond(T message);
    public abstract virtual Task NotifyConsumed(ConsumeContext`1<T> context, TimeSpan duration, string consumerType);
    public abstract virtual Task NotifyFaulted(ConsumeContext`1<T> context, TimeSpan duration, string consumerType, Exception exception);
}
public interface MassTransit.ConsumeContext`1 {
    [NullableAttribute("1")]
public T Message { get; }
    [NullableContextAttribute("1")]
public abstract virtual T get_Message();
    [NullableContextAttribute("1")]
public abstract virtual Task NotifyConsumed(TimeSpan duration, string consumerType);
    [NullableContextAttribute("1")]
public abstract virtual Task NotifyFaulted(TimeSpan duration, string consumerType, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.ConsumeContextExecuteExtensions : object {
    [ExtensionAttribute]
public static IPipe`1<ConsumeContext`1<T>> ToPipe(Action`1<ConsumeContext`1<T>> callback);
    [ExtensionAttribute]
public static IPipe`1<ConsumeContext`1<T>> ToPipe(Func`2<ConsumeContext`1<T>, Task> callback);
    [ExtensionAttribute]
public static IPipe`1<ConsumeContext> ToPipe(Action`1<ConsumeContext> callback);
    [ExtensionAttribute]
public static IPipe`1<ConsumeContext> ToPipe(Func`2<ConsumeContext, Task> callback);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.ConsumeContextNotAvailableException : MassTransitException {
    public ConsumeContextNotAvailableException(string message);
    public ConsumeContextNotAvailableException(string message, Exception innerException);
    protected ConsumeContextNotAvailableException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.ConsumeContextSchedulerExtensions : object {
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, Uri destinationAddress, DateTime scheduledTime, T message, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, Uri destinationAddress, DateTime scheduledTime, T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, Uri destinationAddress, DateTime scheduledTime, T message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(ConsumeContext context, Uri destinationAddress, DateTime scheduledTime, object message, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(ConsumeContext context, Uri destinationAddress, DateTime scheduledTime, object message, Type messageType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(ConsumeContext context, Uri destinationAddress, DateTime scheduledTime, object message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(ConsumeContext context, Uri destinationAddress, DateTime scheduledTime, object message, Type messageType, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, Uri destinationAddress, DateTime scheduledTime, object values, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, Uri destinationAddress, DateTime scheduledTime, object values, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, Uri destinationAddress, DateTime scheduledTime, object values, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, Uri destinationAddress, TimeSpan delay, T message, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, Uri destinationAddress, TimeSpan delay, T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, Uri destinationAddress, TimeSpan delay, T message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(ConsumeContext context, Uri destinationAddress, TimeSpan delay, object message, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(ConsumeContext context, Uri destinationAddress, TimeSpan delay, object message, Type messageType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(ConsumeContext context, Uri destinationAddress, TimeSpan delay, object message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, Uri destinationAddress, TimeSpan delay, object values, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(ConsumeContext context, Uri destinationAddress, TimeSpan delay, object message, Type messageType, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, Uri destinationAddress, TimeSpan delay, object values, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, Uri destinationAddress, TimeSpan delay, object values, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.ConsumeContextSelfSchedulerExtensions : object {
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, DateTime scheduledTime, T message, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, DateTime scheduledTime, T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, DateTime scheduledTime, T message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(ConsumeContext context, DateTime scheduledTime, object message, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(ConsumeContext context, DateTime scheduledTime, object message, Type messageType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(ConsumeContext context, DateTime scheduledTime, object message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(ConsumeContext context, DateTime scheduledTime, object message, Type messageType, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, DateTime scheduledTime, object values, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, DateTime scheduledTime, object values, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, DateTime scheduledTime, object values, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, TimeSpan delay, T message, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, TimeSpan delay, T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, TimeSpan delay, T message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(ConsumeContext context, TimeSpan delay, object message, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(ConsumeContext context, TimeSpan delay, object message, Type messageType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(ConsumeContext context, TimeSpan delay, object message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, TimeSpan delay, object values, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(ConsumeContext context, TimeSpan delay, object message, Type messageType, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, TimeSpan delay, object values, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(ConsumeContext context, TimeSpan delay, object values, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.ConsumerCanceledException : MassTransitException {
    public ConsumerCanceledException(string message);
    public ConsumerCanceledException(string message, Exception innerException);
    protected ConsumerCanceledException(SerializationInfo info, StreamingContext context);
}
public interface MassTransit.ConsumerConsumeContext`1 {
    [NullableAttribute("1")]
public TConsumer Consumer { get; }
    [NullableContextAttribute("1")]
public abstract virtual TConsumer get_Consumer();
}
public interface MassTransit.ConsumerConsumeContext`2 {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.ConsumerDefinition`1 : object {
    private Nullable`1<int> _concurrentMessageLimit;
    [NullableAttribute("2")]
private string _endpointName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEndpointDefinition`1<TConsumer> <EndpointDefinition>k__BackingField;
    unknown string EndpointName {protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEndpointDefinition`1<TConsumer> EndpointDefinition { get; public set; }
    [NullableAttribute("2")]
private IEndpointDefinition MassTransit.IConsumerDefinition.EndpointDefinition { get; }
    public Nullable`1<int> ConcurrentMessageLimit { get; protected set; }
    private Type MassTransit.IConsumerDefinition.ConsumerType { get; }
    protected void set_EndpointName(string value);
    [CompilerGeneratedAttribute]
public IEndpointDefinition`1<TConsumer> get_EndpointDefinition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EndpointDefinition(IEndpointDefinition`1<TConsumer> value);
    [NullableContextAttribute("2")]
private sealed virtual override IEndpointDefinition MassTransit.IConsumerDefinition.get_EndpointDefinition();
    public sealed virtual Nullable`1<int> get_ConcurrentMessageLimit();
    protected void set_ConcurrentMessageLimit(Nullable`1<int> value);
    private sealed virtual override void MassTransit.IConsumerDefinition<TConsumer>.Configure(IReceiveEndpointConfigurator endpointConfigurator, IConsumerConfigurator`1<TConsumer> consumerConfigurator, IRegistrationContext context);
    private sealed virtual override Type MassTransit.IConsumerDefinition.get_ConsumerType();
    private sealed virtual override string MassTransit.IConsumerDefinition.GetEndpointName(IEndpointNameFormatter formatter);
    protected void Endpoint(Action`1<IEndpointRegistrationConfigurator> configure);
    [ObsoleteAttribute("Use the IRegistrationContext overload instead. Visit https://masstransit.io/obsolete for details.")]
protected virtual void ConfigureConsumer(IReceiveEndpointConfigurator endpointConfigurator, IConsumerConfigurator`1<TConsumer> consumerConfigurator);
    protected virtual void ConfigureConsumer(IReceiveEndpointConfigurator endpointConfigurator, IConsumerConfigurator`1<TConsumer> consumerConfigurator, IRegistrationContext context);
}
[NullableContextAttribute("1")]
public interface MassTransit.ConsumeRetryContext {
    public int RetryAttempt { get; }
    public int RetryCount { get; }
    public abstract virtual int get_RetryAttempt();
    public abstract virtual int get_RetryCount();
    public abstract virtual TContext CreateNext(RetryContext retryContext);
    public abstract virtual Task NotifyPendingFaults();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.ConsumerException : MassTransitException {
    public ConsumerException(string message);
    public ConsumerException(string message, Exception innerException);
    protected ConsumerException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
public interface MassTransit.ConsumerFaultContext {
    public string MessageType { get; }
    public string ConsumerType { get; }
    public abstract virtual string get_MessageType();
    public abstract virtual string get_ConsumerType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.ConsumerMessageException : ConsumerException {
    public ConsumerMessageException(string message);
    public ConsumerMessageException(string message, Exception innerException);
    protected ConsumerMessageException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Context.MissingConsumeContext : object {
    [CompilerGeneratedAttribute]
private static ConsumeContext <Instance>k__BackingField;
    public static ConsumeContext Instance { get; }
    public CancellationToken CancellationToken { get; }
    public Nullable`1<Guid> MessageId { get; }
    public Nullable`1<Guid> RequestId { get; }
    public Nullable`1<Guid> CorrelationId { get; }
    public Nullable`1<Guid> ConversationId { get; }
    public Nullable`1<Guid> InitiatorId { get; }
    public Nullable`1<DateTime> ExpirationTime { get; }
    public Uri SourceAddress { get; }
    public Uri DestinationAddress { get; }
    public Uri ResponseAddress { get; }
    public Uri FaultAddress { get; }
    public Nullable`1<DateTime> SentTime { get; }
    public Headers Headers { get; }
    public HostInfo Host { get; }
    public ReceiveContext ReceiveContext { get; }
    public SerializerContext SerializerContext { get; }
    public Task ConsumeCompleted { get; }
    public IEnumerable`1<string> SupportedMessageTypes { get; }
    private static MissingConsumeContext();
    [CompilerGeneratedAttribute]
public static ConsumeContext get_Instance();
    public sealed virtual bool HasPayloadType(Type payloadType);
    public sealed virtual bool TryGetPayload(T& payload);
    public sealed virtual T GetOrAddPayload(PayloadFactory`1<T> payloadFactory);
    public sealed virtual T AddOrUpdatePayload(PayloadFactory`1<T> addFactory, UpdatePayloadFactory`1<T> updateFactory);
    public sealed virtual CancellationToken get_CancellationToken();
    public sealed virtual Nullable`1<Guid> get_MessageId();
    public sealed virtual Nullable`1<Guid> get_RequestId();
    public sealed virtual Nullable`1<Guid> get_CorrelationId();
    public sealed virtual Nullable`1<Guid> get_ConversationId();
    public sealed virtual Nullable`1<Guid> get_InitiatorId();
    public sealed virtual Nullable`1<DateTime> get_ExpirationTime();
    public sealed virtual Uri get_SourceAddress();
    public sealed virtual Uri get_DestinationAddress();
    public sealed virtual Uri get_ResponseAddress();
    public sealed virtual Uri get_FaultAddress();
    public sealed virtual Nullable`1<DateTime> get_SentTime();
    public sealed virtual Headers get_Headers();
    public sealed virtual HostInfo get_Host();
    public sealed virtual ConnectHandle ConnectPublishObserver(IPublishObserver observer);
    public sealed virtual Task Publish(T message, CancellationToken cancellationToken);
    public sealed virtual Task Publish(T message, IPipe`1<PublishContext`1<T>> publishPipe, CancellationToken cancellationToken);
    public sealed virtual Task Publish(T message, IPipe`1<PublishContext> publishPipe, CancellationToken cancellationToken);
    public sealed virtual Task Publish(object message, CancellationToken cancellationToken);
    public sealed virtual Task Publish(object message, IPipe`1<PublishContext> publishPipe, CancellationToken cancellationToken);
    public sealed virtual Task Publish(object message, Type messageType, CancellationToken cancellationToken);
    public sealed virtual Task Publish(object message, Type messageType, IPipe`1<PublishContext> publishPipe, CancellationToken cancellationToken);
    public sealed virtual Task Publish(object values, CancellationToken cancellationToken);
    public sealed virtual Task Publish(object values, IPipe`1<PublishContext`1<T>> publishPipe, CancellationToken cancellationToken);
    public sealed virtual Task Publish(object values, IPipe`1<PublishContext> publishPipe, CancellationToken cancellationToken);
    public sealed virtual ConnectHandle ConnectSendObserver(ISendObserver observer);
    public sealed virtual Task`1<ISendEndpoint> GetSendEndpoint(Uri address);
    public sealed virtual ReceiveContext get_ReceiveContext();
    public sealed virtual SerializerContext get_SerializerContext();
    public sealed virtual Task get_ConsumeCompleted();
    public sealed virtual IEnumerable`1<string> get_SupportedMessageTypes();
    public sealed virtual bool HasMessageType(Type messageType);
    public sealed virtual bool TryGetMessage(ConsumeContext`1& consumeContext);
    public sealed virtual void AddConsumeTask(Task task);
    public sealed virtual Task RespondAsync(T message);
    public sealed virtual Task RespondAsync(T message, IPipe`1<SendContext`1<T>> sendPipe);
    public sealed virtual Task RespondAsync(T message, IPipe`1<SendContext> sendPipe);
    public sealed virtual Task RespondAsync(object message);
    public sealed virtual Task RespondAsync(object message, Type messageType);
    public sealed virtual Task RespondAsync(object message, IPipe`1<SendContext> sendPipe);
    public sealed virtual Task RespondAsync(object message, Type messageType, IPipe`1<SendContext> sendPipe);
    public sealed virtual Task RespondAsync(object values);
    public sealed virtual Task RespondAsync(object values, IPipe`1<SendContext`1<T>> sendPipe);
    public sealed virtual Task RespondAsync(object values, IPipe`1<SendContext> sendPipe);
    public sealed virtual void Respond(T message);
    public sealed virtual Task NotifyConsumed(ConsumeContext`1<T> context, TimeSpan duration, string consumerType);
    public sealed virtual Task NotifyFaulted(ConsumeContext`1<T> context, TimeSpan duration, string consumerType, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Context.PendingFaultCollection : object {
    private List`1<IPendingFault> _pendingFaults;
    public void Add(ConsumeContext`1<T> context, TimeSpan elapsed, string consumerType, Exception exception);
    [AsyncStateMachineAttribute("MassTransit.Context.PendingFaultCollection/<Notify>d__3")]
public Task Notify(ConsumeContext consumeContext);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MassTransit.Context.PublishContextProxy : ProxyPipeContext {
    [NullableAttribute("1")]
private PublishContext _context;
    public Uri SourceAddress { get; public set; }
    public Uri DestinationAddress { get; public set; }
    public Uri ResponseAddress { get; public set; }
    public Uri FaultAddress { get; public set; }
    public Nullable`1<Guid> RequestId { get; public set; }
    public Nullable`1<Guid> MessageId { get; public set; }
    public Nullable`1<Guid> CorrelationId { get; public set; }
    public Nullable`1<Guid> ConversationId { get; public set; }
    public Nullable`1<Guid> InitiatorId { get; public set; }
    public Nullable`1<Guid> ScheduledMessageId { get; public set; }
    [NullableAttribute("1")]
public SendHeaders Headers { get; }
    public Nullable`1<TimeSpan> TimeToLive { get; public set; }
    public Nullable`1<DateTime> SentTime { get; }
    public ContentType ContentType { get; public set; }
    public bool Durable { get; public set; }
    public Nullable`1<TimeSpan> Delay { get; public set; }
    [NullableAttribute("1")]
public IMessageSerializer Serializer { get; public set; }
    [NullableAttribute("1")]
public ISerialization Serialization { get; public set; }
    [NullableAttribute("1")]
public String[] SupportedMessageTypes { get; public set; }
    public Nullable`1<long> BodyLength { get; }
    public bool Mandatory { get; public set; }
    [NullableContextAttribute("1")]
protected PublishContextProxy(PublishContext context);
    public sealed virtual Uri get_SourceAddress();
    public sealed virtual void set_SourceAddress(Uri value);
    public sealed virtual Uri get_DestinationAddress();
    public sealed virtual void set_DestinationAddress(Uri value);
    public sealed virtual Uri get_ResponseAddress();
    public sealed virtual void set_ResponseAddress(Uri value);
    public sealed virtual Uri get_FaultAddress();
    public sealed virtual void set_FaultAddress(Uri value);
    public sealed virtual Nullable`1<Guid> get_RequestId();
    public sealed virtual void set_RequestId(Nullable`1<Guid> value);
    public sealed virtual Nullable`1<Guid> get_MessageId();
    public sealed virtual void set_MessageId(Nullable`1<Guid> value);
    public sealed virtual Nullable`1<Guid> get_CorrelationId();
    public sealed virtual void set_CorrelationId(Nullable`1<Guid> value);
    public sealed virtual Nullable`1<Guid> get_ConversationId();
    public sealed virtual void set_ConversationId(Nullable`1<Guid> value);
    public sealed virtual Nullable`1<Guid> get_InitiatorId();
    public sealed virtual void set_InitiatorId(Nullable`1<Guid> value);
    public sealed virtual Nullable`1<Guid> get_ScheduledMessageId();
    public sealed virtual void set_ScheduledMessageId(Nullable`1<Guid> value);
    [NullableContextAttribute("1")]
public sealed virtual SendHeaders get_Headers();
    public sealed virtual Nullable`1<TimeSpan> get_TimeToLive();
    public sealed virtual void set_TimeToLive(Nullable`1<TimeSpan> value);
    public sealed virtual Nullable`1<DateTime> get_SentTime();
    public sealed virtual ContentType get_ContentType();
    public sealed virtual void set_ContentType(ContentType value);
    public sealed virtual bool get_Durable();
    public sealed virtual void set_Durable(bool value);
    public sealed virtual Nullable`1<TimeSpan> get_Delay();
    public sealed virtual void set_Delay(Nullable`1<TimeSpan> value);
    [NullableContextAttribute("1")]
public sealed virtual IMessageSerializer get_Serializer();
    [NullableContextAttribute("1")]
public sealed virtual void set_Serializer(IMessageSerializer value);
    [NullableContextAttribute("1")]
public sealed virtual ISerialization get_Serialization();
    [NullableContextAttribute("1")]
public sealed virtual void set_Serialization(ISerialization value);
    [NullableContextAttribute("1")]
public sealed virtual String[] get_SupportedMessageTypes();
    [NullableContextAttribute("1")]
public sealed virtual void set_SupportedMessageTypes(String[] value);
    public sealed virtual Nullable`1<long> get_BodyLength();
    [NullableContextAttribute("1")]
public sealed virtual SendContext`1<T> CreateProxy(T message);
    public sealed virtual bool get_Mandatory();
    public sealed virtual void set_Mandatory(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Context.PublishContextProxy`1 : PublishContextProxy {
    [CompilerGeneratedAttribute]
private TMessage <Message>k__BackingField;
    public TMessage Message { get; }
    public PublishContextProxy`1(PublishContext context, TMessage message);
    [CompilerGeneratedAttribute]
public sealed virtual TMessage get_Message();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class MassTransit.Context.PublishEndpointConverterCache : object {
    private ConcurrentDictionary`2<Type, Lazy`1<IPublishEndpointConverter>> _types;
    private IPublishEndpointConverter Item { get; }
    private IPublishEndpointConverter get_Item(Type type);
    public static Task Publish(IPublishEndpoint endpoint, object message, Type messageType, CancellationToken cancellationToken);
    public static Task Publish(IPublishEndpoint endpoint, object message, Type messageType, IPipe`1<PublishContext> pipe, CancellationToken cancellationToken);
    public static Task PublishInitializer(IPublishEndpoint endpoint, Type messageType, object values, CancellationToken cancellationToken);
    public static Task PublishInitializer(IPublishEndpoint endpoint, Type messageType, object values, IPipe`1<PublishContext> pipe, CancellationToken cancellationToken);
    private static Lazy`1<IPublishEndpointConverter> CreateTypeConverter(Type type);
    private static IPublishEndpointConverter CreateConverter(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class MassTransit.Context.ResponseEndpointConverterCache : object {
    private ConcurrentDictionary`2<Type, Lazy`1<IResponseEndpointConverter>> _types;
    private IResponseEndpointConverter Item { get; }
    private IResponseEndpointConverter get_Item(Type type);
    public static Task Respond(ConsumeContext consumeContext, object message, Type messageType);
    public static Task Respond(ConsumeContext consumeContext, object message, Type messageType, IPipe`1<SendContext> pipe);
    private static Lazy`1<IResponseEndpointConverter> CreateTypeConverter(Type type);
    private static IResponseEndpointConverter CreateConverter(Type type);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MassTransit.Context.SendContextProxy : ProxyPipeContext {
    [NullableAttribute("1")]
private SendContext _context;
    public Uri SourceAddress { get; public set; }
    public Uri DestinationAddress { get; public set; }
    public Uri ResponseAddress { get; public set; }
    public Uri FaultAddress { get; public set; }
    public Nullable`1<Guid> RequestId { get; public set; }
    public Nullable`1<Guid> MessageId { get; public set; }
    public Nullable`1<Guid> CorrelationId { get; public set; }
    public Nullable`1<Guid> ConversationId { get; public set; }
    public Nullable`1<Guid> InitiatorId { get; public set; }
    public Nullable`1<Guid> ScheduledMessageId { get; public set; }
    [NullableAttribute("1")]
public SendHeaders Headers { get; }
    public Nullable`1<TimeSpan> TimeToLive { get; public set; }
    public Nullable`1<DateTime> SentTime { get; }
    public ContentType ContentType { get; public set; }
    public bool Durable { get; public set; }
    public Nullable`1<TimeSpan> Delay { get; public set; }
    [NullableAttribute("1")]
public IMessageSerializer Serializer { get; public set; }
    [NullableAttribute("1")]
public ISerialization Serialization { get; public set; }
    [NullableAttribute("1")]
public String[] SupportedMessageTypes { get; public set; }
    public Nullable`1<long> BodyLength { get; }
    [NullableContextAttribute("1")]
protected SendContextProxy(SendContext context);
    public sealed virtual Uri get_SourceAddress();
    public sealed virtual void set_SourceAddress(Uri value);
    public sealed virtual Uri get_DestinationAddress();
    public sealed virtual void set_DestinationAddress(Uri value);
    public sealed virtual Uri get_ResponseAddress();
    public sealed virtual void set_ResponseAddress(Uri value);
    public sealed virtual Uri get_FaultAddress();
    public sealed virtual void set_FaultAddress(Uri value);
    public sealed virtual Nullable`1<Guid> get_RequestId();
    public sealed virtual void set_RequestId(Nullable`1<Guid> value);
    public sealed virtual Nullable`1<Guid> get_MessageId();
    public sealed virtual void set_MessageId(Nullable`1<Guid> value);
    public sealed virtual Nullable`1<Guid> get_CorrelationId();
    public sealed virtual void set_CorrelationId(Nullable`1<Guid> value);
    public sealed virtual Nullable`1<Guid> get_ConversationId();
    public sealed virtual void set_ConversationId(Nullable`1<Guid> value);
    public sealed virtual Nullable`1<Guid> get_InitiatorId();
    public sealed virtual void set_InitiatorId(Nullable`1<Guid> value);
    public sealed virtual Nullable`1<Guid> get_ScheduledMessageId();
    public sealed virtual void set_ScheduledMessageId(Nullable`1<Guid> value);
    [NullableContextAttribute("1")]
public sealed virtual SendHeaders get_Headers();
    public sealed virtual Nullable`1<TimeSpan> get_TimeToLive();
    public sealed virtual void set_TimeToLive(Nullable`1<TimeSpan> value);
    public sealed virtual Nullable`1<DateTime> get_SentTime();
    public sealed virtual ContentType get_ContentType();
    public sealed virtual void set_ContentType(ContentType value);
    public sealed virtual bool get_Durable();
    public sealed virtual void set_Durable(bool value);
    public sealed virtual Nullable`1<TimeSpan> get_Delay();
    public sealed virtual void set_Delay(Nullable`1<TimeSpan> value);
    [NullableContextAttribute("1")]
public sealed virtual IMessageSerializer get_Serializer();
    [NullableContextAttribute("1")]
public sealed virtual void set_Serializer(IMessageSerializer value);
    [NullableContextAttribute("1")]
public sealed virtual ISerialization get_Serialization();
    [NullableContextAttribute("1")]
public sealed virtual void set_Serialization(ISerialization value);
    [NullableContextAttribute("1")]
public sealed virtual String[] get_SupportedMessageTypes();
    [NullableContextAttribute("1")]
public sealed virtual void set_SupportedMessageTypes(String[] value);
    public sealed virtual Nullable`1<long> get_BodyLength();
    [NullableContextAttribute("1")]
public sealed virtual SendContext`1<T> CreateProxy(T message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Context.SendContextProxy`1 : SendContextProxy {
    [CompilerGeneratedAttribute]
private TMessage <Message>k__BackingField;
    public TMessage Message { get; }
    public SendContextProxy`1(SendContext context, TMessage message);
    [CompilerGeneratedAttribute]
public sealed virtual TMessage get_Message();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Context.SendContextScope : SendContextProxy {
    private PipeContext _context;
    [NullableAttribute("2")]
private IPayloadCache _payloadCache;
    public CancellationToken CancellationToken { get; }
    private IPayloadCache PayloadCache { get; }
    public SendContextScope(SendContext context);
    public SendContextScope(SendContext context, Object[] payloads);
    public virtual CancellationToken get_CancellationToken();
    private IPayloadCache get_PayloadCache();
    public virtual bool HasPayloadType(Type payloadType);
    public virtual bool TryGetPayload(T& payload);
    public virtual T GetOrAddPayload(PayloadFactory`1<T> payloadFactory);
    public virtual T AddOrUpdatePayload(PayloadFactory`1<T> addFactory, UpdatePayloadFactory`1<T> updateFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Context.SendContextScope`1 : SendContextScope {
    private SendContext`1<TMessage> _context;
    public TMessage Message { get; }
    public SendContextScope`1(SendContext`1<TMessage> context);
    public SendContextScope`1(SendContext`1<TMessage> context, Object[] payloads);
    public sealed virtual TMessage get_Message();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class MassTransit.Context.SendEndpointConverterCache : object {
    private ConcurrentDictionary`2<Type, Lazy`1<ISendEndpointConverter>> _types;
    private ISendEndpointConverter Item { get; }
    private ISendEndpointConverter get_Item(Type type);
    public static Task Send(ISendEndpoint endpoint, object message, Type messageType, CancellationToken cancellationToken);
    public static Task Send(ISendEndpoint endpoint, object message, Type messageType, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    public static Task SendInitializer(ISendEndpoint endpoint, Type messageType, object values, CancellationToken cancellationToken);
    public static Task SendInitializer(ISendEndpoint endpoint, Type messageType, object values, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    private static Lazy`1<ISendEndpointConverter> CreateTypeConverter(Type type);
    private static ISendEndpointConverter CreateConverter(Type type);
}
public interface MassTransit.Contracts.CircuitBreakerClosed {
}
[NullableContextAttribute("1")]
public interface MassTransit.Contracts.CircuitBreakerOpened {
    public Exception Exception { get; }
    public abstract virtual Exception get_Exception();
}
public interface MassTransit.Contracts.CommandContext {
    public DateTime Timestamp { get; }
    public abstract virtual DateTime get_Timestamp();
}
[NullableContextAttribute("1")]
public interface MassTransit.Contracts.CommandContext`1 {
    public T Command { get; }
    public abstract virtual T get_Command();
}
[NullableContextAttribute("1")]
public interface MassTransit.Contracts.ConcurrencyLimitUpdated {
    public DateTime Timestamp { get; }
    public string Id { get; }
    public int ConcurrencyLimit { get; }
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual string get_Id();
    public abstract virtual int get_ConcurrencyLimit();
}
public interface MassTransit.Contracts.EventContext {
    public DateTime Timestamp { get; }
    public abstract virtual DateTime get_Timestamp();
}
[NullableContextAttribute("1")]
public interface MassTransit.Contracts.EventContext`1 {
    public T Event { get; }
    public abstract virtual T get_Event();
}
public interface MassTransit.Contracts.JobService.AllocateJobSlot {
    public Guid JobTypeId { get; }
    public TimeSpan JobTimeout { get; }
    public Guid JobId { get; }
    public abstract virtual Guid get_JobTypeId();
    public abstract virtual TimeSpan get_JobTimeout();
    public abstract virtual Guid get_JobId();
}
[NullableContextAttribute("1")]
public interface MassTransit.Contracts.JobService.CancelJob {
    public Guid JobId { get; }
    public DateTime Timestamp { get; }
    public string Reason { get; }
    public abstract virtual Guid get_JobId();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual string get_Reason();
}
[NullableContextAttribute("1")]
[ConfigureConsumeTopologyAttribute("False")]
public interface MassTransit.Contracts.JobService.CompleteJob {
    public Guid JobId { get; }
    public DateTime Timestamp { get; }
    public TimeSpan Duration { get; }
    public IDictionary`2<string, object> Job { get; }
    public IDictionary`2<string, object> Result { get; }
    public Guid JobTypeId { get; }
    public abstract virtual Guid get_JobId();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual TimeSpan get_Duration();
    public abstract virtual IDictionary`2<string, object> get_Job();
    public abstract virtual IDictionary`2<string, object> get_Result();
    public abstract virtual Guid get_JobTypeId();
}
public enum MassTransit.Contracts.JobService.ConcurrentLimitKind : Enum {
    public int value__;
    public static ConcurrentLimitKind Configured;
    public static ConcurrentLimitKind Override;
    public static ConcurrentLimitKind Heartbeat;
    public static ConcurrentLimitKind Stopped;
}
[NullableContextAttribute("1")]
[ConfigureConsumeTopologyAttribute("False")]
public interface MassTransit.Contracts.JobService.FaultJob {
    public Guid JobId { get; }
    public Guid AttemptId { get; }
    public int RetryAttempt { get; }
    public Nullable`1<TimeSpan> Duration { get; }
    public ExceptionInfo Exceptions { get; }
    public IDictionary`2<string, object> Job { get; }
    public Guid JobTypeId { get; }
    public abstract virtual Guid get_JobId();
    public abstract virtual Guid get_AttemptId();
    public abstract virtual int get_RetryAttempt();
    public abstract virtual Nullable`1<TimeSpan> get_Duration();
    public abstract virtual ExceptionInfo get_Exceptions();
    public abstract virtual IDictionary`2<string, object> get_Job();
    public abstract virtual Guid get_JobTypeId();
}
[ConfigureConsumeTopologyAttribute("False")]
public interface MassTransit.Contracts.JobService.GetJobAttemptStatus {
    public Guid JobId { get; }
    public Guid AttemptId { get; }
    public abstract virtual Guid get_JobId();
    public abstract virtual Guid get_AttemptId();
}
public interface MassTransit.Contracts.JobService.GetJobState {
    public Guid JobId { get; }
    public abstract virtual Guid get_JobId();
}
public interface MassTransit.Contracts.JobService.JobAttemptCanceled {
    public Guid JobId { get; }
    public Guid AttemptId { get; }
    public int RetryAttempt { get; }
    public DateTime Timestamp { get; }
    public abstract virtual Guid get_JobId();
    public abstract virtual Guid get_AttemptId();
    public abstract virtual int get_RetryAttempt();
    public abstract virtual DateTime get_Timestamp();
}
public interface MassTransit.Contracts.JobService.JobAttemptCompleted {
    public Guid JobId { get; }
    public Guid AttemptId { get; }
    public int RetryAttempt { get; }
    public DateTime Timestamp { get; }
    public TimeSpan Duration { get; }
    public abstract virtual Guid get_JobId();
    public abstract virtual Guid get_AttemptId();
    public abstract virtual int get_RetryAttempt();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual TimeSpan get_Duration();
}
public interface MassTransit.Contracts.JobService.JobAttemptCreated {
    public Guid JobId { get; }
    public Guid AttemptId { get; }
    public int RetryAttempt { get; }
    public abstract virtual Guid get_JobId();
    public abstract virtual Guid get_AttemptId();
    public abstract virtual int get_RetryAttempt();
}
[NullableContextAttribute("1")]
public interface MassTransit.Contracts.JobService.JobAttemptFaulted {
    public Guid JobId { get; }
    public Guid AttemptId { get; }
    public int RetryAttempt { get; }
    public Nullable`1<TimeSpan> RetryDelay { get; }
    public DateTime Timestamp { get; }
    public ExceptionInfo Exceptions { get; }
    public abstract virtual Guid get_JobId();
    public abstract virtual Guid get_AttemptId();
    public abstract virtual int get_RetryAttempt();
    public abstract virtual Nullable`1<TimeSpan> get_RetryDelay();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual ExceptionInfo get_Exceptions();
}
[NullableContextAttribute("1")]
public interface MassTransit.Contracts.JobService.JobAttemptStarted {
    public Guid JobId { get; }
    public Guid AttemptId { get; }
    public int RetryAttempt { get; }
    public DateTime Timestamp { get; }
    public Uri InstanceAddress { get; }
    public abstract virtual Guid get_JobId();
    public abstract virtual Guid get_AttemptId();
    public abstract virtual int get_RetryAttempt();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual Uri get_InstanceAddress();
}
public interface MassTransit.Contracts.JobService.JobAttemptStatus {
    public Guid JobId { get; }
    public Guid AttemptId { get; }
    public DateTime Timestamp { get; }
    public JobStatus Status { get; }
    public abstract virtual Guid get_JobId();
    public abstract virtual Guid get_AttemptId();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual JobStatus get_Status();
}
public interface MassTransit.Contracts.JobService.JobCanceled {
    public Guid JobId { get; }
    public DateTime Timestamp { get; }
    public abstract virtual Guid get_JobId();
    public abstract virtual DateTime get_Timestamp();
}
[NullableContextAttribute("1")]
public interface MassTransit.Contracts.JobService.JobCompleted {
    public Guid JobId { get; }
    public DateTime Timestamp { get; }
    public TimeSpan Duration { get; }
    public IDictionary`2<string, object> Job { get; }
    public IDictionary`2<string, object> Result { get; }
    public abstract virtual Guid get_JobId();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual TimeSpan get_Duration();
    public abstract virtual IDictionary`2<string, object> get_Job();
    public abstract virtual IDictionary`2<string, object> get_Result();
}
[NullableContextAttribute("1")]
public interface MassTransit.Contracts.JobService.JobCompleted`1 {
    public Guid JobId { get; }
    public DateTime Timestamp { get; }
    public TimeSpan Duration { get; }
    public IDictionary`2<string, object> Job { get; }
    public IDictionary`2<string, object> Result { get; }
    public abstract virtual Guid get_JobId();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual TimeSpan get_Duration();
    public abstract virtual IDictionary`2<string, object> get_Job();
    public abstract virtual IDictionary`2<string, object> get_Result();
}
[NullableContextAttribute("1")]
public interface MassTransit.Contracts.JobService.JobFaulted {
    public Guid JobId { get; }
    public DateTime Timestamp { get; }
    public Nullable`1<TimeSpan> Duration { get; }
    public IDictionary`2<string, object> Job { get; }
    public ExceptionInfo Exceptions { get; }
    public abstract virtual Guid get_JobId();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual Nullable`1<TimeSpan> get_Duration();
    public abstract virtual IDictionary`2<string, object> get_Job();
    public abstract virtual ExceptionInfo get_Exceptions();
}
public interface MassTransit.Contracts.JobService.JobRetryDelayElapsed {
    public Guid JobId { get; }
    public abstract virtual Guid get_JobId();
}
[NullableContextAttribute("1")]
public interface MassTransit.Contracts.JobService.JobSlotAllocated {
    public Guid JobId { get; }
    public Uri InstanceAddress { get; }
    public abstract virtual Guid get_JobId();
    public abstract virtual Uri get_InstanceAddress();
}
public enum MassTransit.Contracts.JobService.JobSlotDisposition : Enum {
    public int value__;
    public static JobSlotDisposition Completed;
    public static JobSlotDisposition Faulted;
    public static JobSlotDisposition Canceled;
    public static JobSlotDisposition Suspect;
}
public interface MassTransit.Contracts.JobService.JobSlotReleased {
    public Guid JobTypeId { get; }
    public Guid JobId { get; }
    public JobSlotDisposition Disposition { get; }
    public abstract virtual Guid get_JobTypeId();
    public abstract virtual Guid get_JobId();
    public abstract virtual JobSlotDisposition get_Disposition();
}
public interface MassTransit.Contracts.JobService.JobSlotUnavailable {
    public Guid JobId { get; }
    public abstract virtual Guid get_JobId();
}
public interface MassTransit.Contracts.JobService.JobSlotWaitElapsed {
    public Guid JobId { get; }
    public abstract virtual Guid get_JobId();
}
public interface MassTransit.Contracts.JobService.JobStarted {
    public Guid JobId { get; }
    public Guid AttemptId { get; }
    public int RetryAttempt { get; }
    public DateTime Timestamp { get; }
    public abstract virtual Guid get_JobId();
    public abstract virtual Guid get_AttemptId();
    public abstract virtual int get_RetryAttempt();
    public abstract virtual DateTime get_Timestamp();
}
[NullableContextAttribute("1")]
public interface MassTransit.Contracts.JobService.JobStarted`1 {
    public Guid JobId { get; }
    public Guid AttemptId { get; }
    public int RetryAttempt { get; }
    public DateTime Timestamp { get; }
    public abstract virtual Guid get_JobId();
    public abstract virtual Guid get_AttemptId();
    public abstract virtual int get_RetryAttempt();
    public abstract virtual DateTime get_Timestamp();
}
[NullableContextAttribute("1")]
public interface MassTransit.Contracts.JobService.JobState {
    public Guid JobId { get; }
    public Nullable`1<DateTime> Submitted { get; }
    public Nullable`1<DateTime> Started { get; }
    public Nullable`1<DateTime> Completed { get; }
    public Nullable`1<DateTime> Faulted { get; }
    public string Reason { get; }
    public int LastRetryAttempt { get; }
    public string CurrentState { get; }
    public abstract virtual Guid get_JobId();
    public abstract virtual Nullable`1<DateTime> get_Submitted();
    public abstract virtual Nullable`1<DateTime> get_Started();
    public abstract virtual Nullable`1<DateTime> get_Completed();
    public abstract virtual Nullable`1<DateTime> get_Faulted();
    public abstract virtual string get_Reason();
    public abstract virtual int get_LastRetryAttempt();
    public abstract virtual string get_CurrentState();
}
public enum MassTransit.Contracts.JobService.JobStatus : Enum {
    public int value__;
    public static JobStatus Running;
    public static JobStatus Faulted;
    public static JobStatus Completed;
    public static JobStatus Canceled;
}
public interface MassTransit.Contracts.JobService.JobStatusCheckRequested {
    public Guid AttemptId { get; }
    public abstract virtual Guid get_AttemptId();
}
public interface MassTransit.Contracts.JobService.JobSubmissionAccepted {
    public Guid JobId { get; }
    public abstract virtual Guid get_JobId();
}
[NullableContextAttribute("1")]
public interface MassTransit.Contracts.JobService.JobSubmitted {
    public Guid JobId { get; }
    public Guid JobTypeId { get; }
    public DateTime Timestamp { get; }
    public TimeSpan JobTimeout { get; }
    public IDictionary`2<string, object> Job { get; }
    public abstract virtual Guid get_JobId();
    public abstract virtual Guid get_JobTypeId();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual TimeSpan get_JobTimeout();
    public abstract virtual IDictionary`2<string, object> get_Job();
}
public interface MassTransit.Contracts.JobService.RetryJob {
    public Guid JobId { get; }
    public abstract virtual Guid get_JobId();
}
[NullableContextAttribute("1")]
public interface MassTransit.Contracts.JobService.SetConcurrentJobLimit {
    public Guid JobTypeId { get; }
    public Uri InstanceAddress { get; }
    public int ConcurrentJobLimit { get; }
    public ConcurrentLimitKind Kind { get; }
    public Nullable`1<TimeSpan> Duration { get; }
    [NullableAttribute("2")]
public string JobTypeName { get; }
    public abstract virtual Guid get_JobTypeId();
    public abstract virtual Uri get_InstanceAddress();
    public abstract virtual int get_ConcurrentJobLimit();
    public abstract virtual ConcurrentLimitKind get_Kind();
    public abstract virtual Nullable`1<TimeSpan> get_Duration();
    [NullableContextAttribute("2")]
public abstract virtual string get_JobTypeName();
}
[NullableContextAttribute("1")]
[ConfigureConsumeTopologyAttribute("False")]
public interface MassTransit.Contracts.JobService.StartJob {
    public Guid JobId { get; }
    public Guid AttemptId { get; }
    public int RetryAttempt { get; }
    public IDictionary`2<string, object> Job { get; }
    public Guid JobTypeId { get; }
    public abstract virtual Guid get_JobId();
    public abstract virtual Guid get_AttemptId();
    public abstract virtual int get_RetryAttempt();
    public abstract virtual IDictionary`2<string, object> get_Job();
    public abstract virtual Guid get_JobTypeId();
}
[NullableContextAttribute("1")]
public interface MassTransit.Contracts.JobService.StartJobAttempt {
    public Guid JobId { get; }
    public Guid AttemptId { get; }
    public int RetryAttempt { get; }
    public Uri ServiceAddress { get; }
    public Uri InstanceAddress { get; }
    public IDictionary`2<string, object> Job { get; }
    public Guid JobTypeId { get; }
    public abstract virtual Guid get_JobId();
    public abstract virtual Guid get_AttemptId();
    public abstract virtual int get_RetryAttempt();
    public abstract virtual Uri get_ServiceAddress();
    public abstract virtual Uri get_InstanceAddress();
    public abstract virtual IDictionary`2<string, object> get_Job();
    public abstract virtual Guid get_JobTypeId();
}
[NullableContextAttribute("1")]
public interface MassTransit.Contracts.JobService.SubmitJob`1 {
    public Guid JobId { get; }
    public TJob Job { get; }
    public abstract virtual Guid get_JobId();
    public abstract virtual TJob get_Job();
}
[NullableContextAttribute("1")]
public interface MassTransit.Contracts.RequestCompleted {
    public Guid CorrelationId { get; }
    public DateTime Timestamp { get; }
    public String[] PayloadType { get; }
    public object Payload { get; }
    public abstract virtual Guid get_CorrelationId();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual String[] get_PayloadType();
    public abstract virtual object get_Payload();
}
[NullableContextAttribute("1")]
public interface MassTransit.Contracts.RequestFaulted {
    public Guid CorrelationId { get; }
    public String[] PayloadType { get; }
    public object Payload { get; }
    public abstract virtual Guid get_CorrelationId();
    public abstract virtual String[] get_PayloadType();
    public abstract virtual object get_Payload();
}
[NullableContextAttribute("1")]
public interface MassTransit.Contracts.RequestStarted {
    public Guid CorrelationId { get; }
    public Guid RequestId { get; }
    public Uri ResponseAddress { get; }
    public Uri FaultAddress { get; }
    public Nullable`1<DateTime> ExpirationTime { get; }
    public String[] PayloadType { get; }
    public object Payload { get; }
    public abstract virtual Guid get_CorrelationId();
    public abstract virtual Guid get_RequestId();
    public abstract virtual Uri get_ResponseAddress();
    public abstract virtual Uri get_FaultAddress();
    public abstract virtual Nullable`1<DateTime> get_ExpirationTime();
    public abstract virtual String[] get_PayloadType();
    public abstract virtual object get_Payload();
}
[NullableContextAttribute("2")]
public interface MassTransit.Contracts.RequestTimeoutExpired`1 {
    public Guid CorrelationId { get; }
    public DateTime Timestamp { get; }
    public DateTime ExpirationTime { get; }
    public Guid RequestId { get; }
    public TRequest Message { get; }
    public abstract virtual Guid get_CorrelationId();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual DateTime get_ExpirationTime();
    public abstract virtual Guid get_RequestId();
    public abstract virtual TRequest get_Message();
}
[NullableContextAttribute("2")]
public interface MassTransit.Contracts.SetConcurrencyLimit {
    public Nullable`1<DateTime> Timestamp { get; }
    public string Id { get; }
    public int ConcurrencyLimit { get; }
    public abstract virtual Nullable`1<DateTime> get_Timestamp();
    public abstract virtual string get_Id();
    public abstract virtual int get_ConcurrencyLimit();
}
public interface MassTransit.Contracts.SetRateLimit {
    public int RateLimit { get; }
    public abstract virtual int get_RateLimit();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.ConventionException : MassTransitException {
    public ConventionException(string message);
    public ConventionException(string message, Exception innerException);
    protected ConventionException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
public interface MassTransit.CorrelatedBy`1 {
    public TKey CorrelationId { get; }
    public abstract virtual TKey get_CorrelationId();
}
[NullableContextAttribute("1")]
public interface MassTransit.Courier.Contracts.Activity {
    public string Name { get; }
    public Uri Address { get; }
    public IDictionary`2<string, object> Arguments { get; }
    public abstract virtual string get_Name();
    public abstract virtual Uri get_Address();
    public abstract virtual IDictionary`2<string, object> get_Arguments();
}
[NullableContextAttribute("1")]
public interface MassTransit.Courier.Contracts.ActivityException {
    public Guid ExecutionId { get; }
    public DateTime Timestamp { get; }
    public TimeSpan Elapsed { get; }
    public string Name { get; }
    public HostInfo Host { get; }
    public ExceptionInfo ExceptionInfo { get; }
    public abstract virtual Guid get_ExecutionId();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual TimeSpan get_Elapsed();
    public abstract virtual string get_Name();
    public abstract virtual HostInfo get_Host();
    public abstract virtual ExceptionInfo get_ExceptionInfo();
}
[NullableContextAttribute("1")]
public interface MassTransit.Courier.Contracts.ActivityLog {
    public Guid ExecutionId { get; }
    public string Name { get; }
    public DateTime Timestamp { get; }
    public TimeSpan Duration { get; }
    public HostInfo Host { get; }
    public abstract virtual Guid get_ExecutionId();
    public abstract virtual string get_Name();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual TimeSpan get_Duration();
    public abstract virtual HostInfo get_Host();
}
[NullableContextAttribute("1")]
public interface MassTransit.Courier.Contracts.CompensateLog {
    public Guid ExecutionId { get; }
    public Uri Address { get; }
    public IDictionary`2<string, object> Data { get; }
    public abstract virtual Guid get_ExecutionId();
    public abstract virtual Uri get_Address();
    public abstract virtual IDictionary`2<string, object> get_Data();
}
[NullableContextAttribute("1")]
public interface MassTransit.Courier.Contracts.RoutingSlip {
    public Guid TrackingNumber { get; }
    public DateTime CreateTimestamp { get; }
    public IList`1<Activity> Itinerary { get; }
    public IList`1<ActivityLog> ActivityLogs { get; }
    public IList`1<CompensateLog> CompensateLogs { get; }
    public IDictionary`2<string, object> Variables { get; }
    public IList`1<ActivityException> ActivityExceptions { get; }
    public IList`1<Subscription> Subscriptions { get; }
    public abstract virtual Guid get_TrackingNumber();
    public abstract virtual DateTime get_CreateTimestamp();
    public abstract virtual IList`1<Activity> get_Itinerary();
    public abstract virtual IList`1<ActivityLog> get_ActivityLogs();
    public abstract virtual IList`1<CompensateLog> get_CompensateLogs();
    public abstract virtual IDictionary`2<string, object> get_Variables();
    public abstract virtual IList`1<ActivityException> get_ActivityExceptions();
    public abstract virtual IList`1<Subscription> get_Subscriptions();
}
[NullableContextAttribute("1")]
public interface MassTransit.Courier.Contracts.RoutingSlipActivityCompensated {
    public Guid TrackingNumber { get; }
    public Guid ExecutionId { get; }
    public DateTime Timestamp { get; }
    public TimeSpan Duration { get; }
    public string ActivityName { get; }
    public HostInfo Host { get; }
    public IDictionary`2<string, object> Data { get; }
    public IDictionary`2<string, object> Variables { get; }
    public abstract virtual Guid get_TrackingNumber();
    public abstract virtual Guid get_ExecutionId();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual TimeSpan get_Duration();
    public abstract virtual string get_ActivityName();
    public abstract virtual HostInfo get_Host();
    public abstract virtual IDictionary`2<string, object> get_Data();
    public abstract virtual IDictionary`2<string, object> get_Variables();
}
[NullableContextAttribute("1")]
public interface MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed {
    public Guid TrackingNumber { get; }
    public Guid ExecutionId { get; }
    public DateTime Timestamp { get; }
    public TimeSpan Duration { get; }
    public HostInfo Host { get; }
    public string ActivityName { get; }
    public IDictionary`2<string, object> Data { get; }
    public IDictionary`2<string, object> Variables { get; }
    public ExceptionInfo ExceptionInfo { get; }
    public abstract virtual Guid get_TrackingNumber();
    public abstract virtual Guid get_ExecutionId();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual TimeSpan get_Duration();
    public abstract virtual HostInfo get_Host();
    public abstract virtual string get_ActivityName();
    public abstract virtual IDictionary`2<string, object> get_Data();
    public abstract virtual IDictionary`2<string, object> get_Variables();
    public abstract virtual ExceptionInfo get_ExceptionInfo();
}
[NullableContextAttribute("1")]
public interface MassTransit.Courier.Contracts.RoutingSlipActivityCompleted {
    public Guid TrackingNumber { get; }
    public Guid ExecutionId { get; }
    public DateTime Timestamp { get; }
    public TimeSpan Duration { get; }
    public string ActivityName { get; }
    public HostInfo Host { get; }
    public IDictionary`2<string, object> Arguments { get; }
    public IDictionary`2<string, object> Data { get; }
    public IDictionary`2<string, object> Variables { get; }
    public abstract virtual Guid get_TrackingNumber();
    public abstract virtual Guid get_ExecutionId();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual TimeSpan get_Duration();
    public abstract virtual string get_ActivityName();
    public abstract virtual HostInfo get_Host();
    public abstract virtual IDictionary`2<string, object> get_Arguments();
    public abstract virtual IDictionary`2<string, object> get_Data();
    public abstract virtual IDictionary`2<string, object> get_Variables();
}
[NullableContextAttribute("1")]
public interface MassTransit.Courier.Contracts.RoutingSlipActivityFaulted {
    public Guid TrackingNumber { get; }
    public Guid ExecutionId { get; }
    public DateTime Timestamp { get; }
    public TimeSpan Duration { get; }
    public string ActivityName { get; }
    public HostInfo Host { get; }
    public ExceptionInfo ExceptionInfo { get; }
    public IDictionary`2<string, object> Arguments { get; }
    public IDictionary`2<string, object> Variables { get; }
    public abstract virtual Guid get_TrackingNumber();
    public abstract virtual Guid get_ExecutionId();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual TimeSpan get_Duration();
    public abstract virtual string get_ActivityName();
    public abstract virtual HostInfo get_Host();
    public abstract virtual ExceptionInfo get_ExceptionInfo();
    public abstract virtual IDictionary`2<string, object> get_Arguments();
    public abstract virtual IDictionary`2<string, object> get_Variables();
}
[NullableContextAttribute("1")]
public interface MassTransit.Courier.Contracts.RoutingSlipCompensationFailed {
    public Guid TrackingNumber { get; }
    public DateTime Timestamp { get; }
    public TimeSpan Duration { get; }
    public HostInfo Host { get; }
    public ExceptionInfo ExceptionInfo { get; }
    public IDictionary`2<string, object> Variables { get; }
    public abstract virtual Guid get_TrackingNumber();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual TimeSpan get_Duration();
    public abstract virtual HostInfo get_Host();
    public abstract virtual ExceptionInfo get_ExceptionInfo();
    public abstract virtual IDictionary`2<string, object> get_Variables();
}
[NullableContextAttribute("1")]
public interface MassTransit.Courier.Contracts.RoutingSlipCompleted {
    public Guid TrackingNumber { get; }
    public DateTime Timestamp { get; }
    public TimeSpan Duration { get; }
    public IDictionary`2<string, object> Variables { get; }
    public abstract virtual Guid get_TrackingNumber();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual TimeSpan get_Duration();
    public abstract virtual IDictionary`2<string, object> get_Variables();
}
[FlagsAttribute]
public enum MassTransit.Courier.Contracts.RoutingSlipEventContents : Enum {
    public int value__;
    public static RoutingSlipEventContents All;
    public static RoutingSlipEventContents None;
    public static RoutingSlipEventContents Variables;
    public static RoutingSlipEventContents Arguments;
    public static RoutingSlipEventContents Data;
    public static RoutingSlipEventContents Itinerary;
    public static RoutingSlipEventContents SkipEncrypted;
}
[FlagsAttribute]
public enum MassTransit.Courier.Contracts.RoutingSlipEvents : Enum {
    public int value__;
    public static RoutingSlipEvents All;
    public static RoutingSlipEvents Completed;
    public static RoutingSlipEvents Faulted;
    public static RoutingSlipEvents CompensationFailed;
    public static RoutingSlipEvents Terminated;
    public static RoutingSlipEvents Revised;
    public static RoutingSlipEvents ActivityCompleted;
    public static RoutingSlipEvents ActivityFaulted;
    public static RoutingSlipEvents ActivityCompensated;
    public static RoutingSlipEvents ActivityCompensationFailed;
    public static RoutingSlipEvents EventMask;
    public static RoutingSlipEvents Supplemental;
}
[NullableContextAttribute("1")]
public interface MassTransit.Courier.Contracts.RoutingSlipFaulted {
    public Guid TrackingNumber { get; }
    public DateTime Timestamp { get; }
    public TimeSpan Duration { get; }
    public ActivityException[] ActivityExceptions { get; }
    public IDictionary`2<string, object> Variables { get; }
    public abstract virtual Guid get_TrackingNumber();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual TimeSpan get_Duration();
    public abstract virtual ActivityException[] get_ActivityExceptions();
    public abstract virtual IDictionary`2<string, object> get_Variables();
}
[NullableContextAttribute("1")]
public interface MassTransit.Courier.Contracts.RoutingSlipRevised {
    public Guid TrackingNumber { get; }
    public Guid ExecutionId { get; }
    public DateTime Timestamp { get; }
    public TimeSpan Duration { get; }
    public string ActivityName { get; }
    public HostInfo Host { get; }
    public IDictionary`2<string, object> Variables { get; }
    public Activity[] Itinerary { get; }
    public Activity[] DiscardedItinerary { get; }
    public abstract virtual Guid get_TrackingNumber();
    public abstract virtual Guid get_ExecutionId();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual TimeSpan get_Duration();
    public abstract virtual string get_ActivityName();
    public abstract virtual HostInfo get_Host();
    public abstract virtual IDictionary`2<string, object> get_Variables();
    public abstract virtual Activity[] get_Itinerary();
    public abstract virtual Activity[] get_DiscardedItinerary();
}
[NullableContextAttribute("1")]
public interface MassTransit.Courier.Contracts.RoutingSlipTerminated {
    public Guid TrackingNumber { get; }
    public Guid ExecutionId { get; }
    public DateTime Timestamp { get; }
    public TimeSpan Duration { get; }
    public string ActivityName { get; }
    public HostInfo Host { get; }
    public IDictionary`2<string, object> Variables { get; }
    public Activity[] DiscardedItinerary { get; }
    public abstract virtual Guid get_TrackingNumber();
    public abstract virtual Guid get_ExecutionId();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual TimeSpan get_Duration();
    public abstract virtual string get_ActivityName();
    public abstract virtual HostInfo get_Host();
    public abstract virtual IDictionary`2<string, object> get_Variables();
    public abstract virtual Activity[] get_DiscardedItinerary();
}
[NullableContextAttribute("2")]
public interface MassTransit.Courier.Contracts.Subscription {
    [NullableAttribute("1")]
public Uri Address { get; }
    public RoutingSlipEvents Events { get; }
    public RoutingSlipEventContents Include { get; }
    public string ActivityName { get; }
    public MessageEnvelope Message { get; }
    [NullableContextAttribute("1")]
public abstract virtual Uri get_Address();
    public abstract virtual RoutingSlipEvents get_Events();
    public abstract virtual RoutingSlipEventContents get_Include();
    public abstract virtual string get_ActivityName();
    public abstract virtual MessageEnvelope get_Message();
}
[NullableContextAttribute("1")]
public interface MassTransit.Courier.IRoutingSlipEventPublisher {
    public abstract virtual Task PublishRoutingSlipCompleted(DateTime timestamp, TimeSpan duration, IDictionary`2<string, object> variables);
    public abstract virtual Task PublishRoutingSlipFaulted(DateTime timestamp, TimeSpan duration, IDictionary`2<string, object> variables, ActivityException[] exceptions);
    public abstract virtual Task PublishRoutingSlipActivityCompleted(string activityName, Guid executionId, DateTime timestamp, TimeSpan duration, IDictionary`2<string, object> variables, IDictionary`2<string, object> arguments, IDictionary`2<string, object> data);
    public abstract virtual Task PublishRoutingSlipActivityFaulted(string activityName, Guid executionId, DateTime timestamp, TimeSpan duration, ExceptionInfo exceptionInfo, IDictionary`2<string, object> variables, IDictionary`2<string, object> arguments);
    public abstract virtual Task PublishRoutingSlipActivityCompensationFailed(string activityName, Guid executionId, DateTime timestamp, TimeSpan duration, DateTime failureTimestamp, TimeSpan routingSlipDuration, ExceptionInfo exceptionInfo, IDictionary`2<string, object> variables, IDictionary`2<string, object> data);
    public abstract virtual Task PublishRoutingSlipActivityCompensated(string activityName, Guid executionId, DateTime timestamp, TimeSpan duration, IDictionary`2<string, object> variables, IDictionary`2<string, object> data);
    public abstract virtual Task PublishRoutingSlipRevised(string activityName, Guid executionId, DateTime timestamp, TimeSpan duration, IDictionary`2<string, object> variables, IList`1<Activity> itinerary, IList`1<Activity> previousItinerary);
    public abstract virtual Task PublishRoutingSlipTerminated(string activityName, Guid executionId, DateTime timestamp, TimeSpan duration, IDictionary`2<string, object> variables, IList`1<Activity> previousItinerary);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Courier.Messages.RoutingSlipActivity : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Arguments>k__BackingField;
    public string Name { get; public set; }
    public Uri Address { get; public set; }
    public IDictionary`2<string, object> Arguments { get; public set; }
    public RoutingSlipActivity(string name, Uri address, IDictionary`2<string, object> arguments);
    public RoutingSlipActivity(Activity activity);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(IDictionary`2<string, object> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Courier.Messages.RoutingSlipActivityCompensatedMessage : object {
    [CompilerGeneratedAttribute]
private Guid <ExecutionId>k__BackingField;
    [CompilerGeneratedAttribute]
private HostInfo <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TrackingNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    public Guid ExecutionId { get; public set; }
    public HostInfo Host { get; public set; }
    public IDictionary`2<string, object> Data { get; public set; }
    public IDictionary`2<string, object> Variables { get; public set; }
    public TimeSpan Duration { get; public set; }
    public string ActivityName { get; public set; }
    public Guid TrackingNumber { get; public set; }
    public DateTime Timestamp { get; public set; }
    public RoutingSlipActivityCompensatedMessage(HostInfo host, Guid trackingNumber, string activityName, Guid executionId, DateTime timestamp, TimeSpan duration, IDictionary`2<string, object> variables, IDictionary`2<string, object> data);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_ExecutionId();
    [CompilerGeneratedAttribute]
public void set_ExecutionId(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual HostInfo get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(HostInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ActivityName();
    [CompilerGeneratedAttribute]
public void set_ActivityName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_TrackingNumber();
    [CompilerGeneratedAttribute]
public void set_TrackingNumber(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Courier.Messages.RoutingSlipActivityCompensationFailedMessage : object {
    [CompilerGeneratedAttribute]
private Guid <TrackingNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ExecutionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionInfo <ExceptionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private HostInfo <Host>k__BackingField;
    public Guid TrackingNumber { get; public set; }
    public DateTime Timestamp { get; public set; }
    public Guid ExecutionId { get; public set; }
    public string ActivityName { get; public set; }
    public IDictionary`2<string, object> Data { get; public set; }
    public ExceptionInfo ExceptionInfo { get; public set; }
    public IDictionary`2<string, object> Variables { get; public set; }
    public TimeSpan Duration { get; public set; }
    public HostInfo Host { get; public set; }
    public RoutingSlipActivityCompensationFailedMessage(HostInfo host, Guid trackingNumber, string activityName, Guid executionId, DateTime timestamp, TimeSpan duration, ExceptionInfo exceptionInfo, IDictionary`2<string, object> variables, IDictionary`2<string, object> data);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_TrackingNumber();
    [CompilerGeneratedAttribute]
public void set_TrackingNumber(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_ExecutionId();
    [CompilerGeneratedAttribute]
public void set_ExecutionId(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ActivityName();
    [CompilerGeneratedAttribute]
public void set_ActivityName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual ExceptionInfo get_ExceptionInfo();
    [CompilerGeneratedAttribute]
public void set_ExceptionInfo(ExceptionInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual HostInfo get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(HostInfo value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Courier.Messages.RoutingSlipActivityCompletedMessage : object {
    [CompilerGeneratedAttribute]
private Guid <TrackingNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ExecutionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private HostInfo <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Variables>k__BackingField;
    public Guid TrackingNumber { get; public set; }
    public DateTime Timestamp { get; public set; }
    public TimeSpan Duration { get; public set; }
    public Guid ExecutionId { get; public set; }
    public string ActivityName { get; public set; }
    public HostInfo Host { get; public set; }
    public IDictionary`2<string, object> Arguments { get; public set; }
    public IDictionary`2<string, object> Data { get; public set; }
    public IDictionary`2<string, object> Variables { get; public set; }
    public RoutingSlipActivityCompletedMessage(HostInfo host, Guid trackingNumber, string activityName, Guid executionId, DateTime timestamp, TimeSpan duration, IDictionary`2<string, object> variables, IDictionary`2<string, object> arguments, IDictionary`2<string, object> data);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_TrackingNumber();
    [CompilerGeneratedAttribute]
public void set_TrackingNumber(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_ExecutionId();
    [CompilerGeneratedAttribute]
public void set_ExecutionId(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ActivityName();
    [CompilerGeneratedAttribute]
public void set_ActivityName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual HostInfo get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(HostInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(IDictionary`2<string, object> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Courier.Messages.RoutingSlipActivityException : object {
    [CompilerGeneratedAttribute]
private Guid <ExecutionId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Elapsed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private HostInfo <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionInfo <ExceptionInfo>k__BackingField;
    public Guid ExecutionId { get; public set; }
    public DateTime Timestamp { get; public set; }
    public TimeSpan Elapsed { get; public set; }
    public string Name { get; public set; }
    public HostInfo Host { get; public set; }
    public ExceptionInfo ExceptionInfo { get; public set; }
    public RoutingSlipActivityException(string activityName, HostInfo host, Guid executionId, DateTime timestamp, TimeSpan elapsed, ExceptionInfo exceptionInfo);
    public RoutingSlipActivityException(ActivityException activityException);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_ExecutionId();
    [CompilerGeneratedAttribute]
public void set_ExecutionId(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Elapsed();
    [CompilerGeneratedAttribute]
public void set_Elapsed(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual HostInfo get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(HostInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual ExceptionInfo get_ExceptionInfo();
    [CompilerGeneratedAttribute]
public void set_ExceptionInfo(ExceptionInfo value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Courier.Messages.RoutingSlipActivityFaultedMessage : object {
    [CompilerGeneratedAttribute]
private Guid <TrackingNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private HostInfo <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ExecutionId>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionInfo <ExceptionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Variables>k__BackingField;
    public Guid TrackingNumber { get; public set; }
    public DateTime Timestamp { get; public set; }
    public TimeSpan Duration { get; public set; }
    public string ActivityName { get; public set; }
    public HostInfo Host { get; public set; }
    public Guid ExecutionId { get; public set; }
    public ExceptionInfo ExceptionInfo { get; public set; }
    public IDictionary`2<string, object> Arguments { get; public set; }
    public IDictionary`2<string, object> Variables { get; public set; }
    public RoutingSlipActivityFaultedMessage(HostInfo host, Guid trackingNumber, string activityName, Guid executionId, DateTime timestamp, TimeSpan duration, ExceptionInfo exceptionInfo, IDictionary`2<string, object> variables, IDictionary`2<string, object> arguments);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_TrackingNumber();
    [CompilerGeneratedAttribute]
public void set_TrackingNumber(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ActivityName();
    [CompilerGeneratedAttribute]
public void set_ActivityName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual HostInfo get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(HostInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_ExecutionId();
    [CompilerGeneratedAttribute]
public void set_ExecutionId(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual ExceptionInfo get_ExceptionInfo();
    [CompilerGeneratedAttribute]
public void set_ExceptionInfo(ExceptionInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(IDictionary`2<string, object> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Courier.Messages.RoutingSlipActivityLog : object {
    [CompilerGeneratedAttribute]
private Guid <ExecutionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private HostInfo <Host>k__BackingField;
    public Guid ExecutionId { get; public set; }
    public string Name { get; public set; }
    public DateTime Timestamp { get; public set; }
    public TimeSpan Duration { get; public set; }
    public HostInfo Host { get; public set; }
    public RoutingSlipActivityLog(HostInfo host, Guid executionId, string name, DateTime timestamp, TimeSpan duration);
    public RoutingSlipActivityLog(ActivityLog activityLog);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_ExecutionId();
    [CompilerGeneratedAttribute]
public void set_ExecutionId(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual HostInfo get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(HostInfo value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Courier.Messages.RoutingSlipCompensateLog : object {
    [CompilerGeneratedAttribute]
private Guid <ExecutionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Data>k__BackingField;
    public Guid ExecutionId { get; public set; }
    public Uri Address { get; public set; }
    public IDictionary`2<string, object> Data { get; public set; }
    public RoutingSlipCompensateLog(Guid executionId, Uri address, IDictionary`2<string, object> data);
    public RoutingSlipCompensateLog(CompensateLog compensateLog);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_ExecutionId();
    [CompilerGeneratedAttribute]
public void set_ExecutionId(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(IDictionary`2<string, object> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Courier.Messages.RoutingSlipCompensationFailedMessage : object {
    [CompilerGeneratedAttribute]
private Guid <TrackingNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionInfo <ExceptionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
private HostInfo <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    public Guid TrackingNumber { get; public set; }
    public ExceptionInfo ExceptionInfo { get; public set; }
    public IDictionary`2<string, object> Variables { get; public set; }
    public HostInfo Host { get; public set; }
    public DateTime Timestamp { get; public set; }
    public TimeSpan Duration { get; public set; }
    public RoutingSlipCompensationFailedMessage(HostInfo host, Guid trackingNumber, DateTime failureTimestamp, TimeSpan routingSlipDuration, ExceptionInfo exceptionInfo, IDictionary`2<string, object> variables);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_TrackingNumber();
    [CompilerGeneratedAttribute]
public void set_TrackingNumber(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual ExceptionInfo get_ExceptionInfo();
    [CompilerGeneratedAttribute]
public void set_ExceptionInfo(ExceptionInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual HostInfo get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(HostInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Courier.Messages.RoutingSlipCompletedMessage : object {
    [CompilerGeneratedAttribute]
private Guid <TrackingNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Variables>k__BackingField;
    public Guid TrackingNumber { get; public set; }
    public DateTime Timestamp { get; public set; }
    public TimeSpan Duration { get; public set; }
    public IDictionary`2<string, object> Variables { get; public set; }
    public RoutingSlipCompletedMessage(Guid trackingNumber, DateTime timestamp, TimeSpan duration, IDictionary`2<string, object> variables);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_TrackingNumber();
    [CompilerGeneratedAttribute]
public void set_TrackingNumber(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(IDictionary`2<string, object> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Courier.Messages.RoutingSlipFaultedMessage : object {
    [CompilerGeneratedAttribute]
private Guid <TrackingNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private ActivityException[] <ActivityExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Variables>k__BackingField;
    public Guid TrackingNumber { get; public set; }
    public DateTime Timestamp { get; public set; }
    public TimeSpan Duration { get; public set; }
    public ActivityException[] ActivityExceptions { get; public set; }
    public IDictionary`2<string, object> Variables { get; public set; }
    public RoutingSlipFaultedMessage(Guid trackingNumber, DateTime timestamp, TimeSpan duration, IEnumerable`1<ActivityException> activityExceptions, IDictionary`2<string, object> variables);
    public RoutingSlipFaultedMessage(Guid trackingNumber, DateTime timestamp, TimeSpan duration, ActivityException activityException);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_TrackingNumber();
    [CompilerGeneratedAttribute]
public void set_TrackingNumber(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual ActivityException[] get_ActivityExceptions();
    [CompilerGeneratedAttribute]
public void set_ActivityExceptions(ActivityException[] value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(IDictionary`2<string, object> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Courier.Messages.RoutingSlipRevisedMessage : object {
    [CompilerGeneratedAttribute]
private Guid <TrackingNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ExecutionId>k__BackingField;
    [CompilerGeneratedAttribute]
private HostInfo <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
private Activity[] <Itinerary>k__BackingField;
    [CompilerGeneratedAttribute]
private Activity[] <DiscardedItinerary>k__BackingField;
    public Guid TrackingNumber { get; public set; }
    public DateTime Timestamp { get; public set; }
    public TimeSpan Duration { get; public set; }
    public string ActivityName { get; public set; }
    public Guid ExecutionId { get; public set; }
    public HostInfo Host { get; public set; }
    public IDictionary`2<string, object> Variables { get; public set; }
    public Activity[] Itinerary { get; public set; }
    public Activity[] DiscardedItinerary { get; public set; }
    public RoutingSlipRevisedMessage(HostInfo host, Guid trackingNumber, string activityName, Guid executionId, DateTime timestamp, TimeSpan duration, IDictionary`2<string, object> variables, IEnumerable`1<Activity> itinerary, IEnumerable`1<Activity> discardedItinerary);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_TrackingNumber();
    [CompilerGeneratedAttribute]
public void set_TrackingNumber(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ActivityName();
    [CompilerGeneratedAttribute]
public void set_ActivityName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_ExecutionId();
    [CompilerGeneratedAttribute]
public void set_ExecutionId(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual HostInfo get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(HostInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual Activity[] get_Itinerary();
    [CompilerGeneratedAttribute]
public void set_Itinerary(Activity[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Activity[] get_DiscardedItinerary();
    [CompilerGeneratedAttribute]
public void set_DiscardedItinerary(Activity[] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Courier.Messages.RoutingSlipRoutingSlip : object {
    [CompilerGeneratedAttribute]
private Guid <TrackingNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreateTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Activity> <Itinerary>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ActivityLog> <ActivityLogs>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<CompensateLog> <CompensateLogs>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ActivityException> <ActivityExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Subscription> <Subscriptions>k__BackingField;
    public Guid TrackingNumber { get; public set; }
    public DateTime CreateTimestamp { get; public set; }
    public IList`1<Activity> Itinerary { get; public set; }
    public IList`1<ActivityLog> ActivityLogs { get; public set; }
    public IList`1<CompensateLog> CompensateLogs { get; public set; }
    public IDictionary`2<string, object> Variables { get; public set; }
    public IList`1<ActivityException> ActivityExceptions { get; public set; }
    public IList`1<Subscription> Subscriptions { get; public set; }
    public RoutingSlipRoutingSlip(Guid trackingNumber, DateTime createTimestamp, IEnumerable`1<Activity> activities, IEnumerable`1<ActivityLog> activityLogs, IEnumerable`1<CompensateLog> compensateLogs, IEnumerable`1<ActivityException> exceptions, IDictionary`2<string, object> variables, IEnumerable`1<Subscription> subscriptions);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_TrackingNumber();
    [CompilerGeneratedAttribute]
public void set_TrackingNumber(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_CreateTimestamp();
    [CompilerGeneratedAttribute]
public void set_CreateTimestamp(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<Activity> get_Itinerary();
    [CompilerGeneratedAttribute]
public void set_Itinerary(IList`1<Activity> value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<ActivityLog> get_ActivityLogs();
    [CompilerGeneratedAttribute]
public void set_ActivityLogs(IList`1<ActivityLog> value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<CompensateLog> get_CompensateLogs();
    [CompilerGeneratedAttribute]
public void set_CompensateLogs(IList`1<CompensateLog> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<ActivityException> get_ActivityExceptions();
    [CompilerGeneratedAttribute]
public void set_ActivityExceptions(IList`1<ActivityException> value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<Subscription> get_Subscriptions();
    [CompilerGeneratedAttribute]
public void set_Subscriptions(IList`1<Subscription> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MassTransit.Courier.Messages.RoutingSlipSubscription : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Uri <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private RoutingSlipEvents <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private RoutingSlipEventContents <Include>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageEnvelope <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityName>k__BackingField;
    [NullableAttribute("1")]
public Uri Address { get; public set; }
    public RoutingSlipEvents Events { get; public set; }
    public RoutingSlipEventContents Include { get; public set; }
    public MessageEnvelope Message { get; public set; }
    public string ActivityName { get; public set; }
    public RoutingSlipSubscription(Uri address, RoutingSlipEvents events, RoutingSlipEventContents include, string activityName, MessageEnvelope message);
    [NullableContextAttribute("1")]
public RoutingSlipSubscription(Subscription subscription);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual Uri get_Address();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Address(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual RoutingSlipEvents get_Events();
    [CompilerGeneratedAttribute]
public void set_Events(RoutingSlipEvents value);
    [CompilerGeneratedAttribute]
public sealed virtual RoutingSlipEventContents get_Include();
    [CompilerGeneratedAttribute]
public void set_Include(RoutingSlipEventContents value);
    [CompilerGeneratedAttribute]
public sealed virtual MessageEnvelope get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(MessageEnvelope value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ActivityName();
    [CompilerGeneratedAttribute]
public void set_ActivityName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Courier.Messages.RoutingSlipTerminatedMessage : object {
    [CompilerGeneratedAttribute]
private Guid <TrackingNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ExecutionId>k__BackingField;
    [CompilerGeneratedAttribute]
private HostInfo <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
private Activity[] <DiscardedItinerary>k__BackingField;
    public Guid TrackingNumber { get; public set; }
    public DateTime Timestamp { get; public set; }
    public TimeSpan Duration { get; public set; }
    public string ActivityName { get; public set; }
    public Guid ExecutionId { get; public set; }
    public HostInfo Host { get; public set; }
    public IDictionary`2<string, object> Variables { get; public set; }
    public Activity[] DiscardedItinerary { get; public set; }
    public RoutingSlipTerminatedMessage(HostInfo host, Guid trackingNumber, string activityName, Guid executionId, DateTime timestamp, TimeSpan duration, IDictionary`2<string, object> variables, IEnumerable`1<Activity> discardedItinerary);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_TrackingNumber();
    [CompilerGeneratedAttribute]
public void set_TrackingNumber(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ActivityName();
    [CompilerGeneratedAttribute]
public void set_ActivityName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_ExecutionId();
    [CompilerGeneratedAttribute]
public void set_ExecutionId(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual HostInfo get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(HostInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual Activity[] get_DiscardedItinerary();
    [CompilerGeneratedAttribute]
public void set_DiscardedItinerary(Activity[] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Courier.RoutingSlipEventPublisher : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static IDictionary`2<string, object> _emptyObject;
    private CancellationToken _cancellationToken;
    [NullableAttribute("2")]
private CourierContext _context;
    private HostInfo _host;
    private IPublishEndpoint _publishEndpoint;
    private RoutingSlip _routingSlip;
    private ISendEndpointProvider _sendEndpointProvider;
    private static IDictionary`2<string, object> EmptyObject { get; }
    public RoutingSlipEventPublisher(CourierContext context, RoutingSlip routingSlip, CancellationToken cancellationToken);
    public RoutingSlipEventPublisher(ISendEndpointProvider sendEndpointProvider, IPublishEndpoint publishEndpoint, RoutingSlip routingSlip, CancellationToken cancellationToken);
    private static IDictionary`2<string, object> get_EmptyObject();
    public sealed virtual Task PublishRoutingSlipCompleted(DateTime timestamp, TimeSpan duration, IDictionary`2<string, object> variables);
    public sealed virtual Task PublishRoutingSlipFaulted(DateTime timestamp, TimeSpan duration, IDictionary`2<string, object> variables, ActivityException[] exceptions);
    public sealed virtual Task PublishRoutingSlipActivityCompleted(string activityName, Guid executionId, DateTime timestamp, TimeSpan duration, IDictionary`2<string, object> variables, IDictionary`2<string, object> arguments, IDictionary`2<string, object> data);
    public sealed virtual Task PublishRoutingSlipActivityFaulted(string activityName, Guid executionId, DateTime timestamp, TimeSpan duration, ExceptionInfo exceptionInfo, IDictionary`2<string, object> variables, IDictionary`2<string, object> arguments);
    public sealed virtual Task PublishRoutingSlipActivityCompensated(string activityName, Guid executionId, DateTime timestamp, TimeSpan duration, IDictionary`2<string, object> variables, IDictionary`2<string, object> data);
    public sealed virtual Task PublishRoutingSlipRevised(string activityName, Guid executionId, DateTime timestamp, TimeSpan duration, IDictionary`2<string, object> variables, IList`1<Activity> itinerary, IList`1<Activity> previousItinerary);
    public sealed virtual Task PublishRoutingSlipTerminated(string activityName, Guid executionId, DateTime timestamp, TimeSpan duration, IDictionary`2<string, object> variables, IList`1<Activity> previousItinerary);
    public sealed virtual Task PublishRoutingSlipActivityCompensationFailed(string activityName, Guid executionId, DateTime timestamp, TimeSpan duration, DateTime failureTimestamp, TimeSpan routingSlipDuration, ExceptionInfo exceptionInfo, IDictionary`2<string, object> variables, IDictionary`2<string, object> data);
    [AsyncStateMachineAttribute("MassTransit.Courier.RoutingSlipEventPublisher/<PublishEvent>d__19`1")]
private Task PublishEvent(RoutingSlipEvents eventFlag, Func`2<RoutingSlipEventContents, T> messageFactory);
    [AsyncStateMachineAttribute("MassTransit.Courier.RoutingSlipEventPublisher/<PublishSubscriptionEvent>d__20`1")]
private Task PublishSubscriptionEvent(RoutingSlipEvents eventFlag, Func`2<RoutingSlipEventContents, T> messageFactory, Subscription subscription);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Courier.RoutingSlipExecutor : object {
    private IPublishEndpoint _publishEndpoint;
    private ISendEndpointProvider _sendEndpointProvider;
    public RoutingSlipExecutor(ISendEndpointProvider sendEndpointProvider, IPublishEndpoint publishEndpoint);
    [AsyncStateMachineAttribute("MassTransit.Courier.RoutingSlipExecutor/<Execute>d__3")]
public sealed virtual Task Execute(RoutingSlip routingSlip, CancellationToken cancellationToken);
}
public interface MassTransit.CourierContext {
    public Guid TrackingNumber { get; }
    [NullableAttribute("1")]
public string ActivityName { get; }
    public Guid ExecutionId { get; }
    public DateTime Timestamp { get; }
    public TimeSpan Elapsed { get; }
    public abstract virtual Guid get_TrackingNumber();
    [NullableContextAttribute("1")]
public abstract virtual string get_ActivityName();
    public abstract virtual Guid get_ExecutionId();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual TimeSpan get_Elapsed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.CourierException : MassTransitException {
    public CourierException(string message);
    public CourierException(string message, Exception innerException);
    protected CourierException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.DelegateConfigurationExtensions : object {
    [ExtensionAttribute]
public static void UseExecute(IPipeConfigurator`1<TContext> configurator, Action`1<TContext> callback);
    [ExtensionAttribute]
public static void UseExecuteAsync(IPipeConfigurator`1<TContext> configurator, Func`2<TContext, Task> callback);
}
public class MassTransit.DeserializerFactory : MulticastDelegate {
    public DeserializerFactory(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual IMessageDeserializer Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual IMessageDeserializer EndInvoke(IAsyncResult result);
}
public class MassTransit.DestinationAddressProvider`1 : MulticastDelegate {
    public DestinationAddressProvider`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Uri Invoke(BehaviorContext`1<TSaga> context);
    public virtual IAsyncResult BeginInvoke(BehaviorContext`1<TSaga> context, AsyncCallback callback, object object);
    public virtual Uri EndInvoke(IAsyncResult result);
}
public class MassTransit.DestinationAddressProvider`2 : MulticastDelegate {
    public DestinationAddressProvider`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Uri Invoke(BehaviorContext`2<TSaga, TMessage> context);
    public virtual IAsyncResult BeginInvoke(BehaviorContext`2<TSaga, TMessage> context, AsyncCallback callback, object object);
    public virtual Uri EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.DuplicateKeyPipeConfigurationException : PipeConfigurationException {
    public DuplicateKeyPipeConfigurationException(string message);
    public DuplicateKeyPipeConfigurationException(string message, Exception innerException);
    protected DuplicateKeyPipeConfigurationException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.EmptyMessageBody : object {
    [CompilerGeneratedAttribute]
private static MessageBody <Instance>k__BackingField;
    public static MessageBody Instance { get; }
    public Nullable`1<long> Length { get; }
    private static EmptyMessageBody();
    [CompilerGeneratedAttribute]
public static MessageBody get_Instance();
    public sealed virtual Nullable`1<long> get_Length();
    public sealed virtual Stream GetStream();
    public sealed virtual Byte[] GetBytes();
    public sealed virtual string GetString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.EndpointException : AbstractUriException {
    public EndpointException(Uri uri);
    public EndpointException(Uri uri, string message);
    public EndpointException(Uri uri, string message, Exception innerException);
    protected EndpointException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class MassTransit.EndpointHealthResult : ValueType {
    public Uri InputAddress;
    public BusHealthStatus Status;
    [NullableAttribute("2")]
public string Description;
    [NullableAttribute("2")]
public Exception Exception;
    public IReceiveEndpoint ReceiveEndpoint;
    [NullableContextAttribute("2")]
private EndpointHealthResult(BusHealthStatus status, IReceiveEndpoint receiveEndpoint, string description, Exception exception);
    public static EndpointHealthResult Healthy(IReceiveEndpoint receiveEndpoint, string description);
    public static EndpointHealthResult Degraded(IReceiveEndpoint receiveEndpoint, string description);
    [NullableContextAttribute("2")]
public static EndpointHealthResult Unhealthy(IReceiveEndpoint receiveEndpoint, string description, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.EndpointNotFoundException : MassTransitException {
    public EndpointNotFoundException(string message);
    public EndpointNotFoundException(string message, Exception innerException);
    protected EndpointNotFoundException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1028")]
public class MassTransit.EntityNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <EntityName>k__BackingField;
    public string EntityName { get; }
    public EntityNameAttribute(string entityName);
    [CompilerGeneratedAttribute]
public string get_EntityName();
}
public interface MassTransit.Event {
    [NullableAttribute("1")]
public string Name { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_Name();
}
public interface MassTransit.Event`1 {
}
[NullableContextAttribute("1")]
public interface MassTransit.EventCorrelation {
    public Type DataType { get; }
    public bool ConfigureConsumeTopology { get; }
    public abstract virtual Type get_DataType();
    public abstract virtual bool get_ConfigureConsumeTopology();
}
[NullableContextAttribute("1")]
public interface MassTransit.EventCorrelation`2 {
    public Event`1<TData> Event { get; }
    public ISagaPolicy`2<TInstance, TData> Policy { get; }
    public SagaFilterFactory`2<TInstance, TData> FilterFactory { get; }
    public IFilter`1<ConsumeContext`1<TData>> MessageFilter { get; }
    public abstract virtual Event`1<TData> get_Event();
    public abstract virtual ISagaPolicy`2<TInstance, TData> get_Policy();
    public abstract virtual SagaFilterFactory`2<TInstance, TData> get_FilterFactory();
    public abstract virtual IFilter`1<ConsumeContext`1<TData>> get_MessageFilter();
}
public class MassTransit.EventExceptionMessageFactory`3 : MulticastDelegate {
    public EventExceptionMessageFactory`3(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual TMessage Invoke(BehaviorExceptionContext`2<TSaga, TException> context);
    public virtual IAsyncResult BeginInvoke(BehaviorExceptionContext`2<TSaga, TException> context, AsyncCallback callback, object object);
    public virtual TMessage EndInvoke(IAsyncResult result);
}
public class MassTransit.EventExceptionMessageFactory`4 : MulticastDelegate {
    public EventExceptionMessageFactory`4(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual T Invoke(BehaviorExceptionContext`3<TSaga, TMessage, TException> context);
    public virtual IAsyncResult BeginInvoke(BehaviorExceptionContext`3<TSaga, TMessage, TException> context, AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.EventExecutionException : SagaStateMachineException {
    public EventExecutionException(string message);
    public EventExecutionException(string message, Exception innerException);
    protected EventExecutionException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.EventExtensions : object {
    [ExtensionAttribute]
public static Task PublishEvent(IPipe`1<EventContext> pipe, T message);
}
public class MassTransit.EventMessageFactory`2 : MulticastDelegate {
    public EventMessageFactory`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual T Invoke(BehaviorContext`1<TSaga> context);
    public virtual IAsyncResult BeginInvoke(BehaviorContext`1<TSaga> context, AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.EventMessageFactory`3 : MulticastDelegate {
    [NullableContextAttribute("0")]
public EventMessageFactory`3(object object, IntPtr method);
    public virtual T Invoke(BehaviorContext`2<TInstance, TMessage> context);
    [NullableContextAttribute("0")]
public virtual IAsyncResult BeginInvoke(BehaviorContext`2<TInstance, TMessage> context, AsyncCallback callback, object object);
    [NullableContextAttribute("0")]
public virtual T EndInvoke(IAsyncResult result);
}
public interface MassTransit.ExceptionConsumeContext {
    [NullableAttribute("1")]
public Exception Exception { get; }
    [NullableAttribute("1")]
public ExceptionInfo ExceptionInfo { get; }
    [NullableContextAttribute("1")]
public abstract virtual Exception get_Exception();
    [NullableContextAttribute("1")]
public abstract virtual ExceptionInfo get_ExceptionInfo();
}
public interface MassTransit.ExceptionConsumeContext`1 {
}
public interface MassTransit.ExceptionConsumerConsumeContext`1 {
    [NullableAttribute("1")]
public Exception Exception { get; }
    [NullableAttribute("1")]
public ExceptionInfo ExceptionInfo { get; }
    [NullableContextAttribute("1")]
public abstract virtual Exception get_Exception();
    [NullableContextAttribute("1")]
public abstract virtual ExceptionInfo get_ExceptionInfo();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MassTransit.ExceptionFilters.CompositeExceptionFilter : object {
    private CompositeFilter`1<Exception> _filter;
    public CompositeExceptionFilter(CompositeFilter`1<Exception> filter);
    public sealed virtual void Probe(ProbeContext context);
    public sealed virtual bool Match(Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MassTransit.ExceptionFilters.CompositeFilter`1 : object {
    private CompositePredicate`1<T> _excludes;
    private CompositePredicate`1<T> _includes;
    public CompositePredicate`1<T> Includes { get; public set; }
    public CompositePredicate`1<T> Excludes { get; public set; }
    public CompositePredicate`1<T> get_Includes();
    public void set_Includes(CompositePredicate`1<T> value);
    public CompositePredicate`1<T> get_Excludes();
    public void set_Excludes(CompositePredicate`1<T> value);
    public bool Matches(T target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MassTransit.ExceptionFilters.CompositePredicate`1 : object {
    private List`1<Func`2<T, bool>> _list;
    private Func`2<T, bool> _matchesAll;
    private Func`2<T, bool> _matchesAny;
    private Func`2<T, bool> _matchesNone;
    public void Add(Func`2<T, bool> filter);
    public static CompositePredicate`1<T> op_Addition(CompositePredicate`1<T> invokes, Func`2<T, bool> filter);
    public bool MatchesAll(T target);
    public bool MatchesAny(T target);
    public bool MatchesNone(T target);
    public bool DoesNotMatchAny(T target);
    [CompilerGeneratedAttribute]
private bool <Add>b__4_0(T x);
    [CompilerGeneratedAttribute]
private bool <Add>b__4_1(T x);
    [CompilerGeneratedAttribute]
private bool <Add>b__4_2(T x);
}
[NullableContextAttribute("1")]
public interface MassTransit.ExceptionInfo {
    public string ExceptionType { get; }
    [NullableAttribute("2")]
public ExceptionInfo InnerException { get; }
    public string StackTrace { get; }
    public string Message { get; }
    public string Source { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Data { get; }
    public abstract virtual string get_ExceptionType();
    [NullableContextAttribute("2")]
public abstract virtual ExceptionInfo get_InnerException();
    public abstract virtual string get_StackTrace();
    public abstract virtual string get_Message();
    public abstract virtual string get_Source();
    public abstract virtual IDictionary`2<string, object> get_Data();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.ExceptionInfoException : MassTransitException {
    [NullableAttribute("2")]
private IDictionary _data;
    [CompilerGeneratedAttribute]
private ExceptionInfo <ExceptionInfo>k__BackingField;
    public ExceptionInfo ExceptionInfo { get; }
    public string StackTrace { get; }
    public string Source { get; }
    public IDictionary Data { get; }
    public ExceptionInfoException(ExceptionInfo exceptionInfo);
    [CompilerGeneratedAttribute]
public ExceptionInfo get_ExceptionInfo();
    public virtual string get_StackTrace();
    public virtual string get_Source();
    public virtual IDictionary get_Data();
}
[NullableContextAttribute("1")]
public interface MassTransit.ExceptionReceiveContext {
    public Exception Exception { get; }
    public DateTime ExceptionTimestamp { get; }
    public ExceptionInfo ExceptionInfo { get; }
    public abstract virtual Exception get_Exception();
    public abstract virtual DateTime get_ExceptionTimestamp();
    public abstract virtual ExceptionInfo get_ExceptionInfo();
}
public interface MassTransit.ExceptionSagaConsumeContext`1 {
    [NullableAttribute("1")]
public Exception Exception { get; }
    [NullableAttribute("1")]
public ExceptionInfo ExceptionInfo { get; }
    [NullableContextAttribute("1")]
public abstract virtual Exception get_Exception();
    [NullableContextAttribute("1")]
public abstract virtual ExceptionInfo get_ExceptionInfo();
}
[AttributeUsageAttribute("1028")]
public class MassTransit.ExcludeFromConfigureEndpointsAttribute : Attribute {
}
[AttributeUsageAttribute("1028")]
public class MassTransit.ExcludeFromImplementedTypesAttribute : Attribute {
}
[AttributeUsageAttribute("1028")]
public class MassTransit.ExcludeFromTopologyAttribute : Attribute {
}
public interface MassTransit.ExecuteActivityContext`1 {
}
public interface MassTransit.ExecuteActivityContext`2 {
    [NullableAttribute("1")]
public TActivity Activity { get; }
    [NullableContextAttribute("1")]
public abstract virtual TActivity get_Activity();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.ExecuteActivityDefinition`2 : object {
    private Nullable`1<int> _concurrentMessageLimit;
    [NullableAttribute("2")]
private string _executeEndpointName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEndpointDefinition`1<IExecuteActivity`1<TArguments>> <ExecuteEndpointDefinition>k__BackingField;
    unknown string ExecuteEndpointName {protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEndpointDefinition`1<IExecuteActivity`1<TArguments>> ExecuteEndpointDefinition { get; public set; }
    [NullableAttribute("2")]
private IEndpointDefinition MassTransit.IExecuteActivityDefinition.ExecuteEndpointDefinition { get; }
    public Nullable`1<int> ConcurrentMessageLimit { get; protected set; }
    private Type MassTransit.IExecuteActivityDefinition.ActivityType { get; }
    private Type MassTransit.IExecuteActivityDefinition.ArgumentType { get; }
    protected void set_ExecuteEndpointName(string value);
    [CompilerGeneratedAttribute]
public IEndpointDefinition`1<IExecuteActivity`1<TArguments>> get_ExecuteEndpointDefinition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExecuteEndpointDefinition(IEndpointDefinition`1<IExecuteActivity`1<TArguments>> value);
    [NullableContextAttribute("2")]
private sealed virtual override IEndpointDefinition MassTransit.IExecuteActivityDefinition.get_ExecuteEndpointDefinition();
    public sealed virtual Nullable`1<int> get_ConcurrentMessageLimit();
    protected void set_ConcurrentMessageLimit(Nullable`1<int> value);
    private sealed virtual override void MassTransit.IExecuteActivityDefinition<TActivity,TArguments>.Configure(IReceiveEndpointConfigurator endpointConfigurator, IExecuteActivityConfigurator`2<TActivity, TArguments> executeActivityConfigurator, IRegistrationContext context);
    private sealed virtual override string MassTransit.IExecuteActivityDefinition.GetExecuteEndpointName(IEndpointNameFormatter formatter);
    private sealed virtual override Type MassTransit.IExecuteActivityDefinition.get_ActivityType();
    private sealed virtual override Type MassTransit.IExecuteActivityDefinition.get_ArgumentType();
    protected void ExecuteEndpoint(Action`1<IEndpointRegistrationConfigurator> configure);
    [ObsoleteAttribute("Use the IRegistrationContext overload instead. Visit https://masstransit.io/obsolete for details.")]
protected virtual void ConfigureExecuteActivity(IReceiveEndpointConfigurator endpointConfigurator, IExecuteActivityConfigurator`2<TActivity, TArguments> executeActivityConfigurator);
    protected virtual void ConfigureExecuteActivity(IReceiveEndpointConfigurator endpointConfigurator, IExecuteActivityConfigurator`2<TActivity, TArguments> executeActivityConfigurator, IRegistrationContext context);
}
[NullableContextAttribute("1")]
public interface MassTransit.ExecuteContext {
    public ExecutionResult Result { get; public set; }
    public abstract virtual ExecutionResult get_Result();
    public abstract virtual void set_Result(ExecutionResult value);
    public abstract virtual ExecutionResult Completed();
    public abstract virtual ExecutionResult CompletedWithVariables(IEnumerable`1<KeyValuePair`2<string, object>> variables);
    public abstract virtual ExecutionResult CompletedWithVariables(object variables);
    public abstract virtual ExecutionResult Completed(TLog log);
    public abstract virtual ExecutionResult Completed(object logValues);
    public abstract virtual ExecutionResult CompletedWithVariables(TLog log, object variables);
    public abstract virtual ExecutionResult CompletedWithVariables(object logValues, object variables);
    public abstract virtual ExecutionResult CompletedWithVariables(TLog log, IEnumerable`1<KeyValuePair`2<string, object>> variables);
    public abstract virtual ExecutionResult ReviseItinerary(Action`1<IItineraryBuilder> buildItinerary);
    public abstract virtual ExecutionResult ReviseItinerary(TLog log, Action`1<IItineraryBuilder> buildItinerary);
    public abstract virtual ExecutionResult ReviseItinerary(TLog log, object variables, Action`1<IItineraryBuilder> buildItinerary);
    public abstract virtual ExecutionResult ReviseItinerary(TLog log, IEnumerable`1<KeyValuePair`2<string, object>> variables, Action`1<IItineraryBuilder> buildItinerary);
    public abstract virtual ExecutionResult Terminate();
    public abstract virtual ExecutionResult Terminate(object variables);
    public abstract virtual ExecutionResult Terminate(IEnumerable`1<KeyValuePair`2<string, object>> variables);
    public abstract virtual ExecutionResult Faulted();
    public abstract virtual ExecutionResult Faulted(Exception exception);
    public abstract virtual ExecutionResult FaultedWithVariables(Exception exception, object variables);
    public abstract virtual ExecutionResult FaultedWithVariables(Exception exception, IEnumerable`1<KeyValuePair`2<string, object>> variables);
}
public interface MassTransit.ExecuteContext`1 {
    [NullableAttribute("1")]
public TArguments Arguments { get; }
    [NullableContextAttribute("1")]
public abstract virtual TArguments get_Arguments();
    [NullableContextAttribute("1")]
public abstract virtual ExecuteActivityContext`2<TActivity, TArguments> CreateActivityContext(TActivity activity);
}
[NullableContextAttribute("1")]
public interface MassTransit.ExecutionResult {
    public abstract virtual Task Evaluate();
    public abstract virtual bool IsFaulted(Exception& exception);
}
[NullableContextAttribute("1")]
public interface MassTransit.Fault {
    public Guid FaultId { get; }
    public Nullable`1<Guid> FaultedMessageId { get; }
    public DateTime Timestamp { get; }
    public ExceptionInfo[] Exceptions { get; }
    public HostInfo Host { get; }
    public String[] FaultMessageTypes { get; }
    public abstract virtual Guid get_FaultId();
    public abstract virtual Nullable`1<Guid> get_FaultedMessageId();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual ExceptionInfo[] get_Exceptions();
    public abstract virtual HostInfo get_Host();
    public abstract virtual String[] get_FaultMessageTypes();
}
[NullableContextAttribute("1")]
public interface MassTransit.Fault`1 {
    public T Message { get; }
    public abstract virtual T get_Message();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1028")]
public class MassTransit.FaultEntityNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <EntityName>k__BackingField;
    public string EntityName { get; }
    public FaultEntityNameAttribute(string entityName);
    [CompilerGeneratedAttribute]
public string get_EntityName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.FilterConfigurationExtensions : object {
    [ExtensionAttribute]
public static void UseFilter(IConsumePipeConfigurator configurator, IFilter`1<ConsumeContext`1<T>> filter);
    [ExtensionAttribute]
public static void UseFilter(ISendPipeConfigurator configurator, IFilter`1<SendContext`1<T>> filter);
    [ExtensionAttribute]
public static void UseFilter(IPublishPipeConfigurator configurator, IFilter`1<PublishContext`1<T>> filter);
    [ExtensionAttribute]
public static void UseFilter(IPipeConfigurator`1<T> configurator, IFilter`1<T> filter);
    [ExtensionAttribute]
public static void UseFilters(IPipeConfigurator`1<T> configurator, IEnumerable`1<IFilter`1<T>> filters);
    [ExtensionAttribute]
public static void UseFilters(IPipeConfigurator`1<T> configurator, IFilter`1[] filters);
    [ExtensionAttribute]
public static void UseFilter(IPipeConfigurator`1<TContext> configurator, IFilter`1<TFilter> filter, MergeFilterContextProvider`2<TContext, TFilter> contextProvider, FilterContextProvider`2<TFilter, TContext> inputContextProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.FilterContextProvider`2 : MulticastDelegate {
    [NullableContextAttribute("0")]
public FilterContextProvider`2(object object, IntPtr method);
    public virtual TInput Invoke(TSplit context);
    [NullableContextAttribute("0")]
public virtual IAsyncResult BeginInvoke(TSplit context, AsyncCallback callback, object object);
    [NullableContextAttribute("0")]
public virtual TInput EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.FutureDefinition`1 : object {
    private Nullable`1<int> _concurrentMessageLimit;
    [NullableAttribute("2")]
private string _endpointName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEndpointDefinition`1<TFuture> <EndpointDefinition>k__BackingField;
    unknown string EndpointName {protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEndpointDefinition`1<TFuture> EndpointDefinition { get; public set; }
    [NullableAttribute("2")]
private IEndpointDefinition MassTransit.IFutureDefinition.EndpointDefinition { get; }
    public Nullable`1<int> ConcurrentMessageLimit { get; protected set; }
    private Type MassTransit.IFutureDefinition.FutureType { get; }
    protected void set_EndpointName(string value);
    [CompilerGeneratedAttribute]
public IEndpointDefinition`1<TFuture> get_EndpointDefinition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EndpointDefinition(IEndpointDefinition`1<TFuture> value);
    [NullableContextAttribute("2")]
private sealed virtual override IEndpointDefinition MassTransit.IFutureDefinition.get_EndpointDefinition();
    public sealed virtual Nullable`1<int> get_ConcurrentMessageLimit();
    protected void set_ConcurrentMessageLimit(Nullable`1<int> value);
    private sealed virtual override void MassTransit.IFutureDefinition<TFuture>.Configure(IReceiveEndpointConfigurator endpointConfigurator, ISagaConfigurator`1<FutureState> sagaConfigurator, IRegistrationContext context);
    private sealed virtual override Type MassTransit.IFutureDefinition.get_FutureType();
    private sealed virtual override string MassTransit.IFutureDefinition.GetEndpointName(IEndpointNameFormatter formatter);
    [ObsoleteAttribute("Use the IRegistrationContext overload instead. Visit https://masstransit.io/obsolete for details.")]
protected virtual void ConfigureSaga(IReceiveEndpointConfigurator endpointConfigurator, ISagaConfigurator`1<FutureState> sagaConfigurator);
    protected virtual void ConfigureSaga(IReceiveEndpointConfigurator endpointConfigurator, ISagaConfigurator`1<FutureState> sagaConfigurator, IRegistrationContext context);
    protected void Endpoint(Action`1<IEndpointRegistrationConfigurator> configure);
}
public class MassTransit.FutureMessage : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SupportedMessageTypes>k__BackingField;
    public IDictionary`2<string, object> Message { get; public set; }
    public String[] SupportedMessageTypes { get; public set; }
    public FutureMessage(IDictionary`2<string, object> message, String[] supportedMessageTypes);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public String[] get_SupportedMessageTypes();
    [CompilerGeneratedAttribute]
public void set_SupportedMessageTypes(String[] value);
    public bool HasMessageType(Type messageType);
    public bool HasMessageType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.FutureNotFoundException : MassTransitException {
    public FutureNotFoundException(Type type, Guid id);
    public FutureNotFoundException(string message);
    public FutureNotFoundException(string message, Exception innerException);
    protected FutureNotFoundException(SerializationInfo info, StreamingContext context);
}
public interface MassTransit.Futures.Contracts.Get`1 {
}
public class MassTransit.FutureState : object {
    private Dictionary`2<Guid, FutureMessage> _faults;
    private HashSet`1<Guid> _pending;
    private Dictionary`2<Guid, FutureMessage> _results;
    private HashSet`1<FutureSubscription> _subscriptions;
    private Dictionary`2<string, object> _variables;
    [CompilerGeneratedAttribute]
private int <CurrentState>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <Completed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <Faulted>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private FutureMessage <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <RowVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <CorrelationId>k__BackingField;
    public int CurrentState { get; public set; }
    public DateTime Created { get; public set; }
    public Nullable`1<DateTime> Completed { get; public set; }
    public Nullable`1<DateTime> Faulted { get; public set; }
    public Uri Location { get; public set; }
    public FutureMessage Command { get; public set; }
    public HashSet`1<Guid> Pending { get; public set; }
    public HashSet`1<FutureSubscription> Subscriptions { get; public set; }
    public Dictionary`2<string, object> Variables { get; public set; }
    public Dictionary`2<Guid, FutureMessage> Results { get; public set; }
    public Dictionary`2<Guid, FutureMessage> Faults { get; public set; }
    public Byte[] RowVersion { get; public set; }
    public int Version { get; public set; }
    public Guid CorrelationId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_CurrentState();
    [CompilerGeneratedAttribute]
public void set_CurrentState(int value);
    [CompilerGeneratedAttribute]
public DateTime get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(DateTime value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_Completed();
    [CompilerGeneratedAttribute]
public void set_Completed(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_Faulted();
    [CompilerGeneratedAttribute]
public void set_Faulted(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Uri get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(Uri value);
    [CompilerGeneratedAttribute]
public FutureMessage get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(FutureMessage value);
    public HashSet`1<Guid> get_Pending();
    public void set_Pending(HashSet`1<Guid> value);
    public HashSet`1<FutureSubscription> get_Subscriptions();
    public void set_Subscriptions(HashSet`1<FutureSubscription> value);
    public Dictionary`2<string, object> get_Variables();
    public void set_Variables(Dictionary`2<string, object> value);
    public Dictionary`2<Guid, FutureMessage> get_Results();
    public void set_Results(Dictionary`2<Guid, FutureMessage> value);
    public Dictionary`2<Guid, FutureMessage> get_Faults();
    public void set_Faults(Dictionary`2<Guid, FutureMessage> value);
    [CompilerGeneratedAttribute]
public Byte[] get_RowVersion();
    [CompilerGeneratedAttribute]
public void set_RowVersion(Byte[] value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Version();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Version(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_CorrelationId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CorrelationId(Guid value);
    public bool HasSubscriptions();
    public bool HasVariables();
    public bool HasResults();
    public bool HasFaults();
    public bool HasPending();
}
public class MassTransit.FutureSubscription : object {
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<FutureSubscription> <Comparer>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Address>k__BackingField;
    public static IEqualityComparer`1<FutureSubscription> Comparer { get; }
    public Nullable`1<Guid> RequestId { get; }
    public Uri Address { get; }
    public FutureSubscription(Uri address, Nullable`1<Guid> requestId);
    private static FutureSubscription();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<FutureSubscription> get_Comparer();
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_RequestId();
    [CompilerGeneratedAttribute]
public Uri get_Address();
    public sealed virtual bool Equals(FutureSubscription other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(FutureSubscription left, FutureSubscription right);
    public static bool op_Inequality(FutureSubscription left, FutureSubscription right);
}
public interface MassTransit.Headers {
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, object>> GetAll();
    [NullableContextAttribute("1")]
public abstract virtual bool TryGetHeader(string key, Object& value);
    [NullableContextAttribute("1")]
public abstract virtual T Get(string key, T defaultValue);
    public abstract virtual Nullable`1<T> Get(string key, Nullable`1<T> defaultValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class MassTransit.HeaderValue : ValueType {
    public string Key;
    public object Value;
    public HeaderValue(string key, object value);
    public HeaderValue(KeyValuePair`2<string, object> pair);
    public bool IsStringValue(HeaderValue`1& result);
    public bool IsSimpleValue(HeaderValue& result);
    public static HeaderValue op_Implicit(HeaderValue`1<string> headerValue);
    internal static bool IsValueStringValue(string key, object value, HeaderValue`1& result);
    internal static bool IsValueSimpleValue(string key, object value, HeaderValue& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class MassTransit.HeaderValue`1 : ValueType {
    public string Key;
    public T Value;
    public HeaderValue`1(string key, T value);
    public bool IsStringValue(HeaderValue`1& result);
    public bool IsSimpleValue(HeaderValue& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.HostConnectReceiveEndpointExtensions : object {
    [ExtensionAttribute]
public static HostReceiveEndpointHandle ConnectResponseEndpoint(IReceiveConnector connector, IEndpointNameFormatter endpointNameFormatter, Action`1<IReceiveEndpointConfigurator> configureEndpoint);
    [ExtensionAttribute]
public static HostReceiveEndpointHandle ConnectReceiveEndpoint(IReceiveConnector connector, Action`1<IReceiveEndpointConfigurator> configureEndpoint);
}
[NullableContextAttribute("2")]
public interface MassTransit.HostInfo {
    public string MachineName { get; }
    public string ProcessName { get; }
    public int ProcessId { get; }
    public string Assembly { get; }
    public string AssemblyVersion { get; }
    public string FrameworkVersion { get; }
    public string MassTransitVersion { get; }
    public string OperatingSystemVersion { get; }
    public abstract virtual string get_MachineName();
    public abstract virtual string get_ProcessName();
    public abstract virtual int get_ProcessId();
    public abstract virtual string get_Assembly();
    public abstract virtual string get_AssemblyVersion();
    public abstract virtual string get_FrameworkVersion();
    public abstract virtual string get_MassTransitVersion();
    public abstract virtual string get_OperatingSystemVersion();
}
[NullableContextAttribute("1")]
public interface MassTransit.HostReady {
    public Uri HostAddress { get; }
    public ReceiveEndpointReady[] ReceiveEndpoints { get; }
    public RiderReady[] Riders { get; }
    public abstract virtual Uri get_HostAddress();
    public abstract virtual ReceiveEndpointReady[] get_ReceiveEndpoints();
    public abstract virtual RiderReady[] get_Riders();
}
[NullableContextAttribute("1")]
public interface MassTransit.HostReceiveEndpointHandle {
    public IReceiveEndpoint ReceiveEndpoint { get; }
    public Task`1<ReceiveEndpointReady> Ready { get; }
    public abstract virtual IReceiveEndpoint get_ReceiveEndpoint();
    public abstract virtual Task`1<ReceiveEndpointReady> get_Ready();
    public abstract virtual Task StopAsync(CancellationToken cancellationToken);
}
public interface MassTransit.IActivity {
}
public interface MassTransit.IActivity`2 {
}
[NullableContextAttribute("1")]
public interface MassTransit.IActivityConfigurationObserver {
    [EditorBrowsableAttribute("1")]
public abstract virtual void ActivityConfigured(IExecuteActivityConfigurator`2<TActivity, TArguments> configurator, Uri compensateAddress);
    [EditorBrowsableAttribute("1")]
public abstract virtual void ExecuteActivityConfigured(IExecuteActivityConfigurator`2<TActivity, TArguments> configurator);
    [EditorBrowsableAttribute("1")]
public abstract virtual void CompensateActivityConfigured(ICompensateActivityConfigurator`2<TActivity, TLog> configurator);
}
[NullableContextAttribute("1")]
public interface MassTransit.IActivityConfigurationObserverConnector {
    public abstract virtual ConnectHandle ConnectActivityConfigurationObserver(IActivityConfigurationObserver observer);
}
[NullableContextAttribute("1")]
public interface MassTransit.IActivityDefinition {
    public Type LogType { get; }
    [NullableAttribute("2")]
public IEndpointDefinition CompensateEndpointDefinition { get; }
    public abstract virtual Type get_LogType();
    [NullableContextAttribute("2")]
public abstract virtual IEndpointDefinition get_CompensateEndpointDefinition();
    public abstract virtual string GetCompensateEndpointName(IEndpointNameFormatter formatter);
}
[NullableContextAttribute("1")]
public interface MassTransit.IActivityDefinition`3 {
    unknown IEndpointDefinition`1<ICompensateActivity`1<TLog>> CompensateEndpointDefinition {public set; }
    public abstract virtual void set_CompensateEndpointDefinition(IEndpointDefinition`1<ICompensateActivity`1<TLog>> value);
    public abstract virtual void Configure(IReceiveEndpointConfigurator endpointConfigurator, ICompensateActivityConfigurator`2<TActivity, TLog> compensateActivityConfigurator, IRegistrationContext context);
}
[NullableContextAttribute("1")]
public interface MassTransit.IActivityFactory {
    public abstract virtual Task Execute(ExecuteContext`1<TArguments> context, IPipe`1<ExecuteActivityContext`2<TActivity, TArguments>> next);
    public abstract virtual Task Compensate(CompensateContext`1<TLog> compensateContext, IPipe`1<CompensateActivityContext`2<TActivity, TLog>> next);
}
[NullableContextAttribute("1")]
public interface MassTransit.IActivityFactory`3 {
}
[NullableContextAttribute("1")]
public interface MassTransit.IActivityObserver {
    public abstract virtual Task PreExecute(ExecuteActivityContext`2<TActivity, TArguments> context);
    public abstract virtual Task PostExecute(ExecuteActivityContext`2<TActivity, TArguments> context);
    public abstract virtual Task ExecuteFault(ExecuteActivityContext`2<TActivity, TArguments> context, Exception exception);
    public abstract virtual Task PreCompensate(CompensateActivityContext`2<TActivity, TLog> context);
    public abstract virtual Task PostCompensate(CompensateActivityContext`2<TActivity, TLog> context);
    public abstract virtual Task CompensateFail(CompensateActivityContext`2<TActivity, TLog> context, Exception exception);
}
[NullableContextAttribute("1")]
public interface MassTransit.IActivityObserverConnector {
    public abstract virtual ConnectHandle ConnectActivityObserver(IActivityObserver observer);
}
[NullableContextAttribute("1")]
public interface MassTransit.IActivityRegistrationConfigurator {
    public abstract virtual void Endpoints(Action`1<IEndpointRegistrationConfigurator> configureExecute, Action`1<IEndpointRegistrationConfigurator> configureCompensate);
    public abstract virtual IActivityRegistrationConfigurator ExecuteEndpoint(Action`1<IEndpointRegistrationConfigurator> configureExecute);
    public abstract virtual IActivityRegistrationConfigurator CompensateEndpoint(Action`1<IEndpointRegistrationConfigurator> configureCompensate);
    public abstract virtual void ExcludeFromConfigureEndpoints();
}
[NullableContextAttribute("1")]
public interface MassTransit.IActivityRegistrationConfigurator`3 {
}
[NullableContextAttribute("1")]
public interface MassTransit.IAgent {
    public Task Ready { get; }
    public Task Completed { get; }
    public CancellationToken Stopping { get; }
    public CancellationToken Stopped { get; }
    public abstract virtual Task get_Ready();
    public abstract virtual Task get_Completed();
    public abstract virtual CancellationToken get_Stopping();
    public abstract virtual CancellationToken get_Stopped();
    public abstract virtual Task Stop(StopContext context);
}
public interface MassTransit.IAgent`1 {
}
[NullableContextAttribute("1")]
public interface MassTransit.IBatchConfigurator`1 {
    unknown TimeSpan TimeLimit {public set; }
    unknown BatchTimeLimitStart TimeLimitStart {public set; }
    unknown int MessageLimit {public set; }
    unknown int ConcurrencyLimit {public set; }
    public abstract virtual void set_TimeLimit(TimeSpan value);
    public abstract virtual void set_TimeLimitStart(BatchTimeLimitStart value);
    public abstract virtual void set_MessageLimit(int value);
    public abstract virtual void set_ConcurrencyLimit(int value);
    public abstract virtual void Consumer(IConsumerFactory`1<TConsumer> consumerFactory, Action`1<IConsumerMessageConfigurator`2<TConsumer, Batch`1<TMessage>>> configure);
}
[NullableContextAttribute("1")]
public interface MassTransit.IBehavior`1 {
    public abstract virtual Task Execute(BehaviorContext`1<TInstance> context);
    public abstract virtual Task Execute(BehaviorContext`2<TInstance, T> context);
    public abstract virtual Task Faulted(BehaviorExceptionContext`3<TInstance, T, TException> context);
    public abstract virtual Task Faulted(BehaviorExceptionContext`2<TInstance, TException> context);
}
[NullableContextAttribute("1")]
public interface MassTransit.IBehavior`2 {
    public abstract virtual Task Execute(BehaviorContext`2<TSaga, TMessage> context);
    public abstract virtual Task Faulted(BehaviorExceptionContext`3<TSaga, TMessage, TException> context);
}
public interface MassTransit.IBus {
    [NullableAttribute("1")]
public Uri Address { get; }
    [NullableAttribute("1")]
public IBusTopology Topology { get; }
    [NullableContextAttribute("1")]
public abstract virtual Uri get_Address();
    [NullableContextAttribute("1")]
public abstract virtual IBusTopology get_Topology();
}
public interface MassTransit.IBusControl {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<BusHandle> StartAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public abstract virtual Task StopAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public abstract virtual BusHealthResult CheckHealth();
}
[NullableContextAttribute("1")]
public interface MassTransit.IBusDepot {
    public abstract virtual Task Start(CancellationToken cancellationToken);
    public abstract virtual Task Stop(CancellationToken cancellationToken);
}
public interface MassTransit.IBusFactoryConfigurator {
    [NullableAttribute("1")]
public IMessageTopologyConfigurator MessageTopology { get; }
    [NullableAttribute("1")]
public IConsumeTopologyConfigurator ConsumeTopology { get; }
    [NullableAttribute("1")]
public ISendTopologyConfigurator SendTopology { get; }
    [NullableAttribute("1")]
public IPublishTopologyConfigurator PublishTopology { get; }
    unknown bool DeployTopologyOnly {public set; }
    unknown bool DeployPublishTopology {public set; }
    unknown int PrefetchCount {public set; }
    unknown Nullable`1<int> ConcurrentMessageLimit {public set; }
    [NullableAttribute("1")]
unknown ContentType DefaultContentType {public set; }
    [NullableAttribute("1")]
unknown ContentType SerializerContentType {public set; }
    [NullableContextAttribute("1")]
public abstract virtual IMessageTopologyConfigurator get_MessageTopology();
    [NullableContextAttribute("1")]
public abstract virtual IConsumeTopologyConfigurator get_ConsumeTopology();
    [NullableContextAttribute("1")]
public abstract virtual ISendTopologyConfigurator get_SendTopology();
    [NullableContextAttribute("1")]
public abstract virtual IPublishTopologyConfigurator get_PublishTopology();
    public abstract virtual void set_DeployTopologyOnly(bool value);
    public abstract virtual void set_DeployPublishTopology(bool value);
    public abstract virtual void set_PrefetchCount(int value);
    public abstract virtual void set_ConcurrentMessageLimit(Nullable`1<int> value);
    [NullableContextAttribute("1")]
public abstract virtual void set_DefaultContentType(ContentType value);
    [NullableContextAttribute("1")]
public abstract virtual void set_SerializerContentType(ContentType value);
    [NullableContextAttribute("1")]
public abstract virtual void Message(Action`1<IMessageTopologyConfigurator`1<T>> configureTopology);
    [NullableContextAttribute("1")]
public abstract virtual void Send(Action`1<IMessageSendTopologyConfigurator`1<T>> configureTopology);
    [NullableContextAttribute("1")]
public abstract virtual void Publish(Action`1<IMessagePublishTopologyConfigurator`1<T>> configureTopology);
    [NullableContextAttribute("1")]
public abstract virtual void AddSerializer(ISerializerFactory factory, bool isSerializer);
    [NullableContextAttribute("1")]
public abstract virtual void AddDeserializer(ISerializerFactory factory, bool isDefault);
    public abstract virtual void ClearSerialization();
}
public interface MassTransit.IBusFactoryConfigurator`1 {
}
[NullableContextAttribute("1")]
public interface MassTransit.IBusObserver {
    public abstract virtual void PostCreate(IBus bus);
    public abstract virtual void CreateFaulted(Exception exception);
    public abstract virtual Task PreStart(IBus bus);
    public abstract virtual Task PostStart(IBus bus, Task`1<BusReady> busReady);
    public abstract virtual Task StartFaulted(IBus bus, Exception exception);
    public abstract virtual Task PreStop(IBus bus);
    public abstract virtual Task PostStop(IBus bus);
    public abstract virtual Task StopFaulted(IBus bus, Exception exception);
}
[NullableContextAttribute("1")]
public interface MassTransit.IBusObserverConnector {
    public abstract virtual ConnectHandle ConnectBusObserver(IBusObserver observer);
}
[NullableContextAttribute("1")]
public interface MassTransit.IBusTopology {
    public IPublishTopology PublishTopology { get; }
    public ISendTopology SendTopology { get; }
    public abstract virtual IPublishTopology get_PublishTopology();
    public abstract virtual ISendTopology get_SendTopology();
    public abstract virtual IMessagePublishTopology`1<T> Publish();
    public abstract virtual IMessageSendTopology`1<T> Send();
    public abstract virtual IMessageTopology`1<T> Message();
    public abstract virtual bool TryGetPublishAddress(Type messageType, Uri& publishAddress);
    public abstract virtual bool TryGetPublishAddress(Uri& publishAddress);
}
[NullableContextAttribute("1")]
public interface MassTransit.IClientFactory {
    public ClientFactoryContext Context { get; }
    public abstract virtual ClientFactoryContext get_Context();
    public abstract virtual RequestHandle`1<T> CreateRequest(T message, CancellationToken cancellationToken, RequestTimeout timeout);
    public abstract virtual RequestHandle`1<T> CreateRequest(Uri destinationAddress, T message, CancellationToken cancellationToken, RequestTimeout timeout);
    public abstract virtual RequestHandle`1<T> CreateRequest(ConsumeContext consumeContext, T message, CancellationToken cancellationToken, RequestTimeout timeout);
    public abstract virtual RequestHandle`1<T> CreateRequest(ConsumeContext consumeContext, Uri destinationAddress, T message, CancellationToken cancellationToken, RequestTimeout timeout);
    public abstract virtual RequestHandle`1<T> CreateRequest(object values, CancellationToken cancellationToken, RequestTimeout timeout);
    public abstract virtual RequestHandle`1<T> CreateRequest(Uri destinationAddress, object values, CancellationToken cancellationToken, RequestTimeout timeout);
    public abstract virtual RequestHandle`1<T> CreateRequest(ConsumeContext consumeContext, object values, CancellationToken cancellationToken, RequestTimeout timeout);
    public abstract virtual RequestHandle`1<T> CreateRequest(ConsumeContext consumeContext, Uri destinationAddress, object values, CancellationToken cancellationToken, RequestTimeout timeout);
    public abstract virtual IRequestClient`1<T> CreateRequestClient(RequestTimeout timeout);
    public abstract virtual IRequestClient`1<T> CreateRequestClient(ConsumeContext consumeContext, RequestTimeout timeout);
    public abstract virtual IRequestClient`1<T> CreateRequestClient(Uri destinationAddress, RequestTimeout timeout);
    public abstract virtual IRequestClient`1<T> CreateRequestClient(ConsumeContext consumeContext, Uri destinationAddress, RequestTimeout timeout);
}
public interface MassTransit.ICompensateActivity {
}
[NullableContextAttribute("1")]
public interface MassTransit.ICompensateActivity`1 {
    public abstract virtual Task`1<CompensationResult> Compensate(CompensateContext`1<TLog> context);
}
[NullableContextAttribute("1")]
public interface MassTransit.ICompensateActivityConfigurator`2 {
    unknown Nullable`1<int> ConcurrentMessageLimit {public set; }
    public abstract virtual void set_ConcurrentMessageLimit(Nullable`1<int> value);
    public abstract virtual void Log(Action`1<ICompensateLogConfigurator`1<TLog>> configure);
    public abstract virtual void ActivityLog(Action`1<ICompensateActivityLogConfigurator`1<TLog>> configure);
    public abstract virtual void RoutingSlip(Action`1<IRoutingSlipConfigurator> configure);
}
[NullableContextAttribute("1")]
public interface MassTransit.ICompensateActivityFactory`2 {
    public abstract virtual Task Compensate(CompensateContext`1<TLog> context, IPipe`1<CompensateActivityContext`2<TActivity, TLog>> next);
}
public interface MassTransit.ICompensateActivityLogConfigurator`1 {
}
public interface MassTransit.ICompensateLogConfigurator`1 {
}
[NullableContextAttribute("1")]
public interface MassTransit.IConfigureReceiveEndpoint {
    public abstract virtual void Configure(string name, IReceiveEndpointConfigurator configurator);
}
public interface MassTransit.IConsumeConfigurator {
}
[NullableContextAttribute("1")]
public interface MassTransit.IConsumeMessageObserver`1 {
    public abstract virtual Task PreConsume(ConsumeContext`1<T> context);
    public abstract virtual Task PostConsume(ConsumeContext`1<T> context);
    public abstract virtual Task ConsumeFault(ConsumeContext`1<T> context, Exception exception);
}
[NullableContextAttribute("1")]
public interface MassTransit.IConsumeMessageObserverConnector {
    public abstract virtual ConnectHandle ConnectConsumeMessageObserver(IConsumeMessageObserver`1<T> observer);
}
[NullableContextAttribute("1")]
public interface MassTransit.IConsumeMessageObserverConnector`1 {
    public abstract virtual ConnectHandle ConnectConsumeMessageObserver(IConsumeMessageObserver`1<T> observer);
}
[NullableContextAttribute("1")]
public interface MassTransit.IConsumeObserver {
    public abstract virtual Task PreConsume(ConsumeContext`1<T> context);
    public abstract virtual Task PostConsume(ConsumeContext`1<T> context);
    public abstract virtual Task ConsumeFault(ConsumeContext`1<T> context, Exception exception);
}
[NullableContextAttribute("1")]
public interface MassTransit.IConsumeObserverConnector {
    public abstract virtual ConnectHandle ConnectConsumeObserver(IConsumeObserver observer);
}
public interface MassTransit.IConsumePipeConfigurator {
    unknown bool AutoStart {public set; }
    public abstract virtual void set_AutoStart(bool value);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
public abstract virtual void AddPipeSpecification(IPipeSpecification`1<ConsumeContext`1<T>> specification);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
public abstract virtual void AddPrePipeSpecification(IPipeSpecification`1<ConsumeContext> specification);
}
[NullableContextAttribute("1")]
public interface MassTransit.IConsumePipeConnector {
    public abstract virtual ConnectHandle ConnectConsumePipe(IPipe`1<ConsumeContext`1<T>> pipe);
    public abstract virtual ConnectHandle ConnectConsumePipe(IPipe`1<ConsumeContext`1<T>> pipe, ConnectPipeOptions options);
}
public interface MassTransit.IConsumer {
}
[NullableContextAttribute("1")]
public interface MassTransit.IConsumer`1 {
    public abstract virtual Task Consume(ConsumeContext`1<TMessage> context);
}
[NullableContextAttribute("1")]
public interface MassTransit.IConsumerConfigurationObserver {
    [EditorBrowsableAttribute("1")]
public abstract virtual void ConsumerConfigured(IConsumerConfigurator`1<TConsumer> configurator);
    [EditorBrowsableAttribute("1")]
public abstract virtual void ConsumerMessageConfigured(IConsumerMessageConfigurator`2<TConsumer, TMessage> configurator);
}
[NullableContextAttribute("1")]
public interface MassTransit.IConsumerConfigurationObserverConnector {
    [EditorBrowsableAttribute("1")]
public abstract virtual ConnectHandle ConnectConsumerConfigurationObserver(IConsumerConfigurationObserver observer);
}
public interface MassTransit.IConsumerConfigurator {
    unknown Nullable`1<int> ConcurrentMessageLimit {public set; }
    public abstract virtual void set_ConcurrentMessageLimit(Nullable`1<int> value);
}
public interface MassTransit.IConsumerConfigurator`1 {
    [NullableContextAttribute("1")]
public abstract virtual void Message(Action`1<IConsumerMessageConfigurator`1<T>> configure);
    [NullableContextAttribute("1")]
public abstract virtual void ConsumerMessage(Action`1<IConsumerMessageConfigurator`2<TConsumer, T>> configure);
}
[NullableContextAttribute("1")]
public interface MassTransit.IConsumerDefinition {
    public Type ConsumerType { get; }
    [NullableAttribute("2")]
public IEndpointDefinition EndpointDefinition { get; }
    public abstract virtual Type get_ConsumerType();
    [NullableContextAttribute("2")]
public abstract virtual IEndpointDefinition get_EndpointDefinition();
    public abstract virtual string GetEndpointName(IEndpointNameFormatter formatter);
}
[NullableContextAttribute("1")]
public interface MassTransit.IConsumerDefinition`1 {
    unknown IEndpointDefinition`1<TConsumer> EndpointDefinition {public set; }
    public abstract virtual void set_EndpointDefinition(IEndpointDefinition`1<TConsumer> value);
    public abstract virtual void Configure(IReceiveEndpointConfigurator endpointConfigurator, IConsumerConfigurator`1<TConsumer> consumerConfigurator, IRegistrationContext context);
}
[NullableContextAttribute("1")]
public interface MassTransit.IConsumerFactory`1 {
    public abstract virtual Task Send(ConsumeContext`1<T> context, IPipe`1<ConsumerConsumeContext`2<TConsumer, T>> next);
}
[NullableContextAttribute("1")]
public interface MassTransit.IConsumerMessageConfigurator`1 {
}
[NullableContextAttribute("1")]
public interface MassTransit.IConsumerMessageConfigurator`2 {
    public abstract virtual void Message(Action`1<IConsumerMessageConfigurator`1<TMessage>> configure);
}
[NullableContextAttribute("1")]
public interface MassTransit.IConsumerRegistrationConfigurator {
    public abstract virtual void Endpoint(Action`1<IEndpointRegistrationConfigurator> configure);
    public abstract virtual void ExcludeFromConfigureEndpoints();
}
[NullableContextAttribute("1")]
public interface MassTransit.IConsumerRegistrationConfigurator`1 {
}
[NullableContextAttribute("1")]
public interface MassTransit.IConsumeTopology {
    public abstract virtual IMessageConsumeTopology`1<T> GetMessageTopology();
    public abstract virtual string CreateTemporaryQueueName(string tag);
}
public interface MassTransit.IConsumeTopologyConfigurator {
    [NullableContextAttribute("1")]
public abstract virtual IMessageConsumeTopologyConfigurator`1<T> GetMessageTopology();
    [NullableContextAttribute("1")]
public abstract virtual IMessageConsumeTopologyConfigurator GetMessageTopology(Type messageType);
    [NullableContextAttribute("1")]
public abstract virtual bool TryAddConvention(IConsumeTopologyConvention convention);
}
[NullableContextAttribute("1")]
public interface MassTransit.IDeadLetterQueueNameFormatter {
    public abstract virtual string FormatDeadLetterQueueName(string queueName);
}
public interface MassTransit.IDefinition {
    public Nullable`1<int> ConcurrentMessageLimit { get; }
    public abstract virtual Nullable`1<int> get_ConcurrentMessageLimit();
}
[NullableContextAttribute("1")]
public interface MassTransit.IEndpointConfigurationObserver {
    public abstract virtual void EndpointConfigured(T configurator);
}
[NullableContextAttribute("1")]
public interface MassTransit.IEndpointConfigurationObserverConnector {
    public abstract virtual ConnectHandle ConnectEndpointConfigurationObserver(IEndpointConfigurationObserver observer);
}
public interface MassTransit.IEndpointConfigurator {
}
[NullableContextAttribute("1")]
public interface MassTransit.IEndpointDefinition {
    public bool IsTemporary { get; }
    public Nullable`1<int> PrefetchCount { get; }
    public Nullable`1<int> ConcurrentMessageLimit { get; }
    public bool ConfigureConsumeTopology { get; }
    public abstract virtual bool get_IsTemporary();
    public abstract virtual Nullable`1<int> get_PrefetchCount();
    public abstract virtual Nullable`1<int> get_ConcurrentMessageLimit();
    public abstract virtual bool get_ConfigureConsumeTopology();
    public abstract virtual string GetEndpointName(IEndpointNameFormatter formatter);
    public abstract virtual void Configure(T configurator);
}
public interface MassTransit.IEndpointDefinition`1 {
}
[NullableContextAttribute("1")]
public interface MassTransit.IEndpointNameFormatter {
    public string Separator { get; }
    public abstract virtual string get_Separator();
    public abstract virtual string TemporaryEndpoint(string tag);
    public abstract virtual string Consumer();
    public abstract virtual string Message();
    public abstract virtual string Saga();
    public abstract virtual string ExecuteActivity();
    public abstract virtual string CompensateActivity();
    public abstract virtual string SanitizeName(string name);
}
[NullableContextAttribute("1")]
public interface MassTransit.IEndpointRegistrationConfigurator {
    unknown string Name {public set; }
    unknown bool Temporary {public set; }
    unknown Nullable`1<int> PrefetchCount {public set; }
    unknown Nullable`1<int> ConcurrentMessageLimit {public set; }
    unknown bool ConfigureConsumeTopology {public set; }
    unknown string InstanceId {public set; }
    public abstract virtual void set_Name(string value);
    public abstract virtual void set_Temporary(bool value);
    public abstract virtual void set_PrefetchCount(Nullable`1<int> value);
    public abstract virtual void set_ConcurrentMessageLimit(Nullable`1<int> value);
    public abstract virtual void set_ConfigureConsumeTopology(bool value);
    public abstract virtual void set_InstanceId(string value);
    public abstract virtual void AddConfigureEndpointCallback(Action`1<IReceiveEndpointConfigurator> callback);
}
[NullableContextAttribute("2")]
public interface MassTransit.IEndpointSettings`1 {
    public string Name { get; }
    public bool IsTemporary { get; }
    public Nullable`1<int> PrefetchCount { get; }
    public Nullable`1<int> ConcurrentMessageLimit { get; }
    public bool ConfigureConsumeTopology { get; }
    public string InstanceId { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsTemporary();
    public abstract virtual Nullable`1<int> get_PrefetchCount();
    public abstract virtual Nullable`1<int> get_ConcurrentMessageLimit();
    public abstract virtual bool get_ConfigureConsumeTopology();
    public abstract virtual string get_InstanceId();
    [NullableContextAttribute("1")]
public abstract virtual void ConfigureEndpoint(IReceiveEndpointConfigurator configurator);
}
[NullableContextAttribute("1")]
public interface MassTransit.IEntityNameFormatter {
    public abstract virtual string FormatEntityName();
}
[NullableContextAttribute("1")]
public interface MassTransit.IEntityNameValidator {
    public abstract virtual bool IsValidEntityName(string name);
    public abstract virtual void ThrowIfInvalidEntityName(string name);
}
[NullableContextAttribute("1")]
public interface MassTransit.IErrorQueueNameFormatter {
    public abstract virtual string FormatErrorQueueName(string queueName);
}
[NullableContextAttribute("1")]
public interface MassTransit.IEventCorrelationConfigurator`2 {
    unknown bool InsertOnInitial {public set; }
    unknown bool ReadOnly {public set; }
    unknown bool ConfigureConsumeTopology {public set; }
    public abstract virtual void set_InsertOnInitial(bool value);
    public abstract virtual void set_ReadOnly(bool value);
    public abstract virtual void set_ConfigureConsumeTopology(bool value);
    public abstract virtual IEventCorrelationConfigurator`2<TSaga, TMessage> CorrelateById(Func`2<ConsumeContext`1<TMessage>, Guid> selector);
    [NullableContextAttribute("0")]
public abstract virtual IEventCorrelationConfigurator`2<TSaga, TMessage> CorrelateById(Expression`1<Func`2<TSaga, T>> propertyExpression, Func`2<ConsumeContext`1<TMessage>, T> selector);
    [NullableContextAttribute("0")]
public abstract virtual IEventCorrelationConfigurator`2<TSaga, TMessage> CorrelateBy(Expression`1<Func`2<TSaga, Nullable`1<T>>> propertyExpression, Func`2<ConsumeContext`1<TMessage>, Nullable`1<T>> selector);
    public abstract virtual IEventCorrelationConfigurator`2<TSaga, TMessage> CorrelateBy(Expression`1<Func`2<TSaga, T>> propertyExpression, Func`2<ConsumeContext`1<TMessage>, T> selector);
    public abstract virtual IEventCorrelationConfigurator`2<TSaga, TMessage> SelectId(Func`2<ConsumeContext`1<TMessage>, Guid> selector);
    public abstract virtual IEventCorrelationConfigurator`2<TSaga, TMessage> CorrelateBy(Expression`1<Func`3<TSaga, ConsumeContext`1<TMessage>, bool>> correlationExpression);
    public abstract virtual IEventCorrelationConfigurator`2<TSaga, TMessage> SetSagaFactory(SagaFactoryMethod`2<TSaga, TMessage> factoryMethod);
    public abstract virtual IEventCorrelationConfigurator`2<TSaga, TMessage> OnMissingInstance(Func`2<IMissingInstanceConfigurator`2<TSaga, TMessage>, IPipe`1<ConsumeContext`1<TMessage>>> getBehavior);
}
[NullableContextAttribute("1")]
public interface MassTransit.IEventObserver`1 {
    public abstract virtual Task PreExecute(BehaviorContext`1<TSaga> context);
    public abstract virtual Task PreExecute(BehaviorContext`2<TSaga, T> context);
    public abstract virtual Task PostExecute(BehaviorContext`1<TSaga> context);
    public abstract virtual Task PostExecute(BehaviorContext`2<TSaga, T> context);
    public abstract virtual Task ExecuteFault(BehaviorContext`1<TSaga> context, Exception exception);
    public abstract virtual Task ExecuteFault(BehaviorContext`2<TSaga, T> context, Exception exception);
}
[NullableContextAttribute("1")]
public interface MassTransit.IExceptionConfigurator {
    public abstract virtual void Handle(Type[] exceptionTypes);
    [NullableContextAttribute("0")]
public abstract virtual void Handle();
    public abstract virtual void Handle(Func`2<T, bool> filter);
    public abstract virtual void Ignore(Type[] exceptionTypes);
    [NullableContextAttribute("0")]
public abstract virtual void Ignore();
    public abstract virtual void Ignore(Func`2<T, bool> filter);
}
public interface MassTransit.IExceptionFilter {
    [NullableContextAttribute("1")]
public abstract virtual bool Match(Exception exception);
}
public interface MassTransit.IExecuteActivity {
}
[NullableContextAttribute("1")]
public interface MassTransit.IExecuteActivity`1 {
    public abstract virtual Task`1<ExecutionResult> Execute(ExecuteContext`1<TArguments> context);
}
public interface MassTransit.IExecuteActivityArgumentsConfigurator`1 {
}
[NullableContextAttribute("1")]
public interface MassTransit.IExecuteActivityConfigurator`2 {
    unknown Nullable`1<int> ConcurrentMessageLimit {public set; }
    public abstract virtual void set_ConcurrentMessageLimit(Nullable`1<int> value);
    public abstract virtual void Arguments(Action`1<IExecuteArgumentsConfigurator`1<TArguments>> configure);
    public abstract virtual void ActivityArguments(Action`1<IExecuteActivityArgumentsConfigurator`1<TArguments>> configure);
    public abstract virtual void RoutingSlip(Action`1<IRoutingSlipConfigurator> configure);
}
[NullableContextAttribute("1")]
public interface MassTransit.IExecuteActivityDefinition {
    public Type ActivityType { get; }
    public Type ArgumentType { get; }
    [NullableAttribute("2")]
public IEndpointDefinition ExecuteEndpointDefinition { get; }
    public abstract virtual Type get_ActivityType();
    public abstract virtual Type get_ArgumentType();
    [NullableContextAttribute("2")]
public abstract virtual IEndpointDefinition get_ExecuteEndpointDefinition();
    public abstract virtual string GetExecuteEndpointName(IEndpointNameFormatter formatter);
}
[NullableContextAttribute("1")]
public interface MassTransit.IExecuteActivityDefinition`2 {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
unknown IEndpointDefinition`1<IExecuteActivity`1<TArguments>> ExecuteEndpointDefinition {public set; }
    public abstract virtual void set_ExecuteEndpointDefinition(IEndpointDefinition`1<IExecuteActivity`1<TArguments>> value);
    public abstract virtual void Configure(IReceiveEndpointConfigurator endpointConfigurator, IExecuteActivityConfigurator`2<TActivity, TArguments> executeActivityConfigurator, IRegistrationContext context);
}
[NullableContextAttribute("1")]
public interface MassTransit.IExecuteActivityFactory`2 {
    public abstract virtual Task Execute(ExecuteContext`1<TArguments> context, IPipe`1<ExecuteActivityContext`2<TActivity, TArguments>> next);
}
[NullableContextAttribute("1")]
public interface MassTransit.IExecuteActivityRegistrationConfigurator {
    public abstract virtual void Endpoint(Action`1<IEndpointRegistrationConfigurator> configure);
    public abstract virtual void ExcludeFromConfigureEndpoints();
}
[NullableContextAttribute("1")]
public interface MassTransit.IExecuteActivityRegistrationConfigurator`2 {
}
public interface MassTransit.IExecuteArgumentsConfigurator`1 {
}
[NullableContextAttribute("1")]
public interface MassTransit.IFilter`1 {
    public abstract virtual Task Send(TContext context, IPipe`1<TContext> next);
}
[NullableContextAttribute("1")]
public interface MassTransit.IFilterObserver {
    public abstract virtual Task PreSend(T context);
    public abstract virtual Task PostSend(T context);
    public abstract virtual Task SendFault(T context, Exception exception);
}
[NullableContextAttribute("1")]
public interface MassTransit.IFilterObserver`1 {
    public abstract virtual Task PreSend(TContext context);
    public abstract virtual Task PostSend(TContext context);
    public abstract virtual Task SendFault(TContext context, Exception exception);
}
[NullableContextAttribute("1")]
public interface MassTransit.IFilterObserverConnector {
    public abstract virtual ConnectHandle ConnectObserver(IFilterObserver`1<T> observer);
    public abstract virtual ConnectHandle ConnectObserver(IFilterObserver observer);
}
[NullableContextAttribute("1")]
public interface MassTransit.IFilterObserverConnector`1 {
    public abstract virtual ConnectHandle ConnectObserver(IFilterObserver`1<TContext> observer);
}
[NullableContextAttribute("1")]
public interface MassTransit.IFutureDefinition {
    public Type FutureType { get; }
    [NullableAttribute("2")]
public IEndpointDefinition EndpointDefinition { get; }
    public abstract virtual Type get_FutureType();
    [NullableContextAttribute("2")]
public abstract virtual IEndpointDefinition get_EndpointDefinition();
    public abstract virtual string GetEndpointName(IEndpointNameFormatter formatter);
}
[NullableContextAttribute("1")]
public interface MassTransit.IFutureDefinition`1 {
    unknown IEndpointDefinition`1<TFuture> EndpointDefinition {public set; }
    public abstract virtual void set_EndpointDefinition(IEndpointDefinition`1<TFuture> value);
    public abstract virtual void Configure(IReceiveEndpointConfigurator endpointConfigurator, ISagaConfigurator`1<FutureState> sagaConfigurator, IRegistrationContext context);
}
[NullableContextAttribute("1")]
public interface MassTransit.IGroupKeyProvider`2 {
    public abstract virtual bool TryGetKey(ConsumeContext`1<TMessage> context, TKey& key);
}
[NullableContextAttribute("1")]
public interface MassTransit.IHandlerConfigurationObserver {
    [EditorBrowsableAttribute("1")]
public abstract virtual void HandlerConfigured(IHandlerConfigurator`1<TMessage> configurator);
}
[NullableContextAttribute("1")]
public interface MassTransit.IHandlerConfigurationObserverConnector {
    [EditorBrowsableAttribute("1")]
public abstract virtual ConnectHandle ConnectHandlerConfigurationObserver(IHandlerConfigurationObserver observer);
}
public interface MassTransit.IHandlerConfigurator`1 {
}
public interface MassTransit.IInstanceConfigurator {
}
public interface MassTransit.IInstanceConfigurator`1 {
}
[NullableContextAttribute("1")]
public interface MassTransit.IItineraryBuilder {
    public Guid TrackingNumber { get; }
    public abstract virtual Guid get_TrackingNumber();
    public abstract virtual void AddActivity(string name, Uri executeAddress);
    public abstract virtual void AddActivity(string name, Uri executeAddress, object arguments);
    public abstract virtual void AddActivity(string name, Uri executeAddress, IDictionary`2<string, object> arguments);
    public abstract virtual void AddVariable(string key, string value);
    public abstract virtual void AddVariable(string key, object value);
    public abstract virtual void SetVariables(object values);
    public abstract virtual void SetVariables(IEnumerable`1<KeyValuePair`2<string, object>> values);
    public abstract virtual int AddActivitiesFromSourceItinerary();
    public abstract virtual void AddSubscription(Uri address, RoutingSlipEvents events);
    public abstract virtual void AddSubscription(Uri address, RoutingSlipEvents events, RoutingSlipEventContents contents);
    public abstract virtual Task AddSubscription(Uri address, RoutingSlipEvents events, Func`2<ISendEndpoint, Task> callback);
    public abstract virtual Task AddSubscription(Uri address, RoutingSlipEvents events, RoutingSlipEventContents contents, Func`2<ISendEndpoint, Task> callback);
    public abstract virtual void AddSubscription(Uri address, RoutingSlipEvents events, RoutingSlipEventContents contents, string activityName);
    public abstract virtual Task AddSubscription(Uri address, RoutingSlipEvents events, RoutingSlipEventContents contents, string activityName, Func`2<ISendEndpoint, Task> callback);
}
[NullableContextAttribute("1")]
public interface MassTransit.IJobConsumer`1 {
    public abstract virtual Task Run(JobContext`1<TJob> context);
}
[NullableContextAttribute("1")]
public interface MassTransit.ILoadSagaRepository`1 {
    public abstract virtual Task`1<TSaga> Load(Guid correlationId);
}
[NullableContextAttribute("1")]
public interface MassTransit.IMessageConfigurationObserver {
    public abstract virtual void MessageConfigured(IConsumePipeConfigurator configurator);
}
[NullableContextAttribute("1")]
public interface MassTransit.IMessageConsumeTopology`1 {
    public abstract virtual void Apply(ITopologyPipeBuilder`1<ConsumeContext`1<TMessage>> builder);
}
public interface MassTransit.IMessageConsumeTopologyConfigurator {
    public bool ConfigureConsumeTopology { get; public set; }
    public abstract virtual bool get_ConfigureConsumeTopology();
    public abstract virtual void set_ConfigureConsumeTopology(bool value);
    [NullableContextAttribute("1")]
public abstract virtual bool TryAddConvention(IConsumeTopologyConvention convention);
}
[NullableContextAttribute("1")]
public interface MassTransit.IMessageConsumeTopologyConfigurator`1 {
    public abstract virtual void Add(IMessageConsumeTopology`1<TMessage> consumeTopology);
    public abstract virtual void AddDelegate(IMessageConsumeTopology`1<TMessage> configuration);
    public abstract virtual bool TryAddConvention(IMessageConsumeTopologyConvention`1<TMessage> convention);
    public abstract virtual void UpdateConvention(Func`2<TConvention, TConvention> update);
    public abstract virtual void AddOrUpdateConvention(Func`1<TConvention> add, Func`2<TConvention, TConvention> update);
}
[NullableContextAttribute("1")]
public interface MassTransit.IMessageData {
    public Uri Address { get; }
    public bool HasValue { get; }
    public abstract virtual Uri get_Address();
    public abstract virtual bool get_HasValue();
}
[NullableContextAttribute("1")]
public interface MassTransit.IMessageDataRepository {
    public abstract virtual Task`1<Stream> Get(Uri address, CancellationToken cancellationToken);
    public abstract virtual Task`1<Uri> Put(Stream stream, Nullable`1<TimeSpan> timeToLive, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface MassTransit.IMessageDeserializer {
    public ContentType ContentType { get; }
    public abstract virtual ContentType get_ContentType();
    public abstract virtual ConsumeContext Deserialize(ReceiveContext receiveContext);
    public abstract virtual SerializerContext Deserialize(MessageBody body, Headers headers, Uri destinationAddress);
    public abstract virtual MessageBody GetMessageBody(string text);
}
[NullableContextAttribute("1")]
public interface MassTransit.IMessageEntityNameFormatter`1 {
    public abstract virtual string FormatEntityName();
}
[NullableContextAttribute("1")]
public interface MassTransit.IMessageFilterConfigurator {
    public abstract virtual void Include(Func`2<T, bool> filter);
    public abstract virtual void Exclude(Func`2<T, bool> filter);
}
[NullableContextAttribute("1")]
public interface MassTransit.IMessagePublishTopology {
    public bool Exclude { get; }
    public abstract virtual bool get_Exclude();
    public abstract virtual bool TryGetPublishAddress(Uri baseAddress, Uri& publishAddress);
}
[NullableContextAttribute("1")]
public interface MassTransit.IMessagePublishTopology`1 {
    public abstract virtual void Apply(ITopologyPipeBuilder`1<PublishContext`1<TMessage>> builder);
}
public interface MassTransit.IMessagePublishTopologyConfigurator {
    unknown bool Exclude {public set; }
    public abstract virtual void set_Exclude(bool value);
    [NullableContextAttribute("1")]
public abstract virtual bool TryAddConvention(IPublishTopologyConvention convention);
}
[NullableContextAttribute("1")]
public interface MassTransit.IMessagePublishTopologyConfigurator`1 {
    public abstract virtual void Add(IMessagePublishTopology`1<TMessage> publishTopology);
    public abstract virtual void AddDelegate(IMessagePublishTopology`1<TMessage> configuration);
    public abstract virtual bool TryAddConvention(IMessagePublishTopologyConvention`1<TMessage> convention);
    public abstract virtual void AddOrUpdateConvention(Func`1<TConvention> add, Func`2<TConvention, TConvention> update);
}
[NullableContextAttribute("1")]
public interface MassTransit.IMessageScheduler {
    public abstract virtual Task`1<ScheduledMessage`1<T>> ScheduleSend(Uri destinationAddress, DateTime scheduledTime, T message, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage`1<T>> ScheduleSend(Uri destinationAddress, DateTime scheduledTime, T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage`1<T>> ScheduleSend(Uri destinationAddress, DateTime scheduledTime, T message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage> ScheduleSend(Uri destinationAddress, DateTime scheduledTime, object message, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage> ScheduleSend(Uri destinationAddress, DateTime scheduledTime, object message, Type messageType, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage> ScheduleSend(Uri destinationAddress, DateTime scheduledTime, object message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage> ScheduleSend(Uri destinationAddress, DateTime scheduledTime, object message, Type messageType, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage`1<T>> ScheduleSend(Uri destinationAddress, DateTime scheduledTime, object values, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage`1<T>> ScheduleSend(Uri destinationAddress, DateTime scheduledTime, object values, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage`1<T>> ScheduleSend(Uri destinationAddress, DateTime scheduledTime, object values, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    public abstract virtual Task CancelScheduledSend(Uri destinationAddress, Guid tokenId, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage`1<T>> SchedulePublish(DateTime scheduledTime, T message, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage`1<T>> SchedulePublish(DateTime scheduledTime, T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage`1<T>> SchedulePublish(DateTime scheduledTime, T message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage> SchedulePublish(DateTime scheduledTime, object message, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage> SchedulePublish(DateTime scheduledTime, object message, Type messageType, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage> SchedulePublish(DateTime scheduledTime, object message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage> SchedulePublish(DateTime scheduledTime, object message, Type messageType, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage`1<T>> SchedulePublish(DateTime scheduledTime, object values, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage`1<T>> SchedulePublish(DateTime scheduledTime, object values, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage`1<T>> SchedulePublish(DateTime scheduledTime, object values, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    public abstract virtual Task CancelScheduledPublish(Guid tokenId, CancellationToken cancellationToken);
    public abstract virtual Task CancelScheduledPublish(Type messageType, Guid tokenId, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface MassTransit.IMessageSendTopology`1 {
    public abstract virtual void Apply(ITopologyPipeBuilder`1<SendContext`1<TMessage>> builder);
}
public interface MassTransit.IMessageSendTopologyConfigurator {
    [NullableContextAttribute("1")]
public abstract virtual bool TryAddConvention(ISendTopologyConvention convention);
}
[NullableContextAttribute("1")]
public interface MassTransit.IMessageSendTopologyConfigurator`1 {
    public abstract virtual void Add(IMessageSendTopology`1<TMessage> sendTopology);
    public abstract virtual void AddDelegate(IMessageSendTopology`1<TMessage> configuration);
    public abstract virtual bool TryAddConvention(IMessageSendTopologyConvention`1<TMessage> convention);
    public abstract virtual void UpdateConvention(Func`2<TConvention, TConvention> update);
    public abstract virtual void AddOrUpdateConvention(Func`1<TConvention> add, Func`2<TConvention, TConvention> update);
    public abstract virtual bool TryGetConvention(TConvention& convention);
}
[NullableContextAttribute("1")]
public interface MassTransit.IMessageSerializer {
    public ContentType ContentType { get; }
    public abstract virtual ContentType get_ContentType();
    public abstract virtual MessageBody GetMessageBody(SendContext`1<T> context);
}
[NullableContextAttribute("1")]
public interface MassTransit.IMessageTopology {
    public IEntityNameFormatter EntityNameFormatter { get; }
    public abstract virtual IEntityNameFormatter get_EntityNameFormatter();
    public abstract virtual IMessageTopology`1<T> GetMessageTopology();
}
[NullableContextAttribute("1")]
public interface MassTransit.IMessageTopology`1 {
    public IMessageEntityNameFormatter`1<TMessage> EntityNameFormatter { get; }
    public string EntityName { get; }
    public abstract virtual IMessageEntityNameFormatter`1<TMessage> get_EntityNameFormatter();
    public abstract virtual string get_EntityName();
}
[NullableContextAttribute("1")]
public interface MassTransit.IMessageTypeFilterConfigurator {
    public abstract virtual void Include(Type[] messageTypes);
    public abstract virtual void Include(Func`2<Type, bool> filter);
    public abstract virtual void Include();
    public abstract virtual void Exclude(Type[] messageTypes);
    public abstract virtual void Exclude(Func`2<Type, bool> filter);
    public abstract virtual void Exclude();
}
[NullableContextAttribute("1")]
public interface MassTransit.IMissingInstanceConfigurator`2 {
    public abstract virtual IPipe`1<ConsumeContext`1<TMessage>> Discard();
    public abstract virtual IPipe`1<ConsumeContext`1<TMessage>> Fault();
    public abstract virtual IPipe`1<ConsumeContext`1<TMessage>> ExecuteAsync(Func`2<ConsumeContext`1<TMessage>, Task> callback);
    public abstract virtual IPipe`1<ConsumeContext`1<TMessage>> Execute(Action`1<ConsumeContext`1<TMessage>> callback);
}
public class MassTransit.IndexedAttribute : Attribute {
}
[NullableContextAttribute("1")]
public interface MassTransit.INewIdFormatter {
    public abstract virtual string Format(Byte[]& modreq(System.Runtime.InteropServices.InAttribute) bytes);
}
public interface MassTransit.INewIdGenerator {
    public abstract virtual NewId Next();
    public abstract virtual ArraySegment`1<NewId> Next(NewId[] ids, int index, int count);
    public abstract virtual Guid NextGuid();
    public abstract virtual ArraySegment`1<Guid> NextSequentialGuid(Guid[] ids, int index, int count);
    public abstract virtual Guid NextSequentialGuid();
}
[NullableContextAttribute("1")]
public interface MassTransit.INewIdParser {
    public abstract virtual NewId Parse(String& modreq(System.Runtime.InteropServices.InAttribute) text);
}
[NullableContextAttribute("1")]
public interface MassTransit.Initializers.IInitializerVariable`1 {
    public abstract virtual Task`1<T> GetValue(InitializeContext`1<TMessage> context);
}
[NullableContextAttribute("1")]
public interface MassTransit.Initializers.IMessageInitializer`1 {
    public abstract virtual InitializeContext`1<TMessage> Create(PipeContext context);
    public abstract virtual InitializeContext`1<TMessage> Create(CancellationToken cancellationToken);
    public abstract virtual Task`1<InitializeContext`1<TMessage>> Initialize(object input, CancellationToken cancellationToken);
    public abstract virtual Task`1<InitializeContext`1<TMessage>> Initialize(InitializeContext`1<TMessage> context, object input);
    public abstract virtual Task`1<SendTuple`1<TMessage>> InitializeMessage(PipeContext context, object input, IPipe`1<SendContext`1<TMessage>> pipe);
    public abstract virtual Task`1<SendTuple`1<TMessage>> InitializeMessage(PipeContext context, object input, Object[] moreInputs, IPipe`1<SendContext`1<TMessage>> pipe);
    public abstract virtual Task`1<SendTuple`1<TMessage>> InitializeMessage(object input, IPipe`1<SendContext`1<TMessage>> pipe, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface MassTransit.Initializers.InitializeContext {
    public int Depth { get; }
    public InitializeContext Parent { get; }
    public abstract virtual int get_Depth();
    public abstract virtual InitializeContext get_Parent();
    public abstract virtual bool TryGetParent(InitializeContext`1& parentContext);
    public abstract virtual InitializeContext`1<T> CreateMessageContext(T message);
}
[NullableContextAttribute("1")]
public interface MassTransit.Initializers.InitializeContext`1 {
    public Type MessageType { get; }
    public TMessage Message { get; }
    public abstract virtual Type get_MessageType();
    public abstract virtual TMessage get_Message();
    public abstract virtual InitializeContext`2<TMessage, T> CreateInputContext(T input);
}
[NullableContextAttribute("1")]
public interface MassTransit.Initializers.InitializeContext`2 {
    public bool HasInput { get; }
    public TInput Input { get; }
    public abstract virtual bool get_HasInput();
    public abstract virtual TInput get_Input();
}
public class MassTransit.Initializers.Variables.IdVariable : object {
    private Guid _id;
    public IdVariable(Guid id);
    [NullableContextAttribute("1")]
private sealed virtual override Task`1<Guid> MassTransit.Initializers.IInitializerVariable<System.Guid>.GetValue(InitializeContext`1<TMessage> context);
    [NullableContextAttribute("1")]
public static Guid op_Implicit(IdVariable variable);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private IdContext <MassTransit.Initializers.IInitializerVariable<System.Guid>.GetValue>b__3_0();
}
public class MassTransit.Initializers.Variables.TimestampVariable : object {
    private DateTime _timestamp;
    public TimestampVariable(DateTime timestamp);
    [NullableContextAttribute("1")]
private sealed virtual override Task`1<DateTime> MassTransit.Initializers.IInitializerVariable<System.DateTime>.GetValue(InitializeContext`1<TMessage> context);
    [NullableContextAttribute("1")]
public static DateTime op_Implicit(TimestampVariable variable);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private TimestampContext <MassTransit.Initializers.IInitializerVariable<System.DateTime>.GetValue>b__3_0();
}
[NullableContextAttribute("1")]
public interface MassTransit.InitiatedBy`1 {
}
[NullableContextAttribute("1")]
public interface MassTransit.InitiatedByOrOrchestrates`1 {
}
public static class MassTransit.Internals.DateTimeConstants : object {
    public static DateTime Epoch;
    private static DateTimeConstants();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.Internals.DictionaryExtensions : object {
    [ExtensionAttribute]
public static TValue GetOrAdd(IDictionary`2<TKey, TValue> dictionary, TKey key, Func`2<TKey, TValue> valueFactory);
    [ExtensionAttribute]
public static IDictionary`2<string, TValue> MergeLeft(IDictionary`2<string, TValue> source, IDictionary`2[] others);
}
[ExtensionAttribute]
public static class MassTransit.Internals.ExceptionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void Rethrow(Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.Internals.ExpressionExtensions : object {
    [ExtensionAttribute]
public static string GetMemberName(Expression`1<Func`2<T, TMember>> expression);
    [ExtensionAttribute]
public static string GetMemberName(Expression`1<Action`1<T>> expression);
    [ExtensionAttribute]
public static string GetMemberName(Expression`1<Func`1<T>> expression);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static PropertyInfo GetPropertyInfo(Expression`1<Func`2<T, TMember>> expression);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static PropertyInfo GetPropertyInfo(Expression`1<Func`1<T>> expression);
    [ExtensionAttribute]
public static MemberInfo GetMemberInfo(Expression`1<Action`1<T>> expression);
    [ExtensionAttribute]
public static MemberExpression GetMemberExpression(Expression`1<Func`2<T, TMember>> expression);
    [ExtensionAttribute]
public static MemberExpression GetMemberExpression(Expression`1<Action`1<T>> expression);
    [ExtensionAttribute]
public static MemberExpression GetMemberExpression(Expression`1<Func`1<T>> expression);
    [ExtensionAttribute]
public static MemberExpression GetMemberExpression(Expression`1<Action`2<T1, T2>> expression);
    private static MemberExpression GetMemberExpression(Expression body);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Internals.GraphValidation.AdjacencyList`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<TNode, HashSet`1<Edge`2<T, TNode>>> _edges;
    private NodeList`2<T, TNode> _nodeList;
    public IEnumerable`1<TNode> SourceNodes { get; }
    public AdjacencyList`2(Func`3<int, T, TNode> nodeFactory, int capacity);
    public IEnumerable`1<TNode> get_SourceNodes();
    public HashSet`1<Edge`2<T, TNode>> GetEdges(TNode index);
    public void AddEdge(T source, T target, int weight);
    private void AddEdge(TNode source, TNode target, int weight);
    public TNode GetNode(T key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Internals.GraphValidation.CyclicGraphException : MassTransitException {
    public CyclicGraphException(string message);
    public CyclicGraphException(string message, Exception innerException);
    protected CyclicGraphException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Internals.GraphValidation.DependencyGraph`1 : object {
    private AdjacencyList`2<T, DependencyGraphNode`1<T>> _adjacencyList;
    public DependencyGraph`1(int capacity);
    private static DependencyGraphNode`1<T> DefaultNodeFactory(int index, T value);
    public void Add(T source);
    public void Add(T source, T target);
    public void Add(T source, IEnumerable`1<T> targets);
    public IEnumerable`1<T> GetItemsInOrder();
    public IEnumerable`1<T> GetItemsInOrder(T source);
    public void EnsureGraphIsAcyclic();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Internals.GraphValidation.DependencyGraphNode`1 : Node`1<T> {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LowLink>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visited>k__BackingField;
    public int Index { get; public set; }
    public int LowLink { get; public set; }
    public bool Visited { get; public set; }
    [NullableContextAttribute("1")]
public DependencyGraphNode`1(int index, T value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Index();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Index(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LowLink();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LowLink(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Visited();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Visited(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Internals.GraphValidation.Edge`2 : ValueType {
    public TNode Source;
    public TNode Target;
    public int Weight;
    public Edge`2(TNode source, TNode target, int weight);
    public sealed virtual int CompareTo(Edge`2<T, TNode> other);
}
public interface MassTransit.Internals.GraphValidation.ITarjanNodeProperties {
    public int Index { get; public set; }
    public int LowLink { get; public set; }
    public abstract virtual int get_Index();
    public abstract virtual void set_Index(int value);
    public abstract virtual int get_LowLink();
    public abstract virtual void set_LowLink(int value);
}
public interface MassTransit.Internals.GraphValidation.ITopologicalSortNodeProperties {
    public bool Visited { get; public set; }
    public abstract virtual bool get_Visited();
    public abstract virtual void set_Visited(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Internals.GraphValidation.Node`1 : object {
    private int _index;
    public T Value;
    protected Node`1(int index, T value);
    public sealed virtual int CompareTo(DependencyGraphNode`1<T> other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class MassTransit.Internals.GraphValidation.NodeList`2 : object {
    private Func`3<int, T, TNode> _nodeFactory;
    private List`1<TNode> _nodes;
    private NodeTable`1<T> _nodeTable;
    public TNode Item { get; }
    public NodeList`2(Func`3<int, T, TNode> nodeFactory, int capacity);
    public TNode get_Item(T key);
    public sealed virtual IEnumerator`1<TNode> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public int Index(T key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class MassTransit.Internals.GraphValidation.NodeTable`1 : object {
    private IDictionary`2<T, int> _nodes;
    private int _count;
    public int Item { get; }
    public NodeTable`1(int capacity);
    public int get_Item(T key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Internals.GraphValidation.Tarjan`2 : object {
    private AdjacencyList`2<T, TNode> _list;
    private Stack`1<TNode> _stack;
    private int _index;
    [CompilerGeneratedAttribute]
private IList`1<IList`1<TNode>> <Result>k__BackingField;
    public IList`1<IList`1<TNode>> Result { get; }
    public Tarjan`2(AdjacencyList`2<T, TNode> list);
    [CompilerGeneratedAttribute]
public IList`1<IList`1<TNode>> get_Result();
    private void Compute(TNode v);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Internals.GraphValidation.TopologicalSort`2 : object {
    private AdjacencyList`2<T, TNode> _list;
    private List`1<TNode> _results;
    private IEnumerable`1<TNode> _sourceNodes;
    public IEnumerable`1<TNode> Result { get; }
    public TopologicalSort`2(AdjacencyList`2<T, TNode> list);
    public TopologicalSort`2(AdjacencyList`2<T, TNode> list, T source);
    public IEnumerable`1<TNode> get_Result();
    private void Sort();
    private void Sort(TNode node);
}
[NullableContextAttribute("1")]
internal interface MassTransit.Internals.IMessageTypeCache {
    public string DiagnosticAddress { get; }
    public bool IsValidMessageType { get; }
    [NullableAttribute("2")]
public string InvalidMessageTypeReason { get; }
    public bool IsTemporaryMessageType { get; }
    public Type[] MessageTypes { get; }
    public String[] MessageTypeNames { get; }
    public IEnumerable`1<PropertyInfo> Properties { get; }
    public abstract virtual string get_DiagnosticAddress();
    public abstract virtual bool get_IsValidMessageType();
    [NullableContextAttribute("2")]
public abstract virtual string get_InvalidMessageTypeReason();
    public abstract virtual bool get_IsTemporaryMessageType();
    public abstract virtual Type[] get_MessageTypes();
    public abstract virtual String[] get_MessageTypeNames();
    public abstract virtual IEnumerable`1<PropertyInfo> get_Properties();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.Internals.InterfaceExtensions : object {
    private static InterfaceReflectionCache _cache;
    private static InterfaceExtensions();
    [ExtensionAttribute]
public static bool HasInterface(Type type);
    [ExtensionAttribute]
public static bool HasInterface(Type type, Type interfaceType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Type GetInterface(Type type);
    [ExtensionAttribute]
public static Type GetInterface(Type type, Type interfaceType);
    [ExtensionAttribute]
public static bool IsTask(Type type, Type& taskType);
    [ExtensionAttribute]
public static bool ClosesType(Type type, Type openType);
    [ExtensionAttribute]
public static bool ClosesType(Type type, Type openType, Type[]& arguments);
    [ExtensionAttribute]
public static bool ClosesType(Type type, Type openType, Type& closedType);
    [ExtensionAttribute]
public static Type GetClosingArgument(Type type, Type openType);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetClosingArguments(Type type, Type openType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Internals.InterfaceReflectionCache : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<Type, ConcurrentDictionary`2<Type, Type>> _cache;
    public Type GetGenericInterface(Type type, Type interfaceType);
    public Type Get(Type type, Type interfaceType);
    private Type GetInterfaceInternal(Type type, Type interfaceType);
}
public interface MassTransit.Internals.IReadOnlyPropertyCache`1 {
    [NullableContextAttribute("1")]
public abstract virtual bool TryGetValue(string key, ReadOnlyProperty`1& value);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface MassTransit.Internals.IReadWritePropertyCache`1 {
    public ReadWriteProperty`1<T> Item { get; }
    public abstract virtual ReadWriteProperty`1<T> get_Item(string name);
    public abstract virtual bool TryGetValue(string key, ReadWriteProperty`1& value);
    public abstract virtual bool TryGetProperty(string propertyName, ReadWriteProperty`1& property);
}
[NullableContextAttribute("1")]
public interface MassTransit.Internals.ITypeCache`1 {
    public string ShortName { get; }
    public IReadOnlyPropertyCache`1<T> ReadOnlyPropertyCache { get; }
    public IReadWritePropertyCache`1<T> ReadWritePropertyCache { get; }
    public abstract virtual string get_ShortName();
    public abstract virtual IReadOnlyPropertyCache`1<T> get_ReadOnlyPropertyCache();
    public abstract virtual IReadWritePropertyCache`1<T> get_ReadWritePropertyCache();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.Internals.QueryStringExtensions : object {
    [ExtensionAttribute]
public static bool TryGetValueFromQueryString(Uri uri, string key, String& value);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static T GetValueFromQueryString(Uri uri, string key, T defaultValue);
    [ExtensionAttribute]
public static string ParseHostPath(Uri address);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void ParseHostPathAndEntityName(Uri address, String& hostPath, String& entityName);
    [IteratorStateMachineAttribute("MassTransit.Internals.QueryStringExtensions/<SplitQueryString>d__4")]
[ExtensionAttribute]
public static IEnumerable`1<ValueTuple`2<string, string>> SplitQueryString(Uri address);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Internals.ReadOnlyProperty : object {
    public Func`2<object, object> GetProperty;
    [CompilerGeneratedAttribute]
private PropertyInfo <Property>k__BackingField;
    public PropertyInfo Property { get; private set; }
    public ReadOnlyProperty(PropertyInfo property);
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
private void set_Property(PropertyInfo value);
    public object Get(object instance);
    private static Func`2<object, object> GetGetMethod(PropertyInfo property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Internals.ReadOnlyProperty`1 : object {
    public Func`2<T, object> GetProperty;
    [CompilerGeneratedAttribute]
private PropertyInfo <Property>k__BackingField;
    public PropertyInfo Property { get; private set; }
    public ReadOnlyProperty`1(Expression`1<Func`2<T, object>> propertyExpression);
    [NullableContextAttribute("2")]
public ReadOnlyProperty`1(PropertyInfo property);
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
private void set_Property(PropertyInfo value);
    public object Get(T instance);
    private static Func`2<T, object> GetGetMethod(PropertyInfo property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Internals.ReadOnlyProperty`2 : object {
    public Func`2<T, TProperty> GetProperty;
    [CompilerGeneratedAttribute]
private PropertyInfo <Property>k__BackingField;
    public PropertyInfo Property { get; private set; }
    public ReadOnlyProperty`2(Expression`1<Func`2<T, object>> propertyExpression);
    [NullableContextAttribute("2")]
public ReadOnlyProperty`2(PropertyInfo property);
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
private void set_Property(PropertyInfo value);
    public TProperty Get(T instance);
    private static Func`2<T, TProperty> GetGetMethod(PropertyInfo property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Internals.ReadOnlyPropertyCache`1 : object {
    private IDictionary`2<string, ReadOnlyProperty`1<T>> _properties;
    public sealed virtual IEnumerator`1<ReadOnlyProperty`1<T>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool TryGetValue(string key, ReadOnlyProperty`1& value);
    private static IDictionary`2<string, ReadOnlyProperty`1<T>> CreatePropertyCache();
    public object Get(Expression`1<Func`2<T, object>> propertyExpression, T instance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Internals.ReadWriteProperty : ReadOnlyProperty {
    public Action`2<object, object> SetProperty;
    public ReadWriteProperty(PropertyInfo property);
    public void Set(object instance, object value);
    private static Action`2<object, object> GetSetMethod(PropertyInfo property);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Internals.ReadWriteProperty`1 : ReadOnlyProperty`1<T> {
    public Action`2<T, object> SetProperty;
    public ReadWriteProperty`1(Expression`1<Func`2<T, object>> propertyExpression);
    public ReadWriteProperty`1(Expression`1<Func`2<T, object>> propertyExpression, bool includeNonPublic);
    [NullableContextAttribute("2")]
public ReadWriteProperty`1(PropertyInfo property);
    public void Set(T instance, object value);
    private static Action`2<T, object> GetSetMethod(PropertyInfo property);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Internals.ReadWriteProperty`2 : ReadOnlyProperty`2<T, TProperty> {
    public Action`2<T, TProperty> SetProperty;
    public ReadWriteProperty`2(Expression`1<Func`2<T, object>> propertyExpression);
    public ReadWriteProperty`2(Expression`1<Func`2<T, object>> propertyExpression, bool includeNonPublic);
    [NullableContextAttribute("2")]
public ReadWriteProperty`2(PropertyInfo property);
    public void Set(T instance, TProperty value);
    private static Action`2<T, TProperty> GetSetMethod(PropertyInfo property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class MassTransit.Internals.ReadWritePropertyCache`1 : object {
    private IDictionary`2<string, ReadWriteProperty`1<T>> _properties;
    public ReadWriteProperty`1<T> Item { get; }
    public ReadWritePropertyCache`1(bool includeNonPublic);
    public sealed virtual ReadWriteProperty`1<T> get_Item(string name);
    public sealed virtual IEnumerator`1<ReadWriteProperty`1<T>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool TryGetValue(string key, ReadWriteProperty`1& value);
    public sealed virtual bool TryGetProperty(string propertyName, ReadWriteProperty`1& property);
    private static IDictionary`2<string, ReadWriteProperty`1<T>> CreatePropertyCache(bool includeNonPublic);
    public void Set(Expression`1<Func`2<T, object>> propertyExpression, T instance, object value);
    public object Get(Expression`1<Func`2<T, object>> propertyExpression, T instance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.Internals.TaskExtensions : object {
    private static TimeSpan _defaultTimeout;
    private static TaskExtensions();
    [ExtensionAttribute]
public static Task OrCanceled(Task task, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> OrCanceled(Task`1<T> task, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task OrTimeout(Task task, int ms, int s, int m, int h, int d, CancellationToken cancellationToken, string memberName, string filePath, Nullable`1<int> lineNumber);
    [ExtensionAttribute]
public static Task OrTimeout(Task task, TimeSpan timeout, CancellationToken cancellationToken, string memberName, string filePath, Nullable`1<int> lineNumber);
    [ExtensionAttribute]
private static Task OrTimeoutInternal(Task task, TimeSpan timeout, CancellationToken cancellationToken, string memberName, string filePath, Nullable`1<int> lineNumber);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task`1<T> OrTimeout(Task`1<T> task, int ms, int s, int m, int h, int d, CancellationToken cancellationToken, string memberName, string filePath, Nullable`1<int> lineNumber);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task`1<T> OrTimeout(Task`1<T> task, TimeSpan timeout, CancellationToken cancellationToken, string memberName, string filePath, Nullable`1<int> lineNumber);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
private static Task`1<T> OrTimeoutInternal(Task`1<T> task, TimeSpan timeout, CancellationToken cancellationToken, string memberName, string filePath, Nullable`1<int> lineNumber);
    [NullableContextAttribute("2")]
private static string FormatTimeoutMessage(string memberName, string filePath, Nullable`1<int> lineNumber);
    [ExtensionAttribute]
public static bool IsCompletedSuccessfully(Task task);
    [ExtensionAttribute]
public static void IgnoreUnobservedExceptions(Task task);
    [ExtensionAttribute]
public static void TrySetFromTask(TaskCompletionSource`1<T> source, Task task, T value);
    [ExtensionAttribute]
public static void TrySetFromTask(TaskCompletionSource`1<T> source, Task`1<T> task);
    private static CancellationTokenRegistration RegisterTask(CancellationToken cancellationToken, Task& cancelTask);
    [NullableContextAttribute("2")]
private static void SetCompleted(object obj);
}
[ExtensionAttribute]
public static class MassTransit.Internals.TimeSpanExtensions : object {
    private static TimeSpan _day;
    private static TimeSpan _hour;
    private static TimeSpan _month;
    private static TimeSpan _year;
    private static TimeSpanExtensions();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string ToFriendlyString(TimeSpan ts);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.Internals.TypeExtensions : object {
    private static TypeNameFormatter _typeNameFormatter;
    private static TypeExtensions();
    [ExtensionAttribute]
public static string GetTypeName(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetAllProperties(Type type);
    [IteratorStateMachineAttribute("MassTransit.Internals.TypeExtensions/<GetAllProperties>d__3")]
[ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetAllProperties(TypeInfo typeInfo);
    [IteratorStateMachineAttribute("MassTransit.Internals.TypeExtensions/<GetAllInterfaces>d__4")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetAllInterfaces(Type type);
    [IteratorStateMachineAttribute("MassTransit.Internals.TypeExtensions/<GetAllStaticProperties>d__5")]
[ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetAllStaticProperties(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetStaticProperties(Type type);
    [ExtensionAttribute]
public static bool IsConcrete(Type type);
    [ExtensionAttribute]
public static bool IsInterfaceOrConcreteClass(Type type);
    [ExtensionAttribute]
public static bool IsConcreteAndAssignableTo(Type type, Type assignableType);
    [ExtensionAttribute]
public static bool IsConcreteAndAssignableTo(Type type);
    [ExtensionAttribute]
public static bool IsNullable(Type type, Type& underlyingType);
    [ExtensionAttribute]
public static bool IsOpenGeneric(Type type);
    [ExtensionAttribute]
public static bool CanBeNull(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetAttribute(ICustomAttributeProvider provider);
    [ExtensionAttribute]
public static bool HasAttribute(ICustomAttributeProvider provider);
    [ExtensionAttribute]
public static bool IsAnonymousType(Type type);
    [ExtensionAttribute]
public static bool IsFSharpType(Type type);
    [ExtensionAttribute]
public static bool IsInNamespace(Type type, string nameSpace);
    [ExtensionAttribute]
public static bool IsValueTypeOrObject(Type valueType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Internals.TypeNameFormatter : object {
    private ConcurrentDictionary`2<Type, string> _cache;
    private string _genericArgumentSeparator;
    private string _genericClose;
    private string _genericOpen;
    private string _namespaceSeparator;
    private string _nestedTypeSeparator;
    public TypeNameFormatter(string genericArgumentSeparator, string genericOpen, string genericClose, string namespaceSeparator, string nestedTypeSeparator);
    public string GetTypeName(Type type);
    private string FormatTypeName(Type type);
    private string FormatTypeName(StringBuilder sb, Type type, string scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.InvalidCompensationAddressException : ActivityExecutionException {
    public InvalidCompensationAddressException(Uri address);
    public InvalidCompensationAddressException(string message);
    public InvalidCompensationAddressException(string message, Exception innerException);
    protected InvalidCompensationAddressException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MassTransit.InVar : object {
    public static TimestampVariable Timestamp { get; }
    public static IdVariable Id { get; }
    public static IdVariable CorrelationId { get; }
    public static TimestampVariable get_Timestamp();
    public static IdVariable get_Id();
    public static IdVariable get_CorrelationId();
}
public interface MassTransit.IObjectDeserializer {
    [NullableContextAttribute("2")]
public abstract virtual T DeserializeObject(object value, T defaultValue);
    public abstract virtual Nullable`1<T> DeserializeObject(object value, Nullable`1<T> defaultValue);
    [NullableContextAttribute("1")]
public abstract virtual MessageBody SerializeObject(object value);
}
public interface MassTransit.IObserverConfigurator`1 {
}
[NullableContextAttribute("1")]
public interface MassTransit.IPipe`1 {
    public abstract virtual Task Send(TContext context);
}
[NullableContextAttribute("1")]
public interface MassTransit.IPipeConfigurator`1 {
    [EditorBrowsableAttribute("1")]
public abstract virtual void AddPipeSpecification(IPipeSpecification`1<TContext> specification);
}
[NullableContextAttribute("1")]
public interface MassTransit.IPipeContextSource`1 {
    public abstract virtual Task Send(IPipe`1<TContext> pipe, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface MassTransit.IPipeContextSource`2 {
    public abstract virtual Task Send(TInput context, IPipe`1<TContext> pipe);
}
[NullableContextAttribute("1")]
public interface MassTransit.IProbeSite {
    public abstract virtual void Probe(ProbeContext context);
}
[NullableContextAttribute("1")]
public interface MassTransit.IProcessIdProvider {
    public abstract virtual Byte[] GetProcessId();
}
[NullableContextAttribute("1")]
public interface MassTransit.IPublishEndpoint {
    public abstract virtual Task Publish(T message, CancellationToken cancellationToken);
    public abstract virtual Task Publish(T message, IPipe`1<PublishContext`1<T>> publishPipe, CancellationToken cancellationToken);
    public abstract virtual Task Publish(T message, IPipe`1<PublishContext> publishPipe, CancellationToken cancellationToken);
    public abstract virtual Task Publish(object message, CancellationToken cancellationToken);
    public abstract virtual Task Publish(object message, IPipe`1<PublishContext> publishPipe, CancellationToken cancellationToken);
    public abstract virtual Task Publish(object message, Type messageType, CancellationToken cancellationToken);
    public abstract virtual Task Publish(object message, Type messageType, IPipe`1<PublishContext> publishPipe, CancellationToken cancellationToken);
    public abstract virtual Task Publish(object values, CancellationToken cancellationToken);
    public abstract virtual Task Publish(object values, IPipe`1<PublishContext`1<T>> publishPipe, CancellationToken cancellationToken);
    public abstract virtual Task Publish(object values, IPipe`1<PublishContext> publishPipe, CancellationToken cancellationToken);
}
public interface MassTransit.IPublishEndpointProvider {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<ISendEndpoint> GetPublishSendEndpoint();
}
[NullableContextAttribute("1")]
public interface MassTransit.IPublishObserver {
    public abstract virtual Task PrePublish(PublishContext`1<T> context);
    public abstract virtual Task PostPublish(PublishContext`1<T> context);
    public abstract virtual Task PublishFault(PublishContext`1<T> context, Exception exception);
}
[NullableContextAttribute("1")]
public interface MassTransit.IPublishObserverConnector {
    public abstract virtual ConnectHandle ConnectPublishObserver(IPublishObserver observer);
}
[NullableContextAttribute("1")]
public interface MassTransit.IPublishPipeConfigurator {
    [EditorBrowsableAttribute("1")]
public abstract virtual void AddPipeSpecification(IPipeSpecification`1<SendContext> specification);
    [EditorBrowsableAttribute("1")]
public abstract virtual void AddPipeSpecification(IPipeSpecification`1<SendContext`1<T>> specification);
    [EditorBrowsableAttribute("1")]
public abstract virtual void AddPipeSpecification(IPipeSpecification`1<PublishContext`1<T>> specification);
}
[NullableContextAttribute("1")]
public interface MassTransit.IPublishPipelineConfigurator {
    public abstract virtual void ConfigurePublish(Action`1<IPublishPipeConfigurator> callback);
}
[NullableContextAttribute("1")]
public interface MassTransit.IPublishTopology {
    public abstract virtual IMessagePublishTopology`1<T> GetMessageTopology();
    public abstract virtual IMessagePublishTopology GetMessageTopology(Type messageType);
    public abstract virtual bool TryGetPublishAddress(Type messageType, Uri baseAddress, Uri& publishAddress);
}
[NullableContextAttribute("1")]
public interface MassTransit.IPublishTopologyConfigurator {
    public abstract virtual IMessagePublishTopologyConfigurator`1<T> GetMessageTopology();
    public abstract virtual IMessagePublishTopologyConfigurator GetMessageTopology(Type messageType);
    public abstract virtual bool TryAddConvention(IPublishTopologyConvention convention);
    public abstract virtual void AddMessagePublishTopology(IMessagePublishTopology`1<T> topology);
}
[NullableContextAttribute("1")]
public interface MassTransit.IQuerySagaRepository`1 {
    public abstract virtual Task`1<IEnumerable`1<Guid>> Find(ISagaQuery`1<TSaga> query);
}
[NullableContextAttribute("1")]
public interface MassTransit.IReceiveConfigurator {
    public abstract virtual void ReceiveEndpoint(IEndpointDefinition definition, IEndpointNameFormatter endpointNameFormatter, Action`1<IReceiveEndpointConfigurator> configureEndpoint);
    public abstract virtual void ReceiveEndpoint(string queueName, Action`1<IReceiveEndpointConfigurator> configureEndpoint);
}
public interface MassTransit.IReceiveConfigurator`1 {
    [NullableContextAttribute("1")]
public abstract virtual void ReceiveEndpoint(IEndpointDefinition definition, IEndpointNameFormatter endpointNameFormatter, Action`1<TEndpointConfigurator> configureEndpoint);
    [NullableContextAttribute("1")]
public abstract virtual void ReceiveEndpoint(string queueName, Action`1<TEndpointConfigurator> configureEndpoint);
}
[NullableContextAttribute("1")]
public interface MassTransit.IReceiveConnector {
    public abstract virtual HostReceiveEndpointHandle ConnectReceiveEndpoint(IEndpointDefinition definition, IEndpointNameFormatter endpointNameFormatter, Action`1<IReceiveEndpointConfigurator> configureEndpoint);
    public abstract virtual HostReceiveEndpointHandle ConnectReceiveEndpoint(string queueName, Action`1<IReceiveEndpointConfigurator> configureEndpoint);
}
public interface MassTransit.IReceiveConnector`1 {
    [NullableContextAttribute("1")]
public abstract virtual HostReceiveEndpointHandle ConnectReceiveEndpoint(IEndpointDefinition definition, IEndpointNameFormatter endpointNameFormatter, Action`1<TEndpointConfigurator> configureEndpoint);
    [NullableContextAttribute("1")]
public abstract virtual HostReceiveEndpointHandle ConnectReceiveEndpoint(string queueName, Action`1<TEndpointConfigurator> configureEndpoint);
}
public interface MassTransit.IReceiveEndpoint {
    [NullableAttribute("1")]
public Uri InputAddress { get; }
    [NullableAttribute("1")]
public Task`1<ReceiveEndpointReady> Started { get; }
    [NullableContextAttribute("1")]
public abstract virtual Uri get_InputAddress();
    [NullableContextAttribute("1")]
public abstract virtual Task`1<ReceiveEndpointReady> get_Started();
    [NullableContextAttribute("1")]
public abstract virtual ReceiveEndpointHandle Start(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public abstract virtual Task Stop(CancellationToken cancellationToken);
}
public interface MassTransit.IReceiveEndpointConfigurator {
    [NullableAttribute("1")]
public Uri InputAddress { get; }
    unknown bool ConfigureConsumeTopology {public set; }
    unknown bool PublishFaults {public set; }
    public int PrefetchCount { get; public set; }
    public Nullable`1<int> ConcurrentMessageLimit { get; public set; }
    [NullableAttribute("1")]
unknown ContentType DefaultContentType {public set; }
    [NullableAttribute("1")]
unknown ContentType SerializerContentType {public set; }
    [NullableContextAttribute("1")]
public abstract virtual Uri get_InputAddress();
    public abstract virtual void set_ConfigureConsumeTopology(bool value);
    public abstract virtual void set_PublishFaults(bool value);
    public abstract virtual int get_PrefetchCount();
    public abstract virtual void set_PrefetchCount(int value);
    public abstract virtual Nullable`1<int> get_ConcurrentMessageLimit();
    public abstract virtual void set_ConcurrentMessageLimit(Nullable`1<int> value);
    [NullableContextAttribute("1")]
public abstract virtual void set_DefaultContentType(ContentType value);
    [NullableContextAttribute("1")]
public abstract virtual void set_SerializerContentType(ContentType value);
    [NullableContextAttribute("1")]
public abstract virtual void ConfigureMessageTopology(bool enabled);
    [NullableContextAttribute("1")]
public abstract virtual void ConfigureMessageTopology(Type messageType, bool enabled);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
public abstract virtual void AddEndpointSpecification(IReceiveEndpointSpecification configurator);
    [NullableContextAttribute("1")]
public abstract virtual void AddSerializer(ISerializerFactory factory, bool isSerializer);
    [NullableContextAttribute("1")]
public abstract virtual void AddDeserializer(ISerializerFactory factory, bool isDefault);
    public abstract virtual void ClearSerialization();
}
[NullableContextAttribute("1")]
public interface MassTransit.IReceiveEndpointDependencyConnector {
    public abstract virtual void AddDependency(IReceiveEndpointDependency dependency);
}
[NullableContextAttribute("1")]
public interface MassTransit.IReceiveEndpointDependentConnector {
    public abstract virtual void AddDependent(IReceiveEndpointDependent dependent);
}
[NullableContextAttribute("1")]
public interface MassTransit.IReceiveEndpointObserver {
    public abstract virtual Task Ready(ReceiveEndpointReady ready);
    public abstract virtual Task Stopping(ReceiveEndpointStopping stopping);
    public abstract virtual Task Completed(ReceiveEndpointCompleted completed);
    public abstract virtual Task Faulted(ReceiveEndpointFaulted faulted);
}
[NullableContextAttribute("1")]
public interface MassTransit.IReceiveEndpointObserverConnector {
    public abstract virtual ConnectHandle ConnectReceiveEndpointObserver(IReceiveEndpointObserver observer);
}
public interface MassTransit.IReceiveEndpointSpecification {
    [NullableContextAttribute("1")]
public abstract virtual void Configure(IReceiveEndpointBuilder builder);
}
[NullableContextAttribute("1")]
public interface MassTransit.IReceiveObserver {
    public abstract virtual Task PreReceive(ReceiveContext context);
    public abstract virtual Task PostReceive(ReceiveContext context);
    public abstract virtual Task PostConsume(ConsumeContext`1<T> context, TimeSpan duration, string consumerType);
    public abstract virtual Task ConsumeFault(ConsumeContext`1<T> context, TimeSpan duration, string consumerType, Exception exception);
    public abstract virtual Task ReceiveFault(ReceiveContext context, Exception exception);
}
[NullableContextAttribute("1")]
public interface MassTransit.IReceiveObserverConnector {
    public abstract virtual ConnectHandle ConnectReceiveObserver(IReceiveObserver observer);
}
public interface MassTransit.IReceivePipeConfigurator {
}
[NullableContextAttribute("1")]
public interface MassTransit.IReceivePipelineConfigurator {
    public abstract virtual void ConfigureReceive(Action`1<IReceivePipeConfigurator> callback);
    public abstract virtual void ConfigureDeadLetter(Action`1<IPipeConfigurator`1<ReceiveContext>> callback);
    public abstract virtual void ConfigureError(Action`1<IPipeConfigurator`1<ExceptionReceiveContext>> callback);
    public abstract virtual void ConfigureTransport(Action`1<ITransportConfigurator> callback);
}
[NullableContextAttribute("1")]
public interface MassTransit.IReceiveTransportObserver {
    public abstract virtual Task Ready(ReceiveTransportReady ready);
    public abstract virtual Task Completed(ReceiveTransportCompleted completed);
    public abstract virtual Task Faulted(ReceiveTransportFaulted faulted);
}
[NullableContextAttribute("1")]
public interface MassTransit.IReceiveTransportObserverConnector {
    public abstract virtual ConnectHandle ConnectReceiveTransportObserver(IReceiveTransportObserver observer);
}
[NullableContextAttribute("1")]
public interface MassTransit.IRecurringMessageScheduler {
    public abstract virtual Task`1<ScheduledRecurringMessage`1<T>> ScheduleRecurringSend(Uri destinationAddress, RecurringSchedule schedule, T message, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledRecurringMessage`1<T>> ScheduleRecurringSend(Uri destinationAddress, RecurringSchedule schedule, T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledRecurringMessage`1<T>> ScheduleRecurringSend(Uri destinationAddress, RecurringSchedule schedule, T message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledRecurringMessage> ScheduleRecurringSend(Uri destinationAddress, RecurringSchedule schedule, object message, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledRecurringMessage> ScheduleRecurringSend(Uri destinationAddress, RecurringSchedule schedule, object message, Type messageType, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledRecurringMessage> ScheduleRecurringSend(Uri destinationAddress, RecurringSchedule schedule, object message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledRecurringMessage> ScheduleRecurringSend(Uri destinationAddress, RecurringSchedule schedule, object message, Type messageType, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledRecurringMessage`1<T>> ScheduleRecurringSend(Uri destinationAddress, RecurringSchedule schedule, object values, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledRecurringMessage`1<T>> ScheduleRecurringSend(Uri destinationAddress, RecurringSchedule schedule, object values, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledRecurringMessage`1<T>> ScheduleRecurringSend(Uri destinationAddress, RecurringSchedule schedule, object values, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledRecurringMessage`1<T>> ScheduleRecurringPublish(RecurringSchedule schedule, T message, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledRecurringMessage`1<T>> ScheduleRecurringPublish(RecurringSchedule schedule, T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledRecurringMessage`1<T>> ScheduleRecurringPublish(RecurringSchedule schedule, T message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledRecurringMessage> ScheduleRecurringPublish(RecurringSchedule schedule, object message, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledRecurringMessage> ScheduleRecurringPublish(RecurringSchedule schedule, object message, Type messageType, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledRecurringMessage> ScheduleRecurringPublish(RecurringSchedule schedule, object message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledRecurringMessage> ScheduleRecurringPublish(RecurringSchedule schedule, object message, Type messageType, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledRecurringMessage`1<T>> ScheduleRecurringPublish(RecurringSchedule schedule, object values, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledRecurringMessage`1<T>> ScheduleRecurringPublish(RecurringSchedule schedule, object values, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledRecurringMessage`1<T>> ScheduleRecurringPublish(RecurringSchedule schedule, object values, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    public abstract virtual Task CancelScheduledRecurringSend(string scheduleId, string scheduleGroup);
    public abstract virtual Task PauseScheduledRecurringSend(string scheduleId, string scheduleGroup);
    public abstract virtual Task ResumeScheduledRecurringSend(string scheduleId, string scheduleGroup);
}
[NullableContextAttribute("1")]
public interface MassTransit.IRegistrationContext {
    public abstract virtual void ConfigureConsumer(Type consumerType, IReceiveEndpointConfigurator configurator);
    public abstract virtual void ConfigureConsumer(IReceiveEndpointConfigurator configurator, Action`1<IConsumerConfigurator`1<T>> configure);
    public abstract virtual void ConfigureConsumers(IReceiveEndpointConfigurator configurator);
    public abstract virtual void ConfigureSaga(Type sagaType, IReceiveEndpointConfigurator configurator);
    public abstract virtual void ConfigureSaga(IReceiveEndpointConfigurator configurator, Action`1<ISagaConfigurator`1<T>> configure);
    public abstract virtual void ConfigureSagas(IReceiveEndpointConfigurator configurator);
    public abstract virtual void ConfigureExecuteActivity(Type activityType, IReceiveEndpointConfigurator configurator);
    public abstract virtual void ConfigureActivity(Type activityType, IReceiveEndpointConfigurator executeEndpointConfigurator, IReceiveEndpointConfigurator compensateEndpointConfigurator);
    public abstract virtual void ConfigureActivityExecute(Type activityType, IReceiveEndpointConfigurator executeEndpointConfigurator, Uri compensateAddress);
    public abstract virtual void ConfigureActivityCompensate(Type activityType, IReceiveEndpointConfigurator compensateEndpointConfigurator);
    public abstract virtual void ConfigureFuture(Type futureType, IReceiveEndpointConfigurator configurator);
    public abstract virtual void ConfigureFuture(IReceiveEndpointConfigurator configurator);
}
[NullableContextAttribute("1")]
public interface MassTransit.IRequestClient`1 {
    public abstract virtual RequestHandle`1<TRequest> Create(TRequest message, CancellationToken cancellationToken, RequestTimeout timeout);
    public abstract virtual RequestHandle`1<TRequest> Create(object values, CancellationToken cancellationToken, RequestTimeout timeout);
    public abstract virtual Task`1<Response`1<T>> GetResponse(TRequest message, CancellationToken cancellationToken, RequestTimeout timeout);
    public abstract virtual Task`1<Response`1<T>> GetResponse(TRequest message, RequestPipeConfiguratorCallback`1<TRequest> callback, CancellationToken cancellationToken, RequestTimeout timeout);
    public abstract virtual Task`1<Response`1<T>> GetResponse(object values, CancellationToken cancellationToken, RequestTimeout timeout);
    public abstract virtual Task`1<Response`1<T>> GetResponse(object values, RequestPipeConfiguratorCallback`1<TRequest> callback, CancellationToken cancellationToken, RequestTimeout timeout);
    public abstract virtual Task`1<Response`2<T1, T2>> GetResponse(TRequest message, CancellationToken cancellationToken, RequestTimeout timeout);
    public abstract virtual Task`1<Response`2<T1, T2>> GetResponse(TRequest message, RequestPipeConfiguratorCallback`1<TRequest> callback, CancellationToken cancellationToken, RequestTimeout timeout);
    public abstract virtual Task`1<Response`2<T1, T2>> GetResponse(object values, CancellationToken cancellationToken, RequestTimeout timeout);
    public abstract virtual Task`1<Response`2<T1, T2>> GetResponse(object values, RequestPipeConfiguratorCallback`1<TRequest> callback, CancellationToken cancellationToken, RequestTimeout timeout);
    public abstract virtual Task`1<Response`3<T1, T2, T3>> GetResponse(TRequest message, CancellationToken cancellationToken, RequestTimeout timeout);
    public abstract virtual Task`1<Response`3<T1, T2, T3>> GetResponse(TRequest message, RequestPipeConfiguratorCallback`1<TRequest> callback, CancellationToken cancellationToken, RequestTimeout timeout);
    public abstract virtual Task`1<Response`3<T1, T2, T3>> GetResponse(object values, CancellationToken cancellationToken, RequestTimeout timeout);
    public abstract virtual Task`1<Response`3<T1, T2, T3>> GetResponse(object values, RequestPipeConfiguratorCallback`1<TRequest> callback, CancellationToken cancellationToken, RequestTimeout timeout);
}
[NullableContextAttribute("1")]
public interface MassTransit.IRequestConfigurator {
    unknown Uri ServiceAddress {public set; }
    unknown TimeSpan Timeout {public set; }
    unknown Nullable`1<TimeSpan> TimeToLive {public set; }
    public abstract virtual void set_ServiceAddress(Uri value);
    public abstract virtual void set_Timeout(TimeSpan value);
    public abstract virtual void set_TimeToLive(Nullable`1<TimeSpan> value);
}
[NullableContextAttribute("1")]
public interface MassTransit.IRequestConfigurator`3 {
    unknown Action`1<IEventCorrelationConfigurator`2<TInstance, TResponse>> Completed {public set; }
    unknown Action`1<IEventCorrelationConfigurator`2<TInstance, Fault`1<TRequest>>> Faulted {public set; }
    unknown Action`1<IEventCorrelationConfigurator`2<TInstance, RequestTimeoutExpired`1<TRequest>>> TimeoutExpired {public set; }
    public abstract virtual void set_Completed(Action`1<IEventCorrelationConfigurator`2<TInstance, TResponse>> value);
    public abstract virtual void set_Faulted(Action`1<IEventCorrelationConfigurator`2<TInstance, Fault`1<TRequest>>> value);
    public abstract virtual void set_TimeoutExpired(Action`1<IEventCorrelationConfigurator`2<TInstance, RequestTimeoutExpired`1<TRequest>>> value);
}
[NullableContextAttribute("1")]
public interface MassTransit.IRequestConfigurator`4 {
    unknown Action`1<IEventCorrelationConfigurator`2<TInstance, TResponse2>> Completed2 {public set; }
    public abstract virtual void set_Completed2(Action`1<IEventCorrelationConfigurator`2<TInstance, TResponse2>> value);
}
[NullableContextAttribute("1")]
public interface MassTransit.IRequestConfigurator`5 {
    unknown Action`1<IEventCorrelationConfigurator`2<TInstance, TResponse3>> Completed3 {public set; }
    public abstract virtual void set_Completed3(Action`1<IEventCorrelationConfigurator`2<TInstance, TResponse3>> value);
}
public interface MassTransit.IRequestPipeConfigurator {
    public Guid RequestId { get; }
    unknown RequestTimeout TimeToLive {public set; }
    public abstract virtual Guid get_RequestId();
    public abstract virtual void set_TimeToLive(RequestTimeout value);
}
public interface MassTransit.IRequestPipeConfigurator`1 {
}
[NullableContextAttribute("1")]
public interface MassTransit.IRequestPipeConnector {
    public abstract virtual ConnectHandle ConnectRequestPipe(Guid requestId, IPipe`1<ConsumeContext`1<T>> pipe);
}
[NullableContextAttribute("1")]
public interface MassTransit.IRequestSendEndpoint`1 {
    public abstract virtual Task`1<T> Send(Guid requestId, object values, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    public abstract virtual Task Send(Guid requestId, T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface MassTransit.IRetryObserver {
    public abstract virtual Task PostCreate(RetryPolicyContext`1<T> context);
    public abstract virtual Task PostFault(RetryContext`1<T> context);
    public abstract virtual Task PreRetry(RetryContext`1<T> context);
    public abstract virtual Task RetryFault(RetryContext`1<T> context);
    public abstract virtual Task RetryComplete(RetryContext`1<T> context);
}
[NullableContextAttribute("1")]
public interface MassTransit.IRetryObserverConnector {
    public abstract virtual ConnectHandle ConnectRetryObserver(IRetryObserver observer);
}
[NullableContextAttribute("1")]
public interface MassTransit.IRetryPolicy {
    public abstract virtual RetryPolicyContext`1<T> CreatePolicyContext(T context);
    public abstract virtual bool IsHandled(Exception exception);
}
public interface MassTransit.IRiderFactoryConfigurator {
}
public interface MassTransit.IRoutingSlipBuilder {
    [NullableContextAttribute("1")]
public abstract virtual RoutingSlip Build();
}
public interface MassTransit.IRoutingSlipConfigurator {
}
[NullableContextAttribute("1")]
public interface MassTransit.IRoutingSlipExecutor {
    public abstract virtual Task Execute(RoutingSlip routingSlip, CancellationToken cancellationToken);
}
public interface MassTransit.ISaga {
    public Guid CorrelationId { get; public set; }
    public abstract virtual Guid get_CorrelationId();
    public abstract virtual void set_CorrelationId(Guid value);
}
[NullableContextAttribute("1")]
public interface MassTransit.ISagaConfigurationObserver {
    [EditorBrowsableAttribute("1")]
public abstract virtual void SagaConfigured(ISagaConfigurator`1<TSaga> configurator);
    [EditorBrowsableAttribute("1")]
public abstract virtual void StateMachineSagaConfigured(ISagaConfigurator`1<TInstance> configurator, SagaStateMachine`1<TInstance> stateMachine);
    [EditorBrowsableAttribute("1")]
public abstract virtual void SagaMessageConfigured(ISagaMessageConfigurator`2<TSaga, TMessage> configurator);
}
[NullableContextAttribute("1")]
public interface MassTransit.ISagaConfigurationObserverConnector {
    [EditorBrowsableAttribute("1")]
public abstract virtual ConnectHandle ConnectSagaConfigurationObserver(ISagaConfigurationObserver observer);
}
[NullableContextAttribute("1")]
public interface MassTransit.ISagaConfigurator`1 {
    unknown Nullable`1<int> ConcurrentMessageLimit {public set; }
    public abstract virtual void set_ConcurrentMessageLimit(Nullable`1<int> value);
    public abstract virtual void Message(Action`1<ISagaMessageConfigurator`1<T>> configure);
    public abstract virtual void SagaMessage(Action`1<ISagaMessageConfigurator`2<TSaga, T>> configure);
}
[NullableContextAttribute("1")]
public interface MassTransit.ISagaDefinition {
    public Type SagaType { get; }
    [NullableAttribute("2")]
public IEndpointDefinition EndpointDefinition { get; }
    public abstract virtual Type get_SagaType();
    [NullableContextAttribute("2")]
public abstract virtual IEndpointDefinition get_EndpointDefinition();
    public abstract virtual string GetEndpointName(IEndpointNameFormatter formatter);
}
[NullableContextAttribute("1")]
public interface MassTransit.ISagaDefinition`1 {
    unknown IEndpointDefinition`1<TSaga> EndpointDefinition {public set; }
    public abstract virtual void set_EndpointDefinition(IEndpointDefinition`1<TSaga> value);
    public abstract virtual void Configure(IReceiveEndpointConfigurator endpointConfigurator, ISagaConfigurator`1<TSaga> sagaConfigurator, IRegistrationContext context);
}
[NullableContextAttribute("1")]
public interface MassTransit.ISagaFactory`2 {
    public abstract virtual TSaga Create(ConsumeContext`1<TMessage> context);
    public abstract virtual Task Send(ConsumeContext`1<TMessage> context, IPipe`1<SagaConsumeContext`2<TSaga, TMessage>> next);
}
[NullableContextAttribute("1")]
public interface MassTransit.ISagaMessageConfigurator`1 {
}
[NullableContextAttribute("1")]
public interface MassTransit.ISagaMessageConfigurator`2 {
    public abstract virtual void Message(Action`1<ISagaMessageConfigurator`1<TMessage>> configure);
}
[NullableContextAttribute("1")]
public interface MassTransit.ISagaPolicy`2 {
    public bool IsReadOnly { get; }
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual bool PreInsertInstance(ConsumeContext`1<TMessage> context, TSaga& instance);
    public abstract virtual Task Existing(SagaConsumeContext`2<TSaga, TMessage> context, IPipe`1<SagaConsumeContext`2<TSaga, TMessage>> next);
    public abstract virtual Task Missing(ConsumeContext`1<TMessage> context, IPipe`1<SagaConsumeContext`2<TSaga, TMessage>> next);
}
[NullableContextAttribute("1")]
public interface MassTransit.ISagaQuery`1 {
    public Expression`1<Func`2<TSaga, bool>> FilterExpression { get; }
    public abstract virtual Expression`1<Func`2<TSaga, bool>> get_FilterExpression();
    public abstract virtual Func`2<TSaga, bool> GetFilter();
}
[NullableContextAttribute("1")]
public interface MassTransit.ISagaQueryFactory`2 {
    public abstract virtual bool TryCreateQuery(ConsumeContext`1<TMessage> context, ISagaQuery`1& query);
}
[NullableContextAttribute("1")]
public interface MassTransit.ISagaRepository`1 {
    public abstract virtual Task Send(ConsumeContext`1<T> context, ISagaPolicy`2<TSaga, T> policy, IPipe`1<SagaConsumeContext`2<TSaga, T>> next);
    public abstract virtual Task SendQuery(ConsumeContext`1<T> context, ISagaQuery`1<TSaga> query, ISagaPolicy`2<TSaga, T> policy, IPipe`1<SagaConsumeContext`2<TSaga, T>> next);
}
public interface MassTransit.ISagaVersion {
    public int Version { get; public set; }
    public abstract virtual int get_Version();
    public abstract virtual void set_Version(int value);
}
[NullableContextAttribute("1")]
public interface MassTransit.IScheduleConfigurator`2 {
    unknown TimeSpan Delay {public set; }
    unknown ScheduleDelayProvider`1<TInstance> DelayProvider {public set; }
    unknown Action`1<IEventCorrelationConfigurator`2<TInstance, TMessage>> Received {public set; }
    public abstract virtual void set_Delay(TimeSpan value);
    public abstract virtual void set_DelayProvider(ScheduleDelayProvider`1<TInstance> value);
    public abstract virtual void set_Received(Action`1<IEventCorrelationConfigurator`2<TInstance, TMessage>> value);
}
[NullableContextAttribute("1")]
public interface MassTransit.IScheduleMessageProvider {
    public abstract virtual Task`1<ScheduledMessage`1<T>> ScheduleSend(Uri destinationAddress, DateTime scheduledTime, T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    public abstract virtual Task CancelScheduledSend(Guid tokenId, CancellationToken cancellationToken);
    public abstract virtual Task CancelScheduledSend(Uri destinationAddress, Guid tokenId, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface MassTransit.ISendEndpoint {
    public abstract virtual Task Send(T message, CancellationToken cancellationToken);
    public abstract virtual Task Send(T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    public abstract virtual Task Send(T message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    public abstract virtual Task Send(object message, CancellationToken cancellationToken);
    public abstract virtual Task Send(object message, Type messageType, CancellationToken cancellationToken);
    public abstract virtual Task Send(object message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    public abstract virtual Task Send(object message, Type messageType, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    public abstract virtual Task Send(object values, CancellationToken cancellationToken);
    public abstract virtual Task Send(object values, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    public abstract virtual Task Send(object values, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
}
public interface MassTransit.ISendEndpointProvider {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<ISendEndpoint> GetSendEndpoint(Uri address);
}
[NullableContextAttribute("1")]
public interface MassTransit.ISendObserver {
    public abstract virtual Task PreSend(SendContext`1<T> context);
    public abstract virtual Task PostSend(SendContext`1<T> context);
    public abstract virtual Task SendFault(SendContext`1<T> context, Exception exception);
}
[NullableContextAttribute("1")]
public interface MassTransit.ISendObserverConnector {
    public abstract virtual ConnectHandle ConnectSendObserver(ISendObserver observer);
}
public interface MassTransit.ISendPipeConfigurator {
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
public abstract virtual void AddPipeSpecification(IPipeSpecification`1<SendContext`1<T>> specification);
}
[NullableContextAttribute("1")]
public interface MassTransit.ISendPipelineConfigurator {
    public abstract virtual void ConfigureSend(Action`1<ISendPipeConfigurator> callback);
}
[NullableContextAttribute("1")]
public interface MassTransit.ISendTopology {
    public IDeadLetterQueueNameFormatter DeadLetterQueueNameFormatter { get; }
    public IErrorQueueNameFormatter ErrorQueueNameFormatter { get; }
    public abstract virtual IDeadLetterQueueNameFormatter get_DeadLetterQueueNameFormatter();
    public abstract virtual IErrorQueueNameFormatter get_ErrorQueueNameFormatter();
    public abstract virtual IMessageSendTopologyConfigurator`1<T> GetMessageTopology();
}
[NullableContextAttribute("1")]
public interface MassTransit.ISendTopologyConfigurator {
    public IDeadLetterQueueNameFormatter DeadLetterQueueNameFormatter { get; public set; }
    public IErrorQueueNameFormatter ErrorQueueNameFormatter { get; public set; }
    public abstract virtual IDeadLetterQueueNameFormatter get_DeadLetterQueueNameFormatter();
    public abstract virtual void set_DeadLetterQueueNameFormatter(IDeadLetterQueueNameFormatter value);
    public abstract virtual IErrorQueueNameFormatter get_ErrorQueueNameFormatter();
    public abstract virtual void set_ErrorQueueNameFormatter(IErrorQueueNameFormatter value);
    public abstract virtual bool TryAddConvention(ISendTopologyConvention convention);
    public abstract virtual void AddMessageSendTopology(IMessageSendTopology`1<T> topology);
}
[NullableContextAttribute("1")]
public interface MassTransit.ISerialization {
    public ContentType DefaultContentType { get; }
    public abstract virtual ContentType get_DefaultContentType();
    public abstract virtual IMessageSerializer GetMessageSerializer(ContentType contentType);
    public abstract virtual bool TryGetMessageSerializer(ContentType contentType, IMessageSerializer& serializer);
    public abstract virtual IMessageDeserializer GetMessageDeserializer(ContentType contentType);
    public abstract virtual bool TryGetMessageDeserializer(ContentType contentType, IMessageDeserializer& deserializer);
}
[NullableContextAttribute("1")]
public interface MassTransit.ISerializerFactory {
    public ContentType ContentType { get; }
    public abstract virtual ContentType get_ContentType();
    public abstract virtual IMessageSerializer CreateSerializer();
    public abstract virtual IMessageDeserializer CreateDeserializer();
}
[NullableContextAttribute("1")]
public interface MassTransit.IServiceInstanceConfigurator {
    public IEndpointNameFormatter EndpointNameFormatter { get; }
    public Uri InstanceAddress { get; }
    public IReceiveConfigurator BusConfigurator { get; }
    public IReceiveEndpointConfigurator InstanceEndpointConfigurator { get; }
    public abstract virtual IEndpointNameFormatter get_EndpointNameFormatter();
    public abstract virtual Uri get_InstanceAddress();
    public abstract virtual IReceiveConfigurator get_BusConfigurator();
    public abstract virtual IReceiveEndpointConfigurator get_InstanceEndpointConfigurator();
    public abstract virtual void AddSpecification(ISpecification specification);
}
public interface MassTransit.IServiceInstanceConfigurator`1 {
    [NullableAttribute("1")]
public IReceiveConfigurator`1<TEndpointConfigurator> BusConfigurator { get; }
    [NullableAttribute("1")]
public TEndpointConfigurator InstanceEndpointConfigurator { get; }
    [NullableContextAttribute("1")]
public abstract virtual IReceiveConfigurator`1<TEndpointConfigurator> get_BusConfigurator();
    [NullableContextAttribute("1")]
public abstract virtual TEndpointConfigurator get_InstanceEndpointConfigurator();
}
[NullableContextAttribute("1")]
public interface MassTransit.ISpecification {
    [EditorBrowsableAttribute("1")]
public abstract virtual IEnumerable`1<ValidationResult> Validate();
}
[NullableContextAttribute("1")]
public interface MassTransit.IStateAccessor`1 {
    public abstract virtual Task`1<State`1<TSaga>> Get(BehaviorContext`1<TSaga> context);
    public abstract virtual Task Set(BehaviorContext`1<TSaga> context, State`1<TSaga> state);
    public abstract virtual Expression`1<Func`2<TSaga, bool>> GetStateExpression(State[] states);
}
public interface MassTransit.IStateMachineActivity {
}
[NullableContextAttribute("1")]
public interface MassTransit.IStateMachineActivity`1 {
    public abstract virtual Task Execute(BehaviorContext`1<TSaga> context, IBehavior`1<TSaga> next);
    public abstract virtual Task Execute(BehaviorContext`2<TSaga, T> context, IBehavior`2<TSaga, T> next);
    public abstract virtual Task Faulted(BehaviorExceptionContext`2<TSaga, TException> context, IBehavior`1<TSaga> next);
    public abstract virtual Task Faulted(BehaviorExceptionContext`3<TSaga, T, TException> context, IBehavior`2<TSaga, T> next);
}
[NullableContextAttribute("1")]
public interface MassTransit.IStateMachineActivity`2 {
    public abstract virtual Task Execute(BehaviorContext`2<TSaga, TMessage> context, IBehavior`2<TSaga, TMessage> next);
    public abstract virtual Task Faulted(BehaviorExceptionContext`3<TSaga, TMessage, TException> context, IBehavior`2<TSaga, TMessage> next);
}
[NullableContextAttribute("1")]
public interface MassTransit.IStateObserver`1 {
    public abstract virtual Task StateChanged(BehaviorContext`1<TSaga> context, State currentState, State previousState);
}
public interface MassTransit.ISupervisor {
    public int PeakActiveCount { get; }
    public long TotalCount { get; }
    public abstract virtual int get_PeakActiveCount();
    public abstract virtual long get_TotalCount();
    [NullableContextAttribute("1")]
public abstract virtual void Add(IAgent agent);
}
public interface MassTransit.ISupervisor`1 {
}
public interface MassTransit.ITickProvider {
    public long Ticks { get; }
    public abstract virtual long get_Ticks();
}
public interface MassTransit.ITransportConfigurator {
    unknown int PrefetchCount {public set; }
    unknown Nullable`1<int> ConcurrentMessageLimit {public set; }
    public abstract virtual void set_PrefetchCount(int value);
    public abstract virtual void set_ConcurrentMessageLimit(Nullable`1<int> value);
}
public interface MassTransit.IVisitable {
    [NullableContextAttribute("1")]
public abstract virtual void Accept(StateMachineVisitor visitor);
}
[NullableContextAttribute("1")]
public interface MassTransit.IWorkerIdProvider {
    public abstract virtual Byte[] GetWorkerId(int index);
}
public class MassTransit.JobAlreadyExistsException : MassTransitException {
    public JobAlreadyExistsException(Guid jobId);
    [NullableContextAttribute("1")]
protected JobAlreadyExistsException(SerializationInfo info, StreamingContext context);
}
public interface MassTransit.JobContext {
    public Guid JobId { get; }
    public Guid AttemptId { get; }
    public int RetryAttempt { get; }
    public TimeSpan ElapsedTime { get; }
    public abstract virtual Guid get_JobId();
    public abstract virtual Guid get_AttemptId();
    public abstract virtual int get_RetryAttempt();
    public abstract virtual TimeSpan get_ElapsedTime();
    [NullableContextAttribute("1")]
public abstract virtual Task NotifyCanceled(string reason);
    [NullableContextAttribute("1")]
public abstract virtual Task NotifyStarted();
    [NullableContextAttribute("1")]
public abstract virtual Task NotifyCompleted();
    [NullableContextAttribute("1")]
public abstract virtual Task NotifyFaulted(Exception exception, Nullable`1<TimeSpan> delay);
}
public interface MassTransit.JobContext`1 {
    [NullableAttribute("1")]
public TMessage Job { get; }
    [NullableContextAttribute("1")]
public abstract virtual TMessage get_Job();
}
public class MassTransit.JobNotFoundException : MassTransitException {
    [NullableContextAttribute("1")]
public JobNotFoundException(string message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MassTransit.Licensing.LicenseContact : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    public string Name { get; public set; }
    public string Email { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MassTransit.Licensing.LicenseCustomer : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Id { get; public set; }
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MassTransit.Licensing.LicenseFeature : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Name { get; public set; }
    public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MassTransit.Licensing.LicenseInfo : object {
    [CompilerGeneratedAttribute]
private LicenseContact <Contact>k__BackingField;
    [CompilerGeneratedAttribute]
private LicenseCustomer <Customer>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, LicenseProduct> <Products>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Expires>k__BackingField;
    public LicenseContact Contact { get; public set; }
    public LicenseCustomer Customer { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, LicenseProduct> Products { get; public set; }
    public DateTime Created { get; public set; }
    public DateTime Expires { get; public set; }
    [CompilerGeneratedAttribute]
public LicenseContact get_Contact();
    [CompilerGeneratedAttribute]
public void set_Contact(LicenseContact value);
    [CompilerGeneratedAttribute]
public LicenseCustomer get_Customer();
    [CompilerGeneratedAttribute]
public void set_Customer(LicenseCustomer value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, LicenseProduct> get_Products();
    [CompilerGeneratedAttribute]
public void set_Products(Dictionary`2<string, LicenseProduct> value);
    [CompilerGeneratedAttribute]
public DateTime get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(DateTime value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MassTransit.Licensing.LicenseProduct : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <Expires>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, LicenseFeature> <Features>k__BackingField;
    public string Name { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<DateTime> Expires { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, LicenseFeature> Features { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, LicenseFeature> get_Features();
    [CompilerGeneratedAttribute]
public void set_Features(Dictionary`2<string, LicenseFeature> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MassTransit.MassTransitException : Exception {
    public MassTransitException(string message);
    public MassTransitException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected MassTransitException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.MassTransitExceptionExtensions : object {
    [ExtensionAttribute]
public static IReadOnlyList`1<ValidationResult> ThrowIfContainsFailure(IEnumerable`1<ValidationResult> results, string prefix);
    [ExtensionAttribute]
public static bool ContainsFailure(IEnumerable`1<ValidationResult> results);
}
public class MassTransit.MassTransitHostOptions : object {
    [CompilerGeneratedAttribute]
private bool <WaitUntilStarted>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <StartTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <StopTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ConsumerStopTimeout>k__BackingField;
    public bool WaitUntilStarted { get; public set; }
    public Nullable`1<TimeSpan> StartTimeout { get; public set; }
    public Nullable`1<TimeSpan> StopTimeout { get; public set; }
    public Nullable`1<TimeSpan> ConsumerStopTimeout { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_WaitUntilStarted();
    [CompilerGeneratedAttribute]
public void set_WaitUntilStarted(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_StartTimeout();
    [CompilerGeneratedAttribute]
public void set_StartTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_StopTimeout();
    [CompilerGeneratedAttribute]
public void set_StopTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_ConsumerStopTimeout();
    [CompilerGeneratedAttribute]
public void set_ConsumerStopTimeout(Nullable`1<TimeSpan> value);
}
public interface MassTransit.Mediator.IMediator {
}
public interface MassTransit.Mediator.IScopedMediator {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MassTransit.Mediator.MediatorRequestHandler`1 : object {
    public sealed virtual Task Consume(ConsumeContext`1<TRequest> context);
    protected abstract virtual Task Handle(TRequest request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MassTransit.Mediator.MediatorRequestHandler`2 : object {
    [AsyncStateMachineAttribute("MassTransit.Mediator.MediatorRequestHandler`2/<Consume>d__0")]
public sealed virtual Task Consume(ConsumeContext`1<TRequest> context);
    protected abstract virtual Task`1<TResponse> Handle(TRequest request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[ExcludeFromTopologyAttribute]
[ExcludeFromImplementedTypesAttribute]
public interface MassTransit.Mediator.Request`1 {
}
[ExtensionAttribute]
public static class MassTransit.MediatorRequestExtensions : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MassTransit.MediatorRequestExtensions/<SendRequest>d__0`1")]
[ExtensionAttribute]
public static Task`1<T> SendRequest(IMediator mediator, Request`1<T> request, CancellationToken cancellationToken, RequestTimeout timeout);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.MergeFilterContextProvider`2 : MulticastDelegate {
    [NullableContextAttribute("0")]
public MergeFilterContextProvider`2(object object, IntPtr method);
    public virtual TInput Invoke(TInput inputContext, TSplit context);
    [NullableContextAttribute("0")]
public virtual IAsyncResult BeginInvoke(TInput inputContext, TSplit context, AsyncCallback callback, object object);
    [NullableContextAttribute("0")]
public virtual TInput EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
public interface MassTransit.MessageBody {
    public Nullable`1<long> Length { get; }
    public abstract virtual Nullable`1<long> get_Length();
    public abstract virtual Stream GetStream();
    public abstract virtual Byte[] GetBytes();
    public abstract virtual string GetString();
}
[NullableContextAttribute("2")]
public interface MassTransit.MessageContext {
    public Nullable`1<Guid> MessageId { get; }
    public Nullable`1<Guid> RequestId { get; }
    public Nullable`1<Guid> CorrelationId { get; }
    public Nullable`1<Guid> ConversationId { get; }
    public Nullable`1<Guid> InitiatorId { get; }
    public Nullable`1<DateTime> ExpirationTime { get; }
    public Uri SourceAddress { get; }
    public Uri DestinationAddress { get; }
    public Uri ResponseAddress { get; }
    public Uri FaultAddress { get; }
    public Nullable`1<DateTime> SentTime { get; }
    [NullableAttribute("1")]
public Headers Headers { get; }
    [NullableAttribute("1")]
public HostInfo Host { get; }
    public abstract virtual Nullable`1<Guid> get_MessageId();
    public abstract virtual Nullable`1<Guid> get_RequestId();
    public abstract virtual Nullable`1<Guid> get_CorrelationId();
    public abstract virtual Nullable`1<Guid> get_ConversationId();
    public abstract virtual Nullable`1<Guid> get_InitiatorId();
    public abstract virtual Nullable`1<DateTime> get_ExpirationTime();
    public abstract virtual Uri get_SourceAddress();
    public abstract virtual Uri get_DestinationAddress();
    public abstract virtual Uri get_ResponseAddress();
    public abstract virtual Uri get_FaultAddress();
    public abstract virtual Nullable`1<DateTime> get_SentTime();
    [NullableContextAttribute("1")]
public abstract virtual Headers get_Headers();
    [NullableContextAttribute("1")]
public abstract virtual HostInfo get_Host();
}
[NullableContextAttribute("1")]
public interface MassTransit.MessageData`1 {
    public Task`1<T> Value { get; }
    public abstract virtual Task`1<T> get_Value();
}
public static class MassTransit.MessageDataDefaults : object {
    [CompilerGeneratedAttribute]
private static bool <AlwaysWriteToRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <Threshold>k__BackingField;
    [CompilerGeneratedAttribute]
private static Nullable`1<TimeSpan> <TimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private static Nullable`1<TimeSpan> <ExtraTimeToLive>k__BackingField;
    public static bool AlwaysWriteToRepository { get; public set; }
    public static int Threshold { get; public set; }
    public static Nullable`1<TimeSpan> TimeToLive { get; public set; }
    public static Nullable`1<TimeSpan> ExtraTimeToLive { get; public set; }
    private static MessageDataDefaults();
    [CompilerGeneratedAttribute]
public static bool get_AlwaysWriteToRepository();
    [CompilerGeneratedAttribute]
public static void set_AlwaysWriteToRepository(bool value);
    [CompilerGeneratedAttribute]
public static int get_Threshold();
    [CompilerGeneratedAttribute]
public static void set_Threshold(int value);
    [CompilerGeneratedAttribute]
public static Nullable`1<TimeSpan> get_TimeToLive();
    [CompilerGeneratedAttribute]
public static void set_TimeToLive(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public static Nullable`1<TimeSpan> get_ExtraTimeToLive();
    [CompilerGeneratedAttribute]
public static void set_ExtraTimeToLive(Nullable`1<TimeSpan> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.MessageDataException : MassTransitException {
    public MessageDataException(string message);
    public MessageDataException(string message, Exception innerException);
    protected MessageDataException(SerializationInfo info, StreamingContext context);
}
public class MassTransit.MessageDataNotFoundException : MessageDataException {
    [NullableContextAttribute("1")]
public MessageDataNotFoundException(Uri address);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MassTransit.MessageDefaults : object {
    private static Lazy`1<Encoding> _encoding;
    public static Encoding Encoding { get; }
    private static MessageDefaults();
    public static Encoding get_Encoding();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.MessageEntityNameFormatter`1 : object {
    private IEntityNameFormatter _entityNameFormatter;
    [NullableAttribute("2")]
private string _entityName;
    public MessageEntityNameFormatter`1(IEntityNameFormatter entityNameFormatter);
    public sealed virtual string FormatEntityName();
    private void InitializeEntityNameFromAttributeIfSpecified();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MassTransit.MessageException : MassTransitException {
    [CompilerGeneratedAttribute]
private Type <MessageType>k__BackingField;
    public Type MessageType { get; private set; }
    [NullableContextAttribute("1")]
public MessageException(Type messageType, string message, Exception innerException);
    [NullableContextAttribute("1")]
public MessageException(Type messageType, string message);
    [CompilerGeneratedAttribute]
public Type get_MessageType();
    [CompilerGeneratedAttribute]
private void set_MessageType(Type value);
}
public class MassTransit.MessageHandler`1 : MulticastDelegate {
    public MessageHandler`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task Invoke(ConsumeContext`1<TMessage> context);
    public virtual IAsyncResult BeginInvoke(ConsumeContext`1<TMessage> context, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MassTransit.MessageHeaders : object {
    public static string Reason;
    public static string FaultExceptionType;
    public static string FaultInputAddress;
    public static string FaultMessage;
    public static string FaultMessageType;
    public static string FaultConsumerType;
    public static string FaultTimestamp;
    public static string FaultStackTrace;
    public static string FaultRetryCount;
    public static string FaultRedeliveryCount;
    public static string ForwarderAddress;
    public static string SchedulingTokenId;
    public static string RedeliveryCount;
    public static string QuartzTriggerKey;
    public static string ClientId;
    public static string EndpointId;
    public static string InitiatingConversationId;
    public static string MessageId;
    public static string CorrelationId;
    public static string ConversationId;
    public static string RequestId;
    public static string InitiatorId;
    public static string SourceAddress;
    public static string ResponseAddress;
    public static string FaultAddress;
    public static string MessageType;
    public static string TransportMessageId;
    public static string TransportSentTime;
    public static string OriginalMessageId;
    public static string ContentType;
    public static string FutureId;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.MessageInitializerException : MassTransitException {
    public MessageInitializerException(string messageType, string propertyName, string propertType, string message);
    public MessageInitializerException(string message, Exception innerException);
    protected MessageInitializerException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.MessageNameFormatterEntityNameFormatter : object {
    private IMessageNameFormatter _formatter;
    public MessageNameFormatterEntityNameFormatter(IMessageNameFormatter formatter);
    private sealed virtual override string MassTransit.IEntityNameFormatter.FormatEntityName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.MessageNotConsumedException : TransportException {
    protected MessageNotConsumedException(SerializationInfo info, StreamingContext context);
    public MessageNotConsumedException(Uri uri);
    public MessageNotConsumedException(Uri uri, string message);
    public MessageNotConsumedException(Uri uri, string message, Exception innerException);
}
[NullableContextAttribute("1")]
public interface MassTransit.MessageRedeliveryContext {
    public abstract virtual Task ScheduleRedelivery(TimeSpan delay, Action`2<ConsumeContext, SendContext> callback);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.MessageRetryLimitExceededException : TransportException {
    protected MessageRetryLimitExceededException(SerializationInfo info, StreamingContext context);
    public MessageRetryLimitExceededException(Uri uri);
    public MessageRetryLimitExceededException(Uri uri, string message);
    public MessageRetryLimitExceededException(Uri uri, string message, Exception innerException);
}
[NullableContextAttribute("1")]
public interface MassTransit.MessageSchedulerContext {
    public MessageSchedulerFactory SchedulerFactory { get; }
    public abstract virtual MessageSchedulerFactory get_SchedulerFactory();
    public abstract virtual Task`1<ScheduledMessage`1<T>> ScheduleSend(DateTime scheduledTime, T message, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage`1<T>> ScheduleSend(DateTime scheduledTime, T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage`1<T>> ScheduleSend(DateTime scheduledTime, T message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage> ScheduleSend(DateTime scheduledTime, object message, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage> ScheduleSend(DateTime scheduledTime, object message, Type messageType, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage> ScheduleSend(DateTime scheduledTime, object message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage> ScheduleSend(DateTime scheduledTime, object message, Type messageType, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage`1<T>> ScheduleSend(DateTime scheduledTime, object values, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage`1<T>> ScheduleSend(DateTime scheduledTime, object values, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduledMessage`1<T>> ScheduleSend(DateTime scheduledTime, object values, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
}
public class MassTransit.MessageSchedulerFactory : MulticastDelegate {
    public MessageSchedulerFactory(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual IMessageScheduler Invoke(ConsumeContext context);
    public virtual IAsyncResult BeginInvoke(ConsumeContext context, AsyncCallback callback, object object);
    public virtual IMessageScheduler EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MassTransit.MessageTypeCache : object {
    private static CachedType GetOrAdd(Type type);
    public static IEnumerable`1<PropertyInfo> GetProperties(Type type);
    public static bool IsValidMessageType(Type type);
    public static string InvalidMessageTypeReason(Type type);
    public static bool IsTemporaryMessageType(Type type);
    public static Type[] GetMessageTypes(Type type);
    public static String[] GetMessageTypeNames(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.MessageTypeCache`1 : object {
    private Lazy`1<string> _diagnosticAddress;
    private Lazy`1<bool> _isTemporaryMessageType;
    private Lazy`1<bool> _isValidMessageType;
    private Lazy`1<String[]> _messageTypeNames;
    [NullableAttribute("2")]
private string _invalidMessageTypeReason;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Type[] _messageTypes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<PropertyInfo> _properties;
    public static string DiagnosticAddress { get; }
    public static IEnumerable`1<PropertyInfo> Properties { get; }
    public static bool IsValidMessageType { get; }
    [NullableAttribute("2")]
public static string InvalidMessageTypeReason { get; }
    public static bool IsTemporaryMessageType { get; }
    public static Type[] MessageTypes { get; }
    public static String[] MessageTypeNames { get; }
    private bool MassTransit.Internals.IMessageTypeCache.IsTemporaryMessageType { get; }
    private String[] MassTransit.Internals.IMessageTypeCache.MessageTypeNames { get; }
    private string MassTransit.Internals.IMessageTypeCache.DiagnosticAddress { get; }
    private IEnumerable`1<PropertyInfo> MassTransit.Internals.IMessageTypeCache.Properties { get; }
    private bool MassTransit.Internals.IMessageTypeCache.IsValidMessageType { get; }
    [NullableAttribute("2")]
private string MassTransit.Internals.IMessageTypeCache.InvalidMessageTypeReason { get; }
    private Type[] MassTransit.Internals.IMessageTypeCache.MessageTypes { get; }
    public static string get_DiagnosticAddress();
    public static IEnumerable`1<PropertyInfo> get_Properties();
    public static bool get_IsValidMessageType();
    [NullableContextAttribute("2")]
public static string get_InvalidMessageTypeReason();
    public static bool get_IsTemporaryMessageType();
    public static Type[] get_MessageTypes();
    public static String[] get_MessageTypeNames();
    private sealed virtual override bool MassTransit.Internals.IMessageTypeCache.get_IsTemporaryMessageType();
    private sealed virtual override String[] MassTransit.Internals.IMessageTypeCache.get_MessageTypeNames();
    private sealed virtual override string MassTransit.Internals.IMessageTypeCache.get_DiagnosticAddress();
    private sealed virtual override IEnumerable`1<PropertyInfo> MassTransit.Internals.IMessageTypeCache.get_Properties();
    private sealed virtual override bool MassTransit.Internals.IMessageTypeCache.get_IsValidMessageType();
    [NullableContextAttribute("2")]
private sealed virtual override string MassTransit.Internals.IMessageTypeCache.get_InvalidMessageTypeReason();
    private sealed virtual override Type[] MassTransit.Internals.IMessageTypeCache.get_MessageTypes();
    private static List`1<PropertyInfo> PropertyListFactory();
    private static bool CheckIfTemporaryMessageType(Type messageTypeInfo);
    [IteratorStateMachineAttribute("MassTransit.MessageTypeCache`1/<GetMessageTypes>d__38")]
private static IEnumerable`1<Type> GetMessageTypes();
    private bool CheckIfValidMessageType();
    private static IEnumerable`1<string> GetMessageTypeNames();
    private static string GetDiagnosticAddress();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.MessageUrn : Uri {
    public static string Prefix;
    private static ConcurrentDictionary`2<Type, Cached> _cache;
    private MessageUrn(string uriString);
    protected MessageUrn(SerializationInfo serializationInfo, StreamingContext streamingContext);
    private static MessageUrn();
    public static MessageUrn ForType();
    public static string ForTypeString();
    public static MessageUrn ForType(Type type);
    public static string ForTypeString(Type type);
    private static Cached ValueFactory(Type type);
    [NullableContextAttribute("2")]
public void Deconstruct(String& name, String& ns, String& assemblyName);
    private static string GetUrnForType(Type type);
    private static string GetMessageName(Type type, bool includeScope);
    [NullableContextAttribute("2")]
private static string GetMessageNameFromAttribute(Type type);
    private static string GetMessageNameFromType(StringBuilder sb, Type type, bool includeScope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1028")]
public class MassTransit.MessageUrnAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Uri <Urn>k__BackingField;
    public Uri Urn { get; }
    public MessageUrnAttribute(string urn, bool useDefaultPrefix);
    [CompilerGeneratedAttribute]
public Uri get_Urn();
    private static Uri FormatUrn(string urn, bool useDefaultPrefix);
}
public class MassTransit.MessageUrnEntityNameFormatter : object {
    [NullableContextAttribute("1")]
public sealed virtual string FormatEntityName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MassTransit.Metadata.Activation : object {
    public static TResult Activate(Type type, IActivationType`1<TResult> activationType);
    public static TResult Activate(Type type, IActivationType`2<TResult, T1> activationType, T1 arg1);
    public static TResult Activate(Type type, IActivationType`3<TResult, T1, T2> activationType, T1 arg1, T2 arg2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MassTransit.Metadata.BusHostInfo : object {
    [CompilerGeneratedAttribute]
private string <MachineName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProcessName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MassTransitVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperatingSystemVersion>k__BackingField;
    public string MachineName { get; public set; }
    public string ProcessName { get; public set; }
    public int ProcessId { get; public set; }
    public string Assembly { get; public set; }
    public string AssemblyVersion { get; public set; }
    public string FrameworkVersion { get; public set; }
    public string MassTransitVersion { get; public set; }
    public string OperatingSystemVersion { get; public set; }
    public BusHostInfo(bool initialize);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MachineName();
    [CompilerGeneratedAttribute]
public void set_MachineName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProcessName();
    [CompilerGeneratedAttribute]
public void set_ProcessName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ProcessId();
    [CompilerGeneratedAttribute]
public void set_ProcessId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Assembly();
    [CompilerGeneratedAttribute]
public void set_Assembly(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AssemblyVersion();
    [CompilerGeneratedAttribute]
public void set_AssemblyVersion(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FrameworkVersion();
    [CompilerGeneratedAttribute]
public void set_FrameworkVersion(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MassTransitVersion();
    [CompilerGeneratedAttribute]
public void set_MassTransitVersion(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_OperatingSystemVersion();
    [CompilerGeneratedAttribute]
public void set_OperatingSystemVersion(string value);
    [NullableContextAttribute("1")]
private static string GetAssemblyFileVersion(Assembly assembly);
    [NullableContextAttribute("1")]
private static string GetAssemblyInformationalVersion(Assembly assembly);
    [NullableContextAttribute("1")]
private static string GetUsefulProcessName(string defaultProcessName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MassTransit.Metadata.HostMetadataCache : object {
    private static Nullable`1<bool> _isRunningInContainer;
    private static Nullable`1<bool> _isNetFramework;
    public static HostInfo Host { get; }
    public static HostInfo Empty { get; }
    public static bool IsRunningInContainer { get; }
    public static bool IsNetFramework { get; }
    public static HostInfo get_Host();
    public static HostInfo get_Empty();
    public static bool get_IsRunningInContainer();
    public static bool get_IsNetFramework();
}
[NullableContextAttribute("1")]
public interface MassTransit.Metadata.IActivationType`1 {
    public abstract virtual TResult ActivateType();
}
[NullableContextAttribute("2")]
public interface MassTransit.Metadata.IActivationType`2 {
    [NullableContextAttribute("1")]
public abstract virtual TResult ActivateType(T1 arg1);
}
[NullableContextAttribute("2")]
public interface MassTransit.Metadata.IActivationType`3 {
    [NullableContextAttribute("1")]
public abstract virtual TResult ActivateType(T1 arg1, T2 arg2);
}
[NullableContextAttribute("1")]
public interface MassTransit.Metadata.IImplementedMessageType {
    public abstract virtual void ImplementsMessageType(bool direct);
}
[NullableContextAttribute("1")]
public interface MassTransit.Metadata.IImplementedMessageTypeCache`1 {
    public abstract virtual void EnumerateImplementedTypes(IImplementedMessageType implementedMessageType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Metadata.ImplementedMessageTypeCache`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private CachedType[] _implementedTypes;
    private sealed virtual override void MassTransit.Metadata.IImplementedMessageTypeCache<TMessage>.EnumerateImplementedTypes(IImplementedMessageType implementedMessageType);
    public void Method1();
    public void Method2();
    public void Method3();
    public static void EnumerateImplementedTypes(IImplementedMessageType implementedMessageType);
    private static IEnumerable`1<ImplementedType<TMessage>> GetMessageTypes();
    [IteratorStateMachineAttribute("MassTransit.Metadata.ImplementedMessageTypeCache`1/<GetMessageTypes>d__8")]
private static IEnumerable`1<ImplementedType<TMessage>> GetMessageTypes(HashSet`1<Type> used, Type messageType, bool direct);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Middleware.Agent : object {
    private TaskCompletionSource`1<bool> _completed;
    private TaskCompletionSource`1<bool> _ready;
    private Lazy`1<CancellationTokenSource> _stopped;
    private Lazy`1<CancellationTokenSource> _stopping;
    [NullableAttribute("2")]
private TaskCompletionSource`1<bool> _setCompleted;
    [NullableAttribute("2")]
private CancellationTokenSource _setCompletedCancel;
    [NullableAttribute("2")]
private TaskCompletionSource`1<bool> _setReady;
    [NullableAttribute("2")]
private CancellationTokenSource _setReadyCancel;
    [CompilerGeneratedAttribute]
private bool <IsStopping>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStopped>k__BackingField;
    protected bool IsStopping { get; private set; }
    protected bool IsStopped { get; private set; }
    protected bool IsAlreadyReady { get; }
    protected bool IsAlreadyCompleted { get; }
    public Task Ready { get; }
    public Task Completed { get; }
    public CancellationToken Stopping { get; }
    public CancellationToken Stopped { get; }
    [CompilerGeneratedAttribute]
protected bool get_IsStopping();
    [CompilerGeneratedAttribute]
private void set_IsStopping(bool value);
    [CompilerGeneratedAttribute]
protected bool get_IsStopped();
    [CompilerGeneratedAttribute]
private void set_IsStopped(bool value);
    protected bool get_IsAlreadyReady();
    protected bool get_IsAlreadyCompleted();
    public sealed virtual Task get_Ready();
    public sealed virtual Task get_Completed();
    public sealed virtual CancellationToken get_Stopping();
    public sealed virtual CancellationToken get_Stopped();
    [AsyncStateMachineAttribute("MassTransit.Middleware.Agent/<Stop>d__29")]
public sealed virtual Task Stop(StopContext context);
    protected virtual Task StopAgent(StopContext context);
    public virtual void SetReady();
    public virtual void SetNotReady(Exception exception);
    protected void SetReady(Task readyTask);
    protected void SetCompleted(Task completedTask);
    protected void SetFaulted(Task task);
    [CompilerGeneratedAttribute]
private CancellationTokenSource <.ctor>b__8_0();
    [CompilerGeneratedAttribute]
private CancellationTokenSource <.ctor>b__8_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Middleware.AsyncDelegateFilter`1 : object {
    private Func`2<TContext, Task> _callback;
    public AsyncDelegateFilter`1(Func`2<TContext, Task> callback);
    private sealed virtual override void MassTransit.IProbeSite.Probe(ProbeContext context);
    [DebuggerNonUserCodeAttribute]
[DebuggerStepThroughAttribute]
public sealed virtual Task Send(TContext context, IPipe`1<TContext> next);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MassTransit.Middleware.BasePipeContext : object {
    [NullableAttribute("2")]
private IPayloadCache _payloadCache;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    protected IPayloadCache PayloadCache { get; }
    public CancellationToken CancellationToken { get; }
    protected BasePipeContext(Object[] payloads);
    protected BasePipeContext(CancellationToken cancellationToken);
    protected BasePipeContext(CancellationToken cancellationToken, Object[] payloads);
    protected BasePipeContext(IPayloadCache payloadCache);
    protected BasePipeContext(IPayloadCache payloadCache, CancellationToken cancellationToken);
    protected IPayloadCache get_PayloadCache();
    [CompilerGeneratedAttribute]
public virtual CancellationToken get_CancellationToken();
    public virtual bool HasPayloadType(Type payloadType);
    public virtual bool TryGetPayload(T& payload);
    public virtual T GetOrAddPayload(PayloadFactory`1<T> payloadFactory);
    public virtual T AddOrUpdatePayload(PayloadFactory`1<T> addFactory, UpdatePayloadFactory`1<T> updateFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Middleware.CopyContextPipe : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`2<ConsumeContext, SendContext> _callback;
    private ConsumeContext _context;
    public CopyContextPipe(ConsumeContext context, Action`2<ConsumeContext, SendContext> callback);
    public sealed virtual Task Send(SendContext context);
    public sealed virtual void Probe(ProbeContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Middleware.DelegateFilter`1 : object {
    private Action`1<TContext> _callback;
    public DelegateFilter`1(Action`1<TContext> callback);
    private sealed virtual override void MassTransit.IProbeSite.Probe(ProbeContext context);
    [DebuggerNonUserCodeAttribute]
[DebuggerStepThroughAttribute]
public sealed virtual Task Send(TContext context, IPipe`1<TContext> next);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Middleware.EmptyPipe`1 : object {
    [DebuggerNonUserCodeAttribute]
private sealed virtual override Task MassTransit.IPipe<TContext>.Send(TContext context);
    private sealed virtual override void MassTransit.IProbeSite.Probe(ProbeContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Middleware.FilterPipe`1 : object {
    private IFilter`1<TContext> _filter;
    private IPipe`1<TContext> _next;
    public FilterPipe`1(IFilter`1<TContext> filter, IPipe`1<TContext> next);
    public sealed virtual void Probe(ProbeContext context);
    [DebuggerStepThroughAttribute]
public sealed virtual Task Send(TContext context);
}
public interface MassTransit.Middleware.IMessagePublishPipe`1 {
}
public interface MassTransit.Middleware.IMessageSendPipe`1 {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Middleware.LastPipe`1 : object {
    private IFilter`1<TContext> _filter;
    public LastPipe`1(IFilter`1<TContext> filter);
    public sealed virtual void Probe(ProbeContext context);
    [DebuggerStepThroughAttribute]
public sealed virtual Task Send(TContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Middleware.MergePipe`2 : object {
    private MergeFilterContextProvider`2<TInput, TSplit> _contextProvider;
    private TInput _input;
    private IPipe`1<TInput> _next;
    public MergePipe`2(IPipe`1<TInput> next, TInput input, MergeFilterContextProvider`2<TInput, TSplit> contextProvider);
    public sealed virtual void Probe(ProbeContext context);
    public sealed virtual Task Send(TSplit context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Middleware.MessagePublishPipe`1 : object {
    private IPipe`1<PublishContext`1<TMessage>> _outputPipe;
    public MessagePublishPipe`1(IPipe`1<PublishContext`1<TMessage>> outputPipe);
    private sealed virtual override void MassTransit.IProbeSite.Probe(ProbeContext context);
    [DebuggerNonUserCodeAttribute]
private sealed virtual override Task MassTransit.IPipe<MassTransit.PublishContext<TMessage>>.Send(PublishContext`1<TMessage> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Middleware.MessageSendPipe`1 : object {
    private IPipe`1<SendContext`1<TOutput>> _outputPipe;
    public MessageSendPipe`1(IPipe`1<SendContext`1<TOutput>> outputPipe);
    private sealed virtual override void MassTransit.IProbeSite.Probe(ProbeContext context);
    [DebuggerNonUserCodeAttribute]
private sealed virtual override Task MassTransit.IPipe<MassTransit.SendContext<TOutput>>.Send(SendContext`1<TOutput> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MassTransit.Middleware.ProxyPipeContext : object {
    private PipeContext _parentContext;
    public CancellationToken CancellationToken { get; }
    protected ProxyPipeContext(PipeContext parentContext);
    public virtual CancellationToken get_CancellationToken();
    public virtual bool HasPayloadType(Type payloadType);
    public virtual bool TryGetPayload(T& payload);
    public virtual T GetOrAddPayload(PayloadFactory`1<T> payloadFactory);
    public virtual T AddOrUpdatePayload(PayloadFactory`1<T> addFactory, UpdatePayloadFactory`1<T> updateFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Middleware.PublishPipe : object {
    private ConcurrentDictionary`2<Type, IMessagePipe> _outputPipes;
    private IPublishPipeSpecification _specification;
    public PublishPipe(IPublishPipeSpecification specification);
    public sealed virtual void Probe(ProbeContext context);
    [DebuggerNonUserCodeAttribute]
[DebuggerStepThroughAttribute]
public sealed virtual Task Send(PublishContext`1<T> context);
    [CompilerGeneratedAttribute]
private IMessagePipe <Send>b__4_0(Type x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Middleware.ReceivePipe : object {
    private IConsumePipe _consumePipe;
    private IPipe`1<ReceiveContext> _receivePipe;
    public Task Connected { get; }
    public ReceivePipe(IPipe`1<ReceiveContext> receivePipe, IConsumePipe consumePipe);
    public sealed virtual Task get_Connected();
    private sealed virtual override Task MassTransit.IPipe<MassTransit.ReceiveContext>.Send(ReceiveContext context);
    private sealed virtual override void MassTransit.IProbeSite.Probe(ProbeContext context);
    private sealed virtual override ConnectHandle MassTransit.IConsumeMessageObserverConnector.ConnectConsumeMessageObserver(IConsumeMessageObserver`1<T> observer);
    private sealed virtual override ConnectHandle MassTransit.IConsumeObserverConnector.ConnectConsumeObserver(IConsumeObserver observer);
    private sealed virtual override ConnectHandle MassTransit.IConsumePipeConnector.ConnectConsumePipe(IPipe`1<ConsumeContext`1<T>> pipe);
    private sealed virtual override ConnectHandle MassTransit.IConsumePipeConnector.ConnectConsumePipe(IPipe`1<ConsumeContext`1<T>> pipe, ConnectPipeOptions options);
    private sealed virtual override ConnectHandle MassTransit.IRequestPipeConnector.ConnectRequestPipe(Guid requestId, IPipe`1<ConsumeContext`1<T>> pipe);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Middleware.ScopePipeContext : object {
    private PipeContext _context;
    [NullableAttribute("2")]
private IPayloadCache _payloadCache;
    public CancellationToken CancellationToken { get; }
    private IPayloadCache PayloadCache { get; }
    protected ScopePipeContext(PipeContext context);
    protected ScopePipeContext(PipeContext context, Object[] payloads);
    public virtual CancellationToken get_CancellationToken();
    private IPayloadCache get_PayloadCache();
    public virtual bool HasPayloadType(Type payloadType);
    public virtual bool TryGetPayload(T& payload);
    public virtual T GetOrAddPayload(PayloadFactory`1<T> payloadFactory);
    public virtual T AddOrUpdatePayload(PayloadFactory`1<T> addFactory, UpdatePayloadFactory`1<T> updateFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Middleware.SendPipe : object {
    private ConcurrentDictionary`2<Type, IMessagePipe> _outputPipes;
    private ISendPipeSpecification _specification;
    public SendPipe(ISendPipeSpecification specification);
    public sealed virtual void Probe(ProbeContext context);
    [DebuggerNonUserCodeAttribute]
[DebuggerStepThroughAttribute]
public sealed virtual Task Send(SendContext`1<T> context);
    [CompilerGeneratedAttribute]
private IMessagePipe <Send>b__4_0(Type x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Middleware.SplitFilter`2 : object {
    private MergeFilterContextProvider`2<TInput, TSplit> _contextProvider;
    private FilterContextProvider`2<TSplit, TInput> _inputContextProvider;
    private IFilter`1<TSplit> _split;
    public SplitFilter`2(IFilter`1<TSplit> split, MergeFilterContextProvider`2<TInput, TSplit> contextProvider, FilterContextProvider`2<TSplit, TInput> inputContextProvider);
    public sealed virtual void Probe(ProbeContext context);
    [DebuggerNonUserCodeAttribute]
public sealed virtual Task Send(TInput context, IPipe`1<TInput> next);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Middleware.Supervisor : Agent {
    private Dictionary`2<long, IAgent> _agents;
    private long _nextId;
    [CompilerGeneratedAttribute]
private int <PeakActiveCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalCount>k__BackingField;
    public int PeakActiveCount { get; private set; }
    public long TotalCount { get; private set; }
    public sealed virtual void Add(IAgent agent);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PeakActiveCount();
    [CompilerGeneratedAttribute]
private void set_PeakActiveCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_TotalCount();
    [CompilerGeneratedAttribute]
private void set_TotalCount(long value);
    public virtual void SetReady();
    protected virtual Task StopAgent(StopContext context);
    [AsyncStateMachineAttribute("MassTransit.Middleware.Supervisor/<StopSupervisor>d__14")]
protected virtual Task StopSupervisor(StopSupervisorContext context);
    private void Remove(long id);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class MassTransit.NewId : ValueType {
    public static NewId Empty;
    private static INewIdFormatter BraceFormatter;
    private static INewIdFormatter DashedHexFormatter;
    private static INewIdFormatter HexFormatter;
    private static INewIdFormatter ParenFormatter;
    [NullableAttribute("2")]
private static INewIdGenerator _generator;
    [NullableAttribute("2")]
private static ITickProvider _tickProvider;
    [NullableAttribute("2")]
private static IWorkerIdProvider _workerIdProvider;
    private int _a;
    private int _b;
    private int _c;
    private int _d;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private static IProcessIdProvider <ProcessIdProvider>k__BackingField;
    private static ThreadLocal`1<Byte[]> _formatterArray;
    private static SpinLock _spinLock;
    private static IWorkerIdProvider WorkerIdProvider { get; }
    [NullableAttribute("2")]
private static IProcessIdProvider ProcessIdProvider { get; private set; }
    private static ITickProvider TickProvider { get; }
    public DateTime Timestamp { get; }
    public NewId(Byte[]& bytes);
    public NewId(String& value);
    public NewId(int a, int b, int c, int d);
    public NewId(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k);
    private static NewId();
    private static IWorkerIdProvider get_WorkerIdProvider();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private static IProcessIdProvider get_ProcessIdProvider();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private static void set_ProcessIdProvider(IProcessIdProvider value);
    private static ITickProvider get_TickProvider();
    public DateTime get_Timestamp();
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(object obj);
    public sealed virtual int CompareTo(NewId other);
    public sealed virtual bool Equals(NewId other);
    [NullableContextAttribute("2")]
public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public string ToString(INewIdFormatter formatter, bool sequential);
    private Byte[] GetFormatterArray();
    private Byte[] GetSequentialFormatterArray();
    public Guid ToGuid();
    public Guid ToSequentialGuid();
    public static NewId FromGuid(Guid& guid);
    public static NewId FromSequentialGuid(Guid& guid);
    public Byte[] ToByteArray();
    public virtual string ToString();
    public string ToString(string format);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(NewId& left, NewId& right);
    public static bool op_Inequality(NewId& left, NewId& right);
    public static bool op_LessThan(NewId& left, NewId& right);
    public static bool op_GreaterThan(NewId& left, NewId& right);
    public static void SetGenerator(INewIdGenerator generator);
    public static void SetWorkerIdProvider(IWorkerIdProvider provider);
    [NullableContextAttribute("2")]
public static void SetProcessIdProvider(IProcessIdProvider provider);
    public static void SetTickProvider(ITickProvider provider);
    private static INewIdGenerator _getGenerator();
    public static NewId Next();
    public static NewId[] Next(int count);
    [NullableContextAttribute("0")]
public static ArraySegment`1<NewId> Next(NewId[] ids, int index, int count);
    public static Guid[] NextGuid(int count);
    [NullableContextAttribute("0")]
public static ArraySegment`1<Guid> NextGuid(Guid[] ids, int index, int count);
    public static Guid NextGuid();
    public static Guid NextSequentialGuid();
    private static void FromGuid(Guid& guid, NewId& newId);
    [NullableContextAttribute("0")]
private static void FromByteArray(ReadOnlySpan`1<byte> bytes, NewId& newId);
    private static void FromSequentialByteArray(Guid& guid, NewId& newId);
}
[ExtensionAttribute]
public static class MassTransit.NewIdExtensions : object {
    [ExtensionAttribute]
public static NewId ToNewId(Guid guid);
    [ExtensionAttribute]
public static NewId ToNewIdFromSequential(Guid guid);
}
public class MassTransit.NewIdFormatters.Base32Formatter : object {
    [NullableAttribute("1")]
private static string LowerCaseChars;
    [NullableAttribute("1")]
private static string UpperCaseChars;
    [NullableAttribute("1")]
private string _chars;
    private bool _isUpperCase;
    private bool _isCustom;
    private Vector256`1<byte> _lower;
    private Vector256`1<byte> _upper;
    public Base32Formatter(bool upperCase);
    [NullableContextAttribute("1")]
public Base32Formatter(String& chars);
    [NullableContextAttribute("1")]
public string Format(Byte[]& bytes);
    private static void ConvertLongToBase32(Char* buffer, int offset, long value, int count, string chars);
    private static void EncodeKnown(ReadOnlySpan`1<byte> source, Span`1<char> destination, bool isUpperCase);
    private sealed virtual override string MassTransit.INewIdFormatter.Format(Byte[]& modreq(System.Runtime.InteropServices.InAttribute) bytes);
}
public class MassTransit.NewIdFormatters.DashedHexFormatter : object {
    private UInt32 _alpha;
    private int _length;
    private char _prefix;
    private char _suffix;
    private static UInt32 LowerCaseUInt;
    public DashedHexFormatter(char prefix, char suffix, bool upperCase);
    [NullableContextAttribute("1")]
public string Format(Byte[]& bytes);
    private static void EncodeVector256(Span`1<char> span, ValueTuple`4<Byte[], bool, char, char> state);
    private static void HexToChar(byte value, Char* buffer, int startingIndex, UInt32 casing);
    private sealed virtual override string MassTransit.INewIdFormatter.Format(Byte[]& modreq(System.Runtime.InteropServices.InAttribute) bytes);
}
public class MassTransit.NewIdFormatters.HexFormatter : object {
    private UInt32 _alpha;
    private static UInt32 LowerCaseUInt;
    public HexFormatter(bool upperCase);
    [NullableContextAttribute("1")]
public string Format(Byte[]& bytes);
    private static void HexToChar(byte value, Char* buffer, int startingIndex, UInt32 casing);
    private sealed virtual override string MassTransit.INewIdFormatter.Format(Byte[]& modreq(System.Runtime.InteropServices.InAttribute) bytes);
}
internal static class MassTransit.NewIdFormatters.IntrinsicsHelper : object {
    public static void Vector128ToCharUtf16(Vector128`1<byte> value, Span`1<byte> destination);
    public static void Vector256ToCharUtf16(Vector256`1<byte> vec, Span`1<byte> destination);
    public static Vector256`1<byte> GetByteLutFromChar(Vector256`1<byte> value);
    public static Vector256`1<byte> EncodeBytesHex(Vector128`1<byte> vec, bool isUpper);
    public static void EncodeBase32(ReadOnlySpan`1<byte> span, Span`1<char> output, Vector256`1<byte> lowLut, Vector256`1<byte> upperLut);
    public static Vector256`1<byte> Split130Bits5x26(Vector256`1<byte> input);
    public static Vector256`1<byte> EncodeValuesBase32(Vector256`1<byte> x, Vector256`1<byte> lower, Vector256`1<byte> upper);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.NewIdFormatters.ZBase32Formatter : object {
    private static string LowerCaseChars;
    private static string UpperCaseChars;
    private string _chars;
    private bool _isUpper;
    public static INewIdFormatter LowerCase;
    public ZBase32Formatter(bool upperCase);
    private static ZBase32Formatter();
    public string Format(Byte[]& bytes);
    [NullableContextAttribute("0")]
private static void ConvertLongToBase32(Char* buffer, int offset, long value, int count, string chars);
    [NullableContextAttribute("0")]
private static void EncodeKnownCase(ReadOnlySpan`1<byte> source, Span`1<char> destination, bool isUpperCase);
    private sealed virtual override string MassTransit.INewIdFormatter.Format(Byte[]& modreq(System.Runtime.InteropServices.InAttribute) bytes);
}
public class MassTransit.NewIdGenerator : object {
    private int _c;
    private int _d;
    private short _gb;
    private short _gc;
    [NullableAttribute("1")]
private ITickProvider _tickProvider;
    private int _a;
    private int _b;
    private long _lastTick;
    private int _sequence;
    private SpinLock _spinLock;
    [NullableContextAttribute("1")]
public NewIdGenerator(ITickProvider tickProvider, IWorkerIdProvider workerIdProvider, IProcessIdProvider processIdProvider, int workerIndex);
    public sealed virtual NewId Next();
    public sealed virtual Guid NextGuid();
    public sealed virtual Guid NextSequentialGuid();
    public sealed virtual ArraySegment`1<NewId> Next(NewId[] ids, int index, int count);
    public sealed virtual ArraySegment`1<Guid> NextSequentialGuid(Guid[] ids, int index, int count);
    private void UpdateTimestamp(long tick);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.NewIdParsers.Base32Parser : object {
    private static string ConvertChars;
    private static string HexChars;
    private static string InvalidInputString;
    private static ThreadLocal`1<Char[]> _buffer;
    private string _chars;
    public Base32Parser(String& chars);
    private static Base32Parser();
    public NewId Parse(String& text);
    private static void ConvertLongToBase16(Char[]& buffer, int offset, long value, int count);
    private sealed virtual override NewId MassTransit.INewIdParser.Parse(String& modreq(System.Runtime.InteropServices.InAttribute) text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.NewIdParsers.ZBase32Parser : Base32Parser {
    private static string ConvertChars;
    private static string TransposeChars;
    public ZBase32Parser(bool handleTransposedCharacters);
}
public class MassTransit.NewIdProviders.BestPossibleWorkerIdProvider : object {
    [NullableContextAttribute("1")]
public sealed virtual Byte[] GetWorkerId(int index);
}
public class MassTransit.NewIdProviders.CurrentProcessIdProvider : object {
    [NullableContextAttribute("1")]
public sealed virtual Byte[] GetProcessId();
}
public class MassTransit.NewIdProviders.DateTimeTickProvider : object {
    public long Ticks { get; }
    public sealed virtual long get_Ticks();
}
public class MassTransit.NewIdProviders.HostNameHashWorkerIdProvider : object {
    [NullableContextAttribute("1")]
public sealed virtual Byte[] GetWorkerId(int index);
    [NullableContextAttribute("1")]
private static Byte[] GetNetworkAddress();
}
public class MassTransit.NewIdProviders.NetworkAddressWorkerIdProvider : object {
    [NullableContextAttribute("1")]
public sealed virtual Byte[] GetWorkerId(int index);
    [NullableContextAttribute("1")]
private static Byte[] GetNetworkAddress(int index);
}
public class MassTransit.NewIdProviders.StopwatchTickProvider : object {
    private DateTime _start;
    [NullableAttribute("1")]
private Stopwatch _stopwatch;
    public long Ticks { get; }
    public sealed virtual long get_Ticks();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.NinjectCantHandleThis : MassTransitException {
    public NinjectCantHandleThis(string message);
    public NinjectCantHandleThis(string message, Exception innerException);
    protected NinjectCantHandleThis(SerializationInfo info, StreamingContext context);
}
public class MassTransit.NotAcceptedStateMachineException : SagaException {
    [NullableContextAttribute("1")]
public NotAcceptedStateMachineException(Type sagaType, Type messageType, Guid correlationId, string currentState, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.NotImplementedByDesignException : MassTransitException {
    public NotImplementedByDesignException(string message);
    public NotImplementedByDesignException(string message, Exception innerException);
    protected NotImplementedByDesignException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Observables.ActivityObservable : Connectable`1<IActivityObserver> {
    public sealed virtual Task PreExecute(ExecuteActivityContext`2<TActivity, TArguments> context);
    public sealed virtual Task PostExecute(ExecuteActivityContext`2<TActivity, TArguments> context);
    public sealed virtual Task ExecuteFault(ExecuteActivityContext`2<TActivity, TArguments> context, Exception exception);
    public sealed virtual Task PreCompensate(CompensateActivityContext`2<TActivity, TLog> context);
    public sealed virtual Task PostCompensate(CompensateActivityContext`2<TActivity, TLog> context);
    public sealed virtual Task CompensateFail(CompensateActivityContext`2<TActivity, TLog> context, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Observables.BusObservable : Connectable`1<IBusObserver> {
    public sealed virtual void PostCreate(IBus bus);
    public sealed virtual void CreateFaulted(Exception exception);
    public sealed virtual Task PreStart(IBus bus);
    public sealed virtual Task PostStart(IBus bus, Task`1<BusReady> busReady);
    public sealed virtual Task StartFaulted(IBus bus, Exception exception);
    public sealed virtual Task PreStop(IBus bus);
    public sealed virtual Task PostStop(IBus bus);
    public sealed virtual Task StopFaulted(IBus bus, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Observables.ConsumeMessageObservable`1 : Connectable`1<IConsumeMessageObserver`1<T>> {
    public sealed virtual Task PreConsume(ConsumeContext`1<T> context);
    public sealed virtual Task PostConsume(ConsumeContext`1<T> context);
    public sealed virtual Task ConsumeFault(ConsumeContext`1<T> context, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Observables.ConsumeObservable : Connectable`1<IConsumeObserver> {
    public sealed virtual Task PreConsume(ConsumeContext`1<T> context);
    public sealed virtual Task PostConsume(ConsumeContext`1<T> context);
    public sealed virtual Task ConsumeFault(ConsumeContext`1<T> context, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Observables.ConsumeObserverConverter`1 : object {
    private sealed virtual override Task MassTransit.Observables.IConsumeObserverConverter.PreConsume(IConsumeObserver observer, object context);
    private sealed virtual override Task MassTransit.Observables.IConsumeObserverConverter.PostConsume(IConsumeObserver observer, object context);
    private sealed virtual override Task MassTransit.Observables.IConsumeObserverConverter.ConsumeFault(IConsumeObserver observer, object context, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Observables.FilterObservable : Connectable`1<IFilterObserver> {
    public sealed virtual Task PreSend(T context);
    public sealed virtual Task PostSend(T context);
    public sealed virtual Task SendFault(T context, Exception exception);
    public void Method4();
    public void Method5();
    public void Method6();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Observables.FilterObservable`1 : Connectable`1<IFilterObserver`1<TContext>> {
    public sealed virtual Task PreSend(TContext context);
    public sealed virtual Task PostSend(TContext context);
    public sealed virtual Task SendFault(TContext context, Exception exception);
    public void Method4();
    public void Method5();
    public void Method6();
}
[NullableContextAttribute("1")]
public interface MassTransit.Observables.IConsumeObserverConverter {
    public abstract virtual Task PreConsume(IConsumeObserver observer, object context);
    public abstract virtual Task PostConsume(IConsumeObserver observer, object context);
    public abstract virtual Task ConsumeFault(IConsumeObserver observer, object context, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Observables.PublishObservable : Connectable`1<IPublishObserver> {
    public sealed virtual Task PrePublish(PublishContext`1<T> context);
    public sealed virtual Task PostPublish(PublishContext`1<T> context);
    public sealed virtual Task PublishFault(PublishContext`1<T> context, Exception exception);
    public sealed virtual Task PreSend(SendContext`1<T> context);
    public sealed virtual Task PostSend(SendContext`1<T> context);
    public sealed virtual Task SendFault(SendContext`1<T> context, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Observables.ReceiveEndpointObservable : Connectable`1<IReceiveEndpointObserver> {
    public sealed virtual Task Ready(ReceiveEndpointReady ready);
    public sealed virtual Task Stopping(ReceiveEndpointStopping stopping);
    public sealed virtual Task Completed(ReceiveEndpointCompleted completed);
    public sealed virtual Task Faulted(ReceiveEndpointFaulted faulted);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Observables.ReceiveObservable : Connectable`1<IReceiveObserver> {
    public sealed virtual Task PreReceive(ReceiveContext context);
    public sealed virtual Task PostReceive(ReceiveContext context);
    public sealed virtual Task PostConsume(ConsumeContext`1<T> context, TimeSpan duration, string consumerType);
    public sealed virtual Task ConsumeFault(ConsumeContext`1<T> context, TimeSpan duration, string consumerType, Exception exception);
    public sealed virtual Task ReceiveFault(ReceiveContext context, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Observables.ReceiveTransportObservable : Connectable`1<IReceiveTransportObserver> {
    public sealed virtual Task Ready(ReceiveTransportReady ready);
    public sealed virtual Task Completed(ReceiveTransportCompleted completed);
    public sealed virtual Task Faulted(ReceiveTransportFaulted faulted);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class MassTransit.Observables.RetryFaultObserverCache : object {
    private ConcurrentDictionary`2<Type, Lazy`1<IRetryFaultObserver>> _types;
    private IRetryFaultObserver Item { get; }
    private IRetryFaultObserver get_Item(Type type);
    public static Task RetryFault(IRetryObserver observer, RetryContext context, Type contextType);
    private static Lazy`1<IRetryFaultObserver> CreateTypeConverter(Type type);
    private static IRetryFaultObserver CreateConverter(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Observables.RetryObservable : Connectable`1<IRetryObserver> {
    public sealed virtual Task PostCreate(RetryPolicyContext`1<T> context);
    public sealed virtual Task PostFault(RetryContext`1<T> context);
    public sealed virtual Task PreRetry(RetryContext`1<T> context);
    public sealed virtual Task RetryFault(RetryContext`1<T> context);
    public sealed virtual Task RetryComplete(RetryContext`1<T> context);
    public Task RetryFault(RetryContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Observables.SendObservable : Connectable`1<ISendObserver> {
    public sealed virtual Task PreSend(SendContext`1<T> context);
    public sealed virtual Task PostSend(SendContext`1<T> context);
    public sealed virtual Task SendFault(SendContext`1<T> context, Exception exception);
}
[NullableContextAttribute("1")]
public interface MassTransit.Observes`2 {
    public Expression`1<Func`3<TSaga, TMessage, bool>> CorrelationExpression { get; }
    public abstract virtual Expression`1<Func`3<TSaga, TMessage, bool>> get_CorrelationExpression();
}
public interface MassTransit.OneTimeContext {
    public abstract virtual void Evict();
}
[NullableContextAttribute("1")]
public interface MassTransit.OneTimeContext`1 {
    public abstract virtual void Evict();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MassTransit.OneTimeContextPayload`1 : object {
    [NullableAttribute("2")]
private Task`1<bool> _createValue;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Queue`1<OneTimeSetupMethod> _pending;
    private TaskCompletionSource`1<bool> _value;
    public Task Value { get; }
    public bool HasValue { get; }
    public bool IsFaultedOrCanceled { get; }
    public Task get_Value();
    public bool get_HasValue();
    public bool get_IsFaultedOrCanceled();
    public sealed virtual void Evict();
    public Task RunOneTime(Func`1<OneTimeSetupMethod> oneTimeSetupMethodFactory);
    [AsyncStateMachineAttribute("MassTransit.OneTimeContextPayload`1/<RunOnce>d__12")]
private Task`1<bool> RunOnce(OneTimeSetupMethod oneTimeSetupMethod);
    [NullableContextAttribute("2")]
private bool TryTake(OneTimeSetupMethod& pendingValue);
    private void SetResult(bool value);
    private void SetException(ExceptionDispatchInfo dispatchInfo);
}
public class MassTransit.OneTimeSetupCallback : MulticastDelegate {
    public OneTimeSetupCallback(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MassTransit.OneTimeSetupMethod : object {
    private OneTimeSetupCallback _callback;
    private TaskCompletionSource`1<bool> _value;
    public Task`1<bool> Value { get; }
    public OneTimeSetupMethod(OneTimeSetupCallback callback);
    public Task`1<bool> get_Value();
    public Task SetupPayload();
    public void SetPayload(Task`1<bool> value);
}
[NullableContextAttribute("1")]
public interface MassTransit.Orchestrates`1 {
}
[NullableContextAttribute("2")]
public interface MassTransit.PartitionKeyConsumeContext {
    public string PartitionKey { get; }
    public abstract virtual string get_PartitionKey();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.PartitionKeyExtensions : object {
    [ExtensionAttribute]
public static string PartitionKey(ConsumeContext context);
    [ExtensionAttribute]
public static string PartitionKey(SendContext context);
    [ExtensionAttribute]
public static void SetPartitionKey(SendContext context, string routingKey);
    [ExtensionAttribute]
public static bool TrySetPartitionKey(SendContext context, string routingKey);
}
[NullableContextAttribute("2")]
public interface MassTransit.PartitionKeySendContext {
    public string PartitionKey { get; public set; }
    public abstract virtual string get_PartitionKey();
    public abstract virtual void set_PartitionKey(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.PayloadException : MassTransitException {
    public PayloadException(string message);
    public PayloadException(string message, Exception innerException);
    protected PayloadException(SerializationInfo info, StreamingContext context);
}
public class MassTransit.PayloadFactory`1 : MulticastDelegate {
    public PayloadFactory`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual TPayload Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual TPayload EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.PayloadFactoryException : PayloadException {
    public PayloadFactoryException(string message);
    public PayloadFactoryException(string message, Exception innerException);
    protected PayloadFactoryException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.PayloadNotFoundException : PayloadException {
    public PayloadNotFoundException(string message);
    public PayloadNotFoundException(string message, Exception innerException);
    protected PayloadNotFoundException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
public interface MassTransit.Payloads.IPayloadCache {
    public abstract virtual bool HasPayloadType(Type payloadType);
    public abstract virtual bool TryGetPayload(TPayload& payload);
    public abstract virtual T GetOrAddPayload(PayloadFactory`1<T> payloadFactory);
    public abstract virtual T AddOrUpdatePayload(PayloadFactory`1<T> addFactory, UpdatePayloadFactory`1<T> updateFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Payloads.ListPayloadCache : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IList`1<object> _cache;
    public ListPayloadCache(Object[] payloads);
    public sealed virtual bool HasPayloadType(Type payloadType);
    public sealed virtual bool TryGetPayload(TPayload& payload);
    public sealed virtual T GetOrAddPayload(PayloadFactory`1<T> payloadFactory);
    public sealed virtual T AddOrUpdatePayload(PayloadFactory`1<T> addFactory, UpdatePayloadFactory`1<T> updateFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.Pipe : object {
    public static IPipe`1<T> New(Action`1<IPipeConfigurator`1<T>> callback);
    public static IPipe`1<T> New(Action`1<IPipeConfigurator`1<T>> callback, bool validate);
    public static IPipe`1<T> Execute(Action`1<T> action);
    [ExtensionAttribute]
public static IPipe`1<T> AddCallback(IPipe`1<T> pipe, Action`1<T> action);
    public static IPipe`1<T> ExecuteAsync(Func`2<T, Task> action);
    public static IPipe`1<T> Empty();
    [ExtensionAttribute]
public static IPipe`1<T> ToPipe(IFilter`1<T> filter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.PipeConfigurationException : MassTransitException {
    public PipeConfigurationException(string message);
    public PipeConfigurationException(string message, Exception innerException);
    protected PipeConfigurationException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
public interface MassTransit.PipeContext {
    public CancellationToken CancellationToken { get; }
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual bool HasPayloadType(Type payloadType);
    public abstract virtual bool TryGetPayload(T& payload);
    public abstract virtual T GetOrAddPayload(PayloadFactory`1<T> payloadFactory);
    public abstract virtual T AddOrUpdatePayload(PayloadFactory`1<T> addFactory, UpdatePayloadFactory`1<T> updateFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.PipeExtensions : object {
    [ExtensionAttribute]
public static bool IsNotEmpty(IPipe`1<T> pipe);
    [ExtensionAttribute]
public static bool IsEmpty(IPipe`1<T> pipe);
    [ExtensionAttribute]
public static TPayload GetPayload(PipeContext context);
    [ExtensionAttribute]
public static TPayload GetPayload(PipeContext context, TPayload defaultPayload);
    [AsyncStateMachineAttribute("MassTransit.PipeExtensions/<OneTimeSetup>d__4`1")]
[ExtensionAttribute]
public static Task`1<OneTimeContext`1<T>> OneTimeSetup(PipeContext context, OneTimeSetupCallback setupMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.PipeFactoryException : MassTransitException {
    public PipeFactoryException(string message);
    public PipeFactoryException(string message, Exception innerException);
    protected PipeFactoryException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.PipelineException : MassTransitException {
    public PipelineException(string message);
    public PipelineException(string message, Exception innerException);
    protected PipelineException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.PrefixEntityNameFormatter : object {
    private IEntityNameFormatter _entityNameFormatter;
    private string _prefix;
    public PrefixEntityNameFormatter(IEntityNameFormatter entityNameFormatter, string prefix);
    public sealed virtual string FormatEntityName();
}
[NullableContextAttribute("1")]
public interface MassTransit.ProbeContext {
    public CancellationToken CancellationToken { get; }
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual void Add(string key, string value);
    public abstract virtual void Add(string key, object value);
    public abstract virtual void Set(object values);
    public abstract virtual void Set(IEnumerable`1<KeyValuePair`2<string, object>> values);
    public abstract virtual ProbeContext CreateScope(string key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.ProbeContextExtensions : object {
    [ExtensionAttribute]
public static ProbeContext CreateFilterScope(ProbeContext context, string filterType);
    [ExtensionAttribute]
public static ProbeContext CreateConsumerFactoryScope(ProbeContext context, string source);
    [ExtensionAttribute]
public static ProbeContext CreateMessageScope(ProbeContext context, string messageType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.ProduceException : MassTransitException {
    public ProduceException(string message);
    public ProduceException(string message, Exception innerException);
    protected ProduceException(SerializationInfo info, StreamingContext context);
}
public interface MassTransit.PublishContext {
    public bool Mandatory { get; public set; }
    public abstract virtual bool get_Mandatory();
    public abstract virtual void set_Mandatory(bool value);
}
public interface MassTransit.PublishContext`1 {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.PublishEndpointExtensions : object {
    [ExtensionAttribute]
public static Task Publish(IPublishEndpoint publishEndpoint, Type messageType, object values, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task Publish(IPublishEndpoint publishEndpoint, Type messageType, object values, IPipe`1<PublishContext> pipe, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.PublishException : MassTransitException {
    public PublishException(string message);
    public PublishException(string message, Exception innerException);
    protected PublishException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.PublishExecuteExtensions : object {
    [ExtensionAttribute]
public static Task Publish(IPublishEndpoint endpoint, T message, Action`1<PublishContext`1<T>> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task Publish(IPublishEndpoint endpoint, T message, Func`2<PublishContext`1<T>, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task Publish(IPublishEndpoint endpoint, object message, Action`1<PublishContext> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task Publish(IPublishEndpoint endpoint, object message, Func`2<PublishContext, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task Publish(IPublishEndpoint endpoint, object message, Type messageType, Action`1<PublishContext> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task Publish(IPublishEndpoint endpoint, object message, Type messageType, Func`2<PublishContext, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task Publish(IPublishEndpoint endpoint, object values, Action`1<PublishContext`1<T>> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task Publish(IPublishEndpoint endpoint, object values, Func`2<PublishContext`1<T>, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IPipe`1<PublishContext`1<T>> ToPipe(Action`1<PublishContext`1<T>> callback);
    [ExtensionAttribute]
public static IPipe`1<PublishContext`1<T>> ToPipe(Func`2<PublishContext`1<T>, Task> callback);
    [ExtensionAttribute]
public static IPipe`1<PublishContext> ToPipe(Action`1<PublishContext> callback);
    [ExtensionAttribute]
public static IPipe`1<PublishContext> ToPipe(Func`2<PublishContext, Task> callback);
}
[ExtensionAttribute]
public static class MassTransit.RateLimitExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task SetRateLimit(IPipe`1<CommandContext> pipe, int rateLimit);
}
[NullableContextAttribute("1")]
public interface MassTransit.ReceiveContext {
    public TimeSpan ElapsedTime { get; }
    public Uri InputAddress { get; }
    public ContentType ContentType { get; }
    public bool Redelivered { get; }
    public Headers TransportHeaders { get; }
    public Task ReceiveCompleted { get; }
    public bool IsDelivered { get; }
    public bool IsFaulted { get; }
    public ISendEndpointProvider SendEndpointProvider { get; }
    public IPublishEndpointProvider PublishEndpointProvider { get; }
    public bool PublishFaults { get; }
    public MessageBody Body { get; }
    public abstract virtual TimeSpan get_ElapsedTime();
    public abstract virtual Uri get_InputAddress();
    public abstract virtual ContentType get_ContentType();
    public abstract virtual bool get_Redelivered();
    public abstract virtual Headers get_TransportHeaders();
    public abstract virtual Task get_ReceiveCompleted();
    public abstract virtual bool get_IsDelivered();
    public abstract virtual bool get_IsFaulted();
    public abstract virtual ISendEndpointProvider get_SendEndpointProvider();
    public abstract virtual IPublishEndpointProvider get_PublishEndpointProvider();
    public abstract virtual bool get_PublishFaults();
    public abstract virtual MessageBody get_Body();
    public abstract virtual Task NotifyConsumed(ConsumeContext`1<T> context, TimeSpan duration, string consumerType);
    public abstract virtual Task NotifyFaulted(ConsumeContext`1<T> context, TimeSpan duration, string consumerType, Exception exception);
    public abstract virtual Task NotifyFaulted(Exception exception);
    public abstract virtual void AddReceiveTask(Task task);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.ReceiveContextBodyExtensions : object {
    [ExtensionAttribute]
public static Stream GetBodyStream(ReceiveContext context);
    [ExtensionAttribute]
public static Byte[] GetBody(ReceiveContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.ReceiveContextExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<Guid> GetMessageId(ReceiveContext context);
    [ExtensionAttribute]
public static Guid GetMessageId(ReceiveContext context, Guid defaultValue);
    [ExtensionAttribute]
public static Nullable`1<Guid> GetCorrelationId(ReceiveContext context);
    [ExtensionAttribute]
public static Nullable`1<Guid> GetConversationId(ReceiveContext context);
    [ExtensionAttribute]
public static Nullable`1<Guid> GetRequestId(ReceiveContext context);
    [ExtensionAttribute]
public static Nullable`1<Guid> GetInitiatorId(ReceiveContext context);
    [ExtensionAttribute]
public static Uri GetSourceAddress(ReceiveContext context);
    [ExtensionAttribute]
public static Uri GetResponseAddress(ReceiveContext context);
    [ExtensionAttribute]
public static Uri GetFaultAddress(ReceiveContext context);
    [ExtensionAttribute]
public static Nullable`1<DateTime> GetSentTime(ReceiveContext context);
    [ExtensionAttribute]
public static String[] GetMessageTypes(ReceiveContext context);
    [ExtensionAttribute]
public static Encoding GetMessageEncoding(ReceiveContext context);
    [ExtensionAttribute]
public static Nullable`1<Guid> GetMessageId(Headers headers);
    [ExtensionAttribute]
public static Guid GetMessageId(Headers headers, Guid defaultValue);
    [ExtensionAttribute]
public static Nullable`1<Guid> GetCorrelationId(Headers headers);
    [ExtensionAttribute]
public static Nullable`1<Guid> GetConversationId(Headers headers);
    [ExtensionAttribute]
public static Nullable`1<Guid> GetRequestId(Headers headers);
    [ExtensionAttribute]
public static Nullable`1<Guid> GetInitiatorId(Headers headers);
    [ExtensionAttribute]
public static Uri GetSourceAddress(Headers headers);
    [ExtensionAttribute]
public static Uri GetResponseAddress(Headers headers);
    [ExtensionAttribute]
public static Uri GetFaultAddress(Headers headers);
    [ExtensionAttribute]
public static String[] GetMessageTypes(Headers headers);
    [ExtensionAttribute]
public static Encoding GetMessageEncoding(Headers headers);
    [ExtensionAttribute]
public static Guid GetHeaderId(Headers headers, string key, Guid defaultValue);
    [ExtensionAttribute]
public static Nullable`1<Guid> GetHeaderId(Headers headers, string key);
    [ExtensionAttribute]
private static Nullable`1<DateTime> GetTimestamp(Headers headers, string key);
    [ExtensionAttribute]
public static Uri GetEndpointAddress(Headers headers, string key);
}
public interface MassTransit.ReceiveEndpointCompleted {
    public long DeliveryCount { get; }
    public long ConcurrentDeliveryCount { get; }
    public abstract virtual long get_DeliveryCount();
    public abstract virtual long get_ConcurrentDeliveryCount();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.ReceiveEndpointConfiguratorDependencyExtensions : object {
    [ExtensionAttribute]
public static void AddDependency(IReceiveEndpointConfigurator connector, IReceiveEndpointConfigurator dependency);
}
[NullableContextAttribute("1")]
public interface MassTransit.ReceiveEndpointEvent {
    public Uri InputAddress { get; }
    public IReceiveEndpoint ReceiveEndpoint { get; }
    public abstract virtual Uri get_InputAddress();
    public abstract virtual IReceiveEndpoint get_ReceiveEndpoint();
}
[NullableContextAttribute("2")]
public interface MassTransit.ReceiveEndpointFaulted {
    public Exception Exception { get; }
    public abstract virtual Exception get_Exception();
}
[NullableContextAttribute("1")]
public interface MassTransit.ReceiveEndpointHandle {
    public Task`1<ReceiveEndpointReady> Ready { get; }
    public abstract virtual Task`1<ReceiveEndpointReady> get_Ready();
    public abstract virtual Task Stop(CancellationToken cancellationToken);
}
public interface MassTransit.ReceiveEndpointReady {
    public bool IsStarted { get; }
    public abstract virtual bool get_IsStarted();
}
public interface MassTransit.ReceiveEndpointStopping {
    public bool Removed { get; }
    public abstract virtual bool get_Removed();
}
[NullableContextAttribute("1")]
public interface MassTransit.ReceiveFault {
    public string ContentType { get; }
    public abstract virtual string get_ContentType();
}
public interface MassTransit.ReceiveTransportCompleted {
    public long DeliveryCount { get; }
    public long ConcurrentDeliveryCount { get; }
    public abstract virtual long get_DeliveryCount();
    public abstract virtual long get_ConcurrentDeliveryCount();
}
[NullableContextAttribute("1")]
public interface MassTransit.ReceiveTransportEvent {
    public Uri InputAddress { get; }
    public abstract virtual Uri get_InputAddress();
}
[NullableContextAttribute("2")]
public interface MassTransit.ReceiveTransportFaulted {
    public Exception Exception { get; }
    public abstract virtual Exception get_Exception();
}
public interface MassTransit.ReceiveTransportReady {
    public bool IsStarted { get; }
    public abstract virtual bool get_IsStarted();
}
[FlagsAttribute]
public enum MassTransit.RedeliveryOptions : Enum {
    public int value__;
    public static RedeliveryOptions None;
    public static RedeliveryOptions ReplaceMessageId;
    public static RedeliveryOptions UseMessageScheduler;
}
[NullableContextAttribute("1")]
public interface MassTransit.Request`3 {
    public string Name { get; }
    public RequestSettings`3<TSaga, TRequest, TResponse> Settings { get; }
    public Event`1<TResponse> Completed { get; public set; }
    public Event`1<Fault`1<TRequest>> Faulted { get; public set; }
    public Event`1<RequestTimeoutExpired`1<TRequest>> TimeoutExpired { get; public set; }
    public State Pending { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual RequestSettings`3<TSaga, TRequest, TResponse> get_Settings();
    public abstract virtual Event`1<TResponse> get_Completed();
    public abstract virtual void set_Completed(Event`1<TResponse> value);
    public abstract virtual Event`1<Fault`1<TRequest>> get_Faulted();
    public abstract virtual void set_Faulted(Event`1<Fault`1<TRequest>> value);
    public abstract virtual Event`1<RequestTimeoutExpired`1<TRequest>> get_TimeoutExpired();
    public abstract virtual void set_TimeoutExpired(Event`1<RequestTimeoutExpired`1<TRequest>> value);
    public abstract virtual State get_Pending();
    public abstract virtual void set_Pending(State value);
    public abstract virtual void SetRequestId(TSaga instance, Nullable`1<Guid> requestId);
    public abstract virtual Nullable`1<Guid> GetRequestId(TSaga instance);
    public abstract virtual Guid GenerateRequestId(TSaga instance);
    public abstract virtual void SetSendContextHeaders(SendContext`1<TRequest> context);
}
[NullableContextAttribute("1")]
public interface MassTransit.Request`4 {
    public RequestSettings`4<TSaga, TRequest, TResponse, TResponse2> Settings { get; }
    public Event`1<TResponse2> Completed2 { get; public set; }
    public abstract virtual RequestSettings`4<TSaga, TRequest, TResponse, TResponse2> get_Settings();
    public abstract virtual Event`1<TResponse2> get_Completed2();
    public abstract virtual void set_Completed2(Event`1<TResponse2> value);
}
[NullableContextAttribute("1")]
public interface MassTransit.Request`5 {
    public RequestSettings`5<TSaga, TRequest, TResponse, TResponse2, TResponse3> Settings { get; }
    public Event`1<TResponse3> Completed3 { get; public set; }
    public abstract virtual RequestSettings`5<TSaga, TRequest, TResponse, TResponse2, TResponse3> get_Settings();
    public abstract virtual Event`1<TResponse3> get_Completed3();
    public abstract virtual void set_Completed3(Event`1<TResponse3> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.RequestCanceledException : OperationCanceledException {
    public RequestCanceledException(string requestId, CancellationToken cancellationToken);
    public RequestCanceledException(string requestId, Exception innerException, CancellationToken cancellationToken);
    protected RequestCanceledException(SerializationInfo info, StreamingContext context);
    private static string FormatMessage(string requestId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.RequestException : MassTransitException {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Response>k__BackingField;
    [NullableAttribute("2")]
public object Response { get; }
    public RequestException(string message, Exception innerException, object response);
    public RequestException(string message);
    public RequestException(string message, Exception innerException);
    protected RequestException(SerializationInfo info, StreamingContext context);
    protected RequestException(string message, object response);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Response();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MassTransit.RequestFaultException : RequestException {
    [CompilerGeneratedAttribute]
private string <RequestType>k__BackingField;
    [CompilerGeneratedAttribute]
private Fault <Fault>k__BackingField;
    public string RequestType { get; private set; }
    public Fault Fault { get; private set; }
    [NullableContextAttribute("1")]
public RequestFaultException(string requestType, Fault fault);
    [NullableContextAttribute("1")]
protected RequestFaultException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_RequestType();
    [CompilerGeneratedAttribute]
private void set_RequestType(string value);
    [CompilerGeneratedAttribute]
public Fault get_Fault();
    [CompilerGeneratedAttribute]
private void set_Fault(Fault value);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public interface MassTransit.RequestHandle {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<Response`1<T>> GetResponse(bool readyToSend);
    public abstract virtual void Cancel();
}
public interface MassTransit.RequestHandle`1 {
    [NullableAttribute("1")]
public Task`1<TRequest> Message { get; }
    [NullableContextAttribute("1")]
public abstract virtual Task`1<TRequest> get_Message();
}
public class MassTransit.RequestPipeConfiguratorCallback`1 : MulticastDelegate {
    public RequestPipeConfiguratorCallback`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(IRequestPipeConfigurator`1<TRequest> configurator);
    public virtual IAsyncResult BeginInvoke(IRequestPipeConfigurator`1<TRequest> configurator, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
public interface MassTransit.RequestSettings`3 {
    public Uri ServiceAddress { get; }
    public TimeSpan Timeout { get; }
    public Nullable`1<TimeSpan> TimeToLive { get; }
    public Action`1<IEventCorrelationConfigurator`2<TSaga, TResponse>> Completed { get; }
    public Action`1<IEventCorrelationConfigurator`2<TSaga, Fault`1<TRequest>>> Faulted { get; }
    public Action`1<IEventCorrelationConfigurator`2<TSaga, RequestTimeoutExpired`1<TRequest>>> TimeoutExpired { get; }
    public abstract virtual Uri get_ServiceAddress();
    public abstract virtual TimeSpan get_Timeout();
    public abstract virtual Nullable`1<TimeSpan> get_TimeToLive();
    public abstract virtual Action`1<IEventCorrelationConfigurator`2<TSaga, TResponse>> get_Completed();
    public abstract virtual Action`1<IEventCorrelationConfigurator`2<TSaga, Fault`1<TRequest>>> get_Faulted();
    public abstract virtual Action`1<IEventCorrelationConfigurator`2<TSaga, RequestTimeoutExpired`1<TRequest>>> get_TimeoutExpired();
}
[NullableContextAttribute("1")]
public interface MassTransit.RequestSettings`4 {
    public Action`1<IEventCorrelationConfigurator`2<TSaga, TResponse2>> Completed2 { get; }
    public abstract virtual Action`1<IEventCorrelationConfigurator`2<TSaga, TResponse2>> get_Completed2();
}
[NullableContextAttribute("1")]
public interface MassTransit.RequestSettings`5 {
    public Action`1<IEventCorrelationConfigurator`2<TSaga, TResponse3>> Completed3 { get; }
    public abstract virtual Action`1<IEventCorrelationConfigurator`2<TSaga, TResponse3>> get_Completed3();
}
[IsReadOnlyAttribute]
public class MassTransit.RequestTimeout : ValueType {
    private Nullable`1<TimeSpan> _timeout;
    [CompilerGeneratedAttribute]
private static RequestTimeout <None>k__BackingField;
    [CompilerGeneratedAttribute]
private static RequestTimeout <Default>k__BackingField;
    public bool HasValue { get; }
    public TimeSpan Value { get; }
    public static RequestTimeout None { get; }
    public static RequestTimeout Default { get; }
    private RequestTimeout(TimeSpan timeout);
    private static RequestTimeout();
    public bool get_HasValue();
    public TimeSpan get_Value();
    [CompilerGeneratedAttribute]
public static RequestTimeout get_None();
    [CompilerGeneratedAttribute]
public static RequestTimeout get_Default();
    public sealed virtual bool Equals(RequestTimeout other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(RequestTimeout left, RequestTimeout right);
    public static bool op_Inequality(RequestTimeout left, RequestTimeout right);
    public static RequestTimeout op_Implicit(TimeSpan timeout);
    public static RequestTimeout op_Implicit(int milliseconds);
    public RequestTimeout Or(RequestTimeout other);
    public static RequestTimeout After(Nullable`1<int> d, Nullable`1<int> h, Nullable`1<int> m, Nullable`1<int> s, Nullable`1<int> ms);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.RequestTimeoutException : RequestException {
    public RequestTimeoutException(string requestId);
    public RequestTimeoutException(string requestId, Exception innerException);
    protected RequestTimeoutException(SerializationInfo info, StreamingContext context);
    private static string FormatMessage(string requestId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.RespondAsyncExecuteExtensions : object {
    [ExtensionAttribute]
public static Task RespondAsync(ConsumeContext context, T message, Action`1<SendContext`1<T>> callback);
    [ExtensionAttribute]
public static Task RespondAsync(ConsumeContext context, T message, Func`2<SendContext`1<T>, Task> callback);
    [ExtensionAttribute]
public static Task RespondAsync(ConsumeContext context, object message, Action`1<SendContext> callback);
    [ExtensionAttribute]
public static Task RespondAsync(ConsumeContext context, object message, Func`2<SendContext, Task> callback);
    [ExtensionAttribute]
public static Task RespondAsync(ConsumeContext context, object message, Type messageType, Action`1<SendContext> callback);
    [ExtensionAttribute]
public static Task RespondAsync(ConsumeContext context, object message, Type messageType, Func`2<SendContext, Task> callback);
    [ExtensionAttribute]
public static Task RespondAsync(ConsumeContext context, object values, Action`1<SendContext`1<T>> callback);
    [ExtensionAttribute]
public static Task RespondAsync(ConsumeContext context, object values, Func`2<SendContext`1<T>, Task> callback);
}
[NullableContextAttribute("1")]
public interface MassTransit.Response {
    public object Message { get; }
    public abstract virtual object get_Message();
}
[NullableContextAttribute("1")]
public interface MassTransit.Response`1 {
    public TResponse Message { get; }
    public abstract virtual TResponse get_Message();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class MassTransit.Response`2 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Response`1<T1> _response1;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Response`1<T2> _response2;
    private Response _response;
    private Task`1<Response`1<T1>> _response1Task;
    private Task`1<Response`1<T2>> _response2Task;
    public Nullable`1<Guid> MessageId { get; }
    public Nullable`1<Guid> RequestId { get; }
    public Nullable`1<Guid> CorrelationId { get; }
    public Nullable`1<Guid> ConversationId { get; }
    public Nullable`1<Guid> InitiatorId { get; }
    public Nullable`1<DateTime> ExpirationTime { get; }
    [NullableAttribute("2")]
public Uri SourceAddress { get; }
    [NullableAttribute("2")]
public Uri DestinationAddress { get; }
    [NullableAttribute("2")]
public Uri ResponseAddress { get; }
    [NullableAttribute("2")]
public Uri FaultAddress { get; }
    public Nullable`1<DateTime> SentTime { get; }
    public Headers Headers { get; }
    public HostInfo Host { get; }
    public object Message { get; }
    public Response`2(Task`1<Response`1<T1>> response1, Task`1<Response`1<T2>> response2);
    public bool Is(Response`1& result);
    public bool Is(Response`1& result);
    public bool Is(Response`1& result);
    public void Deconstruct(Task`1& r1, Task`1& r2);
    public static Response`2<T1, T2> op_Implicit(ValueTuple`2<Task`1<Response`1<T1>>, Task`1<Response`1<T2>>> source);
    public sealed virtual Nullable`1<Guid> get_MessageId();
    public sealed virtual Nullable`1<Guid> get_RequestId();
    public sealed virtual Nullable`1<Guid> get_CorrelationId();
    public sealed virtual Nullable`1<Guid> get_ConversationId();
    public sealed virtual Nullable`1<Guid> get_InitiatorId();
    public sealed virtual Nullable`1<DateTime> get_ExpirationTime();
    [NullableContextAttribute("2")]
public sealed virtual Uri get_SourceAddress();
    [NullableContextAttribute("2")]
public sealed virtual Uri get_DestinationAddress();
    [NullableContextAttribute("2")]
public sealed virtual Uri get_ResponseAddress();
    [NullableContextAttribute("2")]
public sealed virtual Uri get_FaultAddress();
    public sealed virtual Nullable`1<DateTime> get_SentTime();
    public sealed virtual Headers get_Headers();
    public sealed virtual HostInfo get_Host();
    public sealed virtual object get_Message();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class MassTransit.Response`3 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Response`1<T1> _response1;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Response`1<T2> _response2;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Response`1<T3> _response3;
    private Response _response;
    private Task`1<Response`1<T1>> _response1Task;
    private Task`1<Response`1<T2>> _response2Task;
    private Task`1<Response`1<T3>> _response3Task;
    public Nullable`1<Guid> MessageId { get; }
    public Nullable`1<Guid> RequestId { get; }
    public Nullable`1<Guid> CorrelationId { get; }
    public Nullable`1<Guid> ConversationId { get; }
    public Nullable`1<Guid> InitiatorId { get; }
    public Nullable`1<DateTime> ExpirationTime { get; }
    [NullableAttribute("2")]
public Uri SourceAddress { get; }
    [NullableAttribute("2")]
public Uri DestinationAddress { get; }
    [NullableAttribute("2")]
public Uri ResponseAddress { get; }
    [NullableAttribute("2")]
public Uri FaultAddress { get; }
    public Nullable`1<DateTime> SentTime { get; }
    public Headers Headers { get; }
    public HostInfo Host { get; }
    public object Message { get; }
    public Response`3(Task`1<Response`1<T1>> response1, Task`1<Response`1<T2>> response2, Task`1<Response`1<T3>> response3);
    public bool Is(Response`1& result);
    public bool Is(Response`1& result);
    public bool Is(Response`1& result);
    public bool Is(Response`1& result);
    public void Deconstruct(Task`1& r1, Task`1& r2, Task`1& r3);
    public static Response`3<T1, T2, T3> op_Implicit(ValueTuple`3<Task`1<Response`1<T1>>, Task`1<Response`1<T2>>, Task`1<Response`1<T3>>> source);
    public sealed virtual Nullable`1<Guid> get_MessageId();
    public sealed virtual Nullable`1<Guid> get_RequestId();
    public sealed virtual Nullable`1<Guid> get_CorrelationId();
    public sealed virtual Nullable`1<Guid> get_ConversationId();
    public sealed virtual Nullable`1<Guid> get_InitiatorId();
    public sealed virtual Nullable`1<DateTime> get_ExpirationTime();
    [NullableContextAttribute("2")]
public sealed virtual Uri get_SourceAddress();
    [NullableContextAttribute("2")]
public sealed virtual Uri get_DestinationAddress();
    [NullableContextAttribute("2")]
public sealed virtual Uri get_ResponseAddress();
    [NullableContextAttribute("2")]
public sealed virtual Uri get_FaultAddress();
    public sealed virtual Nullable`1<DateTime> get_SentTime();
    public sealed virtual Headers get_Headers();
    public sealed virtual HostInfo get_Host();
    public sealed virtual object get_Message();
}
public class MassTransit.ResponseEndpointDefinition : TemporaryEndpointDefinition {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.ResponseExtensions : object {
    [ExtensionAttribute]
public static void Deconstruct(Response response, Response& context, Object& message);
    [ExtensionAttribute]
public static bool IsResponseAccepted(ConsumeContext context, bool defaultIfHeaderNotFound);
}
[NullableContextAttribute("1")]
public interface MassTransit.RetryContext {
    public CancellationToken CancellationToken { get; }
    public Exception Exception { get; }
    public int RetryAttempt { get; }
    public int RetryCount { get; }
    public Nullable`1<TimeSpan> Delay { get; }
    public Type ContextType { get; }
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual Exception get_Exception();
    public abstract virtual int get_RetryAttempt();
    public abstract virtual int get_RetryCount();
    public abstract virtual Nullable`1<TimeSpan> get_Delay();
    public abstract virtual Type get_ContextType();
    public abstract virtual Task RetryFaulted(Exception exception);
    public abstract virtual Task PreRetry();
}
[NullableContextAttribute("1")]
public interface MassTransit.RetryContext`1 {
    public TContext Context { get; }
    public abstract virtual TContext get_Context();
    public abstract virtual bool CanRetry(Exception exception, RetryContext`1& retryContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.RetryContextExtensions : object {
    [ExtensionAttribute]
public static int GetRetryAttempt(ConsumeContext context);
    [ExtensionAttribute]
public static int GetRetryCount(ConsumeContext context);
    [ExtensionAttribute]
public static int GetRedeliveryCount(ConsumeContext context);
}
[NullableContextAttribute("1")]
public interface MassTransit.RetryPolicyContext`1 {
    public TContext Context { get; }
    public abstract virtual TContext get_Context();
    public abstract virtual bool CanRetry(Exception exception, RetryContext`1& retryContext);
    public abstract virtual Task RetryFaulted(Exception exception);
    public abstract virtual void Cancel();
}
[NullableContextAttribute("1")]
public interface MassTransit.RiderReady {
    public string Name { get; }
    public abstract virtual string get_Name();
}
[NullableContextAttribute("2")]
public interface MassTransit.RoutingKeyConsumeContext {
    public string RoutingKey { get; }
    public abstract virtual string get_RoutingKey();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.RoutingKeyExtensions : object {
    [ExtensionAttribute]
public static string RoutingKey(ConsumeContext context);
    [ExtensionAttribute]
public static string RoutingKey(SendContext context);
    [ExtensionAttribute]
public static void SetRoutingKey(SendContext context, string routingKey);
    [ExtensionAttribute]
public static bool TrySetRoutingKey(SendContext context, string routingKey);
}
[NullableContextAttribute("2")]
public interface MassTransit.RoutingKeySendContext {
    public string RoutingKey { get; public set; }
    public abstract virtual string get_RoutingKey();
    public abstract virtual void set_RoutingKey(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.RoutingSlipArgumentException : RoutingSlipException {
    public RoutingSlipArgumentException(string message);
    public RoutingSlipArgumentException(string message, Exception innerException);
    protected RoutingSlipArgumentException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.RoutingSlipException : CourierException {
    public RoutingSlipException(string message);
    public RoutingSlipException(string message, Exception innerException);
    protected RoutingSlipException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.RoutingSlipExtensions : object {
    [ExtensionAttribute]
public static bool RanToCompletion(RoutingSlip routingSlip);
    [ExtensionAttribute]
public static Uri GetNextExecuteAddress(RoutingSlip routingSlip);
    [ExtensionAttribute]
public static Uri GetNextCompensateAddress(RoutingSlip routingSlip);
    [ExtensionAttribute]
public static Task Execute(T source, RoutingSlip routingSlip);
    [ExtensionAttribute]
public static Task Execute(T source, RoutingSlip routingSlip, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.RoutingSlipRequestFaultedException : RoutingSlipException {
    [CompilerGeneratedAttribute]
private RoutingSlipFaulted <Faulted>k__BackingField;
    public RoutingSlipFaulted Faulted { get; }
    public RoutingSlipRequestFaultedException(RoutingSlipFaulted faulted);
    [CompilerGeneratedAttribute]
public RoutingSlipFaulted get_Faulted();
}
public interface MassTransit.SagaConsumeContext`1 {
    [NullableAttribute("1")]
public TSaga Saga { get; }
    public bool IsCompleted { get; }
    [NullableContextAttribute("1")]
public abstract virtual TSaga get_Saga();
    public abstract virtual bool get_IsCompleted();
    [NullableContextAttribute("1")]
public abstract virtual Task SetCompleted();
}
public interface MassTransit.SagaConsumeContext`2 {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.SagaDefinition`1 : object {
    private Nullable`1<int> _concurrentMessageLimit;
    [NullableAttribute("2")]
private string _endpointName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEndpointDefinition`1<TSaga> <EndpointDefinition>k__BackingField;
    unknown string EndpointName {protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEndpointDefinition`1<TSaga> EndpointDefinition { get; public set; }
    [NullableAttribute("2")]
private IEndpointDefinition MassTransit.ISagaDefinition.EndpointDefinition { get; }
    public Nullable`1<int> ConcurrentMessageLimit { get; protected set; }
    private Type MassTransit.ISagaDefinition.SagaType { get; }
    protected void set_EndpointName(string value);
    [CompilerGeneratedAttribute]
public IEndpointDefinition`1<TSaga> get_EndpointDefinition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EndpointDefinition(IEndpointDefinition`1<TSaga> value);
    [NullableContextAttribute("2")]
private sealed virtual override IEndpointDefinition MassTransit.ISagaDefinition.get_EndpointDefinition();
    public sealed virtual Nullable`1<int> get_ConcurrentMessageLimit();
    protected void set_ConcurrentMessageLimit(Nullable`1<int> value);
    private sealed virtual override void MassTransit.ISagaDefinition<TSaga>.Configure(IReceiveEndpointConfigurator endpointConfigurator, ISagaConfigurator`1<TSaga> sagaConfigurator, IRegistrationContext context);
    private sealed virtual override Type MassTransit.ISagaDefinition.get_SagaType();
    private sealed virtual override string MassTransit.ISagaDefinition.GetEndpointName(IEndpointNameFormatter formatter);
    [ObsoleteAttribute("Use the IRegistrationContext overload instead. Visit https://masstransit.io/obsolete for details.")]
protected virtual void ConfigureSaga(IReceiveEndpointConfigurator endpointConfigurator, ISagaConfigurator`1<TSaga> sagaConfigurator);
    protected virtual void ConfigureSaga(IReceiveEndpointConfigurator endpointConfigurator, ISagaConfigurator`1<TSaga> sagaConfigurator, IRegistrationContext context);
    protected void Endpoint(Action`1<IEndpointRegistrationConfigurator> configure);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.SagaException : MassTransitException {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <SagaType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <MessageType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <CorrelationId>k__BackingField;
    [NullableAttribute("2")]
public Type SagaType { get; }
    [NullableAttribute("2")]
public Type MessageType { get; }
    public Nullable`1<Guid> CorrelationId { get; }
    public SagaException(string message, Type sagaType, Guid correlationId);
    public SagaException(string message, Type sagaType, Guid correlationId, Exception innerException);
    public SagaException(string message, Type sagaType, Type messageType, Guid correlationId);
    public SagaException(string message, Type sagaType, Type messageType, Expression findExpression);
    public SagaException(string message, Type sagaType, Type messageType, Expression findExpression, Exception innerException);
    public SagaException(string message, Type sagaType, Type messageType, Guid correlationId, Exception innerException);
    public SagaException(string message, Type sagaType, Type messageType);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_SagaType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_MessageType();
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_CorrelationId();
    private static string FormatMessage(Type sagaType, Type messageType, string message);
    private static string FormatMessage(Type sagaType, Guid correlationId, string message);
    private static string FormatMessage(Type sagaType, Guid correlationId, Type messageType, string message);
}
public class MassTransit.SagaFactoryMethod`2 : MulticastDelegate {
    public SagaFactoryMethod`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual TSaga Invoke(ConsumeContext`1<TMessage> context);
    public virtual IAsyncResult BeginInvoke(ConsumeContext`1<TMessage> context, AsyncCallback callback, object object);
    public virtual TSaga EndInvoke(IAsyncResult result);
}
public class MassTransit.SagaFilterFactory`2 : MulticastDelegate {
    public SagaFilterFactory`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual IFilter`1<ConsumeContext`1<TData>> Invoke(ISagaRepository`1<TInstance> repository, ISagaPolicy`2<TInstance, TData> policy, IPipe`1<SagaConsumeContext`2<TInstance, TData>> sagaPipe);
    public virtual IAsyncResult BeginInvoke(ISagaRepository`1<TInstance> repository, ISagaPolicy`2<TInstance, TData> policy, IPipe`1<SagaConsumeContext`2<TInstance, TData>> sagaPipe, AsyncCallback callback, object object);
    public virtual IFilter`1<ConsumeContext`1<TData>> EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
public interface MassTransit.SagaStateMachine`1 {
    public IEnumerable`1<EventCorrelation> Correlations { get; }
    public abstract virtual IEnumerable`1<EventCorrelation> get_Correlations();
    public abstract virtual Task`1<bool> IsCompleted(BehaviorContext`1<TSaga> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.SagaStateMachineException : MassTransitException {
    public SagaStateMachineException(string message);
    public SagaStateMachineException(Type machineType, string message);
    public SagaStateMachineException(string message, Exception innerException);
    public SagaStateMachineException(Type machineType, string message, Exception innerException);
    protected SagaStateMachineException(SerializationInfo info, StreamingContext context);
}
public interface MassTransit.SagaStateMachineInstance {
}
[NullableContextAttribute("1")]
public interface MassTransit.Schedule`1 {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual TimeSpan GetDelay(BehaviorContext`1<TSaga> context);
    public abstract virtual Nullable`1<Guid> GetTokenId(TSaga instance);
    public abstract virtual void SetTokenId(TSaga instance, Nullable`1<Guid> tokenId);
}
[NullableContextAttribute("1")]
public interface MassTransit.Schedule`2 {
    public Event`1<TMessage> Received { get; public set; }
    public Event`1<TMessage> AnyReceived { get; public set; }
    public abstract virtual Event`1<TMessage> get_Received();
    public abstract virtual void set_Received(Event`1<TMessage> value);
    public abstract virtual Event`1<TMessage> get_AnyReceived();
    public abstract virtual void set_AnyReceived(Event`1<TMessage> value);
}
public class MassTransit.ScheduleDelayExceptionProvider`2 : MulticastDelegate {
    public ScheduleDelayExceptionProvider`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual TimeSpan Invoke(BehaviorExceptionContext`2<TSaga, TException> context);
    public virtual IAsyncResult BeginInvoke(BehaviorExceptionContext`2<TSaga, TException> context, AsyncCallback callback, object object);
    public virtual TimeSpan EndInvoke(IAsyncResult result);
}
public class MassTransit.ScheduleDelayExceptionProvider`3 : MulticastDelegate {
    public ScheduleDelayExceptionProvider`3(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual TimeSpan Invoke(BehaviorExceptionContext`3<TSaga, TMessage, TException> context);
    public virtual IAsyncResult BeginInvoke(BehaviorExceptionContext`3<TSaga, TMessage, TException> context, AsyncCallback callback, object object);
    public virtual TimeSpan EndInvoke(IAsyncResult result);
}
public class MassTransit.ScheduleDelayProvider`1 : MulticastDelegate {
    public ScheduleDelayProvider`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual TimeSpan Invoke(BehaviorContext`1<TSaga> context);
    public virtual IAsyncResult BeginInvoke(BehaviorContext`1<TSaga> context, AsyncCallback callback, object object);
    public virtual TimeSpan EndInvoke(IAsyncResult result);
}
public class MassTransit.ScheduleDelayProvider`2 : MulticastDelegate {
    public ScheduleDelayProvider`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual TimeSpan Invoke(BehaviorContext`2<TSaga, TMessage> context);
    public virtual IAsyncResult BeginInvoke(BehaviorContext`2<TSaga, TMessage> context, AsyncCallback callback, object object);
    public virtual TimeSpan EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
public interface MassTransit.ScheduledMessage {
    public Guid TokenId { get; }
    public DateTime ScheduledTime { get; }
    public Uri Destination { get; }
    public abstract virtual Guid get_TokenId();
    public abstract virtual DateTime get_ScheduledTime();
    public abstract virtual Uri get_Destination();
}
[NullableContextAttribute("1")]
public interface MassTransit.ScheduledMessage`1 {
    public T Payload { get; }
    public abstract virtual T get_Payload();
}
[NullableContextAttribute("1")]
public interface MassTransit.ScheduledRecurringMessage {
    public RecurringSchedule Schedule { get; }
    public Uri Destination { get; }
    public abstract virtual RecurringSchedule get_Schedule();
    public abstract virtual Uri get_Destination();
}
[NullableContextAttribute("1")]
public interface MassTransit.ScheduledRecurringMessage`1 {
    public T Payload { get; }
    public abstract virtual T get_Payload();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.SchedulePublishExtensions : object {
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(ConsumeContext context, DateTime scheduledTime, T message, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(ConsumeContext context, DateTime scheduledTime, T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(ConsumeContext context, DateTime scheduledTime, T message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> SchedulePublish(ConsumeContext context, DateTime scheduledTime, object message, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> SchedulePublish(ConsumeContext context, DateTime scheduledTime, object message, Type messageType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> SchedulePublish(ConsumeContext context, DateTime scheduledTime, object message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> SchedulePublish(ConsumeContext context, DateTime scheduledTime, object message, Type messageType, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(ConsumeContext context, DateTime scheduledTime, object values, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(ConsumeContext context, DateTime scheduledTime, object values, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(ConsumeContext context, DateTime scheduledTime, object values, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(ConsumeContext context, TimeSpan delay, T message, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(ConsumeContext context, TimeSpan delay, T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(ConsumeContext context, TimeSpan delay, T message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> SchedulePublish(ConsumeContext context, TimeSpan delay, object message, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> SchedulePublish(ConsumeContext context, TimeSpan delay, object message, Type messageType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> SchedulePublish(ConsumeContext context, TimeSpan delay, object message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> SchedulePublish(ConsumeContext context, TimeSpan delay, object message, Type messageType, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(ConsumeContext context, TimeSpan delay, object values, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(ConsumeContext context, TimeSpan delay, object values, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(ConsumeContext context, TimeSpan delay, object values, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface MassTransit.ScheduleSettings`2 {
    public ScheduleDelayProvider`1<TInstance> DelayProvider { get; }
    public Action`1<IEventCorrelationConfigurator`2<TInstance, TMessage>> Received { get; }
    public abstract virtual ScheduleDelayProvider`1<TInstance> get_DelayProvider();
    public abstract virtual Action`1<IEventCorrelationConfigurator`2<TInstance, TMessage>> get_Received();
}
public class MassTransit.ScheduleTimeExceptionProvider`2 : MulticastDelegate {
    public ScheduleTimeExceptionProvider`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual DateTime Invoke(BehaviorExceptionContext`2<TSaga, TException> context);
    public virtual IAsyncResult BeginInvoke(BehaviorExceptionContext`2<TSaga, TException> context, AsyncCallback callback, object object);
    public virtual DateTime EndInvoke(IAsyncResult result);
}
public class MassTransit.ScheduleTimeExceptionProvider`3 : MulticastDelegate {
    public ScheduleTimeExceptionProvider`3(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual DateTime Invoke(BehaviorExceptionContext`3<TSaga, TMessage, TException> context);
    public virtual IAsyncResult BeginInvoke(BehaviorExceptionContext`3<TSaga, TMessage, TException> context, AsyncCallback callback, object object);
    public virtual DateTime EndInvoke(IAsyncResult result);
}
public class MassTransit.ScheduleTimeProvider`1 : MulticastDelegate {
    public ScheduleTimeProvider`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual DateTime Invoke(BehaviorContext`1<TSaga> context);
    public virtual IAsyncResult BeginInvoke(BehaviorContext`1<TSaga> context, AsyncCallback callback, object object);
    public virtual DateTime EndInvoke(IAsyncResult result);
}
public class MassTransit.ScheduleTimeProvider`2 : MulticastDelegate {
    public ScheduleTimeProvider`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual DateTime Invoke(BehaviorContext`2<TSaga, TMessage> context);
    public virtual IAsyncResult BeginInvoke(BehaviorContext`2<TSaga, TMessage> context, AsyncCallback callback, object object);
    public virtual DateTime EndInvoke(IAsyncResult result);
}
public interface MassTransit.Scheduling.CancelScheduledMessage {
    public Guid CorrelationId { get; }
    public DateTime Timestamp { get; }
    public Guid TokenId { get; }
    public abstract virtual Guid get_CorrelationId();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual Guid get_TokenId();
}
[NullableContextAttribute("1")]
public interface MassTransit.Scheduling.CancelScheduledRecurringMessage {
    public Guid CorrelationId { get; }
    public DateTime Timestamp { get; }
    public string ScheduleId { get; }
    public string ScheduleGroup { get; }
    public abstract virtual Guid get_CorrelationId();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual string get_ScheduleId();
    public abstract virtual string get_ScheduleGroup();
}
public enum MassTransit.Scheduling.MissedEventPolicy : Enum {
    public int value__;
    public static MissedEventPolicy Default;
    public static MissedEventPolicy Skip;
    public static MissedEventPolicy Send;
}
[NullableContextAttribute("1")]
public interface MassTransit.Scheduling.PauseScheduledRecurringMessage {
    public Guid CorrelationId { get; }
    public DateTime Timestamp { get; }
    public string ScheduleId { get; }
    public string ScheduleGroup { get; }
    public abstract virtual Guid get_CorrelationId();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual string get_ScheduleId();
    public abstract virtual string get_ScheduleGroup();
}
[NullableContextAttribute("1")]
public interface MassTransit.Scheduling.RecurringSchedule {
    public string TimeZoneId { get; }
    public DateTimeOffset StartTime { get; }
    public Nullable`1<DateTimeOffset> EndTime { get; }
    public string ScheduleId { get; }
    public string ScheduleGroup { get; }
    public string CronExpression { get; }
    public string Description { get; }
    public MissedEventPolicy MisfirePolicy { get; }
    public abstract virtual string get_TimeZoneId();
    public abstract virtual DateTimeOffset get_StartTime();
    public abstract virtual Nullable`1<DateTimeOffset> get_EndTime();
    public abstract virtual string get_ScheduleId();
    public abstract virtual string get_ScheduleGroup();
    public abstract virtual string get_CronExpression();
    public abstract virtual string get_Description();
    public abstract virtual MissedEventPolicy get_MisfirePolicy();
}
[NullableContextAttribute("1")]
public interface MassTransit.Scheduling.ResumeScheduledRecurringMessage {
    public Guid CorrelationId { get; }
    public DateTime Timestamp { get; }
    public string ScheduleId { get; }
    public string ScheduleGroup { get; }
    public abstract virtual Guid get_CorrelationId();
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual string get_ScheduleId();
    public abstract virtual string get_ScheduleGroup();
}
[NullableContextAttribute("1")]
public interface MassTransit.Scheduling.ScheduleMessage {
    public Guid CorrelationId { get; }
    public DateTime ScheduledTime { get; }
    public String[] PayloadType { get; }
    public Uri Destination { get; }
    public object Payload { get; }
    public abstract virtual Guid get_CorrelationId();
    public abstract virtual DateTime get_ScheduledTime();
    public abstract virtual String[] get_PayloadType();
    public abstract virtual Uri get_Destination();
    public abstract virtual object get_Payload();
}
[NullableContextAttribute("1")]
public interface MassTransit.Scheduling.ScheduleRecurringMessage {
    public Guid CorrelationId { get; }
    public RecurringSchedule Schedule { get; }
    public String[] PayloadType { get; }
    public Uri Destination { get; }
    public object Payload { get; }
    public abstract virtual Guid get_CorrelationId();
    public abstract virtual RecurringSchedule get_Schedule();
    public abstract virtual String[] get_PayloadType();
    public abstract virtual Uri get_Destination();
    public abstract virtual object get_Payload();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.SchedulingExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<Guid> GetSchedulingTokenId(ConsumeContext context);
    [ExtensionAttribute]
public static Nullable`1<DateTimeOffset> GetQuartzScheduled(ConsumeContext context);
    [ExtensionAttribute]
public static Nullable`1<DateTimeOffset> GetQuartzSent(ConsumeContext context);
    [ExtensionAttribute]
public static Nullable`1<DateTimeOffset> GetQuartzNextScheduled(ConsumeContext context);
    [ExtensionAttribute]
public static Nullable`1<DateTimeOffset> GetQuartzPreviousSent(ConsumeContext context);
    [ExtensionAttribute]
public static string GetQuartzScheduleId(ConsumeContext context);
    [ExtensionAttribute]
public static string GetQuartzScheduleGroup(ConsumeContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.SendConsumeContextExecuteExtensions : object {
    [AsyncStateMachineAttribute("MassTransit.SendConsumeContextExecuteExtensions/<Send>d__0`1")]
[ExtensionAttribute]
public static Task Send(ConsumeContext context, Uri destinationAddress, T message, Action`1<SendContext`1<T>> callback);
    [AsyncStateMachineAttribute("MassTransit.SendConsumeContextExecuteExtensions/<Send>d__1`1")]
[ExtensionAttribute]
public static Task Send(ConsumeContext context, Uri destinationAddress, T message, Func`2<SendContext`1<T>, Task> callback);
    [AsyncStateMachineAttribute("MassTransit.SendConsumeContextExecuteExtensions/<Send>d__2")]
[ExtensionAttribute]
public static Task Send(ConsumeContext context, Uri destinationAddress, object message, Action`1<SendContext> callback);
    [AsyncStateMachineAttribute("MassTransit.SendConsumeContextExecuteExtensions/<Send>d__3")]
[ExtensionAttribute]
public static Task Send(ConsumeContext context, Uri destinationAddress, object message, Func`2<SendContext, Task> callback);
    [AsyncStateMachineAttribute("MassTransit.SendConsumeContextExecuteExtensions/<Send>d__4")]
[ExtensionAttribute]
public static Task Send(ConsumeContext context, Uri destinationAddress, object message, Type messageType, Action`1<SendContext> callback);
    [AsyncStateMachineAttribute("MassTransit.SendConsumeContextExecuteExtensions/<Send>d__5")]
[ExtensionAttribute]
public static Task Send(ConsumeContext context, Uri destinationAddress, object message, Type messageType, Func`2<SendContext, Task> callback);
    [AsyncStateMachineAttribute("MassTransit.SendConsumeContextExecuteExtensions/<Send>d__6`1")]
[ExtensionAttribute]
public static Task Send(ConsumeContext context, Uri destinationAddress, object values, Action`1<SendContext`1<T>> callback);
    [AsyncStateMachineAttribute("MassTransit.SendConsumeContextExecuteExtensions/<Send>d__7`1")]
[ExtensionAttribute]
public static Task Send(ConsumeContext context, Uri destinationAddress, object values, Func`2<SendContext`1<T>, Task> callback);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.SendConsumeContextExtensions : object {
    [AsyncStateMachineAttribute("MassTransit.SendConsumeContextExtensions/<Send>d__0`1")]
[ExtensionAttribute]
public static Task Send(ConsumeContext context, Uri destinationAddress, T message);
    [AsyncStateMachineAttribute("MassTransit.SendConsumeContextExtensions/<Send>d__1`1")]
[ExtensionAttribute]
public static Task Send(ConsumeContext context, Uri destinationAddress, T message, IPipe`1<SendContext`1<T>> pipe);
    [AsyncStateMachineAttribute("MassTransit.SendConsumeContextExtensions/<Send>d__2`1")]
[ExtensionAttribute]
public static Task Send(ConsumeContext context, Uri destinationAddress, T message, IPipe`1<SendContext> pipe);
    [AsyncStateMachineAttribute("MassTransit.SendConsumeContextExtensions/<Send>d__3")]
[ExtensionAttribute]
public static Task Send(ConsumeContext context, Uri destinationAddress, object message);
    [AsyncStateMachineAttribute("MassTransit.SendConsumeContextExtensions/<Send>d__4")]
[ExtensionAttribute]
public static Task Send(ConsumeContext context, Uri destinationAddress, object message, Type messageType);
    [AsyncStateMachineAttribute("MassTransit.SendConsumeContextExtensions/<Send>d__5")]
[ExtensionAttribute]
public static Task Send(ConsumeContext context, Uri destinationAddress, object message, Type messageType, IPipe`1<SendContext> pipe);
    [AsyncStateMachineAttribute("MassTransit.SendConsumeContextExtensions/<Send>d__6")]
[ExtensionAttribute]
public static Task Send(ConsumeContext context, Uri destinationAddress, object message, IPipe`1<SendContext> pipe);
    [AsyncStateMachineAttribute("MassTransit.SendConsumeContextExtensions/<Send>d__7`1")]
[ExtensionAttribute]
public static Task Send(ConsumeContext context, Uri destinationAddress, object values);
    [AsyncStateMachineAttribute("MassTransit.SendConsumeContextExtensions/<Send>d__8`1")]
[ExtensionAttribute]
public static Task Send(ConsumeContext context, Uri destinationAddress, object values, IPipe`1<SendContext`1<T>> pipe);
    [AsyncStateMachineAttribute("MassTransit.SendConsumeContextExtensions/<Send>d__9`1")]
[ExtensionAttribute]
public static Task Send(ConsumeContext context, Uri destinationAddress, object values, IPipe`1<SendContext> pipe);
}
[NullableContextAttribute("2")]
public interface MassTransit.SendContext {
    public Uri SourceAddress { get; public set; }
    public Uri DestinationAddress { get; public set; }
    public Uri ResponseAddress { get; public set; }
    public Uri FaultAddress { get; public set; }
    public Nullable`1<Guid> RequestId { get; public set; }
    public Nullable`1<Guid> MessageId { get; public set; }
    public Nullable`1<Guid> CorrelationId { get; public set; }
    public Nullable`1<Guid> ConversationId { get; public set; }
    public Nullable`1<Guid> InitiatorId { get; public set; }
    public Nullable`1<Guid> ScheduledMessageId { get; public set; }
    [NullableAttribute("1")]
public SendHeaders Headers { get; }
    public Nullable`1<TimeSpan> TimeToLive { get; public set; }
    public Nullable`1<DateTime> SentTime { get; }
    public ContentType ContentType { get; public set; }
    public bool Durable { get; public set; }
    public Nullable`1<TimeSpan> Delay { get; public set; }
    [NullableAttribute("1")]
public IMessageSerializer Serializer { get; public set; }
    [NullableAttribute("1")]
public ISerialization Serialization { get; public set; }
    [NullableAttribute("1")]
public String[] SupportedMessageTypes { get; public set; }
    public Nullable`1<long> BodyLength { get; }
    public abstract virtual Uri get_SourceAddress();
    public abstract virtual void set_SourceAddress(Uri value);
    public abstract virtual Uri get_DestinationAddress();
    public abstract virtual void set_DestinationAddress(Uri value);
    public abstract virtual Uri get_ResponseAddress();
    public abstract virtual void set_ResponseAddress(Uri value);
    public abstract virtual Uri get_FaultAddress();
    public abstract virtual void set_FaultAddress(Uri value);
    public abstract virtual Nullable`1<Guid> get_RequestId();
    public abstract virtual void set_RequestId(Nullable`1<Guid> value);
    public abstract virtual Nullable`1<Guid> get_MessageId();
    public abstract virtual void set_MessageId(Nullable`1<Guid> value);
    public abstract virtual Nullable`1<Guid> get_CorrelationId();
    public abstract virtual void set_CorrelationId(Nullable`1<Guid> value);
    public abstract virtual Nullable`1<Guid> get_ConversationId();
    public abstract virtual void set_ConversationId(Nullable`1<Guid> value);
    public abstract virtual Nullable`1<Guid> get_InitiatorId();
    public abstract virtual void set_InitiatorId(Nullable`1<Guid> value);
    public abstract virtual Nullable`1<Guid> get_ScheduledMessageId();
    public abstract virtual void set_ScheduledMessageId(Nullable`1<Guid> value);
    [NullableContextAttribute("1")]
public abstract virtual SendHeaders get_Headers();
    public abstract virtual Nullable`1<TimeSpan> get_TimeToLive();
    public abstract virtual void set_TimeToLive(Nullable`1<TimeSpan> value);
    public abstract virtual Nullable`1<DateTime> get_SentTime();
    public abstract virtual ContentType get_ContentType();
    public abstract virtual void set_ContentType(ContentType value);
    public abstract virtual bool get_Durable();
    public abstract virtual void set_Durable(bool value);
    public abstract virtual Nullable`1<TimeSpan> get_Delay();
    public abstract virtual void set_Delay(Nullable`1<TimeSpan> value);
    [NullableContextAttribute("1")]
public abstract virtual IMessageSerializer get_Serializer();
    [NullableContextAttribute("1")]
public abstract virtual void set_Serializer(IMessageSerializer value);
    [NullableContextAttribute("1")]
public abstract virtual ISerialization get_Serialization();
    [NullableContextAttribute("1")]
public abstract virtual void set_Serialization(ISerialization value);
    [NullableContextAttribute("1")]
public abstract virtual String[] get_SupportedMessageTypes();
    [NullableContextAttribute("1")]
public abstract virtual void set_SupportedMessageTypes(String[] value);
    public abstract virtual Nullable`1<long> get_BodyLength();
    [NullableContextAttribute("1")]
public abstract virtual SendContext`1<T> CreateProxy(T message);
}
[NullableContextAttribute("1")]
public interface MassTransit.SendContext`1 {
    public T Message { get; }
    public abstract virtual T get_Message();
}
public class MassTransit.SendContextCallback`2 : MulticastDelegate {
    public SendContextCallback`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(BehaviorContext`1<TSaga> context, SendContext`1<T> sendContext);
    public virtual IAsyncResult BeginInvoke(BehaviorContext`1<TSaga> context, SendContext`1<T> sendContext, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.SendContextCallback`3 : MulticastDelegate {
    [NullableContextAttribute("0")]
public SendContextCallback`3(object object, IntPtr method);
    public virtual void Invoke(BehaviorContext`2<TSaga, TMessage> context, SendContext`1<T> sendContext);
    [NullableContextAttribute("0")]
public virtual IAsyncResult BeginInvoke(BehaviorContext`2<TSaga, TMessage> context, SendContext`1<T> sendContext, AsyncCallback callback, object object);
    [NullableContextAttribute("0")]
public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.SendContextExtensions : object {
    [ExtensionAttribute]
public static void SetHostHeaders(SendHeaders headers);
    [ExtensionAttribute]
public static void SetHostHeaders(ITransportSetHeaderAdapter`1<T> adapter, IDictionary`2<string, T> dictionary);
    [ExtensionAttribute]
public static void SetExceptionHeaders(SendHeaders headers, ExceptionReceiveContext exceptionContext);
    [ExtensionAttribute]
public static void SetExceptionHeaders(ITransportSetHeaderAdapter`1<T> adapter, IDictionary`2<string, T> headers, ExceptionReceiveContext exceptionContext);
    [ExtensionAttribute]
public static void TransferConsumeContextHeaders(SendContext sendContext, ConsumeContext consumeContext);
    [ExtensionAttribute]
public static void ApplyRedeliveryOptions(SendContext sendContext, ConsumeContext consumeContext, RedeliveryOptions options);
    [ExtensionAttribute]
public static SendContext ReplaceMessageId(SendContext sendContext, ConsumeContext consumeContext);
    [ExtensionAttribute]
public static Nullable`1<Guid> GetOriginalMessageId(ConsumeContext context);
    [ExtensionAttribute]
public static SendContext StartNewConversation(SendContext context);
    [ExtensionAttribute]
public static SendContext StartNewConversation(SendContext context, Guid conversationId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.SendEndpointExtensions : object {
    [ExtensionAttribute]
public static Task Send(ISendEndpoint publishEndpoint, Type messageType, object values, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task Send(ISendEndpoint publishEndpoint, Type messageType, object values, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.SendException : AbstractUriException {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <MessageType>k__BackingField;
    [NullableAttribute("2")]
public Type MessageType { get; protected set; }
    public SendException(Type messageType, Uri uri);
    public SendException(Type messageType, Uri uri, string message);
    public SendException(Type messageType, Uri uri, string message, Exception innerException);
    protected SendException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_MessageType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_MessageType(Type value);
}
public class MassTransit.SendExceptionContextCallback`3 : MulticastDelegate {
    public SendExceptionContextCallback`3(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(BehaviorExceptionContext`2<TSaga, TException> context, SendContext`1<T> sendContext);
    public virtual IAsyncResult BeginInvoke(BehaviorExceptionContext`2<TSaga, TException> context, SendContext`1<T> sendContext, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.SendExceptionContextCallback`4 : MulticastDelegate {
    [NullableContextAttribute("0")]
public SendExceptionContextCallback`4(object object, IntPtr method);
    public virtual void Invoke(BehaviorExceptionContext`3<TSaga, TMessage, TException> context, SendContext`1<T> sendContext);
    [NullableContextAttribute("0")]
public virtual IAsyncResult BeginInvoke(BehaviorExceptionContext`3<TSaga, TMessage, TException> context, SendContext`1<T> sendContext, AsyncCallback callback, object object);
    [NullableContextAttribute("0")]
public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.SendExecuteExtensions : object {
    [ExtensionAttribute]
public static Task Send(ISendEndpoint endpoint, T message, Action`1<SendContext`1<T>> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task Send(ISendEndpoint endpoint, T message, Func`2<SendContext`1<T>, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task Send(ISendEndpoint endpoint, object message, Action`1<SendContext> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task Send(ISendEndpoint endpoint, object message, Func`2<SendContext, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task Send(ISendEndpoint endpoint, object message, Type messageType, Action`1<SendContext> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task Send(ISendEndpoint endpoint, object message, Type messageType, Func`2<SendContext, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task Send(ISendEndpoint endpoint, object values, Action`1<SendContext`1<T>> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task Send(ISendEndpoint endpoint, object values, Func`2<SendContext`1<T>, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IPipe`1<SendContext`1<T>> ToPipe(Action`1<SendContext`1<T>> callback);
    [ExtensionAttribute]
public static IPipe`1<SendContext`1<T>> ToPipe(Func`2<SendContext`1<T>, Task> callback);
    [ExtensionAttribute]
public static IPipe`1<SendContext> ToPipe(Action`1<SendContext> callback);
    [ExtensionAttribute]
public static IPipe`1<SendContext> ToPipe(Func`2<SendContext, Task> callback);
}
public interface MassTransit.SendHeaders {
    [NullableContextAttribute("1")]
public abstract virtual void Set(string key, string value);
    [NullableContextAttribute("1")]
public abstract virtual void Set(string key, object value, bool overwrite);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class MassTransit.SendTuple`1 : ValueType {
    public T Message;
    public IPipe`1<SendContext`1<T>> Pipe;
    public SendTuple`1(T message, IPipe`1<SendContext`1<T>> pipe);
    public SendTuple`1(T message);
    public void Deconstruct(T& message, IPipe`1& pipe);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.Serialization.CamelCaseDictionaryExtensions : object {
    [ExtensionAttribute]
public static bool TryGetValueCamelCase(IDictionary`2<string, object> dictionary, string key, Object& value);
    [ExtensionAttribute]
public static bool TryGetValueCamelCase(IReadOnlyDictionary`2<string, object> dictionary, string key, Object& value);
}
public class MassTransit.Serialization.EmptyHeaders : object {
    [NullableAttribute("1")]
public static EmptyHeaders Instance;
    private static EmptyHeaders();
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, object>> GetAll();
    [NullableContextAttribute("1")]
public sealed virtual bool TryGetHeader(string key, Object& value);
    [NullableContextAttribute("1")]
public sealed virtual T Get(string key, T defaultValue);
    public sealed virtual Nullable`1<T> Get(string key, Nullable`1<T> defaultValue);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("MassTransit.Serialization.EmptyHeaders/<GetEnumerator>d__6")]
public sealed virtual IEnumerator`1<HeaderValue> GetEnumerator();
    [NullableContextAttribute("1")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("2")]
public interface MassTransit.Serialization.MessageEnvelope {
    public string MessageId { get; }
    public string RequestId { get; }
    public string CorrelationId { get; }
    public string ConversationId { get; }
    public string InitiatorId { get; }
    public string SourceAddress { get; }
    public string DestinationAddress { get; }
    public string ResponseAddress { get; }
    public string FaultAddress { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] MessageType { get; }
    public object Message { get; }
    public Nullable`1<DateTime> ExpirationTime { get; }
    public Nullable`1<DateTime> SentTime { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, object> Headers { get; }
    public HostInfo Host { get; }
    public abstract virtual string get_MessageId();
    public abstract virtual string get_RequestId();
    public abstract virtual string get_CorrelationId();
    public abstract virtual string get_ConversationId();
    public abstract virtual string get_InitiatorId();
    public abstract virtual string get_SourceAddress();
    public abstract virtual string get_DestinationAddress();
    public abstract virtual string get_ResponseAddress();
    public abstract virtual string get_FaultAddress();
    public abstract virtual String[] get_MessageType();
    public abstract virtual object get_Message();
    public abstract virtual Nullable`1<DateTime> get_ExpirationTime();
    public abstract virtual Nullable`1<DateTime> get_SentTime();
    public abstract virtual Dictionary`2<string, object> get_Headers();
    public abstract virtual HostInfo get_Host();
}
[NullableContextAttribute("1")]
public interface MassTransit.SerializerContext {
    public String[] SupportedMessageTypes { get; }
    public abstract virtual String[] get_SupportedMessageTypes();
    public abstract virtual bool IsSupportedMessageType();
    public abstract virtual bool IsSupportedMessageType(Type messageType);
    public abstract virtual bool TryGetMessage(T& message);
    public abstract virtual bool TryGetMessage(Type messageType, Object& message);
    public abstract virtual IMessageSerializer GetMessageSerializer();
    public abstract virtual IMessageSerializer GetMessageSerializer(MessageEnvelope envelope, T message);
    public abstract virtual IMessageSerializer GetMessageSerializer(object message, String[] messageTypes);
    public abstract virtual Dictionary`2<string, object> ToDictionary(T message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.SerializerContextExtensions : object {
    [ExtensionAttribute]
public static T GetValue(IObjectDeserializer context, IReadOnlyDictionary`2<string, object> dictionary, string key, T defaultValue);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static Nullable`1<T> GetValue(IObjectDeserializer context, IReadOnlyDictionary`2<string, object> dictionary, string key, Nullable`1<T> defaultValue);
    [ExtensionAttribute]
public static T GetValue(IObjectDeserializer context, IDictionary`2<string, object> dictionary, string key, T defaultValue);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static Nullable`1<T> GetValue(IObjectDeserializer context, IDictionary`2<string, object> dictionary, string key, Nullable`1<T> defaultValue);
    [ExtensionAttribute]
public static T GetValue(IObjectDeserializer context, IHeaderProvider dictionary, string key, T defaultValue);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static Nullable`1<T> GetValue(IObjectDeserializer context, IHeaderProvider dictionary, string key, Nullable`1<T> defaultValue);
    [ExtensionAttribute]
public static bool TryGetValue(IObjectDeserializer context, IDictionary`2<string, object> dictionary, string key, T& value);
    [ExtensionAttribute]
public static string SerializeDictionary(IObjectDeserializer deserializer, IEnumerable`1<KeyValuePair`2<string, object>> values);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Dictionary`2<string, TValue> DeserializeDictionary(IObjectDeserializer deserializer, string text);
    [ExtensionAttribute]
public static bool TryGetValue(IObjectDeserializer context, IDictionary`2<string, object> dictionary, string key, Nullable`1& value);
    [ExtensionAttribute]
public static bool TryGetHeader(ConsumeContext context, string key, T& value);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool TryGetHeader(ConsumeContext context, string key, Nullable`1& value);
    [ExtensionAttribute]
public static bool TryGetHeader(SendContext context, string key, T& value);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool TryGetHeader(SendContext context, string key, Nullable`1& value);
    [ExtensionAttribute]
public static string GetHeader(ConsumeContext context, string key, string defaultValue);
    [ExtensionAttribute]
public static T GetHeader(ConsumeContext context, string key, T defaultValue);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static Nullable`1<T> GetHeader(ConsumeContext context, string key, Nullable`1<T> defaultValue);
    [ExtensionAttribute]
public static Dictionary`2<string, object> ToDictionary(ConsumeContext context, T value);
}
public class MassTransit.ServiceAddressExceptionProvider`2 : MulticastDelegate {
    public ServiceAddressExceptionProvider`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Uri Invoke(BehaviorExceptionContext`2<TSaga, TException> context);
    public virtual IAsyncResult BeginInvoke(BehaviorExceptionContext`2<TSaga, TException> context, AsyncCallback callback, object object);
    public virtual Uri EndInvoke(IAsyncResult result);
}
public class MassTransit.ServiceAddressExceptionProvider`3 : MulticastDelegate {
    public ServiceAddressExceptionProvider`3(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Uri Invoke(BehaviorExceptionContext`3<TSaga, TMessage, TException> context);
    public virtual IAsyncResult BeginInvoke(BehaviorExceptionContext`3<TSaga, TMessage, TException> context, AsyncCallback callback, object object);
    public virtual Uri EndInvoke(IAsyncResult result);
}
public class MassTransit.ServiceAddressProvider`1 : MulticastDelegate {
    public ServiceAddressProvider`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Uri Invoke(BehaviorContext`1<TSaga> context);
    public virtual IAsyncResult BeginInvoke(BehaviorContext`1<TSaga> context, AsyncCallback callback, object object);
    public virtual Uri EndInvoke(IAsyncResult result);
}
public class MassTransit.ServiceAddressProvider`2 : MulticastDelegate {
    public ServiceAddressProvider`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Uri Invoke(BehaviorContext`2<TSaga, TMessage> context);
    public virtual IAsyncResult BeginInvoke(BehaviorContext`2<TSaga, TMessage> context, AsyncCallback callback, object object);
    public virtual Uri EndInvoke(IAsyncResult result);
}
public class MassTransit.ShutDownException : MassTransitException {
    [NullableContextAttribute("1")]
public ShutDownException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
public interface MassTransit.State {
    public string Name { get; }
    public Event Enter { get; }
    public Event Leave { get; }
    public Event`1<State> BeforeEnter { get; }
    public Event`1<State> AfterLeave { get; }
    public abstract virtual string get_Name();
    public abstract virtual Event get_Enter();
    public abstract virtual Event get_Leave();
    public abstract virtual Event`1<State> get_BeforeEnter();
    public abstract virtual Event`1<State> get_AfterLeave();
}
[NullableContextAttribute("1")]
public interface MassTransit.State`1 {
    public IEnumerable`1<Event> Events { get; }
    public State`1<TSaga> SuperState { get; }
    public abstract virtual IEnumerable`1<Event> get_Events();
    public abstract virtual State`1<TSaga> get_SuperState();
    public abstract virtual Task Raise(BehaviorContext`1<TSaga> context);
    public abstract virtual Task Raise(BehaviorContext`2<TSaga, T> context);
    public abstract virtual void Bind(Event event, IStateMachineActivity`1<TSaga> activity);
    public abstract virtual void Ignore(Event event);
    public abstract virtual void Ignore(Event`1<T> event, StateMachineCondition`2<TSaga, T> filter);
    public abstract virtual void AddSubstate(State`1<TSaga> subState);
    public abstract virtual bool HasState(State`1<TSaga> state);
    public abstract virtual bool IsStateOf(State`1<TSaga> state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.StateAccessorExtensions : object {
    [ExtensionAttribute]
public static Task`1<State`1<TSaga>> GetState(IStateAccessor`1<TSaga> accessor, BehaviorContext`1<TSaga> context);
    [ExtensionAttribute]
public static Task`1<State`1<TSaga>> GetState(StateMachine`1<TSaga> accessor, BehaviorContext`1<TSaga> context);
}
[NullableContextAttribute("1")]
public interface MassTransit.StateMachine {
    public string Name { get; }
    public IEnumerable`1<Event> Events { get; }
    public IEnumerable`1<State> States { get; }
    public Type InstanceType { get; }
    public State Initial { get; }
    public State Final { get; }
    public abstract virtual string get_Name();
    public abstract virtual IEnumerable`1<Event> get_Events();
    public abstract virtual IEnumerable`1<State> get_States();
    public abstract virtual Type get_InstanceType();
    public abstract virtual State get_Initial();
    public abstract virtual State get_Final();
    public abstract virtual Event GetEvent(string name);
    public abstract virtual State GetState(string name);
    public abstract virtual IEnumerable`1<Event> NextEvents(State state);
    public abstract virtual bool IsCompositeEvent(Event event);
}
[NullableContextAttribute("1")]
public interface MassTransit.StateMachine`1 {
    public IStateAccessor`1<TSaga> Accessor { get; }
    public abstract virtual IStateAccessor`1<TSaga> get_Accessor();
    public abstract virtual State`1<TSaga> GetState(string name);
    public abstract virtual Task RaiseEvent(BehaviorContext`1<TSaga> context);
    public abstract virtual Task RaiseEvent(BehaviorContext`2<TSaga, T> context);
    public abstract virtual IDisposable ConnectEventObserver(IEventObserver`1<TSaga> observer);
    public abstract virtual IDisposable ConnectEventObserver(Event event, IEventObserver`1<TSaga> observer);
    public abstract virtual IDisposable ConnectStateObserver(IStateObserver`1<TSaga> observer);
}
public class MassTransit.StateMachineAsyncCondition`1 : MulticastDelegate {
    public StateMachineAsyncCondition`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task`1<bool> Invoke(BehaviorContext`1<TSaga> context);
    public virtual IAsyncResult BeginInvoke(BehaviorContext`1<TSaga> context, AsyncCallback callback, object object);
    public virtual Task`1<bool> EndInvoke(IAsyncResult result);
}
public class MassTransit.StateMachineAsyncCondition`2 : MulticastDelegate {
    public StateMachineAsyncCondition`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task`1<bool> Invoke(BehaviorContext`2<TSaga, TMessage> context);
    public virtual IAsyncResult BeginInvoke(BehaviorContext`2<TSaga, TMessage> context, AsyncCallback callback, object object);
    public virtual Task`1<bool> EndInvoke(IAsyncResult result);
}
public class MassTransit.StateMachineAsyncExceptionCondition`2 : MulticastDelegate {
    public StateMachineAsyncExceptionCondition`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task`1<bool> Invoke(BehaviorExceptionContext`2<TSaga, TException> context);
    public virtual IAsyncResult BeginInvoke(BehaviorExceptionContext`2<TSaga, TException> context, AsyncCallback callback, object object);
    public virtual Task`1<bool> EndInvoke(IAsyncResult result);
}
public class MassTransit.StateMachineAsyncExceptionCondition`3 : MulticastDelegate {
    public StateMachineAsyncExceptionCondition`3(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task`1<bool> Invoke(BehaviorExceptionContext`3<TSaga, TMessage, TException> context);
    public virtual IAsyncResult BeginInvoke(BehaviorExceptionContext`3<TSaga, TMessage, TException> context, AsyncCallback callback, object object);
    public virtual Task`1<bool> EndInvoke(IAsyncResult result);
}
public class MassTransit.StateMachineCondition`1 : MulticastDelegate {
    public StateMachineCondition`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual bool Invoke(BehaviorContext`1<TSaga> context);
    public virtual IAsyncResult BeginInvoke(BehaviorContext`1<TSaga> context, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class MassTransit.StateMachineCondition`2 : MulticastDelegate {
    public StateMachineCondition`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual bool Invoke(BehaviorContext`2<TSaga, TMessage> context);
    public virtual IAsyncResult BeginInvoke(BehaviorContext`2<TSaga, TMessage> context, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class MassTransit.StateMachineExceptionCondition`2 : MulticastDelegate {
    public StateMachineExceptionCondition`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual bool Invoke(BehaviorExceptionContext`2<TSaga, TException> context);
    public virtual IAsyncResult BeginInvoke(BehaviorExceptionContext`2<TSaga, TException> context, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class MassTransit.StateMachineExceptionCondition`3 : MulticastDelegate {
    public StateMachineExceptionCondition`3(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual bool Invoke(BehaviorExceptionContext`3<TSaga, TMessage, TException> context);
    public virtual IAsyncResult BeginInvoke(BehaviorExceptionContext`3<TSaga, TMessage, TException> context, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
public interface MassTransit.StateMachineVisitor {
    public abstract virtual void Visit(State state, Action`1<State> next);
    public abstract virtual void Visit(Event event, Action`1<Event> next);
    public abstract virtual void Visit(Event`1<TMessage> event, Action`1<Event`1<TMessage>> next);
    public abstract virtual void Visit(IStateMachineActivity activity);
    public abstract virtual void Visit(IBehavior`1<T> behavior);
    public abstract virtual void Visit(IBehavior`1<T> behavior, Action`1<IBehavior`1<T>> next);
    public abstract virtual void Visit(IBehavior`2<T, TMessage> behavior);
    public abstract virtual void Visit(IBehavior`2<T, TMessage> behavior, Action`1<IBehavior`2<T, TMessage>> next);
    public abstract virtual void Visit(IStateMachineActivity activity, Action`1<IStateMachineActivity> next);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.StaticEntityNameFormatter`1 : object {
    private string _entityName;
    public StaticEntityNameFormatter`1(string entityName);
    private sealed virtual override string MassTransit.IMessageEntityNameFormatter<TMessage>.FormatEntityName();
}
[NullableContextAttribute("1")]
public interface MassTransit.StopContext {
    public string Reason { get; }
    public abstract virtual string get_Reason();
}
public interface MassTransit.StopSupervisorContext {
    [NullableAttribute("1")]
public IAgent[] Agents { get; }
    [NullableContextAttribute("1")]
public abstract virtual IAgent[] get_Agents();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.StringMessageBody : object {
    private string _body;
    [NullableAttribute("2")]
private Byte[] _bytes;
    public Nullable`1<long> Length { get; }
    public StringMessageBody(string body);
    public sealed virtual Nullable`1<long> get_Length();
    public sealed virtual Stream GetStream();
    public sealed virtual Byte[] GetBytes();
    public sealed virtual string GetString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.TemporaryEndpointDefinition : object {
    private string _tag;
    [NullableAttribute("2")]
private string _name;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PrefetchCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ConcurrentMessageLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConfigureConsumeTopology>k__BackingField;
    public bool IsTemporary { get; }
    public Nullable`1<int> PrefetchCount { get; }
    public Nullable`1<int> ConcurrentMessageLimit { get; }
    public bool ConfigureConsumeTopology { get; }
    [NullableContextAttribute("2")]
public TemporaryEndpointDefinition(string tag, Nullable`1<int> concurrentMessageLimit, Nullable`1<int> prefetchCount, bool configureConsumeTopology);
    public sealed virtual string GetEndpointName(IEndpointNameFormatter formatter);
    public sealed virtual bool get_IsTemporary();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_PrefetchCount();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_ConcurrentMessageLimit();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ConfigureConsumeTopology();
    public sealed virtual void Configure(T configurator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.TimeSpanContextScheduleExtensions : object {
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(MessageSchedulerContext scheduler, TimeSpan delay, T message, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(MessageSchedulerContext scheduler, TimeSpan delay, T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(MessageSchedulerContext scheduler, TimeSpan delay, T message, Action`1<SendContext`1<T>> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(MessageSchedulerContext scheduler, TimeSpan delay, T message, Func`2<SendContext`1<T>, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(MessageSchedulerContext scheduler, TimeSpan delay, T message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(MessageSchedulerContext scheduler, TimeSpan delay, T message, Action`1<SendContext> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(MessageSchedulerContext scheduler, TimeSpan delay, T message, Func`2<SendContext, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(MessageSchedulerContext scheduler, TimeSpan delay, object message, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(MessageSchedulerContext scheduler, TimeSpan delay, object message, Type messageType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(MessageSchedulerContext scheduler, TimeSpan delay, object message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(MessageSchedulerContext scheduler, TimeSpan delay, object message, Func`2<SendContext, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(MessageSchedulerContext scheduler, TimeSpan delay, object message, Action`1<SendContext> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(MessageSchedulerContext scheduler, TimeSpan delay, object message, Type messageType, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(MessageSchedulerContext scheduler, TimeSpan delay, object message, Type messageType, Action`1<SendContext> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(MessageSchedulerContext scheduler, TimeSpan delay, object message, Type messageType, Func`2<SendContext, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(MessageSchedulerContext scheduler, TimeSpan delay, object values, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(MessageSchedulerContext scheduler, TimeSpan delay, object values, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(MessageSchedulerContext scheduler, TimeSpan delay, object values, Action`1<SendContext`1<T>> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(MessageSchedulerContext scheduler, TimeSpan delay, object values, Func`2<SendContext`1<T>, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(MessageSchedulerContext scheduler, TimeSpan delay, object values, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(MessageSchedulerContext scheduler, TimeSpan delay, object values, Action`1<SendContext> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(MessageSchedulerContext scheduler, TimeSpan delay, object values, Func`2<SendContext, Task> callback, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.TimeSpanScheduleExtensions : object {
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(IMessageScheduler scheduler, Uri destinationAddress, TimeSpan delay, T message, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(IMessageScheduler scheduler, Uri destinationAddress, TimeSpan delay, T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(IMessageScheduler scheduler, Uri destinationAddress, TimeSpan delay, T message, Action`1<SendContext`1<T>> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(IMessageScheduler scheduler, Uri destinationAddress, TimeSpan delay, T message, Func`2<SendContext`1<T>, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(IMessageScheduler scheduler, Uri destinationAddress, TimeSpan delay, T message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(IMessageScheduler scheduler, Uri destinationAddress, TimeSpan delay, T message, Action`1<SendContext> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(IMessageScheduler scheduler, Uri destinationAddress, TimeSpan delay, T message, Func`2<SendContext, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(IMessageScheduler scheduler, Uri destinationAddress, TimeSpan delay, object message, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(IMessageScheduler scheduler, Uri destinationAddress, TimeSpan delay, object message, Type messageType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(IMessageScheduler scheduler, Uri destinationAddress, TimeSpan delay, object message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(IMessageScheduler scheduler, Uri destinationAddress, TimeSpan delay, object message, Action`1<SendContext> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(IMessageScheduler scheduler, Uri destinationAddress, TimeSpan delay, object message, Func`2<SendContext, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(IMessageScheduler scheduler, Uri destinationAddress, TimeSpan delay, object message, Type messageType, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(IMessageScheduler scheduler, Uri destinationAddress, TimeSpan delay, object message, Type messageType, Action`1<SendContext> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> ScheduleSend(IMessageScheduler scheduler, Uri destinationAddress, TimeSpan delay, object message, Type messageType, Func`2<SendContext, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(IMessageScheduler scheduler, Uri destinationAddress, TimeSpan delay, object values, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(IMessageScheduler scheduler, Uri destinationAddress, TimeSpan delay, object values, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(IMessageScheduler scheduler, Uri destinationAddress, TimeSpan delay, object values, Action`1<SendContext`1<T>> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(IMessageScheduler scheduler, Uri destinationAddress, TimeSpan delay, object values, Func`2<SendContext`1<T>, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(IMessageScheduler scheduler, Uri destinationAddress, TimeSpan delay, object values, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(IMessageScheduler scheduler, Uri destinationAddress, TimeSpan delay, object values, Action`1<SendContext> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> ScheduleSend(IMessageScheduler scheduler, Uri destinationAddress, TimeSpan delay, object values, Func`2<SendContext, Task> callback, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.TimeSpanSchedulePublishExtensions : object {
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(IMessageScheduler scheduler, TimeSpan delay, T message, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(IMessageScheduler scheduler, TimeSpan delay, T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(IMessageScheduler scheduler, TimeSpan delay, T message, Action`1<SendContext`1<T>> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(IMessageScheduler scheduler, TimeSpan delay, T message, Func`2<SendContext`1<T>, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(IMessageScheduler scheduler, TimeSpan delay, T message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(IMessageScheduler scheduler, TimeSpan delay, T message, Action`1<SendContext> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(IMessageScheduler scheduler, TimeSpan delay, T message, Func`2<SendContext, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> SchedulePublish(IMessageScheduler scheduler, TimeSpan delay, object message, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> SchedulePublish(IMessageScheduler scheduler, TimeSpan delay, object message, Type messageType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> SchedulePublish(IMessageScheduler scheduler, TimeSpan delay, object message, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> SchedulePublish(IMessageScheduler scheduler, TimeSpan delay, object message, Action`1<SendContext> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> SchedulePublish(IMessageScheduler scheduler, TimeSpan delay, object message, Func`2<SendContext, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> SchedulePublish(IMessageScheduler scheduler, TimeSpan delay, object message, Type messageType, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> SchedulePublish(IMessageScheduler scheduler, TimeSpan delay, object message, Type messageType, Action`1<SendContext> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage> SchedulePublish(IMessageScheduler scheduler, TimeSpan delay, object message, Type messageType, Func`2<SendContext, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(IMessageScheduler scheduler, TimeSpan delay, object values, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(IMessageScheduler scheduler, TimeSpan delay, object values, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(IMessageScheduler scheduler, TimeSpan delay, object values, Action`1<SendContext`1<T>> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(IMessageScheduler scheduler, TimeSpan delay, object values, Func`2<SendContext`1<T>, Task> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(IMessageScheduler scheduler, TimeSpan delay, object values, IPipe`1<SendContext> pipe, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(IMessageScheduler scheduler, TimeSpan delay, object values, Action`1<SendContext> callback, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ScheduledMessage`1<T>> SchedulePublish(IMessageScheduler scheduler, TimeSpan delay, object values, Func`2<SendContext, Task> callback, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Topology.DefaultDeadLetterQueueNameFormatter : object {
    private static string DeadLetterQueueSuffix;
    public static IDeadLetterQueueNameFormatter Instance;
    private static DefaultDeadLetterQueueNameFormatter();
    public sealed virtual string FormatDeadLetterQueueName(string queueName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Topology.DefaultErrorQueueNameFormatter : object {
    private static string ErrorQueueSuffix;
    public static IErrorQueueNameFormatter Instance;
    private static DefaultErrorQueueNameFormatter();
    public sealed virtual string FormatErrorQueueName(string queueName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Topology.MessagePublishTopology`1 : object {
    private List`1<IMessagePublishTopologyConvention`1<TMessage>> _conventions;
    private List`1<IMessagePublishTopology`1<TMessage>> _delegateTopologies;
    private IPublishTopology _publishTopology;
    private List`1<IMessagePublishTopology`1<TMessage>> _topologies;
    private Nullable`1<bool> _exclude;
    public bool Exclude { get; public set; }
    public MessagePublishTopology`1(IPublishTopology publishTopology);
    public sealed virtual bool get_Exclude();
    public sealed virtual void set_Exclude(bool value);
    public sealed virtual void Add(IMessagePublishTopology`1<TMessage> publishTopology);
    public sealed virtual void AddDelegate(IMessagePublishTopology`1<TMessage> configuration);
    public sealed virtual void Apply(ITopologyPipeBuilder`1<PublishContext`1<TMessage>> builder);
    public virtual bool TryGetPublishAddress(Uri baseAddress, Uri& publishAddress);
    public sealed virtual bool TryAddConvention(IMessagePublishTopologyConvention`1<TMessage> convention);
    public sealed virtual bool TryAddConvention(IPublishTopologyConvention convention);
    public sealed virtual void AddOrUpdateConvention(Func`1<TConvention> add, Func`2<TConvention, TConvention> update);
    [IteratorStateMachineAttribute("MassTransit.Topology.MessagePublishTopology`1/<Validate>d__16")]
public virtual IEnumerable`1<ValidationResult> Validate();
    private bool IsMessageTypeExcluded();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Topology.MessageSendTopology`1 : object {
    private List`1<IMessageSendTopologyConvention`1<TMessage>> _conventions;
    private List`1<IMessageSendTopology`1<TMessage>> _delegateTopologies;
    private List`1<IMessageSendTopology`1<TMessage>> _topologies;
    public sealed virtual void Add(IMessageSendTopology`1<TMessage> sendTopology);
    public sealed virtual void AddDelegate(IMessageSendTopology`1<TMessage> configuration);
    public sealed virtual void Apply(ITopologyPipeBuilder`1<SendContext`1<TMessage>> builder);
    public sealed virtual bool TryGetConvention(TConvention& convention);
    public sealed virtual bool TryAddConvention(IMessageSendTopologyConvention`1<TMessage> convention);
    public sealed virtual bool TryAddConvention(ISendTopologyConvention convention);
    public sealed virtual void UpdateConvention(Func`2<TConvention, TConvention> update);
    public sealed virtual void AddOrUpdateConvention(Func`1<TConvention> add, Func`2<TConvention, TConvention> update);
    public virtual IEnumerable`1<ValidationResult> Validate();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Topology.MessageTopology : object {
    private ConcurrentDictionary`2<Type, IMessageTypeTopologyConfigurator> _messageTypes;
    private MessageTopologyConfigurationObservable _observers;
    [CompilerGeneratedAttribute]
private IEntityNameFormatter <EntityNameFormatter>k__BackingField;
    public IEntityNameFormatter EntityNameFormatter { get; private set; }
    public MessageTopology(IEntityNameFormatter entityNameFormatter);
    [CompilerGeneratedAttribute]
public sealed virtual IEntityNameFormatter get_EntityNameFormatter();
    [CompilerGeneratedAttribute]
private void set_EntityNameFormatter(IEntityNameFormatter value);
    public sealed virtual void SetEntityNameFormatter(IEntityNameFormatter entityNameFormatter);
    private sealed virtual override IMessageTopologyConfigurator`1<T> MassTransit.Configuration.IMessageTopologyConfigurator.GetMessageTopology();
    public sealed virtual ConnectHandle ConnectMessageTopologyConfigurationObserver(IMessageTopologyConfigurationObserver observer);
    private sealed virtual override IMessageTopology`1<T> MassTransit.IMessageTopology.GetMessageTopology();
    private IMessageTopologyConfigurator`1<T> GetMessageTopology();
    protected virtual IMessageTypeTopologyConfigurator CreateMessageTopology(Type type);
    private void OnMessageTopologyCreated(IMessageTopologyConfigurator`1<T> messageTopology);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Topology.MessageTopology`1 : object {
    [NullableAttribute("2")]
private string _entityName;
    [CompilerGeneratedAttribute]
private IMessageEntityNameFormatter`1<TMessage> <EntityNameFormatter>k__BackingField;
    public IMessageEntityNameFormatter`1<TMessage> EntityNameFormatter { get; private set; }
    public string EntityName { get; }
    public MessageTopology`1(IMessageEntityNameFormatter`1<TMessage> entityNameFormatter);
    [CompilerGeneratedAttribute]
public sealed virtual IMessageEntityNameFormatter`1<TMessage> get_EntityNameFormatter();
    [CompilerGeneratedAttribute]
private void set_EntityNameFormatter(IMessageEntityNameFormatter`1<TMessage> value);
    public sealed virtual string get_EntityName();
    public sealed virtual void SetEntityNameFormatter(IMessageEntityNameFormatter`1<TMessage> entityNameFormatter);
    public sealed virtual void SetEntityName(string entityName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Topology.PublishTopology : object {
    private List`1<IMessagePublishTopologyConvention> _conventions;
    private object _lock;
    private ConcurrentDictionary`2<Type, Lazy`1<IMessagePublishTopologyConfigurator>> _messageTypes;
    private ConcurrentDictionary`2<Type, IMessageTypeSelector> _messageTypeSelectorCache;
    private PublishTopologyConfigurationObservable _observers;
    private sealed virtual override void MassTransit.Configuration.IPublishTopologyConfigurationObserver.MessageTopologyCreated(IMessagePublishTopologyConfigurator`1<T> configurator);
    private sealed virtual override IMessagePublishTopology`1<T> MassTransit.IPublishTopology.GetMessageTopology();
    private sealed virtual override IMessagePublishTopologyConfigurator`1<T> MassTransit.IPublishTopologyConfigurator.GetMessageTopology();
    public sealed virtual bool TryGetPublishAddress(Type messageType, Uri baseAddress, Uri& publishAddress);
    public sealed virtual ConnectHandle ConnectPublishTopologyConfigurationObserver(IPublishTopologyConfigurationObserver observer);
    public sealed virtual bool TryAddConvention(IPublishTopologyConvention convention);
    private sealed virtual override void MassTransit.IPublishTopologyConfigurator.AddMessagePublishTopology(IMessagePublishTopology`1<T> topology);
    public virtual IEnumerable`1<ValidationResult> Validate();
    private sealed virtual override IMessagePublishTopology MassTransit.IPublishTopology.GetMessageTopology(Type messageType);
    public sealed virtual IMessagePublishTopologyConfigurator GetMessageTopology(Type messageType);
    protected virtual IMessagePublishTopologyConfigurator CreateMessageTopology();
    protected IMessagePublishTopologyConfigurator`1<T> GetMessageTopology();
    protected void OnMessageTopologyCreated(IMessagePublishTopologyConfigurator`1<T> messageTopology);
    protected void ForEachMessageType(Action`1<T> callback);
    private void ApplyConventionsToMessageTopology(IMessagePublishTopologyConfigurator`1<T> messageTopology);
    [CompilerGeneratedAttribute]
private Lazy`1<IMessagePublishTopologyConfigurator> <GetMessageTopology>b__17_0(Type _);
    [CompilerGeneratedAttribute]
private IMessagePublishTopologyConfigurator <GetMessageTopology>b__17_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Topology.SendTopology : object {
    private List`1<IMessageSendTopologyConvention> _conventions;
    private object _lock;
    private ConcurrentDictionary`2<Type, Lazy`1<IMessageSendTopologyConfigurator>> _messageTypes;
    private SendTopologyConfigurationObservable _observers;
    [CompilerGeneratedAttribute]
private IDeadLetterQueueNameFormatter <DeadLetterQueueNameFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private IErrorQueueNameFormatter <ErrorQueueNameFormatter>k__BackingField;
    public IDeadLetterQueueNameFormatter DeadLetterQueueNameFormatter { get; public set; }
    public IErrorQueueNameFormatter ErrorQueueNameFormatter { get; public set; }
    private sealed virtual override void MassTransit.Configuration.ISendTopologyConfigurationObserver.MessageTopologyCreated(IMessageSendTopologyConfigurator`1<T> messageTopology);
    [CompilerGeneratedAttribute]
public sealed virtual IDeadLetterQueueNameFormatter get_DeadLetterQueueNameFormatter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DeadLetterQueueNameFormatter(IDeadLetterQueueNameFormatter value);
    [CompilerGeneratedAttribute]
public sealed virtual IErrorQueueNameFormatter get_ErrorQueueNameFormatter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ErrorQueueNameFormatter(IErrorQueueNameFormatter value);
    public sealed virtual IMessageSendTopologyConfigurator`1<T> GetMessageTopology();
    public sealed virtual ConnectHandle ConnectSendTopologyConfigurationObserver(ISendTopologyConfigurationObserver observer);
    public sealed virtual bool TryAddConvention(ISendTopologyConvention convention);
    private sealed virtual override void MassTransit.ISendTopologyConfigurator.AddMessageSendTopology(IMessageSendTopology`1<T> topology);
    public virtual IEnumerable`1<ValidationResult> Validate();
    protected virtual IMessageSendTopologyConfigurator CreateMessageTopology(Type type);
    protected void OnMessageTopologyCreated(IMessageSendTopologyConfigurator`1<T> messageTopology);
    private void ApplyConventionsToMessageTopology(IMessageSendTopologyConfigurator`1<T> messageTopology);
    [CompilerGeneratedAttribute]
private Lazy`1<IMessageSendTopologyConfigurator> <GetMessageTopology>b__14_0(Type type);
}
public interface MassTransit.TransformContext {
}
public interface MassTransit.TransformContext`1 {
    public bool HasInput { get; }
    [NullableAttribute("1")]
public TMessage Input { get; }
    public abstract virtual bool get_HasInput();
    [NullableContextAttribute("1")]
public abstract virtual TMessage get_Input();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.TransportException : AbstractUriException {
    public TransportException(Uri uri);
    public TransportException(Uri uri, string message);
    public TransportException(Uri uri, string message, Exception innerException);
    protected TransportException(SerializationInfo info, StreamingContext context);
}
public class MassTransit.Transports.DictionaryHeaderProvider : object {
    [NullableAttribute("1")]
private IDictionary`2<string, object> _headers;
    public DictionaryHeaderProvider(IDictionary`2<string, object> headers);
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, object>> GetAll();
    [NullableContextAttribute("1")]
public sealed virtual bool TryGetHeader(string key, Object& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Transports.DictionaryTransportSetHeaderAdapter : object {
    private IHeaderValueConverter _converter;
    private TransportHeaderOptions _options;
    public DictionaryTransportSetHeaderAdapter(IHeaderValueConverter converter, TransportHeaderOptions options);
    public void Set(IDictionary`2<string, object> dictionary, HeaderValue& headerValue);
    public void Set(IDictionary`2<string, object> dictionary, HeaderValue`1& headerValue);
    private bool IsHeaderIncluded(string key);
    private sealed virtual override void MassTransit.Transports.ITransportSetHeaderAdapter<System.Object>.Set(IDictionary`2<string, object> dictionary, HeaderValue& modreq(System.Runtime.InteropServices.InAttribute) headerValue);
    private sealed virtual override void MassTransit.Transports.ITransportSetHeaderAdapter<System.Object>.Set(IDictionary`2<string, object> dictionary, HeaderValue`1& modreq(System.Runtime.InteropServices.InAttribute) headerValue);
}
[ExtensionAttribute]
public static class MassTransit.Transports.EndpointAddressExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string GetEndpointName(Uri address);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string GetDiagnosticEndpointName(Uri address);
}
[NullableContextAttribute("1")]
public interface MassTransit.Transports.HostRiderHandle {
    public IRider Rider { get; }
    public Task`1<RiderReady> Ready { get; }
    public abstract virtual IRider get_Rider();
    public abstract virtual Task`1<RiderReady> get_Ready();
    public abstract virtual Task StopAsync(CancellationToken cancellationToken);
    public abstract virtual Task StopAsync(bool remove, CancellationToken cancellationToken);
}
public interface MassTransit.Transports.IConsumePipe {
    [NullableAttribute("1")]
public Task Connected { get; }
    [NullableContextAttribute("1")]
public abstract virtual Task get_Connected();
}
[NullableContextAttribute("1")]
public interface MassTransit.Transports.IDeadLetterTransport {
    public abstract virtual Task Send(ReceiveContext context, string reason);
}
[NullableContextAttribute("1")]
public interface MassTransit.Transports.IErrorTransport {
    public abstract virtual Task Send(ExceptionReceiveContext context);
}
[NullableContextAttribute("1")]
public interface MassTransit.Transports.IHeaderProvider {
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, object>> GetAll();
    public abstract virtual bool TryGetHeader(string key, Object& value);
}
[NullableContextAttribute("2")]
public interface MassTransit.Transports.IHeaderValueConverter {
    public abstract virtual bool TryConvert(HeaderValue headerValue, HeaderValue& result);
    public abstract virtual bool TryConvert(HeaderValue`1<T> headerValue, HeaderValue& result);
}
[NullableContextAttribute("2")]
public interface MassTransit.Transports.IHeaderValueConverter`1 {
    public abstract virtual bool TryConvert(HeaderValue headerValue, HeaderValue`1& result);
    public abstract virtual bool TryConvert(HeaderValue`1<T> headerValue, HeaderValue`1& result);
}
[NullableContextAttribute("1")]
public interface MassTransit.Transports.IMessageNameFormatter {
    public abstract virtual string GetMessageName(Type type);
}
public interface MassTransit.Transports.IPublishPipe {
    [NullableContextAttribute("1")]
public abstract virtual Task Send(PublishContext`1<T> context);
}
[NullableContextAttribute("1")]
public interface MassTransit.Transports.IPublishTransportProvider {
    public abstract virtual Task`1<ISendTransport> GetPublishTransport(Uri publishAddress);
}
[NullableContextAttribute("1")]
public interface MassTransit.Transports.IReceiveEndpointDependency {
    public Task Ready { get; }
    public abstract virtual Task get_Ready();
}
[NullableContextAttribute("1")]
public interface MassTransit.Transports.IReceiveEndpointDependent {
    public Task Completed { get; }
    public abstract virtual Task get_Completed();
}
public interface MassTransit.Transports.IReceivePipe {
    [NullableAttribute("1")]
public Task Connected { get; }
    [NullableContextAttribute("1")]
public abstract virtual Task get_Connected();
}
public interface MassTransit.Transports.IRider {
}
[NullableContextAttribute("1")]
public interface MassTransit.Transports.IRiderControl {
    public abstract virtual RiderHandle Start(CancellationToken cancellationToken);
    public abstract virtual IEnumerable`1<EndpointHealthResult> CheckEndpointHealth();
}
[NullableContextAttribute("1")]
public interface MassTransit.Transports.ISendContextPipe {
    public abstract virtual Task Send(SendContext`1<T> context);
}
public interface MassTransit.Transports.ISendPipe {
}
[NullableContextAttribute("1")]
public interface MassTransit.Transports.ISendTransport {
    public abstract virtual Task`1<SendContext`1<T>> CreateSendContext(T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    public abstract virtual Task Send(T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface MassTransit.Transports.ISendTransportProvider {
    public abstract virtual Task`1<ISendTransport> GetSendTransport(Uri address);
    public abstract virtual Uri NormalizeAddress(Uri address);
}
[NullableContextAttribute("1")]
public interface MassTransit.Transports.ITransportSetHeaderAdapter`1 {
    public abstract virtual void Set(IDictionary`2<string, TValueType> dictionary, HeaderValue& modreq(System.Runtime.InteropServices.InAttribute) headerValue);
    public abstract virtual void Set(IDictionary`2<string, TValueType> dictionary, HeaderValue`1& modreq(System.Runtime.InteropServices.InAttribute) headerValue);
}
[NullableContextAttribute("1")]
public interface MassTransit.Transports.ITransportSupervisor`1 {
    public CancellationToken ConsumeStopping { get; }
    public CancellationToken SendStopping { get; }
    public abstract virtual CancellationToken get_ConsumeStopping();
    public abstract virtual CancellationToken get_SendStopping();
    public abstract virtual void AddConsumeAgent(TAgent agent);
    public abstract virtual void AddSendAgent(TAgent agent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Transports.PublishEndpoint : object {
    [CompilerGeneratedAttribute]
private IPublishEndpointProvider <PublishEndpointProvider>k__BackingField;
    protected IPublishEndpointProvider PublishEndpointProvider { get; protected set; }
    public PublishEndpoint(IPublishEndpointProvider provider);
    [CompilerGeneratedAttribute]
protected IPublishEndpointProvider get_PublishEndpointProvider();
    [CompilerGeneratedAttribute]
protected void set_PublishEndpointProvider(IPublishEndpointProvider value);
    public sealed virtual Task Publish(T message, CancellationToken cancellationToken);
    public sealed virtual Task Publish(T message, IPipe`1<PublishContext`1<T>> publishPipe, CancellationToken cancellationToken);
    public sealed virtual Task Publish(T message, IPipe`1<PublishContext> publishPipe, CancellationToken cancellationToken);
    public sealed virtual Task Publish(object message, CancellationToken cancellationToken);
    public sealed virtual Task Publish(object message, IPipe`1<PublishContext> publishPipe, CancellationToken cancellationToken);
    public sealed virtual Task Publish(object message, Type messageType, CancellationToken cancellationToken);
    public sealed virtual Task Publish(object message, Type messageType, IPipe`1<PublishContext> publishPipe, CancellationToken cancellationToken);
    public sealed virtual Task Publish(object values, CancellationToken cancellationToken);
    public sealed virtual Task Publish(object values, IPipe`1<PublishContext`1<T>> publishPipe, CancellationToken cancellationToken);
    public sealed virtual Task Publish(object values, IPipe`1<PublishContext> publishPipe, CancellationToken cancellationToken);
    public sealed virtual ConnectHandle ConnectPublishObserver(IPublishObserver observer);
    protected virtual Task`1<ISendEndpoint> GetPublishSendEndpoint();
    private Task PublishInternal(CancellationToken cancellationToken, T message, IPipe`1<PublishContext`1<T>> pipe);
    private Task PublishInternal(CancellationToken cancellationToken, object values, IPipe`1<PublishContext`1<T>> pipe);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Transports.PublishSendPipeAdapter`1 : object {
    private IPipe`1<PublishContext`1<T>> _pipe;
    public PublishSendPipeAdapter`1(IPipe`1<PublishContext`1<T>> pipe);
    private sealed virtual override void MassTransit.IProbeSite.Probe(ProbeContext context);
    public sealed virtual Task Send(SendContext`1<T> context);
}
[NullableContextAttribute("1")]
public interface MassTransit.Transports.RiderHandle {
    public Task Ready { get; }
    public abstract virtual Task get_Ready();
    public abstract virtual Task StopAsync(CancellationToken cancellationToken);
}
public class MassTransit.Transports.SimpleHeaderValueConverter : object {
    public sealed virtual bool TryConvert(HeaderValue headerValue, HeaderValue& result);
    [NullableContextAttribute("2")]
public sealed virtual bool TryConvert(HeaderValue`1<T> headerValue, HeaderValue& result);
}
public class MassTransit.Transports.StringHeaderValueConverter : object {
    public sealed virtual bool TryConvert(HeaderValue headerValue, HeaderValue& result);
    [NullableContextAttribute("2")]
public sealed virtual bool TryConvert(HeaderValue`1<T> headerValue, HeaderValue& result);
}
[FlagsAttribute]
public enum MassTransit.Transports.TransportHeaderOptions : Enum {
    public int value__;
    public static TransportHeaderOptions IncludeFaultMessage;
    public static TransportHeaderOptions IncludeFaultDetail;
    public static TransportHeaderOptions IncludeHost;
    public static TransportHeaderOptions Default;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Transports.TransportSetHeaderAdapter`1 : object {
    private IHeaderValueConverter`1<TValueType> _converter;
    private TransportHeaderOptions _options;
    public TransportSetHeaderAdapter`1(IHeaderValueConverter`1<TValueType> converter, TransportHeaderOptions options);
    public void Set(IDictionary`2<string, TValueType> dictionary, HeaderValue& headerValue);
    public void Set(IDictionary`2<string, TValueType> dictionary, HeaderValue`1& headerValue);
    private bool IsHeaderIncluded(string key);
    private sealed virtual override void MassTransit.Transports.ITransportSetHeaderAdapter<TValueType>.Set(IDictionary`2<string, TValueType> dictionary, HeaderValue& modreq(System.Runtime.InteropServices.InAttribute) headerValue);
    private sealed virtual override void MassTransit.Transports.ITransportSetHeaderAdapter<TValueType>.Set(IDictionary`2<string, TValueType> dictionary, HeaderValue`1& modreq(System.Runtime.InteropServices.InAttribute) headerValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.Transports.TransportSetHeaderAdapterExtensions : object {
    private static ITransportSetHeaderAdapter`1<object> _adapter;
    private static TransportSetHeaderAdapterExtensions();
    [ExtensionAttribute]
public static void Set(ITransportSetHeaderAdapter`1<TValueType> adapter, IDictionary`2<string, TValueType> dictionary, string key, string value);
    [ExtensionAttribute]
public static void Set(ITransportSetHeaderAdapter`1<TValueType> adapter, IDictionary`2<string, TValueType> dictionary, string key, Uri value);
    [ExtensionAttribute]
public static void Set(ITransportSetHeaderAdapter`1<TValueType> adapter, IDictionary`2<string, TValueType> dictionary, string key, Nullable`1<Guid> value);
    [ExtensionAttribute]
public static void Set(ITransportSetHeaderAdapter`1<TValueType> adapter, IDictionary`2<string, TValueType> dictionary, string key, Nullable`1<Guid> value, Func`2<Guid, string> formatter);
    [ExtensionAttribute]
public static void Set(ITransportSetHeaderAdapter`1<TValueType> adapter, IDictionary`2<string, TValueType> dictionary, string key, Nullable`1<int> value);
    [ExtensionAttribute]
public static void Set(ITransportSetHeaderAdapter`1<TValueType> adapter, IDictionary`2<string, TValueType> dictionary, string key, Nullable`1<int> value, Func`2<int, string> formatter);
    [ExtensionAttribute]
public static void Set(ITransportSetHeaderAdapter`1<TValueType> adapter, IDictionary`2<string, TValueType> dictionary, string key, Nullable`1<TimeSpan> value);
    [ExtensionAttribute]
public static void Set(ITransportSetHeaderAdapter`1<TValueType> adapter, IDictionary`2<string, TValueType> dictionary, string key, Nullable`1<TimeSpan> value, Func`2<TimeSpan, string> formatter);
    [ExtensionAttribute]
public static void Set(ITransportSetHeaderAdapter`1<TValueType> adapter, IDictionary`2<string, TValueType> dictionary, string key, Nullable`1<DateTime> value);
    [ExtensionAttribute]
public static void Set(ITransportSetHeaderAdapter`1<TValueType> adapter, IDictionary`2<string, TValueType> dictionary, string key, Nullable`1<DateTime> value, Func`2<DateTime, string> formatter);
    [ExtensionAttribute]
public static void Set(ITransportSetHeaderAdapter`1<TValueType> adapter, IDictionary`2<string, TValueType> dictionary, IEnumerable`1<HeaderValue> headerValues);
    [ExtensionAttribute]
public static void Set(IDictionary`2<string, object> dictionary, IEnumerable`1<HeaderValue> headerValues);
    [ExtensionAttribute]
public static bool TryGetInt(IDictionary`2<string, string> dictionary, string key, Int32& value);
    [ExtensionAttribute]
public static void Set(IDictionary`2<string, object> dictionary, HeaderValue[] headerValues);
    [ExtensionAttribute]
public static void SetExceptionHeaders(IDictionary`2<string, object> dictionary, ExceptionReceiveContext exceptionContext);
    [ExtensionAttribute]
public static void SetHostHeaders(IDictionary`2<string, object> dictionary);
    private static string ToString(TimeSpan timeSpan);
    private static string ToString(Guid guid);
    private static string ToString(int value);
    private static string ToString(DateTime dateTime);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.TransportUnavailableException : MassTransitException {
    public TransportUnavailableException(string message);
    public TransportUnavailableException(string message, Exception innerException);
    protected TransportUnavailableException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MassTransit.TypeCache : object {
    private static CachedType GetOrAdd(Type type);
    internal static void GetOrAdd(Type type, ITypeCache`1<T> typeCache);
    public static string GetShortName(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.TypeCache`1 : object {
    private Lazy`1<ReadOnlyPropertyCache`1<T>> _readPropertyCache;
    private string _shortName;
    private Lazy`1<ReadWritePropertyCache`1<T>> _writePropertyCache;
    public static IReadOnlyPropertyCache`1<T> ReadOnlyPropertyCache { get; }
    public static IReadWritePropertyCache`1<T> ReadWritePropertyCache { get; }
    public static string ShortName { get; }
    private IReadOnlyPropertyCache`1<T> MassTransit.Internals.ITypeCache<T>.ReadOnlyPropertyCache { get; }
    private IReadWritePropertyCache`1<T> MassTransit.Internals.ITypeCache<T>.ReadWritePropertyCache { get; }
    private string MassTransit.Internals.ITypeCache<T>.ShortName { get; }
    public static IReadOnlyPropertyCache`1<T> get_ReadOnlyPropertyCache();
    public static IReadWritePropertyCache`1<T> get_ReadWritePropertyCache();
    public static string get_ShortName();
    private sealed virtual override IReadOnlyPropertyCache`1<T> MassTransit.Internals.ITypeCache<T>.get_ReadOnlyPropertyCache();
    private sealed virtual override IReadWritePropertyCache`1<T> MassTransit.Internals.ITypeCache<T>.get_ReadWritePropertyCache();
    private sealed virtual override string MassTransit.Internals.ITypeCache<T>.get_ShortName();
    public void Method1();
    public void Method2();
}
public class MassTransit.UnhandledEventCallback`1 : MulticastDelegate {
    public UnhandledEventCallback`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task Invoke(UnhandledEventContext`1<TSaga> context);
    public virtual IAsyncResult BeginInvoke(UnhandledEventContext`1<TSaga> context, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public interface MassTransit.UnhandledEventContext`1 {
    [NullableAttribute("1")]
public State CurrentState { get; }
    [NullableContextAttribute("1")]
public abstract virtual State get_CurrentState();
    [NullableContextAttribute("1")]
public abstract virtual Task Ignore();
    [NullableContextAttribute("1")]
public abstract virtual Task Throw();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.UnhandledEventException : SagaStateMachineException {
    public UnhandledEventException(string machineType, string eventName, string stateName);
    protected UnhandledEventException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.UnknownEventException : SagaStateMachineException {
    public UnknownEventException(string machineType, string eventName);
    protected UnknownEventException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.UnknownStateException : SagaStateMachineException {
    public UnknownStateException(string machineType, string stateName);
    protected UnknownStateException(SerializationInfo info, StreamingContext context);
}
public class MassTransit.UpdatePayloadFactory`1 : MulticastDelegate {
    public UpdatePayloadFactory`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual TPayload Invoke(TPayload existing);
    public virtual IAsyncResult BeginInvoke(TPayload existing, AsyncCallback callback, object object);
    public virtual TPayload EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Util.ActiveRequest : ValueType {
    private RequestRateAlgorithm _algorithm;
    private CancellationTokenRegistration _registration;
    private CancellationTokenSource _source;
    private TimeSpan _timeout;
    private bool _completed;
    public CancellationToken CancellationToken;
    public int ResultLimit;
    public ActiveRequest(RequestRateAlgorithm algorithm, int resultLimit, CancellationToken cancellationToken, TimeSpan timeout);
    public Task Complete(int count, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [NullableContextAttribute("2")]
private void Callback(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Util.Connectable`1 : object {
    private Dictionary`2<long, T> _connections;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private T[] _connected;
    private long _nextId;
    public T[] Connected { get; }
    public int Count { get; }
    public T[] get_Connected();
    public int get_Count();
    public ConnectHandle Connect(T connection);
    public Task ForEachAsync(Func`2<T, Task> callback);
    public void ForEach(Action`1<T> callback);
    public bool All(Func`2<T, bool> callback);
    private void Disconnect(long id);
    public void Method1();
    public void Method2();
    public void Method3();
}
public class MassTransit.Util.EmptyConnectHandle : object {
    public sealed virtual void Dispose();
    public sealed virtual void Disconnect();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MassTransit.Util.ExceptionUtil : object {
    private static Regex _cleanup;
    private static ExceptionUtil();
    public static string GetMessage(Exception exception);
    public static string GetStackTrace(Exception exception);
    public static IDictionary`2<string, object> GetExceptionHeaderDictionary(Exception exception);
    public static ValueTuple`2<Dictionary`2<string, object>, string> GetExceptionHeaderDetail(Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Util.LambdaEqualityComparer`1 : object {
    private Func`3<T, T, bool> _comparer;
    private Func`2<T, int> _hash;
    public LambdaEqualityComparer`1(Func`3<T, T, bool> comparer);
    public LambdaEqualityComparer`1(Func`3<T, T, bool> comparer, Func`2<T, int> hash);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(T x, T y);
    public sealed virtual int GetHashCode(T obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.Util.LambdaEqualityComparerExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> Distinct(IEnumerable`1<T> source, Func`3<T, T, bool> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<T> Except(IEnumerable`1<T> first, IEnumerable`1<T> second, Func`3<T, T, bool> comparer);
}
public class MassTransit.Util.MultipleConnectHandle : object {
    [NullableAttribute("1")]
private ConnectHandle[] _handles;
    [NullableContextAttribute("1")]
public MultipleConnectHandle(IEnumerable`1<ConnectHandle> handles);
    [NullableContextAttribute("1")]
public MultipleConnectHandle(ConnectHandle[] handles);
    public sealed virtual void Disconnect();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Util.PendingTaskCollection : object {
    private Dictionary`2<long, Task> _tasks;
    private long _nextId;
    public PendingTaskCollection(int capacity);
    public void Add(IEnumerable`1<Task> tasks);
    public void Add(Task task);
    [AsyncStateMachineAttribute("MassTransit.Util.PendingTaskCollection/<Completed>d__5")]
public Task Completed(CancellationToken cancellationToken);
    private void Remove(long id);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Util.RequestRateAlgorithm : object {
    private int _concurrentResultLimit;
    private CancellationTokenSource _disposeToken;
    private RequestRateAlgorithmOptions _options;
    [NullableAttribute("2")]
private SemaphoreSlim _rateLimitSemaphore;
    [NullableAttribute("2")]
private Timer _rateLimitTimer;
    private int _refreshThreshold;
    private TimeSpan _requestCancellationTimeout;
    private int _requestLimit;
    private object _requestLock;
    private SemaphoreSlim _requestSemaphore;
    private int _resultLimit;
    private SemaphoreSlim _resultSemaphore;
    private Dictionary`2<long, Task> _tasks;
    private int _activeRequestCount;
    private int _count;
    private bool _disposed;
    private int _maxRequestCount;
    private long _nextId;
    private int _pendingResultCount;
    private int _rateLimit;
    private int _requestCount;
    public int RequestCount { get; }
    public int ResultLimit { get; }
    public int ActiveRequestCount { get; }
    public int MaxActiveRequestCount { get; }
    private int ActiveResultCount { get; }
    public RequestRateAlgorithm(RequestRateAlgorithmOptions options);
    public int get_RequestCount();
    public int get_ResultLimit();
    public int get_ActiveRequestCount();
    public int get_MaxActiveRequestCount();
    private int get_ActiveResultCount();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("MassTransit.Util.RequestRateAlgorithm/<Run>d__38")]
public Task`1<int> Run(RequestCallback requestCallback, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.Util.RequestRateAlgorithm/<RunRequest>d__39")]
private Task`1<int> RunRequest(RequestCallback requestCallback, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.Util.RequestRateAlgorithm/<Run>d__40`1")]
public Task`1<int> Run(RequestCallback`1<T> requestCallback, ResultCallback`1<T> resultCallback, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.Util.RequestRateAlgorithm/<RunRequest>d__41`1")]
private Task`1<int> RunRequest(RequestCallback`1<T> requestCallback, ResultCallback`1<T> resultCallback, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.Util.RequestRateAlgorithm/<Run>d__42`2")]
public Task`1<int> Run(RequestCallback`1<T> requestCallback, ResultCallback`1<T> resultCallback, GroupCallback`2<T, TKey> groupCallback, OrderCallback`1<T> orderCallback, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.Util.RequestRateAlgorithm/<RunRequest>d__43`1")]
private Task`1<IReadOnlyList`1<T>> RunRequest(RequestCallback`1<T> requestCallback, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.Util.RequestRateAlgorithm/<RunResultSet>d__44`2")]
private Task`1<int> RunResultSet(IGrouping`2<TKey, T> results, ResultCallback`1<T> resultCallback, OrderCallback`1<T> orderCallback, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.Util.RequestRateAlgorithm/<BeginRequest>d__45")]
public Task`1<ActiveRequest> BeginRequest(CancellationToken cancellationToken);
    internal Task EndRequest(int count, int resultLimit, CancellationToken cancellationToken);
    internal void CancelRequest(int resultLimit);
    [AsyncStateMachineAttribute("MassTransit.Util.RequestRateAlgorithm/<ChangeRateLimit>d__48")]
public Task ChangeRateLimit(int newRateLimit, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.Util.RequestRateAlgorithm/<ChangeRequestCount>d__49")]
private Task ChangeRequestCount(int newRequestCount, int currentRequestCount, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
private void Reset(object state);
    private void Add(Task task);
    private void Remove(long id);
}
public class MassTransit.Util.RequestRateAlgorithmOptions : object {
    [CompilerGeneratedAttribute]
private int <PrefetchCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ConcurrentResultLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RequestResultLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RequestRateLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <RequestRateInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <RequestCancellationTimeout>k__BackingField;
    public int PrefetchCount { get; public set; }
    public Nullable`1<int> ConcurrentResultLimit { get; public set; }
    public int RequestResultLimit { get; public set; }
    public Nullable`1<int> RequestRateLimit { get; public set; }
    public Nullable`1<TimeSpan> RequestRateInterval { get; public set; }
    public Nullable`1<TimeSpan> RequestCancellationTimeout { get; public set; }
    [CompilerGeneratedAttribute]
public int get_PrefetchCount();
    [CompilerGeneratedAttribute]
public void set_PrefetchCount(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ConcurrentResultLimit();
    [CompilerGeneratedAttribute]
public void set_ConcurrentResultLimit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public int get_RequestResultLimit();
    [CompilerGeneratedAttribute]
public void set_RequestResultLimit(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RequestRateLimit();
    [CompilerGeneratedAttribute]
public void set_RequestRateLimit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_RequestRateInterval();
    [CompilerGeneratedAttribute]
public void set_RequestRateInterval(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_RequestCancellationTimeout();
    [CompilerGeneratedAttribute]
public void set_RequestCancellationTimeout(Nullable`1<TimeSpan> value);
}
[NullableContextAttribute("1")]
public interface MassTransit.ValidationResult {
    public ValidationResultDisposition Disposition { get; }
    public string Message { get; }
    public string Key { get; }
    [NullableAttribute("2")]
public string Value { get; }
    public abstract virtual ValidationResultDisposition get_Disposition();
    public abstract virtual string get_Message();
    public abstract virtual string get_Key();
    [NullableContextAttribute("2")]
public abstract virtual string get_Value();
}
public enum MassTransit.ValidationResultDisposition : Enum {
    public int value__;
    public static ValidationResultDisposition Success;
    public static ValidationResultDisposition Warning;
    public static ValidationResultDisposition Failure;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.ValidationResultExtensions : object {
    [ExtensionAttribute]
public static ValidationResult Failure(ISpecification configurator, string message);
    [ExtensionAttribute]
public static ValidationResult Failure(ISpecification configurator, string key, string message);
    [ExtensionAttribute]
public static ValidationResult Failure(ISpecification configurator, string key, string value, string message);
    [ExtensionAttribute]
public static ValidationResult Warning(ISpecification configurator, string message);
    [ExtensionAttribute]
public static ValidationResult Warning(ISpecification configurator, string key, string message);
    [ExtensionAttribute]
public static ValidationResult Warning(ISpecification configurator, string key, string value, string message);
    [ExtensionAttribute]
public static ValidationResult Success(ISpecification configurator, string message);
    [ExtensionAttribute]
public static ValidationResult Success(ISpecification configurator, string key, string message);
    [ExtensionAttribute]
public static ValidationResult Success(ISpecification configurator, string key, string value, string message);
    [ExtensionAttribute]
public static ValidationResult WithParentKey(ValidationResult result, string parentKey);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.ValueFactoryException : Exception {
    public ValueFactoryException(string message);
    protected ValueFactoryException(SerializationInfo info, StreamingContext context);
    public ValueFactoryException(string message, Exception innerException);
}
[ObsoleteAttribute]
public interface MassTransit.Visitable {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
