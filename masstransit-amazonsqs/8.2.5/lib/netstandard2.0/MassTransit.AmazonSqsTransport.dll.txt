public static class MassTransit.AmazonSqsBusFactory : object {
    public static IBusControl Create(Action`1<IAmazonSqsBusFactoryConfigurator> configure);
    public static IMessageTopologyConfigurator CreateMessageTopology();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.AmazonSqsBusFactoryConfiguratorExtensions : object {
    [ExtensionAttribute]
public static IBusControl CreateUsingAmazonSqs(IBusFactorySelector selector, Action`1<IAmazonSqsBusFactoryConfigurator> configure);
    [ExtensionAttribute]
public static void UsingAmazonSqs(IBusRegistrationConfigurator configurator, Action`2<IBusRegistrationContext, IAmazonSqsBusFactoryConfigurator> configure);
    [ExtensionAttribute]
public static void LocalstackHost(IAmazonSqsBusFactoryConfigurator configurator);
    [ExtensionAttribute]
public static void UseDefaultHost(IAmazonSqsBusFactoryConfigurator configurator, Action`1<IAmazonSqsHostConfigurator> configure);
    [ExtensionAttribute]
public static void UseDefaultHost(IAmazonSqsBusFactoryConfigurator configurator, RegionEndpoint endpoint, Action`1<IAmazonSqsHostConfigurator> configure);
}
public class MassTransit.AmazonSqsConnectException : AmazonSqsConnectionException {
    public AmazonSqsConnectException(string message);
    public AmazonSqsConnectException(string message, Exception innerException);
    protected AmazonSqsConnectException(SerializationInfo info, StreamingContext context);
}
public class MassTransit.AmazonSqsConnectionException : ConnectionException {
    public AmazonSqsConnectionException(string message);
    public AmazonSqsConnectionException(string message, Exception innerException);
    protected AmazonSqsConnectionException(SerializationInfo info, StreamingContext context);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay}")]
public class MassTransit.AmazonSqsEndpointAddress : ValueType {
    private static string AutoDeleteKey;
    private static string DurableKey;
    private static string TemporaryKey;
    private static string TypeKey;
    private static ITypeConverter`2<AddressType, string> _parseConverter;
    public string Scheme;
    public string Host;
    public string Scope;
    public string Name;
    public bool AutoDelete;
    public bool Durable;
    public AddressType Type;
    public Uri TopicAddress { get; }
    private Uri DebuggerDisplay { get; }
    public AmazonSqsEndpointAddress(Uri hostAddress, Uri address, AddressType type);
    public AmazonSqsEndpointAddress(Uri hostAddress, string name, bool durable, bool autoDelete, AddressType type);
    private static AmazonSqsEndpointAddress();
    private static void ParseLeft(Uri address, String& scheme, String& host, String& scope);
    public static Uri op_Implicit(AmazonSqsEndpointAddress& address);
    public static bool IsFifo(string name);
    public Uri get_TopicAddress();
    private Uri get_DebuggerDisplay();
    [IteratorStateMachineAttribute("MassTransit.AmazonSqsEndpointAddress/<GetQueryStringOptions>d__22")]
private IEnumerable`1<string> GetQueryStringOptions();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay}")]
public class MassTransit.AmazonSqsHostAddress : ValueType {
    public static string AmazonSqsScheme;
    public string Scheme;
    public string Host;
    public string Scope;
    private Uri DebuggerDisplay { get; }
    public AmazonSqsHostAddress(Uri address);
    public AmazonSqsHostAddress(string host, string scope);
    private static void ParseLeft(Uri address, String& scheme, String& host, String& scope);
    public static Uri op_Implicit(AmazonSqsHostAddress& address);
    private Uri get_DebuggerDisplay();
}
[ExtensionAttribute]
public static class MassTransit.AmazonSqsHostConfigurationExtensions : object {
    [ExtensionAttribute]
public static void Host(IAmazonSqsBusFactoryConfigurator configurator, Uri hostAddress, Action`1<IAmazonSqsHostConfigurator> configure);
    [ExtensionAttribute]
public static void Host(IAmazonSqsBusFactoryConfigurator configurator, string hostName, Action`1<IAmazonSqsHostConfigurator> configure);
    [ExtensionAttribute]
public static void ReceiveEndpoint(IAmazonSqsBusFactoryConfigurator configurator, Action`1<IAmazonSqsReceiveEndpointConfigurator> configure);
    [ExtensionAttribute]
public static void ReceiveEndpoint(IAmazonSqsBusFactoryConfigurator configurator, IEndpointDefinition definition, Action`1<IAmazonSqsReceiveEndpointConfigurator> configure);
}
public interface MassTransit.AmazonSqsHostSettings {
    public RegionEndpoint Region { get; }
    public string AccessKey { get; }
    public string SecretKey { get; }
    public AllowTransportHeader AllowTransportHeader { get; }
    public bool ScopeTopics { get; }
    public Uri HostAddress { get; }
    public abstract virtual RegionEndpoint get_Region();
    public abstract virtual string get_AccessKey();
    public abstract virtual string get_SecretKey();
    public abstract virtual AllowTransportHeader get_AllowTransportHeader();
    public abstract virtual bool get_ScopeTopics();
    public abstract virtual Uri get_HostAddress();
    public abstract virtual IConnection CreateConnection();
}
public interface MassTransit.AmazonSqsMessageContext {
    public Message TransportMessage { get; }
    public Dictionary`2<string, MessageAttributeValue> Attributes { get; }
    public abstract virtual Message get_TransportMessage();
    public abstract virtual Dictionary`2<string, MessageAttributeValue> get_Attributes();
}
[ExtensionAttribute]
public static class MassTransit.AmazonSqsMessageSchedulerExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use the transport independent UseDelayedMessageScheduler")]
public static void UseAmazonSqsMessageScheduler(IBusFactoryConfigurator configurator);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the transport independent AddDelayedMessageScheduler")]
public static void AddAmazonSqsMessageScheduler(IBusRegistrationConfigurator configurator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.AmazonSqsPublishTopologyConfigurationExtensions : object {
    [ExtensionAttribute]
public static void AddPublishMessageTypesFromNamespaceContaining(IAmazonSqsBusFactoryConfigurator configurator, Action`2<IAmazonSqsMessagePublishTopologyConfigurator, Type> configure, Func`2<Type, bool> filter);
    [ExtensionAttribute]
public static void AddPublishMessageTypesFromNamespaceContaining(IAmazonSqsBusFactoryConfigurator configurator, Type type, Action`2<IAmazonSqsMessagePublishTopologyConfigurator, Type> configure, Func`2<Type, bool> filter);
    [ExtensionAttribute]
public static void AddPublishMessageTypes(IAmazonSqsBusFactoryConfigurator configurator, IEnumerable`1<Type> messageTypes, Action`2<IAmazonSqsMessagePublishTopologyConfigurator, Type> configure);
}
public interface MassTransit.AmazonSqsSendContext {
    unknown string GroupId {public set; }
    unknown string DeduplicationId {public set; }
    unknown Nullable`1<int> DelaySeconds {public set; }
    public abstract virtual void set_GroupId(string value);
    public abstract virtual void set_DeduplicationId(string value);
    public abstract virtual void set_DelaySeconds(Nullable`1<int> value);
}
public interface MassTransit.AmazonSqsSendContext`1 {
}
[ExtensionAttribute]
public static class MassTransit.AmazonSqsSendContextExtensions : object {
    [ExtensionAttribute]
public static void SetGroupId(SendContext context, string groupId);
    [ExtensionAttribute]
public static bool TrySetGroupId(SendContext context, string groupId);
    [ExtensionAttribute]
public static void SetDeduplicationId(SendContext context, string deduplicationId);
    [ExtensionAttribute]
public static bool TrySetDeduplicationId(SendContext context, string deduplicationId);
    [ExtensionAttribute]
public static void SetDelay(SendContext context, TimeSpan delay);
    [ExtensionAttribute]
public static bool TrySetDelay(SendContext context, TimeSpan delay);
}
public class MassTransit.AmazonSqsTransport.AmazonSqsClientContext : ScopePipeContext {
    private IAmazonSimpleNotificationService _snsClient;
    private IAmazonSQS _sqsClient;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectionContext <ConnectionContext>k__BackingField;
    public CancellationToken CancellationToken { get; }
    public ConnectionContext ConnectionContext { get; }
    public AmazonSqsClientContext(ConnectionContext connectionContext, IAmazonSQS sqsClient, IAmazonSimpleNotificationService snsClient, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public virtual CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public sealed virtual ConnectionContext get_ConnectionContext();
    public sealed virtual Task`1<TopicInfo> CreateTopic(Topic topic);
    public sealed virtual Task`1<QueueInfo> CreateQueue(Queue queue);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.AmazonSqsClientContext/<CreateQueueSubscription>d__11")]
public sealed virtual Task`1<bool> CreateQueueSubscription(Topic topic, Queue queue);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.AmazonSqsClientContext/<DeleteTopic>d__12")]
public sealed virtual Task DeleteTopic(Topic topic);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.AmazonSqsClientContext/<DeleteQueue>d__13")]
public sealed virtual Task DeleteQueue(Queue queue);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.AmazonSqsClientContext/<Publish>d__14")]
public sealed virtual Task Publish(string topicName, PublishBatchRequestEntry request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.AmazonSqsClientContext/<SendMessage>d__15")]
public sealed virtual Task SendMessage(string queueName, SendMessageBatchRequestEntry request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.AmazonSqsClientContext/<DeleteMessage>d__16")]
public sealed virtual Task DeleteMessage(string queueName, string receiptHandle, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.AmazonSqsClientContext/<PurgeQueue>d__17")]
public sealed virtual Task PurgeQueue(string queueName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.AmazonSqsClientContext/<ReceiveMessages>d__18")]
public sealed virtual Task`1<IList`1<Message>> ReceiveMessages(string queueName, int messageLimit, int waitTime, CancellationToken cancellationToken);
    public sealed virtual Task`1<QueueInfo> GetQueueInfo(string queueName);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.AmazonSqsClientContext/<ChangeMessageVisibility>d__20")]
public sealed virtual Task ChangeMessageVisibility(string queueUrl, string receiptHandle, int seconds);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.AmazonSqsClientContext/<CreatePublishRequest>d__21")]
public Task`1<PublishRequest> CreatePublishRequest(string topicName, string body);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.AmazonSqsClientContext/<DeleteQueueSubscription>d__22")]
private Task DeleteQueueSubscription(string subscriptionArn);
}
public class MassTransit.AmazonSqsTransport.AmazonSqsConnectionContext : BasePipeContext {
    private IAmazonSqsHostConfiguration _hostConfiguration;
    private QueueCache _queueCache;
    private TopicCache _topicCache;
    [CompilerGeneratedAttribute]
private IConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private IAmazonSqsBusTopology <Topology>k__BackingField;
    public IConnection Connection { get; }
    public IAmazonSqsBusTopology Topology { get; }
    public Uri HostAddress { get; }
    public AmazonSqsConnectionContext(IConnection connection, IAmazonSqsHostConfiguration hostConfiguration, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public sealed virtual IConnection get_Connection();
    [CompilerGeneratedAttribute]
public sealed virtual IAmazonSqsBusTopology get_Topology();
    public sealed virtual Uri get_HostAddress();
    public sealed virtual Task`1<QueueInfo> GetQueue(Queue queue);
    public sealed virtual Task`1<QueueInfo> GetQueueByName(string name);
    public sealed virtual Task`1<bool> RemoveQueueByName(string name);
    public sealed virtual Task`1<TopicInfo> GetTopic(Topic topic);
    public sealed virtual Task`1<TopicInfo> GetTopicByName(string name);
    public sealed virtual Task`1<bool> RemoveTopicByName(string name);
    public sealed virtual ClientContext CreateClientContext(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.AmazonSqsConnectionContext/<DisposeAsync>d__19")]
public sealed virtual ValueTask DisposeAsync();
}
public class MassTransit.AmazonSqsTransport.AmazonSqsHeaderProvider : object {
    private SqsMessageBody _body;
    private Message _message;
    public AmazonSqsHeaderProvider(Message message, SqsMessageBody body);
    public sealed virtual bool TryGetHeader(string key, Object& value);
    [IteratorStateMachineAttribute("MassTransit.AmazonSqsTransport.AmazonSqsHeaderProvider/<GetAll>d__4")]
public sealed virtual IEnumerable`1<KeyValuePair`2<string, object>> GetAll();
}
public class MassTransit.AmazonSqsTransport.AmazonSqsHost : BaseHost {
    private IAmazonSqsHostConfiguration _hostConfiguration;
    [CompilerGeneratedAttribute]
private IAmazonSqsBusTopology <Topology>k__BackingField;
    public IAmazonSqsBusTopology Topology { get; }
    public AmazonSqsHost(IAmazonSqsHostConfiguration hostConfiguration, IAmazonSqsBusTopology busTopology);
    [CompilerGeneratedAttribute]
public sealed virtual IAmazonSqsBusTopology get_Topology();
    public virtual HostReceiveEndpointHandle ConnectReceiveEndpoint(IEndpointDefinition definition, IEndpointNameFormatter endpointNameFormatter, Action`1<IReceiveEndpointConfigurator> configureEndpoint);
    public virtual HostReceiveEndpointHandle ConnectReceiveEndpoint(string queueName, Action`1<IReceiveEndpointConfigurator> configureEndpoint);
    public sealed virtual HostReceiveEndpointHandle ConnectReceiveEndpoint(IEndpointDefinition definition, IEndpointNameFormatter endpointNameFormatter, Action`1<IAmazonSqsReceiveEndpointConfigurator> configureEndpoint);
    public sealed virtual HostReceiveEndpointHandle ConnectReceiveEndpoint(string queueName, Action`1<IAmazonSqsReceiveEndpointConfigurator> configure);
    protected virtual void Probe(ProbeContext context);
    protected virtual IAgent[] GetAgentHandles();
}
public class MassTransit.AmazonSqsTransport.AmazonSqsMessageNameFormatter : object {
    private ConcurrentDictionary`2<Type, string> _cache;
    private string _genericArgumentSeparator;
    private string _genericTypeSeparator;
    private string _namespaceSeparator;
    private string _nestedTypeSeparator;
    public AmazonSqsMessageNameFormatter(string genericArgumentSeparator, string genericTypeSeparator, string namespaceSeparator, string nestedTypeSeparator);
    public sealed virtual string GetMessageName(Type type);
    private string CreateMessageName(Type type);
    private string GetMessageName(StringBuilder sb, Type type, string scope);
}
public class MassTransit.AmazonSqsTransport.AmazonSqsMessageSendContext`1 : MessageSendContext`1<T> {
    [CompilerGeneratedAttribute]
private string <GroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeduplicationId>k__BackingField;
    public string GroupId { get; public set; }
    public string DeduplicationId { get; public set; }
    unknown Nullable`1<int> DelaySeconds {public set; }
    public AmazonSqsMessageSendContext`1(T message, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public string get_GroupId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_GroupId(string value);
    [CompilerGeneratedAttribute]
public string get_DeduplicationId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DeduplicationId(string value);
    public sealed virtual void set_DelaySeconds(Nullable`1<int> value);
    public virtual void ReadPropertiesFrom(IReadOnlyDictionary`2<string, object> properties);
    public virtual void WritePropertiesTo(IDictionary`2<string, object> properties);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.AmazonSqsTransport.AmazonSqsPublishTransportProvider : object {
    private IClientContextSupervisor _clientContextSupervisor;
    private IConnectionContextSupervisor _connectionContextSupervisor;
    private SqsReceiveEndpointContext _context;
    public AmazonSqsPublishTransportProvider(IConnectionContextSupervisor connectionContextSupervisor, SqsReceiveEndpointContext context);
    public sealed virtual Task`1<ISendTransport> GetPublishTransport(Uri publishAddress);
}
public class MassTransit.AmazonSqsTransport.AmazonSqsReceiveContext : BaseReceiveContext {
    private AmazonSqsHeaderProvider _headerProvider;
    [CompilerGeneratedAttribute]
private MessageBody <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private Message <TransportMessage>k__BackingField;
    protected IHeaderProvider HeaderProvider { get; }
    public MessageBody Body { get; }
    public Message TransportMessage { get; }
    public Dictionary`2<string, MessageAttributeValue> Attributes { get; }
    public AmazonSqsReceiveContext(Message message, bool redelivered, SqsReceiveEndpointContext context, ClientContext clientContext, ReceiveSettings settings, ConnectionContext connectionContext);
    protected virtual IHeaderProvider get_HeaderProvider();
    [CompilerGeneratedAttribute]
public virtual MessageBody get_Body();
    [CompilerGeneratedAttribute]
public sealed virtual Message get_TransportMessage();
    public sealed virtual Dictionary`2<string, MessageAttributeValue> get_Attributes();
    public sealed virtual IDictionary`2<string, object> GetTransportProperties();
}
public class MassTransit.AmazonSqsTransport.AmazonSqsReceiveLockContext : object {
    private static TimeSpan MaxVisibilityTimeout;
    private CancellationTokenSource _activeTokenSource;
    private ClientContext _clientContext;
    private Uri _inputAddress;
    private Message _message;
    private ReceiveSettings _settings;
    private DateTime _startedAt;
    private Task _visibilityTask;
    private bool _locked;
    public AmazonSqsReceiveLockContext(Uri inputAddress, Message message, ReceiveSettings settings, ClientContext clientContext);
    private static AmazonSqsReceiveLockContext();
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.AmazonSqsReceiveLockContext/<Complete>d__10")]
public sealed virtual Task Complete();
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.AmazonSqsReceiveLockContext/<Faulted>d__11")]
public sealed virtual Task Faulted(Exception exception);
    public sealed virtual Task ValidateLockStatus();
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.AmazonSqsReceiveLockContext/<RenewMessageVisibility>d__13")]
private Task RenewMessageVisibility();
    [CompilerGeneratedAttribute]
private Task <.ctor>b__9_0();
    [CompilerGeneratedAttribute]
internal static TimeSpan <RenewMessageVisibility>g__CalculateDelay|13_0(int timeout);
}
public class MassTransit.AmazonSqsTransport.AmazonSqsSendTransportProvider : object {
    private IClientContextSupervisor _clientContextSupervisor;
    private IConnectionContextSupervisor _connectionContextSupervisor;
    private SqsReceiveEndpointContext _context;
    public AmazonSqsSendTransportProvider(IConnectionContextSupervisor connectionContextSupervisor, SqsReceiveEndpointContext context);
    public sealed virtual Uri NormalizeAddress(Uri address);
    public sealed virtual Task`1<ISendTransport> GetSendTransport(Uri address);
}
internal static class MassTransit.AmazonSqsTransport.AmazonSqsTransportPropertyNames : object {
    public static string GroupId;
    public static string DeduplicationId;
}
[ExtensionAttribute]
public static class MassTransit.AmazonSqsTransport.AmazonWebServiceResponseExtensions : object {
    [ExtensionAttribute]
public static void EnsureSuccessfulResponse(AmazonWebServiceResponse response);
}
public class MassTransit.AmazonSqsTransport.BatchEntry`1 : object {
    private TaskCompletionSource`1<bool> _completed;
    [CompilerGeneratedAttribute]
private TEntry <Entry>k__BackingField;
    public TEntry Entry { get; }
    public Task Completed { get; }
    public BatchEntry`1(TEntry entry);
    [CompilerGeneratedAttribute]
public TEntry get_Entry();
    public Task get_Completed();
    public void SetCompleted();
    public void SetFaulted(Exception exception);
}
public abstract class MassTransit.AmazonSqsTransport.Batcher`1 : object {
    private Task _batchTask;
    private Channel`1<BatchEntry`1<TEntry>> _channel;
    private TaskExecutor _executor;
    private BatchSettings _settings;
    protected Batcher`1(BatchSettings settings);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.Batcher`1/<Execute>d__5")]
public sealed virtual Task Execute(TEntry entry, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.Batcher`1/<DisposeAsync>d__6")]
public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.Batcher`1/<WaitForBatch>d__7")]
private Task WaitForBatch();
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.Batcher`1/<ReadBatch>d__8")]
private Task ReadBatch();
    protected abstract virtual int AddingEntry(TEntry entry, string entryId);
    protected abstract virtual Task SendBatch(IList`1<BatchEntry`1<TEntry>> batch);
    protected void Complete(IList`1<BatchEntry`1<TEntry>> batch, IEnumerable`1<string> successfulIds);
    protected void Fail(IList`1<BatchEntry`1<TEntry>> batch, string id, string code, string message);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.Batcher`1/<ExecuteBatch>d__13")]
private Task ExecuteBatch(IList`1<BatchEntry`1<TEntry>> batch);
}
public interface MassTransit.AmazonSqsTransport.BatchSettings {
    public bool Enabled { get; }
    public int MessageLimit { get; }
    public int BatchLimit { get; }
    public int SizeLimit { get; }
    public TimeSpan Timeout { get; }
    public abstract virtual bool get_Enabled();
    public abstract virtual int get_MessageLimit();
    public abstract virtual int get_BatchLimit();
    public abstract virtual int get_SizeLimit();
    public abstract virtual TimeSpan get_Timeout();
}
public interface MassTransit.AmazonSqsTransport.ClientContext {
    public ConnectionContext ConnectionContext { get; }
    public abstract virtual ConnectionContext get_ConnectionContext();
    public abstract virtual Task`1<TopicInfo> CreateTopic(Topic topic);
    public abstract virtual Task`1<QueueInfo> CreateQueue(Queue queue);
    public abstract virtual Task`1<bool> CreateQueueSubscription(Topic topic, Queue queue);
    public abstract virtual Task DeleteTopic(Topic topic);
    public abstract virtual Task DeleteQueue(Queue queue);
    public abstract virtual Task Publish(string topicName, PublishBatchRequestEntry request, CancellationToken cancellationToken);
    public abstract virtual Task SendMessage(string queueName, SendMessageBatchRequestEntry request, CancellationToken cancellationToken);
    public abstract virtual Task DeleteMessage(string queueUrl, string receiptHandle, CancellationToken cancellationToken);
    public abstract virtual Task PurgeQueue(string queueName, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<Message>> ReceiveMessages(string queueName, int messageLimit, int waitTime, CancellationToken cancellationToken);
    public abstract virtual Task`1<QueueInfo> GetQueueInfo(string queueName);
    public abstract virtual Task ChangeMessageVisibility(string queueUrl, string receiptHandle, int seconds);
}
public static class MassTransit.AmazonSqsTransport.ClientContextBatchSettings : object {
    [CompilerGeneratedAttribute]
private static int <MessageLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <BatchLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <SizeLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <Timeout>k__BackingField;
    public static int MessageLimit { get; public set; }
    public static int BatchLimit { get; public set; }
    public static int SizeLimit { get; public set; }
    public static TimeSpan Timeout { get; public set; }
    private static ClientContextBatchSettings();
    [CompilerGeneratedAttribute]
public static int get_MessageLimit();
    [CompilerGeneratedAttribute]
public static void set_MessageLimit(int value);
    [CompilerGeneratedAttribute]
public static int get_BatchLimit();
    [CompilerGeneratedAttribute]
public static void set_BatchLimit(int value);
    [CompilerGeneratedAttribute]
public static int get_SizeLimit();
    [CompilerGeneratedAttribute]
public static void set_SizeLimit(int value);
    [CompilerGeneratedAttribute]
public static TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public static void set_Timeout(TimeSpan value);
    public static BatchSettings GetBatchSettings();
}
public static class MassTransit.AmazonSqsTransport.ClientContextCacheDefaults : object {
    [CompilerGeneratedAttribute]
private static int <Capacity>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <MinAge>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <MaxAge>k__BackingField;
    public static int Capacity { get; public set; }
    public static TimeSpan MinAge { get; public set; }
    public static TimeSpan MaxAge { get; public set; }
    private static ClientContextCacheDefaults();
    [CompilerGeneratedAttribute]
public static int get_Capacity();
    [CompilerGeneratedAttribute]
public static void set_Capacity(int value);
    [CompilerGeneratedAttribute]
public static TimeSpan get_MinAge();
    [CompilerGeneratedAttribute]
public static void set_MinAge(TimeSpan value);
    [CompilerGeneratedAttribute]
public static TimeSpan get_MaxAge();
    [CompilerGeneratedAttribute]
public static void set_MaxAge(TimeSpan value);
    public static ICache`3<TKey, TValue, ITimeToLiveCacheValue`1<TValue>> CreateCache();
}
public class MassTransit.AmazonSqsTransport.ClientContextFactory : object {
    private IConnectionContextSupervisor _connectionContextSupervisor;
    public ClientContextFactory(IConnectionContextSupervisor connectionContextSupervisor);
    private sealed virtual override IPipeContextAgent`1<ClientContext> MassTransit.Agents.IPipeContextFactory<MassTransit.AmazonSqsTransport.ClientContext>.CreateContext(ISupervisor supervisor);
    private sealed virtual override IActivePipeContextAgent`1<ClientContext> MassTransit.Agents.IPipeContextFactory<MassTransit.AmazonSqsTransport.ClientContext>.CreateActiveContext(ISupervisor supervisor, PipeContextHandle`1<ClientContext> context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.ClientContextFactory/<CreateSharedClientContext>d__4")]
private static Task`1<ClientContext> CreateSharedClientContext(Task`1<ClientContext> context, CancellationToken cancellationToken);
    private void CreateClientContext(IAsyncPipeContextAgent`1<ClientContext> asyncContext, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static Task`1<ClientContext> <CreateClientContext>g__Create|5_0(ConnectionContext connectionContext, CancellationToken createCancellationToken);
}
public class MassTransit.AmazonSqsTransport.ClientContextSupervisor : TransportPipeContextSupervisor`1<ClientContext> {
    public ClientContextSupervisor(IConnectionContextSupervisor connectionContextSupervisor);
    public ClientContextSupervisor(IClientContextSupervisor clientContextSupervisor);
}
public class MassTransit.AmazonSqsTransport.Configuration.AmazonSqsBusConfiguration : AmazonSqsEndpointConfiguration {
    private BusObservable _busObservers;
    [CompilerGeneratedAttribute]
private IAmazonSqsEndpointConfiguration <BusEndpointConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IAmazonSqsHostConfiguration <HostConfiguration>k__BackingField;
    private IHostConfiguration MassTransit.Configuration.IBusConfiguration.HostConfiguration { get; }
    private IEndpointConfiguration MassTransit.Configuration.IBusConfiguration.BusEndpointConfiguration { get; }
    private IBusObserver MassTransit.Configuration.IBusConfiguration.BusObservers { get; }
    public IAmazonSqsEndpointConfiguration BusEndpointConfiguration { get; }
    public IAmazonSqsHostConfiguration HostConfiguration { get; }
    public AmazonSqsBusConfiguration(IAmazonSqsTopologyConfiguration topologyConfiguration);
    private sealed virtual override IHostConfiguration MassTransit.Configuration.IBusConfiguration.get_HostConfiguration();
    private sealed virtual override IEndpointConfiguration MassTransit.Configuration.IBusConfiguration.get_BusEndpointConfiguration();
    private sealed virtual override IBusObserver MassTransit.Configuration.IBusConfiguration.get_BusObservers();
    [CompilerGeneratedAttribute]
public sealed virtual IAmazonSqsEndpointConfiguration get_BusEndpointConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IAmazonSqsHostConfiguration get_HostConfiguration();
    public sealed virtual ConnectHandle ConnectBusObserver(IBusObserver observer);
    public sealed virtual ConnectHandle ConnectEndpointConfigurationObserver(IEndpointConfigurationObserver observer);
}
public class MassTransit.AmazonSqsTransport.Configuration.AmazonSqsBusFactoryConfigurator : BusFactoryConfigurator {
    [NullableAttribute("1")]
private IAmazonSqsBusConfiguration _busConfiguration;
    [NullableAttribute("1")]
private IAmazonSqsHostConfiguration _hostConfiguration;
    [NullableAttribute("1")]
private QueueReceiveSettings _settings;
    unknown ushort WaitTimeSeconds {public set; }
    unknown bool Durable {public set; }
    unknown bool AutoDelete {public set; }
    unknown bool PurgeOnStartup {public set; }
    [NullableAttribute("1")]
public IDictionary`2<string, object> QueueAttributes { get; }
    [NullableAttribute("1")]
public IDictionary`2<string, object> QueueSubscriptionAttributes { get; }
    [NullableAttribute("1")]
public IDictionary`2<string, string> QueueTags { get; }
    [NullableAttribute("1")]
public IAmazonSqsSendTopologyConfigurator SendTopology { get; }
    [NullableAttribute("1")]
public IAmazonSqsPublishTopologyConfigurator PublishTopology { get; }
    [NullableContextAttribute("1")]
public AmazonSqsBusFactoryConfigurator(IAmazonSqsBusConfiguration busConfiguration);
    public sealed virtual void set_WaitTimeSeconds(ushort value);
    public sealed virtual void set_Durable(bool value);
    public sealed virtual void set_AutoDelete(bool value);
    public sealed virtual void set_PurgeOnStartup(bool value);
    [NullableContextAttribute("1")]
public sealed virtual void OverrideDefaultBusEndpointQueueName(string value);
    [NullableContextAttribute("1")]
public sealed virtual IDictionary`2<string, object> get_QueueAttributes();
    [NullableContextAttribute("1")]
public sealed virtual IDictionary`2<string, object> get_QueueSubscriptionAttributes();
    [NullableContextAttribute("1")]
public sealed virtual IDictionary`2<string, string> get_QueueTags();
    [NullableContextAttribute("1")]
public sealed virtual void Host(AmazonSqsHostSettings settings);
    [NullableContextAttribute("1")]
private sealed virtual override void MassTransit.IAmazonSqsBusFactoryConfigurator.Send(Action`1<IAmazonSqsMessageSendTopologyConfigurator`1<T>> configureTopology);
    [NullableContextAttribute("1")]
private sealed virtual override void MassTransit.IAmazonSqsBusFactoryConfigurator.Publish(Action`1<IAmazonSqsMessagePublishTopologyConfigurator`1<T>> configureTopology);
    [NullableContextAttribute("1")]
public sealed virtual void Publish(Type messageType, Action`1<IAmazonSqsMessagePublishTopologyConfigurator> configure);
    [NullableContextAttribute("1")]
public sealed virtual IAmazonSqsSendTopologyConfigurator get_SendTopology();
    [NullableContextAttribute("1")]
public sealed virtual IAmazonSqsPublishTopologyConfigurator get_PublishTopology();
    [NullableContextAttribute("1")]
public sealed virtual void ReceiveEndpoint(IEndpointDefinition definition, IEndpointNameFormatter endpointNameFormatter, Action`1<IAmazonSqsReceiveEndpointConfigurator> configureEndpoint);
    [NullableContextAttribute("1")]
public sealed virtual void ReceiveEndpoint(IEndpointDefinition definition, IEndpointNameFormatter endpointNameFormatter, Action`1<IReceiveEndpointConfigurator> configureEndpoint);
    [NullableContextAttribute("1")]
public sealed virtual void ReceiveEndpoint(string queueName, Action`1<IAmazonSqsReceiveEndpointConfigurator> configureEndpoint);
    [NullableContextAttribute("1")]
public sealed virtual void ReceiveEndpoint(string queueName, Action`1<IReceiveEndpointConfigurator> configureEndpoint);
    [NullableContextAttribute("1")]
public sealed virtual IReceiveEndpointConfiguration CreateBusEndpointConfiguration(Action`1<IReceiveEndpointConfigurator> configure);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("MassTransit.AmazonSqsTransport.Configuration.AmazonSqsBusFactoryConfigurator/<Validate>d__32")]
public virtual IEnumerable`1<ValidationResult> Validate();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ValidationResult> <>n__0();
}
public class MassTransit.AmazonSqsTransport.Configuration.AmazonSqsEndpointConfiguration : EndpointConfiguration {
    [CompilerGeneratedAttribute]
private IAmazonSqsTopologyConfiguration <Topology>k__BackingField;
    public IAmazonSqsTopologyConfiguration Topology { get; }
    public AmazonSqsEndpointConfiguration(IAmazonSqsTopologyConfiguration topologyConfiguration);
    private AmazonSqsEndpointConfiguration(IEndpointConfiguration parentConfiguration, IAmazonSqsTopologyConfiguration topologyConfiguration, bool isBusEndpoint);
    [CompilerGeneratedAttribute]
public sealed virtual IAmazonSqsTopologyConfiguration get_Topology();
    public sealed virtual IAmazonSqsEndpointConfiguration CreateEndpointConfiguration(bool isBusEndpoint);
}
public class MassTransit.AmazonSqsTransport.Configuration.AmazonSqsHostConfiguration : BaseHostConfiguration`2<IAmazonSqsReceiveEndpointConfiguration, IAmazonSqsReceiveEndpointConfigurator> {
    private IAmazonSqsBusConfiguration _busConfiguration;
    private IAmazonSqsBusTopology _busTopology;
    private Recycle`1<IConnectionContextSupervisor> _connectionContext;
    private IAmazonSqsTopologyConfiguration _topologyConfiguration;
    private AmazonSqsHostSettings _hostSettings;
    [CompilerGeneratedAttribute]
private IRetryPolicy <ReceiveTransportRetryPolicy>k__BackingField;
    public IConnectionContextSupervisor ConnectionContextSupervisor { get; }
    public Uri HostAddress { get; }
    public AmazonSqsHostSettings Settings { get; public set; }
    public IBusTopology Topology { get; }
    public IRetryPolicy ReceiveTransportRetryPolicy { get; }
    private IAmazonSqsBusTopology MassTransit.AmazonSqsTransport.Configuration.IAmazonSqsHostConfiguration.Topology { get; }
    public AmazonSqsHostConfiguration(IAmazonSqsBusConfiguration busConfiguration, IAmazonSqsTopologyConfiguration topologyConfiguration);
    public sealed virtual IConnectionContextSupervisor get_ConnectionContextSupervisor();
    public virtual Uri get_HostAddress();
    public sealed virtual AmazonSqsHostSettings get_Settings();
    public sealed virtual void set_Settings(AmazonSqsHostSettings value);
    public virtual IBusTopology get_Topology();
    [CompilerGeneratedAttribute]
public virtual IRetryPolicy get_ReceiveTransportRetryPolicy();
    public sealed virtual void ApplyEndpointDefinition(IAmazonSqsReceiveEndpointConfigurator configurator, IEndpointDefinition definition);
    public sealed virtual IAmazonSqsReceiveEndpointConfiguration CreateReceiveEndpointConfiguration(string queueName, Action`1<IAmazonSqsReceiveEndpointConfigurator> configure);
    public sealed virtual IAmazonSqsReceiveEndpointConfiguration CreateReceiveEndpointConfiguration(QueueReceiveSettings settings, IAmazonSqsEndpointConfiguration endpointConfiguration, Action`1<IAmazonSqsReceiveEndpointConfigurator> configure);
    private sealed virtual override IAmazonSqsBusTopology MassTransit.AmazonSqsTransport.Configuration.IAmazonSqsHostConfiguration.get_Topology();
    public virtual void ReceiveEndpoint(IEndpointDefinition definition, IEndpointNameFormatter endpointNameFormatter, Action`1<IAmazonSqsReceiveEndpointConfigurator> configureEndpoint);
    public virtual void ReceiveEndpoint(string queueName, Action`1<IAmazonSqsReceiveEndpointConfigurator> configureEndpoint);
    public virtual IReceiveEndpointConfiguration CreateReceiveEndpointConfiguration(string queueName, Action`1<IReceiveEndpointConfigurator> configure);
    public virtual IHost Build();
}
public class MassTransit.AmazonSqsTransport.Configuration.AmazonSqsHostConfigurator : object {
    private ConfigurationHostSettings _settings;
    private string _accessKey;
    private string _secretKey;
    public AmazonSqsHostSettings Settings { get; }
    public AmazonSqsHostConfigurator(Uri address);
    public AmazonSqsHostSettings get_Settings();
    public sealed virtual void AccessKey(string accessKey);
    public sealed virtual void Scope(string scope, bool scopeTopics);
    public sealed virtual void EnableScopedTopics();
    public sealed virtual void SecretKey(string secretKey);
    public sealed virtual void Credentials(AWSCredentials credentials);
    public sealed virtual void Config(AmazonSQSConfig config);
    public sealed virtual void Config(AmazonSimpleNotificationServiceConfig config);
    public sealed virtual void AllowTransportHeader(AllowTransportHeader allowTransportHeader);
    private void SetBasicCredentials();
}
public class MassTransit.AmazonSqsTransport.Configuration.AmazonSqsQueueConfigurator : EntityConfigurator {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <QueueAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <QueueSubscriptionAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <QueueTags>k__BackingField;
    public IDictionary`2<string, string> Tags { get; }
    protected AddressType AddressType { get; }
    public IDictionary`2<string, object> QueueAttributes { get; public set; }
    public IDictionary`2<string, object> QueueSubscriptionAttributes { get; public set; }
    public IDictionary`2<string, string> QueueTags { get; public set; }
    protected AmazonSqsQueueConfigurator(string queueName, bool durable, bool autoDelete, IDictionary`2<string, object> queueAttributes, IDictionary`2<string, object> queueSubscriptionAttributes, IDictionary`2<string, string> queueTags);
    public AmazonSqsQueueConfigurator(Queue source);
    public sealed virtual IDictionary`2<string, string> get_Tags();
    protected virtual AddressType get_AddressType();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_QueueAttributes();
    [CompilerGeneratedAttribute]
public void set_QueueAttributes(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_QueueSubscriptionAttributes();
    [CompilerGeneratedAttribute]
public void set_QueueSubscriptionAttributes(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_QueueTags();
    [CompilerGeneratedAttribute]
public void set_QueueTags(IDictionary`2<string, string> value);
}
public class MassTransit.AmazonSqsTransport.Configuration.AmazonSqsQueueSubscriptionConfigurator : AmazonSqsQueueConfigurator {
    protected AmazonSqsQueueSubscriptionConfigurator(string queueName, bool durable, bool autoDelete);
}
public class MassTransit.AmazonSqsTransport.Configuration.AmazonSqsReceiveEndpointBuilder : ReceiveEndpointBuilder {
    private IAmazonSqsReceiveEndpointConfiguration _configuration;
    private IAmazonSqsHostConfiguration _hostConfiguration;
    public AmazonSqsReceiveEndpointBuilder(IAmazonSqsHostConfiguration hostConfiguration, IAmazonSqsReceiveEndpointConfiguration configuration);
    public virtual ConnectHandle ConnectConsumePipe(IPipe`1<ConsumeContext`1<T>> pipe, ConnectPipeOptions options);
    public SqsReceiveEndpointContext CreateReceiveEndpointContext();
    private BrokerTopology BuildTopology(ReceiveSettings settings);
    private IErrorTransport CreateErrorTransport(TransportSetHeaderAdapter`1<MessageAttributeValue> headerAdapter);
    private IDeadLetterTransport CreateDeadLetterTransport(TransportSetHeaderAdapter`1<MessageAttributeValue> headerAdapter);
}
public class MassTransit.AmazonSqsTransport.Configuration.AmazonSqsReceiveEndpointConfiguration : ReceiveEndpointConfiguration {
    private IBuildPipeConfigurator`1<ClientContext> _clientConfigurator;
    private IBuildPipeConfigurator`1<ConnectionContext> _connectionConfigurator;
    private IAmazonSqsEndpointConfiguration _endpointConfiguration;
    private IAmazonSqsHostConfiguration _hostConfiguration;
    private Lazy`1<Uri> _inputAddress;
    private QueueReceiveSettings _settings;
    public ReceiveSettings Settings { get; }
    public Uri HostAddress { get; }
    public Uri InputAddress { get; }
    private IAmazonSqsTopologyConfiguration MassTransit.AmazonSqsTransport.Configuration.IAmazonSqsEndpointConfiguration.Topology { get; }
    unknown bool Durable {public set; }
    unknown bool AutoDelete {public set; }
    unknown int ConcurrentDeliveryLimit {public set; }
    unknown ushort WaitTimeSeconds {public set; }
    unknown bool PurgeOnStartup {public set; }
    public IDictionary`2<string, object> QueueAttributes { get; }
    public IDictionary`2<string, object> QueueSubscriptionAttributes { get; }
    public IDictionary`2<string, string> QueueTags { get; }
    unknown int RedeliverVisibilityTimeout {public set; }
    public AmazonSqsReceiveEndpointConfiguration(IAmazonSqsHostConfiguration hostConfiguration, QueueReceiveSettings settings, IAmazonSqsEndpointConfiguration endpointConfiguration);
    public sealed virtual ReceiveSettings get_Settings();
    public virtual Uri get_HostAddress();
    public virtual Uri get_InputAddress();
    public virtual ReceiveEndpointContext CreateReceiveEndpointContext();
    private sealed virtual override IAmazonSqsTopologyConfiguration MassTransit.AmazonSqsTransport.Configuration.IAmazonSqsEndpointConfiguration.get_Topology();
    public sealed virtual void Build(IHost host);
    [IteratorStateMachineAttribute("MassTransit.AmazonSqsTransport.Configuration.AmazonSqsReceiveEndpointConfiguration/<Validate>d__17")]
public virtual IEnumerable`1<ValidationResult> Validate();
    public sealed virtual void set_Durable(bool value);
    public sealed virtual void set_AutoDelete(bool value);
    public sealed virtual void set_ConcurrentDeliveryLimit(int value);
    public sealed virtual void set_WaitTimeSeconds(ushort value);
    public sealed virtual void set_PurgeOnStartup(bool value);
    public sealed virtual IDictionary`2<string, object> get_QueueAttributes();
    public sealed virtual IDictionary`2<string, object> get_QueueSubscriptionAttributes();
    public sealed virtual IDictionary`2<string, string> get_QueueTags();
    public sealed virtual void Subscribe(string topicName, Action`1<IAmazonSqsTopicSubscriptionConfigurator> configure);
    public sealed virtual void set_RedeliverVisibilityTimeout(int value);
    public sealed virtual void Subscribe(Action`1<IAmazonSqsTopicSubscriptionConfigurator> configure);
    public sealed virtual void ConfigureClient(Action`1<IPipeConfigurator`1<ClientContext>> configure);
    public sealed virtual void ConfigureConnection(Action`1<IPipeConfigurator`1<ConnectionContext>> configure);
    public sealed virtual void DisableMessageOrdering();
    private SqsReceiveEndpointContext CreateSqsReceiveEndpointContext();
    private Uri FormatInputAddress();
    protected virtual bool IsAlreadyConfigured();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ValidationResult> <>n__0();
}
public class MassTransit.AmazonSqsTransport.Configuration.AmazonSqsRegistrationBusFactory : TransportRegistrationBusFactory`1<IAmazonSqsReceiveEndpointConfigurator> {
    private AmazonSqsBusConfiguration _busConfiguration;
    private Action`2<IBusRegistrationContext, IAmazonSqsBusFactoryConfigurator> _configure;
    public AmazonSqsRegistrationBusFactory(Action`2<IBusRegistrationContext, IAmazonSqsBusFactoryConfigurator> configure);
    private AmazonSqsRegistrationBusFactory(AmazonSqsBusConfiguration busConfiguration, Action`2<IBusRegistrationContext, IAmazonSqsBusFactoryConfigurator> configure);
    public virtual IBusInstance CreateBus(IBusRegistrationContext context, IEnumerable`1<IBusInstanceSpecification> specifications, string busName);
}
public class MassTransit.AmazonSqsTransport.Configuration.AmazonSqsTopicConfigurator : EntityConfigurator {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <TopicAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <TopicSubscriptionAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <TopicTags>k__BackingField;
    public IDictionary`2<string, string> Tags { get; }
    protected AddressType AddressType { get; }
    public IDictionary`2<string, object> TopicAttributes { get; private set; }
    public IDictionary`2<string, object> TopicSubscriptionAttributes { get; private set; }
    public IDictionary`2<string, string> TopicTags { get; private set; }
    public AmazonSqsTopicConfigurator(string topicName, bool durable, bool autoDelete, IDictionary`2<string, object> topicAttributes, IDictionary`2<string, object> topicSubscriptionAttributes, IDictionary`2<string, string> topicTags);
    public AmazonSqsTopicConfigurator(Topic source);
    public sealed virtual IDictionary`2<string, string> get_Tags();
    protected virtual AddressType get_AddressType();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_TopicAttributes();
    [CompilerGeneratedAttribute]
private void set_TopicAttributes(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_TopicSubscriptionAttributes();
    [CompilerGeneratedAttribute]
private void set_TopicSubscriptionAttributes(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_TopicTags();
    [CompilerGeneratedAttribute]
private void set_TopicTags(IDictionary`2<string, string> value);
}
public class MassTransit.AmazonSqsTransport.Configuration.AmazonSqsTopicSubscriptionConfigurator : AmazonSqsTopicConfigurator {
    public AmazonSqsTopicSubscriptionConfigurator(string topicName, bool durable, bool autoDelete);
    public AmazonSqsTopicSubscriptionConfigurator(Topic topic);
}
public class MassTransit.AmazonSqsTransport.Configuration.AmazonSqsTopologyConfiguration : object {
    private IAmazonSqsConsumeTopologyConfigurator _consumeTopology;
    private IMessageTopologyConfigurator _messageTopology;
    private IAmazonSqsPublishTopologyConfigurator _publishTopology;
    private IAmazonSqsSendTopologyConfigurator _sendTopology;
    private IMessageTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.Message { get; }
    private ISendTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.Send { get; }
    private IPublishTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.Publish { get; }
    private IConsumeTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.Consume { get; }
    private IAmazonSqsPublishTopologyConfigurator MassTransit.AmazonSqsTransport.Configuration.IAmazonSqsTopologyConfiguration.Publish { get; }
    private IAmazonSqsSendTopologyConfigurator MassTransit.AmazonSqsTransport.Configuration.IAmazonSqsTopologyConfiguration.Send { get; }
    private IAmazonSqsConsumeTopologyConfigurator MassTransit.AmazonSqsTransport.Configuration.IAmazonSqsTopologyConfiguration.Consume { get; }
    public AmazonSqsTopologyConfiguration(IMessageTopologyConfigurator messageTopology);
    public AmazonSqsTopologyConfiguration(IAmazonSqsTopologyConfiguration topologyConfiguration);
    private sealed virtual override IMessageTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.get_Message();
    private sealed virtual override ISendTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.get_Send();
    private sealed virtual override IPublishTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.get_Publish();
    private sealed virtual override IConsumeTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.get_Consume();
    private sealed virtual override IAmazonSqsPublishTopologyConfigurator MassTransit.AmazonSqsTransport.Configuration.IAmazonSqsTopologyConfiguration.get_Publish();
    private sealed virtual override IAmazonSqsSendTopologyConfigurator MassTransit.AmazonSqsTransport.Configuration.IAmazonSqsTopologyConfiguration.get_Send();
    private sealed virtual override IAmazonSqsConsumeTopologyConfigurator MassTransit.AmazonSqsTransport.Configuration.IAmazonSqsTopologyConfiguration.get_Consume();
    public sealed virtual IEnumerable`1<ValidationResult> Validate();
}
public class MassTransit.AmazonSqsTransport.Configuration.ConfigurationHostSettings : object {
    private Lazy`1<Uri> _hostAddress;
    private AWSCredentials _credentials;
    private ImmutableCredentials _immutableCredentials;
    [CompilerGeneratedAttribute]
private AmazonSQSConfig <AmazonSqsConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private AmazonSimpleNotificationServiceConfig <AmazonSnsConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private RegionEndpoint <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private AllowTransportHeader <AllowTransportHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ScopeTopics>k__BackingField;
    public AWSCredentials Credentials { get; public set; }
    public AmazonSQSConfig AmazonSqsConfig { get; public set; }
    public AmazonSimpleNotificationServiceConfig AmazonSnsConfig { get; public set; }
    public string Scope { get; public set; }
    public RegionEndpoint Region { get; public set; }
    public string AccessKey { get; }
    public string SecretKey { get; }
    public AllowTransportHeader AllowTransportHeader { get; public set; }
    public bool ScopeTopics { get; public set; }
    public Uri HostAddress { get; }
    public AWSCredentials get_Credentials();
    public void set_Credentials(AWSCredentials value);
    [CompilerGeneratedAttribute]
public AmazonSQSConfig get_AmazonSqsConfig();
    [CompilerGeneratedAttribute]
public void set_AmazonSqsConfig(AmazonSQSConfig value);
    [CompilerGeneratedAttribute]
public AmazonSimpleNotificationServiceConfig get_AmazonSnsConfig();
    [CompilerGeneratedAttribute]
public void set_AmazonSnsConfig(AmazonSimpleNotificationServiceConfig value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public sealed virtual RegionEndpoint get_Region();
    [CompilerGeneratedAttribute]
public void set_Region(RegionEndpoint value);
    public sealed virtual string get_AccessKey();
    public sealed virtual string get_SecretKey();
    [CompilerGeneratedAttribute]
public sealed virtual AllowTransportHeader get_AllowTransportHeader();
    [CompilerGeneratedAttribute]
public void set_AllowTransportHeader(AllowTransportHeader value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ScopeTopics();
    [CompilerGeneratedAttribute]
public void set_ScopeTopics(bool value);
    public sealed virtual Uri get_HostAddress();
    public sealed virtual IConnection CreateConnection();
    private Uri FormatHostAddress();
    public virtual string ToString();
    private ImmutableCredentials GetImmutableCredentials();
}
public class MassTransit.AmazonSqsTransport.Configuration.ConsumerConsumeTopologySpecification : AmazonSqsTopicSubscriptionConfigurator {
    private IAmazonSqsPublishTopology _publishTopology;
    public ConsumerConsumeTopologySpecification(IAmazonSqsPublishTopology publishTopology, string topicName, bool durable, bool autoDelete);
    public ConsumerConsumeTopologySpecification(IAmazonSqsPublishTopology publishTopology, Topic topic);
    public sealed virtual IEnumerable`1<ValidationResult> Validate();
    public sealed virtual void Apply(IReceiveEndpointBrokerTopologyBuilder builder);
}
public abstract class MassTransit.AmazonSqsTransport.Configuration.EntityConfigurator : object {
    [CompilerGeneratedAttribute]
private bool <Durable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoDelete>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityName>k__BackingField;
    public bool Durable { get; public set; }
    public bool AutoDelete { get; public set; }
    public string EntityName { get; public set; }
    protected AddressType AddressType { get; }
    protected EntityConfigurator(string entityName, bool durable, bool autoDelete);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Durable();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Durable(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutoDelete();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AutoDelete(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_EntityName();
    [CompilerGeneratedAttribute]
public void set_EntityName(string value);
    protected abstract virtual AddressType get_AddressType();
    public virtual AmazonSqsEndpointAddress GetEndpointAddress(Uri hostAddress);
}
public interface MassTransit.AmazonSqsTransport.Configuration.IAmazonSqsBusConfiguration {
    public IAmazonSqsHostConfiguration HostConfiguration { get; }
    public IAmazonSqsEndpointConfiguration BusEndpointConfiguration { get; }
    public IAmazonSqsTopologyConfiguration Topology { get; }
    public abstract virtual IAmazonSqsHostConfiguration get_HostConfiguration();
    public abstract virtual IAmazonSqsEndpointConfiguration get_BusEndpointConfiguration();
    public abstract virtual IAmazonSqsTopologyConfiguration get_Topology();
    public abstract virtual IAmazonSqsEndpointConfiguration CreateEndpointConfiguration(bool isBusEndpoint);
}
public interface MassTransit.AmazonSqsTransport.Configuration.IAmazonSqsEndpointConfiguration {
    public IAmazonSqsTopologyConfiguration Topology { get; }
    public abstract virtual IAmazonSqsTopologyConfiguration get_Topology();
}
public interface MassTransit.AmazonSqsTransport.Configuration.IAmazonSqsHostConfiguration {
    public AmazonSqsHostSettings Settings { get; public set; }
    public IConnectionContextSupervisor ConnectionContextSupervisor { get; }
    public IAmazonSqsBusTopology Topology { get; }
    public abstract virtual AmazonSqsHostSettings get_Settings();
    public abstract virtual void set_Settings(AmazonSqsHostSettings value);
    public abstract virtual IConnectionContextSupervisor get_ConnectionContextSupervisor();
    public abstract virtual IAmazonSqsBusTopology get_Topology();
    public abstract virtual void ApplyEndpointDefinition(IAmazonSqsReceiveEndpointConfigurator configurator, IEndpointDefinition definition);
    public abstract virtual IAmazonSqsReceiveEndpointConfiguration CreateReceiveEndpointConfiguration(string queueName, Action`1<IAmazonSqsReceiveEndpointConfigurator> configure);
    public abstract virtual IAmazonSqsReceiveEndpointConfiguration CreateReceiveEndpointConfiguration(QueueReceiveSettings settings, IAmazonSqsEndpointConfiguration endpointConfiguration, Action`1<IAmazonSqsReceiveEndpointConfigurator> configure);
}
public interface MassTransit.AmazonSqsTransport.Configuration.IAmazonSqsReceiveEndpointConfiguration {
    public ReceiveSettings Settings { get; }
    public abstract virtual ReceiveSettings get_Settings();
    public abstract virtual void Build(IHost host);
}
public interface MassTransit.AmazonSqsTransport.Configuration.IAmazonSqsTopologyConfiguration {
    public IAmazonSqsPublishTopologyConfigurator Publish { get; }
    public IAmazonSqsSendTopologyConfigurator Send { get; }
    public IAmazonSqsConsumeTopologyConfigurator Consume { get; }
    public abstract virtual IAmazonSqsPublishTopologyConfigurator get_Publish();
    public abstract virtual IAmazonSqsSendTopologyConfigurator get_Send();
    public abstract virtual IAmazonSqsConsumeTopologyConfigurator get_Consume();
}
public class MassTransit.AmazonSqsTransport.Configuration.InvalidAmazonSqsConsumeTopologySpecification : object {
    private string _key;
    private string _message;
    public InvalidAmazonSqsConsumeTopologySpecification(string key, string message);
    [IteratorStateMachineAttribute("MassTransit.AmazonSqsTransport.Configuration.InvalidAmazonSqsConsumeTopologySpecification/<Validate>d__3")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
    public sealed virtual void Apply(IReceiveEndpointBrokerTopologyBuilder builder);
}
public class MassTransit.AmazonSqsTransport.Connection : object {
    [CompilerGeneratedAttribute]
private IAmazonSQS <SqsClient>k__BackingField;
    [CompilerGeneratedAttribute]
private IAmazonSimpleNotificationService <SnsClient>k__BackingField;
    public IAmazonSQS SqsClient { get; }
    public IAmazonSimpleNotificationService SnsClient { get; }
    public Connection(AWSCredentials credentials, RegionEndpoint regionEndpoint, AmazonSQSConfig amazonSqsConfig, AmazonSimpleNotificationServiceConfig amazonSnsConfig);
    [CompilerGeneratedAttribute]
public sealed virtual IAmazonSQS get_SqsClient();
    [CompilerGeneratedAttribute]
public sealed virtual IAmazonSimpleNotificationService get_SnsClient();
    public sealed virtual void Dispose();
}
public interface MassTransit.AmazonSqsTransport.ConnectionContext {
    public IConnection Connection { get; }
    public Uri HostAddress { get; }
    public IAmazonSqsBusTopology Topology { get; }
    public abstract virtual IConnection get_Connection();
    public abstract virtual Uri get_HostAddress();
    public abstract virtual IAmazonSqsBusTopology get_Topology();
    public abstract virtual Task`1<QueueInfo> GetQueue(Queue queue);
    public abstract virtual Task`1<QueueInfo> GetQueueByName(string name);
    public abstract virtual Task`1<bool> RemoveQueueByName(string name);
    public abstract virtual Task`1<TopicInfo> GetTopic(Topic topic);
    public abstract virtual Task`1<TopicInfo> GetTopicByName(string name);
    public abstract virtual Task`1<bool> RemoveTopicByName(string name);
    public abstract virtual ClientContext CreateClientContext(CancellationToken cancellationToken);
}
public class MassTransit.AmazonSqsTransport.ConnectionContextFactory : object {
    private IAmazonSqsHostConfiguration _hostConfiguration;
    public ConnectionContextFactory(IAmazonSqsHostConfiguration hostConfiguration);
    public sealed virtual IPipeContextAgent`1<ConnectionContext> CreateContext(ISupervisor supervisor);
    public sealed virtual IActivePipeContextAgent`1<ConnectionContext> CreateActiveContext(ISupervisor supervisor, PipeContextHandle`1<ConnectionContext> context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.ConnectionContextFactory/<CreateSharedConnection>d__4")]
private static Task`1<ConnectionContext> CreateSharedConnection(Task`1<ConnectionContext> context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.ConnectionContextFactory/<CreateConnection>d__5")]
private Task`1<ConnectionContext> CreateConnection(ISupervisor supervisor);
}
public class MassTransit.AmazonSqsTransport.ConnectionContextSupervisor : TransportPipeContextSupervisor`1<ConnectionContext> {
    private IAmazonSqsHostConfiguration _hostConfiguration;
    private IAmazonSqsTopologyConfiguration _topologyConfiguration;
    public ConnectionContextSupervisor(IAmazonSqsHostConfiguration hostConfiguration, IAmazonSqsTopologyConfiguration topologyConfiguration);
    public sealed virtual Uri NormalizeAddress(Uri address);
    public sealed virtual Task`1<ISendTransport> CreateSendTransport(SqsReceiveEndpointContext receiveEndpointContext, IClientContextSupervisor clientContextSupervisor, Uri address);
    public sealed virtual Task`1<ISendTransport> CreatePublishTransport(SqsReceiveEndpointContext receiveEndpointContext, IClientContextSupervisor clientContextSupervisor);
    private static Task`1<ISendTransport> CreateTransport(IClientContextSupervisor clientContextSupervisor, SendTransportContext`1<ClientContext> transportContext);
}
public interface MassTransit.AmazonSqsTransport.DeadLetterSettings {
    public abstract virtual BrokerTopology GetBrokerTopology();
}
public class MassTransit.AmazonSqsTransport.DeleteBatcher : Batcher`1<DeleteMessageBatchRequestEntry> {
    private CancellationToken _cancellationToken;
    private IAmazonSQS _client;
    private string _queueUrl;
    public DeleteBatcher(IAmazonSQS client, string queueUrl, CancellationToken cancellationToken);
    protected virtual int AddingEntry(DeleteMessageBatchRequestEntry entry, string entryId);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.DeleteBatcher/<SendBatch>d__5")]
protected virtual Task SendBatch(IList`1<BatchEntry`1<DeleteMessageBatchRequestEntry>> batch);
}
public interface MassTransit.AmazonSqsTransport.EntitySettings {
    public string EntityName { get; }
    public bool Durable { get; }
    public bool AutoDelete { get; }
    public IDictionary`2<string, string> Tags { get; }
    public abstract virtual string get_EntityName();
    public abstract virtual bool get_Durable();
    public abstract virtual bool get_AutoDelete();
    public abstract virtual IDictionary`2<string, string> get_Tags();
}
public interface MassTransit.AmazonSqsTransport.ErrorSettings {
    public abstract virtual BrokerTopology GetBrokerTopology();
}
public interface MassTransit.AmazonSqsTransport.IAmazonSqsHost {
    public IAmazonSqsBusTopology Topology { get; }
    public abstract virtual IAmazonSqsBusTopology get_Topology();
}
public interface MassTransit.AmazonSqsTransport.IBatcher`1 {
    public abstract virtual Task Execute(TEntry entry, CancellationToken cancellationToken);
}
public interface MassTransit.AmazonSqsTransport.IClientContextSupervisor {
}
public interface MassTransit.AmazonSqsTransport.IConnection {
    public IAmazonSQS SqsClient { get; }
    public IAmazonSimpleNotificationService SnsClient { get; }
    public abstract virtual IAmazonSQS get_SqsClient();
    public abstract virtual IAmazonSimpleNotificationService get_SnsClient();
}
public interface MassTransit.AmazonSqsTransport.IConnectionContextSupervisor {
    public abstract virtual Uri NormalizeAddress(Uri address);
    public abstract virtual Task`1<ISendTransport> CreateSendTransport(SqsReceiveEndpointContext receiveEndpointContext, IClientContextSupervisor clientContextSupervisor, Uri address);
    public abstract virtual Task`1<ISendTransport> CreatePublishTransport(SqsReceiveEndpointContext receiveEndpointContext, IClientContextSupervisor clientContextSupervisor);
}
public class MassTransit.AmazonSqsTransport.Middleware.AmazonSqsConsumerFilter : object {
    private SqsReceiveEndpointContext _context;
    public AmazonSqsConsumerFilter(SqsReceiveEndpointContext context);
    private sealed virtual override void MassTransit.IProbeSite.Probe(ProbeContext context);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.Middleware.AmazonSqsConsumerFilter/<MassTransit-IFilter<MassTransit-AmazonSqsTransport-ClientContext>-Send>d__3")]
private sealed virtual override Task MassTransit.IFilter<MassTransit.AmazonSqsTransport.ClientContext>.Send(ClientContext context, IPipe`1<ClientContext> next);
}
public class MassTransit.AmazonSqsTransport.Middleware.AmazonSqsMessageReceiver : ConsumerAgent`1<string> {
    private ClientContext _client;
    private SqsReceiveEndpointContext _context;
    private IChannelExecutorPool`1<Message> _executorPool;
    private ReceiveSettings _receiveSettings;
    public AmazonSqsMessageReceiver(ClientContext client, SqsReceiveEndpointContext context);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.Middleware.AmazonSqsMessageReceiver/<ActiveAndActualAgentsCompleted>d__5")]
protected virtual Task ActiveAndActualAgentsCompleted(StopContext context);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.Middleware.AmazonSqsMessageReceiver/<Consume>d__6")]
private Task Consume();
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.Middleware.AmazonSqsMessageReceiver/<GetQueueAttributes>d__7")]
private Task GetQueueAttributes();
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.Middleware.AmazonSqsMessageReceiver/<HandleMessage>d__8")]
private Task HandleMessage(Message message, ReceiveLockContext lockContext);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.Middleware.AmazonSqsMessageReceiver/<ReceiveMessages>d__9")]
private Task`1<IEnumerable`1<Message>> ReceiveMessages(int messageLimit, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private Task <.ctor>b__4_0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(StopContext context);
    [CompilerGeneratedAttribute]
private Task <Consume>g__Handle|6_0(Message message, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private Task <Consume>b__6_1(Message m, CancellationToken c);
}
public class MassTransit.AmazonSqsTransport.Middleware.ConfigureAmazonSqsTopologyFilter`1 : object {
    private BrokerTopology _brokerTopology;
    private SqsReceiveEndpointContext _context;
    private TSettings _settings;
    public ConfigureAmazonSqsTopologyFilter`1(TSettings settings, BrokerTopology brokerTopology, SqsReceiveEndpointContext context);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.Middleware.ConfigureAmazonSqsTopologyFilter`1/<Send>d__4")]
public sealed virtual Task Send(ClientContext context, IPipe`1<ClientContext> next);
    public sealed virtual void Probe(ProbeContext context);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.Middleware.ConfigureAmazonSqsTopologyFilter`1/<Configure>d__6")]
public Task`1<OneTimeContext`1<ConfigureTopologyContext`1<TSettings>>> Configure(ClientContext context);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.Middleware.ConfigureAmazonSqsTopologyFilter`1/<ConfigureTopology>d__7")]
private Task ConfigureTopology(ClientContext context);
    private bool AnyAutoDelete();
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.Middleware.ConfigureAmazonSqsTopologyFilter`1/<Declare>d__9")]
private static Task`1<TopicInfo> Declare(ClientContext context, Topic topic);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.Middleware.ConfigureAmazonSqsTopologyFilter`1/<Declare>d__10")]
private static Task Declare(ClientContext context, QueueSubscription subscription);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.Middleware.ConfigureAmazonSqsTopologyFilter`1/<Declare>d__11")]
private static Task`1<QueueInfo> Declare(ClientContext context, Queue queue);
}
public interface MassTransit.AmazonSqsTransport.Middleware.ConfigureTopologyContext`1 {
}
public class MassTransit.AmazonSqsTransport.Middleware.PurgeOnStartupFilter : object {
    private string _queueName;
    private bool _queueAlreadyPurged;
    public PurgeOnStartupFilter(string queueName);
    private sealed virtual override void MassTransit.IProbeSite.Probe(ProbeContext context);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.Middleware.PurgeOnStartupFilter/<MassTransit-IFilter<MassTransit-AmazonSqsTransport-ClientContext>-Send>d__4")]
private sealed virtual override Task MassTransit.IFilter<MassTransit.AmazonSqsTransport.ClientContext>.Send(ClientContext context, IPipe`1<ClientContext> next);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.Middleware.PurgeOnStartupFilter/<PurgeIfRequested>d__5")]
private Task PurgeIfRequested(ClientContext context, string queueName);
}
public class MassTransit.AmazonSqsTransport.Middleware.RemoveAmazonSqsTopologyAgent : Agent {
    private BrokerTopology _brokerTopology;
    private ClientContext _context;
    public RemoveAmazonSqsTopologyAgent(ClientContext context, BrokerTopology brokerTopology);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.Middleware.RemoveAmazonSqsTopologyAgent/<StopAgent>d__3")]
protected virtual Task StopAgent(StopContext context);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.Middleware.RemoveAmazonSqsTopologyAgent/<DeleteAutoDelete>d__4")]
private Task DeleteAutoDelete(ClientContext context);
    private static Task Delete(ClientContext context, Topic topic);
    private static Task Delete(ClientContext context, Queue queue);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(StopContext context);
}
public class MassTransit.AmazonSqsTransport.PublishBatcher : Batcher`1<PublishBatchRequestEntry> {
    private CancellationToken _cancellationToken;
    private IAmazonSimpleNotificationService _client;
    private string _topicArn;
    public PublishBatcher(IAmazonSimpleNotificationService client, string topicArn, CancellationToken cancellationToken);
    protected virtual int AddingEntry(PublishBatchRequestEntry entry, string entryId);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.PublishBatcher/<SendBatch>d__5")]
protected virtual Task SendBatch(IList`1<BatchEntry`1<PublishBatchRequestEntry>> batch);
}
public static class MassTransit.AmazonSqsTransport.PublishBatchSettings : object {
    [CompilerGeneratedAttribute]
private static int <MessageLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <BatchLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <SizeLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <Timeout>k__BackingField;
    public static int MessageLimit { get; public set; }
    public static int BatchLimit { get; public set; }
    public static int SizeLimit { get; public set; }
    public static TimeSpan Timeout { get; public set; }
    private static PublishBatchSettings();
    [CompilerGeneratedAttribute]
public static int get_MessageLimit();
    [CompilerGeneratedAttribute]
public static void set_MessageLimit(int value);
    [CompilerGeneratedAttribute]
public static int get_BatchLimit();
    [CompilerGeneratedAttribute]
public static void set_BatchLimit(int value);
    [CompilerGeneratedAttribute]
public static int get_SizeLimit();
    [CompilerGeneratedAttribute]
public static void set_SizeLimit(int value);
    [CompilerGeneratedAttribute]
public static TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public static void set_Timeout(TimeSpan value);
    public static BatchSettings GetBatchSettings();
}
public interface MassTransit.AmazonSqsTransport.PublishSettings {
}
public class MassTransit.AmazonSqsTransport.QueueCache : object {
    private static List`1<string> AllAttributes;
    private ICache`3<string, QueueInfo, ITimeToLiveCacheValue`1<QueueInfo>> _cache;
    private CancellationToken _cancellationToken;
    private IAmazonSQS _client;
    private IDictionary`2<string, QueueInfo> _durableQueues;
    public QueueCache(IAmazonSQS client, CancellationToken cancellationToken);
    private static QueueCache();
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.QueueCache/<DisposeAsync>d__6")]
public sealed virtual ValueTask DisposeAsync();
    public Task`1<QueueInfo> Get(Queue queue);
    public Task`1<QueueInfo> GetByName(string entityName);
    public Task`1<bool> RemoveByName(string entityName);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.QueueCache/<CreateMissingQueue>d__10")]
private Task`1<QueueInfo> CreateMissingQueue(Queue queue);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.QueueCache/<GetExistingQueue>d__11")]
private Task`1<QueueInfo> GetExistingQueue(string queueName);
    [CompilerGeneratedAttribute]
private Task`1<QueueInfo> <GetByName>b__8_0(string queueName);
}
public class MassTransit.AmazonSqsTransport.QueueInfo : object {
    private Lazy`1<IBatcher`1<DeleteMessageBatchRequestEntry>> _batchDeleter;
    private Lazy`1<IBatcher`1<SendMessageBatchRequestEntry>> _batchSender;
    private IAmazonSQS _client;
    private SemaphoreSlim _updateSemaphore;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private string <EntityName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arn>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <SubscriptionArns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Existing>k__BackingField;
    public string EntityName { get; }
    public string Url { get; }
    public string Arn { get; }
    public IDictionary`2<string, string> Attributes { get; }
    public IList`1<string> SubscriptionArns { get; }
    public bool Existing { get; }
    public QueueInfo(string entityName, string url, IDictionary`2<string, string> attributes, IAmazonSQS client, CancellationToken cancellationToken, bool existing);
    [CompilerGeneratedAttribute]
public string get_EntityName();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public string get_Arn();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Attributes();
    [CompilerGeneratedAttribute]
public IList`1<string> get_SubscriptionArns();
    [CompilerGeneratedAttribute]
public bool get_Existing();
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.QueueInfo/<DisposeAsync>d__24")]
public sealed virtual ValueTask DisposeAsync();
    public Task Send(SendMessageBatchRequestEntry entry, CancellationToken cancellationToken);
    public Task Delete(string receiptHandle, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.QueueInfo/<UpdatePolicy>d__27")]
public Task`1<bool> UpdatePolicy(string sqsQueueArn, string topicArn, CancellationToken cancellationToken);
    private static bool QueueHasTopicPermission(Policy policy, string topicArn, string sqsQueueArn);
}
public class MassTransit.AmazonSqsTransport.QueueSendTransportContext : BaseSendTransportContext {
    private IPipe`1<ClientContext> _configureTopologyPipe;
    private ITransportSetHeaderAdapter`1<MessageAttributeValue> _headerAdapter;
    private IAmazonSqsHostConfiguration _hostConfiguration;
    private IClientContextSupervisor _supervisor;
    [CompilerGeneratedAttribute]
private string <EntityName>k__BackingField;
    public string EntityName { get; }
    public string ActivitySystem { get; }
    public QueueSendTransportContext(IAmazonSqsHostConfiguration hostConfiguration, ReceiveEndpointContext receiveEndpointContext, IClientContextSupervisor supervisor, IPipe`1<ClientContext> configureTopologyPipe, string entityName);
    [CompilerGeneratedAttribute]
public virtual string get_EntityName();
    public virtual string get_ActivitySystem();
    public sealed virtual Task Send(IPipe`1<ClientContext> pipe, CancellationToken cancellationToken);
    public sealed virtual void Probe(ProbeContext context);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.QueueSendTransportContext/<CreateSendContext>d__12`1")]
public virtual Task`1<SendContext`1<T>> CreateSendContext(T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    public virtual IEnumerable`1<IAgent> GetAgentHandles();
    public sealed virtual Task`1<SendContext`1<T>> CreateSendContext(ClientContext context, T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.QueueSendTransportContext/<Send>d__15`1")]
public sealed virtual Task Send(ClientContext transportContext, SendContext`1<T> sendContext);
}
public class MassTransit.AmazonSqsTransport.QueueSqsReceiveEndpointContext : BaseReceiveEndpointContext {
    private Recycle`1<IClientContextSupervisor> _clientContext;
    private IAmazonSqsReceiveEndpointConfiguration _configuration;
    private IAmazonSqsHostConfiguration _hostConfiguration;
    [CompilerGeneratedAttribute]
private BrokerTopology <BrokerTopology>k__BackingField;
    public BrokerTopology BrokerTopology { get; }
    public IClientContextSupervisor ClientContextSupervisor { get; }
    public QueueSqsReceiveEndpointContext(IAmazonSqsHostConfiguration hostConfiguration, IAmazonSqsReceiveEndpointConfiguration configuration, BrokerTopology brokerTopology);
    [CompilerGeneratedAttribute]
public sealed virtual BrokerTopology get_BrokerTopology();
    public sealed virtual IClientContextSupervisor get_ClientContextSupervisor();
    public virtual void AddSendAgent(IAgent agent);
    public virtual void AddConsumeAgent(IAgent agent);
    public virtual Exception ConvertException(Exception exception, string message);
    public virtual void Probe(ProbeContext context);
    protected virtual ISendTransportProvider CreateSendTransportProvider();
    protected virtual IPublishTransportProvider CreatePublishTransportProvider();
    [CompilerGeneratedAttribute]
private IClientContextSupervisor <.ctor>b__3_0();
}
public interface MassTransit.AmazonSqsTransport.ReceiveSettings {
    public int PrefetchCount { get; }
    public int ConcurrentMessageLimit { get; }
    public int ConcurrentDeliveryLimit { get; }
    public int WaitTimeSeconds { get; }
    public bool PurgeOnStartup { get; }
    public IDictionary`2<string, object> QueueAttributes { get; }
    public IDictionary`2<string, object> QueueSubscriptionAttributes { get; }
    public bool IsOrdered { get; }
    public int VisibilityTimeout { get; public set; }
    public int RedeliverVisibilityTimeout { get; public set; }
    public string QueueUrl { get; public set; }
    public abstract virtual int get_PrefetchCount();
    public abstract virtual int get_ConcurrentMessageLimit();
    public abstract virtual int get_ConcurrentDeliveryLimit();
    public abstract virtual int get_WaitTimeSeconds();
    public abstract virtual bool get_PurgeOnStartup();
    public abstract virtual IDictionary`2<string, object> get_QueueAttributes();
    public abstract virtual IDictionary`2<string, object> get_QueueSubscriptionAttributes();
    public abstract virtual bool get_IsOrdered();
    public abstract virtual int get_VisibilityTimeout();
    public abstract virtual void set_VisibilityTimeout(int value);
    public abstract virtual int get_RedeliverVisibilityTimeout();
    public abstract virtual void set_RedeliverVisibilityTimeout(int value);
    public abstract virtual string get_QueueUrl();
    public abstract virtual void set_QueueUrl(string value);
    public abstract virtual Uri GetInputAddress(Uri hostAddress);
}
public class MassTransit.AmazonSqsTransport.ScopeClientContext : ScopePipeContext {
    private ClientContext _context;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public CancellationToken CancellationToken { get; }
    public ConnectionContext ConnectionContext { get; }
    public ScopeClientContext(ClientContext context, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public virtual CancellationToken get_CancellationToken();
    public sealed virtual ConnectionContext get_ConnectionContext();
    public sealed virtual Task`1<TopicInfo> CreateTopic(Topic topic);
    public sealed virtual Task`1<QueueInfo> CreateQueue(Queue queue);
    public sealed virtual Task`1<bool> CreateQueueSubscription(Topic topic, Queue queue);
    public sealed virtual Task DeleteTopic(Topic topic);
    public sealed virtual Task DeleteQueue(Queue queue);
    public sealed virtual Task Publish(string topicName, PublishBatchRequestEntry request, CancellationToken cancellationToken);
    public sealed virtual Task SendMessage(string queueName, SendMessageBatchRequestEntry request, CancellationToken cancellationToken);
    public sealed virtual Task DeleteMessage(string queueUrl, string receiptHandle, CancellationToken cancellationToken);
    public sealed virtual Task PurgeQueue(string queueName, CancellationToken cancellationToken);
    public sealed virtual Task`1<IList`1<Message>> ReceiveMessages(string queueName, int messageLimit, int waitTime, CancellationToken cancellationToken);
    public sealed virtual Task`1<QueueInfo> GetQueueInfo(string queueName);
    public sealed virtual Task ChangeMessageVisibility(string queueUrl, string receiptHandle, int seconds);
}
public class MassTransit.AmazonSqsTransport.ScopeClientContextFactory : object {
    private IClientContextSupervisor _supervisor;
    public ScopeClientContextFactory(IClientContextSupervisor supervisor);
    private sealed virtual override IPipeContextAgent`1<ClientContext> MassTransit.Agents.IPipeContextFactory<MassTransit.AmazonSqsTransport.ClientContext>.CreateContext(ISupervisor supervisor);
    private sealed virtual override IActivePipeContextAgent`1<ClientContext> MassTransit.Agents.IPipeContextFactory<MassTransit.AmazonSqsTransport.ClientContext>.CreateActiveContext(ISupervisor supervisor, PipeContextHandle`1<ClientContext> context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.ScopeClientContextFactory/<CreateSharedModel>d__4")]
private static Task`1<ClientContext> CreateSharedModel(Task`1<ClientContext> context, CancellationToken cancellationToken);
    private void CreateClientContext(IAsyncPipeContextAgent`1<ClientContext> asyncContext, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static Task`1<ClientContext> <CreateClientContext>g__Create|5_0(ClientContext context, CancellationToken createCancellationToken);
}
public class MassTransit.AmazonSqsTransport.SendBatcher : Batcher`1<SendMessageBatchRequestEntry> {
    private CancellationToken _cancellationToken;
    private IAmazonSQS _client;
    private string _queueUrl;
    public SendBatcher(IAmazonSQS client, string queueUrl, CancellationToken cancellationToken);
    protected virtual int AddingEntry(SendMessageBatchRequestEntry entry, string entryId);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.SendBatcher/<SendBatch>d__5")]
protected virtual Task SendBatch(IList`1<BatchEntry`1<SendMessageBatchRequestEntry>> batch);
}
public interface MassTransit.AmazonSqsTransport.SendSettings {
    public abstract virtual BrokerTopology GetBrokerTopology();
}
public class MassTransit.AmazonSqsTransport.SharedClientContext : ProxyPipeContext {
    private ClientContext _context;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public CancellationToken CancellationToken { get; }
    public ConnectionContext ConnectionContext { get; }
    public SharedClientContext(ClientContext context, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public virtual CancellationToken get_CancellationToken();
    public sealed virtual ConnectionContext get_ConnectionContext();
    public sealed virtual Task`1<TopicInfo> CreateTopic(Topic topic);
    public sealed virtual Task`1<QueueInfo> CreateQueue(Queue queue);
    public sealed virtual Task`1<bool> CreateQueueSubscription(Topic topic, Queue queue);
    public sealed virtual Task DeleteTopic(Topic topic);
    public sealed virtual Task DeleteQueue(Queue queue);
    public sealed virtual Task Publish(string topicName, PublishBatchRequestEntry request, CancellationToken cancellationToken);
    public sealed virtual Task SendMessage(string queueName, SendMessageBatchRequestEntry request, CancellationToken cancellationToken);
    public sealed virtual Task DeleteMessage(string queueUrl, string receiptHandle, CancellationToken cancellationToken);
    public sealed virtual Task PurgeQueue(string queueName, CancellationToken cancellationToken);
    public sealed virtual Task`1<IList`1<Message>> ReceiveMessages(string queueName, int messageLimit, int waitTime, CancellationToken cancellationToken);
    public sealed virtual Task`1<QueueInfo> GetQueueInfo(string queueName);
    public sealed virtual Task ChangeMessageVisibility(string queueUrl, string receiptHandle, int seconds);
}
public class MassTransit.AmazonSqsTransport.SharedConnectionContext : ProxyPipeContext {
    private ConnectionContext _context;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public CancellationToken CancellationToken { get; }
    private IConnection MassTransit.AmazonSqsTransport.ConnectionContext.Connection { get; }
    public Uri HostAddress { get; }
    public IAmazonSqsBusTopology Topology { get; }
    public SharedConnectionContext(ConnectionContext context, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public virtual CancellationToken get_CancellationToken();
    private sealed virtual override IConnection MassTransit.AmazonSqsTransport.ConnectionContext.get_Connection();
    public sealed virtual Uri get_HostAddress();
    public sealed virtual IAmazonSqsBusTopology get_Topology();
    public sealed virtual Task`1<QueueInfo> GetQueue(Queue queue);
    public sealed virtual Task`1<QueueInfo> GetQueueByName(string name);
    public sealed virtual Task`1<bool> RemoveQueueByName(string name);
    public sealed virtual Task`1<TopicInfo> GetTopic(Topic topic);
    public sealed virtual Task`1<TopicInfo> GetTopicByName(string name);
    public sealed virtual Task`1<bool> RemoveTopicByName(string name);
    public sealed virtual ClientContext CreateClientContext(CancellationToken cancellationToken);
}
public class MassTransit.AmazonSqsTransport.SnsHeaderValueConverter : object {
    private AllowTransportHeader _allowTransportHeader;
    public SnsHeaderValueConverter(AllowTransportHeader allowTransportHeader);
    public sealed virtual bool TryConvert(HeaderValue headerValue, HeaderValue`1& result);
    public sealed virtual bool TryConvert(HeaderValue`1<T> headerValue, HeaderValue`1& result);
    private static HeaderValue`1<MessageAttributeValue> CreateMessageAttributeValue(HeaderValue`1<string> stringValue);
    private static bool AlwaysCopy(HeaderValue`1<string> headerValue);
}
public class MassTransit.AmazonSqsTransport.SqsDeadLetterTransport : SqsMoveTransport`1<DeadLetterSettings> {
    private TransportSetHeaderAdapter`1<MessageAttributeValue> _headerAdapter;
    public SqsDeadLetterTransport(string destination, TransportSetHeaderAdapter`1<MessageAttributeValue> headerAdapter, ConfigureAmazonSqsTopologyFilter`1<DeadLetterSettings> topologyFilter);
    public sealed virtual Task Send(ReceiveContext context, string reason);
}
public class MassTransit.AmazonSqsTransport.SqsErrorTransport : SqsMoveTransport`1<ErrorSettings> {
    private ITransportSetHeaderAdapter`1<MessageAttributeValue> _headerAdapter;
    public SqsErrorTransport(string destination, ITransportSetHeaderAdapter`1<MessageAttributeValue> headerAdapter, ConfigureAmazonSqsTopologyFilter`1<ErrorSettings> topologyFilter);
    public sealed virtual Task Send(ExceptionReceiveContext context);
}
public class MassTransit.AmazonSqsTransport.SqsHeaderValueConverter : object {
    private AllowTransportHeader _allowTransportHeader;
    public SqsHeaderValueConverter(AllowTransportHeader allowTransportHeader);
    public sealed virtual bool TryConvert(HeaderValue headerValue, HeaderValue`1& result);
    public sealed virtual bool TryConvert(HeaderValue`1<T> headerValue, HeaderValue`1& result);
    private static HeaderValue`1<MessageAttributeValue> CreateMessageAttributeValue(HeaderValue`1<string> stringValue);
    private static bool AlwaysCopy(HeaderValue`1<string> headerValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.AmazonSqsTransport.SqsMessageBody : StringMessageBody {
    private Message _message;
    private Nullable`1<JsonElement> _topicArn;
    [NullableAttribute("2")]
public string TopicArn { get; }
    public SqsMessageBody(Message message);
    [NullableContextAttribute("2")]
public string get_TopicArn();
    public sealed virtual Nullable`1<JsonElement> GetJsonElement(JsonSerializerOptions options);
}
public class MassTransit.AmazonSqsTransport.SqsMoveTransport`1 : object {
    private string _destination;
    private bool _isFifo;
    private ConfigureAmazonSqsTopologyFilter`1<TSettings> _topologyFilter;
    protected SqsMoveTransport`1(string destination, ConfigureAmazonSqsTopologyFilter`1<TSettings> topologyFilter);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.SqsMoveTransport`1/<Move>d__4")]
protected Task Move(ReceiveContext context, Action`2<SendMessageBatchRequestEntry, IDictionary`2<string, MessageAttributeValue>> preSend);
    private static void CopyReceivedMessageHeaders(AmazonSqsMessageContext context, IDictionary`2<string, MessageAttributeValue> attributes);
}
public interface MassTransit.AmazonSqsTransport.SqsReceiveEndpointContext {
    public BrokerTopology BrokerTopology { get; }
    public IClientContextSupervisor ClientContextSupervisor { get; }
    public abstract virtual BrokerTopology get_BrokerTopology();
    public abstract virtual IClientContextSupervisor get_ClientContextSupervisor();
}
public class MassTransit.AmazonSqsTransport.TopicCache : object {
    private ICache`3<string, TopicInfo, ITimeToLiveCacheValue`1<TopicInfo>> _cache;
    private CancellationToken _cancellationToken;
    private IAmazonSimpleNotificationService _client;
    private IDictionary`2<string, TopicInfo> _durableTopics;
    private Lazy`1<Task> _loadExistingTopics;
    private bool _topicsLoaded;
    public TopicCache(IAmazonSimpleNotificationService client, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.TopicCache/<DisposeAsync>d__7")]
public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.TopicCache/<Get>d__8")]
public Task`1<TopicInfo> Get(Topic topic);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.TopicCache/<GetByName>d__9")]
public Task`1<TopicInfo> GetByName(string entityName);
    public Task`1<bool> RemoveByName(string entityName);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.TopicCache/<CreateMissingTopic>d__11")]
private Task`1<TopicInfo> CreateMissingTopic(Topic topic);
    private Lazy`1<Task> ResetLoadExistingTopics();
    private Task LoadExistingTopics();
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.TopicCache/<LoadExistingTopicsLazy>d__14")]
private Task LoadExistingTopicsLazy(CancellationToken token);
    public void Clear();
    [CompilerGeneratedAttribute]
private Task <ResetLoadExistingTopics>b__12_0();
}
public class MassTransit.AmazonSqsTransport.TopicInfo : object {
    private Lazy`1<IBatcher`1<PublishBatchRequestEntry>> _batchPublisher;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private string <EntityName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Existing>k__BackingField;
    public string EntityName { get; }
    public string Arn { get; }
    public bool Existing { get; }
    public TopicInfo(string entityName, string arn, IAmazonSimpleNotificationService client, CancellationToken cancellationToken, bool existing);
    [CompilerGeneratedAttribute]
public string get_EntityName();
    [CompilerGeneratedAttribute]
public string get_Arn();
    [CompilerGeneratedAttribute]
public bool get_Existing();
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.TopicInfo/<DisposeAsync>d__12")]
public sealed virtual ValueTask DisposeAsync();
    public Task Publish(PublishBatchRequestEntry entry, CancellationToken cancellationToken);
}
public class MassTransit.AmazonSqsTransport.TopicSendTransportContext : BaseSendTransportContext {
    private IPipe`1<ClientContext> _configureTopologyPipe;
    private ITransportSetHeaderAdapter`1<MessageAttributeValue> _headerAdapter;
    private IAmazonSqsHostConfiguration _hostConfiguration;
    private IClientContextSupervisor _supervisor;
    [CompilerGeneratedAttribute]
private string <EntityName>k__BackingField;
    public string EntityName { get; }
    public string ActivitySystem { get; }
    public TopicSendTransportContext(IAmazonSqsHostConfiguration hostConfiguration, ReceiveEndpointContext receiveEndpointContext, IClientContextSupervisor supervisor, IPipe`1<ClientContext> configureTopologyPipe, string entityName);
    [CompilerGeneratedAttribute]
public virtual string get_EntityName();
    public virtual string get_ActivitySystem();
    public sealed virtual Task Send(IPipe`1<ClientContext> pipe, CancellationToken cancellationToken);
    public sealed virtual void Probe(ProbeContext context);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.TopicSendTransportContext/<CreateSendContext>d__12`1")]
public virtual Task`1<SendContext`1<T>> CreateSendContext(T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    public virtual IEnumerable`1<IAgent> GetAgentHandles();
    public sealed virtual Task`1<SendContext`1<T>> CreateSendContext(ClientContext context, T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.AmazonSqsTransport.TopicSendTransportContext/<Send>d__15`1")]
public sealed virtual Task Send(ClientContext transportContext, SendContext`1<T> sendContext);
}
public class MassTransit.AmazonSqsTransport.Topology.AmazonSnsTopicNameValidator : object {
    private static Regex _regex;
    public static IEntityNameValidator Validator { get; }
    private static AmazonSnsTopicNameValidator();
    public static IEntityNameValidator get_Validator();
    public sealed virtual void ThrowIfInvalidEntityName(string name);
    public sealed virtual bool IsValidEntityName(string name);
}
public class MassTransit.AmazonSqsTransport.Topology.AmazonSqsBrokerTopology : object {
    [CompilerGeneratedAttribute]
private Topic[] <Topics>k__BackingField;
    [CompilerGeneratedAttribute]
private Queue[] <Queues>k__BackingField;
    [CompilerGeneratedAttribute]
private QueueSubscription[] <QueueSubscriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private TopicSubscription[] <TopicSubscriptions>k__BackingField;
    public Topic[] Topics { get; }
    public Queue[] Queues { get; }
    public QueueSubscription[] QueueSubscriptions { get; }
    public TopicSubscription[] TopicSubscriptions { get; }
    public AmazonSqsBrokerTopology(IEnumerable`1<Topic> exchanges, IEnumerable`1<Queue> queues, IEnumerable`1<QueueSubscription> queueSubscriptions, IEnumerable`1<TopicSubscription> topicSubscriptions);
    [CompilerGeneratedAttribute]
public sealed virtual Topic[] get_Topics();
    [CompilerGeneratedAttribute]
public sealed virtual Queue[] get_Queues();
    [CompilerGeneratedAttribute]
public sealed virtual QueueSubscription[] get_QueueSubscriptions();
    [CompilerGeneratedAttribute]
public sealed virtual TopicSubscription[] get_TopicSubscriptions();
    private sealed virtual override void MassTransit.IProbeSite.Probe(ProbeContext context);
}
public class MassTransit.AmazonSqsTransport.Topology.AmazonSqsBusTopology : BusTopology {
    private IAmazonSqsTopologyConfiguration _configuration;
    private IAmazonSqsHostConfiguration _hostConfiguration;
    private IMessageNameFormatter _messageNameFormatter;
    private IAmazonSqsPublishTopology MassTransit.IAmazonSqsBusTopology.PublishTopology { get; }
    private IAmazonSqsSendTopology MassTransit.IAmazonSqsBusTopology.SendTopology { get; }
    public AmazonSqsBusTopology(IAmazonSqsHostConfiguration hostConfiguration, IMessageNameFormatter messageNameFormatter, IAmazonSqsTopologyConfiguration configuration);
    private sealed virtual override IAmazonSqsPublishTopology MassTransit.IAmazonSqsBusTopology.get_PublishTopology();
    private sealed virtual override IAmazonSqsSendTopology MassTransit.IAmazonSqsBusTopology.get_SendTopology();
    private sealed virtual override IAmazonSqsMessagePublishTopology`1<T> MassTransit.IAmazonSqsBusTopology.Publish();
    private sealed virtual override IAmazonSqsMessageSendTopology`1<T> MassTransit.IAmazonSqsBusTopology.Send();
    public sealed virtual SendSettings GetSendSettings(Uri address);
    public sealed virtual Uri GetDestinationAddress(string topicName, Action`1<IAmazonSqsTopicConfigurator> configure);
    public sealed virtual Uri GetDestinationAddress(Type messageType, Action`1<IAmazonSqsTopicConfigurator> configure);
}
public class MassTransit.AmazonSqsTransport.Topology.AmazonSqsConsumeTopology : ConsumeTopology {
    private IMessageTopology _messageTopology;
    private IAmazonSqsPublishTopology _publishTopology;
    private IList`1<IAmazonSqsConsumeTopologySpecification> _specifications;
    public AmazonSqsConsumeTopology(IMessageTopology messageTopology, IAmazonSqsPublishTopology publishTopology);
    private sealed virtual override IAmazonSqsMessageConsumeTopology`1<T> MassTransit.IAmazonSqsConsumeTopology.GetMessageTopology();
    public sealed virtual void AddSpecification(IAmazonSqsConsumeTopologySpecification specification);
    private sealed virtual override IAmazonSqsMessageConsumeTopologyConfigurator`1<T> MassTransit.IAmazonSqsConsumeTopologyConfigurator.GetMessageTopology();
    public sealed virtual void Apply(IReceiveEndpointBrokerTopologyBuilder builder);
    public sealed virtual void Bind(string topicName, Action`1<IAmazonSqsTopicSubscriptionConfigurator> configure);
    public virtual IEnumerable`1<ValidationResult> Validate();
    protected virtual IMessageConsumeTopologyConfigurator CreateMessageTopology();
}
public class MassTransit.AmazonSqsTransport.Topology.AmazonSqsEntityNameValidator : object {
    private static Regex _regex;
    public static IEntityNameValidator Validator { get; }
    private static AmazonSqsEntityNameValidator();
    public static IEntityNameValidator get_Validator();
    public sealed virtual void ThrowIfInvalidEntityName(string name);
    public sealed virtual bool IsValidEntityName(string name);
}
public class MassTransit.AmazonSqsTransport.Topology.AmazonSqsHostEqualityComparer : object {
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<AmazonSqsHostSettings> <Default>k__BackingField;
    public static IEqualityComparer`1<AmazonSqsHostSettings> Default { get; }
    private static AmazonSqsHostEqualityComparer();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<AmazonSqsHostSettings> get_Default();
    public sealed virtual bool Equals(AmazonSqsHostSettings x, AmazonSqsHostSettings y);
    public sealed virtual int GetHashCode(AmazonSqsHostSettings obj);
}
public class MassTransit.AmazonSqsTransport.Topology.AmazonSqsMessageConsumeTopology`1 : MessageConsumeTopology`1<TMessage> {
    private IAmazonSqsMessagePublishTopology`1<TMessage> _messagePublishTopology;
    private IMessageTopology`1<TMessage> _messageTopology;
    private IAmazonSqsPublishTopology _publishTopology;
    private IList`1<IAmazonSqsConsumeTopologySpecification> _specifications;
    public AmazonSqsMessageConsumeTopology`1(IMessageTopology`1<TMessage> messageTopology, IAmazonSqsPublishTopology publishTopology);
    public sealed virtual void Apply(IReceiveEndpointBrokerTopologyBuilder builder);
    public sealed virtual void Subscribe(Action`1<IAmazonSqsTopicSubscriptionConfigurator> configure);
    public virtual IEnumerable`1<ValidationResult> Validate();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.AmazonSqsTransport.Topology.AmazonSqsMessagePublishTopology`1 : MessagePublishTopology`1<TMessage> {
    private AmazonSqsTopicConfigurator _amazonSqsTopic;
    private IAmazonSqsPublishTopology _publishTopology;
    public Topic Topic { get; }
    unknown bool MassTransit.IAmazonSqsTopicConfigurator.Durable {private set; }
    unknown bool MassTransit.IAmazonSqsTopicConfigurator.AutoDelete {private set; }
    private IDictionary`2<string, object> MassTransit.IAmazonSqsTopicConfigurator.TopicAttributes { get; }
    private IDictionary`2<string, object> MassTransit.IAmazonSqsTopicConfigurator.TopicSubscriptionAttributes { get; }
    private IDictionary`2<string, string> MassTransit.IAmazonSqsTopicConfigurator.TopicTags { get; }
    public AmazonSqsMessagePublishTopology`1(IAmazonSqsPublishTopology publishTopology, IMessageTopology`1<TMessage> messageTopology);
    public sealed virtual Topic get_Topic();
    private sealed virtual override void MassTransit.IAmazonSqsTopicConfigurator.set_Durable(bool value);
    private sealed virtual override void MassTransit.IAmazonSqsTopicConfigurator.set_AutoDelete(bool value);
    private sealed virtual override IDictionary`2<string, object> MassTransit.IAmazonSqsTopicConfigurator.get_TopicAttributes();
    private sealed virtual override IDictionary`2<string, object> MassTransit.IAmazonSqsTopicConfigurator.get_TopicSubscriptionAttributes();
    private sealed virtual override IDictionary`2<string, string> MassTransit.IAmazonSqsTopicConfigurator.get_TopicTags();
    public sealed virtual AmazonSqsEndpointAddress GetEndpointAddress(Uri hostAddress);
    public virtual bool TryGetPublishAddress(Uri baseAddress, Uri& publishAddress);
    public sealed virtual void Apply(IPublishEndpointBrokerTopologyBuilder builder);
    public sealed virtual PublishSettings GetPublishSettings(Uri hostAddress);
    public sealed virtual BrokerTopology GetBrokerTopology();
}
public class MassTransit.AmazonSqsTransport.Topology.AmazonSqsMessageSendTopology`1 : MessageSendTopology`1<TMessage> {
}
public class MassTransit.AmazonSqsTransport.Topology.AmazonSqsPublishTopology : PublishTopology {
    private IMessageTopology _messageTopology;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <TopicAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <TopicSubscriptionAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <TopicTags>k__BackingField;
    public IDictionary`2<string, object> TopicAttributes { get; private set; }
    public IDictionary`2<string, object> TopicSubscriptionAttributes { get; private set; }
    public IDictionary`2<string, string> TopicTags { get; private set; }
    public AmazonSqsPublishTopology(IMessageTopology messageTopology);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_TopicAttributes();
    [CompilerGeneratedAttribute]
private void set_TopicAttributes(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_TopicSubscriptionAttributes();
    [CompilerGeneratedAttribute]
private void set_TopicSubscriptionAttributes(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_TopicTags();
    [CompilerGeneratedAttribute]
private void set_TopicTags(IDictionary`2<string, string> value);
    private sealed virtual override IAmazonSqsMessagePublishTopology`1<T> MassTransit.IAmazonSqsPublishTopology.GetMessageTopology();
    private sealed virtual override IAmazonSqsMessagePublishTopologyConfigurator MassTransit.IAmazonSqsPublishTopologyConfigurator.GetMessageTopology(Type messageType);
    public sealed virtual BrokerTopology GetPublishBrokerTopology();
    private sealed virtual override IAmazonSqsMessagePublishTopologyConfigurator`1<T> MassTransit.IAmazonSqsPublishTopologyConfigurator.GetMessageTopology();
    protected virtual IMessagePublishTopologyConfigurator CreateMessageTopology();
}
public class MassTransit.AmazonSqsTransport.Topology.AmazonSqsSendTopology : SendTopology {
    [CompilerGeneratedAttribute]
private IEntityNameValidator <EntityNameValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IAmazonSqsQueueConfigurator> <ConfigureErrorSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IAmazonSqsQueueConfigurator> <ConfigureDeadLetterSettings>k__BackingField;
    public IEntityNameValidator EntityNameValidator { get; }
    public Action`1<IAmazonSqsQueueConfigurator> ConfigureErrorSettings { get; public set; }
    public Action`1<IAmazonSqsQueueConfigurator> ConfigureDeadLetterSettings { get; public set; }
    public AmazonSqsSendTopology(IEntityNameValidator validator);
    [CompilerGeneratedAttribute]
public IEntityNameValidator get_EntityNameValidator();
    [CompilerGeneratedAttribute]
public Action`1<IAmazonSqsQueueConfigurator> get_ConfigureErrorSettings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConfigureErrorSettings(Action`1<IAmazonSqsQueueConfigurator> value);
    [CompilerGeneratedAttribute]
public Action`1<IAmazonSqsQueueConfigurator> get_ConfigureDeadLetterSettings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConfigureDeadLetterSettings(Action`1<IAmazonSqsQueueConfigurator> value);
    private sealed virtual override IAmazonSqsMessageSendTopologyConfigurator`1<T> MassTransit.IAmazonSqsSendTopology.GetMessageTopology();
    public sealed virtual SendSettings GetSendSettings(AmazonSqsEndpointAddress address);
    public sealed virtual ErrorSettings GetErrorSettings(ReceiveSettings settings);
    public sealed virtual DeadLetterSettings GetDeadLetterSettings(ReceiveSettings settings);
    protected virtual IMessageSendTopologyConfigurator CreateMessageTopology(Type type);
    private static string BuildEntityName(string entityName, Func`2<string, string> formatQueueName);
    [CompilerGeneratedAttribute]
private string <GetErrorSettings>b__14_0(string x);
    [CompilerGeneratedAttribute]
private string <GetDeadLetterSettings>b__15_0(string x);
}
public interface MassTransit.AmazonSqsTransport.Topology.BrokerTopology {
    public Topic[] Topics { get; }
    public Queue[] Queues { get; }
    public QueueSubscription[] QueueSubscriptions { get; }
    public TopicSubscription[] TopicSubscriptions { get; }
    public abstract virtual Topic[] get_Topics();
    public abstract virtual Queue[] get_Queues();
    public abstract virtual QueueSubscription[] get_QueueSubscriptions();
    public abstract virtual TopicSubscription[] get_TopicSubscriptions();
}
public abstract class MassTransit.AmazonSqsTransport.Topology.BrokerTopologyBuilder : object {
    protected NamedEntityCollection`2<QueueEntity, QueueHandle> Queues;
    protected NamedEntityCollection`2<QueueSubscriptionEntity, QueueSubscriptionHandle> QueueSubscriptions;
    protected NamedEntityCollection`2<TopicEntity, TopicHandle> Topics;
    protected NamedEntityCollection`2<TopicSubscriptionEntity, TopicSubscriptionHandle> TopicSubscriptions;
    private long _nextId;
    private long GetNextId();
    public sealed virtual TopicHandle CreateTopic(string name, bool durable, bool autoDelete, IDictionary`2<string, object> topicAttributes, IDictionary`2<string, object> topicSubscriptionAttributes, IDictionary`2<string, string> tags);
    public sealed virtual QueueHandle CreateQueue(string name, bool durable, bool autoDelete, IDictionary`2<string, object> queueAttributes, IDictionary`2<string, object> queueSubscriptionAttributes, IDictionary`2<string, string> tags);
    public sealed virtual QueueSubscriptionHandle CreateQueueSubscription(TopicHandle topic, QueueHandle queue);
    public sealed virtual TopicSubscriptionHandle CreateTopicSubscription(TopicHandle source, TopicHandle destination);
}
public interface MassTransit.AmazonSqsTransport.Topology.IBrokerTopologyBuilder {
    public abstract virtual TopicHandle CreateTopic(string name, bool durable, bool autoDelete, IDictionary`2<string, object> topicAttributes, IDictionary`2<string, object> topicSubscriptionAttributes, IDictionary`2<string, string> tags);
    public abstract virtual QueueHandle CreateQueue(string name, bool durable, bool autoDelete, IDictionary`2<string, object> queueAttributes, IDictionary`2<string, object> queueSubscriptionAttributes, IDictionary`2<string, string> tags);
    public abstract virtual QueueSubscriptionHandle CreateQueueSubscription(TopicHandle topic, QueueHandle queue);
    public abstract virtual TopicSubscriptionHandle CreateTopicSubscription(TopicHandle source, TopicHandle destination);
}
public interface MassTransit.AmazonSqsTransport.Topology.IPublishEndpointBrokerTopologyBuilder {
    public TopicHandle Topic { get; public set; }
    public abstract virtual TopicHandle get_Topic();
    public abstract virtual void set_Topic(TopicHandle value);
}
public interface MassTransit.AmazonSqsTransport.Topology.IReceiveEndpointBrokerTopologyBuilder {
    public QueueHandle Queue { get; }
    public abstract virtual QueueHandle get_Queue();
}
public interface MassTransit.AmazonSqsTransport.Topology.ISendEndpointBrokerTopologyBuilder {
    public QueueHandle Queue { get; }
    public abstract virtual QueueHandle get_Queue();
}
public class MassTransit.AmazonSqsTransport.Topology.PublishEndpointBrokerTopologyBuilder : BrokerTopologyBuilder {
    [CompilerGeneratedAttribute]
private TopicHandle <Topic>k__BackingField;
    public TopicHandle Topic { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual TopicHandle get_Topic();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Topic(TopicHandle value);
    public BrokerTopology BuildBrokerTopology();
}
public interface MassTransit.AmazonSqsTransport.Topology.Queue {
    public string EntityName { get; }
    public bool Durable { get; }
    public bool AutoDelete { get; }
    public IDictionary`2<string, object> QueueAttributes { get; }
    public IDictionary`2<string, object> QueueSubscriptionAttributes { get; }
    public IDictionary`2<string, string> QueueTags { get; }
    public abstract virtual string get_EntityName();
    public abstract virtual bool get_Durable();
    public abstract virtual bool get_AutoDelete();
    public abstract virtual IDictionary`2<string, object> get_QueueAttributes();
    public abstract virtual IDictionary`2<string, object> get_QueueSubscriptionAttributes();
    public abstract virtual IDictionary`2<string, string> get_QueueTags();
}
public class MassTransit.AmazonSqsTransport.Topology.QueueDeadLetterSettings : AmazonSqsQueueSubscriptionConfigurator {
    public QueueDeadLetterSettings(ReceiveSettings source, string queueName);
    public sealed virtual BrokerTopology GetBrokerTopology();
}
public class MassTransit.AmazonSqsTransport.Topology.QueueEntity : object {
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<QueueEntity> <NameComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<QueueEntity> <QueueComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Durable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoDelete>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <QueueAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <QueueSubscriptionAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <QueueTags>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    public static IEqualityComparer`1<QueueEntity> NameComparer { get; }
    public static IEqualityComparer`1<QueueEntity> QueueComparer { get; }
    public string EntityName { get; }
    public bool Durable { get; }
    public bool AutoDelete { get; }
    public IDictionary`2<string, object> QueueAttributes { get; }
    public IDictionary`2<string, object> QueueSubscriptionAttributes { get; }
    public IDictionary`2<string, string> QueueTags { get; }
    public long Id { get; }
    public Queue Queue { get; }
    public QueueEntity(long id, string name, bool durable, bool autoDelete, IDictionary`2<string, object> queueAttributes, IDictionary`2<string, object> queueSubscriptionAttributes, IDictionary`2<string, string> queueTags);
    private static QueueEntity();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<QueueEntity> get_NameComparer();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<QueueEntity> get_QueueComparer();
    [CompilerGeneratedAttribute]
public sealed virtual string get_EntityName();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Durable();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutoDelete();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_QueueAttributes();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_QueueSubscriptionAttributes();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_QueueTags();
    [CompilerGeneratedAttribute]
public sealed virtual long get_Id();
    public sealed virtual Queue get_Queue();
    public virtual string ToString();
}
public class MassTransit.AmazonSqsTransport.Topology.QueueErrorSettings : AmazonSqsQueueSubscriptionConfigurator {
    public QueueErrorSettings(ReceiveSettings source, string queueName);
    public sealed virtual BrokerTopology GetBrokerTopology();
}
public interface MassTransit.AmazonSqsTransport.Topology.QueueHandle {
    public Queue Queue { get; }
    public abstract virtual Queue get_Queue();
}
public class MassTransit.AmazonSqsTransport.Topology.QueueReceiveSettings : AmazonSqsQueueSubscriptionConfigurator {
    private IAmazonSqsEndpointConfiguration _configuration;
    [CompilerGeneratedAttribute]
private int <ConcurrentDeliveryLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WaitTimeSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PurgeOnStartup>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOrdered>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VisibilityTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RedeliverVisibilityTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueueUrl>k__BackingField;
    public int PrefetchCount { get; }
    public int ConcurrentMessageLimit { get; }
    public int ConcurrentDeliveryLimit { get; public set; }
    public int WaitTimeSeconds { get; public set; }
    public bool PurgeOnStartup { get; public set; }
    public bool IsOrdered { get; public set; }
    public int VisibilityTimeout { get; public set; }
    public int RedeliverVisibilityTimeout { get; public set; }
    public string QueueUrl { get; public set; }
    public QueueReceiveSettings(IAmazonSqsEndpointConfiguration configuration, string queueName, bool durable, bool autoDelete);
    public sealed virtual int get_PrefetchCount();
    public sealed virtual int get_ConcurrentMessageLimit();
    [CompilerGeneratedAttribute]
public sealed virtual int get_ConcurrentDeliveryLimit();
    [CompilerGeneratedAttribute]
public void set_ConcurrentDeliveryLimit(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_WaitTimeSeconds();
    [CompilerGeneratedAttribute]
public void set_WaitTimeSeconds(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PurgeOnStartup();
    [CompilerGeneratedAttribute]
public void set_PurgeOnStartup(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsOrdered();
    [CompilerGeneratedAttribute]
public void set_IsOrdered(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_VisibilityTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VisibilityTimeout(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_RedeliverVisibilityTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RedeliverVisibilityTimeout(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_QueueUrl();
    [CompilerGeneratedAttribute]
public sealed virtual void set_QueueUrl(string value);
    public sealed virtual Uri GetInputAddress(Uri hostAddress);
}
public class MassTransit.AmazonSqsTransport.Topology.QueueSendSettings : AmazonSqsQueueConfigurator {
    public QueueSendSettings(AmazonSqsEndpointAddress address);
    public Uri GetSendAddress(Uri hostAddress);
    public sealed virtual BrokerTopology GetBrokerTopology();
    [IteratorStateMachineAttribute("MassTransit.AmazonSqsTransport.Topology.QueueSendSettings/<GetSettingStrings>d__3")]
private IEnumerable`1<string> GetSettingStrings();
    public virtual string ToString();
}
public interface MassTransit.AmazonSqsTransport.Topology.QueueSubscription {
    public Topic Source { get; }
    public Queue Destination { get; }
    public abstract virtual Topic get_Source();
    public abstract virtual Queue get_Destination();
}
public class MassTransit.AmazonSqsTransport.Topology.QueueSubscriptionEntity : object {
    private QueueEntity _queue;
    private TopicEntity _topic;
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<QueueSubscriptionEntity> <NameComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<QueueSubscriptionEntity> <EntityComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    public static IEqualityComparer`1<QueueSubscriptionEntity> NameComparer { get; }
    public static IEqualityComparer`1<QueueSubscriptionEntity> EntityComparer { get; }
    public Topic Source { get; }
    public Queue Destination { get; }
    public long Id { get; }
    public QueueSubscription QueueSubscription { get; }
    public QueueSubscriptionEntity(long id, TopicEntity topic, QueueEntity queue);
    private static QueueSubscriptionEntity();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<QueueSubscriptionEntity> get_NameComparer();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<QueueSubscriptionEntity> get_EntityComparer();
    public sealed virtual Topic get_Source();
    public sealed virtual Queue get_Destination();
    [CompilerGeneratedAttribute]
public sealed virtual long get_Id();
    public sealed virtual QueueSubscription get_QueueSubscription();
    public virtual string ToString();
}
public interface MassTransit.AmazonSqsTransport.Topology.QueueSubscriptionHandle {
    public QueueSubscription QueueSubscription { get; }
    public abstract virtual QueueSubscription get_QueueSubscription();
}
public class MassTransit.AmazonSqsTransport.Topology.ReceiveEndpointBrokerTopologyBuilder : BrokerTopologyBuilder {
    [CompilerGeneratedAttribute]
private QueueHandle <Queue>k__BackingField;
    public QueueHandle Queue { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual QueueHandle get_Queue();
    [CompilerGeneratedAttribute]
public void set_Queue(QueueHandle value);
    public BrokerTopology BuildTopologyLayout();
}
public class MassTransit.AmazonSqsTransport.Topology.SendEndpointBrokerTopologyBuilder : BrokerTopologyBuilder {
    [CompilerGeneratedAttribute]
private QueueHandle <Queue>k__BackingField;
    public QueueHandle Queue { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual QueueHandle get_Queue();
    [CompilerGeneratedAttribute]
public void set_Queue(QueueHandle value);
    public BrokerTopology BuildBrokerTopology();
}
public interface MassTransit.AmazonSqsTransport.Topology.Topic {
    public string EntityName { get; }
    public bool Durable { get; }
    public bool AutoDelete { get; }
    public IDictionary`2<string, object> TopicAttributes { get; }
    public IDictionary`2<string, object> TopicSubscriptionAttributes { get; }
    public IDictionary`2<string, string> TopicTags { get; }
    public abstract virtual string get_EntityName();
    public abstract virtual bool get_Durable();
    public abstract virtual bool get_AutoDelete();
    public abstract virtual IDictionary`2<string, object> get_TopicAttributes();
    public abstract virtual IDictionary`2<string, object> get_TopicSubscriptionAttributes();
    public abstract virtual IDictionary`2<string, string> get_TopicTags();
}
public class MassTransit.AmazonSqsTransport.Topology.TopicEntity : object {
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<TopicEntity> <NameComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<TopicEntity> <EntityComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Durable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoDelete>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <TopicAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <TopicSubscriptionAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <TopicTags>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    public static IEqualityComparer`1<TopicEntity> NameComparer { get; }
    public static IEqualityComparer`1<TopicEntity> EntityComparer { get; }
    public string EntityName { get; }
    public bool Durable { get; }
    public bool AutoDelete { get; }
    public IDictionary`2<string, object> TopicAttributes { get; }
    public IDictionary`2<string, object> TopicSubscriptionAttributes { get; }
    public IDictionary`2<string, string> TopicTags { get; }
    public long Id { get; }
    public Topic Topic { get; }
    public TopicEntity(long id, string name, bool durable, bool autoDelete, IDictionary`2<string, object> topicAttributes, IDictionary`2<string, object> topicSubscriptionAttributes, IDictionary`2<string, string> topicTags);
    private static TopicEntity();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<TopicEntity> get_NameComparer();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<TopicEntity> get_EntityComparer();
    [CompilerGeneratedAttribute]
public sealed virtual string get_EntityName();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Durable();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutoDelete();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_TopicAttributes();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_TopicSubscriptionAttributes();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_TopicTags();
    [CompilerGeneratedAttribute]
public sealed virtual long get_Id();
    public sealed virtual Topic get_Topic();
    public virtual string ToString();
    private void EnsureRawDeliveryIsSet();
}
public interface MassTransit.AmazonSqsTransport.Topology.TopicHandle {
    public Topic Topic { get; }
    public abstract virtual Topic get_Topic();
}
public class MassTransit.AmazonSqsTransport.Topology.TopicPublishSettings : AmazonSqsTopicConfigurator {
    public TopicPublishSettings(AmazonSqsEndpointAddress address);
    public Uri GetSendAddress(Uri hostAddress);
    [IteratorStateMachineAttribute("MassTransit.AmazonSqsTransport.Topology.TopicPublishSettings/<GetSettingStrings>d__2")]
private IEnumerable`1<string> GetSettingStrings();
    public virtual string ToString();
}
public interface MassTransit.AmazonSqsTransport.Topology.TopicSubscription {
    public Topic Source { get; }
    public Topic Destination { get; }
    public abstract virtual Topic get_Source();
    public abstract virtual Topic get_Destination();
}
public class MassTransit.AmazonSqsTransport.Topology.TopicSubscriptionEntity : object {
    private TopicEntity _destination;
    private TopicEntity _source;
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<TopicSubscriptionEntity> <NameComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<TopicSubscriptionEntity> <EntityComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    public static IEqualityComparer`1<TopicSubscriptionEntity> NameComparer { get; }
    public static IEqualityComparer`1<TopicSubscriptionEntity> EntityComparer { get; }
    public Topic Source { get; }
    public Topic Destination { get; }
    public long Id { get; }
    public TopicSubscription TopicSubscription { get; }
    public TopicSubscriptionEntity(long id, TopicEntity source, TopicEntity destination);
    private static TopicSubscriptionEntity();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<TopicSubscriptionEntity> get_NameComparer();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<TopicSubscriptionEntity> get_EntityComparer();
    public sealed virtual Topic get_Source();
    public sealed virtual Topic get_Destination();
    [CompilerGeneratedAttribute]
public sealed virtual long get_Id();
    public sealed virtual TopicSubscription get_TopicSubscription();
    public virtual string ToString();
}
public interface MassTransit.AmazonSqsTransport.Topology.TopicSubscriptionHandle {
    public TopicSubscription TopicSubscription { get; }
    public abstract virtual TopicSubscription get_TopicSubscription();
}
public class MassTransit.AmazonSqsTransportConfigurationException : AmazonSqsTransportException {
    public AmazonSqsTransportConfigurationException(string message);
    public AmazonSqsTransportConfigurationException(string message, Exception innerException);
    protected AmazonSqsTransportConfigurationException(SerializationInfo info, StreamingContext context);
}
public class MassTransit.AmazonSqsTransportException : MassTransitException {
    public AmazonSqsTransportException(string message);
    public AmazonSqsTransportException(string message, Exception innerException);
    protected AmazonSqsTransportException(SerializationInfo info, StreamingContext context);
}
public class MassTransit.AmazonSqsTransportOptions : object {
    [CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecretKey>k__BackingField;
    public string Region { get; public set; }
    public string Scope { get; public set; }
    public string AccessKey { get; public set; }
    public string SecretKey { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Region();
    [CompilerGeneratedAttribute]
public void set_Region(string value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_AccessKey();
    [CompilerGeneratedAttribute]
public void set_AccessKey(string value);
    [CompilerGeneratedAttribute]
public string get_SecretKey();
    [CompilerGeneratedAttribute]
public void set_SecretKey(string value);
}
public interface MassTransit.IAmazonSqsBusFactoryConfigurator {
    [NullableAttribute("1")]
public IAmazonSqsSendTopologyConfigurator SendTopology { get; }
    [NullableAttribute("1")]
public IAmazonSqsPublishTopologyConfigurator PublishTopology { get; }
    [NullableContextAttribute("1")]
public abstract virtual IAmazonSqsSendTopologyConfigurator get_SendTopology();
    [NullableContextAttribute("1")]
public abstract virtual IAmazonSqsPublishTopologyConfigurator get_PublishTopology();
    [NullableContextAttribute("1")]
public abstract virtual void Send(Action`1<IAmazonSqsMessageSendTopologyConfigurator`1<T>> configureTopology);
    [NullableContextAttribute("1")]
public abstract virtual void Publish(Action`1<IAmazonSqsMessagePublishTopologyConfigurator`1<T>> configureTopology);
    [NullableContextAttribute("1")]
public abstract virtual void Publish(Type messageType, Action`1<IAmazonSqsMessagePublishTopologyConfigurator> configure);
    [NullableContextAttribute("1")]
public abstract virtual void OverrideDefaultBusEndpointQueueName(string value);
    [NullableContextAttribute("1")]
public abstract virtual void Host(AmazonSqsHostSettings settings);
}
public interface MassTransit.IAmazonSqsBusTopology {
    public IAmazonSqsPublishTopology PublishTopology { get; }
    public IAmazonSqsSendTopology SendTopology { get; }
    public abstract virtual IAmazonSqsPublishTopology get_PublishTopology();
    public abstract virtual IAmazonSqsSendTopology get_SendTopology();
    public abstract virtual Uri GetDestinationAddress(string topicName, Action`1<IAmazonSqsTopicConfigurator> configure);
    public abstract virtual Uri GetDestinationAddress(Type messageType, Action`1<IAmazonSqsTopicConfigurator> configure);
    public abstract virtual SendSettings GetSendSettings(Uri address);
    public abstract virtual IAmazonSqsMessagePublishTopology`1<T> Publish();
    public abstract virtual IAmazonSqsMessageSendTopology`1<T> Send();
}
public interface MassTransit.IAmazonSqsConsumeTopology {
    public abstract virtual IAmazonSqsMessageConsumeTopology`1<T> GetMessageTopology();
    public abstract virtual void Apply(IReceiveEndpointBrokerTopologyBuilder builder);
    public abstract virtual void Bind(string topicName, Action`1<IAmazonSqsTopicSubscriptionConfigurator> configure);
}
public interface MassTransit.IAmazonSqsConsumeTopologyConfigurator {
    public abstract virtual IAmazonSqsMessageConsumeTopologyConfigurator`1<T> GetMessageTopology();
    public abstract virtual void AddSpecification(IAmazonSqsConsumeTopologySpecification specification);
}
public interface MassTransit.IAmazonSqsConsumeTopologySpecification {
    public abstract virtual void Apply(IReceiveEndpointBrokerTopologyBuilder builder);
}
public interface MassTransit.IAmazonSqsHostConfigurator {
    public abstract virtual void AccessKey(string accessKey);
    public abstract virtual void SecretKey(string secretKey);
    public abstract virtual void Credentials(AWSCredentials credentials);
    public abstract virtual void Scope(string scope, bool scopeTopics);
    public abstract virtual void EnableScopedTopics();
    public abstract virtual void Config(AmazonSQSConfig config);
    public abstract virtual void Config(AmazonSimpleNotificationServiceConfig config);
    public abstract virtual void AllowTransportHeader(AllowTransportHeader allowTransportHeader);
}
public interface MassTransit.IAmazonSqsMessageConsumeTopology`1 {
}
public interface MassTransit.IAmazonSqsMessageConsumeTopologyConfigurator {
    public abstract virtual void Apply(IReceiveEndpointBrokerTopologyBuilder builder);
}
public interface MassTransit.IAmazonSqsMessageConsumeTopologyConfigurator`1 {
    public abstract virtual void Subscribe(Action`1<IAmazonSqsTopicSubscriptionConfigurator> configure);
}
public interface MassTransit.IAmazonSqsMessagePublishTopology {
    public abstract virtual void Apply(IPublishEndpointBrokerTopologyBuilder builder);
}
public interface MassTransit.IAmazonSqsMessagePublishTopology`1 {
    public Topic Topic { get; }
    public abstract virtual Topic get_Topic();
    public abstract virtual PublishSettings GetPublishSettings(Uri hostAddress);
    public abstract virtual BrokerTopology GetBrokerTopology();
}
public interface MassTransit.IAmazonSqsMessagePublishTopologyConfigurator {
}
public interface MassTransit.IAmazonSqsMessagePublishTopologyConfigurator`1 {
}
public interface MassTransit.IAmazonSqsMessageSendTopology`1 {
}
public interface MassTransit.IAmazonSqsMessageSendTopologyConfigurator {
}
public interface MassTransit.IAmazonSqsMessageSendTopologyConfigurator`1 {
}
public interface MassTransit.IAmazonSqsPublishTopology {
    public IDictionary`2<string, object> TopicAttributes { get; }
    public IDictionary`2<string, object> TopicSubscriptionAttributes { get; }
    public IDictionary`2<string, string> TopicTags { get; }
    public abstract virtual IDictionary`2<string, object> get_TopicAttributes();
    public abstract virtual IDictionary`2<string, object> get_TopicSubscriptionAttributes();
    public abstract virtual IDictionary`2<string, string> get_TopicTags();
    public abstract virtual IAmazonSqsMessagePublishTopology`1<T> GetMessageTopology();
    public abstract virtual BrokerTopology GetPublishBrokerTopology();
}
public interface MassTransit.IAmazonSqsPublishTopologyConfigurator {
    public abstract virtual IAmazonSqsMessagePublishTopologyConfigurator`1<T> GetMessageTopology();
    public abstract virtual IAmazonSqsMessagePublishTopologyConfigurator GetMessageTopology(Type messageType);
}
public interface MassTransit.IAmazonSqsQueueConfigurator {
    unknown bool Durable {public set; }
    unknown bool AutoDelete {public set; }
    public IDictionary`2<string, object> QueueAttributes { get; }
    public IDictionary`2<string, object> QueueSubscriptionAttributes { get; }
    public IDictionary`2<string, string> QueueTags { get; }
    public abstract virtual void set_Durable(bool value);
    public abstract virtual void set_AutoDelete(bool value);
    public abstract virtual IDictionary`2<string, object> get_QueueAttributes();
    public abstract virtual IDictionary`2<string, object> get_QueueSubscriptionAttributes();
    public abstract virtual IDictionary`2<string, string> get_QueueTags();
}
public interface MassTransit.IAmazonSqsQueueEndpointConfigurator {
    unknown ushort WaitTimeSeconds {public set; }
    unknown bool PurgeOnStartup {public set; }
    public abstract virtual void set_WaitTimeSeconds(ushort value);
    public abstract virtual void set_PurgeOnStartup(bool value);
}
public interface MassTransit.IAmazonSqsQueueSubscriptionConfigurator {
}
public interface MassTransit.IAmazonSqsReceiveEndpointConfigurator {
    unknown int RedeliverVisibilityTimeout {public set; }
    unknown int ConcurrentDeliveryLimit {public set; }
    public abstract virtual void set_RedeliverVisibilityTimeout(int value);
    public abstract virtual void set_ConcurrentDeliveryLimit(int value);
    public abstract virtual void Subscribe(Action`1<IAmazonSqsTopicSubscriptionConfigurator> callback);
    public abstract virtual void Subscribe(string topicName, Action`1<IAmazonSqsTopicSubscriptionConfigurator> callback);
    public abstract virtual void ConfigureClient(Action`1<IPipeConfigurator`1<ClientContext>> configure);
    public abstract virtual void ConfigureConnection(Action`1<IPipeConfigurator`1<ConnectionContext>> configure);
    public abstract virtual void DisableMessageOrdering();
}
public interface MassTransit.IAmazonSqsSendTopology {
    public abstract virtual IAmazonSqsMessageSendTopologyConfigurator`1<T> GetMessageTopology();
    public abstract virtual SendSettings GetSendSettings(AmazonSqsEndpointAddress address);
    public abstract virtual ErrorSettings GetErrorSettings(ReceiveSettings settings);
    public abstract virtual DeadLetterSettings GetDeadLetterSettings(ReceiveSettings settings);
}
public interface MassTransit.IAmazonSqsSendTopologyConfigurator {
    unknown Action`1<IAmazonSqsQueueConfigurator> ConfigureErrorSettings {public set; }
    unknown Action`1<IAmazonSqsQueueConfigurator> ConfigureDeadLetterSettings {public set; }
    public abstract virtual void set_ConfigureErrorSettings(Action`1<IAmazonSqsQueueConfigurator> value);
    public abstract virtual void set_ConfigureDeadLetterSettings(Action`1<IAmazonSqsQueueConfigurator> value);
}
public interface MassTransit.IAmazonSqsTopicConfigurator {
    unknown bool Durable {public set; }
    unknown bool AutoDelete {public set; }
    public IDictionary`2<string, object> TopicAttributes { get; }
    public IDictionary`2<string, object> TopicSubscriptionAttributes { get; }
    public IDictionary`2<string, string> TopicTags { get; }
    public abstract virtual void set_Durable(bool value);
    public abstract virtual void set_AutoDelete(bool value);
    public abstract virtual IDictionary`2<string, object> get_TopicAttributes();
    public abstract virtual IDictionary`2<string, object> get_TopicSubscriptionAttributes();
    public abstract virtual IDictionary`2<string, string> get_TopicTags();
    public abstract virtual AmazonSqsEndpointAddress GetEndpointAddress(Uri hostAddress);
}
public interface MassTransit.IAmazonSqsTopicSubscriptionConfigurator {
}
public class MassTransit.Testing.AmazonSqsTestHarness : BusTestHarness {
    private Uri _hostAddress;
    private Uri _inputQueueAddress;
    [CompilerGeneratedAttribute]
private string <AccessKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecretKey>k__BackingField;
    [CompilerGeneratedAttribute]
private AmazonSQSConfig <AmazonSqsConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private AmazonSimpleNotificationServiceConfig <AmazonSnsConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputQueueName>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IAmazonSqsBusFactoryConfigurator> OnConfigureAmazonSqsBus;
    [CompilerGeneratedAttribute]
private Action`1<IAmazonSqsReceiveEndpointConfigurator> OnConfigureAmazonSqsReceiveEndpoint;
    [CompilerGeneratedAttribute]
private Action`1<IAmazonSqsHostConfigurator> OnConfigureAmazonSqsHost;
    [CompilerGeneratedAttribute]
private Action`2<IAmazonSQS, IAmazonSimpleNotificationService> OnCleanupVirtualHost;
    public Uri HostAddress { get; public set; }
    public string AccessKey { get; }
    public string SecretKey { get; }
    public AmazonSQSConfig AmazonSqsConfig { get; private set; }
    public AmazonSimpleNotificationServiceConfig AmazonSnsConfig { get; private set; }
    public string InputQueueName { get; }
    public Uri InputQueueAddress { get; }
    public AmazonSqsTestHarness(string host, string accessKey, string secretKey);
    public Uri get_HostAddress();
    public void set_HostAddress(Uri value);
    [CompilerGeneratedAttribute]
public string get_AccessKey();
    [CompilerGeneratedAttribute]
public string get_SecretKey();
    [CompilerGeneratedAttribute]
public AmazonSQSConfig get_AmazonSqsConfig();
    [CompilerGeneratedAttribute]
private void set_AmazonSqsConfig(AmazonSQSConfig value);
    [CompilerGeneratedAttribute]
public AmazonSimpleNotificationServiceConfig get_AmazonSnsConfig();
    [CompilerGeneratedAttribute]
private void set_AmazonSnsConfig(AmazonSimpleNotificationServiceConfig value);
    [CompilerGeneratedAttribute]
public virtual string get_InputQueueName();
    public virtual Uri get_InputQueueAddress();
    [CompilerGeneratedAttribute]
public void add_OnConfigureAmazonSqsBus(Action`1<IAmazonSqsBusFactoryConfigurator> value);
    [CompilerGeneratedAttribute]
public void remove_OnConfigureAmazonSqsBus(Action`1<IAmazonSqsBusFactoryConfigurator> value);
    [CompilerGeneratedAttribute]
public void add_OnConfigureAmazonSqsReceiveEndpoint(Action`1<IAmazonSqsReceiveEndpointConfigurator> value);
    [CompilerGeneratedAttribute]
public void remove_OnConfigureAmazonSqsReceiveEndpoint(Action`1<IAmazonSqsReceiveEndpointConfigurator> value);
    [CompilerGeneratedAttribute]
public void add_OnConfigureAmazonSqsHost(Action`1<IAmazonSqsHostConfigurator> value);
    [CompilerGeneratedAttribute]
public void remove_OnConfigureAmazonSqsHost(Action`1<IAmazonSqsHostConfigurator> value);
    [CompilerGeneratedAttribute]
public void add_OnCleanupVirtualHost(Action`2<IAmazonSQS, IAmazonSimpleNotificationService> value);
    [CompilerGeneratedAttribute]
public void remove_OnCleanupVirtualHost(Action`2<IAmazonSQS, IAmazonSimpleNotificationService> value);
    protected virtual void ConfigureAmazonSqsBus(IAmazonSqsBusFactoryConfigurator configurator);
    protected virtual void ConfigureAmazonSqsReceiveEndpoint(IAmazonSqsReceiveEndpointConfigurator configurator);
    protected virtual void ConfigureAmazonSqsHost(IAmazonSqsHostConfigurator configurator);
    protected virtual void CleanupVirtualHost(IAmazonSQS amazonSqs, IAmazonSimpleNotificationService amazonSns);
    protected virtual void ConfigureHost(IAmazonSqsBusFactoryConfigurator configurator);
    public AmazonSqsHostSettings GetHostSettings();
    protected virtual IBusControl CreateBus();
    private void ConfigureHostSettings(IAmazonSqsHostConfigurator configurator);
    private void CleanUpVirtualHost();
    public void CleanUpQueue(IAmazonSQS amazonSqs, string queueName);
    [CompilerGeneratedAttribute]
private void <ConfigureHost>b__42_0(IAmazonSqsHostConfigurator h);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <CreateBus>b__44_0(IAmazonSqsBusFactoryConfigurator x);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <CreateBus>b__44_1(IAmazonSqsReceiveEndpointConfigurator e);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
