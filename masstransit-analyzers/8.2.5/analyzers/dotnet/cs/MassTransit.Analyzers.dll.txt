[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Analyzers.AsyncMethodAnalyzer : DiagnosticAnalyzer {
    public static string MissingAwaitRuleId;
    private static string Category;
    private static DiagnosticDescriptor MissingAwaitRule;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static AsyncMethodAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeNode(SyntaxNodeAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Analyzers.CancellationTokenOverloadMethodAnalyzer : DiagnosticAnalyzer {
    public static string CancellationTokenOverloadMethodRuleId;
    private static string Category;
    internal static string ParameterIndex;
    internal static string ParameterName;
    internal static string CancellationTokens;
    private static DiagnosticDescriptor CancellationTokenOverloadMethodRule;
    private ConcurrentDictionary`2<ISymbol, IEnumerable`1<ISymbol>> _membersByType;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static CancellationTokenOverloadMethodAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private void AnalyzeCompilationStart(CompilationStartAnalysisContext context);
    private static bool IsConsumeContextCall(IInvocationOperation operation, Compilation compilation, ISymbol consumeContextTypeSymbol, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
private static bool TryGetInterface(ITypeSymbol symbol, ISymbol expectedSymbol, ITypeSymbol& result);
    private static bool HasAnOverloadWithCancellationToken(IInvocationOperation operation, ITypeSymbol cancellationTokenSymbol, ISymbol cancellationTokenSourceSymbol, Int32& parameterIndex, String& parameterName);
    private static IMethodSymbol FindOverloadWithAdditionalParameterOfType(IMethodSymbol methodSymbol, ITypeSymbol[] additionalParameterTypes);
    private static bool HasSimilarParameters(IMethodSymbol methodSymbol, IMethodSymbol otherMethod, ITypeSymbol[] additionalParameterTypes);
    private static SyntaxNode GetInvocationMethodNameNode(SyntaxNode invocationNode);
    private static ImmutableArray`1<INamedTypeSymbol> GetTypesByMetadataName(Compilation compilation, string typeMetadataName);
    private static INamedTypeSymbol GetBestTypeByMetadataName(Compilation compilation, string fullyQualifiedMetadataName);
    private static SymbolVisibility GetResultantVisibility(ISymbol symbol);
    private String[] FindCancellationTokens(IOperation operation, INamedTypeSymbol cancellationTokenSymbol, INamedTypeSymbol pipeContextSymbol, CancellationToken cancellationToken);
    private IEnumerable`1<ISymbol> GetMembers(ITypeSymbol symbol, ISymbol cancellationTokenSymbol, ISymbol pipeContextSymbol);
    private static HashSet`1<ISymbol> GetPipeContextMembers(ITypeSymbol symbol, ISymbol pipeContextSymbol);
    [CompilerGeneratedAttribute]
internal static bool <HasAnOverloadWithCancellationToken>g__IsArgumentImplicitlyDeclared|13_0(IInvocationOperation invocationOperation, ISymbol cancellationTokenSymbol, Int32& parameterIndex, String& parameterName);
    [CompilerGeneratedAttribute]
internal static bool <HasAnOverloadWithCancellationToken>g__IsValid|13_1(IArgumentOperation arg, ISymbol cancellationTokenSymbol);
    [CompilerGeneratedAttribute]
internal static string <FindCancellationTokens>g__ComputeFullPath|20_2(string prefix, ISymbol symbols);
    [CompilerGeneratedAttribute]
internal static bool <FindCancellationTokens>g__IsSymbolAccessibleFromOperation|20_3(ISymbol symbol, IOperation operation);
    [CompilerGeneratedAttribute]
internal static bool <GetPipeContextMembers>g__Filter|22_0(ISymbol symbol);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class MassTransit.Analyzers.CancellationTokenOverloadMethodFixer : CodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("MassTransit.Analyzers.CancellationTokenOverloadMethodFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("MassTransit.Analyzers.CancellationTokenOverloadMethodFixer/<FixInvocation>d__4")]
private static Task`1<Document> FixInvocation(Document document, InvocationExpressionSyntax nodeToFix, int index, string parameterName, string cancellationTokenExpression, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class MassTransit.Analyzers.CommonExpressions : object {
    private static IReadOnlyDictionary`2<string, int> _producerMethods;
    private static string _taskNamespace;
    private static CommonExpressions();
    private static IReadOnlyDictionary`2<string, int> InitializeProducerMethods();
    [ExtensionAttribute]
public static bool IsProducerMethod(IMethodSymbol method, Int32& index);
    [ExtensionAttribute]
public static bool IsActivator(ArgumentSyntax argumentSyntax, SemanticModel semanticModel, ITypeSymbol& typeArgument);
    [ExtensionAttribute]
public static bool HasMessageContract(ITypeSymbol typeArgument, ITypeSymbol& contractType);
    [ExtensionAttribute]
public static bool IsImmutableArray(ITypeSymbol type, ITypeSymbol& typeArgument);
    [ExtensionAttribute]
public static bool IsCollection(ITypeSymbol type, ITypeSymbol& typeArgument);
    [ExtensionAttribute]
public static bool IsEnumerable(ITypeSymbol type, ITypeSymbol& typeArgument);
    [ExtensionAttribute]
public static bool IsList(ITypeSymbol type, ITypeSymbol& typeArgument);
    [ExtensionAttribute]
public static List`1<IPropertySymbol> GetContractProperties(ITypeSymbol contractType);
    [ExtensionAttribute]
public static bool IsDictionary(ITypeSymbol type, ITypeSymbol& keyType, ITypeSymbol& valueType);
    [ExtensionAttribute]
public static bool IsNullable(ITypeSymbol type, ITypeSymbol& typeArgument);
    [ExtensionAttribute]
public static bool IsArray(ITypeSymbol type, ITypeSymbol& elementType);
    [ExtensionAttribute]
public static bool IsInVar(ITypeSymbol type, ITypeSymbol& inVarType);
    [ExtensionAttribute]
public static bool ReturnsTask(IMethodSymbol method);
    [ExtensionAttribute]
public static IEnumerable`1<INamedTypeSymbol> GetAllInterfaces(ITypeSymbol type);
    [IteratorStateMachineAttribute("MassTransit.Analyzers.CommonExpressions/<GetAllTypes>d__17")]
[ExtensionAttribute]
public static IEnumerable`1<ITypeSymbol> GetAllTypes(ITypeSymbol type);
    [ExtensionAttribute]
public static bool IsClassOrInterface(TypeKind typeKind);
    [ExtensionAttribute]
public static bool ImplementsInterface(ITypeSymbol symbol, ITypeSymbol type);
    [ExtensionAttribute]
public static bool InheritsFromType(ITypeSymbol symbol, ITypeSymbol type);
    [ExtensionAttribute]
public static bool ImplementsType(ITypeSymbol type, ITypeSymbol otherType);
}
internal class MassTransit.Analyzers.Helpers.NodeList`1 : object {
    private IList`1<HashSet`1<int>> _nodes;
    private NodeTable`1<T> _nodeTable;
    public NodeList`1(int capacity);
    public void Add(T key, T[] values);
    public bool Contains(T key, T value);
    private int Index(T key);
}
[ExtensionAttribute]
internal static class MassTransit.Analyzers.Helpers.NodeListExtensions : object {
    [ExtensionAttribute]
public static void Add(NodeList`1<ITypeSymbol> table, SemanticModel semanticModel, ITypeSymbol symbol, SpecialType[] types);
    [ExtensionAttribute]
public static void Add(NodeList`1<ITypeSymbol> table, SemanticModel semanticModel, SpecialType specialType, SpecialType[] types);
    [ExtensionAttribute]
public static void Add(NodeList`1<ITypeSymbol> table, SemanticModel semanticModel, SpecialType specialType, ITypeSymbol[] typeSymbols);
}
[DefaultMemberAttribute("Item")]
internal class MassTransit.Analyzers.Helpers.NodeTable`1 : object {
    private ConcurrentDictionary`2<T, int> _nodes;
    private int _count;
    public int Item { get; }
    public NodeTable`1(int capacity);
    public int get_Item(T key);
    [CompilerGeneratedAttribute]
private int <get_Item>b__4_0(T k);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class MassTransit.Analyzers.Helpers.OperationExtensions : object {
    [ExtensionAttribute]
public static ITypeSymbol GetReceiverType(IInvocationOperation invocation, Compilation compilation, bool beforeConversion, CancellationToken cancellationToken);
    private static ITypeSymbol GetReceiverType(SyntaxNode receiverSyntax, Compilation compilation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static List`1<NameAndType> GetParameters(IOperation operation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool IsStaticMember(IOperation operation, CancellationToken cancellationToken);
}
public class MassTransit.Analyzers.Helpers.TypeConversionHelper : object {
    private SemanticModel _semanticModel;
    private NodeList`1<ITypeSymbol> _typeSymbols;
    private INamedTypeSymbol _taskTypeSymbol;
    public TypeConversionHelper(SemanticModel semanticModel);
    public bool CanConvert(Type type, ITypeSymbol sourceSymbol);
    public bool CanConvert(ITypeSymbol symbol, ITypeSymbol sourceSymbol);
    private static bool IsTask(ITypeSymbol symbol, ITypeSymbol& result);
    public static bool IsMessageData(ITypeSymbol symbol, ITypeSymbol& result);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.Analyzers.MessageContractAnalyzer : DiagnosticAnalyzer {
    public static string StructurallyCompatibleRuleId;
    public static string ValidMessageContractStructureRuleId;
    public static string MissingPropertiesRuleId;
    private static string Category;
    private static DiagnosticDescriptor StructurallyCompatibleRule;
    private static DiagnosticDescriptor ValidMessageContractStructureRule;
    private static DiagnosticDescriptor MissingPropertiesRule;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static MessageContractAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private void AnalyzeAnonymousObjectCreationNode(SyntaxNodeAnalysisContext context);
    private static bool TypesAreStructurallyCompatible(TypeConversionHelper typeConverterHelper, ITypeSymbol contractType, ITypeSymbol inputType, string path, ICollection`1<string> incompatibleProperties);
    private static bool PropertyTypesAreStructurallyCompatible(TypeConversionHelper typeConverterHelper, IPropertySymbol contractProperty, IPropertySymbol inputProperty, string path, ICollection`1<string> incompatibleProperties);
    private static Nullable`1<bool> AnonymousTypeAndInterfaceAreStructurallyCompatible(TypeConversionHelper typeConverterHelper, ITypeSymbol contractPropertyType, ITypeSymbol inputPropertyType, string path, ICollection`1<string> incompatibleProperties);
    private static Nullable`1<bool> EnumerableTypesAreStructurallyCompatible(TypeConversionHelper typeConverterHelper, ITypeSymbol contractPropertyType, ITypeSymbol inputPropertyType, string path, ICollection`1<string> incompatibleProperties);
    private static bool ElementTypesAreStructurallyCompatible(TypeConversionHelper typeConverterHelper, ITypeSymbol contractElementType, ITypeSymbol inputElementType, string path, ICollection`1<string> incompatibleProperties);
    private static Nullable`1<bool> DictionaryTypesAreStructurallyCompatible(TypeConversionHelper typeConverterHelper, ITypeSymbol contractPropertyType, ITypeSymbol inputPropertyType, string path, ICollection`1<string> incompatibleProperties);
    private static bool KeyValueTypesAreStructurallyCompatible(TypeConversionHelper typeConverterHelper, ITypeSymbol contractKeyType, ITypeSymbol contractValueType, ITypeSymbol inputKeyType, ITypeSymbol inputValueType, string path, ICollection`1<string> incompatibleProperties);
    private static bool IsHeaderProperty(TypeConversionHelper typeConverterHelper, IPropertySymbol messageProperty);
    private static bool HasMissingProperties(ITypeSymbol inputType, ITypeSymbol contractType, string path, IEnumerable`1<ITypeSymbol> symbolPath, ICollection`1<string> missingProperties);
    private static bool HasMissingProperties(IPropertySymbol inputProperty, IPropertySymbol contractProperty, string path, IEnumerable`1<ITypeSymbol> symbolPath, ICollection`1<string> missingProperties);
    private static Nullable`1<bool> EnumerableTypeHasMissingProperties(IPropertySymbol inputProperty, IPropertySymbol contractProperty, string path, IEnumerable`1<ITypeSymbol> symbolPath, ICollection`1<string> missingProperties);
    private static Nullable`1<bool> AnonymousTypeHasMissingProperties(IPropertySymbol inputProperty, IPropertySymbol contractProperty, string path, IEnumerable`1<ITypeSymbol> symbolPath, ICollection`1<string> missingProperties);
    private static List`1<IPropertySymbol> GetInputProperties(ITypeSymbol inputType);
    private static string Append(string path, string propertyName);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class MassTransit.Analyzers.MessageContractCodeFixProvider : CodeFixProvider {
    private static string Title;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("MassTransit.Analyzers.MessageContractCodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("MassTransit.Analyzers.MessageContractCodeFixProvider/<AddMissingProperties>d__5")]
private static Task`1<Document> AddMissingProperties(Document document, AnonymousObjectCreationExpressionSyntax anonymousObject, string fullType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.Analyzers.MessageContractCodeFixProvider/<FindAnonymousTypesWithMessageContractsInTree>d__6")]
private static Task FindAnonymousTypesWithMessageContractsInTree(IDictionary`2<AnonymousObjectCreationExpressionSyntax, ITypeSymbol> dictionary, AnonymousObjectCreationExpressionSyntax anonymousObject, ITypeSymbol contractType, SemanticModel semanticModel);
    [AsyncStateMachineAttribute("MassTransit.Analyzers.MessageContractCodeFixProvider/<FindAnonymousTypesWithMessageContractsInTree>d__7")]
private static Task FindAnonymousTypesWithMessageContractsInTree(IDictionary`2<AnonymousObjectCreationExpressionSyntax, ITypeSymbol> dictionary, AnonymousObjectMemberDeclaratorSyntax initializer, IPropertySymbol contractProperty, SemanticModel semanticModel);
    [AsyncStateMachineAttribute("MassTransit.Analyzers.MessageContractCodeFixProvider/<FindAnonymousTypesWithMessageContractsInTree>d__8")]
private static Task FindAnonymousTypesWithMessageContractsInTree(IDictionary`2<AnonymousObjectCreationExpressionSyntax, ITypeSymbol> dictionary, ImplicitArrayCreationExpressionSyntax implicitArrayCreationExpressionSyntax, ITypeSymbol contractElementType, SemanticModel semanticModel);
    [AsyncStateMachineAttribute("MassTransit.Analyzers.MessageContractCodeFixProvider/<FindAnonymousTypesWithMessageContractsInTree>d__9")]
private static Task FindAnonymousTypesWithMessageContractsInTree(IDictionary`2<AnonymousObjectCreationExpressionSyntax, ITypeSymbol> dictionary, ITypeSymbol methodReturnTypeArgument, ITypeSymbol contractElementType, SemanticModel semanticModel);
    private static string GetName(AnonymousObjectMemberDeclaratorSyntax initializer);
    private static SyntaxNode AddMissingProperties(SyntaxNode root, IDictionary`2<AnonymousObjectCreationExpressionSyntax, ITypeSymbol> dictionary);
    private static SyntaxNode AddMissingProperties(SyntaxNode root, AnonymousObjectCreationExpressionSyntax anonymousObject, ITypeSymbol contractType);
    private static AnonymousObjectMemberDeclaratorSyntax[] CreateProperties(ITypeSymbol contractType, IEnumerable`1<ITypeSymbol> path);
    private static AnonymousObjectMemberDeclaratorSyntax CreateProperty(IPropertySymbol contractProperty, IEnumerable`1<ITypeSymbol> path);
    private static ExpressionSyntax CreateEmptyArray(ITypeSymbol type);
    private static ImplicitArrayCreationExpressionSyntax CreateImplicitArray(ITypeSymbol type, IEnumerable`1<ITypeSymbol> path);
    private static AnonymousObjectCreationExpressionSyntax CreateAnonymousObject(ITypeSymbol type, IEnumerable`1<ITypeSymbol> path);
    private static DefaultExpressionSyntax CreateDefault(ITypeSymbol type);
    private static DefaultExpressionSyntax CreateDefaultNullable(ITypeSymbol type);
}
internal class MassTransit.Analyzers.PropertyNameEqualityComparer : object {
    public static PropertyNameEqualityComparer Instance;
    private static PropertyNameEqualityComparer();
    public sealed virtual bool Equals(IPropertySymbol x, IPropertySymbol y);
    public sealed virtual int GetHashCode(IPropertySymbol obj);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
