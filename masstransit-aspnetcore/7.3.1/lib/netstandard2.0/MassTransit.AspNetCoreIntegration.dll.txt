public class MassTransit.AspNetCoreIntegration.BusHostedService : object {
    private IBusControl _bus;
    private Nullable`1<TimeSpan> _startTimeout;
    private Nullable`1<TimeSpan> _stopTimeout;
    private bool _waitUntilStarted;
    private Task`1<BusHandle> _startTask;
    private bool _stopped;
    public BusHostedService(IBusControl bus, bool waitUntilStarted, Nullable`1<TimeSpan> startTimeout, Nullable`1<TimeSpan> stopTimeout);
    public sealed virtual void Dispose();
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.AspNetCoreIntegration.BusHostedService/<StopAsync>d__9")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
}
public class MassTransit.AspNetCoreIntegration.HealthChecks.BusHealthCheck : object {
    private IBusInstance _busInstance;
    public BusHealthCheck(IBusInstance busInstance);
    private sealed virtual override Task`1<HealthCheckResult> Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck.CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
}
public class MassTransit.AspNetCoreIntegration.HealthChecks.ConfigureBusHealthCheckServiceOptions : object {
    private IEnumerable`1<IBusInstance> _busInstances;
    private String[] _tags;
    public ConfigureBusHealthCheckServiceOptions(IEnumerable`1<IBusInstance> busInstances, String[] tags);
    public sealed virtual void Configure(HealthCheckServiceOptions options);
}
public class MassTransit.AspNetCoreIntegration.HealthChecks.ReceiveEndpointHealthCheck : object {
    private ConcurrentDictionary`2<Uri, EndpointStatus> _endpoints;
    private sealed virtual override Task`1<HealthCheckResult> Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck.CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
    public sealed virtual Task Ready(ReceiveEndpointReady ready);
    public sealed virtual Task Stopping(ReceiveEndpointStopping stopping);
    public sealed virtual Task Completed(ReceiveEndpointCompleted completed);
    public sealed virtual Task Faulted(ReceiveEndpointFaulted faulted);
    private EndpointStatus GetEndpoint(Uri inputAddress);
}
public class MassTransit.AspNetCoreIntegration.MassTransitHostedService : object {
    private IBusDepot _depot;
    private Nullable`1<TimeSpan> _startTimeout;
    private Nullable`1<TimeSpan> _stopTimeout;
    private bool _waitUntilStarted;
    private Task _startTask;
    private bool _stopped;
    public MassTransitHostedService(IBusDepot depot, bool waitUntilStarted, Nullable`1<TimeSpan> startTimeout, Nullable`1<TimeSpan> stopTimeout);
    public sealed virtual void Dispose();
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.AspNetCoreIntegration.MassTransitHostedService/<StopAsync>d__9")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private Task <Dispose>b__7_0();
}
[ExtensionAttribute]
public static class MassTransit.HostedServiceConfigurationExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddMassTransitHostedService(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddMassTransitHostedService(IServiceCollection services, bool waitUntilStarted);
    [ExtensionAttribute]
public static IServiceCollection AddMassTransitHostedService(IServiceCollection services, bool waitUntilStarted, Nullable`1<TimeSpan> startTimeout, Nullable`1<TimeSpan> stopTimeout);
    [ExtensionAttribute]
public static IServiceCollection AddMassTransitHostedService(IServiceCollection services, IBusControl bus);
    [ExtensionAttribute]
public static IServiceCollection AddMassTransitHostedService(IServiceCollection services, IBusControl bus, bool waitUntilStarted);
    [ExtensionAttribute]
public static IServiceCollection AddMassTransitHostedService(IServiceCollection services, IBusControl bus, bool waitUntilStarted, Nullable`1<TimeSpan> startTimeout, Nullable`1<TimeSpan> stopTimeout);
    private static void AddHealthChecks(IServiceCollection services);
}
