[ExtensionAttribute]
public static class MassTransit.AutofacConsumerRegistrationExtensions : object {
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> RegisterConsumers(ContainerBuilder builder, Assembly[] consumerAssemblies);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> RegisterSagas(ContainerBuilder builder, Assembly[] sagaAssemblies);
    [ExtensionAttribute]
public static void RegisterInMemorySagaRepository(ContainerBuilder builder);
}
[ExtensionAttribute]
public static class MassTransit.AutofacExtensions : object {
    [ExtensionAttribute]
public static void UseLifetimeScope(IPipeConfigurator`1<ConsumeContext> configurator, ILifetimeScope lifetimeScope, string name, Action`2<ContainerBuilder, ConsumeContext> configureScope);
    [ExtensionAttribute]
public static void UseMessageLifetimeScope(IConsumePipeConfigurator configurator, ILifetimeScope lifetimeScope, string name, Action`2<ContainerBuilder, ConsumeContext> configureScope);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<ILifetimeScopeIdAccessor`2<TInput, T>, ConcreteReflectionActivatorData, SingleRegistrationStyle> RegisterLifetimeScopeIdAccessor(ContainerBuilder builder, Expression`1<Func`2<TInput, T>> propertyExpression);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<ILifetimeScopeRegistry`1<string>, ConcreteReflectionActivatorData, SingleRegistrationStyle> RegisterLifetimeScopeRegistry(ContainerBuilder builder, object scopeTag);
    [ExtensionAttribute]
public static IRequestClient`1<T> CreateRequestClient(ILifetimeScope scope, RequestTimeout timeout);
    [ExtensionAttribute]
public static IRequestClient`1<T> CreateRequestClient(ILifetimeScope scope, Uri destinationAddress, RequestTimeout timeout);
    [ExtensionAttribute]
public static void RegisterGenericRequestClient(ContainerBuilder builder);
}
[ExtensionAttribute]
public static class MassTransit.AutofacFilterExtensions : object {
    [ExtensionAttribute]
public static void UseConsumeFilter(IConsumePipeConfigurator configurator, Type filterType, ILifetimeScopeProvider lifetimeScopeProvider);
    [ExtensionAttribute]
public static void UseConsumeFilter(IConsumePipeConfigurator configurator, Type filterType, IConfigurationServiceProvider provider);
    [ExtensionAttribute]
public static void UseSendFilter(ISendPipelineConfigurator configurator, Type filterType, ILifetimeScopeProvider lifetimeScopeProvider);
    [ExtensionAttribute]
public static void UseSendFilter(ISendPipelineConfigurator configurator, Type filterType, IConfigurationServiceProvider provider);
    [ExtensionAttribute]
public static void UsePublishFilter(IPublishPipelineConfigurator configurator, Type filterType, ILifetimeScopeProvider lifetimeScopeProvider);
    [ExtensionAttribute]
public static void UsePublishFilter(IPublishPipelineConfigurator configurator, Type filterType, IConfigurationServiceProvider provider);
    [ExtensionAttribute]
public static void UseExecuteActivityFilter(IConsumePipeConfigurator configurator, Type filterType, ILifetimeScopeProvider lifetimeScopeProvider);
    [ExtensionAttribute]
public static void UseExecuteActivityFilter(IConsumePipeConfigurator configurator, Type filterType, IConfigurationServiceProvider provider);
    [ExtensionAttribute]
public static void UseCompensateActivityFilter(IConsumePipeConfigurator configurator, Type filterType, ILifetimeScopeProvider lifetimeScopeProvider);
    [ExtensionAttribute]
public static void UseCompensateActivityFilter(IConsumePipeConfigurator configurator, Type filterType, IConfigurationServiceProvider provider);
}
public class MassTransit.AutofacIntegration.AutofacConsumeMessageObserver`1 : object {
    private ILifetimeScope _lifetimeScope;
    public AutofacConsumeMessageObserver`1(ILifetimeScope lifetimeScope);
    private sealed virtual override Task MassTransit.IConsumeMessageObserver<T>.PreConsume(ConsumeContext`1<T> context);
    private sealed virtual override Task MassTransit.IConsumeMessageObserver<T>.PostConsume(ConsumeContext`1<T> context);
    private sealed virtual override Task MassTransit.IConsumeMessageObserver<T>.ConsumeFault(ConsumeContext`1<T> context, Exception exception);
    private ILifetimeScope GetLifetimeScope(PipeContext context);
}
public class MassTransit.AutofacIntegration.AutofacConsumeObserver : object {
    private ILifetimeScope _lifetimeScope;
    public AutofacConsumeObserver(ILifetimeScope lifetimeScope);
    private sealed virtual override Task MassTransit.IConsumeObserver.PreConsume(ConsumeContext`1<T> context);
    private sealed virtual override Task MassTransit.IConsumeObserver.PostConsume(ConsumeContext`1<T> context);
    private sealed virtual override Task MassTransit.IConsumeObserver.ConsumeFault(ConsumeContext`1<T> context, Exception exception);
    private ILifetimeScope GetLifetimeScope(PipeContext context);
}
[ExtensionAttribute]
public static class MassTransit.AutofacIntegration.AutofacLifetimeScopeExtensions : object {
    [ExtensionAttribute]
public static ConsumerConsumeContext`2<TConsumer, TMessage> GetConsumer(IComponentContext componentContext, ConsumeContext`1<TMessage> consumeContext);
    [ExtensionAttribute]
public static ConsumerConsumeContext`2<TConsumer, TMessage> GetConsumerScope(ILifetimeScope lifetimeScope);
    [ExtensionAttribute]
public static SendContext`1<TMessage> GetSendScope(ILifetimeScope lifetimeScope, SendContext`1<TMessage> sendContext);
    [ExtensionAttribute]
public static PublishContext`1<TMessage> GetPublishScope(ILifetimeScope lifetimeScope, PublishContext`1<TMessage> publishContext);
    [ExtensionAttribute]
public static ILifetimeScope GetLifetimeScope(ILifetimeScopeRegistry`1<TId> registry, ConsumeContext`1<TMessage> context);
    [ExtensionAttribute]
public static TId GetScopeId(ILifetimeScopeRegistry`1<TId> registry, ConsumeContext`1<TMessage> context);
    [ExtensionAttribute]
public static void ConfigureScope(ContainerBuilder builder, SendContext`1<T> context);
    [ExtensionAttribute]
public static void ConfigureScope(ContainerBuilder builder, PublishContext`1<T> context);
    [ExtensionAttribute]
public static void ConfigureScope(ContainerBuilder builder, ConsumeContext context);
    [ExtensionAttribute]
public static void ConfigureScope(ContainerBuilder builder, ConsumeContext`1<T> context);
    [ExtensionAttribute]
public static void ConfigureScope(ContainerBuilder builder, ExecuteContext`1<T> context);
    [ExtensionAttribute]
public static void ConfigureScope(ContainerBuilder builder, CompensateContext`1<T> context);
}
public class MassTransit.AutofacIntegration.AutofacScopeConsumerFactory`2 : object {
    private Action`2<ContainerBuilder, ConsumeContext> _configureScope;
    private string _name;
    private ILifetimeScopeRegistry`1<TId> _registry;
    public AutofacScopeConsumerFactory`2(ILifetimeScopeRegistry`1<TId> registry, string name, Action`2<ContainerBuilder, ConsumeContext> configureScope);
    public sealed virtual Task Send(ConsumeContext`1<TMessage> context, IPipe`1<ConsumerConsumeContext`2<TConsumer, TMessage>> next);
    private sealed virtual override void GreenPipes.IProbeSite.Probe(ProbeContext context);
    [AsyncStateMachineAttribute("MassTransit.AutofacIntegration.AutofacScopeConsumerFactory`2/<SendInScope>d__6`1")]
private Task SendInScope(ConsumeContext`1<TMessage> context, IPipe`1<ConsumerConsumeContext`2<TConsumer, TMessage>> next);
}
public class MassTransit.AutofacIntegration.AutofacStateMachineActivityFactory : object {
    public static IStateMachineActivityFactory Instance;
    private static AutofacStateMachineActivityFactory();
    public sealed virtual T GetService(PipeContext context);
}
[ExtensionAttribute]
public static class MassTransit.AutofacIntegration.AutofacTestingExtensions : object {
    [ExtensionAttribute]
public static ContainerBuilder AddMassTransitInMemoryTestHarness(ContainerBuilder builder, Action`1<IContainerBuilderBusConfigurator> configure);
}
public static class MassTransit.AutofacIntegration.Bind`1 : object {
    public static Bind`2<TKey, TValue> Create(TValue value);
}
public class MassTransit.AutofacIntegration.Bind`2 : object {
    [CompilerGeneratedAttribute]
private TValue <Value>k__BackingField;
    public TValue Value { get; }
    public Bind`2(TValue value);
    [CompilerGeneratedAttribute]
public TValue get_Value();
    public static Bind`3<TKey, TValue, T> Create(T value);
}
public class MassTransit.AutofacIntegration.Bind`3 : object {
    [CompilerGeneratedAttribute]
private TValue <Value>k__BackingField;
    public TValue Value { get; }
    public Bind`3(TValue value);
    [CompilerGeneratedAttribute]
public TValue get_Value();
}
public class MassTransit.AutofacIntegration.Filters.ScopedCompensateActivityPipeSpecificationObserver : object {
    private Type _filterType;
    private ILifetimeScopeProvider _provider;
    public ScopedCompensateActivityPipeSpecificationObserver(Type filterType, ILifetimeScopeProvider provider);
    public sealed virtual void ActivityConfigured(IExecuteActivityConfigurator`2<TActivity, TArguments> configurator, Uri compensateAddress);
    public sealed virtual void ExecuteActivityConfigured(IExecuteActivityConfigurator`2<TActivity, TArguments> configurator);
    public sealed virtual void CompensateActivityConfigured(ICompensateActivityConfigurator`2<TActivity, TLog> configurator);
}
public class MassTransit.AutofacIntegration.Filters.ScopedConsumerConsumePipeSpecificationObserver : object {
    private Type _filterType;
    private ILifetimeScopeProvider _provider;
    public ScopedConsumerConsumePipeSpecificationObserver(Type filterType, ILifetimeScopeProvider provider);
    public sealed virtual void ConsumerConfigured(IConsumerConfigurator`1<TConsumer> configurator);
    public sealed virtual void ConsumerMessageConfigured(IConsumerMessageConfigurator`2<TConsumer, TMessage> configurator);
}
public class MassTransit.AutofacIntegration.Filters.ScopedExecuteActivityPipeSpecificationObserver : object {
    private Type _filterType;
    private ILifetimeScopeProvider _provider;
    public ScopedExecuteActivityPipeSpecificationObserver(Type filterType, ILifetimeScopeProvider provider);
    public sealed virtual void ActivityConfigured(IExecuteActivityConfigurator`2<TActivity, TArguments> configurator, Uri compensateAddress);
    public sealed virtual void ExecuteActivityConfigured(IExecuteActivityConfigurator`2<TActivity, TArguments> configurator);
    public sealed virtual void CompensateActivityConfigured(ICompensateActivityConfigurator`2<TActivity, TLog> configurator);
}
public class MassTransit.AutofacIntegration.Filters.ScopedPublishPipeSpecificationObserver : object {
    private Type _filterType;
    private ILifetimeScopeProvider _provider;
    public ScopedPublishPipeSpecificationObserver(Type filterType, ILifetimeScopeProvider provider);
    public sealed virtual void MessageSpecificationCreated(IMessagePublishPipeSpecification`1<T> specification);
}
public class MassTransit.AutofacIntegration.Filters.ScopedSagaConsumePipeSpecificationObserver : object {
    private Type _filterType;
    private ILifetimeScopeProvider _provider;
    public ScopedSagaConsumePipeSpecificationObserver(Type filterType, ILifetimeScopeProvider provider);
    public sealed virtual void SagaConfigured(ISagaConfigurator`1<TSaga> configurator);
    public sealed virtual void StateMachineSagaConfigured(ISagaConfigurator`1<TInstance> configurator, SagaStateMachine`1<TInstance> stateMachine);
    public sealed virtual void SagaMessageConfigured(ISagaMessageConfigurator`2<TSaga, TMessage> configurator);
}
public class MassTransit.AutofacIntegration.Filters.ScopedSendPipeSpecificationObserver : object {
    private Type _filterType;
    private ILifetimeScopeProvider _provider;
    public ScopedSendPipeSpecificationObserver(Type filterType, ILifetimeScopeProvider provider);
    public sealed virtual void MessageSpecificationCreated(IMessageSendPipeSpecification`1<T> specification);
}
public interface MassTransit.AutofacIntegration.IContainerBuilderBusConfigurator {
    public ContainerBuilder Builder { get; }
    unknown string ScopeName {public set; }
    unknown Action`2<ContainerBuilder, ConsumeContext> ConfigureScope {public set; }
    public abstract virtual ContainerBuilder get_Builder();
    public abstract virtual void set_ScopeName(string value);
    public abstract virtual void set_ConfigureScope(Action`2<ContainerBuilder, ConsumeContext> value);
}
public interface MassTransit.AutofacIntegration.IContainerBuilderMediatorConfigurator {
    public ContainerBuilder Builder { get; }
    unknown string ScopeName {public set; }
    unknown Action`2<ContainerBuilder, ConsumeContext> ConfigureScope {public set; }
    public abstract virtual ContainerBuilder get_Builder();
    public abstract virtual void set_ScopeName(string value);
    public abstract virtual void set_ConfigureScope(Action`2<ContainerBuilder, ConsumeContext> value);
}
public interface MassTransit.AutofacIntegration.IContainerBuilderRiderConfigurator {
    public ContainerBuilder Builder { get; }
    public abstract virtual ContainerBuilder get_Builder();
}
public interface MassTransit.AutofacIntegration.ILifetimeScopeIdAccessor`2 {
    public abstract virtual bool TryGetScopeId(TInput input, TId& id);
}
public interface MassTransit.AutofacIntegration.ILifetimeScopeIdProvider`1 {
    public abstract virtual bool TryGetScopeId(TId& id);
}
public interface MassTransit.AutofacIntegration.ILifetimeScopeProvider {
    public ILifetimeScope LifetimeScope { get; }
    public abstract virtual ILifetimeScope get_LifetimeScope();
    public abstract virtual ILifetimeScope GetLifetimeScope(SendContext`1<T> context);
    public abstract virtual ILifetimeScope GetLifetimeScope(PublishContext`1<T> context);
    public abstract virtual ILifetimeScope GetLifetimeScope(ConsumeContext context);
    public abstract virtual ILifetimeScope GetLifetimeScope(ConsumeContext`1<T> context);
}
public interface MassTransit.AutofacIntegration.ILifetimeScopeRegistry`1 {
    public abstract virtual ILifetimeScope GetLifetimeScope(TId scopeId);
    public abstract virtual void ConfigureLifetimeScope(TId scopeId, LifetimeScopeConfigurator`1<TId> configureCallback);
}
public class MassTransit.AutofacIntegration.LifetimeScopeConfigurator`1 : MulticastDelegate {
    public LifetimeScopeConfigurator`1(object object, IntPtr method);
    public virtual void Invoke(TId scopeId, ContainerBuilder containerBuilder);
    public virtual IAsyncResult BeginInvoke(TId scopeId, ContainerBuilder containerBuilder, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class MassTransit.AutofacIntegration.LifetimeScopeRegistry`1 : object {
    private ILifetimeScopeIdProvider`1<TId> _currentScopeIdProvider;
    private Lazy`1<ILifetimeScope> _defaultScope;
    private ILifetimeScope _parentScope;
    private ConcurrentDictionary`2<TId, RegisteredLifetimeScope<TId>> _scopes;
    private object _tag;
    private bool _disposed;
    public IComponentRegistry ComponentRegistry { get; }
    public IDisposer Disposer { get; }
    public object Tag { get; }
    public LifetimeScopeRegistry`1(ILifetimeScope parentScope, object tag);
    public LifetimeScopeRegistry`1(ILifetimeScope parentScope, object tag, ILifetimeScopeIdProvider`1<TId> currentScopeIdProvider);
    public sealed virtual object ResolveComponent(ResolveRequest request);
    public sealed virtual IComponentRegistry get_ComponentRegistry();
    public sealed virtual ILifetimeScope BeginLifetimeScope();
    public sealed virtual ILifetimeScope BeginLifetimeScope(object tag);
    public sealed virtual ILifetimeScope BeginLifetimeScope(Action`1<ContainerBuilder> configurationAction);
    public sealed virtual ILifetimeScope BeginLifetimeScope(object tag, Action`1<ContainerBuilder> configurationAction);
    public sealed virtual IDisposer get_Disposer();
    public sealed virtual object get_Tag();
    public sealed virtual void add_ChildLifetimeScopeBeginning(EventHandler`1<LifetimeScopeBeginningEventArgs> value);
    public sealed virtual void remove_ChildLifetimeScopeBeginning(EventHandler`1<LifetimeScopeBeginningEventArgs> value);
    public sealed virtual void add_CurrentScopeEnding(EventHandler`1<LifetimeScopeEndingEventArgs> value);
    public sealed virtual void remove_CurrentScopeEnding(EventHandler`1<LifetimeScopeEndingEventArgs> value);
    public sealed virtual void add_ResolveOperationBeginning(EventHandler`1<ResolveOperationBeginningEventArgs> value);
    public sealed virtual void remove_ResolveOperationBeginning(EventHandler`1<ResolveOperationBeginningEventArgs> value);
    public sealed virtual ILifetimeScope GetLifetimeScope(TId scopeId);
    public sealed virtual void ConfigureLifetimeScope(TId scopeId, LifetimeScopeConfigurator`1<TId> configureCallback);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("MassTransit.AutofacIntegration.LifetimeScopeRegistry`1/<DisposeAsync>d__31")]
public sealed virtual ValueTask DisposeAsync();
    private ILifetimeScope GetOrAddLifetimeScope(TId id);
    private ILifetimeScope GetCurrentScope();
    [CompilerGeneratedAttribute]
private ILifetimeScope <.ctor>b__7_0();
    [CompilerGeneratedAttribute]
private RegisteredLifetimeScope<TId> <GetOrAddLifetimeScope>b__32_0(TId key);
}
public class MassTransit.AutofacIntegration.MessageLifetimeScopeIdAccessor`2 : object {
    private IReadProperty`2<TMessage, TId> _property;
    public MessageLifetimeScopeIdAccessor`2(PropertyInfo propertyInfo);
    public sealed virtual bool TryGetScopeId(TMessage input, TId& id);
}
public class MassTransit.AutofacIntegration.MessageLifetimeScopeIdProvider`2 : object {
    private ILifetimeScopeIdAccessor`2<TMessage, TId> _accessor;
    private ConsumeContext`1<TMessage> _consumeContext;
    public MessageLifetimeScopeIdProvider`2(ConsumeContext`1<TMessage> consumeContext, ILifetimeScopeIdAccessor`2<TMessage, TId> accessor);
    public sealed virtual bool TryGetScopeId(TId& id);
}
public class MassTransit.AutofacIntegration.MultiBus.ContainerBuilderBusConfigurator`2 : ContainerBuilderBusRegistrationConfigurator {
    public ContainerBuilderBusConfigurator`2(ContainerBuilder builder);
    public virtual void AddBus(Func`2<IBusRegistrationContext, IBusControl> busFactory);
    public virtual void SetBusFactory(T busFactory);
    public virtual void AddRider(Action`1<IRiderRegistrationConfigurator> configure);
    private static IBusInstance`1<TBus> CreateBus(T busFactory, IComponentContext context);
    private static ISendEndpointProvider GetSendEndpointProvider(IComponentContext context);
    private static IPublishEndpoint GetPublishEndpoint(IComponentContext context);
    private sealed virtual override IContainerRegistrar MassTransit.IBusRegistrationConfigurator.get_Registrar();
    [CompilerGeneratedAttribute]
private IBusRegistrationContext <.ctor>g__CreateRegistrationContext|0_0(IComponentContext context);
    [CompilerGeneratedAttribute]
private Bind`2<TBus, IClientFactory> <.ctor>b__0_3(IComponentContext context);
    [CompilerGeneratedAttribute]
private Bind`2<TBus, IBusRegistrationContext> <.ctor>b__0_4(IComponentContext context);
}
public class MassTransit.AutofacIntegration.MultiBus.ContainerBuilderRiderConfigurator`1 : ContainerBuilderRiderConfigurator {
    public ContainerBuilderRiderConfigurator`1(ContainerBuilder builder, IContainerRegistrar registrar, HashSet`1<Type> riderTypes);
    public virtual void SetRiderFactory(IRegistrationRiderFactory`1<TRider> riderFactory);
    private sealed virtual override IContainerRegistrar MassTransit.Registration.IRiderRegistrationConfigurator.get_Registrar();
}
public interface MassTransit.AutofacIntegration.MultiBus.IContainerBuilderBusConfigurator`1 {
}
public interface MassTransit.AutofacIntegration.MultiBus.IContainerBuilderRiderConfigurator`1 {
    public ContainerBuilder Builder { get; }
    public abstract virtual ContainerBuilder get_Builder();
}
public class MassTransit.AutofacIntegration.Registration.AutofacConfigurationServiceProvider : object {
    private ILifetimeScope _lifetimeScope;
    public AutofacConfigurationServiceProvider(ILifetimeScope lifetimeScope);
    public sealed virtual T GetRequiredService();
    public sealed virtual T GetService();
    public sealed virtual object GetService(Type serviceType);
}
public class MassTransit.AutofacIntegration.Registration.AutofacContainerMediatorRegistrar : AutofacContainerRegistrar {
    public AutofacContainerMediatorRegistrar(ContainerBuilder builder);
    protected virtual IClientFactory GetClientFactory(IComponentContext componentContext);
}
public class MassTransit.AutofacIntegration.Registration.AutofacContainerRegistrar : object {
    private ContainerBuilder _builder;
    [CompilerGeneratedAttribute]
private Action`2<ContainerBuilder, ConsumeContext> <ConfigureScope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScopeName>k__BackingField;
    public Action`2<ContainerBuilder, ConsumeContext> ConfigureScope { get; public set; }
    public string ScopeName { get; public set; }
    public AutofacContainerRegistrar(ContainerBuilder builder);
    [CompilerGeneratedAttribute]
public Action`2<ContainerBuilder, ConsumeContext> get_ConfigureScope();
    [CompilerGeneratedAttribute]
public void set_ConfigureScope(Action`2<ContainerBuilder, ConsumeContext> value);
    [CompilerGeneratedAttribute]
public string get_ScopeName();
    [CompilerGeneratedAttribute]
public void set_ScopeName(string value);
    public sealed virtual void RegisterConsumer();
    public sealed virtual void RegisterConsumerDefinition();
    public sealed virtual void RegisterSaga();
    public sealed virtual void RegisterSagaStateMachine();
    public sealed virtual void RegisterSagaRepository(Func`2<IConfigurationServiceProvider, ISagaRepository`1<TSaga>> repositoryFactory);
    private sealed virtual override void MassTransit.Registration.IContainerRegistrar.RegisterSagaRepository();
    public sealed virtual void RegisterSagaDefinition();
    public sealed virtual void RegisterExecuteActivity();
    public sealed virtual void RegisterActivityDefinition();
    public sealed virtual void RegisterExecuteActivityDefinition();
    public sealed virtual void RegisterEndpointDefinition(IEndpointSettings`1<IEndpointDefinition`1<T>> settings);
    public sealed virtual void RegisterFuture();
    public sealed virtual void RegisterFutureDefinition();
    public sealed virtual void RegisterRequestClient(RequestTimeout timeout);
    public sealed virtual void RegisterRequestClient(Uri destinationAddress, RequestTimeout timeout);
    public sealed virtual void RegisterScopedClientFactory();
    public sealed virtual void Register();
    public sealed virtual void Register(Func`2<IConfigurationServiceProvider, T> factoryMethod);
    public sealed virtual void RegisterSingleInstance(Func`2<IConfigurationServiceProvider, T> factoryMethod);
    public sealed virtual void RegisterSingleInstance(T instance);
    public sealed virtual void RegisterCompensateActivity();
    private IExecuteActivityScopeProvider`2<TActivity, TArguments> CreateExecuteActivityScopeProvider(IComponentContext context);
    private ICompensateActivityScopeProvider`2<TActivity, TLog> CreateCompensateActivityScopeProvider(IComponentContext context);
    protected virtual IClientFactory GetClientFactory(IComponentContext componentContext);
    [CompilerGeneratedAttribute]
private AutofacSagaRepositoryContextFactory`1<TSaga> <MassTransit.Registration.IContainerRegistrar.RegisterSagaRepository>b__15_0(IComponentContext context);
    [CompilerGeneratedAttribute]
private IScopedClientFactory <RegisterScopedClientFactory>b__25_0(IComponentContext context);
}
public class MassTransit.AutofacIntegration.Registration.AutofacContainerRegistrar`1 : AutofacContainerRegistrar {
    public AutofacContainerRegistrar`1(ContainerBuilder builder);
    protected virtual IClientFactory GetClientFactory(IComponentContext componentContext);
}
public class MassTransit.AutofacIntegration.Registration.ContainerBuilderBusRegistrationConfigurator : RegistrationConfigurator {
    private AutofacContainerRegistrar _registrar;
    protected HashSet`1<Type> RiderTypes;
    [CompilerGeneratedAttribute]
private ContainerBuilder <Builder>k__BackingField;
    private string ScopeName { get; public set; }
    public ContainerBuilder Builder { get; }
    public Action`2<ContainerBuilder, ConsumeContext> ConfigureScope { get; public set; }
    public ContainerBuilderBusRegistrationConfigurator(ContainerBuilder builder);
    protected ContainerBuilderBusRegistrationConfigurator(ContainerBuilder builder, AutofacContainerRegistrar registrar);
    private string get_ScopeName();
    public sealed virtual void set_ScopeName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ContainerBuilder get_Builder();
    public Action`2<ContainerBuilder, ConsumeContext> get_ConfigureScope();
    public sealed virtual void set_ConfigureScope(Action`2<ContainerBuilder, ConsumeContext> value);
    public virtual void AddBus(Func`2<IBusRegistrationContext, IBusControl> busFactory);
    public virtual void SetBusFactory(T busFactory);
    public virtual void AddRider(Action`1<IRiderRegistrationConfigurator> configure);
    private static IBusInstance CreateBus(T busFactory, IComponentContext context);
    private IConsumerScopeProvider CreateConsumerScopeProvider(IComponentContext context);
    private static ISendEndpointProvider GetCurrentSendEndpointProvider(IComponentContext context);
    private static IPublishEndpoint GetCurrentPublishEndpoint(IComponentContext context);
    private sealed virtual override IContainerRegistrar MassTransit.IBusRegistrationConfigurator.get_Registrar();
    [CompilerGeneratedAttribute]
private IBusRegistrationContext <.ctor>g__CreateRegistrationContext|2_0(IComponentContext context);
    [CompilerGeneratedAttribute]
private IClientFactory <.ctor>b__2_1(IComponentContext context);
    [CompilerGeneratedAttribute]
private Bind`2<IBus, IBusRegistrationContext> <.ctor>b__2_2(IComponentContext context);
}
public class MassTransit.AutofacIntegration.Registration.ContainerBuilderMediatorConfigurator : RegistrationConfigurator {
    private AutofacContainerRegistrar _registrar;
    private Action`2<IMediatorRegistrationContext, IMediatorConfigurator> _configure;
    [CompilerGeneratedAttribute]
private ContainerBuilder <Builder>k__BackingField;
    private string ScopeName { get; public set; }
    public ContainerBuilder Builder { get; }
    public Action`2<ContainerBuilder, ConsumeContext> ConfigureScope { get; public set; }
    public ContainerBuilderMediatorConfigurator(ContainerBuilder builder);
    private ContainerBuilderMediatorConfigurator(ContainerBuilder builder, AutofacContainerRegistrar registrar);
    private string get_ScopeName();
    public sealed virtual void set_ScopeName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ContainerBuilder get_Builder();
    public Action`2<ContainerBuilder, ConsumeContext> get_ConfigureScope();
    public sealed virtual void set_ConfigureScope(Action`2<ContainerBuilder, ConsumeContext> value);
    public sealed virtual void ConfigureMediator(Action`2<IMediatorRegistrationContext, IMediatorConfigurator> configure);
    private IMediator MediatorFactory(IComponentContext context);
    private IConsumerScopeProvider CreateConsumerScopeProvider(IComponentContext context);
    [CompilerGeneratedAttribute]
private IMediatorRegistrationContext <.ctor>g__CreateRegistrationContext|3_0(IComponentContext context);
}
public class MassTransit.AutofacIntegration.Registration.ContainerBuilderRiderConfigurator : RegistrationConfigurator {
    private HashSet`1<Type> _riderTypes;
    protected RegistrationCache`1<object> Registrations;
    [CompilerGeneratedAttribute]
private ContainerBuilder <Builder>k__BackingField;
    public ContainerBuilder Builder { get; }
    public ContainerBuilderRiderConfigurator(ContainerBuilder builder, IContainerRegistrar registrar, HashSet`1<Type> riderTypes);
    [CompilerGeneratedAttribute]
public sealed virtual ContainerBuilder get_Builder();
    public sealed virtual void AddRegistration(T registration);
    public virtual void SetRiderFactory(IRegistrationRiderFactory`1<TRider> riderFactory);
    protected void ThrowIfAlreadyConfigured();
    private sealed virtual override IContainerRegistrar MassTransit.Registration.IRiderRegistrationConfigurator.get_Registrar();
}
public class MassTransit.AutofacIntegration.Registration.MessageLifetimeScopeConfigurationObserver : ConfigurationObserver {
    private Action`2<ContainerBuilder, ConsumeContext> _configureScope;
    private string _name;
    private ILifetimeScopeProvider _scopeProvider;
    public MessageLifetimeScopeConfigurationObserver(IConsumePipeConfigurator receiveEndpointConfigurator, ILifetimeScopeProvider scopeProvider, string name, Action`2<ContainerBuilder, ConsumeContext> configureScope);
    public sealed virtual void MessageConfigured(IConsumePipeConfigurator configurator);
    public virtual void BatchConsumerConfigured(IConsumerMessageConfigurator`2<TConsumer, Batch`1<TMessage>> configurator);
    public virtual void ActivityConfigured(IExecuteActivityConfigurator`2<TActivity, TArguments> configurator, Uri compensateAddress);
    public virtual void ExecuteActivityConfigured(IExecuteActivityConfigurator`2<TActivity, TArguments> configurator);
    public virtual void CompensateActivityConfigured(ICompensateActivityConfigurator`2<TActivity, TLog> configurator);
}
public class MassTransit.AutofacIntegration.RegistryLifetimeScopeProvider`1 : object {
    private ILifetimeScopeRegistry`1<TId> _registry;
    public ILifetimeScope LifetimeScope { get; }
    public RegistryLifetimeScopeProvider`1(ILifetimeScopeRegistry`1<TId> registry);
    public sealed virtual ILifetimeScope get_LifetimeScope();
    public sealed virtual ILifetimeScope GetLifetimeScope(SendContext`1<T> context);
    public sealed virtual ILifetimeScope GetLifetimeScope(PublishContext`1<T> context);
    public sealed virtual ILifetimeScope GetLifetimeScope(ConsumeContext context);
    private sealed virtual override ILifetimeScope MassTransit.AutofacIntegration.ILifetimeScopeProvider.GetLifetimeScope(ConsumeContext`1<T> context);
    private TId GetScopeId(ConsumeContext`1<T> context);
}
internal class MassTransit.AutofacIntegration.ScopeProviders.ActivatorUtils : object {
    private ConcurrentDictionary`2<Type, ParameterInfo[]> _cache;
    [CompilerGeneratedAttribute]
private static ActivatorUtils <Instance>k__BackingField;
    private static ActivatorUtils Instance { get; }
    private static ActivatorUtils();
    [CompilerGeneratedAttribute]
private static ActivatorUtils get_Instance();
    private Object[] GetParameters(IComponentContext context);
    private static ParameterInfo[] GetParameterInfos(Type instanceType, IComponentContext context);
    public static T GetOrCreateInstance(IComponentContext context);
}
public class MassTransit.AutofacIntegration.ScopeProviders.AutofacCompensateActivityScopeProvider`2 : object {
    private Action`2<ContainerBuilder, CompensateContext`1<TLog>> _configureScope;
    private string _name;
    private ILifetimeScopeProvider _scopeProvider;
    public AutofacCompensateActivityScopeProvider`2(ILifetimeScopeProvider scopeProvider, string name, Action`2<ContainerBuilder, CompensateContext`1<TLog>> configureScope);
    public sealed virtual ValueTask`1<ICompensateActivityScopeContext`2<TActivity, TLog>> GetScope(CompensateContext`1<TLog> context);
    public sealed virtual void Probe(ProbeContext context);
}
public class MassTransit.AutofacIntegration.ScopeProviders.AutofacConsumerScopeProvider : object {
    private Action`2<ContainerBuilder, ConsumeContext> _configureScope;
    private string _name;
    private ILifetimeScopeProvider _scopeProvider;
    public AutofacConsumerScopeProvider(ILifetimeScopeProvider scopeProvider, string name, Action`2<ContainerBuilder, ConsumeContext> configureScope);
    public sealed virtual ValueTask`1<IConsumerScopeContext> GetScope(ConsumeContext context);
    public sealed virtual ValueTask`1<IConsumerScopeContext`2<TConsumer, T>> GetScope(ConsumeContext`1<T> context);
    private sealed virtual override void GreenPipes.IProbeSite.Probe(ProbeContext context);
}
public class MassTransit.AutofacIntegration.ScopeProviders.AutofacExecuteActivityScopeProvider`2 : object {
    private Action`2<ContainerBuilder, ExecuteContext`1<TArguments>> _configureScope;
    private string _name;
    private ILifetimeScopeProvider _scopeProvider;
    public AutofacExecuteActivityScopeProvider`2(ILifetimeScopeProvider scopeProvider, string name, Action`2<ContainerBuilder, ExecuteContext`1<TArguments>> configureScope);
    public sealed virtual ValueTask`1<IExecuteActivityScopeContext`2<TActivity, TArguments>> GetScope(ExecuteContext`1<TArguments> context);
    public sealed virtual void Probe(ProbeContext context);
}
[ExtensionAttribute]
public static class MassTransit.AutofacIntegration.ScopeProviders.AutofacFilterContextScopeProvider : object {
    [ExtensionAttribute]
public static void AddScopedFilter(IPipeConfigurator`1<TContext> configurator, Type scopedType, ILifetimeScopeProvider provider);
    [ExtensionAttribute]
public static void AddScopedFilter(IPipeConfigurator`1<TContext> configurator, Type scopedType, ILifetimeScopeProvider provider);
}
public class MassTransit.AutofacIntegration.ScopeProviders.AutofacFilterContextScopeProvider`2 : object {
    private ILifetimeScopeProvider _lifetimeScopeProvider;
    public AutofacFilterContextScopeProvider`2(ILifetimeScopeProvider lifetimeScopeProvider);
    public sealed virtual IFilterContextScope`1<TContext> Create(TContext context);
    public sealed virtual void Probe(ProbeContext context);
}
public class MassTransit.AutofacIntegration.ScopeProviders.AutofacFilterContextScopeProvider`3 : object {
    private ILifetimeScopeProvider _lifetimeScopeProvider;
    public AutofacFilterContextScopeProvider`3(ILifetimeScopeProvider lifetimeScopeProvider);
    public sealed virtual IFilterContextScope`1<TContext> Create(TContext context);
    public sealed virtual void Probe(ProbeContext context);
}
public class MassTransit.AutofacIntegration.ScopeProviders.AutofacMessageScopeProvider : object {
    private Action`2<ContainerBuilder, ConsumeContext> _configureScope;
    private string _name;
    private ILifetimeScopeProvider _scopeProvider;
    public AutofacMessageScopeProvider(ILifetimeScopeProvider scopeProvider, string name, Action`2<ContainerBuilder, ConsumeContext> configureScope);
    public sealed virtual ValueTask`1<IMessageScopeContext`1<T>> GetScope(ConsumeContext`1<T> context);
    private sealed virtual override void GreenPipes.IProbeSite.Probe(ProbeContext context);
}
public class MassTransit.AutofacIntegration.ScopeProviders.AutofacSagaRepositoryContextFactory`1 : object {
    private static string DefaultScopeName;
    private Action`2<ContainerBuilder, ConsumeContext> _configureScope;
    private string _name;
    private ILifetimeScopeProvider _scopeProvider;
    public AutofacSagaRepositoryContextFactory`1(ILifetimeScopeProvider scopeProvider, string name, Action`2<ContainerBuilder, ConsumeContext> configureScope);
    public sealed virtual void Probe(ProbeContext context);
    public sealed virtual Task Send(ConsumeContext`1<T> context, IPipe`1<SagaRepositoryContext`2<TSaga, T>> next);
    public sealed virtual Task SendQuery(ConsumeContext`1<T> context, ISagaQuery`1<TSaga> query, IPipe`1<SagaRepositoryQueryContext`2<TSaga, T>> next);
    [AsyncStateMachineAttribute("MassTransit.AutofacIntegration.ScopeProviders.AutofacSagaRepositoryContextFactory`1/<Execute>d__8`1")]
public sealed virtual Task`1<T> Execute(Func`2<SagaRepositoryContext`1<TSaga>, Task`1<T>> asyncMethod, CancellationToken cancellationToken);
    private Task Send(ConsumeContext`1<T> context, Func`3<ConsumeContext`1<T>, ISagaRepositoryContextFactory`1<TSaga>, Task> send);
}
public class MassTransit.AutofacIntegration.ScopeProviders.AutofacScopeServiceProvider : object {
    private ILifetimeScope _lifetimeScope;
    public AutofacScopeServiceProvider(ILifetimeScope lifetimeScope);
    public sealed virtual T GetRequiredService();
    public sealed virtual T GetService();
    public sealed virtual object GetService(Type serviceType);
}
public class MassTransit.AutofacIntegration.SingleLifetimeScopeProvider : object {
    [CompilerGeneratedAttribute]
private ILifetimeScope <LifetimeScope>k__BackingField;
    public ILifetimeScope LifetimeScope { get; }
    public SingleLifetimeScopeProvider(ILifetimeScope lifetimeScope);
    [CompilerGeneratedAttribute]
public sealed virtual ILifetimeScope get_LifetimeScope();
    public sealed virtual ILifetimeScope GetLifetimeScope(SendContext`1<T> context);
    public sealed virtual ILifetimeScope GetLifetimeScope(PublishContext`1<T> context);
    public sealed virtual ILifetimeScope GetLifetimeScope(ConsumeContext context);
    private sealed virtual override ILifetimeScope MassTransit.AutofacIntegration.ILifetimeScopeProvider.GetLifetimeScope(ConsumeContext`1<T> context);
}
public class MassTransit.AutofacIntegration.StringHeaderLifetimeScopeIdProvider : object {
    private ConsumeContext _consumeContext;
    private string _headerKey;
    public StringHeaderLifetimeScopeIdProvider(ConsumeContext consumeContext, string headerKey);
    public sealed virtual bool TryGetScopeId(String& id);
}
[ExtensionAttribute]
public static class MassTransit.AutofacMultiBusRegistrationExtensions : object {
    [ExtensionAttribute]
public static ContainerBuilder AddMassTransit(ContainerBuilder containerBuilder, Action`1<IContainerBuilderBusConfigurator`1<TBus>> configure);
    [ExtensionAttribute]
public static ContainerBuilder AddMassTransit(ContainerBuilder containerBuilder, Action`1<IContainerBuilderBusConfigurator`1<TBus>> configure);
}
[ExtensionAttribute]
public static class MassTransit.AutofacObserverExtensions : object {
    [ExtensionAttribute]
public static ConnectHandle ConnectAutofacConsumeObserver(IConsumeObserverConnector connector);
    [ExtensionAttribute]
public static ConnectHandle ConnectAutofacConsumeObserver(IConsumeObserverConnector connector, ILifetimeScope lifetimeScope);
    [ExtensionAttribute]
public static ConnectHandle ConnectAutofacConsumeMessageObserver(IConsumeMessageObserverConnector connector);
    [ExtensionAttribute]
public static ConnectHandle ConnectAutofacConsumeMessageObserver(IConsumeMessageObserverConnector connector, ILifetimeScope lifetimeScope);
}
[ExtensionAttribute]
public static class MassTransit.AutofacReceiveEndpointExtensions : object {
    [ExtensionAttribute]
public static void Consumer(IReceiveEndpointConfigurator configurator, IComponentContext context, string name, Action`2<ContainerBuilder, ConsumeContext> configureScope);
    [ExtensionAttribute]
public static void Consumer(IReceiveEndpointConfigurator configurator, ILifetimeScope scope, string name, Action`2<ContainerBuilder, ConsumeContext> configureScope);
    [ExtensionAttribute]
public static void ConsumerInScope(IReceiveEndpointConfigurator configurator, IComponentContext context, string name, Action`2<ContainerBuilder, ConsumeContext> configureScope);
    [ExtensionAttribute]
public static void Consumer(IReceiveEndpointConfigurator configurator, IComponentContext context, Action`1<IConsumerConfigurator`1<T>> configure, string name, Action`2<ContainerBuilder, ConsumeContext> configureScope);
    [ExtensionAttribute]
public static void Consumer(IReceiveEndpointConfigurator configurator, ILifetimeScope scope, Action`1<IConsumerConfigurator`1<T>> configure, string name, Action`2<ContainerBuilder, ConsumeContext> configureScope);
    [ExtensionAttribute]
public static void Consumer(IBatchConfigurator`1<TMessage> configurator, ILifetimeScope scope, Action`1<IConsumerMessageConfigurator`2<TConsumer, Batch`1<TMessage>>> configure, string name, Action`2<ContainerBuilder, ConsumeContext> configureScope);
    [ExtensionAttribute]
public static void Consumer(IBatchConfigurator`1<TMessage> configurator, IComponentContext context, Action`1<IConsumerMessageConfigurator`2<TConsumer, Batch`1<TMessage>>> configure, string name, Action`2<ContainerBuilder, ConsumeContext> configureScope);
    [ExtensionAttribute]
public static void Saga(IReceiveEndpointConfigurator configurator, IComponentContext context, string name, Action`2<ContainerBuilder, ConsumeContext> configureScope);
    [ExtensionAttribute]
public static void Saga(IReceiveEndpointConfigurator configurator, ILifetimeScope scope, string name, Action`2<ContainerBuilder, ConsumeContext> configureScope);
    [ExtensionAttribute]
public static void Saga(IReceiveEndpointConfigurator configurator, IComponentContext context, Action`1<ISagaConfigurator`1<T>> configure, string name, Action`2<ContainerBuilder, ConsumeContext> configureScope);
    [ExtensionAttribute]
public static void Saga(IReceiveEndpointConfigurator configurator, ILifetimeScope scope, Action`1<ISagaConfigurator`1<T>> configure, string name, Action`2<ContainerBuilder, ConsumeContext> configureScope);
    [ExtensionAttribute]
public static void StateMachineSaga(IReceiveEndpointConfigurator configurator, SagaStateMachine`1<TInstance> stateMachine, IComponentContext context, Action`1<ISagaConfigurator`1<TInstance>> configure, string name, Action`2<ContainerBuilder, ConsumeContext> configureScope);
    [ExtensionAttribute]
public static void StateMachineSaga(IReceiveEndpointConfigurator configurator, SagaStateMachine`1<TInstance> stateMachine, ILifetimeScope scope, Action`1<ISagaConfigurator`1<TInstance>> configure, string name, Action`2<ContainerBuilder, ConsumeContext> configureScope);
    [ExtensionAttribute]
public static void StateMachineSaga(IReceiveEndpointConfigurator configurator, IComponentContext context, Action`1<ISagaConfigurator`1<TInstance>> configure, string name, Action`2<ContainerBuilder, ConsumeContext> configureScope);
    [ExtensionAttribute]
public static void StateMachineSaga(IReceiveEndpointConfigurator configurator, ILifetimeScope scope, Action`1<ISagaConfigurator`1<TInstance>> configure, string name, Action`2<ContainerBuilder, ConsumeContext> configureScope);
    [ExtensionAttribute]
public static void ExecuteActivityHost(IReceiveEndpointConfigurator configurator, Uri compensateAddress, IComponentContext context, string name, Action`2<ContainerBuilder, ExecuteContext`1<TArguments>> configureScope);
    [ExtensionAttribute]
public static void ExecuteActivityHost(IReceiveEndpointConfigurator configurator, Uri compensateAddress, IComponentContext context, Action`1<IExecuteActivityConfigurator`2<TActivity, TArguments>> configure, string name, Action`2<ContainerBuilder, ExecuteContext`1<TArguments>> configureScope);
    [ExtensionAttribute]
public static void ExecuteActivityHost(IReceiveEndpointConfigurator configurator, Uri compensateAddress, ILifetimeScope lifetimeScope, string name, Action`2<ContainerBuilder, ExecuteContext`1<TArguments>> configureScope);
    [ExtensionAttribute]
public static void ExecuteActivityHost(IReceiveEndpointConfigurator configurator, Uri compensateAddress, ILifetimeScope lifetimeScope, Action`1<IExecuteActivityConfigurator`2<TActivity, TArguments>> configure, string name, Action`2<ContainerBuilder, ExecuteContext`1<TArguments>> configureScope);
    [ExtensionAttribute]
public static void ExecuteActivityHost(IReceiveEndpointConfigurator configurator, IComponentContext context, string name, Action`2<ContainerBuilder, ExecuteContext`1<TArguments>> configureScope);
    [ExtensionAttribute]
public static void ExecuteActivityHost(IReceiveEndpointConfigurator configurator, IComponentContext context, Action`1<IExecuteActivityConfigurator`2<TActivity, TArguments>> configure, string name, Action`2<ContainerBuilder, ExecuteContext`1<TArguments>> configureScope);
    [ExtensionAttribute]
public static void ExecuteActivityHost(IReceiveEndpointConfigurator configurator, ILifetimeScope lifetimeScope, string name, Action`2<ContainerBuilder, ExecuteContext`1<TArguments>> configureScope);
    [ExtensionAttribute]
public static void ExecuteActivityHost(IReceiveEndpointConfigurator configurator, ILifetimeScope lifetimeScope, Action`1<IExecuteActivityConfigurator`2<TActivity, TArguments>> configure, string name, Action`2<ContainerBuilder, ExecuteContext`1<TArguments>> configureScope);
    [ExtensionAttribute]
public static void CompensateActivityHost(IReceiveEndpointConfigurator configurator, IComponentContext context, string name, Action`2<ContainerBuilder, CompensateContext`1<TLog>> configureScope);
    [ExtensionAttribute]
public static void CompensateActivityHost(IReceiveEndpointConfigurator configurator, IComponentContext context, Action`1<ICompensateActivityConfigurator`2<TActivity, TLog>> configure, string name, Action`2<ContainerBuilder, CompensateContext`1<TLog>> configureScope);
    [ExtensionAttribute]
public static void CompensateActivityHost(IReceiveEndpointConfigurator configurator, ILifetimeScope lifetimeScope, string name, Action`2<ContainerBuilder, CompensateContext`1<TLog>> configureScope);
    [ExtensionAttribute]
public static void CompensateActivityHost(IReceiveEndpointConfigurator configurator, ILifetimeScope lifetimeScope, Action`1<ICompensateActivityConfigurator`2<TActivity, TLog>> configure, string name, Action`2<ContainerBuilder, CompensateContext`1<TLog>> configureScope);
}
[ExtensionAttribute]
public static class MassTransit.AutofacRegistrationExtensions : object {
    [ExtensionAttribute]
public static ContainerBuilder AddMassTransit(ContainerBuilder builder, Action`1<IContainerBuilderBusConfigurator> configure);
    [ExtensionAttribute]
public static ContainerBuilder AddMediator(ContainerBuilder builder, Action`1<IContainerBuilderMediatorConfigurator> configure);
    [ExtensionAttribute]
public static void AddConsumersFromContainer(IRegistrationConfigurator configurator, IComponentContext context);
    [ExtensionAttribute]
public static void AddSagasFromContainer(IRegistrationConfigurator configurator, IComponentContext context);
    [ExtensionAttribute]
private static Type[] FindTypes(IComponentContext context, Func`2<Type, bool> filter);
}
[ExtensionAttribute]
public static class MassTransit.AutofacStateMachineRegisterSagaExtensions : object {
    [ExtensionAttribute]
public static void RegisterSagaStateMachine(ContainerBuilder builder, Type type);
    [ExtensionAttribute]
public static void RegisterSagaStateMachine(ContainerBuilder builder);
    [ExtensionAttribute]
public static void RegisterSagaStateMachines(ContainerBuilder builder, Assembly[] assemblies);
    [ExtensionAttribute]
public static void RegisterSagaStateMachines(ContainerBuilder builder, Type[] types);
}
[ExtensionAttribute]
public static class MassTransit.AutofacTransactionExtensions : object {
    [ExtensionAttribute]
public static void AddTransactionalEnlistmentBus(IContainerBuilderBusConfigurator`1<TBus> busConfigurator);
    [ExtensionAttribute]
public static void AddTransactionalBus(IContainerBuilderBusConfigurator`1<TBus> busConfigurator);
}
[ExtensionAttribute]
public static class MassTransit.Transactions.AutofacTransactionExtensions : object {
    [ExtensionAttribute]
public static void AddTransactionalEnlistmentBus(IContainerBuilderBusConfigurator builder);
    [ExtensionAttribute]
public static void AddTransactionalBus(IContainerBuilderBusConfigurator builder);
}
