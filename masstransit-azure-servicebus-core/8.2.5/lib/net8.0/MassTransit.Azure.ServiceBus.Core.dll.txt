public static class MassTransit.AzureBusFactory : object {
    public static IBusControl CreateUsingServiceBus(Action`1<IServiceBusBusFactoryConfigurator> configure);
    public static IMessageTopologyConfigurator CreateMessageTopology();
}
public class MassTransit.AzureServiceBusTestHarnessOptions : object {
    [CompilerGeneratedAttribute]
private bool <CleanNamespace>k__BackingField;
    public bool CleanNamespace { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CleanNamespace();
    [CompilerGeneratedAttribute]
public void set_CleanNamespace(bool value);
}
public class MassTransit.AzureServiceBusTransport.AzureServiceBusSendContext`1 : MessageSendContext`1<T> {
    private string _partitionKey;
    private string _sessionId;
    [CompilerGeneratedAttribute]
private string <ReplyToSessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplyTo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ScheduledEnqueueTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    public Nullable`1<TimeSpan> Delay { get; public set; }
    public string ReplyToSessionId { get; public set; }
    public string ReplyTo { get; public set; }
    public Nullable`1<DateTime> ScheduledEnqueueTimeUtc { get; public set; }
    public string Label { get; public set; }
    public string PartitionKey { get; public set; }
    public string SessionId { get; public set; }
    public AzureServiceBusSendContext`1(T message, CancellationToken cancellationToken);
    public virtual Nullable`1<TimeSpan> get_Delay();
    public virtual void set_Delay(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public string get_ReplyToSessionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReplyToSessionId(string value);
    [CompilerGeneratedAttribute]
public string get_ReplyTo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReplyTo(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ScheduledEnqueueTimeUtc();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ScheduledEnqueueTimeUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Label(string value);
    public sealed virtual string get_PartitionKey();
    public sealed virtual void set_PartitionKey(string value);
    public string get_SessionId();
    public sealed virtual void set_SessionId(string value);
    public void SetScheduledMessageId(long sequenceNumber);
    public bool TryGetScheduledMessageId(Int64& sequenceNumber);
    public bool TryGetSequenceNumber(Guid id, Int64& sequenceNumber);
    public virtual void ReadPropertiesFrom(IReadOnlyDictionary`2<string, object> properties);
    public virtual void WritePropertiesTo(IDictionary`2<string, object> properties);
}
internal static class MassTransit.AzureServiceBusTransport.AzureServiceBusTransportPropertyNames : object {
    public static string PartitionKey;
    public static string SessionId;
    public static string ReplyToSessionId;
    public static string ReplyTo;
    public static string Label;
}
public interface MassTransit.AzureServiceBusTransport.ClientContext {
    public Uri InputAddress { get; }
    public string EntityPath { get; }
    public bool IsClosedOrClosing { get; }
    public abstract virtual Uri get_InputAddress();
    public abstract virtual string get_EntityPath();
    public abstract virtual bool get_IsClosedOrClosing();
    public abstract virtual void OnMessageAsync(Func`4<ProcessMessageEventArgs, ServiceBusReceivedMessage, CancellationToken, Task> callback, Func`2<ProcessErrorEventArgs, Task> exceptionHandler);
    public abstract virtual void OnSessionAsync(Func`4<ProcessSessionMessageEventArgs, ServiceBusReceivedMessage, CancellationToken, Task> callback, Func`2<ProcessErrorEventArgs, Task> exceptionHandler);
    public abstract virtual Task StartAsync();
    public abstract virtual Task ShutdownAsync();
    public abstract virtual Task CloseAsync();
    public abstract virtual Task NotifyFaulted(Exception exception, string entityPath);
}
public abstract class MassTransit.AzureServiceBusTransport.ClientContextFactory : object {
    private ClientSettings _settings;
    private IConnectionContextSupervisor _supervisor;
    protected ClientContextFactory(IConnectionContextSupervisor supervisor, ClientSettings settings);
    public sealed virtual IPipeContextAgent`1<ClientContext> CreateContext(ISupervisor supervisor);
    public sealed virtual IActivePipeContextAgent`1<ClientContext> CreateActiveContext(ISupervisor supervisor, PipeContextHandle`1<ClientContext> context, CancellationToken cancellationToken);
    protected abstract virtual ClientContext CreateClientContext(ConnectionContext connectionContext, Uri inputAddress, IAgent agent);
    private void CreateClientContext(IAsyncPipeContextAgent`1<ClientContext> asyncContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.ClientContextFactory/<CreateSharedContext>d__7")]
private static Task`1<ClientContext> CreateSharedContext(Task`1<ClientContext> context, CancellationToken cancellationToken);
}
public class MassTransit.AzureServiceBusTransport.ClientContextSupervisor : TransportPipeContextSupervisor`1<ClientContext> {
    public ClientContextSupervisor(IPipeContextFactory`1<ClientContext> contextFactory);
}
public interface MassTransit.AzureServiceBusTransport.ClientSettings {
    public int MaxConcurrentCalls { get; }
    public int PrefetchCount { get; }
    public TimeSpan MaxAutoRenewDuration { get; }
    public TimeSpan SessionIdleTimeout { get; }
    public int MaxConcurrentCallsPerSession { get; }
    public string Path { get; }
    public string Name { get; }
    public abstract virtual int get_MaxConcurrentCalls();
    public abstract virtual int get_PrefetchCount();
    public abstract virtual TimeSpan get_MaxAutoRenewDuration();
    public abstract virtual TimeSpan get_SessionIdleTimeout();
    public abstract virtual int get_MaxConcurrentCallsPerSession();
    public abstract virtual string get_Path();
    public abstract virtual string get_Name();
    public abstract virtual Uri GetInputAddress(Uri serviceUri, string path);
}
public class MassTransit.AzureServiceBusTransport.Configuration.HostSettings : object {
    [CompilerGeneratedAttribute]
private Uri <ServiceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceBusClient <ServiceBusClient>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceBusAdministrationClient <ServiceBusAdministrationClient>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private AzureNamedKeyCredential <NamedKeyCredential>k__BackingField;
    [CompilerGeneratedAttribute]
private AzureSasCredential <SasCredential>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenCredential <TokenCredential>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RetryMinBackoff>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RetryMaxBackoff>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RetryLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceBusTransportType <TransportType>k__BackingField;
    public Uri ServiceUri { get; public set; }
    public ServiceBusClient ServiceBusClient { get; public set; }
    public ServiceBusAdministrationClient ServiceBusAdministrationClient { get; public set; }
    public string ConnectionString { get; public set; }
    public AzureNamedKeyCredential NamedKeyCredential { get; public set; }
    public AzureSasCredential SasCredential { get; public set; }
    public TokenCredential TokenCredential { get; public set; }
    public TimeSpan RetryMinBackoff { get; public set; }
    public TimeSpan RetryMaxBackoff { get; public set; }
    public int RetryLimit { get; public set; }
    public ServiceBusTransportType TransportType { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_ServiceUri();
    [CompilerGeneratedAttribute]
public void set_ServiceUri(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual ServiceBusClient get_ServiceBusClient();
    [CompilerGeneratedAttribute]
public void set_ServiceBusClient(ServiceBusClient value);
    [CompilerGeneratedAttribute]
public sealed virtual ServiceBusAdministrationClient get_ServiceBusAdministrationClient();
    [CompilerGeneratedAttribute]
public void set_ServiceBusAdministrationClient(ServiceBusAdministrationClient value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConnectionString();
    [CompilerGeneratedAttribute]
public void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public sealed virtual AzureNamedKeyCredential get_NamedKeyCredential();
    [CompilerGeneratedAttribute]
public void set_NamedKeyCredential(AzureNamedKeyCredential value);
    [CompilerGeneratedAttribute]
public sealed virtual AzureSasCredential get_SasCredential();
    [CompilerGeneratedAttribute]
public void set_SasCredential(AzureSasCredential value);
    [CompilerGeneratedAttribute]
public sealed virtual TokenCredential get_TokenCredential();
    [CompilerGeneratedAttribute]
public void set_TokenCredential(TokenCredential value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_RetryMinBackoff();
    [CompilerGeneratedAttribute]
public void set_RetryMinBackoff(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_RetryMaxBackoff();
    [CompilerGeneratedAttribute]
public void set_RetryMaxBackoff(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_RetryLimit();
    [CompilerGeneratedAttribute]
public void set_RetryLimit(int value);
    [CompilerGeneratedAttribute]
public sealed virtual ServiceBusTransportType get_TransportType();
    [CompilerGeneratedAttribute]
public void set_TransportType(ServiceBusTransportType value);
}
public class MassTransit.AzureServiceBusTransport.Configuration.InvalidServiceBusConsumeTopologySpecification : object {
    private string _key;
    private string _message;
    public InvalidServiceBusConsumeTopologySpecification(string key, string message);
    [IteratorStateMachineAttribute("MassTransit.AzureServiceBusTransport.Configuration.InvalidServiceBusConsumeTopologySpecification/<Validate>d__3")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
    public sealed virtual void Apply(IReceiveEndpointBrokerTopologyBuilder builder);
}
public interface MassTransit.AzureServiceBusTransport.Configuration.IServiceBusBusConfiguration {
    public IServiceBusHostConfiguration HostConfiguration { get; }
    public IServiceBusEndpointConfiguration BusEndpointConfiguration { get; }
    public IServiceBusTopologyConfiguration Topology { get; }
    public abstract virtual IServiceBusHostConfiguration get_HostConfiguration();
    public abstract virtual IServiceBusEndpointConfiguration get_BusEndpointConfiguration();
    public abstract virtual IServiceBusTopologyConfiguration get_Topology();
    public abstract virtual IServiceBusEndpointConfiguration CreateEndpointConfiguration(bool isBusEndpoint);
}
public interface MassTransit.AzureServiceBusTransport.Configuration.IServiceBusConsumeTopologySpecification {
    public abstract virtual void Apply(IReceiveEndpointBrokerTopologyBuilder builder);
}
public interface MassTransit.AzureServiceBusTransport.Configuration.IServiceBusEndpointConfiguration {
    public IServiceBusTopologyConfiguration Topology { get; }
    public abstract virtual IServiceBusTopologyConfiguration get_Topology();
}
public interface MassTransit.AzureServiceBusTransport.Configuration.IServiceBusEntityEndpointConfiguration {
    public abstract virtual void Build(IHost host);
}
public interface MassTransit.AzureServiceBusTransport.Configuration.IServiceBusHostConfiguration {
    public ServiceBusHostSettings Settings { get; public set; }
    public string BasePath { get; }
    public IConnectionContextSupervisor ConnectionContextSupervisor { get; }
    public IServiceBusBusTopology Topology { get; }
    public abstract virtual ServiceBusHostSettings get_Settings();
    public abstract virtual void set_Settings(ServiceBusHostSettings value);
    public abstract virtual string get_BasePath();
    public abstract virtual IConnectionContextSupervisor get_ConnectionContextSupervisor();
    public abstract virtual IServiceBusBusTopology get_Topology();
    public abstract virtual void ApplyEndpointDefinition(IServiceBusReceiveEndpointConfigurator configurator, IEndpointDefinition definition);
    public abstract virtual IServiceBusReceiveEndpointConfiguration CreateReceiveEndpointConfiguration(string queueName, Action`1<IServiceBusReceiveEndpointConfigurator> configure);
    public abstract virtual IServiceBusReceiveEndpointConfiguration CreateReceiveEndpointConfiguration(ReceiveEndpointSettings settings, IServiceBusEndpointConfiguration endpointConfiguration, Action`1<IServiceBusReceiveEndpointConfigurator> configure);
    public abstract virtual void SubscriptionEndpoint(string subscriptionName, Action`1<IServiceBusSubscriptionEndpointConfigurator> configure);
    public abstract virtual void SubscriptionEndpoint(string subscriptionName, string topicPath, Action`1<IServiceBusSubscriptionEndpointConfigurator> configure);
    public abstract virtual void SetNamespaceSeparatorToTilde();
    public abstract virtual void SetNamespaceSeparatorToUnderscore();
    public abstract virtual void SetNamespaceSeparatorTo(string separator);
    public abstract virtual IServiceBusSubscriptionEndpointConfiguration CreateSubscriptionEndpointConfiguration(string subscriptionName, Action`1<IServiceBusSubscriptionEndpointConfigurator> configure);
    public abstract virtual IServiceBusSubscriptionEndpointConfiguration CreateSubscriptionEndpointConfiguration(string subscriptionName, string topicPath, Action`1<IServiceBusSubscriptionEndpointConfigurator> configure);
}
public interface MassTransit.AzureServiceBusTransport.Configuration.IServiceBusReceiveEndpointConfiguration {
    public ReceiveSettings Settings { get; }
    public abstract virtual ReceiveSettings get_Settings();
}
public interface MassTransit.AzureServiceBusTransport.Configuration.IServiceBusSubscriptionEndpointConfiguration {
    public SubscriptionSettings Settings { get; }
    public abstract virtual SubscriptionSettings get_Settings();
}
public interface MassTransit.AzureServiceBusTransport.Configuration.IServiceBusTopologyConfiguration {
    public IServiceBusPublishTopologyConfigurator Publish { get; }
    public IServiceBusSendTopologyConfigurator Send { get; }
    public IServiceBusConsumeTopologyConfigurator Consume { get; }
    public abstract virtual IServiceBusPublishTopologyConfigurator get_Publish();
    public abstract virtual IServiceBusSendTopologyConfigurator get_Send();
    public abstract virtual IServiceBusConsumeTopologyConfigurator get_Consume();
}
public interface MassTransit.AzureServiceBusTransport.Configuration.ISessionIdMessageSendTopologyConvention`1 {
    public abstract virtual void SetFormatter(ISessionIdFormatter formatter);
    public abstract virtual void SetFormatter(IMessageSessionIdFormatter`1<TMessage> formatter);
}
public interface MassTransit.AzureServiceBusTransport.Configuration.ISessionIdSendTopologyConvention {
    public ISessionIdFormatter DefaultFormatter { get; public set; }
    public abstract virtual ISessionIdFormatter get_DefaultFormatter();
    public abstract virtual void set_DefaultFormatter(ISessionIdFormatter value);
}
public class MassTransit.AzureServiceBusTransport.Configuration.NamedKeyTokenProviderConfigurator : object {
    [CompilerGeneratedAttribute]
private AzureNamedKeyCredential <NamedKeyCredential>k__BackingField;
    public AzureNamedKeyCredential NamedKeyCredential { get; public set; }
    [CompilerGeneratedAttribute]
public AzureNamedKeyCredential get_NamedKeyCredential();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NamedKeyCredential(AzureNamedKeyCredential value);
}
public class MassTransit.AzureServiceBusTransport.Configuration.QueueBrokeredMessageReceiverConfiguration : ReceiverConfiguration {
    private IServiceBusReceiveEndpointConfiguration _endpointConfiguration;
    private IServiceBusHostConfiguration _hostConfiguration;
    public QueueBrokeredMessageReceiverConfiguration(IServiceBusHostConfiguration hostConfiguration, IServiceBusReceiveEndpointConfiguration endpointConfiguration);
    public IServiceBusMessageReceiver Build();
}
public class MassTransit.AzureServiceBusTransport.Configuration.ServiceBusBusConfiguration : ServiceBusEndpointConfiguration {
    private BusObservable _busObservers;
    [CompilerGeneratedAttribute]
private IServiceBusEndpointConfiguration <BusEndpointConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceBusHostConfiguration <HostConfiguration>k__BackingField;
    private IHostConfiguration MassTransit.Configuration.IBusConfiguration.HostConfiguration { get; }
    private IEndpointConfiguration MassTransit.Configuration.IBusConfiguration.BusEndpointConfiguration { get; }
    private IBusObserver MassTransit.Configuration.IBusConfiguration.BusObservers { get; }
    public IServiceBusEndpointConfiguration BusEndpointConfiguration { get; }
    public IServiceBusHostConfiguration HostConfiguration { get; }
    public ServiceBusBusConfiguration(IServiceBusTopologyConfiguration topologyConfiguration);
    private sealed virtual override IHostConfiguration MassTransit.Configuration.IBusConfiguration.get_HostConfiguration();
    private sealed virtual override IEndpointConfiguration MassTransit.Configuration.IBusConfiguration.get_BusEndpointConfiguration();
    private sealed virtual override IBusObserver MassTransit.Configuration.IBusConfiguration.get_BusObservers();
    [CompilerGeneratedAttribute]
public sealed virtual IServiceBusEndpointConfiguration get_BusEndpointConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IServiceBusHostConfiguration get_HostConfiguration();
    public sealed virtual ConnectHandle ConnectBusObserver(IBusObserver observer);
    public sealed virtual ConnectHandle ConnectEndpointConfigurationObserver(IEndpointConfigurationObserver observer);
}
public class MassTransit.AzureServiceBusTransport.Configuration.ServiceBusEndpointConfiguration : EndpointConfiguration {
    [CompilerGeneratedAttribute]
private IServiceBusTopologyConfiguration <Topology>k__BackingField;
    public IServiceBusTopologyConfiguration Topology { get; }
    protected ServiceBusEndpointConfiguration(IServiceBusTopologyConfiguration topologyConfiguration);
    private ServiceBusEndpointConfiguration(IServiceBusEndpointConfiguration parentConfiguration, IServiceBusTopologyConfiguration topologyConfiguration, bool isBusEndpoint);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceBusTopologyConfiguration get_Topology();
    public sealed virtual IServiceBusEndpointConfiguration CreateEndpointConfiguration(bool isBusEndpoint);
}
public class MassTransit.AzureServiceBusTransport.Configuration.ServiceBusEndpointEntityConfigurator : ServiceBusEntityConfigurator {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableDeadLetteringOnMessageExpiration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForwardDeadLetteredMessagesTo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <LockDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxDeliveryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RequiresSession>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxConcurrentCallsPerSession>k__BackingField;
    public Nullable`1<bool> EnableDeadLetteringOnMessageExpiration { get; public set; }
    public string ForwardDeadLetteredMessagesTo { get; public set; }
    public Nullable`1<TimeSpan> LockDuration { get; public set; }
    public Nullable`1<int> MaxDeliveryCount { get; public set; }
    public Nullable`1<bool> RequiresSession { get; public set; }
    public Nullable`1<int> MaxConcurrentCallsPerSession { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableDeadLetteringOnMessageExpiration();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableDeadLetteringOnMessageExpiration(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_ForwardDeadLetteredMessagesTo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ForwardDeadLetteredMessagesTo(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_LockDuration();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LockDuration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxDeliveryCount();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxDeliveryCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RequiresSession();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequiresSession(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxConcurrentCallsPerSession();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxConcurrentCallsPerSession(Nullable`1<int> value);
}
public abstract class MassTransit.AzureServiceBusTransport.Configuration.ServiceBusEntityConfigurator : object {
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <AutoDeleteOnIdle>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <DefaultMessageTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableBatchedOperations>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserMetadata>k__BackingField;
    public Nullable`1<TimeSpan> AutoDeleteOnIdle { get; public set; }
    public Nullable`1<TimeSpan> DefaultMessageTimeToLive { get; public set; }
    public Nullable`1<bool> EnableBatchedOperations { get; public set; }
    public string UserMetadata { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_AutoDeleteOnIdle();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AutoDeleteOnIdle(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_DefaultMessageTimeToLive();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultMessageTimeToLive(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableBatchedOperations();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableBatchedOperations(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_UserMetadata();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserMetadata(string value);
}
public abstract class MassTransit.AzureServiceBusTransport.Configuration.ServiceBusEntityReceiveEndpointConfiguration : ReceiveEndpointConfiguration {
    private IServiceBusEndpointEntityConfigurator _configurator;
    private IServiceBusHostConfiguration _hostConfiguration;
    private BaseClientSettings _settings;
    protected IBuildPipeConfigurator`1<ClientContext> ClientPipeConfigurator;
    unknown int MaxConcurrentCalls {public set; }
    unknown TimeSpan AutoDeleteOnIdle {public set; }
    unknown TimeSpan DefaultMessageTimeToLive {public set; }
    unknown bool EnableBatchedOperations {public set; }
    unknown bool EnableDeadLetteringOnMessageExpiration {public set; }
    unknown string ForwardDeadLetteredMessagesTo {public set; }
    unknown TimeSpan LockDuration {public set; }
    unknown int MaxDeliveryCount {public set; }
    unknown bool RequiresSession {public set; }
    unknown int MaxConcurrentCallsPerSession {public set; }
    unknown string UserMetadata {public set; }
    unknown TimeSpan MessageWaitTimeout {public set; }
    unknown TimeSpan SessionIdleTimeout {public set; }
    unknown TimeSpan MaxAutoRenewDuration {public set; }
    protected ServiceBusEntityReceiveEndpointConfiguration(IServiceBusHostConfiguration hostConfiguration, BaseClientSettings settings, IServiceBusEndpointConfiguration endpointConfiguration);
    public sealed virtual void set_MaxConcurrentCalls(int value);
    public sealed virtual void set_AutoDeleteOnIdle(TimeSpan value);
    public sealed virtual void set_DefaultMessageTimeToLive(TimeSpan value);
    public sealed virtual void set_EnableBatchedOperations(bool value);
    public sealed virtual void set_EnableDeadLetteringOnMessageExpiration(bool value);
    public sealed virtual void set_ForwardDeadLetteredMessagesTo(string value);
    public sealed virtual void set_LockDuration(TimeSpan value);
    public sealed virtual void set_MaxDeliveryCount(int value);
    public sealed virtual void set_RequiresSession(bool value);
    public sealed virtual void set_MaxConcurrentCallsPerSession(int value);
    public sealed virtual void set_UserMetadata(string value);
    public sealed virtual void set_MessageWaitTimeout(TimeSpan value);
    public sealed virtual void set_SessionIdleTimeout(TimeSpan value);
    public sealed virtual void set_MaxAutoRenewDuration(TimeSpan value);
    public virtual IEnumerable`1<ValidationResult> Validate();
    [IteratorStateMachineAttribute("MassTransit.AzureServiceBusTransport.Configuration.ServiceBusEntityReceiveEndpointConfiguration/<ValidateSettings>d__34")]
private IEnumerable`1<ValidationResult> ValidateSettings();
    protected void CreateReceiveEndpoint(IHost host, ServiceBusReceiveEndpointContext receiveEndpointContext);
}
public class MassTransit.AzureServiceBusTransport.Configuration.ServiceBusHostConfiguration : BaseHostConfiguration`2<IServiceBusEntityEndpointConfiguration, IServiceBusReceiveEndpointConfigurator> {
    private IServiceBusBusConfiguration _busConfiguration;
    private IServiceBusBusTopology _busTopology;
    private Recycle`1<IConnectionContextSupervisor> _connectionContext;
    private IServiceBusTopologyConfiguration _topologyConfiguration;
    private ServiceBusHostSettings _hostSettings;
    private IMessageNameFormatter _messageNameFormatter;
    [CompilerGeneratedAttribute]
private IRetryPolicy <ReceiveTransportRetryPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private IRetryPolicy <SendTransportRetryPolicy>k__BackingField;
    public Uri HostAddress { get; }
    private string MassTransit.AzureServiceBusTransport.Configuration.IServiceBusHostConfiguration.BasePath { get; }
    public IConnectionContextSupervisor ConnectionContextSupervisor { get; }
    public ServiceBusHostSettings Settings { get; public set; }
    public IRetryPolicy ReceiveTransportRetryPolicy { get; }
    public IRetryPolicy SendTransportRetryPolicy { get; }
    private IServiceBusBusTopology MassTransit.AzureServiceBusTransport.Configuration.IServiceBusHostConfiguration.Topology { get; }
    public IBusTopology Topology { get; }
    public ServiceBusHostConfiguration(IServiceBusBusConfiguration busConfiguration, IServiceBusTopologyConfiguration topologyConfiguration);
    public virtual Uri get_HostAddress();
    private sealed virtual override string MassTransit.AzureServiceBusTransport.Configuration.IServiceBusHostConfiguration.get_BasePath();
    public sealed virtual IConnectionContextSupervisor get_ConnectionContextSupervisor();
    public sealed virtual ServiceBusHostSettings get_Settings();
    public sealed virtual void set_Settings(ServiceBusHostSettings value);
    [CompilerGeneratedAttribute]
public virtual IRetryPolicy get_ReceiveTransportRetryPolicy();
    [CompilerGeneratedAttribute]
public virtual IRetryPolicy get_SendTransportRetryPolicy();
    private sealed virtual override IServiceBusBusTopology MassTransit.AzureServiceBusTransport.Configuration.IServiceBusHostConfiguration.get_Topology();
    public sealed virtual void SetNamespaceSeparatorToTilde();
    public sealed virtual void SetNamespaceSeparatorToUnderscore();
    public sealed virtual void SetNamespaceSeparatorTo(string separator);
    public virtual void ReceiveEndpoint(IEndpointDefinition definition, IEndpointNameFormatter endpointNameFormatter, Action`1<IServiceBusReceiveEndpointConfigurator> configureEndpoint);
    public virtual void ReceiveEndpoint(string queueName, Action`1<IServiceBusReceiveEndpointConfigurator> configureEndpoint);
    public sealed virtual void ApplyEndpointDefinition(IServiceBusReceiveEndpointConfigurator configurator, IEndpointDefinition definition);
    public sealed virtual IServiceBusReceiveEndpointConfiguration CreateReceiveEndpointConfiguration(string queueName, Action`1<IServiceBusReceiveEndpointConfigurator> configure);
    public sealed virtual IServiceBusReceiveEndpointConfiguration CreateReceiveEndpointConfiguration(ReceiveEndpointSettings settings, IServiceBusEndpointConfiguration endpointConfiguration, Action`1<IServiceBusReceiveEndpointConfigurator> configure);
    public sealed virtual void SubscriptionEndpoint(string subscriptionName, Action`1<IServiceBusSubscriptionEndpointConfigurator> configure);
    public sealed virtual void SubscriptionEndpoint(string subscriptionName, string topicPath, Action`1<IServiceBusSubscriptionEndpointConfigurator> configure);
    public virtual IBusTopology get_Topology();
    public virtual IReceiveEndpointConfiguration CreateReceiveEndpointConfiguration(string queueName, Action`1<IReceiveEndpointConfigurator> configure);
    public virtual IHost Build();
    public sealed virtual IServiceBusSubscriptionEndpointConfiguration CreateSubscriptionEndpointConfiguration(string subscriptionName, Action`1<IServiceBusSubscriptionEndpointConfigurator> configure);
    public sealed virtual IServiceBusSubscriptionEndpointConfiguration CreateSubscriptionEndpointConfiguration(string subscriptionName, string topicPath, Action`1<IServiceBusSubscriptionEndpointConfigurator> configure);
    public IServiceBusSubscriptionEndpointConfiguration CreateSubscriptionEndpointConfiguration(SubscriptionEndpointSettings settings, IServiceBusEndpointConfiguration endpointConfiguration, Action`1<IServiceBusSubscriptionEndpointConfigurator> configure);
}
public abstract class MassTransit.AzureServiceBusTransport.Configuration.ServiceBusMessageEntityConfigurator : ServiceBusEntityConfigurator {
    private string _basePath;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <DuplicateDetectionHistoryTimeWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnablePartitioning>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxSizeInMegabytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxMessageSizeInKilobytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RequiresDuplicateDetection>k__BackingField;
    public string Path { get; public set; }
    public string BasePath { get; public set; }
    public string FullPath { get; }
    public Nullable`1<TimeSpan> DuplicateDetectionHistoryTimeWindow { get; public set; }
    public Nullable`1<bool> EnablePartitioning { get; public set; }
    public Nullable`1<long> MaxSizeInMegabytes { get; public set; }
    public Nullable`1<long> MaxMessageSizeInKilobytes { get; public set; }
    public Nullable`1<bool> RequiresDuplicateDetection { get; public set; }
    protected ServiceBusMessageEntityConfigurator(string path);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    public sealed virtual string get_BasePath();
    public sealed virtual void set_BasePath(string value);
    public sealed virtual string get_FullPath();
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_DuplicateDetectionHistoryTimeWindow();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DuplicateDetectionHistoryTimeWindow(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnablePartitioning();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnablePartitioning(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxSizeInMegabytes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxSizeInMegabytes(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxMessageSizeInKilobytes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxMessageSizeInKilobytes(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RequiresDuplicateDetection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequiresDuplicateDetection(Nullable`1<bool> value);
    public sealed virtual void EnableDuplicateDetection(TimeSpan historyTimeWindow);
}
public class MassTransit.AzureServiceBusTransport.Configuration.ServiceBusQueueConfigurator : ServiceBusMessageEntityConfigurator {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableDeadLetteringOnMessageExpiration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableDeadLetteringOnFilterEvaluationExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForwardDeadLetteredMessagesTo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForwardTo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <LockDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxDeliveryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RequiresSession>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxConcurrentCallsPerSession>k__BackingField;
    public Nullable`1<bool> EnableDeadLetteringOnMessageExpiration { get; public set; }
    public Nullable`1<bool> EnableDeadLetteringOnFilterEvaluationExceptions { get; public set; }
    public string ForwardDeadLetteredMessagesTo { get; public set; }
    public string ForwardTo { get; public set; }
    public Nullable`1<TimeSpan> LockDuration { get; public set; }
    public Nullable`1<int> MaxDeliveryCount { get; public set; }
    public Nullable`1<bool> RequiresSession { get; public set; }
    public Nullable`1<int> MaxConcurrentCallsPerSession { get; public set; }
    public ServiceBusQueueConfigurator(string path);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableDeadLetteringOnMessageExpiration();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableDeadLetteringOnMessageExpiration(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableDeadLetteringOnFilterEvaluationExceptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableDeadLetteringOnFilterEvaluationExceptions(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_ForwardDeadLetteredMessagesTo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ForwardDeadLetteredMessagesTo(string value);
    [CompilerGeneratedAttribute]
public string get_ForwardTo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ForwardTo(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_LockDuration();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LockDuration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxDeliveryCount();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxDeliveryCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RequiresSession();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequiresSession(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxConcurrentCallsPerSession();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxConcurrentCallsPerSession(Nullable`1<int> value);
    [IteratorStateMachineAttribute("MassTransit.AzureServiceBusTransport.Configuration.ServiceBusQueueConfigurator/<Validate>d__33")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
    public sealed virtual CreateQueueOptions GetCreateQueueOptions();
    public Uri GetQueueAddress(Uri hostAddress);
}
public class MassTransit.AzureServiceBusTransport.Configuration.ServiceBusReceiveEndpointConfiguration : ServiceBusEntityReceiveEndpointConfiguration {
    private IServiceBusEndpointConfiguration _endpointConfiguration;
    private IServiceBusHostConfiguration _hostConfiguration;
    private Lazy`1<Uri> _inputAddress;
    private ReceiveEndpointSettings _settings;
    public ReceiveSettings Settings { get; }
    public Uri HostAddress { get; }
    public Uri InputAddress { get; }
    private IServiceBusTopologyConfiguration MassTransit.AzureServiceBusTransport.Configuration.IServiceBusEndpointConfiguration.Topology { get; }
    unknown TimeSpan DuplicateDetectionHistoryTimeWindow {public set; }
    unknown bool EnablePartitioning {public set; }
    unknown long MaxSizeInMegabytes {public set; }
    unknown long MaxMessageSizeInKilobytes {public set; }
    unknown bool RequiresDuplicateDetection {public set; }
    unknown bool RemoveSubscriptions {public set; }
    public ServiceBusReceiveEndpointConfiguration(IServiceBusHostConfiguration hostConfiguration, ReceiveEndpointSettings settings, IServiceBusEndpointConfiguration endpointConfiguration);
    public sealed virtual ReceiveSettings get_Settings();
    public virtual Uri get_HostAddress();
    public virtual Uri get_InputAddress();
    public virtual ReceiveEndpointContext CreateReceiveEndpointContext();
    private sealed virtual override IServiceBusTopologyConfiguration MassTransit.AzureServiceBusTransport.Configuration.IServiceBusEndpointConfiguration.get_Topology();
    public virtual IEnumerable`1<ValidationResult> Validate();
    public sealed virtual void Build(IHost host);
    public sealed virtual void set_DuplicateDetectionHistoryTimeWindow(TimeSpan value);
    public sealed virtual void EnableDuplicateDetection(TimeSpan historyTimeWindow);
    public sealed virtual void set_EnablePartitioning(bool value);
    public sealed virtual void set_MaxSizeInMegabytes(long value);
    public sealed virtual void set_MaxMessageSizeInKilobytes(long value);
    public sealed virtual void set_RequiresDuplicateDetection(bool value);
    public sealed virtual void set_RemoveSubscriptions(bool value);
    public sealed virtual void Subscribe(string topicName, string subscriptionName, Action`1<IServiceBusSubscriptionConfigurator> callback);
    public sealed virtual void Subscribe(string subscriptionName, Action`1<IServiceBusSubscriptionConfigurator> callback);
    private ServiceBusReceiveEndpointContext CreateServiceBusReceiveEndpointContext();
    private Uri FormatInputAddress();
    protected virtual bool IsAlreadyConfigured();
    private IErrorTransport CreateErrorTransport();
    private IDeadLetterTransport CreateDeadLetterTransport();
}
public class MassTransit.AzureServiceBusTransport.Configuration.ServiceBusSubscriptionConfigurator : ServiceBusEndpointEntityConfigurator {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableDeadLetteringOnFilterEvaluationExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private RuleFilter <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private CreateRuleOptions <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForwardTo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TopicPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubscriptionName>k__BackingField;
    private Nullable`1<bool> EnableDeadLetteringOnFilterEvaluationExceptions { get; public set; }
    public RuleFilter Filter { get; public set; }
    public CreateRuleOptions Rule { get; public set; }
    private string ForwardTo { get; public set; }
    public string TopicPath { get; }
    public string SubscriptionName { get; }
    public ServiceBusSubscriptionConfigurator(string subscriptionName, string topicPath);
    [CompilerGeneratedAttribute]
private Nullable`1<bool> get_EnableDeadLetteringOnFilterEvaluationExceptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableDeadLetteringOnFilterEvaluationExceptions(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public RuleFilter get_Filter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Filter(RuleFilter value);
    [CompilerGeneratedAttribute]
public CreateRuleOptions get_Rule();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Rule(CreateRuleOptions value);
    [CompilerGeneratedAttribute]
private string get_ForwardTo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ForwardTo(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TopicPath();
    [CompilerGeneratedAttribute]
public sealed virtual string get_SubscriptionName();
    [IteratorStateMachineAttribute("MassTransit.AzureServiceBusTransport.Configuration.ServiceBusSubscriptionConfigurator/<Validate>d__23")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
    public sealed virtual CreateSubscriptionOptions GetCreateSubscriptionOptions();
}
public class MassTransit.AzureServiceBusTransport.Configuration.ServiceBusSubscriptionEndpointConfiguration : ServiceBusEntityReceiveEndpointConfiguration {
    private IServiceBusEndpointConfiguration _endpointConfiguration;
    private IServiceBusHostConfiguration _hostConfiguration;
    private Lazy`1<Uri> _inputAddress;
    private SubscriptionEndpointSettings _settings;
    [CompilerGeneratedAttribute]
private Uri <HostAddress>k__BackingField;
    public SubscriptionSettings Settings { get; }
    public Uri HostAddress { get; }
    public Uri InputAddress { get; }
    private IServiceBusTopologyConfiguration MassTransit.AzureServiceBusTransport.Configuration.IServiceBusEndpointConfiguration.Topology { get; }
    unknown RuleFilter Filter {public set; }
    unknown CreateRuleOptions Rule {public set; }
    public ServiceBusSubscriptionEndpointConfiguration(IServiceBusHostConfiguration hostConfiguration, SubscriptionEndpointSettings settings, IServiceBusEndpointConfiguration endpointConfiguration);
    public sealed virtual SubscriptionSettings get_Settings();
    [CompilerGeneratedAttribute]
public virtual Uri get_HostAddress();
    public virtual Uri get_InputAddress();
    public virtual ReceiveEndpointContext CreateReceiveEndpointContext();
    private sealed virtual override IServiceBusTopologyConfiguration MassTransit.AzureServiceBusTransport.Configuration.IServiceBusEndpointConfiguration.get_Topology();
    public virtual IEnumerable`1<ValidationResult> Validate();
    public sealed virtual void Build(IHost host);
    public sealed virtual void set_Filter(RuleFilter value);
    public sealed virtual void set_Rule(CreateRuleOptions value);
    private ServiceBusReceiveEndpointContext CreateServiceBusReceiveEndpointContext();
    private Uri FormatInputAddress();
}
public class MassTransit.AzureServiceBusTransport.Configuration.ServiceBusTopicConfigurator : ServiceBusMessageEntityConfigurator {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SupportOrdering>k__BackingField;
    public Nullable`1<bool> SupportOrdering { get; public set; }
    public ServiceBusTopicConfigurator(string topicPath, bool temporary);
    [IteratorStateMachineAttribute("MassTransit.AzureServiceBusTransport.Configuration.ServiceBusTopicConfigurator/<Validate>d__1")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SupportOrdering();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SupportOrdering(Nullable`1<bool> value);
    public CreateTopicOptions GetCreateTopicOptions();
}
public class MassTransit.AzureServiceBusTransport.Configuration.ServiceBusTopologyConfiguration : object {
    private ServiceBusConsumeTopology _consumeTopology;
    private IMessageTopologyConfigurator _messageTopology;
    private IServiceBusPublishTopologyConfigurator _publishTopology;
    private IServiceBusSendTopologyConfigurator _sendTopology;
    private IMessageTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.Message { get; }
    private ISendTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.Send { get; }
    private IPublishTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.Publish { get; }
    private IConsumeTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.Consume { get; }
    private IServiceBusPublishTopologyConfigurator MassTransit.AzureServiceBusTransport.Configuration.IServiceBusTopologyConfiguration.Publish { get; }
    private IServiceBusSendTopologyConfigurator MassTransit.AzureServiceBusTransport.Configuration.IServiceBusTopologyConfiguration.Send { get; }
    private IServiceBusConsumeTopologyConfigurator MassTransit.AzureServiceBusTransport.Configuration.IServiceBusTopologyConfiguration.Consume { get; }
    public ServiceBusTopologyConfiguration(IMessageTopologyConfigurator messageTopology);
    public ServiceBusTopologyConfiguration(IServiceBusTopologyConfiguration topologyConfiguration);
    private sealed virtual override IMessageTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.get_Message();
    private sealed virtual override ISendTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.get_Send();
    private sealed virtual override IPublishTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.get_Publish();
    private sealed virtual override IConsumeTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.get_Consume();
    private sealed virtual override IServiceBusPublishTopologyConfigurator MassTransit.AzureServiceBusTransport.Configuration.IServiceBusTopologyConfiguration.get_Publish();
    private sealed virtual override IServiceBusSendTopologyConfigurator MassTransit.AzureServiceBusTransport.Configuration.IServiceBusTopologyConfiguration.get_Send();
    private sealed virtual override IServiceBusConsumeTopologyConfigurator MassTransit.AzureServiceBusTransport.Configuration.IServiceBusTopologyConfiguration.get_Consume();
    public sealed virtual IEnumerable`1<ValidationResult> Validate();
}
public class MassTransit.AzureServiceBusTransport.Configuration.SessionIdMessageSendTopologyConvention`1 : object {
    private IMessageSessionIdFormatter`1<TMessage> _formatter;
    public SessionIdMessageSendTopologyConvention`1(ISessionIdFormatter formatter);
    public sealed virtual bool TryGetMessageSendTopology(IMessageSendTopology`1& messageSendTopology);
    public sealed virtual bool TryGetMessageSendTopologyConvention(IMessageSendTopologyConvention`1& convention);
    public sealed virtual void SetFormatter(ISessionIdFormatter formatter);
    public sealed virtual void SetFormatter(IMessageSessionIdFormatter`1<TMessage> formatter);
}
public class MassTransit.AzureServiceBusTransport.Configuration.SessionIdSendTopologyConvention : object {
    private ITopologyConventionCache`1<IMessageSendTopologyConvention> _cache;
    [CompilerGeneratedAttribute]
private ISessionIdFormatter <DefaultFormatter>k__BackingField;
    public ISessionIdFormatter DefaultFormatter { get; public set; }
    private sealed virtual override bool MassTransit.Configuration.IMessageSendTopologyConvention.TryGetMessageSendTopologyConvention(IMessageSendTopologyConvention`1& convention);
    [CompilerGeneratedAttribute]
public sealed virtual ISessionIdFormatter get_DefaultFormatter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultFormatter(ISessionIdFormatter value);
}
public class MassTransit.AzureServiceBusTransport.Configuration.SharedAccessSignatureTokenProviderConfigurator : object {
    [CompilerGeneratedAttribute]
private AzureSasCredential <SasCredential>k__BackingField;
    public AzureSasCredential SasCredential { get; public set; }
    [CompilerGeneratedAttribute]
public AzureSasCredential get_SasCredential();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SasCredential(AzureSasCredential value);
}
public class MassTransit.AzureServiceBusTransport.Configuration.SubscriptionBrokeredMessageReceiverConfiguration : ReceiverConfiguration {
    private IServiceBusSubscriptionEndpointConfiguration _endpointConfiguration;
    private IServiceBusHostConfiguration _hostConfiguration;
    public SubscriptionBrokeredMessageReceiverConfiguration(IServiceBusHostConfiguration hostConfiguration, IServiceBusSubscriptionEndpointConfiguration endpointConfiguration);
    public IServiceBusMessageReceiver Build();
}
public class MassTransit.AzureServiceBusTransport.Configuration.SubscriptionConsumeTopologySpecification : object {
    private CreateSubscriptionOptions _createSubscriptionOptions;
    private CreateTopicOptions _createTopicOptions;
    private RuleFilter _filter;
    private CreateRuleOptions _rule;
    public SubscriptionConsumeTopologySpecification(CreateTopicOptions createTopicOptions, CreateSubscriptionOptions createSubscriptionOptions, CreateRuleOptions rule, RuleFilter filter);
    [IteratorStateMachineAttribute("MassTransit.AzureServiceBusTransport.Configuration.SubscriptionConsumeTopologySpecification/<Validate>d__5")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
    public sealed virtual void Apply(IReceiveEndpointBrokerTopologyBuilder builder);
}
public interface MassTransit.AzureServiceBusTransport.ConnectionContext {
    public Uri Endpoint { get; }
    public abstract virtual Uri get_Endpoint();
    public abstract virtual ServiceBusProcessor CreateQueueProcessor(ReceiveSettings settings);
    public abstract virtual ServiceBusSessionProcessor CreateQueueSessionProcessor(ReceiveSettings settings);
    public abstract virtual ServiceBusProcessor CreateSubscriptionProcessor(SubscriptionSettings settings);
    public abstract virtual ServiceBusSessionProcessor CreateSubscriptionSessionProcessor(SubscriptionSettings settings);
    public abstract virtual ServiceBusSender CreateMessageSender(string entityPath);
    public abstract virtual Task`1<QueueProperties> CreateQueue(CreateQueueOptions createQueueOptions);
    public abstract virtual Task`1<TopicProperties> CreateTopic(CreateTopicOptions createTopicOptions);
    public abstract virtual Task`1<SubscriptionProperties> CreateTopicSubscription(CreateSubscriptionOptions createSubscriptionOptions, CreateRuleOptions rule, RuleFilter filter);
    public abstract virtual Task DeleteTopicSubscription(CreateSubscriptionOptions subscriptionOptions);
}
public class MassTransit.AzureServiceBusTransport.ConnectionContextFactory : object {
    private IServiceBusHostConfiguration _hostConfiguration;
    public ConnectionContextFactory(IServiceBusHostConfiguration hostConfiguration);
    private sealed virtual override IPipeContextAgent`1<ConnectionContext> MassTransit.Agents.IPipeContextFactory<MassTransit.AzureServiceBusTransport.ConnectionContext>.CreateContext(ISupervisor supervisor);
    private sealed virtual override IActivePipeContextAgent`1<ConnectionContext> MassTransit.Agents.IPipeContextFactory<MassTransit.AzureServiceBusTransport.ConnectionContext>.CreateActiveContext(ISupervisor supervisor, PipeContextHandle`1<ConnectionContext> context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.ConnectionContextFactory/<CreateSharedConnection>d__4")]
private Task`1<ConnectionContext> CreateSharedConnection(Task`1<ConnectionContext> context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.ConnectionContextFactory/<CreateConnection>d__5")]
private Task`1<ConnectionContext> CreateConnection(ISupervisor supervisor);
    private static bool HasSharedAccess(string connectionString);
}
public class MassTransit.AzureServiceBusTransport.ConnectionContextSupervisor : TransportPipeContextSupervisor`1<ConnectionContext> {
    private IServiceBusHostConfiguration _hostConfiguration;
    private IServiceBusTopologyConfiguration _topologyConfiguration;
    public ConnectionContextSupervisor(IServiceBusHostConfiguration hostConfiguration, IServiceBusTopologyConfiguration topologyConfiguration);
    public sealed virtual Uri NormalizeAddress(Uri address);
    public sealed virtual Task`1<ISendTransport> CreatePublishTransport(ReceiveEndpointContext receiveEndpointContext, Uri publishAddress);
    public sealed virtual Task`1<ISendTransport> CreateSendTransport(ReceiveEndpointContext receiveEndpointContext, Uri address);
    public sealed virtual IClientContextSupervisor CreateClientContextSupervisor(Func`2<IConnectionContextSupervisor, IPipeContextFactory`1<ClientContext>> factory);
    public sealed virtual ISendEndpointContextSupervisor CreateSendEndpointContextSupervisor(SendSettings settings);
    private Task`1<ISendTransport> CreateSendTransport(Uri address, SendSettings settings, ReceiveEndpointContext receiveEndpointContext);
}
[EditorBrowsableAttribute("1")]
public static class MassTransit.AzureServiceBusTransport.Defaults : object {
    [CompilerGeneratedAttribute]
private static TimeSpan <LockDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <DefaultMessageTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <BasicMessageTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <AutoDeleteOnIdle>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <TemporaryAutoDeleteOnIdle>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <MaxAutoRenewDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <SessionIdleTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <ShutdownTimeout>k__BackingField;
    public static TimeSpan LockDuration { get; public set; }
    public static TimeSpan DefaultMessageTimeToLive { get; public set; }
    public static TimeSpan BasicMessageTimeToLive { get; public set; }
    public static TimeSpan AutoDeleteOnIdle { get; public set; }
    public static TimeSpan TemporaryAutoDeleteOnIdle { get; public set; }
    public static TimeSpan MaxAutoRenewDuration { get; public set; }
    [ObsoleteAttribute("use SessionIdleTimeout instead")]
public static TimeSpan MessageWaitTimeout { get; public set; }
    public static TimeSpan SessionIdleTimeout { get; public set; }
    public static TimeSpan ShutdownTimeout { get; public set; }
    private static Defaults();
    [CompilerGeneratedAttribute]
public static TimeSpan get_LockDuration();
    [CompilerGeneratedAttribute]
public static void set_LockDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public static TimeSpan get_DefaultMessageTimeToLive();
    [CompilerGeneratedAttribute]
public static void set_DefaultMessageTimeToLive(TimeSpan value);
    [CompilerGeneratedAttribute]
public static TimeSpan get_BasicMessageTimeToLive();
    [CompilerGeneratedAttribute]
public static void set_BasicMessageTimeToLive(TimeSpan value);
    [CompilerGeneratedAttribute]
public static TimeSpan get_AutoDeleteOnIdle();
    [CompilerGeneratedAttribute]
public static void set_AutoDeleteOnIdle(TimeSpan value);
    [CompilerGeneratedAttribute]
public static TimeSpan get_TemporaryAutoDeleteOnIdle();
    [CompilerGeneratedAttribute]
public static void set_TemporaryAutoDeleteOnIdle(TimeSpan value);
    [CompilerGeneratedAttribute]
public static TimeSpan get_MaxAutoRenewDuration();
    [CompilerGeneratedAttribute]
public static void set_MaxAutoRenewDuration(TimeSpan value);
    public static TimeSpan get_MessageWaitTimeout();
    public static void set_MessageWaitTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public static TimeSpan get_SessionIdleTimeout();
    [CompilerGeneratedAttribute]
public static void set_SessionIdleTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public static TimeSpan get_ShutdownTimeout();
    [CompilerGeneratedAttribute]
public static void set_ShutdownTimeout(TimeSpan value);
    public static CreateQueueOptions GetCreateQueueOptions(string queueName);
    public static CreateTopicOptions GetCreateTopicOptions(string topicName);
}
public class MassTransit.AzureServiceBusTransport.DelegateSessionIdFormatter`1 : object {
    private Func`2<SendContext`1<TMessage>, string> _formatter;
    public DelegateSessionIdFormatter`1(Func`2<SendContext`1<TMessage>, string> formatter);
    public sealed virtual string FormatSessionId(SendContext`1<TMessage> context);
}
public class MassTransit.AzureServiceBusTransport.EmptySessionIdFormatter : object {
    private sealed virtual override string MassTransit.AzureServiceBusTransport.ISessionIdFormatter.FormatSessionId(SendContext`1<T> context);
}
public interface MassTransit.AzureServiceBusTransport.IClientContextSupervisor {
}
public interface MassTransit.AzureServiceBusTransport.IConnectionContextSupervisor {
    public abstract virtual IClientContextSupervisor CreateClientContextSupervisor(Func`2<IConnectionContextSupervisor, IPipeContextFactory`1<ClientContext>> factory);
    public abstract virtual ISendEndpointContextSupervisor CreateSendEndpointContextSupervisor(SendSettings settings);
    public abstract virtual Task`1<ISendTransport> CreateSendTransport(ReceiveEndpointContext context, Uri address);
    public abstract virtual Task`1<ISendTransport> CreatePublishTransport(ReceiveEndpointContext context, Uri publishAddress);
    public abstract virtual Uri NormalizeAddress(Uri address);
}
public interface MassTransit.AzureServiceBusTransport.IMessageSessionIdFormatter`1 {
    public abstract virtual string FormatSessionId(SendContext`1<TMessage> context);
}
public interface MassTransit.AzureServiceBusTransport.IReceiver {
    public abstract virtual void Start();
}
public interface MassTransit.AzureServiceBusTransport.ISendEndpointContextSupervisor {
}
public interface MassTransit.AzureServiceBusTransport.IServiceBusHost {
    public abstract virtual HostReceiveEndpointHandle ConnectSubscriptionEndpoint(string subscriptionName, Action`1<IServiceBusSubscriptionEndpointConfigurator> configure);
    public abstract virtual HostReceiveEndpointHandle ConnectSubscriptionEndpoint(string subscriptionName, string topicName, Action`1<IServiceBusSubscriptionEndpointConfigurator> configure);
}
public interface MassTransit.AzureServiceBusTransport.IServiceBusMessageReceiver {
    public abstract virtual Task Handle(ServiceBusReceivedMessage message, CancellationToken cancellationToken);
}
public interface MassTransit.AzureServiceBusTransport.ISessionIdFormatter {
    public abstract virtual string FormatSessionId(SendContext`1<T> context);
}
public interface MassTransit.AzureServiceBusTransport.MessageLockContext {
    public abstract virtual Task Complete();
    public abstract virtual Task Abandon(Exception exception);
    public abstract virtual Task DeadLetter();
    public abstract virtual Task DeadLetter(Exception exception);
}
public class MassTransit.AzureServiceBusTransport.MessageReceiver : object {
    private static string PathDelimiter;
    private static string SubscriptionsSubPath;
    private IAsyncBusHandle _busHandle;
    private IServiceBusHostConfiguration _hostConfiguration;
    private ConcurrentDictionary`2<string, Lazy`1<IServiceBusMessageReceiver>> _receivers;
    private IBusRegistrationContext _registration;
    public MessageReceiver(IBusRegistrationContext registration, IAsyncBusHandle busHandle, IBusInstance busInstance);
    public sealed virtual Task Handle(string queueName, ServiceBusReceivedMessage message, CancellationToken cancellationToken);
    public sealed virtual Task Handle(string topicPath, string subscriptionName, ServiceBusReceivedMessage message, CancellationToken cancellationToken);
    public sealed virtual Task HandleConsumer(string queueName, ServiceBusReceivedMessage message, CancellationToken cancellationToken);
    public sealed virtual Task HandleConsumer(string topicPath, string subscriptionName, ServiceBusReceivedMessage message, CancellationToken cancellationToken);
    public sealed virtual Task HandleSaga(string queueName, ServiceBusReceivedMessage message, CancellationToken cancellationToken);
    public sealed virtual Task HandleSaga(string topicPath, string subscriptionName, ServiceBusReceivedMessage message, CancellationToken cancellationToken);
    public sealed virtual Task HandleExecuteActivity(string queueName, ServiceBusReceivedMessage message, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    private IServiceBusMessageReceiver CreateMessageReceiver(string queueName, Action`1<IReceiveEndpointConfigurator> configure);
    private IServiceBusMessageReceiver CreateMessageReceiver(string topicPath, string subscriptionName, Action`1<IReceiveEndpointConfigurator> configure);
    [CompilerGeneratedAttribute]
private void <Handle>b__7_0(IReceiveEndpointConfigurator cfg);
    [CompilerGeneratedAttribute]
private void <Handle>b__8_0(IReceiveEndpointConfigurator cfg);
    [CompilerGeneratedAttribute]
private void <HandleConsumer>b__9_0(IReceiveEndpointConfigurator cfg);
    [CompilerGeneratedAttribute]
private void <HandleConsumer>b__10_0(IReceiveEndpointConfigurator cfg);
    [CompilerGeneratedAttribute]
private void <HandleSaga>b__11_0(IReceiveEndpointConfigurator cfg);
    [CompilerGeneratedAttribute]
private void <HandleSaga>b__12_0(IReceiveEndpointConfigurator cfg);
    [CompilerGeneratedAttribute]
private void <HandleExecuteActivity>b__13_0(IReceiveEndpointConfigurator cfg);
    [CompilerGeneratedAttribute]
internal static void <CreateMessageReceiver>g__NoConfigure|16_2(IServiceBusSubscriptionEndpointConfigurator _);
}
public class MassTransit.AzureServiceBusTransport.MessageSendEndpointContext : BasePipeContext {
    private ServiceBusSender _client;
    [CompilerGeneratedAttribute]
private ConnectionContext <ConnectionContext>k__BackingField;
    public ConnectionContext ConnectionContext { get; }
    public string EntityPath { get; }
    public MessageSendEndpointContext(ConnectionContext connectionContext, ServiceBusSender client);
    [CompilerGeneratedAttribute]
public sealed virtual ConnectionContext get_ConnectionContext();
    public sealed virtual string get_EntityPath();
    public sealed virtual Task Send(ServiceBusMessage message);
    public sealed virtual Task`1<long> ScheduleSend(ServiceBusMessage message, DateTime scheduleEnqueueTimeUtc);
    public sealed virtual Task CancelScheduledSend(long sequenceNumber);
}
public interface MassTransit.AzureServiceBusTransport.MessageSessionContext {
    public string SessionId { get; }
    public DateTime LockedUntilUtc { get; }
    public abstract virtual string get_SessionId();
    public abstract virtual DateTime get_LockedUntilUtc();
    public abstract virtual Task`1<BinaryData> GetStateAsync();
    public abstract virtual Task SetStateAsync(BinaryData state);
    public abstract virtual Task RenewLockAsync(ServiceBusReceivedMessage message);
}
public class MassTransit.AzureServiceBusTransport.MessageSessionIdFormatter`1 : object {
    private ISessionIdFormatter _formatter;
    public MessageSessionIdFormatter`1(ISessionIdFormatter formatter);
    public sealed virtual string FormatSessionId(SendContext`1<TMessage> context);
}
public static class MassTransit.AzureServiceBusTransport.MessageSessionSagaRepository : object {
    public static ISagaRepository`1<T> Create();
}
public class MassTransit.AzureServiceBusTransport.MessageSessionSagaRepositoryContext`2 : ConsumeContextScope`1<TMessage> {
    private ConsumeContext`1<TMessage> _consumeContext;
    private ISagaConsumeContextFactory`2<MessageSessionContext, TSaga> _factory;
    private MessageSessionContext _sessionContext;
    public MessageSessionSagaRepositoryContext`2(ConsumeContext`1<TMessage> consumeContext, ISagaConsumeContextFactory`2<MessageSessionContext, TSaga> factory);
    public sealed virtual Task`1<SagaConsumeContext`2<TSaga, T>> CreateSagaConsumeContext(ConsumeContext`1<T> consumeContext, TSaga instance, SagaConsumeContextMode mode);
    public sealed virtual Task`1<SagaConsumeContext`2<TSaga, TMessage>> Add(TSaga instance);
    public sealed virtual Task`1<SagaConsumeContext`2<TSaga, TMessage>> Insert(TSaga instance);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.MessageSessionSagaRepositoryContext`2/<Load>d__7")]
public sealed virtual Task`1<SagaConsumeContext`2<TSaga, TMessage>> Load(Guid correlationId);
    public sealed virtual Task Save(SagaConsumeContext`1<TSaga> context);
    public sealed virtual Task Update(SagaConsumeContext`1<TSaga> context);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.MessageSessionSagaRepositoryContext`2/<Delete>d__10")]
public sealed virtual Task Delete(SagaConsumeContext`1<TSaga> context);
    public sealed virtual Task Discard(SagaConsumeContext`1<TSaga> context);
    public sealed virtual Task Undo(SagaConsumeContext`1<TSaga> context);
    private static Task WriteSagaState(MessageSessionContext context, TSaga saga);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.MessageSessionSagaRepositoryContext`2/<ReadSagaState>d__14")]
private static Task`1<TSaga> ReadSagaState(MessageSessionContext context);
}
public class MassTransit.AzureServiceBusTransport.MessageSessionSagaRepositoryContextFactory`1 : object {
    private ISagaConsumeContextFactory`2<MessageSessionContext, TSaga> _factory;
    public MessageSessionSagaRepositoryContextFactory`1(ISagaConsumeContextFactory`2<MessageSessionContext, TSaga> factory);
    public sealed virtual void Probe(ProbeContext context);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.MessageSessionSagaRepositoryContextFactory`1/<Send>d__3`1")]
public sealed virtual Task Send(ConsumeContext`1<T> context, IPipe`1<SagaRepositoryContext`2<TSaga, T>> next);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.MessageSessionSagaRepositoryContextFactory`1/<SendQuery>d__4`1")]
public sealed virtual Task SendQuery(ConsumeContext`1<T> context, ISagaQuery`1<TSaga> query, IPipe`1<SagaRepositoryQueryContext`2<TSaga, T>> next);
}
public class MassTransit.AzureServiceBusTransport.Middleware.ConfigureServiceBusTopologyFilter`1 : object {
    private BrokerTopology _brokerTopology;
    private ServiceBusReceiveEndpointContext _context;
    private bool _removeSubscriptions;
    private TSettings _settings;
    public ConfigureServiceBusTopologyFilter`1(TSettings settings, BrokerTopology brokerTopology, bool removeSubscriptions, ServiceBusReceiveEndpointContext context);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.Middleware.ConfigureServiceBusTopologyFilter`1/<Send>d__5")]
public sealed virtual Task Send(ClientContext context, IPipe`1<ClientContext> next);
    public sealed virtual void Probe(ProbeContext context);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.Middleware.ConfigureServiceBusTopologyFilter`1/<Send>d__7")]
public sealed virtual Task Send(SendEndpointContext context, IPipe`1<SendEndpointContext> next);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.Middleware.ConfigureServiceBusTopologyFilter`1/<ConfigureTopology>d__8")]
private Task`1<OneTimeContext`1<ConfigureTopologyContext`1<TSettings>>> ConfigureTopology(NamespaceContext context);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.Middleware.ConfigureServiceBusTopologyFilter`1/<ConfigureTopology>d__9")]
private Task ConfigureTopology(ConnectionContext context);
    private Task Create(ConnectionContext context, Topic topic);
    private Task Create(ConnectionContext context, Queue queue);
    private Task Create(ConnectionContext context, Subscription subscription);
    private Task Create(ConnectionContext context, QueueSubscription subscription);
    private Task Delete(ConnectionContext context, QueueSubscription subscription);
    private Task Create(ConnectionContext context, TopicSubscription subscription);
}
public interface MassTransit.AzureServiceBusTransport.Middleware.ConfigureTopologyContext`1 {
}
public class MassTransit.AzureServiceBusTransport.Middleware.DeadLetterQueueExceptionFilter : object {
    private sealed virtual override void MassTransit.IProbeSite.Probe(ProbeContext context);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.Middleware.DeadLetterQueueExceptionFilter/<MassTransit-IFilter<MassTransit-ExceptionReceiveContext>-Send>d__1")]
private sealed virtual override Task MassTransit.IFilter<MassTransit.ExceptionReceiveContext>.Send(ExceptionReceiveContext context, IPipe`1<ExceptionReceiveContext> next);
}
public class MassTransit.AzureServiceBusTransport.Middleware.DeadLetterQueueFilter : object {
    private sealed virtual override void MassTransit.IProbeSite.Probe(ProbeContext context);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.Middleware.DeadLetterQueueFilter/<MassTransit-IFilter<MassTransit-ReceiveContext>-Send>d__1")]
private sealed virtual override Task MassTransit.IFilter<MassTransit.ReceiveContext>.Send(ReceiveContext context, IPipe`1<ReceiveContext> next);
}
public class MassTransit.AzureServiceBusTransport.Middleware.MessageReceiverFilter : object {
    private IReceiveTransportObserver _transportObserver;
    protected ServiceBusReceiveEndpointContext Context;
    public MessageReceiverFilter(ServiceBusReceiveEndpointContext context);
    public virtual void Probe(ProbeContext context);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.Middleware.MessageReceiverFilter/<MassTransit-IFilter<MassTransit-AzureServiceBusTransport-ClientContext>-Send>d__4")]
private sealed virtual override Task MassTransit.IFilter<MassTransit.AzureServiceBusTransport.ClientContext>.Send(ClientContext context, IPipe`1<ClientContext> next);
    protected virtual IReceiver CreateMessageReceiver(ClientContext context);
}
public class MassTransit.AzureServiceBusTransport.Middleware.MessageSessionReceiverFilter : MessageReceiverFilter {
    public MessageSessionReceiverFilter(ServiceBusReceiveEndpointContext context);
    public virtual void Probe(ProbeContext context);
    protected virtual IReceiver CreateMessageReceiver(ClientContext context);
}
public class MassTransit.AzureServiceBusTransport.Middleware.RemoveServiceBusTopologyAgent : Agent {
    private BrokerTopology _brokerTopology;
    private ConnectionContext _context;
    public RemoveServiceBusTopologyAgent(ConnectionContext context, BrokerTopology brokerTopology);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.Middleware.RemoveServiceBusTopologyAgent/<StopAgent>d__3")]
protected virtual Task StopAgent(StopContext context);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.Middleware.RemoveServiceBusTopologyAgent/<RemoveSubscriptions>d__4")]
private Task RemoveSubscriptions(ConnectionContext context);
    private static Task Delete(ConnectionContext context, QueueSubscription subscription);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(StopContext context);
}
public class MassTransit.AzureServiceBusTransport.Middleware.ServiceBusMessageSchedulerFilter : object {
    private sealed virtual override void MassTransit.IProbeSite.Probe(ProbeContext context);
    [DebuggerNonUserCodeAttribute]
private sealed virtual override Task MassTransit.IFilter<MassTransit.ConsumeContext>.Send(ConsumeContext context, IPipe`1<ConsumeContext> next);
    private static IMessageScheduler SchedulerFactory(ConsumeContext context);
}
public class MassTransit.AzureServiceBusTransport.Middleware.ServiceBusSendContextFilter`1 : object {
    private IFilter`1<ServiceBusSendContext`1<T>> _filter;
    public ServiceBusSendContextFilter`1(IFilter`1<ServiceBusSendContext`1<T>> filter);
    public sealed virtual Task Send(SendContext`1<T> context, IPipe`1<SendContext`1<T>> next);
    public sealed virtual void Probe(ProbeContext context);
}
public class MassTransit.AzureServiceBusTransport.Middleware.SetSessionIdFilter`1 : object {
    private IMessageSessionIdFormatter`1<T> _sessionIdFormatter;
    public SetSessionIdFilter`1(IMessageSessionIdFormatter`1<T> sessionIdFormatter);
    public sealed virtual Task Send(ServiceBusSendContext`1<T> context, IPipe`1<ServiceBusSendContext`1<T>> next);
    public sealed virtual void Probe(ProbeContext context);
}
public interface MassTransit.AzureServiceBusTransport.NamespaceContext {
    public ConnectionContext ConnectionContext { get; }
    public abstract virtual ConnectionContext get_ConnectionContext();
}
public class MassTransit.AzureServiceBusTransport.QueueClientContext : BasePipeContext {
    private IAgent _agent;
    private ReceiveSettings _settings;
    private ServiceBusProcessor _processor;
    private ServiceBusSessionProcessor _sessionProcessor;
    [CompilerGeneratedAttribute]
private ConnectionContext <ConnectionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <InputAddress>k__BackingField;
    public ConnectionContext ConnectionContext { get; }
    public string EntityPath { get; }
    public bool IsClosedOrClosing { get; }
    public Uri InputAddress { get; }
    public QueueClientContext(ConnectionContext connectionContext, Uri inputAddress, ReceiveSettings settings, IAgent agent);
    [CompilerGeneratedAttribute]
public sealed virtual ConnectionContext get_ConnectionContext();
    public sealed virtual string get_EntityPath();
    public sealed virtual bool get_IsClosedOrClosing();
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_InputAddress();
    public sealed virtual void OnMessageAsync(Func`4<ProcessMessageEventArgs, ServiceBusReceivedMessage, CancellationToken, Task> callback, Func`2<ProcessErrorEventArgs, Task> exceptionHandler);
    public sealed virtual void OnSessionAsync(Func`4<ProcessSessionMessageEventArgs, ServiceBusReceivedMessage, CancellationToken, Task> callback, Func`2<ProcessErrorEventArgs, Task> exceptionHandler);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.QueueClientContext/<StartAsync>d__17")]
public sealed virtual Task StartAsync();
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.QueueClientContext/<ShutdownAsync>d__18")]
public sealed virtual Task ShutdownAsync();
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.QueueClientContext/<CloseAsync>d__19")]
public sealed virtual Task CloseAsync();
    public sealed virtual Task NotifyFaulted(Exception exception, string entityPath);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.QueueClientContext/<DisposeAsync>d__21")]
public sealed virtual ValueTask DisposeAsync();
}
public class MassTransit.AzureServiceBusTransport.QueueClientContextFactory : ClientContextFactory {
    private ReceiveSettings _settings;
    public QueueClientContextFactory(IConnectionContextSupervisor supervisor, ReceiveSettings settings);
    protected virtual ClientContext CreateClientContext(ConnectionContext connectionContext, Uri inputAddress, IAgent agent);
}
public class MassTransit.AzureServiceBusTransport.Receiver : ConsumerAgent`1<long> {
    private ClientContext _clientContext;
    private ServiceBusReceiveEndpointContext _context;
    public Receiver(ClientContext clientClientContext, ServiceBusReceiveEndpointContext context);
    public virtual void Start();
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.Receiver/<ExceptionHandler>d__4")]
protected Task ExceptionHandler(ProcessErrorEventArgs args);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.Receiver/<ActiveAndActualAgentsCompleted>d__5")]
protected virtual Task ActiveAndActualAgentsCompleted(StopContext context);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.Receiver/<OnMessage>d__6")]
private Task OnMessage(ProcessMessageEventArgs messageReceiver, ServiceBusReceivedMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.Receiver/<Dispatch>d__7")]
protected Task Dispatch(ServiceBusReceivedMessage message, ServiceBusReceiveContext context, MessageLockContext lockContext);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(StopContext context);
}
public interface MassTransit.AzureServiceBusTransport.ReceiveSettings {
    public abstract virtual CreateQueueOptions GetCreateQueueOptions();
}
internal static class MassTransit.AzureServiceBusTransport.ScheduledMessageToken : object {
    internal static ulong Tag;
    internal static Byte[] Key;
    private static ScheduledMessageToken();
}
public interface MassTransit.AzureServiceBusTransport.SendEndpointContext {
    public string EntityPath { get; }
    public abstract virtual string get_EntityPath();
    public abstract virtual Task Send(ServiceBusMessage message);
    public abstract virtual Task`1<long> ScheduleSend(ServiceBusMessage message, DateTime scheduleEnqueueTimeUtc);
    public abstract virtual Task CancelScheduledSend(long sequenceNumber);
}
public class MassTransit.AzureServiceBusTransport.SendEndpointContextFactory : object {
    private IPipe`1<SendEndpointContext> _pipe;
    private SendSettings _settings;
    private IConnectionContextSupervisor _supervisor;
    public SendEndpointContextFactory(IConnectionContextSupervisor supervisor, IPipe`1<SendEndpointContext> pipe, SendSettings settings);
    public sealed virtual IPipeContextAgent`1<SendEndpointContext> CreateContext(ISupervisor supervisor);
    public sealed virtual IActivePipeContextAgent`1<SendEndpointContext> CreateActiveContext(ISupervisor supervisor, PipeContextHandle`1<SendEndpointContext> context, CancellationToken cancellationToken);
    private void CreateSendEndpointContext(IAsyncPipeContextAgent`1<SendEndpointContext> asyncContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.SendEndpointContextFactory/<CreateSharedContext>d__7")]
private static Task`1<SendEndpointContext> CreateSharedContext(Task`1<SendEndpointContext> context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.SendEndpointContextFactory/<<CreateSendEndpointContext>g__Create|6_0>d")]
[CompilerGeneratedAttribute]
private Task`1<SendEndpointContext> <CreateSendEndpointContext>g__Create|6_0(ConnectionContext context, CancellationToken createCancellationToken);
}
public class MassTransit.AzureServiceBusTransport.SendEndpointContextSupervisor : TransportPipeContextSupervisor`1<SendEndpointContext> {
    public SendEndpointContextSupervisor(IPipeContextFactory`1<SendEndpointContext> contextFactory);
}
public interface MassTransit.AzureServiceBusTransport.SendSettings {
    public string EntityPath { get; }
    public abstract virtual string get_EntityPath();
    public abstract virtual BrokerTopology GetBrokerTopology();
}
public class MassTransit.AzureServiceBusTransport.ServiceBusConnectionContext : BasePipeContext {
    private ServiceBusAdministrationClient _administrationClient;
    private ServiceBusClient _client;
    [CompilerGeneratedAttribute]
private Uri <Endpoint>k__BackingField;
    public Uri Endpoint { get; }
    public ServiceBusConnectionContext(ServiceBusClient client, ServiceBusAdministrationClient administrationClient, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Endpoint();
    public sealed virtual ServiceBusProcessor CreateQueueProcessor(ReceiveSettings settings);
    public sealed virtual ServiceBusSessionProcessor CreateQueueSessionProcessor(ReceiveSettings settings);
    public sealed virtual ServiceBusProcessor CreateSubscriptionProcessor(SubscriptionSettings settings);
    public sealed virtual ServiceBusSessionProcessor CreateSubscriptionSessionProcessor(SubscriptionSettings settings);
    public sealed virtual ServiceBusSender CreateMessageSender(string entityPath);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.ServiceBusConnectionContext/<CreateQueue>d__11")]
public sealed virtual Task`1<QueueProperties> CreateQueue(CreateQueueOptions createQueueOptions);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.ServiceBusConnectionContext/<CreateTopic>d__12")]
public sealed virtual Task`1<TopicProperties> CreateTopic(CreateTopicOptions createTopicOptions);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.ServiceBusConnectionContext/<CreateTopicSubscription>d__13")]
public sealed virtual Task`1<SubscriptionProperties> CreateTopicSubscription(CreateSubscriptionOptions createSubscriptionOptions, CreateRuleOptions rule, RuleFilter filter);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.ServiceBusConnectionContext/<DeleteTopicSubscription>d__14")]
public sealed virtual Task DeleteTopicSubscription(CreateSubscriptionOptions subscriptionOptions);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.ServiceBusConnectionContext/<DisposeAsync>d__15")]
public sealed virtual ValueTask DisposeAsync();
    private static ServiceBusSessionProcessorOptions GetSessionProcessorOptions(ClientSettings settings);
    private static ServiceBusProcessorOptions GetProcessorOptions(ClientSettings settings);
    private Task`1<QueueProperties> GetQueueAsync(string path);
    private Task`1<QueueProperties> CreateQueueAsync(CreateQueueOptions createQueueOptions);
    private Task`1<TopicProperties> GetTopicAsync(string path);
    private Task`1<TopicProperties> CreateTopicAsync(CreateTopicOptions createTopicOptions);
    private Task`1<SubscriptionProperties> GetSubscriptionAsync(string topicPath, string subscriptionName);
    private Task DeleteSubscriptionAsync(CreateSubscriptionOptions subscriptionOptions);
    private Task`1<SubscriptionProperties> UpdateSubscriptionAsync(SubscriptionProperties subscriptionProperties);
    private Task`1<RuleProperties> GetRuleAsync(string topicPath, string subscriptionName, string ruleName);
    private Task`1<IList`1<RuleProperties>> GetRulesAsync(string topicPath, string subscriptionName);
    private Task`1<RuleProperties> UpdateRuleAsync(string topicPath, string subscriptionName, RuleProperties ruleProperties);
    private Task`1<SubscriptionProperties> CreateSubscriptionAsync(CreateSubscriptionOptions createSubscriptionOptions, CreateRuleOptions rule);
    private Task`1<SubscriptionProperties> CreateSubscriptionAsync(CreateSubscriptionOptions createSubscriptionOptions, RuleFilter filter);
    private Task`1<SubscriptionProperties> CreateSubscriptionAsync(CreateSubscriptionOptions createSubscriptionOptions);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.ServiceBusConnectionContext/<RunOperation>d__31`1")]
private static Task`1<T> RunOperation(Func`1<Task`1<T>> operation);
    [CompilerGeneratedAttribute]
private string <CreateTopicSubscription>g__NormalizeForwardTo|13_0(string forwardTo);
}
public class MassTransit.AzureServiceBusTransport.ServiceBusEntityReceiveEndpointContext : BaseReceiveEndpointContext {
    private Recycle`1<IClientContextSupervisor> _clientContext;
    private IServiceBusHostConfiguration _hostConfiguration;
    [CompilerGeneratedAttribute]
private BrokerTopology <BrokerTopology>k__BackingField;
    public BrokerTopology BrokerTopology { get; }
    public IClientContextSupervisor ClientContextSupervisor { get; }
    public ServiceBusEntityReceiveEndpointContext(IServiceBusHostConfiguration hostConfiguration, IServiceBusEntityEndpointConfiguration configuration, BrokerTopology brokerTopology, Func`1<IClientContextSupervisor> supervisorFactory);
    [CompilerGeneratedAttribute]
public sealed virtual BrokerTopology get_BrokerTopology();
    public sealed virtual IClientContextSupervisor get_ClientContextSupervisor();
    public virtual void Probe(ProbeContext context);
    public virtual void AddSendAgent(IAgent agent);
    public virtual void AddConsumeAgent(IAgent agent);
    public virtual Exception ConvertException(Exception exception, string message);
    protected virtual ISendTransportProvider CreateSendTransportProvider();
    protected virtual IPublishTransportProvider CreatePublishTransportProvider();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private IServiceBusBusTopology <.ctor>b__2_0();
}
public class MassTransit.AzureServiceBusTransport.ServiceBusHeaderProvider : object {
    private ServiceBusReceivedMessage _message;
    public ServiceBusHeaderProvider(ServiceBusReceivedMessage message);
    [IteratorStateMachineAttribute("MassTransit.AzureServiceBusTransport.ServiceBusHeaderProvider/<GetAll>d__2")]
public sealed virtual IEnumerable`1<KeyValuePair`2<string, object>> GetAll();
    public sealed virtual bool TryGetHeader(string key, Object& value);
}
public class MassTransit.AzureServiceBusTransport.ServiceBusHost : BaseHost {
    private IServiceBusHostConfiguration _hostConfiguration;
    [CompilerGeneratedAttribute]
private IServiceBusBusTopology <Topology>k__BackingField;
    public IServiceBusBusTopology Topology { get; }
    public ServiceBusHost(IServiceBusHostConfiguration hostConfiguration, IServiceBusBusTopology busTopology);
    [CompilerGeneratedAttribute]
public IServiceBusBusTopology get_Topology();
    public virtual HostReceiveEndpointHandle ConnectReceiveEndpoint(IEndpointDefinition definition, IEndpointNameFormatter endpointNameFormatter, Action`1<IReceiveEndpointConfigurator> configureEndpoint);
    public virtual HostReceiveEndpointHandle ConnectReceiveEndpoint(string queueName, Action`1<IReceiveEndpointConfigurator> configureEndpoint);
    public sealed virtual HostReceiveEndpointHandle ConnectReceiveEndpoint(IEndpointDefinition definition, IEndpointNameFormatter endpointNameFormatter, Action`1<IServiceBusReceiveEndpointConfigurator> configureEndpoint);
    public sealed virtual HostReceiveEndpointHandle ConnectReceiveEndpoint(string queueName, Action`1<IServiceBusReceiveEndpointConfigurator> configure);
    public sealed virtual HostReceiveEndpointHandle ConnectSubscriptionEndpoint(string subscriptionName, Action`1<IServiceBusSubscriptionEndpointConfigurator> configure);
    public sealed virtual HostReceiveEndpointHandle ConnectSubscriptionEndpoint(string subscriptionName, string topicName, Action`1<IServiceBusSubscriptionEndpointConfigurator> configure);
    protected virtual void Probe(ProbeContext context);
    private HostReceiveEndpointHandle ConnectSubscriptionEndpoint(IServiceBusSubscriptionEndpointConfiguration configuration);
    protected virtual IAgent[] GetAgentHandles();
}
public class MassTransit.AzureServiceBusTransport.ServiceBusInstance : TransportBusInstance`1<IServiceBusReceiveEndpointConfigurator> {
    private IServiceBusHost _host;
    public ServiceBusInstance(IBusControl busControl, IHost`1<IServiceBusReceiveEndpointConfigurator> host, IHostConfiguration hostConfiguration, IBusRegistrationContext busRegistrationContext);
    public sealed virtual HostReceiveEndpointHandle ConnectSubscriptionEndpoint(string subscriptionName, Action`1<IServiceBusSubscriptionEndpointConfigurator> configure);
    public sealed virtual HostReceiveEndpointHandle ConnectSubscriptionEndpoint(string subscriptionName, string topicName, Action`1<IServiceBusSubscriptionEndpointConfigurator> configure);
    public sealed virtual HostReceiveEndpointHandle ConnectSubscriptionEndpoint(string subscriptionName, Action`2<IBusRegistrationContext, IServiceBusSubscriptionEndpointConfigurator> configure);
    public sealed virtual HostReceiveEndpointHandle ConnectSubscriptionEndpoint(string subscriptionName, string topicName, Action`2<IBusRegistrationContext, IServiceBusSubscriptionEndpointConfigurator> configure);
}
public class MassTransit.AzureServiceBusTransport.ServiceBusMessageBody : object {
    private BinaryData _data;
    public Nullable`1<long> Length { get; }
    public ServiceBusMessageBody(BinaryData data);
    public sealed virtual Nullable`1<long> get_Length();
    public sealed virtual Stream GetStream();
    public sealed virtual Byte[] GetBytes();
    public sealed virtual string GetString();
}
public class MassTransit.AzureServiceBusTransport.ServiceBusMessageLockContext : object {
    private ProcessMessageEventArgs _eventArgs;
    private ServiceBusReceivedMessage _message;
    private bool _deadLettered;
    public ServiceBusMessageLockContext(ProcessMessageEventArgs eventArgs, ServiceBusReceivedMessage message);
    public sealed virtual Task Complete();
    public sealed virtual Task Abandon(Exception exception);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.ServiceBusMessageLockContext/<DeadLetter>d__6")]
public sealed virtual Task DeadLetter();
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.ServiceBusMessageLockContext/<DeadLetter>d__7")]
public sealed virtual Task DeadLetter(Exception exception);
}
public class MassTransit.AzureServiceBusTransport.ServiceBusMessageNameFormatter : object {
    private IMessageNameFormatter _formatter;
    public ServiceBusMessageNameFormatter(string namespaceSeparator);
    public sealed virtual string GetMessageName(Type type);
}
public class MassTransit.AzureServiceBusTransport.ServiceBusMessageReceiver : object {
    private ReceiveEndpointContext _context;
    private IReceivePipeDispatcher _dispatcher;
    public ServiceBusMessageReceiver(ReceiveEndpointContext context);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.ServiceBusMessageReceiver/<Handle>d__3")]
public sealed virtual Task Handle(ServiceBusReceivedMessage message, CancellationToken cancellationToken);
}
public class MassTransit.AzureServiceBusTransport.ServiceBusMessageSessionContext : object {
    private ProcessSessionMessageEventArgs _session;
    public DateTime LockedUntilUtc { get; }
    public string SessionId { get; }
    public ServiceBusMessageSessionContext(ProcessSessionMessageEventArgs session);
    public sealed virtual Task`1<BinaryData> GetStateAsync();
    public sealed virtual Task SetStateAsync(BinaryData state);
    public sealed virtual Task RenewLockAsync(ServiceBusReceivedMessage message);
    public sealed virtual DateTime get_LockedUntilUtc();
    public sealed virtual string get_SessionId();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.AzureServiceBusTransport.ServiceBusPublishTransportProvider : object {
    private IConnectionContextSupervisor _connectionContextSupervisor;
    private ReceiveEndpointContext _context;
    public ServiceBusPublishTransportProvider(IConnectionContextSupervisor connectionContextSupervisor, ReceiveEndpointContext context);
    public sealed virtual Task`1<ISendTransport> GetPublishTransport(Uri publishAddress);
}
public class MassTransit.AzureServiceBusTransport.ServiceBusQueueDeadLetterTransport : ServiceBusQueueMoveTransport {
    public ServiceBusQueueDeadLetterTransport(IConnectionContextSupervisor supervisor, SendSettings settings);
    public sealed virtual Task Send(ReceiveContext context, string reason);
}
public class MassTransit.AzureServiceBusTransport.ServiceBusQueueErrorTransport : ServiceBusQueueMoveTransport {
    public ServiceBusQueueErrorTransport(IConnectionContextSupervisor supervisor, SendSettings settings);
    public sealed virtual Task Send(ExceptionReceiveContext context);
}
public class MassTransit.AzureServiceBusTransport.ServiceBusQueueMoveTransport : object {
    private Recycle`1<ISendEndpointContextSupervisor> _sendEndpointContext;
    protected ServiceBusQueueMoveTransport(IConnectionContextSupervisor supervisor, SendSettings settings);
    protected Task Move(ReceiveContext context, Action`2<ServiceBusMessage, IDictionary`2<string, object>> preSend);
}
public class MassTransit.AzureServiceBusTransport.ServiceBusReceiveContext : BaseReceiveContext {
    private ServiceBusReceivedMessage _message;
    [CompilerGeneratedAttribute]
private MessageBody <Body>k__BackingField;
    protected IHeaderProvider HeaderProvider { get; }
    public MessageBody Body { get; }
    public string MessageId { get; }
    public string CorrelationId { get; }
    public TimeSpan TimeToLive { get; }
    public DateTime ExpiresAt { get; }
    public IReadOnlyDictionary`2<string, object> Properties { get; }
    public int DeliveryCount { get; }
    public string Label { get; }
    public long SequenceNumber { get; }
    public long EnqueuedSequenceNumber { get; }
    public string LockToken { get; }
    public DateTime LockedUntil { get; }
    public string SessionId { get; }
    public long Size { get; }
    public string To { get; }
    public string ReplyToSessionId { get; }
    public string PartitionKey { get; }
    public string ReplyTo { get; }
    public DateTime EnqueuedTime { get; }
    public DateTime ScheduledEnqueueTime { get; }
    public ServiceBusReceiveContext(ServiceBusReceivedMessage message, ReceiveEndpointContext receiveEndpointContext, Object[] payloads);
    protected virtual IHeaderProvider get_HeaderProvider();
    [CompilerGeneratedAttribute]
public virtual MessageBody get_Body();
    public sealed virtual string get_MessageId();
    public sealed virtual string get_CorrelationId();
    public sealed virtual TimeSpan get_TimeToLive();
    public sealed virtual DateTime get_ExpiresAt();
    public sealed virtual IReadOnlyDictionary`2<string, object> get_Properties();
    public sealed virtual int get_DeliveryCount();
    public sealed virtual string get_Label();
    public sealed virtual long get_SequenceNumber();
    public sealed virtual long get_EnqueuedSequenceNumber();
    public sealed virtual string get_LockToken();
    public sealed virtual DateTime get_LockedUntil();
    public sealed virtual string get_SessionId();
    public sealed virtual long get_Size();
    public sealed virtual string get_To();
    public sealed virtual string get_ReplyToSessionId();
    public sealed virtual string get_PartitionKey();
    public sealed virtual string get_ReplyTo();
    public sealed virtual DateTime get_EnqueuedTime();
    public sealed virtual DateTime get_ScheduledEnqueueTime();
    public sealed virtual IDictionary`2<string, object> GetTransportProperties();
    protected virtual ContentType GetContentType();
}
public interface MassTransit.AzureServiceBusTransport.ServiceBusReceiveEndpointContext {
    public BrokerTopology BrokerTopology { get; }
    public IClientContextSupervisor ClientContextSupervisor { get; }
    public abstract virtual BrokerTopology get_BrokerTopology();
    public abstract virtual IClientContextSupervisor get_ClientContextSupervisor();
}
public class MassTransit.AzureServiceBusTransport.ServiceBusReceiveLockContext : object {
    private Uri _inputAddress;
    private MessageLockContext _lockContext;
    private ServiceBusReceivedMessage _message;
    public ServiceBusReceiveLockContext(Uri inputAddress, MessageLockContext lockContext, ServiceBusReceivedMessage message);
    public sealed virtual Task Complete();
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.ServiceBusReceiveLockContext/<Faulted>d__5")]
public sealed virtual Task Faulted(Exception exception);
    public sealed virtual Task ValidateLockStatus();
}
public class MassTransit.AzureServiceBusTransport.ServiceBusRegistrationBusFactory : TransportRegistrationBusFactory`1<IServiceBusReceiveEndpointConfigurator> {
    private ServiceBusBusConfiguration _busConfiguration;
    private Action`2<IBusRegistrationContext, IServiceBusBusFactoryConfigurator> _configure;
    public ServiceBusRegistrationBusFactory(Action`2<IBusRegistrationContext, IServiceBusBusFactoryConfigurator> configure);
    private ServiceBusRegistrationBusFactory(ServiceBusBusConfiguration busConfiguration, Action`2<IBusRegistrationContext, IServiceBusBusFactoryConfigurator> configure);
    public virtual IBusInstance CreateBus(IBusRegistrationContext context, IEnumerable`1<IBusInstanceSpecification> specifications, string busName);
    protected virtual IBusInstance CreateBusInstance(IBusControl bus, IHost`1<IServiceBusReceiveEndpointConfigurator> host, IHostConfiguration hostConfiguration, IBusRegistrationContext context);
}
public class MassTransit.AzureServiceBusTransport.ServiceBusSendTransportContext : BaseSendTransportContext {
    private static ITransportSetHeaderAdapter`1<object> _adapter;
    private IServiceBusHostConfiguration _hostConfiguration;
    private ISendEndpointContextSupervisor _supervisor;
    [CompilerGeneratedAttribute]
private string <EntityName>k__BackingField;
    public string EntityName { get; }
    public string ActivitySystem { get; }
    public ServiceBusSendTransportContext(IServiceBusHostConfiguration hostConfiguration, ReceiveEndpointContext receiveEndpointContext, ISendEndpointContextSupervisor supervisor, SendSettings settings);
    private static ServiceBusSendTransportContext();
    [CompilerGeneratedAttribute]
public virtual string get_EntityName();
    public virtual string get_ActivitySystem();
    public sealed virtual Task Send(IPipe`1<SendEndpointContext> pipe, CancellationToken cancellationToken);
    public sealed virtual void Probe(ProbeContext context);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.ServiceBusSendTransportContext/<CreateSendContext>d__11`1")]
public virtual Task`1<SendContext`1<T>> CreateSendContext(T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    public virtual IEnumerable`1<IAgent> GetAgentHandles();
    public sealed virtual Task`1<SendContext`1<T>> CreateSendContext(SendEndpointContext context, T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.ServiceBusSendTransportContext/<Send>d__14`1")]
public sealed virtual Task Send(SendEndpointContext sendEndpointContext, SendContext`1<T> sendContext);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.ServiceBusSendTransportContext/<ScheduleSend>d__15`1")]
private static Task`1<bool> ScheduleSend(SendEndpointContext clientContext, AzureServiceBusSendContext`1<T> context);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.ServiceBusSendTransportContext/<CancelScheduledSend>d__16")]
private Task CancelScheduledSend(SendEndpointContext clientContext, Guid tokenId, long sequenceNumber);
    private static bool IsCancelScheduledSend(AzureServiceBusSendContext`1<T> context, Guid& tokenId, Int64& sequenceNumber);
    private static ServiceBusMessage CreateMessage(AzureServiceBusSendContext`1<T> context);
    private static void CopyIncomingIdentifiersIfPresent(AzureServiceBusSendContext`1<T> context);
}
public class MassTransit.AzureServiceBusTransport.ServiceBusSendTransportProvider : object {
    private IConnectionContextSupervisor _connectionContextSupervisor;
    private ReceiveEndpointContext _context;
    public ServiceBusSendTransportProvider(IConnectionContextSupervisor connectionContextSupervisor, ReceiveEndpointContext context);
    public sealed virtual Uri NormalizeAddress(Uri address);
    private sealed virtual override Task`1<ISendTransport> MassTransit.Transports.ISendTransportProvider.GetSendTransport(Uri address);
}
public class MassTransit.AzureServiceBusTransport.ServiceBusSessionMessageLockContext : object {
    private ServiceBusReceivedMessage _message;
    private ProcessSessionMessageEventArgs _session;
    private bool _deadLettered;
    public ServiceBusSessionMessageLockContext(ProcessSessionMessageEventArgs session, ServiceBusReceivedMessage message);
    public sealed virtual Task Complete();
    public sealed virtual Task Abandon(Exception exception);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.ServiceBusSessionMessageLockContext/<DeadLetter>d__6")]
public sealed virtual Task DeadLetter();
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.ServiceBusSessionMessageLockContext/<DeadLetter>d__7")]
public sealed virtual Task DeadLetter(Exception exception);
}
public class MassTransit.AzureServiceBusTransport.SessionReceiver : Receiver {
    private ClientContext _clientContext;
    private ServiceBusReceiveEndpointContext _context;
    public SessionReceiver(ClientContext clientContext, ServiceBusReceiveEndpointContext context);
    public virtual void Start();
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.SessionReceiver/<OnSession>d__4")]
private Task OnSession(ProcessSessionMessageEventArgs messageSession, ServiceBusReceivedMessage message, CancellationToken cancellationToken);
}
public class MassTransit.AzureServiceBusTransport.SharedClientContext : ProxyPipeContext {
    private ClientContext _context;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public CancellationToken CancellationToken { get; }
    public ConnectionContext ConnectionContext { get; }
    public Uri InputAddress { get; }
    public string EntityPath { get; }
    public bool IsClosedOrClosing { get; }
    public SharedClientContext(ClientContext context, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public virtual CancellationToken get_CancellationToken();
    public sealed virtual ConnectionContext get_ConnectionContext();
    public sealed virtual Uri get_InputAddress();
    public sealed virtual string get_EntityPath();
    public sealed virtual bool get_IsClosedOrClosing();
    public sealed virtual void OnMessageAsync(Func`4<ProcessMessageEventArgs, ServiceBusReceivedMessage, CancellationToken, Task> callback, Func`2<ProcessErrorEventArgs, Task> exceptionHandler);
    public sealed virtual void OnSessionAsync(Func`4<ProcessSessionMessageEventArgs, ServiceBusReceivedMessage, CancellationToken, Task> callback, Func`2<ProcessErrorEventArgs, Task> exceptionHandler);
    public sealed virtual Task StartAsync();
    public sealed virtual Task ShutdownAsync();
    public sealed virtual Task CloseAsync();
    public sealed virtual Task NotifyFaulted(Exception exception, string entityPath);
}
public class MassTransit.AzureServiceBusTransport.SharedConnectionContext : ProxyPipeContext {
    private ConnectionContext _context;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public CancellationToken CancellationToken { get; }
    private Uri MassTransit.AzureServiceBusTransport.ConnectionContext.Endpoint { get; }
    public SharedConnectionContext(ConnectionContext context, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public virtual CancellationToken get_CancellationToken();
    public sealed virtual ServiceBusProcessor CreateQueueProcessor(ReceiveSettings settings);
    public sealed virtual ServiceBusSessionProcessor CreateQueueSessionProcessor(ReceiveSettings settings);
    public sealed virtual ServiceBusProcessor CreateSubscriptionProcessor(SubscriptionSettings settings);
    public sealed virtual ServiceBusSessionProcessor CreateSubscriptionSessionProcessor(SubscriptionSettings settings);
    public sealed virtual ServiceBusSender CreateMessageSender(string entityPath);
    public sealed virtual Task`1<QueueProperties> CreateQueue(CreateQueueOptions createQueueOptions);
    public sealed virtual Task`1<TopicProperties> CreateTopic(CreateTopicOptions createTopicOptions);
    public sealed virtual Task`1<SubscriptionProperties> CreateTopicSubscription(CreateSubscriptionOptions createSubscriptionOptions, CreateRuleOptions rule, RuleFilter filter);
    public sealed virtual Task DeleteTopicSubscription(CreateSubscriptionOptions subscriptionOptions);
    private sealed virtual override Uri MassTransit.AzureServiceBusTransport.ConnectionContext.get_Endpoint();
}
public class MassTransit.AzureServiceBusTransport.SharedSendEndpointContext : ProxyPipeContext {
    private SendEndpointContext _context;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public CancellationToken CancellationToken { get; }
    public ConnectionContext ConnectionContext { get; }
    private string MassTransit.AzureServiceBusTransport.SendEndpointContext.EntityPath { get; }
    public SharedSendEndpointContext(SendEndpointContext context, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public virtual CancellationToken get_CancellationToken();
    public sealed virtual ConnectionContext get_ConnectionContext();
    private sealed virtual override string MassTransit.AzureServiceBusTransport.SendEndpointContext.get_EntityPath();
    private sealed virtual override Task MassTransit.AzureServiceBusTransport.SendEndpointContext.Send(ServiceBusMessage message);
    private sealed virtual override Task`1<long> MassTransit.AzureServiceBusTransport.SendEndpointContext.ScheduleSend(ServiceBusMessage message, DateTime scheduleEnqueueTimeUtc);
    private sealed virtual override Task MassTransit.AzureServiceBusTransport.SendEndpointContext.CancelScheduledSend(long sequenceNumber);
}
[ExtensionAttribute]
internal static class MassTransit.AzureServiceBusTransport.StreamExtensions : object {
    [ExtensionAttribute]
public static Byte[] ReadAsBytes(Stream stream);
}
public class MassTransit.AzureServiceBusTransport.SubscriptionClientContext : BasePipeContext {
    private IAgent _agent;
    private SubscriptionSettings _settings;
    private ServiceBusProcessor _queueClient;
    private ServiceBusSessionProcessor _sessionClient;
    [CompilerGeneratedAttribute]
private ConnectionContext <ConnectionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <InputAddress>k__BackingField;
    public ConnectionContext ConnectionContext { get; }
    public string EntityPath { get; }
    public bool IsClosedOrClosing { get; }
    public Uri InputAddress { get; }
    public SubscriptionClientContext(ConnectionContext connectionContext, Uri inputAddress, SubscriptionSettings settings, IAgent agent);
    [CompilerGeneratedAttribute]
public sealed virtual ConnectionContext get_ConnectionContext();
    public sealed virtual string get_EntityPath();
    public sealed virtual bool get_IsClosedOrClosing();
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_InputAddress();
    public sealed virtual void OnMessageAsync(Func`4<ProcessMessageEventArgs, ServiceBusReceivedMessage, CancellationToken, Task> callback, Func`2<ProcessErrorEventArgs, Task> exceptionHandler);
    public sealed virtual void OnSessionAsync(Func`4<ProcessSessionMessageEventArgs, ServiceBusReceivedMessage, CancellationToken, Task> callback, Func`2<ProcessErrorEventArgs, Task> exceptionHandler);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.SubscriptionClientContext/<StartAsync>d__17")]
public sealed virtual Task StartAsync();
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.SubscriptionClientContext/<ShutdownAsync>d__18")]
public sealed virtual Task ShutdownAsync();
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.SubscriptionClientContext/<CloseAsync>d__19")]
public sealed virtual Task CloseAsync();
    public sealed virtual Task NotifyFaulted(Exception exception, string entityPath);
    [AsyncStateMachineAttribute("MassTransit.AzureServiceBusTransport.SubscriptionClientContext/<DisposeAsync>d__21")]
public sealed virtual ValueTask DisposeAsync();
}
public class MassTransit.AzureServiceBusTransport.SubscriptionClientContextFactory : ClientContextFactory {
    private SubscriptionSettings _settings;
    public SubscriptionClientContextFactory(IConnectionContextSupervisor supervisor, SubscriptionSettings settings);
    protected virtual ClientContext CreateClientContext(ConnectionContext connectionContext, Uri inputAddress, IAgent agent);
}
public interface MassTransit.AzureServiceBusTransport.SubscriptionSettings {
    public CreateTopicOptions CreateTopicOptions { get; }
    public CreateSubscriptionOptions CreateSubscriptionOptions { get; }
    public CreateRuleOptions Rule { get; }
    public RuleFilter Filter { get; }
    public abstract virtual CreateTopicOptions get_CreateTopicOptions();
    public abstract virtual CreateSubscriptionOptions get_CreateSubscriptionOptions();
    public abstract virtual CreateRuleOptions get_Rule();
    public abstract virtual RuleFilter get_Filter();
}
public abstract class MassTransit.AzureServiceBusTransport.Topology.BaseClientSettings : object {
    private IServiceBusEndpointConfiguration _configuration;
    [CompilerGeneratedAttribute]
private IServiceBusEndpointEntityConfigurator <Configurator>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <SessionIdleTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxAutoRenewDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public IServiceBusEndpointEntityConfigurator Configurator { get; }
    public bool RequiresSession { get; }
    public int MaxConcurrentCallsPerSession { get; }
    public TimeSpan SessionIdleTimeout { get; public set; }
    public int MaxConcurrentCalls { get; }
    public int PrefetchCount { get; }
    public TimeSpan MaxAutoRenewDuration { get; public set; }
    public string Path { get; }
    public string Name { get; public set; }
    protected BaseClientSettings(IServiceBusEndpointConfiguration configuration, IServiceBusEndpointEntityConfigurator configurator);
    [CompilerGeneratedAttribute]
public IServiceBusEndpointEntityConfigurator get_Configurator();
    public abstract virtual bool get_RequiresSession();
    public abstract virtual int get_MaxConcurrentCallsPerSession();
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_SessionIdleTimeout();
    [CompilerGeneratedAttribute]
public void set_SessionIdleTimeout(TimeSpan value);
    public sealed virtual int get_MaxConcurrentCalls();
    public sealed virtual int get_PrefetchCount();
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_MaxAutoRenewDuration();
    [CompilerGeneratedAttribute]
public void set_MaxAutoRenewDuration(TimeSpan value);
    public abstract virtual string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public sealed virtual Uri GetInputAddress(Uri serviceUri, string path);
    protected abstract virtual IEnumerable`1<string> GetQueryStringOptions();
}
public interface MassTransit.AzureServiceBusTransport.Topology.BrokerTopology {
    public Topic[] Topics { get; }
    public Queue[] Queues { get; }
    public Subscription[] Subscriptions { get; }
    public QueueSubscription[] QueueSubscriptions { get; }
    public TopicSubscription[] TopicSubscriptions { get; }
    public abstract virtual Topic[] get_Topics();
    public abstract virtual Queue[] get_Queues();
    public abstract virtual Subscription[] get_Subscriptions();
    public abstract virtual QueueSubscription[] get_QueueSubscriptions();
    public abstract virtual TopicSubscription[] get_TopicSubscriptions();
}
public class MassTransit.AzureServiceBusTransport.Topology.BrokerTopologyBuilder : object {
    private long _nextId;
    [CompilerGeneratedAttribute]
private EntityCollection`2<SubscriptionEntity, SubscriptionHandle> <Subscriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private NamedEntityCollection`2<TopicEntity, TopicHandle> <Topics>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityCollection`2<QueueSubscriptionEntity, QueueSubscriptionHandle> <QueueSubscriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityCollection`2<TopicSubscriptionEntity, TopicSubscriptionHandle> <TopicSubscriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private NamedEntityCollection`2<QueueEntity, QueueHandle> <Queues>k__BackingField;
    protected EntityCollection`2<SubscriptionEntity, SubscriptionHandle> Subscriptions { get; }
    protected NamedEntityCollection`2<TopicEntity, TopicHandle> Topics { get; }
    protected EntityCollection`2<QueueSubscriptionEntity, QueueSubscriptionHandle> QueueSubscriptions { get; }
    protected EntityCollection`2<TopicSubscriptionEntity, TopicSubscriptionHandle> TopicSubscriptions { get; }
    protected NamedEntityCollection`2<QueueEntity, QueueHandle> Queues { get; }
    [CompilerGeneratedAttribute]
protected EntityCollection`2<SubscriptionEntity, SubscriptionHandle> get_Subscriptions();
    [CompilerGeneratedAttribute]
protected NamedEntityCollection`2<TopicEntity, TopicHandle> get_Topics();
    [CompilerGeneratedAttribute]
protected EntityCollection`2<QueueSubscriptionEntity, QueueSubscriptionHandle> get_QueueSubscriptions();
    [CompilerGeneratedAttribute]
protected EntityCollection`2<TopicSubscriptionEntity, TopicSubscriptionHandle> get_TopicSubscriptions();
    [CompilerGeneratedAttribute]
protected NamedEntityCollection`2<QueueEntity, QueueHandle> get_Queues();
    public sealed virtual TopicHandle CreateTopic(CreateTopicOptions createTopicOptions);
    public sealed virtual SubscriptionHandle CreateSubscription(TopicHandle topic, CreateSubscriptionOptions createSubscriptionOptions, CreateRuleOptions rule, RuleFilter filter);
    public sealed virtual QueueHandle CreateQueue(CreateQueueOptions createQueueOptions);
    public sealed virtual QueueSubscriptionHandle CreateQueueSubscription(TopicHandle exchange, QueueHandle queue, CreateSubscriptionOptions createSubscriptionOptions, CreateRuleOptions rule, RuleFilter filter);
    public sealed virtual TopicSubscriptionHandle CreateTopicSubscription(TopicHandle source, TopicHandle destination, CreateSubscriptionOptions createSubscriptionOptions);
    public BrokerTopology BuildBrokerTopology();
    private long GetNextId();
}
public static class MassTransit.AzureServiceBusTransport.Topology.EntityNameFormatter : object {
    private static string PathDelimiter;
    private static string Subscriptions;
    private static string SubQueuePrefix;
    private static string DeadLetterQueueSuffix;
    private static string ErrorQueueSuffix;
    private static string DeadLetterQueueName;
    private static string ErrorQueueName;
    public static string FormatDeadLetterPath(string entityPath);
    public static string FormatErrorPath(string entityPath);
    public static string FormatSubQueuePath(string entityPath, string subQueueName);
    public static string FormatSubscriptionPath(string topicPath, string subscriptionName);
}
public interface MassTransit.AzureServiceBusTransport.Topology.IBrokerTopologyBuilder {
    public abstract virtual TopicHandle CreateTopic(CreateTopicOptions createTopicOptions);
    public abstract virtual SubscriptionHandle CreateSubscription(TopicHandle topic, CreateSubscriptionOptions createSubscriptionOptions, CreateRuleOptions rule, RuleFilter filter);
    public abstract virtual TopicSubscriptionHandle CreateTopicSubscription(TopicHandle source, TopicHandle destination, CreateSubscriptionOptions createSubscriptionOptions);
    public abstract virtual QueueHandle CreateQueue(CreateQueueOptions createQueueOptions);
    public abstract virtual QueueSubscriptionHandle CreateQueueSubscription(TopicHandle exchange, QueueHandle queue, CreateSubscriptionOptions createSubscriptionOptions, CreateRuleOptions rule, RuleFilter filter);
}
public interface MassTransit.AzureServiceBusTransport.Topology.IPublishEndpointBrokerTopologyBuilder {
    public TopicHandle Topic { get; public set; }
    public abstract virtual TopicHandle get_Topic();
    public abstract virtual void set_Topic(TopicHandle value);
    public abstract virtual IPublishEndpointBrokerTopologyBuilder CreateImplementedBuilder();
}
public interface MassTransit.AzureServiceBusTransport.Topology.IReceiveEndpointBrokerTopologyBuilder {
    public QueueHandle Queue { get; }
    public abstract virtual QueueHandle get_Queue();
}
public interface MassTransit.AzureServiceBusTransport.Topology.ISendEndpointBrokerTopologyBuilder {
    public QueueHandle Queue { get; public set; }
    public abstract virtual QueueHandle get_Queue();
    public abstract virtual void set_Queue(QueueHandle value);
}
public interface MassTransit.AzureServiceBusTransport.Topology.ISubscriptionEndpointBrokerTopologyBuilder {
    public TopicHandle Topic { get; }
    public abstract virtual TopicHandle get_Topic();
}
public class MassTransit.AzureServiceBusTransport.Topology.PublishEndpointBrokerTopologyBuilder : BrokerTopologyBuilder {
    private Options _options;
    private IServiceBusPublishTopology _topology;
    [CompilerGeneratedAttribute]
private TopicHandle <Topic>k__BackingField;
    public TopicHandle Topic { get; public set; }
    public PublishEndpointBrokerTopologyBuilder(IServiceBusPublishTopology topology, Options options);
    [CompilerGeneratedAttribute]
public sealed virtual TopicHandle get_Topic();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Topic(TopicHandle value);
    public sealed virtual IPublishEndpointBrokerTopologyBuilder CreateImplementedBuilder();
}
public interface MassTransit.AzureServiceBusTransport.Topology.Queue {
    public CreateQueueOptions CreateQueueOptions { get; }
    public abstract virtual CreateQueueOptions get_CreateQueueOptions();
}
public class MassTransit.AzureServiceBusTransport.Topology.QueueEntity : object {
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<QueueEntity> <NameComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<QueueEntity> <EntityComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private CreateQueueOptions <CreateQueueOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    public static IEqualityComparer`1<QueueEntity> NameComparer { get; }
    public static IEqualityComparer`1<QueueEntity> EntityComparer { get; }
    public CreateQueueOptions CreateQueueOptions { get; }
    public long Id { get; }
    public Queue Queue { get; }
    public QueueEntity(long id, CreateQueueOptions createQueueOptions);
    private static QueueEntity();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<QueueEntity> get_NameComparer();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<QueueEntity> get_EntityComparer();
    [CompilerGeneratedAttribute]
public sealed virtual CreateQueueOptions get_CreateQueueOptions();
    [CompilerGeneratedAttribute]
public sealed virtual long get_Id();
    public sealed virtual Queue get_Queue();
    public virtual string ToString();
}
public interface MassTransit.AzureServiceBusTransport.Topology.QueueHandle {
    public Queue Queue { get; }
    public abstract virtual Queue get_Queue();
}
public class MassTransit.AzureServiceBusTransport.Topology.QueueSendSettings : object {
    private CreateQueueOptions _createQueueOptions;
    unknown Nullable`1<TimeSpan> AutoDeleteOnIdle {public set; }
    unknown Nullable`1<TimeSpan> DefaultMessageTimeToLive {public set; }
    unknown Nullable`1<bool> EnableBatchedOperations {public set; }
    unknown string UserMetadata {public set; }
    public string EntityPath { get; }
    public QueueSendSettings(CreateQueueOptions createQueueOptions);
    public sealed virtual void set_AutoDeleteOnIdle(Nullable`1<TimeSpan> value);
    public sealed virtual void set_DefaultMessageTimeToLive(Nullable`1<TimeSpan> value);
    public sealed virtual void set_EnableBatchedOperations(Nullable`1<bool> value);
    public sealed virtual void set_UserMetadata(string value);
    public sealed virtual string get_EntityPath();
    public sealed virtual BrokerTopology GetBrokerTopology();
}
public interface MassTransit.AzureServiceBusTransport.Topology.QueueSubscription {
    public Topic Source { get; }
    public Queue Destination { get; }
    public Subscription Subscription { get; }
    public abstract virtual Topic get_Source();
    public abstract virtual Queue get_Destination();
    public abstract virtual Subscription get_Subscription();
}
public class MassTransit.AzureServiceBusTransport.Topology.QueueSubscriptionEntity : object {
    private QueueEntity _queue;
    private SubscriptionEntity _subscription;
    private TopicEntity _topic;
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<QueueSubscriptionEntity> <EntityComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<QueueSubscriptionEntity> <NameComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    public static IEqualityComparer`1<QueueSubscriptionEntity> EntityComparer { get; }
    public static IEqualityComparer`1<QueueSubscriptionEntity> NameComparer { get; }
    public Topic Source { get; }
    public Queue Destination { get; }
    public Subscription Subscription { get; }
    public long Id { get; }
    public QueueSubscription QueueSubscription { get; }
    public QueueSubscriptionEntity(long id, long subscriptionId, TopicEntity topic, QueueEntity queue, CreateSubscriptionOptions createSubscriptionOptions, CreateRuleOptions rule, RuleFilter filter);
    private static QueueSubscriptionEntity();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<QueueSubscriptionEntity> get_EntityComparer();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<QueueSubscriptionEntity> get_NameComparer();
    public sealed virtual Topic get_Source();
    public sealed virtual Queue get_Destination();
    public sealed virtual Subscription get_Subscription();
    [CompilerGeneratedAttribute]
public sealed virtual long get_Id();
    public sealed virtual QueueSubscription get_QueueSubscription();
    public virtual string ToString();
}
public interface MassTransit.AzureServiceBusTransport.Topology.QueueSubscriptionHandle {
    public QueueSubscription QueueSubscription { get; }
    public abstract virtual QueueSubscription get_QueueSubscription();
}
public class MassTransit.AzureServiceBusTransport.Topology.ReceiveEndpointBrokerTopologyBuilder : BrokerTopologyBuilder {
    [CompilerGeneratedAttribute]
private QueueHandle <Queue>k__BackingField;
    public QueueHandle Queue { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual QueueHandle get_Queue();
    [CompilerGeneratedAttribute]
public void set_Queue(QueueHandle value);
}
public class MassTransit.AzureServiceBusTransport.Topology.ReceiveEndpointSettings : BaseClientSettings {
    private ServiceBusQueueConfigurator _queueConfigurator;
    [CompilerGeneratedAttribute]
private bool <RemoveSubscriptions>k__BackingField;
    public IServiceBusQueueConfigurator QueueConfigurator { get; }
    public bool RequiresSession { get; }
    public bool RemoveSubscriptions { get; public set; }
    public int MaxConcurrentCallsPerSession { get; }
    public string Path { get; }
    public ReceiveEndpointSettings(IServiceBusEndpointConfiguration endpointConfiguration, string queueName, ServiceBusQueueConfigurator queueConfigurator);
    public IServiceBusQueueConfigurator get_QueueConfigurator();
    public virtual bool get_RequiresSession();
    [CompilerGeneratedAttribute]
public bool get_RemoveSubscriptions();
    [CompilerGeneratedAttribute]
public void set_RemoveSubscriptions(bool value);
    public virtual int get_MaxConcurrentCallsPerSession();
    public virtual string get_Path();
    public sealed virtual CreateQueueOptions GetCreateQueueOptions();
    [IteratorStateMachineAttribute("MassTransit.AzureServiceBusTransport.Topology.ReceiveEndpointSettings/<GetQueryStringOptions>d__15")]
protected virtual IEnumerable`1<string> GetQueryStringOptions();
}
public class MassTransit.AzureServiceBusTransport.Topology.SendEndpointBrokerTopologyBuilder : BrokerTopologyBuilder {
    [CompilerGeneratedAttribute]
private QueueHandle <Queue>k__BackingField;
    public QueueHandle Queue { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual QueueHandle get_Queue();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Queue(QueueHandle value);
}
public class MassTransit.AzureServiceBusTransport.Topology.ServiceBusBrokerTopology : object {
    [CompilerGeneratedAttribute]
private Topic[] <Topics>k__BackingField;
    [CompilerGeneratedAttribute]
private Queue[] <Queues>k__BackingField;
    [CompilerGeneratedAttribute]
private Subscription[] <Subscriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private QueueSubscription[] <QueueSubscriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private TopicSubscription[] <TopicSubscriptions>k__BackingField;
    public Topic[] Topics { get; }
    public Queue[] Queues { get; }
    public Subscription[] Subscriptions { get; }
    public QueueSubscription[] QueueSubscriptions { get; }
    public TopicSubscription[] TopicSubscriptions { get; }
    public ServiceBusBrokerTopology(IEnumerable`1<Topic> topics, IEnumerable`1<Subscription> subscriptions, IEnumerable`1<Queue> queues, IEnumerable`1<QueueSubscription> queueSubscriptions, IEnumerable`1<TopicSubscription> topicSubscriptions);
    [CompilerGeneratedAttribute]
public sealed virtual Topic[] get_Topics();
    [CompilerGeneratedAttribute]
public sealed virtual Queue[] get_Queues();
    [CompilerGeneratedAttribute]
public sealed virtual Subscription[] get_Subscriptions();
    [CompilerGeneratedAttribute]
public sealed virtual QueueSubscription[] get_QueueSubscriptions();
    [CompilerGeneratedAttribute]
public sealed virtual TopicSubscription[] get_TopicSubscriptions();
    private sealed virtual override void MassTransit.IProbeSite.Probe(ProbeContext context);
    private static object GetSubscriptionValues(Subscription subscription);
}
public class MassTransit.AzureServiceBusTransport.Topology.ServiceBusBusTopology : BusTopology {
    private IServiceBusTopologyConfiguration _configuration;
    private IServiceBusHostConfiguration _hostConfiguration;
    private IServiceBusPublishTopology MassTransit.IServiceBusBusTopology.PublishTopology { get; }
    private IServiceBusSendTopology MassTransit.IServiceBusBusTopology.SendTopology { get; }
    public ServiceBusBusTopology(IServiceBusHostConfiguration hostConfiguration, IServiceBusTopologyConfiguration configuration);
    private sealed virtual override IServiceBusPublishTopology MassTransit.IServiceBusBusTopology.get_PublishTopology();
    private sealed virtual override IServiceBusSendTopology MassTransit.IServiceBusBusTopology.get_SendTopology();
    private sealed virtual override IServiceBusMessagePublishTopology`1<T> MassTransit.IServiceBusBusTopology.Publish();
    private sealed virtual override IServiceBusMessageSendTopology`1<T> MassTransit.IServiceBusBusTopology.Send();
}
public class MassTransit.AzureServiceBusTransport.Topology.ServiceBusConsumeTopology : ConsumeTopology {
    private IMessageTopology _messageTopology;
    private IServiceBusPublishTopology _publishTopology;
    private IList`1<IServiceBusConsumeTopologySpecification> _specifications;
    public ServiceBusConsumeTopology(IMessageTopology messageTopology, IServiceBusPublishTopology publishTopology);
    private sealed virtual override IServiceBusMessageConsumeTopology`1<T> MassTransit.IServiceBusConsumeTopology.GetMessageTopology();
    private sealed virtual override IServiceBusMessageConsumeTopologyConfigurator`1<T> MassTransit.IServiceBusConsumeTopologyConfigurator.GetMessageTopology();
    public sealed virtual void AddSpecification(IServiceBusConsumeTopologySpecification specification);
    public sealed virtual void Subscribe(string topicName, string subscriptionName, Action`1<IServiceBusSubscriptionConfigurator> callback);
    public sealed virtual void Apply(IReceiveEndpointBrokerTopologyBuilder builder);
    public virtual IEnumerable`1<ValidationResult> Validate();
    protected virtual IMessageConsumeTopologyConfigurator CreateMessageTopology();
}
public class MassTransit.AzureServiceBusTransport.Topology.ServiceBusEntityNameValidator : object {
    private static Regex _regex;
    public static IEntityNameValidator Validator { get; }
    private static ServiceBusEntityNameValidator();
    public static IEntityNameValidator get_Validator();
    public sealed virtual void ThrowIfInvalidEntityName(string name);
    public sealed virtual bool IsValidEntityName(string name);
}
public class MassTransit.AzureServiceBusTransport.Topology.ServiceBusMessageConsumeTopology`1 : MessageConsumeTopology`1<TMessage> {
    private IMessageTopology`1<TMessage> _messageTopology;
    private IServiceBusMessagePublishTopology`1<TMessage> _publishTopology;
    private IList`1<IServiceBusConsumeTopologySpecification> _specifications;
    public ServiceBusMessageConsumeTopology`1(IMessageTopology`1<TMessage> messageTopology, IServiceBusMessagePublishTopology`1<TMessage> publishTopology);
    public sealed virtual void Apply(IReceiveEndpointBrokerTopologyBuilder builder);
    public sealed virtual void Subscribe(string subscriptionName, Action`1<IServiceBusSubscriptionConfigurator> configure);
    public virtual IEnumerable`1<ValidationResult> Validate();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.AzureServiceBusTransport.Topology.ServiceBusMessagePublishTopology`1 : MessagePublishTopology`1<TMessage> {
    private Lazy`1<CreateTopicOptions> _createTopicOptions;
    private IList`1<IServiceBusMessagePublishTopology> _implementedMessageTypes;
    private IServiceBusPublishTopology _publishTopology;
    private ServiceBusTopicConfigurator _topicConfigurator;
    public CreateTopicOptions CreateTopicOptions { get; }
    public string Path { get; }
    public string BasePath { get; public set; }
    public string FullPath { get; }
    unknown Nullable`1<TimeSpan> DuplicateDetectionHistoryTimeWindow {public set; }
    unknown Nullable`1<bool> EnablePartitioning {public set; }
    unknown Nullable`1<long> MaxSizeInMegabytes {public set; }
    unknown Nullable`1<long> MaxMessageSizeInKilobytes {public set; }
    unknown Nullable`1<bool> RequiresDuplicateDetection {public set; }
    unknown Nullable`1<bool> SupportOrdering {public set; }
    unknown Nullable`1<TimeSpan> AutoDeleteOnIdle {public set; }
    unknown Nullable`1<TimeSpan> DefaultMessageTimeToLive {public set; }
    unknown Nullable`1<bool> EnableBatchedOperations {public set; }
    unknown string UserMetadata {public set; }
    public ServiceBusMessagePublishTopology`1(IServiceBusPublishTopology publishTopology, IMessageTopology`1<TMessage> messageTopology);
    public virtual bool TryGetPublishAddress(Uri baseAddress, Uri& publishAddress);
    public sealed virtual CreateTopicOptions get_CreateTopicOptions();
    public sealed virtual SendSettings GetSendSettings();
    public sealed virtual ServiceBusSubscriptionConfigurator GetSubscriptionConfigurator(string subscriptionName);
    public sealed virtual string get_Path();
    public sealed virtual string get_BasePath();
    public sealed virtual void set_BasePath(string value);
    public sealed virtual string get_FullPath();
    public sealed virtual void set_DuplicateDetectionHistoryTimeWindow(Nullable`1<TimeSpan> value);
    public sealed virtual void set_EnablePartitioning(Nullable`1<bool> value);
    public sealed virtual void set_MaxSizeInMegabytes(Nullable`1<long> value);
    public sealed virtual void set_MaxMessageSizeInKilobytes(Nullable`1<long> value);
    public sealed virtual void set_RequiresDuplicateDetection(Nullable`1<bool> value);
    public sealed virtual void set_SupportOrdering(Nullable`1<bool> value);
    public sealed virtual void EnableDuplicateDetection(TimeSpan historyTimeWindow);
    public sealed virtual void set_AutoDeleteOnIdle(Nullable`1<TimeSpan> value);
    public sealed virtual void set_DefaultMessageTimeToLive(Nullable`1<TimeSpan> value);
    public sealed virtual void set_EnableBatchedOperations(Nullable`1<bool> value);
    public sealed virtual void set_UserMetadata(string value);
    public sealed virtual void Apply(IPublishEndpointBrokerTopologyBuilder builder);
    public void AddImplementedMessageConfigurator(IServiceBusMessagePublishTopologyConfigurator`1<T> configurator, bool direct);
    [CompilerGeneratedAttribute]
private CreateTopicOptions <.ctor>b__4_0();
}
public class MassTransit.AzureServiceBusTransport.Topology.ServiceBusMessageSendTopology`1 : MessageSendTopology`1<TMessage> {
}
public class MassTransit.AzureServiceBusTransport.Topology.ServiceBusPublishTopology : PublishTopology {
    private IMessageTopology _messageTopology;
    public ServiceBusPublishTopology(IMessageTopology messageTopology);
    private sealed virtual override IServiceBusMessagePublishTopology`1<T> MassTransit.IServiceBusPublishTopology.GetMessageTopology();
    public sealed virtual string FormatSubscriptionName(string subscriptionName);
    public sealed virtual string GenerateSubscriptionName(string entityName, string hostScope);
    private sealed virtual override IServiceBusMessagePublishTopologyConfigurator MassTransit.IServiceBusPublishTopologyConfigurator.GetMessageTopology(Type messageType);
    public sealed virtual BrokerTopology GetPublishBrokerTopology();
    private sealed virtual override IServiceBusMessagePublishTopologyConfigurator`1<T> MassTransit.IServiceBusPublishTopologyConfigurator.GetMessageTopology();
    protected virtual IMessagePublishTopologyConfigurator CreateMessageTopology();
}
public class MassTransit.AzureServiceBusTransport.Topology.ServiceBusSendTopology : SendTopology {
    [CompilerGeneratedAttribute]
private Action`1<IServiceBusEntityConfigurator> <ConfigureErrorSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IServiceBusEntityConfigurator> <ConfigureDeadLetterSettings>k__BackingField;
    public Action`1<IServiceBusEntityConfigurator> ConfigureErrorSettings { get; public set; }
    public Action`1<IServiceBusEntityConfigurator> ConfigureDeadLetterSettings { get; public set; }
    [CompilerGeneratedAttribute]
public Action`1<IServiceBusEntityConfigurator> get_ConfigureErrorSettings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConfigureErrorSettings(Action`1<IServiceBusEntityConfigurator> value);
    [CompilerGeneratedAttribute]
public Action`1<IServiceBusEntityConfigurator> get_ConfigureDeadLetterSettings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConfigureDeadLetterSettings(Action`1<IServiceBusEntityConfigurator> value);
    private sealed virtual override IServiceBusMessageSendTopology`1<T> MassTransit.IServiceBusSendTopology.GetMessageTopology();
    private sealed virtual override IServiceBusMessageSendTopologyConfigurator`1<T> MassTransit.IServiceBusSendTopologyConfigurator.GetMessageTopology();
    public sealed virtual SendSettings GetSendSettings(ServiceBusEndpointAddress address);
    public sealed virtual SendSettings GetErrorSettings(IServiceBusQueueConfigurator configurator);
    public sealed virtual SendSettings GetDeadLetterSettings(IServiceBusQueueConfigurator configurator);
    protected virtual IMessageSendTopologyConfigurator CreateMessageTopology(Type type);
    private static CreateQueueOptions GetCreateQueueOptions(ServiceBusEndpointAddress address);
    private static CreateTopicOptions GetCreateTopicOptions(ServiceBusEndpointAddress address);
}
public class MassTransit.AzureServiceBusTransport.Topology.ServiceBusSubscriptionNameValidator : object {
    private static Regex _regex;
    public static IEntityNameValidator Validator { get; }
    private static ServiceBusSubscriptionNameValidator();
    public static IEntityNameValidator get_Validator();
    public sealed virtual void ThrowIfInvalidEntityName(string name);
    public sealed virtual bool IsValidEntityName(string name);
}
public class MassTransit.AzureServiceBusTransport.Topology.SetSessionIdMessageSendTopology`1 : object {
    private IFilter`1<SendContext`1<T>> _filter;
    public SetSessionIdMessageSendTopology`1(IMessageSessionIdFormatter`1<T> sessionIdFormatter);
    public sealed virtual void Apply(ITopologyPipeBuilder`1<SendContext`1<T>> builder);
}
public interface MassTransit.AzureServiceBusTransport.Topology.Subscription {
    public CreateSubscriptionOptions CreateSubscriptionOptions { get; }
    public TopicHandle Topic { get; }
    public CreateRuleOptions Rule { get; }
    public RuleFilter Filter { get; }
    public abstract virtual CreateSubscriptionOptions get_CreateSubscriptionOptions();
    public abstract virtual TopicHandle get_Topic();
    public abstract virtual CreateRuleOptions get_Rule();
    public abstract virtual RuleFilter get_Filter();
}
public class MassTransit.AzureServiceBusTransport.Topology.SubscriptionEndpointBrokerTopologyBuilder : BrokerTopologyBuilder {
    [CompilerGeneratedAttribute]
private TopicHandle <Topic>k__BackingField;
    public TopicHandle Topic { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual TopicHandle get_Topic();
    [CompilerGeneratedAttribute]
public void set_Topic(TopicHandle value);
}
public class MassTransit.AzureServiceBusTransport.Topology.SubscriptionEndpointSettings : BaseClientSettings {
    private CreateTopicOptions _createTopicOptions;
    private ServiceBusSubscriptionConfigurator _subscriptionConfigurator;
    [CompilerGeneratedAttribute]
private CreateRuleOptions <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private RuleFilter <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveSubscriptions>k__BackingField;
    public IServiceBusSubscriptionConfigurator SubscriptionConfigurator { get; }
    public bool RequiresSession { get; }
    public int MaxConcurrentCallsPerSession { get; }
    private CreateTopicOptions MassTransit.AzureServiceBusTransport.SubscriptionSettings.CreateTopicOptions { get; }
    private CreateSubscriptionOptions MassTransit.AzureServiceBusTransport.SubscriptionSettings.CreateSubscriptionOptions { get; }
    public CreateRuleOptions Rule { get; public set; }
    public RuleFilter Filter { get; public set; }
    public string Path { get; }
    public bool RemoveSubscriptions { get; public set; }
    public SubscriptionEndpointSettings(IServiceBusEndpointConfiguration configuration, string subscriptionName, string topicName);
    public SubscriptionEndpointSettings(IServiceBusEndpointConfiguration configuration, string subscriptionName, CreateTopicOptions createTopicOptions);
    private SubscriptionEndpointSettings(IServiceBusEndpointConfiguration configuration, CreateTopicOptions createTopicOptions, ServiceBusSubscriptionConfigurator configurator);
    public IServiceBusSubscriptionConfigurator get_SubscriptionConfigurator();
    public virtual bool get_RequiresSession();
    public virtual int get_MaxConcurrentCallsPerSession();
    private sealed virtual override CreateTopicOptions MassTransit.AzureServiceBusTransport.SubscriptionSettings.get_CreateTopicOptions();
    private sealed virtual override CreateSubscriptionOptions MassTransit.AzureServiceBusTransport.SubscriptionSettings.get_CreateSubscriptionOptions();
    [CompilerGeneratedAttribute]
public sealed virtual CreateRuleOptions get_Rule();
    [CompilerGeneratedAttribute]
public void set_Rule(CreateRuleOptions value);
    [CompilerGeneratedAttribute]
public sealed virtual RuleFilter get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(RuleFilter value);
    [CompilerGeneratedAttribute]
public virtual string get_Path();
    [CompilerGeneratedAttribute]
public bool get_RemoveSubscriptions();
    [CompilerGeneratedAttribute]
public void set_RemoveSubscriptions(bool value);
    [IteratorStateMachineAttribute("MassTransit.AzureServiceBusTransport.Topology.SubscriptionEndpointSettings/<GetQueryStringOptions>d__30")]
protected virtual IEnumerable`1<string> GetQueryStringOptions();
}
public class MassTransit.AzureServiceBusTransport.Topology.SubscriptionEntity : object {
    private TopicEntity _topic;
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<SubscriptionEntity> <NameComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<SubscriptionEntity> <EntityComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private CreateSubscriptionOptions <CreateSubscriptionOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private CreateRuleOptions <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private RuleFilter <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    public static IEqualityComparer`1<SubscriptionEntity> NameComparer { get; }
    public static IEqualityComparer`1<SubscriptionEntity> EntityComparer { get; }
    public CreateSubscriptionOptions CreateSubscriptionOptions { get; }
    public TopicHandle Topic { get; }
    public CreateRuleOptions Rule { get; }
    public RuleFilter Filter { get; }
    public long Id { get; }
    public Subscription Subscription { get; }
    public SubscriptionEntity(long id, TopicEntity topic, CreateSubscriptionOptions createSubscriptionOptions, CreateRuleOptions rule, RuleFilter filter);
    private static SubscriptionEntity();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<SubscriptionEntity> get_NameComparer();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<SubscriptionEntity> get_EntityComparer();
    [CompilerGeneratedAttribute]
public sealed virtual CreateSubscriptionOptions get_CreateSubscriptionOptions();
    public sealed virtual TopicHandle get_Topic();
    [CompilerGeneratedAttribute]
public sealed virtual CreateRuleOptions get_Rule();
    [CompilerGeneratedAttribute]
public sealed virtual RuleFilter get_Filter();
    [CompilerGeneratedAttribute]
public sealed virtual long get_Id();
    public sealed virtual Subscription get_Subscription();
    public virtual string ToString();
}
public interface MassTransit.AzureServiceBusTransport.Topology.SubscriptionHandle {
    public Subscription Subscription { get; }
    public abstract virtual Subscription get_Subscription();
}
public interface MassTransit.AzureServiceBusTransport.Topology.Topic {
    public CreateTopicOptions CreateTopicOptions { get; }
    public abstract virtual CreateTopicOptions get_CreateTopicOptions();
}
public class MassTransit.AzureServiceBusTransport.Topology.TopicEntity : object {
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<TopicEntity> <NameComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<TopicEntity> <EntityComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private CreateTopicOptions <CreateTopicOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    public static IEqualityComparer`1<TopicEntity> NameComparer { get; }
    public static IEqualityComparer`1<TopicEntity> EntityComparer { get; }
    public CreateTopicOptions CreateTopicOptions { get; }
    public long Id { get; }
    public Topic Topic { get; }
    public TopicEntity(long id, CreateTopicOptions createTopicOptions);
    private static TopicEntity();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<TopicEntity> get_NameComparer();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<TopicEntity> get_EntityComparer();
    [CompilerGeneratedAttribute]
public sealed virtual CreateTopicOptions get_CreateTopicOptions();
    [CompilerGeneratedAttribute]
public sealed virtual long get_Id();
    public sealed virtual Topic get_Topic();
    public virtual string ToString();
}
public interface MassTransit.AzureServiceBusTransport.Topology.TopicHandle {
    public Topic Topic { get; }
    public abstract virtual Topic get_Topic();
}
public class MassTransit.AzureServiceBusTransport.Topology.TopicSendSettings : object {
    private BrokerTopology _brokerTopology;
    private CreateTopicOptions _createTopicOptions;
    public string EntityPath { get; }
    public TopicSendSettings(CreateTopicOptions createTopicOptions, BrokerTopology brokerTopology);
    public sealed virtual string get_EntityPath();
    public sealed virtual BrokerTopology GetBrokerTopology();
}
public interface MassTransit.AzureServiceBusTransport.Topology.TopicSubscription {
    public Topic Source { get; }
    public Topic Destination { get; }
    public Subscription Subscription { get; }
    public abstract virtual Topic get_Source();
    public abstract virtual Topic get_Destination();
    public abstract virtual Subscription get_Subscription();
}
public class MassTransit.AzureServiceBusTransport.Topology.TopicSubscriptionEntity : object {
    private TopicEntity _destination;
    private TopicEntity _source;
    private SubscriptionEntity _subscription;
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<TopicSubscriptionEntity> <EntityComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<TopicSubscriptionEntity> <NameComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    public static IEqualityComparer`1<TopicSubscriptionEntity> EntityComparer { get; }
    public static IEqualityComparer`1<TopicSubscriptionEntity> NameComparer { get; }
    public Topic Source { get; }
    public Topic Destination { get; }
    public Subscription Subscription { get; }
    public long Id { get; }
    public TopicSubscription TopicSubscription { get; }
    public TopicSubscriptionEntity(long id, long subscriptionId, TopicEntity source, TopicEntity destination, CreateSubscriptionOptions createSubscriptionOptions, CreateRuleOptions rule, RuleFilter filter);
    private static TopicSubscriptionEntity();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<TopicSubscriptionEntity> get_EntityComparer();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<TopicSubscriptionEntity> get_NameComparer();
    public sealed virtual Topic get_Source();
    public sealed virtual Topic get_Destination();
    public sealed virtual Subscription get_Subscription();
    [CompilerGeneratedAttribute]
public sealed virtual long get_Id();
    public sealed virtual TopicSubscription get_TopicSubscription();
    public virtual string ToString();
}
public interface MassTransit.AzureServiceBusTransport.Topology.TopicSubscriptionHandle {
    public TopicSubscription TopicSubscription { get; }
    public abstract virtual TopicSubscription get_TopicSubscription();
}
public class MassTransit.AzureServiceBusTransportOptions : object {
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    public string ConnectionString { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public void set_ConnectionString(string value);
}
public class MassTransit.Configuration.MessageSessionSagaRepositoryRegistrationProvider : object {
    public virtual void Configure(ISagaRegistrationConfigurator`1<TSaga> configurator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.ServiceBusBusFactoryConfigurator : BusFactoryConfigurator {
    private IServiceBusBusConfiguration _busConfiguration;
    private IServiceBusHostConfiguration _hostConfiguration;
    private ServiceBusQueueConfigurator _queueConfigurator;
    private ReceiveEndpointSettings _settings;
    unknown TimeSpan DuplicateDetectionHistoryTimeWindow {public set; }
    unknown bool EnablePartitioning {public set; }
    unknown long MaxSizeInMegabytes {public set; }
    unknown long MaxMessageSizeInKilobytes {public set; }
    unknown bool RequiresDuplicateDetection {public set; }
    unknown int MaxConcurrentCalls {public set; }
    public IServiceBusSendTopologyConfigurator SendTopology { get; }
    public IServiceBusPublishTopologyConfigurator PublishTopology { get; }
    unknown TimeSpan AutoDeleteOnIdle {public set; }
    unknown TimeSpan DefaultMessageTimeToLive {public set; }
    unknown bool EnableBatchedOperations {public set; }
    unknown bool EnableDeadLetteringOnMessageExpiration {public set; }
    unknown string ForwardDeadLetteredMessagesTo {public set; }
    unknown TimeSpan LockDuration {public set; }
    unknown int MaxDeliveryCount {public set; }
    unknown bool RequiresSession {public set; }
    unknown int MaxConcurrentCallsPerSession {public set; }
    unknown string UserMetadata {public set; }
    unknown TimeSpan MessageWaitTimeout {public set; }
    unknown TimeSpan SessionIdleTimeout {public set; }
    unknown TimeSpan MaxAutoRenewDuration {public set; }
    public ServiceBusBusFactoryConfigurator(IServiceBusBusConfiguration busConfiguration);
    public sealed virtual IReceiveEndpointConfiguration CreateBusEndpointConfiguration(Action`1<IReceiveEndpointConfigurator> configure);
    public sealed virtual void set_DuplicateDetectionHistoryTimeWindow(TimeSpan value);
    public sealed virtual void set_EnablePartitioning(bool value);
    public sealed virtual void set_MaxSizeInMegabytes(long value);
    public sealed virtual void set_MaxMessageSizeInKilobytes(long value);
    public sealed virtual void set_RequiresDuplicateDetection(bool value);
    public sealed virtual void set_MaxConcurrentCalls(int value);
    public sealed virtual void OverrideDefaultBusEndpointQueueName(string value);
    public sealed virtual void SetNamespaceSeparatorToTilde();
    public sealed virtual void SetNamespaceSeparatorToUnderscore();
    public sealed virtual void SetNamespaceSeparatorTo(string separator);
    public sealed virtual void Send(Action`1<IServiceBusMessageSendTopologyConfigurator`1<T>> configureTopology);
    public sealed virtual void Publish(Action`1<IServiceBusMessagePublishTopologyConfigurator`1<T>> configureTopology);
    public sealed virtual void Publish(Type messageType, Action`1<IServiceBusMessagePublishTopologyConfigurator> configure);
    public sealed virtual IServiceBusSendTopologyConfigurator get_SendTopology();
    public sealed virtual IServiceBusPublishTopologyConfigurator get_PublishTopology();
    public sealed virtual void Host(ServiceBusHostSettings settings);
    public sealed virtual void ReceiveEndpoint(IEndpointDefinition definition, IEndpointNameFormatter endpointNameFormatter, Action`1<IServiceBusReceiveEndpointConfigurator> configureEndpoint);
    public sealed virtual void ReceiveEndpoint(IEndpointDefinition definition, IEndpointNameFormatter endpointNameFormatter, Action`1<IReceiveEndpointConfigurator> configureEndpoint);
    public sealed virtual void ReceiveEndpoint(string queueName, Action`1<IServiceBusReceiveEndpointConfigurator> configureEndpoint);
    public sealed virtual void ReceiveEndpoint(string queueName, Action`1<IReceiveEndpointConfigurator> configureEndpoint);
    public sealed virtual void SubscriptionEndpoint(string subscriptionName, Action`1<IServiceBusSubscriptionEndpointConfigurator> configure);
    public sealed virtual void SubscriptionEndpoint(string subscriptionName, string topicPath, Action`1<IServiceBusSubscriptionEndpointConfigurator> configure);
    public sealed virtual void set_AutoDeleteOnIdle(TimeSpan value);
    public sealed virtual void set_DefaultMessageTimeToLive(TimeSpan value);
    public sealed virtual void set_EnableBatchedOperations(bool value);
    public sealed virtual void set_EnableDeadLetteringOnMessageExpiration(bool value);
    public sealed virtual void set_ForwardDeadLetteredMessagesTo(string value);
    public sealed virtual void set_LockDuration(TimeSpan value);
    public sealed virtual void set_MaxDeliveryCount(int value);
    public sealed virtual void set_RequiresSession(bool value);
    public sealed virtual void set_MaxConcurrentCallsPerSession(int value);
    public sealed virtual void set_UserMetadata(string value);
    public sealed virtual void set_MessageWaitTimeout(TimeSpan value);
    public sealed virtual void set_SessionIdleTimeout(TimeSpan value);
    public sealed virtual void set_MaxAutoRenewDuration(TimeSpan value);
    public sealed virtual void EnableDuplicateDetection(TimeSpan historyTimeWindow);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.ServiceBusHostConfigurator : object {
    private HostSettings _settings;
    public ServiceBusHostSettings Settings { get; }
    unknown string ConnectionString {public set; }
    unknown AzureNamedKeyCredential NamedKeyCredential {public set; }
    unknown AzureSasCredential SasCredential {public set; }
    unknown TokenCredential TokenCredential {public set; }
    unknown ServiceBusTransportType TransportType {public set; }
    unknown TimeSpan RetryMinBackoff {public set; }
    unknown TimeSpan RetryMaxBackoff {public set; }
    unknown int RetryLimit {public set; }
    public ServiceBusHostConfigurator(Uri serviceAddress);
    public ServiceBusHostConfigurator(Uri serviceAddress, ServiceBusClient serviceBusClient, ServiceBusAdministrationClient serviceBusAdministrationClient);
    public ServiceBusHostConfigurator(string connectionString);
    public ServiceBusHostSettings get_Settings();
    public sealed virtual void set_ConnectionString(string value);
    public sealed virtual void set_NamedKeyCredential(AzureNamedKeyCredential value);
    public sealed virtual void set_SasCredential(AzureSasCredential value);
    public sealed virtual void set_TokenCredential(TokenCredential value);
    public sealed virtual void set_TransportType(ServiceBusTransportType value);
    public sealed virtual void set_RetryMinBackoff(TimeSpan value);
    public sealed virtual void set_RetryMaxBackoff(TimeSpan value);
    public sealed virtual void set_RetryLimit(int value);
    private static bool IsMissingCredentials(ServiceBusConnectionStringProperties properties);
    public static Uri ParseEndpoint(string connectionString);
}
public class MassTransit.Configuration.ServiceBusMessageSchedulerSpecification : object {
    public sealed virtual void Apply(IPipeBuilder`1<ConsumeContext> builder);
    [IteratorStateMachineAttribute("MassTransit.Configuration.ServiceBusMessageSchedulerSpecification/<Validate>d__1")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
}
public class MassTransit.Configuration.ServiceBusReceiveEndpointBuilder : ReceiveEndpointBuilder {
    private static Char[] Separator;
    private IServiceBusReceiveEndpointConfiguration _configuration;
    private IServiceBusHostConfiguration _hostConfiguration;
    public ServiceBusReceiveEndpointBuilder(IServiceBusHostConfiguration hostConfiguration, IServiceBusReceiveEndpointConfiguration configuration);
    private static ServiceBusReceiveEndpointBuilder();
    public virtual ConnectHandle ConnectConsumePipe(IPipe`1<ConsumeContext`1<T>> pipe, ConnectPipeOptions options);
    public ServiceBusReceiveEndpointContext CreateReceiveEndpointContext();
    private string GenerateSubscriptionName();
    private BrokerTopology BuildTopology(ReceiveSettings settings);
    private IClientContextSupervisor ClientContextFactory();
    [CompilerGeneratedAttribute]
private IPipeContextFactory`1<ClientContext> <ClientContextFactory>b__8_0(IConnectionContextSupervisor supervisor);
}
public class MassTransit.Configuration.ServiceBusSubscriptionEndpointBuilder : ReceiveEndpointBuilder {
    private IServiceBusSubscriptionEndpointConfiguration _configuration;
    private IServiceBusHostConfiguration _hostConfiguration;
    public ServiceBusSubscriptionEndpointBuilder(IServiceBusHostConfiguration hostConfiguration, IServiceBusSubscriptionEndpointConfiguration configuration);
    public ServiceBusReceiveEndpointContext CreateReceiveEndpointContext();
    private static BrokerTopology BuildTopology(SubscriptionSettings settings);
    private IClientContextSupervisor ClientContextFactory();
    [CompilerGeneratedAttribute]
private IPipeContextFactory`1<ClientContext> <ClientContextFactory>b__5_0(IConnectionContextSupervisor supervisor);
}
public interface MassTransit.IMessageReceiver {
    public abstract virtual Task Handle(string queueName, ServiceBusReceivedMessage message, CancellationToken cancellationToken);
    public abstract virtual Task Handle(string topicPath, string subscriptionName, ServiceBusReceivedMessage message, CancellationToken cancellationToken);
    public abstract virtual Task HandleConsumer(string queueName, ServiceBusReceivedMessage message, CancellationToken cancellationToken);
    public abstract virtual Task HandleConsumer(string topicPath, string subscriptionName, ServiceBusReceivedMessage message, CancellationToken cancellationToken);
    public abstract virtual Task HandleSaga(string queueName, ServiceBusReceivedMessage message, CancellationToken cancellationToken);
    public abstract virtual Task HandleSaga(string topicPath, string subscriptionName, ServiceBusReceivedMessage message, CancellationToken cancellationToken);
    public abstract virtual Task HandleExecuteActivity(string queueName, ServiceBusReceivedMessage message, CancellationToken cancellationToken);
}
public interface MassTransit.IServiceBusBusFactoryConfigurator {
    [NullableAttribute("1")]
public IServiceBusSendTopologyConfigurator SendTopology { get; }
    [NullableAttribute("1")]
public IServiceBusPublishTopologyConfigurator PublishTopology { get; }
    [NullableContextAttribute("1")]
public abstract virtual IServiceBusSendTopologyConfigurator get_SendTopology();
    [NullableContextAttribute("1")]
public abstract virtual IServiceBusPublishTopologyConfigurator get_PublishTopology();
    [NullableContextAttribute("1")]
public abstract virtual void Send(Action`1<IServiceBusMessageSendTopologyConfigurator`1<T>> configureTopology);
    [NullableContextAttribute("1")]
public abstract virtual void Publish(Action`1<IServiceBusMessagePublishTopologyConfigurator`1<T>> configureTopology);
    [NullableContextAttribute("1")]
public abstract virtual void Publish(Type messageType, Action`1<IServiceBusMessagePublishTopologyConfigurator> configure);
    [NullableContextAttribute("1")]
public abstract virtual void OverrideDefaultBusEndpointQueueName(string value);
    public abstract virtual void SetNamespaceSeparatorToTilde();
    public abstract virtual void SetNamespaceSeparatorToUnderscore();
    [NullableContextAttribute("1")]
public abstract virtual void SetNamespaceSeparatorTo(string separator);
    [NullableContextAttribute("1")]
public abstract virtual void Host(ServiceBusHostSettings settings);
    [NullableContextAttribute("1")]
public abstract virtual void SubscriptionEndpoint(string subscriptionName, Action`1<IServiceBusSubscriptionEndpointConfigurator> configure);
    [NullableContextAttribute("1")]
public abstract virtual void SubscriptionEndpoint(string subscriptionName, string topicPath, Action`1<IServiceBusSubscriptionEndpointConfigurator> configure);
}
public interface MassTransit.IServiceBusBusTopology {
    public IServiceBusPublishTopology PublishTopology { get; }
    public IServiceBusSendTopology SendTopology { get; }
    public abstract virtual IServiceBusPublishTopology get_PublishTopology();
    public abstract virtual IServiceBusSendTopology get_SendTopology();
    public abstract virtual IServiceBusMessagePublishTopology`1<T> Publish();
    public abstract virtual IServiceBusMessageSendTopology`1<T> Send();
}
public interface MassTransit.IServiceBusConsumeTopology {
    public abstract virtual IServiceBusMessageConsumeTopology`1<T> GetMessageTopology();
    public abstract virtual void Apply(IReceiveEndpointBrokerTopologyBuilder builder);
}
public interface MassTransit.IServiceBusConsumeTopologyConfigurator {
    public abstract virtual IServiceBusMessageConsumeTopologyConfigurator`1<T> GetMessageTopology();
    public abstract virtual void AddSpecification(IServiceBusConsumeTopologySpecification specification);
    public abstract virtual void Subscribe(string topicName, string subscriptionName, Action`1<IServiceBusSubscriptionConfigurator> callback);
}
public interface MassTransit.IServiceBusEndpointConfigurator {
    unknown int MaxConcurrentCalls {public set; }
    unknown TimeSpan AutoDeleteOnIdle {public set; }
    unknown TimeSpan DefaultMessageTimeToLive {public set; }
    unknown bool EnableBatchedOperations {public set; }
    unknown bool EnableDeadLetteringOnMessageExpiration {public set; }
    unknown string ForwardDeadLetteredMessagesTo {public set; }
    unknown TimeSpan LockDuration {public set; }
    unknown int MaxDeliveryCount {public set; }
    unknown bool RequiresSession {public set; }
    unknown int MaxConcurrentCallsPerSession {public set; }
    unknown string UserMetadata {public set; }
    [ObsoleteAttribute("use SessionIdleTimeout, which this method calls through to for now")]
unknown TimeSpan MessageWaitTimeout {public set; }
    unknown TimeSpan SessionIdleTimeout {public set; }
    unknown TimeSpan MaxAutoRenewDuration {public set; }
    public abstract virtual void set_MaxConcurrentCalls(int value);
    public abstract virtual void set_AutoDeleteOnIdle(TimeSpan value);
    public abstract virtual void set_DefaultMessageTimeToLive(TimeSpan value);
    public abstract virtual void set_EnableBatchedOperations(bool value);
    public abstract virtual void set_EnableDeadLetteringOnMessageExpiration(bool value);
    public abstract virtual void set_ForwardDeadLetteredMessagesTo(string value);
    public abstract virtual void set_LockDuration(TimeSpan value);
    public abstract virtual void set_MaxDeliveryCount(int value);
    public abstract virtual void set_RequiresSession(bool value);
    public abstract virtual void set_MaxConcurrentCallsPerSession(int value);
    public abstract virtual void set_UserMetadata(string value);
    public abstract virtual void set_MessageWaitTimeout(TimeSpan value);
    public abstract virtual void set_SessionIdleTimeout(TimeSpan value);
    public abstract virtual void set_MaxAutoRenewDuration(TimeSpan value);
}
public interface MassTransit.IServiceBusEndpointEntityConfigurator {
    unknown Nullable`1<TimeSpan> LockDuration {public set; }
    unknown Nullable`1<int> MaxDeliveryCount {public set; }
    unknown Nullable`1<bool> RequiresSession {public set; }
    unknown Nullable`1<int> MaxConcurrentCallsPerSession {public set; }
    unknown Nullable`1<bool> EnableDeadLetteringOnMessageExpiration {public set; }
    unknown string ForwardDeadLetteredMessagesTo {public set; }
    public abstract virtual void set_LockDuration(Nullable`1<TimeSpan> value);
    public abstract virtual void set_MaxDeliveryCount(Nullable`1<int> value);
    public abstract virtual void set_RequiresSession(Nullable`1<bool> value);
    public abstract virtual void set_MaxConcurrentCallsPerSession(Nullable`1<int> value);
    public abstract virtual void set_EnableDeadLetteringOnMessageExpiration(Nullable`1<bool> value);
    public abstract virtual void set_ForwardDeadLetteredMessagesTo(string value);
}
public interface MassTransit.IServiceBusEntityConfigurator {
    unknown Nullable`1<TimeSpan> AutoDeleteOnIdle {public set; }
    unknown Nullable`1<TimeSpan> DefaultMessageTimeToLive {public set; }
    unknown Nullable`1<bool> EnableBatchedOperations {public set; }
    unknown string UserMetadata {public set; }
    public abstract virtual void set_AutoDeleteOnIdle(Nullable`1<TimeSpan> value);
    public abstract virtual void set_DefaultMessageTimeToLive(Nullable`1<TimeSpan> value);
    public abstract virtual void set_EnableBatchedOperations(Nullable`1<bool> value);
    public abstract virtual void set_UserMetadata(string value);
}
public interface MassTransit.IServiceBusHostConfigurator {
    unknown AzureNamedKeyCredential NamedKeyCredential {public set; }
    unknown AzureSasCredential SasCredential {public set; }
    unknown TokenCredential TokenCredential {public set; }
    unknown string ConnectionString {public set; }
    unknown TimeSpan RetryMinBackoff {public set; }
    unknown TimeSpan RetryMaxBackoff {public set; }
    unknown int RetryLimit {public set; }
    unknown ServiceBusTransportType TransportType {public set; }
    public abstract virtual void set_NamedKeyCredential(AzureNamedKeyCredential value);
    public abstract virtual void set_SasCredential(AzureSasCredential value);
    public abstract virtual void set_TokenCredential(TokenCredential value);
    public abstract virtual void set_ConnectionString(string value);
    public abstract virtual void set_RetryMinBackoff(TimeSpan value);
    public abstract virtual void set_RetryMaxBackoff(TimeSpan value);
    public abstract virtual void set_RetryLimit(int value);
    public abstract virtual void set_TransportType(ServiceBusTransportType value);
}
public interface MassTransit.IServiceBusMessageConsumeTopology`1 {
}
public interface MassTransit.IServiceBusMessageConsumeTopologyConfigurator {
    public abstract virtual void Apply(IReceiveEndpointBrokerTopologyBuilder builder);
}
public interface MassTransit.IServiceBusMessageConsumeTopologyConfigurator`1 {
    public abstract virtual void Subscribe(string subscriptionName, Action`1<IServiceBusSubscriptionConfigurator> configure);
}
public interface MassTransit.IServiceBusMessageEntityConfigurator {
    public string Path { get; }
    public string BasePath { get; public set; }
    public string FullPath { get; }
    unknown Nullable`1<TimeSpan> DuplicateDetectionHistoryTimeWindow {public set; }
    unknown Nullable`1<bool> EnablePartitioning {public set; }
    unknown Nullable`1<long> MaxSizeInMegabytes {public set; }
    unknown Nullable`1<long> MaxMessageSizeInKilobytes {public set; }
    unknown Nullable`1<bool> RequiresDuplicateDetection {public set; }
    public abstract virtual string get_Path();
    public abstract virtual string get_BasePath();
    public abstract virtual void set_BasePath(string value);
    public abstract virtual string get_FullPath();
    public abstract virtual void set_DuplicateDetectionHistoryTimeWindow(Nullable`1<TimeSpan> value);
    public abstract virtual void set_EnablePartitioning(Nullable`1<bool> value);
    public abstract virtual void set_MaxSizeInMegabytes(Nullable`1<long> value);
    public abstract virtual void set_MaxMessageSizeInKilobytes(Nullable`1<long> value);
    public abstract virtual void set_RequiresDuplicateDetection(Nullable`1<bool> value);
    public abstract virtual void EnableDuplicateDetection(TimeSpan historyTimeWindow);
}
public interface MassTransit.IServiceBusMessagePublishTopology {
    public abstract virtual void Apply(IPublishEndpointBrokerTopologyBuilder builder);
}
public interface MassTransit.IServiceBusMessagePublishTopology`1 {
    public CreateTopicOptions CreateTopicOptions { get; }
    public abstract virtual CreateTopicOptions get_CreateTopicOptions();
    public abstract virtual SendSettings GetSendSettings();
    public abstract virtual ServiceBusSubscriptionConfigurator GetSubscriptionConfigurator(string subscriptionName);
}
public interface MassTransit.IServiceBusMessagePublishTopologyConfigurator {
}
public interface MassTransit.IServiceBusMessagePublishTopologyConfigurator`1 {
}
public interface MassTransit.IServiceBusMessageSendTopology`1 {
}
public interface MassTransit.IServiceBusMessageSendTopologyConfigurator {
}
public interface MassTransit.IServiceBusMessageSendTopologyConfigurator`1 {
}
public interface MassTransit.IServiceBusNamedKeyTokenProviderConfigurator {
    unknown AzureNamedKeyCredential NamedKeyCredential {public set; }
    public abstract virtual void set_NamedKeyCredential(AzureNamedKeyCredential value);
}
public interface MassTransit.IServiceBusPublishTopology {
    public abstract virtual IServiceBusMessagePublishTopology`1<T> GetMessageTopology();
    public abstract virtual BrokerTopology GetPublishBrokerTopology();
    public abstract virtual string FormatSubscriptionName(string name);
    public abstract virtual string GenerateSubscriptionName(string entityName, string hostScope);
}
public interface MassTransit.IServiceBusPublishTopologyConfigurator {
    public abstract virtual IServiceBusMessagePublishTopologyConfigurator`1<T> GetMessageTopology();
    public abstract virtual IServiceBusMessagePublishTopologyConfigurator GetMessageTopology(Type messageType);
}
public interface MassTransit.IServiceBusQueueConfigurator {
    unknown Nullable`1<bool> EnableDeadLetteringOnFilterEvaluationExceptions {public set; }
    unknown string ForwardTo {public set; }
    public abstract virtual void set_EnableDeadLetteringOnFilterEvaluationExceptions(Nullable`1<bool> value);
    public abstract virtual void set_ForwardTo(string value);
    public abstract virtual CreateQueueOptions GetCreateQueueOptions();
}
public interface MassTransit.IServiceBusQueueEndpointConfigurator {
    unknown TimeSpan DuplicateDetectionHistoryTimeWindow {public set; }
    unknown bool EnablePartitioning {public set; }
    unknown long MaxSizeInMegabytes {public set; }
    unknown long MaxMessageSizeInKilobytes {public set; }
    unknown bool RequiresDuplicateDetection {public set; }
    public abstract virtual void set_DuplicateDetectionHistoryTimeWindow(TimeSpan value);
    public abstract virtual void set_EnablePartitioning(bool value);
    public abstract virtual void set_MaxSizeInMegabytes(long value);
    public abstract virtual void set_MaxMessageSizeInKilobytes(long value);
    public abstract virtual void set_RequiresDuplicateDetection(bool value);
    public abstract virtual void EnableDuplicateDetection(TimeSpan historyTimeWindow);
}
public interface MassTransit.IServiceBusReceiveEndpointConfigurator {
    unknown bool RemoveSubscriptions {public set; }
    public abstract virtual void set_RemoveSubscriptions(bool value);
    public abstract virtual void Subscribe(string topicName, string subscriptionName, Action`1<IServiceBusSubscriptionConfigurator> callback);
    public abstract virtual void Subscribe(string subscriptionName, Action`1<IServiceBusSubscriptionConfigurator> callback);
}
public interface MassTransit.IServiceBusSendTopology {
    public abstract virtual IServiceBusMessageSendTopology`1<T> GetMessageTopology();
    public abstract virtual SendSettings GetSendSettings(ServiceBusEndpointAddress address);
    public abstract virtual SendSettings GetErrorSettings(IServiceBusQueueConfigurator configurator);
    public abstract virtual SendSettings GetDeadLetterSettings(IServiceBusQueueConfigurator configurator);
}
public interface MassTransit.IServiceBusSendTopologyConfigurator {
    unknown Action`1<IServiceBusEntityConfigurator> ConfigureErrorSettings {public set; }
    unknown Action`1<IServiceBusEntityConfigurator> ConfigureDeadLetterSettings {public set; }
    public abstract virtual void set_ConfigureErrorSettings(Action`1<IServiceBusEntityConfigurator> value);
    public abstract virtual void set_ConfigureDeadLetterSettings(Action`1<IServiceBusEntityConfigurator> value);
    public abstract virtual IServiceBusMessageSendTopologyConfigurator`1<T> GetMessageTopology();
}
public interface MassTransit.IServiceBusSubscriptionConfigurator {
    public string TopicPath { get; }
    public string SubscriptionName { get; }
    unknown string ForwardTo {public set; }
    unknown Nullable`1<bool> EnableDeadLetteringOnFilterEvaluationExceptions {public set; }
    unknown RuleFilter Filter {public set; }
    unknown CreateRuleOptions Rule {public set; }
    public abstract virtual string get_TopicPath();
    public abstract virtual string get_SubscriptionName();
    public abstract virtual void set_ForwardTo(string value);
    public abstract virtual void set_EnableDeadLetteringOnFilterEvaluationExceptions(Nullable`1<bool> value);
    public abstract virtual void set_Filter(RuleFilter value);
    public abstract virtual void set_Rule(CreateRuleOptions value);
    public abstract virtual CreateSubscriptionOptions GetCreateSubscriptionOptions();
}
public interface MassTransit.IServiceBusSubscriptionEndpointConfigurator {
    unknown RuleFilter Filter {public set; }
    unknown CreateRuleOptions Rule {public set; }
    public abstract virtual void set_Filter(RuleFilter value);
    public abstract virtual void set_Rule(CreateRuleOptions value);
}
public interface MassTransit.IServiceBusTokenProviderConfigurator {
}
public interface MassTransit.IServiceBusTopicConfigurator {
    unknown Nullable`1<bool> SupportOrdering {public set; }
    public abstract virtual void set_SupportOrdering(Nullable`1<bool> value);
}
public interface MassTransit.ISharedAccessSignatureTokenProviderConfigurator {
    unknown AzureSasCredential SasCredential {public set; }
    public abstract virtual void set_SasCredential(AzureSasCredential value);
}
public interface MassTransit.ISubscriptionEndpointConnector {
    public abstract virtual HostReceiveEndpointHandle ConnectSubscriptionEndpoint(string subscriptionName, Action`1<IServiceBusSubscriptionEndpointConfigurator> configure);
    public abstract virtual HostReceiveEndpointHandle ConnectSubscriptionEndpoint(string subscriptionName, string topicName, Action`1<IServiceBusSubscriptionEndpointConfigurator> configure);
    public abstract virtual HostReceiveEndpointHandle ConnectSubscriptionEndpoint(string subscriptionName, Action`2<IBusRegistrationContext, IServiceBusSubscriptionEndpointConfigurator> configure);
    public abstract virtual HostReceiveEndpointHandle ConnectSubscriptionEndpoint(string subscriptionName, string topicName, Action`2<IBusRegistrationContext, IServiceBusSubscriptionEndpointConfigurator> configure);
}
public class MassTransit.MessageLockExpiredException : TransportException {
    public MessageLockExpiredException(Uri uri);
    public MessageLockExpiredException(Uri uri, string message);
    public MessageLockExpiredException(Uri uri, string message, Exception innerException);
    [ObsoleteAttribute("Formatter-based serialization is obsolete and should not be used.")]
protected MessageLockExpiredException(SerializationInfo info, StreamingContext context);
}
[ExtensionAttribute]
public static class MassTransit.MessageSessionSagaRepositoryConfigurationExtensions : object {
    [ExtensionAttribute]
public static ISagaRegistrationConfigurator`1<T> MessageSessionRepository(ISagaRegistrationConfigurator`1<T> configurator);
    [ExtensionAttribute]
public static void SetMessageSessionSagaRepositoryProvider(IRegistrationConfigurator configurator);
}
public class MassTransit.MessageTimeToLiveExpiredException : TransportException {
    public MessageTimeToLiveExpiredException(Uri uri);
    public MessageTimeToLiveExpiredException(Uri uri, string message);
    public MessageTimeToLiveExpiredException(Uri uri, string message, Exception innerException);
    [ObsoleteAttribute("Formatter-based serialization is obsolete and should not be used.")]
protected MessageTimeToLiveExpiredException(SerializationInfo info, StreamingContext context);
}
public class MassTransit.Scheduling.ServiceBusScheduleMessageProvider : object {
    private ISendEndpointProvider _sendEndpointProvider;
    public ServiceBusScheduleMessageProvider(ISendEndpointProvider sendEndpointProvider);
    public ServiceBusScheduleMessageProvider(ConsumeContext consumeContext);
    [AsyncStateMachineAttribute("MassTransit.Scheduling.ServiceBusScheduleMessageProvider/<ScheduleSend>d__3`1")]
public sealed virtual Task`1<ScheduledMessage`1<T>> ScheduleSend(Uri destinationAddress, DateTime scheduledTime, T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    public sealed virtual Task CancelScheduledSend(Guid tokenId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.Scheduling.ServiceBusScheduleMessageProvider/<CancelScheduledSend>d__5")]
public sealed virtual Task CancelScheduledSend(Uri destinationAddress, Guid tokenId, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class MassTransit.ServiceBusBrokerTopologyExtensions : object {
    [ExtensionAttribute]
public static void LogResult(BrokerTopology topology);
}
[ExtensionAttribute]
public static class MassTransit.ServiceBusBusFactoryConfiguratorExtensions : object {
    [ExtensionAttribute]
public static void Host(IServiceBusBusFactoryConfigurator configurator, Uri hostAddress, Action`1<IServiceBusHostConfigurator> configure);
    [ExtensionAttribute]
public static void Host(IServiceBusBusFactoryConfigurator configurator, Uri hostAddress, ServiceBusClient serviceBusClient, ServiceBusAdministrationClient serviceBusAdministrationClient);
    [ExtensionAttribute]
public static void Host(IServiceBusBusFactoryConfigurator configurator, string connectionString, Action`1<IServiceBusHostConfigurator> configure);
    [ExtensionAttribute]
public static void SharedAccessSignature(IServiceBusHostConfigurator configurator, Action`1<ISharedAccessSignatureTokenProviderConfigurator> configure);
    [ExtensionAttribute]
public static void NamedKey(IServiceBusHostConfigurator configurator, Action`1<IServiceBusNamedKeyTokenProviderConfigurator> configure);
    [ExtensionAttribute]
public static void ReceiveEndpoint(IServiceBusBusFactoryConfigurator configurator, Action`1<IServiceBusReceiveEndpointConfigurator> configure);
    [ExtensionAttribute]
public static void ReceiveEndpoint(IServiceBusBusFactoryConfigurator configurator, IEndpointDefinition definition, Action`1<IServiceBusReceiveEndpointConfigurator> configure);
}
[ExtensionAttribute]
public static class MassTransit.ServiceBusBusTopologyExtensions : object {
    [ExtensionAttribute]
public static IServiceBusBusTopology GetServiceBusBusTopology(IBus bus);
}
[ExtensionAttribute]
public static class MassTransit.ServiceBusConfigurationExtensions : object {
    [ExtensionAttribute]
public static IBusControl CreateUsingAzureServiceBus(IBusFactorySelector selector, Action`1<IServiceBusBusFactoryConfigurator> configure);
    [ExtensionAttribute]
public static void UsingAzureServiceBus(IBusRegistrationConfigurator configurator, Action`2<IBusRegistrationContext, IServiceBusBusFactoryConfigurator> configure);
    [ExtensionAttribute]
public static void UsingAzureServiceBus(IBusRegistrationConfigurator`1<TBus> configurator, Action`2<IBusRegistrationContext, IServiceBusBusFactoryConfigurator> configure);
    private static void AddSubscriptionEndpointConnector(IServiceCollection services);
}
public class MassTransit.ServiceBusConnectionException : ConnectionException {
    public ServiceBusConnectionException(string message);
    public ServiceBusConnectionException(string message, Exception innerException);
    [ObsoleteAttribute("Formatter-based serialization is obsolete and should not be used.")]
protected ServiceBusConnectionException(SerializationInfo info, StreamingContext context);
    private static bool IsExceptionTransient(Exception exception);
}
[ExtensionAttribute]
public static class MassTransit.ServiceBusDependencyInjectionTestingExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IServiceCollection ConfigureServiceBusTestOptions(IServiceCollection services, Action`1<AzureServiceBusTestHarnessOptions> configure);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay}")]
public class MassTransit.ServiceBusEndpointAddress : ValueType {
    private static string AutoDeleteKey;
    private static string TypeKey;
    private static ITypeConverter`2<AddressType, string> _parseConverter;
    public string Scheme;
    public string Host;
    public string Scope;
    public string Name;
    public Nullable`1<TimeSpan> AutoDelete;
    public AddressType Type;
    public string Path { get; }
    private Uri DebuggerDisplay { get; }
    public ServiceBusEndpointAddress(Uri hostAddress, Uri address, AddressType type);
    public ServiceBusEndpointAddress(Uri hostAddress, string name, Nullable`1<TimeSpan> autoDelete, AddressType type);
    private static ServiceBusEndpointAddress();
    public string get_Path();
    private static void ParseLeft(Uri address, String& scheme, String& host, String& scope);
    public static Uri op_Implicit(ServiceBusEndpointAddress& address);
    private Uri get_DebuggerDisplay();
    [IteratorStateMachineAttribute("MassTransit.ServiceBusEndpointAddress/<GetQueryStringOptions>d__18")]
private IEnumerable`1<string> GetQueryStringOptions();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay}")]
public class MassTransit.ServiceBusHostAddress : ValueType {
    public string Scheme;
    public string Host;
    public string Scope;
    private Uri DebuggerDisplay { get; }
    public ServiceBusHostAddress(Uri address);
    private static void ParseLeft(Uri address, String& scheme, String& host, String& scope);
    public static Uri op_Implicit(ServiceBusHostAddress& address);
    private Uri get_DebuggerDisplay();
}
public interface MassTransit.ServiceBusHostSettings {
    public Uri ServiceUri { get; }
    public ServiceBusClient ServiceBusClient { get; }
    public ServiceBusAdministrationClient ServiceBusAdministrationClient { get; }
    public AzureNamedKeyCredential NamedKeyCredential { get; }
    public AzureSasCredential SasCredential { get; }
    public TokenCredential TokenCredential { get; }
    public string ConnectionString { get; }
    public TimeSpan RetryMinBackoff { get; }
    public TimeSpan RetryMaxBackoff { get; }
    public int RetryLimit { get; }
    public ServiceBusTransportType TransportType { get; }
    public abstract virtual Uri get_ServiceUri();
    public abstract virtual ServiceBusClient get_ServiceBusClient();
    public abstract virtual ServiceBusAdministrationClient get_ServiceBusAdministrationClient();
    public abstract virtual AzureNamedKeyCredential get_NamedKeyCredential();
    public abstract virtual AzureSasCredential get_SasCredential();
    public abstract virtual TokenCredential get_TokenCredential();
    public abstract virtual string get_ConnectionString();
    public abstract virtual TimeSpan get_RetryMinBackoff();
    public abstract virtual TimeSpan get_RetryMaxBackoff();
    public abstract virtual int get_RetryLimit();
    public abstract virtual ServiceBusTransportType get_TransportType();
}
public interface MassTransit.ServiceBusMessageContext {
    public int DeliveryCount { get; }
    public string Label { get; }
    public long SequenceNumber { get; }
    public long EnqueuedSequenceNumber { get; }
    public string LockToken { get; }
    public DateTime LockedUntil { get; }
    public string SessionId { get; }
    public long Size { get; }
    public string To { get; }
    public string ReplyToSessionId { get; }
    public string ReplyTo { get; }
    public DateTime EnqueuedTime { get; }
    public DateTime ScheduledEnqueueTime { get; }
    public IReadOnlyDictionary`2<string, object> Properties { get; }
    public TimeSpan TimeToLive { get; }
    public string CorrelationId { get; }
    public string MessageId { get; }
    public DateTime ExpiresAt { get; }
    public abstract virtual int get_DeliveryCount();
    public abstract virtual string get_Label();
    public abstract virtual long get_SequenceNumber();
    public abstract virtual long get_EnqueuedSequenceNumber();
    public abstract virtual string get_LockToken();
    public abstract virtual DateTime get_LockedUntil();
    public abstract virtual string get_SessionId();
    public abstract virtual long get_Size();
    public abstract virtual string get_To();
    public abstract virtual string get_ReplyToSessionId();
    public abstract virtual string get_ReplyTo();
    public abstract virtual DateTime get_EnqueuedTime();
    public abstract virtual DateTime get_ScheduledEnqueueTime();
    public abstract virtual IReadOnlyDictionary`2<string, object> get_Properties();
    public abstract virtual TimeSpan get_TimeToLive();
    public abstract virtual string get_CorrelationId();
    public abstract virtual string get_MessageId();
    public abstract virtual DateTime get_ExpiresAt();
}
[ExtensionAttribute]
public static class MassTransit.ServiceBusMessageContextExtensions : object {
    [ExtensionAttribute]
public static string SessionId(ConsumeContext context);
    [ExtensionAttribute]
public static string ReplyToSessionId(ConsumeContext context);
}
[ExtensionAttribute]
public static class MassTransit.ServiceBusMessageSchedulerBusExtensions : object {
    [ExtensionAttribute]
public static IMessageScheduler CreateServiceBusMessageScheduler(IBus bus);
    [ExtensionAttribute]
public static IMessageScheduler CreateServiceBusMessageScheduler(ISendEndpointProvider sendEndpointProvider, IBusTopology busTopology);
    [ExtensionAttribute]
public static void AddServiceBusMessageScheduler(IRegistrationConfigurator configurator);
    [ExtensionAttribute]
public static void AddServiceBusMessageScheduler(IBusRegistrationConfigurator`1<TBus> configurator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.ServiceBusPublishTopologyConfigurationExtensions : object {
    [ExtensionAttribute]
public static void AddPublishMessageTypesFromNamespaceContaining(IServiceBusBusFactoryConfigurator configurator, Action`2<IServiceBusMessagePublishTopologyConfigurator, Type> configure, Func`2<Type, bool> filter);
    [ExtensionAttribute]
public static void AddPublishMessageTypesFromNamespaceContaining(IServiceBusBusFactoryConfigurator configurator, Type type, Action`2<IServiceBusMessagePublishTopologyConfigurator, Type> configure, Func`2<Type, bool> filter);
    [ExtensionAttribute]
public static void AddPublishMessageTypes(IServiceBusBusFactoryConfigurator configurator, IEnumerable`1<Type> messageTypes, Action`2<IServiceBusMessagePublishTopologyConfigurator, Type> configure);
}
[ExtensionAttribute]
public static class MassTransit.ServiceBusReceivePipeConfiguratorExtensions : object {
    [ExtensionAttribute]
public static void ConfigureDeadLetterQueueDeadLetterTransport(IReceivePipelineConfigurator configurator);
    [ExtensionAttribute]
public static void ConfigureDeadLetterQueueErrorTransport(IReceivePipelineConfigurator configurator);
}
[ExtensionAttribute]
public static class MassTransit.ServiceBusScheduleMessageExtensions : object {
    [ExtensionAttribute]
public static void UseServiceBusMessageScheduler(IBusFactoryConfigurator configurator);
}
public interface MassTransit.ServiceBusSendContext {
    unknown Nullable`1<DateTime> ScheduledEnqueueTimeUtc {public set; }
    unknown string SessionId {public set; }
    unknown string ReplyToSessionId {public set; }
    unknown string ReplyTo {public set; }
    unknown string Label {public set; }
    public abstract virtual void set_ScheduledEnqueueTimeUtc(Nullable`1<DateTime> value);
    public abstract virtual void set_SessionId(string value);
    public abstract virtual void set_ReplyToSessionId(string value);
    public abstract virtual void set_ReplyTo(string value);
    public abstract virtual void set_Label(string value);
}
public interface MassTransit.ServiceBusSendContext`1 {
}
[ExtensionAttribute]
public static class MassTransit.ServiceBusSendContextExtensions : object {
    [ExtensionAttribute]
public static void SetScheduledEnqueueTime(SendContext context, DateTime scheduledTime);
    [ExtensionAttribute]
public static void SetScheduledEnqueueTime(SendContext context, TimeSpan delay);
    [ExtensionAttribute]
public static void SetSessionId(SendContext context, string sessionId);
    [ExtensionAttribute]
public static void SetReplyToSessionId(SendContext context, string sessionId);
    [ExtensionAttribute]
public static void SetReplyTo(SendContext context, string replyTo);
    [ExtensionAttribute]
public static void SetLabel(SendContext context, string label);
}
[ExtensionAttribute]
public static class MassTransit.ServiceBusSessionIdConventionExtensions : object {
    [ExtensionAttribute]
public static void UseSessionIdFormatter(IMessageSendTopologyConfigurator`1<T> configurator, IMessageSessionIdFormatter`1<T> formatter);
    [ExtensionAttribute]
public static void UseSessionIdFormatter(ISendTopologyConfigurator configurator, IMessageSessionIdFormatter`1<T> formatter);
    [ExtensionAttribute]
public static void UseSessionIdFormatter(ISendTopologyConfigurator configurator, Func`2<SendContext`1<T>, string> formatter);
    [ExtensionAttribute]
public static void UseSessionIdFormatter(IMessageSendTopologyConfigurator`1<T> configurator, Func`2<SendContext`1<T>, string> formatter);
}
[ExtensionAttribute]
public static class MassTransit.Testing.AzureFunctionsTestExtensions : object {
    [ExtensionAttribute]
public static IBusRegistrationConfigurator AddAzureFunctionsTestComponents(IBusRegistrationConfigurator configurator);
    [ExtensionAttribute]
public static Task HandleConsumer(ITestHarness harness, object message);
}
public class MassTransit.Testing.AzureServiceBusTestHarness : BusTestHarness {
    private Uri _inputQueueAddress;
    [CompilerGeneratedAttribute]
private AzureNamedKeyCredential <NamedKeyCredential>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputQueueName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConfigureMessageScheduler>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <HostAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IServiceBusBusFactoryConfigurator> OnConfigureServiceBusBus;
    [CompilerGeneratedAttribute]
private Action`1<IServiceBusReceiveEndpointConfigurator> OnConfigureServiceBusReceiveEndpoint;
    public AzureNamedKeyCredential NamedKeyCredential { get; }
    public string InputQueueName { get; }
    public bool ConfigureMessageScheduler { get; public set; }
    public Uri InputQueueAddress { get; }
    public Uri HostAddress { get; }
    public AzureServiceBusTestHarness(Uri serviceUri, AzureNamedKeyCredential namedKeyCredential, string inputQueueName);
    [CompilerGeneratedAttribute]
public AzureNamedKeyCredential get_NamedKeyCredential();
    [CompilerGeneratedAttribute]
public virtual string get_InputQueueName();
    [CompilerGeneratedAttribute]
public bool get_ConfigureMessageScheduler();
    [CompilerGeneratedAttribute]
public void set_ConfigureMessageScheduler(bool value);
    public virtual Uri get_InputQueueAddress();
    [CompilerGeneratedAttribute]
public Uri get_HostAddress();
    [CompilerGeneratedAttribute]
public void add_OnConfigureServiceBusBus(Action`1<IServiceBusBusFactoryConfigurator> value);
    [CompilerGeneratedAttribute]
public void remove_OnConfigureServiceBusBus(Action`1<IServiceBusBusFactoryConfigurator> value);
    [CompilerGeneratedAttribute]
public void add_OnConfigureServiceBusReceiveEndpoint(Action`1<IServiceBusReceiveEndpointConfigurator> value);
    [CompilerGeneratedAttribute]
public void remove_OnConfigureServiceBusReceiveEndpoint(Action`1<IServiceBusReceiveEndpointConfigurator> value);
    protected virtual void ConfigureServiceBusBus(IServiceBusBusFactoryConfigurator configurator);
    protected virtual void ConfigureServiceBusReceiveEndpoint(IServiceBusReceiveEndpointConfigurator configurator);
    [AsyncStateMachineAttribute("MassTransit.Testing.AzureServiceBusTestHarness/<Clean>d__25")]
public virtual Task Clean();
    private ServiceBusAdministrationClient CreateManagementClient();
    protected virtual IBusControl CreateBus();
    [CompilerGeneratedAttribute]
private void <CreateBus>b__27_0(IServiceBusBusFactoryConfigurator x);
    [CompilerGeneratedAttribute]
private void <CreateBus>b__27_1(IServiceBusHostConfigurator h);
    [CompilerGeneratedAttribute]
private void <CreateBus>b__27_3(IServiceBusNamedKeyTokenProviderConfigurator s);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <CreateBus>b__27_2(IServiceBusReceiveEndpointConfigurator e);
}
public class MassTransit.Testing.AzureServiceBusTestHarnessHostedService : object {
    private ILogger`1<AzureServiceBusTestHarnessHostedService> _logger;
    private AzureServiceBusTestHarnessOptions _testOptions;
    private AzureServiceBusTransportOptions _transportOptions;
    public AzureServiceBusTestHarnessHostedService(IOptions`1<AzureServiceBusTransportOptions> transportOptions, IOptions`1<AzureServiceBusTestHarnessOptions> testOptions, ILogger`1<AzureServiceBusTestHarnessHostedService> logger);
    [AsyncStateMachineAttribute("MassTransit.Testing.AzureServiceBusTestHarnessHostedService/<StartAsync>d__4")]
public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.Testing.AzureServiceBusTestHarnessHostedService/<Clean>d__6")]
private Task Clean();
}
