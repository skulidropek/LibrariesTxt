public class MassTransit.Configuration.EntityFrameworkBusOutboxConfigurator`1 : object {
    [NullableAttribute("1")]
private IBusRegistrationConfigurator _configurator;
    [NullableAttribute("1")]
private EntityFrameworkOutboxConfigurator`1<TDbContext> _outboxConfigurator;
    [CompilerGeneratedAttribute]
private int <MessageDeliveryLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MessageDeliveryTimeout>k__BackingField;
    public int MessageDeliveryLimit { get; public set; }
    public TimeSpan MessageDeliveryTimeout { get; public set; }
    [NullableContextAttribute("1")]
public EntityFrameworkBusOutboxConfigurator`1(IBusRegistrationConfigurator configurator, EntityFrameworkOutboxConfigurator`1<TDbContext> outboxConfigurator);
    [CompilerGeneratedAttribute]
public int get_MessageDeliveryLimit();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MessageDeliveryLimit(int value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_MessageDeliveryTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MessageDeliveryTimeout(TimeSpan value);
    public sealed virtual void DisableDeliveryService();
    public virtual void Configure(Action`1<IEntityFrameworkBusOutboxConfigurator> configure);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <Configure>b__12_0(OutboxDeliveryServiceOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Configuration.EntityFrameworkOutboxConfigurator`1 : object {
    private IBusRegistrationConfigurator _configurator;
    private IsolationLevel _isolationLevel;
    private ILockStatementProvider _lockStatementProvider;
    [CompilerGeneratedAttribute]
private TimeSpan <DuplicateDetectionWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <QueryDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private int <QueryMessageLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <QueryTimeout>k__BackingField;
    public TimeSpan DuplicateDetectionWindow { get; public set; }
    unknown IsolationLevel IsolationLevel {public set; }
    unknown ILockStatementProvider LockStatementProvider {public set; }
    public TimeSpan QueryDelay { get; public set; }
    public int QueryMessageLimit { get; public set; }
    public TimeSpan QueryTimeout { get; public set; }
    public EntityFrameworkOutboxConfigurator`1(IBusRegistrationConfigurator configurator);
    [CompilerGeneratedAttribute]
public TimeSpan get_DuplicateDetectionWindow();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DuplicateDetectionWindow(TimeSpan value);
    public sealed virtual void set_IsolationLevel(IsolationLevel value);
    public sealed virtual void set_LockStatementProvider(ILockStatementProvider value);
    [CompilerGeneratedAttribute]
public TimeSpan get_QueryDelay();
    [CompilerGeneratedAttribute]
public sealed virtual void set_QueryDelay(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_QueryMessageLimit();
    [CompilerGeneratedAttribute]
public sealed virtual void set_QueryMessageLimit(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_QueryTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_QueryTimeout(TimeSpan value);
    public sealed virtual void DisableInboxCleanupService();
    public virtual void UseBusOutbox(Action`1<IEntityFrameworkBusOutboxConfigurator> configure);
    public virtual void Configure(Action`1<IEntityFrameworkOutboxConfigurator> configure);
    [CompilerGeneratedAttribute]
private void <Configure>b__26_0(EntityFrameworkOutboxOptions options);
    [CompilerGeneratedAttribute]
private void <Configure>b__26_1(InboxCleanupServiceOptions options);
}
public class MassTransit.Configuration.EntityFrameworkSagaRepositoryConfigurator`1 : object {
    private ConcurrencyMode _concurrencyMode;
    private Action`1<ISagaRepositoryRegistrationConfigurator`1<TSaga>> _configureDbContext;
    private IsolationLevel _isolationLevel;
    private ILockStatementProvider _lockStatementProvider;
    private Func`2<IQueryable`1<TSaga>, IQueryable`1<TSaga>> _queryCustomization;
    unknown IsolationLevel IsolationLevel {public set; }
    unknown ConcurrencyMode ConcurrencyMode {public set; }
    unknown ILockStatementProvider LockStatementProvider {public set; }
    public sealed virtual void set_IsolationLevel(IsolationLevel value);
    public sealed virtual void CustomizeQuery(Func`2<IQueryable`1<TSaga>, IQueryable`1<TSaga>> queryCustomization);
    public sealed virtual void set_ConcurrencyMode(ConcurrencyMode value);
    public sealed virtual void set_LockStatementProvider(ILockStatementProvider value);
    public sealed virtual void AddDbContext(Action`2<IServiceProvider, DbContextOptionsBuilder`1<TImplementation>> optionsAction);
    public sealed virtual void DatabaseFactory(Func`1<DbContext> databaseFactory);
    public sealed virtual void DatabaseFactory(Func`2<IServiceProvider, Func`1<DbContext>> databaseFactory);
    public sealed virtual void ExistingDbContext();
    [IteratorStateMachineAttribute("MassTransit.Configuration.EntityFrameworkSagaRepositoryConfigurator`1/<Validate>d__17")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
    public void Register(ISagaRepositoryRegistrationConfigurator`1<TSaga> configurator);
    private static void AddDbContext(IServiceCollection collection, Action`2<IServiceProvider, DbContextOptionsBuilder`1<TImplementation>> optionsAction);
    private static DbContextOptions`1<TContext> DbContextOptionsFactory(IServiceProvider provider, Action`2<IServiceProvider, DbContextOptionsBuilder`1<TContext>> optionsAction);
    private static void CheckContextConstructors();
    private ISagaRepositoryLockStrategy`1<TSaga> CreateOptimisticLockStrategy();
    private ISagaRepositoryLockStrategy`1<TSaga> CreatePessimisticLockStrategy();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private ISagaRepositoryLockStrategy`1<TSaga> <Register>b__18_0(IServiceProvider provider);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private ISagaRepositoryLockStrategy`1<TSaga> <Register>b__18_1(IServiceProvider provider);
}
public class MassTransit.Configuration.EntityFrameworkSagaRepositoryRegistrationProvider : object {
    private Action`1<IEntityFrameworkSagaRepositoryConfigurator> _configure;
    public EntityFrameworkSagaRepositoryRegistrationProvider(Action`1<IEntityFrameworkSagaRepositoryConfigurator> configure);
    public virtual void Configure(ISagaRegistrationConfigurator`1<TSaga> configurator);
    [CompilerGeneratedAttribute]
private void <Configure>b__2_0(IEntityFrameworkSagaRepositoryConfigurator`1<TSaga> r);
}
[ExtensionAttribute]
public static class MassTransit.EntityFrameworkAuditStoreConfiguratorExtensions : object {
    [ExtensionAttribute]
public static void UseEntityFrameworkCoreAuditStore(IBusFactoryConfigurator configurator, DbContextOptionsBuilder dbContextOptions, string auditTableName, string auditTableSchema, Action`1<IMessageFilterConfigurator> configureFilter);
    [ExtensionAttribute]
public static void UseEntityFrameworkCoreAuditStore(IBusFactoryConfigurator configurator, DbContextOptionsBuilder dbContextOptions, string auditTableName, Action`1<IMessageFilterConfigurator> configureFilter);
    [ExtensionAttribute]
public static void UseEntityFrameworkCoreAuditStore(IBusFactoryConfigurator configurator, DbContextOptionsBuilder dbContextOptions, string auditTableName, string auditTableSchema);
    private static void ConfigureAuditStore(IBusFactoryConfigurator configurator, DbContextOptionsBuilder dbContextOptions, string auditTableName, string auditTableSchema, Action`1<IMessageFilterConfigurator> configureFilter);
}
public class MassTransit.EntityFrameworkCoreIntegration.Audit.AuditDbContext : DbContext {
    private string _auditTableName;
    private string _auditTableSchema;
    protected AuditDbContext(string auditTableName, string auditTableSchema);
    public AuditDbContext(DbContextOptions options, string auditTableName, string auditTableSchema);
    protected virtual void OnModelCreating(ModelBuilder modelBuilder);
}
public class MassTransit.EntityFrameworkCoreIntegration.Audit.AuditMapping : object {
    private string _tableName;
    private string _schemaName;
    public AuditMapping(string tableName, string schemaName);
    public sealed virtual void Configure(EntityTypeBuilder`1<AuditRecord> builder);
}
public class MassTransit.EntityFrameworkCoreIntegration.Audit.AuditRecord : object {
    [CompilerGeneratedAttribute]
private int <AuditRecordId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ConversationId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <CorrelationId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <InitiatorId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <SentTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FaultAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageType>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Custom>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Message>k__BackingField;
    public int AuditRecordId { get; public set; }
    public Nullable`1<Guid> MessageId { get; public set; }
    public Nullable`1<Guid> ConversationId { get; public set; }
    public Nullable`1<Guid> CorrelationId { get; public set; }
    public Nullable`1<Guid> InitiatorId { get; public set; }
    public Nullable`1<Guid> RequestId { get; public set; }
    public Nullable`1<DateTime> SentTime { get; public set; }
    public string SourceAddress { get; public set; }
    public string DestinationAddress { get; public set; }
    public string ResponseAddress { get; public set; }
    public string FaultAddress { get; public set; }
    public string InputAddress { get; public set; }
    public string ContextType { get; public set; }
    public string MessageType { get; public set; }
    public Dictionary`2<string, string> Custom { get; public set; }
    public Dictionary`2<string, string> Headers { get; public set; }
    public object Message { get; public set; }
    [CompilerGeneratedAttribute]
public int get_AuditRecordId();
    [CompilerGeneratedAttribute]
public void set_AuditRecordId(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_ConversationId();
    [CompilerGeneratedAttribute]
public void set_ConversationId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_CorrelationId();
    [CompilerGeneratedAttribute]
public void set_CorrelationId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_InitiatorId();
    [CompilerGeneratedAttribute]
public void set_InitiatorId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_SentTime();
    [CompilerGeneratedAttribute]
public void set_SentTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_SourceAddress();
    [CompilerGeneratedAttribute]
public void set_SourceAddress(string value);
    [CompilerGeneratedAttribute]
public string get_DestinationAddress();
    [CompilerGeneratedAttribute]
public void set_DestinationAddress(string value);
    [CompilerGeneratedAttribute]
public string get_ResponseAddress();
    [CompilerGeneratedAttribute]
public void set_ResponseAddress(string value);
    [CompilerGeneratedAttribute]
public string get_FaultAddress();
    [CompilerGeneratedAttribute]
public void set_FaultAddress(string value);
    [CompilerGeneratedAttribute]
public string get_InputAddress();
    [CompilerGeneratedAttribute]
public void set_InputAddress(string value);
    [CompilerGeneratedAttribute]
public string get_ContextType();
    [CompilerGeneratedAttribute]
public void set_ContextType(string value);
    [CompilerGeneratedAttribute]
public string get_MessageType();
    [CompilerGeneratedAttribute]
public void set_MessageType(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Custom();
    [CompilerGeneratedAttribute]
public void set_Custom(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public object get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(object value);
    internal static AuditRecord Create(T message, string messageType, MessageAuditMetadata metadata);
}
public class MassTransit.EntityFrameworkCoreIntegration.Audit.EntityFrameworkAuditStore : object {
    private string _auditTableName;
    private string _auditTableSchema;
    private DbContextOptions _contextOptions;
    public DbContext AuditContext { get; }
    public EntityFrameworkAuditStore(DbContextOptions contextOptions, string auditTableName, string auditTableSchema);
    public DbContext get_AuditContext();
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.Audit.EntityFrameworkAuditStore/<MassTransit-Audit-IMessageAuditStore-StoreMessage>d__6`1")]
private sealed virtual override Task MassTransit.Audit.IMessageAuditStore.StoreMessage(T message, MessageAuditMetadata metadata);
}
public class MassTransit.EntityFrameworkCoreIntegration.BusOutboxDeliveryService`1 : BackgroundService {
    private IBusControl _busControl;
    private IsolationLevel _isolationLevel;
    private ILockStatementProvider _lockStatementProvider;
    private ILogger _logger;
    private IBusOutboxNotification _notification;
    private OutboxDeliveryServiceOptions _options;
    private Func`5<TDbContext, Guid, long, int, IAsyncEnumerable`1<OutboxMessage>> _outboxMessagesQuery;
    private IServiceProvider _provider;
    private string _getOutboxIdStatement;
    public BusOutboxDeliveryService`1(IBusControl busControl, IOptions`1<OutboxDeliveryServiceOptions> options, IOptions`1<EntityFrameworkOutboxOptions> outboxOptions, IBusOutboxNotification notification, ILogger`1<BusOutboxDeliveryService`1<TDbContext>> logger, IServiceProvider provider);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.BusOutboxDeliveryService`1/<ExecuteAsync>d__10")]
protected virtual Task ExecuteAsync(CancellationToken stoppingToken);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.BusOutboxDeliveryService`1/<DeliverOutbox>d__11")]
private Task`1<int> DeliverOutbox(int resultLimit, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.BusOutboxDeliveryService`1/<RemoveOutbox>d__12")]
private static Task RemoveOutbox(TDbContext dbContext, OutboxState outboxState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.BusOutboxDeliveryService`1/<DeliverOutboxMessages>d__13")]
private Task`1<int> DeliverOutboxMessages(TDbContext dbContext, OutboxState outboxState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.BusOutboxDeliveryService`1/<RollbackTransaction>d__14")]
private static Task RollbackTransaction(IDbContextTransaction transaction);
}
internal class MassTransit.EntityFrameworkCoreIntegration.Configuration.EntityFrameworkSagaRepository : object {
    private ConcurrentDictionary`2<Type, ISagaClassMap> _configurations;
    private DbContextOptions _dbContextOptions;
    public EntityFrameworkSagaRepository(DbContextOptions dbContextOptions);
    public sealed virtual void AddSagaClassMap(ISagaClassMap`1<TSaga> sagaClassMap);
    public sealed virtual DbContext GetDbContext();
    public static DbContextOptionsBuilder CreateOptionsBuilder();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.EntityFrameworkCoreIntegration.DbContextOutboxConsumeContext`2 : OutboxConsumeContextProxy`1<TMessage> {
    private TDbContext _dbContext;
    private InboxState _inboxState;
    private DbSet`1<OutboxMessage> _outboxMessageSet;
    private IDbContextTransaction _transaction;
    [CompilerGeneratedAttribute]
private bool <ContinueProcessing>k__BackingField;
    public Nullable`1<Guid> MessageId { get; }
    public bool ContinueProcessing { get; public set; }
    public bool IsMessageConsumed { get; }
    public bool IsOutboxDelivered { get; }
    public int ReceiveCount { get; }
    public Nullable`1<long> LastSequenceNumber { get; }
    public Guid TransactionId { get; }
    public DbContextOutboxConsumeContext`2(ConsumeContext`1<TMessage> context, OutboxConsumeOptions options, IServiceProvider provider, TDbContext dbContext, IDbContextTransaction transaction, InboxState inboxState);
    public virtual Nullable`1<Guid> get_MessageId();
    [CompilerGeneratedAttribute]
public virtual bool get_ContinueProcessing();
    [CompilerGeneratedAttribute]
public virtual void set_ContinueProcessing(bool value);
    public virtual bool get_IsMessageConsumed();
    public virtual bool get_IsOutboxDelivered();
    public virtual int get_ReceiveCount();
    public virtual Nullable`1<long> get_LastSequenceNumber();
    public sealed virtual Guid get_TransactionId();
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.DbContextOutboxConsumeContext`2/<SetConsumed>d__21")]
public virtual Task SetConsumed();
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.DbContextOutboxConsumeContext`2/<SetDelivered>d__22")]
public virtual Task SetDelivered();
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.DbContextOutboxConsumeContext`2/<LoadOutboxMessages>d__23")]
public virtual Task`1<List`1<OutboxMessageContext>> LoadOutboxMessages();
    public virtual Task NotifyOutboxMessageDelivered(OutboxMessageContext message);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.DbContextOutboxConsumeContext`2/<RemoveOutboxMessages>d__25")]
public virtual Task RemoveOutboxMessages();
    public virtual Task AddSend(SendContext`1<T> context);
}
public interface MassTransit.EntityFrameworkCoreIntegration.DbTransactionContext {
    public Guid TransactionId { get; }
    public abstract virtual Guid get_TransactionId();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.EntityFrameworkCoreIntegration.EntityFrameworkConsumeContextScopedBusContext`2 : EntityFrameworkScopedBusContext`2<TBus, TDbContext> {
    private TBus _bus;
    private IClientFactory _clientFactory;
    private ConsumeContext _consumeContext;
    private IServiceProvider _provider;
    public EntityFrameworkConsumeContextScopedBusContext`2(TBus bus, TDbContext dbContext, IBusOutboxNotification notification, IClientFactory clientFactory, IServiceProvider provider, ConsumeContext consumeContext);
    protected virtual IPublishEndpointProvider GetPublishEndpointProvider();
    protected virtual ISendEndpointProvider GetSendEndpointProvider();
    protected virtual ScopedClientFactory GetClientFactory();
}
public class MassTransit.EntityFrameworkCoreIntegration.EntityFrameworkOutboxContextFactory`1 : object {
    private TDbContext _dbContext;
    private IsolationLevel _isolationLevel;
    private ILockStatementProvider _lockStatementProvider;
    private IServiceProvider _provider;
    private string _lockStatement;
    public EntityFrameworkOutboxContextFactory`1(TDbContext dbContext, IServiceProvider provider, IOptions`1<EntityFrameworkOutboxOptions> options);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.EntityFrameworkOutboxContextFactory`1/<Send>d__6`1")]
public sealed virtual Task Send(ConsumeContext`1<T> context, OutboxConsumeOptions options, IPipe`1<OutboxConsumeContext`1<T>> next);
    public sealed virtual void Probe(ProbeContext context);
}
[ExtensionAttribute]
public static class MassTransit.EntityFrameworkCoreIntegration.EntityFrameworkOutboxExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task AddSend(DbSet`1<OutboxMessage> collection, SendContext`1<T> context, IObjectDeserializer deserializer, Nullable`1<Guid> inboxMessageId, Nullable`1<Guid> inboxConsumerId, Nullable`1<Guid> outboxId);
}
public static class MassTransit.EntityFrameworkCoreIntegration.EntityFrameworkSagaRepository`1 : object {
    public static ISagaRepository`1<TSaga> CreateOptimistic(ISagaDbContextFactory`1<TSaga> dbContextFactory, Func`2<IQueryable`1<TSaga>, IQueryable`1<TSaga>> queryCustomization);
    public static ISagaRepository`1<TSaga> CreateOptimistic(Func`1<DbContext> dbContextFactory, Func`2<IQueryable`1<TSaga>, IQueryable`1<TSaga>> queryCustomization);
    public static ISagaRepository`1<TSaga> CreatePessimistic(ISagaDbContextFactory`1<TSaga> dbContextFactory, ILockStatementProvider lockStatementProvider, Func`2<IQueryable`1<TSaga>, IQueryable`1<TSaga>> queryCustomization);
    public static ISagaRepository`1<TSaga> CreatePessimistic(Func`1<DbContext> dbContextFactory, ILockStatementProvider lockStatementProvider, Func`2<IQueryable`1<TSaga>, IQueryable`1<TSaga>> queryCustomization);
    private static ISagaRepository`1<TSaga> CreateRepository(ISagaDbContextFactory`1<TSaga> dbContextFactory, ISagaRepositoryLockStrategy`1<TSaga> lockStrategy);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.EntityFrameworkCoreIntegration.EntityFrameworkScopedBusContext`2 : object {
    private TBus _bus;
    private IClientFactory _clientFactory;
    private TDbContext _dbContext;
    private IBusOutboxNotification _notification;
    private DbSet`1<OutboxMessage> _outboxMessageSet;
    private DbSet`1<OutboxState> _outboxStateSet;
    private IServiceProvider _provider;
    private Guid _outboxId;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private EntityEntry`1<OutboxState> _outboxState;
    [NullableAttribute("2")]
private IPublishEndpoint _publishEndpoint;
    [NullableAttribute("2")]
private IScopedClientFactory _scopedClientFactory;
    [NullableAttribute("2")]
private ISendEndpointProvider _sendEndpointProvider;
    public ISendEndpointProvider SendEndpointProvider { get; }
    public IPublishEndpoint PublishEndpoint { get; }
    public IScopedClientFactory ClientFactory { get; }
    public EntityFrameworkScopedBusContext`2(TBus bus, TDbContext dbContext, IBusOutboxNotification notification, IClientFactory clientFactory, IServiceProvider provider);
    public sealed virtual void Dispose();
    public sealed virtual Task AddSend(SendContext`1<T> context);
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual ISendEndpointProvider get_SendEndpointProvider();
    public sealed virtual IPublishEndpoint get_PublishEndpoint();
    public sealed virtual IScopedClientFactory get_ClientFactory();
    private bool WasCommitted();
    protected virtual ScopedClientFactory GetClientFactory();
    protected virtual IPublishEndpointProvider GetPublishEndpointProvider();
    protected virtual ISendEndpointProvider GetSendEndpointProvider();
}
public class MassTransit.EntityFrameworkCoreIntegration.EntityFrameworkScopedBusContextProvider`2 : object {
    [CompilerGeneratedAttribute]
private ScopedBusContext <Context>k__BackingField;
    public ScopedBusContext Context { get; }
    public EntityFrameworkScopedBusContextProvider`2(TBus bus, TDbContext dbContext, IBusOutboxNotification notification, Bind`2<TBus, IClientFactory> clientFactory, Bind`2<TBus, IScopedConsumeContextProvider> consumeContextProvider, IScopedConsumeContextProvider globalConsumeContextProvider, IServiceProvider provider);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public sealed virtual ScopedBusContext get_Context();
}
public class MassTransit.EntityFrameworkCoreIntegration.FutureSagaDbContext : SagaDbContext {
    protected IEnumerable`1<ISagaClassMap> Configurations { get; }
    public FutureSagaDbContext(DbContextOptions`1<FutureSagaDbContext> options);
    protected FutureSagaDbContext(DbContextOptions options);
    [IteratorStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.FutureSagaDbContext/<get_Configurations>d__3")]
protected virtual IEnumerable`1<ISagaClassMap> get_Configurations();
}
public class MassTransit.EntityFrameworkCoreIntegration.FutureStateMap : SagaClassMap`1<FutureState> {
    private bool _optimistic;
    public FutureStateMap(bool optimistic);
    protected virtual void Configure(EntityTypeBuilder`1<FutureState> entity, ModelBuilder model);
}
public interface MassTransit.EntityFrameworkCoreIntegration.ILoadQueryExecutor`1 {
    public abstract virtual Task`1<TSaga> Load(DbContext dbContext, Guid correlationId, CancellationToken cancellationToken);
}
public interface MassTransit.EntityFrameworkCoreIntegration.ILockStatementFormatter {
    public abstract virtual void Create(StringBuilder sb, string schema, string table);
    public abstract virtual void AppendColumn(StringBuilder sb, int index, string columnName);
    public abstract virtual void Complete(StringBuilder sb);
    public abstract virtual void CreateOutboxStatement(StringBuilder sb, string schema, string table, string columnName);
}
public interface MassTransit.EntityFrameworkCoreIntegration.ILockStatementProvider {
    public abstract virtual string GetRowLockStatement(DbContext context);
    public abstract virtual string GetRowLockStatement(DbContext context, String[] propertyNames);
    public abstract virtual string GetOutboxStatement(DbContext context);
}
public class MassTransit.EntityFrameworkCoreIntegration.InboxCleanupService`1 : BackgroundService {
    private ILogger`1<InboxCleanupService`1<TDbContext>> _logger;
    private InboxCleanupServiceOptions _options;
    private IServiceProvider _provider;
    public InboxCleanupService`1(IOptions`1<InboxCleanupServiceOptions> options, ILogger`1<InboxCleanupService`1<TDbContext>> logger, IServiceProvider provider);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.InboxCleanupService`1/<ExecuteAsync>d__4")]
protected virtual Task ExecuteAsync(CancellationToken stoppingToken);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.InboxCleanupService`1/<CleanUpInboxState>d__5")]
private Task`1<int> CleanUpInboxState(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.InboxCleanupService`1/<GetExpiredInboxStates>d__6")]
private Task`1<List`1<InboxState>> GetExpiredInboxStates(TDbContext dbContext, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MassTransit.EntityFrameworkCoreIntegration.InboxState : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ConsumerId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <LockId>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <RowVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Received>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReceiveCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ExpirationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <Consumed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <Delivered>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <LastSequenceNumber>k__BackingField;
    public long Id { get; public set; }
    public Guid MessageId { get; public set; }
    public Guid ConsumerId { get; public set; }
    public Guid LockId { get; public set; }
    public Byte[] RowVersion { get; public set; }
    public DateTime Received { get; public set; }
    public int ReceiveCount { get; public set; }
    public Nullable`1<DateTime> ExpirationTime { get; public set; }
    public Nullable`1<DateTime> Consumed { get; public set; }
    public Nullable`1<DateTime> Delivered { get; public set; }
    public Nullable`1<long> LastSequenceNumber { get; public set; }
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(long value);
    [CompilerGeneratedAttribute]
public Guid get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_ConsumerId();
    [CompilerGeneratedAttribute]
public void set_ConsumerId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_LockId();
    [CompilerGeneratedAttribute]
public void set_LockId(Guid value);
    [CompilerGeneratedAttribute]
public Byte[] get_RowVersion();
    [CompilerGeneratedAttribute]
public void set_RowVersion(Byte[] value);
    [CompilerGeneratedAttribute]
public DateTime get_Received();
    [CompilerGeneratedAttribute]
public void set_Received(DateTime value);
    [CompilerGeneratedAttribute]
public int get_ReceiveCount();
    [CompilerGeneratedAttribute]
public void set_ReceiveCount(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ExpirationTime();
    [CompilerGeneratedAttribute]
public void set_ExpirationTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_Consumed();
    [CompilerGeneratedAttribute]
public void set_Consumed(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_Delivered();
    [CompilerGeneratedAttribute]
public void set_Delivered(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_LastSequenceNumber();
    [CompilerGeneratedAttribute]
public void set_LastSequenceNumber(Nullable`1<long> value);
}
public interface MassTransit.EntityFrameworkCoreIntegration.ISagaClassMap {
    public Type SagaType { get; }
    public abstract virtual Type get_SagaType();
    public abstract virtual void Configure(ModelBuilder model);
}
public interface MassTransit.EntityFrameworkCoreIntegration.ISagaClassMap`1 {
}
public interface MassTransit.EntityFrameworkCoreIntegration.ISagaDbContextFactory`1 {
    public abstract virtual DbContext Create();
    public abstract virtual DbContext CreateScoped(ConsumeContext`1<T> context);
    public abstract virtual ValueTask ReleaseAsync(DbContext dbContext);
}
public interface MassTransit.EntityFrameworkCoreIntegration.ISagaRepositoryLockStrategy`1 {
    public IsolationLevel IsolationLevel { get; }
    public abstract virtual IsolationLevel get_IsolationLevel();
    public abstract virtual Task`1<TSaga> Load(DbContext context, Guid correlationId, CancellationToken cancellationToken);
    public abstract virtual Task`1<SagaLockContext`1<TSaga>> CreateLockContext(DbContext context, ISagaQuery`1<TSaga> query, CancellationToken cancellationToken);
}
public class MassTransit.EntityFrameworkCoreIntegration.JobAttemptSagaMap : SagaClassMap`1<JobAttemptSaga> {
    private bool _optimistic;
    public JobAttemptSagaMap(bool optimistic);
    protected virtual void Configure(EntityTypeBuilder`1<JobAttemptSaga> entity, ModelBuilder model);
}
public class MassTransit.EntityFrameworkCoreIntegration.JobSagaMap : SagaClassMap`1<JobSaga> {
    private bool _optimistic;
    public JobSagaMap(bool optimistic);
    protected virtual void Configure(EntityTypeBuilder`1<JobSaga> entity, ModelBuilder model);
}
public class MassTransit.EntityFrameworkCoreIntegration.JobServiceSagaDbContext : SagaDbContext {
    protected IEnumerable`1<ISagaClassMap> Configurations { get; }
    public JobServiceSagaDbContext(DbContextOptions`1<JobServiceSagaDbContext> options);
    [IteratorStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.JobServiceSagaDbContext/<get_Configurations>d__2")]
protected virtual IEnumerable`1<ISagaClassMap> get_Configurations();
}
public class MassTransit.EntityFrameworkCoreIntegration.JobTypeSagaMap : SagaClassMap`1<JobTypeSaga> {
    private bool _optimistic;
    public JobTypeSagaMap(bool optimistic);
    protected virtual void Configure(EntityTypeBuilder`1<JobTypeSaga> entity, ModelBuilder model);
}
public class MassTransit.EntityFrameworkCoreIntegration.JsonValueComparer`1 : ValueComparer`1<T> {
    private static string Json(T instance);
    private static T DoGetSnapshot(T instance);
    private static int DoGetHashCode(T instance);
    private static bool DoEquals(T left, T right);
}
public class MassTransit.EntityFrameworkCoreIntegration.JsonValueConverter`1 : ValueConverter`2<T, string> {
    public JsonValueConverter`1(ConverterMappingHints hints);
    private static T Deserialize(string json);
    private static string Serialize(T obj);
}
public class MassTransit.EntityFrameworkCoreIntegration.MySqlLockStatementFormatter : object {
    public sealed virtual void Create(StringBuilder sb, string schema, string table);
    public sealed virtual void AppendColumn(StringBuilder sb, int index, string columnName);
    public sealed virtual void Complete(StringBuilder sb);
    public sealed virtual void CreateOutboxStatement(StringBuilder sb, string schema, string table, string columnName);
}
public class MassTransit.EntityFrameworkCoreIntegration.MySqlLockStatementProvider : SqlLockStatementProvider {
    public MySqlLockStatementProvider(bool enableSchemaCaching);
}
public class MassTransit.EntityFrameworkCoreIntegration.OptimisticFutureSagaDbContext : FutureSagaDbContext {
    protected IEnumerable`1<ISagaClassMap> Configurations { get; }
    public OptimisticFutureSagaDbContext(DbContextOptions`1<OptimisticFutureSagaDbContext> options);
    [IteratorStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.OptimisticFutureSagaDbContext/<get_Configurations>d__2")]
protected virtual IEnumerable`1<ISagaClassMap> get_Configurations();
}
public class MassTransit.EntityFrameworkCoreIntegration.OptimisticJobServiceSagaDbContext : SagaDbContext {
    protected IEnumerable`1<ISagaClassMap> Configurations { get; }
    public OptimisticJobServiceSagaDbContext(DbContextOptions`1<OptimisticJobServiceSagaDbContext> options);
    [IteratorStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.OptimisticJobServiceSagaDbContext/<get_Configurations>d__2")]
protected virtual IEnumerable`1<ISagaClassMap> get_Configurations();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MassTransit.EntityFrameworkCoreIntegration.OutboxMessage : object {
    private Headers _headers;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<string, object> _properties;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <EnqueueTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <SentTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <InboxMessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <InboxConsumerId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <OutboxId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SequenceNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <MessageId>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <MessageType>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ConversationId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <CorrelationId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <InitiatorId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <SourceAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <DestinationAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ResponseAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <FaultAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ExpirationTime>k__BackingField;
    public Nullable`1<DateTime> EnqueueTime { get; public set; }
    public DateTime SentTime { get; public set; }
    public string Headers { get; public set; }
    public string Properties { get; public set; }
    public Nullable`1<Guid> InboxMessageId { get; public set; }
    public Nullable`1<Guid> InboxConsumerId { get; public set; }
    public Nullable`1<Guid> OutboxId { get; public set; }
    public long SequenceNumber { get; public set; }
    public Guid MessageId { get; public set; }
    [NullableAttribute("1")]
public string ContentType { get; public set; }
    [NullableAttribute("1")]
public string MessageType { get; public set; }
    [NullableAttribute("1")]
public string Body { get; public set; }
    public Nullable`1<Guid> ConversationId { get; public set; }
    public Nullable`1<Guid> CorrelationId { get; public set; }
    public Nullable`1<Guid> InitiatorId { get; public set; }
    public Nullable`1<Guid> RequestId { get; public set; }
    public Uri SourceAddress { get; public set; }
    public Uri DestinationAddress { get; public set; }
    public Uri ResponseAddress { get; public set; }
    public Uri FaultAddress { get; public set; }
    public Nullable`1<DateTime> ExpirationTime { get; public set; }
    private Nullable`1<Guid> MassTransit.MessageContext.MessageId { get; }
    private Nullable`1<DateTime> MassTransit.MessageContext.SentTime { get; }
    [NullableAttribute("1")]
private Headers MassTransit.MessageContext.Headers { get; }
    [NullableAttribute("1")]
private HostInfo MassTransit.MessageContext.Host { get; }
    [NullableAttribute("1")]
private IReadOnlyDictionary`2<string, object> MassTransit.Middleware.OutboxMessageContext.Properties { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_EnqueueTime();
    [CompilerGeneratedAttribute]
public void set_EnqueueTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public DateTime get_SentTime();
    [CompilerGeneratedAttribute]
public void set_SentTime(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(string value);
    [CompilerGeneratedAttribute]
public string get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_InboxMessageId();
    [CompilerGeneratedAttribute]
public void set_InboxMessageId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_InboxConsumerId();
    [CompilerGeneratedAttribute]
public void set_InboxConsumerId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_OutboxId();
    [CompilerGeneratedAttribute]
public void set_OutboxId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_SequenceNumber();
    [CompilerGeneratedAttribute]
public void set_SequenceNumber(long value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(Guid value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_MessageType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_MessageType(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Body();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Guid> get_ConversationId();
    [CompilerGeneratedAttribute]
public void set_ConversationId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Guid> get_CorrelationId();
    [CompilerGeneratedAttribute]
public void set_CorrelationId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Guid> get_InitiatorId();
    [CompilerGeneratedAttribute]
public void set_InitiatorId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Guid> get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_SourceAddress();
    [CompilerGeneratedAttribute]
public void set_SourceAddress(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_DestinationAddress();
    [CompilerGeneratedAttribute]
public void set_DestinationAddress(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_ResponseAddress();
    [CompilerGeneratedAttribute]
public void set_ResponseAddress(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_FaultAddress();
    [CompilerGeneratedAttribute]
public void set_FaultAddress(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_ExpirationTime();
    [CompilerGeneratedAttribute]
public void set_ExpirationTime(Nullable`1<DateTime> value);
    private sealed virtual override Nullable`1<Guid> MassTransit.MessageContext.get_MessageId();
    private sealed virtual override Nullable`1<DateTime> MassTransit.MessageContext.get_SentTime();
    [NullableContextAttribute("1")]
private sealed virtual override Headers MassTransit.MessageContext.get_Headers();
    [NullableContextAttribute("1")]
private sealed virtual override HostInfo MassTransit.MessageContext.get_Host();
    [NullableContextAttribute("1")]
private sealed virtual override IReadOnlyDictionary`2<string, object> MassTransit.Middleware.OutboxMessageContext.get_Properties();
    [NullableContextAttribute("1")]
public void Deserialize(IObjectDeserializer deserializer);
    [NullableContextAttribute("1")]
private Headers DeserializerHeaders(IObjectDeserializer deserializer);
    [NullableContextAttribute("1")]
private IReadOnlyDictionary`2<string, object> DeserializerProperties(IObjectDeserializer deserializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class MassTransit.EntityFrameworkCoreIntegration.OutboxMessageStaticData : object {
    [CompilerGeneratedAttribute]
private static IReadOnlyDictionary`2<string, object> <Empty>k__BackingField;
    public static IReadOnlyDictionary`2<string, object> Empty { get; }
    private static OutboxMessageStaticData();
    [CompilerGeneratedAttribute]
public static IReadOnlyDictionary`2<string, object> get_Empty();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MassTransit.EntityFrameworkCoreIntegration.OutboxState : object {
    [CompilerGeneratedAttribute]
private Guid <OutboxId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <LockId>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <RowVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <Delivered>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <LastSequenceNumber>k__BackingField;
    public Guid OutboxId { get; public set; }
    public Guid LockId { get; public set; }
    public Byte[] RowVersion { get; public set; }
    public DateTime Created { get; public set; }
    public Nullable`1<DateTime> Delivered { get; public set; }
    public Nullable`1<long> LastSequenceNumber { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_OutboxId();
    [CompilerGeneratedAttribute]
public void set_OutboxId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_LockId();
    [CompilerGeneratedAttribute]
public void set_LockId(Guid value);
    [CompilerGeneratedAttribute]
public Byte[] get_RowVersion();
    [CompilerGeneratedAttribute]
public void set_RowVersion(Byte[] value);
    [CompilerGeneratedAttribute]
public DateTime get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(DateTime value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_Delivered();
    [CompilerGeneratedAttribute]
public void set_Delivered(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_LastSequenceNumber();
    [CompilerGeneratedAttribute]
public void set_LastSequenceNumber(Nullable`1<long> value);
}
public class MassTransit.EntityFrameworkCoreIntegration.PostgresLockStatementFormatter : object {
    public sealed virtual void Create(StringBuilder sb, string schema, string table);
    public sealed virtual void AppendColumn(StringBuilder sb, int index, string columnName);
    public sealed virtual void Complete(StringBuilder sb);
    public sealed virtual void CreateOutboxStatement(StringBuilder sb, string schema, string table, string columnName);
    private static string FormatTableName(string schema, string table);
}
public class MassTransit.EntityFrameworkCoreIntegration.PostgresLockStatementProvider : SqlLockStatementProvider {
    public PostgresLockStatementProvider(bool enableSchemaCaching);
    public PostgresLockStatementProvider(string schemaName, bool enableSchemaCaching);
}
public class MassTransit.EntityFrameworkCoreIntegration.Saga.ContainerSagaDbContextFactory`2 : object {
    private TContext _dbContext;
    public ContainerSagaDbContextFactory`2(TContext dbContext);
    public sealed virtual DbContext Create();
    public sealed virtual DbContext CreateScoped(ConsumeContext`1<T> context);
    public sealed virtual ValueTask ReleaseAsync(DbContext dbContext);
}
public class MassTransit.EntityFrameworkCoreIntegration.Saga.DbContextSagaRepositoryContext`1 : BasePipeContext {
    private DbContext _dbContext;
    public DbContextSagaRepositoryContext`1(DbContext dbContext, CancellationToken cancellationToken);
    public sealed virtual Task`1<TSaga> Load(Guid correlationId);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.Saga.DbContextSagaRepositoryContext`1/<Query>d__3")]
public sealed virtual Task`1<SagaRepositoryQueryContext`1<TSaga>> Query(ISagaQuery`1<TSaga> query, CancellationToken cancellationToken);
}
public class MassTransit.EntityFrameworkCoreIntegration.Saga.DbContextSagaRepositoryContext`2 : ConsumeContextScope`1<TMessage> {
    private ConsumeContext`1<TMessage> _consumeContext;
    private DbContext _dbContext;
    private ISagaConsumeContextFactory`2<DbContext, TSaga> _factory;
    private SemaphoreSlim _inUse;
    private ISagaRepositoryLockStrategy`1<TSaga> _lockStrategy;
    public DbContextSagaRepositoryContext`2(DbContext dbContext, ConsumeContext`1<TMessage> consumeContext, ISagaConsumeContextFactory`2<DbContext, TSaga> factory, ISagaRepositoryLockStrategy`1<TSaga> lockStrategy);
    public sealed virtual void Dispose();
    public sealed virtual Task`1<SagaConsumeContext`2<TSaga, TMessage>> Add(TSaga instance);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.Saga.DbContextSagaRepositoryContext`2/<Insert>d__8")]
public sealed virtual Task`1<SagaConsumeContext`2<TSaga, TMessage>> Insert(TSaga instance);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.Saga.DbContextSagaRepositoryContext`2/<Load>d__9")]
public sealed virtual Task`1<SagaConsumeContext`2<TSaga, TMessage>> Load(Guid correlationId);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.Saga.DbContextSagaRepositoryContext`2/<Save>d__10")]
public sealed virtual Task Save(SagaConsumeContext`1<TSaga> context);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.Saga.DbContextSagaRepositoryContext`2/<Update>d__11")]
public sealed virtual Task Update(SagaConsumeContext`1<TSaga> context);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.Saga.DbContextSagaRepositoryContext`2/<Delete>d__12")]
public sealed virtual Task Delete(SagaConsumeContext`1<TSaga> context);
    public sealed virtual Task Discard(SagaConsumeContext`1<TSaga> context);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.Saga.DbContextSagaRepositoryContext`2/<Undo>d__14")]
public sealed virtual Task Undo(SagaConsumeContext`1<TSaga> context);
    public sealed virtual Task`1<SagaConsumeContext`2<TSaga, T>> CreateSagaConsumeContext(ConsumeContext`1<T> consumeContext, TSaga instance, SagaConsumeContextMode mode);
}
public class MassTransit.EntityFrameworkCoreIntegration.Saga.DelegateSagaDbContextFactory`1 : object {
    private Func`1<DbContext> _dbContextFactory;
    public DelegateSagaDbContextFactory`1(Func`1<DbContext> dbContextFactory);
    public sealed virtual DbContext Create();
    public sealed virtual DbContext CreateScoped(ConsumeContext`1<T> context);
    public sealed virtual ValueTask ReleaseAsync(DbContext dbContext);
}
public class MassTransit.EntityFrameworkCoreIntegration.Saga.EntityFrameworkSagaRepositoryContextFactory`1 : object {
    private ISagaConsumeContextFactory`2<DbContext, TSaga> _consumeContextFactory;
    private ISagaDbContextFactory`1<TSaga> _dbContextFactory;
    private ISagaRepositoryLockStrategy`1<TSaga> _lockStrategy;
    public EntityFrameworkSagaRepositoryContextFactory`1(ISagaDbContextFactory`1<TSaga> dbContextFactory, ISagaConsumeContextFactory`2<DbContext, TSaga> consumeContextFactory, ISagaRepositoryLockStrategy`1<TSaga> lockStrategy);
    public sealed virtual Task`1<T> Execute(Func`2<LoadSagaRepositoryContext`1<TSaga>, Task`1<T>> asyncMethod, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> Execute(Func`2<QuerySagaRepositoryContext`1<TSaga>, Task`1<T>> asyncMethod, CancellationToken cancellationToken);
    public sealed virtual void Probe(ProbeContext context);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.Saga.EntityFrameworkSagaRepositoryContextFactory`1/<Send>d__7`1")]
public sealed virtual Task Send(ConsumeContext`1<T> context, IPipe`1<SagaRepositoryContext`2<TSaga, T>> next);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.Saga.EntityFrameworkSagaRepositoryContextFactory`1/<SendQuery>d__8`1")]
public sealed virtual Task SendQuery(ConsumeContext`1<T> context, ISagaQuery`1<TSaga> query, IPipe`1<SagaRepositoryQueryContext`2<TSaga, T>> next);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.Saga.EntityFrameworkSagaRepositoryContextFactory`1/<ExecuteAsyncMethod>d__9`1")]
private Task`1<T> ExecuteAsyncMethod(Func`2<DbContextSagaRepositoryContext`1<TSaga>, Task`1<T>> asyncMethod, CancellationToken cancellationToken);
    private Task WithinTransaction(DbContext context, CancellationToken cancellationToken, Func`1<Task> callback);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.Saga.EntityFrameworkSagaRepositoryContextFactory`1/<WithinTransaction>d__11`1")]
private Task`1<T> WithinTransaction(DbContext context, CancellationToken cancellationToken, Func`1<Task`1<T>> callback);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.Saga.EntityFrameworkSagaRepositoryContextFactory`1/<<WithinTransaction>g__Rollback|11_0>d`1")]
[CompilerGeneratedAttribute]
internal static Task <WithinTransaction>g__Rollback|11_0(IDbContextTransaction transaction);
}
public class MassTransit.EntityFrameworkCoreIntegration.Saga.OptimisticLoadQueryExecutor`1 : object {
    private Func`3<DbContext, Guid, Task`1<TSaga>> _compiledQuery;
    private Func`2<IQueryable`1<TSaga>, IQueryable`1<TSaga>> _queryCustomization;
    public OptimisticLoadQueryExecutor`1(Func`2<IQueryable`1<TSaga>, IQueryable`1<TSaga>> queryCustomization);
    public sealed virtual Task`1<TSaga> Load(DbContext dbContext, Guid correlationId, CancellationToken cancellationToken);
}
public class MassTransit.EntityFrameworkCoreIntegration.Saga.OptimisticSagaLockContext`1 : object {
    private CancellationToken _cancellationToken;
    private DbContext _context;
    private ISagaQuery`1<TSaga> _query;
    private Func`2<IQueryable`1<TSaga>, IQueryable`1<TSaga>> _queryCustomization;
    public OptimisticSagaLockContext`1(DbContext context, ISagaQuery`1<TSaga> query, CancellationToken cancellationToken, Func`2<IQueryable`1<TSaga>, IQueryable`1<TSaga>> queryCustomization);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.Saga.OptimisticSagaLockContext`1/<Load>d__5")]
public sealed virtual Task`1<IList`1<TSaga>> Load();
}
public class MassTransit.EntityFrameworkCoreIntegration.Saga.OptimisticSagaRepositoryLockStrategy`1 : object {
    private ILoadQueryExecutor`1<TSaga> _executor;
    private Func`2<IQueryable`1<TSaga>, IQueryable`1<TSaga>> _queryCustomization;
    [CompilerGeneratedAttribute]
private IsolationLevel <IsolationLevel>k__BackingField;
    public IsolationLevel IsolationLevel { get; }
    public OptimisticSagaRepositoryLockStrategy`1(ILoadQueryExecutor`1<TSaga> executor, Func`2<IQueryable`1<TSaga>, IQueryable`1<TSaga>> queryCustomization, IsolationLevel isolationLevel);
    [CompilerGeneratedAttribute]
public sealed virtual IsolationLevel get_IsolationLevel();
    public sealed virtual Task`1<TSaga> Load(DbContext context, Guid correlationId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.Saga.OptimisticSagaRepositoryLockStrategy`1/<CreateLockContext>d__7")]
public sealed virtual Task`1<SagaLockContext`1<TSaga>> CreateLockContext(DbContext context, ISagaQuery`1<TSaga> query, CancellationToken cancellationToken);
}
public class MassTransit.EntityFrameworkCoreIntegration.Saga.PessimisticLoadQueryExecutor`1 : object {
    private ILockStatementProvider _lockStatementProvider;
    private Func`2<IQueryable`1<TSaga>, IQueryable`1<TSaga>> _queryCustomization;
    private string _lockStatement;
    public PessimisticLoadQueryExecutor`1(ILockStatementProvider lockStatementProvider, Func`2<IQueryable`1<TSaga>, IQueryable`1<TSaga>> queryCustomization);
    public sealed virtual Task`1<TSaga> Load(DbContext dbContext, Guid correlationId, CancellationToken cancellationToken);
    private string GetLockStatement(DbContext dbContext);
}
public class MassTransit.EntityFrameworkCoreIntegration.Saga.PessimisticSagaLockContext`1 : object {
    private CancellationToken _cancellationToken;
    private DbContext _context;
    private ILoadQueryExecutor`1<TSaga> _executor;
    private IList`1<Guid> _instances;
    public PessimisticSagaLockContext`1(DbContext context, CancellationToken cancellationToken, IList`1<Guid> instances, ILoadQueryExecutor`1<TSaga> executor);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.Saga.PessimisticSagaLockContext`1/<Load>d__5")]
public sealed virtual Task`1<IList`1<TSaga>> Load();
}
public class MassTransit.EntityFrameworkCoreIntegration.Saga.PessimisticSagaRepositoryLockStrategy`1 : object {
    private ILoadQueryExecutor`1<TSaga> _executor;
    [CompilerGeneratedAttribute]
private IsolationLevel <IsolationLevel>k__BackingField;
    public IsolationLevel IsolationLevel { get; }
    public PessimisticSagaRepositoryLockStrategy`1(ILoadQueryExecutor`1<TSaga> executor, IsolationLevel isolationLevel);
    [CompilerGeneratedAttribute]
public sealed virtual IsolationLevel get_IsolationLevel();
    public sealed virtual Task`1<TSaga> Load(DbContext context, Guid correlationId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.EntityFrameworkCoreIntegration.Saga.PessimisticSagaRepositoryLockStrategy`1/<CreateLockContext>d__6")]
public sealed virtual Task`1<SagaLockContext`1<TSaga>> CreateLockContext(DbContext context, ISagaQuery`1<TSaga> query, CancellationToken cancellationToken);
}
public interface MassTransit.EntityFrameworkCoreIntegration.Saga.SagaLockContext`1 {
    public abstract virtual Task`1<IList`1<TSaga>> Load();
}
public abstract class MassTransit.EntityFrameworkCoreIntegration.SagaDbContext : DbContext {
    protected IEnumerable`1<ISagaClassMap> Configurations { get; }
    protected SagaDbContext(DbContextOptions options);
    protected abstract virtual IEnumerable`1<ISagaClassMap> get_Configurations();
    protected virtual void OnModelCreating(ModelBuilder modelBuilder);
}
public class MassTransit.EntityFrameworkCoreIntegration.SqliteLockStatementFormatter : object {
    public sealed virtual void Create(StringBuilder sb, string schema, string table);
    public sealed virtual void AppendColumn(StringBuilder sb, int index, string columnName);
    public sealed virtual void Complete(StringBuilder sb);
    public sealed virtual void CreateOutboxStatement(StringBuilder sb, string schema, string table, string columnName);
}
public class MassTransit.EntityFrameworkCoreIntegration.SqliteLockStatementProvider : SqlLockStatementProvider {
    public SqliteLockStatementProvider(bool enableSchemaCaching);
    public SqliteLockStatementProvider(string schemaName, bool enableSchemaCaching);
}
public class MassTransit.EntityFrameworkCoreIntegration.SqlLockStatementProvider : object {
    protected static ConcurrentDictionary`2<Type, SchemaTableColumnTrio> TableNames;
    private bool _enableSchemaCaching;
    private ILockStatementFormatter _formatter;
    [CompilerGeneratedAttribute]
private string <DefaultSchema>k__BackingField;
    private string DefaultSchema { get; }
    public SqlLockStatementProvider(string defaultSchema, ILockStatementFormatter formatter, bool enableSchemaCaching);
    public SqlLockStatementProvider(ILockStatementFormatter formatter, bool enableSchemaCaching);
    private static SqlLockStatementProvider();
    [CompilerGeneratedAttribute]
private string get_DefaultSchema();
    public virtual string GetRowLockStatement(DbContext context);
    public virtual string GetRowLockStatement(DbContext context, String[] propertyNames);
    public virtual string GetOutboxStatement(DbContext context);
    private string FormatLockStatement(DbContext context, String[] propertyNames);
    private SchemaTableColumnTrio GetSchemaAndTableNameAndColumnName(DbContext context, Type type, String[] propertyNames);
}
public class MassTransit.EntityFrameworkCoreIntegration.SqlServerLockStatementFormatter : object {
    private bool _serializable;
    public SqlServerLockStatementFormatter(bool serializable);
    public sealed virtual void Create(StringBuilder sb, string schema, string table);
    public sealed virtual void AppendColumn(StringBuilder sb, int index, string columnName);
    public sealed virtual void Complete(StringBuilder sb);
    public sealed virtual void CreateOutboxStatement(StringBuilder sb, string schema, string table, string columnName);
    private static string FormatTableName(string schema, string table);
}
public class MassTransit.EntityFrameworkCoreIntegration.SqlServerLockStatementProvider : SqlLockStatementProvider {
    public SqlServerLockStatementProvider(bool enableSchemaCaching, bool serializable);
    public SqlServerLockStatementProvider(string schemaName, bool enableSchemaCaching, bool serializable);
}
[ExtensionAttribute]
public static class MassTransit.EntityFrameworkCoreIntegration.ValueConversionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static PropertyBuilder`1<T> HasJsonConversion(PropertyBuilder`1<T> builder);
}
[ExtensionAttribute]
public static class MassTransit.EntityFrameworkCoreJobServiceConfigurationExtensions : object {
    [ExtensionAttribute]
public static void UseEntityFrameworkCoreSagaRepository(IJobServiceConfigurator configurator, Func`1<JobServiceSagaDbContext> contextFactory, ILockStatementProvider lockStatementProvider);
}
[ExtensionAttribute]
public static class MassTransit.EntityFrameworkCoreSagaRepositoryRegistrationExtensions : object {
    [ExtensionAttribute]
public static ISagaRegistrationConfigurator`1<TSaga> EntityFrameworkRepository(ISagaRegistrationConfigurator`1<TSaga> configurator, Action`1<IEntityFrameworkSagaRepositoryConfigurator`1<TSaga>> configure);
    [ExtensionAttribute]
public static ISagaRegistrationConfigurator`1<TSaga> EntityFrameworkRepository(ISagaRegistrationConfigurator`1<TSaga> configurator, IEntityFrameworkSagaRepository sagaRepository, Action`1<IEntityFrameworkSagaRepositoryConfigurator`1<TSaga>> configure, Action`1<EntityTypeBuilder`1<TSaga>> configureSagaMapping);
    [ExtensionAttribute]
public static ISagaRegistrationConfigurator`1<TSaga> EntityFrameworkRepository(ISagaRegistrationConfigurator`1<TSaga> configurator, IEntityFrameworkSagaRepository sagaRepository, Action`1<IEntityFrameworkSagaRepositoryConfigurator`1<TSaga>> configure, ISagaClassMap`1<TSaga> sagaClassMap);
    [ExtensionAttribute]
public static IJobSagaRegistrationConfigurator EntityFrameworkRepository(IJobSagaRegistrationConfigurator configurator, Action`1<IEntityFrameworkSagaRepositoryConfigurator> configure);
    [ExtensionAttribute]
public static void SetEntityFrameworkSagaRepositoryProvider(IRegistrationConfigurator configurator, Action`1<IEntityFrameworkSagaRepositoryConfigurator> configure);
    [ExtensionAttribute]
public static IEntityFrameworkSagaRepositoryConfigurator`1<T> UseSqlServer(IEntityFrameworkSagaRepositoryConfigurator`1<T> configurator);
    [ExtensionAttribute]
public static IEntityFrameworkSagaRepositoryConfigurator`1<T> UseSqlServer(IEntityFrameworkSagaRepositoryConfigurator`1<T> configurator, string schemaName);
    [ExtensionAttribute]
public static IEntityFrameworkSagaRepositoryConfigurator UseSqlServer(IEntityFrameworkSagaRepositoryConfigurator configurator);
    [ExtensionAttribute]
public static IEntityFrameworkSagaRepositoryConfigurator UseSqlServer(IEntityFrameworkSagaRepositoryConfigurator configurator, string schemaName);
    [ExtensionAttribute]
public static IEntityFrameworkSagaRepositoryConfigurator`1<T> UsePostgres(IEntityFrameworkSagaRepositoryConfigurator`1<T> configurator);
    [ExtensionAttribute]
public static IEntityFrameworkSagaRepositoryConfigurator`1<T> UsePostgres(IEntityFrameworkSagaRepositoryConfigurator`1<T> configurator, string schemaName);
    [ExtensionAttribute]
public static IEntityFrameworkSagaRepositoryConfigurator UsePostgres(IEntityFrameworkSagaRepositoryConfigurator configurator);
    [ExtensionAttribute]
public static IEntityFrameworkSagaRepositoryConfigurator UsePostgres(IEntityFrameworkSagaRepositoryConfigurator configurator, string schemaName);
    [ExtensionAttribute]
public static IEntityFrameworkSagaRepositoryConfigurator`1<T> UseMySql(IEntityFrameworkSagaRepositoryConfigurator`1<T> configurator);
    [ExtensionAttribute]
public static IEntityFrameworkSagaRepositoryConfigurator UseMySql(IEntityFrameworkSagaRepositoryConfigurator configurator);
    [ExtensionAttribute]
public static IEntityFrameworkSagaRepositoryConfigurator`1<T> UseSqlite(IEntityFrameworkSagaRepositoryConfigurator`1<T> configurator);
    [ExtensionAttribute]
public static IEntityFrameworkSagaRepositoryConfigurator UseSqlite(IEntityFrameworkSagaRepositoryConfigurator configurator);
    [ExtensionAttribute]
[ObsoleteAttribute("This will be removed in a future release")]
public static IEntityFrameworkSagaRepository CreateEntityFrameworkSagaRepository(IRegistrationConfigurator registrationConfigurator, Action`1<DbContextOptionsBuilder> configure);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.EntityFrameworkOutboxConfigurationExtensions : object {
    [ExtensionAttribute]
public static void AddEntityFrameworkOutbox(IBusRegistrationConfigurator configurator, Action`1<IEntityFrameworkOutboxConfigurator> configure);
    [ExtensionAttribute]
public static void UseEntityFrameworkOutbox(IReceiveEndpointConfigurator configurator, IRegistrationContext context, Action`1<IOutboxOptionsConfigurator> configure);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the IRegistrationContext overload instead. Visit https://masstransit.io/obsolete for details.")]
public static void UseEntityFrameworkOutbox(IReceiveEndpointConfigurator configurator, IServiceProvider provider, Action`1<IOutboxOptionsConfigurator> configure);
    [ExtensionAttribute]
public static IEntityFrameworkOutboxConfigurator UseSqlServer(IEntityFrameworkOutboxConfigurator configurator);
    [ExtensionAttribute]
public static IEntityFrameworkOutboxConfigurator UseSqlServer(IEntityFrameworkOutboxConfigurator configurator, bool enableSchemaCaching);
    [ExtensionAttribute]
public static IEntityFrameworkOutboxConfigurator UsePostgres(IEntityFrameworkOutboxConfigurator configurator);
    [ExtensionAttribute]
public static IEntityFrameworkOutboxConfigurator UsePostgres(IEntityFrameworkOutboxConfigurator configurator, bool enableSchemaCaching);
    [ExtensionAttribute]
public static IEntityFrameworkOutboxConfigurator UseMySql(IEntityFrameworkOutboxConfigurator configurator);
    [ExtensionAttribute]
public static IEntityFrameworkOutboxConfigurator UseMySql(IEntityFrameworkOutboxConfigurator configurator, bool enableSchemaCaching);
    [ExtensionAttribute]
public static IEntityFrameworkOutboxConfigurator UseSqlite(IEntityFrameworkOutboxConfigurator configurator);
    [ExtensionAttribute]
public static IEntityFrameworkOutboxConfigurator UseSqlite(IEntityFrameworkOutboxConfigurator configurator, bool enableSchemaCaching);
    [ExtensionAttribute]
public static void AddTransactionalOutboxEntities(ModelBuilder modelBuilder, Action`1<EntityTypeBuilder> callback);
    [ExtensionAttribute]
public static void AddInboxStateEntity(ModelBuilder modelBuilder, Action`1<EntityTypeBuilder`1<InboxState>> callback);
    [ExtensionAttribute]
public static void ConfigureInboxStateEntity(EntityTypeBuilder`1<InboxState> inbox);
    [ExtensionAttribute]
public static void AddOutboxStateEntity(ModelBuilder modelBuilder, Action`1<EntityTypeBuilder`1<OutboxState>> callback);
    [ExtensionAttribute]
public static void ConfigureOutboxStateEntity(EntityTypeBuilder`1<OutboxState> outbox);
    [ExtensionAttribute]
public static void AddOutboxMessageEntity(ModelBuilder modelBuilder, Action`1<EntityTypeBuilder`1<OutboxMessage>> callback);
    [ExtensionAttribute]
public static void ConfigureOutboxMessageEntity(EntityTypeBuilder`1<OutboxMessage> outbox);
}
public class MassTransit.EntityFrameworkOutboxOptions : object {
    [CompilerGeneratedAttribute]
private IsolationLevel <IsolationLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private ILockStatementProvider <LockStatementProvider>k__BackingField;
    public IsolationLevel IsolationLevel { get; public set; }
    public ILockStatementProvider LockStatementProvider { get; public set; }
    [CompilerGeneratedAttribute]
public IsolationLevel get_IsolationLevel();
    [CompilerGeneratedAttribute]
public void set_IsolationLevel(IsolationLevel value);
    [CompilerGeneratedAttribute]
public ILockStatementProvider get_LockStatementProvider();
    [CompilerGeneratedAttribute]
public void set_LockStatementProvider(ILockStatementProvider value);
}
public interface MassTransit.IEntityFrameworkBusOutboxConfigurator {
    unknown int MessageDeliveryLimit {public set; }
    public TimeSpan MessageDeliveryTimeout { get; public set; }
    public abstract virtual void set_MessageDeliveryLimit(int value);
    public abstract virtual TimeSpan get_MessageDeliveryTimeout();
    public abstract virtual void set_MessageDeliveryTimeout(TimeSpan value);
}
[NullableContextAttribute("1")]
public interface MassTransit.IEntityFrameworkOutboxConfigurator {
    unknown TimeSpan DuplicateDetectionWindow {public set; }
    unknown IsolationLevel IsolationLevel {public set; }
    unknown ILockStatementProvider LockStatementProvider {public set; }
    unknown TimeSpan QueryDelay {public set; }
    unknown int QueryMessageLimit {public set; }
    unknown TimeSpan QueryTimeout {public set; }
    public abstract virtual void set_DuplicateDetectionWindow(TimeSpan value);
    public abstract virtual void set_IsolationLevel(IsolationLevel value);
    public abstract virtual void set_LockStatementProvider(ILockStatementProvider value);
    public abstract virtual void set_QueryDelay(TimeSpan value);
    public abstract virtual void set_QueryMessageLimit(int value);
    public abstract virtual void set_QueryTimeout(TimeSpan value);
    public abstract virtual void DisableInboxCleanupService();
    public abstract virtual void UseBusOutbox(Action`1<IEntityFrameworkBusOutboxConfigurator> configure);
}
public interface MassTransit.IEntityFrameworkSagaRepository {
    public abstract virtual void AddSagaClassMap(ISagaClassMap`1<TSaga> sagaClassMap);
    public abstract virtual DbContext GetDbContext();
}
public interface MassTransit.IEntityFrameworkSagaRepositoryConfigurator {
    unknown ConcurrencyMode ConcurrencyMode {public set; }
    unknown IsolationLevel IsolationLevel {public set; }
    unknown ILockStatementProvider LockStatementProvider {public set; }
    public abstract virtual void set_ConcurrencyMode(ConcurrencyMode value);
    public abstract virtual void set_IsolationLevel(IsolationLevel value);
    public abstract virtual void set_LockStatementProvider(ILockStatementProvider value);
    public abstract virtual void AddDbContext(Action`2<IServiceProvider, DbContextOptionsBuilder`1<TImplementation>> optionsAction);
    public abstract virtual void DatabaseFactory(Func`1<DbContext> databaseFactory);
    public abstract virtual void DatabaseFactory(Func`2<IServiceProvider, Func`1<DbContext>> databaseFactory);
    public abstract virtual void ExistingDbContext();
}
public interface MassTransit.IEntityFrameworkSagaRepositoryConfigurator`1 {
    public abstract virtual void CustomizeQuery(Func`2<IQueryable`1<TSaga>, IQueryable`1<TSaga>> queryCustomization);
}
public abstract class MassTransit.SagaClassMap`1 : object {
    public Type SagaType { get; }
    public sealed virtual Type get_SagaType();
    public virtual void Configure(ModelBuilder model);
    protected virtual void Configure(EntityTypeBuilder`1<TSaga> entity, ModelBuilder model);
    protected virtual KeyBuilder ConfigureCorrelationIdKey(KeyBuilder keyBuilder);
}
