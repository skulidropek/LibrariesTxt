[ExtensionAttribute]
public static class MassTransit.DependencyInjectionExtensions : object {
    [ExtensionAttribute]
public static void UseServiceScope(IPipeConfigurator`1<ConsumeContext> configurator, IServiceProvider serviceProvider);
    [ExtensionAttribute]
public static void UseMessageScope(IConsumePipeConfigurator configurator, IServiceProvider serviceProvider);
    [ExtensionAttribute]
public static void RegisterInMemorySagaRepository(IServiceCollection collection);
    [ExtensionAttribute]
public static IRequestClient`1<T> CreateRequestClient(IServiceProvider provider, RequestTimeout timeout);
    [ExtensionAttribute]
public static IRequestClient`1<T> CreateRequestClient(IServiceProvider provider, Uri destinationAddress, RequestTimeout timeout);
    [ExtensionAttribute]
public static IServiceCollection AddGenericRequestClient(IServiceCollection collection);
}
[ExtensionAttribute]
public static class MassTransit.DependencyInjectionFilterExtensions : object {
    [ExtensionAttribute]
public static void UseConsumeFilter(IConsumePipeConfigurator configurator, Type filterType, IConfigurationServiceProvider provider);
    [ExtensionAttribute]
public static void UseSendFilter(ISendPipelineConfigurator configurator, Type filterType, IConfigurationServiceProvider provider);
    [ExtensionAttribute]
public static void UsePublishFilter(IPublishPipelineConfigurator configurator, Type filterType, IConfigurationServiceProvider provider);
    [ExtensionAttribute]
public static void UseExecuteActivityFilter(IConsumePipeConfigurator configurator, Type filterType, IConfigurationServiceProvider provider);
    [ExtensionAttribute]
public static void UseCompensateActivityFilter(IConsumePipeConfigurator configurator, Type filterType, IConfigurationServiceProvider provider);
}
[ExtensionAttribute]
public static class MassTransit.DependencyInjectionReceiveEndpointExtensions : object {
    [ExtensionAttribute]
public static void Consumer(IReceiveEndpointConfigurator configurator, IServiceProvider provider, Action`1<IConsumerConfigurator`1<T>> configure);
    [ExtensionAttribute]
public static void Consumer(IBatchConfigurator`1<TMessage> configurator, IServiceProvider provider, Action`1<IConsumerMessageConfigurator`2<TConsumer, Batch`1<TMessage>>> configure);
    [ExtensionAttribute]
public static ConnectHandle ConnectConsumer(IConsumePipeConnector connector, IServiceProvider provider, IPipeSpecification`1[] pipeSpecifications);
    [ExtensionAttribute]
public static void Saga(IReceiveEndpointConfigurator configurator, IServiceProvider provider, Action`1<ISagaConfigurator`1<T>> configure);
    [ExtensionAttribute]
public static void StateMachineSaga(IReceiveEndpointConfigurator configurator, SagaStateMachine`1<TInstance> stateMachine, IServiceProvider serviceProvider, Action`1<ISagaConfigurator`1<TInstance>> configure);
    [ExtensionAttribute]
public static void StateMachineSaga(IReceiveEndpointConfigurator configurator, IServiceProvider provider, Action`1<ISagaConfigurator`1<TInstance>> configure);
    [ExtensionAttribute]
public static void ExecuteActivityHost(IReceiveEndpointConfigurator configurator, Uri compensateAddress, IServiceProvider provider, Action`1<IExecuteActivityConfigurator`2<TActivity, TArguments>> configure);
    [ExtensionAttribute]
public static void ExecuteActivityHost(IReceiveEndpointConfigurator configurator, IServiceProvider provider, Action`1<IExecuteActivityConfigurator`2<TActivity, TArguments>> configure);
    [ExtensionAttribute]
public static void CompensateActivityHost(IReceiveEndpointConfigurator configurator, IServiceProvider provider, Action`1<ICompensateActivityConfigurator`2<TActivity, TLog>> configure);
}
[ExtensionAttribute]
public static class MassTransit.DependencyInjectionRegistrationExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddMassTransit(IServiceCollection collection, Action`1<IServiceCollectionBusConfigurator> configure);
    [ExtensionAttribute]
public static IServiceCollection AddMediator(IServiceCollection collection, Action`1<IServiceCollectionMediatorConfigurator> configure);
}
[ExtensionAttribute]
public static class MassTransit.DependencyInjectionStateMachineSagaRegistrationExtensions : object {
    [ExtensionAttribute]
public static void RegisterSagaStateMachine(IServiceCollection collection, Type type);
    [ExtensionAttribute]
public static void RegisterSagaStateMachine(IServiceCollection collection);
    [ExtensionAttribute]
public static void RegisterSagaStateMachines(IServiceCollection collection, Assembly[] assemblies);
    [ExtensionAttribute]
public static void RegisterSagaStateMachines(IServiceCollection collection, Type[] types);
}
public static class MassTransit.ExtensionsDependencyInjectionIntegration.Bind`1 : object {
    public static Bind`2<TKey, TValue> Create(TValue value);
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.Bind`2 : object {
    [CompilerGeneratedAttribute]
private TValue <Value>k__BackingField;
    public TValue Value { get; }
    public Bind`2(TValue value);
    [CompilerGeneratedAttribute]
public TValue get_Value();
    public static Bind`3<TKey, TValue, T> Create(T value);
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.Bind`3 : object {
    [CompilerGeneratedAttribute]
private TValue <Value>k__BackingField;
    public TValue Value { get; }
    public Bind`3(TValue value);
    [CompilerGeneratedAttribute]
public TValue get_Value();
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.DependencyInjectionStateMachineActivityFactory : object {
    public static IStateMachineActivityFactory Instance;
    private static DependencyInjectionStateMachineActivityFactory();
    public sealed virtual T GetService(PipeContext context);
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.Filters.ScopedCompensateActivityPipeSpecificationObserver : object {
    private Type _filterType;
    private IServiceProvider _provider;
    public ScopedCompensateActivityPipeSpecificationObserver(Type filterType, IServiceProvider provider);
    public sealed virtual void ActivityConfigured(IExecuteActivityConfigurator`2<TActivity, TArguments> configurator, Uri compensateAddress);
    public sealed virtual void ExecuteActivityConfigured(IExecuteActivityConfigurator`2<TActivity, TArguments> configurator);
    public sealed virtual void CompensateActivityConfigured(ICompensateActivityConfigurator`2<TActivity, TLog> configurator);
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.Filters.ScopedConsumerConsumePipeSpecificationObserver : object {
    private Type _filterType;
    private IServiceProvider _provider;
    public ScopedConsumerConsumePipeSpecificationObserver(Type filterType, IServiceProvider provider);
    public sealed virtual void ConsumerConfigured(IConsumerConfigurator`1<TConsumer> configurator);
    public sealed virtual void ConsumerMessageConfigured(IConsumerMessageConfigurator`2<TConsumer, TMessage> configurator);
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.Filters.ScopedExecuteActivityPipeSpecificationObserver : object {
    private Type _filterType;
    private IServiceProvider _provider;
    public ScopedExecuteActivityPipeSpecificationObserver(Type filterType, IServiceProvider provider);
    public sealed virtual void ActivityConfigured(IExecuteActivityConfigurator`2<TActivity, TArguments> configurator, Uri compensateAddress);
    public sealed virtual void ExecuteActivityConfigured(IExecuteActivityConfigurator`2<TActivity, TArguments> configurator);
    public sealed virtual void CompensateActivityConfigured(ICompensateActivityConfigurator`2<TActivity, TLog> configurator);
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.Filters.ScopedPublishPipeSpecificationObserver : object {
    private Type _filterType;
    private IServiceProvider _provider;
    public ScopedPublishPipeSpecificationObserver(Type filterType, IServiceProvider provider);
    public sealed virtual void MessageSpecificationCreated(IMessagePublishPipeSpecification`1<T> specification);
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.Filters.ScopedSagaConsumePipeSpecificationObserver : object {
    private Type _filterType;
    private IServiceProvider _provider;
    public ScopedSagaConsumePipeSpecificationObserver(Type filterType, IServiceProvider provider);
    public sealed virtual void SagaConfigured(ISagaConfigurator`1<TSaga> configurator);
    public sealed virtual void StateMachineSagaConfigured(ISagaConfigurator`1<TInstance> configurator, SagaStateMachine`1<TInstance> stateMachine);
    public sealed virtual void SagaMessageConfigured(ISagaMessageConfigurator`2<TSaga, TMessage> configurator);
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.Filters.ScopedSendPipeSpecificationObserver : object {
    private Type _filterType;
    private IServiceProvider _provider;
    public ScopedSendPipeSpecificationObserver(Type filterType, IServiceProvider provider);
    public sealed virtual void MessageSpecificationCreated(IMessageSendPipeSpecification`1<T> specification);
}
public interface MassTransit.ExtensionsDependencyInjectionIntegration.IServiceCollectionBusConfigurator {
    public IServiceCollection Collection { get; }
    public abstract virtual IServiceCollection get_Collection();
}
public interface MassTransit.ExtensionsDependencyInjectionIntegration.IServiceCollectionMediatorConfigurator {
    public IServiceCollection Collection { get; }
    public abstract virtual IServiceCollection get_Collection();
}
public interface MassTransit.ExtensionsDependencyInjectionIntegration.IServiceCollectionRiderConfigurator {
    public IServiceCollection Collection { get; }
    public abstract virtual IServiceCollection get_Collection();
}
public interface MassTransit.ExtensionsDependencyInjectionIntegration.MultiBus.IServiceCollectionBusConfigurator`1 {
}
[ObsoleteAttribute("Replace with IServiceCollectionBusConfigurator<TBus>. This interface will be removed in next versions.")]
public interface MassTransit.ExtensionsDependencyInjectionIntegration.MultiBus.IServiceCollectionConfigurator`1 {
}
public interface MassTransit.ExtensionsDependencyInjectionIntegration.MultiBus.IServiceCollectionRiderConfigurator`1 {
    public IServiceCollection Collection { get; }
    public abstract virtual IServiceCollection get_Collection();
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.MultiBus.ServiceCollectionBusConfigurator`2 : ServiceCollectionBusConfigurator {
    public ServiceCollectionBusConfigurator`2(IServiceCollection collection);
    public virtual void AddBus(Func`2<IBusRegistrationContext, IBusControl> busFactory);
    public virtual void SetBusFactory(T busFactory);
    public virtual void AddRider(Action`1<IRiderRegistrationConfigurator> configure);
    private static IBusInstance`1<TBus> CreateBus(T busFactory, IServiceProvider provider);
    private static ISendEndpointProvider GetSendEndpointProvider(IServiceProvider provider);
    private static IPublishEndpoint GetPublishEndpoint(IServiceProvider provider);
    private sealed virtual override IContainerRegistrar MassTransit.IBusRegistrationConfigurator.get_Registrar();
    [CompilerGeneratedAttribute]
private IBusRegistrationContext <.ctor>g__CreateRegistrationContext|0_0(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private Bind`2<TBus, IClientFactory> <.ctor>b__0_3(IServiceProvider provider);
    [CompilerGeneratedAttribute]
private Bind`2<TBus, IBusRegistrationContext> <.ctor>b__0_4(IServiceProvider provider);
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.MultiBus.ServiceCollectionRiderConfigurator`1 : ServiceCollectionRiderConfigurator {
    public ServiceCollectionRiderConfigurator`1(IServiceCollection collection, IContainerRegistrar registrar, HashSet`1<Type> riderTypes);
    public virtual void SetRiderFactory(IRegistrationRiderFactory`1<TRider> riderFactory);
    private sealed virtual override IContainerRegistrar MassTransit.Registration.IRiderRegistrationConfigurator.get_Registrar();
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.Registration.DependencyInjectionConfigurationServiceProvider : object {
    private IServiceProvider _provider;
    public DependencyInjectionConfigurationServiceProvider(IServiceProvider provider);
    public sealed virtual T GetRequiredService();
    public sealed virtual T GetService();
    public sealed virtual object GetService(Type serviceType);
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.Registration.DependencyInjectionContainerRegistrar : object {
    private IServiceCollection _collection;
    public DependencyInjectionContainerRegistrar(IServiceCollection collection);
    private sealed virtual override void MassTransit.Registration.IContainerRegistrar.RegisterConsumer();
    private sealed virtual override void MassTransit.Registration.IContainerRegistrar.RegisterConsumerDefinition();
    private sealed virtual override void MassTransit.Registration.IContainerRegistrar.RegisterSaga();
    private sealed virtual override void MassTransit.Registration.IContainerRegistrar.RegisterSagaStateMachine();
    private sealed virtual override void MassTransit.Registration.IContainerRegistrar.RegisterSagaRepository(Func`2<IConfigurationServiceProvider, ISagaRepository`1<TSaga>> repositoryFactory);
    private sealed virtual override void MassTransit.Registration.IContainerRegistrar.RegisterSagaRepository();
    private sealed virtual override void MassTransit.Registration.IContainerRegistrar.RegisterSagaDefinition();
    private sealed virtual override void MassTransit.Registration.IContainerRegistrar.RegisterExecuteActivity();
    private sealed virtual override void MassTransit.Registration.IContainerRegistrar.RegisterCompensateActivity();
    private sealed virtual override void MassTransit.Registration.IContainerRegistrar.RegisterActivityDefinition();
    private sealed virtual override void MassTransit.Registration.IContainerRegistrar.RegisterExecuteActivityDefinition();
    private sealed virtual override void MassTransit.Registration.IContainerRegistrar.RegisterEndpointDefinition(IEndpointSettings`1<IEndpointDefinition`1<T>> settings);
    public sealed virtual void RegisterFuture();
    public sealed virtual void RegisterFutureDefinition();
    private sealed virtual override void MassTransit.Registration.IContainerRegistrar.RegisterRequestClient(RequestTimeout timeout);
    private sealed virtual override void MassTransit.Registration.IContainerRegistrar.RegisterRequestClient(Uri destinationAddress, RequestTimeout timeout);
    private sealed virtual override void MassTransit.Registration.IContainerRegistrar.RegisterScopedClientFactory();
    public sealed virtual void Register();
    public sealed virtual void Register(Func`2<IConfigurationServiceProvider, T> factoryMethod);
    public sealed virtual void RegisterSingleInstance(Func`2<IConfigurationServiceProvider, T> factoryMethod);
    public sealed virtual void RegisterSingleInstance(T instance);
    protected virtual IClientFactory GetClientFactory(IServiceProvider provider);
    [CompilerGeneratedAttribute]
private IScopedClientFactory <MassTransit.Registration.IContainerRegistrar.RegisterScopedClientFactory>b__18_0(IServiceProvider provider);
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.Registration.DependencyInjectionContainerRegistrar`1 : DependencyInjectionContainerRegistrar {
    public DependencyInjectionContainerRegistrar`1(IServiceCollection collection);
    protected virtual IClientFactory GetClientFactory(IServiceProvider provider);
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.Registration.DependencyInjectionMediatorContainerRegistrar : DependencyInjectionContainerRegistrar {
    public DependencyInjectionMediatorContainerRegistrar(IServiceCollection collection);
    protected virtual IClientFactory GetClientFactory(IServiceProvider provider);
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.Registration.DependencyInjectionScopeServiceProvider : object {
    private IServiceProvider _provider;
    public DependencyInjectionScopeServiceProvider(IServiceProvider provider);
    public sealed virtual T GetRequiredService();
    public sealed virtual T GetService();
    public sealed virtual object GetService(Type serviceType);
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.Registration.MessageScopeConfigurationObserver : ConfigurationObserver {
    private IMessageScopeProvider _scopeProvider;
    private IServiceProvider _serviceProvider;
    public MessageScopeConfigurationObserver(IConsumePipeConfigurator receiveEndpointConfigurator, IServiceProvider serviceProvider);
    public sealed virtual void MessageConfigured(IConsumePipeConfigurator configurator);
    public virtual void BatchConsumerConfigured(IConsumerMessageConfigurator`2<TConsumer, Batch`1<TMessage>> configurator);
    public virtual void ActivityConfigured(IExecuteActivityConfigurator`2<TActivity, TArguments> configurator, Uri compensateAddress);
    public virtual void ExecuteActivityConfigured(IExecuteActivityConfigurator`2<TActivity, TArguments> configurator);
    public virtual void CompensateActivityConfigured(ICompensateActivityConfigurator`2<TActivity, TLog> configurator);
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.Registration.ServiceCollectionBusConfigurator : RegistrationConfigurator {
    protected HashSet`1<Type> RiderTypes;
    [CompilerGeneratedAttribute]
private IServiceCollection <Collection>k__BackingField;
    public IServiceCollection Collection { get; }
    public ServiceCollectionBusConfigurator(IServiceCollection collection);
    protected ServiceCollectionBusConfigurator(IServiceCollection collection, IContainerRegistrar registrar);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Collection();
    public virtual void AddBus(Func`2<IBusRegistrationContext, IBusControl> busFactory);
    public virtual void SetBusFactory(T busFactory);
    public virtual void AddRider(Action`1<IRiderRegistrationConfigurator> configure);
    private static IBusInstance CreateBus(T busFactory, IServiceProvider provider);
    private static void AddMassTransitComponents(IServiceCollection collection);
    private static ISendEndpointProvider GetCurrentSendEndpointProvider(IServiceProvider provider);
    private static IPublishEndpoint GetCurrentPublishEndpoint(IServiceProvider provider);
    private sealed virtual override IContainerRegistrar MassTransit.IBusRegistrationConfigurator.get_Registrar();
    [CompilerGeneratedAttribute]
private IBusRegistrationContext <.ctor>g__CreateRegistrationContext|1_0(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IClientFactory <.ctor>b__1_1(IServiceProvider provider);
    [CompilerGeneratedAttribute]
private Bind`2<IBus, IBusRegistrationContext> <.ctor>b__1_2(IServiceProvider provider);
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.Registration.ServiceCollectionMediatorConfigurator : RegistrationConfigurator {
    private Action`2<IMediatorRegistrationContext, IMediatorConfigurator> _configure;
    [CompilerGeneratedAttribute]
private IServiceCollection <Collection>k__BackingField;
    public IServiceCollection Collection { get; }
    public ServiceCollectionMediatorConfigurator(IServiceCollection collection);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Collection();
    public sealed virtual void ConfigureMediator(Action`2<IMediatorRegistrationContext, IMediatorConfigurator> configure);
    private static void AddMassTransitComponents(IServiceCollection collection);
    private IMediator MediatorFactory(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IMediatorRegistrationContext <.ctor>g__CreateRegistrationContext|1_0(IServiceProvider provider);
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.Registration.ServiceCollectionRiderConfigurator : RegistrationConfigurator {
    private HashSet`1<Type> _riderTypes;
    protected RegistrationCache`1<object> Registrations;
    [CompilerGeneratedAttribute]
private IServiceCollection <Collection>k__BackingField;
    public IServiceCollection Collection { get; }
    public ServiceCollectionRiderConfigurator(IServiceCollection collection, IContainerRegistrar registrar, HashSet`1<Type> riderTypes);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Collection();
    public sealed virtual void AddRegistration(T registration);
    public virtual void SetRiderFactory(IRegistrationRiderFactory`1<TRider> riderFactory);
    protected void ThrowIfAlreadyConfigured();
    private sealed virtual override IContainerRegistrar MassTransit.Registration.IRiderRegistrationConfigurator.get_Registrar();
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.ScopeProviders.DependencyInjectionCompensateActivityScopeProvider`2 : object {
    private IServiceProvider _serviceProvider;
    public DependencyInjectionCompensateActivityScopeProvider`2(IServiceProvider serviceProvider);
    public sealed virtual ValueTask`1<ICompensateActivityScopeContext`2<TActivity, TLog>> GetScope(CompensateContext`1<TLog> context);
    public sealed virtual void Probe(ProbeContext context);
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.ScopeProviders.DependencyInjectionConsumerScopeProvider : object {
    private IServiceProvider _serviceProvider;
    public DependencyInjectionConsumerScopeProvider(IServiceProvider serviceProvider);
    private sealed virtual override void GreenPipes.IProbeSite.Probe(ProbeContext context);
    public sealed virtual ValueTask`1<IConsumerScopeContext> GetScope(ConsumeContext context);
    public sealed virtual ValueTask`1<IConsumerScopeContext`2<TConsumer, T>> GetScope(ConsumeContext`1<T> context);
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.ScopeProviders.DependencyInjectionExecuteActivityScopeProvider`2 : object {
    private IServiceProvider _serviceProvider;
    public DependencyInjectionExecuteActivityScopeProvider`2(IServiceProvider serviceProvider);
    public sealed virtual ValueTask`1<IExecuteActivityScopeContext`2<TActivity, TArguments>> GetScope(ExecuteContext`1<TArguments> context);
    public sealed virtual void Probe(ProbeContext context);
}
[ExtensionAttribute]
public static class MassTransit.ExtensionsDependencyInjectionIntegration.ScopeProviders.DependencyInjectionFilterContextScopeProvider : object {
    [ExtensionAttribute]
public static void AddScopedFilter(IPipeConfigurator`1<TContext> configurator, Type scopedType, IServiceProvider provider);
    [ExtensionAttribute]
public static void AddScopedFilter(IPipeConfigurator`1<TContext> configurator, Type scopedType, IServiceProvider provider);
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.ScopeProviders.DependencyInjectionFilterContextScopeProvider`2 : object {
    private IServiceProvider _serviceProvider;
    public DependencyInjectionFilterContextScopeProvider`2(IServiceProvider serviceProvider);
    public sealed virtual IFilterContextScope`1<TContext> Create(TContext context);
    public sealed virtual void Probe(ProbeContext context);
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.ScopeProviders.DependencyInjectionFilterContextScopeProvider`3 : object {
    private IServiceProvider _serviceProvider;
    public DependencyInjectionFilterContextScopeProvider`3(IServiceProvider serviceProvider);
    public sealed virtual IFilterContextScope`1<TContext> Create(TContext context);
    public sealed virtual void Probe(ProbeContext context);
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.ScopeProviders.DependencyInjectionMessageScopeProvider : object {
    private IServiceProvider _serviceProvider;
    public DependencyInjectionMessageScopeProvider(IServiceProvider serviceProvider);
    private sealed virtual override void GreenPipes.IProbeSite.Probe(ProbeContext context);
    public sealed virtual ValueTask`1<IMessageScopeContext`1<T>> GetScope(ConsumeContext`1<T> context);
}
public class MassTransit.ExtensionsDependencyInjectionIntegration.ScopeProviders.DependencyInjectionSagaRepositoryContextFactory`1 : object {
    private IServiceProvider _serviceProvider;
    public DependencyInjectionSagaRepositoryContextFactory`1(IServiceProvider serviceProvider);
    private sealed virtual override void GreenPipes.IProbeSite.Probe(ProbeContext context);
    public sealed virtual Task Send(ConsumeContext`1<T> context, IPipe`1<SagaRepositoryContext`2<TSaga, T>> next);
    public sealed virtual Task SendQuery(ConsumeContext`1<T> context, ISagaQuery`1<TSaga> query, IPipe`1<SagaRepositoryQueryContext`2<TSaga, T>> next);
    [AsyncStateMachineAttribute("MassTransit.ExtensionsDependencyInjectionIntegration.ScopeProviders.DependencyInjectionSagaRepositoryContextFactory`1/<Execute>d__5`1")]
public sealed virtual Task`1<T> Execute(Func`2<SagaRepositoryContext`1<TSaga>, Task`1<T>> asyncMethod, CancellationToken cancellationToken);
    private Task Send(ConsumeContext`1<T> context, Func`3<ConsumeContext`1<T>, ISagaRepositoryContextFactory`1<TSaga>, Task> send);
}
[ExtensionAttribute]
internal static class MassTransit.ExtensionsDependencyInjectionIntegration.ScopeProviders.InternalScopeExtensions : object {
    [ExtensionAttribute]
public static void SetCurrentConsumeContext(IServiceScope scope, ConsumeContext context);
}
[ExtensionAttribute]
public static class MassTransit.MultiBus.DependencyInjectionMultiBusRegistrationExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddMassTransit(IServiceCollection collection, Action`1<IServiceCollectionBusConfigurator`1<TBus>> configure);
    [ExtensionAttribute]
public static IServiceCollection AddMassTransit(IServiceCollection collection, Action`1<IServiceCollectionBusConfigurator`1<TBus>> configure);
}
[ExtensionAttribute]
public static class MassTransit.MultiBus.Transactions.DependencyInjectionTransactionExtensions : object {
    [ExtensionAttribute]
public static void AddTransactionalEnlistmentBus(IServiceCollectionBusConfigurator`1<TBus> busConfigurator);
    [ExtensionAttribute]
public static void AddTransactionalBus(IServiceCollectionBusConfigurator`1<TBus> busConfigurator);
}
[ExtensionAttribute]
public static class MassTransit.Testing.DependencyInjectionTestingExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddMassTransitInMemoryTestHarness(IServiceCollection services, Action`1<IServiceCollectionBusConfigurator> configure);
    [ExtensionAttribute]
public static void AddConsumerTestHarness(IServiceCollectionBusConfigurator configurator);
    [ExtensionAttribute]
public static void AddSagaTestHarness(IServiceCollectionBusConfigurator configurator);
    [ExtensionAttribute]
public static void AddSagaStateMachineTestHarness(IServiceCollectionBusConfigurator configurator);
}
[ExtensionAttribute]
public static class MassTransit.Transactions.DependencyInjectionTransactionExtensions : object {
    [ExtensionAttribute]
public static void AddTransactionalEnlistmentBus(IServiceCollectionBusConfigurator busConfigurator);
    [ExtensionAttribute]
public static void AddTransactionalBus(IServiceCollectionBusConfigurator busConfigurator);
}
