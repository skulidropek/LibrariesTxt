[ExtensionAttribute]
public static class MassTransit.EncryptedSerializerConfigurationExtensions : object {
    [ExtensionAttribute]
public static void UseEncryptedSerializerV2WithFallback(IBusFactoryConfigurator configurator, ICryptoStreamProviderV2 primaryProvider, ICryptoStreamProviderV2 secondaryProvider);
    [ExtensionAttribute]
public static void UseEncryptedSerializerV2WithFallback(IReceiveEndpointConfigurator configurator, ICryptoStreamProviderV2 primaryProvider, ICryptoStreamProviderV2 secondaryProvider);
    [ExtensionAttribute]
public static void UseEncryptedSerializerV2WithFallback(IBusFactoryConfigurator configurator, Byte[] primarySymmetricKey, Byte[] secondarySymmetricKey);
    [ExtensionAttribute]
public static void UseEncryptedSerializerV2WithFallback(IReceiveEndpointConfigurator configurator, Byte[] primarySymmetricKey, Byte[] secondarySymmetricKey);
    [ExtensionAttribute]
public static void UseEncryptedSerializerV2WithFallback(IBusFactoryConfigurator configurator, ISecureKeyProvider primaryKeyProvider, ISecureKeyProvider secondaryKeyProvider);
    [ExtensionAttribute]
public static void UseEncryptedSerializerV2WithFallback(IReceiveEndpointConfigurator configurator, ISecureKeyProvider primaryKeyProvider, ISecureKeyProvider secondaryKeyProvider);
}
[ExtensionAttribute]
public static class MassTransit.NewtonsoftBsonConfigurationExtensions : object {
    [ExtensionAttribute]
public static void UseBsonSerializer(IBusFactoryConfigurator configurator);
    [ExtensionAttribute]
public static void UseBsonDeserializer(IBusFactoryConfigurator configurator, bool isDefault);
    [ExtensionAttribute]
public static void UseBsonSerializer(IReceiveEndpointConfigurator configurator);
    [ExtensionAttribute]
public static void UseBsonDeserializer(IReceiveEndpointConfigurator configurator, bool isDefault);
    [ExtensionAttribute]
public static void ConfigureBsonSerializer(IBusFactoryConfigurator configurator, Func`2<JsonSerializerSettings, JsonSerializerSettings> configure);
    [ExtensionAttribute]
public static void ConfigureBsonDeserializer(IBusFactoryConfigurator configurator, Func`2<JsonSerializerSettings, JsonSerializerSettings> configure);
}
[ExtensionAttribute]
public static class MassTransit.NewtonsoftJsonConfigurationExtensions : object {
    [ExtensionAttribute]
public static void UseNewtonsoftJsonSerializer(IBusFactoryConfigurator configurator);
    [ExtensionAttribute]
public static void UseNewtonsoftJsonSerializer(IReceiveEndpointConfigurator configurator);
    [ExtensionAttribute]
public static void UseNewtonsoftJsonDeserializer(IBusFactoryConfigurator configurator, bool isDefault);
    [ExtensionAttribute]
public static void UseNewtonsoftJsonDeserializer(IReceiveEndpointConfigurator configurator, bool isDefault);
    [ExtensionAttribute]
public static void ConfigureNewtonsoftJsonSerializer(IBusFactoryConfigurator configurator, Func`2<JsonSerializerSettings, JsonSerializerSettings> configure);
    [ExtensionAttribute]
public static void ConfigureNewtonsoftJsonDeserializer(IBusFactoryConfigurator configurator, Func`2<JsonSerializerSettings, JsonSerializerSettings> configure);
}
[ExtensionAttribute]
public static class MassTransit.NewtonsoftRawJsonConfigurationExtensions : object {
    [ExtensionAttribute]
public static void UseNewtonsoftRawJsonSerializer(IBusFactoryConfigurator configurator, RawSerializerOptions options);
    [ExtensionAttribute]
public static void AddNewtonsoftRawJsonSerializer(IBusFactoryConfigurator configurator, RawSerializerOptions options);
    [ExtensionAttribute]
public static void UseNewtonsoftRawJsonDeserializer(IBusFactoryConfigurator configurator, RawSerializerOptions options);
    [ExtensionAttribute]
public static void UseNewtonsoftRawJsonSerializer(IReceiveEndpointConfigurator configurator, RawSerializerOptions options);
    [ExtensionAttribute]
public static void UseNewtonsoftRawJsonDeserializer(IReceiveEndpointConfigurator configurator, RawSerializerOptions options);
}
[ExtensionAttribute]
public static class MassTransit.NewtonsoftRawXmlConfigurationExtensions : object {
    [ExtensionAttribute]
public static void UseRawXmlSerializer(IBusFactoryConfigurator configurator, RawSerializerOptions options);
    [ExtensionAttribute]
public static void UseRawXmlSerializer(IReceiveEndpointConfigurator configurator, RawSerializerOptions options);
    [ExtensionAttribute]
public static void UseRawXmlDeserializer(IBusFactoryConfigurator configurator, RawSerializerOptions options);
    [ExtensionAttribute]
public static void UseRawXmlDeserializer(IReceiveEndpointConfigurator configurator, RawSerializerOptions options);
}
[ExtensionAttribute]
public static class MassTransit.NewtonsoftXmlConfigurationExtensions : object {
    [ExtensionAttribute]
public static void UseXmlSerializer(IBusFactoryConfigurator configurator);
    [ExtensionAttribute]
public static void UseXmlSerializer(IReceiveEndpointConfigurator configurator);
    [ExtensionAttribute]
public static void UseXmlDeserializer(IBusFactoryConfigurator configurator, bool isDefault);
    [ExtensionAttribute]
public static void UseXmlDeserializer(IReceiveEndpointConfigurator configurator, bool isDefault);
}
public class MassTransit.Serialization.BsonMessageSerializer : object {
    public static string ContentTypeHeaderValue;
    public static ContentType BsonContentType;
    private static Lazy`1<JsonSerializer> _deserializer;
    private static Lazy`1<JsonSerializer> _serializer;
    public static CaseInsensitiveDictionaryJsonConverter CaseInsensitiveDictionaryJsonConverter;
    public static InterfaceProxyConverter InterfaceProxyConverter;
    public static InternalTypeConverter InternalTypeConverter;
    public static NewtonsoftMessageDataJsonConverter MessageDataJsonConverter;
    public static IsoDateTimeConverter IsoDateTimeConverter;
    public static JsonSerializerSettings DeserializerSettings;
    public static JsonSerializerSettings SerializerSettings;
    private static Lazy`1<IMessageSerializer> _instance;
    public static IMessageSerializer Instance { get; }
    public static JsonSerializer Deserializer { get; }
    public static JsonSerializer Serializer { get; }
    public ContentType ContentType { get; }
    private static BsonMessageSerializer();
    public static IMessageSerializer get_Instance();
    public static JsonSerializer get_Deserializer();
    public static JsonSerializer get_Serializer();
    public sealed virtual MessageBody GetMessageBody(SendContext`1<T> context);
    public sealed virtual ContentType get_ContentType();
}
[ExtensionAttribute]
public static class MassTransit.Serialization.CryptoStreamProviderExtensions : object {
    [ExtensionAttribute]
public static Stream GetEncryptStream(ICryptoStreamProvider provider, Stream stream, SendContext context);
    [ExtensionAttribute]
public static Stream GetEncryptStream(ICryptoStreamProvider provider, Stream stream, TransformContext context);
    [ExtensionAttribute]
public static Stream GetDecryptStream(ICryptoStreamProvider provider, Stream stream, Headers headers);
    [ExtensionAttribute]
public static Stream GetDecryptStream(ICryptoStreamProvider provider, Stream stream, TransformContext context);
    [ExtensionAttribute]
public static void SetEncryptionKeyId(IPipeConfigurator`1<SendContext`1<T>> configurator, string keyName);
    [ExtensionAttribute]
public static void SetEncryptionKeyId(SendContext`1<T> sendContext, string keyName);
}
public class MassTransit.Serialization.EncryptedFallbackMessageDeserializerV2 : object {
    private static Type[] ExceptionsToRetry;
    private IMessageDeserializer _primaryMessageDeserializer;
    private IMessageDeserializer _secondaryMessageDeserializer;
    public ContentType ContentType { get; }
    public EncryptedFallbackMessageDeserializerV2(ICryptoStreamProviderV2 primaryCryptoStream, ICryptoStreamProviderV2 secondaryCryptoStream);
    public EncryptedFallbackMessageDeserializerV2(IMessageDeserializer primaryMessageDeserializer, IMessageDeserializer secondaryMessageDeserializer);
    private static EncryptedFallbackMessageDeserializerV2();
    public sealed virtual ContentType get_ContentType();
    public sealed virtual void Probe(ProbeContext context);
    public sealed virtual ConsumeContext Deserialize(ReceiveContext receiveContext);
    public sealed virtual SerializerContext Deserialize(MessageBody body, Headers headers, Uri destinationAddress);
    public sealed virtual MessageBody GetMessageBody(string text);
    private ConsumeContext Deserialize(ReceiveContext receiveContext, bool isRetry);
    private SerializerContext Deserialize(MessageBody body, Headers headers, bool isRetry, Uri destinationAddress);
    private MessageBody GetMessageBody(string text, bool isRetry);
    private static bool ShouldRetry(bool isRetry, SerializationException e);
}
public class MassTransit.Serialization.EncryptedFallbackSerializerFactoryV2 : object {
    private ICryptoStreamProviderV2 _cryptoStream;
    private ICryptoStreamProviderV2 _fallbackCryptoStream;
    public ContentType ContentType { get; }
    public EncryptedFallbackSerializerFactoryV2(ICryptoStreamProviderV2 cryptoStream, ICryptoStreamProviderV2 fallbackCryptoStream);
    public sealed virtual ContentType get_ContentType();
    public sealed virtual IMessageSerializer CreateSerializer();
    public sealed virtual IMessageDeserializer CreateDeserializer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.EncryptedMessageDeserializer : object {
    private JsonSerializer _deserializer;
    private IObjectDeserializer _objectDeserializer;
    private ICryptoStreamProvider _provider;
    public ContentType ContentType { get; }
    public EncryptedMessageDeserializer(JsonSerializer deserializer, ICryptoStreamProvider provider);
    public sealed virtual void Probe(ProbeContext context);
    public sealed virtual ContentType get_ContentType();
    public sealed virtual ConsumeContext Deserialize(ReceiveContext receiveContext);
    public sealed virtual SerializerContext Deserialize(MessageBody body, Headers headers, Uri destinationAddress);
    public sealed virtual MessageBody GetMessageBody(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.EncryptedMessageDeserializerV2 : object {
    private ICryptoStreamProviderV2 _cryptoStreamProvider;
    private JsonSerializer _deserializer;
    private IObjectDeserializer _objectDeserializer;
    public ContentType ContentType { get; }
    public EncryptedMessageDeserializerV2(JsonSerializer deserializer, ICryptoStreamProviderV2 cryptoStreamProvider);
    public sealed virtual void Probe(ProbeContext context);
    public sealed virtual ContentType get_ContentType();
    public sealed virtual ConsumeContext Deserialize(ReceiveContext receiveContext);
    public sealed virtual SerializerContext Deserialize(MessageBody body, Headers headers, Uri destinationAddress);
    public sealed virtual MessageBody GetMessageBody(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.EncryptedMessageSerializer : object {
    public static string ContentTypeHeaderValue;
    public static string EncryptionKeyHeader;
    public static ContentType EncryptedContentType;
    private BsonMessageSerializer _bsonMessageSerializer;
    private ICryptoStreamProvider _streamProvider;
    public ContentType ContentType { get; }
    public EncryptedMessageSerializer(ICryptoStreamProvider streamProvider);
    private static EncryptedMessageSerializer();
    public sealed virtual ContentType get_ContentType();
    public sealed virtual MessageBody GetMessageBody(SendContext`1<T> context);
}
public class MassTransit.Serialization.EncryptedMessageSerializerV2 : object {
    public static string ContentTypeHeaderValue;
    public static ContentType EncryptedContentType;
    private ICryptoStreamProviderV2 _streamProvider;
    public ContentType ContentType { get; }
    public EncryptedMessageSerializerV2(ICryptoStreamProviderV2 streamProvider);
    private static EncryptedMessageSerializerV2();
    public sealed virtual ContentType get_ContentType();
    public sealed virtual MessageBody GetMessageBody(SendContext`1<T> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.EncryptMessageBody`1 : object {
    private MessageBody _clearMessageBody;
    private SendContext`1<T> _context;
    private ICryptoStreamProvider _provider;
    [NullableAttribute("2")]
private Byte[] _bytes;
    public Nullable`1<long> Length { get; }
    public EncryptMessageBody`1(ICryptoStreamProvider provider, SendContext`1<T> context, MessageBody clearMessageBody);
    public sealed virtual Nullable`1<long> get_Length();
    public sealed virtual Stream GetStream();
    public sealed virtual Byte[] GetBytes();
    public sealed virtual string GetString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.EncryptMessageBodyV2`1 : object {
    private MessageBody _clearMessageBody;
    private SendContext`1<T> _context;
    private ICryptoStreamProviderV2 _provider;
    [NullableAttribute("2")]
private Byte[] _bytes;
    public Nullable`1<long> Length { get; }
    public EncryptMessageBodyV2`1(ICryptoStreamProviderV2 provider, SendContext`1<T> context, MessageBody clearMessageBody);
    public sealed virtual Nullable`1<long> get_Length();
    public sealed virtual Stream GetStream();
    public sealed virtual Byte[] GetBytes();
    public sealed virtual string GetString();
}
public abstract class MassTransit.Serialization.JsonConverters.BaseJsonConverter : JsonConverter {
    private ConcurrentDictionary`2<Type, IConverter> _cached;
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
    private IConverter CreateMissingConverter(Type objectType);
    protected abstract virtual IConverter ValueFactory(Type objectType);
}
public class MassTransit.Serialization.JsonConverters.ByteArrayConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
    private Byte[] GetByteArray(object value);
    private Byte[] ReadByteArray(JsonReader reader);
}
public class MassTransit.Serialization.JsonConverters.CaseInsensitiveDictionary`1 : Dictionary`2<string, T> {
}
public class MassTransit.Serialization.JsonConverters.CaseInsensitiveDictionaryJsonConverter : BaseJsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    protected virtual IConverter ValueFactory(Type objectType);
    private static bool CanConvert(Type objectType, Type& keyType, Type& valueType);
}
public class MassTransit.Serialization.JsonConverters.InterfaceProxyConverter : BaseJsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    protected virtual IConverter ValueFactory(Type objectType);
}
public class MassTransit.Serialization.JsonConverters.InternalTypeConverter : BaseJsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    protected virtual IConverter ValueFactory(Type objectType);
}
public class MassTransit.Serialization.JsonConverters.JsonContractResolver : DefaultContractResolver {
    private JsonConverter[] _converters;
    public JsonContractResolver(JsonConverter[] converters);
    protected virtual JsonContract CreateContract(Type objectType);
    protected virtual JsonDictionaryContract CreateDictionaryContract(Type objectType);
    private static string ContractDictionaryKeyResolver(string x);
    protected virtual JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization);
}
public class MassTransit.Serialization.JsonConverters.JsonMessageContextHostInfoConverter : JsonConverter {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
public class MassTransit.Serialization.JsonConverters.ListJsonConverter : BaseJsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    protected virtual IConverter ValueFactory(Type objectType);
    private static bool CanConvert(Type objectType, Type& elementType);
}
public class MassTransit.Serialization.JsonConverters.MessageDataReference : object {
    [CompilerGeneratedAttribute]
private Uri <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    [JsonPropertyAttribute("data-ref")]
public Uri Reference { get; public set; }
    [JsonPropertyAttribute("text")]
public string Text { get; public set; }
    [JsonPropertyAttribute("data")]
public Byte[] Data { get; public set; }
    [CompilerGeneratedAttribute]
public Uri get_Reference();
    [CompilerGeneratedAttribute]
public void set_Reference(Uri value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Data(Byte[] value);
}
public class MassTransit.Serialization.JsonConverters.NewtonsoftMessageDataJsonConverter : BaseJsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    protected virtual IConverter ValueFactory(Type objectType);
}
public class MassTransit.Serialization.JsonConverters.NewtonsoftObjectMessageDataConverter`1 : object {
    public sealed virtual Task`1<T> Convert(Stream stream, CancellationToken cancellationToken);
}
public class MassTransit.Serialization.JsonConverters.StringDecimalConverter : BaseJsonConverter {
    private static NumberStyles StringDecimalStyle;
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    protected virtual IConverter ValueFactory(Type objectType);
}
public class MassTransit.Serialization.JsonEnvelopeHeaders : object {
    private IDictionary`2<string, object> _headers;
    private JsonSerializer _serializer;
    public JsonEnvelopeHeaders(IDictionary`2<string, object> headers, JsonSerializer serializer);
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, object>> GetAll();
    public sealed virtual bool TryGetHeader(string key, Object& value);
    public sealed virtual T Get(string key, T defaultValue);
    public sealed virtual Nullable`1<T> Get(string key, Nullable`1<T> defaultValue);
    public sealed virtual IEnumerator`1<HeaderValue> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private object Deserialize(object value, Type objectType, bool allowNull);
}
[ExtensionAttribute]
public static class MassTransit.Serialization.JsonExtensions : object {
    [ExtensionAttribute]
public static void MergeInto(JContainer left, JToken right);
    [ExtensionAttribute]
public static JToken Merge(JToken left, JToken right);
}
public class MassTransit.Serialization.JsonMessageContext`1 : object {
    [CompilerGeneratedAttribute]
private T <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <CorrelationId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ConversationId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <InitiatorId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ExpirationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <SourceAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <DestinationAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ResponseAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <FaultAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <SentTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Headers <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private HostInfo <Host>k__BackingField;
    [JsonPropertyAttribute("message")]
public T Message { get; public set; }
    [JsonPropertyAttribute("messageId")]
public Nullable`1<Guid> MessageId { get; public set; }
    [JsonPropertyAttribute("requestId")]
public Nullable`1<Guid> RequestId { get; public set; }
    [JsonPropertyAttribute("correlationId")]
public Nullable`1<Guid> CorrelationId { get; public set; }
    [JsonPropertyAttribute("conversationId")]
public Nullable`1<Guid> ConversationId { get; public set; }
    [JsonPropertyAttribute("initiatorId")]
public Nullable`1<Guid> InitiatorId { get; public set; }
    [JsonPropertyAttribute("expirationTime")]
public Nullable`1<DateTime> ExpirationTime { get; public set; }
    [JsonPropertyAttribute("sourceAddress")]
public Uri SourceAddress { get; public set; }
    [JsonPropertyAttribute("destinationAddress")]
public Uri DestinationAddress { get; public set; }
    [JsonPropertyAttribute("responseAddress")]
public Uri ResponseAddress { get; public set; }
    [JsonPropertyAttribute("faultAddress")]
public Uri FaultAddress { get; public set; }
    [JsonPropertyAttribute("sentTime")]
public Nullable`1<DateTime> SentTime { get; public set; }
    [JsonPropertyAttribute("headers")]
[JsonConverterAttribute("MassTransit.Serialization.JsonMessageContextHeaderConverter")]
public Headers Headers { get; public set; }
    [JsonPropertyAttribute("host")]
[JsonConverterAttribute("MassTransit.Serialization.JsonConverters.JsonMessageContextHostInfoConverter")]
public HostInfo Host { get; public set; }
    [CompilerGeneratedAttribute]
public T get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(T value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Guid> get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Guid> get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Guid> get_CorrelationId();
    [CompilerGeneratedAttribute]
public void set_CorrelationId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Guid> get_ConversationId();
    [CompilerGeneratedAttribute]
public void set_ConversationId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Guid> get_InitiatorId();
    [CompilerGeneratedAttribute]
public void set_InitiatorId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_ExpirationTime();
    [CompilerGeneratedAttribute]
public void set_ExpirationTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_SourceAddress();
    [CompilerGeneratedAttribute]
public void set_SourceAddress(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_DestinationAddress();
    [CompilerGeneratedAttribute]
public void set_DestinationAddress(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_ResponseAddress();
    [CompilerGeneratedAttribute]
public void set_ResponseAddress(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_FaultAddress();
    [CompilerGeneratedAttribute]
public void set_FaultAddress(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_SentTime();
    [CompilerGeneratedAttribute]
public void set_SentTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual Headers get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(Headers value);
    [CompilerGeneratedAttribute]
public sealed virtual HostInfo get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(HostInfo value);
}
public class MassTransit.Serialization.JsonMessageContextHeaderConverter : JsonConverter {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.NewtonsoftBsonBodyMessageSerializer : object {
    private JsonMessageEnvelope _envelope;
    [CompilerGeneratedAttribute]
private ContentType <ContentType>k__BackingField;
    public ContentType ContentType { get; }
    public NewtonsoftBsonBodyMessageSerializer(MessageEnvelope envelope, ContentType contentType);
    [CompilerGeneratedAttribute]
public sealed virtual ContentType get_ContentType();
    public sealed virtual MessageBody GetMessageBody(SendContext`1<T> context);
    public void Overlay(object message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.NewtonsoftBsonMessageBody`1 : object {
    private SendContext`1<TMessage> _context;
    [NullableAttribute("2")]
private MessageEnvelope _envelope;
    [NullableAttribute("2")]
private Byte[] _bytes;
    public Nullable`1<long> Length { get; }
    public NewtonsoftBsonMessageBody`1(SendContext`1<TMessage> context, MessageEnvelope envelope);
    public sealed virtual Nullable`1<long> get_Length();
    public sealed virtual Stream GetStream();
    public sealed virtual Byte[] GetBytes();
    public sealed virtual string GetString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.NewtonsoftBsonMessageDeserializer : object {
    private JsonSerializer _deserializer;
    private IObjectDeserializer _objectDeserializer;
    public ContentType ContentType { get; }
    public NewtonsoftBsonMessageDeserializer(JsonSerializer deserializer);
    public sealed virtual void Probe(ProbeContext context);
    public sealed virtual ContentType get_ContentType();
    public sealed virtual ConsumeContext Deserialize(ReceiveContext receiveContext);
    public sealed virtual SerializerContext Deserialize(MessageBody body, Headers headers, Uri destinationAddress);
    public sealed virtual MessageBody GetMessageBody(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.NewtonsoftBsonSerializerContext : NewtonsoftSerializerContext {
    private ContentType _contentType;
    private MessageEnvelope _envelope;
    public NewtonsoftBsonSerializerContext(JsonSerializer deserializer, IObjectDeserializer objectDeserializer, MessageEnvelope envelope, ContentType contentType);
    public virtual IMessageSerializer GetMessageSerializer();
    public virtual IMessageSerializer GetMessageSerializer(MessageEnvelope envelope, T message);
    public virtual IMessageSerializer GetMessageSerializer(object message, String[] messageTypes);
}
public class MassTransit.Serialization.NewtonsoftBsonSerializerFactory : object {
    public ContentType ContentType { get; }
    public sealed virtual ContentType get_ContentType();
    public sealed virtual IMessageSerializer CreateSerializer();
    public sealed virtual IMessageDeserializer CreateDeserializer();
}
public class MassTransit.Serialization.NewtonsoftEncryptedBodyMessageSerializer : object {
    private ICryptoStreamProvider _provider;
    private JsonMessageEnvelope _envelope;
    [CompilerGeneratedAttribute]
private ContentType <ContentType>k__BackingField;
    public ContentType ContentType { get; }
    public NewtonsoftEncryptedBodyMessageSerializer(MessageEnvelope envelope, ContentType contentType, ICryptoStreamProvider provider);
    [CompilerGeneratedAttribute]
public sealed virtual ContentType get_ContentType();
    public sealed virtual MessageBody GetMessageBody(SendContext`1<T> context);
    public void Overlay(object message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.NewtonsoftEncryptedSerializerContext : NewtonsoftSerializerContext {
    private ContentType _contentType;
    private ICryptoStreamProvider _cryptoStreamProvider;
    private MessageEnvelope _envelope;
    public NewtonsoftEncryptedSerializerContext(JsonSerializer deserializer, IObjectDeserializer objectDeserializer, MessageEnvelope envelope, ContentType contentType, ICryptoStreamProvider cryptoStreamProvider);
    public virtual IMessageSerializer GetMessageSerializer();
    public virtual IMessageSerializer GetMessageSerializer(MessageEnvelope envelope, T message);
    public virtual IMessageSerializer GetMessageSerializer(object message, String[] messageTypes);
}
public class MassTransit.Serialization.NewtonsoftEncryptedSerializerFactory : object {
    private ICryptoStreamProvider _provider;
    public ContentType ContentType { get; }
    public NewtonsoftEncryptedSerializerFactory(ICryptoStreamProvider provider);
    public sealed virtual ContentType get_ContentType();
    public sealed virtual IMessageSerializer CreateSerializer();
    public sealed virtual IMessageDeserializer CreateDeserializer();
}
public class MassTransit.Serialization.NewtonsoftEncryptedV2BodyMessageSerializer : object {
    private JsonMessageEnvelope _envelope;
    private ICryptoStreamProviderV2 _provider;
    [CompilerGeneratedAttribute]
private ContentType <ContentType>k__BackingField;
    public ContentType ContentType { get; }
    public NewtonsoftEncryptedV2BodyMessageSerializer(MessageEnvelope envelope, ContentType contentType, ICryptoStreamProviderV2 provider);
    [CompilerGeneratedAttribute]
public sealed virtual ContentType get_ContentType();
    public sealed virtual MessageBody GetMessageBody(SendContext`1<T> context);
    public void Overlay(object message);
}
public class MassTransit.Serialization.NewtonsoftEncryptedV2SerializerContext : NewtonsoftSerializerContext {
    private ContentType _contentType;
    private ICryptoStreamProviderV2 _cryptoStreamProvider;
    private MessageEnvelope _envelope;
    public NewtonsoftEncryptedV2SerializerContext(JsonSerializer deserializer, IObjectDeserializer objectDeserializer, MessageEnvelope envelope, ContentType contentType, ICryptoStreamProviderV2 cryptoStreamProvider);
    public virtual IMessageSerializer GetMessageSerializer();
    public virtual IMessageSerializer GetMessageSerializer(MessageEnvelope envelope, T message);
    public virtual IMessageSerializer GetMessageSerializer(object message, String[] messageTypes);
}
public class MassTransit.Serialization.NewtonsoftEncryptedV2SerializerFactory : object {
    private ICryptoStreamProviderV2 _provider;
    public ContentType ContentType { get; }
    public NewtonsoftEncryptedV2SerializerFactory(ICryptoStreamProviderV2 provider);
    public sealed virtual ContentType get_ContentType();
    public sealed virtual IMessageSerializer CreateSerializer();
    public sealed virtual IMessageDeserializer CreateDeserializer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.NewtonsoftJsonBodyMessageSerializer : object {
    private JsonMessageEnvelope _envelope;
    [CompilerGeneratedAttribute]
private ContentType <ContentType>k__BackingField;
    public ContentType ContentType { get; }
    public NewtonsoftJsonBodyMessageSerializer(MessageEnvelope envelope, ContentType contentType);
    [CompilerGeneratedAttribute]
public sealed virtual ContentType get_ContentType();
    public sealed virtual MessageBody GetMessageBody(SendContext`1<T> context);
    public void Overlay(object message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.NewtonsoftJsonMessageBody`1 : object {
    private SendContext`1<TMessage> _context;
    [NullableAttribute("2")]
private Byte[] _bytes;
    [NullableAttribute("2")]
private MessageEnvelope _envelope;
    [NullableAttribute("2")]
private string _string;
    public Nullable`1<long> Length { get; }
    public NewtonsoftJsonMessageBody`1(SendContext`1<TMessage> context, MessageEnvelope envelope);
    public sealed virtual Nullable`1<long> get_Length();
    public sealed virtual Stream GetStream();
    public sealed virtual Byte[] GetBytes();
    public sealed virtual string GetString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.NewtonsoftJsonMessageDeserializer : object {
    private JsonSerializer _deserializer;
    private IObjectDeserializer _objectDeserializer;
    public ContentType ContentType { get; }
    public NewtonsoftJsonMessageDeserializer(JsonSerializer deserializer);
    public sealed virtual void Probe(ProbeContext context);
    public sealed virtual ContentType get_ContentType();
    public sealed virtual ConsumeContext Deserialize(ReceiveContext receiveContext);
    public sealed virtual SerializerContext Deserialize(MessageBody body, Headers headers, Uri destinationAddress);
    public sealed virtual MessageBody GetMessageBody(string text);
}
public class MassTransit.Serialization.NewtonsoftJsonMessageSerializer : object {
    public static string ContentTypeHeaderValue;
    public static ContentType JsonContentType;
    private static Lazy`1<JsonSerializer> _deserializer;
    private static Lazy`1<JsonSerializer> _serializer;
    public static ByteArrayConverter ByteArrayConverter;
    public static CaseInsensitiveDictionaryJsonConverter CaseInsensitiveDictionaryJsonConverter;
    public static InterfaceProxyConverter InterfaceProxyConverter;
    public static InternalTypeConverter InternalTypeConverter;
    public static NewtonsoftMessageDataJsonConverter MessageDataJsonConverter;
    public static StringDecimalConverter StringDecimalConverter;
    public static JsonSerializerSettings DeserializerSettings;
    public static JsonSerializerSettings SerializerSettings;
    public static JsonSerializer Deserializer { get; }
    public static JsonSerializer Serializer { get; }
    public ContentType ContentType { get; }
    private static NewtonsoftJsonMessageSerializer();
    public static JsonSerializer get_Deserializer();
    public static JsonSerializer get_Serializer();
    public sealed virtual MessageBody GetMessageBody(SendContext`1<T> context);
    public sealed virtual ContentType get_ContentType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.NewtonsoftJsonObjectMessageBody : object {
    private object _value;
    [NullableAttribute("2")]
private Byte[] _bytes;
    [NullableAttribute("2")]
private string _string;
    public Nullable`1<long> Length { get; }
    public NewtonsoftJsonObjectMessageBody(object value);
    public sealed virtual Nullable`1<long> get_Length();
    public sealed virtual Stream GetStream();
    public sealed virtual Byte[] GetBytes();
    public sealed virtual string GetString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.NewtonsoftJsonSerializerContext : NewtonsoftSerializerContext {
    private ContentType _contentType;
    private MessageEnvelope _envelope;
    public NewtonsoftJsonSerializerContext(JsonSerializer deserializer, IObjectDeserializer objectDeserializer, MessageEnvelope envelope, ContentType contentType);
    public virtual IMessageSerializer GetMessageSerializer();
    public virtual IMessageSerializer GetMessageSerializer(MessageEnvelope envelope, T message);
    public virtual IMessageSerializer GetMessageSerializer(object message, String[] messageTypes);
}
public class MassTransit.Serialization.NewtonsoftJsonSerializerFactory : object {
    public ContentType ContentType { get; }
    public sealed virtual ContentType get_ContentType();
    public sealed virtual IMessageSerializer CreateSerializer();
    public sealed virtual IMessageDeserializer CreateDeserializer();
}
public class MassTransit.Serialization.NewtonsoftObjectDeserializer : object {
    [NullableAttribute("1")]
private JsonSerializer _deserializer;
    [NullableContextAttribute("1")]
public NewtonsoftObjectDeserializer(JsonSerializer deserializer);
    [NullableContextAttribute("2")]
public sealed virtual T DeserializeObject(object value, T defaultValue);
    public sealed virtual Nullable`1<T> DeserializeObject(object value, Nullable`1<T> defaultValue);
    [NullableContextAttribute("1")]
public sealed virtual MessageBody SerializeObject(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.NewtonsoftRawBsonBodyMessageSerializer : object {
    private JToken _message;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] _messageTypes;
    [CompilerGeneratedAttribute]
private ContentType <ContentType>k__BackingField;
    public ContentType ContentType { get; }
    public NewtonsoftRawBsonBodyMessageSerializer(JToken message, ContentType contentType, String[] messageTypes);
    [CompilerGeneratedAttribute]
public sealed virtual ContentType get_ContentType();
    public sealed virtual MessageBody GetMessageBody(SendContext`1<T> context);
    public void Overlay(object message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.NewtonsoftRawBsonMessageBody`1 : object {
    private SendContext`1<TMessage> _context;
    [NullableAttribute("2")]
private JToken _message;
    [NullableAttribute("2")]
private Byte[] _bytes;
    public Nullable`1<long> Length { get; }
    public NewtonsoftRawBsonMessageBody`1(SendContext`1<TMessage> context, JToken message);
    public sealed virtual Nullable`1<long> get_Length();
    public sealed virtual Stream GetStream();
    public sealed virtual Byte[] GetBytes();
    public sealed virtual string GetString();
}
public class MassTransit.Serialization.NewtonsoftRawBsonSerializerContext : NewtonsoftSerializerContext {
    private ContentType _contentType;
    private JToken _message;
    public NewtonsoftRawBsonSerializerContext(JsonSerializer deserializer, IObjectDeserializer objectDeserializer, MessageContext context, JToken message, String[] supportedMessageTypes, ContentType contentType);
    public virtual IMessageSerializer GetMessageSerializer();
    public virtual IMessageSerializer GetMessageSerializer(MessageEnvelope envelope, T message);
    public virtual IMessageSerializer GetMessageSerializer(object message, String[] messageTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.NewtonsoftRawJsonBodyMessageSerializer : RawMessageSerializer {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] _messageTypes;
    private RawSerializerOptions _options;
    private JToken _message;
    [CompilerGeneratedAttribute]
private ContentType <ContentType>k__BackingField;
    public ContentType ContentType { get; }
    public NewtonsoftRawJsonBodyMessageSerializer(JToken message, ContentType contentType, RawSerializerOptions options, String[] messageTypes);
    [CompilerGeneratedAttribute]
public sealed virtual ContentType get_ContentType();
    public sealed virtual MessageBody GetMessageBody(SendContext`1<T> context);
    public void Overlay(object message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.NewtonsoftRawJsonMessageBody`1 : object {
    private SendContext`1<TMessage> _context;
    [NullableAttribute("2")]
private JToken _message;
    [NullableAttribute("2")]
private Byte[] _bytes;
    [NullableAttribute("2")]
private string _string;
    public Nullable`1<long> Length { get; }
    public NewtonsoftRawJsonMessageBody`1(SendContext`1<TMessage> context, JToken message);
    public sealed virtual Nullable`1<long> get_Length();
    public sealed virtual Stream GetStream();
    public sealed virtual Byte[] GetBytes();
    public sealed virtual string GetString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.NewtonsoftRawJsonMessageDeserializer : object {
    private JsonSerializer _deserializer;
    private IObjectDeserializer _objectDeserializer;
    private RawSerializerOptions _options;
    public ContentType ContentType { get; }
    public NewtonsoftRawJsonMessageDeserializer(JsonSerializer deserializer, RawSerializerOptions options);
    public sealed virtual void Probe(ProbeContext context);
    public sealed virtual ContentType get_ContentType();
    public sealed virtual ConsumeContext Deserialize(ReceiveContext receiveContext);
    public sealed virtual SerializerContext Deserialize(MessageBody body, Headers headers, Uri destinationAddress);
    public sealed virtual MessageBody GetMessageBody(string text);
}
public class MassTransit.Serialization.NewtonsoftRawJsonMessageSerializer : RawMessageSerializer {
    public static string ContentTypeHeaderValue;
    public static ContentType RawJsonContentType;
    private RawSerializerOptions _options;
    public static JsonSerializer Deserializer { get; }
    public ContentType ContentType { get; }
    public NewtonsoftRawJsonMessageSerializer(RawSerializerOptions options);
    private static NewtonsoftRawJsonMessageSerializer();
    public static JsonSerializer get_Deserializer();
    public sealed virtual MessageBody GetMessageBody(SendContext`1<T> context);
    public sealed virtual ContentType get_ContentType();
}
public class MassTransit.Serialization.NewtonsoftRawJsonSerializerContext : NewtonsoftSerializerContext {
    private ContentType _contentType;
    private JToken _message;
    private RawSerializerOptions _options;
    public NewtonsoftRawJsonSerializerContext(JsonSerializer deserializer, IObjectDeserializer objectDeserializer, MessageContext context, JToken message, String[] supportedMessageTypes, RawSerializerOptions options, ContentType contentType);
    [NullableContextAttribute("1")]
public virtual bool IsSupportedMessageType();
    public virtual bool IsSupportedMessageType(Type messageType);
    public virtual IMessageSerializer GetMessageSerializer();
    public virtual IMessageSerializer GetMessageSerializer(MessageEnvelope envelope, T message);
    public virtual IMessageSerializer GetMessageSerializer(object message, String[] messageTypes);
}
public class MassTransit.Serialization.NewtonsoftRawJsonSerializerFactory : object {
    private RawSerializerOptions _options;
    public ContentType ContentType { get; }
    public NewtonsoftRawJsonSerializerFactory(RawSerializerOptions options);
    public sealed virtual ContentType get_ContentType();
    public sealed virtual IMessageSerializer CreateSerializer();
    public sealed virtual IMessageDeserializer CreateDeserializer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.NewtonsoftRawXmlBodyMessageSerializer : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] _messageTypes;
    private RawSerializerOptions _options;
    private JToken _message;
    [CompilerGeneratedAttribute]
private ContentType <ContentType>k__BackingField;
    public ContentType ContentType { get; }
    public NewtonsoftRawXmlBodyMessageSerializer(JToken message, ContentType contentType, RawSerializerOptions options, String[] messageTypes);
    [CompilerGeneratedAttribute]
public sealed virtual ContentType get_ContentType();
    public sealed virtual MessageBody GetMessageBody(SendContext`1<T> context);
    public void Overlay(object message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.NewtonsoftRawXmlMessageBody`1 : object {
    private SendContext`1<TMessage> _context;
    [NullableAttribute("2")]
private JToken _message;
    [NullableAttribute("2")]
private Byte[] _bytes;
    [NullableAttribute("2")]
private string _string;
    public Nullable`1<long> Length { get; }
    public NewtonsoftRawXmlMessageBody`1(SendContext`1<TMessage> context, JToken message);
    public sealed virtual Nullable`1<long> get_Length();
    public sealed virtual Stream GetStream();
    public sealed virtual Byte[] GetBytes();
    public sealed virtual string GetString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.NewtonsoftRawXmlMessageDeserializer : object {
    private JsonSerializer _deserializer;
    private IObjectDeserializer _objectDeserializer;
    private RawSerializerOptions _options;
    public ContentType ContentType { get; }
    public NewtonsoftRawXmlMessageDeserializer(JsonSerializer deserializer, RawSerializerOptions options);
    public sealed virtual void Probe(ProbeContext context);
    public sealed virtual ContentType get_ContentType();
    public sealed virtual ConsumeContext Deserialize(ReceiveContext receiveContext);
    public sealed virtual SerializerContext Deserialize(MessageBody body, Headers headers, Uri destinationAddress);
    public sealed virtual MessageBody GetMessageBody(string text);
}
public class MassTransit.Serialization.NewtonsoftRawXmlSerializerContext : NewtonsoftSerializerContext {
    private ContentType _contentType;
    private JToken _message;
    private RawSerializerOptions _options;
    public NewtonsoftRawXmlSerializerContext(JsonSerializer deserializer, IObjectDeserializer objectDeserializer, MessageContext context, JToken message, String[] supportedMessageTypes, RawSerializerOptions options, ContentType contentType);
    [NullableContextAttribute("1")]
public virtual bool IsSupportedMessageType();
    public virtual bool IsSupportedMessageType(Type messageType);
    public virtual IMessageSerializer GetMessageSerializer();
    public virtual IMessageSerializer GetMessageSerializer(MessageEnvelope envelope, T message);
    public virtual IMessageSerializer GetMessageSerializer(object message, String[] messageTypes);
}
public class MassTransit.Serialization.NewtonsoftRawXmlSerializerFactory : object {
    private RawSerializerOptions _options;
    public ContentType ContentType { get; }
    public NewtonsoftRawXmlSerializerFactory(RawSerializerOptions options);
    public sealed virtual ContentType get_ContentType();
    public sealed virtual IMessageSerializer CreateSerializer();
    public sealed virtual IMessageDeserializer CreateDeserializer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MassTransit.Serialization.NewtonsoftSerializerContext : BaseSerializerContext {
    private JsonSerializer _deserializer;
    [NullableAttribute("2")]
private object _message;
    protected NewtonsoftSerializerContext(JsonSerializer deserializer, IObjectDeserializer objectDeserializer, MessageContext messageContext, object message, String[] supportedMessageTypes);
    public virtual bool TryGetMessage(T& message);
    public virtual bool TryGetMessage(Type messageType, Object& message);
    public virtual Dictionary`2<string, object> ToDictionary(T message);
    private static JToken GetMessageToken(object message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.NewtonsoftXmlBodyMessageSerializer : object {
    private JsonMessageEnvelope _envelope;
    [CompilerGeneratedAttribute]
private ContentType <ContentType>k__BackingField;
    public ContentType ContentType { get; }
    public NewtonsoftXmlBodyMessageSerializer(MessageEnvelope envelope, ContentType contentType);
    [CompilerGeneratedAttribute]
public sealed virtual ContentType get_ContentType();
    public sealed virtual MessageBody GetMessageBody(SendContext`1<T> context);
    public void Overlay(object message);
}
public class MassTransit.Serialization.NewtonsoftXmlJsonMessageSerializer : object {
    private static Lazy`1<JsonSerializer> _deserializer;
    private static Lazy`1<JsonSerializer> _serializer;
    private static ListJsonConverter ListJsonConverter;
    public static JsonSerializer Deserializer { get; }
    public static JsonSerializer Serializer { get; }
    private static NewtonsoftXmlJsonMessageSerializer();
    public static JsonSerializer get_Deserializer();
    public static JsonSerializer get_Serializer();
    private static JsonSerializer CreateSerializer();
    private static JsonSerializer CreateDeserializer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.NewtonsoftXmlMessageBody`1 : object {
    private SendContext`1<TMessage> _context;
    [NullableAttribute("2")]
private Byte[] _bytes;
    [NullableAttribute("2")]
private MessageEnvelope _envelope;
    [NullableAttribute("2")]
private string _string;
    public Nullable`1<long> Length { get; }
    public NewtonsoftXmlMessageBody`1(SendContext`1<TMessage> context, MessageEnvelope envelope);
    public sealed virtual Nullable`1<long> get_Length();
    public sealed virtual Stream GetStream();
    public sealed virtual Byte[] GetBytes();
    public sealed virtual string GetString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.Serialization.NewtonsoftXmlMessageDeserializer : object {
    private JsonSerializer _deserializer;
    private IObjectDeserializer _objectDeserializer;
    public ContentType ContentType { get; }
    public NewtonsoftXmlMessageDeserializer(JsonSerializer deserializer);
    public sealed virtual void Probe(ProbeContext context);
    public sealed virtual ContentType get_ContentType();
    public sealed virtual ConsumeContext Deserialize(ReceiveContext receiveContext);
    public sealed virtual SerializerContext Deserialize(MessageBody body, Headers headers, Uri destinationAddress);
    public sealed virtual MessageBody GetMessageBody(string text);
}
public class MassTransit.Serialization.NewtonsoftXmlMessageSerializer : object {
    public static string ContentTypeHeaderValue;
    public static ContentType XmlContentType;
    private static Lazy`1<JsonSerializer> _xmlSerializer;
    private static JsonSerializerSettings XmlSerializerSettings;
    public static JsonSerializer XmlSerializer { get; }
    public ContentType ContentType { get; }
    private static NewtonsoftXmlMessageSerializer();
    public static JsonSerializer get_XmlSerializer();
    public sealed virtual ContentType get_ContentType();
    public sealed virtual MessageBody GetMessageBody(SendContext`1<T> context);
    public static void Serialize(Stream stream, object message, Type messageType);
}
public class MassTransit.Serialization.NewtonsoftXmlSerializerContext : NewtonsoftSerializerContext {
    private ContentType _contentType;
    private MessageEnvelope _envelope;
    public NewtonsoftXmlSerializerContext(JsonSerializer deserializer, IObjectDeserializer objectDeserializer, MessageEnvelope envelope, ContentType contentType);
    public virtual IMessageSerializer GetMessageSerializer();
    public virtual IMessageSerializer GetMessageSerializer(MessageEnvelope envelope, T message);
    public virtual IMessageSerializer GetMessageSerializer(object message, String[] messageTypes);
}
public class MassTransit.Serialization.NewtonsoftXmlSerializerFactory : object {
    public ContentType ContentType { get; }
    public sealed virtual ContentType get_ContentType();
    public sealed virtual IMessageSerializer CreateSerializer();
    public sealed virtual IMessageDeserializer CreateDeserializer();
}
public class MassTransit.Serialization.RawXmlMessageSerializer : RawMessageSerializer {
    public static string ContentTypeHeaderValue;
    public static ContentType RawXmlContentType;
    private RawSerializerOptions _options;
    public ContentType ContentType { get; }
    public RawXmlMessageSerializer(RawSerializerOptions options);
    private static RawXmlMessageSerializer();
    public sealed virtual ContentType get_ContentType();
    public sealed virtual MessageBody GetMessageBody(SendContext`1<T> context);
}
[ExtensionAttribute]
public static class MassTransit.SerializerConfigurationExtensions : object {
    [ExtensionAttribute]
public static void UseEncryptedSerializer(IBusFactoryConfigurator configurator, ICryptoStreamProvider provider);
    [ExtensionAttribute]
public static void UseEncryptedSerializer(IReceiveEndpointConfigurator configurator, ICryptoStreamProvider provider);
    [ExtensionAttribute]
public static void UseEncryptedSerializerV2(IBusFactoryConfigurator configurator, ICryptoStreamProviderV2 provider);
    [ExtensionAttribute]
public static void UseEncryptedSerializerV2(IReceiveEndpointConfigurator configurator, ICryptoStreamProviderV2 provider);
    [ExtensionAttribute]
public static void UseEncryption(IBusFactoryConfigurator configurator, Byte[] symmetricKey);
    [ExtensionAttribute]
public static void UseEncryption(IReceiveEndpointConfigurator configurator, Byte[] symmetricKey);
    [ExtensionAttribute]
public static void UseEncryption(IBusFactoryConfigurator configurator, ISecureKeyProvider keyProvider);
    [ExtensionAttribute]
public static void UseEncryption(IReceiveEndpointConfigurator configurator, ISecureKeyProvider keyProvider);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
