[ExtensionAttribute]
public static class MassTransit.PrometheusConfigurationExtensions : object {
    [ExtensionAttribute]
public static void UsePrometheusMetrics(IBusFactoryConfigurator configurator, Action`1<PrometheusMetricsOptions> configureOptions, string serviceName);
    private static string GetServiceName(string serviceName);
}
public class MassTransit.PrometheusIntegration.Configuration.PrometheusActivityConfigurationObserver : object {
    private IActivityObserver _observer;
    public sealed virtual void ActivityConfigured(IExecuteActivityConfigurator`2<TActivity, TArguments> configurator, Uri compensateAddress);
    public sealed virtual void ExecuteActivityConfigured(IExecuteActivityConfigurator`2<TActivity, TArguments> configurator);
    public sealed virtual void CompensateActivityConfigured(ICompensateActivityConfigurator`2<TActivity, TLog> configurator);
}
public class MassTransit.PrometheusIntegration.Configuration.PrometheusCompensateActivitySpecification`2 : object {
    public sealed virtual void Apply(IPipeBuilder`1<CompensateActivityContext`2<TActivity, TLog>> builder);
    public sealed virtual IEnumerable`1<ValidationResult> Validate();
}
public class MassTransit.PrometheusIntegration.Configuration.PrometheusConsumerConfigurationObserver : object {
    public sealed virtual void ConsumerConfigured(IConsumerConfigurator`1<TConsumer> configurator);
    public sealed virtual void ConsumerMessageConfigured(IConsumerMessageConfigurator`2<TConsumer, TMessage> configurator);
    public void BatchConsumerConfigured(IConsumerMessageConfigurator`2<TConsumer, Batch`1<TMessage>> configurator);
}
public class MassTransit.PrometheusIntegration.Configuration.PrometheusConsumerSpecification`2 : object {
    public sealed virtual void Apply(IPipeBuilder`1<ConsumerConsumeContext`2<TConsumer, TMessage>> builder);
    public sealed virtual IEnumerable`1<ValidationResult> Validate();
}
public class MassTransit.PrometheusIntegration.Configuration.PrometheusExecuteActivitySpecification`2 : object {
    public sealed virtual void Apply(IPipeBuilder`1<ExecuteActivityContext`2<TActivity, TArguments>> builder);
    public sealed virtual IEnumerable`1<ValidationResult> Validate();
}
public class MassTransit.PrometheusIntegration.Configuration.PrometheusHandlerConfigurationObserver : object {
    private sealed virtual override void MassTransit.IHandlerConfigurationObserver.HandlerConfigured(IHandlerConfigurator`1<T> configurator);
}
public class MassTransit.PrometheusIntegration.Configuration.PrometheusHandlerSpecification`1 : object {
    public sealed virtual void Apply(IPipeBuilder`1<ConsumeContext`1<TMessage>> builder);
    public sealed virtual IEnumerable`1<ValidationResult> Validate();
}
public class MassTransit.PrometheusIntegration.Configuration.PrometheusReceiveEndpointConfiguratorObserver : object {
    public sealed virtual void EndpointConfigured(T configurator);
}
public class MassTransit.PrometheusIntegration.Configuration.PrometheusReceiveSpecification : object {
    public sealed virtual void Apply(IPipeBuilder`1<ReceiveContext> builder);
    public sealed virtual IEnumerable`1<ValidationResult> Validate();
}
public class MassTransit.PrometheusIntegration.Configuration.PrometheusSagaConfigurationObserver : object {
    public sealed virtual void SagaConfigured(ISagaConfigurator`1<T> configurator);
    public sealed virtual void StateMachineSagaConfigured(ISagaConfigurator`1<TInstance> configurator, SagaStateMachine`1<TInstance> stateMachine);
    public sealed virtual void SagaMessageConfigured(ISagaMessageConfigurator`2<T, TMessage> configurator);
}
public class MassTransit.PrometheusIntegration.Configuration.PrometheusSagaSpecification`2 : object {
    public sealed virtual void Apply(IPipeBuilder`1<SagaConsumeContext`2<TSaga, TMessage>> builder);
    public sealed virtual IEnumerable`1<ValidationResult> Validate();
}
public class MassTransit.PrometheusIntegration.Middleware.PrometheusCompensateActivityFilter`2 : object {
    [AsyncStateMachineAttribute("MassTransit.PrometheusIntegration.Middleware.PrometheusCompensateActivityFilter`2/<Send>d__0")]
public sealed virtual Task Send(CompensateActivityContext`2<TActivity, TLog> context, IPipe`1<CompensateActivityContext`2<TActivity, TLog>> next);
    public sealed virtual void Probe(ProbeContext context);
}
public class MassTransit.PrometheusIntegration.Middleware.PrometheusConsumerFilter`2 : object {
    [AsyncStateMachineAttribute("MassTransit.PrometheusIntegration.Middleware.PrometheusConsumerFilter`2/<Send>d__0")]
public sealed virtual Task Send(ConsumerConsumeContext`2<TConsumer, TMessage> context, IPipe`1<ConsumerConsumeContext`2<TConsumer, TMessage>> next);
    public sealed virtual void Probe(ProbeContext context);
}
public class MassTransit.PrometheusIntegration.Middleware.PrometheusExecuteActivityFilter`2 : object {
    [AsyncStateMachineAttribute("MassTransit.PrometheusIntegration.Middleware.PrometheusExecuteActivityFilter`2/<Send>d__0")]
public sealed virtual Task Send(ExecuteActivityContext`2<TActivity, TArguments> context, IPipe`1<ExecuteActivityContext`2<TActivity, TArguments>> next);
    public sealed virtual void Probe(ProbeContext context);
}
public class MassTransit.PrometheusIntegration.Middleware.PrometheusHandlerFilter`1 : object {
    [AsyncStateMachineAttribute("MassTransit.PrometheusIntegration.Middleware.PrometheusHandlerFilter`1/<Send>d__0")]
public sealed virtual Task Send(ConsumeContext`1<TMessage> context, IPipe`1<ConsumeContext`1<TMessage>> next);
    public sealed virtual void Probe(ProbeContext context);
}
public class MassTransit.PrometheusIntegration.Middleware.PrometheusReceiveFilter : object {
    [AsyncStateMachineAttribute("MassTransit.PrometheusIntegration.Middleware.PrometheusReceiveFilter/<Send>d__0")]
public sealed virtual Task Send(ReceiveContext context, IPipe`1<ReceiveContext> next);
    public sealed virtual void Probe(ProbeContext context);
}
public class MassTransit.PrometheusIntegration.Middleware.PrometheusSagaFilter`2 : object {
    [AsyncStateMachineAttribute("MassTransit.PrometheusIntegration.Middleware.PrometheusSagaFilter`2/<Send>d__0")]
public sealed virtual Task Send(SagaConsumeContext`2<TSaga, TMessage> context, IPipe`1<SagaConsumeContext`2<TSaga, TMessage>> next);
    public sealed virtual void Probe(ProbeContext context);
}
public class MassTransit.PrometheusIntegration.PrometheusActivityObserver : object {
    public sealed virtual Task PreExecute(ExecuteActivityContext`2<TActivity, TArguments> context);
    public sealed virtual Task PostExecute(ExecuteActivityContext`2<TActivity, TArguments> context);
    public sealed virtual Task ExecuteFault(ExecuteActivityContext`2<TActivity, TArguments> context, Exception exception);
    public sealed virtual Task PreCompensate(CompensateActivityContext`2<TActivity, TLog> context);
    public sealed virtual Task PostCompensate(CompensateActivityContext`2<TActivity, TLog> context);
    public sealed virtual Task CompensateFail(CompensateActivityContext`2<TActivity, TLog> context, Exception exception);
}
public class MassTransit.PrometheusIntegration.PrometheusBusObserver : object {
    public sealed virtual void PostCreate(IBus bus);
    public sealed virtual void CreateFaulted(Exception exception);
    public sealed virtual Task PreStart(IBus bus);
    public sealed virtual Task PostStart(IBus bus, Task`1<BusReady> busReady);
    public sealed virtual Task StartFaulted(IBus bus, Exception exception);
    public sealed virtual Task PreStop(IBus bus);
    public sealed virtual Task PostStop(IBus bus);
    public sealed virtual Task StopFaulted(IBus bus, Exception exception);
}
public class MassTransit.PrometheusIntegration.PrometheusPublishObserver : object {
    public sealed virtual Task PrePublish(PublishContext`1<T> context);
    public sealed virtual Task PostPublish(PublishContext`1<T> context);
    public sealed virtual Task PublishFault(PublishContext`1<T> context, Exception exception);
}
public class MassTransit.PrometheusIntegration.PrometheusReceiveEndpointObserver : object {
    public sealed virtual Task Ready(ReceiveEndpointReady ready);
    public sealed virtual Task Stopping(ReceiveEndpointStopping stopping);
    public sealed virtual Task Completed(ReceiveEndpointCompleted completed);
    public sealed virtual Task Faulted(ReceiveEndpointFaulted faulted);
}
public class MassTransit.PrometheusIntegration.PrometheusReceiveObserver : object {
    public sealed virtual Task PreReceive(ReceiveContext context);
    public sealed virtual Task PostReceive(ReceiveContext context);
    public sealed virtual Task PostConsume(ConsumeContext`1<T> context, TimeSpan duration, string consumerType);
    public sealed virtual Task ConsumeFault(ConsumeContext`1<T> context, TimeSpan duration, string consumerType, Exception exception);
    public sealed virtual Task ReceiveFault(ReceiveContext context, Exception exception);
}
public class MassTransit.PrometheusIntegration.PrometheusSendObserver : object {
    public sealed virtual Task PreSend(SendContext`1<T> context);
    public sealed virtual Task PostSend(SendContext`1<T> context);
    public sealed virtual Task SendFault(SendContext`1<T> context, Exception exception);
}
public static class MassTransit.PrometheusMetrics : object {
    private static ConcurrentDictionary`2<string, string> _labelCache;
    private static bool _isConfigured;
    private static string _serviceLabel;
    private static Gauge _busInstances;
    private static Gauge _endpointInstances;
    private static Counter _receiveTotal;
    private static Counter _receiveFaultTotal;
    private static Gauge _receiveInProgress;
    private static Histogram _receiveDuration;
    private static Counter _consumeTotal;
    private static Counter _consumeFaultTotal;
    private static Counter _consumeRetryTotal;
    private static Counter _publishTotal;
    private static Counter _publishFaultTotal;
    private static Counter _sendTotal;
    private static Counter _sendFaultTotal;
    private static Counter _executeTotal;
    private static Counter _executeFaultTotal;
    private static Counter _compensateTotal;
    private static Counter _compensateFailureTotal;
    private static Gauge _consumerInProgress;
    private static Gauge _handlerInProgress;
    private static Gauge _sagaInProgress;
    private static Gauge _executeInProgress;
    private static Gauge _compensateInProgress;
    private static Histogram _consumeDuration;
    private static Histogram _deliveryDuration;
    private static Histogram _executeDuration;
    private static Histogram _compensateDuration;
    private static Char[] _delimiters;
    private static PrometheusMetrics();
    public static void BusStarted();
    public static void BusStopped();
    public static void EndpointReady(ReceiveEndpointReady ready);
    public static void EndpointCompleted(ReceiveEndpointCompleted completed);
    public static void MeasureReceived(ReceiveContext context, Exception exception);
    public static void MeasureConsume(ConsumeContext`1<T> context, TimeSpan duration, string consumerType, Exception exception);
    public static void MeasureExecute(ExecuteActivityContext`2<TActivity, TArguments> context, Exception exception);
    public static void MeasureCompensate(CompensateActivityContext`2<TActivity, TLog> context, Exception exception);
    public static void MeasurePublish(Exception exception);
    public static void MeasureSend(Exception exception);
    public static IDisposable TrackReceiveInProgress(ReceiveContext context);
    public static IDisposable TrackConsumerInProgress();
    public static IDisposable TrackSagaInProgress();
    public static IDisposable TrackExecuteActivityInProgress(ExecuteActivityContext`2<TActivity, TArguments> context);
    public static IDisposable TrackCompensateActivityInProgress(CompensateActivityContext`2<TActivity, TLog> context);
    public static IDisposable TrackHandlerInProgress();
    public static void TryConfigure(string serviceName, PrometheusMetricsOptions options);
    private static string GetConsumerTypeLabel(string consumerType, string messageType, string messageLabel);
    private static string CleanupLabel(string label);
    private static string GetArgumentTypeLabel();
    private static string GetLogTypeLabel();
    private static string GetEndpointLabel(Uri inputAddress);
    private static string GetMessageTypeLabel();
    private static string FormatTypeName(StringBuilder sb, Type type);
    [CompilerGeneratedAttribute]
internal static string <CleanupLabel>g__SimpleClean|48_0(string text);
}
public class MassTransit.PrometheusMetricsOptions : object {
    [CompilerGeneratedAttribute]
private string <EndpointLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumerTypeLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionTypeLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageTypeLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityNameLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ArgumentTypeLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogTypeLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceNameLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <HistogramBuckets>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReceiveTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReceiveFaultTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReceiveDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReceiveInProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumeTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumeFaultTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumeRetryTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublishTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublishFaultTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SendTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SendFaultTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityExecuteTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityExecuteFaultTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityExecuteDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityCompensateTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityCompensateFailureTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityCompensateDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BusInstances>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndpointInstances>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumerInProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HandlerInProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SagaInProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecuteInProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompensateInProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumeDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeliveryDuration>k__BackingField;
    public string EndpointLabel { get; public set; }
    public string ConsumerTypeLabel { get; public set; }
    public string ExceptionTypeLabel { get; public set; }
    public string MessageTypeLabel { get; public set; }
    public string ActivityNameLabel { get; public set; }
    public string ArgumentTypeLabel { get; public set; }
    public string LogTypeLabel { get; public set; }
    public string ServiceNameLabel { get; public set; }
    public Double[] HistogramBuckets { get; public set; }
    public string ReceiveTotal { get; public set; }
    public string ReceiveFaultTotal { get; public set; }
    public string ReceiveDuration { get; public set; }
    public string ReceiveInProgress { get; public set; }
    public string ConsumeTotal { get; public set; }
    public string ConsumeFaultTotal { get; public set; }
    public string ConsumeRetryTotal { get; public set; }
    public string PublishTotal { get; public set; }
    public string PublishFaultTotal { get; public set; }
    public string SendTotal { get; public set; }
    public string SendFaultTotal { get; public set; }
    public string ActivityExecuteTotal { get; public set; }
    public string ActivityExecuteFaultTotal { get; public set; }
    public string ActivityExecuteDuration { get; public set; }
    public string ActivityCompensateTotal { get; public set; }
    public string ActivityCompensateFailureTotal { get; public set; }
    public string ActivityCompensateDuration { get; public set; }
    public string BusInstances { get; public set; }
    public string EndpointInstances { get; public set; }
    public string ConsumerInProgress { get; public set; }
    public string HandlerInProgress { get; public set; }
    public string SagaInProgress { get; public set; }
    public string ExecuteInProgress { get; public set; }
    public string CompensateInProgress { get; public set; }
    public string ConsumeDuration { get; public set; }
    public string DeliveryDuration { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EndpointLabel();
    [CompilerGeneratedAttribute]
public void set_EndpointLabel(string value);
    [CompilerGeneratedAttribute]
public string get_ConsumerTypeLabel();
    [CompilerGeneratedAttribute]
public void set_ConsumerTypeLabel(string value);
    [CompilerGeneratedAttribute]
public string get_ExceptionTypeLabel();
    [CompilerGeneratedAttribute]
public void set_ExceptionTypeLabel(string value);
    [CompilerGeneratedAttribute]
public string get_MessageTypeLabel();
    [CompilerGeneratedAttribute]
public void set_MessageTypeLabel(string value);
    [CompilerGeneratedAttribute]
public string get_ActivityNameLabel();
    [CompilerGeneratedAttribute]
public void set_ActivityNameLabel(string value);
    [CompilerGeneratedAttribute]
public string get_ArgumentTypeLabel();
    [CompilerGeneratedAttribute]
public void set_ArgumentTypeLabel(string value);
    [CompilerGeneratedAttribute]
public string get_LogTypeLabel();
    [CompilerGeneratedAttribute]
public void set_LogTypeLabel(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceNameLabel();
    [CompilerGeneratedAttribute]
public void set_ServiceNameLabel(string value);
    [CompilerGeneratedAttribute]
public Double[] get_HistogramBuckets();
    [CompilerGeneratedAttribute]
public void set_HistogramBuckets(Double[] value);
    [CompilerGeneratedAttribute]
public string get_ReceiveTotal();
    [CompilerGeneratedAttribute]
public void set_ReceiveTotal(string value);
    [CompilerGeneratedAttribute]
public string get_ReceiveFaultTotal();
    [CompilerGeneratedAttribute]
public void set_ReceiveFaultTotal(string value);
    [CompilerGeneratedAttribute]
public string get_ReceiveDuration();
    [CompilerGeneratedAttribute]
public void set_ReceiveDuration(string value);
    [CompilerGeneratedAttribute]
public string get_ReceiveInProgress();
    [CompilerGeneratedAttribute]
public void set_ReceiveInProgress(string value);
    [CompilerGeneratedAttribute]
public string get_ConsumeTotal();
    [CompilerGeneratedAttribute]
public void set_ConsumeTotal(string value);
    [CompilerGeneratedAttribute]
public string get_ConsumeFaultTotal();
    [CompilerGeneratedAttribute]
public void set_ConsumeFaultTotal(string value);
    [CompilerGeneratedAttribute]
public string get_ConsumeRetryTotal();
    [CompilerGeneratedAttribute]
public void set_ConsumeRetryTotal(string value);
    [CompilerGeneratedAttribute]
public string get_PublishTotal();
    [CompilerGeneratedAttribute]
public void set_PublishTotal(string value);
    [CompilerGeneratedAttribute]
public string get_PublishFaultTotal();
    [CompilerGeneratedAttribute]
public void set_PublishFaultTotal(string value);
    [CompilerGeneratedAttribute]
public string get_SendTotal();
    [CompilerGeneratedAttribute]
public void set_SendTotal(string value);
    [CompilerGeneratedAttribute]
public string get_SendFaultTotal();
    [CompilerGeneratedAttribute]
public void set_SendFaultTotal(string value);
    [CompilerGeneratedAttribute]
public string get_ActivityExecuteTotal();
    [CompilerGeneratedAttribute]
public void set_ActivityExecuteTotal(string value);
    [CompilerGeneratedAttribute]
public string get_ActivityExecuteFaultTotal();
    [CompilerGeneratedAttribute]
public void set_ActivityExecuteFaultTotal(string value);
    [CompilerGeneratedAttribute]
public string get_ActivityExecuteDuration();
    [CompilerGeneratedAttribute]
public void set_ActivityExecuteDuration(string value);
    [CompilerGeneratedAttribute]
public string get_ActivityCompensateTotal();
    [CompilerGeneratedAttribute]
public void set_ActivityCompensateTotal(string value);
    [CompilerGeneratedAttribute]
public string get_ActivityCompensateFailureTotal();
    [CompilerGeneratedAttribute]
public void set_ActivityCompensateFailureTotal(string value);
    [CompilerGeneratedAttribute]
public string get_ActivityCompensateDuration();
    [CompilerGeneratedAttribute]
public void set_ActivityCompensateDuration(string value);
    [CompilerGeneratedAttribute]
public string get_BusInstances();
    [CompilerGeneratedAttribute]
public void set_BusInstances(string value);
    [CompilerGeneratedAttribute]
public string get_EndpointInstances();
    [CompilerGeneratedAttribute]
public void set_EndpointInstances(string value);
    [CompilerGeneratedAttribute]
public string get_ConsumerInProgress();
    [CompilerGeneratedAttribute]
public void set_ConsumerInProgress(string value);
    [CompilerGeneratedAttribute]
public string get_HandlerInProgress();
    [CompilerGeneratedAttribute]
public void set_HandlerInProgress(string value);
    [CompilerGeneratedAttribute]
public string get_SagaInProgress();
    [CompilerGeneratedAttribute]
public void set_SagaInProgress(string value);
    [CompilerGeneratedAttribute]
public string get_ExecuteInProgress();
    [CompilerGeneratedAttribute]
public void set_ExecuteInProgress(string value);
    [CompilerGeneratedAttribute]
public string get_CompensateInProgress();
    [CompilerGeneratedAttribute]
public void set_CompensateInProgress(string value);
    [CompilerGeneratedAttribute]
public string get_ConsumeDuration();
    [CompilerGeneratedAttribute]
public void set_ConsumeDuration(string value);
    [CompilerGeneratedAttribute]
public string get_DeliveryDuration();
    [CompilerGeneratedAttribute]
public void set_DeliveryDuration(string value);
    public static PrometheusMetricsOptions CreateDefault();
}
