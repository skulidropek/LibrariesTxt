public interface MassTransit.IRabbitMqBatchPublishConfigurator {
    unknown bool Enabled {public set; }
    unknown int MessageLimit {public set; }
    unknown int SizeLimit {public set; }
    unknown TimeSpan Timeout {public set; }
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual void set_MessageLimit(int value);
    public abstract virtual void set_SizeLimit(int value);
    public abstract virtual void set_Timeout(TimeSpan value);
}
public interface MassTransit.IRabbitMqBusFactoryConfigurator {
    [NullableAttribute("1")]
public IRabbitMqSendTopologyConfigurator SendTopology { get; }
    [NullableAttribute("1")]
public IRabbitMqPublishTopologyConfigurator PublishTopology { get; }
    [NullableContextAttribute("1")]
public abstract virtual IRabbitMqSendTopologyConfigurator get_SendTopology();
    [NullableContextAttribute("1")]
public abstract virtual IRabbitMqPublishTopologyConfigurator get_PublishTopology();
    [NullableContextAttribute("1")]
public abstract virtual void Send(Action`1<IRabbitMqMessageSendTopologyConfigurator`1<T>> configureTopology);
    [NullableContextAttribute("1")]
public abstract virtual void Publish(Action`1<IRabbitMqMessagePublishTopologyConfigurator`1<T>> configureTopology);
    [NullableContextAttribute("1")]
public abstract virtual void Publish(Type messageType, Action`1<IRabbitMqMessagePublishTopologyConfigurator> configure);
    [NullableContextAttribute("1")]
public abstract virtual void OverrideDefaultBusEndpointQueueName(string queueName);
    [NullableContextAttribute("1")]
public abstract virtual void Host(RabbitMqHostSettings settings);
}
public interface MassTransit.IRabbitMqBusTopology {
    public IRabbitMqPublishTopology PublishTopology { get; }
    public IRabbitMqSendTopology SendTopology { get; }
    public abstract virtual IRabbitMqPublishTopology get_PublishTopology();
    public abstract virtual IRabbitMqSendTopology get_SendTopology();
    public abstract virtual IRabbitMqMessagePublishTopology`1<T> Publish();
    public abstract virtual IRabbitMqMessageSendTopology`1<T> Send();
    public abstract virtual Uri GetDestinationAddress(string exchangeName, Action`1<IRabbitMqExchangeConfigurator> configure);
    public abstract virtual Uri GetDestinationAddress(Type messageType, Action`1<IRabbitMqExchangeConfigurator> configure);
}
public interface MassTransit.IRabbitMqClusterConfigurator {
    public abstract virtual void Node(string nodeAddress);
}
public interface MassTransit.IRabbitMqConsumeTopology {
    public IExchangeTypeSelector ExchangeTypeSelector { get; }
    public abstract virtual IExchangeTypeSelector get_ExchangeTypeSelector();
    public abstract virtual IRabbitMqMessageConsumeTopology`1<T> GetMessageTopology();
    public abstract virtual void Apply(IReceiveEndpointBrokerTopologyBuilder builder);
}
public interface MassTransit.IRabbitMqConsumeTopologyConfigurator {
    public abstract virtual IRabbitMqMessageConsumeTopologyConfigurator`1<T> GetMessageTopology();
    [EditorBrowsableAttribute("1")]
public abstract virtual void AddSpecification(IRabbitMqConsumeTopologySpecification specification);
    public abstract virtual void Bind(string exchangeName, Action`1<IRabbitMqExchangeToExchangeBindingConfigurator> configure);
    public abstract virtual void BindQueue(string exchangeName, string queueName, Action`1<IRabbitMqQueueBindingConfigurator> configure);
}
public interface MassTransit.IRabbitMqExchangeBindingConfigurator {
    unknown string RoutingKey {public set; }
    public abstract virtual void set_RoutingKey(string value);
    public abstract virtual void SetBindingArgument(string key, object value);
}
public interface MassTransit.IRabbitMqExchangeConfigurator {
    unknown bool Durable {public set; }
    unknown bool AutoDelete {public set; }
    unknown string ExchangeType {public set; }
    public abstract virtual void set_Durable(bool value);
    public abstract virtual void set_AutoDelete(bool value);
    public abstract virtual void set_ExchangeType(string value);
    public abstract virtual void SetExchangeArgument(string key, object value);
    public abstract virtual void SetExchangeArgument(string key, TimeSpan value);
}
public interface MassTransit.IRabbitMqExchangeToExchangeBindingConfigurator {
    public abstract virtual void Bind(string exchangeName, Action`1<IRabbitMqExchangeToExchangeBindingConfigurator> configure);
}
[NullableContextAttribute("1")]
public interface MassTransit.IRabbitMqHostConfigurator {
    unknown bool PublisherConfirmation {public set; }
    unknown RefreshConnectionFactoryCallback OnRefreshConnectionFactory {public set; }
    unknown ICredentialsProvider CredentialsProvider {public set; }
    unknown ICredentialsRefresher CredentialsRefresher {public set; }
    public abstract virtual void set_PublisherConfirmation(bool value);
    public abstract virtual void set_OnRefreshConnectionFactory(RefreshConnectionFactoryCallback value);
    public abstract virtual void set_CredentialsProvider(ICredentialsProvider value);
    public abstract virtual void set_CredentialsRefresher(ICredentialsRefresher value);
    public abstract virtual void UseSsl(Action`1<IRabbitMqSslConfigurator> configure);
    public abstract virtual void Heartbeat(ushort requestedHeartbeat);
    public abstract virtual void Heartbeat(TimeSpan timeSpan);
    public abstract virtual void Username(string username);
    public abstract virtual void Password(string password);
    public abstract virtual void UseCluster(Action`1<IRabbitMqClusterConfigurator> configureCluster);
    public abstract virtual void RequestedChannelMax(ushort value);
    public abstract virtual void RequestedConnectionTimeout(int milliseconds);
    public abstract virtual void RequestedConnectionTimeout(TimeSpan timeSpan);
    public abstract virtual void ConfigureBatchPublish(Action`1<IRabbitMqBatchPublishConfigurator> configure);
    public abstract virtual void ContinuationTimeout(TimeSpan timeout);
    public abstract virtual void MaxMessageSize(UInt32 maxMessageSize);
    [NullableContextAttribute("2")]
public abstract virtual void ConnectionName(string connectionName);
}
public interface MassTransit.IRabbitMqMessageConsumeTopology`1 {
}
public interface MassTransit.IRabbitMqMessageConsumeTopologyConfigurator {
    public abstract virtual void Apply(IReceiveEndpointBrokerTopologyBuilder builder);
}
public interface MassTransit.IRabbitMqMessageConsumeTopologyConfigurator`1 {
    public abstract virtual void Bind(Action`1<IRabbitMqExchangeBindingConfigurator> configure);
}
public interface MassTransit.IRabbitMqMessagePublishTopology {
    public abstract virtual void Apply(IPublishEndpointBrokerTopologyBuilder builder);
}
public interface MassTransit.IRabbitMqMessagePublishTopology`1 {
    public Exchange Exchange { get; }
    public abstract virtual Exchange get_Exchange();
    public abstract virtual SendSettings GetSendSettings(Uri hostAddress);
    public abstract virtual BrokerTopology GetBrokerTopology();
}
public interface MassTransit.IRabbitMqMessagePublishTopologyConfigurator {
    [NullableAttribute("1")]
unknown string AlternateExchange {public set; }
    [NullableContextAttribute("1")]
public abstract virtual void set_AlternateExchange(string value);
    [NullableContextAttribute("1")]
public abstract virtual void BindQueue(string exchangeName, string queueName, Action`1<IRabbitMqQueueBindingConfigurator> configure);
    [NullableContextAttribute("1")]
public abstract virtual void BindAlternateExchangeQueue(string exchangeName, string queueName, Action`1<IRabbitMqQueueBindingConfigurator> configure);
}
public interface MassTransit.IRabbitMqMessagePublishTopologyConfigurator`1 {
}
public interface MassTransit.IRabbitMqMessageSendTopology`1 {
}
public interface MassTransit.IRabbitMqMessageSendTopologyConfigurator {
}
public interface MassTransit.IRabbitMqMessageSendTopologyConfigurator`1 {
}
public interface MassTransit.IRabbitMqPublishTopology {
    public IExchangeTypeSelector ExchangeTypeSelector { get; }
    public PublishBrokerTopologyOptions BrokerTopologyOptions { get; }
    public abstract virtual IExchangeTypeSelector get_ExchangeTypeSelector();
    public abstract virtual PublishBrokerTopologyOptions get_BrokerTopologyOptions();
    public abstract virtual IRabbitMqMessagePublishTopology`1<T> GetMessageTopology();
    public abstract virtual BrokerTopology GetPublishBrokerTopology();
}
public interface MassTransit.IRabbitMqPublishTopologyConfigurator {
    unknown PublishBrokerTopologyOptions BrokerTopologyOptions {public set; }
    public abstract virtual void set_BrokerTopologyOptions(PublishBrokerTopologyOptions value);
    public abstract virtual IRabbitMqMessagePublishTopologyConfigurator`1<T> GetMessageTopology();
    public abstract virtual IRabbitMqMessagePublishTopologyConfigurator GetMessageTopology(Type messageType);
}
public interface MassTransit.IRabbitMqQueueBindingConfigurator {
}
public interface MassTransit.IRabbitMqQueueConfigurator {
    unknown bool Exclusive {public set; }
    unknown bool Lazy {public set; }
    unknown Nullable`1<TimeSpan> QueueExpiration {public set; }
    unknown bool SingleActiveConsumer {public set; }
    public abstract virtual void set_Exclusive(bool value);
    public abstract virtual void set_Lazy(bool value);
    public abstract virtual void set_QueueExpiration(Nullable`1<TimeSpan> value);
    public abstract virtual void set_SingleActiveConsumer(bool value);
    public abstract virtual void SetQueueArgument(string key, object value);
    public abstract virtual void SetQueueArgument(string key, TimeSpan value);
    public abstract virtual void EnablePriority(byte maxPriority);
    public abstract virtual void SetQuorumQueue(Nullable`1<int> replicationFactor);
}
public interface MassTransit.IRabbitMqQueueEndpointConfigurator {
    unknown bool PurgeOnStartup {public set; }
    unknown int ConsumerPriority {public set; }
    unknown bool ExclusiveConsumer {public set; }
    public abstract virtual void set_PurgeOnStartup(bool value);
    public abstract virtual void set_ConsumerPriority(int value);
    public abstract virtual void set_ExclusiveConsumer(bool value);
}
public interface MassTransit.IRabbitMqReceiveEndpointConfigurator {
    unknown bool BindQueue {public set; }
    unknown string DeadLetterExchange {public set; }
    public abstract virtual void set_BindQueue(bool value);
    public abstract virtual void set_DeadLetterExchange(string value);
    public abstract virtual void Bind(string exchangeName, Action`1<IRabbitMqExchangeToExchangeBindingConfigurator> callback);
    public abstract virtual void Bind(Action`1<IRabbitMqExchangeBindingConfigurator> callback);
    public abstract virtual void BindDeadLetterQueue(string exchangeName, string queueName, Action`1<IRabbitMqQueueBindingConfigurator> configure);
    public abstract virtual void ConfigureModel(Action`1<IPipeConfigurator`1<ModelContext>> configure);
    public abstract virtual void ConfigureConnection(Action`1<IPipeConfigurator`1<ConnectionContext>> configure);
    public abstract virtual void OverrideConsumerTag(string consumerTag);
    public abstract virtual void Stream(Action`1<IRabbitMqStreamConfigurator> callback);
    public abstract virtual void Stream(string consumerTag, Action`1<IRabbitMqStreamConfigurator> callback);
}
public interface MassTransit.IRabbitMqSendTopology {
    public IEntityNameValidator EntityNameValidator { get; }
    public abstract virtual IEntityNameValidator get_EntityNameValidator();
    public abstract virtual IRabbitMqMessageSendTopologyConfigurator`1<T> GetMessageTopology();
    public abstract virtual SendSettings GetSendSettings(RabbitMqEndpointAddress address);
    public abstract virtual ErrorSettings GetErrorSettings(ReceiveSettings settings);
    public abstract virtual DeadLetterSettings GetDeadLetterSettings(ReceiveSettings settings);
}
public interface MassTransit.IRabbitMqSendTopologyConfigurator {
    unknown Action`1<IRabbitMqQueueBindingConfigurator> ConfigureErrorSettings {public set; }
    unknown Action`1<IRabbitMqQueueBindingConfigurator> ConfigureDeadLetterSettings {public set; }
    public abstract virtual void set_ConfigureErrorSettings(Action`1<IRabbitMqQueueBindingConfigurator> value);
    public abstract virtual void set_ConfigureDeadLetterSettings(Action`1<IRabbitMqQueueBindingConfigurator> value);
}
public interface MassTransit.IRabbitMqSslConfigurator {
    public SslProtocols Protocol { get; public set; }
    public string ServerName { get; public set; }
    public string CertificatePath { get; public set; }
    public string CertificatePassphrase { get; public set; }
    public X509Certificate Certificate { get; public set; }
    public bool UseCertificateAsAuthenticationIdentity { get; public set; }
    public LocalCertificateSelectionCallback CertificateSelectionCallback { get; public set; }
    public RemoteCertificateValidationCallback CertificateValidationCallback { get; public set; }
    public abstract virtual SslProtocols get_Protocol();
    public abstract virtual void set_Protocol(SslProtocols value);
    public abstract virtual string get_ServerName();
    public abstract virtual void set_ServerName(string value);
    public abstract virtual string get_CertificatePath();
    public abstract virtual void set_CertificatePath(string value);
    public abstract virtual string get_CertificatePassphrase();
    public abstract virtual void set_CertificatePassphrase(string value);
    public abstract virtual X509Certificate get_Certificate();
    public abstract virtual void set_Certificate(X509Certificate value);
    public abstract virtual bool get_UseCertificateAsAuthenticationIdentity();
    public abstract virtual void set_UseCertificateAsAuthenticationIdentity(bool value);
    public abstract virtual LocalCertificateSelectionCallback get_CertificateSelectionCallback();
    public abstract virtual void set_CertificateSelectionCallback(LocalCertificateSelectionCallback value);
    public abstract virtual RemoteCertificateValidationCallback get_CertificateValidationCallback();
    public abstract virtual void set_CertificateValidationCallback(RemoteCertificateValidationCallback value);
    public abstract virtual void AllowPolicyErrors(SslPolicyErrors policyErrors);
    public abstract virtual void EnforcePolicyErrors(SslPolicyErrors policyErrors);
}
public interface MassTransit.IRabbitMqStreamConfigurator {
    unknown long MaxLength {public set; }
    unknown TimeSpan MaxAge {public set; }
    unknown long MaxSegmentSize {public set; }
    public abstract virtual void set_MaxLength(long value);
    public abstract virtual void set_MaxAge(TimeSpan value);
    public abstract virtual void set_MaxSegmentSize(long value);
    public abstract virtual void FromOffset(long offset);
    public abstract virtual void FromTimestamp(DateTime timestamp);
    public abstract virtual void FromFirst();
    public abstract virtual void FromLast();
}
public class MassTransit.MessageNotAcknowledgedException : TransportException {
    public MessageNotAcknowledgedException(Uri uri, string message);
    protected MessageNotAcknowledgedException(SerializationInfo info, StreamingContext context);
}
public class MassTransit.MessageNotConfirmedException : TransportException {
    public MessageNotConfirmedException(Uri uri, string reason);
    public MessageNotConfirmedException(Uri uri, Exception innerException);
    public MessageNotConfirmedException(Uri uri, string message, Exception innerException);
    protected MessageNotConfirmedException(SerializationInfo info, StreamingContext context);
}
public class MassTransit.MessageReturnedException : TransportException {
    public MessageReturnedException(Uri uri, string message);
    public MessageReturnedException(Uri uri, string message, Exception innerException);
    protected MessageReturnedException(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
public enum MassTransit.PublishBrokerTopologyOptions : Enum {
    public int value__;
    public static PublishBrokerTopologyOptions FlattenHierarchy;
    public static PublishBrokerTopologyOptions MaintainHierarchy;
}
public class MassTransit.RabbitMqAddressException : ConfigurationException {
    private static string DefaultHelpLink;
    public RabbitMqAddressException(string message);
    public RabbitMqAddressException(string message, Exception innerException);
    public RabbitMqAddressException(SerializationInfo info, StreamingContext context);
}
public interface MassTransit.RabbitMqBasicConsumeContext {
    public string Exchange { get; }
    public string ConsumerTag { get; }
    public ulong DeliveryTag { get; }
    public IBasicProperties Properties { get; }
    public abstract virtual string get_Exchange();
    public abstract virtual string get_ConsumerTag();
    public abstract virtual ulong get_DeliveryTag();
    public abstract virtual IBasicProperties get_Properties();
}
public static class MassTransit.RabbitMqBusFactory : object {
    public static IBusControl Create(Action`1<IRabbitMqBusFactoryConfigurator> configure);
    public static IMessageTopologyConfigurator CreateMessageTopology();
}
[ExtensionAttribute]
public static class MassTransit.RabbitMqBusFactoryConfiguratorExtensions : object {
    [ExtensionAttribute]
public static IBusControl CreateUsingRabbitMq(IBusFactorySelector selector, Action`1<IRabbitMqBusFactoryConfigurator> configure);
    [ExtensionAttribute]
public static void UsingRabbitMq(IBusRegistrationConfigurator configurator, Action`2<IBusRegistrationContext, IRabbitMqBusFactoryConfigurator> configure);
}
public class MassTransit.RabbitMqConnectionException : ConnectionException {
    public RabbitMqConnectionException(string message);
    public RabbitMqConnectionException(string message, Exception innerException);
    protected RabbitMqConnectionException(SerializationInfo info, StreamingContext context);
    private static bool IsExceptionTransient(Exception exception);
}
[ExtensionAttribute]
public static class MassTransit.RabbitMqDeferMessageExtensions : object {
    [ExtensionAttribute]
public static Task Defer(ConsumeContext`1<T> context, TimeSpan delay, Action`2<ConsumeContext, SendContext> callback);
}
[ExtensionAttribute]
public static class MassTransit.RabbitMqDependencyInjectionTestingExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IServiceCollection ConfigureRabbitMqTestOptions(IServiceCollection services, Action`1<RabbitMqTestHarnessOptions> configure);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay}")]
public class MassTransit.RabbitMqEndpointAddress : ValueType {
    private static string AutoDeleteKey;
    private static string DurableKey;
    private static string TemporaryKey;
    private static string ExchangeTypeKey;
    private static string BindQueueKey;
    private static string QueueNameKey;
    private static string AlternateExchangeKey;
    private static string BindExchangeKey;
    private static string DelayedTypeKey;
    private static string SingleActiveConsumerKey;
    public static string DelayedMessageExchangeType;
    public string Scheme;
    public string Host;
    public Nullable`1<int> Port;
    public string VirtualHost;
    public string Name;
    public string ExchangeType;
    public bool Durable;
    public bool AutoDelete;
    public bool BindToQueue;
    public bool SingleActiveConsumer;
    public string QueueName;
    public string DelayedType;
    public String[] BindExchanges;
    public string AlternateExchange;
    private Uri DebuggerDisplay { get; }
    public RabbitMqEndpointAddress(Uri hostAddress, Uri address);
    public RabbitMqEndpointAddress(Uri hostAddress, string exchangeName, string exchangeType, bool durable, bool autoDelete, bool bindToQueue, string queueName, string delayedType, String[] bindExchanges, string alternateExchange, bool singleActiveConsumer);
    private RabbitMqEndpointAddress(string scheme, string host, Nullable`1<int> port, string virtualHost, string name, string exchangeType, bool durable, bool autoDelete, bool bindToQueue, string queueName, string delayedType, String[] bindExchanges, string alternateExchange, bool singleActiveConsumer);
    public RabbitMqDelaySettings GetDelaySettings();
    public Uri ToShortAddress();
    private static void ParseLeft(Uri address, String& scheme, String& host, Nullable`1& port, String& virtualHost);
    public static Uri op_Implicit(RabbitMqEndpointAddress& address);
    private Uri get_DebuggerDisplay();
    [IteratorStateMachineAttribute("MassTransit.RabbitMqEndpointAddress/<GetQueryStringOptions>d__34")]
private IEnumerable`1<string> GetQueryStringOptions();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay}")]
public class MassTransit.RabbitMqHostAddress : ValueType {
    private static string HeartbeatKey;
    private static string PrefetchKey;
    public static string RabbitMqSchema;
    public static string RabbitMqSslSchema;
    private static string TimeToLiveKey;
    public string Scheme;
    public string Host;
    public Nullable`1<int> Port;
    public string VirtualHost;
    public Nullable`1<ushort> Heartbeat;
    public Nullable`1<ushort> Prefetch;
    public Nullable`1<int> TimeToLive;
    private Uri DebuggerDisplay { get; }
    public RabbitMqHostAddress(Uri address);
    public RabbitMqHostAddress(string host, Nullable`1<int> port, string virtualHost);
    private static void ParseLeft(Uri address, String& scheme, String& host, Nullable`1& port, String& virtualHost);
    public static Uri op_Implicit(RabbitMqHostAddress& address);
    private Uri get_DebuggerDisplay();
}
[ExtensionAttribute]
public static class MassTransit.RabbitMqHostConfigurationExtensions : object {
    [ExtensionAttribute]
public static void Host(IRabbitMqBusFactoryConfigurator configurator, Uri hostAddress, Action`1<IRabbitMqHostConfigurator> configure);
    [ExtensionAttribute]
public static void Host(IRabbitMqBusFactoryConfigurator configurator, string host, Action`1<IRabbitMqHostConfigurator> configure);
    [ExtensionAttribute]
public static void Host(IRabbitMqBusFactoryConfigurator configurator, Uri hostAddress, string connectionName, Action`1<IRabbitMqHostConfigurator> configure);
    [ExtensionAttribute]
public static void Host(IRabbitMqBusFactoryConfigurator configurator, string host, string virtualHost, Action`1<IRabbitMqHostConfigurator> configure);
    [ExtensionAttribute]
public static void Host(IRabbitMqBusFactoryConfigurator configurator, string host, string virtualHost, string connectionName, Action`1<IRabbitMqHostConfigurator> configure);
    [ExtensionAttribute]
public static void Host(IRabbitMqBusFactoryConfigurator configurator, string host, ushort port, string virtualHost, Action`1<IRabbitMqHostConfigurator> configure);
    [ExtensionAttribute]
public static void Host(IRabbitMqBusFactoryConfigurator configurator, string host, ushort port, string virtualHost, string connectionName, Action`1<IRabbitMqHostConfigurator> configure);
    [ExtensionAttribute]
public static void ReceiveEndpoint(IRabbitMqBusFactoryConfigurator configurator, Action`1<IRabbitMqReceiveEndpointConfigurator> configure);
    [ExtensionAttribute]
public static void ReceiveEndpoint(IRabbitMqBusFactoryConfigurator configurator, IEndpointDefinition definition, Action`1<IRabbitMqReceiveEndpointConfigurator> configure);
}
public interface MassTransit.RabbitMqHostSettings {
    public string Host { get; }
    public int Port { get; }
    public string VirtualHost { get; }
    public string Username { get; }
    public string Password { get; }
    public TimeSpan Heartbeat { get; }
    public bool Ssl { get; }
    public SslProtocols SslProtocol { get; }
    public string SslServerName { get; }
    public SslPolicyErrors AcceptablePolicyErrors { get; }
    public string ClientCertificatePath { get; }
    public string ClientCertificatePassphrase { get; }
    public X509Certificate ClientCertificate { get; }
    public bool UseClientCertificateAsAuthenticationIdentity { get; }
    public LocalCertificateSelectionCallback CertificateSelectionCallback { get; public set; }
    public RemoteCertificateValidationCallback CertificateValidationCallback { get; public set; }
    public IRabbitMqEndpointResolver EndpointResolver { get; }
    public string ClientProvidedName { get; }
    public Uri HostAddress { get; }
    public bool PublisherConfirmation { get; }
    public ushort RequestedChannelMax { get; }
    public TimeSpan RequestedConnectionTimeout { get; }
    public BatchSettings BatchSettings { get; }
    public TimeSpan ContinuationTimeout { get; }
    public Nullable`1<UInt32> MaxMessageSize { get; }
    public ICredentialsProvider CredentialsProvider { get; }
    public ICredentialsRefresher CredentialsRefresher { get; }
    public abstract virtual string get_Host();
    public abstract virtual int get_Port();
    public abstract virtual string get_VirtualHost();
    public abstract virtual string get_Username();
    public abstract virtual string get_Password();
    public abstract virtual TimeSpan get_Heartbeat();
    public abstract virtual bool get_Ssl();
    public abstract virtual SslProtocols get_SslProtocol();
    public abstract virtual string get_SslServerName();
    public abstract virtual SslPolicyErrors get_AcceptablePolicyErrors();
    public abstract virtual string get_ClientCertificatePath();
    public abstract virtual string get_ClientCertificatePassphrase();
    public abstract virtual X509Certificate get_ClientCertificate();
    public abstract virtual bool get_UseClientCertificateAsAuthenticationIdentity();
    public abstract virtual LocalCertificateSelectionCallback get_CertificateSelectionCallback();
    public abstract virtual void set_CertificateSelectionCallback(LocalCertificateSelectionCallback value);
    public abstract virtual RemoteCertificateValidationCallback get_CertificateValidationCallback();
    public abstract virtual void set_CertificateValidationCallback(RemoteCertificateValidationCallback value);
    public abstract virtual IRabbitMqEndpointResolver get_EndpointResolver();
    public abstract virtual string get_ClientProvidedName();
    public abstract virtual Uri get_HostAddress();
    public abstract virtual bool get_PublisherConfirmation();
    public abstract virtual ushort get_RequestedChannelMax();
    public abstract virtual TimeSpan get_RequestedConnectionTimeout();
    public abstract virtual BatchSettings get_BatchSettings();
    public abstract virtual TimeSpan get_ContinuationTimeout();
    public abstract virtual Nullable`1<UInt32> get_MaxMessageSize();
    public abstract virtual ICredentialsProvider get_CredentialsProvider();
    public abstract virtual ICredentialsRefresher get_CredentialsRefresher();
    public abstract virtual Task Refresh(ConnectionFactory connectionFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MassTransit.RabbitMqPublishTopologyConfigurationExtensions : object {
    [ExtensionAttribute]
public static void AddPublishMessageTypesFromNamespaceContaining(IRabbitMqBusFactoryConfigurator configurator, Action`2<IRabbitMqMessagePublishTopologyConfigurator, Type> configure, Func`2<Type, bool> filter);
    [ExtensionAttribute]
public static void AddPublishMessageTypesFromNamespaceContaining(IRabbitMqBusFactoryConfigurator configurator, Type type, Action`2<IRabbitMqMessagePublishTopologyConfigurator, Type> configure, Func`2<Type, bool> filter);
    [ExtensionAttribute]
public static void AddPublishMessageTypes(IRabbitMqBusFactoryConfigurator configurator, IEnumerable`1<Type> messageTypes, Action`2<IRabbitMqMessagePublishTopologyConfigurator, Type> configure);
}
[ExtensionAttribute]
public static class MassTransit.RabbitMqRequestClientExtensions : object {
    [ExtensionAttribute]
public static Task`1<IClientFactory> CreateReplyToClientFactory(IReceiveConnector connector, RequestTimeout timeout);
}
public interface MassTransit.RabbitMqSendContext {
    public bool Mandatory { get; public set; }
    public string Exchange { get; }
    public bool AwaitAck { get; public set; }
    public IBasicProperties BasicProperties { get; }
    public abstract virtual bool get_Mandatory();
    public abstract virtual void set_Mandatory(bool value);
    public abstract virtual string get_Exchange();
    public abstract virtual bool get_AwaitAck();
    public abstract virtual void set_AwaitAck(bool value);
    public abstract virtual IBasicProperties get_BasicProperties();
}
public interface MassTransit.RabbitMqSendContext`1 {
}
[ExtensionAttribute]
public static class MassTransit.RabbitMqSendContextExtensions : object {
    [ExtensionAttribute]
public static void SetTransportHeader(RabbitMqSendContext context, string key, object value);
    [ExtensionAttribute]
public static void SetHeader(IBasicProperties basicProperties, string key, object value);
    [ExtensionAttribute]
public static void SetPriority(SendContext context, byte priority);
    [ExtensionAttribute]
public static bool TrySetPriority(SendContext context, byte priority);
    [ExtensionAttribute]
public static void SetAwaitAck(SendContext context, bool awaitAck);
    [ExtensionAttribute]
public static bool TrySetAwaitAck(SendContext context, bool awaitAck);
}
public class MassTransit.RabbitMqSslOptions : object {
    [CompilerGeneratedAttribute]
private string <ServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Trust>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertPassphrase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CertIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private SslProtocols <Protocol>k__BackingField;
    public string ServerName { get; public set; }
    public bool Trust { get; public set; }
    public string CertPath { get; public set; }
    public string CertPassphrase { get; public set; }
    public bool CertIdentity { get; public set; }
    public SslProtocols Protocol { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ServerName();
    [CompilerGeneratedAttribute]
public void set_ServerName(string value);
    [CompilerGeneratedAttribute]
public bool get_Trust();
    [CompilerGeneratedAttribute]
public void set_Trust(bool value);
    [CompilerGeneratedAttribute]
public string get_CertPath();
    [CompilerGeneratedAttribute]
public void set_CertPath(string value);
    [CompilerGeneratedAttribute]
public string get_CertPassphrase();
    [CompilerGeneratedAttribute]
public void set_CertPassphrase(string value);
    [CompilerGeneratedAttribute]
public bool get_CertIdentity();
    [CompilerGeneratedAttribute]
public void set_CertIdentity(bool value);
    [CompilerGeneratedAttribute]
public SslProtocols get_Protocol();
    [CompilerGeneratedAttribute]
public void set_Protocol(SslProtocols value);
}
public class MassTransit.RabbitMqTestHarnessOptions : object {
    [CompilerGeneratedAttribute]
private bool <CreateVirtualHostIfNotExists>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CleanVirtualHost>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceCleanRootVirtualHost>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<IModel> <ConfigureVirtualHostCallback>k__BackingField;
    public bool CreateVirtualHostIfNotExists { get; public set; }
    public bool CleanVirtualHost { get; public set; }
    public bool ForceCleanRootVirtualHost { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<IModel> ConfigureVirtualHostCallback { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CreateVirtualHostIfNotExists();
    [CompilerGeneratedAttribute]
public void set_CreateVirtualHostIfNotExists(bool value);
    [CompilerGeneratedAttribute]
public bool get_CleanVirtualHost();
    [CompilerGeneratedAttribute]
public void set_CleanVirtualHost(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForceCleanRootVirtualHost();
    [CompilerGeneratedAttribute]
public void set_ForceCleanRootVirtualHost(bool value);
    [CompilerGeneratedAttribute]
public Action`1<IModel> get_ConfigureVirtualHostCallback();
    [CompilerGeneratedAttribute]
public void set_ConfigureVirtualHostCallback(Action`1<IModel> value);
}
internal class MassTransit.RabbitMqTransport.BasicProperties : object {
    private string _appId;
    private bool _appIdPresent;
    private string _clusterId;
    private bool _clusterIdPresent;
    private string _contentEncoding;
    private bool _contentEncodingPresent;
    private string _contentType;
    private bool _contentTypePresent;
    private string _correlationId;
    private bool _correlationIdPresent;
    private byte _deliveryMode;
    private bool _deliveryModePresent;
    private string _expiration;
    private bool _expirationPresent;
    private IDictionary`2<string, object> _headers;
    private bool _headersPresent;
    private string _messageId;
    private bool _messageIdPresent;
    private byte _priority;
    private bool _priorityPresent;
    private string _replyTo;
    private bool _replyToPresent;
    private AmqpTimestamp _timestamp;
    private bool _timestampPresent;
    private string _type;
    private bool _typePresent;
    private string _userId;
    private bool _userIdPresent;
    public string ContentType { get; public set; }
    public string ContentEncoding { get; public set; }
    public IDictionary`2<string, object> Headers { get; public set; }
    public byte DeliveryMode { get; public set; }
    public bool Persistent { get; public set; }
    public byte Priority { get; public set; }
    public string CorrelationId { get; public set; }
    public string ReplyTo { get; public set; }
    public PublicationAddress ReplyToAddress { get; public set; }
    public string Expiration { get; public set; }
    public string MessageId { get; public set; }
    public AmqpTimestamp Timestamp { get; public set; }
    public string Type { get; public set; }
    public string UserId { get; public set; }
    public string AppId { get; public set; }
    public string ClusterId { get; public set; }
    public ushort ProtocolClassId { get; }
    public string ProtocolClassName { get; }
    public sealed virtual string get_ContentType();
    public sealed virtual void set_ContentType(string value);
    public sealed virtual string get_ContentEncoding();
    public sealed virtual void set_ContentEncoding(string value);
    public sealed virtual IDictionary`2<string, object> get_Headers();
    public sealed virtual void set_Headers(IDictionary`2<string, object> value);
    public sealed virtual byte get_DeliveryMode();
    public sealed virtual void set_DeliveryMode(byte value);
    public sealed virtual bool get_Persistent();
    public sealed virtual void set_Persistent(bool value);
    public sealed virtual byte get_Priority();
    public sealed virtual void set_Priority(byte value);
    public sealed virtual string get_CorrelationId();
    public sealed virtual void set_CorrelationId(string value);
    public sealed virtual string get_ReplyTo();
    public sealed virtual void set_ReplyTo(string value);
    public sealed virtual PublicationAddress get_ReplyToAddress();
    public sealed virtual void set_ReplyToAddress(PublicationAddress value);
    public sealed virtual string get_Expiration();
    public sealed virtual void set_Expiration(string value);
    public sealed virtual string get_MessageId();
    public sealed virtual void set_MessageId(string value);
    public sealed virtual AmqpTimestamp get_Timestamp();
    public sealed virtual void set_Timestamp(AmqpTimestamp value);
    public sealed virtual string get_Type();
    public sealed virtual void set_Type(string value);
    public sealed virtual string get_UserId();
    public sealed virtual void set_UserId(string value);
    public sealed virtual string get_AppId();
    public sealed virtual void set_AppId(string value);
    public sealed virtual string get_ClusterId();
    public sealed virtual void set_ClusterId(string value);
    public sealed virtual void ClearContentType();
    public sealed virtual void ClearContentEncoding();
    public sealed virtual void ClearHeaders();
    public sealed virtual void ClearDeliveryMode();
    public sealed virtual void ClearPriority();
    public sealed virtual void ClearCorrelationId();
    public sealed virtual void ClearReplyTo();
    public sealed virtual void ClearExpiration();
    public sealed virtual void ClearMessageId();
    public sealed virtual void ClearTimestamp();
    public sealed virtual void ClearType();
    public sealed virtual void ClearUserId();
    public sealed virtual void ClearAppId();
    public sealed virtual void ClearClusterId();
    public sealed virtual bool IsContentTypePresent();
    public sealed virtual bool IsContentEncodingPresent();
    public sealed virtual bool IsHeadersPresent();
    public sealed virtual bool IsDeliveryModePresent();
    public sealed virtual bool IsPriorityPresent();
    public sealed virtual bool IsCorrelationIdPresent();
    public sealed virtual bool IsReplyToPresent();
    public sealed virtual bool IsExpirationPresent();
    public sealed virtual bool IsMessageIdPresent();
    public sealed virtual bool IsTimestampPresent();
    public sealed virtual bool IsTypePresent();
    public sealed virtual bool IsUserIdPresent();
    public sealed virtual bool IsAppIdPresent();
    public sealed virtual bool IsClusterIdPresent();
    public sealed virtual ushort get_ProtocolClassId();
    public sealed virtual string get_ProtocolClassName();
}
public class MassTransit.RabbitMqTransport.BatchPublish : object {
    private bool _awaitAck;
    private TaskCompletionSource`1<ulong> _confirmed;
    private string _exchange;
    private IBasicProperties _properties;
    private string _routingKey;
    private ReadOnlyMemory`1<byte> _body;
    [CompilerGeneratedAttribute]
private ulong <PublishTag>k__BackingField;
    private Uri DestinationAddress { get; }
    public int Length { get; }
    public ulong PublishTag { get; private set; }
    public Task Confirmed { get; }
    public BatchPublish(string exchange, string routingKey, IBasicProperties properties, Byte[] body, bool awaitAck);
    private Uri get_DestinationAddress();
    public int get_Length();
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_PublishTag();
    [CompilerGeneratedAttribute]
private void set_PublishTag(ulong value);
    public sealed virtual Task get_Confirmed();
    public sealed virtual void Acknowledged();
    public sealed virtual void NotAcknowledged();
    public sealed virtual void NotConfirmed(string reason);
    public sealed virtual void NotConfirmed(Exception exception);
    public sealed virtual void Returned(ushort code, string text);
    public void Append(IBasicPublishBatch batch, ulong publishTag);
    public void BasicPublish(IModel model, ulong publishTag);
    public void Published();
    public void SetPublishTag(ulong publishTag);
}
public class MassTransit.RabbitMqTransport.BatchPublisher : object {
    private PendingConfirmationCollection _confirmations;
    private TaskExecutor _executor;
    private IPublisher _immediatePublisher;
    private IModel _model;
    private Channel`1<BatchPublish> _publishChannel;
    private Task _publishTask;
    private BatchSettings _settings;
    public BatchPublisher(TaskExecutor executor, IModel model, BatchSettings settings, PendingConfirmationCollection confirmations);
    public sealed virtual Task Publish(string exchange, string routingKey, bool mandatory, IBasicProperties basicProperties, Byte[] body, bool awaitAck);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.BatchPublisher/<DisposeAsync>d__9")]
public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.BatchPublisher/<WaitForBatch>d__10")]
private Task WaitForBatch();
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.BatchPublisher/<ReadBatch>d__11")]
private Task ReadBatch();
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.BatchPublisher/<PublishBatch>d__12")]
private Task PublishBatch(IList`1<BatchPublish> batch);
}
public interface MassTransit.RabbitMqTransport.Configuration.BatchSettings {
    public bool Enabled { get; }
    public int MessageLimit { get; }
    public int SizeLimit { get; }
    public TimeSpan Timeout { get; }
    public abstract virtual bool get_Enabled();
    public abstract virtual int get_MessageLimit();
    public abstract virtual int get_SizeLimit();
    public abstract virtual TimeSpan get_Timeout();
}
[IsReadOnlyAttribute]
public class MassTransit.RabbitMqTransport.Configuration.ClusterNode : ValueType {
    public string HostName;
    public Nullable`1<int> Port;
    private ClusterNode(string hostName, Nullable`1<int> port);
    public virtual string ToString();
    public static ClusterNode Parse(string address);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class MassTransit.RabbitMqTransport.Configuration.ConfigurationHostSettings : object {
    internal static SslProtocols DefaultSslProtocols;
    [NullableAttribute("1")]
private ConfigurationBatchSettings _batchSettings;
    [NullableAttribute("1")]
private Lazy`1<Uri> _hostAddress;
    [CompilerGeneratedAttribute]
private RefreshConnectionFactoryCallback <OnRefreshConnectionFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VirtualHost>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Heartbeat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ssl>k__BackingField;
    [CompilerGeneratedAttribute]
private SslProtocols <SslProtocol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SslServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private SslPolicyErrors <AcceptablePolicyErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientCertificatePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientCertificatePassphrase>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate <ClientCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseClientCertificateAsAuthenticationIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalCertificateSelectionCallback <CertificateSelectionCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <CertificateValidationCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private IRabbitMqEndpointResolver <EndpointResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientProvidedName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PublisherConfirmation>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <RequestedChannelMax>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RequestedConnectionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ContinuationTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <MaxMessageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private ICredentialsProvider <CredentialsProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ICredentialsRefresher <CredentialsRefresher>k__BackingField;
    public RefreshConnectionFactoryCallback OnRefreshConnectionFactory { get; public set; }
    public string Host { get; public set; }
    public int Port { get; public set; }
    public string VirtualHost { get; public set; }
    public string Username { get; public set; }
    public string Password { get; public set; }
    public TimeSpan Heartbeat { get; public set; }
    public bool Ssl { get; public set; }
    public SslProtocols SslProtocol { get; public set; }
    public string SslServerName { get; public set; }
    public SslPolicyErrors AcceptablePolicyErrors { get; public set; }
    public string ClientCertificatePath { get; public set; }
    public string ClientCertificatePassphrase { get; public set; }
    public X509Certificate ClientCertificate { get; public set; }
    public bool UseClientCertificateAsAuthenticationIdentity { get; public set; }
    public LocalCertificateSelectionCallback CertificateSelectionCallback { get; public set; }
    public RemoteCertificateValidationCallback CertificateValidationCallback { get; public set; }
    public IRabbitMqEndpointResolver EndpointResolver { get; public set; }
    public string ClientProvidedName { get; public set; }
    public bool PublisherConfirmation { get; public set; }
    [NullableAttribute("1")]
public Uri HostAddress { get; }
    public ushort RequestedChannelMax { get; public set; }
    public TimeSpan RequestedConnectionTimeout { get; public set; }
    [NullableAttribute("1")]
public BatchSettings BatchSettings { get; }
    public TimeSpan ContinuationTimeout { get; public set; }
    public Nullable`1<UInt32> MaxMessageSize { get; public set; }
    public ICredentialsProvider CredentialsProvider { get; public set; }
    public ICredentialsRefresher CredentialsRefresher { get; public set; }
    [CompilerGeneratedAttribute]
public RefreshConnectionFactoryCallback get_OnRefreshConnectionFactory();
    [CompilerGeneratedAttribute]
public void set_OnRefreshConnectionFactory(RefreshConnectionFactoryCallback value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_VirtualHost();
    [CompilerGeneratedAttribute]
public void set_VirtualHost(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Heartbeat();
    [CompilerGeneratedAttribute]
public void set_Heartbeat(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Ssl();
    [CompilerGeneratedAttribute]
public void set_Ssl(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual SslProtocols get_SslProtocol();
    [CompilerGeneratedAttribute]
public void set_SslProtocol(SslProtocols value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SslServerName();
    [CompilerGeneratedAttribute]
public void set_SslServerName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual SslPolicyErrors get_AcceptablePolicyErrors();
    [CompilerGeneratedAttribute]
public void set_AcceptablePolicyErrors(SslPolicyErrors value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientCertificatePath();
    [CompilerGeneratedAttribute]
public void set_ClientCertificatePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientCertificatePassphrase();
    [CompilerGeneratedAttribute]
public void set_ClientCertificatePassphrase(string value);
    [CompilerGeneratedAttribute]
public sealed virtual X509Certificate get_ClientCertificate();
    [CompilerGeneratedAttribute]
public void set_ClientCertificate(X509Certificate value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseClientCertificateAsAuthenticationIdentity();
    [CompilerGeneratedAttribute]
public void set_UseClientCertificateAsAuthenticationIdentity(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual LocalCertificateSelectionCallback get_CertificateSelectionCallback();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CertificateSelectionCallback(LocalCertificateSelectionCallback value);
    [CompilerGeneratedAttribute]
public sealed virtual RemoteCertificateValidationCallback get_CertificateValidationCallback();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CertificateValidationCallback(RemoteCertificateValidationCallback value);
    [CompilerGeneratedAttribute]
public sealed virtual IRabbitMqEndpointResolver get_EndpointResolver();
    [CompilerGeneratedAttribute]
public void set_EndpointResolver(IRabbitMqEndpointResolver value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientProvidedName();
    [CompilerGeneratedAttribute]
public void set_ClientProvidedName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PublisherConfirmation();
    [CompilerGeneratedAttribute]
public void set_PublisherConfirmation(bool value);
    [NullableContextAttribute("1")]
public sealed virtual Uri get_HostAddress();
    [CompilerGeneratedAttribute]
public sealed virtual ushort get_RequestedChannelMax();
    [CompilerGeneratedAttribute]
public void set_RequestedChannelMax(ushort value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_RequestedConnectionTimeout();
    [CompilerGeneratedAttribute]
public void set_RequestedConnectionTimeout(TimeSpan value);
    [NullableContextAttribute("1")]
public sealed virtual BatchSettings get_BatchSettings();
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_ContinuationTimeout();
    [CompilerGeneratedAttribute]
public void set_ContinuationTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<UInt32> get_MaxMessageSize();
    [CompilerGeneratedAttribute]
public void set_MaxMessageSize(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public sealed virtual ICredentialsProvider get_CredentialsProvider();
    [CompilerGeneratedAttribute]
public void set_CredentialsProvider(ICredentialsProvider value);
    [CompilerGeneratedAttribute]
public sealed virtual ICredentialsRefresher get_CredentialsRefresher();
    [CompilerGeneratedAttribute]
public void set_CredentialsRefresher(ICredentialsRefresher value);
    [NullableContextAttribute("1")]
public sealed virtual Task Refresh(ConnectionFactory connectionFactory);
    [NullableContextAttribute("1")]
public void ConfigureBatch(Action`1<ConfigurationBatchSettings> configure);
    [NullableContextAttribute("1")]
private Uri FormatHostAddress();
}
public class MassTransit.RabbitMqTransport.Configuration.ExchangeBindingConsumeTopologySpecification : RabbitMqExchangeBindingConfigurator {
    private List`1<IRabbitMqConsumeTopologySpecification> _specifications;
    public ExchangeBindingConsumeTopologySpecification(string exchangeName, string exchangeType, bool durable, bool autoDelete);
    public ExchangeBindingConsumeTopologySpecification(Exchange exchange);
    [IteratorStateMachineAttribute("MassTransit.RabbitMqTransport.Configuration.ExchangeBindingConsumeTopologySpecification/<Validate>d__3")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
    public sealed virtual void Apply(IReceiveEndpointBrokerTopologyBuilder builder);
    public sealed virtual void Bind(string exchangeName, Action`1<IRabbitMqExchangeToExchangeBindingConfigurator> configure);
}
public class MassTransit.RabbitMqTransport.Configuration.ExchangeBindingPublishTopologySpecification : RabbitMqExchangeBindingConfigurator {
    public ExchangeBindingPublishTopologySpecification(string exchangeName, string exchangeType, bool durable, bool autoDelete);
    [IteratorStateMachineAttribute("MassTransit.RabbitMqTransport.Configuration.ExchangeBindingPublishTopologySpecification/<Validate>d__1")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
    public sealed virtual void Apply(IPublishEndpointBrokerTopologyBuilder builder);
}
public class MassTransit.RabbitMqTransport.Configuration.ExchangeToExchangeBindingConsumeTopologySpecification : RabbitMqExchangeBindingConfigurator {
    private List`1<IRabbitMqConsumeTopologySpecification> _specifications;
    public ExchangeToExchangeBindingConsumeTopologySpecification(string exchangeName, string exchangeType, bool durable, bool autoDelete);
    [IteratorStateMachineAttribute("MassTransit.RabbitMqTransport.Configuration.ExchangeToExchangeBindingConsumeTopologySpecification/<Validate>d__2")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
    public sealed virtual void Apply(IReceiveEndpointBrokerTopologyBuilder builder);
    public sealed virtual void Bind(string exchangeName, Action`1<IRabbitMqExchangeToExchangeBindingConfigurator> configure);
}
public class MassTransit.RabbitMqTransport.Configuration.ExchangeToQueueBindingConsumeTopologySpecification : QueueBindingConfigurator {
    public ExchangeToQueueBindingConsumeTopologySpecification(string exchangeName, string exchangeType, string queueName, bool durable, bool autoDelete);
    [IteratorStateMachineAttribute("MassTransit.RabbitMqTransport.Configuration.ExchangeToQueueBindingConsumeTopologySpecification/<Validate>d__1")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
    public sealed virtual void Apply(IReceiveEndpointBrokerTopologyBuilder builder);
}
public class MassTransit.RabbitMqTransport.Configuration.ExchangeToQueueBindingPublishTopologySpecification : QueueBindingConfigurator {
    public ExchangeToQueueBindingPublishTopologySpecification(string exchangeName, string exchangeType, string queueName, bool durable, bool autoDelete);
    [IteratorStateMachineAttribute("MassTransit.RabbitMqTransport.Configuration.ExchangeToQueueBindingPublishTopologySpecification/<Validate>d__1")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
    public sealed virtual void Apply(IPublishEndpointBrokerTopologyBuilder builder);
}
public class MassTransit.RabbitMqTransport.Configuration.InvalidRabbitMqConsumeTopologySpecification : object {
    private string _key;
    private string _message;
    public InvalidRabbitMqConsumeTopologySpecification(string key, string message);
    [IteratorStateMachineAttribute("MassTransit.RabbitMqTransport.Configuration.InvalidRabbitMqConsumeTopologySpecification/<Validate>d__3")]
public sealed virtual IEnumerable`1<ValidationResult> Validate();
    public sealed virtual void Apply(IReceiveEndpointBrokerTopologyBuilder builder);
}
public interface MassTransit.RabbitMqTransport.Configuration.IRabbitMqBusConfiguration {
    public IRabbitMqHostConfiguration HostConfiguration { get; }
    public IRabbitMqEndpointConfiguration BusEndpointConfiguration { get; }
    public IRabbitMqTopologyConfiguration Topology { get; }
    public abstract virtual IRabbitMqHostConfiguration get_HostConfiguration();
    public abstract virtual IRabbitMqEndpointConfiguration get_BusEndpointConfiguration();
    public abstract virtual IRabbitMqTopologyConfiguration get_Topology();
    public abstract virtual IRabbitMqEndpointConfiguration CreateEndpointConfiguration(bool isBusEndpoint);
}
public interface MassTransit.RabbitMqTransport.Configuration.IRabbitMqConsumeTopologySpecification {
    public abstract virtual void Apply(IReceiveEndpointBrokerTopologyBuilder builder);
}
public interface MassTransit.RabbitMqTransport.Configuration.IRabbitMqEndpointConfiguration {
    public IRabbitMqTopologyConfiguration Topology { get; }
    public abstract virtual IRabbitMqTopologyConfiguration get_Topology();
}
public interface MassTransit.RabbitMqTransport.Configuration.IRabbitMqHostConfiguration {
    public IConnectionContextSupervisor ConnectionContextSupervisor { get; }
    public RabbitMqHostSettings Settings { get; public set; }
    public bool PublisherConfirmation { get; }
    public BatchSettings BatchSettings { get; }
    public IRabbitMqBusTopology Topology { get; }
    public abstract virtual IConnectionContextSupervisor get_ConnectionContextSupervisor();
    public abstract virtual RabbitMqHostSettings get_Settings();
    public abstract virtual void set_Settings(RabbitMqHostSettings value);
    public abstract virtual bool get_PublisherConfirmation();
    public abstract virtual BatchSettings get_BatchSettings();
    public abstract virtual IRabbitMqBusTopology get_Topology();
    public abstract virtual void ApplyEndpointDefinition(IRabbitMqReceiveEndpointConfigurator configurator, IEndpointDefinition definition);
    public abstract virtual IRabbitMqReceiveEndpointConfiguration CreateReceiveEndpointConfiguration(string queueName, Action`1<IRabbitMqReceiveEndpointConfigurator> configure);
    public abstract virtual IRabbitMqReceiveEndpointConfiguration CreateReceiveEndpointConfiguration(RabbitMqReceiveSettings settings, IRabbitMqEndpointConfiguration endpointConfiguration, Action`1<IRabbitMqReceiveEndpointConfigurator> configure);
}
public interface MassTransit.RabbitMqTransport.Configuration.IRabbitMqPublishTopologySpecification {
    public abstract virtual void Apply(IPublishEndpointBrokerTopologyBuilder builder);
}
public interface MassTransit.RabbitMqTransport.Configuration.IRabbitMqReceiveEndpointConfiguration {
    public ReceiveSettings Settings { get; }
    public abstract virtual ReceiveSettings get_Settings();
    public abstract virtual void Build(IHost host);
}
public interface MassTransit.RabbitMqTransport.Configuration.IRabbitMqTopologyConfiguration {
    public IRabbitMqPublishTopologyConfigurator Publish { get; }
    public IRabbitMqSendTopologyConfigurator Send { get; }
    public IRabbitMqConsumeTopologyConfigurator Consume { get; }
    public abstract virtual IRabbitMqPublishTopologyConfigurator get_Publish();
    public abstract virtual IRabbitMqSendTopologyConfigurator get_Send();
    public abstract virtual IRabbitMqConsumeTopologyConfigurator get_Consume();
}
public class MassTransit.RabbitMqTransport.Configuration.QueueBindingConfigurator : RabbitMqQueueConfigurator {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <BindingArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoutingKey>k__BackingField;
    public IDictionary`2<string, object> BindingArguments { get; }
    public string RoutingKey { get; public set; }
    protected QueueBindingConfigurator(string queueName, string exchangeType, bool durable, bool autoDelete);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_BindingArguments();
    public sealed virtual void SetBindingArgument(string key, object value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RoutingKey();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RoutingKey(string value);
    public void AutoDeleteAfter(TimeSpan duration);
}
internal class MassTransit.RabbitMqTransport.Configuration.RabbitMqBatchPublishConfigurator : object {
    private ConfigurationBatchSettings _settings;
    unknown bool Enabled {public set; }
    unknown int MessageLimit {public set; }
    unknown int SizeLimit {public set; }
    unknown TimeSpan Timeout {public set; }
    public RabbitMqBatchPublishConfigurator(ConfigurationBatchSettings settings);
    public sealed virtual void set_Enabled(bool value);
    public sealed virtual void set_MessageLimit(int value);
    public sealed virtual void set_SizeLimit(int value);
    public sealed virtual void set_Timeout(TimeSpan value);
}
public class MassTransit.RabbitMqTransport.Configuration.RabbitMqBusConfiguration : RabbitMqEndpointConfiguration {
    private BusObservable _busObservers;
    [CompilerGeneratedAttribute]
private IRabbitMqEndpointConfiguration <BusEndpointConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IRabbitMqHostConfiguration <HostConfiguration>k__BackingField;
    private IHostConfiguration MassTransit.Configuration.IBusConfiguration.HostConfiguration { get; }
    private IEndpointConfiguration MassTransit.Configuration.IBusConfiguration.BusEndpointConfiguration { get; }
    private IBusObserver MassTransit.Configuration.IBusConfiguration.BusObservers { get; }
    public IRabbitMqEndpointConfiguration BusEndpointConfiguration { get; }
    public IRabbitMqHostConfiguration HostConfiguration { get; }
    public RabbitMqBusConfiguration(IRabbitMqTopologyConfiguration topologyConfiguration);
    private sealed virtual override IHostConfiguration MassTransit.Configuration.IBusConfiguration.get_HostConfiguration();
    private sealed virtual override IEndpointConfiguration MassTransit.Configuration.IBusConfiguration.get_BusEndpointConfiguration();
    private sealed virtual override IBusObserver MassTransit.Configuration.IBusConfiguration.get_BusObservers();
    [CompilerGeneratedAttribute]
public sealed virtual IRabbitMqEndpointConfiguration get_BusEndpointConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IRabbitMqHostConfiguration get_HostConfiguration();
    public sealed virtual ConnectHandle ConnectBusObserver(IBusObserver observer);
    public sealed virtual ConnectHandle ConnectEndpointConfigurationObserver(IEndpointConfigurationObserver observer);
}
public class MassTransit.RabbitMqTransport.Configuration.RabbitMqBusFactoryConfigurator : BusFactoryConfigurator {
    [NullableAttribute("1")]
private IRabbitMqBusConfiguration _busConfiguration;
    [NullableAttribute("1")]
private IRabbitMqHostConfiguration _hostConfiguration;
    [NullableAttribute("1")]
private RabbitMqReceiveSettings _settings;
    unknown bool Durable {public set; }
    unknown bool Exclusive {public set; }
    unknown bool AutoDelete {public set; }
    [NullableAttribute("1")]
unknown string ExchangeType {public set; }
    unknown bool PurgeOnStartup {public set; }
    unknown int ConsumerPriority {public set; }
    unknown bool ExclusiveConsumer {public set; }
    unknown bool Lazy {public set; }
    unknown Nullable`1<TimeSpan> QueueExpiration {public set; }
    unknown bool SingleActiveConsumer {public set; }
    [NullableAttribute("1")]
public IRabbitMqSendTopologyConfigurator SendTopology { get; }
    [NullableAttribute("1")]
public IRabbitMqPublishTopologyConfigurator PublishTopology { get; }
    [NullableContextAttribute("1")]
public RabbitMqBusFactoryConfigurator(IRabbitMqBusConfiguration busConfiguration);
    [NullableContextAttribute("1")]
public sealed virtual IReceiveEndpointConfiguration CreateBusEndpointConfiguration(Action`1<IReceiveEndpointConfigurator> configure);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("MassTransit.RabbitMqTransport.Configuration.RabbitMqBusFactoryConfigurator/<Validate>d__5")]
public virtual IEnumerable`1<ValidationResult> Validate();
    public sealed virtual void set_Durable(bool value);
    public sealed virtual void set_Exclusive(bool value);
    public sealed virtual void set_AutoDelete(bool value);
    [NullableContextAttribute("1")]
public sealed virtual void set_ExchangeType(string value);
    public sealed virtual void set_PurgeOnStartup(bool value);
    public sealed virtual void set_ConsumerPriority(int value);
    public sealed virtual void set_ExclusiveConsumer(bool value);
    public sealed virtual void set_Lazy(bool value);
    public sealed virtual void set_QueueExpiration(Nullable`1<TimeSpan> value);
    public sealed virtual void set_SingleActiveConsumer(bool value);
    [NullableContextAttribute("1")]
public sealed virtual void SetQueueArgument(string key, object value);
    [NullableContextAttribute("1")]
public sealed virtual void SetQueueArgument(string key, TimeSpan value);
    [NullableContextAttribute("1")]
public sealed virtual void SetExchangeArgument(string key, object value);
    [NullableContextAttribute("1")]
public sealed virtual void SetExchangeArgument(string key, TimeSpan value);
    public sealed virtual void EnablePriority(byte maxPriority);
    public sealed virtual void SetQuorumQueue(Nullable`1<int> replicationFactor);
    [NullableContextAttribute("1")]
public sealed virtual void Host(RabbitMqHostSettings settings);
    [NullableContextAttribute("1")]
public sealed virtual void Send(Action`1<IRabbitMqMessageSendTopologyConfigurator`1<T>> configureTopology);
    [NullableContextAttribute("1")]
public sealed virtual void Publish(Action`1<IRabbitMqMessagePublishTopologyConfigurator`1<T>> configureTopology);
    [NullableContextAttribute("1")]
public sealed virtual void Publish(Type messageType, Action`1<IRabbitMqMessagePublishTopologyConfigurator> configure);
    [NullableContextAttribute("1")]
public sealed virtual IRabbitMqSendTopologyConfigurator get_SendTopology();
    [NullableContextAttribute("1")]
public sealed virtual IRabbitMqPublishTopologyConfigurator get_PublishTopology();
    [NullableContextAttribute("1")]
public sealed virtual void OverrideDefaultBusEndpointQueueName(string queueName);
    [NullableContextAttribute("1")]
public sealed virtual void ReceiveEndpoint(IEndpointDefinition definition, IEndpointNameFormatter endpointNameFormatter, Action`1<IRabbitMqReceiveEndpointConfigurator> configureEndpoint);
    [NullableContextAttribute("1")]
public sealed virtual void ReceiveEndpoint(IEndpointDefinition definition, IEndpointNameFormatter endpointNameFormatter, Action`1<IReceiveEndpointConfigurator> configureEndpoint);
    [NullableContextAttribute("1")]
public sealed virtual void ReceiveEndpoint(string queueName, Action`1<IRabbitMqReceiveEndpointConfigurator> configureEndpoint);
    [NullableContextAttribute("1")]
public sealed virtual void ReceiveEndpoint(string queueName, Action`1<IReceiveEndpointConfigurator> configureEndpoint);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ValidationResult> <>n__0();
}
public class MassTransit.RabbitMqTransport.Configuration.RabbitMqClusterConfigurator : object {
    private List`1<ClusterNode> _nodes;
    private RabbitMqHostSettings _settings;
    public ClusterNode[] ClusterMembers { get; }
    public RabbitMqClusterConfigurator(RabbitMqHostSettings settings);
    public ClusterNode[] get_ClusterMembers();
    public sealed virtual void Node(string nodeAddress);
    public IRabbitMqEndpointResolver GetEndpointResolver();
}
public class MassTransit.RabbitMqTransport.Configuration.RabbitMqEndpointConfiguration : EndpointConfiguration {
    [CompilerGeneratedAttribute]
private IRabbitMqTopologyConfiguration <Topology>k__BackingField;
    public IRabbitMqTopologyConfiguration Topology { get; }
    public RabbitMqEndpointConfiguration(IRabbitMqTopologyConfiguration topologyConfiguration);
    private RabbitMqEndpointConfiguration(IEndpointConfiguration parentConfiguration, IRabbitMqTopologyConfiguration topologyConfiguration, bool isBusEndpoint);
    [CompilerGeneratedAttribute]
public sealed virtual IRabbitMqTopologyConfiguration get_Topology();
    public sealed virtual IRabbitMqEndpointConfiguration CreateEndpointConfiguration(bool isBusEndpoint);
}
public abstract class MassTransit.RabbitMqTransport.Configuration.RabbitMqExchangeBindingConfigurator : RabbitMqExchangeConfigurator {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <BindingArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoutingKey>k__BackingField;
    public IDictionary`2<string, object> BindingArguments { get; }
    public string RoutingKey { get; public set; }
    protected RabbitMqExchangeBindingConfigurator(string exchangeName, string exchangeType, bool durable, bool autoDelete, string routingKey);
    protected RabbitMqExchangeBindingConfigurator(Exchange exchange, string routingKey);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_BindingArguments();
    public sealed virtual void SetBindingArgument(string key, object value);
    [CompilerGeneratedAttribute]
public string get_RoutingKey();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RoutingKey(string value);
}
public class MassTransit.RabbitMqTransport.Configuration.RabbitMqExchangeConfigurator : object {
    [CompilerGeneratedAttribute]
private string <ExchangeName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <ExchangeArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExchangeType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Durable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoDelete>k__BackingField;
    public string ExchangeName { get; public set; }
    public IDictionary`2<string, object> ExchangeArguments { get; }
    public string ExchangeType { get; public set; }
    public bool Durable { get; public set; }
    public bool AutoDelete { get; public set; }
    public RabbitMqExchangeConfigurator(string exchangeName, string exchangeType, bool durable, bool autoDelete);
    public RabbitMqExchangeConfigurator(Exchange source);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ExchangeName();
    [CompilerGeneratedAttribute]
public void set_ExchangeName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_ExchangeArguments();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ExchangeType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExchangeType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Durable();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Durable(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutoDelete();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AutoDelete(bool value);
    public sealed virtual void SetExchangeArgument(string key, object value);
    public sealed virtual void SetExchangeArgument(string key, TimeSpan value);
    public virtual RabbitMqEndpointAddress GetEndpointAddress(Uri hostAddress);
}
public class MassTransit.RabbitMqTransport.Configuration.RabbitMqHostConfiguration : BaseHostConfiguration`2<IRabbitMqReceiveEndpointConfiguration, IRabbitMqReceiveEndpointConfigurator> {
    private IRabbitMqBusConfiguration _busConfiguration;
    private Recycle`1<IConnectionContextSupervisor> _connectionContext;
    private IRabbitMqBusTopology _topology;
    private RabbitMqHostSettings _hostSettings;
    [CompilerGeneratedAttribute]
private IRetryPolicy <ReceiveTransportRetryPolicy>k__BackingField;
    public IConnectionContextSupervisor ConnectionContextSupervisor { get; }
    public Uri HostAddress { get; }
    public bool PublisherConfirmation { get; }
    public BatchSettings BatchSettings { get; }
    private IRabbitMqBusTopology MassTransit.RabbitMqTransport.Configuration.IRabbitMqHostConfiguration.Topology { get; }
    public IRetryPolicy ReceiveTransportRetryPolicy { get; }
    public IBusTopology Topology { get; }
    public RabbitMqHostSettings Settings { get; public set; }
    public RabbitMqHostConfiguration(IRabbitMqBusConfiguration busConfiguration, IRabbitMqTopologyConfiguration topologyConfiguration);
    public sealed virtual IConnectionContextSupervisor get_ConnectionContextSupervisor();
    public virtual Uri get_HostAddress();
    public sealed virtual bool get_PublisherConfirmation();
    public sealed virtual BatchSettings get_BatchSettings();
    private sealed virtual override IRabbitMqBusTopology MassTransit.RabbitMqTransport.Configuration.IRabbitMqHostConfiguration.get_Topology();
    [CompilerGeneratedAttribute]
public virtual IRetryPolicy get_ReceiveTransportRetryPolicy();
    public virtual IBusTopology get_Topology();
    public sealed virtual RabbitMqHostSettings get_Settings();
    public sealed virtual void set_Settings(RabbitMqHostSettings value);
    public sealed virtual void ApplyEndpointDefinition(IRabbitMqReceiveEndpointConfigurator configurator, IEndpointDefinition definition);
    public sealed virtual IRabbitMqReceiveEndpointConfiguration CreateReceiveEndpointConfiguration(string queueName, Action`1<IRabbitMqReceiveEndpointConfigurator> configure);
    public sealed virtual IRabbitMqReceiveEndpointConfiguration CreateReceiveEndpointConfiguration(RabbitMqReceiveSettings settings, IRabbitMqEndpointConfiguration endpointConfiguration, Action`1<IRabbitMqReceiveEndpointConfigurator> configure);
    public virtual void ReceiveEndpoint(IEndpointDefinition definition, IEndpointNameFormatter endpointNameFormatter, Action`1<IRabbitMqReceiveEndpointConfigurator> configureEndpoint);
    public virtual void ReceiveEndpoint(string queueName, Action`1<IRabbitMqReceiveEndpointConfigurator> configureEndpoint);
    [IteratorStateMachineAttribute("MassTransit.RabbitMqTransport.Configuration.RabbitMqHostConfiguration/<Validate>d__28")]
public virtual IEnumerable`1<ValidationResult> Validate();
    public virtual IReceiveEndpointConfiguration CreateReceiveEndpointConfiguration(string queueName, Action`1<IReceiveEndpointConfigurator> configure);
    public virtual IHost Build();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ValidationResult> <>n__0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.RabbitMqTransport.Configuration.RabbitMqHostConfigurator : object {
    private static Char[] _pathSeparator;
    private ConfigurationHostSettings _settings;
    public RabbitMqHostSettings Settings { get; }
    unknown bool PublisherConfirmation {public set; }
    unknown RefreshConnectionFactoryCallback OnRefreshConnectionFactory {public set; }
    unknown ICredentialsProvider CredentialsProvider {public set; }
    unknown ICredentialsRefresher CredentialsRefresher {public set; }
    public RabbitMqHostConfigurator(Uri hostAddress, string connectionName);
    public RabbitMqHostConfigurator(string host, string virtualHost, ushort port, string connectionName);
    private static RabbitMqHostConfigurator();
    public RabbitMqHostSettings get_Settings();
    public sealed virtual void set_PublisherConfirmation(bool value);
    public sealed virtual void UseSsl(Action`1<IRabbitMqSslConfigurator> configure);
    public sealed virtual void ConfigureBatchPublish(Action`1<IRabbitMqBatchPublishConfigurator> configure);
    public sealed virtual void ContinuationTimeout(TimeSpan timeout);
    public sealed virtual void MaxMessageSize(UInt32 maxMessageSize);
    public sealed virtual void set_OnRefreshConnectionFactory(RefreshConnectionFactoryCallback value);
    public sealed virtual void Heartbeat(ushort requestedHeartbeat);
    public sealed virtual void Heartbeat(TimeSpan timeSpan);
    public sealed virtual void Username(string username);
    public sealed virtual void Password(string password);
    public sealed virtual void set_CredentialsProvider(ICredentialsProvider value);
    public sealed virtual void set_CredentialsRefresher(ICredentialsRefresher value);
    public sealed virtual void UseCluster(Action`1<IRabbitMqClusterConfigurator> configureCluster);
    public sealed virtual void RequestedChannelMax(ushort value);
    public sealed virtual void RequestedConnectionTimeout(int milliseconds);
    public sealed virtual void RequestedConnectionTimeout(TimeSpan timeSpan);
    [NullableContextAttribute("2")]
public sealed virtual void ConnectionName(string connectionName);
    private string GetVirtualHost(Uri address);
}
public class MassTransit.RabbitMqTransport.Configuration.RabbitMqQueueConfigurator : RabbitMqExchangeConfigurator {
    [CompilerGeneratedAttribute]
private bool <Exclusive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueueName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <QueueArguments>k__BackingField;
    unknown bool SingleActiveConsumer {public set; }
    unknown bool Lazy {public set; }
    public bool Exclusive { get; public set; }
    public Nullable`1<TimeSpan> QueueExpiration { get; public set; }
    public string QueueName { get; public set; }
    public IDictionary`2<string, object> QueueArguments { get; }
    protected RabbitMqQueueConfigurator(string queueName, string exchangeType, bool durable, bool autoDelete);
    public sealed virtual void SetQuorumQueue(Nullable`1<int> replicationFactor);
    public sealed virtual void set_SingleActiveConsumer(bool value);
    public sealed virtual void SetQueueArgument(string key, object value);
    public sealed virtual void SetQueueArgument(string key, TimeSpan value);
    public sealed virtual void set_Lazy(bool value);
    public sealed virtual void EnablePriority(byte maxPriority);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Exclusive();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Exclusive(bool value);
    public sealed virtual Nullable`1<TimeSpan> get_QueueExpiration();
    public sealed virtual void set_QueueExpiration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_QueueName();
    [CompilerGeneratedAttribute]
public void set_QueueName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_QueueArguments();
    public virtual RabbitMqEndpointAddress GetEndpointAddress(Uri hostAddress);
}
public class MassTransit.RabbitMqTransport.Configuration.RabbitMqReceiveEndpointBuilder : ReceiveEndpointBuilder {
    private IRabbitMqReceiveEndpointConfiguration _configuration;
    private IRabbitMqHostConfiguration _hostConfiguration;
    public RabbitMqReceiveEndpointBuilder(IRabbitMqHostConfiguration hostConfiguration, IRabbitMqReceiveEndpointConfiguration configuration);
    public virtual ConnectHandle ConnectConsumePipe(IPipe`1<ConsumeContext`1<T>> pipe, ConnectPipeOptions options);
    public RabbitMqReceiveEndpointContext CreateReceiveEndpointContext();
    private IErrorTransport CreateErrorTransport();
    private IDeadLetterTransport CreateDeadLetterTransport();
    private BrokerTopology BuildTopology(ReceiveSettings settings);
}
public class MassTransit.RabbitMqTransport.Configuration.RabbitMqReceiveEndpointConfiguration : ReceiveEndpointConfiguration {
    private IBuildPipeConfigurator`1<ConnectionContext> _connectionConfigurator;
    private IRabbitMqEndpointConfiguration _endpointConfiguration;
    private IRabbitMqHostConfiguration _hostConfiguration;
    private Lazy`1<Uri> _inputAddress;
    private IBuildPipeConfigurator`1<ModelContext> _modelConfigurator;
    private RabbitMqReceiveSettings _settings;
    public ReceiveSettings Settings { get; }
    public Uri HostAddress { get; }
    public Uri InputAddress { get; }
    private IRabbitMqTopologyConfiguration MassTransit.RabbitMqTransport.Configuration.IRabbitMqEndpointConfiguration.Topology { get; }
    unknown bool Durable {public set; }
    unknown bool Exclusive {public set; }
    unknown bool AutoDelete {public set; }
    unknown string ExchangeType {public set; }
    unknown bool PurgeOnStartup {public set; }
    unknown int ConsumerPriority {public set; }
    unknown bool ExclusiveConsumer {public set; }
    unknown bool Lazy {public set; }
    unknown bool BindQueue {public set; }
    unknown Nullable`1<TimeSpan> QueueExpiration {public set; }
    unknown bool SingleActiveConsumer {public set; }
    unknown string DeadLetterExchange {public set; }
    public RabbitMqReceiveEndpointConfiguration(IRabbitMqHostConfiguration hostConfiguration, RabbitMqReceiveSettings settings, IRabbitMqEndpointConfiguration endpointConfiguration);
    public sealed virtual ReceiveSettings get_Settings();
    public virtual Uri get_HostAddress();
    public virtual Uri get_InputAddress();
    public virtual ReceiveEndpointContext CreateReceiveEndpointContext();
    private sealed virtual override IRabbitMqTopologyConfiguration MassTransit.RabbitMqTransport.Configuration.IRabbitMqEndpointConfiguration.get_Topology();
    public sealed virtual void Build(IHost host);
    [IteratorStateMachineAttribute("MassTransit.RabbitMqTransport.Configuration.RabbitMqReceiveEndpointConfiguration/<Validate>d__17")]
public virtual IEnumerable`1<ValidationResult> Validate();
    public sealed virtual void set_Durable(bool value);
    public sealed virtual void set_Exclusive(bool value);
    public sealed virtual void set_AutoDelete(bool value);
    public sealed virtual void set_ExchangeType(string value);
    public sealed virtual void set_PurgeOnStartup(bool value);
    public sealed virtual void set_ConsumerPriority(int value);
    public sealed virtual void set_ExclusiveConsumer(bool value);
    public sealed virtual void Stream(Action`1<IRabbitMqStreamConfigurator> callback);
    public sealed virtual void Stream(string consumerTag, Action`1<IRabbitMqStreamConfigurator> callback);
    public sealed virtual void set_Lazy(bool value);
    public sealed virtual void set_BindQueue(bool value);
    public sealed virtual void set_QueueExpiration(Nullable`1<TimeSpan> value);
    public sealed virtual void set_SingleActiveConsumer(bool value);
    public sealed virtual void set_DeadLetterExchange(string value);
    public sealed virtual void SetQueueArgument(string key, object value);
    public sealed virtual void SetQueueArgument(string key, TimeSpan value);
    public sealed virtual void SetExchangeArgument(string key, object value);
    public sealed virtual void SetExchangeArgument(string key, TimeSpan value);
    public sealed virtual void EnablePriority(byte maxPriority);
    public sealed virtual void SetQuorumQueue(Nullable`1<int> replicationFactor);
    public sealed virtual void Bind(string exchangeName, Action`1<IRabbitMqExchangeToExchangeBindingConfigurator> callback);
    public sealed virtual void Bind(Action`1<IRabbitMqExchangeBindingConfigurator> callback);
    public sealed virtual void BindDeadLetterQueue(string exchangeName, string queueName, Action`1<IRabbitMqQueueBindingConfigurator> configure);
    public sealed virtual void ConfigureModel(Action`1<IPipeConfigurator`1<ModelContext>> configure);
    public sealed virtual void ConfigureConnection(Action`1<IPipeConfigurator`1<ConnectionContext>> configure);
    public sealed virtual void OverrideConsumerTag(string consumerTag);
    private RabbitMqReceiveEndpointContext CreateRabbitMqReceiveEndpointContext();
    private Uri FormatInputAddress();
    protected virtual bool IsAlreadyConfigured();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ValidationResult> <>n__0();
}
public class MassTransit.RabbitMqTransport.Configuration.RabbitMqReceiveSettings : QueueBindingConfigurator {
    private IRabbitMqEndpointConfiguration _configuration;
    [CompilerGeneratedAttribute]
private bool <PurgeOnStartup>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExclusiveConsumer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoAck>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BindQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <ConsumeArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumerTag>k__BackingField;
    unknown int ConsumerPriority {public set; }
    public ushort PrefetchCount { get; public set; }
    public bool PurgeOnStartup { get; public set; }
    public bool ExclusiveConsumer { get; public set; }
    public bool NoAck { get; public set; }
    public bool BindQueue { get; public set; }
    public IDictionary`2<string, object> ConsumeArguments { get; }
    public string ConsumerTag { get; public set; }
    public RabbitMqReceiveSettings(IRabbitMqEndpointConfiguration configuration, string name, string type, bool durable, bool autoDelete);
    public void set_ConsumerPriority(int value);
    public sealed virtual ushort get_PrefetchCount();
    public void set_PrefetchCount(ushort value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PurgeOnStartup();
    [CompilerGeneratedAttribute]
public void set_PurgeOnStartup(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ExclusiveConsumer();
    [CompilerGeneratedAttribute]
public void set_ExclusiveConsumer(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NoAck();
    [CompilerGeneratedAttribute]
public void set_NoAck(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_BindQueue();
    [CompilerGeneratedAttribute]
public void set_BindQueue(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_ConsumeArguments();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConsumerTag();
    [CompilerGeneratedAttribute]
public void set_ConsumerTag(string value);
    public sealed virtual Uri GetInputAddress(Uri hostAddress);
}
public class MassTransit.RabbitMqTransport.Configuration.RabbitMqRegistrationBusFactory : TransportRegistrationBusFactory`1<IRabbitMqReceiveEndpointConfigurator> {
    private RabbitMqBusConfiguration _busConfiguration;
    private Action`2<IBusRegistrationContext, IRabbitMqBusFactoryConfigurator> _configure;
    public RabbitMqRegistrationBusFactory(Action`2<IBusRegistrationContext, IRabbitMqBusFactoryConfigurator> configure);
    private RabbitMqRegistrationBusFactory(RabbitMqBusConfiguration busConfiguration, Action`2<IBusRegistrationContext, IRabbitMqBusFactoryConfigurator> configure);
    public virtual IBusInstance CreateBus(IBusRegistrationContext context, IEnumerable`1<IBusInstanceSpecification> specifications, string busName);
}
public class MassTransit.RabbitMqTransport.Configuration.RabbitMqSslConfigurator : object {
    [CompilerGeneratedAttribute]
private SslPolicyErrors <AcceptablePolicyErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertificatePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertificatePassphrase>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private SslProtocols <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCertificateAsAuthenticationIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalCertificateSelectionCallback <CertificateSelectionCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <CertificateValidationCallback>k__BackingField;
    public SslPolicyErrors AcceptablePolicyErrors { get; public set; }
    public string CertificatePath { get; public set; }
    public string CertificatePassphrase { get; public set; }
    public X509Certificate Certificate { get; public set; }
    public string ServerName { get; public set; }
    public SslProtocols Protocol { get; public set; }
    public bool UseCertificateAsAuthenticationIdentity { get; public set; }
    public LocalCertificateSelectionCallback CertificateSelectionCallback { get; public set; }
    public RemoteCertificateValidationCallback CertificateValidationCallback { get; public set; }
    public RabbitMqSslConfigurator(RabbitMqHostSettings settings);
    [CompilerGeneratedAttribute]
public SslPolicyErrors get_AcceptablePolicyErrors();
    [CompilerGeneratedAttribute]
public void set_AcceptablePolicyErrors(SslPolicyErrors value);
    public sealed virtual void AllowPolicyErrors(SslPolicyErrors policyErrors);
    public sealed virtual void EnforcePolicyErrors(SslPolicyErrors policyErrors);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CertificatePath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CertificatePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CertificatePassphrase();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CertificatePassphrase(string value);
    [CompilerGeneratedAttribute]
public sealed virtual X509Certificate get_Certificate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Certificate(X509Certificate value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ServerName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ServerName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual SslProtocols get_Protocol();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Protocol(SslProtocols value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseCertificateAsAuthenticationIdentity();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseCertificateAsAuthenticationIdentity(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual LocalCertificateSelectionCallback get_CertificateSelectionCallback();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CertificateSelectionCallback(LocalCertificateSelectionCallback value);
    [CompilerGeneratedAttribute]
public sealed virtual RemoteCertificateValidationCallback get_CertificateValidationCallback();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CertificateValidationCallback(RemoteCertificateValidationCallback value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.RabbitMqTransport.Configuration.RabbitMqStreamConfigurator : object {
    private static DateTimeTypeConverter _dateTimeConverter;
    private RabbitMqReceiveSettings _settings;
    unknown long MaxLength {public set; }
    unknown TimeSpan MaxAge {public set; }
    unknown long MaxSegmentSize {public set; }
    public RabbitMqStreamConfigurator(RabbitMqReceiveSettings settings);
    private static RabbitMqStreamConfigurator();
    public sealed virtual void set_MaxLength(long value);
    public sealed virtual void set_MaxAge(TimeSpan value);
    public sealed virtual void set_MaxSegmentSize(long value);
    public sealed virtual void FromOffset(long offset);
    public sealed virtual void FromTimestamp(DateTime timestamp);
    public sealed virtual void FromFirst();
    public sealed virtual void FromLast();
}
public class MassTransit.RabbitMqTransport.Configuration.RabbitMqTopologyConfiguration : object {
    private IRabbitMqConsumeTopologyConfigurator _consumeTopology;
    private IMessageTopologyConfigurator _messageTopology;
    private IRabbitMqPublishTopologyConfigurator _publishTopology;
    private IRabbitMqSendTopologyConfigurator _sendTopology;
    private IMessageTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.Message { get; }
    private ISendTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.Send { get; }
    private IPublishTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.Publish { get; }
    private IConsumeTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.Consume { get; }
    private IRabbitMqPublishTopologyConfigurator MassTransit.RabbitMqTransport.Configuration.IRabbitMqTopologyConfiguration.Publish { get; }
    private IRabbitMqSendTopologyConfigurator MassTransit.RabbitMqTransport.Configuration.IRabbitMqTopologyConfiguration.Send { get; }
    private IRabbitMqConsumeTopologyConfigurator MassTransit.RabbitMqTransport.Configuration.IRabbitMqTopologyConfiguration.Consume { get; }
    public RabbitMqTopologyConfiguration(IMessageTopologyConfigurator messageTopology);
    public RabbitMqTopologyConfiguration(IRabbitMqTopologyConfiguration topologyConfiguration);
    private sealed virtual override IMessageTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.get_Message();
    private sealed virtual override ISendTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.get_Send();
    private sealed virtual override IPublishTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.get_Publish();
    private sealed virtual override IConsumeTopologyConfigurator MassTransit.Configuration.ITopologyConfiguration.get_Consume();
    private sealed virtual override IRabbitMqPublishTopologyConfigurator MassTransit.RabbitMqTransport.Configuration.IRabbitMqTopologyConfiguration.get_Publish();
    private sealed virtual override IRabbitMqSendTopologyConfigurator MassTransit.RabbitMqTransport.Configuration.IRabbitMqTopologyConfiguration.get_Send();
    private sealed virtual override IRabbitMqConsumeTopologyConfigurator MassTransit.RabbitMqTransport.Configuration.IRabbitMqTopologyConfiguration.get_Consume();
    public sealed virtual IEnumerable`1<ValidationResult> Validate();
}
public interface MassTransit.RabbitMqTransport.ConnectionContext {
    public IConnection Connection { get; }
    public string Description { get; }
    public Uri HostAddress { get; }
    public bool PublisherConfirmation { get; }
    public BatchSettings BatchSettings { get; }
    public TimeSpan ContinuationTimeout { get; }
    public TimeSpan StopTimeout { get; }
    public IRabbitMqBusTopology Topology { get; }
    public abstract virtual IConnection get_Connection();
    public abstract virtual string get_Description();
    public abstract virtual Uri get_HostAddress();
    public abstract virtual bool get_PublisherConfirmation();
    public abstract virtual BatchSettings get_BatchSettings();
    public abstract virtual TimeSpan get_ContinuationTimeout();
    public abstract virtual TimeSpan get_StopTimeout();
    public abstract virtual IRabbitMqBusTopology get_Topology();
    public abstract virtual Task`1<IModel> CreateModel(CancellationToken cancellationToken);
    public abstract virtual Task`1<ModelContext> CreateModelContext(CancellationToken cancellationToken);
}
public class MassTransit.RabbitMqTransport.ConnectionContextFactory : object {
    private Lazy`1<ConnectionFactory> _connectionFactory;
    private IRabbitMqHostConfiguration _hostConfiguration;
    public ConnectionContextFactory(IRabbitMqHostConfiguration hostConfiguration);
    private sealed virtual override IPipeContextAgent`1<ConnectionContext> MassTransit.Agents.IPipeContextFactory<MassTransit.RabbitMqTransport.ConnectionContext>.CreateContext(ISupervisor supervisor);
    private sealed virtual override IActivePipeContextAgent`1<ConnectionContext> MassTransit.Agents.IPipeContextFactory<MassTransit.RabbitMqTransport.ConnectionContext>.CreateActiveContext(ISupervisor supervisor, PipeContextHandle`1<ConnectionContext> context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.ConnectionContextFactory/<CreateSharedConnection>d__5")]
private static Task`1<ConnectionContext> CreateSharedConnection(Task`1<ConnectionContext> context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.ConnectionContextFactory/<CreateConnection>d__6")]
private Task`1<ConnectionContext> CreateConnection(ISupervisor supervisor);
    [CompilerGeneratedAttribute]
private ConnectionFactory <.ctor>b__2_0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private RabbitMqHostSettings <CreateConnection>b__6_0();
}
public class MassTransit.RabbitMqTransport.ConnectionContextSupervisor : TransportPipeContextSupervisor`1<ConnectionContext> {
    private IRabbitMqHostConfiguration _hostConfiguration;
    private IRabbitMqTopologyConfiguration _topologyConfiguration;
    public ConnectionContextSupervisor(IRabbitMqHostConfiguration hostConfiguration, IRabbitMqTopologyConfiguration topologyConfiguration);
    public sealed virtual Uri NormalizeAddress(Uri address);
    public sealed virtual Task`1<ISendTransport> CreateSendTransport(RabbitMqReceiveEndpointContext receiveEndpointContext, IModelContextSupervisor modelContextSupervisor, Uri address);
    public sealed virtual Task`1<ISendTransport> CreatePublishTransport(RabbitMqReceiveEndpointContext receiveEndpointContext, IModelContextSupervisor modelContextSupervisor);
    private Task`1<ISendTransport> CreateSendTransport(ReceiveEndpointContext receiveEndpointContext, IModelContextSupervisor modelContextSupervisor, ConfigureRabbitMqTopologyFilter`1<SendSettings> filter, string exchangeName, RabbitMqEndpointAddress endpointAddress);
}
public interface MassTransit.RabbitMqTransport.Contracts.PrefetchCountUpdated {
    public DateTime Timestamp { get; }
    public string QueueName { get; }
    public ushort PrefetchCount { get; }
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual string get_QueueName();
    public abstract virtual ushort get_PrefetchCount();
}
public interface MassTransit.RabbitMqTransport.DeadLetterSettings {
    public abstract virtual BrokerTopology GetBrokerTopology();
}
public interface MassTransit.RabbitMqTransport.DelaySettings {
    public abstract virtual RabbitMqEndpointAddress GetSendAddress(Uri hostAddress);
    public abstract virtual BrokerTopology GetBrokerTopology();
}
public interface MassTransit.RabbitMqTransport.EntitySettings {
    public bool Durable { get; }
    public bool AutoDelete { get; }
    public IDictionary`2<string, object> ExchangeArguments { get; }
    public string ExchangeName { get; }
    public string ExchangeType { get; }
    public abstract virtual bool get_Durable();
    public abstract virtual bool get_AutoDelete();
    public abstract virtual IDictionary`2<string, object> get_ExchangeArguments();
    public abstract virtual string get_ExchangeName();
    public abstract virtual string get_ExchangeType();
}
public interface MassTransit.RabbitMqTransport.ErrorSettings {
    public abstract virtual BrokerTopology GetBrokerTopology();
}
public interface MassTransit.RabbitMqTransport.IConnectionContextSupervisor {
    public abstract virtual Uri NormalizeAddress(Uri address);
    public abstract virtual Task`1<ISendTransport> CreateSendTransport(RabbitMqReceiveEndpointContext receiveEndpointContext, IModelContextSupervisor modelContextSupervisor, Uri address);
    public abstract virtual Task`1<ISendTransport> CreatePublishTransport(RabbitMqReceiveEndpointContext receiveEndpointContext, IModelContextSupervisor modelContextSupervisor);
}
public class MassTransit.RabbitMqTransport.ImmediatePublisher : object {
    private PendingConfirmationCollection _confirmations;
    private TaskExecutor _executor;
    private IModel _model;
    public ImmediatePublisher(TaskExecutor executor, IModel model, PendingConfirmationCollection confirmations);
    public sealed virtual Task Publish(string exchange, string routingKey, bool mandatory, IBasicProperties basicProperties, Byte[] body, bool awaitAck);
    public sealed virtual ValueTask DisposeAsync();
}
public interface MassTransit.RabbitMqTransport.IModelContextSupervisor {
}
public interface MassTransit.RabbitMqTransport.IPendingConfirmation {
    public ulong PublishTag { get; }
    public Task Confirmed { get; }
    public abstract virtual ulong get_PublishTag();
    public abstract virtual Task get_Confirmed();
    public abstract virtual void Acknowledged();
    public abstract virtual void NotAcknowledged();
    public abstract virtual void NotConfirmed(Exception exception);
    public abstract virtual void NotConfirmed(string reason);
    public abstract virtual void Returned(ushort code, string text);
}
public interface MassTransit.RabbitMqTransport.IPublisher {
    public abstract virtual Task Publish(string exchange, string routingKey, bool mandatory, IBasicProperties basicProperties, Byte[] body, bool awaitAck);
}
public interface MassTransit.RabbitMqTransport.IRabbitMqEndpointResolver {
    public ClusterNode LastHost { get; }
    public abstract virtual ClusterNode get_LastHost();
}
public interface MassTransit.RabbitMqTransport.IRabbitMqHost {
}
public class MassTransit.RabbitMqTransport.MessageExchangeTypeSelector`1 : object {
    private IExchangeTypeSelector _exchangeTypeSelector;
    public string DefaultExchangeType { get; }
    public MessageExchangeTypeSelector`1(IExchangeTypeSelector exchangeTypeSelector);
    public sealed virtual string get_DefaultExchangeType();
    public sealed virtual string GetExchangeType(string exchangeName);
}
public class MassTransit.RabbitMqTransport.Middleware.ConfigureRabbitMqTopologyFilter`1 : object {
    private BrokerTopology _brokerTopology;
    private TSettings _settings;
    public ConfigureRabbitMqTopologyFilter`1(TSettings settings, BrokerTopology brokerTopology);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.Middleware.ConfigureRabbitMqTopologyFilter`1/<Send>d__3")]
public sealed virtual Task Send(ModelContext context, IPipe`1<ModelContext> next);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.Middleware.ConfigureRabbitMqTopologyFilter`1/<Configure>d__4")]
public Task`1<OneTimeContext`1<ConfigureTopologyContext`1<TSettings>>> Configure(ModelContext context);
    public sealed virtual void Probe(ProbeContext context);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.Middleware.ConfigureRabbitMqTopologyFilter`1/<ConfigureTopology>d__6")]
private Task ConfigureTopology(ModelContext context);
    private static Task Declare(ModelContext context, Exchange exchange);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.Middleware.ConfigureRabbitMqTopologyFilter`1/<Declare>d__8")]
private static Task Declare(ModelContext context, Queue queue);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.Middleware.ConfigureRabbitMqTopologyFilter`1/<Bind>d__9")]
private static Task Bind(ModelContext context, ExchangeToExchangeBinding binding);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.Middleware.ConfigureRabbitMqTopologyFilter`1/<Bind>d__10")]
private static Task Bind(ModelContext context, ExchangeToQueueBinding binding);
}
public interface MassTransit.RabbitMqTransport.Middleware.ConfigureTopologyContext`1 {
}
public class MassTransit.RabbitMqTransport.Middleware.PrefetchCountFilter : object {
    private ushort _prefetchCount;
    public PrefetchCountFilter(ushort prefetchCount);
    private sealed virtual override void MassTransit.IProbeSite.Probe(ProbeContext context);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.Middleware.PrefetchCountFilter/<MassTransit-IFilter<MassTransit-RabbitMqTransport-ModelContext>-Send>d__3")]
private sealed virtual override Task MassTransit.IFilter<MassTransit.RabbitMqTransport.ModelContext>.Send(ModelContext context, IPipe`1<ModelContext> next);
    public Task SetPrefetchCount(ushort prefetchCount);
}
public class MassTransit.RabbitMqTransport.Middleware.PurgeOnStartupFilter : object {
    private string _queueName;
    private bool _queueAlreadyPurged;
    public PurgeOnStartupFilter(string queueName);
    private sealed virtual override void MassTransit.IProbeSite.Probe(ProbeContext context);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.Middleware.PurgeOnStartupFilter/<MassTransit-IFilter<MassTransit-RabbitMqTransport-ModelContext>-Send>d__4")]
private sealed virtual override Task MassTransit.IFilter<MassTransit.RabbitMqTransport.ModelContext>.Send(ModelContext context, IPipe`1<ModelContext> next);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.Middleware.PurgeOnStartupFilter/<PurgeIfRequested>d__5")]
private Task PurgeIfRequested(ModelContext context, QueueDeclareOk queueOk, string queueName);
}
public class MassTransit.RabbitMqTransport.Middleware.RabbitMqConsumerFilter : object {
    private RabbitMqReceiveEndpointContext _context;
    private string _consumerTag;
    public RabbitMqConsumerFilter(RabbitMqReceiveEndpointContext context);
    private sealed virtual override void MassTransit.IProbeSite.Probe(ProbeContext context);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.Middleware.RabbitMqConsumerFilter/<MassTransit-IFilter<MassTransit-RabbitMqTransport-ModelContext>-Send>d__4")]
private sealed virtual override Task MassTransit.IFilter<MassTransit.RabbitMqTransport.ModelContext>.Send(ModelContext context, IPipe`1<ModelContext> next);
}
public interface MassTransit.RabbitMqTransport.ModelContext {
    public IModel Model { get; }
    public ConnectionContext ConnectionContext { get; }
    public abstract virtual IModel get_Model();
    public abstract virtual ConnectionContext get_ConnectionContext();
    public abstract virtual Task BasicPublishAsync(string exchange, string routingKey, bool mandatory, IBasicProperties basicProperties, Byte[] body, bool awaitAck);
    public abstract virtual Task ExchangeBind(string destination, string source, string routingKey, IDictionary`2<string, object> arguments);
    public abstract virtual Task ExchangeDeclare(string exchange, string type, bool durable, bool autoDelete, IDictionary`2<string, object> arguments);
    public abstract virtual Task ExchangeDeclarePassive(string exchange);
    public abstract virtual Task QueueBind(string queue, string exchange, string routingKey, IDictionary`2<string, object> arguments);
    public abstract virtual Task`1<QueueDeclareOk> QueueDeclare(string queue, bool durable, bool exclusive, bool autoDelete, IDictionary`2<string, object> arguments);
    public abstract virtual Task`1<QueueDeclareOk> QueueDeclarePassive(string queue);
    public abstract virtual Task`1<UInt32> QueuePurge(string queue);
    public abstract virtual Task BasicQos(UInt32 prefetchSize, ushort prefetchCount, bool global);
    public abstract virtual Task BasicAck(ulong deliveryTag, bool multiple);
    public abstract virtual Task BasicNack(ulong deliveryTag, bool multiple, bool requeue);
    public abstract virtual Task`1<string> BasicConsume(string queue, bool noAck, bool exclusive, IDictionary`2<string, object> arguments, IBasicConsumer consumer, string consumerTag);
    public abstract virtual Task BasicCancel(string consumerTag);
}
public class MassTransit.RabbitMqTransport.ModelContextFactory : object {
    private IConnectionContextSupervisor _supervisor;
    public ModelContextFactory(IConnectionContextSupervisor supervisor);
    private sealed virtual override IPipeContextAgent`1<ModelContext> MassTransit.Agents.IPipeContextFactory<MassTransit.RabbitMqTransport.ModelContext>.CreateContext(ISupervisor supervisor);
    private sealed virtual override IActivePipeContextAgent`1<ModelContext> MassTransit.Agents.IPipeContextFactory<MassTransit.RabbitMqTransport.ModelContext>.CreateActiveContext(ISupervisor supervisor, PipeContextHandle`1<ModelContext> context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.ModelContextFactory/<CreateSharedModel>d__4")]
private static Task`1<ModelContext> CreateSharedModel(Task`1<ModelContext> context, CancellationToken cancellationToken);
    private Task`1<ModelContext> CreateModel(IAsyncPipeContextAgent`1<ModelContext> asyncContext, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static Task`1<ModelContext> <CreateModel>g__CreateModelContext|5_0(ConnectionContext connectionContext, CancellationToken createCancellationToken);
}
public class MassTransit.RabbitMqTransport.ModelContextSupervisor : TransportPipeContextSupervisor`1<ModelContext> {
    public ModelContextSupervisor(IConnectionContextSupervisor connectionContextSupervisor);
    public ModelContextSupervisor(IModelContextSupervisor modelContextSupervisor);
}
public class MassTransit.RabbitMqTransport.MoveTransportHeaders : object {
    private IBasicProperties _basicProperties;
    public MoveTransportHeaders(IBasicProperties basicProperties);
    public sealed virtual void Set(string key, string value);
    public sealed virtual void Set(string key, object value, bool overwrite);
    public sealed virtual bool TryGetHeader(string key, Object& value);
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, object>> GetAll();
    public sealed virtual T Get(string key, T defaultValue);
    public sealed virtual Nullable`1<T> Get(string key, Nullable`1<T> defaultValue);
    public sealed virtual IEnumerator`1<HeaderValue> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
public static class MassTransit.RabbitMqTransport.OperationInterruptedExceptionExtensions : object {
    [ExtensionAttribute]
public static bool ChannelShouldBeClosed(OperationInterruptedException ex);
}
public class MassTransit.RabbitMqTransport.PendingConfirmation : object {
    private string _exchange;
    private TaskCompletionSource`1<ulong> _source;
    [CompilerGeneratedAttribute]
private ulong <PublishTag>k__BackingField;
    private Uri DestinationAddress { get; }
    public Task Confirmed { get; }
    public ulong PublishTag { get; }
    public PendingConfirmation(string exchange, ulong publishTag);
    private Uri get_DestinationAddress();
    public sealed virtual Task get_Confirmed();
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_PublishTag();
    public sealed virtual void Acknowledged();
    public sealed virtual void NotAcknowledged();
    public sealed virtual void NotConfirmed(Exception exception);
    public sealed virtual void NotConfirmed(string reason);
    public sealed virtual void Returned(ushort code, string text);
}
public class MassTransit.RabbitMqTransport.PendingConfirmationCollection : object {
    private ConcurrentDictionary`2<ulong, IPendingConfirmation> _published;
    public IPendingConfirmation Add(string exchange, ulong publishTag, IBasicProperties basicProperties);
    public void Add(ulong publishTag, BatchPublish batchPublish);
    public void Faulted(IPendingConfirmation pendingConfirmation);
    public void Acknowledged(ulong deliveryTag, bool multiple);
    public void NotAcknowledged(ulong deliveryTag, bool multiple);
    public void NotConfirmed(string reason);
    public void Returned(ulong deliveryTag, ushort replyCode, string replyText);
}
[ExtensionAttribute]
public static class MassTransit.RabbitMqTransport.RabbitMqAddressExtensions : object {
    [ExtensionAttribute]
public static ReceiveSettings GetReceiveSettings(Uri address);
    [ExtensionAttribute]
public static ConnectionFactory GetConnectionFactory(RabbitMqHostSettings settings);
    [ExtensionAttribute]
public static void ApplySslOptions(RabbitMqHostSettings settings, SslOption option);
    [ExtensionAttribute]
public static RabbitMqHostSettings GetHostSettings(Uri address);
    [ExtensionAttribute]
public static IRabbitMqBusTopology GetRabbitMqHostTopology(IBus bus);
    [ExtensionAttribute]
internal static ConfigurationHostSettings GetConfigurationHostSettings(Uri address);
    private static string UriDecode(string uri);
    [ExtensionAttribute]
public static bool IsReplyToAddress(Uri address);
}
public class MassTransit.RabbitMqTransport.RabbitMqBasicConsumer : ConsumerAgent`1<ulong> {
    private RabbitMqReceiveEndpointContext _context;
    private SemaphoreSlim _limit;
    private ModelContext _model;
    private ReceiveSettings _receiveSettings;
    private string _consumerTag;
    private EventHandler`1<ConsumerEventArgs> _onConsumerCancelled;
    [CompilerGeneratedAttribute]
private AsyncEventHandler`1<ConsumerEventArgs> ConsumerCancelled;
    public IModel Model { get; }
    private string MassTransit.RabbitMqTransport.RabbitMqDeliveryMetrics.ConsumerTag { get; }
    public RabbitMqBasicConsumer(ModelContext model, RabbitMqReceiveEndpointContext context);
    private sealed virtual override Task RabbitMQ.Client.IAsyncBasicConsumer.HandleBasicConsumeOk(string consumerTag);
    private sealed virtual override Task RabbitMQ.Client.IAsyncBasicConsumer.HandleBasicCancelOk(string consumerTag);
    private sealed virtual override Task RabbitMQ.Client.IAsyncBasicConsumer.HandleBasicCancel(string consumerTag);
    private sealed virtual override Task RabbitMQ.Client.IAsyncBasicConsumer.HandleModelShutdown(object model, ShutdownEventArgs reason);
    private sealed virtual override Task RabbitMQ.Client.IAsyncBasicConsumer.HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, IBasicProperties properties, ReadOnlyMemory`1<byte> body);
    public sealed virtual IModel get_Model();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ConsumerCancelled(AsyncEventHandler`1<ConsumerEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ConsumerCancelled(AsyncEventHandler`1<ConsumerEventArgs> value);
    public sealed virtual void HandleBasicConsumeOk(string consumerTag);
    public sealed virtual void HandleBasicCancelOk(string consumerTag);
    public sealed virtual void HandleBasicCancel(string consumerTag);
    public sealed virtual void HandleModelShutdown(object model, ShutdownEventArgs reason);
    public sealed virtual void HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, IBasicProperties properties, ReadOnlyMemory`1<byte> body);
    private sealed virtual override void RabbitMQ.Client.IBasicConsumer.add_ConsumerCancelled(EventHandler`1<ConsumerEventArgs> value);
    private sealed virtual override void RabbitMQ.Client.IBasicConsumer.remove_ConsumerCancelled(EventHandler`1<ConsumerEventArgs> value);
    private sealed virtual override string MassTransit.RabbitMqTransport.RabbitMqDeliveryMetrics.get_ConsumerTag();
    protected virtual bool IsTrackable(ulong deliveryTag);
    private Task OnConsumerCancelled(object obj, ConsumerEventArgs args);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.RabbitMqBasicConsumer/<StopAgent>d__29")]
protected virtual Task StopAgent(StopContext context);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.RabbitMqBasicConsumer/<ActiveAndActualAgentsCompleted>d__30")]
protected virtual Task ActiveAndActualAgentsCompleted(StopContext context);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(StopContext context);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(StopContext context);
}
public class MassTransit.RabbitMqTransport.RabbitMqConnectionContext : BasePipeContext {
    private TaskExecutor _executor;
    [CompilerGeneratedAttribute]
private IConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <HostAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PublisherConfirmation>k__BackingField;
    [CompilerGeneratedAttribute]
private BatchSettings <BatchSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ContinuationTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <StopTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private IRabbitMqBusTopology <Topology>k__BackingField;
    public IConnection Connection { get; }
    public string Description { get; }
    public Uri HostAddress { get; }
    public bool PublisherConfirmation { get; }
    public BatchSettings BatchSettings { get; }
    public TimeSpan ContinuationTimeout { get; }
    public TimeSpan StopTimeout { get; }
    public IRabbitMqBusTopology Topology { get; }
    public RabbitMqConnectionContext(IConnection connection, IRabbitMqHostConfiguration hostConfiguration, string description, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public sealed virtual IConnection get_Connection();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_HostAddress();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PublisherConfirmation();
    [CompilerGeneratedAttribute]
public sealed virtual BatchSettings get_BatchSettings();
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_ContinuationTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_StopTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual IRabbitMqBusTopology get_Topology();
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.RabbitMqConnectionContext/<CreateModel>d__26")]
public sealed virtual Task`1<IModel> CreateModel(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.RabbitMqConnectionContext/<CreateModelContext>d__27")]
public sealed virtual Task`1<ModelContext> CreateModelContext(CancellationToken cancellationToken);
    public sealed virtual ValueTask DisposeAsync();
    private void OnConnectionShutdown(object connection, ShutdownEventArgs reason);
    [CompilerGeneratedAttribute]
private IModel <CreateModel>b__26_0();
}
public class MassTransit.RabbitMqTransport.RabbitMqDeadLetterTransport : RabbitMqMoveTransport`1<DeadLetterSettings> {
    public RabbitMqDeadLetterTransport(string exchange, ConfigureRabbitMqTopologyFilter`1<DeadLetterSettings> topologyFilter);
    public sealed virtual Task Send(ReceiveContext context, string reason);
}
public interface MassTransit.RabbitMqTransport.RabbitMqDeliveryMetrics {
    public string ConsumerTag { get; }
    public abstract virtual string get_ConsumerTag();
}
public class MassTransit.RabbitMqTransport.RabbitMqErrorTransport : RabbitMqMoveTransport`1<ErrorSettings> {
    public RabbitMqErrorTransport(string exchange, ConfigureRabbitMqTopologyFilter`1<ErrorSettings> topologyFilter);
    public sealed virtual Task Send(ExceptionReceiveContext context);
}
public static class MassTransit.RabbitMqTransport.RabbitMqExchangeNames : object {
    public static string ReplyTo;
}
[ExtensionAttribute]
public static class MassTransit.RabbitMqTransport.RabbitMqExtensions : object {
    [ExtensionAttribute]
public static void Cleanup(IModel model, ushort replyCode, string message);
    [ExtensionAttribute]
public static void Cleanup(IConnection connection, ushort replyCode, string message);
    [ExtensionAttribute]
public static string ToDescription(RabbitMqHostSettings settings);
    [ExtensionAttribute]
public static string ToDescription(RabbitMqHostSettings settings, ConnectionFactory connectionFactory);
}
public class MassTransit.RabbitMqTransport.RabbitMqHeaderProvider : object {
    private static DateTimeTypeConverter _dateTimeConverter;
    private RabbitMqBasicConsumeContext _context;
    public RabbitMqHeaderProvider(RabbitMqBasicConsumeContext context);
    private static RabbitMqHeaderProvider();
    [IteratorStateMachineAttribute("MassTransit.RabbitMqTransport.RabbitMqHeaderProvider/<GetAll>d__3")]
public sealed virtual IEnumerable`1<KeyValuePair`2<string, object>> GetAll();
    public sealed virtual bool TryGetHeader(string key, Object& value);
}
public static class MassTransit.RabbitMqTransport.RabbitMqHeaders : object {
    public static string Exchange;
    public static string RoutingKey;
    public static string DeliveryTag;
    public static string ConsumerTag;
}
public class MassTransit.RabbitMqTransport.RabbitMqHost : BaseHost {
    private IRabbitMqHostConfiguration _hostConfiguration;
    [CompilerGeneratedAttribute]
private IRabbitMqBusTopology <Topology>k__BackingField;
    public IRabbitMqBusTopology Topology { get; }
    public RabbitMqHost(IRabbitMqHostConfiguration hostConfiguration, IRabbitMqBusTopology busTopology);
    [CompilerGeneratedAttribute]
public IRabbitMqBusTopology get_Topology();
    public virtual HostReceiveEndpointHandle ConnectReceiveEndpoint(IEndpointDefinition definition, IEndpointNameFormatter endpointNameFormatter, Action`1<IReceiveEndpointConfigurator> configureEndpoint);
    public virtual HostReceiveEndpointHandle ConnectReceiveEndpoint(string queueName, Action`1<IReceiveEndpointConfigurator> configureEndpoint);
    public sealed virtual HostReceiveEndpointHandle ConnectReceiveEndpoint(IEndpointDefinition definition, IEndpointNameFormatter endpointNameFormatter, Action`1<IRabbitMqReceiveEndpointConfigurator> configureEndpoint);
    public sealed virtual HostReceiveEndpointHandle ConnectReceiveEndpoint(string queueName, Action`1<IRabbitMqReceiveEndpointConfigurator> configure);
    protected virtual void Probe(ProbeContext context);
    protected virtual IAgent[] GetAgentHandles();
}
public static class MassTransit.RabbitMqTransport.RabbitMqLogMessages : object {
    public static LogMessage`1<ExchangeToExchangeBinding> BindToExchange;
    public static LogMessage`1<ExchangeToQueueBinding> BindToQueue;
    public static LogMessage`1<Exchange> DeclareExchange;
    public static LogMessage`3<Queue, UInt32, UInt32> DeclareQueue;
    public static LogMessage`1<ushort> PrefetchCount;
    private static RabbitMqLogMessages();
}
public class MassTransit.RabbitMqTransport.RabbitMqMessageNameFormatter : object {
    private IMessageNameFormatter _formatter;
    public sealed virtual string GetMessageName(Type type);
}
public class MassTransit.RabbitMqTransport.RabbitMqMessageSendContext`1 : MessageSendContext`1<T> {
    [CompilerGeneratedAttribute]
private string <Exchange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoutingKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IBasicProperties <BasicProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AwaitAck>k__BackingField;
    public string Exchange { get; private set; }
    public string RoutingKey { get; public set; }
    public IBasicProperties BasicProperties { get; }
    public bool AwaitAck { get; public set; }
    public RabbitMqMessageSendContext`1(IBasicProperties basicProperties, string exchange, T message, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Exchange();
    [CompilerGeneratedAttribute]
private void set_Exchange(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RoutingKey();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RoutingKey(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IBasicProperties get_BasicProperties();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AwaitAck();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AwaitAck(bool value);
    public virtual void ReadPropertiesFrom(IReadOnlyDictionary`2<string, object> properties);
    public virtual void WritePropertiesTo(IDictionary`2<string, object> properties);
}
public class MassTransit.RabbitMqTransport.RabbitMqModelContext : ScopePipeContext {
    private PendingConfirmationCollection _confirmations;
    private ConnectionContext _connectionContext;
    private TaskExecutor _executor;
    private IModel _model;
    private IPublisher _publisher;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public CancellationToken CancellationToken { get; }
    public IModel Model { get; }
    private ConnectionContext MassTransit.RabbitMqTransport.ModelContext.ConnectionContext { get; }
    public RabbitMqModelContext(ConnectionContext connectionContext, IModel model, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.RabbitMqModelContext/<DisposeAsync>d__6")]
public sealed virtual ValueTask DisposeAsync();
    [CompilerGeneratedAttribute]
public virtual CancellationToken get_CancellationToken();
    public sealed virtual IModel get_Model();
    private sealed virtual override ConnectionContext MassTransit.RabbitMqTransport.ModelContext.get_ConnectionContext();
    public sealed virtual Task BasicPublishAsync(string exchange, string routingKey, bool mandatory, IBasicProperties basicProperties, Byte[] body, bool awaitAck);
    public sealed virtual Task ExchangeBind(string destination, string source, string routingKey, IDictionary`2<string, object> arguments);
    public sealed virtual Task ExchangeDeclare(string exchange, string type, bool durable, bool autoDelete, IDictionary`2<string, object> arguments);
    public sealed virtual Task ExchangeDeclarePassive(string exchange);
    public sealed virtual Task QueueBind(string queue, string exchange, string routingKey, IDictionary`2<string, object> arguments);
    private sealed virtual override Task`1<QueueDeclareOk> MassTransit.RabbitMqTransport.ModelContext.QueueDeclare(string queue, bool durable, bool exclusive, bool autoDelete, IDictionary`2<string, object> arguments);
    public sealed virtual Task`1<QueueDeclareOk> QueueDeclarePassive(string queue);
    public sealed virtual Task`1<UInt32> QueuePurge(string queue);
    public sealed virtual Task BasicQos(UInt32 prefetchSize, ushort prefetchCount, bool global);
    public sealed virtual Task BasicAck(ulong deliveryTag, bool multiple);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.RabbitMqModelContext/<BasicNack>d__24")]
public sealed virtual Task BasicNack(ulong deliveryTag, bool multiple, bool requeue);
    public sealed virtual Task`1<string> BasicConsume(string queue, bool noAck, bool exclusive, IDictionary`2<string, object> arguments, IBasicConsumer consumer, string consumerTag);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.RabbitMqModelContext/<BasicCancel>d__26")]
public sealed virtual Task BasicCancel(string consumerTag);
    private void OnBasicReturn(object model, BasicReturnEventArgs args);
    private void OnModelShutdown(object model, ShutdownEventArgs reason);
    private void OnNotAcknowledged(object model, BasicNackEventArgs args);
    private void OnAcknowledged(object model, BasicAckEventArgs args);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.RabbitMqModelContext/<RunRpc>d__31")]
private Task RunRpc(Action callback, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.RabbitMqModelContext/<RunRpc>d__32`1")]
private Task`1<T> RunRpc(Func`1<T> callback, CancellationToken cancellationToken);
}
public class MassTransit.RabbitMqTransport.RabbitMqMoveTransport`1 : object {
    private string _exchange;
    private ConfigureRabbitMqTopologyFilter`1<TSettings> _topologyFilter;
    protected RabbitMqMoveTransport`1(string exchange, ConfigureRabbitMqTopologyFilter`1<TSettings> topologyFilter);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.RabbitMqMoveTransport`1/<Move>d__3")]
protected Task Move(ReceiveContext context, Action`2<IBasicProperties, SendHeaders> preSend);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MassTransit.RabbitMqTransport.RabbitMqPublishTransportProvider : object {
    private IConnectionContextSupervisor _connectionContextSupervisor;
    private IModelContextSupervisor _supervisor;
    private RabbitMqReceiveEndpointContext _receiveEndpointContext;
    public RabbitMqPublishTransportProvider(IConnectionContextSupervisor connectionContextSupervisor, RabbitMqReceiveEndpointContext receiveEndpointContext);
    public sealed virtual Task`1<ISendTransport> GetPublishTransport(Uri publishAddress);
}
public class MassTransit.RabbitMqTransport.RabbitMqQueueReceiveEndpointContext : BaseReceiveEndpointContext {
    private IRabbitMqReceiveEndpointConfiguration _configuration;
    private IRabbitMqHostConfiguration _hostConfiguration;
    private Recycle`1<IModelContextSupervisor> _modelContext;
    [CompilerGeneratedAttribute]
private BrokerTopology <BrokerTopology>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExclusiveConsumer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNotReplyTo>k__BackingField;
    public BrokerTopology BrokerTopology { get; }
    public bool ExclusiveConsumer { get; }
    public bool IsNotReplyTo { get; }
    public IModelContextSupervisor ModelContextSupervisor { get; }
    public RabbitMqQueueReceiveEndpointContext(IRabbitMqHostConfiguration hostConfiguration, IRabbitMqReceiveEndpointConfiguration configuration, BrokerTopology brokerTopology);
    [CompilerGeneratedAttribute]
public sealed virtual BrokerTopology get_BrokerTopology();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ExclusiveConsumer();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsNotReplyTo();
    public sealed virtual IModelContextSupervisor get_ModelContextSupervisor();
    public virtual void AddSendAgent(IAgent agent);
    public virtual void AddConsumeAgent(IAgent agent);
    public virtual Exception ConvertException(Exception exception, string message);
    public virtual void Probe(ProbeContext context);
    protected virtual ISendTransportProvider CreateSendTransportProvider();
    protected virtual IPublishTransportProvider CreatePublishTransportProvider();
}
public class MassTransit.RabbitMqTransport.RabbitMqReceiveContext : BaseReceiveContext {
    [CompilerGeneratedAttribute]
private MessageBody <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumerTag>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <DeliveryTag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exchange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoutingKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IBasicProperties <Properties>k__BackingField;
    protected IHeaderProvider HeaderProvider { get; }
    public MessageBody Body { get; }
    public string ConsumerTag { get; }
    public ulong DeliveryTag { get; }
    public string Exchange { get; }
    public string RoutingKey { get; }
    public IBasicProperties Properties { get; }
    public RabbitMqReceiveContext(string exchange, string routingKey, string consumerTag, ulong deliveryTag, Byte[] body, bool redelivered, IBasicProperties properties, RabbitMqReceiveEndpointContext receiveEndpointContext, Object[] payloads);
    protected virtual IHeaderProvider get_HeaderProvider();
    [CompilerGeneratedAttribute]
public virtual MessageBody get_Body();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConsumerTag();
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_DeliveryTag();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Exchange();
    [CompilerGeneratedAttribute]
public sealed virtual string get_RoutingKey();
    [CompilerGeneratedAttribute]
public sealed virtual IBasicProperties get_Properties();
    public sealed virtual IDictionary`2<string, object> GetTransportProperties();
    protected virtual ContentType GetContentType();
    protected virtual ISendEndpointProvider GetSendEndpointProvider();
}
public interface MassTransit.RabbitMqTransport.RabbitMqReceiveEndpointContext {
    public BrokerTopology BrokerTopology { get; }
    public bool ExclusiveConsumer { get; }
    public bool IsNotReplyTo { get; }
    public IModelContextSupervisor ModelContextSupervisor { get; }
    public abstract virtual BrokerTopology get_BrokerTopology();
    public abstract virtual bool get_ExclusiveConsumer();
    public abstract virtual bool get_IsNotReplyTo();
    public abstract virtual IModelContextSupervisor get_ModelContextSupervisor();
}
public class MassTransit.RabbitMqTransport.RabbitMqReceiveLockContext : object {
    private ulong _deliveryTag;
    private ModelContext _model;
    public RabbitMqReceiveLockContext(ModelContext model, ulong deliveryTag);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.RabbitMqReceiveLockContext/<Complete>d__3")]
public sealed virtual Task Complete();
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.RabbitMqReceiveLockContext/<Faulted>d__4")]
public sealed virtual Task Faulted(Exception exception);
    public sealed virtual Task ValidateLockStatus();
}
public class MassTransit.RabbitMqTransport.RabbitMqSendTransportContext : BaseSendTransportContext {
    private static DateTimeOffsetTypeConverter _dateTimeOffsetConverter;
    private static DateTimeTypeConverter _dateTimeConverter;
    private ConfigureRabbitMqTopologyFilter`1<SendSettings> _configureTopologyFilter;
    private IPipe`1<ModelContext> _delayConfigureTopologyPipe;
    private string _delayExchange;
    private string _exchange;
    private IRabbitMqHostConfiguration _hostConfiguration;
    private IModelContextSupervisor _supervisor;
    public string EntityName { get; }
    public string ActivitySystem { get; }
    public RabbitMqSendTransportContext(IRabbitMqHostConfiguration hostConfiguration, ReceiveEndpointContext receiveEndpointContext, IModelContextSupervisor supervisor, ConfigureRabbitMqTopologyFilter`1<SendSettings> configureTopologyFilter, string exchange, IPipe`1<ModelContext> delayConfigureTopologyPipe, string delayExchange);
    private static RabbitMqSendTransportContext();
    public virtual string get_EntityName();
    public virtual string get_ActivitySystem();
    public sealed virtual Task Send(IPipe`1<ModelContext> pipe, CancellationToken cancellationToken);
    public sealed virtual void Probe(ProbeContext context);
    public virtual IEnumerable`1<IAgent> GetAgentHandles();
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.RabbitMqSendTransportContext/<CreateSendContext>d__16`1")]
public sealed virtual Task`1<SendContext`1<T>> CreateSendContext(ModelContext context, T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.RabbitMqSendTransportContext/<CreateSendContext>d__17`1")]
public virtual Task`1<SendContext`1<T>> CreateSendContext(T message, IPipe`1<SendContext`1<T>> pipe, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.RabbitMqSendTransportContext/<Send>d__18`1")]
public sealed virtual Task Send(ModelContext transportContext, SendContext`1<T> sendContext);
    private static void SetHeaders(IDictionary`2<string, object> dictionary, SendHeaders headers);
    private static void CopyIncomingPropertiesIfPresent(RabbitMqSendContext`1<T> context);
}
public class MassTransit.RabbitMqTransport.RabbitMqSendTransportProvider : object {
    private IConnectionContextSupervisor _connectionContextSupervisor;
    private IModelContextSupervisor _modelContextSupervisor;
    private RabbitMqReceiveEndpointContext _receiveEndpointContext;
    public RabbitMqSendTransportProvider(IConnectionContextSupervisor connectionContextSupervisor, RabbitMqReceiveEndpointContext receiveEndpointContext);
    public sealed virtual Uri NormalizeAddress(Uri address);
    public sealed virtual Task`1<ISendTransport> GetSendTransport(Uri address);
}
internal static class MassTransit.RabbitMqTransport.RabbitMqTransportPropertyNames : object {
    public static string Exchange;
    public static string RoutingKey;
    public static string AppId;
    public static string Priority;
    public static string ReplyTo;
    public static string Type;
    public static string UserId;
}
public interface MassTransit.RabbitMqTransport.ReceiveSettings {
    public string QueueName { get; }
    public ushort PrefetchCount { get; }
    public bool Exclusive { get; }
    public IDictionary`2<string, object> QueueArguments { get; }
    public string RoutingKey { get; }
    public IDictionary`2<string, object> BindingArguments { get; }
    public bool PurgeOnStartup { get; }
    public IDictionary`2<string, object> ConsumeArguments { get; }
    public bool ExclusiveConsumer { get; }
    public Nullable`1<TimeSpan> QueueExpiration { get; }
    public bool BindQueue { get; }
    public bool NoAck { get; }
    public string ConsumerTag { get; }
    public abstract virtual string get_QueueName();
    public abstract virtual ushort get_PrefetchCount();
    public abstract virtual bool get_Exclusive();
    public abstract virtual IDictionary`2<string, object> get_QueueArguments();
    public abstract virtual string get_RoutingKey();
    public abstract virtual IDictionary`2<string, object> get_BindingArguments();
    public abstract virtual bool get_PurgeOnStartup();
    public abstract virtual IDictionary`2<string, object> get_ConsumeArguments();
    public abstract virtual bool get_ExclusiveConsumer();
    public abstract virtual Nullable`1<TimeSpan> get_QueueExpiration();
    public abstract virtual bool get_BindQueue();
    public abstract virtual bool get_NoAck();
    public abstract virtual string get_ConsumerTag();
    public abstract virtual Uri GetInputAddress(Uri hostAddress);
}
public class MassTransit.RabbitMqTransport.ReplyToSendEndpoint : SendEndpointProxy {
    private string _queueName;
    public ReplyToSendEndpoint(ISendEndpoint endpoint, string queueName);
    protected virtual IPipe`1<SendContext`1<T>> GetPipeProxy(IPipe`1<SendContext`1<T>> pipe);
}
public class MassTransit.RabbitMqTransport.ScopeModelContext : ScopePipeContext {
    private ModelContext _context;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public CancellationToken CancellationToken { get; }
    private ConnectionContext MassTransit.RabbitMqTransport.ModelContext.ConnectionContext { get; }
    private IModel MassTransit.RabbitMqTransport.ModelContext.Model { get; }
    public ScopeModelContext(ModelContext context, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public virtual CancellationToken get_CancellationToken();
    private sealed virtual override ConnectionContext MassTransit.RabbitMqTransport.ModelContext.get_ConnectionContext();
    private sealed virtual override Task MassTransit.RabbitMqTransport.ModelContext.BasicPublishAsync(string exchange, string routingKey, bool mandatory, IBasicProperties basicProperties, Byte[] body, bool awaitAck);
    private sealed virtual override Task MassTransit.RabbitMqTransport.ModelContext.ExchangeBind(string destination, string source, string routingKey, IDictionary`2<string, object> arguments);
    private sealed virtual override Task MassTransit.RabbitMqTransport.ModelContext.ExchangeDeclare(string exchange, string type, bool durable, bool autoDelete, IDictionary`2<string, object> arguments);
    public sealed virtual Task ExchangeDeclarePassive(string exchange);
    private sealed virtual override Task MassTransit.RabbitMqTransport.ModelContext.QueueBind(string queue, string exchange, string routingKey, IDictionary`2<string, object> arguments);
    private sealed virtual override Task`1<QueueDeclareOk> MassTransit.RabbitMqTransport.ModelContext.QueueDeclare(string queue, bool durable, bool exclusive, bool autoDelete, IDictionary`2<string, object> arguments);
    private sealed virtual override Task`1<QueueDeclareOk> MassTransit.RabbitMqTransport.ModelContext.QueueDeclarePassive(string queue);
    private sealed virtual override Task`1<UInt32> MassTransit.RabbitMqTransport.ModelContext.QueuePurge(string queue);
    private sealed virtual override Task MassTransit.RabbitMqTransport.ModelContext.BasicQos(UInt32 prefetchSize, ushort prefetchCount, bool global);
    private sealed virtual override Task MassTransit.RabbitMqTransport.ModelContext.BasicAck(ulong deliveryTag, bool multiple);
    private sealed virtual override Task MassTransit.RabbitMqTransport.ModelContext.BasicNack(ulong deliveryTag, bool multiple, bool requeue);
    private sealed virtual override Task`1<string> MassTransit.RabbitMqTransport.ModelContext.BasicConsume(string queue, bool noAck, bool exclusive, IDictionary`2<string, object> arguments, IBasicConsumer consumer, string consumerTag);
    public sealed virtual Task BasicCancel(string consumerTag);
    private sealed virtual override IModel MassTransit.RabbitMqTransport.ModelContext.get_Model();
}
public class MassTransit.RabbitMqTransport.ScopeModelContextFactory : object {
    private IModelContextSupervisor _supervisor;
    public ScopeModelContextFactory(IModelContextSupervisor supervisor);
    private sealed virtual override IPipeContextAgent`1<ModelContext> MassTransit.Agents.IPipeContextFactory<MassTransit.RabbitMqTransport.ModelContext>.CreateContext(ISupervisor supervisor);
    private sealed virtual override IActivePipeContextAgent`1<ModelContext> MassTransit.Agents.IPipeContextFactory<MassTransit.RabbitMqTransport.ModelContext>.CreateActiveContext(ISupervisor supervisor, PipeContextHandle`1<ModelContext> context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.RabbitMqTransport.ScopeModelContextFactory/<CreateSharedModel>d__4")]
private static Task`1<ModelContext> CreateSharedModel(Task`1<ModelContext> context, CancellationToken cancellationToken);
    private Task`1<ModelContext> CreateModel(IAsyncPipeContextAgent`1<ModelContext> asyncContext, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static Task`1<ModelContext> <CreateModel>g__CreateModelContext|5_0(ModelContext context, CancellationToken createCancellationToken);
}
public interface MassTransit.RabbitMqTransport.SendSettings {
    public abstract virtual RabbitMqEndpointAddress GetSendAddress(Uri hostAddress);
    public abstract virtual BrokerTopology GetBrokerTopology();
}
public class MassTransit.RabbitMqTransport.SequentialEndpointResolver : object {
    private ClusterNode[] _nodes;
    private RabbitMqHostSettings _settings;
    private ClusterNode _lastNode;
    private int _nextHostIndex;
    public ClusterNode LastHost { get; }
    public SequentialEndpointResolver(ClusterNode[] nodes, RabbitMqHostSettings settings);
    public sealed virtual ClusterNode get_LastHost();
    [IteratorStateMachineAttribute("MassTransit.RabbitMqTransport.SequentialEndpointResolver/<All>d__7")]
public sealed virtual IEnumerable`1<AmqpTcpEndpoint> All();
}
public class MassTransit.RabbitMqTransport.SharedConnectionContext : ProxyPipeContext {
    private ConnectionContext _context;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public CancellationToken CancellationToken { get; }
    public IConnection Connection { get; }
    public string Description { get; }
    public Uri HostAddress { get; }
    public bool PublisherConfirmation { get; }
    public BatchSettings BatchSettings { get; }
    public TimeSpan ContinuationTimeout { get; }
    public TimeSpan StopTimeout { get; }
    public IRabbitMqBusTopology Topology { get; }
    public SharedConnectionContext(ConnectionContext context, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public virtual CancellationToken get_CancellationToken();
    public sealed virtual IConnection get_Connection();
    public sealed virtual string get_Description();
    public sealed virtual Uri get_HostAddress();
    public sealed virtual bool get_PublisherConfirmation();
    public sealed virtual BatchSettings get_BatchSettings();
    public sealed virtual TimeSpan get_ContinuationTimeout();
    public sealed virtual TimeSpan get_StopTimeout();
    public sealed virtual IRabbitMqBusTopology get_Topology();
    public sealed virtual Task`1<IModel> CreateModel(CancellationToken cancellationToken);
    public sealed virtual Task`1<ModelContext> CreateModelContext(CancellationToken cancellationToken);
}
public class MassTransit.RabbitMqTransport.SharedModelContext : ProxyPipeContext {
    private ModelContext _context;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public CancellationToken CancellationToken { get; }
    private ConnectionContext MassTransit.RabbitMqTransport.ModelContext.ConnectionContext { get; }
    private IModel MassTransit.RabbitMqTransport.ModelContext.Model { get; }
    public SharedModelContext(ModelContext context, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public virtual CancellationToken get_CancellationToken();
    private sealed virtual override ConnectionContext MassTransit.RabbitMqTransport.ModelContext.get_ConnectionContext();
    private sealed virtual override Task MassTransit.RabbitMqTransport.ModelContext.BasicPublishAsync(string exchange, string routingKey, bool mandatory, IBasicProperties basicProperties, Byte[] body, bool awaitAck);
    private sealed virtual override Task MassTransit.RabbitMqTransport.ModelContext.ExchangeBind(string destination, string source, string routingKey, IDictionary`2<string, object> arguments);
    private sealed virtual override Task MassTransit.RabbitMqTransport.ModelContext.ExchangeDeclare(string exchange, string type, bool durable, bool autoDelete, IDictionary`2<string, object> arguments);
    public sealed virtual Task ExchangeDeclarePassive(string exchange);
    private sealed virtual override Task MassTransit.RabbitMqTransport.ModelContext.QueueBind(string queue, string exchange, string routingKey, IDictionary`2<string, object> arguments);
    private sealed virtual override Task`1<QueueDeclareOk> MassTransit.RabbitMqTransport.ModelContext.QueueDeclare(string queue, bool durable, bool exclusive, bool autoDelete, IDictionary`2<string, object> arguments);
    private sealed virtual override Task`1<QueueDeclareOk> MassTransit.RabbitMqTransport.ModelContext.QueueDeclarePassive(string queue);
    private sealed virtual override Task`1<UInt32> MassTransit.RabbitMqTransport.ModelContext.QueuePurge(string queue);
    private sealed virtual override Task MassTransit.RabbitMqTransport.ModelContext.BasicQos(UInt32 prefetchSize, ushort prefetchCount, bool global);
    private sealed virtual override Task MassTransit.RabbitMqTransport.ModelContext.BasicAck(ulong deliveryTag, bool multiple);
    private sealed virtual override Task MassTransit.RabbitMqTransport.ModelContext.BasicNack(ulong deliveryTag, bool multiple, bool requeue);
    private sealed virtual override Task`1<string> MassTransit.RabbitMqTransport.ModelContext.BasicConsume(string queue, bool noAck, bool exclusive, IDictionary`2<string, object> arguments, IBasicConsumer consumer, string consumerTag);
    public sealed virtual Task BasicCancel(string consumerTag);
    private sealed virtual override IModel MassTransit.RabbitMqTransport.ModelContext.get_Model();
}
public interface MassTransit.RabbitMqTransport.Topology.BrokerTopology {
    public Exchange[] Exchanges { get; }
    public Queue[] Queues { get; }
    public ExchangeToExchangeBinding[] ExchangeBindings { get; }
    public ExchangeToQueueBinding[] QueueBindings { get; }
    public abstract virtual Exchange[] get_Exchanges();
    public abstract virtual Queue[] get_Queues();
    public abstract virtual ExchangeToExchangeBinding[] get_ExchangeBindings();
    public abstract virtual ExchangeToQueueBinding[] get_QueueBindings();
}
public abstract class MassTransit.RabbitMqTransport.Topology.BrokerTopologyBuilder : object {
    private EntityCollection`2<ExchangeBindingEntity, ExchangeBindingHandle> _exchangeBindings;
    private NamedEntityCollection`2<ExchangeEntity, ExchangeHandle> _exchanges;
    private EntityCollection`2<QueueBindingEntity, QueueBindingHandle> _queueBindings;
    private NamedEntityCollection`2<QueueEntity, QueueHandle> _queues;
    private long _nextId;
    private long GetNextId();
    public sealed virtual ExchangeHandle ExchangeDeclare(string name, string type, bool durable, bool autoDelete, IDictionary`2<string, object> arguments);
    public sealed virtual ExchangeBindingHandle ExchangeBind(ExchangeHandle source, ExchangeHandle destination, string routingKey, IDictionary`2<string, object> arguments);
    public sealed virtual QueueHandle QueueDeclare(string name, bool durable, bool autoDelete, bool exclusive, IDictionary`2<string, object> arguments);
    public sealed virtual QueueBindingHandle QueueBind(ExchangeHandle exchange, QueueHandle queue, string routingKey, IDictionary`2<string, object> arguments);
    public BrokerTopology BuildBrokerTopology();
}
public interface MassTransit.RabbitMqTransport.Topology.Exchange {
    public string ExchangeName { get; }
    public string ExchangeType { get; }
    public bool Durable { get; }
    public bool AutoDelete { get; }
    public IDictionary`2<string, object> ExchangeArguments { get; }
    public abstract virtual string get_ExchangeName();
    public abstract virtual string get_ExchangeType();
    public abstract virtual bool get_Durable();
    public abstract virtual bool get_AutoDelete();
    public abstract virtual IDictionary`2<string, object> get_ExchangeArguments();
}
public class MassTransit.RabbitMqTransport.Topology.ExchangeBindingEntity : object {
    private ExchangeEntity _destination;
    private ExchangeEntity _source;
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<ExchangeBindingEntity> <EntityComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoutingKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Arguments>k__BackingField;
    public static IEqualityComparer`1<ExchangeBindingEntity> EntityComparer { get; }
    public long Id { get; }
    public ExchangeToExchangeBinding Binding { get; }
    public Exchange Source { get; }
    public Exchange Destination { get; }
    public string RoutingKey { get; }
    public IDictionary`2<string, object> Arguments { get; }
    public ExchangeBindingEntity(long id, ExchangeEntity source, ExchangeEntity destination, string routingKey, IDictionary`2<string, object> arguments);
    private static ExchangeBindingEntity();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<ExchangeBindingEntity> get_EntityComparer();
    [CompilerGeneratedAttribute]
public sealed virtual long get_Id();
    public sealed virtual ExchangeToExchangeBinding get_Binding();
    public sealed virtual Exchange get_Source();
    public sealed virtual Exchange get_Destination();
    [CompilerGeneratedAttribute]
public sealed virtual string get_RoutingKey();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Arguments();
    public virtual string ToString();
}
public interface MassTransit.RabbitMqTransport.Topology.ExchangeBindingHandle {
    public ExchangeToExchangeBinding Binding { get; }
    public abstract virtual ExchangeToExchangeBinding get_Binding();
}
public class MassTransit.RabbitMqTransport.Topology.ExchangeEntity : object {
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<ExchangeEntity> <NameComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<ExchangeEntity> <EntityComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExchangeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExchangeType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Durable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoDelete>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <ExchangeArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    public static IEqualityComparer`1<ExchangeEntity> NameComparer { get; }
    public static IEqualityComparer`1<ExchangeEntity> EntityComparer { get; }
    public string ExchangeName { get; }
    public string ExchangeType { get; }
    public bool Durable { get; }
    public bool AutoDelete { get; }
    public IDictionary`2<string, object> ExchangeArguments { get; }
    public long Id { get; }
    public Exchange Exchange { get; }
    public ExchangeEntity(long id, string name, string type, bool durable, bool autoDelete, IDictionary`2<string, object> arguments);
    private static ExchangeEntity();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<ExchangeEntity> get_NameComparer();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<ExchangeEntity> get_EntityComparer();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ExchangeName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ExchangeType();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Durable();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutoDelete();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_ExchangeArguments();
    [CompilerGeneratedAttribute]
public sealed virtual long get_Id();
    public sealed virtual Exchange get_Exchange();
    public virtual string ToString();
}
public interface MassTransit.RabbitMqTransport.Topology.ExchangeHandle {
    public Exchange Exchange { get; }
    public abstract virtual Exchange get_Exchange();
}
public interface MassTransit.RabbitMqTransport.Topology.ExchangeToExchangeBinding {
    public Exchange Source { get; }
    public Exchange Destination { get; }
    public string RoutingKey { get; }
    public IDictionary`2<string, object> Arguments { get; }
    public abstract virtual Exchange get_Source();
    public abstract virtual Exchange get_Destination();
    public abstract virtual string get_RoutingKey();
    public abstract virtual IDictionary`2<string, object> get_Arguments();
}
public interface MassTransit.RabbitMqTransport.Topology.ExchangeToQueueBinding {
    public Exchange Source { get; }
    public Queue Destination { get; }
    public string RoutingKey { get; }
    public IDictionary`2<string, object> Arguments { get; }
    public abstract virtual Exchange get_Source();
    public abstract virtual Queue get_Destination();
    public abstract virtual string get_RoutingKey();
    public abstract virtual IDictionary`2<string, object> get_Arguments();
}
public class MassTransit.RabbitMqTransport.Topology.FanoutExchangeTypeSelector : object {
    public string DefaultExchangeType { get; }
    private sealed virtual override string MassTransit.RabbitMqTransport.Topology.IExchangeTypeSelector.GetExchangeType(string exchangeName);
    public sealed virtual string get_DefaultExchangeType();
}
public interface MassTransit.RabbitMqTransport.Topology.IBrokerTopologyBuilder {
    public abstract virtual ExchangeHandle ExchangeDeclare(string name, string type, bool durable, bool autoDelete, IDictionary`2<string, object> arguments);
    public abstract virtual ExchangeBindingHandle ExchangeBind(ExchangeHandle source, ExchangeHandle destination, string routingKey, IDictionary`2<string, object> arguments);
    public abstract virtual QueueHandle QueueDeclare(string name, bool durable, bool autoDelete, bool exclusive, IDictionary`2<string, object> arguments);
    public abstract virtual QueueBindingHandle QueueBind(ExchangeHandle exchange, QueueHandle queue, string routingKey, IDictionary`2<string, object> arguments);
}
public interface MassTransit.RabbitMqTransport.Topology.IExchangeTypeSelector {
    public string DefaultExchangeType { get; }
    public abstract virtual string get_DefaultExchangeType();
    public abstract virtual string GetExchangeType(string exchangeName);
}
public interface MassTransit.RabbitMqTransport.Topology.IMessageExchangeTypeSelector`1 {
    public string DefaultExchangeType { get; }
    public abstract virtual string get_DefaultExchangeType();
    public abstract virtual string GetExchangeType(string exchangeName);
}
public interface MassTransit.RabbitMqTransport.Topology.IPublishEndpointBrokerTopologyBuilder {
    public ExchangeHandle Exchange { get; public set; }
    public abstract virtual ExchangeHandle get_Exchange();
    public abstract virtual void set_Exchange(ExchangeHandle value);
    public abstract virtual IPublishEndpointBrokerTopologyBuilder CreateImplementedBuilder();
}
public interface MassTransit.RabbitMqTransport.Topology.IReceiveEndpointBrokerTopologyBuilder {
    public QueueHandle Queue { get; }
    public ExchangeHandle Exchange { get; }
    public ExchangeHandle BoundExchange { get; public set; }
    public abstract virtual QueueHandle get_Queue();
    public abstract virtual ExchangeHandle get_Exchange();
    public abstract virtual ExchangeHandle get_BoundExchange();
    public abstract virtual void set_BoundExchange(ExchangeHandle value);
}
public class MassTransit.RabbitMqTransport.Topology.PublishEndpointBrokerTopologyBuilder : BrokerTopologyBuilder {
    private PublishBrokerTopologyOptions _options;
    [CompilerGeneratedAttribute]
private ExchangeHandle <Exchange>k__BackingField;
    public ExchangeHandle Exchange { get; public set; }
    public PublishEndpointBrokerTopologyBuilder(PublishBrokerTopologyOptions options);
    [CompilerGeneratedAttribute]
public sealed virtual ExchangeHandle get_Exchange();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Exchange(ExchangeHandle value);
    public sealed virtual IPublishEndpointBrokerTopologyBuilder CreateImplementedBuilder();
}
public interface MassTransit.RabbitMqTransport.Topology.Queue {
    public string QueueName { get; }
    public bool Durable { get; }
    public bool AutoDelete { get; }
    public bool Exclusive { get; }
    public IDictionary`2<string, object> QueueArguments { get; }
    public abstract virtual string get_QueueName();
    public abstract virtual bool get_Durable();
    public abstract virtual bool get_AutoDelete();
    public abstract virtual bool get_Exclusive();
    public abstract virtual IDictionary`2<string, object> get_QueueArguments();
}
public class MassTransit.RabbitMqTransport.Topology.QueueBindingEntity : object {
    private ExchangeEntity _exchange;
    private QueueEntity _queue;
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<QueueBindingEntity> <EntityComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoutingKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    public static IEqualityComparer`1<QueueBindingEntity> EntityComparer { get; }
    public Exchange Source { get; }
    public Queue Destination { get; }
    public string RoutingKey { get; }
    public IDictionary`2<string, object> Arguments { get; }
    public long Id { get; }
    public ExchangeToQueueBinding Binding { get; }
    public QueueBindingEntity(long id, ExchangeEntity exchange, QueueEntity queue, string routingKey, IDictionary`2<string, object> arguments);
    private static QueueBindingEntity();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<QueueBindingEntity> get_EntityComparer();
    public sealed virtual Exchange get_Source();
    public sealed virtual Queue get_Destination();
    [CompilerGeneratedAttribute]
public sealed virtual string get_RoutingKey();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Arguments();
    [CompilerGeneratedAttribute]
public sealed virtual long get_Id();
    public sealed virtual ExchangeToQueueBinding get_Binding();
    public virtual string ToString();
}
public interface MassTransit.RabbitMqTransport.Topology.QueueBindingHandle {
    public ExchangeToQueueBinding Binding { get; }
    public abstract virtual ExchangeToQueueBinding get_Binding();
}
public class MassTransit.RabbitMqTransport.Topology.QueueEntity : object {
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<QueueEntity> <NameComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<QueueEntity> <QueueComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueueName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Durable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoDelete>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Exclusive>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <QueueArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    public static IEqualityComparer`1<QueueEntity> NameComparer { get; }
    public static IEqualityComparer`1<QueueEntity> QueueComparer { get; }
    public string QueueName { get; }
    public bool Durable { get; }
    public bool AutoDelete { get; }
    public bool Exclusive { get; }
    public IDictionary`2<string, object> QueueArguments { get; }
    public long Id { get; }
    public Queue Queue { get; }
    public QueueEntity(long id, string name, bool durable, bool autoDelete, bool exclusive, IDictionary`2<string, object> arguments);
    private static QueueEntity();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<QueueEntity> get_NameComparer();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<QueueEntity> get_QueueComparer();
    [CompilerGeneratedAttribute]
public sealed virtual string get_QueueName();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Durable();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutoDelete();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Exclusive();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_QueueArguments();
    [CompilerGeneratedAttribute]
public sealed virtual long get_Id();
    public sealed virtual Queue get_Queue();
    public virtual string ToString();
}
public interface MassTransit.RabbitMqTransport.Topology.QueueHandle {
    public Queue Queue { get; }
    public abstract virtual Queue get_Queue();
}
public class MassTransit.RabbitMqTransport.Topology.RabbitMqBrokerTopology : object {
    [CompilerGeneratedAttribute]
private Exchange[] <Exchanges>k__BackingField;
    [CompilerGeneratedAttribute]
private Queue[] <Queues>k__BackingField;
    [CompilerGeneratedAttribute]
private ExchangeToExchangeBinding[] <ExchangeBindings>k__BackingField;
    [CompilerGeneratedAttribute]
private ExchangeToQueueBinding[] <QueueBindings>k__BackingField;
    public Exchange[] Exchanges { get; }
    public Queue[] Queues { get; }
    public ExchangeToExchangeBinding[] ExchangeBindings { get; }
    public ExchangeToQueueBinding[] QueueBindings { get; }
    public RabbitMqBrokerTopology(IEnumerable`1<Exchange> exchanges, IEnumerable`1<ExchangeToExchangeBinding> exchangeBindings, IEnumerable`1<Queue> queues, IEnumerable`1<ExchangeToQueueBinding> queueBindings);
    [CompilerGeneratedAttribute]
public sealed virtual Exchange[] get_Exchanges();
    [CompilerGeneratedAttribute]
public sealed virtual Queue[] get_Queues();
    [CompilerGeneratedAttribute]
public sealed virtual ExchangeToExchangeBinding[] get_ExchangeBindings();
    [CompilerGeneratedAttribute]
public sealed virtual ExchangeToQueueBinding[] get_QueueBindings();
    private sealed virtual override void MassTransit.IProbeSite.Probe(ProbeContext context);
}
public class MassTransit.RabbitMqTransport.Topology.RabbitMqBusTopology : BusTopology {
    private IRabbitMqTopologyConfiguration _configuration;
    private Uri _hostAddress;
    private IMessageNameFormatter _messageNameFormatter;
    private IRabbitMqPublishTopology MassTransit.IRabbitMqBusTopology.PublishTopology { get; }
    private IRabbitMqSendTopology MassTransit.IRabbitMqBusTopology.SendTopology { get; }
    public RabbitMqBusTopology(IRabbitMqHostConfiguration hostConfiguration, IMessageNameFormatter messageNameFormatter, Uri hostAddress, IRabbitMqTopologyConfiguration configuration);
    private sealed virtual override IRabbitMqPublishTopology MassTransit.IRabbitMqBusTopology.get_PublishTopology();
    private sealed virtual override IRabbitMqSendTopology MassTransit.IRabbitMqBusTopology.get_SendTopology();
    private sealed virtual override IRabbitMqMessagePublishTopology`1<T> MassTransit.IRabbitMqBusTopology.Publish();
    private sealed virtual override IRabbitMqMessageSendTopology`1<T> MassTransit.IRabbitMqBusTopology.Send();
    public sealed virtual Uri GetDestinationAddress(string exchangeName, Action`1<IRabbitMqExchangeConfigurator> configure);
    public sealed virtual Uri GetDestinationAddress(Type messageType, Action`1<IRabbitMqExchangeConfigurator> configure);
}
public class MassTransit.RabbitMqTransport.Topology.RabbitMqConsumeTopology : ConsumeTopology {
    private IMessageTopology _messageTopology;
    private IRabbitMqPublishTopology _publishTopology;
    private List`1<IRabbitMqConsumeTopologySpecification> _specifications;
    [CompilerGeneratedAttribute]
private IExchangeTypeSelector <ExchangeTypeSelector>k__BackingField;
    public IExchangeTypeSelector ExchangeTypeSelector { get; }
    public RabbitMqConsumeTopology(IMessageTopology messageTopology, IRabbitMqPublishTopology publishTopology);
    [CompilerGeneratedAttribute]
public sealed virtual IExchangeTypeSelector get_ExchangeTypeSelector();
    private sealed virtual override IRabbitMqMessageConsumeTopology`1<T> MassTransit.IRabbitMqConsumeTopology.GetMessageTopology();
    public sealed virtual void AddSpecification(IRabbitMqConsumeTopologySpecification specification);
    private sealed virtual override IRabbitMqMessageConsumeTopologyConfigurator`1<T> MassTransit.IRabbitMqConsumeTopologyConfigurator.GetMessageTopology();
    public sealed virtual void Apply(IReceiveEndpointBrokerTopologyBuilder builder);
    public sealed virtual void Bind(string exchangeName, Action`1<IRabbitMqExchangeToExchangeBindingConfigurator> configure);
    public sealed virtual void BindQueue(string exchangeName, string queueName, Action`1<IRabbitMqQueueBindingConfigurator> configure);
    public virtual IEnumerable`1<ValidationResult> Validate();
    protected virtual IMessageConsumeTopologyConfigurator CreateMessageTopology();
}
public class MassTransit.RabbitMqTransport.Topology.RabbitMqDeadLetterSettings : QueueBindingConfigurator {
    public RabbitMqDeadLetterSettings(ReceiveSettings source, string name);
    public sealed virtual BrokerTopology GetBrokerTopology();
}
public class MassTransit.RabbitMqTransport.Topology.RabbitMqDelaySettings : RabbitMqSendSettings {
    public RabbitMqDelaySettings(RabbitMqEndpointAddress address);
}
public class MassTransit.RabbitMqTransport.Topology.RabbitMqEntityNameValidator : object {
    private static Regex _regex;
    public static IEntityNameValidator Validator { get; }
    private static RabbitMqEntityNameValidator();
    public static IEntityNameValidator get_Validator();
    public sealed virtual void ThrowIfInvalidEntityName(string name);
    public sealed virtual bool IsValidEntityName(string name);
}
public class MassTransit.RabbitMqTransport.Topology.RabbitMqErrorSettings : QueueBindingConfigurator {
    public RabbitMqErrorSettings(ReceiveSettings source, string name);
    public sealed virtual BrokerTopology GetBrokerTopology();
}
public class MassTransit.RabbitMqTransport.Topology.RabbitMqMessageConsumeTopology`1 : MessageConsumeTopology`1<TMessage> {
    private IMessageTopology`1<TMessage> _messageTopology;
    private IRabbitMqMessagePublishTopology`1<TMessage> _publishTopology;
    private List`1<IRabbitMqConsumeTopologySpecification> _specifications;
    [CompilerGeneratedAttribute]
private IMessageExchangeTypeSelector`1<TMessage> <ExchangeTypeSelector>k__BackingField;
    private IMessageExchangeTypeSelector`1<TMessage> ExchangeTypeSelector { get; }
    public RabbitMqMessageConsumeTopology`1(IMessageTopology`1<TMessage> messageTopology, IMessageExchangeTypeSelector`1<TMessage> exchangeTypeSelector, IRabbitMqMessagePublishTopology`1<TMessage> publishTopology);
    [CompilerGeneratedAttribute]
private IMessageExchangeTypeSelector`1<TMessage> get_ExchangeTypeSelector();
    public sealed virtual void Apply(IReceiveEndpointBrokerTopologyBuilder builder);
    public sealed virtual void Bind(Action`1<IRabbitMqExchangeBindingConfigurator> configure);
    public virtual IEnumerable`1<ValidationResult> Validate();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MassTransit.RabbitMqTransport.Topology.RabbitMqMessagePublishTopology`1 : MessagePublishTopology`1<TMessage> {
    private RabbitMqExchangeConfigurator _exchange;
    private List`1<IRabbitMqMessagePublishTopology> _implementedMessageTypes;
    private IRabbitMqPublishTopology _publishTopology;
    private List`1<IRabbitMqPublishTopologySpecification> _specifications;
    [CompilerGeneratedAttribute]
private IMessageExchangeTypeSelector`1<TMessage> <ExchangeTypeSelector>k__BackingField;
    private IMessageExchangeTypeSelector`1<TMessage> ExchangeTypeSelector { get; }
    public Exchange Exchange { get; }
    unknown bool MassTransit.IRabbitMqExchangeConfigurator.Durable {private set; }
    unknown bool MassTransit.IRabbitMqExchangeConfigurator.AutoDelete {private set; }
    unknown string MassTransit.IRabbitMqExchangeConfigurator.ExchangeType {private set; }
    unknown string AlternateExchange {public set; }
    public RabbitMqMessagePublishTopology`1(IRabbitMqPublishTopology publishTopology, IMessageTopology`1<TMessage> messageTopology, IMessageExchangeTypeSelector`1<TMessage> exchangeTypeSelector);
    [CompilerGeneratedAttribute]
private IMessageExchangeTypeSelector`1<TMessage> get_ExchangeTypeSelector();
    public sealed virtual void Apply(IPublishEndpointBrokerTopologyBuilder builder);
    public virtual bool TryGetPublishAddress(Uri baseAddress, Uri& publishAddress);
    public sealed virtual SendSettings GetSendSettings(Uri hostAddress);
    public sealed virtual BrokerTopology GetBrokerTopology();
    public void ApplyBrokerTopology(IPublishEndpointBrokerTopologyBuilder builder);
    public sealed virtual Exchange get_Exchange();
    private sealed virtual override void MassTransit.IRabbitMqExchangeConfigurator.set_Durable(bool value);
    private sealed virtual override void MassTransit.IRabbitMqExchangeConfigurator.set_AutoDelete(bool value);
    private sealed virtual override void MassTransit.IRabbitMqExchangeConfigurator.set_ExchangeType(string value);
    private sealed virtual override void MassTransit.IRabbitMqExchangeConfigurator.SetExchangeArgument(string key, object value);
    private sealed virtual override void MassTransit.IRabbitMqExchangeConfigurator.SetExchangeArgument(string key, TimeSpan value);
    public sealed virtual void set_AlternateExchange(string value);
    public sealed virtual void BindQueue(string exchangeName, string queueName, Action`1<IRabbitMqQueueBindingConfigurator> configure);
    public sealed virtual void BindAlternateExchangeQueue(string exchangeName, string queueName, Action`1<IRabbitMqQueueBindingConfigurator> configure);
    public void AddImplementedMessageConfigurator(IRabbitMqMessagePublishTopologyConfigurator`1<T> configurator, bool direct);
}
public class MassTransit.RabbitMqTransport.Topology.RabbitMqMessageSendTopology`1 : MessageSendTopology`1<TMessage> {
}
public class MassTransit.RabbitMqTransport.Topology.RabbitMqPublishTopology : PublishTopology {
    private IMessageTopology _messageTopology;
    [CompilerGeneratedAttribute]
private IExchangeTypeSelector <ExchangeTypeSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private PublishBrokerTopologyOptions <BrokerTopologyOptions>k__BackingField;
    public IExchangeTypeSelector ExchangeTypeSelector { get; }
    public PublishBrokerTopologyOptions BrokerTopologyOptions { get; public set; }
    public RabbitMqPublishTopology(IMessageTopology messageTopology);
    [CompilerGeneratedAttribute]
public sealed virtual IExchangeTypeSelector get_ExchangeTypeSelector();
    [CompilerGeneratedAttribute]
public sealed virtual PublishBrokerTopologyOptions get_BrokerTopologyOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BrokerTopologyOptions(PublishBrokerTopologyOptions value);
    private sealed virtual override IRabbitMqMessagePublishTopology`1<T> MassTransit.IRabbitMqPublishTopology.GetMessageTopology();
    private sealed virtual override IRabbitMqMessagePublishTopologyConfigurator MassTransit.IRabbitMqPublishTopologyConfigurator.GetMessageTopology(Type messageType);
    public sealed virtual BrokerTopology GetPublishBrokerTopology();
    private sealed virtual override IRabbitMqMessagePublishTopologyConfigurator`1<T> MassTransit.IRabbitMqPublishTopologyConfigurator.GetMessageTopology();
    protected virtual IMessagePublishTopologyConfigurator CreateMessageTopology();
}
public class MassTransit.RabbitMqTransport.Topology.RabbitMqSendSettings : RabbitMqExchangeConfigurator {
    private List`1<ExchangeBindingPublishTopologySpecification> _exchangeBindings;
    private bool _bindToQueue;
    private string _queueName;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <QueueArguments>k__BackingField;
    public IDictionary`2<string, object> QueueArguments { get; }
    public RabbitMqSendSettings(RabbitMqEndpointAddress address);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_QueueArguments();
    public sealed virtual RabbitMqEndpointAddress GetSendAddress(Uri hostAddress);
    public sealed virtual BrokerTopology GetBrokerTopology();
    public void BindToQueue(string queueName);
    public void BindToExchange(string exchangeName, Action`1<IRabbitMqExchangeBindingConfigurator> configure);
    public void BindToExchange(RabbitMqEndpointAddress address);
    public void SetQueueArgument(string key, object value);
    [IteratorStateMachineAttribute("MassTransit.RabbitMqTransport.Topology.RabbitMqSendSettings/<GetSettingStrings>d__13")]
private IEnumerable`1<string> GetSettingStrings();
    public virtual string ToString();
}
public class MassTransit.RabbitMqTransport.Topology.RabbitMqSendTopology : SendTopology {
    [CompilerGeneratedAttribute]
private IExchangeTypeSelector <ExchangeTypeSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityNameValidator <EntityNameValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IRabbitMqQueueBindingConfigurator> <ConfigureErrorSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IRabbitMqQueueBindingConfigurator> <ConfigureDeadLetterSettings>k__BackingField;
    public IExchangeTypeSelector ExchangeTypeSelector { get; }
    public IEntityNameValidator EntityNameValidator { get; }
    public Action`1<IRabbitMqQueueBindingConfigurator> ConfigureErrorSettings { get; public set; }
    public Action`1<IRabbitMqQueueBindingConfigurator> ConfigureDeadLetterSettings { get; public set; }
    public RabbitMqSendTopology(IEntityNameValidator validator);
    [CompilerGeneratedAttribute]
public IExchangeTypeSelector get_ExchangeTypeSelector();
    [CompilerGeneratedAttribute]
public sealed virtual IEntityNameValidator get_EntityNameValidator();
    [CompilerGeneratedAttribute]
public Action`1<IRabbitMqQueueBindingConfigurator> get_ConfigureErrorSettings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConfigureErrorSettings(Action`1<IRabbitMqQueueBindingConfigurator> value);
    [CompilerGeneratedAttribute]
public Action`1<IRabbitMqQueueBindingConfigurator> get_ConfigureDeadLetterSettings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConfigureDeadLetterSettings(Action`1<IRabbitMqQueueBindingConfigurator> value);
    private sealed virtual override IRabbitMqMessageSendTopologyConfigurator`1<T> MassTransit.IRabbitMqSendTopology.GetMessageTopology();
    public sealed virtual SendSettings GetSendSettings(RabbitMqEndpointAddress address);
    public sealed virtual ErrorSettings GetErrorSettings(ReceiveSettings settings);
    public sealed virtual DeadLetterSettings GetDeadLetterSettings(ReceiveSettings settings);
    protected virtual IMessageSendTopologyConfigurator CreateMessageTopology(Type type);
}
public class MassTransit.RabbitMqTransport.Topology.ReceiveEndpointBrokerTopologyBuilder : BrokerTopologyBuilder {
    [CompilerGeneratedAttribute]
private QueueHandle <Queue>k__BackingField;
    [CompilerGeneratedAttribute]
private ExchangeHandle <Exchange>k__BackingField;
    [CompilerGeneratedAttribute]
private ExchangeHandle <BoundExchange>k__BackingField;
    public QueueHandle Queue { get; public set; }
    public ExchangeHandle Exchange { get; public set; }
    public ExchangeHandle BoundExchange { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual QueueHandle get_Queue();
    [CompilerGeneratedAttribute]
public void set_Queue(QueueHandle value);
    [CompilerGeneratedAttribute]
public sealed virtual ExchangeHandle get_Exchange();
    [CompilerGeneratedAttribute]
public void set_Exchange(ExchangeHandle value);
    [CompilerGeneratedAttribute]
public sealed virtual ExchangeHandle get_BoundExchange();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BoundExchange(ExchangeHandle value);
}
[ExtensionAttribute]
public static class MassTransit.RabbitMqTransport.Topology.TopologyLayoutExtensions : object {
    [ExtensionAttribute]
public static void LogResult(BrokerTopology layout);
}
public class MassTransit.RabbitMqTransportOptions : object {
    private static int DefaultPort;
    private static int DefaultSslPort;
    private static int DefaultManagementPort;
    private static int DefaultSslManagementPort;
    private bool _useSsl;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <ManagementPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VHost>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionName>k__BackingField;
    public string Host { get; public set; }
    public ushort Port { get; public set; }
    public ushort ManagementPort { get; public set; }
    public string VHost { get; public set; }
    public string User { get; public set; }
    public string Pass { get; public set; }
    public string ConnectionName { get; public set; }
    public bool UseSsl { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    [CompilerGeneratedAttribute]
public ushort get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(ushort value);
    [CompilerGeneratedAttribute]
public ushort get_ManagementPort();
    [CompilerGeneratedAttribute]
public void set_ManagementPort(ushort value);
    [CompilerGeneratedAttribute]
public string get_VHost();
    [CompilerGeneratedAttribute]
public void set_VHost(string value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    [CompilerGeneratedAttribute]
public string get_Pass();
    [CompilerGeneratedAttribute]
public void set_Pass(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectionName();
    [CompilerGeneratedAttribute]
public void set_ConnectionName(string value);
    public bool get_UseSsl();
    public void set_UseSsl(bool value);
}
public class MassTransit.RefreshConnectionFactoryCallback : MulticastDelegate {
    public RefreshConnectionFactoryCallback(object object, IntPtr method);
    public virtual Task Invoke(ConnectionFactory connectionFactory);
    public virtual IAsyncResult BeginInvoke(ConnectionFactory connectionFactory, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class MassTransit.Testing.RabbitMqTestHarness : BusTestHarness {
    private Uri _hostAddress;
    private Uri _inputQueueAddress;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CleanVirtualHost>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputQueueName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeHostName>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageNameFormatter <NameFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IRabbitMqBusFactoryConfigurator> OnConfigureRabbitMqBus;
    [CompilerGeneratedAttribute]
private Action`1<IRabbitMqReceiveEndpointConfigurator> OnConfigureRabbitMqReceiveEndpoint;
    [CompilerGeneratedAttribute]
private Action`1<IRabbitMqHostConfigurator> OnConfigureRabbitMqHost;
    [CompilerGeneratedAttribute]
private Action`1<IModel> OnCleanupVirtualHost;
    public Uri HostAddress { get; public set; }
    public string Username { get; public set; }
    public string Password { get; public set; }
    public bool CleanVirtualHost { get; public set; }
    public string InputQueueName { get; }
    public string NodeHostName { get; public set; }
    public IMessageNameFormatter NameFormatter { get; }
    public Uri InputQueueAddress { get; }
    public RabbitMqTestHarness(string inputQueueName);
    public Uri get_HostAddress();
    public void set_HostAddress(Uri value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public bool get_CleanVirtualHost();
    [CompilerGeneratedAttribute]
public void set_CleanVirtualHost(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_InputQueueName();
    [CompilerGeneratedAttribute]
public string get_NodeHostName();
    [CompilerGeneratedAttribute]
public void set_NodeHostName(string value);
    [CompilerGeneratedAttribute]
public IMessageNameFormatter get_NameFormatter();
    public virtual Uri get_InputQueueAddress();
    [CompilerGeneratedAttribute]
public void add_OnConfigureRabbitMqBus(Action`1<IRabbitMqBusFactoryConfigurator> value);
    [CompilerGeneratedAttribute]
public void remove_OnConfigureRabbitMqBus(Action`1<IRabbitMqBusFactoryConfigurator> value);
    [CompilerGeneratedAttribute]
public void add_OnConfigureRabbitMqReceiveEndpoint(Action`1<IRabbitMqReceiveEndpointConfigurator> value);
    [CompilerGeneratedAttribute]
public void remove_OnConfigureRabbitMqReceiveEndpoint(Action`1<IRabbitMqReceiveEndpointConfigurator> value);
    [CompilerGeneratedAttribute]
public void add_OnConfigureRabbitMqHost(Action`1<IRabbitMqHostConfigurator> value);
    [CompilerGeneratedAttribute]
public void remove_OnConfigureRabbitMqHost(Action`1<IRabbitMqHostConfigurator> value);
    [CompilerGeneratedAttribute]
public void add_OnCleanupVirtualHost(Action`1<IModel> value);
    [CompilerGeneratedAttribute]
public void remove_OnCleanupVirtualHost(Action`1<IModel> value);
    protected virtual void ConfigureRabbitMqBus(IRabbitMqBusFactoryConfigurator configurator);
    protected virtual void ConfigureRabbitMqReceiveEndpoint(IRabbitMqReceiveEndpointConfigurator configurator);
    protected virtual void ConfigureRabbitMqHost(IRabbitMqHostConfigurator configurator);
    protected virtual void CleanupVirtualHost(IModel model);
    protected virtual void ConfigureHost(IRabbitMqBusFactoryConfigurator configurator);
    public RabbitMqHostSettings GetHostSettings();
    [AsyncStateMachineAttribute("MassTransit.Testing.RabbitMqTestHarness/<Clean>d__48")]
public virtual Task Clean();
    [AsyncStateMachineAttribute("MassTransit.Testing.RabbitMqTestHarness/<GetVirtualHostEntities>d__49")]
private Task`1<IList`1<string>> GetVirtualHostEntities(string element);
    protected virtual IBusControl CreateBus();
    private void ConfigureHostSettings(IRabbitMqHostConfigurator configurator);
    private void CleanUpVirtualHost();
    [CompilerGeneratedAttribute]
private void <ConfigureHost>b__46_0(IRabbitMqHostConfigurator h);
    [CompilerGeneratedAttribute]
private void <CreateBus>b__50_0(IRabbitMqBusFactoryConfigurator x);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <CreateBus>b__50_1(IRabbitMqReceiveEndpointConfigurator e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <ConfigureHostSettings>b__51_0(IRabbitMqClusterConfigurator c);
}
public class MassTransit.Testing.RabbitMqTestHarnessHostedService : object {
    private ILogger`1<RabbitMqTestHarnessHostedService> _logger;
    private RabbitMqTestHarnessOptions _testOptions;
    private RabbitMqTransportOptions _transportOptions;
    public RabbitMqTestHarnessHostedService(IOptions`1<RabbitMqTransportOptions> transportOptions, IOptions`1<RabbitMqTestHarnessOptions> testOptions, ILogger`1<RabbitMqTestHarnessHostedService> logger);
    [AsyncStateMachineAttribute("MassTransit.Testing.RabbitMqTestHarnessHostedService/<StartAsync>d__4")]
public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MassTransit.Testing.RabbitMqTestHarnessHostedService/<EnsureVirtualHostExists>d__6")]
private Task EnsureVirtualHostExists();
    [AsyncStateMachineAttribute("MassTransit.Testing.RabbitMqTestHarnessHostedService/<CleanVirtualHost>d__7")]
private Task CleanVirtualHost();
    [AsyncStateMachineAttribute("MassTransit.Testing.RabbitMqTestHarnessHostedService/<ConfigureVirtualHost>d__8")]
private Task ConfigureVirtualHost();
    [AsyncStateMachineAttribute("MassTransit.Testing.RabbitMqTestHarnessHostedService/<GetVirtualHostEntities>d__9")]
private Task`1<IList`1<string>> GetVirtualHostEntities(string element);
    private HttpClient GetHttpClient();
    private UriBuilder GetUriBuilder(string pathValue);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
