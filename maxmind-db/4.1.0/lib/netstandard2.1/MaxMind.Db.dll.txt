[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MaxMind.Db.ArrayBuffer : Buffer {
    private Byte[] _fileBytes;
    public ArrayBuffer(Byte[] array);
    public ArrayBuffer(string file);
    internal ArrayBuffer(Stream stream);
    [AsyncStateMachineAttribute("MaxMind.Db.ArrayBuffer/<CreateAsync>d__4")]
public static Task`1<ArrayBuffer> CreateAsync(string file);
    [AsyncStateMachineAttribute("MaxMind.Db.ArrayBuffer/<CreateAsync>d__5")]
internal static Task`1<ArrayBuffer> CreateAsync(Stream stream);
    private static Byte[] BytesFromStream(Stream stream);
    [AsyncStateMachineAttribute("MaxMind.Db.ArrayBuffer/<BytesFromStreamAsync>d__7")]
private static Task`1<Byte[]> BytesFromStreamAsync(Stream stream);
    public virtual Byte[] Read(long offset, int count);
    public virtual byte ReadOne(long offset);
    public virtual string ReadString(long offset, int count);
    public virtual int ReadInt(long offset);
    public virtual int ReadVarInt(long offset, int count);
}
internal abstract class MaxMind.Db.Buffer : object {
    [CompilerGeneratedAttribute]
private long <Length>k__BackingField;
    public long Length { get; protected set; }
    [NullableContextAttribute("1")]
public abstract virtual Byte[] Read(long offset, int count);
    [NullableContextAttribute("1")]
public abstract virtual string ReadString(long offset, int count);
    public abstract virtual int ReadInt(long offset);
    public abstract virtual int ReadVarInt(long offset, int count);
    public abstract virtual byte ReadOne(long offset);
    [CompilerGeneratedAttribute]
public long get_Length();
    [CompilerGeneratedAttribute]
protected void set_Length(long value);
    internal BigInteger ReadBigInteger(long offset, int size);
    internal double ReadDouble(long offset);
    internal float ReadFloat(long offset);
    internal long ReadLong(long offset, int size);
    internal ulong ReadULong(long offset, int size);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[DefaultMemberAttribute("Item")]
internal class MaxMind.Db.CachedDictionary`2 : object {
    private Dictionary`2<TKey, LinkedListNode`1<KeyValuePair`2<TKey, TValue>>> dictionary;
    private LinkedList`1<KeyValuePair`2<TKey, TValue>> priorityList;
    private int maxCount;
    public TValue Item { get; public set; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public CachedDictionary`2(int maxCount, IEqualityComparer`1<TKey> comparer);
    private void MoveToFront(LinkedListNode`1<KeyValuePair`2<TKey, TValue>> node);
    private void InternalAdd(TKey key, TValue value);
    private bool InternalRemove(TKey key);
    protected virtual bool OnGetExternalKeyValue(TKey& key, TValue& value);
    protected void SetComparer(IEqualityComparer`1<TKey> comparer);
    protected virtual bool OnRemoveExternalKey(TKey key);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public bool TryGetValueRef(TKey& key, TValue& value);
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    [IteratorStateMachineAttribute("MaxMind.Db.CachedDictionary`2/<GetEnumerator>d__33")]
public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class MaxMind.Db.CachedItemRemovedDelegate`2 : MulticastDelegate {
    public CachedItemRemovedDelegate`2(object object, IntPtr method);
    public virtual void Invoke(CachedDictionary`2<TKey, TValue> dictionary, TKey key, TValue value);
    public virtual IAsyncResult BeginInvoke(CachedDictionary`2<TKey, TValue> dictionary, TKey key, TValue value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("32")]
public class MaxMind.Db.ConstructorAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MaxMind.Db.Decoder : object {
    private Buffer _database;
    private long _pointerBase;
    private bool _followPointers;
    private Int32[] _pointerValueOffset;
    private DictionaryActivatorCreator _dictionaryActivatorCreator;
    private ListActivatorCreator _listActivatorCreator;
    private TypeAcivatorCreator _typeAcivatorCreator;
    internal Decoder(Buffer database, long pointerBase, bool followPointers);
    internal T Decode(long offset, Int64& outOffset, InjectableValues injectables, Network network);
    private object Decode(Type expectedType, long offset, Int64& outOffset, InjectableValues injectables, Network network);
    private ObjectType CtrlData(long offset, Int32& size, Int64& outOffset);
    private object DecodeByType(Type expectedType, ObjectType type, long offset, int size, Int64& outOffset, InjectableValues injectables, Network network);
    private static bool DecodeBoolean(Type expectedType, int size);
    private double DecodeDouble(Type expectedType, long offset, int size);
    private float DecodeFloat(Type expectedType, long offset, int size);
    private string DecodeString(Type expectedType, long offset, int size);
    private Byte[] DecodeBytes(Type expectedType, long offset, int size);
    private object DecodeMap(Type expectedType, long offset, int size, Int64& outOffset, InjectableValues injectables, Network network);
    private object DecodeMapToDictionary(Type expectedType, long offset, int size, Int64& outOffset, InjectableValues injectables, Network network);
    private object DecodeMapToType(Type expectedType, long offset, int size, Int64& outOffset, InjectableValues injectables, Network network);
    [NullableContextAttribute("2")]
private void SetAlwaysCreatedParams(TypeActivator constructor, Object[] parameters, InjectableValues injectables, Network network);
    private static void SetInjectables(TypeActivator constructor, Object[] parameters, InjectableValues injectables);
    [NullableContextAttribute("2")]
private static void SetNetwork(TypeActivator constructor, Object[] parameters, Network network);
    private Key DecodeKey(long offset, Int64& outOffset);
    private long NextValueOffset(long offset, int numberToSkip);
    private long DecodeLong(Type expectedType, long offset, int size);
    private object DecodeArray(Type expectedType, int size, long offset, Int64& outOffset, InjectableValues injectables, Network network);
    private ulong DecodeUInt64(Type expectedType, long offset, int size);
    private BigInteger DecodeBigInteger(Type expectedType, long offset, int size);
    private long DecodePointer(long offset, int size, Int64& outOffset);
    private int DecodeInteger(Type expectedType, long offset, int size);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MaxMind.Db.DeserializationException : Exception {
    public DeserializationException(string message);
    public DeserializationException(string message, Exception innerException);
    private DeserializationException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MaxMind.Db.DictionaryActivatorCreator : object {
    private ConcurrentDictionary`2<Type, ObjectActivator> _dictActivators;
    internal ObjectActivator GetActivator(Type expectedType);
    private static ObjectActivator DictionaryActivator(Type expectedType);
}
public enum MaxMind.Db.FileAccessMode : Enum {
    public int value__;
    public static FileAccessMode MemoryMapped;
    public static FileAccessMode MemoryMappedGlobal;
    public static FileAccessMode Memory;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MaxMind.Db.InjectableValues : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Values>k__BackingField;
    internal IDictionary`2<string, object> Values { get; }
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, object> get_Values();
    public void AddValue(string key, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
public class MaxMind.Db.InjectAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public InjectAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MaxMind.Db.InvalidDatabaseException : Exception {
    public InvalidDatabaseException(string message);
    public InvalidDatabaseException(string message, Exception innerException);
    private InvalidDatabaseException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class MaxMind.Db.Key : ValueType {
    private Buffer buffer;
    private long offset;
    private int size;
    private int hashCode;
    public Key(Buffer buffer, long offset, int size);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MaxMind.Db.ListActivatorCreator : object {
    private ConcurrentDictionary`2<Type, ObjectActivator> _listActivators;
    internal ObjectActivator GetActivator(Type expectedType);
    private static ObjectActivator ListActivator(Type expectedType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MaxMind.Db.MemoryMapBuffer : Buffer {
    private static object FileLocker;
    private MemoryMappedFile _memoryMappedFile;
    private MemoryMappedViewAccessor _view;
    private bool _disposed;
    internal MemoryMapBuffer(string file, bool useGlobalNamespace);
    private MemoryMapBuffer(string file, bool useGlobalNamespace, FileInfo fileInfo);
    private static MemoryMapBuffer();
    public virtual Byte[] Read(long offset, int count);
    public virtual byte ReadOne(long offset);
    public virtual string ReadString(long offset, int count);
    public virtual int ReadInt(long offset);
    public virtual int ReadVarInt(long offset, int count);
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MaxMind.Db.Metadata : object {
    [CompilerGeneratedAttribute]
private int <BinaryFormatMajorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BinaryFormatMinorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <BuildEpoch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IPVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Languages>k__BackingField;
    [CompilerGeneratedAttribute]
private long <NodeCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RecordSize>k__BackingField;
    public int BinaryFormatMajorVersion { get; }
    public int BinaryFormatMinorVersion { get; }
    internal ulong BuildEpoch { get; }
    public DateTime BuildDate { get; }
    public string DatabaseType { get; }
    public IDictionary`2<string, string> Description { get; }
    public int IPVersion { get; }
    public IReadOnlyList`1<string> Languages { get; }
    internal long NodeCount { get; }
    internal int RecordSize { get; }
    internal long NodeByteSize { get; }
    internal long SearchTreeSize { get; }
    [ConstructorAttribute]
[CLSCompliantAttribute("False")]
public Metadata(int binaryFormatMajorVersion, int binaryFormatMinorVersion, ulong buildEpoch, string databaseType, IDictionary`2<string, string> description, int ipVersion, IReadOnlyList`1<string> languages, long nodeCount, int recordSize);
    [CompilerGeneratedAttribute]
public int get_BinaryFormatMajorVersion();
    [CompilerGeneratedAttribute]
public int get_BinaryFormatMinorVersion();
    [CompilerGeneratedAttribute]
internal ulong get_BuildEpoch();
    public DateTime get_BuildDate();
    [CompilerGeneratedAttribute]
public string get_DatabaseType();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Description();
    [CompilerGeneratedAttribute]
public int get_IPVersion();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Languages();
    [CompilerGeneratedAttribute]
internal long get_NodeCount();
    [CompilerGeneratedAttribute]
internal int get_RecordSize();
    internal long get_NodeByteSize();
    internal long get_SearchTreeSize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MaxMind.Db.Network : object {
    private IPAddress ip;
    [CompilerGeneratedAttribute]
private int <PrefixLength>k__BackingField;
    public int PrefixLength { get; }
    public IPAddress NetworkAddress { get; }
    public Network(IPAddress ip, int prefixLength);
    [CompilerGeneratedAttribute]
public int get_PrefixLength();
    public IPAddress get_NetworkAddress();
    public virtual string ToString();
}
[AttributeUsageAttribute("2048")]
public class MaxMind.Db.NetworkAttribute : Attribute {
}
internal class MaxMind.Db.ObjectActivator : MulticastDelegate {
    public ObjectActivator(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual object Invoke(Object[] args);
    public virtual IAsyncResult BeginInvoke(Object[] args, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal enum MaxMind.Db.ObjectType : Enum {
    public int value__;
    public static ObjectType Extended;
    public static ObjectType Pointer;
    public static ObjectType Utf8String;
    public static ObjectType Double;
    public static ObjectType Bytes;
    public static ObjectType Uint16;
    public static ObjectType Uint32;
    public static ObjectType Map;
    public static ObjectType Int32;
    public static ObjectType Uint64;
    public static ObjectType Uint128;
    public static ObjectType Array;
    public static ObjectType Container;
    public static ObjectType EndMarker;
    public static ObjectType Boolean;
    public static ObjectType Float;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
public class MaxMind.Db.ParameterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlwaysCreate>k__BackingField;
    public string ParameterName { get; }
    public bool AlwaysCreate { get; }
    public ParameterAttribute(string parameterName, bool alwaysCreate);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
public bool get_AlwaysCreate();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MaxMind.Db.Reader : object {
    private static int DataSectionSeparatorSize;
    private Buffer _database;
    [NullableAttribute("2")]
private string _fileName;
    private long _dataPointerOffset;
    private int _dbIPVersion;
    private long _nodeByteSize;
    private long _nodeCount;
    private int _recordSize;
    private long _searchTreeSize;
    private Byte[] _metadataStartMarker;
    private bool _disposed;
    private int _ipV4Start;
    [CompilerGeneratedAttribute]
private Metadata <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private Decoder <Decoder>k__BackingField;
    public Metadata Metadata { get; }
    private Decoder Decoder { get; }
    public Reader(string file);
    public Reader(string file, FileAccessMode mode);
    public Reader(Stream stream);
    private Reader(Buffer buffer, string file);
    [AsyncStateMachineAttribute("MaxMind.Db.Reader/<CreateAsync>d__18")]
public static Task`1<Reader> CreateAsync(string file);
    [AsyncStateMachineAttribute("MaxMind.Db.Reader/<CreateAsync>d__19")]
public static Task`1<Reader> CreateAsync(Stream stream);
    private static Buffer BufferForMode(string file, FileAccessMode mode);
    [CompilerGeneratedAttribute]
public Metadata get_Metadata();
    [CompilerGeneratedAttribute]
private Decoder get_Decoder();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    public T Find(IPAddress ipAddress, InjectableValues injectables);
    public T Find(IPAddress ipAddress, Int32& prefixLength, InjectableValues injectables);
    [IteratorStateMachineAttribute("MaxMind.Db.Reader/<FindAll>d__31`1")]
public IEnumerable`1<ReaderIteratorNode`1<T>> FindAll(InjectableValues injectables, int cacheSize);
    private T ResolveDataPointer(int pointer, InjectableValues injectables, Network network);
    private int FindAddressInTree(IPAddress address, Int32& prefixLength);
    private int StartNode(int bitLength);
    private long FindMetadataStart();
    private int ReadNode(int nodeNumber, int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class MaxMind.Db.ReflectionUtil : object {
    internal static ObjectActivator CreateActivator(ConstructorInfo constructor);
    internal static void CheckType(Type expected, Type from);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MaxMind.Db.TypeAcivatorCreator : object {
    private ConcurrentDictionary`2<Type, TypeActivator> _typeConstructors;
    internal TypeActivator GetActivator(Type expectedType);
    private static TypeActivator ClassActivator(Type expectedType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MaxMind.Db.TypeActivator : ValueType {
    internal ObjectActivator Activator;
    internal List`1<ParameterInfo> AlwaysCreatedParameters;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Object[] _defaultParameters;
    internal Dictionary`2<Key, ParameterInfo> DeserializationParameters;
    internal Dictionary`2<string, ParameterInfo> InjectableParameters;
    internal List`1<ParameterInfo> NetworkParameters;
    internal Type[] ParameterTypes;
    internal TypeActivator(ObjectActivator activator, Dictionary`2<Key, ParameterInfo> deserializationParameters, Dictionary`2<string, ParameterInfo> injectables, List`1<ParameterInfo> networkParameters, List`1<ParameterInfo> alwaysCreatedParameters);
    internal Object[] DefaultParameters();
    private static object DefaultValue(Type type);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
