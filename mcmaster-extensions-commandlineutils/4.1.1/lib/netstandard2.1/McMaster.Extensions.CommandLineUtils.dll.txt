[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class McMaster.Extensions.CommandLineUtils.Abstractions.ArrayParser : object {
    private Type _elementType;
    private IValueParser _elementParser;
    private CultureInfo _parserCulture;
    public ArrayParser(Type elementType, IValueParser elementParser, CultureInfo parserCulture);
    public sealed virtual object Parse(string argName, IReadOnlyList`1<string> values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext : object {
    private String[] _args;
    private string _workDir;
    private IConsole _console;
    public String[] Arguments { get; protected set; }
    public string WorkingDirectory { get; protected set; }
    public IConsole Console { get; protected set; }
    public String[] get_Arguments();
    protected void set_Arguments(String[] value);
    public string get_WorkingDirectory();
    protected void set_WorkingDirectory(string value);
    public IConsole get_Console();
    protected void set_Console(IConsole value);
}
internal static class McMaster.Extensions.CommandLineUtils.Abstractions.EnumParser : object {
    [NullableContextAttribute("1")]
public static IValueParser Create(Type enumType);
}
[FlagsAttribute]
internal enum McMaster.Extensions.CommandLineUtils.Abstractions.FilePathType : Enum {
    public int value__;
    public static FilePathType Directory;
    public static FilePathType File;
    public static FilePathType Any;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class McMaster.Extensions.CommandLineUtils.Abstractions.HashSetParser : object {
    private IValueParser _elementParser;
    private Type _listType;
    private MethodInfo _addMethod;
    private CultureInfo _parserCulture;
    public HashSetParser(Type elementType, IValueParser elementParser, CultureInfo parserCulture);
    public sealed virtual object Parse(string argName, IReadOnlyList`1<string> values);
}
[NullableContextAttribute("1")]
public interface McMaster.Extensions.CommandLineUtils.Abstractions.IModelAccessor {
    public abstract virtual Type GetModelType();
    public abstract virtual object GetModel();
}
[NullableContextAttribute("1")]
public interface McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser {
    public Type TargetType { get; }
    public abstract virtual Type get_TargetType();
    [NullableContextAttribute("2")]
public abstract virtual object Parse(string argName, string value, CultureInfo culture);
}
public interface McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser`1 {
    [NullableContextAttribute("1")]
public abstract virtual T Parse(string argName, string value, CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class McMaster.Extensions.CommandLineUtils.Abstractions.ListParser : object {
    private IValueParser _elementParser;
    private Type _listType;
    private CultureInfo _parserCulture;
    public ListParser(Type elementType, IValueParser elementParser, CultureInfo parserCulture);
    public sealed virtual object Parse(string argName, IReadOnlyList`1<string> values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class McMaster.Extensions.CommandLineUtils.Abstractions.NullableValueParser : object {
    private IValueParser _wrapped;
    public Type TargetType { get; }
    public NullableValueParser(IValueParser boxedParser);
    public sealed virtual Type get_TargetType();
    [NullableContextAttribute("2")]
public sealed virtual object Parse(string argName, string value, CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult : object {
    [CompilerGeneratedAttribute]
private CommandLineApplication <SelectedCommand>k__BackingField;
    public CommandLineApplication SelectedCommand { get; public set; }
    public ParseResult(CommandLineApplication selectedCommand);
    [CompilerGeneratedAttribute]
public CommandLineApplication get_SelectedCommand();
    [CompilerGeneratedAttribute]
public void set_SelectedCommand(CommandLineApplication value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class McMaster.Extensions.CommandLineUtils.Abstractions.StockValueParsers : object {
    public static IValueParser`1<bool> Boolean;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IValueParser`1<string> String;
    public static IValueParser`1<Uri> Uri;
    public static IValueParser`1<double> Double;
    public static IValueParser`1<float> Float;
    public static IValueParser`1<short> Int16;
    public static IValueParser`1<int> Int32;
    public static IValueParser`1<long> Int64;
    public static IValueParser`1<byte> Byte;
    public static IValueParser`1<ushort> UInt16;
    public static IValueParser`1<UInt32> UInt32;
    public static IValueParser`1<ulong> UInt64;
    public static IValueParser`1<DateTime> DateTime;
    public static IValueParser`1<DateTimeOffset> DateTimeOffset;
    public static IValueParser`1<TimeSpan> TimeSpan;
    private static StockValueParsers();
    private static FormatException InvalidValueException(string argName, string specifics);
    private static IValueParser`1<T> Create(NumberParser`1<T> parser, NumberStyles styles, Func`3<string, string, FormatException> errorSelector);
    private static IValueParser`1<T> FloatingPointParser(NumberParser`1<T> parser);
    private static IValueParser`1<T> IntegerParser(NumberParser`1<T> parser);
    private static IValueParser`1<T> NonNegativeIntegerParser(NumberParser`1<T> parser);
    private static IValueParser`1<T> Create(DateTimeParser`1<T> parser, DateTimeStyles styles, Func`3<string, string, FormatException> errorSelector);
}
internal class McMaster.Extensions.CommandLineUtils.Abstractions.TupleValueParser : object {
    [NullableContextAttribute("1")]
public static IValueParser`1<Tuple`2<bool, T>> Create(IValueParser`1<T> typeParser);
}
internal class McMaster.Extensions.CommandLineUtils.Abstractions.TypeDescriptorValueParserFactory : object {
    [NullableContextAttribute("2")]
public bool TryGetParser(IValueParser& parser);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class McMaster.Extensions.CommandLineUtils.Abstractions.ValueParser : object {
    public static IValueParser Create(Type targetType, Func`4<string, string, CultureInfo, object> parser);
    public static IValueParser`1<T> Create(Func`4<string, string, CultureInfo, T> parser);
    public static IValueParser`1<T> Create(Func`3<string, CultureInfo, ValueTuple`2<bool, T>> parser);
    public static IValueParser`1<T> Create(Func`3<string, CultureInfo, ValueTuple`2<bool, T>> parser, Func`3<string, string, FormatException> errorSelector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.Abstractions.ValueParserProvider : object {
    private Dictionary`2<Type, IValueParser> _parsers;
    private TypeDescriptorValueParserFactory _defaultValueParserFactory;
    [CompilerGeneratedAttribute]
private CultureInfo <ParseCulture>k__BackingField;
    private static MethodInfo s_getParserGeneric;
    public CultureInfo ParseCulture { get; public set; }
    private static ValueParserProvider();
    [CompilerGeneratedAttribute]
public CultureInfo get_ParseCulture();
    [CompilerGeneratedAttribute]
public void set_ParseCulture(CultureInfo value);
    public IValueParser GetParser(Type type);
    [NullableContextAttribute("2")]
public IValueParser`1<T> GetParser();
    [NullableContextAttribute("2")]
internal IValueParser GetParserImpl();
    public void Add(IValueParser parser);
    public void AddRange(IEnumerable`1<IValueParser> parsers);
    public void AddOrReplace(IValueParser parser);
    private void SafeAdd(IValueParser parser, bool andReplace);
}
internal static class McMaster.Extensions.CommandLineUtils.Abstractions.ValueTupleValueParser : object {
    [NullableContextAttribute("1")]
public static IValueParser`1<ValueTuple`2<bool, T>> Create(IValueParser`1<T> typeParser);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("128")]
public class McMaster.Extensions.CommandLineUtils.AllowedValuesAttribute : ValidationAttribute {
    private String[] _allowedValues;
    [CompilerGeneratedAttribute]
private StringComparison <Comparer>k__BackingField;
    internal ReadOnlyCollection`1<string> AllowedValues { get; }
    public StringComparison Comparer { get; public set; }
    public bool IgnoreCase { get; public set; }
    public AllowedValuesAttribute(String[] allowedValues);
    public AllowedValuesAttribute(StringComparison comparer, String[] allowedValues);
    internal ReadOnlyCollection`1<string> get_AllowedValues();
    private static string GetDefaultError(String[] allowedValues);
    [CompilerGeneratedAttribute]
public StringComparison get_Comparer();
    [CompilerGeneratedAttribute]
public void set_Comparer(StringComparison value);
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
    [NullableContextAttribute("2")]
protected virtual ValidationResult IsValid(object value, ValidationContext validationContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class McMaster.Extensions.CommandLineUtils.AnsiConsole : object {
    private int _boldRecursion;
    private bool _useConsoleColor;
    [CompilerGeneratedAttribute]
private TextWriter <Writer>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <OriginalForegroundColor>k__BackingField;
    public TextWriter Writer { get; }
    public ConsoleColor OriginalForegroundColor { get; }
    private AnsiConsole(TextWriter writer, bool useConsoleColor);
    public static AnsiConsole GetOutput(bool useConsoleColor);
    public static AnsiConsole GetError(bool useConsoleColor);
    [CompilerGeneratedAttribute]
public TextWriter get_Writer();
    [CompilerGeneratedAttribute]
public ConsoleColor get_OriginalForegroundColor();
    private void SetColor(ConsoleColor color);
    private void SetBold(bool bold);
    public void WriteLine(string message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("128")]
public class McMaster.Extensions.CommandLineUtils.ArgumentAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInHelpText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public int Order { get; public set; }
    public string Name { get; public set; }
    public bool ShowInHelpText { get; public set; }
    public string Description { get; public set; }
    public ArgumentAttribute(int order);
    public ArgumentAttribute(int order, string name);
    public ArgumentAttribute(int order, string name, string description);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowInHelpText();
    [CompilerGeneratedAttribute]
public void set_ShowInHelpText(bool value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [NullableContextAttribute("1")]
internal CommandArgument Configure(PropertyInfo prop);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class McMaster.Extensions.CommandLineUtils.ArgumentEscaper : object {
    public static string EscapeAndConcatenate(IEnumerable`1<string> args);
    private static string EscapeSingleArg(string arg);
    private static bool IsSurroundedWithQuotes(string argument);
    private static bool ContainsWhitespace(string argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class McMaster.Extensions.CommandLineUtils.CollectionParserProvider : object {
    [CompilerGeneratedAttribute]
private static CollectionParserProvider <Default>k__BackingField;
    public static CollectionParserProvider Default { get; }
    private static CollectionParserProvider();
    [CompilerGeneratedAttribute]
public static CollectionParserProvider get_Default();
    public ICollectionParser GetParser(Type type, ValueParserProvider valueParsers);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.CommandArgument : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private protected List`1<string> _values;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInHelpText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultipleValues>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ICollection`1<IArgumentValidator> <Validators>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <UnderlyingType>k__BackingField;
    public string Name { get; public set; }
    public bool ShowInHelpText { get; public set; }
    public string Description { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<string> Values { get; }
    public bool MultipleValues { get; public set; }
    public string Value { get; }
    public string DefaultValue { get; public set; }
    public bool HasValue { get; }
    [NullableAttribute("1")]
public ICollection`1<IArgumentValidator> Validators { get; }
    internal Type UnderlyingType { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowInHelpText();
    [CompilerGeneratedAttribute]
public void set_ShowInHelpText(bool value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    public IReadOnlyList`1<string> get_Values();
    [CompilerGeneratedAttribute]
public bool get_MultipleValues();
    [CompilerGeneratedAttribute]
public void set_MultipleValues(bool value);
    public string get_Value();
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    public bool get_HasValue();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public ICollection`1<IArgumentValidator> get_Validators();
    [CompilerGeneratedAttribute]
internal Type get_UnderlyingType();
    [CompilerGeneratedAttribute]
internal void set_UnderlyingType(Type value);
    public bool TryParse(string value);
    public virtual void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.CommandArgument`1 : CommandArgument {
    private List`1<T> _parsedValues;
    private IValueParser`1<T> _valueParser;
    private bool _hasBeenParsed;
    private bool _hasDefaultValue;
    [NullableAttribute("2")]
private T _defaultValue;
    public T ParsedValue { get; }
    public IReadOnlyList`1<T> ParsedValues { get; }
    [NullableAttribute("2")]
public T DefaultValue { get; public set; }
    public CommandArgument`1(IValueParser`1<T> valueParser);
    public T get_ParsedValue();
    public IReadOnlyList`1<T> get_ParsedValues();
    [NullableContextAttribute("2")]
public T get_DefaultValue();
    [NullableContextAttribute("2")]
public void set_DefaultValue(T value);
    private sealed virtual override void McMaster.Extensions.CommandLineUtils.IInternalCommandParamOfT.Parse(CultureInfo culture);
    [NullableContextAttribute("2")]
private void SetBaseDefaultValue(T value);
    public virtual void Reset();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class McMaster.Extensions.CommandLineUtils.CommandAttribute : Attribute {
    [NullableAttribute("1")]
private String[] _names;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInHelpText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtendedHelpText>k__BackingField;
    private Nullable`1<UnrecognizedArgumentHandling> _unrecognizedArgumentHandling;
    [CompilerGeneratedAttribute]
private bool <AllowArgumentSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseFileHandling <ResponseFileHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private StringComparison <OptionsComparison>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private CultureInfo <ParseCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsePagerForHelpText>k__BackingField;
    private Nullable`1<bool> _clusterOptions;
    public string Name { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<string> Names { get; }
    public string FullName { get; public set; }
    public string Description { get; public set; }
    public bool ShowInHelpText { get; public set; }
    public string ExtendedHelpText { get; public set; }
    public UnrecognizedArgumentHandling UnrecognizedArgumentHandling { get; public set; }
    public bool AllowArgumentSeparator { get; public set; }
    public ResponseFileHandling ResponseFileHandling { get; public set; }
    public StringComparison OptionsComparison { get; public set; }
    [NullableAttribute("1")]
public CultureInfo ParseCulture { get; public set; }
    public bool UsePagerForHelpText { get; public set; }
    public bool ClusterOptions { get; public set; }
    [NullableContextAttribute("1")]
public CommandAttribute(string name);
    [NullableContextAttribute("1")]
public CommandAttribute(String[] names);
    public string get_Name();
    public void set_Name(string value);
    [NullableContextAttribute("1")]
public IEnumerable`1<string> get_Names();
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public void set_FullName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowInHelpText();
    [CompilerGeneratedAttribute]
public void set_ShowInHelpText(bool value);
    [CompilerGeneratedAttribute]
public string get_ExtendedHelpText();
    [CompilerGeneratedAttribute]
public void set_ExtendedHelpText(string value);
    public UnrecognizedArgumentHandling get_UnrecognizedArgumentHandling();
    public void set_UnrecognizedArgumentHandling(UnrecognizedArgumentHandling value);
    [CompilerGeneratedAttribute]
public bool get_AllowArgumentSeparator();
    [CompilerGeneratedAttribute]
public void set_AllowArgumentSeparator(bool value);
    [CompilerGeneratedAttribute]
public ResponseFileHandling get_ResponseFileHandling();
    [CompilerGeneratedAttribute]
public void set_ResponseFileHandling(ResponseFileHandling value);
    [CompilerGeneratedAttribute]
public StringComparison get_OptionsComparison();
    [CompilerGeneratedAttribute]
public void set_OptionsComparison(StringComparison value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public CultureInfo get_ParseCulture();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_ParseCulture(CultureInfo value);
    [CompilerGeneratedAttribute]
public bool get_UsePagerForHelpText();
    [CompilerGeneratedAttribute]
public void set_UsePagerForHelpText(bool value);
    public bool get_ClusterOptions();
    public void set_ClusterOptions(bool value);
    [NullableContextAttribute("1")]
internal void Configure(CommandLineApplication app);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.CommandLineApplication : object {
    private static int HelpExitCode;
    internal static int ValidationErrorExitCode;
    private static int s_exitCodeOperationCanceled;
    private Func`2<CancellationToken, Task`1<int>> _handler;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Action`1<ParseResult>> _onParsingComplete;
    internal Dictionary`2<string, PropertyInfo> _shortOptions;
    internal Dictionary`2<string, PropertyInfo> _longOptions;
    private HashSet`1<string> _names;
    [NullableAttribute("2")]
private string _primaryCommandName;
    internal CommandLineContext _context;
    private ParserConfig _parserConfig;
    private IHelpTextGenerator _helpTextGenerator;
    [NullableAttribute("2")]
private CommandOption _optionHelp;
    private Lazy`1<IServiceProvider> _services;
    private ConventionContext _conventionContext;
    private List`1<IConvention> _conventions;
    private List`1<CommandArgument> _arguments;
    private List`1<CommandOption> _options;
    private List`1<CommandLineApplication> _subcommands;
    internal List`1<string> _remainingArguments;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private CommandLineApplication <Parent>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInHelpText>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ExtendedHelpText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsePagerForHelpText>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private CommandOption <OptionVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsShowingInformation>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Func`1<string> <LongVersionGetter>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Func`1<string> <ShortVersionGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowArgumentSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseFileHandling <ResponseFileHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private StringComparison <OptionsComparison>k__BackingField;
    private Nullable`1<bool> _clusterOptions;
    [CompilerGeneratedAttribute]
private ValueParserProvider <ValueParsers>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <Out>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MakeSuggestionsInErrorMessage>k__BackingField;
    [NullableAttribute("2")]
private IConventionBuilder _builder;
    private bool _settingContext;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IServiceProvider <AdditionalServices>k__BackingField;
    private Func`2<ValidationResult, int> _validationErrorHandler;
    [CompilerGeneratedAttribute]
private ICollection`1<ICommandValidator> <Validators>k__BackingField;
    [NullableAttribute("2")]
public CommandLineApplication Parent { get; public set; }
    public IHelpTextGenerator HelpTextGenerator { get; public set; }
    [NullableAttribute("2")]
public string Name { get; public set; }
    [NullableAttribute("2")]
public string FullName { get; public set; }
    [NullableAttribute("2")]
public string Description { get; public set; }
    public bool ShowInHelpText { get; public set; }
    [NullableAttribute("2")]
public string ExtendedHelpText { get; public set; }
    public IReadOnlyCollection`1<CommandOption> Options { get; }
    public bool UsePagerForHelpText { get; public set; }
    public IEnumerable`1<string> Names { get; }
    [NullableAttribute("2")]
public CommandOption OptionHelp { get; internal set; }
    [NullableAttribute("2")]
public CommandOption OptionVersion { get; internal set; }
    public IReadOnlyList`1<CommandArgument> Arguments { get; }
    public IReadOnlyList`1<string> RemainingArguments { get; }
    public UnrecognizedArgumentHandling UnrecognizedArgumentHandling { get; public set; }
    public bool IsShowingInformation { get; protected set; }
    [NullableAttribute("2")]
public Func`1<string> LongVersionGetter { get; public set; }
    [NullableAttribute("2")]
public Func`1<string> ShortVersionGetter { get; public set; }
    public IReadOnlyCollection`1<CommandLineApplication> Commands { get; }
    public bool AllowArgumentSeparator { get; public set; }
    public ResponseFileHandling ResponseFileHandling { get; public set; }
    public StringComparison OptionsComparison { get; public set; }
    public bool ClusterOptions { get; public set; }
    internal bool ClusterOptionsWasSetExplicitly { get; }
    public Char[] OptionNameValueSeparators { get; public set; }
    internal bool OptionNameAndValueCanBeSpaceSeparated { get; }
    public ValueParserProvider ValueParsers { get; private set; }
    public string WorkingDirectory { get; }
    public TextWriter Out { get; public set; }
    public TextWriter Error { get; public set; }
    public bool MakeSuggestionsInErrorMessage { get; public set; }
    public IConventionBuilder Conventions { get; }
    [NullableAttribute("2")]
internal IServiceProvider AdditionalServices { get; internal set; }
    public Func`2<ValidationResult, int> ValidationErrorHandler { get; public set; }
    public ICollection`1<ICommandValidator> Validators { get; }
    private static CommandLineApplication();
    public CommandLineApplication(IConsole console);
    public CommandLineApplication(IConsole console, string workingDirectory);
    public CommandLineApplication(IHelpTextGenerator helpTextGenerator, IConsole console, string workingDirectory);
    internal CommandLineApplication(CommandLineApplication parent, string name);
    internal CommandLineApplication(CommandLineApplication parent, IHelpTextGenerator helpTextGenerator, CommandLineContext context);
    private static Task`1<int> DefaultAction(CancellationToken ct);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public CommandLineApplication get_Parent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Parent(CommandLineApplication value);
    public IHelpTextGenerator get_HelpTextGenerator();
    public void set_HelpTextGenerator(IHelpTextGenerator value);
    [NullableContextAttribute("2")]
public string get_Name();
    [NullableContextAttribute("2")]
public void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_FullName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_FullName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Description();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowInHelpText();
    [CompilerGeneratedAttribute]
public void set_ShowInHelpText(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ExtendedHelpText();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ExtendedHelpText(string value);
    public IReadOnlyCollection`1<CommandOption> get_Options();
    [CompilerGeneratedAttribute]
public bool get_UsePagerForHelpText();
    [CompilerGeneratedAttribute]
public void set_UsePagerForHelpText(bool value);
    [IteratorStateMachineAttribute("McMaster.Extensions.CommandLineUtils.CommandLineApplication/<get_Names>d__61")]
public IEnumerable`1<string> get_Names();
    [NullableContextAttribute("2")]
public CommandOption get_OptionHelp();
    [NullableContextAttribute("2")]
internal void set_OptionHelp(CommandOption value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public CommandOption get_OptionVersion();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_OptionVersion(CommandOption value);
    public IReadOnlyList`1<CommandArgument> get_Arguments();
    public IReadOnlyList`1<string> get_RemainingArguments();
    public UnrecognizedArgumentHandling get_UnrecognizedArgumentHandling();
    public void set_UnrecognizedArgumentHandling(UnrecognizedArgumentHandling value);
    [CompilerGeneratedAttribute]
public bool get_IsShowingInformation();
    [CompilerGeneratedAttribute]
protected void set_IsShowingInformation(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Func`1<string> get_LongVersionGetter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_LongVersionGetter(Func`1<string> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Func`1<string> get_ShortVersionGetter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ShortVersionGetter(Func`1<string> value);
    public IReadOnlyCollection`1<CommandLineApplication> get_Commands();
    [CompilerGeneratedAttribute]
public bool get_AllowArgumentSeparator();
    [CompilerGeneratedAttribute]
public void set_AllowArgumentSeparator(bool value);
    [CompilerGeneratedAttribute]
public ResponseFileHandling get_ResponseFileHandling();
    [CompilerGeneratedAttribute]
public void set_ResponseFileHandling(ResponseFileHandling value);
    [CompilerGeneratedAttribute]
public StringComparison get_OptionsComparison();
    [CompilerGeneratedAttribute]
public void set_OptionsComparison(StringComparison value);
    public bool get_ClusterOptions();
    public void set_ClusterOptions(bool value);
    internal bool get_ClusterOptionsWasSetExplicitly();
    public Char[] get_OptionNameValueSeparators();
    public void set_OptionNameValueSeparators(Char[] value);
    internal bool get_OptionNameAndValueCanBeSpaceSeparated();
    [CompilerGeneratedAttribute]
public ValueParserProvider get_ValueParsers();
    [CompilerGeneratedAttribute]
private void set_ValueParsers(ValueParserProvider value);
    public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public TextWriter get_Out();
    [CompilerGeneratedAttribute]
public void set_Out(TextWriter value);
    [CompilerGeneratedAttribute]
public TextWriter get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(TextWriter value);
    public IEnumerable`1<CommandOption> GetOptions();
    public void AddName(string name);
    public void AddSubcommand(CommandLineApplication subcommand);
    [NullableContextAttribute("2")]
private void AssertCommandNameIsUnique(string name, CommandLineApplication commandToIgnore);
    public CommandLineApplication Command(string name, Action`1<CommandLineApplication> configuration);
    public CommandLineApplication`1<TModel> Command(string name, Action`1<CommandLineApplication`1<TModel>> configuration);
    public CommandOption Option(string template, string description, CommandOptionType optionType);
    public CommandOption Option(string template, string description, CommandOptionType optionType, bool inherited);
    public CommandOption Option(string template, string description, CommandOptionType optionType, Action`1<CommandOption> configuration);
    public CommandOption Option(string template, string description, CommandOptionType optionType, Action`1<CommandOption> configuration, bool inherited);
    public void AddOption(CommandOption option);
    public CommandOption`1<T> Option(string template, string description, CommandOptionType optionType, Action`1<CommandOption`1<T>> configuration, bool inherited);
    public CommandArgument Argument(string name, string description, bool multipleValues);
    public CommandArgument Argument(string name, string description, Action`1<CommandArgument> configuration, bool multipleValues);
    public CommandArgument`1<T> Argument(string name, string description, Action`1<CommandArgument`1<T>> configuration, bool multipleValues);
    public void AddArgument(CommandArgument argument);
    public void OnExecute(Func`1<int> invoke);
    public void OnExecuteAsync(Func`2<CancellationToken, Task`1<int>> invoke);
    private void Reset();
    public void OnParsingComplete(Action`1<ParseResult> action);
    public ParseResult Parse(String[] args);
    [CompilerGeneratedAttribute]
public bool get_MakeSuggestionsInErrorMessage();
    [CompilerGeneratedAttribute]
public void set_MakeSuggestionsInErrorMessage(bool value);
    protected virtual void HandleParseResult(ParseResult parseResult);
    public int Execute(String[] args);
    [AsyncStateMachineAttribute("McMaster.Extensions.CommandLineUtils.CommandLineApplication/<ExecuteAsync>d__154")]
public Task`1<int> ExecuteAsync(String[] args, CancellationToken cancellationToken);
    public CommandOption HelpOption(string template);
    public CommandOption HelpOption(string template, bool inherited);
    public CommandOption VersionOption(string template, string shortFormVersion, string longFormVersion);
    public CommandOption VersionOption(string template, Func`1<string> shortFormVersionGetter, Func`1<string> longFormVersionGetter);
    public virtual void ShowHint();
    public void ShowHelp();
    public void ShowHelp(bool usePager);
    public virtual string GetHelpText();
    public void ShowVersion();
    public virtual string GetVersionText();
    public virtual string GetFullNameAndVersion();
    public void ShowRootCommandFullNameAndVersion();
    internal bool MatchesName(string name);
    public IConventionBuilder get_Conventions();
    private protected virtual ConventionContext CreateConventionContext();
    internal void SetContext(CommandLineContext context);
    public virtual void Dispose();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal IServiceProvider get_AdditionalServices();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_AdditionalServices(IServiceProvider value);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    public static int Execute(CommandLineContext context);
    [AsyncStateMachineAttribute("McMaster.Extensions.CommandLineUtils.CommandLineApplication/<ExecuteAsync>d__183`1")]
public static Task`1<int> ExecuteAsync(CommandLineContext context, CancellationToken cancellationToken);
    public static int Execute(String[] args);
    public static int Execute(IConsole console, String[] args);
    public static Task`1<int> ExecuteAsync(String[] args);
    public static Task`1<int> ExecuteAsync(String[] args, CancellationToken cancellationToken);
    public static Task`1<int> ExecuteAsync(IConsole console, String[] args);
    public Func`2<ValidationResult, int> get_ValidationErrorHandler();
    public void set_ValidationErrorHandler(Func`2<ValidationResult, int> value);
    [CompilerGeneratedAttribute]
public ICollection`1<ICommandValidator> get_Validators();
    [NullableContextAttribute("2")]
public ValidationResult GetValidationResult();
    private int DefaultValidationErrorHandler(ValidationResult result);
    [CompilerGeneratedAttribute]
private IServiceProvider <.ctor>b__27_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.CommandLineApplication`1 : CommandLineApplication {
    [AllowNullAttribute]
private Lazy`1<TModel> _lazy;
    private Func`1<TModel> _modelFactory;
    public TModel Model { get; }
    public Func`1<TModel> ModelFactory { get; public set; }
    public CommandLineApplication`1(IConsole console);
    public CommandLineApplication`1(IConsole console, string workingDirectory);
    public CommandLineApplication`1(IHelpTextGenerator helpTextGenerator, IConsole console, string workingDirectory);
    internal CommandLineApplication`1(CommandLineApplication parent, string name);
    private void Initialize();
    private static TModel DefaultModelFactory();
    public TModel get_Model();
    private sealed virtual override Type McMaster.Extensions.CommandLineUtils.Abstractions.IModelAccessor.GetModelType();
    private sealed virtual override object McMaster.Extensions.CommandLineUtils.Abstractions.IModelAccessor.GetModel();
    protected virtual TModel CreateModel();
    public Func`1<TModel> get_ModelFactory();
    public void set_ModelFactory(Func`1<TModel> value);
    private protected virtual ConventionContext CreateConventionContext();
    public virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions : object {
    [ExtensionAttribute]
public static CommandArgument`1<T> Argument(CommandLineApplication app, string name, string description, bool multipleValues);
    [ExtensionAttribute]
public static CommandOption`1<T> Option(CommandLineApplication app, string template, string description, CommandOptionType optionType);
    [ExtensionAttribute]
public static CommandOption`1<T> Option(CommandLineApplication app, string template, string description, CommandOptionType optionType, bool inherited);
    [ExtensionAttribute]
public static CommandOption`1<T> Option(CommandLineApplication app, string template, string description, CommandOptionType optionType, Action`1<CommandOption`1<T>> configuration);
    [ExtensionAttribute]
public static CommandOption HelpOption(CommandLineApplication app);
    [ExtensionAttribute]
public static CommandOption HelpOption(CommandLineApplication app, bool inherited);
    [ExtensionAttribute]
public static CommandOption VerboseOption(CommandLineApplication app);
    [ExtensionAttribute]
public static CommandOption VerboseOption(CommandLineApplication app, string template);
    [ExtensionAttribute]
public static void OnExecuteAsync(CommandLineApplication app, Func`2<CancellationToken, Task> action);
    [ExtensionAttribute]
public static void OnExecute(CommandLineApplication app, Action action);
    [ExtensionAttribute]
public static void OnValidationError(CommandLineApplication app, Func`2<ValidationResult, int> action);
    [ExtensionAttribute]
public static void OnValidationError(CommandLineApplication app, Action`1<ValidationResult> action);
    [ExtensionAttribute]
public static CommandOption VersionOptionFromAssemblyAttributes(CommandLineApplication app, Assembly assembly);
    [ExtensionAttribute]
public static CommandOption VersionOptionFromAssemblyAttributes(CommandLineApplication app, string template, Assembly assembly);
    private static string GetInformationalVersion(Assembly assembly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class McMaster.Extensions.CommandLineUtils.CommandLineProcessor : object {
    private CommandLineApplication _initialCommand;
    private ArgumentEnumerator _enumerator;
    [NullableAttribute("2")]
private CommandArgumentEnumerator _currentCommandArguments;
    private CommandLineApplication _currentCommand { get; private set; }
    public CommandLineProcessor(CommandLineApplication command, IReadOnlyList`1<string> arguments);
    private CommandLineApplication get__currentCommand();
    private void set__currentCommand(CommandLineApplication value);
    private static void CheckForShortOptionClustering(CommandLineApplication command);
    [IteratorStateMachineAttribute("McMaster.Extensions.CommandLineUtils.CommandLineProcessor/<AllOptions>d__8")]
internal static IEnumerable`1<CommandOption> AllOptions(CommandLineApplication command);
    public ParseResult Process();
    private bool ProcessNext();
    private bool ProcessCommandOrParameter(CommandOrParameterArgument arg);
    private bool ProcessOption(OptionArgument arg);
    private CommandOption FindOption(string name, Func`2<CommandOption, string> by);
    private bool ProcessArgumentSeparator();
    private bool ProcessUnexpectedArg(string argTypeName, string argValue);
    private void AddRemainingArgumentValues();
    [CompilerGeneratedAttribute]
private void <ProcessOption>b__12_3(ParseResult _);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class McMaster.Extensions.CommandLineUtils.CommandLineValidationContextFactory : object {
    private CommandLineApplication _app;
    public CommandLineValidationContextFactory(CommandLineApplication app);
    public ValidationContext Create(CommandLineApplication app);
    public ValidationContext Create(CommandArgument argument);
    public ValidationContext Create(CommandOption option);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.CommandOption : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private protected List`1<string> _values;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LongName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SymbolName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOptionType <OptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInHelpText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Inherited>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <UnderlyingType>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ICollection`1<IOptionValidator> <Validators>k__BackingField;
    public string ShortName { get; public set; }
    public string LongName { get; public set; }
    public string SymbolName { get; public set; }
    public string ValueName { get; public set; }
    public string Description { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<string> Values { get; }
    public string DefaultValue { get; public set; }
    public CommandOptionType OptionType { get; private set; }
    public bool ShowInHelpText { get; public set; }
    public bool Inherited { get; public set; }
    internal Type UnderlyingType { get; internal set; }
    [NullableAttribute("1")]
public ICollection`1<IOptionValidator> Validators { get; }
    [NullableContextAttribute("1")]
public CommandOption(string template, CommandOptionType optionType);
    internal CommandOption(CommandOptionType type);
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public string get_LongName();
    [CompilerGeneratedAttribute]
public void set_LongName(string value);
    [CompilerGeneratedAttribute]
public string get_SymbolName();
    [CompilerGeneratedAttribute]
public void set_SymbolName(string value);
    [CompilerGeneratedAttribute]
public string get_ValueName();
    [CompilerGeneratedAttribute]
public void set_ValueName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    public IReadOnlyList`1<string> get_Values();
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public CommandOptionType get_OptionType();
    [CompilerGeneratedAttribute]
private void set_OptionType(CommandOptionType value);
    [CompilerGeneratedAttribute]
public bool get_ShowInHelpText();
    [CompilerGeneratedAttribute]
public void set_ShowInHelpText(bool value);
    [CompilerGeneratedAttribute]
public bool get_Inherited();
    [CompilerGeneratedAttribute]
public void set_Inherited(bool value);
    [CompilerGeneratedAttribute]
internal Type get_UnderlyingType();
    [CompilerGeneratedAttribute]
internal void set_UnderlyingType(Type value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public ICollection`1<IOptionValidator> get_Validators();
    public bool TryParse(string value);
    public bool HasValue();
    public string Value();
    [NullableContextAttribute("1")]
internal string ToTemplateString();
    private bool IsEnglishLetter(char c);
    public virtual void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.CommandOption`1 : CommandOption {
    private List`1<T> _parsedValues;
    private IValueParser`1<T> _valueParser;
    [NullableAttribute("2")]
private T _defaultValue;
    private bool _hasDefaultValue;
    private bool _hasBeenParsed;
    public T ParsedValue { get; }
    public IReadOnlyList`1<T> ParsedValues { get; }
    [NullableAttribute("2")]
public T DefaultValue { get; public set; }
    public CommandOption`1(IValueParser`1<T> valueParser, string template, CommandOptionType optionType);
    public T get_ParsedValue();
    public IReadOnlyList`1<T> get_ParsedValues();
    [NullableContextAttribute("2")]
public T get_DefaultValue();
    [NullableContextAttribute("2")]
public void set_DefaultValue(T value);
    private sealed virtual override void McMaster.Extensions.CommandLineUtils.IInternalCommandParamOfT.Parse(CultureInfo culture);
    [NullableContextAttribute("2")]
private void SetBaseDefaultValue(T value);
    public virtual void Reset();
}
public enum McMaster.Extensions.CommandLineUtils.CommandOptionType : Enum {
    public int value__;
    public static CommandOptionType MultipleValue;
    public static CommandOptionType SingleValue;
    public static CommandOptionType SingleOrNoValue;
    public static CommandOptionType NoValue;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class McMaster.Extensions.CommandLineUtils.CommandOptionTypeMapper : object {
    [CompilerGeneratedAttribute]
private static CommandOptionTypeMapper <Default>k__BackingField;
    public static CommandOptionTypeMapper Default { get; }
    private static CommandOptionTypeMapper();
    [CompilerGeneratedAttribute]
public static CommandOptionTypeMapper get_Default();
    public bool TryGetOptionType(Type clrType, ValueParserProvider valueParsers, CommandOptionType& optionType);
    public CommandOptionType GetOptionType(Type clrType, ValueParserProvider valueParsers);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.CommandParsingException : Exception {
    [CompilerGeneratedAttribute]
private CommandLineApplication <Command>k__BackingField;
    public CommandLineApplication Command { get; }
    public CommandParsingException(CommandLineApplication command, string message);
    public CommandParsingException(CommandLineApplication command, string message, Exception innerException);
    [CompilerGeneratedAttribute]
public CommandLineApplication get_Command();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class McMaster.Extensions.CommandLineUtils.ConsoleExtensions : object {
    [ExtensionAttribute]
public static IConsole WriteLine(IConsole console);
    [ExtensionAttribute]
public static IConsole WriteLine(IConsole console, string value);
    [ExtensionAttribute]
public static IConsole WriteLine(IConsole console, string format, Object[] arg);
    [ExtensionAttribute]
public static IConsole WriteLine(IConsole console, string format, object arg0);
    [ExtensionAttribute]
public static IConsole WriteLine(IConsole console, string format, object arg0, object arg1);
    [ExtensionAttribute]
public static IConsole WriteLine(IConsole console, string format, object arg0, object arg1, object arg2);
    [ExtensionAttribute]
public static IConsole WriteLine(IConsole console, ulong value);
    [ExtensionAttribute]
public static IConsole WriteLine(IConsole console, bool value);
    [ExtensionAttribute]
public static IConsole WriteLine(IConsole console, char value);
    [ExtensionAttribute]
public static IConsole WriteLine(IConsole console, Char[] buffer);
    [ExtensionAttribute]
public static IConsole WriteLine(IConsole console, Char[] buffer, int index, int count);
    [ExtensionAttribute]
public static IConsole WriteLine(IConsole console, decimal value);
    [ExtensionAttribute]
public static IConsole WriteLine(IConsole console, double value);
    [ExtensionAttribute]
public static IConsole WriteLine(IConsole console, UInt32 value);
    [ExtensionAttribute]
public static IConsole WriteLine(IConsole console, int value);
    [ExtensionAttribute]
public static IConsole WriteLine(IConsole console, object value);
    [ExtensionAttribute]
public static IConsole WriteLine(IConsole console, float value);
    [ExtensionAttribute]
public static IConsole WriteLine(IConsole console, long value);
    [ExtensionAttribute]
public static IConsole Write(IConsole console, string value);
    [ExtensionAttribute]
public static IConsole Write(IConsole console, string format, Object[] arg);
    [ExtensionAttribute]
public static IConsole Write(IConsole console, string format, object arg0);
    [ExtensionAttribute]
public static IConsole Write(IConsole console, string format, object arg0, object arg1);
    [ExtensionAttribute]
public static IConsole Write(IConsole console, string format, object arg0, object arg1, object arg2);
    [ExtensionAttribute]
public static IConsole Write(IConsole console, UInt32 value);
    [ExtensionAttribute]
public static IConsole Write(IConsole console, decimal value);
    [ExtensionAttribute]
public static IConsole Write(IConsole console, int value);
    [ExtensionAttribute]
public static IConsole Write(IConsole console, ulong value);
    [ExtensionAttribute]
public static IConsole Write(IConsole console, bool value);
    [ExtensionAttribute]
public static IConsole Write(IConsole console, char value);
    [ExtensionAttribute]
public static IConsole Write(IConsole console, Char[] buffer);
    [ExtensionAttribute]
public static IConsole Write(IConsole console, Char[] buffer, int index, int count);
    [ExtensionAttribute]
public static IConsole Write(IConsole console, double value);
    [ExtensionAttribute]
public static IConsole Write(IConsole console, long value);
    [ExtensionAttribute]
public static IConsole Write(IConsole console, object value);
    [ExtensionAttribute]
public static IConsole Write(IConsole console, float value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.ConsoleReporter : object {
    private object _writeLock;
    [CompilerGeneratedAttribute]
private IConsole <Console>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVerbose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsQuiet>k__BackingField;
    protected IConsole Console { get; }
    public bool IsVerbose { get; public set; }
    public bool IsQuiet { get; public set; }
    public ConsoleReporter(IConsole console);
    public ConsoleReporter(IConsole console, bool verbose, bool quiet);
    [CompilerGeneratedAttribute]
protected IConsole get_Console();
    [CompilerGeneratedAttribute]
public bool get_IsVerbose();
    [CompilerGeneratedAttribute]
public void set_IsVerbose(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsQuiet();
    [CompilerGeneratedAttribute]
public void set_IsQuiet(bool value);
    protected virtual void WriteLine(TextWriter writer, string message, Nullable`1<ConsoleColor> foregroundColor, Nullable`1<ConsoleColor> backgroundColor);
    public virtual void Error(string message);
    public virtual void Warn(string message);
    public virtual void Output(string message);
    public virtual void Verbose(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions : object {
    [ExtensionAttribute]
public static IConventionBuilder UseDefaultConventions(IConventionBuilder builder);
    [ExtensionAttribute]
public static IConventionBuilder UseDefaultHelpOption(IConventionBuilder builder, string template);
    [ExtensionAttribute]
public static IConventionBuilder UseAttributes(IConventionBuilder builder);
    [ExtensionAttribute]
public static IConventionBuilder SetRemainingArgsPropertyOnModel(IConventionBuilder builder);
    [ExtensionAttribute]
public static IConventionBuilder SetSubcommandPropertyOnModel(IConventionBuilder builder);
    [ExtensionAttribute]
public static IConventionBuilder SetParentPropertyOnModel(IConventionBuilder builder);
    [ExtensionAttribute]
public static IConventionBuilder SetAppNameFromEntryAssembly(IConventionBuilder builder);
    [ExtensionAttribute]
public static IConventionBuilder UseCommandAttribute(IConventionBuilder builder);
    [ExtensionAttribute]
public static IConventionBuilder UseVersionOptionFromMemberAttribute(IConventionBuilder builder);
    [ExtensionAttribute]
public static IConventionBuilder UseVersionOptionAttribute(IConventionBuilder builder);
    [ExtensionAttribute]
public static IConventionBuilder UseHelpOptionAttribute(IConventionBuilder builder);
    [ExtensionAttribute]
public static IConventionBuilder UseOptionAttributes(IConventionBuilder builder);
    [ExtensionAttribute]
public static IConventionBuilder UseArgumentAttributes(IConventionBuilder builder);
    [ExtensionAttribute]
public static IConventionBuilder UseSubcommandAttributes(IConventionBuilder builder);
    [ExtensionAttribute]
public static IConventionBuilder UseOnValidateMethodFromModel(IConventionBuilder builder);
    [ExtensionAttribute]
public static IConventionBuilder UseOnValidationErrorMethodFromModel(IConventionBuilder builder);
    [ExtensionAttribute]
public static IConventionBuilder UseOnExecuteMethodFromModel(IConventionBuilder builder);
    [ExtensionAttribute]
public static IConventionBuilder UseConstructorInjection(IConventionBuilder builder);
    [ExtensionAttribute]
public static IConventionBuilder UseConstructorInjection(IConventionBuilder builder, IServiceProvider additionalServices);
    [ExtensionAttribute]
public static IConventionBuilder UseCommandNameFromModelType(IConventionBuilder builder);
}
public class McMaster.Extensions.CommandLineUtils.Conventions.AppNameFromEntryAssemblyConvention : object {
    [NullableContextAttribute("1")]
public virtual void Apply(ConventionContext context);
}
public class McMaster.Extensions.CommandLineUtils.Conventions.ArgumentAttributeConvention : object {
    [NullableContextAttribute("1")]
public virtual void Apply(ConventionContext context);
    [NullableContextAttribute("1")]
private void AddArgument(PropertyInfo prop, ArgumentAttribute argumentAttr, ConventionContext convention, SortedList`2<int, CommandArgument> argOrder, Dictionary`2<int, PropertyInfo> argPropOrder);
}
public class McMaster.Extensions.CommandLineUtils.Conventions.AttributeConvention : object {
    [NullableContextAttribute("1")]
public sealed virtual void Apply(ConventionContext context);
}
public class McMaster.Extensions.CommandLineUtils.Conventions.CommandAttributeConvention : object {
    [NullableContextAttribute("1")]
public virtual void Apply(ConventionContext context);
}
public class McMaster.Extensions.CommandLineUtils.Conventions.CommandNameFromTypeConvention : object {
    [NullableContextAttribute("1")]
public sealed virtual void Apply(ConventionContext context);
    [NullableContextAttribute("1")]
internal static string GetCommandName(string typeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.Conventions.ConstructorInjectionConvention : object {
    [NullableAttribute("2")]
private IServiceProvider _additionalServices;
    private static MethodInfo s_applyMethod;
    public ConstructorInjectionConvention(IServiceProvider additionalServices);
    private static ConstructorInjectionConvention();
    public virtual void Apply(ConventionContext context);
    private void ApplyImpl(ConventionContext context);
    private static Func`1<TModel> FindMatchedConstructor(ConstructorInfo[] constructors, IServiceProvider services, bool throwIfNoParameterTypeRegistered);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private CommandLineApplication <Application>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ModelType>k__BackingField;
    [NullableAttribute("1")]
public CommandLineApplication Application { get; private set; }
    public Type ModelType { get; private set; }
    public IModelAccessor ModelAccessor { get; }
    [NullableContextAttribute("1")]
public ConventionContext(CommandLineApplication application, Type modelType);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public CommandLineApplication get_Application();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_Application(CommandLineApplication value);
    [CompilerGeneratedAttribute]
public Type get_ModelType();
    [CompilerGeneratedAttribute]
private void set_ModelType(Type value);
    public IModelAccessor get_ModelAccessor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.Conventions.DefaultHelpOptionConvention : object {
    public static string DefaultHelpTemplate;
    private string _template;
    public DefaultHelpOptionConvention(string template);
    public sealed virtual void Apply(ConventionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.Conventions.ExecuteMethodConvention : object {
    public virtual void Apply(ConventionContext context);
    [AsyncStateMachineAttribute("McMaster.Extensions.CommandLineUtils.Conventions.ExecuteMethodConvention/<OnExecute>d__1")]
private Task`1<int> OnExecute(ConventionContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("McMaster.Extensions.CommandLineUtils.Conventions.ExecuteMethodConvention/<InvokeAsync>d__2")]
private Task`1<int> InvokeAsync(MethodInfo method, object instance, Object[] arguments);
    private int Invoke(MethodInfo method, object instance, Object[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class McMaster.Extensions.CommandLineUtils.Conventions.HelpOptionAttributeConvention : OptionAttributeConventionBase`1<HelpOptionAttribute> {
    public virtual void Apply(ConventionContext context);
    private static void EnsureDoesNotHaveOptionAttribute(PropertyInfo prop);
    private static void EnsureDoesNotHaveVersionOptionAttribute(PropertyInfo prop);
}
[NullableContextAttribute("1")]
public interface McMaster.Extensions.CommandLineUtils.Conventions.IConvention {
    public abstract virtual void Apply(ConventionContext context);
}
[NullableContextAttribute("1")]
public interface McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder {
    public abstract virtual IConventionBuilder AddConvention(IConvention convention);
}
[NullableContextAttribute("1")]
public interface McMaster.Extensions.CommandLineUtils.Conventions.IMemberConvention {
    public abstract virtual void Apply(ConventionContext context, MemberInfo member);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class McMaster.Extensions.CommandLineUtils.Conventions.OptionAttributeConvention : OptionAttributeConventionBase`1<OptionAttribute> {
    public virtual void Apply(ConventionContext context);
    private static void EnsureDoesNotHaveVersionOptionAttribute(PropertyInfo prop);
    private static void EnsureDoesNotHaveHelpOptionAttribute(PropertyInfo prop);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class McMaster.Extensions.CommandLineUtils.Conventions.OptionAttributeConventionBase`1 : object {
    private protected void AddOption(ConventionContext context, CommandOption option, PropertyInfo prop);
    private protected static void EnsureDoesNotHaveArgumentAttribute(PropertyInfo prop);
}
public class McMaster.Extensions.CommandLineUtils.Conventions.ParentPropertyConvention : object {
    [NullableContextAttribute("1")]
public virtual void Apply(ConventionContext context);
}
public class McMaster.Extensions.CommandLineUtils.Conventions.RemainingArgsPropertyConvention : object {
    private static BindingFlags PropertyBindingFlags;
    [NullableContextAttribute("1")]
public virtual void Apply(ConventionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.Conventions.SubcommandAttributeConvention : object {
    private static MethodInfo s_addSubcommandMethod;
    private static SubcommandAttributeConvention();
    public virtual void Apply(ConventionContext context);
    private void AssertSubcommandIsNotCycled(Type modelType, CommandLineApplication parentCommand);
    private void AddSubcommandImpl(ConventionContext context);
}
public class McMaster.Extensions.CommandLineUtils.Conventions.SubcommandPropertyConvention : object {
    [NullableContextAttribute("1")]
public virtual void Apply(ConventionContext context);
}
public class McMaster.Extensions.CommandLineUtils.Conventions.ValidationErrorMethodConvention : object {
    [NullableContextAttribute("1")]
public virtual void Apply(ConventionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class McMaster.Extensions.CommandLineUtils.Conventions.VersionOptionAttributeConvention : OptionAttributeConventionBase`1<VersionOptionAttribute> {
    public virtual void Apply(ConventionContext context);
    private static void EnsureDoesNotHaveOptionAttribute(PropertyInfo prop);
    private static void EnsureDoesNotHaveHelpOptionAttribute(PropertyInfo prop);
}
public class McMaster.Extensions.CommandLineUtils.Conventions.VersionOptionFromMemberAttributeConvention : object {
    [NullableContextAttribute("1")]
public virtual void Apply(ConventionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class McMaster.Extensions.CommandLineUtils.DebugHelper : object {
    public static void HandleDebugSwitch(String[]& args);
    public static void HandleDebugSwitch(String[]& args, int maxWaitSeconds);
}
[AttributeUsageAttribute("128")]
public class McMaster.Extensions.CommandLineUtils.DirectoryExistsAttribute : FilePathExistsAttributeBase {
}
[AttributeUsageAttribute("128")]
public class McMaster.Extensions.CommandLineUtils.DirectoryNotExistsAttribute : FilePathNotExistsAttributeBase {
}
public static class McMaster.Extensions.CommandLineUtils.DotNetCliContext : object {
    public static bool IsGlobalVerbose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class McMaster.Extensions.CommandLineUtils.DotNetExe : object {
    [NullableAttribute("1")]
private static string FileName;
    [CompilerGeneratedAttribute]
private static string <FullPath>k__BackingField;
    public static string FullPath { get; }
    private static DotNetExe();
    [CompilerGeneratedAttribute]
public static string get_FullPath();
    [NullableContextAttribute("1")]
public static string FullPathOrDefault();
    private static string TryFindDotNetExePath();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.Errors.SubcommandCycleException : Exception {
    [CompilerGeneratedAttribute]
private Type <ModelType>k__BackingField;
    public Type ModelType { get; }
    public SubcommandCycleException(Type modelType);
    [CompilerGeneratedAttribute]
public Type get_ModelType();
}
[AttributeUsageAttribute("128")]
public class McMaster.Extensions.CommandLineUtils.FileExistsAttribute : FilePathExistsAttributeBase {
}
[AttributeUsageAttribute("128")]
public class McMaster.Extensions.CommandLineUtils.FileNotExistsAttribute : FilePathNotExistsAttributeBase {
}
[AttributeUsageAttribute("128")]
public class McMaster.Extensions.CommandLineUtils.FileOrDirectoryExistsAttribute : FilePathExistsAttributeBase {
}
[AttributeUsageAttribute("128")]
public class McMaster.Extensions.CommandLineUtils.FileOrDirectoryNotExistsAttribute : FilePathNotExistsAttributeBase {
}
internal class McMaster.Extensions.CommandLineUtils.GetPropertyDelegate : MulticastDelegate {
    public GetPropertyDelegate(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual object Invoke(object obj);
    public virtual IAsyncResult BeginInvoke(object obj, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("132")]
public class McMaster.Extensions.CommandLineUtils.HelpOptionAttribute : OptionAttributeBase {
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    public string Template { get; public set; }
    public HelpOptionAttribute(string template);
    [CompilerGeneratedAttribute]
public string get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(string value);
    internal CommandOption Configure(CommandLineApplication app);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator : object {
    protected static int ColumnSeparatorLength;
    private Nullable`1<int> _maxLineLength;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private HangingIndentWriter <IndentWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private static DefaultHelpTextGenerator <Singleton>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SortCommandsByName>k__BackingField;
    [NullableAttribute("2")]
protected HangingIndentWriter IndentWriter { get; protected set; }
    public static DefaultHelpTextGenerator Singleton { get; }
    public bool SortCommandsByName { get; public set; }
    public Nullable`1<int> MaxLineLength { get; public set; }
    private static DefaultHelpTextGenerator();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected HangingIndentWriter get_IndentWriter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_IndentWriter(HangingIndentWriter value);
    [CompilerGeneratedAttribute]
public static DefaultHelpTextGenerator get_Singleton();
    [CompilerGeneratedAttribute]
public bool get_SortCommandsByName();
    [CompilerGeneratedAttribute]
public void set_SortCommandsByName(bool value);
    public Nullable`1<int> get_MaxLineLength();
    public void set_MaxLineLength(Nullable`1<int> value);
    public virtual void Generate(CommandLineApplication application, TextWriter output);
    protected virtual void GenerateHeader(CommandLineApplication application, TextWriter output);
    protected virtual void GenerateBody(CommandLineApplication application, TextWriter output);
    protected virtual void GenerateUsage(CommandLineApplication application, TextWriter output, IReadOnlyList`1<CommandArgument> visibleArguments, IReadOnlyList`1<CommandOption> visibleOptions, IReadOnlyList`1<CommandLineApplication> visibleCommands);
    protected virtual void GenerateArguments(CommandLineApplication application, TextWriter output, IReadOnlyList`1<CommandArgument> visibleArguments, int firstColumnWidth);
    protected virtual void GenerateOptions(CommandLineApplication application, TextWriter output, IReadOnlyList`1<CommandOption> visibleOptions, int firstColumnWidth);
    protected virtual void GenerateCommands(CommandLineApplication application, TextWriter output, IReadOnlyList`1<CommandLineApplication> visibleCommands, int firstColumnWidth);
    protected virtual void GenerateFooter(CommandLineApplication application, TextWriter output);
    protected virtual string Format(CommandOption option);
    private Nullable`1<int> TryGetConsoleWidth();
    private String[] ExtractNamesFromEnum(Type type);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private int <GenerateBody>b__19_4(CommandOption o);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.HelpText.HangingIndentWriter : object {
    public static int DefaultConsoleWidth;
    private bool _indentFirstLine;
    private int _indentSize;
    private int _maxLineLength;
    private string _paddedLine;
    public HangingIndentWriter(int indentSize, Nullable`1<int> maxLineLength, bool indentFirstLine);
    public string Write(string input);
    private string WrapSingle(string original);
}
[NullableContextAttribute("1")]
public interface McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator {
    public abstract virtual void Generate(CommandLineApplication application, TextWriter output);
}
[NullableContextAttribute("1")]
internal interface McMaster.Extensions.CommandLineUtils.ICollectionParser {
    public abstract virtual object Parse(string argName, IReadOnlyList`1<string> values);
}
[NullableContextAttribute("1")]
public interface McMaster.Extensions.CommandLineUtils.IConsole {
    public TextWriter Out { get; }
    public TextWriter Error { get; }
    public TextReader In { get; }
    public bool IsInputRedirected { get; }
    public bool IsOutputRedirected { get; }
    public bool IsErrorRedirected { get; }
    public ConsoleColor ForegroundColor { get; public set; }
    public ConsoleColor BackgroundColor { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public abstract virtual void add_CancelKeyPress(ConsoleCancelEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public abstract virtual void remove_CancelKeyPress(ConsoleCancelEventHandler value);
    public abstract virtual TextWriter get_Out();
    public abstract virtual TextWriter get_Error();
    public abstract virtual TextReader get_In();
    public abstract virtual bool get_IsInputRedirected();
    public abstract virtual bool get_IsOutputRedirected();
    public abstract virtual bool get_IsErrorRedirected();
    public abstract virtual ConsoleColor get_ForegroundColor();
    public abstract virtual void set_ForegroundColor(ConsoleColor value);
    public abstract virtual ConsoleColor get_BackgroundColor();
    public abstract virtual void set_BackgroundColor(ConsoleColor value);
    public abstract virtual void ResetColor();
}
[NullableContextAttribute("1")]
internal interface McMaster.Extensions.CommandLineUtils.IInternalCommandParamOfT {
    public abstract virtual void Parse(CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class McMaster.Extensions.CommandLineUtils.Internal.DefaultCommandLineContext : CommandLineContext {
    public DefaultCommandLineContext(IConsole console);
    public DefaultCommandLineContext(IConsole console, string workDir);
    public DefaultCommandLineContext(IConsole console, string workDir, String[] args);
}
[NullableContextAttribute("1")]
public interface McMaster.Extensions.CommandLineUtils.IReporter {
    public abstract virtual void Verbose(string message);
    public abstract virtual void Output(string message);
    public abstract virtual void Warn(string message);
    public abstract virtual void Error(string message);
}
[NullableContextAttribute("1")]
internal interface McMaster.Extensions.CommandLineUtils.ITupleValueParser {
    public abstract virtual object Parse(bool hasValue, string argName, string value, CultureInfo culture);
}
[AttributeUsageAttribute("128")]
public class McMaster.Extensions.CommandLineUtils.LegalFilePathAttribute : ValidationAttribute {
    [NullableContextAttribute("2")]
protected virtual ValidationResult IsValid(object value, ValidationContext validationContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.MissingParameterlessConstructorException : TargetException {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; private set; }
    public MissingParameterlessConstructorException(Type type, Exception innerException);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.NullConsole : object {
    [CompilerGeneratedAttribute]
private static NullConsole <Singleton>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <Out>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private TextReader <In>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <ForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <BackgroundColor>k__BackingField;
    public static NullConsole Singleton { get; }
    public TextWriter Out { get; }
    public TextWriter Error { get; }
    public TextReader In { get; }
    public bool IsInputRedirected { get; }
    public bool IsOutputRedirected { get; }
    public bool IsErrorRedirected { get; }
    public ConsoleColor ForegroundColor { get; public set; }
    public ConsoleColor BackgroundColor { get; public set; }
    private static NullConsole();
    [CompilerGeneratedAttribute]
public static NullConsole get_Singleton();
    [CompilerGeneratedAttribute]
public sealed virtual TextWriter get_Out();
    [CompilerGeneratedAttribute]
public sealed virtual TextWriter get_Error();
    [CompilerGeneratedAttribute]
public sealed virtual TextReader get_In();
    public sealed virtual bool get_IsInputRedirected();
    public sealed virtual bool get_IsOutputRedirected();
    public sealed virtual bool get_IsErrorRedirected();
    [CompilerGeneratedAttribute]
public sealed virtual ConsoleColor get_ForegroundColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ForegroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public sealed virtual ConsoleColor get_BackgroundColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BackgroundColor(ConsoleColor value);
    [NullableContextAttribute("2")]
public sealed virtual void add_CancelKeyPress(ConsoleCancelEventHandler value);
    [NullableContextAttribute("2")]
public sealed virtual void remove_CancelKeyPress(ConsoleCancelEventHandler value);
    public sealed virtual void ResetColor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.NullReporter : object {
    [CompilerGeneratedAttribute]
private static IReporter <Singleton>k__BackingField;
    public static IReporter Singleton { get; }
    private static NullReporter();
    [CompilerGeneratedAttribute]
public static IReporter get_Singleton();
    public sealed virtual void Verbose(string message);
    public sealed virtual void Output(string message);
    public sealed virtual void Warn(string message);
    public sealed virtual void Error(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("128")]
public class McMaster.Extensions.CommandLineUtils.OptionAttribute : OptionAttributeBase {
    [CompilerGeneratedAttribute]
private Nullable`1<CommandOptionType> <OptionType>k__BackingField;
    public Nullable`1<CommandOptionType> OptionType { get; public set; }
    public OptionAttribute(string template);
    public OptionAttribute(CommandOptionType optionType);
    public OptionAttribute(string template, CommandOptionType optionType);
    [NullableContextAttribute("2")]
public OptionAttribute(string template, string description, CommandOptionType optionType);
    [CompilerGeneratedAttribute]
public Nullable`1<CommandOptionType> get_OptionType();
    [CompilerGeneratedAttribute]
public void set_OptionType(Nullable`1<CommandOptionType> value);
    internal CommandOption Configure(CommandLineApplication app, PropertyInfo prop);
    private CommandOptionType GetOptionType(PropertyInfo prop, ValueParserProvider valueParsers);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class McMaster.Extensions.CommandLineUtils.OptionAttributeBase : Attribute {
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LongName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SymbolName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInHelpText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Inherited>k__BackingField;
    public string Template { get; public set; }
    public string ShortName { get; public set; }
    public string LongName { get; public set; }
    public string SymbolName { get; public set; }
    public string ValueName { get; public set; }
    public string Description { get; public set; }
    public bool ShowInHelpText { get; public set; }
    public bool Inherited { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(string value);
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public string get_LongName();
    [CompilerGeneratedAttribute]
public void set_LongName(string value);
    [CompilerGeneratedAttribute]
public string get_SymbolName();
    [CompilerGeneratedAttribute]
public void set_SymbolName(string value);
    [CompilerGeneratedAttribute]
public string get_ValueName();
    [CompilerGeneratedAttribute]
public void set_ValueName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowInHelpText();
    [CompilerGeneratedAttribute]
public void set_ShowInHelpText(bool value);
    [CompilerGeneratedAttribute]
public bool get_Inherited();
    [CompilerGeneratedAttribute]
public void set_Inherited(bool value);
    [NullableContextAttribute("1")]
internal void Configure(CommandOption option);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.Pager : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<Process> _less;
    private TextWriter _fallbackWriter;
    private bool _enabled;
    private bool _disposed;
    private string _prompt;
    public string Prompt { get; public set; }
    public TextWriter Writer { get; }
    public Pager(IConsole console);
    public string get_Prompt();
    public void set_Prompt(string value);
    public TextWriter get_Writer();
    public void WaitForExit();
    public void Kill();
    [NullableContextAttribute("2")]
private Process CreateWriter();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class McMaster.Extensions.CommandLineUtils.ParserConfig : object {
    [CompilerGeneratedAttribute]
private Char[] <OptionNameValueSeparators>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UnrecognizedArgumentHandling> <UnrecognizedArgumentHandling>k__BackingField;
    public Char[] OptionNameValueSeparators { get; public set; }
    public Nullable`1<UnrecognizedArgumentHandling> UnrecognizedArgumentHandling { get; public set; }
    [CompilerGeneratedAttribute]
public Char[] get_OptionNameValueSeparators();
    [CompilerGeneratedAttribute]
public void set_OptionNameValueSeparators(Char[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<UnrecognizedArgumentHandling> get_UnrecognizedArgumentHandling();
    [CompilerGeneratedAttribute]
public void set_UnrecognizedArgumentHandling(Nullable`1<UnrecognizedArgumentHandling> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.PhysicalConsole : object {
    [CompilerGeneratedAttribute]
private static IConsole <Singleton>k__BackingField;
    public static IConsole Singleton { get; }
    public TextWriter Error { get; }
    public TextReader In { get; }
    public TextWriter Out { get; }
    public bool IsInputRedirected { get; }
    public bool IsOutputRedirected { get; }
    public bool IsErrorRedirected { get; }
    public ConsoleColor ForegroundColor { get; public set; }
    public ConsoleColor BackgroundColor { get; public set; }
    private static PhysicalConsole();
    [CompilerGeneratedAttribute]
public static IConsole get_Singleton();
    [NullableContextAttribute("2")]
public sealed virtual void add_CancelKeyPress(ConsoleCancelEventHandler value);
    [NullableContextAttribute("2")]
public sealed virtual void remove_CancelKeyPress(ConsoleCancelEventHandler value);
    public sealed virtual TextWriter get_Error();
    public sealed virtual TextReader get_In();
    public sealed virtual TextWriter get_Out();
    public sealed virtual bool get_IsInputRedirected();
    public sealed virtual bool get_IsOutputRedirected();
    public sealed virtual bool get_IsErrorRedirected();
    public sealed virtual ConsoleColor get_ForegroundColor();
    public sealed virtual void set_ForegroundColor(ConsoleColor value);
    public sealed virtual ConsoleColor get_BackgroundColor();
    public sealed virtual void set_BackgroundColor(ConsoleColor value);
    public sealed virtual void ResetColor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class McMaster.Extensions.CommandLineUtils.Prompt : object {
    private static char Backspace;
    public static bool GetYesNo(string prompt, bool defaultAnswer, Nullable`1<ConsoleColor> promptColor, Nullable`1<ConsoleColor> promptBgColor);
    [NullableContextAttribute("2")]
public static string GetString(string prompt, string defaultValue, Nullable`1<ConsoleColor> promptColor, Nullable`1<ConsoleColor> promptBgColor);
    public static string GetPassword(string prompt, Nullable`1<ConsoleColor> promptColor, Nullable`1<ConsoleColor> promptBgColor);
    public static SecureString GetPasswordAsSecureString(string prompt, Nullable`1<ConsoleColor> promptColor, Nullable`1<ConsoleColor> promptBgColor);
    [IteratorStateMachineAttribute("McMaster.Extensions.CommandLineUtils.Prompt/<ReadObfuscatedLine>d__5")]
private static IEnumerable`1<char> ReadObfuscatedLine(string prompt, Nullable`1<ConsoleColor> promptColor, Nullable`1<ConsoleColor> promptBgColor);
    public static int GetInt(string prompt, Nullable`1<int> defaultAnswer, Nullable`1<ConsoleColor> promptColor, Nullable`1<ConsoleColor> promptBgColor);
    private static void Write(string value, Nullable`1<ConsoleColor> foreground, Nullable`1<ConsoleColor> background);
    private static IDisposable ShowCursor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class McMaster.Extensions.CommandLineUtils.ReflectionHelper : object {
    private static BindingFlags DeclaredOnlyLookup;
    public static SetPropertyDelegate GetPropertySetter(PropertyInfo prop);
    public static GetPropertyDelegate GetPropertyGetter(PropertyInfo prop);
    public static MethodInfo[] GetPropertyOrMethod(Type type, string name);
    public static PropertyInfo[] GetProperties(Type type);
    public static MemberInfo[] GetMembers(Type type);
    public static Object[] BindParameters(MethodInfo method, CommandLineApplication command, CancellationToken cancellationToken);
    public static bool IsNullableType(Type type, Type& wrappedType);
    public static bool IsSpecialValueTupleType(Type type, Type& wrappedType);
    public static bool IsSpecialTupleType(Type type, Type& wrappedType);
    [IteratorStateMachineAttribute("McMaster.Extensions.CommandLineUtils.ReflectionHelper/<GetAllMembers>d__10")]
private static IEnumerable`1<MemberInfo> GetAllMembers(Type type);
}
public enum McMaster.Extensions.CommandLineUtils.ResponseFileHandling : Enum {
    public int value__;
    public static ResponseFileHandling Disabled;
    public static ResponseFileHandling ParseArgsAsSpaceSeparated;
    public static ResponseFileHandling ParseArgsAsLineSeparated;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class McMaster.Extensions.CommandLineUtils.ResponseFileParser : object {
    public static IList`1<string> Parse(string filePath, ResponseFileHandling handling);
    private static IList`1<string> ParseAsLineSeparated(string filePath);
    private static IList`1<string> ParseAsSpaceSeparated(string filePath);
}
internal class McMaster.Extensions.CommandLineUtils.SetPropertyDelegate : MulticastDelegate {
    public SetPropertyDelegate(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object obj, object value);
    public virtual IAsyncResult BeginInvoke(object obj, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class McMaster.Extensions.CommandLineUtils.StringDistance : object {
    private static int LevenshteinDistance(string s, string t, bool damareu);
    internal static int LevenshteinDistance(string s, string t);
    internal static int DamareuLevenshteinDistance(string s, string t);
    internal static double NormalizeDistance(int distance, int length);
    internal static IEnumerable`1<string> GetBestMatchesSorted(Func`3<string, string, int> distanceMethod, string value, IEnumerable`1<string> values, double threshold);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class McMaster.Extensions.CommandLineUtils.StringExtensions : object {
    [ExtensionAttribute]
public static string ToKebabCase(string str);
    [ExtensionAttribute]
public static string ToConstantCase(string str);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class McMaster.Extensions.CommandLineUtils.Strings : object {
    public static string DefaultHelpTemplate;
    public static string DefaultHelpOptionDescription;
    public static string DefaultVersionTemplate;
    public static string DefaultVersionOptionDescription;
    public static string IsEmptyArray;
    public static string PathMustNotBeRelative;
    public static string NoValueTypesMustBeBoolean;
    public static string AmbiguousOnExecuteMethod;
    public static string NoOnExecuteMethodFound;
    public static string ConventionRequiresModel;
    public static string HelpOptionOnTypeAndProperty;
    public static string MultipleHelpOptionPropertiesFound;
    public static string VersionOptionOnTypeAndProperty;
    public static string MultipleVersionOptionPropertiesFound;
    public static string InvalidOnExecuteReturnType(string methodName);
    public static string InvalidOnValidateReturnType(Type modelType);
    public static string CannotDetermineOptionType(PropertyInfo member);
    public static string OptionNameIsAmbiguous(string optionName, PropertyInfo first, PropertyInfo second);
    public static string DuplicateSubcommandName(string commandName);
    public static string BothOptionAndArgumentAttributesCannotBeSpecified(PropertyInfo prop);
    public static string BothOptionAndHelpOptionAttributesCannotBeSpecified(PropertyInfo prop);
    public static string BothOptionAndVersionOptionAttributesCannotBeSpecified(PropertyInfo prop);
    internal static string UnsupportedParameterTypeOnMethod(string methodName, ParameterInfo methodParam);
    public static string BothHelpOptionAndVersionOptionAttributesCannotBeSpecified(PropertyInfo prop);
    public static string DuplicateArgumentPosition(int order, PropertyInfo first, PropertyInfo second);
    public static string OnlyLastArgumentCanAllowMultipleValues(string lastArgName);
    public static string CannotDetermineParserType(Type type);
    public static string CannotDetermineParserType(PropertyInfo prop);
    public static string RemainingArgsPropsIsUnassignable(Type type);
    public static string NoPropertyOrMethodFound(string memberName, Type type);
    public static string NoParameterTypeRegistered(Type modelType, Type paramType);
    public static string NoAnyPublicConstructorFound(Type modelType);
    public static string NoMatchedConstructorFound(Type modelType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class McMaster.Extensions.CommandLineUtils.SubcommandAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type[] <Types>k__BackingField;
    public Type[] Types { get; private set; }
    public SubcommandAttribute(Type[] subcommands);
    [CompilerGeneratedAttribute]
public Type[] get_Types();
    [CompilerGeneratedAttribute]
private void set_Types(Type[] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class McMaster.Extensions.CommandLineUtils.SuggestionCreator : object {
    public static IEnumerable`1<string> GetTopSuggestions(CommandLineApplication command, string input);
    [IteratorStateMachineAttribute("McMaster.Extensions.CommandLineUtils.SuggestionCreator/<GetCandidates>d__1")]
private static IEnumerable`1<string> GetCandidates(CommandLineApplication command);
}
[AttributeUsageAttribute("5")]
public class McMaster.Extensions.CommandLineUtils.SuppressDefaultHelpOptionAttribute : Attribute {
}
public enum McMaster.Extensions.CommandLineUtils.UnrecognizedArgumentHandling : Enum {
    public int value__;
    public static UnrecognizedArgumentHandling Throw;
    public static UnrecognizedArgumentHandling StopParsingAndCollect;
    public static UnrecognizedArgumentHandling CollectAndContinue;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.UnrecognizedCommandParsingException : CommandParsingException {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <NearestMatches>k__BackingField;
    public IEnumerable`1<string> NearestMatches { get; }
    public UnrecognizedCommandParsingException(CommandLineApplication command, IEnumerable`1<string> nearestMatches, string message);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_NearestMatches();
}
public class McMaster.Extensions.CommandLineUtils.ValidateMethodConvention : object {
    [NullableContextAttribute("1")]
public sealed virtual void Apply(ConventionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.Validation.AttributeValidator : object {
    [CompilerGeneratedAttribute]
private ValidationAttribute <ValidationAttribute>k__BackingField;
    internal ValidationAttribute ValidationAttribute { get; }
    public AttributeValidator(ValidationAttribute attribute);
    [CompilerGeneratedAttribute]
internal ValidationAttribute get_ValidationAttribute();
    public sealed virtual ValidationResult GetValidationResult(CommandOption option, ValidationContext context);
    public sealed virtual ValidationResult GetValidationResult(CommandArgument argument, ValidationContext context);
    [NullableContextAttribute("2")]
private ValidationResult GetValidationResult(IReadOnlyList`1<string> values, ValidationContext context);
    public sealed virtual ValidationResult GetValidationResult(CommandLineApplication command, ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.Validation.DelegateValidator : object {
    private Func`2<ValidationContext, ValidationResult> _validator;
    public DelegateValidator(Func`2<ValidationContext, ValidationResult> validator);
    private sealed virtual override ValidationResult McMaster.Extensions.CommandLineUtils.Validation.ICommandValidator.GetValidationResult(CommandLineApplication command, ValidationContext context);
    private sealed virtual override ValidationResult McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidator.GetValidationResult(CommandArgument argument, ValidationContext context);
    private sealed virtual override ValidationResult McMaster.Extensions.CommandLineUtils.Validation.IOptionValidator.GetValidationResult(CommandOption option, ValidationContext context);
}
[AttributeUsageAttribute("128")]
public abstract class McMaster.Extensions.CommandLineUtils.Validation.FilePathExistsAttributeBase : ValidationAttribute {
    private FilePathType _filePathType;
    internal FilePathExistsAttributeBase(FilePathType filePathType);
    [NullableContextAttribute("2")]
protected virtual ValidationResult IsValid(object value, ValidationContext validationContext);
    [NullableContextAttribute("1")]
private static string GetDefaultErrorMessage(FilePathType filePathType);
}
[AttributeUsageAttribute("128")]
public abstract class McMaster.Extensions.CommandLineUtils.Validation.FilePathNotExistsAttributeBase : ValidationAttribute {
    private FilePathType _filePathType;
    internal FilePathNotExistsAttributeBase(FilePathType filePathType);
    [NullableContextAttribute("2")]
protected virtual ValidationResult IsValid(object value, ValidationContext validationContext);
    [NullableContextAttribute("1")]
private static string GetDefaultErrorMessage(FilePathType filePathType);
}
public interface McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidationBuilder {
    [NullableContextAttribute("1")]
public abstract virtual void Use(IArgumentValidator validator);
}
public interface McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidationBuilder`1 {
}
[NullableContextAttribute("1")]
public interface McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidator {
    public abstract virtual ValidationResult GetValidationResult(CommandArgument argument, ValidationContext context);
}
[NullableContextAttribute("1")]
public interface McMaster.Extensions.CommandLineUtils.Validation.ICommandValidator {
    public abstract virtual ValidationResult GetValidationResult(CommandLineApplication command, ValidationContext context);
}
public interface McMaster.Extensions.CommandLineUtils.Validation.IOptionValidationBuilder {
    [NullableContextAttribute("1")]
public abstract virtual void Use(IOptionValidator validator);
}
public interface McMaster.Extensions.CommandLineUtils.Validation.IOptionValidationBuilder`1 {
}
[NullableContextAttribute("1")]
public interface McMaster.Extensions.CommandLineUtils.Validation.IOptionValidator {
    public abstract virtual ValidationResult GetValidationResult(CommandOption option, ValidationContext context);
}
[NullableContextAttribute("1")]
public interface McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder {
    public abstract virtual void Use(IValidator validator);
}
public interface McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder`1 {
}
public interface McMaster.Extensions.CommandLineUtils.Validation.IValidator {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class McMaster.Extensions.CommandLineUtils.Validation.ValidationBuilder : object {
    [NullableAttribute("2")]
private CommandArgument _argument;
    [NullableAttribute("2")]
private CommandOption _option;
    public ValidationBuilder(CommandArgument argument);
    public ValidationBuilder(CommandOption option);
    public sealed virtual void Use(IValidator validator);
    private sealed virtual override void McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidationBuilder.Use(IArgumentValidator validator);
    private sealed virtual override void McMaster.Extensions.CommandLineUtils.Validation.IOptionValidationBuilder.Use(IOptionValidator validator);
}
public class McMaster.Extensions.CommandLineUtils.Validation.ValidationBuilder`1 : ValidationBuilder {
    [NullableContextAttribute("1")]
public ValidationBuilder`1(CommandArgument`1<T> argument);
    [NullableContextAttribute("1")]
public ValidationBuilder`1(CommandOption`1<T> option);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class McMaster.Extensions.CommandLineUtils.ValidationExtensions : object {
    [ExtensionAttribute]
public static CommandOption IsRequired(CommandOption option, bool allowEmptyStrings, string errorMessage);
    [ExtensionAttribute]
public static CommandOption`1<T> IsRequired(CommandOption`1<T> option, bool allowEmptyStrings, string errorMessage);
    [ExtensionAttribute]
public static CommandArgument IsRequired(CommandArgument argument, bool allowEmptyStrings, string errorMessage);
    [ExtensionAttribute]
public static CommandArgument`1<T> IsRequired(CommandArgument`1<T> argument, bool allowEmptyStrings, string errorMessage);
    [ExtensionAttribute]
public static CommandOption Accepts(CommandOption option, Action`1<IOptionValidationBuilder> configure);
    [ExtensionAttribute]
public static CommandArgument Accepts(CommandArgument argument, Action`1<IArgumentValidationBuilder> configure);
    [ExtensionAttribute]
public static IOptionValidationBuilder Accepts(CommandOption option);
    [ExtensionAttribute]
public static IArgumentValidationBuilder Accepts(CommandArgument argument);
    [ExtensionAttribute]
public static CommandOption`1<T> Accepts(CommandOption`1<T> option, Action`1<IOptionValidationBuilder`1<T>> configure);
    [ExtensionAttribute]
public static CommandArgument`1<T> Accepts(CommandArgument`1<T> argument, Action`1<IArgumentValidationBuilder`1<T>> configure);
    [ExtensionAttribute]
public static IOptionValidationBuilder`1<T> Accepts(CommandOption`1<T> option);
    [ExtensionAttribute]
public static IArgumentValidationBuilder`1<T> Accepts(CommandArgument`1<T> argument);
    [ExtensionAttribute]
public static IValidationBuilder Enum(IValidationBuilder builder, bool ignoreCase);
    [ExtensionAttribute]
public static IValidationBuilder Values(IValidationBuilder builder, String[] allowedValues);
    [ExtensionAttribute]
public static IValidationBuilder Values(IValidationBuilder builder, bool ignoreCase, String[] allowedValues);
    [ExtensionAttribute]
public static IValidationBuilder Values(IValidationBuilder builder, StringComparison comparer, String[] allowedValues);
    [ExtensionAttribute]
public static IValidationBuilder EmailAddress(IValidationBuilder builder, string errorMessage);
    [ExtensionAttribute]
public static IValidationBuilder ExistingFile(IValidationBuilder builder, string errorMessage);
    [ExtensionAttribute]
public static IValidationBuilder NonExistingFile(IValidationBuilder builder, string errorMessage);
    [ExtensionAttribute]
public static IValidationBuilder ExistingDirectory(IValidationBuilder builder, string errorMessage);
    [ExtensionAttribute]
public static IValidationBuilder NonExistingDirectory(IValidationBuilder builder, string errorMessage);
    [ExtensionAttribute]
public static IValidationBuilder ExistingFileOrDirectory(IValidationBuilder builder, string errorMessage);
    [ExtensionAttribute]
public static IValidationBuilder NonExistingFileOrDirectory(IValidationBuilder builder, string errorMessage);
    [ExtensionAttribute]
public static IValidationBuilder LegalFilePath(IValidationBuilder builder, string errorMessage);
    [ExtensionAttribute]
public static IValidationBuilder MinLength(IValidationBuilder builder, int length, string errorMessage);
    [ExtensionAttribute]
public static IValidationBuilder MaxLength(IValidationBuilder builder, int length, string errorMessage);
    [ExtensionAttribute]
public static IValidationBuilder RegularExpression(IValidationBuilder builder, string pattern, string errorMessage);
    [ExtensionAttribute]
public static IValidationBuilder Satisfies(IValidationBuilder builder, string errorMessage, Object[] ctorArgs);
    [ExtensionAttribute]
public static IValidationBuilder`1<int> Range(IValidationBuilder`1<int> builder, int minimum, int maximum, string errorMessage);
    [ExtensionAttribute]
public static IValidationBuilder`1<double> Range(IValidationBuilder`1<double> builder, double minimum, double maximum, string errorMessage);
    [ExtensionAttribute]
public static CommandLineApplication OnValidate(CommandLineApplication command, Func`2<ValidationContext, ValidationResult> validate);
    [ExtensionAttribute]
public static CommandArgument OnValidate(CommandArgument argument, Func`2<ValidationContext, ValidationResult> validate);
    [ExtensionAttribute]
public static CommandOption OnValidate(CommandOption option, Func`2<ValidationContext, ValidationResult> validate);
    [ExtensionAttribute]
private static IValidationBuilder Satisfies(IValidationBuilder builder, ValidationAttribute attribute, string errorMessage);
    private static T GetValidationAttr(string errorMessage, Object[] ctorArgs);
    private static T AddErrorMessage(T attribute, string errorMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("132")]
public class McMaster.Extensions.CommandLineUtils.VersionOptionAttribute : OptionAttributeBase {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    public string Version { get; public set; }
    public string Template { get; public set; }
    public VersionOptionAttribute(string version);
    public VersionOptionAttribute(string template, string version);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(string value);
    internal CommandOption Configure(CommandLineApplication app);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class McMaster.Extensions.CommandLineUtils.VersionOptionFromMemberAttribute : OptionAttributeBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    [NullableAttribute("2")]
public string MemberName { get; public set; }
    public string Template { get; public set; }
    public VersionOptionFromMemberAttribute(string template);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_MemberName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_MemberName(string value);
    [CompilerGeneratedAttribute]
public string get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(string value);
    internal CommandOption Configure(CommandLineApplication app, Type type, Func`1<object> targetInstanceFactory);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
