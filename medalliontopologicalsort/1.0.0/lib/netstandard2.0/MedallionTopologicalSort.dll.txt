internal class Medallion.Collections.FifoQueue : Queue`1<int> {
    private sealed virtual override void Medallion.Collections.IQueue.Enqueue(int value);
    private sealed virtual override int Medallion.Collections.IQueue.Dequeue();
}
internal static class Medallion.Collections.Invariant : object {
    [NullableContextAttribute("2")]
[ConditionalAttribute("DEBUG")]
public static void Require(bool condition, string message);
}
internal interface Medallion.Collections.IQueue {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual void Enqueue(int value);
    public abstract virtual int Dequeue();
}
[NullableContextAttribute("1")]
internal interface Medallion.Collections.IThenByTopologicalSortProvider`1 {
    public abstract virtual Func`3<int, int, bool> CreateIndexComparison(IReadOnlyList`1<TElement> items, Func`3<int, int, bool> next);
}
[NullableContextAttribute("1")]
internal interface Medallion.Collections.ITopologicalSortProvider`1 {
    public abstract virtual IEnumerable`1<TElement> GetSource();
    public abstract virtual IEqualityComparer`1<ValueTuple`1<TElement>> GetItemComparer();
    public abstract virtual IQueue CreateQueue(IReadOnlyList`1<TElement> items);
    public abstract virtual Func`2<TElement, IEnumerable`1<TElement>> GetGetDependencies();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Medallion.Collections.PriorityQueue : object {
    private Func`3<int, int, bool> _less;
    private int _maxCapacity;
    private Int32[] _heap;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; private set; }
    public PriorityQueue(Func`3<int, int, bool> less, int maxCapacity);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public sealed virtual void Enqueue(int item);
    public sealed virtual int Dequeue();
    private void Expand();
    private void Swim(int index, int item);
    private void Sink(int index, int item);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Medallion.Collections.StableTopologicallySortedEnumerable`1 : TopologicallySortedEnumerableBase`1<TElement> {
    public StableTopologicallySortedEnumerable`1(IEnumerable`1<TElement> source, Func`2<TElement, IEnumerable`1<TElement>> getDependencies, IEqualityComparer`1<TElement> comparer);
    public virtual IQueue CreateQueue(IReadOnlyList`1<TElement> items);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Medallion.Collections.ThenByTopologicallySortedOrderedEnumerable`2 : object {
    private IThenByTopologicalSortProvider`1<TElement> _source;
    private Func`2<TElement, TKey> _keySelector;
    private IComparer`1<TKey> _keyComparer;
    private bool _descending;
    public ThenByTopologicallySortedOrderedEnumerable`2(IThenByTopologicalSortProvider`1<TElement> source, Func`2<TElement, TKey> keySelector, IComparer`1<TKey> keyComparer, bool descending);
    public sealed virtual Func`3<int, int, bool> CreateIndexComparison(IReadOnlyList`1<TElement> items, Func`3<int, int, bool> next);
    private sealed virtual override IOrderedEnumerable`1<TElement> System.Linq.IOrderedEnumerable<TElement>.CreateOrderedEnumerable(Func`2<TElement, TKey1> keySelector, IComparer`1<TKey1> comparer, bool descending);
    private sealed virtual override IQueue Medallion.Collections.ITopologicalSortProvider<TElement>.CreateQueue(IReadOnlyList`1<TElement> items);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<TElement> GetEnumerator();
    private sealed virtual override Func`2<TElement, IEnumerable`1<TElement>> Medallion.Collections.ITopologicalSortProvider<TElement>.GetGetDependencies();
    private sealed virtual override IEqualityComparer`1<ValueTuple`1<TElement>> Medallion.Collections.ITopologicalSortProvider<TElement>.GetItemComparer();
    private sealed virtual override IEnumerable`1<TElement> Medallion.Collections.ITopologicalSortProvider<TElement>.GetSource();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Medallion.Collections.TopologicallySortedEnumerableBase`1 : object {
    private IEnumerable`1<TElement> _source;
    private Func`2<TElement, IEnumerable`1<TElement>> _getDependencies;
    private IEqualityComparer`1<TElement> _comparer;
    protected TopologicallySortedEnumerableBase`1(IEnumerable`1<TElement> source, Func`2<TElement, IEnumerable`1<TElement>> getDependencies, IEqualityComparer`1<TElement> comparer);
    private sealed virtual override IEnumerable`1<TElement> Medallion.Collections.ITopologicalSortProvider<TElement>.GetSource();
    private sealed virtual override IEqualityComparer`1<ValueTuple`1<TElement>> Medallion.Collections.ITopologicalSortProvider<TElement>.GetItemComparer();
    public abstract virtual IQueue CreateQueue(IReadOnlyList`1<TElement> items);
    private sealed virtual override Func`2<TElement, IEnumerable`1<TElement>> Medallion.Collections.ITopologicalSortProvider<TElement>.GetGetDependencies();
    private sealed virtual override bool System.Collections.Generic.IEqualityComparer<ValueTuple<TElement>>.Equals(ValueTuple`1<TElement> x, ValueTuple`1<TElement> y);
    private sealed virtual override int System.Collections.Generic.IEqualityComparer<ValueTuple<TElement>>.GetHashCode(ValueTuple`1<TElement> obj);
    public sealed virtual IEnumerator`1<TElement> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Medallion.Collections.TopologicallySortedOrderedEnumerable`1 : TopologicallySortedEnumerableBase`1<TElement> {
    public TopologicallySortedOrderedEnumerable`1(IEnumerable`1<TElement> source, Func`2<TElement, IEnumerable`1<TElement>> getDependencies, IEqualityComparer`1<TElement> comparer);
    public virtual IQueue CreateQueue(IReadOnlyList`1<TElement> items);
    private sealed virtual override Func`3<int, int, bool> Medallion.Collections.IThenByTopologicalSortProvider<TElement>.CreateIndexComparison(IReadOnlyList`1<TElement> items, Func`3<int, int, bool> next);
    private sealed virtual override IOrderedEnumerable`1<TElement> System.Linq.IOrderedEnumerable<TElement>.CreateOrderedEnumerable(Func`2<TElement, TKey> keySelector, IComparer`1<TKey> comparer, bool descending);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Medallion.Collections.TopologicalSorter : object {
    [IteratorStateMachineAttribute("Medallion.Collections.TopologicalSorter/<TopologicalSort>d__0`1")]
public static IEnumerator`1<TElement> TopologicalSort(ITopologicalSortProvider`1<TElement> provider);
    private static Exception SortError(string message);
    public static IOrderedEnumerable`1<TElement> CreateOrderedEnumerable(IThenByTopologicalSortProvider`1<TElement> provider, Func`2<TElement, TKey> keySelector, IComparer`1<TKey> comparer, bool descending);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static void <TopologicalSort>g__EnqueueYieldable|0_0(int index, <>c__DisplayClass0_0`1& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Medallion.Collections.TopologicalSortExtensions : object {
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderTopologicallyBy(IEnumerable`1<TSource> source, Func`2<TSource, IEnumerable`1<TSource>> getDependencies, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> StableOrderTopologicallyBy(IEnumerable`1<TSource> source, Func`2<TSource, IEnumerable`1<TSource>> getDependencies, IEqualityComparer`1<TSource> comparer);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
