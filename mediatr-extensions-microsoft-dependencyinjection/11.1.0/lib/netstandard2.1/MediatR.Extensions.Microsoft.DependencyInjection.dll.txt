[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MediatR.MediatRServiceConfiguration : object {
    [CompilerGeneratedAttribute]
private Func`2<Type, bool> <TypeEvaluator>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <MediatorImplementationType>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceLifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestExceptionActionProcessorStrategy <RequestExceptionActionProcessorStrategy>k__BackingField;
    public Func`2<Type, bool> TypeEvaluator { get; private set; }
    public Type MediatorImplementationType { get; private set; }
    public ServiceLifetime Lifetime { get; private set; }
    public RequestExceptionActionProcessorStrategy RequestExceptionActionProcessorStrategy { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<Type, bool> get_TypeEvaluator();
    [CompilerGeneratedAttribute]
private void set_TypeEvaluator(Func`2<Type, bool> value);
    [CompilerGeneratedAttribute]
public Type get_MediatorImplementationType();
    [CompilerGeneratedAttribute]
private void set_MediatorImplementationType(Type value);
    [CompilerGeneratedAttribute]
public ServiceLifetime get_Lifetime();
    [CompilerGeneratedAttribute]
private void set_Lifetime(ServiceLifetime value);
    [CompilerGeneratedAttribute]
public RequestExceptionActionProcessorStrategy get_RequestExceptionActionProcessorStrategy();
    [CompilerGeneratedAttribute]
public void set_RequestExceptionActionProcessorStrategy(RequestExceptionActionProcessorStrategy value);
    public MediatRServiceConfiguration Using();
    public MediatRServiceConfiguration AsSingleton();
    public MediatRServiceConfiguration AsScoped();
    public MediatRServiceConfiguration AsTransient();
    public MediatRServiceConfiguration WithEvaluator(Func`2<Type, bool> evaluator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MediatR.Registration.ServiceRegistrar : object {
    public static void AddMediatRClasses(IServiceCollection services, IEnumerable`1<Assembly> assembliesToScan, MediatRServiceConfiguration configuration);
    private static void ConnectImplementationsToTypesClosing(Type openRequestInterface, IServiceCollection services, IEnumerable`1<Assembly> assembliesToScan, bool addIfAlreadyExists, MediatRServiceConfiguration configuration);
    private static bool IsMatchingWithInterface(Type handlerType, Type handlerInterface);
    private static void AddConcretionsThatCouldBeClosed(Type interface, List`1<Type> concretions, IServiceCollection services);
    [ExtensionAttribute]
private static bool CouldCloseTo(Type openConcretion, Type closedInterface);
    [ExtensionAttribute]
private static bool CanBeCastTo(Type pluggedType, Type pluginType);
    [ExtensionAttribute]
private static bool IsOpenGeneric(Type type);
    [ExtensionAttribute]
private static IEnumerable`1<Type> FindInterfacesThatClose(Type pluggedType, Type templateType);
    [IteratorStateMachineAttribute("MediatR.Registration.ServiceRegistrar/<FindInterfacesThatClosesCore>d__8")]
private static IEnumerable`1<Type> FindInterfacesThatClosesCore(Type pluggedType, Type templateType);
    [ExtensionAttribute]
private static bool IsConcrete(Type type);
    [ExtensionAttribute]
private static void Fill(IList`1<T> list, T value);
    public static void AddRequiredServices(IServiceCollection services, MediatRServiceConfiguration serviceConfiguration);
    [ExtensionAttribute]
private static void TryAddTransientExact(IServiceCollection services, Type serviceType, Type implementationType);
}
public enum MediatR.RequestExceptionActionProcessorStrategy : Enum {
    public int value__;
    public static RequestExceptionActionProcessorStrategy ApplyForUnhandledExceptions;
    public static RequestExceptionActionProcessorStrategy ApplyForAllExceptions;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MediatR.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddMediatR(IServiceCollection services, Assembly[] assemblies);
    [ExtensionAttribute]
public static IServiceCollection AddMediatR(IServiceCollection services, Action`1<MediatRServiceConfiguration> configuration, Assembly[] assemblies);
    [ExtensionAttribute]
public static IServiceCollection AddMediatR(IServiceCollection services, IEnumerable`1<Assembly> assemblies, Action`1<MediatRServiceConfiguration> configuration);
    [ExtensionAttribute]
public static IServiceCollection AddMediatR(IServiceCollection services, Type[] handlerAssemblyMarkerTypes);
    [ExtensionAttribute]
public static IServiceCollection AddMediatR(IServiceCollection services, Action`1<MediatRServiceConfiguration> configuration, Type[] handlerAssemblyMarkerTypes);
    [ExtensionAttribute]
public static IServiceCollection AddMediatR(IServiceCollection services, IEnumerable`1<Type> handlerAssemblyMarkerTypes, Action`1<MediatRServiceConfiguration> configuration);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
