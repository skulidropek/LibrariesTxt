public interface MediatR.IMediator {
}
[NullableContextAttribute("1")]
public interface MediatR.INotificationHandler`1 {
    public abstract virtual Task Handle(TNotification notification, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface MediatR.INotificationPublisher {
    public abstract virtual Task Publish(IEnumerable`1<NotificationHandlerExecutor> handlerExecutors, INotification notification, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class MediatR.Internal.HandlersOrderer : object {
    public static IList`1<object> Prioritize(IList`1<object> handlers, TRequest request);
    private static IEnumerable`1<ObjectDetails> RemoveOverridden(IList`1<ObjectDetails> handlersData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MediatR.Internal.ObjectDetails : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOverridden>k__BackingField;
    public string Name { get; }
    [NullableAttribute("2")]
public string AssemblyName { get; }
    [NullableAttribute("2")]
public string Location { get; }
    public object Value { get; }
    public Type Type { get; }
    public bool IsOverridden { get; public set; }
    public ObjectDetails(object value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_AssemblyName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public bool get_IsOverridden();
    [CompilerGeneratedAttribute]
public void set_IsOverridden(bool value);
    [NullableContextAttribute("2")]
public sealed virtual int Compare(ObjectDetails x, ObjectDetails y);
    private Nullable`1<int> CompareByAssembly(ObjectDetails x, ObjectDetails y);
    private Nullable`1<int> CompareByNamespace(ObjectDetails x, ObjectDetails y);
    private int CompareByLocation(ObjectDetails x, ObjectDetails y);
}
[NullableContextAttribute("1")]
public interface MediatR.IPipelineBehavior`2 {
    public abstract virtual Task`1<TResponse> Handle(TRequest request, RequestHandlerDelegate`1<TResponse> next, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface MediatR.IPublisher {
    public abstract virtual Task Publish(object notification, CancellationToken cancellationToken);
    public abstract virtual Task Publish(TNotification notification, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface MediatR.IRequestHandler`1 {
    public abstract virtual Task Handle(TRequest request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface MediatR.IRequestHandler`2 {
    public abstract virtual Task`1<TResponse> Handle(TRequest request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface MediatR.ISender {
    public abstract virtual Task`1<TResponse> Send(IRequest`1<TResponse> request, CancellationToken cancellationToken);
    public abstract virtual Task Send(TRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<object> Send(object request, CancellationToken cancellationToken);
    public abstract virtual IAsyncEnumerable`1<TResponse> CreateStream(IStreamRequest`1<TResponse> request, CancellationToken cancellationToken);
    public abstract virtual IAsyncEnumerable`1<object> CreateStream(object request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface MediatR.IStreamPipelineBehavior`2 {
    public abstract virtual IAsyncEnumerable`1<TResponse> Handle(TRequest request, StreamHandlerDelegate`1<TResponse> next, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface MediatR.IStreamRequestHandler`2 {
    public abstract virtual IAsyncEnumerable`1<TResponse> Handle(TRequest request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MediatR.Mediator : object {
    private IServiceProvider _serviceProvider;
    private INotificationPublisher _publisher;
    private static ConcurrentDictionary`2<Type, RequestHandlerBase> _requestHandlers;
    private static ConcurrentDictionary`2<Type, NotificationHandlerWrapper> _notificationHandlers;
    private static ConcurrentDictionary`2<Type, StreamRequestHandlerBase> _streamRequestHandlers;
    public Mediator(IServiceProvider serviceProvider);
    public Mediator(IServiceProvider serviceProvider, INotificationPublisher publisher);
    private static Mediator();
    public sealed virtual Task`1<TResponse> Send(IRequest`1<TResponse> request, CancellationToken cancellationToken);
    public sealed virtual Task Send(TRequest request, CancellationToken cancellationToken);
    public sealed virtual Task`1<object> Send(object request, CancellationToken cancellationToken);
    public sealed virtual Task Publish(TNotification notification, CancellationToken cancellationToken);
    public sealed virtual Task Publish(object notification, CancellationToken cancellationToken);
    protected virtual Task PublishCore(IEnumerable`1<NotificationHandlerExecutor> handlerExecutors, INotification notification, CancellationToken cancellationToken);
    private Task PublishNotification(INotification notification, CancellationToken cancellationToken);
    public sealed virtual IAsyncEnumerable`1<TResponse> CreateStream(IStreamRequest`1<TResponse> request, CancellationToken cancellationToken);
    public sealed virtual IAsyncEnumerable`1<object> CreateStream(object request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MediatR.NotificationHandler`1 : object {
    private sealed virtual override Task MediatR.INotificationHandler<TNotification>.Handle(TNotification notification, CancellationToken cancellationToken);
    protected abstract virtual void Handle(TNotification notification);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MediatR.NotificationHandlerExecutor : object {
    [CompilerGeneratedAttribute]
private object <HandlerInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<INotification, CancellationToken, Task> <HandlerCallback>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public object HandlerInstance { get; public set; }
    public Func`3<INotification, CancellationToken, Task> HandlerCallback { get; public set; }
    public NotificationHandlerExecutor(object HandlerInstance, Func`3<INotification, CancellationToken, Task> HandlerCallback);
    [CompilerGeneratedAttribute]
protected NotificationHandlerExecutor(NotificationHandlerExecutor original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public object get_HandlerInstance();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HandlerInstance(object value);
    [CompilerGeneratedAttribute]
public Func`3<INotification, CancellationToken, Task> get_HandlerCallback();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HandlerCallback(Func`3<INotification, CancellationToken, Task> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(NotificationHandlerExecutor left, NotificationHandlerExecutor right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(NotificationHandlerExecutor left, NotificationHandlerExecutor right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(NotificationHandlerExecutor other);
    [CompilerGeneratedAttribute]
public virtual NotificationHandlerExecutor <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Object& HandlerInstance, Func`3& HandlerCallback);
}
public class MediatR.NotificationPublishers.ForeachAwaitPublisher : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MediatR.NotificationPublishers.ForeachAwaitPublisher/<Publish>d__0")]
public sealed virtual Task Publish(IEnumerable`1<NotificationHandlerExecutor> handlerExecutors, INotification notification, CancellationToken cancellationToken);
}
public class MediatR.NotificationPublishers.TaskWhenAllPublisher : object {
    [NullableContextAttribute("1")]
public sealed virtual Task Publish(IEnumerable`1<NotificationHandlerExecutor> handlerExecutors, INotification notification, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface MediatR.Pipeline.IRequestExceptionAction`2 {
    public abstract virtual Task Execute(TRequest request, TException exception, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface MediatR.Pipeline.IRequestExceptionHandler`3 {
    public abstract virtual Task Handle(TRequest request, TException exception, RequestExceptionHandlerState`1<TResponse> state, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface MediatR.Pipeline.IRequestPostProcessor`2 {
    public abstract virtual Task Process(TRequest request, TResponse response, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface MediatR.Pipeline.IRequestPreProcessor`1 {
    public abstract virtual Task Process(TRequest request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2 : object {
    private IServiceProvider _serviceProvider;
    public RequestExceptionActionProcessorBehavior`2(IServiceProvider serviceProvider);
    [AsyncStateMachineAttribute("MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2/<Handle>d__2")]
public sealed virtual Task`1<TResponse> Handle(TRequest request, RequestHandlerDelegate`1<TResponse> next, CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("MediatR.Pipeline.RequestExceptionActionProcessorBehavior`2/<GetExceptionTypes>d__3")]
private static IEnumerable`1<Type> GetExceptionTypes(Type exceptionType);
    private IEnumerable`1<ValueTuple`2<Type, object>> GetActionsForException(Type exceptionType, TRequest request);
    private static MethodInfo GetMethodInfoForAction(Type exceptionType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MediatR.Pipeline.RequestExceptionHandlerState`1 : object {
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    [CompilerGeneratedAttribute]
private TResponse <Response>k__BackingField;
    public bool Handled { get; private set; }
    public TResponse Response { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
private void set_Handled(bool value);
    [CompilerGeneratedAttribute]
public TResponse get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(TResponse value);
    [NullableContextAttribute("1")]
public void SetHandled(TResponse response);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MediatR.Pipeline.RequestExceptionProcessorBehavior`2 : object {
    private IServiceProvider _serviceProvider;
    public RequestExceptionProcessorBehavior`2(IServiceProvider serviceProvider);
    [AsyncStateMachineAttribute("MediatR.Pipeline.RequestExceptionProcessorBehavior`2/<Handle>d__2")]
public sealed virtual Task`1<TResponse> Handle(TRequest request, RequestHandlerDelegate`1<TResponse> next, CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("MediatR.Pipeline.RequestExceptionProcessorBehavior`2/<GetExceptionTypes>d__3")]
private static IEnumerable`1<Type> GetExceptionTypes(Type exceptionType);
    private IEnumerable`1<ValueTuple`2<Type, object>> GetHandlersForException(Type exceptionType, TRequest request);
    private static MethodInfo GetMethodInfoForHandler(Type exceptionType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MediatR.Pipeline.RequestPostProcessorBehavior`2 : object {
    private IEnumerable`1<IRequestPostProcessor`2<TRequest, TResponse>> _postProcessors;
    public RequestPostProcessorBehavior`2(IEnumerable`1<IRequestPostProcessor`2<TRequest, TResponse>> postProcessors);
    [AsyncStateMachineAttribute("MediatR.Pipeline.RequestPostProcessorBehavior`2/<Handle>d__2")]
public sealed virtual Task`1<TResponse> Handle(TRequest request, RequestHandlerDelegate`1<TResponse> next, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MediatR.Pipeline.RequestPreProcessorBehavior`2 : object {
    private IEnumerable`1<IRequestPreProcessor`1<TRequest>> _preProcessors;
    public RequestPreProcessorBehavior`2(IEnumerable`1<IRequestPreProcessor`1<TRequest>> preProcessors);
    [AsyncStateMachineAttribute("MediatR.Pipeline.RequestPreProcessorBehavior`2/<Handle>d__2")]
public sealed virtual Task`1<TResponse> Handle(TRequest request, RequestHandlerDelegate`1<TResponse> next, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MediatR.Registration.ServiceRegistrar : object {
    private static int MaxGenericTypeParameters;
    private static int MaxTypesClosing;
    private static int MaxGenericTypeRegistrations;
    private static int RegistrationTimeout;
    public static void SetGenericRequestHandlerRegistrationLimitations(MediatRServiceConfiguration configuration);
    public static void AddMediatRClassesWithTimeout(IServiceCollection services, MediatRServiceConfiguration configuration);
    public static void AddMediatRClasses(IServiceCollection services, MediatRServiceConfiguration configuration, CancellationToken cancellationToken);
    private static void ConnectImplementationsToTypesClosing(Type openRequestInterface, IServiceCollection services, IEnumerable`1<Assembly> assembliesToScan, bool addIfAlreadyExists, MediatRServiceConfiguration configuration, CancellationToken cancellationToken);
    private static bool IsMatchingWithInterface(Type handlerType, Type handlerInterface);
    private static void AddConcretionsThatCouldBeClosed(Type interface, List`1<Type> concretions, IServiceCollection services);
    private static ValueTuple`2<Type, Type> GetConcreteRegistrationTypes(Type openRequestHandlerInterface, Type concreteGenericTRequest, Type openRequestHandlerImplementation);
    private static List`1<Type> GetConcreteRequestTypes(Type openRequestHandlerInterface, Type openRequestHandlerImplementation, IEnumerable`1<Assembly> assembliesToScan, CancellationToken cancellationToken);
    public static List`1<List`1<Type>> GenerateCombinations(Type requestType, List`1<List`1<Type>> lists, int depth, CancellationToken cancellationToken);
    private static void AddAllConcretionsThatClose(Type openRequestInterface, List`1<Type> concretions, IServiceCollection services, IEnumerable`1<Assembly> assembliesToScan, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static bool CouldCloseTo(Type openConcretion, Type closedInterface);
    [ExtensionAttribute]
private static bool CanBeCastTo(Type pluggedType, Type pluginType);
    [ExtensionAttribute]
private static bool IsOpenGeneric(Type type);
    [ExtensionAttribute]
internal static IEnumerable`1<Type> FindInterfacesThatClose(Type pluggedType, Type templateType);
    [IteratorStateMachineAttribute("MediatR.Registration.ServiceRegistrar/<FindInterfacesThatClosesCore>d__18")]
private static IEnumerable`1<Type> FindInterfacesThatClosesCore(Type pluggedType, Type templateType);
    [ExtensionAttribute]
private static bool IsConcrete(Type type);
    [ExtensionAttribute]
private static void Fill(IList`1<T> list, T value);
    public static void AddRequiredServices(IServiceCollection services, MediatRServiceConfiguration serviceConfiguration);
    private static void RegisterBehaviorIfImplementationsExist(IServiceCollection services, Type behaviorType, Type subBehaviorType);
}
public class MediatR.RequestHandlerDelegate`1 : MulticastDelegate {
    public RequestHandlerDelegate`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task`1<TResponse> Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual Task`1<TResponse> EndInvoke(IAsyncResult result);
}
public class MediatR.StreamHandlerDelegate`1 : MulticastDelegate {
    public StreamHandlerDelegate`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual IAsyncEnumerable`1<TResponse> Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual IAsyncEnumerable`1<TResponse> EndInvoke(IAsyncResult result);
}
public abstract class MediatR.Wrappers.NotificationHandlerWrapper : object {
    [NullableContextAttribute("1")]
public abstract virtual Task Handle(INotification notification, IServiceProvider serviceFactory, Func`4<IEnumerable`1<NotificationHandlerExecutor>, INotification, CancellationToken, Task> publish, CancellationToken cancellationToken);
}
public class MediatR.Wrappers.NotificationHandlerWrapperImpl`1 : NotificationHandlerWrapper {
    [NullableContextAttribute("1")]
public virtual Task Handle(INotification notification, IServiceProvider serviceFactory, Func`4<IEnumerable`1<NotificationHandlerExecutor>, INotification, CancellationToken, Task> publish, CancellationToken cancellationToken);
}
public abstract class MediatR.Wrappers.RequestHandlerBase : object {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<object> Handle(object request, IServiceProvider serviceProvider, CancellationToken cancellationToken);
}
public abstract class MediatR.Wrappers.RequestHandlerWrapper : RequestHandlerBase {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<Unit> Handle(IRequest request, IServiceProvider serviceProvider, CancellationToken cancellationToken);
}
public abstract class MediatR.Wrappers.RequestHandlerWrapper`1 : RequestHandlerBase {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<TResponse> Handle(IRequest`1<TResponse> request, IServiceProvider serviceProvider, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MediatR.Wrappers.RequestHandlerWrapperImpl`1 : RequestHandlerWrapper {
    [AsyncStateMachineAttribute("MediatR.Wrappers.RequestHandlerWrapperImpl`1/<Handle>d__0")]
public virtual Task`1<object> Handle(object request, IServiceProvider serviceProvider, CancellationToken cancellationToken);
    public virtual Task`1<Unit> Handle(IRequest request, IServiceProvider serviceProvider, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MediatR.Wrappers.RequestHandlerWrapperImpl`2 : RequestHandlerWrapper`1<TResponse> {
    [AsyncStateMachineAttribute("MediatR.Wrappers.RequestHandlerWrapperImpl`2/<Handle>d__0")]
public virtual Task`1<object> Handle(object request, IServiceProvider serviceProvider, CancellationToken cancellationToken);
    public virtual Task`1<TResponse> Handle(IRequest`1<TResponse> request, IServiceProvider serviceProvider, CancellationToken cancellationToken);
}
internal abstract class MediatR.Wrappers.StreamRequestHandlerBase : object {
    [NullableContextAttribute("1")]
public abstract virtual IAsyncEnumerable`1<object> Handle(object request, IServiceProvider serviceProvider, CancellationToken cancellationToken);
}
internal abstract class MediatR.Wrappers.StreamRequestHandlerWrapper`1 : StreamRequestHandlerBase {
    [NullableContextAttribute("1")]
public abstract virtual IAsyncEnumerable`1<TResponse> Handle(IStreamRequest`1<TResponse> request, IServiceProvider serviceProvider, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class MediatR.Wrappers.StreamRequestHandlerWrapperImpl`2 : StreamRequestHandlerWrapper`1<TResponse> {
    [AsyncIteratorStateMachineAttribute("MediatR.Wrappers.StreamRequestHandlerWrapperImpl`2/<Handle>d__0")]
public virtual IAsyncEnumerable`1<object> Handle(object request, IServiceProvider serviceProvider, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("MediatR.Wrappers.StreamRequestHandlerWrapperImpl`2/<Handle>d__1")]
public virtual IAsyncEnumerable`1<TResponse> Handle(IStreamRequest`1<TResponse> request, IServiceProvider serviceProvider, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("MediatR.Wrappers.StreamRequestHandlerWrapperImpl`2/<NextWrapper>d__2`1")]
private static IAsyncEnumerable`1<T> NextWrapper(IAsyncEnumerable`1<T> items, CancellationToken cancellationToken);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.DependencyInjection.MediatRServiceConfiguration : object {
    [CompilerGeneratedAttribute]
private Func`2<Type, bool> <TypeEvaluator>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <MediatorImplementationType>k__BackingField;
    [CompilerGeneratedAttribute]
private INotificationPublisher <NotificationPublisher>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <NotificationPublisherType>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceLifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestExceptionActionProcessorStrategy <RequestExceptionActionProcessorStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Assembly> <AssembliesToRegister>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ServiceDescriptor> <BehaviorsToRegister>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ServiceDescriptor> <StreamBehaviorsToRegister>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ServiceDescriptor> <RequestPreProcessorsToRegister>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ServiceDescriptor> <RequestPostProcessorsToRegister>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoRegisterRequestProcessors>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxGenericTypeParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxTypesClosing>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxGenericTypeRegistrations>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RegistrationTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RegisterGenericHandlers>k__BackingField;
    public Func`2<Type, bool> TypeEvaluator { get; public set; }
    public Type MediatorImplementationType { get; public set; }
    public INotificationPublisher NotificationPublisher { get; public set; }
    [NullableAttribute("2")]
public Type NotificationPublisherType { get; public set; }
    public ServiceLifetime Lifetime { get; public set; }
    public RequestExceptionActionProcessorStrategy RequestExceptionActionProcessorStrategy { get; public set; }
    internal List`1<Assembly> AssembliesToRegister { get; }
    public List`1<ServiceDescriptor> BehaviorsToRegister { get; }
    public List`1<ServiceDescriptor> StreamBehaviorsToRegister { get; }
    public List`1<ServiceDescriptor> RequestPreProcessorsToRegister { get; }
    public List`1<ServiceDescriptor> RequestPostProcessorsToRegister { get; }
    public bool AutoRegisterRequestProcessors { get; public set; }
    public int MaxGenericTypeParameters { get; public set; }
    public int MaxTypesClosing { get; public set; }
    public int MaxGenericTypeRegistrations { get; public set; }
    public int RegistrationTimeout { get; public set; }
    public bool RegisterGenericHandlers { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<Type, bool> get_TypeEvaluator();
    [CompilerGeneratedAttribute]
public void set_TypeEvaluator(Func`2<Type, bool> value);
    [CompilerGeneratedAttribute]
public Type get_MediatorImplementationType();
    [CompilerGeneratedAttribute]
public void set_MediatorImplementationType(Type value);
    [CompilerGeneratedAttribute]
public INotificationPublisher get_NotificationPublisher();
    [CompilerGeneratedAttribute]
public void set_NotificationPublisher(INotificationPublisher value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_NotificationPublisherType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_NotificationPublisherType(Type value);
    [CompilerGeneratedAttribute]
public ServiceLifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public void set_Lifetime(ServiceLifetime value);
    [CompilerGeneratedAttribute]
public RequestExceptionActionProcessorStrategy get_RequestExceptionActionProcessorStrategy();
    [CompilerGeneratedAttribute]
public void set_RequestExceptionActionProcessorStrategy(RequestExceptionActionProcessorStrategy value);
    [CompilerGeneratedAttribute]
internal List`1<Assembly> get_AssembliesToRegister();
    [CompilerGeneratedAttribute]
public List`1<ServiceDescriptor> get_BehaviorsToRegister();
    [CompilerGeneratedAttribute]
public List`1<ServiceDescriptor> get_StreamBehaviorsToRegister();
    [CompilerGeneratedAttribute]
public List`1<ServiceDescriptor> get_RequestPreProcessorsToRegister();
    [CompilerGeneratedAttribute]
public List`1<ServiceDescriptor> get_RequestPostProcessorsToRegister();
    [CompilerGeneratedAttribute]
public bool get_AutoRegisterRequestProcessors();
    [CompilerGeneratedAttribute]
public void set_AutoRegisterRequestProcessors(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxGenericTypeParameters();
    [CompilerGeneratedAttribute]
public void set_MaxGenericTypeParameters(int value);
    [CompilerGeneratedAttribute]
public int get_MaxTypesClosing();
    [CompilerGeneratedAttribute]
public void set_MaxTypesClosing(int value);
    [CompilerGeneratedAttribute]
public int get_MaxGenericTypeRegistrations();
    [CompilerGeneratedAttribute]
public void set_MaxGenericTypeRegistrations(int value);
    [CompilerGeneratedAttribute]
public int get_RegistrationTimeout();
    [CompilerGeneratedAttribute]
public void set_RegistrationTimeout(int value);
    [CompilerGeneratedAttribute]
public bool get_RegisterGenericHandlers();
    [CompilerGeneratedAttribute]
public void set_RegisterGenericHandlers(bool value);
    public MediatRServiceConfiguration RegisterServicesFromAssemblyContaining();
    public MediatRServiceConfiguration RegisterServicesFromAssemblyContaining(Type type);
    public MediatRServiceConfiguration RegisterServicesFromAssembly(Assembly assembly);
    public MediatRServiceConfiguration RegisterServicesFromAssemblies(Assembly[] assemblies);
    [NullableContextAttribute("2")]
public MediatRServiceConfiguration AddBehavior(ServiceLifetime serviceLifetime);
    public MediatRServiceConfiguration AddBehavior(ServiceLifetime serviceLifetime);
    public MediatRServiceConfiguration AddBehavior(Type implementationType, ServiceLifetime serviceLifetime);
    public MediatRServiceConfiguration AddBehavior(Type serviceType, Type implementationType, ServiceLifetime serviceLifetime);
    public MediatRServiceConfiguration AddOpenBehavior(Type openBehaviorType, ServiceLifetime serviceLifetime);
    [NullableContextAttribute("2")]
public MediatRServiceConfiguration AddStreamBehavior(ServiceLifetime serviceLifetime);
    public MediatRServiceConfiguration AddStreamBehavior(Type serviceType, Type implementationType, ServiceLifetime serviceLifetime);
    public MediatRServiceConfiguration AddStreamBehavior(ServiceLifetime serviceLifetime);
    public MediatRServiceConfiguration AddStreamBehavior(Type implementationType, ServiceLifetime serviceLifetime);
    public MediatRServiceConfiguration AddOpenStreamBehavior(Type openBehaviorType, ServiceLifetime serviceLifetime);
    [NullableContextAttribute("2")]
public MediatRServiceConfiguration AddRequestPreProcessor(ServiceLifetime serviceLifetime);
    public MediatRServiceConfiguration AddRequestPreProcessor(Type serviceType, Type implementationType, ServiceLifetime serviceLifetime);
    public MediatRServiceConfiguration AddRequestPreProcessor(ServiceLifetime serviceLifetime);
    public MediatRServiceConfiguration AddRequestPreProcessor(Type implementationType, ServiceLifetime serviceLifetime);
    public MediatRServiceConfiguration AddOpenRequestPreProcessor(Type openBehaviorType, ServiceLifetime serviceLifetime);
    [NullableContextAttribute("2")]
public MediatRServiceConfiguration AddRequestPostProcessor(ServiceLifetime serviceLifetime);
    public MediatRServiceConfiguration AddRequestPostProcessor(Type serviceType, Type implementationType, ServiceLifetime serviceLifetime);
    public MediatRServiceConfiguration AddRequestPostProcessor(ServiceLifetime serviceLifetime);
    public MediatRServiceConfiguration AddRequestPostProcessor(Type implementationType, ServiceLifetime serviceLifetime);
    public MediatRServiceConfiguration AddOpenRequestPostProcessor(Type openBehaviorType, ServiceLifetime serviceLifetime);
}
public enum Microsoft.Extensions.DependencyInjection.RequestExceptionActionProcessorStrategy : Enum {
    public int value__;
    public static RequestExceptionActionProcessorStrategy ApplyForUnhandledExceptions;
    public static RequestExceptionActionProcessorStrategy ApplyForAllExceptions;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddMediatR(IServiceCollection services, Action`1<MediatRServiceConfiguration> configuration);
    [ExtensionAttribute]
public static IServiceCollection AddMediatR(IServiceCollection services, MediatRServiceConfiguration configuration);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
