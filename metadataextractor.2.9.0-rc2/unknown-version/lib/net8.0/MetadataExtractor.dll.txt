[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Age : object {
    [CompilerGeneratedAttribute]
private int <Years>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Months>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Days>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Hours>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minutes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Seconds>k__BackingField;
    public int Years { get; }
    public int Months { get; }
    public int Days { get; }
    public int Hours { get; }
    public int Minutes { get; }
    public int Seconds { get; }
    public Age(int years, int months, int days, int hours, int minutes, int seconds);
    [CompilerGeneratedAttribute]
public int get_Years();
    [CompilerGeneratedAttribute]
public int get_Months();
    [CompilerGeneratedAttribute]
public int get_Days();
    [CompilerGeneratedAttribute]
public int get_Hours();
    [CompilerGeneratedAttribute]
public int get_Minutes();
    [CompilerGeneratedAttribute]
public int get_Seconds();
    public static Age FromPanasonicString(string s);
    public virtual string ToString();
    public string ToFriendlyString();
    private static void AppendAgePart(StringBuilder result, int num, string singularName);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(Age other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MetadataExtractor.Directory : object {
    internal static IReadOnlyList`1<Directory> EmptyList;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<int, string> _tagNameMap;
    private Dictionary`2<int, object> _tagMap;
    private List`1<Tag> _definedTagList;
    private List`1<string> _errorList;
    [NullableAttribute("2")]
private ITagDescriptor _descriptor;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Directory <Parent>k__BackingField;
    public string Name { get; }
    [NullableAttribute("2")]
public Directory Parent { get; internal set; }
    public bool IsEmpty { get; }
    public IReadOnlyList`1<Tag> Tags { get; }
    public int TagCount { get; }
    public bool HasError { get; }
    public IReadOnlyList`1<string> Errors { get; }
    protected Directory(Dictionary`2<int, string> tagNameMap);
    private static Directory();
    public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Directory get_Parent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Parent(Directory value);
    [NullableContextAttribute("2")]
protected virtual bool TryGetTagName(int tagType, String& tagName);
    public bool get_IsEmpty();
    public bool ContainsTag(int tagType);
    public IReadOnlyList`1<Tag> get_Tags();
    public int get_TagCount();
    protected void SetDescriptor(ITagDescriptor descriptor);
    public void AddError(string message);
    public bool get_HasError();
    public IReadOnlyList`1<string> get_Errors();
    public virtual void Set(int tagType, object value);
    [NullableContextAttribute("2")]
public object GetObject(int tagType);
    public void RemoveTag(int tagId);
    public string GetTagName(int tagType);
    public bool HasTagName(int tagType);
    [NullableContextAttribute("2")]
public string GetDescription(int tagType);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MetadataExtractor.DirectoryExtensions : object {
    private static String[] _datePatterns;
    private static DirectoryExtensions();
    [ExtensionAttribute]
public static byte GetByte(Directory directory, int tagType);
    [ExtensionAttribute]
public static bool TryGetByte(Directory directory, int tagType, Byte& value);
    [ExtensionAttribute]
public static short GetInt16(Directory directory, int tagType);
    [ExtensionAttribute]
public static bool TryGetInt16(Directory directory, int tagType, Int16& value);
    [ExtensionAttribute]
public static ushort GetUInt16(Directory directory, int tagType);
    [ExtensionAttribute]
public static bool TryGetUInt16(Directory directory, int tagType, UInt16& value);
    [ExtensionAttribute]
public static int GetInt32(Directory directory, int tagType);
    [ExtensionAttribute]
public static bool TryGetInt32(Directory directory, int tagType, Int32& value);
    [ExtensionAttribute]
public static UInt32 GetUInt32(Directory directory, int tagType);
    [ExtensionAttribute]
public static bool TryGetUInt32(Directory directory, int tagType, UInt32& value);
    [ExtensionAttribute]
public static long GetInt64(Directory directory, int tagType);
    [ExtensionAttribute]
public static bool TryGetInt64(Directory directory, int tagType, Int64& value);
    [ExtensionAttribute]
public static ulong GetUInt64(Directory directory, int tagType);
    [ExtensionAttribute]
public static bool TryGetUInt64(Directory directory, int tagType, UInt64& value);
    [ExtensionAttribute]
public static float GetSingle(Directory directory, int tagType);
    [ExtensionAttribute]
public static bool TryGetSingle(Directory directory, int tagType, Single& value);
    [ExtensionAttribute]
public static double GetDouble(Directory directory, int tagType);
    [ExtensionAttribute]
public static bool TryGetDouble(Directory directory, int tagType, Double& value);
    [ExtensionAttribute]
public static bool GetBoolean(Directory directory, int tagType);
    [ExtensionAttribute]
public static bool TryGetBoolean(Directory directory, int tagType, Boolean& value);
    [ExtensionAttribute]
public static String[] GetStringArray(Directory directory, int tagType);
    [ExtensionAttribute]
public static StringValue[] GetStringValueArray(Directory directory, int tagType);
    [ExtensionAttribute]
public static Int32[] GetInt32Array(Directory directory, int tagType);
    [ExtensionAttribute]
public static Byte[] GetByteArray(Directory directory, int tagType);
    [ExtensionAttribute]
public static DateTime GetDateTime(Directory directory, int tagType);
    [ExtensionAttribute]
public static bool TryGetDateTime(Directory directory, int tagType, DateTime& dateTime);
    [ExtensionAttribute]
public static Rational GetRational(Directory directory, int tagType);
    [ExtensionAttribute]
public static bool TryGetRational(Directory directory, int tagType, Rational& value);
    [ExtensionAttribute]
public static Rational[] GetRationalArray(Directory directory, int tagType);
    [ExtensionAttribute]
public static string GetString(Directory directory, int tagType);
    [ExtensionAttribute]
public static string GetString(Directory directory, int tagType, Encoding encoding);
    [ExtensionAttribute]
public static StringValue GetStringValue(Directory directory, int tagType);
    [ExtensionAttribute]
private static IConvertible GetConvertibleObject(Directory directory, int tagType);
    private static T ThrowValueNotPossible(Directory directory, int tagType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.ErrorDirectory : Directory {
    public string Name { get; }
    public ErrorDirectory(string error);
    public virtual string get_Name();
    public virtual void Set(int tagType, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MetadataExtractor.Face : object {
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Age <Age>k__BackingField;
    public int X { get; }
    public int Y { get; }
    public int Width { get; }
    public int Height { get; }
    public string Name { get; }
    public Age Age { get; }
    public Face(int x, int y, int width, int height, string name, Age age);
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Age get_Age();
    public sealed virtual bool Equals(Face other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Adobe.AdobeJpegDescriptor : TagDescriptor`1<AdobeJpegDirectory> {
    [NullableContextAttribute("1")]
public AdobeJpegDescriptor(AdobeJpegDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetDctEncodeVersionDescription();
    public string GetColorTransformDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Adobe.AdobeJpegDirectory : Directory {
    public static int TagDctEncodeVersion;
    public static int TagApp14Flags0;
    public static int TagApp14Flags1;
    public static int TagColorTransform;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static AdobeJpegDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Adobe.AdobeJpegReader : object {
    public static string JpegSegmentPreamble;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<JpegSegmentType> <MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.SegmentTypes>k__BackingField;
    private IReadOnlyCollection`1<JpegSegmentType> MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.SegmentTypes { get; }
    [CompilerGeneratedAttribute]
private sealed virtual override IReadOnlyCollection`1<JpegSegmentType> MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.get_SegmentTypes();
    public sealed virtual IEnumerable`1<Directory> ReadJpegSegments(IEnumerable`1<JpegSegment> segments);
    public AdobeJpegDirectory Extract(SequentialReader reader);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Directory <ReadJpegSegments>b__4_1(JpegSegment bytes);
}
public class MetadataExtractor.Formats.Apple.BplistReader : object {
    public static bool IsValid(ReadOnlySpan`1<byte> bplist);
    public static PropertyListResults Parse(ReadOnlySpan`1<byte> bplist);
    [CompilerGeneratedAttribute]
internal static Trailer <Parse>g__ReadTrailer|1_0(ReadOnlySpan`1<byte> bplist);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static object <Parse>g__HandleInt|1_1(BufferReader& reader, byte marker);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static Dictionary`2<byte, byte> <Parse>g__HandleDict|1_2(BufferReader& reader, byte count);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static object <Parse>g__HandleData|1_3(BufferReader& reader, byte marker);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Avi.AviDescriptor : TagDescriptor`1<AviDirectory> {
    public AviDescriptor(AviDirectory directory);
    [NullableContextAttribute("2")]
public virtual string GetDescription(int tagType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Avi.AviDirectory : Directory {
    public static int TagFramesPerSecond;
    public static int TagSamplesPerSecond;
    public static int TagDuration;
    public static int TagVideoCodec;
    public static int TagAudioCodec;
    public static int TagWidth;
    public static int TagHeight;
    public static int TagStreams;
    public static int TagDateTimeOriginal;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static AviDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MetadataExtractor.Formats.Avi.AviMetadataReader : object {
    public static IReadOnlyList`1<Directory> ReadMetadata(string filePath);
    public static IReadOnlyList`1<Directory> ReadMetadata(Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Avi.AviRiffHandler : object {
    private List`1<Directory> _directories;
    [NullableAttribute("2")]
private AviDirectory _directory;
    public AviRiffHandler(List`1<Directory> directories);
    [NullableContextAttribute("0")]
public sealed virtual bool ShouldAcceptRiffIdentifier(ReadOnlySpan`1<byte> identifier);
    public sealed virtual bool ShouldAcceptChunk(string fourCc);
    [NullableContextAttribute("0")]
public sealed virtual bool ShouldAcceptList(ReadOnlySpan`1<byte> fourCc);
    public sealed virtual void ProcessChunk(string fourCc, Byte[] payload);
    public sealed virtual void AddError(string errorMessage);
    private AviDirectory GetOrCreateAviDirectory();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Bmp.BmpHeaderDescriptor : TagDescriptor`1<BmpHeaderDirectory> {
    [NullableContextAttribute("1")]
public BmpHeaderDescriptor(BmpHeaderDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetBitmapTypeDescription();
    public string GetCompressionDescription();
    public string GetRenderingDescription();
    public string GetColorEncodingDescription();
    public string GetColorSpaceTypeDescription();
    public string GetRenderingIntentDescription();
}
public class MetadataExtractor.Formats.Bmp.BmpHeaderDirectory : Directory {
    public static int TagBitmapType;
    public static int TagHeaderSize;
    public static int TagImageHeight;
    public static int TagImageWidth;
    public static int TagColourPlanes;
    public static int TagBitsPerPixel;
    public static int TagCompression;
    public static int TagXPixelsPerMeter;
    public static int TagYPixelsPerMeter;
    public static int TagPaletteColourCount;
    public static int TagImportantColourCount;
    public static int TagRendering;
    public static int TagColorEncoding;
    public static int TagRedMask;
    public static int TagGreenMask;
    public static int TagBlueMask;
    public static int TagAlphaMask;
    public static int TagColorSpaceType;
    public static int TagGammaRed;
    public static int TagGammaGreen;
    public static int TagGammaBlue;
    public static int TagIntent;
    public static int TagLinkedProfile;
    [NullableAttribute("1")]
private static Dictionary`2<int, string> _tagNameMap;
    [NullableAttribute("1")]
public string Name { get; }
    private static BmpHeaderDirectory();
    [NullableContextAttribute("1")]
public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MetadataExtractor.Formats.Bmp.BmpMetadataReader : object {
    public static IReadOnlyList`1<Directory> ReadMetadata(string filePath);
    public static IReadOnlyList`1<Directory> ReadMetadata(Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Bmp.BmpReader : object {
    public IReadOnlyList`1<Directory> Extract(SequentialReader reader);
    private static void ReadFileHeader(SequentialReader reader, bool allowArray, List`1<Directory> directories);
    private static void ReadBitmapHeader(SequentialReader reader, BmpHeaderDirectory directory, List`1<Directory> directories);
    private static void AddError(string errorMessage, List`1<Directory> directories);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Eps.EpsDescriptor : TagDescriptor`1<EpsDirectory> {
    public EpsDescriptor(EpsDirectory directory);
    [NullableContextAttribute("2")]
public virtual string GetDescription(int tagType);
    public string GetPixelDescription(int tagType);
    public string GetByteSizeDescription(int tagType);
    [NullableContextAttribute("2")]
public string GetColorTypeDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Eps.EpsDirectory : Directory {
    public static int TagDscVersion;
    public static int TagAuthor;
    public static int TagBoundingBox;
    public static int TagCopyright;
    public static int TagCreationDate;
    public static int TagCreator;
    public static int TagFor;
    public static int TagImageData;
    public static int TagKeywords;
    public static int TagModifyDate;
    public static int TagPages;
    public static int TagRouting;
    public static int TagSubject;
    public static int TagTitle;
    public static int TagVersion;
    public static int TagDocumentData;
    public static int TagEmulation;
    public static int TagExtensions;
    public static int TagLanguageLevel;
    public static int TagOrientation;
    public static int TagPageOrder;
    public static int TagOperatorIntervention;
    public static int TagOperatorMessage;
    public static int TagProofMode;
    public static int TagRequirements;
    public static int TagVmLocation;
    public static int TagVmUsage;
    public static int TagImageWidth;
    public static int TagImageHeight;
    public static int TagColorType;
    public static int TagRamSize;
    public static int TagTiffPreviewSize;
    public static int TagTiffPreviewOffset;
    public static int TagWmfPreviewSize;
    public static int TagWmfPreviewOffset;
    public static int TagContinueLine;
    internal static Dictionary`2<int, string> TagNameMap;
    internal static Dictionary`2<string, int> TagIntegerMap;
    public string Name { get; }
    private static EpsDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MetadataExtractor.Formats.Eps.EpsMetadataReader : object {
    public static IReadOnlyList`1<Directory> ReadMetadata(string filePath);
    public static IReadOnlyList`1<Directory> ReadMetadata(Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Eps.EpsReader : object {
    private int _previousTag;
    public IReadOnlyList`1<Directory> Extract(Stream inputStream);
    private void Extract(EpsDirectory directory, List`1<Directory> directories, SequentialReader reader);
    private void AddToDirectory(EpsDirectory directory, string name, string value);
    private static void ExtractImageData(EpsDirectory directory, string imageData);
    private static void ExtractPhotoshopData(List`1<Directory> directories, SequentialReader reader);
    private static void ExtractIccData(List`1<Directory> directories, SequentialReader reader);
    private static void ExtractXmpData(List`1<Directory> directories, SequentialReader reader);
    private static Byte[] ReadUntil(SequentialReader reader, ReadOnlySpan`1<byte> sentinel);
    private static Byte[] DecodeHexCommentBlock(SequentialReader reader);
    private static int TryHexToInt(byte b);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class MetadataExtractor.Formats.Exif.ExifDescriptorBase`1 : TagDescriptor`1<T> {
    [NullableContextAttribute("1")]
protected ExifDescriptorBase`1(T directory);
    public virtual string GetDescription(int tagType);
    public string GetInteropVersionDescription();
    public string GetInteropIndexDescription();
    public string GetReferenceBlackWhiteDescription();
    public string GetYResolutionDescription();
    public string GetXResolutionDescription();
    public string GetYCbCrPositioningDescription();
    public string GetOrientationDescription();
    public string GetResolutionDescription();
    private string GetUnicodeDescription(int tag);
    public string GetWindowsAuthorDescription();
    public string GetWindowsCommentDescription();
    public string GetWindowsKeywordsDescription();
    public string GetWindowsTitleDescription();
    public string GetWindowsSubjectDescription();
    public string GetYCbCrSubsamplingDescription();
    public string GetPlanarConfigurationDescription();
    public string GetSamplesPerPixelDescription();
    public string GetRowsPerStripDescription();
    public string GetStripByteCountsDescription();
    public string GetPhotometricInterpretationDescription();
    public string GetBitsPerSampleDescription();
    public string GetImageWidthDescription();
    public string GetImageHeightDescription();
    public string GetNewSubfileTypeDescription();
    public string GetSubfileTypeDescription();
    public string GetThresholdingDescription();
    public string GetFillOrderDescription();
    public string GetSubjectDistanceRangeDescription();
    public string GetSensitivityTypeDescription();
    public string GetLensSpecificationDescription();
    public string GetSharpnessDescription();
    public string GetSaturationDescription();
    public string GetContrastDescription();
    public string GetGainControlDescription();
    public string GetSceneCaptureTypeDescription();
    public string Get35MMFilmEquivFocalLengthDescription();
    public string GetDigitalZoomRatioDescription();
    public string GetWhiteBalanceModeDescription();
    public string GetExposureModeDescription();
    public string GetCustomRenderedDescription();
    public string GetUserCommentDescription();
    public string GetIsoEquivalentDescription();
    public string GetExifVersionDescription();
    public string GetFlashPixVersionDescription();
    public string GetSceneTypeDescription();
    public string GetCfaPatternDescription();
    public string GetCfaPattern2Description();
    private static string FormatCfaPattern(Int32[] pattern);
    private Int32[] DecodeCfaPattern(int tagType);
    public string GetFileSourceDescription();
    public string GetExposureBiasDescription();
    public string GetMaxApertureValueDescription();
    public string GetApertureValueDescription();
    public string GetBrightnessValueDescription();
    public string GetExposureProgramDescription();
    public string GetFocalPlaneXResolutionDescription();
    public string GetFocalPlaneYResolutionDescription();
    public string GetFocalPlaneResolutionUnitDescription();
    public string GetExifImageWidthDescription();
    public string GetExifImageHeightDescription();
    public string GetColorSpaceDescription();
    public string GetFocalLengthDescription();
    public string GetFlashDescription();
    public string GetWhiteBalanceDescription();
    [NullableContextAttribute("1")]
internal static string GetWhiteBalanceDescription(int value);
    public string GetMeteringModeDescription();
    public string GetCompressionDescription();
    public string GetSubjectDistanceDescription();
    public string GetCompressedAverageBitsPerPixelDescription();
    public string GetExposureTimeDescription();
    public string GetShutterSpeedDescription();
    public string GetFNumberDescription();
    public string GetSensingMethodDescription();
    public string GetComponentConfigurationDescription();
    public string GetJpegProcDescription();
    public string GetExtraSamplesDescription();
    public string GetSampleFormatDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MetadataExtractor.Formats.Exif.ExifDirectoryBase : Directory {
    public static int TagInteropIndex;
    public static int TagInteropVersion;
    public static int TagNewSubfileType;
    public static int TagSubfileType;
    public static int TagImageWidth;
    public static int TagImageHeight;
    public static int TagBitsPerSample;
    public static int TagCompression;
    public static int TagPhotometricInterpretation;
    public static int TagThresholding;
    public static int TagFillOrder;
    public static int TagDocumentName;
    public static int TagImageDescription;
    public static int TagMake;
    public static int TagModel;
    public static int TagStripOffsets;
    public static int TagOrientation;
    public static int TagSamplesPerPixel;
    public static int TagRowsPerStrip;
    public static int TagStripByteCounts;
    public static int TagMinSampleValue;
    public static int TagMaxSampleValue;
    public static int TagXResolution;
    public static int TagYResolution;
    public static int TagPlanarConfiguration;
    public static int TagPageName;
    public static int TagResolutionUnit;
    public static int TagPageNumber;
    public static int TagTransferFunction;
    public static int TagSoftware;
    public static int TagDateTime;
    public static int TagArtist;
    public static int TagHostComputer;
    public static int TagPredictor;
    public static int TagWhitePoint;
    public static int TagPrimaryChromaticities;
    public static int TagTileWidth;
    public static int TagTileLength;
    public static int TagTileOffsets;
    public static int TagTileByteCounts;
    public static int TagSubIfdOffset;
    public static int TagExtraSamples;
    public static int TagSampleFormat;
    public static int TagTransferRange;
    public static int TagJpegTables;
    public static int TagJpegProc;
    public static int TagJpegRestartInterval;
    public static int TagJpegLosslessPredictors;
    public static int TagJpegPointTransforms;
    public static int TagJpegQTables;
    public static int TagJpegDcTables;
    public static int TagJpegAcTables;
    public static int TagYCbCrCoefficients;
    public static int TagYCbCrSubsampling;
    public static int TagYCbCrPositioning;
    public static int TagReferenceBlackWhite;
    public static int TagStripRowCounts;
    public static int TagApplicationNotes;
    public static int TagRelatedImageFileFormat;
    public static int TagRelatedImageWidth;
    public static int TagRelatedImageHeight;
    public static int TagRating;
    public static int TagRatingPercent;
    public static int TagCfaRepeatPatternDim;
    public static int TagCfaPattern2;
    public static int TagBatteryLevel;
    public static int TagCopyright;
    public static int TagExposureTime;
    public static int TagFNumber;
    public static int TagPixelScale;
    public static int TagIptcNaa;
    public static int TagModelTiePoint;
    public static int TagPhotoshopSettings;
    public static int TagInterColorProfile;
    public static int TagGeoTiffGeoKeys;
    public static int TagGeoTiffGeoDoubleParams;
    public static int TagGeoTiffGeoAsciiParams;
    public static int TagExposureProgram;
    public static int TagSpectralSensitivity;
    public static int TagIsoEquivalent;
    public static int TagOptoElectricConversionFunction;
    public static int TagInterlace;
    [ObsoleteAttribute("Use TagTimeZoneOffset instead.")]
public static int TagTimeZoneOffsetTiffEp;
    [ObsoleteAttribute("Use TagSelfTimerMode instead.")]
public static int TagSelfTimerModeTiffEp;
    public static int TagTimeZoneOffset;
    public static int TagSelfTimerMode;
    public static int TagSensitivityType;
    public static int TagStandardOutputSensitivity;
    public static int TagRecommendedExposureIndex;
    public static int TagIsoSpeed;
    public static int TagIsoSpeedLatitudeYYY;
    public static int TagIsoSpeedLatitudeZZZ;
    public static int TagExifVersion;
    public static int TagDateTimeOriginal;
    public static int TagDateTimeDigitized;
    public static int TagTimeZone;
    public static int TagTimeZoneOriginal;
    public static int TagTimeZoneDigitized;
    public static int TagComponentsConfiguration;
    public static int TagCompressedAverageBitsPerPixel;
    public static int TagShutterSpeed;
    public static int TagAperture;
    public static int TagBrightnessValue;
    public static int TagExposureBias;
    public static int TagMaxAperture;
    public static int TagSubjectDistance;
    public static int TagMeteringMode;
    public static int TagWhiteBalance;
    public static int TagFlash;
    public static int TagFocalLength;
    public static int TagFlashEnergyTiffEp;
    public static int TagSpatialFreqResponseTiffEp;
    public static int TagNoise;
    public static int TagFocalPlaneXResolutionTiffEp;
    public static int TagFocalPlaneYResolutionTiffEp;
    public static int TagImageNumber;
    public static int TagSecurityClassification;
    public static int TagImageHistory;
    public static int TagSubjectLocationTiffEp;
    public static int TagExposureIndexTiffEp;
    public static int TagStandardIdTiffEp;
    public static int TagMakernote;
    public static int TagUserComment;
    public static int TagSubsecondTime;
    public static int TagSubsecondTimeOriginal;
    public static int TagSubsecondTimeDigitized;
    public static int TagWinTitle;
    public static int TagWinComment;
    public static int TagWinAuthor;
    public static int TagWinKeywords;
    public static int TagWinSubject;
    public static int TagFlashpixVersion;
    public static int TagColorSpace;
    public static int TagExifImageWidth;
    public static int TagExifImageHeight;
    public static int TagRelatedSoundFile;
    public static int TagFlashEnergy;
    public static int TagSpatialFreqResponse;
    public static int TagFocalPlaneXResolution;
    public static int TagFocalPlaneYResolution;
    public static int TagFocalPlaneResolutionUnit;
    public static int TagSubjectLocation;
    public static int TagExposureIndex;
    public static int TagSensingMethod;
    public static int TagFileSource;
    public static int TagSceneType;
    public static int TagCfaPattern;
    public static int TagCustomRendered;
    public static int TagExposureMode;
    public static int TagWhiteBalanceMode;
    public static int TagDigitalZoomRatio;
    public static int Tag35MMFilmEquivFocalLength;
    public static int TagSceneCaptureType;
    public static int TagGainControl;
    public static int TagContrast;
    public static int TagSaturation;
    public static int TagSharpness;
    public static int TagDeviceSettingDescription;
    public static int TagSubjectDistanceRange;
    public static int TagImageUniqueId;
    public static int TagCameraOwnerName;
    public static int TagBodySerialNumber;
    public static int TagLensSpecification;
    public static int TagLensMake;
    public static int TagLensModel;
    public static int TagLensSerialNumber;
    public static int TagGdalMetadata;
    public static int TagGdalNoData;
    public static int TagGamma;
    public static int TagPrintImageMatchingInfo;
    public static int TagPanasonicTitle;
    public static int TagPanasonicTitle2;
    public static int TagPadding;
    public static int TagLens;
    protected ExifDirectoryBase(Dictionary`2<int, string> tagNameMap);
    protected static void AddExifTagNames(Dictionary`2<int, string> map);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.ExifIfd0Descriptor : ExifDescriptorBase`1<ExifIfd0Directory> {
    public ExifIfd0Descriptor(ExifIfd0Directory directory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.ExifIfd0Directory : ExifDirectoryBase {
    public static int TagExifSubIfdOffset;
    public static int TagGpsInfoOffset;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static ExifIfd0Directory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.ExifImageDescriptor : ExifDescriptorBase`1<ExifImageDirectory> {
    public ExifImageDescriptor(ExifImageDirectory directory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.ExifImageDirectory : ExifDirectoryBase {
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static ExifImageDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.ExifInteropDescriptor : ExifDescriptorBase`1<ExifInteropDirectory> {
    public ExifInteropDescriptor(ExifInteropDirectory directory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.ExifInteropDirectory : ExifDirectoryBase {
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static ExifInteropDirectory();
    public virtual string get_Name();
}
public class MetadataExtractor.Formats.Exif.ExifReader : JpegSegmentWithPreambleMetadataReader {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IReadOnlyCollection`1<JpegSegmentType> <SegmentTypes>k__BackingField;
    public static ReadOnlySpan`1<byte> JpegSegmentPreamble { get; }
    public static int JpegSegmentPreambleLength { get; }
    protected ReadOnlySpan`1<byte> PreambleBytes { get; }
    [NullableAttribute("1")]
public IReadOnlyCollection`1<JpegSegmentType> SegmentTypes { get; }
    public static ReadOnlySpan`1<byte> get_JpegSegmentPreamble();
    public static bool StartsWithJpegExifPreamble(ReadOnlySpan`1<byte> bytes);
    public static int get_JpegSegmentPreambleLength();
    protected virtual ReadOnlySpan`1<byte> get_PreambleBytes();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual IReadOnlyCollection`1<JpegSegmentType> get_SegmentTypes();
    [NullableContextAttribute("1")]
protected virtual IEnumerable`1<Directory> Extract(Byte[] segmentBytes, int preambleLength);
    [NullableContextAttribute("1")]
public IReadOnlyList`1<Directory> Extract(IndexedReader reader, int exifStartOffset);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.ExifSubIfdDescriptor : ExifDescriptorBase`1<ExifSubIfdDirectory> {
    public ExifSubIfdDescriptor(ExifSubIfdDirectory directory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.ExifSubIfdDirectory : ExifDirectoryBase {
    public static int TagInteropOffset;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static ExifSubIfdDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.ExifThumbnailDescriptor : ExifDescriptorBase`1<ExifThumbnailDirectory> {
    [NullableContextAttribute("1")]
public ExifThumbnailDescriptor(ExifThumbnailDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetThumbnailLengthDescription();
    public string GetThumbnailOffsetDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.ExifThumbnailDirectory : ExifDirectoryBase {
    public static int TagThumbnailOffset;
    public static int TagThumbnailLength;
    private static Dictionary`2<int, string> _tagNameMap;
    [CompilerGeneratedAttribute]
private int <ExifStartOffset>k__BackingField;
    public string Name { get; }
    public int ExifStartOffset { get; }
    public Nullable`1<int> AdjustedThumbnailOffset { get; }
    private static ExifThumbnailDirectory();
    public ExifThumbnailDirectory(int exifStartOffset);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_ExifStartOffset();
    public Nullable`1<int> get_AdjustedThumbnailOffset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.ExifTiffHandler : DirectoryTiffHandler {
    private int _exifStartOffset;
    public ExifTiffHandler(List`1<Directory> directories, int exifStartOffset);
    public virtual TiffStandard ProcessTiffMarker(ushort marker);
    public virtual bool TryEnterSubIfd(int tagId);
    public virtual bool HasFollowerIfd();
    public virtual bool CustomProcessTag(TiffReaderContext& modreq(System.Runtime.InteropServices.InAttribute) context, int tagId, int valueOffset, int byteCount);
    public virtual void EndingIfd(TiffReaderContext& modreq(System.Runtime.InteropServices.InAttribute) context);
    [UnconditionalSuppressMessageAttribute("Aot", "IL3050:RequiresDynamicCode")]
private void ProcessGeoTiff(UInt16[] geoKeys, ExifIfd0Directory sourceDirectory);
    public virtual bool TryCustomProcessFormat(int tagId, TiffDataFormatCode formatCode, ulong componentCount, UInt64& byteCount);
    private bool ProcessMakernote(TiffReaderContext& context, int makernoteOffset);
    private static bool HandlePrintIM(Directory directory, int tagId);
    private static void ProcessPrintIM(PrintIMDirectory directory, int tagValueOffset, IndexedReader reader, int byteCount);
    private static void ProcessKodakMakernote(KodakMakernoteDirectory directory, int tagValueOffset, IndexedReader reader);
    private static void ProcessReconyxHyperFireMakernote(ReconyxHyperFireMakernoteDirectory directory, IndexedReader reader);
    private static void ProcessReconyxUltraFireMakernote(ReconyxUltraFireMakernoteDirectory directory, IndexedReader reader);
    private static string ProcessReconyxUltraFireVersion(int versionOffset, IndexedReader reader);
    private static void ProcessReconyxHyperFire2Makernote(ReconyxHyperFire2MakernoteDirectory directory, IndexedReader reader);
    [CompilerGeneratedAttribute]
internal static void <CustomProcessTag>g__ProcessBinary|5_0(Directory directory, int tagValueOffset, IndexedReader reader, int byteCount, bool isSigned, int arrayLength);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.GpsDescriptor : TagDescriptor`1<GpsDirectory> {
    [NullableContextAttribute("1")]
public GpsDescriptor(GpsDirectory directory);
    public virtual string GetDescription(int tagType);
    private string GetGpsVersionIdDescription();
    public string GetGpsLatitudeDescription();
    public string GetGpsLongitudeDescription();
    public string GetGpsTimeStampDescription();
    public string GetGpsDestLatitudeDescription();
    public string GetGpsDestLongitudeDescription();
    [NullableContextAttribute("1")]
private string GetGeoLocationDimension(int tagValue, int tagRef, string positiveRef);
    public string GetGpsDestinationReferenceDescription();
    public string GetGpsDestDistanceDescription();
    public string GetGpsDirectionDescription(int tagType);
    public string GetGpsDirectionReferenceDescription(int tagType);
    public string GetGpsDopDescription();
    public string GetGpsSpeedRefDescription();
    public string GetGpsSpeedDescription();
    public string GetGpsMeasureModeDescription();
    public string GetGpsStatusDescription();
    public string GetGpsAltitudeRefDescription();
    public string GetGpsAltitudeDescription();
    public string GetGpsProcessingMethodDescription();
    public string GetGpsAreaInformationDescription();
    public string GetGpsDifferentialDescription();
    public string GetGpsHPositioningErrorDescription();
    public string GetDegreesMinutesSecondsDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.GpsDirectory : ExifDirectoryBase {
    public static int TagVersionId;
    public static int TagLatitudeRef;
    public static int TagLatitude;
    public static int TagLongitudeRef;
    public static int TagLongitude;
    public static int TagAltitudeRef;
    public static int TagAltitude;
    public static int TagTimeStamp;
    public static int TagSatellites;
    public static int TagStatus;
    public static int TagMeasureMode;
    public static int TagDop;
    public static int TagSpeedRef;
    public static int TagSpeed;
    public static int TagTrackRef;
    public static int TagTrack;
    public static int TagImgDirectionRef;
    public static int TagImgDirection;
    public static int TagMapDatum;
    public static int TagDestLatitudeRef;
    public static int TagDestLatitude;
    public static int TagDestLongitudeRef;
    public static int TagDestLongitude;
    public static int TagDestBearingRef;
    public static int TagDestBearing;
    public static int TagDestDistanceRef;
    public static int TagDestDistance;
    public static int TagProcessingMethod;
    public static int TagAreaInformation;
    public static int TagDateStamp;
    public static int TagDifferential;
    public static int TagHPositioningError;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static GpsDirectory();
    public virtual string get_Name();
    public bool TryGetGeoLocation(GeoLocation& geoLocation);
    public bool TryGetGpsDate(DateTime& date);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.AppleMakernoteDescriptor : TagDescriptor`1<AppleMakernoteDirectory> {
    [NullableContextAttribute("1")]
public AppleMakernoteDescriptor(AppleMakernoteDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetAEStableDescription();
    public string GetAFStableDescription();
    public string GetHdrImageTypeDescription();
    public string GetAccelerationVectorDescription();
    public string GetImageCaptureTypeDescription();
    public string GetFrontFacingCameraDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.AppleMakernoteDirectory : Directory {
    public static int TagMakernoteVersion;
    public static int TagAEMatrix;
    public static int TagRunTime;
    public static int TagAEStable;
    public static int TagAETarget;
    public static int TagAEAverage;
    public static int TagAFStable;
    public static int TagAccelerationVector;
    public static int TagHdrImageType;
    public static int TagBurstUuid;
    public static int TagFocusDistanceRange;
    public static int TagOisMode;
    public static int TagContentIdentifier;
    public static int TagImageCaptureType;
    public static int TagImageUniqueId;
    public static int TagLivePhotoId;
    public static int TagImageProcessingFlags;
    public static int TagQualityHint;
    public static int TagLuminanceNoiseAmplitude;
    public static int TagImageCaptureRequestID;
    public static int TagHdrHeadroom;
    public static int TagSceneFlags;
    public static int TagSignalToNoiseRatioType;
    public static int TagSignalToNoiseRatio;
    public static int TagPhotoIdentifier;
    public static int TagFocusPosition;
    public static int TagHdrGain;
    public static int TagAFMeasuredDepth;
    public static int TagAFConfidence;
    public static int TagColorCorrectionMatrix;
    public static int TagGreenGhostMitigationStatus;
    public static int TagSemanticStyle;
    public static int TagSemanticStyleRenderingVer;
    public static int TagSemanticStylePreset;
    public static int TagFrontFacingCamera;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static AppleMakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.AppleRunTimeMakernoteDescriptor : TagDescriptor`1<AppleRunTimeMakernoteDirectory> {
    [NullableContextAttribute("1")]
public AppleRunTimeMakernoteDescriptor(AppleRunTimeMakernoteDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetFlagsDescription();
    public string GetValueDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.AppleRunTimeMakernoteDirectory : Directory {
    public static int TagFlags;
    public static int TagEpoch;
    public static int TagScale;
    public static int TagValue;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static AppleRunTimeMakernoteDirectory();
    public virtual string get_Name();
    public static AppleRunTimeMakernoteDirectory Parse(Byte[] bytes);
    [CompilerGeneratedAttribute]
internal static void <Parse>g__ProcessAppleRunTime|9_0(<>c__DisplayClass9_0& );
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.CanonMakernoteDescriptor : TagDescriptor`1<CanonMakernoteDirectory> {
    [NullableAttribute("1")]
private Dictionary`2<int, string> _lensTypeById;
    [NullableContextAttribute("1")]
public CanonMakernoteDescriptor(CanonMakernoteDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetSerialNumberDescription();
    public string GetFlashBiasDescription();
    public string GetAfPointUsedDescription();
    public string GetTagAfPointsInFocus();
    public string GetWhiteBalanceDescription();
    public string GetFocusMode2Description();
    public string GetFlashDetailsDescription();
    public string GetFocalUnitsPerMillimetreDescription();
    public string GetShortFocalLengthDescription();
    public string GetLongFocalLengthDescription();
    public string GetExposureModeDescription();
    public string GetAfPointSelectedDescription();
    public string GetMeteringModeDescription();
    public string GetIsoDescription();
    public string GetSharpnessDescription();
    public string GetSaturationDescription();
    public string GetContrastDescription();
    public string GetEasyShootingModeDescription();
    public string GetImageSizeDescription();
    public string GetFocusMode1Description();
    public string GetContinuousDriveModeDescription();
    public string GetFlashModeDescription();
    public string GetSelfTimerDelayDescription();
    public string GetMacroModeDescription();
    public string GetQualityDescription();
    public string GetDigitalZoomDescription();
    public string GetRecordModeDescription();
    public string GetFocusTypeDescription();
    public string GetLensTypeDescription();
    public string GetMaxApertureDescription();
    public string GetMinApertureDescription();
    public string GetFlashActivityDescription();
    public string GetFocusContinuousDescription();
    public string GetAESettingDescription();
    public string GetDisplayApertureDescription();
    public string GetSpotMeteringModeDescription();
    public string GetPhotoEffectDescription();
    public string GetManualFlashOutputDescription();
    public string GetColorToneDescription();
    public string GetSRawQualityDescription();
    private static double DecodeCanonEv(int val);
}
public class MetadataExtractor.Formats.Exif.Makernotes.CanonMakernoteDirectory : Directory {
    private static int TagCameraSettingsArray;
    private static int TagFocalLengthArray;
    private static int TagShotInfoArray;
    private static int TagPanoramaArray;
    public static int TagCanonFirmwareVersion;
    public static int TagCanonImageNumber;
    public static int TagCanonOwnerName;
    public static int TagCanonSerialNumber;
    public static int TagCameraInfoArray;
    public static int TagCanonFileLength;
    public static int TagsArray;
    public static int TagModelId;
    public static int TagMovieInfoArray;
    private static int TagAfInfoArray;
    public static int TagThumbnailImageValidArea;
    public static int TagSerialNumberFormat;
    public static int TagSuperMacro;
    public static int TagDateStampMode;
    public static int TagMyColors;
    public static int TagFirmwareRevision;
    public static int TagCategories;
    public static int TagFaceDetectArray1;
    public static int TagFaceDetectArray2;
    public static int TagAfInfoArray2;
    public static int TagImageUniqueId;
    public static int TagRawDataOffset;
    public static int TagOriginalDecisionDataOffset;
    public static int TagCustomFunctions1DArray;
    public static int TagPersonalFunctionsArray;
    public static int TagPersonalFunctionValuesArray;
    public static int TagFileInfoArray;
    public static int TagAfPointsInFocus1D;
    public static int TagLensModel;
    public static int TagSerialInfoArray;
    public static int TagDustRemovalData;
    public static int TagCropInfo;
    public static int TagCustomFunctionsArray2;
    public static int TagAspectInfoArray;
    public static int TagProcessingInfoArray;
    public static int TagToneCurveTable;
    public static int TagSharpnessTable;
    public static int TagSharpnessFreqTable;
    public static int TagWhiteBalanceTable;
    public static int TagColorBalanceArray;
    public static int TagMeasuredColorArray;
    public static int TagColorTemperature;
    public static int TagCanonFlagsArray;
    public static int TagModifiedInfoArray;
    public static int TagToneCurveMatching;
    public static int TagWhiteBalanceMatching;
    public static int TagColorSpace;
    public static int TagPreviewImageInfoArray;
    public static int TagVrdOffset;
    public static int TagSensorInfoArray;
    public static int TagColorDataArray2;
    public static int TagCrwParam;
    public static int TagColorInfoArray2;
    public static int TagBlackLevel;
    public static int TagCustomPictureStyleFileName;
    public static int TagColorInfoArray;
    public static int TagVignettingCorrectionArray1;
    public static int TagVignettingCorrectionArray2;
    public static int TagLightingOptimizerArray;
    public static int TagLensInfoArray;
    public static int TagAmbianceInfoArray;
    public static int TagCanonImageType;
    public static int TagFilterInfoArray;
    [NullableAttribute("1")]
private static Dictionary`2<int, string> _tagNameMap;
    [NullableAttribute("1")]
public string Name { get; }
    private static CanonMakernoteDirectory();
    [NullableContextAttribute("1")]
public virtual string get_Name();
    [NullableContextAttribute("1")]
public virtual void Set(int tagType, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.CasioType1MakernoteDescriptor : TagDescriptor`1<CasioType1MakernoteDirectory> {
    [NullableContextAttribute("1")]
public CasioType1MakernoteDescriptor(CasioType1MakernoteDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetCcdSensitivityDescription();
    public string GetSaturationDescription();
    public string GetContrastDescription();
    public string GetSharpnessDescription();
    public string GetDigitalZoomDescription();
    public string GetWhiteBalanceDescription();
    public string GetObjectDistanceDescription();
    public string GetFlashIntensityDescription();
    public string GetFlashModeDescription();
    public string GetFocusingModeDescription();
    public string GetQualityDescription();
    public string GetRecordingModeDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.CasioType1MakernoteDirectory : Directory {
    public static int TagRecordingMode;
    public static int TagQuality;
    public static int TagFocusingMode;
    public static int TagFlashMode;
    public static int TagFlashIntensity;
    public static int TagObjectDistance;
    public static int TagWhiteBalance;
    public static int TagUnknown1;
    public static int TagUnknown2;
    public static int TagDigitalZoom;
    public static int TagSharpness;
    public static int TagContrast;
    public static int TagSaturation;
    public static int TagUnknown3;
    public static int TagUnknown4;
    public static int TagUnknown5;
    public static int TagUnknown6;
    public static int TagUnknown7;
    public static int TagUnknown8;
    public static int TagCcdSensitivity;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static CasioType1MakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.CasioType2MakernoteDescriptor : TagDescriptor`1<CasioType2MakernoteDirectory> {
    [NullableContextAttribute("1")]
public CasioType2MakernoteDescriptor(CasioType2MakernoteDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetFilterDescription();
    public string GetEnhancementDescription();
    public string GetColourModeDescription();
    public string GetCcdIsoSensitivityDescription();
    public string GetTimeZoneDescription();
    public string GetFocusMode2Description();
    public string GetQualityDescription();
    public string GetSelfTimerDescription();
    public string GetRecordModeDescription();
    public string GetFlashDistanceDescription();
    public string GetObjectDistanceDescription();
    public string GetWhiteBalance2Description();
    public string GetWhiteBalanceBiasDescription();
    public string GetCasioPreviewThumbnailDescription();
    public string GetSharpnessDescription();
    public string GetContrastDescription();
    public string GetSaturationDescription();
    public string GetFocalLengthDescription();
    public string GetWhiteBalance1Description();
    public string GetIsoSensitivityDescription();
    public string GetFocusMode1Description();
    public string GetImageSizeDescription();
    public string GetQualityModeDescription();
    public string GetThumbnailOffsetDescription();
    public string GetThumbnailSizeDescription();
    public string GetThumbnailDimensionsDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.CasioType2MakernoteDirectory : Directory {
    public static int TagThumbnailDimensions;
    public static int TagThumbnailSize;
    public static int TagThumbnailOffset;
    public static int TagQualityMode;
    public static int TagImageSize;
    public static int TagFocusMode1;
    public static int TagIsoSensitivity;
    public static int TagWhiteBalance1;
    public static int TagFocalLength;
    public static int TagSaturation;
    public static int TagContrast;
    public static int TagSharpness;
    public static int TagPrintImageMatchingInfo;
    public static int TagPreviewThumbnail;
    public static int TagWhiteBalanceBias;
    public static int TagWhiteBalance2;
    public static int TagObjectDistance;
    public static int TagFlashDistance;
    public static int TagRecordMode;
    public static int TagSelfTimer;
    public static int TagQuality;
    public static int TagFocusMode2;
    public static int TagTimeZone;
    public static int TagBestShotMode;
    public static int TagCcdIsoSensitivity;
    public static int TagColourMode;
    public static int TagEnhancement;
    public static int TagFilter;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static CasioType2MakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.DjiMakernoteDescriptor : TagDescriptor`1<DjiMakernoteDirectory> {
    public DjiMakernoteDescriptor(DjiMakernoteDirectory directory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.DjiMakernoteDirectory : Directory {
    public static int TagMake;
    public static int TagSpeedX;
    public static int TagSpeedY;
    public static int TagSpeedZ;
    public static int TagAircraftPitch;
    public static int TagAircraftYaw;
    public static int TagAircraftRoll;
    public static int TagCameraPitch;
    public static int TagCameraYaw;
    public static int TagCameraRoll;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static DjiMakernoteDirectory();
    public virtual string get_Name();
    public Nullable`1<float> GetAircraftSpeedX();
    public Nullable`1<float> GetAircraftSpeedY();
    public Nullable`1<float> GetAircraftSpeedZ();
    public Nullable`1<float> GetAircraftPitch();
    public Nullable`1<float> GetAircraftYaw();
    public Nullable`1<float> GetAircraftRoll();
    public Nullable`1<float> GetCameraPitch();
    public Nullable`1<float> GetCameraYaw();
    public Nullable`1<float> GetCameraRoll();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.FlirMakernoteDescriptor : TagDescriptor`1<FlirMakernoteDirectory> {
    public FlirMakernoteDescriptor(FlirMakernoteDirectory directory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.FlirMakernoteDirectory : Directory {
    public static int TagImageTemperatureMax;
    public static int TagImageTemperatureMin;
    public static int TagEmissivity;
    public static int TagUnknownTemperature;
    public static int TagCameraTemperatureRangeMin;
    public static int TagCameraTemperatureRangeMax;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static FlirMakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.FujifilmMakernoteDescriptor : TagDescriptor`1<FujifilmMakernoteDirectory> {
    [NullableContextAttribute("1")]
public FujifilmMakernoteDescriptor(FujifilmMakernoteDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetMakernoteVersionDescription();
    public string GetSharpnessDescription();
    public string GetWhiteBalanceDescription();
    public string GetColorSaturationDescription();
    public string GetToneDescription();
    public string GetContrastDescription();
    public string GetNoiseReductionDescription();
    public string GetHighIsoNoiseReductionDescription();
    public string GetFlashModeDescription();
    public string GetFlashExposureValueDescription();
    public string GetMacroDescription();
    public string GetFocusModeDescription();
    public string GetSlowSyncDescription();
    public string GetPictureModeDescription();
    public string GetExrAutoDescription();
    public string GetExrModeDescription();
    public string GetAutoBracketingDescription();
    public string GetFinePixColorDescription();
    public string GetBlurWarningDescription();
    public string GetFocusWarningDescription();
    public string GetAutoExposureWarningDescription();
    public string GetDynamicRangeDescription();
    public string GetFilmModeDescription();
    public string GetDynamicRangeSettingDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.FujifilmMakernoteDirectory : Directory {
    public static int TagMakernoteVersion;
    public static int TagSerialNumber;
    public static int TagQuality;
    public static int TagSharpness;
    public static int TagWhiteBalance;
    public static int TagColorSaturation;
    public static int TagTone;
    public static int TagColorTemperature;
    public static int TagContrast;
    public static int TagWhiteBalanceFineTune;
    public static int TagNoiseReduction;
    public static int TagHighIsoNoiseReduction;
    public static int TagFlashMode;
    public static int TagFlashEv;
    public static int TagMacro;
    public static int TagFocusMode;
    public static int TagFocusPixel;
    public static int TagSlowSync;
    public static int TagPictureMode;
    public static int TagExrAuto;
    public static int TagExrMode;
    public static int TagAutoBracketing;
    public static int TagSequenceNumber;
    public static int TagFinePixColor;
    public static int TagBlurWarning;
    public static int TagFocusWarning;
    public static int TagAutoExposureWarning;
    public static int TagGeImageSize;
    public static int TagDynamicRange;
    public static int TagFilmMode;
    public static int TagDynamicRangeSetting;
    public static int TagDevelopmentDynamicRange;
    public static int TagMinFocalLength;
    public static int TagMaxFocalLength;
    public static int TagMaxApertureAtMinFocal;
    public static int TagMaxApertureAtMaxFocal;
    public static int TagAutoDynamicRange;
    public static int TagImageNumber;
    public static int TagFacesDetected;
    public static int TagFacePositions;
    public static int TagFaceRecInfo;
    public static int TagFileSource;
    public static int TagOrderNumber;
    public static int TagFrameNumber;
    public static int TagParallax;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static FujifilmMakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.KodakMakernoteDescriptor : TagDescriptor`1<KodakMakernoteDirectory> {
    [NullableContextAttribute("1")]
public KodakMakernoteDescriptor(KodakMakernoteDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetSharpnessDescription();
    public string GetColorModeDescription();
    public string GetFlashFiredDescription();
    public string GetFlashModeDescription();
    public string GetWhiteBalanceDescription();
    public string GetFocusModeDescription();
    public string GetShutterModeDescription();
    public string GetBurstModeDescription();
    public string GetQualityDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.KodakMakernoteDirectory : Directory {
    public static int TagKodakModel;
    public static int TagQuality;
    public static int TagBurstMode;
    public static int TagImageWidth;
    public static int TagImageHeight;
    public static int TagYearCreated;
    public static int TagMonthDayCreated;
    public static int TagTimeCreated;
    public static int TagBurstMode2;
    public static int TagShutterMode;
    public static int TagMeteringMode;
    public static int TagSequenceNumber;
    public static int TagFNumber;
    public static int TagExposureTime;
    public static int TagExposureCompensation;
    public static int TagFocusMode;
    public static int TagWhiteBalance;
    public static int TagFlashMode;
    public static int TagFlashFired;
    public static int TagIsoSetting;
    public static int TagIso;
    public static int TagTotalZoom;
    public static int TagDateTimeStamp;
    public static int TagColorMode;
    public static int TagDigitalZoom;
    public static int TagSharpness;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static KodakMakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.KyoceraMakernoteDescriptor : TagDescriptor`1<KyoceraMakernoteDirectory> {
    [NullableContextAttribute("1")]
public KyoceraMakernoteDescriptor(KyoceraMakernoteDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetProprietaryThumbnailDataDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.KyoceraMakernoteDirectory : Directory {
    public static int TagProprietaryThumbnail;
    public static int TagPrintImageMatchingInfo;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static KyoceraMakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.LeicaMakernoteDescriptor : TagDescriptor`1<LeicaMakernoteDirectory> {
    [NullableContextAttribute("1")]
public LeicaMakernoteDescriptor(LeicaMakernoteDirectory directory);
    public virtual string GetDescription(int tagType);
    private string GetCameraTemperatureDescription();
    private string GetApproximateFNumberDescription();
    private string GetMeasuredLVDescription();
    private string GetExternalSensorBrightnessValueDescription();
    private string GetWhiteBalanceDescription();
    private string GetUserProfileDescription();
    private string GetQualityDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.LeicaMakernoteDirectory : Directory {
    public static int TagQuality;
    public static int TagUserProfile;
    public static int TagSerialNumber;
    public static int TagWhiteBalance;
    public static int TagLensType;
    public static int TagExternalSensorBrightnessValue;
    public static int TagMeasuredLV;
    public static int TagApproximateFNumber;
    public static int TagCameraTemperature;
    public static int TagColorTemperature;
    public static int TagWBRedLevel;
    public static int TagWBGreenLevel;
    public static int TagWBBlueLevel;
    public static int TagCcdVersion;
    public static int TagCcdBoardVersion;
    public static int TagControllerBoardVersion;
    public static int TagM16CVersion;
    public static int TagImageIdNumber;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static LeicaMakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.LeicaType5MakernoteDescriptor : TagDescriptor`1<LeicaType5MakernoteDirectory> {
    [NullableContextAttribute("1")]
public LeicaType5MakernoteDescriptor(LeicaType5MakernoteDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetExposureModeDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.LeicaType5MakernoteDirectory : Directory {
    public static int TagLensModel;
    public static int TagOriginalFileName;
    public static int TagOriginalDirectory;
    public static int TagExposureMode;
    public static int TagShotInfo;
    public static int TagFilmMode;
    public static int TagWbRgbLevels;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static LeicaType5MakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.NikonPictureControl1Descriptor : TagDescriptor`1<NikonPictureControl1Directory> {
    [NullableContextAttribute("1")]
public NikonPictureControl1Descriptor(NikonPictureControl1Directory directory);
    public virtual string GetDescription(int tagType);
    public string GetPictureControlAdjustDescription();
    public string GetFilterEffectDescription();
    public string GetToningEffectDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.NikonPictureControl1Directory : Directory {
    public static int TagPictureControlVersion;
    public static int TagPictureControlName;
    public static int TagPictureControlBase;
    public static int TagPictureControlAdjust;
    public static int TagPictureControlQuickAdjust;
    public static int TagSharpness;
    public static int TagContrast;
    public static int TagBrightness;
    public static int TagSaturation;
    public static int TagHueAdjustment;
    public static int TagFilterEffect;
    public static int TagToningEffect;
    public static int TagToningSaturation;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static NikonPictureControl1Directory();
    public virtual string get_Name();
    internal static NikonPictureControl1Directory FromBytes(Byte[] bytes);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.NikonPictureControl2Descriptor : TagDescriptor`1<NikonPictureControl2Directory> {
    [NullableContextAttribute("1")]
public NikonPictureControl2Descriptor(NikonPictureControl2Directory directory);
    public virtual string GetDescription(int tagType);
    public string GetPictureControlAdjustDescription();
    public string GetFilterEffectDescription();
    public string GetToningEffectDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.NikonPictureControl2Directory : Directory {
    public static int TagPictureControlVersion;
    public static int TagPictureControlName;
    public static int TagPictureControlBase;
    public static int TagPictureControlAdjust;
    public static int TagPictureControlQuickAdjust;
    public static int TagSharpness;
    public static int TagClarity;
    public static int TagContrast;
    public static int TagBrightness;
    public static int TagSaturation;
    public static int TagHue;
    public static int TagFilterEffect;
    public static int TagToningEffect;
    public static int TagToningSaturation;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static NikonPictureControl2Directory();
    public virtual string get_Name();
    internal static NikonPictureControl2Directory FromBytes(Byte[] bytes);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.NikonType1MakernoteDescriptor : TagDescriptor`1<NikonType1MakernoteDirectory> {
    [NullableContextAttribute("1")]
public NikonType1MakernoteDescriptor(NikonType1MakernoteDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetConverterDescription();
    public string GetDigitalZoomDescription();
    public string GetFocusDescription();
    public string GetWhiteBalanceDescription();
    public string GetCcdSensitivityDescription();
    public string GetImageAdjustmentDescription();
    public string GetColorModeDescription();
    public string GetQualityDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.NikonType1MakernoteDirectory : Directory {
    public static int TagUnknown1;
    public static int TagQuality;
    public static int TagColorMode;
    public static int TagImageAdjustment;
    public static int TagCcdSensitivity;
    public static int TagWhiteBalance;
    public static int TagFocus;
    public static int TagUnknown2;
    public static int TagDigitalZoom;
    public static int TagConverter;
    public static int TagUnknown3;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static NikonType1MakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.NikonType2MakernoteDescriptor : TagDescriptor`1<NikonType2MakernoteDirectory> {
    [NullableContextAttribute("1")]
public NikonType2MakernoteDescriptor(NikonType2MakernoteDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetPowerUpTimeDescription();
    public string GetHighIsoNoiseReductionDescription();
    public string GetFlashUsedDescription();
    public string GetNefCompressionDescription();
    public string GetShootingModeDescription();
    public string GetLensTypeDescription();
    public string GetColorSpaceDescription();
    public string GetActiveDLightingDescription();
    public string GetVignetteControlDescription();
    public string GetAutoFocusPositionDescription();
    public string GetDigitalZoomDescription();
    public string GetProgramShiftDescription();
    public string GetExposureDifferenceDescription();
    public string GetAutoFlashCompensationDescription();
    public string GetFlashExposureCompensationDescription();
    public string GetFlashBracketCompensationDescription();
    public string GetExposureTuningDescription();
    public string GetLensStopsDescription();
    private string GetEvDescription(int tagType);
    public string GetIsoSettingDescription();
    public string GetLensDescription();
    public string GetHueAdjustmentDescription();
    public string GetColorModeDescription();
    public string GetFirmwareVersionDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.NikonType2MakernoteDirectory : Directory {
    public static int TagFirmwareVersion;
    public static int TagIso1;
    public static int TagColorMode;
    public static int TagQualityAndFileFormat;
    public static int TagCameraWhiteBalance;
    public static int TagCameraSharpening;
    public static int TagAfType;
    public static int TagFlashSyncMode;
    public static int TagAutoFlashMode;
    public static int TagUnknown34;
    public static int TagCameraWhiteBalanceFine;
    public static int TagCameraWhiteBalanceRbCoeff;
    public static int TagProgramShift;
    public static int TagExposureDifference;
    public static int TagIsoMode;
    public static int TagDataDump;
    public static int TagPreviewIfd;
    public static int TagAutoFlashCompensation;
    public static int TagIsoRequested;
    public static int TagImageBoundary;
    public static int TagFlashExposureCompensation;
    public static int TagFlashBracketCompensation;
    public static int TagAeBracketCompensation;
    public static int TagFlashMode;
    public static int TagCropHighSpeed;
    public static int TagExposureTuning;
    public static int TagCameraSerialNumber;
    public static int TagColorSpace;
    public static int TagVrInfo;
    public static int TagImageAuthentication;
    public static int TagFaceDetect;
    public static int TagActiveDLighting;
    public static int TagPictureControl;
    public static int TagWorldTime;
    public static int TagIsoInfo;
    public static int TagUnknown36;
    public static int TagUnknown37;
    public static int TagUnknown38;
    public static int TagUnknown39;
    public static int TagVignetteControl;
    public static int TagDistortInfo;
    public static int TagUnknown41;
    public static int TagUnknown42;
    public static int TagUnknown43;
    public static int TagUnknown44;
    public static int TagUnknown45;
    public static int TagUnknown46;
    public static int TagImageAdjustment;
    public static int TagCameraToneCompensation;
    public static int TagAdapter;
    public static int TagLensType;
    public static int TagLens;
    public static int TagManualFocusDistance;
    public static int TagDigitalZoom;
    public static int TagFlashUsed;
    public static int TagAfFocusPosition;
    public static int TagShootingMode;
    public static int TagUnknown20;
    public static int TagLensStops;
    public static int TagContrastCurve;
    public static int TagCameraColorMode;
    public static int TagUnknown47;
    public static int TagSceneMode;
    public static int TagLightSource;
    public static int TagShotInfo;
    public static int TagCameraHueAdjustment;
    public static int TagNefCompression;
    public static int TagSaturation;
    public static int TagNoiseReduction;
    public static int TagLinearizationTable;
    public static int TagColorBalance;
    public static int TagLensData;
    public static int TagNefThumbnailSize;
    public static int TagSensorPixelSize;
    public static int TagUnknown10;
    public static int TagSceneAssist;
    public static int TagDateStampMode;
    public static int TagRetouchHistory;
    public static int TagUnknown12;
    public static int TagCameraSerialNumber2;
    public static int TagImageDataSize;
    public static int TagUnknown27;
    public static int TagUnknown28;
    public static int TagImageCount;
    public static int TagDeletedImageCount;
    public static int TagExposureSequenceNumber;
    public static int TagFlashInfo;
    public static int TagImageOptimisation;
    public static int TagSaturation2;
    public static int TagDigitalVariProgram;
    public static int TagImageStabilisation;
    public static int TagAfResponse;
    public static int TagUnknown29;
    public static int TagUnknown30;
    public static int TagMultiExposure;
    public static int TagHighIsoNoiseReduction;
    public static int TagUnknown31;
    public static int TagToningEffect;
    public static int TagUnknown33;
    public static int TagUnknown48;
    public static int TagPowerUpTime;
    public static int TagAfInfo2;
    public static int TagFileInfo;
    public static int TagAfTune;
    public static int TagRetouchInfo;
    public static int TagPictureControl2;
    public static int TagUnknown51;
    public static int TagPrintImageMatchingInfo;
    public static int TagNikonCaptureData;
    public static int TagUnknown52;
    public static int TagUnknown53;
    public static int TagNikonCaptureVersion;
    public static int TagNikonCaptureOffsets;
    public static int TagNikonScan;
    public static int TagUnknown54;
    public static int TagNefBitDepth;
    public static int TagUnknown55;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static NikonType2MakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.OlympusCameraSettingsMakernoteDescriptor : TagDescriptor`1<OlympusCameraSettingsMakernoteDirectory> {
    [NullableAttribute("1")]
private static Dictionary`2<int, string> _toneLevelType;
    [NullableAttribute("1")]
private static Dictionary`2<int, string> _filters;
    [NullableContextAttribute("1")]
public OlympusCameraSettingsMakernoteDescriptor(OlympusCameraSettingsMakernoteDirectory directory);
    private static OlympusCameraSettingsMakernoteDescriptor();
    public virtual string GetDescription(int tagType);
    public string GetCameraSettingsVersionDescription();
    public string GetPreviewImageValidDescription();
    public string GetExposureModeDescription();
    public string GetAeLockDescription();
    public string GetMeteringModeDescription();
    public string GetExposureShiftDescription();
    public string GetNdFilterDescription();
    public string GetMacroModeDescription();
    public string GetFocusModeDescription();
    public string GetFocusProcessDescription();
    public string GetAfSearchDescription();
    public string GetAfAreasDescription();
    public string GetAfPointSelectedDescription();
    public string GetAfFineTuneDescription();
    public string GetFlashModeDescription();
    public string GetFlashRemoteControlDescription();
    public string GetFlashControlModeDescription();
    public string GetFlashIntensityDescription();
    public string GetManualFlashStrengthDescription();
    public string GetWhiteBalance2Description();
    public string GetWhiteBalanceTemperatureDescription();
    public string GetCustomSaturationDescription();
    public string GetModifiedSaturationDescription();
    public string GetContrastSettingDescription();
    public string GetSharpnessSettingDescription();
    public string GetColorSpaceDescription();
    public string GetSceneModeDescription();
    public string GetNoiseReductionDescription();
    public string GetDistortionCorrectionDescription();
    public string GetShadingCompensationDescription();
    public string GetGradationDescription();
    public string GetPictureModeDescription();
    public string GetPictureModeSaturationDescription();
    public string GetPictureModeContrastDescription();
    public string GetPictureModeSharpnessDescription();
    public string GetPictureModeBWFilterDescription();
    public string GetPictureModeToneDescription();
    public string GetNoiseFilterDescription();
    public string GetArtFilterDescription();
    public string GetMagicFilterDescription();
    public string GetPictureModeEffectDescription();
    public string GetToneLevelDescription();
    public string GetArtFilterEffectDescription();
    public string GetColorCreatorEffectDescription();
    public string GetDriveModeDescription();
    public string GetPanoramaModeDescription();
    public string GetImageQuality2Description();
    public string GetImageStabilizationDescription();
    public string GetStackedImageDescription();
    public string GetManometerPressureDescription();
    public string GetManometerReadingDescription();
    public string GetExtendedWBDetectDescription();
    public string GetRollAngleDescription();
    public string GetPitchAngleDescription();
    public string GetDateTimeUtcDescription();
    private string GetValueMinMaxDescription(int tagId);
    private string GetFilterDescription(int tagId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.OlympusCameraSettingsMakernoteDirectory : Directory {
    public static int TagCameraSettingsVersion;
    public static int TagPreviewImageValid;
    public static int TagPreviewImageStart;
    public static int TagPreviewImageLength;
    public static int TagExposureMode;
    public static int TagAeLock;
    public static int TagMeteringMode;
    public static int TagExposureShift;
    public static int TagNdFilter;
    public static int TagMacroMode;
    public static int TagFocusMode;
    public static int TagFocusProcess;
    public static int TagAfSearch;
    public static int TagAfAreas;
    public static int TagAfPointSelected;
    public static int TagAfFineTune;
    public static int TagAfFineTuneAdj;
    public static int TagFlashMode;
    public static int TagFlashExposureComp;
    public static int TagFlashRemoteControl;
    public static int TagFlashControlMode;
    public static int TagFlashIntensity;
    public static int TagManualFlashStrength;
    public static int TagWhiteBalance2;
    public static int TagWhiteBalanceTemperature;
    public static int TagWhiteBalanceBracket;
    public static int TagCustomSaturation;
    public static int TagModifiedSaturation;
    public static int TagContrastSetting;
    public static int TagSharpnessSetting;
    public static int TagColorSpace;
    public static int TagSceneMode;
    public static int TagNoiseReduction;
    public static int TagDistortionCorrection;
    public static int TagShadingCompensation;
    public static int TagCompressionFactor;
    public static int TagGradation;
    public static int TagPictureMode;
    public static int TagPictureModeSaturation;
    public static int TagPictureModeHue;
    public static int TagPictureModeContrast;
    public static int TagPictureModeSharpness;
    public static int TagPictureModeBWFilter;
    public static int TagPictureModeTone;
    public static int TagNoiseFilter;
    public static int TagArtFilter;
    public static int TagMagicFilter;
    public static int TagPictureModeEffect;
    public static int TagToneLevel;
    public static int TagArtFilterEffect;
    public static int TagColorCreatorEffect;
    public static int TagDriveMode;
    public static int TagPanoramaMode;
    public static int TagImageQuality2;
    public static int TagImageStabilization;
    public static int TagStackedImage;
    public static int TagManometerPressure;
    public static int TagManometerReading;
    public static int TagExtendedWBDetect;
    public static int TagRollAngle;
    public static int TagPitchAngle;
    public static int TagDateTimeUtc;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static OlympusCameraSettingsMakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.OlympusEquipmentMakernoteDescriptor : TagDescriptor`1<OlympusEquipmentMakernoteDirectory> {
    [NullableAttribute("1")]
private static Dictionary`2<string, string> _olympusLensTypes;
    [NullableAttribute("1")]
private static Dictionary`2<string, string> _olympusExtenderTypes;
    [NullableContextAttribute("1")]
public OlympusEquipmentMakernoteDescriptor(OlympusEquipmentMakernoteDirectory directory);
    private static OlympusEquipmentMakernoteDescriptor();
    public virtual string GetDescription(int tagType);
    public string GetEquipmentVersionDescription();
    public string GetCameraType2Description();
    public string GetFocalPlaneDiagonalDescription();
    public string GetBodyFirmwareVersionDescription();
    public string GetLensTypeDescription();
    public string GetLensFirmwareVersionDescription();
    public string GetMaxApertureAtMinFocalDescription();
    public string GetMaxApertureAtMaxFocalDescription();
    public string GetMaxApertureDescription();
    private static double CalcMaxAperture(ushort value);
    public string GetLensPropertiesDescription();
    public string GetExtenderDescription();
    public string GetFlashTypeDescription();
    public string GetFlashModelDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.OlympusEquipmentMakernoteDirectory : Directory {
    public static int TagEquipmentVersion;
    public static int TagCameraType2;
    public static int TagSerialNumber;
    public static int TagInternalSerialNumber;
    public static int TagFocalPlaneDiagonal;
    public static int TagBodyFirmwareVersion;
    public static int TagLensType;
    public static int TagLensSerialNumber;
    public static int TagLensModel;
    public static int TagLensFirmwareVersion;
    public static int TagMaxApertureAtMinFocal;
    public static int TagMaxApertureAtMaxFocal;
    public static int TagMinFocalLength;
    public static int TagMaxFocalLength;
    public static int TagMaxAperture;
    public static int TagLensProperties;
    public static int TagExtender;
    public static int TagExtenderSerialNumber;
    public static int TagExtenderModel;
    public static int TagExtenderFirmwareVersion;
    public static int TagConversionLens;
    public static int TagFlashType;
    public static int TagFlashModel;
    public static int TagFlashFirmwareVersion;
    public static int TagFlashSerialNumber;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static OlympusEquipmentMakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.OlympusFocusInfoMakernoteDescriptor : TagDescriptor`1<OlympusFocusInfoMakernoteDirectory> {
    [NullableContextAttribute("1")]
public OlympusFocusInfoMakernoteDescriptor(OlympusFocusInfoMakernoteDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetFocusInfoVersionDescription();
    public string GetAutoFocusDescription();
    public string GetFocusDistanceDescription();
    public string GetAfPointDescription();
    public string GetExternalFlashDescription();
    public string GetExternalFlashBounceDescription();
    public string GetExternalFlashZoomDescription();
    public string GetManualFlashDescription();
    public string GetMacroLedDescription();
    public string GetSensorTemperatureDescription();
    public string GetImageStabilizationDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.OlympusFocusInfoMakernoteDirectory : Directory {
    public static int TagFocusInfoVersion;
    public static int TagAutoFocus;
    public static int TagSceneDetect;
    public static int TagSceneArea;
    public static int TagSceneDetectData;
    public static int TagZoomStepCount;
    public static int TagFocusStepCount;
    public static int TagFocusStepInfinity;
    public static int TagFocusStepNear;
    public static int TagFocusDistance;
    public static int TagAfPoint;
    public static int TagAfInfo;
    public static int TagExternalFlash;
    public static int TagExternalFlashGuideNumber;
    public static int TagExternalFlashBounce;
    public static int TagExternalFlashZoom;
    public static int TagInternalFlash;
    public static int TagManualFlash;
    public static int TagMacroLed;
    public static int TagSensorTemperature;
    public static int TagImageStabilization;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static OlympusFocusInfoMakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.OlympusImageProcessingMakernoteDescriptor : TagDescriptor`1<OlympusImageProcessingMakernoteDirectory> {
    [NullableContextAttribute("1")]
public OlympusImageProcessingMakernoteDescriptor(OlympusImageProcessingMakernoteDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetImageProcessingVersionDescription();
    public string GetColorMatrixDescription();
    public string GetNoiseReduction2Description();
    public string GetDistortionCorrection2Description();
    public string GetShadingCompensation2Description();
    public string GetMultipleExposureModeDescription();
    public string GetAspectRatioDescription();
    public string GetKeystoneCompensationDescription();
    public string GetKeystoneDirectionDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.OlympusImageProcessingMakernoteDirectory : Directory {
    public static int TagImageProcessingVersion;
    public static int TagWbRbLevels;
    public static int TagWbRbLevels3000K;
    public static int TagWbRbLevels3300K;
    public static int TagWbRbLevels3600K;
    public static int TagWbRbLevels3900K;
    public static int TagWbRbLevels4000K;
    public static int TagWbRbLevels4300K;
    public static int TagWbRbLevels4500K;
    public static int TagWbRbLevels4800K;
    public static int TagWbRbLevels5300K;
    public static int TagWbRbLevels6000K;
    public static int TagWbRbLevels6600K;
    public static int TagWbRbLevels7500K;
    public static int TagWbRbLevelsCwB1;
    public static int TagWbRbLevelsCwB2;
    public static int TagWbRbLevelsCwB3;
    public static int TagWbRbLevelsCwB4;
    public static int TagWbGLevel3000K;
    public static int TagWbGLevel3300K;
    public static int TagWbGLevel3600K;
    public static int TagWbGLevel3900K;
    public static int TagWbGLevel4000K;
    public static int TagWbGLevel4300K;
    public static int TagWbGLevel4500K;
    public static int TagWbGLevel4800K;
    public static int TagWbGLevel5300K;
    public static int TagWbGLevel6000K;
    public static int TagWbGLevel6600K;
    public static int TagWbGLevel7500K;
    public static int TagWbGLevel;
    public static int TagColorMatrix;
    public static int TagEnhancer;
    public static int TagEnhancerValues;
    public static int TagCoringFilter;
    public static int TagCoringValues;
    public static int TagBlackLevel2;
    public static int TagGainBase;
    public static int TagValidBits;
    public static int TagCropLeft;
    public static int TagCropTop;
    public static int TagCropWidth;
    public static int TagCropHeight;
    public static int TagUnknownBlock1;
    public static int TagUnknownBlock2;
    public static int TagSensorCalibration;
    public static int TagNoiseReduction2;
    public static int TagDistortionCorrection2;
    public static int TagShadingCompensation2;
    public static int TagMultipleExposureMode;
    public static int TagUnknownBlock3;
    public static int TagUnknownBlock4;
    public static int TagAspectRatio;
    public static int TagAspectFrame;
    public static int TagFacesDetected;
    public static int TagFaceDetectArea;
    public static int TagMaxFaces;
    public static int TagFaceDetectFrameSize;
    public static int TagFaceDetectFrameCrop;
    public static int TagCameraTemperature;
    public static int TagKeystoneCompensation;
    public static int TagKeystoneDirection;
    public static int TagKeystoneValue;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static OlympusImageProcessingMakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.OlympusMakernoteDescriptor : TagDescriptor`1<OlympusMakernoteDirectory> {
    [NullableContextAttribute("1")]
public OlympusMakernoteDescriptor(OlympusMakernoteDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetExposureModeDescription();
    public string GetFlashModeCameraSettingDescription();
    public string GetWhiteBalanceDescription();
    public string GetImageSizeDescription();
    public string GetImageQualityDescription();
    public string GetShootingModeDescription();
    public string GetMeteringModeDescription();
    public string GetApexFilmSpeedDescription();
    public string GetApexShutterSpeedTimeDescription();
    public string GetApexApertureDescription();
    public string GetMacroModeCameraSettingDescription();
    public string GetDigitalZoomCameraSettingDescription();
    public string GetExposureCompensationDescription();
    public string GetBracketStepDescription();
    public string GetIntervalLengthDescription();
    public string GetIntervalNumberDescription();
    public string GetFocalLengthDescription();
    public string GetFocusDistanceDescription();
    public string GetFlashFiredDescription();
    public string GetDateDescription();
    public string GetTimeDescription();
    public string GetMaxApertureAtFocalLengthDescription();
    public string GetFileNumberMemoryDescription();
    public string GetLastFileNumberDescription();
    public string GetWhiteBalanceRedDescription();
    public string GetWhiteBalanceGreenDescription();
    public string GetWhiteBalanceBlueDescription();
    public string GetSaturationDescription();
    public string GetContrastCameraSettingDescription();
    public string GetSharpnessCameraSettingDescription();
    public string GetSubjectProgramDescription();
    public string GetFlashCompensationDescription();
    public string GetIsoSettingDescription();
    public string GetCameraModelDescription();
    public string GetIntervalModeDescription();
    public string GetFolderNameDescription();
    public string GetColorModeCameraSettingDescription();
    public string GetColorFilterDescription();
    public string GetBlackAndWhiteFilterDescription();
    public string GetInternalFlashDescription();
    public string GetApexBrightnessDescription();
    public string GetSpotFocusPointXCoordinateDescription();
    public string GetSpotFocusPointYCoordinateDescription();
    public string GetWideFocusZoneDescription();
    public string GetFocusModeCameraSettingDescription();
    public string GetFocusAreaDescription();
    public string GetDecSwitchPositionDescription();
    public string GetMakernoteVersionDescription();
    public string GetImageQuality2Description();
    public string GetImageQuality1Description();
    public string GetColorModeDescription();
    public string GetSharpnessDescription();
    public string GetColorMatrixDescription();
    public string GetWbModeDescription();
    public string GetRedBalanceDescription();
    public string GetBlueBalanceDescription();
    public string GetContrastDescription();
    public string GetPreviewImageValidDescription();
    public string GetFocusModeDescription();
    public string GetFocusRangeDescription();
    public string GetFlashModeDescription();
    public string GetDigitalZoomDescription();
    public string GetFocalPlaneDiagonalDescription();
    public string GetCameraTypeDescription();
    public string GetCameraIdDescription();
    public string GetOneTouchWbDescription();
    public string GetShutterSpeedDescription();
    public string GetIsoValueDescription();
    public string GetApertureValueDescription();
    public string GetMacroModeDescription();
    public string GetBwModeDescription();
    public string GetJpegQualityDescription();
    public string GetSpecialModeDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.OlympusMakernoteDirectory : Directory {
    public static int TagMakernoteVersion;
    public static int TagCameraSettings1;
    public static int TagCameraSettings2;
    public static int TagCompressedImageSize;
    public static int TagMinoltaThumbnailOffset1;
    public static int TagMinoltaThumbnailOffset2;
    public static int TagMinoltaThumbnailLength;
    public static int TagThumbnailImage;
    public static int TagColourMode;
    public static int TagImageQuality1;
    public static int TagImageQuality2;
    public static int TagBodyFirmwareVersion;
    public static int TagSpecialMode;
    public static int TagJpegQuality;
    public static int TagMacroMode;
    public static int TagBwMode;
    public static int TagDigitalZoom;
    public static int TagFocalPlaneDiagonal;
    public static int TagLensDistortionParameters;
    public static int TagCameraType;
    public static int TagPictInfo;
    public static int TagCameraId;
    public static int TagImageWidth;
    public static int TagImageHeight;
    public static int TagOriginalManufacturerModel;
    public static int TagPreviewImage;
    public static int TagPreCaptureFrames;
    public static int TagWhiteBoard;
    public static int TagOneTouchWb;
    public static int TagWhiteBalanceBracket;
    public static int TagWhiteBalanceBias;
    public static int TagSceneMode;
    public static int TagSerialNumber1;
    public static int TagFirmware;
    public static int TagPrintImageMatchingInfo;
    public static int TagDataDump1;
    public static int TagDataDump2;
    public static int TagShutterSpeedValue;
    public static int TagIsoValue;
    public static int TagApertureValue;
    public static int TagBrightnessValue;
    public static int TagFlashMode;
    public static int TagFlashDevice;
    public static int TagBracket;
    public static int TagSensorTemperature;
    public static int TagLensTemperature;
    public static int TagLightCondition;
    public static int TagFocusRange;
    public static int TagFocusMode;
    public static int TagFocusDistance;
    public static int TagZoom;
    public static int TagMacroFocus;
    public static int TagSharpness;
    public static int TagFlashChargeLevel;
    public static int TagColourMatrix;
    public static int TagBlackLevel;
    public static int TagColorTemperatureBG;
    public static int TagColorTemperatureRG;
    public static int TagWbMode;
    public static int TagRedBalance;
    public static int TagBlueBalance;
    public static int TagColorMatrixNumber;
    public static int TagSerialNumber2;
    public static int TagExternalFlashAE1_0;
    public static int TagExternalFlashAE2_0;
    public static int TagInternalFlashAE1_0;
    public static int TagInternalFlashAE2_0;
    public static int TagExternalFlashAE1;
    public static int TagExternalFlashAE2;
    public static int TagInternalFlashAE1;
    public static int TagInternalFlashAE2;
    public static int TagFlashBias;
    public static int TagInternalFlashTable;
    public static int TagExternalFlashGValue;
    public static int TagExternalFlashBounce;
    public static int TagExternalFlashZoom;
    public static int TagExternalFlashMode;
    public static int TagContrast;
    public static int TagSharpnessFactor;
    public static int TagColourControl;
    public static int TagValidBits;
    public static int TagCoringFilter;
    public static int TagOlympusImageWidth;
    public static int TagOlympusImageHeight;
    public static int TagSceneDetect;
    public static int TagSceneArea;
    public static int TagSceneDetectData;
    public static int TagCompressionRatio;
    public static int TagPreviewImageValid;
    public static int TagPreviewImageStart;
    public static int TagPreviewImageLength;
    public static int TagAfResult;
    public static int TagCcdScanMode;
    public static int TagNoiseReduction;
    public static int TagInfinityLensStep;
    public static int TagNearLensStep;
    public static int TagLightValueCenter;
    public static int TagLightValuePeriphery;
    public static int TagFieldCount;
    public static int TagEquipment;
    public static int TagCameraSettings;
    public static int TagRawDevelopment;
    public static int TagRawDevelopment2;
    public static int TagImageProcessing;
    public static int TagFocusInfo;
    public static int TagRawInfo;
    public static int TagMainInfo;
    private static Dictionary`2<int, string> _tagNameMap;
    public static Dictionary`2<string, string> OlympusCameraTypes;
    public string Name { get; }
    private static OlympusMakernoteDirectory();
    public virtual string get_Name();
    public virtual void Set(int tagType, object value);
    [NullableContextAttribute("0")]
private void ProcessCameraSettings(ReadOnlySpan`1<byte> bytes);
    public bool IsIntervalMode();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.OlympusRawDevelopment2MakernoteDescriptor : TagDescriptor`1<OlympusRawDevelopment2MakernoteDirectory> {
    [NullableAttribute("1")]
private static Dictionary`2<int, string> _filters;
    [NullableContextAttribute("1")]
public OlympusRawDevelopment2MakernoteDescriptor(OlympusRawDevelopment2MakernoteDirectory directory);
    private static OlympusRawDevelopment2MakernoteDescriptor();
    public virtual string GetDescription(int tagType);
    public string GetRawDevVersionDescription();
    public string GetRawDevExposureBiasValueDescription();
    public string GetRawDevColorSpaceDescription();
    public string GetRawDevNoiseReductionDescription();
    public string GetRawDevEngineDescription();
    public string GetRawDevPictureModeDescription();
    public string GetRawDevPmBwFilterDescription();
    public string GetRawDevPmPictureToneDescription();
    public string GetRawDevArtFilterDescription();
    private string GetFilterDescription(int tagId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.OlympusRawDevelopment2MakernoteDirectory : Directory {
    public static int TagRawDevVersion;
    public static int TagRawDevExposureBiasValue;
    public static int TagRawDevWhiteBalance;
    public static int TagRawDevWhiteBalanceValue;
    public static int TagRawDevWbFineAdjustment;
    public static int TagRawDevGrayPoint;
    public static int TagRawDevContrastValue;
    public static int TagRawDevSharpnessValue;
    public static int TagRawDevSaturationEmphasis;
    public static int TagRawDevMemoryColorEmphasis;
    public static int TagRawDevColorSpace;
    public static int TagRawDevNoiseReduction;
    public static int TagRawDevEngine;
    public static int TagRawDevPictureMode;
    public static int TagRawDevPmSaturation;
    public static int TagRawDevPmContrast;
    public static int TagRawDevPmSharpness;
    public static int TagRawDevPmBwFilter;
    public static int TagRawDevPmPictureTone;
    public static int TagRawDevGradation;
    public static int TagRawDevSaturation3;
    public static int TagRawDevAutoGradation;
    public static int TagRawDevPmNoiseFilter;
    public static int TagRawDevArtFilter;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static OlympusRawDevelopment2MakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.OlympusRawDevelopmentMakernoteDescriptor : TagDescriptor`1<OlympusRawDevelopmentMakernoteDirectory> {
    [NullableContextAttribute("1")]
public OlympusRawDevelopmentMakernoteDescriptor(OlympusRawDevelopmentMakernoteDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetRawDevVersionDescription();
    public string GetRawDevColorSpaceDescription();
    public string GetRawDevEngineDescription();
    public string GetRawDevNoiseReductionDescription();
    public string GetRawDevEditStatusDescription();
    public string GetRawDevSettingsDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.OlympusRawDevelopmentMakernoteDirectory : Directory {
    public static int TagRawDevVersion;
    public static int TagRawDevExposureBiasValue;
    public static int TagRawDevWhiteBalanceValue;
    public static int TagRawDevWbFineAdjustment;
    public static int TagRawDevGrayPoint;
    public static int TagRawDevSaturationEmphasis;
    public static int TagRawDevMemoryColorEmphasis;
    public static int TagRawDevContrastValue;
    public static int TagRawDevSharpnessValue;
    public static int TagRawDevColorSpace;
    public static int TagRawDevEngine;
    public static int TagRawDevNoiseReduction;
    public static int TagRawDevEditStatus;
    public static int TagRawDevSettings;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static OlympusRawDevelopmentMakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.OlympusRawInfoMakernoteDescriptor : TagDescriptor`1<OlympusRawInfoMakernoteDirectory> {
    [NullableContextAttribute("1")]
public OlympusRawInfoMakernoteDescriptor(OlympusRawInfoMakernoteDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetColorMatrix2Description();
    public string GetYCbCrCoefficientsDescription();
    public string GetOlympusLightSourceDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.OlympusRawInfoMakernoteDirectory : Directory {
    public static int TagRawInfoVersion;
    public static int TagWbRbLevelsUsed;
    public static int TagWbRbLevelsAuto;
    public static int TagWbRbLevelsShade;
    public static int TagWbRbLevelsCloudy;
    public static int TagWbRbLevelsFineWeather;
    public static int TagWbRbLevelsTungsten;
    public static int TagWbRbLevelsEveningSunlight;
    public static int TagWbRbLevelsDaylightFluor;
    public static int TagWbRbLevelsDayWhiteFluor;
    public static int TagWbRbLevelsCoolWhiteFluor;
    public static int TagWbRbLevelsWhiteFluorescent;
    public static int TagColorMatrix2;
    public static int TagCoringFilter;
    public static int TagCoringValues;
    public static int TagBlackLevel2;
    public static int TagYCbCrCoefficients;
    public static int TagValidPixelDepth;
    public static int TagCropLeft;
    public static int TagCropTop;
    public static int TagCropWidth;
    public static int TagCropHeight;
    public static int TagLightSource;
    public static int TagWhiteBalanceComp;
    public static int TagSaturationSetting;
    public static int TagHueSetting;
    public static int TagContrastSetting;
    public static int TagSharpnessSetting;
    public static int TagCmExposureCompensation;
    public static int TagCmWhiteBalance;
    public static int TagCmWhiteBalanceComp;
    public static int TagCmWhiteBalanceGrayPoint;
    public static int TagCmSaturation;
    public static int TagCmHue;
    public static int TagCmContrast;
    public static int TagCmSharpness;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static OlympusRawInfoMakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.PanasonicMakernoteDescriptor : TagDescriptor`1<PanasonicMakernoteDirectory> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static String[] _sceneModes;
    [NullableContextAttribute("1")]
public PanasonicMakernoteDescriptor(PanasonicMakernoteDirectory directory);
    private static PanasonicMakernoteDescriptor();
    public virtual string GetDescription(int tagType);
    public string GetTextStampDescription();
    public string GetTextStamp1Description();
    public string GetTextStamp2Description();
    public string GetTextStamp3Description();
    public string GetMacroModeDescription();
    public string GetFlashFiredDescription();
    public string GetImageStabilizationDescription();
    public string GetAudioDescription();
    public string GetTransformDescription();
    public string GetTransform1Description();
    private string GetTransformDescription(int tag);
    public string GetIntelligentExposureDescription();
    public string GetFlashWarningDescription();
    public string GetCountryDescription();
    public string GetStateDescription();
    public string GetCityDescription();
    public string GetLandmarkDescription();
    public string GetTitleDescription();
    public string GetBracketSettingsDescription();
    public string GetFlashCurtainDescription();
    public string GetLongExposureNoiseReductionDescription();
    public string GetLensFirmwareVersionDescription();
    public string GetIntelligentDRangeDescription();
    public string GetClearRetouchDescription();
    public string GetPhotoStyleDescription();
    public string GetShadingCompensationDescription();
    public string GetAccelerometerZDescription();
    public string GetAccelerometerXDescription();
    public string GetAccelerometerYDescription();
    public string GetCameraOrientationDescription();
    public string GetRollAngleDescription();
    public string GetPitchAngleDescription();
    public string GetSweepPanoramaDirectionDescription();
    public string GetTimerRecordingDescription();
    public string GetHdrDescription();
    public string GetShutterTypeDescription();
    public string GetTouchAeDescription();
    public string GetBabyNameDescription();
    public string GetLocationDescription();
    public string GetIntelligentResolutionDescription();
    public string GetContrastDescription();
    public string GetWorldTimeLocationDescription();
    public string GetAdvancedSceneModeDescription();
    public string GetUnknownDataDumpDescription();
    public string GetColorEffectDescription();
    public string GetUptimeDescription();
    public string GetBurstModeDescription();
    public string GetContrastModeDescription();
    public string GetNoiseReductionDescription();
    public string GetSelfTimerDescription();
    public string GetRotationDescription();
    public string GetAfAssistLampDescription();
    public string GetColorModeDescription();
    public string GetOpticalZoomModeDescription();
    public string GetConversionLensDescription();
    public string GetDetectedFacesDescription();
    public string GetRecognizedFacesDescription();
    private static string BuildFacesDescription(IEnumerable`1<Face> faces);
    public string GetRecordModeDescription();
    public string GetSceneModeDescription();
    public string GetFocusModeDescription();
    public string GetAfAreaModeDescription();
    public string GetQualityModeDescription();
    public string GetVersionDescription();
    public string GetMakernoteVersionDescription();
    public string GetExifVersionDescription();
    public string GetInternalSerialNumberDescription();
    public string GetWhiteBalanceDescription();
    public string GetBabyAgeDescription();
    public string GetBabyAge1Description();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.PanasonicMakernoteDirectory : Directory {
    public static int TagQualityMode;
    public static int TagFirmwareVersion;
    public static int TagWhiteBalance;
    public static int TagFocusMode;
    public static int TagAfAreaMode;
    public static int TagImageStabilization;
    public static int TagMacroMode;
    public static int TagRecordMode;
    public static int TagAudio;
    public static int TagUnknownDataDump;
    public static int TagEasyMode;
    public static int TagWhiteBalanceBias;
    public static int TagFlashBias;
    public static int TagInternalSerialNumber;
    public static int TagExifVersion;
    public static int TagColorEffect;
    public static int TagUptime;
    public static int TagBurstMode;
    public static int TagSequenceNumber;
    public static int TagContrastMode;
    public static int TagNoiseReduction;
    public static int TagSelfTimer;
    public static int TagRotation;
    public static int TagAfAssistLamp;
    public static int TagColorMode;
    public static int TagBabyAge;
    public static int TagOpticalZoomMode;
    public static int TagConversionLens;
    public static int TagTravelDay;
    public static int TagContrast;
    public static int TagWorldTimeLocation;
    public static int TagTextStamp;
    public static int TagProgramIso;
    public static int TagAdvancedSceneMode;
    public static int TagTextStamp1;
    public static int TagFacesDetected;
    public static int TagSaturation;
    public static int TagSharpness;
    public static int TagFilmMode;
    public static int TagColorTempKelvin;
    public static int TagBracketSettings;
    public static int TagWbAdjustAb;
    public static int TagWbAdjustGm;
    public static int TagFlashCurtain;
    public static int TagLongExposureNoiseReduction;
    public static int TagPanasonicImageWidth;
    public static int TagPanasonicImageHeight;
    public static int TagAfPointPosition;
    public static int TagFaceDetectionInfo;
    public static int TagLensType;
    public static int TagLensSerialNumber;
    public static int TagAccessoryType;
    public static int TagAccessorySerialNumber;
    public static int TagTransform;
    public static int TagIntelligentExposure;
    public static int TagLensFirmwareVersion;
    public static int TagBurstSpeed;
    public static int TagIntelligentDRange;
    public static int TagClearRetouch;
    public static int TagCity2;
    public static int TagPhotoStyle;
    public static int TagShadingCompensation;
    public static int TagAccelerometerZ;
    public static int TagAccelerometerX;
    public static int TagAccelerometerY;
    public static int TagCameraOrientation;
    public static int TagRollAngle;
    public static int TagPitchAngle;
    public static int TagSweepPanoramaDirection;
    public static int TagSweepPanoramaFieldOfView;
    public static int TagTimerRecording;
    public static int TagInternalNDFilter;
    public static int TagHdr;
    public static int TagShutterType;
    public static int TagClearRetouchValue;
    public static int TagTouchAe;
    public static int TagPrintImageMatchingInfo;
    public static int TagFaceRecognitionInfo;
    public static int TagFlashWarning;
    public static int TagRecognizedFaceFlags;
    public static int TagTitle;
    public static int TagBabyName;
    public static int TagLocation;
    public static int TagCountry;
    public static int TagState;
    public static int TagCity;
    public static int TagLandmark;
    public static int TagIntelligentResolution;
    public static int TagMakernoteVersion;
    public static int TagSceneMode;
    public static int TagWbRedLevel;
    public static int TagWbGreenLevel;
    public static int TagWbBlueLevel;
    public static int TagFlashFired;
    public static int TagTextStamp2;
    public static int TagTextStamp3;
    public static int TagBabyAge1;
    public static int TagTransform1;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static PanasonicMakernoteDirectory();
    public virtual string get_Name();
    public IEnumerable`1<Face> GetDetectedFaces();
    public IEnumerable`1<Face> GetRecognizedFaces();
    [IteratorStateMachineAttribute("MetadataExtractor.Formats.Exif.Makernotes.PanasonicMakernoteDirectory/<ParseFaces>d__104")]
private static IEnumerable`1<Face> ParseFaces(Byte[] bytes, int firstRecordOffset, int posOffset, int recordLength);
    [NullableContextAttribute("2")]
public Age GetAge(int tag);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.PentaxMakernoteDescriptor : TagDescriptor`1<PentaxMakernoteDirectory> {
    [NullableContextAttribute("1")]
public PentaxMakernoteDescriptor(PentaxMakernoteDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetColourDescription();
    public string GetIsoSpeedDescription();
    public string GetSaturationDescription();
    public string GetContrastDescription();
    public string GetSharpnessDescription();
    public string GetDigitalZoomDescription();
    public string GetWhiteBalanceDescription();
    public string GetFlashModeDescription();
    public string GetFocusModeDescription();
    public string GetQualityLevelDescription();
    public string GetCaptureModeDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.PentaxMakernoteDirectory : Directory {
    public static int TagCaptureMode;
    public static int TagQualityLevel;
    public static int TagFocusMode;
    public static int TagFlashMode;
    public static int TagWhiteBalance;
    public static int TagDigitalZoom;
    public static int TagSharpness;
    public static int TagContrast;
    public static int TagSaturation;
    public static int TagIsoSpeed;
    public static int TagColour;
    public static int TagPrintImageMatchingInfo;
    public static int TagTimeZone;
    public static int TagDaylightSavings;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static PentaxMakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.PentaxType2MakernoteDescriptor : TagDescriptor`1<PentaxType2MakernoteDirectory> {
    public PentaxType2MakernoteDescriptor(PentaxType2MakernoteDirectory directory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.PentaxType2MakernoteDirectory : Directory {
    public static int TagPentaxVersion;
    public static int TagPentaxModelType;
    public static int TagPreviewImageSize;
    public static int TagPreviewImageLength;
    public static int TagPreviewImageStart;
    public static int TagPentaxModelId;
    public static int TagDate;
    public static int TagTime;
    public static int TagQuality;
    public static int TagPentaxImageSize;
    public static int TagPictureMode;
    public static int TagFlashMode;
    public static int TagFocusMode;
    public static int TagAFPointSelected;
    public static int TagAFPointsInFocus;
    public static int TagFocusPosition;
    public static int TagExposureTime;
    public static int TagFNumber;
    public static int TagIso;
    public static int TagLightReading;
    public static int TagExposureCompensation;
    public static int TagMeteringMode;
    public static int TagAutoBracketing;
    public static int TagWhiteBalance;
    public static int TagWhiteBalanceMode;
    public static int TagBlueBalance;
    public static int TagRedBalance;
    public static int TagFocalLength;
    public static int TagDigitalZoom;
    public static int TagSaturation;
    public static int TagContrast;
    public static int TagSharpness;
    public static int TagWorldTimeLocation;
    public static int TagHometownCity;
    public static int TagDestinationCity;
    public static int TagHometownDST;
    public static int TagDestinationDST;
    public static int TagDSPFirmwareVersion;
    public static int TagCPUFirmwareVersion;
    public static int TagFrameNumber;
    public static int TagEffectiveLV;
    public static int TagImageEditing;
    public static int TagPictureMode2;
    public static int TagDriveMode;
    public static int TagSensorSize;
    public static int TagColorSpace;
    public static int TagImageAreaOffset;
    public static int TagRawImageSize;
    public static int TagAFPointsInFocus2;
    public static int TagDataScaling;
    public static int TagPreviewImageBorders;
    public static int TagLensRec;
    public static int TagSensitivityAdjust;
    public static int TagImageEditCount;
    public static int TagCameraTemperature;
    public static int TagAELock;
    public static int TagNoiseReduction;
    public static int TagFlashExposureComp;
    public static int TagImageTone;
    public static int TagColorTemperature;
    public static int TagColorTempDaylight;
    public static int TagColorTempShade;
    public static int TagColorTempCloudy;
    public static int TagColorTempTungsten;
    public static int TagColorTempFluorescentD;
    public static int TagColorTempFluorescentN;
    public static int TagColorTempFluorescentW;
    public static int TagColorTempFlash;
    public static int TagShakeReductionInfo;
    public static int TagShutterCount;
    public static int TagFaceInfo;
    public static int TagRawDevelopmentProcess;
    public static int TagHue;
    public static int TagAWBInfo;
    public static int TagDynamicRangeExpansion;
    public static int TagTimeInfo;
    public static int TagHighLowKeyAdj;
    public static int TagContrastHighlight;
    public static int TagContrastShadow;
    public static int TagContrastHighlightShadowAdj;
    public static int TagFineSharpness;
    public static int TagHighISONoiseReduction;
    public static int TagAFAdjustment;
    public static int TagMonochromeFilterEffect;
    public static int TagMonochromeToning;
    public static int TagFaceDetect;
    public static int TagFaceDetectFrameSize;
    public static int TagShadowCorrection;
    public static int TagISOAutoParameters;
    public static int TagCrossProcess;
    public static int TagLensCorr;
    public static int TagWhiteLevel;
    public static int TagBleachBypassToning;
    public static int TagAspectRatio;
    public static int TagBlurControl;
    public static int TagHDR;
    public static int TagShutterType;
    public static int TagNeutralDensityFilter;
    public static int TagISO;
    public static int TagIntervalShooting;
    public static int TagSkinToneCorrection;
    public static int TagClarityControl;
    public static int TagBlackPoint;
    public static int TagWhitePoint;
    public static int TagColorMatrixA;
    public static int TagColorMatrixB;
    public static int TagCameraSettings;
    public static int TagAEInfo;
    public static int TagLensInfo;
    public static int TagFlashInfo;
    public static int TagAEMeteringSegments;
    public static int TagFlashMeteringSegments;
    public static int TagSlaveFlashMeteringSegments;
    public static int TagWB_RGGBLevelsDaylight;
    public static int TagWB_RGGBLevelsShade;
    public static int TagWB_RGGBLevelsCloudy;
    public static int TagWB_RGGBLevelsTungsten;
    public static int TagWB_RGGBLevelsFluorescentD;
    public static int TagWB_RGGBLevelsFluorescentN;
    public static int TagWB_RGGBLevelsFluorescentW;
    public static int TagWB_RGGBLevelsFlash;
    public static int TagCameraInfo;
    public static int TagBatteryInfo;
    public static int TagSaturationInfo;
    public static int TagColorMatrixA2;
    public static int TagColorMatrixB2;
    public static int TagAFInfo;
    public static int TagHuffmanTable;
    public static int TagKelvinWB;
    public static int TagColorInfo;
    public static int TagEVStepInfo;
    public static int TagShotInfo;
    public static int TagFacePos;
    public static int TagFaceSize;
    public static int TagSerialNumber;
    public static int TagFilterInfo;
    public static int TagLevelInfo;
    public static int TagWBLevels;
    public static int TagArtist;
    public static int TagCopyright;
    public static int TagFirmwareVersion;
    public static int TagContrastDetectAFArea;
    public static int TagCrossProcessParams;
    public static int TagLensInfoQ;
    public static int TagModel;
    public static int TagPixelShiftInfo;
    public static int TagAFPointInfo;
    public static int TagDataDump;
    public static int TagTempInfo;
    public static int TagToneCurve;
    public static int TagToneCurves;
    public static int TagUnknownBlock;
    public static int TagPrintIM;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static PentaxType2MakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.ReconyxHyperFire2MakernoteDescriptor : TagDescriptor`1<ReconyxHyperFire2MakernoteDirectory> {
    public ReconyxHyperFire2MakernoteDescriptor(ReconyxHyperFire2MakernoteDirectory directory);
    [NullableContextAttribute("2")]
public virtual string GetDescription(int tagType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.ReconyxHyperFire2MakernoteDirectory : Directory {
    public static int TagFileNumber;
    public static int TagDirectoryNumber;
    public static int TagFirmwareVersion;
    public static int TagFirmwareDate;
    public static int TagTriggerMode;
    public static int TagSequence;
    public static int TagEventNumber;
    public static int TagDateTimeOriginal;
    public static int TagDayOfWeek;
    public static int TagMoonPhase;
    public static int TagAmbientTemperatureFahrenheit;
    public static int TagAmbientTemperatureCelcius;
    public static int TagContrast;
    public static int TagBrightness;
    public static int TagSharpness;
    public static int TagSaturation;
    public static int TagFlash;
    public static int TagAmbientInfrared;
    public static int TagAmbientLight;
    public static int TagMotionSensitivity;
    public static int TagBatteryVoltage;
    public static int TagBatteryVoltageAvg;
    public static int TagBatteryType;
    public static int TagUserLabel;
    public static int TagSerialNumber;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static ReconyxHyperFire2MakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.ReconyxHyperFireMakernoteDescriptor : TagDescriptor`1<ReconyxHyperFireMakernoteDirectory> {
    public ReconyxHyperFireMakernoteDescriptor(ReconyxHyperFireMakernoteDirectory directory);
    [NullableContextAttribute("2")]
public virtual string GetDescription(int tagType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.ReconyxHyperFireMakernoteDirectory : Directory {
    public static ushort MakernoteVersion;
    public static int TagMakernoteVersion;
    public static int TagFirmwareVersion;
    public static int TagTriggerMode;
    public static int TagSequence;
    public static int TagEventNumber;
    public static int TagDateTimeOriginal;
    public static int TagMoonPhase;
    public static int TagAmbientTemperatureFahrenheit;
    public static int TagAmbientTemperature;
    public static int TagSerialNumber;
    public static int TagContrast;
    public static int TagBrightness;
    public static int TagSharpness;
    public static int TagSaturation;
    public static int TagInfraredIlluminator;
    public static int TagMotionSensitivity;
    public static int TagBatteryVoltage;
    public static int TagUserLabel;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static ReconyxHyperFireMakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.ReconyxUltraFireMakernoteDescriptor : TagDescriptor`1<ReconyxUltraFireMakernoteDirectory> {
    public ReconyxUltraFireMakernoteDescriptor(ReconyxUltraFireMakernoteDirectory directory);
    [NullableContextAttribute("2")]
public virtual string GetDescription(int tagType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.ReconyxUltraFireMakernoteDirectory : Directory {
    public static UInt32 MakernoteId;
    public static UInt32 MakernotePublicId;
    public static int TagLabel;
    public static int TagMakernoteId;
    public static int TagMakernoteSize;
    public static int TagMakernotePublicId;
    public static int TagMakernotePublicSize;
    public static int TagCameraVersion;
    public static int TagUibVersion;
    public static int TagBtlVersion;
    public static int TagPexVersion;
    public static int TagEventType;
    public static int TagSequence;
    public static int TagEventNumber;
    public static int TagDateTimeOriginal;
    public static int TagDayOfWeek;
    public static int TagMoonPhase;
    public static int TagAmbientTemperatureFahrenheit;
    public static int TagAmbientTemperature;
    public static int TagFlash;
    public static int TagBatteryVoltage;
    public static int TagSerialNumber;
    public static int TagUserLabel;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static ReconyxUltraFireMakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.RicohMakernoteDescriptor : TagDescriptor`1<RicohMakernoteDirectory> {
    public RicohMakernoteDescriptor(RicohMakernoteDirectory directory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.RicohMakernoteDirectory : Directory {
    public static int TagMakernoteDataType;
    public static int TagVersion;
    public static int TagPrintImageMatchingInfo;
    public static int TagRicohCameraInfoMakernoteSubIfdPointer;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static RicohMakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.SamsungType2MakernoteDescriptor : TagDescriptor`1<SamsungType2MakernoteDirectory> {
    [NullableContextAttribute("1")]
public SamsungType2MakernoteDescriptor(SamsungType2MakernoteDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetMakernoteVersionDescription();
    public string GetDeviceTypeDescription();
    public string GetSamsungModelIdDescription();
    public string GetRawDataByteOrderDescription();
    public string GetWhiteBalanceSetupDescription();
    public string GetCameraTemperatureDescription();
    public string GetRawDataCfaPatternDescription();
    public string GetFaceDetectDescription();
    public string GetFaceRecognitionDescription();
    public string GetLensTypeDescription();
    public string GetColorSpaceDescription();
    public string GetSmartRangeDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.SamsungType2MakernoteDirectory : Directory {
    public static int TagMakerNoteVersion;
    public static int TagDeviceType;
    public static int TagSamsungModelId;
    public static int TagOrientationInfo;
    public static int TagSmartAlbumColor;
    public static int TagPictureWizard;
    public static int TagLocalLocationName;
    public static int TagPreviewIfd;
    public static int TagRawDataByteOrder;
    public static int TagWhiteBalanceSetup;
    public static int TagCameraTemperature;
    public static int TagRawDataCfaPattern;
    public static int TagFaceDetect;
    public static int TagFaceRecognition;
    public static int TagFaceName;
    public static int TagFirmwareName;
    public static int TagSerialNumber;
    public static int TagLensType;
    public static int TagLensFirmware;
    public static int TagInternalLensSerialNumber;
    public static int TagSensorAreas;
    public static int TagColorSpace;
    public static int TagSmartRange;
    public static int TagExposureCompensation;
    public static int TagIso;
    public static int TagExposureTime;
    public static int TagFNumber;
    public static int TagFocalLengthIn35MMFormat;
    public static int TagEncryptionKey;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static SamsungType2MakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.SanyoMakernoteDescriptor : TagDescriptor`1<SanyoMakernoteDirectory> {
    [NullableContextAttribute("1")]
public SanyoMakernoteDescriptor(SanyoMakernoteDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetSanyoQualityDescription();
    private string GetMacroDescription();
    private string GetDigitalZoomDescription();
    private string GetSequentialShotDescription();
    private string GetWideRangeDescription();
    private string GetColorAdjustmentModeDescription();
    private string GetQuickShotDescription();
    private string GetSelfTimerDescription();
    private string GetVoiceMemoDescription();
    private string GetRecordShutterDescription();
    private string GetFlickerReduceDescription();
    private string GetOptimalZoomOnDescription();
    private string GetDigitalZoomOnDescription();
    private string GetLightSourceSpecialDescription();
    private string GetResavedDescription();
    private string GetSceneSelectDescription();
    private string GetSequenceShotIntervalDescription();
    private string GetFlashModeDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.SanyoMakernoteDirectory : Directory {
    public static int TagMakernoteOffset;
    public static int TagSanyoThumbnail;
    public static int TagSpecialMode;
    public static int TagSanyoQuality;
    public static int TagMacro;
    public static int TagDigitalZoom;
    public static int TagSoftwareVersion;
    public static int TagPictInfo;
    public static int TagCameraId;
    public static int TagSequentialShot;
    public static int TagWideRange;
    public static int TagColorAdjustmentMode;
    public static int TagQuickShot;
    public static int TagSelfTimer;
    public static int TagVoiceMemo;
    public static int TagRecordShutterRelease;
    public static int TagFlickerReduce;
    public static int TagOpticalZoomOn;
    public static int TagDigitalZoomOn;
    public static int TagLightSourceSpecial;
    public static int TagResaved;
    public static int TagSceneSelect;
    public static int TagManualFocusDistanceOrFaceInfo;
    public static int TagSequenceShotInterval;
    public static int TagFlashMode;
    public static int TagPrintImageMatchingInfo;
    public static int TagDataDump;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static SanyoMakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.SigmaMakernoteDescriptor : TagDescriptor`1<SigmaMakernoteDirectory> {
    [NullableContextAttribute("1")]
public SigmaMakernoteDescriptor(SigmaMakernoteDirectory directory);
    public virtual string GetDescription(int tagType);
    private string GetMeteringModeDescription();
    private string GetExposureModeDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.SigmaMakernoteDirectory : Directory {
    public static int TagSerialNumber;
    public static int TagDriveMode;
    public static int TagResolutionMode;
    public static int TagAutoFocusMode;
    public static int TagFocusSetting;
    public static int TagWhiteBalance;
    public static int TagExposureMode;
    public static int TagMeteringMode;
    public static int TagLensRange;
    public static int TagColorSpace;
    public static int TagExposure;
    public static int TagContrast;
    public static int TagShadow;
    public static int TagHighlight;
    public static int TagSaturation;
    public static int TagSharpness;
    public static int TagFillLight;
    public static int TagColorAdjustment;
    public static int TagAdjustmentMode;
    public static int TagQuality;
    public static int TagFirmware;
    public static int TagSoftware;
    public static int TagAutoBracket;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static SigmaMakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.SonyType1MakernoteDescriptor : TagDescriptor`1<SonyType1MakernoteDirectory> {
    [NullableContextAttribute("1")]
public SonyType1MakernoteDescriptor(SonyType1MakernoteDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetImageQualityDescription();
    public string GetFlashExposureCompensationDescription();
    public string GetTeleconverterDescription();
    public string GetWhiteBalanceDescription();
    public string GetColorTemperatureDescription();
    public string GetZoneMatchingDescription();
    public string GetDynamicRangeOptimizerDescription();
    public string GetImageStabilizationDescription();
    public string GetColorModeDescription();
    public string GetMacroDescription();
    public string GetExposureModeDescription();
    public string GetJpegQualityDescription();
    public string GetAntiBlurDescription();
    public string GetLongExposureNoiseReductionDescription();
    public string GetHighIsoNoiseReductionDescription();
    public string GetPictureEffectDescription();
    public string GetSoftSkinEffectDescription();
    public string GetVignettingCorrectionDescription();
    public string GetLateralChromaticAberrationDescription();
    public string GetDistortionCorrectionDescription();
    public string GetAutoPortraitFramedDescription();
    public string GetFocusModeDescription();
    public string GetAfPointSelectedDescription();
    public string GetSonyModelIdDescription();
    public string GetSceneModeDescription();
    public string GetAfModeDescription();
    public string GetAfIlluminatorDescription();
    public string GetFlashLevelDescription();
    public string GetReleaseModeDescription();
    public string GetSequenceNumberDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.SonyType1MakernoteDirectory : Directory {
    public static int TagCameraInfo;
    public static int TagFocusInfo;
    public static int TagImageQuality;
    public static int TagFlashExposureComp;
    public static int TagTeleconverter;
    public static int TagWhiteBalanceFineTune;
    public static int TagCameraSettings;
    public static int TagWhiteBalance;
    public static int TagExtraInfo;
    public static int TagPrintImageMatchingInfo;
    public static int TagMultiBurstMode;
    public static int TagMultiBurstImageWidth;
    public static int TagMultiBurstImageHeight;
    public static int TagPanorama;
    public static int TagPreviewImage;
    public static int TagRating;
    public static int TagContrast;
    public static int TagSaturation;
    public static int TagSharpness;
    public static int TagBrightness;
    public static int TagLongExposureNoiseReduction;
    public static int TagHighIsoNoiseReduction;
    public static int TagHdr;
    public static int TagMultiFrameNoiseReduction;
    public static int TagPictureEffect;
    public static int TagSoftSkinEffect;
    public static int TagVignettingCorrection;
    public static int TagLateralChromaticAberration;
    public static int TagDistortionCorrection;
    public static int TagWbShiftAmberMagenta;
    public static int TagAutoPortraitFramed;
    public static int TagFocusMode;
    public static int TagAfPointSelected;
    public static int TagShotInfo;
    public static int TagFileFormat;
    public static int TagSonyModelId;
    public static int TagColorModeSetting;
    public static int TagColorTemperature;
    public static int TagColorCompensationFilter;
    public static int TagSceneMode;
    public static int TagZoneMatching;
    public static int TagDynamicRangeOptimiser;
    public static int TagImageStabilisation;
    public static int TagLensId;
    public static int TagMinoltaMakernote;
    public static int TagColorMode;
    public static int TagLensSpec;
    public static int TagFullImageSize;
    public static int TagPreviewImageSize;
    public static int TagMacro;
    public static int TagExposureMode;
    public static int TagFocusMode2;
    public static int TagAfMode;
    public static int TagAfIlluminator;
    public static int TagJpegQuality;
    public static int TagFlashLevel;
    public static int TagReleaseMode;
    public static int TagSequenceNumber;
    public static int TagAntiBlur;
    public static int TagLongExposureNoiseReductionOrFocusMode;
    public static int TagDynamicRangeOptimizer;
    public static int TagHighIsoNoiseReduction2;
    public static int TagIntelligentAuto;
    public static int TagWhiteBalance2;
    public static int TagNoPrint;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static SonyType1MakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.Makernotes.SonyType6MakernoteDescriptor : TagDescriptor`1<SonyType6MakernoteDirectory> {
    [NullableContextAttribute("1")]
public SonyType6MakernoteDescriptor(SonyType6MakernoteDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetMakernoteThumbVersionDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.Makernotes.SonyType6MakernoteDirectory : Directory {
    public static int TagMakernoteThumbOffset;
    public static int TagMakernoteThumbLength;
    public static int TagMakernoteThumbVersion;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static SonyType6MakernoteDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.PanasonicRawDistortionDescriptor : TagDescriptor`1<PanasonicRawDistortionDirectory> {
    [NullableContextAttribute("1")]
public PanasonicRawDistortionDescriptor(PanasonicRawDistortionDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetDistortionParam02Description();
    public string GetDistortionParam04Description();
    public string GetDistortionScaleDescription();
    public string GetDistortionCorrectionDescription();
    public string GetDistortionParam08Description();
    public string GetDistortionParam09Description();
    public string GetDistortionParam11Description();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.PanasonicRawDistortionDirectory : Directory {
    public static int TagDistortionParam02;
    public static int TagDistortionParam04;
    public static int TagDistortionScale;
    public static int TagDistortionCorrection;
    public static int TagDistortionParam08;
    public static int TagDistortionParam09;
    public static int TagDistortionParam11;
    public static int TagDistortionN;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static PanasonicRawDistortionDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.PanasonicRawIfd0Descriptor : TagDescriptor`1<PanasonicRawIfd0Directory> {
    public PanasonicRawIfd0Descriptor(PanasonicRawIfd0Directory directory);
    [NullableContextAttribute("2")]
public virtual string GetDescription(int tagType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.PanasonicRawIfd0Directory : Directory {
    public static int TagPanasonicRawVersion;
    public static int TagSensorWidth;
    public static int TagSensorHeight;
    public static int TagSensorTopBorder;
    public static int TagSensorLeftBorder;
    public static int TagSensorBottomBorder;
    public static int TagSensorRightBorder;
    public static int TagBlackLevel1;
    public static int TagBlackLevel2;
    public static int TagBlackLevel3;
    public static int TagLinearityLimitRed;
    public static int TagLinearityLimitGreen;
    public static int TagLinearityLimitBlue;
    public static int TagRedBalance;
    public static int TagBlueBalance;
    public static int TagWbInfo;
    public static int TagIso;
    public static int TagHighIsoMultiplierRed;
    public static int TagHighIsoMultiplierGreen;
    public static int TagHighIsoMultiplierBlue;
    public static int TagBlackLevelRed;
    public static int TagBlackLevelGreen;
    public static int TagBlackLevelBlue;
    public static int TagWbRedLevel;
    public static int TagWbGreenLevel;
    public static int TagWbBlueLevel;
    public static int TagWbInfo2;
    public static int TagJpgFromRaw;
    public static int TagCropTop;
    public static int TagCropLeft;
    public static int TagCropBottom;
    public static int TagCropRight;
    public static int TagMake;
    public static int TagModel;
    public static int TagStripOffsets;
    public static int TagOrientation;
    public static int TagRowsPerStrip;
    public static int TagStripByteCounts;
    public static int TagRawDataOffset;
    public static int TagDistortionInfo;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static PanasonicRawIfd0Directory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.PanasonicRawWbInfo2Descriptor : TagDescriptor`1<PanasonicRawWbInfo2Directory> {
    [NullableContextAttribute("1")]
public PanasonicRawWbInfo2Descriptor(PanasonicRawWbInfo2Directory directory);
    public virtual string GetDescription(int tagType);
    public string GetWbTypeDescription(int tagType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.PanasonicRawWbInfo2Directory : Directory {
    public static int TagNumWbEntries;
    public static int TagWbType1;
    public static int TagWbRgbLevels1;
    public static int TagWbType2;
    public static int TagWbRgbLevels2;
    public static int TagWbType3;
    public static int TagWbRgbLevels3;
    public static int TagWbType4;
    public static int TagWbRgbLevels4;
    public static int TagWbType5;
    public static int TagWbRgbLevels5;
    public static int TagWbType6;
    public static int TagWbRgbLevels6;
    public static int TagWbType7;
    public static int TagWbRgbLevels7;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static PanasonicRawWbInfo2Directory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.PanasonicRawWbInfoDescriptor : TagDescriptor`1<PanasonicRawWbInfoDirectory> {
    [NullableContextAttribute("1")]
public PanasonicRawWbInfoDescriptor(PanasonicRawWbInfoDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetWbTypeDescription(int tagType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.PanasonicRawWbInfoDirectory : Directory {
    public static int TagNumWbEntries;
    public static int TagWbType1;
    public static int TagWbRbLevels1;
    public static int TagWbType2;
    public static int TagWbRbLevels2;
    public static int TagWbType3;
    public static int TagWbRbLevels3;
    public static int TagWbType4;
    public static int TagWbRbLevels4;
    public static int TagWbType5;
    public static int TagWbRbLevels5;
    public static int TagWbType6;
    public static int TagWbRbLevels6;
    public static int TagWbType7;
    public static int TagWbRbLevels7;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static PanasonicRawWbInfoDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Exif.PrintIMDescriptor : TagDescriptor`1<PrintIMDirectory> {
    public PrintIMDescriptor(PrintIMDirectory directory);
    [NullableContextAttribute("2")]
public virtual string GetDescription(int tagType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Exif.PrintIMDirectory : Directory {
    public static int TagPrintImVersion;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static PrintIMDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.FileSystem.FileMetadataDescriptor : TagDescriptor`1<FileMetadataDirectory> {
    [NullableContextAttribute("1")]
public FileMetadataDescriptor(FileMetadataDirectory directory);
    public virtual string GetDescription(int tagType);
    private string GetFileSizeDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.FileSystem.FileMetadataDirectory : Directory {
    public static int TagFileName;
    public static int TagFileSize;
    public static int TagFileModifiedDate;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static FileMetadataDirectory();
    public virtual string get_Name();
}
public class MetadataExtractor.Formats.FileSystem.FileMetadataReader : object {
    [NullableContextAttribute("1")]
public FileMetadataDirectory Read(string file);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.FileType.FileTypeDescriptor : TagDescriptor`1<FileTypeDirectory> {
    public FileTypeDescriptor(FileTypeDirectory directory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.FileType.FileTypeDirectory : Directory {
    public static int TagDetectedFileTypeName;
    public static int TagDetectedFileTypeLongName;
    public static int TagDetectedFileMimeType;
    public static int TagExpectedFileNameExtension;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    public FileTypeDirectory(FileType fileType);
    private static FileTypeDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Flir.FlirCameraInfoDescriptor : TagDescriptor`1<FlirCameraInfoDirectory> {
    public FlirCameraInfoDescriptor(FlirCameraInfoDirectory directory);
    [NullableContextAttribute("2")]
public virtual string GetDescription(int tagType);
    [CompilerGeneratedAttribute]
private string <GetDescription>g__KelvinToCelcius|1_0(<>c__DisplayClass1_0& );
    [CompilerGeneratedAttribute]
private string <GetDescription>g__RelativeHumidity|1_1(<>c__DisplayClass1_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Flir.FlirCameraInfoDirectory : Directory {
    public static int TagEmissivity;
    public static int TagObjectDistance;
    public static int TagReflectedApparentTemperature;
    public static int TagAtmosphericTemperature;
    public static int TagIRWindowTemperature;
    public static int TagIRWindowTransmission;
    public static int TagRelativeHumidity;
    public static int TagPlanckR1;
    public static int TagPlanckB;
    public static int TagPlanckF;
    public static int TagAtmosphericTransAlpha1;
    public static int TagAtmosphericTransAlpha2;
    public static int TagAtmosphericTransBeta1;
    public static int TagAtmosphericTransBeta2;
    public static int TagAtmosphericTransX;
    public static int TagCameraTemperatureRangeMax;
    public static int TagCameraTemperatureRangeMin;
    public static int TagCameraTemperatureMaxClip;
    public static int TagCameraTemperatureMinClip;
    public static int TagCameraTemperatureMaxWarn;
    public static int TagCameraTemperatureMinWarn;
    public static int TagCameraTemperatureMaxSaturated;
    public static int TagCameraTemperatureMinSaturated;
    public static int TagCameraModel;
    public static int TagCameraPartNumber;
    public static int TagCameraSerialNumber;
    public static int TagCameraSoftware;
    public static int TagLensModel;
    public static int TagLensPartNumber;
    public static int TagLensSerialNumber;
    public static int TagFieldOfView;
    public static int TagFilterModel;
    public static int TagFilterPartNumber;
    public static int TagFilterSerialNumber;
    public static int TagPlanckO;
    public static int TagPlanckR2;
    public static int TagRawValueRangeMin;
    public static int TagRawValueRangeMax;
    public static int TagRawValueMedian;
    public static int TagRawValueRange;
    public static int TagDateTimeOriginal;
    public static int TagFocusStepCount;
    public static int TagFocusDistance;
    public static int TagFrameRate;
    private static Dictionary`2<int, string> _nameByTag;
    public string Name { get; }
    private static FlirCameraInfoDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Flir.FlirHeaderDirectory : Directory {
    public static int TagCreatorSoftware;
    private static Dictionary`2<int, string> _nameByTag;
    public string Name { get; }
    private static FlirHeaderDirectory();
    public virtual string get_Name();
}
internal enum MetadataExtractor.Formats.Flir.FlirMainTagType : Enum {
    public ushort value__;
    public static FlirMainTagType Unused;
    public static FlirMainTagType Pixels;
    public static FlirMainTagType GainMap;
    public static FlirMainTagType OffsMap;
    public static FlirMainTagType DeadMap;
    public static FlirMainTagType GainDeadMap;
    public static FlirMainTagType CoarseMap;
    public static FlirMainTagType ImageMap;
    public static FlirMainTagType BasicData;
    public static FlirMainTagType Measure;
    public static FlirMainTagType ColorPal;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Flir.FlirRawDataDirectory : Directory {
    public static int TagRawThermalImageWidth;
    public static int TagRawThermalImageHeight;
    public static int TagRawThermalImageType;
    public static int TagRawThermalImage;
    private static Dictionary`2<int, string> _nameByTag;
    public string Name { get; }
    private static FlirRawDataDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Flir.FlirReader : object {
    public static string JpegSegmentPreamble;
    [CompilerGeneratedAttribute]
private bool <ExtractRawThermalImage>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<JpegSegmentType> <SegmentTypes>k__BackingField;
    public bool ExtractRawThermalImage { get; public set; }
    [NullableAttribute("0")]
private ReadOnlySpan`1<byte> PreambleBytes { get; }
    public IReadOnlyCollection`1<JpegSegmentType> SegmentTypes { get; }
    [CompilerGeneratedAttribute]
public bool get_ExtractRawThermalImage();
    [CompilerGeneratedAttribute]
public void set_ExtractRawThermalImage(bool value);
    [NullableContextAttribute("0")]
private ReadOnlySpan`1<byte> get_PreambleBytes();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<JpegSegmentType> get_SegmentTypes();
    public sealed virtual IEnumerable`1<Directory> ReadJpegSegments(IEnumerable`1<JpegSegment> segments);
    [IteratorStateMachineAttribute("MetadataExtractor.Formats.Flir.FlirReader/<Extract>d__11")]
public IEnumerable`1<Directory> Extract(IndexedReader reader);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.GeoTiff.GeoTiffDescriptor : TagDescriptor`1<GeoTiffDirectory> {
    [NullableContextAttribute("1")]
public GeoTiffDescriptor(GeoTiffDirectory directory);
    public virtual string GetDescription(int tagType);
    private string GetGeoTiffUnitsDescription(int tagType);
    private string GetGeoTiffVerticalCSDescription(int tagType);
    public string GetModelTypeDescription();
    public string GetRasterTypeDescription();
    public string GetGeographicTypeDescription();
    public string GetGeodeticDatumDescription();
    public string GetPrimeMeridianDescription();
    public string GetGeographicEllipsoidDescription();
    public string GetProjectedCoordinateSystemDescription();
    public string GetProjectionDescription();
    public string GetProjectedCoordinateTransformDescription();
    public string GetChartFormatDescription();
    public string GetChartSoundingDatumDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.GeoTiff.GeoTiffDirectory : Directory {
    public static int TagModelType;
    public static int TagRasterType;
    public static int TagCitation;
    public static int TagGeographicType;
    public static int TagGeographicCitation;
    public static int TagGeodeticDatum;
    public static int TagGeographicPrimeMeridian;
    public static int TagGeographicLinearUnits;
    public static int TagGeographicLinearUnitSize;
    public static int TagGeographicAngularUnits;
    public static int TagGeographicAngularUnitSize;
    public static int TagGeographicEllipsoid;
    public static int TagGeographicSemiMajorAxis;
    public static int TagGeographicSemiMinorAxis;
    public static int TagGeographicInvFlattening;
    public static int TagGeographicAzimuthUnits;
    public static int TagGeographicPrimeMeridianLong;
    public static int TagGeographicToWgs84;
    public static int TagGdalProjLinearUnitsInterpCorrect;
    public static int TagProjectedCSType;
    public static int TagProjectedCSCitation;
    public static int TagProjection;
    public static int TagProjectedCoordinateTransform;
    public static int TagProjLinearUnits;
    public static int TagProjLinearUnitSize;
    public static int TagProjStdParallel1;
    public static int TagProjStdParallel2;
    public static int TagProjNatOriginLong;
    public static int TagProjNatOriginLat;
    public static int TagProjFalseEasting;
    public static int TagProjFalseNorthing;
    public static int TagProjFalseOriginLong;
    public static int TagProjFalseOriginLat;
    public static int TagProjFalseOriginEasting;
    public static int TagProjFalseOriginNorthing;
    public static int TagProjCenterLong;
    public static int TagProjCenterLat;
    public static int TagProjCenterEasting;
    public static int TagProjCenterNorthing;
    public static int TagProjScaleAtNatOrigin;
    public static int TagProjScaleAtCenter;
    public static int TagProjAzimuthAngle;
    public static int TagProjStraightVertPoleLong;
    public static int TagProjRectifiedGridAngle;
    public static int TagVerticalCSType;
    public static int TagVerticalCitation;
    public static int TagVerticalDatum;
    public static int TagVerticalUnits;
    public static int TagChartFormat;
    public static int TagChartSource;
    public static int TagChartSourceEdition;
    public static int TagChartSourceDate;
    public static int TagChartCorrDate;
    public static int TagChartCountryOrigin;
    public static int TagChartRasterEdition;
    public static int TagChartSoundingDatum;
    public static int TagChartDepthUnits;
    public static int TagChartMagVar;
    public static int TagChartMagVarYear;
    public static int TagChartMagVarAnnChange;
    public static int TagChartWGSNSShift;
    public static int TagInsetNWPixelX;
    public static int TagInsetNWPixelY;
    public static int TagChartContourInterval;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static GeoTiffDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Gif.GifAnimationDescriptor : TagDescriptor`1<GifAnimationDirectory> {
    [NullableContextAttribute("1")]
public GifAnimationDescriptor(GifAnimationDirectory directory);
    public virtual string GetDescription(int tagType);
    private string GetIterationCountDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Gif.GifAnimationDirectory : Directory {
    public static int TagIterationCount;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static GifAnimationDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Gif.GifCommentDescriptor : TagDescriptor`1<GifCommentDirectory> {
    public GifCommentDescriptor(GifCommentDirectory directory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Gif.GifCommentDirectory : Directory {
    public static int TagComment;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    public GifCommentDirectory(StringValue comment);
    private static GifCommentDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Gif.GifControlDescriptor : TagDescriptor`1<GifControlDirectory> {
    [NullableContextAttribute("1")]
public GifControlDescriptor(GifControlDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetDisposalMethodDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Gif.GifControlDirectory : Directory {
    public static int TagDelay;
    public static int TagDisposalMethod;
    public static int TagUserInputFlag;
    public static int TagTransparentColorFlag;
    public static int TagTransparentColorIndex;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static GifControlDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Gif.GifHeaderDescriptor : TagDescriptor`1<GifHeaderDirectory> {
    public GifHeaderDescriptor(GifHeaderDirectory directory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Gif.GifHeaderDirectory : Directory {
    public static int TagGifFormatVersion;
    public static int TagImageWidth;
    public static int TagImageHeight;
    public static int TagColorTableSize;
    public static int TagIsColorTableSorted;
    public static int TagBitsPerPixel;
    public static int TagHasGlobalColorTable;
    public static int TagBackgroundColorIndex;
    public static int TagPixelAspectRatio;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static GifHeaderDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Gif.GifImageDescriptor : TagDescriptor`1<GifImageDirectory> {
    public GifImageDescriptor(GifImageDirectory directory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Gif.GifImageDirectory : Directory {
    public static int TagLeft;
    public static int TagTop;
    public static int TagWidth;
    public static int TagHeight;
    public static int TagHasLocalColourTable;
    public static int TagIsInterlaced;
    public static int TagIsColorTableSorted;
    public static int TagLocalColourTableBitsPerPixel;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static GifImageDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MetadataExtractor.Formats.Gif.GifMetadataReader : object {
    public static IReadOnlyList`1<Directory> ReadMetadata(string filePath);
    public static IReadOnlyList`1<Directory> ReadMetadata(Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Gif.GifReader : object {
    private static string Gif87AVersionIdentifier;
    private static string Gif89AVersionIdentifier;
    public IReadOnlyList`1<Directory> Extract(SequentialReader reader);
    [IteratorStateMachineAttribute("MetadataExtractor.Formats.Gif.GifReader/<ReadGifDirectoriesInternal>d__3")]
private static IEnumerable`1<Directory> ReadGifDirectoriesInternal(SequentialReader reader);
    private static GifHeaderDirectory ReadGifHeader(SequentialReader reader);
    private static Directory ReadGifExtensionBlock(SequentialReader reader);
    private static Directory ReadPlainTextBlock(SequentialReader reader, byte blockSizeBytes);
    private static GifCommentDirectory ReadCommentBlock(SequentialReader reader, byte blockSizeBytes);
    private static Directory ReadApplicationExtensionBlock(SequentialReader reader, byte blockSizeBytes);
    private static GifControlDirectory ReadControlBlock(SequentialReader reader);
    private static GifImageDirectory ReadImageBlock(SequentialReader reader);
    private static Byte[] GatherXmpBytes(SequentialReader reader);
    private static Byte[] GatherBytes(SequentialReader reader, byte firstLength);
    private static void SkipBlocks(SequentialReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Heif.HeicImagePropertiesDirectory : Directory {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public static int TagImageWidth;
    public static int TagImageHeight;
    public static int TagRotation;
    public static int TagPixelDepths;
    public static int TagConfigurationVersion;
    public static int TagGeneralProfileSpace;
    public static int TagGeneralTierTag;
    public static int TagGeneralProfileIdc;
    public static int TagGeneralProfileCompatibilityTag;
    public static int TagGeneralLevelIdc;
    public static int TagMinSpacialSegmentationIdc;
    public static int TagParallelismType;
    public static int TagChromaFormat;
    public static int TagBitDepthLuma;
    public static int TagBitDepthChroma;
    public static int TagAverageFrameRate;
    public static int TagConstantFrameRate;
    public static int TagNumTemporalLayers;
    public static int TagLengthSize;
    public static int TagColorPrimaries;
    public static int TagColorTransferCharacteristics;
    public static int TagColorMatrixCharacteristics;
    public static int TagFullRangeColor;
    public static int TagColorFormat;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    public HeicImagePropertiesDirectory(string name);
    private static HeicImagePropertiesDirectory();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Heif.HeicImagePropertyDescriptor : TagDescriptor`1<HeicImagePropertiesDirectory> {
    [NullableContextAttribute("1")]
public HeicImagePropertyDescriptor(HeicImagePropertiesDirectory directory);
    public virtual string GetDescription(int tagType);
    private static string ColorMatrixCoeffs(ushort value);
    private static string ColorTransfer(ushort value);
    private static string ColorPrimary(ushort value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Heif.HeicThumbnailDirectory : Directory {
    public static int TagFileOffset;
    public static int TagLength;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static HeicThumbnailDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Heif.HeicThumbnailTagDescriptor : TagDescriptor`1<HeicThumbnailDirectory> {
    public HeicThumbnailTagDescriptor(HeicThumbnailDirectory directory);
}
public static class MetadataExtractor.Formats.Heif.HeifMetadataReader : object {
    private static int Hvc1Tag;
    private static int ExifTag;
    private static int MimeTag;
    [NullableContextAttribute("1")]
public static IReadOnlyList`1<Directory> ReadMetadata(Stream stream);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<Box> <ReadMetadata>g__ImageProperties|3_5(UInt32 primaryId, UInt32[] secondary, ItemPropertyAssociationBox associations, IList`1<Box> props);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<Box> <ReadMetadata>g__DirectProperties|3_13(UInt32 primaryId, ItemPropertyAssociationBox associations, IList`1<Box> props);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static void <ReadMetadata>g__ParseImageSize|3_17(ImageSpatialExtentsBox ipse, <>c__DisplayClass3_3& );
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static void <ReadMetadata>g__ParseImageRotation|3_18(ImageRotationBox irot, <>c__DisplayClass3_3& );
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static void <ReadMetadata>g__ParsePixelDepth|3_19(PixelInformationBox pixi, <>c__DisplayClass3_3& );
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static void <ReadMetadata>g__ParseDecoderInformation|3_20(DecoderConfigurationBox hvcC, <>c__DisplayClass3_3& );
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Icc.IccDescriptor : TagDescriptor`1<IccDirectory> {
    [NullableContextAttribute("1")]
public IccDescriptor(IccDirectory directory);
    public virtual string GetDescription(int tagType);
    private string GetTagDataString(int tagType);
    private string GetRenderingIntentDescription();
    private string GetPlatformDescription();
    private string GetProfileClassDescription();
    private string GetProfileVersionDescription();
    private string GetProfileDateTimeDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Icc.IccDirectory : Directory {
    public static int TagProfileByteCount;
    public static int TagCmmType;
    public static int TagProfileVersion;
    public static int TagProfileClass;
    public static int TagColorSpace;
    public static int TagProfileConnectionSpace;
    public static int TagProfileDateTime;
    public static int TagSignature;
    public static int TagPlatform;
    public static int TagCmmFlags;
    public static int TagDeviceMake;
    public static int TagDeviceModel;
    public static int TagDeviceAttr;
    public static int TagRenderingIntent;
    public static int TagXyzValues;
    public static int TagProfileCreator;
    public static int TagTagCount;
    public static int TagTagA2B0;
    public static int TagTagA2B1;
    public static int TagTagA2B2;
    public static int TagTag_BXyz;
    public static int TagTag_BTrc;
    public static int TagTagB2A0;
    public static int TagTagB2A1;
    public static int TagTagB2A2;
    public static int TagTagCalt;
    public static int TagTagTarg;
    public static int TagTagChad;
    public static int TagTagChrm;
    public static int TagTagCprt;
    public static int TagTagCrdi;
    public static int TagTagDmnd;
    public static int TagTagDmdd;
    public static int TagTagDevs;
    public static int TagTagGamt;
    public static int TagTag_KTrc;
    public static int TagTag_GXyz;
    public static int TagTag_GTrc;
    public static int TagTagLumi;
    public static int TagTagMeas;
    public static int TagTagBkpt;
    public static int TagTagWtpt;
    public static int TagTagNcol;
    public static int TagTagNcl2;
    public static int TagTagResp;
    public static int TagTagPre0;
    public static int TagTagPre1;
    public static int TagTagPre2;
    public static int TagTagDesc;
    public static int TagTagPseq;
    public static int TagTagPsd0;
    public static int TagTagPsd1;
    public static int TagTagPsd2;
    public static int TagTagPsd3;
    public static int TagTagPs2S;
    public static int TagTagPs2I;
    public static int TagTag_RXyz;
    public static int TagTag_RTrc;
    public static int TagTagScrd;
    public static int TagTagScrn;
    public static int TagTagTech;
    public static int TagTagBfd;
    public static int TagTagVued;
    public static int TagTagView;
    public static int TagTagAabg;
    public static int TagTagAagg;
    public static int TagTagAarg;
    public static int TagTagMmod;
    public static int TagTagNdin;
    public static int TagTagVcgt;
    public static int TagAppleMultiLanguageProfileName;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static IccDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Icc.IccReader : object {
    private static int JpegSegmentPreambleLength;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<JpegSegmentType> <MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.SegmentTypes>k__BackingField;
    [NullableAttribute("0")]
public static ReadOnlySpan`1<byte> JpegSegmentPreamble { get; }
    private IReadOnlyCollection`1<JpegSegmentType> MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.SegmentTypes { get; }
    [NullableContextAttribute("0")]
public static ReadOnlySpan`1<byte> get_JpegSegmentPreamble();
    [CompilerGeneratedAttribute]
private sealed virtual override IReadOnlyCollection`1<JpegSegmentType> MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.get_SegmentTypes();
    public sealed virtual IEnumerable`1<Directory> ReadJpegSegments(IEnumerable`1<JpegSegment> segments);
    public IccDirectory Extract(IndexedReader reader);
    private static void Set4ByteString(Directory directory, int tagType, IndexedReader reader);
    private static void SetInt32(Directory directory, int tagType, IndexedReader reader);
    private static void SetInt64(Directory directory, int tagType, IndexedReader reader);
    private static void SetDate(IccDirectory directory, int tagType, IndexedReader reader);
    public static string GetStringFromUInt32(UInt32 d);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Ico.IcoDescriptor : TagDescriptor`1<IcoDirectory> {
    [NullableContextAttribute("1")]
public IcoDescriptor(IcoDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetImageTypeDescription();
    public string GetImageWidthDescription();
    public string GetImageHeightDescription();
    public string GetColourPaletteSizeDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Ico.IcoDirectory : Directory {
    public static int TagImageType;
    public static int TagImageWidth;
    public static int TagImageHeight;
    public static int TagColourPaletteSize;
    public static int TagColourPlanes;
    public static int TagCursorHotspotX;
    public static int TagBitsPerPixel;
    public static int TagCursorHotspotY;
    public static int TagImageSizeBytes;
    public static int TagImageOffsetBytes;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static IcoDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MetadataExtractor.Formats.Ico.IcoMetadataReader : object {
    public static IReadOnlyList`1<Directory> ReadMetadata(string filePath);
    public static IReadOnlyList`1<Directory> ReadMetadata(Stream stream);
}
public class MetadataExtractor.Formats.Ico.IcoReader : object {
    [NullableContextAttribute("1")]
public IReadOnlyList`1<Directory> Extract(SequentialReader reader);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Iptc.IptcDescriptor : TagDescriptor`1<IptcDirectory> {
    [NullableContextAttribute("1")]
public IptcDescriptor(IptcDirectory directory);
    public virtual string GetDescription(int tagType);
    private string GetDateDescription(int tagType);
    private string GetTimeDescription(int tagType);
    public string GetFileFormatDescription();
    public string GetByLineDescription();
    public string GetByLineTitleDescription();
    public string GetCaptionDescription();
    public string GetCategoryDescription();
    public string GetCityDescription();
    public string GetCopyrightNoticeDescription();
    public string GetCountryOrPrimaryLocationDescription();
    public string GetCreditDescription();
    public string GetDateCreatedDescription();
    public string GetDigitalDateCreatedDescription();
    public string GetDateSentDescription();
    public string GetExpirationDateDescription();
    public string GetExpirationTimeDescription();
    public string GetHeadlineDescription();
    public string GetKeywordsDescription();
    public string GetObjectNameDescription();
    public string GetOriginalTransmissionReferenceDescription();
    public string GetOriginatingProgramDescription();
    public string GetProvinceOrStateDescription();
    public string GetRecordVersionDescription();
    public string GetReferenceDateDescription();
    public string GetReleaseDateDescription();
    public string GetReleaseTimeDescription();
    public string GetTimeSentDescription();
    public string GetSourceDescription();
    public string GetSpecialInstructionsDescription();
    public string GetSupplementalCategoriesDescription();
    public string GetTimeCreatedDescription();
    public string GetDigitalTimeCreatedDescription();
    public string GetUrgencyDescription();
    public string GetWriterDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Iptc.IptcDirectory : Directory {
    public static int TagEnvelopeRecordVersion;
    public static int TagDestination;
    public static int TagFileFormat;
    public static int TagFileVersion;
    public static int TagServiceId;
    public static int TagEnvelopeNumber;
    public static int TagProductId;
    public static int TagEnvelopePriority;
    public static int TagDateSent;
    public static int TagTimeSent;
    public static int TagCodedCharacterSet;
    public static int TagUniqueObjectName;
    public static int TagArmIdentifier;
    public static int TagArmVersion;
    public static int TagApplicationRecordVersion;
    public static int TagObjectTypeReference;
    public static int TagObjectAttributeReference;
    public static int TagObjectName;
    public static int TagEditStatus;
    public static int TagEditorialUpdate;
    public static int TagUrgency;
    public static int TagSubjectReference;
    public static int TagCategory;
    public static int TagSupplementalCategories;
    public static int TagFixtureId;
    public static int TagKeywords;
    public static int TagContentLocationCode;
    public static int TagContentLocationName;
    public static int TagReleaseDate;
    public static int TagReleaseTime;
    public static int TagExpirationDate;
    public static int TagExpirationTime;
    public static int TagSpecialInstructions;
    public static int TagActionAdvised;
    public static int TagReferenceService;
    public static int TagReferenceDate;
    public static int TagReferenceNumber;
    public static int TagDateCreated;
    public static int TagTimeCreated;
    public static int TagDigitalDateCreated;
    public static int TagDigitalTimeCreated;
    public static int TagOriginatingProgram;
    public static int TagProgramVersion;
    public static int TagObjectCycle;
    public static int TagByLine;
    public static int TagByLineTitle;
    public static int TagCity;
    public static int TagSubLocation;
    public static int TagProvinceOrState;
    public static int TagCountryOrPrimaryLocationCode;
    public static int TagCountryOrPrimaryLocationName;
    public static int TagOriginalTransmissionReference;
    public static int TagHeadline;
    public static int TagCredit;
    public static int TagSource;
    public static int TagCopyrightNotice;
    public static int TagContact;
    public static int TagCaption;
    public static int TagLocalCaption;
    public static int TagCaptionWriter;
    public static int TagRasterizedCaption;
    public static int TagImageType;
    public static int TagImageOrientation;
    public static int TagLanguageIdentifier;
    public static int TagAudioType;
    public static int TagAudioSamplingRate;
    public static int TagAudioSamplingResolution;
    public static int TagAudioDuration;
    public static int TagAudioOutcue;
    public static int TagJobId;
    public static int TagMasterDocumentId;
    public static int TagShortDocumentId;
    public static int TagUniqueDocumentId;
    public static int TagOwnerId;
    public static int TagObjectPreviewFileFormat;
    public static int TagObjectPreviewFileFormatVersion;
    public static int TagObjectPreviewData;
    private static Dictionary`2<int, string> _tagNameMap;
    private static String[] _formats;
    public string Name { get; }
    private static IptcDirectory();
    public virtual string get_Name();
    public IList`1<string> GetKeywords();
    public Nullable`1<DateTimeOffset> GetDateSent();
    public Nullable`1<DateTimeOffset> GetReleaseDate();
    public Nullable`1<DateTimeOffset> GetExpirationDate();
    public Nullable`1<DateTimeOffset> GetDateCreated();
    public Nullable`1<DateTimeOffset> GetDigitalDateCreated();
    private Nullable`1<DateTimeOffset> GetDate(int dateTagType, int timeTagType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Iptc.IptcReader : object {
    internal static byte IptcMarkerByte;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<JpegSegmentType> <MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.SegmentTypes>k__BackingField;
    private IReadOnlyCollection`1<JpegSegmentType> MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.SegmentTypes { get; }
    [CompilerGeneratedAttribute]
private sealed virtual override IReadOnlyCollection`1<JpegSegmentType> MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.get_SegmentTypes();
    public sealed virtual IEnumerable`1<Directory> ReadJpegSegments(IEnumerable`1<JpegSegment> segments);
    public IptcDirectory Extract(SequentialReader reader, long length);
    private static void ProcessTag(SequentialReader reader, Directory directory, int directoryType, int tagType, int tagByteCount);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private IptcDirectory <ReadJpegSegments>b__4_1(JpegSegment segment);
}
public static class MetadataExtractor.Formats.Iptc.Iso2022Converter : object {
    private static int Dot;
    private static byte LatinCapitalA;
    private static byte LatinCapitalG;
    private static byte MinusSign;
    private static byte PercentSign;
    private static byte Esc;
    public static string ConvertEscapeSequenceToEncodingName(ReadOnlySpan`1<byte> bytes);
    [NullableContextAttribute("1")]
internal static Encoding GuessEncoding(Byte[] bytes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MetadataExtractor.Formats.Iso14496.Box : object {
    private static IEnumerable`1<Box> _emptyBoxEnumerable;
    private BoxLocation _location;
    public UInt32 Type { get; }
    public ulong NextPosition { get; }
    public Box(BoxLocation location);
    private static Box();
    public UInt32 get_Type();
    public ulong get_NextPosition();
    protected Byte[] ReadRemainingData(SequentialReader sr);
    public virtual IEnumerable`1<Box> Children();
    public virtual string ToString();
}
public class MetadataExtractor.Formats.Iso14496.Boxes.AssociatedProperty : object {
    [CompilerGeneratedAttribute]
private bool <Essential>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Index>k__BackingField;
    public bool Essential { get; }
    public ushort Index { get; }
    public AssociatedProperty(bool essential, ushort index);
    [CompilerGeneratedAttribute]
public bool get_Essential();
    [CompilerGeneratedAttribute]
public ushort get_Index();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MetadataExtractor.Formats.Iso14496.Boxes.ColorInformationBox : Box {
    public static UInt32 NclxTag;
    public static UInt32 RICCTag;
    public static UInt32 ProfTag;
    [CompilerGeneratedAttribute]
private UInt32 <ColorType>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <ColorPrimaries>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <TransferCharacteristics>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MatrixCharacteristics>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FullRangeFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <IccProfile>k__BackingField;
    public UInt32 ColorType { get; }
    public ushort ColorPrimaries { get; }
    public ushort TransferCharacteristics { get; }
    public ushort MatrixCharacteristics { get; }
    public bool FullRangeFlag { get; }
    public Byte[] IccProfile { get; }
    public ColorInformationBox(BoxLocation location, SequentialReader sr);
    [CompilerGeneratedAttribute]
public UInt32 get_ColorType();
    [CompilerGeneratedAttribute]
public ushort get_ColorPrimaries();
    [CompilerGeneratedAttribute]
public ushort get_TransferCharacteristics();
    [CompilerGeneratedAttribute]
public ushort get_MatrixCharacteristics();
    [CompilerGeneratedAttribute]
public bool get_FullRangeFlag();
    [CompilerGeneratedAttribute]
public Byte[] get_IccProfile();
}
internal enum MetadataExtractor.Formats.Iso14496.Boxes.ConstructionMethod : Enum {
    public int value__;
    public static ConstructionMethod FileOffset;
    public static ConstructionMethod IdatOffset;
    public static ConstructionMethod ItemOffset;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MetadataExtractor.Formats.Iso14496.Boxes.DataEntryLocationBox : FullBox {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    public string Name { get; }
    public string Location { get; }
    public DataEntryLocationBox(BoxLocation location, SequentialReader reader, bool hasName);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Location();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MetadataExtractor.Formats.Iso14496.Boxes.DataInformationBox : Box {
    [CompilerGeneratedAttribute]
private IList`1<Box> <Boxes>k__BackingField;
    public IList`1<Box> Boxes { get; }
    public DataInformationBox(BoxLocation loc, SequentialReader sr);
    [CompilerGeneratedAttribute]
public IList`1<Box> get_Boxes();
    public virtual IEnumerable`1<Box> Children();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MetadataExtractor.Formats.Iso14496.Boxes.DataReferenceBox : FullBox {
    [CompilerGeneratedAttribute]
private IList`1<Box> <Boxes>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <BoxCount>k__BackingField;
    public IList`1<Box> Boxes { get; }
    public UInt32 BoxCount { get; }
    public DataReferenceBox(BoxLocation location, SequentialReader reader);
    [CompilerGeneratedAttribute]
public IList`1<Box> get_Boxes();
    [CompilerGeneratedAttribute]
public UInt32 get_BoxCount();
    public virtual IEnumerable`1<Box> Children();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MetadataExtractor.Formats.Iso14496.Boxes.DecoderConfigurationBox : Box {
    [CompilerGeneratedAttribute]
private byte <ConfigurationVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <GeneralProfileSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <GeneralTierTag>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <GeneralProfileIdc>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <GeneralProfileCompatibilityFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <GeneralConstraintIndicatorFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <GeneralLevelIdc>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MinSpacialSegmentationIdc>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <ParallelismType>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <ChromaFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <BitDepthLumaMinus8>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <BitDepthChromaMinus8>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <AvgFrameRate>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <ConstantFrameRate>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <NumTemporalLayers>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <TemporalIdNested>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <LengthSizeMinus1>k__BackingField;
    public byte ConfigurationVersion { get; }
    public byte GeneralProfileSpace { get; }
    public byte GeneralTierTag { get; }
    public byte GeneralProfileIdc { get; }
    public UInt32 GeneralProfileCompatibilityFlags { get; }
    public Byte[] GeneralConstraintIndicatorFlags { get; }
    public byte GeneralLevelIdc { get; }
    public ushort MinSpacialSegmentationIdc { get; }
    public byte ParallelismType { get; }
    public byte ChromaFormat { get; }
    public byte BitDepthLumaMinus8 { get; }
    public byte BitDepthChromaMinus8 { get; }
    public ushort AvgFrameRate { get; }
    public byte ConstantFrameRate { get; }
    public byte NumTemporalLayers { get; }
    public byte TemporalIdNested { get; }
    public byte LengthSizeMinus1 { get; }
    public DecoderConfigurationBox(BoxLocation location, SequentialReader sr);
    [CompilerGeneratedAttribute]
public byte get_ConfigurationVersion();
    [CompilerGeneratedAttribute]
public byte get_GeneralProfileSpace();
    [CompilerGeneratedAttribute]
public byte get_GeneralTierTag();
    [CompilerGeneratedAttribute]
public byte get_GeneralProfileIdc();
    [CompilerGeneratedAttribute]
public UInt32 get_GeneralProfileCompatibilityFlags();
    [CompilerGeneratedAttribute]
public Byte[] get_GeneralConstraintIndicatorFlags();
    [CompilerGeneratedAttribute]
public byte get_GeneralLevelIdc();
    [CompilerGeneratedAttribute]
public ushort get_MinSpacialSegmentationIdc();
    [CompilerGeneratedAttribute]
public byte get_ParallelismType();
    [CompilerGeneratedAttribute]
public byte get_ChromaFormat();
    [CompilerGeneratedAttribute]
public byte get_BitDepthLumaMinus8();
    [CompilerGeneratedAttribute]
public byte get_BitDepthChromaMinus8();
    [CompilerGeneratedAttribute]
public ushort get_AvgFrameRate();
    [CompilerGeneratedAttribute]
public byte get_ConstantFrameRate();
    [CompilerGeneratedAttribute]
public byte get_NumTemporalLayers();
    [CompilerGeneratedAttribute]
public byte get_TemporalIdNested();
    [CompilerGeneratedAttribute]
public byte get_LengthSizeMinus1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MetadataExtractor.Formats.Iso14496.Boxes.FileTypeBox : Box {
    [CompilerGeneratedAttribute]
private UInt32 <MajorBrand>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MinorBrand>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<UInt32> <CompatibleBrands>k__BackingField;
    public UInt32 MajorBrand { get; }
    public UInt32 MinorBrand { get; }
    public IList`1<UInt32> CompatibleBrands { get; }
    public string MajorBrandString { get; }
    public string MinorBrandString { get; }
    public IEnumerable`1<string> CompatibleBrandStrings { get; }
    public FileTypeBox(BoxLocation loc, SequentialReader sr);
    [CompilerGeneratedAttribute]
public UInt32 get_MajorBrand();
    [CompilerGeneratedAttribute]
public UInt32 get_MinorBrand();
    [CompilerGeneratedAttribute]
public IList`1<UInt32> get_CompatibleBrands();
    public string get_MajorBrandString();
    public string get_MinorBrandString();
    public IEnumerable`1<string> get_CompatibleBrandStrings();
}
internal abstract class MetadataExtractor.Formats.Iso14496.Boxes.FullBox : Box {
    private UInt32 _typeAndFlags;
    public byte Version { get; }
    public UInt32 Flags { get; }
    [NullableContextAttribute("1")]
protected FullBox(BoxLocation location, SequentialReader reader);
    public byte get_Version();
    public UInt32 get_Flags();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MetadataExtractor.Formats.Iso14496.Boxes.HandlerBox : FullBox {
    [CompilerGeneratedAttribute]
private UInt32 <HandlerType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TrackType>k__BackingField;
    public UInt32 HandlerType { get; }
    public string TrackType { get; }
    public HandlerBox(BoxLocation location, SequentialReader reader);
    [CompilerGeneratedAttribute]
public UInt32 get_HandlerType();
    [CompilerGeneratedAttribute]
public string get_TrackType();
}
internal class MetadataExtractor.Formats.Iso14496.Boxes.ImageRotationBox : Box {
    [CompilerGeneratedAttribute]
private UInt32 <Rotation>k__BackingField;
    public UInt32 Rotation { get; }
    [NullableContextAttribute("1")]
public ImageRotationBox(BoxLocation boxLocation, SequentialReader sr);
    [CompilerGeneratedAttribute]
public UInt32 get_Rotation();
}
internal class MetadataExtractor.Formats.Iso14496.Boxes.ImageSpatialExtentsBox : FullBox {
    [CompilerGeneratedAttribute]
private UInt32 <X>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Y>k__BackingField;
    public UInt32 X { get; }
    public UInt32 Y { get; }
    [NullableContextAttribute("1")]
public ImageSpatialExtentsBox(BoxLocation location, SequentialReader reader);
    [CompilerGeneratedAttribute]
public UInt32 get_X();
    [CompilerGeneratedAttribute]
public UInt32 get_Y();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MetadataExtractor.Formats.Iso14496.Boxes.ItemDataBox : Box {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public Byte[] Data { get; }
    public ItemDataBox(BoxLocation location, SequentialReader sr);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MetadataExtractor.Formats.Iso14496.Boxes.ItemInfoEntryBox : FullBox {
    [CompilerGeneratedAttribute]
private UInt32 <ItemId>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <ItemProtectionIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ExtensionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MD5>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ContentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <TransferLength>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <GroupIdCount>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32[] <GroupIds>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemUri>k__BackingField;
    private static UInt32 FdelTag;
    private static UInt32 MimeTag;
    private static UInt32 UriTag;
    public UInt32 ItemId { get; }
    public ushort ItemProtectionIndex { get; }
    public string ItemName { get; }
    public string ContentType { get; }
    public string ContentEncoding { get; }
    public UInt32 ExtensionType { get; }
    public string Location { get; }
    public string MD5 { get; }
    public ulong ContentLength { get; }
    public ulong TransferLength { get; }
    public byte GroupIdCount { get; }
    public UInt32[] GroupIds { get; }
    public UInt32 ItemType { get; }
    public string ItemUri { get; }
    public ItemInfoEntryBox(BoxLocation location, SequentialReader reader);
    [CompilerGeneratedAttribute]
public UInt32 get_ItemId();
    [CompilerGeneratedAttribute]
public ushort get_ItemProtectionIndex();
    [CompilerGeneratedAttribute]
public string get_ItemName();
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public string get_ContentEncoding();
    [CompilerGeneratedAttribute]
public UInt32 get_ExtensionType();
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public string get_MD5();
    [CompilerGeneratedAttribute]
public ulong get_ContentLength();
    [CompilerGeneratedAttribute]
public ulong get_TransferLength();
    [CompilerGeneratedAttribute]
public byte get_GroupIdCount();
    [CompilerGeneratedAttribute]
public UInt32[] get_GroupIds();
    [CompilerGeneratedAttribute]
public UInt32 get_ItemType();
    [CompilerGeneratedAttribute]
public string get_ItemUri();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MetadataExtractor.Formats.Iso14496.Boxes.ItemInformationBox : FullBox {
    [CompilerGeneratedAttribute]
private UInt32 <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Box> <Boxes>k__BackingField;
    public UInt32 Count { get; }
    public IList`1<Box> Boxes { get; }
    public ItemInformationBox(BoxLocation location, SequentialReader reader);
    [CompilerGeneratedAttribute]
public UInt32 get_Count();
    [CompilerGeneratedAttribute]
public IList`1<Box> get_Boxes();
    public virtual IEnumerable`1<Box> Children();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MetadataExtractor.Formats.Iso14496.Boxes.ItemLocation : object {
    [CompilerGeneratedAttribute]
private UInt32 <ItemId>k__BackingField;
    [CompilerGeneratedAttribute]
private ConstructionMethod <ConstructionMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <DataReferenceIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <BaseOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemLocationExtent[] <ExtentList>k__BackingField;
    public UInt32 ItemId { get; }
    public ConstructionMethod ConstructionMethod { get; }
    public ushort DataReferenceIndex { get; }
    public ulong BaseOffset { get; }
    public ItemLocationExtent[] ExtentList { get; }
    public ItemLocation(UInt32 itemId, ConstructionMethod constructionMethod, ushort dataReferenceIndex, ulong baseOffset, ItemLocationExtent[] extentList);
    [CompilerGeneratedAttribute]
public UInt32 get_ItemId();
    [CompilerGeneratedAttribute]
public ConstructionMethod get_ConstructionMethod();
    [CompilerGeneratedAttribute]
public ushort get_DataReferenceIndex();
    [CompilerGeneratedAttribute]
public ulong get_BaseOffset();
    [CompilerGeneratedAttribute]
public ItemLocationExtent[] get_ExtentList();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MetadataExtractor.Formats.Iso14496.Boxes.ItemLocationBox : FullBox {
    [CompilerGeneratedAttribute]
private byte <OffsetSize>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <LengthSize>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <BaseOffsetSize>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <IndexSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ItemCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemLocation[] <ItemLocations>k__BackingField;
    public byte OffsetSize { get; }
    public byte LengthSize { get; }
    public byte BaseOffsetSize { get; }
    public byte IndexSize { get; }
    public UInt32 ItemCount { get; }
    public ItemLocation[] ItemLocations { get; }
    public ItemLocationBox(BoxLocation location, SequentialReader reader);
    [CompilerGeneratedAttribute]
public byte get_OffsetSize();
    [CompilerGeneratedAttribute]
public byte get_LengthSize();
    [CompilerGeneratedAttribute]
public byte get_BaseOffsetSize();
    [CompilerGeneratedAttribute]
public byte get_IndexSize();
    [CompilerGeneratedAttribute]
public UInt32 get_ItemCount();
    [CompilerGeneratedAttribute]
public ItemLocation[] get_ItemLocations();
    private ItemLocation[] ParseLocationArray(SequentialReader sr);
    private ItemLocation ParseLocation(SequentialReader sr);
    private UInt32 ReadItemNumber(SequentialReader sr);
    private ConstructionMethod ReadConstructionMethod(SequentialReader sr);
    private static ulong ReadSizedPointer(SequentialReader sr, byte pointerSize);
    private ItemLocationExtent[] ReadExtentList(SequentialReader sr);
    private ItemLocationExtent ReadExtent(SequentialReader sr);
    private ulong ReadItemIndex(SequentialReader sr);
}
internal class MetadataExtractor.Formats.Iso14496.Boxes.ItemLocationExtent : object {
    [CompilerGeneratedAttribute]
private ulong <ExtentIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ExtentOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ExtentLength>k__BackingField;
    public ulong ExtentIndex { get; }
    public ulong ExtentOffset { get; }
    public ulong ExtentLength { get; }
    public ItemLocationExtent(ulong extentIndex, ulong extentOffset, ulong extentLength);
    [CompilerGeneratedAttribute]
public ulong get_ExtentIndex();
    [CompilerGeneratedAttribute]
public ulong get_ExtentOffset();
    [CompilerGeneratedAttribute]
public ulong get_ExtentLength();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MetadataExtractor.Formats.Iso14496.Boxes.ItemPropertyAssociationBox : FullBox {
    [CompilerGeneratedAttribute]
private UInt32 <EntryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemPropertyAssociationEntry[] <Entries>k__BackingField;
    public UInt32 EntryCount { get; }
    public ItemPropertyAssociationEntry[] Entries { get; }
    private int ItemIndexWidth { get; }
    private int PropertyIndexWidth { get; }
    public ItemPropertyAssociationBox(BoxLocation location, SequentialReader reader);
    [CompilerGeneratedAttribute]
public UInt32 get_EntryCount();
    [CompilerGeneratedAttribute]
public ItemPropertyAssociationEntry[] get_Entries();
    private ItemPropertyAssociationEntry[] ParseEntries(SequentialReader sr);
    private ItemPropertyAssociationEntry ParseAssociationEntry(BitReader bits);
    private AssociatedProperty[] ReadAssociatedItems(BitReader bits);
    private AssociatedProperty ParseAssociatedItem(BitReader bits);
    private int get_ItemIndexWidth();
    private int get_PropertyIndexWidth();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Iso14496.Boxes.ItemPropertyAssociationEntry : object {
    [CompilerGeneratedAttribute]
private UInt32 <ItemId>k__BackingField;
    [CompilerGeneratedAttribute]
private AssociatedProperty[] <Properties>k__BackingField;
    public UInt32 ItemId { get; }
    public AssociatedProperty[] Properties { get; }
    public ItemPropertyAssociationEntry(UInt32 itemId, AssociatedProperty[] properties);
    [CompilerGeneratedAttribute]
public UInt32 get_ItemId();
    [CompilerGeneratedAttribute]
public AssociatedProperty[] get_Properties();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MetadataExtractor.Formats.Iso14496.Boxes.ItemPropertyBox : Box {
    [CompilerGeneratedAttribute]
private IList`1<Box> <Boxes>k__BackingField;
    public IList`1<Box> Boxes { get; }
    public ItemPropertyBox(BoxLocation loc, SequentialReader sr);
    [CompilerGeneratedAttribute]
public IList`1<Box> get_Boxes();
    public virtual IEnumerable`1<Box> Children();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MetadataExtractor.Formats.Iso14496.Boxes.ItemPropertyContainerBox : Box {
    [CompilerGeneratedAttribute]
private IList`1<Box> <Boxes>k__BackingField;
    public IList`1<Box> Boxes { get; }
    public ItemPropertyContainerBox(BoxLocation loc, SequentialReader sr);
    [CompilerGeneratedAttribute]
public IList`1<Box> get_Boxes();
    public virtual IEnumerable`1<Box> Children();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MetadataExtractor.Formats.Iso14496.Boxes.ItemReferenceBox : FullBox {
    [CompilerGeneratedAttribute]
private IList`1<SingleItemTypeReferenceBox> <Boxes>k__BackingField;
    public IList`1<SingleItemTypeReferenceBox> Boxes { get; }
    public ItemReferenceBox(BoxLocation location, SequentialReader reader);
    [CompilerGeneratedAttribute]
public IList`1<SingleItemTypeReferenceBox> get_Boxes();
    public virtual IEnumerable`1<Box> Children();
    [CompilerGeneratedAttribute]
private Box <.ctor>b__3_0(BoxLocation l, SequentialReader r);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MetadataExtractor.Formats.Iso14496.Boxes.MetaBox : FullBox {
    [CompilerGeneratedAttribute]
private IList`1<Box> <Boxes>k__BackingField;
    public IList`1<Box> Boxes { get; }
    public MetaBox(BoxLocation location, SequentialReader reader);
    [CompilerGeneratedAttribute]
public IList`1<Box> get_Boxes();
    public virtual IEnumerable`1<Box> Children();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MetadataExtractor.Formats.Iso14496.Boxes.PixelInformationBox : FullBox {
    [CompilerGeneratedAttribute]
private byte <ChannelCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <BitsPerChannel>k__BackingField;
    public byte ChannelCount { get; }
    public Byte[] BitsPerChannel { get; }
    public PixelInformationBox(BoxLocation location, SequentialReader reader);
    [CompilerGeneratedAttribute]
public byte get_ChannelCount();
    [CompilerGeneratedAttribute]
public Byte[] get_BitsPerChannel();
}
internal class MetadataExtractor.Formats.Iso14496.Boxes.PrimaryItemBox : FullBox {
    [CompilerGeneratedAttribute]
private UInt32 <PrimaryItem>k__BackingField;
    public UInt32 PrimaryItem { get; }
    [NullableContextAttribute("1")]
public PrimaryItemBox(BoxLocation location, SequentialReader reader);
    [CompilerGeneratedAttribute]
public UInt32 get_PrimaryItem();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MetadataExtractor.Formats.Iso14496.Boxes.SingleItemTypeReferenceBox : Box {
    [CompilerGeneratedAttribute]
private UInt32 <FromItemId>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <ReferenceCount>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32[] <ToItemIds>k__BackingField;
    public UInt32 FromItemId { get; }
    public ushort ReferenceCount { get; }
    public UInt32[] ToItemIds { get; }
    public SingleItemTypeReferenceBox(BoxLocation loc, SequentialReader sr, byte parentVersion);
    [CompilerGeneratedAttribute]
public UInt32 get_FromItemId();
    [CompilerGeneratedAttribute]
public ushort get_ReferenceCount();
    [CompilerGeneratedAttribute]
public UInt32[] get_ToItemIds();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MetadataExtractor.Formats.Iso14496.BoxLocation : object {
    [CompilerGeneratedAttribute]
private UInt32 <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Length>k__BackingField;
    public UInt32 Type { get; }
    public ulong Origin { get; }
    public ulong Length { get; }
    public ulong NextPosition { get; }
    public string TypeString { get; }
    public BoxLocation(SequentialReader reader);
    [CompilerGeneratedAttribute]
public UInt32 get_Type();
    [CompilerGeneratedAttribute]
public ulong get_Origin();
    [CompilerGeneratedAttribute]
public ulong get_Length();
    public ulong get_NextPosition();
    public string get_TypeString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class MetadataExtractor.Formats.Iso14496.BoxQuery : object {
    [ExtensionAttribute]
public static T Descendant(IEnumerable`1<Box> source);
    [IteratorStateMachineAttribute("MetadataExtractor.Formats.Iso14496.BoxQuery/<Descendants>d__1")]
[ExtensionAttribute]
public static IEnumerable`1<Box> Descendants(IEnumerable`1<Box> roots);
    [CompilerGeneratedAttribute]
internal static void <Descendants>g__EnqueueAll|1_0(IEnumerable`1<Box> all, <>c__DisplayClass1_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class MetadataExtractor.Formats.Iso14496.BoxReader : object {
    public static List`1<Box> ReadBoxes(SequentialReader reader);
    public static List`1<Box> ReadBoxes(SequentialReader sr, BoxLocation loc);
    private static Box ReadBox(SequentialReader sr);
    internal static Box ReadBox(SequentialReader sr, Func`3<BoxLocation, SequentialReader, Box> parseBox);
    [CompilerGeneratedAttribute]
internal static Box <ReadBox>g__ParseBox|2_0(BoxLocation location, SequentialReader sr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class MetadataExtractor.Formats.Iso14496.BoxReaderExtensions : object {
    [ExtensionAttribute]
public static bool IsWithinBox(SequentialReader reader, BoxLocation location);
    [ExtensionAttribute]
public static ulong BytesRemainingInBox(SequentialReader reader, BoxLocation boxLocation);
}
internal static class MetadataExtractor.Formats.Iso14496.BoxTypes : object {
    public static UInt32 MdatTag;
    public static UInt32 MetaTag;
    public static UInt32 FTypTag;
    public static UInt32 HdlrTag;
    public static UInt32 DinfTag;
    public static UInt32 DrefTag;
    public static UInt32 UrlTag;
    public static UInt32 UrnTag;
    public static UInt32 PitmTag;
    public static UInt32 Iinftag;
    public static UInt32 InfeTag;
    public static UInt32 IrefTag;
    public static UInt32 IprpTag;
    public static UInt32 IpcoTag;
    public static UInt32 IspeTag;
    public static UInt32 HvcCTag;
    public static UInt32 ColrTag;
    public static UInt32 IrotTag;
    public static UInt32 PixiTag;
    public static UInt32 IdatTag;
    public static UInt32 IlocTag;
    public static UInt32 IpmaTag;
    public static UInt32 ThmbTag;
    public static UInt32 CdscTag;
    public static UInt32 DimgTag;
    public static UInt32 MimeTag;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class MetadataExtractor.Formats.Iso14496.TypeStringConverter : object {
    public static string ToTypeString(UInt32 input);
    public static UInt32 ToTypeId(string typeString);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Jfif.JfifDescriptor : TagDescriptor`1<JfifDirectory> {
    [NullableContextAttribute("1")]
public JfifDescriptor(JfifDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetImageVersionDescription();
    public string GetImageResYDescription();
    public string GetImageResXDescription();
    public string GetImageResUnitsDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Jfif.JfifDirectory : Directory {
    public static int TagVersion;
    public static int TagUnits;
    public static int TagResX;
    public static int TagResY;
    public static int TagThumbWidth;
    public static int TagThumbHeight;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static JfifDirectory();
    public virtual string get_Name();
    public int GetVersion();
    public int GetResUnits();
    public int GetImageWidth();
    public int GetImageHeight();
}
public class MetadataExtractor.Formats.Jfif.JfifReader : JpegSegmentWithPreambleMetadataReader {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IReadOnlyCollection`1<JpegSegmentType> <SegmentTypes>k__BackingField;
    public static ReadOnlySpan`1<byte> JpegSegmentPreamble { get; }
    protected ReadOnlySpan`1<byte> PreambleBytes { get; }
    [NullableAttribute("1")]
public IReadOnlyCollection`1<JpegSegmentType> SegmentTypes { get; }
    public static ReadOnlySpan`1<byte> get_JpegSegmentPreamble();
    protected virtual ReadOnlySpan`1<byte> get_PreambleBytes();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual IReadOnlyCollection`1<JpegSegmentType> get_SegmentTypes();
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("MetadataExtractor.Formats.Jfif.JfifReader/<Extract>d__7")]
protected virtual IEnumerable`1<Directory> Extract(Byte[] segmentBytes, int preambleLength);
    [NullableContextAttribute("1")]
public JfifDirectory Extract(IndexedReader reader);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Jfxx.JfxxDescriptor : TagDescriptor`1<JfxxDirectory> {
    [NullableContextAttribute("1")]
public JfxxDescriptor(JfxxDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetExtensionCodeDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Jfxx.JfxxDirectory : Directory {
    public static int TagExtensionCode;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static JfxxDirectory();
    public virtual string get_Name();
    public int GetExtensionCode();
}
public class MetadataExtractor.Formats.Jfxx.JfxxReader : JpegSegmentWithPreambleMetadataReader {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IReadOnlyCollection`1<JpegSegmentType> <SegmentTypes>k__BackingField;
    public static ReadOnlySpan`1<byte> JpegSegmentPreamble { get; }
    protected ReadOnlySpan`1<byte> PreambleBytes { get; }
    [NullableAttribute("1")]
public IReadOnlyCollection`1<JpegSegmentType> SegmentTypes { get; }
    public static ReadOnlySpan`1<byte> get_JpegSegmentPreamble();
    protected virtual ReadOnlySpan`1<byte> get_PreambleBytes();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual IReadOnlyCollection`1<JpegSegmentType> get_SegmentTypes();
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("MetadataExtractor.Formats.Jfxx.JfxxReader/<Extract>d__7")]
protected virtual IEnumerable`1<Directory> Extract(Byte[] segmentBytes, int preambleLength);
    [NullableContextAttribute("1")]
public JfxxDirectory Extract(IndexedReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class MetadataExtractor.Formats.Jpeg.HuffmanTable : ValueType {
    private Byte[] _lengthBytes;
    private Byte[] _valueBytes;
    [CompilerGeneratedAttribute]
private int <TableLength>k__BackingField;
    [CompilerGeneratedAttribute]
private HuffmanTableClass <TableClass>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TableDestinationId>k__BackingField;
    public int TableLength { get; }
    public HuffmanTableClass TableClass { get; }
    public int TableDestinationId { get; }
    public Byte[] LengthBytes { get; }
    public Byte[] ValueBytes { get; }
    public HuffmanTable(HuffmanTableClass tableClass, int tableDestinationId, Byte[] lengthBytes, Byte[] valueBytes);
    [CompilerGeneratedAttribute]
public int get_TableLength();
    [CompilerGeneratedAttribute]
public HuffmanTableClass get_TableClass();
    [CompilerGeneratedAttribute]
public int get_TableDestinationId();
    public Byte[] get_LengthBytes();
    public Byte[] get_ValueBytes();
    public bool IsTypical();
    public bool IsOptimized();
    public static HuffmanTableClass TypeOf(int value);
}
public enum MetadataExtractor.Formats.Jpeg.HuffmanTableClass : Enum {
    public int value__;
    public static HuffmanTableClass DC;
    public static HuffmanTableClass AC;
    public static HuffmanTableClass Unknown;
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Jpeg.HuffmanTablesDescriptor : TagDescriptor`1<HuffmanTablesDirectory> {
    [NullableContextAttribute("1")]
public HuffmanTablesDescriptor(HuffmanTablesDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetNumberOfTablesDescription();
}
public class MetadataExtractor.Formats.Jpeg.HuffmanTablesDirectory : Directory {
    public static int TagNumberOfTables;
    [NullableAttribute("1")]
private static Dictionary`2<int, string> _tagNameMap;
    [NullableAttribute("1")]
private List`1<HuffmanTable> _tables;
    public static ReadOnlySpan`1<byte> TypicalLuminanceDcLengths { get; }
    public static ReadOnlySpan`1<byte> TypicalLuminanceDcValues { get; }
    public static ReadOnlySpan`1<byte> TypicalChrominanceDcLengths { get; }
    public static ReadOnlySpan`1<byte> TypicalChrominanceDcValues { get; }
    public static ReadOnlySpan`1<byte> TypicalLuminanceAcLengths { get; }
    public static ReadOnlySpan`1<byte> TypicalLuminanceAcValues { get; }
    public static ReadOnlySpan`1<byte> TypicalChrominanceAcLengths { get; }
    public static ReadOnlySpan`1<byte> TypicalChrominanceAcValues { get; }
    [NullableAttribute("1")]
public string Name { get; }
    private static HuffmanTablesDirectory();
    public static ReadOnlySpan`1<byte> get_TypicalLuminanceDcLengths();
    public static ReadOnlySpan`1<byte> get_TypicalLuminanceDcValues();
    public static ReadOnlySpan`1<byte> get_TypicalChrominanceDcLengths();
    public static ReadOnlySpan`1<byte> get_TypicalChrominanceDcValues();
    public static ReadOnlySpan`1<byte> get_TypicalLuminanceAcLengths();
    public static ReadOnlySpan`1<byte> get_TypicalLuminanceAcValues();
    public static ReadOnlySpan`1<byte> get_TypicalChrominanceAcLengths();
    public static ReadOnlySpan`1<byte> get_TypicalChrominanceAcValues();
    [NullableContextAttribute("1")]
public virtual string get_Name();
    public HuffmanTable GetTable(int tableNumber);
    public int GetNumberOfTables();
    public void AddTable(HuffmanTable table);
    public bool IsTypical();
    public bool IsOptimized();
}
[NullableContextAttribute("1")]
public interface MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader {
    public IReadOnlyCollection`1<JpegSegmentType> SegmentTypes { get; }
    public abstract virtual IReadOnlyCollection`1<JpegSegmentType> get_SegmentTypes();
    public abstract virtual IEnumerable`1<Directory> ReadJpegSegments(IEnumerable`1<JpegSegment> segments);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Jpeg.JpegCommentDescriptor : TagDescriptor`1<JpegCommentDirectory> {
    public JpegCommentDescriptor(JpegCommentDirectory directory);
    [NullableContextAttribute("2")]
public string GetJpegCommentDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Jpeg.JpegCommentDirectory : Directory {
    public static int TagComment;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    public JpegCommentDirectory(StringValue comment);
    private static JpegCommentDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Jpeg.JpegCommentReader : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<JpegSegmentType> <MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.SegmentTypes>k__BackingField;
    private IReadOnlyCollection`1<JpegSegmentType> MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.SegmentTypes { get; }
    [CompilerGeneratedAttribute]
private sealed virtual override IReadOnlyCollection`1<JpegSegmentType> MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.get_SegmentTypes();
    public sealed virtual IEnumerable`1<Directory> ReadJpegSegments(IEnumerable`1<JpegSegment> segments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Jpeg.JpegComponent : object {
    private byte _samplingFactorByte;
    [CompilerGeneratedAttribute]
private byte <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <QuantizationTableNumber>k__BackingField;
    public byte Id { get; }
    public byte QuantizationTableNumber { get; }
    public string Name { get; }
    public int HorizontalSamplingFactor { get; }
    public int VerticalSamplingFactor { get; }
    public JpegComponent(byte componentId, byte samplingFactorByte, byte quantizationTableNumber);
    [CompilerGeneratedAttribute]
public byte get_Id();
    [CompilerGeneratedAttribute]
public byte get_QuantizationTableNumber();
    public string get_Name();
    public int get_HorizontalSamplingFactor();
    public int get_VerticalSamplingFactor();
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Jpeg.JpegDescriptor : TagDescriptor`1<JpegDirectory> {
    [NullableContextAttribute("1")]
public JpegDescriptor(JpegDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetImageCompressionTypeDescription();
    public string GetImageWidthDescription();
    public string GetImageHeightDescription();
    public string GetDataPrecisionDescription();
    public string GetComponentDataDescription(int componentNumber);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Jpeg.JpegDhtReader : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<JpegSegmentType> <MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.SegmentTypes>k__BackingField;
    private IReadOnlyCollection`1<JpegSegmentType> MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.SegmentTypes { get; }
    [CompilerGeneratedAttribute]
private sealed virtual override IReadOnlyCollection`1<JpegSegmentType> MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.get_SegmentTypes();
    public sealed virtual IEnumerable`1<Directory> ReadJpegSegments(IEnumerable`1<JpegSegment> segments);
    public void Extract(SequentialReader reader, HuffmanTablesDirectory directory);
    private static Byte[] GetBytes(SequentialReader reader, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Jpeg.JpegDirectory : Directory {
    public static int TagCompressionType;
    public static int TagDataPrecision;
    public static int TagImageHeight;
    public static int TagImageWidth;
    public static int TagNumberOfComponents;
    public static int TagComponentData1;
    public static int TagComponentData2;
    public static int TagComponentData3;
    public static int TagComponentData4;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static JpegDirectory();
    public virtual string get_Name();
    [NullableContextAttribute("2")]
public JpegComponent GetComponent(int componentNumber);
    public int GetImageWidth();
    public int GetImageHeight();
    public int GetNumberOfComponents();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Jpeg.JpegDnlDescriptor : TagDescriptor`1<JpegDnlDirectory> {
    [NullableContextAttribute("1")]
public JpegDnlDescriptor(JpegDnlDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetImageHeightDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Jpeg.JpegDnlDirectory : Directory {
    public static int TagImageHeight;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static JpegDnlDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Jpeg.JpegDnlReader : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<JpegSegmentType> <MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.SegmentTypes>k__BackingField;
    private IReadOnlyCollection`1<JpegSegmentType> MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.SegmentTypes { get; }
    [CompilerGeneratedAttribute]
private sealed virtual override IReadOnlyCollection`1<JpegSegmentType> MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.get_SegmentTypes();
    public sealed virtual IEnumerable`1<Directory> ReadJpegSegments(IEnumerable`1<JpegSegment> segments);
    public JpegDnlDirectory Extract(SequentialReader reader);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Directory <ReadJpegSegments>b__3_0(JpegSegment segment);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MetadataExtractor.Formats.Jpeg.JpegMetadataReader : object {
    private static ICollection`1<IJpegSegmentMetadataReader> _allReaders;
    public static IEnumerable`1<IJpegSegmentMetadataReader> AllReaders { get; }
    private static JpegMetadataReader();
    [IteratorStateMachineAttribute("MetadataExtractor.Formats.Jpeg.JpegMetadataReader/<get_AllReaders>d__2")]
public static IEnumerable`1<IJpegSegmentMetadataReader> get_AllReaders();
    public static IReadOnlyList`1<Directory> ReadMetadata(Stream stream, ICollection`1<IJpegSegmentMetadataReader> readers);
    public static IReadOnlyList`1<Directory> ReadMetadata(string filePath, ICollection`1<IJpegSegmentMetadataReader> readers);
    public static IReadOnlyList`1<Directory> Process(Stream stream, ICollection`1<IJpegSegmentMetadataReader> readers);
    public static IReadOnlyList`1<Directory> ProcessJpegSegments(IEnumerable`1<IJpegSegmentMetadataReader> readers, ICollection`1<JpegSegment> segments);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Jpeg.JpegProcessingException : ImageProcessingException {
    public JpegProcessingException(string message);
    public JpegProcessingException(string message, Exception innerException);
    public JpegProcessingException(Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Jpeg.JpegReader : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<JpegSegmentType> <MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.SegmentTypes>k__BackingField;
    private IReadOnlyCollection`1<JpegSegmentType> MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.SegmentTypes { get; }
    [CompilerGeneratedAttribute]
private sealed virtual override IReadOnlyCollection`1<JpegSegmentType> MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.get_SegmentTypes();
    public sealed virtual IEnumerable`1<Directory> ReadJpegSegments(IEnumerable`1<JpegSegment> segments);
    public JpegDirectory Extract(JpegSegment segment);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Directory <ReadJpegSegments>b__3_0(JpegSegment segment);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Jpeg.JpegSegment : object {
    [CompilerGeneratedAttribute]
private JpegSegmentType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Bytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Offset>k__BackingField;
    public JpegSegmentType Type { get; }
    public Byte[] Bytes { get; }
    public long Offset { get; }
    [NullableAttribute("0")]
internal ReadOnlySpan`1<byte> Span { get; }
    public JpegSegment(JpegSegmentType type, Byte[] bytes, long offset);
    [CompilerGeneratedAttribute]
public JpegSegmentType get_Type();
    [CompilerGeneratedAttribute]
public Byte[] get_Bytes();
    [CompilerGeneratedAttribute]
public long get_Offset();
    [NullableContextAttribute("0")]
internal ReadOnlySpan`1<byte> get_Span();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MetadataExtractor.Formats.Jpeg.JpegSegmentReader : object {
    public static IReadOnlyList`1<JpegSegment> ReadSegments(string filePath, ICollection`1<JpegSegmentType> segmentTypes);
    [IteratorStateMachineAttribute("MetadataExtractor.Formats.Jpeg.JpegSegmentReader/<ReadSegments>d__1")]
public static IEnumerable`1<JpegSegment> ReadSegments(SequentialReader reader, ICollection`1<JpegSegmentType> segmentTypes);
}
public enum MetadataExtractor.Formats.Jpeg.JpegSegmentType : Enum {
    public byte value__;
    public static JpegSegmentType Tem;
    public static JpegSegmentType Sof0;
    public static JpegSegmentType Sof1;
    public static JpegSegmentType Sof2;
    public static JpegSegmentType Sof3;
    public static JpegSegmentType Dht;
    public static JpegSegmentType Sof5;
    public static JpegSegmentType Sof6;
    public static JpegSegmentType Sof7;
    public static JpegSegmentType Sof9;
    public static JpegSegmentType Sof10;
    public static JpegSegmentType Sof11;
    public static JpegSegmentType Dac;
    public static JpegSegmentType Sof13;
    public static JpegSegmentType Sof14;
    public static JpegSegmentType Sof15;
    public static JpegSegmentType Rst0;
    public static JpegSegmentType Rst1;
    public static JpegSegmentType Rst2;
    public static JpegSegmentType Rst3;
    public static JpegSegmentType Rst4;
    public static JpegSegmentType Rst5;
    public static JpegSegmentType Rst6;
    public static JpegSegmentType Rst7;
    public static JpegSegmentType Soi;
    public static JpegSegmentType Eoi;
    public static JpegSegmentType Sos;
    public static JpegSegmentType Dqt;
    public static JpegSegmentType Dnl;
    public static JpegSegmentType Dri;
    public static JpegSegmentType Dhp;
    public static JpegSegmentType Exp;
    public static JpegSegmentType App0;
    public static JpegSegmentType App1;
    public static JpegSegmentType App2;
    public static JpegSegmentType App3;
    public static JpegSegmentType App4;
    public static JpegSegmentType App5;
    public static JpegSegmentType App6;
    public static JpegSegmentType App7;
    public static JpegSegmentType App8;
    public static JpegSegmentType App9;
    public static JpegSegmentType AppA;
    public static JpegSegmentType AppB;
    public static JpegSegmentType AppC;
    public static JpegSegmentType AppD;
    public static JpegSegmentType AppE;
    public static JpegSegmentType AppF;
    public static JpegSegmentType Com;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MetadataExtractor.Formats.Jpeg.JpegSegmentTypeExtensions : object {
    [CompilerGeneratedAttribute]
private static IReadOnlyList`1<JpegSegmentType> <CanContainMetadataTypes>k__BackingField;
    public static IReadOnlyList`1<JpegSegmentType> CanContainMetadataTypes { get; }
    private static JpegSegmentTypeExtensions();
    [ExtensionAttribute]
public static bool CanContainMetadata(JpegSegmentType type);
    [CompilerGeneratedAttribute]
public static IReadOnlyList`1<JpegSegmentType> get_CanContainMetadataTypes();
    [ExtensionAttribute]
public static bool ContainsPayload(JpegSegmentType type);
    [ExtensionAttribute]
public static bool IsApplicationSpecific(JpegSegmentType type);
}
public abstract class MetadataExtractor.Formats.Jpeg.JpegSegmentWithPreambleMetadataReader : object {
    protected ReadOnlySpan`1<byte> PreambleBytes { get; }
    [NullableAttribute("1")]
public IReadOnlyCollection`1<JpegSegmentType> SegmentTypes { get; }
    protected abstract virtual ReadOnlySpan`1<byte> get_PreambleBytes();
    [NullableContextAttribute("1")]
public abstract virtual IReadOnlyCollection`1<JpegSegmentType> get_SegmentTypes();
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<Directory> ReadJpegSegments(IEnumerable`1<JpegSegment> segments);
    [NullableContextAttribute("1")]
protected abstract virtual IEnumerable`1<Directory> Extract(Byte[] segmentBytes, int preambleLength);
    [CompilerGeneratedAttribute]
private bool <ReadJpegSegments>b__4_0(JpegSegment segment);
    [CompilerGeneratedAttribute]
private IEnumerable`1<Directory> <ReadJpegSegments>b__4_1(JpegSegment segment);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Mpeg.Mp3Descriptor : TagDescriptor`1<Mp3Directory> {
    public Mp3Descriptor(Mp3Directory directory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Mpeg.Mp3Directory : Directory {
    public static int TagId;
    public static int TagLayer;
    public static int TagBitrate;
    public static int TagFrequency;
    public static int TagMode;
    public static int TagEmphasis;
    public static int TagCopyright;
    public static int TagFrameSize;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static Mp3Directory();
    public virtual string get_Name();
}
public static class MetadataExtractor.Formats.Mpeg.Mp3MetadataReader : object {
    [NullableContextAttribute("1")]
public static IReadOnlyList`1<Directory> ReadMetadata(Stream stream);
}
public class MetadataExtractor.Formats.Mpeg.Mp3Reader : object {
    [NullableContextAttribute("1")]
public Directory Extract(SequentialReader reader);
    private static int SetBitrate(int bitrate, int layer, int id);
}
internal class MetadataExtractor.Formats.Mpeg.MpegAudioTypeChecker : object {
    public int ByteCount { get; }
    public sealed virtual int get_ByteCount();
    [NullableContextAttribute("1")]
public sealed virtual FileType CheckType(Byte[] bytes);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Netpbm.NetpbmHeaderDescriptor : TagDescriptor`1<NetpbmHeaderDirectory> {
    [NullableContextAttribute("1")]
public NetpbmHeaderDescriptor(NetpbmHeaderDirectory directory);
    public virtual string GetDescription(int tagType);
    private string GetFormatTypeDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Netpbm.NetpbmHeaderDirectory : Directory {
    public static int TagFormatType;
    public static int TagWidth;
    public static int TagHeight;
    public static int TagMaximumValue;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static NetpbmHeaderDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MetadataExtractor.Formats.Netpbm.NetpbmMetadataReader : object {
    public static IReadOnlyList`1<Directory> ReadMetadata(string filePath);
    public static NetpbmHeaderDirectory ReadMetadata(Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Netpbm.NetpbmReader : object {
    public NetpbmHeaderDirectory Extract(Stream stream);
    [IteratorStateMachineAttribute("MetadataExtractor.Formats.Netpbm.NetpbmReader/<ReadWords>d__1")]
private static IEnumerable`1<string> ReadWords(TextReader reader);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Pcx.PcxDescriptor : TagDescriptor`1<PcxDirectory> {
    [NullableContextAttribute("1")]
public PcxDescriptor(PcxDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetVersionDescription();
    public string GetColorPlanesDescription();
    public string GetPaletteTypeDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Pcx.PcxDirectory : Directory {
    public static int TagVersion;
    public static int TagBitsPerPixel;
    public static int TagXMin;
    public static int TagYMin;
    public static int TagXMax;
    public static int TagYMax;
    public static int TagHorizontalDpi;
    public static int TagVerticalDpi;
    public static int TagPalette;
    public static int TagColorPlanes;
    public static int TagBytesPerLine;
    public static int TagPaletteType;
    public static int TagHScrSize;
    public static int TagVScrSize;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static PcxDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MetadataExtractor.Formats.Pcx.PcxMetadataReader : object {
    public static IReadOnlyList`1<Directory> ReadMetadata(string filePath);
    public static PcxDirectory ReadMetadata(Stream stream);
}
public class MetadataExtractor.Formats.Pcx.PcxReader : object {
    [NullableContextAttribute("1")]
public PcxDirectory Extract(SequentialReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Photoshop.DuckyDirectory : Directory {
    public static int TagQuality;
    public static int TagComment;
    public static int TagCopyright;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static DuckyDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Photoshop.DuckyReader : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<JpegSegmentType> <MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.SegmentTypes>k__BackingField;
    [NullableAttribute("0")]
public static ReadOnlySpan`1<byte> JpegSegmentPreamble { get; }
    private IReadOnlyCollection`1<JpegSegmentType> MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.SegmentTypes { get; }
    [NullableContextAttribute("0")]
public static ReadOnlySpan`1<byte> get_JpegSegmentPreamble();
    [CompilerGeneratedAttribute]
private sealed virtual override IReadOnlyCollection`1<JpegSegmentType> MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.get_SegmentTypes();
    public sealed virtual IEnumerable`1<Directory> ReadJpegSegments(IEnumerable`1<JpegSegment> segments);
    public DuckyDirectory Extract(SequentialReader reader);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Directory <ReadJpegSegments>b__5_1(JpegSegment segment);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class MetadataExtractor.Formats.Photoshop.Knot : object {
    private Double[] _points;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public double Item { get; public set; }
    public string Type { get; }
    public Knot(string type);
    public double get_Item(int index);
    public void set_Item(int index, double value);
    [CompilerGeneratedAttribute]
public string get_Type();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Photoshop.PhotoshopDescriptor : TagDescriptor`1<PhotoshopDirectory> {
    [NullableContextAttribute("1")]
public PhotoshopDescriptor(PhotoshopDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetJpegQualityString();
    public string GetPixelAspectRatioString();
    public string GetPrintScaleDescription();
    public string GetResolutionInfoDescription();
    public string GetVersionDescription();
    public string GetSlicesDescription();
    public string GetThumbnailDescription(int tagType);
    private string GetBooleanString(int tag);
    private string Get32BitNumberString(int tag);
    private string GetSimpleString(int tagType);
    private string GetBinaryDataString(int tagType);
    private string GetClippingPathNameString(int tagType);
    public string GetPathString(int tagType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Photoshop.PhotoshopDirectory : Directory {
    public static int TagChannelsRowsColumnsDepthMode;
    public static int TagMacPrintInfo;
    public static int TagXml;
    public static int TagIndexedColorTable;
    public static int TagResolutionInfo;
    public static int TagAlphaChannels;
    public static int TagDisplayInfoObsolete;
    public static int TagCaption;
    public static int TagBorderInformation;
    public static int TagBackgroundColor;
    public static int TagPrintFlags;
    public static int TagGrayscaleAndMultichannelHalftoningInformation;
    public static int TagColorHalftoningInformation;
    public static int TagDuotoneHalftoningInformation;
    public static int TagGrayscaleAndMultichannelTransferFunction;
    public static int TagColorTransferFunctions;
    public static int TagDuotoneTransferFunctions;
    public static int TagDuotoneImageInformation;
    public static int TagEffectiveBlackAndWhiteValues;
    public static int TagEpsOptions;
    public static int TagQuickMaskInformation;
    public static int TagLayerStateInformation;
    public static int TagLayersGroupInformation;
    public static int TagIptc;
    public static int TagImageModeForRawFormatFiles;
    public static int TagJpegQuality;
    public static int TagGridAndGuidesInformation;
    public static int TagThumbnailOld;
    public static int TagCopyright;
    public static int TagUrl;
    public static int TagThumbnail;
    public static int TagGlobalAngle;
    public static int TagIccProfileBytes;
    public static int TagWatermark;
    public static int TagIccUntaggedProfile;
    public static int TagEffectsVisible;
    public static int TagSpotHalftone;
    public static int TagSeedNumber;
    public static int TagUnicodeAlphaNames;
    public static int TagIndexedColorTableCount;
    public static int TagTransparencyIndex;
    public static int TagGlobalAltitude;
    public static int TagSlices;
    public static int TagWorkflowUrl;
    public static int TagJumpToXpep;
    public static int TagAlphaIdentifiers;
    public static int TagUrlList;
    public static int TagVersion;
    public static int TagExifData1;
    public static int TagExifData3;
    public static int TagXmpData;
    public static int TagCaptionDigest;
    public static int TagPrintScale;
    public static int TagPixelAspectRatio;
    public static int TagLayerComps;
    public static int TagAlternateDuotoneColors;
    public static int TagAlternateSpotColors;
    public static int TagLayerSelectionIds;
    public static int TagHdrToningInfo;
    public static int TagPrintInfo;
    public static int TagLayerGroupsEnabledId;
    public static int TagColorSamplers;
    public static int TagMeasurementScale;
    public static int TagTimelineInformation;
    public static int TagSheetDisclosure;
    public static int TagDisplayInfo;
    public static int TagOnionSkins;
    public static int TagCountInformation;
    public static int TagPrintInfo2;
    public static int TagPrintStyle;
    public static int TagMacNsprintinfo;
    public static int TagWinDevmode;
    public static int TagAutoSaveFilePath;
    public static int TagAutoSaveFormat;
    public static int TagPathSelectionState;
    public static int TagClippingPathBlockStart;
    public static int TagClippingPathBlockEnd;
    public static int TagClippingPathName;
    public static int TagOriginPathInfo;
    public static int TagImageReadyVariablesXml;
    public static int TagImageReadyDataSets;
    public static int TagImageReadySelectedState;
    public static int TagImageReady7Rollover;
    public static int TagImageReadyRollover;
    public static int TagImageReadySaveLayerSettings;
    public static int TagImageReadyVersion;
    public static int TagLightroomWorkflow;
    public static int TagPrintFlagsInfo;
    internal static Dictionary`2<int, string> TagNameMap;
    public string Name { get; }
    private static PhotoshopDirectory();
    public virtual string get_Name();
    [NullableContextAttribute("2")]
public Byte[] GetThumbnailBytes();
}
public class MetadataExtractor.Formats.Photoshop.PhotoshopReader : JpegSegmentWithPreambleMetadataReader {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IReadOnlyCollection`1<JpegSegmentType> <SegmentTypes>k__BackingField;
    public static ReadOnlySpan`1<byte> JpegSegmentPreamble { get; }
    protected ReadOnlySpan`1<byte> PreambleBytes { get; }
    [NullableAttribute("1")]
public IReadOnlyCollection`1<JpegSegmentType> SegmentTypes { get; }
    public static ReadOnlySpan`1<byte> get_JpegSegmentPreamble();
    protected virtual ReadOnlySpan`1<byte> get_PreambleBytes();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual IReadOnlyCollection`1<JpegSegmentType> get_SegmentTypes();
    [NullableContextAttribute("1")]
protected virtual IEnumerable`1<Directory> Extract(Byte[] segmentBytes, int preambleLength);
    [NullableContextAttribute("1")]
public IReadOnlyList`1<Directory> Extract(SequentialReader reader, int length);
}
public class MetadataExtractor.Formats.Photoshop.PhotoshopTiffHandler : ExifTiffHandler {
    private static int TagXmp;
    private static int TagPhotoshopImageResources;
    private static int TagIccProfiles;
    [NullableContextAttribute("1")]
public PhotoshopTiffHandler(List`1<Directory> directories);
    public virtual bool CustomProcessTag(TiffReaderContext& modreq(System.Runtime.InteropServices.InAttribute) context, int tagId, int valueOffset, int byteCount);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Photoshop.PsdHeaderDescriptor : TagDescriptor`1<PsdHeaderDirectory> {
    [NullableContextAttribute("1")]
public PsdHeaderDescriptor(PsdHeaderDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetChannelCountDescription();
    public string GetBitsPerChannelDescription();
    public string GetColorModeDescription();
    public string GetImageHeightDescription();
    public string GetImageWidthDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Photoshop.PsdHeaderDirectory : Directory {
    public static int TagChannelCount;
    public static int TagImageHeight;
    public static int TagImageWidth;
    public static int TagBitsPerChannel;
    public static int TagColorMode;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static PsdHeaderDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MetadataExtractor.Formats.Photoshop.PsdMetadataReader : object {
    public static IReadOnlyList`1<Directory> ReadMetadata(string filePath);
    public static IReadOnlyList`1<Directory> ReadMetadata(Stream stream);
}
public class MetadataExtractor.Formats.Photoshop.PsdReader : object {
    [NullableContextAttribute("1")]
public IReadOnlyList`1<Directory> Extract(SequentialReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Photoshop.Subpath : object {
    private List`1<Knot> _knots;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public int KnotCount { get; }
    public IEnumerable`1<Knot> Knots { get; }
    public string Type { get; }
    public Subpath(string type);
    public void Add(Knot knot);
    public int get_KnotCount();
    public IEnumerable`1<Knot> get_Knots();
    [CompilerGeneratedAttribute]
public string get_Type();
}
public class MetadataExtractor.Formats.Png.PngChromaticities : object {
    [CompilerGeneratedAttribute]
private int <WhitePointX>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WhitePointY>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RedX>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RedY>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GreenX>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GreenY>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BlueX>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BlueY>k__BackingField;
    public int WhitePointX { get; }
    public int WhitePointY { get; }
    public int RedX { get; }
    public int RedY { get; }
    public int GreenX { get; }
    public int GreenY { get; }
    public int BlueX { get; }
    public int BlueY { get; }
    [NullableContextAttribute("1")]
public PngChromaticities(Byte[] bytes);
    [CompilerGeneratedAttribute]
public int get_WhitePointX();
    [CompilerGeneratedAttribute]
public int get_WhitePointY();
    [CompilerGeneratedAttribute]
public int get_RedX();
    [CompilerGeneratedAttribute]
public int get_RedY();
    [CompilerGeneratedAttribute]
public int get_GreenX();
    [CompilerGeneratedAttribute]
public int get_GreenY();
    [CompilerGeneratedAttribute]
public int get_BlueX();
    [CompilerGeneratedAttribute]
public int get_BlueY();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Png.PngChromaticitiesDirectory : Directory {
    public static int TagWhitePointX;
    public static int TagWhitePointY;
    public static int TagRedX;
    public static int TagRedY;
    public static int TagGreenX;
    public static int TagGreenY;
    public static int TagBlueX;
    public static int TagBlueY;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static PngChromaticitiesDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Png.PngChunk : object {
    [CompilerGeneratedAttribute]
private PngChunkType <ChunkType>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Bytes>k__BackingField;
    public PngChunkType ChunkType { get; }
    public Byte[] Bytes { get; }
    public PngChunk(PngChunkType chunkType, Byte[] bytes);
    [CompilerGeneratedAttribute]
public PngChunkType get_ChunkType();
    [CompilerGeneratedAttribute]
public Byte[] get_Bytes();
}
public class MetadataExtractor.Formats.Png.PngChunkReader : object {
    private static ReadOnlySpan`1<byte> PngSignatureBytes { get; }
    private static ReadOnlySpan`1<byte> get_PngSignatureBytes();
    [NullableContextAttribute("1")]
public IEnumerable`1<PngChunk> Extract(SequentialReader reader, ICollection`1<PngChunkType> desiredChunkTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class MetadataExtractor.Formats.Png.PngChunkType : ValueType {
    private static HashSet`1<string> _identifiersAllowingMultiples;
    public static PngChunkType IHDR;
    public static PngChunkType PLTE;
    public static PngChunkType IDAT;
    public static PngChunkType IEND;
    public static PngChunkType cHRM;
    public static PngChunkType gAMA;
    public static PngChunkType iCCP;
    public static PngChunkType sBIT;
    public static PngChunkType sRGB;
    public static PngChunkType bKGD;
    public static PngChunkType hIST;
    public static PngChunkType tRNS;
    public static PngChunkType pHYs;
    public static PngChunkType sPLT;
    public static PngChunkType tIME;
    public static PngChunkType iTXt;
    public static PngChunkType tEXt;
    public static PngChunkType zTXt;
    public static PngChunkType eXIf;
    private Byte[] _bytes;
    [CompilerGeneratedAttribute]
private bool <AreMultipleAllowed>k__BackingField;
    public bool IsCritical { get; }
    public bool IsAncillary { get; }
    public bool IsPrivate { get; }
    public bool IsSafeToCopy { get; }
    public bool AreMultipleAllowed { get; }
    public string Identifier { get; }
    public PngChunkType(string identifier, bool multipleAllowed);
    public PngChunkType(Byte[] bytes);
    private static PngChunkType();
    private static void ValidateBytes(Byte[] bytes);
    public bool get_IsCritical();
    public bool get_IsAncillary();
    public bool get_IsPrivate();
    public bool get_IsSafeToCopy();
    [CompilerGeneratedAttribute]
public bool get_AreMultipleAllowed();
    private static bool IsLowerCase(byte b);
    private static bool IsUpperCase(byte b);
    private static bool IsValidByte(byte b);
    public string get_Identifier();
    public virtual string ToString();
    public sealed virtual bool Equals(PngChunkType other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(PngChunkType left, PngChunkType right);
    public static bool op_Inequality(PngChunkType left, PngChunkType right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Png.PngColorType : object {
    public static PngColorType Greyscale;
    public static PngColorType TrueColor;
    public static PngColorType IndexedColor;
    public static PngColorType GreyscaleWithAlpha;
    public static PngColorType TrueColorWithAlpha;
    private static PngColorType[] _colorTypes;
    [CompilerGeneratedAttribute]
private int <NumericValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <AllowedBitDepths>k__BackingField;
    public int NumericValue { get; }
    public string Description { get; }
    public Int32[] AllowedBitDepths { get; }
    private PngColorType(int numericValue, string description, Int32[] allowedBitDepths);
    private static PngColorType();
    public static PngColorType FromNumericValue(int numericValue);
    [CompilerGeneratedAttribute]
public int get_NumericValue();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public Int32[] get_AllowedBitDepths();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Png.PngDescriptor : TagDescriptor`1<PngDirectory> {
    [NullableContextAttribute("1")]
public PngDescriptor(PngDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetColorTypeDescription();
    public string GetCompressionTypeDescription();
    public string GetFilterMethodDescription();
    public string GetInterlaceMethodDescription();
    public string GetPaletteHasTransparencyDescription();
    public string GetIsSrgbColorSpaceDescription();
    public string GetUnitSpecifierDescription();
    public string GetLastModificationTimeDescription();
    public string GetTextualDataDescription();
    public string GetBackgroundColorDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Png.PngDirectory : Directory {
    public static int TagImageWidth;
    public static int TagImageHeight;
    public static int TagBitsPerSample;
    public static int TagColorType;
    public static int TagCompressionType;
    public static int TagFilterMethod;
    public static int TagInterlaceMethod;
    public static int TagPaletteSize;
    public static int TagPaletteHasTransparency;
    public static int TagSrgbRenderingIntent;
    public static int TagGamma;
    public static int TagIccProfileName;
    public static int TagTextualData;
    public static int TagLastModificationTime;
    public static int TagBackgroundColor;
    public static int TagPixelsPerUnitX;
    public static int TagPixelsPerUnitY;
    public static int TagUnitSpecifier;
    public static int TagSignificantBits;
    private static Dictionary`2<int, string> _tagNameMap;
    private PngChunkType _pngChunkType;
    public string Name { get; }
    public PngDirectory(PngChunkType pngChunkType);
    private static PngDirectory();
    public PngChunkType GetPngChunkType();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Png.PngHeader : object {
    [CompilerGeneratedAttribute]
private int <ImageWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ImageHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <BitsPerSample>k__BackingField;
    [CompilerGeneratedAttribute]
private PngColorType <ColorType>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <CompressionType>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <FilterMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <InterlaceMethod>k__BackingField;
    public int ImageWidth { get; }
    public int ImageHeight { get; }
    public byte BitsPerSample { get; }
    public PngColorType ColorType { get; }
    public byte CompressionType { get; }
    public byte FilterMethod { get; }
    public byte InterlaceMethod { get; }
    public PngHeader(Byte[] bytes);
    [CompilerGeneratedAttribute]
public int get_ImageWidth();
    [CompilerGeneratedAttribute]
public int get_ImageHeight();
    [CompilerGeneratedAttribute]
public byte get_BitsPerSample();
    [CompilerGeneratedAttribute]
public PngColorType get_ColorType();
    [CompilerGeneratedAttribute]
public byte get_CompressionType();
    [CompilerGeneratedAttribute]
public byte get_FilterMethod();
    [CompilerGeneratedAttribute]
public byte get_InterlaceMethod();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MetadataExtractor.Formats.Png.PngMetadataReader : object {
    private static HashSet`1<PngChunkType> _desiredChunkTypes;
    private static Encoding _latin1Encoding;
    private static PngMetadataReader();
    public static IReadOnlyList`1<Directory> ReadMetadata(string filePath);
    public static IReadOnlyList`1<Directory> ReadMetadata(Stream stream);
    [IteratorStateMachineAttribute("MetadataExtractor.Formats.Png.PngMetadataReader/<ProcessChunk>d__4")]
private static IEnumerable`1<Directory> ProcessChunk(PngChunk chunk);
    [NullableContextAttribute("2")]
private static bool TryDeflate(Byte[] bytes, int bytesLeft, Byte[]& textBytes, String& errorMessage);
    [CompilerGeneratedAttribute]
internal static PngDirectory <ProcessChunk>g__ReadTextDirectory|4_1(string keyword, Byte[] textBytes, PngChunkType pngChunkType);
    [CompilerGeneratedAttribute]
internal static bool <ProcessChunk>g__TryProcessRawProfile|4_2(Int32& byteCount, <>c__DisplayClass4_1& );
    [CompilerGeneratedAttribute]
internal static int <ProcessChunk>g__ParseHexNibble|4_3(int h);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Png.PngProcessingException : ImageProcessingException {
    public PngProcessingException(string message);
    public PngProcessingException(string message, Exception innerException);
    public PngProcessingException(Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.QuickTime.AtomCallbackArgs : object {
    [CompilerGeneratedAttribute]
private UInt32 <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private SequentialStreamReader <Reader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public UInt32 Type { get; }
    public long Size { get; }
    public Stream Stream { get; }
    public long StartPosition { get; }
    public SequentialStreamReader Reader { get; }
    public bool Cancel { get; public set; }
    public string TypeString { get; }
    public long BytesLeft { get; }
    public AtomCallbackArgs(UInt32 type, long size, Stream stream, long startPosition, SequentialStreamReader reader);
    [CompilerGeneratedAttribute]
public UInt32 get_Type();
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public Stream get_Stream();
    [CompilerGeneratedAttribute]
public long get_StartPosition();
    [CompilerGeneratedAttribute]
public SequentialStreamReader get_Reader();
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
    public string get_TypeString();
    public long get_BytesLeft();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.QuickTime.QuickTimeFileTypeDescriptor : TagDescriptor`1<QuickTimeFileTypeDirectory> {
    [NullableContextAttribute("1")]
public QuickTimeFileTypeDescriptor(QuickTimeFileTypeDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetCompatibleBrandsDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.QuickTime.QuickTimeFileTypeDirectory : Directory {
    public static int TagMajorBrand;
    public static int TagMinorVersion;
    public static int TagCompatibleBrands;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static QuickTimeFileTypeDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.QuickTime.QuickTimeMetadataHeaderDescriptor : TagDescriptor`1<QuickTimeMetadataHeaderDirectory> {
    [NullableContextAttribute("1")]
public QuickTimeMetadataHeaderDescriptor(QuickTimeMetadataHeaderDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetArtworkDescription();
    public string GetLocationRoleDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.QuickTime.QuickTimeMetadataHeaderDirectory : Directory {
    public static int TagAlbum;
    public static int TagArtist;
    public static int TagArtwork;
    public static int TagAuthor;
    public static int TagComment;
    public static int TagCopyright;
    public static int TagCreationDate;
    public static int TagDescription;
    public static int TagDirector;
    public static int TagTitle;
    public static int TagGenre;
    public static int TagInformation;
    public static int TagKeywords;
    public static int TagGpsLocation;
    public static int TagProducer;
    public static int TagPublisher;
    public static int TagSoftware;
    public static int TagYear;
    public static int TagCollection;
    public static int TagRating;
    public static int TagMake;
    public static int TagModel;
    public static int TagLocationName;
    public static int TagLocationBody;
    public static int TagLocationNote;
    public static int TagLocationRole;
    public static int TagLocationDate;
    public static int TagDirectionFacing;
    public static int TagDirectionMotion;
    public static int TagDisplayName;
    public static int TagContentIdentifier;
    public static int TagOriginatingSignature;
    public static int TagPixelDensity;
    public static int TagAndroidVersion;
    public static int TagAndroidManufacturer;
    public static int TagAndroidModel;
    private static Dictionary`2<int, string> _tagNameMap;
    private static Dictionary`2<string, int> _nameTagMap;
    public string Name { get; }
    private static QuickTimeMetadataHeaderDirectory();
    public virtual string get_Name();
    public static bool TryGetTag(string name, Int32& tagType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MetadataExtractor.Formats.QuickTime.QuickTimeMetadataReader : object {
    private static DateTime _epoch;
    private static Int32[] _supportedAtomValueTypes;
    private static QuickTimeMetadataReader();
    public static IReadOnlyList`1<Directory> ReadMetadata(Stream stream);
    [CompilerGeneratedAttribute]
internal static void <ReadMetadata>g__SetRotation|2_2(QuickTimeTrackHeaderDirectory directory);
    [CompilerGeneratedAttribute]
internal static double <ReadMetadata>g__RadiansToDegrees|2_8(double radians);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.QuickTime.QuickTimeMovieHeaderDirectory : Directory {
    public static int TagVersion;
    public static int TagFlags;
    public static int TagCreated;
    public static int TagModified;
    public static int TagTimeScale;
    public static int TagDuration;
    public static int TagPreferredRate;
    public static int TagPreferredVolume;
    public static int TagMatrix;
    public static int TagPreviewTime;
    public static int TagPreviewDuration;
    public static int TagPosterTime;
    public static int TagSelectionTime;
    public static int TagSelectionDuration;
    public static int TagCurrentTime;
    public static int TagNextTrackId;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static QuickTimeMovieHeaderDirectory();
    public virtual string get_Name();
}
public static class MetadataExtractor.Formats.QuickTime.QuickTimeReader : object {
    [NullableContextAttribute("1")]
public static void ProcessAtoms(Stream stream, Action`1<AtomCallbackArgs> handler, long stopByBytes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MetadataExtractor.Formats.QuickTime.QuickTimeReaderExtensions : object {
    [ExtensionAttribute]
public static string Get4ccString(SequentialReader reader);
    [ExtensionAttribute]
public static decimal Get16BitFixedPoint(SequentialReader reader);
    [ExtensionAttribute]
public static decimal Get32BitFixedPoint(SequentialReader reader);
    [ExtensionAttribute]
private static decimal GetS32BitFixedPoint(SequentialReader reader);
    [ExtensionAttribute]
public static Single[] GetMatrix(SequentialReader reader);
}
public class MetadataExtractor.Formats.QuickTime.QuickTimeTiffHandler`1 : ExifTiffHandler {
    [NullableContextAttribute("1")]
public QuickTimeTiffHandler`1(List`1<Directory> directories);
    public virtual TiffStandard ProcessTiffMarker(ushort marker);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.QuickTime.QuickTimeTrackHeaderDirectory : Directory {
    public static int TagVersion;
    public static int TagFlags;
    public static int TagCreated;
    public static int TagModified;
    public static int TagTrackId;
    public static int TagDuration;
    public static int TagLayer;
    public static int TagAlternateGroup;
    public static int TagVolume;
    public static int TagWidth;
    public static int TagHeight;
    public static int TagMatrix;
    public static int TagRotation;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static QuickTimeTrackHeaderDirectory();
    public virtual string get_Name();
}
internal class MetadataExtractor.Formats.QuickTime.QuickTimeTypeChecker : object {
    [NullableAttribute("1")]
private static ByteTrie`1<FileType> _ftypTrie;
    private static ReadOnlySpan`1<byte> FtypBytes { get; }
    public int ByteCount { get; }
    private static QuickTimeTypeChecker();
    private static ReadOnlySpan`1<byte> get_FtypBytes();
    public sealed virtual int get_ByteCount();
    [NullableContextAttribute("1")]
public sealed virtual FileType CheckType(Byte[] bytes);
}
public static class MetadataExtractor.Formats.Raf.RafMetadataReader : object {
    [NullableContextAttribute("1")]
public static IReadOnlyList`1<Directory> ReadMetadata(Stream stream);
}
[NullableContextAttribute("1")]
public interface MetadataExtractor.Formats.Riff.IRiffChunkHandler {
    public abstract virtual void ProcessChunk(string fourCc, Byte[] payload);
}
[NullableContextAttribute("1")]
public interface MetadataExtractor.Formats.Riff.IRiffHandler {
    [NullableContextAttribute("0")]
public abstract virtual bool ShouldAcceptRiffIdentifier(ReadOnlySpan`1<byte> identifier);
    public abstract virtual bool ShouldAcceptChunk(string fourCc);
    [NullableContextAttribute("0")]
public abstract virtual bool ShouldAcceptList(ReadOnlySpan`1<byte> fourCc);
    public abstract virtual void ProcessChunk(string fourCc, Byte[] payload);
    public abstract virtual void AddError(string errorMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MetadataExtractor.Formats.Riff.RiffChunkHandler`1 : object {
    private List`1<Directory> _directories;
    protected int MinSize { get; }
    public RiffChunkHandler`1(List`1<Directory> directories);
    public sealed virtual void ProcessChunk(string fourCc, Byte[] payload);
    protected abstract virtual int get_MinSize();
    protected abstract virtual void Populate(T directory, Byte[] payload);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MetadataExtractor.Formats.Riff.RiffHandler : object {
    private List`1<Directory> _directories;
    private Dictionary`2<string, Func`2<List`1<Directory>, IRiffChunkHandler>> _handlers;
    protected RiffHandler(List`1<Directory> directories, Dictionary`2<string, Func`2<List`1<Directory>, IRiffChunkHandler>> handlers);
    public sealed virtual void ProcessChunk(string fourCc, Byte[] payload);
    public sealed virtual bool ShouldAcceptChunk(string fourCc);
    [NullableContextAttribute("0")]
public abstract virtual bool ShouldAcceptRiffIdentifier(ReadOnlySpan`1<byte> identifier);
    [NullableContextAttribute("0")]
public abstract virtual bool ShouldAcceptList(ReadOnlySpan`1<byte> fourCc);
    public sealed virtual void AddError(string errorMessage);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Riff.RiffProcessingException : ImageProcessingException {
    public RiffProcessingException(string message);
    public RiffProcessingException(string message, Exception innerException);
    public RiffProcessingException(Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Riff.RiffReader : object {
    public void ProcessRiff(SequentialReader reader, IRiffHandler handler);
    private static void ProcessChunks(SequentialReader reader, long maxPosition, IRiffHandler handler);
}
internal class MetadataExtractor.Formats.Riff.RiffTypeChecker : object {
    public int ByteCount { get; }
    public sealed virtual int get_ByteCount();
    [NullableContextAttribute("1")]
public sealed virtual FileType CheckType(Byte[] bytes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Tga.TgaDeveloperDirectory : Directory {
    public string Name { get; }
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class MetadataExtractor.Formats.Tga.TgaDeveloperReader : TgaDirectoryReader`1<TgaDeveloperDirectory> {
    protected virtual void Populate(Stream stream, int offset, TgaDeveloperDirectory directory);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class MetadataExtractor.Formats.Tga.TgaDirectoryReader`1 : TgaReader`1<TDirectory> {
    protected sealed virtual TDirectory Extract(Stream stream, int offset);
    protected abstract virtual void Populate(Stream stream, int offset, TDirectory directory);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Tga.TgaExtensionDescriptor : TagDescriptor`1<TgaExtensionDirectory> {
    [NullableContextAttribute("1")]
public TgaExtensionDescriptor(TgaExtensionDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetAttributesTypeDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Tga.TgaExtensionDirectory : Directory {
    public static int TagAuthorName;
    public static int TagComments;
    public static int TagDateTime;
    public static int TagJobName;
    public static int TagJobTime;
    public static int TagSoftwareName;
    public static int TagSoftwareVersion;
    public static int TagKeyColor;
    public static int TagAspectRatio;
    public static int TagGamma;
    public static int TagColorCorrectionOffset;
    public static int TagThumbnailOffset;
    public static int TagScanLineOffset;
    public static int TagAttributesType;
    private static String[] _tagNames;
    public string Name { get; }
    private static TgaExtensionDirectory();
    public virtual string get_Name();
    [NullableContextAttribute("2")]
protected virtual bool TryGetTagName(int tagType, String& tagName);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class MetadataExtractor.Formats.Tga.TgaExtensionReader : TgaDirectoryReader`1<TgaExtensionDirectory> {
    private static int ExtensionSize;
    protected virtual void Populate(Stream stream, int offset, TgaExtensionDirectory directory);
    [CompilerGeneratedAttribute]
internal static string <Populate>g__GetString|1_0(int length, <>c__DisplayClass1_0& );
    [CompilerGeneratedAttribute]
internal static bool <Populate>g__TryGetDateTime|1_1(DateTime& dateTime, <>c__DisplayClass1_0& );
    [CompilerGeneratedAttribute]
internal static bool <Populate>g__TryGetTimeSpan|1_2(TimeSpan& timeSpan, <>c__DisplayClass1_0& );
    [CompilerGeneratedAttribute]
internal static string <Populate>g__GetSoftwareVersion|1_3(string softwareName, <>c__DisplayClass1_0& );
    [CompilerGeneratedAttribute]
internal static bool <Populate>g__TryGetRational|1_4(Rational& value, <>c__DisplayClass1_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class MetadataExtractor.Formats.Tga.TgaFooter : ValueType {
    [CompilerGeneratedAttribute]
private int <ExtOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DevOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Signature>k__BackingField;
    public int ExtOffset { get; }
    public int DevOffset { get; }
    public Byte[] Signature { get; }
    public TgaFooter(int extOffset, int devOffset, Byte[] signature);
    [CompilerGeneratedAttribute]
public int get_ExtOffset();
    [CompilerGeneratedAttribute]
public int get_DevOffset();
    [CompilerGeneratedAttribute]
public Byte[] get_Signature();
}
internal class MetadataExtractor.Formats.Tga.TgaFooterReader : TgaReader`1<TgaFooter> {
    private static int FooterSize;
    private static ReadOnlySpan`1<byte> FooterSignature { get; }
    private static ReadOnlySpan`1<byte> get_FooterSignature();
    [NullableContextAttribute("1")]
public bool TryGetOffsets(Stream stream, Int32& extOffset, Int32& devOffset);
    [NullableContextAttribute("1")]
protected virtual TgaFooter Extract(Stream stream, int offset);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Tga.TgaHeaderDescriptor : TagDescriptor`1<TgaHeaderDirectory> {
    [NullableContextAttribute("1")]
public TgaHeaderDescriptor(TgaHeaderDirectory directory);
    public virtual string GetDescription(int tagType);
    public string GetColormapTypeDescription();
    public string GetDataTypeDescription();
    public string GetHorizontalOrderDescription();
    public string GetVerticalOrderDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Tga.TgaHeaderDirectory : Directory {
    public static int TagIdLength;
    public static int TagDataType;
    public static int TagColormapType;
    public static int TagColormapOrigin;
    public static int TagColormapLength;
    public static int TagColormapDepth;
    public static int TagXOrigin;
    public static int TagYOrigin;
    public static int TagImageWidth;
    public static int TagImageHeight;
    public static int TagImageDepth;
    public static int TagAttributeBitsPerPixel;
    public static int TagHorizontalOrder;
    public static int TagVerticalOrder;
    public static int TagId;
    public static int TagColormap;
    private static String[] _tagNames;
    public string Name { get; }
    private static TgaHeaderDirectory();
    public virtual string get_Name();
    [NullableContextAttribute("2")]
protected virtual bool TryGetTagName(int tagType, String& tagName);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class MetadataExtractor.Formats.Tga.TgaHeaderReader : TgaDirectoryReader`1<TgaHeaderDirectory> {
    public static int HeaderSize;
    public static bool TryExtract(Byte[] buffer, TgaHeaderDirectory& directory);
    protected virtual void Populate(Stream stream, int offset, TgaHeaderDirectory directory);
    private static bool PopulateHeader(IndexedReader reader, TgaHeaderDirectory directory, Int32& idLength, ColormapInfo& colormap);
    [CompilerGeneratedAttribute]
internal static byte <PopulateHeader>g__SetDataType|4_0(<>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static byte <PopulateHeader>g__SetDataTypeMapped|4_5(<>c__DisplayClass4_0& , <>c__DisplayClass4_1& );
    [CompilerGeneratedAttribute]
internal static byte <PopulateHeader>g__SetDataTypeTrueColor|4_6(<>c__DisplayClass4_0& , <>c__DisplayClass4_1& );
    [CompilerGeneratedAttribute]
internal static byte <PopulateHeader>g__SetDataTypeGrayscale|4_7(<>c__DisplayClass4_0& , <>c__DisplayClass4_1& );
    [CompilerGeneratedAttribute]
internal static ColormapInfo <PopulateHeader>g__SetColormapInfo|4_1(<>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static ColormapInfo <PopulateHeader>g__SetColormapNotIncluded|4_8(<>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static ColormapInfo <PopulateHeader>g__SetColormapIncluded|4_9(<>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static void <PopulateHeader>g__SetGeometry|4_2(<>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static byte <PopulateHeader>g__SetDepth|4_3(<>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static byte <PopulateHeader>g__SetDepth8|4_10(<>c__DisplayClass4_0& , <>c__DisplayClass4_2& );
    [CompilerGeneratedAttribute]
internal static byte <PopulateHeader>g__SetDepth16|4_11(<>c__DisplayClass4_0& , <>c__DisplayClass4_2& );
    [CompilerGeneratedAttribute]
internal static byte <PopulateHeader>g__SetDepth24|4_12(<>c__DisplayClass4_0& , <>c__DisplayClass4_2& );
    [CompilerGeneratedAttribute]
internal static byte <PopulateHeader>g__SetDepth32|4_13(<>c__DisplayClass4_0& , <>c__DisplayClass4_2& );
    [CompilerGeneratedAttribute]
internal static byte <PopulateHeader>g__SetFlags|4_4(<>c__DisplayClass4_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MetadataExtractor.Formats.Tga.TgaMetadataReader : object {
    public static IReadOnlyList`1<Directory> ReadMetadata(string filePath);
    public static IReadOnlyList`1<Directory> ReadMetadata(Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class MetadataExtractor.Formats.Tga.TgaReader`1 : object {
    public T Extract(Stream stream, int offset, SeekOrigin origin);
    protected abstract virtual T Extract(Stream stream, int offset);
}
[IsReadOnlyAttribute]
internal class MetadataExtractor.Formats.Tga.TgaTagInfo : ValueType {
    [CompilerGeneratedAttribute]
private short <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    public short Id { get; }
    public int Offset { get; }
    public int Size { get; }
    public TgaTagInfo(short id, int offset, int size);
    [CompilerGeneratedAttribute]
public short get_Id();
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public int get_Size();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class MetadataExtractor.Formats.Tga.TgaTagReader : TgaReader`1<TgaTagInfo[]> {
    protected virtual TgaTagInfo[] Extract(Stream stream, int _);
    [CompilerGeneratedAttribute]
internal static TgaTagInfo <Extract>g__GetTag|0_0(SequentialReader reader);
}
internal class MetadataExtractor.Formats.Tga.TgaTypeChecker : object {
    public int ByteCount { get; }
    public sealed virtual int get_ByteCount();
    [NullableContextAttribute("1")]
public sealed virtual FileType CheckType(Byte[] bytes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MetadataExtractor.Formats.Tiff.DirectoryTiffHandler : object {
    private Stack`1<Directory> _directoryStack;
    [CompilerGeneratedAttribute]
private List`1<Directory> <Directories>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Directory <CurrentDirectory>k__BackingField;
    protected List`1<Directory> Directories { get; }
    [NullableAttribute("2")]
protected Directory CurrentDirectory { get; private set; }
    [NullableAttribute("2")]
public object Kind { get; }
    protected DirectoryTiffHandler(List`1<Directory> directories);
    [CompilerGeneratedAttribute]
protected List`1<Directory> get_Directories();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected Directory get_CurrentDirectory();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_CurrentDirectory(Directory value);
    [NullableContextAttribute("2")]
public sealed virtual object get_Kind();
    public virtual void EndingIfd(TiffReaderContext& modreq(System.Runtime.InteropServices.InAttribute) context);
    protected void PushDirectory(Directory directory);
    public sealed virtual void Warn(string message);
    public sealed virtual void Error(string message);
    private Directory GetCurrentOrErrorDirectory();
    public sealed virtual void SetByteArray(int tagId, Byte[] bytes);
    public sealed virtual void SetString(int tagId, StringValue stringValue);
    public sealed virtual void SetRational(int tagId, Rational rational);
    public sealed virtual void SetRationalArray(int tagId, Rational[] array);
    public sealed virtual void SetFloat(int tagId, float float32);
    public sealed virtual void SetFloatArray(int tagId, Single[] array);
    public sealed virtual void SetDouble(int tagId, double double64);
    public sealed virtual void SetDoubleArray(int tagId, Double[] array);
    public sealed virtual void SetInt8S(int tagId, sbyte int8S);
    public sealed virtual void SetInt8SArray(int tagId, SByte[] array);
    public sealed virtual void SetInt8U(int tagId, byte int8U);
    public sealed virtual void SetInt8UArray(int tagId, Byte[] array);
    public sealed virtual void SetInt16S(int tagId, short int16S);
    public sealed virtual void SetInt16SArray(int tagId, Int16[] array);
    public sealed virtual void SetInt16U(int tagId, ushort int16U);
    public sealed virtual void SetInt16UArray(int tagId, UInt16[] array);
    public sealed virtual void SetInt32S(int tagId, int int32S);
    public sealed virtual void SetInt32SArray(int tagId, Int32[] array);
    public sealed virtual void SetInt32U(int tagId, UInt32 int32U);
    public sealed virtual void SetInt32UArray(int tagId, UInt32[] array);
    public sealed virtual void SetInt64S(int tagId, long int64S);
    public sealed virtual void SetInt64SArray(int tagId, Int64[] array);
    public sealed virtual void SetInt64U(int tagId, ulong int64U);
    public sealed virtual void SetInt64UArray(int tagId, UInt64[] array);
    public abstract virtual bool CustomProcessTag(TiffReaderContext& modreq(System.Runtime.InteropServices.InAttribute) context, int tagId, int valueOffset, int byteCount);
    public abstract virtual bool TryCustomProcessFormat(int tagId, TiffDataFormatCode formatCode, ulong componentCount, UInt64& byteCount);
    public abstract virtual bool HasFollowerIfd();
    public abstract virtual bool TryEnterSubIfd(int tagType);
    public abstract virtual TiffStandard ProcessTiffMarker(ushort marker);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class MetadataExtractor.Formats.Tiff.IfdIdentity : ValueType {
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Kind>k__BackingField;
    public int Offset { get; }
    public object Kind { get; }
    internal IfdIdentity(int offset, object kind);
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public object get_Kind();
}
[NullableContextAttribute("1")]
public interface MetadataExtractor.Formats.Tiff.ITiffHandler {
    [NullableAttribute("2")]
public object Kind { get; }
    public abstract virtual TiffStandard ProcessTiffMarker(ushort marker);
    [NullableContextAttribute("2")]
public abstract virtual object get_Kind();
    public abstract virtual bool TryEnterSubIfd(int tagType);
    public abstract virtual bool HasFollowerIfd();
    public abstract virtual void EndingIfd(TiffReaderContext& modreq(System.Runtime.InteropServices.InAttribute) context);
    public abstract virtual bool CustomProcessTag(TiffReaderContext& modreq(System.Runtime.InteropServices.InAttribute) context, int tagId, int valueOffset, int byteCount);
    public abstract virtual bool TryCustomProcessFormat(int tagId, TiffDataFormatCode formatCode, ulong componentCount, UInt64& byteCount);
    public abstract virtual void Warn(string message);
    public abstract virtual void Error(string message);
    public abstract virtual void SetByteArray(int tagId, Byte[] bytes);
    public abstract virtual void SetString(int tagId, StringValue str);
    public abstract virtual void SetRational(int tagId, Rational rational);
    public abstract virtual void SetRationalArray(int tagId, Rational[] array);
    public abstract virtual void SetFloat(int tagId, float float32);
    public abstract virtual void SetFloatArray(int tagId, Single[] array);
    public abstract virtual void SetDouble(int tagId, double double64);
    public abstract virtual void SetDoubleArray(int tagId, Double[] array);
    public abstract virtual void SetInt8S(int tagId, sbyte int8S);
    public abstract virtual void SetInt8SArray(int tagId, SByte[] array);
    public abstract virtual void SetInt8U(int tagId, byte int8U);
    public abstract virtual void SetInt8UArray(int tagId, Byte[] array);
    public abstract virtual void SetInt16S(int tagId, short int16S);
    public abstract virtual void SetInt16SArray(int tagId, Int16[] array);
    public abstract virtual void SetInt16U(int tagId, ushort int16U);
    public abstract virtual void SetInt16UArray(int tagId, UInt16[] array);
    public abstract virtual void SetInt32S(int tagId, int int32S);
    public abstract virtual void SetInt32SArray(int tagId, Int32[] array);
    public abstract virtual void SetInt32U(int tagId, UInt32 int32U);
    public abstract virtual void SetInt32UArray(int tagId, UInt32[] array);
    public abstract virtual void SetInt64S(int tagId, long int64S);
    public abstract virtual void SetInt64SArray(int tagId, Int64[] array);
    public abstract virtual void SetInt64U(int tagId, ulong int64U);
    public abstract virtual void SetInt64UArray(int tagId, UInt64[] array);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Tiff.TiffDataFormat : object {
    public static TiffDataFormat Int8U;
    public static TiffDataFormat String;
    public static TiffDataFormat Int16U;
    public static TiffDataFormat Int32U;
    public static TiffDataFormat RationalU;
    public static TiffDataFormat Int8S;
    public static TiffDataFormat Undefined;
    public static TiffDataFormat Int16S;
    public static TiffDataFormat Int32S;
    public static TiffDataFormat RationalS;
    public static TiffDataFormat Single;
    public static TiffDataFormat Double;
    public static TiffDataFormat Int64U;
    public static TiffDataFormat Int64S;
    public static TiffDataFormat Ifd8;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <ComponentSizeBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private TiffDataFormatCode <TiffFormatCode>k__BackingField;
    public string Name { get; }
    public byte ComponentSizeBytes { get; }
    public TiffDataFormatCode TiffFormatCode { get; }
    private TiffDataFormat(string name, TiffDataFormatCode tiffFormatCode, byte componentSizeBytes);
    private static TiffDataFormat();
    [NullableContextAttribute("2")]
public static TiffDataFormat FromTiffFormatCode(TiffDataFormatCode tiffFormatCode, bool isBigTiff);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public byte get_ComponentSizeBytes();
    [CompilerGeneratedAttribute]
public TiffDataFormatCode get_TiffFormatCode();
    public virtual string ToString();
}
public enum MetadataExtractor.Formats.Tiff.TiffDataFormatCode : Enum {
    public ushort value__;
    public static TiffDataFormatCode Int8U;
    public static TiffDataFormatCode String;
    public static TiffDataFormatCode Int16U;
    public static TiffDataFormatCode Int32U;
    public static TiffDataFormatCode RationalU;
    public static TiffDataFormatCode Int8S;
    public static TiffDataFormatCode Undefined;
    public static TiffDataFormatCode Int16S;
    public static TiffDataFormatCode Int32S;
    public static TiffDataFormatCode RationalS;
    public static TiffDataFormatCode Single;
    public static TiffDataFormatCode Double;
    public static TiffDataFormatCode Int64U;
    public static TiffDataFormatCode Int64S;
    public static TiffDataFormatCode Ifd8;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MetadataExtractor.Formats.Tiff.TiffMetadataReader : object {
    public static IReadOnlyList`1<Directory> ReadMetadata(string filePath);
    public static IReadOnlyList`1<Directory> ReadMetadata(Stream stream);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Tiff.TiffProcessingException : ImageProcessingException {
    public TiffProcessingException(string message);
    public TiffProcessingException(string message, Exception innerException);
    public TiffProcessingException(Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MetadataExtractor.Formats.Tiff.TiffReader : object {
    public static void ProcessTiff(IndexedReader reader, ITiffHandler handler);
    public static void ProcessIfd(ITiffHandler handler, TiffReaderContext context, int ifdOffset);
    private static void ProcessTag(ITiffHandler handler, int tagId, Int32& valueOffset, int componentCount, TiffDataFormatCode formatCode, IndexedReader reader);
    [CompilerGeneratedAttribute]
internal static int <ProcessIfd>g__CalculateTagOffset|1_0(int tagIndex, <>c__DisplayClass1_0& , <>c__DisplayClass1_1& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class MetadataExtractor.Formats.Tiff.TiffReaderContext : ValueType {
    [CompilerGeneratedAttribute]
private IndexedReader <Reader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMotorolaByteOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBigTiff>k__BackingField;
    private HashSet`1<IfdIdentity> _visitedIfds;
    public IndexedReader Reader { get; }
    public bool IsMotorolaByteOrder { get; }
    public bool IsBigTiff { get; }
    public TiffReaderContext(IndexedReader reader, bool isMotorolaByteOrder, bool isBigTiff);
    [CompilerGeneratedAttribute]
public IndexedReader get_Reader();
    [CompilerGeneratedAttribute]
public bool get_IsMotorolaByteOrder();
    [CompilerGeneratedAttribute]
public bool get_IsBigTiff();
    [NullableContextAttribute("2")]
public bool TryVisitIfd(int ifdOffset, object kind);
    public TiffReaderContext WithByteOrder(bool isMotorolaByteOrder);
    public TiffReaderContext WithShiftedBaseOffset(int baseOffset);
}
public enum MetadataExtractor.Formats.Tiff.TiffStandard : Enum {
    public int value__;
    public static TiffStandard Tiff;
    public static TiffStandard BigTiff;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Wav.WavFactDirectory : Directory {
    public static int TagSampleLength;
    private String[] _tagNames;
    public string Name { get; }
    public virtual string get_Name();
    [NullableContextAttribute("2")]
protected virtual bool TryGetTagName(int tagType, String& tagName);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Wav.WavFactHandler : RiffChunkHandler`1<WavFactDirectory> {
    protected int MinSize { get; }
    public WavFactHandler(List`1<Directory> directories);
    protected virtual int get_MinSize();
    protected virtual void Populate(WavFactDirectory directory, Byte[] payload);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Wav.WavFormatDescriptor : TagDescriptor`1<WavFormatDirectory> {
    [NullableContextAttribute("1")]
public WavFormatDescriptor(WavFormatDirectory directory);
    public virtual string GetDescription(int tag);
    private string GetFormatDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Wav.WavFormatDirectory : Directory {
    public static int TagFormat;
    public static int TagChannels;
    public static int TagSamplesPerSec;
    public static int TagBytesPerSec;
    public static int TagBlockAlign;
    public static int TagBitsPerSample;
    public static int TagValidBitsPerSample;
    public static int TagChannelMask;
    public static int TagSubformat;
    private String[] _tagNames;
    public string Name { get; }
    public virtual string get_Name();
    [NullableContextAttribute("2")]
protected virtual bool TryGetTagName(int tagType, String& tagName);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Wav.WavFormatHandler : RiffChunkHandler`1<WavFormatDirectory> {
    protected int MinSize { get; }
    public WavFormatHandler(List`1<Directory> directories);
    protected virtual int get_MinSize();
    protected virtual void Populate(WavFormatDirectory directory, Byte[] payload);
    public static void Populate(WavFormatDirectory directory, SequentialReader reader, int chunkSize);
    private static void PopulateEx(WavFormatDirectory directory, SequentialReader reader, int exSize);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MetadataExtractor.Formats.Wav.WavMetadataReader : object {
    public static IReadOnlyList`1<Directory> ReadMetadata(string filePath);
    public static IReadOnlyList`1<Directory> ReadMetadata(Stream stream);
}
public class MetadataExtractor.Formats.Wav.WavRiffHandler : RiffHandler {
    [NullableContextAttribute("1")]
public WavRiffHandler(List`1<Directory> directories);
    public virtual bool ShouldAcceptRiffIdentifier(ReadOnlySpan`1<byte> identifier);
    public virtual bool ShouldAcceptList(ReadOnlySpan`1<byte> fourCc);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.WebP.WebPDescriptor : TagDescriptor`1<WebPDirectory> {
    public WebPDescriptor(WebPDirectory directory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.WebP.WebPDirectory : Directory {
    public static int TagImageHeight;
    public static int TagImageWidth;
    public static int TagHasAlpha;
    public static int TagIsAnimation;
    private static Dictionary`2<int, string> _tagNameMap;
    public string Name { get; }
    private static WebPDirectory();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MetadataExtractor.Formats.WebP.WebPMetadataReader : object {
    public static IReadOnlyList`1<Directory> ReadMetadata(string filePath);
    public static IReadOnlyList`1<Directory> ReadMetadata(Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.WebP.WebPRiffHandler : object {
    private List`1<Directory> _directories;
    public WebPRiffHandler(List`1<Directory> directories);
    [NullableContextAttribute("0")]
public sealed virtual bool ShouldAcceptRiffIdentifier(ReadOnlySpan`1<byte> identifier);
    public sealed virtual bool ShouldAcceptChunk(string fourCc);
    [NullableContextAttribute("0")]
public sealed virtual bool ShouldAcceptList(ReadOnlySpan`1<byte> fourCc);
    public sealed virtual void ProcessChunk(string fourCc, Byte[] payload);
    public sealed virtual void AddError(string errorMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MetadataExtractor.Formats.Xmp.Schema : object {
    public static string XmpProperties;
    public static string ExifSpecificProperties;
    public static string ExifAdditionalProperties;
    public static string ExifTiffProperties;
    public static string DublinCoreSpecificProperties;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MetadataExtractor.Formats.Xmp.XmpDescriptor : TagDescriptor`1<XmpDirectory> {
    public XmpDescriptor(XmpDirectory directory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Xmp.XmpDirectory : Directory {
    public static int TagXmpValueCount;
    private static Dictionary`2<int, string> _tagNameMap;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IXmpMeta <XmpMeta>k__BackingField;
    private static IteratorOptions _iteratorOptions;
    [NullableAttribute("2")]
public IXmpMeta XmpMeta { get; private set; }
    public string Name { get; }
    private static XmpDirectory();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IXmpMeta get_XmpMeta();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_XmpMeta(IXmpMeta value);
    public virtual string get_Name();
    public IDictionary`2<string, string> GetXmpProperties();
    public void SetXmpMeta(IXmpMeta xmpMeta);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Formats.Xmp.XmpReader : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<JpegSegmentType> <MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.SegmentTypes>k__BackingField;
    [NullableAttribute("0")]
public static ReadOnlySpan`1<byte> JpegSegmentPreamble { get; }
    [NullableAttribute("0")]
public static ReadOnlySpan`1<byte> JpegSegmentPreambleExtension { get; }
    private IReadOnlyCollection`1<JpegSegmentType> MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.SegmentTypes { get; }
    [NullableContextAttribute("0")]
public static ReadOnlySpan`1<byte> get_JpegSegmentPreamble();
    [NullableContextAttribute("0")]
public static ReadOnlySpan`1<byte> get_JpegSegmentPreambleExtension();
    [CompilerGeneratedAttribute]
private sealed virtual override IReadOnlyCollection`1<JpegSegmentType> MetadataExtractor.Formats.Jpeg.IJpegSegmentMetadataReader.get_SegmentTypes();
    [IteratorStateMachineAttribute("MetadataExtractor.Formats.Xmp.XmpReader/<ReadJpegSegments>d__7")]
public sealed virtual IEnumerable`1<Directory> ReadJpegSegments(IEnumerable`1<JpegSegment> segments);
    private static string GetExtendedDataGuid(JpegSegment segment);
    private static bool IsXmpSegment(JpegSegment segment);
    private static bool IsExtendedXmpSegment(JpegSegment segment);
    public XmpDirectory Extract(Byte[] xmpBytes);
    public XmpDirectory Extract(Byte[] xmpBytes, int offset, int length);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static void <Extract>g__ScanForEnding|12_0(ReadOnlySpan`1<byte> bytes, ReadOnlySpan`1<byte> pattern, <>c__DisplayClass12_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class MetadataExtractor.GeoLocation : ValueType {
    [CompilerGeneratedAttribute]
private double <Latitude>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Longitude>k__BackingField;
    public double Latitude { get; }
    public double Longitude { get; }
    public bool IsZero { get; }
    public GeoLocation(double latitude, double longitude);
    [CompilerGeneratedAttribute]
public double get_Latitude();
    [CompilerGeneratedAttribute]
public double get_Longitude();
    public bool get_IsZero();
    public static string DecimalToDegreesMinutesSecondsString(double value);
    public static Double[] DecimalToDegreesMinutesSeconds(double value);
    public static Nullable`1<double> DegreesMinutesSecondsToDecimal(Rational degs, Rational mins, Rational secs, bool isNegative);
    public sealed virtual bool Equals(GeoLocation other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public string ToDmsString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MetadataExtractor.ImageMetadataReader : object {
    public static IReadOnlyList`1<Directory> ReadMetadata(Stream stream, string fileName);
    public static IReadOnlyList`1<Directory> ReadMetadata(string filePath);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MetadataExtractor.ImageProcessingException : Exception {
    public ImageProcessingException(string message);
    public ImageProcessingException(string message, Exception innerException);
    public ImageProcessingException(Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.IO.BitReader : object {
    private SequentialReader _source;
    private byte _mask;
    private byte _currentByte;
    public BitReader(SequentialReader source);
    public ulong GetUInt64(int bits);
    public UInt32 GetUInt32(int bits);
    public ushort GetUInt16(int bits);
    public byte GetByte(int bits);
    public bool GetBit();
    private void ReadWholeByteFromSource();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.IO.BufferBoundsException : IOException {
    public BufferBoundsException(int index, int bytesRequested, long bufferLength);
    public BufferBoundsException(string message);
    private static string GetMessage(int index, int bytesRequested, long bufferLength);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
internal class MetadataExtractor.IO.BufferReader : ValueType {
    private ReadOnlySpan`1<byte> _bytes;
    private bool _isBigEndian;
    private int _position;
    public int Available { get; }
    public int Position { get; }
    public bool IsBigEndian { get; }
    public BufferReader(ReadOnlySpan`1<byte> bytes, bool isBigEndian);
    [IsReadOnlyAttribute]
public int get_Available();
    [IsReadOnlyAttribute]
public int get_Position();
    [IsReadOnlyAttribute]
public bool get_IsBigEndian();
    [IsReadOnlyAttribute]
public bool GetBit(int index);
    [IsReadOnlyAttribute]
public void GetBytes(int index, Span`1<byte> bytes);
    [IsReadOnlyAttribute]
public byte GetByte(int index);
    [IsReadOnlyAttribute]
public short GetInt16(int index);
    [IsReadOnlyAttribute]
public ushort GetUInt16(int index);
    [IsReadOnlyAttribute]
public int GetInt24(int index);
    [IsReadOnlyAttribute]
public int GetInt32(int index);
    [IsReadOnlyAttribute]
public UInt32 GetUInt32(int index);
    [IsReadOnlyAttribute]
public float GetS15Fixed16(int index);
    [IsReadOnlyAttribute]
public long GetInt64(int index);
    [IsReadOnlyAttribute]
public float GetFloat32(int index);
    [IsReadOnlyAttribute]
public double GetDouble64(int index);
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
public string GetString(int index, int bytesRequested, Encoding encoding);
    [IsReadOnlyAttribute]
private void ValidateIndex(int index, int bytesRequested);
    [IsReadOnlyAttribute]
private bool IsValidIndex(int index, int bytesRequested);
    public byte GetByte();
    public void GetBytes(Span`1<byte> bytes);
    [NullableContextAttribute("1")]
public Byte[] GetBytes(int count);
    private ReadOnlySpan`1<byte> Advance(int count);
    public void Skip(int count);
    public sbyte GetSByte();
    public ushort GetUInt16();
    public short GetInt16();
    public UInt32 GetUInt32();
    public int GetInt32();
    public long GetInt64();
    public ulong GetUInt64();
    [NullableContextAttribute("1")]
public string GetString(int bytesRequested, Encoding encoding);
    [NullableContextAttribute("2")]
public StringValue GetNullTerminatedStringValue(int maxLengthBytes, Encoding encoding, bool moveToMaxLength);
    [NullableContextAttribute("1")]
public Byte[] GetNullTerminatedBytes(int maxLengthBytes, bool moveToMaxLength);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.IO.ByteArrayReader : IndexedReader {
    private Byte[] _buffer;
    private int _baseOffset;
    public long Length { get; }
    public ByteArrayReader(Byte[] buffer, int baseOffset, bool isMotorolaByteOrder);
    public virtual IndexedReader WithByteOrder(bool isMotorolaByteOrder);
    public virtual IndexedReader WithShiftedBaseOffset(int shift);
    public virtual int ToUnshiftedOffset(int localOffset);
    public virtual long get_Length();
    [NullableContextAttribute("0")]
public virtual void GetBytes(int index, Span`1<byte> bytes);
    protected virtual void ValidateIndex(int index, int bytesRequested);
    private bool IsValidIndex(int index, int bytesRequested);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.IO.IndexedCapturingReader : IndexedReader {
    private static int DefaultChunkLength;
    private Stream _stream;
    private int _chunkLength;
    private List`1<Byte[]> _chunks;
    private bool _isStreamFinished;
    private int _streamLength;
    private bool _streamLengthThrewException;
    public long Length { get; }
    public IndexedCapturingReader(Stream stream, int chunkLength, bool isMotorolaByteOrder);
    public virtual long get_Length();
    protected virtual void ValidateIndex(int index, int bytesRequested);
    private bool IsValidIndex(int index, int bytesRequested);
    public sealed virtual void Dispose();
    public virtual int ToUnshiftedOffset(int localOffset);
    private void GetPosition(int index, Int32& chunkIndex, Int32& innerIndex);
    [NullableContextAttribute("0")]
public virtual void GetBytes(int index, Span`1<byte> bytes);
    public virtual IndexedReader WithByteOrder(bool isMotorolaByteOrder);
    public virtual IndexedReader WithShiftedBaseOffset(int shift);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MetadataExtractor.IO.IndexedReader : object {
    [CompilerGeneratedAttribute]
private bool <IsMotorolaByteOrder>k__BackingField;
    public bool IsMotorolaByteOrder { get; }
    public long Length { get; }
    protected IndexedReader(bool isMotorolaByteOrder);
    [CompilerGeneratedAttribute]
public bool get_IsMotorolaByteOrder();
    public abstract virtual IndexedReader WithByteOrder(bool isMotorolaByteOrder);
    public abstract virtual IndexedReader WithShiftedBaseOffset(int shift);
    public abstract virtual int ToUnshiftedOffset(int localOffset);
    public Byte[] GetBytes(int index, int count);
    [NullableContextAttribute("0")]
public abstract virtual void GetBytes(int index, Span`1<byte> bytes);
    protected abstract virtual void ValidateIndex(int index, int bytesRequested);
    public abstract virtual long get_Length();
    public bool GetBit(int index);
    public byte GetByte(int index);
    public sbyte GetSByte(int index);
    public ushort GetUInt16(int index);
    public short GetInt16(int index);
    public int GetInt24(int index);
    public UInt32 GetUInt32(int index);
    public int GetInt32(int index);
    public long GetInt64(int index);
    public ulong GetUInt64(int index);
    public float GetS15Fixed16(int index);
    public float GetFloat32(int index);
    public double GetDouble64(int index);
    public string GetString(int index, int bytesRequested, Encoding encoding);
    public string GetNullTerminatedString(int index, int maxLengthBytes, Encoding encoding);
    [NullableContextAttribute("2")]
public StringValue GetNullTerminatedStringValue(int index, int maxLengthBytes, Encoding encoding);
    public Byte[] GetNullTerminatedBytes(int index, int maxLengthBytes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.IO.IndexedSeekingReader : IndexedReader {
    private Stream _stream;
    private int _baseOffset;
    [CompilerGeneratedAttribute]
private long <Length>k__BackingField;
    public long Length { get; }
    public IndexedSeekingReader(Stream stream, int baseOffset, bool isMotorolaByteOrder);
    public virtual IndexedReader WithByteOrder(bool isMotorolaByteOrder);
    public virtual IndexedReader WithShiftedBaseOffset(int shift);
    public virtual int ToUnshiftedOffset(int localOffset);
    [CompilerGeneratedAttribute]
public virtual long get_Length();
    [NullableContextAttribute("0")]
public virtual void GetBytes(int index, Span`1<byte> bytes);
    private void Seek(int index);
    private bool IsValidIndex(int index, int bytesRequested);
    protected virtual void ValidateIndex(int index, int bytesRequested);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
internal class MetadataExtractor.IO.ScopedBuffer : ValueType {
    public static int MaxStackBufferSize;
    [NullableAttribute("2")]
private Byte[] _rentedBuffer;
    private Span`1<byte> _span;
    public Span`1<byte> Span { get; }
    public ScopedBuffer(int size);
    public ScopedBuffer(Span`1<byte> span);
    [IsReadOnlyAttribute]
public Span`1<byte> get_Span();
    public static Span`1<byte> op_Implicit(ScopedBuffer bufferScope);
    public static ReadOnlySpan`1<byte> op_Implicit(ScopedBuffer bufferScope);
    public void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.IO.SequentialByteArrayReader : SequentialReader {
    private Byte[] _bytes;
    private int _index;
    public long Position { get; }
    public SequentialByteArrayReader(Byte[] bytes, int baseIndex, bool isMotorolaByteOrder);
    public virtual long get_Position();
    public virtual byte GetByte();
    public virtual SequentialReader WithByteOrder(bool isMotorolaByteOrder);
    public virtual Byte[] GetBytes(int count);
    [NullableContextAttribute("0")]
public virtual void GetBytes(Span`1<byte> bytes);
    public virtual void GetBytes(Byte[] buffer, int offset, int count);
    public virtual void Skip(long n);
    public virtual bool TrySkip(long n);
    public virtual int Available();
    public virtual bool IsCloserToEnd(long numberOfBytes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MetadataExtractor.IO.SequentialReader : object {
    [CompilerGeneratedAttribute]
private bool <IsMotorolaByteOrder>k__BackingField;
    public bool IsMotorolaByteOrder { get; }
    public long Position { get; }
    protected SequentialReader(bool isMotorolaByteOrder);
    [CompilerGeneratedAttribute]
public bool get_IsMotorolaByteOrder();
    public abstract virtual long get_Position();
    public abstract virtual SequentialReader WithByteOrder(bool isMotorolaByteOrder);
    public abstract virtual Byte[] GetBytes(int count);
    [NullableContextAttribute("0")]
public abstract virtual void GetBytes(Span`1<byte> bytes);
    public abstract virtual void GetBytes(Byte[] buffer, int offset, int count);
    public abstract virtual void Skip(long n);
    public abstract virtual bool TrySkip(long n);
    public abstract virtual int Available();
    public abstract virtual byte GetByte();
    public sbyte GetSByte();
    public ushort GetUInt16();
    public short GetInt16();
    public UInt32 GetUInt32();
    public int GetInt32();
    public long GetInt64();
    public ulong GetUInt64();
    public float GetS15Fixed16();
    public float GetFloat32();
    public double GetDouble64();
    public string GetString(int bytesRequested, Encoding encoding);
    [NullableContextAttribute("2")]
public StringValue GetStringValue(int bytesRequested, Encoding encoding);
    public string GetNullTerminatedString(int maxLengthBytes, Encoding encoding, bool moveToMaxLength);
    [NullableContextAttribute("2")]
public StringValue GetNullTerminatedStringValue(int maxLengthBytes, Encoding encoding, bool moveToMaxLength);
    public Byte[] GetNullTerminatedBytes(int maxLengthBytes, bool moveToMaxLength);
    public virtual bool IsCloserToEnd(long numberOfBytes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.IO.SequentialStreamReader : SequentialReader {
    private Stream _stream;
    public long Position { get; }
    public SequentialStreamReader(Stream stream, bool isMotorolaByteOrder);
    public virtual long get_Position();
    public virtual byte GetByte();
    public virtual SequentialReader WithByteOrder(bool isMotorolaByteOrder);
    public virtual Byte[] GetBytes(int count);
    public virtual void GetBytes(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public virtual void GetBytes(Span`1<byte> bytes);
    public virtual void Skip(long n);
    public virtual bool TrySkip(long n);
    public virtual int Available();
    public virtual bool IsCloserToEnd(long numberOfBytes);
}
[NullableContextAttribute("2")]
public interface MetadataExtractor.ITagDescriptor {
    public abstract virtual string GetDescription(int tagType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class MetadataExtractor.KeyValuePair : ValueType {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private StringValue <Value>k__BackingField;
    public string Key { get; }
    public StringValue Value { get; }
    public KeyValuePair(string key, StringValue value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public StringValue get_Value();
    public void Deconstruct(String& key, StringValue& value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MetadataExtractor.MetadataException : Exception {
    public MetadataException(string msg);
    public MetadataException(Exception innerException);
    public MetadataException(string msg, Exception innerException);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[TypeConverterAttribute("MetadataExtractor.Rational/RationalConverter")]
public class MetadataExtractor.Rational : ValueType {
    [CompilerGeneratedAttribute]
private long <Denominator>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Numerator>k__BackingField;
    public long Denominator { get; }
    public long Numerator { get; }
    public Rational Reciprocal { get; }
    public Rational Absolute { get; }
    public bool IsInteger { get; }
    public bool IsZero { get; }
    public bool IsPositive { get; }
    public Rational(long numerator, long denominator);
    [CompilerGeneratedAttribute]
public long get_Denominator();
    [CompilerGeneratedAttribute]
public long get_Numerator();
    public double ToDouble();
    public float ToSingle();
    public byte ToByte();
    public sbyte ToSByte();
    public int ToInt32();
    public UInt32 ToUInt32();
    public long ToInt64();
    public ulong ToUInt64();
    public short ToInt16();
    public ushort ToUInt16();
    public decimal ToDecimal();
    public bool ToBoolean();
    private sealed virtual override TypeCode System.IConvertible.GetTypeCode();
    private sealed virtual override bool System.IConvertible.ToBoolean(IFormatProvider provider);
    private sealed virtual override char System.IConvertible.ToChar(IFormatProvider provider);
    private sealed virtual override sbyte System.IConvertible.ToSByte(IFormatProvider provider);
    private sealed virtual override byte System.IConvertible.ToByte(IFormatProvider provider);
    private sealed virtual override short System.IConvertible.ToInt16(IFormatProvider provider);
    private sealed virtual override ushort System.IConvertible.ToUInt16(IFormatProvider provider);
    private sealed virtual override int System.IConvertible.ToInt32(IFormatProvider provider);
    private sealed virtual override UInt32 System.IConvertible.ToUInt32(IFormatProvider provider);
    private sealed virtual override long System.IConvertible.ToInt64(IFormatProvider provider);
    private sealed virtual override ulong System.IConvertible.ToUInt64(IFormatProvider provider);
    private sealed virtual override float System.IConvertible.ToSingle(IFormatProvider provider);
    private sealed virtual override double System.IConvertible.ToDouble(IFormatProvider provider);
    private sealed virtual override decimal System.IConvertible.ToDecimal(IFormatProvider provider);
    private sealed virtual override DateTime System.IConvertible.ToDateTime(IFormatProvider provider);
    [NullableContextAttribute("1")]
private sealed virtual override object System.IConvertible.ToType(Type conversionType, IFormatProvider provider);
    public Rational get_Reciprocal();
    public Rational get_Absolute();
    public bool get_IsInteger();
    public bool get_IsZero();
    public bool get_IsPositive();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public sealed virtual string ToString(IFormatProvider provider);
    [NullableContextAttribute("1")]
public string ToSimpleString(bool allowDecimal, IFormatProvider provider);
    public sealed virtual bool Equals(Rational other);
    public bool EqualsExact(Rational other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public Rational GetSimplifiedInstance();
    public static bool op_Equality(Rational a, Rational b);
    public static bool op_Inequality(Rational a, Rational b);
    [CompilerGeneratedAttribute]
internal static long <GetSimplifiedInstance>g__GCD|52_0(long a, long b);
}
[ExtensionAttribute]
internal static class MetadataExtractor.StringBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static int IndexOf(StringBuilder sb, char c);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class MetadataExtractor.StringValue : ValueType {
    [NullableAttribute("1")]
public static Encoding DefaultEncoding;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Byte[] <Bytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [NullableAttribute("1")]
public Byte[] Bytes { get; }
    public Encoding Encoding { get; }
    [NullableContextAttribute("1")]
public StringValue(Byte[] bytes, Encoding encoding);
    private static StringValue();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Byte[] get_Bytes();
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    private sealed virtual override TypeCode System.IConvertible.GetTypeCode();
    [NullableContextAttribute("1")]
private sealed virtual override string System.IConvertible.ToString(IFormatProvider provider);
    private sealed virtual override double System.IConvertible.ToDouble(IFormatProvider provider);
    private sealed virtual override decimal System.IConvertible.ToDecimal(IFormatProvider provider);
    private sealed virtual override float System.IConvertible.ToSingle(IFormatProvider provider);
    private sealed virtual override bool System.IConvertible.ToBoolean(IFormatProvider provider);
    private sealed virtual override byte System.IConvertible.ToByte(IFormatProvider provider);
    private sealed virtual override char System.IConvertible.ToChar(IFormatProvider provider);
    private sealed virtual override DateTime System.IConvertible.ToDateTime(IFormatProvider provider);
    private sealed virtual override short System.IConvertible.ToInt16(IFormatProvider provider);
    private sealed virtual override int System.IConvertible.ToInt32(IFormatProvider provider);
    private sealed virtual override long System.IConvertible.ToInt64(IFormatProvider provider);
    private sealed virtual override sbyte System.IConvertible.ToSByte(IFormatProvider provider);
    private sealed virtual override ushort System.IConvertible.ToUInt16(IFormatProvider provider);
    private sealed virtual override UInt32 System.IConvertible.ToUInt32(IFormatProvider provider);
    private sealed virtual override ulong System.IConvertible.ToUInt64(IFormatProvider provider);
    [NullableContextAttribute("1")]
private sealed virtual override object System.IConvertible.ToType(Type conversionType, IFormatProvider provider);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public string ToString(Encoding encoding);
    [NullableContextAttribute("1")]
public string ToString(int index, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Tag : object {
    private Directory _directory;
    [CompilerGeneratedAttribute]
private int <Type>k__BackingField;
    public int Type { get; }
    [NullableAttribute("2")]
public string Description { get; }
    public bool HasName { get; }
    public string Name { get; }
    public string DirectoryName { get; }
    public Tag(int type, Directory directory);
    [CompilerGeneratedAttribute]
public int get_Type();
    [NullableContextAttribute("2")]
public string get_Description();
    public bool get_HasName();
    public string get_Name();
    public string get_DirectoryName();
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MetadataExtractor.TagDescriptor`1 : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private T <Directory>k__BackingField;
    [NullableAttribute("1")]
protected T Directory { get; }
    [NullableContextAttribute("1")]
public TagDescriptor`1(T directory);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected T get_Directory();
    public virtual string GetDescription(int tagType);
    public static string ConvertBytesToVersionString(Int32[] components, int majorDigits);
    protected string GetVersionBytesDescription(int tagType, int majorDigits);
    protected string GetIndexedDescription(int tagType, String[] descriptions);
    protected string GetIndexedDescription(int tagType, int baseIndex, String[] descriptions);
    [NullableContextAttribute("1")]
protected string GetBooleanDescription(int tagType, string trueValue, string falseValue);
    protected string GetByteLengthDescription(int tagType);
    protected string GetSimpleRational(int tagType);
    protected string GetDecimalRational(int tagType, int decimalPlaces);
    [NullableContextAttribute("1")]
protected string GetFormattedInt(int tagType, string format);
    [NullableContextAttribute("1")]
protected string GetFormattedString(int tagType, string format);
    protected string GetEpochTimeDescription(int tagType);
    protected string GetBitFlagDescription(int tagType, Object[] labels);
    protected string GetStringFrom7BitBytes(int tagType);
    protected string GetStringFromUtf8Bytes(int tag);
    protected string GetRationalOrDoubleString(int tagType);
    [NullableContextAttribute("1")]
protected static string GetFStopDescription(double fStop);
    [NullableContextAttribute("1")]
protected static string GetFocalLengthDescription(double mm);
    protected string GetLensSpecificationDescription(int tagId);
    protected string GetOrientationDescription(int tag);
    protected string GetShutterSpeedDescription(int tagId);
    protected string GetEncodedTextDescription(int tagType);
}
internal static class MetadataExtractor.Util.ByteConvert : object {
    public static UInt32 FromBigEndianToNative(UInt32 bigEndian);
    public static ushort FromBigEndianToNative(ushort bigEndian);
    public static short FromBigEndianToNative(short bigEndian);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MetadataExtractor.Util.ByteTrie`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ByteTrieNode<T> _root;
    [CompilerGeneratedAttribute]
private int <MaxDepth>k__BackingField;
    public int MaxDepth { get; private set; }
    public ByteTrie`1(T defaultValue);
    [CompilerGeneratedAttribute]
public int get_MaxDepth();
    [CompilerGeneratedAttribute]
private void set_MaxDepth(int value);
    [NullableContextAttribute("0")]
public T Find(ReadOnlySpan`1<byte> bytes);
    public void Add(T value, Byte[][] parts);
    [NullableContextAttribute("0")]
public void Add(T value, ReadOnlySpan`1<byte> part);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class MetadataExtractor.Util.DateUtil : object {
    private static DateTime _unixEpoch;
    private static DateUtil();
    public static bool IsValidDate(int year, int month, int day);
    public static bool IsValidTime(int hours, int minutes, int seconds);
    public static DateTime FromUnixTime(long unixTimeSeconds);
}
public enum MetadataExtractor.Util.FileType : Enum {
    public int value__;
    public static FileType Unknown;
    public static FileType Jpeg;
    public static FileType Tiff;
    public static FileType Psd;
    public static FileType Png;
    public static FileType Bmp;
    public static FileType Gif;
    public static FileType Ico;
    public static FileType Pcx;
    public static FileType Riff;
    public static FileType Wav;
    public static FileType Avi;
    public static FileType WebP;
    public static FileType Arw;
    public static FileType Crw;
    public static FileType Cr2;
    public static FileType Nef;
    public static FileType Orf;
    public static FileType Raf;
    public static FileType Rw2;
    public static FileType QuickTime;
    public static FileType Netpbm;
    public static FileType Crx;
    public static FileType Eps;
    public static FileType Tga;
    public static FileType Mp3;
    public static FileType Heif;
    public static FileType Mp4;
    public static FileType Avif;
    public static FileType Dng;
    public static FileType GoPro;
    public static FileType Kdc;
    public static FileType ThreeFR;
    public static FileType Pef;
    public static FileType Srw;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MetadataExtractor.Util.FileTypeDetector : object {
    private static ByteTrie`1<FileType> _root;
    private static IReadOnlyList`1<ITypeChecker> _checkers;
    private static int _bytesNeeded;
    private static FileTypeDetector();
    private static FileType TryDisambiguate(FileType detectedFileType, string fileName);
    public static FileType DetectFileType(Stream stream, string fileName);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static ReadOnlySpan`1<char> <TryDisambiguate>g__GetExtension|1_0(<>c__DisplayClass1_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MetadataExtractor.Util.FileTypeExtensions : object {
    private static String[] _shortNames;
    private static String[] _longNames;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static String[] _mimeTypes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static String[][] _extensions;
    private static FileTypeExtensions();
    [ExtensionAttribute]
public static string GetName(FileType fileType);
    [ExtensionAttribute]
public static string GetLongName(FileType fileType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string GetMimeType(FileType fileType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string GetCommonExtension(FileType fileType);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetAllExtensions(FileType fileType);
}
[NullableContextAttribute("1")]
internal interface MetadataExtractor.Util.ITypeChecker {
    public int ByteCount { get; }
    public abstract virtual int get_ByteCount();
    public abstract virtual FileType CheckType(Byte[] bytes);
}
public static class MetadataExtractor.Util.PhotographicConversions : object {
    private static double Ln2;
    private static double RootTwo;
    public static double ApertureToFStop(double aperture);
    public static double ShutterSpeedToExposureTime(double shutterSpeed);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
