[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Meziantou.Analyzer.CompilationExtensions : object {
    [ExtensionAttribute]
public static bool IsNet9OrGreater(Compilation compilation);
    [ExtensionAttribute]
public static INamedTypeSymbol GetBestTypeByMetadataName(Compilation compilation, string fullyQualifiedMetadataName);
    [ExtensionAttribute]
private static SymbolVisibility GetResultantVisibility(ISymbol symbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Meziantou.Analyzer.DocumentBasedFixAllProvider : FixAllProvider {
    protected string CodeActionTitle { get; }
    protected abstract virtual string get_CodeActionTitle();
    public virtual Task`1<CodeAction> GetFixAsync(FixAllContext fixAllContext);
    protected abstract virtual Task`1<SyntaxNode> FixAllInDocumentAsync(FixAllContext fixAllContext, Document document, ImmutableArray`1<Diagnostic> diagnostics);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.DocumentBasedFixAllProvider/<GetDocumentFixesAsync>d__4")]
private Task`1<Document> GetDocumentFixesAsync(FixAllContext fixAllContext);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.DocumentBasedFixAllProvider/<GetSolutionFixesAsync>d__5")]
private Task`1<Solution> GetSolutionFixesAsync(FixAllContext fixAllContext, ImmutableArray`1<Document> documents);
    private Task`1<Solution> GetProjectFixesAsync(FixAllContext fixAllContext, Project project);
    private Task`1<Solution> GetSolutionFixesAsync(FixAllContext fixAllContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Meziantou.Analyzer.EnumerableExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> WhereNotNull(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static T SingleOrDefaultIfMultiple(IEnumerable`1<T> source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Meziantou.Analyzer.FixAllContextHelper : object {
    [AsyncStateMachineAttribute("Meziantou.Analyzer.FixAllContextHelper/<GetDocumentDiagnosticsToFixAsync>d__0")]
public static Task`1<ImmutableDictionary`2<Document, ImmutableArray`1<Diagnostic>>> GetDocumentDiagnosticsToFixAsync(FixAllContext fixAllContext);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.FixAllContextHelper/<GetAllDiagnosticsAsync>d__1")]
private static Task`1<ImmutableArray`1<Diagnostic>> GetAllDiagnosticsAsync(FixAllContext fixAllContext, Project project);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.FixAllContextHelper/<GetDocumentDiagnosticsToFixAsync>d__2")]
private static Task`1<ImmutableDictionary`2<Document, ImmutableArray`1<Diagnostic>>> GetDocumentDiagnosticsToFixAsync(ImmutableArray`1<Diagnostic> diagnostics, ImmutableArray`1<Project> projects, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.FixAllContextHelper/<GetTreeToDocumentMapAsync>d__3")]
private static Task`1<ImmutableDictionary`2<SyntaxTree, Document>> GetTreeToDocumentMapAsync(ImmutableArray`1<Project> projects, CancellationToken cancellationToken);
    private static Document GetReportedDocument(Diagnostic diagnostic, ImmutableDictionary`2<SyntaxTree, Document> treeToDocumentsMap);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Meziantou.Analyzer.Internals.DefaultObjectPool`1 : ObjectPool`1<T> {
    private Func`1<T> _createFunc;
    private Func`2<T, bool> _returnFunc;
    private int _maxCapacity;
    private int _numItems;
    private protected ConcurrentQueue`1<T> Items;
    [NullableAttribute("2")]
private protected T FastItem;
    public DefaultObjectPool`1(IPooledObjectPolicy`1<T> policy);
    public DefaultObjectPool`1(IPooledObjectPolicy`1<T> policy, int maximumRetained);
    public virtual T Get();
    public virtual void Return(T obj);
    private protected bool ReturnCore(T obj);
}
internal class Meziantou.Analyzer.Internals.DefaultObjectPoolProvider : ObjectPoolProvider {
    [CompilerGeneratedAttribute]
private int <MaximumRetained>k__BackingField;
    public int MaximumRetained { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaximumRetained();
    [CompilerGeneratedAttribute]
public void set_MaximumRetained(int value);
    [NullableContextAttribute("1")]
public virtual ObjectPool`1<T> Create(IPooledObjectPolicy`1<T> policy);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Meziantou.Analyzer.Internals.DefaultPooledObjectPolicy`1 : PooledObjectPolicy`1<T> {
    public virtual T Create();
    public virtual bool Return(T obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Meziantou.Analyzer.Internals.DisposableObjectPool`1 : DefaultObjectPool`1<T> {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isDisposed;
    public DisposableObjectPool`1(IPooledObjectPolicy`1<T> policy);
    public DisposableObjectPool`1(IPooledObjectPolicy`1<T> policy, int maximumRetained);
    public virtual T Get();
    public virtual void Return(T obj);
    public sealed virtual void Dispose();
    [NullableContextAttribute("2")]
private static void DisposeItem(T item);
    [CompilerGeneratedAttribute]
private void <Get>g__ThrowObjectDisposedException|3_0();
}
[NullableContextAttribute("1")]
internal interface Meziantou.Analyzer.Internals.IPooledObjectPolicy`1 {
    public abstract virtual T Create();
    public abstract virtual bool Return(T obj);
}
internal interface Meziantou.Analyzer.Internals.IResettable {
    public abstract virtual bool TryReset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Meziantou.Analyzer.Internals.LocationExtensions : object {
    [ExtensionAttribute]
internal static Nullable`1<FileLinePositionSpan> GetLineSpan(SyntaxToken token, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Nullable`1<FileLinePositionSpan> GetLineSpan(SyntaxNode node, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Nullable`1<FileLinePositionSpan> GetLineSpan(SyntaxTrivia trivia, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Nullable`1<FileLinePositionSpan> GetLineSpan(SyntaxNodeOrToken nodeOrToken, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Nullable`1<int> GetLine(SyntaxToken token, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Nullable`1<int> GetLine(SyntaxNode node, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Nullable`1<int> GetLine(SyntaxTrivia trivia, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Nullable`1<int> GetEndLine(SyntaxToken token, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Nullable`1<int> GetEndLine(SyntaxNode node, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Nullable`1<int> GetEndLine(SyntaxTrivia trivia, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static bool SpansMultipleLines(SyntaxNode node, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static bool SpansMultipleLines(SyntaxTrivia trivia, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Meziantou.Analyzer.Internals.ObjectPool : object {
    [CompilerGeneratedAttribute]
private static ObjectPool`1<StringBuilder> <SharedStringBuilderPool>k__BackingField;
    public static ObjectPool`1<StringBuilder> SharedStringBuilderPool { get; }
    private static ObjectPool();
    [CompilerGeneratedAttribute]
public static ObjectPool`1<StringBuilder> get_SharedStringBuilderPool();
    public static ObjectPool`1<T> Create(IPooledObjectPolicy`1<T> policy);
    public static ObjectPool`1<StringBuilder> CreateStringBuilderPool();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Meziantou.Analyzer.Internals.ObjectPool`1 : object {
    public abstract virtual T Get();
    public abstract virtual void Return(T obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Meziantou.Analyzer.Internals.ObjectPoolProvider : object {
    public ObjectPool`1<T> Create();
    public abstract virtual ObjectPool`1<T> Create(IPooledObjectPolicy`1<T> policy);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Meziantou.Analyzer.Internals.PooledObjectPolicy`1 : object {
    public abstract virtual T Create();
    public abstract virtual bool Return(T obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Meziantou.Analyzer.Internals.StringBuilderPooledObjectPolicy : PooledObjectPolicy`1<StringBuilder> {
    [CompilerGeneratedAttribute]
private int <InitialCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumRetainedCapacity>k__BackingField;
    public int InitialCapacity { get; public set; }
    public int MaximumRetainedCapacity { get; public set; }
    [CompilerGeneratedAttribute]
public int get_InitialCapacity();
    [CompilerGeneratedAttribute]
public void set_InitialCapacity(int value);
    [CompilerGeneratedAttribute]
public int get_MaximumRetainedCapacity();
    [CompilerGeneratedAttribute]
public void set_MaximumRetainedCapacity(int value);
    public virtual StringBuilder Create();
    public virtual bool Return(StringBuilder obj);
}
[ExtensionAttribute]
internal static class Meziantou.Analyzer.Internals.SyntaxNodeExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T WithoutTrailingSpacesTrivia(T syntaxNode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Meziantou.Analyzer.MethodSymbolExtensions : object {
    private static String[] MsTestNamespaceParts;
    private static String[] NunitNamespaceParts;
    private static String[] XunitNamespaceParts;
    private static MethodSymbolExtensions();
    [ExtensionAttribute]
public static bool IsInterfaceImplementation(IMethodSymbol symbol);
    [ExtensionAttribute]
public static bool IsInterfaceImplementation(IPropertySymbol symbol);
    [ExtensionAttribute]
public static bool IsInterfaceImplementation(IEventSymbol symbol);
    [ExtensionAttribute]
private static bool IsInterfaceImplementation(ISymbol symbol);
    [ExtensionAttribute]
public static IMethodSymbol GetImplementingInterfaceSymbol(IMethodSymbol symbol);
    [ExtensionAttribute]
private static ISymbol GetImplementingInterfaceSymbol(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsUnitTestMethod(IMethodSymbol methodSymbol);
}
[ExtensionAttribute]
internal static class Meziantou.Analyzer.NamespaceSymbolExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsNamespace(INamespaceSymbol namespaceSymbol, String[] namespaceParts);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Meziantou.Analyzer.OperationExtensions : object {
    [ExtensionAttribute]
public static OperationList GetChildOperations(IOperation operation);
    [ExtensionAttribute]
public static LanguageVersion GetCSharpLanguageVersion(IOperation operation);
    [ExtensionAttribute]
public static LanguageVersion GetCSharpLanguageVersion(SyntaxNode syntaxNode);
    [ExtensionAttribute]
public static LanguageVersion GetCSharpLanguageVersion(SyntaxTree syntaxTree);
    [ExtensionAttribute]
public static LanguageVersion GetCSharpLanguageVersion(Compilation compilation);
    [IteratorStateMachineAttribute("Meziantou.Analyzer.OperationExtensions/<Ancestors>d__5")]
[ExtensionAttribute]
public static IEnumerable`1<IOperation> Ancestors(IOperation operation);
    [ExtensionAttribute]
public static bool IsInNameofOperation(IOperation operation);
    [ExtensionAttribute]
public static ITypeSymbol GetActualType(IOperation operation);
    [ExtensionAttribute]
public static IOperation UnwrapImplicitConversionOperations(IOperation operation);
    [ExtensionAttribute]
public static IOperation UnwrapConversionOperations(IOperation operation);
    [ExtensionAttribute]
public static IOperation UnwrapLabelOperations(IOperation operation);
    [ExtensionAttribute]
public static bool HasArgumentOfType(IInvocationOperation operation, ITypeSymbol argumentTypeSymbol);
    [ExtensionAttribute]
public static IMethodSymbol GetContainingMethod(IOperation operation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool IsInStaticContext(IOperation operation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool IsInStaticContext(IOperation operation, CancellationToken cancellationToken, Int32& parentStaticMemberStartPosition);
    [IteratorStateMachineAttribute("Meziantou.Analyzer.OperationExtensions/<LookupAvailableSymbols>d__15")]
[ExtensionAttribute]
public static IEnumerable`1<ISymbol> LookupAvailableSymbols(IOperation operation, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static bool <LookupAvailableSymbols>g__IsValid|15_0(Location location, int operationLocation, Nullable`1<int> staticContextStart);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Meziantou.Analyzer.RuleIdentifiers : object {
    public static string UseStringComparison;
    public static string UseStringComparer;
    public static string UseNamedParameter;
    public static string UseConfigureAwaitFalse;
    public static string UseArrayEmpty;
    public static string UseStringEqualsInsteadOfEqualityOperator;
    public static string MissingCommaInObjectInitializer;
    public static string MissingStructLayoutAttribute;
    public static string MissingTimeoutParameterForRegex;
    public static string MarkAttributesWithAttributeUsageAttribute;
    public static string UseIFormatProviderParameter;
    public static string DoNotRaiseReservedExceptionType;
    public static string TypesShouldNotExtendSystemApplicationException;
    public static string DoNotRaiseApplicationException;
    public static string ArgumentExceptionShouldSpecifyArgumentName;
    public static string PreferReturningCollectionAbstractionInsteadOfImplementation;
    public static string AbstractTypesShouldNotHaveConstructors;
    public static string DoNotDeclareStaticMembersOnGenericTypes;
    public static string UseEventArgsEmpty;
    public static string UseListOfTMethodsInsteadOfEnumerableExtensionMethods;
    public static string DoNotUseStringGetHashCode;
    public static string ReturnTaskFromResultInsteadOfReturningNull;
    public static string UseRegexExplicitCaptureOptions;
    public static string DoNotUseEqualityComparerDefaultOfString;
    public static string DoNotRaiseNotImplementedException;
    public static string FixToDo;
    public static string DoNotRemoveOriginalExceptionFromThrowStatement;
    public static string OptimizeStringBuilderUsage;
    public static string OptimizeEnumerable_CombineMethods;
    public static string DuplicateEnumerable_OrderBy;
    public static string OptimizeEnumerable_Count;
    public static string UseAnOverloadThatHasCancellationToken;
    public static string DontTagInstanceFieldsWithThreadStaticAttribute;
    public static string DontUseDangerousThreadingMethods;
    public static string MakeClassStatic;
    public static string RemoveEmptyStatement;
    public static string MakeMethodStatic;
    public static string DoNotUseServerCertificateValidationCallback;
    public static string UseAnOverloadThatHasCancellationTokenWhenACancellationTokenIsAvailable;
    public static string MakePropertyStatic;
    public static string DoNotUseBlockingCallInAsyncContext;
    public static string UseNameofOperator;
    public static string RemoveUselessToString;
    public static string DoNotUseBlockingCall;
    public static string UseEventHandlerOfT;
    public static string DeclareTypesInNamespaces;
    public static string FileNameMustMatchTypeName;
    public static string TypeNameMustNotMatchNamespace;
    public static string ValidateArgumentsCorrectly;
    public static string MethodShouldNotBeTooLong;
    public static string ReplaceEnumToStringWithNameof;
    public static string ClassMustBeSealed;
    public static string EmbedCaughtExceptionAsInnerException;
    public static string DoNotUseFinalizer;
    public static string DoNotCallVirtualMethodInConstructor;
    public static string AttributeNameShouldEndWithAttribute;
    public static string ExceptionNameShouldEndWithException;
    public static string EventArgsNameShouldEndWithEventArgs;
    public static string TheReturnValueOfStreamReadShouldBeUsed;
    public static string MethodOverridesShouldNotChangeParameterDefaults;
    public static string NonFlagsEnumsShouldNotBeMarkedWithFlagsAttribute;
    public static string OptimizeEnumerable_WhereBeforeOrderBy;
    public static string AvoidLockingOnPubliclyAccessibleInstance;
    public static string DoNotUseDefaultEqualsOnValueType;
    public static string StructWithDefaultEqualsImplementationUsedAsAKey;
    public static string UseGuidEmpty;
    public static string NotNullIfNotNullArgumentShouldExist;
    public static string NonConstantStaticFieldsShouldNotBeVisible;
    public static string ObsoleteAttributesShouldIncludeExplanations;
    public static string AvoidUsingRedundantElse;
    public static string DoNotThrowFromFinallyBlock;
    public static string AvoidComparisonWithBoolConstant;
    public static string AvoidCultureSensitiveMethod;
    public static string DoNotUseImplicitCultureSensitiveToString;
    public static string DoNotUseImplicitCultureSensitiveToStringInterpolation;
    public static string ClassWithEqualsTShouldImplementIEquatableT;
    public static string OptimizeEnumerable_CastInsteadOfSelect;
    public static string FlowCancellationTokenInAwaitForEachWhenACancellationTokenIsAvailable;
    public static string FlowCancellationTokenInAwaitForEach;
    public static string PreserveParamsOnOverride;
    public static string DoNotNaNInComparisons;
    public static string ConstructorArgumentParametersShouldExistInConstructors;
    public static string LocalVariablesShouldNotHideSymbols;
    public static string AnonymousDelegatesShouldNotBeUsedToUnsubscribeFromEvents;
    public static string DoNotThrowFromFinalizer;
    public static string ParametersWithDefaultValueShouldBeMarkedWithOptionalParameter;
    public static string DefaultValueShouldNotBeUsedWhenParameterDefaultValueIsMeant;
    public static string OptimizeStartsWith;
    public static string RemoveEmptyBlock;
    public static string SenderShouldBeThisForInstanceEvents;
    public static string SenderShouldBeNullForStaticEvents;
    public static string EventArgsSenderShouldNotBeNullForEvents;
    public static string ClassWithCompareToTShouldImplementIComparableT;
    public static string ClassWithEqualsTShouldOverrideEqualsObject;
    public static string ClassImplementingIComparableTShouldImplementIEquatableT;
    public static string TheComparisonOperatorsShouldBeOverriddenWhenImplementingIComparable;
    public static string UseIndexerInsteadOfElementAt;
    public static string DoNotUseZeroToInitializeAnEnumValue;
    public static string AwaitTaskBeforeDisposingResources;
    public static string StringShouldNotContainsNonDeterministicEndOfLine;
    public static string MakeStructMemberReadOnly;
    public static string DoNotUseEqualityOperatorsForSpanOfChar;
    public static string DotNotUseNameFromBCL;
    public static string AvoidClosureWhenUsingConcurrentDictionary;
    public static string AvoidClosureWhenUsingConcurrentDictionaryByUsingFactoryArg;
    public static string DoNotUseCultureSensitiveObjectToString;
    public static string SimplifyCallerArgumentExpression;
    public static string AddOverloadWithSpanOrMemory;
    public static string UseRegexSourceGenerator;
    public static string UseStringCreateInsteadOfFormattableString;
    public static string OptimizeEnumerable_UseCountInsteadOfAny;
    public static string UseDateTimeUnixEpoch;
    public static string UseDateTimeOffsetUnixEpoch;
    public static string DoNotUseUnknownParameterForRazorComponent;
    public static string SupplyParameterFromQueryRequiresParameterAttributeForRazorComponent;
    public static string EditorRequiredRequiresParameterAttributeForRazorComponent;
    public static string JSInvokableMethodsMustBePublic;
    public static string JSRuntimeMustNotBeUsedInOnInitialized;
    public static string UseJSRuntimeInvokeVoidAsyncWhenReturnValueIsNotUsed;
    public static string DoNotOverwriteRazorComponentParameterValue;
    public static string SupplyParameterFromQueryRequiresRoutableComponent;
    public static string SequenceNumberMustBeAConstant;
    public static string LoggerParameterType;
    public static string LoggerParameterType_InvalidType;
    public static string LoggerParameterType_DuplicateRule;
    public static string UseStringEqualsInsteadOfIsPattern;
    public static string UseIsPatternInsteadOfSequenceEqual;
    public static string TaskInUsing;
    public static string ObjectGetTypeOnTypeInstance;
    public static string ThrowIfNullWithNonNullableInstance;
    public static string DoNotImplicitlyConvertDateTimeToDateTimeOffset;
    public static string UseDateTimeOffsetInsteadOfDateTime;
    public static string AwaitAwaitableMethodInSyncMethod;
    public static string LoggerParameterType_MissingConfiguration;
    public static string RawStringShouldNotContainsNonDeterministicEndOfLine;
    public static string MethodsReturningAnAwaitableTypeMustHaveTheAsyncSuffix;
    public static string MethodsNotReturningAnAwaitableTypeMustNotHaveTheAsyncSuffix;
    public static string LoggerParameterType_Serilog;
    public static string IfElseBranchesAreIdentical;
    public static string UsePatternMatchingForNullCheck;
    public static string UsePatternMatchingForNullEquality;
    public static string PrimaryConstructorParameterShouldBeReadOnly;
    public static string UseOperatingSystemInsteadOfRuntimeInformation;
    public static string UnsafeAccessorAttribute_InvalidSignature;
    public static string UnsafeAccessorAttribute_NameMustBeSet;
    public static string DoNotUseAsyncDelegateForSyncDelegate;
    public static string UsePatternMatchingForEqualityComparison;
    public static string UsePatternMatchingForInequalityComparison;
    public static string DoNotUseToStringIfObject;
    public static string DebuggerDisplayAttributeShouldContainValidExpressions;
    public static string UseTaskUnwrap;
    public static string DoNotLogClassifiedData;
    public static string UseLangwordInXmlComment;
    public static string DoNotUseAsyncVoid;
    public static string MethodsReturningIAsyncEnumerableMustHaveTheAsyncSuffix;
    public static string MethodsNotReturningIAsyncEnumerableMustNotHaveTheAsyncSuffix;
    public static string UseSystemThreadingLockInsteadOfObject;
    public static string OptimizeEnumerable_UseOrder;
    public static string UseContainsKeyInsteadOfTryGetValue;
    public static string UseShellExecuteMustBeSet;
    public static string UseProcessStartOverload;
    public static string UseShellExecuteMustBeFalse;
    public static string GetHelpUri(string identifier);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.AbstractTypesShouldNotHaveConstructorsFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.AbstractTypesShouldNotHaveConstructorsFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.AbstractTypesShouldNotHaveConstructorsFixer/<MakeConstructorProtected>d__4")]
private static Task`1<Document> MakeConstructorProtected(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
}
internal static class Meziantou.Analyzer.Rules.ArgumentExceptionShouldSpecifyArgumentNameAnalyzerCommon : object {
    [NullableAttribute("1")]
internal static string ArgumentNameKey;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.ArgumentExceptionShouldSpecifyArgumentNameFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.ArgumentExceptionShouldSpecifyArgumentNameFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.ArgumentExceptionShouldSpecifyArgumentNameFixer/<UseNameof>d__4")]
private static Task`1<Document> UseNameof(Document document, SyntaxNode nodeToFix, string argumentName, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.AvoidComparisonWithBoolConstantFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.AvoidComparisonWithBoolConstantFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.AvoidComparisonWithBoolConstantFixer/<RemoveComparisonWithBoolConstant>d__4")]
private static Task`1<Document> RemoveComparisonWithBoolConstant(Document document, Diagnostic diagnostic, SyntaxNode nodeToFix, CancellationToken cancellationToken);
}
internal static class Meziantou.Analyzer.Rules.AvoidUsingRedundantElseAnalyzerCommon : object {
    [NullableContextAttribute("1")]
internal static IEnumerable`1<SyntaxNode> GetElseClauseChildren(ElseClauseSyntax elseClauseSyntax);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Meziantou.Analyzer.Rules.AvoidUsingRedundantElseFixAllProvider : DocumentBasedFixAllProvider {
    [CompilerGeneratedAttribute]
private static AvoidUsingRedundantElseFixAllProvider <Instance>k__BackingField;
    public static AvoidUsingRedundantElseFixAllProvider Instance { get; }
    protected string CodeActionTitle { get; }
    private static AvoidUsingRedundantElseFixAllProvider();
    [CompilerGeneratedAttribute]
public static AvoidUsingRedundantElseFixAllProvider get_Instance();
    protected virtual string get_CodeActionTitle();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.AvoidUsingRedundantElseFixAllProvider/<FixAllInDocumentAsync>d__5")]
protected virtual Task`1<SyntaxNode> FixAllInDocumentAsync(FixAllContext fixAllContext, Document document, ImmutableArray`1<Diagnostic> diagnostics);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.AvoidUsingRedundantElseFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.AvoidUsingRedundantElseFixer/<RemoveRedundantElseClausesInDocument>d__4")]
internal static Task`1<Document> RemoveRedundantElseClausesInDocument(Document document, ImmutableArray`1<Diagnostic> diagnostics, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.AvoidUsingRedundantElseFixer/<RemoveRedundantElse>d__5")]
private static Task`1<Document> RemoveRedundantElse(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.ClassMustBeSealedFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.ClassMustBeSealedFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.ClassMustBeSealedFixer/<AddSealedModifier>d__4")]
private static Task`1<Document> AddSealedModifier(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.CommaFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.CommaFixer/<GetTransformedDocumentAsync>d__4")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.DoNotRemoveOriginalExceptionFromThrowStatementFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.DoNotRemoveOriginalExceptionFromThrowStatementFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.DoNotRemoveOriginalExceptionFromThrowStatementFixer/<Fix>d__4")]
private static Task`1<Document> Fix(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
}
internal enum Meziantou.Analyzer.Rules.DoNotUseBlockingCallInAsyncContextData : Enum {
    public int value__;
    public static DoNotUseBlockingCallInAsyncContextData Unknown;
    public static DoNotUseBlockingCallInAsyncContextData Thread_Sleep;
    public static DoNotUseBlockingCallInAsyncContextData Task_Wait;
    public static DoNotUseBlockingCallInAsyncContextData Task_Wait_Delay;
    public static DoNotUseBlockingCallInAsyncContextData TaskAwaiter_GetResult;
    public static DoNotUseBlockingCallInAsyncContextData CreateAsyncScope;
    public static DoNotUseBlockingCallInAsyncContextData Overload;
    public static DoNotUseBlockingCallInAsyncContextData Task_Result;
    public static DoNotUseBlockingCallInAsyncContextData Using;
    public static DoNotUseBlockingCallInAsyncContextData UsingDeclarator;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.DoNotUseBlockingCallInAsyncContextFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.DoNotUseBlockingCallInAsyncContextFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.DoNotUseBlockingCallInAsyncContextFixer/<ReplaceWithAwaitUsing>d__4")]
private static Task`1<Document> ReplaceWithAwaitUsing(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.DoNotUseBlockingCallInAsyncContextFixer/<ReplaceWithMethodName>d__5")]
private static Task`1<Document> ReplaceWithMethodName(Document document, SyntaxNode nodeToFix, string methodName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.DoNotUseBlockingCallInAsyncContextFixer/<ReplaceTaskResultWithAwait>d__6")]
private static Task`1<Document> ReplaceTaskResultWithAwait(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.DoNotUseBlockingCallInAsyncContextFixer/<ReplaceTaskWaitWithAwait>d__7")]
private static Task`1<Document> ReplaceTaskWaitWithAwait(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.DoNotUseBlockingCallInAsyncContextFixer/<UseTaskDelay>d__8")]
private static Task`1<Document> UseTaskDelay(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.DoNotUseEqualityComparerDefaultOfStringFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.DoNotUseEqualityComparerDefaultOfStringFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.DoNotUseEqualityComparerDefaultOfStringFixer/<MakeConstructorProtected>d__4")]
private static Task`1<Document> MakeConstructorProtected(Document document, SyntaxNode nodeToFix, string comparerName, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.DoNotUseEqualityOperatorsForSpanOfCharFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.DoNotUseEqualityOperatorsForSpanOfCharFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.DoNotUseEqualityOperatorsForSpanOfCharFixer/<Refactor>d__4")]
private static Task`1<Document> Refactor(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.DoNotUseStringGetHashCodeFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.DoNotUseStringGetHashCodeFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.DoNotUseStringGetHashCodeFixer/<AddStringComparison>d__4")]
private static Task`1<Document> AddStringComparison(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
}
internal static class Meziantou.Analyzer.Rules.EqualityShouldBeCorrectlyImplementedAnalyzerCommon : object {
    [NullableContextAttribute("1")]
public static bool IsEqualsOfTMethod(IMethodSymbol symbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.EqualityShouldBeCorrectlyImplementedFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.EqualityShouldBeCorrectlyImplementedFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.EqualityShouldBeCorrectlyImplementedFixer/<ImplementIEquatable>d__4")]
private static Task`1<Document> ImplementIEquatable(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.EventsShouldHaveProperArgumentsFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.EventsShouldHaveProperArgumentsFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.EventsShouldHaveProperArgumentsFixer/<UseThis>d__4")]
private static Task`1<Document> UseThis(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.MakeClassStaticFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.MakeClassStaticFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.MakeClassStaticFixer/<AddStaticModifier>d__4")]
private static Task`1<Document> AddStaticModifier(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.MakeMemberReadOnlyFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [NullableContextAttribute("2")]
public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.MakeMemberReadOnlyFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.MakeMemberReadOnlyFixer/<MakeReadOnly>d__4")]
private static Task`1<Document> MakeReadOnly(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.MakeMethodStaticFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.MakeMethodStaticFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.MakeMethodStaticFixer/<AddStaticModifier>d__4")]
private static Task`1<Document> AddStaticModifier(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.MarkAttributesWithAttributeUsageAttributeFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.MarkAttributesWithAttributeUsageAttributeFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.MarkAttributesWithAttributeUsageAttributeFixer/<Refactor>d__4")]
private static Task`1<Document> Refactor(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.MethodOverridesShouldNotChangeParameterDefaultsFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.MethodOverridesShouldNotChangeParameterDefaultsFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.MethodOverridesShouldNotChangeParameterDefaultsFixer/<RemoveValue>d__4")]
private static Task`1<Document> RemoveValue(Document document, ParameterSyntax nodeToFix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.MethodOverridesShouldNotChangeParameterDefaultsFixer/<Refactor>d__5")]
private static Task`1<Document> Refactor(Document document, ParameterSyntax nodeToFix, string value, CancellationToken cancellationToken);
}
internal static class Meziantou.Analyzer.Rules.NamedParameterAnalyzerCommon : object {
    [NullableContextAttribute("1")]
public static int ArgumentIndex(ArgumentSyntax argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.NamedParameterFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.NamedParameterFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.NamedParameterFixer/<AddParameterName>d__4")]
private static Task`1<Document> AddParameterName(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    private static Nullable`1<ImmutableArray`1<IParameterSymbol>> FindParameters(SemanticModel semanticModel, SyntaxNode node, CancellationToken cancellationToken);
}
internal enum Meziantou.Analyzer.Rules.OptimizeLinqUsageData : Enum {
    public int value__;
    public static OptimizeLinqUsageData None;
    public static OptimizeLinqUsageData UseLengthProperty;
    public static OptimizeLinqUsageData UseLongLengthProperty;
    public static OptimizeLinqUsageData UseCountProperty;
    public static OptimizeLinqUsageData UseFindMethod;
    public static OptimizeLinqUsageData UseFindMethodWithConversion;
    public static OptimizeLinqUsageData UseIndexer;
    public static OptimizeLinqUsageData UseIndexerFirst;
    public static OptimizeLinqUsageData UseIndexerLast;
    public static OptimizeLinqUsageData DuplicatedOrderBy;
    public static OptimizeLinqUsageData CombineWhereWithNextMethod;
    public static OptimizeLinqUsageData UseFalse;
    public static OptimizeLinqUsageData UseTrue;
    public static OptimizeLinqUsageData UseAny;
    public static OptimizeLinqUsageData UseNotAny;
    public static OptimizeLinqUsageData UseTakeAndCount;
    public static OptimizeLinqUsageData UseSkipAndNotAny;
    public static OptimizeLinqUsageData UseSkipAndAny;
    public static OptimizeLinqUsageData UseCastInsteadOfSelect;
    public static OptimizeLinqUsageData UseTrueForAllMethod;
    public static OptimizeLinqUsageData UseTrueForAllMethodWithConversion;
    public static OptimizeLinqUsageData UseExistsMethod;
    public static OptimizeLinqUsageData UseExistsMethodWithConversion;
    public static OptimizeLinqUsageData UseOrder;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.OptimizeLinqUsageFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeLinqUsageFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static bool TryGetInvocationExpressionAncestor(SyntaxNode& nodeToFix);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeLinqUsageFixer/<UseAny>d__5")]
private static Task`1<Document> UseAny(Document document, Diagnostic diagnostic, SyntaxNode nodeToFix, bool constantValue, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeLinqUsageFixer/<UseTakeAndCount>d__6")]
private static Task`1<Document> UseTakeAndCount(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeLinqUsageFixer/<UseSkipAndAny>d__7")]
private static Task`1<Document> UseSkipAndAny(Document document, Diagnostic diagnostic, SyntaxNode nodeToFix, bool comparandValue, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeLinqUsageFixer/<UseCastInsteadOfSelect>d__8")]
private static Task`1<Document> UseCastInsteadOfSelect(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeLinqUsageFixer/<UseConstantValue>d__9")]
private static Task`1<Document> UseConstantValue(Document document, SyntaxNode nodeToFix, bool constantValue, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeLinqUsageFixer/<UseOrderInsteadOfOrderBy>d__10")]
private static Task`1<Document> UseOrderInsteadOfOrderBy(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeLinqUsageFixer/<UseLengthProperty>d__11")]
private static Task`1<Document> UseLengthProperty(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeLinqUsageFixer/<UseLongLengthProperty>d__12")]
private static Task`1<Document> UseLongLengthProperty(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeLinqUsageFixer/<UseCountProperty>d__13")]
private static Task`1<Document> UseCountProperty(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeLinqUsageFixer/<UseListMethod>d__14")]
private static Task`1<Document> UseListMethod(Document document, SyntaxNode nodeToFix, string methodName, bool convertPredicate, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeLinqUsageFixer/<UseIndexer>d__15")]
private static Task`1<Document> UseIndexer(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeLinqUsageFixer/<UseIndexerFirst>d__16")]
private static Task`1<Document> UseIndexerFirst(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeLinqUsageFixer/<UseIndexerLast>d__17")]
private static Task`1<Document> UseIndexerLast(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeLinqUsageFixer/<RemoveDuplicatedOrderBy>d__18")]
private static Task`1<Document> RemoveDuplicatedOrderBy(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeLinqUsageFixer/<UseThenBy>d__19")]
private static Task`1<Document> UseThenBy(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeLinqUsageFixer/<CombineWhereWithNextMethod>d__20")]
private static Task`1<Document> CombineWhereWithNextMethod(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static SyntaxNode ReplaceParameter(IAnonymousFunctionOperation method, string newParameterName);
    private static MemberAccessExpressionSyntax GetMemberAccessExpression(SyntaxNode invocationExpressionSyntax);
    private static ExpressionSyntax GetParentMemberExpression(SyntaxNode invocationExpressionSyntax);
    [CompilerGeneratedAttribute]
internal static string <UseIndexerLast>g__GetMemberName|17_0(<>c__DisplayClass17_0& );
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static SyntaxNode <CombineWhereWithNextMethod>g__CombineArguments|20_0(IArgumentOperation argument1, IArgumentOperation argument2, <>c__DisplayClass20_0& );
    [CompilerGeneratedAttribute]
internal static SyntaxNode <CombineWhereWithNextMethod>g__PrepareSyntaxNode|20_1(SyntaxGenerator generator, IDelegateCreationOperation delegateCreationOperation, string parameterName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.OptimizeStartsWithFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeStartsWithFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeStartsWithFixer/<Fix>d__4")]
private static Task`1<Document> Fix(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    private static void RemoveStringComparisonArgument(DocumentEditor editor, IInvocationOperation invocation);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static IInvocationOperation <Fix>g__GetInvocationOperation|4_0(IOperation operation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Meziantou.Analyzer.Rules.OptimizeStringBuilderUsageAnalyzerCommon : object {
    public static string GetConstStringValue(IOperation operation);
    public static bool TryGetConstStringValue(IOperation operation, StringBuilder sb);
}
internal enum Meziantou.Analyzer.Rules.OptimizeStringBuilderUsageData : Enum {
    public int value__;
    public static OptimizeStringBuilderUsageData None;
    public static OptimizeStringBuilderUsageData RemoveArgument;
    public static OptimizeStringBuilderUsageData RemoveMethod;
    public static OptimizeStringBuilderUsageData ReplaceWithChar;
    public static OptimizeStringBuilderUsageData SplitStringInterpolation;
    public static OptimizeStringBuilderUsageData SplitAddOperator;
    public static OptimizeStringBuilderUsageData RemoveToString;
    public static OptimizeStringBuilderUsageData ReplaceToStringWithAppendFormat;
    public static OptimizeStringBuilderUsageData ReplaceStringFormatWithAppendFormat;
    public static OptimizeStringBuilderUsageData ReplaceSubstring;
    public static OptimizeStringBuilderUsageData ReplaceStringJoinWithAppendJoin;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.OptimizeStringBuilderUsageFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeStringBuilderUsageFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeStringBuilderUsageFixer/<SplitStringInterpolation>d__4")]
private static Task`1<Document> SplitStringInterpolation(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeStringBuilderUsageFixer/<SplitAddOperator>d__5")]
private static Task`1<Document> SplitAddOperator(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeStringBuilderUsageFixer/<RemoveToString>d__6")]
private static Task`1<Document> RemoveToString(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeStringBuilderUsageFixer/<ReplaceWithAppendFormat>d__7")]
private static Task`1<Document> ReplaceWithAppendFormat(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeStringBuilderUsageFixer/<ReplaceStringFormatWithAppendFormat>d__8")]
private static Task`1<Document> ReplaceStringFormatWithAppendFormat(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeStringBuilderUsageFixer/<ReplaceStringJoinWithAppendJoin>d__9")]
private static Task`1<Document> ReplaceStringJoinWithAppendJoin(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeStringBuilderUsageFixer/<ReplaceSubstring>d__10")]
private static Task`1<Document> ReplaceSubstring(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeStringBuilderUsageFixer/<ReplaceArgWithCharacter>d__11")]
private static Task`1<Document> ReplaceArgWithCharacter(Document document, Diagnostic diagnostic, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeStringBuilderUsageFixer/<RemoveArgument>d__12")]
private static Task`1<Document> RemoveArgument(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.OptimizeStringBuilderUsageFixer/<RemoveMethod>d__13")]
private static Task`1<Document> RemoveMethod(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static SyntaxNode <ReplaceWithAppendFormat>g__GetFormatExpression|7_0(IOperation formatOperation, <>c__DisplayClass7_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.ParameterAttributeForRazorComponentFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.ParameterAttributeForRazorComponentFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.ParameterAttributeForRazorComponentFixer/<AddAttribute>d__4")]
private static Task`1<Document> AddAttribute(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.PreserveParamsOnOverrideFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.PreserveParamsOnOverrideFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.PreserveParamsOnOverrideFixer/<AddParams>d__4")]
private static Task`1<Document> AddParams(Document document, ParameterSyntax nodeToFix, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.RemoveEmptyStatementFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.RemoveEmptyStatementFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.RemoveEmptyStatementFixer/<Remove>d__4")]
private static Task`1<Document> Remove(Document document, StatementSyntax statementSyntax, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.RemoveEmptyStatementFixer/<ReplaceWithEmptyBlock>d__5")]
private static Task`1<Document> ReplaceWithEmptyBlock(Document document, StatementSyntax statementSyntax, CancellationToken cancellationToken);
    private static bool ShouldReplaceWithEmptyBlock(StatementSyntax statementSyntax);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.RemoveUselessToStringFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.RemoveUselessToStringFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.RemoveUselessToStringFixer/<Remove>d__4")]
private static Task`1<Document> Remove(Document document, InvocationExpressionSyntax expression, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.ReplaceEnumToStringWithNameofFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.ReplaceEnumToStringWithNameofFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.ReplaceEnumToStringWithNameofFixer/<UseNameof>d__4")]
private static Task`1<Document> UseNameof(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
}
internal static class Meziantou.Analyzer.Rules.ReturnTaskFromResultInsteadOfReturningNullAnalyzerCommon : object {
    [NullableContextAttribute("1")]
internal static IMethodSymbol FindContainingMethod(IOperation operation, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
internal static IMethodSymbol FindContainingMethod(SemanticModel semanticModel, SyntaxNode syntaxNode, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.ReturnTaskFromResultInsteadOfReturningNullFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.ReturnTaskFromResultInsteadOfReturningNullFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.ReturnTaskFromResultInsteadOfReturningNullFixer/<UseTaskCompleted>d__4")]
private static Task`1<Document> UseTaskCompleted(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.ReturnTaskFromResultInsteadOfReturningNullFixer/<UseTaskFromResult>d__5")]
private static Task`1<Document> UseTaskFromResult(Document document, SyntaxNode nodeToFix, INamedTypeSymbol typeSymbol, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.SimplifyCallerArgumentExpressionFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.SimplifyCallerArgumentExpressionFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.SimplifyCallerArgumentExpressionFixer/<RemoveArgument>d__4")]
private static Task`1<Document> RemoveArgument(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Meziantou.Analyzer.Rules.StringExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static LineSplitEnumerator SplitLines(string str);
    [ExtensionAttribute]
public static LineSplitEnumerator SplitLines(ReadOnlySpan`1<char> str);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.StringShouldNotContainsNonDeterministicEndOfLineFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.StringShouldNotContainsNonDeterministicEndOfLineFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.StringShouldNotContainsNonDeterministicEndOfLineFixer/<FixString>d__4")]
private static Task`1<Document> FixString(Document document, SyntaxNode nodeToFix, string newLine, CancellationToken cancellationToken);
    private static SyntaxNode ReplaceString(SyntaxGenerator generator, string text, string newLine, SyntaxTriviaList trivia);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.UseAnOverloadThatHasCancellationTokenFixer_Argument : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseAnOverloadThatHasCancellationTokenFixer_Argument/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseAnOverloadThatHasCancellationTokenFixer_Argument/<FixInvocation>d__4")]
private static Task`1<Document> FixInvocation(Document document, InvocationExpressionSyntax nodeToFix, int index, string parameterName, string cancellationTokenText, bool isEnumeratorCancellation, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.UseAnOverloadThatHasCancellationTokenFixer_AwaitForEach : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseAnOverloadThatHasCancellationTokenFixer_AwaitForEach/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseAnOverloadThatHasCancellationTokenFixer_AwaitForEach/<FixInvocation>d__4")]
private static Task`1<Document> FixInvocation(Document document, ExpressionSyntax expressionSyntax, string cancellationTokenExpression, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.UseArrayEmptyFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseArrayEmptyFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseArrayEmptyFixer/<ConvertToArrayEmpty>d__4")]
private static Task`1<Document> ConvertToArrayEmpty(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    private static ITypeSymbol GetArrayElementType(SyntaxNode arrayCreationExpression, SemanticModel semanticModel, CancellationToken cancellationToken);
    private static SyntaxNode GenerateArrayEmptyInvocation(SyntaxGenerator generator, ITypeSymbol elementType, SemanticModel semanticModel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.UseConfigureAwaitFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseConfigureAwaitFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseConfigureAwaitFixer/<AddConfigureAwait>d__4")]
private static Task`1<Document> AddConfigureAwait(CodeFixContext context, SyntaxNode nodeToFix, bool value, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static ExpressionSyntax <AddConfigureAwait>g__AppendConfigureAwait|4_0(SyntaxNode expressionSyntax, <>c__DisplayClass4_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.UseDateTimeUnixEpochFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseDateTimeUnixEpochFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseDateTimeUnixEpochFixer/<Remove>d__4")]
private static Task`1<Document> Remove(Document document, SyntaxNode node, string type, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.UseEventArgsEmptyFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseEventArgsEmptyFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseEventArgsEmptyFixer/<Fix>d__4")]
private static Task`1<Document> Fix(CodeFixContext context, SyntaxNode nodeToFix, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.UseGuidEmptyFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseGuidEmptyFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseGuidEmptyFixer/<ConvertToArrayEmpty>d__4")]
private static Task`1<Document> ConvertToArrayEmpty(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    private static SyntaxNode GenerateArrayEmptyInvocation(SyntaxGenerator generator, SemanticModel semanticModel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.UseIsPatternInsteadOfSequenceEqualFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseIsPatternInsteadOfSequenceEqualFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseIsPatternInsteadOfSequenceEqualFixer/<UseIs>d__4")]
private static Task`1<Document> UseIs(Document document, SyntaxNode nodeToFix, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.UseJSRuntimeInvokeVoidAsyncWhenReturnValueIsNotUsedFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseJSRuntimeInvokeVoidAsyncWhenReturnValueIsNotUsedFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseJSRuntimeInvokeVoidAsyncWhenReturnValueIsNotUsedFixer/<Update>d__4")]
private static Task`1<Document> Update(Document document, InvocationExpressionSyntax invocation, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.UseLangwordInXmlCommentFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseLangwordInXmlCommentFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseLangwordInXmlCommentFixer/<Fix>d__4")]
private static Task`1<Document> Fix(Document document, SyntaxNode nodeToFix, string keyword, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Meziantou.Analyzer.Rules.UsePatternMatchingForEqualityComparisonsCommon : object {
    public static bool IsNull(IOperation operation);
    public static bool IsConstantLiteral(IOperation operation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.UsePatternMatchingForEqualityComparisonsFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UsePatternMatchingForEqualityComparisonsFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UsePatternMatchingForEqualityComparisonsFixer/<Update>d__4")]
private static Task`1<Document> Update(Document document, BinaryExpressionSyntax node, CancellationToken cancellationToken);
    private static IsPatternExpressionSyntax MakeIsNull(IBinaryOperation binaryOperation, IOperation expressionOperation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Meziantou.Analyzer.Rules.UseRegexSourceGeneratorAnalyzerCommon : object {
    internal static string PatternIndexName;
    internal static string RegexOptionsIndexName;
    internal static string RegexTimeoutIndexName;
    internal static string RegexTimeoutName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.UseRegexSourceGeneratorFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [NullableContextAttribute("2")]
public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseRegexSourceGeneratorFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseRegexSourceGeneratorFixer/<ConvertToSourceGenerator>d__4")]
private static Task`1<Document> ConvertToSourceGenerator(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static SyntaxNode GetNode(ImmutableArray`1<IArgumentOperation> args, ImmutableDictionary`2<string, string> properties, string name);
    private static Nullable`1<int> TryParseInt32(ImmutableDictionary`2<string, string> properties, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.UseStringComparerFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseStringComparerFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseStringComparerFixer/<AddStringComparer>d__4")]
private static Task`1<Document> AddStringComparer(Document document, SyntaxNode nodeToFix, string comparerName, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.UseStringComparisonFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseStringComparisonFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseStringComparisonFixer/<AddStringComparison>d__4")]
private static Task`1<Document> AddStringComparison(Document document, SyntaxNode nodeToFix, string stringComparisonMode, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.UseStringCreateInsteadOfFormattableStringFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseStringCreateInsteadOfFormattableStringFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseStringCreateInsteadOfFormattableStringFixer/<Fix>d__4")]
private static Task`1<Document> Fix(Document document, InvocationExpressionSyntax nodeToFix, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.UseStringEqualsFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseStringEqualsFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseStringEqualsFixer/<RefactorStringEquals>d__4")]
private static Task`1<Document> RefactorStringEquals(Document document, SyntaxNode nodeToFix, string comparisonMode, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseStringEqualsFixer/<RefactorExtensionMethod>d__5")]
private static Task`1<Document> RefactorExtensionMethod(Document document, SyntaxNode nodeToFix, string methodName, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.UseStructLayoutAttributeFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseStructLayoutAttributeFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.UseStructLayoutAttributeFixer/<Refactor>d__4")]
private static Task`1<Document> Refactor(Document document, SyntaxNode nodeToFix, LayoutKind layoutKind, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Meziantou.Analyzer.Rules.ValidateArgumentsCorrectlyFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.ValidateArgumentsCorrectlyFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Meziantou.Analyzer.Rules.ValidateArgumentsCorrectlyFixer/<Refactor>d__4")]
private static Task`1<Document> Refactor(Document document, Diagnostic diagnostic, SyntaxNode nodeToFix, CancellationToken cancellationToken);
    private static ParameterListSyntax CopyParametersWithoutDefaultValues(ParameterListSyntax parameterListSyntax);
    private static ParameterListSyntax RemoveEnumeratorCancellationAttribute(ParameterListSyntax parameterListSyntax, SemanticModel semanticModel, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Meziantou.Analyzer.SymbolExtensions : object {
    [ExtensionAttribute]
public static bool IsEqualTo(ISymbol symbol, ISymbol expectedType);
    [ExtensionAttribute]
public static bool IsVisibleOutsideOfAssembly(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsOperator(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsOverrideOrInterfaceImplementation(ISymbol symbol);
    [ExtensionAttribute]
public static bool Override(IMethodSymbol symbol, ISymbol baseSymbol);
    [ExtensionAttribute]
public static bool IsConst(ISymbol symbol);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Meziantou.Analyzer.SymbolExtensions/<GetAllMembers>d__6")]
[ExtensionAttribute]
public static IEnumerable`1<ISymbol> GetAllMembers(ITypeSymbol symbol);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsTopLevelStatement(ISymbol symbol, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool IsTopLevelStatementsEntryPointMethod(IMethodSymbol methodSymbol);
    [ExtensionAttribute]
public static bool IsTopLevelStatementsEntryPointType(INamedTypeSymbol typeSymbol);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ITypeSymbol GetSymbolType(ISymbol symbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Meziantou.Analyzer.SyntaxTokenListExtensions : object {
    private static String[] ModifiersSortOrder;
    private static SyntaxTokenListExtensions();
    private static String[] GetModifiersOrder();
    [ExtensionAttribute]
public static SyntaxTokenList Remove(SyntaxTokenList list, SyntaxKind syntaxToRemove);
    [ExtensionAttribute]
public static SyntaxTokenList Add(SyntaxTokenList list, SyntaxKind syntaxKind);
    [ExtensionAttribute]
public static SyntaxTokenList Add(SyntaxTokenList list, SyntaxToken syntaxToken);
    private static int IndexOf(SyntaxToken token);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Meziantou.Analyzer.TypeSymbolExtensions : object {
    [NullableAttribute("1")]
private static String[] Microsoft_VisualStudio_TestTools_UnitTesting;
    [NullableAttribute("1")]
private static String[] NUnit_Framework;
    [NullableAttribute("1")]
private static String[] Xunit;
    private static TypeSymbolExtensions();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IList`1<INamedTypeSymbol> GetAllInterfacesIncludingThis(ITypeSymbol type);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool InheritsFrom(ITypeSymbol classSymbol, ITypeSymbol baseClassType);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool Implements(ITypeSymbol classSymbol, ITypeSymbol interfaceType);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsOrImplements(ITypeSymbol symbol, ITypeSymbol interfaceType);
    [ExtensionAttribute]
public static AttributeData GetAttribute(ISymbol symbol, ITypeSymbol attributeType, bool inherits);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool HasAttribute(ISymbol symbol, ITypeSymbol attributeType, bool inherits);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsOrInheritFrom(ITypeSymbol symbol, ITypeSymbol expectedType);
    [ExtensionAttribute]
public static bool IsEqualToAny(ITypeSymbol symbol, ITypeSymbol[] expectedTypes);
    [ExtensionAttribute]
public static bool IsEqualToAny(ITypeSymbol symbol, ITypeSymbol expectedType1);
    [ExtensionAttribute]
public static bool IsEqualToAny(ITypeSymbol symbol, ITypeSymbol expectedType1, ITypeSymbol expectedType2);
    [ExtensionAttribute]
public static bool IsEqualToAny(ITypeSymbol symbol, ITypeSymbol expectedType1, ITypeSymbol expectedType2, ITypeSymbol expectedType3);
    [ExtensionAttribute]
public static bool IsObject(ITypeSymbol symbol);
    [ExtensionAttribute]
public static bool IsString(ITypeSymbol symbol);
    [ExtensionAttribute]
public static bool IsChar(ITypeSymbol symbol);
    [ExtensionAttribute]
public static bool IsInt32(ITypeSymbol symbol);
    [ExtensionAttribute]
public static bool IsBoolean(ITypeSymbol symbol);
    [ExtensionAttribute]
public static bool IsDateTime(ITypeSymbol symbol);
    [ExtensionAttribute]
public static bool IsEnumeration(ITypeSymbol symbol);
    [ExtensionAttribute]
public static INamedTypeSymbol GetEnumerationType(ITypeSymbol symbol);
    [ExtensionAttribute]
public static bool IsNumberType(ITypeSymbol symbol);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsUnitTestClass(ITypeSymbol typeSymbol);
    [ExtensionAttribute]
public static ITypeSymbol GetUnderlyingNullableTypeOrSelf(ITypeSymbol typeSymbol);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class PolyfillExtensions : object {
    [ExtensionAttribute]
public static TValue GetOrAdd(ConcurrentDictionary`2<TKey, TValue> target, TKey key, Func`3<TKey, TArg, TValue> valueFactory, TArg factoryArgument);
    [ExtensionAttribute]
public static TValue GetValueOrDefault(IReadOnlyDictionary`2<TKey, TValue> dictionary, TKey key, TValue defaultValue);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TValue GetValueOrDefault(IReadOnlyDictionary`2<TKey, TValue> dictionary, TKey key);
    [ExtensionAttribute]
public static void Deconstruct(KeyValuePair`2<TKey, TValue> target, TKey& key, TValue& value);
    [ExtensionAttribute]
public static bool TryDequeue(Queue`1<T> target, T& result);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ReadOnlySpan`1<T> AsSpan(ImmutableArray`1<T> target, Range range);
    [AsyncStateMachineAttribute("PolyfillExtensions/<WaitForExitAsync>d__6")]
[ExtensionAttribute]
public static Task WaitForExitAsync(Process target, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static int Read(Stream target, Span`1<byte> buffer);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("PolyfillExtensions/<ReadAsync>d__9")]
[ExtensionAttribute]
public static ValueTask`1<int> ReadAsync(Stream target, Memory`1<byte> buffer, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static int ReadAtLeast(Stream target, Span`1<byte> buffer, int minimumBytes, bool throwOnEndOfStream);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("PolyfillExtensions/<ReadAtLeastAsync>d__11")]
[ExtensionAttribute]
public static ValueTask`1<int> ReadAtLeastAsync(Stream target, Memory`1<byte> buffer, int minimumBytes, bool throwOnEndOfStream, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static void Write(Stream target, ReadOnlySpan`1<byte> buffer);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("PolyfillExtensions/<WriteAsync>d__13")]
[ExtensionAttribute]
public static ValueTask WriteAsync(Stream target, ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask`1<string> ReadLineAsync(StreamReader target, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static ValueTask`1<int> ReadAsync(TextReader target, Memory`1<char> buffer, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<string> ReadToEndAsync(TextReader target, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static ValueTask WriteAsync(TextWriter target, ReadOnlyMemory`1<char> buffer, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<TKey, TAccumulate>> AggregateBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TKey, TAccumulate> seedSelector, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<TKey, TAccumulate>> AggregateBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<TKey, int>> CountBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> keyComparer);
    [IteratorStateMachineAttribute("PolyfillExtensions/<DistinctBy>d__21`2")]
[ExtensionAttribute]
public static IEnumerable`1<TSource> DistinctBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [IteratorStateMachineAttribute("PolyfillExtensions/<DistinctBy>d__22`2")]
[ExtensionAttribute]
public static IEnumerable`1<TSource> DistinctBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [IteratorStateMachineAttribute("PolyfillExtensions/<Index>d__23`1")]
[ExtensionAttribute]
public static IEnumerable`1<ValueTuple`2<int, TSource>> Index(IEnumerable`1<TSource> source);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TSource MaxBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TSource MaxBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TSource MinBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TSource MinBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<T> OrderDescending(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<T> OrderDescending(IEnumerable`1<T> source, IComparer`1<T> comparer);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<T> Order(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<T> Order(IEnumerable`1<T> source, IComparer`1<T> comparer);
    [ExtensionAttribute]
public static HashSet`1<TSource> ToHashSet(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static HashSet`1<TSource> ToHashSet(IEnumerable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<ValueTuple`2<TFirst, TSecond>> Zip(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static int CommonPrefixLength(ReadOnlySpan`1<T> span, ReadOnlySpan`1<T> other);
    [ExtensionAttribute]
public static int CommonPrefixLength(ReadOnlySpan`1<T> span, ReadOnlySpan`1<T> other, IEqualityComparer`1<T> comparer);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static int CommonPrefixLength(Span`1<T> span, ReadOnlySpan`1<T> other);
    [ExtensionAttribute]
public static int CommonPrefixLength(Span`1<T> span, ReadOnlySpan`1<T> other, IEqualityComparer`1<T> comparer);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool ContainsAnyExcept(ReadOnlySpan`1<T> span, ReadOnlySpan`1<T> values);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool ContainsAnyExcept(ReadOnlySpan`1<T> span, T value);
    [ExtensionAttribute]
public static bool ContainsAnyExcept(ReadOnlySpan`1<T> span, T value0, T value1);
    [ExtensionAttribute]
public static bool ContainsAnyExcept(ReadOnlySpan`1<T> span, T value0, T value1, T value2);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool ContainsAnyExcept(Span`1<T> span, ReadOnlySpan`1<T> values);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool ContainsAnyExcept(Span`1<T> span, T value);
    [ExtensionAttribute]
public static bool ContainsAnyExcept(Span`1<T> span, T value0, T value1);
    [ExtensionAttribute]
public static bool ContainsAnyExcept(Span`1<T> span, T value0, T value1, T value2);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool ContainsAny(Span`1<T> span, ReadOnlySpan`1<T> values);
    [ExtensionAttribute]
public static bool ContainsAny(Span`1<T> span, T value0, T value1);
    [ExtensionAttribute]
public static bool ContainsAny(Span`1<T> span, T value0, T value1, T value2);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool Contains(ReadOnlySpan`1<T> span, T value);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool Contains(Span`1<T> span, T value);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static int IndexOfAnyExcept(ReadOnlySpan`1<T> span, ReadOnlySpan`1<T> values);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static int IndexOfAnyExcept(ReadOnlySpan`1<T> span, T value);
    [ExtensionAttribute]
public static int IndexOfAnyExcept(ReadOnlySpan`1<T> span, T value0, T value1);
    [ExtensionAttribute]
public static int IndexOfAnyExcept(ReadOnlySpan`1<T> span, T value0, T value1, T value2);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static int IndexOfAnyExcept(Span`1<T> span, ReadOnlySpan`1<T> values);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static int IndexOfAnyExcept(Span`1<T> span, T value);
    [ExtensionAttribute]
public static int IndexOfAnyExcept(Span`1<T> span, T value0, T value1);
    [ExtensionAttribute]
public static int IndexOfAnyExcept(Span`1<T> span, T value0, T value1, T value2);
    [ExtensionAttribute]
public static void CopyTo(HttpContent target, Stream stream, TransportContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("PolyfillExtensions/<CopyToAsync>d__61")]
[ExtensionAttribute]
public static Task CopyToAsync(HttpContent target, Stream stream, TransportContext context, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task CopyToAsync(HttpContent target, Stream stream, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Stream ReadAsStream(HttpContent httpContent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Stream ReadAsStream(HttpContent httpContent);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static int Send(UdpClient client, ReadOnlySpan`1<byte> datagram, IPEndPoint endPoint);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static int Send(UdpClient client, ReadOnlySpan`1<byte> datagram, string hostname, int port);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static ValueTask`1<int> SendAsync(UdpClient client, ReadOnlyMemory`1<byte> datagram, IPEndPoint endPoint, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static ValueTask`1<int> SendAsync(UdpClient client, ReadOnlyMemory`1<byte> datagram, string hostname, int port, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static ValueTask`1<int> SendAsync(UdpClient client, ReadOnlyMemory`1<byte> datagram, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool Contains(string target, char value);
    [ExtensionAttribute]
public static bool Contains(string target, char value, StringComparison comparisonType);
    [ExtensionAttribute]
public static bool Contains(string target, string value, StringComparison comparisonType);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static void CopyTo(string target, Span`1<char> destination);
    [ExtensionAttribute]
public static bool EndsWith(string target, char value);
    [ExtensionAttribute]
public static int GetHashCode(string target, StringComparison comparisonType);
    [ExtensionAttribute]
public static int IndexOf(string target, char value, StringComparison comparisonType);
    [ExtensionAttribute]
public static string Replace(string target, string oldValue, string newValue, StringComparison comparisonType);
    [ExtensionAttribute]
public static string ReplaceLineEndings(string target, string replacementText);
    [ExtensionAttribute]
public static string ReplaceLineEndings(string target);
    [ExtensionAttribute]
public static String[] Split(string target, char separator, int count, StringSplitOptions options);
    [ExtensionAttribute]
public static String[] Split(string target, char separator, StringSplitOptions options);
    [ExtensionAttribute]
public static bool StartsWith(string target, char value);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool TryCopyTo(string target, Span`1<char> destination);
    [ExtensionAttribute]
public static string GetString(Encoding target, ReadOnlySpan`1<byte> bytes);
    [ExtensionAttribute]
public static StringBuilder Append(StringBuilder target, ReadOnlyMemory`1<char> value);
    [ExtensionAttribute]
public static StringBuilder Append(StringBuilder target, ReadOnlySpan`1<char> value);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder target, char separator, Object[] values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder target, char separator, String[] values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder target, string separator, Object[] values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder target, string separator, String[] values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder target, char separator, IEnumerable`1<T> values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder target, string separator, IEnumerable`1<T> values);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static StringBuilder Replace(StringBuilder target, ReadOnlySpan`1<char> oldValue, ReadOnlySpan`1<char> newValue);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static StringBuilder Replace(StringBuilder target, ReadOnlySpan`1<char> oldValue, ReadOnlySpan`1<char> newValue, int startIndex, int count);
    [ExtensionAttribute]
public static Task CancelAsync(CancellationTokenSource target);
    [ExtensionAttribute]
public static Task`1<TResult> WaitAsync(Task`1<TResult> task, CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("PolyfillExtensions/<ToBlockingEnumerable>d__97`1")]
[ExtensionAttribute]
[UnsupportedOSPlatformAttribute("browser")]
public static IEnumerable`1<T> ToBlockingEnumerable(IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool IsAssignableTo(Type target, Type targetType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Count = {Count}")]
internal class System.Collections.Generic.PriorityQueue`2 : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2[] _nodes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IComparer`1<TPriority> _comparer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private UnorderedItemsCollection<TElement, TPriority> _unorderedItems;
    private int _size;
    private int _version;
    private static int Arity;
    private static int Log2Arity;
    public int Count { get; }
    public IComparer`1<TPriority> Comparer { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public UnorderedItemsCollection<TElement, TPriority> UnorderedItems { get; }
    public PriorityQueue`2(int initialCapacity);
    public PriorityQueue`2(IComparer`1<TPriority> comparer);
    public PriorityQueue`2(int initialCapacity, IComparer`1<TPriority> comparer);
    public PriorityQueue`2(IEnumerable`1<ValueTuple`2<TElement, TPriority>> items);
    public PriorityQueue`2(IEnumerable`1<ValueTuple`2<TElement, TPriority>> items, IComparer`1<TPriority> comparer);
    public int get_Count();
    public IComparer`1<TPriority> get_Comparer();
    public UnorderedItemsCollection<TElement, TPriority> get_UnorderedItems();
    public void Enqueue(TElement element, TPriority priority);
    public TElement Peek();
    public TElement Dequeue();
    public TElement DequeueEnqueue(TElement element, TPriority priority);
    public bool TryDequeue(TElement& element, TPriority& priority);
    public bool TryPeek(TElement& element, TPriority& priority);
    public TElement EnqueueDequeue(TElement element, TPriority priority);
    public void EnqueueRange(IEnumerable`1<ValueTuple`2<TElement, TPriority>> items);
    public void EnqueueRange(IEnumerable`1<TElement> elements, TPriority priority);
    public void Clear();
    public int EnsureCapacity(int capacity);
    public void TrimExcess();
    private void Grow(int minCapacity);
    private void RemoveRootNode();
    private static int GetParentIndex(int index);
    private static int GetFirstChildIndex(int index);
    private void Heapify();
    private void MoveUpDefaultComparer(ValueTuple`2<TElement, TPriority> node, int nodeIndex);
    private void MoveUpCustomComparer(ValueTuple`2<TElement, TPriority> node, int nodeIndex);
    private void MoveDownDefaultComparer(ValueTuple`2<TElement, TPriority> node, int nodeIndex);
    private void MoveDownCustomComparer(ValueTuple`2<TElement, TPriority> node, int nodeIndex);
    private static IComparer`1<TPriority> InitializeComparer(IComparer`1<TPriority> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Collections.Generic.ReferenceEqualityComparer : object {
    [CompilerGeneratedAttribute]
private static ReferenceEqualityComparer <Instance>k__BackingField;
    public static ReferenceEqualityComparer Instance { get; }
    private static ReferenceEqualityComparer();
    [CompilerGeneratedAttribute]
public static ReferenceEqualityComparer get_Instance();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(object x, object y);
    [NullableContextAttribute("2")]
public sealed virtual int GetHashCode(object obj);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("28108")]
internal class System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute : Attribute {
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public DynamicallyAccessedMembersAttribute(DynamicallyAccessedMemberTypes memberTypes);
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
}
[FlagsAttribute]
internal enum System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes : Enum {
    public int value__;
    public static DynamicallyAccessedMemberTypes None;
    public static DynamicallyAccessedMemberTypes PublicParameterlessConstructor;
    public static DynamicallyAccessedMemberTypes PublicConstructors;
    public static DynamicallyAccessedMemberTypes NonPublicConstructors;
    public static DynamicallyAccessedMemberTypes PublicMethods;
    public static DynamicallyAccessedMemberTypes NonPublicMethods;
    public static DynamicallyAccessedMemberTypes PublicFields;
    public static DynamicallyAccessedMemberTypes NonPublicFields;
    public static DynamicallyAccessedMemberTypes PublicNestedTypes;
    public static DynamicallyAccessedMemberTypes NonPublicNestedTypes;
    public static DynamicallyAccessedMemberTypes PublicProperties;
    public static DynamicallyAccessedMemberTypes NonPublicProperties;
    public static DynamicallyAccessedMemberTypes PublicEvents;
    public static DynamicallyAccessedMemberTypes NonPublicEvents;
    public static DynamicallyAccessedMemberTypes Interfaces;
    public static DynamicallyAccessedMemberTypes All;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("352")]
internal class System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <MemberSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    public string MemberSignature { get; }
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public Type Type { get; }
    public string TypeName { get; }
    public string AssemblyName { get; }
    public string Condition { get; public set; }
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature, Type type);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature, string typeName, string assemblyName);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, Type type);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, string typeName, string assemblyName);
    [CompilerGeneratedAttribute]
public string get_MemberSignature();
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6143")]
internal class System.Diagnostics.CodeAnalysis.ExperimentalAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DiagnosticId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <UrlFormat>k__BackingField;
    public string DiagnosticId { get; }
    [NullableAttribute("2")]
public string UrlFormat { get; public set; }
    public ExperimentalAttribute(string diagnosticId);
    [CompilerGeneratedAttribute]
public string get_DiagnosticId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_UrlFormat();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_UrlFormat(string value);
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("736")]
internal class System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    [NullableContextAttribute("1")]
public RequiresAssemblyFilesAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("100")]
internal class System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    [NullableAttribute("2")]
public string Url { get; public set; }
    public RequiresDynamicCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("100")]
internal class System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    [NullableAttribute("2")]
public string Url { get; public set; }
    public RequiresUnreferencedCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Url(string value);
}
[AttributeUsageAttribute("32")]
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.StringSyntaxAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    public static string CompositeFormat;
    public static string DateOnlyFormat;
    public static string DateTimeFormat;
    public static string EnumFormat;
    public static string GuidFormat;
    public static string Json;
    public static string NumericFormat;
    public static string Regex;
    public static string TimeOnlyFormat;
    public static string TimeSpanFormat;
    public static string Uri;
    public static string Xml;
    public string Syntax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public StringSyntaxAttribute(string syntax);
    public StringSyntaxAttribute(string syntax, Object[] arguments);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
internal class System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute : Attribute {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <CheckId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Justification>k__BackingField;
    [NullableAttribute("1")]
public string Category { get; }
    [NullableAttribute("1")]
public string CheckId { get; }
    public string Scope { get; public set; }
    public string Target { get; public set; }
    public string MessageId { get; public set; }
    public string Justification { get; public set; }
    [NullableContextAttribute("1")]
public UnconditionalSuppressMessageAttribute(string category, string checkId);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Category();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_CheckId();
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public string get_Justification();
    [CompilerGeneratedAttribute]
public void set_Justification(string value);
}
[AttributeUsageAttribute("2240")]
internal class System.Diagnostics.CodeAnalysis.UnscopedRefAttribute : Attribute {
}
[AttributeUsageAttribute("108")]
internal class System.Diagnostics.StackTraceHiddenAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.HashCode : ValueType {
    private static UInt32 s_seed;
    private static UInt32 Prime1;
    private static UInt32 Prime2;
    private static UInt32 Prime3;
    private static UInt32 Prime4;
    private static UInt32 Prime5;
    private UInt32 _v1;
    private UInt32 _v2;
    private UInt32 _v3;
    private UInt32 _v4;
    private UInt32 _queue1;
    private UInt32 _queue2;
    private UInt32 _queue3;
    private UInt32 _length;
    private static HashCode();
    private static UInt32 GenerateGlobalSeed();
    public static int Combine(T1 value1);
    public static int Combine(T1 value1, T2 value2);
    public static int Combine(T1 value1, T2 value2, T3 value3);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8);
    private static void Initialize(UInt32& v1, UInt32& v2, UInt32& v3, UInt32& v4);
    private static UInt32 Round(UInt32 hash, UInt32 input);
    private static UInt32 QueueRound(UInt32 hash, UInt32 queuedValue);
    private static UInt32 MixState(UInt32 v1, UInt32 v2, UInt32 v3, UInt32 v4);
    private static UInt32 MixEmptyState();
    private static UInt32 MixFinal(UInt32 hash);
    public void Add(T value);
    public void Add(T value, IEqualityComparer`1<T> comparer);
    private void Add(int value);
    public int ToHashCode();
    [ObsoleteAttribute("HashCode is a mutable struct and should not be compared with other HashCodes. Use ToHashCode to retrieve the computed hash code.", "True")]
[EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[ObsoleteAttribute("HashCode is a mutable struct and should not be compared with other HashCodes.", "True")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
}
[IsReadOnlyAttribute]
internal class System.Index : ValueType {
    private int _value;
    public static Index Start { get; }
    public static Index End { get; }
    public int Value { get; }
    public bool IsFromEnd { get; }
    public Index(int value, bool fromEnd);
    private Index(int value);
    public static Index get_Start();
    public static Index get_End();
    public static Index FromStart(int value);
    public static Index FromEnd(int value);
    public int get_Value();
    public bool get_IsFromEnd();
    public int GetOffset(int length);
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public sealed virtual bool Equals(Index other);
    public virtual int GetHashCode();
    public static Index op_Implicit(int value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
private string ToStringFromEnd();
}
internal class System.Net.Http.ReadOnlyMemoryContent : HttpContent {
    private ReadOnlyMemory`1<byte> _content;
    public ReadOnlyMemoryContent(ReadOnlyMemory`1<byte> content);
    [NullableContextAttribute("1")]
protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual bool TryComputeLength(Int64& length);
    [NullableContextAttribute("1")]
protected virtual Task`1<Stream> CreateContentReadStreamAsync();
}
[IsReadOnlyAttribute]
[ExcludeFromCodeCoverageAttribute]
internal class System.Range : ValueType {
    [CompilerGeneratedAttribute]
private Index <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Index <End>k__BackingField;
    public Index Start { get; }
    public Index End { get; }
    public static Range All { get; }
    public Range(Index start, Index end);
    [CompilerGeneratedAttribute]
public Index get_Start();
    [CompilerGeneratedAttribute]
public Index get_End();
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public sealed virtual bool Equals(Range other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static Range StartAt(Index start);
    public static Range EndAt(Index end);
    public static Range get_All();
    public ValueTuple`2<int, int> GetOffsetAndLength(int length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1036")]
internal class System.Runtime.CompilerServices.CollectionBuilderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <BuilderType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public Type BuilderType { get; }
    public string MethodName { get; }
    public CollectionBuilderAttribute(Type builderType, string methodName);
    [CompilerGeneratedAttribute]
public Type get_BuilderType();
    [CompilerGeneratedAttribute]
public string get_MethodName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public static string RefStructs;
    public static string RequiredMembers;
    public string FeatureName { get; }
    public bool IsOptional { get; public set; }
    public CompilerFeatureRequiredAttribute(string featureName);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public void set_IsOptional(bool value);
}
[AttributeUsageAttribute("1")]
internal class System.Runtime.CompilerServices.DisableRuntimeMarshallingAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Arguments>k__BackingField;
    public String[] Arguments { get; }
    public InterpolatedStringHandlerArgumentAttribute(string argument);
    public InterpolatedStringHandlerArgumentAttribute(String[] arguments);
    [CompilerGeneratedAttribute]
public String[] get_Arguments();
}
[AttributeUsageAttribute("12")]
internal class System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.CompilerServices.ModuleInitializerAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("396")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
[AttributeUsageAttribute("1774")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.SkipLocalsInitAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.SuppressGCTransitionAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute : Attribute {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] CallConvs;
    [NullableAttribute("2")]
public string EntryPoint;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2047")]
internal class System.Runtime.Versioning.ObsoletedOSPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    [NullableContextAttribute("1")]
public ObsoletedOSPlatformAttribute(string platformName);
    [NullableContextAttribute("1")]
public ObsoletedOSPlatformAttribute(string platformName, string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6143")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.Versioning.RequiresPreviewFeaturesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    public RequiresPreviewFeaturesAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[AttributeUsageAttribute("2047")]
internal class System.Runtime.Versioning.SupportedOSPlatformAttribute : Attribute {
    [NullableContextAttribute("1")]
public SupportedOSPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("448")]
internal class System.Runtime.Versioning.SupportedOSPlatformGuardAttribute : Attribute {
    [NullableContextAttribute("1")]
public SupportedOSPlatformGuardAttribute(string platformName);
}
[AttributeUsageAttribute("1")]
internal class System.Runtime.Versioning.TargetPlatformAttribute : Attribute {
    [NullableContextAttribute("1")]
public TargetPlatformAttribute(string platformName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2047")]
internal class System.Runtime.Versioning.UnsupportedOSPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; }
    [NullableContextAttribute("1")]
public UnsupportedOSPlatformAttribute(string platformName);
    [NullableContextAttribute("1")]
public UnsupportedOSPlatformAttribute(string platformName, string message);
    [CompilerGeneratedAttribute]
public string get_Message();
}
[AttributeUsageAttribute("448")]
internal class System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute : Attribute {
    [NullableContextAttribute("1")]
public UnsupportedOSPlatformGuardAttribute(string platformName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Threading.Tasks.TaskToAsyncResult : object {
    public static IAsyncResult Begin(Task task, AsyncCallback callback, object state);
    public static void End(IAsyncResult asyncResult);
    public static TResult End(IAsyncResult asyncResult);
    public static Task Unwrap(IAsyncResult asyncResult);
    public static Task`1<TResult> Unwrap(IAsyncResult asyncResult);
}
