[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Meziantou.Analyzer.CompilationExtensions : object {
    [ExtensionAttribute]
public static bool IsNet9OrGreater(Compilation compilation);
    [ExtensionAttribute]
public static INamedTypeSymbol GetBestTypeByMetadataName(Compilation compilation, string fullyQualifiedMetadataName);
    [ExtensionAttribute]
private static SymbolVisibility GetResultantVisibility(ISymbol symbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Meziantou.Analyzer.Configurations.AnalyzerOptionsExtensions : object {
    [ExtensionAttribute]
public static string GetConfigurationValue(AnalyzerOptions options, SyntaxTree syntaxTree, string key, string defaultValue);
    [ExtensionAttribute]
public static string GetConfigurationValue(AnalyzerOptions options, IOperation operation, string key, string defaultValue);
    [ExtensionAttribute]
public static bool GetConfigurationValue(AnalyzerOptions options, SyntaxTree syntaxTree, string key, bool defaultValue);
    [ExtensionAttribute]
public static Nullable`1<bool> GetConfigurationValue(AnalyzerOptions options, SyntaxTree syntaxTree, string key, Nullable`1<bool> defaultValue);
    [ExtensionAttribute]
public static int GetConfigurationValue(AnalyzerOptions options, SyntaxTree syntaxTree, string key, int defaultValue);
    [ExtensionAttribute]
public static Nullable`1<ReportDiagnostic> GetConfigurationValue(AnalyzerOptions options, SyntaxTree syntaxTree, string key, Nullable`1<ReportDiagnostic> defaultValue);
    [ExtensionAttribute]
public static string GetConfigurationValue(AnalyzerOptions options, ISymbol symbol, string key, string defaultValue);
    [ExtensionAttribute]
public static bool GetConfigurationValue(AnalyzerOptions options, ISymbol symbol, string key, bool defaultValue);
    [ExtensionAttribute]
public static bool TryGetConfigurationValue(AnalyzerOptions options, SyntaxTree syntaxTree, string key, String& value);
    [ExtensionAttribute]
public static bool TryGetConfigurationValue(AnalyzerOptions options, IOperation operation, string key, String& value);
    [ExtensionAttribute]
public static bool GetConfigurationValue(AnalyzerOptions options, IOperation operation, string key, bool defaultValue);
    private static bool ChangeType(string value, bool defaultValue);
    private static Nullable`1<bool> ChangeType(string value, Nullable`1<bool> defaultValue);
    private static int ChangeType(string value, int defaultValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Meziantou.Analyzer.ContextExtensions : object {
    private static Diagnostic CreateDiagnostic(DiagnosticDescriptor descriptor, Location location, ImmutableDictionary`2<string, string> properties, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, SyntaxReference syntaxReference, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, SyntaxReference syntaxReference, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, Location location, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, Location location, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, SyntaxNode syntax, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, SyntaxNode syntax, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, SyntaxToken token, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, SyntaxToken syntaxToken, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, ISymbol symbol, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, ISymbol symbol, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, IFieldSymbol symbol, DiagnosticFieldReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IFieldSymbol symbol, DiagnosticFieldReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, IMethodSymbol symbol, DiagnosticMethodReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IMethodSymbol symbol, DiagnosticMethodReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, IParameterSymbol symbol, DiagnosticParameterReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IParameterSymbol symbol, DiagnosticParameterReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, IPropertySymbol symbol, DiagnosticPropertyReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IPropertySymbol symbol, DiagnosticPropertyReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, IOperation operation, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IOperation operation, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, ILocalFunctionOperation operation, DiagnosticMethodReportOptions options, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IInvocationOperation operation, DiagnosticInvocationReportOptions options, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, AttributeData attribute, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(DiagnosticReporter context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, AttributeData attribute, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, SyntaxToken syntaxToken, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, SyntaxToken syntaxToken, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, SyntaxNode syntaxNode, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, SyntaxNode syntaxNode, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, ISymbol symbol, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, ISymbol symbol, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, IFieldSymbol symbol, DiagnosticFieldReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IFieldSymbol symbol, DiagnosticFieldReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, IMethodSymbol symbol, DiagnosticMethodReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IMethodSymbol symbol, DiagnosticMethodReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, IParameterSymbol symbol, DiagnosticParameterReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IParameterSymbol symbol, DiagnosticParameterReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, IPropertySymbol symbol, DiagnosticPropertyReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IPropertySymbol symbol, DiagnosticPropertyReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, Location location, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, Location location, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, SyntaxReference syntaxReference, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, SyntaxReference syntaxReference, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IInvocationOperation operation, DiagnosticInvocationReportOptions options, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, ILocalFunctionOperation operation, DiagnosticMethodReportOptions options, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, IOperation operation, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IOperation operation, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, AttributeData attribute, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SyntaxNodeAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, AttributeData attribute, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, SyntaxToken syntaxToken, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, SyntaxToken syntaxToken, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, SyntaxNode syntaxNode, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, SyntaxNode syntaxNode, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, ISymbol symbol, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, ISymbol symbol, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, IFieldSymbol symbol, DiagnosticFieldReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IFieldSymbol symbol, DiagnosticFieldReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, IMethodSymbol symbol, DiagnosticMethodReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IMethodSymbol symbol, DiagnosticMethodReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, IParameterSymbol symbol, DiagnosticParameterReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IParameterSymbol symbol, DiagnosticParameterReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, IPropertySymbol symbol, DiagnosticPropertyReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IPropertySymbol symbol, DiagnosticPropertyReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, Location location, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, Location location, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, SyntaxReference syntaxReference, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, SyntaxReference syntaxReference, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IInvocationOperation operation, DiagnosticInvocationReportOptions options, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, ILocalFunctionOperation operation, DiagnosticMethodReportOptions options, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, IOperation operation, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IOperation operation, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, AttributeData attribute, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(SymbolAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, AttributeData attribute, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, SyntaxToken syntaxToken, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, SyntaxToken syntaxToken, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, SyntaxNode syntaxNode, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, SyntaxNode syntaxNode, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, ISymbol symbol, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, ISymbol symbol, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, IFieldSymbol symbol, DiagnosticFieldReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IFieldSymbol symbol, DiagnosticFieldReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, IMethodSymbol symbol, DiagnosticMethodReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IMethodSymbol symbol, DiagnosticMethodReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, IParameterSymbol symbol, DiagnosticParameterReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IParameterSymbol symbol, DiagnosticParameterReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, IPropertySymbol symbol, DiagnosticPropertyReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IPropertySymbol symbol, DiagnosticPropertyReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, Location location, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, Location location, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, SyntaxReference syntaxReference, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, SyntaxReference syntaxReference, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IInvocationOperation operation, DiagnosticInvocationReportOptions options, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, ILocalFunctionOperation operation, DiagnosticMethodReportOptions options, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, IOperation operation, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IOperation operation, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, AttributeData attribute, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, AttributeData attribute, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, SyntaxToken syntaxToken, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, SyntaxToken syntaxToken, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, SyntaxNode syntaxNode, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, SyntaxNode syntaxNode, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, ISymbol symbol, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, ISymbol symbol, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, IFieldSymbol symbol, DiagnosticFieldReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IFieldSymbol symbol, DiagnosticFieldReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, IMethodSymbol symbol, DiagnosticMethodReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IMethodSymbol symbol, DiagnosticMethodReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, IParameterSymbol symbol, DiagnosticParameterReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IParameterSymbol symbol, DiagnosticParameterReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, IPropertySymbol symbol, DiagnosticPropertyReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IPropertySymbol symbol, DiagnosticPropertyReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, Location location, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, Location location, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, SyntaxReference syntaxReference, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, SyntaxReference syntaxReference, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IInvocationOperation operation, DiagnosticInvocationReportOptions options, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, ILocalFunctionOperation operation, DiagnosticMethodReportOptions options, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, IOperation operation, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IOperation operation, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, AttributeData attribute, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(OperationBlockAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, AttributeData attribute, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, SyntaxToken syntaxToken, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, SyntaxToken syntaxToken, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, SyntaxNode syntaxNode, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, SyntaxNode syntaxNode, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, ISymbol symbol, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, ISymbol symbol, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, IFieldSymbol symbol, DiagnosticFieldReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IFieldSymbol symbol, DiagnosticFieldReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, IMethodSymbol symbol, DiagnosticMethodReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IMethodSymbol symbol, DiagnosticMethodReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, IParameterSymbol symbol, DiagnosticParameterReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IParameterSymbol symbol, DiagnosticParameterReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, IPropertySymbol symbol, DiagnosticPropertyReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IPropertySymbol symbol, DiagnosticPropertyReportOptions reportOptions, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, Location location, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, Location location, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, SyntaxReference syntaxReference, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, SyntaxReference syntaxReference, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IInvocationOperation operation, DiagnosticInvocationReportOptions options, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, ILocalFunctionOperation operation, DiagnosticMethodReportOptions options, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, IOperation operation, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, IOperation operation, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, AttributeData attribute, String[] messageArgs);
    [ExtensionAttribute]
public static void ReportDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor descriptor, ImmutableDictionary`2<string, string> properties, AttributeData attribute, String[] messageArgs);
}
[FlagsAttribute]
public enum Meziantou.Analyzer.DiagnosticFieldReportOptions : Enum {
    public int value__;
    public static DiagnosticFieldReportOptions None;
    public static DiagnosticFieldReportOptions ReportOnReturnType;
}
[FlagsAttribute]
public enum Meziantou.Analyzer.DiagnosticInvocationReportOptions : Enum {
    public int value__;
    public static DiagnosticInvocationReportOptions None;
    public static DiagnosticInvocationReportOptions ReportOnMember;
}
[FlagsAttribute]
public enum Meziantou.Analyzer.DiagnosticMethodReportOptions : Enum {
    public int value__;
    public static DiagnosticMethodReportOptions None;
    public static DiagnosticMethodReportOptions ReportOnMethodName;
    public static DiagnosticMethodReportOptions ReportOnReturnType;
}
[FlagsAttribute]
public enum Meziantou.Analyzer.DiagnosticParameterReportOptions : Enum {
    public int value__;
    public static DiagnosticParameterReportOptions None;
    public static DiagnosticParameterReportOptions ReportOnType;
}
[FlagsAttribute]
public enum Meziantou.Analyzer.DiagnosticPropertyReportOptions : Enum {
    public int value__;
    public static DiagnosticPropertyReportOptions None;
    public static DiagnosticPropertyReportOptions ReportOnReturnType;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Meziantou.Analyzer.DiagnosticReporter : ValueType {
    private Action`1<Diagnostic> _reportDiagnostic;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public CancellationToken CancellationToken { get; }
    public DiagnosticReporter(SymbolAnalysisContext context);
    public DiagnosticReporter(OperationAnalysisContext context);
    public DiagnosticReporter(OperationBlockAnalysisContext context);
    public DiagnosticReporter(SyntaxNodeAnalysisContext context);
    public DiagnosticReporter(CompilationAnalysisContext context);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    public void ReportDiagnostic(Diagnostic diagnostic);
    public static DiagnosticReporter op_Implicit(SymbolAnalysisContext context);
    public static DiagnosticReporter op_Implicit(OperationAnalysisContext context);
    public static DiagnosticReporter op_Implicit(OperationBlockAnalysisContext context);
    public static DiagnosticReporter op_Implicit(SyntaxNodeAnalysisContext context);
    public static DiagnosticReporter op_Implicit(CompilationAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Meziantou.Analyzer.EnumerableExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> WhereNotNull(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static T SingleOrDefaultIfMultiple(IEnumerable`1<T> source);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Meziantou.Analyzer.Internals.AwaitableTypes : object {
    [NullableAttribute("1")]
private INamedTypeSymbol[] _taskOrValueTaskSymbols;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <TaskSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <TaskOfTSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <INotifyCompletionSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <AsyncMethodBuilderAttributeSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <IAsyncEnumerableSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <IAsyncEnumeratorSymbol>k__BackingField;
    private INamedTypeSymbol TaskSymbol { get; }
    private INamedTypeSymbol TaskOfTSymbol { get; }
    private INamedTypeSymbol INotifyCompletionSymbol { get; }
    private INamedTypeSymbol AsyncMethodBuilderAttributeSymbol { get; }
    public INamedTypeSymbol IAsyncEnumerableSymbol { get; }
    public INamedTypeSymbol IAsyncEnumeratorSymbol { get; }
    [NullableContextAttribute("1")]
public AwaitableTypes(Compilation compilation);
    [CompilerGeneratedAttribute]
private INamedTypeSymbol get_TaskSymbol();
    [CompilerGeneratedAttribute]
private INamedTypeSymbol get_TaskOfTSymbol();
    [CompilerGeneratedAttribute]
private INamedTypeSymbol get_INotifyCompletionSymbol();
    [CompilerGeneratedAttribute]
private INamedTypeSymbol get_AsyncMethodBuilderAttributeSymbol();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_IAsyncEnumerableSymbol();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_IAsyncEnumeratorSymbol();
    [NullableContextAttribute("1")]
public bool IsAwaitable(ITypeSymbol symbol, SemanticModel semanticModel, int position);
    [NullableContextAttribute("1")]
public bool IsAwaitable(ITypeSymbol symbol, Compilation compilation);
    [NullableContextAttribute("1")]
public bool DoesNotReturnVoidAndCanUseAsyncKeyword(IMethodSymbol method, SemanticModel semanticModel, CancellationToken cancellationToken);
    public bool IsAsyncBuildableAndNotVoid(ITypeSymbol symbol);
    private bool IsTaskOrValueTask(ITypeSymbol symbol);
    [NullableContextAttribute("1")]
private bool ConformsToAwaiterPattern(ITypeSymbol typeSymbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Meziantou.Analyzer.Internals.ConcurrentHashSet`1 : object {
    private ConcurrentDictionary`2<T, byte> _dictionary;
    public int Count { get; }
    public bool IsEmpty { get; }
    public bool IsReadOnly { get; }
    public ConcurrentHashSet`1(IEqualityComparer`1<T> equalityComparer);
    public sealed virtual int get_Count();
    public bool get_IsEmpty();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Contains(T item);
    public bool Add(T value);
    public void AddRange(IEnumerable`1<T> values);
    public sealed virtual bool Remove(T item);
    public sealed virtual void Clear();
    [NullableContextAttribute("0")]
public KeyEnumerator<T> GetEnumerator();
    [IteratorStateMachineAttribute("Meziantou.Analyzer.Internals.ConcurrentHashSet`1/<GetEnumeratorImpl>d__16")]
private IEnumerator`1<T> GetEnumeratorImpl();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Meziantou.Analyzer.Internals.CultureSensitiveFormattingContext : object {
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <FormatProviderSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <CultureInfoSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <NumberStyleSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <DateTimeStyleSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <StringBuilderSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <StringBuilder_AppendInterpolatedStringHandlerSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <GuidSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <EnumSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <DateTimeOffsetSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <DateOnlySymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <TimeOnlySymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <UInt128Symbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <UriSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <TimeSpanSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <VersionSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <SystemIFormattableSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <SystemWindowsFontStretchSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <SystemWindowsMediaBrushSymbol>k__BackingField;
    public INamedTypeSymbol FormatProviderSymbol { get; }
    public INamedTypeSymbol CultureInfoSymbol { get; }
    public INamedTypeSymbol NumberStyleSymbol { get; }
    public INamedTypeSymbol DateTimeStyleSymbol { get; }
    public INamedTypeSymbol StringBuilderSymbol { get; }
    public INamedTypeSymbol StringBuilder_AppendInterpolatedStringHandlerSymbol { get; }
    public INamedTypeSymbol GuidSymbol { get; }
    public INamedTypeSymbol EnumSymbol { get; }
    public INamedTypeSymbol DateTimeOffsetSymbol { get; }
    public INamedTypeSymbol DateOnlySymbol { get; }
    public INamedTypeSymbol TimeOnlySymbol { get; }
    public INamedTypeSymbol UInt128Symbol { get; }
    public INamedTypeSymbol UriSymbol { get; }
    public INamedTypeSymbol TimeSpanSymbol { get; }
    public INamedTypeSymbol VersionSymbol { get; }
    public INamedTypeSymbol SystemIFormattableSymbol { get; }
    public INamedTypeSymbol SystemWindowsFontStretchSymbol { get; }
    public INamedTypeSymbol SystemWindowsMediaBrushSymbol { get; }
    [NullableContextAttribute("1")]
public CultureSensitiveFormattingContext(Compilation compilation);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_FormatProviderSymbol();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_CultureInfoSymbol();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_NumberStyleSymbol();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_DateTimeStyleSymbol();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_StringBuilderSymbol();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_StringBuilder_AppendInterpolatedStringHandlerSymbol();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_GuidSymbol();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_EnumSymbol();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_DateTimeOffsetSymbol();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_DateOnlySymbol();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_TimeOnlySymbol();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_UInt128Symbol();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_UriSymbol();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_TimeSpanSymbol();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_VersionSymbol();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_SystemIFormattableSymbol();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_SystemWindowsFontStretchSymbol();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_SystemWindowsMediaBrushSymbol();
    private static bool MustUnwrapNullableOfT(CultureSensitiveOptions options);
    [NullableContextAttribute("1")]
public bool IsCultureSensitiveOperation(IOperation operation, CultureSensitiveOptions options);
    private bool IsCultureSensitiveType(ITypeSymbol typeSymbol, CultureSensitiveOptions options);
    private bool IsCultureSensitiveType(ITypeSymbol symbol, IOperation format, IOperation instance, CultureSensitiveOptions options);
    private static bool IsInvariantDateTimeFormat(IOperation valueOperation);
    private static bool IsInvariantTimeSpanFormat(IOperation valueOperation);
    [NullableContextAttribute("1")]
private static bool IsConstantPositiveNumber(IOperation operation);
}
[FlagsAttribute]
internal enum Meziantou.Analyzer.Internals.CultureSensitiveOptions : Enum {
    public int value__;
    public static CultureSensitiveOptions None;
    public static CultureSensitiveOptions UnwrapNullableOfT;
    public static CultureSensitiveOptions UseInvocationReturnType;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Meziantou.Analyzer.Internals.DefaultObjectPool`1 : ObjectPool`1<T> {
    private Func`1<T> _createFunc;
    private Func`2<T, bool> _returnFunc;
    private int _maxCapacity;
    private int _numItems;
    private protected ConcurrentQueue`1<T> Items;
    [NullableAttribute("2")]
private protected T FastItem;
    public DefaultObjectPool`1(IPooledObjectPolicy`1<T> policy);
    public DefaultObjectPool`1(IPooledObjectPolicy`1<T> policy, int maximumRetained);
    public virtual T Get();
    public virtual void Return(T obj);
    private protected bool ReturnCore(T obj);
}
internal class Meziantou.Analyzer.Internals.DefaultObjectPoolProvider : ObjectPoolProvider {
    [CompilerGeneratedAttribute]
private int <MaximumRetained>k__BackingField;
    public int MaximumRetained { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaximumRetained();
    [CompilerGeneratedAttribute]
public void set_MaximumRetained(int value);
    [NullableContextAttribute("1")]
public virtual ObjectPool`1<T> Create(IPooledObjectPolicy`1<T> policy);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Meziantou.Analyzer.Internals.DefaultPooledObjectPolicy`1 : PooledObjectPolicy`1<T> {
    public virtual T Create();
    public virtual bool Return(T obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Meziantou.Analyzer.Internals.DisposableObjectPool`1 : DefaultObjectPool`1<T> {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isDisposed;
    public DisposableObjectPool`1(IPooledObjectPolicy`1<T> policy);
    public DisposableObjectPool`1(IPooledObjectPolicy`1<T> policy, int maximumRetained);
    public virtual T Get();
    public virtual void Return(T obj);
    public sealed virtual void Dispose();
    [NullableContextAttribute("2")]
private static void DisposeItem(T item);
    [CompilerGeneratedAttribute]
private void <Get>g__ThrowObjectDisposedException|3_0();
}
[ExtensionAttribute]
internal static class Meziantou.Analyzer.Internals.HashSetExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void AddIfNotNull(HashSet`1<T> hashSet, T item);
}
[NullableContextAttribute("1")]
internal interface Meziantou.Analyzer.Internals.IPooledObjectPolicy`1 {
    public abstract virtual T Create();
    public abstract virtual bool Return(T obj);
}
internal interface Meziantou.Analyzer.Internals.IResettable {
    public abstract virtual bool TryReset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Meziantou.Analyzer.Internals.LocationExtensions : object {
    [ExtensionAttribute]
internal static Nullable`1<FileLinePositionSpan> GetLineSpan(SyntaxToken token, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Nullable`1<FileLinePositionSpan> GetLineSpan(SyntaxNode node, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Nullable`1<FileLinePositionSpan> GetLineSpan(SyntaxTrivia trivia, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Nullable`1<FileLinePositionSpan> GetLineSpan(SyntaxNodeOrToken nodeOrToken, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Nullable`1<int> GetLine(SyntaxToken token, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Nullable`1<int> GetLine(SyntaxNode node, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Nullable`1<int> GetLine(SyntaxTrivia trivia, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Nullable`1<int> GetEndLine(SyntaxToken token, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Nullable`1<int> GetEndLine(SyntaxNode node, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Nullable`1<int> GetEndLine(SyntaxTrivia trivia, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static bool SpansMultipleLines(SyntaxNode node, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static bool SpansMultipleLines(SyntaxTrivia trivia, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Meziantou.Analyzer.Internals.ObjectPool : object {
    [CompilerGeneratedAttribute]
private static ObjectPool`1<StringBuilder> <SharedStringBuilderPool>k__BackingField;
    public static ObjectPool`1<StringBuilder> SharedStringBuilderPool { get; }
    private static ObjectPool();
    [CompilerGeneratedAttribute]
public static ObjectPool`1<StringBuilder> get_SharedStringBuilderPool();
    public static ObjectPool`1<T> Create(IPooledObjectPolicy`1<T> policy);
    public static ObjectPool`1<StringBuilder> CreateStringBuilderPool();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Meziantou.Analyzer.Internals.ObjectPool`1 : object {
    public abstract virtual T Get();
    public abstract virtual void Return(T obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Meziantou.Analyzer.Internals.ObjectPoolProvider : object {
    public ObjectPool`1<T> Create();
    public abstract virtual ObjectPool`1<T> Create(IPooledObjectPolicy`1<T> policy);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Meziantou.Analyzer.Internals.OverloadFinder : object {
    [CompilerGeneratedAttribute]
private Compilation <compilation>P;
    [NullableAttribute("2")]
private ITypeSymbol _obsoleteSymbol;
    public OverloadFinder(Compilation compilation);
    public bool HasOverloadWithAdditionalParameterOfType(IMethodSymbol methodSymbol, ITypeSymbol[] additionalParameterTypes);
    public bool HasOverloadWithAdditionalParameterOfType(IMethodSymbol methodSymbol, IOperation currentOperation, ITypeSymbol[] additionalParameterTypes);
    private IMethodSymbol FindOverloadWithAdditionalParameterOfType(IMethodSymbol methodSymbol, ITypeSymbol[] additionalParameterTypes);
    public IMethodSymbol FindOverloadWithAdditionalParameterOfType(IMethodSymbol methodSymbol, bool includeObsoleteMethods, ITypeSymbol[] additionalParameterTypes);
    public IMethodSymbol FindOverloadWithAdditionalParameterOfType(IMethodSymbol methodSymbol, IOperation operation, bool includeObsoleteMethods, ITypeSymbol[] additionalParameterTypes);
    public IMethodSymbol FindOverloadWithAdditionalParameterOfType(IMethodSymbol methodSymbol, SyntaxNode syntaxNode, bool includeObsoleteMethods, ITypeSymbol[] additionalParameterTypes);
    public static bool HasSimilarParameters(IMethodSymbol method, IMethodSymbol otherMethod, ITypeSymbol[] additionalParameterTypes);
    private bool IsObsolete(IMethodSymbol methodSymbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Meziantou.Analyzer.Internals.PooledObjectPolicy`1 : object {
    public abstract virtual T Create();
    public abstract virtual bool Return(T obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Meziantou.Analyzer.Internals.StringBuilderPooledObjectPolicy : PooledObjectPolicy`1<StringBuilder> {
    [CompilerGeneratedAttribute]
private int <InitialCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumRetainedCapacity>k__BackingField;
    public int InitialCapacity { get; public set; }
    public int MaximumRetainedCapacity { get; public set; }
    [CompilerGeneratedAttribute]
public int get_InitialCapacity();
    [CompilerGeneratedAttribute]
public void set_InitialCapacity(int value);
    [CompilerGeneratedAttribute]
public int get_MaximumRetainedCapacity();
    [CompilerGeneratedAttribute]
public void set_MaximumRetainedCapacity(int value);
    public virtual StringBuilder Create();
    public virtual bool Return(StringBuilder obj);
}
[ExtensionAttribute]
internal static class Meziantou.Analyzer.Internals.SuppressorHelpers : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static SyntaxNode TryFindNode(Diagnostic diagnostic, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
private static SyntaxNode TryFindNode(Location location, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Meziantou.Analyzer.Internals.SyntaxNodeExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T WithoutTrailingSpacesTrivia(T syntaxNode);
}
internal static class Meziantou.Analyzer.Internals.TimeSpanOperation : object {
    [NullableContextAttribute("1")]
internal static Nullable`1<long> GetMilliseconds(IOperation op);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static Nullable`1<long> <GetMilliseconds>g__GetMilliseconds|0_0(IOperation op, double factor);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static Nullable`1<long> <GetMilliseconds>g__AddValues|0_1(Nullable`1[] values);
}
[ExtensionAttribute]
internal static class Meziantou.Analyzer.LanguageVersionExtensions : object {
    [ExtensionAttribute]
public static bool IsCSharp10OrAbove(LanguageVersion languageVersion);
    [ExtensionAttribute]
public static bool IsCSharp11OrAbove(LanguageVersion languageVersion);
    [ExtensionAttribute]
public static bool IsCSharp13OrAbove(LanguageVersion languageVersion);
    [ExtensionAttribute]
public static bool IsCSharp10OrBellow(LanguageVersion languageVersion);
    [ExtensionAttribute]
public static bool IsCSharp8OrAbove(LanguageVersion languageVersion);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Meziantou.Analyzer.ListExtensions : object {
    [ExtensionAttribute]
public static void AddIfNotNull(IList`1<T> list, IEnumerable`1<T> items);
    [ExtensionAttribute]
public static void AddIfNotNull(IList`1<T> list, T item);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Meziantou.Analyzer.MethodSymbolExtensions : object {
    private static String[] MsTestNamespaceParts;
    private static String[] NunitNamespaceParts;
    private static String[] XunitNamespaceParts;
    private static MethodSymbolExtensions();
    [ExtensionAttribute]
public static bool IsInterfaceImplementation(IMethodSymbol symbol);
    [ExtensionAttribute]
public static bool IsInterfaceImplementation(IPropertySymbol symbol);
    [ExtensionAttribute]
public static bool IsInterfaceImplementation(IEventSymbol symbol);
    [ExtensionAttribute]
private static bool IsInterfaceImplementation(ISymbol symbol);
    [ExtensionAttribute]
public static IMethodSymbol GetImplementingInterfaceSymbol(IMethodSymbol symbol);
    [ExtensionAttribute]
private static ISymbol GetImplementingInterfaceSymbol(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsUnitTestMethod(IMethodSymbol methodSymbol);
}
[ExtensionAttribute]
internal static class Meziantou.Analyzer.NamespaceSymbolExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsNamespace(INamespaceSymbol namespaceSymbol, String[] namespaceParts);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Meziantou.Analyzer.OperationExtensions : object {
    [ExtensionAttribute]
public static OperationList GetChildOperations(IOperation operation);
    [ExtensionAttribute]
public static LanguageVersion GetCSharpLanguageVersion(IOperation operation);
    [ExtensionAttribute]
public static LanguageVersion GetCSharpLanguageVersion(SyntaxNode syntaxNode);
    [ExtensionAttribute]
public static LanguageVersion GetCSharpLanguageVersion(SyntaxTree syntaxTree);
    [ExtensionAttribute]
public static LanguageVersion GetCSharpLanguageVersion(Compilation compilation);
    [IteratorStateMachineAttribute("Meziantou.Analyzer.OperationExtensions/<Ancestors>d__5")]
[ExtensionAttribute]
public static IEnumerable`1<IOperation> Ancestors(IOperation operation);
    [ExtensionAttribute]
public static bool IsInNameofOperation(IOperation operation);
    [ExtensionAttribute]
public static ITypeSymbol GetActualType(IOperation operation);
    [ExtensionAttribute]
public static IOperation UnwrapImplicitConversionOperations(IOperation operation);
    [ExtensionAttribute]
public static IOperation UnwrapConversionOperations(IOperation operation);
    [ExtensionAttribute]
public static IOperation UnwrapLabelOperations(IOperation operation);
    [ExtensionAttribute]
public static bool HasArgumentOfType(IInvocationOperation operation, ITypeSymbol argumentTypeSymbol);
    [ExtensionAttribute]
public static IMethodSymbol GetContainingMethod(IOperation operation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool IsInStaticContext(IOperation operation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool IsInStaticContext(IOperation operation, CancellationToken cancellationToken, Int32& parentStaticMemberStartPosition);
    [IteratorStateMachineAttribute("Meziantou.Analyzer.OperationExtensions/<LookupAvailableSymbols>d__15")]
[ExtensionAttribute]
public static IEnumerable`1<ISymbol> LookupAvailableSymbols(IOperation operation, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static bool <LookupAvailableSymbols>g__IsValid|15_0(Location location, int operationLocation, Nullable`1<int> staticContextStart);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Meziantou.Analyzer.OperationUtilities : object {
    [NullableAttribute("2")]
private INamedTypeSymbol _expressionSymbol;
    public OperationUtilities(Compilation compilation);
    public bool IsInExpressionContext(IOperation operation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Meziantou.Analyzer.RuleCategories : object {
    public static string Design;
    public static string Naming;
    public static string Style;
    public static string Usage;
    public static string Performance;
    public static string Security;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Meziantou.Analyzer.RuleIdentifiers : object {
    public static string UseStringComparison;
    public static string UseStringComparer;
    public static string UseNamedParameter;
    public static string UseConfigureAwaitFalse;
    public static string UseArrayEmpty;
    public static string UseStringEqualsInsteadOfEqualityOperator;
    public static string MissingCommaInObjectInitializer;
    public static string MissingStructLayoutAttribute;
    public static string MissingTimeoutParameterForRegex;
    public static string MarkAttributesWithAttributeUsageAttribute;
    public static string UseIFormatProviderParameter;
    public static string DoNotRaiseReservedExceptionType;
    public static string TypesShouldNotExtendSystemApplicationException;
    public static string DoNotRaiseApplicationException;
    public static string ArgumentExceptionShouldSpecifyArgumentName;
    public static string PreferReturningCollectionAbstractionInsteadOfImplementation;
    public static string AbstractTypesShouldNotHaveConstructors;
    public static string DoNotDeclareStaticMembersOnGenericTypes;
    public static string UseEventArgsEmpty;
    public static string UseListOfTMethodsInsteadOfEnumerableExtensionMethods;
    public static string DoNotUseStringGetHashCode;
    public static string ReturnTaskFromResultInsteadOfReturningNull;
    public static string UseRegexExplicitCaptureOptions;
    public static string DoNotUseEqualityComparerDefaultOfString;
    public static string DoNotRaiseNotImplementedException;
    public static string FixToDo;
    public static string DoNotRemoveOriginalExceptionFromThrowStatement;
    public static string OptimizeStringBuilderUsage;
    public static string OptimizeEnumerable_CombineMethods;
    public static string DuplicateEnumerable_OrderBy;
    public static string OptimizeEnumerable_Count;
    public static string UseAnOverloadThatHasCancellationToken;
    public static string DontTagInstanceFieldsWithThreadStaticAttribute;
    public static string DontUseDangerousThreadingMethods;
    public static string MakeClassStatic;
    public static string RemoveEmptyStatement;
    public static string MakeMethodStatic;
    public static string DoNotUseServerCertificateValidationCallback;
    public static string UseAnOverloadThatHasCancellationTokenWhenACancellationTokenIsAvailable;
    public static string MakePropertyStatic;
    public static string DoNotUseBlockingCallInAsyncContext;
    public static string UseNameofOperator;
    public static string RemoveUselessToString;
    public static string DoNotUseBlockingCall;
    public static string UseEventHandlerOfT;
    public static string DeclareTypesInNamespaces;
    public static string FileNameMustMatchTypeName;
    public static string TypeNameMustNotMatchNamespace;
    public static string ValidateArgumentsCorrectly;
    public static string MethodShouldNotBeTooLong;
    public static string ReplaceEnumToStringWithNameof;
    public static string ClassMustBeSealed;
    public static string EmbedCaughtExceptionAsInnerException;
    public static string DoNotUseFinalizer;
    public static string DoNotCallVirtualMethodInConstructor;
    public static string AttributeNameShouldEndWithAttribute;
    public static string ExceptionNameShouldEndWithException;
    public static string EventArgsNameShouldEndWithEventArgs;
    public static string TheReturnValueOfStreamReadShouldBeUsed;
    public static string MethodOverridesShouldNotChangeParameterDefaults;
    public static string NonFlagsEnumsShouldNotBeMarkedWithFlagsAttribute;
    public static string OptimizeEnumerable_WhereBeforeOrderBy;
    public static string AvoidLockingOnPubliclyAccessibleInstance;
    public static string DoNotUseDefaultEqualsOnValueType;
    public static string StructWithDefaultEqualsImplementationUsedAsAKey;
    public static string UseGuidEmpty;
    public static string NotNullIfNotNullArgumentShouldExist;
    public static string NonConstantStaticFieldsShouldNotBeVisible;
    public static string ObsoleteAttributesShouldIncludeExplanations;
    public static string AvoidUsingRedundantElse;
    public static string DoNotThrowFromFinallyBlock;
    public static string AvoidComparisonWithBoolConstant;
    public static string AvoidCultureSensitiveMethod;
    public static string DoNotUseImplicitCultureSensitiveToString;
    public static string DoNotUseImplicitCultureSensitiveToStringInterpolation;
    public static string ClassWithEqualsTShouldImplementIEquatableT;
    public static string OptimizeEnumerable_CastInsteadOfSelect;
    public static string FlowCancellationTokenInAwaitForEachWhenACancellationTokenIsAvailable;
    public static string FlowCancellationTokenInAwaitForEach;
    public static string PreserveParamsOnOverride;
    public static string DoNotNaNInComparisons;
    public static string ConstructorArgumentParametersShouldExistInConstructors;
    public static string LocalVariablesShouldNotHideSymbols;
    public static string AnonymousDelegatesShouldNotBeUsedToUnsubscribeFromEvents;
    public static string DoNotThrowFromFinalizer;
    public static string ParametersWithDefaultValueShouldBeMarkedWithOptionalParameter;
    public static string DefaultValueShouldNotBeUsedWhenParameterDefaultValueIsMeant;
    public static string OptimizeStartsWith;
    public static string RemoveEmptyBlock;
    public static string SenderShouldBeThisForInstanceEvents;
    public static string SenderShouldBeNullForStaticEvents;
    public static string EventArgsSenderShouldNotBeNullForEvents;
    public static string ClassWithCompareToTShouldImplementIComparableT;
    public static string ClassWithEqualsTShouldOverrideEqualsObject;
    public static string ClassImplementingIComparableTShouldImplementIEquatableT;
    public static string TheComparisonOperatorsShouldBeOverriddenWhenImplementingIComparable;
    public static string UseIndexerInsteadOfElementAt;
    public static string DoNotUseZeroToInitializeAnEnumValue;
    public static string AwaitTaskBeforeDisposingResources;
    public static string StringShouldNotContainsNonDeterministicEndOfLine;
    public static string MakeStructMemberReadOnly;
    public static string DoNotUseEqualityOperatorsForSpanOfChar;
    public static string DotNotUseNameFromBCL;
    public static string AvoidClosureWhenUsingConcurrentDictionary;
    public static string AvoidClosureWhenUsingConcurrentDictionaryByUsingFactoryArg;
    public static string DoNotUseCultureSensitiveObjectToString;
    public static string SimplifyCallerArgumentExpression;
    public static string AddOverloadWithSpanOrMemory;
    public static string UseRegexSourceGenerator;
    public static string UseStringCreateInsteadOfFormattableString;
    public static string OptimizeEnumerable_UseCountInsteadOfAny;
    public static string UseDateTimeUnixEpoch;
    public static string UseDateTimeOffsetUnixEpoch;
    public static string DoNotUseUnknownParameterForRazorComponent;
    public static string SupplyParameterFromQueryRequiresParameterAttributeForRazorComponent;
    public static string EditorRequiredRequiresParameterAttributeForRazorComponent;
    public static string JSInvokableMethodsMustBePublic;
    public static string JSRuntimeMustNotBeUsedInOnInitialized;
    public static string UseJSRuntimeInvokeVoidAsyncWhenReturnValueIsNotUsed;
    public static string DoNotOverwriteRazorComponentParameterValue;
    public static string SupplyParameterFromQueryRequiresRoutableComponent;
    public static string SequenceNumberMustBeAConstant;
    public static string LoggerParameterType;
    public static string LoggerParameterType_InvalidType;
    public static string LoggerParameterType_DuplicateRule;
    public static string UseStringEqualsInsteadOfIsPattern;
    public static string UseIsPatternInsteadOfSequenceEqual;
    public static string TaskInUsing;
    public static string ObjectGetTypeOnTypeInstance;
    public static string ThrowIfNullWithNonNullableInstance;
    public static string DoNotImplicitlyConvertDateTimeToDateTimeOffset;
    public static string UseDateTimeOffsetInsteadOfDateTime;
    public static string AwaitAwaitableMethodInSyncMethod;
    public static string LoggerParameterType_MissingConfiguration;
    public static string RawStringShouldNotContainsNonDeterministicEndOfLine;
    public static string MethodsReturningAnAwaitableTypeMustHaveTheAsyncSuffix;
    public static string MethodsNotReturningAnAwaitableTypeMustNotHaveTheAsyncSuffix;
    public static string LoggerParameterType_Serilog;
    public static string IfElseBranchesAreIdentical;
    public static string UsePatternMatchingForNullCheck;
    public static string UsePatternMatchingForNullEquality;
    public static string PrimaryConstructorParameterShouldBeReadOnly;
    public static string UseOperatingSystemInsteadOfRuntimeInformation;
    public static string UnsafeAccessorAttribute_InvalidSignature;
    public static string UnsafeAccessorAttribute_NameMustBeSet;
    public static string DoNotUseAsyncDelegateForSyncDelegate;
    public static string UsePatternMatchingForEqualityComparison;
    public static string UsePatternMatchingForInequalityComparison;
    public static string DoNotUseToStringIfObject;
    public static string DebuggerDisplayAttributeShouldContainValidExpressions;
    public static string UseTaskUnwrap;
    public static string DoNotLogClassifiedData;
    public static string UseLangwordInXmlComment;
    public static string DoNotUseAsyncVoid;
    public static string MethodsReturningIAsyncEnumerableMustHaveTheAsyncSuffix;
    public static string MethodsNotReturningIAsyncEnumerableMustNotHaveTheAsyncSuffix;
    public static string UseSystemThreadingLockInsteadOfObject;
    public static string OptimizeEnumerable_UseOrder;
    public static string UseContainsKeyInsteadOfTryGetValue;
    public static string UseShellExecuteMustBeSet;
    public static string UseProcessStartOverload;
    public static string UseShellExecuteMustBeFalse;
    public static string GetHelpUri(string identifier);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.AbstractTypesShouldNotHaveConstructorsAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static AbstractTypesShouldNotHaveConstructorsAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeSymbol(SymbolAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.AddOverloadWithSpanOrMemoryAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static AddOverloadWithSpanOrMemoryAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeMethod(SymbolAnalysisContext context);
    private static bool IsCandidateForSpanOrMemory(IParameterSymbol param);
    private static bool IsValidOverload(Compilation compilation, IMethodSymbol method, IMethodSymbol overload);
    private static bool IsSpanOrMemory(Compilation compilation, ITypeSymbol typeSymbol, ITypeSymbol arrayType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.AnonymousDelegatesShouldNotBeUsedToUnsubscribeFromEventsAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static AnonymousDelegatesShouldNotBeUsedToUnsubscribeFromEventsAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeOperation(OperationAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.ArgumentExceptionShouldSpecifyArgumentNameAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    private static DiagnosticDescriptor NameofRule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static ArgumentExceptionShouldSpecifyArgumentNameAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void Analyze(OperationAnalysisContext context);
    [IteratorStateMachineAttribute("Meziantou.Analyzer.Rules.ArgumentExceptionShouldSpecifyArgumentNameAnalyzer/<GetParameterNames>d__6")]
private static IEnumerable`1<string> GetParameterNames(IOperation operation, CancellationToken cancellationToken);
}
internal static class Meziantou.Analyzer.Rules.ArgumentExceptionShouldSpecifyArgumentNameAnalyzerCommon : object {
    [NullableAttribute("1")]
internal static string ArgumentNameKey;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.AttributeNameShouldEndWithAttributeAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static AttributeNameShouldEndWithAttributeAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeSymbol(SymbolAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.AvoidClosureWhenUsingConcurrentDictionaryAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    private static DiagnosticDescriptor RuleFactoryArg;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static AvoidClosureWhenUsingConcurrentDictionaryAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static bool DetectPotentialUsageOfLambdaParameter(OperationAnalysisContext context, IOperation argumentOperation, IArgumentOperation potentialVariableOperation);
    private static void DetectClosure(OperationAnalysisContext context, IOperation argumentOperation);
    [NullableContextAttribute("2")]
private static SyntaxNode GetDataFlowArgument(SyntaxNode node);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<ISymbol> <DetectClosure>g__GetParameters|7_0(IOperation operation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.AvoidComparisonWithBoolConstantAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static AvoidComparisonWithBoolConstantAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeBinaryOperation(OperationAnalysisContext context);
    private static bool IsConstantBool(IOperation operation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.AvoidLockingOnPubliclyAccessibleInstanceAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static AvoidLockingOnPubliclyAccessibleInstanceAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeOperation(OperationAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.AvoidUsingRedundantElseAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static AvoidUsingRedundantElseAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeElseClause(SyntaxNodeAnalysisContext context);
    [IteratorStateMachineAttribute("Meziantou.Analyzer.Rules.AvoidUsingRedundantElseAnalyzer/<FindLocalIdentifiersIn>d__5")]
private static IEnumerable`1<string> FindLocalIdentifiersIn(SyntaxNode node);
    private static bool IsDirectAccess(IfStatementSyntax ifStatementSyntax, SyntaxNode exitPoint);
}
internal static class Meziantou.Analyzer.Rules.AvoidUsingRedundantElseAnalyzerCommon : object {
    [NullableContextAttribute("1")]
internal static IEnumerable`1<SyntaxNode> GetElseClauseChildren(ElseClauseSyntax elseClauseSyntax);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.AwaitAwaitableMethodInSyncMethodAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static AwaitAwaitableMethodInSyncMethodAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeOperation(OperationAnalysisContext context, OperationUtilities operationUtilities, AwaitableTypes awaitableTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.AwaitTaskBeforeDisposingResourcesAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static AwaitTaskBeforeDisposingResourcesAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.ClassMustBeSealedAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static ClassMustBeSealedAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.CommaAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("0")]
private static ImmutableArray`1<SyntaxKind> ObjectInitializerKinds;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static CommaAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void HandleSeparatedList(SyntaxNodeAnalysisContext context, SyntaxNode node, SeparatedSyntaxList`1<T> elements);
    private void HandleCollectionExpression(SyntaxNodeAnalysisContext context);
    private void HandleSwitchExpression(SyntaxNodeAnalysisContext context);
    private void HandleWithExpression(SyntaxNodeAnalysisContext context);
    private static void HandleEnumDeclaration(SyntaxNodeAnalysisContext context);
    private static void HandleObjectInitializer(SyntaxNodeAnalysisContext context);
    private static void HandleAnonymousObjectInitializer(SyntaxNodeAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.ConstructorArgumentParametersShouldExistInConstructorsAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static ConstructorArgumentParametersShouldExistInConstructorsAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DebuggerDisplayAttributeShouldContainValidExpressionsAnalyzer : DiagnosticAnalyzer {
    private static Char[] MemberSeparators;
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DebuggerDisplayAttributeShouldContainValidExpressionsAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeNamedType(SymbolAnalysisContext context, INamedTypeSymbol attributeSymbol);
    [CompilerGeneratedAttribute]
internal static bool <AnalyzeNamedType>g__MemberExists|5_0(INamedTypeSymbol symbol, string name);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static List`1<string> <AnalyzeNamedType>g__ParseMembers|5_1(ReadOnlySpan`1<char> value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static string <AnalyzeNamedType>g__GetMemberName|5_3(ReadOnlySpan`1<char> member);
    [CompilerGeneratedAttribute]
internal static void <AnalyzeNamedType>g__ValidateValue|5_2(SymbolAnalysisContext context, INamedTypeSymbol symbol, AttributeData attribute, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DeclareTypesInNamespacesAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DeclareTypesInNamespacesAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeSymbol(SymbolAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotCallVirtualMethodInConstructorAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotCallVirtualMethodInConstructorAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeEventOperation(OperationAnalysisContext context);
    private static void AnalyzePropertyReferenceOperation(OperationAnalysisContext context);
    private static void AnalyzeInvocationOperation(OperationAnalysisContext context);
    private static bool IsOverridable(ISymbol symbol);
    [NullableContextAttribute("2")]
private static bool IsCurrentInstanceMethod(IOperation operation);
    [NullableContextAttribute("2")]
private static bool IsInDelegate(IOperation operation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotDeclareStaticMembersOnGenericTypes : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotDeclareStaticMembersOnGenericTypes();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void Analyze(SymbolAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotImplicitlyConvertDateTimeToDateTimeOffsetAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor RuleImplicitConversion;
    private static DiagnosticDescriptor RuleUseDateTimeOffset;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotImplicitlyConvertDateTimeToDateTimeOffsetAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeConversion(OperationAnalysisContext context, INamedTypeSymbol dateTimeOffsetSymbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotLogClassifiedDataAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotLogClassifiedDataAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotNaNInComparisonsAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotNaNInComparisonsAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotOverwriteRazorComponentParameterValue : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotOverwriteRazorComponentParameterValue();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotRaiseApplicationExceptionAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotRaiseApplicationExceptionAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void Analyze(OperationAnalysisContext context, INamedTypeSymbol reservedExceptionType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotRaiseNotImplementedExceptionAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotRaiseNotImplementedExceptionAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void Analyze(OperationAnalysisContext context, INamedTypeSymbol reservedExceptionType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotRaiseReservedExceptionTypeAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotRaiseReservedExceptionTypeAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void Analyze(OperationAnalysisContext context, IEnumerable`1<INamedTypeSymbol> reservedExceptionTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotRemoveOriginalExceptionFromThrowStatementAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotRemoveOriginalExceptionFromThrowStatementAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void Analyze(OperationAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotThrowFromFinalizerAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotThrowFromFinalizerAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeFinalizer(SyntaxNodeAnalysisContext context);
    private static bool IsThrowStatement(SyntaxNode node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotThrowFromFinallyBlockAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotThrowFromFinallyBlockAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeFinallyClause(SyntaxNodeAnalysisContext context);
    private static bool IsThrowStatement(SyntaxNode node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotUseAsyncDelegateForSyncDelegateAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotUseAsyncDelegateForSyncDelegateAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzerDelegateCreationOperation(OperationAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotUseAsyncVoidAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotUseAsyncVoidAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private void AnalyzeLocalFunction(OperationAnalysisContext context);
    private static void AnalyzeSymbol(SymbolAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotUseBlockingCallInAsyncContextAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    private static DiagnosticDescriptor Rule2;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotUseBlockingCallInAsyncContextAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
internal enum Meziantou.Analyzer.Rules.DoNotUseBlockingCallInAsyncContextData : Enum {
    public int value__;
    public static DoNotUseBlockingCallInAsyncContextData Unknown;
    public static DoNotUseBlockingCallInAsyncContextData Thread_Sleep;
    public static DoNotUseBlockingCallInAsyncContextData Task_Wait;
    public static DoNotUseBlockingCallInAsyncContextData Task_Wait_Delay;
    public static DoNotUseBlockingCallInAsyncContextData TaskAwaiter_GetResult;
    public static DoNotUseBlockingCallInAsyncContextData CreateAsyncScope;
    public static DoNotUseBlockingCallInAsyncContextData Overload;
    public static DoNotUseBlockingCallInAsyncContextData Task_Result;
    public static DoNotUseBlockingCallInAsyncContextData Using;
    public static DoNotUseBlockingCallInAsyncContextData UsingDeclarator;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotUseDefaultEqualsOnValueTypeAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    private static DiagnosticDescriptor Rule2;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotUseDefaultEqualsOnValueTypeAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotUseEqualityComparerDefaultOfStringAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotUseEqualityComparerDefaultOfStringAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void Analyze(OperationAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotUseEqualityOperatorsForSpanOfCharAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotUseEqualityOperatorsForSpanOfCharAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotUseFinalizerAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotUseFinalizerAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeMethodSymbol(SymbolAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotUseImplicitCultureSensitiveToStringAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor StringConcatRule;
    private static DiagnosticDescriptor StringInterpolationRule;
    private static DiagnosticDescriptor ObjectToStringRule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotUseImplicitCultureSensitiveToStringAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotUseServerCertificateValidationCallbackAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotUseServerCertificateValidationCallbackAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void Analyze(OperationAnalysisContext context, List`1<ISymbol> eventSymbols);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotUseStringGetHashCodeAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotUseStringGetHashCodeAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeInvocation(OperationAnalysisContext context, INamedTypeSymbol stringComparisonSymbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotUseToStringIfObjectAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotUseToStringIfObjectAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotUseUnknownParameterForRazorComponentAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotUseUnknownParameterForRazorComponentAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DoNotUseZeroToInitializeAnEnumValue : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotUseZeroToInitializeAnEnumValue();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeConversion(OperationAnalysisContext context);
    [CompilerGeneratedAttribute]
internal static bool <AnalyzeConversion>g__IsZero|4_0(ITypeSymbol enumType, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DontTagInstanceFieldsWithThreadStaticAttributeAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DontTagInstanceFieldsWithThreadStaticAttributeAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void Analyze(SymbolAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DontUseDangerousThreadingMethodsAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DontUseDangerousThreadingMethodsAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void Analyze(OperationAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.DotNotUseNameFromBCLAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<string, List`1<string>> s_types;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<string, List`1<string>> s_typesPreview;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DotNotUseNameFromBCLAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeSymbol(SymbolAnalysisContext context);
    private static Dictionary`2<string, List`1<string>> LoadTypes(bool preview);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.EmbedCaughtExceptionAsInnerExceptionAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static EmbedCaughtExceptionAsInnerExceptionAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeThrow(OperationAnalysisContext context, OverloadFinder overloadFinder, INamedTypeSymbol exceptionSymbol);
    private static bool IsPotentialParameter(IParameterSymbol parameter, ITypeSymbol exceptionSymbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.EqualityShouldBeCorrectlyImplementedAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor ImplementIEquatableRule;
    private static DiagnosticDescriptor ImplementIComparableOfTRule;
    private static DiagnosticDescriptor OverrideEqualsObjectRule;
    private static DiagnosticDescriptor ImplementIEquatableWhenIComparableRule;
    private static DiagnosticDescriptor AddComparisonRule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static EqualityShouldBeCorrectlyImplementedAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static bool HasMethod(INamedTypeSymbol parentType, Func`2<IMethodSymbol, bool> predicate);
    private static bool HasComparisonOperator(INamedTypeSymbol parentType);
    private static bool IsEqualsMethod(IMethodSymbol symbol);
    private static bool IsCompareToMethod(IMethodSymbol symbol);
    private static bool IsCompareToOfTMethod(IMethodSymbol symbol);
}
internal static class Meziantou.Analyzer.Rules.EqualityShouldBeCorrectlyImplementedAnalyzerCommon : object {
    [NullableContextAttribute("1")]
public static bool IsEqualsOfTMethod(IMethodSymbol symbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.EventArgsNameShouldEndWithEventArgsAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static EventArgsNameShouldEndWithEventArgsAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeSymbol(SymbolAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.EventsShouldHaveProperArgumentsAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor SenderInstanceRule;
    private static DiagnosticDescriptor SenderStaticRule;
    private static DiagnosticDescriptor EventArgsRule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static EventsShouldHaveProperArgumentsAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeRaiseEvent(OperationAnalysisContext context);
    private static bool IsNull(IArgumentOperation operation);
    private static bool IsThis(IArgumentOperation operation);
    private static IEventSymbol FindEvent(IOperation operation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.ExceptionNameShouldEndWithExceptionAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static ExceptionNameShouldEndWithExceptionAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeSymbol(SymbolAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.FileNameMustMatchTypeNameAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static FileNameMustMatchTypeNameAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeSymbol(SymbolAnalysisContext context);
    [NullableContextAttribute("0")]
private static ReadOnlySpan`1<char> GetFileName(ReadOnlySpan`1<char> filePath);
    private static bool IsWildcardMatch(string input, string pattern);
    [CompilerGeneratedAttribute]
internal static bool <AnalyzeSymbol>g__IsTypeDeclaration|4_1(SyntaxNode syntaxNode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.FixToDoAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    private static Char[] TrimStartChars;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static FixToDoAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeTree(SyntaxTreeAnalysisContext context);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static void <AnalyzeTree>g__ProcessLine|5_0(SyntaxTreeAnalysisContext context, ReadOnlySpan`1<char> text, int startIndex);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.GeneratedRegexAttributeUsageAnalyzer : RegexUsageAnalyzerBase {
    [NullableContextAttribute("1")]
public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.IfElseBranchesAreIdenticalAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static IfElseBranchesAreIdenticalAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private void AnalyzeConditional(OperationAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.JSInteropMustNotBeUsedInOnInitializedAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static JSInteropMustNotBeUsedInOnInitializedAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.JSInvokableMethodsMustBePublicAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static JSInvokableMethodsMustBePublicAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.LocalVariablesShouldNotHideSymbolsAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static LocalVariablesShouldNotHideSymbolsAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeVariableDeclaration(OperationAnalysisContext context);
    [IteratorStateMachineAttribute("Meziantou.Analyzer.Rules.LocalVariablesShouldNotHideSymbolsAnalyzer/<GetSymbols>d__5")]
private static IEnumerable`1<ISymbol> GetSymbols(INamedTypeSymbol type, string name, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static void <AnalyzeVariableDeclaration>g__ReportDiagnostic|4_0(string type, <>c__DisplayClass4_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.LoggerParameterTypeAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    private static DiagnosticDescriptor RuleSerilog;
    private static DiagnosticDescriptor RuleInvalid;
    private static DiagnosticDescriptor RuleDuplicate;
    private static DiagnosticDescriptor RuleMissingConfiguration;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static LoggerParameterTypeAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.MakeClassStaticAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static MakeClassStaticAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static bool IsPotentialStatic(INamedTypeSymbol symbol, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static bool <IsPotentialStatic>g__HasBaseClass|4_1(<>c__DisplayClass4_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.MakeMemberReadOnlyAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static MakeMemberReadOnlyAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static bool EnsureLanguageVersion(IOperation operation);
    private static bool CouldBeReadOnly(ISymbol symbol);
    private static bool CouldBeReadOnly(INamedTypeSymbol symbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.MakeMethodStaticAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor MethodRule;
    private static DiagnosticDescriptor PropertyRule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static MakeMethodStaticAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.MarkAttributesWithAttributeUsageAttributeAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static MarkAttributesWithAttributeUsageAttributeAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void Analyze(SymbolAnalysisContext context);
    private static bool HasAttributeUsageAttribute(INamedTypeSymbol symbol, ITypeSymbol attributeSymbol, ITypeSymbol attributeUsageSymbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.MethodOverridesShouldNotChangeParameterDefaultsAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static MethodOverridesShouldNotChangeParameterDefaultsAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeSymbol(SymbolAnalysisContext context);
    private static string GetParameterDisplayValue(IParameterSymbol parameter);
    [CompilerGeneratedAttribute]
internal static ImmutableDictionary`2<string, string> <AnalyzeSymbol>g__CreateProperties|4_0(IParameterSymbol parameter, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.MethodShouldNotBeTooLongAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static MethodShouldNotBeTooLongAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeMethod(SyntaxNodeAnalysisContext context);
    [NullableContextAttribute("2")]
private static void AnalyzeNode(SyntaxNodeAnalysisContext context, SyntaxNode node, SyntaxToken reportNode);
    internal static int CountStatements(SyntaxNodeAnalysisContext context, SyntaxNode block);
    private static bool GetSkipLocalFunctions(SyntaxNodeAnalysisContext context);
    private static int GetMaximumNumberOfStatements(SyntaxNodeAnalysisContext context);
    private static int GetMaximumNumberOfLines(SyntaxNodeAnalysisContext context);
    [CompilerGeneratedAttribute]
internal static bool <CountStatements>g__IsCountableStatement|6_1(StatementSyntax statement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.MethodsReturningAnAwaitableTypeMustHaveTheAsyncSuffixAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor AsyncSuffixRule;
    private static DiagnosticDescriptor NotAsyncSuffixRule;
    private static DiagnosticDescriptor AsyncSuffixRuleAsyncEnumerable;
    private static DiagnosticDescriptor NotAsyncSuffixRuleAsyncEnumerable;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static MethodsReturningAnAwaitableTypeMustHaveTheAsyncSuffixAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.NamedParameterAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static NamedParameterAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    [NullableContextAttribute("2")]
private static bool IsMethod(ISymbol method, ITypeSymbol containingType, string methodName);
    private static int GetMinimumMethodArgumentsConfiguration(AnalyzerOptions analyzerOptions, SyntaxNode node);
    private static ArgumentExpressionKinds GetExpressionKindsConfiguration(AnalyzerOptions analyzerOptions, SyntaxNode node);
    private static bool MustCheckExpressionKind(SyntaxNodeAnalysisContext context, SyntaxNode expression, ArgumentExpressionKinds kind);
    [CompilerGeneratedAttribute]
internal static bool <Initialize>g__IsParams|3_5(SyntaxNode node, <>c__DisplayClass3_1& , <>c__DisplayClass3_2& , <>c__DisplayClass3_3& );
    [CompilerGeneratedAttribute]
internal static bool <Initialize>g__IsBooleanExpression|3_3(SyntaxNode node);
    [CompilerGeneratedAttribute]
internal static bool <Initialize>g__IsStringExpression|3_4(SyntaxNode node);
}
internal static class Meziantou.Analyzer.Rules.NamedParameterAnalyzerCommon : object {
    [NullableContextAttribute("1")]
public static int ArgumentIndex(ArgumentSyntax argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.NonConstantStaticFieldsShouldNotBeVisibleAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static NonConstantStaticFieldsShouldNotBeVisibleAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeSymbol(SymbolAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.NonFlagsEnumsShouldNotBeMarkedWithFlagsAttributeAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static NonFlagsEnumsShouldNotBeMarkedWithFlagsAttributeAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeSymbol(SymbolAnalysisContext context);
    [NullableContextAttribute("2")]
private static bool IsSingleBitSet(object o);
    [NullableContextAttribute("2")]
private static bool IsZero(object o);
    [NullableContextAttribute("2")]
private static bool IsAllBitsSet(object o);
    private static object RemoveValue(object o, object valueToRemove);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.NullableAttributeUsageAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static NullableAttributeUsageAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeMethod(SymbolAnalysisContext context, INamedTypeSymbol notNullIfNotNullAttributeTypeSymbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.ObjectGetTypeOnTypeInstanceAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static ObjectGetTypeOnTypeInstanceAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.ObsoleteAttributesShouldIncludeExplanationsAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static ObsoleteAttributesShouldIncludeExplanationsAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeMethod(SymbolAnalysisContext context, INamedTypeSymbol obsoleteAttributeTypeSymbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.OptimizeLinqUsageAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor ListMethodsRule;
    private static DiagnosticDescriptor IndexerInsteadOfElementAtRule;
    private static DiagnosticDescriptor CombineLinqMethodsRule;
    private static DiagnosticDescriptor DuplicateOrderByMethodsRule;
    private static DiagnosticDescriptor OptimizeCountRule;
    private static DiagnosticDescriptor OptimizeWhereAndOrderByRule;
    private static DiagnosticDescriptor UseCastInsteadOfSelect;
    private static DiagnosticDescriptor UseCountInsteadOfAny;
    private static DiagnosticDescriptor UseOrderRule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static OptimizeLinqUsageAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
internal enum Meziantou.Analyzer.Rules.OptimizeLinqUsageData : Enum {
    public int value__;
    public static OptimizeLinqUsageData None;
    public static OptimizeLinqUsageData UseLengthProperty;
    public static OptimizeLinqUsageData UseLongLengthProperty;
    public static OptimizeLinqUsageData UseCountProperty;
    public static OptimizeLinqUsageData UseFindMethod;
    public static OptimizeLinqUsageData UseFindMethodWithConversion;
    public static OptimizeLinqUsageData UseIndexer;
    public static OptimizeLinqUsageData UseIndexerFirst;
    public static OptimizeLinqUsageData UseIndexerLast;
    public static OptimizeLinqUsageData DuplicatedOrderBy;
    public static OptimizeLinqUsageData CombineWhereWithNextMethod;
    public static OptimizeLinqUsageData UseFalse;
    public static OptimizeLinqUsageData UseTrue;
    public static OptimizeLinqUsageData UseAny;
    public static OptimizeLinqUsageData UseNotAny;
    public static OptimizeLinqUsageData UseTakeAndCount;
    public static OptimizeLinqUsageData UseSkipAndNotAny;
    public static OptimizeLinqUsageData UseSkipAndAny;
    public static OptimizeLinqUsageData UseCastInsteadOfSelect;
    public static OptimizeLinqUsageData UseTrueForAllMethod;
    public static OptimizeLinqUsageData UseTrueForAllMethodWithConversion;
    public static OptimizeLinqUsageData UseExistsMethod;
    public static OptimizeLinqUsageData UseExistsMethodWithConversion;
    public static OptimizeLinqUsageData UseOrder;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.OptimizeStartsWithAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static OptimizeStartsWithAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.OptimizeStringBuilderUsageAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static OptimizeStringBuilderUsageAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Meziantou.Analyzer.Rules.OptimizeStringBuilderUsageAnalyzerCommon : object {
    public static string GetConstStringValue(IOperation operation);
    public static bool TryGetConstStringValue(IOperation operation, StringBuilder sb);
}
internal enum Meziantou.Analyzer.Rules.OptimizeStringBuilderUsageData : Enum {
    public int value__;
    public static OptimizeStringBuilderUsageData None;
    public static OptimizeStringBuilderUsageData RemoveArgument;
    public static OptimizeStringBuilderUsageData RemoveMethod;
    public static OptimizeStringBuilderUsageData ReplaceWithChar;
    public static OptimizeStringBuilderUsageData SplitStringInterpolation;
    public static OptimizeStringBuilderUsageData SplitAddOperator;
    public static OptimizeStringBuilderUsageData RemoveToString;
    public static OptimizeStringBuilderUsageData ReplaceToStringWithAppendFormat;
    public static OptimizeStringBuilderUsageData ReplaceStringFormatWithAppendFormat;
    public static OptimizeStringBuilderUsageData ReplaceSubstring;
    public static OptimizeStringBuilderUsageData ReplaceStringJoinWithAppendJoin;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.OptionalParametersAttributeAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor OptionalRule;
    private static DiagnosticDescriptor DefaultValueRule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static OptionalParametersAttributeAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.ParameterAttributeForRazorComponentAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor SupplyParameterFromQueryRule;
    private static DiagnosticDescriptor SupplyParameterFromQueryRoutableRule;
    private static DiagnosticDescriptor EditorRequiredRule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static ParameterAttributeForRazorComponentAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.PreferReturningCollectionAbstractionInsteadOfImplementationAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static PreferReturningCollectionAbstractionInsteadOfImplementationAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.PreserveParamsOnOverrideAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static PreserveParamsOnOverrideAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeSymbol(SymbolAnalysisContext context);
    [CompilerGeneratedAttribute]
internal static bool <AnalyzeSymbol>g__HasParamsKeyword|4_0(IParameterSymbol parameter, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.PrimaryConstructorParameterShouldBeReadOnlyAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static PrimaryConstructorParameterShouldBeReadOnlyAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private void AnalyzerArgument(OperationAnalysisContext context);
    private void AnalyzerInitializer(OperationAnalysisContext context);
    private void AnalyzerIncrementOrDecrement(OperationAnalysisContext context);
    private void AnalyzerAssignment(OperationAnalysisContext context);
    private static bool IsPrimaryConstructorParameter(IOperation operation, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <Initialize>b__3_0(CompilationStartAnalysisContext context);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<IOperation> <AnalyzerAssignment>g__GetAllPrimaryCtorAssignmentTargets|7_0(IOperation operation, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static void <AnalyzerAssignment>g__GetAllAssignmentTargets|7_1(List`1& operations, IOperation operation, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.ProcessStartAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor UseShellExecuteMustBeExplicitlySet;
    private static DiagnosticDescriptor UseProcessStartOverload;
    private static DiagnosticDescriptor SetToFalseWhenRedirectingOutput;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static ProcessStartAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.RegexMethodUsageAnalyzer : RegexUsageAnalyzerBase {
    [NullableContextAttribute("1")]
public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Meziantou.Analyzer.Rules.RegexUsageAnalyzerBase : DiagnosticAnalyzer {
    private static String[] MethodNames;
    private static DiagnosticDescriptor TimeoutRule;
    private static DiagnosticDescriptor ExplicitCaptureRule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static RegexUsageAnalyzerBase();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    protected static void AnalyzeMethod(SymbolAnalysisContext context);
    private static bool HasNonBacktracking(RegexOptions options);
    protected static void AnalyzeInvocation(OperationAnalysisContext context);
    protected static void AnalyzeObjectCreation(OperationAnalysisContext context);
    private static bool CheckTimeout(OperationAnalysisContext context, ImmutableArray`1<IArgumentOperation> args);
    [NullableContextAttribute("2")]
private static RegexOptions CheckRegexOptionsArgument(OperationAnalysisContext context, int patternArgumentIndex, ImmutableArray`1<IArgumentOperation> arguments, ITypeSymbol regexOptionsSymbol);
    private static bool ShouldAddExplicitCapture(string pattern, RegexOptions regexOptions);
    [CompilerGeneratedAttribute]
internal static bool <ShouldAddExplicitCapture>g__HasUnnamedGroups|11_0(string pattern, RegexOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.RemoveEmptyBlockAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static RemoveEmptyBlockAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeFinally(SyntaxNodeAnalysisContext context);
    private static void AnalyzeElse(SyntaxNodeAnalysisContext context);
    [NullableContextAttribute("2")]
private static bool IsEmptyBlock(BlockSyntax block);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.RemoveEmptyStatementAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static RemoveEmptyStatementAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void Analyze(SyntaxNodeAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.RemoveUselessToStringAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static RemoveUselessToStringAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeOperation(OperationAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.ReplaceEnumToStringWithNameofAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static ReplaceEnumToStringWithNameofAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeInvocation(OperationAnalysisContext context);
    private static void AnalyzeInterpolation(OperationAnalysisContext context);
    [NullableContextAttribute("2")]
private static bool IsNameFormat(object format);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.ReturnTaskFromResultInsteadOfReturningNullAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static ReturnTaskFromResultInsteadOfReturningNullAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
internal static class Meziantou.Analyzer.Rules.ReturnTaskFromResultInsteadOfReturningNullAnalyzerCommon : object {
    [NullableContextAttribute("1")]
internal static IMethodSymbol FindContainingMethod(IOperation operation, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
internal static IMethodSymbol FindContainingMethod(SemanticModel semanticModel, SyntaxNode syntaxNode, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.SequenceNumberMustBeAConstantAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static SequenceNumberMustBeAConstantAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.SimplifyCallerArgumentExpressionAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static SimplifyCallerArgumentExpressionAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeInvocation(OperationAnalysisContext context);
    private static void AnalyzeArgument(OperationAnalysisContext context, IInvocationOperation invocation, IArgumentOperation argument);
}
[ExtensionAttribute]
internal static class Meziantou.Analyzer.Rules.StringExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static LineSplitEnumerator SplitLines(string str);
    [ExtensionAttribute]
public static LineSplitEnumerator SplitLines(ReadOnlySpan`1<char> str);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.StringShouldNotContainsNonDeterministicEndOfLineAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    private static DiagnosticDescriptor RuleRawString;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static StringShouldNotContainsNonDeterministicEndOfLineAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeInterpolatedString(SyntaxNodeAnalysisContext context);
    private static void AnalyzeStringLiteralExpression(SyntaxNodeAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.TaskInUsingAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static TaskInUsingAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.ThrowIfNullWithNonNullableInstanceAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static ThrowIfNullWithNonNullableInstanceAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.TypeNameMustNotMatchNamespaceAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static TypeNameMustNotMatchNamespaceAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeSymbol(SymbolAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.TypesShouldNotExtendSystemApplicationExceptionAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static TypesShouldNotExtendSystemApplicationExceptionAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void Analyze(SymbolAnalysisContext context, INamedTypeSymbol applicationExceptionType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.UseAnOverloadThatHasCancellationTokenAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor UseAnOverloadThatHasCancellationTokenRule;
    private static DiagnosticDescriptor UseAnOverloadThatHasCancellationTokenWhenACancellationTokenIsAvailableRule;
    private static DiagnosticDescriptor FlowCancellationTokenInAwaitForEachRule;
    private static DiagnosticDescriptor FlowCancellationTokenInAwaitForEachRuleWhenACancellationTokenIsAvailableRule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UseAnOverloadThatHasCancellationTokenAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.UseArrayEmptyAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UseArrayEmptyAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeArrayCreationOperation(OperationAnalysisContext context);
    private static bool IsZeroLengthArrayCreation(IArrayCreationOperation operation);
    private static bool IsInAttribute(IArrayCreationOperation operation);
    private static bool IsCompilerGeneratedParamsArray(IArrayCreationOperation arrayCreationExpression, OperationAnalysisContext context);
    private static ImmutableArray`1<IParameterSymbol> GetParameters(ISymbol symbol);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <IsZeroLengthArrayCreation>g__IsZero|5_0(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.UseConfigureAwaitAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UseConfigureAwaitAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.UseContainsKeyInsteadOfTryGetValueAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UseContainsKeyInsteadOfTryGetValueAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.UseDateTimeUnixEpochAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor DateTimeRule;
    private static DiagnosticDescriptor DateTimeOffsetRule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UseDateTimeUnixEpochAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeDateTimeObjectCreation(OperationAnalysisContext context, ITypeSymbol dateTimeSymbol);
    private static void AnalyzeDateTimeOffsetObjectCreation(OperationAnalysisContext context, ITypeSymbol dateTimeSymbol, ITypeSymbol dateTimeOffsetSymbol);
    private static bool IsDateTimeUnixEpoch(IObjectCreationOperation operation, Compilation compilation, ITypeSymbol dateTimeSymbol);
    private static bool IsDateTimeKindUtc(Compilation compilation, IArgumentOperation argument);
    private static bool ArgumentsEquals(ReadOnlySpan`1<IArgumentOperation> arguments, Object[] expectedValues);
    private static bool IsTimeSpanZero(IArgumentOperation operation);
    [CompilerGeneratedAttribute]
internal static bool <AnalyzeDateTimeOffsetObjectCreation>g__IsDateTimeOffsetUnixEpoch|6_0(<>c__DisplayClass6_0& );
    [CompilerGeneratedAttribute]
internal static bool <AnalyzeDateTimeOffsetObjectCreation>g__IsUnixEpochProperty|6_1(IArgumentOperation argumentOperation, <>c__DisplayClass6_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.UseEventArgsEmptyAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UseEventArgsEmptyAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void Analyze(OperationAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.UseEventHandlerOfTAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UseEventHandlerOfTAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.UseGuidEmptyAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UseGuidEmptyAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeObjectCreationOperation(OperationAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.UseIFormatProviderAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UseIFormatProviderAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.UseIsPatternInsteadOfSequenceEqualAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UseIsPatternInsteadOfSequenceEqualAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeInvocation(OperationAnalysisContext context, INamedTypeSymbol spanCharSymbol, INamedTypeSymbol readOnlySpanCharSymbol, INamedTypeSymbol memoryExtensionsSymbol, INamedTypeSymbol stringComparisonSymbol);
    [CompilerGeneratedAttribute]
internal static bool <AnalyzeInvocation>g__IsConstantValue|4_0(IOperation operation);
    [CompilerGeneratedAttribute]
internal static bool <AnalyzeInvocation>g__IsStringComparisonOrdinal|4_1(IOperation operation, INamedTypeSymbol stringComparisonSymbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.UseJSRuntimeInvokeVoidAsyncWhenReturnValueIsNotUsedAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UseJSRuntimeInvokeVoidAsyncWhenReturnValueIsNotUsedAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.UseLangwordInXmlCommentAnalyzer : DiagnosticAnalyzer {
    private static ObjectPool`1<Queue`1<SyntaxNode>> NodeQueuePool;
    private static HashSet`1<string> CSharpKeywords;
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UseLangwordInXmlCommentAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeSymbol(SymbolAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.UseOperatingSystemInsteadOfRuntimeInformationAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UseOperatingSystemInsteadOfRuntimeInformationAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeInvocation(OperationAnalysisContext context, IMethodSymbol runtimeInformationSymbol, INamedTypeSymbol osPlatformSymbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.UsePatternMatchingForEqualityComparisonsAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor RuleEqualNull;
    private static DiagnosticDescriptor RuleNotEqualNull;
    private static DiagnosticDescriptor RuleEqualConstant;
    private static DiagnosticDescriptor RuleNotEqualConstant;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UsePatternMatchingForEqualityComparisonsAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Meziantou.Analyzer.Rules.UsePatternMatchingForEqualityComparisonsCommon : object {
    public static bool IsNull(IOperation operation);
    public static bool IsConstantLiteral(IOperation operation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.UseRegexSourceGeneratorAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor RegexSourceGeneratorRule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UseRegexSourceGeneratorAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static bool CanReport(IOperation operation);
    private static void AnalyzeObjectCreation(OperationAnalysisContext context);
    private static void AnalyzeInvocation(OperationAnalysisContext context);
    private static bool IsConstant(IArgumentOperation argumentOperation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Meziantou.Analyzer.Rules.UseRegexSourceGeneratorAnalyzerCommon : object {
    internal static string PatternIndexName;
    internal static string RegexOptionsIndexName;
    internal static string RegexTimeoutIndexName;
    internal static string RegexTimeoutName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.UseStringComparerAnalyzer : DiagnosticAnalyzer {
    private static String[] EnumerableMethods;
    private static Dictionary`2<string, int> ArityIndex;
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UseStringComparerAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.UseStringComparisonAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor AvoidCultureSensitiveMethodRule;
    private static DiagnosticDescriptor UseStringComparisonRule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UseStringComparisonAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.UseStringCreateInsteadOfFormattableStringAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UseStringCreateInsteadOfFormattableStringAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.UseStringEqualsAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UseStringEqualsAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeInvocation(OperationAnalysisContext context, OperationUtilities operationUtilities);
    private static bool IsNull(IOperation operation);
    private static bool IsStringEmpty(IOperation operation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.UseStringEqualsInsteadOfIsPatternAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor RulePattern;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UseStringEqualsInsteadOfIsPatternAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeIsPattern(OperationAnalysisContext context);
    [CompilerGeneratedAttribute]
internal static void <AnalyzeIsPattern>g__AnalyzePattern|4_0(OperationAnalysisContext context, IPatternOperation pattern);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.UseStructLayoutAttributeAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UseStructLayoutAttributeAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void Analyze(SymbolAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.UseSystemThreadingLockInsteadOfObjectAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UseSystemThreadingLockInsteadOfObjectAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.UseTaskUnwrapAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UseTaskUnwrapAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.ValidateArgumentsCorrectlyAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static ValidateArgumentsCorrectlyAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.ValidateUnsafeAccessorAttributeUsageAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor RuleInvalidSignature;
    private static DiagnosticDescriptor RuleNameMustBeSet;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static ValidateUnsafeAccessorAttributeUsageAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeLocalFunctions(OperationAnalysisContext context, INamedTypeSymbol attributeSymbol);
    private static void AnalyzeMethodSymbol(SymbolAnalysisContext context, INamedTypeSymbol attributeSymbol);
    private static void AnalyzeMethodSymbol(IMethodSymbol methodSymbol, INamedTypeSymbol attributeSymbol, DiagnosticReporter diagnosticReporter);
    private static bool IsRefOrRefReadOnly(RefKind kind);
    private static string GetName(AttributeData data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Rules.ValueReturnedByStreamReadShouldBeUsedAnalyzer : DiagnosticAnalyzer {
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static ValueReturnedByStreamReadShouldBeUsedAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeOperation(OperationAnalysisContext context, INamedTypeSymbol streamSymbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Meziantou.Analyzer.Suppressors.CA1822DecoratedMethodSuppressor : DiagnosticSuppressor {
    private static SuppressionDescriptor RuleBenchmarkDotNet;
    private static SuppressionDescriptor RuleJsonPropertyName;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ValueTuple`2[] AttributeNames;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<SuppressionDescriptor> SupportedSuppressions { get; }
    private static CA1822DecoratedMethodSuppressor();
    public virtual ImmutableArray`1<SuppressionDescriptor> get_SupportedSuppressions();
    public virtual void ReportSuppressions(SuppressionAnalysisContext context);
    private static void ProcessDiagnostic(SuppressionAnalysisContext context, SuppressionDescriptor descriptor, INamedTypeSymbol attributeSymbol, Diagnostic diagnostic);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Meziantou.Analyzer.SymbolExtensions : object {
    [ExtensionAttribute]
public static bool IsEqualTo(ISymbol symbol, ISymbol expectedType);
    [ExtensionAttribute]
public static bool IsVisibleOutsideOfAssembly(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsOperator(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsOverrideOrInterfaceImplementation(ISymbol symbol);
    [ExtensionAttribute]
public static bool Override(IMethodSymbol symbol, ISymbol baseSymbol);
    [ExtensionAttribute]
public static bool IsConst(ISymbol symbol);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Meziantou.Analyzer.SymbolExtensions/<GetAllMembers>d__6")]
[ExtensionAttribute]
public static IEnumerable`1<ISymbol> GetAllMembers(ITypeSymbol symbol);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsTopLevelStatement(ISymbol symbol, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool IsTopLevelStatementsEntryPointMethod(IMethodSymbol methodSymbol);
    [ExtensionAttribute]
public static bool IsTopLevelStatementsEntryPointType(INamedTypeSymbol typeSymbol);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ITypeSymbol GetSymbolType(ISymbol symbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Meziantou.Analyzer.SyntaxTokenListExtensions : object {
    private static String[] ModifiersSortOrder;
    private static SyntaxTokenListExtensions();
    private static String[] GetModifiersOrder();
    [ExtensionAttribute]
public static SyntaxTokenList Remove(SyntaxTokenList list, SyntaxKind syntaxToRemove);
    [ExtensionAttribute]
public static SyntaxTokenList Add(SyntaxTokenList list, SyntaxKind syntaxKind);
    [ExtensionAttribute]
public static SyntaxTokenList Add(SyntaxTokenList list, SyntaxToken syntaxToken);
    private static int IndexOf(SyntaxToken token);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Meziantou.Analyzer.TypeSymbolExtensions : object {
    [NullableAttribute("1")]
private static String[] Microsoft_VisualStudio_TestTools_UnitTesting;
    [NullableAttribute("1")]
private static String[] NUnit_Framework;
    [NullableAttribute("1")]
private static String[] Xunit;
    private static TypeSymbolExtensions();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IList`1<INamedTypeSymbol> GetAllInterfacesIncludingThis(ITypeSymbol type);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool InheritsFrom(ITypeSymbol classSymbol, ITypeSymbol baseClassType);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool Implements(ITypeSymbol classSymbol, ITypeSymbol interfaceType);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsOrImplements(ITypeSymbol symbol, ITypeSymbol interfaceType);
    [ExtensionAttribute]
public static AttributeData GetAttribute(ISymbol symbol, ITypeSymbol attributeType, bool inherits);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool HasAttribute(ISymbol symbol, ITypeSymbol attributeType, bool inherits);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsOrInheritFrom(ITypeSymbol symbol, ITypeSymbol expectedType);
    [ExtensionAttribute]
public static bool IsEqualToAny(ITypeSymbol symbol, ITypeSymbol[] expectedTypes);
    [ExtensionAttribute]
public static bool IsEqualToAny(ITypeSymbol symbol, ITypeSymbol expectedType1);
    [ExtensionAttribute]
public static bool IsEqualToAny(ITypeSymbol symbol, ITypeSymbol expectedType1, ITypeSymbol expectedType2);
    [ExtensionAttribute]
public static bool IsEqualToAny(ITypeSymbol symbol, ITypeSymbol expectedType1, ITypeSymbol expectedType2, ITypeSymbol expectedType3);
    [ExtensionAttribute]
public static bool IsObject(ITypeSymbol symbol);
    [ExtensionAttribute]
public static bool IsString(ITypeSymbol symbol);
    [ExtensionAttribute]
public static bool IsChar(ITypeSymbol symbol);
    [ExtensionAttribute]
public static bool IsInt32(ITypeSymbol symbol);
    [ExtensionAttribute]
public static bool IsBoolean(ITypeSymbol symbol);
    [ExtensionAttribute]
public static bool IsDateTime(ITypeSymbol symbol);
    [ExtensionAttribute]
public static bool IsEnumeration(ITypeSymbol symbol);
    [ExtensionAttribute]
public static INamedTypeSymbol GetEnumerationType(ITypeSymbol symbol);
    [ExtensionAttribute]
public static bool IsNumberType(ITypeSymbol symbol);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsUnitTestClass(ITypeSymbol typeSymbol);
    [ExtensionAttribute]
public static ITypeSymbol GetUnderlyingNullableTypeOrSelf(ITypeSymbol typeSymbol);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class PolyfillExtensions : object {
    [ExtensionAttribute]
public static TValue GetOrAdd(ConcurrentDictionary`2<TKey, TValue> target, TKey key, Func`3<TKey, TArg, TValue> valueFactory, TArg factoryArgument);
    [ExtensionAttribute]
public static TValue GetValueOrDefault(IReadOnlyDictionary`2<TKey, TValue> dictionary, TKey key, TValue defaultValue);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TValue GetValueOrDefault(IReadOnlyDictionary`2<TKey, TValue> dictionary, TKey key);
    [ExtensionAttribute]
public static void Deconstruct(KeyValuePair`2<TKey, TValue> target, TKey& key, TValue& value);
    [ExtensionAttribute]
public static bool TryDequeue(Queue`1<T> target, T& result);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ReadOnlySpan`1<T> AsSpan(ImmutableArray`1<T> target, Range range);
    [AsyncStateMachineAttribute("PolyfillExtensions/<WaitForExitAsync>d__6")]
[ExtensionAttribute]
public static Task WaitForExitAsync(Process target, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static int Read(Stream target, Span`1<byte> buffer);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("PolyfillExtensions/<ReadAsync>d__9")]
[ExtensionAttribute]
public static ValueTask`1<int> ReadAsync(Stream target, Memory`1<byte> buffer, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static int ReadAtLeast(Stream target, Span`1<byte> buffer, int minimumBytes, bool throwOnEndOfStream);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("PolyfillExtensions/<ReadAtLeastAsync>d__11")]
[ExtensionAttribute]
public static ValueTask`1<int> ReadAtLeastAsync(Stream target, Memory`1<byte> buffer, int minimumBytes, bool throwOnEndOfStream, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static void Write(Stream target, ReadOnlySpan`1<byte> buffer);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("PolyfillExtensions/<WriteAsync>d__13")]
[ExtensionAttribute]
public static ValueTask WriteAsync(Stream target, ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask`1<string> ReadLineAsync(StreamReader target, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static ValueTask`1<int> ReadAsync(TextReader target, Memory`1<char> buffer, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<string> ReadToEndAsync(TextReader target, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static ValueTask WriteAsync(TextWriter target, ReadOnlyMemory`1<char> buffer, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<TKey, TAccumulate>> AggregateBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TKey, TAccumulate> seedSelector, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<TKey, TAccumulate>> AggregateBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<TKey, int>> CountBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> keyComparer);
    [IteratorStateMachineAttribute("PolyfillExtensions/<DistinctBy>d__21`2")]
[ExtensionAttribute]
public static IEnumerable`1<TSource> DistinctBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [IteratorStateMachineAttribute("PolyfillExtensions/<DistinctBy>d__22`2")]
[ExtensionAttribute]
public static IEnumerable`1<TSource> DistinctBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [IteratorStateMachineAttribute("PolyfillExtensions/<Index>d__23`1")]
[ExtensionAttribute]
public static IEnumerable`1<ValueTuple`2<int, TSource>> Index(IEnumerable`1<TSource> source);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TSource MaxBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TSource MaxBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TSource MinBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TSource MinBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<T> OrderDescending(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<T> OrderDescending(IEnumerable`1<T> source, IComparer`1<T> comparer);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<T> Order(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<T> Order(IEnumerable`1<T> source, IComparer`1<T> comparer);
    [ExtensionAttribute]
public static HashSet`1<TSource> ToHashSet(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static HashSet`1<TSource> ToHashSet(IEnumerable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<ValueTuple`2<TFirst, TSecond>> Zip(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static int CommonPrefixLength(ReadOnlySpan`1<T> span, ReadOnlySpan`1<T> other);
    [ExtensionAttribute]
public static int CommonPrefixLength(ReadOnlySpan`1<T> span, ReadOnlySpan`1<T> other, IEqualityComparer`1<T> comparer);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static int CommonPrefixLength(Span`1<T> span, ReadOnlySpan`1<T> other);
    [ExtensionAttribute]
public static int CommonPrefixLength(Span`1<T> span, ReadOnlySpan`1<T> other, IEqualityComparer`1<T> comparer);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool ContainsAnyExcept(ReadOnlySpan`1<T> span, ReadOnlySpan`1<T> values);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool ContainsAnyExcept(ReadOnlySpan`1<T> span, T value);
    [ExtensionAttribute]
public static bool ContainsAnyExcept(ReadOnlySpan`1<T> span, T value0, T value1);
    [ExtensionAttribute]
public static bool ContainsAnyExcept(ReadOnlySpan`1<T> span, T value0, T value1, T value2);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool ContainsAnyExcept(Span`1<T> span, ReadOnlySpan`1<T> values);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool ContainsAnyExcept(Span`1<T> span, T value);
    [ExtensionAttribute]
public static bool ContainsAnyExcept(Span`1<T> span, T value0, T value1);
    [ExtensionAttribute]
public static bool ContainsAnyExcept(Span`1<T> span, T value0, T value1, T value2);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool ContainsAny(Span`1<T> span, ReadOnlySpan`1<T> values);
    [ExtensionAttribute]
public static bool ContainsAny(Span`1<T> span, T value0, T value1);
    [ExtensionAttribute]
public static bool ContainsAny(Span`1<T> span, T value0, T value1, T value2);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool Contains(ReadOnlySpan`1<T> span, T value);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool Contains(Span`1<T> span, T value);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static int IndexOfAnyExcept(ReadOnlySpan`1<T> span, ReadOnlySpan`1<T> values);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static int IndexOfAnyExcept(ReadOnlySpan`1<T> span, T value);
    [ExtensionAttribute]
public static int IndexOfAnyExcept(ReadOnlySpan`1<T> span, T value0, T value1);
    [ExtensionAttribute]
public static int IndexOfAnyExcept(ReadOnlySpan`1<T> span, T value0, T value1, T value2);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static int IndexOfAnyExcept(Span`1<T> span, ReadOnlySpan`1<T> values);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static int IndexOfAnyExcept(Span`1<T> span, T value);
    [ExtensionAttribute]
public static int IndexOfAnyExcept(Span`1<T> span, T value0, T value1);
    [ExtensionAttribute]
public static int IndexOfAnyExcept(Span`1<T> span, T value0, T value1, T value2);
    [ExtensionAttribute]
public static void CopyTo(HttpContent target, Stream stream, TransportContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("PolyfillExtensions/<CopyToAsync>d__61")]
[ExtensionAttribute]
public static Task CopyToAsync(HttpContent target, Stream stream, TransportContext context, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task CopyToAsync(HttpContent target, Stream stream, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Stream ReadAsStream(HttpContent httpContent, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Stream ReadAsStream(HttpContent httpContent);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static int Send(UdpClient client, ReadOnlySpan`1<byte> datagram, IPEndPoint endPoint);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static int Send(UdpClient client, ReadOnlySpan`1<byte> datagram, string hostname, int port);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static ValueTask`1<int> SendAsync(UdpClient client, ReadOnlyMemory`1<byte> datagram, IPEndPoint endPoint, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static ValueTask`1<int> SendAsync(UdpClient client, ReadOnlyMemory`1<byte> datagram, string hostname, int port, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static ValueTask`1<int> SendAsync(UdpClient client, ReadOnlyMemory`1<byte> datagram, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool Contains(string target, char value);
    [ExtensionAttribute]
public static bool Contains(string target, char value, StringComparison comparisonType);
    [ExtensionAttribute]
public static bool Contains(string target, string value, StringComparison comparisonType);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static void CopyTo(string target, Span`1<char> destination);
    [ExtensionAttribute]
public static bool EndsWith(string target, char value);
    [ExtensionAttribute]
public static int GetHashCode(string target, StringComparison comparisonType);
    [ExtensionAttribute]
public static int IndexOf(string target, char value, StringComparison comparisonType);
    [ExtensionAttribute]
public static string Replace(string target, string oldValue, string newValue, StringComparison comparisonType);
    [ExtensionAttribute]
public static string ReplaceLineEndings(string target, string replacementText);
    [ExtensionAttribute]
public static string ReplaceLineEndings(string target);
    [ExtensionAttribute]
public static String[] Split(string target, char separator, int count, StringSplitOptions options);
    [ExtensionAttribute]
public static String[] Split(string target, char separator, StringSplitOptions options);
    [ExtensionAttribute]
public static bool StartsWith(string target, char value);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool TryCopyTo(string target, Span`1<char> destination);
    [ExtensionAttribute]
public static string GetString(Encoding target, ReadOnlySpan`1<byte> bytes);
    [ExtensionAttribute]
public static StringBuilder Append(StringBuilder target, ReadOnlyMemory`1<char> value);
    [ExtensionAttribute]
public static StringBuilder Append(StringBuilder target, ReadOnlySpan`1<char> value);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder target, char separator, Object[] values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder target, char separator, String[] values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder target, string separator, Object[] values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder target, string separator, String[] values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder target, char separator, IEnumerable`1<T> values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder target, string separator, IEnumerable`1<T> values);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static StringBuilder Replace(StringBuilder target, ReadOnlySpan`1<char> oldValue, ReadOnlySpan`1<char> newValue);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static StringBuilder Replace(StringBuilder target, ReadOnlySpan`1<char> oldValue, ReadOnlySpan`1<char> newValue, int startIndex, int count);
    [ExtensionAttribute]
public static Task CancelAsync(CancellationTokenSource target);
    [ExtensionAttribute]
public static Task`1<TResult> WaitAsync(Task`1<TResult> task, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool IsAssignableTo(Type target, Type targetType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Count = {Count}")]
internal class System.Collections.Generic.PriorityQueue`2 : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2[] _nodes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IComparer`1<TPriority> _comparer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private UnorderedItemsCollection<TElement, TPriority> _unorderedItems;
    private int _size;
    private int _version;
    private static int Arity;
    private static int Log2Arity;
    public int Count { get; }
    public IComparer`1<TPriority> Comparer { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public UnorderedItemsCollection<TElement, TPriority> UnorderedItems { get; }
    public PriorityQueue`2(int initialCapacity);
    public PriorityQueue`2(IComparer`1<TPriority> comparer);
    public PriorityQueue`2(int initialCapacity, IComparer`1<TPriority> comparer);
    public PriorityQueue`2(IEnumerable`1<ValueTuple`2<TElement, TPriority>> items);
    public PriorityQueue`2(IEnumerable`1<ValueTuple`2<TElement, TPriority>> items, IComparer`1<TPriority> comparer);
    public int get_Count();
    public IComparer`1<TPriority> get_Comparer();
    public UnorderedItemsCollection<TElement, TPriority> get_UnorderedItems();
    public void Enqueue(TElement element, TPriority priority);
    public TElement Peek();
    public TElement Dequeue();
    public TElement DequeueEnqueue(TElement element, TPriority priority);
    public bool TryDequeue(TElement& element, TPriority& priority);
    public bool TryPeek(TElement& element, TPriority& priority);
    public TElement EnqueueDequeue(TElement element, TPriority priority);
    public void EnqueueRange(IEnumerable`1<ValueTuple`2<TElement, TPriority>> items);
    public void EnqueueRange(IEnumerable`1<TElement> elements, TPriority priority);
    public void Clear();
    public int EnsureCapacity(int capacity);
    public void TrimExcess();
    private void Grow(int minCapacity);
    private void RemoveRootNode();
    private static int GetParentIndex(int index);
    private static int GetFirstChildIndex(int index);
    private void Heapify();
    private void MoveUpDefaultComparer(ValueTuple`2<TElement, TPriority> node, int nodeIndex);
    private void MoveUpCustomComparer(ValueTuple`2<TElement, TPriority> node, int nodeIndex);
    private void MoveDownDefaultComparer(ValueTuple`2<TElement, TPriority> node, int nodeIndex);
    private void MoveDownCustomComparer(ValueTuple`2<TElement, TPriority> node, int nodeIndex);
    private static IComparer`1<TPriority> InitializeComparer(IComparer`1<TPriority> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Collections.Generic.ReferenceEqualityComparer : object {
    [CompilerGeneratedAttribute]
private static ReferenceEqualityComparer <Instance>k__BackingField;
    public static ReferenceEqualityComparer Instance { get; }
    private static ReferenceEqualityComparer();
    [CompilerGeneratedAttribute]
public static ReferenceEqualityComparer get_Instance();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(object x, object y);
    [NullableContextAttribute("2")]
public sealed virtual int GetHashCode(object obj);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("28108")]
internal class System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute : Attribute {
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public DynamicallyAccessedMembersAttribute(DynamicallyAccessedMemberTypes memberTypes);
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
}
[FlagsAttribute]
internal enum System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes : Enum {
    public int value__;
    public static DynamicallyAccessedMemberTypes None;
    public static DynamicallyAccessedMemberTypes PublicParameterlessConstructor;
    public static DynamicallyAccessedMemberTypes PublicConstructors;
    public static DynamicallyAccessedMemberTypes NonPublicConstructors;
    public static DynamicallyAccessedMemberTypes PublicMethods;
    public static DynamicallyAccessedMemberTypes NonPublicMethods;
    public static DynamicallyAccessedMemberTypes PublicFields;
    public static DynamicallyAccessedMemberTypes NonPublicFields;
    public static DynamicallyAccessedMemberTypes PublicNestedTypes;
    public static DynamicallyAccessedMemberTypes NonPublicNestedTypes;
    public static DynamicallyAccessedMemberTypes PublicProperties;
    public static DynamicallyAccessedMemberTypes NonPublicProperties;
    public static DynamicallyAccessedMemberTypes PublicEvents;
    public static DynamicallyAccessedMemberTypes NonPublicEvents;
    public static DynamicallyAccessedMemberTypes Interfaces;
    public static DynamicallyAccessedMemberTypes All;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("352")]
internal class System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <MemberSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    public string MemberSignature { get; }
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public Type Type { get; }
    public string TypeName { get; }
    public string AssemblyName { get; }
    public string Condition { get; public set; }
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature, Type type);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature, string typeName, string assemblyName);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, Type type);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, string typeName, string assemblyName);
    [CompilerGeneratedAttribute]
public string get_MemberSignature();
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6143")]
internal class System.Diagnostics.CodeAnalysis.ExperimentalAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DiagnosticId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <UrlFormat>k__BackingField;
    public string DiagnosticId { get; }
    [NullableAttribute("2")]
public string UrlFormat { get; public set; }
    public ExperimentalAttribute(string diagnosticId);
    [CompilerGeneratedAttribute]
public string get_DiagnosticId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_UrlFormat();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_UrlFormat(string value);
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("736")]
internal class System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    [NullableContextAttribute("1")]
public RequiresAssemblyFilesAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("100")]
internal class System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    [NullableAttribute("2")]
public string Url { get; public set; }
    public RequiresDynamicCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("100")]
internal class System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    [NullableAttribute("2")]
public string Url { get; public set; }
    public RequiresUnreferencedCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Url(string value);
}
[AttributeUsageAttribute("32")]
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.StringSyntaxAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    public static string CompositeFormat;
    public static string DateOnlyFormat;
    public static string DateTimeFormat;
    public static string EnumFormat;
    public static string GuidFormat;
    public static string Json;
    public static string NumericFormat;
    public static string Regex;
    public static string TimeOnlyFormat;
    public static string TimeSpanFormat;
    public static string Uri;
    public static string Xml;
    public string Syntax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public StringSyntaxAttribute(string syntax);
    public StringSyntaxAttribute(string syntax, Object[] arguments);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
internal class System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute : Attribute {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <CheckId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Justification>k__BackingField;
    [NullableAttribute("1")]
public string Category { get; }
    [NullableAttribute("1")]
public string CheckId { get; }
    public string Scope { get; public set; }
    public string Target { get; public set; }
    public string MessageId { get; public set; }
    public string Justification { get; public set; }
    [NullableContextAttribute("1")]
public UnconditionalSuppressMessageAttribute(string category, string checkId);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Category();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_CheckId();
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public string get_Justification();
    [CompilerGeneratedAttribute]
public void set_Justification(string value);
}
[AttributeUsageAttribute("2240")]
internal class System.Diagnostics.CodeAnalysis.UnscopedRefAttribute : Attribute {
}
[AttributeUsageAttribute("108")]
internal class System.Diagnostics.StackTraceHiddenAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.HashCode : ValueType {
    private static UInt32 s_seed;
    private static UInt32 Prime1;
    private static UInt32 Prime2;
    private static UInt32 Prime3;
    private static UInt32 Prime4;
    private static UInt32 Prime5;
    private UInt32 _v1;
    private UInt32 _v2;
    private UInt32 _v3;
    private UInt32 _v4;
    private UInt32 _queue1;
    private UInt32 _queue2;
    private UInt32 _queue3;
    private UInt32 _length;
    private static HashCode();
    private static UInt32 GenerateGlobalSeed();
    public static int Combine(T1 value1);
    public static int Combine(T1 value1, T2 value2);
    public static int Combine(T1 value1, T2 value2, T3 value3);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8);
    private static void Initialize(UInt32& v1, UInt32& v2, UInt32& v3, UInt32& v4);
    private static UInt32 Round(UInt32 hash, UInt32 input);
    private static UInt32 QueueRound(UInt32 hash, UInt32 queuedValue);
    private static UInt32 MixState(UInt32 v1, UInt32 v2, UInt32 v3, UInt32 v4);
    private static UInt32 MixEmptyState();
    private static UInt32 MixFinal(UInt32 hash);
    public void Add(T value);
    public void Add(T value, IEqualityComparer`1<T> comparer);
    private void Add(int value);
    public int ToHashCode();
    [ObsoleteAttribute("HashCode is a mutable struct and should not be compared with other HashCodes. Use ToHashCode to retrieve the computed hash code.", "True")]
[EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[ObsoleteAttribute("HashCode is a mutable struct and should not be compared with other HashCodes.", "True")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
}
[IsReadOnlyAttribute]
internal class System.Index : ValueType {
    private int _value;
    public static Index Start { get; }
    public static Index End { get; }
    public int Value { get; }
    public bool IsFromEnd { get; }
    public Index(int value, bool fromEnd);
    private Index(int value);
    public static Index get_Start();
    public static Index get_End();
    public static Index FromStart(int value);
    public static Index FromEnd(int value);
    public int get_Value();
    public bool get_IsFromEnd();
    public int GetOffset(int length);
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public sealed virtual bool Equals(Index other);
    public virtual int GetHashCode();
    public static Index op_Implicit(int value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
private string ToStringFromEnd();
}
internal class System.Net.Http.ReadOnlyMemoryContent : HttpContent {
    private ReadOnlyMemory`1<byte> _content;
    public ReadOnlyMemoryContent(ReadOnlyMemory`1<byte> content);
    [NullableContextAttribute("1")]
protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual bool TryComputeLength(Int64& length);
    [NullableContextAttribute("1")]
protected virtual Task`1<Stream> CreateContentReadStreamAsync();
}
[IsReadOnlyAttribute]
[ExcludeFromCodeCoverageAttribute]
internal class System.Range : ValueType {
    [CompilerGeneratedAttribute]
private Index <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Index <End>k__BackingField;
    public Index Start { get; }
    public Index End { get; }
    public static Range All { get; }
    public Range(Index start, Index end);
    [CompilerGeneratedAttribute]
public Index get_Start();
    [CompilerGeneratedAttribute]
public Index get_End();
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public sealed virtual bool Equals(Range other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static Range StartAt(Index start);
    public static Range EndAt(Index end);
    public static Range get_All();
    public ValueTuple`2<int, int> GetOffsetAndLength(int length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1036")]
internal class System.Runtime.CompilerServices.CollectionBuilderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <BuilderType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public Type BuilderType { get; }
    public string MethodName { get; }
    public CollectionBuilderAttribute(Type builderType, string methodName);
    [CompilerGeneratedAttribute]
public Type get_BuilderType();
    [CompilerGeneratedAttribute]
public string get_MethodName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public static string RefStructs;
    public static string RequiredMembers;
    public string FeatureName { get; }
    public bool IsOptional { get; public set; }
    public CompilerFeatureRequiredAttribute(string featureName);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public void set_IsOptional(bool value);
}
[AttributeUsageAttribute("1")]
internal class System.Runtime.CompilerServices.DisableRuntimeMarshallingAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Arguments>k__BackingField;
    public String[] Arguments { get; }
    public InterpolatedStringHandlerArgumentAttribute(string argument);
    public InterpolatedStringHandlerArgumentAttribute(String[] arguments);
    [CompilerGeneratedAttribute]
public String[] get_Arguments();
}
[AttributeUsageAttribute("12")]
internal class System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.CompilerServices.ModuleInitializerAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("396")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
[AttributeUsageAttribute("1774")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.SkipLocalsInitAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.SuppressGCTransitionAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute : Attribute {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] CallConvs;
    [NullableAttribute("2")]
public string EntryPoint;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2047")]
internal class System.Runtime.Versioning.ObsoletedOSPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    [NullableContextAttribute("1")]
public ObsoletedOSPlatformAttribute(string platformName);
    [NullableContextAttribute("1")]
public ObsoletedOSPlatformAttribute(string platformName, string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6143")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.Versioning.RequiresPreviewFeaturesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    public RequiresPreviewFeaturesAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[AttributeUsageAttribute("2047")]
internal class System.Runtime.Versioning.SupportedOSPlatformAttribute : Attribute {
    [NullableContextAttribute("1")]
public SupportedOSPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("448")]
internal class System.Runtime.Versioning.SupportedOSPlatformGuardAttribute : Attribute {
    [NullableContextAttribute("1")]
public SupportedOSPlatformGuardAttribute(string platformName);
}
[AttributeUsageAttribute("1")]
internal class System.Runtime.Versioning.TargetPlatformAttribute : Attribute {
    [NullableContextAttribute("1")]
public TargetPlatformAttribute(string platformName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2047")]
internal class System.Runtime.Versioning.UnsupportedOSPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; }
    [NullableContextAttribute("1")]
public UnsupportedOSPlatformAttribute(string platformName);
    [NullableContextAttribute("1")]
public UnsupportedOSPlatformAttribute(string platformName, string message);
    [CompilerGeneratedAttribute]
public string get_Message();
}
[AttributeUsageAttribute("448")]
internal class System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute : Attribute {
    [NullableContextAttribute("1")]
public UnsupportedOSPlatformGuardAttribute(string platformName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Threading.Tasks.TaskToAsyncResult : object {
    public static IAsyncResult Begin(Task task, AsyncCallback callback, object state);
    public static void End(IAsyncResult asyncResult);
    public static TResult End(IAsyncResult asyncResult);
    public static Task Unwrap(IAsyncResult asyncResult);
    public static Task`1<TResult> Unwrap(IAsyncResult asyncResult);
}
