public class IniParser.Exceptions.ParsingException : Exception {
    [CompilerGeneratedAttribute]
private Version <LibVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LineValue>k__BackingField;
    public Version LibVersion { get; private set; }
    public int LineNumber { get; private set; }
    public string LineValue { get; private set; }
    public ParsingException(string msg);
    public ParsingException(string msg, Exception innerException);
    public ParsingException(string msg, int lineNumber, string lineValue);
    public ParsingException(string msg, int lineNumber, string lineValue, Exception innerException);
    [CompilerGeneratedAttribute]
public Version get_LibVersion();
    [CompilerGeneratedAttribute]
private void set_LibVersion(Version value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
private void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public string get_LineValue();
    [CompilerGeneratedAttribute]
private void set_LineValue(string value);
}
public class IniParser.FileIniDataParser : StreamIniDataParser {
    public FileIniDataParser(IniDataParser parser);
    [ObsoleteAttribute("Please use ReadFile method instead of this one as is more semantically accurate")]
public IniData LoadFile(string filePath);
    [ObsoleteAttribute("Please use ReadFile method instead of this one as is more semantically accurate")]
public IniData LoadFile(string filePath, Encoding fileEncoding);
    public IniData ReadFile(string filePath);
    public IniData ReadFile(string filePath, Encoding fileEncoding);
    [ObsoleteAttribute("Please use WriteFile method instead of this one as is more semantically accurate")]
public void SaveFile(string filePath, IniData parsedData);
    public void WriteFile(string filePath, IniData parsedData, Encoding fileEncoding);
}
internal static class IniParser.Helpers.Assert : object {
    internal static bool StringHasNoBlankSpaces(string s);
}
public class IniParser.Model.Configuration.ConcatenateDuplicatedKeysIniParserConfiguration : IniParserConfiguration {
    [CompilerGeneratedAttribute]
private string <ConcatenateSeparator>k__BackingField;
    public bool AllowDuplicateKeys { get; }
    public string ConcatenateSeparator { get; public set; }
    public ConcatenateDuplicatedKeysIniParserConfiguration(ConcatenateDuplicatedKeysIniParserConfiguration ori);
    public bool get_AllowDuplicateKeys();
    [CompilerGeneratedAttribute]
public string get_ConcatenateSeparator();
    [CompilerGeneratedAttribute]
public void set_ConcatenateSeparator(string value);
}
[ObsoleteAttribute("Kept for backward compatibility, just use IniParserConfiguration class")]
public class IniParser.Model.Configuration.DefaultIniParserConfiguration : ConcatenateDuplicatedKeysIniParserConfiguration {
}
public class IniParser.Model.Configuration.IniParserConfiguration : object {
    [CompilerGeneratedAttribute]
private Regex <CommentRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SectionRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaseInsensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewLineStr>k__BackingField;
    [CompilerGeneratedAttribute]
private char <KeyValueAssigmentChar>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssigmentSpacer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowKeysWithoutSection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowDuplicateKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OverrideDuplicateKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConcatenateDuplicateKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowExceptionsOnError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowDuplicateSections>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowCreateSectionsOnFly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipInvalidLines>k__BackingField;
    private char _sectionStartChar;
    private char _sectionEndChar;
    private string _commentString;
    protected static string _strCommentRegex;
    protected static string _strSectionRegexStart;
    protected static string _strSectionRegexMiddle;
    protected static string _strSectionRegexEnd;
    protected static string _strKeyRegex;
    protected static string _strValueRegex;
    protected static string _strSpecialRegexChars;
    public Regex CommentRegex { get; public set; }
    public Regex SectionRegex { get; public set; }
    public char SectionStartChar { get; public set; }
    public char SectionEndChar { get; public set; }
    public bool CaseInsensitive { get; public set; }
    [ObsoleteAttribute("Please use the CommentString property")]
public char CommentChar { get; public set; }
    public string CommentString { get; public set; }
    public string NewLineStr { get; public set; }
    public char KeyValueAssigmentChar { get; public set; }
    public string AssigmentSpacer { get; public set; }
    public bool AllowKeysWithoutSection { get; public set; }
    public bool AllowDuplicateKeys { get; public set; }
    public bool OverrideDuplicateKeys { get; public set; }
    public bool ConcatenateDuplicateKeys { get; public set; }
    public bool ThrowExceptionsOnError { get; public set; }
    public bool AllowDuplicateSections { get; public set; }
    public bool AllowCreateSectionsOnFly { get; public set; }
    public bool SkipInvalidLines { get; public set; }
    public IniParserConfiguration(IniParserConfiguration ori);
    [CompilerGeneratedAttribute]
public Regex get_CommentRegex();
    [CompilerGeneratedAttribute]
public void set_CommentRegex(Regex value);
    [CompilerGeneratedAttribute]
public Regex get_SectionRegex();
    [CompilerGeneratedAttribute]
public void set_SectionRegex(Regex value);
    public char get_SectionStartChar();
    public void set_SectionStartChar(char value);
    public char get_SectionEndChar();
    public void set_SectionEndChar(char value);
    [CompilerGeneratedAttribute]
public bool get_CaseInsensitive();
    [CompilerGeneratedAttribute]
public void set_CaseInsensitive(bool value);
    public char get_CommentChar();
    public void set_CommentChar(char value);
    public string get_CommentString();
    public void set_CommentString(string value);
    [CompilerGeneratedAttribute]
public string get_NewLineStr();
    [CompilerGeneratedAttribute]
public void set_NewLineStr(string value);
    [CompilerGeneratedAttribute]
public char get_KeyValueAssigmentChar();
    [CompilerGeneratedAttribute]
public void set_KeyValueAssigmentChar(char value);
    [CompilerGeneratedAttribute]
public string get_AssigmentSpacer();
    [CompilerGeneratedAttribute]
public void set_AssigmentSpacer(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowKeysWithoutSection();
    [CompilerGeneratedAttribute]
public void set_AllowKeysWithoutSection(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowDuplicateKeys();
    [CompilerGeneratedAttribute]
public void set_AllowDuplicateKeys(bool value);
    [CompilerGeneratedAttribute]
public bool get_OverrideDuplicateKeys();
    [CompilerGeneratedAttribute]
public void set_OverrideDuplicateKeys(bool value);
    [CompilerGeneratedAttribute]
public bool get_ConcatenateDuplicateKeys();
    [CompilerGeneratedAttribute]
public void set_ConcatenateDuplicateKeys(bool value);
    [CompilerGeneratedAttribute]
public bool get_ThrowExceptionsOnError();
    [CompilerGeneratedAttribute]
public void set_ThrowExceptionsOnError(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowDuplicateSections();
    [CompilerGeneratedAttribute]
public void set_AllowDuplicateSections(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowCreateSectionsOnFly();
    [CompilerGeneratedAttribute]
public void set_AllowCreateSectionsOnFly(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipInvalidLines();
    [CompilerGeneratedAttribute]
public void set_SkipInvalidLines(bool value);
    private void RecreateSectionRegex(char value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public IniParserConfiguration Clone();
    private sealed virtual override object System.ICloneable.Clone();
}
public class IniParser.Model.Formatting.DefaultIniDataFormatter : object {
    private IniParserConfiguration _configuration;
    public IniParserConfiguration Configuration { get; public set; }
    public DefaultIniDataFormatter(IniParserConfiguration configuration);
    public virtual string IniDataToString(IniData iniData);
    public sealed virtual IniParserConfiguration get_Configuration();
    public sealed virtual void set_Configuration(IniParserConfiguration value);
    private void WriteSection(SectionData section, StringBuilder sb);
    private void WriteKeyValueData(KeyDataCollection keyDataCollection, StringBuilder sb);
    private void WriteComments(List`1<string> comments, StringBuilder sb);
}
public interface IniParser.Model.Formatting.IIniDataFormatter {
    public IniParserConfiguration Configuration { get; public set; }
    public abstract virtual string IniDataToString(IniData iniData);
    public abstract virtual IniParserConfiguration get_Configuration();
    public abstract virtual void set_Configuration(IniParserConfiguration value);
}
[DefaultMemberAttribute("Item")]
public class IniParser.Model.IniData : object {
    private SectionDataCollection _sections;
    [CompilerGeneratedAttribute]
private KeyDataCollection <Global>k__BackingField;
    [CompilerGeneratedAttribute]
private char <SectionKeySeparator>k__BackingField;
    private IniParserConfiguration _configuration;
    public IniParserConfiguration Configuration { get; public set; }
    public KeyDataCollection Global { get; protected set; }
    public KeyDataCollection Item { get; }
    public SectionDataCollection Sections { get; public set; }
    public char SectionKeySeparator { get; public set; }
    public IniData(SectionDataCollection sdc);
    public IniData(IniData ori);
    public IniParserConfiguration get_Configuration();
    public void set_Configuration(IniParserConfiguration value);
    [CompilerGeneratedAttribute]
public KeyDataCollection get_Global();
    [CompilerGeneratedAttribute]
protected void set_Global(KeyDataCollection value);
    public KeyDataCollection get_Item(string sectionName);
    public SectionDataCollection get_Sections();
    public void set_Sections(SectionDataCollection value);
    [CompilerGeneratedAttribute]
public char get_SectionKeySeparator();
    [CompilerGeneratedAttribute]
public void set_SectionKeySeparator(char value);
    public virtual string ToString();
    public virtual string ToString(IIniDataFormatter formatter);
    public sealed virtual object Clone();
    public void ClearAllComments();
    public void Merge(IniData toMergeIniData);
    public bool TryGetKey(string key, String& value);
    public string GetKey(string key);
    private void MergeSection(SectionData otherSection);
    private void MergeGlobal(KeyDataCollection globals);
}
public class IniParser.Model.IniDataCaseInsensitive : IniData {
    public IniDataCaseInsensitive(SectionDataCollection sdc);
    public IniDataCaseInsensitive(IniData ori);
}
public class IniParser.Model.KeyData : object {
    private List`1<string> _comments;
    private string _value;
    private string _keyName;
    public List`1<string> Comments { get; public set; }
    public string Value { get; public set; }
    public string KeyName { get; public set; }
    public KeyData(string keyName);
    public KeyData(KeyData ori);
    public List`1<string> get_Comments();
    public void set_Comments(List`1<string> value);
    public string get_Value();
    public void set_Value(string value);
    public string get_KeyName();
    public void set_KeyName(string value);
    public sealed virtual object Clone();
}
[DefaultMemberAttribute("Item")]
public class IniParser.Model.KeyDataCollection : object {
    private IEqualityComparer`1<string> _searchComparer;
    private Dictionary`2<string, KeyData> _keyData;
    public string Item { get; public set; }
    public int Count { get; }
    public KeyDataCollection(IEqualityComparer`1<string> searchComparer);
    public KeyDataCollection(KeyDataCollection ori, IEqualityComparer`1<string> searchComparer);
    public string get_Item(string keyName);
    public void set_Item(string keyName, string value);
    public int get_Count();
    public bool AddKey(string keyName);
    [ObsoleteAttribute("Pottentially buggy method! Use AddKey(KeyData keyData) instead (See comments in code for an explanation of the bug)")]
public bool AddKey(string keyName, KeyData keyData);
    public bool AddKey(KeyData keyData);
    public bool AddKey(string keyName, string keyValue);
    public void ClearComments();
    public bool ContainsKey(string keyName);
    public KeyData GetKeyData(string keyName);
    public void Merge(KeyDataCollection keyDataToMerge);
    public void RemoveAllKeys();
    public bool RemoveKey(string keyName);
    public void SetKeyData(KeyData data);
    public sealed virtual IEnumerator`1<KeyData> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual object Clone();
    internal KeyData GetLast();
}
public class IniParser.Model.SectionData : object {
    private IEqualityComparer`1<string> _searchComparer;
    private List`1<string> _leadingComments;
    private List`1<string> _trailingComments;
    private KeyDataCollection _keyDataCollection;
    private string _sectionName;
    public string SectionName { get; public set; }
    [ObsoleteAttribute("Do not use this property, use property Comments instead")]
public List`1<string> LeadingComments { get; internal set; }
    public List`1<string> Comments { get; }
    [ObsoleteAttribute("Do not use this property, use property Comments instead")]
public List`1<string> TrailingComments { get; internal set; }
    public KeyDataCollection Keys { get; public set; }
    public SectionData(string sectionName);
    public SectionData(string sectionName, IEqualityComparer`1<string> searchComparer);
    public SectionData(SectionData ori, IEqualityComparer`1<string> searchComparer);
    public void ClearComments();
    public void ClearKeyData();
    public void Merge(SectionData toMergeSection);
    public string get_SectionName();
    public void set_SectionName(string value);
    public List`1<string> get_LeadingComments();
    internal void set_LeadingComments(List`1<string> value);
    public List`1<string> get_Comments();
    public List`1<string> get_TrailingComments();
    internal void set_TrailingComments(List`1<string> value);
    public KeyDataCollection get_Keys();
    public void set_Keys(KeyDataCollection value);
    public sealed virtual object Clone();
}
[DefaultMemberAttribute("Item")]
public class IniParser.Model.SectionDataCollection : object {
    private IEqualityComparer`1<string> _searchComparer;
    private Dictionary`2<string, SectionData> _sectionData;
    public int Count { get; }
    public KeyDataCollection Item { get; }
    public SectionDataCollection(IEqualityComparer`1<string> searchComparer);
    public SectionDataCollection(SectionDataCollection ori, IEqualityComparer`1<string> searchComparer);
    public int get_Count();
    public KeyDataCollection get_Item(string sectionName);
    public bool AddSection(string keyName);
    public void Add(SectionData data);
    public void Clear();
    public bool ContainsSection(string keyName);
    public SectionData GetSectionData(string sectionName);
    public void Merge(SectionDataCollection sectionsToMerge);
    public void SetSectionData(string sectionName, SectionData data);
    public bool RemoveSection(string keyName);
    public sealed virtual IEnumerator`1<SectionData> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual object Clone();
}
public class IniParser.Parser.ConcatenateDuplicatedKeysIniDataParser : IniDataParser {
    public ConcatenateDuplicatedKeysIniParserConfiguration Configuration { get; public set; }
    public ConcatenateDuplicatedKeysIniDataParser(ConcatenateDuplicatedKeysIniParserConfiguration parserConfiguration);
    public ConcatenateDuplicatedKeysIniParserConfiguration get_Configuration();
    public void set_Configuration(ConcatenateDuplicatedKeysIniParserConfiguration value);
    protected virtual void HandleDuplicatedKeyInCollection(string key, string value, KeyDataCollection keyDataCollection, string sectionName);
}
public class IniParser.Parser.IniDataParser : object {
    private List`1<Exception> _errorExceptions;
    [CompilerGeneratedAttribute]
private IniParserConfiguration <Configuration>k__BackingField;
    private List`1<string> _currentCommentListTemp;
    private string _currentSectionNameTemp;
    public IniParserConfiguration Configuration { get; protected set; }
    public bool HasError { get; }
    public ReadOnlyCollection`1<Exception> Errors { get; }
    public IniDataParser(IniParserConfiguration parserConfiguration);
    [CompilerGeneratedAttribute]
public virtual IniParserConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
protected virtual void set_Configuration(IniParserConfiguration value);
    public bool get_HasError();
    public ReadOnlyCollection`1<Exception> get_Errors();
    public IniData Parse(string iniDataString);
    protected virtual bool LineContainsAComment(string line);
    protected virtual bool LineMatchesASection(string line);
    protected virtual bool LineMatchesAKeyValuePair(string line);
    protected virtual string ExtractComment(string line);
    protected virtual void ProcessLine(string currentLine, IniData currentIniData);
    protected virtual void ProcessSection(string line, IniData currentIniData);
    protected virtual void ProcessKeyValuePair(string line, IniData currentIniData);
    protected virtual string ExtractKey(string s);
    protected virtual string ExtractValue(string s);
    protected virtual void HandleDuplicatedKeyInCollection(string key, string value, KeyDataCollection keyDataCollection, string sectionName);
    private void AddKeyToKeyValueCollection(string key, string value, KeyDataCollection keyDataCollection, string sectionName);
}
public class IniParser.StreamIniDataParser : object {
    [CompilerGeneratedAttribute]
private IniDataParser <Parser>k__BackingField;
    public IniDataParser Parser { get; protected set; }
    public StreamIniDataParser(IniDataParser parser);
    [CompilerGeneratedAttribute]
public IniDataParser get_Parser();
    [CompilerGeneratedAttribute]
protected void set_Parser(IniDataParser value);
    public IniData ReadData(StreamReader reader);
    public void WriteData(StreamWriter writer, IniData iniData);
    public void WriteData(StreamWriter writer, IniData iniData, IIniDataFormatter formatter);
}
[ObsoleteAttribute("Use class IniDataParser instead. See remarks comments in this class.")]
public class IniParser.StringIniParser : object {
    [CompilerGeneratedAttribute]
private IniDataParser <Parser>k__BackingField;
    public IniDataParser Parser { get; protected set; }
    public StringIniParser(IniDataParser parser);
    [CompilerGeneratedAttribute]
public IniDataParser get_Parser();
    [CompilerGeneratedAttribute]
protected void set_Parser(IniDataParser value);
    public IniData ParseString(string dataStr);
    public string WriteString(IniData iniData);
}
