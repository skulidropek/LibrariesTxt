[ExtensionAttribute]
public static class Java.Interop.Tools.Cecil.AssemblyResolverCoda : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static AssemblyDefinition GetAssembly(IAssemblyResolver resolver, string fileName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Java.Interop.Tools.Cecil.CustomAttributeProviderRocks : object {
    [ExtensionAttribute]
public static bool AnyCustomAttributes(ICustomAttributeProvider item, Type attribute);
    [ExtensionAttribute]
public static IEnumerable`1<CustomAttribute> GetCustomAttributes(ICustomAttributeProvider item, Type attribute);
    [ExtensionAttribute]
public static bool AnyCustomAttributes(ICustomAttributeProvider item, string attribute_fullname);
    [IteratorStateMachineAttribute("Java.Interop.Tools.Cecil.CustomAttributeProviderRocks/<GetCustomAttributes>d__3")]
[ExtensionAttribute]
public static IEnumerable`1<CustomAttribute> GetCustomAttributes(ICustomAttributeProvider item, string attribute_fullname);
    [ExtensionAttribute]
public static IEnumerable`1<CustomAttribute> GetCustomAttributes(IEnumerable`1<ICustomAttributeProvider> items, Type attribute);
    [ExtensionAttribute]
public static IEnumerable`1<CustomAttribute> GetCustomAttributes(IEnumerable`1<ICustomAttributeProvider> items, string attribute_fullname);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Java.Interop.Tools.Cecil.DirectoryAssemblyResolver : object {
    [CompilerGeneratedAttribute]
private ICollection`1<string> <SearchDirectories>k__BackingField;
    private List`1<MemoryMappedViewStream> viewStreams;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, AssemblyDefinition> cache;
    private bool loadDebugSymbols;
    private Action`2<TraceLevel, string> logger;
    private ReaderParameters loadReaderParameters;
    private static ReaderParameters DefaultLoadReaderParameters;
    public ICollection`1<string> SearchDirectories { get; private set; }
    [ObsoleteAttribute("Use DirectoryAssemblyResolver(Action<TraceLevel, string>, bool, ReaderParameters)")]
public DirectoryAssemblyResolver(Action`2<string, Object[]> logWarnings, bool loadDebugSymbols, ReaderParameters loadReaderParameters);
    public DirectoryAssemblyResolver(Action`2<TraceLevel, string> logger, bool loadDebugSymbols, ReaderParameters loadReaderParameters);
    private static DirectoryAssemblyResolver();
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_SearchDirectories();
    [CompilerGeneratedAttribute]
private void set_SearchDirectories(ICollection`1<string> value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public Dictionary`2<string, AssemblyDefinition> ToResolverCache();
    public bool AddToCache(AssemblyDefinition assembly);
    public virtual AssemblyDefinition Load(string fileName, bool forceLoad);
    protected virtual AssemblyDefinition ReadAssembly(string file);
    private AssemblyDefinition LoadFromMemoryMappedFile(string file, ReaderParameters options);
    public AssemblyDefinition GetAssembly(string fileName);
    public AssemblyDefinition Resolve(string fullName);
    public AssemblyDefinition Resolve(string fullName, ReaderParameters parameters);
    public sealed virtual AssemblyDefinition Resolve(AssemblyNameReference reference);
    public string FindAssemblyFile(string fullName);
    public string FindAssemblyFile(AssemblyNameReference reference);
    public sealed virtual AssemblyDefinition Resolve(AssemblyNameReference reference, ReaderParameters parameters);
    private static FileNotFoundException CreateLoadException(AssemblyNameReference reference);
    private string SearchDirectory(string name, string directory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Java.Interop.Tools.Cecil.MethodDefinitionRocks : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static MethodDefinition GetBaseDefinition(MethodDefinition method);
    [ExtensionAttribute]
public static MethodDefinition GetBaseDefinition(MethodDefinition method, TypeDefinitionCache cache);
    [ExtensionAttribute]
public static MethodDefinition GetBaseDefinition(MethodDefinition method, IMetadataResolver resolver);
    [ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static IEnumerable`1<MethodDefinition> GetOverriddenMethods(MethodDefinition method, bool inherit);
    public static IEnumerable`1<MethodDefinition> GetOverriddenMethods(MethodDefinition method, bool inherit, TypeDefinitionCache cache);
    [IteratorStateMachineAttribute("Java.Interop.Tools.Cecil.MethodDefinitionRocks/<GetOverriddenMethods>d__5")]
public static IEnumerable`1<MethodDefinition> GetOverriddenMethods(MethodDefinition method, bool inherit, IMetadataResolver resolver);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static bool AreParametersCompatibleWith(Collection`1<ParameterDefinition> a, Collection`1<ParameterDefinition> b);
    [ExtensionAttribute]
public static bool AreParametersCompatibleWith(Collection`1<ParameterDefinition> a, Collection`1<ParameterDefinition> b, TypeDefinitionCache cache);
    [ExtensionAttribute]
public static bool AreParametersCompatibleWith(Collection`1<ParameterDefinition> a, Collection`1<ParameterDefinition> b, IMetadataResolver resolver);
    private static bool IsParameterCompatibleWith(IModifierType a, IModifierType b, IMetadataResolver cache);
    private static bool IsParameterCompatibleWith(TypeSpecification a, TypeSpecification b, IMetadataResolver cache);
    private static bool IsParameterCompatibleWith(GenericInstanceType a, GenericInstanceType b, IMetadataResolver cache);
    private static bool IsParameterCompatibleWith(TypeReference a, TypeReference b, IMetadataResolver cache);
}
public enum Java.Interop.Tools.Cecil.Nullability : Enum {
    public int value__;
    public static Nullability Oblivous;
    public static Nullability NotNull;
    public static Nullability Nullable;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Java.Interop.Tools.Cecil.NullableMetadata : object {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public Byte[] Data { get; private set; }
    private NullableMetadata(Byte[] data);
    private NullableMetadata(byte data);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Byte[] value);
    public static NullableMetadata FromAttributeCollection(Collection`1<CustomAttribute> attrs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Java.Interop.Tools.Cecil.NullableReferenceTypesRocks : object {
    [ExtensionAttribute]
public static Nullability GetTypeNullability(FieldDefinition field);
    [ExtensionAttribute]
public static Nullability GetReturnTypeNullability(MethodDefinition method);
    [ExtensionAttribute]
public static Nullability GetTypeNullability(ParameterDefinition parameter, MethodDefinition method);
    private static Nullability GetNullableContext(Collection`1<CustomAttribute> attrs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Java.Interop.Tools.Cecil.TypeDefinitionCache : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<TypeReference, TypeDefinition> types;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<FieldReference, FieldDefinition> fields;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<MethodReference, MethodDefinition> methods;
    public virtual TypeDefinition Resolve(TypeReference typeReference);
    public virtual FieldDefinition Resolve(FieldReference field);
    public virtual MethodDefinition Resolve(MethodReference method);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Java.Interop.Tools.Cecil.TypeDefinitionRocks : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static TypeDefinition GetBaseType(TypeDefinition type);
    [ExtensionAttribute]
public static TypeDefinition GetBaseType(TypeDefinition type, TypeDefinitionCache cache);
    [ExtensionAttribute]
public static TypeDefinition GetBaseType(TypeDefinition type, IMetadataResolver resolver);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static IEnumerable`1<TypeDefinition> GetTypeAndBaseTypes(TypeDefinition type);
    [ExtensionAttribute]
public static IEnumerable`1<TypeDefinition> GetTypeAndBaseTypes(TypeDefinition type, TypeDefinitionCache cache);
    [IteratorStateMachineAttribute("Java.Interop.Tools.Cecil.TypeDefinitionRocks/<GetTypeAndBaseTypes>d__5")]
[ExtensionAttribute]
public static IEnumerable`1<TypeDefinition> GetTypeAndBaseTypes(TypeDefinition type, IMetadataResolver resolver);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static IEnumerable`1<TypeDefinition> GetBaseTypes(TypeDefinition type);
    [ExtensionAttribute]
public static IEnumerable`1<TypeDefinition> GetBaseTypes(TypeDefinition type, TypeDefinitionCache cache);
    [IteratorStateMachineAttribute("Java.Interop.Tools.Cecil.TypeDefinitionRocks/<GetBaseTypes>d__8")]
[ExtensionAttribute]
public static IEnumerable`1<TypeDefinition> GetBaseTypes(TypeDefinition type, IMetadataResolver resolver);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static bool IsAssignableFrom(TypeReference type, TypeReference c);
    [ExtensionAttribute]
public static bool IsAssignableFrom(TypeReference type, TypeReference c, TypeDefinitionCache cache);
    [ExtensionAttribute]
public static bool IsAssignableFrom(TypeReference type, TypeReference c, IMetadataResolver resolver);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static bool IsSubclassOf(TypeDefinition type, string typeName);
    [ExtensionAttribute]
public static bool IsSubclassOf(TypeDefinition type, string typeName, TypeDefinitionCache cache);
    [ExtensionAttribute]
public static bool IsSubclassOf(TypeDefinition type, string typeName, IMetadataResolver resolver);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static bool ImplementsInterface(TypeDefinition type, string interfaceName);
    [ExtensionAttribute]
public static bool ImplementsInterface(TypeDefinition type, string interfaceName, TypeDefinitionCache cache);
    [ExtensionAttribute]
public static bool ImplementsInterface(TypeDefinition type, string interfaceName, IMetadataResolver resolver);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static string GetPartialAssemblyName(TypeReference type);
    [ExtensionAttribute]
public static string GetPartialAssemblyName(TypeReference type, TypeDefinitionCache cache);
    [ExtensionAttribute]
public static string GetPartialAssemblyName(TypeReference type, IMetadataResolver resolver);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static string GetPartialAssemblyQualifiedName(TypeReference type);
    [ExtensionAttribute]
public static string GetPartialAssemblyQualifiedName(TypeReference type, TypeDefinitionCache cache);
    [ExtensionAttribute]
public static string GetPartialAssemblyQualifiedName(TypeReference type, IMetadataResolver resolver);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static string GetAssemblyQualifiedName(TypeReference type);
    [ExtensionAttribute]
public static string GetAssemblyQualifiedName(TypeReference type, TypeDefinitionCache cache);
    [ExtensionAttribute]
public static string GetAssemblyQualifiedName(TypeReference type, IMetadataResolver resolver);
    [ExtensionAttribute]
public static TypeDefinition GetNestedType(TypeDefinition type, string name);
    [ExtensionAttribute]
public static TypeDefinition FindType(ModuleDefinition module, string name);
    [NullableContextAttribute("2")]
public static string CecilTypeNameToReflectionTypeName(string typeName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
