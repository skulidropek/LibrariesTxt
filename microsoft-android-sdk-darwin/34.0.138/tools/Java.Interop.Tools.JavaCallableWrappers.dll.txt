[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1508")]
internal class Android.Runtime.RegisterAttribute : Attribute {
    private string connector;
    [NullableAttribute("1")]
private string name;
    private string signature;
    [CompilerGeneratedAttribute]
private CustomAttribute <OriginAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoNotGenerateAcw>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ApiSince>k__BackingField;
    public CustomAttribute OriginAttribute { get; }
    public string Connector { get; public set; }
    [NullableAttribute("1")]
public string Name { get; public set; }
    public string Signature { get; public set; }
    public bool DoNotGenerateAcw { get; public set; }
    public int ApiSince { get; public set; }
    [NullableContextAttribute("1")]
public RegisterAttribute(string name);
    [NullableContextAttribute("1")]
public RegisterAttribute(string name, string signature, string connector);
    [NullableContextAttribute("1")]
public RegisterAttribute(string name, CustomAttribute originAttribute);
    [NullableContextAttribute("1")]
public RegisterAttribute(string name, string signature, string connector, CustomAttribute originAttribute);
    [CompilerGeneratedAttribute]
public CustomAttribute get_OriginAttribute();
    public string get_Connector();
    public void set_Connector(string value);
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public void set_Name(string value);
    public string get_Signature();
    public void set_Signature(string value);
    [CompilerGeneratedAttribute]
public bool get_DoNotGenerateAcw();
    [CompilerGeneratedAttribute]
public void set_DoNotGenerateAcw(bool value);
    [CompilerGeneratedAttribute]
public int get_ApiSince();
    [CompilerGeneratedAttribute]
public void set_ApiSince(int value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("96")]
internal class Java.Interop.ExportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SuperArgumentsString>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Type[] <Throws>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <ThrownNames>k__BackingField;
    public string Name { get; private set; }
    public string SuperArgumentsString { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] Throws { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal String[] ThrownNames { get; internal set; }
    public ExportAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_SuperArgumentsString();
    [CompilerGeneratedAttribute]
public void set_SuperArgumentsString(string value);
    [CompilerGeneratedAttribute]
public Type[] get_Throws();
    [CompilerGeneratedAttribute]
public void set_Throws(Type[] value);
    [CompilerGeneratedAttribute]
internal String[] get_ThrownNames();
    [CompilerGeneratedAttribute]
internal void set_ThrownNames(String[] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
internal class Java.Interop.ExportFieldAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public ExportFieldAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[AttributeUsageAttribute("10240")]
internal class Java.Interop.ExportParameterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ExportParameterKind <Kind>k__BackingField;
    public ExportParameterKind Kind { get; private set; }
    public ExportParameterAttribute(ExportParameterKind kind);
    [CompilerGeneratedAttribute]
public ExportParameterKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(ExportParameterKind value);
}
internal enum Java.Interop.ExportParameterKind : Enum {
    public int value__;
    public static ExportParameterKind Unspecified;
    public static ExportParameterKind InputStream;
    public static ExportParameterKind OutputStream;
    public static ExportParameterKind XmlPullParser;
    public static ExportParameterKind XmlResourceParser;
}
[NullableContextAttribute("1")]
internal interface Java.Interop.IJniNameProviderAttribute {
    public string Name { get; }
    public abstract virtual string get_Name();
}
internal class Java.Interop.Tools.JavaCallableWrappers.ArrayComparer`1 : object {
    [NullableContextAttribute("1")]
public sealed virtual int Compare(T[] x, T[] y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Java.Interop.Tools.JavaCallableWrappers.Crc64 : HashAlgorithm {
    private ulong crc;
    private ulong length;
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Java.Interop.Tools.JavaCallableWrappers.Crc64Helper : object {
    private static UInt64[0...,0...] table;
    private static Crc64Helper();
    internal static Byte[] Compute(Byte[] array);
    internal static void HashCore(Byte[] array, int ibStart, int cbSize, UInt64& crc, UInt64& length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Java.Interop.Tools.JavaCallableWrappers.IdentifierValidator : object {
    private static string FormattingCharacter;
    private static string ConnectingCharacter;
    private static string DecimalDigitCharacter;
    private static string CombiningCharacter;
    private static string LetterCharacter;
    private static string IdentifierPartCharacter;
    private static string IdentifierStartCharacter;
    private static string Identifier;
    private static Regex IsValidIdentifierRegex;
    private static Regex validIdentifier;
    private static IdentifierValidator();
    public static string CreateValidIdentifier(string identifier, bool useEncodedReplacements);
    public static bool IsValidIdentifier(string identifier);
    private static string EncodeReplacement(Match match);
}
public abstract class Java.Interop.Tools.JavaCallableWrappers.JavaCallableMethodClassifier : object {
    [NullableContextAttribute("1")]
public abstract virtual bool ShouldBeDynamicallyRegistered(TypeDefinition topType, MethodDefinition registeredMethod, MethodDefinition implementedMethod, CustomAttribute registerAttribute);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Java.Interop.Tools.JavaCallableWrappers.JavaCallableWrapperGenerator : object {
    private Action`2<string, Object[]> log;
    private string name;
    private string package;
    private TypeDefinition type;
    private List`1<JavaFieldInfo> exported_fields;
    private List`1<Signature> methods;
    private List`1<Signature> ctors;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<JavaCallableWrapperGenerator> children;
    private IMetadataResolver cache;
    [NullableAttribute("2")]
private JavaCallableMethodClassifier methodClassifier;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ApplicationJavaClass>k__BackingField;
    [CompilerGeneratedAttribute]
private JavaPeerStyle <CodeGenerationTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateOnCreateOverrides>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasExport>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <MonoRuntimeInitialization>k__BackingField;
    [NullableAttribute("2")]
public string ApplicationJavaClass { get; public set; }
    public JavaPeerStyle CodeGenerationTarget { get; public set; }
    public bool GenerateOnCreateOverrides { get; public set; }
    public bool HasExport { get; private set; }
    public bool HasDynamicallyRegisteredMethods { get; }
    [NullableAttribute("2")]
public string MonoRuntimeInitialization { get; public set; }
    public string Name { get; }
    [ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public JavaCallableWrapperGenerator(TypeDefinition type, Action`2<string, Object[]> log);
    public JavaCallableWrapperGenerator(TypeDefinition type, Action`2<string, Object[]> log, TypeDefinitionCache cache);
    public JavaCallableWrapperGenerator(TypeDefinition type, Action`2<string, Object[]> log, TypeDefinitionCache cache, JavaCallableMethodClassifier methodClassifier);
    public JavaCallableWrapperGenerator(TypeDefinition type, Action`2<string, Object[]> log, IMetadataResolver resolver);
    public JavaCallableWrapperGenerator(TypeDefinition type, Action`2<string, Object[]> log, IMetadataResolver resolver, JavaCallableMethodClassifier methodClassifier);
    private JavaCallableWrapperGenerator(TypeDefinition type, string outerType, Action`2<string, Object[]> log, IMetadataResolver resolver, JavaCallableMethodClassifier methodClassifier);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ApplicationJavaClass();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ApplicationJavaClass(string value);
    [CompilerGeneratedAttribute]
public JavaPeerStyle get_CodeGenerationTarget();
    [CompilerGeneratedAttribute]
public void set_CodeGenerationTarget(JavaPeerStyle value);
    [CompilerGeneratedAttribute]
public bool get_GenerateOnCreateOverrides();
    [CompilerGeneratedAttribute]
public void set_GenerateOnCreateOverrides(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasExport();
    [CompilerGeneratedAttribute]
private void set_HasExport(bool value);
    public bool get_HasDynamicallyRegisteredMethods();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_MonoRuntimeInitialization();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_MonoRuntimeInitialization(string value);
    public string get_Name();
    private void AddNestedTypes(TypeDefinition type);
    private static void ExtractJavaNames(string jniName, String& package, String& type);
    private static SequencePoint LookupSource(MethodDefinition method);
    private static SequencePoint LookupSource(TypeDefinition type);
    private void AddConstructors(TypeDefinition type, string outerType, List`1<MethodDefinition> baseCtors, List`1<MethodDefinition> curCtors, bool onlyRegisteredOrExportedCtors);
    private void AddConstructor(MethodDefinition ctor, TypeDefinition type, string outerType, List`1<MethodDefinition> baseCtors, List`1<MethodDefinition> curCtors, bool onlyRegisteredOrExportedCtors, bool skipParameterCheck);
    private MethodDefinition GetBaseRegisteredMethod(MethodDefinition method);
    internal static RegisterAttribute ToRegisterAttribute(CustomAttribute attr);
    internal static RegisterAttribute RegisterFromJniTypeSignatureAttribute(CustomAttribute attr);
    internal static RegisterAttribute RegisterFromJniMethodSignatureAttribute(CustomAttribute attr);
    private ExportAttribute ToExportAttribute(CustomAttribute attr, IMemberDefinition declaringMember);
    internal static ExportFieldAttribute ToExportFieldAttribute(CustomAttribute attr);
    [IteratorStateMachineAttribute("Java.Interop.Tools.JavaCallableWrappers.JavaCallableWrapperGenerator/<GetTypeRegistrationAttributes>d__53")]
internal static IEnumerable`1<RegisterAttribute> GetTypeRegistrationAttributes(ICustomAttributeProvider p);
    [IteratorStateMachineAttribute("Java.Interop.Tools.JavaCallableWrappers.JavaCallableWrapperGenerator/<GetMethodRegistrationAttributes>d__54")]
private static IEnumerable`1<RegisterAttribute> GetMethodRegistrationAttributes(ICustomAttributeProvider p);
    private IEnumerable`1<ExportAttribute> GetExportAttributes(IMemberDefinition p);
    private static IEnumerable`1<ExportFieldAttribute> GetExportFieldAttributes(ICustomAttributeProvider p);
    private static IEnumerable`1<TAttribute> GetAttributes(ICustomAttributeProvider p, Func`2<CustomAttribute, TAttribute> selector);
    private void AddMethod(MethodDefinition registeredMethod, MethodDefinition implementedMethod);
    private string GetManagedParameters(MethodDefinition ctor, string outerType);
    public void Generate(TextWriter writer);
    public void Generate(string outputPath);
    private static string GetAnnotationsString(string indent, IEnumerable`1<CustomAttribute> atts, IMetadataResolver resolver);
    private static void WriteAnnotations(string indent, TextWriter sw, IEnumerable`1<CustomAttribute> atts, IMetadataResolver resolver);
    private static string ManagedValueToJavaSource(object value);
    private void GenerateHeader(TextWriter sw);
    private void GenerateBody(TextWriter sw);
    private void GenerateRegisterType(TextWriter sw, JavaCallableWrapperGenerator self, string field);
    private void GenerateFooter(TextWriter sw);
    private static string GetJavaAccess(MethodAttributes access);
    private static string GetJavaTypeName(TypeReference r, IMetadataResolver cache);
    private bool CannotRegisterInStaticConstructor(TypeDefinition type);
    private void GenerateConstructor(Signature ctor, TextWriter sw);
    private void GenerateApplicationConstructor(TextWriter sw);
    private void GenerateExportedField(JavaFieldInfo field, TextWriter sw);
    private void GenerateMethod(Signature method, TextWriter sw);
    private void WriteApplicationOnCreate(TextWriter sw, Action`1<TextWriter> extra);
    private void WriteInstrumentationOnCreate(TextWriter sw, Action`1<TextWriter> extra);
    private StreamWriter OpenStream(string outputPath);
    public string GetDestinationPath(string outputPath);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <ToExportAttribute>b__51_1(CustomAttributeArgument caa);
    [CompilerGeneratedAttribute]
private void <GenerateBody>b__66_1(TextWriter w);
    [CompilerGeneratedAttribute]
private void <GenerateBody>b__66_3(TextWriter w);
}
public enum Java.Interop.Tools.JavaCallableWrappers.JavaPeerStyle : Enum {
    public int value__;
    public static JavaPeerStyle XAJavaInterop1;
    public static JavaPeerStyle JavaInterop1;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Java.Interop.Tools.JavaCallableWrappers.JavaTypeScanner : object {
    [CompilerGeneratedAttribute]
private Action`2<TraceLevel, string> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ErrorOnCustomJavaObject>k__BackingField;
    private IMetadataResolver cache;
    public Action`2<TraceLevel, string> Logger { get; private set; }
    public bool ErrorOnCustomJavaObject { get; public set; }
    [ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public JavaTypeScanner(Action`2<TraceLevel, string> logger);
    public JavaTypeScanner(Action`2<TraceLevel, string> logger, TypeDefinitionCache cache);
    public JavaTypeScanner(Action`2<TraceLevel, string> logger, IMetadataResolver resolver);
    [CompilerGeneratedAttribute]
public Action`2<TraceLevel, string> get_Logger();
    [CompilerGeneratedAttribute]
private void set_Logger(Action`2<TraceLevel, string> value);
    [CompilerGeneratedAttribute]
public bool get_ErrorOnCustomJavaObject();
    [CompilerGeneratedAttribute]
public void set_ErrorOnCustomJavaObject(bool value);
    public List`1<TypeDefinition> GetJavaTypes(IEnumerable`1<string> assemblies, IAssemblyResolver resolver);
    public List`1<TypeDefinition> GetJavaTypes(AssemblyDefinition assembly);
    private void AddJavaTypes(List`1<TypeDefinition> javaTypes, TypeDefinition type);
    [ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static bool ShouldSkipJavaCallableWrapperGeneration(TypeDefinition type);
    public static bool ShouldSkipJavaCallableWrapperGeneration(TypeDefinition type, TypeDefinitionCache cache);
    public static bool ShouldSkipJavaCallableWrapperGeneration(TypeDefinition type, IMetadataResolver resolver);
    [ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static List`1<TypeDefinition> GetJavaTypes(IEnumerable`1<string> assemblies, IAssemblyResolver resolver, Action`2<string, Object[]> log);
    public static List`1<TypeDefinition> GetJavaTypes(IEnumerable`1<string> assemblies, IAssemblyResolver resolver, Action`2<string, Object[]> log, TypeDefinitionCache cache);
    public static List`1<TypeDefinition> GetJavaTypes(IEnumerable`1<string> assemblies, IAssemblyResolver resolver, Action`2<string, Object[]> log, IMetadataResolver metadataResolver);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Java.Interop.Tools.JavaCallableWrappers.TypeNameMapGenerator : object {
    private Action`2<TraceLevel, string> Log;
    private List`1<TypeDefinition> Types;
    [NullableAttribute("2")]
private DirectoryAssemblyResolver Resolver;
    private IMetadataResolver Cache;
    [ObsoleteAttribute("Use TypeNameMapGenerator(IEnumerable<string>, Action<TraceLevel, string>, TypeDefinitionCache)")]
public TypeNameMapGenerator(IEnumerable`1<string> assemblies, Action`2<string, Object[]> logMessage);
    [ObsoleteAttribute("Use TypeNameMapGenerator(IEnumerable<string>, Action<TraceLevel, string>, TypeDefinitionCache)")]
public TypeNameMapGenerator(IEnumerable`1<string> assemblies, Action`2<TraceLevel, string> logger);
    public TypeNameMapGenerator(IEnumerable`1<string> assemblies, Action`2<TraceLevel, string> logger, TypeDefinitionCache cache);
    public TypeNameMapGenerator(IEnumerable`1<string> assemblies, Action`2<TraceLevel, string> logger, IMetadataResolver resolver);
    [ObsoleteAttribute("Use TypeNameMapGenerator(IEnumerable<TypeDefinition>, Action<TraceLevel, string>, TypeDefinitionCache)")]
public TypeNameMapGenerator(IEnumerable`1<TypeDefinition> types, Action`2<string, Object[]> logMessage);
    [ObsoleteAttribute("Use TypeNameMapGenerator(IEnumerable<TypeDefinition>, Action<TraceLevel, string>, TypeDefinitionCache)")]
public TypeNameMapGenerator(IEnumerable`1<TypeDefinition> types, Action`2<TraceLevel, string> logger);
    public TypeNameMapGenerator(IEnumerable`1<TypeDefinition> types, Action`2<TraceLevel, string> logger, TypeDefinitionCache cache);
    public TypeNameMapGenerator(IEnumerable`1<TypeDefinition> types, Action`2<TraceLevel, string> logger, IMetadataResolver resolver);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void WriteJavaToManaged(Stream output);
    private Dictionary`2<string, string> GetTypeMapping(Func`2<TypeDefinition, bool> skipType, Func`3<TypeDefinition, IMetadataResolver, string> key, Func`3<TypeDefinition, IMetadataResolver, string> value);
    private static void WriteBinaryMapping(Stream o, Dictionary`2<string, string> mapping);
    private static Dictionary`2<Byte[], Byte[]> ToBinary(Dictionary`2<string, string> map, Encoding encoding);
    private static void WriteHeader(Stream o, int entries, int keyLen, int valueLen, Encoding encoding);
    private static void WriteString(Stream o, string value, Encoding encoding);
    private static void Write(Stream o, Byte[] value, int length);
    public void WriteManagedToJava(Stream output);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Java.Interop.Tools.TypeNameMappings.JavaNativeTypeManager : object {
    private static string CRC_PREFIX;
    [CompilerGeneratedAttribute]
private static PackageNamingPolicy <PackageNamingPolicy>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private static string <ApplicationJavaClass>k__BackingField;
    private static HashSet`1<string> KnownIJniNameProviders;
    public static PackageNamingPolicy PackageNamingPolicy { get; public set; }
    [NullableAttribute("2")]
public static string ApplicationJavaClass { get; public set; }
    private static JavaNativeTypeManager();
    [CompilerGeneratedAttribute]
public static PackageNamingPolicy get_PackageNamingPolicy();
    [CompilerGeneratedAttribute]
public static void set_PackageNamingPolicy(PackageNamingPolicy value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static string get_ApplicationJavaClass();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static void set_ApplicationJavaClass(string value);
    [NullableContextAttribute("2")]
public static JniTypeName Parse(string jniType);
    [IteratorStateMachineAttribute("Java.Interop.Tools.TypeNameMappings.JavaNativeTypeManager/<FromSignature>d__10")]
public static IEnumerable`1<JniTypeName> FromSignature(string signature);
    [NullableContextAttribute("2")]
public static JniTypeName ReturnTypeFromSignature(string signature);
    [NullableContextAttribute("2")]
private static JniTypeName ExtractType(string signature, Int32& index);
    public static string ToCliType(string jniType);
    private static string ToCliTypePart(string part);
    private static string ToPascalCase(string value, int minLength);
    public static string ToJniName(Type type);
    private static string ToJniName(Type type, ExportParameterKind exportKind);
    public static string ToJniName(string jniType, int rank);
    private static bool IsPackageNamePreservedForAssembly(string assemblyName);
    public static string GetPackageName(Type type);
    private static string GetAssemblyName(Assembly assembly);
    public static int GetArrayInfo(Type type, Type& elementType);
    private static string GetPrimitiveClass(Type type);
    private static string GetSpecialExportJniType(string typeName, ExportParameterKind exportKind);
    public static string ToJniNameFromAttributes(Type type);
    private static string GetJniSignature(IEnumerable`1<P> parameters, Func`2<P, T> getParameterType, Func`2<P, ExportParameterKind> getExportKind, T returnType, ExportParameterKind returnExportKind, Func`3<T, ExportParameterKind, string> getJniTypeName, bool isConstructor);
    private static string GetJniTypeName(TR typeRef, ExportParameterKind exportKind, Func`2<TR, TD> resolve, Func`2<TR, KeyValuePair`2<int, TR>> getArrayInfo, Func`2<TD, string> getFullName, Func`3<TD, ExportParameterKind, string> toJniName);
    private static ExportParameterKind GetExportKind(ICustomAttributeProvider p);
    public static string GetJniSignature(MethodInfo method);
    public static string GetJniTypeName(Type typeRef);
    internal static string GetJniTypeName(Type typeRef, ExportParameterKind exportKind);
    private static string ToJniNameWhichShouldReplaceExistingToJniName(Type type, ExportParameterKind exportKind);
    internal static ExportParameterKind GetExportKind(ICustomAttributeProvider p);
    internal static ExportParameterAttribute ToExportParameterAttribute(CustomAttribute attr);
    [ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static bool IsApplication(TypeDefinition type);
    public static bool IsApplication(TypeDefinition type, TypeDefinitionCache cache);
    public static bool IsApplication(TypeDefinition type, IMetadataResolver resolver);
    [ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static bool IsInstrumentation(TypeDefinition type);
    public static bool IsInstrumentation(TypeDefinition type, TypeDefinitionCache cache);
    public static bool IsInstrumentation(TypeDefinition type, IMetadataResolver resolver);
    [ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static string GetJniSignature(MethodDefinition method);
    public static string GetJniSignature(MethodDefinition method, TypeDefinitionCache cache);
    public static string GetJniSignature(MethodDefinition method, IMetadataResolver resolver);
    [ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static string GetJniTypeName(TypeReference typeRef);
    public static string GetJniTypeName(TypeReference typeRef, TypeDefinitionCache cache);
    public static string GetJniTypeName(TypeReference typeRef, IMetadataResolver resolver);
    internal static string GetJniTypeName(TypeReference typeRef, ExportParameterKind exportKind, IMetadataResolver cache);
    [ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static string ToCompatJniName(TypeDefinition type);
    public static string ToCompatJniName(TypeDefinition type, TypeDefinitionCache cache);
    public static string ToCompatJniName(TypeDefinition type, IMetadataResolver resolver);
    private static string ToCompatPackageName(TypeDefinition type);
    [ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static string ToJniName(TypeDefinition type);
    public static string ToJniName(TypeDefinition type, TypeDefinitionCache cache);
    public static string ToJniName(TypeDefinition type, IMetadataResolver resolver);
    private static string ToJniName(TypeDefinition type, ExportParameterKind exportKind, IMetadataResolver cache);
    private static string ToJniNameFromAttributes(TypeDefinition type, IMetadataResolver resolver);
    private static string ToJniNameFromAttributesForInterop(TypeDefinition type, IMetadataResolver resolver);
    private static string ToJniNameFromAttributesForAndroid(TypeDefinition type, IMetadataResolver resolver);
    private static bool IsIJniNameProviderAttribute(CustomAttribute attr, IMetadataResolver resolver);
    public static int GetArrayInfo(TypeReference type, TypeReference& elementType);
    private static string GetPrimitiveClass(TypeDefinition type, IMetadataResolver cache);
    [ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static string GetPackageName(TypeDefinition type);
    public static string GetPackageName(TypeDefinition type, TypeDefinitionCache cache);
    public static string GetPackageName(TypeDefinition type, IMetadataResolver resolver);
    private static string ToJniName(T type, Func`2<T, T> decl, Func`2<T, string> name, Func`2<T, string> ns, Func`2<T, string> overrideName, Func`2<T, bool> shouldUpdateName);
    internal static bool IsNonStaticInnerClass(TypeDefinition type, IMetadataResolver cache);
    private static string ToCrc64(string value);
    private static string ToLowerCase(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Java.Interop.Tools.TypeNameMappings.JniTypeName : object {
    [NullableAttribute("2")]
private string type;
    [CompilerGeneratedAttribute]
private bool <IsKeyword>k__BackingField;
    public string Type { get; internal set; }
    public bool IsKeyword { get; internal set; }
    public string get_Type();
    internal void set_Type(string value);
    [CompilerGeneratedAttribute]
public bool get_IsKeyword();
    [CompilerGeneratedAttribute]
internal void set_IsKeyword(bool value);
}
public enum Java.Interop.Tools.TypeNameMappings.PackageNamingPolicy : Enum {
    public int value__;
    [ObsoleteAttribute("No longer supported. Use PackageNamingPolicy.LowercaseCrc64 instead.", "True")]
public static PackageNamingPolicy LowercaseHash;
    public static PackageNamingPolicy Lowercase;
    public static PackageNamingPolicy LowercaseWithAssemblyName;
    [ObsoleteAttribute("No longer supported. Use PackageNamingPolicy.LowercaseCrc64 instead.", "True")]
public static PackageNamingPolicy LowercaseMD5;
    public static PackageNamingPolicy LowercaseCrc64;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
public class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
public class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
public class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
public class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
public class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("10624")]
public class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
public class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
public class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
