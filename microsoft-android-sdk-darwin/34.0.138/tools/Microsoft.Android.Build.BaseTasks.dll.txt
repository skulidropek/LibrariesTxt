public abstract class Microsoft.Android.Build.Tasks.AndroidAsyncTask : AsyncTask {
    public string TaskPrefix { get; }
    public abstract virtual string get_TaskPrefix();
    public virtual bool Execute();
    public virtual bool RunTask();
    public virtual Task RunTaskAsync();
    protected object ProjectSpecificTaskObjectKey(object key);
    [CompilerGeneratedAttribute]
private Task <RunTask>b__3_0();
}
public static class Microsoft.Android.Build.Tasks.AndroidRidAbiHelper : object {
    private static String[] ValidAbis;
    private static AndroidRidAbiHelper();
    public static string GetNativeLibraryAbi(string lib);
    public static string GetNativeLibraryAbi(ITaskItem lib);
    public static string RuntimeIdentifierToAbi(string runtimeIdentifier);
}
public abstract class Microsoft.Android.Build.Tasks.AndroidRunToolTask : AndroidToolTask {
    protected static bool IsWindows;
    [CompilerGeneratedAttribute]
private string <BaseDirectory>k__BackingField;
    private static Regex androidErrorRegex;
    protected string DefaultErrorCode { get; }
    protected Regex ErrorRegex { get; }
    protected string BaseDirectory { get; protected set; }
    public static Regex AndroidErrorRegex { get; }
    private static AndroidRunToolTask();
    protected abstract virtual string get_DefaultErrorCode();
    protected virtual void LogEventsFromTextOutput(string singleLine, MessageImportance messageImportance);
    protected virtual Regex get_ErrorRegex();
    [CompilerGeneratedAttribute]
protected string get_BaseDirectory();
    [CompilerGeneratedAttribute]
protected void set_BaseDirectory(string value);
    public static Regex get_AndroidErrorRegex();
    protected static string QuoteString(string value);
}
public abstract class Microsoft.Android.Build.Tasks.AndroidTask : Task {
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    public string TaskPrefix { get; }
    protected string WorkingDirectory { get; private set; }
    public abstract virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
protected string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
private void set_WorkingDirectory(string value);
    public virtual bool Execute();
    public abstract virtual bool RunTask();
    protected object ProjectSpecificTaskObjectKey(object key);
}
public abstract class Microsoft.Android.Build.Tasks.AndroidToolTask : ToolTask {
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    public string TaskPrefix { get; }
    protected string WorkingDirectory { get; private set; }
    public abstract virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
protected string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
private void set_WorkingDirectory(string value);
    public virtual bool Execute();
    public virtual bool RunTask();
    protected object ProjectSpecificTaskObjectKey(object key);
}
[ExtensionAttribute]
public static class Microsoft.Android.Build.Tasks.AsyncTaskExtensions : object {
    private static int DefaultMaxConcurrencyLevel { get; }
    [ExtensionAttribute]
public static Task WhenAll(AsyncTask asyncTask, IEnumerable`1<TSource> source, Action`1<TSource> body);
    [ExtensionAttribute]
public static Task WhenAll(AsyncTask asyncTask, IEnumerable`1<TSource> source, Action`1<TSource> body, int maxConcurrencyLevel, TaskCreationOptions creationOptions);
    [ExtensionAttribute]
public static Task WhenAllWithLock(AsyncTask asyncTask, IEnumerable`1<TSource> source, Action`2<TSource, object> body);
    [ExtensionAttribute]
public static Task WhenAllWithLock(AsyncTask asyncTask, IEnumerable`1<TSource> source, Action`2<TSource, object> body, int maxConcurrencyLevel, TaskCreationOptions creationOptions);
    [ExtensionAttribute]
public static ParallelLoopResult ParallelForEach(AsyncTask asyncTask, IEnumerable`1<TSource> source, Action`1<TSource> body);
    [ExtensionAttribute]
public static ParallelLoopResult ParallelForEach(AsyncTask asyncTask, IEnumerable`1<TSource> source, Action`1<TSource> body, int maxConcurrencyLevel);
    [ExtensionAttribute]
public static ParallelLoopResult ParallelForEachWithLock(AsyncTask asyncTask, IEnumerable`1<TSource> source, Action`2<TSource, object> body);
    [ExtensionAttribute]
public static ParallelLoopResult ParallelForEachWithLock(AsyncTask asyncTask, IEnumerable`1<TSource> source, Action`2<TSource, object> body, int maxConcurrencyLevel);
    private static ParallelOptions ParallelOptions(AsyncTask asyncTask, int maxConcurrencyLevel);
    private static TaskScheduler GetTaskScheduler(int maxConcurrencyLevel);
    private static int get_DefaultMaxConcurrencyLevel();
    private static void LogErrorAndCancel(AsyncTask asyncTask, Exception exc);
    [ExtensionAttribute]
public static Task RunTask(AsyncTask asyncTask, Action body);
    [ExtensionAttribute]
public static Task RunTask(AsyncTask asyncTask, Action body, int maxConcurrencyLevel, TaskCreationOptions creationOptions);
    [ExtensionAttribute]
public static Task`1<TSource> RunTask(AsyncTask asyncTask, Func`1<TSource> body);
    [ExtensionAttribute]
public static Task`1<TSource> RunTask(AsyncTask asyncTask, Func`1<TSource> body, int maxConcurrencyLevel, TaskCreationOptions creationOptions);
}
public class Microsoft.Android.Build.Tasks.Crc64 : HashAlgorithm {
    private ulong crc;
    private ulong length;
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
}
internal static class Microsoft.Android.Build.Tasks.Crc64Helper : object {
    private static UInt64[0...,0...] table;
    private static Crc64Helper();
    internal static Byte[] Compute(Byte[] array);
    internal static void HashCore(Byte[] array, int ibStart, int cbSize, UInt64& crc, UInt64& length);
}
public static class Microsoft.Android.Build.Tasks.Files : object {
    public static int MaxPath;
    public static string LongPathPrefix;
    public static Encoding UTF8withoutBOM;
    private static Byte[] Utf8Preamble;
    private static UInt32 ppdb_signature;
    private static Files();
    public static string ToLongPath(string fullPath);
    public static void SetWriteable(string source, bool checkExists);
    public static void SetDirectoryWriteable(string directory);
    public static bool Archive(string target, Action`1<string> archiver);
    public static bool ArchiveZipUpdate(string target, Action`1<string> archiver);
    public static bool ArchiveZip(string target, Action`1<string> archiver);
    public static bool CopyIfChanged(string source, string destination);
    public static bool CopyIfStringChanged(string contents, string destination);
    public static bool CopyIfBytesChanged(Byte[] bytes, string destination);
    public static bool CopyIfStreamChanged(Stream stream, string destination);
    public static bool CopyIfZipChanged(Stream source, string destination);
    public static bool CopyIfZipChanged(string source, string destination);
    public static bool HasZipChanged(Stream source, string destination, String& hash);
    public static bool HasZipChanged(string source, string destination, String& hash);
    public static bool HasFileChanged(string source, string destination);
    public static bool HasStreamChanged(Stream source, string destination);
    public static bool HasBytesChanged(Byte[] bytes, string destination);
    private static string HashZip(Stream stream);
    private static string HashZip(string filename);
    public static ZipArchive ReadZipFile(string filename, bool strictConsistencyChecks);
    public static bool ZipAny(string filename, Func`2<ZipEntry, bool> filter);
    public static bool ExtractAll(ZipArchive zip, string destination, Action`2<int, int> progressCallback, Func`2<string, string> modifyCallback, Func`2<string, bool> deleteCallback, Func`2<string, bool> skipCallback);
    public static bool ShouldSkipEntryInAar(string entryFullName);
    public static string HashString(string s);
    public static string HashBytes(Byte[] bytes);
    public static string HashFile(string filename);
    public static string HashFile(string filename, HashAlgorithm hashAlg);
    public static string HashStream(Stream stream);
    public static string ToHexString(Byte[] hash);
    private static char GetHexValue(int i);
    public static void DeleteFile(string filename, object log);
    public static bool IsPortablePdb(string filename);
    public static void CleanBOM(string filePath);
}
internal class Microsoft.Android.Build.Tasks.LinePreservedTextWriter : TextWriter {
    private TextWriter w;
    private int line;
    public Encoding Encoding { get; }
    public LinePreservedTextWriter(TextWriter w);
    public virtual Encoding get_Encoding();
    public void ProceedTo(int line, int column);
    public virtual void Close();
    public virtual void Flush();
    public virtual void Write(char value);
    public virtual void Write(Char[] buffer, int index, int count);
    public virtual void Write(string value);
    public virtual void WriteLine();
}
public class Microsoft.Android.Build.Tasks.LinePreservedXmlWriter : XmlTextWriter {
    private LinePreservedTextWriter tw;
    private XPathNavigator nav;
    public LinePreservedXmlWriter(TextWriter w);
    internal LinePreservedXmlWriter(LinePreservedTextWriter w);
    private static LinePreservedTextWriter GetLinePreservedTextWriter(TextWriter w);
    public virtual void WriteNode(XPathNavigator navigator, bool defattr);
    public virtual void WriteStartAttribute(string prefix, string localName, string namespaceUri);
    public virtual void WriteStartElement(string prefix, string localName, string namespaceUri);
    private void Proceed(IXmlLineInfo li);
}
public class Microsoft.Android.Build.Tasks.MemoryStreamPool : ObjectPool`1<MemoryStream> {
    public static Encoding UTF8withoutBOM;
    public static MemoryStreamPool Shared;
    private static MemoryStreamPool();
    public virtual void Return(MemoryStream stream);
    public StreamWriter CreateStreamWriter();
    public StreamWriter CreateStreamWriter(Encoding encoding);
    public BinaryWriter CreateBinaryWriter();
    public BinaryWriter CreateBinaryWriter(Encoding encoding);
}
[ExtensionAttribute]
public static class Microsoft.Android.Build.Tasks.MSBuildExtensions : object {
    private static Regex Message;
    private static string AssemblyLocation;
    private static MSBuildExtensions();
    [ExtensionAttribute]
public static void LogDebugMessage(TaskLoggingHelper log, string message, Object[] messageArgs);
    [ExtensionAttribute]
public static void LogTaskItems(TaskLoggingHelper log, string message, ITaskItem[] items);
    [ExtensionAttribute]
public static void LogTaskItems(TaskLoggingHelper log, string message, String[] items);
    [ExtensionAttribute]
public static void LogDebugTaskItems(TaskLoggingHelper log, string message, ITaskItem[] items, bool logMetadata);
    [ExtensionAttribute]
public static void LogDebugTaskItems(TaskLoggingHelper log, string message, String[] items);
    [ExtensionAttribute]
public static void LogFromStandardError(TaskLoggingHelper log, string defaultErrorCode, string message);
    [ExtensionAttribute]
public static void LogDebugTaskItemsAndLogical(TaskLoggingHelper log, string message, ITaskItem[] items);
    [ExtensionAttribute]
public static void LogCodedError(TaskLoggingHelper log, string code, string message, Object[] messageArgs);
    [ExtensionAttribute]
public static void LogCodedError(TaskLoggingHelper log, string code, string file, int lineNumber, string message, Object[] messageArgs);
    [ExtensionAttribute]
public static void LogCodedWarning(TaskLoggingHelper log, string code, string message, Object[] messageArgs);
    [ExtensionAttribute]
public static void LogCodedWarning(TaskLoggingHelper log, string code, string file, int lineNumber, string message, Object[] messageArgs);
    [ExtensionAttribute]
public static void LogErrorForXmlNode(TaskLoggingHelper log, string code, string file, object node, string message, Object[] messageArgs);
    [ExtensionAttribute]
public static void LogWarningForXmlNode(TaskLoggingHelper log, string code, string file, object node, string message, Object[] messageArgs);
    [ExtensionAttribute]
public static Action`2<TraceLevel, string> CreateTaskLogger(Task task);
    [ExtensionAttribute]
public static Action`2<TraceLevel, string> CreateTaskLogger(AsyncTask task);
    [IteratorStateMachineAttribute("Microsoft.Android.Build.Tasks.MSBuildExtensions/<Concat>d__16")]
public static IEnumerable`1<ITaskItem> Concat(ITaskItem[][] values);
    public static string FixupResourceFilename(string file, string resourceDir, Dictionary`2<string, string> resourceNameCaseMap);
    [ExtensionAttribute]
public static void FixupResourceFilenameAndLogCodedError(TaskLoggingHelper log, string code, string message, string file, string resourceDir, Dictionary`2<string, string> resourceNameCaseMap);
    [ExtensionAttribute]
public static void FixupResourceFilenameAndLogCodedWarning(TaskLoggingHelper log, string code, string message, string file, string resourceDir, Dictionary`2<string, string> resourceNameCaseMap);
    [ExtensionAttribute]
public static void SetDestinationSubPath(ITaskItem assembly);
    [ExtensionAttribute]
public static void RegisterTaskObjectAssemblyLocal(IBuildEngine4 engine, object key, object value, RegisteredTaskObjectLifetime lifetime, bool allowEarlyCollection);
    [ExtensionAttribute]
public static object GetRegisteredTaskObjectAssemblyLocal(IBuildEngine4 engine, object key, RegisteredTaskObjectLifetime lifetime);
    [ExtensionAttribute]
public static T GetRegisteredTaskObjectAssemblyLocal(IBuildEngine4 engine, object key, RegisteredTaskObjectLifetime lifetime);
    [ExtensionAttribute]
public static object UnregisterTaskObjectAssemblyLocal(IBuildEngine4 engine, object key, RegisteredTaskObjectLifetime lifetime);
    [ExtensionAttribute]
public static T UnregisterTaskObjectAssemblyLocal(IBuildEngine4 engine, object key, RegisteredTaskObjectLifetime lifetime);
}
public class Microsoft.Android.Build.Tasks.ObjectPool`1 : object {
    private ConcurrentBag`1<T> bag;
    private Func`1<T> generator;
    public ObjectPool`1(Func`1<T> generator);
    public virtual T Rent();
    public virtual void Return(T item);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Android.Build.Tasks.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string XA0000_Exception { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_XA0000_Exception();
}
[ExtensionAttribute]
public static class Microsoft.Android.Build.Tasks.UnhandledExceptionLogger : object {
    [ExtensionAttribute]
public static void LogUnhandledException(AsyncTask task, string prefix, Exception ex);
    [ExtensionAttribute]
public static void LogUnhandledException(TaskLoggingHelper log, string prefix, Exception ex);
    private static void LogUnhandledException(Action`2<string, string> logCodedError, string prefix, Exception ex);
}
[ExtensionAttribute]
public static class Microsoft.Android.Build.Tasks.XDocumentExtensions : object {
    private static string PathsElementName;
    [ExtensionAttribute]
public static ITaskItem[] GetPathsAsTaskItems(XDocument doc, String[] paths);
    private static ITaskItem ToTaskItem(XElement element);
    [ExtensionAttribute]
public static String[] GetPaths(XDocument doc, String[] paths);
    [ExtensionAttribute]
public static string ToFullString(XElement element);
    [ExtensionAttribute]
public static bool SaveIfChanged(XDocument document, string fileName);
}
