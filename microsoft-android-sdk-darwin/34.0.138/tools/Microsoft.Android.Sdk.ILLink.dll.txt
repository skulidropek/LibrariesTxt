[ExtensionAttribute]
public static class Java.Interop.Tools.Cecil.CustomAttributeProviderRocks : object {
    [ExtensionAttribute]
public static bool AnyCustomAttributes(ICustomAttributeProvider item, Type attribute);
    [ExtensionAttribute]
public static IEnumerable`1<CustomAttribute> GetCustomAttributes(ICustomAttributeProvider item, Type attribute);
    [ExtensionAttribute]
public static bool AnyCustomAttributes(ICustomAttributeProvider item, string attribute_fullname);
    [IteratorStateMachineAttribute("Java.Interop.Tools.Cecil.CustomAttributeProviderRocks/<GetCustomAttributes>d__3")]
[ExtensionAttribute]
public static IEnumerable`1<CustomAttribute> GetCustomAttributes(ICustomAttributeProvider item, string attribute_fullname);
    [ExtensionAttribute]
public static IEnumerable`1<CustomAttribute> GetCustomAttributes(IEnumerable`1<ICustomAttributeProvider> items, Type attribute);
    [ExtensionAttribute]
public static IEnumerable`1<CustomAttribute> GetCustomAttributes(IEnumerable`1<ICustomAttributeProvider> items, string attribute_fullname);
}
[ExtensionAttribute]
public static class Java.Interop.Tools.Cecil.MethodDefinitionRocks : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static MethodDefinition GetBaseDefinition(MethodDefinition method);
    [ExtensionAttribute]
public static MethodDefinition GetBaseDefinition(MethodDefinition method, TypeDefinitionCache cache);
    [ExtensionAttribute]
public static MethodDefinition GetBaseDefinition(MethodDefinition method, IMetadataResolver resolver);
    [ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static IEnumerable`1<MethodDefinition> GetOverriddenMethods(MethodDefinition method, bool inherit);
    public static IEnumerable`1<MethodDefinition> GetOverriddenMethods(MethodDefinition method, bool inherit, TypeDefinitionCache cache);
    [IteratorStateMachineAttribute("Java.Interop.Tools.Cecil.MethodDefinitionRocks/<GetOverriddenMethods>d__5")]
public static IEnumerable`1<MethodDefinition> GetOverriddenMethods(MethodDefinition method, bool inherit, IMetadataResolver resolver);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static bool AreParametersCompatibleWith(Collection`1<ParameterDefinition> a, Collection`1<ParameterDefinition> b);
    [ExtensionAttribute]
public static bool AreParametersCompatibleWith(Collection`1<ParameterDefinition> a, Collection`1<ParameterDefinition> b, TypeDefinitionCache cache);
    [ExtensionAttribute]
public static bool AreParametersCompatibleWith(Collection`1<ParameterDefinition> a, Collection`1<ParameterDefinition> b, IMetadataResolver resolver);
    private static bool IsParameterCompatibleWith(IModifierType a, IModifierType b, IMetadataResolver cache);
    private static bool IsParameterCompatibleWith(TypeSpecification a, TypeSpecification b, IMetadataResolver cache);
    private static bool IsParameterCompatibleWith(GenericInstanceType a, GenericInstanceType b, IMetadataResolver cache);
    private static bool IsParameterCompatibleWith(TypeReference a, TypeReference b, IMetadataResolver cache);
}
public class Java.Interop.Tools.Cecil.TypeDefinitionCache : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<TypeReference, TypeDefinition> types;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<FieldReference, FieldDefinition> fields;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<MethodReference, MethodDefinition> methods;
    public virtual TypeDefinition Resolve(TypeReference typeReference);
    public virtual FieldDefinition Resolve(FieldReference field);
    public virtual MethodDefinition Resolve(MethodReference method);
}
[ExtensionAttribute]
public static class Java.Interop.Tools.Cecil.TypeDefinitionRocks : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static TypeDefinition GetBaseType(TypeDefinition type);
    [ExtensionAttribute]
public static TypeDefinition GetBaseType(TypeDefinition type, TypeDefinitionCache cache);
    [ExtensionAttribute]
public static TypeDefinition GetBaseType(TypeDefinition type, IMetadataResolver resolver);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static IEnumerable`1<TypeDefinition> GetTypeAndBaseTypes(TypeDefinition type);
    [ExtensionAttribute]
public static IEnumerable`1<TypeDefinition> GetTypeAndBaseTypes(TypeDefinition type, TypeDefinitionCache cache);
    [IteratorStateMachineAttribute("Java.Interop.Tools.Cecil.TypeDefinitionRocks/<GetTypeAndBaseTypes>d__5")]
[ExtensionAttribute]
public static IEnumerable`1<TypeDefinition> GetTypeAndBaseTypes(TypeDefinition type, IMetadataResolver resolver);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static IEnumerable`1<TypeDefinition> GetBaseTypes(TypeDefinition type);
    [ExtensionAttribute]
public static IEnumerable`1<TypeDefinition> GetBaseTypes(TypeDefinition type, TypeDefinitionCache cache);
    [IteratorStateMachineAttribute("Java.Interop.Tools.Cecil.TypeDefinitionRocks/<GetBaseTypes>d__8")]
[ExtensionAttribute]
public static IEnumerable`1<TypeDefinition> GetBaseTypes(TypeDefinition type, IMetadataResolver resolver);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static bool IsAssignableFrom(TypeReference type, TypeReference c);
    [ExtensionAttribute]
public static bool IsAssignableFrom(TypeReference type, TypeReference c, TypeDefinitionCache cache);
    [ExtensionAttribute]
public static bool IsAssignableFrom(TypeReference type, TypeReference c, IMetadataResolver resolver);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static bool IsSubclassOf(TypeDefinition type, string typeName);
    [ExtensionAttribute]
public static bool IsSubclassOf(TypeDefinition type, string typeName, TypeDefinitionCache cache);
    [ExtensionAttribute]
public static bool IsSubclassOf(TypeDefinition type, string typeName, IMetadataResolver resolver);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static bool ImplementsInterface(TypeDefinition type, string interfaceName);
    [ExtensionAttribute]
public static bool ImplementsInterface(TypeDefinition type, string interfaceName, TypeDefinitionCache cache);
    [ExtensionAttribute]
public static bool ImplementsInterface(TypeDefinition type, string interfaceName, IMetadataResolver resolver);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static string GetPartialAssemblyName(TypeReference type);
    [ExtensionAttribute]
public static string GetPartialAssemblyName(TypeReference type, TypeDefinitionCache cache);
    [ExtensionAttribute]
public static string GetPartialAssemblyName(TypeReference type, IMetadataResolver resolver);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static string GetPartialAssemblyQualifiedName(TypeReference type);
    [ExtensionAttribute]
public static string GetPartialAssemblyQualifiedName(TypeReference type, TypeDefinitionCache cache);
    [ExtensionAttribute]
public static string GetPartialAssemblyQualifiedName(TypeReference type, IMetadataResolver resolver);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static string GetAssemblyQualifiedName(TypeReference type);
    [ExtensionAttribute]
public static string GetAssemblyQualifiedName(TypeReference type, TypeDefinitionCache cache);
    [ExtensionAttribute]
public static string GetAssemblyQualifiedName(TypeReference type, IMetadataResolver resolver);
    [ExtensionAttribute]
public static TypeDefinition GetNestedType(TypeDefinition type, string name);
    [ExtensionAttribute]
public static TypeDefinition FindType(ModuleDefinition module, string name);
    [NullableContextAttribute("2")]
public static string CecilTypeNameToReflectionTypeName(string typeName);
}
public class Microsoft.Android.Sdk.ILLink.ApplyPreserveAttribute : BaseSubStep {
    public SubStepTargets Targets { get; }
    public virtual SubStepTargets get_Targets();
    public virtual bool IsActiveFor(AssemblyDefinition assembly);
    public virtual void ProcessType(TypeDefinition type);
    public virtual void ProcessField(FieldDefinition field);
    public virtual void ProcessMethod(MethodDefinition method);
    public virtual void ProcessProperty(PropertyDefinition property);
    public virtual void ProcessEvent(EventDefinition event);
    private void MarkMethodIfPreserved(MethodDefinition method);
    private void MarkMethod(MethodDefinition method, CustomAttribute preserve_attribute);
    private void Mark(IMetadataTokenProvider provider, CustomAttribute preserve_attribute);
    private void PreserveConditional(IMetadataTokenProvider provider);
    private static bool IsConditionalAttribute(CustomAttribute attribute);
    private void PreserveUnconditional(IMetadataTokenProvider provider);
    private void TryApplyPreserveAttribute(TypeDefinition type);
    private static IEnumerable`1<CustomAttribute> GetPreserveAttributes(ICustomAttributeProvider provider);
}
internal class Microsoft.Android.Sdk.ILLink.PreserveJavaInterfaces : BaseMarkHandler {
    public virtual void Initialize(LinkContext context, MarkContext markContext);
    private bool IsActiveFor(AssemblyDefinition assembly);
    private void ProcessType(TypeDefinition type);
    [CompilerGeneratedAttribute]
private void <Initialize>b__0_0(TypeDefinition type);
}
internal class Microsoft.Android.Sdk.ILLink.PreserveRegistrations : BaseMarkHandler {
    public virtual void Initialize(LinkContext context, MarkContext markContext);
    private bool IsActiveFor(AssemblyDefinition assembly);
    private bool PreserveJniMarshalMethods();
    protected int PreserveNamedMethod(TypeDefinition type, string method_name, MethodDefinition key);
    private void PreserveRegisteredMethod(TypeDefinition type, string member, MethodDefinition key);
    private void ProcessMethod(MethodDefinition method);
    private void AddPreservedMethod(MethodDefinition key, MethodDefinition method);
    [CompilerGeneratedAttribute]
private void <Initialize>b__0_0(MethodDefinition method);
}
public class Microsoft.Android.Sdk.ILLink.PreserveSubStepDispatcher : MarkSubStepsDispatcher {
}
public abstract class Microsoft.Android.Sdk.ILLink.Profile : object {
    private static Profile current;
    public static Profile Current { get; }
    public static Profile get_Current();
    public static bool IsSdkAssembly(AssemblyDefinition assembly);
    public static bool IsSdkAssembly(string assemblyName);
    public static bool IsProductAssembly(AssemblyDefinition assembly);
    public static bool IsProductAssembly(string assemblyName);
    protected virtual bool IsSdk(AssemblyDefinition assembly);
    protected virtual bool IsProduct(AssemblyDefinition assembly);
    protected abstract virtual bool IsSdk(string assemblyName);
    protected abstract virtual bool IsProduct(string assemblyName);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Microsoft.Android.Sdk.ILLink.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string XA2000 { get; }
    public static string XA8000 { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_XA2000();
    public static string get_XA8000();
}
public abstract class Microsoft.Android.Sdk.ILLink.RemoveAttributesBase : BaseSubStep {
    public SubStepTargets Targets { get; }
    public virtual SubStepTargets get_Targets();
    public virtual bool IsActiveFor(AssemblyDefinition assembly);
    public virtual void ProcessAssembly(AssemblyDefinition assembly);
    public virtual void ProcessType(TypeDefinition type);
    private void ProcessAttributeProviderCollection(IList list);
    public virtual void ProcessField(FieldDefinition field);
    public virtual void ProcessMethod(MethodDefinition method);
    private void ProcessMethodAttributeProvider(MethodDefinition method);
    public virtual void ProcessProperty(PropertyDefinition property);
    public virtual void ProcessEvent(EventDefinition event);
    private void ProcessAttributeProvider(ICustomAttributeProvider provider);
    protected abstract virtual bool IsRemovedAttribute(CustomAttribute attribute);
    protected virtual void WillRemoveAttribute(ICustomAttributeProvider provider, CustomAttribute attribute);
}
internal class Microsoft.Android.Sdk.ILLink.SetupStep : BaseStep {
    protected virtual void Process();
}
public abstract class Mobile.Tuner.MobileProfile : Profile {
    private static HashSet`1<string> Sdk;
    private static MobileProfile();
    protected virtual bool IsSdk(string assemblyName);
}
public class Mono.Linker.BaseMarkHandler : object {
    protected LinkContext Context;
    protected IMetadataResolver cache;
    protected AnnotationStore Annotations { get; }
    protected AnnotationStore get_Annotations();
    public virtual void Initialize(LinkContext context, MarkContext markContext);
}
[ExtensionAttribute]
public static class Mono.Linker.Extensions : object {
    [ExtensionAttribute]
public static void LogMessage(LinkContext context, string message);
}
public class Mono.Linker.Steps.GenerateProguardConfiguration : BaseStep {
    private string filename;
    private TextWriter writer;
    protected virtual void Process();
    protected virtual void EndProcess();
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
    private void ProcessType(TypeDefinition type);
    private void ProcessMethod(MethodDefinition method);
}
public class Mono.Tuner.PreserveExportedTypes : BaseSubStep {
    public SubStepTargets Targets { get; }
    public virtual SubStepTargets get_Targets();
    public virtual bool IsActiveFor(AssemblyDefinition assembly);
    public virtual void ProcessField(FieldDefinition field);
    public virtual void ProcessMethod(MethodDefinition method);
    public virtual void ProcessProperty(PropertyDefinition property);
    public virtual void ProcessEvent(EventDefinition event);
    private void ProcessExports(ICustomAttributeProvider provider);
}
public class MonoDroid.Tuner.AddKeepAlivesStep : BaseStep {
    private IMetadataResolver cache;
    private MethodDefinition methodKeepAlive;
    protected virtual void Process();
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
    internal bool AddKeepAlives(AssemblyDefinition assembly);
    private static void AddNestedTypes(List`1<TypeDefinition> types, TypeDefinition type);
    private bool MightNeedFix(TypeDefinition type);
    private bool AddKeepAlives(TypeDefinition type);
    protected virtual AssemblyDefinition GetCorlibAssembly();
    private MethodDefinition GetKeepAliveMethod();
    public virtual void LogMessage(string message);
    private static Instruction GetLoadArgumentInstruction(int argNum, ParameterDefinition parameter);
}
public class MonoDroid.Tuner.AndroidLinkConfiguration : object {
    [CompilerGeneratedAttribute]
private List`1<AssemblyDefinition> <Assemblies>k__BackingField;
    private static ConditionalWeakTable`2<LinkContext, AndroidLinkConfiguration> configurations;
    public List`1<AssemblyDefinition> Assemblies { get; private set; }
    private static AndroidLinkConfiguration();
    [CompilerGeneratedAttribute]
public List`1<AssemblyDefinition> get_Assemblies();
    [CompilerGeneratedAttribute]
private void set_Assemblies(List`1<AssemblyDefinition> value);
    public static AndroidLinkConfiguration GetInstance(LinkContext context);
}
[ExtensionAttribute]
internal static class MonoDroid.Tuner.Extensions : object {
    private static string JavaObject;
    private static string IJavaObject;
    private static string IJavaPeerable;
    private static string JavaThrowable;
    private static string RegisterAttribute;
    [ExtensionAttribute]
public static bool IsJavaObject(TypeDefinition type);
    [ExtensionAttribute]
public static bool IsJavaException(TypeDefinition type);
    [ExtensionAttribute]
public static bool ImplementsIJavaObject(TypeDefinition type);
    [ExtensionAttribute]
public static bool ImplementsIJavaPeerable(TypeDefinition type);
    [ExtensionAttribute]
public static object GetSettableValue(CustomAttributeArgument arg);
    [ExtensionAttribute]
public static AssemblyDefinition GetAssembly(LinkContext context, string assemblyName);
    [ExtensionAttribute]
public static TypeDefinition GetType(LinkContext context, string assemblyName, string typeName);
    [ExtensionAttribute]
public static MethodDefinition GetMethod(LinkContext context, string assemblyName, string typeName, string name, String[] parameters);
    public static MethodDefinition GetMethod(TypeDefinition td, string name);
    public static MethodDefinition GetMethod(TypeDefinition type, string name, String[] parameters);
    public static TypeDefinition GetType(AssemblyDefinition assembly, string typeName);
    [ExtensionAttribute]
public static bool Implements(TypeReference self, string interfaceName);
    public static bool Implements(TypeDefinition type, string interfaceName, bool generic);
    [ExtensionAttribute]
public static bool Inherits(TypeReference self, string className);
    private static bool IsRegisterAttribute(CustomAttribute attribute);
    private static bool TryGetRegisterAttribute(ICustomAttributeProvider provider, CustomAttribute& register);
    [ExtensionAttribute]
public static bool TryGetRegisterMember(MethodDefinition md, String& method);
    [ExtensionAttribute]
public static bool TryGetRegisterMember(MethodDefinition md, String& method, String& nativeMethod, String& signature);
    [ExtensionAttribute]
public static TypeDefinition GetMarshalMethodsType(TypeDefinition type);
    [ExtensionAttribute]
public static bool TryGetBaseOrInterfaceRegisterMember(MethodDefinition method, IMetadataResolver resolver, String& member, String& nativeMethod, String& signature);
    [ExtensionAttribute]
public static bool IsEqual(MethodDefinition m1, MethodDefinition m2, IMetadataResolver resolver);
    [ExtensionAttribute]
public static bool TryGetMarshalMethod(MethodDefinition method, string nativeMethod, string signature, MethodDefinition& marshalMethod);
    public static string GetMarshalMethodName(string name, string signature);
    public static Instruction CreateLoadArraySizeOrOffsetInstruction(int intValue);
}
public class MonoDroid.Tuner.FixAbstractMethodsStep : BaseMarkHandler {
    private IMetadataResolver cache;
    private HashSet`1<string> warnedAssemblies;
    private MethodDefinition abstractMethodErrorConstructor;
    private bool markedAbstractMethodErrorType;
    private MethodDefinition AbstractMethodErrorConstructor { get; }
    public virtual void Initialize(LinkContext context, MarkContext markContext);
    private bool CheckShouldProcessAssembly(AssemblyDefinition assembly);
    private void UpdateAssemblyAction(AssemblyDefinition assembly);
    protected void ProcessType(TypeDefinition type);
    internal void CheckAppDomainUsage(AssemblyDefinition assembly, Action`1<string> warn);
    private bool IsProductOrSdkAssembly(AssemblyDefinition assembly);
    public bool IsProductOrSdkAssembly(string assemblyName);
    private bool MightNeedFix(TypeDefinition type);
    private static bool CompareTypes(TypeReference iType, TypeReference tType);
    private bool IsInOverrides(MethodDefinition iMethod, MethodDefinition tMethod);
    private bool HaveSameSignature(TypeReference iface, MethodDefinition iMethod, MethodDefinition tMethod);
    private bool FixAbstractMethods(TypeDefinition type);
    private TypeReference TryImportType(TypeDefinition declaringType, TypeReference type);
    private void AddNewExceptionMethod(TypeDefinition type, MethodDefinition method);
    private MethodDefinition get_AbstractMethodErrorConstructor();
    private void MarkAbstractMethodErrorType();
    public virtual void LogMessage(string message);
    protected virtual AssemblyDefinition GetMonoAndroidAssembly();
    [CompilerGeneratedAttribute]
private void <Initialize>b__0_0(TypeDefinition type);
    [CompilerGeneratedAttribute]
private void <CheckShouldProcessAssembly>b__2_0(string msg);
}
public class MonoDroid.Tuner.FixLegacyResourceDesignerStep : LinkDesignerBase {
    internal static string DesignerAssemblyName;
    internal static string DesignerAssemblyNamespace;
    private bool designerLoaded;
    private AssemblyDefinition designerAssembly;
    private TypeDefinition designerType;
    private Dictionary`2<string, MethodDefinition> lookup;
    private Dictionary`2<string, MethodDefinition> lookupCaseInsensitive;
    protected virtual void EndProcess();
    protected virtual void LoadDesigner();
    internal virtual bool ProcessAssemblyDesigner(AssemblyDefinition assembly);
    private Dictionary`2<string, MethodDefinition> BuildResourceDesignerPropertyLookup(TypeDefinition type, Dictionary`2& caseInsensitiveLookup);
    private string GetNativeTypeNameFromManagedTypeName(string name);
    private string GetFixupKey(Instruction instruction, string designerFullName);
    protected virtual void FixBody(MethodBody body, TypeDefinition designer);
}
public class MonoDroid.Tuner.GetAssembliesStep : BaseStep {
    private AndroidLinkConfiguration config;
    protected virtual void Process();
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
}
public abstract class MonoDroid.Tuner.LinkDesignerBase : BaseStep {
    public virtual void LogMessage(string message);
    public virtual void LogError(int code, string error);
    public virtual AssemblyDefinition Resolve(AssemblyNameReference name);
    protected bool FindResourceDesigner(AssemblyDefinition assembly, bool mainApplication, TypeDefinition& designer, CustomAttribute& designerAttribute);
    protected void ClearDesignerClass(TypeDefinition designer, bool completely);
    protected Dictionary`2<string, int> BuildResourceDesignerFieldLookup(TypeDefinition type);
    protected void FixType(TypeDefinition type, TypeDefinition localDesigner);
    protected void RemoveFieldsFromType(TypeDefinition type, ModuleDefinition module);
    protected void RemoveUpdateIdValues(TypeDefinition type);
    protected void FixUpdateIdValuesBody(MethodDefinition method);
    protected void FixupAssemblyTypes(AssemblyDefinition assembly, TypeDefinition designer);
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
    internal abstract virtual bool ProcessAssemblyDesigner(AssemblyDefinition assemblyDefinition);
    protected abstract virtual void LoadDesigner();
    protected abstract virtual void FixBody(MethodBody body, TypeDefinition designer);
}
public class MonoDroid.Tuner.MarkJavaObjects : BaseMarkHandler {
    private Dictionary`2<ModuleDefinition, Dictionary`2<string, TypeDefinition>> module_types;
    public virtual void Initialize(LinkContext context, MarkContext markContext);
    public void ProcessType(TypeDefinition type);
    private void PreserveJavaObjectImplementation(TypeDefinition type);
    private void PreserveAttributeSetConstructor(TypeDefinition type);
    [IteratorStateMachineAttribute("MonoDroid.Tuner.MarkJavaObjects/<GetAttributeSetConstructors>d__5")]
private static IEnumerable`1<MethodDefinition> GetAttributeSetConstructors(TypeDefinition type);
    private void PreserveIntPtrConstructor(TypeDefinition type);
    private static MethodDefinition GetIntPtrConstructor(TypeDefinition type);
    private static MethodDefinition GetNewIntPtrConstructor(TypeDefinition type);
    private void PreserveMethod(TypeDefinition type, MethodDefinition method);
    private string TypeNameWithoutKey(string name);
    private bool CheckInvokerType(TypeDefinition type, string name);
    private void PreserveInterfaceMethods(TypeDefinition type, TypeDefinition invoker);
    private void PreserveInvoker(TypeDefinition type);
    private void PreserveInterfaces(TypeDefinition type);
    private bool ShouldPreserveInterfaces(TypeDefinition type);
    private TypeDefinition GetInvokerType(TypeDefinition type);
    private TypeDefinition FindType(TypeDefinition type, string fullname);
    private static Dictionary`2<string, TypeDefinition> GetTypesInModule(ModuleDefinition module);
    private static void AddNestedTypes(Dictionary`2<string, TypeDefinition> types, TypeDefinition type);
    private void PreserveConstructors(TypeDefinition type, TypeDefinition helper);
    private static bool IsImplementor(TypeDefinition type);
    private static bool IsUserType(TypeDefinition type);
    private void PreserveImplementor(TypeDefinition type);
    [CompilerGeneratedAttribute]
private void <Initialize>b__1_0(TypeDefinition type);
}
internal class MonoDroid.Tuner.MonoDroidProfile : MobileProfile {
    protected virtual bool IsProduct(string assemblyName);
    protected virtual bool IsSdk(string assemblyName);
}
public class MonoDroid.Tuner.PreserveApplications : BaseMarkHandler {
    public virtual void Initialize(LinkContext context, MarkContext markContext);
    public bool IsActiveFor(AssemblyDefinition assembly);
    public void ProcessAssembly(AssemblyDefinition assembly);
    public void ProcessType(TypeDefinition type);
    private void ProcessAttributeProvider(ICustomAttributeProvider provider);
    private void PreserveApplicationAttribute(CustomAttribute attribute);
    private void PreserveTypeProperty(CustomAttribute attribute, string property);
    private void PreserveDefaultConstructor(TypeDefinition type);
    private void PreserveMethod(TypeDefinition type, MethodDefinition method);
    [CompilerGeneratedAttribute]
private void <Initialize>b__0_0(AssemblyDefinition assembly);
    [CompilerGeneratedAttribute]
private void <Initialize>b__0_1(TypeDefinition type);
}
public class MonoDroid.Tuner.PreserveJavaExceptions : BaseMarkHandler {
    public virtual void Initialize(LinkContext context, MarkContext markContext);
    public void ProcessType(TypeDefinition type);
    private void PreserveJavaException(TypeDefinition type);
    private void PreserveStringConstructor(TypeDefinition type);
    private MethodDefinition GetStringConstructor(TypeDefinition type);
    private void PreserveMethod(TypeDefinition type, MethodDefinition method);
    [CompilerGeneratedAttribute]
private void <Initialize>b__0_0(TypeDefinition type);
}
public class MonoDroid.Tuner.PreserveJavaTypeRegistrations : BaseSubStep {
    public SubStepTargets Targets { get; }
    public virtual SubStepTargets get_Targets();
    public virtual void ProcessType(TypeDefinition type);
    private void PreserveJavaTypeRegistration(TypeDefinition type);
}
public class MonoDroid.Tuner.RemoveResourceDesignerStep : LinkDesignerBase {
    private TypeDefinition mainDesigner;
    private AssemblyDefinition mainAssembly;
    private CustomAttribute mainDesignerAttribute;
    private Dictionary`2<string, int> designerConstants;
    private Regex opCodeRegex;
    protected virtual void LoadDesigner();
    protected virtual void EndProcess();
    protected virtual void FixBody(MethodBody body, TypeDefinition designer);
    internal virtual bool ProcessAssemblyDesigner(AssemblyDefinition assembly);
}
public class MonoDroid.Tuner.StripEmbeddedLibraries : BaseStep {
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
    private bool ShouldStripResource(Resource r);
}
public class Xamarin.Android.Tasks.MonoAndroidHelper : object {
    public static String[] TargetFrameworkDirectories;
    internal static String[] FrameworkEmbeddedJarLookupTargets;
    internal static String[] FrameworkEmbeddedNativeLibraryAssemblies;
    internal static HashSet`1<string> FrameworkAssembliesToTreatAsUserAssemblies;
    private static MonoAndroidHelper();
    public static bool IsFrameworkAssembly(string assembly);
    public static bool IsFrameworkAssembly(string assembly, bool checkSdkPath);
    public static bool IsSharedRuntimeAssembly(string assembly);
    public static bool ExistsInFrameworkPath(string assembly);
}
public class Xamarin.Android.Tasks.Profile : object {
    public static String[] SharedRuntimeAssemblies;
    private static Profile();
}
