[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Mono.AndroidTools.ActivityNotFoundException : AdbException {
    public ActivityNotFoundException(string message);
}
public class Mono.AndroidTools.Adb.AdbClient : object {
    private static int MAX_COMMAND;
    internal static int ADB_PORT;
    private static int STATUS_OKAY;
    private static int STATUS_FAIL;
    internal static Encoding TextEncoding;
    private int port;
    private IPAddress address;
    private bool disposed;
    private NetworkStream stream;
    private TcpClient client;
    private string deviceID;
    private CancellationToken token;
    public NetworkStream Stream { get; }
    public AdbClient(IPEndPoint endpoint);
    public AdbClient(IPAddress address, int port);
    public AdbClient(NetworkStream stream);
    private static AdbClient();
    private void CreateClient();
    private void CheckDisposed();
    private void CheckConnected();
    public NetworkStream get_Stream();
    public IAsyncResult BeginConnect(AsyncCallback callback, object state);
    public void EndConnect(IAsyncResult asyncResult);
    public void Connect();
    public IAsyncResult BeginConnectTransport(string deviceID, AsyncCallback callback, object state);
    private string GetTransportCommand(string deviceID);
    private void ConnectTransport_OnConnected(IAsyncResult result);
    private void ConnectTransport_OnGotTransport(IAsyncResult result);
    public void EndConnectTransport(IAsyncResult asyncResult);
    public void ConnectTransport(string deviceID);
    public IAsyncResult BeginWriteCommand(string command, AsyncCallback callback, object state);
    public void EndWriteCommand(IAsyncResult asyncResult);
    public void WriteCommand(string command);
    private static Byte[] GetCommandBuffer(string command);
    public IAsyncResult BeginWriteCommandWithStatus(string command, AsyncCallback callback, object state);
    private void WriteCommandWithStatus_OnWroteCommand(IAsyncResult result);
    private void WriteCommandWithStatus_OnGotStatus(IAsyncResult result);
    private void WriteCommandWithStatus_OnGotMessage(IAsyncResult result);
    public void EndWriteCommandWithStatus(IAsyncResult asyncResult);
    public void WriteCommandWithStatus(string command);
    private Exception MessageToException(string msg);
    public IAsyncResult BeginWriteCommandWithMessage(string command, AsyncCallback callback, object state);
    public string EndWriteCommandWithMessage(IAsyncResult asyncResult);
    public string WriteCommandWithMessage(string command);
    public IAsyncResult BeginReadStatus(AsyncCallback callback, object state);
    public bool EndReadStatus(IAsyncResult ar);
    private bool InterpretStatus(Byte[] buf);
    public bool ReadStatus();
    public IAsyncResult BeginReadStringWithLength(AsyncCallback callback, object state);
    private static void ReadStringWithLength_OnReadLength(IAsyncResult ar);
    private static void ReadStringWithLength_OnRead(IAsyncResult ar);
    public string EndReadStringWithLength(IAsyncResult asyncResult);
    public string ReadStringWithLength();
    public IAsyncResult BeginReadText(Action`1<string> output, AsyncCallback callback, object state);
    private void ReadText_OnReadText(IAsyncResult ar);
    public void EndReadText(IAsyncResult ar);
    public void ReadText(Action`1<string> output);
    public void ReadLineWhile(Action`1<string> output, Func`1<bool> predicate);
    internal static int FourCCToInt(Byte[] fourCC, int offset);
    internal static void IntToFourCC(int val, Byte[] buf, int pos);
    internal static string IntToFourCCString(int val);
    public sealed virtual void Dispose();
    public void Dispose(CancellationToken token);
    public static string GetHostPrefix(string deviceID);
    public static string GetWaitForDeviceCommand(string deviceID);
    internal static Exception ConvertException(Exception ex);
}
public class Mono.AndroidTools.Adb.AdbFileInfo : object {
    private string fullPath;
    internal UInt32 mode;
    internal UInt32 time;
    internal UInt32 size;
    public string Name { get; }
    public string FullPath { get; }
    public AdbFileMode Mode { get; }
    public UInt32 FileTime { get; }
    public UInt32 Size { get; }
    public AdbFileMode Permissions { get; }
    public AdbFileMode FileType { get; }
    internal AdbFileInfo(string fullPath);
    internal AdbFileInfo(string fullPath, UInt32 mode, UInt32 size, UInt32 time);
    public string get_Name();
    public string get_FullPath();
    public AdbFileMode get_Mode();
    public UInt32 get_FileTime();
    public UInt32 get_Size();
    public DateTime GetLastModified();
    public AdbFileMode get_Permissions();
    public bool HasPermissions(AdbFileMode permissions);
    public AdbFileMode get_FileType();
    public bool IsFileType(AdbFileMode type);
    public static UInt32 UnixFileTimeFromDateTime(DateTime datetime);
    public static DateTime DateTimeFromUnixFileTime(UInt32 filetime);
    public string GetSymbolicMode();
    public virtual string ToString();
}
[FlagsAttribute]
public enum Mono.AndroidTools.Adb.AdbFileMode : Enum {
    public UInt32 value__;
    public static AdbFileMode S_ISUID;
    public static AdbFileMode S_ISGID;
    public static AdbFileMode S_ISVTX;
    public static AdbFileMode S_IRUSR;
    public static AdbFileMode S_IWUSR;
    public static AdbFileMode S_IXUSR;
    public static AdbFileMode S_IRGRP;
    public static AdbFileMode S_IWGRP;
    public static AdbFileMode S_IXGRP;
    public static AdbFileMode S_IROTH;
    public static AdbFileMode S_IWOTH;
    public static AdbFileMode S_IXOTH;
    public static AdbFileMode S_IRWXG;
    public static AdbFileMode S_IRWXU;
    public static AdbFileMode S_IRWXO;
    public static AdbFileMode ACCESSPERMS;
    public static AdbFileMode ALLPERMS;
    public static AdbFileMode DEFFILEMODE;
    public static AdbFileMode S_IFMT;
    public static AdbFileMode S_IFDIR;
    public static AdbFileMode S_IFCHR;
    public static AdbFileMode S_IFBLK;
    public static AdbFileMode S_IFREG;
    public static AdbFileMode S_IFIFO;
    public static AdbFileMode S_IFLNK;
    public static AdbFileMode S_IFSOCK;
}
public class Mono.AndroidTools.Adb.AdbProgressReporter : MulticastDelegate {
    public AdbProgressReporter(object object, IntPtr method);
    public virtual void Invoke(long copiedBytes, long totalBytes);
    public virtual IAsyncResult BeginInvoke(long copiedBytes, long totalBytes, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Mono.AndroidTools.Adb.AdbSyncAction : Enum {
    public int value__;
    public static AdbSyncAction Copy;
    public static AdbSyncAction CopyIfNewer;
    public static AdbSyncAction Delete;
    public static AdbSyncAction Ignore;
}
public class Mono.AndroidTools.Adb.AdbSyncClient : object {
    private static int ID_STAT;
    private static int ID_LIST;
    private static int ID_ULNK;
    private static int ID_SEND;
    private static int ID_RECV;
    private static int ID_DENT;
    private static int ID_DONE;
    private static int ID_DATA;
    private static int ID_OKAY;
    private static int ID_FAIL;
    private static int ID_QUIT;
    private static int REQ_OFFSET_ID;
    private static int REQ_OFFSET_NAMELEN;
    private static int REQ_SIZE;
    private static int STAT_OFFSET_ID;
    private static int STAT_OFFSET_MODE;
    private static int STAT_OFFSET_SIZE;
    private static int STAT_OFFSET_TIME;
    private static int STAT_SIZE;
    private static int DENT_OFFSET_ID;
    private static int DENT_OFFSET_MODE;
    private static int DENT_OFFSET_SIZE;
    private static int DENT_OFFSET_TIME;
    private static int DENT_OFFSET_NAMELEN;
    private static int DENT_SIZE;
    private static int DATA_OFFSET_ID;
    private static int DATA_OFFSET_SIZE;
    private static int DATA_SIZE;
    private static int STATUS_OFFSET_ID;
    private static int STATUS_OFFSET_MSGLEN;
    private static int STATUS_SIZE;
    private static int SYNC_DATA_MAX;
    private static int MAX_PATH;
    private Byte[] buf;
    private AdbClient client;
    private AdbClient shellClient;
    private string deviceID;
    private IPAddress address;
    private int port;
    private bool disposed;
    private CancellationToken token;
    public AdbSyncClient(IPEndPoint endpoint);
    public AdbSyncClient(IPAddress address, int port);
    private AdbClient CreateClient();
    public void Dispose(CancellationToken token);
    public sealed virtual void Dispose();
    public IAsyncResult BeginConnectSyncSession(string deviceID, AsyncCallback callback, object state);
    private void ConnectSyncSession_OnGotTransport(IAsyncResult result);
    private void ConnectSyncSession_OnWroteCommand(IAsyncResult result);
    public void EndConnectSyncSession(IAsyncResult result);
    public void ConnectSyncSession(string deviceID);
    public IAsyncResult BeginListFiles(string remoteDirectoryPath, Action`1<AdbFileInfo> listCallback, AsyncCallback completionCallback, object state);
    private static void ListFiles_OnWroteReq(IAsyncResult result);
    private static void ListFiles_OnReadValue(IAsyncResult ar);
    private static void ListFiles_OnReadName(IAsyncResult ar);
    public void EndListFiles(IAsyncResult result);
    public void ListFiles(string remoteDirectoryPath, Action`1<AdbFileInfo> listCallback);
    public IAsyncResult BeginListFilesRecursive(string remoteDirectoryPath, Action`1<AdbFileInfo> listCallback, AsyncCallback callback, object state);
    private void ListFilesRecursive_OnListed(IAsyncResult result);
    public void EndListFilesRecursive(IAsyncResult result);
    public void ListFilesRecursive(string remoteDirectoryPath, Action`1<AdbFileInfo> listCallback);
    public IAsyncResult BeginStat(string remoteFilePath, AsyncCallback callback, object state);
    private static void Stat_OnWroteReq(IAsyncResult ar);
    private static void Stat_OnRead(IAsyncResult ar);
    public AdbFileInfo EndStat(IAsyncResult result);
    public AdbFileInfo Stat(string remoteFilePath);
    public IAsyncResult BeginWriteFile(string remotePath, AdbFileMode mode, Nullable`1<UInt32> filetime, ReadCallback getChunk, AsyncCallback callback, object state);
    public IAsyncResult BeginWriteFile(string remotePath, AdbFileMode mode, Nullable`1<UInt32> filetime, ReadCallback getChunk, Action`1<long> progressTotalBytes, AsyncCallback callback, object state);
    private static void FileWrite_OnWroteReq(IAsyncResult result);
    private static void FileWrite_WriteChunk(WriteFileAsyncResult r);
    private static void FileWrite_OnWroteChunk(IAsyncResult result);
    private static void FileWrite_OnWroteDone(IAsyncResult result);
    private static void FileWrite_OnReadStatus(IAsyncResult ar);
    public long EndWriteFile(IAsyncResult result);
    public long WriteFile(string remotePath, AdbFileMode mode, Nullable`1<UInt32> filetime, ReadCallback getChunk, Action`1<long> progressTotalBytes);
    public IAsyncResult BeginPush(string localFilePath, string remoteFilePath, AsyncCallback callback, object state);
    public IAsyncResult BeginPush(string localFilePath, string remoteFilePath, AdbProgressReporter notifyProgress, AsyncCallback callback, object state);
    public IAsyncResult BeginPush(Stream contents, string remoteFilePath, AdbProgressReporter notifyProgress, AsyncCallback callback, object state);
    private void Push_OnWroteFile(IAsyncResult result);
    public long EndPush(IAsyncResult result);
    public long Push(string localFilePath, string remoteFilePath, AdbProgressReporter notifyProgress);
    [ObsoleteAttribute("Use another overload with PushOptions argument.")]
public IAsyncResult BeginPushDirectory(string localDirectoryPath, string remoteDirectoryPath, bool checkTimestamps, bool removeUnknown, bool dryRun, Action`1<AdbSyncNotification> notifySync, Action`1<string> notifyPhase, AdbProgressReporter notifyProgress, AsyncCallback callback, object state);
    public IAsyncResult BeginPushDirectory(PushOptions options, AsyncCallback callback, object state);
    public long EndPushDirectory(IAsyncResult result);
    [ObsoleteAttribute("Use another overload with 'removeBeforeCopy' parameter.")]
public long PushDirectory(string localDirectoryPath, string remoteDirectoryPath, bool checkTimestamps, bool removeUnknown, bool dryRun, Action`1<AdbSyncNotification> notifySync, Action`1<string> notifyPhase, AdbProgressReporter notifyProgress);
    public long PushDirectory(PushOptions options);
    private void PushDirectory_GetArgs(PushOptions options, AdbSyncDirectory& dir, String& remoteParent);
    [ObsoleteAttribute("Use another overload with 'removeBeforeCopy' parameter.")]
public IAsyncResult BeginPushSyncItems(AdbSyncDirectory targetDir, string remoteParentDir, bool dryRun, Action`1<AdbSyncNotification> notifySync, Action`1<string> notifyPhase, AdbProgressReporter notifyProgress, AsyncCallback callback, object state);
    public IAsyncResult BeginPushSyncItems(AdbSyncDirectory targetDir, string remoteParentDir, PushOptions options, AsyncCallback callback, object state);
    private void PushSyncItems_OnStat(IAsyncResult result);
    private void PushSyncItems_OnGotList(IAsyncResult result);
    private void PushSyncItems_BeginOperations(PushSyncItemsAsyncResult r);
    private void PushSyncItems_OnRemovedFiles(IAsyncResult result);
    private void PushSyncItems_CreateDirectories(PushSyncItemsAsyncResult r);
    private void PushSyncItems_OnCreatedDirectories(IAsyncResult result);
    private void PushSyncItems_StartCopyFiles(PushSyncItemsAsyncResult r);
    private void PushSyncItems_PushNextFile(PushSyncItemsAsyncResult r);
    private void PushSyncItems_OnPushedFile(IAsyncResult result);
    public long EndPushSyncItems(IAsyncResult result);
    [ObsoleteAttribute("Use another overload with PushOptions argument.")]
public long PushSyncItems(AdbSyncDirectory targetDir, string remoteParentDir, bool dryRun, Action`1<AdbSyncNotification> notifySync, Action`1<string> notifyPhase, AdbProgressReporter notifyProgress);
    public long PushSyncItems(AdbSyncDirectory targetDir, string remoteParentDir, PushOptions options);
    public IAsyncResult BeginReadFile(string remotePath, WriteCallback gotChunk, AsyncCallback callback, object state);
    public IAsyncResult BeginReadFile(string remotePath, WriteCallback gotChunk, AdbProgressReporter notifyProgress, AsyncCallback callback, object state);
    private void ReadFile_GotStat(IAsyncResult result);
    private static void ReadFile_WroteReq(IAsyncResult result);
    private static void ReadFile_ReadPacketHeader(IAsyncResult ar);
    private static void ReadFile_GotPacketChunk(IAsyncResult result);
    public long EndReadFile(IAsyncResult result);
    public long ReadFile(string remotePath, WriteCallback gotChunk, AdbProgressReporter notifyProgress);
    private int GetCappedMemorySize(int requestedCap);
    private static int CheckRemoteSizeFitsCap(long remoteSize, int cap);
    public IAsyncResult BeginReadFileToMemory(string remotePath, AsyncCallback callback, object state);
    public IAsyncResult BeginReadFileToMemory(string remotePath, int memoryStreamLengthCap, AsyncCallback callback, object state);
    public IAsyncResult BeginReadFileToMemory(string remotePath, int memoryStreamLengthCap, AdbProgressReporter notifyProgress, AsyncCallback callback, object state);
    private void ReadFileToMemory_GotStat(IAsyncResult result);
    private static void ReadFileToMemory_WroteReq(IAsyncResult result);
    private static void ReadFileToMemory_ReadPacketHeader(IAsyncResult ar);
    private static void ReadFileToMemory_GotPacketChunk(IAsyncResult result);
    public MemoryStream EndReadFileToMemory(IAsyncResult result);
    public MemoryStream ReadFileToMemory(string remotePath, int memoryStreamLengthCap, AdbProgressReporter notifyProgress);
    public IAsyncResult BeginPull(string remoteFilePath, string localFilePath, AsyncCallback callback, object state);
    public IAsyncResult BeginPull(string remoteFilePath, string localFilePath, AdbProgressReporter notifyProgress, AsyncCallback callback, object state);
    private void Pull_OnReadFile(IAsyncResult result);
    public long EndPull(IAsyncResult result);
    public long Pull(string remoteFilePath, string localFilePath, AdbProgressReporter notifyProgress);
    private IAsyncResult BeginWriteReq(int id, string remotePath, AsyncCallback callback, object state);
    private void WriteReq_OnWroteHeader(IAsyncResult result);
    private void WriteReq_OnWrotePath(IAsyncResult result);
    private static void EndWriteReq(IAsyncResult result);
    private void WriteReq(int id, string remotePath);
    private static void BeginReadFailMessage(ReadFullAsyncResult res);
    private static void ReadFailMessage_OnRead(IAsyncResult ar);
    private void EndReadFailMessage(IAsyncResult result);
    private void ReadFailMessage(Byte[] buffer, int packetRead);
    private IAsyncResult BeginCreateDirectories(IEnumerable`1<AdbSyncNotification> items, bool dryRun, Action`1<AdbSyncNotification> notifySync, AsyncCallback callback, object state);
    private void CreateDirectories_CreateNextItem(CreateDirectoriesAsyncResult r);
    private void CreateDirectories_OnCreatedItem(IAsyncResult result);
    private void EndCreateDirectories(IAsyncResult result);
    private void CreateDirectories(IEnumerable`1<AdbSyncNotification> items, bool dryRun, Action`1<AdbSyncNotification> notifySync);
    private void CreateDirectories_ComputeRedundant(IEnumerable`1<AdbSyncNotification> items);
    private IAsyncResult BeginRemoveItems(IEnumerable`1<AdbSyncNotification> items, bool dryRun, Action`1<AdbSyncNotification> notifySync, AsyncCallback callback, object state);
    private void RemoveItems_RemoveNextItem(RemoveItemsAsyncResult r);
    private void RemoveItems_OnRemovedItem(IAsyncResult result);
    private void EndRemoveItems(IAsyncResult result);
    private void RemoveItems(IEnumerable`1<AdbSyncNotification> items, bool dryRun, Action`1<AdbSyncNotification> notifySync);
    private void RemoveItems_ComputeRedundant(IEnumerable`1<AdbSyncNotification> itemsToRemove);
    private IAsyncResult BeginRunShellCommand(string command, AsyncCallback callback, object state);
    private void RunShellCommand_OnGotTransport(IAsyncResult result);
    private void RunShellCommand_OnWroteCommand(IAsyncResult result);
    private void RunShellCommand_OnGotText(IAsyncResult result);
    private string EndRunShellCommand(IAsyncResult result);
    private string RunShellCommand(string command);
    private static string EnsureTrailingSlash(string directoryPath);
    private static void CheckPacketId(int received, int expected);
    private void AggregateResult_OnReadFail(IAsyncResult result);
}
public class Mono.AndroidTools.Adb.AdbSyncDirectory : AdbSyncItem {
    private Dictionary`2<string, AdbSyncItem> entries;
    [CompilerGeneratedAttribute]
private bool <RemoveUnknownEntries>k__BackingField;
    public bool RemoveUnknownEntries { get; public set; }
    public IEnumerable`1<AdbSyncItem> Entries { get; }
    public AdbSyncDirectory(string name, AdbSyncAction action, bool removeUnknown, AdbSyncItem[] entries);
    public AdbSyncDirectory(string name, AdbSyncAction action, bool removeUnknown, IEnumerable`1<AdbSyncItem> entries);
    [CompilerGeneratedAttribute]
public bool get_RemoveUnknownEntries();
    [CompilerGeneratedAttribute]
public void set_RemoveUnknownEntries(bool value);
    public void AddRange(IEnumerable`1<AdbSyncItem> entries);
    public void Add(AdbSyncItem entry);
    public IEnumerable`1<AdbSyncItem> get_Entries();
    public sealed virtual IEnumerator`1<AdbSyncItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public AdbSyncItem GetNearestDescendant(string subpath);
    public static AdbSyncDirectory FromLocalDirectory(string directory, string remoteName, AdbSyncAction fileAction, bool removeUnknown, Func`2<FileInfo, bool> filter);
    public virtual string ToString();
}
public class Mono.AndroidTools.Adb.AdbSyncFile : AdbSyncItem {
    [CompilerGeneratedAttribute]
private string <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SourceFileSize>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <SourceWriteTimeUtc>k__BackingField;
    public string SourceFile { get; private set; }
    public long SourceFileSize { get; private set; }
    public DateTime SourceWriteTimeUtc { get; private set; }
    public AdbSyncFile(string sourceFile, string remoteName, AdbSyncAction action);
    public AdbSyncFile(FileInfo sourceFile, string remoteName, AdbSyncAction action);
    public AdbSyncFile(string sourceFile, string remoteName, DateTime sourceWriteTimeUtc, long size, AdbSyncAction action);
    [CompilerGeneratedAttribute]
public string get_SourceFile();
    [CompilerGeneratedAttribute]
private void set_SourceFile(string value);
    [CompilerGeneratedAttribute]
public long get_SourceFileSize();
    [CompilerGeneratedAttribute]
private void set_SourceFileSize(long value);
    [CompilerGeneratedAttribute]
public DateTime get_SourceWriteTimeUtc();
    [CompilerGeneratedAttribute]
private void set_SourceWriteTimeUtc(DateTime value);
    public static AdbSyncFile Copy(string sourceFile, string remoteName);
    public static AdbSyncFile CopyIfNewer(string sourceFile, string remoteName);
}
public class Mono.AndroidTools.Adb.AdbSyncItem : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private AdbSyncAction <Action>k__BackingField;
    public string Name { get; private set; }
    public AdbSyncAction Action { get; private set; }
    internal AdbSyncItem(string name, AdbSyncAction action);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public AdbSyncAction get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(AdbSyncAction value);
    [IteratorStateMachineAttribute("Mono.AndroidTools.Adb.AdbSyncItem/<FromLocalDirectoryContents>d__9")]
public static IEnumerable`1<AdbSyncItem> FromLocalDirectoryContents(string localDirectoryPath, AdbSyncAction fileAction, bool removeUnknown, Func`2<FileInfo, bool> filter);
    public static AdbSyncItem Ignore(string name);
    public static AdbSyncItem Delete(string name);
}
public enum Mono.AndroidTools.Adb.AdbSyncKind : Enum {
    public int value__;
    public static AdbSyncKind CopyFile;
    public static AdbSyncKind SkipCopyFile;
    public static AdbSyncKind CreateDirectory;
    public static AdbSyncKind SkipCreateDirectory;
    public static AdbSyncKind RemoveUnknownFile;
    public static AdbSyncKind RemoveUnknownDirectory;
    public static AdbSyncKind RemoveFile;
    public static AdbSyncKind RemoveDirectory;
    public static AdbSyncKind PreserveFile;
    public static AdbSyncKind PreserveDirectory;
}
public class Mono.AndroidTools.Adb.AdbSyncNotification : object {
    [CompilerGeneratedAttribute]
private AdbSyncKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemotePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalPath>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Redundant>k__BackingField;
    public AdbSyncKind Kind { get; private set; }
    public string RemotePath { get; private set; }
    public string LocalPath { get; private set; }
    public long Size { get; private set; }
    internal bool IsRemove { get; }
    internal bool IsCopyFile { get; }
    internal bool IsCreateDirectory { get; }
    internal bool Redundant { get; internal set; }
    public AdbSyncNotification(AdbSyncKind kind, string remotePath, string localPath, long size);
    [CompilerGeneratedAttribute]
public AdbSyncKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(AdbSyncKind value);
    [CompilerGeneratedAttribute]
public string get_RemotePath();
    [CompilerGeneratedAttribute]
private void set_RemotePath(string value);
    [CompilerGeneratedAttribute]
public string get_LocalPath();
    [CompilerGeneratedAttribute]
private void set_LocalPath(string value);
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(long value);
    public string GetMessage();
    internal bool get_IsRemove();
    internal bool get_IsCopyFile();
    internal bool get_IsCreateDirectory();
    [CompilerGeneratedAttribute]
internal bool get_Redundant();
    [CompilerGeneratedAttribute]
internal void set_Redundant(bool value);
}
internal class Mono.AndroidTools.Adb.AdbSyncTargetContext : object {
    [CompilerGeneratedAttribute]
private string <RemoteParentDir>k__BackingField;
    [CompilerGeneratedAttribute]
private AdbSyncDirectory <TargetDir>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AdbSyncNotification> <Operations>k__BackingField;
    public string RemoteParentDir { get; private set; }
    public AdbSyncDirectory TargetDir { get; private set; }
    public List`1<AdbSyncNotification> Operations { get; private set; }
    public AdbSyncTargetContext(AdbSyncDirectory targetDir, string remoteParentDir);
    [CompilerGeneratedAttribute]
public string get_RemoteParentDir();
    [CompilerGeneratedAttribute]
private void set_RemoteParentDir(string value);
    [CompilerGeneratedAttribute]
public AdbSyncDirectory get_TargetDir();
    [CompilerGeneratedAttribute]
private void set_TargetDir(AdbSyncDirectory value);
    [CompilerGeneratedAttribute]
public List`1<AdbSyncNotification> get_Operations();
    [CompilerGeneratedAttribute]
private void set_Operations(List`1<AdbSyncNotification> value);
    public void ComputeRequiredOperations(List`1<AdbFileInfo> existingFiles, bool removeBeforeCopy);
    [IteratorStateMachineAttribute("Mono.AndroidTools.Adb.AdbSyncTargetContext/<GetEntriesWithPaths>d__14")]
private IEnumerable`1<KeyValuePair`2<string, AdbSyncItem>> GetEntriesWithPaths();
    [IteratorStateMachineAttribute("Mono.AndroidTools.Adb.AdbSyncTargetContext/<GetEntriesWithPaths>d__15")]
private static IEnumerable`1<KeyValuePair`2<string, AdbSyncItem>> GetEntriesWithPaths(AdbSyncDirectory dir, string fullDirName);
}
public class Mono.AndroidTools.Adb.DeviceConnection : object {
    private static UInt32 A_SYNC;
    private static UInt32 A_CNXN;
    private static UInt32 A_AUTH;
    private static UInt32 A_OPEN;
    private static UInt32 A_OKAY;
    private static UInt32 A_CLSE;
    private static UInt32 A_WRTE;
    private static UInt32 A_VERSION;
    private static int MAX_PAYLOAD;
    private static int HEADER_SIZE;
    private int targetMaxPayload;
    private Byte[] writeBuffer;
    private Stream stream;
    private bool disposed;
    private string ident;
    private UInt32 nextLocalID;
    private Exception readError;
    private Dictionary`2<UInt32, ServiceStream> streams;
    public void Connect(Stream stream);
    public sealed virtual void Dispose();
    private void CheckError();
    public Stream OpenStream(string serviceName);
    public Stream OpenTcp(short port);
    public Stream OpenLocal(string name);
    public Stream OpenLocalReserved(string name);
    public Stream OpenLocalAbstract(string name);
    public Stream OpenLocalFileSystem(string name);
    public Stream OpenDev(string name);
    public Stream OpenFrameBuffer();
    public Stream OpenJdwp(int pid);
    public Stream OpenShell(string command);
    public Stream OpenSync();
    public Stream OpenRemount();
    public Stream OpenReboot(string arg);
    public Stream OpenRoot();
    public Stream OpenBackup(string arg);
    public Stream OpenRestore();
    public Stream OpenTcpip(short port);
    public Stream OpenUsb();
    public Stream OpenReverse(string cookie);
    private void Close(ServiceStream stream);
    private void ReadLoop();
    private void HandleClose(UInt32 localID, UInt32 remoteID);
    private void HandleOkay(UInt32 localID, UInt32 remoteID);
    private void HandleWrite(UInt32 localID, Byte[] payload);
    private void SetReady(ServiceStream s);
    private static void CreateMessage(Byte[] buf, UInt32 command, UInt32 arg0, UInt32 arg1, int length, UInt32 checksum);
    private static void ReadMessage(Byte[] buf, UInt32& command, UInt32& arg0, UInt32& arg1, Int32& length, UInt32& checksum);
    private static UInt32 Checksum(Byte[] buf, int offset, int length);
    private static UInt32 BytesToUInt(Byte[] buf, int offset);
    private static void UIntToBytes(UInt32 val, Byte[] buf, int pos);
}
public abstract class Mono.AndroidTools.AdbCommand : object {
    protected AdbCommand(AdbCommand copyCommand);
    protected abstract virtual void AppendTo(ProcessArgumentBuilder pb);
    public virtual string ToString();
}
public class Mono.AndroidTools.AdbException : Exception {
    public AdbException(string message);
    public AdbException(string message, Exception innerException);
    public AdbException(Exception innerException);
}
[FlagsAttribute]
public enum Mono.AndroidTools.AdbInstallFlags : Enum {
    public int value__;
    public static AdbInstallFlags None;
    public static AdbInstallFlags Reinstall;
    public static AdbInstallFlags External;
    public static AdbInstallFlags AllowDowngrade;
    public static AdbInstallFlags TestOnly;
}
public class Mono.AndroidTools.AdbServer : object {
    private static AdbServer instance;
    private IPAddress address;
    private int port;
    private static string SUPPORTED_PROTOCOL;
    public static AdbServer Default { get; }
    public AdbServer(IPAddress address, int port);
    private static AdbServer();
    public static AdbServer get_Default();
    internal AdbClient CreateClient(CancellationToken cancellationToken);
    internal AdbSyncClient CreateSyncClient(CancellationToken cancellationToken);
    internal Task`1<string> RunCommandWithMessage(string command, CancellationToken cancellationToken);
    internal Task RunCommandWithStatus(string command, CancellationToken cancellationToken);
    public Task`1<string> GetProtocolVersion();
    public Task`1<string> GetProtocolVersion(CancellationToken cancellationToken);
    public Task CheckProtocolVersion();
    public Task CheckProtocolVersion(CancellationToken cancellationToken);
    public Task`1<List`1<AndroidDevice>> GetDevices();
    [AsyncStateMachineAttribute("Mono.AndroidTools.AdbServer/<GetDevices>d__17")]
public Task`1<List`1<AndroidDevice>> GetDevices(CancellationToken cancellationToken);
    public Task KillServer();
    public Task TrackDevices(Action`1<List`1<AndroidDevice>> action);
    public Task TrackDevices(Action`1<List`1<AndroidDevice>> action, CancellationToken cancellationToken);
    public Task ForwardPort(AndroidDevice device, int localPort, int remotePort);
    public Task ForwardPort(AndroidDevice device, int localPort, int remotePort, CancellationToken cancellationToken);
    public Task ForwardPort(AndroidDevice device, string localProtocol, int localPort, string remoteProtocol, int remotePort, CancellationToken cancellationToken);
    public Task KillForward(AndroidDevice device, string localProtocol, int localPort, CancellationToken cancellationToken);
}
public class Mono.AndroidTools.AmBroadcastCommand : AmIntentCommand {
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    public string User { get; public set; }
    public AmBroadcastCommand(AmBroadcastCommand copyCommand);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    protected virtual void AppendTo(ProcessArgumentBuilder pb);
}
public abstract class Mono.AndroidTools.AmIntentCommand : AdbCommand {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataUri>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Categories>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Extras>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Component>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Intent>k__BackingField;
    [CompilerGeneratedAttribute]
private IntentFlag <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Selector>k__BackingField;
    public string Action { get; public set; }
    public string DataUri { get; public set; }
    public ICollection`1<string> Categories { get; public set; }
    public string MimeType { get; public set; }
    public IDictionary`2<string, object> Extras { get; public set; }
    public string Component { get; public set; }
    public string PackageName { get; public set; }
    public string Intent { get; public set; }
    public IntentFlag Flags { get; public set; }
    public bool Selector { get; public set; }
    protected AmIntentCommand(AmIntentCommand copyCommand);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
    [CompilerGeneratedAttribute]
public string get_DataUri();
    [CompilerGeneratedAttribute]
public void set_DataUri(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Categories();
    [CompilerGeneratedAttribute]
public void set_Categories(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public string get_MimeType();
    [CompilerGeneratedAttribute]
public void set_MimeType(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Extras();
    [CompilerGeneratedAttribute]
public void set_Extras(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public string get_Component();
    [CompilerGeneratedAttribute]
public void set_Component(string value);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    [CompilerGeneratedAttribute]
public string get_Intent();
    [CompilerGeneratedAttribute]
public void set_Intent(string value);
    [CompilerGeneratedAttribute]
public IntentFlag get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(IntentFlag value);
    [CompilerGeneratedAttribute]
public bool get_Selector();
    [CompilerGeneratedAttribute]
public void set_Selector(bool value);
    protected virtual void AppendTo(ProcessArgumentBuilder pb);
    private void AppendIntArray(ProcessArgumentBuilder pb, string key, Int32[] args);
    private void AppendLongArray(ProcessArgumentBuilder pb, string key, Int64[] args);
    private void AppendFloatArray(ProcessArgumentBuilder pb, string key, Single[] args);
    private void AppendFloatArray(ProcessArgumentBuilder pb, string key, ExtraFloat[] args);
    private void AppendFlagsTo(ProcessArgumentBuilder pb);
}
public class Mono.AndroidTools.AmStartCommand : AmIntentCommand {
    [CompilerGeneratedAttribute]
private bool <EnableDebugging>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Wait>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProfilerOutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Repeat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceStop>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableOpenGLTracing>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Activity>k__BackingField;
    public bool EnableDebugging { get; public set; }
    public bool Wait { get; public set; }
    public string ProfilerOutputPath { get; public set; }
    public int Repeat { get; public set; }
    public bool ForceStop { get; public set; }
    public bool EnableOpenGLTracing { get; public set; }
    public string User { get; public set; }
    public string Activity { get; public set; }
    public AmStartCommand(string package, string activity);
    public AmStartCommand(AmStartCommand copyCommand);
    [CompilerGeneratedAttribute]
public bool get_EnableDebugging();
    [CompilerGeneratedAttribute]
public void set_EnableDebugging(bool value);
    [CompilerGeneratedAttribute]
public bool get_Wait();
    [CompilerGeneratedAttribute]
public void set_Wait(bool value);
    [CompilerGeneratedAttribute]
public string get_ProfilerOutputPath();
    [CompilerGeneratedAttribute]
public void set_ProfilerOutputPath(string value);
    [CompilerGeneratedAttribute]
public int get_Repeat();
    [CompilerGeneratedAttribute]
public void set_Repeat(int value);
    [CompilerGeneratedAttribute]
public bool get_ForceStop();
    [CompilerGeneratedAttribute]
public void set_ForceStop(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableOpenGLTracing();
    [CompilerGeneratedAttribute]
public void set_EnableOpenGLTracing(bool value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    [CompilerGeneratedAttribute]
public string get_Activity();
    [CompilerGeneratedAttribute]
public void set_Activity(string value);
    protected virtual void AppendTo(ProcessArgumentBuilder pb);
}
public class Mono.AndroidTools.AmStartServiceCommand : AmIntentCommand {
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    public string User { get; public set; }
    public AmStartServiceCommand(string packageName, string serviceName);
    public AmStartServiceCommand(AmStartCommand copyCommand);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    protected virtual void AppendTo(ProcessArgumentBuilder pb);
}
public static class Mono.AndroidTools.AnalyticsService : object {
    private static ICustomAnalytics Analytics;
    public static bool IsRegistered { get; }
    public static bool get_IsRegistered();
    public static void SetCustomAnalytics(ICustomAnalytics customAnalytics);
    public static void ReportSdkVersions(Dictionary`2<string, object> values);
    [ObsoleteAttribute("This method does nothing. The telemetry API is changing and for the time being we are only sending the minimum of events that need to be processed server side.")]
public static void Track(string trackId, Dictionary`2<string, string> table);
    [ObsoleteAttribute("This method does nothing. The telemetry API is changing and for the time being we are only sending the minimum of events that need to be processed server side.")]
public static void Track(string trackId, string key, string value);
    [ObsoleteAttribute("This method does nothing. The telemetry API is changing and for the time being we are only sending the minimum of events that need to be processed server side.")]
public static IDisposable TrackTime(string trackId, Dictionary`2<string, string> table);
    [ObsoleteAttribute("This method does nothing. The telemetry API is changing and for the time being we are only sending the minimum of events that need to be processed server side.")]
public static IDisposable TrackTime(string trackId, string key, string value);
    [ObsoleteAttribute("This method does nothing. The telemetry API is changing and for the time being we are only sending the minimum of events that need to be processed server side.")]
public static void IdentifyTrait(string trait, string value);
}
public class Mono.AndroidTools.AndroidDevice : object {
    private AdbServer adb;
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LongOutput>k__BackingField;
    private AndroidDeviceProperties properties;
    [CompilerGeneratedAttribute]
private IPEndPoint <TcpEndpoint>k__BackingField;
    private static Dictionary`2<string, string> nameFixes;
    private static Dictionary`2<string, string> manufacturerNameFixes;
    [CompilerGeneratedAttribute]
private Action`1<AndroidDevice> PropertiesChanged;
    private static string libDvmRelocationWarning;
    private static string DefaultPackagesFile;
    private static string BackupPackagesFile;
    public string ID { get; private set; }
    public string State { get; private set; }
    public string LongOutput { get; public set; }
    public static AndroidDevice Any { get; }
    public static AndroidDevice Usb { get; }
    public static AndroidDevice Local { get; }
    public IPEndPoint TcpEndpoint { get; private set; }
    public bool IsPlayerEmulator { get; }
    public bool IsGoogleEmulator { get; }
    public bool IsEmulator { get; }
    public bool IsTcpDevice { get; }
    public string AvdName { get; }
    public string XapName { get; }
    public int BuildVersionSdk { get; }
    public bool IsOnline { get; }
    public AndroidDeviceProperties Properties { get; }
    public AndroidDevice(string id, string state, AdbServer adb);
    private static AndroidDevice();
    private static IPEndPoint TryGetTcpDeviceEndpoint(string deviceID);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ID();
    [CompilerGeneratedAttribute]
private void set_ID(string value);
    [CompilerGeneratedAttribute]
public string get_State();
    [CompilerGeneratedAttribute]
private void set_State(string value);
    [CompilerGeneratedAttribute]
public string get_LongOutput();
    [CompilerGeneratedAttribute]
public void set_LongOutput(string value);
    public static AndroidDevice get_Any();
    public static AndroidDevice get_Usb();
    public static AndroidDevice get_Local();
    [CompilerGeneratedAttribute]
public IPEndPoint get_TcpEndpoint();
    [CompilerGeneratedAttribute]
private void set_TcpEndpoint(IPEndPoint value);
    public bool get_IsPlayerEmulator();
    public bool get_IsGoogleEmulator();
    public bool get_IsEmulator();
    public bool get_IsTcpDevice();
    public int GetEmulatorConsolePort();
    public string get_AvdName();
    public string get_XapName();
    public int get_BuildVersionSdk();
    public bool get_IsOnline();
    public string GetDisplayName();
    public sealed virtual AndroidDeviceProperties get_Properties();
    [CompilerGeneratedAttribute]
public void add_PropertiesChanged(Action`1<AndroidDevice> value);
    [CompilerGeneratedAttribute]
public void remove_PropertiesChanged(Action`1<AndroidDevice> value);
    internal void SetProperties(Dictionary`2<string, string> values);
    [AsyncStateMachineAttribute("Mono.AndroidTools.AndroidDevice/<RefreshProperties>d__52")]
public Task RefreshProperties(CancellationToken token);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool CanRunPackageArchitecture(string archs);
    public bool CanRunPackageArchitecture(String[] archs);
    public string SupportedArchitecturesFormatted();
    private Task ConnectClientTransport(CancellationToken cancellationToken, AdbClient& client);
    private Task ConnectSyncClient(CancellationToken cancellationToken, AdbSyncClient& client);
    public Task`1<string> RunShellCommand(String[] commands);
    public Task`1<string> RunShellCommand(CancellationToken token, String[] commands);
    public Task`1<string> RunShellCommand(string command, CancellationToken cancellationToken);
    private static string StripLibDvmRelocationWarning(string s);
    public Task RunShellCommand(string command, Action`1<string> output, CancellationToken cancellationToken);
    public Task`1<List`1<AndroidInstalledPackage>> GetPackages();
    public Task`1<List`1<AndroidInstalledPackage>> GetPackages(CancellationToken cancellationToken);
    public Task`1<List`1<AndroidInstalledPackage>> GetPackages(bool requireVersions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Mono.AndroidTools.AndroidDevice/<GetPackages>d__72")]
public Task`1<List`1<AndroidInstalledPackage>> GetPackages(PmListPackagesCommand pmListPackagesCommand, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Mono.AndroidTools.AndroidDevice/<GetPmPackages>d__73")]
private Task`1<List`1<AndroidInstalledPackage>> GetPmPackages(PmListPackagesCommand pmListPackagesCommand, CancellationToken cancellationToken);
    public Task`1<List`1<AndroidInstalledPackage>> GetPackages(string packageFile);
    public Task`1<List`1<AndroidInstalledPackage>> GetPackages(string packageFile, CancellationToken cancellationToken);
    public sealed virtual Task`1<Dictionary`2<string, string>> GetProperties();
    public Task`1<Dictionary`2<string, string>> GetProperties(CancellationToken cancellationToken);
    public Task`1<AndroidDiskInformation> GetAvailableSpace();
    public Task`1<AndroidDiskInformation> GetAvailableSpace(CancellationToken cancellationToken);
    public sealed virtual Task`1<int> GetProcessId(string packageName);
    [AsyncStateMachineAttribute("Mono.AndroidTools.AndroidDevice/<GetProcessId>d__81")]
public sealed virtual Task`1<int> GetProcessId(string packageName, CancellationToken cancellationToken);
    private Task`1<string> GetProcessId(string packageName, bool tryGrep, CancellationToken cancellationToken);
    public Task`1<string> Broadcast(string action, string category);
    public Task`1<string> Broadcast(string action, string category, CancellationToken cancellationToken);
    public Task ForceStop(string package);
    public Task ForceStop(string package, CancellationToken cancellationToken);
    public Task`1<string> Broadcast(string action, String[] categories, Dictionary`2<string, string> extras, string componentName, CancellationToken cancellationToken);
    public Task`1<string> Broadcast(string action, String[] categories, Dictionary`2<string, string> extras, string componentName, string intent, CancellationToken cancellationToken);
    public Task`1<string> Broadcast(AmBroadcastCommand broadcastCommand, CancellationToken cancellationToken);
    public Task StartActivity(string action, string package, string activity, bool wait);
    public Task StartActivity(string action, string package, string activity, bool wait, CancellationToken cancellationToken);
    public Task StartActivity(string action, String[] categories, string package, string activity, bool wait, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use ExecuteIntentCommandAsync")]
public Task StartActivity(AmStartCommand startCommand, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Mono.AndroidTools.AndroidDevice/<ExecuteIntentCommandAsync>d__94")]
public Task ExecuteIntentCommandAsync(AmIntentCommand intentCommand, Action`1<string> logWiter, CancellationToken cancellationToken);
    public Task`1<long> GetDate();
    public Task`1<long> GetDate(CancellationToken cancellationToken);
    public Task`1<String[]> ListFilesAsync(string remoteDirectory, CancellationToken cancellationToken);
    public static string GetRemoteTempApkPath(string apkFile);
    public Task InstallPackage(string remoteApkFile, bool reinstall, bool external);
    public Task InstallPackage(string remoteApkFile, bool reinstall, bool external, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use DeltaInstallPackage (DeltaInstallCommand command).")]
public Task`1<DeltaInstallResult> DeltaInstallPackage(string localApkFile, VerboseMessageReporter verboseMessageReporter, CancellationToken token);
    public Task`1<DeltaInstallResult> DeltaInstallPackage(DeltaInstallCommand command, CancellationToken token);
    public Task DeltaSwapPackageForApplyChanges(string localApkFile, VerboseMessageReporter verboseMessageReporter, CancellationToken token);
    public Task InstallPackage(string remoteApkFile, AdbInstallFlags flags, CancellationToken cancellationToken);
    public Task InstallPackage(PmInstallCommand pmInstallCommand, CancellationToken cancellationToken);
    public Task DeleteFile(string remotePath, bool ignoreError);
    [AsyncStateMachineAttribute("Mono.AndroidTools.AndroidDevice/<DeleteFile>d__107")]
public Task DeleteFile(string remotePath, bool ignoreError, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Mono.AndroidTools.AndroidDevice/<DeleteDirectory>d__108")]
public Task DeleteDirectory(string remotePath, bool ignoreError, CancellationToken cancellationToken);
    public Task WaitUntilReady();
    public Task WaitUntilReady(CancellationToken token);
    public sealed virtual Task SetProperty(string property, string value);
    public Task SetProperty(string property, string value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Mono.AndroidTools.AndroidDevice/<SetInternalPropertyFile>d__113")]
public Task`1<bool> SetInternalPropertyFile(string packageName, string property, string value, CancellationToken cancellationToken);
    public Task SetPropertyFile(string destination, string value, CancellationToken cancellationToken);
    public Task ClearLogCat();
    public Task ClearLogCat(CancellationToken cancellationToken);
    public Task`1<List`1<AndroidLogCatEntry>> GetLogCat();
    public Task`1<List`1<AndroidLogCatEntry>> GetLogCat(CancellationToken cancellationToken, String[] excludedLogTags);
    public Task RunShellCommandAsync(string command, Action`1<string> outputLine, CancellationToken cancellationToken);
    public sealed virtual Task GetLogCat(Action`1<AndroidLogCatEntry> callback, CancellationToken cancellationToken, String[] excludedLogTags);
    public Task UninstallPackage(string package, bool preserveData);
    public Task UninstallPackage(string package, bool preserveData, CancellationToken cancellationToken);
    public Task UninstallPackage(PmUninstallCommand pmUninstallCommand, CancellationToken cancellationToken);
    private Task DoUninstallPackage(AndroidTaskLog log, string command, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use another overload with 'AdbSyncClient.PushOptions' parameter.")]
public Task`1<long> PushSyncItems(AdbSyncDirectory rootItem, string remoteParentDir, bool dryRun, Action`1<AdbSyncNotification> notifySync, Action`1<string> notifyPhase, AdbProgressReporter notifyProgress, CancellationToken cancellationToken);
    public Task`1<long> PushSyncItems(AdbSyncDirectory rootItem, string remoteParentDir, PushOptions options, CancellationToken cancellationToken);
    public Task`1<long> Push(string localFilePath, string remoteFilePath, AdbProgressReporter notifyProgress, CancellationToken cancellationToken);
    public Task`1<long> Push(Stream contents, string remoteFilePath, AdbProgressReporter notifyProgress, CancellationToken cancellationToken);
    public Task`1<long> PushDirectory(string localDirectoryPath, string remoteDirectoryPath, bool checkTimestamps, bool removeUnknown, bool dryRun, bool removeBeforeCopy, Action`1<AdbSyncNotification> notifySync, Action`1<string> notifyPhase, AdbProgressReporter notifyProgress, CancellationToken cancellationToken);
    public Task`1<AdbFileInfo> GetRemoteFileInfo(string remoteFilePath, CancellationToken token);
    [AsyncStateMachineAttribute("Mono.AndroidTools.AndroidDevice/<RunShellCommandStream>d__131")]
public Task`1<string> RunShellCommandStream(String[] commands, Stream extraInput, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Mono.AndroidTools.AndroidDevice/<RunShellCommandStream>d__132")]
public Task`1<string> RunShellCommandStream(String[] commands, Func`2<Stream, Task`1<bool>> extraInput, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Mono.AndroidTools.AndroidDevice/<RunShellCommandStreamBytesOutput>d__133")]
public Task`1<Byte[]> RunShellCommandStreamBytesOutput(String[] commands, Stream extraInput, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Mono.AndroidTools.AndroidDevice/<RunShellCommandStreamBytesOutput>d__134")]
public Task`1<Byte[]> RunShellCommandStreamBytesOutput(String[] commands, Func`2<Stream, Task`1<bool>> extraInput, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Mono.AndroidTools.AndroidDevice/<StartRunShellCommand>d__135")]
private Task`1<AdbClient> StartRunShellCommand(String[] commands, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static string <StartRunShellCommand>g__JoinArguments|135_0(String[] arguments);
}
public class Mono.AndroidTools.AndroidDeviceManager : object {
    private static AndroidDevice[] noDevices;
    private object trackerLock;
    private AdbServer adbServer;
    private string adbExe;
    private IList`1<AndroidDevice> devices;
    private Tracker tracker;
    private Task killServerTask;
    [CompilerGeneratedAttribute]
private EventHandler DevicesUpdated;
    public AdbServer Server { get; }
    public bool IsTracking { get; }
    public bool IsKillingServer { get; }
    public IList`1<AndroidDevice> Devices { get; }
    public AndroidDeviceManager(string adbExe);
    private static AndroidDeviceManager();
    public AdbServer get_Server();
    public bool get_IsTracking();
    public bool get_IsKillingServer();
    public IList`1<AndroidDevice> get_Devices();
    [CompilerGeneratedAttribute]
public void add_DevicesUpdated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DevicesUpdated(EventHandler value);
    public void StartTracker();
    public void StopTracker();
    public void KillServer(Action serverKilledCallback);
    public void RestartAdbServer(Action serverKilledCallback);
    public AndroidDevice GetDevice(string id);
    public bool GetDeviceIsOnline(string id);
    public sealed virtual void Dispose();
    private void OnChanged();
    private void HandleDeviceUpdates(IList`1<AndroidDevice> list);
}
public class Mono.AndroidTools.AndroidDeviceProperties : object {
    private Dictionary`2<string, string> values;
    public bool Secure { get; }
    public bool Debuggable { get; }
    public string BuildId { get; }
    public string BuildVersionRelease { get; }
    public int BuildVersionSdk { get; }
    public string ProductModel { get; }
    public string ProductBrand { get; }
    public string ProductName { get; }
    public string ProductDevice { get; }
    public string ProductBoard { get; }
    public string ProductManufacturer { get; }
    public string ProductCpuAbi { get; }
    public string ProductCpuAbi2 { get; }
    public String[] ProductCpuAbiList { get; }
    public string ProductLocaleLanguage { get; }
    public string ProductLocaleRegion { get; }
    public string MonoLog { get; }
    internal AndroidDeviceProperties(Dictionary`2<string, string> values);
    public string Get(string key);
    internal Dictionary`2<string, string> ToDictionary();
    private int TryGetInt(string key);
    public bool get_Secure();
    public bool get_Debuggable();
    public string get_BuildId();
    public string get_BuildVersionRelease();
    public int get_BuildVersionSdk();
    public string get_ProductModel();
    public string get_ProductBrand();
    public string get_ProductName();
    public string get_ProductDevice();
    public string get_ProductBoard();
    public string get_ProductManufacturer();
    public string get_ProductCpuAbi();
    public string get_ProductCpuAbi2();
    public String[] get_ProductCpuAbiList();
    public string get_ProductLocaleLanguage();
    public string get_ProductLocaleRegion();
    public string get_MonoLog();
}
public class Mono.AndroidTools.AndroidDiskInformation : object {
    private long externalSpace;
    private long internalSpace;
    private static long Kilobyte;
    private static long Megabyte;
    private static long Gigabyte;
    private static string InternalPartition;
    private static string ExternalPartition;
    public long InternalSpace { get; }
    public long ExternalSpace { get; }
    public long get_InternalSpace();
    public long get_ExternalSpace();
    public static AndroidDiskInformation FromDfOutput(string dfOutput);
    private void ParseNewFormat(string output);
    private void ParseOldFormat(string output);
    private bool ParseToBytes(string s, Int64& value);
}
[ObsoleteAttribute("Use Mono.AndroidTools.GetAvdNameConsoleCommand")]
public class Mono.AndroidTools.AndroidEmulatorConsole : object {
    private static int codepage;
    private static int bufferSize;
    private TextReader reader;
    private TextWriter writer;
    private TcpClient client;
    public Task Connect(int port, CancellationToken token);
    public sealed virtual void Dispose();
    public Task`1<List`1<string>> RunCommand(string command, CancellationToken token);
    private static Nullable`1<bool> LineAsStatus(string line);
    public Task`1<string> GetAvdName(CancellationToken token);
}
public class Mono.AndroidTools.AndroidInstalledPackage : object {
    private int version;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApkFile>k__BackingField;
    public string Name { get; public set; }
    public string ApkFile { get; public set; }
    public string ApkFileWithoutVersion { get; }
    public int Version { get; }
    public AndroidInstalledPackage(string value);
    public AndroidInstalledPackage(string name, string apkfile);
    public AndroidInstalledPackage(string name, string apkfile, int version);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ApkFile();
    [CompilerGeneratedAttribute]
public void set_ApkFile(string value);
    public string get_ApkFileWithoutVersion();
    public int get_Version();
    public virtual string ToString();
}
public class Mono.AndroidTools.AndroidLogCatEntry : object {
    [CompilerGeneratedAttribute]
private string <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private LogEntryType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Pid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Raw>k__BackingField;
    public string Date { get; public set; }
    public LogEntryType Type { get; public set; }
    public string Tag { get; public set; }
    public int Pid { get; public set; }
    public string Message { get; public set; }
    public string Raw { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Date();
    [CompilerGeneratedAttribute]
public void set_Date(string value);
    [CompilerGeneratedAttribute]
public LogEntryType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(LogEntryType value);
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(string value);
    [CompilerGeneratedAttribute]
public int get_Pid();
    [CompilerGeneratedAttribute]
public void set_Pid(int value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Raw();
    [CompilerGeneratedAttribute]
public void set_Raw(string value);
    public virtual string ToString();
}
public static class Mono.AndroidTools.AndroidLogger : object {
    [CompilerGeneratedAttribute]
private static MessageHandler Info;
    [CompilerGeneratedAttribute]
private static MessageHandler Warning;
    [CompilerGeneratedAttribute]
private static MessageHandler Error;
    [CompilerGeneratedAttribute]
private static MessageHandler Debug;
    [CompilerGeneratedAttribute]
private static TaskLogHandler Task;
    [CompilerGeneratedAttribute]
public static void add_Info(MessageHandler value);
    [CompilerGeneratedAttribute]
public static void remove_Info(MessageHandler value);
    [CompilerGeneratedAttribute]
public static void add_Warning(MessageHandler value);
    [CompilerGeneratedAttribute]
public static void remove_Warning(MessageHandler value);
    [CompilerGeneratedAttribute]
public static void add_Error(MessageHandler value);
    [CompilerGeneratedAttribute]
public static void remove_Error(MessageHandler value);
    [CompilerGeneratedAttribute]
public static void add_Debug(MessageHandler value);
    [CompilerGeneratedAttribute]
public static void remove_Debug(MessageHandler value);
    [CompilerGeneratedAttribute]
public static void add_Task(TaskLogHandler value);
    [CompilerGeneratedAttribute]
public static void remove_Task(TaskLogHandler value);
    public static void LogInfo(string format, Object[] args);
    public static void LogInfo(string task, string format, Object[] args);
    public static void LogWarning(string format, Object[] args);
    public static void LogWarning(string task, string format, Object[] args);
    public static void LogError(string format, Object[] args);
    public static void LogError(string message, Exception ex);
    public static void LogError(string task, string format, Object[] args);
    public static void LogDebug(string format, Object[] args);
    public static void LogDebug(string task, string format, Object[] args);
    public static void LogTask(AndroidTaskLog log);
}
public class Mono.AndroidTools.AndroidPlayerDevicesWatcher : object {
    private string devicesJson;
    private object lockObj;
    private Timer fileWatcher;
    [CompilerGeneratedAttribute]
private Action`1<IList`1<IAndroidVirtualDevice>> changed;
    private DateTime lastModTime;
    private bool onDemandUpdates;
    [CompilerGeneratedAttribute]
private IList`1<IAndroidVirtualDevice> <VirtualDevices>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<string, Exception> Error;
    public IList`1<IAndroidVirtualDevice> VirtualDevices { get; private set; }
    public bool OnDemandUpdates { get; public set; }
    [CompilerGeneratedAttribute]
private void add_changed(Action`1<IList`1<IAndroidVirtualDevice>> value);
    [CompilerGeneratedAttribute]
private void remove_changed(Action`1<IList`1<IAndroidVirtualDevice>> value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IAndroidVirtualDevice> get_VirtualDevices();
    [CompilerGeneratedAttribute]
private void set_VirtualDevices(IList`1<IAndroidVirtualDevice> value);
    public sealed virtual bool get_OnDemandUpdates();
    public sealed virtual void set_OnDemandUpdates(bool value);
    public sealed virtual void CheckAndUpdate();
    public sealed virtual void add_Changed(Action`1<IList`1<IAndroidVirtualDevice>> value);
    public sealed virtual void remove_Changed(Action`1<IList`1<IAndroidVirtualDevice>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Error(Action`2<string, Exception> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Error(Action`2<string, Exception> value);
    public sealed virtual void Dispose();
    private void OnChanged();
    private void LogError(string message, Exception ex);
    private void UpdateAvds();
    private void UpdateList(DeviceEntry[] devices);
    private void HandleTimerElapsed(object sender, ElapsedEventArgs e);
}
public class Mono.AndroidTools.AndroidPlayerVirtualDevice : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MachineType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    public string Name { get; private set; }
    public string MachineType { get; private set; }
    public int ApiLevel { get; private set; }
    public string DisplayName { get; }
    public AndroidPlayerVirtualDevice(string name, string machineType, int apiLevel);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MachineType();
    [CompilerGeneratedAttribute]
private void set_MachineType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ApiLevel();
    [CompilerGeneratedAttribute]
private void set_ApiLevel(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    public sealed virtual bool SupportsApiLevel(int apiLevel);
}
public class Mono.AndroidTools.AndroidTaskLog : object {
    [CompilerGeneratedAttribute]
private string <Task>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndTime>k__BackingField;
    public string Task { get; private set; }
    public string Input { get; private set; }
    public string Output { get; private set; }
    public DateTime StartTime { get; private set; }
    public DateTime EndTime { get; private set; }
    public AndroidTaskLog(string task, string input);
    [CompilerGeneratedAttribute]
public string get_Task();
    [CompilerGeneratedAttribute]
private void set_Task(string value);
    [CompilerGeneratedAttribute]
public string get_Input();
    [CompilerGeneratedAttribute]
private void set_Input(string value);
    [CompilerGeneratedAttribute]
public string get_Output();
    [CompilerGeneratedAttribute]
private void set_Output(string value);
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
    [CompilerGeneratedAttribute]
private void set_StartTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_EndTime();
    [CompilerGeneratedAttribute]
private void set_EndTime(DateTime value);
    public AndroidTaskLog Complete(string output);
    public AndroidTaskLog Complete(object output);
}
public class Mono.AndroidTools.AndroidVirtualDevice : object {
    private string target;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    private Dictionary`2<string, string> config;
    private string displayName;
    [CompilerGeneratedAttribute]
private int <ApiLevel>k__BackingField;
    public string Name { get; public set; }
    public string Path { get; public set; }
    public string Target { get; public set; }
    public string DisplayName { get; }
    public int ApiLevel { get; public set; }
    public AndroidVirtualDevice(string name, string path, string target);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    public sealed virtual string get_Target();
    public void set_Target(string value);
    public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public sealed virtual int get_ApiLevel();
    [CompilerGeneratedAttribute]
public void set_ApiLevel(int value);
    public sealed virtual bool SupportsApiLevel(int apiLevel);
    public Dictionary`2<string, string> ReadConfig();
    public static AndroidVirtualDevice Load(string avdIni);
    public static AndroidVirtualDevice LoadFromString(string avdName, string avdConfig);
    private static Dictionary`2<string, string> ReadIni(String[] lines);
    private static Dictionary`2<string, string> ReadIniFromFile(string filename);
    private static int GetApiFromTarget(string target);
}
public class Mono.AndroidTools.AndroidVirtualDeviceManager : object {
    private object deviceListLock;
    private Dictionary`2<string, IVirtualDeviceDefinitionWatcher> watchers;
    private bool onDemandUpdates;
    [CompilerGeneratedAttribute]
private Action`1<IList`1<IAndroidVirtualDevice>> changed;
    [CompilerGeneratedAttribute]
private IList`1<IAndroidVirtualDevice> <VirtualDevices>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<string, Exception> Error;
    public bool OnDemandUpdates { get; public set; }
    public IList`1<IAndroidVirtualDevice> VirtualDevices { get; private set; }
    [CompilerGeneratedAttribute]
private void add_changed(Action`1<IList`1<IAndroidVirtualDevice>> value);
    [CompilerGeneratedAttribute]
private void remove_changed(Action`1<IList`1<IAndroidVirtualDevice>> value);
    public sealed virtual bool get_OnDemandUpdates();
    public sealed virtual void set_OnDemandUpdates(bool value);
    public sealed virtual void CheckAndUpdate();
    public bool GetIsEmulator(AndroidDevice device);
    public string GetEmulatorName(AndroidDevice device);
    private List`1<IVirtualDeviceProvider> GetDeviceProviders();
    public bool TryAddWatcher(IVirtualDeviceDefinitionWatcher watcher, string key);
    public void AddWatcher(IVirtualDeviceDefinitionWatcher watcher, string key);
    public void RemoveWatcher(string key);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IAndroidVirtualDevice> get_VirtualDevices();
    [CompilerGeneratedAttribute]
private void set_VirtualDevices(IList`1<IAndroidVirtualDevice> value);
    public sealed virtual void add_Changed(Action`1<IList`1<IAndroidVirtualDevice>> value);
    public sealed virtual void remove_Changed(Action`1<IList`1<IAndroidVirtualDevice>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Error(Action`2<string, Exception> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Error(Action`2<string, Exception> value);
    public sealed virtual void Dispose();
    private void StartWatchers();
    private void StopWatchers();
    private void WatcherError(string message, Exception ex);
    private void WatcherChanged(IList`1<IAndroidVirtualDevice> updatedList);
    private List`1<IAndroidVirtualDevice> UpdateVirtualDeviceList();
    private void OnChanged(IList`1<IAndroidVirtualDevice> list);
    private void LogError(string message, Exception ex);
    public static string GetRunArguments(RunOptions options);
}
internal class Mono.AndroidTools.ApkDeltaDeployer.AdbRemoteInstaller : object {
    public static string InstallerBinaryName;
    public static string InstallerPath;
    private static string CurrentInstallerVersion;
    private AndroidDevice device;
    private string installersBasePath;
    private VerboseMessageReporter verboseMessageReporter;
    public AdbRemoteInstaller(AndroidDevice device, string installersBasePath, VerboseMessageReporter verboseMessageReporter);
    public sealed virtual Task`1<DeltaInstallResponse> DeltaInstallAsync(DeltaInstallRequest request);
    public sealed virtual Task`1<DeltaPreinstallResponse> DeltaPreinstallAsync(DeltaPreinstallRequest request);
    public sealed virtual Task`1<SwapResponse> SwapAsync(SwapRequest request);
    public sealed virtual Task`1<DumpResponse> DumpAsync(ImmutableList`1<string> packageNames);
    [AsyncStateMachineAttribute("Mono.AndroidTools.ApkDeltaDeployer.AdbRemoteInstaller/<InvokeRequestAsync>d__11`2")]
private Task`1<TResponse> InvokeRequestAsync(String[] cmd, TRequest requestData, Func`2<InstallerResponse, TResponse> responseSelector);
    private void OutputEvents(List`1<Event> events);
    private static Stream Wrap(TRequest requestData);
    private static InstallerResponse Unwrap(Byte[] bytes);
    [AsyncStateMachineAttribute("Mono.AndroidTools.ApkDeltaDeployer.AdbRemoteInstaller/<Prepare>d__15")]
private Task Prepare();
    private static String[] GetCommandLine(String[] extraArguments);
    [CompilerGeneratedAttribute]
private string <Prepare>b__15_0(string abi);
}
[ExtensionAttribute]
internal static class Mono.AndroidTools.ApkDeltaDeployer.AndroidToolsExtensions : object {
    [AsyncStateMachineAttribute("Mono.AndroidTools.ApkDeltaDeployer.AndroidToolsExtensions/<GetAbis>d__0")]
[ExtensionAttribute]
public static Task`1<String[]> GetAbis(AndroidDevice device);
}
internal class Mono.AndroidTools.ApkDeltaDeployer.ApkInstaller : object {
    private IRemoteInstaller installer;
    private VerboseMessageReporter verboseMessageReporter;
    public ApkInstaller(IRemoteInstaller installer, VerboseMessageReporter verboseMessageReporter);
    [ObsoleteAttribute("Use DeltaInstallAsync (DeltaInstallCommand command).")]
public Task`1<DeltaInstallResult> DeltaInstallAsync(IEnumerable`1<string> apks, IEnumerable`1<string> installOptionFlags, CancellationToken token);
    [AsyncStateMachineAttribute("Mono.AndroidTools.ApkDeltaDeployer.ApkInstaller/<DeltaInstallAsync>d__4")]
public Task`1<DeltaInstallResult> DeltaInstallAsync(DeltaInstallCommand command, CancellationToken token);
    [AsyncStateMachineAttribute("Mono.AndroidTools.ApkDeltaDeployer.ApkInstaller/<DoDeltaInstallAsync>d__5")]
private Task`1<DeltaInstallResult> DoDeltaInstallAsync(IEnumerable`1<string> apks, IEnumerable`1<string> installOptionFlags, bool allowReinstall, string user, CancellationToken token);
    private static DeltaInstallStatus ConvertStatus(DeltaStatus status);
}
internal class Mono.AndroidTools.ApkDeltaDeployer.ApkParser : object {
    private static int EocdSignature;
    private static int CdSignature;
    private static Byte[] SignatureBlockMagic;
    private static ApkParser();
    public Apk ParseApk(string apkPath);
    private ApkArchiveMap Parse(MemoryMappedViewAccessor view);
    private IDictionary`2<string, ZipEntry> ComputeZipEntries(MemoryMappedViewAccessor view, ApkArchiveMap map);
    private string ComputeDigest(MemoryMappedViewAccessor view, ApkArchiveMap map);
    private ValueTuple`3<string, string, ImmutableList`1<string>> ReadManifest(string apkPath);
}
internal class Mono.AndroidTools.ApkDeltaDeployer.DDBLib.InstallReceiver : object {
    private static string SUCCESS_OUTPUT;
    private static Regex FAILURE_PATTERN;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SuccessMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuccessfullyCompleted>k__BackingField;
    public string ErrorMessage { get; private set; }
    public string SuccessMessage { get; private set; }
    public string ErrorCode { get; private set; }
    public bool SuccessfullyCompleted { get; private set; }
    private static InstallReceiver();
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public string get_SuccessMessage();
    [CompilerGeneratedAttribute]
private void set_SuccessMessage(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorCode();
    [CompilerGeneratedAttribute]
private void set_ErrorCode(string value);
    [CompilerGeneratedAttribute]
public bool get_SuccessfullyCompleted();
    [CompilerGeneratedAttribute]
private void set_SuccessfullyCompleted(bool value);
    public void ProcessNewLines(String[] lines);
    public void Done();
}
internal class Mono.AndroidTools.ApkDeltaDeployer.DeltaDeployer : object {
    public static string BaseDirectory;
    public static string InstallerDirectory;
    private IRemoteInstaller installer;
    private AndroidDevice device;
    private static ApkParser apkParser;
    private ApplicationDumper appDumper;
    private ApkPreinstaller apkPreinstaller;
    private ApkSwapper apkSwapper;
    private VerboseMessageReporter verboseMessageReporter;
    public DeltaDeployer(AndroidDevice device, IRemoteInstaller installer, VerboseMessageReporter verboseMessageReporter);
    private static DeltaDeployer();
    [AsyncStateMachineAttribute("Mono.AndroidTools.ApkDeltaDeployer.DeltaDeployer/<DeltaInstallAsync>d__10")]
public Task`1<DeltaInstallResult> DeltaInstallAsync(IEnumerable`1<string> apkFiles);
    [AsyncStateMachineAttribute("Mono.AndroidTools.ApkDeltaDeployer.DeltaDeployer/<FullSwap>d__11")]
public Task FullSwap(IEnumerable`1<string> apkFiles, bool restartActivity);
}
public class Mono.AndroidTools.ApkDeltaDeployer.DeltaInstallCommand : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Apks>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <InstallOptionFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowReinstall>k__BackingField;
    [CompilerGeneratedAttribute]
private VerboseMessageReporter <VerboseMessageReporter>k__BackingField;
    public IEnumerable`1<string> Apks { get; public set; }
    public string User { get; public set; }
    public IEnumerable`1<string> InstallOptionFlags { get; public set; }
    public bool AllowReinstall { get; public set; }
    public VerboseMessageReporter VerboseMessageReporter { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Apks();
    [CompilerGeneratedAttribute]
public void set_Apks(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_InstallOptionFlags();
    [CompilerGeneratedAttribute]
public void set_InstallOptionFlags(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_AllowReinstall();
    [CompilerGeneratedAttribute]
public void set_AllowReinstall(bool value);
    [CompilerGeneratedAttribute]
public VerboseMessageReporter get_VerboseMessageReporter();
    [CompilerGeneratedAttribute]
public void set_VerboseMessageReporter(VerboseMessageReporter value);
}
public class Mono.AndroidTools.ApkDeltaDeployer.DeltaInstallResult : object {
    [CompilerGeneratedAttribute]
private DeltaInstallStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageManagerOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorCodeInOutput>k__BackingField;
    public DeltaInstallStatus Status { get; private set; }
    public string PackageManagerOutput { get; }
    public string ErrorCodeInOutput { get; private set; }
    public DeltaInstallResult(DeltaInstallStatus status, string output);
    public DeltaInstallResult(DeltaInstallStatus status);
    [CompilerGeneratedAttribute]
public DeltaInstallStatus get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(DeltaInstallStatus value);
    [CompilerGeneratedAttribute]
public string get_PackageManagerOutput();
    [CompilerGeneratedAttribute]
public string get_ErrorCodeInOutput();
    [CompilerGeneratedAttribute]
private void set_ErrorCodeInOutput(string value);
    internal void UpdateToErrroInOutput(string errorCodeInOutput);
}
public enum Mono.AndroidTools.ApkDeltaDeployer.DeltaInstallStatus : Enum {
    public int value__;
    public static DeltaInstallStatus Success;
    public static DeltaInstallStatus Unknown;
    public static DeltaInstallStatus Error;
    public static DeltaInstallStatus Disabled;
    public static DeltaInstallStatus CannotGenerateDelta;
    public static DeltaInstallStatus ApiNotSupported;
    public static DeltaInstallStatus DumpFailed;
    public static DeltaInstallStatus PatchSizeExceeded;
    public static DeltaInstallStatus NoChanges;
    public static DeltaInstallStatus DumpUnknownPackage;
    public static DeltaInstallStatus StreamApkFailed;
    public static DeltaInstallStatus StreamApkNotSupported;
    public static DeltaInstallStatus ErrorInOutput;
}
internal class Mono.AndroidTools.ApkDeltaDeployer.Model.Apk : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Checksum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableList`1<string> <TargetPackages>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, ZipEntry> <ZipEntries>k__BackingField;
    public string Name { get; }
    public string Checksum { get; }
    public string Path { get; }
    public string PackageName { get; }
    public ImmutableList`1<string> TargetPackages { get; }
    public ImmutableDictionary`2<string, ZipEntry> ZipEntries { get; }
    public Apk(string name, string checksum, string path, string packageName, ImmutableList`1<string> targetPackages, ImmutableDictionary`2<string, ZipEntry> zipEntries);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Checksum();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public ImmutableList`1<string> get_TargetPackages();
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<string, ZipEntry> get_ZipEntries();
}
internal class Mono.AndroidTools.ApkDeltaDeployer.Model.ApplicationDump : object {
    [CompilerGeneratedAttribute]
private ImmutableList`1<Apk> <Apks>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, ImmutableArray`1<int>> <Pids>k__BackingField;
    public ImmutableList`1<Apk> Apks { get; }
    public ImmutableDictionary`2<string, ImmutableArray`1<int>> Pids { get; }
    public ApplicationDump(ImmutableList`1<Apk> apks, ImmutableDictionary`2<string, ImmutableArray`1<int>> pids);
    [CompilerGeneratedAttribute]
public ImmutableList`1<Apk> get_Apks();
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<string, ImmutableArray`1<int>> get_Pids();
}
internal interface Mono.AndroidTools.ApkDeltaDeployer.Model.IRemoteInstaller {
    public abstract virtual Task`1<DumpResponse> DumpAsync(ImmutableList`1<string> packageNames);
    public abstract virtual Task`1<SwapResponse> SwapAsync(SwapRequest request);
    public abstract virtual Task`1<DeltaPreinstallResponse> DeltaPreinstallAsync(DeltaPreinstallRequest request);
    public abstract virtual Task`1<DeltaInstallResponse> DeltaInstallAsync(DeltaInstallRequest request);
}
internal class Mono.AndroidTools.ApkDeltaDeployer.Model.ZipEntry : object {
    [CompilerGeneratedAttribute]
private long <Crc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private long <End>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PayloadStart>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExtraLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <LocalFileHeader>k__BackingField;
    public long Crc { get; }
    public string Name { get; }
    public long Start { get; }
    public long End { get; }
    public long PayloadStart { get; }
    public int ExtraLength { get; }
    public Byte[] LocalFileHeader { get; }
    public ZipEntry(long crc, string name, long start, long end, long payloadStart, int extraLength, Byte[] localFileHeader);
    [CompilerGeneratedAttribute]
public long get_Crc();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public long get_Start();
    [CompilerGeneratedAttribute]
public long get_End();
    [CompilerGeneratedAttribute]
public long get_PayloadStart();
    [CompilerGeneratedAttribute]
public int get_ExtraLength();
    [CompilerGeneratedAttribute]
public Byte[] get_LocalFileHeader();
}
internal class Mono.AndroidTools.ApkDeltaDeployer.PatchGenerator : object {
    public static Patch Generate(Apk remote, Apk local);
    private static void PartialStreamCopy(BinaryReader reader, Byte[] buffer, int offset, int length);
    private static IList`1<ValueTuple`2<long, long>> GenerateDirtyAreas(Apk remote, Apk local);
    private static long AreaSize(ValueTuple`2<long, long> area);
}
internal class Mono.AndroidTools.ApkDeltaDeployer.PatchSetGenerator : object {
    public ImmutableList`1<PatchInstruction> GenerateFromEntries(IEnumerable`1<Apk> localEntries, IEnumerable`1<Apk> remoteEntries);
    public ImmutableList`1<PatchInstruction> GenerateFromApkSets(Dictionary`2<string, Apk> remoteApks, Dictionary`2<string, Apk> localApks);
    public static ImmutableList`1<PatchInstruction> GenerateFromPairs(IEnumerable`1<ValueTuple`2<Apk, Apk>> pairs);
    private static PatchInstruction GenerateDelta(Apk remote, Apk local);
}
internal class Mono.AndroidTools.ApkDeltaDeployer.Tasks.ApkPreinstaller : object {
    private AndroidDevice device;
    private IRemoteInstaller installer;
    public ApkPreinstaller(AndroidDevice device, IRemoteInstaller installer);
    [AsyncStateMachineAttribute("Mono.AndroidTools.ApkDeltaDeployer.Tasks.ApkPreinstaller/<PreInstallAsync>d__3")]
public Task`1<string> PreInstallAsync(ApplicationDump dump, IReadOnlyList`1<Apk> localContent);
    [AsyncStateMachineAttribute("Mono.AndroidTools.ApkDeltaDeployer.Tasks.ApkPreinstaller/<DeltaPreInstallAsync>d__4")]
private Task`1<string> DeltaPreInstallAsync(IDictionary`2<string, Apk> localApks, IDictionary`2<string, Apk> remoteApks, string packageName);
    [IteratorStateMachineAttribute("Mono.AndroidTools.ApkDeltaDeployer.Tasks.ApkPreinstaller/<PairApks>d__5")]
private IEnumerable`1<ValueTuple`2<Apk, Apk>> PairApks(IDictionary`2<string, Apk> localApks, IDictionary`2<string, Apk> remoteApks);
    [AsyncStateMachineAttribute("Mono.AndroidTools.ApkDeltaDeployer.Tasks.ApkPreinstaller/<FullPreInstallAsync>d__6")]
private Task`1<string> FullPreInstallAsync(ImmutableDictionary`2<string, Apk> fullApks);
}
internal class Mono.AndroidTools.ApkDeltaDeployer.Tasks.ApkSwapper : object {
    private IRemoteInstaller installer;
    public ApkSwapper(IRemoteInstaller installer);
    [AsyncStateMachineAttribute("Mono.AndroidTools.ApkDeltaDeployer.Tasks.ApkSwapper/<Swap>d__2")]
public Task Swap(ApplicationDump dump, string sessionId, bool restartActivity);
    private SwapRequest BuildRequest(ApplicationDump dump, string sessionId, bool restartActivity);
}
internal class Mono.AndroidTools.ApkDeltaDeployer.Tasks.ApplicationDumper : object {
    private IRemoteInstaller installer;
    public ApplicationDumper(IRemoteInstaller installer);
    [AsyncStateMachineAttribute("Mono.AndroidTools.ApkDeltaDeployer.Tasks.ApplicationDumper/<DumpAsync>d__2")]
public Task`1<ApplicationDump> DumpAsync(IReadOnlyList`1<Apk> localEntries);
    private static ImmutableList`1<Apk> GetApks(PackageDump packageDump);
    private static ImmutableDictionary`2<string, ImmutableArray`1<int>> GetPids(DumpResponse response);
}
public class Mono.AndroidTools.ApkDeltaDeployer.VerboseMessageReporter : MulticastDelegate {
    public VerboseMessageReporter(object object, IntPtr method);
    public virtual void Invoke(string message);
    public virtual IAsyncResult BeginInvoke(string message, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Mono.AndroidTools.ApkDeltaDeployer.ZipUtils : object {
    private static int CentralDirectoryFileHeaderMagic;
    private static int CentralDirectoryFileHeaderSize;
    private static int LocalDirectoryFileHeaderSize;
    public static IDictionary`2<string, ZipEntry> ReadZipEntries(Byte[] bytes);
    public static IDictionary`2<string, ZipEntry> ReadZipEntries(BinaryReader reader);
    internal static string Sha256Digest(Byte[] bytes);
    [CompilerGeneratedAttribute]
internal static long <ReadZipEntries>g__Remaining|4_0(BinaryReader r);
}
public class Mono.AndroidTools.ApkResourceXmlReader : XmlReader {
    private static int TAG_TYPE_END_DOC;
    private static int TAG_TYPE_START;
    private static int TAG_TYPE_END;
    private static int ATTR_OFFSET_NS_IDX;
    private static int ATTR_OFFSET_NAME_IDX;
    private static int ATTR_OFFSET_VALUE_IDX;
    private static int ATTR_OFFSET_TYPE;
    private static int ATTR_OFFSET_DATA;
    private static int ATTR_SIZE;
    private static int TAG_OFFSET_TYPE;
    private static int TAG_OFFSET_SRC_LINE;
    private static int TAG_OFFSET_NS_IDX;
    private static int TAG_OFFSET_NAME_IDX;
    private static int TAG_OFFSET_ATTRIB_COUNT;
    private static int TAG_SIZE_END;
    private static int TAG_SIZE_START;
    private static int FILE_OFFSET_FIRST_TAG;
    private static int FILE_OFFSET_STRING_COUNT;
    private static int FILE_OFFSET_STRING_INDEX_TABLE;
    private String[] stringTable;
    private int stringTableOffset;
    private Byte[] data;
    private XmlNameTable nameTable;
    private int tagOffset;
    private int nextTagOffset;
    private int attIndex;
    private XmlNodeType nodeType;
    private ReadState readState;
    private int attributeCount;
    private string localName;
    private string ns;
    private string value;
    private int depth;
    public bool CanResolveEntity { get; }
    public XmlNodeType NodeType { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public int AttributeCount { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    public bool HasValue { get; }
    public ApkResourceXmlReader(Stream stream);
    public ApkResourceXmlReader(Byte[] data);
    private static Byte[] ReadStreamToBuffer(Stream stream, long length);
    private void InitStringTable();
    private string StringAtIndex(int index);
    private void MoveToFirstElement();
    private int Lew(int offset);
    private void ReadAttribute(int index);
    private string GetValueForAttribute(int attribOffset);
    private bool ReadTag(int offset);
    private int FindAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool ReadAttributeValue();
    public virtual bool Read();
    public virtual void Close();
    public virtual string LookupNamespace(string prefix);
    public virtual bool get_CanResolveEntity();
    public virtual void ResolveEntity();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual int get_AttributeCount();
    public virtual bool get_EOF();
    public virtual ReadState get_ReadState();
    public virtual XmlNameTable get_NameTable();
    public virtual bool get_HasValue();
}
public class Mono.AndroidTools.DeviceDisconnectedException : AdbException {
    public DeviceDisconnectedException(Exception innerException);
}
public class Mono.AndroidTools.DeviceNotFoundException : AdbException {
    [CompilerGeneratedAttribute]
private string <DeviceID>k__BackingField;
    public string DeviceID { get; private set; }
    public DeviceNotFoundException(string deviceID);
    [CompilerGeneratedAttribute]
public string get_DeviceID();
    [CompilerGeneratedAttribute]
private void set_DeviceID(string value);
}
public class Mono.AndroidTools.DevicePropertiesTracker : object {
    private CancellationTokenSource canceller;
    private bool disposed;
    [CompilerGeneratedAttribute]
private Action Changed;
    [AsyncStateMachineAttribute("Mono.AndroidTools.DevicePropertiesTracker/<AnnotatePropertiesAsync>d__3")]
public void AnnotatePropertiesAsync(IList`1<AndroidDevice> devices);
    [CompilerGeneratedAttribute]
public void add_Changed(Action value);
    [CompilerGeneratedAttribute]
public void remove_Changed(Action value);
    [AsyncStateMachineAttribute("Mono.AndroidTools.DevicePropertiesTracker/<AnnotateDevicePropertiesAsync>d__7")]
public static Task AnnotateDevicePropertiesAsync(AndroidDevice device, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Mono.AndroidTools.DevicePropertiesTracker/<GetGoogleAvdNameFromConsoleAsync>d__8")]
private static Task`1<string> GetGoogleAvdNameFromConsoleAsync(string deviceId, int consolePort, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Mono.AndroidTools.DevicePropertiesTracker/<GetAndAnnotatePropertiesAsync>d__9")]
private Task GetAndAnnotatePropertiesAsync(AndroidDevice device);
    public sealed virtual void Dispose();
}
public class Mono.AndroidTools.ExtraComponentName : object {
    [CompilerGeneratedAttribute]
private string <Component>k__BackingField;
    public string Component { get; private set; }
    public ExtraComponentName(string component);
    [CompilerGeneratedAttribute]
public string get_Component();
    [CompilerGeneratedAttribute]
private void set_Component(string value);
    public virtual string ToString();
}
public class Mono.AndroidTools.ExtraDataUri : object {
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    public string Uri { get; public set; }
    public ExtraDataUri(string uri);
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
    public virtual string ToString();
}
public class Mono.AndroidTools.ExtraFloat : object {
    [CompilerGeneratedAttribute]
private string <StringValue>k__BackingField;
    [CompilerGeneratedAttribute]
private float <FloatValue>k__BackingField;
    public string StringValue { get; private set; }
    public float FloatValue { get; private set; }
    public ExtraFloat(string val);
    [CompilerGeneratedAttribute]
public string get_StringValue();
    [CompilerGeneratedAttribute]
private void set_StringValue(string value);
    [CompilerGeneratedAttribute]
public float get_FloatValue();
    [CompilerGeneratedAttribute]
private void set_FloatValue(float value);
    public virtual string ToString();
}
public class Mono.AndroidTools.GetAvdNameConsoleCommand : object {
    private static int codepage;
    private static int timeout;
    private TextReader reader;
    private TextWriter writer;
    private TcpClient client;
    private int port;
    public GetAvdNameConsoleCommand(int port);
    private bool Connect(int retries, CancellationToken token);
    private void Connect();
    public sealed virtual void Dispose();
    public void Reset();
    private List`1<string> RunCommand(string command);
    private static Nullable`1<bool> LineAsStatus(string line);
    private string GetAvdName(int retries, CancellationToken token);
    private string GetAvdNameFromOutput(List`1<string> commandOutput);
    public Task`1<string> GetAvdNameAsync(CancellationToken token);
}
internal interface Mono.AndroidTools.IAdbStartServerProcess {
    public bool Success { get; }
    public bool Completed { get; }
    public abstract virtual bool get_Success();
    public abstract virtual bool get_Completed();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Exited(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Exited(EventHandler value);
    public abstract virtual string GetOutput();
    public abstract virtual void Cancel();
}
public interface Mono.AndroidTools.IAndroidDevice {
    public string ID { get; }
    public AndroidDeviceProperties Properties { get; }
    public abstract virtual string get_ID();
    public abstract virtual Task`1<int> GetProcessId(string packageName);
    public abstract virtual Task`1<int> GetProcessId(string packageName, CancellationToken cancellationToken);
    public abstract virtual Task GetLogCat(Action`1<AndroidLogCatEntry> callback, CancellationToken cancellationToken, String[] excludedLogTags);
    public abstract virtual Task SetProperty(string property, string value);
    public abstract virtual Task`1<Dictionary`2<string, string>> GetProperties();
    public abstract virtual AndroidDeviceProperties get_Properties();
}
public interface Mono.AndroidTools.IAndroidPlayerVirtualDevice {
    public string MachineType { get; }
    public abstract virtual string get_MachineType();
}
public interface Mono.AndroidTools.IAndroidVirtualDevice {
    public string Name { get; }
    public int ApiLevel { get; }
    public string DisplayName { get; }
    public abstract virtual string get_Name();
    public abstract virtual int get_ApiLevel();
    public abstract virtual string get_DisplayName();
    public abstract virtual bool SupportsApiLevel(int apiLevel);
}
public interface Mono.AndroidTools.ICustomAnalytics {
    public abstract virtual void ReportSdkVersions(Dictionary`2<string, object> values);
}
public interface Mono.AndroidTools.IGoogleAndroidVirtualDevice {
    public string Path { get; }
    public string Target { get; }
    public abstract virtual string get_Path();
    public abstract virtual string get_Target();
}
public class Mono.AndroidTools.IncompatibleCpuAbiException : InstallFailedException {
    public IncompatibleCpuAbiException(string message);
    public IncompatibleCpuAbiException(string message, string output);
}
[ObsoleteAttribute("Use IncompatibleCpuAbiException")]
public class Mono.AndroidTools.IncompatibleCpuAbiExceptiopn : IncompatibleCpuAbiException {
    public IncompatibleCpuAbiExceptiopn(string message);
    public IncompatibleCpuAbiExceptiopn(string message, string output);
}
public class Mono.AndroidTools.InstallFailedException : AdbException {
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    public string Output { get; private set; }
    public InstallFailedException(string message);
    public InstallFailedException(string message, string output);
    [CompilerGeneratedAttribute]
public string get_Output();
    [CompilerGeneratedAttribute]
private void set_Output(string value);
}
public class Mono.AndroidTools.InsufficientSpaceException : InstallFailedException {
    public InsufficientSpaceException(string message);
    public InsufficientSpaceException(string message, string output);
}
[FlagsAttribute]
public enum Mono.AndroidTools.IntentFlag : Enum {
    public int value__;
    public static IntentFlag None;
    public static IntentFlag GrantReadUriPermission;
    public static IntentFlag GrantWriteUriPermission;
    public static IntentFlag DebugLogResolution;
    public static IntentFlag ExcludeStoppedPackages;
    public static IntentFlag IncludeStoppedPackages;
    public static IntentFlag ActivityBroughtToFront;
    public static IntentFlag ActivityClearTop;
    public static IntentFlag ActivityClearWhenTaskReset;
    public static IntentFlag ActivityExcludeFromRecents;
    public static IntentFlag ActivityLaunchedFromHistory;
    public static IntentFlag ActvityMultipleTask;
    public static IntentFlag ActivityNoAnimation;
    public static IntentFlag ActivityNoHistory;
    public static IntentFlag ActivityNoUserAction;
    public static IntentFlag ActivityPreviousIsTop;
    public static IntentFlag ActivityReorderToFront;
    public static IntentFlag ActivityResetTaskIfNeeded;
    public static IntentFlag ActivitySingleTop;
    public static IntentFlag ActivityClearTask;
    public static IntentFlag ActivityTaskOnHome;
    public static IntentFlag ReceiverRegisteredOnly;
    public static IntentFlag ReceiverReplacePending;
}
[ExtensionAttribute]
internal static class Mono.AndroidTools.Internal.AdbClientTaskExtensions : object {
    [ExtensionAttribute]
public static void MakeCancellable(AdbClient client, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void MakeCancellable(AdbSyncClient client, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ConnectAsync(AdbClient client, TaskCreationOptions options);
    [ExtensionAttribute]
public static Task WriteCommandAsync(AdbClient client, string command, TaskCreationOptions options);
    [ExtensionAttribute]
public static Task WriteCommandWithStatusAsync(AdbClient client, string command, TaskCreationOptions options);
    [ExtensionAttribute]
public static Task`1<string> WriteCommandWithMessageAsync(AdbClient client, string command, TaskCreationOptions options);
    [ExtensionAttribute]
public static Task`1<string> ReadStringWithLengthAsync(AdbClient client, TaskCreationOptions options);
    [ExtensionAttribute]
public static Task ReadTextAsync(AdbClient client, Action`1<string> output, TaskCreationOptions options);
    [ExtensionAttribute]
public static Task`1<string> ReadTextAsync(AdbClient client, TaskCreationOptions options);
    [ExtensionAttribute]
public static Task ConnectTransportAsync(AdbClient client, string deviceID, TaskCreationOptions options);
    [ExtensionAttribute]
public static Task ConnectSyncSessionAsync(AdbSyncClient client, string deviceID, TaskCreationOptions options);
    [ExtensionAttribute]
[ObsoleteAttribute("Use another overload with 'AdbSyncClient.PushOptions' parameter.")]
public static Task`1<long> PushSyncItemsAsync(AdbSyncClient client, AdbSyncDirectory targetDir, string remoteParentDir, bool dryRun, Action`1<AdbSyncNotification> notifySync, Action`1<string> notifyPhase, AdbProgressReporter notifyProgress, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> PushSyncItemsAsync(AdbSyncClient client, AdbSyncDirectory targetDir, string remoteParentDir, PushOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> PushAsync(AdbSyncClient client, string localFilePath, string remoteFilePath, AdbProgressReporter notifyProgress, TaskCreationOptions options);
    [ExtensionAttribute]
public static Task`1<long> PushAsync(AdbSyncClient client, Stream contents, string remoteFilePath, AdbProgressReporter notifyProgress, TaskCreationOptions options);
    [ExtensionAttribute]
[ObsoleteAttribute("Use another overload with AdbSyncClient.PushOptions argument.")]
public static Task`1<long> PushDirectoryAsync(AdbSyncClient client, string localDirectoryPath, string remoteDirectoryPath, bool checkTimestamps, bool removeUnknown, bool dryRun, bool removeBeforeCopy, Action`1<AdbSyncNotification> notifySync, Action`1<string> notifyPhase, AdbProgressReporter notifyProgress, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> PushDirectoryAsync(AdbSyncClient client, PushOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<AdbFileInfo> StatAsync(AdbSyncClient client, string remoteFilePath, TaskCreationOptions options);
    private static Task`1<long> FromAsync(Func`4<T, AsyncCallback, object, IAsyncResult> beginMethod, Func`2<IAsyncResult, long> endMethod, T arg);
    private static Task`1<long> FromAsync(Func`6<T1, T2, T3, AsyncCallback, object, IAsyncResult> beginMethod, Func`2<IAsyncResult, long> endMethod, T1 arg1, T2 arg2, T3 arg3);
    private static Task`1<long> FromAsync(Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, AsyncCallback, object, IAsyncResult> beginMethod, Func`2<IAsyncResult, long> endMethod, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
    private static Task`1<long> FromAsync(Func`10<T1, T2, T3, T4, T5, T6, T7, AsyncCallback, object, IAsyncResult> beginMethod, Func`2<IAsyncResult, long> endMethod, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    private static void InnerInvoke(TaskCompletionSource`1<long> tcs, Func`2<IAsyncResult, long> endMethod, IAsyncResult l);
    [ExtensionAttribute]
public static Task Cleanup(Task task, IDisposable client, AndroidTaskLog log, CancellationToken token);
    [ExtensionAttribute]
public static Task Cleanup(Task task, IDisposable client, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<T> Cleanup(Task`1<T> task, IDisposable client, AndroidTaskLog log, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<T> Cleanup(Task`1<T> task, IDisposable client, CancellationToken token);
    [AsyncStateMachineAttribute("Mono.AndroidTools.Internal.AdbClientTaskExtensions/<ReadBytesAsync>d__27")]
[ExtensionAttribute]
public static Task`1<Byte[]> ReadBytesAsync(AdbClient client, int buffer, CancellationToken token);
    [AsyncStateMachineAttribute("Mono.AndroidTools.Internal.AdbClientTaskExtensions/<ReadStringAsync>d__28")]
[ExtensionAttribute]
public static Task`1<string> ReadStringAsync(AdbClient client, int buffer, CancellationToken token);
    [ExtensionAttribute]
public static Task WriteStreamAsync(AdbClient client, Stream inputStream, int buffer);
}
internal static class Mono.AndroidTools.Internal.AdbOutputParsing : object {
    private static Char[] space;
    private static bool reportedBadPsOutput;
    private static Regex ExtractLocation;
    private static Regex FallbackBroadcastData;
    private static Regex PropertyIdentifier;
    private static string StartResultError;
    private static AdbOutputParsing();
    public static List`1<AndroidInstalledPackage> ParsePackageList(string packageList);
    public static List`1<AndroidInstalledPackage> ParsePackageList(XDocument packageList);
    public static List`1<AndroidInstalledPackage> ParsePmPackageList(string output);
    public static Dictionary`2<string, string> ParseGetprop(string properties);
    public static int GetPackagePidFromPs(string packageName, string psOutput);
    public static int TryGetPackagePidFromPs(string packageName, string psOutput);
    private static int GetPackagePidFromPsInternal(string packageName, string psOutput);
    private static int FindPackageNameInPsStats(String[] stats, string packageName, int pidIndex);
    public static List`1<AndroidDevice> ParseDeviceList(string response);
    public static void CheckInstallSuccess(string output, string packageName);
    public static bool UninstallResult(string output);
    public static string TryBroadcastResult(string output);
    public static string BroadcastResult(string output);
    public static void CheckStartResult(string output, string activity);
    public static List`1<AndroidLogCatEntry> ParseLogCat(string output);
    public static AndroidLogCatEntry ParseLogCatEntry(string data);
    private static LogEntryType ParseLogEntryType(char input);
}
internal static class Mono.AndroidTools.Internal.AdbShellCommand : object {
    public static string Am(string command, string action, String[] categories, IDictionary`2<string, string> extras, string name, string component, bool wait);
    public static string AmForceStop(string package);
    public static string JoinArguments(String[] arguments);
    internal static AdbInstallFlags ToInstallFlags(bool reinstall, bool external);
    public static string PmInstall(string remoteApkFile, bool reinstall, bool external);
    public static string PmInstall(string remoteApkFile, AdbInstallFlags flags);
    public static string PmUninstall(string package, bool preserveData);
    public static string Rm(string remoteFile, bool recursive, bool ignoreError);
    public static string Rm(String[] remoteFiles, bool recursive, bool ignoreError);
    public static string Setprop(string property, string value);
}
internal class Mono.AndroidTools.Internal.AdbStartServerProcess : object {
    private Thread captureOutputThread;
    private Process proc;
    private object lockObj;
    private EventHandler exited;
    private StringWriter output;
    private bool success;
    private bool completed;
    public bool Success { get; }
    public bool Completed { get; }
    public AdbStartServerProcess(string adbExe, EventHandler exited);
    public sealed virtual bool get_Success();
    public sealed virtual bool get_Completed();
    public sealed virtual string GetOutput();
    public sealed virtual void add_Exited(EventHandler value);
    public sealed virtual void remove_Exited(EventHandler value);
    private void CaptureOutput();
    public sealed virtual void Dispose();
    public sealed virtual void Cancel();
}
internal class Mono.AndroidTools.Internal.AdbStartWindowsServerProcess : object {
    private ProcessWaitHandle waitHandle;
    private SafeProcessHandle hProcess;
    private EventHandler exited;
    private bool completed;
    private int exitCode;
    public bool Success { get; }
    public bool Completed { get; }
    public AdbStartWindowsServerProcess(string adbExe, EventHandler exited);
    private void ProcessExited(object state, bool timedOut);
    public sealed virtual void add_Exited(EventHandler value);
    public sealed virtual void remove_Exited(EventHandler value);
    public sealed virtual bool get_Success();
    public sealed virtual bool get_Completed();
    public sealed virtual string GetOutput();
    public sealed virtual void Dispose();
    public sealed virtual void Cancel();
}
internal class Mono.AndroidTools.Internal.AvdWatcher : object {
    private object lockObj;
    private string avdDir;
    private Dictionary`2<string, DateTime> modTimes;
    private FileSystemWatcher fsw;
    private Timer fileWatcher;
    private bool onDemandUpdates;
    [CompilerGeneratedAttribute]
private Action`1<IList`1<IAndroidVirtualDevice>> changed;
    [CompilerGeneratedAttribute]
private IList`1<IAndroidVirtualDevice> <VirtualDevices>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<string, Exception> Error;
    public IList`1<IAndroidVirtualDevice> VirtualDevices { get; private set; }
    public bool OnDemandUpdates { get; public set; }
    [CompilerGeneratedAttribute]
private void add_changed(Action`1<IList`1<IAndroidVirtualDevice>> value);
    [CompilerGeneratedAttribute]
private void remove_changed(Action`1<IList`1<IAndroidVirtualDevice>> value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IAndroidVirtualDevice> get_VirtualDevices();
    [CompilerGeneratedAttribute]
private void set_VirtualDevices(IList`1<IAndroidVirtualDevice> value);
    public sealed virtual bool get_OnDemandUpdates();
    public sealed virtual void set_OnDemandUpdates(bool value);
    public sealed virtual void CheckAndUpdate();
    public sealed virtual void add_Changed(Action`1<IList`1<IAndroidVirtualDevice>> value);
    public sealed virtual void remove_Changed(Action`1<IList`1<IAndroidVirtualDevice>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Error(Action`2<string, Exception> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Error(Action`2<string, Exception> value);
    private void OnChanged();
    private void LogError(string message, Exception ex);
    private void UpdateAvds(IEnumerable`1<string> addedOrChangedInis, IEnumerable`1<string> removedInis);
    private void UpdateList(IEnumerable`1<IAndroidVirtualDevice> toAdd, IEnumerable`1<string> toRemoveIniFiles);
    public sealed virtual void Dispose();
    private void CreateFsw();
    private void HandleTimerElapsed(object sender, ElapsedEventArgs e);
    private void StartTimer();
    [CompilerGeneratedAttribute]
private void <CreateFsw>b__29_0(object sender, FileSystemEventArgs e);
    [CompilerGeneratedAttribute]
private void <CreateFsw>b__29_1(object sender, RenamedEventArgs e);
    [CompilerGeneratedAttribute]
private void <CreateFsw>b__29_2(object sender, FileSystemEventArgs e);
    [CompilerGeneratedAttribute]
private void <CreateFsw>b__29_3(object sender, FileSystemEventArgs e);
}
public interface Mono.AndroidTools.IOnDemandVirtualDeviceDefinitionWatcher {
    public bool OnDemandUpdates { get; public set; }
    public abstract virtual bool get_OnDemandUpdates();
    public abstract virtual void set_OnDemandUpdates(bool value);
    public abstract virtual void CheckAndUpdate();
}
public interface Mono.AndroidTools.IVirtualDeviceDefinitionWatcher {
    public IList`1<IAndroidVirtualDevice> VirtualDevices { get; }
    public abstract virtual IList`1<IAndroidVirtualDevice> get_VirtualDevices();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(Action`1<IList`1<IAndroidVirtualDevice>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(Action`1<IList`1<IAndroidVirtualDevice>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Error(Action`2<string, Exception> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Error(Action`2<string, Exception> value);
}
public interface Mono.AndroidTools.IVirtualDeviceProvider {
    public abstract virtual bool GetIsEmulator(IAndroidDevice device);
    public abstract virtual string GetEmulatorName(IAndroidDevice device);
}
public enum Mono.AndroidTools.LogEntryType : Enum {
    public int value__;
    public static LogEntryType Debug;
    public static LogEntryType Info;
    public static LogEntryType Warning;
    public static LogEntryType Error;
    public static LogEntryType Verbose;
}
public class Mono.AndroidTools.MessageHandler : MulticastDelegate {
    public MessageHandler(object object, IntPtr method);
    public virtual void Invoke(string task, string message);
    public virtual IAsyncResult BeginInvoke(string task, string message, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Mono.AndroidTools.PackageAlreadyExistsException : InstallFailedException {
    [CompilerGeneratedAttribute]
private string <PackageFile>k__BackingField;
    public string PackageFile { get; private set; }
    public PackageAlreadyExistsException(string message);
    public PackageAlreadyExistsException(string message, string packageFile);
    public PackageAlreadyExistsException(string message, string packageFile, string output);
    [CompilerGeneratedAttribute]
public string get_PackageFile();
    [CompilerGeneratedAttribute]
private void set_PackageFile(string value);
}
public class Mono.AndroidTools.PmInstallCommand : AdbCommand {
    [CompilerGeneratedAttribute]
private string <RemoteApkFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private AdbInstallFlags <Flags>k__BackingField;
    public string RemoteApkFile { get; public set; }
    public string User { get; public set; }
    public AdbInstallFlags Flags { get; public set; }
    public PmInstallCommand(PmInstallCommand copyCommand);
    [CompilerGeneratedAttribute]
public string get_RemoteApkFile();
    [CompilerGeneratedAttribute]
public void set_RemoteApkFile(string value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    [CompilerGeneratedAttribute]
public AdbInstallFlags get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(AdbInstallFlags value);
    protected virtual void AppendTo(ProcessArgumentBuilder pb);
}
public class Mono.AndroidTools.PmListPackagesCommand : AdbCommand {
    [CompilerGeneratedAttribute]
private bool <RequireVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    public bool RequireVersions { get; public set; }
    public int ApiLevel { get; public set; }
    public string User { get; public set; }
    public PmListPackagesCommand(PmListPackagesCommand copyCommand);
    [CompilerGeneratedAttribute]
public bool get_RequireVersions();
    [CompilerGeneratedAttribute]
public void set_RequireVersions(bool value);
    [CompilerGeneratedAttribute]
public int get_ApiLevel();
    [CompilerGeneratedAttribute]
public void set_ApiLevel(int value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    protected virtual void AppendTo(ProcessArgumentBuilder pb);
}
public class Mono.AndroidTools.PmUninstallCommand : AdbCommand {
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    public string PackageName { get; public set; }
    public bool PreserveData { get; public set; }
    public string User { get; public set; }
    public PmUninstallCommand(PmUninstallCommand copyCommand);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    [CompilerGeneratedAttribute]
public bool get_PreserveData();
    [CompilerGeneratedAttribute]
public void set_PreserveData(bool value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    protected virtual void AppendTo(ProcessArgumentBuilder pb);
}
public class Mono.AndroidTools.RequiresUninstallException : PackageAlreadyExistsException {
    public RequiresUninstallException(string message);
    public RequiresUninstallException(string message, string packageFile);
    public RequiresUninstallException(string message, string packageFile, string output);
}
public class Mono.AndroidTools.SdkNotSupportedException : InstallFailedException {
    public SdkNotSupportedException(string message);
    public SdkNotSupportedException(string message, string output);
}
public class Mono.AndroidTools.TaskLogHandler : MulticastDelegate {
    public TaskLogHandler(object object, IntPtr method);
    public virtual void Invoke(AndroidTaskLog log);
    public virtual IAsyncResult BeginInvoke(AndroidTaskLog log, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Mono.AndroidTools.TrackDeviceTask : object {
    private AdbClient client;
    private TaskCompletionSource`1<object> tcs;
    private CancellationToken cancellationToken;
    private Action`1<List`1<AndroidDevice>> action;
    public TrackDeviceTask(AdbClient client, Action`1<List`1<AndroidDevice>> action, CancellationToken cancellationToken);
    public Task Start();
    private bool CheckCancelled();
    private static void Connected(IAsyncResult r);
    private static void GotStatus(IAsyncResult r);
    private static void GotString(IAsyncResult r);
}
internal class Mono.AndroidTools.Util.AggregateAsyncResult : object {
    private AsyncCallback callback;
    private object state;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCompleted>k__BackingField;
    private ManualResetEvent waitHandle;
    public Exception Error { get; private set; }
    public bool IsCompleted { get; private set; }
    private object System.IAsyncResult.AsyncState { get; }
    private WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }
    private bool System.IAsyncResult.CompletedSynchronously { get; }
    public AggregateAsyncResult(AsyncCallback callback, object state);
    public void CompleteAsCallback(IAsyncResult ar);
    public void Complete();
    public void CompleteWithError(Exception error);
    public void CheckError(CancellationToken token);
    private void MarkCompleted();
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(Exception value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCompleted();
    [CompilerGeneratedAttribute]
private void set_IsCompleted(bool value);
    private sealed virtual override object System.IAsyncResult.get_AsyncState();
    private sealed virtual override WaitHandle System.IAsyncResult.get_AsyncWaitHandle();
    private sealed virtual override bool System.IAsyncResult.get_CompletedSynchronously();
}
internal class Mono.AndroidTools.Util.AggregateAsyncResult`1 : AggregateAsyncResult {
    [CompilerGeneratedAttribute]
private T <Arg>k__BackingField;
    public T Arg { get; public set; }
    public AggregateAsyncResult`1(AsyncCallback callback, object state);
    public AggregateAsyncResult`1(T arg, AsyncCallback callback, object state);
    [CompilerGeneratedAttribute]
public T get_Arg();
    [CompilerGeneratedAttribute]
public void set_Arg(T value);
}
internal class Mono.AndroidTools.Util.AggregateAsyncResult`2 : AggregateAsyncResult {
    [CompilerGeneratedAttribute]
private T1 <Arg1>k__BackingField;
    [CompilerGeneratedAttribute]
private T2 <Arg2>k__BackingField;
    public T1 Arg1 { get; public set; }
    public T2 Arg2 { get; public set; }
    public AggregateAsyncResult`2(AsyncCallback callback, object state);
    public AggregateAsyncResult`2(T1 arg1, T2 arg2, AsyncCallback callback, object state);
    [CompilerGeneratedAttribute]
public T1 get_Arg1();
    [CompilerGeneratedAttribute]
public void set_Arg1(T1 value);
    [CompilerGeneratedAttribute]
public T2 get_Arg2();
    [CompilerGeneratedAttribute]
public void set_Arg2(T2 value);
}
public static class Mono.AndroidTools.Util.Platform : object {
    public static bool IsWindows;
    public static bool IsMac;
    private static Platform();
    private static bool IsRunningOnMac();
    private static int uname(IntPtr buf);
}
public class Mono.AndroidTools.Util.ProcessArgumentBuilder : object {
    private StringBuilder sb;
    [CompilerGeneratedAttribute]
private string <ProcessPath>k__BackingField;
    private static string escapeDoubleQuoteCharsStr;
    public string ProcessPath { get; private set; }
    public ProcessArgumentBuilder(string processPath);
    private static ProcessArgumentBuilder();
    [CompilerGeneratedAttribute]
public string get_ProcessPath();
    [CompilerGeneratedAttribute]
private void set_ProcessPath(string value);
    public void Add(string argument);
    public void Add(String[] args);
    public void AddQuotedFormat(string argumentFormat, Object[] values);
    public void AddQuotedFormat(string argumentFormat, object val0);
    public void AddQuoted(string argument);
    public void AddQuoted(String[] args);
    public static string Quote(string s);
    public virtual string ToString();
    private static void AppendEscaped(StringBuilder sb, string escapeChars, string s);
    private static string GetArgument(StringBuilder builder, string buf, int startIndex, Int32& endIndex, Exception& ex);
    private static bool TryParse(string commandline, String[]& argv, Exception& ex);
    public static bool TryParse(string commandline, String[]& argv);
    public static String[] Parse(string commandline);
}
internal class Mono.AndroidTools.Util.ReadFullAsyncResult : AggregateAsyncResult {
    public Stream Stream;
    public Byte[] Buffer;
    public int Offset;
    public int Count;
    public int Read;
    public int Remaining { get; }
    public ReadFullAsyncResult(Stream stream, Byte[] buffer, AsyncCallback callback, object state);
    public void BeginRead(int offset, int count, AsyncCallback callback);
    public void ContinueRead(AsyncCallback callback);
    public int EndRead(IAsyncResult ar);
    public int get_Remaining();
}
[ExtensionAttribute]
internal static class Mono.AndroidTools.Util.StreamExtensions : object {
    [ExtensionAttribute]
public static void ReadFull(Stream stream, Byte[] buffer, int offset, int count);
    [ExtensionAttribute]
public static IAsyncResult BeginReadFull(Stream stream, Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    private static void BeginReadFull_GotData(IAsyncResult ar);
    [ExtensionAttribute]
public static void EndReadFull(Stream stream, IAsyncResult asyncResult);
}
internal class Mono.AndroidTools.Util.TeeTextWriter : TextWriter {
    private TextWriter[] writers;
    public Encoding Encoding { get; }
    public TeeTextWriter(TextWriter[] writers);
    public virtual void Write(string value);
    public static TextWriter ForNonNull(TextWriter[] writers);
    public virtual Encoding get_Encoding();
}
internal static class Mono.AndroidTools.Util.Win32Interop : object {
    private static int STD_INPUT_HANDLE;
    private static int STD_OUTPUT_HANDLE;
    private static int STD_ERROR_HANDLE;
    public static IntPtr StdInputHandle { get; }
    public static IntPtr StdOutputHandle { get; }
    public static IntPtr StdErrorHandle { get; }
    public static bool CreateProcess(string lpApplicationName, string lpCommandLine, SecurityAttributes& lpProcessAttributes, SecurityAttributes& lpThreadAttributes, bool bInheritHandles, CreateProcessFlags dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, StartupInfo& lpStartupInfo, ProcessInfo& lpProcessInformation);
    public static bool CreateProcess(string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, CreateProcessFlags dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, StartupInfo& lpStartupInfo, ProcessInfo& lpProcessInformation);
    public static bool TerminateProcess(IntPtr hProcess, UInt32 exitCode);
    public static int WaitForSingleObject(IntPtr Handle, int Wait);
    public static bool GetExitCodeProcess(IntPtr Handle, Int32& lpExitCode);
    public static bool SetHandleInformation(IntPtr hObject, HandleFlags dwMask, HandleFlags dwFlags);
    public static void ThrowWin32Error();
    public static IntPtr GetStdHandle(int nStdHandle);
    public static IntPtr get_StdInputHandle();
    public static IntPtr get_StdOutputHandle();
    public static IntPtr get_StdErrorHandle();
}
internal class Mono.AndroidTools.Util.WrapperAsyncResult : object {
    private AsyncCallback callback;
    private object state;
    [CompilerGeneratedAttribute]
private IAsyncResult <InnerResult>k__BackingField;
    [CompilerGeneratedAttribute]
private object <WrapperState>k__BackingField;
    public IAsyncResult InnerResult { get; public set; }
    public object WrapperState { get; private set; }
    private object System.IAsyncResult.AsyncState { get; }
    private WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }
    private bool System.IAsyncResult.CompletedSynchronously { get; }
    private bool System.IAsyncResult.IsCompleted { get; }
    public WrapperAsyncResult(AsyncCallback callback, object state, object wrapperState);
    public void WrapperCallback(IAsyncResult ar);
    [CompilerGeneratedAttribute]
public IAsyncResult get_InnerResult();
    [CompilerGeneratedAttribute]
public void set_InnerResult(IAsyncResult value);
    [CompilerGeneratedAttribute]
public object get_WrapperState();
    [CompilerGeneratedAttribute]
private void set_WrapperState(object value);
    private sealed virtual override object System.IAsyncResult.get_AsyncState();
    private sealed virtual override WaitHandle System.IAsyncResult.get_AsyncWaitHandle();
    private sealed virtual override bool System.IAsyncResult.get_CompletedSynchronously();
    private sealed virtual override bool System.IAsyncResult.get_IsCompleted();
}
public static class Mono.AndroidTools.XamarinAndroidPlayer : object {
    private static bool doneInit;
    private static bool isInstalled;
    private static string exePath;
    private static string managerExePath;
    private static string devicesJsonPath;
    private static string version;
    public static string ExePath { get; }
    public static string ManagerExePath { get; }
    public static bool IsInstalled { get; }
    public static string DevicesJsonPath { get; }
    public static string Version { get; }
    public static string get_ExePath();
    public static string get_ManagerExePath();
    public static bool get_IsInstalled();
    public static string get_DevicesJsonPath();
    public static string get_Version();
    private static void Init();
    private static void InitWin();
    private static void InitMac();
    private static bool ValidateDevicesJson();
    private static string GetVersionFromInfoPlist(string infoPlist);
}
internal abstract class Mono.DataConverter : object {
    private static DataConverter SwapConv;
    private static DataConverter CopyConv;
    public static bool IsLittleEndian;
    public static DataConverter LittleEndian { get; }
    public static DataConverter BigEndian { get; }
    public static DataConverter Native { get; }
    private static DataConverter();
    public abstract virtual double GetDouble(Byte[] data, int index);
    public abstract virtual float GetFloat(Byte[] data, int index);
    public abstract virtual long GetInt64(Byte[] data, int index);
    public abstract virtual int GetInt32(Byte[] data, int index);
    public abstract virtual short GetInt16(Byte[] data, int index);
    [CLSCompliantAttribute("False")]
public abstract virtual UInt32 GetUInt32(Byte[] data, int index);
    [CLSCompliantAttribute("False")]
public abstract virtual ushort GetUInt16(Byte[] data, int index);
    [CLSCompliantAttribute("False")]
public abstract virtual ulong GetUInt64(Byte[] data, int index);
    public abstract virtual void PutBytes(Byte[] dest, int destIdx, double value);
    public abstract virtual void PutBytes(Byte[] dest, int destIdx, float value);
    public abstract virtual void PutBytes(Byte[] dest, int destIdx, int value);
    public abstract virtual void PutBytes(Byte[] dest, int destIdx, long value);
    public abstract virtual void PutBytes(Byte[] dest, int destIdx, short value);
    [CLSCompliantAttribute("False")]
public abstract virtual void PutBytes(Byte[] dest, int destIdx, ushort value);
    [CLSCompliantAttribute("False")]
public abstract virtual void PutBytes(Byte[] dest, int destIdx, UInt32 value);
    [CLSCompliantAttribute("False")]
public abstract virtual void PutBytes(Byte[] dest, int destIdx, ulong value);
    public Byte[] GetBytes(double value);
    public Byte[] GetBytes(float value);
    public Byte[] GetBytes(int value);
    public Byte[] GetBytes(long value);
    public Byte[] GetBytes(short value);
    [CLSCompliantAttribute("False")]
public Byte[] GetBytes(ushort value);
    [CLSCompliantAttribute("False")]
public Byte[] GetBytes(UInt32 value);
    [CLSCompliantAttribute("False")]
public Byte[] GetBytes(ulong value);
    public static DataConverter get_LittleEndian();
    public static DataConverter get_BigEndian();
    public static DataConverter get_Native();
    private static int Align(int current, int align);
    public static Byte[] Pack(string description, Object[] args);
    public static Byte[] PackEnumerable(string description, IEnumerable args);
    private static bool PackOne(PackContext b, object oarg);
    private static bool Prepare(Byte[] buffer, Int32& idx, int size, Boolean& align);
    public static IList Unpack(string description, Byte[] buffer, int startIndex);
    internal void Check(Byte[] dest, int destIdx, int size);
}
public abstract class Mono.Options.Option : object {
    private string prototype;
    private string description;
    private String[] names;
    private OptionValueType type;
    private int count;
    private String[] separators;
    private static Char[] NameTerminator;
    public string Prototype { get; }
    public string Description { get; }
    public OptionValueType OptionValueType { get; }
    public int MaxValueCount { get; }
    internal String[] Names { get; }
    internal String[] ValueSeparators { get; }
    protected Option(string prototype, string description);
    protected Option(string prototype, string description, int maxValueCount);
    private static Option();
    public string get_Prototype();
    public string get_Description();
    public OptionValueType get_OptionValueType();
    public int get_MaxValueCount();
    public String[] GetNames();
    public String[] GetValueSeparators();
    protected static T Parse(string value, OptionContext c);
    internal String[] get_Names();
    internal String[] get_ValueSeparators();
    private OptionValueType ParsePrototype();
    private static void AddSeparators(string name, int end, ICollection`1<string> seps);
    public void Invoke(OptionContext c);
    protected abstract virtual void OnParseComplete(OptionContext c);
    public virtual string ToString();
}
public class Mono.Options.OptionAction`2 : MulticastDelegate {
    public OptionAction`2(object object, IntPtr method);
    public virtual void Invoke(TKey key, TValue value);
    public virtual IAsyncResult BeginInvoke(TKey key, TValue value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Mono.Options.OptionContext : object {
    private Option option;
    private string name;
    private int index;
    private OptionSet set;
    private OptionValueCollection c;
    public Option Option { get; public set; }
    public string OptionName { get; public set; }
    public int OptionIndex { get; public set; }
    public OptionSet OptionSet { get; }
    public OptionValueCollection OptionValues { get; }
    public OptionContext(OptionSet set);
    public Option get_Option();
    public void set_Option(Option value);
    public string get_OptionName();
    public void set_OptionName(string value);
    public int get_OptionIndex();
    public void set_OptionIndex(int value);
    public OptionSet get_OptionSet();
    public OptionValueCollection get_OptionValues();
}
public class Mono.Options.OptionException : Exception {
    private string option;
    public string OptionName { get; }
    public OptionException(string message, string optionName);
    public OptionException(string message, string optionName, Exception innerException);
    protected OptionException(SerializationInfo info, StreamingContext context);
    public string get_OptionName();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Mono.Options.OptionSet : KeyedCollection`2<string, Option> {
    private Converter`2<string, string> localizer;
    private Regex ValueOption;
    private static int OptionWidth;
    public Converter`2<string, string> MessageLocalizer { get; }
    public OptionSet(Converter`2<string, string> localizer);
    public Converter`2<string, string> get_MessageLocalizer();
    protected virtual string GetKeyForItem(Option item);
    protected virtual void InsertItem(int index, Option item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, Option item);
    private void AddImpl(Option option);
    public OptionSet Add(Option option);
    public OptionSet Add(string prototype, Action`1<string> action);
    public OptionSet Add(string prototype, string description, Action`1<string> action);
    public OptionSet Add(string prototype, OptionAction`2<string, string> action);
    public OptionSet Add(string prototype, string description, OptionAction`2<string, string> action);
    public OptionSet Add(string prototype, Action`1<T> action);
    public OptionSet Add(string prototype, string description, Action`1<T> action);
    public OptionSet Add(string prototype, OptionAction`2<TKey, TValue> action);
    public OptionSet Add(string prototype, string description, OptionAction`2<TKey, TValue> action);
    protected virtual OptionContext CreateOptionContext();
    public List`1<string> Parse(IEnumerable`1<string> arguments);
    private static bool Unprocessed(ICollection`1<string> extra, Option def, OptionContext c, string argument);
    protected bool GetOptionParts(string argument, String& flag, String& name, String& sep, String& value);
    protected virtual bool Parse(string argument, OptionContext c);
    private void ParseValue(string option, OptionContext c);
    private bool ParseBool(string option, string n, OptionContext c);
    private bool ParseBundledValue(string f, string n, OptionContext c);
    private static void Invoke(OptionContext c, string name, string value, Option option);
    public void WriteOptionDescriptions(TextWriter o);
    private bool WriteOptionPrototype(TextWriter o, Option p, Int32& written);
    private static int GetNextOptionIndex(String[] names, int i);
    private static void Write(TextWriter o, Int32& n, string s);
    private static string GetArgumentName(int index, int maxIndex, string description);
    private static string GetDescription(string description);
    [IteratorStateMachineAttribute("Mono.Options.OptionSet/<GetLines>d__39")]
private static IEnumerable`1<string> GetLines(string description);
    private static bool IsEolChar(char c);
    private static int GetLineEnd(int start, int length, string description);
}
[DefaultMemberAttribute("Item")]
public class Mono.Options.OptionValueCollection : object {
    private List`1<string> values;
    private OptionContext c;
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public string Item { get; public set; }
    internal OptionValueCollection(OptionContext c);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual void Add(string item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string item);
    public sealed virtual void CopyTo(String[] array, int arrayIndex);
    public sealed virtual bool Remove(string item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual int IndexOf(string item);
    public sealed virtual void Insert(int index, string item);
    public sealed virtual void RemoveAt(int index);
    private void AssertValid(int index);
    public sealed virtual string get_Item(int index);
    public sealed virtual void set_Item(int index, string value);
    public List`1<string> ToList();
    public String[] ToArray();
    public virtual string ToString();
}
public enum Mono.Options.OptionValueType : Enum {
    public int value__;
    public static OptionValueType None;
    public static OptionValueType Optional;
    public static OptionValueType Required;
}
[ProtoContractAttribute]
internal class Proto.AgentSwapResponse : object {
    private IExtension __pbn__extensionData;
    [CompilerGeneratedAttribute]
private Status <status>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Pid>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Event> <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JvmtiErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<JvmtiErrorDetails> <JvmtiErrorDetails>k__BackingField;
    [ProtoMemberAttribute("1")]
public Status status { get; public set; }
    [ProtoMemberAttribute("2")]
public int Pid { get; public set; }
    [ProtoMemberAttribute("3")]
public List`1<Event> Events { get; }
    [ProtoMemberAttribute("4")]
[DefaultValueAttribute("")]
public string JvmtiErrorCode { get; public set; }
    [ProtoMemberAttribute("5")]
public List`1<JvmtiErrorDetails> JvmtiErrorDetails { get; }
    private sealed virtual override IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing);
    [CompilerGeneratedAttribute]
public Status get_status();
    [CompilerGeneratedAttribute]
public void set_status(Status value);
    [CompilerGeneratedAttribute]
public int get_Pid();
    [CompilerGeneratedAttribute]
public void set_Pid(int value);
    [CompilerGeneratedAttribute]
public List`1<Event> get_Events();
    [CompilerGeneratedAttribute]
public string get_JvmtiErrorCode();
    [CompilerGeneratedAttribute]
public void set_JvmtiErrorCode(string value);
    [CompilerGeneratedAttribute]
public List`1<JvmtiErrorDetails> get_JvmtiErrorDetails();
}
[ProtoContractAttribute]
internal class Proto.ApkDump : object {
    private IExtension __pbn__extensionData;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Cd>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AbsolutePath>k__BackingField;
    [ProtoMemberAttribute("1")]
[DefaultValueAttribute("")]
public string Name { get; public set; }
    [ProtoMemberAttribute("2")]
public Byte[] Cd { get; public set; }
    [ProtoMemberAttribute("3")]
public Byte[] Signature { get; public set; }
    [ProtoMemberAttribute("4")]
[DefaultValueAttribute("")]
public string AbsolutePath { get; public set; }
    private sealed virtual override IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_Cd();
    [CompilerGeneratedAttribute]
public void set_Cd(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_AbsolutePath();
    [CompilerGeneratedAttribute]
public void set_AbsolutePath(string value);
}
[ProtoContractAttribute]
internal class Proto.ClassDef : object {
    private IExtension __pbn__extensionData;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Dex>k__BackingField;
    [ProtoMemberAttribute("1")]
[DefaultValueAttribute("")]
public string Name { get; public set; }
    [ProtoMemberAttribute("2")]
public Byte[] Dex { get; public set; }
    private sealed virtual override IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_Dex();
    [CompilerGeneratedAttribute]
public void set_Dex(Byte[] value);
}
[ProtoContractAttribute]
internal class Proto.DeltaInstallRequest : object {
    private IExtension __pbn__extensionData;
    [CompilerGeneratedAttribute]
private List`1<string> <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PatchInstruction> <patchInstructions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Inherit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [ProtoMemberAttribute("2")]
public List`1<string> Options { get; }
    [ProtoMemberAttribute("3")]
public List`1<PatchInstruction> patchInstructions { get; }
    [ProtoMemberAttribute("4")]
public bool Inherit { get; public set; }
    [ProtoMemberAttribute("5")]
[DefaultValueAttribute("")]
public string PackageName { get; public set; }
    private sealed virtual override IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing);
    [CompilerGeneratedAttribute]
public List`1<string> get_Options();
    [CompilerGeneratedAttribute]
public List`1<PatchInstruction> get_patchInstructions();
    [CompilerGeneratedAttribute]
public bool get_Inherit();
    [CompilerGeneratedAttribute]
public void set_Inherit(bool value);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
}
[ProtoContractAttribute]
internal class Proto.DeltaInstallResponse : object {
    private IExtension __pbn__extensionData;
    [CompilerGeneratedAttribute]
private DeltaStatus <status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstallOutput>k__BackingField;
    [ProtoMemberAttribute("1")]
public DeltaStatus status { get; public set; }
    [ProtoMemberAttribute("2")]
[DefaultValueAttribute("")]
public string InstallOutput { get; public set; }
    private sealed virtual override IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing);
    [CompilerGeneratedAttribute]
public DeltaStatus get_status();
    [CompilerGeneratedAttribute]
public void set_status(DeltaStatus value);
    [CompilerGeneratedAttribute]
public string get_InstallOutput();
    [CompilerGeneratedAttribute]
public void set_InstallOutput(string value);
}
[ProtoContractAttribute]
internal class Proto.DeltaPreinstallRequest : object {
    private IExtension __pbn__extensionData;
    [CompilerGeneratedAttribute]
private Status <status>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PatchInstruction> <patchInstructions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Inherit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [ProtoMemberAttribute("1")]
public Status status { get; public set; }
    [ProtoMemberAttribute("2")]
public List`1<PatchInstruction> patchInstructions { get; }
    [ProtoMemberAttribute("3")]
public bool Inherit { get; public set; }
    [ProtoMemberAttribute("4")]
[DefaultValueAttribute("")]
public string PackageName { get; public set; }
    private sealed virtual override IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing);
    [CompilerGeneratedAttribute]
public Status get_status();
    [CompilerGeneratedAttribute]
public void set_status(Status value);
    [CompilerGeneratedAttribute]
public List`1<PatchInstruction> get_patchInstructions();
    [CompilerGeneratedAttribute]
public bool get_Inherit();
    [CompilerGeneratedAttribute]
public void set_Inherit(bool value);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
}
[ProtoContractAttribute]
internal class Proto.DeltaPreinstallResponse : object {
    private IExtension __pbn__extensionData;
    [CompilerGeneratedAttribute]
private DeltaStatus <status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [ProtoMemberAttribute("1")]
public DeltaStatus status { get; public set; }
    [ProtoMemberAttribute("2")]
[DefaultValueAttribute("")]
public string SessionId { get; public set; }
    private sealed virtual override IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing);
    [CompilerGeneratedAttribute]
public DeltaStatus get_status();
    [CompilerGeneratedAttribute]
public void set_status(DeltaStatus value);
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
}
[ProtoContractAttribute]
internal class Proto.DumpResponse : object {
    private IExtension __pbn__extensionData;
    [CompilerGeneratedAttribute]
private Status <status>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PackageDump> <Packages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FailedPackage>k__BackingField;
    [ProtoMemberAttribute("1")]
public Status status { get; public set; }
    [ProtoMemberAttribute("2")]
public List`1<PackageDump> Packages { get; }
    [ProtoMemberAttribute("3")]
[DefaultValueAttribute("")]
public string FailedPackage { get; public set; }
    private sealed virtual override IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing);
    [CompilerGeneratedAttribute]
public Status get_status();
    [CompilerGeneratedAttribute]
public void set_status(Status value);
    [CompilerGeneratedAttribute]
public List`1<PackageDump> get_Packages();
    [CompilerGeneratedAttribute]
public string get_FailedPackage();
    [CompilerGeneratedAttribute]
public void set_FailedPackage(string value);
}
[ProtoContractAttribute]
internal class Proto.Event : object {
    private IExtension __pbn__extensionData;
    [CompilerGeneratedAttribute]
private Type <type>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Pid>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Tid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TimestampNs>k__BackingField;
    [ProtoMemberAttribute("1")]
public Type type { get; public set; }
    [ProtoMemberAttribute("2")]
public long Pid { get; public set; }
    [ProtoMemberAttribute("3")]
public long Tid { get; public set; }
    [ProtoMemberAttribute("4")]
[DefaultValueAttribute("")]
public string Text { get; public set; }
    [ProtoMemberAttribute("5")]
public long TimestampNs { get; public set; }
    private sealed virtual override IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing);
    [CompilerGeneratedAttribute]
public Type get_type();
    [CompilerGeneratedAttribute]
public void set_type(Type value);
    [CompilerGeneratedAttribute]
public long get_Pid();
    [CompilerGeneratedAttribute]
public void set_Pid(long value);
    [CompilerGeneratedAttribute]
public long get_Tid();
    [CompilerGeneratedAttribute]
public void set_Tid(long value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public long get_TimestampNs();
    [CompilerGeneratedAttribute]
public void set_TimestampNs(long value);
}
[ProtoContractAttribute]
internal class Proto.InstallerResponse : object {
    private IExtension __pbn__extensionData;
    [CompilerGeneratedAttribute]
private Status <status>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Event> <Events>k__BackingField;
    private DiscriminatedUnionObject __pbn__extra;
    [ProtoMemberAttribute("1")]
public Status status { get; public set; }
    [ProtoMemberAttribute("2")]
public List`1<Event> Events { get; }
    [ProtoMemberAttribute("3")]
public SwapResponse SwapResponse { get; public set; }
    [ProtoMemberAttribute("4")]
public DumpResponse DumpResponse { get; public set; }
    [ProtoMemberAttribute("5")]
public DeltaPreinstallResponse DeltapreinstallResponse { get; public set; }
    [ProtoMemberAttribute("6")]
public DeltaInstallResponse DeltainstallResponse { get; public set; }
    private sealed virtual override IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing);
    [CompilerGeneratedAttribute]
public Status get_status();
    [CompilerGeneratedAttribute]
public void set_status(Status value);
    [CompilerGeneratedAttribute]
public List`1<Event> get_Events();
    public SwapResponse get_SwapResponse();
    public void set_SwapResponse(SwapResponse value);
    public bool ShouldSerializeSwapResponse();
    public void ResetSwapResponse();
    public DumpResponse get_DumpResponse();
    public void set_DumpResponse(DumpResponse value);
    public bool ShouldSerializeDumpResponse();
    public void ResetDumpResponse();
    public DeltaPreinstallResponse get_DeltapreinstallResponse();
    public void set_DeltapreinstallResponse(DeltaPreinstallResponse value);
    public bool ShouldSerializeDeltapreinstallResponse();
    public void ResetDeltapreinstallResponse();
    public DeltaInstallResponse get_DeltainstallResponse();
    public void set_DeltainstallResponse(DeltaInstallResponse value);
    public bool ShouldSerializeDeltainstallResponse();
    public void ResetDeltainstallResponse();
}
[ProtoContractAttribute]
internal class Proto.JvmtiErrorDetails : object {
    private IExtension __pbn__extensionData;
    [CompilerGeneratedAttribute]
private Type <type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClassName>k__BackingField;
    [ProtoMemberAttribute("1")]
public Type type { get; public set; }
    [ProtoMemberAttribute("2")]
[DefaultValueAttribute("")]
public string Name { get; public set; }
    [ProtoMemberAttribute("3")]
[DefaultValueAttribute("")]
public string ClassName { get; public set; }
    private sealed virtual override IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing);
    [CompilerGeneratedAttribute]
public Type get_type();
    [CompilerGeneratedAttribute]
public void set_type(Type value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
public void set_ClassName(string value);
}
[ProtoContractAttribute]
internal class Proto.PackageDump : object {
    private IExtension __pbn__extensionData;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ApkDump> <Apks>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <Processes>k__BackingField;
    [CompilerGeneratedAttribute]
private Arch <arch>k__BackingField;
    [ProtoMemberAttribute("1")]
[DefaultValueAttribute("")]
public string Name { get; public set; }
    [ProtoMemberAttribute("2")]
public List`1<ApkDump> Apks { get; }
    [ProtoMemberAttribute("3")]
public Int32[] Processes { get; public set; }
    [ProtoMemberAttribute("4")]
public Arch arch { get; public set; }
    private sealed virtual override IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public List`1<ApkDump> get_Apks();
    [CompilerGeneratedAttribute]
public Int32[] get_Processes();
    [CompilerGeneratedAttribute]
public void set_Processes(Int32[] value);
    [CompilerGeneratedAttribute]
public Arch get_arch();
    [CompilerGeneratedAttribute]
public void set_arch(Arch value);
}
[ProtoContractAttribute]
internal class Proto.PatchInstruction : object {
    private IExtension __pbn__extensionData;
    [CompilerGeneratedAttribute]
private string <SrcAbsolutePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Instructions>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Patches>k__BackingField;
    [CompilerGeneratedAttribute]
private long <DstFilesize>k__BackingField;
    [ProtoMemberAttribute("1")]
[DefaultValueAttribute("")]
public string SrcAbsolutePath { get; public set; }
    [ProtoMemberAttribute("2")]
public Byte[] Instructions { get; public set; }
    [ProtoMemberAttribute("3")]
public Byte[] Patches { get; public set; }
    [ProtoMemberAttribute("4")]
public long DstFilesize { get; public set; }
    private sealed virtual override IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing);
    [CompilerGeneratedAttribute]
public string get_SrcAbsolutePath();
    [CompilerGeneratedAttribute]
public void set_SrcAbsolutePath(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_Instructions();
    [CompilerGeneratedAttribute]
public void set_Instructions(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_Patches();
    [CompilerGeneratedAttribute]
public void set_Patches(Byte[] value);
    [CompilerGeneratedAttribute]
public long get_DstFilesize();
    [CompilerGeneratedAttribute]
public void set_DstFilesize(long value);
}
[ProtoContractAttribute]
internal class Proto.ResumeRequest : object {
    private IExtension __pbn__extensionData;
    private sealed virtual override IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing);
}
[ProtoContractAttribute]
internal class Proto.SwapRequest : object {
    private IExtension __pbn__extensionData;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RestartActivity>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ClassDef> <Classes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <ProcessIds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExtraAgents>k__BackingField;
    [ProtoMemberAttribute("1")]
[DefaultValueAttribute("")]
public string PackageName { get; public set; }
    [ProtoMemberAttribute("2")]
public bool RestartActivity { get; public set; }
    [ProtoMemberAttribute("3")]
public List`1<ClassDef> Classes { get; }
    [ProtoMemberAttribute("4")]
[DefaultValueAttribute("")]
public string SessionId { get; public set; }
    [ProtoMemberAttribute("5")]
public Int32[] ProcessIds { get; public set; }
    [ProtoMemberAttribute("6")]
public int ExtraAgents { get; public set; }
    private sealed virtual override IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    [CompilerGeneratedAttribute]
public bool get_RestartActivity();
    [CompilerGeneratedAttribute]
public void set_RestartActivity(bool value);
    [CompilerGeneratedAttribute]
public List`1<ClassDef> get_Classes();
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
    [CompilerGeneratedAttribute]
public Int32[] get_ProcessIds();
    [CompilerGeneratedAttribute]
public void set_ProcessIds(Int32[] value);
    [CompilerGeneratedAttribute]
public int get_ExtraAgents();
    [CompilerGeneratedAttribute]
public void set_ExtraAgents(int value);
}
[ProtoContractAttribute]
internal class Proto.SwapResponse : object {
    private IExtension __pbn__extensionData;
    [CompilerGeneratedAttribute]
private Status <status>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <JvmtiErrorCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<JvmtiErrorDetails> <JvmtiErrorDetails>k__BackingField;
    [ProtoMemberAttribute("1")]
public Status status { get; public set; }
    [ProtoMemberAttribute("4")]
public List`1<string> JvmtiErrorCodes { get; }
    [ProtoMemberAttribute("5")]
public List`1<JvmtiErrorDetails> JvmtiErrorDetails { get; }
    private sealed virtual override IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing);
    [CompilerGeneratedAttribute]
public Status get_status();
    [CompilerGeneratedAttribute]
public void set_status(Status value);
    [CompilerGeneratedAttribute]
public List`1<string> get_JvmtiErrorCodes();
    [CompilerGeneratedAttribute]
public List`1<JvmtiErrorDetails> get_JvmtiErrorDetails();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
