internal static class Consts : object {
    public static string MonoCorlibVersion;
    public static string MonoVersion;
    public static string MonoCompany;
    public static string MonoProduct;
    public static string MonoCopyright;
    public static string FxVersion;
    public static string FxFileVersion;
    public static string EnvironmentVersion;
    public static string VsVersion;
    public static string VsFileVersion;
    private static string PublicKeyToken;
    public static string AssemblyI18N;
    public static string AssemblyMicrosoft_JScript;
    public static string AssemblyMicrosoft_VisualStudio;
    public static string AssemblyMicrosoft_VisualStudio_Web;
    public static string AssemblyMicrosoft_VSDesigner;
    public static string AssemblyMono_Http;
    public static string AssemblyMono_Posix;
    public static string AssemblyMono_Security;
    public static string AssemblyMono_Messaging_RabbitMQ;
    public static string AssemblyCorlib;
    public static string AssemblySystem;
    public static string AssemblySystem_Data;
    public static string AssemblySystem_Design;
    public static string AssemblySystem_DirectoryServices;
    public static string AssemblySystem_Drawing;
    public static string AssemblySystem_Drawing_Design;
    public static string AssemblySystem_Messaging;
    public static string AssemblySystem_Security;
    public static string AssemblySystem_ServiceProcess;
    public static string AssemblySystem_Web;
    public static string AssemblySystem_Windows_Forms;
    public static string AssemblySystem_2_0;
    public static string AssemblySystemCore_3_5;
    public static string AssemblySystem_Core;
    public static string WindowsBase_3_0;
    public static string AssemblyWindowsBase;
    public static string AssemblyPresentationCore_3_5;
    public static string AssemblyPresentationCore_4_0;
    public static string AssemblyPresentationFramework_3_5;
    public static string AssemblySystemServiceModel_3_0;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal abstract class Mono.DataConverter : object {
    private static DataConverter SwapConv;
    private static DataConverter CopyConv;
    public static bool IsLittleEndian;
    public static DataConverter LittleEndian { get; }
    public static DataConverter BigEndian { get; }
    public static DataConverter Native { get; }
    private static DataConverter();
    public abstract virtual double GetDouble(Byte[] data, int index);
    public abstract virtual float GetFloat(Byte[] data, int index);
    public abstract virtual long GetInt64(Byte[] data, int index);
    public abstract virtual int GetInt32(Byte[] data, int index);
    public abstract virtual short GetInt16(Byte[] data, int index);
    [CLSCompliantAttribute("False")]
public abstract virtual UInt32 GetUInt32(Byte[] data, int index);
    [CLSCompliantAttribute("False")]
public abstract virtual ushort GetUInt16(Byte[] data, int index);
    [CLSCompliantAttribute("False")]
public abstract virtual ulong GetUInt64(Byte[] data, int index);
    public abstract virtual void PutBytes(Byte[] dest, int destIdx, double value);
    public abstract virtual void PutBytes(Byte[] dest, int destIdx, float value);
    public abstract virtual void PutBytes(Byte[] dest, int destIdx, int value);
    public abstract virtual void PutBytes(Byte[] dest, int destIdx, long value);
    public abstract virtual void PutBytes(Byte[] dest, int destIdx, short value);
    [CLSCompliantAttribute("False")]
public abstract virtual void PutBytes(Byte[] dest, int destIdx, ushort value);
    [CLSCompliantAttribute("False")]
public abstract virtual void PutBytes(Byte[] dest, int destIdx, UInt32 value);
    [CLSCompliantAttribute("False")]
public abstract virtual void PutBytes(Byte[] dest, int destIdx, ulong value);
    public Byte[] GetBytes(double value);
    public Byte[] GetBytes(float value);
    public Byte[] GetBytes(int value);
    public Byte[] GetBytes(long value);
    public Byte[] GetBytes(short value);
    [CLSCompliantAttribute("False")]
public Byte[] GetBytes(ushort value);
    [CLSCompliantAttribute("False")]
public Byte[] GetBytes(UInt32 value);
    [CLSCompliantAttribute("False")]
public Byte[] GetBytes(ulong value);
    public static DataConverter get_LittleEndian();
    public static DataConverter get_BigEndian();
    public static DataConverter get_Native();
    private static int Align(int current, int align);
    public static Byte[] Pack(string description, Object[] args);
    public static Byte[] PackEnumerable(string description, IEnumerable args);
    private static bool PackOne(PackContext b, object oarg);
    private static bool Prepare(Byte[] buffer, Int32& idx, int size, Boolean& align);
    public static IList Unpack(string description, Byte[] buffer, int startIndex);
    internal void Check(Byte[] dest, int destIdx, int size);
}
public class Mono.Profiler.Aot.GenericInstRecord : ProfileRecord {
    [CompilerGeneratedAttribute]
private TypeRecord[] <Types>k__BackingField;
    public TypeRecord[] Types { get; public set; }
    public GenericInstRecord(int id, TypeRecord[] types);
    [CompilerGeneratedAttribute]
public TypeRecord[] get_Types();
    [CompilerGeneratedAttribute]
public void set_Types(TypeRecord[] value);
    public virtual string ToString();
}
public class Mono.Profiler.Aot.MethodRecord : ProfileRecord {
    [CompilerGeneratedAttribute]
private TypeRecord <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private GenericInstRecord <GenericInst>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParamCount>k__BackingField;
    public TypeRecord Type { get; public set; }
    public GenericInstRecord GenericInst { get; public set; }
    public string Name { get; public set; }
    public string Signature { get; public set; }
    public int ParamCount { get; public set; }
    public MethodRecord(int id, TypeRecord type, GenericInstRecord ginst, string name, string sig, int param_count);
    [CompilerGeneratedAttribute]
public TypeRecord get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TypeRecord value);
    [CompilerGeneratedAttribute]
public GenericInstRecord get_GenericInst();
    [CompilerGeneratedAttribute]
public void set_GenericInst(GenericInstRecord value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(string value);
    [CompilerGeneratedAttribute]
public int get_ParamCount();
    [CompilerGeneratedAttribute]
public void set_ParamCount(int value);
    public virtual string ToString();
}
public class Mono.Profiler.Aot.ModuleRecord : ProfileRecord {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mvid>k__BackingField;
    public string Name { get; public set; }
    public string Mvid { get; public set; }
    public ModuleRecord(int id, string name, string mvid);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Mvid();
    [CompilerGeneratedAttribute]
public void set_Mvid(string value);
    public virtual string ToString();
}
public abstract class Mono.Profiler.Aot.ProfileBase : object {
    internal static string MAGIC;
    internal static int MAJOR_VERSION;
    internal static int MINOR_VERSION;
}
public class Mono.Profiler.Aot.ProfileData : object {
    [CompilerGeneratedAttribute]
private ModuleRecord[] <Modules>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeRecord[] <Types>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodRecord[] <Methods>k__BackingField;
    public ModuleRecord[] Modules { get; private set; }
    public TypeRecord[] Types { get; private set; }
    public MethodRecord[] Methods { get; private set; }
    public ProfileData(ModuleRecord[] modules, TypeRecord[] types, MethodRecord[] methods);
    [CompilerGeneratedAttribute]
public ModuleRecord[] get_Modules();
    [CompilerGeneratedAttribute]
private void set_Modules(ModuleRecord[] value);
    [CompilerGeneratedAttribute]
public TypeRecord[] get_Types();
    [CompilerGeneratedAttribute]
private void set_Types(TypeRecord[] value);
    [CompilerGeneratedAttribute]
public MethodRecord[] get_Methods();
    [CompilerGeneratedAttribute]
private void set_Methods(MethodRecord[] value);
}
public class Mono.Profiler.Aot.ProfileReader : ProfileBase {
    private DataConverter conv;
    private Byte[] data;
    private int pos;
    private int ReadByte();
    private int ReadInt();
    private string ReadString();
    public ProfileData ReadAllData(Stream stream);
}
public class Mono.Profiler.Aot.ProfileRecord : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public int Id { get; public set; }
    public ProfileRecord(int id);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
}
public class Mono.Profiler.Aot.ProfileWriter : ProfileBase {
    private Stream stream;
    private ProfileData data;
    private int id;
    private Dictionary`2<TypeRecord, int> typeIds;
    private Dictionary`2<ModuleRecord, int> moduleIds;
    private void WriteInt32(int intValue);
    private void WriteString(string str);
    private int AddModule(ModuleRecord m);
    private int AddType(TypeRecord t);
    private int AddGenericInstance(GenericInstRecord gi);
    private void WriteMethod(MethodRecord m);
    private void WriteRecord(RecordType rt, int value);
    public void WriteAllData(Stream s, ProfileData pd);
}
public class Mono.Profiler.Aot.TypeRecord : ProfileRecord {
    [CompilerGeneratedAttribute]
private ModuleRecord <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private GenericInstRecord <GenericInst>k__BackingField;
    public ModuleRecord Module { get; public set; }
    public string Name { get; public set; }
    public string FullName { get; }
    public GenericInstRecord GenericInst { get; public set; }
    public TypeRecord(int id, ModuleRecord module, string name, GenericInstRecord ginst);
    [CompilerGeneratedAttribute]
public ModuleRecord get_Module();
    [CompilerGeneratedAttribute]
public void set_Module(ModuleRecord value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public string get_FullName();
    [CompilerGeneratedAttribute]
public GenericInstRecord get_GenericInst();
    [CompilerGeneratedAttribute]
public void set_GenericInst(GenericInstRecord value);
    public virtual string ToString();
}
public class Mono.Profiler.Log.AllocationEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <ClassPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <VTablePointer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ObjectPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ObjectSize>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<long> <Backtrace>k__BackingField;
    [ObsoleteAttribute("This field is no longer produced.")]
public long ClassPointer { get; internal set; }
    public long VTablePointer { get; internal set; }
    public long ObjectPointer { get; internal set; }
    public long ObjectSize { get; internal set; }
    public IReadOnlyList`1<long> Backtrace { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_ClassPointer();
    [CompilerGeneratedAttribute]
internal void set_ClassPointer(long value);
    [CompilerGeneratedAttribute]
public long get_VTablePointer();
    [CompilerGeneratedAttribute]
internal void set_VTablePointer(long value);
    [CompilerGeneratedAttribute]
public long get_ObjectPointer();
    [CompilerGeneratedAttribute]
internal void set_ObjectPointer(long value);
    [CompilerGeneratedAttribute]
public long get_ObjectSize();
    [CompilerGeneratedAttribute]
internal void set_ObjectSize(long value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<long> get_Backtrace();
    [CompilerGeneratedAttribute]
internal void set_Backtrace(IReadOnlyList`1<long> value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.AotIdEvent : LogEvent {
    [CompilerGeneratedAttribute]
private Guid <AotId>k__BackingField;
    public Guid AotId { get; internal set; }
    [CompilerGeneratedAttribute]
public Guid get_AotId();
    [CompilerGeneratedAttribute]
internal void set_AotId(Guid value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.AppDomainLoadEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <AppDomainId>k__BackingField;
    public long AppDomainId { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_AppDomainId();
    [CompilerGeneratedAttribute]
internal void set_AppDomainId(long value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.AppDomainNameEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <AppDomainId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public long AppDomainId { get; internal set; }
    public string Name { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_AppDomainId();
    [CompilerGeneratedAttribute]
internal void set_AppDomainId(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.AppDomainUnloadEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <AppDomainId>k__BackingField;
    public long AppDomainId { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_AppDomainId();
    [CompilerGeneratedAttribute]
internal void set_AppDomainId(long value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.AssemblyLoadEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <AssemblyPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ImagePointer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public long AssemblyPointer { get; internal set; }
    public long ImagePointer { get; internal set; }
    public string Name { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_AssemblyPointer();
    [CompilerGeneratedAttribute]
internal void set_AssemblyPointer(long value);
    [CompilerGeneratedAttribute]
public long get_ImagePointer();
    [CompilerGeneratedAttribute]
internal void set_ImagePointer(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.AssemblyUnloadEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <AssemblyPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ImagePointer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public long AssemblyPointer { get; internal set; }
    public long ImagePointer { get; internal set; }
    public string Name { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_AssemblyPointer();
    [CompilerGeneratedAttribute]
internal void set_AssemblyPointer(long value);
    [CompilerGeneratedAttribute]
public long get_ImagePointer();
    [CompilerGeneratedAttribute]
internal void set_ImagePointer(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.ClassLoadEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <ClassPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ImagePointer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public long ClassPointer { get; internal set; }
    public long ImagePointer { get; internal set; }
    public string Name { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_ClassPointer();
    [CompilerGeneratedAttribute]
internal void set_ClassPointer(long value);
    [CompilerGeneratedAttribute]
public long get_ImagePointer();
    [CompilerGeneratedAttribute]
internal void set_ImagePointer(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.ContextLoadEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <ContextId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AppDomainId>k__BackingField;
    public long ContextId { get; internal set; }
    public long AppDomainId { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_ContextId();
    [CompilerGeneratedAttribute]
internal void set_ContextId(long value);
    [CompilerGeneratedAttribute]
public long get_AppDomainId();
    [CompilerGeneratedAttribute]
internal void set_AppDomainId(long value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.ContextUnloadEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <ContextId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AppDomainId>k__BackingField;
    public long ContextId { get; internal set; }
    public long AppDomainId { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_ContextId();
    [CompilerGeneratedAttribute]
internal void set_ContextId(long value);
    [CompilerGeneratedAttribute]
public long get_AppDomainId();
    [CompilerGeneratedAttribute]
internal void set_AppDomainId(long value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.CounterDescriptionsEvent : LogEvent {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CounterDescription> <Descriptions>k__BackingField;
    public IReadOnlyList`1<CounterDescription> Descriptions { get; internal set; }
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CounterDescription> get_Descriptions();
    [CompilerGeneratedAttribute]
internal void set_Descriptions(IReadOnlyList`1<CounterDescription> value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.CounterSamplesEvent : LogEvent {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CounterSample> <Samples>k__BackingField;
    public IReadOnlyList`1<CounterSample> Samples { get; internal set; }
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CounterSample> get_Samples();
    [CompilerGeneratedAttribute]
internal void set_Samples(IReadOnlyList`1<CounterSample> value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.EnterEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <MethodPointer>k__BackingField;
    public long MethodPointer { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_MethodPointer();
    [CompilerGeneratedAttribute]
internal void set_MethodPointer(long value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.ExceptionalLeaveEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <MethodPointer>k__BackingField;
    public long MethodPointer { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_MethodPointer();
    [CompilerGeneratedAttribute]
internal void set_MethodPointer(long value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.ExceptionClauseEvent : LogEvent {
    [CompilerGeneratedAttribute]
private LogExceptionClause <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MethodPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ObjectPointer>k__BackingField;
    public LogExceptionClause Type { get; internal set; }
    public long Index { get; internal set; }
    public long MethodPointer { get; internal set; }
    public long ObjectPointer { get; internal set; }
    [CompilerGeneratedAttribute]
public LogExceptionClause get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(LogExceptionClause value);
    [CompilerGeneratedAttribute]
public long get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(long value);
    [CompilerGeneratedAttribute]
public long get_MethodPointer();
    [CompilerGeneratedAttribute]
internal void set_MethodPointer(long value);
    [CompilerGeneratedAttribute]
public long get_ObjectPointer();
    [CompilerGeneratedAttribute]
internal void set_ObjectPointer(long value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.GCEvent : LogEvent {
    [CompilerGeneratedAttribute]
private LogGCEvent <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Generation>k__BackingField;
    public LogGCEvent Type { get; internal set; }
    public int Generation { get; internal set; }
    [CompilerGeneratedAttribute]
public LogGCEvent get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(LogGCEvent value);
    [CompilerGeneratedAttribute]
public int get_Generation();
    [CompilerGeneratedAttribute]
internal void set_Generation(int value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.GCFinalizeBeginEvent : LogEvent {
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.GCFinalizeEndEvent : LogEvent {
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.GCFinalizeObjectBeginEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <ObjectPointer>k__BackingField;
    public long ObjectPointer { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_ObjectPointer();
    [CompilerGeneratedAttribute]
internal void set_ObjectPointer(long value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.GCFinalizeObjectEndEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <ObjectPointer>k__BackingField;
    public long ObjectPointer { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_ObjectPointer();
    [CompilerGeneratedAttribute]
internal void set_ObjectPointer(long value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.GCHandleCreationEvent : LogEvent {
    [CompilerGeneratedAttribute]
private LogGCHandleType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ObjectPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<long> <Backtrace>k__BackingField;
    public LogGCHandleType Type { get; internal set; }
    public long Handle { get; internal set; }
    public long ObjectPointer { get; internal set; }
    public IReadOnlyList`1<long> Backtrace { get; internal set; }
    [CompilerGeneratedAttribute]
public LogGCHandleType get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(LogGCHandleType value);
    [CompilerGeneratedAttribute]
public long get_Handle();
    [CompilerGeneratedAttribute]
internal void set_Handle(long value);
    [CompilerGeneratedAttribute]
public long get_ObjectPointer();
    [CompilerGeneratedAttribute]
internal void set_ObjectPointer(long value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<long> get_Backtrace();
    [CompilerGeneratedAttribute]
internal void set_Backtrace(IReadOnlyList`1<long> value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.GCHandleDeletionEvent : LogEvent {
    [CompilerGeneratedAttribute]
private LogGCHandleType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<long> <Backtrace>k__BackingField;
    public LogGCHandleType Type { get; internal set; }
    public long Handle { get; internal set; }
    public IReadOnlyList`1<long> Backtrace { get; internal set; }
    [CompilerGeneratedAttribute]
public LogGCHandleType get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(LogGCHandleType value);
    [CompilerGeneratedAttribute]
public long get_Handle();
    [CompilerGeneratedAttribute]
internal void set_Handle(long value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<long> get_Backtrace();
    [CompilerGeneratedAttribute]
internal void set_Backtrace(IReadOnlyList`1<long> value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.GCMoveEvent : LogEvent {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<long> <OldObjectPointers>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<long> <NewObjectPointers>k__BackingField;
    public IReadOnlyList`1<long> OldObjectPointers { get; internal set; }
    public IReadOnlyList`1<long> NewObjectPointers { get; internal set; }
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<long> get_OldObjectPointers();
    [CompilerGeneratedAttribute]
internal void set_OldObjectPointers(IReadOnlyList`1<long> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<long> get_NewObjectPointers();
    [CompilerGeneratedAttribute]
internal void set_NewObjectPointers(IReadOnlyList`1<long> value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.GCResizeEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <NewSize>k__BackingField;
    public long NewSize { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_NewSize();
    [CompilerGeneratedAttribute]
internal void set_NewSize(long value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.HeapBeginEvent : LogEvent {
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.HeapEndEvent : LogEvent {
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.HeapObjectEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <ObjectPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ClassPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <VTablePointer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ObjectSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Generation>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<HeapObjectReference> <References>k__BackingField;
    public long ObjectPointer { get; internal set; }
    [ObsoleteAttribute("This field is no longer produced.")]
public long ClassPointer { get; internal set; }
    public long VTablePointer { get; internal set; }
    public long ObjectSize { get; internal set; }
    public int Generation { get; internal set; }
    public IReadOnlyList`1<HeapObjectReference> References { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_ObjectPointer();
    [CompilerGeneratedAttribute]
internal void set_ObjectPointer(long value);
    [CompilerGeneratedAttribute]
public long get_ClassPointer();
    [CompilerGeneratedAttribute]
internal void set_ClassPointer(long value);
    [CompilerGeneratedAttribute]
public long get_VTablePointer();
    [CompilerGeneratedAttribute]
internal void set_VTablePointer(long value);
    [CompilerGeneratedAttribute]
public long get_ObjectSize();
    [CompilerGeneratedAttribute]
internal void set_ObjectSize(long value);
    [CompilerGeneratedAttribute]
public int get_Generation();
    [CompilerGeneratedAttribute]
internal void set_Generation(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<HeapObjectReference> get_References();
    [CompilerGeneratedAttribute]
internal void set_References(IReadOnlyList`1<HeapObjectReference> value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.HeapRootRegisterEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <RootPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RootSize>k__BackingField;
    [CompilerGeneratedAttribute]
private LogHeapRootSource <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public long RootPointer { get; internal set; }
    public long RootSize { get; internal set; }
    public LogHeapRootSource Source { get; internal set; }
    public long Key { get; internal set; }
    public string Name { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_RootPointer();
    [CompilerGeneratedAttribute]
internal void set_RootPointer(long value);
    [CompilerGeneratedAttribute]
public long get_RootSize();
    [CompilerGeneratedAttribute]
internal void set_RootSize(long value);
    [CompilerGeneratedAttribute]
public LogHeapRootSource get_Source();
    [CompilerGeneratedAttribute]
internal void set_Source(LogHeapRootSource value);
    [CompilerGeneratedAttribute]
public long get_Key();
    [CompilerGeneratedAttribute]
internal void set_Key(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.HeapRootsEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <MaxGenerationCollectionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<HeapRoot> <Roots>k__BackingField;
    [ObsoleteAttribute("This field is no longer produced.")]
public long MaxGenerationCollectionCount { get; internal set; }
    public IReadOnlyList`1<HeapRoot> Roots { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_MaxGenerationCollectionCount();
    [CompilerGeneratedAttribute]
internal void set_MaxGenerationCollectionCount(long value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<HeapRoot> get_Roots();
    [CompilerGeneratedAttribute]
internal void set_Roots(IReadOnlyList`1<HeapRoot> value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.HeapRootUnregisterEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <RootPointer>k__BackingField;
    public long RootPointer { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_RootPointer();
    [CompilerGeneratedAttribute]
internal void set_RootPointer(long value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.ImageLoadEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <ImagePointer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ModuleVersionId>k__BackingField;
    public long ImagePointer { get; internal set; }
    public string Name { get; internal set; }
    public Guid ModuleVersionId { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_ImagePointer();
    [CompilerGeneratedAttribute]
internal void set_ImagePointer(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public Guid get_ModuleVersionId();
    [CompilerGeneratedAttribute]
internal void set_ModuleVersionId(Guid value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.ImageUnloadEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <ImagePointer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public long ImagePointer { get; internal set; }
    public string Name { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_ImagePointer();
    [CompilerGeneratedAttribute]
internal void set_ImagePointer(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.JitEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <MethodPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CodePointer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CodeSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public long MethodPointer { get; internal set; }
    public long CodePointer { get; internal set; }
    public long CodeSize { get; internal set; }
    public string Name { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_MethodPointer();
    [CompilerGeneratedAttribute]
internal void set_MethodPointer(long value);
    [CompilerGeneratedAttribute]
public long get_CodePointer();
    [CompilerGeneratedAttribute]
internal void set_CodePointer(long value);
    [CompilerGeneratedAttribute]
public long get_CodeSize();
    [CompilerGeneratedAttribute]
internal void set_CodeSize(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.JitHelperEvent : LogEvent {
    [CompilerGeneratedAttribute]
private LogJitHelper <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BufferPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public LogJitHelper Type { get; internal set; }
    public long BufferPointer { get; internal set; }
    public long BufferSize { get; internal set; }
    public string Name { get; internal set; }
    [CompilerGeneratedAttribute]
public LogJitHelper get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(LogJitHelper value);
    [CompilerGeneratedAttribute]
public long get_BufferPointer();
    [CompilerGeneratedAttribute]
internal void set_BufferPointer(long value);
    [CompilerGeneratedAttribute]
public long get_BufferSize();
    [CompilerGeneratedAttribute]
internal void set_BufferSize(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.LeaveEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <MethodPointer>k__BackingField;
    public long MethodPointer { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_MethodPointer();
    [CompilerGeneratedAttribute]
internal void set_MethodPointer(long value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.LogBufferHeader : object {
    private static int Id;
    [CompilerGeneratedAttribute]
private LogStreamHeader <StreamHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <TimeBase>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PointerBase>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ObjectBase>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MethodBase>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <CurrentTime>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CurrentMethod>k__BackingField;
    public LogStreamHeader StreamHeader { get; }
    public int Length { get; }
    public ulong TimeBase { get; }
    public long PointerBase { get; }
    public long ObjectBase { get; }
    public long ThreadId { get; }
    public long MethodBase { get; }
    internal ulong CurrentTime { get; internal set; }
    internal long CurrentMethod { get; internal set; }
    internal LogBufferHeader(LogStreamHeader streamHeader, LogReader reader);
    [CompilerGeneratedAttribute]
public LogStreamHeader get_StreamHeader();
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public ulong get_TimeBase();
    [CompilerGeneratedAttribute]
public long get_PointerBase();
    [CompilerGeneratedAttribute]
public long get_ObjectBase();
    [CompilerGeneratedAttribute]
public long get_ThreadId();
    [CompilerGeneratedAttribute]
public long get_MethodBase();
    [CompilerGeneratedAttribute]
internal ulong get_CurrentTime();
    [CompilerGeneratedAttribute]
internal void set_CurrentTime(ulong value);
    [CompilerGeneratedAttribute]
internal long get_CurrentMethod();
    [CompilerGeneratedAttribute]
internal void set_CurrentMethod(long value);
}
public enum Mono.Profiler.Log.LogCounterSection : Enum {
    public int value__;
    public static LogCounterSection Jit;
    public static LogCounterSection GC;
    public static LogCounterSection Metadata;
    public static LogCounterSection Generics;
    public static LogCounterSection Security;
    public static LogCounterSection Runtime;
    public static LogCounterSection System;
    public static LogCounterSection User;
    public static LogCounterSection Profiler;
}
public enum Mono.Profiler.Log.LogCounterType : Enum {
    public int value__;
    public static LogCounterType Int32;
    public static LogCounterType UInt32;
    public static LogCounterType Word;
    public static LogCounterType Int64;
    public static LogCounterType UInt64;
    public static LogCounterType Double;
    public static LogCounterType String;
    public static LogCounterType Interval;
}
public enum Mono.Profiler.Log.LogCounterUnit : Enum {
    public int value__;
    public static LogCounterUnit Raw;
    public static LogCounterUnit Bytes;
    public static LogCounterUnit Time;
    public static LogCounterUnit Count;
    public static LogCounterUnit Percentage;
}
public enum Mono.Profiler.Log.LogCounterVariance : Enum {
    public int value__;
    public static LogCounterVariance Monotonic;
    public static LogCounterVariance Constant;
    public static LogCounterVariance Variable;
}
public abstract class Mono.Profiler.Log.LogEvent : object {
    private static BindingFlags PropertyFlags;
    private static string Indent;
    [CompilerGeneratedAttribute]
private LogBufferHeader <Buffer>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Timestamp>k__BackingField;
    public LogBufferHeader Buffer { get; internal set; }
    public ulong Timestamp { get; internal set; }
    [CompilerGeneratedAttribute]
public LogBufferHeader get_Buffer();
    [CompilerGeneratedAttribute]
internal void set_Buffer(LogBufferHeader value);
    [CompilerGeneratedAttribute]
public ulong get_Timestamp();
    [CompilerGeneratedAttribute]
internal void set_Timestamp(ulong value);
    public virtual string ToString();
    private static void ToString(object source, StringBuilder result, string indent, string header, int level);
    internal abstract virtual void Accept(LogEventVisitor visitor);
}
internal enum Mono.Profiler.Log.LogEventType : Enum {
    public int value__;
    public static LogEventType Allocation;
    public static LogEventType GC;
    public static LogEventType Metadata;
    public static LogEventType Method;
    public static LogEventType Exception;
    public static LogEventType Monitor;
    public static LogEventType Heap;
    public static LogEventType Sample;
    public static LogEventType Runtime;
    public static LogEventType Meta;
    public static LogEventType AllocationNoBacktrace;
    public static LogEventType AllocationBacktrace;
    public static LogEventType GCEvent;
    public static LogEventType GCResize;
    public static LogEventType GCMove;
    public static LogEventType GCHandleCreationNoBacktrace;
    public static LogEventType GCHandleDeletionNoBacktrace;
    public static LogEventType GCHandleCreationBacktrace;
    public static LogEventType GCHandleDeletionBacktrace;
    public static LogEventType GCFinalizeBegin;
    public static LogEventType GCFinalizeEnd;
    public static LogEventType GCFinalizeObjectBegin;
    public static LogEventType GCFinalizeObjectEnd;
    public static LogEventType MetadataExtra;
    public static LogEventType MetadataEndLoad;
    public static LogEventType MetadataEndUnload;
    public static LogEventType MethodLeave;
    public static LogEventType MethodEnter;
    public static LogEventType MethodLeaveExceptional;
    public static LogEventType MethodJit;
    public static LogEventType ExceptionThrowNoBacktrace;
    public static LogEventType ExceptionThrowBacktrace;
    public static LogEventType ExceptionClause;
    public static LogEventType MonitorNoBacktrace;
    public static LogEventType MonitorBacktrace;
    public static LogEventType HeapBegin;
    public static LogEventType HeapEnd;
    public static LogEventType HeapObject;
    public static LogEventType HeapRoots;
    public static LogEventType HeapRootRegister;
    public static LogEventType HeapRootUnregister;
    public static LogEventType SampleHit;
    public static LogEventType SampleUnmanagedSymbol;
    public static LogEventType SampleUnmanagedBinary;
    public static LogEventType SampleCounterDescriptions;
    public static LogEventType SampleCounters;
    public static LogEventType RuntimeJitHelper;
    public static LogEventType MetaSynchronizationPoint;
    public static LogEventType MetaAotId;
}
public abstract class Mono.Profiler.Log.LogEventVisitor : object {
    public virtual void VisitBefore(LogEvent ev);
    public virtual void VisitAfter(LogEvent ev);
    public virtual void Visit(AppDomainLoadEvent ev);
    public virtual void Visit(AppDomainUnloadEvent ev);
    public virtual void Visit(AppDomainNameEvent ev);
    public virtual void Visit(ContextLoadEvent ev);
    public virtual void Visit(ContextUnloadEvent ev);
    public virtual void Visit(ThreadStartEvent ev);
    public virtual void Visit(ThreadEndEvent ev);
    public virtual void Visit(ThreadNameEvent ev);
    public virtual void Visit(ImageLoadEvent ev);
    public virtual void Visit(ImageUnloadEvent ev);
    public virtual void Visit(AssemblyLoadEvent ev);
    public virtual void Visit(AssemblyUnloadEvent ev);
    public virtual void Visit(ClassLoadEvent ev);
    public virtual void Visit(VTableLoadEvent ev);
    public virtual void Visit(JitEvent ev);
    public virtual void Visit(JitHelperEvent ev);
    public virtual void Visit(AllocationEvent ev);
    public virtual void Visit(HeapBeginEvent ev);
    public virtual void Visit(HeapEndEvent ev);
    public virtual void Visit(HeapObjectEvent ev);
    public virtual void Visit(HeapRootsEvent ev);
    public virtual void Visit(HeapRootRegisterEvent ev);
    public virtual void Visit(HeapRootUnregisterEvent ev);
    public virtual void Visit(GCEvent ev);
    public virtual void Visit(GCResizeEvent ev);
    public virtual void Visit(GCMoveEvent ev);
    public virtual void Visit(GCHandleCreationEvent ev);
    public virtual void Visit(GCHandleDeletionEvent ev);
    public virtual void Visit(GCFinalizeBeginEvent ev);
    public virtual void Visit(GCFinalizeEndEvent ev);
    public virtual void Visit(GCFinalizeObjectBeginEvent ev);
    public virtual void Visit(GCFinalizeObjectEndEvent ev);
    public virtual void Visit(ThrowEvent ev);
    public virtual void Visit(ExceptionClauseEvent ev);
    public virtual void Visit(EnterEvent ev);
    public virtual void Visit(LeaveEvent ev);
    public virtual void Visit(ExceptionalLeaveEvent ev);
    public virtual void Visit(MonitorEvent ev);
    public virtual void Visit(SampleHitEvent ev);
    public virtual void Visit(CounterSamplesEvent ev);
    public virtual void Visit(CounterDescriptionsEvent ev);
    public virtual void Visit(UnmanagedBinaryEvent ev);
    public virtual void Visit(UnmanagedSymbolEvent ev);
    public virtual void Visit(SynchronizationPointEvent ev);
    public virtual void Visit(AotIdEvent ev);
}
public class Mono.Profiler.Log.LogException : Exception {
    public LogException(string message);
}
public enum Mono.Profiler.Log.LogExceptionClause : Enum {
    public int value__;
    public static LogExceptionClause Catch;
    public static LogExceptionClause Filter;
    public static LogExceptionClause Finally;
    public static LogExceptionClause Fault;
}
public enum Mono.Profiler.Log.LogGCEvent : Enum {
    public int value__;
    public static LogGCEvent PreStopWorld;
    public static LogGCEvent PreStopWorldLocked;
    public static LogGCEvent PostStopWorld;
    public static LogGCEvent Begin;
    public static LogGCEvent End;
    public static LogGCEvent PreStartWorld;
    public static LogGCEvent PostStartWorld;
    public static LogGCEvent PostStartWorldUnlocked;
    [ObsoleteAttribute("This event is no longer produced.")]
public static LogGCEvent MarkBegin;
    [ObsoleteAttribute("This event is no longer produced.")]
public static LogGCEvent MarkEnd;
    [ObsoleteAttribute("This event is no longer produced.")]
public static LogGCEvent ReclaimBegin;
    [ObsoleteAttribute("This event is no longer produced.")]
public static LogGCEvent ReclaimEnd;
}
public enum Mono.Profiler.Log.LogGCHandleType : Enum {
    public int value__;
    public static LogGCHandleType Weak;
    public static LogGCHandleType WeakTrackResurrection;
    public static LogGCHandleType Normal;
    public static LogGCHandleType Pinned;
}
[FlagsAttribute]
[ObsoleteAttribute("The event field using this enum is no longer produced.")]
public enum Mono.Profiler.Log.LogHeapRootAttributes : Enum {
    public int value__;
    public static LogHeapRootAttributes Pinning;
    public static LogHeapRootAttributes WeakReference;
    public static LogHeapRootAttributes Interior;
    public static LogHeapRootAttributes Stack;
    public static LogHeapRootAttributes Finalizer;
    public static LogHeapRootAttributes Handle;
    public static LogHeapRootAttributes Other;
    public static LogHeapRootAttributes Miscellaneous;
    public static LogHeapRootAttributes TypeMask;
}
public enum Mono.Profiler.Log.LogHeapRootSource : Enum {
    public int value__;
    public static LogHeapRootSource External;
    public static LogHeapRootSource Stack;
    public static LogHeapRootSource FinalizerQueue;
    public static LogHeapRootSource Static;
    public static LogHeapRootSource ThreadStatic;
    public static LogHeapRootSource ContextStatic;
    public static LogHeapRootSource GCHandle;
    public static LogHeapRootSource Jit;
    public static LogHeapRootSource Threading;
    public static LogHeapRootSource AppDomain;
    public static LogHeapRootSource Reflection;
    public static LogHeapRootSource Marshal;
    public static LogHeapRootSource ThreadPool;
    public static LogHeapRootSource Debugger;
    public static LogHeapRootSource Handle;
    public static LogHeapRootSource Ephemeron;
    public static LogHeapRootSource Toggleref;
}
public enum Mono.Profiler.Log.LogHeapshotMode : Enum {
    public int value__;
    public static LogHeapshotMode None;
    public static LogHeapshotMode EveryMajor;
    public static LogHeapshotMode OnDemand;
    public static LogHeapshotMode Milliseconds;
    public static LogHeapshotMode Collections;
}
public enum Mono.Profiler.Log.LogJitHelper : Enum {
    public int value__;
    public static LogJitHelper Method;
    [ObsoleteAttribute("This value is no longer produced.")]
public static LogJitHelper MethodTrampoline;
    public static LogJitHelper UnboxTrampoline;
    public static LogJitHelper ImtTrampoline;
    public static LogJitHelper GenericsTrampoline;
    public static LogJitHelper SpecificTrampoline;
    public static LogJitHelper Helper;
    [ObsoleteAttribute("This value is no longer produced.")]
public static LogJitHelper Monitor;
    public static LogJitHelper DelegateInvoke;
    public static LogJitHelper ExceptionHandling;
}
internal enum Mono.Profiler.Log.LogMetadataType : Enum {
    public int value__;
    public static LogMetadataType Class;
    public static LogMetadataType Image;
    public static LogMetadataType Assembly;
    public static LogMetadataType AppDomain;
    public static LogMetadataType Thread;
    public static LogMetadataType Context;
    public static LogMetadataType VTable;
}
public enum Mono.Profiler.Log.LogMonitorEvent : Enum {
    public int value__;
    public static LogMonitorEvent Contention;
    public static LogMonitorEvent Done;
    public static LogMonitorEvent Fail;
}
public class Mono.Profiler.Log.LogProcessor : object {
    [CompilerGeneratedAttribute]
private LogStream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private LogEventVisitor <ImmediateVisitor>k__BackingField;
    [CompilerGeneratedAttribute]
private LogEventVisitor <SortedVisitor>k__BackingField;
    [CompilerGeneratedAttribute]
private LogStreamHeader <StreamHeader>k__BackingField;
    private LogReader _reader;
    private LogBufferHeader _bufferHeader;
    private ulong _time;
    private bool _used;
    public LogStream Stream { get; }
    public LogEventVisitor ImmediateVisitor { get; }
    public LogEventVisitor SortedVisitor { get; }
    public LogStreamHeader StreamHeader { get; private set; }
    public LogProcessor(LogStream stream, LogEventVisitor immediateVisitor, LogEventVisitor sortedVisitor);
    [CompilerGeneratedAttribute]
public LogStream get_Stream();
    [CompilerGeneratedAttribute]
public LogEventVisitor get_ImmediateVisitor();
    [CompilerGeneratedAttribute]
public LogEventVisitor get_SortedVisitor();
    [CompilerGeneratedAttribute]
public LogStreamHeader get_StreamHeader();
    [CompilerGeneratedAttribute]
private void set_StreamHeader(LogStreamHeader value);
    public void Process();
    private static void ProcessEvent(LogEventVisitor visitor, LogEvent ev);
    private void ProcessEvents(List`1<LogEvent> events, CancellationToken token);
    public void Process(CancellationToken token);
    private LogEvent ReadEvent();
    private long ReadPointer();
    private long ReadObject();
    private long ReadMethod();
    private ulong ReadTime();
    private IReadOnlyList`1<long> ReadBacktrace(bool actuallyRead, bool managed);
}
public static class Mono.Profiler.Log.LogProfiler : object {
    private static Nullable`1<bool> _attached;
    public static bool IsAttached { get; }
    public static int MaxStackTraceFrames { get; }
    public static int StackTraceFrames { get; public set; }
    public static LogHeapshotMode HeapshotMode { get; public set; }
    public static int HeapshotMillisecondsFrequency { get; public set; }
    public static int HeapshotCollectionsFrequency { get; public set; }
    public static int CallDepth { get; public set; }
    public static LogSampleMode SampleMode { get; }
    public static int SampleFrequency { get; }
    public static bool ExceptionEventsEnabled { get; public set; }
    public static bool MonitorEventsEnabled { get; public set; }
    public static bool GCEventsEnabled { get; public set; }
    public static bool GCAllocationEventsEnabled { get; public set; }
    public static bool GCMoveEventsEnabled { get; public set; }
    public static bool GCRootEventsEnabled { get; public set; }
    public static bool GCHandleEventsEnabled { get; public set; }
    public static bool GCFinalizationEventsEnabled { get; public set; }
    public static bool CounterEventsEnabled { get; public set; }
    public static bool JitEventsEnabled { get; public set; }
    public static bool get_IsAttached();
    private static int GetMaxStackTraceFrames();
    public static int get_MaxStackTraceFrames();
    private static int GetStackTraceFrames();
    private static void SetStackTraceFrames(int value);
    public static int get_StackTraceFrames();
    public static void set_StackTraceFrames(int value);
    private static LogHeapshotMode GetHeapshotMode();
    private static void SetHeapshotMode(LogHeapshotMode value);
    public static LogHeapshotMode get_HeapshotMode();
    public static void set_HeapshotMode(LogHeapshotMode value);
    private static int GetHeapshotMillisecondsFrequency();
    private static void SetHeapshotMillisecondsFrequency(int value);
    public static int get_HeapshotMillisecondsFrequency();
    public static void set_HeapshotMillisecondsFrequency(int value);
    private static int GetHeapshotCollectionsFrequency();
    private static void SetHeapshotCollectionsFrequency(int value);
    public static int get_HeapshotCollectionsFrequency();
    public static void set_HeapshotCollectionsFrequency(int value);
    public static void TriggerHeapshot();
    private static int GetCallDepth();
    private static void SetCallDepth(int value);
    public static int get_CallDepth();
    public static void set_CallDepth(int value);
    private static void GetSampleMode(LogSampleMode& mode, Int32& frequency);
    private static bool SetSampleMode(LogSampleMode value, int frequency);
    public static LogSampleMode get_SampleMode();
    public static int get_SampleFrequency();
    public static bool SetSampleParameters(LogSampleMode mode, int frequency);
    private static bool GetExceptionEvents();
    private static void SetExceptionEvents(bool value);
    public static bool get_ExceptionEventsEnabled();
    public static void set_ExceptionEventsEnabled(bool value);
    private static bool GetMonitorEvents();
    private static void SetMonitorEvents(bool value);
    public static bool get_MonitorEventsEnabled();
    public static void set_MonitorEventsEnabled(bool value);
    private static bool GetGCEvents();
    private static void SetGCEvents(bool value);
    public static bool get_GCEventsEnabled();
    public static void set_GCEventsEnabled(bool value);
    private static bool GetGCAllocationEvents();
    private static void SetGCAllocationEvents(bool value);
    public static bool get_GCAllocationEventsEnabled();
    public static void set_GCAllocationEventsEnabled(bool value);
    private static bool GetGCMoveEvents();
    private static void SetGCMoveEvents(bool value);
    public static bool get_GCMoveEventsEnabled();
    public static void set_GCMoveEventsEnabled(bool value);
    private static bool GetGCRootEvents();
    private static void SetGCRootEvents(bool value);
    public static bool get_GCRootEventsEnabled();
    public static void set_GCRootEventsEnabled(bool value);
    private static bool GetGCHandleEvents();
    private static void SetGCHandleEvents(bool value);
    public static bool get_GCHandleEventsEnabled();
    public static void set_GCHandleEventsEnabled(bool value);
    private static bool GetGCFinalizationEvents();
    private static void SetGCFinalizationEvents(bool value);
    public static bool get_GCFinalizationEventsEnabled();
    public static void set_GCFinalizationEventsEnabled(bool value);
    private static bool GetCounterEvents();
    private static void SetCounterEvents(bool value);
    public static bool get_CounterEventsEnabled();
    public static void set_CounterEventsEnabled(bool value);
    private static bool GetJitEvents();
    private static void SetJitEvents(bool value);
    public static bool get_JitEventsEnabled();
    public static void set_JitEventsEnabled(bool value);
}
internal class Mono.Profiler.Log.LogReader : object {
    private static Encoding _encoding;
    private BinaryReader _reader;
    private Byte[] _stringBuffer;
    public LogReader(Stream stream, bool leaveOpen);
    private static LogReader();
    public sealed virtual void Dispose();
    public Byte[] ReadBytes(int count);
    public byte ReadByte();
    public ushort ReadUInt16();
    public int ReadInt32();
    public long ReadInt64();
    public ulong ReadUInt64();
    public double ReadDouble();
    public string ReadHeaderString();
    public string ReadCString();
    public long ReadSLeb128();
    public ulong ReadULeb128();
}
public enum Mono.Profiler.Log.LogSampleMode : Enum {
    public int value__;
    public static LogSampleMode None;
    public static LogSampleMode Process;
    public static LogSampleMode Real;
}
public class Mono.Profiler.Log.LogStream : Stream {
    [CompilerGeneratedAttribute]
private Stream <BaseStream>k__BackingField;
    private Byte[] _byteBuffer;
    public Stream BaseStream { get; }
    public bool EndOfStream { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public LogStream(Stream baseStream);
    [CompilerGeneratedAttribute]
public Stream get_BaseStream();
    public virtual bool get_EndOfStream();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual int ReadByte();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
public class Mono.Profiler.Log.LogStreamHeader : object {
    private static int MinVersion;
    private static int MaxVersion;
    private static int Id;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FormatVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <PointerSize>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <StartupTime>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <TimestampStartupTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TimerOverhead>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Architecture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperatingSystem>k__BackingField;
    public Version Version { get; }
    public int FormatVersion { get; }
    public byte PointerSize { get; }
    public ulong StartupTime { get; }
    public ulong TimestampStartupTime { get; }
    public int TimerOverhead { get; }
    public int Flags { get; }
    public int ProcessId { get; }
    public int Port { get; }
    public string Arguments { get; }
    public string Architecture { get; }
    public string OperatingSystem { get; }
    internal LogStreamHeader(LogReader reader);
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
public int get_FormatVersion();
    [CompilerGeneratedAttribute]
public byte get_PointerSize();
    [CompilerGeneratedAttribute]
public ulong get_StartupTime();
    [CompilerGeneratedAttribute]
public ulong get_TimestampStartupTime();
    [CompilerGeneratedAttribute]
public int get_TimerOverhead();
    [CompilerGeneratedAttribute]
public int get_Flags();
    [CompilerGeneratedAttribute]
public int get_ProcessId();
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public string get_Arguments();
    [CompilerGeneratedAttribute]
public string get_Architecture();
    [CompilerGeneratedAttribute]
public string get_OperatingSystem();
}
public enum Mono.Profiler.Log.LogSynchronizationPoint : Enum {
    public int value__;
    public static LogSynchronizationPoint Periodic;
    public static LogSynchronizationPoint WorldStop;
    public static LogSynchronizationPoint WorldStart;
}
public class Mono.Profiler.Log.MonitorEvent : LogEvent {
    [CompilerGeneratedAttribute]
private LogMonitorEvent <Event>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ObjectPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<long> <Backtrace>k__BackingField;
    public LogMonitorEvent Event { get; internal set; }
    public long ObjectPointer { get; internal set; }
    public IReadOnlyList`1<long> Backtrace { get; internal set; }
    [CompilerGeneratedAttribute]
public LogMonitorEvent get_Event();
    [CompilerGeneratedAttribute]
internal void set_Event(LogMonitorEvent value);
    [CompilerGeneratedAttribute]
public long get_ObjectPointer();
    [CompilerGeneratedAttribute]
internal void set_ObjectPointer(long value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<long> get_Backtrace();
    [CompilerGeneratedAttribute]
internal void set_Backtrace(IReadOnlyList`1<long> value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.SampleHitEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<long> <UnmanagedBacktrace>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<long> <ManagedBacktrace>k__BackingField;
    public long ThreadId { get; internal set; }
    public IReadOnlyList`1<long> UnmanagedBacktrace { get; internal set; }
    public IReadOnlyList`1<long> ManagedBacktrace { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_ThreadId();
    [CompilerGeneratedAttribute]
internal void set_ThreadId(long value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<long> get_UnmanagedBacktrace();
    [CompilerGeneratedAttribute]
internal void set_UnmanagedBacktrace(IReadOnlyList`1<long> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<long> get_ManagedBacktrace();
    [CompilerGeneratedAttribute]
internal void set_ManagedBacktrace(IReadOnlyList`1<long> value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.SynchronizationPointEvent : LogEvent {
    [CompilerGeneratedAttribute]
private LogSynchronizationPoint <Type>k__BackingField;
    public LogSynchronizationPoint Type { get; internal set; }
    [CompilerGeneratedAttribute]
public LogSynchronizationPoint get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(LogSynchronizationPoint value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.ThreadEndEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <ThreadId>k__BackingField;
    public long ThreadId { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_ThreadId();
    [CompilerGeneratedAttribute]
internal void set_ThreadId(long value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.ThreadNameEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public long ThreadId { get; internal set; }
    public string Name { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_ThreadId();
    [CompilerGeneratedAttribute]
internal void set_ThreadId(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.ThreadStartEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <ThreadId>k__BackingField;
    public long ThreadId { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_ThreadId();
    [CompilerGeneratedAttribute]
internal void set_ThreadId(long value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.ThrowEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <ObjectPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<long> <Backtrace>k__BackingField;
    public long ObjectPointer { get; internal set; }
    public IReadOnlyList`1<long> Backtrace { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_ObjectPointer();
    [CompilerGeneratedAttribute]
internal void set_ObjectPointer(long value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<long> get_Backtrace();
    [CompilerGeneratedAttribute]
internal void set_Backtrace(IReadOnlyList`1<long> value);
    internal virtual void Accept(LogEventVisitor visitor);
}
[ObsoleteAttribute("This event is no longer produced.")]
public class Mono.Profiler.Log.UnmanagedBinaryEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <SegmentPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SegmentOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SegmentSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public long SegmentPointer { get; internal set; }
    public long SegmentOffset { get; internal set; }
    public long SegmentSize { get; internal set; }
    public string FileName { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_SegmentPointer();
    [CompilerGeneratedAttribute]
internal void set_SegmentPointer(long value);
    [CompilerGeneratedAttribute]
public long get_SegmentOffset();
    [CompilerGeneratedAttribute]
internal void set_SegmentOffset(long value);
    [CompilerGeneratedAttribute]
public long get_SegmentSize();
    [CompilerGeneratedAttribute]
internal void set_SegmentSize(long value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
internal void set_FileName(string value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.UnmanagedSymbolEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <CodePointer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CodeSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public long CodePointer { get; internal set; }
    public long CodeSize { get; internal set; }
    public string Name { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_CodePointer();
    [CompilerGeneratedAttribute]
internal void set_CodePointer(long value);
    [CompilerGeneratedAttribute]
public long get_CodeSize();
    [CompilerGeneratedAttribute]
internal void set_CodeSize(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    internal virtual void Accept(LogEventVisitor visitor);
}
public class Mono.Profiler.Log.VTableLoadEvent : LogEvent {
    [CompilerGeneratedAttribute]
private long <VTablePointer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AppDomainId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ClassPointer>k__BackingField;
    public long VTablePointer { get; internal set; }
    public long AppDomainId { get; internal set; }
    public long ClassPointer { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_VTablePointer();
    [CompilerGeneratedAttribute]
internal void set_VTablePointer(long value);
    [CompilerGeneratedAttribute]
public long get_AppDomainId();
    [CompilerGeneratedAttribute]
internal void set_AppDomainId(long value);
    [CompilerGeneratedAttribute]
public long get_ClassPointer();
    [CompilerGeneratedAttribute]
internal void set_ClassPointer(long value);
    internal virtual void Accept(LogEventVisitor visitor);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
