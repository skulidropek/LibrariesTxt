[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Xamarin.Android.Build.Debugging.Tasks.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string StartDebugger_ipAddress_port { get; }
    internal static string XA0010_Adb { get; }
    internal static string XA0010_AdbTarget { get; }
    internal static string XA0010_NoAbi { get; }
    internal static string XA0010_NoDevice { get; }
    internal static string XA0010_Selected { get; }
    internal static string XA0126_UnableToCopyFastDevTools { get; }
    internal static string XA0127_ErrorDeployingFile { get; }
    internal static string XA0128_RedirectStdioIsEnabled { get; }
    internal static string XA0129_ErrorDeployingFile { get; }
    internal static string XA0130_FastDevNotSupported { get; }
    internal static string XA0131_DeveloperModeNotEnabled { get; }
    internal static string XA0132_PackageNotInstalled { get; }
    internal static string XA0133_RunAsPermissionDenied { get; }
    internal static string XA0134_RunAsPackageNotDebuggable { get; }
    internal static string XA0135_RunAsPackageNotAndApplication { get; }
    internal static string XA0136_RunAsCorruptInstallation { get; }
    internal static string XA0137_RunAsOSCorrupt { get; }
    internal static string XA0138_ErrorReadingStdin { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_StartDebugger_ipAddress_port();
    internal static string get_XA0010_Adb();
    internal static string get_XA0010_AdbTarget();
    internal static string get_XA0010_NoAbi();
    internal static string get_XA0010_NoDevice();
    internal static string get_XA0010_Selected();
    internal static string get_XA0126_UnableToCopyFastDevTools();
    internal static string get_XA0127_ErrorDeployingFile();
    internal static string get_XA0128_RedirectStdioIsEnabled();
    internal static string get_XA0129_ErrorDeployingFile();
    internal static string get_XA0130_FastDevNotSupported();
    internal static string get_XA0131_DeveloperModeNotEnabled();
    internal static string get_XA0132_PackageNotInstalled();
    internal static string get_XA0133_RunAsPermissionDenied();
    internal static string get_XA0134_RunAsPackageNotDebuggable();
    internal static string get_XA0135_RunAsPackageNotAndApplication();
    internal static string get_XA0136_RunAsCorruptInstallation();
    internal static string get_XA0137_RunAsOSCorrupt();
    internal static string get_XA0138_ErrorReadingStdin();
}
public class Xamarin.Android.Tasks.Adb : AndroidRunToolTask {
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Capture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    private Regex filter;
    private StringBuilder sb;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string Command { get; public set; }
    public string Filter { get; public set; }
    public string Capture { get; public set; }
    [OutputAttribute]
public string Output { get; public set; }
    protected string DefaultErrorCode { get; }
    protected string ToolName { get; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(string value);
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(string value);
    [CompilerGeneratedAttribute]
public string get_Capture();
    [CompilerGeneratedAttribute]
public void set_Capture(string value);
    [CompilerGeneratedAttribute]
public string get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(string value);
    protected virtual string get_DefaultErrorCode();
    public virtual bool RunTask();
    protected virtual void LogEventsFromTextOutput(string singleLine, MessageImportance messageImportance);
    protected virtual CommandLineBuilder CreateCommandLine();
    protected virtual string GenerateCommandLineCommands();
    protected virtual string GenerateFullPathToTool();
    protected virtual string get_ToolName();
}
public class Xamarin.Android.Tasks.AndroidHelper : object {
    private static string DefaultErrorCode;
    private static RegisteredTaskObjectLifetime Lifetime;
    private static object NullDevice;
    private static AndroidHelper();
    private static Tuple`2<string, string> GetKey(string target);
    private static void RegisterDevice(IBuildEngine4 engine, string target, AndroidDevice device);
    private static object GetRegisteredDevice(IBuildEngine4 engine, string target);
    public static AndroidDevice ParseTarget(string target, TaskLoggingHelper log, bool logErrors, IBuildEngine4 engine4);
    public static AndroidDevice ParseTarget(string target, Action`1<string> logMessage, Action`2<string, string> logError, bool logErrors, IBuildEngine4 engine4);
    private static void NoDeviceFound(string target, Action`2<string, string> logError, bool logErrors, IBuildEngine4 engine4);
}
public class Xamarin.Android.Tasks.DetectIfAppWasUninstalled : AndroidTask {
    private CancellationTokenSource tcs;
    [CompilerGeneratedAttribute]
private string <AdbTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UploadFlagFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserID>k__BackingField;
    internal static string GetPackagesAsyncKey;
    public string TaskPrefix { get; }
    public string AdbTarget { get; public set; }
    [RequiredAttribute]
public string PackageName { get; public set; }
    [RequiredAttribute]
public string UploadFlagFile { get; public set; }
    public string UserID { get; public set; }
    public CancellationToken Token { get; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_AdbTarget();
    [CompilerGeneratedAttribute]
public void set_AdbTarget(string value);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    [CompilerGeneratedAttribute]
public string get_UploadFlagFile();
    [CompilerGeneratedAttribute]
public void set_UploadFlagFile(string value);
    [CompilerGeneratedAttribute]
public string get_UserID();
    [CompilerGeneratedAttribute]
public void set_UserID(string value);
    public CancellationToken get_Token();
    public sealed virtual void Cancel();
    public virtual bool RunTask();
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.DetectIfAppWasUninstalled/<QueryPackages>d__24")]
private Task`1<List`1<AndroidInstalledPackage>> QueryPackages(AndroidDevice device, string uploadFlagFileFullPath);
    [CompilerGeneratedAttribute]
private bool <QueryPackages>b__24_0(AndroidInstalledPackage x);
}
[ExtensionAttribute]
internal static class Xamarin.Android.Tasks.DeviceExt : object {
    internal static string RunAsCommand;
    private static DeviceExt();
    internal static List`1<string> BuildArgs(string command, PackageInfo packageInfo);
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.DeviceExt/<RunAs>d__2")]
[ExtensionAttribute]
internal static Task`1<string> RunAs(AndroidDevice Device, PackageInfo packageInfo, IEnumerable`1<string> arguments);
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.DeviceExt/<RunAs>d__3")]
[ExtensionAttribute]
internal static Task`1<string> RunAs(AndroidDevice Device, PackageInfo packageInfo, String[] arguments);
}
public class Xamarin.Android.Tasks.FastDeploy : AndroidAsyncTask {
    private static string XAToolsTempPath;
    private static string OverridePath;
    private static string ToolsPath;
    private static int MAX_COMMAND;
    private static int ADB_COMMAND_PADDING;
    [CompilerGeneratedAttribute]
private string <AdbTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UploadFlagFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmbedAssembliesIntoApk>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReInstall>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrimaryCpuAbi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolsAbi>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FastDevFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveUserData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FastDevToolPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FastDevTool>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FastDevFindTool>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FastDevStatTool>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FastDevCpTool>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowDeltaInstall>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DiagnosticLogging>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsingAndroidNETSdk>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserID>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTestOnly>k__BackingField;
    private AndroidDevice Device;
    private DateTime lastUpload;
    private int BufferSize;
    private PackageInfo packageInfo;
    private Stopwatch stopWatch;
    private Queue`1<string> diagnosticLogs;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static List`1<ValueTuple`3<string, string, string>> runas_codes;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static List`1<ValueTuple`2<string, string>> error_codes;
    public string TaskPrefix { get; }
    public string AdbTarget { get; public set; }
    public string UploadFlagFile { get; public set; }
    public bool EmbedAssembliesIntoApk { get; public set; }
    public bool ReInstall { get; public set; }
    [RequiredAttribute]
public string PackageName { get; public set; }
    public string PackageFile { get; public set; }
    public string PrimaryCpuAbi { get; public set; }
    public string ToolsAbi { get; public set; }
    public ITaskItem[] FastDevFiles { get; public set; }
    public bool PreserveUserData { get; public set; }
    [RequiredAttribute]
public string FastDevToolPath { get; public set; }
    public string FastDevTool { get; public set; }
    public string FastDevFindTool { get; public set; }
    public string FastDevStatTool { get; public set; }
    public string FastDevCpTool { get; public set; }
    [RequiredAttribute]
public string ToolVersion { get; public set; }
    public bool AllowDeltaInstall { get; public set; }
    public bool DiagnosticLogging { get; public set; }
    public bool UsingAndroidNETSdk { get; public set; }
    public string UserID { get; public set; }
    public bool IsTestOnly { get; public set; }
    protected string ToolsFullPath { get; }
    protected string OverrideFullPath { get; }
    private static FastDeploy();
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_AdbTarget();
    [CompilerGeneratedAttribute]
public void set_AdbTarget(string value);
    [CompilerGeneratedAttribute]
public string get_UploadFlagFile();
    [CompilerGeneratedAttribute]
public void set_UploadFlagFile(string value);
    [CompilerGeneratedAttribute]
public bool get_EmbedAssembliesIntoApk();
    [CompilerGeneratedAttribute]
public void set_EmbedAssembliesIntoApk(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReInstall();
    [CompilerGeneratedAttribute]
public void set_ReInstall(bool value);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    [CompilerGeneratedAttribute]
public string get_PackageFile();
    [CompilerGeneratedAttribute]
public void set_PackageFile(string value);
    [CompilerGeneratedAttribute]
public string get_PrimaryCpuAbi();
    [CompilerGeneratedAttribute]
public void set_PrimaryCpuAbi(string value);
    [CompilerGeneratedAttribute]
public string get_ToolsAbi();
    [CompilerGeneratedAttribute]
public void set_ToolsAbi(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FastDevFiles();
    [CompilerGeneratedAttribute]
public void set_FastDevFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_PreserveUserData();
    [CompilerGeneratedAttribute]
public void set_PreserveUserData(bool value);
    [CompilerGeneratedAttribute]
public string get_FastDevToolPath();
    [CompilerGeneratedAttribute]
public void set_FastDevToolPath(string value);
    [CompilerGeneratedAttribute]
public string get_FastDevTool();
    [CompilerGeneratedAttribute]
public void set_FastDevTool(string value);
    [CompilerGeneratedAttribute]
public string get_FastDevFindTool();
    [CompilerGeneratedAttribute]
public void set_FastDevFindTool(string value);
    [CompilerGeneratedAttribute]
public string get_FastDevStatTool();
    [CompilerGeneratedAttribute]
public void set_FastDevStatTool(string value);
    [CompilerGeneratedAttribute]
public string get_FastDevCpTool();
    [CompilerGeneratedAttribute]
public void set_FastDevCpTool(string value);
    [CompilerGeneratedAttribute]
public string get_ToolVersion();
    [CompilerGeneratedAttribute]
public void set_ToolVersion(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowDeltaInstall();
    [CompilerGeneratedAttribute]
public void set_AllowDeltaInstall(bool value);
    [CompilerGeneratedAttribute]
public bool get_DiagnosticLogging();
    [CompilerGeneratedAttribute]
public void set_DiagnosticLogging(bool value);
    [CompilerGeneratedAttribute]
public bool get_UsingAndroidNETSdk();
    [CompilerGeneratedAttribute]
public void set_UsingAndroidNETSdk(bool value);
    [CompilerGeneratedAttribute]
public string get_UserID();
    [CompilerGeneratedAttribute]
public void set_UserID(string value);
    [CompilerGeneratedAttribute]
public bool get_IsTestOnly();
    [CompilerGeneratedAttribute]
public void set_IsTestOnly(bool value);
    protected string get_ToolsFullPath();
    protected string get_OverrideFullPath();
    private void StartTiming();
    private long GetElapsedTimeAndRestart();
    private void DebugHandler(string task, string message);
    private void ReportProgressToIDE(int current, int total);
    private void LogCustomBuildEvent(CustomBuildEventArgs e);
    private void LogDebugMessageWithTiming(string message);
    private void LogDiagnostic(string message);
    private void PrintDiagnostics();
    public virtual bool Execute();
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.FastDeploy/<RunTaskAsync>d__111")]
public virtual Task RunTaskAsync();
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.FastDeploy/<RunInstall>d__112")]
public Task RunInstall();
    private bool IsPackageFileOutOfDate();
    private int CompressLZ4(Byte[]& data, int len, Byte[]& outBuffer, LZ4Level lZ4Level);
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.FastDeploy/<CheckAppInstalledAndDebuggable>d__115")]
private Task CheckAppInstalledAndDebuggable(string packageName);
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.FastDeploy/<RemoveOverrideDirectory>d__116")]
protected Task RemoveOverrideDirectory();
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.FastDeploy/<TerminateApp>d__117")]
protected Task TerminateApp();
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.FastDeploy/<InstallPackage>d__118")]
protected Task InstallPackage(bool installed);
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.FastDeploy/<ShouldThrowIfPackageInstallFailed>d__119")]
private Task`1<bool> ShouldThrowIfPackageInstallFailed(PackageAlreadyExistsException e);
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.FastDeploy/<InstallFastDevTools>d__120")]
protected Task`1<bool> InstallFastDevTools(string toolPath);
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.FastDeploy/<PushFileToDevice>d__121")]
private Task`1<bool> PushFileToDevice(AndroidDevice device, string packageName, string toolPath, string file, string target, CancellationToken token);
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.FastDeploy/<PushFileTextToDevice>d__122")]
private Task`1<bool> PushFileTextToDevice(AndroidDevice device, string packageName, string fileContents, Encoding encoding, string target, CancellationToken token);
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.FastDeploy/<PushStreamToDeviceWithTool>d__123")]
private Task`1<bool> PushStreamToDeviceWithTool(AndroidDevice device, string packageName, string toolPath, Stream stream, string target, DateTimeOffset modifiedDateTime, CancellationToken token);
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.FastDeploy/<PushStreamToDevice>d__124")]
private Task`1<bool> PushStreamToDevice(AndroidDevice device, string packageName, string toolPath, Stream stream, string target, DateTimeOffset modifiedDateTime, CancellationToken token);
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.FastDeploy/<GetDeviceBlockSize>d__125")]
private Task`1<int> GetDeviceBlockSize(string toolPath);
    private string GetTargetPath(ITaskItem file);
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.FastDeploy/<DeployFastDevFiles>d__127")]
protected Task DeployFastDevFiles(string toolPath, string overridePath);
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.FastDeploy/<DeployFileWithFastDevTool>d__128")]
private Task`1<bool> DeployFileWithFastDevTool(ITaskItem file, string toolPath, string overridePath, Byte[] buffer, Byte[] compressed, LZ4Level lz4level, DateTimeOffset modifiedDateTime);
    private string GetErrorCode(Exception ex);
    private bool RaiseRunAsError(string error);
    private string GetFullPath(string dir);
    private static string GetErrorCode(string message);
}
public class Xamarin.Android.Tasks.GenerateGdbEnvironment : Task {
    [CompilerGeneratedAttribute]
private string <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GdbSymbolsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GdbTargetPort>k__BackingField;
    [RequiredAttribute]
public string OutputFile { get; public set; }
    public string GdbSymbolsPath { get; public set; }
    public int GdbTargetPort { get; public set; }
    [CompilerGeneratedAttribute]
public string get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(string value);
    [CompilerGeneratedAttribute]
public string get_GdbSymbolsPath();
    [CompilerGeneratedAttribute]
public void set_GdbSymbolsPath(string value);
    [CompilerGeneratedAttribute]
public int get_GdbTargetPort();
    [CompilerGeneratedAttribute]
public void set_GdbTargetPort(int value);
    public virtual bool Execute();
    private static string FixupPath(string path);
}
public class Xamarin.Android.Tasks.GetGdbSymbols : AndroidTask {
    [CompilerGeneratedAttribute]
private string <AdbTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GdbSymbolsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Package>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrimaryCpuAbi>k__BackingField;
    public string TaskPrefix { get; }
    public string AdbTarget { get; public set; }
    [RequiredAttribute]
public string GdbSymbolsPath { get; public set; }
    [RequiredAttribute]
public string Package { get; public set; }
    [RequiredAttribute]
public string OutputPath { get; public set; }
    [RequiredAttribute]
public string PrimaryCpuAbi { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_AdbTarget();
    [CompilerGeneratedAttribute]
public void set_AdbTarget(string value);
    [CompilerGeneratedAttribute]
public string get_GdbSymbolsPath();
    [CompilerGeneratedAttribute]
public void set_GdbSymbolsPath(string value);
    [CompilerGeneratedAttribute]
public string get_Package();
    [CompilerGeneratedAttribute]
public void set_Package(string value);
    [CompilerGeneratedAttribute]
public string get_OutputPath();
    [CompilerGeneratedAttribute]
public void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
public string get_PrimaryCpuAbi();
    [CompilerGeneratedAttribute]
public void set_PrimaryCpuAbi(string value);
    public virtual bool RunTask();
    private void ExtractFilesFromPath(string apk, string path);
}
public class Xamarin.Android.Tasks.GetPrimaryCpuAbi : AndroidAsyncTask {
    private static Dictionary`2<string, string> UnameAbiMapping;
    [CompilerGeneratedAttribute]
private string <AdbTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdbOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DevicePropertyCache>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <RuntimeIdentifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FoundDevices>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResultingAbi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolsAbi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuntimeIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SdkVersion>k__BackingField;
    private AndroidDevice device;
    public string TaskPrefix { get; }
    public string AdbTarget { get; public set; }
    public string AdbOptions { get; public set; }
    public string AndroidPackage { get; public set; }
    public string DevicePropertyCache { get; public set; }
    public String[] RuntimeIdentifiers { get; public set; }
    [OutputAttribute]
public bool FoundDevices { get; public set; }
    [OutputAttribute]
public string ResultingAbi { get; public set; }
    [OutputAttribute]
public string ToolsAbi { get; public set; }
    [OutputAttribute]
public string RuntimeIdentifier { get; public set; }
    [OutputAttribute]
public int SdkVersion { get; public set; }
    private static GetPrimaryCpuAbi();
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_AdbTarget();
    [CompilerGeneratedAttribute]
public void set_AdbTarget(string value);
    [CompilerGeneratedAttribute]
public string get_AdbOptions();
    [CompilerGeneratedAttribute]
public void set_AdbOptions(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidPackage();
    [CompilerGeneratedAttribute]
public void set_AndroidPackage(string value);
    [CompilerGeneratedAttribute]
public string get_DevicePropertyCache();
    [CompilerGeneratedAttribute]
public void set_DevicePropertyCache(string value);
    [CompilerGeneratedAttribute]
public String[] get_RuntimeIdentifiers();
    [CompilerGeneratedAttribute]
public void set_RuntimeIdentifiers(String[] value);
    [CompilerGeneratedAttribute]
public bool get_FoundDevices();
    [CompilerGeneratedAttribute]
public void set_FoundDevices(bool value);
    [CompilerGeneratedAttribute]
public string get_ResultingAbi();
    [CompilerGeneratedAttribute]
public void set_ResultingAbi(string value);
    [CompilerGeneratedAttribute]
public string get_ToolsAbi();
    [CompilerGeneratedAttribute]
public void set_ToolsAbi(string value);
    [CompilerGeneratedAttribute]
public string get_RuntimeIdentifier();
    [CompilerGeneratedAttribute]
public void set_RuntimeIdentifier(string value);
    [CompilerGeneratedAttribute]
public int get_SdkVersion();
    [CompilerGeneratedAttribute]
public void set_SdkVersion(int value);
    public virtual bool Execute();
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.GetPrimaryCpuAbi/<RunTaskAsync>d__45")]
public virtual Task RunTaskAsync();
    private void DebugHandler(string task, string message);
    private void LogOutputs();
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.GetPrimaryCpuAbi/<GetAbiFromPmDump>d__48")]
private Task`1<string> GetAbiFromPmDump(AndroidDevice device);
    private string GetRuntimeIdentifier();
    [CompilerGeneratedAttribute]
private bool <RunTaskAsync>b__45_0(XElement a);
}
public class Xamarin.Android.Tasks.InstallPackageAssemblies : AsyncTask {
    [CompilerGeneratedAttribute]
private string <AdbInstallOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdbOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdbTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AaptToolPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AaptToolExe>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApkFileSigned>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveUserData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmbedAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AndroidApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSharedRuntime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableInstantRun>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateOutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedUserAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ExtraFastDevFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <NativeLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <DalvikClasses>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <TypemapFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrimaryCpuAbi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SDCardDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <External>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManifestTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidPlatformToolsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidNdkPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidSdkPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaSdkPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowDeltaInstall>k__BackingField;
    private static string AndroidDeploySessionKey;
    private int progress;
    private static List`1<Tuple`2<string, string>> error_codes;
    public string AdbInstallOptions { get; public set; }
    public string AdbOptions { get; public set; }
    public string AdbTarget { get; public set; }
    [RequiredAttribute]
public string AaptToolPath { get; public set; }
    public string AaptToolExe { get; public set; }
    public string ApkFileSigned { get; public set; }
    [RequiredAttribute]
public bool PreserveUserData { get; public set; }
    [RequiredAttribute]
public bool EmbedAssemblies { get; public set; }
    [RequiredAttribute]
public string PackageName { get; public set; }
    [RequiredAttribute]
public int AndroidApiLevel { get; public set; }
    [RequiredAttribute]
public bool UseSharedRuntime { get; public set; }
    [RequiredAttribute]
public bool EnableInstantRun { get; public set; }
    [RequiredAttribute]
public string IntermediateOutputPath { get; public set; }
    public ITaskItem[] ResolvedAssemblies { get; public set; }
    public ITaskItem[] ResolvedUserAssemblies { get; public set; }
    public ITaskItem[] ExtraFastDevFiles { get; public set; }
    public ITaskItem[] NativeLibraries { get; public set; }
    public ITaskItem[] DalvikClasses { get; public set; }
    public ITaskItem[] TypemapFiles { get; public set; }
    public string PrimaryCpuAbi { get; public set; }
    public string SDCardDirectory { get; public set; }
    public bool External { get; public set; }
    public string ManifestTemplate { get; public set; }
    public string AndroidPlatformToolsDirectory { get; public set; }
    public string AndroidNdkPath { get; public set; }
    public string AndroidSdkPath { get; public set; }
    public string JavaSdkPath { get; public set; }
    public bool AllowDeltaInstall { get; public set; }
    private static InstallPackageAssemblies();
    [CompilerGeneratedAttribute]
public string get_AdbInstallOptions();
    [CompilerGeneratedAttribute]
public void set_AdbInstallOptions(string value);
    [CompilerGeneratedAttribute]
public string get_AdbOptions();
    [CompilerGeneratedAttribute]
public void set_AdbOptions(string value);
    [CompilerGeneratedAttribute]
public string get_AdbTarget();
    [CompilerGeneratedAttribute]
public void set_AdbTarget(string value);
    [CompilerGeneratedAttribute]
public string get_AaptToolPath();
    [CompilerGeneratedAttribute]
public void set_AaptToolPath(string value);
    [CompilerGeneratedAttribute]
public string get_AaptToolExe();
    [CompilerGeneratedAttribute]
public void set_AaptToolExe(string value);
    [CompilerGeneratedAttribute]
public string get_ApkFileSigned();
    [CompilerGeneratedAttribute]
public void set_ApkFileSigned(string value);
    [CompilerGeneratedAttribute]
public bool get_PreserveUserData();
    [CompilerGeneratedAttribute]
public void set_PreserveUserData(bool value);
    [CompilerGeneratedAttribute]
public bool get_EmbedAssemblies();
    [CompilerGeneratedAttribute]
public void set_EmbedAssemblies(bool value);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    [CompilerGeneratedAttribute]
public int get_AndroidApiLevel();
    [CompilerGeneratedAttribute]
public void set_AndroidApiLevel(int value);
    [CompilerGeneratedAttribute]
public bool get_UseSharedRuntime();
    [CompilerGeneratedAttribute]
public void set_UseSharedRuntime(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableInstantRun();
    [CompilerGeneratedAttribute]
public void set_EnableInstantRun(bool value);
    [CompilerGeneratedAttribute]
public string get_IntermediateOutputPath();
    [CompilerGeneratedAttribute]
public void set_IntermediateOutputPath(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedAssemblies();
    [CompilerGeneratedAttribute]
public void set_ResolvedAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedUserAssemblies();
    [CompilerGeneratedAttribute]
public void set_ResolvedUserAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ExtraFastDevFiles();
    [CompilerGeneratedAttribute]
public void set_ExtraFastDevFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_NativeLibraries();
    [CompilerGeneratedAttribute]
public void set_NativeLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_DalvikClasses();
    [CompilerGeneratedAttribute]
public void set_DalvikClasses(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_TypemapFiles();
    [CompilerGeneratedAttribute]
public void set_TypemapFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_PrimaryCpuAbi();
    [CompilerGeneratedAttribute]
public void set_PrimaryCpuAbi(string value);
    [CompilerGeneratedAttribute]
public string get_SDCardDirectory();
    [CompilerGeneratedAttribute]
public void set_SDCardDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_External();
    [CompilerGeneratedAttribute]
public void set_External(bool value);
    [CompilerGeneratedAttribute]
public string get_ManifestTemplate();
    [CompilerGeneratedAttribute]
public void set_ManifestTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidPlatformToolsDirectory();
    [CompilerGeneratedAttribute]
public void set_AndroidPlatformToolsDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidNdkPath();
    [CompilerGeneratedAttribute]
public void set_AndroidNdkPath(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidSdkPath();
    [CompilerGeneratedAttribute]
public void set_AndroidSdkPath(string value);
    [CompilerGeneratedAttribute]
public string get_JavaSdkPath();
    [CompilerGeneratedAttribute]
public void set_JavaSdkPath(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowDeltaInstall();
    [CompilerGeneratedAttribute]
public void set_AllowDeltaInstall(bool value);
    public virtual bool Execute();
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.InstallPackageAssemblies/<RunTask>d__114")]
private Task RunTask();
    private string GetErrorCode(Exception ex);
    private string GetAaptPath();
    private void PrintProgress(long currentCopiedBytes, long currentTotalBytes, long allCopiedBytes, long allTotalBytes);
    private void TaskHandler(AndroidTaskLog t);
    private void ErrorHandler(string task, string message);
    private void WarningHandler(string task, string message);
    private void DebugHandler(string task, string message);
    private void InfoHandler(string task, string message);
    public sealed virtual void BeginStep(string step);
    public sealed virtual void EndStep(string step);
    public sealed virtual void ReportMessage(string message);
    public sealed virtual void ShowErrorDialog(string title, string message);
    public sealed virtual void ShowErrorDialog(string title, string message, Exception ex);
    public sealed virtual void ReportProgress(long copiedBytes, long totalBytes);
    private static string GetErrorCode(string message);
}
public class Xamarin.Android.Tasks.MoveSubfolder : Move {
    [CompilerGeneratedAttribute]
private string <SourceFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalPath>k__BackingField;
    [RequiredAttribute]
public string SourceFolder { get; public set; }
    public string AdditionalPath { get; public set; }
    public ITaskItem[] SourceFiles { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SourceFolder();
    [CompilerGeneratedAttribute]
public void set_SourceFolder(string value);
    [CompilerGeneratedAttribute]
public string get_AdditionalPath();
    [CompilerGeneratedAttribute]
public void set_AdditionalPath(string value);
    public ITaskItem[] get_SourceFiles();
    public void set_SourceFiles(ITaskItem[] value);
    public virtual bool Execute();
}
public class Xamarin.Android.Tasks.ResolveXamarinAndroidTools : Task {
    [CompilerGeneratedAttribute]
private string <AndroidNdkPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidSdkPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaSdkPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MonoAndroidToolsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MonoAndroidBinDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ReferenceAssemblyPaths>k__BackingField;
    private static string AndroidSdkKey;
    private static string MonoDroidSdkKey;
    private static RegisteredTaskObjectLifetime lifetime;
    public string AndroidNdkPath { get; public set; }
    public string AndroidSdkPath { get; public set; }
    public string JavaSdkPath { get; public set; }
    [RequiredAttribute]
public string MonoAndroidToolsPath { get; public set; }
    [RequiredAttribute]
public string MonoAndroidBinDirectory { get; public set; }
    [RequiredAttribute]
public String[] ReferenceAssemblyPaths { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AndroidNdkPath();
    [CompilerGeneratedAttribute]
public void set_AndroidNdkPath(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidSdkPath();
    [CompilerGeneratedAttribute]
public void set_AndroidSdkPath(string value);
    [CompilerGeneratedAttribute]
public string get_JavaSdkPath();
    [CompilerGeneratedAttribute]
public void set_JavaSdkPath(string value);
    [CompilerGeneratedAttribute]
public string get_MonoAndroidToolsPath();
    [CompilerGeneratedAttribute]
public void set_MonoAndroidToolsPath(string value);
    [CompilerGeneratedAttribute]
public string get_MonoAndroidBinDirectory();
    [CompilerGeneratedAttribute]
public void set_MonoAndroidBinDirectory(string value);
    [CompilerGeneratedAttribute]
public String[] get_ReferenceAssemblyPaths();
    [CompilerGeneratedAttribute]
public void set_ReferenceAssemblyPaths(String[] value);
    public virtual bool Execute();
    private void RunStaticConstructors(Type[] types);
    private bool RunTask();
    private void ErrorHandler(string task, string message);
    private void WarningHandler(string task, string message);
    private void DebugHandler(string task, string message);
    private void InfoHandler(string task, string message);
}
public class Xamarin.Android.Tasks.RunActivity : AndroidAsyncTask {
    [CompilerGeneratedAttribute]
private string <ManifestFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdbTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AttachDebugger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Server>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UserID>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceStop>k__BackingField;
    private AndroidDevice Device;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string ManifestFile { get; public set; }
    [RequiredAttribute]
public string PackageName { get; public set; }
    public string ActivityName { get; public set; }
    public string AdbTarget { get; public set; }
    public bool AttachDebugger { get; public set; }
    public bool Server { get; public set; }
    public string Port { get; public set; }
    public int UserID { get; public set; }
    public bool ForceStop { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_ManifestFile();
    [CompilerGeneratedAttribute]
public void set_ManifestFile(string value);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    [CompilerGeneratedAttribute]
public string get_ActivityName();
    [CompilerGeneratedAttribute]
public void set_ActivityName(string value);
    [CompilerGeneratedAttribute]
public string get_AdbTarget();
    [CompilerGeneratedAttribute]
public void set_AdbTarget(string value);
    [CompilerGeneratedAttribute]
public bool get_AttachDebugger();
    [CompilerGeneratedAttribute]
public void set_AttachDebugger(bool value);
    [CompilerGeneratedAttribute]
public bool get_Server();
    [CompilerGeneratedAttribute]
public void set_Server(bool value);
    [CompilerGeneratedAttribute]
public string get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(string value);
    [CompilerGeneratedAttribute]
public int get_UserID();
    [CompilerGeneratedAttribute]
public void set_UserID(int value);
    [CompilerGeneratedAttribute]
public bool get_ForceStop();
    [CompilerGeneratedAttribute]
public void set_ForceStop(bool value);
    public virtual bool Execute();
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.RunActivity/<RunTaskAsync>d__41")]
public virtual Task RunTaskAsync();
    [CompilerGeneratedAttribute]
private void <RunTaskAsync>b__41_0(string s);
}
public class Xamarin.Android.Tasks.RunTests : ToolTask {
    [CompilerGeneratedAttribute]
private string <AdbTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdbOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManifestFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetTestActivity>k__BackingField;
    public string AdbTarget { get; public set; }
    public string AdbOptions { get; public set; }
    [RequiredAttribute]
public string AndroidPackage { get; public set; }
    [RequiredAttribute]
public string ManifestFile { get; public set; }
    public string TargetTestActivity { get; public set; }
    protected string ToolName { get; }
    [CompilerGeneratedAttribute]
public string get_AdbTarget();
    [CompilerGeneratedAttribute]
public void set_AdbTarget(string value);
    [CompilerGeneratedAttribute]
public string get_AdbOptions();
    [CompilerGeneratedAttribute]
public void set_AdbOptions(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidPackage();
    [CompilerGeneratedAttribute]
public void set_AndroidPackage(string value);
    [CompilerGeneratedAttribute]
public string get_ManifestFile();
    [CompilerGeneratedAttribute]
public void set_ManifestFile(string value);
    [CompilerGeneratedAttribute]
public string get_TargetTestActivity();
    [CompilerGeneratedAttribute]
public void set_TargetTestActivity(string value);
    protected virtual string get_ToolName();
    protected virtual string GenerateFullPathToTool();
    protected virtual string GenerateCommandLineCommands();
}
public class Xamarin.Android.Tasks.WaitForAppDetection : AndroidAsyncTask {
    private Task`1<List`1<AndroidInstalledPackage>> getPackagesAsync;
    public string TaskPrefix { get; }
    public virtual string get_TaskPrefix();
    public virtual bool Execute();
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.WaitForAppDetection/<RunTaskAsync>d__4")]
public virtual Task RunTaskAsync();
}
