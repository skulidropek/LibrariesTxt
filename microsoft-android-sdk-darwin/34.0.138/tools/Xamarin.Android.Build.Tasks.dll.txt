[AttributeUsageAttribute("4")]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public class Android.App.ActivityAttribute : Attribute {
    private bool _AllowEmbedded;
    private bool _AutoRemoveFromRecents;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private string _Banner;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private string _ColorMode;
    private DocumentLaunchMode _DocumentLaunchMode;
    private bool _HardwareAccelerated;
    private bool _Immersive;
    private LayoutDirection _LayoutDirection;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private string _LockTaskMode;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private string _Logo;
    private float _MaxAspectRatio;
    private int _MaxRecents;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private string _ParentActivity;
    private ActivityPersistableMode _PersistableMode;
    private ConfigChanges _RecreateOnConfigChanges;
    private bool _RelinquishTaskIdentity;
    private bool _ResizeableActivity;
    private bool _ResumeWhilePausing;
    private WindowRotationAnimation _RotationAnimation;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private string _RoundIcon;
    private bool _ShowForAllUsers;
    private bool _ShowOnLockScreen;
    private bool _ShowWhenLocked;
    private bool _SingleUser;
    private bool _SupportsPictureInPicture;
    private bool _TurnScreenOn;
    private UiOptions _UiOptions;
    private bool _VisibleToInstantApps;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private static ManifestDocumentElement`1<ActivityAttribute> mapping;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private TypeDefinition type;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private ICollection`1<string> specified;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowTaskReparenting>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlwaysRetainTaskState>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClearTaskOnLaunch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColorMode>k__BackingField;
    [CompilerGeneratedAttribute]
private ConfigChanges <ConfigurationChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DirectBootAware>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnableVrMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeFromRecents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Exported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FinishOnCloseSystemDialogs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FinishOnTaskLaunch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private LaunchMode <LaunchMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MainLauncher>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MaxAspectRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultiProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoHistory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Permission>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Process>k__BackingField;
    [CompilerGeneratedAttribute]
private ConfigChanges <RecreateOnConfigChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResizeableActivity>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowRotationAnimation <RotationAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsPictureInPicture>k__BackingField;
    [CompilerGeneratedAttribute]
private ScreenOrientation <ScreenOrientation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StateNotNeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TaskAffinity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Theme>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VisibleToInstantApps>k__BackingField;
    [CompilerGeneratedAttribute]
private SoftInput <WindowSoftInputMode>k__BackingField;
    public string Name { get; public set; }
    public bool AllowTaskReparenting { get; public set; }
    public bool AlwaysRetainTaskState { get; public set; }
    public bool ClearTaskOnLaunch { get; public set; }
    public string ColorMode { get; public set; }
    public ConfigChanges ConfigurationChanges { get; public set; }
    public string Description { get; public set; }
    public bool DirectBootAware { get; public set; }
    public string EnableVrMode { get; public set; }
    public bool Enabled { get; public set; }
    public bool ExcludeFromRecents { get; public set; }
    public bool Exported { get; public set; }
    public bool FinishOnCloseSystemDialogs { get; public set; }
    public bool FinishOnTaskLaunch { get; public set; }
    public string Icon { get; public set; }
    public string Label { get; public set; }
    public LaunchMode LaunchMode { get; public set; }
    public bool MainLauncher { get; public set; }
    public float MaxAspectRatio { get; public set; }
    public bool MultiProcess { get; public set; }
    public bool NoHistory { get; public set; }
    public string Permission { get; public set; }
    public string Process { get; public set; }
    public ConfigChanges RecreateOnConfigChanges { get; public set; }
    public bool ResizeableActivity { get; public set; }
    public WindowRotationAnimation RotationAnimation { get; public set; }
    public bool SupportsPictureInPicture { get; public set; }
    public ScreenOrientation ScreenOrientation { get; public set; }
    public bool StateNotNeeded { get; public set; }
    public string TaskAffinity { get; public set; }
    public string Theme { get; public set; }
    public bool VisibleToInstantApps { get; public set; }
    public SoftInput WindowSoftInputMode { get; public set; }
    private static ActivityAttribute();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public static ActivityAttribute FromTypeDefinition(TypeDefinition type);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
internal XElement ToElement(IAssemblyResolver resolver, string packageName, TypeDefinitionCache cache, int targetSdkVersion);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowTaskReparenting();
    [CompilerGeneratedAttribute]
public void set_AllowTaskReparenting(bool value);
    [CompilerGeneratedAttribute]
public bool get_AlwaysRetainTaskState();
    [CompilerGeneratedAttribute]
public void set_AlwaysRetainTaskState(bool value);
    [CompilerGeneratedAttribute]
public bool get_ClearTaskOnLaunch();
    [CompilerGeneratedAttribute]
public void set_ClearTaskOnLaunch(bool value);
    [CompilerGeneratedAttribute]
public string get_ColorMode();
    [CompilerGeneratedAttribute]
public void set_ColorMode(string value);
    [CompilerGeneratedAttribute]
public ConfigChanges get_ConfigurationChanges();
    [CompilerGeneratedAttribute]
public void set_ConfigurationChanges(ConfigChanges value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_DirectBootAware();
    [CompilerGeneratedAttribute]
public void set_DirectBootAware(bool value);
    [CompilerGeneratedAttribute]
public string get_EnableVrMode();
    [CompilerGeneratedAttribute]
public void set_EnableVrMode(string value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeFromRecents();
    [CompilerGeneratedAttribute]
public void set_ExcludeFromRecents(bool value);
    [CompilerGeneratedAttribute]
public bool get_Exported();
    [CompilerGeneratedAttribute]
public void set_Exported(bool value);
    [CompilerGeneratedAttribute]
public bool get_FinishOnCloseSystemDialogs();
    [CompilerGeneratedAttribute]
public void set_FinishOnCloseSystemDialogs(bool value);
    [CompilerGeneratedAttribute]
public bool get_FinishOnTaskLaunch();
    [CompilerGeneratedAttribute]
public void set_FinishOnTaskLaunch(bool value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public LaunchMode get_LaunchMode();
    [CompilerGeneratedAttribute]
public void set_LaunchMode(LaunchMode value);
    [CompilerGeneratedAttribute]
public bool get_MainLauncher();
    [CompilerGeneratedAttribute]
public void set_MainLauncher(bool value);
    [CompilerGeneratedAttribute]
public float get_MaxAspectRatio();
    [CompilerGeneratedAttribute]
public void set_MaxAspectRatio(float value);
    [CompilerGeneratedAttribute]
public bool get_MultiProcess();
    [CompilerGeneratedAttribute]
public void set_MultiProcess(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoHistory();
    [CompilerGeneratedAttribute]
public void set_NoHistory(bool value);
    [CompilerGeneratedAttribute]
public string get_Permission();
    [CompilerGeneratedAttribute]
public void set_Permission(string value);
    [CompilerGeneratedAttribute]
public string get_Process();
    [CompilerGeneratedAttribute]
public void set_Process(string value);
    [CompilerGeneratedAttribute]
public ConfigChanges get_RecreateOnConfigChanges();
    [CompilerGeneratedAttribute]
public void set_RecreateOnConfigChanges(ConfigChanges value);
    [CompilerGeneratedAttribute]
public bool get_ResizeableActivity();
    [CompilerGeneratedAttribute]
public void set_ResizeableActivity(bool value);
    [CompilerGeneratedAttribute]
public WindowRotationAnimation get_RotationAnimation();
    [CompilerGeneratedAttribute]
public void set_RotationAnimation(WindowRotationAnimation value);
    [CompilerGeneratedAttribute]
public bool get_SupportsPictureInPicture();
    [CompilerGeneratedAttribute]
public void set_SupportsPictureInPicture(bool value);
    [CompilerGeneratedAttribute]
public ScreenOrientation get_ScreenOrientation();
    [CompilerGeneratedAttribute]
public void set_ScreenOrientation(ScreenOrientation value);
    [CompilerGeneratedAttribute]
public bool get_StateNotNeeded();
    [CompilerGeneratedAttribute]
public void set_StateNotNeeded(bool value);
    [CompilerGeneratedAttribute]
public string get_TaskAffinity();
    [CompilerGeneratedAttribute]
public void set_TaskAffinity(string value);
    [CompilerGeneratedAttribute]
public string get_Theme();
    [CompilerGeneratedAttribute]
public void set_Theme(string value);
    [CompilerGeneratedAttribute]
public bool get_VisibleToInstantApps();
    [CompilerGeneratedAttribute]
public void set_VisibleToInstantApps(bool value);
    [CompilerGeneratedAttribute]
public SoftInput get_WindowSoftInputMode();
    [CompilerGeneratedAttribute]
public void set_WindowSoftInputMode(SoftInput value);
}
[AttributeUsageAttribute("5")]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public class Android.App.ApplicationAttribute : Attribute {
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private string _BackupAgent;
    private bool _BackupInForeground;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private string _Banner;
    private bool _FullBackupOnly;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private string _Logo;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private string _ManageSpaceActivity;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private string _NetworkSecurityConfig;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private string _RequiredAccountType;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private string _RestrictedAccountType;
    private bool _HardwareAccelerated;
    private bool _ExtractNativeLibs;
    private bool _FullBackupContent;
    private bool _LargeHeap;
    private UiOptions _UiOptions;
    private bool _SupportsRtl;
    private bool _UsesCleartextTraffic;
    private bool _VMSafeMode;
    private bool _ResizeableActivity;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private ICustomAttributeProvider provider;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private string _RoundIcon;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private static ManifestDocumentElement`1<ApplicationAttribute> mapping;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private ICollection`1<string> specified;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowBackup>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowClearUserData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowTaskReparenting>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BackupInForeground>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Debuggable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DirectBootAware>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KillAfterRestore>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ManageSpaceActivity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NetworkSecurityConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Permission>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Persistent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Process>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RestoreAnyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TaskAffinity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Theme>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResizeableActivity>k__BackingField;
    public string Name { get; public set; }
    public bool AllowBackup { get; public set; }
    public bool AllowClearUserData { get; public set; }
    public bool AllowTaskReparenting { get; public set; }
    public bool BackupInForeground { get; public set; }
    public bool Debuggable { get; public set; }
    public string Description { get; public set; }
    public bool DirectBootAware { get; public set; }
    public bool Enabled { get; public set; }
    public bool HasCode { get; public set; }
    public string Icon { get; public set; }
    public bool KillAfterRestore { get; public set; }
    public string Label { get; public set; }
    public Type ManageSpaceActivity { get; public set; }
    public string NetworkSecurityConfig { get; public set; }
    public string Permission { get; public set; }
    public bool Persistent { get; public set; }
    public string Process { get; public set; }
    public bool RestoreAnyVersion { get; public set; }
    public string TaskAffinity { get; public set; }
    public string Theme { get; public set; }
    public bool ResizeableActivity { get; public set; }
    private static ApplicationAttribute();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public static ApplicationAttribute FromCustomAttributeProvider(ICustomAttributeProvider provider);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
internal XElement ToElement(IAssemblyResolver resolver, string packageName, TypeDefinitionCache cache);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
private static string ToNameAttribute(ApplicationAttribute self, ICustomAttributeProvider provider, IAssemblyResolver resolver, TypeDefinitionCache cache);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowBackup();
    [CompilerGeneratedAttribute]
public void set_AllowBackup(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowClearUserData();
    [CompilerGeneratedAttribute]
public void set_AllowClearUserData(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowTaskReparenting();
    [CompilerGeneratedAttribute]
public void set_AllowTaskReparenting(bool value);
    [CompilerGeneratedAttribute]
public bool get_BackupInForeground();
    [CompilerGeneratedAttribute]
public void set_BackupInForeground(bool value);
    [CompilerGeneratedAttribute]
public bool get_Debuggable();
    [CompilerGeneratedAttribute]
public void set_Debuggable(bool value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_DirectBootAware();
    [CompilerGeneratedAttribute]
public void set_DirectBootAware(bool value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasCode();
    [CompilerGeneratedAttribute]
public void set_HasCode(bool value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public bool get_KillAfterRestore();
    [CompilerGeneratedAttribute]
public void set_KillAfterRestore(bool value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public Type get_ManageSpaceActivity();
    [CompilerGeneratedAttribute]
public void set_ManageSpaceActivity(Type value);
    [CompilerGeneratedAttribute]
public string get_NetworkSecurityConfig();
    [CompilerGeneratedAttribute]
public void set_NetworkSecurityConfig(string value);
    [CompilerGeneratedAttribute]
public string get_Permission();
    [CompilerGeneratedAttribute]
public void set_Permission(string value);
    [CompilerGeneratedAttribute]
public bool get_Persistent();
    [CompilerGeneratedAttribute]
public void set_Persistent(bool value);
    [CompilerGeneratedAttribute]
public string get_Process();
    [CompilerGeneratedAttribute]
public void set_Process(string value);
    [CompilerGeneratedAttribute]
public bool get_RestoreAnyVersion();
    [CompilerGeneratedAttribute]
public void set_RestoreAnyVersion(bool value);
    [CompilerGeneratedAttribute]
public string get_TaskAffinity();
    [CompilerGeneratedAttribute]
public void set_TaskAffinity(string value);
    [CompilerGeneratedAttribute]
public string get_Theme();
    [CompilerGeneratedAttribute]
public void set_Theme(string value);
    [CompilerGeneratedAttribute]
public bool get_ResizeableActivity();
    [CompilerGeneratedAttribute]
public void set_ResizeableActivity(bool value);
}
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
[AttributeUsageAttribute("5")]
public class Android.App.InstrumentationAttribute : Attribute {
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private string _RoundIcon;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private string _TargetProcesses;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private static ManifestDocumentElement`1<InstrumentationAttribute> mapping;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private ICollection`1<string> specified;
    [CompilerGeneratedAttribute]
private bool <FunctionalTest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HandleProfiling>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetProcesses>k__BackingField;
    public bool FunctionalTest { get; public set; }
    public bool HandleProfiling { get; public set; }
    public string Icon { get; public set; }
    public string Label { get; public set; }
    public string Name { get; public set; }
    public string TargetPackage { get; public set; }
    public string TargetProcesses { get; public set; }
    private static InstrumentationAttribute();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
[IteratorStateMachineAttribute("Android.App.InstrumentationAttribute/<FromCustomAttributeProvider>d__4")]
public static IEnumerable`1<InstrumentationAttribute> FromCustomAttributeProvider(ICustomAttributeProvider provider);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public void SetTargetPackage(string package);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public XElement ToElement(string packageName, TypeDefinitionCache cache);
    [CompilerGeneratedAttribute]
public bool get_FunctionalTest();
    [CompilerGeneratedAttribute]
public void set_FunctionalTest(bool value);
    [CompilerGeneratedAttribute]
public bool get_HandleProfiling();
    [CompilerGeneratedAttribute]
public void set_HandleProfiling(bool value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_TargetPackage();
    [CompilerGeneratedAttribute]
public void set_TargetPackage(string value);
    [CompilerGeneratedAttribute]
public string get_TargetProcesses();
    [CompilerGeneratedAttribute]
public void set_TargetProcesses(string value);
}
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[AttributeUsageAttribute("4")]
public class Android.App.IntentFilterAttribute : Attribute {
    private bool _AutoVerify;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private string _RoundIcon;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private static Dictionary`2<string, string> attributeMappings;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private static Dictionary`2<string, Action`2<IntentFilterAttribute, object>> setters;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private HashSet`1<string> specified;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private static XNamespace android;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
[CompilerGeneratedAttribute]
private String[] <Actions>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <Categories>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataHost>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataMimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataPathPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataPathPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataScheme>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] <DataHosts>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <DataMimeTypes>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] <DataPaths>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] <DataPathPatterns>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] <DataPathPrefixes>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <DataPorts>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] <DataSchemes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataPathAdvancedPattern>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <DataPathAdvancedPatterns>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataPathSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] <DataPathSuffixes>k__BackingField;
    public string Icon { get; public set; }
    public string Label { get; public set; }
    public int Priority { get; public set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
public String[] Actions { get; private set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Categories { get; public set; }
    public string DataHost { get; public set; }
    public string DataMimeType { get; public set; }
    public string DataPath { get; public set; }
    public string DataPathPattern { get; public set; }
    public string DataPathPrefix { get; public set; }
    public string DataPort { get; public set; }
    public string DataScheme { get; public set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] DataHosts { get; public set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] DataMimeTypes { get; public set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] DataPaths { get; public set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] DataPathPatterns { get; public set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] DataPathPrefixes { get; public set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] DataPorts { get; public set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] DataSchemes { get; public set; }
    public string DataPathAdvancedPattern { get; public set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] DataPathAdvancedPatterns { get; public set; }
    public string DataPathSuffix { get; public set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] DataPathSuffixes { get; public set; }
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public IntentFilterAttribute(String[] actions);
    private static IntentFilterAttribute();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
private static String[] ToStringArray(object value);
    [IteratorStateMachineAttribute("Android.App.IntentFilterAttribute/<FromTypeDefinition>d__6")]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public static IEnumerable`1<IntentFilterAttribute> FromTypeDefinition(TypeDefinition type);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
private string ReplacePackage(string s, string packageName);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public XElement ToElement(string packageName);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
private XAttribute ToAttribute(string name, bool value);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
private XAttribute ToAttribute(string name, int value);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
private XAttribute ToAttribute(string name, string value);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
private IEnumerable`1<XElement> GetData(string packageName);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public int get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(int value);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public String[] get_Actions();
    [CompilerGeneratedAttribute]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
private void set_Actions(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Categories();
    [CompilerGeneratedAttribute]
public void set_Categories(String[] value);
    [CompilerGeneratedAttribute]
public string get_DataHost();
    [CompilerGeneratedAttribute]
public void set_DataHost(string value);
    [CompilerGeneratedAttribute]
public string get_DataMimeType();
    [CompilerGeneratedAttribute]
public void set_DataMimeType(string value);
    [CompilerGeneratedAttribute]
public string get_DataPath();
    [CompilerGeneratedAttribute]
public void set_DataPath(string value);
    [CompilerGeneratedAttribute]
public string get_DataPathPattern();
    [CompilerGeneratedAttribute]
public void set_DataPathPattern(string value);
    [CompilerGeneratedAttribute]
public string get_DataPathPrefix();
    [CompilerGeneratedAttribute]
public void set_DataPathPrefix(string value);
    [CompilerGeneratedAttribute]
public string get_DataPort();
    [CompilerGeneratedAttribute]
public void set_DataPort(string value);
    [CompilerGeneratedAttribute]
public string get_DataScheme();
    [CompilerGeneratedAttribute]
public void set_DataScheme(string value);
    [CompilerGeneratedAttribute]
public String[] get_DataHosts();
    [CompilerGeneratedAttribute]
public void set_DataHosts(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_DataMimeTypes();
    [CompilerGeneratedAttribute]
public void set_DataMimeTypes(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_DataPaths();
    [CompilerGeneratedAttribute]
public void set_DataPaths(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_DataPathPatterns();
    [CompilerGeneratedAttribute]
public void set_DataPathPatterns(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_DataPathPrefixes();
    [CompilerGeneratedAttribute]
public void set_DataPathPrefixes(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_DataPorts();
    [CompilerGeneratedAttribute]
public void set_DataPorts(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_DataSchemes();
    [CompilerGeneratedAttribute]
public void set_DataSchemes(String[] value);
    [CompilerGeneratedAttribute]
public string get_DataPathAdvancedPattern();
    [CompilerGeneratedAttribute]
public void set_DataPathAdvancedPattern(string value);
    [CompilerGeneratedAttribute]
public String[] get_DataPathAdvancedPatterns();
    [CompilerGeneratedAttribute]
public void set_DataPathAdvancedPatterns(String[] value);
    [CompilerGeneratedAttribute]
public string get_DataPathSuffix();
    [CompilerGeneratedAttribute]
public void set_DataPathSuffix(string value);
    [CompilerGeneratedAttribute]
public String[] get_DataPathSuffixes();
    [CompilerGeneratedAttribute]
public void set_DataPathSuffixes(String[] value);
}
[AttributeUsageAttribute("4")]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public class Android.App.LayoutAttribute : Attribute {
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private static ManifestDocumentElement`1<LayoutAttribute> mapping;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private TypeDefinition type;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private ICollection`1<string> specified;
    [CompilerGeneratedAttribute]
private string <DefaultWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Gravity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinWidth>k__BackingField;
    public string DefaultWidth { get; public set; }
    public string DefaultHeight { get; public set; }
    public string Gravity { get; public set; }
    public string MinHeight { get; public set; }
    public string MinWidth { get; public set; }
    private static LayoutAttribute();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public static LayoutAttribute FromTypeDefinition(TypeDefinition type);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
internal XElement ToElement(IAssemblyResolver resolver, string packageName, TypeDefinitionCache cache);
    [CompilerGeneratedAttribute]
public string get_DefaultWidth();
    [CompilerGeneratedAttribute]
public void set_DefaultWidth(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultHeight();
    [CompilerGeneratedAttribute]
public void set_DefaultHeight(string value);
    [CompilerGeneratedAttribute]
public string get_Gravity();
    [CompilerGeneratedAttribute]
public void set_Gravity(string value);
    [CompilerGeneratedAttribute]
public string get_MinHeight();
    [CompilerGeneratedAttribute]
public void set_MinHeight(string value);
    [CompilerGeneratedAttribute]
public string get_MinWidth();
    [CompilerGeneratedAttribute]
public void set_MinWidth(string value);
}
[AttributeUsageAttribute("5")]
public class Android.App.MetaDataAttribute : Attribute {
    private static ManifestDocumentElement`1<MetaDataAttribute> mapping;
    private ICollection`1<string> specified;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private string <Resource>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; private set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public string Resource { get; public set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public string Value { get; public set; }
    public MetaDataAttribute(string name);
    private static MetaDataAttribute();
    [IteratorStateMachineAttribute("Android.App.MetaDataAttribute/<FromCustomAttributeProvider>d__2")]
public static IEnumerable`1<MetaDataAttribute> FromCustomAttributeProvider(ICustomAttributeProvider type);
    public XElement ToElement(string packageName, TypeDefinitionCache cache);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public string get_Resource();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Resource(string value);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Value();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Value(string value);
}
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class Android.App.PermissionAttribute : Attribute {
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private string _RoundIcon;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private static ManifestDocumentElement`1<PermissionAttribute> mapping;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private ICollection`1<string> specified;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PermissionGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private Protection <ProtectionLevel>k__BackingField;
    public string Description { get; public set; }
    public string Icon { get; public set; }
    public string Label { get; public set; }
    public string Name { get; public set; }
    public string PermissionGroup { get; public set; }
    public Protection ProtectionLevel { get; public set; }
    private static PermissionAttribute();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
[IteratorStateMachineAttribute("Android.App.PermissionAttribute/<FromCustomAttributeProvider>d__3")]
public static IEnumerable`1<PermissionAttribute> FromCustomAttributeProvider(ICustomAttributeProvider provider);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
internal XElement ToElement(string packageName, TypeDefinitionCache cache);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_PermissionGroup();
    [CompilerGeneratedAttribute]
public void set_PermissionGroup(string value);
    [CompilerGeneratedAttribute]
public Protection get_ProtectionLevel();
    [CompilerGeneratedAttribute]
public void set_ProtectionLevel(Protection value);
}
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[AttributeUsageAttribute("1")]
public class Android.App.PermissionGroupAttribute : Attribute {
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private string _RoundIcon;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private static ManifestDocumentElement`1<PermissionGroupAttribute> mapping;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private ICollection`1<string> specified;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Description { get; public set; }
    public string Icon { get; public set; }
    public string Label { get; public set; }
    public string Name { get; public set; }
    private static PermissionGroupAttribute();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
[IteratorStateMachineAttribute("Android.App.PermissionGroupAttribute/<FromCustomAttributeProvider>d__3")]
public static IEnumerable`1<PermissionGroupAttribute> FromCustomAttributeProvider(ICustomAttributeProvider provider);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
internal XElement ToElement(string packageName, TypeDefinitionCache cache);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class Android.App.PermissionTreeAttribute : Attribute {
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private string _RoundIcon;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private static ManifestDocumentElement`1<PermissionTreeAttribute> mapping;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private ICollection`1<string> specified;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Icon { get; public set; }
    public string Label { get; public set; }
    public string Name { get; public set; }
    private static PermissionTreeAttribute();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
[IteratorStateMachineAttribute("Android.App.PermissionTreeAttribute/<FromCustomAttributeProvider>d__3")]
public static IEnumerable`1<PermissionTreeAttribute> FromCustomAttributeProvider(ICustomAttributeProvider provider);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
internal XElement ToElement(string packageName, TypeDefinitionCache cache);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[AttributeUsageAttribute("4")]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
public class Android.App.ServiceAttribute : Attribute {
    private bool _IsolatedProcess;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private string _RoundIcon;
    private ForegroundService _ForegroundServiceType;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private static ManifestDocumentElement`1<ServiceAttribute> mapping;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private ICollection`1<string> specified;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DirectBootAware>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Exported>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Permission>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Process>k__BackingField;
    public string Name { get; public set; }
    public bool DirectBootAware { get; public set; }
    public bool Enabled { get; public set; }
    public bool Exported { get; public set; }
    public string Icon { get; public set; }
    public string Label { get; public set; }
    public string Permission { get; public set; }
    public string Process { get; public set; }
    private static ServiceAttribute();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public static ServiceAttribute FromTypeDefinition(TypeDefinition type);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public XElement ToElement(string packageName, TypeDefinitionCache cache);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_DirectBootAware();
    [CompilerGeneratedAttribute]
public void set_DirectBootAware(bool value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Exported();
    [CompilerGeneratedAttribute]
public void set_Exported(bool value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_Permission();
    [CompilerGeneratedAttribute]
public void set_Permission(string value);
    [CompilerGeneratedAttribute]
public string get_Process();
    [CompilerGeneratedAttribute]
public void set_Process(string value);
}
[AttributeUsageAttribute("1")]
public class Android.App.SupportsGLTextureAttribute : Attribute {
    private static ManifestDocumentElement`1<SupportsGLTextureAttribute> mapping;
    private ICollection`1<string> specified;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public SupportsGLTextureAttribute(string name);
    private static SupportsGLTextureAttribute();
    internal XElement ToElement(string packageName, TypeDefinitionCache cache);
    [IteratorStateMachineAttribute("Android.App.SupportsGLTextureAttribute/<FromCustomAttributeProvider>d__3")]
public static IEnumerable`1<SupportsGLTextureAttribute> FromCustomAttributeProvider(ICustomAttributeProvider provider);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
[AttributeUsageAttribute("1")]
public class Android.App.UsesConfigurationAttribute : Attribute {
    private bool _Required;
    private static ManifestDocumentElement`1<UsesConfigurationAttribute> mapping;
    private ICollection`1<string> specified;
    [CompilerGeneratedAttribute]
private bool <ReqFiveWayNav>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReqHardKeyboard>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReqKeyboardType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReqNavigation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReqTouchScreen>k__BackingField;
    public bool ReqFiveWayNav { get; public set; }
    public bool ReqHardKeyboard { get; public set; }
    public string ReqKeyboardType { get; public set; }
    public string ReqNavigation { get; public set; }
    public string ReqTouchScreen { get; public set; }
    private static UsesConfigurationAttribute();
    internal XElement ToElement(string packageName, TypeDefinitionCache cache);
    [IteratorStateMachineAttribute("Android.App.UsesConfigurationAttribute/<FromCustomAttributeProvider>d__4")]
public static IEnumerable`1<UsesConfigurationAttribute> FromCustomAttributeProvider(ICustomAttributeProvider provider);
    [CompilerGeneratedAttribute]
public bool get_ReqFiveWayNav();
    [CompilerGeneratedAttribute]
public void set_ReqFiveWayNav(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReqHardKeyboard();
    [CompilerGeneratedAttribute]
public void set_ReqHardKeyboard(bool value);
    [CompilerGeneratedAttribute]
public string get_ReqKeyboardType();
    [CompilerGeneratedAttribute]
public void set_ReqKeyboardType(string value);
    [CompilerGeneratedAttribute]
public string get_ReqNavigation();
    [CompilerGeneratedAttribute]
public void set_ReqNavigation(string value);
    [CompilerGeneratedAttribute]
public string get_ReqTouchScreen();
    [CompilerGeneratedAttribute]
public void set_ReqTouchScreen(string value);
}
[AttributeUsageAttribute("1")]
public class Android.App.UsesFeatureAttribute : Attribute {
    private bool _Required;
    private int _Version;
    private static ManifestDocumentElement`1<UsesFeatureAttribute> mapping;
    private ICollection`1<string> specified;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GLESVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public string Name { get; private set; }
    public int GLESVersion { get; public set; }
    public int Version { get; private set; }
    public UsesFeatureAttribute(string name);
    private static UsesFeatureAttribute();
    internal string GLESVesionAsString();
    internal XElement ToElement(string packageName, TypeDefinitionCache cache);
    [IteratorStateMachineAttribute("Android.App.UsesFeatureAttribute/<FromCustomAttributeProvider>d__6")]
public static IEnumerable`1<UsesFeatureAttribute> FromCustomAttributeProvider(ICustomAttributeProvider provider);
    [CompilerGeneratedAttribute]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public string get_Name();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_GLESVersion();
    [CompilerGeneratedAttribute]
public void set_GLESVersion(int value);
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(int value);
}
[AttributeUsageAttribute("5")]
public class Android.App.UsesLibraryAttribute : Attribute {
    private static ManifestDocumentElement`1<UsesLibraryAttribute> mapping;
    private ICollection`1<string> specified;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public string Name { get; public set; }
    public bool Required { get; public set; }
    public UsesLibraryAttribute(string name);
    public UsesLibraryAttribute(string name, bool required);
    private static UsesLibraryAttribute();
    [IteratorStateMachineAttribute("Android.App.UsesLibraryAttribute/<FromCustomAttributeProvider>d__2")]
public static IEnumerable`1<UsesLibraryAttribute> FromCustomAttributeProvider(ICustomAttributeProvider provider);
    public XElement ToElement(string packageName, TypeDefinitionCache cache);
    [CompilerGeneratedAttribute]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public string get_Name();
    [CompilerGeneratedAttribute]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
}
[AttributeUsageAttribute("1")]
public class Android.App.UsesPermissionAttribute : Attribute {
    private int _MaxSdkVersion;
    private static ManifestDocumentElement`1<UsesPermissionAttribute> mapping;
    private ICollection`1<string> specified;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public string Name { get; public set; }
    public UsesPermissionAttribute(string name);
    private static UsesPermissionAttribute();
    [IteratorStateMachineAttribute("Android.App.UsesPermissionAttribute/<FromCustomAttributeProvider>d__3")]
public static IEnumerable`1<UsesPermissionAttribute> FromCustomAttributeProvider(ICustomAttributeProvider provider);
    public XElement ToElement(string packageName, TypeDefinitionCache cache);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
}
[AttributeUsageAttribute("4")]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public class Android.Content.BroadcastReceiverAttribute : Attribute {
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private string _RoundIcon;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private static ManifestDocumentElement`1<BroadcastReceiverAttribute> mapping;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private ICollection`1<string> specified;
    [CompilerGeneratedAttribute]
private bool <DirectBootAware>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Exported>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Permission>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Process>k__BackingField;
    public bool DirectBootAware { get; public set; }
    public bool Enabled { get; public set; }
    public bool Exported { get; public set; }
    public string Description { get; public set; }
    public string Icon { get; public set; }
    public string Label { get; public set; }
    public string Name { get; public set; }
    public string Permission { get; public set; }
    public string Process { get; public set; }
    private static BroadcastReceiverAttribute();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public static BroadcastReceiverAttribute FromTypeDefinition(TypeDefinition type);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public XElement ToElement(string packageName, TypeDefinitionCache cache);
    [CompilerGeneratedAttribute]
public bool get_DirectBootAware();
    [CompilerGeneratedAttribute]
public void set_DirectBootAware(bool value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Exported();
    [CompilerGeneratedAttribute]
public void set_Exported(bool value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Permission();
    [CompilerGeneratedAttribute]
public void set_Permission(string value);
    [CompilerGeneratedAttribute]
public string get_Process();
    [CompilerGeneratedAttribute]
public void set_Process(string value);
}
[AttributeUsageAttribute("4")]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public class Android.Content.ContentProviderAttribute : Attribute {
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private string _RoundIcon;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private static ManifestDocumentElement`1<ContentProviderAttribute> mapping;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private ICollection`1<string> specified;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private String[] <Authorities>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DirectBootAware>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Exported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GrantUriPermissions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InitOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultiProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Permission>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Process>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReadPermission>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Syncable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WritePermission>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
public String[] Authorities { get; private set; }
    public bool DirectBootAware { get; public set; }
    public bool Enabled { get; public set; }
    public bool Exported { get; public set; }
    public bool GrantUriPermissions { get; public set; }
    public string Icon { get; public set; }
    public int InitOrder { get; public set; }
    public string Label { get; public set; }
    public bool MultiProcess { get; public set; }
    public string Name { get; public set; }
    public string Permission { get; public set; }
    public string Process { get; public set; }
    public string ReadPermission { get; public set; }
    public bool Syncable { get; public set; }
    public string WritePermission { get; public set; }
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public ContentProviderAttribute(String[] authorities);
    private static ContentProviderAttribute();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
private static String[] ToStringArray(object value);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public static ContentProviderAttribute FromTypeDefinition(TypeDefinition type);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public XElement ToElement(string packageName, TypeDefinitionCache cache);
    [CompilerGeneratedAttribute]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public String[] get_Authorities();
    [CompilerGeneratedAttribute]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
private void set_Authorities(String[] value);
    [CompilerGeneratedAttribute]
public bool get_DirectBootAware();
    [CompilerGeneratedAttribute]
public void set_DirectBootAware(bool value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Exported();
    [CompilerGeneratedAttribute]
public void set_Exported(bool value);
    [CompilerGeneratedAttribute]
public bool get_GrantUriPermissions();
    [CompilerGeneratedAttribute]
public void set_GrantUriPermissions(bool value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public int get_InitOrder();
    [CompilerGeneratedAttribute]
public void set_InitOrder(int value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public bool get_MultiProcess();
    [CompilerGeneratedAttribute]
public void set_MultiProcess(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Permission();
    [CompilerGeneratedAttribute]
public void set_Permission(string value);
    [CompilerGeneratedAttribute]
public string get_Process();
    [CompilerGeneratedAttribute]
public void set_Process(string value);
    [CompilerGeneratedAttribute]
public string get_ReadPermission();
    [CompilerGeneratedAttribute]
public void set_ReadPermission(string value);
    [CompilerGeneratedAttribute]
public bool get_Syncable();
    [CompilerGeneratedAttribute]
public void set_Syncable(bool value);
    [CompilerGeneratedAttribute]
public string get_WritePermission();
    [CompilerGeneratedAttribute]
public void set_WritePermission(string value);
}
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[AttributeUsageAttribute("4")]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
public class Android.Content.GrantUriPermissionAttribute : Attribute {
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private static ManifestDocumentElement`1<GrantUriPermissionAttribute> mapping;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private ICollection`1<string> specified;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathPrefix>k__BackingField;
    public string Path { get; public set; }
    public string PathPattern { get; public set; }
    public string PathPrefix { get; public set; }
    private static GrantUriPermissionAttribute();
    [IteratorStateMachineAttribute("Android.Content.GrantUriPermissionAttribute/<FromTypeDefinition>d__2")]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public static IEnumerable`1<GrantUriPermissionAttribute> FromTypeDefinition(TypeDefinition type);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public XElement ToElement(string packageName, TypeDefinitionCache cache);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_PathPattern();
    [CompilerGeneratedAttribute]
public void set_PathPattern(string value);
    [CompilerGeneratedAttribute]
public string get_PathPrefix();
    [CompilerGeneratedAttribute]
public void set_PathPrefix(string value);
}
public enum Android.Content.PM.ActivityPersistableMode : Enum {
    public int value__;
    [IntDefinitionAttribute("")]
public static ActivityPersistableMode AcrossReboots;
    [IntDefinitionAttribute("")]
public static ActivityPersistableMode Never;
    [IntDefinitionAttribute("")]
public static ActivityPersistableMode RootOnly;
}
[FlagsAttribute]
public enum Android.Content.PM.ConfigChanges : Enum {
    public int value__;
    [IntDefinitionAttribute("")]
public static ConfigChanges ColorMode;
    [IntDefinitionAttribute("")]
public static ConfigChanges Density;
    [IntDefinitionAttribute("")]
public static ConfigChanges FontScale;
    [IntDefinitionAttribute("")]
public static ConfigChanges FontWeightAdjustment;
    [IntDefinitionAttribute("")]
public static ConfigChanges GrammaticalGender;
    [IntDefinitionAttribute("")]
public static ConfigChanges Keyboard;
    [IntDefinitionAttribute("")]
public static ConfigChanges KeyboardHidden;
    [IntDefinitionAttribute("")]
public static ConfigChanges LayoutDirection;
    [IntDefinitionAttribute("")]
public static ConfigChanges Locale;
    [IntDefinitionAttribute("")]
public static ConfigChanges Mcc;
    [IntDefinitionAttribute("")]
public static ConfigChanges Mnc;
    [IntDefinitionAttribute("")]
public static ConfigChanges Navigation;
    [IntDefinitionAttribute("")]
public static ConfigChanges Orientation;
    [IntDefinitionAttribute("")]
public static ConfigChanges ScreenLayout;
    [IntDefinitionAttribute("")]
public static ConfigChanges ScreenSize;
    [IntDefinitionAttribute("")]
public static ConfigChanges SmallestScreenSize;
    [IntDefinitionAttribute("")]
public static ConfigChanges Touchscreen;
    [IntDefinitionAttribute("")]
public static ConfigChanges UiMode;
}
public enum Android.Content.PM.DocumentLaunchMode : Enum {
    public int value__;
    [IntDefinitionAttribute("")]
public static DocumentLaunchMode Always;
    [IntDefinitionAttribute("")]
public static DocumentLaunchMode IntoExisting;
    [IntDefinitionAttribute("")]
public static DocumentLaunchMode Never;
    [IntDefinitionAttribute("")]
public static DocumentLaunchMode None;
}
[FlagsAttribute]
public enum Android.Content.PM.ForegroundService : Enum {
    public int value__;
    [IntDefinitionAttribute("Android.Content.PM.ServiceInfo.ForegroundServiceTypeCamera")]
public static ForegroundService TypeCamera;
    [IntDefinitionAttribute("Android.Content.PM.ServiceInfo.ForegroundServiceTypeConnectedDevice")]
public static ForegroundService TypeConnectedDevice;
    [IntDefinitionAttribute("Android.Content.PM.ServiceInfo.ForegroundServiceTypeDataSync")]
public static ForegroundService TypeDataSync;
    [IntDefinitionAttribute("Android.Content.PM.ServiceInfo.ForegroundServiceTypeHealth")]
public static ForegroundService TypeHealth;
    [IntDefinitionAttribute("Android.Content.PM.ServiceInfo.ForegroundServiceTypeLocation")]
public static ForegroundService TypeLocation;
    [IntDefinitionAttribute("Android.Content.PM.ServiceInfo.ForegroundServiceTypeManifest")]
public static ForegroundService TypeManifest;
    [IntDefinitionAttribute("Android.Content.PM.ServiceInfo.ForegroundServiceTypeMediaPlayback")]
public static ForegroundService TypeMediaPlayback;
    [IntDefinitionAttribute("Android.Content.PM.ServiceInfo.ForegroundServiceTypeMediaProjection")]
public static ForegroundService TypeMediaProjection;
    [IntDefinitionAttribute("Android.Content.PM.ServiceInfo.ForegroundServiceTypeMicrophone")]
public static ForegroundService TypeMicrophone;
    [IntDefinitionAttribute("Android.Content.PM.ServiceInfo.ForegroundServiceTypeNone")]
public static ForegroundService TypeNone;
    [IntDefinitionAttribute("Android.Content.PM.ServiceInfo.ForegroundServiceTypePhoneCall")]
public static ForegroundService TypePhoneCall;
    [IntDefinitionAttribute("Android.Content.PM.ServiceInfo.ForegroundServiceTypeRemoteMessaging")]
public static ForegroundService TypeRemoteMessaging;
    [IntDefinitionAttribute("Android.Content.PM.ServiceInfo.ForegroundServiceTypeShortService")]
public static ForegroundService TypeShortService;
    [IntDefinitionAttribute("Android.Content.PM.ServiceInfo.ForegroundServiceTypeSpecialUse")]
public static ForegroundService TypeSpecialUse;
    [IntDefinitionAttribute("Android.Content.PM.ServiceInfo.ForegroundServiceTypeSystemExempted")]
public static ForegroundService TypeSystemExempted;
}
public enum Android.Content.PM.LaunchMode : Enum {
    public int value__;
    [IntDefinitionAttribute("")]
public static LaunchMode Multiple;
    [IntDefinitionAttribute("")]
public static LaunchMode SingleInstance;
    [IntDefinitionAttribute("")]
public static LaunchMode SingleInstancePerTask;
    [IntDefinitionAttribute("")]
public static LaunchMode SingleTask;
    [IntDefinitionAttribute("")]
public static LaunchMode SingleTop;
}
[FlagsAttribute]
public enum Android.Content.PM.Protection : Enum {
    public int value__;
    [IntDefinitionAttribute("")]
public static Protection Dangerous;
    [IntDefinitionAttribute("")]
public static Protection FlagAppop;
    [IntDefinitionAttribute("")]
public static Protection FlagDevelopment;
    [IntDefinitionAttribute("")]
public static Protection FlagInstaller;
    [IntDefinitionAttribute("")]
public static Protection FlagInstant;
    [IntDefinitionAttribute("")]
public static Protection FlagPre23;
    [IntDefinitionAttribute("")]
public static Protection FlagPreinstalled;
    [IntDefinitionAttribute("")]
public static Protection FlagPrivileged;
    [IntDefinitionAttribute("")]
public static Protection FlagRuntimeOnly;
    [IntDefinitionAttribute("")]
public static Protection FlagSetup;
    [IntDefinitionAttribute("")]
public static Protection FlagSystem;
    [IntDefinitionAttribute("")]
public static Protection FlagVerifier;
    [IntDefinitionAttribute("")]
public static Protection Internal;
    [IntDefinitionAttribute("")]
public static Protection MaskBase;
    [IntDefinitionAttribute("")]
public static Protection MaskFlags;
    [IntDefinitionAttribute("")]
public static Protection Normal;
    [IntDefinitionAttribute("")]
public static Protection Signature;
    [IntDefinitionAttribute("")]
public static Protection SignatureOrSystem;
}
public enum Android.Content.PM.ScreenOrientation : Enum {
    public int value__;
    [IntDefinitionAttribute("")]
public static ScreenOrientation Behind;
    [IntDefinitionAttribute("")]
public static ScreenOrientation FullSensor;
    [IntDefinitionAttribute("")]
public static ScreenOrientation FullUser;
    [IntDefinitionAttribute("")]
public static ScreenOrientation Landscape;
    [IntDefinitionAttribute("")]
public static ScreenOrientation Locked;
    [IntDefinitionAttribute("")]
public static ScreenOrientation Nosensor;
    [IntDefinitionAttribute("")]
public static ScreenOrientation Portrait;
    [IntDefinitionAttribute("")]
public static ScreenOrientation ReverseLandscape;
    [IntDefinitionAttribute("")]
public static ScreenOrientation ReversePortrait;
    [IntDefinitionAttribute("")]
public static ScreenOrientation Sensor;
    [IntDefinitionAttribute("")]
public static ScreenOrientation SensorLandscape;
    [IntDefinitionAttribute("")]
public static ScreenOrientation SensorPortrait;
    [IntDefinitionAttribute("")]
public static ScreenOrientation Unspecified;
    [IntDefinitionAttribute("")]
public static ScreenOrientation User;
    [IntDefinitionAttribute("")]
public static ScreenOrientation UserLandscape;
    [IntDefinitionAttribute("")]
public static ScreenOrientation UserPortrait;
}
public enum Android.Content.PM.UiOptions : Enum {
    public int value__;
    [IntDefinitionAttribute("")]
public static UiOptions None;
    [IntDefinitionAttribute("")]
public static UiOptions SplitActionBarWhenNarrow;
}
[AttributeUsageAttribute("1")]
[ObsoleteAttribute("This attribute is no longer supported.", "True")]
public class Android.IncludeAndroidResourcesFromAttribute : ReferenceFilesAttribute {
    [CompilerGeneratedAttribute]
private string <ResourceDirectory>k__BackingField;
    public string ResourceDirectory { get; private set; }
    public IncludeAndroidResourcesFromAttribute(string path);
    [CompilerGeneratedAttribute]
public string get_ResourceDirectory();
    [CompilerGeneratedAttribute]
private void set_ResourceDirectory(string value);
}
[ObsoleteAttribute("This attribute is no longer supported.", "True")]
[AttributeUsageAttribute("1")]
public class Android.NativeLibraryReferenceAttribute : ReferenceFilesAttribute {
    [CompilerGeneratedAttribute]
private string <LibraryFileName>k__BackingField;
    public string LibraryFileName { get; private set; }
    public NativeLibraryReferenceAttribute(string filename);
    [CompilerGeneratedAttribute]
public string get_LibraryFileName();
    [CompilerGeneratedAttribute]
private void set_LibraryFileName(string value);
}
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
[ObsoleteAttribute("This attribute is no longer supported.", "True")]
public abstract class Android.ReferenceFilesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <EmbeddedArchive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstallInstructions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha1sum>k__BackingField;
    public string EmbeddedArchive { get; public set; }
    public string PackageName { get; public set; }
    public string InstallInstructions { get; public set; }
    public string SourceUrl { get; public set; }
    public string Version { get; public set; }
    public string Sha1sum { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EmbeddedArchive();
    [CompilerGeneratedAttribute]
public void set_EmbeddedArchive(string value);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    [CompilerGeneratedAttribute]
public string get_InstallInstructions();
    [CompilerGeneratedAttribute]
public void set_InstallInstructions(string value);
    [CompilerGeneratedAttribute]
public string get_SourceUrl();
    [CompilerGeneratedAttribute]
public void set_SourceUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Sha1sum();
    [CompilerGeneratedAttribute]
public void set_Sha1sum(string value);
}
internal enum Android.Runtime.BoundExceptionType : Enum {
    public byte value__;
    public static BoundExceptionType System;
    public static BoundExceptionType Java;
}
[AttributeUsageAttribute("256")]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public class Android.Runtime.IntDefinitionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ConstantMember>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JniField>k__BackingField;
    public string ConstantMember { get; public set; }
    public string JniField { get; public set; }
    public IntDefinitionAttribute(string constantMember);
    [CompilerGeneratedAttribute]
public string get_ConstantMember();
    [CompilerGeneratedAttribute]
public void set_ConstantMember(string value);
    [CompilerGeneratedAttribute]
public string get_JniField();
    [CompilerGeneratedAttribute]
public void set_JniField(string value);
}
[AttributeUsageAttribute("1508")]
public class Android.Runtime.RegisterAttribute : Attribute {
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private string connector;
    private string name;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private string signature;
    [CompilerGeneratedAttribute]
private bool <DoNotGenerateAcw>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ApiSince>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public string Connector { get; public set; }
    public string Name { get; public set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public string Signature { get; public set; }
    public bool DoNotGenerateAcw { get; public set; }
    public int ApiSince { get; public set; }
    public RegisterAttribute(string name);
    public RegisterAttribute(string name, string signature, string connector);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public string get_Connector();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public void set_Connector(string value);
    public sealed virtual string get_Name();
    public void set_Name(string value);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public string get_Signature();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public void set_Signature(string value);
    [CompilerGeneratedAttribute]
public bool get_DoNotGenerateAcw();
    [CompilerGeneratedAttribute]
public void set_DoNotGenerateAcw(bool value);
    [CompilerGeneratedAttribute]
public int get_ApiSince();
    [CompilerGeneratedAttribute]
public void set_ApiSince(int value);
}
public enum Android.Views.LayoutDirection : Enum {
    public int value__;
    [IntDefinitionAttribute("Android.Views.View.LayoutDirectionInherit")]
public static LayoutDirection Inherit;
    [IntDefinitionAttribute("Android.Views.View.LayoutDirectionLocale")]
public static LayoutDirection Locale;
    [IntDefinitionAttribute("Android.Views.View.LayoutDirectionLtr")]
public static LayoutDirection Ltr;
    [IntDefinitionAttribute("Android.Views.View.LayoutDirectionRtl")]
public static LayoutDirection Rtl;
}
[FlagsAttribute]
public enum Android.Views.SoftInput : Enum {
    public int value__;
    [IntDefinitionAttribute("")]
public static SoftInput AdjustNothing;
    [IntDefinitionAttribute("")]
public static SoftInput AdjustPan;
    [IntDefinitionAttribute("")]
public static SoftInput AdjustResize;
    [IntDefinitionAttribute("")]
public static SoftInput AdjustUnspecified;
    [IntDefinitionAttribute("")]
public static SoftInput IsForwardNavigation;
    [IntDefinitionAttribute("")]
public static SoftInput MaskAdjust;
    [IntDefinitionAttribute("")]
public static SoftInput MaskState;
    [IntDefinitionAttribute("")]
public static SoftInput StateAlwaysHidden;
    [IntDefinitionAttribute("")]
public static SoftInput StateAlwaysVisible;
    [IntDefinitionAttribute("")]
public static SoftInput StateHidden;
    [IntDefinitionAttribute("")]
public static SoftInput StateUnchanged;
    [IntDefinitionAttribute("")]
public static SoftInput StateUnspecified;
    [IntDefinitionAttribute("")]
public static SoftInput StateVisible;
}
public enum Android.Views.WindowRotationAnimation : Enum {
    public int value__;
    [IntDefinitionAttribute("Android.Views.WindowManagerLayoutParams.RotationAnimationCrossfade")]
public static WindowRotationAnimation Crossfade;
    [IntDefinitionAttribute("Android.Views.WindowManagerLayoutParams.RotationAnimationJumpcut")]
public static WindowRotationAnimation Jumpcut;
    [IntDefinitionAttribute("Android.Views.WindowManagerLayoutParams.RotationAnimationRotate")]
public static WindowRotationAnimation Rotate;
    [IntDefinitionAttribute("Android.Views.WindowManagerLayoutParams.RotationAnimationSeamless")]
public static WindowRotationAnimation Seamless;
}
public static class Brutal.Dev.StrongNameSigner.SigningHelper : object {
    internal static Byte[] GetPublicKey(Byte[] keyBlob);
}
internal static class FxResources.System.Collections.Immutable.SR : object {
}
internal static class FxResources.System.Reflection.Metadata.SR : object {
}
internal static class Interop : object {
}
[AttributeUsageAttribute("96")]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public class Java.Interop.ExportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SuperArgumentsString>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Type[] <Throws>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <ThrownNames>k__BackingField;
    public string Name { get; private set; }
    public string SuperArgumentsString { get; public set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] Throws { get; public set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal String[] ThrownNames { get; internal set; }
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
[DynamicDependencyAttribute("-1", "Java.Interop.DynamicCallbackCodeGenerator", "Mono.Android.Export")]
public ExportAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_SuperArgumentsString();
    [CompilerGeneratedAttribute]
public void set_SuperArgumentsString(string value);
    [CompilerGeneratedAttribute]
public Type[] get_Throws();
    [CompilerGeneratedAttribute]
public void set_Throws(Type[] value);
    [CompilerGeneratedAttribute]
internal String[] get_ThrownNames();
    [CompilerGeneratedAttribute]
internal void set_ThrownNames(String[] value);
}
[AttributeUsageAttribute("64")]
public class Java.Interop.ExportFieldAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [DynamicDependencyAttribute("-1", "Java.Interop.DynamicCallbackCodeGenerator", "Mono.Android.Export")]
public ExportFieldAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[AttributeUsageAttribute("10240")]
public class Java.Interop.ExportParameterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ExportParameterKind <Kind>k__BackingField;
    public ExportParameterKind Kind { get; private set; }
    public ExportParameterAttribute(ExportParameterKind kind);
    [CompilerGeneratedAttribute]
public ExportParameterKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(ExportParameterKind value);
}
public enum Java.Interop.ExportParameterKind : Enum {
    public int value__;
    public static ExportParameterKind Unspecified;
    public static ExportParameterKind InputStream;
    public static ExportParameterKind OutputStream;
    public static ExportParameterKind XmlPullParser;
    public static ExportParameterKind XmlResourceParser;
}
public interface Java.Interop.IJniNameProviderAttribute {
    public string Name { get; }
    public abstract virtual string get_Name();
}
[AttributeUsageAttribute("1")]
[ObsoleteAttribute("This attribute is no longer supported.", "True")]
public class Java.Interop.JavaLibraryReferenceAttribute : ReferenceFilesAttribute {
    [CompilerGeneratedAttribute]
private string <LibraryFileName>k__BackingField;
    public string LibraryFileName { get; private set; }
    public JavaLibraryReferenceAttribute(string filename);
    [CompilerGeneratedAttribute]
public string get_LibraryFileName();
    [CompilerGeneratedAttribute]
private void set_LibraryFileName(string value);
}
[<7a126e87-8622-4c7d-9cfd-1ba0d9d78de8>EmbeddedAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.CodeAnalysis.<7a126e87-8622-4c7d-9cfd-1ba0d9d78de8>EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[<7d229d4b-405b-4af4-8958-9a0223843c02>EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.<7d229d4b-405b-4af4-8958-9a0223843c02>EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[<90c6ee93-c82d-4ced-adc8-905b9fedf10e>EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.<90c6ee93-c82d-4ced-adc8-905b9fedf10e>EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public abstract class Mobile.Tuner.MobileProfile : Profile {
    private static HashSet`1<string> Sdk;
    private static MobileProfile();
    protected virtual bool IsSdk(string assemblyName);
}
public class Mono.Linker.AnnotationStore : object {
    protected LinkContext context;
    protected Dictionary`2<AssemblyDefinition, AssemblyAction> assembly_actions;
    protected Dictionary`2<MethodDefinition, MethodAction> method_actions;
    protected Dictionary`2<MethodDefinition, object> method_stub_values;
    protected Dictionary`2<FieldDefinition, object> field_values;
    protected HashSet`1<FieldDefinition> field_init;
    protected HashSet`1<TypeDefinition> fieldType_init;
    protected HashSet`1<IMetadataTokenProvider> marked;
    protected HashSet`1<IMetadataTokenProvider> processed;
    protected Dictionary`2<TypeDefinition, TypePreserve> preserved_types;
    protected Dictionary`2<IMemberDefinition, List`1<MethodDefinition>> preserved_methods;
    protected HashSet`1<IMetadataTokenProvider> public_api;
    protected Dictionary`2<MethodDefinition, List`1<OverrideInformation>> override_methods;
    protected Dictionary`2<MethodDefinition, List`1<MethodDefinition>> base_methods;
    protected Dictionary`2<AssemblyDefinition, ISymbolReader> symbol_readers;
    protected Dictionary`2<TypeDefinition, List`1<TypeDefinition>> class_type_base_hierarchy;
    protected Dictionary`2<TypeDefinition, List`1<TypeDefinition>> derived_interfaces;
    protected Dictionary`2<object, Dictionary`2<IMetadataTokenProvider, object>> custom_annotations;
    protected Dictionary`2<AssemblyDefinition, HashSet`1<string>> resources_to_remove;
    protected HashSet`1<CustomAttribute> marked_attributes;
    private HashSet`1<TypeDefinition> marked_types_with_cctor;
    protected HashSet`1<TypeDefinition> marked_instantiated;
    protected HashSet`1<MethodDefinition> indirectly_called;
    [CompilerGeneratedAttribute]
private bool <ProcessSatelliteAssemblies>k__BackingField;
    public bool ProcessSatelliteAssemblies { get; public set; }
    protected Tracer Tracer { get; }
    public AnnotationStore(LinkContext context);
    [CompilerGeneratedAttribute]
public bool get_ProcessSatelliteAssemblies();
    [CompilerGeneratedAttribute]
public void set_ProcessSatelliteAssemblies(bool value);
    protected Tracer get_Tracer();
    [ObsoleteAttribute("Use Tracer in LinkContext directly")]
public void PrepareDependenciesDump();
    [ObsoleteAttribute("Use Tracer in LinkContext directly")]
public void PrepareDependenciesDump(string filename);
    public ICollection`1<AssemblyDefinition> GetAssemblies();
    public AssemblyAction GetAction(AssemblyDefinition assembly);
    public MethodAction GetAction(MethodDefinition method);
    public void SetAction(AssemblyDefinition assembly, AssemblyAction action);
    public bool HasAction(AssemblyDefinition assembly);
    public void SetAction(MethodDefinition method, MethodAction action);
    public void SetMethodStubValue(MethodDefinition method, object value);
    public void SetFieldValue(FieldDefinition field, object value);
    public void SetSubstitutedInit(FieldDefinition field);
    public bool HasSubstitutedInit(FieldDefinition field);
    public void SetSubstitutedInit(TypeDefinition type);
    public bool HasSubstitutedInit(TypeDefinition type);
    public void Mark(IMetadataTokenProvider provider);
    public void Mark(CustomAttribute attribute);
    public void MarkAndPush(IMetadataTokenProvider provider);
    public bool IsMarked(IMetadataTokenProvider provider);
    public bool IsMarked(CustomAttribute attribute);
    public void MarkIndirectlyCalledMethod(MethodDefinition method);
    public bool HasMarkedAnyIndirectlyCalledMethods();
    public bool IsIndirectlyCalled(MethodDefinition method);
    public void MarkInstantiated(TypeDefinition type);
    public bool IsInstantiated(TypeDefinition type);
    public void Processed(IMetadataTokenProvider provider);
    public bool IsProcessed(IMetadataTokenProvider provider);
    public bool IsPreserved(TypeDefinition type);
    public void SetPreserve(TypeDefinition type, TypePreserve preserve);
    public static TypePreserve ChoosePreserveActionWhichPreservesTheMost(TypePreserve leftPreserveAction, TypePreserve rightPreserveAction);
    public TypePreserve GetPreserve(TypeDefinition type);
    public bool TryGetPreserve(TypeDefinition type, TypePreserve& preserve);
    public bool TryGetMethodStubValue(MethodDefinition method, Object& value);
    public bool TryGetFieldUserValue(FieldDefinition field, Object& value);
    public HashSet`1<string> GetResourcesToRemove(AssemblyDefinition assembly);
    public void AddResourceToRemove(AssemblyDefinition assembly, string name);
    public void SetPublic(IMetadataTokenProvider provider);
    public bool IsPublic(IMetadataTokenProvider provider);
    public void AddOverride(MethodDefinition base, MethodDefinition override, InterfaceImplementation matchingInterfaceImplementation);
    public List`1<OverrideInformation> GetOverrides(MethodDefinition method);
    public void AddBaseMethod(MethodDefinition method, MethodDefinition base);
    public List`1<MethodDefinition> GetBaseMethods(MethodDefinition method);
    public List`1<MethodDefinition> GetPreservedMethods(TypeDefinition type);
    public void AddPreservedMethod(TypeDefinition type, MethodDefinition method);
    public List`1<MethodDefinition> GetPreservedMethods(MethodDefinition method);
    public void AddPreservedMethod(MethodDefinition key, MethodDefinition method);
    private List`1<MethodDefinition> GetPreservedMethods(IMemberDefinition definition);
    private void AddPreservedMethod(IMemberDefinition definition, MethodDefinition method);
    public void AddSymbolReader(AssemblyDefinition assembly, ISymbolReader symbolReader);
    public void CloseSymbolReader(AssemblyDefinition assembly);
    public Dictionary`2<IMetadataTokenProvider, object> GetCustomAnnotations(object key);
    public bool HasPreservedStaticCtor(TypeDefinition type);
    public bool SetPreservedStaticCtor(TypeDefinition type);
    public void SetClassHierarchy(TypeDefinition type, List`1<TypeDefinition> bases);
    public List`1<TypeDefinition> GetClassHierarchy(TypeDefinition type);
    public void AddDerivedInterfaceForInterface(TypeDefinition base, TypeDefinition derived);
    public List`1<TypeDefinition> GetDerivedInterfacesForInterface(TypeDefinition interface);
}
public enum Mono.Linker.AssemblyAction : Enum {
    public int value__;
    public static AssemblyAction Skip;
    public static AssemblyAction Copy;
    public static AssemblyAction CopyUsed;
    public static AssemblyAction Link;
    public static AssemblyAction Delete;
    public static AssemblyAction Save;
    public static AssemblyAction AddBypassNGen;
    public static AssemblyAction AddBypassNGenUsed;
}
public class Mono.Linker.AssemblyResolver : BaseAssemblyResolver {
    private Dictionary`2<string, AssemblyDefinition> _assemblies;
    private HashSet`1<string> _unresolvedAssemblies;
    private bool _ignoreUnresolved;
    private LinkContext _context;
    private Collection`1<string> _references;
    public IDictionary`2<string, AssemblyDefinition> AssemblyCache { get; }
    public bool IgnoreUnresolved { get; public set; }
    public LinkContext Context { get; public set; }
    public AssemblyResolver(Dictionary`2<string, AssemblyDefinition> assembly_cache);
    public IDictionary`2<string, AssemblyDefinition> get_AssemblyCache();
    public bool get_IgnoreUnresolved();
    public void set_IgnoreUnresolved(bool value);
    public LinkContext get_Context();
    public void set_Context(LinkContext value);
    private AssemblyDefinition GetAssembly(string file, ReaderParameters parameters);
    private AssemblyDefinition ResolveFromReferences(AssemblyNameReference name, Collection`1<string> references, ReaderParameters parameters);
    public virtual AssemblyDefinition Resolve(AssemblyNameReference name, ReaderParameters parameters);
    public virtual AssemblyDefinition CacheAssembly(AssemblyDefinition assembly);
    public void AddReferenceAssembly(string referencePath);
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class Mono.Linker.AssemblyUtilities : object {
    [ExtensionAttribute]
public static bool IsCrossgened(ModuleDefinition module);
}
public static class Mono.Linker.BCL : object {
    private static String[] corlibNames;
    private static BCL();
    public static bool IsIDisposableImplementation(MethodDefinition method);
    public static TypeDefinition FindPredefinedType(string ns, string name, LinkContext context);
}
[FlagsAttribute]
public enum Mono.Linker.CodeOptimizations : Enum {
    public int value__;
    public static CodeOptimizations BeforeFieldInit;
    public static CodeOptimizations OverrideRemoval;
    public static CodeOptimizations UnreachableBodies;
    public static CodeOptimizations ClearInitLocals;
    public static CodeOptimizations UnusedInterfaces;
    public static CodeOptimizations IPConstantPropagation;
}
public class Mono.Linker.ConsoleLogger : object {
    public sealed virtual void LogMessage(MessageImportance importance, string message, Object[] values);
}
[FlagsAttribute]
public enum Mono.Linker.I18nAssemblies : Enum {
    public int value__;
    public static I18nAssemblies None;
    public static I18nAssemblies CJK;
    public static I18nAssemblies MidEast;
    public static I18nAssemblies Other;
    public static I18nAssemblies Rare;
    public static I18nAssemblies West;
    public static I18nAssemblies All;
    public static I18nAssemblies Base;
}
public interface Mono.Linker.IDependencyRecorder {
    public abstract virtual void RecordDependency(object source, object target, bool marked);
}
public interface Mono.Linker.ILogger {
    public abstract virtual void LogMessage(MessageImportance importance, string message, Object[] values);
}
internal class Mono.Linker.Inflater : object {
    public static TypeReference InflateType(GenericContext context, TypeReference typeReference);
    public static GenericInstanceType InflateType(GenericContext context, TypeDefinition typeDefinition);
    public static GenericInstanceType InflateType(GenericContext context, GenericInstanceType genericInstanceType);
    public static TypeReference InflateTypeWithoutException(GenericContext context, TypeReference typeReference);
    private static GenericInstanceType ConstructGenericType(GenericContext context, TypeDefinition typeDefinition, IEnumerable`1<TypeReference> genericArguments);
}
public interface Mono.Linker.IReflectionPatternRecorder {
    public abstract virtual void RecognizedReflectionAccessPattern(MethodDefinition sourceMethod, MethodDefinition reflectionMethod, IMemberDefinition accessedItem);
    public abstract virtual void UnrecognizedReflectionAccessPattern(MethodDefinition sourceMethod, MethodDefinition reflectionMethod, string message);
}
public interface Mono.Linker.IXApiVisitor {
    public abstract virtual void OnAssembly(XPathNavigator nav, AssemblyDefinition assembly);
    public abstract virtual void OnAttribute(XPathNavigator nav);
    public abstract virtual void OnClass(XPathNavigator nav, TypeDefinition type);
    public abstract virtual void OnInterface(XPathNavigator nav, TypeDefinition type);
    public abstract virtual void OnField(XPathNavigator nav, FieldDefinition field);
    public abstract virtual void OnMethod(XPathNavigator nav, MethodDefinition method);
    public abstract virtual void OnConstructor(XPathNavigator nav, MethodDefinition method);
    public abstract virtual void OnProperty(XPathNavigator nav, PropertyDefinition property);
    public abstract virtual void OnEvent(XPathNavigator nav, EventDefinition evt);
}
public class Mono.Linker.KnownMembers : object {
    [CompilerGeneratedAttribute]
private MethodDefinition <NotSupportedExceptionCtorString>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodDefinition <DisablePrivateReflectionAttributeCtor>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodDefinition <ObjectCtor>k__BackingField;
    public MethodDefinition NotSupportedExceptionCtorString { get; public set; }
    public MethodDefinition DisablePrivateReflectionAttributeCtor { get; public set; }
    public MethodDefinition ObjectCtor { get; public set; }
    [CompilerGeneratedAttribute]
public MethodDefinition get_NotSupportedExceptionCtorString();
    [CompilerGeneratedAttribute]
public void set_NotSupportedExceptionCtorString(MethodDefinition value);
    [CompilerGeneratedAttribute]
public MethodDefinition get_DisablePrivateReflectionAttributeCtor();
    [CompilerGeneratedAttribute]
public void set_DisablePrivateReflectionAttributeCtor(MethodDefinition value);
    [CompilerGeneratedAttribute]
public MethodDefinition get_ObjectCtor();
    [CompilerGeneratedAttribute]
public void set_ObjectCtor(MethodDefinition value);
    public static bool IsNotSupportedExceptionCtorString(MethodDefinition method);
    public static bool IsSatelliteAssemblyMarker(MethodDefinition method);
}
public class Mono.Linker.LinkContext : object {
    private Pipeline _pipeline;
    private AssemblyAction _coreAction;
    private AssemblyAction _userAction;
    private Dictionary`2<string, AssemblyAction> _actions;
    private string _outputDirectory;
    private Dictionary`2<string, string> _parameters;
    private bool _linkSymbols;
    private bool _keepTypeForwarderOnlyAssemblies;
    private bool _keepMembersForDebugger;
    private bool _ignoreUnresolved;
    private AssemblyResolver _resolver;
    private ReaderParameters _readerParameters;
    private ISymbolReaderProvider _symbolReaderProvider;
    private ISymbolWriterProvider _symbolWriterProvider;
    private AnnotationStore _annotations;
    [CompilerGeneratedAttribute]
private bool <DeterministicOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableReducedTracing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepUsedAttributeTypesOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepDependencyAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StripResources>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Substitutions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkingHelpers <MarkingHelpers>k__BackingField;
    [CompilerGeneratedAttribute]
private KnownMembers <MarkedKnownMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private Tracer <Tracer>k__BackingField;
    [CompilerGeneratedAttribute]
private IReflectionPatternRecorder <ReflectionPatternRecorder>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExcludedFeatures>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeOptimizations <DisabledOptimizations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddReflectionAnnotations>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyListFile>k__BackingField;
    public Pipeline Pipeline { get; }
    public AnnotationStore Annotations { get; }
    public bool DeterministicOutput { get; public set; }
    public string OutputDirectory { get; public set; }
    public AssemblyAction CoreAction { get; public set; }
    public AssemblyAction UserAction { get; public set; }
    public bool LinkSymbols { get; public set; }
    public bool KeepTypeForwarderOnlyAssemblies { get; public set; }
    public bool KeepMembersForDebugger { get; public set; }
    public bool IgnoreUnresolved { get; public set; }
    public bool EnableReducedTracing { get; public set; }
    public bool KeepUsedAttributeTypesOnly { get; public set; }
    public bool KeepDependencyAttributes { get; public set; }
    public bool StripResources { get; public set; }
    public List`1<string> Substitutions { get; private set; }
    public IDictionary Actions { get; }
    public AssemblyResolver Resolver { get; }
    public ReaderParameters ReaderParameters { get; }
    public ISymbolReaderProvider SymbolReaderProvider { get; public set; }
    public ISymbolWriterProvider SymbolWriterProvider { get; public set; }
    public bool LogMessages { get; public set; }
    private ILogger Logger { get; public set; }
    public MarkingHelpers MarkingHelpers { get; private set; }
    public KnownMembers MarkedKnownMembers { get; private set; }
    public Tracer Tracer { get; private set; }
    public IReflectionPatternRecorder ReflectionPatternRecorder { get; public set; }
    public String[] ExcludedFeatures { get; public set; }
    public CodeOptimizations DisabledOptimizations { get; public set; }
    public bool AddReflectionAnnotations { get; public set; }
    public string AssemblyListFile { get; public set; }
    public LinkContext(Pipeline pipeline);
    public LinkContext(Pipeline pipeline, AssemblyResolver resolver);
    public LinkContext(Pipeline pipeline, AssemblyResolver resolver, ReaderParameters readerParameters, UnintializedContextFactory factory);
    public Pipeline get_Pipeline();
    public AnnotationStore get_Annotations();
    [CompilerGeneratedAttribute]
public bool get_DeterministicOutput();
    [CompilerGeneratedAttribute]
public void set_DeterministicOutput(bool value);
    public string get_OutputDirectory();
    public void set_OutputDirectory(string value);
    public AssemblyAction get_CoreAction();
    public void set_CoreAction(AssemblyAction value);
    public AssemblyAction get_UserAction();
    public void set_UserAction(AssemblyAction value);
    public bool get_LinkSymbols();
    public void set_LinkSymbols(bool value);
    public bool get_KeepTypeForwarderOnlyAssemblies();
    public void set_KeepTypeForwarderOnlyAssemblies(bool value);
    public bool get_KeepMembersForDebugger();
    public void set_KeepMembersForDebugger(bool value);
    public bool get_IgnoreUnresolved();
    public void set_IgnoreUnresolved(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableReducedTracing();
    [CompilerGeneratedAttribute]
public void set_EnableReducedTracing(bool value);
    [CompilerGeneratedAttribute]
public bool get_KeepUsedAttributeTypesOnly();
    [CompilerGeneratedAttribute]
public void set_KeepUsedAttributeTypesOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_KeepDependencyAttributes();
    [CompilerGeneratedAttribute]
public void set_KeepDependencyAttributes(bool value);
    [CompilerGeneratedAttribute]
public bool get_StripResources();
    [CompilerGeneratedAttribute]
public void set_StripResources(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Substitutions();
    [CompilerGeneratedAttribute]
private void set_Substitutions(List`1<string> value);
    public IDictionary get_Actions();
    public AssemblyResolver get_Resolver();
    public ReaderParameters get_ReaderParameters();
    public ISymbolReaderProvider get_SymbolReaderProvider();
    public void set_SymbolReaderProvider(ISymbolReaderProvider value);
    public ISymbolWriterProvider get_SymbolWriterProvider();
    public void set_SymbolWriterProvider(ISymbolWriterProvider value);
    [CompilerGeneratedAttribute]
public bool get_LogMessages();
    [CompilerGeneratedAttribute]
public void set_LogMessages(bool value);
    [CompilerGeneratedAttribute]
private ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public MarkingHelpers get_MarkingHelpers();
    [CompilerGeneratedAttribute]
private void set_MarkingHelpers(MarkingHelpers value);
    [CompilerGeneratedAttribute]
public KnownMembers get_MarkedKnownMembers();
    [CompilerGeneratedAttribute]
private void set_MarkedKnownMembers(KnownMembers value);
    [CompilerGeneratedAttribute]
public Tracer get_Tracer();
    [CompilerGeneratedAttribute]
private void set_Tracer(Tracer value);
    [CompilerGeneratedAttribute]
public IReflectionPatternRecorder get_ReflectionPatternRecorder();
    [CompilerGeneratedAttribute]
public void set_ReflectionPatternRecorder(IReflectionPatternRecorder value);
    [CompilerGeneratedAttribute]
public String[] get_ExcludedFeatures();
    [CompilerGeneratedAttribute]
public void set_ExcludedFeatures(String[] value);
    [CompilerGeneratedAttribute]
public CodeOptimizations get_DisabledOptimizations();
    [CompilerGeneratedAttribute]
public void set_DisabledOptimizations(CodeOptimizations value);
    [CompilerGeneratedAttribute]
public bool get_AddReflectionAnnotations();
    [CompilerGeneratedAttribute]
public void set_AddReflectionAnnotations(bool value);
    [CompilerGeneratedAttribute]
public string get_AssemblyListFile();
    [CompilerGeneratedAttribute]
public void set_AssemblyListFile(string value);
    public void AddSubstitutionFile(string file);
    public TypeDefinition GetType(string fullName);
    public AssemblyDefinition Resolve(string name);
    public AssemblyDefinition Resolve(IMetadataScope scope);
    public void RegisterAssembly(AssemblyDefinition assembly);
    protected bool SeenFirstTime(AssemblyDefinition assembly);
    public virtual void SafeReadSymbols(AssemblyDefinition assembly);
    public virtual ICollection`1<AssemblyDefinition> ResolveReferences(AssemblyDefinition assembly);
    private static AssemblyNameReference GetReference(IMetadataScope scope);
    public void SetAction(AssemblyDefinition assembly, AssemblyAction defaultAction);
    protected void SetDefaultAction(AssemblyDefinition assembly);
    public static bool IsCore(AssemblyNameReference name);
    public virtual AssemblyDefinition[] GetAssemblies();
    public void SetParameter(string key, string value);
    public bool HasParameter(string key);
    public string GetParameter(string key);
    public sealed virtual void Dispose();
    public bool IsFeatureExcluded(string featureName);
    public bool IsOptimizationEnabled(CodeOptimizations optimization);
    public void LogMessage(string message);
    public void LogMessage(MessageImportance importance, string message);
}
public class Mono.Linker.LoadException : Exception {
    public LoadException(string message);
    public LoadException(string message, Exception innerException);
}
internal class Mono.Linker.LoggingReflectionPatternRecorder : object {
    private LinkContext _context;
    public LoggingReflectionPatternRecorder(LinkContext context);
    public sealed virtual void RecognizedReflectionAccessPattern(MethodDefinition sourceMethod, MethodDefinition reflectionMethod, IMemberDefinition accessedItem);
    public sealed virtual void UnrecognizedReflectionAccessPattern(MethodDefinition sourceMethod, MethodDefinition reflectionMethod, string message);
}
public class Mono.Linker.MarkException : Exception {
    [CompilerGeneratedAttribute]
private MethodDefinition <Method>k__BackingField;
    public MethodDefinition Method { get; private set; }
    public MarkException(string message);
    public MarkException(string message, Exception innerException);
    public MarkException(string message, Exception innerException, MethodDefinition method);
    [CompilerGeneratedAttribute]
public MethodDefinition get_Method();
    [CompilerGeneratedAttribute]
private void set_Method(MethodDefinition value);
}
public class Mono.Linker.MarkingHelpers : object {
    protected LinkContext _context;
    public MarkingHelpers(LinkContext context);
    public void MarkExportedType(ExportedType type, ModuleDefinition module);
}
public enum Mono.Linker.MessageImportance : Enum {
    public int value__;
    public static MessageImportance High;
    public static MessageImportance Low;
    public static MessageImportance Normal;
}
public enum Mono.Linker.MethodAction : Enum {
    public int value__;
    public static MethodAction Nothing;
    public static MethodAction Parse;
    public static MethodAction ForceParse;
    public static MethodAction ConvertToStub;
    public static MethodAction ConvertToThrow;
}
public static class Mono.Linker.MethodBodyScanner : object {
    public static bool IsWorthConvertingToThrow(MethodBody body);
    public static IEnumerable`1<InterfaceImplementation> GetReferencedInterfaces(AnnotationStore annotations, MethodBody body);
    private static HashSet`1<TypeDefinition> AllPossibleStackTypes(MethodDefinition method);
    private static void AddMatchingInterfaces(HashSet`1<InterfaceImplementation> results, TypeDefinition type, TypeDefinition[] interfaceTypes);
    private static void AddFromGenericInstance(HashSet`1<TypeDefinition> set, IGenericInstance instance);
    private static void AddFromGenericParameterProvider(HashSet`1<TypeDefinition> set, IGenericParameterProvider provider);
    private static void AddIfResolved(HashSet`1<TypeDefinition> set, TypeReference item);
}
[ExtensionAttribute]
public static class Mono.Linker.MethodDefinitionExtensions : object {
    [ExtensionAttribute]
public static bool IsDefaultConstructor(MethodDefinition method);
    [ExtensionAttribute]
public static bool IsInstanceConstructor(MethodDefinition method);
    [ExtensionAttribute]
public static bool IsIntrinsic(MethodDefinition method);
    [ExtensionAttribute]
public static bool IsPropertyMethod(MethodDefinition md);
    [ExtensionAttribute]
public static bool IsPublicInstancePropertyMethod(MethodDefinition md);
    [ExtensionAttribute]
public static bool IsEventMethod(MethodDefinition md);
    [ExtensionAttribute]
public static PropertyDefinition GetProperty(MethodDefinition md);
    [ExtensionAttribute]
public static EventDefinition GetEvent(MethodDefinition md);
    [ExtensionAttribute]
public static bool IsStaticConstructor(MethodDefinition method);
    [ExtensionAttribute]
public static bool IsFinalizer(MethodDefinition method);
    [ExtensionAttribute]
public static void ClearDebugInformation(MethodDefinition method);
}
[ExtensionAttribute]
public static class Mono.Linker.MethodReferenceExtensions : object {
    [ExtensionAttribute]
public static TypeReference GetReturnType(MethodReference method);
    [ExtensionAttribute]
public static TypeReference GetParameterType(MethodReference method, int parameterIndex);
}
public class Mono.Linker.OutputException : Exception {
    public OutputException(string message);
    public OutputException(string message, Exception innerException);
}
[DebuggerDisplayAttribute("{Override}")]
public class Mono.Linker.OverrideInformation : object {
    public MethodDefinition Base;
    public MethodDefinition Override;
    public InterfaceImplementation MatchingInterfaceImplementation;
    public bool IsOverrideOfInterfaceMember { get; }
    public TypeDefinition InterfaceType { get; }
    public OverrideInformation(MethodDefinition base, MethodDefinition override, InterfaceImplementation matchingInterfaceImplementation);
    public bool get_IsOverrideOfInterfaceMember();
    public TypeDefinition get_InterfaceType();
}
public class Mono.Linker.Pipeline : object {
    private List`1<IStep> _steps;
    public void PrependStep(IStep step);
    public void AppendStep(IStep step);
    public void AddStepBefore(Type target, IStep step);
    public void AddStepBefore(IStep target, IStep step);
    public void ReplaceStep(Type target, IStep step);
    public void AddStepAfter(Type target, IStep step);
    public void AddStepAfter(IStep target, IStep step);
    public void RemoveStep(Type target);
    public void Process(LinkContext context);
    protected virtual void ProcessStep(LinkContext context, IStep step);
    public IStep[] GetSteps();
    public bool ContainsStep(Type type);
}
public abstract class Mono.Linker.Steps.BaseStep : object {
    private LinkContext _context;
    public LinkContext Context { get; }
    public AnnotationStore Annotations { get; }
    public Tracer Tracer { get; }
    public MarkingHelpers MarkingHelpers { get; }
    public LinkContext get_Context();
    public AnnotationStore get_Annotations();
    public Tracer get_Tracer();
    public MarkingHelpers get_MarkingHelpers();
    public sealed virtual void Process(LinkContext context);
    protected virtual bool ConditionToProcess();
    protected virtual void Process();
    protected virtual void EndProcess();
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
}
[FlagsAttribute]
internal enum Mono.Linker.Steps.BindingFlags : Enum {
    public int value__;
    public static BindingFlags Default;
    public static BindingFlags IgnoreCase;
    public static BindingFlags DeclaredOnly;
    public static BindingFlags Instance;
    public static BindingFlags Static;
    public static BindingFlags Public;
    public static BindingFlags NonPublic;
    public static BindingFlags FlattenHierarchy;
    public static BindingFlags InvokeMethod;
    public static BindingFlags CreateInstance;
    public static BindingFlags GetField;
    public static BindingFlags SetField;
    public static BindingFlags GetProperty;
    public static BindingFlags SetProperty;
    public static BindingFlags PutDispProperty;
    public static BindingFlags PutRefDispProperty;
    public static BindingFlags ExactBinding;
    public static BindingFlags SuppressChangeType;
    public static BindingFlags OptionalParamBinding;
    public static BindingFlags IgnoreReturn;
}
public class Mono.Linker.Steps.BlacklistStep : BaseStep {
    protected virtual void Process();
    private static string GetAssemblyName(string descriptor);
    private bool ShouldProcessAssemblyResource(string name);
    private AssemblyDefinition GetAssemblyIfReferenced(string name);
    protected virtual void AddToPipeline(IStep resolveStep);
    protected virtual IStep GetExternalResolveStep(EmbeddedResource resource, AssemblyDefinition assembly);
    private static ResolveFromXmlStep GetResolveStep(string descriptor);
    protected static XPathDocument GetExternalDescriptor(EmbeddedResource resource);
    private static XPathDocument GetDescriptor(string descriptor);
    private static Stream GetResource(string descriptor);
    [CompilerGeneratedAttribute]
private bool <Process>b__0_3(Resource res);
}
public class Mono.Linker.Steps.BodySubstituterStep : BaseStep {
    protected virtual void Process();
    private static XPathDocument GetSubstitutions(string substitutionsFile);
    private static XPathDocument GetSubstitutions(Stream substitutions);
    private void ReadSubstitutionFile(XPathDocument document);
    private void ProcessAssemblies(XPathNodeIterator iterator);
    private void ProcessAssembly(AssemblyDefinition assembly, XPathNodeIterator iterator);
    private void ProcessTypes(AssemblyDefinition assembly, XPathNodeIterator iterator);
    private void ProcessType(TypeDefinition type, XPathNavigator nav);
    private void ProcessMethods(TypeDefinition type, XPathNodeIterator iterator);
    private void ProcessMethod(TypeDefinition type, XPathNodeIterator iterator);
    private void ProcessField(TypeDefinition type, XPathNodeIterator iterator);
    private void ProcessResources(AssemblyDefinition assembly, XPathNodeIterator iterator);
    private static bool TryConvertValue(string value, TypeReference target, Object& result);
    private static MethodDefinition FindMethod(TypeDefinition type, string signature);
    private static AssemblyNameReference GetAssemblyName(XPathNavigator nav);
    private static string GetAttribute(XPathNavigator nav, string attribute);
}
public class Mono.Linker.Steps.CleanStep : BaseStep {
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
    private static void CleanAssembly(AssemblyDefinition asm);
    private static void CleanType(TypeDefinition type);
    private static MethodDefinition CheckMethod(TypeDefinition type, MethodDefinition method);
    private static void CleanEvents(TypeDefinition type);
    private static bool IsEventUsed(EventDefinition evt);
    private static void CleanProperties(TypeDefinition type);
    private static bool IsPropertyUsed(PropertyDefinition prop);
}
public class Mono.Linker.Steps.GenerateProguardConfiguration : BaseStep {
    private string filename;
    private TextWriter writer;
    public GenerateProguardConfiguration(string outputFileName);
    protected virtual void Process();
    protected virtual void EndProcess();
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
    private void ProcessType(TypeDefinition type);
    private void ProcessMethod(MethodDefinition method);
}
public interface Mono.Linker.Steps.IStep {
    public abstract virtual void Process(LinkContext context);
}
public class Mono.Linker.Steps.LoadI18nAssemblies : BaseStep {
    private static Byte[] _pktoken;
    private I18nAssemblies _assemblies;
    public LoadI18nAssemblies(I18nAssemblies assemblies);
    private static LoadI18nAssemblies();
    protected virtual bool ConditionToProcess();
    protected virtual void Process();
    private bool ShouldCopyAssembly(I18nAssemblies current);
    private void LoadI18nAssembly(I18nAssemblies asm);
    private void LoadAssembly(AssemblyNameReference name);
    private AssemblyNameReference GetAssemblyName(I18nAssemblies assembly);
    private Version GetCorlibVersion();
}
public class Mono.Linker.Steps.LoadReferencesStep : BaseStep {
    private HashSet`1<AssemblyNameDefinition> references;
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
    protected void ProcessReferences(AssemblyDefinition assembly);
}
public class Mono.Linker.Steps.MarkStep : object {
    protected LinkContext _context;
    protected Queue`1<MethodDefinition> _methods;
    protected List`1<MethodDefinition> _virtual_methods;
    protected Queue`1<AttributeProviderPair> _assemblyLevelAttributes;
    protected Queue`1<AttributeProviderPair> _lateMarkedAttributes;
    protected List`1<TypeDefinition> _typesWithInterfaces;
    protected List`1<MethodBody> _unreachableBodies;
    public AnnotationStore Annotations { get; }
    public Tracer Tracer { get; }
    public AnnotationStore get_Annotations();
    public Tracer get_Tracer();
    public virtual void Process(LinkContext context);
    private void Initialize();
    protected virtual void InitializeAssembly(AssemblyDefinition assembly);
    private void Complete();
    private void InitializeType(TypeDefinition type);
    protected bool IsFullyPreserved(TypeDefinition type);
    private void InitializeFields(TypeDefinition type);
    private void InitializeMethods(Collection`1<MethodDefinition> methods);
    private void MarkEntireType(TypeDefinition type);
    private void Process();
    private bool ProcessPrimaryQueue();
    private void ProcessQueue();
    private bool QueueIsEmpty();
    protected virtual void EnqueueMethod(MethodDefinition method);
    private void ProcessVirtualMethods();
    private void ProcessMarkedTypesWithInterfaces();
    private void ProcessPendingBodies();
    private void ProcessVirtualMethod(MethodDefinition method);
    private void ProcessOverride(OverrideInformation overrideInformation);
    private bool IsInterfaceOverrideThatDoesNotNeedMarked(OverrideInformation overrideInformation, bool isInstantiated);
    private bool IsInterfaceImplementationMarked(TypeDefinition type, TypeDefinition interfaceType);
    private void MarkMarshalSpec(IMarshalInfoProvider spec);
    private void MarkCustomAttributes(ICustomAttributeProvider provider);
    private static AssemblyDefinition GetAssemblyFromCustomAttributeProvider(ICustomAttributeProvider provider);
    protected virtual bool IsUserDependencyMarker(TypeReference type);
    protected virtual void MarkUserDependency(MemberReference context, CustomAttribute ca);
    private static TypeDefinition FindType(AssemblyDefinition assembly, string fullName);
    private bool MarkDependencyMethod(TypeDefinition type, string name, String[] signature);
    private bool MarkDependencyField(TypeDefinition type, string name);
    private void LazyMarkCustomAttributes(ICustomAttributeProvider provider, AssemblyDefinition assembly);
    protected virtual void MarkCustomAttribute(CustomAttribute ca);
    protected virtual bool ShouldMarkCustomAttribute(CustomAttribute ca, ICustomAttributeProvider provider);
    protected virtual bool ShouldMarkTypeStaticConstructor(TypeDefinition type);
    protected void MarkStaticConstructor(TypeDefinition type);
    protected virtual bool ShouldMarkTopLevelCustomAttribute(AttributeProviderPair app, MethodDefinition resolvedConstructor);
    protected void MarkSecurityDeclarations(ISecurityDeclarationProvider provider);
    protected virtual void MarkSecurityDeclaration(SecurityDeclaration sd);
    protected virtual void MarkSecurityAttribute(SecurityAttribute sa);
    protected void MarkSecurityAttributeProperties(SecurityAttribute sa, TypeDefinition attribute);
    protected void MarkSecurityAttributeFields(SecurityAttribute sa, TypeDefinition attribute);
    protected void MarkCustomAttributeProperties(CustomAttribute ca, TypeDefinition attribute);
    protected void MarkCustomAttributeProperty(CustomAttributeNamedArgument namedArgument, TypeDefinition attribute);
    private PropertyDefinition GetProperty(TypeDefinition type, string propertyname);
    protected void MarkCustomAttributeFields(CustomAttribute ca, TypeDefinition attribute);
    protected void MarkCustomAttributeField(CustomAttributeNamedArgument namedArgument, TypeDefinition attribute);
    private FieldDefinition GetField(TypeDefinition type, string fieldname);
    private MethodDefinition GetMethodWithNoParameters(TypeDefinition type, string methodname);
    private void MarkCustomAttributeArguments(CustomAttribute ca);
    private void MarkCustomAttributeArgument(CustomAttributeArgument argument);
    protected bool CheckProcessed(IMetadataTokenProvider provider);
    protected void MarkAssembly(AssemblyDefinition assembly);
    private void MarkEntireAssembly(AssemblyDefinition assembly);
    private void ProcessModule(AssemblyDefinition assembly);
    private bool ProcessLazyAttributes();
    private bool ProcessLateMarkedAttributes();
    protected void MarkField(FieldReference reference);
    private void MarkField(FieldDefinition field);
    protected virtual bool IgnoreScope(IMetadataScope scope);
    private void MarkScope(IMetadataScope scope);
    protected virtual void MarkSerializable(TypeDefinition type);
    protected virtual TypeDefinition MarkType(TypeReference reference);
    protected virtual void DoAdditionalProcessing();
    protected virtual void DoAdditionalTypeProcessing(TypeDefinition type);
    protected virtual void DoAdditionalFieldProcessing(FieldDefinition field);
    protected virtual void DoAdditionalPropertyProcessing(PropertyDefinition property);
    protected virtual void DoAdditionalEventProcessing(EventDefinition evt);
    protected virtual void DoAdditionalInstantiatedTypeProcessing(TypeDefinition type);
    private void MarkAssemblyCustomAttributes(AssemblyDefinition assembly);
    private TypeDefinition GetDebuggerAttributeTargetType(CustomAttribute ca, AssemblyDefinition asm);
    private void MarkTypeSpecialCustomAttributes(TypeDefinition type);
    private bool MarkSpecialCustomAttributeDependencies(CustomAttribute ca);
    private void MarkMethodSpecialCustomAttributes(MethodDefinition method);
    private void MarkXmlSchemaProvider(TypeDefinition type, CustomAttribute attribute);
    protected virtual void MarkTypeConverterLikeDependency(CustomAttribute attribute, Func`2<MethodDefinition, bool> predicate);
    private void MarkTypeWithDebuggerDisplayAttribute(TypeDefinition type, CustomAttribute attribute);
    private void MarkTypeWithDebuggerTypeProxyAttribute(TypeDefinition type, CustomAttribute attribute);
    private static bool TryGetStringArgument(CustomAttribute attribute, String& argument);
    protected int MarkNamedMethod(TypeDefinition type, string method_name);
    private void MarkSoapHeader(MethodDefinition method, CustomAttribute attribute);
    private void MarkNamedField(TypeDefinition type, string field_name);
    private void MarkNamedProperty(TypeDefinition type, string property_name);
    private void MarkInterfaceImplementations(TypeDefinition type);
    private void MarkGenericParameterProvider(IGenericParameterProvider provider);
    private void MarkGenericParameter(GenericParameter parameter);
    private bool IsVirtualNeededByTypeDueToPreservedScope(MethodDefinition method);
    private bool IsVirtualNeededByInstantiatedTypeDueToPreservedScope(MethodDefinition method);
    private static bool IsSpecialSerializationConstructor(MethodDefinition method);
    protected void MarkMethodsIf(Collection`1<MethodDefinition> methods, Func`2<MethodDefinition, bool> predicate);
    protected MethodDefinition MarkMethodIf(Collection`1<MethodDefinition> methods, Func`2<MethodDefinition, bool> predicate);
    protected bool MarkDefaultConstructor(TypeDefinition type);
    private static bool IsNonEmptyStaticConstructor(MethodDefinition method);
    private static bool HasSerializationAttribute(MethodDefinition method);
    protected virtual bool AlwaysMarkTypeAsInstantiated(TypeDefinition td);
    private void MarkEventSourceProviders(TypeDefinition td);
    protected virtual void MarkMulticastDelegate(TypeDefinition type);
    private TypeDefinition ResolveFullyQualifiedTypeName(string name);
    protected TypeReference GetOriginalType(TypeReference type);
    private void MarkParameters(FunctionPointerType fnptr);
    private void MarkModifierType(IModifierType mod);
    private void MarkGenericArguments(IGenericInstance instance);
    private void MarkGenericArgumentConstructors(IGenericInstance instance);
    private static IGenericParameterProvider GetGenericProviderFromInstance(IGenericInstance instance);
    private void ApplyPreserveInfo(TypeDefinition type);
    private void ApplyPreserveMethods(TypeDefinition type);
    private void ApplyPreserveMethods(MethodDefinition method);
    protected bool MarkFields(TypeDefinition type, bool includeStatic, bool markBackingFieldsOnlyIfPropertyMarked);
    private static PropertyDefinition SearchPropertiesForMatchingFieldDefinition(FieldDefinition field);
    protected void MarkStaticFields(TypeDefinition type);
    protected virtual bool MarkMethods(TypeDefinition type);
    private void MarkMethodCollection(IList`1<MethodDefinition> methods);
    protected void MarkIndirectlyCalledMethod(MethodDefinition method);
    protected virtual MethodDefinition MarkMethod(MethodReference reference);
    private AssemblyDefinition ResolveAssembly(IMetadataScope scope);
    protected MethodReference GetOriginalMethod(MethodReference method);
    protected virtual void ProcessMethod(MethodDefinition method);
    protected virtual void DoAdditionalMethodProcessing(MethodDefinition method);
    protected virtual bool ShouldMarkAsInstancePossible(MethodDefinition method);
    protected virtual void MarkRequirementsForInstantiatedTypes(TypeDefinition type);
    [IteratorStateMachineAttribute("Mono.Linker.Steps.MarkStep/<GetRequiredMethodsForInstantiatedType>d__130")]
protected virtual IEnumerable`1<MethodDefinition> GetRequiredMethodsForInstantiatedType(TypeDefinition type);
    private void MarkExplicitInterfaceImplementation(MethodDefinition method, MethodReference ov);
    private void MarkNewCodeDependencies(MethodDefinition method);
    protected virtual void MarkAndCacheConvertToThrowExceptionCtor();
    private bool MarkDisablePrivateReflectionAttribute();
    private void MarkBaseMethods(MethodDefinition method);
    private void ProcessInteropMethod(MethodDefinition method);
    protected virtual bool ShouldParseMethodBody(MethodDefinition method);
    protected void MarkProperty(PropertyDefinition prop);
    protected virtual void MarkEvent(EventDefinition evt);
    private void MarkMethodIfNotNull(MethodReference method);
    protected virtual void MarkMethodBody(MethodBody body);
    private bool IsUnreachableBody(MethodBody body);
    private void MarkInterfacesNeededByBodyStack(MethodBody body);
    protected virtual void MarkInstruction(Instruction instruction);
    protected virtual void HandleUnresolvedType(TypeReference reference);
    protected virtual void HandleUnresolvedMethod(MethodReference reference);
    protected virtual void HandleUnresolvedField(FieldReference reference);
    protected virtual bool ShouldMarkInterfaceImplementation(TypeDefinition type, InterfaceImplementation iface, TypeDefinition resolvedInterfaceType);
    protected virtual void MarkInterfaceImplementation(InterfaceImplementation iface);
    private bool HasManuallyTrackedDependency(MethodBody methodBody);
    protected virtual bool ProcessReflectionDependency(MethodBody body, Instruction instruction);
    protected virtual void MarkReflectionLikeDependencies(MethodBody body);
    private static int GetInstructionAtStackDepth(Collection`1<Instruction> instructions, int startIndex, int stackSizeToBacktrace);
    private static TypeDefinition FindReflectionTypeForLookup(Collection`1<Instruction> instructions, int startIndex);
    private static int GetIndexOfInstruction(Collection`1<Instruction> instructions, OpCode opcode, int startIndex, Predicate`1<Instruction> comparer);
}
public class Mono.Linker.Steps.OutputStep : BaseStep {
    private static Dictionary`2<ushort, TargetArchitecture> architectureMap;
    private List`1<string> assembliesWritten;
    private static TargetArchitecture CalculateArchitecture(TargetArchitecture readyToRunArch);
    protected virtual void Process();
    protected virtual void EndProcess();
    private void CheckOutputDirectory();
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
    protected void WriteAssembly(AssemblyDefinition assembly, string directory);
    protected virtual void WriteAssembly(AssemblyDefinition assembly, string directory, WriterParameters writerParameters);
    private void OutputAssembly(AssemblyDefinition assembly);
    protected virtual void DeleteAssembly(AssemblyDefinition assembly, string directory);
    private void CloseSymbols(AssemblyDefinition assembly);
    private WriterParameters SaveSymbols(AssemblyDefinition assembly);
    private void CopySatelliteAssembliesIfNeeded(AssemblyDefinition assembly, string directory);
    private void CopyConfigFileIfNeeded(AssemblyDefinition assembly, string directory);
    private static string GetAssemblyResourceFileName(string assembly);
    private static string GetConfigFile(string assembly);
    private static FileInfo GetOriginalAssemblyFileInfo(AssemblyDefinition assembly);
    protected virtual void CopyAssembly(AssemblyDefinition assembly, string directory);
    private static void CopyFileAndRemoveReadOnly(string src, string dest);
    protected virtual string GetAssemblyFileName(AssemblyDefinition assembly, string directory);
}
public class Mono.Linker.Steps.PreserveDependencyLookupStep : LoadReferencesStep {
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
    public static bool IsPreserveDependencyAttribute(TypeReference tr);
    public static bool HasPreserveDependencyAttribute(MethodDefinition method);
    private void ProcessPreserveDependencyAttribute(Collection`1<CustomAttribute> attributes);
}
public class Mono.Linker.Steps.RegenerateGuidStep : BaseStep {
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
    private static void RegenerateGuid(AssemblyDefinition asm);
}
public class Mono.Linker.Steps.ResolveFromAssemblyStep : ResolveStep {
    private AssemblyDefinition _assembly;
    private string _file;
    private RootVisibility _rootVisibility;
    public ResolveFromAssemblyStep(string assembly, RootVisibility rootVisibility);
    public ResolveFromAssemblyStep(AssemblyDefinition assembly);
    protected virtual void Process();
    protected virtual void ProcessLibrary(AssemblyDefinition assembly);
    public static void ProcessLibrary(LinkContext context, AssemblyDefinition assembly, RootVisibility rootVisibility);
    private static void MarkType(LinkContext context, TypeDefinition type, RootVisibility rootVisibility);
    private void ProcessExecutable(AssemblyDefinition assembly);
    private static void MarkFields(LinkContext context, Collection`1<FieldDefinition> fields, RootVisibility rootVisibility);
    private static void MarkMethods(LinkContext context, Collection`1<MethodDefinition> methods, RootVisibility rootVisibility);
    private static void MarkMethod(LinkContext context, MethodDefinition method, MethodAction action, RootVisibility rootVisibility);
    private static bool HasInternalsVisibleTo(AssemblyDefinition assembly);
}
public class Mono.Linker.Steps.ResolveFromXApiStep : ResolveStep {
    private static string _name;
    private static string _ns;
    private XPathDocument _document;
    public ResolveFromXApiStep(XPathDocument document);
    private static ResolveFromXApiStep();
    protected virtual void Process();
    public sealed virtual void OnAssembly(XPathNavigator nav, AssemblyDefinition assembly);
    public sealed virtual void OnAttribute(XPathNavigator nav);
    public sealed virtual void OnClass(XPathNavigator nav, TypeDefinition type);
    public sealed virtual void OnInterface(XPathNavigator nav, TypeDefinition type);
    public sealed virtual void OnField(XPathNavigator nav, FieldDefinition field);
    public sealed virtual void OnMethod(XPathNavigator nav, MethodDefinition method);
    public sealed virtual void OnConstructor(XPathNavigator nav, MethodDefinition method);
    public sealed virtual void OnProperty(XPathNavigator nav, PropertyDefinition property);
    public sealed virtual void OnEvent(XPathNavigator nav, EventDefinition evt);
    private static string GetName(XPathNavigator nav);
    private static string GetAttribute(XPathNavigator nav, string attribute);
    private void MarkType(TypeDefinition type);
    private void MarkField(FieldDefinition field);
    private void InternalMark(IMetadataTokenProvider provider);
    private void MarkMethod(MethodDefinition method);
}
public class Mono.Linker.Steps.ResolveFromXmlStep : ResolveStep {
    private static string _signature;
    private static string _fullname;
    private static string _required;
    private static string _preserve;
    private static string _accessors;
    private static string _ns;
    private static String[] _accessorsAll;
    private static Char[] _accessorsSep;
    private XPathDocument _document;
    private string _xmlDocumentLocation;
    private string _resourceName;
    private AssemblyDefinition _resourceAssembly;
    public ResolveFromXmlStep(XPathDocument document, string xmlDocumentLocation);
    public ResolveFromXmlStep(XPathDocument document, string resourceName, AssemblyDefinition resourceAssembly, string xmlDocumentLocation);
    private static ResolveFromXmlStep();
    protected virtual void Process();
    protected virtual void ProcessAssemblies(LinkContext context, XPathNodeIterator iterator);
    protected virtual void ProcessAssembly(AssemblyDefinition assembly, XPathNodeIterator iterator);
    private void ProcessNamespaces(AssemblyDefinition assembly, XPathNodeIterator iterator);
    private void MarkAndPreserveAll(TypeDefinition type);
    private void ProcessTypes(AssemblyDefinition assembly, XPathNodeIterator iterator);
    private static bool IsTypePattern(string fullname);
    private static Regex CreateRegexFromPattern(string pattern);
    private void MatchType(TypeDefinition type, Regex regex, XPathNavigator nav);
    private void MatchExportedType(ExportedType exportedType, ModuleDefinition module, Regex regex, XPathNavigator nav);
    private void ProcessTypePattern(string fullname, AssemblyDefinition assembly, XPathNavigator nav);
    protected virtual void ProcessType(TypeDefinition type, XPathNavigator nav);
    private void MarkSelectedFields(XPathNavigator nav, TypeDefinition type);
    private void MarkSelectedMethods(XPathNavigator nav, TypeDefinition type);
    private void MarkSelectedEvents(XPathNavigator nav, TypeDefinition type);
    private void MarkSelectedProperties(XPathNavigator nav, TypeDefinition type);
    private static TypePreserve GetTypePreserve(XPathNavigator nav);
    private void ProcessFields(TypeDefinition type, XPathNodeIterator iterator);
    protected virtual void ProcessField(TypeDefinition type, XPathNodeIterator iterator);
    private void ProcessFieldSignature(TypeDefinition type, string signature);
    private void MarkField(TypeDefinition type, FieldDefinition field, string signature);
    private void ProcessFieldName(TypeDefinition type, string name);
    protected static FieldDefinition GetField(TypeDefinition type, string signature);
    private static string GetFieldSignature(FieldDefinition field);
    private void ProcessMethods(TypeDefinition type, XPathNodeIterator iterator);
    protected virtual void ProcessMethod(TypeDefinition type, XPathNodeIterator iterator);
    private void ProcessMethodSignature(TypeDefinition type, string signature);
    private void MarkMethod(TypeDefinition type, MethodDefinition method, string signature);
    private void MarkMethod(MethodDefinition method);
    private void MarkMethodIfNotNull(MethodDefinition method);
    private void ProcessMethodName(TypeDefinition type, string name);
    protected static MethodDefinition GetMethod(TypeDefinition type, string signature);
    public static string GetMethodSignature(MethodDefinition meth, bool includeGenericParameters);
    private void ProcessEvents(TypeDefinition type, XPathNodeIterator iterator);
    protected virtual void ProcessEvent(TypeDefinition type, XPathNodeIterator iterator);
    private void ProcessEventSignature(TypeDefinition type, string signature);
    private void MarkEvent(TypeDefinition type, EventDefinition event, string signature);
    private void ProcessEventName(TypeDefinition type, string name);
    protected static EventDefinition GetEvent(TypeDefinition type, string signature);
    private static string GetEventSignature(EventDefinition event);
    private void ProcessProperties(TypeDefinition type, XPathNodeIterator iterator);
    protected virtual void ProcessProperty(TypeDefinition type, XPathNodeIterator iterator);
    private void ProcessPropertySignature(TypeDefinition type, string signature, String[] accessors);
    private void MarkProperty(TypeDefinition type, PropertyDefinition property, string signature, String[] accessors);
    private void MarkPropertyAccessors(TypeDefinition type, PropertyDefinition property, String[] accessors);
    private void ProcessPropertyName(TypeDefinition type, string name, String[] accessors);
    protected static PropertyDefinition GetProperty(TypeDefinition type, string signature);
    private static string GetPropertySignature(PropertyDefinition property);
    protected AssemblyDefinition GetAssembly(LinkContext context, AssemblyNameReference assemblyName);
    protected virtual AssemblyNameReference GetAssemblyName(XPathNavigator nav);
    private static void ProcessReferences(AssemblyDefinition assembly, LinkContext context);
    private static bool IsRequired(XPathNavigator nav);
    protected static string GetSignature(XPathNavigator nav);
    private static string GetFullName(XPathNavigator nav);
    protected static String[] GetAccessors(XPathNavigator nav);
    protected static string GetAttribute(XPathNavigator nav, string attribute);
    protected virtual bool IsExcluded(XPathNavigator nav);
    public virtual string ToString();
}
public abstract class Mono.Linker.Steps.ResolveStep : BaseStep {
    private List`1<string> _unResolved;
    public bool AllMarkerResolved { get; }
    public bool get_AllMarkerResolved();
    public String[] GetUnresolvedMarkers();
    protected void AddUnresolveMarker(string signature);
}
public class Mono.Linker.Steps.SweepStep : BaseStep {
    private AssemblyDefinition[] assemblies;
    private bool sweepSymbols;
    private HashSet`1<AssemblyDefinition> BypassNGenToSave;
    public SweepStep(bool sweepSymbols);
    protected virtual void Process();
    private void RemoveUnusedAssembly(AssemblyDefinition assembly);
    protected void ProcessAssemblyAction(AssemblyDefinition assembly);
    protected virtual void SweepAssembly(AssemblyDefinition assembly);
    private bool IsUsedAssembly(AssemblyDefinition assembly);
    private bool IsMarkedAssembly(AssemblyDefinition assembly);
    protected virtual void RemoveAssembly(AssemblyDefinition assembly);
    private void SweepResources(AssemblyDefinition assembly);
    private void SweepReferences(AssemblyDefinition assembly, AssemblyDefinition referenceToRemove);
    private bool SweepTypeForwarders(AssemblyDefinition assembly);
    private void UpdateForwardedTypesScope(AssemblyDefinition assembly);
    private static void UpdateCustomAttributesTypesScopes(AssemblyDefinition assembly);
    private static void UpdateCustomAttributesTypesScopes(TypeDefinition typeDefinition);
    private static void UpdateCustomAttributesTypesScopes(Collection`1<T> providers);
    private static void UpdateCustomAttributesTypesScopes(Collection`1<GenericParameter> genericParameters);
    private static void UpdateCustomAttributesTypesScopes(ICustomAttributeProvider customAttributeProvider);
    private static void UpdateForwardedTypesScope(CustomAttribute attribute);
    private static void UpdateForwardedTypesScope(CustomAttributeArgument attributeArgument, AssemblyDefinition assembly);
    private static void UpdateTypeScope(TypeReference type, AssemblyDefinition assembly);
    protected virtual void SweepType(TypeDefinition type);
    protected void SweepNestedTypes(TypeDefinition type);
    protected void SweepInterfaces(TypeDefinition type);
    protected void SweepGenericParameters(Collection`1<GenericParameter> genericParameters);
    protected void SweepCustomAttributes(TypeDefinition type);
    protected void SweepCustomAttributes(MethodDefinition method);
    private bool ShouldSetHasSecurityToFalse(ISecurityDeclarationProvider providerAsSecurity, ICustomAttributeProvider provider, bool existingHasSecurity, IList`1<CustomAttribute> removedAttributes);
    private static bool IsSecurityAttributeType(TypeDefinition definition);
    protected IList`1<CustomAttribute> SweepCustomAttributes(ICustomAttributeProvider provider);
    protected void SweepCustomAttributeCollection(Collection`1<T> providers);
    protected virtual void SweepMethods(Collection`1<MethodDefinition> methods);
    private void SweepDebugInfo(Collection`1<MethodDefinition> methods);
    protected void SweepCollectionWithCustomAttributes(IList`1<T> list);
    protected bool SweepCollectionMetadata(IList`1<T> list);
    protected virtual bool ShouldRemove(T element);
    private static bool AreSameReference(AssemblyNameReference a, AssemblyNameReference b);
    protected virtual void ElementRemoved(IMetadataTokenProvider element);
    protected virtual void ReferenceRemoved(AssemblyDefinition assembly, AssemblyNameReference reference);
    protected virtual void InterfaceRemoved(TypeDefinition type, InterfaceImplementation iface);
    protected virtual void CustomAttributeUsageRemoved(ICustomAttributeProvider provider, CustomAttribute attribute);
}
public class Mono.Linker.Steps.TypeMapStep : BaseStep {
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
    protected virtual void MapType(TypeDefinition type);
    private void MapInterfaceHierarchy(TypeDefinition type);
    private void MapInterfaceMethodsInTypeHierarchy(TypeDefinition type);
    private static MethodReference CreateGenericInstanceCandidate(GenericContext context, TypeDefinition candidateType, MethodDefinition interfaceMethod);
    private void MapVirtualMethods(TypeDefinition type);
    private void MapVirtualMethod(MethodDefinition method);
    private void MapVirtualBaseMethod(MethodDefinition method);
    private void MapVirtualInterfaceMethod(MethodDefinition method);
    private void MapOverrides(MethodDefinition method);
    private void MapBaseTypeHierarchy(TypeDefinition type);
    private void AnnotateMethods(MethodDefinition base, MethodDefinition override, InterfaceImplementation matchingInterfaceImplementation);
    private static MethodDefinition GetBaseMethodInTypeHierarchy(MethodDefinition method);
    private static MethodDefinition GetBaseMethodInTypeHierarchy(TypeDefinition type, MethodDefinition method);
    private static MethodDefinition GetBaseInflatedInterfaceMethodInTypeHierarchy(GenericContext context, TypeDefinition type, MethodDefinition interfaceMethod);
    private static IEnumerable`1<MethodDefinition> GetBaseMethodsInInterfaceHierarchy(MethodDefinition method);
    [IteratorStateMachineAttribute("Mono.Linker.Steps.TypeMapStep/<GetBaseMethodsInInterfaceHierarchy>d__16")]
private static IEnumerable`1<MethodDefinition> GetBaseMethodsInInterfaceHierarchy(TypeReference type, MethodDefinition method);
    private static MethodDefinition TryMatchMethod(TypeReference type, MethodReference method);
    private static bool MethodMatch(MethodReference candidate, MethodReference method);
    private static bool TypeMatch(IModifierType a, IModifierType b);
    private static bool TypeMatch(TypeSpecification a, TypeSpecification b);
    private static bool TypeMatch(GenericInstanceType a, GenericInstanceType b);
    private static bool TypeMatch(GenericParameter a, GenericParameter b);
    private static bool TypeMatch(TypeReference a, TypeReference b);
}
public class Mono.Linker.Steps.XmlResolutionException : Exception {
    public XmlResolutionException(string message, Exception innerException);
}
public class Mono.Linker.Tracer : object {
    protected LinkContext context;
    private Stack`1<object> dependency_stack;
    private List`1<IDependencyRecorder> recorders;
    public Tracer(LinkContext context);
    public void Finish();
    public void AddRecorder(IDependencyRecorder recorder);
    public void Push(object o, bool addDependency);
    public void Pop();
    private bool IsRecordingEnabled();
    public void AddDirectDependency(object b, object e);
    public void AddDependency(object o, bool marked);
    private void ReportDependency(object source, object target, bool marked);
}
[ExtensionAttribute]
public static class Mono.Linker.TypeDefinitionExtensions : object {
    [ExtensionAttribute]
public static bool HasInterface(TypeDefinition type, TypeDefinition interfaceType, InterfaceImplementation& implementation);
    [ExtensionAttribute]
public static TypeReference GetEnumUnderlyingType(TypeDefinition enumType);
    [ExtensionAttribute]
public static bool IsMulticastDelegate(TypeDefinition td);
    [ExtensionAttribute]
public static bool IsSerializable(TypeDefinition td);
}
public static class Mono.Linker.TypeNameParser : object {
    public static bool TryParseTypeAssemblyQualifiedName(string value, String& typeName, String& assemblyName);
}
public enum Mono.Linker.TypePreserve : Enum {
    public int value__;
    public static TypePreserve Nothing;
    public static TypePreserve All;
    public static TypePreserve Fields;
    public static TypePreserve Methods;
}
[ExtensionAttribute]
public static class Mono.Linker.TypeReferenceExtensions : object {
    [ExtensionAttribute]
public static TypeReference GetInflatedBaseType(TypeReference type);
    [IteratorStateMachineAttribute("Mono.Linker.TypeReferenceExtensions/<GetInflatedInterfaces>d__1")]
[ExtensionAttribute]
public static IEnumerable`1<TypeReference> GetInflatedInterfaces(TypeReference typeRef);
    public static TypeReference InflateGenericType(GenericInstanceType genericInstanceProvider, TypeReference typeToInflate);
    private static GenericInstanceType MakeGenericType(GenericInstanceType genericInstanceProvider, GenericInstanceType type);
    [IteratorStateMachineAttribute("Mono.Linker.TypeReferenceExtensions/<GetMethods>d__4")]
[ExtensionAttribute]
public static IEnumerable`1<MethodReference> GetMethods(TypeReference type);
    private static MethodReference MakeMethodReferenceForGenericInstanceType(GenericInstanceType genericInstanceType, MethodDefinition methodDef);
    [ExtensionAttribute]
public static string ToCecilName(string fullTypeName);
    [ExtensionAttribute]
public static bool HasDefaultConstructor(TypeReference type);
    [ExtensionAttribute]
public static MethodReference GetDefaultInstanceConstructor(TypeReference type);
    [ExtensionAttribute]
public static bool IsTypeOf(TypeReference type, string ns, string name);
}
public class Mono.Linker.UnintializedContextFactory : object {
    public virtual AnnotationStore CreateAnnotationStore(LinkContext context);
    public virtual MarkingHelpers CreateMarkingHelpers(LinkContext context);
    public virtual Tracer CreateTracer(LinkContext context);
}
public class Mono.Linker.XApiReader : object {
    private static string _name;
    private static string _ns;
    private LinkContext _context;
    private XPathDocument _document;
    private IXApiVisitor _visitor;
    private AssemblyDefinition _assembly;
    private string _namespace;
    private Stack`1<TypeDefinition> _types;
    private StringBuilder _signature;
    public XApiReader(XPathDocument document, IXApiVisitor visitor);
    private static XApiReader();
    public void Process(LinkContext context);
    private void OnAssembly(XPathNavigator nav);
    private AssemblyDefinition GetAssembly(XPathNavigator nav);
    private void ProcessReferences(AssemblyDefinition assembly);
    private void OnAttribute(XPathNavigator nav);
    private void PushType(TypeDefinition type);
    private TypeDefinition PeekType();
    private TypeDefinition PopType();
    private void OnNamespace(XPathNavigator nav);
    private void OnClass(XPathNavigator nav);
    private string GetClassName(XPathNavigator nav);
    private bool IsNestedClass();
    private void OnField(XPathNavigator nav);
    private void OnInterface(XPathNavigator nav);
    private void OnMethod(XPathNavigator nav);
    private MethodDefinition GetMethod(string signature);
    private static MethodDefinition GetMethod(Collection`1<MethodDefinition> methods, string signature);
    private static string GetSignature(MethodDefinition method);
    private string GetMethodSignature();
    private void InitMethodSignature(XPathNavigator nav);
    private static string GetMethodName(string name);
    private static string NormalizeTypeName(string name);
    private static string GetTypeName(string name);
    private static string GetStringBefore(string str, string marker);
    private void OnParameter(XPathNavigator nav);
    private void OnConstructor(XPathNavigator nav);
    private void OnProperty(XPathNavigator nav);
    private void OnEvent(XPathNavigator nav);
    private void ProcessAssemblies(XPathNavigator nav);
    private void ProcessAttributes(XPathNavigator nav);
    private void ProcessNamespaces(XPathNavigator nav);
    private void ProcessClasses(XPathNavigator nav);
    private void ProcessInterfaces(XPathNavigator nav);
    private void ProcessFields(XPathNavigator nav);
    private void ProcessMethods(XPathNavigator nav);
    private void ProcessConstructors(XPathNavigator nav);
    private void ProcessParameters(XPathNavigator nav);
    private void ProcessProperties(XPathNavigator nav);
    private void ProcessEvents(XPathNavigator nav);
    private static void ProcessChildren(XPathNavigator nav, string children, OnChildren action);
    private static string GetName(XPathNavigator nav);
    private static string GetAttribute(XPathNavigator nav, string attribute);
}
public class Mono.Linker.XmlDependencyRecorder : object {
    public static string DefaultDependenciesFileName;
    private LinkContext context;
    private XmlWriter writer;
    private Stream stream;
    public XmlDependencyRecorder(LinkContext context, string fileName);
    public sealed virtual void Dispose();
    public sealed virtual void RecordDependency(object source, object target, bool marked);
    private static bool IsAssemblyBound(TypeDefinition td);
    private string TokenString(object o);
    private bool WillAssemblyBeModified(AssemblyDefinition assembly);
    private bool ShouldRecord(object o);
}
internal static class Mono.Security.Cryptography.CryptoConvert : object {
    private static int ToInt32LE(Byte[] bytes, int offset);
    private static UInt32 ToUInt32LE(Byte[] bytes, int offset);
    private static Byte[] GetBytesLE(int val);
    private static Byte[] Trim(Byte[] array);
    private static RSA FromCapiPrivateKeyBlob(Byte[] blob, int offset);
    private static RSA FromCapiPublicKeyBlob(Byte[] blob, int offset);
    public static RSA FromCapiKeyBlob(Byte[] blob);
    public static RSA FromCapiKeyBlob(Byte[] blob, int offset);
    public static Byte[] ToCapiPublicKeyBlob(RSA rsa);
}
public class Mono.Security.Cryptography.MD2Managed : HashAlgorithm {
    private Byte[] state;
    private Byte[] checksum;
    private Byte[] buffer;
    private int count;
    private Byte[] x;
    private static Byte[] PI_SUBST;
    private static MD2Managed();
    private Byte[] Padding(int nLength);
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    private void MD2Transform(Byte[] state, Byte[] checksum, Byte[] block, int index);
}
public class Mono.Tuner.AdjustVisibility : BaseStep {
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
    private void ProcessTypes(ICollection types);
    private void ProcessType(TypeDefinition type);
    private static bool IsPublic(TypeDefinition type);
    private void SetInternalVisibility(TypeDefinition type);
    private void ProcessMethods(ICollection methods);
    private void ProcessMethod(MethodDefinition method);
    private void SetInternalVisibility(MethodDefinition method);
    private void SetProtectedAndInternalVisibility(MethodDefinition method);
    private bool IsMarkedAsPublic(IMetadataTokenProvider provider);
    private void ProcessFields(IEnumerable`1<FieldDefinition> fields);
    private void ProcessField(FieldDefinition field);
    private void SetInternalVisibility(FieldDefinition field);
    private void SetProtectedAndInternalVisibility(FieldDefinition field);
    private void MarkInternalized(IMetadataTokenProvider provider);
}
public abstract class Mono.Tuner.ApplyPreserveAttributeBase : BaseSubStep {
    public SubStepTargets Targets { get; }
    protected abstract virtual bool IsPreservedAttribute(ICustomAttributeProvider provider, CustomAttribute attribute, Boolean& removeAttribute);
    public virtual SubStepTargets get_Targets();
    public virtual bool IsActiveFor(AssemblyDefinition assembly);
    public virtual void ProcessType(TypeDefinition type);
    public virtual void ProcessField(FieldDefinition field);
    public virtual void ProcessMethod(MethodDefinition method);
    public virtual void ProcessProperty(PropertyDefinition property);
    public virtual void ProcessEvent(EventDefinition event);
    private void MarkMethodIfPreserved(MethodDefinition method);
    private void MarkMethod(MethodDefinition method, CustomAttribute preserve_attribute);
    private void Mark(IMetadataTokenProvider provider, CustomAttribute preserve_attribute);
    private void PreserveConditional(IMetadataTokenProvider provider);
    private static bool IsConditionalAttribute(CustomAttribute attribute);
    private void PreserveUnconditional(IMetadataTokenProvider provider);
    private void TryApplyPreserveAttribute(TypeDefinition type);
    private List`1<CustomAttribute> GetPreserveAttributes(ICustomAttributeProvider provider);
}
public abstract class Mono.Tuner.BaseSubStep : object {
    protected LinkContext context;
    public AnnotationStore Annotations { get; }
    public SubStepTargets Targets { get; }
    public AnnotationStore get_Annotations();
    public abstract virtual SubStepTargets get_Targets();
    public virtual void Initialize(LinkContext context);
    public virtual bool IsActiveFor(AssemblyDefinition assembly);
    public virtual void ProcessAssembly(AssemblyDefinition assembly);
    public virtual void ProcessType(TypeDefinition type);
    public virtual void ProcessField(FieldDefinition field);
    public virtual void ProcessMethod(MethodDefinition method);
    public virtual void ProcessProperty(PropertyDefinition property);
    public virtual void ProcessEvent(EventDefinition event);
}
public class Mono.Tuner.CheckVisibility : BaseStep {
    private bool throw_on_error;
    protected virtual void Process();
    private bool GetThrowOnVisibilityErrorParameter();
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
    private void CheckType(TypeDefinition type);
    private void CheckInterfaces(TypeDefinition type);
    private static bool IsPublic(TypeDefinition type);
    private static bool AreInDifferentAssemblies(TypeDefinition type, TypeDefinition target);
    private static bool IsInternalVisibleTo(AssemblyDefinition assembly, AssemblyDefinition candidate);
    private static bool InternalsVisibleToSignatureMatch(string signature, AssemblyNameReference reference);
    private static string ToPublicKeyString(Byte[] public_key);
    private static bool IsInternalsVisibleToAttribute(CustomAttribute attribute);
    private bool IsVisibleFrom(TypeDefinition type, TypeReference reference);
    private bool IsVisibleFrom(TypeDefinition type, MethodReference reference);
    private bool IsVisibleFrom(TypeDefinition type, FieldReference reference);
    private static bool IsNestedIn(TypeDefinition type, TypeDefinition other);
    private static bool InHierarchy(TypeDefinition type, TypeDefinition other);
    private static void Report(string pattern, Object[] parameters);
    private void ReportError(string pattern, Object[] parameters);
    private void CheckFields(TypeDefinition type);
    private void CheckMethods(TypeDefinition type);
    private void CheckMethods(TypeDefinition type, ICollection methods);
    private void CheckBody(MethodDefinition method);
}
public class Mono.Tuner.CustomizeActions : BaseStep {
    private bool link_sdk_only;
    private HashSet`1<string> skipped_assemblies;
    private static ModuleAttributes Supported;
    public CustomizeActions(bool link_sdk_only, IEnumerable`1<string> skipped_assemblies);
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
    protected virtual bool IsPreservedAttribute(CustomAttribute attribute);
    protected virtual bool IsLinkerSafeAttribute(CustomAttribute attribute);
    protected virtual bool IsSkipped(AssemblyDefinition assembly);
    protected virtual bool IsLinked(AssemblyDefinition assembly);
    protected void ProcessUserAssembly(AssemblyDefinition assembly);
}
[ExtensionAttribute]
public static class Mono.Tuner.Extensions : object {
    [ExtensionAttribute]
public static bool TryGetLinkedAssembly(LinkContext context, string name, AssemblyDefinition& assembly);
    [ExtensionAttribute]
public static AssemblyDefinition GetAssembly(LinkContext context, string assembly_name);
    [ExtensionAttribute]
public static bool Is(TypeReference type, string namespace, string name);
}
public class Mono.Tuner.FilterAttributes : BaseStep {
    private static Hashtable attributes;
    private static FilterAttributes();
    private static void FilterAttribute(string fullname);
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
    private static void ProcessModule(ModuleDefinition module);
    private static void ProcessType(TypeDefinition type);
    private static void ProcessFields(ICollection fields);
    private static void ProcessMethods(ICollection methods);
    private static void ProcessMethod(MethodDefinition method);
    private static void ProcessParameters(ICollection parameters);
    private static void ProcessGenericParameters(IGenericParameterProvider provider);
    private static void ProcessEvents(ICollection events);
    private static void ProcessProperties(ICollection properties);
    private static void Filter(ICustomAttributeProvider provider);
    private static bool IsFilteredAttribute(CustomAttribute attribute);
}
public class Mono.Tuner.FixModuleFlags : BaseStep {
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
}
public class Mono.Tuner.InjectSecurityAttributes : BaseStep {
    private static string _safe_critical;
    private static string _critical;
    private static string _system_void;
    private static string sec_attr_folder;
    protected AssemblyDefinition _assembly;
    private MethodDefinition _safe_critical_ctor;
    private MethodDefinition _critical_ctor;
    private TypeDefinition _void_type;
    private string data_folder;
    protected virtual bool ConditionToProcess();
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
    protected void RemoveSecurityAttributes();
    private static bool RemoveSecurityDeclarations(ISecurityDeclarationProvider provider);
    private static bool RemoveSecurityAttributes(ICustomAttributeProvider provider);
    private void ProcessSecurityAttributeFile(string file);
    private void ProcessLine(string line);
    private static AttributeType DecomposeAttributeType(string marker);
    private static TargetKind DecomposeTargetKind(string marker);
    public static bool NeedsDefaultConstructor(TypeDefinition type);
    private void ProcessSecurityAttributeEntry(AttributeType type, TargetKind kind, string target);
    protected void AddCriticalAttribute(ICustomAttributeProvider provider);
    private void AddSafeCriticalAttribute(ICustomAttributeProvider provider);
    private void AddSecurityAttribute(ICustomAttributeProvider provider, AttributeType type);
    protected static bool HasSecurityAttribute(ICustomAttributeProvider provider, AttributeType type);
    private ICustomAttributeProvider GetTarget(TargetKind kind, string target);
    private TypeDefinition GetType(string fullname);
    private MethodDefinition GetMethod(string signature);
    private static MethodDefinition GetMethod(IEnumerable methods, string signature);
    private static string GetFullName(MethodReference method);
    private static MethodDefinition GetDefaultConstructor(TypeDefinition type);
    private MethodDefinition GetSafeCriticalCtor();
    private MethodDefinition GetCriticalCtor();
    private TypeDefinition GetSystemVoid();
    private MethodReference Import(MethodDefinition method);
    private CustomAttribute CreateSafeCriticalAttribute();
    private CustomAttribute CreateCriticalAttribute();
    private MethodDefinition CreateDefaultConstructor();
}
public interface Mono.Tuner.ISubStep {
    public SubStepTargets Targets { get; }
    public abstract virtual SubStepTargets get_Targets();
    public abstract virtual void Initialize(LinkContext context);
    public abstract virtual bool IsActiveFor(AssemblyDefinition assembly);
    public abstract virtual void ProcessAssembly(AssemblyDefinition assembly);
    public abstract virtual void ProcessType(TypeDefinition type);
    public abstract virtual void ProcessField(FieldDefinition field);
    public abstract virtual void ProcessMethod(MethodDefinition method);
    public abstract virtual void ProcessProperty(PropertyDefinition property);
    public abstract virtual void ProcessEvent(EventDefinition event);
}
[ExtensionAttribute]
public static class Mono.Tuner.MethodBodyRocks : object {
    [ExtensionAttribute]
public static IEnumerable`1<TypeDefinition> GetAllTypes(ModuleDefinition self);
    [IteratorStateMachineAttribute("Mono.Tuner.MethodBodyRocks/<GetAllTypes>d__1")]
[ExtensionAttribute]
private static IEnumerable`1<TypeDefinition> GetAllTypes(TypeDefinition self);
    [ExtensionAttribute]
public static IEnumerable`1<MethodDefinition> GetMethods(TypeDefinition self);
    [ExtensionAttribute]
public static IEnumerable`1<MethodDefinition> GetConstructors(TypeDefinition self);
    [ExtensionAttribute]
public static MethodDefinition GetTypeConstructor(TypeDefinition self);
    [ExtensionAttribute]
public static void SimplifyMacros(MethodBody self);
    private static void ExpandMacro(Instruction instruction, OpCode opcode, object operand);
    private static void MakeMacro(Instruction instruction, OpCode opcode);
    [ExtensionAttribute]
public static void OptimizeMacros(MethodBody self);
    private static void OptimizeBranches(MethodBody body);
    private static bool OptimizeBranch(Instruction instruction);
    private static void ComputeOffsets(MethodBody body);
    [ExtensionAttribute]
public static ParameterDefinition GetParameter(MethodBody self, int index);
    [ExtensionAttribute]
public static bool Implements(TypeReference self, string interfaceName);
    public static bool Implements(TypeDefinition type, string interfaceName, bool generic);
    [ExtensionAttribute]
public static bool Inherits(TypeReference self, string namespace, string name);
}
public class Mono.Tuner.PreserveCrypto : object {
    private AnnotationStore annotations;
    public sealed virtual void Process(LinkContext context);
    private void ProcessCorlib(LinkContext context);
    private void ProcessSystemCore(LinkContext context);
    private bool TryAddPreserveInfo(AssemblyDefinition assembly, string name, string type);
    private void AddPreserveInfo(AssemblyDefinition assembly, string name, string type);
    private void Preserve(TypeDefinition marker, TypeDefinition implementation);
    private TypeDefinition GetCryptoType(AssemblyDefinition assembly, string name);
}
public class Mono.Tuner.PreserveDynamicTypes : BaseSubStep {
    private bool preserve_dynamic;
    private List`1<AssemblyDefinition> saved;
    public SubStepTargets Targets { get; }
    public virtual SubStepTargets get_Targets();
    private void PreserveLibrary(AssemblyDefinition assembly);
    public virtual void ProcessAssembly(AssemblyDefinition assembly);
}
public class Mono.Tuner.PreserveExportedTypes : BaseSubStep {
    public SubStepTargets Targets { get; }
    public virtual SubStepTargets get_Targets();
    public virtual bool IsActiveFor(AssemblyDefinition assembly);
    public virtual void ProcessField(FieldDefinition field);
    public virtual void ProcessMethod(MethodDefinition method);
    public virtual void ProcessProperty(PropertyDefinition property);
    public virtual void ProcessEvent(EventDefinition event);
    private void ProcessExports(ICustomAttributeProvider provider);
}
public class Mono.Tuner.PreserveLinqExpressions : BaseSubStep {
    private bool already_marked;
    public SubStepTargets Targets { get; }
    public virtual SubStepTargets get_Targets();
    public virtual bool IsActiveFor(AssemblyDefinition assembly);
    public virtual void ProcessType(TypeDefinition type);
    private bool IsLinqProvider(TypeDefinition type);
    [CompilerGeneratedAttribute]
private bool <IsLinqProvider>b__5_2(TypeDefinition t);
}
public class Mono.Tuner.PreserveSoapHttpClients : BaseSubStep {
    public SubStepTargets Targets { get; }
    public virtual SubStepTargets get_Targets();
    public virtual bool IsActiveFor(AssemblyDefinition assembly);
    public virtual void ProcessType(TypeDefinition type);
    private void PreserveClient(TypeDefinition type);
    private void AddPreservedMethod(MethodDefinition target, string methodName);
    private static bool TryExtractSyncMethod(MethodDefinition method, String& sync_method);
    private static bool TryExtractPrefixedMethodName(string prefix, string fullName, String& methodName);
    private static bool TryExtractSuffixedMethodName(string suffix, string fullName, String& methodName);
    private static bool IsWebServiceClient(TypeDefinition type);
}
public class Mono.Tuner.PreserveTypeConverters : BaseSubStep {
    public SubStepTargets Targets { get; }
    public virtual SubStepTargets get_Targets();
    public virtual bool IsActiveFor(AssemblyDefinition assembly);
    public virtual void ProcessType(TypeDefinition type);
    private void PreserveTypeConverter(TypeDefinition type);
    private static bool IsTypeConverter(TypeDefinition type);
}
public class Mono.Tuner.PrintStatus : BaseStep {
    private static string display_internalized;
    private static PrintStatus();
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
    private bool DisplayInternalized();
    private void ProcessType(TypeDefinition type);
    private void ProcessCollection(ICollection collection);
    private void ProcessProvider(IMetadataTokenProvider provider);
}
public abstract class Mono.Tuner.Profile : object {
    private static Profile current;
    public static Profile Current { get; public set; }
    public static Profile get_Current();
    public static void set_Current(Profile value);
    private static Profile CreateProfile(string name);
    public static bool IsSdkAssembly(AssemblyDefinition assembly);
    public static bool IsSdkAssembly(string assemblyName);
    public static bool IsProductAssembly(AssemblyDefinition assembly);
    public static bool IsProductAssembly(string assemblyName);
    protected virtual bool IsSdk(AssemblyDefinition assembly);
    protected virtual bool IsProduct(AssemblyDefinition assembly);
    protected abstract virtual bool IsSdk(string assemblyName);
    protected abstract virtual bool IsProduct(string assemblyName);
}
public abstract class Mono.Tuner.RemoveAttributesBase : BaseSubStep {
    public SubStepTargets Targets { get; }
    public virtual SubStepTargets get_Targets();
    public virtual bool IsActiveFor(AssemblyDefinition assembly);
    public virtual void ProcessAssembly(AssemblyDefinition assembly);
    public virtual void ProcessType(TypeDefinition type);
    private void ProcessAttributeProviderCollection(IList list);
    public virtual void ProcessField(FieldDefinition field);
    public virtual void ProcessMethod(MethodDefinition method);
    private void ProcessMethodAttributeProvider(MethodDefinition method);
    public virtual void ProcessProperty(PropertyDefinition property);
    public virtual void ProcessEvent(EventDefinition event);
    private void ProcessAttributeProvider(ICustomAttributeProvider provider);
    protected abstract virtual bool IsRemovedAttribute(CustomAttribute attribute);
    protected virtual void WillRemoveAttribute(ICustomAttributeProvider provider, CustomAttribute attribute);
}
public class Mono.Tuner.RemoveResources : object {
    private I18nAssemblies assemblies;
    public RemoveResources(I18nAssemblies assemblies);
    public virtual void Process(LinkContext context);
    private bool RemoveResource(string name);
    private bool IncludeCJK();
}
public class Mono.Tuner.RemoveSecurity : BaseSubStep {
    public SubStepTargets Targets { get; }
    public virtual SubStepTargets get_Targets();
    public virtual bool IsActiveFor(AssemblyDefinition assembly);
    public virtual void ProcessAssembly(AssemblyDefinition assembly);
    public virtual void ProcessType(TypeDefinition type);
    public virtual void ProcessMethod(MethodDefinition method);
    private static void ProcessSecurityProvider(ISecurityDeclarationProvider provider);
}
public class Mono.Tuner.RemoveSerialization : BaseStep {
    private static string _Serialization;
    private static string _ISerializable;
    private static string _IDeserializationCallback;
    private static string _SerializationInfo;
    private static string _StreamingContext;
    private static string _GetObjectData;
    private static string _OnDeserialization;
    private static RemoveSerialization();
    private static string Concat(string lhs, string rhs);
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
    private static void RemoveInterface(TypeDefinition type, string name);
    private static void RemoveSerializableFlag(TypeDefinition type);
    private static void ProcessType(TypeDefinition type);
    private static void RemoveField(TypeDefinition type);
    private static bool ParametersMatch(IMethodSignature meth, String[] parameters);
    private static void RemoveInterfaceMethod(TypeDefinition type, string iface, string method, String[] parameters);
    private static void RemoveMethod(TypeDefinition type, string name, String[] parameters);
    private static void RemoveMethod(IList container, string name, String[] parameters);
}
public class Mono.Tuner.SubStepDispatcher : object {
    private List`1<ISubStep> substeps;
    private List`1<ISubStep> on_assemblies;
    private List`1<ISubStep> on_types;
    private List`1<ISubStep> on_fields;
    private List`1<ISubStep> on_methods;
    private List`1<ISubStep> on_properties;
    private List`1<ISubStep> on_events;
    private Tracer tracer;
    public void Add(ISubStep substep);
    public sealed virtual void Process(LinkContext context);
    private void Push(ISubStep subStep);
    private void Pop();
    private static bool HasSubSteps(List`1<ISubStep> substeps);
    private void BrowseAssemblies(IEnumerable`1<AssemblyDefinition> assemblies);
    private bool ShouldDispatchTypes();
    private void BrowseTypes(ICollection types);
    private void BrowseFields(ICollection fields);
    private void BrowseMethods(ICollection methods);
    private void BrowseProperties(ICollection properties);
    private void BrowseEvents(ICollection events);
    private void DispatchAssembly(AssemblyDefinition assembly);
    private void DispatchType(TypeDefinition type);
    private void DispatchField(FieldDefinition field);
    private void DispatchMethod(MethodDefinition method);
    private void DispatchProperty(PropertyDefinition property);
    private void DispatchEvent(EventDefinition event);
    private void InitializeSubSteps(LinkContext context);
    private void CategorizeSubSteps(AssemblyDefinition assembly);
    private void CategorizeSubStep(ISubStep substep, AssemblyDefinition assembly);
    private static void CategorizeTarget(ISubStep substep, SubStepTargets target, List`1& list);
    private static bool Targets(ISubStep substep, SubStepTargets target);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<ISubStep> GetEnumerator();
}
[FlagsAttribute]
public enum Mono.Tuner.SubStepTargets : Enum {
    public int value__;
    public static SubStepTargets None;
    public static SubStepTargets Assembly;
    public static SubStepTargets Type;
    public static SubStepTargets Field;
    public static SubStepTargets Method;
    public static SubStepTargets Property;
    public static SubStepTargets Event;
}
public class Mono.Tuner.TunerAnnotations : object {
    private static object _internalizedKey;
    private static TunerAnnotations();
    public static void Internalized(LinkContext context, IMetadataTokenProvider provider);
    public static bool IsInternalized(LinkContext context, IMetadataTokenProvider provider);
}
internal static class Monodroid.AndroidResource : object {
    private static XNamespace android;
    private static XNamespace res_auto;
    private static Regex r;
    private static String[] fixResourcesAliasPaths;
    private static AndroidResource();
    public static bool UpdateXmlResource(string res, string filename, IEnumerable`1<string> additionalDirectories, Action`2<TraceLevel, string> logMessage, Action`2<string, string> registerCustomView);
    public static void UpdateXmlResource(XElement e);
    private static void UpdateXmlResource(string resourcesBasePath, XElement e, IEnumerable`1<string> additionalDirectories, Action`1<string> registerCustomView);
    private static bool ResourceNeedsToBeLowerCased(string value, string resourceBasePath, IEnumerable`1<string> additionalDirectories);
    [IteratorStateMachineAttribute("Monodroid.AndroidResource/<GetAttributes>d__8")]
internal static IEnumerable`1<XAttribute> GetAttributes(XElement e);
    [IteratorStateMachineAttribute("Monodroid.AndroidResource/<GetElements>d__9")]
internal static IEnumerable`1<XElement> GetElements(XElement e);
    private static void TryFixResourceAlias(XElement elem, string resourceBasePath, IEnumerable`1<string> additionalDirectories);
    private static void TryFixFragment(XAttribute attr, Action`1<string> registerCustomView);
    private static bool TryFixResAuto(XAttribute attr);
    private static void TryFixCustomClassAttribute(XAttribute attr, Action`1<string> registerCustomView);
    private static string TryLowercaseValue(string value, string resourceBasePath, IEnumerable`1<string> additionalDirectories);
    public static string CalculateAapt2FlatArchiveFileName(string file);
}
public class MonoDroid.Tuner.AddKeepAlivesStep : BaseStep {
    private IMetadataResolver cache;
    private MethodDefinition methodKeepAlive;
    public AddKeepAlivesStep(IMetadataResolver cache);
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
    internal bool AddKeepAlives(AssemblyDefinition assembly);
    private static void AddNestedTypes(List`1<TypeDefinition> types, TypeDefinition type);
    private bool MightNeedFix(TypeDefinition type);
    private bool AddKeepAlives(TypeDefinition type);
    protected virtual AssemblyDefinition GetCorlibAssembly();
    private MethodDefinition GetKeepAliveMethod();
    public virtual void LogMessage(string message);
    private static Instruction GetLoadArgumentInstruction(int argNum, ParameterDefinition parameter);
}
public class MonoDroid.Tuner.AndroidLinkConfiguration : object {
    [CompilerGeneratedAttribute]
private List`1<AssemblyDefinition> <Assemblies>k__BackingField;
    private static ConditionalWeakTable`2<LinkContext, AndroidLinkConfiguration> configurations;
    public List`1<AssemblyDefinition> Assemblies { get; private set; }
    private static AndroidLinkConfiguration();
    [CompilerGeneratedAttribute]
public List`1<AssemblyDefinition> get_Assemblies();
    [CompilerGeneratedAttribute]
private void set_Assemblies(List`1<AssemblyDefinition> value);
    public static AndroidLinkConfiguration GetInstance(LinkContext context);
}
public class MonoDroid.Tuner.AndroidLinkContext : LinkContext {
    [CompilerGeneratedAttribute]
private bool <PreserveJniMarshalMethods>k__BackingField;
    public bool PreserveJniMarshalMethods { get; public set; }
    public AndroidLinkContext(Pipeline pipeline, AssemblyResolver resolver);
    public AndroidLinkContext(Pipeline pipeline, AssemblyResolver resolver, ReaderParameters readerParameters, UnintializedContextFactory factory);
    [CompilerGeneratedAttribute]
public bool get_PreserveJniMarshalMethods();
    [CompilerGeneratedAttribute]
public void set_PreserveJniMarshalMethods(bool value);
}
public class MonoDroid.Tuner.ApplyPreserveAttribute : ApplyPreserveAttributeBase {
    private bool is_sdk;
    private static List`1<ICustomAttributeProvider> srs_data_contract;
    private static List`1<ICustomAttributeProvider> xml_serialization;
    public static IList`1<ICustomAttributeProvider> DataContract { get; }
    public static IList`1<ICustomAttributeProvider> XmlSerialization { get; }
    private static ApplyPreserveAttribute();
    public virtual bool IsActiveFor(AssemblyDefinition assembly);
    public static IList`1<ICustomAttributeProvider> get_DataContract();
    public static IList`1<ICustomAttributeProvider> get_XmlSerialization();
    protected virtual bool IsPreservedAttribute(ICustomAttributeProvider provider, CustomAttribute attribute, Boolean& removeAttribute);
    private void MarkDefautConstructor(ICustomAttributeProvider provider, IList`1<ICustomAttributeProvider> list);
    private void MarkGenericType(GenericInstanceType git);
    private void MarkDefautConstructor(TypeDefinition type);
}
[ExtensionAttribute]
internal static class MonoDroid.Tuner.Extensions : object {
    private static string JavaObject;
    private static string IJavaObject;
    private static string IJavaPeerable;
    private static string JavaThrowable;
    private static string RegisterAttribute;
    [ExtensionAttribute]
public static bool IsJavaObject(TypeDefinition type);
    [ExtensionAttribute]
public static bool IsJavaException(TypeDefinition type);
    [ExtensionAttribute]
public static bool ImplementsIJavaObject(TypeDefinition type);
    [ExtensionAttribute]
public static bool ImplementsIJavaPeerable(TypeDefinition type);
    [ExtensionAttribute]
public static object GetSettableValue(CustomAttributeArgument arg);
    [ExtensionAttribute]
public static AssemblyDefinition GetAssembly(LinkContext context, string assemblyName);
    [ExtensionAttribute]
public static TypeDefinition GetType(LinkContext context, string assemblyName, string typeName);
    [ExtensionAttribute]
public static MethodDefinition GetMethod(LinkContext context, string assemblyName, string typeName, string name, String[] parameters);
    public static MethodDefinition GetMethod(TypeDefinition td, string name);
    public static MethodDefinition GetMethod(TypeDefinition type, string name, String[] parameters);
    public static TypeDefinition GetType(AssemblyDefinition assembly, string typeName);
    [ExtensionAttribute]
public static bool Implements(TypeReference self, string interfaceName);
    public static bool Implements(TypeDefinition type, string interfaceName, bool generic);
    [ExtensionAttribute]
public static bool Inherits(TypeReference self, string className);
    private static bool IsRegisterAttribute(CustomAttribute attribute);
    private static bool TryGetRegisterAttribute(ICustomAttributeProvider provider, CustomAttribute& register);
    [ExtensionAttribute]
public static bool TryGetRegisterMember(MethodDefinition md, String& method);
    [ExtensionAttribute]
public static bool TryGetRegisterMember(MethodDefinition md, String& method, String& nativeMethod, String& signature);
    [ExtensionAttribute]
public static TypeDefinition GetMarshalMethodsType(TypeDefinition type);
    [ExtensionAttribute]
public static bool TryGetBaseOrInterfaceRegisterMember(MethodDefinition method, IMetadataResolver resolver, String& member, String& nativeMethod, String& signature);
    [ExtensionAttribute]
public static bool IsEqual(MethodDefinition m1, MethodDefinition m2, IMetadataResolver resolver);
    [ExtensionAttribute]
public static bool TryGetMarshalMethod(MethodDefinition method, string nativeMethod, string signature, MethodDefinition& marshalMethod);
    public static string GetMarshalMethodName(string name, string signature);
    public static Instruction CreateLoadArraySizeOrOffsetInstruction(int intValue);
}
public class MonoDroid.Tuner.FixAbstractMethodsStep : BaseStep {
    private IMetadataResolver cache;
    private HashSet`1<string> warnedAssemblies;
    private MethodDefinition abstractMethodErrorConstructor;
    private bool markedAbstractMethodErrorType;
    private MethodDefinition AbstractMethodErrorConstructor { get; }
    public FixAbstractMethodsStep(IMetadataResolver cache);
    private bool CheckShouldProcessAssembly(AssemblyDefinition assembly);
    private void UpdateAssemblyAction(AssemblyDefinition assembly);
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
    internal bool FixAbstractMethods(AssemblyDefinition assembly);
    internal void CheckAppDomainUsage(AssemblyDefinition assembly, Action`1<string> warn);
    private bool IsProductOrSdkAssembly(AssemblyDefinition assembly);
    public bool IsProductOrSdkAssembly(string assemblyName);
    private bool MightNeedFix(TypeDefinition type);
    private static bool CompareTypes(TypeReference iType, TypeReference tType);
    private bool IsInOverrides(MethodDefinition iMethod, MethodDefinition tMethod);
    private bool HaveSameSignature(TypeReference iface, MethodDefinition iMethod, MethodDefinition tMethod);
    private bool FixAbstractMethods(TypeDefinition type);
    private TypeReference TryImportType(TypeDefinition declaringType, TypeReference type);
    private void AddNewExceptionMethod(TypeDefinition type, MethodDefinition method);
    private MethodDefinition get_AbstractMethodErrorConstructor();
    private void MarkAbstractMethodErrorType();
    public virtual void LogMessage(string message);
    protected virtual AssemblyDefinition GetMonoAndroidAssembly();
    [CompilerGeneratedAttribute]
private void <CheckShouldProcessAssembly>b__2_0(string msg);
}
public class MonoDroid.Tuner.FixLegacyResourceDesignerStep : LinkDesignerBase {
    internal static string DesignerAssemblyName;
    internal static string DesignerAssemblyNamespace;
    private bool designerLoaded;
    private AssemblyDefinition designerAssembly;
    private TypeDefinition designerType;
    private Dictionary`2<string, MethodDefinition> lookup;
    private Dictionary`2<string, MethodDefinition> lookupCaseInsensitive;
    protected virtual void EndProcess();
    protected virtual void LoadDesigner();
    internal virtual bool ProcessAssemblyDesigner(AssemblyDefinition assembly);
    private Dictionary`2<string, MethodDefinition> BuildResourceDesignerPropertyLookup(TypeDefinition type, Dictionary`2& caseInsensitiveLookup);
    private string GetNativeTypeNameFromManagedTypeName(string name);
    private string GetFixupKey(Instruction instruction, string designerFullName);
    protected virtual void FixBody(MethodBody body, TypeDefinition designer);
}
public class MonoDroid.Tuner.GetAssembliesStep : BaseStep {
    private AndroidLinkConfiguration config;
    protected virtual void Process();
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
}
public abstract class MonoDroid.Tuner.LinkDesignerBase : BaseStep {
    public virtual void LogMessage(string message);
    public virtual void LogError(int code, string error);
    public virtual AssemblyDefinition Resolve(AssemblyNameReference name);
    protected bool FindResourceDesigner(AssemblyDefinition assembly, bool mainApplication, TypeDefinition& designer, CustomAttribute& designerAttribute);
    protected void ClearDesignerClass(TypeDefinition designer, bool completely);
    protected Dictionary`2<string, int> BuildResourceDesignerFieldLookup(TypeDefinition type);
    protected void FixType(TypeDefinition type, TypeDefinition localDesigner);
    protected void RemoveFieldsFromType(TypeDefinition type, ModuleDefinition module);
    protected void RemoveUpdateIdValues(TypeDefinition type);
    protected void FixUpdateIdValuesBody(MethodDefinition method);
    protected void FixupAssemblyTypes(AssemblyDefinition assembly, TypeDefinition designer);
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
    internal abstract virtual bool ProcessAssemblyDesigner(AssemblyDefinition assemblyDefinition);
    protected abstract virtual void LoadDesigner();
    protected abstract virtual void FixBody(MethodBody body, TypeDefinition designer);
}
internal class MonoDroid.Tuner.Linker : object {
    public static void Process(LinkerOptions options, ILogger logger, LinkContext& context);
    private static void Run(Pipeline pipeline, LinkContext context);
    private static LinkContext CreateLinkContext(LinkerOptions options, Pipeline pipeline, ILogger logger);
    private static Pipeline CreatePipeline(LinkerOptions options);
    private static List`1<string> ListAssemblies(LinkContext context);
    private static string GetFullyQualifiedName(AssemblyDefinition assembly);
    public static I18nAssemblies ParseI18nAssemblies(string i18n);
}
internal class MonoDroid.Tuner.LinkerOptions : object {
    [CompilerGeneratedAttribute]
private AssemblyDefinition <MainAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<AssemblyDefinition> <RetainAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LinkSdkOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LinkNone>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <LinkDescriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyResolver <Resolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <SkippedAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private I18nAssemblies <I18nAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProguardConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DumpDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HttpClientHandlerType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TlsProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddKeepAlives>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveJniMarshalMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeterministicOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LinkResources>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDesignerAssembly>k__BackingField;
    public AssemblyDefinition MainAssembly { get; public set; }
    public IEnumerable`1<AssemblyDefinition> RetainAssemblies { get; public set; }
    public string OutputDirectory { get; public set; }
    public bool LinkSdkOnly { get; public set; }
    public bool LinkNone { get; public set; }
    public String[] LinkDescriptions { get; public set; }
    public AssemblyResolver Resolver { get; public set; }
    public IEnumerable`1<string> SkippedAssemblies { get; public set; }
    public I18nAssemblies I18nAssemblies { get; public set; }
    public string ProguardConfiguration { get; public set; }
    public bool DumpDependencies { get; public set; }
    public string HttpClientHandlerType { get; public set; }
    public string TlsProvider { get; public set; }
    public bool AddKeepAlives { get; public set; }
    public bool PreserveJniMarshalMethods { get; public set; }
    public bool DeterministicOutput { get; public set; }
    public bool LinkResources { get; public set; }
    public bool UseDesignerAssembly { get; public set; }
    [CompilerGeneratedAttribute]
public AssemblyDefinition get_MainAssembly();
    [CompilerGeneratedAttribute]
public void set_MainAssembly(AssemblyDefinition value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<AssemblyDefinition> get_RetainAssemblies();
    [CompilerGeneratedAttribute]
public void set_RetainAssemblies(IEnumerable`1<AssemblyDefinition> value);
    [CompilerGeneratedAttribute]
public string get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_LinkSdkOnly();
    [CompilerGeneratedAttribute]
public void set_LinkSdkOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_LinkNone();
    [CompilerGeneratedAttribute]
public void set_LinkNone(bool value);
    [CompilerGeneratedAttribute]
public String[] get_LinkDescriptions();
    [CompilerGeneratedAttribute]
public void set_LinkDescriptions(String[] value);
    [CompilerGeneratedAttribute]
public AssemblyResolver get_Resolver();
    [CompilerGeneratedAttribute]
public void set_Resolver(AssemblyResolver value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_SkippedAssemblies();
    [CompilerGeneratedAttribute]
public void set_SkippedAssemblies(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public I18nAssemblies get_I18nAssemblies();
    [CompilerGeneratedAttribute]
public void set_I18nAssemblies(I18nAssemblies value);
    [CompilerGeneratedAttribute]
public string get_ProguardConfiguration();
    [CompilerGeneratedAttribute]
public void set_ProguardConfiguration(string value);
    [CompilerGeneratedAttribute]
public bool get_DumpDependencies();
    [CompilerGeneratedAttribute]
public void set_DumpDependencies(bool value);
    [CompilerGeneratedAttribute]
public string get_HttpClientHandlerType();
    [CompilerGeneratedAttribute]
public void set_HttpClientHandlerType(string value);
    [CompilerGeneratedAttribute]
public string get_TlsProvider();
    [CompilerGeneratedAttribute]
public void set_TlsProvider(string value);
    [CompilerGeneratedAttribute]
public bool get_AddKeepAlives();
    [CompilerGeneratedAttribute]
public void set_AddKeepAlives(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreserveJniMarshalMethods();
    [CompilerGeneratedAttribute]
public void set_PreserveJniMarshalMethods(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeterministicOutput();
    [CompilerGeneratedAttribute]
public void set_DeterministicOutput(bool value);
    [CompilerGeneratedAttribute]
public bool get_LinkResources();
    [CompilerGeneratedAttribute]
public void set_LinkResources(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseDesignerAssembly();
    [CompilerGeneratedAttribute]
public void set_UseDesignerAssembly(bool value);
}
public class MonoDroid.Tuner.MarkJavaObjects : BaseSubStep {
    private Dictionary`2<ModuleDefinition, Dictionary`2<string, TypeDefinition>> module_types;
    public SubStepTargets Targets { get; }
    public virtual SubStepTargets get_Targets();
    public virtual void ProcessType(TypeDefinition type);
    private void PreserveJavaObjectImplementation(TypeDefinition type);
    private void PreserveAttributeSetConstructor(TypeDefinition type);
    [IteratorStateMachineAttribute("MonoDroid.Tuner.MarkJavaObjects/<GetAttributeSetConstructors>d__6")]
private static IEnumerable`1<MethodDefinition> GetAttributeSetConstructors(TypeDefinition type);
    private void PreserveIntPtrConstructor(TypeDefinition type);
    private static MethodDefinition GetIntPtrConstructor(TypeDefinition type);
    private static MethodDefinition GetNewIntPtrConstructor(TypeDefinition type);
    private void PreserveMethod(TypeDefinition type, MethodDefinition method);
    private string TypeNameWithoutKey(string name);
    private bool CheckInvokerType(TypeDefinition type, string name);
    private void PreserveInterfaceMethods(TypeDefinition type, TypeDefinition invoker);
    private void PreserveInvoker(TypeDefinition type);
    private TypeDefinition GetInvokerType(TypeDefinition type);
    private TypeDefinition FindType(TypeDefinition type, string fullname);
    private static Dictionary`2<string, TypeDefinition> GetTypesInModule(ModuleDefinition module);
    private static void AddNestedTypes(Dictionary`2<string, TypeDefinition> types, TypeDefinition type);
    private void PreserveConstructors(TypeDefinition type, TypeDefinition helper);
    private static bool IsImplementor(TypeDefinition type);
    private static bool IsUserType(TypeDefinition type);
    private void PreserveImplementor(TypeDefinition type);
}
internal class MonoDroid.Tuner.MonoDroidMarkStep : MarkStep {
    private static string ICustomMarshalerName;
    private HashSet`1<TypeDefinition> marshalTypes;
    private TypeDefinitionCache cache;
    private bool DebugBuild { get; }
    public MonoDroidMarkStep(TypeDefinitionCache cache);
    public virtual void Process(LinkContext context);
    private bool UpdateMarshalTypes();
    private MethodReference CreateGenericMethodReference(MethodReference method, GenericInstanceType type);
    private void UpdateRegistrationSwitch(MethodDefinition method, MethodReference[] switchMethods);
    private void UpdateMagicPrefill(TypeDefinition magicType);
    private void UpdateMagicRegistration();
    private static bool IsLdcI4(Instruction instruction, Int32& intValue);
    private bool UpdateMarshalRegisterMethod(MethodDefinition method, HashSet`1<string> markedMethods);
    private bool PreserveJniMarshalMethods();
    protected virtual void DoAdditionalMethodProcessing(MethodDefinition method);
    protected virtual bool ShouldMarkInterfaceImplementation(TypeDefinition type, InterfaceImplementation iface, TypeDefinition resolvedInterfaceType);
    protected virtual void DoAdditionalTypeProcessing(TypeDefinition type);
    private void PreserveRegisteredMethod(TypeDefinition type, string member);
    protected virtual TypeDefinition MarkType(TypeReference reference);
    private bool get_DebugBuild();
    private void ProcessCorlib(TypeDefinition type);
    private void ProcessSystemCore(TypeDefinition type);
    private void ProcessSystemData(TypeDefinition type);
    private void ProcessSystem(TypeDefinition type);
}
internal class MonoDroid.Tuner.MonoDroidProfile : MobileProfile {
    protected virtual bool IsProduct(string assemblyName);
    protected virtual bool IsSdk(string assemblyName);
}
internal class MonoDroid.Tuner.OutputStepWithTimestamps : OutputStep {
    private static FileInfo GetOriginalAssemblyFileInfo(AssemblyDefinition assembly);
    protected virtual void CopyAssembly(AssemblyDefinition assembly, string directory);
}
public class MonoDroid.Tuner.PreserveApplications : BaseSubStep {
    public SubStepTargets Targets { get; }
    public virtual SubStepTargets get_Targets();
    public virtual bool IsActiveFor(AssemblyDefinition assembly);
    public virtual void ProcessAssembly(AssemblyDefinition assembly);
    public virtual void ProcessType(TypeDefinition type);
    private void ProcessAttributeProvider(ICustomAttributeProvider provider);
    private void PreserveApplicationAttribute(CustomAttribute attribute);
    private void PreserveTypeProperty(CustomAttribute attribute, string property);
    private void PreserveDefaultConstructor(TypeDefinition type);
    private void PreserveMethod(TypeDefinition type, MethodDefinition method);
}
public class MonoDroid.Tuner.PreserveHttpAndroidClientHandler : BaseSubStep {
    [CompilerGeneratedAttribute]
private string <HttpClientHandlerType>k__BackingField;
    public string HttpClientHandlerType { get; public set; }
    public SubStepTargets Targets { get; }
    [CompilerGeneratedAttribute]
public string get_HttpClientHandlerType();
    [CompilerGeneratedAttribute]
public void set_HttpClientHandlerType(string value);
    public virtual bool IsActiveFor(AssemblyDefinition assembly);
    public virtual SubStepTargets get_Targets();
    public virtual void ProcessMethod(MethodDefinition method);
    protected AssemblyDefinition GetAssembly(string assemblyName);
    protected TypeDefinition GetType(AssemblyDefinition assembly, string typeName);
    protected TypeDefinition GetType(string assemblyName, string typeName);
    private bool MarkType(string assemblyName, string typeName);
    private string GetAssemblyNameFromTypeName(string typeName, String& simpleTypeName);
    private void Mark();
}
public class MonoDroid.Tuner.PreserveJavaExceptions : BaseSubStep {
    public SubStepTargets Targets { get; }
    public virtual SubStepTargets get_Targets();
    public virtual void ProcessType(TypeDefinition type);
    private void PreserveJavaException(TypeDefinition type);
    private void PreserveStringConstructor(TypeDefinition type);
    private MethodDefinition GetStringConstructor(TypeDefinition type);
    private void PreserveMethod(TypeDefinition type, MethodDefinition method);
}
public class MonoDroid.Tuner.PreserveJavaTypeRegistrations : BaseSubStep {
    public SubStepTargets Targets { get; }
    public virtual SubStepTargets get_Targets();
    public virtual void ProcessType(TypeDefinition type);
    private void PreserveJavaTypeRegistration(TypeDefinition type);
}
public class MonoDroid.Tuner.PreserveRuntimeSerialization : BaseSubStep {
    private bool system_runtime_serialization;
    private bool system_xml_serialization;
    public SubStepTargets Targets { get; }
    public virtual SubStepTargets get_Targets();
    public virtual bool IsActiveFor(AssemblyDefinition assembly);
    public virtual void ProcessType(TypeDefinition type);
    protected virtual IMetadataTokenProvider FilterExtraSerializationMembers(IMetadataTokenProvider provider);
    private void MarkMetadata(IMetadataTokenProvider tp);
    protected void PreserveConstructors(TypeDefinition type);
    protected AssemblyDefinition GetAssembly(string assemblyName);
    protected TypeDefinition GetType(string assemblyName, string typeName);
    protected TypeDefinition GetType(AssemblyDefinition assembly, string typeName);
    private void PreserveMethods(TypeDefinition type);
    private void PreserveMethod(TypeDefinition type, MethodDefinition method);
    private void PreserveMethod(MethodDefinition md);
    private void PreserveType(TypeDefinition type);
}
public class MonoDroid.Tuner.PreserveTlsProvider : BaseSubStep {
    [CompilerGeneratedAttribute]
private string <TlsProvider>k__BackingField;
    public string TlsProvider { get; public set; }
    public SubStepTargets Targets { get; }
    [CompilerGeneratedAttribute]
public string get_TlsProvider();
    [CompilerGeneratedAttribute]
public void set_TlsProvider(string value);
    public virtual bool IsActiveFor(AssemblyDefinition assembly);
    public virtual SubStepTargets get_Targets();
    public virtual void ProcessMethod(MethodDefinition method);
    private TypeDefinition GetTlsProvider(ModuleDefinition module);
    private MethodDefinition FindDefaultCtor(TypeDefinition type);
    private MethodReference FindProviderConstructor(ModuleDefinition module);
    private void ProcessCreateProviderImpl(MethodDefinition method);
}
public class MonoDroid.Tuner.RemoveAttributes : RemoveAttributesBase {
    protected bool DebugBuild { get; }
    protected virtual bool get_DebugBuild();
    protected virtual bool IsRemovedAttribute(CustomAttribute attribute);
}
public class MonoDroid.Tuner.RemoveResourceDesignerStep : LinkDesignerBase {
    private TypeDefinition mainDesigner;
    private AssemblyDefinition mainAssembly;
    private CustomAttribute mainDesignerAttribute;
    private Dictionary`2<string, int> designerConstants;
    private Regex opCodeRegex;
    protected virtual void LoadDesigner();
    protected virtual void EndProcess();
    protected virtual void FixBody(MethodBody body, TypeDefinition designer);
    internal virtual bool ProcessAssemblyDesigner(AssemblyDefinition assembly);
}
public class MonoDroid.Tuner.StripEmbeddedLibraries : BaseStep {
    protected virtual void ProcessAssembly(AssemblyDefinition assembly);
    private bool ShouldStripResource(Resource r);
}
internal static class MonoDroid.Utils.StringRocks : object {
    public static string ToLowerCase(string value);
    public static string MemberToPascalCase(string value);
    public static string TypeToPascalCase(string value);
    public static string PackageToPascalCase(string value);
    private static string ToPascalCase(string value, int minLength);
    private static string ToPascalCasePart(string value, int minLength);
}
public class MonoTouch.Tuner.PreserveCode : object {
    private LinkContext context;
    public sealed virtual void Process(LinkContext context);
    private void PreserveDictionaryConstructor();
    private void PreserveQueryableEnumerable();
    private void PreserveResourceSet();
}
internal class Newtonsoft.Json.Bson.BsonArray : BsonToken {
    private List`1<BsonToken> _children;
    public BsonType Type { get; }
    public void Add(BsonToken token);
    public virtual BsonType get_Type();
    public sealed virtual IEnumerator`1<BsonToken> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Newtonsoft.Json.Bson.BsonBinary : BsonValue {
    [CompilerGeneratedAttribute]
private BsonBinaryType <BinaryType>k__BackingField;
    public BsonBinaryType BinaryType { get; public set; }
    public BsonBinary(Byte[] value, BsonBinaryType binaryType);
    [CompilerGeneratedAttribute]
public BsonBinaryType get_BinaryType();
    [CompilerGeneratedAttribute]
public void set_BinaryType(BsonBinaryType value);
}
internal enum Newtonsoft.Json.Bson.BsonBinaryType : Enum {
    public byte value__;
    public static BsonBinaryType Binary;
    public static BsonBinaryType Function;
    [ObsoleteAttribute("This type has been deprecated in the BSON specification. Use Binary instead.")]
public static BsonBinaryType BinaryOld;
    [ObsoleteAttribute("This type has been deprecated in the BSON specification. Use Uuid instead.")]
public static BsonBinaryType UuidOld;
    public static BsonBinaryType Uuid;
    public static BsonBinaryType Md5;
    public static BsonBinaryType UserDefined;
}
internal class Newtonsoft.Json.Bson.BsonBinaryWriter : object {
    private static Encoding Encoding;
    private BinaryWriter _writer;
    private Byte[] _largeByteBuffer;
    [CompilerGeneratedAttribute]
private DateTimeKind <DateTimeKindHandling>k__BackingField;
    public DateTimeKind DateTimeKindHandling { get; public set; }
    public BsonBinaryWriter(BinaryWriter writer);
    private static BsonBinaryWriter();
    [CompilerGeneratedAttribute]
public DateTimeKind get_DateTimeKindHandling();
    [CompilerGeneratedAttribute]
public void set_DateTimeKindHandling(DateTimeKind value);
    public void Flush();
    public void Close();
    public void WriteToken(BsonToken t);
    private void WriteTokenInternal(BsonToken t);
    private void WriteString(string s, int byteCount, Nullable`1<int> calculatedlengthPrefix);
    public void WriteUtf8Bytes(string s, int byteCount);
    private int CalculateSize(int stringByteCount);
    private int CalculateSizeWithLength(int stringByteCount, bool includeSize);
    private int CalculateSize(BsonToken t);
}
internal class Newtonsoft.Json.Bson.BsonBoolean : BsonValue {
    public static BsonBoolean False;
    public static BsonBoolean True;
    private BsonBoolean(bool value);
    private static BsonBoolean();
}
internal class Newtonsoft.Json.Bson.BsonEmpty : BsonToken {
    public static BsonToken Null;
    public static BsonToken Undefined;
    [CompilerGeneratedAttribute]
private BsonType <Type>k__BackingField;
    public BsonType Type { get; }
    private BsonEmpty(BsonType type);
    private static BsonEmpty();
    [CompilerGeneratedAttribute]
public virtual BsonType get_Type();
}
internal class Newtonsoft.Json.Bson.BsonObject : BsonToken {
    private List`1<BsonProperty> _children;
    public BsonType Type { get; }
    public void Add(string name, BsonToken token);
    public virtual BsonType get_Type();
    public sealed virtual IEnumerator`1<BsonProperty> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ObsoleteAttribute("BSON reading and writing has been moved to its own package. See https://www.nuget.org/packages/Newtonsoft.Json.Bson for more details.")]
internal class Newtonsoft.Json.Bson.BsonObjectId : object {
    [CompilerGeneratedAttribute]
private Byte[] <Value>k__BackingField;
    public Byte[] Value { get; }
    public BsonObjectId(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_Value();
}
internal class Newtonsoft.Json.Bson.BsonProperty : object {
    [CompilerGeneratedAttribute]
private BsonString <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private BsonToken <Value>k__BackingField;
    public BsonString Name { get; public set; }
    public BsonToken Value { get; public set; }
    [CompilerGeneratedAttribute]
public BsonString get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(BsonString value);
    [CompilerGeneratedAttribute]
public BsonToken get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(BsonToken value);
}
[ObsoleteAttribute("BSON reading and writing has been moved to its own package. See https://www.nuget.org/packages/Newtonsoft.Json.Bson for more details.")]
internal class Newtonsoft.Json.Bson.BsonReader : JsonReader {
    private static int MaxCharBytesSize;
    private static Byte[] SeqRange1;
    private static Byte[] SeqRange2;
    private static Byte[] SeqRange3;
    private static Byte[] SeqRange4;
    private BinaryReader _reader;
    private List`1<ContainerContext> _stack;
    private Byte[] _byteBuffer;
    private Char[] _charBuffer;
    private BsonType _currentElementType;
    private BsonReaderState _bsonReaderState;
    private ContainerContext _currentContext;
    private bool _readRootValueAsArray;
    private bool _jsonNet35BinaryCompatibility;
    private DateTimeKind _dateTimeKindHandling;
    [ObsoleteAttribute("JsonNet35BinaryCompatibility will be removed in a future version of Json.NET.")]
public bool JsonNet35BinaryCompatibility { get; public set; }
    public bool ReadRootValueAsArray { get; public set; }
    public DateTimeKind DateTimeKindHandling { get; public set; }
    public BsonReader(Stream stream);
    public BsonReader(BinaryReader reader);
    public BsonReader(Stream stream, bool readRootValueAsArray, DateTimeKind dateTimeKindHandling);
    public BsonReader(BinaryReader reader, bool readRootValueAsArray, DateTimeKind dateTimeKindHandling);
    private static BsonReader();
    public bool get_JsonNet35BinaryCompatibility();
    public void set_JsonNet35BinaryCompatibility(bool value);
    public bool get_ReadRootValueAsArray();
    public void set_ReadRootValueAsArray(bool value);
    public DateTimeKind get_DateTimeKindHandling();
    public void set_DateTimeKindHandling(DateTimeKind value);
    private string ReadElement();
    public virtual bool Read();
    public virtual void Close();
    private bool ReadCodeWScope();
    private bool ReadReference();
    private bool ReadNormal();
    private void PopContext();
    private void PushContext(ContainerContext newContext);
    private byte ReadByte();
    private void ReadType(BsonType type);
    private Byte[] ReadBinary(BsonBinaryType& binaryType);
    private string ReadString();
    private string ReadLengthString();
    private string GetString(int length);
    private int GetLastFullCharStop(int start);
    private int BytesInSequence(byte b);
    private void EnsureBuffers();
    private double ReadDouble();
    private int ReadInt32();
    private long ReadInt64();
    private BsonType ReadType();
    private void MovePosition(int count);
    private Byte[] ReadBytes(int count);
}
internal class Newtonsoft.Json.Bson.BsonRegex : BsonToken {
    [CompilerGeneratedAttribute]
private BsonString <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private BsonString <Options>k__BackingField;
    public BsonString Pattern { get; public set; }
    public BsonString Options { get; public set; }
    public BsonType Type { get; }
    public BsonRegex(string pattern, string options);
    [CompilerGeneratedAttribute]
public BsonString get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(BsonString value);
    [CompilerGeneratedAttribute]
public BsonString get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(BsonString value);
    public virtual BsonType get_Type();
}
internal class Newtonsoft.Json.Bson.BsonString : BsonValue {
    [CompilerGeneratedAttribute]
private int <ByteCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeLength>k__BackingField;
    public int ByteCount { get; public set; }
    public bool IncludeLength { get; }
    public BsonString(object value, bool includeLength);
    [CompilerGeneratedAttribute]
public int get_ByteCount();
    [CompilerGeneratedAttribute]
public void set_ByteCount(int value);
    [CompilerGeneratedAttribute]
public bool get_IncludeLength();
}
internal abstract class Newtonsoft.Json.Bson.BsonToken : object {
    [CompilerGeneratedAttribute]
private BsonToken <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CalculatedSize>k__BackingField;
    public BsonType Type { get; }
    public BsonToken Parent { get; public set; }
    public int CalculatedSize { get; public set; }
    public abstract virtual BsonType get_Type();
    [CompilerGeneratedAttribute]
public BsonToken get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(BsonToken value);
    [CompilerGeneratedAttribute]
public int get_CalculatedSize();
    [CompilerGeneratedAttribute]
public void set_CalculatedSize(int value);
}
internal enum Newtonsoft.Json.Bson.BsonType : Enum {
    public sbyte value__;
    public static BsonType Number;
    public static BsonType String;
    public static BsonType Object;
    public static BsonType Array;
    public static BsonType Binary;
    public static BsonType Undefined;
    public static BsonType Oid;
    public static BsonType Boolean;
    public static BsonType Date;
    public static BsonType Null;
    public static BsonType Regex;
    public static BsonType Reference;
    public static BsonType Code;
    public static BsonType Symbol;
    public static BsonType CodeWScope;
    public static BsonType Integer;
    public static BsonType TimeStamp;
    public static BsonType Long;
    public static BsonType MinKey;
    public static BsonType MaxKey;
}
internal class Newtonsoft.Json.Bson.BsonValue : BsonToken {
    private object _value;
    private BsonType _type;
    public object Value { get; }
    public BsonType Type { get; }
    public BsonValue(object value, BsonType type);
    public object get_Value();
    public virtual BsonType get_Type();
}
[ObsoleteAttribute("BSON reading and writing has been moved to its own package. See https://www.nuget.org/packages/Newtonsoft.Json.Bson for more details.")]
internal class Newtonsoft.Json.Bson.BsonWriter : JsonWriter {
    private BsonBinaryWriter _writer;
    private BsonToken _root;
    private BsonToken _parent;
    private string _propertyName;
    public DateTimeKind DateTimeKindHandling { get; public set; }
    public BsonWriter(Stream stream);
    public BsonWriter(BinaryWriter writer);
    public DateTimeKind get_DateTimeKindHandling();
    public void set_DateTimeKindHandling(DateTimeKind value);
    public virtual void Flush();
    protected virtual void WriteEnd(JsonToken token);
    public virtual void WriteComment(string text);
    public virtual void WriteStartConstructor(string name);
    public virtual void WriteRaw(string json);
    public virtual void WriteRawValue(string json);
    public virtual void WriteStartArray();
    public virtual void WriteStartObject();
    public virtual void WritePropertyName(string name);
    public virtual void Close();
    private void AddParent(BsonToken container);
    private void RemoveParent();
    private void AddValue(object value, BsonType type);
    internal void AddToken(BsonToken token);
    public virtual void WriteValue(object value);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    public virtual void WriteValue(string value);
    public virtual void WriteValue(int value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Uri value);
    public void WriteObjectId(Byte[] value);
    public void WriteRegex(string pattern, string options);
}
internal enum Newtonsoft.Json.ConstructorHandling : Enum {
    public int value__;
    public static ConstructorHandling Default;
    public static ConstructorHandling AllowNonPublicDefaultConstructor;
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Converters.BinaryConverter : JsonConverter {
    private static string BinaryTypeName;
    private static string BinaryToArrayName;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private static ReflectionObject _reflectionObject;
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private Byte[] GetByteArray(object value);
    private static void EnsureReflectionObject(Type t);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private Byte[] ReadByteArray(JsonReader reader);
    public virtual bool CanConvert(Type objectType);
}
[ObsoleteAttribute("BSON reading and writing has been moved to its own package. See https://www.nuget.org/packages/Newtonsoft.Json.Bson for more details.")]
internal class Newtonsoft.Json.Converters.BsonObjectIdConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal abstract class Newtonsoft.Json.Converters.CustomCreationConverter`1 : JsonConverter {
    public bool CanWrite { get; }
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public abstract virtual T Create(Type objectType);
    public virtual bool CanConvert(Type objectType);
    public virtual bool get_CanWrite();
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Converters.DataSetConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type valueType);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.DataTableConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private static void CreateRow(JsonReader reader, DataTable dt, JsonSerializer serializer);
    private static Type GetColumnDataType(JsonReader reader);
    public virtual bool CanConvert(Type valueType);
}
internal abstract class Newtonsoft.Json.Converters.DateTimeConverterBase : JsonConverter {
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual bool CanConvert(Type objectType);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.DiscriminatedUnionConverter : JsonConverter {
    private static string CasePropertyName;
    private static string FieldsPropertyName;
    private static ThreadSafeStore`2<Type, Union> UnionCache;
    private static ThreadSafeStore`2<Type, Type> UnionTypeLookupCache;
    private static DiscriminatedUnionConverter();
    private static Type CreateUnionTypeLookup(Type t);
    private static Union CreateUnion(Type t);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Converters.EntityKeyMemberConverter : JsonConverter {
    private static string EntityKeyMemberFullTypeName;
    private static string KeyPropertyName;
    private static string TypePropertyName;
    private static string ValuePropertyName;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private static ReflectionObject _reflectionObject;
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private static void ReadAndAssertProperty(JsonReader reader, string propertyName);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private static void EnsureReflectionObject(Type objectType);
    public virtual bool CanConvert(Type objectType);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Converters.ExpandoObjectConverter : JsonConverter {
    public bool CanWrite { get; }
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private object ReadValue(JsonReader reader);
    private object ReadList(JsonReader reader);
    private object ReadObject(JsonReader reader);
    public virtual bool CanConvert(Type objectType);
    public virtual bool get_CanWrite();
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.IsoDateTimeConverter : DateTimeConverterBase {
    private static string DefaultDateTimeFormat;
    private DateTimeStyles _dateTimeStyles;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private string _dateTimeFormat;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private CultureInfo _culture;
    public DateTimeStyles DateTimeStyles { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public string DateTimeFormat { get; public set; }
    public CultureInfo Culture { get; public set; }
    public DateTimeStyles get_DateTimeStyles();
    public void set_DateTimeStyles(DateTimeStyles value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public string get_DateTimeFormat();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public void set_DateTimeFormat(string value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal interface Newtonsoft.Json.Converters.IXmlDeclaration {
    public string Version { get; }
    public string Encoding { get; public set; }
    public string Standalone { get; public set; }
    public abstract virtual string get_Version();
    public abstract virtual string get_Encoding();
    public abstract virtual void set_Encoding(string value);
    public abstract virtual string get_Standalone();
    public abstract virtual void set_Standalone(string value);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal interface Newtonsoft.Json.Converters.IXmlDocument {
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public IXmlElement DocumentElement { get; }
    public abstract virtual IXmlNode CreateComment(string text);
    public abstract virtual IXmlNode CreateTextNode(string text);
    public abstract virtual IXmlNode CreateCDataSection(string data);
    public abstract virtual IXmlNode CreateWhitespace(string text);
    public abstract virtual IXmlNode CreateSignificantWhitespace(string text);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public abstract virtual IXmlNode CreateXmlDeclaration(string version, string encoding, string standalone);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public abstract virtual IXmlNode CreateXmlDocumentType(string name, string publicId, string systemId, string internalSubset);
    public abstract virtual IXmlNode CreateProcessingInstruction(string target, string data);
    public abstract virtual IXmlElement CreateElement(string elementName);
    public abstract virtual IXmlElement CreateElement(string qualifiedName, string namespaceUri);
    public abstract virtual IXmlNode CreateAttribute(string name, string value);
    public abstract virtual IXmlNode CreateAttribute(string qualifiedName, string namespaceUri, string value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public abstract virtual IXmlElement get_DocumentElement();
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal interface Newtonsoft.Json.Converters.IXmlDocumentType {
    public string Name { get; }
    public string System { get; }
    public string Public { get; }
    public string InternalSubset { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_System();
    public abstract virtual string get_Public();
    public abstract virtual string get_InternalSubset();
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal interface Newtonsoft.Json.Converters.IXmlElement {
    public bool IsEmpty { get; }
    public abstract virtual void SetAttributeNode(IXmlNode attribute);
    public abstract virtual string GetPrefixOfNamespace(string namespaceUri);
    public abstract virtual bool get_IsEmpty();
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal interface Newtonsoft.Json.Converters.IXmlNode {
    public XmlNodeType NodeType { get; }
    public string LocalName { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
public List`1<IXmlNode> ChildNodes { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
public List`1<IXmlNode> Attributes { get; }
    public IXmlNode ParentNode { get; }
    public string Value { get; public set; }
    public string NamespaceUri { get; }
    public object WrappedNode { get; }
    public abstract virtual XmlNodeType get_NodeType();
    public abstract virtual string get_LocalName();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public abstract virtual List`1<IXmlNode> get_ChildNodes();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public abstract virtual List`1<IXmlNode> get_Attributes();
    public abstract virtual IXmlNode get_ParentNode();
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public abstract virtual IXmlNode AppendChild(IXmlNode newChild);
    public abstract virtual string get_NamespaceUri();
    public abstract virtual object get_WrappedNode();
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.JavaScriptDateTimeConverter : DateTimeConverterBase {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.KeyValuePairConverter : JsonConverter {
    private static string KeyName;
    private static string ValueName;
    private static ThreadSafeStore`2<Type, ReflectionObject> ReflectionObjectPerType;
    private static KeyValuePairConverter();
    private static ReflectionObject InitializeReflectionObject(Type t);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.RegexConverter : JsonConverter {
    private static string PatternName;
    private static string OptionsName;
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private bool HasFlag(RegexOptions options, RegexOptions flag);
    private void WriteBson(BsonWriter writer, Regex regex);
    private void WriteJson(JsonWriter writer, Regex regex, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private object ReadRegexString(JsonReader reader);
    private Regex ReadRegexObject(JsonReader reader, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
    private bool IsRegex(Type objectType);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Converters.StringEnumConverter : JsonConverter {
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NamingStrategy <NamingStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowIntegerValues>k__BackingField;
    [ObsoleteAttribute("StringEnumConverter.CamelCaseText is obsolete. Set StringEnumConverter.NamingStrategy with CamelCaseNamingStrategy instead.")]
public bool CamelCaseText { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public NamingStrategy NamingStrategy { get; public set; }
    public bool AllowIntegerValues { get; public set; }
    [ObsoleteAttribute("StringEnumConverter(bool) is obsolete. Create a converter with StringEnumConverter(NamingStrategy, bool) instead.")]
public StringEnumConverter(bool camelCaseText);
    public StringEnumConverter(NamingStrategy namingStrategy, bool allowIntegerValues);
    public StringEnumConverter(Type namingStrategyType);
    public StringEnumConverter(Type namingStrategyType, Object[] namingStrategyParameters);
    public StringEnumConverter(Type namingStrategyType, Object[] namingStrategyParameters, bool allowIntegerValues);
    public bool get_CamelCaseText();
    public void set_CamelCaseText(bool value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public NamingStrategy get_NamingStrategy();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_NamingStrategy(NamingStrategy value);
    [CompilerGeneratedAttribute]
public bool get_AllowIntegerValues();
    [CompilerGeneratedAttribute]
public void set_AllowIntegerValues(bool value);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.UnixDateTimeConverter : DateTimeConverterBase {
    internal static DateTime UnixEpoch;
    private static UnixDateTimeConverter();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.VersionConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.XAttributeWrapper : XObjectWrapper {
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
private XAttribute Attribute { get; }
    public string Value { get; public set; }
    public string LocalName { get; }
    public string NamespaceUri { get; }
    public IXmlNode ParentNode { get; }
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public XAttributeWrapper(XAttribute attribute);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
private XAttribute get_Attribute();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual string get_LocalName();
    public virtual string get_NamespaceUri();
    public virtual IXmlNode get_ParentNode();
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.XCommentWrapper : XObjectWrapper {
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
private XComment Text { get; }
    public string Value { get; public set; }
    public IXmlNode ParentNode { get; }
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public XCommentWrapper(XComment text);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
private XComment get_Text();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual IXmlNode get_ParentNode();
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.XContainerWrapper : XObjectWrapper {
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IXmlNode> _childNodes;
    private XContainer Container { get; }
    public List`1<IXmlNode> ChildNodes { get; }
    protected bool HasChildNodes { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public IXmlNode ParentNode { get; }
    public XContainerWrapper(XContainer container);
    private XContainer get_Container();
    public virtual List`1<IXmlNode> get_ChildNodes();
    protected virtual bool get_HasChildNodes();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual IXmlNode get_ParentNode();
    internal static IXmlNode WrapNode(XObject node);
    public virtual IXmlNode AppendChild(IXmlNode newChild);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Converters.XDeclarationWrapper : XObjectWrapper {
    [CompilerGeneratedAttribute]
private XDeclaration <Declaration>k__BackingField;
    internal XDeclaration Declaration { get; }
    public XmlNodeType NodeType { get; }
    public string Version { get; }
    public string Encoding { get; public set; }
    public string Standalone { get; public set; }
    public XDeclarationWrapper(XDeclaration declaration);
    [CompilerGeneratedAttribute]
internal XDeclaration get_Declaration();
    public virtual XmlNodeType get_NodeType();
    public sealed virtual string get_Version();
    public sealed virtual string get_Encoding();
    public sealed virtual void set_Encoding(string value);
    public sealed virtual string get_Standalone();
    public sealed virtual void set_Standalone(string value);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Converters.XDocumentTypeWrapper : XObjectWrapper {
    private XDocumentType _documentType;
    public string Name { get; }
    public string System { get; }
    public string Public { get; }
    public string InternalSubset { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public string LocalName { get; }
    public XDocumentTypeWrapper(XDocumentType documentType);
    public sealed virtual string get_Name();
    public sealed virtual string get_System();
    public sealed virtual string get_Public();
    public sealed virtual string get_InternalSubset();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual string get_LocalName();
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Converters.XDocumentWrapper : XContainerWrapper {
    private XDocument Document { get; }
    public List`1<IXmlNode> ChildNodes { get; }
    protected bool HasChildNodes { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public IXmlElement DocumentElement { get; }
    public XDocumentWrapper(XDocument document);
    private XDocument get_Document();
    public virtual List`1<IXmlNode> get_ChildNodes();
    protected virtual bool get_HasChildNodes();
    public sealed virtual IXmlNode CreateComment(string text);
    public sealed virtual IXmlNode CreateTextNode(string text);
    public sealed virtual IXmlNode CreateCDataSection(string data);
    public sealed virtual IXmlNode CreateWhitespace(string text);
    public sealed virtual IXmlNode CreateSignificantWhitespace(string text);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public sealed virtual IXmlNode CreateXmlDeclaration(string version, string encoding, string standalone);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public sealed virtual IXmlNode CreateXmlDocumentType(string name, string publicId, string systemId, string internalSubset);
    public sealed virtual IXmlNode CreateProcessingInstruction(string target, string data);
    public sealed virtual IXmlElement CreateElement(string elementName);
    public sealed virtual IXmlElement CreateElement(string qualifiedName, string namespaceUri);
    public sealed virtual IXmlNode CreateAttribute(string name, string value);
    public sealed virtual IXmlNode CreateAttribute(string qualifiedName, string namespaceUri, string value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public sealed virtual IXmlElement get_DocumentElement();
    public virtual IXmlNode AppendChild(IXmlNode newChild);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Converters.XElementWrapper : XContainerWrapper {
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IXmlNode> _attributes;
    private XElement Element { get; }
    public List`1<IXmlNode> Attributes { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public string Value { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public string LocalName { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public string NamespaceUri { get; }
    public bool IsEmpty { get; }
    public XElementWrapper(XElement element);
    private XElement get_Element();
    public sealed virtual void SetAttributeNode(IXmlNode attribute);
    public virtual List`1<IXmlNode> get_Attributes();
    private bool HasImplicitNamespaceAttribute(string namespaceUri);
    public virtual IXmlNode AppendChild(IXmlNode newChild);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual string get_Value();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void set_Value(string value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual string get_LocalName();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual string get_NamespaceUri();
    public sealed virtual string GetPrefixOfNamespace(string namespaceUri);
    public sealed virtual bool get_IsEmpty();
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Converters.XmlDeclarationWrapper : XmlNodeWrapper {
    private XmlDeclaration _declaration;
    public string Version { get; }
    public string Encoding { get; public set; }
    public string Standalone { get; public set; }
    public XmlDeclarationWrapper(XmlDeclaration declaration);
    public sealed virtual string get_Version();
    public sealed virtual string get_Encoding();
    public sealed virtual void set_Encoding(string value);
    public sealed virtual string get_Standalone();
    public sealed virtual void set_Standalone(string value);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Converters.XmlDocumentTypeWrapper : XmlNodeWrapper {
    private XmlDocumentType _documentType;
    public string Name { get; }
    public string System { get; }
    public string Public { get; }
    public string InternalSubset { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public string LocalName { get; }
    public XmlDocumentTypeWrapper(XmlDocumentType documentType);
    public sealed virtual string get_Name();
    public sealed virtual string get_System();
    public sealed virtual string get_Public();
    public sealed virtual string get_InternalSubset();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual string get_LocalName();
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Converters.XmlDocumentWrapper : XmlNodeWrapper {
    private XmlDocument _document;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public IXmlElement DocumentElement { get; }
    public XmlDocumentWrapper(XmlDocument document);
    public sealed virtual IXmlNode CreateComment(string data);
    public sealed virtual IXmlNode CreateTextNode(string text);
    public sealed virtual IXmlNode CreateCDataSection(string data);
    public sealed virtual IXmlNode CreateWhitespace(string text);
    public sealed virtual IXmlNode CreateSignificantWhitespace(string text);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public sealed virtual IXmlNode CreateXmlDeclaration(string version, string encoding, string standalone);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public sealed virtual IXmlNode CreateXmlDocumentType(string name, string publicId, string systemId, string internalSubset);
    public sealed virtual IXmlNode CreateProcessingInstruction(string target, string data);
    public sealed virtual IXmlElement CreateElement(string elementName);
    public sealed virtual IXmlElement CreateElement(string qualifiedName, string namespaceUri);
    public sealed virtual IXmlNode CreateAttribute(string name, string value);
    public sealed virtual IXmlNode CreateAttribute(string qualifiedName, string namespaceUri, string value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public sealed virtual IXmlElement get_DocumentElement();
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Converters.XmlElementWrapper : XmlNodeWrapper {
    private XmlElement _element;
    public bool IsEmpty { get; }
    public XmlElementWrapper(XmlElement element);
    public sealed virtual void SetAttributeNode(IXmlNode attribute);
    public sealed virtual string GetPrefixOfNamespace(string namespaceUri);
    public sealed virtual bool get_IsEmpty();
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.XmlNodeConverter : JsonConverter {
    internal static List`1<IXmlNode> EmptyChildNodes;
    private static string TextName;
    private static string CommentName;
    private static string CDataName;
    private static string WhitespaceName;
    private static string SignificantWhitespaceName;
    private static string DeclarationName;
    private static string JsonNamespaceUri;
    [CompilerGeneratedAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private string <DeserializeRootElementName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteArrayAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OmitRootObject>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EncodeSpecialCharacters>k__BackingField;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public string DeserializeRootElementName { get; public set; }
    public bool WriteArrayAttribute { get; public set; }
    public bool OmitRootObject { get; public set; }
    public bool EncodeSpecialCharacters { get; public set; }
    private static XmlNodeConverter();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_DeserializeRootElementName();
    [CompilerGeneratedAttribute]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public void set_DeserializeRootElementName(string value);
    [CompilerGeneratedAttribute]
public bool get_WriteArrayAttribute();
    [CompilerGeneratedAttribute]
public void set_WriteArrayAttribute(bool value);
    [CompilerGeneratedAttribute]
public bool get_OmitRootObject();
    [CompilerGeneratedAttribute]
public void set_OmitRootObject(bool value);
    [CompilerGeneratedAttribute]
public bool get_EncodeSpecialCharacters();
    [CompilerGeneratedAttribute]
public void set_EncodeSpecialCharacters(bool value);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private IXmlNode WrapXml(object value);
    private void PushParentNamespaces(IXmlNode node, XmlNamespaceManager manager);
    private string ResolveFullName(IXmlNode node, XmlNamespaceManager manager);
    private string GetPropertyName(IXmlNode node, XmlNamespaceManager manager);
    private bool IsArray(IXmlNode node);
    private void SerializeGroupedNodes(JsonWriter writer, IXmlNode node, XmlNamespaceManager manager, bool writePropertyName);
    private void WriteGroupedNodes(JsonWriter writer, XmlNamespaceManager manager, bool writePropertyName, List`1<IXmlNode> groupedNodes, string elementNames);
    private void WriteGroupedNodes(JsonWriter writer, XmlNamespaceManager manager, bool writePropertyName, IXmlNode node, string elementNames);
    private void SerializeNode(JsonWriter writer, IXmlNode node, XmlNamespaceManager manager, bool writePropertyName);
    private static bool AllSameName(IXmlNode node);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private void DeserializeValue(JsonReader reader, IXmlDocument document, XmlNamespaceManager manager, string propertyName, IXmlNode currentNode);
    private void ReadElement(JsonReader reader, IXmlDocument document, IXmlNode currentNode, string propertyName, XmlNamespaceManager manager);
    private void CreateElement(JsonReader reader, IXmlDocument document, IXmlNode currentNode, string elementName, XmlNamespaceManager manager, string elementPrefix, Dictionary`2<string, string> attributeNameValues);
    private static void AddAttribute(JsonReader reader, IXmlDocument document, IXmlNode currentNode, string propertyName, string attributeName, XmlNamespaceManager manager, string attributePrefix);
    private static string ConvertTokenToXmlValue(JsonReader reader);
    private void ReadArrayElements(JsonReader reader, IXmlDocument document, string propertyName, IXmlNode currentNode, XmlNamespaceManager manager);
    private void AddJsonArrayAttribute(IXmlElement element, IXmlDocument document);
    private bool ShouldReadInto(JsonReader reader);
    private Dictionary`2<string, string> ReadAttributeElements(JsonReader reader, XmlNamespaceManager manager);
    private void CreateInstruction(JsonReader reader, IXmlDocument document, IXmlNode currentNode, string propertyName);
    private void CreateDocumentType(JsonReader reader, IXmlDocument document, IXmlNode currentNode);
    private IXmlElement CreateElement(string elementName, IXmlDocument document, string elementPrefix, XmlNamespaceManager manager);
    private void DeserializeNode(JsonReader reader, IXmlDocument document, XmlNamespaceManager manager, IXmlNode currentNode);
    private bool IsNamespaceAttribute(string attributeName, String& prefix);
    private bool ValueAttributes(List`1<IXmlNode> c);
    public virtual bool CanConvert(Type valueType);
    private bool IsXObject(Type valueType);
    private bool IsXmlNode(Type valueType);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.XmlNodeWrapper : object {
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
private XmlNode _node;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IXmlNode> _childNodes;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IXmlNode> _attributes;
    public object WrappedNode { get; }
    public XmlNodeType NodeType { get; }
    public string LocalName { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
public List`1<IXmlNode> ChildNodes { get; }
    protected bool HasChildNodes { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
public List`1<IXmlNode> Attributes { get; }
    private bool HasAttributes { get; }
    public IXmlNode ParentNode { get; }
    public string Value { get; public set; }
    public string NamespaceUri { get; }
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public XmlNodeWrapper(XmlNode node);
    public sealed virtual object get_WrappedNode();
    public sealed virtual XmlNodeType get_NodeType();
    public virtual string get_LocalName();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public sealed virtual List`1<IXmlNode> get_ChildNodes();
    protected virtual bool get_HasChildNodes();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal static IXmlNode WrapNode(XmlNode node);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public sealed virtual List`1<IXmlNode> get_Attributes();
    private bool get_HasAttributes();
    public sealed virtual IXmlNode get_ParentNode();
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public sealed virtual IXmlNode AppendChild(IXmlNode newChild);
    public sealed virtual string get_NamespaceUri();
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.XObjectWrapper : object {
    private XObject _xmlObject;
    public object WrappedNode { get; }
    public XmlNodeType NodeType { get; }
    public string LocalName { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
public List`1<IXmlNode> ChildNodes { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
public List`1<IXmlNode> Attributes { get; }
    public IXmlNode ParentNode { get; }
    public string Value { get; public set; }
    public string NamespaceUri { get; }
    public XObjectWrapper(XObject xmlObject);
    public sealed virtual object get_WrappedNode();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_LocalName();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual List`1<IXmlNode> get_ChildNodes();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual List`1<IXmlNode> get_Attributes();
    public virtual IXmlNode get_ParentNode();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual IXmlNode AppendChild(IXmlNode newChild);
    public virtual string get_NamespaceUri();
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.XProcessingInstructionWrapper : XObjectWrapper {
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
private XProcessingInstruction ProcessingInstruction { get; }
    public string LocalName { get; }
    public string Value { get; public set; }
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public XProcessingInstructionWrapper(XProcessingInstruction processingInstruction);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
private XProcessingInstruction get_ProcessingInstruction();
    public virtual string get_LocalName();
    public virtual string get_Value();
    public virtual void set_Value(string value);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.XTextWrapper : XObjectWrapper {
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
private XText Text { get; }
    public string Value { get; public set; }
    public IXmlNode ParentNode { get; }
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public XTextWrapper(XText text);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
private XText get_Text();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual IXmlNode get_ParentNode();
}
internal enum Newtonsoft.Json.DateFormatHandling : Enum {
    public int value__;
    public static DateFormatHandling IsoDateFormat;
    public static DateFormatHandling MicrosoftDateFormat;
}
internal enum Newtonsoft.Json.DateParseHandling : Enum {
    public int value__;
    public static DateParseHandling None;
    public static DateParseHandling DateTime;
    public static DateParseHandling DateTimeOffset;
}
internal enum Newtonsoft.Json.DateTimeZoneHandling : Enum {
    public int value__;
    public static DateTimeZoneHandling Local;
    public static DateTimeZoneHandling Utc;
    public static DateTimeZoneHandling Unspecified;
    public static DateTimeZoneHandling RoundtripKind;
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.DefaultJsonNameTable : JsonNameTable {
    private static int HashCodeRandomizer;
    private int _count;
    private Entry[] _entries;
    private int _mask;
    private static DefaultJsonNameTable();
    public virtual string Get(Char[] key, int start, int length);
    public string Add(string key);
    private string AddEntry(string str, int hashCode);
    private void Grow();
    private static bool TextEquals(string str1, Char[] str2, int str2Start, int str2Length);
}
[FlagsAttribute]
internal enum Newtonsoft.Json.DefaultValueHandling : Enum {
    public int value__;
    public static DefaultValueHandling Include;
    public static DefaultValueHandling Ignore;
    public static DefaultValueHandling Populate;
    public static DefaultValueHandling IgnoreAndPopulate;
}
internal enum Newtonsoft.Json.FloatFormatHandling : Enum {
    public int value__;
    public static FloatFormatHandling String;
    public static FloatFormatHandling Symbol;
    public static FloatFormatHandling DefaultValue;
}
internal enum Newtonsoft.Json.FloatParseHandling : Enum {
    public int value__;
    public static FloatParseHandling Double;
    public static FloatParseHandling Decimal;
}
internal enum Newtonsoft.Json.Formatting : Enum {
    public int value__;
    public static Formatting None;
    public static Formatting Indented;
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal interface Newtonsoft.Json.IArrayPool`1 {
    public abstract virtual T[] Rent(int minimumLength);
    public abstract virtual void Return(T[] array);
}
internal interface Newtonsoft.Json.IJsonLineInfo {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public abstract virtual bool HasLineInfo();
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LinePosition();
}
[AttributeUsageAttribute("1028")]
internal class Newtonsoft.Json.JsonArrayAttribute : JsonContainerAttribute {
    private bool _allowNullItems;
    public bool AllowNullItems { get; public set; }
    public JsonArrayAttribute(bool allowNullItems);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public JsonArrayAttribute(string id);
    public bool get_AllowNullItems();
    public void set_AllowNullItems(bool value);
}
[AttributeUsageAttribute("32")]
internal class Newtonsoft.Json.JsonConstructorAttribute : Attribute {
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[AttributeUsageAttribute("1028")]
internal abstract class Newtonsoft.Json.JsonContainerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ItemConverterType>k__BackingField;
    [CompilerGeneratedAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Object[] <ItemConverterParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private NamingStrategy <NamingStrategyInstance>k__BackingField;
    internal Nullable`1<bool> _isReference;
    internal Nullable`1<bool> _itemIsReference;
    internal Nullable`1<ReferenceLoopHandling> _itemReferenceLoopHandling;
    internal Nullable`1<TypeNameHandling> _itemTypeNameHandling;
    private Type _namingStrategyType;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Object[] _namingStrategyParameters;
    public string Id { get; public set; }
    public string Title { get; public set; }
    public string Description { get; public set; }
    public Type ItemConverterType { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] ItemConverterParameters { get; public set; }
    public Type NamingStrategyType { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] NamingStrategyParameters { get; public set; }
    internal NamingStrategy NamingStrategyInstance { get; internal set; }
    public bool IsReference { get; public set; }
    public bool ItemIsReference { get; public set; }
    public ReferenceLoopHandling ItemReferenceLoopHandling { get; public set; }
    public TypeNameHandling ItemTypeNameHandling { get; public set; }
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
protected JsonContainerAttribute(string id);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Type get_ItemConverterType();
    [CompilerGeneratedAttribute]
public void set_ItemConverterType(Type value);
    [CompilerGeneratedAttribute]
public Object[] get_ItemConverterParameters();
    [CompilerGeneratedAttribute]
public void set_ItemConverterParameters(Object[] value);
    public Type get_NamingStrategyType();
    public void set_NamingStrategyType(Type value);
    public Object[] get_NamingStrategyParameters();
    public void set_NamingStrategyParameters(Object[] value);
    [CompilerGeneratedAttribute]
internal NamingStrategy get_NamingStrategyInstance();
    [CompilerGeneratedAttribute]
internal void set_NamingStrategyInstance(NamingStrategy value);
    public bool get_IsReference();
    public void set_IsReference(bool value);
    public bool get_ItemIsReference();
    public void set_ItemIsReference(bool value);
    public ReferenceLoopHandling get_ItemReferenceLoopHandling();
    public void set_ItemReferenceLoopHandling(ReferenceLoopHandling value);
    public TypeNameHandling get_ItemTypeNameHandling();
    public void set_ItemTypeNameHandling(TypeNameHandling value);
}
internal enum Newtonsoft.Json.JsonContainerType : Enum {
    public int value__;
    public static JsonContainerType None;
    public static JsonContainerType Object;
    public static JsonContainerType Array;
    public static JsonContainerType Constructor;
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal static class Newtonsoft.Json.JsonConvert : object {
    [CompilerGeneratedAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`1<JsonSerializerSettings> <DefaultSettings>k__BackingField;
    public static string True;
    public static string False;
    public static string Null;
    public static string Undefined;
    public static string PositiveInfinity;
    public static string NegativeInfinity;
    public static string NaN;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Func`1<JsonSerializerSettings> DefaultSettings { get; public set; }
    private static JsonConvert();
    [CompilerGeneratedAttribute]
public static Func`1<JsonSerializerSettings> get_DefaultSettings();
    [CompilerGeneratedAttribute]
public static void set_DefaultSettings(Func`1<JsonSerializerSettings> value);
    public static string ToString(DateTime value);
    public static string ToString(DateTime value, DateFormatHandling format, DateTimeZoneHandling timeZoneHandling);
    public static string ToString(DateTimeOffset value);
    public static string ToString(DateTimeOffset value, DateFormatHandling format);
    public static string ToString(bool value);
    public static string ToString(char value);
    public static string ToString(Enum value);
    public static string ToString(int value);
    public static string ToString(short value);
    [CLSCompliantAttribute("False")]
public static string ToString(ushort value);
    [CLSCompliantAttribute("False")]
public static string ToString(UInt32 value);
    public static string ToString(long value);
    private static string ToStringInternal(BigInteger value);
    [CLSCompliantAttribute("False")]
public static string ToString(ulong value);
    public static string ToString(float value);
    internal static string ToString(float value, FloatFormatHandling floatFormatHandling, char quoteChar, bool nullable);
    private static string EnsureFloatFormat(double value, string text, FloatFormatHandling floatFormatHandling, char quoteChar, bool nullable);
    public static string ToString(double value);
    internal static string ToString(double value, FloatFormatHandling floatFormatHandling, char quoteChar, bool nullable);
    private static string EnsureDecimalPlace(double value, string text);
    private static string EnsureDecimalPlace(string text);
    public static string ToString(byte value);
    [CLSCompliantAttribute("False")]
public static string ToString(sbyte value);
    public static string ToString(decimal value);
    public static string ToString(Guid value);
    internal static string ToString(Guid value, char quoteChar);
    public static string ToString(TimeSpan value);
    internal static string ToString(TimeSpan value, char quoteChar);
    public static string ToString(Uri value);
    internal static string ToString(Uri value, char quoteChar);
    public static string ToString(string value);
    public static string ToString(string value, char delimiter);
    public static string ToString(string value, char delimiter, StringEscapeHandling stringEscapeHandling);
    public static string ToString(object value);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value, Formatting formatting);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value, JsonConverter[] converters);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value, Formatting formatting, JsonConverter[] converters);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static string SerializeObject(object value, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static string SerializeObject(object value, Type type, JsonSerializerSettings settings);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static string SerializeObject(object value, Formatting formatting, JsonSerializerSettings settings);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static string SerializeObject(object value, Type type, Formatting formatting, JsonSerializerSettings settings);
    private static string SerializeObjectInternal(object value, Type type, JsonSerializer jsonSerializer);
    [DebuggerStepThroughAttribute]
public static object DeserializeObject(string value);
    [DebuggerStepThroughAttribute]
public static object DeserializeObject(string value, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static object DeserializeObject(string value, Type type);
    [DebuggerStepThroughAttribute]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static T DeserializeObject(string value);
    [DebuggerStepThroughAttribute]
public static T DeserializeAnonymousType(string value, T anonymousTypeObject);
    [DebuggerStepThroughAttribute]
public static T DeserializeAnonymousType(string value, T anonymousTypeObject, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static T DeserializeObject(string value, JsonConverter[] converters);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static T DeserializeObject(string value, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static object DeserializeObject(string value, Type type, JsonConverter[] converters);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static object DeserializeObject(string value, Type type, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static void PopulateObject(string value, object target);
    public static void PopulateObject(string value, object target, JsonSerializerSettings settings);
    public static string SerializeXmlNode(XmlNode node);
    public static string SerializeXmlNode(XmlNode node, Formatting formatting);
    public static string SerializeXmlNode(XmlNode node, Formatting formatting, bool omitRootObject);
    public static XmlDocument DeserializeXmlNode(string value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static XmlDocument DeserializeXmlNode(string value, string deserializeRootElementName);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static XmlDocument DeserializeXmlNode(string value, string deserializeRootElementName, bool writeArrayAttribute);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static XmlDocument DeserializeXmlNode(string value, string deserializeRootElementName, bool writeArrayAttribute, bool encodeSpecialCharacters);
    public static string SerializeXNode(XObject node);
    public static string SerializeXNode(XObject node, Formatting formatting);
    public static string SerializeXNode(XObject node, Formatting formatting, bool omitRootObject);
    public static XDocument DeserializeXNode(string value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static XDocument DeserializeXNode(string value, string deserializeRootElementName);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static XDocument DeserializeXNode(string value, string deserializeRootElementName, bool writeArrayAttribute);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static XDocument DeserializeXNode(string value, string deserializeRootElementName, bool writeArrayAttribute, bool encodeSpecialCharacters);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal abstract class Newtonsoft.Json.JsonConverter : object {
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public abstract virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public abstract virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public abstract virtual bool CanConvert(Type objectType);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal abstract class Newtonsoft.Json.JsonConverter`1 : JsonConverter {
    public sealed virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public abstract virtual void WriteJson(JsonWriter writer, T value, JsonSerializer serializer);
    public sealed virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public abstract virtual T ReadJson(JsonReader reader, Type objectType, T existingValue, bool hasExistingValue, JsonSerializer serializer);
    public sealed virtual bool CanConvert(Type objectType);
}
[AttributeUsageAttribute("3484")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.JsonConverterAttribute : Attribute {
    private Type _converterType;
    [CompilerGeneratedAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Object[] <ConverterParameters>k__BackingField;
    public Type ConverterType { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] ConverterParameters { get; }
    public JsonConverterAttribute(Type converterType);
    public JsonConverterAttribute(Type converterType, Object[] converterParameters);
    public Type get_ConverterType();
    [CompilerGeneratedAttribute]
public Object[] get_ConverterParameters();
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Newtonsoft.Json.JsonConverterCollection : Collection`1<JsonConverter> {
}
[AttributeUsageAttribute("1028")]
internal class Newtonsoft.Json.JsonDictionaryAttribute : JsonContainerAttribute {
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public JsonDictionaryAttribute(string id);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.JsonException : Exception {
    public JsonException(string message);
    public JsonException(string message, Exception innerException);
    public JsonException(SerializationInfo info, StreamingContext context);
    internal static JsonException Create(IJsonLineInfo lineInfo, string path, string message);
}
[AttributeUsageAttribute("384")]
internal class Newtonsoft.Json.JsonExtensionDataAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <WriteData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadData>k__BackingField;
    public bool WriteData { get; public set; }
    public bool ReadData { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_WriteData();
    [CompilerGeneratedAttribute]
public void set_WriteData(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReadData();
    [CompilerGeneratedAttribute]
public void set_ReadData(bool value);
}
[AttributeUsageAttribute("384")]
internal class Newtonsoft.Json.JsonIgnoreAttribute : Attribute {
}
internal abstract class Newtonsoft.Json.JsonNameTable : object {
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public abstract virtual string Get(Char[] key, int start, int length);
}
[AttributeUsageAttribute("1036")]
internal class Newtonsoft.Json.JsonObjectAttribute : JsonContainerAttribute {
    private MemberSerialization _memberSerialization;
    internal Nullable`1<MissingMemberHandling> _missingMemberHandling;
    internal Nullable`1<Required> _itemRequired;
    internal Nullable`1<NullValueHandling> _itemNullValueHandling;
    public MemberSerialization MemberSerialization { get; public set; }
    public MissingMemberHandling MissingMemberHandling { get; public set; }
    public NullValueHandling ItemNullValueHandling { get; public set; }
    public Required ItemRequired { get; public set; }
    public JsonObjectAttribute(MemberSerialization memberSerialization);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public JsonObjectAttribute(string id);
    public MemberSerialization get_MemberSerialization();
    public void set_MemberSerialization(MemberSerialization value);
    public MissingMemberHandling get_MissingMemberHandling();
    public void set_MissingMemberHandling(MissingMemberHandling value);
    public NullValueHandling get_ItemNullValueHandling();
    public void set_ItemNullValueHandling(NullValueHandling value);
    public Required get_ItemRequired();
    public void set_ItemRequired(Required value);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.JsonPosition : ValueType {
    private static Char[] SpecialCharacters;
    internal JsonContainerType Type;
    internal int Position;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
internal string PropertyName;
    internal bool HasIndex;
    public JsonPosition(JsonContainerType type);
    private static JsonPosition();
    internal int CalculateLength();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal void WriteTo(StringBuilder sb, StringWriter& writer, Char[]& buffer);
    internal static bool TypeHasIndex(JsonContainerType type);
    internal static string BuildPath(List`1<JsonPosition> positions, Nullable`1<JsonPosition> currentPosition);
    internal static string FormatMessage(IJsonLineInfo lineInfo, string path, string message);
}
[AttributeUsageAttribute("2432")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal class Newtonsoft.Json.JsonPropertyAttribute : Attribute {
    internal Nullable`1<NullValueHandling> _nullValueHandling;
    internal Nullable`1<DefaultValueHandling> _defaultValueHandling;
    internal Nullable`1<ReferenceLoopHandling> _referenceLoopHandling;
    internal Nullable`1<ObjectCreationHandling> _objectCreationHandling;
    internal Nullable`1<TypeNameHandling> _typeNameHandling;
    internal Nullable`1<bool> _isReference;
    internal Nullable`1<int> _order;
    internal Nullable`1<Required> _required;
    internal Nullable`1<bool> _itemIsReference;
    internal Nullable`1<ReferenceLoopHandling> _itemReferenceLoopHandling;
    internal Nullable`1<TypeNameHandling> _itemTypeNameHandling;
    [CompilerGeneratedAttribute]
private Type <ItemConverterType>k__BackingField;
    [CompilerGeneratedAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Object[] <ItemConverterParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <NamingStrategyType>k__BackingField;
    [CompilerGeneratedAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Object[] <NamingStrategyParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public Type ItemConverterType { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] ItemConverterParameters { get; public set; }
    public Type NamingStrategyType { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] NamingStrategyParameters { get; public set; }
    public NullValueHandling NullValueHandling { get; public set; }
    public DefaultValueHandling DefaultValueHandling { get; public set; }
    public ReferenceLoopHandling ReferenceLoopHandling { get; public set; }
    public ObjectCreationHandling ObjectCreationHandling { get; public set; }
    public TypeNameHandling TypeNameHandling { get; public set; }
    public bool IsReference { get; public set; }
    public int Order { get; public set; }
    public Required Required { get; public set; }
    public string PropertyName { get; public set; }
    public ReferenceLoopHandling ItemReferenceLoopHandling { get; public set; }
    public TypeNameHandling ItemTypeNameHandling { get; public set; }
    public bool ItemIsReference { get; public set; }
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public JsonPropertyAttribute(string propertyName);
    [CompilerGeneratedAttribute]
public Type get_ItemConverterType();
    [CompilerGeneratedAttribute]
public void set_ItemConverterType(Type value);
    [CompilerGeneratedAttribute]
public Object[] get_ItemConverterParameters();
    [CompilerGeneratedAttribute]
public void set_ItemConverterParameters(Object[] value);
    [CompilerGeneratedAttribute]
public Type get_NamingStrategyType();
    [CompilerGeneratedAttribute]
public void set_NamingStrategyType(Type value);
    [CompilerGeneratedAttribute]
public Object[] get_NamingStrategyParameters();
    [CompilerGeneratedAttribute]
public void set_NamingStrategyParameters(Object[] value);
    public NullValueHandling get_NullValueHandling();
    public void set_NullValueHandling(NullValueHandling value);
    public DefaultValueHandling get_DefaultValueHandling();
    public void set_DefaultValueHandling(DefaultValueHandling value);
    public ReferenceLoopHandling get_ReferenceLoopHandling();
    public void set_ReferenceLoopHandling(ReferenceLoopHandling value);
    public ObjectCreationHandling get_ObjectCreationHandling();
    public void set_ObjectCreationHandling(ObjectCreationHandling value);
    public TypeNameHandling get_TypeNameHandling();
    public void set_TypeNameHandling(TypeNameHandling value);
    public bool get_IsReference();
    public void set_IsReference(bool value);
    public int get_Order();
    public void set_Order(int value);
    public Required get_Required();
    public void set_Required(Required value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    public ReferenceLoopHandling get_ItemReferenceLoopHandling();
    public void set_ItemReferenceLoopHandling(ReferenceLoopHandling value);
    public TypeNameHandling get_ItemTypeNameHandling();
    public void set_ItemTypeNameHandling(TypeNameHandling value);
    public bool get_ItemIsReference();
    public void set_ItemIsReference(bool value);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal abstract class Newtonsoft.Json.JsonReader : object {
    private JsonToken _tokenType;
    private object _value;
    internal char _quoteChar;
    internal State _currentState;
    private JsonPosition _currentPosition;
    private CultureInfo _culture;
    private DateTimeZoneHandling _dateTimeZoneHandling;
    private Nullable`1<int> _maxDepth;
    private bool _hasExceededMaxDepth;
    internal DateParseHandling _dateParseHandling;
    internal FloatParseHandling _floatParseHandling;
    private string _dateFormatString;
    private List`1<JsonPosition> _stack;
    [CompilerGeneratedAttribute]
private bool <CloseInput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportMultipleContent>k__BackingField;
    protected State CurrentState { get; }
    public bool CloseInput { get; public set; }
    public bool SupportMultipleContent { get; public set; }
    public char QuoteChar { get; protected internal set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public DateParseHandling DateParseHandling { get; public set; }
    public FloatParseHandling FloatParseHandling { get; public set; }
    public string DateFormatString { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public JsonToken TokenType { get; }
    public object Value { get; }
    public Type ValueType { get; }
    public int Depth { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
public string Path { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
public CultureInfo Culture { get; public set; }
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Newtonsoft.Json.JsonReader/<SkipAsync>d__1")]
public Task SkipAsync(CancellationToken cancellationToken);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Newtonsoft.Json.JsonReader/<ReaderReadAndAssertAsync>d__2")]
internal Task ReaderReadAndAssertAsync(CancellationToken cancellationToken);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual Task`1<Nullable`1<bool>> ReadAsBooleanAsync(CancellationToken cancellationToken);
    public virtual Task`1<Byte[]> ReadAsBytesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonReader/<ReadArrayIntoByteArrayAsync>d__5")]
internal Task`1<Byte[]> ReadArrayIntoByteArrayAsync(CancellationToken cancellationToken);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual Task`1<Nullable`1<DateTime>> ReadAsDateTimeAsync(CancellationToken cancellationToken);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual Task`1<Nullable`1<DateTimeOffset>> ReadAsDateTimeOffsetAsync(CancellationToken cancellationToken);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual Task`1<Nullable`1<decimal>> ReadAsDecimalAsync(CancellationToken cancellationToken);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual Task`1<Nullable`1<double>> ReadAsDoubleAsync(CancellationToken cancellationToken);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual Task`1<Nullable`1<int>> ReadAsInt32Async(CancellationToken cancellationToken);
    public virtual Task`1<string> ReadAsStringAsync(CancellationToken cancellationToken);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Newtonsoft.Json.JsonReader/<ReadAndMoveToContentAsync>d__12")]
internal Task`1<bool> ReadAndMoveToContentAsync(CancellationToken cancellationToken);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal Task`1<bool> MoveToContentAsync(CancellationToken cancellationToken);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Newtonsoft.Json.JsonReader/<MoveToContentFromNonContentAsync>d__14")]
private Task`1<bool> MoveToContentFromNonContentAsync(CancellationToken cancellationToken);
    protected State get_CurrentState();
    [CompilerGeneratedAttribute]
public bool get_CloseInput();
    [CompilerGeneratedAttribute]
public void set_CloseInput(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportMultipleContent();
    [CompilerGeneratedAttribute]
public void set_SupportMultipleContent(bool value);
    public virtual char get_QuoteChar();
    protected internal virtual void set_QuoteChar(char value);
    public DateTimeZoneHandling get_DateTimeZoneHandling();
    public void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public DateParseHandling get_DateParseHandling();
    public void set_DateParseHandling(DateParseHandling value);
    public FloatParseHandling get_FloatParseHandling();
    public void set_FloatParseHandling(FloatParseHandling value);
    public string get_DateFormatString();
    public void set_DateFormatString(string value);
    public Nullable`1<int> get_MaxDepth();
    public void set_MaxDepth(Nullable`1<int> value);
    public virtual JsonToken get_TokenType();
    public virtual object get_Value();
    public virtual Type get_ValueType();
    public virtual int get_Depth();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual string get_Path();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public CultureInfo get_Culture();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public void set_Culture(CultureInfo value);
    internal JsonPosition GetPosition(int depth);
    private void Push(JsonContainerType value);
    private JsonContainerType Pop();
    private JsonContainerType Peek();
    public abstract virtual bool Read();
    public virtual Nullable`1<int> ReadAsInt32();
    internal Nullable`1<int> ReadInt32String(string s);
    public virtual string ReadAsString();
    public virtual Byte[] ReadAsBytes();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal Byte[] ReadArrayIntoByteArray();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
private bool ReadArrayElementIntoByteArrayReportDone(List`1<byte> buffer);
    public virtual Nullable`1<double> ReadAsDouble();
    internal Nullable`1<double> ReadDoubleString(string s);
    public virtual Nullable`1<bool> ReadAsBoolean();
    internal Nullable`1<bool> ReadBooleanString(string s);
    public virtual Nullable`1<decimal> ReadAsDecimal();
    internal Nullable`1<decimal> ReadDecimalString(string s);
    public virtual Nullable`1<DateTime> ReadAsDateTime();
    internal Nullable`1<DateTime> ReadDateTimeString(string s);
    public virtual Nullable`1<DateTimeOffset> ReadAsDateTimeOffset();
    internal Nullable`1<DateTimeOffset> ReadDateTimeOffsetString(string s);
    internal void ReaderReadAndAssert();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal JsonReaderException CreateUnexpectedEndException();
    internal void ReadIntoWrappedTypeObject();
    public void Skip();
    protected void SetToken(JsonToken newToken);
    protected void SetToken(JsonToken newToken, object value);
    protected void SetToken(JsonToken newToken, object value, bool updateIndex);
    internal void SetPostValueState(bool updateIndex);
    private void UpdateScopeWithFinishedValue();
    private void ValidateEnd(JsonToken endToken);
    protected void SetStateBasedOnCurrent();
    private void SetFinished();
    private JsonContainerType GetTypeForCloseToken(JsonToken token);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual void Close();
    internal void ReadAndAssert();
    internal void ReadForTypeAndAssert(JsonContract contract, bool hasConverter);
    internal bool ReadForType(JsonContract contract, bool hasConverter);
    internal bool ReadAndMoveToContent();
    internal bool MoveToContent();
    private JsonToken GetContentToken();
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.JsonReaderException : JsonException {
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public int LineNumber { get; }
    public int LinePosition { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public string Path { get; }
    public JsonReaderException(string message);
    public JsonReaderException(string message, Exception innerException);
    public JsonReaderException(SerializationInfo info, StreamingContext context);
    public JsonReaderException(string message, string path, int lineNumber, int linePosition, Exception innerException);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [CompilerGeneratedAttribute]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public string get_Path();
    internal static JsonReaderException Create(JsonReader reader, string message);
    internal static JsonReaderException Create(JsonReader reader, string message, Exception ex);
    internal static JsonReaderException Create(IJsonLineInfo lineInfo, string path, string message, Exception ex);
}
[AttributeUsageAttribute("384")]
internal class Newtonsoft.Json.JsonRequiredAttribute : Attribute {
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.JsonSerializationException : JsonException {
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private string <Path>k__BackingField;
    public int LineNumber { get; }
    public int LinePosition { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public string Path { get; }
    public JsonSerializationException(string message);
    public JsonSerializationException(string message, Exception innerException);
    public JsonSerializationException(SerializationInfo info, StreamingContext context);
    public JsonSerializationException(string message, string path, int lineNumber, int linePosition, Exception innerException);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [CompilerGeneratedAttribute]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public string get_Path();
    internal static JsonSerializationException Create(JsonReader reader, string message);
    internal static JsonSerializationException Create(JsonReader reader, string message, Exception ex);
    internal static JsonSerializationException Create(IJsonLineInfo lineInfo, string path, string message, Exception ex);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.JsonSerializer : object {
    internal TypeNameHandling _typeNameHandling;
    internal TypeNameAssemblyFormatHandling _typeNameAssemblyFormatHandling;
    internal PreserveReferencesHandling _preserveReferencesHandling;
    internal ReferenceLoopHandling _referenceLoopHandling;
    internal MissingMemberHandling _missingMemberHandling;
    internal ObjectCreationHandling _objectCreationHandling;
    internal NullValueHandling _nullValueHandling;
    internal DefaultValueHandling _defaultValueHandling;
    internal ConstructorHandling _constructorHandling;
    internal MetadataPropertyHandling _metadataPropertyHandling;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
internal JsonConverterCollection _converters;
    internal IContractResolver _contractResolver;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
internal ITraceWriter _traceWriter;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
internal IEqualityComparer _equalityComparer;
    internal ISerializationBinder _serializationBinder;
    internal StreamingContext _context;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private IReferenceResolver _referenceResolver;
    private Nullable`1<Formatting> _formatting;
    private Nullable`1<DateFormatHandling> _dateFormatHandling;
    private Nullable`1<DateTimeZoneHandling> _dateTimeZoneHandling;
    private Nullable`1<DateParseHandling> _dateParseHandling;
    private Nullable`1<FloatFormatHandling> _floatFormatHandling;
    private Nullable`1<FloatParseHandling> _floatParseHandling;
    private Nullable`1<StringEscapeHandling> _stringEscapeHandling;
    private CultureInfo _culture;
    private Nullable`1<int> _maxDepth;
    private bool _maxDepthSet;
    private Nullable`1<bool> _checkAdditionalContent;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private string _dateFormatString;
    private bool _dateFormatStringSet;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ErrorEventArgs> Error;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public IReferenceResolver ReferenceResolver { get; public set; }
    [ObsoleteAttribute("Binder is obsolete. Use SerializationBinder instead.")]
public SerializationBinder Binder { get; public set; }
    public ISerializationBinder SerializationBinder { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public ITraceWriter TraceWriter { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public IEqualityComparer EqualityComparer { get; public set; }
    public TypeNameHandling TypeNameHandling { get; public set; }
    [ObsoleteAttribute("TypeNameAssemblyFormat is obsolete. Use TypeNameAssemblyFormatHandling instead.")]
public FormatterAssemblyStyle TypeNameAssemblyFormat { get; public set; }
    public TypeNameAssemblyFormatHandling TypeNameAssemblyFormatHandling { get; public set; }
    public PreserveReferencesHandling PreserveReferencesHandling { get; public set; }
    public ReferenceLoopHandling ReferenceLoopHandling { get; public set; }
    public MissingMemberHandling MissingMemberHandling { get; public set; }
    public NullValueHandling NullValueHandling { get; public set; }
    public DefaultValueHandling DefaultValueHandling { get; public set; }
    public ObjectCreationHandling ObjectCreationHandling { get; public set; }
    public ConstructorHandling ConstructorHandling { get; public set; }
    public MetadataPropertyHandling MetadataPropertyHandling { get; public set; }
    public JsonConverterCollection Converters { get; }
    public IContractResolver ContractResolver { get; public set; }
    public StreamingContext Context { get; public set; }
    public Formatting Formatting { get; public set; }
    public DateFormatHandling DateFormatHandling { get; public set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public DateParseHandling DateParseHandling { get; public set; }
    public FloatParseHandling FloatParseHandling { get; public set; }
    public FloatFormatHandling FloatFormatHandling { get; public set; }
    public StringEscapeHandling StringEscapeHandling { get; public set; }
    public string DateFormatString { get; public set; }
    public CultureInfo Culture { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public bool CheckAdditionalContent { get; public set; }
    [CompilerGeneratedAttribute]
public virtual void add_Error(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_Error(EventHandler`1<ErrorEventArgs> value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual IReferenceResolver get_ReferenceResolver();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void set_ReferenceResolver(IReferenceResolver value);
    public virtual SerializationBinder get_Binder();
    public virtual void set_Binder(SerializationBinder value);
    public virtual ISerializationBinder get_SerializationBinder();
    public virtual void set_SerializationBinder(ISerializationBinder value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual ITraceWriter get_TraceWriter();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void set_TraceWriter(ITraceWriter value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual IEqualityComparer get_EqualityComparer();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void set_EqualityComparer(IEqualityComparer value);
    public virtual TypeNameHandling get_TypeNameHandling();
    public virtual void set_TypeNameHandling(TypeNameHandling value);
    public virtual FormatterAssemblyStyle get_TypeNameAssemblyFormat();
    public virtual void set_TypeNameAssemblyFormat(FormatterAssemblyStyle value);
    public virtual TypeNameAssemblyFormatHandling get_TypeNameAssemblyFormatHandling();
    public virtual void set_TypeNameAssemblyFormatHandling(TypeNameAssemblyFormatHandling value);
    public virtual PreserveReferencesHandling get_PreserveReferencesHandling();
    public virtual void set_PreserveReferencesHandling(PreserveReferencesHandling value);
    public virtual ReferenceLoopHandling get_ReferenceLoopHandling();
    public virtual void set_ReferenceLoopHandling(ReferenceLoopHandling value);
    public virtual MissingMemberHandling get_MissingMemberHandling();
    public virtual void set_MissingMemberHandling(MissingMemberHandling value);
    public virtual NullValueHandling get_NullValueHandling();
    public virtual void set_NullValueHandling(NullValueHandling value);
    public virtual DefaultValueHandling get_DefaultValueHandling();
    public virtual void set_DefaultValueHandling(DefaultValueHandling value);
    public virtual ObjectCreationHandling get_ObjectCreationHandling();
    public virtual void set_ObjectCreationHandling(ObjectCreationHandling value);
    public virtual ConstructorHandling get_ConstructorHandling();
    public virtual void set_ConstructorHandling(ConstructorHandling value);
    public virtual MetadataPropertyHandling get_MetadataPropertyHandling();
    public virtual void set_MetadataPropertyHandling(MetadataPropertyHandling value);
    public virtual JsonConverterCollection get_Converters();
    public virtual IContractResolver get_ContractResolver();
    public virtual void set_ContractResolver(IContractResolver value);
    public virtual StreamingContext get_Context();
    public virtual void set_Context(StreamingContext value);
    public virtual Formatting get_Formatting();
    public virtual void set_Formatting(Formatting value);
    public virtual DateFormatHandling get_DateFormatHandling();
    public virtual void set_DateFormatHandling(DateFormatHandling value);
    public virtual DateTimeZoneHandling get_DateTimeZoneHandling();
    public virtual void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public virtual DateParseHandling get_DateParseHandling();
    public virtual void set_DateParseHandling(DateParseHandling value);
    public virtual FloatParseHandling get_FloatParseHandling();
    public virtual void set_FloatParseHandling(FloatParseHandling value);
    public virtual FloatFormatHandling get_FloatFormatHandling();
    public virtual void set_FloatFormatHandling(FloatFormatHandling value);
    public virtual StringEscapeHandling get_StringEscapeHandling();
    public virtual void set_StringEscapeHandling(StringEscapeHandling value);
    public virtual string get_DateFormatString();
    public virtual void set_DateFormatString(string value);
    public virtual CultureInfo get_Culture();
    public virtual void set_Culture(CultureInfo value);
    public virtual Nullable`1<int> get_MaxDepth();
    public virtual void set_MaxDepth(Nullable`1<int> value);
    public virtual bool get_CheckAdditionalContent();
    public virtual void set_CheckAdditionalContent(bool value);
    internal bool IsCheckAdditionalContentSet();
    public static JsonSerializer Create();
    public static JsonSerializer Create(JsonSerializerSettings settings);
    public static JsonSerializer CreateDefault();
    public static JsonSerializer CreateDefault(JsonSerializerSettings settings);
    private static void ApplySerializerSettings(JsonSerializer serializer, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public void Populate(TextReader reader, object target);
    [DebuggerStepThroughAttribute]
public void Populate(JsonReader reader, object target);
    internal virtual void PopulateInternal(JsonReader reader, object target);
    [DebuggerStepThroughAttribute]
public object Deserialize(JsonReader reader);
    [DebuggerStepThroughAttribute]
public object Deserialize(TextReader reader, Type objectType);
    [DebuggerStepThroughAttribute]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public T Deserialize(JsonReader reader);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public object Deserialize(JsonReader reader, Type objectType);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal virtual object DeserializeInternal(JsonReader reader, Type objectType);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private void SetupReader(JsonReader reader, CultureInfo& previousCulture, Nullable`1& previousDateTimeZoneHandling, Nullable`1& previousDateParseHandling, Nullable`1& previousFloatParseHandling, Nullable`1& previousMaxDepth, String& previousDateFormatString);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private void ResetReader(JsonReader reader, CultureInfo previousCulture, Nullable`1<DateTimeZoneHandling> previousDateTimeZoneHandling, Nullable`1<DateParseHandling> previousDateParseHandling, Nullable`1<FloatParseHandling> previousFloatParseHandling, Nullable`1<int> previousMaxDepth, string previousDateFormatString);
    public void Serialize(TextWriter textWriter, object value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public void Serialize(JsonWriter jsonWriter, object value, Type objectType);
    public void Serialize(TextWriter textWriter, object value, Type objectType);
    public void Serialize(JsonWriter jsonWriter, object value);
    private TraceJsonReader CreateTraceJsonReader(JsonReader reader);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal virtual void SerializeInternal(JsonWriter jsonWriter, object value, Type objectType);
    internal IReferenceResolver GetReferenceResolver();
    internal JsonConverter GetMatchingConverter(Type type);
    internal static JsonConverter GetMatchingConverter(IList`1<JsonConverter> converters, Type objectType);
    internal void OnError(ErrorEventArgs e);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal class Newtonsoft.Json.JsonSerializerSettings : object {
    internal static ReferenceLoopHandling DefaultReferenceLoopHandling;
    internal static MissingMemberHandling DefaultMissingMemberHandling;
    internal static NullValueHandling DefaultNullValueHandling;
    internal static DefaultValueHandling DefaultDefaultValueHandling;
    internal static ObjectCreationHandling DefaultObjectCreationHandling;
    internal static PreserveReferencesHandling DefaultPreserveReferencesHandling;
    internal static ConstructorHandling DefaultConstructorHandling;
    internal static TypeNameHandling DefaultTypeNameHandling;
    internal static MetadataPropertyHandling DefaultMetadataPropertyHandling;
    internal static StreamingContext DefaultContext;
    internal static Formatting DefaultFormatting;
    internal static DateFormatHandling DefaultDateFormatHandling;
    internal static DateTimeZoneHandling DefaultDateTimeZoneHandling;
    internal static DateParseHandling DefaultDateParseHandling;
    internal static FloatParseHandling DefaultFloatParseHandling;
    internal static FloatFormatHandling DefaultFloatFormatHandling;
    internal static StringEscapeHandling DefaultStringEscapeHandling;
    internal static TypeNameAssemblyFormatHandling DefaultTypeNameAssemblyFormatHandling;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
internal static CultureInfo DefaultCulture;
    internal static bool DefaultCheckAdditionalContent;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
internal static string DefaultDateFormatString;
    internal static int DefaultMaxDepth;
    internal Nullable`1<Formatting> _formatting;
    internal Nullable`1<DateFormatHandling> _dateFormatHandling;
    internal Nullable`1<DateTimeZoneHandling> _dateTimeZoneHandling;
    internal Nullable`1<DateParseHandling> _dateParseHandling;
    internal Nullable`1<FloatFormatHandling> _floatFormatHandling;
    internal Nullable`1<FloatParseHandling> _floatParseHandling;
    internal Nullable`1<StringEscapeHandling> _stringEscapeHandling;
    internal CultureInfo _culture;
    internal Nullable`1<bool> _checkAdditionalContent;
    internal Nullable`1<int> _maxDepth;
    internal bool _maxDepthSet;
    internal string _dateFormatString;
    internal bool _dateFormatStringSet;
    internal Nullable`1<TypeNameAssemblyFormatHandling> _typeNameAssemblyFormatHandling;
    internal Nullable`1<DefaultValueHandling> _defaultValueHandling;
    internal Nullable`1<PreserveReferencesHandling> _preserveReferencesHandling;
    internal Nullable`1<NullValueHandling> _nullValueHandling;
    internal Nullable`1<ObjectCreationHandling> _objectCreationHandling;
    internal Nullable`1<MissingMemberHandling> _missingMemberHandling;
    internal Nullable`1<ReferenceLoopHandling> _referenceLoopHandling;
    internal Nullable`1<StreamingContext> _context;
    internal Nullable`1<ConstructorHandling> _constructorHandling;
    internal Nullable`1<TypeNameHandling> _typeNameHandling;
    internal Nullable`1<MetadataPropertyHandling> _metadataPropertyHandling;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IList`1<JsonConverter> <Converters>k__BackingField;
    [CompilerGeneratedAttribute]
private IContractResolver <ContractResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IEqualityComparer <EqualityComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IReferenceResolver> <ReferenceResolverProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ITraceWriter <TraceWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private ISerializationBinder <SerializationBinder>k__BackingField;
    [CompilerGeneratedAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private EventHandler`1<ErrorEventArgs> <Error>k__BackingField;
    public ReferenceLoopHandling ReferenceLoopHandling { get; public set; }
    public MissingMemberHandling MissingMemberHandling { get; public set; }
    public ObjectCreationHandling ObjectCreationHandling { get; public set; }
    public NullValueHandling NullValueHandling { get; public set; }
    public DefaultValueHandling DefaultValueHandling { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
public IList`1<JsonConverter> Converters { get; public set; }
    public PreserveReferencesHandling PreserveReferencesHandling { get; public set; }
    public TypeNameHandling TypeNameHandling { get; public set; }
    public MetadataPropertyHandling MetadataPropertyHandling { get; public set; }
    [ObsoleteAttribute("TypeNameAssemblyFormat is obsolete. Use TypeNameAssemblyFormatHandling instead.")]
public FormatterAssemblyStyle TypeNameAssemblyFormat { get; public set; }
    public TypeNameAssemblyFormatHandling TypeNameAssemblyFormatHandling { get; public set; }
    public ConstructorHandling ConstructorHandling { get; public set; }
    public IContractResolver ContractResolver { get; public set; }
    public IEqualityComparer EqualityComparer { get; public set; }
    [ObsoleteAttribute("ReferenceResolver property is obsolete. Use the ReferenceResolverProvider property to set the IReferenceResolver: settings.ReferenceResolverProvider = () => resolver")]
public IReferenceResolver ReferenceResolver { get; public set; }
    public Func`1<IReferenceResolver> ReferenceResolverProvider { get; public set; }
    public ITraceWriter TraceWriter { get; public set; }
    [ObsoleteAttribute("Binder is obsolete. Use SerializationBinder instead.")]
public SerializationBinder Binder { get; public set; }
    public ISerializationBinder SerializationBinder { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EventHandler`1<ErrorEventArgs> Error { get; public set; }
    public StreamingContext Context { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
public string DateFormatString { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public Formatting Formatting { get; public set; }
    public DateFormatHandling DateFormatHandling { get; public set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public DateParseHandling DateParseHandling { get; public set; }
    public FloatFormatHandling FloatFormatHandling { get; public set; }
    public FloatParseHandling FloatParseHandling { get; public set; }
    public StringEscapeHandling StringEscapeHandling { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
public CultureInfo Culture { get; public set; }
    public bool CheckAdditionalContent { get; public set; }
    private static JsonSerializerSettings();
    public ReferenceLoopHandling get_ReferenceLoopHandling();
    public void set_ReferenceLoopHandling(ReferenceLoopHandling value);
    public MissingMemberHandling get_MissingMemberHandling();
    public void set_MissingMemberHandling(MissingMemberHandling value);
    public ObjectCreationHandling get_ObjectCreationHandling();
    public void set_ObjectCreationHandling(ObjectCreationHandling value);
    public NullValueHandling get_NullValueHandling();
    public void set_NullValueHandling(NullValueHandling value);
    public DefaultValueHandling get_DefaultValueHandling();
    public void set_DefaultValueHandling(DefaultValueHandling value);
    [CompilerGeneratedAttribute]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public IList`1<JsonConverter> get_Converters();
    [CompilerGeneratedAttribute]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public void set_Converters(IList`1<JsonConverter> value);
    public PreserveReferencesHandling get_PreserveReferencesHandling();
    public void set_PreserveReferencesHandling(PreserveReferencesHandling value);
    public TypeNameHandling get_TypeNameHandling();
    public void set_TypeNameHandling(TypeNameHandling value);
    public MetadataPropertyHandling get_MetadataPropertyHandling();
    public void set_MetadataPropertyHandling(MetadataPropertyHandling value);
    public FormatterAssemblyStyle get_TypeNameAssemblyFormat();
    public void set_TypeNameAssemblyFormat(FormatterAssemblyStyle value);
    public TypeNameAssemblyFormatHandling get_TypeNameAssemblyFormatHandling();
    public void set_TypeNameAssemblyFormatHandling(TypeNameAssemblyFormatHandling value);
    public ConstructorHandling get_ConstructorHandling();
    public void set_ConstructorHandling(ConstructorHandling value);
    [CompilerGeneratedAttribute]
public IContractResolver get_ContractResolver();
    [CompilerGeneratedAttribute]
public void set_ContractResolver(IContractResolver value);
    [CompilerGeneratedAttribute]
public IEqualityComparer get_EqualityComparer();
    [CompilerGeneratedAttribute]
public void set_EqualityComparer(IEqualityComparer value);
    public IReferenceResolver get_ReferenceResolver();
    public void set_ReferenceResolver(IReferenceResolver value);
    [CompilerGeneratedAttribute]
public Func`1<IReferenceResolver> get_ReferenceResolverProvider();
    [CompilerGeneratedAttribute]
public void set_ReferenceResolverProvider(Func`1<IReferenceResolver> value);
    [CompilerGeneratedAttribute]
public ITraceWriter get_TraceWriter();
    [CompilerGeneratedAttribute]
public void set_TraceWriter(ITraceWriter value);
    public SerializationBinder get_Binder();
    public void set_Binder(SerializationBinder value);
    [CompilerGeneratedAttribute]
public ISerializationBinder get_SerializationBinder();
    [CompilerGeneratedAttribute]
public void set_SerializationBinder(ISerializationBinder value);
    [CompilerGeneratedAttribute]
public EventHandler`1<ErrorEventArgs> get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(EventHandler`1<ErrorEventArgs> value);
    public StreamingContext get_Context();
    public void set_Context(StreamingContext value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public string get_DateFormatString();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public void set_DateFormatString(string value);
    public Nullable`1<int> get_MaxDepth();
    public void set_MaxDepth(Nullable`1<int> value);
    public Formatting get_Formatting();
    public void set_Formatting(Formatting value);
    public DateFormatHandling get_DateFormatHandling();
    public void set_DateFormatHandling(DateFormatHandling value);
    public DateTimeZoneHandling get_DateTimeZoneHandling();
    public void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public DateParseHandling get_DateParseHandling();
    public void set_DateParseHandling(DateParseHandling value);
    public FloatFormatHandling get_FloatFormatHandling();
    public void set_FloatFormatHandling(FloatFormatHandling value);
    public FloatParseHandling get_FloatParseHandling();
    public void set_FloatParseHandling(FloatParseHandling value);
    public StringEscapeHandling get_StringEscapeHandling();
    public void set_StringEscapeHandling(StringEscapeHandling value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public CultureInfo get_Culture();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public void set_Culture(CultureInfo value);
    public bool get_CheckAdditionalContent();
    public void set_CheckAdditionalContent(bool value);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.JsonTextReader : JsonReader {
    private bool _safeAsync;
    private static char UnicodeReplacementChar;
    private static int MaximumJavascriptIntegerCharacterLength;
    private static int LargeBufferLength;
    private TextReader _reader;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private Char[] _chars;
    private int _charsUsed;
    private int _charPos;
    private int _lineStartPos;
    private int _lineNumber;
    private bool _isEndOfFile;
    private StringBuffer _stringBuffer;
    private StringReference _stringReference;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private IArrayPool`1<char> _arrayPool;
    [CompilerGeneratedAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private JsonNameTable <PropertyNameTable>k__BackingField;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public JsonNameTable PropertyNameTable { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public IArrayPool`1<char> ArrayPool { get; public set; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public JsonTextReader(TextReader reader);
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    internal Task`1<bool> DoReadAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<DoReadAsync>d__3")]
private Task`1<bool> DoReadAsync(Task`1<bool> task, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParsePostValueAsync>d__4")]
private Task`1<bool> ParsePostValueAsync(bool ignoreComments, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ReadFromFinishedAsync>d__5")]
private Task`1<bool> ReadFromFinishedAsync(CancellationToken cancellationToken);
    private Task`1<int> ReadDataAsync(bool append, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ReadDataAsync>d__7")]
private Task`1<int> ReadDataAsync(bool append, int charsRequired, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParseValueAsync>d__8")]
private Task`1<bool> ParseValueAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ReadStringIntoBufferAsync>d__9")]
private Task ReadStringIntoBufferAsync(char quote, CancellationToken cancellationToken);
    private Task ProcessCarriageReturnAsync(bool append, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ProcessCarriageReturnAsync>d__11")]
private Task ProcessCarriageReturnAsync(Task`1<bool> task);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParseUnicodeAsync>d__12")]
private Task`1<char> ParseUnicodeAsync(CancellationToken cancellationToken);
    private Task`1<bool> EnsureCharsAsync(int relativePosition, bool append, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ReadCharsAsync>d__14")]
private Task`1<bool> ReadCharsAsync(int relativePosition, bool append, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParseObjectAsync>d__15")]
private Task`1<bool> ParseObjectAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParseCommentAsync>d__16")]
private Task ParseCommentAsync(bool setToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<EatWhitespaceAsync>d__17")]
private Task EatWhitespaceAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParseStringAsync>d__18")]
private Task ParseStringAsync(char quote, ReadType readType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<MatchValueAsync>d__19")]
private Task`1<bool> MatchValueAsync(string value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<MatchValueWithTrailingSeparatorAsync>d__20")]
private Task`1<bool> MatchValueWithTrailingSeparatorAsync(string value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<MatchAndSetAsync>d__21")]
private Task MatchAndSetAsync(string value, JsonToken newToken, object tokenValue, CancellationToken cancellationToken);
    private Task ParseTrueAsync(CancellationToken cancellationToken);
    private Task ParseFalseAsync(CancellationToken cancellationToken);
    private Task ParseNullAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParseConstructorAsync>d__25")]
private Task ParseConstructorAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParseNumberNaNAsync>d__26")]
private Task`1<object> ParseNumberNaNAsync(ReadType readType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParseNumberPositiveInfinityAsync>d__27")]
private Task`1<object> ParseNumberPositiveInfinityAsync(ReadType readType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParseNumberNegativeInfinityAsync>d__28")]
private Task`1<object> ParseNumberNegativeInfinityAsync(ReadType readType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParseNumberAsync>d__29")]
private Task ParseNumberAsync(ReadType readType, CancellationToken cancellationToken);
    private Task ParseUndefinedAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParsePropertyAsync>d__31")]
private Task`1<bool> ParsePropertyAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ReadNumberIntoBufferAsync>d__32")]
private Task ReadNumberIntoBufferAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParseUnquotedPropertyAsync>d__33")]
private Task ParseUnquotedPropertyAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ReadNullCharAsync>d__34")]
private Task`1<bool> ReadNullCharAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<HandleNullAsync>d__35")]
private Task HandleNullAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ReadFinishedAsync>d__36")]
private Task ReadFinishedAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ReadStringValueAsync>d__37")]
private Task`1<object> ReadStringValueAsync(ReadType readType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ReadNumberValueAsync>d__38")]
private Task`1<object> ReadNumberValueAsync(ReadType readType, CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<bool>> ReadAsBooleanAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<DoReadAsBooleanAsync>d__40")]
internal Task`1<Nullable`1<bool>> DoReadAsBooleanAsync(CancellationToken cancellationToken);
    public virtual Task`1<Byte[]> ReadAsBytesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<DoReadAsBytesAsync>d__42")]
internal Task`1<Byte[]> DoReadAsBytesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ReadIntoWrappedTypeObjectAsync>d__43")]
private Task ReadIntoWrappedTypeObjectAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<DateTime>> ReadAsDateTimeAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<DoReadAsDateTimeAsync>d__45")]
internal Task`1<Nullable`1<DateTime>> DoReadAsDateTimeAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<DateTimeOffset>> ReadAsDateTimeOffsetAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<DoReadAsDateTimeOffsetAsync>d__47")]
internal Task`1<Nullable`1<DateTimeOffset>> DoReadAsDateTimeOffsetAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<decimal>> ReadAsDecimalAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<DoReadAsDecimalAsync>d__49")]
internal Task`1<Nullable`1<decimal>> DoReadAsDecimalAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<double>> ReadAsDoubleAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<DoReadAsDoubleAsync>d__51")]
internal Task`1<Nullable`1<double>> DoReadAsDoubleAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<int>> ReadAsInt32Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<DoReadAsInt32Async>d__53")]
internal Task`1<Nullable`1<int>> DoReadAsInt32Async(CancellationToken cancellationToken);
    public virtual Task`1<string> ReadAsStringAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<DoReadAsStringAsync>d__55")]
internal Task`1<string> DoReadAsStringAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public JsonNameTable get_PropertyNameTable();
    [CompilerGeneratedAttribute]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public void set_PropertyNameTable(JsonNameTable value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public IArrayPool`1<char> get_ArrayPool();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public void set_ArrayPool(IArrayPool`1<char> value);
    private void EnsureBufferNotEmpty();
    private void SetNewLine(bool hasNextChar);
    private void OnNewLine(int pos);
    private void ParseString(char quote, ReadType readType);
    private void ParseReadString(char quote, ReadType readType);
    private static void BlockCopyChars(Char[] src, int srcOffset, Char[] dst, int dstOffset, int count);
    private void ShiftBufferIfNeeded();
    private int ReadData(bool append);
    private void PrepareBufferForReadData(bool append, int charsRequired);
    private int ReadData(bool append, int charsRequired);
    private bool EnsureChars(int relativePosition, bool append);
    private bool ReadChars(int relativePosition, bool append);
    public virtual bool Read();
    public virtual Nullable`1<int> ReadAsInt32();
    public virtual Nullable`1<DateTime> ReadAsDateTime();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual string ReadAsString();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual Byte[] ReadAsBytes();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private object ReadStringValue(ReadType readType);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private object FinishReadQuotedStringValue(ReadType readType);
    private JsonReaderException CreateUnexpectedCharacterException(char c);
    public virtual Nullable`1<bool> ReadAsBoolean();
    private void ProcessValueComma();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private object ReadNumberValue(ReadType readType);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private object FinishReadQuotedNumber(ReadType readType);
    public virtual Nullable`1<DateTimeOffset> ReadAsDateTimeOffset();
    public virtual Nullable`1<decimal> ReadAsDecimal();
    public virtual Nullable`1<double> ReadAsDouble();
    private void HandleNull();
    private void ReadFinished();
    private bool ReadNullChar();
    private void EnsureBuffer();
    private void ReadStringIntoBuffer(char quote);
    private void FinishReadStringIntoBuffer(int charPos, int initialPosition, int lastWritePosition);
    private void WriteCharToBuffer(char writeChar, int lastWritePosition, int writeToPosition);
    private char ConvertUnicode(bool enoughChars);
    private char ParseUnicode();
    private void ReadNumberIntoBuffer();
    private bool ReadNumberCharIntoBuffer(char currentChar, int charPos);
    private void ClearRecentString();
    private bool ParsePostValue(bool ignoreComments);
    private bool ParseObject();
    private bool ParseProperty();
    private bool ValidIdentifierChar(char value);
    private void ParseUnquotedProperty();
    private bool ReadUnquotedPropertyReportIfDone(char currentChar, int initialPosition);
    private bool ParseValue();
    private void ProcessLineFeed();
    private void ProcessCarriageReturn(bool append);
    private void EatWhitespace();
    private void ParseConstructor();
    private void ParseNumber(ReadType readType);
    private void ParseReadNumber(ReadType readType, char firstChar, int initialPosition);
    private JsonReaderException ThrowReaderError(string message, Exception ex);
    private static object BigIntegerParse(string number, CultureInfo culture);
    private void ParseComment(bool setToken);
    private void EndComment(bool setToken, int initialPosition, int endPosition);
    private bool MatchValue(string value);
    private bool MatchValue(bool enoughChars, string value);
    private bool MatchValueWithTrailingSeparator(string value);
    private bool IsSeparator(char c);
    private void ParseTrue();
    private void ParseNull();
    private void ParseUndefined();
    private void ParseFalse();
    private object ParseNumberNegativeInfinity(ReadType readType);
    private object ParseNumberNegativeInfinity(ReadType readType, bool matched);
    private object ParseNumberPositiveInfinity(ReadType readType);
    private object ParseNumberPositiveInfinity(ReadType readType, bool matched);
    private object ParseNumberNaN(ReadType readType);
    private object ParseNumberNaN(ReadType readType, bool matched);
    public virtual void Close();
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.JsonTextWriter : JsonWriter {
    private bool _safeAsync;
    private static int IndentCharBufferSize;
    private TextWriter _writer;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private Base64Encoder _base64Encoder;
    private char _indentChar;
    private int _indentation;
    private char _quoteChar;
    private bool _quoteName;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private Boolean[] _charEscapeFlags;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private Char[] _writeBuffer;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private IArrayPool`1<char> _arrayPool;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private Char[] _indentChars;
    private Base64Encoder Base64Encoder { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public IArrayPool`1<char> ArrayPool { get; public set; }
    public int Indentation { get; public set; }
    public char QuoteChar { get; public set; }
    public char IndentChar { get; public set; }
    public bool QuoteName { get; public set; }
    public JsonTextWriter(TextWriter textWriter);
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    internal Task DoFlushAsync(CancellationToken cancellationToken);
    protected virtual Task WriteValueDelimiterAsync(CancellationToken cancellationToken);
    internal Task DoWriteValueDelimiterAsync(CancellationToken cancellationToken);
    protected virtual Task WriteEndAsync(JsonToken token, CancellationToken cancellationToken);
    internal Task DoWriteEndAsync(JsonToken token, CancellationToken cancellationToken);
    public virtual Task CloseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoCloseAsync>d__8")]
internal Task DoCloseAsync(CancellationToken cancellationToken);
    public virtual Task WriteEndAsync(CancellationToken cancellationToken);
    protected virtual Task WriteIndentAsync(CancellationToken cancellationToken);
    internal Task DoWriteIndentAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<WriteIndentAsync>d__12")]
private Task WriteIndentAsync(int currentIndentCount, int newLineLen, CancellationToken cancellationToken);
    private Task WriteValueInternalAsync(JsonToken token, string value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<WriteValueInternalAsync>d__14")]
private Task WriteValueInternalAsync(Task task, string value, CancellationToken cancellationToken);
    protected virtual Task WriteIndentSpaceAsync(CancellationToken cancellationToken);
    internal Task DoWriteIndentSpaceAsync(CancellationToken cancellationToken);
    public virtual Task WriteRawAsync(string json, CancellationToken cancellationToken);
    internal Task DoWriteRawAsync(string json, CancellationToken cancellationToken);
    public virtual Task WriteNullAsync(CancellationToken cancellationToken);
    internal Task DoWriteNullAsync(CancellationToken cancellationToken);
    private Task WriteDigitsAsync(ulong uvalue, bool negative, CancellationToken cancellationToken);
    private Task WriteIntegerValueAsync(ulong uvalue, bool negative, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<WriteIntegerValueAsync>d__23")]
private Task WriteIntegerValueAsync(Task task, ulong uvalue, bool negative, CancellationToken cancellationToken);
    internal Task WriteIntegerValueAsync(long value, CancellationToken cancellationToken);
    internal Task WriteIntegerValueAsync(ulong uvalue, CancellationToken cancellationToken);
    private Task WriteEscapedStringAsync(string value, bool quote, CancellationToken cancellationToken);
    public virtual Task WritePropertyNameAsync(string name, CancellationToken cancellationToken);
    internal Task DoWritePropertyNameAsync(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWritePropertyNameAsync>d__29")]
private Task DoWritePropertyNameAsync(Task task, string name, CancellationToken cancellationToken);
    public virtual Task WritePropertyNameAsync(string name, bool escape, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWritePropertyNameAsync>d__31")]
internal Task DoWritePropertyNameAsync(string name, bool escape, CancellationToken cancellationToken);
    public virtual Task WriteStartArrayAsync(CancellationToken cancellationToken);
    internal Task DoWriteStartArrayAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWriteStartArrayAsync>d__34")]
internal Task DoWriteStartArrayAsync(Task task, CancellationToken cancellationToken);
    public virtual Task WriteStartObjectAsync(CancellationToken cancellationToken);
    internal Task DoWriteStartObjectAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWriteStartObjectAsync>d__37")]
internal Task DoWriteStartObjectAsync(Task task, CancellationToken cancellationToken);
    public virtual Task WriteStartConstructorAsync(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWriteStartConstructorAsync>d__39")]
internal Task DoWriteStartConstructorAsync(string name, CancellationToken cancellationToken);
    public virtual Task WriteUndefinedAsync(CancellationToken cancellationToken);
    internal Task DoWriteUndefinedAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWriteUndefinedAsync>d__42")]
private Task DoWriteUndefinedAsync(Task task, CancellationToken cancellationToken);
    public virtual Task WriteWhitespaceAsync(string ws, CancellationToken cancellationToken);
    internal Task DoWriteWhitespaceAsync(string ws, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(bool value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(bool value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<bool> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<bool> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(byte value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<byte> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<byte> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Byte[] value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<WriteValueNonNullAsync>d__53")]
internal Task WriteValueNonNullAsync(Byte[] value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(char value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(char value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<char> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<char> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(DateTime value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWriteValueAsync>d__59")]
internal Task DoWriteValueAsync(DateTime value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<DateTime> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<DateTime> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(DateTimeOffset value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWriteValueAsync>d__63")]
internal Task DoWriteValueAsync(DateTimeOffset value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<DateTimeOffset> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<DateTimeOffset> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(decimal value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(decimal value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<decimal> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<decimal> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(double value, CancellationToken cancellationToken);
    internal Task WriteValueAsync(double value, bool nullable, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<double> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(float value, CancellationToken cancellationToken);
    internal Task WriteValueAsync(float value, bool nullable, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<float> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Guid value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWriteValueAsync>d__77")]
internal Task DoWriteValueAsync(Guid value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<Guid> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<Guid> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(int value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<int> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<int> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(long value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<long> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<long> value, CancellationToken cancellationToken);
    internal Task WriteValueAsync(BigInteger value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(object value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(sbyte value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<sbyte> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<sbyte> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(short value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<short> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<short> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(string value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(string value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWriteValueAsync>d__96")]
private Task DoWriteValueAsync(Task task, string value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(TimeSpan value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWriteValueAsync>d__98")]
internal Task DoWriteValueAsync(TimeSpan value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<TimeSpan> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<TimeSpan> value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(UInt32 value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<UInt32> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<UInt32> value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(ulong value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<ulong> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<ulong> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Uri value, CancellationToken cancellationToken);
    internal Task WriteValueNotNullAsync(Uri value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<WriteValueNotNullAsync>d__109")]
internal Task WriteValueNotNullAsync(Task task, Uri value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(ushort value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<ushort> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<ushort> value, CancellationToken cancellationToken);
    public virtual Task WriteCommentAsync(string text, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWriteCommentAsync>d__114")]
internal Task DoWriteCommentAsync(string text, CancellationToken cancellationToken);
    public virtual Task WriteEndArrayAsync(CancellationToken cancellationToken);
    public virtual Task WriteEndConstructorAsync(CancellationToken cancellationToken);
    public virtual Task WriteEndObjectAsync(CancellationToken cancellationToken);
    public virtual Task WriteRawValueAsync(string json, CancellationToken cancellationToken);
    internal Task DoWriteRawValueAsync(string json, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWriteRawValueAsync>d__120")]
private Task DoWriteRawValueAsync(Task task, string json, CancellationToken cancellationToken);
    internal Char[] EnsureWriteBuffer(int length, int copyTo);
    private Base64Encoder get_Base64Encoder();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public IArrayPool`1<char> get_ArrayPool();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public void set_ArrayPool(IArrayPool`1<char> value);
    public int get_Indentation();
    public void set_Indentation(int value);
    public char get_QuoteChar();
    public void set_QuoteChar(char value);
    public char get_IndentChar();
    public void set_IndentChar(char value);
    public bool get_QuoteName();
    public void set_QuoteName(bool value);
    public virtual void Flush();
    public virtual void Close();
    private void CloseBufferAndWriter();
    public virtual void WriteStartObject();
    public virtual void WriteStartArray();
    public virtual void WriteStartConstructor(string name);
    protected virtual void WriteEnd(JsonToken token);
    public virtual void WritePropertyName(string name);
    public virtual void WritePropertyName(string name, bool escape);
    internal virtual void OnStringEscapeHandlingChanged();
    private void UpdateCharEscapeFlags();
    protected virtual void WriteIndent();
    private int SetIndentChars();
    protected virtual void WriteValueDelimiter();
    protected virtual void WriteIndentSpace();
    private void WriteValueInternal(string value, JsonToken token);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void WriteValue(object value);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void WriteRaw(string json);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void WriteValue(string value);
    private void WriteEscapedString(string value, bool quote);
    public virtual void WriteValue(int value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(Nullable`1<float> value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(Nullable`1<double> value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    private int WriteValueToBuffer(DateTime value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(DateTimeOffset value);
    private int WriteValueToBuffer(DateTimeOffset value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(TimeSpan value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void WriteValue(Uri value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void WriteComment(string text);
    public virtual void WriteWhitespace(string ws);
    private void EnsureWriteBuffer();
    private void WriteIntegerValue(long value);
    private void WriteIntegerValue(ulong value, bool negative);
    private int WriteNumberToBuffer(ulong value, bool negative);
    private void WriteIntegerValue(int value);
    private void WriteIntegerValue(UInt32 value, bool negative);
    private int WriteNumberToBuffer(UInt32 value, bool negative);
}
internal enum Newtonsoft.Json.JsonToken : Enum {
    public int value__;
    public static JsonToken None;
    public static JsonToken StartObject;
    public static JsonToken StartArray;
    public static JsonToken StartConstructor;
    public static JsonToken PropertyName;
    public static JsonToken Comment;
    public static JsonToken Raw;
    public static JsonToken Integer;
    public static JsonToken Float;
    public static JsonToken String;
    public static JsonToken Boolean;
    public static JsonToken Null;
    public static JsonToken Undefined;
    public static JsonToken EndObject;
    public static JsonToken EndArray;
    public static JsonToken EndConstructor;
    public static JsonToken Date;
    public static JsonToken Bytes;
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.JsonValidatingReader : JsonReader {
    private JsonReader _reader;
    private Stack`1<SchemaScope> _stack;
    private JsonSchema _schema;
    private JsonSchemaModel _model;
    private SchemaScope _currentScope;
    [CompilerGeneratedAttribute]
private ValidationEventHandler ValidationEventHandler;
    private static IList`1<JsonSchemaModel> EmptySchemaList;
    public object Value { get; }
    public int Depth { get; }
    public string Path { get; }
    public char QuoteChar { get; protected internal set; }
    public JsonToken TokenType { get; }
    public Type ValueType { get; }
    private IList`1<JsonSchemaModel> CurrentSchemas { get; }
    private IList`1<JsonSchemaModel> CurrentMemberSchemas { get; }
    public JsonSchema Schema { get; public set; }
    public JsonReader Reader { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LineNumber { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LinePosition { get; }
    public JsonValidatingReader(JsonReader reader);
    private static JsonValidatingReader();
    [CompilerGeneratedAttribute]
public void add_ValidationEventHandler(ValidationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValidationEventHandler(ValidationEventHandler value);
    public virtual object get_Value();
    public virtual int get_Depth();
    public virtual string get_Path();
    public virtual char get_QuoteChar();
    protected internal virtual void set_QuoteChar(char value);
    public virtual JsonToken get_TokenType();
    public virtual Type get_ValueType();
    private void Push(SchemaScope scope);
    private SchemaScope Pop();
    private IList`1<JsonSchemaModel> get_CurrentSchemas();
    private IList`1<JsonSchemaModel> get_CurrentMemberSchemas();
    private void RaiseError(string message, JsonSchemaModel schema);
    private void OnValidationEvent(JsonSchemaException exception);
    public JsonSchema get_Schema();
    public void set_Schema(JsonSchema value);
    public JsonReader get_Reader();
    public virtual void Close();
    private void ValidateNotDisallowed(JsonSchemaModel schema);
    private Nullable`1<JsonSchemaType> GetCurrentNodeSchemaType();
    public virtual Nullable`1<int> ReadAsInt32();
    public virtual Byte[] ReadAsBytes();
    public virtual Nullable`1<decimal> ReadAsDecimal();
    public virtual Nullable`1<double> ReadAsDouble();
    public virtual Nullable`1<bool> ReadAsBoolean();
    public virtual string ReadAsString();
    public virtual Nullable`1<DateTime> ReadAsDateTime();
    public virtual Nullable`1<DateTimeOffset> ReadAsDateTimeOffset();
    public virtual bool Read();
    private void ValidateCurrentToken();
    private void WriteToken(IList`1<JsonSchemaModel> schemas);
    private void ValidateEndObject(JsonSchemaModel schema);
    private void ValidateEndArray(JsonSchemaModel schema);
    private void ValidateNull(JsonSchemaModel schema);
    private void ValidateBoolean(JsonSchemaModel schema);
    private void ValidateString(JsonSchemaModel schema);
    private void ValidateInteger(JsonSchemaModel schema);
    private void ProcessValue();
    private void ValidateFloat(JsonSchemaModel schema);
    private static double FloatingPointRemainder(double dividend, double divisor);
    private static bool IsZero(double value);
    private void ValidatePropertyName(JsonSchemaModel schema);
    private bool IsPropertyDefinied(JsonSchemaModel schema, string propertyName);
    private bool ValidateArray(JsonSchemaModel schema);
    private bool ValidateObject(JsonSchemaModel schema);
    private bool TestType(JsonSchemaModel currentSchema, JsonSchemaType currentType);
    private sealed virtual override bool Newtonsoft.Json.IJsonLineInfo.HasLineInfo();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LineNumber();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LinePosition();
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal abstract class Newtonsoft.Json.JsonWriter : object {
    private static State[][] StateArray;
    internal static State[][] StateArrayTemplate;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private List`1<JsonPosition> _stack;
    private JsonPosition _currentPosition;
    private State _currentState;
    private Formatting _formatting;
    [CompilerGeneratedAttribute]
private bool <CloseOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoCompleteOnClose>k__BackingField;
    private DateFormatHandling _dateFormatHandling;
    private DateTimeZoneHandling _dateTimeZoneHandling;
    private StringEscapeHandling _stringEscapeHandling;
    private FloatFormatHandling _floatFormatHandling;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private string _dateFormatString;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private CultureInfo _culture;
    public bool CloseOutput { get; public set; }
    public bool AutoCompleteOnClose { get; public set; }
    protected internal int Top { get; }
    public WriteState WriteState { get; }
    internal string ContainerPath { get; }
    public string Path { get; }
    public Formatting Formatting { get; public set; }
    public DateFormatHandling DateFormatHandling { get; public set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public StringEscapeHandling StringEscapeHandling { get; public set; }
    public FloatFormatHandling FloatFormatHandling { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public string DateFormatString { get; public set; }
    public CultureInfo Culture { get; public set; }
    private static JsonWriter();
    internal Task AutoCompleteAsync(JsonToken tokenBeingWritten, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonWriter/<AutoCompleteAsync>d__1")]
private Task AutoCompleteAsync(CancellationToken cancellationToken);
    public virtual Task CloseAsync(CancellationToken cancellationToken);
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    protected virtual Task WriteEndAsync(JsonToken token, CancellationToken cancellationToken);
    protected virtual Task WriteIndentAsync(CancellationToken cancellationToken);
    protected virtual Task WriteValueDelimiterAsync(CancellationToken cancellationToken);
    protected virtual Task WriteIndentSpaceAsync(CancellationToken cancellationToken);
    public virtual Task WriteRawAsync(string json, CancellationToken cancellationToken);
    public virtual Task WriteEndAsync(CancellationToken cancellationToken);
    internal Task WriteEndInternalAsync(CancellationToken cancellationToken);
    internal Task InternalWriteEndAsync(JsonContainerType type, CancellationToken cancellationToken);
    public virtual Task WriteEndArrayAsync(CancellationToken cancellationToken);
    public virtual Task WriteEndConstructorAsync(CancellationToken cancellationToken);
    public virtual Task WriteEndObjectAsync(CancellationToken cancellationToken);
    public virtual Task WriteNullAsync(CancellationToken cancellationToken);
    public virtual Task WritePropertyNameAsync(string name, CancellationToken cancellationToken);
    public virtual Task WritePropertyNameAsync(string name, bool escape, CancellationToken cancellationToken);
    internal Task InternalWritePropertyNameAsync(string name, CancellationToken cancellationToken);
    public virtual Task WriteStartArrayAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonWriter/<InternalWriteStartAsync>d__20")]
internal Task InternalWriteStartAsync(JsonToken token, JsonContainerType container, CancellationToken cancellationToken);
    public virtual Task WriteCommentAsync(string text, CancellationToken cancellationToken);
    internal Task InternalWriteCommentAsync(CancellationToken cancellationToken);
    public virtual Task WriteRawValueAsync(string json, CancellationToken cancellationToken);
    public virtual Task WriteStartConstructorAsync(string name, CancellationToken cancellationToken);
    public virtual Task WriteStartObjectAsync(CancellationToken cancellationToken);
    public Task WriteTokenAsync(JsonReader reader, CancellationToken cancellationToken);
    public Task WriteTokenAsync(JsonReader reader, bool writeChildren, CancellationToken cancellationToken);
    public Task WriteTokenAsync(JsonToken token, CancellationToken cancellationToken);
    public Task WriteTokenAsync(JsonToken token, object value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonWriter/<WriteTokenAsync>d__30")]
internal virtual Task WriteTokenAsync(JsonReader reader, bool writeChildren, bool writeDateConstructorAsDate, bool writeComments, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonWriter/<WriteTokenSyncReadingAsync>d__31")]
internal Task WriteTokenSyncReadingAsync(JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonWriter/<WriteConstructorDateAsync>d__32")]
private Task WriteConstructorDateAsync(JsonReader reader, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(bool value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<bool> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(byte value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<byte> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Byte[] value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(char value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<char> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(DateTime value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<DateTime> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(DateTimeOffset value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<DateTimeOffset> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(decimal value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<decimal> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(double value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<double> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(float value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<float> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Guid value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<Guid> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(int value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<int> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(long value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<long> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(object value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(sbyte value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<sbyte> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(short value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<short> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(string value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(TimeSpan value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<TimeSpan> value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(UInt32 value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<UInt32> value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(ulong value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<ulong> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Uri value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(ushort value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<ushort> value, CancellationToken cancellationToken);
    public virtual Task WriteUndefinedAsync(CancellationToken cancellationToken);
    public virtual Task WriteWhitespaceAsync(string ws, CancellationToken cancellationToken);
    internal Task InternalWriteValueAsync(JsonToken token, CancellationToken cancellationToken);
    protected Task SetWriteStateAsync(JsonToken token, object value, CancellationToken cancellationToken);
    internal static Task WriteValueAsync(JsonWriter writer, PrimitiveTypeCode typeCode, object value, CancellationToken cancellationToken);
    internal static State[][] BuildStateArray();
    [CompilerGeneratedAttribute]
public bool get_CloseOutput();
    [CompilerGeneratedAttribute]
public void set_CloseOutput(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoCompleteOnClose();
    [CompilerGeneratedAttribute]
public void set_AutoCompleteOnClose(bool value);
    protected internal int get_Top();
    public WriteState get_WriteState();
    internal string get_ContainerPath();
    public string get_Path();
    public Formatting get_Formatting();
    public void set_Formatting(Formatting value);
    public DateFormatHandling get_DateFormatHandling();
    public void set_DateFormatHandling(DateFormatHandling value);
    public DateTimeZoneHandling get_DateTimeZoneHandling();
    public void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public StringEscapeHandling get_StringEscapeHandling();
    public void set_StringEscapeHandling(StringEscapeHandling value);
    internal virtual void OnStringEscapeHandlingChanged();
    public FloatFormatHandling get_FloatFormatHandling();
    public void set_FloatFormatHandling(FloatFormatHandling value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public string get_DateFormatString();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public void set_DateFormatString(string value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    internal void UpdateScopeWithFinishedValue();
    private void Push(JsonContainerType value);
    private JsonContainerType Pop();
    private JsonContainerType Peek();
    public abstract virtual void Flush();
    public virtual void Close();
    public virtual void WriteStartObject();
    public virtual void WriteEndObject();
    public virtual void WriteStartArray();
    public virtual void WriteEndArray();
    public virtual void WriteStartConstructor(string name);
    public virtual void WriteEndConstructor();
    public virtual void WritePropertyName(string name);
    public virtual void WritePropertyName(string name, bool escape);
    public virtual void WriteEnd();
    public void WriteToken(JsonReader reader);
    public void WriteToken(JsonReader reader, bool writeChildren);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public void WriteToken(JsonToken token, object value);
    public void WriteToken(JsonToken token);
    internal virtual void WriteToken(JsonReader reader, bool writeChildren, bool writeDateConstructorAsDate, bool writeComments);
    private bool IsWriteTokenIncomplete(JsonReader reader, bool writeChildren, int initialDepth);
    private int CalculateWriteTokenInitialDepth(JsonReader reader);
    private int CalculateWriteTokenFinalDepth(JsonReader reader);
    private void WriteConstructorDate(JsonReader reader);
    private void WriteEnd(JsonContainerType type);
    private void AutoCompleteAll();
    private JsonToken GetCloseTokenForType(JsonContainerType type);
    private void AutoCompleteClose(JsonContainerType type);
    private int CalculateLevelsToComplete(JsonContainerType type);
    private void UpdateCurrentState();
    protected virtual void WriteEnd(JsonToken token);
    protected virtual void WriteIndent();
    protected virtual void WriteValueDelimiter();
    protected virtual void WriteIndentSpace();
    internal void AutoComplete(JsonToken tokenBeingWritten);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void WriteRaw(string json);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void WriteRawValue(string json);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void WriteValue(string value);
    public virtual void WriteValue(int value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Nullable`1<int> value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(Nullable`1<UInt32> value);
    public virtual void WriteValue(Nullable`1<long> value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(Nullable`1<ulong> value);
    public virtual void WriteValue(Nullable`1<float> value);
    public virtual void WriteValue(Nullable`1<double> value);
    public virtual void WriteValue(Nullable`1<bool> value);
    public virtual void WriteValue(Nullable`1<short> value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(Nullable`1<ushort> value);
    public virtual void WriteValue(Nullable`1<char> value);
    public virtual void WriteValue(Nullable`1<byte> value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(Nullable`1<sbyte> value);
    public virtual void WriteValue(Nullable`1<decimal> value);
    public virtual void WriteValue(Nullable`1<DateTime> value);
    public virtual void WriteValue(Nullable`1<DateTimeOffset> value);
    public virtual void WriteValue(Nullable`1<Guid> value);
    public virtual void WriteValue(Nullable`1<TimeSpan> value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void WriteValue(Byte[] value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void WriteValue(Uri value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void WriteValue(object value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void WriteComment(string text);
    public virtual void WriteWhitespace(string ws);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
    internal static void WriteValue(JsonWriter writer, PrimitiveTypeCode typeCode, object value);
    private static void ResolveConvertibleValue(IConvertible convertible, PrimitiveTypeCode& typeCode, Object& value);
    private static JsonWriterException CreateUnsupportedTypeException(JsonWriter writer, object value);
    protected void SetWriteState(JsonToken token, object value);
    internal void InternalWriteEnd(JsonContainerType container);
    internal void InternalWritePropertyName(string name);
    internal void InternalWriteRaw();
    internal void InternalWriteStart(JsonToken token, JsonContainerType container);
    internal void InternalWriteValue(JsonToken token);
    internal void InternalWriteWhitespace(string ws);
    internal void InternalWriteComment();
    [CompilerGeneratedAttribute]
[AsyncStateMachineAttribute("Newtonsoft.Json.JsonWriter/<<InternalWriteEndAsync>g__AwaitProperty|11_0>d")]
private Task <InternalWriteEndAsync>g__AwaitProperty|11_0(Task task, int LevelsToComplete, JsonToken token, CancellationToken CancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonWriter/<<InternalWriteEndAsync>g__AwaitIndent|11_1>d")]
[CompilerGeneratedAttribute]
private Task <InternalWriteEndAsync>g__AwaitIndent|11_1(Task task, int LevelsToComplete, JsonToken token, CancellationToken CancellationToken);
    [CompilerGeneratedAttribute]
[AsyncStateMachineAttribute("Newtonsoft.Json.JsonWriter/<<InternalWriteEndAsync>g__AwaitEnd|11_2>d")]
private Task <InternalWriteEndAsync>g__AwaitEnd|11_2(Task task, int LevelsToComplete, CancellationToken CancellationToken);
    [CompilerGeneratedAttribute]
[AsyncStateMachineAttribute("Newtonsoft.Json.JsonWriter/<<InternalWriteEndAsync>g__AwaitRemaining|11_3>d")]
private Task <InternalWriteEndAsync>g__AwaitRemaining|11_3(int LevelsToComplete, CancellationToken CancellationToken);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.JsonWriterException : JsonException {
    [CompilerGeneratedAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private string <Path>k__BackingField;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public string Path { get; }
    public JsonWriterException(string message);
    public JsonWriterException(string message, Exception innerException);
    public JsonWriterException(SerializationInfo info, StreamingContext context);
    public JsonWriterException(string message, string path, Exception innerException);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Path();
    internal static JsonWriterException Create(JsonWriter writer, string message, Exception ex);
    internal static JsonWriterException Create(string path, string message, Exception ex);
}
internal enum Newtonsoft.Json.Linq.CommentHandling : Enum {
    public int value__;
    public static CommentHandling Ignore;
    public static CommentHandling Load;
}
internal enum Newtonsoft.Json.Linq.DuplicatePropertyNameHandling : Enum {
    public int value__;
    public static DuplicatePropertyNameHandling Replace;
    public static DuplicatePropertyNameHandling Ignore;
    public static DuplicatePropertyNameHandling Error;
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[ExtensionAttribute]
internal static class Newtonsoft.Json.Linq.Extensions : object {
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Ancestors(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> AncestorsAndSelf(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Descendants(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> DescendantsAndSelf(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JProperty> Properties(IEnumerable`1<JObject> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Values(IEnumerable`1<JToken> source, object key);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Values(IEnumerable`1<JToken> source);
    [ExtensionAttribute]
public static IEnumerable`1<U> Values(IEnumerable`1<JToken> source, object key);
    [ExtensionAttribute]
public static IEnumerable`1<U> Values(IEnumerable`1<JToken> source);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[ExtensionAttribute]
public static U Value(IEnumerable`1<JToken> value);
    [ExtensionAttribute]
public static U Value(IEnumerable`1<T> value);
    [ExtensionAttribute]
[IteratorStateMachineAttribute("Newtonsoft.Json.Linq.Extensions/<Values>d__11`2")]
internal static IEnumerable`1<U> Values(IEnumerable`1<T> source, object key);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Children(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IEnumerable`1<U> Children(IEnumerable`1<T> source);
    [ExtensionAttribute]
[IteratorStateMachineAttribute("Newtonsoft.Json.Linq.Extensions/<Convert>d__14`2")]
internal static IEnumerable`1<U> Convert(IEnumerable`1<T> source);
    [ExtensionAttribute]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal static U Convert(T token);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> AsJEnumerable(IEnumerable`1<JToken> source);
    [ExtensionAttribute]
public static IJEnumerable`1<T> AsJEnumerable(IEnumerable`1<T> source);
}
[DefaultMemberAttribute("Item")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal interface Newtonsoft.Json.Linq.IJEnumerable`1 {
    public IJEnumerable`1<JToken> Item { get; }
    public abstract virtual IJEnumerable`1<JToken> get_Item(object key);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Newtonsoft.Json.Linq.JArray : JContainer {
    private List`1<JToken> _values;
    protected IList`1<JToken> ChildrenTokens { get; }
    public JTokenType Type { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public JToken Item { get; public set; }
    public JToken Item { get; public set; }
    public bool IsReadOnly { get; }
    public JArray(JArray other);
    public JArray(Object[] content);
    public JArray(object content);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JArray/<WriteToAsync>d__0")]
public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    public static Task`1<JArray> LoadAsync(JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JArray/<LoadAsync>d__2")]
public static Task`1<JArray> LoadAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    protected virtual IList`1<JToken> get_ChildrenTokens();
    public virtual JTokenType get_Type();
    internal virtual bool DeepEquals(JToken node);
    internal virtual JToken CloneToken();
    public static JArray Load(JsonReader reader);
    public static JArray Load(JsonReader reader, JsonLoadSettings settings);
    public static JArray Parse(string json);
    public static JArray Parse(string json, JsonLoadSettings settings);
    public static JArray FromObject(object o);
    public static JArray FromObject(object o, JsonSerializer jsonSerializer);
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    public virtual JToken get_Item(object key);
    public virtual void set_Item(object key, JToken value);
    public sealed virtual JToken get_Item(int index);
    public sealed virtual void set_Item(int index, JToken value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal virtual int IndexOfItem(JToken item);
    internal virtual void MergeItem(object content, JsonMergeSettings settings);
    public sealed virtual int IndexOf(JToken item);
    public sealed virtual void Insert(int index, JToken item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual IEnumerator`1<JToken> GetEnumerator();
    public sealed virtual void Add(JToken item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(JToken item);
    public sealed virtual void CopyTo(JToken[] array, int arrayIndex);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(JToken item);
    internal virtual int GetDeepHashCode();
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
internal class Newtonsoft.Json.Linq.JConstructor : JContainer {
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private string _name;
    private List`1<JToken> _values;
    protected IList`1<JToken> ChildrenTokens { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public string Name { get; public set; }
    public JTokenType Type { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public JToken Item { get; public set; }
    public JConstructor(JConstructor other);
    public JConstructor(string name, Object[] content);
    public JConstructor(string name, object content);
    public JConstructor(string name);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JConstructor/<WriteToAsync>d__0")]
public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    public static Task`1<JConstructor> LoadAsync(JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JConstructor/<LoadAsync>d__2")]
public static Task`1<JConstructor> LoadAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    protected virtual IList`1<JToken> get_ChildrenTokens();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal virtual int IndexOfItem(JToken item);
    internal virtual void MergeItem(object content, JsonMergeSettings settings);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public string get_Name();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public void set_Name(string value);
    public virtual JTokenType get_Type();
    internal virtual bool DeepEquals(JToken node);
    internal virtual JToken CloneToken();
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    public virtual JToken get_Item(object key);
    public virtual void set_Item(object key, JToken value);
    internal virtual int GetDeepHashCode();
    public static JConstructor Load(JsonReader reader);
    public static JConstructor Load(JsonReader reader, JsonLoadSettings settings);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal abstract class Newtonsoft.Json.Linq.JContainer : JToken {
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
internal ListChangedEventHandler _listChanged;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
internal AddingNewEventHandler _addingNew;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
internal NotifyCollectionChangedEventHandler _collectionChanged;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private object _syncRoot;
    private bool _busy;
    protected IList`1<JToken> ChildrenTokens { get; }
    public bool HasValues { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public JToken First { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public JToken Last { get; }
    private JToken System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.Item { get; private set; }
    private bool System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    internal JContainer(JContainer other);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JContainer/<ReadTokenFromAsync>d__0")]
internal Task ReadTokenFromAsync(JsonReader reader, JsonLoadSettings options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JContainer/<ReadContentFromAsync>d__1")]
private Task ReadContentFromAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    public void add_AddingNew(AddingNewEventHandler value);
    public void remove_AddingNew(AddingNewEventHandler value);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    protected abstract virtual IList`1<JToken> get_ChildrenTokens();
    internal void CheckReentrancy();
    internal virtual IList`1<JToken> CreateChildrenCollection();
    protected virtual void OnAddingNew(AddingNewEventArgs e);
    protected virtual void OnListChanged(ListChangedEventArgs e);
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    public virtual bool get_HasValues();
    internal bool ContentsEqual(JContainer container);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual JToken get_First();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual JToken get_Last();
    public virtual JEnumerable`1<JToken> Children();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual IEnumerable`1<T> Values();
    public IEnumerable`1<JToken> Descendants();
    public IEnumerable`1<JToken> DescendantsAndSelf();
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JContainer/<GetDescendants>d__36")]
internal IEnumerable`1<JToken> GetDescendants(bool self);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal bool IsMultiContent(object content);
    internal JToken EnsureParentToken(JToken item, bool skipParentCheck);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal abstract virtual int IndexOfItem(JToken item);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal virtual bool InsertItem(int index, JToken item, bool skipParentCheck);
    internal virtual void RemoveItemAt(int index);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal virtual bool RemoveItem(JToken item);
    internal virtual JToken GetItem(int index);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal virtual void SetItem(int index, JToken item);
    internal virtual void ClearItems();
    internal virtual void ReplaceItem(JToken existing, JToken replacement);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal virtual bool ContainsItem(JToken item);
    internal virtual void CopyItemsTo(Array array, int arrayIndex);
    internal static bool IsTokenUnchanged(JToken currentValue, JToken newValue);
    internal virtual void ValidateToken(JToken o, JToken existing);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void Add(object content);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal bool TryAdd(object content);
    internal void AddAndSkipParentCheck(JToken token);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public void AddFirst(object content);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal bool TryAddInternal(int index, object content, bool skipParentCheck);
    internal static JToken CreateFromContent(object content);
    public JsonWriter CreateWriter();
    public void ReplaceAll(object content);
    public void RemoveAll();
    internal abstract virtual void MergeItem(object content, JsonMergeSettings settings);
    public void Merge(object content);
    public void Merge(object content, JsonMergeSettings settings);
    internal void ReadTokenFrom(JsonReader reader, JsonLoadSettings options);
    internal void ReadContentFrom(JsonReader r, JsonLoadSettings settings);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private static JProperty ReadProperty(JsonReader r, JsonLoadSettings settings, IJsonLineInfo lineInfo, JContainer parent);
    internal int ContentsHashCode();
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override int System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.IndexOf(JToken item);
    private sealed virtual override void System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.Insert(int index, JToken item);
    private sealed virtual override void System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.RemoveAt(int index);
    private sealed virtual override JToken System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.set_Item(int index, JToken value);
    private sealed virtual override void System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.Add(JToken item);
    private sealed virtual override void System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.Contains(JToken item);
    private sealed virtual override void System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.CopyTo(JToken[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.Remove(JToken item);
    private JToken EnsureValue(object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    internal static void MergeEnumerableContent(JContainer target, IEnumerable content, JsonMergeSettings settings);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[<b6d95f6d-77db-4571-973b-0de52fd51d8c>IsReadOnlyAttribute]
internal class Newtonsoft.Json.Linq.JEnumerable`1 : ValueType {
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static JEnumerable`1<T> Empty;
    private IEnumerable`1<T> _enumerable;
    public IJEnumerable`1<JToken> Item { get; }
    public JEnumerable`1(IEnumerable`1<T> enumerable);
    private static JEnumerable`1();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IJEnumerable`1<JToken> get_Item(object key);
    public sealed virtual bool Equals(JEnumerable`1<T> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
internal class Newtonsoft.Json.Linq.JObject : JContainer {
    private JPropertyKeyedCollection _properties;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyChangingEventHandler PropertyChanging;
    protected IList`1<JToken> ChildrenTokens { get; }
    public JTokenType Type { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public JToken Item { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public JToken Item { get; public set; }
    private ICollection`1<string> System.Collections.Generic.IDictionary<System.String,Newtonsoft.Json.Linq.JToken>.Keys { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ICollection`1<JToken> System.Collections.Generic.IDictionary<System.String,Newtonsoft.Json.Linq.JToken>.Values { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.IsReadOnly { get; }
    public JObject(JObject other);
    public JObject(Object[] content);
    public JObject(object content);
    public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    public static Task`1<JObject> LoadAsync(JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JObject/<LoadAsync>d__2")]
public static Task`1<JObject> LoadAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    protected virtual IList`1<JToken> get_ChildrenTokens();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanging(PropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public sealed virtual void remove_PropertyChanging(PropertyChangingEventHandler value);
    internal virtual bool DeepEquals(JToken node);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal virtual int IndexOfItem(JToken item);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal virtual bool InsertItem(int index, JToken item, bool skipParentCheck);
    internal virtual void ValidateToken(JToken o, JToken existing);
    internal virtual void MergeItem(object content, JsonMergeSettings settings);
    private static bool IsNull(JToken token);
    internal void InternalPropertyChanged(JProperty childProperty);
    internal void InternalPropertyChanging(JProperty childProperty);
    internal virtual JToken CloneToken();
    public virtual JTokenType get_Type();
    public IEnumerable`1<JProperty> Properties();
    public JProperty Property(string name);
    public JProperty Property(string name, StringComparison comparison);
    public JEnumerable`1<JToken> PropertyValues();
    public virtual JToken get_Item(object key);
    public virtual void set_Item(object key, JToken value);
    public sealed virtual JToken get_Item(string propertyName);
    public sealed virtual void set_Item(string propertyName, JToken value);
    public static JObject Load(JsonReader reader);
    public static JObject Load(JsonReader reader, JsonLoadSettings settings);
    public static JObject Parse(string json);
    public static JObject Parse(string json, JsonLoadSettings settings);
    public static JObject FromObject(object o);
    public static JObject FromObject(object o, JsonSerializer jsonSerializer);
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public JToken GetValue(string propertyName);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public JToken GetValue(string propertyName, StringComparison comparison);
    public bool TryGetValue(string propertyName, StringComparison comparison, JToken& value);
    public sealed virtual void Add(string propertyName, JToken value);
    public sealed virtual bool ContainsKey(string propertyName);
    private sealed virtual override ICollection`1<string> System.Collections.Generic.IDictionary<System.String,Newtonsoft.Json.Linq.JToken>.get_Keys();
    public sealed virtual bool Remove(string propertyName);
    public sealed virtual bool TryGetValue(string propertyName, JToken& value);
    private sealed virtual override ICollection`1<JToken> System.Collections.Generic.IDictionary<System.String,Newtonsoft.Json.Linq.JToken>.get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.Add(KeyValuePair`2<string, JToken> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.Contains(KeyValuePair`2<string, JToken> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.Remove(KeyValuePair`2<string, JToken> item);
    internal virtual int GetDeepHashCode();
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JObject/<GetEnumerator>d__63")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, JToken>> GetEnumerator();
    protected virtual void OnPropertyChanged(string propertyName);
    protected virtual void OnPropertyChanging(string propertyName);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
    protected virtual DynamicMetaObject GetMetaObject(Expression parameter);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JObject/<<WriteToAsync>g__AwaitProperties|0_0>d")]
[CompilerGeneratedAttribute]
private Task <WriteToAsync>g__AwaitProperties|0_0(Task task, int i, JsonWriter Writer, CancellationToken CancellationToken, JsonConverter[] Converters);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Linq.JProperty : JContainer {
    private JPropertyList _content;
    private string _name;
    protected IList`1<JToken> ChildrenTokens { get; }
    public string Name { get; }
    public JToken Value { get; public set; }
    public JTokenType Type { get; }
    public JProperty(JProperty other);
    internal JProperty(string name);
    public JProperty(string name, Object[] content);
    public JProperty(string name, object content);
    public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JProperty/<WriteToAsync>d__1")]
private Task WriteToAsync(Task task, JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    private Task WriteValueAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    public static Task`1<JProperty> LoadAsync(JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JProperty/<LoadAsync>d__4")]
public static Task`1<JProperty> LoadAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    protected virtual IList`1<JToken> get_ChildrenTokens();
    [DebuggerStepThroughAttribute]
public string get_Name();
    [DebuggerStepThroughAttribute]
public JToken get_Value();
    public void set_Value(JToken value);
    internal virtual JToken GetItem(int index);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal virtual void SetItem(int index, JToken item);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal virtual bool RemoveItem(JToken item);
    internal virtual void RemoveItemAt(int index);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal virtual int IndexOfItem(JToken item);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal virtual bool InsertItem(int index, JToken item, bool skipParentCheck);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal virtual bool ContainsItem(JToken item);
    internal virtual void MergeItem(object content, JsonMergeSettings settings);
    internal virtual void ClearItems();
    internal virtual bool DeepEquals(JToken node);
    internal virtual JToken CloneToken();
    [DebuggerStepThroughAttribute]
public virtual JTokenType get_Type();
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    internal virtual int GetDeepHashCode();
    public static JProperty Load(JsonReader reader);
    public static JProperty Load(JsonReader reader, JsonLoadSettings settings);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Linq.JPropertyDescriptor : PropertyDescriptor {
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    protected int NameHashCode { get; }
    public JPropertyDescriptor(string name);
    private static JObject CastInstance(object instance);
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    protected virtual int get_NameHashCode();
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DefaultMemberAttribute("Item")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Linq.JPropertyKeyedCollection : Collection`1<JToken> {
    private static IEqualityComparer`1<string> Comparer;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, JToken> _dictionary;
    public JToken Item { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<JToken> Values { get; }
    private static JPropertyKeyedCollection();
    private void AddKey(string key, JToken item);
    protected void ChangeItemKey(JToken item, string newKey);
    protected virtual void ClearItems();
    public bool Contains(string key);
    private bool ContainsItem(JToken item);
    private void EnsureDictionary();
    private string GetKeyForItem(JToken item);
    protected virtual void InsertItem(int index, JToken item);
    public bool Remove(string key);
    protected virtual void RemoveItem(int index);
    private void RemoveKey(string key);
    protected virtual void SetItem(int index, JToken item);
    public JToken get_Item(string key);
    public bool TryGetValue(string key, JToken& value);
    public ICollection`1<string> get_Keys();
    public ICollection`1<JToken> get_Values();
    public int IndexOfReference(JToken t);
    public bool Compare(JPropertyKeyedCollection other);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Linq.JRaw : JValue {
    public JRaw(JRaw other);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public JRaw(object rawJson);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JRaw/<CreateAsync>d__0")]
public static Task`1<JRaw> CreateAsync(JsonReader reader, CancellationToken cancellationToken);
    public static JRaw Create(JsonReader reader);
    internal virtual JToken CloneToken();
}
internal class Newtonsoft.Json.Linq.JsonLoadSettings : object {
    private CommentHandling _commentHandling;
    private LineInfoHandling _lineInfoHandling;
    private DuplicatePropertyNameHandling _duplicatePropertyNameHandling;
    public CommentHandling CommentHandling { get; public set; }
    public LineInfoHandling LineInfoHandling { get; public set; }
    public DuplicatePropertyNameHandling DuplicatePropertyNameHandling { get; public set; }
    public CommentHandling get_CommentHandling();
    public void set_CommentHandling(CommentHandling value);
    public LineInfoHandling get_LineInfoHandling();
    public void set_LineInfoHandling(LineInfoHandling value);
    public DuplicatePropertyNameHandling get_DuplicatePropertyNameHandling();
    public void set_DuplicatePropertyNameHandling(DuplicatePropertyNameHandling value);
}
internal class Newtonsoft.Json.Linq.JsonMergeSettings : object {
    private MergeArrayHandling _mergeArrayHandling;
    private MergeNullValueHandling _mergeNullValueHandling;
    private StringComparison _propertyNameComparison;
    public MergeArrayHandling MergeArrayHandling { get; public set; }
    public MergeNullValueHandling MergeNullValueHandling { get; public set; }
    public StringComparison PropertyNameComparison { get; public set; }
    public MergeArrayHandling get_MergeArrayHandling();
    public void set_MergeArrayHandling(MergeArrayHandling value);
    public MergeNullValueHandling get_MergeNullValueHandling();
    public void set_MergeNullValueHandling(MergeNullValueHandling value);
    public StringComparison get_PropertyNameComparison();
    public void set_PropertyNameComparison(StringComparison value);
}
internal class Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter : PathFilter {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Index>k__BackingField;
    public Nullable`1<int> Index { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(Nullable`1<int> value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter/<ExecuteFilter>d__4")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter : PathFilter {
    internal List`1<int> Indexes;
    public ArrayMultipleIndexFilter(List`1<int> indexes);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter/<ExecuteFilter>d__2")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
internal class Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter : PathFilter {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <End>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Step>k__BackingField;
    public Nullable`1<int> Start { get; public set; }
    public Nullable`1<int> End { get; public set; }
    public Nullable`1<int> Step { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_End();
    [CompilerGeneratedAttribute]
public void set_End(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Step();
    [CompilerGeneratedAttribute]
public void set_Step(Nullable`1<int> value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter/<ExecuteFilter>d__12")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
    private bool IsValid(int index, int stopIndex, bool positiveStep);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Linq.JsonPath.BooleanQueryExpression : QueryExpression {
    public object Left;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public object Right;
    public BooleanQueryExpression(QueryOperator operator, object left, object right);
    private IEnumerable`1<JToken> GetResult(JToken root, JToken t, object o);
    public virtual bool IsMatch(JToken root, JToken t, JsonSelectSettings settings);
    private bool MatchTokens(JToken leftResult, JToken rightResult, JsonSelectSettings settings);
    private static bool RegexEquals(JValue input, JValue pattern, JsonSelectSettings settings);
    internal static bool EqualsWithStringCoercion(JValue value, JValue queryValue);
    internal static bool EqualsWithStrictMatch(JValue value, JValue queryValue);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Linq.JsonPath.CompositeExpression : QueryExpression {
    [CompilerGeneratedAttribute]
private List`1<QueryExpression> <Expressions>k__BackingField;
    public List`1<QueryExpression> Expressions { get; public set; }
    public CompositeExpression(QueryOperator operator);
    [CompilerGeneratedAttribute]
public List`1<QueryExpression> get_Expressions();
    [CompilerGeneratedAttribute]
public void set_Expressions(List`1<QueryExpression> value);
    public virtual bool IsMatch(JToken root, JToken t, JsonSelectSettings settings);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Linq.JsonPath.FieldFilter : PathFilter {
    internal string Name;
    public FieldFilter(string name);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.FieldFilter/<ExecuteFilter>d__2")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Linq.JsonPath.FieldMultipleFilter : PathFilter {
    internal List`1<string> Names;
    public FieldMultipleFilter(List`1<string> names);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.FieldMultipleFilter/<ExecuteFilter>d__2")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Linq.JsonPath.JPath : object {
    private static Char[] FloatCharacters;
    private string _expression;
    [CompilerGeneratedAttribute]
private List`1<PathFilter> <Filters>k__BackingField;
    private int _currentIndex;
    public List`1<PathFilter> Filters { get; }
    public JPath(string expression);
    private static JPath();
    [CompilerGeneratedAttribute]
public List`1<PathFilter> get_Filters();
    private void ParseMain();
    private bool ParsePath(List`1<PathFilter> filters, int currentPartStartIndex, bool query);
    private static PathFilter CreatePathFilter(string member, bool scan);
    private PathFilter ParseIndexer(char indexerOpenChar, bool scan);
    private PathFilter ParseArrayIndexer(char indexerCloseChar);
    private void EatWhitespace();
    private PathFilter ParseQuery(char indexerCloseChar, bool scan);
    private bool TryParseExpression(List`1& expressionPath);
    private JsonException CreateUnexpectedCharacterException();
    private object ParseSide();
    private QueryExpression ParseExpression();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private bool TryParseValue(Object& value);
    private string ReadQuotedString();
    private string ReadRegexString();
    private bool Match(string s);
    private QueryOperator ParseOperator();
    private PathFilter ParseQuotedField(char indexerCloseChar, bool scan);
    private void EnsureLength(string message);
    internal IEnumerable`1<JToken> Evaluate(JToken root, JToken t, JsonSelectSettings settings);
    internal static IEnumerable`1<JToken> Evaluate(List`1<PathFilter> filters, JToken root, JToken t, JsonSelectSettings settings);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal abstract class Newtonsoft.Json.Linq.JsonPath.PathFilter : object {
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
    protected static JToken GetTokenIndex(JToken t, JsonSelectSettings settings, int index);
    protected static JToken GetNextScanValue(JToken originalParent, JToken container, JToken value);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal abstract class Newtonsoft.Json.Linq.JsonPath.QueryExpression : object {
    internal QueryOperator Operator;
    public QueryExpression(QueryOperator operator);
    public bool IsMatch(JToken root, JToken t);
    public abstract virtual bool IsMatch(JToken root, JToken t, JsonSelectSettings settings);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Linq.JsonPath.QueryFilter : PathFilter {
    internal QueryExpression Expression;
    public QueryFilter(QueryExpression expression);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.QueryFilter/<ExecuteFilter>d__2")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
internal enum Newtonsoft.Json.Linq.JsonPath.QueryOperator : Enum {
    public int value__;
    public static QueryOperator None;
    public static QueryOperator Equals;
    public static QueryOperator NotEquals;
    public static QueryOperator Exists;
    public static QueryOperator LessThan;
    public static QueryOperator LessThanOrEquals;
    public static QueryOperator GreaterThan;
    public static QueryOperator GreaterThanOrEquals;
    public static QueryOperator And;
    public static QueryOperator Or;
    public static QueryOperator RegexEquals;
    public static QueryOperator StrictEquals;
    public static QueryOperator StrictNotEquals;
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Linq.JsonPath.QueryScanFilter : PathFilter {
    internal QueryExpression Expression;
    public QueryScanFilter(QueryExpression expression);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.QueryScanFilter/<ExecuteFilter>d__2")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Linq.JsonPath.RootFilter : PathFilter {
    public static RootFilter Instance;
    private static RootFilter();
    public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Linq.JsonPath.ScanFilter : PathFilter {
    internal string Name;
    public ScanFilter(string name);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.ScanFilter/<ExecuteFilter>d__2")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter : PathFilter {
    private List`1<string> _names;
    public ScanMultipleFilter(List`1<string> names);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter/<ExecuteFilter>d__2")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
internal class Newtonsoft.Json.Linq.JsonSelectSettings : object {
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <RegexMatchTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ErrorWhenNoMatch>k__BackingField;
    public Nullable`1<TimeSpan> RegexMatchTimeout { get; public set; }
    public bool ErrorWhenNoMatch { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_RegexMatchTimeout();
    [CompilerGeneratedAttribute]
public void set_RegexMatchTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public bool get_ErrorWhenNoMatch();
    [CompilerGeneratedAttribute]
public void set_ErrorWhenNoMatch(bool value);
}
[DefaultMemberAttribute("Item")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal abstract class Newtonsoft.Json.Linq.JToken : object {
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private static JTokenEqualityComparer _equalityComparer;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private JContainer _parent;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private JToken _previous;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private JToken _next;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private object _annotations;
    private static JTokenType[] BooleanTypes;
    private static JTokenType[] NumberTypes;
    private static JTokenType[] BigIntegerTypes;
    private static JTokenType[] StringTypes;
    private static JTokenType[] GuidTypes;
    private static JTokenType[] TimeSpanTypes;
    private static JTokenType[] UriTypes;
    private static JTokenType[] CharTypes;
    private static JTokenType[] DateTimeTypes;
    private static JTokenType[] BytesTypes;
    public static JTokenEqualityComparer EqualityComparer { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public JContainer Parent { get; internal set; }
    public JToken Root { get; }
    public JTokenType Type { get; }
    public bool HasValues { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public JToken Next { get; internal set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public JToken Previous { get; internal set; }
    public string Path { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public JToken Item { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public JToken First { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public JToken Last { get; }
    private IJEnumerable`1<JToken> Newtonsoft.Json.Linq.IJEnumerable<Newtonsoft.Json.Linq.JToken>.Item { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LineNumber { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LinePosition { get; }
    private static JToken();
    public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    public Task WriteToAsync(JsonWriter writer, JsonConverter[] converters);
    public static Task`1<JToken> ReadFromAsync(JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JToken/<ReadFromAsync>d__3")]
public static Task`1<JToken> ReadFromAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    public static Task`1<JToken> LoadAsync(JsonReader reader, CancellationToken cancellationToken);
    public static Task`1<JToken> LoadAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    public static JTokenEqualityComparer get_EqualityComparer();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public JContainer get_Parent();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal void set_Parent(JContainer value);
    public JToken get_Root();
    internal abstract virtual JToken CloneToken();
    internal abstract virtual bool DeepEquals(JToken node);
    public abstract virtual JTokenType get_Type();
    public abstract virtual bool get_HasValues();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static bool DeepEquals(JToken t1, JToken t2);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public JToken get_Next();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal void set_Next(JToken value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public JToken get_Previous();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal void set_Previous(JToken value);
    public string get_Path();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public void AddAfterSelf(object content);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public void AddBeforeSelf(object content);
    public IEnumerable`1<JToken> Ancestors();
    public IEnumerable`1<JToken> AncestorsAndSelf();
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JToken/<GetAncestors>d__48")]
internal IEnumerable`1<JToken> GetAncestors(bool self);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JToken/<AfterSelf>d__49")]
public IEnumerable`1<JToken> AfterSelf();
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JToken/<BeforeSelf>d__50")]
public IEnumerable`1<JToken> BeforeSelf();
    public virtual JToken get_Item(object key);
    public virtual void set_Item(object key, JToken value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual T Value(object key);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual JToken get_First();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual JToken get_Last();
    public virtual JEnumerable`1<JToken> Children();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("0")]
public JEnumerable`1<T> Children();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual IEnumerable`1<T> Values();
    public void Remove();
    public void Replace(JToken value);
    public abstract virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    public virtual string ToString();
    public string ToString(Formatting formatting, JsonConverter[] converters);
    private static JValue EnsureValue(JToken value);
    private static string GetType(JToken token);
    private static bool ValidateToken(JToken o, JTokenType[] validTypes, bool nullable);
    public static bool op_Explicit(JToken value);
    public static DateTimeOffset op_Explicit(JToken value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static Nullable`1<bool> op_Explicit(JToken value);
    public static long op_Explicit(JToken value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static Nullable`1<DateTime> op_Explicit(JToken value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static Nullable`1<DateTimeOffset> op_Explicit(JToken value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static Nullable`1<decimal> op_Explicit(JToken value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static Nullable`1<double> op_Explicit(JToken value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static Nullable`1<char> op_Explicit(JToken value);
    public static int op_Explicit(JToken value);
    public static short op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static ushort op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static char op_Explicit(JToken value);
    public static byte op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static sbyte op_Explicit(JToken value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static Nullable`1<int> op_Explicit(JToken value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static Nullable`1<short> op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static Nullable`1<ushort> op_Explicit(JToken value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static Nullable`1<byte> op_Explicit(JToken value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> op_Explicit(JToken value);
    public static DateTime op_Explicit(JToken value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static Nullable`1<long> op_Explicit(JToken value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static Nullable`1<float> op_Explicit(JToken value);
    public static decimal op_Explicit(JToken value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static Nullable`1<ulong> op_Explicit(JToken value);
    public static double op_Explicit(JToken value);
    public static float op_Explicit(JToken value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static string op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static UInt32 op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static ulong op_Explicit(JToken value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static Byte[] op_Explicit(JToken value);
    public static Guid op_Explicit(JToken value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static Nullable`1<Guid> op_Explicit(JToken value);
    public static TimeSpan op_Explicit(JToken value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static Nullable`1<TimeSpan> op_Explicit(JToken value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static Uri op_Explicit(JToken value);
    private static BigInteger ToBigInteger(JToken value);
    private static Nullable`1<BigInteger> ToBigIntegerNullable(JToken value);
    public static JToken op_Implicit(bool value);
    public static JToken op_Implicit(DateTimeOffset value);
    public static JToken op_Implicit(byte value);
    public static JToken op_Implicit(Nullable`1<byte> value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(sbyte value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(Nullable`1<sbyte> value);
    public static JToken op_Implicit(Nullable`1<bool> value);
    public static JToken op_Implicit(long value);
    public static JToken op_Implicit(Nullable`1<DateTime> value);
    public static JToken op_Implicit(Nullable`1<DateTimeOffset> value);
    public static JToken op_Implicit(Nullable`1<decimal> value);
    public static JToken op_Implicit(Nullable`1<double> value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(short value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(ushort value);
    public static JToken op_Implicit(int value);
    public static JToken op_Implicit(Nullable`1<int> value);
    public static JToken op_Implicit(DateTime value);
    public static JToken op_Implicit(Nullable`1<long> value);
    public static JToken op_Implicit(Nullable`1<float> value);
    public static JToken op_Implicit(decimal value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(Nullable`1<short> value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(Nullable`1<ushort> value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(Nullable`1<UInt32> value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(Nullable`1<ulong> value);
    public static JToken op_Implicit(double value);
    public static JToken op_Implicit(float value);
    public static JToken op_Implicit(string value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(UInt32 value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(ulong value);
    public static JToken op_Implicit(Byte[] value);
    public static JToken op_Implicit(Uri value);
    public static JToken op_Implicit(TimeSpan value);
    public static JToken op_Implicit(Nullable`1<TimeSpan> value);
    public static JToken op_Implicit(Guid value);
    public static JToken op_Implicit(Nullable`1<Guid> value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<JToken> System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>.GetEnumerator();
    internal abstract virtual int GetDeepHashCode();
    private sealed virtual override IJEnumerable`1<JToken> Newtonsoft.Json.Linq.IJEnumerable<Newtonsoft.Json.Linq.JToken>.get_Item(object key);
    public JsonReader CreateReader();
    internal static JToken FromObjectInternal(object o, JsonSerializer jsonSerializer);
    public static JToken FromObject(object o);
    public static JToken FromObject(object o, JsonSerializer jsonSerializer);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public T ToObject();
    public object ToObject(Type objectType);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public T ToObject(JsonSerializer jsonSerializer);
    public object ToObject(Type objectType, JsonSerializer jsonSerializer);
    public static JToken ReadFrom(JsonReader reader);
    public static JToken ReadFrom(JsonReader reader, JsonLoadSettings settings);
    public static JToken Parse(string json);
    public static JToken Parse(string json, JsonLoadSettings settings);
    public static JToken Load(JsonReader reader, JsonLoadSettings settings);
    public static JToken Load(JsonReader reader);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal void SetLineInfo(IJsonLineInfo lineInfo, JsonLoadSettings settings);
    internal void SetLineInfo(int lineNumber, int linePosition);
    private sealed virtual override bool Newtonsoft.Json.IJsonLineInfo.HasLineInfo();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LineNumber();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LinePosition();
    public JToken SelectToken(string path);
    public JToken SelectToken(string path, bool errorWhenNoMatch);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public JToken SelectToken(string path, JsonSelectSettings settings);
    public IEnumerable`1<JToken> SelectTokens(string path);
    public IEnumerable`1<JToken> SelectTokens(string path, bool errorWhenNoMatch);
    public IEnumerable`1<JToken> SelectTokens(string path, JsonSelectSettings settings);
    protected virtual DynamicMetaObject GetMetaObject(Expression parameter);
    private sealed virtual override DynamicMetaObject System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression parameter);
    private sealed virtual override object System.ICloneable.Clone();
    public JToken DeepClone();
    public void AddAnnotation(object annotation);
    public T Annotation();
    public object Annotation(Type type);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JToken/<Annotations>d__184`1")]
public IEnumerable`1<T> Annotations();
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JToken/<Annotations>d__185")]
public IEnumerable`1<object> Annotations(Type type);
    public void RemoveAnnotations();
    public void RemoveAnnotations(Type type);
    internal void CopyAnnotations(JToken target, JToken source);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Linq.JTokenEqualityComparer : object {
    public sealed virtual bool Equals(JToken x, JToken y);
    public sealed virtual int GetHashCode(JToken obj);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Linq.JTokenReader : JsonReader {
    private JToken _root;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private string _initialPath;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private JToken _parent;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private JToken _current;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public JToken CurrentToken { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LineNumber { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LinePosition { get; }
    public string Path { get; }
    public JTokenReader(JToken token);
    public JTokenReader(JToken token, string initialPath);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public JToken get_CurrentToken();
    public virtual bool Read();
    private bool ReadOver(JToken t);
    private bool ReadToEnd();
    private Nullable`1<JsonToken> GetEndToken(JContainer c);
    private bool ReadInto(JContainer c);
    private bool SetEnd(JContainer c);
    private void SetToken(JToken token);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private string SafeToString(object value);
    private sealed virtual override bool Newtonsoft.Json.IJsonLineInfo.HasLineInfo();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LineNumber();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LinePosition();
    public virtual string get_Path();
}
internal enum Newtonsoft.Json.Linq.JTokenType : Enum {
    public int value__;
    public static JTokenType None;
    public static JTokenType Object;
    public static JTokenType Array;
    public static JTokenType Constructor;
    public static JTokenType Property;
    public static JTokenType Comment;
    public static JTokenType Integer;
    public static JTokenType Float;
    public static JTokenType String;
    public static JTokenType Boolean;
    public static JTokenType Null;
    public static JTokenType Undefined;
    public static JTokenType Date;
    public static JTokenType Raw;
    public static JTokenType Bytes;
    public static JTokenType Guid;
    public static JTokenType Uri;
    public static JTokenType TimeSpan;
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal class Newtonsoft.Json.Linq.JTokenWriter : JsonWriter {
    private JContainer _token;
    private JContainer _parent;
    private JValue _value;
    private JToken _current;
    public JToken CurrentToken { get; }
    public JToken Token { get; }
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public JTokenWriter(JContainer container);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal virtual Task WriteTokenAsync(JsonReader reader, bool writeChildren, bool writeDateConstructorAsDate, bool writeComments, CancellationToken cancellationToken);
    public JToken get_CurrentToken();
    public JToken get_Token();
    public virtual void Flush();
    public virtual void Close();
    public virtual void WriteStartObject();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
private void AddParent(JContainer container);
    private void RemoveParent();
    public virtual void WriteStartArray();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual void WriteStartConstructor(string name);
    protected virtual void WriteEnd(JsonToken token);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual void WritePropertyName(string name);
    private void AddValue(object value, JsonToken token);
    internal void AddValue(JValue value, JsonToken token);
    public virtual void WriteValue(object value);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    public virtual void WriteRaw(string json);
    public virtual void WriteComment(string text);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(int value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(Uri value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal virtual void WriteToken(JsonReader reader, bool writeChildren, bool writeDateConstructorAsDate, bool writeComments);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Linq.JValue : JToken {
    private JTokenType _valueType;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private object _value;
    public bool HasValues { get; }
    public JTokenType Type { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public object Value { get; public set; }
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal JValue(object value, JTokenType type);
    public JValue(JValue other);
    public JValue(long value);
    public JValue(decimal value);
    public JValue(char value);
    [CLSCompliantAttribute("False")]
public JValue(ulong value);
    public JValue(double value);
    public JValue(float value);
    public JValue(DateTime value);
    public JValue(DateTimeOffset value);
    public JValue(bool value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public JValue(string value);
    public JValue(Guid value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public JValue(Uri value);
    public JValue(TimeSpan value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public JValue(object value);
    public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    internal virtual bool DeepEquals(JToken node);
    public virtual bool get_HasValues();
    private static int CompareBigInteger(BigInteger i1, object i2);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal static int Compare(JTokenType valueType, object objA, object objB);
    private static int CompareFloat(object objA, object objB);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private static bool Operation(ExpressionType operation, object objA, object objB, Object& result);
    internal virtual JToken CloneToken();
    public static JValue CreateComment(string value);
    public static JValue CreateString(string value);
    public static JValue CreateNull();
    public static JValue CreateUndefined();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private static JTokenType GetValueType(Nullable`1<JTokenType> current, object value);
    private static JTokenType GetStringValueType(Nullable`1<JTokenType> current);
    public virtual JTokenType get_Type();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public object get_Value();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public void set_Value(object value);
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    internal virtual int GetDeepHashCode();
    private static bool ValuesEquals(JValue v1, JValue v2);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public sealed virtual bool Equals(JValue other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public string ToString(string format);
    public sealed virtual string ToString(IFormatProvider formatProvider);
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    protected virtual DynamicMetaObject GetMetaObject(Expression parameter);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    public sealed virtual int CompareTo(JValue obj);
    private sealed virtual override TypeCode System.IConvertible.GetTypeCode();
    private sealed virtual override bool System.IConvertible.ToBoolean(IFormatProvider provider);
    private sealed virtual override char System.IConvertible.ToChar(IFormatProvider provider);
    private sealed virtual override sbyte System.IConvertible.ToSByte(IFormatProvider provider);
    private sealed virtual override byte System.IConvertible.ToByte(IFormatProvider provider);
    private sealed virtual override short System.IConvertible.ToInt16(IFormatProvider provider);
    private sealed virtual override ushort System.IConvertible.ToUInt16(IFormatProvider provider);
    private sealed virtual override int System.IConvertible.ToInt32(IFormatProvider provider);
    private sealed virtual override UInt32 System.IConvertible.ToUInt32(IFormatProvider provider);
    private sealed virtual override long System.IConvertible.ToInt64(IFormatProvider provider);
    private sealed virtual override ulong System.IConvertible.ToUInt64(IFormatProvider provider);
    private sealed virtual override float System.IConvertible.ToSingle(IFormatProvider provider);
    private sealed virtual override double System.IConvertible.ToDouble(IFormatProvider provider);
    private sealed virtual override decimal System.IConvertible.ToDecimal(IFormatProvider provider);
    private sealed virtual override DateTime System.IConvertible.ToDateTime(IFormatProvider provider);
    private sealed virtual override object System.IConvertible.ToType(Type conversionType, IFormatProvider provider);
}
internal enum Newtonsoft.Json.Linq.LineInfoHandling : Enum {
    public int value__;
    public static LineInfoHandling Ignore;
    public static LineInfoHandling Load;
}
internal enum Newtonsoft.Json.Linq.MergeArrayHandling : Enum {
    public int value__;
    public static MergeArrayHandling Concat;
    public static MergeArrayHandling Union;
    public static MergeArrayHandling Replace;
    public static MergeArrayHandling Merge;
}
[FlagsAttribute]
internal enum Newtonsoft.Json.Linq.MergeNullValueHandling : Enum {
    public int value__;
    public static MergeNullValueHandling Ignore;
    public static MergeNullValueHandling Merge;
}
internal enum Newtonsoft.Json.MemberSerialization : Enum {
    public int value__;
    public static MemberSerialization OptOut;
    public static MemberSerialization OptIn;
    public static MemberSerialization Fields;
}
internal enum Newtonsoft.Json.MetadataPropertyHandling : Enum {
    public int value__;
    public static MetadataPropertyHandling Default;
    public static MetadataPropertyHandling ReadAhead;
    public static MetadataPropertyHandling Ignore;
}
internal enum Newtonsoft.Json.MissingMemberHandling : Enum {
    public int value__;
    public static MissingMemberHandling Ignore;
    public static MissingMemberHandling Error;
}
internal enum Newtonsoft.Json.NullValueHandling : Enum {
    public int value__;
    public static NullValueHandling Include;
    public static NullValueHandling Ignore;
}
internal enum Newtonsoft.Json.ObjectCreationHandling : Enum {
    public int value__;
    public static ObjectCreationHandling Auto;
    public static ObjectCreationHandling Reuse;
    public static ObjectCreationHandling Replace;
}
[FlagsAttribute]
internal enum Newtonsoft.Json.PreserveReferencesHandling : Enum {
    public int value__;
    public static PreserveReferencesHandling None;
    public static PreserveReferencesHandling Objects;
    public static PreserveReferencesHandling Arrays;
    public static PreserveReferencesHandling All;
}
internal enum Newtonsoft.Json.ReadType : Enum {
    public int value__;
    public static ReadType Read;
    public static ReadType ReadAsInt32;
    public static ReadType ReadAsInt64;
    public static ReadType ReadAsBytes;
    public static ReadType ReadAsString;
    public static ReadType ReadAsDecimal;
    public static ReadType ReadAsDateTime;
    public static ReadType ReadAsDateTimeOffset;
    public static ReadType ReadAsDouble;
    public static ReadType ReadAsBoolean;
}
internal enum Newtonsoft.Json.ReferenceLoopHandling : Enum {
    public int value__;
    public static ReferenceLoopHandling Error;
    public static ReferenceLoopHandling Ignore;
    public static ReferenceLoopHandling Serialize;
}
internal enum Newtonsoft.Json.Required : Enum {
    public int value__;
    public static Required Default;
    public static Required AllowNull;
    public static Required Always;
    public static Required DisallowNull;
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
[ExtensionAttribute]
internal static class Newtonsoft.Json.Schema.Extensions : object {
    [ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
[ExtensionAttribute]
public static bool IsValid(JToken source, JsonSchema schema);
    [ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
[ExtensionAttribute]
public static bool IsValid(JToken source, JsonSchema schema, IList`1& errorMessages);
    [ExtensionAttribute]
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
public static void Validate(JToken source, JsonSchema schema);
    [ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
[ExtensionAttribute]
public static void Validate(JToken source, JsonSchema schema, ValidationEventHandler validationEventHandler);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchema : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Hidden>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Transient>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<JsonSchemaType> <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinimumLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaximumLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <DivisibleBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Maximum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ExclusiveMinimum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ExclusiveMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinimumItems>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaximumItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JsonSchema> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PositionalItemsValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchema <AdditionalItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAdditionalItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UniqueItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JsonSchema> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchema <AdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JsonSchema> <PatternProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Requires>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JToken> <Enum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<JsonSchemaType> <Disallow>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JsonSchema> <Extends>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    private string _internalId;
    [CompilerGeneratedAttribute]
private string <DeferredReference>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReferencesResolved>k__BackingField;
    public string Id { get; public set; }
    public string Title { get; public set; }
    public Nullable`1<bool> Required { get; public set; }
    public Nullable`1<bool> ReadOnly { get; public set; }
    public Nullable`1<bool> Hidden { get; public set; }
    public Nullable`1<bool> Transient { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<JsonSchemaType> Type { get; public set; }
    public string Pattern { get; public set; }
    public Nullable`1<int> MinimumLength { get; public set; }
    public Nullable`1<int> MaximumLength { get; public set; }
    public Nullable`1<double> DivisibleBy { get; public set; }
    public Nullable`1<double> Minimum { get; public set; }
    public Nullable`1<double> Maximum { get; public set; }
    public Nullable`1<bool> ExclusiveMinimum { get; public set; }
    public Nullable`1<bool> ExclusiveMaximum { get; public set; }
    public Nullable`1<int> MinimumItems { get; public set; }
    public Nullable`1<int> MaximumItems { get; public set; }
    public IList`1<JsonSchema> Items { get; public set; }
    public bool PositionalItemsValidation { get; public set; }
    public JsonSchema AdditionalItems { get; public set; }
    public bool AllowAdditionalItems { get; public set; }
    public bool UniqueItems { get; public set; }
    public IDictionary`2<string, JsonSchema> Properties { get; public set; }
    public JsonSchema AdditionalProperties { get; public set; }
    public IDictionary`2<string, JsonSchema> PatternProperties { get; public set; }
    public bool AllowAdditionalProperties { get; public set; }
    public string Requires { get; public set; }
    public IList`1<JToken> Enum { get; public set; }
    public Nullable`1<JsonSchemaType> Disallow { get; public set; }
    public JToken Default { get; public set; }
    public IList`1<JsonSchema> Extends { get; public set; }
    public string Format { get; public set; }
    internal string Location { get; internal set; }
    internal string InternalId { get; }
    internal string DeferredReference { get; internal set; }
    internal bool ReferencesResolved { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Hidden();
    [CompilerGeneratedAttribute]
public void set_Hidden(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Transient();
    [CompilerGeneratedAttribute]
public void set_Transient(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<JsonSchemaType> get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Nullable`1<JsonSchemaType> value);
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinimumLength();
    [CompilerGeneratedAttribute]
public void set_MinimumLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumLength();
    [CompilerGeneratedAttribute]
public void set_MaximumLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_DivisibleBy();
    [CompilerGeneratedAttribute]
public void set_DivisibleBy(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Minimum();
    [CompilerGeneratedAttribute]
public void set_Minimum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Maximum();
    [CompilerGeneratedAttribute]
public void set_Maximum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExclusiveMinimum();
    [CompilerGeneratedAttribute]
public void set_ExclusiveMinimum(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExclusiveMaximum();
    [CompilerGeneratedAttribute]
public void set_ExclusiveMaximum(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinimumItems();
    [CompilerGeneratedAttribute]
public void set_MinimumItems(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumItems();
    [CompilerGeneratedAttribute]
public void set_MaximumItems(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IList`1<JsonSchema> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IList`1<JsonSchema> value);
    [CompilerGeneratedAttribute]
public bool get_PositionalItemsValidation();
    [CompilerGeneratedAttribute]
public void set_PositionalItemsValidation(bool value);
    [CompilerGeneratedAttribute]
public JsonSchema get_AdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AdditionalItems(JsonSchema value);
    [CompilerGeneratedAttribute]
public bool get_AllowAdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AllowAdditionalItems(bool value);
    [CompilerGeneratedAttribute]
public bool get_UniqueItems();
    [CompilerGeneratedAttribute]
public void set_UniqueItems(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JsonSchema> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, JsonSchema> value);
    [CompilerGeneratedAttribute]
public JsonSchema get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(JsonSchema value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JsonSchema> get_PatternProperties();
    [CompilerGeneratedAttribute]
public void set_PatternProperties(IDictionary`2<string, JsonSchema> value);
    [CompilerGeneratedAttribute]
public bool get_AllowAdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AllowAdditionalProperties(bool value);
    [CompilerGeneratedAttribute]
public string get_Requires();
    [CompilerGeneratedAttribute]
public void set_Requires(string value);
    [CompilerGeneratedAttribute]
public IList`1<JToken> get_Enum();
    [CompilerGeneratedAttribute]
public void set_Enum(IList`1<JToken> value);
    [CompilerGeneratedAttribute]
public Nullable`1<JsonSchemaType> get_Disallow();
    [CompilerGeneratedAttribute]
public void set_Disallow(Nullable`1<JsonSchemaType> value);
    [CompilerGeneratedAttribute]
public JToken get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(JToken value);
    [CompilerGeneratedAttribute]
public IList`1<JsonSchema> get_Extends();
    [CompilerGeneratedAttribute]
public void set_Extends(IList`1<JsonSchema> value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
internal string get_Location();
    [CompilerGeneratedAttribute]
internal void set_Location(string value);
    internal string get_InternalId();
    [CompilerGeneratedAttribute]
internal string get_DeferredReference();
    [CompilerGeneratedAttribute]
internal void set_DeferredReference(string value);
    [CompilerGeneratedAttribute]
internal bool get_ReferencesResolved();
    [CompilerGeneratedAttribute]
internal void set_ReferencesResolved(bool value);
    public static JsonSchema Read(JsonReader reader);
    public static JsonSchema Read(JsonReader reader, JsonSchemaResolver resolver);
    public static JsonSchema Parse(string json);
    public static JsonSchema Parse(string json, JsonSchemaResolver resolver);
    public void WriteTo(JsonWriter writer);
    public void WriteTo(JsonWriter writer, JsonSchemaResolver resolver);
    public virtual string ToString();
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaBuilder : object {
    private IList`1<JsonSchema> _stack;
    private JsonSchemaResolver _resolver;
    private IDictionary`2<string, JsonSchema> _documentSchemas;
    private JsonSchema _currentSchema;
    private JObject _rootSchema;
    private JsonSchema CurrentSchema { get; }
    public JsonSchemaBuilder(JsonSchemaResolver resolver);
    private void Push(JsonSchema value);
    private JsonSchema Pop();
    private JsonSchema get_CurrentSchema();
    internal JsonSchema Read(JsonReader reader);
    private string UnescapeReference(string reference);
    private JsonSchema ResolveReferences(JsonSchema schema);
    private JsonSchema BuildSchema(JToken token);
    private void ProcessSchemaProperties(JObject schemaObject);
    private void ProcessExtends(JToken token);
    private void ProcessEnum(JToken token);
    private void ProcessAdditionalProperties(JToken token);
    private void ProcessAdditionalItems(JToken token);
    private IDictionary`2<string, JsonSchema> ProcessProperties(JToken token);
    private void ProcessItems(JToken token);
    private Nullable`1<JsonSchemaType> ProcessType(JToken token);
    internal static JsonSchemaType MapType(string type);
    internal static string MapType(JsonSchemaType type);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal static class Newtonsoft.Json.Schema.JsonSchemaConstants : object {
    public static string TypePropertyName;
    public static string PropertiesPropertyName;
    public static string ItemsPropertyName;
    public static string AdditionalItemsPropertyName;
    public static string RequiredPropertyName;
    public static string PatternPropertiesPropertyName;
    public static string AdditionalPropertiesPropertyName;
    public static string RequiresPropertyName;
    public static string MinimumPropertyName;
    public static string MaximumPropertyName;
    public static string ExclusiveMinimumPropertyName;
    public static string ExclusiveMaximumPropertyName;
    public static string MinimumItemsPropertyName;
    public static string MaximumItemsPropertyName;
    public static string PatternPropertyName;
    public static string MaximumLengthPropertyName;
    public static string MinimumLengthPropertyName;
    public static string EnumPropertyName;
    public static string ReadOnlyPropertyName;
    public static string TitlePropertyName;
    public static string DescriptionPropertyName;
    public static string FormatPropertyName;
    public static string DefaultPropertyName;
    public static string TransientPropertyName;
    public static string DivisibleByPropertyName;
    public static string HiddenPropertyName;
    public static string DisallowPropertyName;
    public static string ExtendsPropertyName;
    public static string IdPropertyName;
    public static string UniqueItemsPropertyName;
    public static string OptionValuePropertyName;
    public static string OptionLabelPropertyName;
    public static IDictionary`2<string, JsonSchemaType> JsonSchemaTypeMapping;
    private static JsonSchemaConstants();
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaException : JsonException {
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string Path { get; }
    public JsonSchemaException(string message);
    public JsonSchemaException(string message, Exception innerException);
    public JsonSchemaException(SerializationInfo info, StreamingContext context);
    internal JsonSchemaException(string message, Exception innerException, string path, int lineNumber, int linePosition);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [CompilerGeneratedAttribute]
public string get_Path();
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaGenerator : object {
    [CompilerGeneratedAttribute]
private UndefinedSchemaIdHandling <UndefinedSchemaIdHandling>k__BackingField;
    private IContractResolver _contractResolver;
    private JsonSchemaResolver _resolver;
    private IList`1<TypeSchema> _stack;
    private JsonSchema _currentSchema;
    public UndefinedSchemaIdHandling UndefinedSchemaIdHandling { get; public set; }
    public IContractResolver ContractResolver { get; public set; }
    private JsonSchema CurrentSchema { get; }
    [CompilerGeneratedAttribute]
public UndefinedSchemaIdHandling get_UndefinedSchemaIdHandling();
    [CompilerGeneratedAttribute]
public void set_UndefinedSchemaIdHandling(UndefinedSchemaIdHandling value);
    public IContractResolver get_ContractResolver();
    public void set_ContractResolver(IContractResolver value);
    private JsonSchema get_CurrentSchema();
    private void Push(TypeSchema typeSchema);
    private TypeSchema Pop();
    public JsonSchema Generate(Type type);
    public JsonSchema Generate(Type type, JsonSchemaResolver resolver);
    public JsonSchema Generate(Type type, bool rootSchemaNullable);
    public JsonSchema Generate(Type type, JsonSchemaResolver resolver, bool rootSchemaNullable);
    private string GetTitle(Type type);
    private string GetDescription(Type type);
    private string GetTypeId(Type type, bool explicitOnly);
    private JsonSchema GenerateInternal(Type type, Required valueRequired, bool required);
    private JsonSchemaType AddNullType(JsonSchemaType type, Required valueRequired);
    private bool HasFlag(DefaultValueHandling value, DefaultValueHandling flag);
    private void GenerateObjectSchema(Type type, JsonObjectContract contract);
    private void GenerateISerializableContract(Type type, JsonISerializableContract contract);
    internal static bool HasFlag(Nullable`1<JsonSchemaType> value, JsonSchemaType flag);
    private JsonSchemaType GetJsonSchemaType(Type type, Required valueRequired);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaModel : object {
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinimumLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaximumLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <DivisibleBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Maximum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExclusiveMinimum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExclusiveMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinimumItems>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaximumItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Patterns>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JsonSchemaModel> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JsonSchemaModel> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JsonSchemaModel> <PatternProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaModel <AdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaModel <AdditionalItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PositionalItemsValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAdditionalItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UniqueItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JToken> <Enum>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaType <Disallow>k__BackingField;
    public bool Required { get; public set; }
    public JsonSchemaType Type { get; public set; }
    public Nullable`1<int> MinimumLength { get; public set; }
    public Nullable`1<int> MaximumLength { get; public set; }
    public Nullable`1<double> DivisibleBy { get; public set; }
    public Nullable`1<double> Minimum { get; public set; }
    public Nullable`1<double> Maximum { get; public set; }
    public bool ExclusiveMinimum { get; public set; }
    public bool ExclusiveMaximum { get; public set; }
    public Nullable`1<int> MinimumItems { get; public set; }
    public Nullable`1<int> MaximumItems { get; public set; }
    public IList`1<string> Patterns { get; public set; }
    public IList`1<JsonSchemaModel> Items { get; public set; }
    public IDictionary`2<string, JsonSchemaModel> Properties { get; public set; }
    public IDictionary`2<string, JsonSchemaModel> PatternProperties { get; public set; }
    public JsonSchemaModel AdditionalProperties { get; public set; }
    public JsonSchemaModel AdditionalItems { get; public set; }
    public bool PositionalItemsValidation { get; public set; }
    public bool AllowAdditionalProperties { get; public set; }
    public bool AllowAdditionalItems { get; public set; }
    public bool UniqueItems { get; public set; }
    public IList`1<JToken> Enum { get; public set; }
    public JsonSchemaType Disallow { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public JsonSchemaType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(JsonSchemaType value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinimumLength();
    [CompilerGeneratedAttribute]
public void set_MinimumLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumLength();
    [CompilerGeneratedAttribute]
public void set_MaximumLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_DivisibleBy();
    [CompilerGeneratedAttribute]
public void set_DivisibleBy(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Minimum();
    [CompilerGeneratedAttribute]
public void set_Minimum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Maximum();
    [CompilerGeneratedAttribute]
public void set_Maximum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public bool get_ExclusiveMinimum();
    [CompilerGeneratedAttribute]
public void set_ExclusiveMinimum(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExclusiveMaximum();
    [CompilerGeneratedAttribute]
public void set_ExclusiveMaximum(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinimumItems();
    [CompilerGeneratedAttribute]
public void set_MinimumItems(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumItems();
    [CompilerGeneratedAttribute]
public void set_MaximumItems(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Patterns();
    [CompilerGeneratedAttribute]
public void set_Patterns(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<JsonSchemaModel> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IList`1<JsonSchemaModel> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JsonSchemaModel> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, JsonSchemaModel> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JsonSchemaModel> get_PatternProperties();
    [CompilerGeneratedAttribute]
public void set_PatternProperties(IDictionary`2<string, JsonSchemaModel> value);
    [CompilerGeneratedAttribute]
public JsonSchemaModel get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(JsonSchemaModel value);
    [CompilerGeneratedAttribute]
public JsonSchemaModel get_AdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AdditionalItems(JsonSchemaModel value);
    [CompilerGeneratedAttribute]
public bool get_PositionalItemsValidation();
    [CompilerGeneratedAttribute]
public void set_PositionalItemsValidation(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowAdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AllowAdditionalProperties(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowAdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AllowAdditionalItems(bool value);
    [CompilerGeneratedAttribute]
public bool get_UniqueItems();
    [CompilerGeneratedAttribute]
public void set_UniqueItems(bool value);
    [CompilerGeneratedAttribute]
public IList`1<JToken> get_Enum();
    [CompilerGeneratedAttribute]
public void set_Enum(IList`1<JToken> value);
    [CompilerGeneratedAttribute]
public JsonSchemaType get_Disallow();
    [CompilerGeneratedAttribute]
public void set_Disallow(JsonSchemaType value);
    public static JsonSchemaModel Create(IList`1<JsonSchema> schemata);
    private static void Combine(JsonSchemaModel model, JsonSchema schema);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaModelBuilder : object {
    private JsonSchemaNodeCollection _nodes;
    private Dictionary`2<JsonSchemaNode, JsonSchemaModel> _nodeModels;
    private JsonSchemaNode _node;
    public JsonSchemaModel Build(JsonSchema schema);
    public JsonSchemaNode AddSchema(JsonSchemaNode existingNode, JsonSchema schema);
    public void AddProperties(IDictionary`2<string, JsonSchema> source, IDictionary`2<string, JsonSchemaNode> target);
    public void AddProperty(IDictionary`2<string, JsonSchemaNode> target, string propertyName, JsonSchema schema);
    public void AddItem(JsonSchemaNode parentNode, int index, JsonSchema schema);
    public void AddAdditionalProperties(JsonSchemaNode parentNode, JsonSchema schema);
    public void AddAdditionalItems(JsonSchemaNode parentNode, JsonSchema schema);
    private JsonSchemaModel BuildNodeModel(JsonSchemaNode node);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaNode : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<JsonSchema> <Schemas>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, JsonSchemaNode> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, JsonSchemaNode> <PatternProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<JsonSchemaNode> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaNode <AdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaNode <AdditionalItems>k__BackingField;
    public string Id { get; }
    public ReadOnlyCollection`1<JsonSchema> Schemas { get; }
    public Dictionary`2<string, JsonSchemaNode> Properties { get; }
    public Dictionary`2<string, JsonSchemaNode> PatternProperties { get; }
    public List`1<JsonSchemaNode> Items { get; }
    public JsonSchemaNode AdditionalProperties { get; public set; }
    public JsonSchemaNode AdditionalItems { get; public set; }
    public JsonSchemaNode(JsonSchema schema);
    private JsonSchemaNode(JsonSchemaNode source, JsonSchema schema);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<JsonSchema> get_Schemas();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JsonSchemaNode> get_Properties();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JsonSchemaNode> get_PatternProperties();
    [CompilerGeneratedAttribute]
public List`1<JsonSchemaNode> get_Items();
    [CompilerGeneratedAttribute]
public JsonSchemaNode get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(JsonSchemaNode value);
    [CompilerGeneratedAttribute]
public JsonSchemaNode get_AdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AdditionalItems(JsonSchemaNode value);
    public JsonSchemaNode Combine(JsonSchema schema);
    public static string GetId(IEnumerable`1<JsonSchema> schemata);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaNodeCollection : KeyedCollection`2<string, JsonSchemaNode> {
    protected virtual string GetKeyForItem(JsonSchemaNode item);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaResolver : object {
    [CompilerGeneratedAttribute]
private IList`1<JsonSchema> <LoadedSchemas>k__BackingField;
    public IList`1<JsonSchema> LoadedSchemas { get; protected set; }
    [CompilerGeneratedAttribute]
public IList`1<JsonSchema> get_LoadedSchemas();
    [CompilerGeneratedAttribute]
protected void set_LoadedSchemas(IList`1<JsonSchema> value);
    public virtual JsonSchema GetSchema(string reference);
}
[FlagsAttribute]
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal enum Newtonsoft.Json.Schema.JsonSchemaType : Enum {
    public int value__;
    public static JsonSchemaType None;
    public static JsonSchemaType String;
    public static JsonSchemaType Float;
    public static JsonSchemaType Integer;
    public static JsonSchemaType Boolean;
    public static JsonSchemaType Object;
    public static JsonSchemaType Array;
    public static JsonSchemaType Null;
    public static JsonSchemaType Any;
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaWriter : object {
    private JsonWriter _writer;
    private JsonSchemaResolver _resolver;
    public JsonSchemaWriter(JsonWriter writer, JsonSchemaResolver resolver);
    private void ReferenceOrWriteSchema(JsonSchema schema);
    public void WriteSchema(JsonSchema schema);
    private void WriteSchemaDictionaryIfNotNull(JsonWriter writer, string propertyName, IDictionary`2<string, JsonSchema> properties);
    private void WriteItems(JsonSchema schema);
    private void WriteType(string propertyName, JsonWriter writer, JsonSchemaType type);
    private void WritePropertyIfNotNull(JsonWriter writer, string propertyName, object value);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal enum Newtonsoft.Json.Schema.UndefinedSchemaIdHandling : Enum {
    public int value__;
    public static UndefinedSchemaIdHandling None;
    public static UndefinedSchemaIdHandling UseTypeName;
    public static UndefinedSchemaIdHandling UseAssemblyQualifiedName;
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.ValidationEventArgs : EventArgs {
    private JsonSchemaException _ex;
    public JsonSchemaException Exception { get; }
    public string Path { get; }
    public string Message { get; }
    internal ValidationEventArgs(JsonSchemaException ex);
    public JsonSchemaException get_Exception();
    public string get_Path();
    public string get_Message();
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.ValidationEventHandler : MulticastDelegate {
    public ValidationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ValidationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ValidationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class Newtonsoft.Json.Serialization.CachedAttributeGetter`1 : object {
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ThreadSafeStore`2<object, T> TypeAttributeCache;
    private static CachedAttributeGetter`1();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public static T GetAttribute(object type);
}
internal class Newtonsoft.Json.Serialization.CamelCaseNamingStrategy : NamingStrategy {
    public CamelCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames);
    public CamelCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames, bool processExtensionDataNames);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
protected virtual string ResolvePropertyName(string name);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver : DefaultContractResolver {
    private static object TypeContractCacheLock;
    private static DefaultJsonNameTable NameTable;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<StructMultiKey`2<Type, Type>, JsonContract> _contractCache;
    private static CamelCasePropertyNamesContractResolver();
    public virtual JsonContract ResolveContract(Type type);
    internal virtual DefaultJsonNameTable GetNameTable();
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.DefaultContractResolver : object {
    private static IContractResolver _instance;
    private static String[] BlacklistedTypeNames;
    private static JsonConverter[] BuiltInConverters;
    private DefaultJsonNameTable _nameTable;
    private ThreadSafeStore`2<Type, JsonContract> _contractCache;
    [CompilerGeneratedAttribute]
private BindingFlags <DefaultMembersSearchFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SerializeCompilerGeneratedMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreSerializableInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreSerializableAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreIsSpecifiedMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreShouldSerializeMembers>k__BackingField;
    [CompilerGeneratedAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private NamingStrategy <NamingStrategy>k__BackingField;
    internal static IContractResolver Instance { get; }
    public bool DynamicCodeGeneration { get; }
    [ObsoleteAttribute("DefaultMembersSearchFlags is obsolete. To modify the members serialized inherit from DefaultContractResolver and override the GetSerializableMembers method instead.")]
public BindingFlags DefaultMembersSearchFlags { get; public set; }
    public bool SerializeCompilerGeneratedMembers { get; public set; }
    public bool IgnoreSerializableInterface { get; public set; }
    public bool IgnoreSerializableAttribute { get; public set; }
    public bool IgnoreIsSpecifiedMembers { get; public set; }
    public bool IgnoreShouldSerializeMembers { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public NamingStrategy NamingStrategy { get; public set; }
    private static DefaultContractResolver();
    internal static IContractResolver get_Instance();
    public bool get_DynamicCodeGeneration();
    [CompilerGeneratedAttribute]
public BindingFlags get_DefaultMembersSearchFlags();
    [CompilerGeneratedAttribute]
public void set_DefaultMembersSearchFlags(BindingFlags value);
    [CompilerGeneratedAttribute]
public bool get_SerializeCompilerGeneratedMembers();
    [CompilerGeneratedAttribute]
public void set_SerializeCompilerGeneratedMembers(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreSerializableInterface();
    [CompilerGeneratedAttribute]
public void set_IgnoreSerializableInterface(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreSerializableAttribute();
    [CompilerGeneratedAttribute]
public void set_IgnoreSerializableAttribute(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreIsSpecifiedMembers();
    [CompilerGeneratedAttribute]
public void set_IgnoreIsSpecifiedMembers(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreShouldSerializeMembers();
    [CompilerGeneratedAttribute]
public void set_IgnoreShouldSerializeMembers(bool value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public NamingStrategy get_NamingStrategy();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_NamingStrategy(NamingStrategy value);
    public virtual JsonContract ResolveContract(Type type);
    private static bool FilterMembers(MemberInfo member);
    protected virtual List`1<MemberInfo> GetSerializableMembers(Type objectType);
    private bool ShouldSerializeEntityMember(MemberInfo memberInfo);
    protected virtual JsonObjectContract CreateObjectContract(Type objectType);
    private static void ThrowUnableToSerializeError(object o, StreamingContext context);
    private MemberInfo GetExtensionDataMemberForType(Type type);
    private static void SetExtensionDataDelegates(JsonObjectContract contract, MemberInfo member);
    private ConstructorInfo GetAttributeConstructor(Type objectType);
    private ConstructorInfo GetImmutableConstructor(Type objectType, JsonPropertyCollection memberProperties);
    private ConstructorInfo GetParameterizedConstructor(Type objectType);
    protected virtual IList`1<JsonProperty> CreateConstructorParameters(ConstructorInfo constructor, JsonPropertyCollection memberProperties);
    private JsonProperty MatchProperty(JsonPropertyCollection properties, string name, Type type);
    protected virtual JsonProperty CreatePropertyFromConstructorParameter(JsonProperty matchingMemberProperty, ParameterInfo parameterInfo);
    protected virtual JsonConverter ResolveContractConverter(Type objectType);
    private Func`1<object> GetDefaultCreator(Type createdType);
    private void InitializeContract(JsonContract contract);
    private void ResolveCallbackMethods(JsonContract contract, Type t);
    private void GetCallbackMethodsForType(Type type, List`1& onSerializing, List`1& onSerialized, List`1& onDeserializing, List`1& onDeserialized, List`1& onError);
    private static bool IsConcurrentOrObservableCollection(Type t);
    private static bool ShouldSkipDeserialized(Type t);
    private static bool ShouldSkipSerializing(Type t);
    private List`1<Type> GetClassHierarchyForType(Type type);
    protected virtual JsonDictionaryContract CreateDictionaryContract(Type objectType);
    protected virtual JsonArrayContract CreateArrayContract(Type objectType);
    protected virtual JsonPrimitiveContract CreatePrimitiveContract(Type objectType);
    protected virtual JsonLinqContract CreateLinqContract(Type objectType);
    protected virtual JsonISerializableContract CreateISerializableContract(Type objectType);
    protected virtual JsonDynamicContract CreateDynamicContract(Type objectType);
    protected virtual JsonStringContract CreateStringContract(Type objectType);
    protected virtual JsonContract CreateContract(Type objectType);
    internal static bool IsJsonPrimitiveType(Type t);
    internal static bool IsIConvertible(Type t);
    internal static bool CanConvertToString(Type type);
    private static bool IsValidCallback(MethodInfo method, ParameterInfo[] parameters, Type attributeType, MethodInfo currentCallback, Type& prevAttributeType);
    internal static string GetClrTypeFullName(Type type);
    protected virtual IList`1<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization);
    internal virtual DefaultJsonNameTable GetNameTable();
    protected virtual IValueProvider CreateMemberValueProvider(MemberInfo member);
    protected virtual JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization);
    private void SetPropertySettingsFromAttributes(JsonProperty property, object attributeProvider, string name, Type declaringType, MemberSerialization memberSerialization, Boolean& allowNonPublicAccess);
    private Predicate`1<object> CreateShouldSerializeTest(MemberInfo member);
    private void SetIsSpecifiedActions(JsonProperty property, MemberInfo member, bool allowNonPublicAccess);
    protected virtual string ResolvePropertyName(string propertyName);
    protected virtual string ResolveExtensionDataName(string extensionDataName);
    protected virtual string ResolveDictionaryKey(string dictionaryKey);
    public string GetResolvedPropertyName(string propertyName);
}
internal class Newtonsoft.Json.Serialization.DefaultNamingStrategy : NamingStrategy {
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
protected virtual string ResolvePropertyName(string name);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Serialization.DefaultReferenceResolver : object {
    private int _referenceCount;
    private BidirectionalDictionary`2<string, object> GetMappings(object context);
    public sealed virtual object ResolveReference(object context, string reference);
    public sealed virtual string GetReference(object context, object value);
    public sealed virtual void AddReference(object context, string reference, object value);
    public sealed virtual bool IsReferenced(object context, object value);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Serialization.DefaultSerializationBinder : SerializationBinder {
    internal static DefaultSerializationBinder Instance;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ThreadSafeStore`2<StructMultiKey`2<string, string>, Type> _typeCache;
    private static DefaultSerializationBinder();
    private Type GetTypeFromTypeNameKey(StructMultiKey`2<string, string> typeNameKey);
    private Type GetGenericTypeFromTypeName(string typeName, Assembly assembly);
    private Type GetTypeByName(StructMultiKey`2<string, string> typeNameKey);
    public virtual Type BindToType(string assemblyName, string typeName);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
}
internal class Newtonsoft.Json.Serialization.DiagnosticsTraceWriter : object {
    [CompilerGeneratedAttribute]
private TraceLevel <LevelFilter>k__BackingField;
    public TraceLevel LevelFilter { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual TraceLevel get_LevelFilter();
    [CompilerGeneratedAttribute]
public void set_LevelFilter(TraceLevel value);
    private TraceEventType GetTraceEventType(TraceLevel level);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public sealed virtual void Trace(TraceLevel level, string message, Exception ex);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.ErrorContext : object {
    [CompilerGeneratedAttribute]
private bool <Traced>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <OriginalObject>k__BackingField;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    internal bool Traced { get; internal set; }
    public Exception Error { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public object OriginalObject { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public object Member { get; }
    public string Path { get; }
    public bool Handled { get; public set; }
    internal ErrorContext(object originalObject, object member, string path, Exception error);
    [CompilerGeneratedAttribute]
internal bool get_Traced();
    [CompilerGeneratedAttribute]
internal void set_Traced(bool value);
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public object get_OriginalObject();
    [CompilerGeneratedAttribute]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public object get_Member();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Serialization.ErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private object <CurrentObject>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorContext <ErrorContext>k__BackingField;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public object CurrentObject { get; }
    public ErrorContext ErrorContext { get; }
    public ErrorEventArgs(object currentObject, ErrorContext errorContext);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_CurrentObject();
    [CompilerGeneratedAttribute]
public ErrorContext get_ErrorContext();
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.ExpressionValueProvider : object {
    private MemberInfo _memberInfo;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<object, object> _getter;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`2<object, object> _setter;
    public ExpressionValueProvider(MemberInfo memberInfo);
    public sealed virtual void SetValue(object target, object value);
    public sealed virtual object GetValue(object target);
}
internal class Newtonsoft.Json.Serialization.ExtensionDataGetter : MulticastDelegate {
    public ExtensionDataGetter(object object, IntPtr method);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual IEnumerable`1<KeyValuePair`2<object, object>> Invoke(object o);
    public virtual IAsyncResult BeginInvoke(object o, AsyncCallback callback, object object);
    public virtual IEnumerable`1<KeyValuePair`2<object, object>> EndInvoke(IAsyncResult result);
}
internal class Newtonsoft.Json.Serialization.ExtensionDataSetter : MulticastDelegate {
    public ExtensionDataSetter(object object, IntPtr method);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual void Invoke(object o, string key, object value);
    public virtual IAsyncResult BeginInvoke(object o, string key, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal interface Newtonsoft.Json.Serialization.IAttributeProvider {
    public abstract virtual IList`1<Attribute> GetAttributes(bool inherit);
    public abstract virtual IList`1<Attribute> GetAttributes(Type attributeType, bool inherit);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal interface Newtonsoft.Json.Serialization.IContractResolver {
    public abstract virtual JsonContract ResolveContract(Type type);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal interface Newtonsoft.Json.Serialization.IReferenceResolver {
    public abstract virtual object ResolveReference(object context, string reference);
    public abstract virtual string GetReference(object context, object value);
    public abstract virtual bool IsReferenced(object context, object value);
    public abstract virtual void AddReference(object context, string reference, object value);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal interface Newtonsoft.Json.Serialization.ISerializationBinder {
    public abstract virtual Type BindToType(string assemblyName, string typeName);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public abstract virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal interface Newtonsoft.Json.Serialization.ITraceWriter {
    public TraceLevel LevelFilter { get; }
    public abstract virtual TraceLevel get_LevelFilter();
    public abstract virtual void Trace(TraceLevel level, string message, Exception ex);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal interface Newtonsoft.Json.Serialization.IValueProvider {
    public abstract virtual void SetValue(object target, object value);
    public abstract virtual object GetValue(object target);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal class Newtonsoft.Json.Serialization.JsonArrayContract : JsonContainerContract {
    [CompilerGeneratedAttribute]
private Type <CollectionItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMultidimensionalArray>k__BackingField;
    private Type _genericCollectionDefinitionType;
    private Type _genericWrapperType;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _genericWrapperCreator;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<object> _genericTemporaryCollectionCreator;
    [CompilerGeneratedAttribute]
private bool <IsArray>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldCreateWrapper>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanDeserialize>k__BackingField;
    private ConstructorInfo _parameterizedConstructor;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _parameterizedCreator;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _overrideCreator;
    [CompilerGeneratedAttribute]
private bool <HasParameterizedCreator>k__BackingField;
    public Type CollectionItemType { get; }
    public bool IsMultidimensionalArray { get; }
    internal bool IsArray { get; }
    internal bool ShouldCreateWrapper { get; }
    internal bool CanDeserialize { get; private set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ObjectConstructor`1<object> ParameterizedCreator { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ObjectConstructor`1<object> OverrideCreator { get; public set; }
    public bool HasParameterizedCreator { get; public set; }
    internal bool HasParameterizedCreatorInternal { get; }
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public JsonArrayContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public Type get_CollectionItemType();
    [CompilerGeneratedAttribute]
public bool get_IsMultidimensionalArray();
    [CompilerGeneratedAttribute]
internal bool get_IsArray();
    [CompilerGeneratedAttribute]
internal bool get_ShouldCreateWrapper();
    [CompilerGeneratedAttribute]
internal bool get_CanDeserialize();
    [CompilerGeneratedAttribute]
private void set_CanDeserialize(bool value);
    internal ObjectConstructor`1<object> get_ParameterizedCreator();
    public ObjectConstructor`1<object> get_OverrideCreator();
    public void set_OverrideCreator(ObjectConstructor`1<object> value);
    [CompilerGeneratedAttribute]
public bool get_HasParameterizedCreator();
    [CompilerGeneratedAttribute]
public void set_HasParameterizedCreator(bool value);
    internal bool get_HasParameterizedCreatorInternal();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal IWrappedCollection CreateWrapper(object list);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal IList CreateTemporaryCollection();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
private void StoreFSharpListCreatorIfNecessary(Type underlyingType);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.JsonContainerContract : JsonContract {
    private JsonContract _itemContract;
    private JsonContract _finalItemContract;
    [CompilerGeneratedAttribute]
private JsonConverter <ItemConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ItemIsReference>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReferenceLoopHandling> <ItemReferenceLoopHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TypeNameHandling> <ItemTypeNameHandling>k__BackingField;
    internal JsonContract ItemContract { get; internal set; }
    internal JsonContract FinalItemContract { get; }
    public JsonConverter ItemConverter { get; public set; }
    public Nullable`1<bool> ItemIsReference { get; public set; }
    public Nullable`1<ReferenceLoopHandling> ItemReferenceLoopHandling { get; public set; }
    public Nullable`1<TypeNameHandling> ItemTypeNameHandling { get; public set; }
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal JsonContainerContract(Type underlyingType);
    internal JsonContract get_ItemContract();
    internal void set_ItemContract(JsonContract value);
    internal JsonContract get_FinalItemContract();
    [CompilerGeneratedAttribute]
public JsonConverter get_ItemConverter();
    [CompilerGeneratedAttribute]
public void set_ItemConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ItemIsReference();
    [CompilerGeneratedAttribute]
public void set_ItemIsReference(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReferenceLoopHandling> get_ItemReferenceLoopHandling();
    [CompilerGeneratedAttribute]
public void set_ItemReferenceLoopHandling(Nullable`1<ReferenceLoopHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TypeNameHandling> get_ItemTypeNameHandling();
    [CompilerGeneratedAttribute]
public void set_ItemTypeNameHandling(Nullable`1<TypeNameHandling> value);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal abstract class Newtonsoft.Json.Serialization.JsonContract : object {
    internal bool IsNullable;
    internal bool IsConvertable;
    internal bool IsEnum;
    internal Type NonNullableUnderlyingType;
    internal ReadType InternalReadType;
    internal JsonContractType ContractType;
    internal bool IsReadOnlyOrFixedSize;
    internal bool IsSealed;
    internal bool IsInstantiable;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<SerializationCallback> _onDeserializedCallbacks;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<SerializationCallback> _onDeserializingCallbacks;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<SerializationCallback> _onSerializedCallbacks;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<SerializationCallback> _onSerializingCallbacks;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<SerializationErrorCallback> _onErrorCallbacks;
    private Type _createdType;
    [CompilerGeneratedAttribute]
private Type <UnderlyingType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsReference>k__BackingField;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JsonConverter <Converter>k__BackingField;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JsonConverter <InternalConverter>k__BackingField;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`1<object> <DefaultCreator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DefaultCreatorNonPublic>k__BackingField;
    public Type UnderlyingType { get; }
    public Type CreatedType { get; public set; }
    public Nullable`1<bool> IsReference { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public JsonConverter Converter { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public JsonConverter InternalConverter { get; internal set; }
    public IList`1<SerializationCallback> OnDeserializedCallbacks { get; }
    public IList`1<SerializationCallback> OnDeserializingCallbacks { get; }
    public IList`1<SerializationCallback> OnSerializedCallbacks { get; }
    public IList`1<SerializationCallback> OnSerializingCallbacks { get; }
    public IList`1<SerializationErrorCallback> OnErrorCallbacks { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<object> DefaultCreator { get; public set; }
    public bool DefaultCreatorNonPublic { get; public set; }
    internal JsonContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public Type get_UnderlyingType();
    public Type get_CreatedType();
    public void set_CreatedType(Type value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsReference();
    [CompilerGeneratedAttribute]
public void set_IsReference(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public JsonConverter get_Converter();
    [CompilerGeneratedAttribute]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public void set_Converter(JsonConverter value);
    [CompilerGeneratedAttribute]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public JsonConverter get_InternalConverter();
    [CompilerGeneratedAttribute]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal void set_InternalConverter(JsonConverter value);
    public IList`1<SerializationCallback> get_OnDeserializedCallbacks();
    public IList`1<SerializationCallback> get_OnDeserializingCallbacks();
    public IList`1<SerializationCallback> get_OnSerializedCallbacks();
    public IList`1<SerializationCallback> get_OnSerializingCallbacks();
    public IList`1<SerializationErrorCallback> get_OnErrorCallbacks();
    [CompilerGeneratedAttribute]
public Func`1<object> get_DefaultCreator();
    [CompilerGeneratedAttribute]
public void set_DefaultCreator(Func`1<object> value);
    [CompilerGeneratedAttribute]
public bool get_DefaultCreatorNonPublic();
    [CompilerGeneratedAttribute]
public void set_DefaultCreatorNonPublic(bool value);
    internal void InvokeOnSerializing(object o, StreamingContext context);
    internal void InvokeOnSerialized(object o, StreamingContext context);
    internal void InvokeOnDeserializing(object o, StreamingContext context);
    internal void InvokeOnDeserialized(object o, StreamingContext context);
    internal void InvokeOnError(object o, StreamingContext context, ErrorContext errorContext);
    internal static SerializationCallback CreateSerializationCallback(MethodInfo callbackMethodInfo);
    internal static SerializationErrorCallback CreateSerializationErrorCallback(MethodInfo callbackMethodInfo);
}
internal enum Newtonsoft.Json.Serialization.JsonContractType : Enum {
    public int value__;
    public static JsonContractType None;
    public static JsonContractType Object;
    public static JsonContractType Array;
    public static JsonContractType Primitive;
    public static JsonContractType String;
    public static JsonContractType Dictionary;
    public static JsonContractType Dynamic;
    public static JsonContractType Serializable;
    public static JsonContractType Linq;
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal class Newtonsoft.Json.Serialization.JsonDictionaryContract : JsonContainerContract {
    [CompilerGeneratedAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<string, string> <DictionaryKeyResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DictionaryKeyType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DictionaryValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonContract <KeyContract>k__BackingField;
    private Type _genericCollectionDefinitionType;
    private Type _genericWrapperType;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _genericWrapperCreator;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<object> _genericTemporaryDictionaryCreator;
    [CompilerGeneratedAttribute]
private bool <ShouldCreateWrapper>k__BackingField;
    private ConstructorInfo _parameterizedConstructor;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _overrideCreator;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _parameterizedCreator;
    [CompilerGeneratedAttribute]
private bool <HasParameterizedCreator>k__BackingField;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<string, string> DictionaryKeyResolver { get; public set; }
    public Type DictionaryKeyType { get; }
    public Type DictionaryValueType { get; }
    internal JsonContract KeyContract { get; internal set; }
    internal bool ShouldCreateWrapper { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ObjectConstructor`1<object> ParameterizedCreator { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ObjectConstructor`1<object> OverrideCreator { get; public set; }
    public bool HasParameterizedCreator { get; public set; }
    internal bool HasParameterizedCreatorInternal { get; }
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public JsonDictionaryContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_DictionaryKeyResolver();
    [CompilerGeneratedAttribute]
public void set_DictionaryKeyResolver(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public Type get_DictionaryKeyType();
    [CompilerGeneratedAttribute]
public Type get_DictionaryValueType();
    [CompilerGeneratedAttribute]
internal JsonContract get_KeyContract();
    [CompilerGeneratedAttribute]
internal void set_KeyContract(JsonContract value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldCreateWrapper();
    internal ObjectConstructor`1<object> get_ParameterizedCreator();
    public ObjectConstructor`1<object> get_OverrideCreator();
    public void set_OverrideCreator(ObjectConstructor`1<object> value);
    [CompilerGeneratedAttribute]
public bool get_HasParameterizedCreator();
    [CompilerGeneratedAttribute]
public void set_HasParameterizedCreator(bool value);
    internal bool get_HasParameterizedCreatorInternal();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal IWrappedDictionary CreateWrapper(object dictionary);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal IDictionary CreateTemporaryDictionary();
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.JsonDynamicContract : JsonContainerContract {
    [CompilerGeneratedAttribute]
private JsonPropertyCollection <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<string, string> <PropertyNameResolver>k__BackingField;
    private ThreadSafeStore`2<string, CallSite`1<Func`3<CallSite, object, object>>> _callSiteGetters;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ThreadSafeStore`2<string, CallSite`1<Func`4<CallSite, object, object, object>>> _callSiteSetters;
    public JsonPropertyCollection Properties { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<string, string> PropertyNameResolver { get; public set; }
    public JsonDynamicContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public JsonPropertyCollection get_Properties();
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_PropertyNameResolver();
    [CompilerGeneratedAttribute]
public void set_PropertyNameResolver(Func`2<string, string> value);
    private static CallSite`1<Func`3<CallSite, object, object>> CreateCallSiteGetter(string name);
    private static CallSite`1<Func`4<CallSite, object, object, object>> CreateCallSiteSetter(string name);
    internal bool TryGetMember(IDynamicMetaObjectProvider dynamicProvider, string name, Object& value);
    internal bool TrySetMember(IDynamicMetaObjectProvider dynamicProvider, string name, object value);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.JsonFormatterConverter : object {
    private JsonSerializerInternalReader _reader;
    private JsonISerializableContract _contract;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private JsonProperty _member;
    public JsonFormatterConverter(JsonSerializerInternalReader reader, JsonISerializableContract contract, JsonProperty member);
    private T GetTokenValue(object value);
    public sealed virtual object Convert(object value, Type type);
    public sealed virtual object Convert(object value, TypeCode typeCode);
    public sealed virtual bool ToBoolean(object value);
    public sealed virtual byte ToByte(object value);
    public sealed virtual char ToChar(object value);
    public sealed virtual DateTime ToDateTime(object value);
    public sealed virtual decimal ToDecimal(object value);
    public sealed virtual double ToDouble(object value);
    public sealed virtual short ToInt16(object value);
    public sealed virtual int ToInt32(object value);
    public sealed virtual long ToInt64(object value);
    public sealed virtual sbyte ToSByte(object value);
    public sealed virtual float ToSingle(object value);
    public sealed virtual string ToString(object value);
    public sealed virtual ushort ToUInt16(object value);
    public sealed virtual UInt32 ToUInt32(object value);
    public sealed virtual ulong ToUInt64(object value);
}
internal class Newtonsoft.Json.Serialization.JsonISerializableContract : JsonContainerContract {
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ObjectConstructor`1<object> <ISerializableCreator>k__BackingField;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ObjectConstructor`1<object> ISerializableCreator { get; public set; }
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public JsonISerializableContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public ObjectConstructor`1<object> get_ISerializableCreator();
    [CompilerGeneratedAttribute]
public void set_ISerializableCreator(ObjectConstructor`1<object> value);
}
internal class Newtonsoft.Json.Serialization.JsonLinqContract : JsonContract {
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public JsonLinqContract(Type underlyingType);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal class Newtonsoft.Json.Serialization.JsonObjectContract : JsonContainerContract {
    [CompilerGeneratedAttribute]
private MemberSerialization <MemberSerialization>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MissingMemberHandling> <MissingMemberHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Required> <ItemRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NullValueHandling> <ItemNullValueHandling>k__BackingField;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
[CompilerGeneratedAttribute]
private JsonPropertyCollection <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionDataSetter <ExtensionDataSetter>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionDataGetter <ExtensionDataGetter>k__BackingField;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<string, string> <ExtensionDataNameResolver>k__BackingField;
    internal bool ExtensionDataIsJToken;
    private Nullable`1<bool> _hasRequiredOrDefaultValueProperties;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _overrideCreator;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _parameterizedCreator;
    private JsonPropertyCollection _creatorParameters;
    private Type _extensionDataValueType;
    public MemberSerialization MemberSerialization { get; public set; }
    public Nullable`1<MissingMemberHandling> MissingMemberHandling { get; public set; }
    public Nullable`1<Required> ItemRequired { get; public set; }
    public Nullable`1<NullValueHandling> ItemNullValueHandling { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
public JsonPropertyCollection Properties { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
public JsonPropertyCollection CreatorParameters { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ObjectConstructor`1<object> OverrideCreator { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ObjectConstructor`1<object> ParameterizedCreator { get; internal set; }
    public ExtensionDataSetter ExtensionDataSetter { get; public set; }
    public ExtensionDataGetter ExtensionDataGetter { get; public set; }
    public Type ExtensionDataValueType { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<string, string> ExtensionDataNameResolver { get; public set; }
    internal bool HasRequiredOrDefaultValueProperties { get; }
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public JsonObjectContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public MemberSerialization get_MemberSerialization();
    [CompilerGeneratedAttribute]
public void set_MemberSerialization(MemberSerialization value);
    [CompilerGeneratedAttribute]
public Nullable`1<MissingMemberHandling> get_MissingMemberHandling();
    [CompilerGeneratedAttribute]
public void set_MissingMemberHandling(Nullable`1<MissingMemberHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Required> get_ItemRequired();
    [CompilerGeneratedAttribute]
public void set_ItemRequired(Nullable`1<Required> value);
    [CompilerGeneratedAttribute]
public Nullable`1<NullValueHandling> get_ItemNullValueHandling();
    [CompilerGeneratedAttribute]
public void set_ItemNullValueHandling(Nullable`1<NullValueHandling> value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public JsonPropertyCollection get_Properties();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public JsonPropertyCollection get_CreatorParameters();
    public ObjectConstructor`1<object> get_OverrideCreator();
    public void set_OverrideCreator(ObjectConstructor`1<object> value);
    internal ObjectConstructor`1<object> get_ParameterizedCreator();
    internal void set_ParameterizedCreator(ObjectConstructor`1<object> value);
    [CompilerGeneratedAttribute]
public ExtensionDataSetter get_ExtensionDataSetter();
    [CompilerGeneratedAttribute]
public void set_ExtensionDataSetter(ExtensionDataSetter value);
    [CompilerGeneratedAttribute]
public ExtensionDataGetter get_ExtensionDataGetter();
    [CompilerGeneratedAttribute]
public void set_ExtensionDataGetter(ExtensionDataGetter value);
    public Type get_ExtensionDataValueType();
    public void set_ExtensionDataValueType(Type value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_ExtensionDataNameResolver();
    [CompilerGeneratedAttribute]
public void set_ExtensionDataNameResolver(Func`2<string, string> value);
    internal bool get_HasRequiredOrDefaultValueProperties();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[SecuritySafeCriticalAttribute]
internal object GetUninitializedObject();
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Serialization.JsonPrimitiveContract : JsonContract {
    [CompilerGeneratedAttribute]
private PrimitiveTypeCode <TypeCode>k__BackingField;
    private static Dictionary`2<Type, ReadType> ReadTypeMap;
    internal PrimitiveTypeCode TypeCode { get; internal set; }
    public JsonPrimitiveContract(Type underlyingType);
    private static JsonPrimitiveContract();
    [CompilerGeneratedAttribute]
internal PrimitiveTypeCode get_TypeCode();
    [CompilerGeneratedAttribute]
internal void set_TypeCode(PrimitiveTypeCode value);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal class Newtonsoft.Json.Serialization.JsonProperty : object {
    internal Nullable`1<Required> _required;
    internal bool _hasExplicitDefaultValue;
    private object _defaultValue;
    private bool _hasGeneratedDefaultValue;
    private string _propertyName;
    internal bool _skipPropertyNameEscape;
    private Type _propertyType;
    [CompilerGeneratedAttribute]
private JsonContract <PropertyContract>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnderlyingName>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueProvider <ValueProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IAttributeProvider <AttributeProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignored>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Readable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Writable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasMemberAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsReference>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NullValueHandling> <NullValueHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DefaultValueHandling> <DefaultValueHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReferenceLoopHandling> <ReferenceLoopHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ObjectCreationHandling> <ObjectCreationHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TypeNameHandling> <TypeNameHandling>k__BackingField;
    [CompilerGeneratedAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Predicate`1<object> <ShouldSerialize>k__BackingField;
    [CompilerGeneratedAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Predicate`1<object> <ShouldDeserialize>k__BackingField;
    [CompilerGeneratedAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Predicate`1<object> <GetIsSpecified>k__BackingField;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<object, object> <SetIsSpecified>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <ItemConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ItemIsReference>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TypeNameHandling> <ItemTypeNameHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReferenceLoopHandling> <ItemReferenceLoopHandling>k__BackingField;
    internal JsonContract PropertyContract { get; internal set; }
    public string PropertyName { get; public set; }
    public Type DeclaringType { get; public set; }
    public Nullable`1<int> Order { get; public set; }
    public string UnderlyingName { get; public set; }
    public IValueProvider ValueProvider { get; public set; }
    public IAttributeProvider AttributeProvider { get; public set; }
    public Type PropertyType { get; public set; }
    public JsonConverter Converter { get; public set; }
    [ObsoleteAttribute("MemberConverter is obsolete. Use Converter instead.")]
public JsonConverter MemberConverter { get; public set; }
    public bool Ignored { get; public set; }
    public bool Readable { get; public set; }
    public bool Writable { get; public set; }
    public bool HasMemberAttribute { get; public set; }
    public object DefaultValue { get; public set; }
    public Required Required { get; public set; }
    public bool IsRequiredSpecified { get; }
    public Nullable`1<bool> IsReference { get; public set; }
    public Nullable`1<NullValueHandling> NullValueHandling { get; public set; }
    public Nullable`1<DefaultValueHandling> DefaultValueHandling { get; public set; }
    public Nullable`1<ReferenceLoopHandling> ReferenceLoopHandling { get; public set; }
    public Nullable`1<ObjectCreationHandling> ObjectCreationHandling { get; public set; }
    public Nullable`1<TypeNameHandling> TypeNameHandling { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Predicate`1<object> ShouldSerialize { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Predicate`1<object> ShouldDeserialize { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Predicate`1<object> GetIsSpecified { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<object, object> SetIsSpecified { get; public set; }
    public JsonConverter ItemConverter { get; public set; }
    public Nullable`1<bool> ItemIsReference { get; public set; }
    public Nullable`1<TypeNameHandling> ItemTypeNameHandling { get; public set; }
    public Nullable`1<ReferenceLoopHandling> ItemReferenceLoopHandling { get; public set; }
    [CompilerGeneratedAttribute]
internal JsonContract get_PropertyContract();
    [CompilerGeneratedAttribute]
internal void set_PropertyContract(JsonContract value);
    public string get_PropertyName();
    public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public Type get_DeclaringType();
    [CompilerGeneratedAttribute]
public void set_DeclaringType(Type value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_UnderlyingName();
    [CompilerGeneratedAttribute]
public void set_UnderlyingName(string value);
    [CompilerGeneratedAttribute]
public IValueProvider get_ValueProvider();
    [CompilerGeneratedAttribute]
public void set_ValueProvider(IValueProvider value);
    [CompilerGeneratedAttribute]
public IAttributeProvider get_AttributeProvider();
    [CompilerGeneratedAttribute]
public void set_AttributeProvider(IAttributeProvider value);
    public Type get_PropertyType();
    public void set_PropertyType(Type value);
    [CompilerGeneratedAttribute]
public JsonConverter get_Converter();
    [CompilerGeneratedAttribute]
public void set_Converter(JsonConverter value);
    public JsonConverter get_MemberConverter();
    public void set_MemberConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public bool get_Ignored();
    [CompilerGeneratedAttribute]
public void set_Ignored(bool value);
    [CompilerGeneratedAttribute]
public bool get_Readable();
    [CompilerGeneratedAttribute]
public void set_Readable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Writable();
    [CompilerGeneratedAttribute]
public void set_Writable(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasMemberAttribute();
    [CompilerGeneratedAttribute]
public void set_HasMemberAttribute(bool value);
    public object get_DefaultValue();
    public void set_DefaultValue(object value);
    internal object GetResolvedDefaultValue();
    public Required get_Required();
    public void set_Required(Required value);
    public bool get_IsRequiredSpecified();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsReference();
    [CompilerGeneratedAttribute]
public void set_IsReference(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<NullValueHandling> get_NullValueHandling();
    [CompilerGeneratedAttribute]
public void set_NullValueHandling(Nullable`1<NullValueHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DefaultValueHandling> get_DefaultValueHandling();
    [CompilerGeneratedAttribute]
public void set_DefaultValueHandling(Nullable`1<DefaultValueHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReferenceLoopHandling> get_ReferenceLoopHandling();
    [CompilerGeneratedAttribute]
public void set_ReferenceLoopHandling(Nullable`1<ReferenceLoopHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ObjectCreationHandling> get_ObjectCreationHandling();
    [CompilerGeneratedAttribute]
public void set_ObjectCreationHandling(Nullable`1<ObjectCreationHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TypeNameHandling> get_TypeNameHandling();
    [CompilerGeneratedAttribute]
public void set_TypeNameHandling(Nullable`1<TypeNameHandling> value);
    [CompilerGeneratedAttribute]
public Predicate`1<object> get_ShouldSerialize();
    [CompilerGeneratedAttribute]
public void set_ShouldSerialize(Predicate`1<object> value);
    [CompilerGeneratedAttribute]
public Predicate`1<object> get_ShouldDeserialize();
    [CompilerGeneratedAttribute]
public void set_ShouldDeserialize(Predicate`1<object> value);
    [CompilerGeneratedAttribute]
public Predicate`1<object> get_GetIsSpecified();
    [CompilerGeneratedAttribute]
public void set_GetIsSpecified(Predicate`1<object> value);
    [CompilerGeneratedAttribute]
public Action`2<object, object> get_SetIsSpecified();
    [CompilerGeneratedAttribute]
public void set_SetIsSpecified(Action`2<object, object> value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public JsonConverter get_ItemConverter();
    [CompilerGeneratedAttribute]
public void set_ItemConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ItemIsReference();
    [CompilerGeneratedAttribute]
public void set_ItemIsReference(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TypeNameHandling> get_ItemTypeNameHandling();
    [CompilerGeneratedAttribute]
public void set_ItemTypeNameHandling(Nullable`1<TypeNameHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReferenceLoopHandling> get_ItemReferenceLoopHandling();
    [CompilerGeneratedAttribute]
public void set_ItemReferenceLoopHandling(Nullable`1<ReferenceLoopHandling> value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal void WritePropertyName(JsonWriter writer);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Newtonsoft.Json.Serialization.JsonPropertyCollection : KeyedCollection`2<string, JsonProperty> {
    private Type _type;
    private List`1<JsonProperty> _list;
    public JsonPropertyCollection(Type type);
    protected virtual string GetKeyForItem(JsonProperty item);
    public void AddProperty(JsonProperty property);
    public JsonProperty GetClosestMatchProperty(string propertyName);
    private bool TryGetValue(string key, JsonProperty& item);
    public JsonProperty GetProperty(string propertyName, StringComparison comparisonType);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal abstract class Newtonsoft.Json.Serialization.JsonSerializerInternalBase : object {
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private ErrorContext _currentErrorContext;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private BidirectionalDictionary`2<string, object> _mappings;
    internal JsonSerializer Serializer;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
internal ITraceWriter TraceWriter;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
protected JsonSerializerProxy InternalSerializer;
    internal BidirectionalDictionary`2<string, object> DefaultReferenceMappings { get; }
    protected JsonSerializerInternalBase(JsonSerializer serializer);
    internal BidirectionalDictionary`2<string, object> get_DefaultReferenceMappings();
    protected NullValueHandling ResolvedNullValueHandling(JsonObjectContract containerContract, JsonProperty property);
    private ErrorContext GetErrorContext(object currentObject, object member, string path, Exception error);
    protected void ClearErrorContext();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
protected bool IsErrorHandled(object currentObject, JsonContract contract, object keyValue, IJsonLineInfo lineInfo, string path, Exception ex);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.JsonSerializerInternalReader : JsonSerializerInternalBase {
    public JsonSerializerInternalReader(JsonSerializer serializer);
    public void Populate(JsonReader reader, object target);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private JsonContract GetContractSafe(Type type);
    private JsonContract GetContract(Type type);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public object Deserialize(JsonReader reader, Type objectType, bool checkAdditionalContent);
    private JsonSerializerProxy GetInternalSerializer();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private JToken CreateJToken(JsonReader reader, JsonContract contract);
    private JToken CreateJObject(JsonReader reader);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private object CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, object existingValue);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private static bool CoerceEmptyStringToNull(Type objectType, JsonContract contract, string s);
    internal string GetExpectedDescription(JsonContract contract);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private JsonConverter GetConverter(JsonContract contract, JsonConverter memberConverter, JsonContainerContract containerContract, JsonProperty containerProperty);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private object CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, object existingValue);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private bool ReadMetadataPropertiesToken(JTokenReader reader, Type& objectType, JsonContract& contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, object existingValue, Object& newValue, String& id);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private bool ReadMetadataProperties(JsonReader reader, Type& objectType, JsonContract& contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, object existingValue, Object& newValue, String& id);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private void ResolveTypeName(JsonReader reader, Type& objectType, JsonContract& contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, string qualifiedTypeName);
    private JsonArrayContract EnsureArrayContract(JsonReader reader, Type objectType, JsonContract contract);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private object CreateList(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, object existingValue, string id);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private bool HasNoDefinedType(JsonContract contract);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private object EnsureType(JsonReader reader, object value, CultureInfo culture, JsonContract contract, Type targetType);
    private bool SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, object target);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private bool CalculatePropertyDetails(JsonProperty property, JsonConverter& propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, object target, Boolean& useExistingValue, Object& currentValue, JsonContract& propertyContract, Boolean& gottenCurrentValue, Boolean& ignoredValue);
    private void AddReference(JsonReader reader, string id, object value);
    private bool HasFlag(DefaultValueHandling value, DefaultValueHandling flag);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private bool ShouldSetPropertyValue(JsonProperty property, JsonObjectContract contract, object value);
    private IList CreateNewList(JsonReader reader, JsonArrayContract contract, Boolean& createdFromNonDefaultCreator);
    private IDictionary CreateNewDictionary(JsonReader reader, JsonDictionaryContract contract, Boolean& createdFromNonDefaultCreator);
    private void OnDeserializing(JsonReader reader, JsonContract contract, object value);
    private void OnDeserialized(JsonReader reader, JsonContract contract, object value);
    private object PopulateDictionary(IDictionary dictionary, JsonReader reader, JsonDictionaryContract contract, JsonProperty containerProperty, string id);
    private object PopulateMultidimensionalArray(IList list, JsonReader reader, JsonArrayContract contract, JsonProperty containerProperty, string id);
    private void ThrowUnexpectedEndException(JsonReader reader, JsonContract contract, object currentObject, string message);
    private object PopulateList(IList list, JsonReader reader, JsonArrayContract contract, JsonProperty containerProperty, string id);
    private object CreateISerializable(JsonReader reader, JsonISerializableContract contract, JsonProperty member, string id);
    internal object CreateISerializableItem(JToken token, Type type, JsonISerializableContract contract, JsonProperty member);
    private object CreateDynamic(JsonReader reader, JsonDynamicContract contract, JsonProperty member, string id);
    private object CreateObjectUsingCreatorWithParameters(JsonReader reader, JsonObjectContract contract, JsonProperty containerProperty, ObjectConstructor`1<object> creator, string id);
    private object DeserializeConvertable(JsonConverter converter, JsonReader reader, Type objectType, object existingValue);
    private List`1<CreatorPropertyContext> ResolvePropertyAndCreatorValues(JsonObjectContract contract, JsonProperty containerProperty, JsonReader reader, Type objectType);
    public object CreateNewObject(JsonReader reader, JsonObjectContract objectContract, JsonProperty containerMember, JsonProperty containerProperty, string id, Boolean& createdFromNonDefaultCreator);
    private object PopulateObject(object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, string id);
    private bool ShouldDeserialize(JsonReader reader, JsonProperty property, object target);
    private bool CheckPropertyName(JsonReader reader, string memberName);
    private void SetExtensionData(JsonObjectContract contract, JsonProperty member, JsonReader reader, string memberName, object o);
    private object ReadExtensionDataValue(JsonObjectContract contract, JsonProperty member, JsonReader reader);
    private void EndProcessProperty(object newObject, JsonReader reader, JsonObjectContract contract, int initialDepth, JsonProperty property, PropertyPresence presence, bool setDefaultValue);
    private void SetPropertyPresence(JsonReader reader, JsonProperty property, Dictionary`2<JsonProperty, PropertyPresence> requiredProperties);
    private void HandleError(JsonReader reader, bool readPastError, int initialDepth);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.JsonSerializerInternalWriter : JsonSerializerInternalBase {
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private Type _rootType;
    private int _rootLevel;
    private List`1<object> _serializeStack;
    public JsonSerializerInternalWriter(JsonSerializer serializer);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public void Serialize(JsonWriter jsonWriter, object value, Type objectType);
    private JsonSerializerProxy GetInternalSerializer();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private JsonContract GetContractSafe(object value);
    private JsonContract GetContract(object value);
    private void SerializePrimitive(JsonWriter writer, object value, JsonPrimitiveContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private void SerializeValue(JsonWriter writer, object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private Nullable`1<bool> ResolveIsReference(JsonContract contract, JsonProperty property, JsonContainerContract collectionContract, JsonProperty containerProperty);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private bool ShouldWriteReference(object value, JsonProperty property, JsonContract valueContract, JsonContainerContract collectionContract, JsonProperty containerProperty);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private bool ShouldWriteProperty(object memberValue, JsonObjectContract containerContract, JsonProperty property);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private bool CheckForCircularReference(JsonWriter writer, object value, JsonProperty property, JsonContract contract, JsonContainerContract containerContract, JsonProperty containerProperty);
    private void WriteReference(JsonWriter writer, object value);
    private string GetReference(JsonWriter writer, object value);
    internal static bool TryConvertToString(object value, Type type, String& s);
    private void SerializeString(JsonWriter writer, object value, JsonStringContract contract);
    private void OnSerializing(JsonWriter writer, JsonContract contract, object value);
    private void OnSerialized(JsonWriter writer, JsonContract contract, object value);
    private void SerializeObject(JsonWriter writer, object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private bool CalculatePropertyValues(JsonWriter writer, object value, JsonContainerContract contract, JsonProperty member, JsonProperty property, JsonContract& memberContract, Object& memberValue);
    private void WriteObjectStart(JsonWriter writer, object value, JsonContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private bool HasCreatorParameter(JsonContainerContract contract, JsonProperty property);
    private void WriteReferenceIdProperty(JsonWriter writer, Type type, object value);
    private void WriteTypeProperty(JsonWriter writer, Type type);
    private bool HasFlag(DefaultValueHandling value, DefaultValueHandling flag);
    private bool HasFlag(PreserveReferencesHandling value, PreserveReferencesHandling flag);
    private bool HasFlag(TypeNameHandling value, TypeNameHandling flag);
    private void SerializeConvertable(JsonWriter writer, JsonConverter converter, object value, JsonContract contract, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private void SerializeList(JsonWriter writer, IEnumerable values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private void SerializeMultidimensionalArray(JsonWriter writer, Array values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private void SerializeMultidimensionalArray(JsonWriter writer, Array values, JsonArrayContract contract, JsonProperty member, int initialDepth, Int32[] indices);
    private bool WriteStartArray(JsonWriter writer, object values, JsonArrayContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty);
    [SecuritySafeCriticalAttribute]
private void SerializeISerializable(JsonWriter writer, ISerializable value, JsonISerializableContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private void SerializeDynamic(JsonWriter writer, IDynamicMetaObjectProvider value, JsonDynamicContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private bool ShouldWriteDynamicProperty(object memberValue);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private bool ShouldWriteType(TypeNameHandling typeNameHandlingFlag, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty);
    private void SerializeDictionary(JsonWriter writer, IDictionary values, JsonDictionaryContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private string GetPropertyName(JsonWriter writer, object name, JsonContract contract, Boolean& escape);
    private void HandleError(JsonWriter writer, int initialDepth);
    private bool ShouldSerialize(JsonWriter writer, JsonProperty property, object target);
    private bool IsSpecified(JsonWriter writer, JsonProperty property, object target);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.JsonSerializerProxy : JsonSerializer {
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private JsonSerializerInternalReader _serializerReader;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private JsonSerializerInternalWriter _serializerWriter;
    private JsonSerializer _serializer;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public IReferenceResolver ReferenceResolver { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public ITraceWriter TraceWriter { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public IEqualityComparer EqualityComparer { get; public set; }
    public JsonConverterCollection Converters { get; }
    public DefaultValueHandling DefaultValueHandling { get; public set; }
    public IContractResolver ContractResolver { get; public set; }
    public MissingMemberHandling MissingMemberHandling { get; public set; }
    public NullValueHandling NullValueHandling { get; public set; }
    public ObjectCreationHandling ObjectCreationHandling { get; public set; }
    public ReferenceLoopHandling ReferenceLoopHandling { get; public set; }
    public PreserveReferencesHandling PreserveReferencesHandling { get; public set; }
    public TypeNameHandling TypeNameHandling { get; public set; }
    public MetadataPropertyHandling MetadataPropertyHandling { get; public set; }
    [ObsoleteAttribute("TypeNameAssemblyFormat is obsolete. Use TypeNameAssemblyFormatHandling instead.")]
public FormatterAssemblyStyle TypeNameAssemblyFormat { get; public set; }
    public TypeNameAssemblyFormatHandling TypeNameAssemblyFormatHandling { get; public set; }
    public ConstructorHandling ConstructorHandling { get; public set; }
    [ObsoleteAttribute("Binder is obsolete. Use SerializationBinder instead.")]
public SerializationBinder Binder { get; public set; }
    public ISerializationBinder SerializationBinder { get; public set; }
    public StreamingContext Context { get; public set; }
    public Formatting Formatting { get; public set; }
    public DateFormatHandling DateFormatHandling { get; public set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public DateParseHandling DateParseHandling { get; public set; }
    public FloatFormatHandling FloatFormatHandling { get; public set; }
    public FloatParseHandling FloatParseHandling { get; public set; }
    public StringEscapeHandling StringEscapeHandling { get; public set; }
    public string DateFormatString { get; public set; }
    public CultureInfo Culture { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public bool CheckAdditionalContent { get; public set; }
    public JsonSerializerProxy(JsonSerializerInternalReader serializerReader);
    public JsonSerializerProxy(JsonSerializerInternalWriter serializerWriter);
    public virtual void add_Error(EventHandler`1<ErrorEventArgs> value);
    public virtual void remove_Error(EventHandler`1<ErrorEventArgs> value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual IReferenceResolver get_ReferenceResolver();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void set_ReferenceResolver(IReferenceResolver value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual ITraceWriter get_TraceWriter();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void set_TraceWriter(ITraceWriter value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual IEqualityComparer get_EqualityComparer();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void set_EqualityComparer(IEqualityComparer value);
    public virtual JsonConverterCollection get_Converters();
    public virtual DefaultValueHandling get_DefaultValueHandling();
    public virtual void set_DefaultValueHandling(DefaultValueHandling value);
    public virtual IContractResolver get_ContractResolver();
    public virtual void set_ContractResolver(IContractResolver value);
    public virtual MissingMemberHandling get_MissingMemberHandling();
    public virtual void set_MissingMemberHandling(MissingMemberHandling value);
    public virtual NullValueHandling get_NullValueHandling();
    public virtual void set_NullValueHandling(NullValueHandling value);
    public virtual ObjectCreationHandling get_ObjectCreationHandling();
    public virtual void set_ObjectCreationHandling(ObjectCreationHandling value);
    public virtual ReferenceLoopHandling get_ReferenceLoopHandling();
    public virtual void set_ReferenceLoopHandling(ReferenceLoopHandling value);
    public virtual PreserveReferencesHandling get_PreserveReferencesHandling();
    public virtual void set_PreserveReferencesHandling(PreserveReferencesHandling value);
    public virtual TypeNameHandling get_TypeNameHandling();
    public virtual void set_TypeNameHandling(TypeNameHandling value);
    public virtual MetadataPropertyHandling get_MetadataPropertyHandling();
    public virtual void set_MetadataPropertyHandling(MetadataPropertyHandling value);
    public virtual FormatterAssemblyStyle get_TypeNameAssemblyFormat();
    public virtual void set_TypeNameAssemblyFormat(FormatterAssemblyStyle value);
    public virtual TypeNameAssemblyFormatHandling get_TypeNameAssemblyFormatHandling();
    public virtual void set_TypeNameAssemblyFormatHandling(TypeNameAssemblyFormatHandling value);
    public virtual ConstructorHandling get_ConstructorHandling();
    public virtual void set_ConstructorHandling(ConstructorHandling value);
    public virtual SerializationBinder get_Binder();
    public virtual void set_Binder(SerializationBinder value);
    public virtual ISerializationBinder get_SerializationBinder();
    public virtual void set_SerializationBinder(ISerializationBinder value);
    public virtual StreamingContext get_Context();
    public virtual void set_Context(StreamingContext value);
    public virtual Formatting get_Formatting();
    public virtual void set_Formatting(Formatting value);
    public virtual DateFormatHandling get_DateFormatHandling();
    public virtual void set_DateFormatHandling(DateFormatHandling value);
    public virtual DateTimeZoneHandling get_DateTimeZoneHandling();
    public virtual void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public virtual DateParseHandling get_DateParseHandling();
    public virtual void set_DateParseHandling(DateParseHandling value);
    public virtual FloatFormatHandling get_FloatFormatHandling();
    public virtual void set_FloatFormatHandling(FloatFormatHandling value);
    public virtual FloatParseHandling get_FloatParseHandling();
    public virtual void set_FloatParseHandling(FloatParseHandling value);
    public virtual StringEscapeHandling get_StringEscapeHandling();
    public virtual void set_StringEscapeHandling(StringEscapeHandling value);
    public virtual string get_DateFormatString();
    public virtual void set_DateFormatString(string value);
    public virtual CultureInfo get_Culture();
    public virtual void set_Culture(CultureInfo value);
    public virtual Nullable`1<int> get_MaxDepth();
    public virtual void set_MaxDepth(Nullable`1<int> value);
    public virtual bool get_CheckAdditionalContent();
    public virtual void set_CheckAdditionalContent(bool value);
    internal JsonSerializerInternalBase GetInternalSerializer();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal virtual object DeserializeInternal(JsonReader reader, Type objectType);
    internal virtual void PopulateInternal(JsonReader reader, object target);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal virtual void SerializeInternal(JsonWriter jsonWriter, object value, Type rootType);
}
internal class Newtonsoft.Json.Serialization.JsonStringContract : JsonPrimitiveContract {
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public JsonStringContract(Type underlyingType);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal static class Newtonsoft.Json.Serialization.JsonTypeReflector : object {
    private static Nullable`1<bool> _dynamicCodeGeneration;
    private static Nullable`1<bool> _fullyTrusted;
    public static string IdPropertyName;
    public static string RefPropertyName;
    public static string TypePropertyName;
    public static string ValuePropertyName;
    public static string ArrayValuesPropertyName;
    public static string ShouldSerializePrefix;
    public static string SpecifiedPostfix;
    public static string ConcurrentDictionaryTypeName;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ThreadSafeStore`2<Type, Func`2<Object[], object>> CreatorCache;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ThreadSafeStore`2<Type, Type> AssociatedMetadataTypesCache;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private static ReflectionObject _metadataTypeAttributeReflectionObject;
    public static bool DynamicCodeGeneration { get; }
    public static bool FullyTrusted { get; }
    public static ReflectionDelegateFactory ReflectionDelegateFactory { get; }
    private static JsonTypeReflector();
    public static T GetCachedAttribute(object attributeProvider);
    public static bool CanTypeDescriptorConvertString(Type type, TypeConverter& typeConverter);
    public static DataContractAttribute GetDataContractAttribute(Type type);
    public static DataMemberAttribute GetDataMemberAttribute(MemberInfo memberInfo);
    public static MemberSerialization GetObjectMemberSerialization(Type objectType, bool ignoreSerializableAttribute);
    public static JsonConverter GetJsonConverter(object attributeProvider);
    public static JsonConverter CreateJsonConverterInstance(Type converterType, Object[] args);
    public static NamingStrategy CreateNamingStrategyInstance(Type namingStrategyType, Object[] args);
    public static NamingStrategy GetContainerNamingStrategy(JsonContainerAttribute containerAttribute);
    private static Func`2<Object[], object> GetCreator(Type type);
    private static Type GetAssociatedMetadataType(Type type);
    private static Type GetAssociateMetadataTypeFromAttribute(Type type);
    private static T GetAttribute(Type type);
    private static T GetAttribute(MemberInfo memberInfo);
    public static bool IsNonSerializable(object provider);
    public static bool IsSerializable(object provider);
    public static T GetAttribute(object provider);
    [SecuritySafeCriticalAttribute]
public static bool get_DynamicCodeGeneration();
    public static bool get_FullyTrusted();
    public static ReflectionDelegateFactory get_ReflectionDelegateFactory();
}
internal class Newtonsoft.Json.Serialization.KebabCaseNamingStrategy : NamingStrategy {
    public KebabCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames);
    public KebabCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames, bool processExtensionDataNames);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
protected virtual string ResolvePropertyName(string name);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.MemoryTraceWriter : object {
    private Queue`1<string> _traceMessages;
    private object _lock;
    [CompilerGeneratedAttribute]
private TraceLevel <LevelFilter>k__BackingField;
    public TraceLevel LevelFilter { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual TraceLevel get_LevelFilter();
    [CompilerGeneratedAttribute]
public void set_LevelFilter(TraceLevel value);
    public sealed virtual void Trace(TraceLevel level, string message, Exception ex);
    public IEnumerable`1<string> GetTraceMessages();
    public virtual string ToString();
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal abstract class Newtonsoft.Json.Serialization.NamingStrategy : object {
    [CompilerGeneratedAttribute]
private bool <ProcessDictionaryKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProcessExtensionDataNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OverrideSpecifiedNames>k__BackingField;
    public bool ProcessDictionaryKeys { get; public set; }
    public bool ProcessExtensionDataNames { get; public set; }
    public bool OverrideSpecifiedNames { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ProcessDictionaryKeys();
    [CompilerGeneratedAttribute]
public void set_ProcessDictionaryKeys(bool value);
    [CompilerGeneratedAttribute]
public bool get_ProcessExtensionDataNames();
    [CompilerGeneratedAttribute]
public void set_ProcessExtensionDataNames(bool value);
    [CompilerGeneratedAttribute]
public bool get_OverrideSpecifiedNames();
    [CompilerGeneratedAttribute]
public void set_OverrideSpecifiedNames(bool value);
    public virtual string GetPropertyName(string name, bool hasSpecifiedName);
    public virtual string GetExtensionDataName(string name);
    public virtual string GetDictionaryKey(string key);
    protected abstract virtual string ResolvePropertyName(string name);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
protected bool Equals(NamingStrategy other);
}
internal class Newtonsoft.Json.Serialization.ObjectConstructor`1 : MulticastDelegate {
    public ObjectConstructor`1(object object, IntPtr method);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual object Invoke(Object[] args);
    public virtual IAsyncResult BeginInvoke(Object[] args, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("64")]
internal class Newtonsoft.Json.Serialization.OnErrorAttribute : Attribute {
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.ReflectionAttributeProvider : object {
    private object _attributeProvider;
    public ReflectionAttributeProvider(object attributeProvider);
    public sealed virtual IList`1<Attribute> GetAttributes(bool inherit);
    public sealed virtual IList`1<Attribute> GetAttributes(Type attributeType, bool inherit);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Serialization.ReflectionValueProvider : object {
    private MemberInfo _memberInfo;
    public ReflectionValueProvider(MemberInfo memberInfo);
    public sealed virtual void SetValue(object target, object value);
    public sealed virtual object GetValue(object target);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Serialization.SerializationBinderAdapter : object {
    public SerializationBinder SerializationBinder;
    public SerializationBinderAdapter(SerializationBinder serializationBinder);
    public sealed virtual Type BindToType(string assemblyName, string typeName);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public sealed virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
}
internal class Newtonsoft.Json.Serialization.SerializationCallback : MulticastDelegate {
    public SerializationCallback(object object, IntPtr method);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual void Invoke(object o, StreamingContext context);
    public virtual IAsyncResult BeginInvoke(object o, StreamingContext context, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Newtonsoft.Json.Serialization.SerializationErrorCallback : MulticastDelegate {
    public SerializationErrorCallback(object object, IntPtr method);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual void Invoke(object o, StreamingContext context, ErrorContext errorContext);
    public virtual IAsyncResult BeginInvoke(object o, StreamingContext context, ErrorContext errorContext, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy : NamingStrategy {
    public SnakeCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames);
    public SnakeCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames, bool processExtensionDataNames);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
protected virtual string ResolvePropertyName(string name);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Serialization.TraceJsonReader : JsonReader {
    private JsonReader _innerReader;
    private JsonTextWriter _textWriter;
    private StringWriter _sw;
    public int Depth { get; }
    public string Path { get; }
    public char QuoteChar { get; protected internal set; }
    public JsonToken TokenType { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public object Value { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
public Type ValueType { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LineNumber { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LinePosition { get; }
    public TraceJsonReader(JsonReader innerReader);
    public string GetDeserializedJsonMessage();
    public virtual bool Read();
    public virtual Nullable`1<int> ReadAsInt32();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual string ReadAsString();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual Byte[] ReadAsBytes();
    public virtual Nullable`1<decimal> ReadAsDecimal();
    public virtual Nullable`1<double> ReadAsDouble();
    public virtual Nullable`1<bool> ReadAsBoolean();
    public virtual Nullable`1<DateTime> ReadAsDateTime();
    public virtual Nullable`1<DateTimeOffset> ReadAsDateTimeOffset();
    public void WriteCurrentToken();
    public virtual int get_Depth();
    public virtual string get_Path();
    public virtual char get_QuoteChar();
    protected internal virtual void set_QuoteChar(char value);
    public virtual JsonToken get_TokenType();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual object get_Value();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual Type get_ValueType();
    public virtual void Close();
    private sealed virtual override bool Newtonsoft.Json.IJsonLineInfo.HasLineInfo();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LineNumber();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LinePosition();
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Serialization.TraceJsonWriter : JsonWriter {
    private JsonWriter _innerWriter;
    private JsonTextWriter _textWriter;
    private StringWriter _sw;
    public TraceJsonWriter(JsonWriter innerWriter);
    public string GetSerializedJsonMessage();
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(Nullable`1<decimal> value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(Nullable`1<bool> value);
    public virtual void WriteValue(byte value);
    public virtual void WriteValue(Nullable`1<byte> value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(Nullable`1<char> value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(Nullable`1<DateTime> value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Nullable`1<DateTimeOffset> value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(Nullable`1<double> value);
    public virtual void WriteUndefined();
    public virtual void WriteNull();
    public virtual void WriteValue(float value);
    public virtual void WriteValue(Nullable`1<float> value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(Nullable`1<Guid> value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(Nullable`1<int> value);
    public virtual void WriteValue(long value);
    public virtual void WriteValue(Nullable`1<long> value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void WriteValue(object value);
    public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(Nullable`1<sbyte> value);
    public virtual void WriteValue(short value);
    public virtual void WriteValue(Nullable`1<short> value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void WriteValue(string value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Nullable`1<TimeSpan> value);
    public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(Nullable`1<UInt32> value);
    public virtual void WriteValue(ulong value);
    public virtual void WriteValue(Nullable`1<ulong> value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void WriteValue(Uri value);
    public virtual void WriteValue(ushort value);
    public virtual void WriteValue(Nullable`1<ushort> value);
    public virtual void WriteWhitespace(string ws);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void WriteComment(string text);
    public virtual void WriteStartArray();
    public virtual void WriteEndArray();
    public virtual void WriteStartConstructor(string name);
    public virtual void WriteEndConstructor();
    public virtual void WritePropertyName(string name);
    public virtual void WritePropertyName(string name, bool escape);
    public virtual void WriteStartObject();
    public virtual void WriteEndObject();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void WriteRawValue(string json);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public virtual void WriteRaw(string json);
    public virtual void Close();
    public virtual void Flush();
}
internal enum Newtonsoft.Json.StringEscapeHandling : Enum {
    public int value__;
    public static StringEscapeHandling Default;
    public static StringEscapeHandling EscapeNonAscii;
    public static StringEscapeHandling EscapeHtml;
}
internal enum Newtonsoft.Json.TypeNameAssemblyFormatHandling : Enum {
    public int value__;
    public static TypeNameAssemblyFormatHandling Simple;
    public static TypeNameAssemblyFormatHandling Full;
}
[FlagsAttribute]
internal enum Newtonsoft.Json.TypeNameHandling : Enum {
    public int value__;
    public static TypeNameHandling None;
    public static TypeNameHandling Objects;
    public static TypeNameHandling Arrays;
    public static TypeNameHandling All;
    public static TypeNameHandling Auto;
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[ExtensionAttribute]
internal static class Newtonsoft.Json.Utilities.AsyncUtils : object {
    public static Task`1<bool> False;
    public static Task`1<bool> True;
    internal static Task CompletedTask;
    private static AsyncUtils();
    [ExtensionAttribute]
internal static Task`1<bool> ToAsync(bool value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task CancelIfRequestedAsync(CancellationToken cancellationToken);
    [ExtensionAttribute]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static Task`1<T> CancelIfRequestedAsync(CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task FromCanceled(CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FromCanceled(CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task WriteAsync(TextWriter writer, char value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task WriteAsync(TextWriter writer, string value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task WriteAsync(TextWriter writer, Char[] value, int start, int count, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ReadAsync(TextReader reader, Char[] buffer, int index, int count, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool IsCompletedSucessfully(Task task);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Utilities.Base64Encoder : object {
    private static int Base64LineSize;
    private static int LineSizeInBytes;
    private Char[] _charsLine;
    private TextWriter _writer;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private Byte[] _leftOverBytes;
    private int _leftOverBytesCount;
    public Base64Encoder(TextWriter writer);
    private void ValidateEncode(Byte[] buffer, int index, int count);
    public void Encode(Byte[] buffer, int index, int count);
    private void StoreLeftOverBytes(Byte[] buffer, int index, Int32& count);
    private bool FulfillFromLeftover(Byte[] buffer, int index, Int32& count);
    public void Flush();
    private void WriteChars(Char[] chars, int index, int count);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Utilities.Base64Encoder/<EncodeAsync>d__13")]
public Task EncodeAsync(Byte[] buffer, int index, int count, CancellationToken cancellationToken);
    private Task WriteCharsAsync(Char[] chars, int index, int count, CancellationToken cancellationToken);
    public Task FlushAsync(CancellationToken cancellationToken);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Utilities.BidirectionalDictionary`2 : object {
    private IDictionary`2<TFirst, TSecond> _firstToSecond;
    private IDictionary`2<TSecond, TFirst> _secondToFirst;
    private string _duplicateFirstErrorMessage;
    private string _duplicateSecondErrorMessage;
    public BidirectionalDictionary`2(IEqualityComparer`1<TFirst> firstEqualityComparer, IEqualityComparer`1<TSecond> secondEqualityComparer);
    public BidirectionalDictionary`2(IEqualityComparer`1<TFirst> firstEqualityComparer, IEqualityComparer`1<TSecond> secondEqualityComparer, string duplicateFirstErrorMessage, string duplicateSecondErrorMessage);
    public void Set(TFirst first, TSecond second);
    public bool TryGetByFirst(TFirst first, TSecond& second);
    public bool TryGetBySecond(TSecond second, TFirst& first);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
internal static class Newtonsoft.Json.Utilities.BufferUtils : object {
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public static Char[] RentBuffer(IArrayPool`1<char> bufferPool, int minSize);
    public static void ReturnBuffer(IArrayPool`1<char> bufferPool, Char[] buffer);
    public static Char[] EnsureBufferSize(IArrayPool`1<char> bufferPool, int size, Char[] buffer);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[ExtensionAttribute]
internal static class Newtonsoft.Json.Utilities.CollectionUtils : object {
    public static bool IsNullOrEmpty(ICollection`1<T> collection);
    [ExtensionAttribute]
public static void AddRange(IList`1<T> initial, IEnumerable`1<T> collection);
    public static bool IsDictionaryType(Type type);
    public static ConstructorInfo ResolveEnumerableCollectionConstructor(Type collectionType, Type collectionItemType);
    public static ConstructorInfo ResolveEnumerableCollectionConstructor(Type collectionType, Type collectionItemType, Type constructorArgumentType);
    [ExtensionAttribute]
public static bool AddDistinct(IList`1<T> list, T value);
    [ExtensionAttribute]
public static bool AddDistinct(IList`1<T> list, T value, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static bool ContainsValue(IEnumerable`1<TSource> source, TSource value, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static bool AddRangeDistinct(IList`1<T> list, IEnumerable`1<T> values, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> collection, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static bool Contains(List`1<T> list, T value, IEqualityComparer comparer);
    [ExtensionAttribute]
public static int IndexOfReference(List`1<T> list, T item);
    [ExtensionAttribute]
public static void FastReverse(List`1<T> list);
    private static IList`1<int> GetDimensions(IList values, int dimensionsCount);
    private static void CopyFromJaggedToMultidimensionalArray(IList values, Array multidimensionalArray, Int32[] indices);
    private static object JaggedArrayGetValue(IList values, Int32[] indices);
    public static Array ToMultidimensionalArray(IList values, Type type, int rank);
    public static T[] ArrayEmpty();
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Utilities.CollectionWrapper`1 : object {
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private IList _list;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ICollection`1<T> _genericCollection;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private object _syncRoot;
    public int Count { get; }
    public bool IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public object UnderlyingCollection { get; }
    public CollectionWrapper`1(IList list);
    public CollectionWrapper`1(ICollection`1<T> list);
    public virtual void Add(T item);
    public virtual void Clear();
    public virtual bool Contains(T item);
    public virtual void CopyTo(T[] array, int arrayIndex);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual bool Remove(T item);
    public virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private static void VerifyValueType(object value);
    private static bool IsCompatibleObject(object value);
    public sealed virtual object get_UnderlyingCollection();
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal static class Newtonsoft.Json.Utilities.ConvertUtils : object {
    private static Dictionary`2<Type, PrimitiveTypeCode> TypeCodeMap;
    private static TypeInformation[] PrimitiveTypeCodes;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ThreadSafeStore`2<StructMultiKey`2<Type, Type>, Func`2<object, object>> CastConverters;
    private static ConvertUtils();
    public static PrimitiveTypeCode GetTypeCode(Type t);
    public static PrimitiveTypeCode GetTypeCode(Type t, Boolean& isEnum);
    public static TypeInformation GetTypeInformation(IConvertible convertable);
    public static bool IsConvertible(Type t);
    public static TimeSpan ParseTimeSpan(string input);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
private static Func`2<object, object> CreateCastConverter(StructMultiKey`2<Type, Type> t);
    internal static BigInteger ToBigInteger(object value);
    public static object FromBigInteger(BigInteger i, Type targetType);
    public static object Convert(object initialValue, CultureInfo culture, Type targetType);
    private static bool TryConvert(object initialValue, CultureInfo culture, Type targetType, Object& value);
    private static ConvertResult TryConvertInternal(object initialValue, CultureInfo culture, Type targetType, Object& value);
    public static object ConvertOrCast(object initialValue, CultureInfo culture, Type targetType);
    private static object EnsureTypeAssignable(object value, Type initialType, Type targetType);
    public static bool VersionTryParse(string input, Version& result);
    public static bool IsInteger(object value);
    public static ParseResult Int32TryParse(Char[] chars, int start, int length, Int32& value);
    public static ParseResult Int64TryParse(Char[] chars, int start, int length, Int64& value);
    public static ParseResult DecimalTryParse(Char[] chars, int start, int length, Decimal& value);
    public static bool TryConvertGuid(string s, Guid& g);
    public static bool TryHexTextToInt(Char[] text, int start, int end, Int32& value);
}
internal class Newtonsoft.Json.Utilities.Creator`1 : MulticastDelegate {
    public Creator`1(object object, IntPtr method);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual T Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Utilities.DateTimeParser : ValueType {
    public int Year;
    public int Month;
    public int Day;
    public int Hour;
    public int Minute;
    public int Second;
    public int Fraction;
    public int ZoneHour;
    public int ZoneMinute;
    public ParserTimeZone Zone;
    private Char[] _text;
    private int _end;
    private static Int32[] Power10;
    private static int Lzyyyy;
    private static int Lzyyyy_;
    private static int Lzyyyy_MM;
    private static int Lzyyyy_MM_;
    private static int Lzyyyy_MM_dd;
    private static int Lzyyyy_MM_ddT;
    private static int LzHH;
    private static int LzHH_;
    private static int LzHH_mm;
    private static int LzHH_mm_;
    private static int LzHH_mm_ss;
    private static int Lz_;
    private static int Lz_zz;
    private static short MaxFractionDigits;
    private static DateTimeParser();
    public bool Parse(Char[] text, int startIndex, int length);
    private bool ParseDate(int start);
    private bool ParseTimeAndZoneAndWhitespace(int start);
    private bool ParseTime(Int32& start);
    private bool ParseZone(int start);
    private bool Parse4Digit(int start, Int32& num);
    private bool Parse2Digit(int start, Int32& num);
    private bool ParseChar(int start, char ch);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[ExtensionAttribute]
internal static class Newtonsoft.Json.Utilities.DateTimeUtils : object {
    internal static long InitialJavaScriptDateTicks;
    private static string IsoDateFormat;
    private static int DaysPer100Years;
    private static int DaysPer400Years;
    private static int DaysPer4Years;
    private static int DaysPerYear;
    private static long TicksPerDay;
    private static Int32[] DaysToMonth365;
    private static Int32[] DaysToMonth366;
    private static DateTimeUtils();
    [ExtensionAttribute]
public static TimeSpan GetUtcOffset(DateTime d);
    public static XmlDateTimeSerializationMode ToSerializationMode(DateTimeKind kind);
    internal static DateTime EnsureDateTime(DateTime value, DateTimeZoneHandling timeZone);
    private static DateTime SwitchToLocalTime(DateTime value);
    private static DateTime SwitchToUtcTime(DateTime value);
    private static long ToUniversalTicks(DateTime dateTime);
    private static long ToUniversalTicks(DateTime dateTime, TimeSpan offset);
    internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime, TimeSpan offset);
    internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime);
    internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime, bool convertToUtc);
    private static long UniversalTicksToJavaScriptTicks(long universalTicks);
    internal static DateTime ConvertJavaScriptTicksToDateTime(long javaScriptTicks);
    internal static bool TryParseDateTimeIso(StringReference text, DateTimeZoneHandling dateTimeZoneHandling, DateTime& dt);
    internal static bool TryParseDateTimeOffsetIso(StringReference text, DateTimeOffset& dt);
    private static DateTime CreateDateTime(DateTimeParser dateTimeParser);
    internal static bool TryParseDateTime(StringReference s, DateTimeZoneHandling dateTimeZoneHandling, string dateFormatString, CultureInfo culture, DateTime& dt);
    internal static bool TryParseDateTime(string s, DateTimeZoneHandling dateTimeZoneHandling, string dateFormatString, CultureInfo culture, DateTime& dt);
    internal static bool TryParseDateTimeOffset(StringReference s, string dateFormatString, CultureInfo culture, DateTimeOffset& dt);
    internal static bool TryParseDateTimeOffset(string s, string dateFormatString, CultureInfo culture, DateTimeOffset& dt);
    private static bool TryParseMicrosoftDate(StringReference text, Int64& ticks, TimeSpan& offset, DateTimeKind& kind);
    private static bool TryParseDateTimeMicrosoft(StringReference text, DateTimeZoneHandling dateTimeZoneHandling, DateTime& dt);
    private static bool TryParseDateTimeExact(string text, DateTimeZoneHandling dateTimeZoneHandling, string dateFormatString, CultureInfo culture, DateTime& dt);
    private static bool TryParseDateTimeOffsetMicrosoft(StringReference text, DateTimeOffset& dt);
    private static bool TryParseDateTimeOffsetExact(string text, string dateFormatString, CultureInfo culture, DateTimeOffset& dt);
    private static bool TryReadOffset(StringReference offsetText, int startIndex, TimeSpan& offset);
    internal static void WriteDateTimeString(TextWriter writer, DateTime value, DateFormatHandling format, string formatString, CultureInfo culture);
    internal static int WriteDateTimeString(Char[] chars, int start, DateTime value, Nullable`1<TimeSpan> offset, DateTimeKind kind, DateFormatHandling format);
    internal static int WriteDefaultIsoDate(Char[] chars, int start, DateTime dt);
    private static void CopyIntToCharArray(Char[] chars, int start, int value, int digits);
    internal static int WriteDateTimeOffset(Char[] chars, int start, TimeSpan offset, DateFormatHandling format);
    internal static void WriteDateTimeOffsetString(TextWriter writer, DateTimeOffset value, DateFormatHandling format, string formatString, CultureInfo culture);
    private static void GetDateValues(DateTime td, Int32& year, Int32& month, Int32& day);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Utilities.DictionaryWrapper`2 : object {
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private IDictionary _dictionary;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<TKey, TValue> _genericDictionary;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<TKey, TValue> _readOnlyDictionary;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private object _syncRoot;
    internal IDictionary`2<TKey, TValue> GenericDictionary { get; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public TValue Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private object System.Collections.IDictionary.Item { get; private set; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public object UnderlyingDictionary { get; }
    public DictionaryWrapper`2(IDictionary dictionary);
    public DictionaryWrapper`2(IDictionary`2<TKey, TValue> dictionary);
    public DictionaryWrapper`2(IReadOnlyDictionary`2<TKey, TValue> dictionary);
    internal IDictionary`2<TKey, TValue> get_GenericDictionary();
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    public sealed virtual void Remove(object key);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual object get_UnderlyingDictionary();
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Utilities.DynamicProxy`1 : object {
    public virtual IEnumerable`1<string> GetDynamicMemberNames(T instance);
    public virtual bool TryBinaryOperation(T instance, BinaryOperationBinder binder, object arg, Object& result);
    public virtual bool TryConvert(T instance, ConvertBinder binder, Object& result);
    public virtual bool TryCreateInstance(T instance, CreateInstanceBinder binder, Object[] args, Object& result);
    public virtual bool TryDeleteIndex(T instance, DeleteIndexBinder binder, Object[] indexes);
    public virtual bool TryDeleteMember(T instance, DeleteMemberBinder binder);
    public virtual bool TryGetIndex(T instance, GetIndexBinder binder, Object[] indexes, Object& result);
    public virtual bool TryGetMember(T instance, GetMemberBinder binder, Object& result);
    public virtual bool TryInvoke(T instance, InvokeBinder binder, Object[] args, Object& result);
    public virtual bool TryInvokeMember(T instance, InvokeMemberBinder binder, Object[] args, Object& result);
    public virtual bool TrySetIndex(T instance, SetIndexBinder binder, Object[] indexes, object value);
    public virtual bool TrySetMember(T instance, SetMemberBinder binder, object value);
    public virtual bool TryUnaryOperation(T instance, UnaryOperationBinder binder, Object& result);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1 : DynamicMetaObject {
    private DynamicProxy`1<T> _proxy;
    private static Expression[] NoArgs { get; }
    internal DynamicProxyMetaObject`1(Expression expression, T value, DynamicProxy`1<T> proxy);
    private bool IsOverridden(string method);
    public virtual DynamicMetaObject BindGetMember(GetMemberBinder binder);
    public virtual DynamicMetaObject BindSetMember(SetMemberBinder binder, DynamicMetaObject value);
    public virtual DynamicMetaObject BindDeleteMember(DeleteMemberBinder binder);
    public virtual DynamicMetaObject BindConvert(ConvertBinder binder);
    public virtual DynamicMetaObject BindInvokeMember(InvokeMemberBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindCreateInstance(CreateInstanceBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindInvoke(InvokeBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindBinaryOperation(BinaryOperationBinder binder, DynamicMetaObject arg);
    public virtual DynamicMetaObject BindUnaryOperation(UnaryOperationBinder binder);
    public virtual DynamicMetaObject BindGetIndex(GetIndexBinder binder, DynamicMetaObject[] indexes);
    public virtual DynamicMetaObject BindSetIndex(SetIndexBinder binder, DynamicMetaObject[] indexes, DynamicMetaObject value);
    public virtual DynamicMetaObject BindDeleteIndex(DeleteIndexBinder binder, DynamicMetaObject[] indexes);
    private static Expression[] get_NoArgs();
    private static IEnumerable`1<Expression> GetArgs(DynamicMetaObject[] args);
    private static Expression[] GetArgArray(DynamicMetaObject[] args);
    private static Expression[] GetArgArray(DynamicMetaObject[] args, DynamicMetaObject value);
    private static ConstantExpression Constant(DynamicMetaObjectBinder binder);
    private DynamicMetaObject CallMethodWithResult(string methodName, DynamicMetaObjectBinder binder, IEnumerable`1<Expression> args, Fallback<T> fallback, Fallback<T> fallbackInvoke);
    private DynamicMetaObject BuildCallMethodWithResult(string methodName, DynamicMetaObjectBinder binder, IEnumerable`1<Expression> args, DynamicMetaObject fallbackResult, Fallback<T> fallbackInvoke);
    private DynamicMetaObject CallMethodReturnLast(string methodName, DynamicMetaObjectBinder binder, IEnumerable`1<Expression> args, Fallback<T> fallback);
    private DynamicMetaObject CallMethodNoResult(string methodName, DynamicMetaObjectBinder binder, Expression[] args, Fallback<T> fallback);
    private BindingRestrictions GetRestrictions();
    public virtual IEnumerable`1<string> GetDynamicMemberNames();
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[ExtensionAttribute]
internal static class Newtonsoft.Json.Utilities.DynamicUtils : object {
    [ExtensionAttribute]
public static IEnumerable`1<string> GetDynamicMemberNames(IDynamicMetaObjectProvider dynamicProvider);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Utilities.EnumInfo : object {
    public bool IsFlags;
    public UInt64[] Values;
    public String[] Names;
    public String[] ResolvedNames;
    public EnumInfo(bool isFlags, UInt64[] values, String[] names, String[] resolvedNames);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal static class Newtonsoft.Json.Utilities.EnumUtils : object {
    private static char EnumSeparatorChar;
    private static string EnumSeparatorString;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ThreadSafeStore`2<StructMultiKey`2<Type, NamingStrategy>, EnumInfo> ValuesAndNamesPerEnum;
    private static CamelCaseNamingStrategy _camelCaseNamingStrategy;
    private static EnumUtils();
    private static EnumInfo InitializeValuesAndNames(StructMultiKey`2<Type, NamingStrategy> key);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("0")]
public static IList`1<T> GetFlagsValues(T value);
    public static bool TryToString(Type enumType, object value, bool camelCase, String& name);
    public static bool TryToString(Type enumType, object value, NamingStrategy namingStrategy, String& name);
    private static string InternalFlagsFormat(EnumInfo entry, ulong result);
    public static EnumInfo GetEnumValuesAndNames(Type enumType);
    private static ulong ToUInt64(object value);
    public static object ParseEnum(Type enumType, NamingStrategy namingStrategy, string value, bool disallowNumber);
    private static Nullable`1<int> MatchName(string value, String[] enumNames, String[] resolvedNames, int valueIndex, int valueSubstringLength, StringComparison comparison);
    private static Nullable`1<int> FindIndexByName(String[] enumNames, string value, int valueIndex, int valueSubstringLength, StringComparison comparison);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Utilities.ExpressionReflectionDelegateFactory : ReflectionDelegateFactory {
    private static ExpressionReflectionDelegateFactory _instance;
    internal static ReflectionDelegateFactory Instance { get; }
    private static ExpressionReflectionDelegateFactory();
    internal static ReflectionDelegateFactory get_Instance();
    public virtual ObjectConstructor`1<object> CreateParameterizedConstructor(MethodBase method);
    public virtual MethodCall`2<T, object> CreateMethodCall(MethodBase method);
    private Expression BuildMethodCall(MethodBase method, Type type, ParameterExpression targetParameterExpression, ParameterExpression argsParameterExpression);
    public virtual Func`1<T> CreateDefaultConstructor(Type type);
    public virtual Func`2<T, object> CreateGet(PropertyInfo propertyInfo);
    public virtual Func`2<T, object> CreateGet(FieldInfo fieldInfo);
    public virtual Action`2<T, object> CreateSet(FieldInfo fieldInfo);
    public virtual Action`2<T, object> CreateSet(PropertyInfo propertyInfo);
    private Expression EnsureCastExpression(Expression expression, Type targetType, bool allowWidening);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Utilities.FSharpFunction : object {
    private object _instance;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private MethodCall`2<object, object> _invoker;
    public FSharpFunction(object instance, MethodCall`2<object, object> invoker);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public object Invoke(Object[] args);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Utilities.FSharpUtils : object {
    private static object Lock;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("2")]
private static FSharpUtils _instance;
    private MethodInfo _ofSeq;
    private Type _mapType;
    [CompilerGeneratedAttribute]
private Assembly <FSharpCoreAssembly>k__BackingField;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MethodCall`2<object, object> <IsUnion>k__BackingField;
    [CompilerGeneratedAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private MethodCall`2<object, object> <GetUnionCases>k__BackingField;
    [CompilerGeneratedAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private MethodCall`2<object, object> <PreComputeUnionTagReader>k__BackingField;
    [CompilerGeneratedAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private MethodCall`2<object, object> <PreComputeUnionReader>k__BackingField;
    [CompilerGeneratedAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private MethodCall`2<object, object> <PreComputeUnionConstructor>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <GetUnionCaseInfoDeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <GetUnionCaseInfoName>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <GetUnionCaseInfoTag>k__BackingField;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MethodCall`2<object, object> <GetUnionCaseInfoFields>k__BackingField;
    public static string FSharpSetTypeName;
    public static string FSharpListTypeName;
    public static string FSharpMapTypeName;
    public static FSharpUtils Instance { get; }
    public Assembly FSharpCoreAssembly { get; private set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public MethodCall`2<object, object> IsUnion { get; private set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public MethodCall`2<object, object> GetUnionCases { get; private set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public MethodCall`2<object, object> PreComputeUnionTagReader { get; private set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public MethodCall`2<object, object> PreComputeUnionReader { get; private set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public MethodCall`2<object, object> PreComputeUnionConstructor { get; private set; }
    public Func`2<object, object> GetUnionCaseInfoDeclaringType { get; private set; }
    public Func`2<object, object> GetUnionCaseInfoName { get; private set; }
    public Func`2<object, object> GetUnionCaseInfoTag { get; private set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public MethodCall`2<object, object> GetUnionCaseInfoFields { get; private set; }
    private FSharpUtils(Assembly fsharpCoreAssembly);
    private static FSharpUtils();
    public static FSharpUtils get_Instance();
    [CompilerGeneratedAttribute]
public Assembly get_FSharpCoreAssembly();
    [CompilerGeneratedAttribute]
private void set_FSharpCoreAssembly(Assembly value);
    [CompilerGeneratedAttribute]
public MethodCall`2<object, object> get_IsUnion();
    [CompilerGeneratedAttribute]
private void set_IsUnion(MethodCall`2<object, object> value);
    [CompilerGeneratedAttribute]
public MethodCall`2<object, object> get_GetUnionCases();
    [CompilerGeneratedAttribute]
private void set_GetUnionCases(MethodCall`2<object, object> value);
    [CompilerGeneratedAttribute]
public MethodCall`2<object, object> get_PreComputeUnionTagReader();
    [CompilerGeneratedAttribute]
private void set_PreComputeUnionTagReader(MethodCall`2<object, object> value);
    [CompilerGeneratedAttribute]
public MethodCall`2<object, object> get_PreComputeUnionReader();
    [CompilerGeneratedAttribute]
private void set_PreComputeUnionReader(MethodCall`2<object, object> value);
    [CompilerGeneratedAttribute]
public MethodCall`2<object, object> get_PreComputeUnionConstructor();
    [CompilerGeneratedAttribute]
private void set_PreComputeUnionConstructor(MethodCall`2<object, object> value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_GetUnionCaseInfoDeclaringType();
    [CompilerGeneratedAttribute]
private void set_GetUnionCaseInfoDeclaringType(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_GetUnionCaseInfoName();
    [CompilerGeneratedAttribute]
private void set_GetUnionCaseInfoName(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_GetUnionCaseInfoTag();
    [CompilerGeneratedAttribute]
private void set_GetUnionCaseInfoTag(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public MethodCall`2<object, object> get_GetUnionCaseInfoFields();
    [CompilerGeneratedAttribute]
private void set_GetUnionCaseInfoFields(MethodCall`2<object, object> value);
    public static void EnsureInitialized(Assembly fsharpCoreAssembly);
    private static MethodInfo GetMethodWithNonPublicFallback(Type type, string methodName, BindingFlags bindingFlags);
    private static MethodCall`2<object, object> CreateFSharpFuncCall(Type type, string methodName);
    public ObjectConstructor`1<object> CreateSeq(Type t);
    public ObjectConstructor`1<object> CreateMap(Type keyType, Type valueType);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public ObjectConstructor`1<object> BuildMapCreator();
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal static class Newtonsoft.Json.Utilities.ImmutableCollectionsUtils : object {
    private static string ImmutableListGenericInterfaceTypeName;
    private static string ImmutableQueueGenericInterfaceTypeName;
    private static string ImmutableStackGenericInterfaceTypeName;
    private static string ImmutableSetGenericInterfaceTypeName;
    private static string ImmutableArrayTypeName;
    private static string ImmutableArrayGenericTypeName;
    private static string ImmutableListTypeName;
    private static string ImmutableListGenericTypeName;
    private static string ImmutableQueueTypeName;
    private static string ImmutableQueueGenericTypeName;
    private static string ImmutableStackTypeName;
    private static string ImmutableStackGenericTypeName;
    private static string ImmutableSortedSetTypeName;
    private static string ImmutableSortedSetGenericTypeName;
    private static string ImmutableHashSetTypeName;
    private static string ImmutableHashSetGenericTypeName;
    private static IList`1<ImmutableCollectionTypeInfo> ArrayContractImmutableCollectionDefinitions;
    private static string ImmutableDictionaryGenericInterfaceTypeName;
    private static string ImmutableDictionaryTypeName;
    private static string ImmutableDictionaryGenericTypeName;
    private static string ImmutableSortedDictionaryTypeName;
    private static string ImmutableSortedDictionaryGenericTypeName;
    private static IList`1<ImmutableCollectionTypeInfo> DictionaryContractImmutableCollectionDefinitions;
    private static ImmutableCollectionsUtils();
    internal static bool TryBuildImmutableForArrayContract(Type underlyingType, Type collectionItemType, Type& createdType, ObjectConstructor`1& parameterizedCreator);
    internal static bool TryBuildImmutableForDictionaryContract(Type underlyingType, Type keyItemType, Type valueItemType, Type& createdType, ObjectConstructor`1& parameterizedCreator);
}
internal interface Newtonsoft.Json.Utilities.IWrappedCollection {
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
public object UnderlyingCollection { get; }
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public abstract virtual object get_UnderlyingCollection();
}
internal interface Newtonsoft.Json.Utilities.IWrappedDictionary {
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("1")]
public object UnderlyingDictionary { get; }
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public abstract virtual object get_UnderlyingDictionary();
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal static class Newtonsoft.Json.Utilities.JavaScriptUtils : object {
    internal static Boolean[] SingleQuoteCharEscapeFlags;
    internal static Boolean[] DoubleQuoteCharEscapeFlags;
    internal static Boolean[] HtmlCharEscapeFlags;
    private static int UnicodeTextLength;
    private static string EscapedUnicodeText;
    private static JavaScriptUtils();
    public static Boolean[] GetCharEscapeFlags(StringEscapeHandling stringEscapeHandling, char quoteChar);
    public static bool ShouldEscapeJavaScriptString(string s, Boolean[] charEscapeFlags);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static void WriteEscapedJavaScriptString(TextWriter writer, string s, char delimiter, bool appendDelimiters, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling, IArrayPool`1<char> bufferPool, Char[]& writeBuffer);
    public static string ToEscapedJavaScriptString(string value, char delimiter, bool appendDelimiters, StringEscapeHandling stringEscapeHandling);
    private static int FirstCharToEscape(string s, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling);
    public static Task WriteEscapedJavaScriptStringAsync(TextWriter writer, string s, char delimiter, bool appendDelimiters, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling, JsonTextWriter client, Char[] writeBuffer, CancellationToken cancellationToken);
    private static Task WriteEscapedJavaScriptStringWithDelimitersAsync(TextWriter writer, string s, char delimiter, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling, JsonTextWriter client, Char[] writeBuffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Utilities.JavaScriptUtils/<WriteEscapedJavaScriptStringWithDelimitersAsync>d__13")]
private static Task WriteEscapedJavaScriptStringWithDelimitersAsync(Task task, TextWriter writer, string s, char delimiter, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling, JsonTextWriter client, Char[] writeBuffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Utilities.JavaScriptUtils/<WriteCharAsync>d__14")]
public static Task WriteCharAsync(Task task, TextWriter writer, char c, CancellationToken cancellationToken);
    private static Task WriteEscapedJavaScriptStringWithoutDelimitersAsync(TextWriter writer, string s, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling, JsonTextWriter client, Char[] writeBuffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Utilities.JavaScriptUtils/<WriteDefinitelyEscapedJavaScriptStringWithoutDelimitersAsync>d__16")]
private static Task WriteDefinitelyEscapedJavaScriptStringWithoutDelimitersAsync(TextWriter writer, string s, int lastWritePosition, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling, JsonTextWriter client, Char[] writeBuffer, CancellationToken cancellationToken);
    public static bool TryGetDateFromConstructorJson(JsonReader reader, DateTime& dateTime, String& errorMessage);
    private static bool TryGetDateConstructorValue(JsonReader reader, Nullable`1& integer, String& errorMessage);
}
internal static class Newtonsoft.Json.Utilities.JsonTokenUtils : object {
    internal static bool IsEndToken(JsonToken token);
    internal static bool IsStartToken(JsonToken token);
    internal static bool IsPrimitiveToken(JsonToken token);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Utilities.LateBoundReflectionDelegateFactory : ReflectionDelegateFactory {
    private static LateBoundReflectionDelegateFactory _instance;
    internal static ReflectionDelegateFactory Instance { get; }
    private static LateBoundReflectionDelegateFactory();
    internal static ReflectionDelegateFactory get_Instance();
    public virtual ObjectConstructor`1<object> CreateParameterizedConstructor(MethodBase method);
    public virtual MethodCall`2<T, object> CreateMethodCall(MethodBase method);
    public virtual Func`1<T> CreateDefaultConstructor(Type type);
    public virtual Func`2<T, object> CreateGet(PropertyInfo propertyInfo);
    public virtual Func`2<T, object> CreateGet(FieldInfo fieldInfo);
    public virtual Action`2<T, object> CreateSet(FieldInfo fieldInfo);
    public virtual Action`2<T, object> CreateSet(PropertyInfo propertyInfo);
}
internal static class Newtonsoft.Json.Utilities.MathUtils : object {
    public static int IntLength(ulong i);
    public static char IntToHex(int n);
    public static Nullable`1<int> Min(Nullable`1<int> val1, Nullable`1<int> val2);
    public static Nullable`1<int> Max(Nullable`1<int> val1, Nullable`1<int> val2);
    public static Nullable`1<double> Max(Nullable`1<double> val1, Nullable`1<double> val2);
    public static bool ApproxEquals(double d1, double d2);
}
internal class Newtonsoft.Json.Utilities.MethodCall`2 : MulticastDelegate {
    public MethodCall`2(object object, IntPtr method);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual TResult Invoke(T target, Object[] args);
    public virtual IAsyncResult BeginInvoke(T target, Object[] args, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal static class Newtonsoft.Json.Utilities.MiscellaneousUtils : object {
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[ConditionalAttribute("DEBUG")]
public static void Assert(bool condition, string message);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static bool ValueEquals(object objA, object objB);
    public static ArgumentOutOfRangeException CreateArgumentOutOfRangeException(string paramName, object actualValue, string message);
    public static string ToString(object value);
    public static int ByteArrayCompare(Byte[] a1, Byte[] a2);
    public static string GetPrefix(string qualifiedName);
    public static string GetLocalName(string qualifiedName);
    public static void GetQualifiedNameParts(string qualifiedName, String& prefix, String& localName);
    internal static RegexOptions GetRegexOptions(string optionsText);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Utilities.NoThrowExpressionVisitor : ExpressionVisitor {
    internal static object ErrorResult;
    private static NoThrowExpressionVisitor();
    protected virtual Expression VisitConditional(ConditionalExpression node);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Utilities.NoThrowGetBinderMember : GetMemberBinder {
    private GetMemberBinder _innerBinder;
    public NoThrowGetBinderMember(GetMemberBinder innerBinder);
    public virtual DynamicMetaObject FallbackGetMember(DynamicMetaObject target, DynamicMetaObject errorSuggestion);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Utilities.NoThrowSetBinderMember : SetMemberBinder {
    private SetMemberBinder _innerBinder;
    public NoThrowSetBinderMember(SetMemberBinder innerBinder);
    public virtual DynamicMetaObject FallbackSetMember(DynamicMetaObject target, DynamicMetaObject value, DynamicMetaObject errorSuggestion);
}
internal enum Newtonsoft.Json.Utilities.ParseResult : Enum {
    public int value__;
    public static ParseResult None;
    public static ParseResult Success;
    public static ParseResult Overflow;
    public static ParseResult Invalid;
}
internal enum Newtonsoft.Json.Utilities.ParserTimeZone : Enum {
    public int value__;
    public static ParserTimeZone Unspecified;
    public static ParserTimeZone Utc;
    public static ParserTimeZone LocalWestOfUtc;
    public static ParserTimeZone LocalEastOfUtc;
}
internal enum Newtonsoft.Json.Utilities.PrimitiveTypeCode : Enum {
    public int value__;
    public static PrimitiveTypeCode Empty;
    public static PrimitiveTypeCode Object;
    public static PrimitiveTypeCode Char;
    public static PrimitiveTypeCode CharNullable;
    public static PrimitiveTypeCode Boolean;
    public static PrimitiveTypeCode BooleanNullable;
    public static PrimitiveTypeCode SByte;
    public static PrimitiveTypeCode SByteNullable;
    public static PrimitiveTypeCode Int16;
    public static PrimitiveTypeCode Int16Nullable;
    public static PrimitiveTypeCode UInt16;
    public static PrimitiveTypeCode UInt16Nullable;
    public static PrimitiveTypeCode Int32;
    public static PrimitiveTypeCode Int32Nullable;
    public static PrimitiveTypeCode Byte;
    public static PrimitiveTypeCode ByteNullable;
    public static PrimitiveTypeCode UInt32;
    public static PrimitiveTypeCode UInt32Nullable;
    public static PrimitiveTypeCode Int64;
    public static PrimitiveTypeCode Int64Nullable;
    public static PrimitiveTypeCode UInt64;
    public static PrimitiveTypeCode UInt64Nullable;
    public static PrimitiveTypeCode Single;
    public static PrimitiveTypeCode SingleNullable;
    public static PrimitiveTypeCode Double;
    public static PrimitiveTypeCode DoubleNullable;
    public static PrimitiveTypeCode DateTime;
    public static PrimitiveTypeCode DateTimeNullable;
    public static PrimitiveTypeCode DateTimeOffset;
    public static PrimitiveTypeCode DateTimeOffsetNullable;
    public static PrimitiveTypeCode Decimal;
    public static PrimitiveTypeCode DecimalNullable;
    public static PrimitiveTypeCode Guid;
    public static PrimitiveTypeCode GuidNullable;
    public static PrimitiveTypeCode TimeSpan;
    public static PrimitiveTypeCode TimeSpanNullable;
    public static PrimitiveTypeCode BigInteger;
    public static PrimitiveTypeCode BigIntegerNullable;
    public static PrimitiveTypeCode Uri;
    public static PrimitiveTypeCode String;
    public static PrimitiveTypeCode Bytes;
    public static PrimitiveTypeCode DBNull;
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal abstract class Newtonsoft.Json.Utilities.ReflectionDelegateFactory : object {
    public Func`2<T, object> CreateGet(MemberInfo memberInfo);
    public Action`2<T, object> CreateSet(MemberInfo memberInfo);
    public abstract virtual MethodCall`2<T, object> CreateMethodCall(MethodBase method);
    public abstract virtual ObjectConstructor`1<object> CreateParameterizedConstructor(MethodBase method);
    public abstract virtual Func`1<T> CreateDefaultConstructor(Type type);
    public abstract virtual Func`2<T, object> CreateGet(PropertyInfo propertyInfo);
    public abstract virtual Func`2<T, object> CreateGet(FieldInfo fieldInfo);
    public abstract virtual Action`2<T, object> CreateSet(FieldInfo fieldInfo);
    public abstract virtual Action`2<T, object> CreateSet(PropertyInfo propertyInfo);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Utilities.ReflectionMember : object {
    [CompilerGeneratedAttribute]
private Type <MemberType>k__BackingField;
    [CompilerGeneratedAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<object, object> <Getter>k__BackingField;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<object, object> <Setter>k__BackingField;
    public Type MemberType { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, object> Getter { get; public set; }
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<object, object> Setter { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_MemberType();
    [CompilerGeneratedAttribute]
public void set_MemberType(Type value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_Getter();
    [CompilerGeneratedAttribute]
public void set_Getter(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public Action`2<object, object> get_Setter();
    [CompilerGeneratedAttribute]
public void set_Setter(Action`2<object, object> value);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Utilities.ReflectionObject : object {
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ObjectConstructor`1<object> <Creator>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ReflectionMember> <Members>k__BackingField;
    [<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ObjectConstructor`1<object> Creator { get; }
    public IDictionary`2<string, ReflectionMember> Members { get; }
    private ReflectionObject(ObjectConstructor`1<object> creator);
    [CompilerGeneratedAttribute]
public ObjectConstructor`1<object> get_Creator();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ReflectionMember> get_Members();
    public object GetValue(object target, string member);
    public void SetValue(object target, string member, object value);
    public Type GetType(string member);
    public static ReflectionObject Create(Type t, String[] memberNames);
    public static ReflectionObject Create(Type t, MethodBase creator, String[] memberNames);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[ExtensionAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal static class Newtonsoft.Json.Utilities.ReflectionUtils : object {
    public static Type[] EmptyTypes;
    private static ReflectionUtils();
    [ExtensionAttribute]
public static bool IsVirtual(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static MethodInfo GetBaseDefinition(PropertyInfo propertyInfo);
    public static bool IsPublic(PropertyInfo property);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static Type GetObjectType(object v);
    public static string GetTypeName(Type t, TypeNameAssemblyFormatHandling assemblyFormat, ISerializationBinder binder);
    private static string GetFullyQualifiedTypeName(Type t, ISerializationBinder binder);
    private static string RemoveAssemblyDetails(string fullyQualifiedTypeName);
    public static bool HasDefaultConstructor(Type t, bool nonPublic);
    public static ConstructorInfo GetDefaultConstructor(Type t);
    public static ConstructorInfo GetDefaultConstructor(Type t, bool nonPublic);
    public static bool IsNullable(Type t);
    public static bool IsNullableType(Type t);
    public static Type EnsureNotNullableType(Type t);
    public static Type EnsureNotByRefType(Type t);
    public static bool IsGenericDefinition(Type type, Type genericInterfaceDefinition);
    public static bool ImplementsGenericDefinition(Type type, Type genericInterfaceDefinition);
    public static bool ImplementsGenericDefinition(Type type, Type genericInterfaceDefinition, Type& implementingType);
    public static bool InheritsGenericDefinition(Type type, Type genericClassDefinition);
    public static bool InheritsGenericDefinition(Type type, Type genericClassDefinition, Type& implementingType);
    private static bool InheritsGenericDefinitionInternal(Type currentType, Type genericClassDefinition, Type& implementingType);
    public static Type GetCollectionItemType(Type type);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static void GetDictionaryKeyValueTypes(Type dictionaryType, Type& keyType, Type& valueType);
    public static Type GetMemberUnderlyingType(MemberInfo member);
    public static bool IsByRefLikeType(Type type);
    public static bool IsIndexedProperty(PropertyInfo property);
    public static object GetMemberValue(MemberInfo member, object target);
    public static void SetMemberValue(MemberInfo member, object target, object value);
    public static bool CanReadMemberValue(MemberInfo member, bool nonPublic);
    public static bool CanSetMemberValue(MemberInfo member, bool nonPublic, bool canSetReadOnly);
    public static List`1<MemberInfo> GetFieldsAndProperties(Type type, BindingFlags bindingAttr);
    private static bool IsOverridenGenericMember(MemberInfo memberInfo, BindingFlags bindingAttr);
    public static T GetAttribute(object attributeProvider);
    public static T GetAttribute(object attributeProvider, bool inherit);
    public static T[] GetAttributes(object attributeProvider, bool inherit);
    public static Attribute[] GetAttributes(object attributeProvider, Type attributeType, bool inherit);
    public static StructMultiKey`2<string, string> SplitFullyQualifiedTypeName(string fullyQualifiedTypeName);
    private static Nullable`1<int> GetAssemblyDelimiterIndex(string fullyQualifiedTypeName);
    public static MemberInfo GetMemberInfoFromType(Type targetType, MemberInfo memberInfo);
    public static IEnumerable`1<FieldInfo> GetFields(Type targetType, BindingFlags bindingAttr);
    private static void GetChildPrivateFields(IList`1<MemberInfo> initialFields, Type targetType, BindingFlags bindingAttr);
    public static IEnumerable`1<PropertyInfo> GetProperties(Type targetType, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static BindingFlags RemoveFlag(BindingFlags bindingAttr, BindingFlags flag);
    private static void GetChildPrivateProperties(IList`1<PropertyInfo> initialProperties, Type targetType, BindingFlags bindingAttr);
    public static bool IsMethodOverridden(Type currentType, Type methodDeclaringType, string method);
    public static object GetDefaultValue(Type type);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Utilities.StringBuffer : ValueType {
    private Char[] _buffer;
    private int _position;
    public int Position { get; public set; }
    public bool IsEmpty { get; }
    public Char[] InternalBuffer { get; }
    public StringBuffer(IArrayPool`1<char> bufferPool, int initalSize);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
private StringBuffer(Char[] buffer);
    public int get_Position();
    public void set_Position(int value);
    public bool get_IsEmpty();
    public void Append(IArrayPool`1<char> bufferPool, char value);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public void Append(IArrayPool`1<char> bufferPool, Char[] buffer, int startIndex, int count);
    public void Clear(IArrayPool`1<char> bufferPool);
    private void EnsureSize(IArrayPool`1<char> bufferPool, int appendLength);
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public virtual string ToString();
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public string ToString(int start, int length);
    public Char[] get_InternalBuffer();
}
[<b6d95f6d-77db-4571-973b-0de52fd51d8c>IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Utilities.StringReference : ValueType {
    private Char[] _chars;
    private int _startIndex;
    private int _length;
    public char Item { get; }
    public Char[] Chars { get; }
    public int StartIndex { get; }
    public int Length { get; }
    public StringReference(Char[] chars, int startIndex, int length);
    public char get_Item(int i);
    public Char[] get_Chars();
    public int get_StartIndex();
    public int get_Length();
    public virtual string ToString();
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[ExtensionAttribute]
internal static class Newtonsoft.Json.Utilities.StringReferenceExtensions : object {
    [ExtensionAttribute]
public static int IndexOf(StringReference s, char c, int startIndex, int length);
    [ExtensionAttribute]
public static bool StartsWith(StringReference s, string text);
    [ExtensionAttribute]
public static bool EndsWith(StringReference s, string text);
}
[ExtensionAttribute]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal static class Newtonsoft.Json.Utilities.StringUtils : object {
    public static string CarriageReturnLineFeed;
    public static string Empty;
    public static char CarriageReturn;
    public static char LineFeed;
    public static char Tab;
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static bool IsNullOrEmpty(string value);
    [ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, object arg0);
    [ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, object arg0, object arg1);
    [ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, object arg0, object arg1, object arg2);
    [ExtensionAttribute]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("2")]
public static string FormatWith(string format, IFormatProvider provider, object arg0, object arg1, object arg2, object arg3);
    [ExtensionAttribute]
private static string FormatWith(string format, IFormatProvider provider, Object[] args);
    public static bool IsWhiteSpace(string s);
    public static StringWriter CreateStringWriter(int capacity);
    public static void ToCharAsUnicode(char c, Char[] buffer);
    [ExtensionAttribute]
public static TSource ForgivingCaseSensitiveFind(IEnumerable`1<TSource> source, Func`2<TSource, string> valueSelector, string testValue);
    public static string ToCamelCase(string s);
    private static char ToLower(char c);
    public static string ToSnakeCase(string s);
    public static string ToKebabCase(string s);
    private static string ToSeparatedCase(string s, char separator);
    public static bool IsHighSurrogate(char c);
    public static bool IsLowSurrogate(char c);
    [ExtensionAttribute]
public static bool StartsWith(string source, char value);
    [ExtensionAttribute]
public static bool EndsWith(string source, char value);
    [ExtensionAttribute]
public static string Trim(string s, int start, int length);
}
[<b6d95f6d-77db-4571-973b-0de52fd51d8c>IsReadOnlyAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Utilities.StructMultiKey`2 : ValueType {
    public T1 Value1;
    public T2 Value2;
    public StructMultiKey`2(T1 v1, T2 v2);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(StructMultiKey`2<T1, T2> other);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal class Newtonsoft.Json.Utilities.ThreadSafeStore`2 : object {
    private ConcurrentDictionary`2<TKey, TValue> _concurrentStore;
    private Func`2<TKey, TValue> _creator;
    public ThreadSafeStore`2(Func`2<TKey, TValue> creator);
    public TValue Get(TKey key);
}
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
[ExtensionAttribute]
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
internal static class Newtonsoft.Json.Utilities.TypeExtensions : object {
    [ExtensionAttribute]
public static MethodInfo Method(Delegate d);
    [ExtensionAttribute]
public static MemberTypes MemberType(MemberInfo memberInfo);
    [ExtensionAttribute]
public static bool ContainsGenericParameters(Type type);
    [ExtensionAttribute]
public static bool IsInterface(Type type);
    [ExtensionAttribute]
public static bool IsGenericType(Type type);
    [ExtensionAttribute]
public static bool IsGenericTypeDefinition(Type type);
    [ExtensionAttribute]
public static Type BaseType(Type type);
    [ExtensionAttribute]
public static Assembly Assembly(Type type);
    [ExtensionAttribute]
public static bool IsEnum(Type type);
    [ExtensionAttribute]
public static bool IsClass(Type type);
    [ExtensionAttribute]
public static bool IsSealed(Type type);
    [ExtensionAttribute]
public static bool IsAbstract(Type type);
    [ExtensionAttribute]
public static bool IsVisible(Type type);
    [ExtensionAttribute]
public static bool IsValueType(Type type);
    [ExtensionAttribute]
public static bool IsPrimitive(Type type);
    [ExtensionAttribute]
public static bool AssignableToTypeName(Type type, string fullTypeName, bool searchInterfaces, Type& match);
    [ExtensionAttribute]
public static bool AssignableToTypeName(Type type, string fullTypeName, bool searchInterfaces);
    [ExtensionAttribute]
public static bool ImplementInterface(Type type, Type interfaceType);
}
[<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute("0")]
[<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
internal class Newtonsoft.Json.Utilities.TypeInformation : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private PrimitiveTypeCode <TypeCode>k__BackingField;
    public Type Type { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public TypeInformation(Type type, PrimitiveTypeCode typeCode);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public PrimitiveTypeCode get_TypeCode();
}
internal static class Newtonsoft.Json.Utilities.ValidationUtils : object {
    [<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute("1")]
public static void ArgumentNotNull(object value, string parameterName);
}
internal enum Newtonsoft.Json.WriteState : Enum {
    public int value__;
    public static WriteState Error;
    public static WriteState Closed;
    public static WriteState Object;
    public static WriteState Array;
    public static WriteState Constructor;
    public static WriteState Property;
    public static WriteState Start;
}
internal static class System.<31c3754f-6b3f-4596-8e22-ff5e235826c9>SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Arg_KeyNotFoundWithKey { get; }
    internal static string ArrayInitializedStateNotEqual { get; }
    internal static string ArrayLengthsNotEqual { get; }
    internal static string CannotFindOldValue { get; }
    internal static string CapacityMustBeGreaterThanOrEqualToCount { get; }
    internal static string CapacityMustEqualCountOnMove { get; }
    internal static string CollectionModifiedDuringEnumeration { get; }
    internal static string DuplicateKey { get; }
    internal static string InvalidEmptyOperation { get; }
    internal static string InvalidOperationOnDefaultArray { get; }
    internal static string Arg_HTCapacityOverflow { get; }
    internal static string Arg_RankMultiDimNotSupported { get; }
    internal static string Arg_NonZeroLowerBound { get; }
    internal static string Arg_ArrayPlusOffTooSmall { get; }
    internal static string Argument_IncompatibleArrayType { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    private static <31c3754f-6b3f-4596-8e22-ff5e235826c9>SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1, object p2);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal static string Format(string resourceFormat, Object[] args);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Arg_KeyNotFoundWithKey();
    internal static string get_ArrayInitializedStateNotEqual();
    internal static string get_ArrayLengthsNotEqual();
    internal static string get_CannotFindOldValue();
    internal static string get_CapacityMustBeGreaterThanOrEqualToCount();
    internal static string get_CapacityMustEqualCountOnMove();
    internal static string get_CollectionModifiedDuringEnumeration();
    internal static string get_DuplicateKey();
    internal static string get_InvalidEmptyOperation();
    internal static string get_InvalidOperationOnDefaultArray();
    internal static string get_Arg_HTCapacityOverflow();
    internal static string get_Arg_RankMultiDimNotSupported();
    internal static string get_Arg_NonZeroLowerBound();
    internal static string get_Arg_ArrayPlusOffTooSmall();
    internal static string get_Argument_IncompatibleArrayType();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
internal static class System.Collections.Frozen.Constants : object {
    public static int MaxItemsInSmallFrozenCollection;
    public static int MaxItemsInSmallValueTypeFrozenCollection;
    public static bool IsKnownComparable();
    internal static bool KeysAreHashCodes();
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Frozen.DefaultFrozenDictionary`2 : KeysAndValuesFrozenDictionary`2<TKey, TValue> {
    internal DefaultFrozenDictionary`2(Dictionary`2<TKey, TValue> source);
    private protected virtual TValue& modreq(System.Runtime.InteropServices.InAttribute) GetValueRefOrNullRefCore(TKey key);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Frozen.DefaultFrozenSet`1 : ItemsFrozenSet`2<T, GSW<T>> {
    internal DefaultFrozenSet`1(HashSet`1<T> source);
    private protected virtual int FindItemIndex(T item);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Collections.Frozen.EmptyFrozenDictionary`2 : FrozenDictionary`2<TKey, TValue> {
    private protected TKey[] KeysCore { get; }
    private protected TValue[] ValuesCore { get; }
    private protected int CountCore { get; }
    internal EmptyFrozenDictionary`2(IEqualityComparer`1<TKey> comparer);
    private protected virtual TKey[] get_KeysCore();
    private protected virtual TValue[] get_ValuesCore();
    private protected virtual Enumerator<TKey, TValue> GetEnumeratorCore();
    private protected virtual int get_CountCore();
    private protected virtual TValue& modreq(System.Runtime.InteropServices.InAttribute) GetValueRefOrNullRefCore(TKey key);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Collections.Frozen.EmptyFrozenSet`1 : FrozenSet`1<T> {
    private protected T[] ItemsCore { get; }
    private protected int CountCore { get; }
    internal EmptyFrozenSet`1(IEqualityComparer`1<T> comparer);
    private protected virtual T[] get_ItemsCore();
    private protected virtual int get_CountCore();
    private protected virtual int FindItemIndex(T item);
    private protected virtual Enumerator<T> GetEnumeratorCore();
    private protected virtual bool IsProperSubsetOfCore(IEnumerable`1<T> other);
    private protected virtual bool IsProperSupersetOfCore(IEnumerable`1<T> other);
    private protected virtual bool IsSubsetOfCore(IEnumerable`1<T> other);
    private protected virtual bool IsSupersetOfCore(IEnumerable`1<T> other);
    private protected virtual bool OverlapsCore(IEnumerable`1<T> other);
    private protected virtual bool SetEqualsCore(IEnumerable`1<T> other);
    private static bool OtherIsEmpty(IEnumerable`1<T> other);
}
[ExtensionAttribute]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal static class System.Collections.Frozen.FrozenDictionary : object {
    [ExtensionAttribute]
public static FrozenDictionary`2<TKey, TValue> ToFrozenDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> source, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static FrozenDictionary`2<TKey, TSource> ToFrozenDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static FrozenDictionary`2<TKey, TElement> ToFrozenDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    private static FrozenDictionary`2<TKey, TValue> GetExistingFrozenOrNewDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> source, IEqualityComparer`1<TKey> comparer, Dictionary`2& newDictionary);
    private static FrozenDictionary`2<TKey, TValue> CreateFromDictionary(Dictionary`2<TKey, TValue> source);
}
[DefaultMemberAttribute("Item")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[DebuggerTypeProxyAttribute("System.Collections.Immutable.ImmutableDictionaryDebuggerProxy`2")]
[DebuggerDisplayAttribute("Count = {Count}")]
internal abstract class System.Collections.Frozen.FrozenDictionary`2 : object {
    [CompilerGeneratedAttribute]
private static FrozenDictionary`2<TKey, TValue> <Empty>k__BackingField;
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<TKey> <Comparer>k__BackingField;
    public static FrozenDictionary`2<TKey, TValue> Empty { get; }
    public IEqualityComparer`1<TKey> Comparer { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<TKey> Keys { get; }
    private protected TKey[] KeysCore { get; }
    private ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get; }
    private IEnumerable`1<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<TValue> Values { get; }
    private protected TValue[] ValuesCore { get; }
    private ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private IEnumerable`1<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get; }
    public int Count { get; }
    private protected int CountCore { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("2")]
private object System.Collections.IDictionary.Item { get; private set; }
    [<c1ae26cd-b941-41d9-a0dc-6a3876edd189>IsReadOnlyAttribute]
public TValue& modreq(System.Runtime.InteropServices.InAttribute) Item { get; }
    private TValue System.Collections.Generic.IDictionary<TKey,TValue>.Item { get; private set; }
    private TValue System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Item { get; }
    private protected FrozenDictionary`2(IEqualityComparer`1<TKey> comparer);
    private static FrozenDictionary`2();
    [CompilerGeneratedAttribute]
public static FrozenDictionary`2<TKey, TValue> get_Empty();
    [CompilerGeneratedAttribute]
public IEqualityComparer`1<TKey> get_Comparer();
    public ImmutableArray`1<TKey> get_Keys();
    private protected abstract virtual TKey[] get_KeysCore();
    private sealed virtual override ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
    private sealed virtual override IEnumerable`1<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Keys();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    public ImmutableArray`1<TValue> get_Values();
    private protected abstract virtual TValue[] get_ValuesCore();
    private sealed virtual override ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override IEnumerable`1<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Values();
    public sealed virtual int get_Count();
    private protected abstract virtual int get_CountCore();
    public sealed virtual void CopyTo(KeyValuePair`2[] destination, int destinationIndex);
    public void CopyTo(Span`1<KeyValuePair`2<TKey, TValue>> destination);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    public TValue& modreq(System.Runtime.InteropServices.InAttribute) GetValueRefOrNullRef(TKey key);
    private protected abstract virtual TValue& modreq(System.Runtime.InteropServices.InAttribute) GetValueRefOrNullRefCore(TKey key);
    public TValue& modreq(System.Runtime.InteropServices.InAttribute) get_Item(TKey key);
    private sealed virtual override TValue System.Collections.Generic.IDictionary<TKey,TValue>.get_Item(TKey key);
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.set_Item(TKey key, TValue value);
    private sealed virtual override TValue System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Item(TKey key);
    public sealed virtual bool ContainsKey(TKey key);
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("0")]
public Enumerator<TKey, TValue> GetEnumerator();
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("0")]
private protected abstract virtual Enumerator<TKey, TValue> GetEnumeratorCore();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear();
    private sealed virtual override void System.Collections.IDictionary.Clear();
}
[<c1ae26cd-b941-41d9-a0dc-6a3876edd189>IsReadOnlyAttribute]
internal class System.Collections.Frozen.FrozenHashTable : ValueType {
    private Bucket[] _buckets;
    private ulong _fastModMultiplier;
    [CompilerGeneratedAttribute]
private Int32[] <HashCodes>k__BackingField;
    public int Count { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("1")]
internal Int32[] HashCodes { get; }
    private FrozenHashTable(Int32[] hashCodes, Bucket[] buckets, ulong fastModMultiplier);
    public static FrozenHashTable Create(Span`1<int> hashCodes, bool hashCodesAreUnique);
    public void FindMatchingEntries(int hashCode, Int32& startIndex, Int32& endIndex);
    public int get_Count();
    [CompilerGeneratedAttribute]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal Int32[] get_HashCodes();
    private static int CalcNumBuckets(ReadOnlySpan`1<int> hashCodes, bool hashCodesAreUnique);
    [CompilerGeneratedAttribute]
internal static bool <CalcNumBuckets>g__IsBucketFirstVisit|10_0(int code, <>c__DisplayClass10_0& );
}
[ExtensionAttribute]
internal static class System.Collections.Frozen.FrozenSet : object {
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[ExtensionAttribute]
public static FrozenSet`1<T> ToFrozenSet(IEnumerable`1<T> source, IEqualityComparer`1<T> comparer);
    private static FrozenSet`1<T> GetExistingFrozenOrNewSet(IEnumerable`1<T> source, IEqualityComparer`1<T> comparer, HashSet`1& newSet);
    private static FrozenSet`1<T> CreateFromSet(HashSet`1<T> source);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[DebuggerDisplayAttribute("Count = {Count}")]
[DebuggerTypeProxyAttribute("System.Collections.Immutable.ImmutableEnumerableDebuggerProxy`1")]
internal abstract class System.Collections.Frozen.FrozenSet`1 : object {
    [CompilerGeneratedAttribute]
private static FrozenSet`1<T> <Empty>k__BackingField;
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<T> <Comparer>k__BackingField;
    public static FrozenSet`1<T> Empty { get; }
    public IEqualityComparer`1<T> Comparer { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<T> Items { get; }
    private protected T[] ItemsCore { get; }
    public int Count { get; }
    private protected int CountCore { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private protected FrozenSet`1(IEqualityComparer`1<T> comparer);
    private static FrozenSet`1();
    [CompilerGeneratedAttribute]
public static FrozenSet`1<T> get_Empty();
    [CompilerGeneratedAttribute]
public IEqualityComparer`1<T> get_Comparer();
    public ImmutableArray`1<T> get_Items();
    private protected abstract virtual T[] get_ItemsCore();
    public sealed virtual int get_Count();
    private protected abstract virtual int get_CountCore();
    public sealed virtual void CopyTo(T[] destination, int destinationIndex);
    public void CopyTo(Span`1<T> destination);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual bool Contains(T item);
    public bool TryGetValue(T equalValue, T& actualValue);
    private protected abstract virtual int FindItemIndex(T item);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("0")]
public Enumerator<T> GetEnumerator();
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("0")]
private protected abstract virtual Enumerator<T> GetEnumeratorCore();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.Generic.ISet<T>.Add(T item);
    private sealed virtual override void System.Collections.Generic.ISet<T>.ExceptWith(IEnumerable`1<T> other);
    private sealed virtual override void System.Collections.Generic.ISet<T>.IntersectWith(IEnumerable`1<T> other);
    private sealed virtual override void System.Collections.Generic.ISet<T>.SymmetricExceptWith(IEnumerable`1<T> other);
    private sealed virtual override void System.Collections.Generic.ISet<T>.UnionWith(IEnumerable`1<T> other);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T item);
    public sealed virtual bool IsProperSubsetOf(IEnumerable`1<T> other);
    private protected abstract virtual bool IsProperSubsetOfCore(IEnumerable`1<T> other);
    public sealed virtual bool IsProperSupersetOf(IEnumerable`1<T> other);
    private protected abstract virtual bool IsProperSupersetOfCore(IEnumerable`1<T> other);
    public sealed virtual bool IsSubsetOf(IEnumerable`1<T> other);
    private protected abstract virtual bool IsSubsetOfCore(IEnumerable`1<T> other);
    public sealed virtual bool IsSupersetOf(IEnumerable`1<T> other);
    private protected abstract virtual bool IsSupersetOfCore(IEnumerable`1<T> other);
    public sealed virtual bool Overlaps(IEnumerable`1<T> other);
    private protected abstract virtual bool OverlapsCore(IEnumerable`1<T> other);
    public sealed virtual bool SetEquals(IEnumerable`1<T> other);
    private protected abstract virtual bool SetEqualsCore(IEnumerable`1<T> other);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class System.Collections.Frozen.FrozenSetInternalBase`2 : FrozenSet`1<T> {
    private TThisWrapper _thisSet;
    protected FrozenSetInternalBase`2(IEqualityComparer`1<T> comparer);
    private protected virtual bool IsProperSubsetOfCore(IEnumerable`1<T> other);
    private protected virtual bool IsProperSupersetOfCore(IEnumerable`1<T> other);
    private protected virtual bool IsSubsetOfCore(IEnumerable`1<T> other);
    private protected virtual bool IsSupersetOfCore(IEnumerable`1<T> other);
    private protected virtual bool OverlapsCore(IEnumerable`1<T> other);
    private protected virtual bool SetEqualsCore(IEnumerable`1<T> other);
    private bool ComparersAreCompatible(IReadOnlySet`1<T> other);
    private KeyValuePair`2<int, int> CheckUniqueAndUnfoundElements(IEnumerable`1<T> other, bool returnIfUnfound);
    private bool ContainsAllElements(IEnumerable`1<T> other);
    private bool IsSubsetOfSetWithCompatibleComparer(IReadOnlySet`1<T> other);
}
internal static class System.Collections.Frozen.Hashing : object {
    private static UInt32 Hash1Start;
    private static UInt32 Factor;
    public static int GetHashCodeOrdinal(ReadOnlySpan`1<char> s);
    public static int GetHashCodeOrdinalIgnoreCaseAscii(ReadOnlySpan`1<char> s);
    public static int GetHashCodeOrdinalIgnoreCase(ReadOnlySpan`1<char> s);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Collections.Frozen.Int32FrozenDictionary`1 : FrozenDictionary`2<int, TValue> {
    private FrozenHashTable _hashTable;
    private TValue[] _values;
    private protected Int32[] KeysCore { get; }
    private protected TValue[] ValuesCore { get; }
    private protected int CountCore { get; }
    internal Int32FrozenDictionary`1(Dictionary`2<int, TValue> source);
    private protected virtual Int32[] get_KeysCore();
    private protected virtual TValue[] get_ValuesCore();
    private protected virtual Enumerator<int, TValue> GetEnumeratorCore();
    private protected virtual int get_CountCore();
    private protected virtual TValue& modreq(System.Runtime.InteropServices.InAttribute) GetValueRefOrNullRefCore(int key);
}
internal class System.Collections.Frozen.Int32FrozenSet : FrozenSetInternalBase`2<int, GSW> {
    private FrozenHashTable _hashTable;
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("1")]
private protected Int32[] ItemsCore { get; }
    private protected int CountCore { get; }
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal Int32FrozenSet(HashSet`1<int> source);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
private protected virtual Int32[] get_ItemsCore();
    private protected virtual Enumerator<int> GetEnumeratorCore();
    private protected virtual int get_CountCore();
    private protected virtual int FindItemIndex(int item);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class System.Collections.Frozen.ItemsFrozenSet`2 : FrozenSetInternalBase`2<T, TThisWrapper> {
    private protected FrozenHashTable _hashTable;
    private protected T[] _items;
    private protected T[] ItemsCore { get; }
    private protected int CountCore { get; }
    protected ItemsFrozenSet`2(HashSet`1<T> source, bool keysAreHashCodes);
    private protected sealed virtual T[] get_ItemsCore();
    private protected sealed virtual Enumerator<T> GetEnumeratorCore();
    private protected sealed virtual int get_CountCore();
}
internal static class System.Collections.Frozen.KeyAnalyzer : object {
    public static AnalysisResults Analyze(ReadOnlySpan`1<string> uniqueStrings, bool ignoreCase, int minLength, int maxLength);
    private static bool TryUseSubstring(ReadOnlySpan`1<string> uniqueStrings, bool ignoreCase, int minLength, int maxLength, AnalysisResults& results);
    private static AnalysisResults CreateAnalysisResults(ReadOnlySpan`1<string> uniqueStrings, bool ignoreCase, int minLength, int maxLength, int index, int count, GetSpan getSubstringSpan);
    internal static bool IsAllAscii(ReadOnlySpan`1<char> s);
    private static bool ContainsAnyLetters(ReadOnlySpan`1<char> s);
    private static bool HasSufficientUniquenessFactor(HashSet`1<string> set, ReadOnlySpan`1<string> uniqueStrings);
    [CompilerGeneratedAttribute]
internal static bool <IsAllAscii>g__AllCharsInUInt32AreAscii|4_0(UInt32 value);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class System.Collections.Frozen.KeysAndValuesFrozenDictionary`2 : FrozenDictionary`2<TKey, TValue> {
    private protected FrozenHashTable _hashTable;
    private protected TKey[] _keys;
    private protected TValue[] _values;
    private protected TKey[] KeysCore { get; }
    private protected TValue[] ValuesCore { get; }
    private protected int CountCore { get; }
    protected KeysAndValuesFrozenDictionary`2(Dictionary`2<TKey, TValue> source, bool keysAreHashCodes);
    private protected sealed virtual TKey[] get_KeysCore();
    private protected sealed virtual TValue[] get_ValuesCore();
    private protected sealed virtual Enumerator<TKey, TValue> GetEnumeratorCore();
    private protected sealed virtual int get_CountCore();
}
internal static class System.Collections.Frozen.LengthBuckets : object {
    internal static int MaxPerLength;
    private static double EmptyLengthsRatio;
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal static Int32[] CreateLengthBucketsArrayIfAppropriate(String[] keys, IEqualityComparer`1<string> comparer, int minLength, int maxLength);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Collections.Frozen.LengthBucketsFrozenDictionary`1 : FrozenDictionary`2<string, TValue> {
    private Int32[] _lengthBuckets;
    private int _minLength;
    private String[] _keys;
    private TValue[] _values;
    private bool _ignoreCase;
    private protected String[] KeysCore { get; }
    private protected TValue[] ValuesCore { get; }
    private protected int CountCore { get; }
    private LengthBucketsFrozenDictionary`1(String[] keys, TValue[] values, Int32[] lengthBuckets, int minLength, IEqualityComparer`1<string> comparer);
    internal static LengthBucketsFrozenDictionary`1<TValue> CreateLengthBucketsFrozenDictionaryIfAppropriate(String[] keys, TValue[] values, IEqualityComparer`1<string> comparer, int minLength, int maxLength);
    private protected virtual String[] get_KeysCore();
    private protected virtual TValue[] get_ValuesCore();
    private protected virtual Enumerator<string, TValue> GetEnumeratorCore();
    private protected virtual int get_CountCore();
    private protected virtual TValue& modreq(System.Runtime.InteropServices.InAttribute) GetValueRefOrNullRefCore(string key);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Collections.Frozen.LengthBucketsFrozenSet : FrozenSetInternalBase`2<string, GSW> {
    private Int32[] _lengthBuckets;
    private int _minLength;
    private String[] _items;
    private bool _ignoreCase;
    private protected String[] ItemsCore { get; }
    private protected int CountCore { get; }
    private LengthBucketsFrozenSet(String[] items, Int32[] lengthBuckets, int minLength, IEqualityComparer`1<string> comparer);
    internal static LengthBucketsFrozenSet CreateLengthBucketsFrozenSetIfAppropriate(String[] items, IEqualityComparer`1<string> comparer, int minLength, int maxLength);
    private protected virtual String[] get_ItemsCore();
    private protected virtual Enumerator<string> GetEnumeratorCore();
    private protected virtual int get_CountCore();
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected virtual int FindItemIndex(string item);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Collections.Frozen.OrdinalStringFrozenDictionary_Full`1 : OrdinalStringFrozenDictionary`1<TValue> {
    internal OrdinalStringFrozenDictionary_Full`1(String[] keys, TValue[] values, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff);
    private protected virtual TValue& modreq(System.Runtime.InteropServices.InAttribute) GetValueRefOrNullRefCore(string key);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected virtual bool Equals(string x, string y);
    private protected virtual int GetHashCode(string s);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Frozen.OrdinalStringFrozenDictionary_FullCaseInsensitive`1 : OrdinalStringFrozenDictionary`1<TValue> {
    internal OrdinalStringFrozenDictionary_FullCaseInsensitive`1(String[] keys, TValue[] values, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff);
    private protected virtual TValue& modreq(System.Runtime.InteropServices.InAttribute) GetValueRefOrNullRefCore(string key);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected virtual bool Equals(string x, string y);
    private protected virtual int GetHashCode(string s);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Collections.Frozen.OrdinalStringFrozenDictionary_FullCaseInsensitiveAscii`1 : OrdinalStringFrozenDictionary`1<TValue> {
    internal OrdinalStringFrozenDictionary_FullCaseInsensitiveAscii`1(String[] keys, TValue[] values, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff);
    private protected virtual TValue& modreq(System.Runtime.InteropServices.InAttribute) GetValueRefOrNullRefCore(string key);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected virtual bool Equals(string x, string y);
    private protected virtual int GetHashCode(string s);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Frozen.OrdinalStringFrozenDictionary_LeftJustifiedCaseInsensitiveAsciiSubstring`1 : OrdinalStringFrozenDictionary`1<TValue> {
    internal OrdinalStringFrozenDictionary_LeftJustifiedCaseInsensitiveAsciiSubstring`1(String[] keys, TValue[] values, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff, int hashIndex, int hashCount);
    private protected virtual TValue& modreq(System.Runtime.InteropServices.InAttribute) GetValueRefOrNullRefCore(string key);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected virtual bool Equals(string x, string y);
    private protected virtual int GetHashCode(string s);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Frozen.OrdinalStringFrozenDictionary_LeftJustifiedCaseInsensitiveSubstring`1 : OrdinalStringFrozenDictionary`1<TValue> {
    internal OrdinalStringFrozenDictionary_LeftJustifiedCaseInsensitiveSubstring`1(String[] keys, TValue[] values, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff, int hashIndex, int hashCount);
    private protected virtual TValue& modreq(System.Runtime.InteropServices.InAttribute) GetValueRefOrNullRefCore(string key);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected virtual bool Equals(string x, string y);
    private protected virtual int GetHashCode(string s);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Frozen.OrdinalStringFrozenDictionary_LeftJustifiedSingleChar`1 : OrdinalStringFrozenDictionary`1<TValue> {
    internal OrdinalStringFrozenDictionary_LeftJustifiedSingleChar`1(String[] keys, TValue[] values, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff, int hashIndex);
    private protected virtual TValue& modreq(System.Runtime.InteropServices.InAttribute) GetValueRefOrNullRefCore(string key);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected virtual bool Equals(string x, string y);
    private protected virtual int GetHashCode(string s);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Frozen.OrdinalStringFrozenDictionary_LeftJustifiedSubstring`1 : OrdinalStringFrozenDictionary`1<TValue> {
    internal OrdinalStringFrozenDictionary_LeftJustifiedSubstring`1(String[] keys, TValue[] values, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff, int hashIndex, int hashCount);
    private protected virtual TValue& modreq(System.Runtime.InteropServices.InAttribute) GetValueRefOrNullRefCore(string key);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected virtual bool Equals(string x, string y);
    private protected virtual int GetHashCode(string s);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Collections.Frozen.OrdinalStringFrozenDictionary_RightJustifiedCaseInsensitiveAsciiSubstring`1 : OrdinalStringFrozenDictionary`1<TValue> {
    internal OrdinalStringFrozenDictionary_RightJustifiedCaseInsensitiveAsciiSubstring`1(String[] keys, TValue[] values, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff, int hashIndex, int hashCount);
    private protected virtual TValue& modreq(System.Runtime.InteropServices.InAttribute) GetValueRefOrNullRefCore(string key);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected virtual bool Equals(string x, string y);
    private protected virtual int GetHashCode(string s);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Collections.Frozen.OrdinalStringFrozenDictionary_RightJustifiedCaseInsensitiveSubstring`1 : OrdinalStringFrozenDictionary`1<TValue> {
    internal OrdinalStringFrozenDictionary_RightJustifiedCaseInsensitiveSubstring`1(String[] keys, TValue[] values, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff, int hashIndex, int hashCount);
    private protected virtual TValue& modreq(System.Runtime.InteropServices.InAttribute) GetValueRefOrNullRefCore(string key);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected virtual bool Equals(string x, string y);
    private protected virtual int GetHashCode(string s);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Collections.Frozen.OrdinalStringFrozenDictionary_RightJustifiedSingleChar`1 : OrdinalStringFrozenDictionary`1<TValue> {
    internal OrdinalStringFrozenDictionary_RightJustifiedSingleChar`1(String[] keys, TValue[] values, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff, int hashIndex);
    private protected virtual TValue& modreq(System.Runtime.InteropServices.InAttribute) GetValueRefOrNullRefCore(string key);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected virtual bool Equals(string x, string y);
    private protected virtual int GetHashCode(string s);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Frozen.OrdinalStringFrozenDictionary_RightJustifiedSubstring`1 : OrdinalStringFrozenDictionary`1<TValue> {
    internal OrdinalStringFrozenDictionary_RightJustifiedSubstring`1(String[] keys, TValue[] values, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff, int hashIndex, int hashCount);
    private protected virtual TValue& modreq(System.Runtime.InteropServices.InAttribute) GetValueRefOrNullRefCore(string key);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected virtual bool Equals(string x, string y);
    private protected virtual int GetHashCode(string s);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class System.Collections.Frozen.OrdinalStringFrozenDictionary`1 : FrozenDictionary`2<string, TValue> {
    private FrozenHashTable _hashTable;
    private String[] _keys;
    private TValue[] _values;
    private int _minimumLength;
    private int _maximumLengthDiff;
    [CompilerGeneratedAttribute]
private int <HashIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HashCount>k__BackingField;
    private protected int HashIndex { get; }
    private protected int HashCount { get; }
    private protected String[] KeysCore { get; }
    private protected TValue[] ValuesCore { get; }
    private protected int CountCore { get; }
    internal OrdinalStringFrozenDictionary`1(String[] keys, TValue[] values, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff, int hashIndex, int hashCount);
    [CompilerGeneratedAttribute]
private protected int get_HashIndex();
    [CompilerGeneratedAttribute]
private protected int get_HashCount();
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected abstract virtual bool Equals(string x, string y);
    private protected abstract virtual int GetHashCode(string s);
    private protected virtual String[] get_KeysCore();
    private protected virtual TValue[] get_ValuesCore();
    private protected virtual Enumerator<string, TValue> GetEnumeratorCore();
    private protected virtual int get_CountCore();
    private protected virtual TValue& modreq(System.Runtime.InteropServices.InAttribute) GetValueRefOrNullRefCore(string key);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal abstract class System.Collections.Frozen.OrdinalStringFrozenSet : FrozenSetInternalBase`2<string, GSW> {
    private FrozenHashTable _hashTable;
    private String[] _items;
    private int _minimumLength;
    private int _maximumLengthDiff;
    [CompilerGeneratedAttribute]
private int <HashIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HashCount>k__BackingField;
    private protected int HashIndex { get; }
    private protected int HashCount { get; }
    private protected String[] ItemsCore { get; }
    private protected int CountCore { get; }
    internal OrdinalStringFrozenSet(String[] entries, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff, int hashIndex, int hashCount);
    [CompilerGeneratedAttribute]
private protected int get_HashIndex();
    [CompilerGeneratedAttribute]
private protected int get_HashCount();
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected abstract virtual bool Equals(string x, string y);
    private protected abstract virtual int GetHashCode(string s);
    private protected virtual String[] get_ItemsCore();
    private protected virtual Enumerator<string> GetEnumeratorCore();
    private protected virtual int get_CountCore();
    private protected virtual int FindItemIndex(string item);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Frozen.OrdinalStringFrozenSet_Full : OrdinalStringFrozenSet {
    internal OrdinalStringFrozenSet_Full(String[] entries, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff);
    private protected virtual int FindItemIndex(string item);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected virtual bool Equals(string x, string y);
    private protected virtual int GetHashCode(string s);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
internal class System.Collections.Frozen.OrdinalStringFrozenSet_FullCaseInsensitive : OrdinalStringFrozenSet {
    internal OrdinalStringFrozenSet_FullCaseInsensitive(String[] entries, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff);
    private protected virtual int FindItemIndex(string item);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected virtual bool Equals(string x, string y);
    private protected virtual int GetHashCode(string s);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
internal class System.Collections.Frozen.OrdinalStringFrozenSet_FullCaseInsensitiveAscii : OrdinalStringFrozenSet {
    internal OrdinalStringFrozenSet_FullCaseInsensitiveAscii(String[] entries, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff);
    private protected virtual int FindItemIndex(string item);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected virtual bool Equals(string x, string y);
    private protected virtual int GetHashCode(string s);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Frozen.OrdinalStringFrozenSet_LeftJustifiedCaseInsensitiveAsciiSubstring : OrdinalStringFrozenSet {
    internal OrdinalStringFrozenSet_LeftJustifiedCaseInsensitiveAsciiSubstring(String[] entries, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff, int hashIndex, int hashCount);
    private protected virtual int FindItemIndex(string item);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected virtual bool Equals(string x, string y);
    private protected virtual int GetHashCode(string s);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Frozen.OrdinalStringFrozenSet_LeftJustifiedCaseInsensitiveSubstring : OrdinalStringFrozenSet {
    internal OrdinalStringFrozenSet_LeftJustifiedCaseInsensitiveSubstring(String[] entries, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff, int hashIndex, int hashCount);
    private protected virtual int FindItemIndex(string item);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected virtual bool Equals(string x, string y);
    private protected virtual int GetHashCode(string s);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Frozen.OrdinalStringFrozenSet_LeftJustifiedSingleChar : OrdinalStringFrozenSet {
    internal OrdinalStringFrozenSet_LeftJustifiedSingleChar(String[] entries, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff, int hashIndex);
    private protected virtual int FindItemIndex(string item);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected virtual bool Equals(string x, string y);
    private protected virtual int GetHashCode(string s);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
internal class System.Collections.Frozen.OrdinalStringFrozenSet_LeftJustifiedSubstring : OrdinalStringFrozenSet {
    internal OrdinalStringFrozenSet_LeftJustifiedSubstring(String[] entries, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff, int hashIndex, int hashCount);
    private protected virtual int FindItemIndex(string item);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected virtual bool Equals(string x, string y);
    private protected virtual int GetHashCode(string s);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
internal class System.Collections.Frozen.OrdinalStringFrozenSet_RightJustifiedCaseInsensitiveAsciiSubstring : OrdinalStringFrozenSet {
    internal OrdinalStringFrozenSet_RightJustifiedCaseInsensitiveAsciiSubstring(String[] entries, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff, int hashIndex, int hashCount);
    private protected virtual int FindItemIndex(string item);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected virtual bool Equals(string x, string y);
    private protected virtual int GetHashCode(string s);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
internal class System.Collections.Frozen.OrdinalStringFrozenSet_RightJustifiedCaseInsensitiveSubstring : OrdinalStringFrozenSet {
    internal OrdinalStringFrozenSet_RightJustifiedCaseInsensitiveSubstring(String[] entries, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff, int hashIndex, int hashCount);
    private protected virtual int FindItemIndex(string item);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected virtual bool Equals(string x, string y);
    private protected virtual int GetHashCode(string s);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
internal class System.Collections.Frozen.OrdinalStringFrozenSet_RightJustifiedSingleChar : OrdinalStringFrozenSet {
    internal OrdinalStringFrozenSet_RightJustifiedSingleChar(String[] entries, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff, int hashIndex);
    private protected virtual int FindItemIndex(string item);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected virtual bool Equals(string x, string y);
    private protected virtual int GetHashCode(string s);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Frozen.OrdinalStringFrozenSet_RightJustifiedSubstring : OrdinalStringFrozenSet {
    internal OrdinalStringFrozenSet_RightJustifiedSubstring(String[] entries, IEqualityComparer`1<string> comparer, int minimumLength, int maximumLengthDiff, int hashIndex, int hashCount);
    private protected virtual int FindItemIndex(string item);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
private protected virtual bool Equals(string x, string y);
    private protected virtual int GetHashCode(string s);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Frozen.SmallFrozenDictionary`2 : FrozenDictionary`2<TKey, TValue> {
    private TKey[] _keys;
    private TValue[] _values;
    private protected TKey[] KeysCore { get; }
    private protected TValue[] ValuesCore { get; }
    private protected int CountCore { get; }
    internal SmallFrozenDictionary`2(Dictionary`2<TKey, TValue> source);
    private protected virtual TKey[] get_KeysCore();
    private protected virtual TValue[] get_ValuesCore();
    private protected virtual int get_CountCore();
    private protected sealed virtual Enumerator<TKey, TValue> GetEnumeratorCore();
    private protected virtual TValue& modreq(System.Runtime.InteropServices.InAttribute) GetValueRefOrNullRefCore(TKey key);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Collections.Frozen.SmallFrozenSet`1 : FrozenSetInternalBase`2<T, GSW<T>> {
    private T[] _items;
    private protected T[] ItemsCore { get; }
    private protected int CountCore { get; }
    internal SmallFrozenSet`1(HashSet`1<T> source);
    private protected virtual T[] get_ItemsCore();
    private protected virtual int get_CountCore();
    private protected virtual int FindItemIndex(T item);
    private protected virtual Enumerator<T> GetEnumeratorCore();
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Collections.Frozen.SmallValueTypeComparableFrozenDictionary`2 : FrozenDictionary`2<TKey, TValue> {
    private TKey[] _keys;
    private TValue[] _values;
    private TKey _max;
    private protected TKey[] KeysCore { get; }
    private protected TValue[] ValuesCore { get; }
    private protected int CountCore { get; }
    internal SmallValueTypeComparableFrozenDictionary`2(Dictionary`2<TKey, TValue> source);
    private protected virtual TKey[] get_KeysCore();
    private protected virtual TValue[] get_ValuesCore();
    private protected virtual Enumerator<TKey, TValue> GetEnumeratorCore();
    private protected virtual int get_CountCore();
    private protected virtual TValue& modreq(System.Runtime.InteropServices.InAttribute) GetValueRefOrNullRefCore(TKey key);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Frozen.SmallValueTypeComparableFrozenSet`1 : FrozenSetInternalBase`2<T, GSW<T>> {
    private T[] _items;
    private T _max;
    private protected T[] ItemsCore { get; }
    private protected int CountCore { get; }
    internal SmallValueTypeComparableFrozenSet`1(HashSet`1<T> source);
    private protected virtual T[] get_ItemsCore();
    private protected virtual Enumerator<T> GetEnumeratorCore();
    private protected virtual int get_CountCore();
    private protected virtual int FindItemIndex(T item);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Frozen.SmallValueTypeDefaultComparerFrozenDictionary`2 : FrozenDictionary`2<TKey, TValue> {
    private TKey[] _keys;
    private TValue[] _values;
    private protected TKey[] KeysCore { get; }
    private protected TValue[] ValuesCore { get; }
    private protected int CountCore { get; }
    internal SmallValueTypeDefaultComparerFrozenDictionary`2(Dictionary`2<TKey, TValue> source);
    private protected virtual TKey[] get_KeysCore();
    private protected virtual TValue[] get_ValuesCore();
    private protected virtual Enumerator<TKey, TValue> GetEnumeratorCore();
    private protected virtual int get_CountCore();
    private protected virtual TValue& modreq(System.Runtime.InteropServices.InAttribute) GetValueRefOrNullRefCore(TKey key);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Frozen.SmallValueTypeDefaultComparerFrozenSet`1 : FrozenSetInternalBase`2<T, GSW<T>> {
    private T[] _items;
    private protected T[] ItemsCore { get; }
    private protected int CountCore { get; }
    internal SmallValueTypeDefaultComparerFrozenSet`1(HashSet`1<T> source);
    private protected virtual T[] get_ItemsCore();
    private protected virtual Enumerator<T> GetEnumeratorCore();
    private protected virtual int get_CountCore();
    private protected virtual int FindItemIndex(T item);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Frozen.ValueTypeDefaultComparerFrozenDictionary`2 : KeysAndValuesFrozenDictionary`2<TKey, TValue> {
    internal ValueTypeDefaultComparerFrozenDictionary`2(Dictionary`2<TKey, TValue> source);
    private protected virtual TValue& modreq(System.Runtime.InteropServices.InAttribute) GetValueRefOrNullRefCore(TKey key);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Frozen.ValueTypeDefaultComparerFrozenSet`1 : ItemsFrozenSet`2<T, GSW<T>> {
    internal ValueTypeDefaultComparerFrozenSet`1(HashSet`1<T> source);
    private protected virtual int FindItemIndex(T item);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal interface System.Collections.Generic.IHashKeyCollection`1 {
    public IEqualityComparer`1<TKey> KeyComparer { get; }
    public abstract virtual IEqualityComparer`1<TKey> get_KeyComparer();
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal interface System.Collections.Generic.IReadOnlySet`1 {
    public abstract virtual bool Contains(T item);
    public abstract virtual bool IsProperSubsetOf(IEnumerable`1<T> other);
    public abstract virtual bool IsProperSupersetOf(IEnumerable`1<T> other);
    public abstract virtual bool IsSubsetOf(IEnumerable`1<T> other);
    public abstract virtual bool IsSupersetOf(IEnumerable`1<T> other);
    public abstract virtual bool Overlaps(IEnumerable`1<T> other);
    public abstract virtual bool SetEquals(IEnumerable`1<T> other);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal interface System.Collections.Generic.ISortKeyCollection`1 {
    public IComparer`1<TKey> KeyComparer { get; }
    public abstract virtual IComparer`1<TKey> get_KeyComparer();
}
[ExtensionAttribute]
internal static class System.Collections.Generic.KeyValuePairExtensions : object {
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static void Deconstruct(KeyValuePair`2<TKey, TValue> source, TKey& key, TValue& value);
}
internal static class System.Collections.HashHelpers : object {
    public static UInt32 HashCollisionThreshold;
    public static int MaxPrimeArrayLength;
    public static int HashPrime;
    internal static ReadOnlySpan`1<int> Primes { get; }
    internal static ReadOnlySpan`1<int> get_Primes();
    public static bool IsPrime(int candidate);
    public static int GetPrime(int min);
    public static int ExpandPrime(int oldSize);
    public static ulong GetFastModMultiplier(UInt32 divisor);
    public static UInt32 FastMod(UInt32 value, UInt32 divisor, ulong multiplier);
}
internal static class System.Collections.Immutable.AllocFreeConcurrentStack : object {
    [ThreadStaticAttribute]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Dictionary`2<Type, object> t_stacks;
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
internal static class System.Collections.Immutable.AllocFreeConcurrentStack`1 : object {
    private static int MaxSize;
    private static Type s_typeOfT;
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Stack`1<RefAsValueType`1<T>> ThreadLocalStack { get; }
    private static AllocFreeConcurrentStack`1();
    public static void TryAdd(T item);
    public static bool TryTake(T& item);
    private static Stack`1<RefAsValueType`1<T>> get_ThreadLocalStack();
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
internal class System.Collections.Immutable.DictionaryEnumerator`2 : object {
    private IEnumerator`1<KeyValuePair`2<TKey, TValue>> _inner;
    public DictionaryEntry Entry { get; }
    public object Key { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("2")]
public object Value { get; }
    public object Current { get; }
    internal DictionaryEnumerator`2(IEnumerator`1<KeyValuePair`2<TKey, TValue>> inner);
    public sealed virtual DictionaryEntry get_Entry();
    public sealed virtual object get_Key();
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public sealed virtual object get_Value();
    public sealed virtual object get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
internal class System.Collections.Immutable.DisposableEnumeratorAdapter`2 : ValueType {
    private IEnumerator`1<T> _enumeratorObject;
    private TEnumerator _enumeratorStruct;
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("1")]
public T Current { get; }
    internal DisposableEnumeratorAdapter`2(TEnumerator enumerator);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal DisposableEnumeratorAdapter`2(IEnumerator`1<T> enumerator);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
public T get_Current();
    public bool MoveNext();
    public sealed virtual void Dispose();
    public DisposableEnumeratorAdapter`2<T, TEnumerator> GetEnumerator();
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
internal interface System.Collections.Immutable.IBinaryTree {
    public int Height { get; }
    public bool IsEmpty { get; }
    public int Count { get; }
    public IBinaryTree Left { get; }
    public IBinaryTree Right { get; }
    public abstract virtual int get_Height();
    public abstract virtual bool get_IsEmpty();
    public abstract virtual int get_Count();
    public abstract virtual IBinaryTree get_Left();
    public abstract virtual IBinaryTree get_Right();
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal interface System.Collections.Immutable.IBinaryTree`1 {
    public T Value { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IBinaryTree`1<T> Left { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IBinaryTree`1<T> Right { get; }
    public abstract virtual T get_Value();
    public abstract virtual IBinaryTree`1<T> get_Left();
    public abstract virtual IBinaryTree`1<T> get_Right();
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
internal interface System.Collections.Immutable.IImmutableArray {
    public Array Array { get; }
    public abstract virtual Array get_Array();
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal interface System.Collections.Immutable.IImmutableDictionary`2 {
    public abstract virtual IImmutableDictionary`2<TKey, TValue> Clear();
    public abstract virtual IImmutableDictionary`2<TKey, TValue> Add(TKey key, TValue value);
    public abstract virtual IImmutableDictionary`2<TKey, TValue> AddRange(IEnumerable`1<KeyValuePair`2<TKey, TValue>> pairs);
    public abstract virtual IImmutableDictionary`2<TKey, TValue> SetItem(TKey key, TValue value);
    public abstract virtual IImmutableDictionary`2<TKey, TValue> SetItems(IEnumerable`1<KeyValuePair`2<TKey, TValue>> items);
    public abstract virtual IImmutableDictionary`2<TKey, TValue> RemoveRange(IEnumerable`1<TKey> keys);
    public abstract virtual IImmutableDictionary`2<TKey, TValue> Remove(TKey key);
    public abstract virtual bool Contains(KeyValuePair`2<TKey, TValue> pair);
    public abstract virtual bool TryGetKey(TKey equalKey, TKey& actualKey);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
internal interface System.Collections.Immutable.IImmutableDictionaryInternal`2 {
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
public abstract virtual bool ContainsValue(TValue value);
}
[CollectionBuilderAttribute("System.Collections.Immutable.ImmutableList", "Create")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal interface System.Collections.Immutable.IImmutableList`1 {
    public abstract virtual IImmutableList`1<T> Clear();
    public abstract virtual int IndexOf(T item, int index, int count, IEqualityComparer`1<T> equalityComparer);
    public abstract virtual int LastIndexOf(T item, int index, int count, IEqualityComparer`1<T> equalityComparer);
    public abstract virtual IImmutableList`1<T> Add(T value);
    public abstract virtual IImmutableList`1<T> AddRange(IEnumerable`1<T> items);
    public abstract virtual IImmutableList`1<T> Insert(int index, T element);
    public abstract virtual IImmutableList`1<T> InsertRange(int index, IEnumerable`1<T> items);
    public abstract virtual IImmutableList`1<T> Remove(T value, IEqualityComparer`1<T> equalityComparer);
    public abstract virtual IImmutableList`1<T> RemoveAll(Predicate`1<T> match);
    public abstract virtual IImmutableList`1<T> RemoveRange(IEnumerable`1<T> items, IEqualityComparer`1<T> equalityComparer);
    public abstract virtual IImmutableList`1<T> RemoveRange(int index, int count);
    public abstract virtual IImmutableList`1<T> RemoveAt(int index);
    public abstract virtual IImmutableList`1<T> SetItem(int index, T value);
    public abstract virtual IImmutableList`1<T> Replace(T oldValue, T newValue, IEqualityComparer`1<T> equalityComparer);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal interface System.Collections.Immutable.IImmutableListQueries`1 {
    public abstract virtual ImmutableList`1<TOutput> ConvertAll(Func`2<T, TOutput> converter);
    public abstract virtual void ForEach(Action`1<T> action);
    public abstract virtual ImmutableList`1<T> GetRange(int index, int count);
    public abstract virtual void CopyTo(T[] array);
    public abstract virtual void CopyTo(T[] array, int arrayIndex);
    public abstract virtual void CopyTo(int index, T[] array, int arrayIndex, int count);
    public abstract virtual bool Exists(Predicate`1<T> match);
    public abstract virtual T Find(Predicate`1<T> match);
    public abstract virtual ImmutableList`1<T> FindAll(Predicate`1<T> match);
    public abstract virtual int FindIndex(Predicate`1<T> match);
    public abstract virtual int FindIndex(int startIndex, Predicate`1<T> match);
    public abstract virtual int FindIndex(int startIndex, int count, Predicate`1<T> match);
    public abstract virtual T FindLast(Predicate`1<T> match);
    public abstract virtual int FindLastIndex(Predicate`1<T> match);
    public abstract virtual int FindLastIndex(int startIndex, Predicate`1<T> match);
    public abstract virtual int FindLastIndex(int startIndex, int count, Predicate`1<T> match);
    public abstract virtual bool TrueForAll(Predicate`1<T> match);
    public abstract virtual int BinarySearch(T item);
    public abstract virtual int BinarySearch(T item, IComparer`1<T> comparer);
    public abstract virtual int BinarySearch(int index, int count, T item, IComparer`1<T> comparer);
}
[CollectionBuilderAttribute("System.Collections.Immutable.ImmutableQueue", "Create")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal interface System.Collections.Immutable.IImmutableQueue`1 {
    public bool IsEmpty { get; }
    public abstract virtual bool get_IsEmpty();
    public abstract virtual IImmutableQueue`1<T> Clear();
    public abstract virtual T Peek();
    public abstract virtual IImmutableQueue`1<T> Enqueue(T value);
    public abstract virtual IImmutableQueue`1<T> Dequeue();
}
[CollectionBuilderAttribute("System.Collections.Immutable.ImmutableHashSet", "Create")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal interface System.Collections.Immutable.IImmutableSet`1 {
    public abstract virtual IImmutableSet`1<T> Clear();
    public abstract virtual bool Contains(T value);
    public abstract virtual IImmutableSet`1<T> Add(T value);
    public abstract virtual IImmutableSet`1<T> Remove(T value);
    public abstract virtual bool TryGetValue(T equalValue, T& actualValue);
    public abstract virtual IImmutableSet`1<T> Intersect(IEnumerable`1<T> other);
    public abstract virtual IImmutableSet`1<T> Except(IEnumerable`1<T> other);
    public abstract virtual IImmutableSet`1<T> SymmetricExcept(IEnumerable`1<T> other);
    public abstract virtual IImmutableSet`1<T> Union(IEnumerable`1<T> other);
    public abstract virtual bool SetEquals(IEnumerable`1<T> other);
    public abstract virtual bool IsProperSubsetOf(IEnumerable`1<T> other);
    public abstract virtual bool IsProperSupersetOf(IEnumerable`1<T> other);
    public abstract virtual bool IsSubsetOf(IEnumerable`1<T> other);
    public abstract virtual bool IsSupersetOf(IEnumerable`1<T> other);
    public abstract virtual bool Overlaps(IEnumerable`1<T> other);
}
[CollectionBuilderAttribute("System.Collections.Immutable.ImmutableStack", "Create")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal interface System.Collections.Immutable.IImmutableStack`1 {
    public bool IsEmpty { get; }
    public abstract virtual bool get_IsEmpty();
    public abstract virtual IImmutableStack`1<T> Clear();
    public abstract virtual IImmutableStack`1<T> Push(T value);
    public abstract virtual IImmutableStack`1<T> Pop();
    public abstract virtual T Peek();
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[ExtensionAttribute]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
internal static class System.Collections.Immutable.ImmutableArray : object {
    internal static Byte[] TwoElementArray;
    private static ImmutableArray();
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public static ImmutableArray`1<T> Create();
    public static ImmutableArray`1<T> Create(T item);
    public static ImmutableArray`1<T> Create(T item1, T item2);
    public static ImmutableArray`1<T> Create(T item1, T item2, T item3);
    public static ImmutableArray`1<T> Create(T item1, T item2, T item3, T item4);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public static ImmutableArray`1<T> Create(ReadOnlySpan`1<T> items);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public static ImmutableArray`1<T> Create(Span`1<T> items);
    [ExtensionAttribute]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public static ImmutableArray`1<T> ToImmutableArray(ReadOnlySpan`1<T> items);
    [ExtensionAttribute]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public static ImmutableArray`1<T> ToImmutableArray(Span`1<T> items);
    public static ImmutableArray`1<T> CreateRange(IEnumerable`1<T> items);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public static ImmutableArray`1<T> Create(T[] items);
    public static ImmutableArray`1<T> Create(T[] items, int start, int length);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public static ImmutableArray`1<T> Create(ImmutableArray`1<T> items, int start, int length);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public static ImmutableArray`1<TResult> CreateRange(ImmutableArray`1<TSource> items, Func`2<TSource, TResult> selector);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public static ImmutableArray`1<TResult> CreateRange(ImmutableArray`1<TSource> items, int start, int length, Func`2<TSource, TResult> selector);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public static ImmutableArray`1<TResult> CreateRange(ImmutableArray`1<TSource> items, Func`3<TSource, TArg, TResult> selector, TArg arg);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public static ImmutableArray`1<TResult> CreateRange(ImmutableArray`1<TSource> items, int start, int length, Func`3<TSource, TArg, TResult> selector, TArg arg);
    public static Builder<T> CreateBuilder();
    public static Builder<T> CreateBuilder(int initialCapacity);
    [ExtensionAttribute]
public static ImmutableArray`1<TSource> ToImmutableArray(IEnumerable`1<TSource> items);
    [ExtensionAttribute]
public static ImmutableArray`1<TSource> ToImmutableArray(Builder<TSource> builder);
    [ExtensionAttribute]
public static int BinarySearch(ImmutableArray`1<T> array, T value);
    [ExtensionAttribute]
public static int BinarySearch(ImmutableArray`1<T> array, T value, IComparer`1<T> comparer);
    [ExtensionAttribute]
public static int BinarySearch(ImmutableArray`1<T> array, int index, int length, T value);
    [ExtensionAttribute]
public static int BinarySearch(ImmutableArray`1<T> array, int index, int length, T value, IComparer`1<T> comparer);
}
[NonVersionableAttribute]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
[DefaultMemberAttribute("Item")]
[CollectionBuilderAttribute("System.Collections.Immutable.ImmutableArray", "Create")]
[<c1ae26cd-b941-41d9-a0dc-6a3876edd189>IsReadOnlyAttribute]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Immutable.ImmutableArray`1 : ValueType {
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ImmutableArray`1<T> Empty;
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DebuggerBrowsableAttribute("3")]
internal T[] array;
    private T System.Collections.Generic.IList<T>.Item { get; private set; }
    [DebuggerBrowsableAttribute("0")]
private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    [DebuggerBrowsableAttribute("0")]
private int System.Collections.Generic.ICollection<T>.Count { get; }
    [DebuggerBrowsableAttribute("0")]
private int System.Collections.Generic.IReadOnlyCollection<T>.Count { get; }
    private T System.Collections.Generic.IReadOnlyList<T>.Item { get; }
    [DebuggerBrowsableAttribute("0")]
private bool System.Collections.IList.IsFixedSize { get; }
    [DebuggerBrowsableAttribute("0")]
private bool System.Collections.IList.IsReadOnly { get; }
    [DebuggerBrowsableAttribute("0")]
private int System.Collections.ICollection.Count { get; }
    [DebuggerBrowsableAttribute("0")]
private bool System.Collections.ICollection.IsSynchronized { get; }
    [DebuggerBrowsableAttribute("0")]
private object System.Collections.ICollection.SyncRoot { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    public T Item { get; }
    [DebuggerBrowsableAttribute("0")]
public bool IsEmpty { get; }
    [DebuggerBrowsableAttribute("0")]
public int Length { get; }
    [DebuggerBrowsableAttribute("0")]
public bool IsDefault { get; }
    [DebuggerBrowsableAttribute("0")]
public bool IsDefaultOrEmpty { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("2")]
[DebuggerBrowsableAttribute("0")]
private Array System.Collections.Immutable.IImmutableArray.Array { get; }
    [DebuggerBrowsableAttribute("0")]
private string DebuggerDisplay { get; }
    internal ImmutableArray`1(T[] items);
    private static ImmutableArray`1();
    private sealed virtual override T System.Collections.Generic.IList<T>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<T>.set_Item(int index, T value);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override int System.Collections.Generic.ICollection<T>.get_Count();
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<T>.get_Count();
    private sealed virtual override T System.Collections.Generic.IReadOnlyList<T>.get_Item(int index);
    public ReadOnlySpan`1<T> AsSpan();
    public ReadOnlyMemory`1<T> AsMemory();
    public sealed virtual int IndexOf(T item);
    public int IndexOf(T item, int startIndex, IEqualityComparer`1<T> equalityComparer);
    public int IndexOf(T item, int startIndex);
    public int IndexOf(T item, int startIndex, int count);
    public sealed virtual int IndexOf(T item, int startIndex, int count, IEqualityComparer`1<T> equalityComparer);
    public int LastIndexOf(T item);
    public int LastIndexOf(T item, int startIndex);
    public int LastIndexOf(T item, int startIndex, int count);
    public sealed virtual int LastIndexOf(T item, int startIndex, int count, IEqualityComparer`1<T> equalityComparer);
    public sealed virtual bool Contains(T item);
    public bool Contains(T item, IEqualityComparer`1<T> equalityComparer);
    public ImmutableArray`1<T> Insert(int index, T item);
    public ImmutableArray`1<T> InsertRange(int index, IEnumerable`1<T> items);
    public ImmutableArray`1<T> InsertRange(int index, ImmutableArray`1<T> items);
    public ImmutableArray`1<T> Add(T item);
    public ImmutableArray`1<T> AddRange(IEnumerable`1<T> items);
    public ImmutableArray`1<T> AddRange(T[] items, int length);
    public ImmutableArray`1<T> AddRange(TDerived[] items);
    public ImmutableArray`1<T> AddRange(ImmutableArray`1<T> items, int length);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("0")]
public ImmutableArray`1<T> AddRange(ImmutableArray`1<TDerived> items);
    public ImmutableArray`1<T> AddRange(ImmutableArray`1<T> items);
    public ImmutableArray`1<T> SetItem(int index, T item);
    public ImmutableArray`1<T> Replace(T oldValue, T newValue);
    public ImmutableArray`1<T> Replace(T oldValue, T newValue, IEqualityComparer`1<T> equalityComparer);
    public ImmutableArray`1<T> Remove(T item);
    public ImmutableArray`1<T> Remove(T item, IEqualityComparer`1<T> equalityComparer);
    public ImmutableArray`1<T> RemoveAt(int index);
    public ImmutableArray`1<T> RemoveRange(int index, int length);
    public ImmutableArray`1<T> RemoveRange(IEnumerable`1<T> items);
    public ImmutableArray`1<T> RemoveRange(IEnumerable`1<T> items, IEqualityComparer`1<T> equalityComparer);
    public ImmutableArray`1<T> RemoveRange(ImmutableArray`1<T> items);
    public ImmutableArray`1<T> RemoveRange(ImmutableArray`1<T> items, IEqualityComparer`1<T> equalityComparer);
    public ImmutableArray`1<T> RemoveAll(Predicate`1<T> match);
    public ImmutableArray`1<T> Clear();
    public ImmutableArray`1<T> Sort();
    public ImmutableArray`1<T> Sort(Comparison`1<T> comparison);
    public ImmutableArray`1<T> Sort(IComparer`1<T> comparer);
    public ImmutableArray`1<T> Sort(int index, int count, IComparer`1<T> comparer);
    public IEnumerable`1<TResult> OfType();
    public ImmutableArray`1<T> AddRange(ReadOnlySpan`1<T> items);
    public ImmutableArray`1<T> AddRange(T[] items);
    public ReadOnlySpan`1<T> AsSpan(int start, int length);
    public void CopyTo(Span`1<T> destination);
    public ImmutableArray`1<T> InsertRange(int index, T[] items);
    public ImmutableArray`1<T> InsertRange(int index, ReadOnlySpan`1<T> items);
    public ImmutableArray`1<T> RemoveRange(ReadOnlySpan`1<T> items, IEqualityComparer`1<T> equalityComparer);
    public ImmutableArray`1<T> RemoveRange(T[] items, IEqualityComparer`1<T> equalityComparer);
    public ImmutableArray`1<T> Slice(int start, int length);
    private sealed virtual override void System.Collections.Generic.IList<T>.Insert(int index, T item);
    private sealed virtual override void System.Collections.Generic.IList<T>.RemoveAt(int index);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T item);
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.Clear();
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.Add(T value);
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.AddRange(IEnumerable`1<T> items);
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.Insert(int index, T element);
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.InsertRange(int index, IEnumerable`1<T> items);
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.Remove(T value, IEqualityComparer`1<T> equalityComparer);
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.RemoveAll(Predicate`1<T> match);
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.RemoveRange(IEnumerable`1<T> items, IEqualityComparer`1<T> equalityComparer);
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.RemoveRange(int index, int count);
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.RemoveAt(int index);
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.SetItem(int index, T value);
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.Replace(T oldValue, T newValue, IEqualityComparer`1<T> equalityComparer);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private static bool IsCompatibleObject(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
    private sealed virtual override int System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override int System.Collections.IStructuralComparable.CompareTo(object other, IComparer comparer);
    private ImmutableArray`1<T> RemoveAtRange(ICollection`1<int> indicesToRemove);
    private ImmutableArray`1<T> InsertSpanRangeInternal(int index, ReadOnlySpan`1<T> items);
    [NonVersionableAttribute]
public static bool op_Equality(ImmutableArray`1<T> left, ImmutableArray`1<T> right);
    [NonVersionableAttribute]
public static bool op_Inequality(ImmutableArray`1<T> left, ImmutableArray`1<T> right);
    public static bool op_Equality(Nullable`1<ImmutableArray`1<T>> left, Nullable`1<ImmutableArray`1<T>> right);
    public static bool op_Inequality(Nullable`1<ImmutableArray`1<T>> left, Nullable`1<ImmutableArray`1<T>> right);
    [NonVersionableAttribute]
public T get_Item(int index);
    public T& modreq(System.Runtime.InteropServices.InAttribute) ItemRef(int index);
    [NonVersionableAttribute]
public bool get_IsEmpty();
    [NonVersionableAttribute]
public int get_Length();
    public bool get_IsDefault();
    public bool get_IsDefaultOrEmpty();
    private sealed virtual override Array System.Collections.Immutable.IImmutableArray.get_Array();
    private string get_DebuggerDisplay();
    public void CopyTo(T[] destination);
    public sealed virtual void CopyTo(T[] destination, int destinationIndex);
    public void CopyTo(int sourceIndex, T[] destination, int destinationIndex, int length);
    public Builder<T> ToBuilder();
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("0")]
public Enumerator<T> GetEnumerator();
    public virtual int GetHashCode();
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NonVersionableAttribute]
public sealed virtual bool Equals(ImmutableArray`1<T> other);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("0")]
public static ImmutableArray`1<T> CastUp(ImmutableArray`1<TDerived> items);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("0")]
public ImmutableArray`1<TOther> CastArray();
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("0")]
public ImmutableArray`1<TOther> As();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void ThrowNullRefIfNotInitialized();
    private void ThrowInvalidOperationIfNotInitialized();
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Immutable.ImmutableArrayBuilderDebuggerProxy`1 : object {
    private Builder<T> _builder;
    [DebuggerBrowsableAttribute("3")]
public T[] A { get; }
    public ImmutableArrayBuilderDebuggerProxy`1(Builder<T> builder);
    public T[] get_A();
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Collections.Immutable.ImmutableDictionary : object {
    public static ImmutableDictionary`2<TKey, TValue> Create();
    public static ImmutableDictionary`2<TKey, TValue> Create(IEqualityComparer`1<TKey> keyComparer);
    public static ImmutableDictionary`2<TKey, TValue> Create(IEqualityComparer`1<TKey> keyComparer, IEqualityComparer`1<TValue> valueComparer);
    public static ImmutableDictionary`2<TKey, TValue> CreateRange(IEnumerable`1<KeyValuePair`2<TKey, TValue>> items);
    public static ImmutableDictionary`2<TKey, TValue> CreateRange(IEqualityComparer`1<TKey> keyComparer, IEnumerable`1<KeyValuePair`2<TKey, TValue>> items);
    public static ImmutableDictionary`2<TKey, TValue> CreateRange(IEqualityComparer`1<TKey> keyComparer, IEqualityComparer`1<TValue> valueComparer, IEnumerable`1<KeyValuePair`2<TKey, TValue>> items);
    public static Builder<TKey, TValue> CreateBuilder();
    public static Builder<TKey, TValue> CreateBuilder(IEqualityComparer`1<TKey> keyComparer);
    public static Builder<TKey, TValue> CreateBuilder(IEqualityComparer`1<TKey> keyComparer, IEqualityComparer`1<TValue> valueComparer);
    [ExtensionAttribute]
public static ImmutableDictionary`2<TKey, TValue> ToImmutableDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TValue> elementSelector, IEqualityComparer`1<TKey> keyComparer, IEqualityComparer`1<TValue> valueComparer);
    [ExtensionAttribute]
public static ImmutableDictionary`2<TKey, TValue> ToImmutableDictionary(Builder<TKey, TValue> builder);
    [ExtensionAttribute]
public static ImmutableDictionary`2<TKey, TValue> ToImmutableDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TValue> elementSelector, IEqualityComparer`1<TKey> keyComparer);
    [ExtensionAttribute]
public static ImmutableDictionary`2<TKey, TSource> ToImmutableDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static ImmutableDictionary`2<TKey, TSource> ToImmutableDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> keyComparer);
    [ExtensionAttribute]
public static ImmutableDictionary`2<TKey, TValue> ToImmutableDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TValue> elementSelector);
    [ExtensionAttribute]
public static ImmutableDictionary`2<TKey, TValue> ToImmutableDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> source, IEqualityComparer`1<TKey> keyComparer, IEqualityComparer`1<TValue> valueComparer);
    [ExtensionAttribute]
public static ImmutableDictionary`2<TKey, TValue> ToImmutableDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> source, IEqualityComparer`1<TKey> keyComparer);
    [ExtensionAttribute]
public static ImmutableDictionary`2<TKey, TValue> ToImmutableDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> source);
    [ExtensionAttribute]
public static bool Contains(IImmutableDictionary`2<TKey, TValue> map, TKey key, TValue value);
    [ExtensionAttribute]
public static TValue GetValueOrDefault(IImmutableDictionary`2<TKey, TValue> dictionary, TKey key);
    [ExtensionAttribute]
public static TValue GetValueOrDefault(IImmutableDictionary`2<TKey, TValue> dictionary, TKey key, TValue defaultValue);
}
[DebuggerTypeProxyAttribute("System.Collections.Immutable.ImmutableDictionaryDebuggerProxy`2")]
[DefaultMemberAttribute("Item")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[DebuggerDisplayAttribute("Count = {Count}")]
internal class System.Collections.Immutable.ImmutableDictionary`2 : object {
    public static ImmutableDictionary`2<TKey, TValue> Empty;
    private static Action`1<KeyValuePair`2<int, HashBucket<TKey, TValue>>> s_FreezeBucketAction;
    private int _count;
    private SortedInt32KeyNode`1<HashBucket<TKey, TValue>> _root;
    private Comparers<TKey, TValue> _comparers;
    public int Count { get; }
    public bool IsEmpty { get; }
    public IEqualityComparer`1<TKey> KeyComparer { get; }
    public IEqualityComparer`1<TValue> ValueComparer { get; }
    public IEnumerable`1<TKey> Keys { get; }
    public IEnumerable`1<TValue> Values { get; }
    private ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get; }
    private ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
private MutationInput<TKey, TValue> Origin { get; }
    public TValue Item { get; }
    private TValue System.Collections.Generic.IDictionary<TKey,TValue>.Item { get; private set; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal SortedInt32KeyNode`1<HashBucket<TKey, TValue>> Root { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("2")]
private object System.Collections.IDictionary.Item { get; private set; }
    [DebuggerBrowsableAttribute("0")]
private object System.Collections.ICollection.SyncRoot { get; }
    [DebuggerBrowsableAttribute("0")]
private bool System.Collections.ICollection.IsSynchronized { get; }
    private ImmutableDictionary`2(SortedInt32KeyNode`1<HashBucket<TKey, TValue>> root, Comparers<TKey, TValue> comparers, int count);
    private ImmutableDictionary`2(Comparers<TKey, TValue> comparers);
    private static ImmutableDictionary`2();
    public ImmutableDictionary`2<TKey, TValue> Clear();
    public sealed virtual int get_Count();
    public bool get_IsEmpty();
    public sealed virtual IEqualityComparer`1<TKey> get_KeyComparer();
    public IEqualityComparer`1<TValue> get_ValueComparer();
    [IteratorStateMachineAttribute("System.Collections.Immutable.ImmutableDictionary`2/<get_Keys>d__25")]
public sealed virtual IEnumerable`1<TKey> get_Keys();
    [IteratorStateMachineAttribute("System.Collections.Immutable.ImmutableDictionary`2/<get_Values>d__27")]
public sealed virtual IEnumerable`1<TValue> get_Values();
    private sealed virtual override IImmutableDictionary`2<TKey, TValue> System.Collections.Immutable.IImmutableDictionary<TKey,TValue>.Clear();
    private sealed virtual override ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
    private sealed virtual override ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
    private MutationInput<TKey, TValue> get_Origin();
    public sealed virtual TValue get_Item(TKey key);
    private sealed virtual override TValue System.Collections.Generic.IDictionary<TKey,TValue>.get_Item(TKey key);
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.set_Item(TKey key, TValue value);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
    public Builder<TKey, TValue> ToBuilder();
    public ImmutableDictionary`2<TKey, TValue> Add(TKey key, TValue value);
    public ImmutableDictionary`2<TKey, TValue> AddRange(IEnumerable`1<KeyValuePair`2<TKey, TValue>> pairs);
    public ImmutableDictionary`2<TKey, TValue> SetItem(TKey key, TValue value);
    public ImmutableDictionary`2<TKey, TValue> SetItems(IEnumerable`1<KeyValuePair`2<TKey, TValue>> items);
    public ImmutableDictionary`2<TKey, TValue> Remove(TKey key);
    public ImmutableDictionary`2<TKey, TValue> RemoveRange(IEnumerable`1<TKey> keys);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> pair);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual bool TryGetKey(TKey equalKey, TKey& actualKey);
    public ImmutableDictionary`2<TKey, TValue> WithComparers(IEqualityComparer`1<TKey> keyComparer, IEqualityComparer`1<TValue> valueComparer);
    public ImmutableDictionary`2<TKey, TValue> WithComparers(IEqualityComparer`1<TKey> keyComparer);
    public sealed virtual bool ContainsValue(TValue value);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("0")]
public Enumerator<TKey, TValue> GetEnumerator();
    private sealed virtual override IImmutableDictionary`2<TKey, TValue> System.Collections.Immutable.IImmutableDictionary<TKey,TValue>.Add(TKey key, TValue value);
    private sealed virtual override IImmutableDictionary`2<TKey, TValue> System.Collections.Immutable.IImmutableDictionary<TKey,TValue>.SetItem(TKey key, TValue value);
    private sealed virtual override IImmutableDictionary`2<TKey, TValue> System.Collections.Immutable.IImmutableDictionary<TKey,TValue>.SetItems(IEnumerable`1<KeyValuePair`2<TKey, TValue>> items);
    private sealed virtual override IImmutableDictionary`2<TKey, TValue> System.Collections.Immutable.IImmutableDictionary<TKey,TValue>.AddRange(IEnumerable`1<KeyValuePair`2<TKey, TValue>> pairs);
    private sealed virtual override IImmutableDictionary`2<TKey, TValue> System.Collections.Immutable.IImmutableDictionary<TKey,TValue>.RemoveRange(IEnumerable`1<TKey> keys);
    private sealed virtual override IImmutableDictionary`2<TKey, TValue> System.Collections.Immutable.IImmutableDictionary<TKey,TValue>.Remove(TKey key);
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
    private sealed virtual override bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    internal SortedInt32KeyNode`1<HashBucket<TKey, TValue>> get_Root();
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override void System.Collections.IDictionary.Clear();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private static ImmutableDictionary`2<TKey, TValue> EmptyWithComparers(Comparers<TKey, TValue> comparers);
    private static bool TryCastToImmutableMap(IEnumerable`1<KeyValuePair`2<TKey, TValue>> sequence, ImmutableDictionary`2& other);
    private static bool ContainsKey(TKey key, MutationInput<TKey, TValue> origin);
    private static bool Contains(KeyValuePair`2<TKey, TValue> keyValuePair, MutationInput<TKey, TValue> origin);
    private static bool TryGetValue(TKey key, MutationInput<TKey, TValue> origin, TValue& value);
    private static bool TryGetKey(TKey equalKey, MutationInput<TKey, TValue> origin, TKey& actualKey);
    private static MutationResult<TKey, TValue> Add(TKey key, TValue value, KeyCollisionBehavior<TKey, TValue> behavior, MutationInput<TKey, TValue> origin);
    private static MutationResult<TKey, TValue> AddRange(IEnumerable`1<KeyValuePair`2<TKey, TValue>> items, MutationInput<TKey, TValue> origin, KeyCollisionBehavior<TKey, TValue> collisionBehavior);
    private static MutationResult<TKey, TValue> Remove(TKey key, MutationInput<TKey, TValue> origin);
    private static SortedInt32KeyNode`1<HashBucket<TKey, TValue>> UpdateRoot(SortedInt32KeyNode`1<HashBucket<TKey, TValue>> root, int hashCode, HashBucket<TKey, TValue> newBucket, IEqualityComparer`1<HashBucket<TKey, TValue>> hashBucketComparer);
    private static ImmutableDictionary`2<TKey, TValue> Wrap(SortedInt32KeyNode`1<HashBucket<TKey, TValue>> root, Comparers<TKey, TValue> comparers, int count);
    private ImmutableDictionary`2<TKey, TValue> Wrap(SortedInt32KeyNode`1<HashBucket<TKey, TValue>> root, int adjustedCountIfDifferentRoot);
    private ImmutableDictionary`2<TKey, TValue> AddRange(IEnumerable`1<KeyValuePair`2<TKey, TValue>> pairs, bool avoidToHashMap);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
internal class System.Collections.Immutable.ImmutableDictionaryBuilderDebuggerProxy`2 : object {
    private Builder<TKey, TValue> _map;
    private KeyValuePair`2[] _contents;
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DebuggerBrowsableAttribute("3")]
public KeyValuePair`2[] Contents { get; }
    public ImmutableDictionaryBuilderDebuggerProxy`2(Builder<TKey, TValue> map);
    public KeyValuePair`2[] get_Contents();
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Collections.Immutable.ImmutableDictionaryDebuggerProxy`2 : ImmutableEnumerableDebuggerProxy`1<KeyValuePair`2<TKey, TValue>> {
    public ImmutableDictionaryDebuggerProxy`2(IReadOnlyDictionary`2<TKey, TValue> dictionary);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Immutable.ImmutableEnumerableDebuggerProxy`1 : object {
    private IEnumerable`1<T> _enumerable;
    private T[] _cachedContents;
    [DebuggerBrowsableAttribute("3")]
public T[] Contents { get; }
    public ImmutableEnumerableDebuggerProxy`1(IEnumerable`1<T> enumerable);
    public T[] get_Contents();
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[ExtensionAttribute]
internal static class System.Collections.Immutable.ImmutableExtensions : object {
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
internal static bool IsValueType();
    [ExtensionAttribute]
internal static IOrderedCollection`1<T> AsOrderedCollection(IEnumerable`1<T> sequence);
    [ExtensionAttribute]
internal static void ClearFastWhenEmpty(Stack`1<T> stack);
    [ExtensionAttribute]
internal static DisposableEnumeratorAdapter`2<T, TEnumerator> GetEnumerableDisposable(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
internal static bool TryGetCount(IEnumerable`1<T> sequence, Int32& count);
    [ExtensionAttribute]
internal static bool TryGetCount(IEnumerable sequence, Int32& count);
    internal static int GetCount(IEnumerable`1& sequence);
    [ExtensionAttribute]
internal static bool TryCopyTo(IEnumerable`1<T> sequence, T[] array, int arrayIndex);
    [ExtensionAttribute]
internal static T[] ToArray(IEnumerable`1<T> sequence, int count);
}
[ExtensionAttribute]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal static class System.Collections.Immutable.ImmutableHashSet : object {
    public static ImmutableHashSet`1<T> Create();
    public static ImmutableHashSet`1<T> Create(IEqualityComparer`1<T> equalityComparer);
    public static ImmutableHashSet`1<T> Create(T item);
    public static ImmutableHashSet`1<T> Create(IEqualityComparer`1<T> equalityComparer, T item);
    public static ImmutableHashSet`1<T> CreateRange(IEnumerable`1<T> items);
    public static ImmutableHashSet`1<T> CreateRange(IEqualityComparer`1<T> equalityComparer, IEnumerable`1<T> items);
    public static ImmutableHashSet`1<T> Create(T[] items);
    public static ImmutableHashSet`1<T> Create(ReadOnlySpan`1<T> items);
    public static ImmutableHashSet`1<T> Create(IEqualityComparer`1<T> equalityComparer, T[] items);
    public static ImmutableHashSet`1<T> Create(IEqualityComparer`1<T> equalityComparer, ReadOnlySpan`1<T> items);
    public static Builder<T> CreateBuilder();
    public static Builder<T> CreateBuilder(IEqualityComparer`1<T> equalityComparer);
    [ExtensionAttribute]
public static ImmutableHashSet`1<TSource> ToImmutableHashSet(IEnumerable`1<TSource> source, IEqualityComparer`1<TSource> equalityComparer);
    [ExtensionAttribute]
public static ImmutableHashSet`1<TSource> ToImmutableHashSet(Builder<TSource> builder);
    [ExtensionAttribute]
public static ImmutableHashSet`1<TSource> ToImmutableHashSet(IEnumerable`1<TSource> source);
}
[DebuggerTypeProxyAttribute("System.Collections.Immutable.ImmutableEnumerableDebuggerProxy`1")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[DebuggerDisplayAttribute("Count = {Count}")]
[CollectionBuilderAttribute("System.Collections.Immutable.ImmutableHashSet", "Create")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
internal class System.Collections.Immutable.ImmutableHashSet`1 : object {
    public static ImmutableHashSet`1<T> Empty;
    private static Action`1<KeyValuePair`2<int, HashBucket<T>>> s_FreezeBucketAction;
    private IEqualityComparer`1<T> _equalityComparer;
    private int _count;
    private SortedInt32KeyNode`1<HashBucket<T>> _root;
    private IEqualityComparer`1<HashBucket<T>> _hashBucketEqualityComparer;
    public int Count { get; }
    public bool IsEmpty { get; }
    public IEqualityComparer`1<T> KeyComparer { get; }
    [DebuggerBrowsableAttribute("0")]
private object System.Collections.ICollection.SyncRoot { get; }
    [DebuggerBrowsableAttribute("0")]
private bool System.Collections.ICollection.IsSynchronized { get; }
    internal IBinaryTree Root { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
private MutationInput<T> Origin { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    internal ImmutableHashSet`1(IEqualityComparer`1<T> equalityComparer);
    private ImmutableHashSet`1(SortedInt32KeyNode`1<HashBucket<T>> root, IEqualityComparer`1<T> equalityComparer, int count);
    private static ImmutableHashSet`1();
    public ImmutableHashSet`1<T> Clear();
    public sealed virtual int get_Count();
    public bool get_IsEmpty();
    public sealed virtual IEqualityComparer`1<T> get_KeyComparer();
    private sealed virtual override IImmutableSet`1<T> System.Collections.Immutable.IImmutableSet<T>.Clear();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    internal IBinaryTree get_Root();
    private MutationInput<T> get_Origin();
    public Builder<T> ToBuilder();
    public ImmutableHashSet`1<T> Add(T item);
    public ImmutableHashSet`1<T> Remove(T item);
    public sealed virtual bool TryGetValue(T equalValue, T& actualValue);
    public ImmutableHashSet`1<T> Union(IEnumerable`1<T> other);
    internal ImmutableHashSet`1<T> Union(ReadOnlySpan`1<T> other);
    public ImmutableHashSet`1<T> Intersect(IEnumerable`1<T> other);
    public ImmutableHashSet`1<T> Except(IEnumerable`1<T> other);
    public ImmutableHashSet`1<T> SymmetricExcept(IEnumerable`1<T> other);
    public sealed virtual bool SetEquals(IEnumerable`1<T> other);
    public sealed virtual bool IsProperSubsetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsProperSupersetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsSubsetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsSupersetOf(IEnumerable`1<T> other);
    public sealed virtual bool Overlaps(IEnumerable`1<T> other);
    private sealed virtual override IImmutableSet`1<T> System.Collections.Immutable.IImmutableSet<T>.Add(T item);
    private sealed virtual override IImmutableSet`1<T> System.Collections.Immutable.IImmutableSet<T>.Remove(T item);
    private sealed virtual override IImmutableSet`1<T> System.Collections.Immutable.IImmutableSet<T>.Union(IEnumerable`1<T> other);
    private sealed virtual override IImmutableSet`1<T> System.Collections.Immutable.IImmutableSet<T>.Intersect(IEnumerable`1<T> other);
    private sealed virtual override IImmutableSet`1<T> System.Collections.Immutable.IImmutableSet<T>.Except(IEnumerable`1<T> other);
    private sealed virtual override IImmutableSet`1<T> System.Collections.Immutable.IImmutableSet<T>.SymmetricExcept(IEnumerable`1<T> other);
    public sealed virtual bool Contains(T item);
    public ImmutableHashSet`1<T> WithComparer(IEqualityComparer`1<T> equalityComparer);
    private sealed virtual override bool System.Collections.Generic.ISet<T>.Add(T item);
    private sealed virtual override void System.Collections.Generic.ISet<T>.ExceptWith(IEnumerable`1<T> other);
    private sealed virtual override void System.Collections.Generic.ISet<T>.IntersectWith(IEnumerable`1<T> other);
    private sealed virtual override void System.Collections.Generic.ISet<T>.SymmetricExceptWith(IEnumerable`1<T> other);
    private sealed virtual override void System.Collections.Generic.ISet<T>.UnionWith(IEnumerable`1<T> other);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T item);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("0")]
public sealed virtual Enumerator<T> GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private static bool IsSupersetOf(IEnumerable`1<T> other, MutationInput<T> origin);
    private static MutationResult<T> Add(T item, MutationInput<T> origin);
    private static MutationResult<T> Remove(T item, MutationInput<T> origin);
    private static bool Contains(T item, MutationInput<T> origin);
    private static MutationResult<T> Union(IEnumerable`1<T> other, MutationInput<T> origin);
    private static MutationResult<T> Union(ReadOnlySpan`1<T> other, MutationInput<T> origin);
    private static bool Overlaps(IEnumerable`1<T> other, MutationInput<T> origin);
    private static bool SetEquals(IEnumerable`1<T> other, MutationInput<T> origin);
    private static SortedInt32KeyNode`1<HashBucket<T>> UpdateRoot(SortedInt32KeyNode`1<HashBucket<T>> root, int hashCode, IEqualityComparer`1<HashBucket<T>> hashBucketEqualityComparer, HashBucket<T> newBucket);
    private static MutationResult<T> Intersect(IEnumerable`1<T> other, MutationInput<T> origin);
    private static MutationResult<T> Except(IEnumerable`1<T> other, IEqualityComparer`1<T> equalityComparer, IEqualityComparer`1<HashBucket<T>> hashBucketEqualityComparer, SortedInt32KeyNode`1<HashBucket<T>> root);
    private static MutationResult<T> SymmetricExcept(IEnumerable`1<T> other, MutationInput<T> origin);
    private static bool IsProperSubsetOf(IEnumerable`1<T> other, MutationInput<T> origin);
    private static bool IsProperSupersetOf(IEnumerable`1<T> other, MutationInput<T> origin);
    private static bool IsSubsetOf(IEnumerable`1<T> other, MutationInput<T> origin);
    private static ImmutableHashSet`1<T> Wrap(SortedInt32KeyNode`1<HashBucket<T>> root, IEqualityComparer`1<T> equalityComparer, int count);
    private static IEqualityComparer`1<HashBucket<T>> GetHashBucketEqualityComparer(IEqualityComparer`1<T> valueComparer);
    private ImmutableHashSet`1<T> Wrap(SortedInt32KeyNode`1<HashBucket<T>> root, int adjustedCountIfDifferentRoot);
    private ImmutableHashSet`1<T> Union(IEnumerable`1<T> items, bool avoidWithComparer);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal static class System.Collections.Immutable.ImmutableInterlocked : object {
    public static bool Update(T& location, Func`2<T, T> transformer);
    public static bool Update(T& location, Func`3<T, TArg, T> transformer, TArg transformerArgument);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public static bool Update(ImmutableArray`1& location, Func`2<ImmutableArray`1<T>, ImmutableArray`1<T>> transformer);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public static bool Update(ImmutableArray`1& location, Func`3<ImmutableArray`1<T>, TArg, ImmutableArray`1<T>> transformer, TArg transformerArgument);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public static ImmutableArray`1<T> InterlockedExchange(ImmutableArray`1& location, ImmutableArray`1<T> value);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public static ImmutableArray`1<T> InterlockedCompareExchange(ImmutableArray`1& location, ImmutableArray`1<T> value, ImmutableArray`1<T> comparand);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public static bool InterlockedInitialize(ImmutableArray`1& location, ImmutableArray`1<T> value);
    public static TValue GetOrAdd(ImmutableDictionary`2& location, TKey key, Func`3<TKey, TArg, TValue> valueFactory, TArg factoryArgument);
    public static TValue GetOrAdd(ImmutableDictionary`2& location, TKey key, Func`2<TKey, TValue> valueFactory);
    public static TValue GetOrAdd(ImmutableDictionary`2& location, TKey key, TValue value);
    public static TValue AddOrUpdate(ImmutableDictionary`2& location, TKey key, Func`2<TKey, TValue> addValueFactory, Func`3<TKey, TValue, TValue> updateValueFactory);
    public static TValue AddOrUpdate(ImmutableDictionary`2& location, TKey key, TValue addValue, Func`3<TKey, TValue, TValue> updateValueFactory);
    public static bool TryAdd(ImmutableDictionary`2& location, TKey key, TValue value);
    public static bool TryUpdate(ImmutableDictionary`2& location, TKey key, TValue newValue, TValue comparisonValue);
    public static bool TryRemove(ImmutableDictionary`2& location, TKey key, TValue& value);
    public static bool TryPop(ImmutableStack`1& location, T& value);
    public static void Push(ImmutableStack`1& location, T value);
    public static bool TryDequeue(ImmutableQueue`1& location, T& value);
    public static void Enqueue(ImmutableQueue`1& location, T value);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[ExtensionAttribute]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal static class System.Collections.Immutable.ImmutableList : object {
    public static ImmutableList`1<T> Create();
    public static ImmutableList`1<T> Create(T item);
    public static ImmutableList`1<T> CreateRange(IEnumerable`1<T> items);
    public static ImmutableList`1<T> Create(T[] items);
    public static ImmutableList`1<T> Create(ReadOnlySpan`1<T> items);
    public static Builder<T> CreateBuilder();
    [ExtensionAttribute]
public static ImmutableList`1<TSource> ToImmutableList(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static ImmutableList`1<TSource> ToImmutableList(Builder<TSource> builder);
    [ExtensionAttribute]
public static IImmutableList`1<T> Replace(IImmutableList`1<T> list, T oldValue, T newValue);
    [ExtensionAttribute]
public static IImmutableList`1<T> Remove(IImmutableList`1<T> list, T value);
    [ExtensionAttribute]
public static IImmutableList`1<T> RemoveRange(IImmutableList`1<T> list, IEnumerable`1<T> items);
    [ExtensionAttribute]
public static int IndexOf(IImmutableList`1<T> list, T item);
    [ExtensionAttribute]
public static int IndexOf(IImmutableList`1<T> list, T item, IEqualityComparer`1<T> equalityComparer);
    [ExtensionAttribute]
public static int IndexOf(IImmutableList`1<T> list, T item, int startIndex);
    [ExtensionAttribute]
public static int IndexOf(IImmutableList`1<T> list, T item, int startIndex, int count);
    [ExtensionAttribute]
public static int LastIndexOf(IImmutableList`1<T> list, T item);
    [ExtensionAttribute]
public static int LastIndexOf(IImmutableList`1<T> list, T item, IEqualityComparer`1<T> equalityComparer);
    [ExtensionAttribute]
public static int LastIndexOf(IImmutableList`1<T> list, T item, int startIndex);
    [ExtensionAttribute]
public static int LastIndexOf(IImmutableList`1<T> list, T item, int startIndex, int count);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[CollectionBuilderAttribute("System.Collections.Immutable.ImmutableList", "Create")]
[DebuggerDisplayAttribute("Count = {Count}")]
[DebuggerTypeProxyAttribute("System.Collections.Immutable.ImmutableEnumerableDebuggerProxy`1")]
internal class System.Collections.Immutable.ImmutableList`1 : object {
    public static ImmutableList`1<T> Empty;
    private Node<T> _root;
    [DebuggerBrowsableAttribute("0")]
public bool IsEmpty { get; }
    public int Count { get; }
    [DebuggerBrowsableAttribute("0")]
private object System.Collections.ICollection.SyncRoot { get; }
    [DebuggerBrowsableAttribute("0")]
private bool System.Collections.ICollection.IsSynchronized { get; }
    public T Item { get; }
    private T System.Collections.Immutable.IOrderedCollection<T>.Item { get; }
    private T System.Collections.Generic.IList<T>.Item { get; private set; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Node<T> Root { get; }
    private ImmutableList`1(Node<T> root);
    private static ImmutableList`1();
    public ImmutableList`1<T> Clear();
    public sealed virtual int BinarySearch(T item);
    public sealed virtual int BinarySearch(T item, IComparer`1<T> comparer);
    public sealed virtual int BinarySearch(int index, int count, T item, IComparer`1<T> comparer);
    public bool get_IsEmpty();
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.Clear();
    public sealed virtual int get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public sealed virtual T get_Item(int index);
    public T& modreq(System.Runtime.InteropServices.InAttribute) ItemRef(int index);
    private sealed virtual override T System.Collections.Immutable.IOrderedCollection<T>.get_Item(int index);
    public Builder<T> ToBuilder();
    public ImmutableList`1<T> Add(T value);
    public ImmutableList`1<T> AddRange(IEnumerable`1<T> items);
    internal ImmutableList`1<T> AddRange(ReadOnlySpan`1<T> items);
    public ImmutableList`1<T> Insert(int index, T item);
    public ImmutableList`1<T> InsertRange(int index, IEnumerable`1<T> items);
    public ImmutableList`1<T> Remove(T value);
    public ImmutableList`1<T> Remove(T value, IEqualityComparer`1<T> equalityComparer);
    public ImmutableList`1<T> RemoveRange(int index, int count);
    public ImmutableList`1<T> RemoveRange(IEnumerable`1<T> items);
    public ImmutableList`1<T> RemoveRange(IEnumerable`1<T> items, IEqualityComparer`1<T> equalityComparer);
    public ImmutableList`1<T> RemoveAt(int index);
    public ImmutableList`1<T> RemoveAll(Predicate`1<T> match);
    public ImmutableList`1<T> SetItem(int index, T value);
    public ImmutableList`1<T> Replace(T oldValue, T newValue);
    public ImmutableList`1<T> Replace(T oldValue, T newValue, IEqualityComparer`1<T> equalityComparer);
    public ImmutableList`1<T> Reverse();
    public ImmutableList`1<T> Reverse(int index, int count);
    public ImmutableList`1<T> Sort();
    public ImmutableList`1<T> Sort(Comparison`1<T> comparison);
    public ImmutableList`1<T> Sort(IComparer`1<T> comparer);
    public ImmutableList`1<T> Sort(int index, int count, IComparer`1<T> comparer);
    public sealed virtual void ForEach(Action`1<T> action);
    public sealed virtual void CopyTo(T[] array);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual void CopyTo(int index, T[] array, int arrayIndex, int count);
    public sealed virtual ImmutableList`1<T> GetRange(int index, int count);
    public sealed virtual ImmutableList`1<TOutput> ConvertAll(Func`2<T, TOutput> converter);
    public sealed virtual bool Exists(Predicate`1<T> match);
    public sealed virtual T Find(Predicate`1<T> match);
    public sealed virtual ImmutableList`1<T> FindAll(Predicate`1<T> match);
    public sealed virtual int FindIndex(Predicate`1<T> match);
    public sealed virtual int FindIndex(int startIndex, Predicate`1<T> match);
    public sealed virtual int FindIndex(int startIndex, int count, Predicate`1<T> match);
    public sealed virtual T FindLast(Predicate`1<T> match);
    public sealed virtual int FindLastIndex(Predicate`1<T> match);
    public sealed virtual int FindLastIndex(int startIndex, Predicate`1<T> match);
    public sealed virtual int FindLastIndex(int startIndex, int count, Predicate`1<T> match);
    public sealed virtual int IndexOf(T item, int index, int count, IEqualityComparer`1<T> equalityComparer);
    public sealed virtual int LastIndexOf(T item, int index, int count, IEqualityComparer`1<T> equalityComparer);
    public sealed virtual bool TrueForAll(Predicate`1<T> match);
    public sealed virtual bool Contains(T value);
    public sealed virtual int IndexOf(T value);
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.Add(T value);
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.AddRange(IEnumerable`1<T> items);
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.Insert(int index, T item);
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.InsertRange(int index, IEnumerable`1<T> items);
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.Remove(T value, IEqualityComparer`1<T> equalityComparer);
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.RemoveAll(Predicate`1<T> match);
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.RemoveRange(IEnumerable`1<T> items, IEqualityComparer`1<T> equalityComparer);
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.RemoveRange(int index, int count);
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.RemoveAt(int index);
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.SetItem(int index, T value);
    private sealed virtual override IImmutableList`1<T> System.Collections.Immutable.IImmutableList<T>.Replace(T oldValue, T newValue, IEqualityComparer`1<T> equalityComparer);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.Generic.IList<T>.Insert(int index, T item);
    private sealed virtual override void System.Collections.Generic.IList<T>.RemoveAt(int index);
    private sealed virtual override T System.Collections.Generic.IList<T>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<T>.set_Item(int index, T value);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T item);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("0")]
public sealed virtual Enumerator<T> GetEnumerator();
    internal Node<T> get_Root();
    private static ImmutableList`1<T> WrapNode(Node<T> root);
    private static bool TryCastToImmutableList(IEnumerable`1<T> sequence, ImmutableList`1& other);
    private static bool IsCompatibleObject(object value);
    private ImmutableList`1<T> Wrap(Node<T> root);
    private static ImmutableList`1<T> CreateRange(IEnumerable`1<T> items);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Immutable.ImmutableListBuilderDebuggerProxy`1 : object {
    private Builder<T> _list;
    private T[] _cachedContents;
    [DebuggerBrowsableAttribute("3")]
public T[] Contents { get; }
    public ImmutableListBuilderDebuggerProxy`1(Builder<T> builder);
    public T[] get_Contents();
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[ExtensionAttribute]
internal static class System.Collections.Immutable.ImmutableQueue : object {
    public static ImmutableQueue`1<T> Create();
    public static ImmutableQueue`1<T> Create(T item);
    public static ImmutableQueue`1<T> CreateRange(IEnumerable`1<T> items);
    public static ImmutableQueue`1<T> Create(T[] items);
    public static ImmutableQueue`1<T> Create(ReadOnlySpan`1<T> items);
    [ExtensionAttribute]
public static IImmutableQueue`1<T> Dequeue(IImmutableQueue`1<T> queue, T& value);
}
[DebuggerDisplayAttribute("IsEmpty = {IsEmpty}")]
[DebuggerTypeProxyAttribute("System.Collections.Immutable.ImmutableEnumerableDebuggerProxy`1")]
[CollectionBuilderAttribute("System.Collections.Immutable.ImmutableQueue", "Create")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Immutable.ImmutableQueue`1 : object {
    private static ImmutableQueue`1<T> s_EmptyField;
    private ImmutableStack`1<T> _backwards;
    private ImmutableStack`1<T> _forwards;
    private ImmutableStack`1<T> _backwardsReversed;
    public bool IsEmpty { get; }
    public static ImmutableQueue`1<T> Empty { get; }
    private ImmutableStack`1<T> BackwardsReversed { get; }
    internal ImmutableQueue`1(ImmutableStack`1<T> forwards, ImmutableStack`1<T> backwards);
    private static ImmutableQueue`1();
    public ImmutableQueue`1<T> Clear();
    public sealed virtual bool get_IsEmpty();
    public static ImmutableQueue`1<T> get_Empty();
    private sealed virtual override IImmutableQueue`1<T> System.Collections.Immutable.IImmutableQueue<T>.Clear();
    private ImmutableStack`1<T> get_BackwardsReversed();
    public sealed virtual T Peek();
    public T& modreq(System.Runtime.InteropServices.InAttribute) PeekRef();
    public ImmutableQueue`1<T> Enqueue(T value);
    private sealed virtual override IImmutableQueue`1<T> System.Collections.Immutable.IImmutableQueue<T>.Enqueue(T value);
    public ImmutableQueue`1<T> Dequeue();
    public ImmutableQueue`1<T> Dequeue(T& value);
    private sealed virtual override IImmutableQueue`1<T> System.Collections.Immutable.IImmutableQueue<T>.Dequeue();
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("0")]
public Enumerator<T> GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Collections.Immutable.ImmutableSortedDictionary : object {
    public static ImmutableSortedDictionary`2<TKey, TValue> Create();
    public static ImmutableSortedDictionary`2<TKey, TValue> Create(IComparer`1<TKey> keyComparer);
    public static ImmutableSortedDictionary`2<TKey, TValue> Create(IComparer`1<TKey> keyComparer, IEqualityComparer`1<TValue> valueComparer);
    public static ImmutableSortedDictionary`2<TKey, TValue> CreateRange(IEnumerable`1<KeyValuePair`2<TKey, TValue>> items);
    public static ImmutableSortedDictionary`2<TKey, TValue> CreateRange(IComparer`1<TKey> keyComparer, IEnumerable`1<KeyValuePair`2<TKey, TValue>> items);
    public static ImmutableSortedDictionary`2<TKey, TValue> CreateRange(IComparer`1<TKey> keyComparer, IEqualityComparer`1<TValue> valueComparer, IEnumerable`1<KeyValuePair`2<TKey, TValue>> items);
    public static Builder<TKey, TValue> CreateBuilder();
    public static Builder<TKey, TValue> CreateBuilder(IComparer`1<TKey> keyComparer);
    public static Builder<TKey, TValue> CreateBuilder(IComparer`1<TKey> keyComparer, IEqualityComparer`1<TValue> valueComparer);
    [ExtensionAttribute]
public static ImmutableSortedDictionary`2<TKey, TValue> ToImmutableSortedDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TValue> elementSelector, IComparer`1<TKey> keyComparer, IEqualityComparer`1<TValue> valueComparer);
    [ExtensionAttribute]
public static ImmutableSortedDictionary`2<TKey, TValue> ToImmutableSortedDictionary(Builder<TKey, TValue> builder);
    [ExtensionAttribute]
public static ImmutableSortedDictionary`2<TKey, TValue> ToImmutableSortedDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TValue> elementSelector, IComparer`1<TKey> keyComparer);
    [ExtensionAttribute]
public static ImmutableSortedDictionary`2<TKey, TValue> ToImmutableSortedDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TValue> elementSelector);
    [ExtensionAttribute]
public static ImmutableSortedDictionary`2<TKey, TValue> ToImmutableSortedDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> source, IComparer`1<TKey> keyComparer, IEqualityComparer`1<TValue> valueComparer);
    [ExtensionAttribute]
public static ImmutableSortedDictionary`2<TKey, TValue> ToImmutableSortedDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> source, IComparer`1<TKey> keyComparer);
    [ExtensionAttribute]
public static ImmutableSortedDictionary`2<TKey, TValue> ToImmutableSortedDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> source);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[DebuggerTypeProxyAttribute("System.Collections.Immutable.ImmutableDictionaryDebuggerProxy`2")]
[DebuggerDisplayAttribute("Count = {Count}")]
[DefaultMemberAttribute("Item")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
internal class System.Collections.Immutable.ImmutableSortedDictionary`2 : object {
    public static ImmutableSortedDictionary`2<TKey, TValue> Empty;
    private Node<TKey, TValue> _root;
    private int _count;
    private IComparer`1<TKey> _keyComparer;
    private IEqualityComparer`1<TValue> _valueComparer;
    public IEqualityComparer`1<TValue> ValueComparer { get; }
    public bool IsEmpty { get; }
    public int Count { get; }
    public IEnumerable`1<TKey> Keys { get; }
    public IEnumerable`1<TValue> Values { get; }
    private ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get; }
    private ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
    public IComparer`1<TKey> KeyComparer { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Node<TKey, TValue> Root { get; }
    public TValue Item { get; }
    private TValue System.Collections.Generic.IDictionary<TKey,TValue>.Item { get; private set; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("2")]
private object System.Collections.IDictionary.Item { get; private set; }
    [DebuggerBrowsableAttribute("0")]
private object System.Collections.ICollection.SyncRoot { get; }
    [DebuggerBrowsableAttribute("0")]
private bool System.Collections.ICollection.IsSynchronized { get; }
    internal ImmutableSortedDictionary`2(IComparer`1<TKey> keyComparer, IEqualityComparer`1<TValue> valueComparer);
    private ImmutableSortedDictionary`2(Node<TKey, TValue> root, int count, IComparer`1<TKey> keyComparer, IEqualityComparer`1<TValue> valueComparer);
    private static ImmutableSortedDictionary`2();
    public ImmutableSortedDictionary`2<TKey, TValue> Clear();
    public IEqualityComparer`1<TValue> get_ValueComparer();
    public bool get_IsEmpty();
    public sealed virtual int get_Count();
    public sealed virtual IEnumerable`1<TKey> get_Keys();
    public sealed virtual IEnumerable`1<TValue> get_Values();
    private sealed virtual override IImmutableDictionary`2<TKey, TValue> System.Collections.Immutable.IImmutableDictionary<TKey,TValue>.Clear();
    private sealed virtual override ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
    private sealed virtual override ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
    public sealed virtual IComparer`1<TKey> get_KeyComparer();
    internal Node<TKey, TValue> get_Root();
    public sealed virtual TValue get_Item(TKey key);
    public TValue& modreq(System.Runtime.InteropServices.InAttribute) ValueRef(TKey key);
    private sealed virtual override TValue System.Collections.Generic.IDictionary<TKey,TValue>.get_Item(TKey key);
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.set_Item(TKey key, TValue value);
    public Builder<TKey, TValue> ToBuilder();
    public ImmutableSortedDictionary`2<TKey, TValue> Add(TKey key, TValue value);
    public ImmutableSortedDictionary`2<TKey, TValue> SetItem(TKey key, TValue value);
    public ImmutableSortedDictionary`2<TKey, TValue> SetItems(IEnumerable`1<KeyValuePair`2<TKey, TValue>> items);
    public ImmutableSortedDictionary`2<TKey, TValue> AddRange(IEnumerable`1<KeyValuePair`2<TKey, TValue>> items);
    public ImmutableSortedDictionary`2<TKey, TValue> Remove(TKey value);
    public ImmutableSortedDictionary`2<TKey, TValue> RemoveRange(IEnumerable`1<TKey> keys);
    public ImmutableSortedDictionary`2<TKey, TValue> WithComparers(IComparer`1<TKey> keyComparer, IEqualityComparer`1<TValue> valueComparer);
    public ImmutableSortedDictionary`2<TKey, TValue> WithComparers(IComparer`1<TKey> keyComparer);
    public bool ContainsValue(TValue value);
    private sealed virtual override IImmutableDictionary`2<TKey, TValue> System.Collections.Immutable.IImmutableDictionary<TKey,TValue>.Add(TKey key, TValue value);
    private sealed virtual override IImmutableDictionary`2<TKey, TValue> System.Collections.Immutable.IImmutableDictionary<TKey,TValue>.SetItem(TKey key, TValue value);
    private sealed virtual override IImmutableDictionary`2<TKey, TValue> System.Collections.Immutable.IImmutableDictionary<TKey,TValue>.SetItems(IEnumerable`1<KeyValuePair`2<TKey, TValue>> items);
    private sealed virtual override IImmutableDictionary`2<TKey, TValue> System.Collections.Immutable.IImmutableDictionary<TKey,TValue>.AddRange(IEnumerable`1<KeyValuePair`2<TKey, TValue>> pairs);
    private sealed virtual override IImmutableDictionary`2<TKey, TValue> System.Collections.Immutable.IImmutableDictionary<TKey,TValue>.RemoveRange(IEnumerable`1<TKey> keys);
    private sealed virtual override IImmutableDictionary`2<TKey, TValue> System.Collections.Immutable.IImmutableDictionary<TKey,TValue>.Remove(TKey key);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> pair);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual bool TryGetKey(TKey equalKey, TKey& actualKey);
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
    private sealed virtual override bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override void System.Collections.IDictionary.Clear();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("0")]
public Enumerator<TKey, TValue> GetEnumerator();
    private static ImmutableSortedDictionary`2<TKey, TValue> Wrap(Node<TKey, TValue> root, int count, IComparer`1<TKey> keyComparer, IEqualityComparer`1<TValue> valueComparer);
    private static bool TryCastToImmutableMap(IEnumerable`1<KeyValuePair`2<TKey, TValue>> sequence, ImmutableSortedDictionary`2& other);
    private ImmutableSortedDictionary`2<TKey, TValue> AddRange(IEnumerable`1<KeyValuePair`2<TKey, TValue>> items, bool overwriteOnCollision, bool avoidToSortedMap);
    private ImmutableSortedDictionary`2<TKey, TValue> Wrap(Node<TKey, TValue> root, int adjustedCountIfDifferentRoot);
    private ImmutableSortedDictionary`2<TKey, TValue> FillFromEmpty(IEnumerable`1<KeyValuePair`2<TKey, TValue>> items, bool overwriteOnCollision);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
internal class System.Collections.Immutable.ImmutableSortedDictionaryBuilderDebuggerProxy`2 : object {
    private Builder<TKey, TValue> _map;
    private KeyValuePair`2[] _contents;
    [DebuggerBrowsableAttribute("3")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public KeyValuePair`2[] Contents { get; }
    public ImmutableSortedDictionaryBuilderDebuggerProxy`2(Builder<TKey, TValue> map);
    public KeyValuePair`2[] get_Contents();
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[ExtensionAttribute]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal static class System.Collections.Immutable.ImmutableSortedSet : object {
    public static ImmutableSortedSet`1<T> Create();
    public static ImmutableSortedSet`1<T> Create(IComparer`1<T> comparer);
    public static ImmutableSortedSet`1<T> Create(T item);
    public static ImmutableSortedSet`1<T> Create(IComparer`1<T> comparer, T item);
    public static ImmutableSortedSet`1<T> CreateRange(IEnumerable`1<T> items);
    public static ImmutableSortedSet`1<T> CreateRange(IComparer`1<T> comparer, IEnumerable`1<T> items);
    public static ImmutableSortedSet`1<T> Create(T[] items);
    public static ImmutableSortedSet`1<T> Create(ReadOnlySpan`1<T> items);
    public static ImmutableSortedSet`1<T> Create(IComparer`1<T> comparer, T[] items);
    public static ImmutableSortedSet`1<T> Create(IComparer`1<T> comparer, ReadOnlySpan`1<T> items);
    public static Builder<T> CreateBuilder();
    public static Builder<T> CreateBuilder(IComparer`1<T> comparer);
    [ExtensionAttribute]
public static ImmutableSortedSet`1<TSource> ToImmutableSortedSet(IEnumerable`1<TSource> source, IComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static ImmutableSortedSet`1<TSource> ToImmutableSortedSet(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static ImmutableSortedSet`1<TSource> ToImmutableSortedSet(Builder<TSource> builder);
}
[DebuggerTypeProxyAttribute("System.Collections.Immutable.ImmutableEnumerableDebuggerProxy`1")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[CollectionBuilderAttribute("System.Collections.Immutable.ImmutableSortedSet", "Create")]
[DebuggerDisplayAttribute("Count = {Count}")]
internal class System.Collections.Immutable.ImmutableSortedSet`1 : object {
    private static float RefillOverIncrementalThreshold;
    public static ImmutableSortedSet`1<T> Empty;
    private Node<T> _root;
    private IComparer`1<T> _comparer;
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("2")]
public T Max { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("2")]
public T Min { get; }
    public bool IsEmpty { get; }
    public int Count { get; }
    public IComparer`1<T> KeyComparer { get; }
    internal IBinaryTree Root { get; }
    public T Item { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    private T System.Collections.Generic.IList<T>.Item { get; private set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    [DebuggerBrowsableAttribute("0")]
private object System.Collections.ICollection.SyncRoot { get; }
    [DebuggerBrowsableAttribute("0")]
private bool System.Collections.ICollection.IsSynchronized { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    internal ImmutableSortedSet`1(IComparer`1<T> comparer);
    private ImmutableSortedSet`1(Node<T> root, IComparer`1<T> comparer);
    private static ImmutableSortedSet`1();
    public ImmutableSortedSet`1<T> Clear();
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public T get_Max();
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public T get_Min();
    public bool get_IsEmpty();
    public sealed virtual int get_Count();
    public sealed virtual IComparer`1<T> get_KeyComparer();
    internal IBinaryTree get_Root();
    public sealed virtual T get_Item(int index);
    public T& modreq(System.Runtime.InteropServices.InAttribute) ItemRef(int index);
    public Builder<T> ToBuilder();
    public ImmutableSortedSet`1<T> Add(T value);
    public ImmutableSortedSet`1<T> Remove(T value);
    public sealed virtual bool TryGetValue(T equalValue, T& actualValue);
    public ImmutableSortedSet`1<T> Intersect(IEnumerable`1<T> other);
    public ImmutableSortedSet`1<T> Except(IEnumerable`1<T> other);
    public ImmutableSortedSet`1<T> SymmetricExcept(IEnumerable`1<T> other);
    public ImmutableSortedSet`1<T> Union(IEnumerable`1<T> other);
    internal ImmutableSortedSet`1<T> Union(ReadOnlySpan`1<T> other);
    public ImmutableSortedSet`1<T> WithComparer(IComparer`1<T> comparer);
    public sealed virtual bool SetEquals(IEnumerable`1<T> other);
    public sealed virtual bool IsProperSubsetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsProperSupersetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsSubsetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsSupersetOf(IEnumerable`1<T> other);
    public sealed virtual bool Overlaps(IEnumerable`1<T> other);
    public IEnumerable`1<T> Reverse();
    public sealed virtual int IndexOf(T item);
    public sealed virtual bool Contains(T value);
    private sealed virtual override IImmutableSet`1<T> System.Collections.Immutable.IImmutableSet<T>.Clear();
    private sealed virtual override IImmutableSet`1<T> System.Collections.Immutable.IImmutableSet<T>.Add(T value);
    private sealed virtual override IImmutableSet`1<T> System.Collections.Immutable.IImmutableSet<T>.Remove(T value);
    private sealed virtual override IImmutableSet`1<T> System.Collections.Immutable.IImmutableSet<T>.Intersect(IEnumerable`1<T> other);
    private sealed virtual override IImmutableSet`1<T> System.Collections.Immutable.IImmutableSet<T>.Except(IEnumerable`1<T> other);
    private sealed virtual override IImmutableSet`1<T> System.Collections.Immutable.IImmutableSet<T>.SymmetricExcept(IEnumerable`1<T> other);
    private sealed virtual override IImmutableSet`1<T> System.Collections.Immutable.IImmutableSet<T>.Union(IEnumerable`1<T> other);
    private sealed virtual override bool System.Collections.Generic.ISet<T>.Add(T item);
    private sealed virtual override void System.Collections.Generic.ISet<T>.ExceptWith(IEnumerable`1<T> other);
    private sealed virtual override void System.Collections.Generic.ISet<T>.IntersectWith(IEnumerable`1<T> other);
    private sealed virtual override void System.Collections.Generic.ISet<T>.SymmetricExceptWith(IEnumerable`1<T> other);
    private sealed virtual override void System.Collections.Generic.ISet<T>.UnionWith(IEnumerable`1<T> other);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T item);
    private sealed virtual override T System.Collections.Generic.IList<T>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<T>.set_Item(int index, T value);
    private sealed virtual override void System.Collections.Generic.IList<T>.Insert(int index, T item);
    private sealed virtual override void System.Collections.Generic.IList<T>.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private static bool IsCompatibleObject(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("0")]
public sealed virtual Enumerator<T> GetEnumerator();
    private static bool TryCastToImmutableSortedSet(IEnumerable`1<T> sequence, ImmutableSortedSet`1& other);
    private static ImmutableSortedSet`1<T> Wrap(Node<T> root, IComparer`1<T> comparer);
    private ImmutableSortedSet`1<T> UnionIncremental(IEnumerable`1<T> items);
    private ImmutableSortedSet`1<T> UnionIncremental(ReadOnlySpan`1<T> items);
    private ImmutableSortedSet`1<T> Wrap(Node<T> root);
    private ImmutableSortedSet`1<T> LeafToRootRefill(IEnumerable`1<T> addedItems);
    private ImmutableSortedSet`1<T> LeafToRootRefill(ReadOnlySpan`1<T> addedItems);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
internal class System.Collections.Immutable.ImmutableSortedSetBuilderDebuggerProxy`1 : object {
    private Builder<T> _set;
    [DebuggerBrowsableAttribute("3")]
public T[] Contents { get; }
    public ImmutableSortedSetBuilderDebuggerProxy`1(Builder<T> builder);
    public T[] get_Contents();
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Collections.Immutable.ImmutableStack : object {
    public static ImmutableStack`1<T> Create();
    public static ImmutableStack`1<T> Create(T item);
    public static ImmutableStack`1<T> CreateRange(IEnumerable`1<T> items);
    public static ImmutableStack`1<T> Create(T[] items);
    public static ImmutableStack`1<T> Create(ReadOnlySpan`1<T> items);
    [ExtensionAttribute]
public static IImmutableStack`1<T> Pop(IImmutableStack`1<T> stack, T& value);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[DebuggerTypeProxyAttribute("System.Collections.Immutable.ImmutableEnumerableDebuggerProxy`1")]
[DebuggerDisplayAttribute("IsEmpty = {IsEmpty}, Top = {_head}")]
[CollectionBuilderAttribute("System.Collections.Immutable.ImmutableStack", "Create")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Immutable.ImmutableStack`1 : object {
    private static ImmutableStack`1<T> s_EmptyField;
    private T _head;
    private ImmutableStack`1<T> _tail;
    public static ImmutableStack`1<T> Empty { get; }
    public bool IsEmpty { get; }
    private ImmutableStack`1(T head, ImmutableStack`1<T> tail);
    private static ImmutableStack`1();
    public static ImmutableStack`1<T> get_Empty();
    public ImmutableStack`1<T> Clear();
    private sealed virtual override IImmutableStack`1<T> System.Collections.Immutable.IImmutableStack<T>.Clear();
    public sealed virtual bool get_IsEmpty();
    public sealed virtual T Peek();
    public T& modreq(System.Runtime.InteropServices.InAttribute) PeekRef();
    public ImmutableStack`1<T> Push(T value);
    private sealed virtual override IImmutableStack`1<T> System.Collections.Immutable.IImmutableStack<T>.Push(T value);
    public ImmutableStack`1<T> Pop();
    public ImmutableStack`1<T> Pop(T& value);
    private sealed virtual override IImmutableStack`1<T> System.Collections.Immutable.IImmutableStack<T>.Pop();
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("0")]
public Enumerator<T> GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal ImmutableStack`1<T> Reverse();
}
[DefaultMemberAttribute("Item")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal interface System.Collections.Immutable.IOrderedCollection`1 {
    public int Count { get; }
    public T Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual T get_Item(int index);
}
internal interface System.Collections.Immutable.ISecurePooledObjectUser {
    public int PoolUserId { get; }
    public abstract virtual int get_PoolUserId();
}
internal interface System.Collections.Immutable.IStrongEnumerable`2 {
    public abstract virtual TEnumerator GetEnumerator();
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal interface System.Collections.Immutable.IStrongEnumerator`1 {
    public T Current { get; }
    public abstract virtual T get_Current();
    public abstract virtual bool MoveNext();
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Immutable.KeysCollectionAccessor`2 : KeysOrValuesCollectionAccessor`3<TKey, TValue, TKey> {
    internal KeysCollectionAccessor`2(IImmutableDictionary`2<TKey, TValue> dictionary);
    public virtual bool Contains(TKey item);
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal abstract class System.Collections.Immutable.KeysOrValuesCollectionAccessor`3 : object {
    private IImmutableDictionary`2<TKey, TValue> _dictionary;
    private IEnumerable`1<T> _keysOrValues;
    public bool IsReadOnly { get; }
    public int Count { get; }
    protected IImmutableDictionary`2<TKey, TValue> Dictionary { get; }
    [DebuggerBrowsableAttribute("0")]
private bool System.Collections.ICollection.IsSynchronized { get; }
    [DebuggerBrowsableAttribute("0")]
private object System.Collections.ICollection.SyncRoot { get; }
    protected KeysOrValuesCollectionAccessor`3(IImmutableDictionary`2<TKey, TValue> dictionary, IEnumerable`1<T> keysOrValues);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int get_Count();
    protected IImmutableDictionary`2<TKey, TValue> get_Dictionary();
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public abstract virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
}
[DebuggerDisplayAttribute("{Value,nq}")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Immutable.RefAsValueType`1 : ValueType {
    internal T Value;
    internal RefAsValueType`1(T value);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
internal static class System.Collections.Immutable.Requires : object {
    [DebuggerStepThroughAttribute]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
public static void NotNull(T value, string parameterName);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public static T NotNullPassthrough(T value, string parameterName);
    [DebuggerStepThroughAttribute]
public static void NotNullAllowStructs(T value, string parameterName);
    [DebuggerStepThroughAttribute]
[<fd6e42cc-bcd9-4db3-b2c7-996ef7da2c1e>DoesNotReturnAttribute]
public static void FailArgumentNullException(string parameterName);
    [DebuggerStepThroughAttribute]
public static void Range(bool condition, string parameterName, string message);
    [<fd6e42cc-bcd9-4db3-b2c7-996ef7da2c1e>DoesNotReturnAttribute]
[DebuggerStepThroughAttribute]
public static void FailRange(string parameterName, string message);
    [DebuggerStepThroughAttribute]
public static void Argument(bool condition, string parameterName, string message);
    [DebuggerStepThroughAttribute]
public static void Argument(bool condition);
    [DebuggerStepThroughAttribute]
[<fd6e42cc-bcd9-4db3-b2c7-996ef7da2c1e>DoesNotReturnAttribute]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
public static void FailObjectDisposed(TDisposed disposed);
}
internal static class System.Collections.Immutable.SecureObjectPool : object {
    private static int s_poolUserIdCounter;
    internal static int UnassignedId;
    internal static int NewId();
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
internal static class System.Collections.Immutable.SecureObjectPool`2 : object {
    public static void TryAdd(TCaller caller, SecurePooledObject`1<T> item);
    public static bool TryTake(TCaller caller, SecurePooledObject`1& item);
    public static SecurePooledObject`1<T> PrepNew(TCaller caller, T newValue);
}
internal class System.Collections.Immutable.SecurePooledObject`1 : object {
    private T _value;
    private int _owner;
    internal int Owner { get; internal set; }
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal SecurePooledObject`1(T newValue);
    internal int get_Owner();
    internal void set_Owner(int value);
    internal T Use(TCaller& caller);
    internal bool TryUse(TCaller& caller, T& value);
    internal bool IsOwned(TCaller& caller);
}
[DebuggerDisplayAttribute("{_key} = {_value}")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Collections.Immutable.SortedInt32KeyNode`1 : object {
    internal static SortedInt32KeyNode`1<TValue> EmptyNode;
    private int _key;
    private TValue _value;
    private bool _frozen;
    private byte _height;
    private SortedInt32KeyNode`1<TValue> _left;
    private SortedInt32KeyNode`1<TValue> _right;
    public bool IsEmpty { get; }
    public int Height { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SortedInt32KeyNode`1<TValue> Left { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SortedInt32KeyNode`1<TValue> Right { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("2")]
private IBinaryTree System.Collections.Immutable.IBinaryTree.Left { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("2")]
private IBinaryTree System.Collections.Immutable.IBinaryTree.Right { get; }
    private int System.Collections.Immutable.IBinaryTree.Count { get; }
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public KeyValuePair`2<int, TValue> Value { get; }
    internal IEnumerable`1<TValue> Values { get; }
    private SortedInt32KeyNode`1(int key, TValue value, SortedInt32KeyNode`1<TValue> left, SortedInt32KeyNode`1<TValue> right, bool frozen);
    private static SortedInt32KeyNode`1();
    public sealed virtual bool get_IsEmpty();
    public sealed virtual int get_Height();
    public SortedInt32KeyNode`1<TValue> get_Left();
    public SortedInt32KeyNode`1<TValue> get_Right();
    private sealed virtual override IBinaryTree System.Collections.Immutable.IBinaryTree.get_Left();
    private sealed virtual override IBinaryTree System.Collections.Immutable.IBinaryTree.get_Right();
    private sealed virtual override int System.Collections.Immutable.IBinaryTree.get_Count();
    public KeyValuePair`2<int, TValue> get_Value();
    [IteratorStateMachineAttribute("System.Collections.Immutable.SortedInt32KeyNode`1/<get_Values>d__26")]
internal IEnumerable`1<TValue> get_Values();
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("0")]
public Enumerator<TValue> GetEnumerator();
    internal SortedInt32KeyNode`1<TValue> SetItem(int key, TValue value, IEqualityComparer`1<TValue> valueComparer, Boolean& replacedExistingValue, Boolean& mutated);
    internal SortedInt32KeyNode`1<TValue> Remove(int key, Boolean& mutated);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
internal TValue GetValueOrDefault(int key);
    internal bool TryGetValue(int key, TValue& value);
    internal void Freeze(Action`1<KeyValuePair`2<int, TValue>> freezeAction);
    private static SortedInt32KeyNode`1<TValue> RotateLeft(SortedInt32KeyNode`1<TValue> tree);
    private static SortedInt32KeyNode`1<TValue> RotateRight(SortedInt32KeyNode`1<TValue> tree);
    private static SortedInt32KeyNode`1<TValue> DoubleLeft(SortedInt32KeyNode`1<TValue> tree);
    private static SortedInt32KeyNode`1<TValue> DoubleRight(SortedInt32KeyNode`1<TValue> tree);
    private static int Balance(SortedInt32KeyNode`1<TValue> tree);
    private static bool IsRightHeavy(SortedInt32KeyNode`1<TValue> tree);
    private static bool IsLeftHeavy(SortedInt32KeyNode`1<TValue> tree);
    private static SortedInt32KeyNode`1<TValue> MakeBalanced(SortedInt32KeyNode`1<TValue> tree);
    private SortedInt32KeyNode`1<TValue> SetOrAdd(int key, TValue value, IEqualityComparer`1<TValue> valueComparer, bool overwriteExistingValue, Boolean& replacedExistingValue, Boolean& mutated);
    private SortedInt32KeyNode`1<TValue> RemoveRecursive(int key, Boolean& mutated);
    private SortedInt32KeyNode`1<TValue> Mutate(SortedInt32KeyNode`1<TValue> left, SortedInt32KeyNode`1<TValue> right);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Collections.Immutable.ValuesCollectionAccessor`2 : KeysOrValuesCollectionAccessor`3<TKey, TValue, TValue> {
    internal ValuesCollectionAccessor`2(IImmutableDictionary`2<TKey, TValue> dictionary);
    public virtual bool Contains(TValue item);
}
internal static class System.Collections.ThrowHelper : object {
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
public static void ThrowIfNull(object arg, string paramName);
    [<fd6e42cc-bcd9-4db3-b2c7-996ef7da2c1e>DoesNotReturnAttribute]
public static void ThrowIfDestinationTooSmall();
    [<fd6e42cc-bcd9-4db3-b2c7-996ef7da2c1e>DoesNotReturnAttribute]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public static void ThrowArgumentNullException(string paramName);
    [<fd6e42cc-bcd9-4db3-b2c7-996ef7da2c1e>DoesNotReturnAttribute]
public static void ThrowKeyNotFoundException();
    [<fd6e42cc-bcd9-4db3-b2c7-996ef7da2c1e>DoesNotReturnAttribute]
public static void ThrowInvalidOperationException();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.<0fec3744-8991-4516-9bad-0f9eb26330b3>MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public <0fec3744-8991-4516-9bad-0f9eb26330b3>MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
internal class System.Diagnostics.CodeAnalysis.<18d85f0b-b4b8-4d66-99de-4cf7214e7e85>MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public <18d85f0b-b4b8-4d66-99de-4cf7214e7e85>MemberNotNullWhenAttribute(bool returnValue, string member);
    public <18d85f0b-b4b8-4d66-99de-4cf7214e7e85>MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.<34b852c6-88d7-4e2e-b505-5e1ffd8ab764>NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public <34b852c6-88d7-4e2e-b505-5e1ffd8ab764>NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.<35b9b8c6-5979-4f6b-9ace-7ca91dc1303b>AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("10688")]
internal class System.Diagnostics.CodeAnalysis.<36696c4d-777a-4811-b7a8-5649749f1381>NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.<4ac4f7fc-81ea-4f01-b6de-b8bc52b38b89>MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.<58c70a4e-b420-4744-89d8-4909ee2a6419>MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.<5988c950-8717-4b30-bb94-4760e905599d>DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public <5988c950-8717-4b30-bb94-4760e905599d>DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.<770bdd57-0c80-4bb2-9645-5697dc9b65cf>DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public <770bdd57-0c80-4bb2-9645-5697dc9b65cf>DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.<88c3c728-b4f6-44e9-b0ef-8e20c69e8ec4>NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public <88c3c728-b4f6-44e9-b0ef-8e20c69e8ec4>NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.<8f263168-15e3-4a2f-8d6f-8a92113b0c78>AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.<904ab689-fcf4-4af8-b9dd-f14ddf9f6d60>DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.<974164b4-0a88-4950-bf17-782b60f73135>NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.<97728121-b148-45bf-a8a8-379a494d84f6>NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public <97728121-b148-45bf-a8a8-379a494d84f6>NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Diagnostics.CodeAnalysis.<9ef412cb-1a58-4e8e-bac5-d0527e631de5>MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public <9ef412cb-1a58-4e8e-bac5-d0527e631de5>MemberNotNullAttribute(string member);
    public <9ef412cb-1a58-4e8e-bac5-d0527e631de5>MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.<fd6e42cc-bcd9-4db3-b2c7-996ef7da2c1e>DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("28108")]
internal class System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute : Attribute {
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public DynamicallyAccessedMembersAttribute(DynamicallyAccessedMemberTypes memberTypes);
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
}
[FlagsAttribute]
internal enum System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes : Enum {
    public int value__;
    public static DynamicallyAccessedMemberTypes None;
    public static DynamicallyAccessedMemberTypes PublicParameterlessConstructor;
    public static DynamicallyAccessedMemberTypes PublicConstructors;
    public static DynamicallyAccessedMemberTypes NonPublicConstructors;
    public static DynamicallyAccessedMemberTypes PublicMethods;
    public static DynamicallyAccessedMemberTypes NonPublicMethods;
    public static DynamicallyAccessedMemberTypes PublicFields;
    public static DynamicallyAccessedMemberTypes NonPublicFields;
    public static DynamicallyAccessedMemberTypes PublicNestedTypes;
    public static DynamicallyAccessedMemberTypes NonPublicNestedTypes;
    public static DynamicallyAccessedMemberTypes PublicProperties;
    public static DynamicallyAccessedMemberTypes NonPublicProperties;
    public static DynamicallyAccessedMemberTypes PublicEvents;
    public static DynamicallyAccessedMemberTypes NonPublicEvents;
    public static DynamicallyAccessedMemberTypes All;
}
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[AttributeUsageAttribute("352")]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
internal class System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <MemberSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    public string MemberSignature { get; }
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public Type Type { get; }
    public string TypeName { get; }
    public string AssemblyName { get; }
    public string Condition { get; public set; }
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public DynamicDependencyAttribute(string memberSignature);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public DynamicDependencyAttribute(string memberSignature, Type type);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public DynamicDependencyAttribute(string memberSignature, string typeName, string assemblyName);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, Type type);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, string typeName, string assemblyName);
    [CompilerGeneratedAttribute]
public string get_MemberSignature();
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(string value);
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[NullableContextAttribute("1")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
internal class System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute : Attribute {
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("1")]
private string <CheckId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Justification>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("1")]
public string Category { get; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("1")]
public string CheckId { get; }
    public string Scope { get; public set; }
    public string Target { get; public set; }
    public string MessageId { get; public set; }
    public string Justification { get; public set; }
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("1")]
public UnconditionalSuppressMessageAttribute(string category, string checkId);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Category();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_CheckId();
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public string get_Justification();
    [CompilerGeneratedAttribute]
public void set_Justification(string value);
}
[ExtensionAttribute]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal static class System.Linq.ImmutableArrayExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Select(ImmutableArray`1<T> immutableArray, Func`2<T, TResult> selector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> SelectMany(ImmutableArray`1<TSource> immutableArray, Func`2<TSource, IEnumerable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<T> Where(ImmutableArray`1<T> immutableArray, Func`2<T, bool> predicate);
    [ExtensionAttribute]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public static bool Any(ImmutableArray`1<T> immutableArray);
    [ExtensionAttribute]
public static bool Any(ImmutableArray`1<T> immutableArray, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static bool All(ImmutableArray`1<T> immutableArray, Func`2<T, bool> predicate);
    [ExtensionAttribute]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("0")]
public static bool SequenceEqual(ImmutableArray`1<TBase> immutableArray, ImmutableArray`1<TDerived> items, IEqualityComparer`1<TBase> comparer);
    [ExtensionAttribute]
public static bool SequenceEqual(ImmutableArray`1<TBase> immutableArray, IEnumerable`1<TDerived> items, IEqualityComparer`1<TBase> comparer);
    [ExtensionAttribute]
public static bool SequenceEqual(ImmutableArray`1<TBase> immutableArray, ImmutableArray`1<TDerived> items, Func`3<TBase, TBase, bool> predicate);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
[ExtensionAttribute]
public static T Aggregate(ImmutableArray`1<T> immutableArray, Func`3<T, T, T> func);
    [ExtensionAttribute]
public static TAccumulate Aggregate(ImmutableArray`1<T> immutableArray, TAccumulate seed, Func`3<TAccumulate, T, TAccumulate> func);
    [ExtensionAttribute]
public static TResult Aggregate(ImmutableArray`1<T> immutableArray, TAccumulate seed, Func`3<TAccumulate, T, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector);
    [ExtensionAttribute]
public static T ElementAt(ImmutableArray`1<T> immutableArray, int index);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
[ExtensionAttribute]
public static T ElementAtOrDefault(ImmutableArray`1<T> immutableArray, int index);
    [ExtensionAttribute]
public static T First(ImmutableArray`1<T> immutableArray, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static T First(ImmutableArray`1<T> immutableArray);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
[ExtensionAttribute]
public static T FirstOrDefault(ImmutableArray`1<T> immutableArray);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
[ExtensionAttribute]
public static T FirstOrDefault(ImmutableArray`1<T> immutableArray, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static T Last(ImmutableArray`1<T> immutableArray);
    [ExtensionAttribute]
public static T Last(ImmutableArray`1<T> immutableArray, Func`2<T, bool> predicate);
    [ExtensionAttribute]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public static T LastOrDefault(ImmutableArray`1<T> immutableArray);
    [ExtensionAttribute]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
public static T LastOrDefault(ImmutableArray`1<T> immutableArray, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static T Single(ImmutableArray`1<T> immutableArray);
    [ExtensionAttribute]
public static T Single(ImmutableArray`1<T> immutableArray, Func`2<T, bool> predicate);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
[ExtensionAttribute]
public static T SingleOrDefault(ImmutableArray`1<T> immutableArray);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
[ExtensionAttribute]
public static T SingleOrDefault(ImmutableArray`1<T> immutableArray, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static Dictionary`2<TKey, T> ToDictionary(ImmutableArray`1<T> immutableArray, Func`2<T, TKey> keySelector);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TElement> ToDictionary(ImmutableArray`1<T> immutableArray, Func`2<T, TKey> keySelector, Func`2<T, TElement> elementSelector);
    [ExtensionAttribute]
public static Dictionary`2<TKey, T> ToDictionary(ImmutableArray`1<T> immutableArray, Func`2<T, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TElement> ToDictionary(ImmutableArray`1<T> immutableArray, Func`2<T, TKey> keySelector, Func`2<T, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static T[] ToArray(ImmutableArray`1<T> immutableArray);
    [ExtensionAttribute]
public static T First(Builder<T> builder);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
[ExtensionAttribute]
public static T FirstOrDefault(Builder<T> builder);
    [ExtensionAttribute]
public static T Last(Builder<T> builder);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
[ExtensionAttribute]
public static T LastOrDefault(Builder<T> builder);
    [ExtensionAttribute]
public static bool Any(Builder<T> builder);
    [ExtensionAttribute]
[IteratorStateMachineAttribute("System.Linq.ImmutableArrayExtensions/<SelectManyIterator>d__36`3")]
private static IEnumerable`1<TResult> SelectManyIterator(ImmutableArray`1<TSource> immutableArray, Func`2<TSource, IEnumerable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
}
internal static class System.Numerics.BitOperations : object {
    public static UInt32 RotateLeft(UInt32 value, int offset);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal static class System.Obsoletions : object {
    internal static string SharedUrlFormat;
    internal static string SystemTextEncodingUTF7Message;
    internal static string SystemTextEncodingUTF7DiagId;
    internal static string PrincipalPermissionAttributeMessage;
    internal static string PrincipalPermissionAttributeDiagId;
    internal static string CodeAccessSecurityMessage;
    internal static string CodeAccessSecurityDiagId;
    internal static string ConstrainedExecutionRegionMessage;
    internal static string ConstrainedExecutionRegionDiagId;
    internal static string GlobalAssemblyCacheMessage;
    internal static string GlobalAssemblyCacheDiagId;
    internal static string ThreadAbortMessage;
    internal static string ThreadResetAbortMessage;
    internal static string ThreadAbortDiagId;
    internal static string DefaultCryptoAlgorithmsMessage;
    internal static string DefaultCryptoAlgorithmsDiagId;
    internal static string CreatePdbGeneratorMessage;
    internal static string CreatePdbGeneratorDiagId;
    internal static string AuthenticationManagerMessage;
    internal static string AuthenticationManagerDiagId;
    internal static string RemotingApisMessage;
    internal static string RemotingApisDiagId;
    internal static string BinaryFormatterMessage;
    internal static string BinaryFormatterDiagId;
    internal static string CodeBaseMessage;
    internal static string CodeBaseDiagId;
    internal static string EscapeUriStringMessage;
    internal static string EscapeUriStringDiagId;
    internal static string WebRequestMessage;
    internal static string WebRequestDiagId;
    internal static string DisablePrivateReflectionAttributeMessage;
    internal static string DisablePrivateReflectionAttributeDiagId;
    internal static string GetContextInfoMessage;
    internal static string GetContextInfoDiagId;
    internal static string StrongNameKeyPairMessage;
    internal static string StrongNameKeyPairDiagId;
    internal static string ReflectionOnlyLoadingMessage;
    internal static string ReflectionOnlyLoadingDiagId;
    internal static string RuntimeEnvironmentMessage;
    internal static string RuntimeEnvironmentDiagId;
    internal static string JsonSerializerOptionsIgnoreNullValuesMessage;
    internal static string JsonSerializerOptionsIgnoreNullValuesDiagId;
    internal static string DerivedCryptographicTypesMessage;
    internal static string DerivedCryptographicTypesDiagId;
    internal static string RijndaelMessage;
    internal static string RijndaelDiagId;
    internal static string RNGCryptoServiceProviderMessage;
    internal static string RNGCryptoServiceProviderDiagId;
    internal static string AppDomainCreateUnloadMessage;
    internal static string AppDomainCreateUnloadDiagId;
    internal static string SuppressIldasmAttributeMessage;
    internal static string SuppressIldasmAttributeDiagId;
    internal static string X509CertificateImmutableMessage;
    internal static string X509CertificateImmutableDiagId;
    internal static string PublicKeyPropertyMessage;
    internal static string PublicKeyPropertyDiagId;
    internal static string X509CertificatePrivateKeyMessage;
    internal static string X509CertificatePrivateKeyDiagId;
    internal static string ProduceLegacyHmacValuesMessage;
    internal static string ProduceLegacyHmacValuesDiagId;
    internal static string UseManagedSha1Message;
    internal static string UseManagedSha1DiagId;
    internal static string CryptoConfigEncodeOIDMessage;
    internal static string CryptoConfigEncodeOIDDiagId;
    internal static string CorruptedStateRecoveryMessage;
    internal static string CorruptedStateRecoveryDiagId;
    internal static string Rfc2898CryptDeriveKeyMessage;
    internal static string Rfc2898CryptDeriveKeyDiagId;
    internal static string CmsSignerCspParamsCtorMessage;
    internal static string CmsSignerCspParamsCtorDiagId;
    internal static string SignerInfoCounterSigMessage;
    internal static string SignerInfoCounterSigDiagId;
    internal static string RegexCompileToAssemblyMessage;
    internal static string RegexCompileToAssemblyDiagId;
    internal static string AssemblyNameMembersMessage;
    internal static string AssemblyNameMembersDiagId;
    internal static string SystemDataSerializationFormatBinaryMessage;
    internal static string SystemDataSerializationFormatBinaryDiagId;
    internal static string TlsVersion10and11Message;
    internal static string TlsVersion10and11DiagId;
    internal static string EncryptionPolicyMessage;
    internal static string EncryptionPolicyDiagId;
    internal static string Rfc2898OutdatedCtorMessage;
    internal static string Rfc2898OutdatedCtorDiagId;
    internal static string EccXmlExportImportMessage;
    internal static string EccXmlExportImportDiagId;
    internal static string EcDhPublicKeyBlobMessage;
    internal static string EcDhPublicKeyBlobDiagId;
    internal static string AssemblyNameCodeBaseMessage;
    internal static string AssemblyNameCodeBaseDiagId;
    internal static string CryptoStringFactoryMessage;
    internal static string CryptoStringFactoryDiagId;
    internal static string ControlledExecutionRunMessage;
    internal static string ControlledExecutionRunDiagId;
    internal static string XmlSecureResolverMessage;
    internal static string XmlSecureResolverDiagId;
    internal static string RsaEncryptDecryptValueMessage;
    internal static string RsaEncryptDecryptDiagId;
    internal static string JsonSerializerOptionsAddContextMessage;
    internal static string JsonSerializerOptionsAddContextDiagId;
    internal static string LegacyFormatterMessage;
    internal static string LegacyFormatterDiagId;
    internal static string LegacyFormatterImplMessage;
    internal static string LegacyFormatterImplDiagId;
    internal static string RegexExtensibilityImplMessage;
    internal static string RegexExtensibilityDiagId;
    internal static string AesGcmTagConstructorMessage;
    internal static string AesGcmTagConstructorDiagId;
}
[FlagsAttribute]
internal enum System.Reflection.AssemblyFlags : Enum {
    public int value__;
    public static AssemblyFlags PublicKey;
    public static AssemblyFlags Retargetable;
    public static AssemblyFlags WindowsRuntime;
    public static AssemblyFlags ContentTypeMask;
    public static AssemblyFlags DisableJitCompileOptimizer;
    public static AssemblyFlags EnableJitCompileTracking;
}
internal enum System.Reflection.AssemblyHashAlgorithm : Enum {
    public int value__;
    public static AssemblyHashAlgorithm None;
    public static AssemblyHashAlgorithm MD5;
    public static AssemblyHashAlgorithm Sha1;
    public static AssemblyHashAlgorithm Sha256;
    public static AssemblyHashAlgorithm Sha384;
    public static AssemblyHashAlgorithm Sha512;
}
[ExtensionAttribute]
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal static class System.Reflection.BlobUtilities : object {
    public static int SizeOfSerializedDecimal;
    public static int SizeOfGuid;
    [ExtensionAttribute]
public static void WriteBytes(Byte[] buffer, int start, byte value, int byteCount);
    [ExtensionAttribute]
public static void WriteDouble(Byte[] buffer, int start, double value);
    [ExtensionAttribute]
public static void WriteSingle(Byte[] buffer, int start, float value);
    [ExtensionAttribute]
public static void WriteByte(Byte[] buffer, int start, byte value);
    [ExtensionAttribute]
public static void WriteUInt16(Byte[] buffer, int start, ushort value);
    [ExtensionAttribute]
public static void WriteUInt16BE(Byte[] buffer, int start, ushort value);
    [ExtensionAttribute]
public static void WriteUInt32BE(Byte[] buffer, int start, UInt32 value);
    [ExtensionAttribute]
public static void WriteUInt32(Byte[] buffer, int start, UInt32 value);
    [ExtensionAttribute]
public static void WriteUInt64(Byte[] buffer, int start, ulong value);
    [ExtensionAttribute]
public static void WriteDecimal(Byte[] buffer, int start, decimal value);
    [ExtensionAttribute]
public static void WriteGuid(Byte[] buffer, int start, Guid value);
    [ExtensionAttribute]
[NullableContextAttribute("0")]
public static void WriteUTF8(Byte[] buffer, int start, Char* charPtr, int charCount, int byteCount, bool allowUnpairedSurrogates);
    internal static int GetUTF8ByteCount(string str);
    [NullableContextAttribute("0")]
internal static int GetUTF8ByteCount(Char* str, int charCount);
    [NullableContextAttribute("0")]
internal static int GetUTF8ByteCount(Char* str, int charCount, int byteLimit, Char*& remainder);
    internal static bool IsSurrogateChar(int c);
    internal static bool IsHighSurrogateChar(int c);
    internal static bool IsLowSurrogateChar(int c);
    internal static void ValidateRange(int bufferLength, int start, int byteCount, string byteCountParameterName);
    internal static int GetUserStringByteLength(int characterCount);
    internal static byte GetUserStringTrailingByte(string str);
}
internal enum System.Reflection.DeclarativeSecurityAction : Enum {
    public short value__;
    public static DeclarativeSecurityAction None;
    public static DeclarativeSecurityAction Demand;
    public static DeclarativeSecurityAction Assert;
    public static DeclarativeSecurityAction Deny;
    public static DeclarativeSecurityAction PermitOnly;
    public static DeclarativeSecurityAction LinkDemand;
    public static DeclarativeSecurityAction InheritanceDemand;
    public static DeclarativeSecurityAction RequestMinimum;
    public static DeclarativeSecurityAction RequestOptional;
    public static DeclarativeSecurityAction RequestRefuse;
}
internal abstract class System.Reflection.Internal.AbstractMemoryBlock : object {
    public Byte* Pointer { get; }
    public int Size { get; }
    public abstract virtual Byte* get_Pointer();
    public abstract virtual int get_Size();
    public BlobReader GetReader();
    public virtual ImmutableArray`1<byte> GetContentUnchecked(int start, int length);
    public abstract virtual void Dispose();
}
internal static class System.Reflection.Internal.BitArithmetic : object {
    internal static int CountBits(int v);
    internal static int CountBits(UInt32 v);
    internal static int CountBits(ulong v);
    internal static UInt32 Align(UInt32 position, UInt32 alignment);
    internal static int Align(int position, int alignment);
}
internal class System.Reflection.Internal.ByteArrayMemoryBlock : AbstractMemoryBlock {
    private ByteArrayMemoryProvider _provider;
    private int _start;
    private int _size;
    public Byte* Pointer { get; }
    public int Size { get; }
    [NullableContextAttribute("1")]
internal ByteArrayMemoryBlock(ByteArrayMemoryProvider provider, int start, int size);
    public virtual void Dispose();
    public virtual Byte* get_Pointer();
    public virtual int get_Size();
    public virtual ImmutableArray`1<byte> GetContentUnchecked(int start, int length);
}
internal class System.Reflection.Internal.ByteArrayMemoryProvider : MemoryBlockProvider {
    private ImmutableArray`1<byte> _array;
    private PinnedObject _pinned;
    public int Size { get; }
    public ImmutableArray`1<byte> Array { get; }
    internal Byte* Pointer { get; }
    public ByteArrayMemoryProvider(ImmutableArray`1<byte> array);
    protected virtual void Dispose(bool disposing);
    public virtual int get_Size();
    public ImmutableArray`1<byte> get_Array();
    [NullableContextAttribute("1")]
protected virtual AbstractMemoryBlock GetMemoryBlockImpl(int start, int size);
    [NullableContextAttribute("1")]
public virtual Stream GetStream(StreamConstraints& constraints);
    internal Byte* get_Pointer();
}
internal abstract class System.Reflection.Internal.CriticalDisposableObject : CriticalFinalizerObject {
    protected abstract virtual void Release();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
[ExtensionAttribute]
internal static class System.Reflection.Internal.DecimalUtilities : object {
    [ExtensionAttribute]
public static int GetScale(decimal value);
    [ExtensionAttribute]
public static void GetBits(decimal value, Boolean& isNegative, Byte& scale, UInt32& low, UInt32& mid, UInt32& high);
}
internal static class System.Reflection.Internal.EncodingHelper : object {
    public static int PooledBufferSize;
    private static ObjectPool`1<Byte[]> s_pool;
    private static EncodingHelper();
    [NullableContextAttribute("1")]
public static string DecodeUtf8(Byte* bytes, int byteCount, Byte[] prefix, MetadataStringDecoder utf8Decoder);
    private static string DecodeUtf8Prefixed(Byte* bytes, int byteCount, Byte[] prefix, MetadataStringDecoder utf8Decoder);
    private static Byte[] AcquireBuffer(int byteCount);
    private static void ReleaseBuffer(Byte[] buffer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Reflection.Internal.EnumerableExtensions : object {
    [ExtensionAttribute]
[IteratorStateMachineAttribute("System.Reflection.Internal.EnumerableExtensions/<Select>d__0`2")]
public static IEnumerable`1<TResult> Select(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector);
    [IteratorStateMachineAttribute("System.Reflection.Internal.EnumerableExtensions/<OrderBy>d__1`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> OrderBy(List`1<T> source, Comparison`1<T> comparison);
}
internal static class System.Reflection.Internal.ExceptionUtilities : object {
    [NullableContextAttribute("1")]
internal static Exception UnexpectedValue(object value);
}
internal class System.Reflection.Internal.ExternalMemoryBlock : AbstractMemoryBlock {
    private object _memoryOwner;
    private Byte* _buffer;
    private int _size;
    public Byte* Pointer { get; }
    public int Size { get; }
    public ExternalMemoryBlock(object memoryOwner, Byte* buffer, int size);
    public virtual void Dispose();
    public virtual Byte* get_Pointer();
    public virtual int get_Size();
}
internal class System.Reflection.Internal.ExternalMemoryBlockProvider : MemoryBlockProvider {
    private Byte* _memory;
    private int _size;
    public int Size { get; }
    public Byte* Pointer { get; }
    public ExternalMemoryBlockProvider(Byte* memory, int size);
    public virtual int get_Size();
    [NullableContextAttribute("1")]
protected virtual AbstractMemoryBlock GetMemoryBlockImpl(int start, int size);
    [NullableContextAttribute("1")]
public virtual Stream GetStream(StreamConstraints& constraints);
    protected virtual void Dispose(bool disposing);
    public Byte* get_Pointer();
}
internal static class System.Reflection.Internal.Hash : object {
    internal static int FnvOffsetBias;
    internal static int FnvPrime;
    internal static int Combine(int newKey, int currentKey);
    internal static int Combine(UInt32 newKey, int currentKey);
    internal static int Combine(bool newKeyPart, int currentKey);
    internal static int GetFNVHashCode(ReadOnlySpan`1<byte> data);
}
internal class System.Reflection.Internal.ImmutableMemoryStream : Stream {
    private ImmutableArray`1<byte> _array;
    private int _position;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal ImmutableMemoryStream(ImmutableArray`1<byte> array);
    public ImmutableArray`1<byte> GetBuffer();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    [NullableContextAttribute("1")]
public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    [NullableContextAttribute("1")]
public virtual void Write(Byte[] buffer, int offset, int count);
}
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{GetDebuggerDisplay(),nq}")]
[NullableContextAttribute("1")]
internal class System.Reflection.Internal.MemoryBlock : ValueType {
    [NullableAttribute("0")]
internal Byte* Pointer;
    internal int Length;
    [NullableContextAttribute("0")]
internal MemoryBlock(Byte* buffer, int length);
    [NullableContextAttribute("0")]
internal static MemoryBlock CreateChecked(Byte* buffer, int length);
    private void CheckBounds(int offset, int byteCount);
    [NullableContextAttribute("2")]
internal Byte[] ToArray();
    private string GetDebuggerDisplay();
    internal string GetDebuggerDisplay(Int32& displayedBytes);
    internal string GetDebuggerDisplay(int offset);
    internal MemoryBlock GetMemoryBlockAt(int offset, int length);
    internal byte PeekByte(int offset);
    internal int PeekInt32(int offset);
    internal UInt32 PeekUInt32(int offset);
    internal int PeekCompressedInteger(int offset, Int32& numberOfBytesRead);
    internal ushort PeekUInt16(int offset);
    internal UInt32 PeekTaggedReference(int offset, bool smallRefSize);
    internal UInt32 PeekReferenceUnchecked(int offset, bool smallRefSize);
    internal int PeekReference(int offset, bool smallRefSize);
    internal int PeekHeapReference(int offset, bool smallRefSize);
    internal Guid PeekGuid(int offset);
    internal string PeekUtf16(int offset, int byteCount);
    internal string PeekUtf8(int offset, int byteCount);
    internal string PeekUtf8NullTerminated(int offset, Byte[] prefix, MetadataStringDecoder utf8Decoder, Int32& numberOfBytesRead, char terminator);
    internal int GetUtf8NullTerminatedLength(int offset, Int32& numberOfBytesRead, char terminator);
    internal int Utf8NullTerminatedOffsetOfAsciiChar(int startOffset, char asciiChar);
    internal bool Utf8NullTerminatedEquals(int offset, string text, MetadataStringDecoder utf8Decoder, char terminator, bool ignoreCase);
    internal bool Utf8NullTerminatedStartsWith(int offset, string text, MetadataStringDecoder utf8Decoder, char terminator, bool ignoreCase);
    internal FastComparisonResult Utf8NullTerminatedFastCompare(int offset, string text, int textStart, Int32& firstDifferenceIndex, char terminator, bool ignoreCase);
    internal bool Utf8NullTerminatedStringStartsWithAsciiPrefix(int offset, string asciiPrefix);
    internal int CompareUtf8NullTerminatedStringWithAsciiString(int offset, string asciiString);
    internal Byte[] PeekBytes(int offset, int byteCount);
    internal int IndexOf(byte b, int start);
    internal int IndexOfUnchecked(byte b, int start);
    internal int BinarySearch(String[] asciiKeys, int offset);
    internal int BinarySearchForSlot(int rowCount, int rowSize, int referenceListOffset, UInt32 referenceValue, bool isReferenceSmall);
    internal int BinarySearchReference(int rowCount, int rowSize, int referenceOffset, UInt32 referenceValue, bool isReferenceSmall);
    internal int BinarySearchReference(Int32[] ptrTable, int rowSize, int referenceOffset, UInt32 referenceValue, bool isReferenceSmall);
    internal void BinarySearchReferenceRange(int rowCount, int rowSize, int referenceOffset, UInt32 referenceValue, bool isReferenceSmall, Int32& startRowNumber, Int32& endRowNumber);
    internal void BinarySearchReferenceRange(Int32[] ptrTable, int rowSize, int referenceOffset, UInt32 referenceValue, bool isReferenceSmall, Int32& startRowNumber, Int32& endRowNumber);
    internal int LinearSearchReference(int rowSize, int referenceOffset, UInt32 referenceValue, bool isReferenceSmall);
    internal bool IsOrderedByReferenceAscending(int rowSize, int referenceOffset, bool isReferenceSmall);
    internal Int32[] BuildPtrTable(int numberOfRows, int rowSize, int referenceOffset, bool isReferenceSmall);
    private void ReadColumn(UInt32[] result, int rowSize, int referenceOffset, bool isReferenceSmall);
    internal bool PeekHeapValueOffsetAndSize(int index, Int32& offset, Int32& size);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal abstract class System.Reflection.Internal.MemoryBlockProvider : object {
    public int Size { get; }
    public AbstractMemoryBlock GetMemoryBlock();
    public AbstractMemoryBlock GetMemoryBlock(int start, int size);
    protected abstract virtual AbstractMemoryBlock GetMemoryBlockImpl(int start, int size);
    public abstract virtual Stream GetStream(StreamConstraints& constraints);
    public abstract virtual int get_Size();
    protected abstract virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class System.Reflection.Internal.MemoryMappedFileBlock : AbstractMemoryBlock {
    private DisposableData _data;
    private int _size;
    public Byte* Pointer { get; }
    public int Size { get; }
    [NullableContextAttribute("1")]
internal MemoryMappedFileBlock(IDisposable accessor, SafeBuffer safeBuffer, long offset, int size);
    public virtual void Dispose();
    public virtual Byte* get_Pointer();
    public virtual int get_Size();
}
internal class System.Reflection.Internal.NativeHeapMemoryBlock : AbstractMemoryBlock {
    private DisposableData _data;
    private int _size;
    public Byte* Pointer { get; }
    public int Size { get; }
    internal NativeHeapMemoryBlock(int size);
    public virtual void Dispose();
    public virtual Byte* get_Pointer();
    public virtual int get_Size();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.Internal.ObjectPool`1 : object {
    private Element[] _items;
    private Func`1<T> _factory;
    internal ObjectPool`1(Func`1<T> factory);
    internal ObjectPool`1(Func`1<T> factory, int size);
    private T CreateInstance();
    internal T Allocate();
    internal void Free(T obj);
}
internal class System.Reflection.Internal.PinnedObject : CriticalDisposableObject {
    private GCHandle _handle;
    private int _isValid;
    public Byte* Pointer { get; }
    [NullableContextAttribute("1")]
public PinnedObject(object obj);
    protected virtual void Release();
    public Byte* get_Pointer();
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class System.Reflection.Internal.PooledStringBuilder : object {
    public StringBuilder Builder;
    private ObjectPool`1<PooledStringBuilder> _pool;
    private static ObjectPool`1<PooledStringBuilder> s_poolInstance;
    public int Length { get; }
    private PooledStringBuilder(ObjectPool`1<PooledStringBuilder> pool);
    private static PooledStringBuilder();
    public int get_Length();
    public void Free();
    public string ToStringAndFree();
    public static ObjectPool`1<PooledStringBuilder> CreatePool();
    public static PooledStringBuilder GetInstance();
}
internal class System.Reflection.Internal.ReadOnlyUnmanagedMemoryStream : Stream {
    private Byte* _data;
    private int _length;
    private int _position;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ReadOnlyUnmanagedMemoryStream(Byte* data, int length);
    public virtual int ReadByte();
    [NullableContextAttribute("1")]
public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Flush();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    [NullableContextAttribute("1")]
public virtual void Write(Byte[] buffer, int offset, int count);
}
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[NullableContextAttribute("2")]
internal class System.Reflection.Internal.StreamConstraints : ValueType {
    public object GuardOpt;
    public long ImageStart;
    public int ImageSize;
    public StreamConstraints(object guardOpt, long startPosition, int imageSize);
}
[ExtensionAttribute]
internal static class System.Reflection.Internal.StreamExtensions : object {
    internal static int StreamCopyBufferSize;
    private static bool IsWindows { get; }
    private static bool get_IsWindows();
    private static SafeHandle GetSafeFileHandle(FileStream stream);
    [ExtensionAttribute]
internal static int Read(Stream stream, Byte* buffer, int size);
    [ExtensionAttribute]
internal static void CopyTo(Stream source, Byte* destination, int size);
    [ExtensionAttribute]
[NullableContextAttribute("1")]
internal static int TryReadAll(Stream stream, Byte[] buffer, int offset, int count);
    [NullableContextAttribute("1")]
internal static int GetAndValidateSize(Stream stream, int size, string streamParameterName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.Internal.StreamMemoryBlockProvider : MemoryBlockProvider {
    internal static int MemoryMapThreshold;
    private Stream _stream;
    private object _streamGuard;
    private bool _leaveOpen;
    private bool _useMemoryMap;
    private long _imageStart;
    private int _imageSize;
    private MemoryMappedFile _lazyMemoryMap;
    public int Size { get; }
    public StreamMemoryBlockProvider(Stream stream, long imageStart, int imageSize, bool leaveOpen);
    protected virtual void Dispose(bool disposing);
    public virtual int get_Size();
    internal static NativeHeapMemoryBlock ReadMemoryBlockNoLock(Stream stream, long start, int size);
    protected virtual AbstractMemoryBlock GetMemoryBlockImpl(int start, int size);
    public virtual Stream GetStream(StreamConstraints& constraints);
    private bool TryCreateMemoryMappedFileBlock(long start, int size, MemoryMappedFileBlock& block);
}
[FlagsAttribute]
internal enum System.Reflection.ManifestResourceAttributes : Enum {
    public int value__;
    public static ManifestResourceAttributes Public;
    public static ManifestResourceAttributes Private;
    public static ManifestResourceAttributes VisibilityMask;
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.ArrayShape : ValueType {
    [CompilerGeneratedAttribute]
private int <Rank>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<int> <Sizes>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<int> <LowerBounds>k__BackingField;
    public int Rank { get; }
    public ImmutableArray`1<int> Sizes { get; }
    public ImmutableArray`1<int> LowerBounds { get; }
    public ArrayShape(int rank, ImmutableArray`1<int> sizes, ImmutableArray`1<int> lowerBounds);
    [CompilerGeneratedAttribute]
public int get_Rank();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<int> get_Sizes();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<int> get_LowerBounds();
}
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[NullableContextAttribute("1")]
internal class System.Reflection.Metadata.AssemblyDefinition : ValueType {
    private MetadataReader _reader;
    public AssemblyHashAlgorithm HashAlgorithm { get; }
    public Version Version { get; }
    public AssemblyFlags Flags { get; }
    public StringHandle Name { get; }
    public StringHandle Culture { get; }
    public BlobHandle PublicKey { get; }
    internal AssemblyDefinition(MetadataReader reader);
    public AssemblyName GetAssemblyName();
    public AssemblyHashAlgorithm get_HashAlgorithm();
    public Version get_Version();
    public AssemblyFlags get_Flags();
    public StringHandle get_Name();
    public StringHandle get_Culture();
    public BlobHandle get_PublicKey();
    public CustomAttributeHandleCollection GetCustomAttributes();
    public DeclarativeSecurityAttributeHandleCollection GetDeclarativeSecurityAttributes();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.AssemblyDefinitionHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    internal AssemblyDefinitionHandle(int rowId);
    internal static AssemblyDefinitionHandle FromRowId(int rowId);
    public static Handle op_Implicit(AssemblyDefinitionHandle handle);
    public static EntityHandle op_Implicit(AssemblyDefinitionHandle handle);
    public static AssemblyDefinitionHandle op_Explicit(Handle handle);
    public static AssemblyDefinitionHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(AssemblyDefinitionHandle left, AssemblyDefinitionHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(AssemblyDefinitionHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(AssemblyDefinitionHandle left, AssemblyDefinitionHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.AssemblyFile : ValueType {
    private MetadataReader _reader;
    private int _rowId;
    private AssemblyFileHandle Handle { get; }
    public bool ContainsMetadata { get; }
    public StringHandle Name { get; }
    public BlobHandle HashValue { get; }
    [NullableContextAttribute("1")]
internal AssemblyFile(MetadataReader reader, AssemblyFileHandle handle);
    private AssemblyFileHandle get_Handle();
    public bool get_ContainsMetadata();
    public StringHandle get_Name();
    public BlobHandle get_HashValue();
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.AssemblyFileHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private AssemblyFileHandle(int rowId);
    internal static AssemblyFileHandle FromRowId(int rowId);
    public static Handle op_Implicit(AssemblyFileHandle handle);
    public static EntityHandle op_Implicit(AssemblyFileHandle handle);
    public static AssemblyFileHandle op_Explicit(Handle handle);
    public static AssemblyFileHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(AssemblyFileHandle left, AssemblyFileHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(AssemblyFileHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(AssemblyFileHandle left, AssemblyFileHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.AssemblyFileHandleCollection : ValueType {
    private int _lastRowId;
    public int Count { get; }
    internal AssemblyFileHandleCollection(int lastRowId);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<AssemblyFileHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.AssemblyFileHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.AssemblyReference : ValueType {
    private MetadataReader _reader;
    private UInt32 _treatmentAndRowId;
    private static Version s_version_4_0_0_0;
    private int RowId { get; }
    private bool IsVirtual { get; }
    public Version Version { get; }
    public AssemblyFlags Flags { get; }
    public StringHandle Name { get; }
    public StringHandle Culture { get; }
    public BlobHandle PublicKeyOrToken { get; }
    public BlobHandle HashValue { get; }
    internal AssemblyReference(MetadataReader reader, UInt32 treatmentAndRowId);
    private static AssemblyReference();
    public AssemblyName GetAssemblyName();
    private int get_RowId();
    private bool get_IsVirtual();
    public Version get_Version();
    public AssemblyFlags get_Flags();
    public StringHandle get_Name();
    public StringHandle get_Culture();
    public BlobHandle get_PublicKeyOrToken();
    public BlobHandle get_HashValue();
    public CustomAttributeHandleCollection GetCustomAttributes();
    private static Version GetVirtualVersion();
    private AssemblyFlags GetVirtualFlags();
    private StringHandle GetVirtualName();
    private static VirtualIndex GetVirtualNameIndex(VirtualIndex index);
    private static StringHandle GetVirtualCulture();
    private BlobHandle GetVirtualPublicKeyOrToken();
    private static BlobHandle GetVirtualHashValue();
    private CustomAttributeHandleCollection GetVirtualCustomAttributes();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.AssemblyReferenceHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private UInt32 _value;
    internal UInt32 Value { get; }
    private UInt32 VToken { get; }
    public bool IsNil { get; }
    internal bool IsVirtual { get; }
    internal int RowId { get; }
    private AssemblyReferenceHandle(UInt32 value);
    internal static AssemblyReferenceHandle FromRowId(int rowId);
    internal static AssemblyReferenceHandle FromVirtualIndex(VirtualIndex virtualIndex);
    public static Handle op_Implicit(AssemblyReferenceHandle handle);
    public static EntityHandle op_Implicit(AssemblyReferenceHandle handle);
    public static AssemblyReferenceHandle op_Explicit(Handle handle);
    public static AssemblyReferenceHandle op_Explicit(EntityHandle handle);
    internal UInt32 get_Value();
    private UInt32 get_VToken();
    public bool get_IsNil();
    internal bool get_IsVirtual();
    internal int get_RowId();
    public static bool op_Equality(AssemblyReferenceHandle left, AssemblyReferenceHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(AssemblyReferenceHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(AssemblyReferenceHandle left, AssemblyReferenceHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.AssemblyReferenceHandleCollection : ValueType {
    private MetadataReader _reader;
    public int Count { get; }
    [NullableContextAttribute("1")]
internal AssemblyReferenceHandleCollection(MetadataReader reader);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<AssemblyReferenceHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.AssemblyReferenceHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Blob : ValueType {
    [NullableAttribute("1")]
internal Byte[] Buffer;
    internal int Start;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int Length { get; }
    public bool IsDefault { get; }
    [NullableContextAttribute("1")]
internal Blob(Byte[] buffer, int start, int length);
    [CompilerGeneratedAttribute]
public int get_Length();
    public bool get_IsDefault();
    public ArraySegment`1<byte> GetBytes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{GetDebuggerDisplay(),nq}")]
internal class System.Reflection.Metadata.BlobBuilder : object {
    internal static int DefaultChunkSize;
    internal static int MinChunkSize;
    private BlobBuilder _nextOrPrevious;
    private int _previousLengthOrFrozenSuffixLengthDelta;
    private Byte[] _buffer;
    private UInt32 _length;
    private static UInt32 IsFrozenMask;
    private BlobBuilder FirstChunk { get; }
    private bool IsHead { get; }
    private int Length { get; }
    private UInt32 FrozenLength { get; }
    [NullableAttribute("0")]
private Span`1<byte> Span { get; }
    public int Count { get; }
    private int PreviousLength { get; private set; }
    protected int FreeBytes { get; }
    protected internal int ChunkCapacity { get; }
    public BlobBuilder(int capacity);
    private BlobBuilder get_FirstChunk();
    private bool get_IsHead();
    private int get_Length();
    private UInt32 get_FrozenLength();
    private Span`1<byte> get_Span();
    protected virtual BlobBuilder AllocateChunk(int minimalSize);
    protected virtual void FreeChunk();
    public void Clear();
    protected void Free();
    internal void ClearChunk();
    [ConditionalAttribute("DEBUG")]
private void CheckInvariants();
    public int get_Count();
    private int get_PreviousLength();
    private void set_PreviousLength(int value);
    protected int get_FreeBytes();
    protected internal int get_ChunkCapacity();
    internal Chunks GetChunks();
    public Blobs GetBlobs();
    public bool ContentEquals(BlobBuilder other);
    public Byte[] ToArray();
    public Byte[] ToArray(int start, int byteCount);
    [NullableContextAttribute("0")]
public ImmutableArray`1<byte> ToImmutableArray();
    [NullableContextAttribute("0")]
public ImmutableArray`1<byte> ToImmutableArray(int start, int byteCount);
    [NullableContextAttribute("0")]
internal bool TryGetSpan(ReadOnlySpan`1& buffer);
    public void WriteContentTo(Stream destination);
    public void WriteContentTo(BlobWriter& destination);
    public void WriteContentTo(BlobBuilder destination);
    public void LinkPrefix(BlobBuilder prefix);
    public void LinkSuffix(BlobBuilder suffix);
    private void AddLength(int value);
    private void Expand(int newLength);
    public Blob ReserveBytes(int byteCount);
    private int ReserveBytesImpl(int byteCount);
    private int ReserveBytesPrimitive(int byteCount);
    public void WriteBytes(byte value, int byteCount);
    [NullableContextAttribute("0")]
public void WriteBytes(Byte* buffer, int byteCount);
    private void WriteBytesUnchecked(ReadOnlySpan`1<byte> buffer);
    public int TryWriteBytes(Stream source, int byteCount);
    [NullableContextAttribute("0")]
public void WriteBytes(ImmutableArray`1<byte> buffer);
    [NullableContextAttribute("0")]
public void WriteBytes(ImmutableArray`1<byte> buffer, int start, int byteCount);
    public void WriteBytes(Byte[] buffer);
    public void WriteBytes(Byte[] buffer, int start, int byteCount);
    [NullableContextAttribute("0")]
internal void WriteBytes(ReadOnlySpan`1<byte> buffer);
    public void PadTo(int position);
    public void Align(int alignment);
    public void WriteBoolean(bool value);
    public void WriteByte(byte value);
    public void WriteSByte(sbyte value);
    public void WriteDouble(double value);
    public void WriteSingle(float value);
    public void WriteInt16(short value);
    public void WriteUInt16(ushort value);
    public void WriteInt16BE(short value);
    public void WriteUInt16BE(ushort value);
    public void WriteInt32BE(int value);
    public void WriteUInt32BE(UInt32 value);
    public void WriteInt32(int value);
    public void WriteUInt32(UInt32 value);
    public void WriteInt64(long value);
    public void WriteUInt64(ulong value);
    public void WriteDecimal(decimal value);
    public void WriteGuid(Guid value);
    public void WriteDateTime(DateTime value);
    public void WriteReference(int reference, bool isSmall);
    public void WriteUTF16(Char[] value);
    public void WriteUTF16(string value);
    private void WriteUTF16(ReadOnlySpan`1<char> value);
    [NullableContextAttribute("2")]
public void WriteSerializedString(string value);
    public void WriteUserString(string value);
    public void WriteUTF8(string value, bool allowUnpairedSurrogates);
    internal void WriteUTF8(string str, int start, int length, bool allowUnpairedSurrogates, bool prependSize);
    public void WriteCompressedSignedInteger(int value);
    public void WriteCompressedInteger(int value);
    [NullableContextAttribute("2")]
public void WriteConstant(object value);
    internal string GetDebuggerDisplay();
    private static string Display(Byte[] bytes, int length);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.BlobContentId : ValueType {
    private static int Size;
    private Guid _guid;
    private UInt32 _stamp;
    public Guid Guid { get; }
    public UInt32 Stamp { get; }
    public bool IsDefault { get; }
    public BlobContentId(Guid guid, UInt32 stamp);
    public BlobContentId(ImmutableArray`1<byte> id);
    [NullableContextAttribute("1")]
public BlobContentId(Byte[] id);
    public Guid get_Guid();
    public UInt32 get_Stamp();
    private static void Initialize(ReadOnlySpan`1<byte> id, Guid& guid, UInt32& stamp);
    public bool get_IsDefault();
    public static BlobContentId FromHash(ImmutableArray`1<byte> hashCode);
    [NullableContextAttribute("1")]
public static BlobContentId FromHash(Byte[] hashCode);
    private static BlobContentId FromHash(ReadOnlySpan`1<byte> hashCode);
    [NullableContextAttribute("1")]
public static Func`2<IEnumerable`1<Blob>, BlobContentId> GetTimeBasedProvider();
    public sealed virtual bool Equals(BlobContentId other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(BlobContentId left, BlobContentId right);
    public static bool op_Inequality(BlobContentId left, BlobContentId right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.BlobHandle : ValueType {
    private UInt32 _value;
    internal static int TemplateParameterOffset_AttributeUsageTarget;
    internal UInt32 RawValue { get; }
    public bool IsNil { get; }
    internal bool IsVirtual { get; }
    private ushort VirtualValue { get; }
    private BlobHandle(UInt32 value);
    internal static BlobHandle FromOffset(int heapOffset);
    internal static BlobHandle FromVirtualIndex(VirtualIndex virtualIndex, ushort virtualValue);
    [NullableContextAttribute("1")]
internal void SubstituteTemplateParameters(Byte[] blob);
    public static Handle op_Implicit(BlobHandle handle);
    public static BlobHandle op_Explicit(Handle handle);
    internal UInt32 get_RawValue();
    public bool get_IsNil();
    internal int GetHeapOffset();
    internal VirtualIndex GetVirtualIndex();
    internal bool get_IsVirtual();
    private ushort get_VirtualValue();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(BlobHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(BlobHandle left, BlobHandle right);
    public static bool op_Inequality(BlobHandle left, BlobHandle right);
}
[DebuggerDisplayAttribute("{GetDebuggerDisplay(),nq}")]
internal class System.Reflection.Metadata.BlobReader : ValueType {
    internal static int InvalidCompressedInteger;
    private MemoryBlock _block;
    private Byte* _endPointer;
    private Byte* _currentPointer;
    public Byte* StartPointer { get; }
    public Byte* CurrentPointer { get; }
    public int Length { get; }
    public int Offset { get; public set; }
    public int RemainingBytes { get; }
    private static ReadOnlySpan`1<UInt32> CorEncodeTokenArray { get; }
    public BlobReader(Byte* buffer, int length);
    internal BlobReader(MemoryBlock block);
    [NullableContextAttribute("1")]
internal string GetDebuggerDisplay();
    public Byte* get_StartPointer();
    public Byte* get_CurrentPointer();
    public int get_Length();
    public int get_Offset();
    public void set_Offset(int value);
    public int get_RemainingBytes();
    public void Reset();
    public void Align(byte alignment);
    internal bool TryAlign(byte alignment);
    internal MemoryBlock GetMemoryBlockAt(int offset, int length);
    private void CheckBounds(int offset, int byteCount);
    private void CheckBounds(int byteCount);
    private Byte* GetCurrentPointerAndAdvance(int length);
    private Byte* GetCurrentPointerAndAdvance1();
    public bool ReadBoolean();
    public sbyte ReadSByte();
    public byte ReadByte();
    public char ReadChar();
    public short ReadInt16();
    public ushort ReadUInt16();
    public int ReadInt32();
    public UInt32 ReadUInt32();
    public long ReadInt64();
    public ulong ReadUInt64();
    public float ReadSingle();
    public double ReadDouble();
    public Guid ReadGuid();
    public decimal ReadDecimal();
    public DateTime ReadDateTime();
    public SignatureHeader ReadSignatureHeader();
    public int IndexOf(byte value);
    [NullableContextAttribute("1")]
public string ReadUTF8(int byteCount);
    [NullableContextAttribute("1")]
public string ReadUTF16(int byteCount);
    [NullableContextAttribute("1")]
public Byte[] ReadBytes(int byteCount);
    [NullableContextAttribute("1")]
public void ReadBytes(int byteCount, Byte[] buffer, int bufferOffset);
    [NullableContextAttribute("1")]
internal string ReadUtf8NullTerminated();
    private int ReadCompressedIntegerOrInvalid();
    public bool TryReadCompressedInteger(Int32& value);
    public int ReadCompressedInteger();
    public bool TryReadCompressedSignedInteger(Int32& value);
    public int ReadCompressedSignedInteger();
    public SerializationTypeCode ReadSerializationTypeCode();
    public SignatureTypeCode ReadSignatureTypeCode();
    [NullableContextAttribute("2")]
public string ReadSerializedString();
    public EntityHandle ReadTypeHandle();
    private static ReadOnlySpan`1<UInt32> get_CorEncodeTokenArray();
    public BlobHandle ReadBlobHandle();
    [NullableContextAttribute("2")]
public object ReadConstant(ConstantTypeCode typeCode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.BlobWriter : ValueType {
    private Byte[] _buffer;
    private int _start;
    private int _end;
    private int _position;
    internal bool IsDefault { get; }
    public int Offset { get; public set; }
    public int Length { get; }
    public int RemainingBytes { get; }
    public Blob Blob { get; }
    public BlobWriter(int size);
    public BlobWriter(Byte[] buffer);
    public BlobWriter(Blob blob);
    public BlobWriter(Byte[] buffer, int start, int count);
    internal bool get_IsDefault();
    public bool ContentEquals(BlobWriter other);
    public int get_Offset();
    public void set_Offset(int value);
    public int get_Length();
    public int get_RemainingBytes();
    public Blob get_Blob();
    public Byte[] ToArray();
    public Byte[] ToArray(int start, int byteCount);
    [NullableContextAttribute("0")]
public ImmutableArray`1<byte> ToImmutableArray();
    [NullableContextAttribute("0")]
public ImmutableArray`1<byte> ToImmutableArray(int start, int byteCount);
    private int Advance(int value);
    public void WriteBytes(byte value, int byteCount);
    [NullableContextAttribute("0")]
public void WriteBytes(Byte* buffer, int byteCount);
    [NullableContextAttribute("0")]
internal void WriteBytes(ReadOnlySpan`1<byte> buffer);
    public void WriteBytes(BlobBuilder source);
    public int WriteBytes(Stream source, int byteCount);
    [NullableContextAttribute("0")]
public void WriteBytes(ImmutableArray`1<byte> buffer);
    [NullableContextAttribute("0")]
public void WriteBytes(ImmutableArray`1<byte> buffer, int start, int byteCount);
    public void WriteBytes(Byte[] buffer);
    public void WriteBytes(Byte[] buffer, int start, int byteCount);
    public void PadTo(int offset);
    public void Align(int alignment);
    public void WriteBoolean(bool value);
    public void WriteByte(byte value);
    public void WriteSByte(sbyte value);
    public void WriteDouble(double value);
    public void WriteSingle(float value);
    public void WriteInt16(short value);
    public void WriteUInt16(ushort value);
    public void WriteInt16BE(short value);
    public void WriteUInt16BE(ushort value);
    public void WriteInt32BE(int value);
    public void WriteUInt32BE(UInt32 value);
    public void WriteInt32(int value);
    public void WriteUInt32(UInt32 value);
    public void WriteInt64(long value);
    public void WriteUInt64(ulong value);
    public void WriteDecimal(decimal value);
    public void WriteGuid(Guid value);
    public void WriteDateTime(DateTime value);
    public void WriteReference(int reference, bool isSmall);
    public void WriteUTF16(Char[] value);
    public void WriteUTF16(string value);
    private void WriteUTF16(ReadOnlySpan`1<char> value);
    [NullableContextAttribute("2")]
public void WriteSerializedString(string str);
    public void WriteUserString(string value);
    public void WriteUTF8(string value, bool allowUnpairedSurrogates);
    private void WriteUTF8(string str, int start, int length, bool allowUnpairedSurrogates, bool prependSize);
    public void WriteCompressedSignedInteger(int value);
    public void WriteCompressedInteger(int value);
    [NullableContextAttribute("2")]
public void WriteConstant(object value);
    public void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reflection.Metadata.BlobWriterImpl : object {
    internal static int SingleByteCompressedIntegerMaxValue;
    internal static int TwoByteCompressedIntegerMaxValue;
    internal static int MaxCompressedIntegerValue;
    internal static int MinSignedCompressedIntegerValue;
    internal static int MaxSignedCompressedIntegerValue;
    internal static int GetCompressedIntegerSize(int value);
    internal static void WriteCompressedInteger(BlobWriter& writer, UInt32 value);
    internal static void WriteCompressedInteger(BlobBuilder writer, UInt32 value);
    internal static void WriteCompressedSignedInteger(BlobWriter& writer, int value);
    internal static void WriteCompressedSignedInteger(BlobBuilder writer, int value);
    [NullableContextAttribute("2")]
internal static void WriteConstant(BlobWriter& writer, object value);
    internal static void WriteConstant(BlobBuilder writer, object value);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Constant : ValueType {
    private MetadataReader _reader;
    private int _rowId;
    private ConstantHandle Handle { get; }
    public ConstantTypeCode TypeCode { get; }
    public BlobHandle Value { get; }
    public EntityHandle Parent { get; }
    [NullableContextAttribute("1")]
internal Constant(MetadataReader reader, int rowId);
    private ConstantHandle get_Handle();
    public ConstantTypeCode get_TypeCode();
    public BlobHandle get_Value();
    public EntityHandle get_Parent();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.ConstantHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private ConstantHandle(int rowId);
    internal static ConstantHandle FromRowId(int rowId);
    public static Handle op_Implicit(ConstantHandle handle);
    public static EntityHandle op_Implicit(ConstantHandle handle);
    public static ConstantHandle op_Explicit(Handle handle);
    public static ConstantHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(ConstantHandle left, ConstantHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ConstantHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(ConstantHandle left, ConstantHandle right);
}
internal enum System.Reflection.Metadata.ConstantTypeCode : Enum {
    public byte value__;
    public static ConstantTypeCode Invalid;
    public static ConstantTypeCode Boolean;
    public static ConstantTypeCode Char;
    public static ConstantTypeCode SByte;
    public static ConstantTypeCode Byte;
    public static ConstantTypeCode Int16;
    public static ConstantTypeCode UInt16;
    public static ConstantTypeCode Int32;
    public static ConstantTypeCode UInt32;
    public static ConstantTypeCode Int64;
    public static ConstantTypeCode UInt64;
    public static ConstantTypeCode Single;
    public static ConstantTypeCode Double;
    public static ConstantTypeCode String;
    public static ConstantTypeCode NullReference;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.CustomAttribute : ValueType {
    private MetadataReader _reader;
    private UInt32 _treatmentAndRowId;
    private int RowId { get; }
    private CustomAttributeHandle Handle { get; }
    private MethodDefTreatment Treatment { get; }
    public EntityHandle Constructor { get; }
    public EntityHandle Parent { get; }
    public BlobHandle Value { get; }
    internal CustomAttribute(MetadataReader reader, UInt32 treatmentAndRowId);
    private int get_RowId();
    private CustomAttributeHandle get_Handle();
    private MethodDefTreatment get_Treatment();
    public EntityHandle get_Constructor();
    public EntityHandle get_Parent();
    public BlobHandle get_Value();
    public CustomAttributeValue`1<TType> DecodeValue(ICustomAttributeTypeProvider`1<TType> provider);
    private BlobHandle GetProjectedValue();
    private BlobHandle GetProjectedValue(CustomAttributeValueTreatment treatment);
    private static AttributeTargets ProjectAttributeTargetValue(UInt32 rawValue);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.CustomAttributeHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private CustomAttributeHandle(int rowId);
    internal static CustomAttributeHandle FromRowId(int rowId);
    public static Handle op_Implicit(CustomAttributeHandle handle);
    public static EntityHandle op_Implicit(CustomAttributeHandle handle);
    public static CustomAttributeHandle op_Explicit(Handle handle);
    public static CustomAttributeHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(CustomAttributeHandle left, CustomAttributeHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CustomAttributeHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(CustomAttributeHandle left, CustomAttributeHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.CustomAttributeHandleCollection : ValueType {
    private MetadataReader _reader;
    private int _firstRowId;
    private int _lastRowId;
    public int Count { get; }
    [NullableContextAttribute("1")]
internal CustomAttributeHandleCollection(MetadataReader reader);
    [NullableContextAttribute("1")]
internal CustomAttributeHandleCollection(MetadataReader reader, EntityHandle handle);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<CustomAttributeHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.CustomAttributeHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
[NullableAttribute("0")]
[NullableContextAttribute("2")]
internal class System.Reflection.Metadata.CustomAttributeNamedArgument`1 : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private CustomAttributeNamedArgumentKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private TType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Name { get; }
    public CustomAttributeNamedArgumentKind Kind { get; }
    [NullableAttribute("1")]
public TType Type { get; }
    public object Value { get; }
    public CustomAttributeNamedArgument`1(string name, CustomAttributeNamedArgumentKind kind, TType type, object value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public CustomAttributeNamedArgumentKind get_Kind();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public TType get_Type();
    [CompilerGeneratedAttribute]
public object get_Value();
}
internal enum System.Reflection.Metadata.CustomAttributeNamedArgumentKind : Enum {
    public byte value__;
    public static CustomAttributeNamedArgumentKind Field;
    public static CustomAttributeNamedArgumentKind Property;
}
[NullableContextAttribute("1")]
[IsReadOnlyAttribute]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.CustomAttributeTypedArgument`1 : ValueType {
    [CompilerGeneratedAttribute]
private TType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public TType Type { get; }
    [NullableAttribute("2")]
public object Value { get; }
    public CustomAttributeTypedArgument`1(TType type, object value);
    [CompilerGeneratedAttribute]
public TType get_Type();
    [CompilerGeneratedAttribute]
[NullableContextAttribute("2")]
public object get_Value();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.CustomAttributeValue`1 : ValueType {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<CustomAttributeTypedArgument`1<TType>> <FixedArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<CustomAttributeNamedArgument`1<TType>> <NamedArguments>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<CustomAttributeTypedArgument`1<TType>> FixedArguments { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<CustomAttributeNamedArgument`1<TType>> NamedArguments { get; }
    public CustomAttributeValue`1(ImmutableArray`1<CustomAttributeTypedArgument`1<TType>> fixedArguments, ImmutableArray`1<CustomAttributeNamedArgument`1<TType>> namedArguments);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<CustomAttributeTypedArgument`1<TType>> get_FixedArguments();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<CustomAttributeNamedArgument`1<TType>> get_NamedArguments();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.CustomDebugInformation : ValueType {
    private MetadataReader _reader;
    private int _rowId;
    private CustomDebugInformationHandle Handle { get; }
    public EntityHandle Parent { get; }
    public GuidHandle Kind { get; }
    public BlobHandle Value { get; }
    [NullableContextAttribute("1")]
internal CustomDebugInformation(MetadataReader reader, CustomDebugInformationHandle handle);
    private CustomDebugInformationHandle get_Handle();
    public EntityHandle get_Parent();
    public GuidHandle get_Kind();
    public BlobHandle get_Value();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.CustomDebugInformationHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private CustomDebugInformationHandle(int rowId);
    internal static CustomDebugInformationHandle FromRowId(int rowId);
    public static Handle op_Implicit(CustomDebugInformationHandle handle);
    public static EntityHandle op_Implicit(CustomDebugInformationHandle handle);
    public static CustomDebugInformationHandle op_Explicit(Handle handle);
    public static CustomDebugInformationHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(CustomDebugInformationHandle left, CustomDebugInformationHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CustomDebugInformationHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(CustomDebugInformationHandle left, CustomDebugInformationHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.CustomDebugInformationHandleCollection : ValueType {
    private MetadataReader _reader;
    private int _firstRowId;
    private int _lastRowId;
    public int Count { get; }
    [NullableContextAttribute("1")]
internal CustomDebugInformationHandleCollection(MetadataReader reader);
    [NullableContextAttribute("1")]
internal CustomDebugInformationHandleCollection(MetadataReader reader, EntityHandle handle);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<CustomDebugInformationHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.CustomDebugInformationHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class System.Reflection.Metadata.DebugMetadataHeader : object {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<byte> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodDefinitionHandle <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IdStartOffset>k__BackingField;
    public ImmutableArray`1<byte> Id { get; }
    public MethodDefinitionHandle EntryPoint { get; }
    public int IdStartOffset { get; }
    internal DebugMetadataHeader(ImmutableArray`1<byte> id, MethodDefinitionHandle entryPoint, int idStartOffset);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<byte> get_Id();
    [CompilerGeneratedAttribute]
public MethodDefinitionHandle get_EntryPoint();
    [CompilerGeneratedAttribute]
public int get_IdStartOffset();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.DeclarativeSecurityAttribute : ValueType {
    private MetadataReader _reader;
    private int _rowId;
    public DeclarativeSecurityAction Action { get; }
    public EntityHandle Parent { get; }
    public BlobHandle PermissionSet { get; }
    [NullableContextAttribute("1")]
internal DeclarativeSecurityAttribute(MetadataReader reader, int rowId);
    public DeclarativeSecurityAction get_Action();
    public EntityHandle get_Parent();
    public BlobHandle get_PermissionSet();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.DeclarativeSecurityAttributeHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private DeclarativeSecurityAttributeHandle(int rowId);
    internal static DeclarativeSecurityAttributeHandle FromRowId(int rowId);
    public static Handle op_Implicit(DeclarativeSecurityAttributeHandle handle);
    public static EntityHandle op_Implicit(DeclarativeSecurityAttributeHandle handle);
    public static DeclarativeSecurityAttributeHandle op_Explicit(Handle handle);
    public static DeclarativeSecurityAttributeHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(DeclarativeSecurityAttributeHandle left, DeclarativeSecurityAttributeHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(DeclarativeSecurityAttributeHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(DeclarativeSecurityAttributeHandle left, DeclarativeSecurityAttributeHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.DeclarativeSecurityAttributeHandleCollection : ValueType {
    private MetadataReader _reader;
    private int _firstRowId;
    private int _lastRowId;
    public int Count { get; }
    [NullableContextAttribute("1")]
internal DeclarativeSecurityAttributeHandleCollection(MetadataReader reader);
    [NullableContextAttribute("1")]
internal DeclarativeSecurityAttributeHandleCollection(MetadataReader reader, EntityHandle handle);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<DeclarativeSecurityAttributeHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.DeclarativeSecurityAttributeHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Document : ValueType {
    private MetadataReader _reader;
    private int _rowId;
    private DocumentHandle Handle { get; }
    public DocumentNameBlobHandle Name { get; }
    public GuidHandle Language { get; }
    public GuidHandle HashAlgorithm { get; }
    public BlobHandle Hash { get; }
    [NullableContextAttribute("1")]
internal Document(MetadataReader reader, DocumentHandle handle);
    private DocumentHandle get_Handle();
    public DocumentNameBlobHandle get_Name();
    public GuidHandle get_Language();
    public GuidHandle get_HashAlgorithm();
    public BlobHandle get_Hash();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.DocumentHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private DocumentHandle(int rowId);
    internal static DocumentHandle FromRowId(int rowId);
    public static Handle op_Implicit(DocumentHandle handle);
    public static EntityHandle op_Implicit(DocumentHandle handle);
    public static DocumentHandle op_Explicit(Handle handle);
    public static DocumentHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(DocumentHandle left, DocumentHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(DocumentHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(DocumentHandle left, DocumentHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.DocumentHandleCollection : ValueType {
    private MetadataReader _reader;
    private int _firstRowId;
    private int _lastRowId;
    public int Count { get; }
    [NullableContextAttribute("1")]
internal DocumentHandleCollection(MetadataReader reader);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<DocumentHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.DocumentHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.DocumentNameBlobHandle : ValueType {
    private int _heapOffset;
    public bool IsNil { get; }
    private DocumentNameBlobHandle(int heapOffset);
    internal static DocumentNameBlobHandle FromOffset(int heapOffset);
    public static BlobHandle op_Implicit(DocumentNameBlobHandle handle);
    public static DocumentNameBlobHandle op_Explicit(BlobHandle handle);
    public bool get_IsNil();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(DocumentNameBlobHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(DocumentNameBlobHandle left, DocumentNameBlobHandle right);
    public static bool op_Inequality(DocumentNameBlobHandle left, DocumentNameBlobHandle right);
}
[IsReadOnlyAttribute]
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class System.Reflection.Metadata.Ecma335.ArrayShapeEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    public BlobBuilder Builder { get; }
    public ArrayShapeEncoder(BlobBuilder builder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    [NullableContextAttribute("0")]
public void Shape(int rank, ImmutableArray`1<int> sizes, ImmutableArray`1<int> lowerBounds);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.AssemblyOSTableReader : ValueType {
    internal int NumberOfRows;
    private int _OSPlatformIdOffset;
    private int _OSMajorVersionIdOffset;
    private int _OSMinorVersionIdOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal AssemblyOSTableReader(int numberOfRows, MemoryBlock containingBlock, int containingBlockOffset);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.AssemblyProcessorTableReader : ValueType {
    internal int NumberOfRows;
    private int _ProcessorOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal AssemblyProcessorTableReader(int numberOfRows, MemoryBlock containingBlock, int containingBlockOffset);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.AssemblyRefOSTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsAssemblyRefTableRowRefSizeSmall;
    private int _OSPlatformIdOffset;
    private int _OSMajorVersionIdOffset;
    private int _OSMinorVersionIdOffset;
    private int _AssemblyRefOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal AssemblyRefOSTableReader(int numberOfRows, int assemblyRefTableRowRefSize, MemoryBlock containingBlock, int containingBlockOffset);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.AssemblyRefProcessorTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsAssemblyRefTableRowSizeSmall;
    private int _ProcessorOffset;
    private int _AssemblyRefOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal AssemblyRefProcessorTableReader(int numberOfRows, int assemblyRefTableRowRefSize, MemoryBlock containingBlock, int containingBlockOffset);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.AssemblyRefTableReader : ValueType {
    internal int NumberOfNonVirtualRows;
    internal int NumberOfVirtualRows;
    private bool _IsStringHeapRefSizeSmall;
    private bool _IsBlobHeapRefSizeSmall;
    private int _MajorVersionOffset;
    private int _MinorVersionOffset;
    private int _BuildNumberOffset;
    private int _RevisionNumberOffset;
    private int _FlagsOffset;
    private int _PublicKeyOrTokenOffset;
    private int _NameOffset;
    private int _CultureOffset;
    private int _HashValueOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal AssemblyRefTableReader(int numberOfRows, int stringHeapRefSize, int blobHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset, MetadataKind metadataKind);
    [NullableContextAttribute("1")]
internal Version GetVersion(int rowId);
    internal AssemblyFlags GetFlags(int rowId);
    internal BlobHandle GetPublicKeyOrToken(int rowId);
    internal StringHandle GetName(int rowId);
    internal StringHandle GetCulture(int rowId);
    internal BlobHandle GetHashValue(int rowId);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.AssemblyTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsStringHeapRefSizeSmall;
    private bool _IsBlobHeapRefSizeSmall;
    private int _HashAlgIdOffset;
    private int _MajorVersionOffset;
    private int _MinorVersionOffset;
    private int _BuildNumberOffset;
    private int _RevisionNumberOffset;
    private int _FlagsOffset;
    private int _PublicKeyOffset;
    private int _NameOffset;
    private int _CultureOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal AssemblyTableReader(int numberOfRows, int stringHeapRefSize, int blobHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal AssemblyHashAlgorithm GetHashAlgorithm();
    [NullableContextAttribute("1")]
internal Version GetVersion();
    internal AssemblyFlags GetFlags();
    internal BlobHandle GetPublicKey();
    internal StringHandle GetName();
    internal StringHandle GetCulture();
}
[DebuggerDisplayAttribute("Count = {Count}")]
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.BlobDictionary : ValueType {
    private Dictionary`2<int, KeyValuePair`2<ImmutableArray`1<byte>, BlobHandle>> _dictionary;
    public int Count { get; }
    public BlobDictionary(int capacity);
    private static int GetNextDictionaryKey(int dictionaryKey);
    public BlobHandle GetOrAdd(ReadOnlySpan`1<byte> key, ImmutableArray`1<byte> immutableKey, BlobHandle value, Boolean& exists);
    public int get_Count();
    public Enumerator<int, KeyValuePair`2<ImmutableArray`1<byte>, BlobHandle>> GetEnumerator();
}
[NullableContextAttribute("1")]
[IsReadOnlyAttribute]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.Ecma335.BlobEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    public BlobBuilder Builder { get; }
    public BlobEncoder(BlobBuilder builder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    public FieldTypeEncoder Field();
    public SignatureTypeEncoder FieldSignature();
    public GenericTypeArgumentsEncoder MethodSpecificationSignature(int genericArgumentCount);
    public MethodSignatureEncoder MethodSignature(SignatureCallingConvention convention, int genericParameterCount, bool isInstanceMethod);
    public MethodSignatureEncoder PropertySignature(bool isInstanceProperty);
    public void CustomAttributeSignature(FixedArgumentsEncoder& fixedArguments, CustomAttributeNamedArgumentsEncoder& namedArguments);
    public void CustomAttributeSignature(Action`1<FixedArgumentsEncoder> fixedArguments, Action`1<CustomAttributeNamedArgumentsEncoder> namedArguments);
    public LocalVariablesEncoder LocalVariableSignature(int variableCount);
    public SignatureTypeEncoder TypeSpecificationSignature();
    public PermissionSetEncoder PermissionSetBlob(int attributeCount);
    public NamedArgumentsEncoder PermissionSetArguments(int argumentCount);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.Ecma335.BlobHeap : ValueType {
    private static Byte[][] s_virtualValues;
    internal MemoryBlock Block;
    private VirtualHeap _lazyVirtualHeap;
    internal BlobHeap(MemoryBlock block, MetadataKind metadataKind);
    internal Byte[] GetBytes(BlobHandle handle);
    internal MemoryBlock GetMemoryBlock(BlobHandle handle);
    private MemoryBlock GetVirtualHandleMemoryBlock(BlobHandle handle);
    internal BlobReader GetBlobReader(BlobHandle handle);
    internal BlobHandle GetNextHandle(BlobHandle handle);
    internal static Byte[] GetVirtualBlobBytes(BlobHandle handle, bool unique);
    public string GetDocumentName(DocumentNameBlobHandle handle);
    internal bool DocumentNameEquals(DocumentNameBlobHandle handle, string other, bool ignoreCase);
}
internal class System.Reflection.Metadata.Ecma335.ClassLayoutTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsTypeDefTableRowRefSizeSmall;
    private int _PackagingSizeOffset;
    private int _ClassSizeOffset;
    private int _ParentOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal ClassLayoutTableReader(int numberOfRows, bool declaredSorted, int typeDefTableRowRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal TypeDefinitionHandle GetParent(int rowId);
    internal ushort GetPackingSize(int rowId);
    internal UInt32 GetClassSize(int rowId);
    internal int FindRow(TypeDefinitionHandle typeDef);
    private bool CheckSorted();
}
internal static class System.Reflection.Metadata.Ecma335.CodedIndex : object {
    public static int HasCustomAttribute(EntityHandle handle);
    public static int HasConstant(EntityHandle handle);
    public static int CustomAttributeType(EntityHandle handle);
    public static int HasDeclSecurity(EntityHandle handle);
    public static int HasFieldMarshal(EntityHandle handle);
    public static int HasSemantics(EntityHandle handle);
    public static int Implementation(EntityHandle handle);
    public static int MemberForwarded(EntityHandle handle);
    public static int MemberRefParent(EntityHandle handle);
    public static int MethodDefOrRef(EntityHandle handle);
    public static int ResolutionScope(EntityHandle handle);
    public static int TypeDefOrRef(EntityHandle handle);
    public static int TypeDefOrRefOrSpec(EntityHandle handle);
    public static int TypeOrMethodDef(EntityHandle handle);
    public static int HasCustomDebugInformation(EntityHandle handle);
    private static HasCustomAttributeTag ToHasCustomAttributeTag(HandleKind kind);
    private static HasConstantTag ToHasConstantTag(HandleKind kind);
    private static CustomAttributeTypeTag ToCustomAttributeTypeTag(HandleKind kind);
    private static HasDeclSecurityTag ToHasDeclSecurityTag(HandleKind kind);
    private static HasFieldMarshalTag ToHasFieldMarshalTag(HandleKind kind);
    private static HasSemanticsTag ToHasSemanticsTag(HandleKind kind);
    private static ImplementationTag ToImplementationTag(HandleKind kind);
    private static MemberForwardedTag ToMemberForwardedTag(HandleKind kind);
    private static MemberRefParentTag ToMemberRefParentTag(HandleKind kind);
    private static MethodDefOrRefTag ToMethodDefOrRefTag(HandleKind kind);
    private static ResolutionScopeTag ToResolutionScopeTag(HandleKind kind);
    private static TypeDefOrRefOrSpecTag ToTypeDefOrRefOrSpecTag(HandleKind kind);
    private static TypeDefOrRefTag ToTypeDefOrRefTag(HandleKind kind);
    private static TypeOrMethodDefTag ToTypeOrMethodDefTag(HandleKind kind);
    private static HasCustomDebugInformationTag ToHasCustomDebugInformationTag(HandleKind kind);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.ConstantTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsHasConstantRefSizeSmall;
    private bool _IsBlobHeapRefSizeSmall;
    private int _TypeOffset;
    private int _ParentOffset;
    private int _ValueOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal ConstantTableReader(int numberOfRows, bool declaredSorted, int hasConstantRefSize, int blobHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal ConstantTypeCode GetType(ConstantHandle handle);
    internal BlobHandle GetValue(ConstantHandle handle);
    internal EntityHandle GetParent(ConstantHandle handle);
    internal ConstantHandle FindConstant(EntityHandle parentHandle);
    private bool CheckSorted();
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class System.Reflection.Metadata.Ecma335.ControlFlowBuilder : object {
    private List`1<BranchInfo> _branches;
    private List`1<int> _labels;
    private List`1<ExceptionHandlerInfo> _lazyExceptionHandlers;
    [CompilerGeneratedAttribute]
private int <RemainingSwitchBranches>k__BackingField;
    internal IEnumerable`1<BranchInfo> Branches { get; }
    internal IEnumerable`1<int> Labels { get; }
    internal int BranchCount { get; }
    internal int ExceptionHandlerCount { get; }
    internal int RemainingSwitchBranches { get; internal set; }
    public void Clear();
    internal LabelHandle AddLabel();
    internal void AddBranch(int operandOffset, LabelHandle label, int instructionEndDisplacement, int ilOffset, ILOpCode opCode);
    internal void MarkLabel(int ilOffset, LabelHandle label);
    private int GetLabelOffsetChecked(LabelHandle label);
    private void ValidateLabel(LabelHandle label, string parameterName);
    public void AddFinallyRegion(LabelHandle tryStart, LabelHandle tryEnd, LabelHandle handlerStart, LabelHandle handlerEnd);
    public void AddFaultRegion(LabelHandle tryStart, LabelHandle tryEnd, LabelHandle handlerStart, LabelHandle handlerEnd);
    public void AddCatchRegion(LabelHandle tryStart, LabelHandle tryEnd, LabelHandle handlerStart, LabelHandle handlerEnd, EntityHandle catchType);
    public void AddFilterRegion(LabelHandle tryStart, LabelHandle tryEnd, LabelHandle handlerStart, LabelHandle handlerEnd, LabelHandle filterStart);
    private void AddExceptionRegion(ExceptionRegionKind kind, LabelHandle tryStart, LabelHandle tryEnd, LabelHandle handlerStart, LabelHandle handlerEnd, LabelHandle filterStart, EntityHandle catchType);
    internal IEnumerable`1<BranchInfo> get_Branches();
    internal IEnumerable`1<int> get_Labels();
    internal int get_BranchCount();
    internal int get_ExceptionHandlerCount();
    [CompilerGeneratedAttribute]
internal int get_RemainingSwitchBranches();
    [CompilerGeneratedAttribute]
internal void set_RemainingSwitchBranches(int value);
    internal void ValidateNotInSwitch();
    internal void SwitchBranchAdded();
    internal void CopyCodeAndFixupBranches(BlobBuilder srcBuilder, BlobBuilder dstBuilder);
    internal void SerializeExceptionTable(BlobBuilder builder);
    private bool HasSmallExceptionRegions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reflection.Metadata.Ecma335.COR20Constants : object {
    internal static int SizeOfCorHeader;
    internal static UInt32 COR20MetadataSignature;
    internal static int MinimumSizeofMetadataHeader;
    internal static int SizeofStorageHeader;
    internal static int MinimumSizeofStreamHeader;
    internal static string StringStreamName;
    internal static string BlobStreamName;
    internal static string GUIDStreamName;
    internal static string UserStringStreamName;
    internal static string CompressedMetadataTableStreamName;
    internal static string UncompressedMetadataTableStreamName;
    internal static string MinimalDeltaMetadataTableStreamName;
    internal static string StandalonePdbStreamName;
    internal static int LargeStreamHeapSize;
}
internal enum System.Reflection.Metadata.Ecma335.CorElementType : Enum {
    public byte value__;
    public static CorElementType Invalid;
    public static CorElementType ELEMENT_TYPE_VOID;
    public static CorElementType ELEMENT_TYPE_BOOLEAN;
    public static CorElementType ELEMENT_TYPE_CHAR;
    public static CorElementType ELEMENT_TYPE_I1;
    public static CorElementType ELEMENT_TYPE_U1;
    public static CorElementType ELEMENT_TYPE_I2;
    public static CorElementType ELEMENT_TYPE_U2;
    public static CorElementType ELEMENT_TYPE_I4;
    public static CorElementType ELEMENT_TYPE_U4;
    public static CorElementType ELEMENT_TYPE_I8;
    public static CorElementType ELEMENT_TYPE_U8;
    public static CorElementType ELEMENT_TYPE_R4;
    public static CorElementType ELEMENT_TYPE_R8;
    public static CorElementType ELEMENT_TYPE_STRING;
    public static CorElementType ELEMENT_TYPE_PTR;
    public static CorElementType ELEMENT_TYPE_BYREF;
    public static CorElementType ELEMENT_TYPE_VALUETYPE;
    public static CorElementType ELEMENT_TYPE_CLASS;
    public static CorElementType ELEMENT_TYPE_VAR;
    public static CorElementType ELEMENT_TYPE_ARRAY;
    public static CorElementType ELEMENT_TYPE_GENERICINST;
    public static CorElementType ELEMENT_TYPE_TYPEDBYREF;
    public static CorElementType ELEMENT_TYPE_I;
    public static CorElementType ELEMENT_TYPE_U;
    public static CorElementType ELEMENT_TYPE_FNPTR;
    public static CorElementType ELEMENT_TYPE_OBJECT;
    public static CorElementType ELEMENT_TYPE_SZARRAY;
    public static CorElementType ELEMENT_TYPE_MVAR;
    public static CorElementType ELEMENT_TYPE_CMOD_REQD;
    public static CorElementType ELEMENT_TYPE_CMOD_OPT;
    public static CorElementType ELEMENT_TYPE_HANDLE;
    public static CorElementType ELEMENT_TYPE_SENTINEL;
    public static CorElementType ELEMENT_TYPE_PINNED;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    public BlobBuilder Builder { get; }
    public CustomAttributeArrayTypeEncoder(BlobBuilder builder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    public void ObjectArray();
    public CustomAttributeElementTypeEncoder ElementType();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.CustomAttributeDecoder`1 : ValueType {
    private ICustomAttributeTypeProvider`1<TType> _provider;
    private MetadataReader _reader;
    [NullableContextAttribute("1")]
public CustomAttributeDecoder`1(ICustomAttributeTypeProvider`1<TType> provider, MetadataReader reader);
    public CustomAttributeValue`1<TType> DecodeValue(EntityHandle constructor, BlobHandle value);
    private ImmutableArray`1<CustomAttributeTypedArgument`1<TType>> DecodeFixedArguments(BlobReader& signatureReader, BlobReader& valueReader, int count, BlobReader genericContextReader);
    private ImmutableArray`1<CustomAttributeNamedArgument`1<TType>> DecodeNamedArguments(BlobReader& valueReader);
    private ArgumentTypeInfo<TType> DecodeFixedArgumentType(BlobReader& signatureReader, BlobReader genericContextReader, bool isElementType);
    private ArgumentTypeInfo<TType> DecodeNamedArgumentType(BlobReader& valueReader, bool isElementType);
    private CustomAttributeTypedArgument`1<TType> DecodeArgument(BlobReader& valueReader, ArgumentTypeInfo<TType> info);
    private Nullable`1<ImmutableArray`1<CustomAttributeTypedArgument`1<TType>>> DecodeArrayArgument(BlobReader& blobReader, ArgumentTypeInfo<TType> info);
    private TType GetTypeFromHandle(EntityHandle handle);
    private static void SkipType(BlobReader& blobReader);
}
[NullableContextAttribute("1")]
[IsReadOnlyAttribute]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    public BlobBuilder Builder { get; }
    public CustomAttributeElementTypeEncoder(BlobBuilder builder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    private void WriteTypeCode(SerializationTypeCode value);
    public void Boolean();
    public void Char();
    public void SByte();
    public void Byte();
    public void Int16();
    public void UInt16();
    public void Int32();
    public void UInt32();
    public void Int64();
    public void UInt64();
    public void Single();
    public void Double();
    public void String();
    public void PrimitiveType(PrimitiveSerializationTypeCode type);
    public void SystemType();
    public void Enum(string enumTypeName);
}
[NullableContextAttribute("1")]
[IsReadOnlyAttribute]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.Ecma335.CustomAttributeNamedArgumentsEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    public BlobBuilder Builder { get; }
    public CustomAttributeNamedArgumentsEncoder(BlobBuilder builder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    public NamedArgumentsEncoder Count(int count);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.CustomAttributeTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsHasCustomAttributeRefSizeSmall;
    private bool _IsCustomAttributeTypeRefSizeSmall;
    private bool _IsBlobHeapRefSizeSmall;
    private int _ParentOffset;
    private int _TypeOffset;
    private int _ValueOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    [NullableAttribute("2")]
internal Int32[] PtrTable;
    internal CustomAttributeTableReader(int numberOfRows, bool declaredSorted, int hasCustomAttributeRefSize, int customAttributeTypeRefSize, int blobHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal EntityHandle GetParent(CustomAttributeHandle handle);
    internal EntityHandle GetConstructor(CustomAttributeHandle handle);
    internal BlobHandle GetValue(CustomAttributeHandle handle);
    internal void GetAttributeRange(EntityHandle parentHandle, Int32& firstImplRowId, Int32& lastImplRowId);
    private bool CheckSorted();
}
[FlagsAttribute]
internal enum System.Reflection.Metadata.Ecma335.CustomAttributeTreatment : Enum {
    public byte value__;
    public static CustomAttributeTreatment None;
    public static CustomAttributeTreatment WinMD;
}
internal static class System.Reflection.Metadata.Ecma335.CustomAttributeTypeTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 MethodDef;
    internal static UInt32 MemberRef;
    internal static UInt32 TagMask;
    internal static ulong TagToTokenTypeByteVector;
    internal static TableMask TablesReferenced;
    internal static EntityHandle ConvertToHandle(UInt32 customAttributeType);
}
[FlagsAttribute]
internal enum System.Reflection.Metadata.Ecma335.CustomAttributeValueTreatment : Enum {
    public byte value__;
    public static CustomAttributeValueTreatment None;
    public static CustomAttributeValueTreatment AttributeUsageAllowSingle;
    public static CustomAttributeValueTreatment AttributeUsageAllowMultiple;
    public static CustomAttributeValueTreatment AttributeUsageVersionAttribute;
    public static CustomAttributeValueTreatment AttributeUsageDeprecatedAttribute;
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.CustomDebugInformationTableReader : ValueType {
    internal int NumberOfRows;
    private bool _isHasCustomDebugInformationRefSizeSmall;
    private bool _isGuidHeapRefSizeSmall;
    private bool _isBlobHeapRefSizeSmall;
    private static int ParentOffset;
    private int _kindOffset;
    private int _valueOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal CustomDebugInformationTableReader(int numberOfRows, bool declaredSorted, int hasCustomDebugInformationRefSize, int guidHeapRefSize, int blobHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal EntityHandle GetParent(CustomDebugInformationHandle handle);
    internal GuidHandle GetKind(CustomDebugInformationHandle handle);
    internal BlobHandle GetValue(CustomDebugInformationHandle handle);
    internal void GetRange(EntityHandle parentHandle, Int32& firstImplRowId, Int32& lastImplRowId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.CustomModifiersEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    public BlobBuilder Builder { get; }
    public CustomModifiersEncoder(BlobBuilder builder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    public CustomModifiersEncoder AddModifier(EntityHandle type, bool isOptional);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.DeclSecurityTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsHasDeclSecurityRefSizeSmall;
    private bool _IsBlobHeapRefSizeSmall;
    private int _ActionOffset;
    private int _ParentOffset;
    private int _PermissionSetOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal DeclSecurityTableReader(int numberOfRows, bool declaredSorted, int hasDeclSecurityRefSize, int blobHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal DeclarativeSecurityAction GetAction(int rowId);
    internal EntityHandle GetParent(int rowId);
    internal BlobHandle GetPermissionSet(int rowId);
    internal void GetAttributeRange(EntityHandle parentToken, Int32& firstImplRowId, Int32& lastImplRowId);
    private bool CheckSorted();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.DocumentTableReader : ValueType {
    internal int NumberOfRows;
    private bool _isGuidHeapRefSizeSmall;
    private bool _isBlobHeapRefSizeSmall;
    private static int NameOffset;
    private int _hashAlgorithmOffset;
    private int _hashOffset;
    private int _languageOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal DocumentTableReader(int numberOfRows, int guidHeapRefSize, int blobHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal DocumentNameBlobHandle GetName(DocumentHandle handle);
    internal GuidHandle GetHashAlgorithm(DocumentHandle handle);
    internal BlobHandle GetHash(DocumentHandle handle);
    internal GuidHandle GetLanguage(DocumentHandle handle);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.EditAndContinueLogEntry : ValueType {
    [CompilerGeneratedAttribute]
private EntityHandle <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private EditAndContinueOperation <Operation>k__BackingField;
    public EntityHandle Handle { get; }
    public EditAndContinueOperation Operation { get; }
    public EditAndContinueLogEntry(EntityHandle handle, EditAndContinueOperation operation);
    [CompilerGeneratedAttribute]
public EntityHandle get_Handle();
    [CompilerGeneratedAttribute]
public EditAndContinueOperation get_Operation();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(EditAndContinueLogEntry other);
    public virtual int GetHashCode();
}
internal enum System.Reflection.Metadata.Ecma335.EditAndContinueOperation : Enum {
    public int value__;
    public static EditAndContinueOperation Default;
    public static EditAndContinueOperation AddMethod;
    public static EditAndContinueOperation AddField;
    public static EditAndContinueOperation AddParameter;
    public static EditAndContinueOperation AddProperty;
    public static EditAndContinueOperation AddEvent;
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.EnCLogTableReader : ValueType {
    internal int NumberOfRows;
    private int _TokenOffset;
    private int _FuncCodeOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal EnCLogTableReader(int numberOfRows, MemoryBlock containingBlock, int containingBlockOffset, MetadataStreamKind metadataStreamKind);
    internal UInt32 GetToken(int rowId);
    internal EditAndContinueOperation GetFuncCode(int rowId);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.EnCMapTableReader : ValueType {
    internal int NumberOfRows;
    private int _TokenOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal EnCMapTableReader(int numberOfRows, MemoryBlock containingBlock, int containingBlockOffset);
    internal UInt32 GetToken(int rowId);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.EventMapTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsTypeDefTableRowRefSizeSmall;
    private bool _IsEventRefSizeSmall;
    private int _ParentOffset;
    private int _EventListOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal EventMapTableReader(int numberOfRows, int typeDefTableRowRefSize, int eventRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal int FindEventMapRowIdFor(TypeDefinitionHandle typeDef);
    internal TypeDefinitionHandle GetParentType(int rowId);
    internal int GetEventListStartFor(int rowId);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.EventPtrTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsEventTableRowRefSizeSmall;
    private int _EventOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal EventPtrTableReader(int numberOfRows, int eventTableRowRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal EventDefinitionHandle GetEventFor(int rowId);
}
internal class System.Reflection.Metadata.Ecma335.EventTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsTypeDefOrRefRefSizeSmall;
    private bool _IsStringHeapRefSizeSmall;
    private int _FlagsOffset;
    private int _NameOffset;
    private int _EventTypeOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal EventTableReader(int numberOfRows, int typeDefOrRefRefSize, int stringHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal EventAttributes GetFlags(EventDefinitionHandle handle);
    internal StringHandle GetName(EventDefinitionHandle handle);
    internal EntityHandle GetEventType(EventDefinitionHandle handle);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.ExceptionRegionEncoder : ValueType {
    private static int TableHeaderSize;
    private static int SmallRegionSize;
    private static int FatRegionSize;
    private static int ThreeBytesMaxValue;
    internal static int MaxSmallExceptionRegions;
    internal static int MaxExceptionRegions;
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasSmallFormat>k__BackingField;
    public BlobBuilder Builder { get; }
    public bool HasSmallFormat { get; }
    internal ExceptionRegionEncoder(BlobBuilder builder, bool hasSmallFormat);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    [CompilerGeneratedAttribute]
public bool get_HasSmallFormat();
    public static bool IsSmallRegionCount(int exceptionRegionCount);
    public static bool IsSmallExceptionRegion(int startOffset, int length);
    internal static bool IsSmallExceptionRegionFromBounds(int startOffset, int endOffset);
    internal static int GetExceptionTableSize(int exceptionRegionCount, bool isSmallFormat);
    internal static bool IsExceptionRegionCountInBounds(int exceptionRegionCount);
    internal static bool IsValidCatchTypeHandle(EntityHandle catchType);
    internal static ExceptionRegionEncoder SerializeTableHeader(BlobBuilder builder, int exceptionRegionCount, bool hasSmallRegions);
    public ExceptionRegionEncoder AddFinally(int tryOffset, int tryLength, int handlerOffset, int handlerLength);
    public ExceptionRegionEncoder AddFault(int tryOffset, int tryLength, int handlerOffset, int handlerLength);
    public ExceptionRegionEncoder AddCatch(int tryOffset, int tryLength, int handlerOffset, int handlerLength, EntityHandle catchType);
    public ExceptionRegionEncoder AddFilter(int tryOffset, int tryLength, int handlerOffset, int handlerLength, int filterOffset);
    public ExceptionRegionEncoder Add(ExceptionRegionKind kind, int tryOffset, int tryLength, int handlerOffset, int handlerLength, EntityHandle catchType, int filterOffset);
    internal void AddUnchecked(ExceptionRegionKind kind, int tryOffset, int tryLength, int handlerOffset, int handlerLength, int catchTokenOrOffset);
}
[ExtensionAttribute]
internal static class System.Reflection.Metadata.Ecma335.ExportedTypeExtensions : object {
    [ExtensionAttribute]
public static int GetTypeDefinitionId(ExportedType exportedType);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.ExportedTypeTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsImplementationRefSizeSmall;
    private bool _IsStringHeapRefSizeSmall;
    private int _FlagsOffset;
    private int _TypeDefIdOffset;
    private int _TypeNameOffset;
    private int _TypeNamespaceOffset;
    private int _ImplementationOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal ExportedTypeTableReader(int numberOfRows, int implementationRefSize, int stringHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal StringHandle GetTypeName(int rowId);
    internal StringHandle GetTypeNamespaceString(int rowId);
    internal NamespaceDefinitionHandle GetTypeNamespace(int rowId);
    internal EntityHandle GetImplementation(int rowId);
    internal TypeAttributes GetFlags(int rowId);
    internal int GetTypeDefId(int rowId);
    internal int GetNamespace(int rowId);
}
[FlagsAttribute]
internal enum System.Reflection.Metadata.Ecma335.FieldDefTreatment : Enum {
    public byte value__;
    public static FieldDefTreatment None;
    public static FieldDefTreatment EnumValue;
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.FieldLayoutTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsFieldTableRowRefSizeSmall;
    private int _OffsetOffset;
    private int _FieldOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal FieldLayoutTableReader(int numberOfRows, bool declaredSorted, int fieldTableRowRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal int FindFieldLayoutRowId(FieldDefinitionHandle handle);
    internal UInt32 GetOffset(int rowId);
    internal FieldDefinitionHandle GetField(int rowId);
    private bool CheckSorted();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.FieldMarshalTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsHasFieldMarshalRefSizeSmall;
    private bool _IsBlobHeapRefSizeSmall;
    private int _ParentOffset;
    private int _NativeTypeOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal FieldMarshalTableReader(int numberOfRows, bool declaredSorted, int hasFieldMarshalRefSize, int blobHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal EntityHandle GetParent(int rowId);
    internal BlobHandle GetNativeType(int rowId);
    internal int FindFieldMarshalRowId(EntityHandle handle);
    private bool CheckSorted();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.FieldPtrTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsFieldTableRowRefSizeSmall;
    private int _FieldOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal FieldPtrTableReader(int numberOfRows, int fieldTableRowRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal FieldDefinitionHandle GetFieldFor(int rowId);
    internal int GetRowIdForFieldDefRow(int fieldDefRowId);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.FieldRVATableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsFieldTableRowRefSizeSmall;
    private int _RvaOffset;
    private int _FieldOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal FieldRVATableReader(int numberOfRows, bool declaredSorted, int fieldTableRowRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal int GetRva(int rowId);
    internal int FindFieldRvaRowId(int fieldDefRowId);
    private bool CheckSorted();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.FieldTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsStringHeapRefSizeSmall;
    private bool _IsBlobHeapRefSizeSmall;
    private int _FlagsOffset;
    private int _NameOffset;
    private int _SignatureOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal FieldTableReader(int numberOfRows, int stringHeapRefSize, int blobHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal StringHandle GetName(FieldDefinitionHandle handle);
    internal FieldAttributes GetFlags(FieldDefinitionHandle handle);
    internal BlobHandle GetSignature(FieldDefinitionHandle handle);
}
[IsReadOnlyAttribute]
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class System.Reflection.Metadata.Ecma335.FieldTypeEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    public BlobBuilder Builder { get; }
    public FieldTypeEncoder(BlobBuilder builder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    public CustomModifiersEncoder CustomModifiers();
    public SignatureTypeEncoder Type(bool isByRef);
    public void TypedReference();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.FileTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsStringHeapRefSizeSmall;
    private bool _IsBlobHeapRefSizeSmall;
    private int _FlagsOffset;
    private int _NameOffset;
    private int _HashValueOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal FileTableReader(int numberOfRows, int stringHeapRefSize, int blobHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal BlobHandle GetHashValue(AssemblyFileHandle handle);
    internal UInt32 GetFlags(AssemblyFileHandle handle);
    internal StringHandle GetName(AssemblyFileHandle handle);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.FixedArgumentsEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    public BlobBuilder Builder { get; }
    public FixedArgumentsEncoder(BlobBuilder builder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    public LiteralEncoder AddArgument();
}
internal enum System.Reflection.Metadata.Ecma335.FunctionPointerAttributes : Enum {
    public int value__;
    public static FunctionPointerAttributes None;
    public static FunctionPointerAttributes HasThis;
    public static FunctionPointerAttributes HasExplicitThis;
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.GenericParamConstraintTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsGenericParamTableRowRefSizeSmall;
    private bool _IsTypeDefOrRefRefSizeSmall;
    private int _OwnerOffset;
    private int _ConstraintOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal GenericParamConstraintTableReader(int numberOfRows, bool declaredSorted, int genericParamTableRowRefSize, int typeDefOrRefRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal GenericParameterConstraintHandleCollection FindConstraintsForGenericParam(GenericParameterHandle genericParameter);
    private bool CheckSorted();
    internal EntityHandle GetConstraint(GenericParameterConstraintHandle handle);
    internal GenericParameterHandle GetOwner(GenericParameterConstraintHandle handle);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.GenericParamTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsTypeOrMethodDefRefSizeSmall;
    private bool _IsStringHeapRefSizeSmall;
    private int _NumberOffset;
    private int _FlagsOffset;
    private int _OwnerOffset;
    private int _NameOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal GenericParamTableReader(int numberOfRows, bool declaredSorted, int typeOrMethodDefRefSize, int stringHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal ushort GetNumber(GenericParameterHandle handle);
    internal GenericParameterAttributes GetFlags(GenericParameterHandle handle);
    internal StringHandle GetName(GenericParameterHandle handle);
    internal EntityHandle GetOwner(GenericParameterHandle handle);
    internal GenericParameterHandleCollection FindGenericParametersForType(TypeDefinitionHandle typeDef);
    internal GenericParameterHandleCollection FindGenericParametersForMethod(MethodDefinitionHandle methodDef);
    private int BinarySearchTag(UInt32 searchCodedTag, UInt16& genericParamCount);
    private bool CheckSorted();
}
[IsReadOnlyAttribute]
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class System.Reflection.Metadata.Ecma335.GenericTypeArgumentsEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    public BlobBuilder Builder { get; }
    public GenericTypeArgumentsEncoder(BlobBuilder builder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    public SignatureTypeEncoder AddArgument();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.GuidHeap : ValueType {
    internal MemoryBlock Block;
    public GuidHeap(MemoryBlock block);
    internal Guid GetGuid(GuidHandle handle);
}
internal static class System.Reflection.Metadata.Ecma335.HandleType : object {
    internal static UInt32 Module;
    internal static UInt32 TypeRef;
    internal static UInt32 TypeDef;
    internal static UInt32 FieldDef;
    internal static UInt32 MethodDef;
    internal static UInt32 ParamDef;
    internal static UInt32 InterfaceImpl;
    internal static UInt32 MemberRef;
    internal static UInt32 Constant;
    internal static UInt32 CustomAttribute;
    internal static UInt32 DeclSecurity;
    internal static UInt32 Signature;
    internal static UInt32 EventMap;
    internal static UInt32 Event;
    internal static UInt32 PropertyMap;
    internal static UInt32 Property;
    internal static UInt32 MethodSemantics;
    internal static UInt32 MethodImpl;
    internal static UInt32 ModuleRef;
    internal static UInt32 TypeSpec;
    internal static UInt32 Assembly;
    internal static UInt32 AssemblyRef;
    internal static UInt32 File;
    internal static UInt32 ExportedType;
    internal static UInt32 ManifestResource;
    internal static UInt32 NestedClass;
    internal static UInt32 GenericParam;
    internal static UInt32 MethodSpec;
    internal static UInt32 GenericParamConstraint;
    internal static UInt32 Document;
    internal static UInt32 MethodDebugInformation;
    internal static UInt32 LocalScope;
    internal static UInt32 LocalVariable;
    internal static UInt32 LocalConstant;
    internal static UInt32 ImportScope;
    internal static UInt32 AsyncMethod;
    internal static UInt32 CustomDebugInformation;
    internal static UInt32 UserString;
    internal static UInt32 Blob;
    internal static UInt32 Guid;
    internal static UInt32 String;
    internal static UInt32 String1;
    internal static UInt32 String2;
    internal static UInt32 String3;
    internal static UInt32 Namespace;
    internal static UInt32 HeapMask;
    internal static UInt32 TypeMask;
    internal static UInt32 VirtualBit;
    internal static UInt32 NonVirtualStringTypeMask;
}
internal static class System.Reflection.Metadata.Ecma335.HasConstantTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 Field;
    internal static UInt32 Param;
    internal static UInt32 Property;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static UInt32 TagToTokenTypeByteVector;
    internal static EntityHandle ConvertToHandle(UInt32 hasConstant);
    internal static UInt32 ConvertToTag(EntityHandle token);
}
internal static class System.Reflection.Metadata.Ecma335.HasCustomAttributeTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 MethodDef;
    internal static UInt32 Field;
    internal static UInt32 TypeRef;
    internal static UInt32 TypeDef;
    internal static UInt32 Param;
    internal static UInt32 InterfaceImpl;
    internal static UInt32 MemberRef;
    internal static UInt32 Module;
    internal static UInt32 DeclSecurity;
    internal static UInt32 Property;
    internal static UInt32 Event;
    internal static UInt32 StandAloneSig;
    internal static UInt32 ModuleRef;
    internal static UInt32 TypeSpec;
    internal static UInt32 Assembly;
    internal static UInt32 AssemblyRef;
    internal static UInt32 File;
    internal static UInt32 ExportedType;
    internal static UInt32 ManifestResource;
    internal static UInt32 GenericParam;
    internal static UInt32 GenericParamConstraint;
    internal static UInt32 MethodSpec;
    internal static UInt32 TagMask;
    internal static UInt32 InvalidTokenType;
    internal static TableMask TablesReferenced;
    internal static ReadOnlySpan`1<UInt32> TagToTokenTypeArray { get; }
    internal static ReadOnlySpan`1<UInt32> get_TagToTokenTypeArray();
    internal static EntityHandle ConvertToHandle(UInt32 hasCustomAttribute);
    internal static UInt32 ConvertToTag(EntityHandle handle);
}
internal static class System.Reflection.Metadata.Ecma335.HasCustomDebugInformationTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 MethodDef;
    internal static UInt32 Field;
    internal static UInt32 TypeRef;
    internal static UInt32 TypeDef;
    internal static UInt32 Param;
    internal static UInt32 InterfaceImpl;
    internal static UInt32 MemberRef;
    internal static UInt32 Module;
    internal static UInt32 DeclSecurity;
    internal static UInt32 Property;
    internal static UInt32 Event;
    internal static UInt32 StandAloneSig;
    internal static UInt32 ModuleRef;
    internal static UInt32 TypeSpec;
    internal static UInt32 Assembly;
    internal static UInt32 AssemblyRef;
    internal static UInt32 File;
    internal static UInt32 ExportedType;
    internal static UInt32 ManifestResource;
    internal static UInt32 GenericParam;
    internal static UInt32 GenericParamConstraint;
    internal static UInt32 MethodSpec;
    internal static UInt32 Document;
    internal static UInt32 LocalScope;
    internal static UInt32 LocalVariable;
    internal static UInt32 LocalConstant;
    internal static UInt32 Import;
    internal static UInt32 TagMask;
    internal static UInt32 InvalidTokenType;
    internal static TableMask TablesReferenced;
    internal static ReadOnlySpan`1<UInt32> TagToTokenTypeArray { get; }
    internal static ReadOnlySpan`1<UInt32> get_TagToTokenTypeArray();
    internal static EntityHandle ConvertToHandle(UInt32 taggedReference);
    internal static UInt32 ConvertToTag(EntityHandle handle);
}
internal static class System.Reflection.Metadata.Ecma335.HasDeclSecurityTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 TypeDef;
    internal static UInt32 MethodDef;
    internal static UInt32 Assembly;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static UInt32 TagToTokenTypeByteVector;
    internal static EntityHandle ConvertToHandle(UInt32 hasDeclSecurity);
    internal static UInt32 ConvertToTag(EntityHandle handle);
}
internal static class System.Reflection.Metadata.Ecma335.HasFieldMarshalTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 Field;
    internal static UInt32 Param;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static UInt32 TagToTokenTypeByteVector;
    internal static EntityHandle ConvertToHandle(UInt32 hasFieldMarshal);
    internal static UInt32 ConvertToTag(EntityHandle handle);
}
internal static class System.Reflection.Metadata.Ecma335.HasSemanticsTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 Event;
    internal static UInt32 Property;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static UInt32 TagToTokenTypeByteVector;
    internal static EntityHandle ConvertToHandle(UInt32 hasSemantic);
    internal static UInt32 ConvertEventHandleToTag(EventDefinitionHandle eventDef);
    internal static UInt32 ConvertPropertyHandleToTag(PropertyDefinitionHandle propertyDef);
}
internal static class System.Reflection.Metadata.Ecma335.HeapHandleType : object {
    internal static int OffsetBitCount;
    internal static UInt32 OffsetMask;
    internal static UInt32 VirtualBit;
    internal static bool IsValidHeapOffset(UInt32 offset);
}
internal enum System.Reflection.Metadata.Ecma335.HeapIndex : Enum {
    public int value__;
    public static HeapIndex UserString;
    public static HeapIndex String;
    public static HeapIndex Blob;
    public static HeapIndex Guid;
}
internal static class System.Reflection.Metadata.Ecma335.HeapIndexExtensions : object {
    internal static int Count;
}
internal enum System.Reflection.Metadata.Ecma335.HeapSizeFlag : Enum {
    public byte value__;
    public static HeapSizeFlag StringHeapLarge;
    public static HeapSizeFlag GuidHeapLarge;
    public static HeapSizeFlag BlobHeapLarge;
    public static HeapSizeFlag EncDeltas;
    public static HeapSizeFlag DeletedMarks;
}
internal enum System.Reflection.Metadata.Ecma335.HeapSizes : Enum {
    public byte value__;
    public static HeapSizes StringHeapLarge;
    public static HeapSizes GuidHeapLarge;
    public static HeapSizes BlobHeapLarge;
    public static HeapSizes ExtraData;
}
internal static class System.Reflection.Metadata.Ecma335.ImplementationTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 File;
    internal static UInt32 AssemblyRef;
    internal static UInt32 ExportedType;
    internal static UInt32 TagMask;
    internal static UInt32 TagToTokenTypeByteVector;
    internal static TableMask TablesReferenced;
    internal static EntityHandle ConvertToHandle(UInt32 implementation);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.ImplMapTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsModuleRefTableRowRefSizeSmall;
    private bool _IsMemberForwardRowRefSizeSmall;
    private bool _IsStringHeapRefSizeSmall;
    private int _FlagsOffset;
    private int _MemberForwardedOffset;
    private int _ImportNameOffset;
    private int _ImportScopeOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal ImplMapTableReader(int numberOfRows, bool declaredSorted, int moduleRefTableRowRefSize, int memberForwardedRefSize, int stringHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal MethodImport GetImport(int rowId);
    internal EntityHandle GetMemberForwarded(int rowId);
    internal int FindImplForMethod(MethodDefinitionHandle methodDef);
    private int BinarySearchTag(UInt32 searchCodedTag);
    private bool CheckSorted();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.ImportScopeTableReader : ValueType {
    internal int NumberOfRows;
    private bool _isImportScopeRefSizeSmall;
    private bool _isBlobHeapRefSizeSmall;
    private static int ParentOffset;
    private int _importsOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal ImportScopeTableReader(int numberOfRows, int importScopeRefSize, int blobHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal ImportScopeHandle GetParent(ImportScopeHandle handle);
    internal BlobHandle GetImports(ImportScopeHandle handle);
}
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[NullableContextAttribute("1")]
internal class System.Reflection.Metadata.Ecma335.InstructionEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <CodeBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private ControlFlowBuilder <ControlFlowBuilder>k__BackingField;
    public BlobBuilder CodeBuilder { get; }
    [NullableAttribute("2")]
public ControlFlowBuilder ControlFlowBuilder { get; }
    public int Offset { get; }
    public InstructionEncoder(BlobBuilder codeBuilder, ControlFlowBuilder controlFlowBuilder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_CodeBuilder();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ControlFlowBuilder get_ControlFlowBuilder();
    public int get_Offset();
    public void OpCode(ILOpCode code);
    public void Token(EntityHandle handle);
    public void Token(int token);
    public void LoadString(UserStringHandle handle);
    public void Call(EntityHandle methodHandle);
    public void Call(MethodDefinitionHandle methodHandle);
    public void Call(MethodSpecificationHandle methodHandle);
    public void Call(MemberReferenceHandle methodHandle);
    public void CallIndirect(StandaloneSignatureHandle signature);
    public void LoadConstantI4(int value);
    public void LoadConstantI8(long value);
    public void LoadConstantR4(float value);
    public void LoadConstantR8(double value);
    public void LoadLocal(int slotIndex);
    public void StoreLocal(int slotIndex);
    public void LoadLocalAddress(int slotIndex);
    public void LoadArgument(int argumentIndex);
    public void LoadArgumentAddress(int argumentIndex);
    public void StoreArgument(int argumentIndex);
    public LabelHandle DefineLabel();
    internal void LabelOperand(ILOpCode code, LabelHandle label, int instructionEndDisplacement, int ilOffset);
    public void Branch(ILOpCode code, LabelHandle label);
    public SwitchInstructionEncoder Switch(int branchCount);
    public void MarkLabel(LabelHandle label);
    private ControlFlowBuilder GetBranchBuilder();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.InterfaceImplTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsTypeDefTableRowRefSizeSmall;
    private bool _IsTypeDefOrRefRefSizeSmall;
    private int _ClassOffset;
    private int _InterfaceOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal InterfaceImplTableReader(int numberOfRows, bool declaredSorted, int typeDefTableRowRefSize, int typeDefOrRefRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    private bool CheckSorted();
    internal void GetInterfaceImplRange(TypeDefinitionHandle typeDef, Int32& firstImplRowId, Int32& lastImplRowId);
    internal EntityHandle GetInterface(int rowId);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.LabelHandle : ValueType {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public int Id { get; }
    public bool IsNil { get; }
    internal LabelHandle(int id);
    [CompilerGeneratedAttribute]
public int get_Id();
    public bool get_IsNil();
    public sealed virtual bool Equals(LabelHandle other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(LabelHandle left, LabelHandle right);
    public static bool op_Inequality(LabelHandle left, LabelHandle right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.LiteralEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    public BlobBuilder Builder { get; }
    public LiteralEncoder(BlobBuilder builder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    public VectorEncoder Vector();
    public void TaggedVector(CustomAttributeArrayTypeEncoder& arrayType, VectorEncoder& vector);
    public void TaggedVector(Action`1<CustomAttributeArrayTypeEncoder> arrayType, Action`1<VectorEncoder> vector);
    public ScalarEncoder Scalar();
    public void TaggedScalar(CustomAttributeElementTypeEncoder& type, ScalarEncoder& scalar);
    public void TaggedScalar(Action`1<CustomAttributeElementTypeEncoder> type, Action`1<ScalarEncoder> scalar);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.LiteralsEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    public BlobBuilder Builder { get; }
    public LiteralsEncoder(BlobBuilder builder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    public LiteralEncoder AddLiteral();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.LocalConstantTableReader : ValueType {
    internal int NumberOfRows;
    private bool _isStringHeapRefSizeSmall;
    private bool _isBlobHeapRefSizeSmall;
    private static int NameOffset;
    private int _signatureOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal LocalConstantTableReader(int numberOfRows, int stringHeapRefSize, int blobHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal StringHandle GetName(LocalConstantHandle handle);
    internal BlobHandle GetSignature(LocalConstantHandle handle);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.LocalScopeTableReader : ValueType {
    internal int NumberOfRows;
    private bool _isMethodRefSmall;
    private bool _isImportScopeRefSmall;
    private bool _isLocalConstantRefSmall;
    private bool _isLocalVariableRefSmall;
    private static int MethodOffset;
    private int _importScopeOffset;
    private int _variableListOffset;
    private int _constantListOffset;
    private int _startOffsetOffset;
    private int _lengthOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal LocalScopeTableReader(int numberOfRows, bool declaredSorted, int methodRefSize, int importScopeRefSize, int localVariableRefSize, int localConstantRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal MethodDefinitionHandle GetMethod(int rowId);
    internal ImportScopeHandle GetImportScope(LocalScopeHandle handle);
    internal int GetVariableStart(int rowId);
    internal int GetConstantStart(int rowId);
    internal int GetStartOffset(int rowId);
    internal int GetLength(int rowId);
    internal int GetEndOffset(int rowId);
    internal void GetLocalScopeRange(int methodDefRid, Int32& firstScopeRowId, Int32& lastScopeRowId);
}
[IsReadOnlyAttribute]
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class System.Reflection.Metadata.Ecma335.LocalVariablesEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    public BlobBuilder Builder { get; }
    public LocalVariablesEncoder(BlobBuilder builder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    public LocalVariableTypeEncoder AddVariable();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.LocalVariableTableReader : ValueType {
    internal int NumberOfRows;
    private bool _isStringHeapRefSizeSmall;
    private int _attributesOffset;
    private int _indexOffset;
    private int _nameOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal LocalVariableTableReader(int numberOfRows, int stringHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal LocalVariableAttributes GetAttributes(LocalVariableHandle handle);
    internal ushort GetIndex(LocalVariableHandle handle);
    internal StringHandle GetName(LocalVariableHandle handle);
}
[IsReadOnlyAttribute]
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class System.Reflection.Metadata.Ecma335.LocalVariableTypeEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    public BlobBuilder Builder { get; }
    public LocalVariableTypeEncoder(BlobBuilder builder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    public CustomModifiersEncoder CustomModifiers();
    public SignatureTypeEncoder Type(bool isByRef, bool isPinned);
    public void TypedReference();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.ManifestResourceTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsImplementationRefSizeSmall;
    private bool _IsStringHeapRefSizeSmall;
    private int _OffsetOffset;
    private int _FlagsOffset;
    private int _NameOffset;
    private int _ImplementationOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal ManifestResourceTableReader(int numberOfRows, int implementationRefSize, int stringHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal StringHandle GetName(ManifestResourceHandle handle);
    internal EntityHandle GetImplementation(ManifestResourceHandle handle);
    internal UInt32 GetOffset(ManifestResourceHandle handle);
    internal ManifestResourceAttributes GetFlags(ManifestResourceHandle handle);
}
internal static class System.Reflection.Metadata.Ecma335.MemberForwardedTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 Field;
    internal static UInt32 MethodDef;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static UInt32 TagToTokenTypeByteVector;
    internal static EntityHandle ConvertToHandle(UInt32 memberForwarded);
    internal static UInt32 ConvertMethodDefToTag(MethodDefinitionHandle methodDef);
}
internal static class System.Reflection.Metadata.Ecma335.MemberRefParentTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 TypeDef;
    internal static UInt32 TypeRef;
    internal static UInt32 ModuleRef;
    internal static UInt32 MethodDef;
    internal static UInt32 TypeSpec;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static ulong TagToTokenTypeByteVector;
    internal static EntityHandle ConvertToHandle(UInt32 memberRef);
}
internal class System.Reflection.Metadata.Ecma335.MemberRefTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsMemberRefParentRefSizeSmall;
    private bool _IsStringHeapRefSizeSmall;
    private bool _IsBlobHeapRefSizeSmall;
    private int _ClassOffset;
    private int _NameOffset;
    private int _SignatureOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal MemberRefTableReader(int numberOfRows, int memberRefParentRefSize, int stringHeapRefSize, int blobHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal BlobHandle GetSignature(MemberReferenceHandle handle);
    internal StringHandle GetName(MemberReferenceHandle handle);
    internal EntityHandle GetClass(MemberReferenceHandle handle);
}
[FlagsAttribute]
internal enum System.Reflection.Metadata.Ecma335.MemberRefTreatment : Enum {
    public byte value__;
    public static MemberRefTreatment None;
    public static MemberRefTreatment Dispose;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.Ecma335.MetadataAggregator : object {
    private ImmutableArray`1<ImmutableArray`1<int>> _heapSizes;
    private ImmutableArray`1<ImmutableArray`1<RowCounts>> _rowCounts;
    public MetadataAggregator(MetadataReader baseReader, IReadOnlyList`1<MetadataReader> deltaReaders);
    [NullableContextAttribute("2")]
public MetadataAggregator(IReadOnlyList`1<int> baseTableRowCounts, IReadOnlyList`1<int> baseHeapSizes, IReadOnlyList`1<MetadataReader> deltaReaders);
    private MetadataAggregator(MetadataReader baseReader, IReadOnlyList`1<int> baseTableRowCounts, IReadOnlyList`1<int> baseHeapSizes, IReadOnlyList`1<MetadataReader> deltaReaders);
    internal MetadataAggregator(RowCounts[][] rowCounts, Int32[][] heapSizes);
    private static void CalculateBaseCounts(MetadataReader baseReader, IReadOnlyList`1& baseTableRowCounts, IReadOnlyList`1& baseHeapSizes);
    private static ImmutableArray`1<ImmutableArray`1<int>> CalculateHeapSizes(IReadOnlyList`1<int> baseSizes, IReadOnlyList`1<MetadataReader> deltaReaders);
    private static ImmutableArray`1<ImmutableArray`1<RowCounts>> CalculateRowCounts(IReadOnlyList`1<int> baseRowCounts, IReadOnlyList`1<MetadataReader> deltaReaders);
    private static ImmutableArray`1<ImmutableArray`1<T>> ToImmutable(T[][] array);
    internal static RowCounts[][] GetBaseRowCounts(IReadOnlyList`1<int> baseRowCounts, int generations);
    internal static void CalculateDeltaRowCountsForGeneration(RowCounts[][] rowCounts, int generation, EnCMapTableReader& encMapTable);
    public Handle GetGenerationHandle(Handle handle, Int32& generation);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class System.Reflection.Metadata.Ecma335.MetadataBuilder : object {
    private static byte MetadataFormatMajorVersion;
    private static byte MetadataFormatMinorVersion;
    private Nullable`1<ModuleRow> _moduleRow;
    private Nullable`1<AssemblyRow> _assemblyRow;
    private List`1<ClassLayoutRow> _classLayoutTable;
    private List`1<ConstantRow> _constantTable;
    private int _constantTableLastParent;
    private bool _constantTableNeedsSorting;
    private List`1<CustomAttributeRow> _customAttributeTable;
    private int _customAttributeTableLastParent;
    private bool _customAttributeTableNeedsSorting;
    private List`1<DeclSecurityRow> _declSecurityTable;
    private int _declSecurityTableLastParent;
    private bool _declSecurityTableNeedsSorting;
    private List`1<EncLogRow> _encLogTable;
    private List`1<EncMapRow> _encMapTable;
    private List`1<EventRow> _eventTable;
    private List`1<EventMapRow> _eventMapTable;
    private List`1<ExportedTypeRow> _exportedTypeTable;
    private List`1<FieldLayoutRow> _fieldLayoutTable;
    private List`1<FieldMarshalRow> _fieldMarshalTable;
    private int _fieldMarshalTableLastParent;
    private bool _fieldMarshalTableNeedsSorting;
    private List`1<FieldRvaRow> _fieldRvaTable;
    private List`1<FieldDefRow> _fieldTable;
    private List`1<FileTableRow> _fileTable;
    private List`1<GenericParamConstraintRow> _genericParamConstraintTable;
    private List`1<GenericParamRow> _genericParamTable;
    private List`1<ImplMapRow> _implMapTable;
    private List`1<InterfaceImplRow> _interfaceImplTable;
    private List`1<ManifestResourceRow> _manifestResourceTable;
    private List`1<MemberRefRow> _memberRefTable;
    private List`1<MethodImplRow> _methodImplTable;
    private List`1<MethodSemanticsRow> _methodSemanticsTable;
    private int _methodSemanticsTableLastAssociation;
    private bool _methodSemanticsTableNeedsSorting;
    private List`1<MethodSpecRow> _methodSpecTable;
    private List`1<MethodRow> _methodDefTable;
    private List`1<ModuleRefRow> _moduleRefTable;
    private List`1<NestedClassRow> _nestedClassTable;
    private List`1<ParamRow> _paramTable;
    private List`1<PropertyMapRow> _propertyMapTable;
    private List`1<PropertyRow> _propertyTable;
    private List`1<TypeDefRow> _typeDefTable;
    private List`1<TypeRefRow> _typeRefTable;
    private List`1<TypeSpecRow> _typeSpecTable;
    private List`1<AssemblyRefTableRow> _assemblyRefTable;
    private List`1<StandaloneSigRow> _standAloneSigTable;
    private List`1<DocumentRow> _documentTable;
    private List`1<MethodDebugInformationRow> _methodDebugInformationTable;
    private List`1<LocalScopeRow> _localScopeTable;
    private List`1<LocalVariableRow> _localVariableTable;
    private List`1<LocalConstantRow> _localConstantTable;
    private List`1<ImportScopeRow> _importScopeTable;
    private List`1<StateMachineMethodRow> _stateMachineMethodTable;
    private List`1<CustomDebugInformationRow> _customDebugInformationTable;
    private static int UserStringHeapSizeLimit;
    private Dictionary`2<string, UserStringHandle> _userStrings;
    private HeapBlobBuilder _userStringBuilder;
    private int _userStringHeapStartOffset;
    private Dictionary`2<string, StringHandle> _strings;
    private int _stringHeapStartOffset;
    private int _stringHeapCapacity;
    private BlobDictionary _blobs;
    private int _blobHeapStartOffset;
    private int _blobHeapSize;
    private Dictionary`2<Guid, GuidHandle> _guids;
    private HeapBlobBuilder _guidBuilder;
    public MetadataBuilder(int userStringHeapStartOffset, int stringHeapStartOffset, int blobHeapStartOffset, int guidHeapStartOffset);
    [NullableContextAttribute("0")]
internal SerializedMetadata GetSerializedMetadata(ImmutableArray`1<int> externalRowCounts, int metadataVersionByteCount, bool isStandaloneDebugMetadata);
    internal static void SerializeMetadataHeader(BlobBuilder builder, string metadataVersion, MetadataSizes sizes);
    private static void SerializeStreamHeader(Int32& offsetFromStartOfMetadata, int alignedStreamSize, string streamName, BlobBuilder builder);
    public void SetCapacity(TableIndex table, int rowCount);
    private static void SetTableCapacity(List`1<T> table, int rowCount);
    public int GetRowCount(TableIndex table);
    [NullableContextAttribute("0")]
public ImmutableArray`1<int> GetRowCounts();
    public ModuleDefinitionHandle AddModule(int generation, StringHandle moduleName, GuidHandle mvid, GuidHandle encId, GuidHandle encBaseId);
    public AssemblyDefinitionHandle AddAssembly(StringHandle name, Version version, StringHandle culture, BlobHandle publicKey, AssemblyFlags flags, AssemblyHashAlgorithm hashAlgorithm);
    public AssemblyReferenceHandle AddAssemblyReference(StringHandle name, Version version, StringHandle culture, BlobHandle publicKeyOrToken, AssemblyFlags flags, BlobHandle hashValue);
    public TypeDefinitionHandle AddTypeDefinition(TypeAttributes attributes, StringHandle namespace, StringHandle name, EntityHandle baseType, FieldDefinitionHandle fieldList, MethodDefinitionHandle methodList);
    public void AddTypeLayout(TypeDefinitionHandle type, ushort packingSize, UInt32 size);
    public InterfaceImplementationHandle AddInterfaceImplementation(TypeDefinitionHandle type, EntityHandle implementedInterface);
    public void AddNestedType(TypeDefinitionHandle type, TypeDefinitionHandle enclosingType);
    public TypeReferenceHandle AddTypeReference(EntityHandle resolutionScope, StringHandle namespace, StringHandle name);
    public TypeSpecificationHandle AddTypeSpecification(BlobHandle signature);
    public StandaloneSignatureHandle AddStandaloneSignature(BlobHandle signature);
    public PropertyDefinitionHandle AddProperty(PropertyAttributes attributes, StringHandle name, BlobHandle signature);
    public void AddPropertyMap(TypeDefinitionHandle declaringType, PropertyDefinitionHandle propertyList);
    public EventDefinitionHandle AddEvent(EventAttributes attributes, StringHandle name, EntityHandle type);
    public void AddEventMap(TypeDefinitionHandle declaringType, EventDefinitionHandle eventList);
    [NullableContextAttribute("2")]
public ConstantHandle AddConstant(EntityHandle parent, object value);
    public void AddMethodSemantics(EntityHandle association, MethodSemanticsAttributes semantics, MethodDefinitionHandle methodDefinition);
    public CustomAttributeHandle AddCustomAttribute(EntityHandle parent, EntityHandle constructor, BlobHandle value);
    public MethodSpecificationHandle AddMethodSpecification(EntityHandle method, BlobHandle instantiation);
    public ModuleReferenceHandle AddModuleReference(StringHandle moduleName);
    public ParameterHandle AddParameter(ParameterAttributes attributes, StringHandle name, int sequenceNumber);
    public GenericParameterHandle AddGenericParameter(EntityHandle parent, GenericParameterAttributes attributes, StringHandle name, int index);
    public GenericParameterConstraintHandle AddGenericParameterConstraint(GenericParameterHandle genericParameter, EntityHandle constraint);
    public FieldDefinitionHandle AddFieldDefinition(FieldAttributes attributes, StringHandle name, BlobHandle signature);
    public void AddFieldLayout(FieldDefinitionHandle field, int offset);
    public void AddMarshallingDescriptor(EntityHandle parent, BlobHandle descriptor);
    public void AddFieldRelativeVirtualAddress(FieldDefinitionHandle field, int offset);
    public MethodDefinitionHandle AddMethodDefinition(MethodAttributes attributes, MethodImplAttributes implAttributes, StringHandle name, BlobHandle signature, int bodyOffset, ParameterHandle parameterList);
    public void AddMethodImport(MethodDefinitionHandle method, MethodImportAttributes attributes, StringHandle name, ModuleReferenceHandle module);
    public MethodImplementationHandle AddMethodImplementation(TypeDefinitionHandle type, EntityHandle methodBody, EntityHandle methodDeclaration);
    public MemberReferenceHandle AddMemberReference(EntityHandle parent, StringHandle name, BlobHandle signature);
    public ManifestResourceHandle AddManifestResource(ManifestResourceAttributes attributes, StringHandle name, EntityHandle implementation, UInt32 offset);
    public AssemblyFileHandle AddAssemblyFile(StringHandle name, BlobHandle hashValue, bool containsMetadata);
    public ExportedTypeHandle AddExportedType(TypeAttributes attributes, StringHandle namespace, StringHandle name, EntityHandle implementation, int typeDefinitionId);
    public DeclarativeSecurityAttributeHandle AddDeclarativeSecurityAttribute(EntityHandle parent, DeclarativeSecurityAction action, BlobHandle permissionSet);
    public void AddEncLogEntry(EntityHandle entity, EditAndContinueOperation code);
    public void AddEncMapEntry(EntityHandle entity);
    public DocumentHandle AddDocument(BlobHandle name, GuidHandle hashAlgorithm, BlobHandle hash, GuidHandle language);
    public MethodDebugInformationHandle AddMethodDebugInformation(DocumentHandle document, BlobHandle sequencePoints);
    public LocalScopeHandle AddLocalScope(MethodDefinitionHandle method, ImportScopeHandle importScope, LocalVariableHandle variableList, LocalConstantHandle constantList, int startOffset, int length);
    public LocalVariableHandle AddLocalVariable(LocalVariableAttributes attributes, int index, StringHandle name);
    public LocalConstantHandle AddLocalConstant(StringHandle name, BlobHandle signature);
    public ImportScopeHandle AddImportScope(ImportScopeHandle parentScope, BlobHandle imports);
    public void AddStateMachineMethod(MethodDefinitionHandle moveNextMethod, MethodDefinitionHandle kickoffMethod);
    public CustomDebugInformationHandle AddCustomDebugInformation(EntityHandle parent, GuidHandle kind, BlobHandle value);
    internal void ValidateOrder();
    private void ValidateClassLayoutTable();
    private void ValidateFieldLayoutTable();
    private void ValidateFieldRvaTable();
    private void ValidateGenericParamTable();
    private void ValidateGenericParamConstaintTable();
    private void ValidateImplMapTable();
    private void ValidateInterfaceImplTable();
    private void ValidateMethodImplTable();
    private void ValidateNestedClassTable();
    private void ValidateLocalScopeTable();
    private void ValidateStateMachineMethodTable();
    internal void SerializeMetadataTables(BlobBuilder writer, MetadataSizes metadataSizes, ImmutableArray`1<int> stringMap, int methodBodyStreamRva, int mappedFieldDataStreamRva);
    private static void SerializeTablesHeader(BlobBuilder writer, MetadataSizes metadataSizes);
    internal void SerializeModuleTable(BlobBuilder writer, ImmutableArray`1<int> stringMap, MetadataSizes metadataSizes);
    private void SerializeEncLogTable(BlobBuilder writer);
    private void SerializeEncMapTable(BlobBuilder writer);
    private void SerializeTypeRefTable(BlobBuilder writer, ImmutableArray`1<int> stringMap, MetadataSizes metadataSizes);
    private void SerializeTypeDefTable(BlobBuilder writer, ImmutableArray`1<int> stringMap, MetadataSizes metadataSizes);
    private void SerializeFieldTable(BlobBuilder writer, ImmutableArray`1<int> stringMap, MetadataSizes metadataSizes);
    private void SerializeMethodDefTable(BlobBuilder writer, ImmutableArray`1<int> stringMap, MetadataSizes metadataSizes, int methodBodyStreamRva);
    private void SerializeParamTable(BlobBuilder writer, ImmutableArray`1<int> stringMap, MetadataSizes metadataSizes);
    private void SerializeInterfaceImplTable(BlobBuilder writer, MetadataSizes metadataSizes);
    private void SerializeMemberRefTable(BlobBuilder writer, ImmutableArray`1<int> stringMap, MetadataSizes metadataSizes);
    private void SerializeConstantTable(BlobBuilder writer, MetadataSizes metadataSizes);
    private void SerializeCustomAttributeTable(BlobBuilder writer, MetadataSizes metadataSizes);
    private void SerializeFieldMarshalTable(BlobBuilder writer, MetadataSizes metadataSizes);
    private void SerializeDeclSecurityTable(BlobBuilder writer, MetadataSizes metadataSizes);
    private void SerializeClassLayoutTable(BlobBuilder writer, MetadataSizes metadataSizes);
    private void SerializeFieldLayoutTable(BlobBuilder writer, MetadataSizes metadataSizes);
    private void SerializeStandAloneSigTable(BlobBuilder writer, MetadataSizes metadataSizes);
    private void SerializeEventMapTable(BlobBuilder writer, MetadataSizes metadataSizes);
    private void SerializeEventTable(BlobBuilder writer, ImmutableArray`1<int> stringMap, MetadataSizes metadataSizes);
    private void SerializePropertyMapTable(BlobBuilder writer, MetadataSizes metadataSizes);
    private void SerializePropertyTable(BlobBuilder writer, ImmutableArray`1<int> stringMap, MetadataSizes metadataSizes);
    private void SerializeMethodSemanticsTable(BlobBuilder writer, MetadataSizes metadataSizes);
    private void SerializeMethodImplTable(BlobBuilder writer, MetadataSizes metadataSizes);
    private void SerializeModuleRefTable(BlobBuilder writer, ImmutableArray`1<int> stringMap, MetadataSizes metadataSizes);
    private void SerializeTypeSpecTable(BlobBuilder writer, MetadataSizes metadataSizes);
    private void SerializeImplMapTable(BlobBuilder writer, ImmutableArray`1<int> stringMap, MetadataSizes metadataSizes);
    private void SerializeFieldRvaTable(BlobBuilder writer, MetadataSizes metadataSizes, int mappedFieldDataStreamRva);
    private void SerializeAssemblyTable(BlobBuilder writer, ImmutableArray`1<int> stringMap, MetadataSizes metadataSizes);
    private void SerializeAssemblyRefTable(BlobBuilder writer, ImmutableArray`1<int> stringMap, MetadataSizes metadataSizes);
    private void SerializeFileTable(BlobBuilder writer, ImmutableArray`1<int> stringMap, MetadataSizes metadataSizes);
    private void SerializeExportedTypeTable(BlobBuilder writer, ImmutableArray`1<int> stringMap, MetadataSizes metadataSizes);
    private void SerializeManifestResourceTable(BlobBuilder writer, ImmutableArray`1<int> stringMap, MetadataSizes metadataSizes);
    private void SerializeNestedClassTable(BlobBuilder writer, MetadataSizes metadataSizes);
    private void SerializeGenericParamTable(BlobBuilder writer, ImmutableArray`1<int> stringMap, MetadataSizes metadataSizes);
    private void SerializeGenericParamConstraintTable(BlobBuilder writer, MetadataSizes metadataSizes);
    private void SerializeMethodSpecTable(BlobBuilder writer, MetadataSizes metadataSizes);
    private void SerializeDocumentTable(BlobBuilder writer, MetadataSizes metadataSizes);
    private void SerializeMethodDebugInformationTable(BlobBuilder writer, MetadataSizes metadataSizes);
    private void SerializeLocalScopeTable(BlobBuilder writer, MetadataSizes metadataSizes);
    private void SerializeLocalVariableTable(BlobBuilder writer, ImmutableArray`1<int> stringMap, MetadataSizes metadataSizes);
    private void SerializeLocalConstantTable(BlobBuilder writer, ImmutableArray`1<int> stringMap, MetadataSizes metadataSizes);
    private void SerializeImportScopeTable(BlobBuilder writer, MetadataSizes metadataSizes);
    private void SerializeStateMachineMethodTable(BlobBuilder writer, MetadataSizes metadataSizes);
    private void SerializeCustomDebugInformationTable(BlobBuilder writer, MetadataSizes metadataSizes);
    public void SetCapacity(HeapIndex heap, int byteCount);
    [NullableContextAttribute("0")]
internal static int SerializeHandle(ImmutableArray`1<int> map, StringHandle handle);
    internal static int SerializeHandle(BlobHandle handle);
    internal static int SerializeHandle(GuidHandle handle);
    internal static int SerializeHandle(UserStringHandle handle);
    public BlobHandle GetOrAddBlob(BlobBuilder value);
    public BlobHandle GetOrAddBlob(Byte[] value);
    private BlobHandle GetOrAddBlob(ReadOnlySpan`1<byte> value, ImmutableArray`1<byte> immutableValue);
    [NullableContextAttribute("0")]
public BlobHandle GetOrAddBlob(ImmutableArray`1<byte> value);
    [NullableContextAttribute("2")]
public BlobHandle GetOrAddConstantBlob(object value);
    public BlobHandle GetOrAddBlobUTF16(string value);
    public BlobHandle GetOrAddBlobUTF8(string value, bool allowUnpairedSurrogates);
    public BlobHandle GetOrAddDocumentName(string value);
    private static char ChooseSeparator(string str);
    public GuidHandle GetOrAddGuid(Guid guid);
    [NullableContextAttribute("0")]
public ReservedBlob`1<GuidHandle> ReserveGuid();
    private GuidHandle GetNewGuidHandle();
    public StringHandle GetOrAddString(string value);
    [NullableContextAttribute("0")]
public ReservedBlob`1<UserStringHandle> ReserveUserString(int length);
    public UserStringHandle GetOrAddUserString(string value);
    private UserStringHandle GetNewUserStringHandle();
    private static ImmutableArray`1<int> SerializeStringHeap(BlobBuilder heapBuilder, Dictionary`2<string, StringHandle> strings, int stringHeapStartOffset);
    internal void WriteHeapsTo(BlobBuilder builder, BlobBuilder stringHeap);
    private void WriteAlignedBlobHeap(BlobBuilder builder);
    private static void WriteAligned(BlobBuilder source, BlobBuilder target);
}
[ExtensionAttribute]
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal static class System.Reflection.Metadata.Ecma335.MetadataReaderExtensions : object {
    [ExtensionAttribute]
public static int GetTableRowCount(MetadataReader reader, TableIndex tableIndex);
    [ExtensionAttribute]
public static int GetTableRowSize(MetadataReader reader, TableIndex tableIndex);
    [ExtensionAttribute]
public static int GetTableMetadataOffset(MetadataReader reader, TableIndex tableIndex);
    [ExtensionAttribute]
private static MemoryBlock GetTableMetadataBlock(MetadataReader reader, TableIndex tableIndex);
    [ExtensionAttribute]
public static int GetHeapSize(MetadataReader reader, HeapIndex heapIndex);
    [ExtensionAttribute]
public static int GetHeapMetadataOffset(MetadataReader reader, HeapIndex heapIndex);
    [ExtensionAttribute]
private static MemoryBlock GetMetadataBlock(MetadataReader reader, HeapIndex heapIndex);
    [ExtensionAttribute]
public static UserStringHandle GetNextHandle(MetadataReader reader, UserStringHandle handle);
    [ExtensionAttribute]
public static BlobHandle GetNextHandle(MetadataReader reader, BlobHandle handle);
    [ExtensionAttribute]
public static StringHandle GetNextHandle(MetadataReader reader, StringHandle handle);
    [ExtensionAttribute]
public static IEnumerable`1<EditAndContinueLogEntry> GetEditAndContinueLogEntries(MetadataReader reader);
    [ExtensionAttribute]
public static IEnumerable`1<EntityHandle> GetEditAndContinueMapEntries(MetadataReader reader);
    [ExtensionAttribute]
public static IEnumerable`1<TypeDefinitionHandle> GetTypesWithProperties(MetadataReader reader);
    [ExtensionAttribute]
public static IEnumerable`1<TypeDefinitionHandle> GetTypesWithEvents(MetadataReader reader);
    [ExtensionAttribute]
public static SignatureTypeKind ResolveSignatureTypeKind(MetadataReader reader, EntityHandle typeHandle, byte rawTypeKind);
    [IteratorStateMachineAttribute("System.Reflection.Metadata.Ecma335.MetadataReaderExtensions/<<GetEditAndContinueLogEntries>g__Core|10_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<EditAndContinueLogEntry> <GetEditAndContinueLogEntries>g__Core|10_0(MetadataReader reader);
    [CompilerGeneratedAttribute]
[IteratorStateMachineAttribute("System.Reflection.Metadata.Ecma335.MetadataReaderExtensions/<<GetEditAndContinueMapEntries>g__Core|11_0>d")]
internal static IEnumerable`1<EntityHandle> <GetEditAndContinueMapEntries>g__Core|11_0(MetadataReader reader);
    [CompilerGeneratedAttribute]
[IteratorStateMachineAttribute("System.Reflection.Metadata.Ecma335.MetadataReaderExtensions/<<GetTypesWithProperties>g__Core|12_0>d")]
internal static IEnumerable`1<TypeDefinitionHandle> <GetTypesWithProperties>g__Core|12_0(MetadataReader reader);
    [IteratorStateMachineAttribute("System.Reflection.Metadata.Ecma335.MetadataReaderExtensions/<<GetTypesWithEvents>g__Core|13_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TypeDefinitionHandle> <GetTypesWithEvents>g__Core|13_0(MetadataReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.Ecma335.MetadataRootBuilder : object {
    private static string DefaultMetadataVersionString;
    [NullableAttribute("0")]
internal static ImmutableArray`1<int> EmptyRowCounts;
    private MetadataBuilder _tablesAndHeaps;
    private SerializedMetadata _serializedMetadata;
    [CompilerGeneratedAttribute]
private string <MetadataVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressValidation>k__BackingField;
    public string MetadataVersion { get; }
    public bool SuppressValidation { get; }
    public MetadataSizes Sizes { get; }
    public MetadataRootBuilder(MetadataBuilder tablesAndHeaps, string metadataVersion, bool suppressValidation);
    private static MetadataRootBuilder();
    [CompilerGeneratedAttribute]
public string get_MetadataVersion();
    [CompilerGeneratedAttribute]
public bool get_SuppressValidation();
    public MetadataSizes get_Sizes();
    public void Serialize(BlobBuilder builder, int methodBodyStreamRva, int mappedFieldDataStreamRva);
}
internal class System.Reflection.Metadata.Ecma335.MetadataSizes : object {
    private static int StreamAlignment;
    internal static int MaxMetadataVersionByteCount;
    internal int MetadataVersionPaddedLength;
    internal static ulong SortedDebugTables;
    internal bool IsEncDelta;
    internal bool IsCompressed;
    internal bool BlobReferenceIsSmall;
    internal bool StringReferenceIsSmall;
    internal bool GuidReferenceIsSmall;
    internal bool CustomAttributeTypeCodedIndexIsSmall;
    internal bool DeclSecurityCodedIndexIsSmall;
    internal bool EventDefReferenceIsSmall;
    internal bool FieldDefReferenceIsSmall;
    internal bool GenericParamReferenceIsSmall;
    internal bool HasConstantCodedIndexIsSmall;
    internal bool HasCustomAttributeCodedIndexIsSmall;
    internal bool HasFieldMarshalCodedIndexIsSmall;
    internal bool HasSemanticsCodedIndexIsSmall;
    internal bool ImplementationCodedIndexIsSmall;
    internal bool MemberForwardedCodedIndexIsSmall;
    internal bool MemberRefParentCodedIndexIsSmall;
    internal bool MethodDefReferenceIsSmall;
    internal bool MethodDefOrRefCodedIndexIsSmall;
    internal bool ModuleRefReferenceIsSmall;
    internal bool ParameterReferenceIsSmall;
    internal bool PropertyDefReferenceIsSmall;
    internal bool ResolutionScopeCodedIndexIsSmall;
    internal bool TypeDefReferenceIsSmall;
    internal bool TypeDefOrRefCodedIndexIsSmall;
    internal bool TypeOrMethodDefCodedIndexIsSmall;
    internal bool DocumentReferenceIsSmall;
    internal bool LocalVariableReferenceIsSmall;
    internal bool LocalConstantReferenceIsSmall;
    internal bool ImportScopeReferenceIsSmall;
    internal bool HasCustomDebugInformationCodedIndexIsSmall;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<int> <HeapSizes>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<int> <RowCounts>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<int> <ExternalRowCounts>k__BackingField;
    internal ulong PresentTablesMask;
    internal ulong ExternalTablesMask;
    internal int MetadataStreamStorageSize;
    internal int MetadataTableStreamSize;
    internal int StandalonePdbStreamSize;
    internal static int PdbIdSize;
    public ImmutableArray`1<int> HeapSizes { get; }
    public ImmutableArray`1<int> RowCounts { get; }
    public ImmutableArray`1<int> ExternalRowCounts { get; }
    internal bool IsStandaloneDebugMetadata { get; }
    internal int MetadataHeaderSize { get; }
    internal int MetadataSize { get; }
    internal MetadataSizes(ImmutableArray`1<int> rowCounts, ImmutableArray`1<int> externalRowCounts, ImmutableArray`1<int> heapSizes, int metadataVersionByteCount, bool isStandaloneDebugMetadata);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<int> get_HeapSizes();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<int> get_RowCounts();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<int> get_ExternalRowCounts();
    internal bool get_IsStandaloneDebugMetadata();
    internal bool IsPresent(TableIndex table);
    internal int get_MetadataHeaderSize();
    [NullableContextAttribute("1")]
internal static int GetMetadataStreamHeaderSize(string streamName);
    internal int get_MetadataSize();
    public int GetAlignedHeapSize(HeapIndex index);
    internal int CalculateTableStreamHeaderSize();
    internal int CalculateStandalonePdbStreamSize();
    private static ulong ComputeNonEmptyTableMask(ImmutableArray`1<int> rowCounts);
    private int GetTableSize(TableIndex index, int rowSize);
    private bool IsReferenceSmall(int tagBitSize, TableIndex[] tables);
    private bool ReferenceFits(int bitCount, TableIndex[] tables);
}
internal static class System.Reflection.Metadata.Ecma335.MetadataStreamConstants : object {
    internal static int SizeOfMetadataTableHeader;
    internal static UInt32 LargeTableRowCount;
}
internal enum System.Reflection.Metadata.Ecma335.MetadataStreamKind : Enum {
    public int value__;
    public static MetadataStreamKind Illegal;
    public static MetadataStreamKind Compressed;
    public static MetadataStreamKind Uncompressed;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Reflection.Metadata.Ecma335.MetadataTokens : object {
    public static int TableCount;
    public static int HeapCount;
    private static MetadataTokens();
    [ExtensionAttribute]
public static int GetRowNumber(MetadataReader reader, EntityHandle handle);
    [ExtensionAttribute]
public static int GetHeapOffset(MetadataReader reader, Handle handle);
    [ExtensionAttribute]
public static int GetToken(MetadataReader reader, EntityHandle handle);
    [ExtensionAttribute]
public static int GetToken(MetadataReader reader, Handle handle);
    private static int MapVirtualHandleRowId(MetadataReader reader, Handle handle);
    public static int GetRowNumber(EntityHandle handle);
    public static int GetHeapOffset(Handle handle);
    public static int GetHeapOffset(BlobHandle handle);
    public static int GetHeapOffset(GuidHandle handle);
    public static int GetHeapOffset(UserStringHandle handle);
    public static int GetHeapOffset(StringHandle handle);
    public static int GetToken(Handle handle);
    public static int GetToken(EntityHandle handle);
    public static bool TryGetTableIndex(HandleKind type, TableIndex& index);
    public static bool TryGetHeapIndex(HandleKind type, HeapIndex& index);
    public static Handle Handle(int token);
    public static EntityHandle EntityHandle(int token);
    public static EntityHandle EntityHandle(TableIndex tableIndex, int rowNumber);
    public static EntityHandle Handle(TableIndex tableIndex, int rowNumber);
    private static int ToRowId(int rowNumber);
    public static MethodDefinitionHandle MethodDefinitionHandle(int rowNumber);
    public static MethodImplementationHandle MethodImplementationHandle(int rowNumber);
    public static MethodSpecificationHandle MethodSpecificationHandle(int rowNumber);
    public static TypeDefinitionHandle TypeDefinitionHandle(int rowNumber);
    public static ExportedTypeHandle ExportedTypeHandle(int rowNumber);
    public static TypeReferenceHandle TypeReferenceHandle(int rowNumber);
    public static TypeSpecificationHandle TypeSpecificationHandle(int rowNumber);
    public static InterfaceImplementationHandle InterfaceImplementationHandle(int rowNumber);
    public static MemberReferenceHandle MemberReferenceHandle(int rowNumber);
    public static FieldDefinitionHandle FieldDefinitionHandle(int rowNumber);
    public static EventDefinitionHandle EventDefinitionHandle(int rowNumber);
    public static PropertyDefinitionHandle PropertyDefinitionHandle(int rowNumber);
    public static StandaloneSignatureHandle StandaloneSignatureHandle(int rowNumber);
    public static ParameterHandle ParameterHandle(int rowNumber);
    public static GenericParameterHandle GenericParameterHandle(int rowNumber);
    public static GenericParameterConstraintHandle GenericParameterConstraintHandle(int rowNumber);
    public static ModuleReferenceHandle ModuleReferenceHandle(int rowNumber);
    public static AssemblyReferenceHandle AssemblyReferenceHandle(int rowNumber);
    public static CustomAttributeHandle CustomAttributeHandle(int rowNumber);
    public static DeclarativeSecurityAttributeHandle DeclarativeSecurityAttributeHandle(int rowNumber);
    public static ConstantHandle ConstantHandle(int rowNumber);
    public static ManifestResourceHandle ManifestResourceHandle(int rowNumber);
    public static AssemblyFileHandle AssemblyFileHandle(int rowNumber);
    public static DocumentHandle DocumentHandle(int rowNumber);
    public static MethodDebugInformationHandle MethodDebugInformationHandle(int rowNumber);
    public static LocalScopeHandle LocalScopeHandle(int rowNumber);
    public static LocalVariableHandle LocalVariableHandle(int rowNumber);
    public static LocalConstantHandle LocalConstantHandle(int rowNumber);
    public static ImportScopeHandle ImportScopeHandle(int rowNumber);
    public static CustomDebugInformationHandle CustomDebugInformationHandle(int rowNumber);
    public static UserStringHandle UserStringHandle(int offset);
    public static StringHandle StringHandle(int offset);
    public static BlobHandle BlobHandle(int offset);
    public static GuidHandle GuidHandle(int offset);
    public static DocumentNameBlobHandle DocumentNameBlobHandle(int offset);
}
internal static class System.Reflection.Metadata.Ecma335.MetadataWriterUtilities : object {
    [NullableContextAttribute("2")]
public static SignatureTypeCode GetConstantTypeCode(object value);
    internal static void SerializeRowCounts(BlobBuilder writer, ImmutableArray`1<int> rowCounts);
}
[FlagsAttribute]
internal enum System.Reflection.Metadata.Ecma335.MethodBodyAttributes : Enum {
    public int value__;
    public static MethodBodyAttributes None;
    public static MethodBodyAttributes InitLocals;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.MethodBodyStreamEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    public BlobBuilder Builder { get; }
    public MethodBodyStreamEncoder(BlobBuilder builder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    public MethodBody AddMethodBody(int codeSize, int maxStack, int exceptionRegionCount, bool hasSmallExceptionRegions, StandaloneSignatureHandle localVariablesSignature, MethodBodyAttributes attributes);
    public MethodBody AddMethodBody(int codeSize, int maxStack, int exceptionRegionCount, bool hasSmallExceptionRegions, StandaloneSignatureHandle localVariablesSignature, MethodBodyAttributes attributes, bool hasDynamicStackAllocation);
    public int AddMethodBody(InstructionEncoder instructionEncoder, int maxStack, StandaloneSignatureHandle localVariablesSignature, MethodBodyAttributes attributes);
    public int AddMethodBody(InstructionEncoder instructionEncoder, int maxStack, StandaloneSignatureHandle localVariablesSignature, MethodBodyAttributes attributes, bool hasDynamicStackAllocation);
    private int SerializeHeader(int codeSize, ushort maxStack, int exceptionRegionCount, MethodBodyAttributes attributes, StandaloneSignatureHandle localVariablesSignature, bool hasDynamicStackAllocation);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.MethodDebugInformationTableReader : ValueType {
    internal int NumberOfRows;
    private bool _isDocumentRefSmall;
    private bool _isBlobHeapRefSizeSmall;
    private static int DocumentOffset;
    private int _sequencePointsOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal MethodDebugInformationTableReader(int numberOfRows, int documentRefSize, int blobHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal DocumentHandle GetDocument(MethodDebugInformationHandle handle);
    internal BlobHandle GetSequencePoints(MethodDebugInformationHandle handle);
}
internal static class System.Reflection.Metadata.Ecma335.MethodDefOrRefTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 MethodDef;
    internal static UInt32 MemberRef;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static UInt32 TagToTokenTypeByteVector;
    internal static EntityHandle ConvertToHandle(UInt32 methodDefOrRef);
}
[FlagsAttribute]
internal enum System.Reflection.Metadata.Ecma335.MethodDefTreatment : Enum {
    public byte value__;
    public static MethodDefTreatment None;
    public static MethodDefTreatment KindMask;
    public static MethodDefTreatment Other;
    public static MethodDefTreatment DelegateMethod;
    public static MethodDefTreatment AttributeMethod;
    public static MethodDefTreatment InterfaceMethod;
    public static MethodDefTreatment Implementation;
    public static MethodDefTreatment HiddenInterfaceImplementation;
    public static MethodDefTreatment DisposeMethod;
    public static MethodDefTreatment MarkAbstractFlag;
    public static MethodDefTreatment MarkPublicFlag;
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.MethodImplTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsTypeDefTableRowRefSizeSmall;
    private bool _IsMethodDefOrRefRefSizeSmall;
    private int _ClassOffset;
    private int _MethodBodyOffset;
    private int _MethodDeclarationOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal MethodImplTableReader(int numberOfRows, bool declaredSorted, int typeDefTableRowRefSize, int methodDefOrRefRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal TypeDefinitionHandle GetClass(MethodImplementationHandle handle);
    internal EntityHandle GetMethodBody(MethodImplementationHandle handle);
    internal EntityHandle GetMethodDeclaration(MethodImplementationHandle handle);
    internal void GetMethodImplRange(TypeDefinitionHandle typeDef, Int32& firstImplRowId, Int32& lastImplRowId);
    private bool CheckSorted();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.MethodPtrTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsMethodTableRowRefSizeSmall;
    private int _MethodOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal MethodPtrTableReader(int numberOfRows, int methodTableRowRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal MethodDefinitionHandle GetMethodFor(int rowId);
    internal int GetRowIdForMethodDefRow(int methodDefRowId);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.MethodSemanticsTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsMethodTableRowRefSizeSmall;
    private bool _IsHasSemanticRefSizeSmall;
    private int _SemanticsFlagOffset;
    private int _MethodOffset;
    private int _AssociationOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal MethodSemanticsTableReader(int numberOfRows, bool declaredSorted, int methodTableRowRefSize, int hasSemanticRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal MethodDefinitionHandle GetMethod(int rowId);
    internal MethodSemanticsAttributes GetSemantics(int rowId);
    internal EntityHandle GetAssociation(int rowId);
    internal int FindSemanticMethodsForEvent(EventDefinitionHandle eventDef, UInt16& methodCount);
    internal int FindSemanticMethodsForProperty(PropertyDefinitionHandle propertyDef, UInt16& methodCount);
    private int BinarySearchTag(UInt32 searchCodedTag, UInt16& methodCount);
    private bool CheckSorted();
}
[NullableContextAttribute("1")]
[IsReadOnlyAttribute]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.Ecma335.MethodSignatureEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasVarArgs>k__BackingField;
    public BlobBuilder Builder { get; }
    public bool HasVarArgs { get; }
    public MethodSignatureEncoder(BlobBuilder builder, bool hasVarArgs);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    [CompilerGeneratedAttribute]
public bool get_HasVarArgs();
    public void Parameters(int parameterCount, ReturnTypeEncoder& returnType, ParametersEncoder& parameters);
    public void Parameters(int parameterCount, Action`1<ReturnTypeEncoder> returnType, Action`1<ParametersEncoder> parameters);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.MethodSpecTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsMethodDefOrRefRefSizeSmall;
    private bool _IsBlobHeapRefSizeSmall;
    private int _MethodOffset;
    private int _InstantiationOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal MethodSpecTableReader(int numberOfRows, int methodDefOrRefRefSize, int blobHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal EntityHandle GetMethod(MethodSpecificationHandle handle);
    internal BlobHandle GetInstantiation(MethodSpecificationHandle handle);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.MethodTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsParamRefSizeSmall;
    private bool _IsStringHeapRefSizeSmall;
    private bool _IsBlobHeapRefSizeSmall;
    private int _RvaOffset;
    private int _ImplFlagsOffset;
    private int _FlagsOffset;
    private int _NameOffset;
    private int _SignatureOffset;
    private int _ParamListOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal MethodTableReader(int numberOfRows, int paramRefSize, int stringHeapRefSize, int blobHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal int GetParamStart(int rowId);
    internal BlobHandle GetSignature(MethodDefinitionHandle handle);
    internal int GetRva(MethodDefinitionHandle handle);
    internal StringHandle GetName(MethodDefinitionHandle handle);
    internal MethodAttributes GetFlags(MethodDefinitionHandle handle);
    internal MethodImplAttributes GetImplFlags(MethodDefinitionHandle handle);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.ModuleRefTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsStringHeapRefSizeSmall;
    private int _NameOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal ModuleRefTableReader(int numberOfRows, int stringHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal StringHandle GetName(ModuleReferenceHandle handle);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.ModuleTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsStringHeapRefSizeSmall;
    private bool _IsGUIDHeapRefSizeSmall;
    private int _GenerationOffset;
    private int _NameOffset;
    private int _MVIdOffset;
    private int _EnCIdOffset;
    private int _EnCBaseIdOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal ModuleTableReader(int numberOfRows, int stringHeapRefSize, int guidHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal ushort GetGeneration();
    internal StringHandle GetName();
    internal GuidHandle GetMvid();
    internal GuidHandle GetEncId();
    internal GuidHandle GetEncBaseId();
}
[NullableContextAttribute("1")]
[IsReadOnlyAttribute]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.Ecma335.NamedArgumentsEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    public BlobBuilder Builder { get; }
    public NamedArgumentsEncoder(BlobBuilder builder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    public void AddArgument(bool isField, NamedArgumentTypeEncoder& type, NameEncoder& name, LiteralEncoder& literal);
    public void AddArgument(bool isField, Action`1<NamedArgumentTypeEncoder> type, Action`1<NameEncoder> name, Action`1<LiteralEncoder> literal);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.NamedArgumentTypeEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    public BlobBuilder Builder { get; }
    public NamedArgumentTypeEncoder(BlobBuilder builder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    public CustomAttributeElementTypeEncoder ScalarType();
    public void Object();
    public CustomAttributeArrayTypeEncoder SZArray();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.NameEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    public BlobBuilder Builder { get; }
    public NameEncoder(BlobBuilder builder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    public void Name(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.Ecma335.NamespaceCache : object {
    private MetadataReader _metadataReader;
    private object _namespaceTableAndListLock;
    private Dictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _namespaceTable;
    private NamespaceData _rootNamespace;
    private UInt32 _virtualNamespaceCounter;
    internal bool CacheIsRealized { get; }
    internal NamespaceCache(MetadataReader reader);
    internal bool get_CacheIsRealized();
    internal string GetFullName(NamespaceDefinitionHandle handle);
    internal NamespaceData GetRootNamespace();
    internal NamespaceData GetNamespaceData(NamespaceDefinitionHandle handle);
    private StringHandle GetSimpleName(NamespaceDefinitionHandle fullNamespaceHandle, int segmentIndex);
    private void PopulateNamespaceTable();
    private static void MergeDuplicateNamespaces(Dictionary`2<NamespaceDefinitionHandle, NamespaceDataBuilder> table, Dictionary`2& stringTable);
    private NamespaceDataBuilder SynthesizeNamespaceData(string fullName, NamespaceDefinitionHandle realChild);
    private static void LinkChildDataToParentData(NamespaceDataBuilder child, NamespaceDataBuilder parent);
    private void LinkChildToParentNamespace(Dictionary`2<string, NamespaceDataBuilder> existingNamespaces, NamespaceDataBuilder realChild, List`1& virtualNamespaces);
    private void ResolveParentChildRelationships(Dictionary`2<string, NamespaceDataBuilder> namespaces, List`1& virtualNamespaces);
    private void PopulateTableWithTypeDefinitions(Dictionary`2<NamespaceDefinitionHandle, NamespaceDataBuilder> table);
    private void PopulateTableWithExportedTypes(Dictionary`2<NamespaceDefinitionHandle, NamespaceDataBuilder> table);
    private void EnsureNamespaceTableIsPopulated();
}
internal class System.Reflection.Metadata.Ecma335.NamespaceData : object {
    public StringHandle Name;
    [NullableAttribute("1")]
public string FullName;
    public NamespaceDefinitionHandle Parent;
    public ImmutableArray`1<NamespaceDefinitionHandle> NamespaceDefinitions;
    public ImmutableArray`1<TypeDefinitionHandle> TypeDefinitions;
    public ImmutableArray`1<ExportedTypeHandle> ExportedTypes;
    public NamespaceData(StringHandle name, string fullName, NamespaceDefinitionHandle parent, ImmutableArray`1<NamespaceDefinitionHandle> namespaceDefinitions, ImmutableArray`1<TypeDefinitionHandle> typeDefinitions, ImmutableArray`1<ExportedTypeHandle> exportedTypes);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.NestedClassTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsTypeDefTableRowRefSizeSmall;
    private int _NestedClassOffset;
    private int _EnclosingClassOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal NestedClassTableReader(int numberOfRows, bool declaredSorted, int typeDefTableRowRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal TypeDefinitionHandle GetNestedClass(int rowId);
    internal TypeDefinitionHandle GetEnclosingClass(int rowId);
    internal TypeDefinitionHandle FindEnclosingType(TypeDefinitionHandle nestedTypeDef);
    private bool CheckSorted();
}
[IsReadOnlyAttribute]
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.Ecma335.ParametersEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasVarArgs>k__BackingField;
    public BlobBuilder Builder { get; }
    public bool HasVarArgs { get; }
    public ParametersEncoder(BlobBuilder builder, bool hasVarArgs);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    [CompilerGeneratedAttribute]
public bool get_HasVarArgs();
    public ParameterTypeEncoder AddParameter();
    public ParametersEncoder StartVarArgs();
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.ParameterTypeEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    public BlobBuilder Builder { get; }
    public ParameterTypeEncoder(BlobBuilder builder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    public CustomModifiersEncoder CustomModifiers();
    public SignatureTypeEncoder Type(bool isByRef);
    public void TypedReference();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.ParamPtrTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsParamTableRowRefSizeSmall;
    private int _ParamOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal ParamPtrTableReader(int numberOfRows, int paramTableRowRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal ParameterHandle GetParamFor(int rowId);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.ParamTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsStringHeapRefSizeSmall;
    private int _FlagsOffset;
    private int _SequenceOffset;
    private int _NameOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal ParamTableReader(int numberOfRows, int stringHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal ParameterAttributes GetFlags(ParameterHandle handle);
    internal ushort GetSequence(ParameterHandle handle);
    internal StringHandle GetName(ParameterHandle handle);
}
[NullableContextAttribute("1")]
[IsReadOnlyAttribute]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.Ecma335.PermissionSetEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    public BlobBuilder Builder { get; }
    public PermissionSetEncoder(BlobBuilder builder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    [NullableContextAttribute("0")]
public PermissionSetEncoder AddPermission(string typeName, ImmutableArray`1<byte> encodedArguments);
    public PermissionSetEncoder AddPermission(string typeName, BlobBuilder encodedArguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.Ecma335.PortablePdbBuilder : object {
    private Blob _pdbIdBlob;
    private MethodDefinitionHandle _entryPoint;
    private MetadataBuilder _builder;
    private SerializedMetadata _serializedMetadata;
    [CompilerGeneratedAttribute]
private Func`2<IEnumerable`1<Blob>, BlobContentId> <IdProvider>k__BackingField;
    public string MetadataVersion { get; }
    public ushort FormatVersion { get; }
    public Func`2<IEnumerable`1<Blob>, BlobContentId> IdProvider { get; }
    [NullableContextAttribute("0")]
public PortablePdbBuilder(MetadataBuilder tablesAndHeaps, ImmutableArray`1<int> typeSystemRowCounts, MethodDefinitionHandle entryPoint, Func`2<IEnumerable`1<Blob>, BlobContentId> idProvider);
    public string get_MetadataVersion();
    public ushort get_FormatVersion();
    [CompilerGeneratedAttribute]
public Func`2<IEnumerable`1<Blob>, BlobContentId> get_IdProvider();
    private static void ValidateTypeSystemRowCounts(ImmutableArray`1<int> typeSystemRowCounts);
    private void SerializeStandalonePdbStream(BlobBuilder builder);
    public BlobContentId Serialize(BlobBuilder builder);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.PropertyMapTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsTypeDefTableRowRefSizeSmall;
    private bool _IsPropertyRefSizeSmall;
    private int _ParentOffset;
    private int _PropertyListOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal PropertyMapTableReader(int numberOfRows, int typeDefTableRowRefSize, int propertyRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal int FindPropertyMapRowIdFor(TypeDefinitionHandle typeDef);
    internal TypeDefinitionHandle GetParentType(int rowId);
    internal int GetPropertyListStartFor(int rowId);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.PropertyPtrTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsPropertyTableRowRefSizeSmall;
    private int _PropertyOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal PropertyPtrTableReader(int numberOfRows, int propertyTableRowRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal PropertyDefinitionHandle GetPropertyFor(int rowId);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.PropertyTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsStringHeapRefSizeSmall;
    private bool _IsBlobHeapRefSizeSmall;
    private int _FlagsOffset;
    private int _NameOffset;
    private int _SignatureOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal PropertyTableReader(int numberOfRows, int stringHeapRefSize, int blobHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal PropertyAttributes GetFlags(PropertyDefinitionHandle handle);
    internal StringHandle GetName(PropertyDefinitionHandle handle);
    internal BlobHandle GetSignature(PropertyDefinitionHandle handle);
}
internal static class System.Reflection.Metadata.Ecma335.ResolutionScopeTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 Module;
    internal static UInt32 ModuleRef;
    internal static UInt32 AssemblyRef;
    internal static UInt32 TypeRef;
    internal static UInt32 TagMask;
    internal static UInt32 TagToTokenTypeByteVector;
    internal static TableMask TablesReferenced;
    internal static EntityHandle ConvertToHandle(UInt32 resolutionScope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.ReturnTypeEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    public BlobBuilder Builder { get; }
    public ReturnTypeEncoder(BlobBuilder builder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    public CustomModifiersEncoder CustomModifiers();
    public SignatureTypeEncoder Type(bool isByRef);
    public void TypedReference();
    public void Void();
}
[IsReadOnlyAttribute]
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class System.Reflection.Metadata.Ecma335.ScalarEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    public BlobBuilder Builder { get; }
    public ScalarEncoder(BlobBuilder builder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    public void NullArray();
    [NullableContextAttribute("2")]
public void Constant(object value);
    [NullableContextAttribute("2")]
public void SystemType(string serializedTypeName);
    private void String(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.Ecma335.SerializedMetadata : object {
    [NullableAttribute("0")]
internal ImmutableArray`1<int> StringMap;
    internal BlobBuilder StringHeap;
    internal MetadataSizes Sizes;
    public SerializedMetadata(MetadataSizes sizes, BlobBuilder stringHeap, ImmutableArray`1<int> stringMap);
}
[NullableContextAttribute("1")]
[IsReadOnlyAttribute]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.Ecma335.SignatureDecoder`2 : ValueType {
    private ISignatureTypeProvider`2<TType, TGenericContext> _provider;
    private MetadataReader _metadataReaderOpt;
    private TGenericContext _genericContext;
    public SignatureDecoder`2(ISignatureTypeProvider`2<TType, TGenericContext> provider, MetadataReader metadataReader, TGenericContext genericContext);
    public TType DecodeType(BlobReader& blobReader, bool allowTypeSpecifications);
    private TType DecodeType(BlobReader& blobReader, bool allowTypeSpecifications, int typeCode);
    private ImmutableArray`1<TType> DecodeTypeSequence(BlobReader& blobReader);
    public MethodSignature`1<TType> DecodeMethodSignature(BlobReader& blobReader);
    public ImmutableArray`1<TType> DecodeMethodSpecificationSignature(BlobReader& blobReader);
    public ImmutableArray`1<TType> DecodeLocalSignature(BlobReader& blobReader);
    public TType DecodeFieldSignature(BlobReader& blobReader);
    private TType DecodeArrayType(BlobReader& blobReader);
    private TType DecodeGenericTypeInstance(BlobReader& blobReader);
    private TType DecodeModifiedType(BlobReader& blobReader, bool isRequired);
    private TType DecodeTypeHandle(BlobReader& blobReader, byte rawTypeKind, bool allowTypeSpecifications);
    private static void CheckHeader(SignatureHeader header, SignatureKind expectedKind);
    private static void CheckMethodOrPropertyHeader(SignatureHeader header);
}
[IsReadOnlyAttribute]
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.Ecma335.SignatureTypeEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    public BlobBuilder Builder { get; }
    public SignatureTypeEncoder(BlobBuilder builder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    private void WriteTypeCode(SignatureTypeCode value);
    private void ClassOrValue(bool isValueType);
    public void Boolean();
    public void Char();
    public void SByte();
    public void Byte();
    public void Int16();
    public void UInt16();
    public void Int32();
    public void UInt32();
    public void Int64();
    public void UInt64();
    public void Single();
    public void Double();
    public void String();
    public void TypedReference();
    public void IntPtr();
    public void UIntPtr();
    public void Object();
    public void PrimitiveType(PrimitiveTypeCode type);
    public void Array(SignatureTypeEncoder& elementType, ArrayShapeEncoder& arrayShape);
    public void Array(Action`1<SignatureTypeEncoder> elementType, Action`1<ArrayShapeEncoder> arrayShape);
    public void Type(EntityHandle type, bool isValueType);
    public MethodSignatureEncoder FunctionPointer(SignatureCallingConvention convention, FunctionPointerAttributes attributes, int genericParameterCount);
    public GenericTypeArgumentsEncoder GenericInstantiation(EntityHandle genericType, int genericArgumentCount, bool isValueType);
    public void GenericMethodTypeParameter(int parameterIndex);
    public void GenericTypeParameter(int parameterIndex);
    public SignatureTypeEncoder Pointer();
    public void VoidPointer();
    public SignatureTypeEncoder SZArray();
    public CustomModifiersEncoder CustomModifiers();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.StandAloneSigTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsBlobHeapRefSizeSmall;
    private int _SignatureOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal StandAloneSigTableReader(int numberOfRows, int blobHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal BlobHandle GetSignature(int rowId);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.StateMachineMethodTableReader : ValueType {
    internal int NumberOfRows;
    private bool _isMethodRefSizeSmall;
    private static int MoveNextMethodOffset;
    private int _kickoffMethodOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal StateMachineMethodTableReader(int numberOfRows, bool declaredSorted, int methodRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal MethodDefinitionHandle FindKickoffMethod(int moveNextMethodRowId);
    private MethodDefinitionHandle GetKickoffMethod(int rowId);
}
internal class System.Reflection.Metadata.Ecma335.StreamHeader : ValueType {
    internal UInt32 Offset;
    internal int Size;
    [NullableAttribute("1")]
internal string Name;
}
internal static class System.Reflection.Metadata.Ecma335.StringHandleType : object {
    internal static UInt32 TypeMask;
    internal static UInt32 NonVirtualTypeMask;
    internal static UInt32 String;
    internal static UInt32 DotTerminatedString;
    internal static UInt32 ReservedString1;
    internal static UInt32 ReservedString2;
    internal static UInt32 VirtualString;
    internal static UInt32 WinRTPrefixedString;
    internal static UInt32 ReservedVirtualString1;
    internal static UInt32 ReservedVirtualString2;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.Ecma335.StringHeap : ValueType {
    private static String[] s_virtualValues;
    internal MemoryBlock Block;
    private VirtualHeap _lazyVirtualHeap;
    internal StringHeap(MemoryBlock block, MetadataKind metadataKind);
    [ConditionalAttribute("DEBUG")]
private static void AssertFilled();
    private static MemoryBlock TrimEnd(MemoryBlock block);
    internal string GetString(StringHandle handle, MetadataStringDecoder utf8Decoder);
    internal MemoryBlock GetMemoryBlock(StringHandle handle);
    internal static string GetVirtualString(VirtualIndex index);
    private string GetNonVirtualString(StringHandle handle, MetadataStringDecoder utf8Decoder, Byte[] prefixOpt);
    private MemoryBlock GetNonVirtualStringMemoryBlock(StringHandle handle);
    private Byte[] GetNonVirtualStringBytes(StringHandle handle, Byte[] prefix);
    private string GetVirtualHandleString(StringHandle handle, MetadataStringDecoder utf8Decoder);
    private MemoryBlock GetVirtualHandleMemoryBlock(StringHandle handle);
    internal BlobReader GetBlobReader(StringHandle handle);
    internal StringHandle GetNextHandle(StringHandle handle);
    internal bool Equals(StringHandle handle, string value, MetadataStringDecoder utf8Decoder, bool ignoreCase);
    internal bool StartsWith(StringHandle handle, string value, MetadataStringDecoder utf8Decoder, bool ignoreCase);
    internal bool EqualsRaw(StringHandle rawHandle, string asciiString);
    internal int IndexOfRaw(int startIndex, char asciiChar);
    internal bool StartsWithRaw(StringHandle rawHandle, string asciiPrefix);
    internal int BinarySearchRaw(String[] asciiKeys, StringHandle rawHandle);
}
internal enum System.Reflection.Metadata.Ecma335.StringKind : Enum {
    public byte value__;
    public static StringKind Plain;
    public static StringKind Virtual;
    public static StringKind WinRTPrefixed;
    public static StringKind DotTerminated;
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.SwitchInstructionEncoder : ValueType {
    private InstructionEncoder _encoder;
    private int _ilOffset;
    private int _instructionEnd;
    internal SwitchInstructionEncoder(InstructionEncoder encoder, int ilOffset, int instructionEnd);
    public void Branch(LabelHandle label);
}
internal enum System.Reflection.Metadata.Ecma335.TableIndex : Enum {
    public byte value__;
    public static TableIndex Module;
    public static TableIndex TypeRef;
    public static TableIndex TypeDef;
    public static TableIndex FieldPtr;
    public static TableIndex Field;
    public static TableIndex MethodPtr;
    public static TableIndex MethodDef;
    public static TableIndex ParamPtr;
    public static TableIndex Param;
    public static TableIndex InterfaceImpl;
    public static TableIndex MemberRef;
    public static TableIndex Constant;
    public static TableIndex CustomAttribute;
    public static TableIndex FieldMarshal;
    public static TableIndex DeclSecurity;
    public static TableIndex ClassLayout;
    public static TableIndex FieldLayout;
    public static TableIndex StandAloneSig;
    public static TableIndex EventMap;
    public static TableIndex EventPtr;
    public static TableIndex Event;
    public static TableIndex PropertyMap;
    public static TableIndex PropertyPtr;
    public static TableIndex Property;
    public static TableIndex MethodSemantics;
    public static TableIndex MethodImpl;
    public static TableIndex ModuleRef;
    public static TableIndex TypeSpec;
    public static TableIndex ImplMap;
    public static TableIndex FieldRva;
    public static TableIndex EncLog;
    public static TableIndex EncMap;
    public static TableIndex Assembly;
    public static TableIndex AssemblyProcessor;
    public static TableIndex AssemblyOS;
    public static TableIndex AssemblyRef;
    public static TableIndex AssemblyRefProcessor;
    public static TableIndex AssemblyRefOS;
    public static TableIndex File;
    public static TableIndex ExportedType;
    public static TableIndex ManifestResource;
    public static TableIndex NestedClass;
    public static TableIndex GenericParam;
    public static TableIndex MethodSpec;
    public static TableIndex GenericParamConstraint;
    public static TableIndex Document;
    public static TableIndex MethodDebugInformation;
    public static TableIndex LocalScope;
    public static TableIndex LocalVariable;
    public static TableIndex LocalConstant;
    public static TableIndex ImportScope;
    public static TableIndex StateMachineMethod;
    public static TableIndex CustomDebugInformation;
}
[FlagsAttribute]
internal enum System.Reflection.Metadata.Ecma335.TableMask : Enum {
    public ulong value__;
    public static TableMask Module;
    public static TableMask TypeRef;
    public static TableMask TypeDef;
    public static TableMask FieldPtr;
    public static TableMask Field;
    public static TableMask MethodPtr;
    public static TableMask MethodDef;
    public static TableMask ParamPtr;
    public static TableMask Param;
    public static TableMask InterfaceImpl;
    public static TableMask MemberRef;
    public static TableMask Constant;
    public static TableMask CustomAttribute;
    public static TableMask FieldMarshal;
    public static TableMask DeclSecurity;
    public static TableMask ClassLayout;
    public static TableMask FieldLayout;
    public static TableMask StandAloneSig;
    public static TableMask EventMap;
    public static TableMask EventPtr;
    public static TableMask Event;
    public static TableMask PropertyMap;
    public static TableMask PropertyPtr;
    public static TableMask Property;
    public static TableMask MethodSemantics;
    public static TableMask MethodImpl;
    public static TableMask ModuleRef;
    public static TableMask TypeSpec;
    public static TableMask ImplMap;
    public static TableMask FieldRva;
    public static TableMask EnCLog;
    public static TableMask EnCMap;
    public static TableMask Assembly;
    public static TableMask AssemblyRef;
    public static TableMask File;
    public static TableMask ExportedType;
    public static TableMask ManifestResource;
    public static TableMask NestedClass;
    public static TableMask GenericParam;
    public static TableMask MethodSpec;
    public static TableMask GenericParamConstraint;
    public static TableMask Document;
    public static TableMask MethodDebugInformation;
    public static TableMask LocalScope;
    public static TableMask LocalVariable;
    public static TableMask LocalConstant;
    public static TableMask ImportScope;
    public static TableMask StateMachineMethod;
    public static TableMask CustomDebugInformation;
    public static TableMask PtrTables;
    public static TableMask EncTables;
    public static TableMask TypeSystemTables;
    public static TableMask DebugTables;
    public static TableMask AllTables;
    public static TableMask ValidPortablePdbExternalTables;
}
internal static class System.Reflection.Metadata.Ecma335.TokenTypeIds : object {
    internal static UInt32 Module;
    internal static UInt32 TypeRef;
    internal static UInt32 TypeDef;
    internal static UInt32 FieldDef;
    internal static UInt32 MethodDef;
    internal static UInt32 ParamDef;
    internal static UInt32 InterfaceImpl;
    internal static UInt32 MemberRef;
    internal static UInt32 Constant;
    internal static UInt32 CustomAttribute;
    internal static UInt32 DeclSecurity;
    internal static UInt32 Signature;
    internal static UInt32 EventMap;
    internal static UInt32 Event;
    internal static UInt32 PropertyMap;
    internal static UInt32 Property;
    internal static UInt32 MethodSemantics;
    internal static UInt32 MethodImpl;
    internal static UInt32 ModuleRef;
    internal static UInt32 TypeSpec;
    internal static UInt32 Assembly;
    internal static UInt32 AssemblyRef;
    internal static UInt32 File;
    internal static UInt32 ExportedType;
    internal static UInt32 ManifestResource;
    internal static UInt32 NestedClass;
    internal static UInt32 GenericParam;
    internal static UInt32 MethodSpec;
    internal static UInt32 GenericParamConstraint;
    internal static UInt32 Document;
    internal static UInt32 MethodDebugInformation;
    internal static UInt32 LocalScope;
    internal static UInt32 LocalVariable;
    internal static UInt32 LocalConstant;
    internal static UInt32 ImportScope;
    internal static UInt32 AsyncMethod;
    internal static UInt32 CustomDebugInformation;
    internal static UInt32 UserString;
    internal static int RowIdBitCount;
    internal static UInt32 RIDMask;
    internal static UInt32 TypeMask;
    internal static UInt32 VirtualBit;
    internal static bool IsEntityOrUserStringToken(UInt32 vToken);
    internal static bool IsEntityToken(UInt32 vToken);
    internal static bool IsValidRowId(UInt32 rowId);
    internal static bool IsValidRowId(int rowId);
}
internal static class System.Reflection.Metadata.Ecma335.TypeDefOrRefTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 TypeDef;
    internal static UInt32 TypeRef;
    internal static UInt32 TypeSpec;
    internal static UInt32 TagMask;
    internal static UInt32 TagToTokenTypeByteVector;
    internal static TableMask TablesReferenced;
    internal static EntityHandle ConvertToHandle(UInt32 typeDefOrRefTag);
}
internal class System.Reflection.Metadata.Ecma335.TypeDefTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsFieldRefSizeSmall;
    private bool _IsMethodRefSizeSmall;
    private bool _IsTypeDefOrRefRefSizeSmall;
    private bool _IsStringHeapRefSizeSmall;
    private int _FlagsOffset;
    private int _NameOffset;
    private int _NamespaceOffset;
    private int _ExtendsOffset;
    private int _FieldListOffset;
    private int _MethodListOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal TypeDefTableReader(int numberOfRows, int fieldRefSize, int methodRefSize, int typeDefOrRefRefSize, int stringHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal TypeAttributes GetFlags(TypeDefinitionHandle handle);
    internal NamespaceDefinitionHandle GetNamespaceDefinition(TypeDefinitionHandle handle);
    internal StringHandle GetNamespace(TypeDefinitionHandle handle);
    internal StringHandle GetName(TypeDefinitionHandle handle);
    internal EntityHandle GetExtends(TypeDefinitionHandle handle);
    internal int GetFieldStart(int rowId);
    internal int GetMethodStart(int rowId);
    internal TypeDefinitionHandle FindTypeContainingMethod(int methodDefOrPtrRowId, int numberOfMethods);
    internal TypeDefinitionHandle FindTypeContainingField(int fieldDefOrPtrRowId, int numberOfFields);
}
[FlagsAttribute]
internal enum System.Reflection.Metadata.Ecma335.TypeDefTreatment : Enum {
    public byte value__;
    public static TypeDefTreatment None;
    public static TypeDefTreatment KindMask;
    public static TypeDefTreatment NormalNonAttribute;
    public static TypeDefTreatment NormalAttribute;
    public static TypeDefTreatment UnmangleWinRTName;
    public static TypeDefTreatment PrefixWinRTName;
    public static TypeDefTreatment RedirectedToClrType;
    public static TypeDefTreatment RedirectedToClrAttribute;
    public static TypeDefTreatment MarkAbstractFlag;
    public static TypeDefTreatment MarkInternalFlag;
}
internal static class System.Reflection.Metadata.Ecma335.TypeOrMethodDefTag : object {
    internal static int NumberOfBits;
    internal static int LargeRowSize;
    internal static UInt32 TypeDef;
    internal static UInt32 MethodDef;
    internal static UInt32 TagMask;
    internal static UInt32 TagToTokenTypeByteVector;
    internal static TableMask TablesReferenced;
    internal static EntityHandle ConvertToHandle(UInt32 typeOrMethodDef);
    internal static UInt32 ConvertTypeDefRowIdToTag(TypeDefinitionHandle typeDef);
    internal static UInt32 ConvertMethodDefToTag(MethodDefinitionHandle methodDef);
}
internal enum System.Reflection.Metadata.Ecma335.TypeRefSignatureTreatment : Enum {
    public byte value__;
    public static TypeRefSignatureTreatment None;
    public static TypeRefSignatureTreatment ProjectedToClass;
    public static TypeRefSignatureTreatment ProjectedToValueType;
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.TypeRefTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsResolutionScopeRefSizeSmall;
    private bool _IsStringHeapRefSizeSmall;
    private int _ResolutionScopeOffset;
    private int _NameOffset;
    private int _NamespaceOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal TypeRefTableReader(int numberOfRows, int resolutionScopeRefSize, int stringHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal EntityHandle GetResolutionScope(TypeReferenceHandle handle);
    internal StringHandle GetName(TypeReferenceHandle handle);
    internal StringHandle GetNamespace(TypeReferenceHandle handle);
}
internal enum System.Reflection.Metadata.Ecma335.TypeRefTreatment : Enum {
    public byte value__;
    public static TypeRefTreatment None;
    public static TypeRefTreatment SystemDelegate;
    public static TypeRefTreatment SystemAttribute;
    public static TypeRefTreatment UseProjectionInfo;
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.TypeSpecTableReader : ValueType {
    internal int NumberOfRows;
    private bool _IsBlobHeapRefSizeSmall;
    private int _SignatureOffset;
    internal int RowSize;
    internal MemoryBlock Block;
    internal TypeSpecTableReader(int numberOfRows, int blobHeapRefSize, MemoryBlock containingBlock, int containingBlockOffset);
    internal BlobHandle GetSignature(TypeSpecificationHandle handle);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.UserStringHeap : ValueType {
    internal MemoryBlock Block;
    public UserStringHeap(MemoryBlock block);
    [NullableContextAttribute("1")]
internal string GetString(UserStringHandle handle);
    internal UserStringHandle GetNextHandle(UserStringHandle handle);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Ecma335.VectorEncoder : ValueType {
    [CompilerGeneratedAttribute]
private BlobBuilder <Builder>k__BackingField;
    public BlobBuilder Builder { get; }
    public VectorEncoder(BlobBuilder builder);
    [CompilerGeneratedAttribute]
public BlobBuilder get_Builder();
    public LiteralsEncoder Count(int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.Ecma335.VirtualHeap : CriticalDisposableObject {
    private Dictionary`2<UInt32, PinnedBlob> _blobs;
    protected virtual void Release();
    private Dictionary`2<UInt32, PinnedBlob> GetBlobs();
    public bool TryGetMemoryBlock(UInt32 rawHandle, MemoryBlock& block);
    internal MemoryBlock AddBlob(UInt32 rawHandle, Byte[] value);
    internal static VirtualHeap GetOrCreateVirtualHeap(VirtualHeap& lazyHeap);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.EntityHandle : ValueType {
    private UInt32 _vToken;
    public static ModuleDefinitionHandle ModuleDefinition;
    public static AssemblyDefinitionHandle AssemblyDefinition;
    internal UInt32 Type { get; }
    internal UInt32 VType { get; }
    internal bool IsVirtual { get; }
    public bool IsNil { get; }
    internal int RowId { get; }
    internal UInt32 SpecificHandleValue { get; }
    public HandleKind Kind { get; }
    internal int Token { get; }
    internal EntityHandle(UInt32 vToken);
    private static EntityHandle();
    public static Handle op_Implicit(EntityHandle handle);
    public static EntityHandle op_Explicit(Handle handle);
    internal UInt32 get_Type();
    internal UInt32 get_VType();
    internal bool get_IsVirtual();
    public bool get_IsNil();
    internal int get_RowId();
    internal UInt32 get_SpecificHandleValue();
    public HandleKind get_Kind();
    internal int get_Token();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(EntityHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(EntityHandle left, EntityHandle right);
    public static bool op_Inequality(EntityHandle left, EntityHandle right);
    internal static int Compare(EntityHandle left, EntityHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.EventAccessors : ValueType {
    private int _adderRowId;
    private int _removerRowId;
    private int _raiserRowId;
    private ImmutableArray`1<MethodDefinitionHandle> _others;
    public MethodDefinitionHandle Adder { get; }
    public MethodDefinitionHandle Remover { get; }
    public MethodDefinitionHandle Raiser { get; }
    public ImmutableArray`1<MethodDefinitionHandle> Others { get; }
    internal EventAccessors(int adderRowId, int removerRowId, int raiserRowId, ImmutableArray`1<MethodDefinitionHandle> others);
    public MethodDefinitionHandle get_Adder();
    public MethodDefinitionHandle get_Remover();
    public MethodDefinitionHandle get_Raiser();
    public ImmutableArray`1<MethodDefinitionHandle> get_Others();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.EventDefinition : ValueType {
    private MetadataReader _reader;
    private int _rowId;
    private EventDefinitionHandle Handle { get; }
    public StringHandle Name { get; }
    public EventAttributes Attributes { get; }
    public EntityHandle Type { get; }
    [NullableContextAttribute("1")]
internal EventDefinition(MetadataReader reader, EventDefinitionHandle handle);
    private EventDefinitionHandle get_Handle();
    public StringHandle get_Name();
    public EventAttributes get_Attributes();
    public EntityHandle get_Type();
    public CustomAttributeHandleCollection GetCustomAttributes();
    public EventAccessors GetAccessors();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.EventDefinitionHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private EventDefinitionHandle(int rowId);
    internal static EventDefinitionHandle FromRowId(int rowId);
    public static Handle op_Implicit(EventDefinitionHandle handle);
    public static EntityHandle op_Implicit(EventDefinitionHandle handle);
    public static EventDefinitionHandle op_Explicit(Handle handle);
    public static EventDefinitionHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(EventDefinitionHandle left, EventDefinitionHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(EventDefinitionHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(EventDefinitionHandle left, EventDefinitionHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.EventDefinitionHandleCollection : ValueType {
    private MetadataReader _reader;
    private int _firstRowId;
    private int _lastRowId;
    public int Count { get; }
    [NullableContextAttribute("1")]
internal EventDefinitionHandleCollection(MetadataReader reader);
    [NullableContextAttribute("1")]
internal EventDefinitionHandleCollection(MetadataReader reader, TypeDefinitionHandle containingType);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<EventDefinitionHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.EventDefinitionHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.ExceptionRegion : ValueType {
    private ExceptionRegionKind _kind;
    private int _tryOffset;
    private int _tryLength;
    private int _handlerOffset;
    private int _handlerLength;
    private int _classTokenOrFilterOffset;
    public ExceptionRegionKind Kind { get; }
    public int TryOffset { get; }
    public int TryLength { get; }
    public int HandlerOffset { get; }
    public int HandlerLength { get; }
    public int FilterOffset { get; }
    public EntityHandle CatchType { get; }
    internal ExceptionRegion(ExceptionRegionKind kind, int tryOffset, int tryLength, int handlerOffset, int handlerLength, int classTokenOrFilterOffset);
    public ExceptionRegionKind get_Kind();
    public int get_TryOffset();
    public int get_TryLength();
    public int get_HandlerOffset();
    public int get_HandlerLength();
    public int get_FilterOffset();
    public EntityHandle get_CatchType();
}
internal enum System.Reflection.Metadata.ExceptionRegionKind : Enum {
    public ushort value__;
    public static ExceptionRegionKind Catch;
    public static ExceptionRegionKind Filter;
    public static ExceptionRegionKind Finally;
    public static ExceptionRegionKind Fault;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.ExportedType : ValueType {
    internal MetadataReader reader;
    internal int rowId;
    private ExportedTypeHandle Handle { get; }
    public TypeAttributes Attributes { get; }
    public bool IsForwarder { get; }
    public StringHandle Name { get; }
    public StringHandle Namespace { get; }
    public NamespaceDefinitionHandle NamespaceDefinition { get; }
    public EntityHandle Implementation { get; }
    internal ExportedType(MetadataReader reader, int rowId);
    private ExportedTypeHandle get_Handle();
    public TypeAttributes get_Attributes();
    public bool get_IsForwarder();
    public StringHandle get_Name();
    public StringHandle get_Namespace();
    public NamespaceDefinitionHandle get_NamespaceDefinition();
    public EntityHandle get_Implementation();
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.ExportedTypeHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private ExportedTypeHandle(int rowId);
    internal static ExportedTypeHandle FromRowId(int rowId);
    public static Handle op_Implicit(ExportedTypeHandle handle);
    public static EntityHandle op_Implicit(ExportedTypeHandle handle);
    public static ExportedTypeHandle op_Explicit(Handle handle);
    public static ExportedTypeHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(ExportedTypeHandle left, ExportedTypeHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ExportedTypeHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(ExportedTypeHandle left, ExportedTypeHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.ExportedTypeHandleCollection : ValueType {
    private int _lastRowId;
    public int Count { get; }
    internal ExportedTypeHandleCollection(int lastRowId);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<ExportedTypeHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.ExportedTypeHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[NullableContextAttribute("1")]
internal class System.Reflection.Metadata.FieldDefinition : ValueType {
    private MetadataReader _reader;
    private UInt32 _treatmentAndRowId;
    private int RowId { get; }
    private FieldDefTreatment Treatment { get; }
    private FieldDefinitionHandle Handle { get; }
    public StringHandle Name { get; }
    public FieldAttributes Attributes { get; }
    public BlobHandle Signature { get; }
    internal FieldDefinition(MetadataReader reader, UInt32 treatmentAndRowId);
    private int get_RowId();
    private FieldDefTreatment get_Treatment();
    private FieldDefinitionHandle get_Handle();
    public StringHandle get_Name();
    public FieldAttributes get_Attributes();
    public BlobHandle get_Signature();
    public TType DecodeSignature(ISignatureTypeProvider`2<TType, TGenericContext> provider, TGenericContext genericContext);
    public TypeDefinitionHandle GetDeclaringType();
    public ConstantHandle GetDefaultValue();
    public int GetRelativeVirtualAddress();
    public int GetOffset();
    public BlobHandle GetMarshallingDescriptor();
    public CustomAttributeHandleCollection GetCustomAttributes();
    private StringHandle GetProjectedName();
    private FieldAttributes GetProjectedFlags();
    private BlobHandle GetProjectedSignature();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.FieldDefinitionHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private FieldDefinitionHandle(int rowId);
    internal static FieldDefinitionHandle FromRowId(int rowId);
    public static Handle op_Implicit(FieldDefinitionHandle handle);
    public static EntityHandle op_Implicit(FieldDefinitionHandle handle);
    public static FieldDefinitionHandle op_Explicit(Handle handle);
    public static FieldDefinitionHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(FieldDefinitionHandle left, FieldDefinitionHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(FieldDefinitionHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(FieldDefinitionHandle left, FieldDefinitionHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.FieldDefinitionHandleCollection : ValueType {
    private MetadataReader _reader;
    private int _firstRowId;
    private int _lastRowId;
    public int Count { get; }
    [NullableContextAttribute("1")]
internal FieldDefinitionHandleCollection(MetadataReader reader);
    [NullableContextAttribute("1")]
internal FieldDefinitionHandleCollection(MetadataReader reader, TypeDefinitionHandle containingType);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<FieldDefinitionHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.FieldDefinitionHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.GenericParameter : ValueType {
    private MetadataReader _reader;
    private int _rowId;
    private GenericParameterHandle Handle { get; }
    public EntityHandle Parent { get; }
    public GenericParameterAttributes Attributes { get; }
    public int Index { get; }
    public StringHandle Name { get; }
    [NullableContextAttribute("1")]
internal GenericParameter(MetadataReader reader, GenericParameterHandle handle);
    private GenericParameterHandle get_Handle();
    public EntityHandle get_Parent();
    public GenericParameterAttributes get_Attributes();
    public int get_Index();
    public StringHandle get_Name();
    public GenericParameterConstraintHandleCollection GetConstraints();
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.GenericParameterConstraint : ValueType {
    private MetadataReader _reader;
    private int _rowId;
    private GenericParameterConstraintHandle Handle { get; }
    public GenericParameterHandle Parameter { get; }
    public EntityHandle Type { get; }
    [NullableContextAttribute("1")]
internal GenericParameterConstraint(MetadataReader reader, GenericParameterConstraintHandle handle);
    private GenericParameterConstraintHandle get_Handle();
    public GenericParameterHandle get_Parameter();
    public EntityHandle get_Type();
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.GenericParameterConstraintHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private GenericParameterConstraintHandle(int rowId);
    internal static GenericParameterConstraintHandle FromRowId(int rowId);
    public static Handle op_Implicit(GenericParameterConstraintHandle handle);
    public static EntityHandle op_Implicit(GenericParameterConstraintHandle handle);
    public static GenericParameterConstraintHandle op_Explicit(Handle handle);
    public static GenericParameterConstraintHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(GenericParameterConstraintHandle left, GenericParameterConstraintHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(GenericParameterConstraintHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(GenericParameterConstraintHandle left, GenericParameterConstraintHandle right);
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class System.Reflection.Metadata.GenericParameterConstraintHandleCollection : ValueType {
    private int _firstRowId;
    private ushort _count;
    public int Count { get; }
    public GenericParameterConstraintHandle Item { get; }
    internal GenericParameterConstraintHandleCollection(int firstRowId, ushort count);
    public sealed virtual int get_Count();
    public sealed virtual GenericParameterConstraintHandle get_Item(int index);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<GenericParameterConstraintHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.GenericParameterConstraintHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.GenericParameterHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private GenericParameterHandle(int rowId);
    internal static GenericParameterHandle FromRowId(int rowId);
    public static Handle op_Implicit(GenericParameterHandle handle);
    public static EntityHandle op_Implicit(GenericParameterHandle handle);
    public static GenericParameterHandle op_Explicit(Handle handle);
    public static GenericParameterHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(GenericParameterHandle left, GenericParameterHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(GenericParameterHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(GenericParameterHandle left, GenericParameterHandle right);
}
[DefaultMemberAttribute("Item")]
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.GenericParameterHandleCollection : ValueType {
    private int _firstRowId;
    private ushort _count;
    public int Count { get; }
    public GenericParameterHandle Item { get; }
    internal GenericParameterHandleCollection(int firstRowId, ushort count);
    public sealed virtual int get_Count();
    public sealed virtual GenericParameterHandle get_Item(int index);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<GenericParameterHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.GenericParameterHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.GuidHandle : ValueType {
    private int _index;
    public bool IsNil { get; }
    internal int Index { get; }
    private GuidHandle(int index);
    internal static GuidHandle FromIndex(int heapIndex);
    public static Handle op_Implicit(GuidHandle handle);
    public static GuidHandle op_Explicit(Handle handle);
    public bool get_IsNil();
    internal int get_Index();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(GuidHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(GuidHandle left, GuidHandle right);
    public static bool op_Inequality(GuidHandle left, GuidHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Handle : ValueType {
    private int _value;
    private byte _vType;
    public static ModuleDefinitionHandle ModuleDefinition;
    public static AssemblyDefinitionHandle AssemblyDefinition;
    internal int RowId { get; }
    internal int Offset { get; }
    internal UInt32 EntityHandleType { get; }
    internal UInt32 Type { get; }
    internal UInt32 EntityHandleValue { get; }
    internal UInt32 SpecificEntityHandleValue { get; }
    internal byte VType { get; }
    internal bool IsVirtual { get; }
    internal bool IsHeapHandle { get; }
    public HandleKind Kind { get; }
    public bool IsNil { get; }
    internal bool IsEntityOrUserStringHandle { get; }
    internal int Token { get; }
    internal Handle(byte vType, int value);
    private static Handle();
    internal static Handle FromVToken(UInt32 vToken);
    internal int get_RowId();
    internal int get_Offset();
    internal UInt32 get_EntityHandleType();
    internal UInt32 get_Type();
    internal UInt32 get_EntityHandleValue();
    internal UInt32 get_SpecificEntityHandleValue();
    internal byte get_VType();
    internal bool get_IsVirtual();
    internal bool get_IsHeapHandle();
    public HandleKind get_Kind();
    public bool get_IsNil();
    internal bool get_IsEntityOrUserStringHandle();
    internal int get_Token();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Handle other);
    public virtual int GetHashCode();
    public static bool op_Equality(Handle left, Handle right);
    public static bool op_Inequality(Handle left, Handle right);
    internal static int Compare(Handle left, Handle right);
}
internal class System.Reflection.Metadata.HandleComparer : object {
    private static HandleComparer s_default;
    [NullableAttribute("1")]
public static HandleComparer Default { get; }
    private static HandleComparer();
    [NullableContextAttribute("1")]
public static HandleComparer get_Default();
    public sealed virtual bool Equals(Handle x, Handle y);
    public sealed virtual bool Equals(EntityHandle x, EntityHandle y);
    public sealed virtual int GetHashCode(Handle obj);
    public sealed virtual int GetHashCode(EntityHandle obj);
    public sealed virtual int Compare(Handle x, Handle y);
    public sealed virtual int Compare(EntityHandle x, EntityHandle y);
}
internal enum System.Reflection.Metadata.HandleKind : Enum {
    public byte value__;
    public static HandleKind ModuleDefinition;
    public static HandleKind TypeReference;
    public static HandleKind TypeDefinition;
    public static HandleKind FieldDefinition;
    public static HandleKind MethodDefinition;
    public static HandleKind Parameter;
    public static HandleKind InterfaceImplementation;
    public static HandleKind MemberReference;
    public static HandleKind Constant;
    public static HandleKind CustomAttribute;
    public static HandleKind DeclarativeSecurityAttribute;
    public static HandleKind StandaloneSignature;
    public static HandleKind EventDefinition;
    public static HandleKind PropertyDefinition;
    public static HandleKind MethodImplementation;
    public static HandleKind ModuleReference;
    public static HandleKind TypeSpecification;
    public static HandleKind AssemblyDefinition;
    public static HandleKind AssemblyFile;
    public static HandleKind AssemblyReference;
    public static HandleKind ExportedType;
    public static HandleKind GenericParameter;
    public static HandleKind MethodSpecification;
    public static HandleKind GenericParameterConstraint;
    public static HandleKind ManifestResource;
    public static HandleKind Document;
    public static HandleKind MethodDebugInformation;
    public static HandleKind LocalScope;
    public static HandleKind LocalVariable;
    public static HandleKind LocalConstant;
    public static HandleKind ImportScope;
    public static HandleKind CustomDebugInformation;
    public static HandleKind NamespaceDefinition;
    public static HandleKind UserString;
    public static HandleKind String;
    public static HandleKind Blob;
    public static HandleKind Guid;
}
[ExtensionAttribute]
internal static class System.Reflection.Metadata.HandleKindExtensions : object {
    [ExtensionAttribute]
internal static bool IsHeapHandle(HandleKind kind);
}
[NullableContextAttribute("1")]
internal interface System.Reflection.Metadata.IConstructedTypeProvider`1 {
    public abstract virtual TType GetGenericInstantiation(TType genericType, ImmutableArray`1<TType> typeArguments);
    public abstract virtual TType GetArrayType(TType elementType, ArrayShape shape);
    public abstract virtual TType GetByReferenceType(TType elementType);
    public abstract virtual TType GetPointerType(TType elementType);
}
[NullableContextAttribute("1")]
internal interface System.Reflection.Metadata.ICustomAttributeTypeProvider`1 {
    public abstract virtual TType GetSystemType();
    public abstract virtual bool IsSystemType(TType type);
    public abstract virtual TType GetTypeFromSerializedName(string name);
    public abstract virtual PrimitiveTypeCode GetUnderlyingEnumType(TType type);
}
internal enum System.Reflection.Metadata.ILOpCode : Enum {
    public ushort value__;
    public static ILOpCode Nop;
    public static ILOpCode Break;
    public static ILOpCode Ldarg_0;
    public static ILOpCode Ldarg_1;
    public static ILOpCode Ldarg_2;
    public static ILOpCode Ldarg_3;
    public static ILOpCode Ldloc_0;
    public static ILOpCode Ldloc_1;
    public static ILOpCode Ldloc_2;
    public static ILOpCode Ldloc_3;
    public static ILOpCode Stloc_0;
    public static ILOpCode Stloc_1;
    public static ILOpCode Stloc_2;
    public static ILOpCode Stloc_3;
    public static ILOpCode Ldarg_s;
    public static ILOpCode Ldarga_s;
    public static ILOpCode Starg_s;
    public static ILOpCode Ldloc_s;
    public static ILOpCode Ldloca_s;
    public static ILOpCode Stloc_s;
    public static ILOpCode Ldnull;
    public static ILOpCode Ldc_i4_m1;
    public static ILOpCode Ldc_i4_0;
    public static ILOpCode Ldc_i4_1;
    public static ILOpCode Ldc_i4_2;
    public static ILOpCode Ldc_i4_3;
    public static ILOpCode Ldc_i4_4;
    public static ILOpCode Ldc_i4_5;
    public static ILOpCode Ldc_i4_6;
    public static ILOpCode Ldc_i4_7;
    public static ILOpCode Ldc_i4_8;
    public static ILOpCode Ldc_i4_s;
    public static ILOpCode Ldc_i4;
    public static ILOpCode Ldc_i8;
    public static ILOpCode Ldc_r4;
    public static ILOpCode Ldc_r8;
    public static ILOpCode Dup;
    public static ILOpCode Pop;
    public static ILOpCode Jmp;
    public static ILOpCode Call;
    public static ILOpCode Calli;
    public static ILOpCode Ret;
    public static ILOpCode Br_s;
    public static ILOpCode Brfalse_s;
    public static ILOpCode Brtrue_s;
    public static ILOpCode Beq_s;
    public static ILOpCode Bge_s;
    public static ILOpCode Bgt_s;
    public static ILOpCode Ble_s;
    public static ILOpCode Blt_s;
    public static ILOpCode Bne_un_s;
    public static ILOpCode Bge_un_s;
    public static ILOpCode Bgt_un_s;
    public static ILOpCode Ble_un_s;
    public static ILOpCode Blt_un_s;
    public static ILOpCode Br;
    public static ILOpCode Brfalse;
    public static ILOpCode Brtrue;
    public static ILOpCode Beq;
    public static ILOpCode Bge;
    public static ILOpCode Bgt;
    public static ILOpCode Ble;
    public static ILOpCode Blt;
    public static ILOpCode Bne_un;
    public static ILOpCode Bge_un;
    public static ILOpCode Bgt_un;
    public static ILOpCode Ble_un;
    public static ILOpCode Blt_un;
    public static ILOpCode Switch;
    public static ILOpCode Ldind_i1;
    public static ILOpCode Ldind_u1;
    public static ILOpCode Ldind_i2;
    public static ILOpCode Ldind_u2;
    public static ILOpCode Ldind_i4;
    public static ILOpCode Ldind_u4;
    public static ILOpCode Ldind_i8;
    public static ILOpCode Ldind_i;
    public static ILOpCode Ldind_r4;
    public static ILOpCode Ldind_r8;
    public static ILOpCode Ldind_ref;
    public static ILOpCode Stind_ref;
    public static ILOpCode Stind_i1;
    public static ILOpCode Stind_i2;
    public static ILOpCode Stind_i4;
    public static ILOpCode Stind_i8;
    public static ILOpCode Stind_r4;
    public static ILOpCode Stind_r8;
    public static ILOpCode Add;
    public static ILOpCode Sub;
    public static ILOpCode Mul;
    public static ILOpCode Div;
    public static ILOpCode Div_un;
    public static ILOpCode Rem;
    public static ILOpCode Rem_un;
    public static ILOpCode And;
    public static ILOpCode Or;
    public static ILOpCode Xor;
    public static ILOpCode Shl;
    public static ILOpCode Shr;
    public static ILOpCode Shr_un;
    public static ILOpCode Neg;
    public static ILOpCode Not;
    public static ILOpCode Conv_i1;
    public static ILOpCode Conv_i2;
    public static ILOpCode Conv_i4;
    public static ILOpCode Conv_i8;
    public static ILOpCode Conv_r4;
    public static ILOpCode Conv_r8;
    public static ILOpCode Conv_u4;
    public static ILOpCode Conv_u8;
    public static ILOpCode Callvirt;
    public static ILOpCode Cpobj;
    public static ILOpCode Ldobj;
    public static ILOpCode Ldstr;
    public static ILOpCode Newobj;
    public static ILOpCode Castclass;
    public static ILOpCode Isinst;
    public static ILOpCode Conv_r_un;
    public static ILOpCode Unbox;
    public static ILOpCode Throw;
    public static ILOpCode Ldfld;
    public static ILOpCode Ldflda;
    public static ILOpCode Stfld;
    public static ILOpCode Ldsfld;
    public static ILOpCode Ldsflda;
    public static ILOpCode Stsfld;
    public static ILOpCode Stobj;
    public static ILOpCode Conv_ovf_i1_un;
    public static ILOpCode Conv_ovf_i2_un;
    public static ILOpCode Conv_ovf_i4_un;
    public static ILOpCode Conv_ovf_i8_un;
    public static ILOpCode Conv_ovf_u1_un;
    public static ILOpCode Conv_ovf_u2_un;
    public static ILOpCode Conv_ovf_u4_un;
    public static ILOpCode Conv_ovf_u8_un;
    public static ILOpCode Conv_ovf_i_un;
    public static ILOpCode Conv_ovf_u_un;
    public static ILOpCode Box;
    public static ILOpCode Newarr;
    public static ILOpCode Ldlen;
    public static ILOpCode Ldelema;
    public static ILOpCode Ldelem_i1;
    public static ILOpCode Ldelem_u1;
    public static ILOpCode Ldelem_i2;
    public static ILOpCode Ldelem_u2;
    public static ILOpCode Ldelem_i4;
    public static ILOpCode Ldelem_u4;
    public static ILOpCode Ldelem_i8;
    public static ILOpCode Ldelem_i;
    public static ILOpCode Ldelem_r4;
    public static ILOpCode Ldelem_r8;
    public static ILOpCode Ldelem_ref;
    public static ILOpCode Stelem_i;
    public static ILOpCode Stelem_i1;
    public static ILOpCode Stelem_i2;
    public static ILOpCode Stelem_i4;
    public static ILOpCode Stelem_i8;
    public static ILOpCode Stelem_r4;
    public static ILOpCode Stelem_r8;
    public static ILOpCode Stelem_ref;
    public static ILOpCode Ldelem;
    public static ILOpCode Stelem;
    public static ILOpCode Unbox_any;
    public static ILOpCode Conv_ovf_i1;
    public static ILOpCode Conv_ovf_u1;
    public static ILOpCode Conv_ovf_i2;
    public static ILOpCode Conv_ovf_u2;
    public static ILOpCode Conv_ovf_i4;
    public static ILOpCode Conv_ovf_u4;
    public static ILOpCode Conv_ovf_i8;
    public static ILOpCode Conv_ovf_u8;
    public static ILOpCode Refanyval;
    public static ILOpCode Ckfinite;
    public static ILOpCode Mkrefany;
    public static ILOpCode Ldtoken;
    public static ILOpCode Conv_u2;
    public static ILOpCode Conv_u1;
    public static ILOpCode Conv_i;
    public static ILOpCode Conv_ovf_i;
    public static ILOpCode Conv_ovf_u;
    public static ILOpCode Add_ovf;
    public static ILOpCode Add_ovf_un;
    public static ILOpCode Mul_ovf;
    public static ILOpCode Mul_ovf_un;
    public static ILOpCode Sub_ovf;
    public static ILOpCode Sub_ovf_un;
    public static ILOpCode Endfinally;
    public static ILOpCode Leave;
    public static ILOpCode Leave_s;
    public static ILOpCode Stind_i;
    public static ILOpCode Conv_u;
    public static ILOpCode Arglist;
    public static ILOpCode Ceq;
    public static ILOpCode Cgt;
    public static ILOpCode Cgt_un;
    public static ILOpCode Clt;
    public static ILOpCode Clt_un;
    public static ILOpCode Ldftn;
    public static ILOpCode Ldvirtftn;
    public static ILOpCode Ldarg;
    public static ILOpCode Ldarga;
    public static ILOpCode Starg;
    public static ILOpCode Ldloc;
    public static ILOpCode Ldloca;
    public static ILOpCode Stloc;
    public static ILOpCode Localloc;
    public static ILOpCode Endfilter;
    public static ILOpCode Unaligned;
    public static ILOpCode Volatile;
    public static ILOpCode Tail;
    public static ILOpCode Initobj;
    public static ILOpCode Constrained;
    public static ILOpCode Cpblk;
    public static ILOpCode Initblk;
    public static ILOpCode Rethrow;
    public static ILOpCode Sizeof;
    public static ILOpCode Refanytype;
    public static ILOpCode Readonly;
}
[ExtensionAttribute]
internal static class System.Reflection.Metadata.ILOpCodeExtensions : object {
    [ExtensionAttribute]
public static bool IsBranch(ILOpCode opCode);
    [ExtensionAttribute]
public static int GetBranchOperandSize(ILOpCode opCode);
    [ExtensionAttribute]
public static ILOpCode GetShortBranch(ILOpCode opCode);
    [ExtensionAttribute]
public static ILOpCode GetLongBranch(ILOpCode opCode);
}
[NullableAttribute("0")]
[NullableContextAttribute("2")]
internal class System.Reflection.Metadata.ImageFormatLimitationException : Exception {
    public ImageFormatLimitationException(string message);
    public ImageFormatLimitationException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected ImageFormatLimitationException(SerializationInfo info, StreamingContext context);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.ImportDefinition : ValueType {
    [CompilerGeneratedAttribute]
private ImportDefinitionKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private BlobHandle <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyReferenceHandle <TargetAssembly>k__BackingField;
    private Handle _typeOrNamespace;
    public ImportDefinitionKind Kind { get; }
    public BlobHandle Alias { get; }
    public AssemblyReferenceHandle TargetAssembly { get; }
    public BlobHandle TargetNamespace { get; }
    public EntityHandle TargetType { get; }
    internal ImportDefinition(ImportDefinitionKind kind, BlobHandle alias, AssemblyReferenceHandle assembly, Handle typeOrNamespace);
    [CompilerGeneratedAttribute]
public ImportDefinitionKind get_Kind();
    [CompilerGeneratedAttribute]
public BlobHandle get_Alias();
    [CompilerGeneratedAttribute]
public AssemblyReferenceHandle get_TargetAssembly();
    public BlobHandle get_TargetNamespace();
    public EntityHandle get_TargetType();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.ImportDefinitionCollection : ValueType {
    private MemoryBlock _block;
    internal ImportDefinitionCollection(MemoryBlock block);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<ImportDefinition> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.ImportDefinition>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal enum System.Reflection.Metadata.ImportDefinitionKind : Enum {
    public int value__;
    public static ImportDefinitionKind ImportNamespace;
    public static ImportDefinitionKind ImportAssemblyNamespace;
    public static ImportDefinitionKind ImportType;
    public static ImportDefinitionKind ImportXmlNamespace;
    public static ImportDefinitionKind ImportAssemblyReferenceAlias;
    public static ImportDefinitionKind AliasAssemblyReference;
    public static ImportDefinitionKind AliasNamespace;
    public static ImportDefinitionKind AliasAssemblyNamespace;
    public static ImportDefinitionKind AliasType;
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.ImportScope : ValueType {
    private MetadataReader _reader;
    private int _rowId;
    private ImportScopeHandle Handle { get; }
    public ImportScopeHandle Parent { get; }
    public BlobHandle ImportsBlob { get; }
    [NullableContextAttribute("1")]
internal ImportScope(MetadataReader reader, ImportScopeHandle handle);
    private ImportScopeHandle get_Handle();
    public ImportScopeHandle get_Parent();
    public BlobHandle get_ImportsBlob();
    public ImportDefinitionCollection GetImports();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.ImportScopeCollection : ValueType {
    private MetadataReader _reader;
    private int _firstRowId;
    private int _lastRowId;
    public int Count { get; }
    [NullableContextAttribute("1")]
internal ImportScopeCollection(MetadataReader reader);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<ImportScopeHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.ImportScopeHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.ImportScopeHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private ImportScopeHandle(int rowId);
    internal static ImportScopeHandle FromRowId(int rowId);
    public static Handle op_Implicit(ImportScopeHandle handle);
    public static EntityHandle op_Implicit(ImportScopeHandle handle);
    public static ImportScopeHandle op_Explicit(Handle handle);
    public static ImportScopeHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(ImportScopeHandle left, ImportScopeHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ImportScopeHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(ImportScopeHandle left, ImportScopeHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.InterfaceImplementation : ValueType {
    private MetadataReader _reader;
    private int _rowId;
    private InterfaceImplementationHandle Handle { get; }
    public EntityHandle Interface { get; }
    [NullableContextAttribute("1")]
internal InterfaceImplementation(MetadataReader reader, InterfaceImplementationHandle handle);
    private InterfaceImplementationHandle get_Handle();
    public EntityHandle get_Interface();
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.InterfaceImplementationHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    internal InterfaceImplementationHandle(int rowId);
    internal static InterfaceImplementationHandle FromRowId(int rowId);
    public static Handle op_Implicit(InterfaceImplementationHandle handle);
    public static EntityHandle op_Implicit(InterfaceImplementationHandle handle);
    public static InterfaceImplementationHandle op_Explicit(Handle handle);
    public static InterfaceImplementationHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(InterfaceImplementationHandle left, InterfaceImplementationHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(InterfaceImplementationHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(InterfaceImplementationHandle left, InterfaceImplementationHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.InterfaceImplementationHandleCollection : ValueType {
    private MetadataReader _reader;
    private int _firstRowId;
    private int _lastRowId;
    public int Count { get; }
    [NullableContextAttribute("1")]
internal InterfaceImplementationHandleCollection(MetadataReader reader, TypeDefinitionHandle implementingType);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<InterfaceImplementationHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.InterfaceImplementationHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
internal interface System.Reflection.Metadata.ISignatureTypeProvider`2 {
    public abstract virtual TType GetFunctionPointerType(MethodSignature`1<TType> signature);
    public abstract virtual TType GetGenericMethodParameter(TGenericContext genericContext, int index);
    public abstract virtual TType GetGenericTypeParameter(TGenericContext genericContext, int index);
    public abstract virtual TType GetModifiedType(TType modifier, TType unmodifiedType, bool isRequired);
    public abstract virtual TType GetPinnedType(TType elementType);
    public abstract virtual TType GetTypeFromSpecification(MetadataReader reader, TGenericContext genericContext, TypeSpecificationHandle handle, byte rawTypeKind);
}
[NullableContextAttribute("1")]
internal interface System.Reflection.Metadata.ISimpleTypeProvider`1 {
    public abstract virtual TType GetPrimitiveType(PrimitiveTypeCode typeCode);
    public abstract virtual TType GetTypeFromDefinition(MetadataReader reader, TypeDefinitionHandle handle, byte rawTypeKind);
    public abstract virtual TType GetTypeFromReference(MetadataReader reader, TypeReferenceHandle handle, byte rawTypeKind);
}
[NullableContextAttribute("1")]
internal interface System.Reflection.Metadata.ISZArrayTypeProvider`1 {
    public abstract virtual TType GetSZArrayType(TType elementType);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.LocalConstant : ValueType {
    private MetadataReader _reader;
    private int _rowId;
    private LocalConstantHandle Handle { get; }
    public StringHandle Name { get; }
    public BlobHandle Signature { get; }
    [NullableContextAttribute("1")]
internal LocalConstant(MetadataReader reader, LocalConstantHandle handle);
    private LocalConstantHandle get_Handle();
    public StringHandle get_Name();
    public BlobHandle get_Signature();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.LocalConstantHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private LocalConstantHandle(int rowId);
    internal static LocalConstantHandle FromRowId(int rowId);
    public static Handle op_Implicit(LocalConstantHandle handle);
    public static EntityHandle op_Implicit(LocalConstantHandle handle);
    public static LocalConstantHandle op_Explicit(Handle handle);
    public static LocalConstantHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(LocalConstantHandle left, LocalConstantHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(LocalConstantHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(LocalConstantHandle left, LocalConstantHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.LocalConstantHandleCollection : ValueType {
    private MetadataReader _reader;
    private int _firstRowId;
    private int _lastRowId;
    public int Count { get; }
    [NullableContextAttribute("1")]
internal LocalConstantHandleCollection(MetadataReader reader, LocalScopeHandle scope);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<LocalConstantHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.LocalConstantHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.LocalScope : ValueType {
    private MetadataReader _reader;
    private int _rowId;
    private LocalScopeHandle Handle { get; }
    public MethodDefinitionHandle Method { get; }
    public ImportScopeHandle ImportScope { get; }
    public int StartOffset { get; }
    public int Length { get; }
    public int EndOffset { get; }
    [NullableContextAttribute("1")]
internal LocalScope(MetadataReader reader, LocalScopeHandle handle);
    private LocalScopeHandle get_Handle();
    public MethodDefinitionHandle get_Method();
    public ImportScopeHandle get_ImportScope();
    public int get_StartOffset();
    public int get_Length();
    public int get_EndOffset();
    public LocalVariableHandleCollection GetLocalVariables();
    public LocalConstantHandleCollection GetLocalConstants();
    public ChildrenEnumerator GetChildren();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.LocalScopeHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private LocalScopeHandle(int rowId);
    internal static LocalScopeHandle FromRowId(int rowId);
    public static Handle op_Implicit(LocalScopeHandle handle);
    public static EntityHandle op_Implicit(LocalScopeHandle handle);
    public static LocalScopeHandle op_Explicit(Handle handle);
    public static LocalScopeHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(LocalScopeHandle left, LocalScopeHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(LocalScopeHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(LocalScopeHandle left, LocalScopeHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.LocalScopeHandleCollection : ValueType {
    private MetadataReader _reader;
    private int _firstRowId;
    private int _lastRowId;
    public int Count { get; }
    [NullableContextAttribute("1")]
internal LocalScopeHandleCollection(MetadataReader reader, int methodDefinitionRowId);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<LocalScopeHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.LocalScopeHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.LocalVariable : ValueType {
    private MetadataReader _reader;
    private int _rowId;
    private LocalVariableHandle Handle { get; }
    public LocalVariableAttributes Attributes { get; }
    public int Index { get; }
    public StringHandle Name { get; }
    [NullableContextAttribute("1")]
internal LocalVariable(MetadataReader reader, LocalVariableHandle handle);
    private LocalVariableHandle get_Handle();
    public LocalVariableAttributes get_Attributes();
    public int get_Index();
    public StringHandle get_Name();
}
[FlagsAttribute]
internal enum System.Reflection.Metadata.LocalVariableAttributes : Enum {
    public int value__;
    public static LocalVariableAttributes None;
    public static LocalVariableAttributes DebuggerHidden;
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.LocalVariableHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private LocalVariableHandle(int rowId);
    internal static LocalVariableHandle FromRowId(int rowId);
    public static Handle op_Implicit(LocalVariableHandle handle);
    public static EntityHandle op_Implicit(LocalVariableHandle handle);
    public static LocalVariableHandle op_Explicit(Handle handle);
    public static LocalVariableHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(LocalVariableHandle left, LocalVariableHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(LocalVariableHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(LocalVariableHandle left, LocalVariableHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.LocalVariableHandleCollection : ValueType {
    private MetadataReader _reader;
    private int _firstRowId;
    private int _lastRowId;
    public int Count { get; }
    [NullableContextAttribute("1")]
internal LocalVariableHandleCollection(MetadataReader reader, LocalScopeHandle scope);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<LocalVariableHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.LocalVariableHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.ManifestResource : ValueType {
    private MetadataReader _reader;
    private int _rowId;
    private ManifestResourceHandle Handle { get; }
    public long Offset { get; }
    public ManifestResourceAttributes Attributes { get; }
    public StringHandle Name { get; }
    public EntityHandle Implementation { get; }
    [NullableContextAttribute("1")]
internal ManifestResource(MetadataReader reader, ManifestResourceHandle handle);
    private ManifestResourceHandle get_Handle();
    public long get_Offset();
    public ManifestResourceAttributes get_Attributes();
    public StringHandle get_Name();
    public EntityHandle get_Implementation();
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.ManifestResourceHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private ManifestResourceHandle(int rowId);
    internal static ManifestResourceHandle FromRowId(int rowId);
    public static Handle op_Implicit(ManifestResourceHandle handle);
    public static EntityHandle op_Implicit(ManifestResourceHandle handle);
    public static ManifestResourceHandle op_Explicit(Handle handle);
    public static ManifestResourceHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(ManifestResourceHandle left, ManifestResourceHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ManifestResourceHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(ManifestResourceHandle left, ManifestResourceHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.ManifestResourceHandleCollection : ValueType {
    private int _lastRowId;
    public int Count { get; }
    internal ManifestResourceHandleCollection(int lastRowId);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<ManifestResourceHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.ManifestResourceHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[NullableContextAttribute("1")]
internal class System.Reflection.Metadata.MemberReference : ValueType {
    private MetadataReader _reader;
    private UInt32 _treatmentAndRowId;
    private int RowId { get; }
    private MemberRefTreatment Treatment { get; }
    private MemberReferenceHandle Handle { get; }
    public EntityHandle Parent { get; }
    public StringHandle Name { get; }
    public BlobHandle Signature { get; }
    internal MemberReference(MetadataReader reader, UInt32 treatmentAndRowId);
    private int get_RowId();
    private MemberRefTreatment get_Treatment();
    private MemberReferenceHandle get_Handle();
    public EntityHandle get_Parent();
    public StringHandle get_Name();
    public BlobHandle get_Signature();
    public TType DecodeFieldSignature(ISignatureTypeProvider`2<TType, TGenericContext> provider, TGenericContext genericContext);
    public MethodSignature`1<TType> DecodeMethodSignature(ISignatureTypeProvider`2<TType, TGenericContext> provider, TGenericContext genericContext);
    public MemberReferenceKind GetKind();
    public CustomAttributeHandleCollection GetCustomAttributes();
    private EntityHandle GetProjectedParent();
    private StringHandle GetProjectedName();
    private BlobHandle GetProjectedSignature();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.MemberReferenceHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private MemberReferenceHandle(int rowId);
    internal static MemberReferenceHandle FromRowId(int rowId);
    public static Handle op_Implicit(MemberReferenceHandle handle);
    public static EntityHandle op_Implicit(MemberReferenceHandle handle);
    public static MemberReferenceHandle op_Explicit(Handle handle);
    public static MemberReferenceHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(MemberReferenceHandle left, MemberReferenceHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MemberReferenceHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(MemberReferenceHandle left, MemberReferenceHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.MemberReferenceHandleCollection : ValueType {
    private int _lastRowId;
    public int Count { get; }
    internal MemberReferenceHandleCollection(int lastRowId);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<MemberReferenceHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.MemberReferenceHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal enum System.Reflection.Metadata.MemberReferenceKind : Enum {
    public int value__;
    public static MemberReferenceKind Method;
    public static MemberReferenceKind Field;
}
internal enum System.Reflection.Metadata.MetadataKind : Enum {
    public int value__;
    public static MetadataKind Ecma335;
    public static MetadataKind WindowsMetadata;
    public static MetadataKind ManagedWindowsMetadata;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.MetadataReader : object {
    internal NamespaceCache NamespaceCache;
    internal MemoryBlock Block;
    internal int WinMDMscorlibRef;
    private object _memoryOwnerObj;
    private MetadataReaderOptions _options;
    private Dictionary`2<TypeDefinitionHandle, ImmutableArray`1<TypeDefinitionHandle>> _lazyNestedTypesMap;
    private string _versionString;
    private MetadataKind _metadataKind;
    private MetadataStreamKind _metadataStreamKind;
    private DebugMetadataHeader _debugMetadataHeader;
    internal StringHeap StringHeap;
    internal BlobHeap BlobHeap;
    internal GuidHeap GuidHeap;
    internal UserStringHeap UserStringHeap;
    internal bool IsMinimalDelta;
    private TableMask _sortedTables;
    internal Int32[] TableRowCounts;
    internal ModuleTableReader ModuleTable;
    internal TypeRefTableReader TypeRefTable;
    internal TypeDefTableReader TypeDefTable;
    internal FieldPtrTableReader FieldPtrTable;
    internal FieldTableReader FieldTable;
    internal MethodPtrTableReader MethodPtrTable;
    internal MethodTableReader MethodDefTable;
    internal ParamPtrTableReader ParamPtrTable;
    internal ParamTableReader ParamTable;
    internal InterfaceImplTableReader InterfaceImplTable;
    internal MemberRefTableReader MemberRefTable;
    internal ConstantTableReader ConstantTable;
    internal CustomAttributeTableReader CustomAttributeTable;
    internal FieldMarshalTableReader FieldMarshalTable;
    internal DeclSecurityTableReader DeclSecurityTable;
    internal ClassLayoutTableReader ClassLayoutTable;
    internal FieldLayoutTableReader FieldLayoutTable;
    internal StandAloneSigTableReader StandAloneSigTable;
    internal EventMapTableReader EventMapTable;
    internal EventPtrTableReader EventPtrTable;
    internal EventTableReader EventTable;
    internal PropertyMapTableReader PropertyMapTable;
    internal PropertyPtrTableReader PropertyPtrTable;
    internal PropertyTableReader PropertyTable;
    internal MethodSemanticsTableReader MethodSemanticsTable;
    internal MethodImplTableReader MethodImplTable;
    internal ModuleRefTableReader ModuleRefTable;
    internal TypeSpecTableReader TypeSpecTable;
    internal ImplMapTableReader ImplMapTable;
    internal FieldRVATableReader FieldRvaTable;
    internal EnCLogTableReader EncLogTable;
    internal EnCMapTableReader EncMapTable;
    internal AssemblyTableReader AssemblyTable;
    internal AssemblyProcessorTableReader AssemblyProcessorTable;
    internal AssemblyOSTableReader AssemblyOSTable;
    internal AssemblyRefTableReader AssemblyRefTable;
    internal AssemblyRefProcessorTableReader AssemblyRefProcessorTable;
    internal AssemblyRefOSTableReader AssemblyRefOSTable;
    internal FileTableReader FileTable;
    internal ExportedTypeTableReader ExportedTypeTable;
    internal ManifestResourceTableReader ManifestResourceTable;
    internal NestedClassTableReader NestedClassTable;
    internal GenericParamTableReader GenericParamTable;
    internal MethodSpecTableReader MethodSpecTable;
    internal GenericParamConstraintTableReader GenericParamConstraintTable;
    internal DocumentTableReader DocumentTable;
    internal MethodDebugInformationTableReader MethodDebugInformationTable;
    internal LocalScopeTableReader LocalScopeTable;
    internal LocalVariableTableReader LocalVariableTable;
    internal LocalConstantTableReader LocalConstantTable;
    internal ImportScopeTableReader ImportScopeTable;
    internal StateMachineMethodTableReader StateMachineMethodTable;
    internal CustomDebugInformationTableReader CustomDebugInformationTable;
    private static int SmallIndexSize;
    private static int LargeIndexSize;
    [CompilerGeneratedAttribute]
private MetadataStringDecoder <UTF8Decoder>k__BackingField;
    internal static string ClrPrefix;
    internal static Byte[] WinRTPrefix;
    private static String[] s_projectedTypeNames;
    private static ProjectionInfo[] s_projectionInfos;
    internal bool UseFieldPtrTable { get; }
    internal bool UseMethodPtrTable { get; }
    internal bool UseParamPtrTable { get; }
    internal bool UseEventPtrTable { get; }
    internal bool UsePropertyPtrTable { get; }
    [NullableAttribute("0")]
public Byte* MetadataPointer { get; }
    public int MetadataLength { get; }
    public MetadataReaderOptions Options { get; }
    public string MetadataVersion { get; }
    [NullableAttribute("2")]
public DebugMetadataHeader DebugMetadataHeader { get; }
    public MetadataKind MetadataKind { get; }
    public MetadataStringComparer StringComparer { get; }
    public MetadataStringDecoder UTF8Decoder { get; }
    public bool IsAssembly { get; }
    public AssemblyReferenceHandleCollection AssemblyReferences { get; }
    public TypeDefinitionHandleCollection TypeDefinitions { get; }
    public TypeReferenceHandleCollection TypeReferences { get; }
    public CustomAttributeHandleCollection CustomAttributes { get; }
    public DeclarativeSecurityAttributeHandleCollection DeclarativeSecurityAttributes { get; }
    public MemberReferenceHandleCollection MemberReferences { get; }
    public ManifestResourceHandleCollection ManifestResources { get; }
    public AssemblyFileHandleCollection AssemblyFiles { get; }
    public ExportedTypeHandleCollection ExportedTypes { get; }
    public MethodDefinitionHandleCollection MethodDefinitions { get; }
    public FieldDefinitionHandleCollection FieldDefinitions { get; }
    public EventDefinitionHandleCollection EventDefinitions { get; }
    public PropertyDefinitionHandleCollection PropertyDefinitions { get; }
    public DocumentHandleCollection Documents { get; }
    public MethodDebugInformationHandleCollection MethodDebugInformation { get; }
    public LocalScopeHandleCollection LocalScopes { get; }
    public LocalVariableHandleCollection LocalVariables { get; }
    public LocalConstantHandleCollection LocalConstants { get; }
    public ImportScopeCollection ImportScopes { get; }
    public CustomDebugInformationHandleCollection CustomDebugInformation { get; }
    [NullableContextAttribute("0")]
public MetadataReader(Byte* metadata, int length);
    [NullableContextAttribute("0")]
public MetadataReader(Byte* metadata, int length, MetadataReaderOptions options);
    [NullableContextAttribute("0")]
public MetadataReader(Byte* metadata, int length, MetadataReaderOptions options, MetadataStringDecoder utf8Decoder);
    [NullableContextAttribute("2")]
internal MetadataReader(Byte* metadata, int length, MetadataReaderOptions options, MetadataStringDecoder utf8Decoder, object memoryOwner);
    private static MetadataReader();
    internal AssemblyName GetAssemblyName(StringHandle nameHandle, Version version, StringHandle cultureHandle, BlobHandle publicKeyOrTokenHandle, AssemblyHashAlgorithm assemblyHashAlgorithm, AssemblyFlags flags);
    public static AssemblyName GetAssemblyName(string assemblyFile);
    private static AssemblyNameFlags GetAssemblyNameFlags(AssemblyFlags flags);
    private static AssemblyContentType GetContentTypeFromAssemblyFlags(AssemblyFlags flags);
    private void ReadMetadataHeader(BlobReader& memReader, String& versionString);
    private MetadataKind GetMetadataKind(string versionString);
    private static StreamHeader[] ReadStreamHeaders(BlobReader& memReader);
    private void InitializeStreamReaders(MemoryBlock& metadataRoot, StreamHeader[] streamHeaders, MetadataStreamKind& metadataStreamKind, MemoryBlock& metadataTableStream, MemoryBlock& standalonePdbStream);
    private void ReadMetadataTableHeader(BlobReader& reader, HeapSizes& heapSizes, Int32[]& metadataTableRowCounts, TableMask& sortedTables);
    private static Int32[] ReadMetadataTableRowCounts(BlobReader& memReader, ulong presentTableMask);
    internal static void ReadStandalonePortablePdbStream(MemoryBlock pdbStreamBlock, int pdbStreamOffset, DebugMetadataHeader& debugMetadataHeader, Int32[]& externalTableRowCounts);
    private int GetReferenceSize(Int32[] rowCounts, TableIndex index);
    private void InitializeTableReaders(MemoryBlock metadataTablesMemoryBlock, HeapSizes heapSizes, Int32[] rowCounts, Int32[] externalRowCountsOpt);
    private static Int32[] CombineRowCounts(Int32[] local, Int32[] external, TableIndex firstLocalTableIndex);
    private int ComputeCodedTokenSize(int largeRowSize, Int32[] rowCounts, TableMask tablesReferenced);
    private bool IsDeclaredSorted(TableMask index);
    internal bool get_UseFieldPtrTable();
    internal bool get_UseMethodPtrTable();
    internal bool get_UseParamPtrTable();
    internal bool get_UseEventPtrTable();
    internal bool get_UsePropertyPtrTable();
    internal void GetFieldRange(TypeDefinitionHandle typeDef, Int32& firstFieldRowId, Int32& lastFieldRowId);
    internal void GetMethodRange(TypeDefinitionHandle typeDef, Int32& firstMethodRowId, Int32& lastMethodRowId);
    internal void GetEventRange(TypeDefinitionHandle typeDef, Int32& firstEventRowId, Int32& lastEventRowId);
    internal void GetPropertyRange(TypeDefinitionHandle typeDef, Int32& firstPropertyRowId, Int32& lastPropertyRowId);
    internal void GetParameterRange(MethodDefinitionHandle methodDef, Int32& firstParamRowId, Int32& lastParamRowId);
    internal void GetLocalVariableRange(LocalScopeHandle scope, Int32& firstVariableRowId, Int32& lastVariableRowId);
    internal void GetLocalConstantRange(LocalScopeHandle scope, Int32& firstConstantRowId, Int32& lastConstantRowId);
    [NullableContextAttribute("0")]
public Byte* get_MetadataPointer();
    public int get_MetadataLength();
    public MetadataReaderOptions get_Options();
    public string get_MetadataVersion();
    [NullableContextAttribute("2")]
public DebugMetadataHeader get_DebugMetadataHeader();
    public MetadataKind get_MetadataKind();
    public MetadataStringComparer get_StringComparer();
    [CompilerGeneratedAttribute]
public MetadataStringDecoder get_UTF8Decoder();
    public bool get_IsAssembly();
    public AssemblyReferenceHandleCollection get_AssemblyReferences();
    public TypeDefinitionHandleCollection get_TypeDefinitions();
    public TypeReferenceHandleCollection get_TypeReferences();
    public CustomAttributeHandleCollection get_CustomAttributes();
    public DeclarativeSecurityAttributeHandleCollection get_DeclarativeSecurityAttributes();
    public MemberReferenceHandleCollection get_MemberReferences();
    public ManifestResourceHandleCollection get_ManifestResources();
    public AssemblyFileHandleCollection get_AssemblyFiles();
    public ExportedTypeHandleCollection get_ExportedTypes();
    public MethodDefinitionHandleCollection get_MethodDefinitions();
    public FieldDefinitionHandleCollection get_FieldDefinitions();
    public EventDefinitionHandleCollection get_EventDefinitions();
    public PropertyDefinitionHandleCollection get_PropertyDefinitions();
    public DocumentHandleCollection get_Documents();
    public MethodDebugInformationHandleCollection get_MethodDebugInformation();
    public LocalScopeHandleCollection get_LocalScopes();
    public LocalVariableHandleCollection get_LocalVariables();
    public LocalConstantHandleCollection get_LocalConstants();
    public ImportScopeCollection get_ImportScopes();
    public CustomDebugInformationHandleCollection get_CustomDebugInformation();
    public AssemblyDefinition GetAssemblyDefinition();
    public string GetString(StringHandle handle);
    public string GetString(NamespaceDefinitionHandle handle);
    public Byte[] GetBlobBytes(BlobHandle handle);
    [NullableContextAttribute("0")]
public ImmutableArray`1<byte> GetBlobContent(BlobHandle handle);
    public BlobReader GetBlobReader(BlobHandle handle);
    public BlobReader GetBlobReader(StringHandle handle);
    public string GetUserString(UserStringHandle handle);
    public Guid GetGuid(GuidHandle handle);
    public ModuleDefinition GetModuleDefinition();
    public AssemblyReference GetAssemblyReference(AssemblyReferenceHandle handle);
    public TypeDefinition GetTypeDefinition(TypeDefinitionHandle handle);
    public NamespaceDefinition GetNamespaceDefinitionRoot();
    public NamespaceDefinition GetNamespaceDefinition(NamespaceDefinitionHandle handle);
    private UInt32 GetTypeDefTreatmentAndRowId(TypeDefinitionHandle handle);
    public TypeReference GetTypeReference(TypeReferenceHandle handle);
    private UInt32 GetTypeRefTreatmentAndRowId(TypeReferenceHandle handle);
    public ExportedType GetExportedType(ExportedTypeHandle handle);
    public CustomAttributeHandleCollection GetCustomAttributes(EntityHandle handle);
    public CustomAttribute GetCustomAttribute(CustomAttributeHandle handle);
    private UInt32 GetCustomAttributeTreatmentAndRowId(CustomAttributeHandle handle);
    public DeclarativeSecurityAttribute GetDeclarativeSecurityAttribute(DeclarativeSecurityAttributeHandle handle);
    public Constant GetConstant(ConstantHandle handle);
    public MethodDefinition GetMethodDefinition(MethodDefinitionHandle handle);
    private UInt32 GetMethodDefTreatmentAndRowId(MethodDefinitionHandle handle);
    public FieldDefinition GetFieldDefinition(FieldDefinitionHandle handle);
    private UInt32 GetFieldDefTreatmentAndRowId(FieldDefinitionHandle handle);
    public PropertyDefinition GetPropertyDefinition(PropertyDefinitionHandle handle);
    public EventDefinition GetEventDefinition(EventDefinitionHandle handle);
    public MethodImplementation GetMethodImplementation(MethodImplementationHandle handle);
    public MemberReference GetMemberReference(MemberReferenceHandle handle);
    private UInt32 GetMemberRefTreatmentAndRowId(MemberReferenceHandle handle);
    public MethodSpecification GetMethodSpecification(MethodSpecificationHandle handle);
    public Parameter GetParameter(ParameterHandle handle);
    public GenericParameter GetGenericParameter(GenericParameterHandle handle);
    public GenericParameterConstraint GetGenericParameterConstraint(GenericParameterConstraintHandle handle);
    public ManifestResource GetManifestResource(ManifestResourceHandle handle);
    public AssemblyFile GetAssemblyFile(AssemblyFileHandle handle);
    public StandaloneSignature GetStandaloneSignature(StandaloneSignatureHandle handle);
    public TypeSpecification GetTypeSpecification(TypeSpecificationHandle handle);
    public ModuleReference GetModuleReference(ModuleReferenceHandle handle);
    public InterfaceImplementation GetInterfaceImplementation(InterfaceImplementationHandle handle);
    internal TypeDefinitionHandle GetDeclaringType(MethodDefinitionHandle methodDef);
    internal TypeDefinitionHandle GetDeclaringType(FieldDefinitionHandle fieldDef);
    public string GetString(DocumentNameBlobHandle handle);
    public Document GetDocument(DocumentHandle handle);
    public MethodDebugInformation GetMethodDebugInformation(MethodDebugInformationHandle handle);
    public MethodDebugInformation GetMethodDebugInformation(MethodDefinitionHandle handle);
    public LocalScope GetLocalScope(LocalScopeHandle handle);
    public LocalVariable GetLocalVariable(LocalVariableHandle handle);
    public LocalConstant GetLocalConstant(LocalConstantHandle handle);
    public ImportScope GetImportScope(ImportScopeHandle handle);
    public CustomDebugInformation GetCustomDebugInformation(CustomDebugInformationHandle handle);
    public CustomDebugInformationHandleCollection GetCustomDebugInformation(EntityHandle handle);
    public LocalScopeHandleCollection GetLocalScopes(MethodDefinitionHandle handle);
    public LocalScopeHandleCollection GetLocalScopes(MethodDebugInformationHandle handle);
    private void InitializeNestedTypesMap();
    [NullableContextAttribute("0")]
internal ImmutableArray`1<TypeDefinitionHandle> GetNestedTypes(TypeDefinitionHandle typeDef);
    private TypeDefTreatment GetWellKnownTypeDefinitionTreatment(TypeDefinitionHandle typeDef);
    private int GetProjectionIndexForTypeReference(TypeReferenceHandle typeRef, Boolean& isIDisposable);
    internal static AssemblyReferenceHandle GetProjectedAssemblyRef(int projectionIndex);
    internal static StringHandle GetProjectedName(int projectionIndex);
    internal static StringHandle GetProjectedNamespace(int projectionIndex);
    internal static TypeRefSignatureTreatment GetProjectedSignatureTreatment(int projectionIndex);
    private static void InitializeProjectedTypes();
    [ConditionalAttribute("DEBUG")]
private static void AssertSorted(String[] keys);
    internal static String[] GetProjectedTypeNames();
    private static UInt32 TreatmentAndRowId(byte treatment, int rowId);
    internal UInt32 CalculateTypeDefTreatmentAndRowId(TypeDefinitionHandle handle);
    private bool IsClrImplementationType(TypeDefinitionHandle typeDef);
    internal UInt32 CalculateTypeRefTreatmentAndRowId(TypeReferenceHandle handle);
    private TypeRefTreatment GetSpecialTypeRefTreatment(TypeReferenceHandle handle);
    private bool IsSystemAttribute(TypeReferenceHandle handle);
    private bool NeedsWinRTPrefix(TypeAttributes flags, EntityHandle extends);
    private UInt32 CalculateMethodDefTreatmentAndRowId(MethodDefinitionHandle methodDef);
    private MethodDefTreatment GetMethodTreatmentFromCustomAttributes(MethodDefinitionHandle methodDef);
    private UInt32 CalculateFieldDefTreatmentAndRowId(FieldDefinitionHandle handle);
    private UInt32 CalculateMemberRefTreatmentAndRowId(MemberReferenceHandle handle);
    private bool ImplementsRedirectedInterface(MemberReferenceHandle memberRef, Boolean& isIDisposable);
    private int FindMscorlibAssemblyRefNoProjection();
    internal CustomAttributeValueTreatment CalculateCustomAttributeValueTreatment(CustomAttributeHandle handle);
    private bool IsWindowsAttributeUsageAttribute(EntityHandle targetType, CustomAttributeHandle attributeHandle);
    private bool HasAttribute(EntityHandle token, string asciiNamespaceName, string asciiTypeName);
    private bool GetAttributeTypeNameRaw(CustomAttributeHandle caHandle, StringHandle& namespaceName, StringHandle& typeName);
    private EntityHandle GetAttributeTypeRaw(CustomAttributeHandle handle);
}
[FlagsAttribute]
internal enum System.Reflection.Metadata.MetadataReaderOptions : Enum {
    public int value__;
    public static MetadataReaderOptions None;
    public static MetadataReaderOptions Default;
    public static MetadataReaderOptions ApplyWindowsRuntimeProjections;
}
internal class System.Reflection.Metadata.MetadataReaderProvider : object {
    private MemoryBlockProvider _blockProviderOpt;
    private AbstractMemoryBlock _lazyMetadataBlock;
    private MetadataReader _lazyMetadataReader;
    private object _metadataReaderGuard;
    [NullableContextAttribute("1")]
internal MetadataReaderProvider(AbstractMemoryBlock metadataBlock);
    private MetadataReaderProvider(MemoryBlockProvider blockProvider);
    public static MetadataReaderProvider FromPortablePdbImage(Byte* start, int size);
    public static MetadataReaderProvider FromMetadataImage(Byte* start, int size);
    public static MetadataReaderProvider FromPortablePdbImage(ImmutableArray`1<byte> image);
    public static MetadataReaderProvider FromMetadataImage(ImmutableArray`1<byte> image);
    [NullableContextAttribute("1")]
public static MetadataReaderProvider FromPortablePdbStream(Stream stream, MetadataStreamOptions options, int size);
    [NullableContextAttribute("1")]
public static MetadataReaderProvider FromMetadataStream(Stream stream, MetadataStreamOptions options, int size);
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public MetadataReader GetMetadataReader(MetadataReaderOptions options, MetadataStringDecoder utf8Decoder);
    private static bool CanReuseReader(MetadataReader reader, MetadataReaderOptions options, MetadataStringDecoder utf8DecoderOpt);
    [NullableContextAttribute("1")]
internal AbstractMemoryBlock GetMetadataBlock();
}
[FlagsAttribute]
internal enum System.Reflection.Metadata.MetadataStreamOptions : Enum {
    public int value__;
    public static MetadataStreamOptions Default;
    public static MetadataStreamOptions LeaveOpen;
    public static MetadataStreamOptions PrefetchMetadata;
}
[ExtensionAttribute]
internal static class System.Reflection.Metadata.MetadataStreamOptionsExtensions : object {
    [ExtensionAttribute]
public static bool IsValid(MetadataStreamOptions options);
}
[IsReadOnlyAttribute]
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.MetadataStringComparer : ValueType {
    private MetadataReader _reader;
    internal MetadataStringComparer(MetadataReader reader);
    public bool Equals(StringHandle handle, string value);
    public bool Equals(StringHandle handle, string value, bool ignoreCase);
    public bool Equals(NamespaceDefinitionHandle handle, string value);
    public bool Equals(NamespaceDefinitionHandle handle, string value, bool ignoreCase);
    public bool Equals(DocumentNameBlobHandle handle, string value);
    public bool Equals(DocumentNameBlobHandle handle, string value, bool ignoreCase);
    public bool StartsWith(StringHandle handle, string value);
    public bool StartsWith(StringHandle handle, string value, bool ignoreCase);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class System.Reflection.Metadata.MetadataStringDecoder : object {
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private static MetadataStringDecoder <DefaultUTF8>k__BackingField;
    public Encoding Encoding { get; }
    public static MetadataStringDecoder DefaultUTF8 { get; }
    public MetadataStringDecoder(Encoding encoding);
    private static MetadataStringDecoder();
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public static MetadataStringDecoder get_DefaultUTF8();
    [NullableContextAttribute("0")]
public virtual string GetString(Byte* bytes, int byteCount);
}
internal class System.Reflection.Metadata.MethodBodyBlock : object {
    private MemoryBlock _il;
    private int _size;
    private ushort _maxStack;
    private bool _localVariablesInitialized;
    private StandaloneSignatureHandle _localSignature;
    private ImmutableArray`1<ExceptionRegion> _exceptionRegions;
    private static byte ILTinyFormat;
    private static byte ILFatFormat;
    private static byte ILFormatMask;
    private static int ILTinyFormatSizeShift;
    private static byte ILMoreSects;
    private static byte ILInitLocals;
    private static byte ILFatFormatHeaderSize;
    private static int ILFatFormatHeaderSizeShift;
    private static byte SectEHTable;
    private static byte SectFatFormat;
    public int Size { get; }
    public int MaxStack { get; }
    public bool LocalVariablesInitialized { get; }
    public StandaloneSignatureHandle LocalSignature { get; }
    public ImmutableArray`1<ExceptionRegion> ExceptionRegions { get; }
    private MethodBodyBlock(bool localVariablesInitialized, ushort maxStack, StandaloneSignatureHandle localSignatureHandle, MemoryBlock il, ImmutableArray`1<ExceptionRegion> exceptionRegions, int size);
    public int get_Size();
    public int get_MaxStack();
    public bool get_LocalVariablesInitialized();
    public StandaloneSignatureHandle get_LocalSignature();
    public ImmutableArray`1<ExceptionRegion> get_ExceptionRegions();
    [NullableContextAttribute("2")]
public Byte[] GetILBytes();
    public ImmutableArray`1<byte> GetILContent();
    public BlobReader GetILReader();
    [NullableContextAttribute("1")]
public static MethodBodyBlock Create(BlobReader reader);
    private static ImmutableArray`1<ExceptionRegion> ReadSmallExceptionHandlers(BlobReader& memReader, int count);
    private static ImmutableArray`1<ExceptionRegion> ReadFatExceptionHandlers(BlobReader& memReader, int count);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.MethodDebugInformation : ValueType {
    private MetadataReader _reader;
    private int _rowId;
    private MethodDebugInformationHandle Handle { get; }
    public BlobHandle SequencePointsBlob { get; }
    public DocumentHandle Document { get; }
    public StandaloneSignatureHandle LocalSignature { get; }
    [NullableContextAttribute("1")]
internal MethodDebugInformation(MetadataReader reader, MethodDebugInformationHandle handle);
    private MethodDebugInformationHandle get_Handle();
    public BlobHandle get_SequencePointsBlob();
    public DocumentHandle get_Document();
    public StandaloneSignatureHandle get_LocalSignature();
    public SequencePointCollection GetSequencePoints();
    public MethodDefinitionHandle GetStateMachineKickoffMethod();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.MethodDebugInformationHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private MethodDebugInformationHandle(int rowId);
    internal static MethodDebugInformationHandle FromRowId(int rowId);
    public static Handle op_Implicit(MethodDebugInformationHandle handle);
    public static EntityHandle op_Implicit(MethodDebugInformationHandle handle);
    public static MethodDebugInformationHandle op_Explicit(Handle handle);
    public static MethodDebugInformationHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(MethodDebugInformationHandle left, MethodDebugInformationHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MethodDebugInformationHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(MethodDebugInformationHandle left, MethodDebugInformationHandle right);
    public MethodDefinitionHandle ToDefinitionHandle();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.MethodDebugInformationHandleCollection : ValueType {
    private MetadataReader _reader;
    private int _firstRowId;
    private int _lastRowId;
    public int Count { get; }
    [NullableContextAttribute("1")]
internal MethodDebugInformationHandleCollection(MetadataReader reader);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<MethodDebugInformationHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.MethodDebugInformationHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.MethodDefinition : ValueType {
    private MetadataReader _reader;
    private UInt32 _treatmentAndRowId;
    private int RowId { get; }
    private MethodDefTreatment Treatment { get; }
    private MethodDefinitionHandle Handle { get; }
    public StringHandle Name { get; }
    public BlobHandle Signature { get; }
    public int RelativeVirtualAddress { get; }
    public MethodAttributes Attributes { get; }
    public MethodImplAttributes ImplAttributes { get; }
    internal MethodDefinition(MetadataReader reader, UInt32 treatmentAndRowId);
    private int get_RowId();
    private MethodDefTreatment get_Treatment();
    private MethodDefinitionHandle get_Handle();
    public StringHandle get_Name();
    public BlobHandle get_Signature();
    public MethodSignature`1<TType> DecodeSignature(ISignatureTypeProvider`2<TType, TGenericContext> provider, TGenericContext genericContext);
    public int get_RelativeVirtualAddress();
    public MethodAttributes get_Attributes();
    public MethodImplAttributes get_ImplAttributes();
    public TypeDefinitionHandle GetDeclaringType();
    public ParameterHandleCollection GetParameters();
    public GenericParameterHandleCollection GetGenericParameters();
    public MethodImport GetImport();
    public CustomAttributeHandleCollection GetCustomAttributes();
    public DeclarativeSecurityAttributeHandleCollection GetDeclarativeSecurityAttributes();
    private StringHandle GetProjectedName();
    private MethodAttributes GetProjectedFlags();
    private MethodImplAttributes GetProjectedImplFlags();
    private BlobHandle GetProjectedSignature();
    private static int GetProjectedRelativeVirtualAddress();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.MethodDefinitionHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private MethodDefinitionHandle(int rowId);
    internal static MethodDefinitionHandle FromRowId(int rowId);
    public static Handle op_Implicit(MethodDefinitionHandle handle);
    public static EntityHandle op_Implicit(MethodDefinitionHandle handle);
    public static MethodDefinitionHandle op_Explicit(Handle handle);
    public static MethodDefinitionHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(MethodDefinitionHandle left, MethodDefinitionHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MethodDefinitionHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(MethodDefinitionHandle left, MethodDefinitionHandle right);
    public MethodDebugInformationHandle ToDebugInformationHandle();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.MethodDefinitionHandleCollection : ValueType {
    private MetadataReader _reader;
    private int _firstRowId;
    private int _lastRowId;
    public int Count { get; }
    [NullableContextAttribute("1")]
internal MethodDefinitionHandleCollection(MetadataReader reader);
    [NullableContextAttribute("1")]
internal MethodDefinitionHandleCollection(MetadataReader reader, TypeDefinitionHandle containingType);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<MethodDefinitionHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.MethodDefinitionHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.MethodImplementation : ValueType {
    private MetadataReader _reader;
    private int _rowId;
    private MethodImplementationHandle Handle { get; }
    public TypeDefinitionHandle Type { get; }
    public EntityHandle MethodBody { get; }
    public EntityHandle MethodDeclaration { get; }
    [NullableContextAttribute("1")]
internal MethodImplementation(MetadataReader reader, MethodImplementationHandle handle);
    private MethodImplementationHandle get_Handle();
    public TypeDefinitionHandle get_Type();
    public EntityHandle get_MethodBody();
    public EntityHandle get_MethodDeclaration();
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.MethodImplementationHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private MethodImplementationHandle(int rowId);
    internal static MethodImplementationHandle FromRowId(int rowId);
    public static Handle op_Implicit(MethodImplementationHandle handle);
    public static EntityHandle op_Implicit(MethodImplementationHandle handle);
    public static MethodImplementationHandle op_Explicit(Handle handle);
    public static MethodImplementationHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(MethodImplementationHandle left, MethodImplementationHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MethodImplementationHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(MethodImplementationHandle left, MethodImplementationHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.MethodImplementationHandleCollection : ValueType {
    private int _firstRowId;
    private int _lastRowId;
    public int Count { get; }
    [NullableContextAttribute("1")]
internal MethodImplementationHandleCollection(MetadataReader reader, TypeDefinitionHandle containingType);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<MethodImplementationHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.MethodImplementationHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.MethodImport : ValueType {
    private MethodImportAttributes _attributes;
    private StringHandle _name;
    private ModuleReferenceHandle _module;
    public MethodImportAttributes Attributes { get; }
    public StringHandle Name { get; }
    public ModuleReferenceHandle Module { get; }
    internal MethodImport(MethodImportAttributes attributes, StringHandle name, ModuleReferenceHandle module);
    public MethodImportAttributes get_Attributes();
    public StringHandle get_Name();
    public ModuleReferenceHandle get_Module();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.MethodSignature`1 : ValueType {
    [CompilerGeneratedAttribute]
private SignatureHeader <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private TType <ReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RequiredParameterCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GenericParameterCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<TType> <ParameterTypes>k__BackingField;
    public SignatureHeader Header { get; }
    public TType ReturnType { get; }
    public int RequiredParameterCount { get; }
    public int GenericParameterCount { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<TType> ParameterTypes { get; }
    public MethodSignature`1(SignatureHeader header, TType returnType, int requiredParameterCount, int genericParameterCount, ImmutableArray`1<TType> parameterTypes);
    [CompilerGeneratedAttribute]
public SignatureHeader get_Header();
    [CompilerGeneratedAttribute]
public TType get_ReturnType();
    [CompilerGeneratedAttribute]
public int get_RequiredParameterCount();
    [CompilerGeneratedAttribute]
public int get_GenericParameterCount();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<TType> get_ParameterTypes();
}
[IsReadOnlyAttribute]
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class System.Reflection.Metadata.MethodSpecification : ValueType {
    private MetadataReader _reader;
    private int _rowId;
    private MethodSpecificationHandle Handle { get; }
    public EntityHandle Method { get; }
    public BlobHandle Signature { get; }
    internal MethodSpecification(MetadataReader reader, MethodSpecificationHandle handle);
    private MethodSpecificationHandle get_Handle();
    public EntityHandle get_Method();
    public BlobHandle get_Signature();
    public ImmutableArray`1<TType> DecodeSignature(ISignatureTypeProvider`2<TType, TGenericContext> provider, TGenericContext genericContext);
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.MethodSpecificationHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private MethodSpecificationHandle(int rowId);
    internal static MethodSpecificationHandle FromRowId(int rowId);
    public static Handle op_Implicit(MethodSpecificationHandle handle);
    public static EntityHandle op_Implicit(MethodSpecificationHandle handle);
    public static MethodSpecificationHandle op_Explicit(Handle handle);
    public static MethodSpecificationHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(MethodSpecificationHandle left, MethodSpecificationHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MethodSpecificationHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(MethodSpecificationHandle left, MethodSpecificationHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.ModuleDefinition : ValueType {
    private MetadataReader _reader;
    public int Generation { get; }
    public StringHandle Name { get; }
    public GuidHandle Mvid { get; }
    public GuidHandle GenerationId { get; }
    public GuidHandle BaseGenerationId { get; }
    [NullableContextAttribute("1")]
internal ModuleDefinition(MetadataReader reader);
    public int get_Generation();
    public StringHandle get_Name();
    public GuidHandle get_Mvid();
    public GuidHandle get_GenerationId();
    public GuidHandle get_BaseGenerationId();
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.ModuleDefinitionHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    internal ModuleDefinitionHandle(int rowId);
    internal static ModuleDefinitionHandle FromRowId(int rowId);
    public static Handle op_Implicit(ModuleDefinitionHandle handle);
    public static EntityHandle op_Implicit(ModuleDefinitionHandle handle);
    public static ModuleDefinitionHandle op_Explicit(Handle handle);
    public static ModuleDefinitionHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(ModuleDefinitionHandle left, ModuleDefinitionHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ModuleDefinitionHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(ModuleDefinitionHandle left, ModuleDefinitionHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.ModuleReference : ValueType {
    private MetadataReader _reader;
    private int _rowId;
    private ModuleReferenceHandle Handle { get; }
    public StringHandle Name { get; }
    [NullableContextAttribute("1")]
internal ModuleReference(MetadataReader reader, ModuleReferenceHandle handle);
    private ModuleReferenceHandle get_Handle();
    public StringHandle get_Name();
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.ModuleReferenceHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private ModuleReferenceHandle(int rowId);
    internal static ModuleReferenceHandle FromRowId(int rowId);
    public static Handle op_Implicit(ModuleReferenceHandle handle);
    public static EntityHandle op_Implicit(ModuleReferenceHandle handle);
    public static ModuleReferenceHandle op_Explicit(Handle handle);
    public static ModuleReferenceHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(ModuleReferenceHandle left, ModuleReferenceHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ModuleReferenceHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(ModuleReferenceHandle left, ModuleReferenceHandle right);
}
internal class System.Reflection.Metadata.NamespaceDefinition : ValueType {
    private NamespaceData _data;
    public StringHandle Name { get; }
    public NamespaceDefinitionHandle Parent { get; }
    public ImmutableArray`1<NamespaceDefinitionHandle> NamespaceDefinitions { get; }
    public ImmutableArray`1<TypeDefinitionHandle> TypeDefinitions { get; }
    public ImmutableArray`1<ExportedTypeHandle> ExportedTypes { get; }
    [NullableContextAttribute("1")]
internal NamespaceDefinition(NamespaceData data);
    public StringHandle get_Name();
    public NamespaceDefinitionHandle get_Parent();
    public ImmutableArray`1<NamespaceDefinitionHandle> get_NamespaceDefinitions();
    public ImmutableArray`1<TypeDefinitionHandle> get_TypeDefinitions();
    public ImmutableArray`1<ExportedTypeHandle> get_ExportedTypes();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.NamespaceDefinitionHandle : ValueType {
    private UInt32 _value;
    public bool IsNil { get; }
    internal bool IsVirtual { get; }
    internal bool HasFullName { get; }
    private NamespaceDefinitionHandle(UInt32 value);
    internal static NamespaceDefinitionHandle FromFullNameOffset(int stringHeapOffset);
    internal static NamespaceDefinitionHandle FromVirtualIndex(UInt32 virtualIndex);
    public static Handle op_Implicit(NamespaceDefinitionHandle handle);
    public static NamespaceDefinitionHandle op_Explicit(Handle handle);
    public bool get_IsNil();
    internal bool get_IsVirtual();
    internal int GetHeapOffset();
    internal bool get_HasFullName();
    internal StringHandle GetFullName();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(NamespaceDefinitionHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(NamespaceDefinitionHandle left, NamespaceDefinitionHandle right);
    public static bool op_Inequality(NamespaceDefinitionHandle left, NamespaceDefinitionHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.Parameter : ValueType {
    private MetadataReader _reader;
    private int _rowId;
    private ParameterHandle Handle { get; }
    public ParameterAttributes Attributes { get; }
    public int SequenceNumber { get; }
    public StringHandle Name { get; }
    [NullableContextAttribute("1")]
internal Parameter(MetadataReader reader, ParameterHandle handle);
    private ParameterHandle get_Handle();
    public ParameterAttributes get_Attributes();
    public int get_SequenceNumber();
    public StringHandle get_Name();
    public ConstantHandle GetDefaultValue();
    public BlobHandle GetMarshallingDescriptor();
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.ParameterHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private ParameterHandle(int rowId);
    internal static ParameterHandle FromRowId(int rowId);
    public static Handle op_Implicit(ParameterHandle handle);
    public static EntityHandle op_Implicit(ParameterHandle handle);
    public static ParameterHandle op_Explicit(Handle handle);
    public static ParameterHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(ParameterHandle left, ParameterHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ParameterHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(ParameterHandle left, ParameterHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.ParameterHandleCollection : ValueType {
    private MetadataReader _reader;
    private int _firstRowId;
    private int _lastRowId;
    public int Count { get; }
    [NullableContextAttribute("1")]
internal ParameterHandleCollection(MetadataReader reader, MethodDefinitionHandle containingMethod);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<ParameterHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.ParameterHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reflection.Metadata.PathUtilities : object {
    private static char DirectorySeparatorChar;
    private static char AltDirectorySeparatorChar;
    private static char VolumeSeparatorChar;
    private static string s_platformSpecificDirectorySeparator;
    private static string PlatformSpecificDirectorySeparator { get; }
    private static string get_PlatformSpecificDirectorySeparator();
    internal static int IndexOfFileName(string path);
    internal static string GetFileName(string path);
    internal static string CombinePathWithRelativePath(string root, string relativePath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
internal static class System.Reflection.Metadata.PEReaderExtensions : object {
    [ExtensionAttribute]
public static MethodBodyBlock GetMethodBody(PEReader peReader, int relativeVirtualAddress);
    [ExtensionAttribute]
public static MetadataReader GetMetadataReader(PEReader peReader);
    [ExtensionAttribute]
public static MetadataReader GetMetadataReader(PEReader peReader, MetadataReaderOptions options);
    [ExtensionAttribute]
public static MetadataReader GetMetadataReader(PEReader peReader, MetadataReaderOptions options, MetadataStringDecoder utf8Decoder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.PooledBlobBuilder : BlobBuilder {
    private static int PoolSize;
    private static int ChunkSize;
    private static ObjectPool`1<PooledBlobBuilder> s_chunkPool;
    private PooledBlobBuilder(int size);
    private static PooledBlobBuilder();
    public static PooledBlobBuilder GetInstance();
    protected virtual BlobBuilder AllocateChunk(int minimalSize);
    protected virtual void FreeChunk();
    public void Free();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Reflection.Metadata.PortablePdbVersions : object {
    internal static string DefaultMetadataVersion;
    internal static ushort DefaultFormatVersion;
    internal static ushort MinFormatVersion;
    internal static ushort MinEmbeddedVersion;
    internal static ushort DefaultEmbeddedVersion;
    internal static ushort MinUnsupportedEmbeddedVersion;
    internal static UInt32 DebugDirectoryEmbeddedSignature;
    internal static ushort PortableCodeViewVersionMagic;
    internal static UInt32 DebugDirectoryEntryVersion(ushort portablePdbVersion);
    internal static UInt32 DebugDirectoryEmbeddedVersion(ushort portablePdbVersion);
    internal static string Format(ushort version);
}
internal enum System.Reflection.Metadata.PrimitiveSerializationTypeCode : Enum {
    public byte value__;
    public static PrimitiveSerializationTypeCode Boolean;
    public static PrimitiveSerializationTypeCode Byte;
    public static PrimitiveSerializationTypeCode SByte;
    public static PrimitiveSerializationTypeCode Char;
    public static PrimitiveSerializationTypeCode Int16;
    public static PrimitiveSerializationTypeCode UInt16;
    public static PrimitiveSerializationTypeCode Int32;
    public static PrimitiveSerializationTypeCode UInt32;
    public static PrimitiveSerializationTypeCode Int64;
    public static PrimitiveSerializationTypeCode UInt64;
    public static PrimitiveSerializationTypeCode Single;
    public static PrimitiveSerializationTypeCode Double;
    public static PrimitiveSerializationTypeCode String;
}
internal enum System.Reflection.Metadata.PrimitiveTypeCode : Enum {
    public byte value__;
    public static PrimitiveTypeCode Boolean;
    public static PrimitiveTypeCode Byte;
    public static PrimitiveTypeCode SByte;
    public static PrimitiveTypeCode Char;
    public static PrimitiveTypeCode Int16;
    public static PrimitiveTypeCode UInt16;
    public static PrimitiveTypeCode Int32;
    public static PrimitiveTypeCode UInt32;
    public static PrimitiveTypeCode Int64;
    public static PrimitiveTypeCode UInt64;
    public static PrimitiveTypeCode Single;
    public static PrimitiveTypeCode Double;
    public static PrimitiveTypeCode IntPtr;
    public static PrimitiveTypeCode UIntPtr;
    public static PrimitiveTypeCode Object;
    public static PrimitiveTypeCode String;
    public static PrimitiveTypeCode TypedReference;
    public static PrimitiveTypeCode Void;
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.PropertyAccessors : ValueType {
    private int _getterRowId;
    private int _setterRowId;
    private ImmutableArray`1<MethodDefinitionHandle> _others;
    public MethodDefinitionHandle Getter { get; }
    public MethodDefinitionHandle Setter { get; }
    public ImmutableArray`1<MethodDefinitionHandle> Others { get; }
    internal PropertyAccessors(int getterRowId, int setterRowId, ImmutableArray`1<MethodDefinitionHandle> others);
    public MethodDefinitionHandle get_Getter();
    public MethodDefinitionHandle get_Setter();
    public ImmutableArray`1<MethodDefinitionHandle> get_Others();
}
[NullableContextAttribute("1")]
[IsReadOnlyAttribute]
[NullableAttribute("0")]
internal class System.Reflection.Metadata.PropertyDefinition : ValueType {
    private MetadataReader _reader;
    private int _rowId;
    private PropertyDefinitionHandle Handle { get; }
    public StringHandle Name { get; }
    public PropertyAttributes Attributes { get; }
    public BlobHandle Signature { get; }
    internal PropertyDefinition(MetadataReader reader, PropertyDefinitionHandle handle);
    private PropertyDefinitionHandle get_Handle();
    public StringHandle get_Name();
    public PropertyAttributes get_Attributes();
    public BlobHandle get_Signature();
    public MethodSignature`1<TType> DecodeSignature(ISignatureTypeProvider`2<TType, TGenericContext> provider, TGenericContext genericContext);
    public ConstantHandle GetDefaultValue();
    public CustomAttributeHandleCollection GetCustomAttributes();
    public PropertyAccessors GetAccessors();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.PropertyDefinitionHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private PropertyDefinitionHandle(int rowId);
    internal static PropertyDefinitionHandle FromRowId(int rowId);
    public static Handle op_Implicit(PropertyDefinitionHandle handle);
    public static EntityHandle op_Implicit(PropertyDefinitionHandle handle);
    public static PropertyDefinitionHandle op_Explicit(Handle handle);
    public static PropertyDefinitionHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(PropertyDefinitionHandle left, PropertyDefinitionHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(PropertyDefinitionHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(PropertyDefinitionHandle left, PropertyDefinitionHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.PropertyDefinitionHandleCollection : ValueType {
    private MetadataReader _reader;
    private int _firstRowId;
    private int _lastRowId;
    public int Count { get; }
    [NullableContextAttribute("1")]
internal PropertyDefinitionHandleCollection(MetadataReader reader);
    [NullableContextAttribute("1")]
internal PropertyDefinitionHandleCollection(MetadataReader reader, TypeDefinitionHandle containingType);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<PropertyDefinitionHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.PropertyDefinitionHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.ReservedBlob`1 : ValueType {
    [CompilerGeneratedAttribute]
private THandle <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private Blob <Content>k__BackingField;
    public THandle Handle { get; }
    public Blob Content { get; }
    internal ReservedBlob`1(THandle handle, Blob content);
    [CompilerGeneratedAttribute]
public THandle get_Handle();
    [CompilerGeneratedAttribute]
public Blob get_Content();
    public BlobWriter CreateWriter();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{GetDebuggerDisplay(),nq}")]
internal class System.Reflection.Metadata.SequencePoint : ValueType {
    public static int HiddenLine;
    [CompilerGeneratedAttribute]
private DocumentHandle <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndColumn>k__BackingField;
    public DocumentHandle Document { get; }
    public int Offset { get; }
    public int StartLine { get; }
    public int EndLine { get; }
    public int StartColumn { get; }
    public int EndColumn { get; }
    public bool IsHidden { get; }
    internal SequencePoint(DocumentHandle document, int offset);
    internal SequencePoint(DocumentHandle document, int offset, int startLine, ushort startColumn, int endLine, ushort endColumn);
    [CompilerGeneratedAttribute]
public DocumentHandle get_Document();
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public int get_StartLine();
    [CompilerGeneratedAttribute]
public int get_EndLine();
    [CompilerGeneratedAttribute]
public int get_StartColumn();
    [CompilerGeneratedAttribute]
public int get_EndColumn();
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SequencePoint other);
    public bool get_IsHidden();
    private string GetDebuggerDisplay();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.SequencePointCollection : ValueType {
    private MemoryBlock _block;
    private DocumentHandle _document;
    internal SequencePointCollection(MemoryBlock block, DocumentHandle document);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<SequencePoint> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.SequencePoint>.GetEnumerator();
}
internal enum System.Reflection.Metadata.SerializationTypeCode : Enum {
    public byte value__;
    public static SerializationTypeCode Invalid;
    public static SerializationTypeCode Boolean;
    public static SerializationTypeCode Char;
    public static SerializationTypeCode SByte;
    public static SerializationTypeCode Byte;
    public static SerializationTypeCode Int16;
    public static SerializationTypeCode UInt16;
    public static SerializationTypeCode Int32;
    public static SerializationTypeCode UInt32;
    public static SerializationTypeCode Int64;
    public static SerializationTypeCode UInt64;
    public static SerializationTypeCode Single;
    public static SerializationTypeCode Double;
    public static SerializationTypeCode String;
    public static SerializationTypeCode SZArray;
    public static SerializationTypeCode Type;
    public static SerializationTypeCode TaggedObject;
    public static SerializationTypeCode Enum;
}
[FlagsAttribute]
internal enum System.Reflection.Metadata.SignatureAttributes : Enum {
    public byte value__;
    public static SignatureAttributes None;
    public static SignatureAttributes Generic;
    public static SignatureAttributes Instance;
    public static SignatureAttributes ExplicitThis;
}
internal enum System.Reflection.Metadata.SignatureCallingConvention : Enum {
    public byte value__;
    public static SignatureCallingConvention Default;
    public static SignatureCallingConvention CDecl;
    public static SignatureCallingConvention StdCall;
    public static SignatureCallingConvention ThisCall;
    public static SignatureCallingConvention FastCall;
    public static SignatureCallingConvention VarArgs;
    public static SignatureCallingConvention Unmanaged;
}
internal class System.Reflection.Metadata.SignatureHeader : ValueType {
    private byte _rawValue;
    public static byte CallingConventionOrKindMask;
    private static byte maxCallingConvention;
    public byte RawValue { get; }
    public SignatureCallingConvention CallingConvention { get; }
    public SignatureKind Kind { get; }
    public SignatureAttributes Attributes { get; }
    public bool HasExplicitThis { get; }
    public bool IsInstance { get; }
    public bool IsGeneric { get; }
    public SignatureHeader(byte rawValue);
    public SignatureHeader(SignatureKind kind, SignatureCallingConvention convention, SignatureAttributes attributes);
    public byte get_RawValue();
    public SignatureCallingConvention get_CallingConvention();
    public SignatureKind get_Kind();
    public SignatureAttributes get_Attributes();
    public bool get_HasExplicitThis();
    public bool get_IsInstance();
    public bool get_IsGeneric();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SignatureHeader other);
    public virtual int GetHashCode();
    public static bool op_Equality(SignatureHeader left, SignatureHeader right);
    public static bool op_Inequality(SignatureHeader left, SignatureHeader right);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
internal enum System.Reflection.Metadata.SignatureKind : Enum {
    public byte value__;
    public static SignatureKind Method;
    public static SignatureKind Field;
    public static SignatureKind LocalVariables;
    public static SignatureKind Property;
    public static SignatureKind MethodSpecification;
}
internal enum System.Reflection.Metadata.SignatureTypeCode : Enum {
    public byte value__;
    public static SignatureTypeCode Invalid;
    public static SignatureTypeCode Void;
    public static SignatureTypeCode Boolean;
    public static SignatureTypeCode Char;
    public static SignatureTypeCode SByte;
    public static SignatureTypeCode Byte;
    public static SignatureTypeCode Int16;
    public static SignatureTypeCode UInt16;
    public static SignatureTypeCode Int32;
    public static SignatureTypeCode UInt32;
    public static SignatureTypeCode Int64;
    public static SignatureTypeCode UInt64;
    public static SignatureTypeCode Single;
    public static SignatureTypeCode Double;
    public static SignatureTypeCode String;
    public static SignatureTypeCode Pointer;
    public static SignatureTypeCode ByReference;
    public static SignatureTypeCode GenericTypeParameter;
    public static SignatureTypeCode Array;
    public static SignatureTypeCode GenericTypeInstance;
    public static SignatureTypeCode TypedReference;
    public static SignatureTypeCode IntPtr;
    public static SignatureTypeCode UIntPtr;
    public static SignatureTypeCode FunctionPointer;
    public static SignatureTypeCode Object;
    public static SignatureTypeCode SZArray;
    public static SignatureTypeCode GenericMethodParameter;
    public static SignatureTypeCode RequiredModifier;
    public static SignatureTypeCode OptionalModifier;
    public static SignatureTypeCode TypeHandle;
    public static SignatureTypeCode Sentinel;
    public static SignatureTypeCode Pinned;
}
internal enum System.Reflection.Metadata.SignatureTypeKind : Enum {
    public byte value__;
    public static SignatureTypeKind Unknown;
    public static SignatureTypeKind Class;
    public static SignatureTypeKind ValueType;
}
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[NullableContextAttribute("1")]
internal class System.Reflection.Metadata.StandaloneSignature : ValueType {
    private MetadataReader _reader;
    private int _rowId;
    private StandaloneSignatureHandle Handle { get; }
    public BlobHandle Signature { get; }
    internal StandaloneSignature(MetadataReader reader, StandaloneSignatureHandle handle);
    private StandaloneSignatureHandle get_Handle();
    public BlobHandle get_Signature();
    public MethodSignature`1<TType> DecodeMethodSignature(ISignatureTypeProvider`2<TType, TGenericContext> provider, TGenericContext genericContext);
    public ImmutableArray`1<TType> DecodeLocalSignature(ISignatureTypeProvider`2<TType, TGenericContext> provider, TGenericContext genericContext);
    public CustomAttributeHandleCollection GetCustomAttributes();
    public StandaloneSignatureKind GetKind();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.StandaloneSignatureHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private StandaloneSignatureHandle(int rowId);
    internal static StandaloneSignatureHandle FromRowId(int rowId);
    public static Handle op_Implicit(StandaloneSignatureHandle handle);
    public static EntityHandle op_Implicit(StandaloneSignatureHandle handle);
    public static StandaloneSignatureHandle op_Explicit(Handle handle);
    public static StandaloneSignatureHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(StandaloneSignatureHandle left, StandaloneSignatureHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(StandaloneSignatureHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(StandaloneSignatureHandle left, StandaloneSignatureHandle right);
}
internal enum System.Reflection.Metadata.StandaloneSignatureKind : Enum {
    public int value__;
    public static StandaloneSignatureKind Method;
    public static StandaloneSignatureKind LocalVariables;
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.StringHandle : ValueType {
    private UInt32 _value;
    internal UInt32 RawValue { get; }
    internal bool IsVirtual { get; }
    public bool IsNil { get; }
    internal StringKind StringKind { get; }
    private StringHandle(UInt32 value);
    internal static StringHandle FromOffset(int heapOffset);
    internal static StringHandle FromVirtualIndex(VirtualIndex virtualIndex);
    internal static StringHandle FromWriterVirtualIndex(int virtualIndex);
    internal StringHandle WithWinRTPrefix();
    internal StringHandle WithDotTermination();
    internal StringHandle SuffixRaw(int prefixByteLength);
    public static Handle op_Implicit(StringHandle handle);
    public static StringHandle op_Explicit(Handle handle);
    internal UInt32 get_RawValue();
    internal bool get_IsVirtual();
    public bool get_IsNil();
    internal int GetHeapOffset();
    internal VirtualIndex GetVirtualIndex();
    internal int GetWriterVirtualIndex();
    internal StringKind get_StringKind();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(StringHandle other);
    public virtual int GetHashCode();
    public static bool op_Equality(StringHandle left, StringHandle right);
    public static bool op_Inequality(StringHandle left, StringHandle right);
}
internal static class System.Reflection.Metadata.StringUtils : object {
    internal static int IgnoreCaseMask(bool ignoreCase);
    internal static bool IsEqualAscii(int a, int b, int ignoreCaseMask);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.TypeDefinition : ValueType {
    private MetadataReader _reader;
    private UInt32 _treatmentAndRowId;
    private int RowId { get; }
    private TypeDefTreatment Treatment { get; }
    private TypeDefinitionHandle Handle { get; }
    public TypeAttributes Attributes { get; }
    public bool IsNested { get; }
    public StringHandle Name { get; }
    public StringHandle Namespace { get; }
    public NamespaceDefinitionHandle NamespaceDefinition { get; }
    public EntityHandle BaseType { get; }
    [NullableContextAttribute("1")]
internal TypeDefinition(MetadataReader reader, UInt32 treatmentAndRowId);
    private int get_RowId();
    private TypeDefTreatment get_Treatment();
    private TypeDefinitionHandle get_Handle();
    public TypeAttributes get_Attributes();
    public bool get_IsNested();
    public StringHandle get_Name();
    public StringHandle get_Namespace();
    public NamespaceDefinitionHandle get_NamespaceDefinition();
    public EntityHandle get_BaseType();
    public TypeLayout GetLayout();
    public TypeDefinitionHandle GetDeclaringType();
    public GenericParameterHandleCollection GetGenericParameters();
    public MethodDefinitionHandleCollection GetMethods();
    public FieldDefinitionHandleCollection GetFields();
    public PropertyDefinitionHandleCollection GetProperties();
    public EventDefinitionHandleCollection GetEvents();
    public ImmutableArray`1<TypeDefinitionHandle> GetNestedTypes();
    public MethodImplementationHandleCollection GetMethodImplementations();
    public InterfaceImplementationHandleCollection GetInterfaceImplementations();
    public CustomAttributeHandleCollection GetCustomAttributes();
    public DeclarativeSecurityAttributeHandleCollection GetDeclarativeSecurityAttributes();
    private TypeAttributes GetProjectedFlags();
    private StringHandle GetProjectedName();
    private NamespaceDefinitionHandle GetProjectedNamespace();
    private StringHandle GetProjectedNamespaceString();
    private EntityHandle GetProjectedBaseType();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.TypeDefinitionHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private TypeDefinitionHandle(int rowId);
    internal static TypeDefinitionHandle FromRowId(int rowId);
    public static Handle op_Implicit(TypeDefinitionHandle handle);
    public static EntityHandle op_Implicit(TypeDefinitionHandle handle);
    public static TypeDefinitionHandle op_Explicit(Handle handle);
    public static TypeDefinitionHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(TypeDefinitionHandle left, TypeDefinitionHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TypeDefinitionHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(TypeDefinitionHandle left, TypeDefinitionHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.TypeDefinitionHandleCollection : ValueType {
    private int _lastRowId;
    public int Count { get; }
    internal TypeDefinitionHandleCollection(int lastRowId);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<TypeDefinitionHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.TypeDefinitionHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.TypeLayout : ValueType {
    private int _size;
    private int _packingSize;
    public int Size { get; }
    public int PackingSize { get; }
    public bool IsDefault { get; }
    public TypeLayout(int size, int packingSize);
    public int get_Size();
    public int get_PackingSize();
    public bool get_IsDefault();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.TypeReference : ValueType {
    private MetadataReader _reader;
    private UInt32 _treatmentAndRowId;
    private int RowId { get; }
    private TypeRefTreatment Treatment { get; }
    private TypeReferenceHandle Handle { get; }
    public EntityHandle ResolutionScope { get; }
    public StringHandle Name { get; }
    public StringHandle Namespace { get; }
    internal TypeRefSignatureTreatment SignatureTreatment { get; }
    [NullableContextAttribute("1")]
internal TypeReference(MetadataReader reader, UInt32 treatmentAndRowId);
    private int get_RowId();
    private TypeRefTreatment get_Treatment();
    private TypeReferenceHandle get_Handle();
    public EntityHandle get_ResolutionScope();
    public StringHandle get_Name();
    public StringHandle get_Namespace();
    private EntityHandle GetProjectedResolutionScope();
    private StringHandle GetProjectedName();
    private StringHandle GetProjectedNamespace();
    internal TypeRefSignatureTreatment get_SignatureTreatment();
    private TypeRefSignatureTreatment GetProjectedSignatureTreatment();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.TypeReferenceHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private TypeReferenceHandle(int rowId);
    internal static TypeReferenceHandle FromRowId(int rowId);
    public static Handle op_Implicit(TypeReferenceHandle handle);
    public static EntityHandle op_Implicit(TypeReferenceHandle handle);
    public static TypeReferenceHandle op_Explicit(Handle handle);
    public static TypeReferenceHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(TypeReferenceHandle left, TypeReferenceHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TypeReferenceHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(TypeReferenceHandle left, TypeReferenceHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.TypeReferenceHandleCollection : ValueType {
    private int _lastRowId;
    public int Count { get; }
    internal TypeReferenceHandleCollection(int lastRowId);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<TypeReferenceHandle> System.Collections.Generic.IEnumerable<System.Reflection.Metadata.TypeReferenceHandle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[NullableContextAttribute("1")]
internal class System.Reflection.Metadata.TypeSpecification : ValueType {
    private MetadataReader _reader;
    private int _rowId;
    private TypeSpecificationHandle Handle { get; }
    public BlobHandle Signature { get; }
    internal TypeSpecification(MetadataReader reader, TypeSpecificationHandle handle);
    private TypeSpecificationHandle get_Handle();
    public BlobHandle get_Signature();
    public TType DecodeSignature(ISignatureTypeProvider`2<TType, TGenericContext> provider, TGenericContext genericContext);
    public CustomAttributeHandleCollection GetCustomAttributes();
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.TypeSpecificationHandle : ValueType {
    private static UInt32 tokenType;
    private static byte tokenTypeSmall;
    private int _rowId;
    public bool IsNil { get; }
    internal int RowId { get; }
    private TypeSpecificationHandle(int rowId);
    internal static TypeSpecificationHandle FromRowId(int rowId);
    public static Handle op_Implicit(TypeSpecificationHandle handle);
    public static EntityHandle op_Implicit(TypeSpecificationHandle handle);
    public static TypeSpecificationHandle op_Explicit(Handle handle);
    public static TypeSpecificationHandle op_Explicit(EntityHandle handle);
    public bool get_IsNil();
    internal int get_RowId();
    public static bool op_Equality(TypeSpecificationHandle left, TypeSpecificationHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TypeSpecificationHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(TypeSpecificationHandle left, TypeSpecificationHandle right);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Metadata.UserStringHandle : ValueType {
    private int _offset;
    public bool IsNil { get; }
    private UserStringHandle(int offset);
    internal static UserStringHandle FromOffset(int heapOffset);
    public static Handle op_Implicit(UserStringHandle handle);
    public static UserStringHandle op_Explicit(Handle handle);
    public bool get_IsNil();
    internal int GetHeapOffset();
    public static bool op_Equality(UserStringHandle left, UserStringHandle right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(UserStringHandle other);
    public virtual int GetHashCode();
    public static bool op_Inequality(UserStringHandle left, UserStringHandle right);
}
[FlagsAttribute]
internal enum System.Reflection.MethodImportAttributes : Enum {
    public short value__;
    public static MethodImportAttributes None;
    public static MethodImportAttributes ExactSpelling;
    public static MethodImportAttributes BestFitMappingDisable;
    public static MethodImportAttributes BestFitMappingEnable;
    public static MethodImportAttributes BestFitMappingMask;
    public static MethodImportAttributes CharSetAnsi;
    public static MethodImportAttributes CharSetUnicode;
    public static MethodImportAttributes CharSetAuto;
    public static MethodImportAttributes CharSetMask;
    public static MethodImportAttributes ThrowOnUnmappableCharEnable;
    public static MethodImportAttributes ThrowOnUnmappableCharDisable;
    public static MethodImportAttributes ThrowOnUnmappableCharMask;
    public static MethodImportAttributes SetLastError;
    public static MethodImportAttributes CallingConventionWinApi;
    public static MethodImportAttributes CallingConventionCDecl;
    public static MethodImportAttributes CallingConventionStdCall;
    public static MethodImportAttributes CallingConventionThisCall;
    public static MethodImportAttributes CallingConventionFastCall;
    public static MethodImportAttributes CallingConventionMask;
}
[FlagsAttribute]
internal enum System.Reflection.MethodSemanticsAttributes : Enum {
    public int value__;
    public static MethodSemanticsAttributes Setter;
    public static MethodSemanticsAttributes Getter;
    public static MethodSemanticsAttributes Other;
    public static MethodSemanticsAttributes Adder;
    public static MethodSemanticsAttributes Remover;
    public static MethodSemanticsAttributes Raiser;
}
[FlagsAttribute]
internal enum System.Reflection.PortableExecutable.Characteristics : Enum {
    public ushort value__;
    public static Characteristics RelocsStripped;
    public static Characteristics ExecutableImage;
    public static Characteristics LineNumsStripped;
    public static Characteristics LocalSymsStripped;
    public static Characteristics AggressiveWSTrim;
    public static Characteristics LargeAddressAware;
    public static Characteristics BytesReversedLo;
    public static Characteristics Bit32Machine;
    public static Characteristics DebugStripped;
    public static Characteristics RemovableRunFromSwap;
    public static Characteristics NetRunFromSwap;
    public static Characteristics System;
    public static Characteristics Dll;
    public static Characteristics UpSystemOnly;
    public static Characteristics BytesReversedHi;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class System.Reflection.PortableExecutable.CodeViewDebugDirectoryData : ValueType {
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Age>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public Guid Guid { get; }
    public int Age { get; }
    public string Path { get; }
    internal CodeViewDebugDirectoryData(Guid guid, int age, string path);
    [CompilerGeneratedAttribute]
public Guid get_Guid();
    [CompilerGeneratedAttribute]
public int get_Age();
    [CompilerGeneratedAttribute]
public string get_Path();
}
internal class System.Reflection.PortableExecutable.CoffHeader : object {
    [CompilerGeneratedAttribute]
private Machine <Machine>k__BackingField;
    [CompilerGeneratedAttribute]
private short <NumberOfSections>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TimeDateStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PointerToSymbolTable>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfSymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private short <SizeOfOptionalHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private Characteristics <Characteristics>k__BackingField;
    internal static int Size;
    public Machine Machine { get; }
    public short NumberOfSections { get; }
    public int TimeDateStamp { get; }
    public int PointerToSymbolTable { get; }
    public int NumberOfSymbols { get; }
    public short SizeOfOptionalHeader { get; }
    public Characteristics Characteristics { get; }
    internal CoffHeader(PEBinaryReader& reader);
    [CompilerGeneratedAttribute]
public Machine get_Machine();
    [CompilerGeneratedAttribute]
public short get_NumberOfSections();
    [CompilerGeneratedAttribute]
public int get_TimeDateStamp();
    [CompilerGeneratedAttribute]
public int get_PointerToSymbolTable();
    [CompilerGeneratedAttribute]
public int get_NumberOfSymbols();
    [CompilerGeneratedAttribute]
public short get_SizeOfOptionalHeader();
    [CompilerGeneratedAttribute]
public Characteristics get_Characteristics();
}
[FlagsAttribute]
internal enum System.Reflection.PortableExecutable.CorFlags : Enum {
    public int value__;
    public static CorFlags ILOnly;
    public static CorFlags Requires32Bit;
    public static CorFlags ILLibrary;
    public static CorFlags StrongNameSigned;
    public static CorFlags NativeEntryPoint;
    public static CorFlags TrackDebugData;
    public static CorFlags Prefers32Bit;
}
internal class System.Reflection.PortableExecutable.CorHeader : object {
    [CompilerGeneratedAttribute]
private ushort <MajorRuntimeVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MinorRuntimeVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <MetadataDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private CorFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EntryPointTokenOrRelativeVirtualAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <ResourcesDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <StrongNameSignatureDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <CodeManagerTableDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <VtableFixupsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <ExportAddressTableJumpsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <ManagedNativeHeaderDirectory>k__BackingField;
    public ushort MajorRuntimeVersion { get; }
    public ushort MinorRuntimeVersion { get; }
    public DirectoryEntry MetadataDirectory { get; }
    public CorFlags Flags { get; }
    public int EntryPointTokenOrRelativeVirtualAddress { get; }
    public DirectoryEntry ResourcesDirectory { get; }
    public DirectoryEntry StrongNameSignatureDirectory { get; }
    public DirectoryEntry CodeManagerTableDirectory { get; }
    public DirectoryEntry VtableFixupsDirectory { get; }
    public DirectoryEntry ExportAddressTableJumpsDirectory { get; }
    public DirectoryEntry ManagedNativeHeaderDirectory { get; }
    internal CorHeader(PEBinaryReader& reader);
    [CompilerGeneratedAttribute]
public ushort get_MajorRuntimeVersion();
    [CompilerGeneratedAttribute]
public ushort get_MinorRuntimeVersion();
    [CompilerGeneratedAttribute]
public DirectoryEntry get_MetadataDirectory();
    [CompilerGeneratedAttribute]
public CorFlags get_Flags();
    [CompilerGeneratedAttribute]
public int get_EntryPointTokenOrRelativeVirtualAddress();
    [CompilerGeneratedAttribute]
public DirectoryEntry get_ResourcesDirectory();
    [CompilerGeneratedAttribute]
public DirectoryEntry get_StrongNameSignatureDirectory();
    [CompilerGeneratedAttribute]
public DirectoryEntry get_CodeManagerTableDirectory();
    [CompilerGeneratedAttribute]
public DirectoryEntry get_VtableFixupsDirectory();
    [CompilerGeneratedAttribute]
public DirectoryEntry get_ExportAddressTableJumpsDirectory();
    [CompilerGeneratedAttribute]
public DirectoryEntry get_ManagedNativeHeaderDirectory();
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class System.Reflection.PortableExecutable.DebugDirectoryBuilder : object {
    private List`1<Entry> _entries;
    private BlobBuilder _dataBuilder;
    internal int TableSize { get; }
    internal int Size { get; }
    internal void AddEntry(DebugDirectoryEntryType type, UInt32 version, UInt32 stamp, int dataSize);
    public void AddEntry(DebugDirectoryEntryType type, UInt32 version, UInt32 stamp);
    public void AddEntry(DebugDirectoryEntryType type, UInt32 version, UInt32 stamp, TData data, Action`2<BlobBuilder, TData> dataSerializer);
    public void AddCodeViewEntry(string pdbPath, BlobContentId pdbContentId, ushort portablePdbVersion);
    public void AddCodeViewEntry(string pdbPath, BlobContentId pdbContentId, ushort portablePdbVersion, int age);
    public void AddReproducibleEntry();
    private static int WriteCodeViewData(BlobBuilder builder, string pdbPath, Guid pdbGuid, int age);
    [NullableContextAttribute("0")]
public void AddPdbChecksumEntry(string algorithmName, ImmutableArray`1<byte> checksum);
    private static int WritePdbChecksumData(BlobBuilder builder, string algorithmName, ImmutableArray`1<byte> checksum);
    internal int get_TableSize();
    internal int get_Size();
    internal void Serialize(BlobBuilder builder, SectionLocation sectionLocation, int sectionOffset);
    public void AddEmbeddedPortablePdbEntry(BlobBuilder debugMetadata, ushort portablePdbVersion);
    private static int WriteEmbeddedPortablePdbData(BlobBuilder builder, BlobBuilder debugMetadata);
}
[IsReadOnlyAttribute]
internal class System.Reflection.PortableExecutable.DebugDirectoryEntry : ValueType {
    internal static int Size;
    [CompilerGeneratedAttribute]
private UInt32 <Stamp>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MajorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MinorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private DebugDirectoryEntryType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DataSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DataRelativeVirtualAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DataPointer>k__BackingField;
    public UInt32 Stamp { get; }
    public ushort MajorVersion { get; }
    public ushort MinorVersion { get; }
    public DebugDirectoryEntryType Type { get; }
    public int DataSize { get; }
    public int DataRelativeVirtualAddress { get; }
    public int DataPointer { get; }
    public bool IsPortableCodeView { get; }
    public DebugDirectoryEntry(UInt32 stamp, ushort majorVersion, ushort minorVersion, DebugDirectoryEntryType type, int dataSize, int dataRelativeVirtualAddress, int dataPointer);
    [CompilerGeneratedAttribute]
public UInt32 get_Stamp();
    [CompilerGeneratedAttribute]
public ushort get_MajorVersion();
    [CompilerGeneratedAttribute]
public ushort get_MinorVersion();
    [CompilerGeneratedAttribute]
public DebugDirectoryEntryType get_Type();
    [CompilerGeneratedAttribute]
public int get_DataSize();
    [CompilerGeneratedAttribute]
public int get_DataRelativeVirtualAddress();
    [CompilerGeneratedAttribute]
public int get_DataPointer();
    public bool get_IsPortableCodeView();
}
internal enum System.Reflection.PortableExecutable.DebugDirectoryEntryType : Enum {
    public int value__;
    public static DebugDirectoryEntryType Unknown;
    public static DebugDirectoryEntryType Coff;
    public static DebugDirectoryEntryType CodeView;
    public static DebugDirectoryEntryType Reproducible;
    public static DebugDirectoryEntryType EmbeddedPortablePdb;
    public static DebugDirectoryEntryType PdbChecksum;
}
[IsReadOnlyAttribute]
internal class System.Reflection.PortableExecutable.DirectoryEntry : ValueType {
    public int RelativeVirtualAddress;
    public int Size;
    public DirectoryEntry(int relativeVirtualAddress, int size);
    internal DirectoryEntry(PEBinaryReader& reader);
}
[FlagsAttribute]
internal enum System.Reflection.PortableExecutable.DllCharacteristics : Enum {
    public ushort value__;
    public static DllCharacteristics ProcessInit;
    public static DllCharacteristics ProcessTerm;
    public static DllCharacteristics ThreadInit;
    public static DllCharacteristics ThreadTerm;
    public static DllCharacteristics HighEntropyVirtualAddressSpace;
    public static DllCharacteristics DynamicBase;
    public static DllCharacteristics ForceIntegrity;
    public static DllCharacteristics NxCompatible;
    public static DllCharacteristics NoIsolation;
    public static DllCharacteristics NoSeh;
    public static DllCharacteristics NoBind;
    public static DllCharacteristics AppContainer;
    public static DllCharacteristics WdmDriver;
    public static DllCharacteristics ControlFlowGuard;
    public static DllCharacteristics TerminalServerAware;
}
internal enum System.Reflection.PortableExecutable.Machine : Enum {
    public ushort value__;
    public static Machine Unknown;
    public static Machine I386;
    public static Machine WceMipsV2;
    public static Machine Alpha;
    public static Machine SH3;
    public static Machine SH3Dsp;
    public static Machine SH3E;
    public static Machine SH4;
    public static Machine SH5;
    public static Machine Arm;
    public static Machine Thumb;
    public static Machine ArmThumb2;
    public static Machine AM33;
    public static Machine PowerPC;
    public static Machine PowerPCFP;
    public static Machine IA64;
    public static Machine MIPS16;
    public static Machine Alpha64;
    public static Machine MipsFpu;
    public static Machine MipsFpu16;
    public static Machine Tricore;
    public static Machine Ebc;
    public static Machine Amd64;
    public static Machine M32R;
    public static Machine Arm64;
    public static Machine LoongArch32;
    public static Machine LoongArch64;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.PortableExecutable.ManagedPEBuilder : PEBuilder {
    public static int ManagedResourcesDataAlignment;
    public static int MappedFieldDataAlignment;
    private static int DefaultStrongNameSignatureSize;
    private static string TextSectionName;
    private static string ResourceSectionName;
    private static string RelocationSectionName;
    private PEDirectoriesBuilder _peDirectoriesBuilder;
    private MetadataRootBuilder _metadataRootBuilder;
    private BlobBuilder _ilStream;
    private BlobBuilder _mappedFieldDataOpt;
    private BlobBuilder _managedResourcesOpt;
    private ResourceSectionBuilder _nativeResourcesOpt;
    private int _strongNameSignatureSize;
    private MethodDefinitionHandle _entryPointOpt;
    private DebugDirectoryBuilder _debugDirectoryBuilderOpt;
    private CorFlags _corFlags;
    private int _lazyEntryPointAddress;
    private Blob _lazyStrongNameSignature;
    [NullableContextAttribute("2")]
public ManagedPEBuilder(PEHeaderBuilder header, MetadataRootBuilder metadataRootBuilder, BlobBuilder ilStream, BlobBuilder mappedFieldData, BlobBuilder managedResources, ResourceSectionBuilder nativeResources, DebugDirectoryBuilder debugDirectoryBuilder, int strongNameSignatureSize, MethodDefinitionHandle entryPoint, CorFlags flags, Func`2<IEnumerable`1<Blob>, BlobContentId> deterministicIdProvider);
    private DebugDirectoryBuilder CreateDefaultDebugDirectoryBuilder();
    [NullableContextAttribute("0")]
protected virtual ImmutableArray`1<Section> CreateSections();
    protected virtual BlobBuilder SerializeSection(string name, SectionLocation location);
    private BlobBuilder SerializeTextSection(SectionLocation location);
    private BlobBuilder SerializeResourceSection(SectionLocation location);
    private BlobBuilder SerializeRelocationSection(SectionLocation location);
    private static void WriteRelocationSection(BlobBuilder builder, Machine machine, int entryPointAddress);
    protected internal virtual PEDirectoriesBuilder GetDirectories();
    public void Sign(BlobBuilder peImage, Func`2<IEnumerable`1<Blob>, Byte[]> signatureProvider);
}
internal class System.Reflection.PortableExecutable.ManagedTextSection : object {
    [CompilerGeneratedAttribute]
private Characteristics <ImageCharacteristics>k__BackingField;
    [CompilerGeneratedAttribute]
private Machine <Machine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ILStreamSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MetadataSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResourceDataSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StrongNameSignatureSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DebugDataSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MappedFieldDataSize>k__BackingField;
    public static int ManagedResourcesDataAlignment;
    public static int MappedFieldDataAlignment;
    private static int CorHeaderSize;
    public Characteristics ImageCharacteristics { get; }
    public Machine Machine { get; }
    public int ILStreamSize { get; }
    public int MetadataSize { get; }
    public int ResourceDataSize { get; }
    public int StrongNameSignatureSize { get; }
    public int DebugDataSize { get; }
    public int MappedFieldDataSize { get; }
    internal bool RequiresStartupStub { get; }
    internal bool Requires64bits { get; }
    public bool Is32Bit { get; }
    private static ReadOnlySpan`1<byte> CorEntryPointDll { get; }
    private ReadOnlySpan`1<byte> CorEntryPointName { get; }
    private int SizeOfImportAddressTable { get; }
    private int SizeOfImportTable { get; }
    private static int SizeOfNameTable { get; }
    private int SizeOfRuntimeStartupStub { get; }
    public int OffsetToILStream { get; }
    public ManagedTextSection(Characteristics imageCharacteristics, Machine machine, int ilStreamSize, int metadataSize, int resourceDataSize, int strongNameSignatureSize, int debugDataSize, int mappedFieldDataSize);
    [CompilerGeneratedAttribute]
public Characteristics get_ImageCharacteristics();
    [CompilerGeneratedAttribute]
public Machine get_Machine();
    [CompilerGeneratedAttribute]
public int get_ILStreamSize();
    [CompilerGeneratedAttribute]
public int get_MetadataSize();
    [CompilerGeneratedAttribute]
public int get_ResourceDataSize();
    [CompilerGeneratedAttribute]
public int get_StrongNameSignatureSize();
    [CompilerGeneratedAttribute]
public int get_DebugDataSize();
    [CompilerGeneratedAttribute]
public int get_MappedFieldDataSize();
    internal bool get_RequiresStartupStub();
    internal bool get_Requires64bits();
    public bool get_Is32Bit();
    private static ReadOnlySpan`1<byte> get_CorEntryPointDll();
    private ReadOnlySpan`1<byte> get_CorEntryPointName();
    private int get_SizeOfImportAddressTable();
    private int get_SizeOfImportTable();
    private static int get_SizeOfNameTable();
    private int get_SizeOfRuntimeStartupStub();
    internal int CalculateOffsetToMappedFieldDataStreamUnaligned();
    public int CalculateOffsetToMappedFieldDataStream();
    internal int ComputeOffsetToDebugDirectory();
    private int ComputeOffsetToImportTable();
    public int get_OffsetToILStream();
    private int ComputeOffsetToMetadata();
    public int ComputeSizeOfTextSection();
    public int GetEntryPointAddress(int rva);
    public DirectoryEntry GetImportAddressTableDirectoryEntry(int rva);
    public DirectoryEntry GetImportTableDirectoryEntry(int rva);
    public DirectoryEntry GetCorHeaderDirectoryEntry(int rva);
    [NullableContextAttribute("1")]
public void Serialize(BlobBuilder builder, int relativeVirtualAddess, int entryPointTokenOrRelativeVirtualAddress, CorFlags corFlags, ulong baseAddress, BlobBuilder metadataBuilder, BlobBuilder ilBuilder, BlobBuilder mappedFieldDataBuilderOpt, BlobBuilder resourceBuilderOpt, BlobBuilder debugDataBuilderOpt, Blob& strongNameSignature);
    private void WriteImportAddressTable(BlobBuilder builder, int importTableRva);
    private void WriteImportTable(BlobBuilder builder, int importTableRva, int importAddressTableRva);
    private static void WriteNameTable(BlobBuilder builder);
    private void WriteCorHeader(BlobBuilder builder, int textSectionRva, int entryPointTokenOrRva, CorFlags corFlags);
    private void WriteRuntimeStartupStub(BlobBuilder sectionBuilder, int importAddressTableRva, ulong baseAddress);
}
[IsReadOnlyAttribute]
internal class System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData : ValueType {
    [CompilerGeneratedAttribute]
private string <AlgorithmName>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<byte> <Checksum>k__BackingField;
    [NullableAttribute("1")]
public string AlgorithmName { get; }
    public ImmutableArray`1<byte> Checksum { get; }
    internal PdbChecksumDebugDirectoryData(string algorithmName, ImmutableArray`1<byte> checksum);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_AlgorithmName();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<byte> get_Checksum();
}
[NullableContextAttribute("1")]
[IsReadOnlyAttribute]
[NullableAttribute("0")]
internal class System.Reflection.PortableExecutable.PEBinaryReader : ValueType {
    private long _startOffset;
    private long _maxOffset;
    private BinaryReader _reader;
    public int CurrentOffset { get; }
    public PEBinaryReader(Stream stream, int size);
    public int get_CurrentOffset();
    public void Seek(int offset);
    public Byte[] ReadBytes(int count);
    public byte ReadByte();
    public short ReadInt16();
    public ushort ReadUInt16();
    public int ReadInt32();
    public UInt32 ReadUInt32();
    public ulong ReadUInt64();
    public string ReadNullPaddedUTF8(int byteCount);
    private void CheckBounds(UInt32 count);
    private void CheckBounds(long startPosition, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class System.Reflection.PortableExecutable.PEBuilder : object {
    [CompilerGeneratedAttribute]
private PEHeaderBuilder <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IEnumerable`1<Blob>, BlobContentId> <IdProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeterministic>k__BackingField;
    private Lazy`1<ImmutableArray`1<Section>> _lazySections;
    private Blob _lazyChecksum;
    internal static int DosHeaderSize;
    public PEHeaderBuilder Header { get; }
    public Func`2<IEnumerable`1<Blob>, BlobContentId> IdProvider { get; }
    public bool IsDeterministic { get; }
    [NullableAttribute("0")]
private static ReadOnlySpan`1<byte> DosHeader { get; }
    protected PEBuilder(PEHeaderBuilder header, Func`2<IEnumerable`1<Blob>, BlobContentId> deterministicIdProvider);
    [CompilerGeneratedAttribute]
public PEHeaderBuilder get_Header();
    [CompilerGeneratedAttribute]
public Func`2<IEnumerable`1<Blob>, BlobContentId> get_IdProvider();
    [CompilerGeneratedAttribute]
public bool get_IsDeterministic();
    [NullableContextAttribute("0")]
protected ImmutableArray`1<Section> GetSections();
    [NullableContextAttribute("0")]
protected abstract virtual ImmutableArray`1<Section> CreateSections();
    protected abstract virtual BlobBuilder SerializeSection(string name, SectionLocation location);
    protected internal abstract virtual PEDirectoriesBuilder GetDirectories();
    public BlobContentId Serialize(BlobBuilder builder);
    private ImmutableArray`1<SerializedSection> SerializeSections();
    private static void WritePESignature(BlobBuilder builder);
    private static ReadOnlySpan`1<byte> get_DosHeader();
    private void WriteCoffHeader(BlobBuilder builder, ImmutableArray`1<SerializedSection> sections, Blob& stampFixup);
    private void WritePEHeader(BlobBuilder builder, PEDirectoriesBuilder directories, ImmutableArray`1<SerializedSection> sections);
    private static void WriteSectionHeaders(BlobBuilder builder, ImmutableArray`1<SerializedSection> serializedSections);
    private static void WriteSectionHeader(BlobBuilder builder, SerializedSection serializedSection);
    private static int IndexOfSection(ImmutableArray`1<SerializedSection> sections, SectionCharacteristics characteristics);
    private static int SumRawDataSizes(ImmutableArray`1<SerializedSection> sections, SectionCharacteristics characteristics);
    [IteratorStateMachineAttribute("System.Reflection.PortableExecutable.PEBuilder/<GetContentToSign>d__30")]
internal static IEnumerable`1<Blob> GetContentToSign(BlobBuilder peImage, int peHeadersSize, int peHeaderAlignment, Blob strongNameSignatureFixup);
    internal static Blob GetPrefixBlob(Blob container, Blob blob);
    internal static Blob GetSuffixBlob(Blob container, Blob blob);
    [IteratorStateMachineAttribute("System.Reflection.PortableExecutable.PEBuilder/<GetContentToChecksum>d__33")]
internal static IEnumerable`1<Blob> GetContentToChecksum(BlobBuilder peImage, Blob checksumFixup);
    internal void Sign(BlobBuilder peImage, Blob strongNameSignatureFixup, Func`2<IEnumerable`1<Blob>, Byte[]> signatureProvider);
    internal static UInt32 CalculateChecksum(BlobBuilder peImage, Blob checksumFixup);
    private static UInt32 CalculateChecksum(IEnumerable`1<Blob> blobs);
    private static UInt32 AggregateChecksum(UInt32 checksum, ushort value);
}
internal class System.Reflection.PortableExecutable.PEDirectoriesBuilder : object {
    [CompilerGeneratedAttribute]
private int <AddressOfEntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <ExportTable>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <ImportTable>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <ResourceTable>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <ExceptionTable>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <BaseRelocationTable>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <DebugTable>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <CopyrightTable>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <GlobalPointerTable>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <ThreadLocalStorageTable>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <LoadConfigTable>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <BoundImportTable>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <ImportAddressTable>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <DelayImportTable>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <CorHeaderTable>k__BackingField;
    public int AddressOfEntryPoint { get; public set; }
    public DirectoryEntry ExportTable { get; public set; }
    public DirectoryEntry ImportTable { get; public set; }
    public DirectoryEntry ResourceTable { get; public set; }
    public DirectoryEntry ExceptionTable { get; public set; }
    public DirectoryEntry BaseRelocationTable { get; public set; }
    public DirectoryEntry DebugTable { get; public set; }
    public DirectoryEntry CopyrightTable { get; public set; }
    public DirectoryEntry GlobalPointerTable { get; public set; }
    public DirectoryEntry ThreadLocalStorageTable { get; public set; }
    public DirectoryEntry LoadConfigTable { get; public set; }
    public DirectoryEntry BoundImportTable { get; public set; }
    public DirectoryEntry ImportAddressTable { get; public set; }
    public DirectoryEntry DelayImportTable { get; public set; }
    public DirectoryEntry CorHeaderTable { get; public set; }
    [CompilerGeneratedAttribute]
public int get_AddressOfEntryPoint();
    [CompilerGeneratedAttribute]
public void set_AddressOfEntryPoint(int value);
    [CompilerGeneratedAttribute]
public DirectoryEntry get_ExportTable();
    [CompilerGeneratedAttribute]
public void set_ExportTable(DirectoryEntry value);
    [CompilerGeneratedAttribute]
public DirectoryEntry get_ImportTable();
    [CompilerGeneratedAttribute]
public void set_ImportTable(DirectoryEntry value);
    [CompilerGeneratedAttribute]
public DirectoryEntry get_ResourceTable();
    [CompilerGeneratedAttribute]
public void set_ResourceTable(DirectoryEntry value);
    [CompilerGeneratedAttribute]
public DirectoryEntry get_ExceptionTable();
    [CompilerGeneratedAttribute]
public void set_ExceptionTable(DirectoryEntry value);
    [CompilerGeneratedAttribute]
public DirectoryEntry get_BaseRelocationTable();
    [CompilerGeneratedAttribute]
public void set_BaseRelocationTable(DirectoryEntry value);
    [CompilerGeneratedAttribute]
public DirectoryEntry get_DebugTable();
    [CompilerGeneratedAttribute]
public void set_DebugTable(DirectoryEntry value);
    [CompilerGeneratedAttribute]
public DirectoryEntry get_CopyrightTable();
    [CompilerGeneratedAttribute]
public void set_CopyrightTable(DirectoryEntry value);
    [CompilerGeneratedAttribute]
public DirectoryEntry get_GlobalPointerTable();
    [CompilerGeneratedAttribute]
public void set_GlobalPointerTable(DirectoryEntry value);
    [CompilerGeneratedAttribute]
public DirectoryEntry get_ThreadLocalStorageTable();
    [CompilerGeneratedAttribute]
public void set_ThreadLocalStorageTable(DirectoryEntry value);
    [CompilerGeneratedAttribute]
public DirectoryEntry get_LoadConfigTable();
    [CompilerGeneratedAttribute]
public void set_LoadConfigTable(DirectoryEntry value);
    [CompilerGeneratedAttribute]
public DirectoryEntry get_BoundImportTable();
    [CompilerGeneratedAttribute]
public void set_BoundImportTable(DirectoryEntry value);
    [CompilerGeneratedAttribute]
public DirectoryEntry get_ImportAddressTable();
    [CompilerGeneratedAttribute]
public void set_ImportAddressTable(DirectoryEntry value);
    [CompilerGeneratedAttribute]
public DirectoryEntry get_DelayImportTable();
    [CompilerGeneratedAttribute]
public void set_DelayImportTable(DirectoryEntry value);
    [CompilerGeneratedAttribute]
public DirectoryEntry get_CorHeaderTable();
    [CompilerGeneratedAttribute]
public void set_CorHeaderTable(DirectoryEntry value);
}
internal class System.Reflection.PortableExecutable.PEHeader : object {
    [CompilerGeneratedAttribute]
private PEMagic <Magic>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MajorLinkerVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MinorLinkerVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SizeOfCode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SizeOfInitializedData>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SizeOfUninitializedData>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AddressOfEntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BaseOfCode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BaseOfData>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ImageBase>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SectionAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FileAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MajorOperatingSystemVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MinorOperatingSystemVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MajorImageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MinorImageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MajorSubsystemVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MinorSubsystemVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SizeOfImage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SizeOfHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <CheckSum>k__BackingField;
    [CompilerGeneratedAttribute]
private Subsystem <Subsystem>k__BackingField;
    [CompilerGeneratedAttribute]
private DllCharacteristics <DllCharacteristics>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <SizeOfStackReserve>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <SizeOfStackCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <SizeOfHeapReserve>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <SizeOfHeapCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfRvaAndSizes>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <ExportTableDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <ImportTableDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <ResourceTableDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <ExceptionTableDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <CertificateTableDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <BaseRelocationTableDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <DebugTableDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <CopyrightTableDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <GlobalPointerTableDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <ThreadLocalStorageTableDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <LoadConfigTableDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <BoundImportTableDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <ImportAddressTableDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <DelayImportTableDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryEntry <CorHeaderTableDirectory>k__BackingField;
    internal static int OffsetOfChecksum;
    public PEMagic Magic { get; }
    public byte MajorLinkerVersion { get; }
    public byte MinorLinkerVersion { get; }
    public int SizeOfCode { get; }
    public int SizeOfInitializedData { get; }
    public int SizeOfUninitializedData { get; }
    public int AddressOfEntryPoint { get; }
    public int BaseOfCode { get; }
    public int BaseOfData { get; }
    public ulong ImageBase { get; }
    public int SectionAlignment { get; }
    public int FileAlignment { get; }
    public ushort MajorOperatingSystemVersion { get; }
    public ushort MinorOperatingSystemVersion { get; }
    public ushort MajorImageVersion { get; }
    public ushort MinorImageVersion { get; }
    public ushort MajorSubsystemVersion { get; }
    public ushort MinorSubsystemVersion { get; }
    public int SizeOfImage { get; }
    public int SizeOfHeaders { get; }
    public UInt32 CheckSum { get; }
    public Subsystem Subsystem { get; }
    public DllCharacteristics DllCharacteristics { get; }
    public ulong SizeOfStackReserve { get; }
    public ulong SizeOfStackCommit { get; }
    public ulong SizeOfHeapReserve { get; }
    public ulong SizeOfHeapCommit { get; }
    public int NumberOfRvaAndSizes { get; }
    public DirectoryEntry ExportTableDirectory { get; }
    public DirectoryEntry ImportTableDirectory { get; }
    public DirectoryEntry ResourceTableDirectory { get; }
    public DirectoryEntry ExceptionTableDirectory { get; }
    public DirectoryEntry CertificateTableDirectory { get; }
    public DirectoryEntry BaseRelocationTableDirectory { get; }
    public DirectoryEntry DebugTableDirectory { get; }
    public DirectoryEntry CopyrightTableDirectory { get; }
    public DirectoryEntry GlobalPointerTableDirectory { get; }
    public DirectoryEntry ThreadLocalStorageTableDirectory { get; }
    public DirectoryEntry LoadConfigTableDirectory { get; }
    public DirectoryEntry BoundImportTableDirectory { get; }
    public DirectoryEntry ImportAddressTableDirectory { get; }
    public DirectoryEntry DelayImportTableDirectory { get; }
    public DirectoryEntry CorHeaderTableDirectory { get; }
    internal PEHeader(PEBinaryReader& reader);
    [CompilerGeneratedAttribute]
public PEMagic get_Magic();
    [CompilerGeneratedAttribute]
public byte get_MajorLinkerVersion();
    [CompilerGeneratedAttribute]
public byte get_MinorLinkerVersion();
    [CompilerGeneratedAttribute]
public int get_SizeOfCode();
    [CompilerGeneratedAttribute]
public int get_SizeOfInitializedData();
    [CompilerGeneratedAttribute]
public int get_SizeOfUninitializedData();
    [CompilerGeneratedAttribute]
public int get_AddressOfEntryPoint();
    [CompilerGeneratedAttribute]
public int get_BaseOfCode();
    [CompilerGeneratedAttribute]
public int get_BaseOfData();
    [CompilerGeneratedAttribute]
public ulong get_ImageBase();
    [CompilerGeneratedAttribute]
public int get_SectionAlignment();
    [CompilerGeneratedAttribute]
public int get_FileAlignment();
    [CompilerGeneratedAttribute]
public ushort get_MajorOperatingSystemVersion();
    [CompilerGeneratedAttribute]
public ushort get_MinorOperatingSystemVersion();
    [CompilerGeneratedAttribute]
public ushort get_MajorImageVersion();
    [CompilerGeneratedAttribute]
public ushort get_MinorImageVersion();
    [CompilerGeneratedAttribute]
public ushort get_MajorSubsystemVersion();
    [CompilerGeneratedAttribute]
public ushort get_MinorSubsystemVersion();
    [CompilerGeneratedAttribute]
public int get_SizeOfImage();
    [CompilerGeneratedAttribute]
public int get_SizeOfHeaders();
    [CompilerGeneratedAttribute]
public UInt32 get_CheckSum();
    [CompilerGeneratedAttribute]
public Subsystem get_Subsystem();
    [CompilerGeneratedAttribute]
public DllCharacteristics get_DllCharacteristics();
    [CompilerGeneratedAttribute]
public ulong get_SizeOfStackReserve();
    [CompilerGeneratedAttribute]
public ulong get_SizeOfStackCommit();
    [CompilerGeneratedAttribute]
public ulong get_SizeOfHeapReserve();
    [CompilerGeneratedAttribute]
public ulong get_SizeOfHeapCommit();
    [CompilerGeneratedAttribute]
public int get_NumberOfRvaAndSizes();
    [CompilerGeneratedAttribute]
public DirectoryEntry get_ExportTableDirectory();
    [CompilerGeneratedAttribute]
public DirectoryEntry get_ImportTableDirectory();
    [CompilerGeneratedAttribute]
public DirectoryEntry get_ResourceTableDirectory();
    [CompilerGeneratedAttribute]
public DirectoryEntry get_ExceptionTableDirectory();
    [CompilerGeneratedAttribute]
public DirectoryEntry get_CertificateTableDirectory();
    [CompilerGeneratedAttribute]
public DirectoryEntry get_BaseRelocationTableDirectory();
    [CompilerGeneratedAttribute]
public DirectoryEntry get_DebugTableDirectory();
    [CompilerGeneratedAttribute]
public DirectoryEntry get_CopyrightTableDirectory();
    [CompilerGeneratedAttribute]
public DirectoryEntry get_GlobalPointerTableDirectory();
    [CompilerGeneratedAttribute]
public DirectoryEntry get_ThreadLocalStorageTableDirectory();
    [CompilerGeneratedAttribute]
public DirectoryEntry get_LoadConfigTableDirectory();
    [CompilerGeneratedAttribute]
public DirectoryEntry get_BoundImportTableDirectory();
    [CompilerGeneratedAttribute]
public DirectoryEntry get_ImportAddressTableDirectory();
    [CompilerGeneratedAttribute]
public DirectoryEntry get_DelayImportTableDirectory();
    [CompilerGeneratedAttribute]
public DirectoryEntry get_CorHeaderTableDirectory();
    internal static int Size(bool is32Bit);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.PortableExecutable.PEHeaderBuilder : object {
    [CompilerGeneratedAttribute]
private Machine <Machine>k__BackingField;
    [CompilerGeneratedAttribute]
private Characteristics <ImageCharacteristics>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MajorLinkerVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MinorLinkerVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ImageBase>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SectionAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FileAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MajorOperatingSystemVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MinorOperatingSystemVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MajorImageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MinorImageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MajorSubsystemVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MinorSubsystemVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Subsystem <Subsystem>k__BackingField;
    [CompilerGeneratedAttribute]
private DllCharacteristics <DllCharacteristics>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <SizeOfStackReserve>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <SizeOfStackCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <SizeOfHeapReserve>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <SizeOfHeapCommit>k__BackingField;
    public Machine Machine { get; }
    public Characteristics ImageCharacteristics { get; }
    public byte MajorLinkerVersion { get; }
    public byte MinorLinkerVersion { get; }
    public ulong ImageBase { get; }
    public int SectionAlignment { get; }
    public int FileAlignment { get; }
    public ushort MajorOperatingSystemVersion { get; }
    public ushort MinorOperatingSystemVersion { get; }
    public ushort MajorImageVersion { get; }
    public ushort MinorImageVersion { get; }
    public ushort MajorSubsystemVersion { get; }
    public ushort MinorSubsystemVersion { get; }
    public Subsystem Subsystem { get; }
    public DllCharacteristics DllCharacteristics { get; }
    public ulong SizeOfStackReserve { get; }
    public ulong SizeOfStackCommit { get; }
    public ulong SizeOfHeapReserve { get; }
    public ulong SizeOfHeapCommit { get; }
    internal bool Is32Bit { get; }
    public PEHeaderBuilder(Machine machine, int sectionAlignment, int fileAlignment, ulong imageBase, byte majorLinkerVersion, byte minorLinkerVersion, ushort majorOperatingSystemVersion, ushort minorOperatingSystemVersion, ushort majorImageVersion, ushort minorImageVersion, ushort majorSubsystemVersion, ushort minorSubsystemVersion, Subsystem subsystem, DllCharacteristics dllCharacteristics, Characteristics imageCharacteristics, ulong sizeOfStackReserve, ulong sizeOfStackCommit, ulong sizeOfHeapReserve, ulong sizeOfHeapCommit);
    [CompilerGeneratedAttribute]
public Machine get_Machine();
    [CompilerGeneratedAttribute]
public Characteristics get_ImageCharacteristics();
    [CompilerGeneratedAttribute]
public byte get_MajorLinkerVersion();
    [CompilerGeneratedAttribute]
public byte get_MinorLinkerVersion();
    [CompilerGeneratedAttribute]
public ulong get_ImageBase();
    [CompilerGeneratedAttribute]
public int get_SectionAlignment();
    [CompilerGeneratedAttribute]
public int get_FileAlignment();
    [CompilerGeneratedAttribute]
public ushort get_MajorOperatingSystemVersion();
    [CompilerGeneratedAttribute]
public ushort get_MinorOperatingSystemVersion();
    [CompilerGeneratedAttribute]
public ushort get_MajorImageVersion();
    [CompilerGeneratedAttribute]
public ushort get_MinorImageVersion();
    [CompilerGeneratedAttribute]
public ushort get_MajorSubsystemVersion();
    [CompilerGeneratedAttribute]
public ushort get_MinorSubsystemVersion();
    [CompilerGeneratedAttribute]
public Subsystem get_Subsystem();
    [CompilerGeneratedAttribute]
public DllCharacteristics get_DllCharacteristics();
    [CompilerGeneratedAttribute]
public ulong get_SizeOfStackReserve();
    [CompilerGeneratedAttribute]
public ulong get_SizeOfStackCommit();
    [CompilerGeneratedAttribute]
public ulong get_SizeOfHeapReserve();
    [CompilerGeneratedAttribute]
public ulong get_SizeOfHeapCommit();
    public static PEHeaderBuilder CreateExecutableHeader();
    public static PEHeaderBuilder CreateLibraryHeader();
    internal bool get_Is32Bit();
    internal int ComputeSizeOfPEHeaders(int sectionCount);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.PortableExecutable.PEHeaders : object {
    private CoffHeader _coffHeader;
    private PEHeader _peHeader;
    private ImmutableArray`1<SectionHeader> _sectionHeaders;
    private CorHeader _corHeader;
    private bool _isLoadedImage;
    private int _metadataStartOffset;
    private int _metadataSize;
    private int _coffHeaderStartOffset;
    private int _corHeaderStartOffset;
    private int _peHeaderStartOffset;
    internal static ushort DosSignature;
    internal static int PESignatureOffsetLocation;
    internal static UInt32 PESignature;
    internal static int PESignatureSize;
    public int MetadataStartOffset { get; }
    public int MetadataSize { get; }
    public CoffHeader CoffHeader { get; }
    public int CoffHeaderStartOffset { get; }
    public bool IsCoffOnly { get; }
    [NullableAttribute("2")]
public PEHeader PEHeader { get; }
    public int PEHeaderStartOffset { get; }
    [NullableAttribute("0")]
public ImmutableArray`1<SectionHeader> SectionHeaders { get; }
    [NullableAttribute("2")]
public CorHeader CorHeader { get; }
    public int CorHeaderStartOffset { get; }
    public bool IsConsoleApplication { get; }
    public bool IsDll { get; }
    public bool IsExe { get; }
    public PEHeaders(Stream peStream);
    public PEHeaders(Stream peStream, int size);
    public PEHeaders(Stream peStream, int size, bool isLoadedImage);
    public int get_MetadataStartOffset();
    public int get_MetadataSize();
    public CoffHeader get_CoffHeader();
    public int get_CoffHeaderStartOffset();
    public bool get_IsCoffOnly();
    [NullableContextAttribute("2")]
public PEHeader get_PEHeader();
    public int get_PEHeaderStartOffset();
    [NullableContextAttribute("0")]
public ImmutableArray`1<SectionHeader> get_SectionHeaders();
    [NullableContextAttribute("2")]
public CorHeader get_CorHeader();
    public int get_CorHeaderStartOffset();
    public bool get_IsConsoleApplication();
    public bool get_IsDll();
    public bool get_IsExe();
    private bool TryCalculateCorHeaderOffset(Int32& startOffset);
    private static void SkipDosHeader(PEBinaryReader& reader, Boolean& isCOFFOnly);
    private ImmutableArray`1<SectionHeader> ReadSectionHeaders(PEBinaryReader& reader);
    public bool TryGetDirectoryOffset(DirectoryEntry directory, Int32& offset);
    internal bool TryGetDirectoryOffset(DirectoryEntry directory, Int32& offset, bool canCrossSectionBoundary);
    public int GetContainingSectionIndex(int relativeVirtualAddress);
    internal int IndexOfSection(string name);
    private void CalculateMetadataLocation(long peImageSize, Int32& start, Int32& size);
}
internal enum System.Reflection.PortableExecutable.PEMagic : Enum {
    public ushort value__;
    public static PEMagic PE32;
    public static PEMagic PE32Plus;
}
[IsReadOnlyAttribute]
internal class System.Reflection.PortableExecutable.PEMemoryBlock : ValueType {
    private AbstractMemoryBlock _block;
    private int _offset;
    public Byte* Pointer { get; }
    public int Length { get; }
    [NullableContextAttribute("1")]
internal PEMemoryBlock(AbstractMemoryBlock block, int offset);
    public Byte* get_Pointer();
    public int get_Length();
    public BlobReader GetReader();
    public BlobReader GetReader(int start, int length);
    public ImmutableArray`1<byte> GetContent();
    public ImmutableArray`1<byte> GetContent(int start, int length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.PortableExecutable.PEReader : object {
    [CompilerGeneratedAttribute]
private bool <IsLoadedImage>k__BackingField;
    private MemoryBlockProvider _peImage;
    private PEHeaders _lazyPEHeaders;
    private AbstractMemoryBlock _lazyMetadataBlock;
    private AbstractMemoryBlock _lazyImageBlock;
    private AbstractMemoryBlock[] _lazyPESectionBlocks;
    public bool IsLoadedImage { get; }
    public PEHeaders PEHeaders { get; }
    public bool IsEntireImageAvailable { get; }
    public bool HasMetadata { get; }
    [NullableContextAttribute("0")]
public PEReader(Byte* peImage, int size);
    [NullableContextAttribute("0")]
public PEReader(Byte* peImage, int size, bool isLoadedImage);
    public PEReader(Stream peStream);
    public PEReader(Stream peStream, PEStreamOptions options);
    public PEReader(Stream peStream, PEStreamOptions options, int size);
    [NullableContextAttribute("0")]
public PEReader(ImmutableArray`1<byte> peImage);
    [CompilerGeneratedAttribute]
public bool get_IsLoadedImage();
    public sealed virtual void Dispose();
    private MemoryBlockProvider GetPEImage();
    public PEHeaders get_PEHeaders();
    private void InitializePEHeaders();
    private static PEHeaders ReadPEHeadersNoLock(Stream stream, long imageStartPosition, int imageSize, bool isLoadedImage);
    private AbstractMemoryBlock GetEntireImageBlock();
    private AbstractMemoryBlock GetMetadataBlock();
    private AbstractMemoryBlock GetPESectionBlock(int index);
    public bool get_IsEntireImageAvailable();
    public PEMemoryBlock GetEntireImage();
    public bool get_HasMetadata();
    public PEMemoryBlock GetMetadata();
    public PEMemoryBlock GetSectionData(int relativeVirtualAddress);
    public PEMemoryBlock GetSectionData(string sectionName);
    [NullableContextAttribute("0")]
public ImmutableArray`1<DebugDirectoryEntry> ReadDebugDirectory();
    [NullableContextAttribute("0")]
internal static ImmutableArray`1<DebugDirectoryEntry> ReadDebugDirectoryEntries(BlobReader reader);
    private AbstractMemoryBlock GetDebugDirectoryEntryDataBlock(DebugDirectoryEntry entry);
    public CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData(DebugDirectoryEntry entry);
    internal static CodeViewDebugDirectoryData DecodeCodeViewDebugDirectoryData(AbstractMemoryBlock block);
    public PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData(DebugDirectoryEntry entry);
    internal static PdbChecksumDebugDirectoryData DecodePdbChecksumDebugDirectoryData(AbstractMemoryBlock block);
    [NullableContextAttribute("2")]
public bool TryOpenAssociatedPortablePdb(string peImagePath, Func`2<string, Stream> pdbFileStreamProvider, MetadataReaderProvider& pdbReaderProvider, String& pdbPath);
    private bool TryOpenCodeViewPortablePdb(DebugDirectoryEntry codeViewEntry, string peImageDirectory, Func`2<string, Stream> pdbFileStreamProvider, MetadataReaderProvider& provider, String& pdbPath, Exception& errorToReport);
    private static bool TryOpenPortablePdbFile(string path, BlobContentId id, Func`2<string, Stream> pdbFileStreamProvider, MetadataReaderProvider& provider, Exception& errorToReport);
    private void TryOpenEmbeddedPortablePdb(DebugDirectoryEntry embeddedPdbEntry, Boolean& openedEmbeddedPdb, MetadataReaderProvider& provider, Exception& errorToReport);
    public MetadataReaderProvider ReadEmbeddedPortablePdbDebugDirectoryData(DebugDirectoryEntry entry);
    internal static void ValidateEmbeddedPortablePdbVersion(DebugDirectoryEntry entry);
    internal static NativeHeapMemoryBlock DecodeEmbeddedPortablePdbDebugDirectoryData(AbstractMemoryBlock block);
}
[FlagsAttribute]
internal enum System.Reflection.PortableExecutable.PEStreamOptions : Enum {
    public int value__;
    public static PEStreamOptions Default;
    public static PEStreamOptions LeaveOpen;
    public static PEStreamOptions PrefetchMetadata;
    public static PEStreamOptions PrefetchEntireImage;
    public static PEStreamOptions IsLoadedImage;
}
[ExtensionAttribute]
internal static class System.Reflection.PortableExecutable.PEStreamOptionsExtensions : object {
    [ExtensionAttribute]
public static bool IsValid(PEStreamOptions options);
}
internal abstract class System.Reflection.PortableExecutable.ResourceSectionBuilder : object {
    [NullableContextAttribute("1")]
protected internal abstract virtual void Serialize(BlobBuilder builder, SectionLocation location);
}
[FlagsAttribute]
internal enum System.Reflection.PortableExecutable.SectionCharacteristics : Enum {
    public UInt32 value__;
    public static SectionCharacteristics TypeReg;
    public static SectionCharacteristics TypeDSect;
    public static SectionCharacteristics TypeNoLoad;
    public static SectionCharacteristics TypeGroup;
    public static SectionCharacteristics TypeNoPad;
    public static SectionCharacteristics TypeCopy;
    public static SectionCharacteristics ContainsCode;
    public static SectionCharacteristics ContainsInitializedData;
    public static SectionCharacteristics ContainsUninitializedData;
    public static SectionCharacteristics LinkerOther;
    public static SectionCharacteristics LinkerInfo;
    public static SectionCharacteristics TypeOver;
    public static SectionCharacteristics LinkerRemove;
    public static SectionCharacteristics LinkerComdat;
    public static SectionCharacteristics MemProtected;
    public static SectionCharacteristics NoDeferSpecExc;
    public static SectionCharacteristics GPRel;
    public static SectionCharacteristics MemFardata;
    public static SectionCharacteristics MemSysheap;
    public static SectionCharacteristics MemPurgeable;
    public static SectionCharacteristics Mem16Bit;
    public static SectionCharacteristics MemLocked;
    public static SectionCharacteristics MemPreload;
    public static SectionCharacteristics Align1Bytes;
    public static SectionCharacteristics Align2Bytes;
    public static SectionCharacteristics Align4Bytes;
    public static SectionCharacteristics Align8Bytes;
    public static SectionCharacteristics Align16Bytes;
    public static SectionCharacteristics Align32Bytes;
    public static SectionCharacteristics Align64Bytes;
    public static SectionCharacteristics Align128Bytes;
    public static SectionCharacteristics Align256Bytes;
    public static SectionCharacteristics Align512Bytes;
    public static SectionCharacteristics Align1024Bytes;
    public static SectionCharacteristics Align2048Bytes;
    public static SectionCharacteristics Align4096Bytes;
    public static SectionCharacteristics Align8192Bytes;
    public static SectionCharacteristics AlignMask;
    public static SectionCharacteristics LinkerNRelocOvfl;
    public static SectionCharacteristics MemDiscardable;
    public static SectionCharacteristics MemNotCached;
    public static SectionCharacteristics MemNotPaged;
    public static SectionCharacteristics MemShared;
    public static SectionCharacteristics MemExecute;
    public static SectionCharacteristics MemRead;
    public static SectionCharacteristics MemWrite;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class System.Reflection.PortableExecutable.SectionHeader : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VirtualSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VirtualAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SizeOfRawData>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PointerToRawData>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PointerToRelocations>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PointerToLineNumbers>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <NumberOfRelocations>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <NumberOfLineNumbers>k__BackingField;
    [CompilerGeneratedAttribute]
private SectionCharacteristics <SectionCharacteristics>k__BackingField;
    internal static int NameSize;
    internal static int Size;
    public string Name { get; }
    public int VirtualSize { get; }
    public int VirtualAddress { get; }
    public int SizeOfRawData { get; }
    public int PointerToRawData { get; }
    public int PointerToRelocations { get; }
    public int PointerToLineNumbers { get; }
    public ushort NumberOfRelocations { get; }
    public ushort NumberOfLineNumbers { get; }
    public SectionCharacteristics SectionCharacteristics { get; }
    internal SectionHeader(PEBinaryReader& reader);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public int get_VirtualSize();
    [CompilerGeneratedAttribute]
public int get_VirtualAddress();
    [CompilerGeneratedAttribute]
public int get_SizeOfRawData();
    [CompilerGeneratedAttribute]
public int get_PointerToRawData();
    [CompilerGeneratedAttribute]
public int get_PointerToRelocations();
    [CompilerGeneratedAttribute]
public int get_PointerToLineNumbers();
    [CompilerGeneratedAttribute]
public ushort get_NumberOfRelocations();
    [CompilerGeneratedAttribute]
public ushort get_NumberOfLineNumbers();
    [CompilerGeneratedAttribute]
public SectionCharacteristics get_SectionCharacteristics();
}
[IsReadOnlyAttribute]
internal class System.Reflection.PortableExecutable.SectionLocation : ValueType {
    [CompilerGeneratedAttribute]
private int <RelativeVirtualAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PointerToRawData>k__BackingField;
    public int RelativeVirtualAddress { get; }
    public int PointerToRawData { get; }
    public SectionLocation(int relativeVirtualAddress, int pointerToRawData);
    [CompilerGeneratedAttribute]
public int get_RelativeVirtualAddress();
    [CompilerGeneratedAttribute]
public int get_PointerToRawData();
}
internal enum System.Reflection.PortableExecutable.Subsystem : Enum {
    public ushort value__;
    public static Subsystem Unknown;
    public static Subsystem Native;
    public static Subsystem WindowsGui;
    public static Subsystem WindowsCui;
    public static Subsystem OS2Cui;
    public static Subsystem PosixCui;
    public static Subsystem NativeWindows;
    public static Subsystem WindowsCEGui;
    public static Subsystem EfiApplication;
    public static Subsystem EfiBootServiceDriver;
    public static Subsystem EfiRuntimeDriver;
    public static Subsystem EfiRom;
    public static Subsystem Xbox;
    public static Subsystem WindowsBootApplication;
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal static class System.Reflection.Throw : object {
    [DoesNotReturnAttribute]
internal static void InvalidCast();
    [DoesNotReturnAttribute]
internal static void InvalidArgument(string message, string parameterName);
    [DoesNotReturnAttribute]
internal static void InvalidArgument_OffsetForVirtualHeapHandle();
    [DoesNotReturnAttribute]
internal static Exception InvalidArgument_UnexpectedHandleKind(HandleKind kind);
    [DoesNotReturnAttribute]
internal static Exception InvalidArgument_Handle(string parameterName);
    [DoesNotReturnAttribute]
internal static void SignatureNotVarArg();
    [DoesNotReturnAttribute]
internal static void ControlFlowBuilderNotAvailable();
    [DoesNotReturnAttribute]
internal static void InvalidOperationBuilderAlreadyLinked();
    [DoesNotReturnAttribute]
internal static void InvalidOperation(string message);
    [DoesNotReturnAttribute]
internal static void InvalidOperation_LabelNotMarked(int id);
    [DoesNotReturnAttribute]
internal static void LabelDoesntBelongToBuilder(string parameterName);
    [DoesNotReturnAttribute]
internal static void HeapHandleRequired();
    [DoesNotReturnAttribute]
internal static void EntityOrUserStringHandleRequired();
    [DoesNotReturnAttribute]
internal static void InvalidToken();
    [DoesNotReturnAttribute]
internal static void ArgumentNull(string parameterName);
    [DoesNotReturnAttribute]
internal static void ArgumentEmptyString(string parameterName);
    [DoesNotReturnAttribute]
internal static void ArgumentEmptyArray(string parameterName);
    [DoesNotReturnAttribute]
internal static void ValueArgumentNull();
    [DoesNotReturnAttribute]
internal static void BuilderArgumentNull();
    [DoesNotReturnAttribute]
internal static void ArgumentOutOfRange(string parameterName);
    [DoesNotReturnAttribute]
internal static void ArgumentOutOfRange(string parameterName, string message);
    [DoesNotReturnAttribute]
internal static void BlobTooLarge(string parameterName);
    [DoesNotReturnAttribute]
internal static void IndexOutOfRange();
    [DoesNotReturnAttribute]
internal static void TableIndexOutOfRange();
    [DoesNotReturnAttribute]
internal static void ValueArgumentOutOfRange();
    [DoesNotReturnAttribute]
internal static void OutOfBounds();
    [DoesNotReturnAttribute]
internal static void WriteOutOfBounds();
    [DoesNotReturnAttribute]
internal static void InvalidCodedIndex();
    [DoesNotReturnAttribute]
internal static void InvalidHandle();
    [DoesNotReturnAttribute]
internal static void InvalidCompressedInteger();
    [DoesNotReturnAttribute]
internal static void InvalidSerializedString();
    [DoesNotReturnAttribute]
internal static void ImageTooSmall();
    [DoesNotReturnAttribute]
internal static void ImageTooSmallOrContainsInvalidOffsetOrCount();
    [DoesNotReturnAttribute]
internal static void ReferenceOverflow();
    [DoesNotReturnAttribute]
internal static void TableNotSorted(TableIndex tableIndex);
    [DoesNotReturnAttribute]
internal static void InvalidOperation_TableNotSorted(TableIndex tableIndex);
    [DoesNotReturnAttribute]
internal static void InvalidOperation_PEImageNotAvailable();
    [DoesNotReturnAttribute]
internal static void TooManySubnamespaces();
    [DoesNotReturnAttribute]
internal static void ValueOverflow();
    [DoesNotReturnAttribute]
internal static void SequencePointValueOutOfRange();
    [DoesNotReturnAttribute]
internal static void HeapSizeLimitExceeded(HeapIndex heap);
    [DoesNotReturnAttribute]
internal static void PEReaderDisposed();
}
[ExtensionAttribute]
internal static class System.Reflection.TypeAttributesExtensions : object {
    private static TypeAttributes Forwarder;
    private static TypeAttributes NestedMask;
    [ExtensionAttribute]
public static bool IsForwarder(TypeAttributes flags);
    [ExtensionAttribute]
public static bool IsNested(TypeAttributes flags);
}
[CompilerGeneratedAttribute]
[<7d229d4b-405b-4af4-8958-9a0223843c02>EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.<201631af-58d6-4eae-af0d-865917610790>RefSafetyRulesAttribute : Attribute {
    public int Version;
    public <201631af-58d6-4eae-af0d-865917610790>RefSafetyRulesAttribute(int );
}
[CompilerGeneratedAttribute]
[<90c6ee93-c82d-4ced-adc8-905b9fedf10e>EmbeddedAttribute]
internal class System.Runtime.CompilerServices.<2695944c-a154-47a5-8728-991c93e7fe39>IsReadOnlyAttribute : Attribute {
}
[AttributeUsageAttribute("2")]
[<7d229d4b-405b-4af4-8958-9a0223843c02>EmbeddedAttribute]
[CompilerGeneratedAttribute]
internal class System.Runtime.CompilerServices.<30732343-b83a-4f1b-a472-ff526d9154f3>NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public <30732343-b83a-4f1b-a472-ff526d9154f3>NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[<7a126e87-8622-4c7d-9cfd-1ba0d9d78de8>EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.<32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute : Attribute {
    public byte Flag;
    public <32c8d625-5761-4abd-b91d-55092cb1e0a8>NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[<7d229d4b-405b-4af4-8958-9a0223843c02>EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute : Attribute {
    public byte Flag;
    public <4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[AttributeUsageAttribute("27524")]
[<7d229d4b-405b-4af4-8958-9a0223843c02>EmbeddedAttribute]
internal class System.Runtime.CompilerServices.<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public <5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute(byte );
    public <5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute(Byte[] );
}
[AttributeUsageAttribute("27524")]
[<90c6ee93-c82d-4ced-adc8-905b9fedf10e>EmbeddedAttribute]
[CompilerGeneratedAttribute]
internal class System.Runtime.CompilerServices.<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public <7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute(byte );
    public <7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[<90c6ee93-c82d-4ced-adc8-905b9fedf10e>EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.<95b55684-f8d5-42c3-9634-e69b118837ce>RefSafetyRulesAttribute : Attribute {
    public int Version;
    public <95b55684-f8d5-42c3-9634-e69b118837ce>RefSafetyRulesAttribute(int );
}
[CompilerGeneratedAttribute]
[<90c6ee93-c82d-4ced-adc8-905b9fedf10e>EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute : Attribute {
    public byte Flag;
    public <a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[<7a126e87-8622-4c7d-9cfd-1ba0d9d78de8>EmbeddedAttribute]
internal class System.Runtime.CompilerServices.<b6d95f6d-77db-4571-973b-0de52fd51d8c>IsReadOnlyAttribute : Attribute {
}
[<7d229d4b-405b-4af4-8958-9a0223843c02>EmbeddedAttribute]
[CompilerGeneratedAttribute]
internal class System.Runtime.CompilerServices.<c1ae26cd-b941-41d9-a0dc-6a3876edd189>IsReadOnlyAttribute : Attribute {
}
[<7a126e87-8622-4c7d-9cfd-1ba0d9d78de8>EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
[CompilerGeneratedAttribute]
internal class System.Runtime.CompilerServices.<eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public <eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute(byte );
    public <eb669854-92f6-44b4-85ec-ca690ca8ead3>NullableAttribute(Byte[] );
}
[AttributeUsageAttribute("2048")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("1036")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
internal class System.Runtime.CompilerServices.CollectionBuilderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <BuilderType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public Type BuilderType { get; }
    public string MethodName { get; }
    public CollectionBuilderAttribute(Type builderType, string methodName);
    [CompilerGeneratedAttribute]
public Type get_BuilderType();
    [CompilerGeneratedAttribute]
public string get_MethodName();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[AttributeUsageAttribute("27524")]
[EmbeddedAttribute]
[CompilerGeneratedAttribute]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[AttributeUsageAttribute("5196")]
[EmbeddedAttribute]
[CompilerGeneratedAttribute]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
[CompilerGeneratedAttribute]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[AttributeUsageAttribute("2")]
[EmbeddedAttribute]
[CompilerGeneratedAttribute]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal enum System.Runtime.InteropServices.<9f02997a-c45d-4cc5-b706-97323c4966e9>StringMarshalling : Enum {
    public int value__;
    public static <9f02997a-c45d-4cc5-b706-97323c4966e9>StringMarshalling Custom;
    public static <9f02997a-c45d-4cc5-b706-97323c4966e9>StringMarshalling Utf8;
    public static <9f02997a-c45d-4cc5-b706-97323c4966e9>StringMarshalling Utf16;
}
[AttributeUsageAttribute("64")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
internal class System.Runtime.InteropServices.<eaa89a50-ef7f-4c3d-901c-f5af94b03678>LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private <9f02997a-c45d-4cc5-b706-97323c4966e9>StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    [<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("1")]
public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public <9f02997a-c45d-4cc5-b706-97323c4966e9>StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
public <eaa89a50-ef7f-4c3d-901c-f5af94b03678>LibraryImportAttribute(string libraryName);
    [<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public <9f02997a-c45d-4cc5-b706-97323c4966e9>StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(<9f02997a-c45d-4cc5-b706-97323c4966e9>StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
[<4423ab63-1928-4094-a756-be658dceaaed>NullableContextAttribute("2")]
[<5e89414a-c02d-45fd-b51a-2bf2066ab6ca>NullableAttribute("0")]
internal static class System.Runtime.InteropServices.ImmutableCollectionsMarshal : object {
    public static ImmutableArray`1<T> AsImmutableArray(T[] array);
    public static T[] AsArray(ImmutableArray`1<T> array);
}
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
[NullableContextAttribute("2")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    [NullableAttribute("1")]
public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    [NullableContextAttribute("1")]
public LibraryImportAttribute(string libraryName);
    [CompilerGeneratedAttribute]
[NullableContextAttribute("1")]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
[AttributeUsageAttribute("108")]
internal class System.Runtime.Versioning.NonVersionableAttribute : Attribute {
}
[AttributeUsageAttribute("2047")]
[ConditionalAttribute("NEVER")]
internal class System.Runtime.Versioning.SupportedOSPlatformAttribute : Attribute {
    public SupportedOSPlatformAttribute(string platformName);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ImageTooSmall { get; }
    internal static string InvalidCorHeaderSize { get; }
    internal static string InvalidHandle { get; }
    internal static string UnexpectedHandleKind { get; }
    internal static string UnexpectedOpCode { get; }
    internal static string InvalidLocalSignatureToken { get; }
    internal static string InvalidMetadataSectionSpan { get; }
    internal static string InvalidMethodHeader1 { get; }
    internal static string InvalidMethodHeader2 { get; }
    internal static string InvalidPESignature { get; }
    internal static string InvalidSehHeader { get; }
    internal static string InvalidToken { get; }
    internal static string MetadataImageDoesNotRepresentAnAssembly { get; }
    internal static string StandaloneDebugMetadataImageDoesNotContainModuleTable { get; }
    internal static string PEImageNotAvailable { get; }
    internal static string MissingDataDirectory { get; }
    internal static string NotMetadataHeapHandle { get; }
    internal static string NotMetadataTableOrUserStringHandle { get; }
    internal static string SectionTooSmall { get; }
    internal static string StreamMustSupportReadAndSeek { get; }
    internal static string UnknownFileFormat { get; }
    internal static string UnknownPEMagicValue { get; }
    internal static string MetadataTableNotSorted { get; }
    internal static string ModuleTableInvalidNumberOfRows { get; }
    internal static string UnknownTables { get; }
    internal static string IllegalTablesInCompressedMetadataStream { get; }
    internal static string TableRowCountSpaceTooSmall { get; }
    internal static string OutOfBoundsRead { get; }
    internal static string OutOfBoundsWrite { get; }
    internal static string MetadataHeaderTooSmall { get; }
    internal static string MetadataSignature { get; }
    internal static string NotEnoughSpaceForVersionString { get; }
    internal static string StreamHeaderTooSmall { get; }
    internal static string NotEnoughSpaceForStreamHeaderName { get; }
    internal static string NotEnoughSpaceForStringStream { get; }
    internal static string NotEnoughSpaceForBlobStream { get; }
    internal static string NotEnoughSpaceForGUIDStream { get; }
    internal static string NotEnoughSpaceForMetadataStream { get; }
    internal static string InvalidMetadataStreamFormat { get; }
    internal static string MetadataTablesTooSmall { get; }
    internal static string MetadataTableHeaderTooSmall { get; }
    internal static string WinMDMissingMscorlibRef { get; }
    internal static string UnexpectedStreamEnd { get; }
    internal static string InvalidMethodRva { get; }
    internal static string CantGetOffsetForVirtualHeapHandle { get; }
    internal static string InvalidNumberOfSections { get; }
    internal static string InvalidSignature { get; }
    internal static string PEImageDoesNotHaveMetadata { get; }
    internal static string InvalidCodedIndex { get; }
    internal static string InvalidCompressedInteger { get; }
    internal static string InvalidDocumentName { get; }
    internal static string RowIdOrHeapOffsetTooLarge { get; }
    internal static string EnCMapNotSorted { get; }
    internal static string InvalidSerializedString { get; }
    internal static string StreamTooLarge { get; }
    internal static string ImageTooSmallOrContainsInvalidOffsetOrCount { get; }
    internal static string MetadataStringDecoderEncodingMustBeUtf8 { get; }
    internal static string InvalidConstantValue { get; }
    internal static string InvalidConstantValueOfType { get; }
    internal static string InvalidImportDefinitionKind { get; }
    internal static string ValueTooLarge { get; }
    internal static string BlobTooLarge { get; }
    internal static string InvalidTypeSize { get; }
    internal static string HandleBelongsToFutureGeneration { get; }
    internal static string InvalidRowCount { get; }
    internal static string InvalidEntryPointToken { get; }
    internal static string TooManySubnamespaces { get; }
    internal static string TooManyExceptionRegions { get; }
    internal static string SequencePointValueOutOfRange { get; }
    internal static string InvalidDirectoryRVA { get; }
    internal static string InvalidDirectorySize { get; }
    internal static string InvalidDebugDirectoryEntryCharacteristics { get; }
    internal static string UnexpectedCodeViewDataSignature { get; }
    internal static string UnexpectedEmbeddedPortablePdbDataSignature { get; }
    internal static string InvalidPdbChecksumDataFormat { get; }
    internal static string UnexpectedSignatureHeader { get; }
    internal static string UnexpectedSignatureHeader2 { get; }
    internal static string NotTypeDefOrRefHandle { get; }
    internal static string UnexpectedSignatureTypeCode { get; }
    internal static string SignatureTypeSequenceMustHaveAtLeastOneElement { get; }
    internal static string NotTypeDefOrRefOrSpecHandle { get; }
    internal static string UnexpectedDebugDirectoryType { get; }
    internal static string HeapSizeLimitExceeded { get; }
    internal static string BuilderMustAligned { get; }
    internal static string BuilderAlreadyLinked { get; }
    internal static string ReturnedBuilderSizeTooSmall { get; }
    internal static string SignatureNotVarArg { get; }
    internal static string LabelDoesntBelongToBuilder { get; }
    internal static string ControlFlowBuilderNotAvailable { get; }
    internal static string BaseReaderMustBeFullMetadataReader { get; }
    internal static string ModuleAlreadyAdded { get; }
    internal static string AssemblyAlreadyAdded { get; }
    internal static string ExpectedListOfSize { get; }
    internal static string ExpectedArrayOfSize { get; }
    internal static string ExpectedNonEmptyList { get; }
    internal static string ExpectedNonEmptyArray { get; }
    internal static string ExpectedNonEmptyString { get; }
    internal static string ReadersMustBeDeltaReaders { get; }
    internal static string SignatureProviderReturnedInvalidSignature { get; }
    internal static string UnknownSectionName { get; }
    internal static string HashTooShort { get; }
    internal static string UnexpectedArrayLength { get; }
    internal static string ValueMustBeMultiple { get; }
    internal static string MustNotReturnNull { get; }
    internal static string MetadataVersionTooLong { get; }
    internal static string RowCountMustBeZero { get; }
    internal static string RowCountOutOfRange { get; }
    internal static string SizeMismatch { get; }
    internal static string DataTooBig { get; }
    internal static string UnsupportedFormatVersion { get; }
    internal static string DistanceBetweenInstructionAndLabelTooBig { get; }
    internal static string LabelNotMarked { get; }
    internal static string MethodHasNoExceptionRegions { get; }
    internal static string InvalidExceptionRegionBounds { get; }
    internal static string UnexpectedValue { get; }
    internal static string UnexpectedValueUnknownType { get; }
    internal static string SwitchInstructionEncoderTooFewBranches { get; }
    internal static string SwitchInstructionEncoderTooManyBranches { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, Object[] args);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ImageTooSmall();
    internal static string get_InvalidCorHeaderSize();
    internal static string get_InvalidHandle();
    internal static string get_UnexpectedHandleKind();
    internal static string get_UnexpectedOpCode();
    internal static string get_InvalidLocalSignatureToken();
    internal static string get_InvalidMetadataSectionSpan();
    internal static string get_InvalidMethodHeader1();
    internal static string get_InvalidMethodHeader2();
    internal static string get_InvalidPESignature();
    internal static string get_InvalidSehHeader();
    internal static string get_InvalidToken();
    internal static string get_MetadataImageDoesNotRepresentAnAssembly();
    internal static string get_StandaloneDebugMetadataImageDoesNotContainModuleTable();
    internal static string get_PEImageNotAvailable();
    internal static string get_MissingDataDirectory();
    internal static string get_NotMetadataHeapHandle();
    internal static string get_NotMetadataTableOrUserStringHandle();
    internal static string get_SectionTooSmall();
    internal static string get_StreamMustSupportReadAndSeek();
    internal static string get_UnknownFileFormat();
    internal static string get_UnknownPEMagicValue();
    internal static string get_MetadataTableNotSorted();
    internal static string get_ModuleTableInvalidNumberOfRows();
    internal static string get_UnknownTables();
    internal static string get_IllegalTablesInCompressedMetadataStream();
    internal static string get_TableRowCountSpaceTooSmall();
    internal static string get_OutOfBoundsRead();
    internal static string get_OutOfBoundsWrite();
    internal static string get_MetadataHeaderTooSmall();
    internal static string get_MetadataSignature();
    internal static string get_NotEnoughSpaceForVersionString();
    internal static string get_StreamHeaderTooSmall();
    internal static string get_NotEnoughSpaceForStreamHeaderName();
    internal static string get_NotEnoughSpaceForStringStream();
    internal static string get_NotEnoughSpaceForBlobStream();
    internal static string get_NotEnoughSpaceForGUIDStream();
    internal static string get_NotEnoughSpaceForMetadataStream();
    internal static string get_InvalidMetadataStreamFormat();
    internal static string get_MetadataTablesTooSmall();
    internal static string get_MetadataTableHeaderTooSmall();
    internal static string get_WinMDMissingMscorlibRef();
    internal static string get_UnexpectedStreamEnd();
    internal static string get_InvalidMethodRva();
    internal static string get_CantGetOffsetForVirtualHeapHandle();
    internal static string get_InvalidNumberOfSections();
    internal static string get_InvalidSignature();
    internal static string get_PEImageDoesNotHaveMetadata();
    internal static string get_InvalidCodedIndex();
    internal static string get_InvalidCompressedInteger();
    internal static string get_InvalidDocumentName();
    internal static string get_RowIdOrHeapOffsetTooLarge();
    internal static string get_EnCMapNotSorted();
    internal static string get_InvalidSerializedString();
    internal static string get_StreamTooLarge();
    internal static string get_ImageTooSmallOrContainsInvalidOffsetOrCount();
    internal static string get_MetadataStringDecoderEncodingMustBeUtf8();
    internal static string get_InvalidConstantValue();
    internal static string get_InvalidConstantValueOfType();
    internal static string get_InvalidImportDefinitionKind();
    internal static string get_ValueTooLarge();
    internal static string get_BlobTooLarge();
    internal static string get_InvalidTypeSize();
    internal static string get_HandleBelongsToFutureGeneration();
    internal static string get_InvalidRowCount();
    internal static string get_InvalidEntryPointToken();
    internal static string get_TooManySubnamespaces();
    internal static string get_TooManyExceptionRegions();
    internal static string get_SequencePointValueOutOfRange();
    internal static string get_InvalidDirectoryRVA();
    internal static string get_InvalidDirectorySize();
    internal static string get_InvalidDebugDirectoryEntryCharacteristics();
    internal static string get_UnexpectedCodeViewDataSignature();
    internal static string get_UnexpectedEmbeddedPortablePdbDataSignature();
    internal static string get_InvalidPdbChecksumDataFormat();
    internal static string get_UnexpectedSignatureHeader();
    internal static string get_UnexpectedSignatureHeader2();
    internal static string get_NotTypeDefOrRefHandle();
    internal static string get_UnexpectedSignatureTypeCode();
    internal static string get_SignatureTypeSequenceMustHaveAtLeastOneElement();
    internal static string get_NotTypeDefOrRefOrSpecHandle();
    internal static string get_UnexpectedDebugDirectoryType();
    internal static string get_HeapSizeLimitExceeded();
    internal static string get_BuilderMustAligned();
    internal static string get_BuilderAlreadyLinked();
    internal static string get_ReturnedBuilderSizeTooSmall();
    internal static string get_SignatureNotVarArg();
    internal static string get_LabelDoesntBelongToBuilder();
    internal static string get_ControlFlowBuilderNotAvailable();
    internal static string get_BaseReaderMustBeFullMetadataReader();
    internal static string get_ModuleAlreadyAdded();
    internal static string get_AssemblyAlreadyAdded();
    internal static string get_ExpectedListOfSize();
    internal static string get_ExpectedArrayOfSize();
    internal static string get_ExpectedNonEmptyList();
    internal static string get_ExpectedNonEmptyArray();
    internal static string get_ExpectedNonEmptyString();
    internal static string get_ReadersMustBeDeltaReaders();
    internal static string get_SignatureProviderReturnedInvalidSignature();
    internal static string get_UnknownSectionName();
    internal static string get_HashTooShort();
    internal static string get_UnexpectedArrayLength();
    internal static string get_ValueMustBeMultiple();
    internal static string get_MustNotReturnNull();
    internal static string get_MetadataVersionTooLong();
    internal static string get_RowCountMustBeZero();
    internal static string get_RowCountOutOfRange();
    internal static string get_SizeMismatch();
    internal static string get_DataTooBig();
    internal static string get_UnsupportedFormatVersion();
    internal static string get_DistanceBetweenInstructionAndLabelTooBig();
    internal static string get_LabelNotMarked();
    internal static string get_MethodHasNoExceptionRegions();
    internal static string get_InvalidExceptionRegionBounds();
    internal static string get_UnexpectedValue();
    internal static string get_UnexpectedValueUnknownType();
    internal static string get_SwitchInstructionEncoderTooFewBranches();
    internal static string get_SwitchInstructionEncoderTooManyBranches();
}
public class Xamarin.Android.BuildTools.PrepTasks.XASleepInternal : AndroidAsyncTask {
    [CompilerGeneratedAttribute]
private int <Milliseconds>k__BackingField;
    public string TaskPrefix { get; }
    public int Milliseconds { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public int get_Milliseconds();
    [CompilerGeneratedAttribute]
public void set_Milliseconds(int value);
    public virtual Task RunTaskAsync();
}
internal class Xamarin.Android.Manifest.ManifestDocumentElement : object {
    public static string ToString(TypeDefinition typeDef, TypeDefinitionCache cache);
    public static TypeDefinition ResolveType(string type, ICustomAttributeProvider provider, IAssemblyResolver resolver);
}
internal class Xamarin.Android.Manifest.ManifestDocumentElement`1 : ManifestDocumentElement {
    public string Element;
    private IDictionary`2<string, MappingInfo<T>> Mappings;
    private static Dictionary`2<Type, Func`6<object, ICustomAttributeProvider, IAssemblyResolver, int, TypeDefinitionCache, string>> ValueConverters;
    public ManifestDocumentElement`1(string element);
    private static ManifestDocumentElement`1();
    public void Add(string member, string attributeName, Func`2<T, object> getter, Action`2<T, object> setter, Type memberType);
    public void Add(string member, string attributeName, Action`2<T, object> setter, Func`2<T, string> attributeValue);
    public void Add(string member, string attributeName, Action`2<T, object> setter, Func`5<T, ICustomAttributeProvider, IAssemblyResolver, TypeDefinitionCache, string> attributeValue);
    public ICollection`1<string> Load(T value, CustomAttribute attribute);
    public XElement ToElement(T value, ICollection`1<string> specified, string packageName, TypeDefinitionCache cache, ICustomAttributeProvider provider, IAssemblyResolver resolver, int targetSdkVersion);
    private XAttribute ToAttribute(string name, T value, string packageName, ICustomAttributeProvider provider, IAssemblyResolver resolver, TypeDefinitionCache cache, int targetSdkVersion);
    private string ToAttributeValue(string name, T value, ICustomAttributeProvider provider, IAssemblyResolver resolver, TypeDefinitionCache cache, int targetSdkVersion);
    private static string ToString(bool value);
    private static string ToString(ActivityPersistableMode value);
    private static string ToString(ConfigChanges value);
    private static string ToString(DocumentLaunchMode value);
    private static string ToString(LaunchMode value);
    private static string ToString(Protection value);
    private static string ToString(ScreenOrientation value, int targetSdkVersion);
    private static string ToString(SoftInput value);
    private static string ToString(UiOptions value);
    private static string ToString(WindowRotationAnimation value);
    private static string ToString(string value, ICustomAttributeProvider provider, IAssemblyResolver resolver, TypeDefinitionCache cache);
    private static string ToString(ForegroundService value);
    private sealed virtual override IEnumerator`1<string> System.Collections.Generic.IEnumerable<System.String>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Xamarin.Android.Tasks.Aapt : AndroidAsyncTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <AdditionalAndroidResourcePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidComponentResgenFlagFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <AndroidManifestFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NonConstantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssetDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ManifestFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceOutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaDesignerOutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaPlatformJarPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UncompressedFileExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtraPackages>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AdditionalResourceDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <LibraryProjectJars>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtraArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolExe>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AndroidUseLatestPlatformSdk>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SupportedAbis>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreatePackagePerAbi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImportsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputImportDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyIdentityMapFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionCodePattern>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionCodeProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidSdkPlatform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceSymbolsTextFileDirectory>k__BackingField;
    private Dictionary`2<string, string> _resource_name_case_map;
    private AssemblyIdentityMap assemblyMap;
    private string resourceDirectory;
    private static List`1<Tuple`2<string, string>> error_codes;
    public string TaskPrefix { get; }
    public ITaskItem[] AdditionalAndroidResourcePaths { get; public set; }
    public string AndroidComponentResgenFlagFile { get; public set; }
    public ITaskItem AndroidManifestFile { get; public set; }
    public bool NonConstantId { get; public set; }
    public string AssetDirectory { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ManifestFiles { get; public set; }
    [RequiredAttribute]
public string ResourceDirectory { get; public set; }
    public string ResourceOutputFile { get; public set; }
    [RequiredAttribute]
public string JavaDesignerOutputDirectory { get; public set; }
    [RequiredAttribute]
public string JavaPlatformJarPath { get; public set; }
    public string UncompressedFileExtensions { get; public set; }
    public string PackageName { get; public set; }
    public string ExtraPackages { get; public set; }
    public ITaskItem[] AdditionalResourceDirectories { get; public set; }
    public ITaskItem[] LibraryProjectJars { get; public set; }
    public string ExtraArgs { get; public set; }
    protected string ToolName { get; }
    public string ToolPath { get; public set; }
    public string ToolExe { get; public set; }
    public string ApiLevel { get; public set; }
    public bool AndroidUseLatestPlatformSdk { get; public set; }
    public String[] SupportedAbis { get; public set; }
    public bool CreatePackagePerAbi { get; public set; }
    public string ImportsDirectory { get; public set; }
    public string OutputImportDirectory { get; public set; }
    public string AssemblyIdentityMapFile { get; public set; }
    public string VersionCodePattern { get; public set; }
    public string VersionCodeProperties { get; public set; }
    public string AndroidSdkPlatform { get; public set; }
    public string ResourceSymbolsTextFileDirectory { get; public set; }
    private Dictionary`2<string, string> resource_name_case_map { get; }
    private static Aapt();
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AdditionalAndroidResourcePaths();
    [CompilerGeneratedAttribute]
public void set_AdditionalAndroidResourcePaths(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_AndroidComponentResgenFlagFile();
    [CompilerGeneratedAttribute]
public void set_AndroidComponentResgenFlagFile(string value);
    [CompilerGeneratedAttribute]
public ITaskItem get_AndroidManifestFile();
    [CompilerGeneratedAttribute]
public void set_AndroidManifestFile(ITaskItem value);
    [CompilerGeneratedAttribute]
public bool get_NonConstantId();
    [CompilerGeneratedAttribute]
public void set_NonConstantId(bool value);
    [CompilerGeneratedAttribute]
public string get_AssetDirectory();
    [CompilerGeneratedAttribute]
public void set_AssetDirectory(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ManifestFiles();
    [CompilerGeneratedAttribute]
public void set_ManifestFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_ResourceDirectory();
    [CompilerGeneratedAttribute]
public void set_ResourceDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_ResourceOutputFile();
    [CompilerGeneratedAttribute]
public void set_ResourceOutputFile(string value);
    [CompilerGeneratedAttribute]
public string get_JavaDesignerOutputDirectory();
    [CompilerGeneratedAttribute]
public void set_JavaDesignerOutputDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_JavaPlatformJarPath();
    [CompilerGeneratedAttribute]
public void set_JavaPlatformJarPath(string value);
    [CompilerGeneratedAttribute]
public string get_UncompressedFileExtensions();
    [CompilerGeneratedAttribute]
public void set_UncompressedFileExtensions(string value);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    [CompilerGeneratedAttribute]
public string get_ExtraPackages();
    [CompilerGeneratedAttribute]
public void set_ExtraPackages(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AdditionalResourceDirectories();
    [CompilerGeneratedAttribute]
public void set_AdditionalResourceDirectories(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_LibraryProjectJars();
    [CompilerGeneratedAttribute]
public void set_LibraryProjectJars(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_ExtraArgs();
    [CompilerGeneratedAttribute]
public void set_ExtraArgs(string value);
    protected string get_ToolName();
    [CompilerGeneratedAttribute]
public string get_ToolPath();
    [CompilerGeneratedAttribute]
public void set_ToolPath(string value);
    [CompilerGeneratedAttribute]
public string get_ToolExe();
    [CompilerGeneratedAttribute]
public void set_ToolExe(string value);
    [CompilerGeneratedAttribute]
public string get_ApiLevel();
    [CompilerGeneratedAttribute]
public void set_ApiLevel(string value);
    [CompilerGeneratedAttribute]
public bool get_AndroidUseLatestPlatformSdk();
    [CompilerGeneratedAttribute]
public void set_AndroidUseLatestPlatformSdk(bool value);
    [CompilerGeneratedAttribute]
public String[] get_SupportedAbis();
    [CompilerGeneratedAttribute]
public void set_SupportedAbis(String[] value);
    [CompilerGeneratedAttribute]
public bool get_CreatePackagePerAbi();
    [CompilerGeneratedAttribute]
public void set_CreatePackagePerAbi(bool value);
    [CompilerGeneratedAttribute]
public string get_ImportsDirectory();
    [CompilerGeneratedAttribute]
public void set_ImportsDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_OutputImportDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputImportDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyIdentityMapFile();
    [CompilerGeneratedAttribute]
public void set_AssemblyIdentityMapFile(string value);
    [CompilerGeneratedAttribute]
public string get_VersionCodePattern();
    [CompilerGeneratedAttribute]
public void set_VersionCodePattern(string value);
    [CompilerGeneratedAttribute]
public string get_VersionCodeProperties();
    [CompilerGeneratedAttribute]
public void set_VersionCodeProperties(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidSdkPlatform();
    [CompilerGeneratedAttribute]
public void set_AndroidSdkPlatform(string value);
    [CompilerGeneratedAttribute]
public string get_ResourceSymbolsTextFileDirectory();
    [CompilerGeneratedAttribute]
public void set_ResourceSymbolsTextFileDirectory(string value);
    private Dictionary`2<string, string> get_resource_name_case_map();
    private bool ManifestIsUpToDate(string manifestFile);
    private bool RunAapt(string commandLine, IList`1<OutputLine> output);
    private bool ExecuteForAbi(string cmd, string currentResourceOutputFile);
    private void ProcessManifest(ITaskItem manifestFile);
    public virtual Task RunTaskAsync();
    protected string GenerateCommandLineCommands(string ManifestFile, string currentAbi, string currentResourceOutputFile);
    protected string GenerateFullPathToTool();
    protected void LogEventsFromTextOutput(string singleLine, MessageImportance messageImportance, bool apptResult);
    private static string GetErrorCode(string message);
}
public abstract class Xamarin.Android.Tasks.Aapt2 : AndroidAsyncTask {
    private static int MAX_PATH;
    private static int ASCII_MAX_CHAR;
    private static int DefaultMaxAapt2Daemons;
    protected Dictionary`2<string, string> _resource_name_case_map;
    [CompilerGeneratedAttribute]
private int <DaemonMaxInstanceCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DaemonKeepInDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResourceDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <AndroidManifestFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceSymbolsTextFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolExe>k__BackingField;
    private Aapt2Daemon daemon;
    private ConcurrentBag`1<long> jobs;
    private static List`1<Tuple`2<string, string>> error_codes;
    private Dictionary`2<string, string> resource_name_case_map { get; }
    protected int ProcessorCount { get; }
    public int DaemonMaxInstanceCount { get; public set; }
    public bool DaemonKeepInDomain { get; public set; }
    public ITaskItem[] ResourceDirectories { get; public set; }
    public ITaskItem AndroidManifestFile { get; public set; }
    public string ResourceSymbolsTextFile { get; public set; }
    protected string ToolName { get; }
    public string ToolPath { get; public set; }
    public string ToolExe { get; public set; }
    internal Aapt2Daemon Daemon { get; }
    private static Aapt2();
    private Dictionary`2<string, string> get_resource_name_case_map();
    protected virtual int get_ProcessorCount();
    [CompilerGeneratedAttribute]
public int get_DaemonMaxInstanceCount();
    [CompilerGeneratedAttribute]
public void set_DaemonMaxInstanceCount(int value);
    [CompilerGeneratedAttribute]
public bool get_DaemonKeepInDomain();
    [CompilerGeneratedAttribute]
public void set_DaemonKeepInDomain(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResourceDirectories();
    [CompilerGeneratedAttribute]
public void set_ResourceDirectories(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem get_AndroidManifestFile();
    [CompilerGeneratedAttribute]
public void set_AndroidManifestFile(ITaskItem value);
    [CompilerGeneratedAttribute]
public string get_ResourceSymbolsTextFile();
    [CompilerGeneratedAttribute]
public void set_ResourceSymbolsTextFile(string value);
    protected string get_ToolName();
    [CompilerGeneratedAttribute]
public string get_ToolPath();
    [CompilerGeneratedAttribute]
public void set_ToolPath(string value);
    [CompilerGeneratedAttribute]
public string get_ToolExe();
    [CompilerGeneratedAttribute]
public void set_ToolExe(string value);
    public static bool IsInvalidFilename(string path);
    protected string ResourceDirectoryFullPath(string resourceDirectory);
    protected string GetFullPath(string dir);
    protected string GenerateFullPathToTool();
    protected virtual int GetRequiredDaemonInstances();
    internal Aapt2Daemon get_Daemon();
    public virtual bool Execute();
    protected long RunAapt(String[] args, string outputFile);
    protected void ProcessOutput();
    protected bool LogAapt2EventsFromOutput(string singleLine, MessageImportance messageImportance, bool apptResult);
    private bool LogNotesOrWarnings(string message, string singleLine, MessageImportance messageImportance);
    private static bool IsFilePathToLong(string filePath);
    private static bool IsPathOnlyASCII(string filePath);
    private static string AddAdditionalErrorText(string errorCode, string message);
    private static string GetErrorCodeForFile(string message, string filePath);
    private static string GetErrorCode(string message);
}
public class Xamarin.Android.Tasks.Aapt2Compile : Aapt2 {
    private List`1<ITaskItem> archives;
    private List`1<ITaskItem> files;
    [CompilerGeneratedAttribute]
private string <ExtraArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FlatArchivesDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FlatFilesDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResourcesToCompile>k__BackingField;
    public string TaskPrefix { get; }
    public string ExtraArgs { get; public set; }
    public string FlatArchivesDirectory { get; public set; }
    public string FlatFilesDirectory { get; public set; }
    public ITaskItem[] ResourcesToCompile { get; public set; }
    [OutputAttribute]
public ITaskItem[] CompiledResourceFlatArchives { get; }
    [OutputAttribute]
public ITaskItem[] CompiledResourceFlatFiles { get; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_ExtraArgs();
    [CompilerGeneratedAttribute]
public void set_ExtraArgs(string value);
    [CompilerGeneratedAttribute]
public string get_FlatArchivesDirectory();
    [CompilerGeneratedAttribute]
public void set_FlatArchivesDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_FlatFilesDirectory();
    [CompilerGeneratedAttribute]
public void set_FlatFilesDirectory(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResourcesToCompile();
    [CompilerGeneratedAttribute]
public void set_ResourcesToCompile(ITaskItem[] value);
    public ITaskItem[] get_CompiledResourceFlatArchives();
    public ITaskItem[] get_CompiledResourceFlatFiles();
    protected virtual int GetRequiredDaemonInstances();
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.Aapt2Compile/<RunTaskAsync>d__25")]
public virtual Task RunTaskAsync();
    private void ProcessDirectory(ITaskItem item, object lockObject);
    protected String[] GenerateCommandLineCommands(string fileOrDirectory, bool isDirectory, bool isArchive, string outputArchive);
}
internal class Xamarin.Android.Tasks.Aapt2Daemon : object {
    private static string TypeFullName;
    private object lockObject;
    private BlockingCollection`1<Job> pendingJobs;
    private ConcurrentDictionary`2<long, Job> jobs;
    private CancellationTokenSource tcs;
    private ConcurrentBag`1<Thread> daemons;
    private long jobsRunning;
    private long jobId;
    private int maxInstances;
    private Action`1<string> logger;
    [CompilerGeneratedAttribute]
private string <Aapt2>k__BackingField;
    internal static object RegisterTaskObjectKey { get; }
    public CancellationToken Token { get; }
    public bool JobsInQueue { get; }
    public bool JobsRunning { get; }
    public string Aapt2 { get; private set; }
    public string ToolName { get; }
    public int MaxInstances { get; }
    public int CurrentInstances { get; }
    public Aapt2Daemon(string aapt2, int maxNumberOfInstances, int initalNumberOfDaemons, Action`1<string> log);
    private static Aapt2Daemon();
    internal static object get_RegisterTaskObjectKey();
    public static Aapt2Daemon GetInstance(IBuildEngine4 engine, Action`1<string> log, string aapt2, int numberOfInstances, int initalNumberOfDaemons, bool registerInDomain);
    public CancellationToken get_Token();
    public bool get_JobsInQueue();
    public bool get_JobsRunning();
    [CompilerGeneratedAttribute]
public string get_Aapt2();
    [CompilerGeneratedAttribute]
private void set_Aapt2(string value);
    public string get_ToolName();
    public int get_MaxInstances();
    public int get_CurrentInstances();
    private void SpawnAapt2Daemon();
    public sealed virtual void Dispose();
    public long QueueCommand(String[] job, string outputFile, CancellationToken token);
    public bool JobSucceded(long jobid);
    public Job[] WaitForJobsToComplete(IEnumerable`1<long> jobIds);
    public void Stop();
    private bool SetConsoleInputEncoding(Encoding encoding);
    private bool SetProcessInputEncoding(ProcessStartInfo info, Encoding encoding);
    private void Aapt2DaemonStart();
    private bool IsAapt2Warning(string singleLine);
}
public class Xamarin.Android.Tasks.Aapt2Link : Aapt2 {
    private static Regex exraArgSplitRegEx;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ManifestFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaPlatformJarPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AdditionalResourceArchives>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AdditionalAndroidResourcePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <LibraryProjectJars>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <CompiledResourceFlatArchive>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <CompiledResourceFlatFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidComponentResgenFlagFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssetsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AdditionalAndroidAssetPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtraPackages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtraArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreatePackagePerAbi>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SupportedAbis>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaDesignerOutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UncompressedFileExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidSdkPlatform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionCodePattern>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionCodeProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyIdentityMapFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputImportDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImportsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NonConstantId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProtobufFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProguardRuleOutput>k__BackingField;
    private AssemblyIdentityMap assemblyMap;
    private List`1<string> tempFiles;
    private SortedSet`1<string> rulesFiles;
    private Dictionary`2<string, long> apks;
    private string resourceSymbolsTextFileTemp;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] ManifestFiles { get; public set; }
    [RequiredAttribute]
public string JavaPlatformJarPath { get; public set; }
    public string PackageName { get; public set; }
    public ITaskItem[] AdditionalResourceArchives { get; public set; }
    public ITaskItem[] AdditionalAndroidResourcePaths { get; public set; }
    public ITaskItem[] LibraryProjectJars { get; public set; }
    public ITaskItem CompiledResourceFlatArchive { get; public set; }
    public ITaskItem[] CompiledResourceFlatFiles { get; public set; }
    public string AndroidComponentResgenFlagFile { get; public set; }
    public string AssetsDirectory { get; public set; }
    public ITaskItem[] AdditionalAndroidAssetPaths { get; public set; }
    public string ExtraPackages { get; public set; }
    public string ExtraArgs { get; public set; }
    public bool CreatePackagePerAbi { get; public set; }
    public String[] SupportedAbis { get; public set; }
    public string OutputFile { get; public set; }
    public string JavaDesignerOutputDirectory { get; public set; }
    public string UncompressedFileExtensions { get; public set; }
    public string AndroidSdkPlatform { get; public set; }
    public string VersionCodePattern { get; public set; }
    public string VersionCodeProperties { get; public set; }
    public string AssemblyIdentityMapFile { get; public set; }
    public string OutputImportDirectory { get; public set; }
    public string ImportsDirectory { get; public set; }
    public bool NonConstantId { get; public set; }
    public bool ProtobufFormat { get; public set; }
    public string ProguardRuleOutput { get; public set; }
    private static Aapt2Link();
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ManifestFiles();
    [CompilerGeneratedAttribute]
public void set_ManifestFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_JavaPlatformJarPath();
    [CompilerGeneratedAttribute]
public void set_JavaPlatformJarPath(string value);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AdditionalResourceArchives();
    [CompilerGeneratedAttribute]
public void set_AdditionalResourceArchives(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AdditionalAndroidResourcePaths();
    [CompilerGeneratedAttribute]
public void set_AdditionalAndroidResourcePaths(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_LibraryProjectJars();
    [CompilerGeneratedAttribute]
public void set_LibraryProjectJars(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem get_CompiledResourceFlatArchive();
    [CompilerGeneratedAttribute]
public void set_CompiledResourceFlatArchive(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_CompiledResourceFlatFiles();
    [CompilerGeneratedAttribute]
public void set_CompiledResourceFlatFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_AndroidComponentResgenFlagFile();
    [CompilerGeneratedAttribute]
public void set_AndroidComponentResgenFlagFile(string value);
    [CompilerGeneratedAttribute]
public string get_AssetsDirectory();
    [CompilerGeneratedAttribute]
public void set_AssetsDirectory(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AdditionalAndroidAssetPaths();
    [CompilerGeneratedAttribute]
public void set_AdditionalAndroidAssetPaths(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_ExtraPackages();
    [CompilerGeneratedAttribute]
public void set_ExtraPackages(string value);
    [CompilerGeneratedAttribute]
public string get_ExtraArgs();
    [CompilerGeneratedAttribute]
public void set_ExtraArgs(string value);
    [CompilerGeneratedAttribute]
public bool get_CreatePackagePerAbi();
    [CompilerGeneratedAttribute]
public void set_CreatePackagePerAbi(bool value);
    [CompilerGeneratedAttribute]
public String[] get_SupportedAbis();
    [CompilerGeneratedAttribute]
public void set_SupportedAbis(String[] value);
    [CompilerGeneratedAttribute]
public string get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(string value);
    [CompilerGeneratedAttribute]
public string get_JavaDesignerOutputDirectory();
    [CompilerGeneratedAttribute]
public void set_JavaDesignerOutputDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_UncompressedFileExtensions();
    [CompilerGeneratedAttribute]
public void set_UncompressedFileExtensions(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidSdkPlatform();
    [CompilerGeneratedAttribute]
public void set_AndroidSdkPlatform(string value);
    [CompilerGeneratedAttribute]
public string get_VersionCodePattern();
    [CompilerGeneratedAttribute]
public void set_VersionCodePattern(string value);
    [CompilerGeneratedAttribute]
public string get_VersionCodeProperties();
    [CompilerGeneratedAttribute]
public void set_VersionCodeProperties(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyIdentityMapFile();
    [CompilerGeneratedAttribute]
public void set_AssemblyIdentityMapFile(string value);
    [CompilerGeneratedAttribute]
public string get_OutputImportDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputImportDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_ImportsDirectory();
    [CompilerGeneratedAttribute]
public void set_ImportsDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_NonConstantId();
    [CompilerGeneratedAttribute]
public void set_NonConstantId(bool value);
    [CompilerGeneratedAttribute]
public bool get_ProtobufFormat();
    [CompilerGeneratedAttribute]
public void set_ProtobufFormat(bool value);
    [CompilerGeneratedAttribute]
public string get_ProguardRuleOutput();
    [CompilerGeneratedAttribute]
public void set_ProguardRuleOutput(string value);
    protected virtual int GetRequiredDaemonInstances();
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.Aapt2Link/<RunTaskAsync>d__117")]
public virtual Task RunTaskAsync();
    private String[] GenerateCommandLineCommands(string ManifestFile, string currentAbi, string currentResourceOutputFile);
    private bool ExecuteForAbi(String[] cmd, string currentResourceOutputFile);
    private bool ManifestIsUpToDate(string manifestFile);
    private void ProcessManifest(ITaskItem manifestFile);
    private string GetManifestRulesFile(string manifestDir);
    private string GetTempFile();
}
public class Xamarin.Android.Tasks.AdjustJavacVersionArguments : AndroidTask {
    [CompilerGeneratedAttribute]
private string <JdkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultJdkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableMultiDex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipJavacVersionCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceVersion>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string JdkVersion { get; public set; }
    [RequiredAttribute]
public string DefaultJdkVersion { get; public set; }
    public bool EnableMultiDex { get; public set; }
    public bool SkipJavacVersionCheck { get; public set; }
    [OutputAttribute]
public string TargetVersion { get; public set; }
    [OutputAttribute]
public string SourceVersion { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_JdkVersion();
    [CompilerGeneratedAttribute]
public void set_JdkVersion(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultJdkVersion();
    [CompilerGeneratedAttribute]
public void set_DefaultJdkVersion(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableMultiDex();
    [CompilerGeneratedAttribute]
public void set_EnableMultiDex(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipJavacVersionCheck();
    [CompilerGeneratedAttribute]
public void set_SkipJavacVersionCheck(bool value);
    [CompilerGeneratedAttribute]
public string get_TargetVersion();
    [CompilerGeneratedAttribute]
public void set_TargetVersion(string value);
    [CompilerGeneratedAttribute]
public string get_SourceVersion();
    [CompilerGeneratedAttribute]
public void set_SourceVersion(string value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.AndroidAdb : AndroidToolTask {
    [CompilerGeneratedAttribute]
private string <AdbTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Result>k__BackingField;
    public string TaskPrefix { get; }
    public string AdbTarget { get; public set; }
    public string Command { get; public set; }
    public string Arguments { get; public set; }
    public bool IgnoreErrors { get; public set; }
    [OutputAttribute]
public bool Result { get; public set; }
    protected string ToolName { get; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_AdbTarget();
    [CompilerGeneratedAttribute]
public void set_AdbTarget(string value);
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(string value);
    [CompilerGeneratedAttribute]
public string get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(string value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreErrors();
    [CompilerGeneratedAttribute]
public void set_IgnoreErrors(bool value);
    [CompilerGeneratedAttribute]
public bool get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(bool value);
    protected virtual string get_ToolName();
    protected virtual string GenerateFullPathToTool();
    protected virtual string GenerateCommandLineCommands();
    protected virtual bool HandleTaskExecutionErrors();
    protected virtual void LogEventsFromTextOutput(string singleLine, MessageImportance messageImportance);
}
public class Xamarin.Android.Tasks.AndroidApkSigner : JavaToolTask {
    [CompilerGeneratedAttribute]
private string <ApkSignerJar>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApkToSign>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <ManifestFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyStore>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlatformKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlatformCert>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyPass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorePass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalArguments>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string ApkSignerJar { get; public set; }
    [RequiredAttribute]
public string ApkToSign { get; public set; }
    [RequiredAttribute]
public ITaskItem ManifestFile { get; public set; }
    public string KeyStore { get; public set; }
    public string KeyAlias { get; public set; }
    public string PlatformKey { get; public set; }
    public string PlatformCert { get; public set; }
    public string KeyPass { get; public set; }
    public string StorePass { get; public set; }
    public string AdditionalArguments { get; public set; }
    protected string ToolName { get; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_ApkSignerJar();
    [CompilerGeneratedAttribute]
public void set_ApkSignerJar(string value);
    [CompilerGeneratedAttribute]
public string get_ApkToSign();
    [CompilerGeneratedAttribute]
public void set_ApkToSign(string value);
    [CompilerGeneratedAttribute]
public ITaskItem get_ManifestFile();
    [CompilerGeneratedAttribute]
public void set_ManifestFile(ITaskItem value);
    [CompilerGeneratedAttribute]
public string get_KeyStore();
    [CompilerGeneratedAttribute]
public void set_KeyStore(string value);
    [CompilerGeneratedAttribute]
public string get_KeyAlias();
    [CompilerGeneratedAttribute]
public void set_KeyAlias(string value);
    [CompilerGeneratedAttribute]
public string get_PlatformKey();
    [CompilerGeneratedAttribute]
public void set_PlatformKey(string value);
    [CompilerGeneratedAttribute]
public string get_PlatformCert();
    [CompilerGeneratedAttribute]
public void set_PlatformCert(string value);
    [CompilerGeneratedAttribute]
public string get_KeyPass();
    [CompilerGeneratedAttribute]
public void set_KeyPass(string value);
    [CompilerGeneratedAttribute]
public string get_StorePass();
    [CompilerGeneratedAttribute]
public void set_StorePass(string value);
    [CompilerGeneratedAttribute]
public string get_AdditionalArguments();
    [CompilerGeneratedAttribute]
public void set_AdditionalArguments(string value);
    private void AddStorePass(CommandLineBuilder cmd, string cmdLineSwitch, string value);
    protected virtual string GenerateCommandLineCommands();
    protected virtual void LogEventsFromTextOutput(string singleLine, MessageImportance importance);
    protected virtual string get_ToolName();
    protected virtual bool ValidateParameters();
}
public class Xamarin.Android.Tasks.AndroidComputeResPaths : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResourceFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefixes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LowercaseFilenames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidLibraryFlatFilesDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <IntermediateFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedResourceFiles>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] ResourceFiles { get; public set; }
    [RequiredAttribute]
public string IntermediateDir { get; public set; }
    public string Prefixes { get; public set; }
    public bool LowercaseFilenames { get; public set; }
    public string ProjectDir { get; public set; }
    public string AndroidLibraryFlatFilesDirectory { get; public set; }
    [OutputAttribute]
public ITaskItem[] IntermediateFiles { get; public set; }
    [OutputAttribute]
public ITaskItem[] ResolvedResourceFiles { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResourceFiles();
    [CompilerGeneratedAttribute]
public void set_ResourceFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_IntermediateDir();
    [CompilerGeneratedAttribute]
public void set_IntermediateDir(string value);
    [CompilerGeneratedAttribute]
public string get_Prefixes();
    [CompilerGeneratedAttribute]
public void set_Prefixes(string value);
    [CompilerGeneratedAttribute]
public bool get_LowercaseFilenames();
    [CompilerGeneratedAttribute]
public void set_LowercaseFilenames(bool value);
    [CompilerGeneratedAttribute]
public string get_ProjectDir();
    [CompilerGeneratedAttribute]
public void set_ProjectDir(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidLibraryFlatFilesDirectory();
    [CompilerGeneratedAttribute]
public void set_AndroidLibraryFlatFilesDirectory(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_IntermediateFiles();
    [CompilerGeneratedAttribute]
public void set_IntermediateFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedResourceFiles();
    [CompilerGeneratedAttribute]
public void set_ResolvedResourceFiles(ITaskItem[] value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.AndroidCreateDebugKey : KeyTool {
    [CompilerGeneratedAttribute]
private int <Validity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StoreType>k__BackingField;
    private string dname;
    private bool warnExitCode;
    public string TaskPrefix { get; }
    public int Validity { get; public set; }
    public string KeyAlgorithm { get; public set; }
    public string StoreType { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public int get_Validity();
    [CompilerGeneratedAttribute]
public void set_Validity(int value);
    [CompilerGeneratedAttribute]
public string get_KeyAlgorithm();
    [CompilerGeneratedAttribute]
public void set_KeyAlgorithm(string value);
    [CompilerGeneratedAttribute]
public string get_StoreType();
    [CompilerGeneratedAttribute]
public void set_StoreType(string value);
    protected virtual CommandLineBuilder CreateCommandLine();
    protected virtual void LogFromStandardError(string text);
    protected virtual bool HandleTaskExecutionErrors();
}
public abstract class Xamarin.Android.Tasks.AndroidDotnetToolTask : AndroidToolTask {
    [CompilerGeneratedAttribute]
private string <NetCoreRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedsDotnet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedsMono>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyPath>k__BackingField;
    private static RegisteredTaskObjectLifetime Lifetime;
    private static string MonoKey;
    private static String[] KnownMonoPaths;
    public string NetCoreRoot { get; public set; }
    protected bool NeedsDotnet { get; private set; }
    protected bool NeedsMono { get; private set; }
    protected string AssemblyPath { get; private set; }
    protected string ToolName { get; }
    private static AndroidDotnetToolTask();
    [CompilerGeneratedAttribute]
public string get_NetCoreRoot();
    [CompilerGeneratedAttribute]
public void set_NetCoreRoot(string value);
    [CompilerGeneratedAttribute]
protected bool get_NeedsDotnet();
    [CompilerGeneratedAttribute]
private void set_NeedsDotnet(bool value);
    [CompilerGeneratedAttribute]
protected bool get_NeedsMono();
    [CompilerGeneratedAttribute]
private void set_NeedsMono(bool value);
    [CompilerGeneratedAttribute]
protected string get_AssemblyPath();
    [CompilerGeneratedAttribute]
private void set_AssemblyPath(string value);
    public virtual bool Execute();
    protected virtual string get_ToolName();
    protected virtual string GenerateFullPathToTool();
    private string FindDotnet();
    private string FindMono();
    protected virtual CommandLineBuilder GetCommandLineBuilder();
}
public class Xamarin.Android.Tasks.AndroidError : Task {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <FormatArguments>k__BackingField;
    [RequiredAttribute]
public string Code { get; public set; }
    [RequiredAttribute]
public string ResourceName { get; public set; }
    public String[] FormatArguments { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_ResourceName();
    [CompilerGeneratedAttribute]
public void set_ResourceName(string value);
    [CompilerGeneratedAttribute]
public String[] get_FormatArguments();
    [CompilerGeneratedAttribute]
public void set_FormatArguments(String[] value);
    public virtual bool Execute();
}
public class Xamarin.Android.Tasks.AndroidSignPackage : AndroidRunToolTask {
    private bool hasWarnings;
    [CompilerGeneratedAttribute]
private string <UnsignedApk>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SignedApkDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyStore>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyPass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorePass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimestampAuthorityUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimestampAuthorityCertificateAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SigningAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DigestAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileSuffix>k__BackingField;
    private static String[] IgnoredWarnings;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string UnsignedApk { get; public set; }
    [RequiredAttribute]
public string SignedApkDirectory { get; public set; }
    [RequiredAttribute]
[OutputAttribute]
public string KeyStore { get; public set; }
    [RequiredAttribute]
public string KeyAlias { get; public set; }
    [RequiredAttribute]
public string KeyPass { get; public set; }
    [RequiredAttribute]
public string StorePass { get; public set; }
    public string TimestampAuthorityUrl { get; public set; }
    public string TimestampAuthorityCertificateAlias { get; public set; }
    [RequiredAttribute]
public string SigningAlgorithm { get; public set; }
    [RequiredAttribute]
public string DigestAlgorithm { get; public set; }
    public string FileSuffix { get; public set; }
    protected string DefaultErrorCode { get; }
    protected string ToolName { get; }
    private static AndroidSignPackage();
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_UnsignedApk();
    [CompilerGeneratedAttribute]
public void set_UnsignedApk(string value);
    [CompilerGeneratedAttribute]
public string get_SignedApkDirectory();
    [CompilerGeneratedAttribute]
public void set_SignedApkDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_KeyStore();
    [CompilerGeneratedAttribute]
public void set_KeyStore(string value);
    [CompilerGeneratedAttribute]
public string get_KeyAlias();
    [CompilerGeneratedAttribute]
public void set_KeyAlias(string value);
    [CompilerGeneratedAttribute]
public string get_KeyPass();
    [CompilerGeneratedAttribute]
public void set_KeyPass(string value);
    [CompilerGeneratedAttribute]
public string get_StorePass();
    [CompilerGeneratedAttribute]
public void set_StorePass(string value);
    [CompilerGeneratedAttribute]
public string get_TimestampAuthorityUrl();
    [CompilerGeneratedAttribute]
public void set_TimestampAuthorityUrl(string value);
    [CompilerGeneratedAttribute]
public string get_TimestampAuthorityCertificateAlias();
    [CompilerGeneratedAttribute]
public void set_TimestampAuthorityCertificateAlias(string value);
    [CompilerGeneratedAttribute]
public string get_SigningAlgorithm();
    [CompilerGeneratedAttribute]
public void set_SigningAlgorithm(string value);
    [CompilerGeneratedAttribute]
public string get_DigestAlgorithm();
    [CompilerGeneratedAttribute]
public void set_DigestAlgorithm(string value);
    [CompilerGeneratedAttribute]
public string get_FileSuffix();
    [CompilerGeneratedAttribute]
public void set_FileSuffix(string value);
    protected virtual string get_DefaultErrorCode();
    private void AddStorePass(CommandLineBuilder cmd, string cmdLineSwitch, string value);
    protected virtual string GenerateCommandLineCommands();
    protected virtual string GenerateFullPathToTool();
    protected virtual void LogEventsFromTextOutput(string singleLine, MessageImportance importance);
    private static bool IsWarningIgnored(string singleLine);
    protected virtual string get_ToolName();
    protected virtual bool ValidateParameters();
}
public class Xamarin.Android.Tasks.AndroidWarning : Task {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <FormatArguments>k__BackingField;
    [RequiredAttribute]
public string Code { get; public set; }
    [RequiredAttribute]
public string ResourceName { get; public set; }
    public String[] FormatArguments { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_ResourceName();
    [CompilerGeneratedAttribute]
public void set_ResourceName(string value);
    [CompilerGeneratedAttribute]
public String[] get_FormatArguments();
    [CompilerGeneratedAttribute]
public void set_FormatArguments(String[] value);
    public virtual bool Execute();
}
public class Xamarin.Android.Tasks.AndroidZipAlign : AndroidRunToolTask {
    [CompilerGeneratedAttribute]
private ITaskItem <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <DestinationDirectory>k__BackingField;
    private int alignment;
    private static string strSignedUnaligned;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem Source { get; public set; }
    [RequiredAttribute]
public ITaskItem DestinationDirectory { get; public set; }
    public int Alignment { get; public set; }
    protected string DefaultErrorCode { get; }
    protected string ToolName { get; }
    private static AndroidZipAlign();
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_DestinationDirectory();
    [CompilerGeneratedAttribute]
public void set_DestinationDirectory(ITaskItem value);
    public int get_Alignment();
    public void set_Alignment(int value);
    protected virtual string get_DefaultErrorCode();
    protected virtual string GenerateCommandLineCommands();
    protected virtual string GenerateFullPathToTool();
    protected virtual string get_ToolName();
    protected virtual void LogEventsFromTextOutput(string singleLine, MessageImportance messageImportance);
}
public class Xamarin.Android.Tasks.Aot : GetAotArguments {
    [CompilerGeneratedAttribute]
private String[] <SupportedAbis>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateAssemblyDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinkMode>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AdditionalNativeLibraryReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtraAotOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AotAdditionalArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <NativeLibrariesReferences>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public String[] SupportedAbis { get; public set; }
    [RequiredAttribute]
public string IntermediateAssemblyDir { get; public set; }
    public string LinkMode { get; public set; }
    public ITaskItem[] AdditionalNativeLibraryReferences { get; public set; }
    public string ExtraAotOptions { get; public set; }
    public string AotAdditionalArguments { get; public set; }
    [OutputAttribute]
public String[] NativeLibrariesReferences { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public String[] get_SupportedAbis();
    [CompilerGeneratedAttribute]
public void set_SupportedAbis(String[] value);
    [CompilerGeneratedAttribute]
public string get_IntermediateAssemblyDir();
    [CompilerGeneratedAttribute]
public void set_IntermediateAssemblyDir(string value);
    [CompilerGeneratedAttribute]
public string get_LinkMode();
    [CompilerGeneratedAttribute]
public void set_LinkMode(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AdditionalNativeLibraryReferences();
    [CompilerGeneratedAttribute]
public void set_AdditionalNativeLibraryReferences(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_ExtraAotOptions();
    [CompilerGeneratedAttribute]
public void set_ExtraAotOptions(string value);
    [CompilerGeneratedAttribute]
public string get_AotAdditionalArguments();
    [CompilerGeneratedAttribute]
public void set_AotAdditionalArguments(string value);
    [CompilerGeneratedAttribute]
public String[] get_NativeLibrariesReferences();
    [CompilerGeneratedAttribute]
public void set_NativeLibrariesReferences(String[] value);
    private static string QuoteFileName(string fileName);
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.Aot/<RunTaskAsync>d__31")]
public virtual Task RunTaskAsync();
    [IteratorStateMachineAttribute("Xamarin.Android.Tasks.Aot/<GetAotConfigs>d__32")]
private IEnumerable`1<Config> GetAotConfigs(NdkTools ndk);
    private bool RunAotCompiler(string assembliesPath, string aotCompiler, string aotOptions, string assembly, string responseFile);
    private void OnAotOutputData(object sender, DataReceivedEventArgs e);
    private void OnAotErrorData(object sender, DataReceivedEventArgs e);
}
public enum Xamarin.Android.Tasks.AotMode : Enum {
    public UInt32 value__;
    public static AotMode None;
    public static AotMode Normal;
    public static AotMode Hybrid;
    public static AotMode Full;
    public static AotMode Interp;
}
public class Xamarin.Android.Tasks.AppendCustomMetadataToItemGroup : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Inputs>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <MetaDataItems>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Output>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] Inputs { get; public set; }
    [RequiredAttribute]
public ITaskItem[] MetaDataItems { get; public set; }
    [OutputAttribute]
public ITaskItem[] Output { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Inputs();
    [CompilerGeneratedAttribute]
public void set_Inputs(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_MetaDataItems();
    [CompilerGeneratedAttribute]
public void set_MetaDataItems(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(ITaskItem[] value);
    public virtual bool RunTask();
}
internal class Xamarin.Android.Tasks.ApplicationConfig : object {
    public bool uses_mono_llvm;
    public bool uses_mono_aot;
    public bool aot_lazy_load;
    public bool uses_assembly_preload;
    public bool broken_exception_transitions;
    public bool instant_run_enabled;
    public bool jni_add_native_method_registration_attribute_present;
    public bool have_runtime_config_blob;
    public bool have_assemblies_blob;
    public bool marshal_methods_enabled;
    public byte bound_stream_io_exception_type;
    public UInt32 package_naming_policy;
    public UInt32 environment_variable_count;
    public UInt32 system_property_count;
    public UInt32 number_of_assemblies_in_apk;
    public UInt32 bundled_assembly_name_width;
    public UInt32 number_of_assembly_store_files;
    public UInt32 number_of_dso_cache_entries;
    public UInt32 android_runtime_jnienv_class_token;
    public UInt32 jnienv_initialize_method_token;
    public UInt32 jnienv_registerjninatives_method_token;
    public UInt32 jni_remapping_replacement_type_count;
    public UInt32 jni_remapping_replacement_method_index_entry_count;
    public UInt32 mono_components_mask;
    public string android_package_name;
}
internal class Xamarin.Android.Tasks.ApplicationConfigNativeAssemblyGenerator : LlvmIrComposer {
    private static ulong FORMAT_TAG;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private SortedDictionary`2<string, string> environmentVariables;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private SortedDictionary`2<string, string> systemProperties;
    private TaskLoggingHelper log;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private StructureInstance application_config;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<StructureInstance`1<DSOCacheEntry>> dsoCache;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<StructureInstance`1<XamarinAndroidBundledAssembly>> xamarinAndroidBundledAssemblies;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private StructureInfo applicationConfigStructureInfo;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private StructureInfo dsoCacheEntryStructureInfo;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private StructureInfo xamarinAndroidBundledAssemblyStructureInfo;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private StructureInfo assemblyStoreSingleAssemblyRuntimeDataStructureinfo;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private StructureInfo assemblyStoreRuntimeDataStructureInfo;
    [CompilerGeneratedAttribute]
private bool <UsesMonoAOT>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsesMonoLLVM>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsesAssemblyPreload>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MonoAOTMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AotEnableLazyLoad>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidPackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BrokenExceptionTransitions>k__BackingField;
    [CompilerGeneratedAttribute]
private BoundExceptionType <BoundExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InstantRunEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <JniAddNativeMethodRegistrationAttributePresent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HaveRuntimeConfigBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HaveAssemblyStore>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfAssembliesInApk>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfAssemblyStoresInApks>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BundledAssemblyNameWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AndroidRuntimeJNIEnvToken>k__BackingField;
    [CompilerGeneratedAttribute]
private int <JNIEnvInitializeToken>k__BackingField;
    [CompilerGeneratedAttribute]
private int <JNIEnvRegisterJniNativesToken>k__BackingField;
    [CompilerGeneratedAttribute]
private int <JniRemappingReplacementTypeCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <JniRemappingReplacementMethodIndexEntryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private MonoComponent <MonoComponents>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageNamingPolicy <PackageNamingPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ITaskItem> <NativeLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MarshalMethodsEnabled>k__BackingField;
    public bool UsesMonoAOT { get; public set; }
    public bool UsesMonoLLVM { get; public set; }
    public bool UsesAssemblyPreload { get; public set; }
    public string MonoAOTMode { get; public set; }
    public bool AotEnableLazyLoad { get; public set; }
    public string AndroidPackageName { get; public set; }
    public bool BrokenExceptionTransitions { get; public set; }
    public BoundExceptionType BoundExceptionType { get; public set; }
    public bool InstantRunEnabled { get; public set; }
    public bool JniAddNativeMethodRegistrationAttributePresent { get; public set; }
    public bool HaveRuntimeConfigBlob { get; public set; }
    public bool HaveAssemblyStore { get; public set; }
    public int NumberOfAssembliesInApk { get; public set; }
    public int NumberOfAssemblyStoresInApks { get; public set; }
    public int BundledAssemblyNameWidth { get; public set; }
    public int AndroidRuntimeJNIEnvToken { get; public set; }
    public int JNIEnvInitializeToken { get; public set; }
    public int JNIEnvRegisterJniNativesToken { get; public set; }
    public int JniRemappingReplacementTypeCount { get; public set; }
    public int JniRemappingReplacementMethodIndexEntryCount { get; public set; }
    public MonoComponent MonoComponents { get; public set; }
    public PackageNamingPolicy PackageNamingPolicy { get; public set; }
    public List`1<ITaskItem> NativeLibraries { get; public set; }
    public bool MarshalMethodsEnabled { get; public set; }
    public ApplicationConfigNativeAssemblyGenerator(IDictionary`2<string, string> environmentVariables, IDictionary`2<string, string> systemProperties, TaskLoggingHelper log);
    [CompilerGeneratedAttribute]
public bool get_UsesMonoAOT();
    [CompilerGeneratedAttribute]
public void set_UsesMonoAOT(bool value);
    [CompilerGeneratedAttribute]
public bool get_UsesMonoLLVM();
    [CompilerGeneratedAttribute]
public void set_UsesMonoLLVM(bool value);
    [CompilerGeneratedAttribute]
public bool get_UsesAssemblyPreload();
    [CompilerGeneratedAttribute]
public void set_UsesAssemblyPreload(bool value);
    [CompilerGeneratedAttribute]
public string get_MonoAOTMode();
    [CompilerGeneratedAttribute]
public void set_MonoAOTMode(string value);
    [CompilerGeneratedAttribute]
public bool get_AotEnableLazyLoad();
    [CompilerGeneratedAttribute]
public void set_AotEnableLazyLoad(bool value);
    [CompilerGeneratedAttribute]
public string get_AndroidPackageName();
    [CompilerGeneratedAttribute]
public void set_AndroidPackageName(string value);
    [CompilerGeneratedAttribute]
public bool get_BrokenExceptionTransitions();
    [CompilerGeneratedAttribute]
public void set_BrokenExceptionTransitions(bool value);
    [CompilerGeneratedAttribute]
public BoundExceptionType get_BoundExceptionType();
    [CompilerGeneratedAttribute]
public void set_BoundExceptionType(BoundExceptionType value);
    [CompilerGeneratedAttribute]
public bool get_InstantRunEnabled();
    [CompilerGeneratedAttribute]
public void set_InstantRunEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_JniAddNativeMethodRegistrationAttributePresent();
    [CompilerGeneratedAttribute]
public void set_JniAddNativeMethodRegistrationAttributePresent(bool value);
    [CompilerGeneratedAttribute]
public bool get_HaveRuntimeConfigBlob();
    [CompilerGeneratedAttribute]
public void set_HaveRuntimeConfigBlob(bool value);
    [CompilerGeneratedAttribute]
public bool get_HaveAssemblyStore();
    [CompilerGeneratedAttribute]
public void set_HaveAssemblyStore(bool value);
    [CompilerGeneratedAttribute]
public int get_NumberOfAssembliesInApk();
    [CompilerGeneratedAttribute]
public void set_NumberOfAssembliesInApk(int value);
    [CompilerGeneratedAttribute]
public int get_NumberOfAssemblyStoresInApks();
    [CompilerGeneratedAttribute]
public void set_NumberOfAssemblyStoresInApks(int value);
    [CompilerGeneratedAttribute]
public int get_BundledAssemblyNameWidth();
    [CompilerGeneratedAttribute]
public void set_BundledAssemblyNameWidth(int value);
    [CompilerGeneratedAttribute]
public int get_AndroidRuntimeJNIEnvToken();
    [CompilerGeneratedAttribute]
public void set_AndroidRuntimeJNIEnvToken(int value);
    [CompilerGeneratedAttribute]
public int get_JNIEnvInitializeToken();
    [CompilerGeneratedAttribute]
public void set_JNIEnvInitializeToken(int value);
    [CompilerGeneratedAttribute]
public int get_JNIEnvRegisterJniNativesToken();
    [CompilerGeneratedAttribute]
public void set_JNIEnvRegisterJniNativesToken(int value);
    [CompilerGeneratedAttribute]
public int get_JniRemappingReplacementTypeCount();
    [CompilerGeneratedAttribute]
public void set_JniRemappingReplacementTypeCount(int value);
    [CompilerGeneratedAttribute]
public int get_JniRemappingReplacementMethodIndexEntryCount();
    [CompilerGeneratedAttribute]
public void set_JniRemappingReplacementMethodIndexEntryCount(int value);
    [CompilerGeneratedAttribute]
public MonoComponent get_MonoComponents();
    [CompilerGeneratedAttribute]
public void set_MonoComponents(MonoComponent value);
    [CompilerGeneratedAttribute]
public PackageNamingPolicy get_PackageNamingPolicy();
    [CompilerGeneratedAttribute]
public void set_PackageNamingPolicy(PackageNamingPolicy value);
    [CompilerGeneratedAttribute]
public List`1<ITaskItem> get_NativeLibraries();
    [CompilerGeneratedAttribute]
public void set_NativeLibraries(List`1<ITaskItem> value);
    [CompilerGeneratedAttribute]
public bool get_MarshalMethodsEnabled();
    [CompilerGeneratedAttribute]
public void set_MarshalMethodsEnabled(bool value);
    protected virtual void Construct(LlvmIrModule module);
    private void AddAssemblyStores(LlvmIrModule module);
    private void HashAndSortDSOCache(LlvmIrVariable variable, LlvmIrModuleTarget target, object state);
    private List`1<StructureInstance`1<DSOCacheEntry>> InitDSOCache();
    private void MapStructures(LlvmIrModule module);
    [CompilerGeneratedAttribute]
internal static void <InitDSOCache>g__AddNameMutations|119_0(string name, <>c__DisplayClass119_0& );
}
internal class Xamarin.Android.Tasks.ApplicationConfigTaskState : object {
    public static string RegisterTaskObjectKey;
    [CompilerGeneratedAttribute]
private bool <JniAddNativeMethodRegistrationAttributePresent>k__BackingField;
    public bool JniAddNativeMethodRegistrationAttributePresent { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_JniAddNativeMethodRegistrationAttributePresent();
    [CompilerGeneratedAttribute]
public void set_JniAddNativeMethodRegistrationAttributePresent(bool value);
}
internal class Xamarin.Android.Tasks.ArchAssemblyStore : AssemblyStore {
    private Dictionary`2<string, List`1<AssemblyStoreAssemblyInfo>> assemblies;
    private HashSet`1<string> seenArchAssemblyNames;
    public ArchAssemblyStore(string apkName, string archiveAssembliesPrefix, TaskLoggingHelper log, UInt32 id, AssemblyStoreGlobalIndex globalIndexCounter);
    public virtual string WriteIndex(List`1<AssemblyStoreIndexEntry> globalIndex);
    public virtual void Add(AssemblyStoreAssemblyInfo blobAssembly);
    public virtual void Generate(string outputDirectory, List`1<AssemblyStoreIndexEntry> globalIndex, List`1<string> blobPaths);
}
internal class Xamarin.Android.Tasks.AssemblyCompression : object {
    private static UInt32 CompressedDataMagic;
    private static ArrayPool`1<byte> bytePool;
    private static AssemblyCompression();
    public static CompressionResult Compress(AssemblyData data, string outputDirectory);
}
internal class Xamarin.Android.Tasks.AssemblyIdentityMap : object {
    private List`1<string> map;
    public void Load(string mapFile);
    public string GetLibraryImportDirectoryNameForAssembly(string assemblyIdentity);
    public string GetAssemblyNameForImportDirectory(string dir);
    public void Save(string mapFile);
}
internal abstract class Xamarin.Android.Tasks.AssemblyStore : object {
    private static UInt32 BlobMagic;
    private static UInt32 BlobVersion;
    private static UInt32 BlobBundledAssemblyNativeStructSize;
    private static UInt32 BlobHashEntryNativeStructSize;
    private static UInt32 BlobHeaderNativeStructSize;
    protected static string BlobPrefix;
    protected static string BlobExtension;
    private static ArrayPool`1<byte> bytePool;
    private string archiveAssembliesPrefix;
    private string indexBlobPath;
    [CompilerGeneratedAttribute]
private string <ApkName>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskLoggingHelper <Log>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyStoreGlobalIndex <GlobalIndexCounter>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ID>k__BackingField;
    protected string ApkName { get; }
    protected TaskLoggingHelper Log { get; }
    protected AssemblyStoreGlobalIndex GlobalIndexCounter { get; }
    public UInt32 ID { get; }
    public bool IsIndexStore { get; }
    protected AssemblyStore(string apkName, string archiveAssembliesPrefix, TaskLoggingHelper log, UInt32 id, AssemblyStoreGlobalIndex globalIndexCounter);
    private static AssemblyStore();
    [CompilerGeneratedAttribute]
protected string get_ApkName();
    [CompilerGeneratedAttribute]
protected TaskLoggingHelper get_Log();
    [CompilerGeneratedAttribute]
protected AssemblyStoreGlobalIndex get_GlobalIndexCounter();
    [CompilerGeneratedAttribute]
public UInt32 get_ID();
    public bool get_IsIndexStore();
    public abstract virtual void Add(AssemblyStoreAssemblyInfo blobAssembly);
    public abstract virtual void Generate(string outputDirectory, List`1<AssemblyStoreIndexEntry> globalIndex, List`1<string> blobPaths);
    public virtual string WriteIndex(List`1<AssemblyStoreIndexEntry> globalIndex);
    private void WriteIndex(BinaryWriter blobWriter, string manifestPath, List`1<AssemblyStoreIndexEntry> globalIndex);
    private void WriteIndex(BinaryWriter blobWriter, StreamWriter manifestWriter, List`1<AssemblyStoreIndexEntry> globalIndex);
    protected string GetAssemblyName(AssemblyStoreAssemblyInfo assembly);
    protected void Generate(string outputFilePath, List`1<AssemblyStoreAssemblyInfo> assemblies, List`1<AssemblyStoreIndexEntry> globalIndex, List`1<string> blobPaths, bool addToGlobalIndex);
    private void Generate(BinaryWriter writer, List`1<AssemblyStoreAssemblyInfo> assemblies, List`1<AssemblyStoreIndexEntry> globalIndex, bool addToGlobalIndex);
    private UInt32 CalculateOffsetFixup(UInt32 localAssemblyCount, UInt32 extraOffset);
    private void WriteBlobHeader(BinaryWriter writer, UInt32 localEntryCount, UInt32 globalEntryCount);
    private void WriteAssemblyDescriptors(BinaryWriter writer, List`1<AssemblyStoreIndexEntry> assemblies, UInt32 offsetFixup);
    private void AdjustOffsets(AssemblyStoreIndexEntry assembly, UInt32 offsetFixup);
    private AssemblyStoreIndexEntry WriteAssembly(BinaryWriter writer, AssemblyStoreAssemblyInfo assembly, string assemblyName, UInt32 localBlobIndex);
    [CompilerGeneratedAttribute]
private void <WriteIndex>g__WriteHash|29_2(AssemblyStoreIndexEntry entry, ulong hash, <>c__DisplayClass29_0& );
    [CompilerGeneratedAttribute]
private bool <WriteIndex>g__WarnAboutDuplicateHash|29_3(string bitness, string assemblyName, ulong hash, HashSet`1<ulong> seenHashes, <>c__DisplayClass29_0& );
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<UInt32, UInt32> <WriteAssembly>g__WriteFile|37_0(string filePath, bool required, bool appendNul, <>c__DisplayClass37_0& );
}
internal class Xamarin.Android.Tasks.AssemblyStoreAssemblyInfo : object {
    [CompilerGeneratedAttribute]
private string <FilesystemAssemblyPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ArchiveAssemblyPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugInfoPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Abi>k__BackingField;
    public string FilesystemAssemblyPath { get; }
    public string ArchiveAssemblyPath { get; }
    public string DebugInfoPath { get; private set; }
    public string ConfigPath { get; private set; }
    public string Abi { get; }
    public AssemblyStoreAssemblyInfo(string filesystemAssemblyPath, string archiveAssemblyPath, string abi);
    [CompilerGeneratedAttribute]
public string get_FilesystemAssemblyPath();
    [CompilerGeneratedAttribute]
public string get_ArchiveAssemblyPath();
    [CompilerGeneratedAttribute]
public string get_DebugInfoPath();
    [CompilerGeneratedAttribute]
private void set_DebugInfoPath(string value);
    [CompilerGeneratedAttribute]
public string get_ConfigPath();
    [CompilerGeneratedAttribute]
private void set_ConfigPath(string value);
    [CompilerGeneratedAttribute]
public string get_Abi();
    public void SetDebugInfoPath(string path);
    public void SetConfigPath(string path);
    private string GetExistingPath(string path);
}
internal class Xamarin.Android.Tasks.AssemblyStoreGenerator : object {
    private string archiveAssembliesPrefix;
    private TaskLoggingHelper log;
    private Dictionary`2<string, Store> stores;
    private AssemblyStore indexStore;
    private Dictionary`2<string, UInt32> apkIds;
    private AssemblyStoreGlobalIndex globalIndexCounter;
    public AssemblyStoreGenerator(string archiveAssembliesPrefix, TaskLoggingHelper log);
    public void Add(string apkName, AssemblyStoreAssemblyInfo storeAssembly);
    private UInt32 GetNextStoreID(string apkName);
    public Dictionary`2<string, List`1<string>> Generate(string outputDirectory);
    [CompilerGeneratedAttribute]
private void <Add>g__SetIndexStore|8_0(AssemblyStore b);
    [CompilerGeneratedAttribute]
internal static void <Generate>g__GenerateStore|10_0(AssemblyStore store, string apkName, <>c__DisplayClass10_0& );
}
internal class Xamarin.Android.Tasks.AssemblyStoreGlobalIndex : object {
    private UInt32 value;
    public UInt32 Value { get; }
    public UInt32 get_Value();
    public UInt32 Increment();
    public void Subtract(UInt32 count);
}
internal class Xamarin.Android.Tasks.AssemblyStoreIndexEntry : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <StoreID>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MappingIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LocalBlobIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <NameHash64>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <NameHash32>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <DataOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <DataSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <DebugDataOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <DebugDataSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ConfigDataOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ConfigDataSize>k__BackingField;
    public string Name { get; }
    public UInt32 StoreID { get; }
    public UInt32 MappingIndex { get; }
    public UInt32 LocalBlobIndex { get; }
    public ulong NameHash64 { get; }
    public ulong NameHash32 { get; }
    public UInt32 DataOffset { get; public set; }
    public UInt32 DataSize { get; public set; }
    public UInt32 DebugDataOffset { get; public set; }
    public UInt32 DebugDataSize { get; public set; }
    public UInt32 ConfigDataOffset { get; public set; }
    public UInt32 ConfigDataSize { get; public set; }
    public AssemblyStoreIndexEntry(string name, UInt32 blobID, UInt32 mappingIndex, UInt32 localBlobIndex);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public UInt32 get_StoreID();
    [CompilerGeneratedAttribute]
public UInt32 get_MappingIndex();
    [CompilerGeneratedAttribute]
public UInt32 get_LocalBlobIndex();
    [CompilerGeneratedAttribute]
public ulong get_NameHash64();
    [CompilerGeneratedAttribute]
public ulong get_NameHash32();
    [CompilerGeneratedAttribute]
public UInt32 get_DataOffset();
    [CompilerGeneratedAttribute]
public void set_DataOffset(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_DataSize();
    [CompilerGeneratedAttribute]
public void set_DataSize(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_DebugDataOffset();
    [CompilerGeneratedAttribute]
public void set_DebugDataOffset(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_DebugDataSize();
    [CompilerGeneratedAttribute]
public void set_DebugDataSize(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ConfigDataOffset();
    [CompilerGeneratedAttribute]
public void set_ConfigDataOffset(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ConfigDataSize();
    [CompilerGeneratedAttribute]
public void set_ConfigDataSize(UInt32 value);
}
public class Xamarin.Android.Tasks.BindingsGenerator : AndroidDotnetToolTask {
    [CompilerGeneratedAttribute]
private bool <OnlyRunXmlAdjuster>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XmlAdjusterOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnumDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnumMetadataDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiXmlInput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodegenTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoStdlib>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeMappingReportFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseShortFileNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MonoAndroidFrameworkDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LangVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableBindingStaticAndDefaultInterfaceMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableBindingNestedInterfaceTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableBindingInterfaceConstants>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnableRestrictToAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableObsoleteOverrideInheritance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nullable>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <TransformFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ReferencedManagedLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AnnotationsZipFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <NamespaceTransforms>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <JavadocXml>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavadocVerbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseJavaLegacyResolver>k__BackingField;
    private List`1<Tuple`2<string, string>> transform_files;
    public string TaskPrefix { get; }
    public bool OnlyRunXmlAdjuster { get; public set; }
    public string XmlAdjusterOutput { get; public set; }
    [RequiredAttribute]
public string OutputDirectory { get; public set; }
    public string EnumDirectory { get; public set; }
    public string EnumMetadataDirectory { get; public set; }
    [RequiredAttribute]
public string AndroidApiLevel { get; public set; }
    [RequiredAttribute]
public string ApiXmlInput { get; public set; }
    public string AssemblyName { get; public set; }
    public string CodegenTarget { get; public set; }
    public bool NoStdlib { get; public set; }
    public string TypeMappingReportFile { get; public set; }
    public bool UseShortFileNames { get; public set; }
    [RequiredAttribute]
public string MonoAndroidFrameworkDirectories { get; public set; }
    public string LangVersion { get; public set; }
    public bool EnableBindingStaticAndDefaultInterfaceMethods { get; public set; }
    public bool EnableBindingNestedInterfaceTypes { get; public set; }
    public bool EnableBindingInterfaceConstants { get; public set; }
    public string EnableRestrictToAttributes { get; public set; }
    public bool EnableObsoleteOverrideInheritance { get; public set; }
    public string Nullable { get; public set; }
    public ITaskItem[] TransformFiles { get; public set; }
    public ITaskItem[] ReferencedManagedLibraries { get; public set; }
    public ITaskItem[] AnnotationsZipFiles { get; public set; }
    public ITaskItem[] NamespaceTransforms { get; public set; }
    public ITaskItem[] JavadocXml { get; public set; }
    public string JavadocVerbosity { get; public set; }
    public bool UseJavaLegacyResolver { get; public set; }
    private bool SupportsCSharp8 { get; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public bool get_OnlyRunXmlAdjuster();
    [CompilerGeneratedAttribute]
public void set_OnlyRunXmlAdjuster(bool value);
    [CompilerGeneratedAttribute]
public string get_XmlAdjusterOutput();
    [CompilerGeneratedAttribute]
public void set_XmlAdjusterOutput(string value);
    [CompilerGeneratedAttribute]
public string get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_EnumDirectory();
    [CompilerGeneratedAttribute]
public void set_EnumDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_EnumMetadataDirectory();
    [CompilerGeneratedAttribute]
public void set_EnumMetadataDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidApiLevel();
    [CompilerGeneratedAttribute]
public void set_AndroidApiLevel(string value);
    [CompilerGeneratedAttribute]
public string get_ApiXmlInput();
    [CompilerGeneratedAttribute]
public void set_ApiXmlInput(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public string get_CodegenTarget();
    [CompilerGeneratedAttribute]
public void set_CodegenTarget(string value);
    [CompilerGeneratedAttribute]
public bool get_NoStdlib();
    [CompilerGeneratedAttribute]
public void set_NoStdlib(bool value);
    [CompilerGeneratedAttribute]
public string get_TypeMappingReportFile();
    [CompilerGeneratedAttribute]
public void set_TypeMappingReportFile(string value);
    [CompilerGeneratedAttribute]
public bool get_UseShortFileNames();
    [CompilerGeneratedAttribute]
public void set_UseShortFileNames(bool value);
    [CompilerGeneratedAttribute]
public string get_MonoAndroidFrameworkDirectories();
    [CompilerGeneratedAttribute]
public void set_MonoAndroidFrameworkDirectories(string value);
    [CompilerGeneratedAttribute]
public string get_LangVersion();
    [CompilerGeneratedAttribute]
public void set_LangVersion(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableBindingStaticAndDefaultInterfaceMethods();
    [CompilerGeneratedAttribute]
public void set_EnableBindingStaticAndDefaultInterfaceMethods(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableBindingNestedInterfaceTypes();
    [CompilerGeneratedAttribute]
public void set_EnableBindingNestedInterfaceTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableBindingInterfaceConstants();
    [CompilerGeneratedAttribute]
public void set_EnableBindingInterfaceConstants(bool value);
    [CompilerGeneratedAttribute]
public string get_EnableRestrictToAttributes();
    [CompilerGeneratedAttribute]
public void set_EnableRestrictToAttributes(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableObsoleteOverrideInheritance();
    [CompilerGeneratedAttribute]
public void set_EnableObsoleteOverrideInheritance(bool value);
    [CompilerGeneratedAttribute]
public string get_Nullable();
    [CompilerGeneratedAttribute]
public void set_Nullable(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_TransformFiles();
    [CompilerGeneratedAttribute]
public void set_TransformFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ReferencedManagedLibraries();
    [CompilerGeneratedAttribute]
public void set_ReferencedManagedLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AnnotationsZipFiles();
    [CompilerGeneratedAttribute]
public void set_AnnotationsZipFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_NamespaceTransforms();
    [CompilerGeneratedAttribute]
public void set_NamespaceTransforms(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_JavadocXml();
    [CompilerGeneratedAttribute]
public void set_JavadocXml(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_JavadocVerbosity();
    [CompilerGeneratedAttribute]
public void set_JavadocVerbosity(string value);
    [CompilerGeneratedAttribute]
public bool get_UseJavaLegacyResolver();
    [CompilerGeneratedAttribute]
public void set_UseJavaLegacyResolver(bool value);
    public virtual bool RunTask();
    private void WriteLine(StreamWriter sw, string line);
    protected virtual string GenerateCommandLineCommands();
    protected virtual void LogEventsFromTextOutput(string singleLine, MessageImportance messageImportance);
    private bool get_SupportsCSharp8();
}
public class Xamarin.Android.Tasks.BuildApk : AndroidTask {
    [CompilerGeneratedAttribute]
private string <AndroidNdkDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApkInputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApkOutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedUserAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedFrameworkAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AdditionalNativeLibraryReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <EmbeddedNativeLibraryAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FrameworkNativeLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <NativeLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ApplicationSharedLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <BundleNativeLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <TypeMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <DalvikClasses>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SupportedAbis>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreatePackagePerAbi>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmbedAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BundleAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <JavaSourceFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <JavaLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DoNotPackageJavaLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExcludeFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidSequencePointsMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TlsProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UncompressedFileExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCompression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeWrapSh>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckedBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuntimeConfigBinFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseAssemblyStore>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ZipFlushFilesLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ZipFlushSizeLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectFullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <OutputFiles>k__BackingField;
    private SequencePointsMode sequencePointsMode;
    [CompilerGeneratedAttribute]
private ITaskItem[] <LibraryProjectJars>k__BackingField;
    private String[] uncompressedFileExtensions;
    private List`1<string> existingEntries;
    private List`1<Regex> excludePatterns;
    public string TaskPrefix { get; }
    public string AndroidNdkDirectory { get; public set; }
    [RequiredAttribute]
public string ApkInputPath { get; public set; }
    [RequiredAttribute]
public string ApkOutputPath { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ResolvedUserAssemblies { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ResolvedFrameworkAssemblies { get; public set; }
    public ITaskItem[] AdditionalNativeLibraryReferences { get; public set; }
    public ITaskItem[] EmbeddedNativeLibraryAssemblies { get; public set; }
    [RequiredAttribute]
public ITaskItem[] FrameworkNativeLibraries { get; public set; }
    [RequiredAttribute]
public ITaskItem[] NativeLibraries { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ApplicationSharedLibraries { get; public set; }
    public ITaskItem[] BundleNativeLibraries { get; public set; }
    public ITaskItem[] TypeMappings { get; public set; }
    [RequiredAttribute]
public ITaskItem[] DalvikClasses { get; public set; }
    [RequiredAttribute]
public String[] SupportedAbis { get; public set; }
    public bool CreatePackagePerAbi { get; public set; }
    public bool EmbedAssemblies { get; public set; }
    public bool BundleAssemblies { get; public set; }
    public ITaskItem[] JavaSourceFiles { get; public set; }
    public ITaskItem[] JavaLibraries { get; public set; }
    public String[] DoNotPackageJavaLibraries { get; public set; }
    public String[] ExcludeFiles { get; public set; }
    public string Debug { get; public set; }
    public string AndroidSequencePointsMode { get; public set; }
    public string TlsProvider { get; public set; }
    public string UncompressedFileExtensions { get; public set; }
    public bool EnableCompression { get; public set; }
    public bool IncludeWrapSh { get; public set; }
    public string CheckedBuild { get; public set; }
    public string RuntimeConfigBinFilePath { get; public set; }
    public bool UseAssemblyStore { get; public set; }
    public string ZipFlushFilesLimit { get; public set; }
    public string ZipFlushSizeLimit { get; public set; }
    [RequiredAttribute]
public string ProjectFullPath { get; public set; }
    [OutputAttribute]
public ITaskItem[] OutputFiles { get; public set; }
    private bool _Debug { get; }
    public ITaskItem[] LibraryProjectJars { get; public set; }
    protected string RootPath { get; }
    protected string AssembliesPath { get; }
    protected string DalvikPath { get; }
    protected CompressionMethod UncompressedMethod { get; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_AndroidNdkDirectory();
    [CompilerGeneratedAttribute]
public void set_AndroidNdkDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_ApkInputPath();
    [CompilerGeneratedAttribute]
public void set_ApkInputPath(string value);
    [CompilerGeneratedAttribute]
public string get_ApkOutputPath();
    [CompilerGeneratedAttribute]
public void set_ApkOutputPath(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedUserAssemblies();
    [CompilerGeneratedAttribute]
public void set_ResolvedUserAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedFrameworkAssemblies();
    [CompilerGeneratedAttribute]
public void set_ResolvedFrameworkAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AdditionalNativeLibraryReferences();
    [CompilerGeneratedAttribute]
public void set_AdditionalNativeLibraryReferences(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_EmbeddedNativeLibraryAssemblies();
    [CompilerGeneratedAttribute]
public void set_EmbeddedNativeLibraryAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FrameworkNativeLibraries();
    [CompilerGeneratedAttribute]
public void set_FrameworkNativeLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_NativeLibraries();
    [CompilerGeneratedAttribute]
public void set_NativeLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ApplicationSharedLibraries();
    [CompilerGeneratedAttribute]
public void set_ApplicationSharedLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_BundleNativeLibraries();
    [CompilerGeneratedAttribute]
public void set_BundleNativeLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_TypeMappings();
    [CompilerGeneratedAttribute]
public void set_TypeMappings(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_DalvikClasses();
    [CompilerGeneratedAttribute]
public void set_DalvikClasses(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public String[] get_SupportedAbis();
    [CompilerGeneratedAttribute]
public void set_SupportedAbis(String[] value);
    [CompilerGeneratedAttribute]
public bool get_CreatePackagePerAbi();
    [CompilerGeneratedAttribute]
public void set_CreatePackagePerAbi(bool value);
    [CompilerGeneratedAttribute]
public bool get_EmbedAssemblies();
    [CompilerGeneratedAttribute]
public void set_EmbedAssemblies(bool value);
    [CompilerGeneratedAttribute]
public bool get_BundleAssemblies();
    [CompilerGeneratedAttribute]
public void set_BundleAssemblies(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_JavaSourceFiles();
    [CompilerGeneratedAttribute]
public void set_JavaSourceFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_JavaLibraries();
    [CompilerGeneratedAttribute]
public void set_JavaLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public String[] get_DoNotPackageJavaLibraries();
    [CompilerGeneratedAttribute]
public void set_DoNotPackageJavaLibraries(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ExcludeFiles();
    [CompilerGeneratedAttribute]
public void set_ExcludeFiles(String[] value);
    [CompilerGeneratedAttribute]
public string get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidSequencePointsMode();
    [CompilerGeneratedAttribute]
public void set_AndroidSequencePointsMode(string value);
    [CompilerGeneratedAttribute]
public string get_TlsProvider();
    [CompilerGeneratedAttribute]
public void set_TlsProvider(string value);
    [CompilerGeneratedAttribute]
public string get_UncompressedFileExtensions();
    [CompilerGeneratedAttribute]
public void set_UncompressedFileExtensions(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableCompression();
    [CompilerGeneratedAttribute]
public void set_EnableCompression(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeWrapSh();
    [CompilerGeneratedAttribute]
public void set_IncludeWrapSh(bool value);
    [CompilerGeneratedAttribute]
public string get_CheckedBuild();
    [CompilerGeneratedAttribute]
public void set_CheckedBuild(string value);
    [CompilerGeneratedAttribute]
public string get_RuntimeConfigBinFilePath();
    [CompilerGeneratedAttribute]
public void set_RuntimeConfigBinFilePath(string value);
    [CompilerGeneratedAttribute]
public bool get_UseAssemblyStore();
    [CompilerGeneratedAttribute]
public void set_UseAssemblyStore(bool value);
    [CompilerGeneratedAttribute]
public string get_ZipFlushFilesLimit();
    [CompilerGeneratedAttribute]
public void set_ZipFlushFilesLimit(string value);
    [CompilerGeneratedAttribute]
public string get_ZipFlushSizeLimit();
    [CompilerGeneratedAttribute]
public void set_ZipFlushSizeLimit(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectFullPath();
    [CompilerGeneratedAttribute]
public void set_ProjectFullPath(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_OutputFiles();
    [CompilerGeneratedAttribute]
public void set_OutputFiles(ITaskItem[] value);
    private bool get__Debug();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_LibraryProjectJars();
    [CompilerGeneratedAttribute]
public void set_LibraryProjectJars(ITaskItem[] value);
    protected virtual string get_RootPath();
    protected virtual string get_AssembliesPath();
    protected virtual string get_DalvikPath();
    protected virtual CompressionMethod get_UncompressedMethod();
    protected virtual void FixupArchive(ZipArchiveEx zip);
    private void ExecuteWithAbi(String[] supportedAbis, string apkInputPath, string apkOutputPath, bool debug, bool compress, IDictionary`2<string, CompressedAssemblyInfo> compressedAssembliesInfo, string assemblyStoreApkName);
    public virtual bool RunTask();
    private static Regex FileGlobToRegEx(string fileGlob, RegexOptions options);
    private void AddAssemblies(ZipArchiveEx apk, bool debug, bool compress, IDictionary`2<string, CompressedAssemblyInfo> compressedAssembliesInfo, string assemblyStoreApkName);
    private bool AddFileToArchiveIfNewer(ZipArchiveEx apk, string file, string inArchivePath, CompressionMethod compressionMethod);
    private void AddAssemblyConfigEntry(ZipArchiveEx apk, string assemblyPath, string configFile);
    private string GetAssemblyPath(ITaskItem assembly, bool frameworkAssembly);
    private CompressionMethod GetCompressionMethod(string fileName);
    private void AddNativeLibraryToArchive(ZipArchiveEx apk, string abi, string filesystemPath, string inArchiveFileName);
    private void AddRuntimeLibraries(ZipArchiveEx apk, String[] supportedAbis);
    private bool IsWrapperScript(string path, string link);
    private bool IncludeNativeLibrary(ITaskItem item);
    private string GetArchiveFileName(ITaskItem item);
    private void AddNativeLibraries(List`1<ValueTuple`2<string, string>> files, String[] supportedAbis);
    private string GetNativeLibraryAbi(ITaskItem lib);
    private void AddNativeLibraries(List`1<ValueTuple`2<string, string>> files, String[] supportedAbis, IEnumerable`1<LibInfo> libs);
    private void AddAdditionalNativeLibraries(List`1<ValueTuple`2<string, string>> files, String[] supportedAbis);
    private void AddNativeLibrary(List`1<ValueTuple`2<string, string>> files, string path, string abi, string archiveFileName);
    private void LogSanitizerWarning(string message);
    private void LogSanitizerError(string message);
    [CompilerGeneratedAttribute]
private void <ExecuteWithAbi>b__157_0(string a, string b);
    [CompilerGeneratedAttribute]
private void <AddAssemblies>g__AddAssembliesFromCollection|160_0(ITaskItem[] assemblies, <>c__DisplayClass160_0& );
    [CompilerGeneratedAttribute]
private void <AddAssemblies>g__EnsureCompressedAssemblyData|160_1(string sourcePath, UInt32 descriptorIndex, <>c__DisplayClass160_0& );
    [CompilerGeneratedAttribute]
private string <AddAssemblies>g__CompressAssembly|160_2(ITaskItem assembly, <>c__DisplayClass160_0& );
    [CompilerGeneratedAttribute]
private LibInfo <AddNativeLibraries>b__171_0(ITaskItem v);
    [CompilerGeneratedAttribute]
private bool <AddNativeLibraries>b__171_1(ITaskItem v);
    [CompilerGeneratedAttribute]
private LibInfo <AddNativeLibraries>b__171_2(ITaskItem v);
    [CompilerGeneratedAttribute]
private bool <AddNativeLibraries>b__171_3(LibInfo info);
}
public class Xamarin.Android.Tasks.BuildApkSet : BundleToolAdbTask {
    [CompilerGeneratedAttribute]
private string <AppBundle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Aapt2ToolPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Aapt2ToolExe>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyStore>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyPass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorePass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtraArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateUniversalApkSet>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string AppBundle { get; public set; }
    [RequiredAttribute]
public string Output { get; public set; }
    [RequiredAttribute]
public string Aapt2ToolPath { get; public set; }
    public string Aapt2ToolExe { get; public set; }
    public string Aapt2ToolName { get; }
    [RequiredAttribute]
public string KeyStore { get; public set; }
    [RequiredAttribute]
public string KeyAlias { get; public set; }
    [RequiredAttribute]
public string KeyPass { get; public set; }
    [RequiredAttribute]
public string StorePass { get; public set; }
    public string ExtraArgs { get; public set; }
    public bool GenerateUniversalApkSet { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_AppBundle();
    [CompilerGeneratedAttribute]
public void set_AppBundle(string value);
    [CompilerGeneratedAttribute]
public string get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(string value);
    [CompilerGeneratedAttribute]
public string get_Aapt2ToolPath();
    [CompilerGeneratedAttribute]
public void set_Aapt2ToolPath(string value);
    [CompilerGeneratedAttribute]
public string get_Aapt2ToolExe();
    [CompilerGeneratedAttribute]
public void set_Aapt2ToolExe(string value);
    public string get_Aapt2ToolName();
    [CompilerGeneratedAttribute]
public string get_KeyStore();
    [CompilerGeneratedAttribute]
public void set_KeyStore(string value);
    [CompilerGeneratedAttribute]
public string get_KeyAlias();
    [CompilerGeneratedAttribute]
public void set_KeyAlias(string value);
    [CompilerGeneratedAttribute]
public string get_KeyPass();
    [CompilerGeneratedAttribute]
public void set_KeyPass(string value);
    [CompilerGeneratedAttribute]
public string get_StorePass();
    [CompilerGeneratedAttribute]
public void set_StorePass(string value);
    [CompilerGeneratedAttribute]
public string get_ExtraArgs();
    [CompilerGeneratedAttribute]
public void set_ExtraArgs(string value);
    [CompilerGeneratedAttribute]
public bool get_GenerateUniversalApkSet();
    [CompilerGeneratedAttribute]
public void set_GenerateUniversalApkSet(bool value);
    public virtual bool RunTask();
    private void AddStorePass(CommandLineBuilder cmd, string cmdLineSwitch, string value);
    internal virtual CommandLineBuilder GetCommandLineBuilder();
}
public class Xamarin.Android.Tasks.BuildAppBundle : BundleTool {
    private static String[] UncompressedByDefault;
    [CompilerGeneratedAttribute]
private string <BaseZip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomBuildConfigFile>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Modules>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <MetaDataFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UncompressedFileExtensions>k__BackingField;
    private string temp;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string BaseZip { get; public set; }
    public string CustomBuildConfigFile { get; public set; }
    public String[] Modules { get; public set; }
    public ITaskItem[] MetaDataFiles { get; public set; }
    [RequiredAttribute]
public string Output { get; public set; }
    public string UncompressedFileExtensions { get; public set; }
    private static BuildAppBundle();
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_BaseZip();
    [CompilerGeneratedAttribute]
public void set_BaseZip(string value);
    [CompilerGeneratedAttribute]
public string get_CustomBuildConfigFile();
    [CompilerGeneratedAttribute]
public void set_CustomBuildConfigFile(string value);
    [CompilerGeneratedAttribute]
public String[] get_Modules();
    [CompilerGeneratedAttribute]
public void set_Modules(String[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_MetaDataFiles();
    [CompilerGeneratedAttribute]
public void set_MetaDataFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(string value);
    [CompilerGeneratedAttribute]
public string get_UncompressedFileExtensions();
    [CompilerGeneratedAttribute]
public void set_UncompressedFileExtensions(string value);
    public virtual bool RunTask();
    internal virtual CommandLineBuilder GetCommandLineBuilder();
}
public class Xamarin.Android.Tasks.BuildBaseAppBundle : BuildApk {
    public string TaskPrefix { get; }
    protected string RootPath { get; }
    protected string DalvikPath { get; }
    protected CompressionMethod UncompressedMethod { get; }
    public virtual string get_TaskPrefix();
    protected virtual string get_RootPath();
    protected virtual string get_DalvikPath();
    protected virtual CompressionMethod get_UncompressedMethod();
    protected virtual void FixupArchive(ZipArchiveEx zip);
}
public abstract class Xamarin.Android.Tasks.BundleTool : JavaToolTask {
    [CompilerGeneratedAttribute]
private string <JarPath>k__BackingField;
    [RequiredAttribute]
public string JarPath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_JarPath();
    [CompilerGeneratedAttribute]
public void set_JarPath(string value);
    protected virtual string GenerateCommandLineCommands();
    internal virtual CommandLineBuilder GetCommandLineBuilder();
}
public abstract class Xamarin.Android.Tasks.BundleToolAdbTask : BundleTool {
    [CompilerGeneratedAttribute]
private string <AdbToolPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdbToolExe>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdbTarget>k__BackingField;
    [RequiredAttribute]
public string AdbToolPath { get; public set; }
    public string AdbToolExe { get; public set; }
    public string AdbTarget { get; public set; }
    public string AdbToolName { get; }
    [CompilerGeneratedAttribute]
public string get_AdbToolPath();
    [CompilerGeneratedAttribute]
public void set_AdbToolPath(string value);
    [CompilerGeneratedAttribute]
public string get_AdbToolExe();
    [CompilerGeneratedAttribute]
public void set_AdbToolExe(string value);
    [CompilerGeneratedAttribute]
public string get_AdbTarget();
    [CompilerGeneratedAttribute]
public void set_AdbTarget(string value);
    public string get_AdbToolName();
    protected void AppendAdbOptions(CommandLineBuilder cmd);
}
public class Xamarin.Android.Tasks.CalculateAdditionalResourceCacheDirectories : AndroidTask {
    [CompilerGeneratedAttribute]
private String[] <AdditionalAndroidResourcePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CacheDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AdditionalResourceCachePaths>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public String[] AdditionalAndroidResourcePaths { get; public set; }
    [RequiredAttribute]
public string CacheDirectory { get; public set; }
    [OutputAttribute]
public ITaskItem[] AdditionalResourceCachePaths { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public String[] get_AdditionalAndroidResourcePaths();
    [CompilerGeneratedAttribute]
public void set_AdditionalAndroidResourcePaths(String[] value);
    [CompilerGeneratedAttribute]
public string get_CacheDirectory();
    [CompilerGeneratedAttribute]
public void set_CacheDirectory(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AdditionalResourceCachePaths();
    [CompilerGeneratedAttribute]
public void set_AdditionalResourceCachePaths(ITaskItem[] value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.CalculateLayoutCodeBehind : AndroidAsyncTask {
    private static Char[] partialClassNameSplitChars;
    public static int ParallelGenerationThreshold;
    public static string LayoutBindingFileNameMetadata;
    public static string ClassNameMetadata;
    public static string LayoutGroupMetadata;
    public static string WidgetCollectionKeyMetadata;
    public static string LayoutPartialClassFileNameMetadata;
    public static string PartialClassNamesMetadata;
    public static string PartialCodeBehindClassNameMetadata;
    public static string GlobalIdPrefix;
    private static string DefaultAndroidNamespace;
    private static string DefaultXamarinNamespace;
    private static string XmlNamespaceUri;
    private static string AndroidNamespace;
    private static string XamarinNamespace;
    private static string XamarinClassesAttribute;
    private static string XamarinManagedTypeAttribute;
    private Char[] LayoutFilePathSplit;
    private Dictionary`2<string, string> knownNamespaceFixups;
    private Dictionary`2<string, string> knownTypeNameFixups;
    private List`1<string> knownNamespacePrefixes;
    private XPathExpression widgetWithId;
    private string sourceFileExtension;
    [CompilerGeneratedAttribute]
private string <BindingDependenciesCacheFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFileExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <BoundLayouts>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <LayoutBindingFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <LayoutPartialClassFiles>k__BackingField;
    public string TaskPrefix { get; }
    public string BindingDependenciesCacheFile { get; public set; }
    [RequiredAttribute]
public string BaseNamespace { get; public set; }
    [RequiredAttribute]
public string OutputFileExtension { get; public set; }
    [RequiredAttribute]
public string OutputLanguage { get; public set; }
    [RequiredAttribute]
public ITaskItem[] BoundLayouts { get; public set; }
    [OutputAttribute]
public ITaskItem[] LayoutBindingFiles { get; public set; }
    [OutputAttribute]
public ITaskItem[] LayoutPartialClassFiles { get; public set; }
    private static CalculateLayoutCodeBehind();
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_BindingDependenciesCacheFile();
    [CompilerGeneratedAttribute]
public void set_BindingDependenciesCacheFile(string value);
    [CompilerGeneratedAttribute]
public string get_BaseNamespace();
    [CompilerGeneratedAttribute]
public void set_BaseNamespace(string value);
    [CompilerGeneratedAttribute]
public string get_OutputFileExtension();
    [CompilerGeneratedAttribute]
public void set_OutputFileExtension(string value);
    [CompilerGeneratedAttribute]
public string get_OutputLanguage();
    [CompilerGeneratedAttribute]
public void set_OutputLanguage(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_BoundLayouts();
    [CompilerGeneratedAttribute]
public void set_BoundLayouts(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_LayoutBindingFiles();
    [CompilerGeneratedAttribute]
public void set_LayoutBindingFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_LayoutPartialClassFiles();
    [CompilerGeneratedAttribute]
public void set_LayoutPartialClassFiles(ITaskItem[] value);
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.CalculateLayoutCodeBehind/<RunTaskAsync>d__55")]
public virtual Task RunTaskAsync();
    private void ParseAndLoadGroup(Dictionary`2<string, LayoutGroup> groupIndex, string groupName, List`1<ITaskItem> items, List`1& layoutBindingFiles, List`1& layoutPartialClassFiles);
    private bool LoadLayoutGroup(Dictionary`2<string, LayoutGroup> groupIndex, List`1<ITaskItem> items, IDictionary`2& widgets, string rootWidgetIdOverride);
    private bool LoadLayout(string filePath, Dictionary`2<string, LayoutGroup> groupIndex, IDictionary`2& widgets, string rootWidgetIdOverride);
    private void CreateWidget(XPathNavigator current, string filePath, string androidNS, string xamarinNS, string id, string parsedId, string name, string partialClasses, IDictionary`2& widgets);
    private void AddToList(T item, List`1& list);
    private string GetLayoutNameFromReference(string reference);
    private string GetId(XPathNavigator navigator, string androidNS);
    private bool GetAndParseId(XPathNavigator navigator, string filePath, string androidNS, bool ignoreMissing, String& rawId, String& parsedId, String& name);
    private bool ParseIdWithError(XPathNavigator navigator, string filePath, string rawId, bool ignoreMissing, String& parsedId, String& name);
    private bool FixUpNamespace(string ns, String& fixedNS);
    private bool RemoveNSPrefix(string prefix, string fullNS, String& fixedNS);
    private bool FixUpTypeName(String& typeName);
    private string CapitalizeName(string name);
    private LayoutLocationInfo GetLocationInfo(XPathNavigator nav, string filePath);
    private string SetNamespace(XPathNavigator nav, XmlNamespaceManager nsmgr, string nsName, string defaultValue);
    private bool ParseID(string id, String& parsedId, String& name);
    private void CreateCodeBehindTaskItems(string groupName, List`1<ITaskItem> layoutItems, ICollection`1<LayoutWidget> widgets, List`1& layoutBindingFiles, List`1& layoutPartialClassFiles);
    private string RegisterGroupWidgets(ICollection`1<LayoutWidget> widgets);
    private void CopyMetadataIfFound(string name, ITaskItem fromItem, ITaskItem toItem);
    private void AddLayoutFile(ITaskItem item, Dictionary`2& layoutsByName);
}
public class Xamarin.Android.Tasks.CalculateProjectDependencies : AndroidTask {
    private static int DefaultMinSDKVersion;
    [CompilerGeneratedAttribute]
private string <CommandLineToolsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <ManifestFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildToolsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlatformToolsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NdkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NdkRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Dependencies>k__BackingField;
    public string TaskPrefix { get; }
    public string CommandLineToolsVersion { get; public set; }
    public string AndroidApiLevel { get; public set; }
    [RequiredAttribute]
public string TargetFrameworkVersion { get; public set; }
    [RequiredAttribute]
public ITaskItem ManifestFile { get; public set; }
    [RequiredAttribute]
public string BuildToolsVersion { get; public set; }
    public string PlatformToolsVersion { get; public set; }
    public string NdkVersion { get; public set; }
    public bool NdkRequired { get; public set; }
    [OutputAttribute]
public ITaskItem[] Dependencies { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_CommandLineToolsVersion();
    [CompilerGeneratedAttribute]
public void set_CommandLineToolsVersion(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidApiLevel();
    [CompilerGeneratedAttribute]
public void set_AndroidApiLevel(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkVersion();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkVersion(string value);
    [CompilerGeneratedAttribute]
public ITaskItem get_ManifestFile();
    [CompilerGeneratedAttribute]
public void set_ManifestFile(ITaskItem value);
    [CompilerGeneratedAttribute]
public string get_BuildToolsVersion();
    [CompilerGeneratedAttribute]
public void set_BuildToolsVersion(string value);
    [CompilerGeneratedAttribute]
public string get_PlatformToolsVersion();
    [CompilerGeneratedAttribute]
public void set_PlatformToolsVersion(string value);
    [CompilerGeneratedAttribute]
public string get_NdkVersion();
    [CompilerGeneratedAttribute]
public void set_NdkVersion(string value);
    [CompilerGeneratedAttribute]
public bool get_NdkRequired();
    [CompilerGeneratedAttribute]
public void set_NdkRequired(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Dependencies();
    [CompilerGeneratedAttribute]
public void set_Dependencies(ITaskItem[] value);
    private ITaskItem CreateAndroidDependency(string include, string version);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.CheckClientHandlerType : AndroidTask {
    [CompilerGeneratedAttribute]
private string <ClientHandlerType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValidHandlerType>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsingAndroidNETSdk>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string ClientHandlerType { get; public set; }
    [RequiredAttribute]
public string ValidHandlerType { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ResolvedAssemblies { get; public set; }
    public bool UsingAndroidNETSdk { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_ClientHandlerType();
    [CompilerGeneratedAttribute]
public void set_ClientHandlerType(string value);
    [CompilerGeneratedAttribute]
public string get_ValidHandlerType();
    [CompilerGeneratedAttribute]
public void set_ValidHandlerType(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedAssemblies();
    [CompilerGeneratedAttribute]
public void set_ResolvedAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_UsingAndroidNETSdk();
    [CompilerGeneratedAttribute]
public void set_UsingAndroidNETSdk(bool value);
    public virtual bool RunTask();
    private static bool Extends(TypeDefinition type, string validBase);
}
public class Xamarin.Android.Tasks.CheckDuplicateJavaLibraries : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <JavaSourceFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <JavaLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <LibraryProjectJars>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExcludedFiles>k__BackingField;
    public string TaskPrefix { get; }
    public ITaskItem[] JavaSourceFiles { get; public set; }
    public ITaskItem[] JavaLibraries { get; public set; }
    public ITaskItem[] LibraryProjectJars { get; public set; }
    public String[] ExcludedFiles { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_JavaSourceFiles();
    [CompilerGeneratedAttribute]
public void set_JavaSourceFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_JavaLibraries();
    [CompilerGeneratedAttribute]
public void set_JavaLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_LibraryProjectJars();
    [CompilerGeneratedAttribute]
public void set_LibraryProjectJars(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public String[] get_ExcludedFiles();
    [CompilerGeneratedAttribute]
public void set_ExcludedFiles(String[] value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.CheckForInvalidDesignerConfig : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Assemblies>k__BackingField;
    public string TaskPrefix { get; }
    public ITaskItem[] Assemblies { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Assemblies();
    [CompilerGeneratedAttribute]
public void set_Assemblies(ITaskItem[] value);
    public virtual bool RunTask();
    private static bool HasResourceDesignerAssemblyReference(ITaskItem assembly);
    private static bool HasResourceDesignerAssemblyReference(MetadataReader reader);
}
public class Xamarin.Android.Tasks.CheckForInvalidResourceFileNames : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Resources>k__BackingField;
    private Regex fileNameCheck;
    private Regex fileNameWithHyphenCheck;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] Resources { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Resources();
    [CompilerGeneratedAttribute]
public void set_Resources(ITaskItem[] value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.CheckForRemovedItems : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Directory>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <RemovedFilesFlag>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] Files { get; public set; }
    [RequiredAttribute]
public string Directory { get; public set; }
    [OutputAttribute]
public ITaskItem RemovedFilesFlag { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_Directory();
    [CompilerGeneratedAttribute]
public void set_Directory(string value);
    [CompilerGeneratedAttribute]
public ITaskItem get_RemovedFilesFlag();
    [CompilerGeneratedAttribute]
public void set_RemovedFilesFlag(ITaskItem value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.CheckGoogleSdkRequirements : AndroidTask {
    [CompilerGeneratedAttribute]
private string <TargetFrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManifestFile>k__BackingField;
    public string TaskPrefix { get; }
    public string TargetFrameworkVersion { get; public set; }
    public int ApiLevel { get; public set; }
    [RequiredAttribute]
public string ManifestFile { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkVersion();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkVersion(string value);
    [CompilerGeneratedAttribute]
public int get_ApiLevel();
    [CompilerGeneratedAttribute]
public void set_ApiLevel(int value);
    [CompilerGeneratedAttribute]
public string get_ManifestFile();
    [CompilerGeneratedAttribute]
public void set_ManifestFile(string value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.CheckProjectItems : AndroidTask {
    [CompilerGeneratedAttribute]
private bool <IsApplication>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <EmbeddedNativeLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <NativeLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <JavaLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <JavaSourceFiles>k__BackingField;
    public string TaskPrefix { get; }
    public bool IsApplication { get; public set; }
    public ITaskItem[] EmbeddedNativeLibraries { get; public set; }
    public ITaskItem[] NativeLibraries { get; public set; }
    public ITaskItem[] JavaLibraries { get; public set; }
    public ITaskItem[] JavaSourceFiles { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public bool get_IsApplication();
    [CompilerGeneratedAttribute]
public void set_IsApplication(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_EmbeddedNativeLibraries();
    [CompilerGeneratedAttribute]
public void set_EmbeddedNativeLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_NativeLibraries();
    [CompilerGeneratedAttribute]
public void set_NativeLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_JavaLibraries();
    [CompilerGeneratedAttribute]
public void set_JavaLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_JavaSourceFiles();
    [CompilerGeneratedAttribute]
public void set_JavaSourceFiles(ITaskItem[] value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.CilStrip : AndroidTask {
    [CompilerGeneratedAttribute]
private string <AndroidAotMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StampFile>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string AndroidAotMode { get; public set; }
    [RequiredAttribute]
public string ToolPath { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ResolvedAssemblies { get; public set; }
    [RequiredAttribute]
public string StampFile { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_AndroidAotMode();
    [CompilerGeneratedAttribute]
public void set_AndroidAotMode(string value);
    [CompilerGeneratedAttribute]
public string get_ToolPath();
    [CompilerGeneratedAttribute]
public void set_ToolPath(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedAssemblies();
    [CompilerGeneratedAttribute]
public void set_ResolvedAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_StampFile();
    [CompilerGeneratedAttribute]
public void set_StampFile(string value);
    public virtual bool RunTask();
    private bool DoExecute();
    private bool RunCilStrip(string assembly, string output);
    private void OnOutputData(object sender, DataReceivedEventArgs e);
    private void OnErrorData(object sender, DataReceivedEventArgs e);
}
public class Xamarin.Android.Tasks.ClassParse : AndroidDotnetToolTask {
    [CompilerGeneratedAttribute]
private string <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <SourceJars>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <DocumentationPaths>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string OutputFile { get; public set; }
    [RequiredAttribute]
public ITaskItem[] SourceJars { get; public set; }
    public ITaskItem[] DocumentationPaths { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_SourceJars();
    [CompilerGeneratedAttribute]
public void set_SourceJars(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_DocumentationPaths();
    [CompilerGeneratedAttribute]
public void set_DocumentationPaths(ITaskItem[] value);
    protected virtual string GenerateCommandLineCommands();
    private void WriteLine(StreamWriter sw, string line);
}
public class Xamarin.Android.Tasks.CollectLibraryAssets : AndroidTask {
    [CompilerGeneratedAttribute]
private string <AssetDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AdditionalAssetDirectories>k__BackingField;
    public string TaskPrefix { get; }
    public string AssetDirectory { get; public set; }
    public String[] AdditionalAssetDirectories { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_AssetDirectory();
    [CompilerGeneratedAttribute]
public void set_AssetDirectory(string value);
    [CompilerGeneratedAttribute]
public String[] get_AdditionalAssetDirectories();
    [CompilerGeneratedAttribute]
public void set_AdditionalAssetDirectories(String[] value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.CollectNonEmptyDirectories : AndroidTask {
    private List`1<ITaskItem> output;
    private List`1<ITaskItem> libraryResourceFiles;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Directories>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LibraryProjectIntermediatePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StampDirectory>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] Directories { get; public set; }
    [RequiredAttribute]
public string LibraryProjectIntermediatePath { get; public set; }
    [RequiredAttribute]
public string StampDirectory { get; public set; }
    [OutputAttribute]
public ITaskItem[] Output { get; }
    [OutputAttribute]
public ITaskItem[] LibraryResourceFiles { get; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Directories();
    [CompilerGeneratedAttribute]
public void set_Directories(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_LibraryProjectIntermediatePath();
    [CompilerGeneratedAttribute]
public void set_LibraryProjectIntermediatePath(string value);
    [CompilerGeneratedAttribute]
public string get_StampDirectory();
    [CompilerGeneratedAttribute]
public void set_StampDirectory(string value);
    public ITaskItem[] get_Output();
    public ITaskItem[] get_LibraryResourceFiles();
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.CollectPdbFiles : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <PdbFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <PortablePdbFiles>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] ResolvedAssemblies { get; public set; }
    [OutputAttribute]
public ITaskItem[] PdbFiles { get; public set; }
    [OutputAttribute]
public ITaskItem[] PortablePdbFiles { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedAssemblies();
    [CompilerGeneratedAttribute]
public void set_ResolvedAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_PdbFiles();
    [CompilerGeneratedAttribute]
public void set_PdbFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_PortablePdbFiles();
    [CompilerGeneratedAttribute]
public void set_PortablePdbFiles(ITaskItem[] value);
    public virtual bool RunTask();
}
internal class Xamarin.Android.Tasks.CommonAssemblyStore : AssemblyStore {
    private List`1<AssemblyStoreAssemblyInfo> assemblies;
    public CommonAssemblyStore(string apkName, string archiveAssembliesPrefix, TaskLoggingHelper log, UInt32 id, AssemblyStoreGlobalIndex globalIndexCounter);
    public virtual void Add(AssemblyStoreAssemblyInfo blobAssembly);
    public virtual void Generate(string outputDirectory, List`1<AssemblyStoreIndexEntry> globalIndex, List`1<string> blobPaths);
}
public class Xamarin.Android.Tasks.CompileNativeAssembly : AndroidAsyncTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DebugBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidBinUtilsDirectory>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] Sources { get; public set; }
    [RequiredAttribute]
public bool DebugBuild { get; public set; }
    [RequiredAttribute]
public string WorkingDirectory { get; public set; }
    [RequiredAttribute]
public string AndroidBinUtilsDirectory { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_DebugBuild();
    [CompilerGeneratedAttribute]
public void set_DebugBuild(bool value);
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidBinUtilsDirectory();
    [CompilerGeneratedAttribute]
public void set_AndroidBinUtilsDirectory(string value);
    public virtual Task RunTaskAsync();
    private void RunAssembler(Config config);
    [IteratorStateMachineAttribute("Xamarin.Android.Tasks.CompileNativeAssembly/<GetAssemblerConfigs>d__21")]
private IEnumerable`1<Config> GetAssemblerConfigs();
    private void OnOutputData(string assemblerName, object sender, DataReceivedEventArgs e);
    private void OnErrorData(string assemblerName, object sender, DataReceivedEventArgs e);
    private static string QuoteFileName(string fileName);
}
internal class Xamarin.Android.Tasks.CompressedAssembliesNativeAssemblyGenerator : LlvmIrComposer {
    private static string DescriptorsArraySymbolName;
    private static string CompressedAssembliesSymbolName;
    private IDictionary`2<string, CompressedAssemblyInfo> assemblies;
    private StructureInfo compressedAssemblyDescriptorStructureInfo;
    private StructureInfo compressedAssembliesStructureInfo;
    public CompressedAssembliesNativeAssemblyGenerator(IDictionary`2<string, CompressedAssemblyInfo> assemblies);
    private void InitCompressedAssemblies(List`1& compressedAssemblyDescriptors, StructureInstance`1& compressedAssemblies, List`1& buffers);
    protected virtual void Construct(LlvmIrModule module);
    private void MapStructures(LlvmIrModule module);
}
internal class Xamarin.Android.Tasks.CompressedAssemblyInfo : object {
    private static string CompressedAssembliesInfoKey;
    [CompilerGeneratedAttribute]
private UInt32 <FileSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <DescriptorIndex>k__BackingField;
    public UInt32 FileSize { get; }
    public UInt32 DescriptorIndex { get; public set; }
    public CompressedAssemblyInfo(UInt32 fileSize);
    [CompilerGeneratedAttribute]
public UInt32 get_FileSize();
    [CompilerGeneratedAttribute]
public UInt32 get_DescriptorIndex();
    [CompilerGeneratedAttribute]
public void set_DescriptorIndex(UInt32 value);
    public static string GetKey(string projectFullPath);
    public static string GetDictionaryKey(ITaskItem assembly);
}
public class Xamarin.Android.Tasks.ComputeHash : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyMetaData>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Output>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] Source { get; public set; }
    public bool CopyMetaData { get; public set; }
    [OutputAttribute]
public ITaskItem[] Output { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_CopyMetaData();
    [CompilerGeneratedAttribute]
public void set_CopyMetaData(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(ITaskItem[] value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.ConvertCustomView : AndroidTask {
    [CompilerGeneratedAttribute]
private string <CustomViewMapFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AcwMapFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResourceDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Processed>k__BackingField;
    private Dictionary`2<string, string> _resource_name_case_map;
    private static XNamespace res_auto;
    private static XNamespace android;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string CustomViewMapFile { get; public set; }
    [RequiredAttribute]
public string AcwMapFile { get; public set; }
    public ITaskItem[] ResourceDirectories { get; public set; }
    [OutputAttribute]
public ITaskItem[] Processed { get; public set; }
    private Dictionary`2<string, string> resource_name_case_map { get; }
    private static ConvertCustomView();
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_CustomViewMapFile();
    [CompilerGeneratedAttribute]
public void set_CustomViewMapFile(string value);
    [CompilerGeneratedAttribute]
public string get_AcwMapFile();
    [CompilerGeneratedAttribute]
public void set_AcwMapFile(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResourceDirectories();
    [CompilerGeneratedAttribute]
public void set_ResourceDirectories(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Processed();
    [CompilerGeneratedAttribute]
public void set_Processed(ITaskItem[] value);
    private Dictionary`2<string, string> get_resource_name_case_map();
    public virtual bool RunTask();
    private bool TryFixCustomClassAttribute(XAttribute attr, Dictionary`2<string, string> acwMap);
    private bool TryFixFragment(XAttribute attr, Dictionary`2<string, string> acwMap);
    private bool TryFixCustomView(XElement elem, Dictionary`2<string, string> acwMap, Action`2<TraceLevel, string> logMessage);
}
public class Xamarin.Android.Tasks.ConvertResourcesCases : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResourceDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomViewMapFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidConversionFlagFile>k__BackingField;
    private Dictionary`2<string, string> _resource_name_case_map;
    private Dictionary`2<string, HashSet`1<string>> customViewMap;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] ResourceDirectories { get; public set; }
    [RequiredAttribute]
public string CustomViewMapFile { get; public set; }
    public string AndroidConversionFlagFile { get; public set; }
    private Dictionary`2<string, string> resource_name_case_map { get; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResourceDirectories();
    [CompilerGeneratedAttribute]
public void set_ResourceDirectories(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_CustomViewMapFile();
    [CompilerGeneratedAttribute]
public void set_CustomViewMapFile(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidConversionFlagFile();
    [CompilerGeneratedAttribute]
public void set_AndroidConversionFlagFile(string value);
    private Dictionary`2<string, string> get_resource_name_case_map();
    public virtual bool RunTask();
    private void FixupResources(ITaskItem item);
}
public class Xamarin.Android.Tasks.CopyGeneratedJavaResourceClasses : AndroidTask {
    [CompilerGeneratedAttribute]
private string <SourceTopDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationTopDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrimaryPackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtraPackages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrimaryJavaResgenFile>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string SourceTopDirectory { get; public set; }
    public string DestinationTopDirectory { get; public set; }
    [RequiredAttribute]
public string PrimaryPackageName { get; public set; }
    public string ExtraPackages { get; public set; }
    [OutputAttribute]
public string PrimaryJavaResgenFile { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_SourceTopDirectory();
    [CompilerGeneratedAttribute]
public void set_SourceTopDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_DestinationTopDirectory();
    [CompilerGeneratedAttribute]
public void set_DestinationTopDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_PrimaryPackageName();
    [CompilerGeneratedAttribute]
public void set_PrimaryPackageName(string value);
    [CompilerGeneratedAttribute]
public string get_ExtraPackages();
    [CompilerGeneratedAttribute]
public void set_ExtraPackages(string value);
    [CompilerGeneratedAttribute]
public string get_PrimaryJavaResgenFile();
    [CompilerGeneratedAttribute]
public void set_PrimaryJavaResgenFile(string value);
    public virtual bool RunTask();
    [IteratorStateMachineAttribute("Xamarin.Android.Tasks.CopyGeneratedJavaResourceClasses/<GetPackages>d__23")]
private IEnumerable`1<string> GetPackages();
}
public class Xamarin.Android.Tasks.CopyIfChanged : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <SourceFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <DestinationFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompareFileLengths>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ModifiedFiles>k__BackingField;
    private List`1<ITaskItem> modifiedFiles;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] SourceFiles { get; public set; }
    [RequiredAttribute]
public ITaskItem[] DestinationFiles { get; public set; }
    public bool CompareFileLengths { get; public set; }
    [OutputAttribute]
public ITaskItem[] ModifiedFiles { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_SourceFiles();
    [CompilerGeneratedAttribute]
public void set_SourceFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_DestinationFiles();
    [CompilerGeneratedAttribute]
public void set_DestinationFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_CompareFileLengths();
    [CompilerGeneratedAttribute]
public void set_CompareFileLengths(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ModifiedFiles();
    [CompilerGeneratedAttribute]
public void set_ModifiedFiles(ITaskItem[] value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.CopyResource : AndroidTask {
    [CompilerGeneratedAttribute]
private string <ResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    private static Assembly ExecutingAssembly;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string ResourceName { get; public set; }
    [RequiredAttribute]
public string OutputPath { get; public set; }
    private static CopyResource();
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_ResourceName();
    [CompilerGeneratedAttribute]
public void set_ResourceName(string value);
    [CompilerGeneratedAttribute]
public string get_OutputPath();
    [CompilerGeneratedAttribute]
public void set_OutputPath(string value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.CreateAar : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <AndroidAssets>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AndroidResources>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AndroidEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <JarFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <NativeLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ProguardConfigurationFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssetDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFile>k__BackingField;
    public string TaskPrefix { get; }
    public ITaskItem[] AndroidAssets { get; public set; }
    public ITaskItem[] AndroidResources { get; public set; }
    public ITaskItem[] AndroidEnvironment { get; public set; }
    public ITaskItem[] JarFiles { get; public set; }
    public ITaskItem[] NativeLibraries { get; public set; }
    public ITaskItem[] ProguardConfigurationFiles { get; public set; }
    [RequiredAttribute]
public string AssetDirectory { get; public set; }
    [RequiredAttribute]
public string OutputFile { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AndroidAssets();
    [CompilerGeneratedAttribute]
public void set_AndroidAssets(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AndroidResources();
    [CompilerGeneratedAttribute]
public void set_AndroidResources(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AndroidEnvironment();
    [CompilerGeneratedAttribute]
public void set_AndroidEnvironment(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_JarFiles();
    [CompilerGeneratedAttribute]
public void set_JarFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_NativeLibraries();
    [CompilerGeneratedAttribute]
public void set_NativeLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ProguardConfigurationFiles();
    [CompilerGeneratedAttribute]
public void set_ProguardConfigurationFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_AssetDirectory();
    [CompilerGeneratedAttribute]
public void set_AssetDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(string value);
    public virtual bool RunTask();
    private static string GetHashedFileName(ITaskItem item);
}
public class Xamarin.Android.Tasks.CreateAdditionalLibraryResourceCache : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <AdditionalAndroidResourcePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AdditionalAndroidResourceCachePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <CopiedResources>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] AdditionalAndroidResourcePaths { get; public set; }
    [RequiredAttribute]
public ITaskItem[] AdditionalAndroidResourceCachePaths { get; public set; }
    [OutputAttribute]
public ITaskItem[] CopiedResources { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AdditionalAndroidResourcePaths();
    [CompilerGeneratedAttribute]
public void set_AdditionalAndroidResourcePaths(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AdditionalAndroidResourceCachePaths();
    [CompilerGeneratedAttribute]
public void set_AdditionalAndroidResourceCachePaths(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_CopiedResources();
    [CompilerGeneratedAttribute]
public void set_CopiedResources(ITaskItem[] value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.CreateMsymManifest : AndroidTask {
    [CompilerGeneratedAttribute]
private string <BuildId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDirectory>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string BuildId { get; public set; }
    [RequiredAttribute]
public string PackageName { get; public set; }
    [RequiredAttribute]
public string OutputDirectory { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_BuildId();
    [CompilerGeneratedAttribute]
public void set_BuildId(string value);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    [CompilerGeneratedAttribute]
public string get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(string value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.CreateResgenManifest : AndroidTask {
    [CompilerGeneratedAttribute]
private string <ManifestOutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string ManifestOutputFile { get; public set; }
    [RequiredAttribute]
public string PackageName { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_ManifestOutputFile();
    [CompilerGeneratedAttribute]
public void set_ManifestOutputFile(string value);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.CreateTemporaryDirectory : AndroidTask {
    [CompilerGeneratedAttribute]
private string <TemporaryDirectory>k__BackingField;
    public string TaskPrefix { get; }
    [OutputAttribute]
public string TemporaryDirectory { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_TemporaryDirectory();
    [CompilerGeneratedAttribute]
public void set_TemporaryDirectory(string value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.CreateTypeManagerJava : AndroidTask {
    [CompilerGeneratedAttribute]
private string <ResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFilePath>k__BackingField;
    private static Assembly ExecutingAssembly;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string ResourceName { get; public set; }
    [RequiredAttribute]
public string OutputFilePath { get; public set; }
    private static CreateTypeManagerJava();
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_ResourceName();
    [CompilerGeneratedAttribute]
public void set_ResourceName(string value);
    [CompilerGeneratedAttribute]
public string get_OutputFilePath();
    [CompilerGeneratedAttribute]
public void set_OutputFilePath(string value);
    public virtual bool RunTask();
    private string ReadResource(string resourceName);
}
public class Xamarin.Android.Tasks.D8 : JavaToolTask {
    [CompilerGeneratedAttribute]
private string <JarPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidManifestFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDesugar>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClassesZip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaPlatformJarPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <JavaLibrariesToEmbed>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AlternativeJarLibrariesToEmbed>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <JavaLibrariesToReference>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <MapDiagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtraArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSdkVersion>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string JarPath { get; public set; }
    public string OutputDirectory { get; public set; }
    public string AndroidManifestFile { get; public set; }
    public bool Debug { get; public set; }
    public bool EnableDesugar { get; public set; }
    public string ClassesZip { get; public set; }
    [RequiredAttribute]
public string JavaPlatformJarPath { get; public set; }
    public ITaskItem[] JavaLibrariesToEmbed { get; public set; }
    public ITaskItem[] AlternativeJarLibrariesToEmbed { get; public set; }
    public ITaskItem[] JavaLibrariesToReference { get; public set; }
    public ITaskItem[] MapDiagnostics { get; public set; }
    public string ExtraArguments { get; public set; }
    protected string MainClass { get; }
    protected int MinSdkVersion { get; protected set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_JarPath();
    [CompilerGeneratedAttribute]
public void set_JarPath(string value);
    [CompilerGeneratedAttribute]
public string get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidManifestFile();
    [CompilerGeneratedAttribute]
public void set_AndroidManifestFile(string value);
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableDesugar();
    [CompilerGeneratedAttribute]
public void set_EnableDesugar(bool value);
    [CompilerGeneratedAttribute]
public string get_ClassesZip();
    [CompilerGeneratedAttribute]
public void set_ClassesZip(string value);
    [CompilerGeneratedAttribute]
public string get_JavaPlatformJarPath();
    [CompilerGeneratedAttribute]
public void set_JavaPlatformJarPath(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_JavaLibrariesToEmbed();
    [CompilerGeneratedAttribute]
public void set_JavaLibrariesToEmbed(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AlternativeJarLibrariesToEmbed();
    [CompilerGeneratedAttribute]
public void set_AlternativeJarLibrariesToEmbed(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_JavaLibrariesToReference();
    [CompilerGeneratedAttribute]
public void set_JavaLibrariesToReference(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_MapDiagnostics();
    [CompilerGeneratedAttribute]
public void set_MapDiagnostics(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_ExtraArguments();
    [CompilerGeneratedAttribute]
public void set_ExtraArguments(string value);
    protected virtual string GenerateCommandLineCommands();
    protected virtual string get_MainClass();
    [CompilerGeneratedAttribute]
protected int get_MinSdkVersion();
    [CompilerGeneratedAttribute]
protected void set_MinSdkVersion(int value);
    protected virtual CommandLineBuilder GetCommandLineBuilder();
}
public class Xamarin.Android.Tasks.DetermineJavaLibrariesToCompile : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <MonoPlatformJarPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableInstantRun>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <JavaSourceFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <JavaLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ExternalJavaLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <DoNotPackageJavaLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <LibraryProjectJars>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <JavaLibrariesToCompile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ReferenceJavaLibraries>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] MonoPlatformJarPaths { get; public set; }
    public bool EnableInstantRun { get; public set; }
    public ITaskItem[] JavaSourceFiles { get; public set; }
    public ITaskItem[] JavaLibraries { get; public set; }
    public ITaskItem[] ExternalJavaLibraries { get; public set; }
    public ITaskItem[] DoNotPackageJavaLibraries { get; public set; }
    public ITaskItem[] LibraryProjectJars { get; public set; }
    [OutputAttribute]
public ITaskItem[] JavaLibrariesToCompile { get; public set; }
    [OutputAttribute]
public ITaskItem[] ReferenceJavaLibraries { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_MonoPlatformJarPaths();
    [CompilerGeneratedAttribute]
public void set_MonoPlatformJarPaths(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_EnableInstantRun();
    [CompilerGeneratedAttribute]
public void set_EnableInstantRun(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_JavaSourceFiles();
    [CompilerGeneratedAttribute]
public void set_JavaSourceFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_JavaLibraries();
    [CompilerGeneratedAttribute]
public void set_JavaLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ExternalJavaLibraries();
    [CompilerGeneratedAttribute]
public void set_ExternalJavaLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_DoNotPackageJavaLibraries();
    [CompilerGeneratedAttribute]
public void set_DoNotPackageJavaLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_LibraryProjectJars();
    [CompilerGeneratedAttribute]
public void set_LibraryProjectJars(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_JavaLibrariesToCompile();
    [CompilerGeneratedAttribute]
public void set_JavaLibrariesToCompile(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ReferenceJavaLibraries();
    [CompilerGeneratedAttribute]
public void set_ReferenceJavaLibraries(ITaskItem[] value);
    public virtual bool RunTask();
    private bool HasClassFiles(string jar);
    private bool IsExcluded(string jar);
}
public class Xamarin.Android.Tasks.DummyCustomAttributeProvider : object {
    public static DummyCustomAttributeProvider Instance;
    private static DummyCustomAttributeProvider();
    public sealed virtual object GetPrimitiveType(PrimitiveTypeCode typeCode);
    public sealed virtual object GetSystemType();
    public sealed virtual object GetSZArrayType(object elementType);
    public sealed virtual object GetTypeFromDefinition(MetadataReader reader, TypeDefinitionHandle handle, byte rawTypeKind);
    public sealed virtual object GetTypeFromReference(MetadataReader reader, TypeReferenceHandle handle, byte rawTypeKind);
    public sealed virtual object GetTypeFromSerializedName(string name);
    public sealed virtual PrimitiveTypeCode GetUnderlyingEnumType(object type);
    public sealed virtual bool IsSystemType(object type);
}
internal static class Xamarin.Android.Tasks.ELFHelper : object {
    public static bool IsEmptyAOTLibrary(TaskLoggingHelper log, string path);
    public static bool ReferencesLibrary(string libraryPath, string referencedLibraryName);
    private static bool IsLibraryReference(IStringTable stringTable, IDynamicEntry dynEntry, string referencedLibraryName);
    private static bool IsEmptyAOTLibrary(TaskLoggingHelper log, string path, IELF elf);
    private static ISymbolTable GetSymbolTable(IELF elf, string sectionName);
    private static ISection GetSection(IELF elf, string sectionName);
    [CompilerGeneratedAttribute]
internal static bool <IsEmptyAOTLibrary>g__IsNonEmptyCodeSymbol|3_0(SymbolEntry`1<T> symbolEntry);
}
internal class Xamarin.Android.Tasks.EnvironmentFilesParser : object {
    [CompilerGeneratedAttribute]
private bool <BrokenExceptionTransitions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HavebuildId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HaveHttpMessageHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HaveLogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HaveMonoDebug>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HaveMonoGCParams>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HaveTlsProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsesAssemblyPreload>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <EnvironmentVariableLines>k__BackingField;
    public bool BrokenExceptionTransitions { get; public set; }
    public bool HavebuildId { get; private set; }
    public bool HaveHttpMessageHandler { get; private set; }
    public bool HaveLogLevel { get; private set; }
    public bool HaveMonoDebug { get; private set; }
    public bool HaveMonoGCParams { get; private set; }
    public bool HaveTlsProvider { get; private set; }
    public bool UsesAssemblyPreload { get; public set; }
    public List`1<string> EnvironmentVariableLines { get; }
    [CompilerGeneratedAttribute]
public bool get_BrokenExceptionTransitions();
    [CompilerGeneratedAttribute]
public void set_BrokenExceptionTransitions(bool value);
    [CompilerGeneratedAttribute]
public bool get_HavebuildId();
    [CompilerGeneratedAttribute]
private void set_HavebuildId(bool value);
    [CompilerGeneratedAttribute]
public bool get_HaveHttpMessageHandler();
    [CompilerGeneratedAttribute]
private void set_HaveHttpMessageHandler(bool value);
    [CompilerGeneratedAttribute]
public bool get_HaveLogLevel();
    [CompilerGeneratedAttribute]
private void set_HaveLogLevel(bool value);
    [CompilerGeneratedAttribute]
public bool get_HaveMonoDebug();
    [CompilerGeneratedAttribute]
private void set_HaveMonoDebug(bool value);
    [CompilerGeneratedAttribute]
public bool get_HaveMonoGCParams();
    [CompilerGeneratedAttribute]
private void set_HaveMonoGCParams(bool value);
    [CompilerGeneratedAttribute]
public bool get_HaveTlsProvider();
    [CompilerGeneratedAttribute]
private void set_HaveTlsProvider(bool value);
    [CompilerGeneratedAttribute]
public bool get_UsesAssemblyPreload();
    [CompilerGeneratedAttribute]
public void set_UsesAssemblyPreload(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_EnvironmentVariableLines();
    public bool AreBrokenExceptionTransitionsEnabled(ITaskItem[] environments);
    public void Parse(ITaskItem[] environments, SequencePointsMode sequencePointsMode, bool usingAndroidNETSdk, TaskLoggingHelper log);
    private bool IsBrokenExceptionTransitionsLine(string lineToWrite);
}
[ExtensionAttribute]
internal static class Xamarin.Android.Tasks.Extensions : object {
    [ExtensionAttribute]
internal static void AddFile(ConverterOptions opts, string name);
    [ExtensionAttribute]
internal static void AddReference(ConverterOptions opts, string name);
}
public class Xamarin.Android.Tasks.ExtractJarsFromAar : AndroidTask {
    [CompilerGeneratedAttribute]
private string <OutputJarsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputAnnotationsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Libraries>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string OutputJarsDirectory { get; public set; }
    [RequiredAttribute]
public string OutputAnnotationsDirectory { get; public set; }
    public String[] Libraries { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_OutputJarsDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputJarsDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_OutputAnnotationsDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputAnnotationsDirectory(string value);
    [CompilerGeneratedAttribute]
public String[] get_Libraries();
    [CompilerGeneratedAttribute]
public void set_Libraries(String[] value);
    public virtual bool RunTask();
    private static void Extract(ZipEntry entry, MemoryStream stream, string destination);
    private void DeleteUnknownFiles(string directory, HashSet`1<string> knownFiles);
}
internal class Xamarin.Android.Tasks.FileResourceParser : ResourceParser {
    [CompilerGeneratedAttribute]
private string <JavaPlatformDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceFlagFile>k__BackingField;
    private Dictionary`2<R, R[]> arrayMapping;
    private Dictionary`2<string, List`1<string>> foofoo;
    private List`1<string> custom_types;
    private XDocument publicXml;
    private String[] publicXmlFiles;
    private HashSet`1<string> resourceNamesToUseDirectly;
    public string JavaPlatformDirectory { get; public set; }
    public string ResourceFlagFile { get; public set; }
    [CompilerGeneratedAttribute]
public string get_JavaPlatformDirectory();
    [CompilerGeneratedAttribute]
public void set_JavaPlatformDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_ResourceFlagFile();
    [CompilerGeneratedAttribute]
public void set_ResourceFlagFile(string value);
    protected XDocument LoadPublicXml();
    public IList`1<R> Parse(string resourceDirectory, IEnumerable`1<string> additionalResourceDirectories, Dictionary`2<string, string> resourceMap);
    private int GetId(ICollection`1<R> resources, string identifier);
    private void ProcessResourceFile(string file, Dictionary`2<string, ICollection`1<R>> resources);
    private void CreateResourceField(string root, string id, Dictionary`2<string, ICollection`1<R>> resources);
    private void ProcessStyleable(XmlReader reader, Dictionary`2<string, ICollection`1<R>> resources);
    private void ProcessXmlFile(string file, Dictionary`2<string, ICollection`1<R>> resources);
}
public class Xamarin.Android.Tasks.FilterAssemblies : AndroidTask {
    private static RegisteredTaskObjectLifetime Lifetime;
    [CompilerGeneratedAttribute]
private ITaskItem[] <InputAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <OutputAssemblies>k__BackingField;
    public string TaskPrefix { get; }
    public ITaskItem[] InputAssemblies { get; public set; }
    [OutputAttribute]
public ITaskItem[] OutputAssemblies { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_InputAssemblies();
    [CompilerGeneratedAttribute]
public void set_InputAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_OutputAssemblies();
    [CompilerGeneratedAttribute]
public void set_OutputAssemblies(ITaskItem[] value);
    public virtual bool RunTask();
    private void ProcessAssembly(ITaskItem assemblyItem, List`1<ITaskItem> output);
    private bool IsAndroidAssembly(AssemblyDefinition assembly, MetadataReader reader);
    private bool HasEmbeddedResource(MetadataReader reader);
}
public class Xamarin.Android.Tasks.FindLayoutsToBind : AndroidTask {
    private static string DirSeparator;
    private static Regex layoutPathRegex;
    [CompilerGeneratedAttribute]
private bool <GenerateLayoutBindings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BindingDependenciesCacheFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <BoundLayouts>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResourceFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <LayoutsToBind>k__BackingField;
    public string TaskPrefix { get; }
    public bool GenerateLayoutBindings { get; public set; }
    public string BindingDependenciesCacheFile { get; public set; }
    public ITaskItem[] BoundLayouts { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ResourceFiles { get; public set; }
    [OutputAttribute]
public ITaskItem[] LayoutsToBind { get; public set; }
    private static FindLayoutsToBind();
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public bool get_GenerateLayoutBindings();
    [CompilerGeneratedAttribute]
public void set_GenerateLayoutBindings(bool value);
    [CompilerGeneratedAttribute]
public string get_BindingDependenciesCacheFile();
    [CompilerGeneratedAttribute]
public void set_BindingDependenciesCacheFile(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_BoundLayouts();
    [CompilerGeneratedAttribute]
public void set_BoundLayouts(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResourceFiles();
    [CompilerGeneratedAttribute]
public void set_ResourceFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_LayoutsToBind();
    [CompilerGeneratedAttribute]
public void set_LayoutsToBind(ITaskItem[] value);
    public virtual bool RunTask();
    private void AddLayoutFile(string filePath, Dictionary`2<string, ITaskItem> layouts);
}
public class Xamarin.Android.Tasks.GenerateCompressedAssembliesNativeSourceFiles : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SupportedAbis>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnvironmentOutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCompression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectFullPath>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] ResolvedAssemblies { get; public set; }
    [RequiredAttribute]
public String[] SupportedAbis { get; public set; }
    [RequiredAttribute]
public string EnvironmentOutputDirectory { get; public set; }
    [RequiredAttribute]
public bool Debug { get; public set; }
    [RequiredAttribute]
public bool EnableCompression { get; public set; }
    [RequiredAttribute]
public string ProjectFullPath { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedAssemblies();
    [CompilerGeneratedAttribute]
public void set_ResolvedAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public String[] get_SupportedAbis();
    [CompilerGeneratedAttribute]
public void set_SupportedAbis(String[] value);
    [CompilerGeneratedAttribute]
public string get_EnvironmentOutputDirectory();
    [CompilerGeneratedAttribute]
public void set_EnvironmentOutputDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableCompression();
    [CompilerGeneratedAttribute]
public void set_EnableCompression(bool value);
    [CompilerGeneratedAttribute]
public string get_ProjectFullPath();
    [CompilerGeneratedAttribute]
public void set_ProjectFullPath(string value);
    public virtual bool RunTask();
    private void GenerateCompressedAssemblySources();
    [CompilerGeneratedAttribute]
private void <GenerateCompressedAssemblySources>g__Generate|27_0(IDictionary`2<string, CompressedAssemblyInfo> dict);
}
public class Xamarin.Android.Tasks.GenerateJavaStubs : AndroidTask {
    public static string MarshalMethodsRegisterTaskKey;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedUserAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AcwMapFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FrameworkDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SupportedAbis>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypemapOutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateNativeAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateOutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LinkingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HaveMultipleRIDs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableMarshalMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManifestTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <MergedManifestDocuments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultiDex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionCode>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ManifestPlaceholders>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidSdkDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidSdkPlatform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MergedAndroidManifestOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmbedAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedsInternet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InstantRunEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ErrorOnCustomJavaObject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BundledWearApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageNamingPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationJavaClass>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipJniAddNativeMethodRegistrationAttributeScan>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckedBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SupportedOSPlatformVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Environments>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <GeneratedBinaryTypeMaps>k__BackingField;
    internal static string AndroidSkipJavaStubGeneration;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] ResolvedAssemblies { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ResolvedUserAssemblies { get; public set; }
    [RequiredAttribute]
public string AcwMapFile { get; public set; }
    [RequiredAttribute]
public ITaskItem[] FrameworkDirectories { get; public set; }
    [RequiredAttribute]
public String[] SupportedAbis { get; public set; }
    [RequiredAttribute]
public string TypemapOutputDirectory { get; public set; }
    [RequiredAttribute]
public bool GenerateNativeAssembly { get; public set; }
    public string IntermediateOutputDirectory { get; public set; }
    public bool LinkingEnabled { get; public set; }
    public bool HaveMultipleRIDs { get; public set; }
    public bool EnableMarshalMethods { get; public set; }
    public string ManifestTemplate { get; public set; }
    public String[] MergedManifestDocuments { get; public set; }
    public bool Debug { get; public set; }
    public bool MultiDex { get; public set; }
    public string ApplicationLabel { get; public set; }
    public string PackageName { get; public set; }
    public string VersionName { get; public set; }
    public string VersionCode { get; public set; }
    public String[] ManifestPlaceholders { get; public set; }
    public string AndroidSdkDir { get; public set; }
    public string AndroidSdkPlatform { get; public set; }
    public string OutputDirectory { get; public set; }
    public string MergedAndroidManifestOutput { get; public set; }
    public bool EmbedAssemblies { get; public set; }
    public bool NeedsInternet { get; public set; }
    public bool InstantRunEnabled { get; public set; }
    public bool ErrorOnCustomJavaObject { get; public set; }
    public string BundledWearApplicationName { get; public set; }
    public string PackageNamingPolicy { get; public set; }
    public string ApplicationJavaClass { get; public set; }
    public bool SkipJniAddNativeMethodRegistrationAttributeScan { get; public set; }
    public string CheckedBuild { get; public set; }
    public string SupportedOSPlatformVersion { get; public set; }
    public ITaskItem[] Environments { get; public set; }
    [OutputAttribute]
public String[] GeneratedBinaryTypeMaps { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedAssemblies();
    [CompilerGeneratedAttribute]
public void set_ResolvedAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedUserAssemblies();
    [CompilerGeneratedAttribute]
public void set_ResolvedUserAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_AcwMapFile();
    [CompilerGeneratedAttribute]
public void set_AcwMapFile(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FrameworkDirectories();
    [CompilerGeneratedAttribute]
public void set_FrameworkDirectories(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public String[] get_SupportedAbis();
    [CompilerGeneratedAttribute]
public void set_SupportedAbis(String[] value);
    [CompilerGeneratedAttribute]
public string get_TypemapOutputDirectory();
    [CompilerGeneratedAttribute]
public void set_TypemapOutputDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_GenerateNativeAssembly();
    [CompilerGeneratedAttribute]
public void set_GenerateNativeAssembly(bool value);
    [CompilerGeneratedAttribute]
public string get_IntermediateOutputDirectory();
    [CompilerGeneratedAttribute]
public void set_IntermediateOutputDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_LinkingEnabled();
    [CompilerGeneratedAttribute]
public void set_LinkingEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_HaveMultipleRIDs();
    [CompilerGeneratedAttribute]
public void set_HaveMultipleRIDs(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableMarshalMethods();
    [CompilerGeneratedAttribute]
public void set_EnableMarshalMethods(bool value);
    [CompilerGeneratedAttribute]
public string get_ManifestTemplate();
    [CompilerGeneratedAttribute]
public void set_ManifestTemplate(string value);
    [CompilerGeneratedAttribute]
public String[] get_MergedManifestDocuments();
    [CompilerGeneratedAttribute]
public void set_MergedManifestDocuments(String[] value);
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public bool get_MultiDex();
    [CompilerGeneratedAttribute]
public void set_MultiDex(bool value);
    [CompilerGeneratedAttribute]
public string get_ApplicationLabel();
    [CompilerGeneratedAttribute]
public void set_ApplicationLabel(string value);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    [CompilerGeneratedAttribute]
public string get_VersionName();
    [CompilerGeneratedAttribute]
public void set_VersionName(string value);
    [CompilerGeneratedAttribute]
public string get_VersionCode();
    [CompilerGeneratedAttribute]
public void set_VersionCode(string value);
    [CompilerGeneratedAttribute]
public String[] get_ManifestPlaceholders();
    [CompilerGeneratedAttribute]
public void set_ManifestPlaceholders(String[] value);
    [CompilerGeneratedAttribute]
public string get_AndroidSdkDir();
    [CompilerGeneratedAttribute]
public void set_AndroidSdkDir(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidSdkPlatform();
    [CompilerGeneratedAttribute]
public void set_AndroidSdkPlatform(string value);
    [CompilerGeneratedAttribute]
public string get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_MergedAndroidManifestOutput();
    [CompilerGeneratedAttribute]
public void set_MergedAndroidManifestOutput(string value);
    [CompilerGeneratedAttribute]
public bool get_EmbedAssemblies();
    [CompilerGeneratedAttribute]
public void set_EmbedAssemblies(bool value);
    [CompilerGeneratedAttribute]
public bool get_NeedsInternet();
    [CompilerGeneratedAttribute]
public void set_NeedsInternet(bool value);
    [CompilerGeneratedAttribute]
public bool get_InstantRunEnabled();
    [CompilerGeneratedAttribute]
public void set_InstantRunEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_ErrorOnCustomJavaObject();
    [CompilerGeneratedAttribute]
public void set_ErrorOnCustomJavaObject(bool value);
    [CompilerGeneratedAttribute]
public string get_BundledWearApplicationName();
    [CompilerGeneratedAttribute]
public void set_BundledWearApplicationName(string value);
    [CompilerGeneratedAttribute]
public string get_PackageNamingPolicy();
    [CompilerGeneratedAttribute]
public void set_PackageNamingPolicy(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationJavaClass();
    [CompilerGeneratedAttribute]
public void set_ApplicationJavaClass(string value);
    [CompilerGeneratedAttribute]
public bool get_SkipJniAddNativeMethodRegistrationAttributeScan();
    [CompilerGeneratedAttribute]
public void set_SkipJniAddNativeMethodRegistrationAttributeScan(bool value);
    [CompilerGeneratedAttribute]
public string get_CheckedBuild();
    [CompilerGeneratedAttribute]
public void set_CheckedBuild(string value);
    [CompilerGeneratedAttribute]
public string get_SupportedOSPlatformVersion();
    [CompilerGeneratedAttribute]
public void set_SupportedOSPlatformVersion(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Environments();
    [CompilerGeneratedAttribute]
public void set_Environments(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public String[] get_GeneratedBinaryTypeMaps();
    [CompilerGeneratedAttribute]
public void set_GeneratedBinaryTypeMaps(String[] value);
    public virtual bool RunTask();
    private XAAssemblyResolver MakeResolver(bool useMarshalMethods);
    private void Run(XAAssemblyResolver res, bool useMarshalMethods);
    private AssemblyDefinition LoadAssembly(string path, XAAssemblyResolver resolver);
    private bool CreateJavaSources(IEnumerable`1<JavaType> newJavaTypes, TypeDefinitionCache cache, MarshalMethodsClassifier classifier, bool useMarshalMethods);
    private static string GetMonoInitSource(string androidSdkPlatform);
    private string GetResource(string resource);
    private void SaveResource(string resource, string filename, string destDir, Func`2<string, string> applyTemplate);
    private void WriteTypeMappings(List`1<JavaType> types, TypeDefinitionCache cache);
    private Dictionary`2<AssemblyDefinition, string> AddMethodsFromAbiSpecificAssemblies(MarshalMethodsClassifier classifier, XAAssemblyResolver resolver, Dictionary`2<string, List`1<ITaskItem>> abiSpecificAssemblies);
    private List`1<MarshalMethodEntry> FindMarshalMethodsForAssembly(IDictionary`2<string, IList`1<MarshalMethodEntry>> marshalMethods, AssemblyDefinition asm);
    private void FindMatchingMethodsInAssembly(ITaskItem assemblyItem, MarshalMethodsClassifier classifier, List`1<MarshalMethodEntry> assemblyMarshalMethods, XAAssemblyResolver resolver, List`1<AssemblyDefinition> newAssemblies, Dictionary`2<AssemblyDefinition, string> assemblyPaths);
    private void FindMatchingMethodInType(MarshalMethodEntry methodEntry, TypeDefinition type, MarshalMethodsClassifier classifier);
    [CompilerGeneratedAttribute]
private void <WriteTypeMappings>b__156_0(string message);
}
public class Xamarin.Android.Tasks.GenerateJniRemappingNativeCode : AndroidTask {
    internal static string JniRemappingNativeCodeInfoKey;
    [CompilerGeneratedAttribute]
private ITaskItem <RemappingXmlFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SupportedAbis>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateEmptyCode>k__BackingField;
    public string TaskPrefix { get; }
    public ITaskItem RemappingXmlFilePath { get; public set; }
    [RequiredAttribute]
public string OutputDirectory { get; public set; }
    [RequiredAttribute]
public String[] SupportedAbis { get; public set; }
    public bool GenerateEmptyCode { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem get_RemappingXmlFilePath();
    [CompilerGeneratedAttribute]
public void set_RemappingXmlFilePath(ITaskItem value);
    [CompilerGeneratedAttribute]
public string get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(string value);
    [CompilerGeneratedAttribute]
public String[] get_SupportedAbis();
    [CompilerGeneratedAttribute]
public void set_SupportedAbis(String[] value);
    [CompilerGeneratedAttribute]
public bool get_GenerateEmptyCode();
    [CompilerGeneratedAttribute]
public void set_GenerateEmptyCode(bool value);
    public virtual bool RunTask();
    private void GenerateEmpty();
    private void Generate();
    private void Generate(JniRemappingAssemblyGenerator jniRemappingComposer, int typeReplacementsCount);
    private void ReadXml(XmlReader reader, List`1<JniRemappingTypeReplacement> typeReplacements, List`1<JniRemappingMethodReplacement> methodReplacements);
    [CompilerGeneratedAttribute]
private bool <ReadXml>g__GetRequiredAttribute|24_0(string attributeName, String& attributeValue, <>c__DisplayClass24_0& );
    [CompilerGeneratedAttribute]
private int <ReadXml>g__GetCurrentLineNumber|24_1(<>c__DisplayClass24_0& );
}
public class Xamarin.Android.Tasks.GenerateLayoutBindings : AndroidAsyncTask {
    internal static BindingGeneratorLanguage DefaultOutputGenerator;
    internal static Dictionary`2<string, BindingGeneratorLanguage> KnownBindingGenerators;
    [CompilerGeneratedAttribute]
private string <OutputLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MonoAndroidCodeBehindDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidFragmentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResourceFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <PartialClassFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <GeneratedFiles>k__BackingField;
    public string TaskPrefix { get; }
    public string OutputLanguage { get; public set; }
    [RequiredAttribute]
public string MonoAndroidCodeBehindDir { get; public set; }
    [RequiredAttribute]
public string AndroidFragmentType { get; public set; }
    public string AppNamespace { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ResourceFiles { get; public set; }
    public ITaskItem[] PartialClassFiles { get; public set; }
    [OutputAttribute]
public ITaskItem[] GeneratedFiles { get; public set; }
    private static GenerateLayoutBindings();
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_OutputLanguage();
    [CompilerGeneratedAttribute]
public void set_OutputLanguage(string value);
    [CompilerGeneratedAttribute]
public string get_MonoAndroidCodeBehindDir();
    [CompilerGeneratedAttribute]
public void set_MonoAndroidCodeBehindDir(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidFragmentType();
    [CompilerGeneratedAttribute]
public void set_AndroidFragmentType(string value);
    [CompilerGeneratedAttribute]
public string get_AppNamespace();
    [CompilerGeneratedAttribute]
public void set_AppNamespace(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResourceFiles();
    [CompilerGeneratedAttribute]
public void set_ResourceFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_PartialClassFiles();
    [CompilerGeneratedAttribute]
public void set_PartialClassFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_GeneratedFiles();
    [CompilerGeneratedAttribute]
public void set_GeneratedFiles(ITaskItem[] value);
    private BindingGenerator GetBindingGenerator(string language);
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.GenerateLayoutBindings/<RunTaskAsync>d__37")]
public virtual Task RunTaskAsync();
    private void GenerateSourceForLayoutGroup(BindingGenerator generator, LayoutGroup group, Action`1<string> pathAdder);
    private bool GenerateSource(BindingGenerator generator, string outputFilePath, ICollection`1<LayoutWidget> widgets, string classNamespace, string className, List`1<PartialClass> partialClasses);
    private bool GenerateSource(StreamWriter writer, BindingGenerator generator, ICollection`1<LayoutWidget> widgets, string classNamespace, string className, List`1<PartialClass> partialClasses);
    private void DetermineWidgetType(LayoutWidget widget, bool needsFullCheck);
    private bool GetRequiredMetadata(ITaskItem resourceItem, string metadataName, String& metadataValue);
}
public class Xamarin.Android.Tasks.GenerateLibraryResources : AndroidAsyncTask {
    [CompilerGeneratedAttribute]
private string <ResourceSymbolsTextFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <LibraryTextFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ManifestFiles>k__BackingField;
    private string main_r_txt;
    private string output_directory;
    private Dictionary`2<string, string> r_txt_mapping;
    private static Char[] Delimiter;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string ResourceSymbolsTextFile { get; public set; }
    [RequiredAttribute]
public string OutputDirectory { get; public set; }
    public String[] LibraryTextFiles { get; public set; }
    public String[] ManifestFiles { get; public set; }
    private static GenerateLibraryResources();
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_ResourceSymbolsTextFile();
    [CompilerGeneratedAttribute]
public void set_ResourceSymbolsTextFile(string value);
    [CompilerGeneratedAttribute]
public string get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(string value);
    [CompilerGeneratedAttribute]
public String[] get_LibraryTextFiles();
    [CompilerGeneratedAttribute]
public void set_LibraryTextFiles(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ManifestFiles();
    [CompilerGeneratedAttribute]
public void set_ManifestFiles(String[] value);
    [AsyncStateMachineAttribute("Xamarin.Android.Tasks.GenerateLibraryResources/<RunTaskAsync>d__21")]
public virtual Task RunTaskAsync();
    private String[][] LoadValues(Package library);
    private bool SetValue(string key, String[] line, string r_txt);
    [IteratorStateMachineAttribute("Xamarin.Android.Tasks.GenerateLibraryResources/<ParseFile>d__27")]
private IEnumerable`1<String[]> ParseFile(StreamReader reader);
    private void GenerateJava(Package package);
}
public class Xamarin.Android.Tasks.GenerateManagedAidlProxies : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <References>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <SourceAidlFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateOutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParcelableHandlingOption>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] References { get; public set; }
    [RequiredAttribute]
public ITaskItem[] SourceAidlFiles { get; public set; }
    [RequiredAttribute]
public string IntermediateOutputDirectory { get; public set; }
    public string OutputNamespace { get; public set; }
    public string ParcelableHandlingOption { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_References();
    [CompilerGeneratedAttribute]
public void set_References(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_SourceAidlFiles();
    [CompilerGeneratedAttribute]
public void set_SourceAidlFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_IntermediateOutputDirectory();
    [CompilerGeneratedAttribute]
public void set_IntermediateOutputDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_OutputNamespace();
    [CompilerGeneratedAttribute]
public void set_OutputNamespace(string value);
    [CompilerGeneratedAttribute]
public string get_ParcelableHandlingOption();
    [CompilerGeneratedAttribute]
public void set_ParcelableHandlingOption(string value);
    public virtual bool RunTask();
    private static ParcelableHandling ToParcelableHandling(string option);
    [CompilerGeneratedAttribute]
private void <RunTask>b__23_0(string file, string source);
}
public class Xamarin.Android.Tasks.GeneratePackageManagerJava : AndroidTask {
    private Guid buildId;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedUserAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <NativeLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <MonoComponents>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <SatelliteAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseAssemblyStore>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnvironmentOutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MainAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Manifest>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SupportedAbis>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidPackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnablePreloadAssembliesDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InstantRunEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableMarshalMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuntimeConfigBinFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BoundExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageNamingPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Environments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidAotMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AndroidAotEnableLazyLoad>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableLLVM>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HttpClientHandlerType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TlsProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidSequencePointsMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSGenConcurrent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsingAndroidNETSdk>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildId>k__BackingField;
    private static String[] defaultLogLevel;
    private static String[] defaultMonoDebug;
    private static String[] defaultHttpMessageHandler;
    private static String[] defaultTlsProvider;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] ResolvedAssemblies { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ResolvedUserAssemblies { get; public set; }
    public ITaskItem[] NativeLibraries { get; public set; }
    public ITaskItem[] MonoComponents { get; public set; }
    public ITaskItem[] SatelliteAssemblies { get; public set; }
    public bool UseAssemblyStore { get; public set; }
    [RequiredAttribute]
public string OutputDirectory { get; public set; }
    [RequiredAttribute]
public string EnvironmentOutputDirectory { get; public set; }
    [RequiredAttribute]
public string MainAssembly { get; public set; }
    [RequiredAttribute]
public string TargetFrameworkVersion { get; public set; }
    [RequiredAttribute]
public string Manifest { get; public set; }
    [RequiredAttribute]
public String[] SupportedAbis { get; public set; }
    [RequiredAttribute]
public string AndroidPackageName { get; public set; }
    [RequiredAttribute]
public bool EnablePreloadAssembliesDefault { get; public set; }
    [RequiredAttribute]
public bool InstantRunEnabled { get; public set; }
    public bool EnableMarshalMethods { get; public set; }
    public string RuntimeConfigBinFilePath { get; public set; }
    public string BoundExceptionType { get; public set; }
    public string PackageNamingPolicy { get; public set; }
    public string Debug { get; public set; }
    public ITaskItem[] Environments { get; public set; }
    public string AndroidAotMode { get; public set; }
    public bool AndroidAotEnableLazyLoad { get; public set; }
    public bool EnableLLVM { get; public set; }
    public string HttpClientHandlerType { get; public set; }
    public string TlsProvider { get; public set; }
    public string AndroidSequencePointsMode { get; public set; }
    public bool EnableSGenConcurrent { get; public set; }
    public bool UsingAndroidNETSdk { get; public set; }
    [OutputAttribute]
public string BuildId { get; public set; }
    private bool _Debug { get; }
    private static GeneratePackageManagerJava();
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedAssemblies();
    [CompilerGeneratedAttribute]
public void set_ResolvedAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedUserAssemblies();
    [CompilerGeneratedAttribute]
public void set_ResolvedUserAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_NativeLibraries();
    [CompilerGeneratedAttribute]
public void set_NativeLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_MonoComponents();
    [CompilerGeneratedAttribute]
public void set_MonoComponents(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_SatelliteAssemblies();
    [CompilerGeneratedAttribute]
public void set_SatelliteAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_UseAssemblyStore();
    [CompilerGeneratedAttribute]
public void set_UseAssemblyStore(bool value);
    [CompilerGeneratedAttribute]
public string get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_EnvironmentOutputDirectory();
    [CompilerGeneratedAttribute]
public void set_EnvironmentOutputDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_MainAssembly();
    [CompilerGeneratedAttribute]
public void set_MainAssembly(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkVersion();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkVersion(string value);
    [CompilerGeneratedAttribute]
public string get_Manifest();
    [CompilerGeneratedAttribute]
public void set_Manifest(string value);
    [CompilerGeneratedAttribute]
public String[] get_SupportedAbis();
    [CompilerGeneratedAttribute]
public void set_SupportedAbis(String[] value);
    [CompilerGeneratedAttribute]
public string get_AndroidPackageName();
    [CompilerGeneratedAttribute]
public void set_AndroidPackageName(string value);
    [CompilerGeneratedAttribute]
public bool get_EnablePreloadAssembliesDefault();
    [CompilerGeneratedAttribute]
public void set_EnablePreloadAssembliesDefault(bool value);
    [CompilerGeneratedAttribute]
public bool get_InstantRunEnabled();
    [CompilerGeneratedAttribute]
public void set_InstantRunEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableMarshalMethods();
    [CompilerGeneratedAttribute]
public void set_EnableMarshalMethods(bool value);
    [CompilerGeneratedAttribute]
public string get_RuntimeConfigBinFilePath();
    [CompilerGeneratedAttribute]
public void set_RuntimeConfigBinFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_BoundExceptionType();
    [CompilerGeneratedAttribute]
public void set_BoundExceptionType(string value);
    [CompilerGeneratedAttribute]
public string get_PackageNamingPolicy();
    [CompilerGeneratedAttribute]
public void set_PackageNamingPolicy(string value);
    [CompilerGeneratedAttribute]
public string get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Environments();
    [CompilerGeneratedAttribute]
public void set_Environments(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_AndroidAotMode();
    [CompilerGeneratedAttribute]
public void set_AndroidAotMode(string value);
    [CompilerGeneratedAttribute]
public bool get_AndroidAotEnableLazyLoad();
    [CompilerGeneratedAttribute]
public void set_AndroidAotEnableLazyLoad(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableLLVM();
    [CompilerGeneratedAttribute]
public void set_EnableLLVM(bool value);
    [CompilerGeneratedAttribute]
public string get_HttpClientHandlerType();
    [CompilerGeneratedAttribute]
public void set_HttpClientHandlerType(string value);
    [CompilerGeneratedAttribute]
public string get_TlsProvider();
    [CompilerGeneratedAttribute]
public void set_TlsProvider(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidSequencePointsMode();
    [CompilerGeneratedAttribute]
public void set_AndroidSequencePointsMode(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableSGenConcurrent();
    [CompilerGeneratedAttribute]
public void set_EnableSGenConcurrent(bool value);
    [CompilerGeneratedAttribute]
public bool get_UsingAndroidNETSdk();
    [CompilerGeneratedAttribute]
public void set_UsingAndroidNETSdk(bool value);
    [CompilerGeneratedAttribute]
public string get_BuildId();
    [CompilerGeneratedAttribute]
public void set_BuildId(string value);
    private bool get__Debug();
    public virtual bool RunTask();
    internal static AndroidTargetArch GetAndroidTargetArchForAbi(string abi);
    private void AddEnvironment();
    private void GetRequiredTokens(string assemblyFilePath, Int32& android_runtime_jnienv_class_token, Int32& jnienv_initialize_method_token, Int32& jnienv_registerjninatives_method_token);
    private void GetRequiredTokens(MetadataReader reader, Int32& android_runtime_jnienv_class_token, Int32& jnienv_initialize_method_token, Int32& jnienv_registerjninatives_method_token);
    [CompilerGeneratedAttribute]
internal static string <AddEnvironment>g__ValidAssemblerString|131_4(string s);
    [CompilerGeneratedAttribute]
internal static bool <GetRequiredTokens>g__TypeMatches|133_0(TypeDefinition td, <>c__DisplayClass133_0& );
}
public class Xamarin.Android.Tasks.GenerateResourceCaseMap : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Resources>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectDir>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AdditionalResourceDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <OutputFile>k__BackingField;
    private Dictionary`2<string, string> resource_fixup;
    public string TaskPrefix { get; }
    public ITaskItem[] Resources { get; public set; }
    [RequiredAttribute]
public string ResourceDirectory { get; public set; }
    [RequiredAttribute]
public string ProjectDir { get; public set; }
    public ITaskItem[] AdditionalResourceDirectories { get; public set; }
    [RequiredAttribute]
public ITaskItem OutputFile { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Resources();
    [CompilerGeneratedAttribute]
public void set_Resources(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_ResourceDirectory();
    [CompilerGeneratedAttribute]
public void set_ResourceDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectDir();
    [CompilerGeneratedAttribute]
public void set_ProjectDir(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AdditionalResourceDirectories();
    [CompilerGeneratedAttribute]
public void set_AdditionalResourceDirectories(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(ITaskItem value);
    public virtual bool RunTask();
    private void AddRename(string android, string user);
    private static string NormalizeAlternative(string value);
}
public class Xamarin.Android.Tasks.GenerateResourceDesigner : AndroidTask {
    [CompilerGeneratedAttribute]
private string <NetResgenOutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DesignTimeOutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaResgenInputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RTxtFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectDir>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Resources>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AdditionalResourceDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsApplication>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <References>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseManagedResourceGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTimeBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaPlatformJarPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceFlagFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CaseMapFile>k__BackingField;
    private Dictionary`2<string, string> resource_fixup;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string NetResgenOutputFile { get; public set; }
    public string DesignTimeOutputFile { get; public set; }
    public string JavaResgenInputFile { get; public set; }
    public string RTxtFile { get; public set; }
    public string Namespace { get; public set; }
    [RequiredAttribute]
public string ProjectDir { get; public set; }
    [RequiredAttribute]
public ITaskItem[] Resources { get; public set; }
    [RequiredAttribute]
public string ResourceDirectory { get; public set; }
    public ITaskItem[] AdditionalResourceDirectories { get; public set; }
    [RequiredAttribute]
public bool IsApplication { get; public set; }
    public ITaskItem[] References { get; public set; }
    [RequiredAttribute]
public bool UseManagedResourceGenerator { get; public set; }
    [RequiredAttribute]
public bool DesignTimeBuild { get; public set; }
    [RequiredAttribute]
public string JavaPlatformJarPath { get; public set; }
    public string ResourceFlagFile { get; public set; }
    public string CaseMapFile { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_NetResgenOutputFile();
    [CompilerGeneratedAttribute]
public void set_NetResgenOutputFile(string value);
    [CompilerGeneratedAttribute]
public string get_DesignTimeOutputFile();
    [CompilerGeneratedAttribute]
public void set_DesignTimeOutputFile(string value);
    [CompilerGeneratedAttribute]
public string get_JavaResgenInputFile();
    [CompilerGeneratedAttribute]
public void set_JavaResgenInputFile(string value);
    [CompilerGeneratedAttribute]
public string get_RTxtFile();
    [CompilerGeneratedAttribute]
public void set_RTxtFile(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectDir();
    [CompilerGeneratedAttribute]
public void set_ProjectDir(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Resources();
    [CompilerGeneratedAttribute]
public void set_Resources(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_ResourceDirectory();
    [CompilerGeneratedAttribute]
public void set_ResourceDirectory(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AdditionalResourceDirectories();
    [CompilerGeneratedAttribute]
public void set_AdditionalResourceDirectories(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_IsApplication();
    [CompilerGeneratedAttribute]
public void set_IsApplication(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_References();
    [CompilerGeneratedAttribute]
public void set_References(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_UseManagedResourceGenerator();
    [CompilerGeneratedAttribute]
public void set_UseManagedResourceGenerator(bool value);
    [CompilerGeneratedAttribute]
public bool get_DesignTimeBuild();
    [CompilerGeneratedAttribute]
public void set_DesignTimeBuild(bool value);
    [CompilerGeneratedAttribute]
public string get_JavaPlatformJarPath();
    [CompilerGeneratedAttribute]
public void set_JavaPlatformJarPath(string value);
    [CompilerGeneratedAttribute]
public string get_ResourceFlagFile();
    [CompilerGeneratedAttribute]
public void set_ResourceFlagFile(string value);
    [CompilerGeneratedAttribute]
public string get_CaseMapFile();
    [CompilerGeneratedAttribute]
public void set_CaseMapFile(string value);
    public virtual bool RunTask();
    private void AdjustConstructor(CodeTypeDeclaration type);
    private void WriteFile(string file, CodeTypeDeclaration resources, string language, bool isCSharp, IEnumerable`1<string> aliases);
    private void AddRename(string android, string user);
    private static string NormalizeAlternative(string value);
}
public class Xamarin.Android.Tasks.GenerateResourceDesignerAssembly : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem <RTxtFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <ResourceMap>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsApplication>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTimeBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectDir>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Resources>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CaseMapFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AdditionalResourceDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FrameworkDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Deterministic>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    private TypeReference intArray;
    private TypeReference intRef;
    private TypeReference objectRef;
    private Dictionary`2<string, string> resource_fixup;
    private Dictionary`2<string, TypeDefinition> resourceClasses;
    private Dictionary`2<string, MethodDefinition> staticConstructors;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem RTxtFile { get; public set; }
    public ITaskItem ResourceMap { get; public set; }
    [RequiredAttribute]
public bool IsApplication { get; public set; }
    [RequiredAttribute]
public bool DesignTimeBuild { get; public set; }
    [RequiredAttribute]
public ITaskItem OutputFile { get; public set; }
    [RequiredAttribute]
public string TargetFrameworkVersion { get; public set; }
    [RequiredAttribute]
public string TargetFrameworkIdentifier { get; public set; }
    [RequiredAttribute]
public string ProjectDir { get; public set; }
    [RequiredAttribute]
public ITaskItem[] Resources { get; public set; }
    [RequiredAttribute]
public string ResourceDirectory { get; public set; }
    public string CaseMapFile { get; public set; }
    public ITaskItem[] AdditionalResourceDirectories { get; public set; }
    public ITaskItem[] FrameworkDirectories { get; public set; }
    public bool Deterministic { get; public set; }
    public string AssemblyName { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem get_RTxtFile();
    [CompilerGeneratedAttribute]
public void set_RTxtFile(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_ResourceMap();
    [CompilerGeneratedAttribute]
public void set_ResourceMap(ITaskItem value);
    [CompilerGeneratedAttribute]
public bool get_IsApplication();
    [CompilerGeneratedAttribute]
public void set_IsApplication(bool value);
    [CompilerGeneratedAttribute]
public bool get_DesignTimeBuild();
    [CompilerGeneratedAttribute]
public void set_DesignTimeBuild(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(ITaskItem value);
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkVersion();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkVersion(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkIdentifier();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkIdentifier(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectDir();
    [CompilerGeneratedAttribute]
public void set_ProjectDir(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Resources();
    [CompilerGeneratedAttribute]
public void set_Resources(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_ResourceDirectory();
    [CompilerGeneratedAttribute]
public void set_ResourceDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_CaseMapFile();
    [CompilerGeneratedAttribute]
public void set_CaseMapFile(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AdditionalResourceDirectories();
    [CompilerGeneratedAttribute]
public void set_AdditionalResourceDirectories(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FrameworkDirectories();
    [CompilerGeneratedAttribute]
public void set_FrameworkDirectories(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_Deterministic();
    [CompilerGeneratedAttribute]
public void set_Deterministic(bool value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    public virtual bool RunTask();
    private bool Run(DirectoryAssemblyResolver res);
    private MethodReference ImportCustomAttributeConstructor(string type, ModuleDefinition module, ModuleDefinition sourceModule, int argCount);
    private TypeReference ImportType(string type, ModuleDefinition module, ModuleDefinition sourceModule);
    private void CreateIntProperty(string resourceClass, string propertyName, int value, TypeDefinition resourceDesigner, ModuleDefinition module, MethodAttributes attributes, TypeAttributes typeAttributes);
    private void CreateIntField(string resourceClass, string fieldName, int value, TypeDefinition resourceDesigner, ModuleDefinition module, FieldAttributes attributes, TypeAttributes typeAttributes);
    private void CreateIntArrayProperty(string resourceClass, string propertyName, Int32[] values, TypeDefinition resourceDesigner, ModuleDefinition module, MethodAttributes attributes, TypeAttributes typeAttributes);
    private void CreateIntArrayField(string resourceClass, string fieldName, Int32[] values, TypeDefinition resourceDesigner, ModuleDefinition module, FieldAttributes attributes, TypeAttributes typeAttributes);
    private void CreateCtor(TypeDefinition type, ModuleDefinition module);
    private MethodDefinition GetOrCreateStaticCtor(TypeDefinition type, ModuleDefinition module);
    private TypeDefinition CreateResourceClass(TypeDefinition resourceDesigner, string className, ModuleDefinition module, TypeAttributes attributes);
    private PropertyDefinition CreateProperty(string propertyName, int value, ModuleDefinition module, MethodAttributes attributes);
    private FieldDefinition CreateField(string fieldName, int value, ModuleDefinition module, FieldAttributes attributes);
    private FieldDefinition CreateArrayField(string fieldName, Int32[] values, ModuleDefinition module, FieldAttributes attributes);
    private PropertyDefinition CreateArrayProperty(string propertyName, Int32[] values, ModuleDefinition module, MethodAttributes attributes);
    private void StrongNameAssembly(AssemblyNameDefinition name);
}
public class Xamarin.Android.Tasks.GenerateResourceDesignerIntermediateClass : AndroidTask {
    private static string ResourceDesigner;
    private static string ResourceDesignerConstants;
    private static string CSharpTemplate;
    private static string FSharpTemplate;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsApplication>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <OutputFile>k__BackingField;
    public string TaskPrefix { get; }
    public string Namespace { get; public set; }
    public bool IsApplication { get; public set; }
    public ITaskItem OutputFile { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public bool get_IsApplication();
    [CompilerGeneratedAttribute]
public void set_IsApplication(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(ITaskItem value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.GenerateRtxt : AndroidTask {
    [CompilerGeneratedAttribute]
private string <RTxtFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AdditionalResourceDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaPlatformJarPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceFlagFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CaseMapFile>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string RTxtFile { get; public set; }
    [RequiredAttribute]
public string ResourceDirectory { get; public set; }
    public String[] AdditionalResourceDirectories { get; public set; }
    [RequiredAttribute]
public string JavaPlatformJarPath { get; public set; }
    public string ResourceFlagFile { get; public set; }
    public string CaseMapFile { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_RTxtFile();
    [CompilerGeneratedAttribute]
public void set_RTxtFile(string value);
    [CompilerGeneratedAttribute]
public string get_ResourceDirectory();
    [CompilerGeneratedAttribute]
public void set_ResourceDirectory(string value);
    [CompilerGeneratedAttribute]
public String[] get_AdditionalResourceDirectories();
    [CompilerGeneratedAttribute]
public void set_AdditionalResourceDirectories(String[] value);
    [CompilerGeneratedAttribute]
public string get_JavaPlatformJarPath();
    [CompilerGeneratedAttribute]
public void set_JavaPlatformJarPath(string value);
    [CompilerGeneratedAttribute]
public string get_ResourceFlagFile();
    [CompilerGeneratedAttribute]
public void set_ResourceFlagFile(string value);
    [CompilerGeneratedAttribute]
public string get_CaseMapFile();
    [CompilerGeneratedAttribute]
public void set_CaseMapFile(string value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.GetAndroidActivityName : AndroidTask {
    [CompilerGeneratedAttribute]
private string <ManifestFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityName>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string ManifestFile { get; public set; }
    [OutputAttribute]
public string ActivityName { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_ManifestFile();
    [CompilerGeneratedAttribute]
public void set_ManifestFile(string value);
    [CompilerGeneratedAttribute]
public string get_ActivityName();
    [CompilerGeneratedAttribute]
public void set_ActivityName(string value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.GetAndroidDefineConstants : AndroidTask {
    [CompilerGeneratedAttribute]
private int <AndroidApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AndroidDefineConstants>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public int AndroidApiLevel { get; public set; }
    public string ProductVersion { get; public set; }
    [OutputAttribute]
public ITaskItem[] AndroidDefineConstants { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public int get_AndroidApiLevel();
    [CompilerGeneratedAttribute]
public void set_AndroidApiLevel(int value);
    [CompilerGeneratedAttribute]
public string get_ProductVersion();
    [CompilerGeneratedAttribute]
public void set_ProductVersion(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AndroidDefineConstants();
    [CompilerGeneratedAttribute]
public void set_AndroidDefineConstants(ITaskItem[] value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.GetAndroidPackageName : AndroidTask {
    [CompilerGeneratedAttribute]
private string <ManifestFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ManifestPlaceholders>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    public string TaskPrefix { get; }
    public string ManifestFile { get; public set; }
    [RequiredAttribute]
public string AssemblyName { get; public set; }
    public String[] ManifestPlaceholders { get; public set; }
    [OutputAttribute]
public string PackageName { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_ManifestFile();
    [CompilerGeneratedAttribute]
public void set_ManifestFile(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public String[] get_ManifestPlaceholders();
    [CompilerGeneratedAttribute]
public void set_ManifestPlaceholders(String[] value);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    public virtual bool RunTask();
}
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("1")]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
public abstract class Xamarin.Android.Tasks.GetAotArguments : AndroidAsyncTask {
    [CompilerGeneratedAttribute]
private string <AndroidApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidAotMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AotOutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidBinUtilsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManifestFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinimumSupportedApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuntimeIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidNdkDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableLLVM>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StripLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidSequencePointsMode>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Profiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private string <Triple>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private string <ToolPrefix>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <MsymPath>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <LdName>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private string <LdFlags>k__BackingField;
    protected AotMode AotMode;
    protected SequencePointsMode SequencePointsMode;
    protected string SdkBinDirectory;
    [RequiredAttribute]
public string AndroidApiLevel { get; public set; }
    [RequiredAttribute]
public string AndroidAotMode { get; public set; }
    [RequiredAttribute]
public string AotOutputDirectory { get; public set; }
    [RequiredAttribute]
public string AndroidBinUtilsDirectory { get; public set; }
    [RequiredAttribute]
public string TargetName { get; public set; }
    public string ManifestFile { get; public set; }
    public string MinimumSupportedApiLevel { get; public set; }
    public string RuntimeIdentifier { get; public set; }
    public string AndroidNdkDirectory { get; public set; }
    public bool EnableLLVM { get; public set; }
    public bool StripLibraries { get; public set; }
    public string AndroidSequencePointsMode { get; public set; }
    public ITaskItem[] Profiles { get; public set; }
    [OutputAttribute]
[RequiredAttribute]
public ITaskItem[] ResolvedAssemblies { get; public set; }
    [OutputAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public string Triple { get; public set; }
    [OutputAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public string ToolPrefix { get; public set; }
    [OutputAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public string MsymPath { get; public set; }
    [OutputAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public string LdName { get; public set; }
    [OutputAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public string LdFlags { get; public set; }
    protected bool UseAndroidNdk { get; }
    [CompilerGeneratedAttribute]
public string get_AndroidApiLevel();
    [CompilerGeneratedAttribute]
public void set_AndroidApiLevel(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidAotMode();
    [CompilerGeneratedAttribute]
public void set_AndroidAotMode(string value);
    [CompilerGeneratedAttribute]
public string get_AotOutputDirectory();
    [CompilerGeneratedAttribute]
public void set_AotOutputDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidBinUtilsDirectory();
    [CompilerGeneratedAttribute]
public void set_AndroidBinUtilsDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_TargetName();
    [CompilerGeneratedAttribute]
public void set_TargetName(string value);
    [CompilerGeneratedAttribute]
public string get_ManifestFile();
    [CompilerGeneratedAttribute]
public void set_ManifestFile(string value);
    [CompilerGeneratedAttribute]
public string get_MinimumSupportedApiLevel();
    [CompilerGeneratedAttribute]
public void set_MinimumSupportedApiLevel(string value);
    [CompilerGeneratedAttribute]
public string get_RuntimeIdentifier();
    [CompilerGeneratedAttribute]
public void set_RuntimeIdentifier(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidNdkDirectory();
    [CompilerGeneratedAttribute]
public void set_AndroidNdkDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableLLVM();
    [CompilerGeneratedAttribute]
public void set_EnableLLVM(bool value);
    [CompilerGeneratedAttribute]
public bool get_StripLibraries();
    [CompilerGeneratedAttribute]
public void set_StripLibraries(bool value);
    [CompilerGeneratedAttribute]
public string get_AndroidSequencePointsMode();
    [CompilerGeneratedAttribute]
public void set_AndroidSequencePointsMode(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Profiles();
    [CompilerGeneratedAttribute]
public void set_Profiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedAssemblies();
    [CompilerGeneratedAttribute]
public void set_ResolvedAssemblies(ITaskItem[] value);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Triple();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Triple(string value);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ToolPrefix();
    [CompilerGeneratedAttribute]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public void set_ToolPrefix(string value);
    [CompilerGeneratedAttribute]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public string get_MsymPath();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_MsymPath(string value);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_LdName();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_LdName(string value);
    [CompilerGeneratedAttribute]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public string get_LdFlags();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_LdFlags(string value);
    protected bool get_UseAndroidNdk();
    public static bool GetAndroidAotMode(string androidAotMode, AotMode& aotMode);
    public static bool TryGetSequencePointsMode(string value, SequencePointsMode& mode);
    protected string GetToolPrefix(NdkTools ndk, AndroidTargetArch arch, Int32& level);
    private int GetNdkApiLevel(NdkTools ndk, AndroidTargetArch arch);
    protected ValueTuple`4<string, string, string, AndroidTargetArch> GetAbiSettings(string abi);
    protected void GetAotOptions(NdkTools ndk, AndroidTargetArch arch, int level, string outdir, string toolPrefix);
    private string GetLdFlags(NdkTools ndk, AndroidTargetArch arch, int level, string toolPrefix);
    private static string GetNdkToolchainLibraryDir(NdkTools ndk, string binDir, string archDir);
    private static string GetNdkToolchainLibraryDir(NdkTools ndk, string binDir, AndroidTargetArch arch);
}
public class Xamarin.Android.Tasks.GetAotAssemblies : GetAotArguments {
    public string TaskPrefix { get; }
    public virtual string get_TaskPrefix();
    public virtual Task RunTaskAsync();
}
public class Xamarin.Android.Tasks.GetAppSettingsDirectory : AndroidTask {
    [CompilerGeneratedAttribute]
private string <AppSettingsDirectory>k__BackingField;
    public string TaskPrefix { get; }
    [OutputAttribute]
public string AppSettingsDirectory { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_AppSettingsDirectory();
    [CompilerGeneratedAttribute]
public void set_AppSettingsDirectory(string value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.GetConvertedJavaLibraries : AndroidTask {
    [CompilerGeneratedAttribute]
private string <Extension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputJackDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <JarsToConvert>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ConvertedFilesToBeGenerated>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string Extension { get; public set; }
    public string OutputJackDirectory { get; public set; }
    public String[] JarsToConvert { get; public set; }
    [OutputAttribute]
public String[] ConvertedFilesToBeGenerated { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_Extension();
    [CompilerGeneratedAttribute]
public void set_Extension(string value);
    [CompilerGeneratedAttribute]
public string get_OutputJackDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputJackDirectory(string value);
    [CompilerGeneratedAttribute]
public String[] get_JarsToConvert();
    [CompilerGeneratedAttribute]
public void set_JarsToConvert(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ConvertedFilesToBeGenerated();
    [CompilerGeneratedAttribute]
public void set_ConvertedFilesToBeGenerated(String[] value);
    public virtual bool RunTask();
    [CompilerGeneratedAttribute]
private string <RunTask>b__18_0(string j);
}
public class Xamarin.Android.Tasks.GetExtraPackages : AndroidTask {
    [CompilerGeneratedAttribute]
private string <IntermediateOutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtraPackages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LibraryProjectImportsDirectoryName>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string IntermediateOutputPath { get; public set; }
    [OutputAttribute]
public string ExtraPackages { get; public set; }
    [RequiredAttribute]
public string LibraryProjectImportsDirectoryName { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_IntermediateOutputPath();
    [CompilerGeneratedAttribute]
public void set_IntermediateOutputPath(string value);
    [CompilerGeneratedAttribute]
public string get_ExtraPackages();
    [CompilerGeneratedAttribute]
public void set_ExtraPackages(string value);
    [CompilerGeneratedAttribute]
public string get_LibraryProjectImportsDirectoryName();
    [CompilerGeneratedAttribute]
public void set_LibraryProjectImportsDirectoryName(string value);
    public virtual bool RunTask();
    private string GetPackageNameForLibrary(string path, string assemblyName);
}
public class Xamarin.Android.Tasks.GetFilesThatExist : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <IgnoreFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FilesThatExist>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] Files { get; public set; }
    public ITaskItem[] IgnoreFiles { get; public set; }
    [OutputAttribute]
public ITaskItem[] FilesThatExist { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_IgnoreFiles();
    [CompilerGeneratedAttribute]
public void set_IgnoreFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FilesThatExist();
    [CompilerGeneratedAttribute]
public void set_FilesThatExist(ITaskItem[] value);
    public virtual bool RunTask();
    [CompilerGeneratedAttribute]
private bool <RunTask>b__14_0(ITaskItem p);
}
public class Xamarin.Android.Tasks.GetImportedLibraries : AndroidTask {
    private static String[] IgnoredManifestDirectories;
    [CompilerGeneratedAttribute]
private string <TargetDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CacheFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Jars>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <NativeLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ManifestDocuments>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string TargetDirectory { get; public set; }
    public string CacheFile { get; public set; }
    [OutputAttribute]
public ITaskItem[] Jars { get; public set; }
    [OutputAttribute]
public ITaskItem[] NativeLibraries { get; public set; }
    [OutputAttribute]
public ITaskItem[] ManifestDocuments { get; public set; }
    private static GetImportedLibraries();
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_TargetDirectory();
    [CompilerGeneratedAttribute]
public void set_TargetDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_CacheFile();
    [CompilerGeneratedAttribute]
public void set_CacheFile(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Jars();
    [CompilerGeneratedAttribute]
public void set_Jars(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_NativeLibraries();
    [CompilerGeneratedAttribute]
public void set_NativeLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ManifestDocuments();
    [CompilerGeneratedAttribute]
public void set_ManifestDocuments(ITaskItem[] value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.GetJavaPlatformJar : AndroidTask {
    private XNamespace androidNs;
    [CompilerGeneratedAttribute]
private string <AndroidSdkPlatform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTimeBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BuildingInsideVisualStudio>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SupportedOSPlatformVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidSdkDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaPlatformJarPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetSdkVersion>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string AndroidSdkPlatform { get; public set; }
    public string AndroidManifest { get; public set; }
    public bool DesignTimeBuild { get; public set; }
    public bool BuildingInsideVisualStudio { get; public set; }
    public string SupportedOSPlatformVersion { get; public set; }
    public string TargetFramework { get; public set; }
    public string AndroidSdkDirectory { get; public set; }
    [OutputAttribute]
public string JavaPlatformJarPath { get; public set; }
    [OutputAttribute]
public string TargetSdkVersion { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_AndroidSdkPlatform();
    [CompilerGeneratedAttribute]
public void set_AndroidSdkPlatform(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidManifest();
    [CompilerGeneratedAttribute]
public void set_AndroidManifest(string value);
    [CompilerGeneratedAttribute]
public bool get_DesignTimeBuild();
    [CompilerGeneratedAttribute]
public void set_DesignTimeBuild(bool value);
    [CompilerGeneratedAttribute]
public bool get_BuildingInsideVisualStudio();
    [CompilerGeneratedAttribute]
public void set_BuildingInsideVisualStudio(bool value);
    [CompilerGeneratedAttribute]
public string get_SupportedOSPlatformVersion();
    [CompilerGeneratedAttribute]
public void set_SupportedOSPlatformVersion(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidSdkDirectory();
    [CompilerGeneratedAttribute]
public void set_AndroidSdkDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_JavaPlatformJarPath();
    [CompilerGeneratedAttribute]
public void set_JavaPlatformJarPath(string value);
    [CompilerGeneratedAttribute]
public string get_TargetSdkVersion();
    [CompilerGeneratedAttribute]
public void set_TargetSdkVersion(string value);
    public virtual bool RunTask();
    private string GetTargetSdkVersion(string target, XAttribute target_sdk);
}
public class Xamarin.Android.Tasks.GetMonoPlatformJar : AndroidTask {
    [CompilerGeneratedAttribute]
private string <TargetFrameworkDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MonoPlatformJarPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MonoPlatformDexPath>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string TargetFrameworkDirectory { get; public set; }
    [OutputAttribute]
public string MonoPlatformJarPath { get; public set; }
    [OutputAttribute]
public string MonoPlatformDexPath { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkDirectory();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_MonoPlatformJarPath();
    [CompilerGeneratedAttribute]
public void set_MonoPlatformJarPath(string value);
    [CompilerGeneratedAttribute]
public string get_MonoPlatformDexPath();
    [CompilerGeneratedAttribute]
public void set_MonoPlatformDexPath(string value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.ImportJavaDoc : AndroidDotnetToolTask {
    [CompilerGeneratedAttribute]
private String[] <JavaDocs>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <References>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Transforms>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDocDirectory>k__BackingField;
    public string TaskPrefix { get; }
    public String[] JavaDocs { get; public set; }
    public String[] References { get; public set; }
    public String[] Transforms { get; public set; }
    [RequiredAttribute]
public string TargetAssembly { get; public set; }
    [RequiredAttribute]
public string OutputDocDirectory { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public String[] get_JavaDocs();
    [CompilerGeneratedAttribute]
public void set_JavaDocs(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_References();
    [CompilerGeneratedAttribute]
public void set_References(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Transforms();
    [CompilerGeneratedAttribute]
public void set_Transforms(String[] value);
    [CompilerGeneratedAttribute]
public string get_TargetAssembly();
    [CompilerGeneratedAttribute]
public void set_TargetAssembly(string value);
    [CompilerGeneratedAttribute]
public string get_OutputDocDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDocDirectory(string value);
    protected virtual string GenerateCommandLineCommands();
}
public class Xamarin.Android.Tasks.InstallApkSet : BundleToolAdbTask {
    [CompilerGeneratedAttribute]
private string <ApkSet>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Modules>k__BackingField;
    private static string InstallErrorRegExString;
    private static Regex installErrorRegEx;
    public string TaskPrefix { get; }
    public string DefaultErrorCode { get; }
    [RequiredAttribute]
public string ApkSet { get; public set; }
    public String[] Modules { get; public set; }
    private static InstallApkSet();
    public virtual string get_TaskPrefix();
    public virtual string get_DefaultErrorCode();
    [CompilerGeneratedAttribute]
public string get_ApkSet();
    [CompilerGeneratedAttribute]
public void set_ApkSet(string value);
    [CompilerGeneratedAttribute]
public String[] get_Modules();
    [CompilerGeneratedAttribute]
public void set_Modules(String[] value);
    internal virtual CommandLineBuilder GetCommandLineBuilder();
    [IteratorStateMachineAttribute("Xamarin.Android.Tasks.InstallApkSet/<GetCustomExpressions>d__15")]
protected virtual IEnumerable`1<Regex> GetCustomExpressions();
    internal virtual bool ProcessOutput(string singleLine, AssemblyIdentityMap assemblyMap);
}
internal class Xamarin.Android.Tasks.InvalidActivityNameException : Exception {
    public InvalidActivityNameException(string message);
}
[ExtensionAttribute]
public static class Xamarin.Android.Tasks.ITaskItemExtensions : object {
    [IteratorStateMachineAttribute("Xamarin.Android.Tasks.ITaskItemExtensions/<ToXElements>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<XElement> ToXElements(ICollection`1<ITaskItem> items, string itemName, String[] knownMetadata);
}
public class Xamarin.Android.Tasks.JarToXml : AndroidToolTask {
    [CompilerGeneratedAttribute]
private string <AndroidSdkDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MonoAndroidToolsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaSdkDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <SourceJars>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ReferenceJars>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DroidDocPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaDocPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Java7DocPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Java8DocPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <JavaDocs>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <LibraryProjectJars>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaMaximumHeapSize>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string AndroidSdkDirectory { get; public set; }
    [RequiredAttribute]
public string MonoAndroidToolsDirectory { get; public set; }
    [RequiredAttribute]
public string JavaSdkDirectory { get; public set; }
    [RequiredAttribute]
public string AndroidApiLevel { get; public set; }
    [RequiredAttribute]
public string OutputFile { get; public set; }
    [RequiredAttribute]
public ITaskItem[] SourceJars { get; public set; }
    public ITaskItem[] ReferenceJars { get; public set; }
    public string DroidDocPaths { get; public set; }
    public string JavaDocPaths { get; public set; }
    public string Java7DocPaths { get; public set; }
    public string Java8DocPaths { get; public set; }
    public ITaskItem[] JavaDocs { get; public set; }
    public ITaskItem[] LibraryProjectJars { get; public set; }
    public string JavaOptions { get; public set; }
    public string JavaMaximumHeapSize { get; public set; }
    protected string ToolName { get; }
    public string ToolExe { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_AndroidSdkDirectory();
    [CompilerGeneratedAttribute]
public void set_AndroidSdkDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_MonoAndroidToolsDirectory();
    [CompilerGeneratedAttribute]
public void set_MonoAndroidToolsDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_JavaSdkDirectory();
    [CompilerGeneratedAttribute]
public void set_JavaSdkDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidApiLevel();
    [CompilerGeneratedAttribute]
public void set_AndroidApiLevel(string value);
    [CompilerGeneratedAttribute]
public string get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_SourceJars();
    [CompilerGeneratedAttribute]
public void set_SourceJars(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ReferenceJars();
    [CompilerGeneratedAttribute]
public void set_ReferenceJars(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_DroidDocPaths();
    [CompilerGeneratedAttribute]
public void set_DroidDocPaths(string value);
    [CompilerGeneratedAttribute]
public string get_JavaDocPaths();
    [CompilerGeneratedAttribute]
public void set_JavaDocPaths(string value);
    [CompilerGeneratedAttribute]
public string get_Java7DocPaths();
    [CompilerGeneratedAttribute]
public void set_Java7DocPaths(string value);
    [CompilerGeneratedAttribute]
public string get_Java8DocPaths();
    [CompilerGeneratedAttribute]
public void set_Java8DocPaths(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_JavaDocs();
    [CompilerGeneratedAttribute]
public void set_JavaDocs(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_LibraryProjectJars();
    [CompilerGeneratedAttribute]
public void set_LibraryProjectJars(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_JavaOptions();
    [CompilerGeneratedAttribute]
public void set_JavaOptions(string value);
    [CompilerGeneratedAttribute]
public string get_JavaMaximumHeapSize();
    [CompilerGeneratedAttribute]
public void set_JavaMaximumHeapSize(string value);
    public virtual bool RunTask();
    protected virtual string GenerateCommandLineCommands();
    private string GetJavadocOption(string file);
    protected virtual string get_ToolName();
    public virtual string get_ToolExe();
    public virtual void set_ToolExe(string value);
    protected virtual string GenerateFullPathToTool();
    private string GetMsBuildDirectory();
}
public class Xamarin.Android.Tasks.Javac : JavaCompileToolTask {
    [CompilerGeneratedAttribute]
private string <ClassesOutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClassesZip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaPlatformJarPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavacTargetVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavacSourceVersion>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string ClassesOutputDirectory { get; public set; }
    public string ClassesZip { get; public set; }
    public string JavaPlatformJarPath { get; public set; }
    public string JavacTargetVersion { get; public set; }
    public string JavacSourceVersion { get; public set; }
    public string DefaultErrorCode { get; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_ClassesOutputDirectory();
    [CompilerGeneratedAttribute]
public void set_ClassesOutputDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_ClassesZip();
    [CompilerGeneratedAttribute]
public void set_ClassesZip(string value);
    [CompilerGeneratedAttribute]
public string get_JavaPlatformJarPath();
    [CompilerGeneratedAttribute]
public void set_JavaPlatformJarPath(string value);
    [CompilerGeneratedAttribute]
public string get_JavacTargetVersion();
    [CompilerGeneratedAttribute]
public void set_JavacTargetVersion(string value);
    [CompilerGeneratedAttribute]
public string get_JavacSourceVersion();
    [CompilerGeneratedAttribute]
public void set_JavacSourceVersion(string value);
    public virtual string get_DefaultErrorCode();
    public virtual bool RunTask();
    protected virtual string GenerateCommandLineCommands();
    protected virtual void WriteOptionsToResponseFile(StreamWriter sw);
}
public abstract class Xamarin.Android.Tasks.JavaCompileToolTask : JavaToolTask {
    [CompilerGeneratedAttribute]
private string <StubSourceDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <JavaSourceFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Jars>k__BackingField;
    internal string TemporarySourceListFile;
    public string StubSourceDirectory { get; public set; }
    public ITaskItem[] JavaSourceFiles { get; public set; }
    public ITaskItem[] Jars { get; public set; }
    protected string ToolName { get; }
    private bool IsRunningInsideVS { get; }
    [CompilerGeneratedAttribute]
public string get_StubSourceDirectory();
    [CompilerGeneratedAttribute]
public void set_StubSourceDirectory(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_JavaSourceFiles();
    [CompilerGeneratedAttribute]
public void set_JavaSourceFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Jars();
    [CompilerGeneratedAttribute]
public void set_Jars(ITaskItem[] value);
    protected virtual string get_ToolName();
    private bool get_IsRunningInsideVS();
    public virtual bool RunTask();
    protected virtual void WriteOptionsToResponseFile(StreamWriter sw);
    private void GenerateResponseFile();
}
public class Xamarin.Android.Tasks.JavaDoc : JavaToolTask {
    [CompilerGeneratedAttribute]
private String[] <SourceDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DestinationDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ReferenceJars>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaPlatformJar>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExtraArgs>k__BackingField;
    private string context_src;
    private string context_dst;
    public string TaskPrefix { get; }
    public String[] SourceDirectories { get; public set; }
    public String[] DestinationDirectories { get; public set; }
    public String[] ReferenceJars { get; public set; }
    public string JavaPlatformJar { get; public set; }
    public String[] ExtraArgs { get; public set; }
    protected string ToolName { get; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public String[] get_SourceDirectories();
    [CompilerGeneratedAttribute]
public void set_SourceDirectories(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_DestinationDirectories();
    [CompilerGeneratedAttribute]
public void set_DestinationDirectories(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ReferenceJars();
    [CompilerGeneratedAttribute]
public void set_ReferenceJars(String[] value);
    [CompilerGeneratedAttribute]
public string get_JavaPlatformJar();
    [CompilerGeneratedAttribute]
public void set_JavaPlatformJar(string value);
    [CompilerGeneratedAttribute]
public String[] get_ExtraArgs();
    [CompilerGeneratedAttribute]
public void set_ExtraArgs(String[] value);
    protected virtual string get_ToolName();
    public virtual bool RunTask();
    protected virtual string GenerateCommandLineCommands();
    protected virtual void LogEventsFromTextOutput(string singleLine, MessageImportance messageImportance);
}
internal class Xamarin.Android.Tasks.JavaResourceParser : ResourceParser {
    private List`1<KeyValuePair`2<Regex, Func`5<Match, bool, CodeTypeDeclaration, Dictionary`2<string, string>, CodeTypeDeclaration>>> Parser;
    public CodeTypeDeclaration Parse(string file, bool isApp, Dictionary`2<string, string> resourceMap);
    private static KeyValuePair`2<Regex, Func`5<Match, bool, CodeTypeDeclaration, Dictionary`2<string, string>, CodeTypeDeclaration>> Parse(string regex, Func`5<Match, bool, CodeTypeDeclaration, Dictionary`2<string, string>, CodeTypeDeclaration> f);
    [CompilerGeneratedAttribute]
private CodeTypeDeclaration <.ctor>b__3_2(Match m, bool app, CodeTypeDeclaration g, Dictionary`2<string, string> map);
    [CompilerGeneratedAttribute]
private CodeTypeDeclaration <.ctor>b__3_3(Match m, bool app, CodeTypeDeclaration g, Dictionary`2<string, string> map);
    [CompilerGeneratedAttribute]
private CodeTypeDeclaration <.ctor>b__3_4(Match m, bool app, CodeTypeDeclaration g, Dictionary`2<string, string> map);
}
public class Xamarin.Android.Tasks.JavaSourceUtils : AndroidToolTask {
    [CompilerGeneratedAttribute]
private string <JavaSourceUtilsJar>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaSdkDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <InputFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <References>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <BootClassPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <JavadocCopyrightFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavadocUrlPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavadocUrlStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavadocDocRootUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaMaximumHeapSize>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <OutputJavadocXml>k__BackingField;
    private string responseFilePath;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string JavaSourceUtilsJar { get; public set; }
    [RequiredAttribute]
public string JavaSdkDirectory { get; public set; }
    [RequiredAttribute]
public ITaskItem[] InputFiles { get; public set; }
    public ITaskItem[] References { get; public set; }
    public ITaskItem[] BootClassPath { get; public set; }
    public ITaskItem JavadocCopyrightFile { get; public set; }
    public string JavadocUrlPrefix { get; public set; }
    public string JavadocUrlStyle { get; public set; }
    public string JavadocDocRootUrl { get; public set; }
    public string JavaOptions { get; public set; }
    public string JavaMaximumHeapSize { get; public set; }
    public ITaskItem OutputJavadocXml { get; public set; }
    protected string ToolName { get; }
    public string ToolExe { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_JavaSourceUtilsJar();
    [CompilerGeneratedAttribute]
public void set_JavaSourceUtilsJar(string value);
    [CompilerGeneratedAttribute]
public string get_JavaSdkDirectory();
    [CompilerGeneratedAttribute]
public void set_JavaSdkDirectory(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_InputFiles();
    [CompilerGeneratedAttribute]
public void set_InputFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_References();
    [CompilerGeneratedAttribute]
public void set_References(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_BootClassPath();
    [CompilerGeneratedAttribute]
public void set_BootClassPath(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem get_JavadocCopyrightFile();
    [CompilerGeneratedAttribute]
public void set_JavadocCopyrightFile(ITaskItem value);
    [CompilerGeneratedAttribute]
public string get_JavadocUrlPrefix();
    [CompilerGeneratedAttribute]
public void set_JavadocUrlPrefix(string value);
    [CompilerGeneratedAttribute]
public string get_JavadocUrlStyle();
    [CompilerGeneratedAttribute]
public void set_JavadocUrlStyle(string value);
    [CompilerGeneratedAttribute]
public string get_JavadocDocRootUrl();
    [CompilerGeneratedAttribute]
public void set_JavadocDocRootUrl(string value);
    [CompilerGeneratedAttribute]
public string get_JavaOptions();
    [CompilerGeneratedAttribute]
public void set_JavaOptions(string value);
    [CompilerGeneratedAttribute]
public string get_JavaMaximumHeapSize();
    [CompilerGeneratedAttribute]
public void set_JavaMaximumHeapSize(string value);
    [CompilerGeneratedAttribute]
public ITaskItem get_OutputJavadocXml();
    [CompilerGeneratedAttribute]
public void set_OutputJavadocXml(ITaskItem value);
    public virtual bool RunTask();
    private static string GetOutputFileName(ITaskItem[] items);
    protected virtual string GenerateCommandLineCommands();
    private string CreateResponseFile();
    protected virtual string get_ToolName();
    public virtual string get_ToolExe();
    public virtual void set_ToolExe(string value);
    protected virtual string GenerateFullPathToTool();
    [CompilerGeneratedAttribute]
private void <CreateResponseFile>g__AppendArg|54_1(TextWriter writer, string line);
}
public abstract class Xamarin.Android.Tasks.JavaToolTask : AndroidToolTask {
    private static string CodeErrorRegExString;
    private static string ExceptionRegExString;
    private static string LPDirectoryRegExString;
    private static Regex codeErrorRegEx;
    private static Regex exceptionRegEx;
    private static Regex lpRegex;
    private bool foundError;
    private List`1<string> errorLines;
    private StringBuilder errorText;
    private HashSet`1<string> mappingText;
    private string file;
    private int line;
    private int column;
    [CompilerGeneratedAttribute]
private string <JavaOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaMaximumHeapSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyIdentityMapFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateOutputPath>k__BackingField;
    public string JavaOptions { get; public set; }
    public string JavaMaximumHeapSize { get; public set; }
    public string DefaultErrorCode { get; }
    public string WorkingDirectory { get; public set; }
    public string AssemblyIdentityMapFile { get; public set; }
    public string IntermediateOutputPath { get; public set; }
    protected string ToolName { get; }
    protected Regex CodeErrorRegEx { get; }
    protected Regex ExceptionRegEx { get; }
    private static JavaToolTask();
    [CompilerGeneratedAttribute]
public string get_JavaOptions();
    [CompilerGeneratedAttribute]
public void set_JavaOptions(string value);
    [CompilerGeneratedAttribute]
public string get_JavaMaximumHeapSize();
    [CompilerGeneratedAttribute]
public void set_JavaMaximumHeapSize(string value);
    public virtual string get_DefaultErrorCode();
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyIdentityMapFile();
    [CompilerGeneratedAttribute]
public void set_AssemblyIdentityMapFile(string value);
    [CompilerGeneratedAttribute]
public string get_IntermediateOutputPath();
    [CompilerGeneratedAttribute]
public void set_IntermediateOutputPath(string value);
    protected virtual string get_ToolName();
    protected virtual Regex get_CodeErrorRegEx();
    protected virtual Regex get_ExceptionRegEx();
    protected virtual bool HandleTaskExecutionErrors();
    protected virtual string GetWorkingDirectory();
    protected virtual string GenerateFullPathToTool();
    protected bool LogFromException(string exception, string error);
    internal virtual bool ProcessOutput(string singleLine, AssemblyIdentityMap assemblyMap);
    protected virtual void GetLineNumber(string match, Int32& line, Int32& column);
    protected virtual IEnumerable`1<Regex> GetCustomExpressions();
    protected void SetFileLineAndColumn(string file, int line, int column);
    protected void AppendTextToErrorText(string text);
    protected virtual void LogEventsFromTextOutput(string singleLine, MessageImportance messageImportance);
}
internal class Xamarin.Android.Tasks.JavaType : object {
    public TypeDefinition Type;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<AndroidTargetArch, TypeDefinition> PerAbiTypes;
    [CompilerGeneratedAttribute]
private bool <IsABiSpecific>k__BackingField;
    public bool IsABiSpecific { get; }
    public JavaType(TypeDefinition type, IDictionary`2<AndroidTargetArch, TypeDefinition> perAbiTypes);
    [CompilerGeneratedAttribute]
public bool get_IsABiSpecific();
}
internal class Xamarin.Android.Tasks.JniRemappingAssemblyGenerator : LlvmIrComposer {
    private static string TypeReplacementsVariableName;
    private static string MethodReplacementIndexVariableName;
    private List`1<JniRemappingTypeReplacement> typeReplacementsInput;
    private List`1<JniRemappingMethodReplacement> methodReplacementsInput;
    private StructureInfo jniRemappingStringStructureInfo;
    private StructureInfo jniRemappingReplacementMethodStructureInfo;
    private StructureInfo jniRemappingIndexMethodEntryStructureInfo;
    private StructureInfo jniRemappingIndexTypeEntryStructureInfo;
    private StructureInfo jniRemappingTypeReplacementEntryStructureInfo;
    [CompilerGeneratedAttribute]
private int <ReplacementMethodIndexEntryCount>k__BackingField;
    public int ReplacementMethodIndexEntryCount { get; private set; }
    public JniRemappingAssemblyGenerator(List`1<JniRemappingTypeReplacement> typeReplacements, List`1<JniRemappingMethodReplacement> methodReplacements);
    [CompilerGeneratedAttribute]
public int get_ReplacementMethodIndexEntryCount();
    [CompilerGeneratedAttribute]
private void set_ReplacementMethodIndexEntryCount(int value);
    private ValueTuple`2<List`1<StructureInstance`1<JniRemappingTypeReplacementEntry>>, List`1<StructureInstance`1<JniRemappingIndexTypeEntry>>> Init();
    protected virtual void Construct(LlvmIrModule module);
    private void MapStructures(LlvmIrModule module);
    [CompilerGeneratedAttribute]
internal static string <Init>g__MakeMethodsArrayName|23_2(string typeName);
    [CompilerGeneratedAttribute]
internal static JniRemappingString <Init>g__MakeJniRemappingString|23_3(string str);
    [CompilerGeneratedAttribute]
internal static UInt32 <Init>g__GetLength|23_4(string str);
}
internal class Xamarin.Android.Tasks.JniRemappingMethodReplacement : object {
    [CompilerGeneratedAttribute]
private string <SourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceMethodSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TargetIsStatic>k__BackingField;
    public string SourceType { get; }
    public string SourceMethod { get; }
    public string SourceMethodSignature { get; }
    public string TargetType { get; }
    public string TargetMethod { get; }
    public bool TargetIsStatic { get; }
    public JniRemappingMethodReplacement(string sourceType, string sourceMethod, string sourceMethodSignature, string targetType, string targetMethod, bool targetIsStatic);
    [CompilerGeneratedAttribute]
public string get_SourceType();
    [CompilerGeneratedAttribute]
public string get_SourceMethod();
    [CompilerGeneratedAttribute]
public string get_SourceMethodSignature();
    [CompilerGeneratedAttribute]
public string get_TargetType();
    [CompilerGeneratedAttribute]
public string get_TargetMethod();
    [CompilerGeneratedAttribute]
public bool get_TargetIsStatic();
}
internal class Xamarin.Android.Tasks.JniRemappingTypeReplacement : object {
    [CompilerGeneratedAttribute]
private string <From>k__BackingField;
    [CompilerGeneratedAttribute]
private string <To>k__BackingField;
    public string From { get; }
    public string To { get; }
    public JniRemappingTypeReplacement(string from, string to);
    [CompilerGeneratedAttribute]
public string get_From();
    [CompilerGeneratedAttribute]
public string get_To();
}
public class Xamarin.Android.Tasks.KeyTool : AndroidRunToolTask {
    private string previousLine;
    [CompilerGeneratedAttribute]
private string <KeyStore>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyPass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorePass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string KeyStore { get; public set; }
    [RequiredAttribute]
public string KeyAlias { get; public set; }
    [RequiredAttribute]
public string KeyPass { get; public set; }
    [RequiredAttribute]
public string StorePass { get; public set; }
    [RequiredAttribute]
public string Command { get; public set; }
    public bool Verbose { get; public set; }
    protected string DefaultErrorCode { get; }
    protected string ToolName { get; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_KeyStore();
    [CompilerGeneratedAttribute]
public void set_KeyStore(string value);
    [CompilerGeneratedAttribute]
public string get_KeyAlias();
    [CompilerGeneratedAttribute]
public void set_KeyAlias(string value);
    [CompilerGeneratedAttribute]
public string get_KeyPass();
    [CompilerGeneratedAttribute]
public void set_KeyPass(string value);
    [CompilerGeneratedAttribute]
public string get_StorePass();
    [CompilerGeneratedAttribute]
public void set_StorePass(string value);
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(string value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    protected virtual string get_DefaultErrorCode();
    public virtual bool RunTask();
    protected virtual void LogEventsFromTextOutput(string singleLine, MessageImportance messageImportance);
    protected virtual void LogFromStandardError(string text);
    protected virtual CommandLineBuilder CreateCommandLine();
    protected virtual string GenerateCommandLineCommands();
    protected virtual string GenerateFullPathToTool();
    protected virtual string get_ToolName();
}
internal class Xamarin.Android.Tasks.LayoutLocationInfo : object {
    public string FilePath;
    public int Line;
    public int Column;
}
internal class Xamarin.Android.Tasks.LayoutTypeFixup : object {
    public string OldType;
    public LayoutLocationInfo Location;
}
internal class Xamarin.Android.Tasks.LayoutWidget : object {
    public string Id;
    public string Type;
    public string Name;
    public string PartialClasses;
    public List`1<LayoutWidgetType> AllTypes;
    public List`1<LayoutLocationInfo> Locations;
    public List`1<LayoutTypeFixup> TypeFixups;
    public LayoutWidgetType WidgetType;
}
internal enum Xamarin.Android.Tasks.LayoutWidgetType : Enum {
    public int value__;
    public static LayoutWidgetType Unknown;
    public static LayoutWidgetType View;
    public static LayoutWidgetType Fragment;
    public static LayoutWidgetType Mixed;
}
public class Xamarin.Android.Tasks.Legacy.ResolveAndroidTooling : ResolveAndroidTooling {
    [CompilerGeneratedAttribute]
private bool <UseLatestAndroidPlatformSdk>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkVersion>k__BackingField;
    public bool UseLatestAndroidPlatformSdk { get; public set; }
    [OutputAttribute]
public string TargetFrameworkVersion { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_UseLatestAndroidPlatformSdk();
    [CompilerGeneratedAttribute]
public void set_UseLatestAndroidPlatformSdk(bool value);
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkVersion();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkVersion(string value);
    protected virtual bool Validate();
    protected virtual void LogOutputs();
    private bool ValidateApiLevels();
    private int GetMaxInstalledApiLevel();
    private string GetTargetFrameworkVersionFromApiLevel();
    [CompilerGeneratedAttribute]
private bool <Validate>b__8_0(string p);
}
public class Xamarin.Android.Tasks.Legacy.ValidateJavaVersion : ValidateJavaVersion {
    [CompilerGeneratedAttribute]
private string <AndroidSdkBuildToolsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkVersion>k__BackingField;
    public string AndroidSdkBuildToolsVersion { get; public set; }
    public string TargetFrameworkVersion { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AndroidSdkBuildToolsVersion();
    [CompilerGeneratedAttribute]
public void set_AndroidSdkBuildToolsVersion(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkVersion();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkVersion(string value);
    protected virtual bool ValidateJava(string javaExe, Regex versionRegex);
    private Version GetJavaVersionForFramework();
    private Version GetJavaVersionForBuildTools();
}
public class Xamarin.Android.Tasks.LinkApplicationSharedLibraries : AndroidAsyncTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <ObjectFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ApplicationSharedLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DebugBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidBinUtilsDirectory>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] ObjectFiles { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ApplicationSharedLibraries { get; public set; }
    [RequiredAttribute]
public bool DebugBuild { get; public set; }
    [RequiredAttribute]
public string AndroidBinUtilsDirectory { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ObjectFiles();
    [CompilerGeneratedAttribute]
public void set_ObjectFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ApplicationSharedLibraries();
    [CompilerGeneratedAttribute]
public void set_ApplicationSharedLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_DebugBuild();
    [CompilerGeneratedAttribute]
public void set_DebugBuild(bool value);
    [CompilerGeneratedAttribute]
public string get_AndroidBinUtilsDirectory();
    [CompilerGeneratedAttribute]
public void set_AndroidBinUtilsDirectory(string value);
    public virtual Task RunTaskAsync();
    private void RunLinker(Config config);
    [IteratorStateMachineAttribute("Xamarin.Android.Tasks.LinkApplicationSharedLibraries/<GetLinkerConfigs>d__22")]
private IEnumerable`1<Config> GetLinkerConfigs();
    private InputFiles GatherFilesForABI(string runtimeSharedLibrary, string abi, ITaskItem[] objectFiles, string runtimeNativeLibsDir, string runtimeNativeLibStubsDir);
    private List`1<string> GetItemsForABI(string abi, ITaskItem[] items);
    private void OnOutputData(string linkerName, object sender, DataReceivedEventArgs e);
    private void OnErrorData(string linkerName, object sender, DataReceivedEventArgs e);
    private static string QuoteFileName(string fileName);
}
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("1")]
public class Xamarin.Android.Tasks.LinkAssembliesNoShrink : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <SourceFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <DestinationFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsingAndroidNETSdk>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddKeepAlives>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDesignerAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Deterministic>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] ResolvedAssemblies { get; public set; }
    [RequiredAttribute]
public ITaskItem[] SourceFiles { get; public set; }
    [RequiredAttribute]
public ITaskItem[] DestinationFiles { get; public set; }
    [RequiredAttribute]
public string TargetName { get; public set; }
    public bool UsingAndroidNETSdk { get; public set; }
    public bool AddKeepAlives { get; public set; }
    public bool UseDesignerAssembly { get; public set; }
    public bool Deterministic { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedAssemblies();
    [CompilerGeneratedAttribute]
public void set_ResolvedAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_SourceFiles();
    [CompilerGeneratedAttribute]
public void set_SourceFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_DestinationFiles();
    [CompilerGeneratedAttribute]
public void set_DestinationFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_TargetName();
    [CompilerGeneratedAttribute]
public void set_TargetName(string value);
    [CompilerGeneratedAttribute]
public bool get_UsingAndroidNETSdk();
    [CompilerGeneratedAttribute]
public void set_UsingAndroidNETSdk(bool value);
    [CompilerGeneratedAttribute]
public bool get_AddKeepAlives();
    [CompilerGeneratedAttribute]
public void set_AddKeepAlives(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseDesignerAssembly();
    [CompilerGeneratedAttribute]
public void set_UseDesignerAssembly(bool value);
    [CompilerGeneratedAttribute]
public bool get_Deterministic();
    [CompilerGeneratedAttribute]
public void set_Deterministic(bool value);
    public virtual bool RunTask();
    private void CopyIfChanged(ITaskItem source, ITaskItem destination);
    [CompilerGeneratedAttribute]
private void <RunTask>b__34_0(string msg);
}
public enum Xamarin.Android.Tasks.LinkModes : Enum {
    public int value__;
    public static LinkModes None;
    public static LinkModes SdkOnly;
    public static LinkModes Full;
}
public class Xamarin.Android.Tasks.Lint : AndroidToolTask {
    private static string CodeErrorRegExString;
    private static string NoFileWarningOrErrorRegExString;
    private Regex codeErrorRegEx;
    private Regex noFileWarningOrErrorRegEx;
    private Dictionary`2<string, string> _resource_name_case_map;
    private bool matched;
    private string file;
    private int line;
    private int column;
    private string text;
    private string type;
    [CompilerGeneratedAttribute]
private string <TargetDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateOutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaSdkPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ConfigFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnabledIssues>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisabledIssues>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckIssues>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResourceDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <SourceDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ClassDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ClassPathJars>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <LibraryDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <LibraryJars>k__BackingField;
    private static Dictionary`2<string, Version> DisabledIssuesByVersion;
    private static Regex lintVersionRegex;
    public string TaskPrefix { get; }
    private Dictionary`2<string, string> resource_name_case_map { get; }
    [RequiredAttribute]
public string TargetDirectory { get; public set; }
    [RequiredAttribute]
public string IntermediateOutputPath { get; public set; }
    [RequiredAttribute]
public string JavaSdkPath { get; public set; }
    public ITaskItem[] ConfigFiles { get; public set; }
    public string EnabledIssues { get; public set; }
    public string DisabledIssues { get; public set; }
    public string CheckIssues { get; public set; }
    public ITaskItem[] ResourceDirectories { get; public set; }
    public ITaskItem[] SourceDirectories { get; public set; }
    public ITaskItem[] ClassDirectories { get; public set; }
    public ITaskItem[] ClassPathJars { get; public set; }
    public ITaskItem[] LibraryDirectories { get; public set; }
    public ITaskItem[] LibraryJars { get; public set; }
    protected string ToolName { get; }
    private static Lint();
    public virtual string get_TaskPrefix();
    private Dictionary`2<string, string> get_resource_name_case_map();
    [CompilerGeneratedAttribute]
public string get_TargetDirectory();
    [CompilerGeneratedAttribute]
public void set_TargetDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_IntermediateOutputPath();
    [CompilerGeneratedAttribute]
public void set_IntermediateOutputPath(string value);
    [CompilerGeneratedAttribute]
public string get_JavaSdkPath();
    [CompilerGeneratedAttribute]
public void set_JavaSdkPath(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ConfigFiles();
    [CompilerGeneratedAttribute]
public void set_ConfigFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_EnabledIssues();
    [CompilerGeneratedAttribute]
public void set_EnabledIssues(string value);
    [CompilerGeneratedAttribute]
public string get_DisabledIssues();
    [CompilerGeneratedAttribute]
public void set_DisabledIssues(string value);
    [CompilerGeneratedAttribute]
public string get_CheckIssues();
    [CompilerGeneratedAttribute]
public void set_CheckIssues(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResourceDirectories();
    [CompilerGeneratedAttribute]
public void set_ResourceDirectories(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_SourceDirectories();
    [CompilerGeneratedAttribute]
public void set_SourceDirectories(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ClassDirectories();
    [CompilerGeneratedAttribute]
public void set_ClassDirectories(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ClassPathJars();
    [CompilerGeneratedAttribute]
public void set_ClassPathJars(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_LibraryDirectories();
    [CompilerGeneratedAttribute]
public void set_LibraryDirectories(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_LibraryJars();
    [CompilerGeneratedAttribute]
public void set_LibraryJars(ITaskItem[] value);
    protected virtual string get_ToolName();
    public virtual bool RunTask();
    private string CleanIssues(string issueToRemove, Version lintToolVersion, string issues, string issuePropertyName);
    protected virtual string GenerateCommandLineCommands();
    protected virtual string GenerateFullPathToTool();
    protected virtual void LogEventsFromTextOutput(string singleLine, MessageImportance messageImportance);
    private void GenerateErrorOrWarning();
    private XDocument MergeConfigFiles();
    private Version GetLintVersion(string tool);
}
internal class Xamarin.Android.Tasks.LLVMIR.AlignstackFunctionAttribute : LlvmIrFunctionAttribute {
    private UInt32 alignment;
    public AlignstackFunctionAttribute(UInt32 powerOfTwoAlignment);
    protected virtual void RenderParams(StringBuilder sb);
    public virtual bool Equals(LlvmIrFunctionAttribute other);
    public virtual int GetHashCode();
}
internal class Xamarin.Android.Tasks.LLVMIR.AllocFamilyFunctionAttribute : LlvmIrFunctionAttribute {
    private string family;
    public AllocFamilyFunctionAttribute(string familyName);
    protected virtual void RenderAssignedValue(StringBuilder sb);
    public virtual bool Equals(LlvmIrFunctionAttribute other);
    public virtual int GetHashCode();
}
internal class Xamarin.Android.Tasks.LLVMIR.AllockindFunctionAttribute : LlvmIrFunctionAttribute {
    private string kind;
    public AllockindFunctionAttribute(string allocKind);
    protected virtual void RenderParams(StringBuilder sb);
    public virtual bool Equals(LlvmIrFunctionAttribute other);
    public virtual int GetHashCode();
}
internal class Xamarin.Android.Tasks.LLVMIR.AllocsizeFunctionAttribute : LlvmIrFunctionAttribute {
    private UInt32 elementSize;
    private Nullable`1<UInt32> numberOfElements;
    public AllocsizeFunctionAttribute(UInt32 elementSize, Nullable`1<UInt32> numberOfElements);
    protected virtual void RenderParams(StringBuilder sb);
    public virtual bool Equals(LlvmIrFunctionAttribute other);
    public virtual int GetHashCode();
}
internal class Xamarin.Android.Tasks.LLVMIR.AlwaysinlineFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.ArgmemonlyFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.BuiltinFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.ColdFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.ConvergentFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.DenormalFpMathF32FunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.DenormalFpMathFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.DisableSanitizerInstrumentationFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.DontcallErrorFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.DontcallWarnFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.FramePointerFunctionAttribute : LlvmIrFunctionAttribute {
    private string fpMode;
    public FramePointerFunctionAttribute(string fpMode);
    protected virtual void RenderAssignedValue(StringBuilder sb);
    public virtual bool Equals(LlvmIrFunctionAttribute other);
    public virtual int GetHashCode();
}
internal class Xamarin.Android.Tasks.LLVMIR.GeneratorStructureInstance : StructureInstance {
    public GeneratorStructureInstance(StructureInfo info, object instance);
}
internal class Xamarin.Android.Tasks.LLVMIR.GeneratorWriteContext : object {
    private static char IndentChar;
    private int currentIndentLevel;
    public TextWriter Output;
    public LlvmIrModule Module;
    public LlvmIrModuleTarget Target;
    public LlvmIrMetadataManager MetadataManager;
    [CompilerGeneratedAttribute]
private string <CurrentIndent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InVariableGroup>k__BackingField;
    public string CurrentIndent { get; private set; }
    public bool InVariableGroup { get; public set; }
    public GeneratorWriteContext(TextWriter writer, LlvmIrModule module, LlvmIrModuleTarget target, LlvmIrMetadataManager metadataManager);
    [CompilerGeneratedAttribute]
public string get_CurrentIndent();
    [CompilerGeneratedAttribute]
private void set_CurrentIndent(string value);
    [CompilerGeneratedAttribute]
public bool get_InVariableGroup();
    [CompilerGeneratedAttribute]
public void set_InVariableGroup(bool value);
    public void IncreaseIndent();
    public void DecreaseIndent();
    private string MakeIndentString();
}
internal class Xamarin.Android.Tasks.LLVMIR.HotFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal interface Xamarin.Android.Tasks.LLVMIR.ILlvmIrSavedFunctionParameterState {
}
internal interface Xamarin.Android.Tasks.LLVMIR.ILlvmIrSavedFunctionSignatureState {
}
internal interface Xamarin.Android.Tasks.LLVMIR.ILlvmIrSavedFunctionState {
}
internal class Xamarin.Android.Tasks.LLVMIR.InaccessiblememonlyFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.InaccessiblememOrArgmemonlyFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.IndirectTlsSegRefsFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.InlinehintFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.JumptableFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
[FlagsAttribute]
internal enum Xamarin.Android.Tasks.LLVMIR.LlvmIrAddressSignificance : Enum {
    public int value__;
    public static LlvmIrAddressSignificance Default;
    public static LlvmIrAddressSignificance Unnamed;
    public static LlvmIrAddressSignificance LocalUnnamed;
}
internal enum Xamarin.Android.Tasks.LLVMIR.LlvmIrCallMarker : Enum {
    public int value__;
    public static LlvmIrCallMarker None;
    public static LlvmIrCallMarker Tail;
    public static LlvmIrCallMarker MustTail;
    public static LlvmIrCallMarker NoTail;
}
internal abstract class Xamarin.Android.Tasks.LLVMIR.LlvmIrComposer : object {
    private bool constructed;
    protected abstract virtual void Construct(LlvmIrModule module);
    public LlvmIrModule Construct();
    public void Generate(LlvmIrModule module, AndroidTargetArch arch, StreamWriter output, string fileName);
    public static ulong GetXxHash(string str, bool is64Bit);
    protected LlvmIrGlobalVariable EnsureGlobalVariable(LlvmIrVariable variable);
}
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrDataLayout : object {
    private bool bigEndian;
    private bool littleEndian;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <AllocaAddressSpaceId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <GlobalsAddressSpaceId>k__BackingField;
    [CompilerGeneratedAttribute]
private LlvmIrDataLayoutMangling <Mangling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <ProgramAddressSpaceId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <StackAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private LlvmIrDataLayoutAggregateObjectAlignment <AggregateObjectAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<LlvmIrDataLayoutFloatAlignment> <FloatAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private LlvmIrDataLayoutFunctionPointerAlignment <FunctionPointerAlignment>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<LlvmIrDataLayoutIntegerAlignment> <IntegerAlignment>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<LlvmIrDataLayoutVectorAlignment> <VectorAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<LlvmIrDataLayoutPointerSize> <PointerSize>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<UInt32> <NativeIntegerWidths>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<UInt32> <NonIntegralPointerTypeAddressSpaces>k__BackingField;
    public bool BigEndian { get; public set; }
    public bool LittleEndian { get; public set; }
    public Nullable`1<UInt32> AllocaAddressSpaceId { get; public set; }
    public Nullable`1<UInt32> GlobalsAddressSpaceId { get; public set; }
    public LlvmIrDataLayoutMangling Mangling { get; public set; }
    public Nullable`1<UInt32> ProgramAddressSpaceId { get; public set; }
    public Nullable`1<UInt32> StackAlignment { get; public set; }
    public LlvmIrDataLayoutAggregateObjectAlignment AggregateObjectAlignment { get; public set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<LlvmIrDataLayoutFloatAlignment> FloatAlignment { get; public set; }
    public LlvmIrDataLayoutFunctionPointerAlignment FunctionPointerAlignment { get; public set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<LlvmIrDataLayoutIntegerAlignment> IntegerAlignment { get; public set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<LlvmIrDataLayoutVectorAlignment> VectorAlignment { get; public set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<LlvmIrDataLayoutPointerSize> PointerSize { get; public set; }
    public List`1<UInt32> NativeIntegerWidths { get; public set; }
    public List`1<UInt32> NonIntegralPointerTypeAddressSpaces { get; public set; }
    public bool get_BigEndian();
    public void set_BigEndian(bool value);
    public bool get_LittleEndian();
    public void set_LittleEndian(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_AllocaAddressSpaceId();
    [CompilerGeneratedAttribute]
public void set_AllocaAddressSpaceId(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_GlobalsAddressSpaceId();
    [CompilerGeneratedAttribute]
public void set_GlobalsAddressSpaceId(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public LlvmIrDataLayoutMangling get_Mangling();
    [CompilerGeneratedAttribute]
public void set_Mangling(LlvmIrDataLayoutMangling value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_ProgramAddressSpaceId();
    [CompilerGeneratedAttribute]
public void set_ProgramAddressSpaceId(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_StackAlignment();
    [CompilerGeneratedAttribute]
public void set_StackAlignment(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public LlvmIrDataLayoutAggregateObjectAlignment get_AggregateObjectAlignment();
    [CompilerGeneratedAttribute]
public void set_AggregateObjectAlignment(LlvmIrDataLayoutAggregateObjectAlignment value);
    [CompilerGeneratedAttribute]
public List`1<LlvmIrDataLayoutFloatAlignment> get_FloatAlignment();
    [CompilerGeneratedAttribute]
public void set_FloatAlignment(List`1<LlvmIrDataLayoutFloatAlignment> value);
    [CompilerGeneratedAttribute]
public LlvmIrDataLayoutFunctionPointerAlignment get_FunctionPointerAlignment();
    [CompilerGeneratedAttribute]
public void set_FunctionPointerAlignment(LlvmIrDataLayoutFunctionPointerAlignment value);
    [CompilerGeneratedAttribute]
public List`1<LlvmIrDataLayoutIntegerAlignment> get_IntegerAlignment();
    [CompilerGeneratedAttribute]
public void set_IntegerAlignment(List`1<LlvmIrDataLayoutIntegerAlignment> value);
    [CompilerGeneratedAttribute]
public List`1<LlvmIrDataLayoutVectorAlignment> get_VectorAlignment();
    [CompilerGeneratedAttribute]
public void set_VectorAlignment(List`1<LlvmIrDataLayoutVectorAlignment> value);
    [CompilerGeneratedAttribute]
public List`1<LlvmIrDataLayoutPointerSize> get_PointerSize();
    [CompilerGeneratedAttribute]
public void set_PointerSize(List`1<LlvmIrDataLayoutPointerSize> value);
    [CompilerGeneratedAttribute]
public List`1<UInt32> get_NativeIntegerWidths();
    [CompilerGeneratedAttribute]
public void set_NativeIntegerWidths(List`1<UInt32> value);
    [CompilerGeneratedAttribute]
public List`1<UInt32> get_NonIntegralPointerTypeAddressSpaces();
    [CompilerGeneratedAttribute]
public void set_NonIntegralPointerTypeAddressSpaces(List`1<UInt32> value);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public string Render();
    [CompilerGeneratedAttribute]
internal static void <Render>g__AppendFieldList|60_0(List`1<T> list, <>c__DisplayClass60_0& );
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static void <Render>g__AppendList|60_1(string id, List`1<UInt32> list, <>c__DisplayClass60_0& );
    [CompilerGeneratedAttribute]
internal static void <Render>g__Append|60_2(char id, Nullable`1<UInt32> v, <>c__DisplayClass60_0& );
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrDataLayoutAggregateObjectAlignment : LlvmIrDataLayoutField {
    [CompilerGeneratedAttribute]
private UInt32 <Abi>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <Pref>k__BackingField;
    public UInt32 Abi { get; }
    public Nullable`1<UInt32> Pref { get; public set; }
    public LlvmIrDataLayoutAggregateObjectAlignment(UInt32 abi, Nullable`1<UInt32> pref);
    [CompilerGeneratedAttribute]
public UInt32 get_Abi();
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_Pref();
    [CompilerGeneratedAttribute]
public void set_Pref(Nullable`1<UInt32> value);
    public virtual void Render(StringBuilder sb);
}
internal abstract class Xamarin.Android.Tasks.LLVMIR.LlvmIrDataLayoutField : object {
    public static char Separator;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; }
    protected LlvmIrDataLayoutField(string id);
    [CompilerGeneratedAttribute]
public string get_Id();
    public virtual void Render(StringBuilder sb);
    public static string ConvertToString(UInt32 v);
    protected void Append(StringBuilder sb, UInt32 v, bool needSeparator);
    protected void Append(StringBuilder sb, Nullable`1<UInt32> v, bool needSeparator);
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrDataLayoutFloatAlignment : LlvmIrDataLayoutTypeAlignment {
    public LlvmIrDataLayoutFloatAlignment(UInt32 size, UInt32 abi, Nullable`1<UInt32> pref);
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrDataLayoutFunctionPointerAlignment : LlvmIrDataLayoutField {
    [CompilerGeneratedAttribute]
private UInt32 <Abi>k__BackingField;
    [CompilerGeneratedAttribute]
private LlvmIrDataLayoutFunctionPointerAlignmentType <Type>k__BackingField;
    public UInt32 Abi { get; }
    public LlvmIrDataLayoutFunctionPointerAlignmentType Type { get; }
    public LlvmIrDataLayoutFunctionPointerAlignment(LlvmIrDataLayoutFunctionPointerAlignmentType type, UInt32 abi);
    [CompilerGeneratedAttribute]
public UInt32 get_Abi();
    [CompilerGeneratedAttribute]
public LlvmIrDataLayoutFunctionPointerAlignmentType get_Type();
    public virtual void Render(StringBuilder sb);
}
internal enum Xamarin.Android.Tasks.LLVMIR.LlvmIrDataLayoutFunctionPointerAlignmentType : Enum {
    public int value__;
    public static LlvmIrDataLayoutFunctionPointerAlignmentType Independent;
    public static LlvmIrDataLayoutFunctionPointerAlignmentType Multiple;
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrDataLayoutIntegerAlignment : LlvmIrDataLayoutTypeAlignment {
    public LlvmIrDataLayoutIntegerAlignment(UInt32 size, UInt32 abi, Nullable`1<UInt32> pref);
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrDataLayoutMangling : LlvmIrDataLayoutField {
    [CompilerGeneratedAttribute]
private LlvmIrDataLayoutManglingOption <Option>k__BackingField;
    public LlvmIrDataLayoutManglingOption Option { get; }
    public LlvmIrDataLayoutMangling(LlvmIrDataLayoutManglingOption option);
    [CompilerGeneratedAttribute]
public LlvmIrDataLayoutManglingOption get_Option();
    public virtual void Render(StringBuilder sb);
}
internal enum Xamarin.Android.Tasks.LLVMIR.LlvmIrDataLayoutManglingOption : Enum {
    public int value__;
    public static LlvmIrDataLayoutManglingOption ELF;
    public static LlvmIrDataLayoutManglingOption GOFF;
    public static LlvmIrDataLayoutManglingOption MIPS;
    public static LlvmIrDataLayoutManglingOption MachO;
    public static LlvmIrDataLayoutManglingOption WindowsX86COFF;
    public static LlvmIrDataLayoutManglingOption WindowsCOFF;
    public static LlvmIrDataLayoutManglingOption XCOFF;
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrDataLayoutPointerSize : LlvmIrDataLayoutField {
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <AddressSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Abi>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <Pref>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <Idx>k__BackingField;
    public Nullable`1<UInt32> AddressSpace { get; public set; }
    public UInt32 Abi { get; }
    public UInt32 Size { get; }
    public Nullable`1<UInt32> Pref { get; public set; }
    public Nullable`1<UInt32> Idx { get; public set; }
    public LlvmIrDataLayoutPointerSize(UInt32 size, UInt32 abi);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_AddressSpace();
    [CompilerGeneratedAttribute]
public void set_AddressSpace(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public UInt32 get_Abi();
    [CompilerGeneratedAttribute]
public UInt32 get_Size();
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_Pref();
    [CompilerGeneratedAttribute]
public void set_Pref(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_Idx();
    [CompilerGeneratedAttribute]
public void set_Idx(Nullable`1<UInt32> value);
    public virtual void Render(StringBuilder sb);
}
internal abstract class Xamarin.Android.Tasks.LLVMIR.LlvmIrDataLayoutTypeAlignment : LlvmIrDataLayoutField {
    [CompilerGeneratedAttribute]
private UInt32 <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Abi>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <Pref>k__BackingField;
    public UInt32 Size { get; }
    public UInt32 Abi { get; }
    public Nullable`1<UInt32> Pref { get; public set; }
    protected LlvmIrDataLayoutTypeAlignment(string id, UInt32 size, UInt32 abi);
    [CompilerGeneratedAttribute]
public UInt32 get_Size();
    [CompilerGeneratedAttribute]
public UInt32 get_Abi();
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_Pref();
    [CompilerGeneratedAttribute]
public void set_Pref(Nullable`1<UInt32> value);
    public virtual void Render(StringBuilder sb);
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrDataLayoutVectorAlignment : LlvmIrDataLayoutTypeAlignment {
    public LlvmIrDataLayoutVectorAlignment(UInt32 size, UInt32 abi, Nullable`1<UInt32> pref);
}
internal abstract class Xamarin.Android.Tasks.LLVMIR.LlvmIrFlagFunctionAttribute : LlvmIrFunctionAttribute {
    protected LlvmIrFlagFunctionAttribute(string name, bool quoted);
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrFunction : object {
    private FunctionState functionState;
    [CompilerGeneratedAttribute]
private LlvmIrFunctionSignature <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private LlvmIrAddressSignificance <AddressSignificance>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private LlvmIrFunctionAttributeSet <AttributeSet>k__BackingField;
    [CompilerGeneratedAttribute]
private LlvmIrLinkage <Linkage>k__BackingField;
    [CompilerGeneratedAttribute]
private LlvmIrRuntimePreemption <RuntimePreemption>k__BackingField;
    [CompilerGeneratedAttribute]
private LlvmIrVisibility <Visibility>k__BackingField;
    [CompilerGeneratedAttribute]
private LlvmIrFunctionBody <Body>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsesVarArgs>k__BackingField;
    public LlvmIrFunctionSignature Signature { get; }
    public LlvmIrAddressSignificance AddressSignificance { get; public set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public LlvmIrFunctionAttributeSet AttributeSet { get; public set; }
    public LlvmIrLinkage Linkage { get; public set; }
    public LlvmIrRuntimePreemption RuntimePreemption { get; public set; }
    public LlvmIrVisibility Visibility { get; public set; }
    public LlvmIrFunctionBody Body { get; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public string Comment { get; public set; }
    public bool ReturnsValue { get; }
    public bool UsesVarArgs { get; }
    public LlvmIrFunction(LlvmIrFunctionSignature signature, LlvmIrFunctionAttributeSet attributeSet);
    public LlvmIrFunction(string name, LlvmIrFunctionSignature templateSignature, LlvmIrFunctionAttributeSet attributeSet);
    public LlvmIrFunction(string name, Type returnType, List`1<LlvmIrFunctionParameter> parameters, LlvmIrFunctionAttributeSet attributeSet);
    [CompilerGeneratedAttribute]
public LlvmIrFunctionSignature get_Signature();
    [CompilerGeneratedAttribute]
public LlvmIrAddressSignificance get_AddressSignificance();
    [CompilerGeneratedAttribute]
public void set_AddressSignificance(LlvmIrAddressSignificance value);
    [CompilerGeneratedAttribute]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public LlvmIrFunctionAttributeSet get_AttributeSet();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_AttributeSet(LlvmIrFunctionAttributeSet value);
    [CompilerGeneratedAttribute]
public LlvmIrLinkage get_Linkage();
    [CompilerGeneratedAttribute]
public void set_Linkage(LlvmIrLinkage value);
    [CompilerGeneratedAttribute]
public LlvmIrRuntimePreemption get_RuntimePreemption();
    [CompilerGeneratedAttribute]
public void set_RuntimePreemption(LlvmIrRuntimePreemption value);
    [CompilerGeneratedAttribute]
public LlvmIrVisibility get_Visibility();
    [CompilerGeneratedAttribute]
public void set_Visibility(LlvmIrVisibility value);
    [CompilerGeneratedAttribute]
public LlvmIrFunctionBody get_Body();
    [CompilerGeneratedAttribute]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public string get_Comment();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Comment(string value);
    public bool get_ReturnsValue();
    [CompilerGeneratedAttribute]
public bool get_UsesVarArgs();
    public LlvmIrLocalVariable CreateLocalVariable(Type type, string name);
    public ILlvmIrSavedFunctionState SaveState();
    public void RestoreState(ILlvmIrSavedFunctionState savedState);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(LlvmIrFunction other);
}
internal abstract class Xamarin.Android.Tasks.LLVMIR.LlvmIrFunctionAttribute : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Quoted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsParams>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParamsAreOptional>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasValueAsignment>k__BackingField;
    public string Name { get; }
    public bool Quoted { get; }
    public bool SupportsParams { get; }
    public bool ParamsAreOptional { get; }
    public bool HasValueAsignment { get; }
    protected LlvmIrFunctionAttribute(string name, bool quoted, bool supportsParams, bool optionalParams, bool hasValueAssignment);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_Quoted();
    [CompilerGeneratedAttribute]
public bool get_SupportsParams();
    [CompilerGeneratedAttribute]
public bool get_ParamsAreOptional();
    [CompilerGeneratedAttribute]
public bool get_HasValueAsignment();
    public string Render();
    protected virtual void RenderParams(StringBuilder sb);
    protected virtual void RenderAssignedValue(StringBuilder sb);
    protected virtual bool HasOptionalParams();
    protected string EnsureNonEmptyParameter(string name, string value);
    public sealed virtual int CompareTo(object obj);
    public sealed virtual int CompareTo(LlvmIrFunctionAttribute other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual bool Equals(LlvmIrFunctionAttribute other);
    public static bool op_GreaterThan(LlvmIrFunctionAttribute a, LlvmIrFunctionAttribute b);
    public static bool op_LessThan(LlvmIrFunctionAttribute a, LlvmIrFunctionAttribute b);
    public static bool op_GreaterThanOrEqual(LlvmIrFunctionAttribute a, LlvmIrFunctionAttribute b);
    public static bool op_LessThanOrEqual(LlvmIrFunctionAttribute a, LlvmIrFunctionAttribute b);
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrFunctionAttributeSet : object {
    [CompilerGeneratedAttribute]
private UInt32 <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoNotAddTargetSpecificAttributes>k__BackingField;
    private HashSet`1<LlvmIrFunctionAttribute> attributes;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<AndroidTargetArch, List`1<LlvmIrFunctionAttribute>> privateTargetSpecificAttributes;
    public UInt32 Number { get; public set; }
    public bool DoNotAddTargetSpecificAttributes { get; public set; }
    public LlvmIrFunctionAttributeSet(LlvmIrFunctionAttributeSet other);
    [CompilerGeneratedAttribute]
public UInt32 get_Number();
    [CompilerGeneratedAttribute]
public void set_Number(UInt32 value);
    [CompilerGeneratedAttribute]
public bool get_DoNotAddTargetSpecificAttributes();
    [CompilerGeneratedAttribute]
public void set_DoNotAddTargetSpecificAttributes(bool value);
    public IList`1<LlvmIrFunctionAttribute> GetPrivateTargetAttributes(AndroidTargetArch targetArch);
    public void Add(LlvmIrFunctionAttribute attr);
    public void Add(IList`1<LlvmIrFunctionAttribute> attrList);
    public string Render();
    public sealed virtual IEnumerator`1<LlvmIrFunctionAttribute> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Equals(LlvmIrFunctionAttributeSet other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrFunctionBody : object {
    private List`1<LlvmIrFunctionBodyItem> items;
    private HashSet`1<string> definedLabels;
    private LlvmIrFunction ownerFunction;
    private FunctionState functionState;
    private LlvmIrFunctionLabelItem implicitStartBlock;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private LlvmIrFunctionLabelItem precedingBlock1;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private LlvmIrFunctionLabelItem precedingBlock2;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private LlvmIrFunctionLabelItem previousLabel;
    public IList`1<LlvmIrFunctionBodyItem> Items { get; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public LlvmIrFunctionLabelItem PrecedingBlock1 { get; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public LlvmIrFunctionLabelItem PrecedingBlock2 { get; }
    public LlvmIrFunctionBody(LlvmIrFunction func, FunctionState functionState);
    public IList`1<LlvmIrFunctionBodyItem> get_Items();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public LlvmIrFunctionLabelItem get_PrecedingBlock1();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public LlvmIrFunctionLabelItem get_PrecedingBlock2();
    public void Add(LlvmIrFunctionLabelItem label);
    public void Add(LlvmIrFunctionBodyItem item);
    public void AddComment(string text);
    public Alloca Alloca(LlvmIrVariable result);
    public Br Br(LlvmIrFunctionLabelItem label);
    public Br Br(LlvmIrVariable cond, LlvmIrFunctionLabelItem ifTrue, LlvmIrFunctionLabelItem ifFalse);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public Call Call(LlvmIrFunction function, LlvmIrVariable result, ICollection`1<object> arguments, LlvmIrVariable funcPointer);
    public Ext Ext(LlvmIrVariable source, Type targetType, LlvmIrVariable result);
    public Icmp Icmp(LlvmIrIcmpCond cond, LlvmIrVariable op1, object op2, LlvmIrVariable result);
    public Load Load(LlvmIrVariable source, LlvmIrVariable result, LlvmIrMetadataItem tbaa);
    public Phi Phi(LlvmIrVariable result, LlvmIrVariable val1, LlvmIrFunctionLabelItem label1, LlvmIrVariable val2, LlvmIrFunctionLabelItem label2);
    public Ret Ret(Type retvalType, object retval);
    public Store Store(LlvmIrVariable from, LlvmIrVariable to, LlvmIrMetadataItem tbaa);
    public Store Store(LlvmIrVariable to, LlvmIrMetadataItem tbaa);
    public Unreachable Unreachable();
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrFunctionBodyComment : LlvmIrFunctionBodyItem {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public LlvmIrFunctionBodyComment(string comment);
    [CompilerGeneratedAttribute]
public string get_Text();
    protected virtual void DoWrite(GeneratorWriteContext context, LlvmIrGenerator generator);
}
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
internal abstract class Xamarin.Android.Tasks.LLVMIR.LlvmIrFunctionBodyItem : object {
    [CompilerGeneratedAttribute]
private bool <SkipInOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    public bool SkipInOutput { get; protected set; }
    public string Comment { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_SkipInOutput();
    [CompilerGeneratedAttribute]
protected void set_SkipInOutput(bool value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public void Write(GeneratorWriteContext context, LlvmIrGenerator generator);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
protected abstract virtual void DoWrite(GeneratorWriteContext context, LlvmIrGenerator generator);
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrFunctionLabelItem : LlvmIrFunctionLocalItem {
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public LlvmIrFunctionLabelItem(string name);
    public void WillAddToBody(LlvmIrFunctionBody functionBody, FunctionState state);
    protected virtual void DoWrite(GeneratorWriteContext context, LlvmIrGenerator generator);
}
internal abstract class Xamarin.Android.Tasks.LLVMIR.LlvmIrFunctionLocalItem : LlvmIrFunctionBodyItem {
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private string name;
    public string Name { get; protected set; }
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
protected LlvmIrFunctionLocalItem(string name);
    protected LlvmIrFunctionLocalItem(FunctionState state, string name);
    public string get_Name();
    protected void set_Name(string value);
    protected void SetName(ulong num);
    protected bool NameIsSet();
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrFunctionParameter : LlvmIrLocalVariable {
    private SavedParameterState state;
    public Nullable`1<UInt32> Align { get; public set; }
    public Nullable`1<bool> AllocPtr { get; public set; }
    public Nullable`1<UInt32> Dereferenceable { get; public set; }
    public Nullable`1<bool> ImmArg { get; public set; }
    public Nullable`1<bool> NoCapture { get; public set; }
    public Nullable`1<bool> NonNull { get; public set; }
    public Nullable`1<bool> NoUndef { get; public set; }
    public Nullable`1<bool> ReadNone { get; public set; }
    public Nullable`1<bool> SignExt { get; public set; }
    public Nullable`1<bool> ZeroExt { get; public set; }
    public Nullable`1<bool> IsCplusPlusReference { get; public set; }
    public bool IsVarArgs { get; public set; }
    public LlvmIrFunctionParameter(Type type, string name);
    public Nullable`1<UInt32> get_Align();
    public void set_Align(Nullable`1<UInt32> value);
    public Nullable`1<bool> get_AllocPtr();
    public void set_AllocPtr(Nullable`1<bool> value);
    public Nullable`1<UInt32> get_Dereferenceable();
    public void set_Dereferenceable(Nullable`1<UInt32> value);
    public Nullable`1<bool> get_ImmArg();
    public void set_ImmArg(Nullable`1<bool> value);
    public Nullable`1<bool> get_NoCapture();
    public void set_NoCapture(Nullable`1<bool> value);
    public Nullable`1<bool> get_NonNull();
    public void set_NonNull(Nullable`1<bool> value);
    public Nullable`1<bool> get_NoUndef();
    public void set_NoUndef(Nullable`1<bool> value);
    public Nullable`1<bool> get_ReadNone();
    public void set_ReadNone(Nullable`1<bool> value);
    public Nullable`1<bool> get_SignExt();
    public void set_SignExt(Nullable`1<bool> value);
    public Nullable`1<bool> get_ZeroExt();
    public void set_ZeroExt(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsCplusPlusReference();
    public void set_IsCplusPlusReference(Nullable`1<bool> value);
    public bool get_IsVarArgs();
    public void set_IsVarArgs(bool value);
    public ILlvmIrSavedFunctionParameterState SaveState();
    public void RestoreState(ILlvmIrSavedFunctionParameterState savedState);
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrFunctionSignature : object {
    private ReturnTypeAttributes returnAttributes;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<LlvmIrFunctionParameter> <Parameters>k__BackingField;
    public string Name { get; }
    public Type ReturnType { get; }
    public ReturnTypeAttributes ReturnAttributes { get; }
    public IList`1<LlvmIrFunctionParameter> Parameters { get; }
    public LlvmIrFunctionSignature(string name, Type returnType, IList`1<LlvmIrFunctionParameter> parameters, ReturnTypeAttributes returnAttributes);
    public LlvmIrFunctionSignature(string name, LlvmIrFunctionSignature templateSignature);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Type get_ReturnType();
    public ReturnTypeAttributes get_ReturnAttributes();
    [CompilerGeneratedAttribute]
public IList`1<LlvmIrFunctionParameter> get_Parameters();
    public ILlvmIrSavedFunctionSignatureState SaveState();
    public void RestoreState(ILlvmIrSavedFunctionSignatureState savedState);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(LlvmIrFunctionSignature other);
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrGenerator : object {
    private static Dictionary`2<LlvmIrLinkage, string> llvmLinkage;
    private static Dictionary`2<LlvmIrRuntimePreemption, string> llvmRuntimePreemption;
    private static Dictionary`2<LlvmIrVisibility, string> llvmVisibility;
    private static Dictionary`2<LlvmIrAddressSignificance, string> llvmAddressSignificance;
    private static Dictionary`2<LlvmIrWritability, string> llvmWritability;
    public static string IRPointerType;
    private static Dictionary`2<Type, BasicType> basicTypeMap;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    private LlvmIrModuleTarget target;
    public string FilePath { get; }
    public string FileName { get; }
    protected LlvmIrGenerator(string filePath, LlvmIrModuleTarget target);
    private static LlvmIrGenerator();
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public string get_FileName();
    public static LlvmIrGenerator Create(AndroidTargetArch arch, string fileName);
    public void Generate(TextWriter writer, LlvmIrModule module);
    private void WriteStrings(GeneratorWriteContext context);
    private void WriteGlobalVariables(GeneratorWriteContext context);
    private void WriteGlobalVariableStart(GeneratorWriteContext context, LlvmIrGlobalVariable variable);
    private void WriteGlobalVariable(GeneratorWriteContext context, LlvmIrGlobalVariable variable);
    private void WriteTypeAndValue(GeneratorWriteContext context, LlvmIrVariable variable, LlvmTypeInfo& typeInfo);
    private ulong GetAggregateValueElementCount(LlvmIrVariable variable);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
private ulong GetAggregateValueElementCount(Type type, object value, LlvmIrGlobalVariable globalVariable);
    private void WriteType(GeneratorWriteContext context, LlvmIrVariable variable, LlvmTypeInfo& typeInfo);
    private void WriteType(GeneratorWriteContext context, StructureInstance si, StructureMemberInfo memberInfo, LlvmTypeInfo& typeInfo);
    private void WriteStructureType(GeneratorWriteContext context, StructureInstance si, LlvmTypeInfo& typeInfo);
    private void WriteType(GeneratorWriteContext context, Type type, object value, LlvmTypeInfo& typeInfo, LlvmIrGlobalVariable globalVariable);
    private void WriteArrayType(GeneratorWriteContext context, Type elementType, ulong elementCount, LlvmTypeInfo& typeInfo);
    private ulong GetStructureMaxFieldAlignment(StructureInfo si);
    private bool IsStructureInstance(Type t);
    private void WriteValue(GeneratorWriteContext context, Type valueType, LlvmIrVariable variable);
    private void AssertArraySize(StructureInstance si, StructureMemberInfo smi, ulong length, ulong expectedLength);
    private void WriteValue(GeneratorWriteContext context, StructureInstance structInstance, StructureMemberInfo smi, object value);
    private bool WriteNativePointerValue(GeneratorWriteContext context, StructureInstance si, StructureMemberInfo smi, object value);
    private void WriteValue(GeneratorWriteContext context, Type type, object value);
    private void WriteStructureValue(GeneratorWriteContext context, StructureInstance instance);
    private void WriteArrayValue(GeneratorWriteContext context, LlvmIrVariable variable);
    private void WriteLinkage(GeneratorWriteContext context, LlvmIrLinkage linkage);
    private void WriteWritability(GeneratorWriteContext context, LlvmIrWritability writability);
    private void WriteAddressSignificance(GeneratorWriteContext context, LlvmIrAddressSignificance addressSignificance);
    private void WriteVisibility(GeneratorWriteContext context, LlvmIrVisibility visibility);
    private void WritePreemptionSpecifier(GeneratorWriteContext context, LlvmIrRuntimePreemption preemptionSpecifier);
    private void WriteAttribute(GeneratorWriteContext context, string attr);
    private void WriteStructureDeclarations(GeneratorWriteContext context);
    private void WriteStructureDeclaration(GeneratorWriteContext context, StructureInfo si);
    private void WriteFunctions(GeneratorWriteContext context);
    private void WriteFunctionComment(GeneratorWriteContext context, LlvmIrFunction function);
    private void WriteFunctionBody(GeneratorWriteContext context, LlvmIrFunction function);
    private ILlvmIrSavedFunctionState WriteFunctionPreamble(GeneratorWriteContext context, LlvmIrFunction function, string keyword);
    private void WriteExternalFunctionDeclarations(GeneratorWriteContext context);
    private void WriteFunctionAttributesComment(GeneratorWriteContext context, LlvmIrFunction func);
    private void WriteFunctionDeclarationLeadingDecorations(GeneratorWriteContext context, LlvmIrFunction func);
    private void WriteFunctionDefinitionLeadingDecorations(GeneratorWriteContext context, LlvmIrFunction func);
    private void WriteFunctionLeadingDecorations(GeneratorWriteContext context, LlvmIrFunction func, bool declaration);
    private void WriteFunctionDeclarationTrailingDecorations(GeneratorWriteContext context, LlvmIrFunction func);
    private void WriteFunctionDefinitionTrailingDecorations(GeneratorWriteContext context, LlvmIrFunction func);
    private void WriteFunctionTrailingDecorations(GeneratorWriteContext context, LlvmIrFunction func, bool declaration);
    public static void WriteReturnAttributes(GeneratorWriteContext context, ReturnTypeAttributes returnAttrs);
    private void WriteFunctionSignature(GeneratorWriteContext context, LlvmIrFunction func, bool writeParameterNames);
    public static void WriteParameterAttributes(GeneratorWriteContext context, LlvmIrFunctionParameter parameter);
    private static bool AttributeIsSet(Nullable`1<bool> attr);
    private void WriteAttributeSets(GeneratorWriteContext context);
    private void WriteMetadata(GeneratorWriteContext context);
    public void WriteComment(GeneratorWriteContext context, string comment);
    public void WriteCommentLine(GeneratorWriteContext context, string comment);
    private static Type GetActualType(Type type);
    public static string MapManagedTypeToNative(Type type);
    private static string MapManagedTypeToNative(StructureMemberInfo smi);
    private static bool IsNumeric(Type type);
    private object GetTypedMemberValue(GeneratorWriteContext context, StructureInfo info, StructureMemberInfo smi, StructureInstance instance, Type expectedType, object defaultValue);
    public static string MapToIRType(Type type);
    public static string MapToIRType(Type type, UInt64& size);
    public static string MapToIRType(Type type, Boolean& isPointer);
    public static string MapToIRType(Type type, UInt64& size, Boolean& isPointer);
    private string GetIRType(Type type, UInt64& size, Boolean& isPointer);
    public static bool IsFirstClassNonPointerType(Type type);
    public static string QuoteStringNoEscape(string s);
    public static string QuoteString(string value, bool nullTerminated);
    public static string QuoteString(Byte[] bytes);
    public static string QuoteString(string value, UInt64& stringSize, bool nullTerminated);
    public static string QuoteString(Byte[] bytes, int byteCount, UInt64& stringSize, bool nullTerminated);
    [CompilerGeneratedAttribute]
private void <WriteArrayValue>g__WritePrevItemCommentOrNewline|39_0(<>c__DisplayClass39_0& );
    [CompilerGeneratedAttribute]
private void <WriteStructureDeclaration>g__WriteStructureDeclarationField|47_0(string typeName, string comment, bool last, <>c__DisplayClass47_0& );
    [CompilerGeneratedAttribute]
internal static UInt32 <WriteParameterAttributes>g__ValueOrPointerSize|62_0(Nullable`1<UInt32> value, <>c__DisplayClass62_0& );
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrGlobalVariable : LlvmIrVariable {
    public static LlvmIrVariableOptions DefaultOptions;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
[CompilerGeneratedAttribute]
private LlvmIrVariableOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ZeroInitializeArray>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ArrayItemCount>k__BackingField;
    public bool Global { get; }
    public string NamePrefix { get; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public LlvmIrVariableOptions Options { get; public set; }
    public bool ZeroInitializeArray { get; public set; }
    public ulong ArrayItemCount { get; public set; }
    public LlvmIrGlobalVariable(Type type, string name, LlvmIrVariableOptions options);
    public LlvmIrGlobalVariable(object value, string name, LlvmIrVariableOptions options);
    private static LlvmIrGlobalVariable();
    public virtual bool get_Global();
    public virtual string get_NamePrefix();
    [CompilerGeneratedAttribute]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public virtual LlvmIrVariableOptions get_Options();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Options(LlvmIrVariableOptions value);
    [CompilerGeneratedAttribute]
public bool get_ZeroInitializeArray();
    [CompilerGeneratedAttribute]
public void set_ZeroInitializeArray(bool value);
    [CompilerGeneratedAttribute]
public ulong get_ArrayItemCount();
    [CompilerGeneratedAttribute]
public void set_ArrayItemCount(ulong value);
    public void OverrideValueAndType(Type newType, object newValue);
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrGroupDelimiterVariable : LlvmIrGlobalVariable {
}
internal enum Xamarin.Android.Tasks.LLVMIR.LlvmIrIcmpCond : Enum {
    public int value__;
    public static LlvmIrIcmpCond Equal;
    public static LlvmIrIcmpCond NotEqual;
    public static LlvmIrIcmpCond UnsignedGreaterThan;
    public static LlvmIrIcmpCond UnsignedGreaterOrEqual;
    public static LlvmIrIcmpCond UnsignedLessThan;
    public static LlvmIrIcmpCond UnsignedLessOrEqual;
    public static LlvmIrIcmpCond SignedGreaterThan;
    public static LlvmIrIcmpCond SignedGreaterOrEqual;
    public static LlvmIrIcmpCond SignedLessThan;
    public static LlvmIrIcmpCond SignedLessOrEqual;
}
internal abstract class Xamarin.Android.Tasks.LLVMIR.LlvmIrInstruction : LlvmIrFunctionBodyItem {
    [CompilerGeneratedAttribute]
private string <Mnemonic>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
[CompilerGeneratedAttribute]
private LlvmIrFunctionAttributeSet <AttributeSet>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private LlvmIrMetadataItem <TBAA>k__BackingField;
    public string Mnemonic { get; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public LlvmIrFunctionAttributeSet AttributeSet { get; public set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public LlvmIrMetadataItem TBAA { get; public set; }
    protected LlvmIrInstruction(string mnemonic);
    [CompilerGeneratedAttribute]
public string get_Mnemonic();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public LlvmIrFunctionAttributeSet get_AttributeSet();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_AttributeSet(LlvmIrFunctionAttributeSet value);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public LlvmIrMetadataItem get_TBAA();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TBAA(LlvmIrMetadataItem value);
    protected virtual void DoWrite(GeneratorWriteContext context, LlvmIrGenerator generator);
    protected virtual void WriteValueAssignment(GeneratorWriteContext context);
    protected virtual void WritePreamble(GeneratorWriteContext context);
    protected virtual void WriteBody(GeneratorWriteContext context);
    protected void WriteValue(GeneratorWriteContext context, Type type, object value, bool isPointer);
    protected void WriteAlignment(GeneratorWriteContext context, ulong typeSize, bool isPointer);
}
internal abstract class Xamarin.Android.Tasks.LLVMIR.LlvmIrInstructionArgumentValuePlaceholder : object {
    public abstract virtual object GetValue(LlvmIrModuleTarget target);
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrInstructionPointerSizeArgumentPlaceholder : LlvmIrInstructionArgumentValuePlaceholder {
    public virtual object GetValue(LlvmIrModuleTarget target);
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrInstructions : object {
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrKnownMetadata : object {
    public static string LlvmModuleFlags;
    public static string LlvmIdent;
}
[FlagsAttribute]
internal enum Xamarin.Android.Tasks.LLVMIR.LlvmIrLinkage : Enum {
    public int value__;
    public static LlvmIrLinkage Default;
    public static LlvmIrLinkage Private;
    public static LlvmIrLinkage Internal;
    public static LlvmIrLinkage AvailableExternally;
    public static LlvmIrLinkage LinkOnce;
    public static LlvmIrLinkage Weak;
    public static LlvmIrLinkage Common;
    public static LlvmIrLinkage Appending;
    public static LlvmIrLinkage ExternWeak;
    public static LlvmIrLinkage LinkOnceODR;
    public static LlvmIrLinkage External;
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrLocalVariable : LlvmIrVariable {
    public bool Global { get; }
    public string NamePrefix { get; }
    public LlvmIrLocalVariable(Type type, string name);
    public virtual bool get_Global();
    public virtual string get_NamePrefix();
    public void AssignNumber(ulong n);
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrMetadataField : object {
    [CompilerGeneratedAttribute]
private string <Contents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReference>k__BackingField;
    public string Contents { get; }
    public bool IsReference { get; }
    public LlvmIrMetadataField(LlvmIrMetadataField other);
    public LlvmIrMetadataField(string value, bool isReference);
    public LlvmIrMetadataField(object value);
    [CompilerGeneratedAttribute]
public string get_Contents();
    [CompilerGeneratedAttribute]
public bool get_IsReference();
    private string FormatValue(object value);
    private string QuoteString(string value);
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrMetadataItem : object {
    private List`1<LlvmIrMetadataField> fields;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public LlvmIrMetadataItem(LlvmIrMetadataItem other);
    public LlvmIrMetadataItem(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    public void AddReferenceField(string referenceName);
    public void AddReferenceField(LlvmIrMetadataItem referencedItem);
    public void AddField(object value);
    public void AddField(LlvmIrMetadataField field);
    public string Render();
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrMetadataManager : object {
    private ulong counter;
    private List`1<LlvmIrMetadataItem> items;
    private Dictionary`2<string, LlvmIrMetadataItem> nameToItem;
    public List`1<LlvmIrMetadataItem> Items { get; }
    public LlvmIrMetadataManager(LlvmIrMetadataManager other);
    public List`1<LlvmIrMetadataItem> get_Items();
    public LlvmIrMetadataItem Add(string name, Object[] values);
    public LlvmIrMetadataItem AddNumbered(Object[] values);
    public LlvmIrMetadataItem GetItem(string name);
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrModule : object {
    public static Type NameValueArrayType;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IList`1<LlvmIrFunction> <ExternalFunctions>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IList`1<LlvmIrFunction> <Functions>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<LlvmIrFunctionAttributeSet> <AttributeSets>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<StructureInfo> <Structures>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IList`1<LlvmIrGlobalVariable> <GlobalVariables>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IList`1<LlvmIrStringGroup> <Strings>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<LlvmIrFunctionAttributeSet, LlvmIrFunctionAttributeSet> attributeSets;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<LlvmIrFunction, LlvmIrFunction> externalFunctions;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<LlvmIrFunction, LlvmIrFunction> functions;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Type, StructureInfo> structures;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private LlvmIrStringManager stringManager;
    private LlvmIrMetadataManager metadataManager;
    private LlvmIrMetadataItem tbaaAnyPointer;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private LlvmIrBufferManager bufferManager;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<LlvmIrGlobalVariable> globalVariables;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private LlvmIrFunction puts;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private LlvmIrFunction abort;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<LlvmIrFunction> ExternalFunctions { get; private set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<LlvmIrFunction> Functions { get; private set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<LlvmIrFunctionAttributeSet> AttributeSets { get; private set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<StructureInfo> Structures { get; private set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<LlvmIrGlobalVariable> GlobalVariables { get; private set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<LlvmIrStringGroup> Strings { get; private set; }
    public LlvmIrMetadataItem TbaaAnyPointer { get; }
    private static LlvmIrModule();
    [CompilerGeneratedAttribute]
public IList`1<LlvmIrFunction> get_ExternalFunctions();
    [CompilerGeneratedAttribute]
private void set_ExternalFunctions(IList`1<LlvmIrFunction> value);
    [CompilerGeneratedAttribute]
public IList`1<LlvmIrFunction> get_Functions();
    [CompilerGeneratedAttribute]
private void set_Functions(IList`1<LlvmIrFunction> value);
    [CompilerGeneratedAttribute]
public IList`1<LlvmIrFunctionAttributeSet> get_AttributeSets();
    [CompilerGeneratedAttribute]
private void set_AttributeSets(IList`1<LlvmIrFunctionAttributeSet> value);
    [CompilerGeneratedAttribute]
public IList`1<StructureInfo> get_Structures();
    [CompilerGeneratedAttribute]
private void set_Structures(IList`1<StructureInfo> value);
    [CompilerGeneratedAttribute]
public IList`1<LlvmIrGlobalVariable> get_GlobalVariables();
    [CompilerGeneratedAttribute]
private void set_GlobalVariables(IList`1<LlvmIrGlobalVariable> value);
    [CompilerGeneratedAttribute]
public IList`1<LlvmIrStringGroup> get_Strings();
    [CompilerGeneratedAttribute]
private void set_Strings(IList`1<LlvmIrStringGroup> value);
    public LlvmIrMetadataItem get_TbaaAnyPointer();
    public LlvmIrMetadataManager GetMetadataManagerCopy();
    public void AfterConstruction();
    public void Add(LlvmIrFunction func);
    public Call CreatePuts(string text, LlvmIrVariable result);
    public Call AddPuts(LlvmIrFunction function, string text, LlvmIrVariable result);
    private void EnsurePuts();
    private LlvmIrFunctionAttributeSet MakePutsAttributeSet();
    public Call CreateAbort();
    public Call AddAbort(LlvmIrFunction function);
    private void EnsureAbort();
    private LlvmIrFunctionAttributeSet MakeAbortAttributeSet();
    public void AddIfThenElse(LlvmIrFunction function, LlvmIrVariable result, LlvmIrIcmpCond condition, LlvmIrVariable conditionVariable, object conditionComparand, ICollection`1<LlvmIrInstruction> codeIfThen, ICollection`1<LlvmIrInstruction> codeIfElse);
    public LlvmIrGlobalVariable AddGlobalVariable(string name, object value, LlvmIrVariableOptions options, string comment);
    public LlvmIrGlobalVariable AddGlobalVariable(Type type, string name, object value, LlvmIrVariableOptions options, string comment);
    public void Add(LlvmIrGlobalVariable variable, string stringGroupName, string stringGroupComment, string symbolSuffix);
    public void Add(IList`1<LlvmIrGlobalVariable> variables);
    public void Add(LlvmIrGlobalVariable variable);
    private void PrepareStructure(LlvmIrGlobalVariable variable);
    private void PrepareStructure(StructureInstance structure);
    private void AddAutomaticBuffer(StructureInstance structure, StructureMemberInfo smi, ulong bufferSize);
    private void AddStandardGlobalVariable(LlvmIrGlobalVariable variable);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
private void AddStringGlobalVariable(LlvmIrGlobalVariable variable, string stringGroupName, string stringGroupComment, string symbolSuffix);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
private void RegisterString(LlvmIrGlobalVariable variable, string stringGroupName, string stringGroupComment, string symbolSuffix);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public void RegisterString(string value, string stringGroupName, string stringGroupComment, string symbolSuffix);
    private void AddStructureArrayGlobalVariable(LlvmIrGlobalVariable variable);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
private void AddStringArrayGlobalVariable(LlvmIrGlobalVariable variable, string stringGroupName, string stringGroupComment, string symbolSuffix);
    private bool IsStringArrayVariable(LlvmIrGlobalVariable variable);
    private bool IsStringVariable(LlvmIrGlobalVariable variable);
    private bool IsStructureArrayVariable(LlvmIrGlobalVariable variable);
    private bool IsStructureVariable(LlvmIrGlobalVariable variable);
    private void EnsureValidGlobalVariableType(LlvmIrGlobalVariable variable);
    public LlvmIrStringVariable LookupRequiredVariableForString(string value);
    public string LookupRequiredBufferVariableName(StructureInstance structure, StructureMemberInfo smi);
    public LlvmIrFunctionAttributeSet AddAttributeSet(LlvmIrFunctionAttributeSet attrSet);
    public LlvmIrFunction DeclareExternalFunction(LlvmIrFunction func);
    public LlvmIrFunction DeclareExternalFunction(LlvmIrFunctionSignature sig, LlvmIrFunctionAttributeSet attrSet);
    public StructureInfo MapStructure();
    internal StructureInfo GetStructureInfo(Type type);
    [CompilerGeneratedAttribute]
internal static void <AddIfThenElse>g__AddInstructions|51_0(ICollection`1<LlvmIrInstruction> instructions, <>c__DisplayClass51_0& );
    [CompilerGeneratedAttribute]
private void <AddStringArrayGlobalVariable>g__Register|65_0(string value, <>c__DisplayClass65_0& );
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrModuleAArch64 : LlvmIrModuleTarget {
    [CompilerGeneratedAttribute]
private LlvmIrDataLayout <DataLayout>k__BackingField;
    public LlvmIrDataLayout DataLayout { get; }
    public string Triple { get; }
    public AndroidTargetArch TargetArch { get; }
    public UInt32 NativePointerSize { get; }
    public bool Is64Bit { get; }
    [CompilerGeneratedAttribute]
public virtual LlvmIrDataLayout get_DataLayout();
    public virtual string get_Triple();
    public virtual AndroidTargetArch get_TargetArch();
    public virtual UInt32 get_NativePointerSize();
    public virtual bool get_Is64Bit();
    public virtual void AddTargetSpecificAttributes(LlvmIrFunctionAttributeSet attrSet);
    public virtual void AddTargetSpecificMetadata(LlvmIrMetadataManager manager);
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrModuleArmV7a : LlvmIrModuleTarget {
    [CompilerGeneratedAttribute]
private LlvmIrDataLayout <DataLayout>k__BackingField;
    public LlvmIrDataLayout DataLayout { get; }
    public string Triple { get; }
    public AndroidTargetArch TargetArch { get; }
    public UInt32 NativePointerSize { get; }
    public bool Is64Bit { get; }
    [CompilerGeneratedAttribute]
public virtual LlvmIrDataLayout get_DataLayout();
    public virtual string get_Triple();
    public virtual AndroidTargetArch get_TargetArch();
    public virtual UInt32 get_NativePointerSize();
    public virtual bool get_Is64Bit();
    public virtual void AddTargetSpecificAttributes(LlvmIrFunctionAttributeSet attrSet);
    public virtual void SetParameterFlags(LlvmIrFunctionParameter parameter);
    public virtual void AddTargetSpecificMetadata(LlvmIrMetadataManager manager);
}
internal static class Xamarin.Android.Tasks.LLVMIR.LlvmIrModuleMergeBehavior : object {
    public static int Error;
    public static int Warning;
    public static int Require;
    public static int Override;
    public static int Append;
    public static int AppendUnique;
    public static int Max;
}
internal abstract class Xamarin.Android.Tasks.LLVMIR.LlvmIrModuleTarget : object {
    public LlvmIrDataLayout DataLayout { get; }
    public string Triple { get; }
    public AndroidTargetArch TargetArch { get; }
    public UInt32 NativePointerSize { get; }
    public bool Is64Bit { get; }
    public abstract virtual LlvmIrDataLayout get_DataLayout();
    public abstract virtual string get_Triple();
    public abstract virtual AndroidTargetArch get_TargetArch();
    public abstract virtual UInt32 get_NativePointerSize();
    public abstract virtual bool get_Is64Bit();
    public virtual void AddTargetSpecificAttributes(LlvmIrFunctionAttributeSet attrSet);
    public virtual void AddTargetSpecificMetadata(LlvmIrMetadataManager manager);
    public virtual void SetParameterFlags(LlvmIrFunctionParameter parameter);
    protected void SetIntegerParameterUpcastFlags(LlvmIrFunctionParameter parameter);
    public virtual int GetAggregateAlignment(int maxFieldAlignment, ulong dataSize);
    protected LlvmIrMetadataItem GetFlagsMetadata(LlvmIrMetadataManager manager);
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrModuleX64 : LlvmIrModuleTarget {
    [CompilerGeneratedAttribute]
private LlvmIrDataLayout <DataLayout>k__BackingField;
    public LlvmIrDataLayout DataLayout { get; }
    public string Triple { get; }
    public AndroidTargetArch TargetArch { get; }
    public UInt32 NativePointerSize { get; }
    public bool Is64Bit { get; }
    [CompilerGeneratedAttribute]
public virtual LlvmIrDataLayout get_DataLayout();
    public virtual string get_Triple();
    public virtual AndroidTargetArch get_TargetArch();
    public virtual UInt32 get_NativePointerSize();
    public virtual bool get_Is64Bit();
    public virtual void AddTargetSpecificAttributes(LlvmIrFunctionAttributeSet attrSet);
    public virtual void SetParameterFlags(LlvmIrFunctionParameter parameter);
    public virtual int GetAggregateAlignment(int maxFieldAlignment, ulong dataSize);
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrModuleX86 : LlvmIrModuleTarget {
    [CompilerGeneratedAttribute]
private LlvmIrDataLayout <DataLayout>k__BackingField;
    public LlvmIrDataLayout DataLayout { get; }
    public string Triple { get; }
    public AndroidTargetArch TargetArch { get; }
    public UInt32 NativePointerSize { get; }
    public bool Is64Bit { get; }
    [CompilerGeneratedAttribute]
public virtual LlvmIrDataLayout get_DataLayout();
    public virtual string get_Triple();
    public virtual AndroidTargetArch get_TargetArch();
    public virtual UInt32 get_NativePointerSize();
    public virtual bool get_Is64Bit();
    public virtual void AddTargetSpecificAttributes(LlvmIrFunctionAttributeSet attrSet);
    public virtual void SetParameterFlags(LlvmIrFunctionParameter parameter);
    public virtual void AddTargetSpecificMetadata(LlvmIrMetadataManager manager);
}
[FlagsAttribute]
internal enum Xamarin.Android.Tasks.LLVMIR.LlvmIrRuntimePreemption : Enum {
    public int value__;
    public static LlvmIrRuntimePreemption Default;
    public static LlvmIrRuntimePreemption DSOPreemptable;
    public static LlvmIrRuntimePreemption DSOLocal;
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrStringGroup : object {
    public ulong Count;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public string Comment;
    public List`1<LlvmIrStringVariable> Strings;
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public LlvmIrStringGroup(string comment);
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrStringVariable : LlvmIrGlobalVariable {
    public LlvmIrStringVariable(string name, string value);
}
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
internal abstract class Xamarin.Android.Tasks.LLVMIR.LlvmIrVariable : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private LlvmIrVariableWriteOptions <WriteOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ArrayStride>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NameMatters>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`3<LlvmIrVariable, LlvmIrModuleTarget, object> <BeforeWriteCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private object <BeforeWriteCallbackCallerState>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`6<LlvmIrVariable, LlvmIrModuleTarget, ulong, object, object, string> <GetArrayItemCommentCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private object <GetArrayItemCommentCallbackCallerState>k__BackingField;
    public bool Global { get; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
public string NamePrefix { get; }
    public string Name { get; protected set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
public Type Type { get; protected set; }
    public LlvmIrVariableWriteOptions WriteOptions { get; public set; }
    public UInt32 ArrayStride { get; public set; }
    public object Value { get; public set; }
    public string Comment { get; public set; }
    protected bool NameMatters { get; protected set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
public string Reference { get; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`3<LlvmIrVariable, LlvmIrModuleTarget, object> BeforeWriteCallback { get; public set; }
    public object BeforeWriteCallbackCallerState { get; public set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`6<LlvmIrVariable, LlvmIrModuleTarget, ulong, object, object, string> GetArrayItemCommentCallback { get; public set; }
    public object GetArrayItemCommentCallbackCallerState { get; public set; }
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
protected LlvmIrVariable(Type type, string name);
    public abstract virtual bool get_Global();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public abstract virtual string get_NamePrefix();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public Type get_Type();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
protected void set_Type(Type value);
    [CompilerGeneratedAttribute]
public LlvmIrVariableWriteOptions get_WriteOptions();
    [CompilerGeneratedAttribute]
public void set_WriteOptions(LlvmIrVariableWriteOptions value);
    [CompilerGeneratedAttribute]
public UInt32 get_ArrayStride();
    [CompilerGeneratedAttribute]
public void set_ArrayStride(UInt32 value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
protected bool get_NameMatters();
    [CompilerGeneratedAttribute]
protected void set_NameMatters(bool value);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public virtual string get_Reference();
    [CompilerGeneratedAttribute]
public Action`3<LlvmIrVariable, LlvmIrModuleTarget, object> get_BeforeWriteCallback();
    [CompilerGeneratedAttribute]
public void set_BeforeWriteCallback(Action`3<LlvmIrVariable, LlvmIrModuleTarget, object> value);
    [CompilerGeneratedAttribute]
public object get_BeforeWriteCallbackCallerState();
    [CompilerGeneratedAttribute]
public void set_BeforeWriteCallbackCallerState(object value);
    [CompilerGeneratedAttribute]
public Func`6<LlvmIrVariable, LlvmIrModuleTarget, ulong, object, object, string> get_GetArrayItemCommentCallback();
    [CompilerGeneratedAttribute]
public void set_GetArrayItemCommentCallback(Func`6<LlvmIrVariable, LlvmIrModuleTarget, ulong, object, object, string> value);
    [CompilerGeneratedAttribute]
public object get_GetArrayItemCommentCallbackCallerState();
    [CompilerGeneratedAttribute]
public void set_GetArrayItemCommentCallbackCallerState(object value);
    public virtual int GetHashCode();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public virtual bool Equals(object obj);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("0")]
public virtual bool Equals(LlvmIrVariable other);
}
internal class Xamarin.Android.Tasks.LLVMIR.LlvmIrVariableOptions : object {
    public static LlvmIrVariableOptions Default;
    public static LlvmIrVariableOptions GlobalConstant;
    public static LlvmIrVariableOptions GlobalWritable;
    public static LlvmIrVariableOptions LocalConstant;
    public static LlvmIrVariableOptions LocalWritable;
    public static LlvmIrVariableOptions LocalWritableInsignificantAddr;
    public static LlvmIrVariableOptions LocalString;
    public static LlvmIrVariableOptions LocalConstexprString;
    public static LlvmIrVariableOptions GlobalConstexprString;
    public static LlvmIrVariableOptions GlobalConstantStringPointer;
    [CompilerGeneratedAttribute]
private LlvmIrLinkage <Linkage>k__BackingField;
    [CompilerGeneratedAttribute]
private LlvmIrRuntimePreemption <RuntimePreemption>k__BackingField;
    [CompilerGeneratedAttribute]
private LlvmIrVisibility <Visibility>k__BackingField;
    [CompilerGeneratedAttribute]
private LlvmIrAddressSignificance <AddressSignificance>k__BackingField;
    [CompilerGeneratedAttribute]
private LlvmIrWritability <Writability>k__BackingField;
    public LlvmIrLinkage Linkage { get; public set; }
    public LlvmIrRuntimePreemption RuntimePreemption { get; public set; }
    public LlvmIrVisibility Visibility { get; public set; }
    public LlvmIrAddressSignificance AddressSignificance { get; public set; }
    public LlvmIrWritability Writability { get; public set; }
    public bool IsGlobal { get; }
    private static LlvmIrVariableOptions();
    [CompilerGeneratedAttribute]
public LlvmIrLinkage get_Linkage();
    [CompilerGeneratedAttribute]
public void set_Linkage(LlvmIrLinkage value);
    [CompilerGeneratedAttribute]
public LlvmIrRuntimePreemption get_RuntimePreemption();
    [CompilerGeneratedAttribute]
public void set_RuntimePreemption(LlvmIrRuntimePreemption value);
    [CompilerGeneratedAttribute]
public LlvmIrVisibility get_Visibility();
    [CompilerGeneratedAttribute]
public void set_Visibility(LlvmIrVisibility value);
    [CompilerGeneratedAttribute]
public LlvmIrAddressSignificance get_AddressSignificance();
    [CompilerGeneratedAttribute]
public void set_AddressSignificance(LlvmIrAddressSignificance value);
    [CompilerGeneratedAttribute]
public LlvmIrWritability get_Writability();
    [CompilerGeneratedAttribute]
public void set_Writability(LlvmIrWritability value);
    public bool get_IsGlobal();
}
[FlagsAttribute]
internal enum Xamarin.Android.Tasks.LLVMIR.LlvmIrVariableWriteOptions : Enum {
    public int value__;
    public static LlvmIrVariableWriteOptions None;
    public static LlvmIrVariableWriteOptions ArrayWriteIndexComments;
    public static LlvmIrVariableWriteOptions ArrayFormatInRows;
}
[FlagsAttribute]
internal enum Xamarin.Android.Tasks.LLVMIR.LlvmIrVisibility : Enum {
    public int value__;
    public static LlvmIrVisibility Default;
    public static LlvmIrVisibility Hidden;
    public static LlvmIrVisibility Protected;
}
[FlagsAttribute]
internal enum Xamarin.Android.Tasks.LLVMIR.LlvmIrWritability : Enum {
    public int value__;
    public static LlvmIrWritability Constant;
    public static LlvmIrWritability Writable;
}
[ExtensionAttribute]
internal static class Xamarin.Android.Tasks.LLVMIR.MemberInfoUtilities : object {
    [ExtensionAttribute]
public static bool IsNativePointer(MemberInfo mi);
    [ExtensionAttribute]
public static bool IsNativePointerToPreallocatedBuffer(MemberInfo mi, UInt64& requiredBufferSize);
    [ExtensionAttribute]
public static bool PointsToSymbol(MemberInfo mi, String& symbolName);
    [ExtensionAttribute]
public static bool ShouldBeIgnored(MemberInfo mi);
    [ExtensionAttribute]
public static bool UsesDataProvider(MemberInfo mi);
    [ExtensionAttribute]
public static bool IsInlineArray(MemberInfo mi);
    [ExtensionAttribute]
public static int GetInlineArraySize(MemberInfo mi);
    [ExtensionAttribute]
public static bool InlineArrayNeedsPadding(MemberInfo mi);
}
internal enum Xamarin.Android.Tasks.LLVMIR.MemoryAttributeAccessKind : Enum {
    public int value__;
    public static MemoryAttributeAccessKind None;
    public static MemoryAttributeAccessKind Read;
    public static MemoryAttributeAccessKind Write;
    public static MemoryAttributeAccessKind ReadWrite;
}
internal class Xamarin.Android.Tasks.LLVMIR.MemoryFunctionAttribute : LlvmIrFunctionAttribute {
    [CompilerGeneratedAttribute]
private Nullable`1<MemoryAttributeAccessKind> <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MemoryAttributeAccessKind> <Argmem>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MemoryAttributeAccessKind> <InaccessibleMem>k__BackingField;
    public Nullable`1<MemoryAttributeAccessKind> Default { get; public set; }
    public Nullable`1<MemoryAttributeAccessKind> Argmem { get; public set; }
    public Nullable`1<MemoryAttributeAccessKind> InaccessibleMem { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<MemoryAttributeAccessKind> get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(Nullable`1<MemoryAttributeAccessKind> value);
    [CompilerGeneratedAttribute]
public Nullable`1<MemoryAttributeAccessKind> get_Argmem();
    [CompilerGeneratedAttribute]
public void set_Argmem(Nullable`1<MemoryAttributeAccessKind> value);
    [CompilerGeneratedAttribute]
public Nullable`1<MemoryAttributeAccessKind> get_InaccessibleMem();
    [CompilerGeneratedAttribute]
public void set_InaccessibleMem(Nullable`1<MemoryAttributeAccessKind> value);
    protected virtual bool HasOptionalParams();
    protected virtual void RenderParams(StringBuilder sb);
    private string GetAccessKindString(Nullable`1<MemoryAttributeAccessKind> kind);
    public virtual bool Equals(LlvmIrFunctionAttribute other);
    [CompilerGeneratedAttribute]
internal static void <RenderParams>g__AppendParam|14_0(string text, <>c__DisplayClass14_0& );
}
internal class Xamarin.Android.Tasks.LLVMIR.MinLegalVectorWidthFunctionAttribute : LlvmIrFunctionAttribute {
    private UInt32 size;
    public MinLegalVectorWidthFunctionAttribute(UInt32 size);
    protected virtual void RenderAssignedValue(StringBuilder sb);
    public virtual bool Equals(LlvmIrFunctionAttribute other);
    public virtual int GetHashCode();
}
internal class Xamarin.Android.Tasks.LLVMIR.MinsizeFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.MustprogressFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.NakedFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
[AttributeUsageAttribute("384")]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
internal class Xamarin.Android.Tasks.LLVMIR.NativePointerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <PointsToPreAllocatedBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <PreAllocatedBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PointsToSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    public bool PointsToPreAllocatedBuffer { get; public set; }
    public ulong PreAllocatedBufferSize { get; public set; }
    public string PointsToSymbol { get; public set; }
    public bool IsNull { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_PointsToPreAllocatedBuffer();
    [CompilerGeneratedAttribute]
public void set_PointsToPreAllocatedBuffer(bool value);
    [CompilerGeneratedAttribute]
public ulong get_PreAllocatedBufferSize();
    [CompilerGeneratedAttribute]
public void set_PreAllocatedBufferSize(ulong value);
    [CompilerGeneratedAttribute]
public string get_PointsToSymbol();
    [CompilerGeneratedAttribute]
public void set_PointsToSymbol(string value);
    [CompilerGeneratedAttribute]
public bool get_IsNull();
    [CompilerGeneratedAttribute]
public void set_IsNull(bool value);
}
internal class Xamarin.Android.Tasks.LLVMIR.NobuiltinFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.NocallbackFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.NocfCheckFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.NoduplicateFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.NofreeFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.NoimplicitfloatFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.NoinlineFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.NoInlineLineTablesFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.NoJumpTablesFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.NomergeFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.NonlazybindFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.NoprofileFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.NorecurseFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.NoredzoneFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.NoreturnFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.NosanitizeBoundsFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.NosanitizeCoverageFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.NoStackArgProbeFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.NosyncFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.NoTrappingMathFunctionAttribute : LlvmIrFunctionAttribute {
    private bool yesno;
    public NoTrappingMathFunctionAttribute(bool yesno);
    protected virtual void RenderAssignedValue(StringBuilder sb);
    public virtual bool Equals(LlvmIrFunctionAttribute other);
    public virtual int GetHashCode();
}
internal class Xamarin.Android.Tasks.LLVMIR.NounwindFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.NullPointerIsValidFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.OptforfuzzingFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.OptnoneFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.OptsizeFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.PatchableFunctionFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.ProbeStackFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.ReadnoneFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.ReadonlyFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.ReturnsTwiceFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.SafestackFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.SanitizeAddressFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.SanitizeHwaddressFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.SanitizeMemoryFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.SanitizeMemtagFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.SanitizeThreadFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.ShadowcallstackFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.SpeculatableFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.SpeculativeLoadHardeningFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.SspFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.SspreqFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.SspstrongFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.StackProbeSizeFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.StackProtectorBufferSizeFunctionAttribute : LlvmIrFunctionAttribute {
    private UInt32 size;
    public StackProtectorBufferSizeFunctionAttribute(UInt32 size);
    protected virtual void RenderAssignedValue(StringBuilder sb);
    public virtual bool Equals(LlvmIrFunctionAttribute other);
    public virtual int GetHashCode();
}
internal class Xamarin.Android.Tasks.LLVMIR.StackrealignFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.StrictfpFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.StructureInfo : object {
    private Type type;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<StructureMemberInfo> <Members>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NativeAssemblerStructContextDataProvider <DataProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <MaxFieldAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasPreAllocatedBuffers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasPointers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NativeTypeDesignator>k__BackingField;
    public Type Type { get; }
    public string Name { get; }
    public ulong Size { get; }
    public IList`1<StructureMemberInfo> Members { get; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public NativeAssemblerStructContextDataProvider DataProvider { get; }
    public ulong MaxFieldAlignment { get; private set; }
    public bool HasStrings { get; private set; }
    public bool HasPreAllocatedBuffers { get; private set; }
    public bool HasPointers { get; private set; }
    public bool IsOpaque { get; }
    public string NativeTypeDesignator { get; }
    public StructureInfo(LlvmIrModule module, Type type);
    public Type get_Type();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public ulong get_Size();
    [CompilerGeneratedAttribute]
public IList`1<StructureMemberInfo> get_Members();
    [CompilerGeneratedAttribute]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public NativeAssemblerStructContextDataProvider get_DataProvider();
    [CompilerGeneratedAttribute]
public ulong get_MaxFieldAlignment();
    [CompilerGeneratedAttribute]
private void set_MaxFieldAlignment(ulong value);
    [CompilerGeneratedAttribute]
public bool get_HasStrings();
    [CompilerGeneratedAttribute]
private void set_HasStrings(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasPreAllocatedBuffers();
    [CompilerGeneratedAttribute]
private void set_HasPreAllocatedBuffers(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasPointers();
    [CompilerGeneratedAttribute]
private void set_HasPointers(bool value);
    public bool get_IsOpaque();
    [CompilerGeneratedAttribute]
public string get_NativeTypeDesignator();
    public string GetCommentFromProvider(StructureMemberInfo smi, StructureInstance instance);
    public ulong GetBufferSizeFromProvider(StructureMemberInfo smi, StructureInstance instance);
    private ulong GatherMembers(Type type, LlvmIrModule module, bool storeMembers);
}
internal abstract class Xamarin.Android.Tasks.LLVMIR.StructureInstance : object {
    private StructureInfo info;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Obj>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <IndexInArray>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsZeroInitialized>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public object Obj { get; }
    public Type Type { get; }
    public StructureInfo Info { get; }
    internal ulong IndexInArray { get; internal set; }
    public bool IsZeroInitialized { get; public set; }
    protected StructureInstance(StructureInfo info, object instance);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Obj();
    public Type get_Type();
    public StructureInfo get_Info();
    [CompilerGeneratedAttribute]
internal ulong get_IndexInArray();
    [CompilerGeneratedAttribute]
internal void set_IndexInArray(ulong value);
    [CompilerGeneratedAttribute]
public bool get_IsZeroInitialized();
    [CompilerGeneratedAttribute]
public void set_IsZeroInitialized(bool value);
}
internal class Xamarin.Android.Tasks.LLVMIR.StructureInstance`1 : StructureInstance {
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public T Instance { get; }
    public StructureInstance`1(StructureInfo info, T instance);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public T get_Instance();
}
internal class Xamarin.Android.Tasks.LLVMIR.StructureMemberInfo : object {
    [CompilerGeneratedAttribute]
private string <IRType>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <MemberType>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Alignment>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ArrayElements>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <BaseTypeSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNativePointer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNativeArray>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInlineArray>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedsPadding>k__BackingField;
    public string IRType { get; }
    public MemberInfo Info { get; }
    public Type MemberType { get; }
    public ulong Size { get; }
    public ulong Alignment { get; }
    public ulong ArrayElements { get; }
    public ulong BaseTypeSize { get; }
    public bool IsNativePointer { get; }
    public bool IsNativeArray { get; }
    public bool IsInlineArray { get; }
    public bool NeedsPadding { get; }
    public StructureMemberInfo(MemberInfo mi, LlvmIrModule module);
    [CompilerGeneratedAttribute]
public string get_IRType();
    [CompilerGeneratedAttribute]
public MemberInfo get_Info();
    [CompilerGeneratedAttribute]
public Type get_MemberType();
    [CompilerGeneratedAttribute]
public ulong get_Size();
    [CompilerGeneratedAttribute]
public ulong get_Alignment();
    [CompilerGeneratedAttribute]
public ulong get_ArrayElements();
    [CompilerGeneratedAttribute]
public ulong get_BaseTypeSize();
    [CompilerGeneratedAttribute]
public bool get_IsNativePointer();
    [CompilerGeneratedAttribute]
public bool get_IsNativeArray();
    [CompilerGeneratedAttribute]
public bool get_IsInlineArray();
    [CompilerGeneratedAttribute]
public bool get_NeedsPadding();
    public object GetValue(object instance);
    private int GetArraySizeFromProvider(NativeAssemblerStructContextDataProvider provider, string fieldName);
}
internal class Xamarin.Android.Tasks.LLVMIR.TargetCpuFunctionAttribute : LlvmIrFunctionAttribute {
    private string cpu;
    public TargetCpuFunctionAttribute(string cpu);
    protected virtual void RenderAssignedValue(StringBuilder sb);
    public virtual bool Equals(LlvmIrFunctionAttribute other);
    public virtual int GetHashCode();
}
internal class Xamarin.Android.Tasks.LLVMIR.TargetFeaturesFunctionAttribute : LlvmIrFunctionAttribute {
    private string features;
    public TargetFeaturesFunctionAttribute(string features);
    protected virtual void RenderAssignedValue(StringBuilder sb);
    public virtual bool Equals(LlvmIrFunctionAttribute other);
    public virtual int GetHashCode();
}
internal class Xamarin.Android.Tasks.LLVMIR.ThunkFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.TlsLoadHoistFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.TuneCpuFunctionAttribute : LlvmIrFunctionAttribute {
    private string cpu;
    public TuneCpuFunctionAttribute(string cpu);
    protected virtual void RenderAssignedValue(StringBuilder sb);
    public virtual bool Equals(LlvmIrFunctionAttribute other);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
internal static class Xamarin.Android.Tasks.LLVMIR.TypeUtilities : object {
    [ExtensionAttribute]
public static string GetShortName(Type type);
    [ExtensionAttribute]
public static bool IsStructure(Type type);
    [ExtensionAttribute]
public static bool IsIRStruct(StructureMemberInfo smi);
    [ExtensionAttribute]
public static NativeAssemblerStructContextDataProvider GetDataProvider(Type t);
    [ExtensionAttribute]
public static bool IsNativeClass(Type t);
    [ExtensionAttribute]
public static bool ImplementsInterface(Type type, Type requiredIfaceType);
    [ExtensionAttribute]
public static bool IsStructureInstance(Type type, Type& structureType);
    [ExtensionAttribute]
public static Type GetArrayElementType(Type type);
    [ExtensionAttribute]
public static bool IsArray(Type t);
    [CompilerGeneratedAttribute]
internal static Exception <GetArrayElementType>g__WrongTypeException|7_0(<>c__DisplayClass7_0& );
}
internal class Xamarin.Android.Tasks.LLVMIR.UwtableFunctionAttribute : LlvmIrFunctionAttribute {
    private Nullable`1<bool> isSync;
    public UwtableFunctionAttribute(Nullable`1<bool> sync);
    protected virtual bool HasOptionalParams();
    protected virtual void RenderParams(StringBuilder sb);
    public virtual bool Equals(LlvmIrFunctionAttribute other);
    public virtual int GetHashCode();
}
internal class Xamarin.Android.Tasks.LLVMIR.VscaleRangeFunctionAttribute : LlvmIrFunctionAttribute {
    private UInt32 min;
    private Nullable`1<UInt32> max;
    public VscaleRangeFunctionAttribute(UInt32 min, Nullable`1<UInt32> max);
    protected virtual void RenderParams(StringBuilder sb);
    public virtual bool Equals(LlvmIrFunctionAttribute other);
    public virtual int GetHashCode();
}
internal class Xamarin.Android.Tasks.LLVMIR.WarnStackSizeFunctionAttribute : LlvmIrFunctionAttribute {
    private UInt32 threshold;
    public WarnStackSizeFunctionAttribute(UInt32 threshold);
    protected virtual void RenderAssignedValue(StringBuilder sb);
    public virtual bool Equals(LlvmIrFunctionAttribute other);
    public virtual int GetHashCode();
}
internal class Xamarin.Android.Tasks.LLVMIR.WillreturnFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
internal class Xamarin.Android.Tasks.LLVMIR.WriteonlyFunctionAttribute : LlvmIrFlagFunctionAttribute {
}
public class Xamarin.Android.Tasks.LogErrorsForFiles : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubCategory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpKeyword>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] Files { get; public set; }
    [RequiredAttribute]
public string Code { get; public set; }
    [RequiredAttribute]
public string Text { get; public set; }
    public string SubCategory { get; public set; }
    public string HelpKeyword { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_SubCategory();
    [CompilerGeneratedAttribute]
public void set_SubCategory(string value);
    [CompilerGeneratedAttribute]
public string get_HelpKeyword();
    [CompilerGeneratedAttribute]
public void set_HelpKeyword(string value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.LogWarningsForFiles : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubCategory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpKeyword>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] Files { get; public set; }
    [RequiredAttribute]
public string Code { get; public set; }
    [RequiredAttribute]
public string Text { get; public set; }
    public string SubCategory { get; public set; }
    public string HelpKeyword { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_SubCategory();
    [CompilerGeneratedAttribute]
public void set_SubCategory(string value);
    [CompilerGeneratedAttribute]
public string get_HelpKeyword();
    [CompilerGeneratedAttribute]
public void set_HelpKeyword(string value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.MakeBundleNativeCodeExternal : AndroidTask {
    private static string BundleSharedLibraryName;
    [CompilerGeneratedAttribute]
private string <AndroidNdkDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SupportedAbis>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TempOutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IncludePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoDeps>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmbedDebugSymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepTemp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BundleApiPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <OutputNativeLibraries>k__BackingField;
    public string TaskPrefix { get; }
    public string AndroidNdkDirectory { get; public set; }
    [RequiredAttribute]
public ITaskItem[] Assemblies { get; public set; }
    [RequiredAttribute]
public String[] SupportedAbis { get; public set; }
    [RequiredAttribute]
public string TempOutputPath { get; public set; }
    public string IncludePath { get; public set; }
    [RequiredAttribute]
public string ToolPath { get; public set; }
    public bool AutoDeps { get; public set; }
    public bool EmbedDebugSymbols { get; public set; }
    public bool KeepTemp { get; public set; }
    [RequiredAttribute]
public string BundleApiPath { get; public set; }
    [OutputAttribute]
public ITaskItem[] OutputNativeLibraries { get; public set; }
    private string MkbundlePath { get; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_AndroidNdkDirectory();
    [CompilerGeneratedAttribute]
public void set_AndroidNdkDirectory(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Assemblies();
    [CompilerGeneratedAttribute]
public void set_Assemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public String[] get_SupportedAbis();
    [CompilerGeneratedAttribute]
public void set_SupportedAbis(String[] value);
    [CompilerGeneratedAttribute]
public string get_TempOutputPath();
    [CompilerGeneratedAttribute]
public void set_TempOutputPath(string value);
    [CompilerGeneratedAttribute]
public string get_IncludePath();
    [CompilerGeneratedAttribute]
public void set_IncludePath(string value);
    [CompilerGeneratedAttribute]
public string get_ToolPath();
    [CompilerGeneratedAttribute]
public void set_ToolPath(string value);
    [CompilerGeneratedAttribute]
public bool get_AutoDeps();
    [CompilerGeneratedAttribute]
public void set_AutoDeps(bool value);
    [CompilerGeneratedAttribute]
public bool get_EmbedDebugSymbols();
    [CompilerGeneratedAttribute]
public void set_EmbedDebugSymbols(bool value);
    [CompilerGeneratedAttribute]
public bool get_KeepTemp();
    [CompilerGeneratedAttribute]
public void set_KeepTemp(bool value);
    [CompilerGeneratedAttribute]
public string get_BundleApiPath();
    [CompilerGeneratedAttribute]
public void set_BundleApiPath(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_OutputNativeLibraries();
    [CompilerGeneratedAttribute]
public void set_OutputNativeLibraries(ITaskItem[] value);
    public virtual bool RunTask();
    private bool DoExecute(NdkTools ndk);
    private void OnCcOutputData(object sender, DataReceivedEventArgs e);
    private void OnCcErrorData(object sender, DataReceivedEventArgs e);
    private void OnLdOutputData(object sender, DataReceivedEventArgs e);
    private void OnLdErrorData(object sender, DataReceivedEventArgs e);
    private void OnMkbundleOutputData(object sender, DataReceivedEventArgs e);
    private void OnMkbundleErrorData(object sender, DataReceivedEventArgs e);
    private string get_MkbundlePath();
}
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("1")]
internal class Xamarin.Android.Tasks.MamJsonParser : object {
    private Action`2<TraceLevel, string> Logger;
    public Dictionary`2<string, string> ReplacementTypes;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<ValueTuple`3<string, string, string>, ValueTuple`5<string, string, string, Nullable`1<int>, bool>> ReplacementMethods;
    public MamJsonParser(Action`2<TraceLevel, string> logger);
    public void Load(string jsonPath);
    public XElement ToXml();
    private static JObject ReadJson(string path);
    private void ReadClassRewrites(JToken classRewrites);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
private bool TryReadClassFromTo(JToken token, String& from, String& to);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
private string ReadSignature(JToken token);
    private string JavaToJniType(string javaType);
    private StringBuilder JavaToJniType(StringBuilder javaType);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
private string JavaToJniTypeSignature(string javaType);
    private void ReadGlobalMethodCalls(JToken globalMethodCalls);
    [IteratorStateMachineAttribute("Xamarin.Android.Tasks.MamJsonParser/<GetReplacementTypes>d__14")]
private IEnumerable`1<XElement> GetReplacementTypes();
    [IteratorStateMachineAttribute("Xamarin.Android.Tasks.MamJsonParser/<GetReplacementMethods>d__15")]
private IEnumerable`1<XElement> GetReplacementMethods();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
private XAttribute CreateAttribute(string name, string value);
}
public class Xamarin.Android.Tasks.MamJsonToXml : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <MappingFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <XmlMappingOutput>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] MappingFiles { get; public set; }
    [RequiredAttribute]
public ITaskItem XmlMappingOutput { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_MappingFiles();
    [CompilerGeneratedAttribute]
public void set_MappingFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem get_XmlMappingOutput();
    [CompilerGeneratedAttribute]
public void set_XmlMappingOutput(ITaskItem value);
    public virtual bool RunTask();
}
internal class Xamarin.Android.Tasks.ManagedResourceParser : FileResourceParser {
    private CodeTypeDeclaration resources;
    private CodeTypeDeclaration layout;
    private CodeTypeDeclaration ids;
    private CodeTypeDeclaration drawable;
    private CodeTypeDeclaration strings;
    private CodeTypeDeclaration colors;
    private CodeTypeDeclaration dimension;
    private CodeTypeDeclaration raw;
    private CodeTypeDeclaration animator;
    private CodeTypeDeclaration animation;
    private CodeTypeDeclaration attrib;
    private CodeTypeDeclaration boolean;
    private CodeTypeDeclaration font;
    private CodeTypeDeclaration ints;
    private CodeTypeDeclaration interpolators;
    private CodeTypeDeclaration menu;
    private CodeTypeDeclaration mipmaps;
    private CodeTypeDeclaration plurals;
    private CodeTypeDeclaration styleable;
    private CodeTypeDeclaration style;
    private CodeTypeDeclaration arrays;
    private CodeTypeDeclaration xml;
    private CodeTypeDeclaration transition;
    private Dictionary`2<string, string> map;
    private bool app;
    private SortedDictionary`2<string, CodeTypeDeclaration> custom_types;
    private List`1<CodeTypeDeclaration> declarationIds;
    private List`1<CodeTypeDeclaration> typeIds;
    private Dictionary`2<CodeMemberField, CodeMemberField[]> arrayMapping;
    private static string itemPackageId;
    private static CompareTuple compareTuple;
    private XDocument publicXml;
    private Dictionary`2<string, CodeTypeDeclaration> classMapping;
    private HashSet`1<string> resourceNamesToUseDirectly;
    private static ManagedResourceParser();
    private void SortMembers(CodeTypeDeclaration decl, StringComparison stringComparison);
    private IEnumerable`1<CodeTypeMember> SortedMembers(CodeTypeDeclaration decl, StringComparer comparer);
    public CodeTypeDeclaration Parse(string resourceDirectory, string rTxtFile, IEnumerable`1<string> additionalResourceDirectories, bool isApp, Dictionary`2<string, string> resourceMap);
    private void ProcessRtxtFile(string file);
    private void ProcessResourceFile(string file);
    private CodeTypeDeclaration CreateResourceClass();
    private CodeTypeDeclaration CreateClass(string type);
    private void CreateField(CodeTypeDeclaration parentType, string name, Type type);
    private CodeMemberField CreateIntField(CodeTypeDeclaration parentType, string name, int value);
    private CodeMemberField CreateIntArrayField(CodeTypeDeclaration parentType, string name, int count, Int32[] values);
    private void CreateResourceField(string root, string fieldName, XmlReader element);
    private void ProcessStyleable(XmlReader reader);
    private void ProcessXmlFile(string file);
}
internal class Xamarin.Android.Tasks.ManifestDocument : object {
    public static XNamespace AndroidXmlNamespace;
    public static XNamespace AndroidXmlToolsNamespace;
    private static int maxVersionCode;
    private static XNamespace androidNs;
    private static XNamespace androidToolsNs;
    private static XName versionCodeAttributeName;
    private XDocument doc;
    private XName attName;
    private XElement app;
    private static Dictionary`2<string, String[]> ManifestAttributeFixups;
    private static Dictionary`2<string, string> LauncherIntentElements;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Placeholders>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyResolver <Resolver>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SdkDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetSdkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinSdkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultiDex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedsInternet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InstantRunEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceExtractNativeLibs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceDebuggable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionName>k__BackingField;
    private string versionCode;
    private int AppInitOrder;
    public string PackageName { get; public set; }
    public string ApplicationLabel { get; public set; }
    public String[] Placeholders { get; public set; }
    public List`1<string> Assemblies { get; public set; }
    public IAssemblyResolver Resolver { get; public set; }
    public string SdkDir { get; public set; }
    public string TargetSdkVersion { get; public set; }
    public string MinSdkVersion { get; public set; }
    public bool Debug { get; public set; }
    public bool MultiDex { get; public set; }
    public bool NeedsInternet { get; public set; }
    public bool InstantRunEnabled { get; public set; }
    public bool ForceExtractNativeLibs { get; public set; }
    public bool ForceDebuggable { get; public set; }
    public string VersionName { get; public set; }
    public string VersionCode { get; public set; }
    public bool HasVersionCode { get; }
    private string TargetSdkVersionName { get; }
    private string MinSdkVersionName { get; }
    public ManifestDocument(string templateFilename);
    private static ManifestDocument();
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationLabel();
    [CompilerGeneratedAttribute]
public void set_ApplicationLabel(string value);
    [CompilerGeneratedAttribute]
public String[] get_Placeholders();
    [CompilerGeneratedAttribute]
public void set_Placeholders(String[] value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Assemblies();
    [CompilerGeneratedAttribute]
public void set_Assemblies(List`1<string> value);
    [CompilerGeneratedAttribute]
public IAssemblyResolver get_Resolver();
    [CompilerGeneratedAttribute]
public void set_Resolver(IAssemblyResolver value);
    [CompilerGeneratedAttribute]
public string get_SdkDir();
    [CompilerGeneratedAttribute]
public void set_SdkDir(string value);
    [CompilerGeneratedAttribute]
public string get_TargetSdkVersion();
    [CompilerGeneratedAttribute]
public void set_TargetSdkVersion(string value);
    [CompilerGeneratedAttribute]
public string get_MinSdkVersion();
    [CompilerGeneratedAttribute]
public void set_MinSdkVersion(string value);
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public bool get_MultiDex();
    [CompilerGeneratedAttribute]
public void set_MultiDex(bool value);
    [CompilerGeneratedAttribute]
public bool get_NeedsInternet();
    [CompilerGeneratedAttribute]
public void set_NeedsInternet(bool value);
    [CompilerGeneratedAttribute]
public bool get_InstantRunEnabled();
    [CompilerGeneratedAttribute]
public void set_InstantRunEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForceExtractNativeLibs();
    [CompilerGeneratedAttribute]
public void set_ForceExtractNativeLibs(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForceDebuggable();
    [CompilerGeneratedAttribute]
public void set_ForceDebuggable(bool value);
    [CompilerGeneratedAttribute]
public string get_VersionName();
    [CompilerGeneratedAttribute]
public void set_VersionName(string value);
    public string get_VersionCode();
    public void set_VersionCode(string value);
    public bool get_HasVersionCode();
    private string TryParseMinSdkVersionName();
    public string GetMinimumSdk();
    public string GetTargetSdk();
    private string get_TargetSdkVersionName();
    private string get_MinSdkVersionName();
    private string ToFullyQualifiedName(string typeName);
    private XElement GetActivityWithName(XElement app, string name);
    private void InjectAutoGeneratedComment(XElement root, string templateFilename);
    private void ReorderElements(XElement app);
    private void ReorderActivityAliases(TaskLoggingHelper log, XElement app);
    public IList`1<string> Merge(TaskLoggingHelper log, TypeDefinitionCache cache, List`1<JavaType> subclasses, string applicationClass, bool embed, string bundledWearApplicationName, IEnumerable`1<string> mergedManifestDocuments);
    private ValueTuple`2<string, string> GetNames(TypeDefinition type, TypeDefinitionCache cache);
    private void MergeLibraryManifest(string mergedManifest);
    [IteratorStateMachineAttribute("Xamarin.Android.Tasks.ManifestDocument/<ResolveDuplicates>d__93")]
public IEnumerable`1<XElement> ResolveDuplicates(IEnumerable`1<XElement> elements);
    private void RemoveDuplicateElements();
    private void RemoveNodes();
    private IEnumerable`1<XNode> FixupNameElements(string packageName, IEnumerable`1<XNode> nodes);
    private Func`5<TypeDefinition, string, TypeDefinitionCache, int, XElement> GetGenerator(TypeDefinition type, TypeDefinitionCache cache);
    private XElement CreateApplicationElement(XElement manifest, string applicationClass, List`1<JavaType> subclasses, TypeDefinitionCache cache);
    private IList`1<string> AddMonoRuntimeProviders(XElement app);
    private XElement CreateMonoRuntimeProvider(string name, string processName, int initOrder);
    private bool IsMainLauncher(XElement intentFilter);
    public bool DirectBootAware();
    private XElement ActivityFromTypeDefinition(TypeDefinition type, string name, TypeDefinitionCache cache, int targetSdkVersion);
    private XElement InstrumentationFromTypeDefinition(TypeDefinition type, string name, TypeDefinitionCache cache);
    private XElement ToElement(TypeDefinition type, string name, Func`2<TypeDefinition, TAttribute> parser, Func`2<TAttribute, XElement> toElement, TypeDefinitionCache cache);
    private XElement ToElement(TypeDefinition type, string name, Func`2<TypeDefinition, TAttribute> parser, Func`2<TAttribute, XElement> toElement, Action`2<TAttribute, XElement> update, TypeDefinitionCache cache);
    private XElement ToProviderElement(TypeDefinition type, string name, TypeDefinitionCache cache);
    private void AddLauncherIntentElements(XElement activity);
    public void AddInternetPermissionForDebugger();
    private void AddPermissions(XElement application, TypeDefinitionCache cache);
    private void AddPermissionGroups(XElement application, TypeDefinitionCache cache);
    private void AddPermissionTrees(XElement application, TypeDefinitionCache cache);
    private void AddUsesPermissions(XElement application, TypeDefinitionCache cache);
    private void AddUsesConfigurations(XElement application, IEnumerable`1<UsesConfigurationAttribute> configs, TypeDefinitionCache cache);
    private void AddUsesLibraries(XElement application, IEnumerable`1<UsesLibraryAttribute> libraries, TypeDefinitionCache cache);
    private void AddUsesFeatures(XElement application, TypeDefinitionCache cache);
    private void AddSupportsGLTextures(XElement application, TypeDefinitionCache cache);
    private void AddInstrumentations(XElement manifest, IList`1<JavaType> subclasses, int targetSdkVersion, TypeDefinitionCache cache);
    public bool SaveIfChanged(TaskLoggingHelper log, string filename);
    public void Save(TaskLoggingHelper log, string filename);
    public void Save(Action`2<string, string> logCodedWarning, string filename);
    public void Save(TaskLoggingHelper log, Stream stream, bool removeNodes);
    public void Save(Action`2<string, string> logCodedWarning, Stream stream, bool removeNodes);
    public void Save(Action`2<string, string> logCodedWarning, TextWriter stream, bool removeNodes);
    public string GetLaunchableActivityName();
    private static int GetAbiCode(string abi);
    internal static string ReplacePlaceholders(String[] placeholders, string text, Action`2<string, string> logCodedWarning);
    public void SetAbi(string abi);
    public bool ValidateVersionCode(String& error, String& errorCode);
    public void CalculateVersionCode(string currentAbi, string versionCodePattern, string versionCodeProperties);
    [CompilerGeneratedAttribute]
internal static SequencePoint <Merge>g__FindSource|90_3(IEnumerable`1<MethodDefinition> methods);
    [CompilerGeneratedAttribute]
private XElement <GetGenerator>b__97_0(TypeDefinition t, string name, TypeDefinitionCache c, int v);
    [CompilerGeneratedAttribute]
private XElement <GetGenerator>b__97_1(TypeDefinition t, string name, TypeDefinitionCache c, int v);
    [CompilerGeneratedAttribute]
private XElement <GetGenerator>b__97_2(TypeDefinition t, string name, TypeDefinitionCache c, int v);
    [CompilerGeneratedAttribute]
private bool <AddLauncherIntentElements>b__109_0(XElement f);
    [CompilerGeneratedAttribute]
private bool <AddInternetPermissionForDebugger>b__110_0(XElement x);
    [CompilerGeneratedAttribute]
private IEnumerable`1<PermissionAttribute> <AddPermissions>b__111_0(string path);
    [CompilerGeneratedAttribute]
private IEnumerable`1<PermissionGroupAttribute> <AddPermissionGroups>b__112_0(string path);
    [CompilerGeneratedAttribute]
private IEnumerable`1<PermissionTreeAttribute> <AddPermissionTrees>b__113_0(string path);
    [CompilerGeneratedAttribute]
private IEnumerable`1<UsesPermissionAttribute> <AddUsesPermissions>b__114_0(string path);
    [CompilerGeneratedAttribute]
private IEnumerable`1<UsesFeatureAttribute> <AddUsesFeatures>b__117_0(string path);
    [CompilerGeneratedAttribute]
private IEnumerable`1<SupportsGLTextureAttribute> <AddSupportsGLTextures>b__118_0(string path);
    [CompilerGeneratedAttribute]
private IEnumerable`1<InstrumentationAttribute> <AddInstrumentations>b__119_0(string path);
}
public class Xamarin.Android.Tasks.ManifestMerger : JavaToolTask {
    [CompilerGeneratedAttribute]
private string <ManifestMergerJarPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputManifestFile>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ManifestOverlayFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <LibraryManifestFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ManifestPlaceholders>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtraArgs>k__BackingField;
    private static Regex manifestErrorRegEx;
    private string tempFile;
    private string responseFile;
    public string TaskPrefix { get; }
    public string DefaultErrorCode { get; }
    [RequiredAttribute]
public string ManifestMergerJarPath { get; public set; }
    [RequiredAttribute]
public string AndroidManifest { get; public set; }
    [RequiredAttribute]
public string OutputManifestFile { get; public set; }
    public String[] ManifestOverlayFiles { get; public set; }
    public String[] LibraryManifestFiles { get; public set; }
    public String[] ManifestPlaceholders { get; public set; }
    public string ExtraArgs { get; public set; }
    protected Regex CodeErrorRegEx { get; }
    private static ManifestMerger();
    public virtual string get_TaskPrefix();
    public virtual string get_DefaultErrorCode();
    [CompilerGeneratedAttribute]
public string get_ManifestMergerJarPath();
    [CompilerGeneratedAttribute]
public void set_ManifestMergerJarPath(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidManifest();
    [CompilerGeneratedAttribute]
public void set_AndroidManifest(string value);
    [CompilerGeneratedAttribute]
public string get_OutputManifestFile();
    [CompilerGeneratedAttribute]
public void set_OutputManifestFile(string value);
    [CompilerGeneratedAttribute]
public String[] get_ManifestOverlayFiles();
    [CompilerGeneratedAttribute]
public void set_ManifestOverlayFiles(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_LibraryManifestFiles();
    [CompilerGeneratedAttribute]
public void set_LibraryManifestFiles(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ManifestPlaceholders();
    [CompilerGeneratedAttribute]
public void set_ManifestPlaceholders(String[] value);
    [CompilerGeneratedAttribute]
public string get_ExtraArgs();
    [CompilerGeneratedAttribute]
public void set_ExtraArgs(string value);
    protected virtual Regex get_CodeErrorRegEx();
    protected virtual void GetLineNumber(string match, Int32& line, Int32& column);
    public virtual bool Execute();
    protected virtual string GenerateCommandLineCommands();
    protected virtual CommandLineBuilder GetCommandLineBuilder();
}
internal class Xamarin.Android.Tasks.MarshalMethodEntry : object {
    private MethodDefinition nativeCallbackReal;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MethodDefinition <NativeCallbackWrapper>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeDefinition <DeclaringType>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MethodDefinition <Connector>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private MethodDefinition <RegisteredMethod>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private MethodDefinition <ImplementedMethod>k__BackingField;
    [CompilerGeneratedAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private FieldDefinition <CallbackField>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JniTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JniMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JniMethodSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedsBlittableWorkaround>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSpecial>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public MethodDefinition NativeCallbackWrapper { get; public set; }
    public TypeDefinition DeclaringType { get; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public MethodDefinition Connector { get; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public MethodDefinition RegisteredMethod { get; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public MethodDefinition ImplementedMethod { get; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
public FieldDefinition CallbackField { get; }
    public string JniTypeName { get; }
    public string JniMethodName { get; }
    public string JniMethodSignature { get; }
    public bool NeedsBlittableWorkaround { get; }
    public MethodDefinition NativeCallback { get; }
    public bool IsSpecial { get; }
    public MarshalMethodEntry(TypeDefinition declaringType, MethodDefinition nativeCallback, MethodDefinition connector, MethodDefinition registeredMethod, MethodDefinition implementedMethod, FieldDefinition callbackField, string jniTypeName, string jniName, string jniSignature, bool needsBlittableWorkaround);
    public MarshalMethodEntry(TypeDefinition declaringType, MethodDefinition nativeCallback, string jniTypeName, string jniName, string jniSignature);
    public MarshalMethodEntry(MarshalMethodEntry other, MethodDefinition nativeCallback);
    [CompilerGeneratedAttribute]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public MethodDefinition get_NativeCallbackWrapper();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_NativeCallbackWrapper(MethodDefinition value);
    [CompilerGeneratedAttribute]
public TypeDefinition get_DeclaringType();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public MethodDefinition get_Connector();
    [CompilerGeneratedAttribute]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public MethodDefinition get_RegisteredMethod();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public MethodDefinition get_ImplementedMethod();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public FieldDefinition get_CallbackField();
    [CompilerGeneratedAttribute]
public string get_JniTypeName();
    [CompilerGeneratedAttribute]
public string get_JniMethodName();
    [CompilerGeneratedAttribute]
public string get_JniMethodSignature();
    [CompilerGeneratedAttribute]
public bool get_NeedsBlittableWorkaround();
    public MethodDefinition get_NativeCallback();
    [CompilerGeneratedAttribute]
public bool get_IsSpecial();
    private string EnsureNonEmpty(string s, string argName);
}
internal class Xamarin.Android.Tasks.MarshalMethodsAssemblyRewriter : object {
    private IDictionary`2<string, IList`1<MarshalMethodEntry>> methods;
    private ICollection`1<AssemblyDefinition> uniqueAssemblies;
    private IDictionary`2<AssemblyDefinition, string> assemblyPaths;
    private TaskLoggingHelper log;
    public MarshalMethodsAssemblyRewriter(IDictionary`2<string, IList`1<MarshalMethodEntry>> methods, ICollection`1<AssemblyDefinition> uniqueAssemblies, IDictionary`2<AssemblyDefinition, string> assemblyPaths, TaskLoggingHelper log);
    public void Rewrite(XAAssemblyResolver resolver, bool brokenExceptionTransitions);
    private MethodDefinition GenerateWrapper(MarshalMethodEntry method, Dictionary`2<AssemblyDefinition, AssemblyImports> assemblyImports, bool brokenExceptionTransitions);
    private void AddSetDefaultValueInstructions(MethodBody body, TypeReference type, VariableDefinition retval);
    private Instruction GetLoadArgInstruction(UInt32 nparam, ParameterDefinition pdef);
    private TypeReference MapToBlittableTypeIfNecessary(TypeReference type, Boolean& typeMapped);
    private string GetAssemblyPath(AssemblyDefinition asm);
    private MethodDefinition GetUnmanagedCallersOnlyAttributeConstructor(XAAssemblyResolver resolver);
    private CustomAttribute CreateImportedUnmanagedCallersOnlyAttribute(AssemblyDefinition targetAssembly, MethodDefinition unmanagedCallersOnlyAtributeCtor);
    private MethodDefinition FindMethod(TypeDefinition type, string methodName, bool required);
    private TypeDefinition FindType(AssemblyDefinition asm, string typeName, bool required);
    [CompilerGeneratedAttribute]
private void <Rewrite>g__CopyFile|6_0(string source, string target);
    [CompilerGeneratedAttribute]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
private void <Rewrite>g__RemoveFile|6_1(string path);
    [CompilerGeneratedAttribute]
internal static void <GenerateWrapper>g__GenerateNonBlittableConversion|7_0(TypeReference sourceType, TypeReference targetType, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static void <GenerateWrapper>g__GenerateRetValCast|7_1(TypeReference sourceType, TypeReference targetType, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static bool <GenerateWrapper>g__IsBooleanConversion|7_2(TypeReference sourceType, TypeReference targetType);
    [CompilerGeneratedAttribute]
internal static void <GenerateWrapper>g__ThrowUnsupportedType|7_3(TypeReference type);
    [CompilerGeneratedAttribute]
internal static TypeReference <MapToBlittableTypeIfNecessary>g__ReturnValid|10_0(Type typeToLookUp, <>c__DisplayClass10_0& );
}
internal class Xamarin.Android.Tasks.MarshalMethodsClassifier : JavaCallableMethodClassifier {
    private TypeDefinitionCache tdCache;
    private XAAssemblyResolver resolver;
    private Dictionary`2<string, IList`1<MarshalMethodEntry>> marshalMethods;
    private HashSet`1<AssemblyDefinition> assemblies;
    private TaskLoggingHelper log;
    private HashSet`1<TypeDefinition> typesWithDynamicallyRegisteredMethods;
    private ulong rejectedMethodCount;
    private ulong wrappedMethodCount;
    public IDictionary`2<string, IList`1<MarshalMethodEntry>> MarshalMethods { get; }
    public ICollection`1<AssemblyDefinition> Assemblies { get; }
    public ulong RejectedMethodCount { get; }
    public ulong WrappedMethodCount { get; }
    public MarshalMethodsClassifier(TypeDefinitionCache tdCache, XAAssemblyResolver res, TaskLoggingHelper log);
    public IDictionary`2<string, IList`1<MarshalMethodEntry>> get_MarshalMethods();
    public ICollection`1<AssemblyDefinition> get_Assemblies();
    public ulong get_RejectedMethodCount();
    public ulong get_WrappedMethodCount();
    public virtual bool ShouldBeDynamicallyRegistered(TypeDefinition topType, MethodDefinition registeredMethod, MethodDefinition implementedMethod, CustomAttribute registerAttribute);
    public bool FoundDynamicallyRegisteredMethods(TypeDefinition type);
    private void AddTypeManagerSpecialCaseMethods();
    public void AddSpecialCaseMethods();
    private bool IsDynamicallyRegistered(TypeDefinition topType, MethodDefinition registeredMethod, MethodDefinition implementedMethod, CustomAttribute registerAttribute);
    private bool IsStandardHandler(TypeDefinition topType, ConnectorInfo connector, MethodDefinition registeredMethod, MethodDefinition implementedMethod, string jniName, string jniSignature);
    private bool EnsureIsValidUnmanagedCallersOnlyTarget(MethodDefinition method, Boolean& needsBlittableWorkaround);
    private TypeDefinition FindType(AssemblyDefinition asm, string typeName);
    private MethodDefinition FindMethod(TypeDefinition type, string methodName, IMethodSignatureMatcher signatureMatcher);
    private FieldDefinition FindField(TypeDefinition type, string fieldName, bool lookForInherited);
    public string GetStoreMethodKey(MarshalMethodEntry methodEntry);
    private void StoreMethod(MarshalMethodEntry entry);
    private void StoreAssembly(AssemblyDefinition asm);
    [CompilerGeneratedAttribute]
internal static void <AddTypeManagerSpecialCaseMethods>g__ThrowMissingMethod|22_0(string name);
    [CompilerGeneratedAttribute]
private bool <AddTypeManagerSpecialCaseMethods>g__IsMatchingMethod|22_1(MethodDefinition method, string name);
    [CompilerGeneratedAttribute]
private bool <EnsureIsValidUnmanagedCallersOnlyTarget>g__UpdateWrappedCountAndReturn|26_0(bool retval, <>c__DisplayClass26_0& );
    [CompilerGeneratedAttribute]
internal static bool <EnsureIsValidUnmanagedCallersOnlyTarget>g__IsAcceptable|26_1(TypeReference type);
    [CompilerGeneratedAttribute]
internal static TypeReference <EnsureIsValidUnmanagedCallersOnlyTarget>g__GetRealType|26_2(TypeReference type);
    [CompilerGeneratedAttribute]
private bool <EnsureIsValidUnmanagedCallersOnlyTarget>g__LogReasonWhyAndReturnFailure|26_3(string why, <>c__DisplayClass26_0& );
    [CompilerGeneratedAttribute]
private void <EnsureIsValidUnmanagedCallersOnlyTarget>g__WarnWhy|26_4(string why, <>c__DisplayClass26_0& );
    [CompilerGeneratedAttribute]
internal static TypeDefinition <FindType>g__GetMatchingType|27_0(TypeDefinition def, <>c__DisplayClass27_0& );
}
[ExtensionAttribute]
internal static class Xamarin.Android.Tasks.MarshalMethodsHelpers : object {
    private static HashSet`1<string> blittableTypes;
    private static MarshalMethodsHelpers();
    [ExtensionAttribute]
public static bool IsBlittable(TypeReference type);
}
internal class Xamarin.Android.Tasks.MarshalMethodsNativeAssemblyGenerator : LlvmIrComposer {
    private static string GetFunctionPointerVariableName;
    private static Dictionary`2<char, Type> jniSimpleTypeMap;
    private static Dictionary`2<char, Type> jniArrayTypeMap;
    private ICollection`1<string> uniqueAssemblyNames;
    private int numberOfAssembliesInApk;
    private IDictionary`2<string, IList`1<MarshalMethodEntry>> marshalMethods;
    private TaskLoggingHelper logger;
    private StructureInfo marshalMethodsManagedClassStructureInfo;
    private StructureInfo marshalMethodNameStructureInfo;
    private List`1<MarshalMethodInfo> methods;
    private List`1<StructureInstance`1<MarshalMethodsManagedClass>> classes;
    private LlvmIrCallMarker defaultCallMarker;
    private bool generateEmptyCode;
    public MarshalMethodsNativeAssemblyGenerator(int numberOfAssembliesInApk, ICollection`1<string> uniqueAssemblyNames);
    public MarshalMethodsNativeAssemblyGenerator(int numberOfAssembliesInApk, ICollection`1<string> uniqueAssemblyNames, IDictionary`2<string, IList`1<MarshalMethodEntry>> marshalMethods, TaskLoggingHelper logger);
    private static MarshalMethodsNativeAssemblyGenerator();
    private void Init();
    private string MakeNativeSymbolName(MarshalMethodEntry entry, bool useFullNativeSignature);
    private void ProcessAndAddMethod(List`1<MarshalMethodInfo> allMethods, MarshalMethodEntry entry, bool useFullNativeSignature, Dictionary`2<string, int> seenClasses, Dictionary`2<string, List`1<MarshalMethodInfo>> overloadedNativeSymbolNames);
    private string MangleForJni(string name);
    private ValueTuple`2<Type, List`1<LlvmIrFunctionParameter>> ParseJniSignature(string signature, MethodDefinition implementedMethod);
    protected virtual void Construct(LlvmIrModule module);
    private void MapStructures(LlvmIrModule module);
    private void AddMarshalMethods(LlvmIrModule module, AssemblyCacheState acs, LlvmIrVariable getFunctionPtrVariable, LlvmIrFunction getFunctionPtrFunction);
    private void AddMarshalMethod(LlvmIrModule module, MarshalMethodInfo method, ulong asmId, MarshalMethodsWriteState writeState);
    private LlvmIrFunctionAttributeSet MakeMarshalMethodAttributeSet(LlvmIrModule module);
    private ValueTuple`2<LlvmIrVariable, LlvmIrFunction> AddXamarinAppInitFunction(LlvmIrModule module);
    private LlvmIrFunctionAttributeSet MakeXamarinAppInitAttributeSet(LlvmIrModule module);
    private void AddMarshalMethodNames(LlvmIrModule module, AssemblyCacheState acs);
    private void UpdateMarshalMethodNameIds(LlvmIrVariable variable, LlvmIrModuleTarget target, object callerState);
    private void AddAssemblyImageCache(LlvmIrModule module, AssemblyCacheState& acs);
    private void UpdateAssemblyImageCacheHashes(LlvmIrVariable variable, LlvmIrModuleTarget target, object callerState);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
private string GetAssemblyImageCacheItemComment(LlvmIrVariable v, LlvmIrModuleTarget target, ulong index, object value, object callerState);
    private void UpdateAssemblyImageCacheIndices(LlvmIrVariable variable, LlvmIrModuleTarget target, object callerState);
    private AssemblyCacheState EnsureAssemblyCacheState(object callerState);
    [CompilerGeneratedAttribute]
internal static void <MakeNativeSymbolName>g__ThrowInvalidSignature|40_0(string signature, string reason);
    [CompilerGeneratedAttribute]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
internal static Type <ParseJniSignature>g__JniTypeToManaged|43_0(char jniType, <>c__DisplayClass43_0& );
    [CompilerGeneratedAttribute]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
internal static Type <ParseJniSignature>g__JavaClassToManaged|43_1(bool justSkip, <>c__DisplayClass43_0& );
    [CompilerGeneratedAttribute]
internal static void <ParseJniSignature>g__AddParameter|43_2(Type type, <>c__DisplayClass43_0& );
    [CompilerGeneratedAttribute]
internal static void <AddMarshalMethod>g__WriteBody|47_0(LlvmIrFunctionBody body, <>c__DisplayClass47_0& );
    [CompilerGeneratedAttribute]
internal static void <AddMarshalMethodNames>g__RenderMethodNameWithParams|51_0(MethodDefinition md, StringBuilder buffer);
}
internal class Xamarin.Android.Tasks.MarshalMethodsState : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, IList`1<MarshalMethodEntry>> <MarshalMethods>k__BackingField;
    public IDictionary`2<string, IList`1<MarshalMethodEntry>> MarshalMethods { get; }
    public MarshalMethodsState(IDictionary`2<string, IList`1<MarshalMethodEntry>> marshalMethods);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, IList`1<MarshalMethodEntry>> get_MarshalMethods();
}
public class Xamarin.Android.Tasks.MDoc : AndroidToolTask {
    [CompilerGeneratedAttribute]
private String[] <References>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDocDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RunExport>k__BackingField;
    public string TaskPrefix { get; }
    public String[] References { get; public set; }
    [RequiredAttribute]
public string TargetAssembly { get; public set; }
    [RequiredAttribute]
public string OutputDocDirectory { get; public set; }
    public bool RunExport { get; public set; }
    protected string ToolName { get; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public String[] get_References();
    [CompilerGeneratedAttribute]
public void set_References(String[] value);
    [CompilerGeneratedAttribute]
public string get_TargetAssembly();
    [CompilerGeneratedAttribute]
public void set_TargetAssembly(string value);
    [CompilerGeneratedAttribute]
public string get_OutputDocDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDocDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_RunExport();
    [CompilerGeneratedAttribute]
public void set_RunExport(bool value);
    protected virtual string get_ToolName();
    protected virtual string GenerateFullPathToTool();
    protected virtual string GenerateCommandLineCommands();
}
public class Xamarin.Android.Tasks.MergeRemapXml : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <InputRemapXmlFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <OutputFile>k__BackingField;
    public string TaskPrefix { get; }
    public ITaskItem[] InputRemapXmlFiles { get; public set; }
    [RequiredAttribute]
public ITaskItem OutputFile { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_InputRemapXmlFiles();
    [CompilerGeneratedAttribute]
public void set_InputRemapXmlFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(ITaskItem value);
    public virtual bool RunTask();
    private void MergeInputFile(XmlWriter writer, string file);
}
[ExtensionAttribute]
public static class Xamarin.Android.Tasks.MetadataExtensions : object {
    [ExtensionAttribute]
public static string GetCustomAttributeFullName(MetadataReader reader, CustomAttribute attribute);
    [ExtensionAttribute]
public static CustomAttributeValue`1<object> GetCustomAttributeArguments(CustomAttribute attribute);
    [ExtensionAttribute]
public static Stream GetEmbeddedResourceStream(PEReader peReader, ManifestResource resource);
}
public class Xamarin.Android.Tasks.MetadataResolver : object {
    private Dictionary`2<string, PEReader> cache;
    private List`1<string> searchDirectories;
    public MetadataReader GetAssemblyReader(string assemblyName);
    public void AddSearchDirectory(string directory);
    public string Resolve(string assemblyName);
    public sealed virtual void Dispose();
}
public class Xamarin.Android.Tasks.MonoAndroidHelper : object {
    private static Lazy`1<string> uname;
    public static AndroidVersions SupportedVersions;
    public static AndroidSdkInfo AndroidSdk;
    private static Dictionary`2<string, string> ClangAbiMap;
    private static string ResourceCaseMapKey;
    private static Char[] DirectorySeparators;
    public static String[] TargetFrameworkDirectories;
    internal static String[] FrameworkEmbeddedJarLookupTargets;
    internal static String[] FrameworkEmbeddedNativeLibraryAssemblies;
    internal static HashSet`1<string> FrameworkAssembliesToTreatAsUserAssemblies;
    internal static bool LogInternalExceptions { get; }
    private static MonoAndroidHelper();
    public static StringBuilder MergeStdoutAndStderrMessages(List`1<string> stdout, List`1<string> stderr);
    public static int RunProcess(string name, string args, DataReceivedEventHandler onOutput, DataReceivedEventHandler onError, Dictionary`2<string, string> environmentVariables);
    private static string GetOSBinDirName();
    internal static string GetOSBinPath();
    internal static string GetOSLibPath();
    public static void RefreshAndroidSdk(string sdkPath, string ndkPath, string javaPath, TaskLoggingHelper logHelper);
    public static void RefreshSupportedVersions(String[] referenceAssemblyPaths);
    public static JdkInfo GetJdkInfo(Action`2<TraceLevel, string> logger, string javaSdkPath, Version minSupportedVersion, Version maxSupportedVersion);
    internal static bool get_LogInternalExceptions();
    public static IEnumerable`1<string> ExpandFiles(ITaskItem[] libraryProjectJars);
    public static IEnumerable`1<ITaskItem> DistinctFilesByContent(IEnumerable`1<ITaskItem> filePaths);
    public static IEnumerable`1<string> DistinctFilesByContent(IEnumerable`1<string> filePaths);
    [IteratorStateMachineAttribute("Xamarin.Android.Tasks.MonoAndroidHelper/<GetDuplicateFileNames>d__17")]
public static IEnumerable`1<string> GetDuplicateFileNames(IEnumerable`1<string> fullPaths, String[] excluded);
    public static bool IsEmbeddedReferenceJar(string jar);
    public static void LogWarning(object log, string msg, Object[] args);
    public static string MapAndroidAbiToClang(string androidAbi);
    public static bool IsMonoAndroidAssembly(ITaskItem assembly);
    public static bool HasMonoAndroidReference(ITaskItem assembly);
    public static bool HasMonoAndroidReference(MetadataReader reader);
    public static bool IsReferenceAssembly(string assembly);
    public static bool IsForceRetainedAssembly(string assembly);
    public static bool CopyAssemblyAndSymbols(string source, string destination);
    public static ZipArchive ReadZipFile(string filename);
    internal static IEnumerable`1<ITaskItem> GetFrameworkAssembliesToTreatAsUserAssemblies(ITaskItem[] resolvedAssemblies);
    public static bool SaveMapFile(IBuildEngine4 engine, string mapFile, Dictionary`2<string, string> map);
    public static Dictionary`2<string, string> LoadMapFile(IBuildEngine4 engine, string mapFile, StringComparer comparer);
    public static Dictionary`2<string, HashSet`1<string>> LoadCustomViewMapFile(IBuildEngine4 engine, string mapFile);
    public static bool SaveCustomViewMapFile(IBuildEngine4 engine, string mapFile, Dictionary`2<string, HashSet`1<string>> map);
    public static String[] GetProguardEnvironmentVaribles(string proguardHome);
    public static string GetExecutablePath(string dir, string exe);
    [IteratorStateMachineAttribute("Xamarin.Android.Tasks.MonoAndroidHelper/<Executables>d__36")]
public static IEnumerable`1<string> Executables(string executable);
    public static string TryGetAndroidJarPath(TaskLoggingHelper log, string platform, bool designTimeBuild, bool buildingInsideVisualStudio, string targetFramework, string androidSdkDirectory);
    public static void SaveResourceCaseMap(IBuildEngine4 engine, Dictionary`2<string, string> map, Func`2<object, object> keyCallback);
    public static Dictionary`2<string, string> LoadResourceCaseMap(IBuildEngine4 engine, Func`2<object, object> keyCallback);
    public static string FixUpAndroidResourcePath(string file, string resourceDirectory, string resourceDirectoryFullPath, Dictionary`2<string, string> resource_name_case_map);
    public static string GetRelativePathForAndroidAsset(string assetsDirectory, ITaskItem androidAsset);
    public static AndroidTargetArch AbiToTargetArch(string abi);
    public static string AbiToRid(string abi);
    public static string ArchToRid(AndroidTargetArch arch);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public static string CultureInvariantToString(object obj);
    public static int ConvertSupportedOSPlatformVersionToApiLevel(string version);
    public static AndroidTargetArch GetTargetArch(ITaskItem asmItem);
    private static string GetToolsRootDirectoryRelativePath(string androidBinUtilsDirectory);
    public static string GetLibstubsArchDirectoryPath(string androidBinUtilsDirectory, AndroidTargetArch arch);
    public static string GetLibstubsRootDirectoryPath(string androidBinUtilsDirectory);
    public static string GetNativeLibsRootDirectoryPath(string androidBinUtilsDirectory);
    public static string GetAssemblyCulture(ITaskItem assembly);
    public static bool IsFrameworkAssembly(string assembly);
    public static bool IsFrameworkAssembly(string assembly, bool checkSdkPath);
    public static bool IsSharedRuntimeAssembly(string assembly);
    public static bool ExistsInFrameworkPath(string assembly);
    [CompilerGeneratedAttribute]
internal static void <MergeStdoutAndStderrMessages>g__AppendLines|3_0(string prefix, List`1<string> lines, StringBuilder sb);
    [CompilerGeneratedAttribute]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
internal static string <GetAssemblyCulture>g__TrimSlashes|54_0(string s);
}
[FlagsAttribute]
internal enum Xamarin.Android.Tasks.MonoComponent : Enum {
    public int value__;
    public static MonoComponent None;
    public static MonoComponent Debugger;
    public static MonoComponent HotReload;
    public static MonoComponent Tracing;
}
public class Xamarin.Android.Tasks.MonoSymbolicate : AndroidToolTask {
    [CompilerGeneratedAttribute]
private string <InputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDirectory>k__BackingField;
    private static Regex symbolsWarning;
    public string TaskPrefix { get; }
    protected string ToolName { get; }
    [RequiredAttribute]
public string InputDirectory { get; public set; }
    [RequiredAttribute]
public string OutputDirectory { get; public set; }
    private static MonoSymbolicate();
    public virtual string get_TaskPrefix();
    protected virtual string get_ToolName();
    [CompilerGeneratedAttribute]
public string get_InputDirectory();
    [CompilerGeneratedAttribute]
public void set_InputDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(string value);
    protected virtual string GenerateFullPathToTool();
    protected virtual string GenerateCommandLineCommands();
    protected virtual void LogEventsFromTextOutput(string singleLine, MessageImportance messageImportance);
}
[AttributeUsageAttribute("384")]
internal class Xamarin.Android.Tasks.NativeAssemblerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <Ignore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsesDataProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InlineArray>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InlineArraySize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedsPadding>k__BackingField;
    public bool Ignore { get; public set; }
    public bool UsesDataProvider { get; public set; }
    public bool InlineArray { get; public set; }
    public int InlineArraySize { get; public set; }
    public bool NeedsPadding { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Ignore();
    [CompilerGeneratedAttribute]
public void set_Ignore(bool value);
    [CompilerGeneratedAttribute]
public bool get_UsesDataProvider();
    [CompilerGeneratedAttribute]
public void set_UsesDataProvider(bool value);
    [CompilerGeneratedAttribute]
public bool get_InlineArray();
    [CompilerGeneratedAttribute]
public void set_InlineArray(bool value);
    [CompilerGeneratedAttribute]
public int get_InlineArraySize();
    [CompilerGeneratedAttribute]
public void set_InlineArraySize(int value);
    [CompilerGeneratedAttribute]
public bool get_NeedsPadding();
    [CompilerGeneratedAttribute]
public void set_NeedsPadding(bool value);
}
internal class Xamarin.Android.Tasks.NativeAssemblerStructContextDataProvider : object {
    public virtual ulong GetBufferSize(object data, string fieldName);
    public virtual string GetComment(object data, string fieldName);
    public virtual UInt32 GetMaxInlineWidth(object data, string fieldName);
    public virtual string GetPointedToSymbolName(object data, string fieldName);
    protected T EnsureType(object data);
}
[AttributeUsageAttribute("4")]
internal class Xamarin.Android.Tasks.NativeAssemblerStructContextDataProviderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; }
    public NativeAssemblerStructContextDataProviderAttribute(Type type);
    [CompilerGeneratedAttribute]
public Type get_Type();
}
[AttributeUsageAttribute("4")]
internal class Xamarin.Android.Tasks.NativeClassAttribute : Attribute {
}
internal class Xamarin.Android.Tasks.NativeTypeMappingData : object {
    [CompilerGeneratedAttribute]
private ModuleReleaseData[] <Modules>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeMapReleaseEntry[] <JavaTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MapModuleCount>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <JavaTypeCount>k__BackingField;
    public ModuleReleaseData[] Modules { get; }
    public TypeMapReleaseEntry[] JavaTypes { get; }
    public UInt32 MapModuleCount { get; }
    public UInt32 JavaTypeCount { get; }
    public NativeTypeMappingData(ModuleReleaseData[] modules);
    [CompilerGeneratedAttribute]
public ModuleReleaseData[] get_Modules();
    [CompilerGeneratedAttribute]
public TypeMapReleaseEntry[] get_JavaTypes();
    [CompilerGeneratedAttribute]
public UInt32 get_MapModuleCount();
    [CompilerGeneratedAttribute]
public UInt32 get_JavaTypeCount();
}
public enum Xamarin.Android.Tasks.NdkToolchainDir : Enum {
    public int value__;
    public static NdkToolchainDir AsmInclude;
    public static NdkToolchainDir PlatformInclude;
    public static NdkToolchainDir PlatformLib;
}
public enum Xamarin.Android.Tasks.NdkToolKind : Enum {
    public int value__;
    public static NdkToolKind Assembler;
    public static NdkToolKind CompilerC;
    public static NdkToolKind CompilerCPlusPlus;
    public static NdkToolKind Linker;
    public static NdkToolKind Strip;
}
public abstract class Xamarin.Android.Tasks.NdkTools : object {
    private static Dictionary`2<AndroidTargetArch, string> archTriples;
    private static Dictionary`2<AndroidTargetArch, string> archPlatforms;
    protected Dictionary`2<NdkToolKind, string> NdkToolNames;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
private string osBinPath;
    [CompilerGeneratedAttribute]
private NdkVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NdkRootDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsesClang>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoBinutils>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TaskLoggingHelper <Log>k__BackingField;
    private static string platformLinux64;
    private static string platformLinux32;
    private static string platformMac64;
    private static string platformMac32;
    private static string platformWindows64;
    private static string platformWindows32;
    public NdkVersion Version { get; }
    public string NdkRootDirectory { get; }
    public bool UsesClang { get; protected set; }
    public bool NoBinutils { get; protected set; }
    protected string HostPlatform { get; }
    protected bool IsWindows { get; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("2")]
protected TaskLoggingHelper Log { get; }
    public string OSBinPath { get; public set; }
    protected NdkTools(NdkVersion version, TaskLoggingHelper log);
    protected NdkTools(string androidNdkPath, NdkVersion version, TaskLoggingHelper log);
    private static NdkTools();
    [CompilerGeneratedAttribute]
public NdkVersion get_Version();
    [CompilerGeneratedAttribute]
public string get_NdkRootDirectory();
    [CompilerGeneratedAttribute]
public bool get_UsesClang();
    [CompilerGeneratedAttribute]
protected void set_UsesClang(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoBinutils();
    [CompilerGeneratedAttribute]
protected void set_NoBinutils(bool value);
    protected string get_HostPlatform();
    protected bool get_IsWindows();
    [CompilerGeneratedAttribute]
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
protected TaskLoggingHelper get_Log();
    public string get_OSBinPath();
    public void set_OSBinPath(string value);
    public static NdkTools Create(string androidNdkPath, bool logErrors, TaskLoggingHelper log);
    public abstract virtual string GetToolPath(NdkToolKind kind, AndroidTargetArch arch, int apiLevel);
    public abstract virtual string GetToolPath(string name, AndroidTargetArch arch, int apiLevel);
    public abstract virtual int GetMinimumApiLevelFor(AndroidTargetArch arch);
    public abstract virtual bool ValidateNdkPlatform(Action`1<string> logMessage, Action`2<string, string> logError, AndroidTargetArch arch, bool enableLLVM);
    public bool ValidateNdkPlatform(AndroidTargetArch arch, bool enableLLVM);
    public string GetArchDirName(AndroidTargetArch arch);
    [IteratorStateMachineAttribute("Xamarin.Android.Tasks.NdkTools/<GetSupportedPlatforms>d__37")]
public virtual IEnumerable`1<int> GetSupportedPlatforms();
    public string GetNdkToolPrefixForAOT(AndroidTargetArch arch, int apiLevel);
    public virtual string GetCompilerTargetParameters(AndroidTargetArch arch, int apiLevel, bool forCPlusPlus);
    public virtual string GetClangDeviceLibraryPath();
    public static string GetBinutilsToolchainPrefix(AndroidTargetArch arch);
    public virtual string GetNdkToolchainPrefix(AndroidTargetArch arch);
    public bool IsNdk64BitArch(AndroidTargetArch arch);
    public string GetDirectoryPath(NdkToolchainDir dir, AndroidTargetArch arch, int apiLevel);
    protected virtual string GetAsmIncludeDirPath(AndroidTargetArch arch, int apiLevel);
    protected virtual string GetPlatformLibPath(AndroidTargetArch arch, int apiLevel);
    protected abstract virtual string GetPlatformIncludeDirPath(AndroidTargetArch arch, int apiLevel);
    protected string GetExecutablePath(string toolPath, bool mustExist);
    protected virtual string GetToolName(NdkToolKind kind);
    protected static string GetArchTriple(AndroidTargetArch arch);
    protected static string GetPlatformArch(AndroidTargetArch arch);
    protected string EnsureDirectoryExists(string path);
    protected string GetUnifiedHeadersDirPath(string androidNdkPath);
    protected virtual string MakeUnifiedHeadersDirPath(string androidNdkPath);
    protected string UnifiedHeaders_GetAsmIncludeDirPath(AndroidTargetArch arch, int apiLevel);
    protected string UnifiedHeaders_GetPlatformIncludeDirPath(AndroidTargetArch arch, int apiLevel);
    private string GetNdkHostPlatform();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
private static NdkVersion ReadVersion(string androidNdkPath, bool logErrors, TaskLoggingHelper log);
    [CompilerGeneratedAttribute]
private void <ValidateNdkPlatform>b__35_0(string m);
    [CompilerGeneratedAttribute]
private void <ValidateNdkPlatform>b__35_1(string c, string m);
    [CompilerGeneratedAttribute]
private bool <GetNdkHostPlatform>g__HasPrebuiltDir|63_0(string name);
}
internal abstract class Xamarin.Android.Tasks.NdkToolsNoClang : NdkTools {
    protected NdkToolsNoClang(string androidNdkPath, NdkVersion version, TaskLoggingHelper log);
    public virtual bool ValidateNdkPlatform(Action`1<string> logMessage, Action`2<string, string> logError, AndroidTargetArch arch, bool enableLLVM);
    public virtual int GetMinimumApiLevelFor(AndroidTargetArch arch);
    public virtual string GetToolPath(NdkToolKind kind, AndroidTargetArch arch, int apiLevel);
    public virtual string GetToolPath(string name, AndroidTargetArch arch, int apiLevel);
    protected string GetArchDirectoryName(AndroidTargetArch arch);
    [IteratorStateMachineAttribute("Xamarin.Android.Tasks.NdkToolsNoClang/<GetSupportedPlatforms>d__6")]
public virtual IEnumerable`1<int> GetSupportedPlatforms();
}
internal class Xamarin.Android.Tasks.NdkToolsNoClangNoUnifiedHeaders : NdkToolsNoClang {
    public NdkToolsNoClangNoUnifiedHeaders(string androidNdkPath, NdkVersion version, TaskLoggingHelper log);
    protected virtual string GetPlatformIncludeDirPath(AndroidTargetArch arch, int apiLevel);
}
internal class Xamarin.Android.Tasks.NdkToolsNoClangWithUnifiedHeaders : NdkToolsNoClang {
    public NdkToolsNoClangWithUnifiedHeaders(string androidNdkPath, NdkVersion version, TaskLoggingHelper log);
    protected virtual string GetAsmIncludeDirPath(AndroidTargetArch arch, int apiLevel);
    protected virtual string GetPlatformIncludeDirPath(AndroidTargetArch arch, int apiLevel);
}
internal abstract class Xamarin.Android.Tasks.NdkToolsWithClang : NdkTools {
    [CompilerGeneratedAttribute]
private string <UnifiedHeadersDirPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedClangWorkaround>k__BackingField;
    protected string UnifiedHeadersDirPath { get; }
    protected bool NeedClangWorkaround { get; protected set; }
    protected NdkToolsWithClang(string androidNdkPath, NdkVersion version, TaskLoggingHelper log);
    [CompilerGeneratedAttribute]
protected string get_UnifiedHeadersDirPath();
    [CompilerGeneratedAttribute]
protected bool get_NeedClangWorkaround();
    [CompilerGeneratedAttribute]
protected void set_NeedClangWorkaround(bool value);
    public virtual bool ValidateNdkPlatform(Action`1<string> logMessage, Action`2<string, string> logError, AndroidTargetArch arch, bool enableLLVM);
    public virtual int GetMinimumApiLevelFor(AndroidTargetArch arch);
    public virtual string GetToolPath(NdkToolKind kind, AndroidTargetArch arch, int apiLevel);
    public virtual string GetToolPath(string name, AndroidTargetArch arch, int apiLevel);
    public virtual string GetClangDeviceLibraryPath();
    public virtual string GetNdkToolchainPrefix(AndroidTargetArch arch);
    protected string GetCompilerTriple(AndroidTargetArch arch);
    protected string MakeToolPath(string toolName, bool mustExist);
    protected string GetToolchainDir();
    protected virtual string GetAsmIncludeDirPath(AndroidTargetArch arch, int apiLevel);
    protected virtual string GetPlatformIncludeDirPath(AndroidTargetArch arch, int apiLevel);
}
internal class Xamarin.Android.Tasks.NdkToolsWithClangNoBinutils : NdkToolsWithClangNoPlatforms {
    public NdkToolsWithClangNoBinutils(string androidNdkPath, NdkVersion version, TaskLoggingHelper log);
    public virtual string GetToolPath(NdkToolKind kind, AndroidTargetArch arch, int apiLevel);
    public virtual string GetToolPath(string name, AndroidTargetArch arch, int apiLevel);
    private string GetEmbeddedToolPath(NdkToolKind kind, AndroidTargetArch arch);
    public virtual string GetCompilerTargetParameters(AndroidTargetArch arch, int apiLevel, bool forCPlusPlus);
}
internal class Xamarin.Android.Tasks.NdkToolsWithClangNoPlatforms : NdkToolsWithClang {
    public NdkToolsWithClangNoPlatforms(string androidNdkPath, NdkVersion version, TaskLoggingHelper log);
    public virtual IEnumerable`1<int> GetSupportedPlatforms();
    protected virtual string MakeUnifiedHeadersDirPath(string androidNdkPath);
    protected virtual string GetPlatformLibPath(AndroidTargetArch arch, int apiLevel);
    protected string GetSysrootDir(string androidNdkPath);
    protected string GetToolchainLibDir();
}
internal class Xamarin.Android.Tasks.NdkToolsWithClangWithPlatforms : NdkToolsWithClang {
    public NdkToolsWithClangWithPlatforms(string androidNdkPath, NdkVersion version, TaskLoggingHelper log);
    public virtual string GetCompilerTargetParameters(AndroidTargetArch arch, int apiLevel, bool forCPlusPlus);
}
public class Xamarin.Android.Tasks.NdkVersion : object {
    [CompilerGeneratedAttribute]
private Version <Main>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    public Version Main { get; }
    public string Tag { get; }
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public NdkVersion(string version);
    [CompilerGeneratedAttribute]
public Version get_Main();
    [CompilerGeneratedAttribute]
public string get_Tag();
    public virtual string ToString();
}
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("1")]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
internal class Xamarin.Android.Tasks.NullNdkTools : NdkTools {
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public NullNdkTools(TaskLoggingHelper log);
    public virtual int GetMinimumApiLevelFor(AndroidTargetArch arch);
    public virtual string GetToolPath(NdkToolKind kind, AndroidTargetArch arch, int apiLevel);
    public virtual string GetToolPath(string name, AndroidTargetArch arch, int apiLevel);
    public virtual bool ValidateNdkPlatform(Action`1<string> logMessage, Action`2<string, string> logError, AndroidTargetArch arch, bool enableLLVM);
    protected virtual string GetPlatformIncludeDirPath(AndroidTargetArch arch, int apiLevel);
}
public class Xamarin.Android.Tasks.OutputLine : ValueType {
    public string Line;
    public bool StdError;
    public bool Errored;
    public long JobId;
    public OutputLine(string line, bool stdError, bool errored, long jobId);
}
internal class Xamarin.Android.Tasks.PackagingUtils : object {
    private static Regex pathRegex;
    private static PackagingUtils();
    public static bool CheckEntryForPackaging(string entryName);
    private static bool CheckFolderForPackaging(string folderName);
    private static bool CheckSignatureFile(string folderName, string extension);
    private static bool CheckFileForPackaging(string fileName, string extension);
    private static bool EqualsIgnoreCase(string a, string b);
}
public class Xamarin.Android.Tasks.PrepareAbiItems : AndroidTask {
    private static string ArmV7a;
    private static string TypeMapBase;
    private static string EnvBase;
    private static string CompressedAssembliesBase;
    private static string JniRemappingBase;
    private static string MarshalMethodsBase;
    [CompilerGeneratedAttribute]
private String[] <BuildTargetAbis>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NativeSourcesDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InstantRunEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AssemblySources>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AssemblyIncludes>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public String[] BuildTargetAbis { get; public set; }
    [RequiredAttribute]
public string NativeSourcesDir { get; public set; }
    [RequiredAttribute]
public string Mode { get; public set; }
    [RequiredAttribute]
public bool Debug { get; public set; }
    [RequiredAttribute]
public bool InstantRunEnabled { get; public set; }
    [OutputAttribute]
public ITaskItem[] AssemblySources { get; public set; }
    [OutputAttribute]
public ITaskItem[] AssemblyIncludes { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public String[] get_BuildTargetAbis();
    [CompilerGeneratedAttribute]
public void set_BuildTargetAbis(String[] value);
    [CompilerGeneratedAttribute]
public string get_NativeSourcesDir();
    [CompilerGeneratedAttribute]
public void set_NativeSourcesDir(string value);
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(string value);
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public bool get_InstantRunEnabled();
    [CompilerGeneratedAttribute]
public void set_InstantRunEnabled(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AssemblySources();
    [CompilerGeneratedAttribute]
public void set_AssemblySources(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AssemblyIncludes();
    [CompilerGeneratedAttribute]
public void set_AssemblyIncludes(ITaskItem[] value);
    public virtual bool RunTask();
}
[<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("1")]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("0")]
public class Xamarin.Android.Tasks.ProcessAssemblies : AndroidTask {
    [CompilerGeneratedAttribute]
private String[] <RuntimeIdentifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AndroidIncludeDebugSymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PublishTrimmed>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <InputAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <InputJavaLibraries>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ITaskItem[] <OutputAssemblies>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ITaskItem[] <OutputJavaLibraries>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ITaskItem[] <ShrunkAssemblies>k__BackingField;
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedSymbols>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public String[] RuntimeIdentifiers { get; public set; }
    public bool AndroidIncludeDebugSymbols { get; public set; }
    public bool PublishTrimmed { get; public set; }
    public ITaskItem[] InputAssemblies { get; public set; }
    public ITaskItem[] InputJavaLibraries { get; public set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OutputAttribute]
public ITaskItem[] OutputAssemblies { get; public set; }
    [OutputAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ITaskItem[] OutputJavaLibraries { get; public set; }
    [OutputAttribute]
[<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ITaskItem[] ShrunkAssemblies { get; public set; }
    [<7775bc6b-e14a-4176-a511-979f4e6b8c8c>NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OutputAttribute]
public ITaskItem[] ResolvedSymbols { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public String[] get_RuntimeIdentifiers();
    [CompilerGeneratedAttribute]
public void set_RuntimeIdentifiers(String[] value);
    [CompilerGeneratedAttribute]
public bool get_AndroidIncludeDebugSymbols();
    [CompilerGeneratedAttribute]
public void set_AndroidIncludeDebugSymbols(bool value);
    [CompilerGeneratedAttribute]
public bool get_PublishTrimmed();
    [CompilerGeneratedAttribute]
public void set_PublishTrimmed(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_InputAssemblies();
    [CompilerGeneratedAttribute]
public void set_InputAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_InputJavaLibraries();
    [CompilerGeneratedAttribute]
public void set_InputJavaLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_OutputAssemblies();
    [CompilerGeneratedAttribute]
public void set_OutputAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_OutputJavaLibraries();
    [CompilerGeneratedAttribute]
public void set_OutputJavaLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ShrunkAssemblies();
    [CompilerGeneratedAttribute]
public void set_ShrunkAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedSymbols();
    [CompilerGeneratedAttribute]
public void set_ResolvedSymbols(ITaskItem[] value);
    public virtual bool RunTask();
    private void SetAssemblyAbiMetadata(string abi, string assetType, ITaskItem assembly, ITaskItem symbol, bool isDuplicate);
    private void SetAssemblyAbiMetadata(ITaskItem assembly, ITaskItem symbol, bool isDuplicate);
    private void SetMetadataForAssemblies(List`1<ITaskItem> output, Dictionary`2<string, ITaskItem> symbols);
    private void DeduplicateAssemblies(List`1<ITaskItem> output, Dictionary`2<string, ITaskItem> symbols);
    private static bool IsFromAKnownRuntimePack(ITaskItem assembly);
    private static ITaskItem GetOrCreateSymbolItem(Dictionary`2<string, ITaskItem> symbols, ITaskItem assembly);
    private bool Filter(ITaskItem item);
    private void SetDestinationSubDirectory(ITaskItem assembly, string fileName, ITaskItem symbol, bool isDuplicate);
}
public class Xamarin.Android.Tasks.ProcessNativeLibraries : AndroidTask {
    private static string MonoComponentPrefix;
    private static HashSet`1<string> DebugNativeLibraries;
    [CompilerGeneratedAttribute]
private ITaskItem[] <InputLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Components>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExcludedLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDebugSymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <OutputLibraries>k__BackingField;
    public string TaskPrefix { get; }
    public ITaskItem[] InputLibraries { get; public set; }
    public ITaskItem[] Components { get; public set; }
    public String[] ExcludedLibraries { get; public set; }
    public bool IncludeDebugSymbols { get; public set; }
    [OutputAttribute]
public ITaskItem[] OutputLibraries { get; public set; }
    private static ProcessNativeLibraries();
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_InputLibraries();
    [CompilerGeneratedAttribute]
public void set_InputLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Components();
    [CompilerGeneratedAttribute]
public void set_Components(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public String[] get_ExcludedLibraries();
    [CompilerGeneratedAttribute]
public void set_ExcludedLibraries(String[] value);
    [CompilerGeneratedAttribute]
public bool get_IncludeDebugSymbols();
    [CompilerGeneratedAttribute]
public void set_IncludeDebugSymbols(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_OutputLibraries();
    [CompilerGeneratedAttribute]
public void set_OutputLibraries(ITaskItem[] value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.Profile : object {
    public static HashSet`1<string> Sdk;
    public static String[] ValidAbis;
    public static String[] ValidProfilers;
    public static String[] SharedRuntimeAssemblies;
    private static Profile();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Xamarin.Android.Tasks.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string AAPTManifestError { get; }
    public static string APT0001 { get; }
    public static string APT0002 { get; }
    public static string APT0003 { get; }
    public static string APT0004 { get; }
    public static string XA_Directory_Is_From { get; }
    public static string XA8000 { get; }
    public static string XA_Manifest_AutoGenerated_Header { get; }
    public static string XA0000_API_for_TargetFrameworkVersion { get; }
    public static string XA0000_API_or_TargetFrameworkVersion_Fail { get; }
    public static string XA0000_Exception { get; }
    public static string XA0000_TargetFrameworkVersion_for_API { get; }
    public static string XA0001 { get; }
    public static string XA0002 { get; }
    public static string XA0003 { get; }
    public static string XA0004 { get; }
    public static string XA0030 { get; }
    public static string XA0031 { get; }
    public static string XA0031_NET { get; }
    public static string XA0032 { get; }
    public static string XA0033 { get; }
    public static string XA0034 { get; }
    public static string XA0035 { get; }
    public static string XA0036 { get; }
    public static string XA0100 { get; }
    public static string XA0104 { get; }
    public static string XA0105 { get; }
    public static string XA0107 { get; }
    public static string XA0107_Ignoring { get; }
    public static string XA0108 { get; }
    public static string XA0111 { get; }
    public static string XA0112 { get; }
    public static string XA0113 { get; }
    public static string XA0116 { get; }
    public static string XA0117 { get; }
    public static string XA0118_Parse { get; }
    public static string XA0118_Target { get; }
    public static string XA0119_AAB { get; }
    public static string XA0119_AOT { get; }
    public static string XA0119_Interpreter { get; }
    public static string XA0119_LinkMode { get; }
    public static string XA0119_LinkTool { get; }
    public static string XA0121 { get; }
    public static string XA0122 { get; }
    public static string XA0123 { get; }
    public static string XA0125 { get; }
    public static string XA1000 { get; }
    public static string XA1001 { get; }
    public static string XA1002 { get; }
    public static string XA1005 { get; }
    public static string XA1005_Instructions { get; }
    public static string XA1006 { get; }
    public static string XA1007 { get; }
    public static string XA1008 { get; }
    public static string XA1010 { get; }
    public static string XA1011 { get; }
    public static string XA1012 { get; }
    public static string XA1013 { get; }
    public static string XA1014 { get; }
    public static string XA1015 { get; }
    public static string XA1016 { get; }
    public static string XA1017 { get; }
    public static string XA1018 { get; }
    public static string XA1019 { get; }
    public static string XA1020 { get; }
    public static string XA1021 { get; }
    public static string XA1022 { get; }
    public static string XA1023 { get; }
    public static string XA1024 { get; }
    public static string XA1025 { get; }
    public static string XA1026 { get; }
    public static string XA1026_dotnet { get; }
    public static string XA1027 { get; }
    public static string XA1028 { get; }
    public static string XA2000 { get; }
    public static string XA2000_gcParams_bridgeImpl { get; }
    public static string XA2001 { get; }
    public static string XA2002_Framework { get; }
    public static string XA2002_NuGet { get; }
    public static string XA2006 { get; }
    public static string XA2007 { get; }
    public static string XA2008 { get; }
    public static string APT2264 { get; }
    public static string APT2265 { get; }
    public static string XA3001 { get; }
    public static string XA3002 { get; }
    public static string XA3003 { get; }
    public static string XA3004 { get; }
    public static string XA3005 { get; }
    public static string XA3006 { get; }
    public static string XA3007 { get; }
    public static string XA4209 { get; }
    public static string XA4210 { get; }
    public static string XA4211 { get; }
    public static string XA4213 { get; }
    public static string XA4214 { get; }
    public static string XA4214_Result { get; }
    public static string XA4215 { get; }
    public static string XA4215_Details { get; }
    public static string XA4216_MinSdkVersion { get; }
    public static string XA4216_SupportedOSPlatformVersion { get; }
    public static string XA4216_TargetSdkVersion { get; }
    public static string XA4218 { get; }
    public static string XA4219 { get; }
    public static string XA4220 { get; }
    public static string XA4221 { get; }
    public static string XA4222 { get; }
    public static string XA4223 { get; }
    public static string XA4224 { get; }
    public static string XA4225 { get; }
    public static string XA4226 { get; }
    public static string XA4228 { get; }
    public static string XA4229 { get; }
    public static string XA4230 { get; }
    public static string XA4231 { get; }
    public static string XA4232 { get; }
    public static string XA4233 { get; }
    public static string XA4300 { get; }
    public static string XA4301 { get; }
    public static string XA4301_ABI { get; }
    public static string XA4301_ABI_Ignoring { get; }
    public static string XA4301_ABI_NuGet { get; }
    public static string XA4302 { get; }
    public static string XA4303 { get; }
    public static string XA4304 { get; }
    public static string XA4305 { get; }
    public static string XA4305_File_Missing { get; }
    public static string XA4306 { get; }
    public static string XA4307 { get; }
    public static string XA4308 { get; }
    public static string XA4309 { get; }
    public static string XA4310 { get; }
    public static string XA4311 { get; }
    public static string XA4312 { get; }
    public static string XA4313 { get; }
    public static string XA4314 { get; }
    public static string XA5101 { get; }
    public static string XA5101_C_Compiler { get; }
    public static string XA5101_Toolchain { get; }
    public static string XA5102 { get; }
    public static string XA5103 { get; }
    public static string XA5104 { get; }
    public static string XA5105 { get; }
    public static string XA5201 { get; }
    public static string XA5205 { get; }
    public static string XA5205_Lint { get; }
    public static string XA5207 { get; }
    public static string XA5207_SDK_Manager_Windows { get; }
    public static string XA5207_SDK_Manager_CLI { get; }
    public static string XA5211 { get; }
    public static string XA5213 { get; }
    public static string XA5300_Android_Platforms { get; }
    public static string XA5300_Android_SDK { get; }
    public static string XA5300_Java_SDK { get; }
    public static string XA5301 { get; }
    public static string XA5302 { get; }
    public static string XA1031 { get; }
    public static string XA1032 { get; }
    public static string XA1033 { get; }
    public static string XA1034 { get; }
    public static string XA1036 { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_AAPTManifestError();
    public static string get_APT0001();
    public static string get_APT0002();
    public static string get_APT0003();
    public static string get_APT0004();
    public static string get_XA_Directory_Is_From();
    public static string get_XA8000();
    public static string get_XA_Manifest_AutoGenerated_Header();
    public static string get_XA0000_API_for_TargetFrameworkVersion();
    public static string get_XA0000_API_or_TargetFrameworkVersion_Fail();
    public static string get_XA0000_Exception();
    public static string get_XA0000_TargetFrameworkVersion_for_API();
    public static string get_XA0001();
    public static string get_XA0002();
    public static string get_XA0003();
    public static string get_XA0004();
    public static string get_XA0030();
    public static string get_XA0031();
    public static string get_XA0031_NET();
    public static string get_XA0032();
    public static string get_XA0033();
    public static string get_XA0034();
    public static string get_XA0035();
    public static string get_XA0036();
    public static string get_XA0100();
    public static string get_XA0104();
    public static string get_XA0105();
    public static string get_XA0107();
    public static string get_XA0107_Ignoring();
    public static string get_XA0108();
    public static string get_XA0111();
    public static string get_XA0112();
    public static string get_XA0113();
    public static string get_XA0116();
    public static string get_XA0117();
    public static string get_XA0118_Parse();
    public static string get_XA0118_Target();
    public static string get_XA0119_AAB();
    public static string get_XA0119_AOT();
    public static string get_XA0119_Interpreter();
    public static string get_XA0119_LinkMode();
    public static string get_XA0119_LinkTool();
    public static string get_XA0121();
    public static string get_XA0122();
    public static string get_XA0123();
    public static string get_XA0125();
    public static string get_XA1000();
    public static string get_XA1001();
    public static string get_XA1002();
    public static string get_XA1005();
    public static string get_XA1005_Instructions();
    public static string get_XA1006();
    public static string get_XA1007();
    public static string get_XA1008();
    public static string get_XA1010();
    public static string get_XA1011();
    public static string get_XA1012();
    public static string get_XA1013();
    public static string get_XA1014();
    public static string get_XA1015();
    public static string get_XA1016();
    public static string get_XA1017();
    public static string get_XA1018();
    public static string get_XA1019();
    public static string get_XA1020();
    public static string get_XA1021();
    public static string get_XA1022();
    public static string get_XA1023();
    public static string get_XA1024();
    public static string get_XA1025();
    public static string get_XA1026();
    public static string get_XA1026_dotnet();
    public static string get_XA1027();
    public static string get_XA1028();
    public static string get_XA2000();
    public static string get_XA2000_gcParams_bridgeImpl();
    public static string get_XA2001();
    public static string get_XA2002_Framework();
    public static string get_XA2002_NuGet();
    public static string get_XA2006();
    public static string get_XA2007();
    public static string get_XA2008();
    public static string get_APT2264();
    public static string get_APT2265();
    public static string get_XA3001();
    public static string get_XA3002();
    public static string get_XA3003();
    public static string get_XA3004();
    public static string get_XA3005();
    public static string get_XA3006();
    public static string get_XA3007();
    public static string get_XA4209();
    public static string get_XA4210();
    public static string get_XA4211();
    public static string get_XA4213();
    public static string get_XA4214();
    public static string get_XA4214_Result();
    public static string get_XA4215();
    public static string get_XA4215_Details();
    public static string get_XA4216_MinSdkVersion();
    public static string get_XA4216_SupportedOSPlatformVersion();
    public static string get_XA4216_TargetSdkVersion();
    public static string get_XA4218();
    public static string get_XA4219();
    public static string get_XA4220();
    public static string get_XA4221();
    public static string get_XA4222();
    public static string get_XA4223();
    public static string get_XA4224();
    public static string get_XA4225();
    public static string get_XA4226();
    public static string get_XA4228();
    public static string get_XA4229();
    public static string get_XA4230();
    public static string get_XA4231();
    public static string get_XA4232();
    public static string get_XA4233();
    public static string get_XA4300();
    public static string get_XA4301();
    public static string get_XA4301_ABI();
    public static string get_XA4301_ABI_Ignoring();
    public static string get_XA4301_ABI_NuGet();
    public static string get_XA4302();
    public static string get_XA4303();
    public static string get_XA4304();
    public static string get_XA4305();
    public static string get_XA4305_File_Missing();
    public static string get_XA4306();
    public static string get_XA4307();
    public static string get_XA4308();
    public static string get_XA4309();
    public static string get_XA4310();
    public static string get_XA4311();
    public static string get_XA4312();
    public static string get_XA4313();
    public static string get_XA4314();
    public static string get_XA5101();
    public static string get_XA5101_C_Compiler();
    public static string get_XA5101_Toolchain();
    public static string get_XA5102();
    public static string get_XA5103();
    public static string get_XA5104();
    public static string get_XA5105();
    public static string get_XA5201();
    public static string get_XA5205();
    public static string get_XA5205_Lint();
    public static string get_XA5207();
    public static string get_XA5207_SDK_Manager_Windows();
    public static string get_XA5207_SDK_Manager_CLI();
    public static string get_XA5211();
    public static string get_XA5213();
    public static string get_XA5300_Android_Platforms();
    public static string get_XA5300_Android_SDK();
    public static string get_XA5300_Java_SDK();
    public static string get_XA5301();
    public static string get_XA5302();
    public static string get_XA1031();
    public static string get_XA1032();
    public static string get_XA1033();
    public static string get_XA1034();
    public static string get_XA1036();
}
public class Xamarin.Android.Tasks.R : ValueType {
    public RType Type;
    public int Id;
    public Int32[] Ids;
    public string Identifier;
    public string ResourceTypeName;
    public ResourceType ResourceType;
    public string Key { get; }
    public string get_Key();
    public virtual string ToString();
    public string ToSortedString();
    public sealed virtual int CompareTo(R other);
    public void UpdateId(int newId);
    public void UpdateIds(Int32[] newIds);
}
public class Xamarin.Android.Tasks.R8 : D8 {
    [CompilerGeneratedAttribute]
private string <AndroidSdkBuildToolsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableMultiDex>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <CustomMainDexListFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MultiDexMainDexListFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableShrinking>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreWarnings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AcwMapFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProguardGeneratedReferenceConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProguardGeneratedApplicationConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProguardCommonXamarinConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProguardMappingFileOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ProguardConfigurationFiles>k__BackingField;
    private List`1<string> tempFiles;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string AndroidSdkBuildToolsPath { get; public set; }
    public bool EnableMultiDex { get; public set; }
    public ITaskItem[] CustomMainDexListFiles { get; public set; }
    public string MultiDexMainDexListFile { get; public set; }
    public bool EnableShrinking { get; public set; }
    public bool IgnoreWarnings { get; public set; }
    public string AcwMapFile { get; public set; }
    public string ProguardGeneratedReferenceConfiguration { get; public set; }
    public string ProguardGeneratedApplicationConfiguration { get; public set; }
    public string ProguardCommonXamarinConfiguration { get; public set; }
    public string ProguardMappingFileOutput { get; public set; }
    public String[] ProguardConfigurationFiles { get; public set; }
    protected string MainClass { get; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_AndroidSdkBuildToolsPath();
    [CompilerGeneratedAttribute]
public void set_AndroidSdkBuildToolsPath(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableMultiDex();
    [CompilerGeneratedAttribute]
public void set_EnableMultiDex(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_CustomMainDexListFiles();
    [CompilerGeneratedAttribute]
public void set_CustomMainDexListFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_MultiDexMainDexListFile();
    [CompilerGeneratedAttribute]
public void set_MultiDexMainDexListFile(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableShrinking();
    [CompilerGeneratedAttribute]
public void set_EnableShrinking(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreWarnings();
    [CompilerGeneratedAttribute]
public void set_IgnoreWarnings(bool value);
    [CompilerGeneratedAttribute]
public string get_AcwMapFile();
    [CompilerGeneratedAttribute]
public void set_AcwMapFile(string value);
    [CompilerGeneratedAttribute]
public string get_ProguardGeneratedReferenceConfiguration();
    [CompilerGeneratedAttribute]
public void set_ProguardGeneratedReferenceConfiguration(string value);
    [CompilerGeneratedAttribute]
public string get_ProguardGeneratedApplicationConfiguration();
    [CompilerGeneratedAttribute]
public void set_ProguardGeneratedApplicationConfiguration(string value);
    [CompilerGeneratedAttribute]
public string get_ProguardCommonXamarinConfiguration();
    [CompilerGeneratedAttribute]
public void set_ProguardCommonXamarinConfiguration(string value);
    [CompilerGeneratedAttribute]
public string get_ProguardMappingFileOutput();
    [CompilerGeneratedAttribute]
public void set_ProguardMappingFileOutput(string value);
    [CompilerGeneratedAttribute]
public String[] get_ProguardConfigurationFiles();
    [CompilerGeneratedAttribute]
public void set_ProguardConfigurationFiles(String[] value);
    protected virtual string get_MainClass();
    public virtual bool RunTask();
    protected virtual CommandLineBuilder GetCommandLineBuilder();
}
public class Xamarin.Android.Tasks.ReadAndroidManifest : AndroidTask {
    [CompilerGeneratedAttribute]
private string <ManifestFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidSdkDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmbeddedDSOsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <UsesLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseEmbeddedDex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTestOnly>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string ManifestFile { get; public set; }
    [RequiredAttribute]
public string AndroidSdkDirectory { get; public set; }
    [RequiredAttribute]
public string AndroidApiLevel { get; public set; }
    [OutputAttribute]
public bool EmbeddedDSOsEnabled { get; public set; }
    [OutputAttribute]
public ITaskItem[] UsesLibraries { get; public set; }
    [OutputAttribute]
public bool UseEmbeddedDex { get; public set; }
    [OutputAttribute]
public bool IsTestOnly { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_ManifestFile();
    [CompilerGeneratedAttribute]
public void set_ManifestFile(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidSdkDirectory();
    [CompilerGeneratedAttribute]
public void set_AndroidSdkDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidApiLevel();
    [CompilerGeneratedAttribute]
public void set_AndroidApiLevel(string value);
    [CompilerGeneratedAttribute]
public bool get_EmbeddedDSOsEnabled();
    [CompilerGeneratedAttribute]
public void set_EmbeddedDSOsEnabled(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_UsesLibraries();
    [CompilerGeneratedAttribute]
public void set_UsesLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_UseEmbeddedDex();
    [CompilerGeneratedAttribute]
public void set_UseEmbeddedDex(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsTestOnly();
    [CompilerGeneratedAttribute]
public void set_IsTestOnly(bool value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.ReadImportedLibrariesCache : AndroidTask {
    [CompilerGeneratedAttribute]
private string <CacheFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Jars>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <NativeLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ManifestDocuments>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string CacheFile { get; public set; }
    [OutputAttribute]
public ITaskItem[] Jars { get; public set; }
    [OutputAttribute]
public ITaskItem[] NativeLibraries { get; public set; }
    [OutputAttribute]
public ITaskItem[] ManifestDocuments { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_CacheFile();
    [CompilerGeneratedAttribute]
public void set_CacheFile(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Jars();
    [CompilerGeneratedAttribute]
public void set_Jars(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_NativeLibraries();
    [CompilerGeneratedAttribute]
public void set_NativeLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ManifestDocuments();
    [CompilerGeneratedAttribute]
public void set_ManifestDocuments(ITaskItem[] value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.ReadLibraryProjectImportsCache : AndroidTask {
    [CompilerGeneratedAttribute]
private string <CacheFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Jars>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedAssetDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedResourceDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedEnvironmentFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedResourceDirectoryStamps>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ProguardConfigFiles>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string CacheFile { get; public set; }
    [OutputAttribute]
public ITaskItem[] Jars { get; public set; }
    [OutputAttribute]
public ITaskItem[] ResolvedAssetDirectories { get; public set; }
    [OutputAttribute]
public ITaskItem[] ResolvedResourceDirectories { get; public set; }
    [OutputAttribute]
public ITaskItem[] ResolvedEnvironmentFiles { get; public set; }
    [OutputAttribute]
public ITaskItem[] ResolvedResourceDirectoryStamps { get; public set; }
    [OutputAttribute]
public ITaskItem[] ProguardConfigFiles { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_CacheFile();
    [CompilerGeneratedAttribute]
public void set_CacheFile(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Jars();
    [CompilerGeneratedAttribute]
public void set_Jars(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedAssetDirectories();
    [CompilerGeneratedAttribute]
public void set_ResolvedAssetDirectories(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedResourceDirectories();
    [CompilerGeneratedAttribute]
public void set_ResolvedResourceDirectories(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedEnvironmentFiles();
    [CompilerGeneratedAttribute]
public void set_ResolvedEnvironmentFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedResourceDirectoryStamps();
    [CompilerGeneratedAttribute]
public void set_ResolvedResourceDirectoryStamps(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ProguardConfigFiles();
    [CompilerGeneratedAttribute]
public void set_ProguardConfigFiles(ITaskItem[] value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.RemoveDirFixed : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Directories>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <RemovedDirectories>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] Directories { get; public set; }
    [OutputAttribute]
public ITaskItem[] RemovedDirectories { get; public set; }
    public virtual string get_TaskPrefix();
    public virtual bool RunTask();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Directories();
    [CompilerGeneratedAttribute]
public void set_Directories(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_RemovedDirectories();
    [CompilerGeneratedAttribute]
public void set_RemovedDirectories(ITaskItem[] value);
}
public class Xamarin.Android.Tasks.RemoveRegisterAttribute : AndroidTask {
    private static string RegisterAttribute;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ShrunkFrameworkAssemblies>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] ShrunkFrameworkAssemblies { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ShrunkFrameworkAssemblies();
    [CompilerGeneratedAttribute]
public void set_ShrunkFrameworkAssemblies(ITaskItem[] value);
    public virtual bool RunTask();
    private static void ProcessType(TypeDefinition type);
    private static void ProcessAttributeProvider(ICustomAttributeProvider provider);
    private static bool IsRegisterAttribute(CustomAttribute attribute);
}
public class Xamarin.Android.Tasks.RemoveUnknownFiles : AndroidTask {
    private static bool IsWindows;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Directory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <RemovedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <RemovedDirectories>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public ITaskItem[] Files { get; public set; }
    [RequiredAttribute]
public string Directory { get; public set; }
    public bool RemoveDirectories { get; public set; }
    [OutputAttribute]
public ITaskItem[] RemovedFiles { get; public set; }
    [OutputAttribute]
public ITaskItem[] RemovedDirectories { get; public set; }
    private static RemoveUnknownFiles();
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_Directory();
    [CompilerGeneratedAttribute]
public void set_Directory(string value);
    [CompilerGeneratedAttribute]
public bool get_RemoveDirectories();
    [CompilerGeneratedAttribute]
public void set_RemoveDirectories(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_RemovedFiles();
    [CompilerGeneratedAttribute]
public void set_RemovedFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_RemovedDirectories();
    [CompilerGeneratedAttribute]
public void set_RemovedDirectories(ITaskItem[] value);
    public virtual bool RunTask();
    private bool IsDirectoryEmpty(string dir);
}
public class Xamarin.Android.Tasks.ResolveAndroidTooling : AndroidTask {
    [CompilerGeneratedAttribute]
private string <TargetPlatformVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidSdkPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidSdkBuildToolsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandLineToolsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SequencePointsMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AotAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AndroidApplication>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AndroidUseAapt2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidApiLevelName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidSdkBuildToolsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidSdkBuildToolsBinPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ZipAlignPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidSequencePointsMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LintToolPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApkSignerJar>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AndroidUseApkSigner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Aapt2Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Aapt2ToolPath>k__BackingField;
    protected static bool IsWindows;
    protected static string ZipAlign;
    protected static string Aapt;
    protected static string Aapt2;
    protected static string Android;
    protected static string Lint;
    protected static string ApkSigner;
    private static Regex Aapt2VersionRegex;
    public string TaskPrefix { get; }
    public string TargetPlatformVersion { get; public set; }
    public string AndroidSdkPath { get; public set; }
    public string AndroidSdkBuildToolsVersion { get; public set; }
    public string CommandLineToolsVersion { get; public set; }
    public string ProjectFilePath { get; public set; }
    public string SequencePointsMode { get; public set; }
    public bool AotAssemblies { get; public set; }
    public bool AndroidApplication { get; public set; }
    public bool AndroidUseAapt2 { get; public set; }
    [OutputAttribute]
public string AndroidApiLevel { get; public set; }
    [OutputAttribute]
public string AndroidApiLevelName { get; public set; }
    [OutputAttribute]
public string AndroidSdkBuildToolsPath { get; public set; }
    [OutputAttribute]
public string AndroidSdkBuildToolsBinPath { get; public set; }
    [OutputAttribute]
public string ZipAlignPath { get; public set; }
    [OutputAttribute]
public string AndroidSequencePointsMode { get; public set; }
    [OutputAttribute]
public string LintToolPath { get; public set; }
    [OutputAttribute]
public string ApkSignerJar { get; public set; }
    [OutputAttribute]
public bool AndroidUseApkSigner { get; public set; }
    [OutputAttribute]
public string Aapt2Version { get; public set; }
    [OutputAttribute]
public string Aapt2ToolPath { get; public set; }
    private static ResolveAndroidTooling();
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_TargetPlatformVersion();
    [CompilerGeneratedAttribute]
public void set_TargetPlatformVersion(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidSdkPath();
    [CompilerGeneratedAttribute]
public void set_AndroidSdkPath(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidSdkBuildToolsVersion();
    [CompilerGeneratedAttribute]
public void set_AndroidSdkBuildToolsVersion(string value);
    [CompilerGeneratedAttribute]
public string get_CommandLineToolsVersion();
    [CompilerGeneratedAttribute]
public void set_CommandLineToolsVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectFilePath();
    [CompilerGeneratedAttribute]
public void set_ProjectFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_SequencePointsMode();
    [CompilerGeneratedAttribute]
public void set_SequencePointsMode(string value);
    [CompilerGeneratedAttribute]
public bool get_AotAssemblies();
    [CompilerGeneratedAttribute]
public void set_AotAssemblies(bool value);
    [CompilerGeneratedAttribute]
public bool get_AndroidApplication();
    [CompilerGeneratedAttribute]
public void set_AndroidApplication(bool value);
    [CompilerGeneratedAttribute]
public bool get_AndroidUseAapt2();
    [CompilerGeneratedAttribute]
public void set_AndroidUseAapt2(bool value);
    [CompilerGeneratedAttribute]
public string get_AndroidApiLevel();
    [CompilerGeneratedAttribute]
public void set_AndroidApiLevel(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidApiLevelName();
    [CompilerGeneratedAttribute]
public void set_AndroidApiLevelName(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidSdkBuildToolsPath();
    [CompilerGeneratedAttribute]
public void set_AndroidSdkBuildToolsPath(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidSdkBuildToolsBinPath();
    [CompilerGeneratedAttribute]
public void set_AndroidSdkBuildToolsBinPath(string value);
    [CompilerGeneratedAttribute]
public string get_ZipAlignPath();
    [CompilerGeneratedAttribute]
public void set_ZipAlignPath(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidSequencePointsMode();
    [CompilerGeneratedAttribute]
public void set_AndroidSequencePointsMode(string value);
    [CompilerGeneratedAttribute]
public string get_LintToolPath();
    [CompilerGeneratedAttribute]
public void set_LintToolPath(string value);
    [CompilerGeneratedAttribute]
public string get_ApkSignerJar();
    [CompilerGeneratedAttribute]
public void set_ApkSignerJar(string value);
    [CompilerGeneratedAttribute]
public bool get_AndroidUseApkSigner();
    [CompilerGeneratedAttribute]
public void set_AndroidUseApkSigner(bool value);
    [CompilerGeneratedAttribute]
public string get_Aapt2Version();
    [CompilerGeneratedAttribute]
public void set_Aapt2Version(string value);
    [CompilerGeneratedAttribute]
public string get_Aapt2ToolPath();
    [CompilerGeneratedAttribute]
public void set_Aapt2ToolPath(string value);
    public virtual bool RunTask();
    protected virtual bool Validate();
    protected virtual void LogOutputs();
    private bool GetAapt2Version();
    protected int GetMaxStableApiLevel();
}
public class Xamarin.Android.Tasks.ResolveJdkJvmPath : AndroidTask {
    [CompilerGeneratedAttribute]
private string <JavaSdkPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JdkJvmPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinimumSupportedJavaVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LatestSupportedJavaVersion>k__BackingField;
    public string TaskPrefix { get; }
    public string JavaSdkPath { get; public set; }
    [OutputAttribute]
public string JdkJvmPath { get; public set; }
    [RequiredAttribute]
public string MinimumSupportedJavaVersion { get; public set; }
    [RequiredAttribute]
public string LatestSupportedJavaVersion { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_JavaSdkPath();
    [CompilerGeneratedAttribute]
public void set_JavaSdkPath(string value);
    [CompilerGeneratedAttribute]
public string get_JdkJvmPath();
    [CompilerGeneratedAttribute]
public void set_JdkJvmPath(string value);
    [CompilerGeneratedAttribute]
public string get_MinimumSupportedJavaVersion();
    [CompilerGeneratedAttribute]
public void set_MinimumSupportedJavaVersion(string value);
    [CompilerGeneratedAttribute]
public string get_LatestSupportedJavaVersion();
    [CompilerGeneratedAttribute]
public void set_LatestSupportedJavaVersion(string value);
    public virtual bool RunTask();
    private string GetJvmPath();
}
public class Xamarin.Android.Tasks.ResolveLibraryProjectImports : AndroidTask {
    internal static string AndroidSkipResourceExtraction;
    [CompilerGeneratedAttribute]
private string <ImportsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NativeImportsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputImportDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AarLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyIdentityMapFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CacheFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTimeBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AndroidApplication>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Jars>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedAssetDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedResourceDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedEnvironmentFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedResourceDirectoryStamps>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ProguardConfigFiles>k__BackingField;
    internal static string OriginalFile;
    internal static string AndroidSkipResourceProcessing;
    internal static string ResourceDirectoryArchive;
    private static String[] knownMetadata;
    private AssemblyIdentityMap assemblyMap;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string ImportsDirectory { get; public set; }
    [RequiredAttribute]
public string NativeImportsDirectory { get; public set; }
    [RequiredAttribute]
public string OutputDirectory { get; public set; }
    [RequiredAttribute]
public string OutputImportDirectory { get; public set; }
    [RequiredAttribute]
public ITaskItem[] Assemblies { get; public set; }
    public ITaskItem[] AarLibraries { get; public set; }
    [RequiredAttribute]
public string AssemblyIdentityMapFile { get; public set; }
    public string CacheFile { get; public set; }
    [RequiredAttribute]
public bool DesignTimeBuild { get; public set; }
    public bool AndroidApplication { get; public set; }
    [OutputAttribute]
public ITaskItem[] Jars { get; public set; }
    [OutputAttribute]
public ITaskItem[] ResolvedAssetDirectories { get; public set; }
    [OutputAttribute]
public ITaskItem[] ResolvedResourceDirectories { get; public set; }
    [OutputAttribute]
public ITaskItem[] ResolvedEnvironmentFiles { get; public set; }
    [OutputAttribute]
public ITaskItem[] ResolvedResourceDirectoryStamps { get; public set; }
    [OutputAttribute]
public ITaskItem[] ProguardConfigFiles { get; public set; }
    private static ResolveLibraryProjectImports();
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_ImportsDirectory();
    [CompilerGeneratedAttribute]
public void set_ImportsDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_NativeImportsDirectory();
    [CompilerGeneratedAttribute]
public void set_NativeImportsDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_OutputImportDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputImportDirectory(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Assemblies();
    [CompilerGeneratedAttribute]
public void set_Assemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AarLibraries();
    [CompilerGeneratedAttribute]
public void set_AarLibraries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_AssemblyIdentityMapFile();
    [CompilerGeneratedAttribute]
public void set_AssemblyIdentityMapFile(string value);
    [CompilerGeneratedAttribute]
public string get_CacheFile();
    [CompilerGeneratedAttribute]
public void set_CacheFile(string value);
    [CompilerGeneratedAttribute]
public bool get_DesignTimeBuild();
    [CompilerGeneratedAttribute]
public void set_DesignTimeBuild(bool value);
    [CompilerGeneratedAttribute]
public bool get_AndroidApplication();
    [CompilerGeneratedAttribute]
public void set_AndroidApplication(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Jars();
    [CompilerGeneratedAttribute]
public void set_Jars(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedAssetDirectories();
    [CompilerGeneratedAttribute]
public void set_ResolvedAssetDirectories(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedResourceDirectories();
    [CompilerGeneratedAttribute]
public void set_ResolvedResourceDirectories(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedEnvironmentFiles();
    [CompilerGeneratedAttribute]
public void set_ResolvedEnvironmentFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedResourceDirectoryStamps();
    [CompilerGeneratedAttribute]
public void set_ResolvedResourceDirectoryStamps(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ProguardConfigFiles();
    [CompilerGeneratedAttribute]
public void set_ProguardConfigFiles(ITaskItem[] value);
    public virtual bool RunTask();
    private void Extract(IDictionary`2<string, ITaskItem> jars, ICollection`1<ITaskItem> resolvedResourceDirectories, ICollection`1<ITaskItem> resolvedAssetDirectories, ICollection`1<ITaskItem> resolvedEnvironments, ICollection`1<ITaskItem> proguardConfigFiles);
    private void CreateResourceArchive(string resDir, string outputFile);
    private static void AddJar(IDictionary`2<string, ITaskItem> jars, string destination, string path, string originalFile);
    private static void AddJar(IDictionary`2<string, ITaskItem> jars, string fullPath, string originalFile);
    private void WriteAllText(string path, string contents, bool preserveTimestamp);
}
public class Xamarin.Android.Tasks.ResolveSdks : AndroidTask {
    [CompilerGeneratedAttribute]
private String[] <ReferenceAssemblyPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandLineToolsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinimumSupportedJavaVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LatestSupportedJavaVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandLineToolsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidNdkPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidSdkPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaSdkPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MonoAndroidToolsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MonoAndroidBinPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MonoAndroidLibPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidBinUtilsPath>k__BackingField;
    public string TaskPrefix { get; }
    public String[] ReferenceAssemblyPaths { get; public set; }
    public string CommandLineToolsVersion { get; public set; }
    [RequiredAttribute]
public string MinimumSupportedJavaVersion { get; public set; }
    [RequiredAttribute]
public string LatestSupportedJavaVersion { get; public set; }
    [OutputAttribute]
public string CommandLineToolsPath { get; public set; }
    [OutputAttribute]
public string AndroidNdkPath { get; public set; }
    [OutputAttribute]
public string AndroidSdkPath { get; public set; }
    [OutputAttribute]
public string JavaSdkPath { get; public set; }
    [OutputAttribute]
public string MonoAndroidToolsPath { get; public set; }
    [OutputAttribute]
public string MonoAndroidBinPath { get; public set; }
    [OutputAttribute]
public string MonoAndroidLibPath { get; public set; }
    [OutputAttribute]
public string AndroidBinUtilsPath { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public String[] get_ReferenceAssemblyPaths();
    [CompilerGeneratedAttribute]
public void set_ReferenceAssemblyPaths(String[] value);
    [CompilerGeneratedAttribute]
public string get_CommandLineToolsVersion();
    [CompilerGeneratedAttribute]
public void set_CommandLineToolsVersion(string value);
    [CompilerGeneratedAttribute]
public string get_MinimumSupportedJavaVersion();
    [CompilerGeneratedAttribute]
public void set_MinimumSupportedJavaVersion(string value);
    [CompilerGeneratedAttribute]
public string get_LatestSupportedJavaVersion();
    [CompilerGeneratedAttribute]
public void set_LatestSupportedJavaVersion(string value);
    [CompilerGeneratedAttribute]
public string get_CommandLineToolsPath();
    [CompilerGeneratedAttribute]
public void set_CommandLineToolsPath(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidNdkPath();
    [CompilerGeneratedAttribute]
public void set_AndroidNdkPath(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidSdkPath();
    [CompilerGeneratedAttribute]
public void set_AndroidSdkPath(string value);
    [CompilerGeneratedAttribute]
public string get_JavaSdkPath();
    [CompilerGeneratedAttribute]
public void set_JavaSdkPath(string value);
    [CompilerGeneratedAttribute]
public string get_MonoAndroidToolsPath();
    [CompilerGeneratedAttribute]
public void set_MonoAndroidToolsPath(string value);
    [CompilerGeneratedAttribute]
public string get_MonoAndroidBinPath();
    [CompilerGeneratedAttribute]
public void set_MonoAndroidBinPath(string value);
    [CompilerGeneratedAttribute]
public string get_MonoAndroidLibPath();
    [CompilerGeneratedAttribute]
public void set_MonoAndroidLibPath(string value);
    [CompilerGeneratedAttribute]
public string get_AndroidBinUtilsPath();
    [CompilerGeneratedAttribute]
public void set_AndroidBinUtilsPath(string value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.ResourceDesignerImportGenerator : object {
    private CodeTypeDeclaration primary;
    private string primary_name;
    private HashSet`1<string> resourceFields;
    private TaskLoggingHelper Log;
    public ResourceDesignerImportGenerator(string ns, CodeTypeDeclaration applicationResourceDesigner, TaskLoggingHelper log);
    private string CreateIdentifier(string type, string field);
    public void CreateImportMethods(IEnumerable`1<ITaskItem> libraries);
    private string GetResourceDesignerClass(MetadataReader reader);
    private void CreateImportFor(string declaringTypeFullName, TypeDefinition type, CodeMemberMethod method, MetadataReader reader, bool hasAlias);
}
public class Xamarin.Android.Tasks.ResourceIdentifier : object {
    private static string FormattingCharacter;
    private static string ConnectingCharacter;
    private static string DecimalDigitCharacter;
    private static string CombiningCharacter;
    private static string LetterCharacter;
    private static string IdentifierPartCharacter;
    private static string IdentifierStartCharacter;
    private static string Identifier;
    private static Regex validIdentifier;
    private static ResourceIdentifier();
    public static string CreateValidIdentifier(string identifier);
    internal static string GetResourceName(string type, string name, Dictionary`2<string, string> map, TaskLoggingHelper log);
}
internal class Xamarin.Android.Tasks.ResourceParser : object {
    [CompilerGeneratedAttribute]
private TaskLoggingHelper <Log>k__BackingField;
    public TaskLoggingHelper Log { get; public set; }
    [CompilerGeneratedAttribute]
public TaskLoggingHelper get_Log();
    [CompilerGeneratedAttribute]
public void set_Log(TaskLoggingHelper value);
    internal int ToInt32(string value, int base);
    internal static string GetNestedTypeName(string name);
}
public enum Xamarin.Android.Tasks.ResourceType : Enum {
    public int value__;
    public static ResourceType System;
    public static ResourceType Custom;
}
public class Xamarin.Android.Tasks.RtxtParser : object {
    private static Char[] EmptyChar;
    private static Char[] CurlyBracketsChar;
    private static Char[] CommaChar;
    private static Regex ValidChars;
    private TaskLoggingHelper log;
    private Dictionary`2<string, string> map;
    public static HashSet`1<string> knownTypes;
    private static RtxtParser();
    public IEnumerable`1<R> Parse(string file, TaskLoggingHelper logger, Dictionary`2<string, string> mapping);
    private void ProcessRtxtFile(string file, IList`1<R> result);
}
public class Xamarin.Android.Tasks.RtxtWriter : object {
    public void Write(string file, IList`1<R> items);
}
public enum Xamarin.Android.Tasks.RType : Enum {
    public int value__;
    public static RType Integer;
    public static RType Array;
}
public class Xamarin.Android.Tasks.RuntimeIdentifierToAbi : AndroidTask {
    [CompilerGeneratedAttribute]
private string <RuntimeIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <RuntimeIdentifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SupportedAbis>k__BackingField;
    public string TaskPrefix { get; }
    public string RuntimeIdentifier { get; public set; }
    public String[] RuntimeIdentifiers { get; public set; }
    [OutputAttribute]
public string SupportedAbis { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_RuntimeIdentifier();
    [CompilerGeneratedAttribute]
public void set_RuntimeIdentifier(string value);
    [CompilerGeneratedAttribute]
public String[] get_RuntimeIdentifiers();
    [CompilerGeneratedAttribute]
public void set_RuntimeIdentifiers(String[] value);
    [CompilerGeneratedAttribute]
public string get_SupportedAbis();
    [CompilerGeneratedAttribute]
public void set_SupportedAbis(string value);
    public virtual bool RunTask();
    [CompilerGeneratedAttribute]
private string <RunTask>b__14_0(string rid);
}
public enum Xamarin.Android.Tasks.SequencePointsMode : Enum {
    public int value__;
    public static SequencePointsMode None;
    public static SequencePointsMode Normal;
    public static SequencePointsMode Offline;
}
public class Xamarin.Android.Tasks.SetVsMonoAndroidRegistryKey : AndroidTask {
    [CompilerGeneratedAttribute]
private string <InstallationID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VisualStudioVersion>k__BackingField;
    private static string EnvironmentVariable;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string InstallationID { get; public set; }
    [RequiredAttribute]
public string VisualStudioVersion { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_InstallationID();
    [CompilerGeneratedAttribute]
public void set_InstallationID(string value);
    [CompilerGeneratedAttribute]
public string get_VisualStudioVersion();
    [CompilerGeneratedAttribute]
public void set_VisualStudioVersion(string value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.SplitProperty : AndroidTask {
    private static Char[] Delimiters;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Output>k__BackingField;
    public string TaskPrefix { get; }
    public string Value { get; public set; }
    [OutputAttribute]
public String[] Output { get; public set; }
    private static SplitProperty();
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public String[] get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(String[] value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.StripNativeLibraries : AndroidToolTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <SourceFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <DestinationFiles>k__BackingField;
    private string triple;
    private ITaskItem source;
    private ITaskItem destination;
    public string TaskPrefix { get; }
    public ITaskItem[] SourceFiles { get; public set; }
    public ITaskItem[] DestinationFiles { get; public set; }
    protected string ToolName { get; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_SourceFiles();
    [CompilerGeneratedAttribute]
public void set_SourceFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_DestinationFiles();
    [CompilerGeneratedAttribute]
public void set_DestinationFiles(ITaskItem[] value);
    public virtual bool RunTask();
    protected virtual string get_ToolName();
    protected virtual string GenerateFullPathToTool();
    protected virtual string GenerateCommandLineCommands();
    private string GetNdkTripleFromAbi(string abi);
    private string GetToolName(string toolName);
}
internal class Xamarin.Android.Tasks.TaskItemComparer : object {
    public static TaskItemComparer DefaultComparer;
    private static TaskItemComparer();
    public sealed virtual bool Equals(ITaskItem a, ITaskItem b);
    public sealed virtual int GetHashCode(ITaskItem value);
}
internal class Xamarin.Android.Tasks.TypeMapGenerator : object {
    private static string TypeMapMagicString;
    private static string TypeMapIndexMagicString;
    private static UInt32 TypeMapFormatVersion;
    private static string TypemapExtension;
    private static UInt32 InvalidJavaToManagedMappingIndex;
    private Action`1<string> logger;
    private Encoding outputEncoding;
    private Byte[] moduleMagicString;
    private Byte[] typemapIndexMagicString;
    private String[] supportedAbis;
    [CompilerGeneratedAttribute]
private IList`1<string> <GeneratedBinaryTypeMaps>k__BackingField;
    public IList`1<string> GeneratedBinaryTypeMaps { get; }
    public TypeMapGenerator(Action`1<string> logger, String[] supportedAbis);
    [CompilerGeneratedAttribute]
public IList`1<string> get_GeneratedBinaryTypeMaps();
    private void UpdateApplicationConfig(TypeDefinition javaType, ApplicationConfigTaskState appConfState);
    public bool Generate(bool debugBuild, bool skipJniAddNativeMethodRegistrationAttributeScan, List`1<JavaType> javaTypes, TypeDefinitionCache cache, string outputDirectory, bool generateNativeAssembly, ApplicationConfigTaskState& appConfState);
    private bool GenerateDebug(bool skipJniAddNativeMethodRegistrationAttributeScan, List`1<JavaType> javaTypes, TypeDefinitionCache cache, string outputDirectory, bool generateNativeAssembly, ApplicationConfigTaskState appConfState);
    private bool GenerateDebugFiles(bool skipJniAddNativeMethodRegistrationAttributeScan, List`1<JavaType> javaTypes, TypeDefinitionCache cache, string outputDirectory, ApplicationConfigTaskState appConfState);
    private bool GenerateDebugNativeAssembly(bool skipJniAddNativeMethodRegistrationAttributeScan, List`1<JavaType> javaTypes, TypeDefinitionCache cache, string outputDirectory, ApplicationConfigTaskState appConfState);
    private void SyncDebugDuplicates(Dictionary`2<string, List`1<TypeMapDebugEntry>> javaDuplicates);
    private void HandleDebugDuplicates(Dictionary`2<string, List`1<TypeMapDebugEntry>> javaDuplicates, TypeMapDebugEntry entry, TypeDefinition td, TypeDefinitionCache cache);
    private void PrepareDebugMaps(ModuleDebugData module);
    private TypeMapDebugEntry GetDebugEntry(TypeDefinition td, TypeDefinitionCache cache);
    private string GetManagedTypeName(TypeDefinition td);
    private void ProcessReleaseType(ReleaseGenerationState state, TypeDefinition td, AndroidTargetArch typeArch, ApplicationConfigTaskState appConfState, TypeDefinitionCache cache);
    private bool GenerateRelease(bool skipJniAddNativeMethodRegistrationAttributeScan, List`1<JavaType> javaTypes, TypeDefinitionCache cache, string outputDirectory, ApplicationConfigTaskState appConfState);
    private bool ShouldSkipInJavaToManaged(TypeDefinition td);
    private string GetOutputFilePath(string baseFileName, string abi);
    private void GenerateNativeAssembly(AndroidTargetArch arch, LlvmIrComposer composer, LlvmIrModule typeMapModule, string baseFileName);
    private void GenerateNativeAssembly(LlvmIrComposer composer, LlvmIrModule typeMapModule, string baseFileName);
    private void WriteNativeAssembly(AndroidTargetArch arch, LlvmIrComposer composer, LlvmIrModule typeMapModule, string outputFile);
    private static string ArchToAbi(AndroidTargetArch arch);
    private void OutputModules(Dictionary`2<string, ModuleDebugData> modules, BinaryWriter indexWriter, int moduleFileNameWidth);
    private void OutputModule(ModuleDebugData moduleData);
    private void OutputModule(BinaryWriter bw, ModuleDebugData moduleData);
    private void PadField(BinaryWriter bw, int valueWidth, int maxWidth);
}
internal abstract class Xamarin.Android.Tasks.TypeMappingAssemblyGenerator : LlvmIrComposer {
}
internal class Xamarin.Android.Tasks.TypeMappingDebugNativeAssemblyGenerator : LlvmIrComposer {
    private static string JavaToManagedSymbol;
    private static string ManagedToJavaSymbol;
    private static string TypeMapSymbol;
    private ModuleDebugData data;
    private StructureInfo typeMapEntryStructureInfo;
    private StructureInfo typeMapStructureInfo;
    private List`1<StructureInstance`1<TypeMapEntry>> javaToManagedMap;
    private List`1<StructureInstance`1<TypeMapEntry>> managedToJavaMap;
    private StructureInstance`1<TypeMap> type_map;
    public TypeMappingDebugNativeAssemblyGenerator(ModuleDebugData data);
    protected virtual void Construct(LlvmIrModule module);
    private void MapStructures(LlvmIrModule module);
}
internal class Xamarin.Android.Tasks.TypeMappingReleaseNativeAssemblyGenerator : LlvmIrComposer {
    private NativeTypeMappingData mappingData;
    private StructureInfo typeMapJavaStructureInfo;
    private StructureInfo typeMapModuleStructureInfo;
    private StructureInfo typeMapModuleEntryStructureInfo;
    private JavaNameHash32Comparer javaNameHash32Comparer;
    private JavaNameHash64Comparer javaNameHash64Comparer;
    private ulong moduleCounter;
    public TypeMappingReleaseNativeAssemblyGenerator(NativeTypeMappingData mappingData);
    protected virtual void Construct(LlvmIrModule module);
    private void UpdateJavaIndexes(LlvmIrVariable variable, LlvmIrModuleTarget target, object callerState);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
private string GetJavaHashesItemComment(LlvmIrVariable v, LlvmIrModuleTarget target, ulong index, object value, object callerState);
    private void GenerateAndSortJavaHashes(LlvmIrVariable variable, LlvmIrModuleTarget target, object callerState);
    private ConstructionState EnsureConstructionState(object callerState);
    private void InitJavaMap(ConstructionState cs);
    private void InitMapModules(ConstructionState cs);
    private void MapStructures(LlvmIrModule module);
    private void PrepareMapModuleData(string moduleDataSymbolLabel, IEnumerable`1<TypeMapReleaseEntry> moduleEntries, ConstructionState cs);
    private void PrepareModules(ConstructionState cs);
    private void HashJavaNames(ConstructionState cs);
    [CompilerGeneratedAttribute]
private UInt32 <UpdateJavaIndexes>g__GetJavaEntryIndex|18_0(TypeMapJava javaEntry, <>c__DisplayClass18_0& );
    [CompilerGeneratedAttribute]
internal static ulong <HashJavaNames>g__HashName|27_0(string name, bool is64Bit);
    [CompilerGeneratedAttribute]
internal static ulong <HashJavaNames>g__HashBytes|27_1(Byte[] bytes, bool is64Bit);
}
public class Xamarin.Android.Tasks.UnzipToFolder : AndroidTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <DestinationDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Files>k__BackingField;
    public string TaskPrefix { get; }
    public ITaskItem[] Sources { get; public set; }
    public ITaskItem[] DestinationDirectories { get; public set; }
    public ITaskItem[] Files { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_DestinationDirectories();
    [CompilerGeneratedAttribute]
public void set_DestinationDirectories(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(ITaskItem[] value);
    public virtual bool RunTask();
}
public class Xamarin.Android.Tasks.ValidateJavaVersion : AndroidTask {
    [CompilerGeneratedAttribute]
private string <JavaSdkPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaToolExe>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavacToolExe>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPlatformVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LatestSupportedJavaVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinimumSupportedJavaVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinimumRequiredJdkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JdkVersion>k__BackingField;
    private static Regex JavaVersionRegex;
    internal static Regex JavacVersionRegex;
    public string TaskPrefix { get; }
    public string JavaSdkPath { get; public set; }
    public string JavaToolExe { get; public set; }
    public string JavacToolExe { get; public set; }
    public string TargetPlatformVersion { get; public set; }
    [RequiredAttribute]
public string LatestSupportedJavaVersion { get; public set; }
    [RequiredAttribute]
public string MinimumSupportedJavaVersion { get; public set; }
    [OutputAttribute]
public string MinimumRequiredJdkVersion { get; public set; }
    [OutputAttribute]
public string JdkVersion { get; public set; }
    private static ValidateJavaVersion();
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_JavaSdkPath();
    [CompilerGeneratedAttribute]
public void set_JavaSdkPath(string value);
    [CompilerGeneratedAttribute]
public string get_JavaToolExe();
    [CompilerGeneratedAttribute]
public void set_JavaToolExe(string value);
    [CompilerGeneratedAttribute]
public string get_JavacToolExe();
    [CompilerGeneratedAttribute]
public void set_JavacToolExe(string value);
    [CompilerGeneratedAttribute]
public string get_TargetPlatformVersion();
    [CompilerGeneratedAttribute]
public void set_TargetPlatformVersion(string value);
    [CompilerGeneratedAttribute]
public string get_LatestSupportedJavaVersion();
    [CompilerGeneratedAttribute]
public void set_LatestSupportedJavaVersion(string value);
    [CompilerGeneratedAttribute]
public string get_MinimumSupportedJavaVersion();
    [CompilerGeneratedAttribute]
public void set_MinimumSupportedJavaVersion(string value);
    [CompilerGeneratedAttribute]
public string get_MinimumRequiredJdkVersion();
    [CompilerGeneratedAttribute]
public void set_MinimumRequiredJdkVersion(string value);
    [CompilerGeneratedAttribute]
public string get_JdkVersion();
    [CompilerGeneratedAttribute]
public void set_JdkVersion(string value);
    public virtual bool RunTask();
    private bool ValidateJava();
    protected virtual bool ValidateJava(string javaExe, Regex versionRegex);
    protected Version GetVersionFromTool(string javaExe, Regex versionRegex);
}
public class Xamarin.Android.Tasks.WriteLockFile : AndroidTask {
    [CompilerGeneratedAttribute]
private string <LockFile>k__BackingField;
    public string TaskPrefix { get; }
    [RequiredAttribute]
public string LockFile { get; public set; }
    public virtual string get_TaskPrefix();
    [CompilerGeneratedAttribute]
public string get_LockFile();
    [CompilerGeneratedAttribute]
public void set_LockFile(string value);
    public virtual bool RunTask();
}
internal class Xamarin.Android.Tasks.XAAssemblyResolver : object {
    [CompilerGeneratedAttribute]
private ICollection`1<string> <FrameworkSearchDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<AndroidTargetArch, ICollection`1<string>> <AbiSearchDirectories>k__BackingField;
    private List`1<MemoryMappedViewStream> viewStreams;
    private bool disposed;
    private TaskLoggingHelper log;
    private bool loadDebugSymbols;
    private ReaderParameters readerParameters;
    private Dictionary`2<string, CacheEntry> cache;
    public ICollection`1<string> FrameworkSearchDirectories { get; }
    public IDictionary`2<AndroidTargetArch, ICollection`1<string>> AbiSearchDirectories { get; }
    public XAAssemblyResolver(TaskLoggingHelper log, bool loadDebugSymbols, ReaderParameters loadReaderParameters);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_FrameworkSearchDirectories();
    [CompilerGeneratedAttribute]
public IDictionary`2<AndroidTargetArch, ICollection`1<string>> get_AbiSearchDirectories();
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public AssemblyDefinition Resolve(string fullName, ReaderParameters parameters);
    public sealed virtual AssemblyDefinition Resolve(AssemblyNameReference name);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public sealed virtual AssemblyDefinition Resolve(AssemblyNameReference name, ReaderParameters parameters);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public AssemblyDefinition Resolve(AndroidTargetArch arch, AssemblyNameReference name, ReaderParameters parameters);
    private AssemblyDefinition FindAndLoadFromDirectories(AndroidTargetArch arch, ICollection`1<string> directories, AssemblyNameReference name, ReaderParameters parameters);
    private static FileNotFoundException CreateLoadException(AssemblyNameReference name);
    private static string SearchDirectory(string name, string directory);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
public virtual AssemblyDefinition Load(AndroidTargetArch arch, string filePath, ReaderParameters readerParameters);
    private AssemblyDefinition ReadAssembly(string filePath, ReaderParameters readerParametersOverride);
    private AssemblyDefinition LoadFromMemoryMappedFile(string file, ReaderParameters options);
    [<a2d99a2f-4268-4943-a44c-7116844a319b>NullableContextAttribute("2")]
private AssemblyDefinition SelectAssembly(AndroidTargetArch arch, string assemblyName, CacheEntry entry, bool loading);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class Xamarin.Android.Tasks.XAJavaTypeScanner : object {
    [CompilerGeneratedAttribute]
private bool <ErrorOnCustomJavaObject>k__BackingField;
    private TaskLoggingHelper log;
    private TypeDefinitionCache cache;
    public bool ErrorOnCustomJavaObject { get; public set; }
    public XAJavaTypeScanner(TaskLoggingHelper log, TypeDefinitionCache cache);
    [CompilerGeneratedAttribute]
public bool get_ErrorOnCustomJavaObject();
    [CompilerGeneratedAttribute]
public void set_ErrorOnCustomJavaObject(bool value);
    public List`1<JavaType> GetJavaTypes(ICollection`1<ITaskItem> inputAssemblies, XAAssemblyResolver resolver);
    private void AddJavaType(TypeDefinition type, Dictionary`2<string, TypeData> types, AndroidTargetArch arch);
}
public class Xamarin.Android.Tasks.ZipArchiveEx : object {
    private static int DEFAULT_FLUSH_SIZE_LIMIT;
    private static int DEFAULT_FLUSH_FILES_LIMIT;
    private ZipArchive zip;
    private string archive;
    private long filesWrittenTotalSize;
    private long filesWrittenTotalCount;
    [CompilerGeneratedAttribute]
private bool <AutoFlush>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreateDirectoriesInZip>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ZipFlushSizeLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ZipFlushFilesLimit>k__BackingField;
    public ZipArchive Archive { get; }
    public bool AutoFlush { get; public set; }
    public bool CreateDirectoriesInZip { get; public set; }
    public int ZipFlushSizeLimit { get; public set; }
    public int ZipFlushFilesLimit { get; public set; }
    public ZipArchiveEx(string archive);
    public ZipArchiveEx(string archive, FileMode filemode);
    public ZipArchive get_Archive();
    [CompilerGeneratedAttribute]
public bool get_AutoFlush();
    [CompilerGeneratedAttribute]
public void set_AutoFlush(bool value);
    [CompilerGeneratedAttribute]
public bool get_CreateDirectoriesInZip();
    [CompilerGeneratedAttribute]
public void set_CreateDirectoriesInZip(bool value);
    [CompilerGeneratedAttribute]
public int get_ZipFlushSizeLimit();
    [CompilerGeneratedAttribute]
public void set_ZipFlushSizeLimit(int value);
    [CompilerGeneratedAttribute]
public int get_ZipFlushFilesLimit();
    [CompilerGeneratedAttribute]
public void set_ZipFlushFilesLimit(int value);
    public void Flush();
    private string ArchiveNameForFile(string filename, string directoryPathInZip);
    private void AddFileAndFlush(string filename, long fileLength, string archiveFileName, CompressionMethod compressionMethod);
    public void AddFileAndFlush(string filename, string archiveFileName, CompressionMethod compressionMethod);
    public void AddEntryAndFlush(Byte[] data, string archiveFileName);
    public void AddEntryAndFlush(string archiveFileName, Stream data, CompressionMethod method);
    private void AddFiles(string folder, string folderInArchive, CompressionMethod method);
    public void RemoveFile(string folder, string file);
    public void AddDirectory(string folder, string folderInArchive, CompressionMethod method);
    public void FixupWindowsPathSeparators(Action`2<string, string> onRename);
    public bool SkipExistingFile(string file, string fileInArchive, CompressionMethod compressionMethod);
    public bool SkipExistingEntry(ZipEntry sourceEntry, string fileInArchive);
    private static DateTime WithoutMilliseconds(DateTime t);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal static class Xamarin.Android.Tools.Features : object {
}
internal class Xamarin.Android.Tools.FileUtil : object {
    public static string GetTempFilenameForWrite(string fileName);
    public static void SystemRename(string sourceFile, string destFile);
    private static int rename(string old, string new);
}
public static class Xamarin.Android.Tools.PathUtil : object {
    private static int DevicePrefixLength;
    private static int UncPrefixLength;
    private static int UncExtendedPrefixLength;
    internal static char VolumeSeparatorChar;
    private static bool IsWindows;
    private static PathUtil();
    public static string GetRelativePath(string relativeTo, string path, StringComparison comparisonType);
    private static bool AreRootsEqual(string first, string second, StringComparison comparisonType);
    private static int GetCommonPathLength(string first, string second, bool ignoreCase);
    private static int EqualStartingCharacterCount(string first, string second, bool ignoreCase);
    private static bool EndsInDirectorySeparator(string path);
    private static bool IsDirectorySeparator(char c);
    private static int GetRootLength(string path);
    internal static bool IsValidDriveChar(char value);
    private static bool IsExtended(string path);
    private static bool IsDevice(string path);
    private static bool IsDeviceUNC(string path);
    private static int GetRootLength_ForWindows(string path);
}
internal class Xamarin.Android.Tools.SatelliteAssembly : object {
    private static Regex SatelliteChecker;
    private static SatelliteAssembly();
    public static bool TryGetSatelliteCultureAndFileName(string assemblyPath, String& culture, String& fileName);
}
internal static class Xamarin.Android.Tools.XABuildConfig : object {
    public static string SupportedABIs;
    public static string NDKRevision;
    public static string NDKRelease;
    public static string XamarinAndroidVersion;
    public static string XamarinAndroidCommitHash;
    public static string XamarinAndroidBranch;
    public static string AndroidSdkBuildToolsVersion;
    public static int AndroidMinimumDotNetApiLevel;
    public static int AndroidLatestStableApiLevel;
    public static int AndroidLatestUnstableApiLevel;
    public static int AndroidDefaultTargetDotnetApiLevel;
    public static Version NDKVersion;
    public static Dictionary`2<string, int> ArchAPILevels;
    private static XABuildConfig();
}
