[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.Android.Tools.AndroidAppManifest : object {
    private AndroidVersions versions;
    private XDocument doc;
    private XElement manifest;
    private XElement application;
    private XElement usesSdk;
    private static XNamespace aNS;
    private static XName aName;
    public static XNamespace AndroidXNamespace { get; }
    public static XName NameXName { get; }
    public XDocument Document { get; }
    [NullableAttribute("2")]
public string PackageName { get; public set; }
    [NullableAttribute("2")]
public string ApplicationLabel { get; public set; }
    [NullableAttribute("2")]
public string ApplicationIcon { get; public set; }
    [NullableAttribute("2")]
public string ApplicationRoundIcon { get; public set; }
    [NullableAttribute("2")]
public string ApplicationTheme { get; public set; }
    [NullableAttribute("2")]
public string VersionName { get; public set; }
    [NullableAttribute("2")]
public string VersionCode { get; public set; }
    [NullableAttribute("2")]
public string InstallLocation { get; public set; }
    public Nullable`1<int> MinSdkVersion { get; public set; }
    public Nullable`1<int> TargetSdkVersion { get; public set; }
    public IEnumerable`1<string> AndroidPermissions { get; }
    public IEnumerable`1<string> AndroidPermissionsQualified { get; }
    public Nullable`1<bool> Debuggable { get; public set; }
    private AndroidAppManifest(AndroidVersions versions, XDocument doc);
    private static AndroidAppManifest();
    public static XNamespace get_AndroidXNamespace();
    public static XName get_NameXName();
    public XDocument get_Document();
    public static string CanonicalizePackageName(string packageNameOrAssemblyName);
    public static AndroidAppManifest Create(string packageName, string appLabel, AndroidVersions versions);
    public static AndroidAppManifest Load(string filename, AndroidVersions versions);
    public static AndroidAppManifest Load(XDocument doc, AndroidVersions versions);
    public void Write(XmlWriter writer);
    public void WriteToFile(string fileName);
    [NullableContextAttribute("2")]
private static string NullIfEmpty(string value);
    [NullableContextAttribute("2")]
public string get_PackageName();
    [NullableContextAttribute("2")]
public void set_PackageName(string value);
    [NullableContextAttribute("2")]
public string get_ApplicationLabel();
    [NullableContextAttribute("2")]
public void set_ApplicationLabel(string value);
    [NullableContextAttribute("2")]
public string get_ApplicationIcon();
    [NullableContextAttribute("2")]
public void set_ApplicationIcon(string value);
    [NullableContextAttribute("2")]
public string get_ApplicationRoundIcon();
    [NullableContextAttribute("2")]
public void set_ApplicationRoundIcon(string value);
    [NullableContextAttribute("2")]
public string get_ApplicationTheme();
    [NullableContextAttribute("2")]
public void set_ApplicationTheme(string value);
    [NullableContextAttribute("2")]
public string get_VersionName();
    [NullableContextAttribute("2")]
public void set_VersionName(string value);
    [NullableContextAttribute("2")]
public string get_VersionCode();
    [NullableContextAttribute("2")]
public void set_VersionCode(string value);
    [NullableContextAttribute("2")]
public string get_InstallLocation();
    [NullableContextAttribute("2")]
public void set_InstallLocation(string value);
    public Nullable`1<int> get_MinSdkVersion();
    public void set_MinSdkVersion(Nullable`1<int> value);
    public Nullable`1<int> get_TargetSdkVersion();
    public void set_TargetSdkVersion(Nullable`1<int> value);
    [NullableContextAttribute("2")]
private Nullable`1<int> ParseSdkVersion(XAttribute attribute);
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.AndroidAppManifest/<get_AndroidPermissions>d__53")]
public IEnumerable`1<string> get_AndroidPermissions();
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.AndroidAppManifest/<get_AndroidPermissionsQualified>d__55")]
public IEnumerable`1<string> get_AndroidPermissionsQualified();
    public Nullable`1<bool> get_Debuggable();
    public void set_Debuggable(Nullable`1<bool> value);
    public void SetAndroidPermissions(IEnumerable`1<string> permissions);
    private void AddAndroidPermissions(IEnumerable`1<string> permissions);
    private string FullyQualifyPermission(string permission);
    private void RemoveAndroidPermissions(IEnumerable`1<string> permissions);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("Use GetLaunchableFastdevActivityName or GetLaunchableUserActivityName")]
public string GetLaunchableActivityName();
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This should not be needed anymore; Activity execution is not part of installation.")]
public string GetLaunchableFastDevActivityName();
    [NullableContextAttribute("2")]
public string GetLaunchableUserActivityName();
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.AndroidAppManifest/<GetLaunchableActivities>d__66")]
private IEnumerable`1<XElement> GetLaunchableActivities();
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.AndroidAppManifest/<GetAllActivityNames>d__67")]
public IEnumerable`1<string> GetAllActivityNames();
    public IEnumerable`1<string> GetLaunchableActivityNames();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Xamarin.Android.Tools.AndroidSdk.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InvalidJdkDirectory_path_locator_message { get; }
    internal static string InvalidMonodroidConfigFile_path_message { get; }
    internal static string InvalidXmlLibExecJdk_path_args_message { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InvalidJdkDirectory_path_locator_message();
    internal static string get_InvalidMonodroidConfigFile_path_message();
    internal static string get_InvalidXmlLibExecJdk_path_args_message();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Xamarin.Android.Tools.AndroidSdkBase : object {
    private static int MinimumCompatibleNDKMajorVersion;
    private static int MaximumCompatibleNDKMajorVersion;
    private static Char[] SourcePropertiesKeyValueSplit;
    protected static String[] AndroidSdkEnvVars;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] allAndroidSdks;
    public Action`2<TraceLevel, string> Logger;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <AndroidSdkPath>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <AndroidNdkPath>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <JavaSdkPath>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <JavaBinPath>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <AndroidPlatformToolsPath>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <AndroidPlatformToolsPathShort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Adb>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ZipAlign>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JarSigner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyTool>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NdkStack>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Javac>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNdk64Bit>k__BackingField;
    public String[] AllAndroidSdks { get; }
    [NullableAttribute("2")]
public string AndroidSdkPath { get; private set; }
    [NullableAttribute("2")]
public string AndroidNdkPath { get; private set; }
    [NullableAttribute("2")]
public string JavaSdkPath { get; private set; }
    [NullableAttribute("2")]
public string JavaBinPath { get; private set; }
    [NullableAttribute("2")]
public string AndroidPlatformToolsPath { get; private set; }
    [NullableAttribute("2")]
public string AndroidPlatformToolsPathShort { get; private set; }
    public string Adb { get; protected set; }
    public string ZipAlign { get; protected set; }
    public string JarSigner { get; protected set; }
    public string KeyTool { get; protected set; }
    public string NdkStack { get; protected set; }
    public string NdkHostPlatform32Bit { get; }
    public string NdkHostPlatform64Bit { get; }
    public string Javac { get; protected set; }
    [NullableAttribute("2")]
public string PreferedAndroidSdkPath { get; }
    [NullableAttribute("2")]
public string PreferedAndroidNdkPath { get; }
    [NullableAttribute("2")]
public string PreferedJavaSdkPath { get; }
    public bool IsNdk64Bit { get; private set; }
    public string NdkHostPlatform { get; }
    public AndroidSdkBase(Action`2<TraceLevel, string> logger);
    private static AndroidSdkBase();
    public String[] get_AllAndroidSdks();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_AndroidSdkPath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_AndroidSdkPath(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_AndroidNdkPath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_AndroidNdkPath(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_JavaSdkPath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_JavaSdkPath(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_JavaBinPath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_JavaBinPath(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_AndroidPlatformToolsPath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_AndroidPlatformToolsPath(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_AndroidPlatformToolsPathShort();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_AndroidPlatformToolsPathShort(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Adb();
    [CompilerGeneratedAttribute]
protected virtual void set_Adb(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ZipAlign();
    [CompilerGeneratedAttribute]
protected virtual void set_ZipAlign(string value);
    [CompilerGeneratedAttribute]
public virtual string get_JarSigner();
    [CompilerGeneratedAttribute]
protected virtual void set_JarSigner(string value);
    [CompilerGeneratedAttribute]
public virtual string get_KeyTool();
    [CompilerGeneratedAttribute]
protected virtual void set_KeyTool(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NdkStack();
    [CompilerGeneratedAttribute]
protected virtual void set_NdkStack(string value);
    public abstract virtual string get_NdkHostPlatform32Bit();
    public abstract virtual string get_NdkHostPlatform64Bit();
    [CompilerGeneratedAttribute]
public virtual string get_Javac();
    [CompilerGeneratedAttribute]
protected virtual void set_Javac(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_PreferedAndroidSdkPath();
    [NullableContextAttribute("2")]
public abstract virtual string get_PreferedAndroidNdkPath();
    [NullableContextAttribute("2")]
public abstract virtual string get_PreferedJavaSdkPath();
    [NullableContextAttribute("2")]
public virtual void Initialize(string androidSdkPath, string androidNdkPath, string javaSdkPath);
    [NullableContextAttribute("2")]
private static string GetValidPath(Func`3<string, string, bool> pathValidator, string ctorParam, Func`1<string> getPreferredPath, Func`1<IEnumerable`1<string>> getAllPaths);
    [NullableContextAttribute("2")]
private string GetValidNdkPath(string ctorParam);
    protected abstract virtual IEnumerable`1<string> GetAllAvailableAndroidSdks();
    protected abstract virtual string GetShortFormPath(string path);
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.AndroidSdkBase/<GetSdkFromEnvironmentVariables>d__72")]
protected IEnumerable`1<string> GetSdkFromEnvironmentVariables();
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.AndroidSdkBase/<GetAllAvailableAndroidNdks>d__73")]
protected virtual IEnumerable`1<string> GetAllAvailableAndroidNdks();
    private string FindBestNDK(string androidSdkPath);
    [NullableContextAttribute("2")]
public abstract virtual void SetPreferredAndroidSdkPath(string path);
    [NullableContextAttribute("2")]
public abstract virtual void SetPreferredJavaSdkPath(string path);
    [NullableContextAttribute("2")]
public abstract virtual void SetPreferredAndroidNdkPath(string path);
    [CompilerGeneratedAttribute]
public bool get_IsNdk64Bit();
    [CompilerGeneratedAttribute]
private void set_IsNdk64Bit(bool value);
    public string get_NdkHostPlatform();
    private IEnumerable`1<string> GetJavaSdkPaths();
    public bool ValidateAndroidSdkLocation(string locator, string loc);
    public virtual bool ValidateJavaSdkLocation(string locator, string loc);
    public bool ValidateAndroidNdkLocation(string locator, string loc);
    [NullableContextAttribute("2")]
internal static string NullIfEmpty(string s);
    private static string GetExecutablePath(string dir, string exe);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <get_AllAndroidSdks>b__6_0(string d);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private string <Initialize>b__67_0();
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Initialize>b__67_1();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private string <Initialize>b__67_2();
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Initialize>b__67_3();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <Initialize>b__67_4(string dir);
    [CompilerGeneratedAttribute]
private void <FindBestNDK>g__LoadNDKVersion|74_1(string path, <>c__DisplayClass74_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.Android.Tools.AndroidSdkInfo : object {
    private AndroidSdkBase sdk;
    [NullableAttribute("2")]
public string AndroidNdkPath { get; }
    public string AndroidSdkPath { get; }
    public String[] AllAndroidSdkPaths { get; }
    public string JavaSdkPath { get; }
    public string AndroidNdkHostPlatform { get; }
    [NullableContextAttribute("2")]
public AndroidSdkInfo(Action`2<TraceLevel, string> logger, string androidSdkPath, string androidNdkPath, string javaSdkPath);
    private static AndroidSdkBase CreateSdk(Action`2<TraceLevel, string> logger);
    public IEnumerable`1<string> GetBuildToolsPaths(string preferredBuildToolsVersion);
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.AndroidSdkInfo/<GetBuildToolsPaths>d__4")]
public IEnumerable`1<string> GetBuildToolsPaths();
    private static IEnumerable`1<string> SortedSubdirectoriesByVersion(string dir);
    private static Version TryParseVersion(string v);
    public IEnumerable`1<AndroidVersion> GetInstalledPlatformVersions(AndroidVersions versions);
    public string GetPlatformDirectory(int apiLevel);
    public string GetPlatformDirectoryFromId(string id);
    public string TryGetPlatformDirectoryFromApiLevel(string idOrApiLevel, AndroidVersions versions);
    public bool IsPlatformInstalled(int apiLevel);
    [NullableContextAttribute("2")]
public string get_AndroidNdkPath();
    public string get_AndroidSdkPath();
    public String[] get_AllAndroidSdkPaths();
    public string get_JavaSdkPath();
    public string get_AndroidNdkHostPlatform();
    public static void SetPreferredAndroidNdkPath(string path, Action`2<TraceLevel, string> logger);
    internal static void DefaultConsoleLogger(TraceLevel level, string message);
    public static void SetPreferredAndroidSdkPath(string path, Action`2<TraceLevel, string> logger);
    public static void SetPreferredJavaSdkPath(string path, Action`2<TraceLevel, string> logger);
    public static void DetectAndSetPreferredJavaSdkPathToLatest(Action`2<TraceLevel, string> logger);
    [NullableContextAttribute("2")]
public string TryGetCommandLineToolsPath();
    public IEnumerable`1<string> GetCommandLineToolsPaths(string preferredCommandLineToolsVersion);
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.AndroidSdkInfo/<GetCommandLineToolsPaths>d__29")]
public IEnumerable`1<string> GetCommandLineToolsPaths();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xamarin.Android.Tools.AndroidSdkUnix : AndroidSdkBase {
    [NullableAttribute("2")]
private static string sudo_user;
    [NullableAttribute("2")]
private static string user;
    private static bool need_chown;
    private static string GetUnixConfigDirOverrideName;
    public string NdkHostPlatform32Bit { get; }
    public string NdkHostPlatform64Bit { get; }
    [NullableAttribute("2")]
public string PreferedAndroidSdkPath { get; }
    [NullableAttribute("2")]
public string PreferedAndroidNdkPath { get; }
    [NullableAttribute("2")]
public string PreferedJavaSdkPath { get; }
    private static string UnixConfigPath { get; }
    private static AndroidSdkUnix();
    public AndroidSdkUnix(Action`2<TraceLevel, string> logger);
    public virtual string get_NdkHostPlatform32Bit();
    public virtual string get_NdkHostPlatform64Bit();
    [NullableContextAttribute("2")]
public virtual string get_PreferedAndroidSdkPath();
    [NullableContextAttribute("2")]
public virtual string get_PreferedAndroidNdkPath();
    [NullableContextAttribute("2")]
public virtual string get_PreferedJavaSdkPath();
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.AndroidSdkUnix/<GetAllAvailableAndroidSdks>d__15")]
protected virtual IEnumerable`1<string> GetAllAvailableAndroidSdks();
    protected virtual string GetShortFormPath(string path);
    [NullableContextAttribute("2")]
public virtual void SetPreferredAndroidSdkPath(string path);
    [NullableContextAttribute("2")]
public virtual void SetPreferredJavaSdkPath(string path);
    [NullableContextAttribute("2")]
public virtual void SetPreferredAndroidNdkPath(string path);
    private void SaveConfig(XElement doc);
    private static string get_UnixConfigPath();
    internal static XElement GetUnixConfigFile(Action`2<TraceLevel, string> logger);
    private void FixOwnership(List`1<string> paths);
    [CompilerGeneratedAttribute]
internal static void <SaveConfig>g__AddToList|20_0(string path, <>c__DisplayClass20_0& );
    [CompilerGeneratedAttribute]
internal static string <FixOwnership>g__QuoteString|25_0(string p);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xamarin.Android.Tools.AndroidSdkWindows : AndroidSdkBase {
    private static string MDREG_KEY;
    private static string MDREG_ANDROID_SDK;
    private static string MDREG_ANDROID_NDK;
    internal static string MDREG_JAVA_SDK;
    private static string ANDROID_INSTALLER_PATH;
    private static string ANDROID_INSTALLER_KEY;
    private static string XAMARIN_ANDROID_INSTALLER_PATH;
    private static string XAMARIN_ANDROID_INSTALLER_KEY;
    private static string MICROSOFT_OPENJDK_PATH;
    private static string _JarSigner;
    [CompilerGeneratedAttribute]
private string <ZipAlign>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JarSigner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyTool>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Javac>k__BackingField;
    public string ZipAlign { get; protected set; }
    public string JarSigner { get; protected set; }
    public string KeyTool { get; protected set; }
    public string NdkHostPlatform32Bit { get; }
    public string NdkHostPlatform64Bit { get; }
    public string Javac { get; protected set; }
    [NullableAttribute("2")]
public string PreferedAndroidSdkPath { get; }
    [NullableAttribute("2")]
public string PreferedAndroidNdkPath { get; }
    [NullableAttribute("2")]
public string PreferedJavaSdkPath { get; }
    public AndroidSdkWindows(Action`2<TraceLevel, string> logger);
    private static AndroidSdkWindows();
    [CompilerGeneratedAttribute]
public virtual string get_ZipAlign();
    [CompilerGeneratedAttribute]
protected virtual void set_ZipAlign(string value);
    [CompilerGeneratedAttribute]
public virtual string get_JarSigner();
    [CompilerGeneratedAttribute]
protected virtual void set_JarSigner(string value);
    [CompilerGeneratedAttribute]
public virtual string get_KeyTool();
    [CompilerGeneratedAttribute]
protected virtual void set_KeyTool(string value);
    public virtual string get_NdkHostPlatform32Bit();
    public virtual string get_NdkHostPlatform64Bit();
    [CompilerGeneratedAttribute]
public virtual string get_Javac();
    [CompilerGeneratedAttribute]
protected virtual void set_Javac(string value);
    [NullableContextAttribute("2")]
public virtual string get_PreferedAndroidSdkPath();
    [NullableContextAttribute("2")]
public virtual string get_PreferedAndroidNdkPath();
    [NullableContextAttribute("2")]
public virtual string get_PreferedJavaSdkPath();
    internal static string GetMDRegistryKey();
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.AndroidSdkWindows/<GetAllAvailableAndroidSdks>d__38")]
protected virtual IEnumerable`1<string> GetAllAvailableAndroidSdks();
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.AndroidSdkWindows/<GetAllAvailableAndroidNdks>d__39")]
protected virtual IEnumerable`1<string> GetAllAvailableAndroidNdks();
    protected virtual string GetShortFormPath(string path);
    [NullableContextAttribute("2")]
public virtual void SetPreferredAndroidSdkPath(string path);
    [NullableContextAttribute("2")]
public virtual void SetPreferredJavaSdkPath(string path);
    [NullableContextAttribute("2")]
public virtual void SetPreferredAndroidNdkPath(string path);
    [NullableContextAttribute("2")]
public virtual void Initialize(string androidSdkPath, string androidNdkPath, string javaSdkPath);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<string> <>n__0();
}
[FlagsAttribute]
public enum Xamarin.Android.Tools.AndroidTargetArch : Enum {
    public int value__;
    public static AndroidTargetArch None;
    public static AndroidTargetArch Arm;
    public static AndroidTargetArch X86;
    public static AndroidTargetArch Mips;
    public static AndroidTargetArch Arm64;
    public static AndroidTargetArch X86_64;
    public static AndroidTargetArch Other;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.Android.Tools.AndroidVersion : object {
    [CompilerGeneratedAttribute]
private int <ApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <CodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OSVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <TargetFrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Stable>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <AlternateIds>k__BackingField;
    public int ApiLevel { get; private set; }
    public string Id { get; private set; }
    [NullableAttribute("2")]
public string CodeName { get; private set; }
    public string OSVersion { get; private set; }
    public Version TargetFrameworkVersion { get; private set; }
    public string FrameworkVersion { get; private set; }
    public bool Stable { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal String[] AlternateIds { get; internal set; }
    [NullableContextAttribute("2")]
public AndroidVersion(int apiLevel, string osVersion, string codeName, string id, bool stable);
    [CompilerGeneratedAttribute]
public int get_ApiLevel();
    [CompilerGeneratedAttribute]
private void set_ApiLevel(int value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_CodeName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_CodeName(string value);
    [CompilerGeneratedAttribute]
public string get_OSVersion();
    [CompilerGeneratedAttribute]
private void set_OSVersion(string value);
    [CompilerGeneratedAttribute]
public Version get_TargetFrameworkVersion();
    [CompilerGeneratedAttribute]
private void set_TargetFrameworkVersion(Version value);
    [CompilerGeneratedAttribute]
public string get_FrameworkVersion();
    [CompilerGeneratedAttribute]
private void set_FrameworkVersion(string value);
    [CompilerGeneratedAttribute]
public bool get_Stable();
    [CompilerGeneratedAttribute]
private void set_Stable(bool value);
    [CompilerGeneratedAttribute]
internal String[] get_AlternateIds();
    [CompilerGeneratedAttribute]
internal void set_AlternateIds(String[] value);
    public virtual string ToString();
    public static AndroidVersion Load(Stream stream);
    public static AndroidVersion Load(string uri);
    private static AndroidVersion Load(XDocument doc);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.Android.Tools.AndroidVersions : object {
    private List`1<AndroidVersion> installedVersions;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <FrameworkDirectories>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private AndroidVersion <MaxStableVersion>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private AndroidVersion <MinStableVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<AndroidVersion> <InstalledBindingVersions>k__BackingField;
    public static AndroidVersion[] KnownVersions;
    public IReadOnlyList`1<string> FrameworkDirectories { get; }
    [NullableAttribute("2")]
public AndroidVersion MaxStableVersion { get; private set; }
    [NullableAttribute("2")]
public AndroidVersion MinStableVersion { get; private set; }
    public IReadOnlyList`1<AndroidVersion> InstalledBindingVersions { get; private set; }
    public AndroidVersions(IEnumerable`1<string> frameworkDirectories);
    public AndroidVersions(IEnumerable`1<AndroidVersion> versions);
    private static AndroidVersions();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_FrameworkDirectories();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public AndroidVersion get_MaxStableVersion();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_MaxStableVersion(AndroidVersion value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public AndroidVersion get_MinStableVersion();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_MinStableVersion(AndroidVersion value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<AndroidVersion> get_InstalledBindingVersions();
    [CompilerGeneratedAttribute]
private void set_InstalledBindingVersions(IReadOnlyList`1<AndroidVersion> value);
    private void LoadVersions(IEnumerable`1<AndroidVersion> versions);
    public Nullable`1<int> GetApiLevelFromFrameworkVersion(string frameworkVersion);
    private static bool MatchesFrameworkVersion(AndroidVersion version, string frameworkVersion);
    public Nullable`1<int> GetApiLevelFromId(string id);
    private static bool MatchesId(AndroidVersion version, string id);
    [NullableContextAttribute("2")]
public string GetIdFromApiLevel(int apiLevel);
    public string GetIdFromApiLevel(string apiLevel);
    public string GetIdFromFrameworkVersion(string frameworkVersion);
    [NullableContextAttribute("2")]
public string GetFrameworkVersionFromApiLevel(int apiLevel);
    public string GetFrameworkVersionFromId(string id);
}
internal class Xamarin.Android.Tools.AzulJdkLocations : JdkLocations {
    [NullableContextAttribute("1")]
internal static IEnumerable`1<JdkInfo> GetAzulJdks(Action`2<TraceLevel, string> logger);
}
internal class Xamarin.Android.Tools.EclipseAdoptiumJdkLocations : JdkLocations {
    [NullableContextAttribute("1")]
internal static IEnumerable`1<JdkInfo> GetEclipseAdoptiumJdks(Action`2<TraceLevel, string> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xamarin.Android.Tools.FileUtil : object {
    public static string GetTempFilenameForWrite(string fileName);
    public static void SystemRename(string sourceFile, string destFile);
    private static int rename(string old, string new);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.Android.Tools.JdkInfo : object {
    [CompilerGeneratedAttribute]
private string <HomePath>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Locator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JarPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavacPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JdkJvmPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<string> <IncludePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyDictionary`2<string, string> <ReleaseProperties>k__BackingField;
    private Lazy`1<Dictionary`2<string, List`1<string>>> javaProperties;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<Version> javaVersion;
    private Action`2<TraceLevel, string> logger;
    private static Regex NonDigitMatcher;
    public string HomePath { get; }
    [NullableAttribute("2")]
public string Locator { get; }
    public string JarPath { get; }
    public string JavaPath { get; }
    public string JavacPath { get; }
    public string JdkJvmPath { get; }
    public ReadOnlyCollection`1<string> IncludePath { get; }
    [NullableAttribute("2")]
public Version Version { get; }
    [NullableAttribute("2")]
public string Vendor { get; }
    public ReadOnlyDictionary`2<string, string> ReleaseProperties { get; }
    public IEnumerable`1<string> JavaSettingsPropertyKeys { get; }
    public JdkInfo(string homePath);
    public JdkInfo(string homePath, string locator, Action`2<TraceLevel, string> logger);
    public JdkInfo(string homePath, string locator);
    private static JdkInfo();
    [CompilerGeneratedAttribute]
public string get_HomePath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Locator();
    [CompilerGeneratedAttribute]
public string get_JarPath();
    [CompilerGeneratedAttribute]
public string get_JavaPath();
    [CompilerGeneratedAttribute]
public string get_JavacPath();
    [CompilerGeneratedAttribute]
public string get_JdkJvmPath();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<string> get_IncludePath();
    [NullableContextAttribute("2")]
public Version get_Version();
    [NullableContextAttribute("2")]
public string get_Vendor();
    [CompilerGeneratedAttribute]
public ReadOnlyDictionary`2<string, string> get_ReleaseProperties();
    public IEnumerable`1<string> get_JavaSettingsPropertyKeys();
    public virtual string ToString();
    public bool GetJavaSettingsPropertyValues(string key, IEnumerable`1& value);
    public bool GetJavaSettingsPropertyValue(string key, String& value);
    [NullableContextAttribute("2")]
private string GetJdkJvmPath();
    private static IEnumerable`1<string> FindLibrariesInDirectory(string dir, string libraryName);
    private void ValidateFile(string name, string path);
    private string RequireExecutableInDirectory(string binPath, string fileName);
    [NullableContextAttribute("2")]
private Version GetJavaVersion();
    private static string GetParsableVersion(string version);
    private ReadOnlyDictionary`2<string, string> GetReleaseProperties();
    private Dictionary`2<string, List`1<string>> GetJavaProperties(Action`2<TraceLevel, string> logger);
    private static bool AnySystemJavasInstalled();
    private static Dictionary`2<string, List`1<string>> GetJavaProperties(Action`2<TraceLevel, string> logger, string java);
    public static IEnumerable`1<JdkInfo> GetKnownSystemJdkInfos(Action`2<TraceLevel, string> logger);
    public static IEnumerable`1<JdkInfo> GetSupportedJdkInfos(Action`2<TraceLevel, string> logger);
    internal static JdkInfo TryGetJdkInfo(string path, Action`2<TraceLevel, string> logger, string locator);
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.JdkInfo/<GetEnvironmentVariableJdks>d__53")]
private static IEnumerable`1<JdkInfo> GetEnvironmentVariableJdks(string envVar, Action`2<TraceLevel, string> logger);
    private static IEnumerable`1<JdkInfo> GetLibexecJdks(Action`2<TraceLevel, string> logger);
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.JdkInfo/<GetLibexecJdkPaths>d__55")]
private static IEnumerable`1<string> GetLibexecJdkPaths(Action`2<TraceLevel, string> logger);
    private static IEnumerable`1<JdkInfo> GetJavaAlternativesJdks(Action`2<TraceLevel, string> logger);
    private static IEnumerable`1<string> GetJavaAlternativesJdkPaths();
    private static IEnumerable`1<JdkInfo> GetLibJvmJdks(Action`2<TraceLevel, string> logger);
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.JdkInfo/<GetLibJvmJdkPaths>d__59")]
private static IEnumerable`1<string> GetLibJvmJdkPaths();
    private static IEnumerable`1<JdkInfo> GetPathEnvironmentJdks(Action`2<TraceLevel, string> logger);
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.JdkInfo/<GetPathEnvironmentJdkPaths>d__61")]
private static IEnumerable`1<string> GetPathEnvironmentJdkPaths(Action`2<TraceLevel, string> logger);
    [CompilerGeneratedAttribute]
private Dictionary`2<string, List`1<string>> <.ctor>b__34_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xamarin.Android.Tools.JdkInfoVersionComparer : object {
    public static IComparer`1<JdkInfo> Default;
    private static JdkInfoVersionComparer();
    public sealed virtual int Compare(JdkInfo x, JdkInfo y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xamarin.Android.Tools.JdkLocations : object {
    private static string MacOSJavaVirtualMachinesRoot;
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.JdkLocations/<GetPreferredJdks>d__0")]
internal static IEnumerable`1<JdkInfo> GetPreferredJdks(Action`2<TraceLevel, string> logger);
    protected static IEnumerable`1<JdkInfo> FromPaths(IEnumerable`1<string> paths, Action`2<TraceLevel, string> logger, string locator);
    private static IEnumerable`1<JdkInfo> GetUnixPreferredJdks(Action`2<TraceLevel, string> logger);
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.JdkLocations/<GetUnixConfiguredJdkPaths>d__3")]
private static IEnumerable`1<string> GetUnixConfiguredJdkPaths(Action`2<TraceLevel, string> logger);
    protected static IEnumerable`1<JdkInfo> GetMacOSSystemJdks(string pattern, Action`2<TraceLevel, string> logger, string locator);
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.JdkLocations/<GetMacOSSystemJvmPaths>d__6")]
private static IEnumerable`1<string> GetMacOSSystemJvmPaths(string pattern);
    [NullableContextAttribute("2")]
internal static string GetWindowsPreferredJdkPath();
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.JdkLocations/<GetWindowsFileSystemJdks>d__8")]
protected static IEnumerable`1<JdkInfo> GetWindowsFileSystemJdks(string pattern, Action`2<TraceLevel, string> logger, string locator);
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.JdkLocations/<GetWindowsRegistryJdks>d__9")]
protected static IEnumerable`1<JdkInfo> GetWindowsRegistryJdks(Action`2<TraceLevel, string> logger, string parentKey, string childKeyGlob, string grandChildKey, string valueName, string locator);
    private static Regex ToRegex(string glob);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xamarin.Android.Tools.KernelEx : object {
    private static int GetLongPathName(string path, StringBuilder longPath, int longPathLength);
    public static string GetLongPathName(string path);
    private static int GetShortPathName(string path, StringBuilder shortPath, int shortPathLength);
    public static string GetShortPathName(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xamarin.Android.Tools.MicrosoftDistJdkLocations : JdkLocations {
    internal static IEnumerable`1<JdkInfo> GetMicrosoftDistJdks(Action`2<TraceLevel, string> logger);
    private static IEnumerable`1<string> GetMacOSMicrosoftDistJdkPaths();
}
internal class Xamarin.Android.Tools.MicrosoftOpenJdkLocations : JdkLocations {
    [NullableContextAttribute("1")]
internal static IEnumerable`1<JdkInfo> GetMicrosoftOpenJdks(Action`2<TraceLevel, string> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xamarin.Android.Tools.OracleJdkLocations : JdkLocations {
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.OracleJdkLocations/<GetOracleJdks>d__0")]
internal static IEnumerable`1<JdkInfo> GetOracleJdks(Action`2<TraceLevel, string> logger);
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.OracleJdkLocations/<GetOracleJdkPaths>d__1")]
private static IEnumerable`1<string> GetOracleJdkPaths();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xamarin.Android.Tools.OS : object {
    public static bool IsWindows;
    public static bool IsMac;
    [NullableAttribute("2")]
internal static string ProgramFilesX86;
    internal static string NativeLibraryFormat;
    private static OS();
    private static bool IsRunningOnMac();
    private static int uname(IntPtr buf);
    private static string GetProgramFilesX86();
    internal static string GetXamarinAndroidCacheDir();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xamarin.Android.Tools.ProcessUtils : object {
    private static String[] ExecutableFileExtensions;
    private static ProcessUtils();
    [AsyncStateMachineAttribute("Xamarin.Android.Tools.ProcessUtils/<StartProcess>d__2")]
public static Task`1<int> StartProcess(ProcessStartInfo psi, TextWriter stdout, TextWriter stderr, CancellationToken cancellationToken, Action`1<Process> onStarted);
    private static void KillProcess(Process p);
    private static Task WaitForExitAsync(Process process);
    [AsyncStateMachineAttribute("Xamarin.Android.Tools.ProcessUtils/<ReadStreamAsync>d__5")]
private static Task ReadStreamAsync(StreamReader stream, TextWriter destination);
    public static Task`1<TResult> ExecuteToolAsync(string exe, Func`2<string, TResult> result, CancellationToken token, Action`1<Process> onStarted);
    internal static void Exec(ProcessStartInfo processStartInfo, DataReceivedEventHandler output, bool includeStderr);
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.ProcessUtils/<FindExecutablesInPath>d__8")]
internal static IEnumerable`1<string> FindExecutablesInPath(string executable);
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.ProcessUtils/<FindExecutablesInDirectory>d__9")]
internal static IEnumerable`1<string> FindExecutablesInDirectory(string dir, string executable);
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.ProcessUtils/<ExecutableFiles>d__10")]
internal static IEnumerable`1<string> ExecutableFiles(string executable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Xamarin.Android.Tools.RegistryEx : object {
    private static string ADVAPI;
    public static UIntPtr CurrentUser;
    public static UIntPtr LocalMachine;
    private static RegistryEx();
    private static int RegOpenKeyEx(UIntPtr hKey, string subKey, UInt32 reserved, UInt32 sam, UIntPtr& phkResult);
    private static int RegQueryValueExW(UIntPtr hKey, string lpValueName, int lpReserved, UInt32& lpType, StringBuilder lpData, UInt32& lpcbData);
    private static int RegSetValueExW(UIntPtr hKey, string lpValueName, int lpReserved, UInt32 dwType, string data, UInt32 cbData);
    private static int RegSetValueExW(UIntPtr hKey, string lpValueName, int lpReserved, UInt32 dwType, IntPtr data, UInt32 cbData);
    private static int RegCreateKeyEx(UIntPtr hKey, string subKey, UInt32 reserved, string class, UInt32 options, UInt32 samDesired, IntPtr lpSecurityAttributes, UIntPtr& phkResult, Disposition& lpdwDisposition);
    private static int RegEnumKeyExW(UIntPtr hKey, UInt32 dwIndex, Char[] lpName, UInt32& lpcchName, IntPtr lpReserved, IntPtr lpClass, IntPtr lpcchClass, IntPtr lpftLastWriteTime);
    private static int RegQueryInfoKey(UIntPtr hKey, IntPtr lpClass, IntPtr lpcchClass, IntPtr lpReserved, UInt32& lpcSubkey, UInt32& lpcchMaxSubkeyLen, IntPtr lpcchMaxClassLen, IntPtr lpcValues, IntPtr lpcchMaxValueNameLen, IntPtr lpcbMaxValueLen, IntPtr lpSecurityDescriptor, IntPtr lpftLastWriteTime);
    private static int RegCloseKey(UIntPtr hKey);
    internal static bool CheckRegistryKeyForExecutable(UIntPtr key, string subkey, string valueName, Wow64 wow64, string subdir, string exe);
    [IteratorStateMachineAttribute("Xamarin.Android.Tools.RegistryEx/<EnumerateSubkeys>d__12")]
public static IEnumerable`1<string> EnumerateSubkeys(UIntPtr key, string subkey, Wow64 wow64);
    public static string GetValueString(UIntPtr key, string subkey, string valueName, Wow64 wow64);
    public static void SetValueString(UIntPtr key, string subkey, string valueName, string value, Wow64 wow64);
}
internal class Xamarin.Android.Tools.VSAndroidJdkLocations : JdkLocations {
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Xamarin.Android.Tools.VSAndroidJdkLocations/<GetVSAndroidJdks>d__0")]
internal static IEnumerable`1<JdkInfo> GetVSAndroidJdks(Action`2<TraceLevel, string> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xamarin.Android.Tools.XAPrepareJdkLocations : JdkLocations {
    internal static IEnumerable`1<JdkInfo> GetXAPrepareJdks(Action`2<TraceLevel, string> logger);
    private static IEnumerable`1<string> GetXAPrepareJdkPaths();
}
