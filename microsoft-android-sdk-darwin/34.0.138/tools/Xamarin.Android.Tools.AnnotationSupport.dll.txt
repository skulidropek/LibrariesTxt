[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
public class Xamarin.AndroidTools.AnnotationSupport.AndroidAnnotationsSupport : object {
    private List`1<AnnotationParserExtension> extensions;
    private Dictionary`2<string, IList`1<AnnotatedItem>> data;
    public IList`1<AnnotationParserExtension> Extensions { get; }
    public IDictionary`2<string, IList`1<AnnotatedItem>> Data { get; }
    public static IList`1<AnnotatedItem> ParseArchive(string file);
    private static IEnumerable`1<AnnotatedItem> ParseArchiveEntry(ZipArchiveEntry entry);
    private static XDocument SafeXmlLoad(Stream s, string fileName);
    private static Stream FixAnnotationXML(Stream s);
    private static void FixEscapedQuotes(HtmlNode node);
    public void Load(string annotationsZipFile);
    public IList`1<AnnotationParserExtension> get_Extensions();
    public IDictionary`2<string, IList`1<AnnotatedItem>> get_Data();
}
public class Xamarin.AndroidTools.AnnotationSupport.AnnotatedItem : AnnotationObject {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<AnnotationData> <Annotations>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParameterIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private ManagedMemberInfo <ManagedInfo>k__BackingField;
    private static Char[] sep;
    public string Name { get; public set; }
    public IList`1<AnnotationData> Annotations { get; private set; }
    public int ParameterIndex { get; private set; }
    public string TypeName { get; private set; }
    public string MemberType { get; private set; }
    public string MemberName { get; private set; }
    public String[] Arguments { get; private set; }
    public ManagedMemberInfo ManagedInfo { get; public set; }
    public AnnotatedItem(XElement e);
    private static AnnotatedItem();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IList`1<AnnotationData> get_Annotations();
    [CompilerGeneratedAttribute]
private void set_Annotations(IList`1<AnnotationData> value);
    [CompilerGeneratedAttribute]
public int get_ParameterIndex();
    [CompilerGeneratedAttribute]
private void set_ParameterIndex(int value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
private void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_MemberType();
    [CompilerGeneratedAttribute]
private void set_MemberType(string value);
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
private void set_MemberName(string value);
    [CompilerGeneratedAttribute]
public String[] get_Arguments();
    [CompilerGeneratedAttribute]
private void set_Arguments(String[] value);
    [CompilerGeneratedAttribute]
public ManagedMemberInfo get_ManagedInfo();
    [CompilerGeneratedAttribute]
public void set_ManagedInfo(ManagedMemberInfo value);
    [IteratorStateMachineAttribute("Xamarin.AndroidTools.AnnotationSupport.AnnotatedItem/<ParseArguments>d__34")]
private IEnumerable`1<string> ParseArguments(string args);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
internal static void <ToString>g__AppendAnnotationValue|35_0(AnnotationValue d, <>c__DisplayClass35_0& );
}
public class Xamarin.AndroidTools.AnnotationSupport.AnnotationData : AnnotationObject {
    private static String[] Prefixes;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<AnnotationValue> <Values>k__BackingField;
    public string Name { get; public set; }
    public IList`1<AnnotationValue> Values { get; private set; }
    public AnnotationData(XElement e);
    private static AnnotationData();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IList`1<AnnotationValue> get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(IList`1<AnnotationValue> value);
}
[ExtensionAttribute]
public static class Xamarin.AndroidTools.AnnotationSupport.AnnotationExtensions : object {
    private static Func`2<AnnotationData, bool> is_intdef;
    private static Func`2<AnnotationData, bool> is_stringdef;
    private static AnnotationExtensions();
    [ExtensionAttribute]
public static string FormatMember(AnnotatedItem a);
    [ExtensionAttribute]
public static IEnumerable`1<AnnotationData> Data(IEnumerable`1<AnnotatedItem> anns);
    [ExtensionAttribute]
public static IEnumerable`1<AnnotatedItem> GetAnnotations(AndroidAnnotationsSupport api, ManagedApiQuery query);
    [ExtensionAttribute]
public static IEnumerable`1<AnnotatedItem> GetAnnotations(AndroidAnnotationsSupport api, string managedTypeName);
    [ExtensionAttribute]
public static IEnumerable`1<AnnotatedItem> GetAnnotations(AndroidAnnotationsSupport api, string managedTypeName, string managedMemberName);
    [ExtensionAttribute]
public static IEnumerable`1<AnnotatedItem> GetAnnotations(AndroidAnnotationsSupport api, string managedTypeName, string managedMethodName, String[] parameterTypes);
    [ExtensionAttribute]
public static IEnumerable`1<AnnotatedItem> GetAnnotations(AndroidAnnotationsSupport api, string managedTypeName, string managedMethodName, String[] parameterTypes, int parameterIndex);
    private static bool IsProperty(AnnotatedItem item, string propertyName);
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetAnnotations() overload.")]
public static IEnumerable`1<AnnotatedItem> GetMethodsAnnotations(AndroidAnnotationsSupport api, string managedTypeName, string managedMethodName);
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetAnnotations() overload.")]
public static IEnumerable`1<AnnotatedItem> GetFieldAnnotations(AndroidAnnotationsSupport api, string managedTypeName, string managedPropertyName);
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetAnnotations() overload.")]
public static IEnumerable`1<AnnotatedItem> GetMethodAnnotations(AndroidAnnotationsSupport api, string managedTypeName, string managedMethodName, String[] managedParameterTypes);
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetAnnotations() overload.")]
public static IEnumerable`1<AnnotatedItem> GetParameterAnnotations(AndroidAnnotationsSupport api, string managedTypeName, string managedMethodName, String[] managedParameterTypes, int parameterIndex);
    private static bool AreArgumentsEqual(TypeName[] definedArguments, IList`1<string> queriedArguments);
    [ExtensionAttribute]
public static AnnotationData GetIntDef(AndroidAnnotationsSupport api, ManagedApiQuery query);
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetIntDef(ManagedApiQuery)")]
public static AnnotationData GetFieldIntDef(AndroidAnnotationsSupport api, string managedTypeName, string managedPropertyName);
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetIntDef(ManagedApiQuery)")]
public static AnnotationData GetPropertyIntDef(AndroidAnnotationsSupport api, string managedTypeName, string managedPropertyName);
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetIntDef(ManagedApiQuery)")]
public static AnnotationData GetMethodReturnIntDef(AndroidAnnotationsSupport api, string managedTypeName, string managedMethodName, String[] managedParameterTypes);
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetIntDef(ManagedApiQuery)")]
public static AnnotationData GetMethodParameterIntDef(AndroidAnnotationsSupport api, string managedTypeName, string managedMethodName, String[] managedParameterTypes, int parameterIndex);
    [ExtensionAttribute]
public static IList`1<ManagedMemberInfo> AsCompletionCandidates(AnnotationData a);
    [ExtensionAttribute]
public static bool IsAlreadyEnumified(AnnotationData a);
    [ExtensionAttribute]
public static AnnotationData IntDef(IEnumerable`1<AnnotationData> anns);
    [ExtensionAttribute]
public static AnnotationData StringDef(IEnumerable`1<AnnotationData> anns);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetRequiredPermissions(IEnumerable`1<AnnotatedItem> items);
}
public class Xamarin.AndroidTools.AnnotationSupport.AnnotationObject : object {
    private List`1<object> extensions;
    public T GetExtension();
    public void SetExtension(T obj);
}
public abstract class Xamarin.AndroidTools.AnnotationSupport.AnnotationParserExtension : object {
    protected internal abstract virtual void OnAnnotationsParsed(IEnumerable`1<AnnotatedItem> anns);
}
public class Xamarin.AndroidTools.AnnotationSupport.AnnotationValue : AnnotationObject {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Val>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ValueAsArray>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ArrayItemCommonPrefix>k__BackingField;
    public string Name { get; public set; }
    public string Val { get; public set; }
    public IList`1<string> ValueAsArray { get; private set; }
    public string ArrayItemCommonPrefix { get; public set; }
    public AnnotationValue(XElement e);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Val();
    [CompilerGeneratedAttribute]
public void set_Val(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ValueAsArray();
    [CompilerGeneratedAttribute]
private void set_ValueAsArray(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_ArrayItemCommonPrefix();
    [CompilerGeneratedAttribute]
public void set_ArrayItemCommonPrefix(string value);
    public virtual string ToString();
}
public class Xamarin.AndroidTools.AnnotationSupport.ConstantDefinitionExtension : object {
    [CompilerGeneratedAttribute]
private bool <Flag>k__BackingField;
    [CompilerGeneratedAttribute]
private ConstantKind <ConstantKind>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ManagedMemberInfo> <ManagedConstants>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetManagedTypeName>k__BackingField;
    public bool Flag { get; public set; }
    public ConstantKind ConstantKind { get; public set; }
    public IList`1<ManagedMemberInfo> ManagedConstants { get; public set; }
    public string TargetManagedTypeName { get; public set; }
    public bool IsTargetAlreadyEnumified { get; }
    [CompilerGeneratedAttribute]
public bool get_Flag();
    [CompilerGeneratedAttribute]
public void set_Flag(bool value);
    [CompilerGeneratedAttribute]
public ConstantKind get_ConstantKind();
    [CompilerGeneratedAttribute]
public void set_ConstantKind(ConstantKind value);
    [CompilerGeneratedAttribute]
public IList`1<ManagedMemberInfo> get_ManagedConstants();
    [CompilerGeneratedAttribute]
public void set_ManagedConstants(IList`1<ManagedMemberInfo> value);
    [CompilerGeneratedAttribute]
public string get_TargetManagedTypeName();
    [CompilerGeneratedAttribute]
public void set_TargetManagedTypeName(string value);
    public bool get_IsTargetAlreadyEnumified();
}
public enum Xamarin.AndroidTools.AnnotationSupport.ConstantKind : Enum {
    public int value__;
    public static ConstantKind IntDef;
    public static ConstantKind StringDef;
    public static ConstantKind Other;
}
public class Xamarin.AndroidTools.AnnotationSupport.DefinitionManagedTypeFinderExtension : ManagedTypeFinderExtension {
    private ManagedTypeFinder _ { get; }
    public DefinitionManagedTypeFinderExtension(ManagedTypeFinder m);
    private ManagedTypeFinder get__();
    public virtual void ProcessAnnotation(AnnotatedItem item);
    private void ProcessAnnotationValue(AnnotatedItem item, AnnotationData a, AnnotationValue v);
    [CompilerGeneratedAttribute]
private IType <ProcessAnnotationValue>b__4_3(string j);
}
public class Xamarin.AndroidTools.AnnotationSupport.ManagedApiQuery : object {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParameterIndex>k__BackingField;
    public string TypeName { get; public set; }
    public string MemberName { get; public set; }
    public IList`1<string> Arguments { get; public set; }
    public int ParameterIndex { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
public void set_MemberName(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(IList`1<string> value);
    [CompilerGeneratedAttribute]
public int get_ParameterIndex();
    [CompilerGeneratedAttribute]
public void set_ParameterIndex(int value);
}
public class Xamarin.AndroidTools.AnnotationSupport.ManagedMemberInfo : object {
    [CompilerGeneratedAttribute]
private TypeName <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeName[] <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IType <TypeObject>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty <PropertyObject>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethodBase <MethodObject>k__BackingField;
    public TypeName Type { get; private set; }
    public string MemberName { get; public set; }
    public TypeName[] Arguments { get; public set; }
    public IType TypeObject { get; public set; }
    public IProperty PropertyObject { get; public set; }
    public IMethodBase MethodObject { get; public set; }
    [CompilerGeneratedAttribute]
public TypeName get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(TypeName value);
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
public void set_MemberName(string value);
    [CompilerGeneratedAttribute]
public TypeName[] get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(TypeName[] value);
    [CompilerGeneratedAttribute]
public IType get_TypeObject();
    [CompilerGeneratedAttribute]
public void set_TypeObject(IType value);
    [CompilerGeneratedAttribute]
public IProperty get_PropertyObject();
    [CompilerGeneratedAttribute]
public void set_PropertyObject(IProperty value);
    [CompilerGeneratedAttribute]
public IMethodBase get_MethodObject();
    [CompilerGeneratedAttribute]
public void set_MethodObject(IMethodBase value);
}
public abstract class Xamarin.AndroidTools.AnnotationSupport.ManagedTypeFinder : AnnotationParserExtension {
    private List`1<string> errors;
    [CompilerGeneratedAttribute]
private Func`2<AnnotatedItem, bool> <FilterAnnotatedItem>k__BackingField;
    private List`1<ManagedTypeFinderExtension> extensions;
    private Dictionary`2<string, IType> typemap;
    public IList`1<string> Errors { get; }
    public Func`2<AnnotatedItem, bool> FilterAnnotatedItem { get; public set; }
    public IList`1<ManagedTypeFinderExtension> Extensions { get; }
    public IDictionary`2<string, IType> ContextTypes { get; }
    public abstract virtual string GetManagedName(IType t);
    public abstract virtual string GetJavaName(IType t);
    public abstract virtual string GetJavaName(IDefinition f);
    public abstract virtual IProperty GetAnnotatedField(IType t, string fieldName);
    public abstract virtual IDefinition GetDefinitionField(IType t, string fieldName);
    public abstract virtual IMethodBase GetMethod(IType t, AnnotatedItem item);
    public abstract virtual TypeName[] GetParameterTypes(IMethodBase method);
    public abstract virtual void SetName(ManagedMemberInfo destination, IType type);
    public abstract virtual IEnumerable`1<IDefinition> GetFields(IType t);
    public abstract virtual string GetPropertyName(IProperty m);
    public abstract virtual string GetDefinitionName(IDefinition m);
    public abstract virtual string GetMethodName(IMethodBase m);
    public abstract virtual string GetMethodReturnManagedTypeName(IMethodBase m);
    public abstract virtual string GetFieldManagedTypeName(IProperty property);
    public abstract virtual string GetParameterManagedTypeName(IMethodBase m, int index);
    public IList`1<string> get_Errors();
    [CompilerGeneratedAttribute]
public Func`2<AnnotatedItem, bool> get_FilterAnnotatedItem();
    [CompilerGeneratedAttribute]
public void set_FilterAnnotatedItem(Func`2<AnnotatedItem, bool> value);
    public IList`1<ManagedTypeFinderExtension> get_Extensions();
    public IType GetContextManagedType(string javaTypeName);
    public virtual void PrepareContextTypes(IType[] types);
    public IDictionary`2<string, IType> get_ContextTypes();
    public void LoadManagedMappings(IEnumerable`1<AnnotatedItem> anns, IType[] types);
    public static bool AreArgumentsEqualLax(String[] arguments1, String[] arguments2, IEnumerable`1<string> genericArguments);
    public static String[] ParseJniMethodArgumentsSignature(string jni);
    private static IEnumerable`1<string> FromJniToFullName(string s);
    private static void FromJniToFullName(string s, IList`1<string> l, int idx);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType1`2<IType, string> <PrepareContextTypes>b__30_0(IType t);
}
public abstract class Xamarin.AndroidTools.AnnotationSupport.ManagedTypeFinderDefault : ManagedTypeFinder {
}
public abstract class Xamarin.AndroidTools.AnnotationSupport.ManagedTypeFinderExtension : object {
    [CompilerGeneratedAttribute]
private ManagedTypeFinder <ManagedTypeFinder>k__BackingField;
    protected ManagedTypeFinder ManagedTypeFinder { get; private set; }
    private ManagedTypeFinder _ { get; }
    protected ManagedTypeFinderExtension(ManagedTypeFinder m);
    [CompilerGeneratedAttribute]
protected ManagedTypeFinder get_ManagedTypeFinder();
    [CompilerGeneratedAttribute]
private void set_ManagedTypeFinder(ManagedTypeFinder value);
    private ManagedTypeFinder get__();
    public abstract virtual void ProcessAnnotation(AnnotatedItem item);
    protected string GetTargetManagedTypeName(AnnotatedItem item);
}
public class Xamarin.AndroidTools.AnnotationSupport.PermissionManagedTypeFinderExtension : ManagedTypeFinderExtension {
    public PermissionManagedTypeFinderExtension(ManagedTypeFinder m);
    public virtual void ProcessAnnotation(AnnotatedItem item);
}
public class Xamarin.AndroidTools.AnnotationSupport.RequiresPermissionExtension : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <Values>k__BackingField;
    public IList`1<string> Values { get; private set; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(IList`1<string> value);
}
public class Xamarin.AndroidTools.AnnotationSupport.TypeName : object {
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string FullName { get; }
    public string Namespace { get; public set; }
    public string Name { get; public set; }
    public string get_FullName();
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
