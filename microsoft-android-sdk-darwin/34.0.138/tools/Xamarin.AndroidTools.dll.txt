[ExtensionAttribute]
public static class AndroidDeviceExtensions : object {
    private static string PackageInstallLocationFormat;
    [ExtensionAttribute]
[ObsoleteAttribute("Use the async overload")]
public static void EnsureProperties(AndroidDevice device);
    [ExtensionAttribute]
public static Task EnsureProperties(AndroidDevice device, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendSeppukuBroadcast(AndroidDevice device, string packageName);
    [ExtensionAttribute]
public static Task SendSeppukuBroadcast(AndroidDevice device, string packageName, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task KillProcess(AndroidDevice device, string packageName);
    [ExtensionAttribute]
public static Task KillProcess(AndroidDevice device, string packageName, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<bool> KillProcessIfRunningAndWaitForExit(AndroidDevice device, string packageName, CancellationToken token);
    [ExtensionAttribute]
public static Task KillProcessAndWaitForExit(AndroidDevice device, string packageName, CancellationToken token);
    private static Task KillProcessAndWaitForExitPreIcs(AndroidDevice device, string packageName, CancellationToken token);
    [AsyncStateMachineAttribute("AndroidDeviceExtensions/<GetProcessIDAsync>d__9")]
[ExtensionAttribute]
public static Task`1<int> GetProcessIDAsync(AndroidDevice device, string packageName, int maxAttempts, int timeBetweenAttempts, CancellationToken token);
    private static Task RepeatTaskUntilTrue(Func`1<Task`1<T>> createTask, Func`2<T, bool> checkResult, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use PushAndInstallPackageAsync (PushAndInstallCommand command) instead.")]
public static Task PushAndInstallPackage(AndroidDevice device, string apkFile, bool reinstall, AdbProgressReporter notifyProgress, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use PushAndInstallPackageAsync (PushAndInstallCommand command) instead.")]
public static Task PushAndInstallPackage(AndroidDevice device, string apkFile, string packageName, bool reinstall, AdbProgressReporter notifyProgress, CancellationToken token);
    [AsyncStateMachineAttribute("AndroidDeviceExtensions/<PushAndInstallPackageAsync>d__13")]
[ExtensionAttribute]
public static Task PushAndInstallPackageAsync(AndroidDevice device, PushAndInstallCommand command, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use StartWithDebuggingAsync")]
public static Task StartActivityWithDebugging(AndroidDevice device, string package, string activity, IPAddress address, int sdbPort, int stdoutPort, bool server);
    [AsyncStateMachineAttribute("AndroidDeviceExtensions/<StartActivityWithDebugging>d__15")]
[ExtensionAttribute]
[ObsoleteAttribute("Use StartWithDebuggingAsync")]
public static Task StartActivityWithDebugging(AndroidDevice device, string package, string activity, IPAddress address, int sdbPort, int stdoutPort, bool server, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use SetDebugPropertiesAsync")]
public static Task SetDebugProperties(AndroidDevice device, IPAddress address, int sdbPort, int stdoutPort, bool server, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use SetDebugPropertiesAsync")]
public static Task SetDebugProperties(AndroidDevice device, AmStartCommand startCommand, IPAddress address, int sdbPort, int stdoutPort, bool server, CancellationToken token);
    [ExtensionAttribute]
public static Task StartActivityWithoutDebugging(AndroidDevice device, string package, string activity);
    [ExtensionAttribute]
public static Task StartActivityWithoutDebugging(AndroidDevice device, string package, string activity, CancellationToken token);
    [ExtensionAttribute]
public static Task StartActivityWithoutDebugging(AndroidDevice device, AmStartCommand startCommand, CancellationToken token);
    [ExtensionAttribute]
public static Task SetFastDevPropertyFile(AndroidDevice device, string package, string property, string value, CancellationToken token);
    private static Task TaskDelay(int delayMilliseconds);
    [ExtensionAttribute]
public static Task`1<AndroidCommandSession> StartActivityWithCommandSession(AndroidDevice device, string package, string activity, IPAddress address, int port, CancellationToken token);
    [AsyncStateMachineAttribute("AndroidDeviceExtensions/<InstallSharedRuntimeAsync>d__24")]
[ExtensionAttribute]
public static Task InstallSharedRuntimeAsync(AndroidDevice device, string runtimeFile, AdbProgressReporter progress, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use InstallSharedRuntimeAsync")]
public static void InstallSharedRuntime(AndroidDevice device, string runtimeFile, AdbProgressReporter progress, CancellationToken token);
    [AsyncStateMachineAttribute("AndroidDeviceExtensions/<InstallSharedPlatformAsync>d__26")]
[ExtensionAttribute]
public static Task InstallSharedPlatformAsync(AndroidDevice device, string platformFile, int packageApiLevel, AdbProgressReporter progress, CancellationToken token);
    [ExtensionAttribute]
[ObsoleteAttribute("Use InstallSharedPlatformAsync")]
public static void InstallSharedPlatform(AndroidDevice device, string platformFile, int packageApiLevel, AdbProgressReporter progress, CancellationToken token);
    [ExtensionAttribute]
public static AndroidDeploySession GetDeploySession(AndroidDevice device, IList`1<AndroidInstalledPackage> packages);
    [AsyncStateMachineAttribute("AndroidDeviceExtensions/<GetPackagesAsync>d__29")]
[ExtensionAttribute]
public static Task`1<IList`1<AndroidInstalledPackage>> GetPackagesAsync(AndroidDevice device, int packageApiLevel, string packageName, bool provideFullDebugRuntime, CancellationToken cancellationToken, IProgressNotifier progressReporter);
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetPackagesAsync")]
public static IList`1<AndroidInstalledPackage> GetPackages(AndroidDevice device, int packageApiLevel, string packageName, bool provideFullDebugRuntime, CancellationToken cancellationToken, IProgressNotifier progressReporter);
    [ObsoleteAttribute("Use GetInstalledPackagesFromDatabaseAsync")]
private static IList`1<AndroidInstalledPackage> GetInstalledPackagesFromDatabase(AndroidDevice device, bool requireVersions, CancellationToken cancellationToken);
    private static Task`1<List`1<AndroidInstalledPackage>> GetInstalledPackagesFromDatabaseAsync(AndroidDevice device, bool requireVersions, CancellationToken cancellationToken);
    private static string GetPlatformPackageName(int packageApiLevel);
    [ObsoleteAttribute("Use GetPackageVersionsAsync")]
private static string GetPackageVersions(AndroidDevice device, int packageApiLevel, string packageName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("AndroidDeviceExtensions/<GetPackageVersionsAsync>d__35")]
private static Task`1<string> GetPackageVersionsAsync(AndroidDevice device, int packageApiLevel, string packageName, CancellationToken cancellationToken);
    private static IList`1<AndroidInstalledPackage> GetInstalledPackages(string packageVersions);
    [AsyncStateMachineAttribute("AndroidDeviceExtensions/<InstallSharedRuntimeAsync>d__37")]
[ExtensionAttribute]
internal static Task InstallSharedRuntimeAsync(AndroidDevice device, bool provideFullDebugRuntime, CancellationToken cancellationToken, IProgressNotifier progressReporter);
    [ExtensionAttribute]
[ObsoleteAttribute("Use InstallSharedRuntimeAsync")]
internal static void InstallSharedRuntime(AndroidDevice device, bool provideFullDebugRuntime, CancellationToken cancellationToken, IProgressNotifier progressReporter);
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetPackageRemotePathAsync")]
public static string GetPackageRemotePath(AndroidDevice device, string packageName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("AndroidDeviceExtensions/<GetPackageRemotePathAsync>d__41")]
[ExtensionAttribute]
public static Task`1<string> GetPackageRemotePathAsync(AndroidDevice device, string packageName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("AndroidDeviceExtensions/<GetFastDevRemotePathInternalAsync>d__42")]
[ExtensionAttribute]
public static Task`1<string> GetFastDevRemotePathInternalAsync(AndroidDevice device, string packageName, CancellationToken cancellationToken);
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetFastDevRemotePathExternalAsync()")]
public static string GetFastDevRemotePathExternal(AndroidDevice device, string packageName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("AndroidDeviceExtensions/<GetFastDevRemotePathExternalAsync>d__44")]
[ExtensionAttribute]
[ObsoleteAttribute("Use GetFastDevRemotePathInternalAsync. Shared Runtime is no longer supported.")]
public static Task`1<string> GetFastDevRemotePathExternalAsync(AndroidDevice device, string packageName, CancellationToken cancellationToken);
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetFastDevRemotePathAsync()")]
public static string GetFastDevRemotePath(AndroidDevice device, string packageName, CancellationToken cancellationToken, String& packageRemotePath, Boolean& external);
    [AsyncStateMachineAttribute("AndroidDeviceExtensions/<GetFastDevRemotePathAsync>d__47")]
[ExtensionAttribute]
public static Task`1<FastDevRemotePathInfo> GetFastDevRemotePathAsync(AndroidDevice device, string packageName, CancellationToken cancellationToken);
}
internal class Mono.AndroidTools.Util.AggregateAsyncResult : object {
    private AsyncCallback callback;
    private object state;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCompleted>k__BackingField;
    private ManualResetEvent waitHandle;
    public Exception Error { get; private set; }
    public bool IsCompleted { get; private set; }
    private object System.IAsyncResult.AsyncState { get; }
    private WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }
    private bool System.IAsyncResult.CompletedSynchronously { get; }
    public AggregateAsyncResult(AsyncCallback callback, object state);
    public void CompleteAsCallback(IAsyncResult ar);
    public void Complete();
    public void CompleteWithError(Exception error);
    public void CheckError(CancellationToken token);
    private void MarkCompleted();
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(Exception value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCompleted();
    [CompilerGeneratedAttribute]
private void set_IsCompleted(bool value);
    private sealed virtual override object System.IAsyncResult.get_AsyncState();
    private sealed virtual override WaitHandle System.IAsyncResult.get_AsyncWaitHandle();
    private sealed virtual override bool System.IAsyncResult.get_CompletedSynchronously();
}
internal class Mono.AndroidTools.Util.AggregateAsyncResult`1 : AggregateAsyncResult {
    [CompilerGeneratedAttribute]
private T <Arg>k__BackingField;
    public T Arg { get; public set; }
    public AggregateAsyncResult`1(AsyncCallback callback, object state);
    public AggregateAsyncResult`1(T arg, AsyncCallback callback, object state);
    [CompilerGeneratedAttribute]
public T get_Arg();
    [CompilerGeneratedAttribute]
public void set_Arg(T value);
}
internal class Mono.AndroidTools.Util.AggregateAsyncResult`2 : AggregateAsyncResult {
    [CompilerGeneratedAttribute]
private T1 <Arg1>k__BackingField;
    [CompilerGeneratedAttribute]
private T2 <Arg2>k__BackingField;
    public T1 Arg1 { get; public set; }
    public T2 Arg2 { get; public set; }
    public AggregateAsyncResult`2(AsyncCallback callback, object state);
    public AggregateAsyncResult`2(T1 arg1, T2 arg2, AsyncCallback callback, object state);
    [CompilerGeneratedAttribute]
public T1 get_Arg1();
    [CompilerGeneratedAttribute]
public void set_Arg1(T1 value);
    [CompilerGeneratedAttribute]
public T2 get_Arg2();
    [CompilerGeneratedAttribute]
public void set_Arg2(T2 value);
}
internal class Mono.AndroidTools.Util.ReadFullAsyncResult : AggregateAsyncResult {
    public Stream Stream;
    public Byte[] Buffer;
    public int Offset;
    public int Count;
    public int Read;
    public int Remaining { get; }
    public ReadFullAsyncResult(Stream stream, Byte[] buffer, AsyncCallback callback, object state);
    public void BeginRead(int offset, int count, AsyncCallback callback);
    public void ContinueRead(AsyncCallback callback);
    public int EndRead(IAsyncResult ar);
    public int get_Remaining();
}
[ExtensionAttribute]
internal static class Mono.AndroidTools.Util.StreamExtensions : object {
    [ExtensionAttribute]
public static void ReadFull(Stream stream, Byte[] buffer, int offset, int count);
    [ExtensionAttribute]
public static IAsyncResult BeginReadFull(Stream stream, Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    private static void BeginReadFull_GotData(IAsyncResult ar);
    [ExtensionAttribute]
public static void EndReadFull(Stream stream, IAsyncResult asyncResult);
}
public class PushAndInstallCommand : object {
    [CompilerGeneratedAttribute]
private string <ApkFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReInstall>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TestOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private AdbProgressReporter <NotifyProgress>k__BackingField;
    public string ApkFile { get; public set; }
    public string User { get; public set; }
    public bool ReInstall { get; public set; }
    public string PackageName { get; public set; }
    public bool TestOnly { get; public set; }
    public AdbProgressReporter NotifyProgress { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ApkFile();
    [CompilerGeneratedAttribute]
public void set_ApkFile(string value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    [CompilerGeneratedAttribute]
public bool get_ReInstall();
    [CompilerGeneratedAttribute]
public void set_ReInstall(bool value);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    [CompilerGeneratedAttribute]
public bool get_TestOnly();
    [CompilerGeneratedAttribute]
public void set_TestOnly(bool value);
    [CompilerGeneratedAttribute]
public AdbProgressReporter get_NotifyProgress();
    [CompilerGeneratedAttribute]
public void set_NotifyProgress(AdbProgressReporter value);
}
[ExtensionAttribute]
public static class Xamarin.Android.Tools.AndroidAppManifestExtensions : object {
    [ExtensionAttribute]
public static bool CanRunOnDevice(AndroidAppManifest manifest, AndroidDevice device);
}
[ObsoleteAttribute("Use Xamarin.Android.Tools.AndroidAppManifest, in Xamarin.Android.Tools.AndroidSdk.dll")]
public class Xamarin.AndroidTools.AndroidAppManifest : object {
    private AndroidAppManifest manifest;
    public string PackageName { get; public set; }
    public string ApplicationLabel { get; public set; }
    public string ApplicationIcon { get; public set; }
    public string ApplicationTheme { get; public set; }
    public string VersionName { get; public set; }
    public string VersionCode { get; public set; }
    public string InstallLocation { get; public set; }
    public Nullable`1<int> MinSdkVersion { get; public set; }
    public Nullable`1<int> TargetSdkVersion { get; public set; }
    public IEnumerable`1<string> AndroidPermissions { get; }
    public IEnumerable`1<string> AndroidPermissionsQualified { get; }
    public Nullable`1<bool> Debuggable { get; public set; }
    private AndroidAppManifest(AndroidAppManifest manifest);
    public static string CanonicalizePackageName(string packageNameOrAssemblyName);
    public static AndroidAppManifest Create(string packageName, string appLabel);
    [ObsoleteAttribute("Use Load(string, AndroidVersions)")]
public static AndroidAppManifest Load(string filename);
    public static AndroidAppManifest Load(string filename, AndroidVersions versions);
    [ObsoleteAttribute("Use Load(XDocument, AndroidVersions)")]
public static AndroidAppManifest Load(XDocument doc);
    public static AndroidAppManifest Load(XDocument doc, AndroidVersions versions);
    public void Write(XmlWriter writer);
    public void WriteToFile(string fileName);
    public string get_PackageName();
    public void set_PackageName(string value);
    public string get_ApplicationLabel();
    public void set_ApplicationLabel(string value);
    public string get_ApplicationIcon();
    public void set_ApplicationIcon(string value);
    public string get_ApplicationTheme();
    public void set_ApplicationTheme(string value);
    public string get_VersionName();
    public void set_VersionName(string value);
    public string get_VersionCode();
    public void set_VersionCode(string value);
    public string get_InstallLocation();
    public void set_InstallLocation(string value);
    public Nullable`1<int> get_MinSdkVersion();
    public void set_MinSdkVersion(Nullable`1<int> value);
    public Nullable`1<int> get_TargetSdkVersion();
    public void set_TargetSdkVersion(Nullable`1<int> value);
    public IEnumerable`1<string> get_AndroidPermissions();
    public IEnumerable`1<string> get_AndroidPermissionsQualified();
    public Nullable`1<bool> get_Debuggable();
    public void set_Debuggable(Nullable`1<bool> value);
    public void SetAndroidPermissions(IEnumerable`1<string> permissions);
    public string GetLaunchableUserActivityName();
    [IteratorStateMachineAttribute("Xamarin.AndroidTools.AndroidAppManifest/<GetLaunchableActivities>d__46")]
private IEnumerable`1<XElement> GetLaunchableActivities();
    public IEnumerable`1<string> GetAllActivityNames(bool onlyExported);
    public IEnumerable`1<string> GetLaunchableActivityNames();
    [IteratorStateMachineAttribute("Xamarin.AndroidTools.AndroidAppManifest/<GetAllServiceNames>d__49")]
public IEnumerable`1<string> GetAllServiceNames(bool onlyExported);
    [IteratorStateMachineAttribute("Xamarin.AndroidTools.AndroidAppManifest/<GetAllBroadcastReceiveNames>d__50")]
public IEnumerable`1<string> GetAllBroadcastReceiveNames(bool onlyExported);
    public bool CanRunOnDevice(AndroidDevice device);
}
internal class Xamarin.AndroidTools.AndroidBuildToolsVersion : object {
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpecialVersion>k__BackingField;
    public Version Version { get; private set; }
    public string SpecialVersion { get; private set; }
    public AndroidBuildToolsVersion(int major, int minor, int build, string specialVersion);
    public AndroidBuildToolsVersion(Version version, string specialVersion);
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(Version value);
    [CompilerGeneratedAttribute]
public string get_SpecialVersion();
    [CompilerGeneratedAttribute]
private void set_SpecialVersion(string value);
    public static AndroidBuildToolsVersion Parse(string input);
    public static bool TryParse(string input, AndroidBuildToolsVersion& result);
    public sealed virtual int CompareTo(AndroidBuildToolsVersion other);
    private static AndroidBuildToolsVersion ParseInternal(string input);
}
public abstract class Xamarin.AndroidTools.AndroidCommandSession : object {
    private object commandSessionLock;
    private List`1<Stream> streams;
    private Stream reusableStream;
    private bool disposed;
    private bool connected_once;
    [CompilerGeneratedAttribute]
private IPAddress <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    public IPAddress Address { get; protected set; }
    public int Port { get; protected set; }
    public bool IsConnected { get; }
    protected AndroidCommandSession(IPAddress ipAddress, int port);
    [CompilerGeneratedAttribute]
public IPAddress get_Address();
    [CompilerGeneratedAttribute]
protected void set_Address(IPAddress value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
protected void set_Port(int value);
    protected abstract virtual IAsyncResult BeginConnectStream(AsyncCallback callback, object state);
    protected abstract virtual Stream EndConnectStream(IAsyncResult result);
    private IAsyncResult BeginExecuteCommand(string command, bool consumeStream, AsyncCallback callback, object state);
    private void ExecuteCommand_ConnectedCommandStream(IAsyncResult ar);
    private static void ExecuteCommand_DiscardStream(Stream stream);
    private void ExecuteCommand_BeginWriteCommand(CommandAsyncResult r);
    private void ExecuteCommand_WroteCommand(IAsyncResult ar);
    private void CancelExecuteCommand(IAsyncResult asyncResult);
    private Stream EndExecuteCommand(IAsyncResult result);
    private IAsyncResult BeginSendSkipDebugger(AsyncCallback callback, object state);
    private void WriteProfilerOutputToFile(Stream stream, string outputFile);
    public bool get_IsConnected();
    public IAsyncResult BeginHandshake(AsyncCallback callback, object state);
    private void Handshake_SentPing(IAsyncResult ar);
    private static void Handshake_ReadPong(IAsyncResult ar);
    public void EndHandshake(IAsyncResult result);
    public void StartLogProfiler(string outputFile, string profilerConfiguration, string heapshotMode, AsyncCallback callback, object state);
    public void Stop();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected abstract virtual void Dispose(bool disposing);
}
internal class Xamarin.AndroidTools.AndroidConnectCommandSession : AndroidCommandSession {
    private Socket client;
    public AndroidConnectCommandSession(IPAddress ipAddress, int port);
    protected virtual IAsyncResult BeginConnectStream(AsyncCallback callback, object state);
    protected virtual Stream EndConnectStream(IAsyncResult result);
    protected virtual void Dispose(bool disposing);
}
public class Xamarin.AndroidTools.AndroidDeploymentException : Exception {
    private AndroidDeploySession session;
    [CompilerGeneratedAttribute]
private AndroidDeploymentFailureReason <Reason>k__BackingField;
    public AndroidDeploymentFailureReason Reason { get; private set; }
    public AndroidDeploymentException(AndroidDeploymentFailureReason reason);
    public AndroidDeploymentException(AndroidDeploymentFailureReason reason, AndroidDeploySession session);
    public AndroidDeploymentException(AndroidDeploymentFailureReason reason, Exception inner);
    public AndroidDeploymentException(AndroidDeploymentFailureReason reason, AndroidDeploySession session, Exception inner);
    [CompilerGeneratedAttribute]
public AndroidDeploymentFailureReason get_Reason();
    [CompilerGeneratedAttribute]
private void set_Reason(AndroidDeploymentFailureReason value);
    private static Exception InnerExceptionFromAggregate(Exception ex);
    public void GetNiceExplanation(String& title, String& detail);
}
public enum Xamarin.AndroidTools.AndroidDeploymentFailureReason : Enum {
    public int value__;
    public static AndroidDeploymentFailureReason DeviceDisconnected;
    public static AndroidDeploymentFailureReason InternalError;
    public static AndroidDeploymentFailureReason ArchitectureNotSupported;
    public static AndroidDeploymentFailureReason FailedToGetPackageList;
    public static AndroidDeploymentFailureReason PackagingFailed;
    public static AndroidDeploymentFailureReason InsufficientSpaceForRuntime;
    public static AndroidDeploymentFailureReason InsufficientSpaceForPlatform;
    public static AndroidDeploymentFailureReason SdkNotSupportedByDevice;
    public static AndroidDeploymentFailureReason InsufficientSpaceForPackage;
    public static AndroidDeploymentFailureReason FailedToDetermineFastDevPath;
    public static AndroidDeploymentFailureReason FailedToSynchronizeFastDevAssemblies;
    public static AndroidDeploymentFailureReason FailedToSynchronizeFastDevResources;
    public static AndroidDeploymentFailureReason FastDevActivityNotFound;
    public static AndroidDeploymentFailureReason FastDevFileConflict;
    public static AndroidDeploymentFailureReason FastDevDirectoryCreationFailed;
    public static AndroidDeploymentFailureReason ArchitectureNotSupportedBySharedRuntime;
    public static AndroidDeploymentFailureReason StdioRedirectionEnabled;
    public static AndroidDeploymentFailureReason RequiresUninstall;
}
public class Xamarin.AndroidTools.AndroidDeployRuntimeSession : object {
    private CancellationToken token;
    private IList`1<AndroidInstalledPackage> packages;
    [CompilerGeneratedAttribute]
private IProgressNotifier <ProgressReporter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PackageApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private AndroidDevice <Device>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsesSharedRuntime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProvideFullDebugRuntime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AaptToolPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageSupportedArchs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    public IProgressNotifier ProgressReporter { get; public set; }
    public int PackageApiLevel { get; public set; }
    public AndroidDevice Device { get; private set; }
    public bool UsesSharedRuntime { get; public set; }
    public bool ProvideFullDebugRuntime { get; public set; }
    public string AaptToolPath { get; public set; }
    public string PackageSupportedArchs { get; public set; }
    public string PackageName { get; public set; }
    public AndroidDeployRuntimeSession(AndroidDevice device, IList`1<AndroidInstalledPackage> packages);
    [CompilerGeneratedAttribute]
public IProgressNotifier get_ProgressReporter();
    [CompilerGeneratedAttribute]
public void set_ProgressReporter(IProgressNotifier value);
    [CompilerGeneratedAttribute]
public int get_PackageApiLevel();
    [CompilerGeneratedAttribute]
public void set_PackageApiLevel(int value);
    [CompilerGeneratedAttribute]
public AndroidDevice get_Device();
    [CompilerGeneratedAttribute]
private void set_Device(AndroidDevice value);
    [CompilerGeneratedAttribute]
public bool get_UsesSharedRuntime();
    [CompilerGeneratedAttribute]
public void set_UsesSharedRuntime(bool value);
    [CompilerGeneratedAttribute]
public bool get_ProvideFullDebugRuntime();
    [CompilerGeneratedAttribute]
public void set_ProvideFullDebugRuntime(bool value);
    [CompilerGeneratedAttribute]
public string get_AaptToolPath();
    [CompilerGeneratedAttribute]
public void set_AaptToolPath(string value);
    [CompilerGeneratedAttribute]
public string get_PackageSupportedArchs();
    [CompilerGeneratedAttribute]
public void set_PackageSupportedArchs(string value);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.AndroidDeployRuntimeSession/<StartAsync>d__35")]
public Task StartAsync(CancellationToken token);
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.AndroidDeployRuntimeSession/<RunAsync>d__36")]
private Task RunAsync(CancellationToken token);
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.AndroidDeployRuntimeSession/<EnsureCorrectSharedRuntimes>d__37")]
private Task EnsureCorrectSharedRuntimes();
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.AndroidDeployRuntimeSession/<RemoveOldRuntimes>d__38")]
private Task RemoveOldRuntimes();
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.AndroidDeployRuntimeSession/<CheckAndInstallSharedRuntimeAsync>d__39")]
private Task`1<bool> CheckAndInstallSharedRuntimeAsync();
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.AndroidDeployRuntimeSession/<InstallSharedPlatformAsync>d__40")]
private Task`1<bool> InstallSharedPlatformAsync();
    private void ShowProgressText(string text, CancellationToken token);
}
public class Xamarin.AndroidTools.AndroidDeploySession : object {
    [CompilerGeneratedAttribute]
private int <PackageApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private AndroidDevice <Device>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageSupportedArchs>k__BackingField;
    [CompilerGeneratedAttribute]
private IProgressNotifier <ProgressReporter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProvideFullDebugRuntime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsesSharedRuntime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveUserData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForcePackageInstall>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFastDev>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AaptToolPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowDeltaInstall>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Activity>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<string> <FastDevActivityProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IEnumerable`1<string>> <FastDevAssembliesProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IEnumerable`1<string>> <FastDevNativeLibrariesProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IEnumerable`1<string>> <FastDevDexesProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IEnumerable`1<string>> <FastDevPackagedResourcesProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IEnumerable`1<string>> <FastDevResourcesProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IEnumerable`1<string>> <FastDevTypemapsProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Task`1<bool> <PackagingTask>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <External>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageRemotePath>k__BackingField;
    private CancellationToken token;
    private IList`1<AndroidInstalledPackage> packages;
    private string fastDevRemotePath;
    private static HashSet`1<string> AssemblyExtensions;
    private static Regex SatelliteChecker;
    [ObsoleteAttribute("Use PackageApiLevel")]
public string PackageTargetApi { get; public set; }
    public int PackageApiLevel { get; public set; }
    public AndroidDevice Device { get; private set; }
    public string PackageSupportedArchs { get; public set; }
    public IProgressNotifier ProgressReporter { get; public set; }
    public bool ProvideFullDebugRuntime { get; public set; }
    public bool UsesSharedRuntime { get; public set; }
    public bool PreserveUserData { get; public set; }
    public bool ForcePackageInstall { get; public set; }
    public bool IsFastDev { get; public set; }
    public string PackageName { get; public set; }
    public string PackageFile { get; public set; }
    public string AaptToolPath { get; public set; }
    public bool AllowDeltaInstall { get; public set; }
    [ObsoleteAttribute("Activity execution at installation is no longer needed")]
public string Activity { get; public set; }
    [ObsoleteAttribute("Use FastDevAssembliesProvider")]
public List`1<string> Assemblies { get; public set; }
    [ObsoleteAttribute("Activity execution at installation is no longer needed")]
public Func`1<string> FastDevActivityProvider { get; public set; }
    public Func`1<IEnumerable`1<string>> FastDevAssembliesProvider { get; public set; }
    public Func`1<IEnumerable`1<string>> FastDevNativeLibrariesProvider { get; public set; }
    public Func`1<IEnumerable`1<string>> FastDevDexesProvider { get; public set; }
    public Func`1<IEnumerable`1<string>> FastDevPackagedResourcesProvider { get; public set; }
    public Func`1<IEnumerable`1<string>> FastDevResourcesProvider { get; public set; }
    public Func`1<IEnumerable`1<string>> FastDevTypemapsProvider { get; public set; }
    public Task`1<bool> PackagingTask { get; public set; }
    public bool External { get; private set; }
    public string PackageRemotePath { get; private set; }
    public AndroidDeploySession(AndroidDevice device, IList`1<AndroidInstalledPackage> packages);
    private static AndroidDeploySession();
    public string get_PackageTargetApi();
    public void set_PackageTargetApi(string value);
    [CompilerGeneratedAttribute]
public int get_PackageApiLevel();
    [CompilerGeneratedAttribute]
public void set_PackageApiLevel(int value);
    [CompilerGeneratedAttribute]
public AndroidDevice get_Device();
    [CompilerGeneratedAttribute]
private void set_Device(AndroidDevice value);
    [CompilerGeneratedAttribute]
public string get_PackageSupportedArchs();
    [CompilerGeneratedAttribute]
public void set_PackageSupportedArchs(string value);
    [CompilerGeneratedAttribute]
public IProgressNotifier get_ProgressReporter();
    [CompilerGeneratedAttribute]
public void set_ProgressReporter(IProgressNotifier value);
    [CompilerGeneratedAttribute]
public bool get_ProvideFullDebugRuntime();
    [CompilerGeneratedAttribute]
public void set_ProvideFullDebugRuntime(bool value);
    [CompilerGeneratedAttribute]
public bool get_UsesSharedRuntime();
    [CompilerGeneratedAttribute]
public void set_UsesSharedRuntime(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreserveUserData();
    [CompilerGeneratedAttribute]
public void set_PreserveUserData(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForcePackageInstall();
    [CompilerGeneratedAttribute]
public void set_ForcePackageInstall(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsFastDev();
    [CompilerGeneratedAttribute]
public void set_IsFastDev(bool value);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    [CompilerGeneratedAttribute]
public string get_PackageFile();
    [CompilerGeneratedAttribute]
public void set_PackageFile(string value);
    [CompilerGeneratedAttribute]
public string get_AaptToolPath();
    [CompilerGeneratedAttribute]
public void set_AaptToolPath(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowDeltaInstall();
    [CompilerGeneratedAttribute]
public void set_AllowDeltaInstall(bool value);
    [CompilerGeneratedAttribute]
public string get_Activity();
    [CompilerGeneratedAttribute]
public void set_Activity(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Assemblies();
    [CompilerGeneratedAttribute]
public void set_Assemblies(List`1<string> value);
    [CompilerGeneratedAttribute]
public Func`1<string> get_FastDevActivityProvider();
    [CompilerGeneratedAttribute]
public void set_FastDevActivityProvider(Func`1<string> value);
    [CompilerGeneratedAttribute]
public Func`1<IEnumerable`1<string>> get_FastDevAssembliesProvider();
    [CompilerGeneratedAttribute]
public void set_FastDevAssembliesProvider(Func`1<IEnumerable`1<string>> value);
    [CompilerGeneratedAttribute]
public Func`1<IEnumerable`1<string>> get_FastDevNativeLibrariesProvider();
    [CompilerGeneratedAttribute]
public void set_FastDevNativeLibrariesProvider(Func`1<IEnumerable`1<string>> value);
    [CompilerGeneratedAttribute]
public Func`1<IEnumerable`1<string>> get_FastDevDexesProvider();
    [CompilerGeneratedAttribute]
public void set_FastDevDexesProvider(Func`1<IEnumerable`1<string>> value);
    [CompilerGeneratedAttribute]
public Func`1<IEnumerable`1<string>> get_FastDevPackagedResourcesProvider();
    [CompilerGeneratedAttribute]
public void set_FastDevPackagedResourcesProvider(Func`1<IEnumerable`1<string>> value);
    [CompilerGeneratedAttribute]
public Func`1<IEnumerable`1<string>> get_FastDevResourcesProvider();
    [CompilerGeneratedAttribute]
public void set_FastDevResourcesProvider(Func`1<IEnumerable`1<string>> value);
    [CompilerGeneratedAttribute]
public Func`1<IEnumerable`1<string>> get_FastDevTypemapsProvider();
    [CompilerGeneratedAttribute]
public void set_FastDevTypemapsProvider(Func`1<IEnumerable`1<string>> value);
    [CompilerGeneratedAttribute]
public Task`1<bool> get_PackagingTask();
    [CompilerGeneratedAttribute]
public void set_PackagingTask(Task`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_External();
    [CompilerGeneratedAttribute]
private void set_External(bool value);
    [CompilerGeneratedAttribute]
public string get_PackageRemotePath();
    [CompilerGeneratedAttribute]
private void set_PackageRemotePath(string value);
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.AndroidDeploySession/<StartAsync>d__107")]
public Task StartAsync(CancellationToken token);
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.AndroidDeploySession/<RunLoggedAsync>d__108")]
private Task RunLoggedAsync(CancellationToken token);
    [ObsoleteAttribute("Use StartAsync")]
public bool Start(CancellationToken token);
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.AndroidDeploySession/<RunAsync>d__110")]
private Task RunAsync(CancellationToken token);
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.AndroidDeploySession/<EnsureCorrectSharedRuntimes>d__111")]
private Task EnsureCorrectSharedRuntimes();
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.AndroidDeploySession/<RemoveOldRuntimes>d__112")]
private Task RemoveOldRuntimes();
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.AndroidDeploySession/<CheckAndInstallSharedRuntimeAsync>d__113")]
private Task`1<bool> CheckAndInstallSharedRuntimeAsync();
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.AndroidDeploySession/<InstallSharedPlatformAsync>d__114")]
private Task`1<bool> InstallSharedPlatformAsync();
    private void ShowProgressText(string text, CancellationToken token);
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.AndroidDeploySession/<InstallPackage>d__116")]
private Task InstallPackage();
    private bool ShouldThrowIfPackageInstallFailed(PackageAlreadyExistsException e, CancellationToken token);
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.AndroidDeploySession/<FastDevAsync>d__118")]
private Task FastDevAsync(bool useExternal);
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.AndroidDeploySession/<GetFastDevRemotePathAsync>d__119")]
private Task`1<string> GetFastDevRemotePathAsync(bool useExternal);
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.AndroidDeploySession/<InstallAssemblies>d__121")]
private Task InstallAssemblies(string destinationPath, CancellationToken token);
    private Task InstallNativeLibraries(string destinationPath, CancellationToken token);
    private Task InstallDexes(string destinationPath, CancellationToken token);
    private Task InstallPackagedResources(string destinationPath, CancellationToken token);
    private Task InstallTypemaps(string destinationPath, CancellationToken token);
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.AndroidDeploySession/<InstallFastDevFiles>d__126")]
private Task InstallFastDevFiles(string destinationPath, Func`1<IEnumerable`1<string>> filesProvider, string fileKind, String[] syncDirs, bool removeUnknown, CancellationToken token);
    private void WaitForRemoteDirCreation(string destinationPath, CancellationToken token);
    public static bool TryGetSatelliteCultureAndFileName(string assemblyPath, String& culture, String& fileName);
}
[ObsoleteAttribute("Use AndroidAppManifest", "True")]
public class Xamarin.AndroidTools.AndroidManifest : object {
    private string filename;
    private XmlDocument manifest;
    public string ManifestFile { get; }
    public string ApplicationLabel { get; public set; }
    public string ApplicationIcon { get; public set; }
    public string InstallLocation { get; public set; }
    public string MinimumSdkVersion { get; public set; }
    public string TargetSdkVersion { get; public set; }
    public string Package { get; public set; }
    public bool Debuggable { get; public set; }
    public List`1<string> Permissions { get; public set; }
    public string VersionCode { get; public set; }
    public string VersionName { get; public set; }
    public AndroidManifest(string file);
    public string get_ManifestFile();
    public string GetElementValue(string path, string defaultValue);
    public string GetAttributeValue(string path, string attribute, string defaultValue);
    public void SetElementValue(string path, string value);
    public void SetAttributeValue(string path, string attribute, string value);
    public void Save();
    private XmlElement FindOrCreateNode(string path);
    private string FullyQualifyPermission(string permission);
    public string GetLaunchableActivityName();
    public string GetLaunchableUserActivityName();
    [IteratorStateMachineAttribute("Xamarin.AndroidTools.AndroidManifest/<GetLaunchableActivities>d__15")]
private IEnumerable`1<XmlElement> GetLaunchableActivities();
    public bool CanRunOnDevice(AndroidDevice device);
    public string get_ApplicationLabel();
    public void set_ApplicationLabel(string value);
    public string get_ApplicationIcon();
    public void set_ApplicationIcon(string value);
    public string get_InstallLocation();
    public void set_InstallLocation(string value);
    public string get_MinimumSdkVersion();
    public void set_MinimumSdkVersion(string value);
    public string get_TargetSdkVersion();
    public void set_TargetSdkVersion(string value);
    public string get_Package();
    public void set_Package(string value);
    public bool get_Debuggable();
    public void set_Debuggable(bool value);
    public List`1<string> get_Permissions();
    public void set_Permissions(List`1<string> value);
    public string get_VersionCode();
    public void set_VersionCode(string value);
    public string get_VersionName();
    public void set_VersionName(string value);
}
public static class Xamarin.AndroidTools.AndroidManifestValues : object {
    public static String[] InstallLocations;
    public static String[] Permissions;
    private static AndroidManifestValues();
}
[ObsoleteAttribute("Use AndroidPackageListExtensions")]
public class Xamarin.AndroidTools.AndroidPackageList : object {
    private string runtimeName;
    private string oldRuntimeName;
    private string platformName;
    [CompilerGeneratedAttribute]
private List`1<AndroidInstalledPackage> <Packages>k__BackingField;
    public List`1<AndroidInstalledPackage> Packages { get; private set; }
    public AndroidPackageList(List`1<AndroidInstalledPackage> packages);
    [CompilerGeneratedAttribute]
public List`1<AndroidInstalledPackage> get_Packages();
    [CompilerGeneratedAttribute]
private void set_Packages(List`1<AndroidInstalledPackage> value);
    public bool IsCurrentRuntimeInstalled(int runtimeVersion);
    public bool IsUnknownRuntimeInstalled();
    public List`1<AndroidInstalledPackage> GetOldRuntimes(int runtimeVersion);
    public bool IsCurrentPlatformInstalled(string apiLevel, int runtimeVersion);
    public bool IsUnknownPlatformInstalled(string apiLevel);
    public bool AreCurrentRuntimeAndPlatformInstalled(string apiLevel, int runtimeVersion);
    public List`1<AndroidInstalledPackage> GetOldPlatforms(string apiLevel, int runtimeVersion);
    public List`1<AndroidInstalledPackage> GetOldRuntimesAndPlatforms(string apiLevel, int runtimeVersion);
    public bool ContainsPackage(string packageName);
    public AndroidInstalledPackage GetPackage(string packageName);
    [CompilerGeneratedAttribute]
private bool <IsUnknownRuntimeInstalled>b__9_0(AndroidInstalledPackage p);
}
[ExtensionAttribute]
public static class Xamarin.AndroidTools.AndroidPackageListExtensions : object {
    internal static string runtimeName;
    internal static string oldRuntimeName;
    internal static string platformName;
    private static AndroidPackageListExtensions();
    [ExtensionAttribute]
public static bool IsCurrentRuntimeInstalled(IList`1<AndroidInstalledPackage> packages);
    [ExtensionAttribute]
public static bool IsUnknownRuntimeInstalled(IList`1<AndroidInstalledPackage> packages);
    [ExtensionAttribute]
public static IEnumerable`1<AndroidInstalledPackage> GetOldRuntimes(IList`1<AndroidInstalledPackage> packages);
    [ExtensionAttribute]
public static bool IsCurrentPlatformInstalled(IList`1<AndroidInstalledPackage> packages, int apiLevel);
    [ExtensionAttribute]
public static bool IsUnknownPlatformInstalled(IList`1<AndroidInstalledPackage> packages, int apiLevel);
    [ExtensionAttribute]
public static bool AreCurrentRuntimeAndPlatformInstalled(IList`1<AndroidInstalledPackage> packages, int apiLevel);
    [ExtensionAttribute]
public static List`1<AndroidInstalledPackage> GetOldPlatforms(IList`1<AndroidInstalledPackage> packages, int apiLevel);
    [ExtensionAttribute]
public static IEnumerable`1<AndroidInstalledPackage> GetOldRuntimesAndPlatforms(IList`1<AndroidInstalledPackage> packages, int apiLevel);
    [ExtensionAttribute]
public static bool ContainsPackage(IList`1<AndroidInstalledPackage> packages, string packageName);
    [ExtensionAttribute]
public static AndroidInstalledPackage GetPackage(IList`1<AndroidInstalledPackage> packages, string packageName);
}
public class Xamarin.AndroidTools.AndroidSdk : object {
    private static AndroidSdkInfo sdk;
    private static String[] ExeExtensions;
    [CompilerGeneratedAttribute]
private static string <JavaBinPath>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <AndroidToolsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <AndroidEmulatorPath>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <AndroidPlatformToolsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <AdbExe>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <AndroidExe>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <MonitorExe>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <EmulatorExe>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <JarsignerExe>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <KeyToolExe>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <JavaExe>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <JavacExe>k__BackingField;
    private static string apkanalyzer;
    private static string aapt;
    public static bool IsInstalled { get; }
    public static bool IsJdkInstalled { get; }
    [ObsoleteAttribute("Use OS.IsWindows")]
public static bool IsWindows { get; }
    [ObsoleteAttribute("Use OS.IsMac")]
public static bool IsMac { get; }
    public static string AndroidSdkPath { get; }
    [ObsoleteAttribute]
public static String[] AllAndroidSdkPaths { get; }
    public static string AndroidNdkPath { get; }
    public static string AndroidNdkHostPlatform { get; }
    [ObsoleteAttribute]
public static String[] AllAndroidNdkPaths { get; }
    public static string JavaSdkPath { get; }
    public static string JavaBinPath { get; private set; }
    [ObsoleteAttribute("Use GetCommandLineToolsPaths().")]
public static string AndroidToolsPath { get; private set; }
    public static string AndroidEmulatorPath { get; private set; }
    public static string AndroidPlatformToolsPath { get; private set; }
    public static string AdbExe { get; private set; }
    [ObsoleteAttribute("Part of obsolete `tools` package, do not use.")]
public static string AndroidExe { get; private set; }
    [ObsoleteAttribute("Part of obsolete `tools` package, do not use.")]
public static string MonitorExe { get; private set; }
    public static string EmulatorExe { get; private set; }
    public static string ZipAlignExe { get; }
    [ObsoleteAttribute("Use ApkSignerJar. This returns a path to apksigner.jar.")]
public static string ApkSignerExe { get; }
    public static string ApkSignerJar { get; }
    public static string JarsignerExe { get; private set; }
    public static string KeyToolExe { get; private set; }
    public static string JavaExe { get; private set; }
    public static string JavacExe { get; private set; }
    [ObsoleteAttribute("The `tools` package is obsolete.  Use GetCommandLineToolsVersion(string)")]
public static string SdkToolsVersion { get; }
    public static string SdkPlatformToolsVersion { get; }
    public static string SdkBuildToolsVersion { get; }
    private static AndroidSdk();
    public static void Refresh();
    public static void Refresh(string androidSdkPath, string androidNdkPath, string javaSdkPath);
    private static Task SendTelemetryEventAsync();
    private static void Logger(TraceLevel level, string value);
    public static bool get_IsInstalled();
    public static bool get_IsJdkInstalled();
    public static bool get_IsWindows();
    public static bool get_IsMac();
    public static string get_AndroidSdkPath();
    public static String[] get_AllAndroidSdkPaths();
    public static string get_AndroidNdkPath();
    public static string get_AndroidNdkHostPlatform();
    public static String[] get_AllAndroidNdkPaths();
    public static string get_JavaSdkPath();
    [CompilerGeneratedAttribute]
public static string get_JavaBinPath();
    [CompilerGeneratedAttribute]
private static void set_JavaBinPath(string value);
    [CompilerGeneratedAttribute]
public static string get_AndroidToolsPath();
    [CompilerGeneratedAttribute]
private static void set_AndroidToolsPath(string value);
    [CompilerGeneratedAttribute]
public static string get_AndroidEmulatorPath();
    [CompilerGeneratedAttribute]
private static void set_AndroidEmulatorPath(string value);
    [CompilerGeneratedAttribute]
public static string get_AndroidPlatformToolsPath();
    [CompilerGeneratedAttribute]
private static void set_AndroidPlatformToolsPath(string value);
    public static string GetEnvironmentPathOverride();
    private static string GetShortPathName(string path);
    [IteratorStateMachineAttribute("Xamarin.AndroidTools.AndroidSdk/<FindExecutableInDirectory>d__45")]
private static IEnumerable`1<string> FindExecutableInDirectory(string executable, string dir);
    [IteratorStateMachineAttribute("Xamarin.AndroidTools.AndroidSdk/<Executables>d__46")]
private static IEnumerable`1<string> Executables(string executable);
    [CompilerGeneratedAttribute]
public static string get_AdbExe();
    [CompilerGeneratedAttribute]
private static void set_AdbExe(string value);
    [CompilerGeneratedAttribute]
public static string get_AndroidExe();
    [CompilerGeneratedAttribute]
private static void set_AndroidExe(string value);
    [CompilerGeneratedAttribute]
public static string get_MonitorExe();
    [CompilerGeneratedAttribute]
private static void set_MonitorExe(string value);
    [CompilerGeneratedAttribute]
public static string get_EmulatorExe();
    [CompilerGeneratedAttribute]
private static void set_EmulatorExe(string value);
    public static string get_ZipAlignExe();
    public static string get_ApkSignerExe();
    public static string get_ApkSignerJar();
    [CompilerGeneratedAttribute]
public static string get_JarsignerExe();
    [CompilerGeneratedAttribute]
private static void set_JarsignerExe(string value);
    [CompilerGeneratedAttribute]
public static string get_KeyToolExe();
    [CompilerGeneratedAttribute]
private static void set_KeyToolExe(string value);
    [CompilerGeneratedAttribute]
public static string get_JavaExe();
    [CompilerGeneratedAttribute]
private static void set_JavaExe(string value);
    [CompilerGeneratedAttribute]
public static string get_JavacExe();
    [CompilerGeneratedAttribute]
private static void set_JavacExe(string value);
    public static string get_SdkToolsVersion();
    public static string get_SdkPlatformToolsVersion();
    public static string get_SdkBuildToolsVersion();
    public static string GetCommandLineToolsVersion(string commandLineToolsPath);
    private static string GetRevisionFromSdkPackageDirectory(string sdkPackageDirectory);
    private static void TrackJdkInfo(Dictionary`2<string, object> telemetryProperties);
    private static void TrackApiLevels(Dictionary`2<string, object> telemetryProperties);
    private static AndroidBuildToolsVersion ParseBuildToolsVersion(string input);
    private static string ValidatePath(string path);
    public static void SetPreferredAndroidSdkPath(string path);
    public static void SetPreferredJavaSdkPath(string path);
    public static void SetPreferredAndroidNdkPath(string path);
    public static bool ValidateAndroidSdkLocation(string loc);
    public static bool ValidateJavaSdkLocation(string loc);
    public static bool ValidateAndroidNdkLocation(string loc);
    public static string GetLatestPlatformDirectory();
    private static Nullable`1<int> ToInt32(string value);
    public static string GetPlatformDirectory(int apiLevel);
    public static string GetPlatformDirectory(string osVersion);
    public static bool IsPlatformInstalled(string osVersion);
    public static bool IsPlatformInstalled(int apiLevel);
    [ObsoleteAttribute("Use GetInstalledPlatformVersions(AndroidVersions)")]
public static IEnumerable`1<AndroidVersion> GetInstalledPlatformVersions();
    public static IEnumerable`1<AndroidVersion> GetInstalledPlatformVersions(AndroidVersions versions);
    private static string GetZipAlignPath();
    private static string GetApkSignerPath();
    public static string GetApkAnalyzerPath();
    public static string GetApkAnalyzerPath(string preferredCommandLineToolsVersion);
    private static string GetFallbackApkAnalyzerPath();
    public static string GetAaptPath(string preferredBuildToolsVersion);
    public static IEnumerable`1<string> GetCommandLineToolsPaths(string preferredCommandLineToolsVersion);
    public static IEnumerable`1<string> GetBuildToolsPaths(string preferredBuildToolsVersion);
    public static IEnumerable`1<string> GetBuildToolsPaths();
}
public class Xamarin.AndroidTools.AndroidSdkToolException : Exception {
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolErrorMessage>k__BackingField;
    public int ExitCode { get; private set; }
    public string ToolErrorMessage { get; private set; }
    public AndroidSdkToolException(string message, int exitCode);
    public AndroidSdkToolException(string message, int exitCode, string toolErrorMessage);
    [CompilerGeneratedAttribute]
public int get_ExitCode();
    [CompilerGeneratedAttribute]
private void set_ExitCode(int value);
    [CompilerGeneratedAttribute]
public string get_ToolErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ToolErrorMessage(string value);
}
public class Xamarin.AndroidTools.AndroidSigningOptions : object {
    [CompilerGeneratedAttribute]
private string <KeyStore>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyPass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorePass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TsaUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinSdkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageSigningAlgorithm <SigningAlgorithm>k__BackingField;
    public string KeyStore { get; public set; }
    public string KeyAlias { get; public set; }
    public string KeyPass { get; public set; }
    public string StorePass { get; public set; }
    public string TsaUrl { get; public set; }
    public Nullable`1<int> MinSdkVersion { get; public set; }
    public PackageSigningAlgorithm SigningAlgorithm { get; public set; }
    [CompilerGeneratedAttribute]
public string get_KeyStore();
    [CompilerGeneratedAttribute]
public void set_KeyStore(string value);
    [CompilerGeneratedAttribute]
public string get_KeyAlias();
    [CompilerGeneratedAttribute]
public void set_KeyAlias(string value);
    [CompilerGeneratedAttribute]
public string get_KeyPass();
    [CompilerGeneratedAttribute]
public void set_KeyPass(string value);
    [CompilerGeneratedAttribute]
public string get_StorePass();
    [CompilerGeneratedAttribute]
public void set_StorePass(string value);
    [CompilerGeneratedAttribute]
public string get_TsaUrl();
    [CompilerGeneratedAttribute]
public void set_TsaUrl(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinSdkVersion();
    [CompilerGeneratedAttribute]
public void set_MinSdkVersion(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public PackageSigningAlgorithm get_SigningAlgorithm();
    [CompilerGeneratedAttribute]
public void set_SigningAlgorithm(PackageSigningAlgorithm value);
}
[FlagsAttribute]
public enum Xamarin.AndroidTools.AndroidTargetArch : Enum {
    public int value__;
    public static AndroidTargetArch None;
    public static AndroidTargetArch Arm;
    public static AndroidTargetArch X86;
    public static AndroidTargetArch Mips;
    public static AndroidTargetArch Arm64;
    public static AndroidTargetArch X86_64;
    public static AndroidTargetArch Other;
}
public class Xamarin.AndroidTools.AndroidTargetFramework : object {
    private static Nullable`1<bool> forceSemanticVersion;
    public static bool HasSemanticFrameworkVersionScheme { get; public set; }
    public static int SemanticVersionNumber { get; }
    public static bool get_HasSemanticFrameworkVersionScheme();
    public static void set_HasSemanticFrameworkVersionScheme(bool value);
    public static void ResetInternalChanges();
    public static int get_SemanticVersionNumber();
    public static bool IsSemanticFrameworkVersion(Version v);
    public static Version AndroidToFrameworkVersion(Version av, Nullable`1<bool> hasSemanticVersionScheme);
    public static Version FrameworkToAndroidVersion(Version fxVersion);
    private static Version CreateSafeVersion(int major, int minor, int build, int revision);
}
[ObsoleteAttribute("Use Xamarin.Android.Tools.AndroidVersion, in Xamarin.Android.Tools.AndroidSdk.dll")]
public class Xamarin.AndroidTools.AndroidVersion : object {
    public static int MaxApiLevel;
    [CompilerGeneratedAttribute]
private int <ApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OSVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    public static AndroidVersion[] KnownVersions;
    public int ApiLevel { get; private set; }
    public string OSVersion { get; private set; }
    public string CodeName { get; private set; }
    public Version Version { get; private set; }
    public AndroidVersion(int apilevel, string osVersion);
    internal AndroidVersion(int apilevel, string osVersion, string codeName, Version version);
    private static AndroidVersion();
    [CompilerGeneratedAttribute]
public int get_ApiLevel();
    [CompilerGeneratedAttribute]
private void set_ApiLevel(int value);
    [CompilerGeneratedAttribute]
public string get_OSVersion();
    [CompilerGeneratedAttribute]
private void set_OSVersion(string value);
    [CompilerGeneratedAttribute]
public string get_CodeName();
    [CompilerGeneratedAttribute]
private void set_CodeName(string value);
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(Version value);
    public static int OSVersionToApiLevel(string osVersion);
    public static int TryOSVersionToApiLevel(string frameworkVersion);
    public static string ApiLevelToOSVersion(int apiLevel);
    public static string TryApiLevelToOSVersion(int apiLevel);
    public static string TryOSVersionToCodeName(string frameworkVersion);
    public static string TryFrameworkVersionToOSVersion(string frameworkVersion);
    [ObsoleteAttribute("No longer used")]
public static bool IsKnownVersion(string version);
    public sealed virtual bool Equals(AndroidVersion other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(AndroidVersion left, AndroidVersion right);
    public static bool op_Inequality(AndroidVersion left, AndroidVersion right);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class Xamarin.AndroidTools.AndroidVersionExtensions : object {
    [ExtensionAttribute]
public static AndroidVersion ToLegacyVersion(AndroidVersion androidVersion);
}
public static class Xamarin.AndroidTools.Debugging.AmIntentCommandParser : object {
    public static AmIntentCommand Parse(string command, string packageName);
    public static ExtraDataUri ParseDataUri(string v);
    public static ExtraComponentName ParseComponentName(string v);
    public static long ParseLong(string v);
    public static ExtraFloat ParseFloat(string v);
    public static Int32[] ParseIntArray(string v);
    public static Int64[] ParseLongArray(string v);
    public static ExtraFloat[] ParseFloatArray(string v);
    public static bool ParseExtraBool(string v);
}
public class Xamarin.AndroidTools.Debugging.DebuggerOptions : object {
    [CompilerGeneratedAttribute]
private IPAddress <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SdbPort>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StdoutPort>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Server>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JdwpHostName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <JdwpPort>k__BackingField;
    public IPAddress Address { get; public set; }
    public int SdbPort { get; public set; }
    public int StdoutPort { get; public set; }
    public bool Server { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public string JdwpHostName { get; public set; }
    public int JdwpPort { get; public set; }
    public DebuggerOptions(IPAddress address, int sdbPort, int stdoutPort, bool server);
    public DebuggerOptions(IPAddress address, int sdbPort, int stdoutPort, bool server, string jdwpHostName, int jdwpPort);
    [CompilerGeneratedAttribute]
public IPAddress get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(IPAddress value);
    [CompilerGeneratedAttribute]
public int get_SdbPort();
    [CompilerGeneratedAttribute]
public void set_SdbPort(int value);
    [CompilerGeneratedAttribute]
public int get_StdoutPort();
    [CompilerGeneratedAttribute]
public void set_StdoutPort(int value);
    [CompilerGeneratedAttribute]
public bool get_Server();
    [CompilerGeneratedAttribute]
public void set_Server(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public string get_JdwpHostName();
    [CompilerGeneratedAttribute]
public void set_JdwpHostName(string value);
    [CompilerGeneratedAttribute]
public int get_JdwpPort();
    [CompilerGeneratedAttribute]
public void set_JdwpPort(int value);
}
[ExtensionAttribute]
public static class Xamarin.AndroidTools.Debugging.DebuggingExtensions : object {
    private static int WAIT_BEFORE_RETRY_GET_PID;
    private static int WAIT_FOR_DEBUGGER_TO_ATTACH_MS;
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.Debugging.DebuggingExtensions/<StartWithDebuggingAsync>d__2")]
[ExtensionAttribute]
public static Task StartWithDebuggingAsync(IAndroidDevice device, ExecutionConfiguration configuration, CancellationToken token);
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.Debugging.DebuggingExtensions/<StartWithoutDebuggingAsync>d__3")]
[ExtensionAttribute]
public static Task StartWithoutDebuggingAsync(IAndroidDevice device, ExecutionConfiguration configuration, CancellationToken token);
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.Debugging.DebuggingExtensions/<SetDebugPropertiesAsync>d__4")]
[ExtensionAttribute]
public static Task SetDebugPropertiesAsync(IAndroidDevice device, string packageName, DebuggerOptions options, CancellationToken token);
    [ExtensionAttribute]
public static Task ExecuteAndLogCommandAsync(IAndroidDevice device, string command, Action`1<string> logWriter, CancellationToken token);
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.Debugging.DebuggingExtensions/<ExecuteAndLogCommandAsync>d__6")]
[ExtensionAttribute]
public static Task ExecuteAndLogCommandAsync(AndroidDevice device, string command, Action`1<string> logWriter, CancellationToken token);
    [ExtensionAttribute]
public static bool IsWSA(AndroidDevice androidDevice);
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.Debugging.DebuggingExtensions/<ConnectJdwpAsync>d__8")]
[ExtensionAttribute]
public static Task ConnectJdwpAsync(AndroidDevice androidDevice, ExecutionConfiguration config, CancellationToken token);
}
public class Xamarin.AndroidTools.Debugging.ExecutionConfiguration : object {
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private AmIntentCommand <RunCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private DebuggerOptions <Debugger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowJavaDebugging>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BeforeRunCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AfterRunCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <LogWiter>k__BackingField;
    public string PackageName { get; private set; }
    public AmIntentCommand RunCommand { get; private set; }
    public DebuggerOptions Debugger { get; private set; }
    public bool AllowJavaDebugging { get; public set; }
    public string BeforeRunCommand { get; public set; }
    public string AfterRunCommand { get; public set; }
    public Action`1<string> LogWiter { get; public set; }
    public ExecutionConfiguration(string packageName, AmIntentCommand runCommand);
    public ExecutionConfiguration(string packageName, string runCommand);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
private void set_PackageName(string value);
    [CompilerGeneratedAttribute]
public AmIntentCommand get_RunCommand();
    [CompilerGeneratedAttribute]
private void set_RunCommand(AmIntentCommand value);
    [CompilerGeneratedAttribute]
public DebuggerOptions get_Debugger();
    [CompilerGeneratedAttribute]
private void set_Debugger(DebuggerOptions value);
    [CompilerGeneratedAttribute]
public bool get_AllowJavaDebugging();
    [CompilerGeneratedAttribute]
public void set_AllowJavaDebugging(bool value);
    [CompilerGeneratedAttribute]
public string get_BeforeRunCommand();
    [CompilerGeneratedAttribute]
public void set_BeforeRunCommand(string value);
    [CompilerGeneratedAttribute]
public string get_AfterRunCommand();
    [CompilerGeneratedAttribute]
public void set_AfterRunCommand(string value);
    [CompilerGeneratedAttribute]
public Action`1<string> get_LogWiter();
    [CompilerGeneratedAttribute]
public void set_LogWiter(Action`1<string> value);
}
internal class Xamarin.AndroidTools.Debugging.Java.CommandPacket : Packet {
    [CompilerGeneratedAttribute]
private byte <CommandSet>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Command>k__BackingField;
    public byte CommandSet { get; public set; }
    public byte Command { get; public set; }
    [CompilerGeneratedAttribute]
public byte get_CommandSet();
    [CompilerGeneratedAttribute]
public void set_CommandSet(byte value);
    [CompilerGeneratedAttribute]
public byte get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(byte value);
    public virtual ReadOnlyMemory`1<byte> ToMemory();
}
public class Xamarin.AndroidTools.Debugging.Java.JdwpClient : object {
    private static string handshake;
    private static int packetSize;
    private bool disposed;
    private TcpClient tcpClient;
    private NetworkStream stream;
    [CompilerGeneratedAttribute]
private string <HostName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    public string HostName { get; }
    public int Port { get; }
    public JdwpClient(string hostname, int port);
    [CompilerGeneratedAttribute]
public string get_HostName();
    [CompilerGeneratedAttribute]
public int get_Port();
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.Debugging.Java.JdwpClient/<ConnectAsync>d__12")]
public Task ConnectAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.Debugging.Java.JdwpClient/<ReadReply>d__13`1")]
private Task`1<IEnumerable`1<T>> ReadReply(CancellationToken cancellationToken);
    [ObsoleteAttribute("Use DisconnectAsync instead", "True")]
public void Disconnect();
    public Task DisconnectAsync();
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.Debugging.Java.JdwpClient/<SendAsync>d__16")]
private Task SendAsync(CommandPacket packet, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal abstract class Xamarin.AndroidTools.Debugging.Java.Packet : object {
    private static int id;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Data>k__BackingField;
    public int Id { get; public set; }
    public byte Flags { get; public set; }
    public ReadOnlyMemory`1<byte> Data { get; public set; }
    public bool IsReply { get; }
    private static Packet();
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public byte get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(byte value);
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(ReadOnlyMemory`1<byte> value);
    public bool get_IsReply();
    public abstract virtual ReadOnlyMemory`1<byte> ToMemory();
}
internal class Xamarin.AndroidTools.Debugging.Java.ReplyPacket : Packet {
    [CompilerGeneratedAttribute]
private short <ErrorCode>k__BackingField;
    public short ErrorCode { get; public set; }
    [CompilerGeneratedAttribute]
public short get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(short value);
    public virtual ReadOnlyMemory`1<byte> ToMemory();
    public virtual void FromMemory(ReadOnlyMemory`1<byte> header, ReadOnlyMemory`1<byte> data);
}
internal class Xamarin.AndroidTools.Debugging.Java.VersionCommandPacket : CommandPacket {
}
public class Xamarin.AndroidTools.Debugging.MonoDroidProcessMonitor : object {
    private static int UNASSIGNED_PID;
    public static int RefreshPidInterval;
    private static String[] excludedLogTags;
    private ManualResetEvent endHandle;
    private object lockObj;
    private CancellationTokenSource cancellationSource;
    private IAndroidDevice device;
    private string packageName;
    private Action`1<string> onStdOut;
    private Action`1<string> onStdError;
    private Func`3<IAndroidDevice, string, Task> killProcessOnExit;
    private Action onCompleted;
    private Func`1<Task> resetTimeout;
    private Task`1<int> getPidTask;
    private Task loggingTask;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) pid;
    [CompilerGeneratedAttribute]
private bool <IsStarted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCompleted>k__BackingField;
    public bool IsStarted { get; private set; }
    public bool IsCompleted { get; private set; }
    public MonoDroidProcessMonitor(IAndroidDevice device, string packageName, Action`1<string> stdout, Action`1<string> stderr, CancellationTokenSource cancellationSource, Func`3<IAndroidDevice, string, Task> killProcessOnExit, Func`1<Task> resetTimeout, Action onCompleted);
    private static MonoDroidProcessMonitor();
    [CompilerGeneratedAttribute]
public bool get_IsStarted();
    [CompilerGeneratedAttribute]
private void set_IsStarted(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCompleted();
    [CompilerGeneratedAttribute]
private void set_IsCompleted(bool value);
    public void Start(Task processLaunchTask);
    public sealed virtual void Dispose();
    public void Cancel();
    public void WaitForCompleted();
    public void WaitForCompleted(int timeout);
    private void StartMonitoring(Task processLaunchTask);
    private void StartTrackingProcess();
    private void RefreshPid(Task`1<int> processIdTask);
    private static Task Delay(double milliseconds, CancellationToken token);
    private void StartTrackingAfterTimeout();
    private void StartLogTracking();
    private void ResetDebugerTimeout();
    private void ProcessLogLine(AndroidLogCatEntry entry);
    private void SetCompleted();
    [CompilerGeneratedAttribute]
private void <StartMonitoring>b__30_0(Task t);
    [CompilerGeneratedAttribute]
private void <StartTrackingAfterTimeout>b__34_0(Task d);
    [CompilerGeneratedAttribute]
private void <StartLogTracking>b__35_0(Task t);
}
internal class Xamarin.AndroidTools.FileUtil : object {
    public static string GetTempFilenameForWrite(string fileName);
    public static void SystemRename(string sourceFile, string destFile);
    private static int rename(string old, string new);
}
public interface Xamarin.AndroidTools.IProgressNotifier {
    public abstract virtual void BeginStep(string step);
    public abstract virtual void EndStep(string step);
    public abstract virtual void ReportMessage(string message);
    public abstract virtual void ShowErrorDialog(string title, string message);
    public abstract virtual void ShowErrorDialog(string title, string message, Exception ex);
    public abstract virtual void ReportProgress(long copiedBytes, long totalBytes);
}
public class Xamarin.AndroidTools.JdkProperties : object {
    private static Dictionary`2<string, JdkProperties> propertiesCache;
    public static bool Cached;
    public static bool ValidateBeforeQuery;
    [CompilerGeneratedAttribute]
private string <Vendor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Vendor { get; public set; }
    public string Version { get; public set; }
    private static JdkProperties();
    [CompilerGeneratedAttribute]
public string get_Vendor();
    [CompilerGeneratedAttribute]
public void set_Vendor(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    public static JdkProperties Get(string jsdkPath);
    public static void Reset();
    private static bool AnySystemJavasInstalled();
    private static JdkProperties QueryProperties(string javaPath);
    private static void ProcessData(JdkProperties props, string data);
    private static string GetValue(string data);
    private static string GetJavaPath(string javaSdkPath);
}
public static class Xamarin.AndroidTools.KernelEx : object {
    private static int GetLongPathName(string path, StringBuilder longPath, int longPathLength);
    public static string GetLongPathName(string path);
    private static int GetShortPathName(string path, StringBuilder shortPath, int shortPathLength);
    public static string GetShortPathName(string path);
}
public class Xamarin.AndroidTools.MonoDroidSdk : object {
    private static MonoDroidSdk oldSdk;
    [ObsoleteAttribute("Do not use.")]
public static string Generator;
    [ObsoleteAttribute("Do not use.")]
public static string Javac;
    private static MonoDroidSdkBase sdk;
    private static String[] sharedRuntimeAbis;
    private static String[] sharedRuntimeAndBundleAbis;
    [CompilerGeneratedAttribute]
private static Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <VersionString>k__BackingField;
    [ObsoleteAttribute("Use static MonoDroidSdk members")]
public static MonoDroidSdk Sdk { get; }
    [ObsoleteAttribute("Use MonoDroidSdk.SdkPath")]
public string MonoAndroidSdkPath { get; }
    [ObsoleteAttribute("Use MonoDroidSdk.BinPath")]
public string MonoAndroidBinPath { get; }
    [ObsoleteAttribute("Use MonoDroidSdk.RuntimePath")]
public string MonoAndroidRuntimePath { get; }
    [ObsoleteAttribute("Use MonoDroidSdk.FrameworkPath")]
public string MonoAndroidFrameworkPath { get; }
    [ObsoleteAttribute("Use MonoDroidSdk.GeneratorTool")]
public string GeneratorExe { get; }
    [ObsoleteAttribute("Use MonoDroidSdk.SharedRuntimeVersion")]
public int CurrentRuntimeVersion { get; }
    [ObsoleteAttribute("Do not use.")]
public static string AdbTool { get; }
    [ObsoleteAttribute("Do not use.")]
public static string SdkPath { get; }
    public static string BinPath { get; }
    public static string IncludePath { get; }
    public static string RuntimePath { get; }
    public static string FrameworkPath { get; }
    public static string LibrariesPath { get; }
    public static int SharedRuntimeVersion { get; }
    public static bool IsInstalled { get; }
    public static AndroidVersions AndroidVersions { get; }
    public static String[] SharedRuntimeAbis { get; }
    public static String[] SharedRuntimeAndBundleAbis { get; }
    public static string DefaultAbi { get; }
    [ObsoleteAttribute("Do not use.")]
public static string GeneratorToolExe { get; }
    [ObsoleteAttribute("Do not use.")]
public static string JavaDocToMDocExe { get; }
    [ObsoleteAttribute("Do not use.")]
public static string MDocExe { get; }
    public static Int32[] SupportedApiLevels { get; }
    public static Version Version { get; private set; }
    public static string VersionString { get; private set; }
    public static bool SupportsSplitApk { get; }
    public static bool SupportsAot { get; }
    public static bool SupportsMultiDex { get; }
    public static bool SupportsProguard { get; }
    public static bool SupportsArm64 { get; }
    [ObsoleteAttribute("Use static MonoDroidSdk members")]
public MonoDroidSdk(string mfaSdkPath, string mfaFrameworkPath);
    private static MonoDroidSdk();
    public static MonoDroidSdk get_Sdk();
    public string get_MonoAndroidSdkPath();
    public string get_MonoAndroidBinPath();
    public string get_MonoAndroidRuntimePath();
    public string get_MonoAndroidFrameworkPath();
    public string get_GeneratorExe();
    [ObsoleteAttribute("Use MonoDroidSdk.SharedRuntimeVersion")]
public int GetCurrentSharedRuntimeVersion();
    public int get_CurrentRuntimeVersion();
    private static MonoDroidSdkBase GetSdk();
    public static void Refresh(string mfaSdkPath, string mfaFrameworkPath);
    public static void Refresh(string runtimePath, string binPath, string bclPath);
    public static void RefreshIfSdkChanged();
    public static string get_AdbTool();
    public static string get_SdkPath();
    public static string get_BinPath();
    public static string get_IncludePath();
    public static string get_RuntimePath();
    public static string get_FrameworkPath();
    public static string get_LibrariesPath();
    public static int get_SharedRuntimeVersion();
    public static bool get_IsInstalled();
    public static AndroidVersions get_AndroidVersions();
    public static String[] get_SharedRuntimeAbis();
    public static String[] get_SharedRuntimeAndBundleAbis();
    public static string get_DefaultAbi();
    public static string get_GeneratorToolExe();
    public static string get_JavaDocToMDocExe();
    public static string get_MDocExe();
    [ObsoleteAttribute("Please use PlatformPackage.GetPlatformPackagePath")]
public static string GetPlatformRuntimePackage(int apiLevel);
    [ObsoleteAttribute("Please use PlatformPackage.GetPlatformPackageVersion")]
public static int GetPlatformRuntimePackageVersion(int apiLevel);
    public static string GetSharedRuntimePackage(bool debug, string arch);
    public static Int32[] get_SupportedApiLevels();
    [IteratorStateMachineAttribute("Xamarin.AndroidTools.MonoDroidSdk/<GetSupportedApiLevels>d__64")]
private static IEnumerable`1<int> GetSupportedApiLevels();
    [ObsoleteAttribute("Do not use.")]
public static string GetPlatformNativeLibPath(string abi);
    [ObsoleteAttribute("Do not use.")]
public static string GetPlatformNativeLibPath(AndroidTargetArch arch);
    [CompilerGeneratedAttribute]
public static Version get_Version();
    [CompilerGeneratedAttribute]
private static void set_Version(Version value);
    [CompilerGeneratedAttribute]
public static string get_VersionString();
    [CompilerGeneratedAttribute]
private static void set_VersionString(string value);
    private static Tuple`3<string, Version, string> LoadVersionInfo();
    internal static Version ParseVersion(string versionString);
    public static bool get_SupportsSplitApk();
    public static bool get_SupportsAot();
    public static bool get_SupportsMultiDex();
    public static bool get_SupportsProguard();
    public static bool get_SupportsArm64();
    public static string GetApiLevelForFrameworkVersion(string framework);
    public static string GetFrameworkVersionForApiLevel(string apiLevel);
    public static bool IsSupportedFrameworkLevel(string apiLevel);
}
internal abstract class Xamarin.AndroidTools.MonoDroidSdkBase : object {
    [CompilerGeneratedAttribute]
private string <SdkPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BinPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IncludePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuntimePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LibrariesPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BclPath>k__BackingField;
    [CompilerGeneratedAttribute]
private AndroidVersions <AndroidVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SharedRuntimeVersion>k__BackingField;
    [ObsoleteAttribute("Do not use.")]
public string SdkPath { get; private set; }
    public string BinPath { get; private set; }
    public string IncludePath { get; private set; }
    public string RuntimePath { get; private set; }
    public string LibrariesPath { get; private set; }
    public string BclPath { get; private set; }
    public AndroidVersions AndroidVersions { get; private set; }
    public int SharedRuntimeVersion { get; private set; }
    [CompilerGeneratedAttribute]
public string get_SdkPath();
    [CompilerGeneratedAttribute]
private void set_SdkPath(string value);
    [CompilerGeneratedAttribute]
public string get_BinPath();
    [CompilerGeneratedAttribute]
private void set_BinPath(string value);
    [CompilerGeneratedAttribute]
public string get_IncludePath();
    [CompilerGeneratedAttribute]
private void set_IncludePath(string value);
    [CompilerGeneratedAttribute]
public string get_RuntimePath();
    [CompilerGeneratedAttribute]
private void set_RuntimePath(string value);
    [CompilerGeneratedAttribute]
public string get_LibrariesPath();
    [CompilerGeneratedAttribute]
private void set_LibrariesPath(string value);
    [CompilerGeneratedAttribute]
public string get_BclPath();
    [CompilerGeneratedAttribute]
private void set_BclPath(string value);
    [CompilerGeneratedAttribute]
public AndroidVersions get_AndroidVersions();
    [CompilerGeneratedAttribute]
private void set_AndroidVersions(AndroidVersions value);
    [CompilerGeneratedAttribute]
public int get_SharedRuntimeVersion();
    [CompilerGeneratedAttribute]
private void set_SharedRuntimeVersion(int value);
    public void Initialize(string runtimePath, string binPath, string bclPath);
    private static string GetValidPath(string description, string path, Func`2<string, bool> validator, Func`1<string> defaultPath);
    public void Reset();
    private string GetSdkPath(string runtimePath);
    protected abstract virtual string FindRuntime();
    protected abstract virtual string FindFramework(string runtimePath);
    protected abstract virtual bool ValidateBin(string binPath);
    protected static bool ValidateRuntime(string loc);
    protected static bool ValidateFramework(string loc);
    public string FindVersionFile();
    [IteratorStateMachineAttribute("Xamarin.AndroidTools.MonoDroidSdkBase/<GetVersionFileLocations>d__42")]
protected virtual IEnumerable`1<string> GetVersionFileLocations();
    protected abstract virtual string FindBin(string runtimePath);
    protected abstract virtual string FindInclude(string runtimePath);
    protected abstract virtual string FindLibraries(string runtimePath);
    [ObsoleteAttribute("Do not use.")]
public string GetPlatformNativeLibPath(string abi);
    [ObsoleteAttribute("Do not use.")]
public string GetPlatformNativeLibPath(AndroidTargetArch arch);
    [ObsoleteAttribute("Do not use.")]
private static string GetMonoDroidArchName(AndroidTargetArch arch);
    [ObsoleteAttribute]
protected string FindPlatformNativeLibPath(string sdk, string arch);
    private static XmlReaderSettings GetSafeReaderSettings();
    private int GetCurrentSharedRuntimeVersion(string runtimePath);
    internal static int GetManifestVersion(string file);
    public IEnumerable`1<string> GetSupportedApiLevels();
    public string GetApiLevelForFrameworkVersion(string framework);
    public string GetFrameworkVersionForApiLevel(string apiLevel);
    public bool IsSupportedFrameworkLevel(string apiLevel);
}
internal class Xamarin.AndroidTools.MonoDroidSdkUnix : MonoDroidSdkBase {
    private static String[] RuntimeToFrameworkPaths;
    private static String[] SearchPaths;
    private static MonoDroidSdkUnix();
    protected virtual string FindRuntime();
    private string GetRuntimePathFromEnvironment();
    protected virtual bool ValidateBin(string binPath);
    protected virtual string FindFramework(string runtimePath);
    protected virtual string FindBin(string runtimePath);
    protected virtual string FindInclude(string runtimePath);
    protected virtual string FindLibraries(string runtimePath);
}
internal class Xamarin.AndroidTools.MonoDroidSdkWindows : MonoDroidSdkBase {
    private static String[] RuntimeToFrameworkPaths;
    private static MonoDroidSdkWindows();
    protected virtual string FindRuntime();
    protected virtual string FindFramework(string runtimePath);
    protected virtual string FindBin(string runtimePath);
    protected virtual bool ValidateBin(string binPath);
    protected virtual string FindInclude(string runtimePath);
    protected virtual string FindLibraries(string runtimePath);
    [IteratorStateMachineAttribute("Xamarin.AndroidTools.MonoDroidSdkWindows/<GetVersionFileLocations>d__7")]
protected virtual IEnumerable`1<string> GetVersionFileLocations();
}
public class Xamarin.AndroidTools.MonoSdk : object {
    private static MonoSdkBase sdk;
    public static bool IsInstalled { get; }
    public static string SdkPath { get; }
    public static string BinPath { get; }
    public static string IncludePath { get; }
    public static string MonoExecutable { get; }
    public static string MkbundleTool { get; }
    private static MonoSdkBase GetSdk();
    public static void Refresh(string monoSdkPath);
    public static bool get_IsInstalled();
    public static string get_SdkPath();
    public static string get_BinPath();
    public static string get_IncludePath();
    public static string get_MonoExecutable();
    public static string get_MkbundleTool();
}
internal abstract class Xamarin.AndroidTools.MonoSdkBase : object {
    private static string publib;
    [CompilerGeneratedAttribute]
private string <SdkPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BinPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IncludePath>k__BackingField;
    public string SdkPath { get; private set; }
    public string BinPath { get; private set; }
    public string IncludePath { get; private set; }
    public string MonoExecutable { get; }
    public string Mkbundle { get; }
    private static MonoSdkBase();
    [CompilerGeneratedAttribute]
public string get_SdkPath();
    [CompilerGeneratedAttribute]
private void set_SdkPath(string value);
    [CompilerGeneratedAttribute]
public string get_BinPath();
    [CompilerGeneratedAttribute]
private void set_BinPath(string value);
    [CompilerGeneratedAttribute]
public string get_IncludePath();
    [CompilerGeneratedAttribute]
private void set_IncludePath(string value);
    public abstract virtual string get_MonoExecutable();
    public abstract virtual string get_Mkbundle();
    public void Initialize(string monoSdkPath);
    protected abstract virtual string FindSdk();
    protected virtual bool ValidateSdk(string loc);
}
internal class Xamarin.AndroidTools.MonoSdkUnix : MonoSdkBase {
    private static String[] SearchPaths;
    public string MonoExecutable { get; }
    public string Mkbundle { get; }
    private static MonoSdkUnix();
    public virtual string get_MonoExecutable();
    public virtual string get_Mkbundle();
    protected virtual string FindSdk();
}
internal class Xamarin.AndroidTools.MonoSdkWindows : MonoSdkBase {
    public string MonoExecutable { get; }
    public string Mkbundle { get; }
    public virtual string get_MonoExecutable();
    public virtual string get_Mkbundle();
    protected virtual string FindSdk();
    private static Version GetVersion(string monoDir);
}
public static class Xamarin.AndroidTools.OS : object {
    public static bool IsWindows;
    public static bool IsMac;
    internal static string ProgramFilesX86;
    private static OS();
    private static bool IsRunningOnMac();
    private static int uname(IntPtr buf);
    private static string GetProgramFilesX86();
    internal static string GetXamarinAndroidCacheDir();
}
public enum Xamarin.AndroidTools.PackageSigningAlgorithm : Enum {
    public int value__;
    public static PackageSigningAlgorithm Unsupported;
    public static PackageSigningAlgorithm RSA;
    public static PackageSigningAlgorithm DSA;
    public static PackageSigningAlgorithm SHA256withRSA;
}
public static class Xamarin.AndroidTools.PlatformPackage : object {
    [ObsoleteAttribute("Use GetPlatformPackageVersion(int, ref string)")]
public static int GetPlatformPackageVersion(int apiLevel);
    public static int GetPlatformPackageVersion(int apiLevel, String& packageName);
    internal static Version ToVersion(string frameworkDir);
    private static int GetVersionInfo(string frameworkVersion);
    [ObsoleteAttribute("Use GetPlatformPackagePathAsync")]
public static string GetPlatformPackagePath(int apiLevel, string aaptPath, IProgressNotifier progressReporter, CancellationToken token);
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.PlatformPackage/<GetPlatformPackagePathAsync>d__5")]
public static Task`1<string> GetPlatformPackagePathAsync(int apiLevel, string aaptPath, IProgressNotifier progressReporter, CancellationToken token);
    private static void CopyAssemblies(string frameworkVersion, string resourceDir, IProgressNotifier progressReporter, CancellationToken token);
    private static void CreateAndroidManifest(int apiLevel, int version, string frameworkVersion, string androidManifest, IProgressNotifier progressReporter, CancellationToken token);
    private static string Aapt(string aapt, string androidManifest, string resourceDir, string outDir, IProgressNotifier progressReporter, CancellationToken token);
    private static void Exec(string step, ProcessStartInfo psi, IProgressNotifier progressReporter, CancellationToken token);
    private static Task ApkSigner(string unsigned, string signed, IProgressNotifier progressReporter, CancellationToken token);
    private static void Zipalign(string unaligned, string packageFile, IProgressNotifier progressReporter, CancellationToken token);
    internal static void ReportBeginStep(IProgressNotifier progressReporter, string step);
    internal static void ReportEndStep(IProgressNotifier progressReporter, string step);
    internal static void ReportMessage(IProgressNotifier progressReporter, string format, Object[] args);
}
public static class Xamarin.AndroidTools.ProcessUtils : object {
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.ProcessUtils/<StartProcess>d__0")]
public static Task`1<int> StartProcess(ProcessStartInfo psi, TextWriter stdout, TextWriter stderr, CancellationToken cancellationToken, Action`1<Process> onStarted);
    private static void KillProcess(Process p);
    private static Task WaitForExitAsync(Process process);
    [AsyncStateMachineAttribute("Xamarin.AndroidTools.ProcessUtils/<ReadStreamAsync>d__3")]
private static Task ReadStreamAsync(StreamReader stream, TextWriter destination);
    public static Task`1<TResult> ExecuteToolAsync(string exe, ProcessArgumentBuilder args, Func`2<string, TResult> result, CancellationToken token, Action`1<Process> onStarted);
}
internal class Xamarin.AndroidTools.ProgressTextWriter : TextWriter {
    [CompilerGeneratedAttribute]
private IProgressNotifier <ProgressReporter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Step>k__BackingField;
    private StringBuilder message;
    public IProgressNotifier ProgressReporter { get; private set; }
    public string Step { get; private set; }
    public Encoding Encoding { get; }
    public ProgressTextWriter(IProgressNotifier progressRepoter, string step);
    [CompilerGeneratedAttribute]
public IProgressNotifier get_ProgressReporter();
    [CompilerGeneratedAttribute]
private void set_ProgressReporter(IProgressNotifier value);
    [CompilerGeneratedAttribute]
public string get_Step();
    [CompilerGeneratedAttribute]
private void set_Step(string value);
    public virtual Encoding get_Encoding();
    public virtual void Write(char value);
    public virtual void Write(string value);
    protected virtual void Dispose(bool disposing);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Xamarin.AndroidTools.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string JdwpClientDisconnectError { get; }
    internal static string XA5300_Android_SDK { get; }
    internal static string XA5300_AndroidSdk_JdkInfo { get; }
    internal static string XA5300_AndroidSdk_Refresh_Exception { get; }
    internal static string XA5300_Java_SDK { get; }
    internal static string XA5300_MonoDroidSdk_Refresh_Exception { get; }
    internal static string XA5300_MonoDroidSdk_XA_Version { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_JdwpClientDisconnectError();
    internal static string get_XA5300_Android_SDK();
    internal static string get_XA5300_AndroidSdk_JdkInfo();
    internal static string get_XA5300_AndroidSdk_Refresh_Exception();
    internal static string get_XA5300_Java_SDK();
    internal static string get_XA5300_MonoDroidSdk_Refresh_Exception();
    internal static string get_XA5300_MonoDroidSdk_XA_Version();
}
public static class Xamarin.AndroidTools.PublicationUtilities.KeyManagement : object {
    private static string keystoreBaseDir;
    private static KeyManagement();
    internal static void OverrideKeystoreBaseDirectory(string folder);
    private static void Initialize(Platform platform);
    public static void DeleteKey(KeystoreEntry key);
    public static Task`1<KeystoreEntry> GetKeyAsync(string keystore);
    public static Task`1<List`1<KeystoreEntry>> ListManagedKeysAsync();
    public static Task`1<List`1<KeystoreEntry>> ListKeystoreAliasesAsync(string store, string storePassword);
    private static Task`1<List`1<KeystoreEntry>> ExtractAliasInfoAsync(string store, DateTime currentCreationTimestamp);
    public static Task`1<string> GetAliasDetailAsync(string store, string alias, string storePassword);
    public static Task`1<string> CreateKeyAsync(string alias, string password, string dname, int validity);
    public static Task`1<string> CreateKeyAsync(string alias, string password, string commonName, string organizationUnit, string organization, string locality, string state, string country, int validity);
    public static Task`1<string> ImportKeyAsync(string keystore, string alias, string storePassword, string aliasPassword, DateTime creationDate);
    public static string GetDNameFromValues(String[] values);
    public static string GetDNameFromValues(string commonName, string organizationUnit, string organization, string locality, string state, string country);
    public static bool IsValidAlias(string alias);
    public static string GetErrorText(AggregateException ex);
    private static string GetEscapedDnameValue(string value);
    private static string CreateStoreFilename(string alias);
    private static string CreateStoreDirectory(string baseDir, string alias);
    private static Tuple`2<DateTime, string> GetAliasInfo(string keystoreFile);
    private static void WriteCreationDateInfo(string keystoreFile, DateTime creationDate, string validityInfo);
    public static List`1<Tuple`3<string, DateTime, string>> ExtractAliasInfo(string listOutput);
    private static void CheckInitialized();
}
public class Xamarin.AndroidTools.PublicationUtilities.KeystoreEntry : object {
    [CompilerGeneratedAttribute]
private string <Keystore>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValidityInfo>k__BackingField;
    public string Keystore { get; private set; }
    public string Alias { get; private set; }
    public DateTime CreationDate { get; private set; }
    public string ValidityInfo { get; private set; }
    public KeystoreEntry(string keystore, string alias, DateTime creationDate, string validityInfo);
    [CompilerGeneratedAttribute]
public string get_Keystore();
    [CompilerGeneratedAttribute]
private void set_Keystore(string value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
private void set_Alias(string value);
    [CompilerGeneratedAttribute]
public DateTime get_CreationDate();
    [CompilerGeneratedAttribute]
private void set_CreationDate(DateTime value);
    [CompilerGeneratedAttribute]
public string get_ValidityInfo();
    [CompilerGeneratedAttribute]
private void set_ValidityInfo(string value);
}
public static class Xamarin.AndroidTools.PublicationUtilities.PackageSigningTasks : object {
    private static Func`2<string, bool> defaultOutputParser;
    private static PackageSigningTasks();
    public static Task`1<bool> QueryPackageSignatureAsync(string apkFile, CancellationToken token);
    public static Task`1<bool> QueryPackageSignatureAsync(string apkFile, CancellationToken token, string jarsigner);
    public static Task`1<bool> SignPackageAsync(AndroidSigningOptions options, string unsignedApk, string signedApk, CancellationToken token);
    public static Task`1<bool> SignPackageAsync(AndroidSigningOptions options, string unsignedApk, string signedApk, CancellationToken token, string jarsigner);
    public static Task`1<bool> SignPackageWithApkSignerAsync(AndroidSigningOptions options, string unsignedApk, string signedApk, CancellationToken token, string apksigner);
    public static Task`1<bool> SignPackageWithApkSignerAsync(AndroidSigningOptions options, string unsignedApk, string signedApk, CancellationToken token, string apksigner, Action`1<string> logMessage);
    public static Task`1<PackageSigningAlgorithm> DetermineSigningAlgorithm(string keystore, string alias, CancellationToken token);
    public static Task`1<PackageSigningAlgorithm> DetermineSigningAlgorithm(string keystore, string alias, CancellationToken token, string keytool);
    private static PackageSigningAlgorithm FromString(string alg);
    public static Task`1<bool> AlignPackageAsync(string srcApk, string destApk, CancellationToken token);
    public static Task`1<bool> AlignPackageAsync(string srcApk, string destApk, CancellationToken token, string zipAlignExe);
    public static Task`1<bool> VerifyPackageAlignmentAsync(string apkfileName, CancellationToken token);
    public static Task`1<bool> VerifyPackageAlignmentAsync(string apkfileName, CancellationToken token, string zipAlignExe);
    public static Task`1<bool> GenerateKeyPairAsync(AndroidSigningOptions options, string dname, int validity, CancellationToken token);
    public static Task`1<bool> GenerateKeyPairAsync(AndroidSigningOptions options, string dname, int validity, CancellationToken token, string keytool);
    public static Task`1<bool> VerifyKeyPairAsync(AndroidSigningOptions options, CancellationToken token);
    public static Task`1<bool> VerifyKeyPairAsync(AndroidSigningOptions options, CancellationToken token, string keytool);
    public static Task`1<string> ListKeyStoreAliasesAsync(string keystore, string storePassword, CancellationToken token);
    public static Task`1<string> ListKeyStoreAliasesAsync(string keystore, string storePassword, CancellationToken token, string keytool);
    public static Task`1<string> ListKeyStoreAliasAsync(string keystore, string alias, string storePassword, CancellationToken token);
    public static Task`1<string> ListKeyStoreAliasAsync(string keystore, string alias, string storePassword, CancellationToken token, string keytool);
    public static Task`1<bool> ImportKeyAsync(string sourceKeystore, string sourceStorePassword, string alias, string aliasPassword, string destKeystore, CancellationToken token);
    public static Task`1<bool> ImportKeyAsync(string sourceKeystore, string sourceStorePassword, string alias, string aliasPassword, string destKeystore, CancellationToken token, string keytool);
}
public static class Xamarin.AndroidTools.PublishAndroidApplication : object {
    public static Task`1<bool> SignPackage(AndroidSigningOptions options, string unsignedApk, string signedApk, StringWriter output, CancellationToken token);
    public static Task`1<bool> AlignPackage(string srcApk, string destApk, StringWriter output, CancellationToken token);
    public static Task`1<bool> GenerateKeyPair(AndroidSigningOptions options, string dname, int validity, StringWriter output, CancellationToken token);
    public static Task`1<bool> VerifyKeyPair(AndroidSigningOptions options, StringWriter output, CancellationToken token);
    private static bool HandleAsyncTaskAndReturnBool(Task`1<bool> task, string faultMesage, StringWriter output);
}
internal static class Xamarin.AndroidTools.RegistryEx : object {
    private static string ADVAPI;
    public static UIntPtr CurrentUser;
    public static UIntPtr LocalMachine;
    private static RegistryEx();
    private static int RegOpenKeyEx(UIntPtr hKey, string subKey, UInt32 reserved, UInt32 sam, UIntPtr& phkResult);
    private static int RegQueryValueExW(UIntPtr hKey, string lpValueName, int lpReserved, UInt32& lpType, StringBuilder lpData, UInt32& lpcbData);
    private static int RegSetValueExW(UIntPtr hKey, string lpValueName, int lpReserved, UInt32 dwType, string data, UInt32 cbData);
    private static int RegSetValueExW(UIntPtr hKey, string lpValueName, int lpReserved, UInt32 dwType, IntPtr data, UInt32 cbData);
    private static int RegCreateKeyEx(UIntPtr hKey, string subKey, UInt32 reserved, string class, UInt32 options, UInt32 samDesired, IntPtr lpSecurityAttributes, UIntPtr& phkResult, Disposition& lpdwDisposition);
    private static int RegCloseKey(UIntPtr hKey);
    public static string GetValueString(UIntPtr key, string subkey, string valueName, Wow64 wow64);
    public static void SetValueString(UIntPtr key, string subkey, string valueName, string value, Wow64 wow64);
}
internal static class Xamarin.AndroidTools.Sdks.RegistryEx : object {
    private static string ADVAPI;
    public static UIntPtr CurrentUser;
    public static UIntPtr LocalMachine;
    private static RegistryEx();
    private static int RegOpenKeyEx(UIntPtr hKey, string subKey, UInt32 reserved, UInt32 sam, UIntPtr& phkResult);
    private static int RegQueryValueExW(UIntPtr hKey, string lpValueName, int lpReserved, UInt32& lpType, StringBuilder lpData, UInt32& lpcbData);
    private static int RegSetValueExW(UIntPtr hKey, string lpValueName, int lpReserved, UInt32 dwType, string data, UInt32 cbData);
    private static int RegSetValueExW(UIntPtr hKey, string lpValueName, int lpReserved, UInt32 dwType, IntPtr data, UInt32 cbData);
    private static int RegCreateKeyEx(UIntPtr hKey, string subKey, UInt32 reserved, string class, UInt32 options, UInt32 samDesired, IntPtr lpSecurityAttributes, UIntPtr& phkResult, Disposition& lpdwDisposition);
    private static int RegCloseKey(UIntPtr hKey);
    public static string GetValueString(UIntPtr key, string subkey, string valueName, Wow64 wow64);
    public static void SetValueString(UIntPtr key, string subkey, string valueName, string value, Wow64 wow64);
}
internal class Xamarin.AndroidTools.TeeTextWriter : StringWriter {
    [CompilerGeneratedAttribute]
private TextWriter <Output>k__BackingField;
    public TextWriter Output { get; private set; }
    public TeeTextWriter(TextWriter output);
    [CompilerGeneratedAttribute]
public TextWriter get_Output();
    [CompilerGeneratedAttribute]
private void set_Output(TextWriter value);
    public virtual void Write(char value);
    public virtual void Write(string value);
    public virtual void Write(Char[] buffer, int index, int count);
}
[ExtensionAttribute]
internal static class Xamarin.AndroidTools.Utilities.SdkBuildProperties : object {
    public static IEnumerable`1<string> LoadProperties(string propertyFile);
    [ExtensionAttribute]
public static string GetPropertyValue(IEnumerable`1<string> properties, string propertyName);
}
[ObsoleteAttribute]
public static class Xamarin.AndroidTools.Utils : object {
    [ObsoleteAttribute("Use MonoDroidSdk.SupportedApiLevels")]
public static Int32[] SupportedApiLevels { get; }
    [ObsoleteAttribute("Use AndroidVersion.TryOSVersionToApiLevel")]
public static int FrameworkVersionToApiLevel(string version);
    public static Int32[] get_SupportedApiLevels();
    [ObsoleteAttribute("Use AndroidSdk.AndroidSdkPath")]
public static string GetAndroidSdkPath();
    [ObsoleteAttribute("Use AndroidSdk.SetPreferredAndroidSdkPath")]
public static void SetAndroidSdkPath(string path);
}
