internal class ThisAssembly : object {
}
public class Xamarin.Build.AsyncTask : Task {
    private CancellationTokenSource cts;
    private Queue logMessageQueue;
    private Queue warningMessageQueue;
    private Queue errorMessageQueue;
    private Queue customMessageQueue;
    private ManualResetEvent logDataAvailable;
    private ManualResetEvent errorDataAvailable;
    private ManualResetEvent warningDataAvailable;
    private ManualResetEvent customDataAvailable;
    private ManualResetEvent taskCancelled;
    private ManualResetEvent completed;
    private bool isRunning;
    private object eventlock;
    private int uiThreadId;
    [CompilerGeneratedAttribute]
private bool <YieldDuringToolExecution>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    public bool YieldDuringToolExecution { get; public set; }
    public CancellationToken CancellationToken { get; }
    protected string WorkingDirectory { get; private set; }
    [ObsoleteAttribute("Do not use the Log.LogXXXX from within your Async task as it will Lock the Visual Studio UI. Use the this.LogXXXX methods instead.")]
private TaskLoggingHelper Log { get; }
    [CompilerGeneratedAttribute]
public bool get_YieldDuringToolExecution();
    [CompilerGeneratedAttribute]
public void set_YieldDuringToolExecution(bool value);
    public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
protected string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
private void set_WorkingDirectory(string value);
    private TaskLoggingHelper get_Log();
    public sealed virtual void Cancel();
    protected void Complete(Task task);
    public void Complete();
    public void LogDebugTaskItems(string message, String[] items);
    public void LogDebugTaskItems(string message, ITaskItem[] items);
    public void LogMessage(string message);
    public void LogMessage(string message, Object[] messageArgs);
    public void LogDebugMessage(string message);
    public void LogDebugMessage(string message, Object[] messageArgs);
    public void LogMessage(string message, MessageImportance importance);
    public void LogError(string message);
    public void LogError(string message, Object[] messageArgs);
    public void LogCodedError(string code, string message);
    public void LogCodedError(string code, string message, Object[] messageArgs);
    public void LogCodedError(string code, string file, int lineNumber, string message, Object[] messageArgs);
    public void LogCodedError(string code, string message, string file, int lineNumber);
    public void LogWarning(string message);
    public void LogWarning(string message, Object[] messageArgs);
    public void LogCodedWarning(string code, string message);
    public void LogCodedWarning(string code, string message, Object[] messageArgs);
    public void LogCodedWarning(string code, string file, int lineNumber, string message, Object[] messageArgs);
    public void LogCodedWarning(string code, string message, string file, int lineNumber);
    public void LogCustomBuildEvent(CustomBuildEventArgs e);
    public virtual bool Execute();
    private void EnqueueMessage(Queue queue, object item, ManualResetEvent resetEvent);
    private void LogInternal(Queue queue, Action`1<T> action, ManualResetEvent resetEvent);
    protected void Yield();
    protected void Reacquire();
    protected void WaitForCompletion();
    [CompilerGeneratedAttribute]
private void <WaitForCompletion>b__55_0(BuildMessageEventArgs e);
    [CompilerGeneratedAttribute]
private void <WaitForCompletion>b__55_1(BuildErrorEventArgs e);
    [CompilerGeneratedAttribute]
private void <WaitForCompletion>b__55_2(BuildWarningEventArgs e);
    [CompilerGeneratedAttribute]
private void <WaitForCompletion>b__55_3(CustomBuildEventArgs e);
}
