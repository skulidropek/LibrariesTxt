public class Kajabity.Tools.Java.JavaProperties : Hashtable {
    protected Hashtable defaults;
    internal static Encoding DefaultEncoding { get; }
    public JavaProperties(Hashtable defaults);
    internal static Encoding get_DefaultEncoding();
    public void Load(Stream streamIn);
    public void Load(Stream streamIn, Encoding encoding);
    public void Store(Stream streamOut, string comments);
    public string GetProperty(string key);
    public string GetProperty(string key, string defaultValue);
    public string SetProperty(string key, string newValue);
    public IEnumerator PropertyNames();
    private string AsString(object o);
}
public class Kajabity.Tools.Java.JavaPropertyReader : object {
    private static int MATCH_end_of_input;
    private static int MATCH_terminator;
    private static int MATCH_whitespace;
    private static int MATCH_any;
    private static int ACTION_add_to_key;
    private static int ACTION_add_to_value;
    private static int ACTION_store_property;
    private static int ACTION_escape;
    private static int ACTION_ignore;
    private static int STATE_start;
    private static int STATE_comment;
    private static int STATE_key;
    private static int STATE_key_escape;
    private static int STATE_key_ws;
    private static int STATE_before_separator;
    private static int STATE_after_separator;
    private static int STATE_value;
    private static int STATE_value_escape;
    private static int STATE_value_ws;
    private static int STATE_finish;
    private static String[] stateNames;
    private static Int32[][] states;
    private Hashtable hashtable;
    private static int bufferSize;
    private bool escaped;
    private StringBuilder keyBuilder;
    private StringBuilder valueBuilder;
    private BinaryReader reader;
    private int savedChar;
    private bool saved;
    public JavaPropertyReader(Hashtable hashtable);
    private static JavaPropertyReader();
    public void Parse(Stream stream);
    public void Parse(Stream stream, Encoding encoding);
    private bool matches(int match, int ch);
    private void doAction(int action, int ch);
    private char escapedChar(int ch);
    private int nextChar();
    private int peekChar();
    private int ReadCharSafe();
}
public class Kajabity.Tools.Java.JavaPropertyWriter : object {
    private static Char[] HEX;
    private Hashtable hashtable;
    public JavaPropertyWriter(Hashtable hashtable);
    private static JavaPropertyWriter();
    public void Write(Stream stream, string comments);
    private string escapeKey(string s);
    private string escapeValue(string s);
}
public class Kajabity.Tools.Java.ParseException : Exception {
    public ParseException(string message);
}
internal class ThisAssembly : object {
}
internal class Xamarin.Installer.AndroidSDK.AndroidAddonDependencyInfo : object {
    [CompilerGeneratedAttribute]
private string <ApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameDisplay>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VendorId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VendorDisplay>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Unsure>k__BackingField;
    public string ApiLevel { get; public set; }
    public string NameId { get; public set; }
    public string NameDisplay { get; public set; }
    public string VendorId { get; public set; }
    public string VendorDisplay { get; public set; }
    public bool Unsure { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ApiLevel();
    [CompilerGeneratedAttribute]
public void set_ApiLevel(string value);
    [CompilerGeneratedAttribute]
public string get_NameId();
    [CompilerGeneratedAttribute]
public void set_NameId(string value);
    [CompilerGeneratedAttribute]
public string get_NameDisplay();
    [CompilerGeneratedAttribute]
public void set_NameDisplay(string value);
    [CompilerGeneratedAttribute]
public string get_VendorId();
    [CompilerGeneratedAttribute]
public void set_VendorId(string value);
    [CompilerGeneratedAttribute]
public string get_VendorDisplay();
    [CompilerGeneratedAttribute]
public void set_VendorDisplay(string value);
    [CompilerGeneratedAttribute]
public bool get_Unsure();
    [CompilerGeneratedAttribute]
public void set_Unsure(bool value);
}
public enum Xamarin.Installer.AndroidSDK.AndroidComponentType : Enum {
    public int value__;
    public static AndroidComponentType Addon;
    public static AndroidComponentType Extra;
    public static AndroidComponentType Generic;
    public static AndroidComponentType Maven;
    public static AndroidComponentType Platform;
    public static AndroidComponentType Source;
    public static AndroidComponentType SystemImage;
    public static AndroidComponentType Unknown;
}
[ExtensionAttribute]
internal static class Xamarin.Installer.AndroidSDK.AndroidExtensions : object {
    [ExtensionAttribute]
public static bool GetPkgRevision(JavaProperties props, String& original, AndroidRevision& parsed, string packageName);
    [ExtensionAttribute]
public static Version TryParseAsAndroidVersion(string av, bool returnDefaultZeros);
}
public enum Xamarin.Installer.AndroidSDK.AndroidManifestType : Enum {
    public int value__;
    public static AndroidManifestType GoogleV2;
    public static AndroidManifestType Xamarin;
    public static AndroidManifestType Local;
}
public class Xamarin.Installer.AndroidSDK.AndroidRevision : object {
    [CompilerGeneratedAttribute]
private int <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Micro>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Preview>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConsiderOnlyMajorMinor>k__BackingField;
    public int Major { get; private set; }
    public int Minor { get; private set; }
    public int Micro { get; private set; }
    public int Preview { get; private set; }
    public bool IsValid { get; }
    public bool ConsiderOnlyMajorMinor { get; public set; }
    public AndroidRevision(int major, int minor, int micro, int preview, bool throwIfInvalid);
    public AndroidRevision(string rev, bool throwIfInvalid);
    public AndroidRevision(AndroidRevision other, bool throwIfInvalid);
    [CompilerGeneratedAttribute]
public int get_Major();
    [CompilerGeneratedAttribute]
private void set_Major(int value);
    [CompilerGeneratedAttribute]
public int get_Minor();
    [CompilerGeneratedAttribute]
private void set_Minor(int value);
    [CompilerGeneratedAttribute]
public int get_Micro();
    [CompilerGeneratedAttribute]
private void set_Micro(int value);
    [CompilerGeneratedAttribute]
public int get_Preview();
    [CompilerGeneratedAttribute]
private void set_Preview(int value);
    public bool get_IsValid();
    [CompilerGeneratedAttribute]
public bool get_ConsiderOnlyMajorMinor();
    [CompilerGeneratedAttribute]
public void set_ConsiderOnlyMajorMinor(bool value);
    private void Init(int major, int minor, int micro, int preview, bool throwIfInvalid);
    private int EnsureValidValue(int value);
    public virtual string ToString();
    private void AppendValue(int value, StringBuilder sb);
    public sealed virtual bool Equals(AndroidRevision other);
    public bool EqualsValid(AndroidRevision other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(AndroidRevision other);
    public static bool op_Equality(AndroidRevision rev1, AndroidRevision rev2);
    public static bool op_Inequality(AndroidRevision rev1, AndroidRevision rev2);
    public static bool op_LessThan(AndroidRevision rev1, AndroidRevision rev2);
    public static bool op_LessThanOrEqual(AndroidRevision rev1, AndroidRevision rev2);
    public static bool op_GreaterThan(AndroidRevision rev1, AndroidRevision rev2);
    public static bool op_GreaterThanOrEqual(AndroidRevision rev1, AndroidRevision rev2);
}
public class Xamarin.Installer.AndroidSDK.AndroidSDKComponentInstallationResult : object {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private States <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public bool Success { get; public set; }
    public States State { get; public set; }
    public Exception Exception { get; public set; }
    public AndroidSDKComponentInstallationResult(bool success, Exception exception);
    public AndroidSDKComponentInstallationResult(States state, Exception exception, Nullable`1<bool> success);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(bool value);
    [CompilerGeneratedAttribute]
public States get_State();
    [CompilerGeneratedAttribute]
public void set_State(States value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Xamarin.Installer.AndroidSDK.AndroidSDKComponentInstallationResultExtensions : object {
    [ExtensionAttribute]
public static bool IsSuccessful(States state);
    [ExtensionAttribute]
public static string ToReadableString(AndroidSDKComponentInstallationResult result);
}
public class Xamarin.Installer.AndroidSDK.AndroidSDKContext : object {
    private static object instanceCreationLock;
    public static AndroidSDKContext Instance;
    [CompilerGeneratedAttribute]
private AndroidSDKPlatform <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostArch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseTemporaryDirectory>k__BackingField;
    public AndroidSDKPlatform Platform { get; public set; }
    public string HostArch { get; public set; }
    public string BaseTemporaryDirectory { get; public set; }
    public string UserName { get; }
    public string ProductName { get; public set; }
    private static AndroidSDKContext();
    [CompilerGeneratedAttribute]
public AndroidSDKPlatform get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(AndroidSDKPlatform value);
    [CompilerGeneratedAttribute]
public string get_HostArch();
    [CompilerGeneratedAttribute]
public void set_HostArch(string value);
    [CompilerGeneratedAttribute]
public string get_BaseTemporaryDirectory();
    [CompilerGeneratedAttribute]
public void set_BaseTemporaryDirectory(string value);
    public string get_UserName();
    public string get_ProductName();
    public void set_ProductName(string value);
    private static AndroidSDKPlatform DeterminePlatform();
    private static string DetermineHostArch();
    private static int uname(IntPtr buf);
    private static bool IsRunningOnMac();
}
public class Xamarin.Installer.AndroidSDK.AndroidSDKInstaller : object {
    private List`1<AndroidSdkInstance> discoveredInstances;
    private StringComparer filesystemComparer;
    private StringComparison filesystemComparison;
    private Uri _manifestURL;
    private Uri _googleAddonsListURL;
    private Uri _googleRepositoryBaseURL;
    private bool _useManifestCaching;
    [CompilerGeneratedAttribute]
private Repository <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<InstallationProgressEventArgs> InstallationProgress;
    [CompilerGeneratedAttribute]
private AndroidManifestType <AndroidManifestType>k__BackingField;
    public Repository Repository { get; private set; }
    public Uri RepositoryManifestURL { get; }
    public IList`1<AndroidSdkInstance> DiscoveredSdkInstances { get; }
    public IList`1<Channel> Channels { get; }
    public AndroidManifestType AndroidManifestType { get; }
    public bool IsOffline { get; }
    public AndroidSDKInstaller(IHelpers helpers, AndroidManifestType manifestType, Uri manifestURL, Uri googleAddonsListURL, Uri googleRepositoryBaseURL, bool useManifestCaching);
    [CompilerGeneratedAttribute]
public Repository get_Repository();
    [CompilerGeneratedAttribute]
private void set_Repository(Repository value);
    [CompilerGeneratedAttribute]
public void add_InstallationProgress(EventHandler`1<InstallationProgressEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_InstallationProgress(EventHandler`1<InstallationProgressEventArgs> value);
    public Uri get_RepositoryManifestURL();
    public IList`1<AndroidSdkInstance> get_DiscoveredSdkInstances();
    public IList`1<Channel> get_Channels();
    [CompilerGeneratedAttribute]
public AndroidManifestType get_AndroidManifestType();
    public bool get_IsOffline();
    private void CreateRepository(AndroidManifestType manifestType, Uri manifestURL, Uri googleAddonsListURL, Uri googleRepositoryBaseURL, bool useManifestCaching);
    public AndroidSdkInstance FindInstance(string forPath);
    public void RefreshState(AndroidSdkInstance instance, bool localOnly, bool performFullDetection);
    public bool Discover(List`1<string> sdkLocations, bool fromScratch, EventHandler`1<AndroidComponentStatusChangeEventArgs> instanceComponentStatusChangeHandler);
    public string GetLicense(string licenseId);
    public IList`1<License> GetLicenses(AndroidSdkInstance instance, IList`1<IAndroidComponent> componentsToInstall);
    public IList`1<Archive> GetDownloadItems(IList`1<IAndroidComponent> components);
    public IList`1<Archive> GetDownloadItems(AndroidSdkInstance instance, bool includeMissing);
    private void OnInstallationProgress(bool isInitialEvent, float progress, string format, Object[] args);
    public IList`1<IAndroidComponent> GetInstallationSet(AndroidSdkInstance instance, IList`1<IAndroidComponent> componentsToInstall, HashSet`1<Channel> allowedChannels);
    public void Install(AndroidSdkInstance instance, IList`1<IAndroidComponent> componentsToInstall, bool throwIfInvalidComponentsFound, IProgressMonitor monitor);
    public void Remove(AndroidSdkInstance instance, IList`1<IAndroidComponent> componentsToRemove);
    private void AddComponentToSet(AndroidSdkInstance instance, IAndroidComponent component, List`1<IAndroidComponent> componentSet, HashSet`1<Channel> allowedChannels);
    private string GetPluralForm(int count, string singular, string plural);
    private string GetMinimumRevisionString(Dependency dep);
    private void InstallComponent(IAndroidComponent c, AndroidSdkInstance instance, IProgressMonitor monitor);
    private void DetectSdkComponents(AndroidSdkInstance sdkInstance);
    private sealed virtual override void Xamarin.Installer.AndroidSDK.GoogleV2.IParserErrorHandler.OnRecoverableError(ParserErrorLevel recommendedLevel, Uri documentUrl, XElement element, string message);
    private sealed virtual override void Xamarin.Installer.AndroidSDK.GoogleV2.IParserErrorHandler.OnFatalError(Uri documentUrl, XElement element, string message);
    private static void LogParserError(string whereItHappened, Exception e);
    [CompilerGeneratedAttribute]
internal static Archive <GetDownloadItems>g__ResetForDownload|32_0(Archive archive);
}
public class Xamarin.Installer.AndroidSDK.AndroidSdkInstance : object {
    private Nullable`1<ulong> downloadSize;
    private IList`1<IAndroidComponent> components;
    [CompilerGeneratedAttribute]
private EventHandler`1<AndroidComponentStatusChangeEventArgs> ComponentStatusChanged;
    [CompilerGeneratedAttribute]
private IList`1<IAndroidComponent> <ComponentsForInstallation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOfficial>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUserLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Selected>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionString>k__BackingField;
    [CompilerGeneratedAttribute]
private AndroidRevision <Version>k__BackingField;
    public IList`1<IAndroidComponent> Components { get; internal set; }
    public IList`1<IAndroidComponent> ComponentsForInstallation { get; public set; }
    public bool IsDefault { get; internal set; }
    public bool IsOfficial { get; internal set; }
    public bool IsUserLocation { get; public set; }
    public string Path { get; internal set; }
    public bool Selected { get; public set; }
    public string VersionString { get; internal set; }
    public AndroidRevision Version { get; internal set; }
    public bool NeedsUpdate { get; }
    [CompilerGeneratedAttribute]
public void add_ComponentStatusChanged(EventHandler`1<AndroidComponentStatusChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ComponentStatusChanged(EventHandler`1<AndroidComponentStatusChangeEventArgs> value);
    public IList`1<IAndroidComponent> get_Components();
    internal void set_Components(IList`1<IAndroidComponent> value);
    [CompilerGeneratedAttribute]
public IList`1<IAndroidComponent> get_ComponentsForInstallation();
    [CompilerGeneratedAttribute]
public void set_ComponentsForInstallation(IList`1<IAndroidComponent> value);
    [CompilerGeneratedAttribute]
public bool get_IsDefault();
    [CompilerGeneratedAttribute]
internal void set_IsDefault(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsOfficial();
    [CompilerGeneratedAttribute]
internal void set_IsOfficial(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsUserLocation();
    [CompilerGeneratedAttribute]
public void set_IsUserLocation(bool value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
internal void set_Path(string value);
    [CompilerGeneratedAttribute]
public bool get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(bool value);
    [CompilerGeneratedAttribute]
public string get_VersionString();
    [CompilerGeneratedAttribute]
internal void set_VersionString(string value);
    [CompilerGeneratedAttribute]
public AndroidRevision get_Version();
    [CompilerGeneratedAttribute]
internal void set_Version(AndroidRevision value);
    public bool get_NeedsUpdate();
    public ulong GetDownloadSize(IList`1<IAndroidComponent> componentsToInstall, bool refresh);
    private void HookComponentEvents(IList`1<IAndroidComponent> components);
    private void OnStatusChanged(object sender, AndroidComponentStatusChangeEventArgs args);
}
public enum Xamarin.Installer.AndroidSDK.AndroidSDKPlatform : Enum {
    public int value__;
    public static AndroidSDKPlatform Linux;
    public static AndroidSDKPlatform Mac;
    public static AndroidSDKPlatform Windows;
    public static AndroidSDKPlatform Any;
    public static AndroidSDKPlatform Unknown;
}
public enum Xamarin.Installer.AndroidSDK.AndroidSystemImageAbi : Enum {
    public int value__;
    public static AndroidSystemImageAbi X86;
    public static AndroidSystemImageAbi X86_64;
    public static AndroidSystemImageAbi Mips;
    public static AndroidSystemImageAbi ARMV7a;
    public static AndroidSystemImageAbi ARM64V8a;
    public static AndroidSystemImageAbi Any;
}
public static class Xamarin.Installer.AndroidSDK.AndroidUtilities : object {
    private static string PLACEHOLDER_DELIMITER;
    private static Regex ndkNameRegex;
    private static AndroidUtilities();
    public static string ParseDirectoryWithSpecialFolderPlaceholders(string dirPattern);
    public static JavaProperties ReadAndroidProperties(string sourcePropertiesPath);
    public static bool InstallArchive(string name, string archivePath, string targetBasePath, String[] targetPaths);
    public static bool InstallArchive(string name, string archivePath, bool mainArchive, string targetBasePath, String[] targetPaths);
    public static bool InstallArchive(String& destinationDirectory, string name, string archivePath, bool mainArchive, bool includeZipRootInCopy, string targetBasePath, String[] targetPaths);
    internal static string CombinePaths(string targetBasePath, String[] targetPaths);
    internal static bool ParsePlatformVersion(string source, Version& version, String& versionTag);
    public static string GetPlatformOS();
    public static string PlatformToString(AndroidSDKPlatform platform);
    internal static AndroidSDKPlatform GetPlatformFromOS(string osName);
    internal static bool CheckWheterFilesExist(string root, string ownerName, List`1<string> paths, Double& percentFound);
    internal static AndroidSystemImageAbi StringToAbi(string abi);
    public static void ParseNDKVersionFromGoogleManifest(XmlElement element, XmlNamespaceManager nsmgr, Uri baseURL, String& release, String& releaseTag);
}
public abstract class Xamarin.Installer.AndroidSDK.Common.AndroidComponentInfo : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Type { get; }
    public string DetailedDescription { get; }
    protected AndroidComponentInfo(string type);
    [CompilerGeneratedAttribute]
public string get_Type();
    public string get_DetailedDescription();
    protected abstract virtual string GetDetailedDescription();
    internal void WritePackageXmlInfo(XmlWriter writer, Repository repository);
    protected void WritePackageXmlVendor(XmlWriter writer, PackageVendor vendor);
    protected void WritePackageXmlTag(XmlWriter writer, PackageTag tag);
    internal virtual void WritePackageXmlInfoDetails(XmlWriter writer, Repository repository);
    public sealed virtual bool Equals(AndroidComponentInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected bool AreEqual(string one, string two);
}
public class Xamarin.Installer.AndroidSDK.Common.AndroidComponentInfoAddon : AndroidComponentInfo {
    private string detailedDescription;
    [CompilerGeneratedAttribute]
private string <ApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageTag <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageVendor <Vendor>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PackageLibrary> <Libraries>k__BackingField;
    public string ApiLevel { get; }
    public string CodeName { get; }
    public PackageTag Tag { get; }
    public PackageVendor Vendor { get; }
    public IList`1<PackageLibrary> Libraries { get; }
    internal AndroidComponentInfoAddon(string type, string apiLevel, string codeName, PackageTag tag, PackageVendor vendor, IList`1<PackageLibrary> libraries);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ApiLevel();
    [CompilerGeneratedAttribute]
public string get_CodeName();
    [CompilerGeneratedAttribute]
public PackageTag get_Tag();
    [CompilerGeneratedAttribute]
public PackageVendor get_Vendor();
    [CompilerGeneratedAttribute]
public IList`1<PackageLibrary> get_Libraries();
    internal virtual void WritePackageXmlInfoDetails(XmlWriter writer, Repository repository);
    protected virtual string GetDetailedDescription();
    public sealed virtual bool Equals(AndroidComponentInfoAddon other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Xamarin.Installer.AndroidSDK.Common.AndroidComponentInfoExtra : AndroidComponentInfo {
    private string detailedDescription;
    [CompilerGeneratedAttribute]
private PackageVendor <Vendor>k__BackingField;
    public PackageVendor Vendor { get; }
    internal AndroidComponentInfoExtra(string type, PackageVendor vendor);
    [CompilerGeneratedAttribute]
public PackageVendor get_Vendor();
    internal virtual void WritePackageXmlInfoDetails(XmlWriter writer, Repository repository);
    protected virtual string GetDetailedDescription();
    public sealed virtual bool Equals(AndroidComponentInfoExtra other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Xamarin.Installer.AndroidSDK.Common.AndroidComponentInfoGeneric : AndroidComponentInfo {
    public AndroidComponentInfoGeneric(string type);
    protected virtual string GetDetailedDescription();
    public sealed virtual bool Equals(AndroidComponentInfoGeneric other);
    public virtual bool Equals(object obj);
}
public class Xamarin.Installer.AndroidSDK.Common.AndroidComponentInfoMaven : AndroidComponentInfo {
    private string detailedDescription;
    [CompilerGeneratedAttribute]
private PackageVendor <Vendor>k__BackingField;
    public PackageVendor Vendor { get; }
    internal AndroidComponentInfoMaven(string type, PackageVendor vendor);
    [CompilerGeneratedAttribute]
public PackageVendor get_Vendor();
    internal virtual void WritePackageXmlInfoDetails(XmlWriter writer, Repository repository);
    protected virtual string GetDetailedDescription();
    public sealed virtual bool Equals(AndroidComponentInfoMaven other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Xamarin.Installer.AndroidSDK.Common.AndroidComponentInfoPlatform : AndroidComponentInfo {
    private string detailedDescription;
    [CompilerGeneratedAttribute]
private string <ApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LayoutLibApi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Preview>k__BackingField;
    public string ApiLevel { get; }
    public string CodeName { get; }
    public string LayoutLibApi { get; }
    public string Description { get; internal set; }
    public bool Preview { get; internal set; }
    internal AndroidComponentInfoPlatform(string type, string apiLevel, string codeName, string layoutLibApi);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ApiLevel();
    [CompilerGeneratedAttribute]
public string get_CodeName();
    [CompilerGeneratedAttribute]
public string get_LayoutLibApi();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
internal void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_Preview();
    [CompilerGeneratedAttribute]
internal void set_Preview(bool value);
    internal virtual void WritePackageXmlInfoDetails(XmlWriter writer, Repository repository);
    protected virtual string GetDetailedDescription();
    public sealed virtual bool Equals(AndroidComponentInfoPlatform other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Xamarin.Installer.AndroidSDK.Common.AndroidComponentInfoSource : AndroidComponentInfo {
    private string detailedDescription;
    [CompilerGeneratedAttribute]
private string <ApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeName>k__BackingField;
    public string ApiLevel { get; }
    public string CodeName { get; }
    internal AndroidComponentInfoSource(string type, string apiLevel, string codeName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ApiLevel();
    [CompilerGeneratedAttribute]
public string get_CodeName();
    internal virtual void WritePackageXmlInfoDetails(XmlWriter writer, Repository repository);
    protected virtual string GetDetailedDescription();
    public sealed virtual bool Equals(AndroidComponentInfoSource other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Xamarin.Installer.AndroidSDK.Common.AndroidComponentInfoSystemImage : AndroidComponentInfo {
    public static AndroidSystemImageAbi DefaultAbi;
    private string detailedDescription;
    [CompilerGeneratedAttribute]
private AndroidSystemImageAbi <Abi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AbiName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageTag <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageVendor <Vendor>k__BackingField;
    public AndroidSystemImageAbi Abi { get; }
    public string AbiName { get; }
    public string ApiLevel { get; }
    public string CodeName { get; }
    public PackageTag Tag { get; }
    public PackageVendor Vendor { get; }
    internal AndroidComponentInfoSystemImage(string type, AndroidSystemImageAbi abi, string abiName, string apiLevel, string codeName, PackageTag tag, PackageVendor vendor);
    [CompilerGeneratedAttribute]
public AndroidSystemImageAbi get_Abi();
    [CompilerGeneratedAttribute]
public string get_AbiName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ApiLevel();
    [CompilerGeneratedAttribute]
public string get_CodeName();
    [CompilerGeneratedAttribute]
public PackageTag get_Tag();
    [CompilerGeneratedAttribute]
public PackageVendor get_Vendor();
    internal virtual void WritePackageXmlInfoDetails(XmlWriter writer, Repository repository);
    public string GetAbiManifestString();
    protected virtual string GetDetailedDescription();
    public sealed virtual bool Equals(AndroidComponentInfoSystemImage other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum Xamarin.Installer.AndroidSDK.Common.AndroidComponentStatus : Enum {
    public int value__;
    public static AndroidComponentStatus DetectionStarted;
    public static AndroidComponentStatus DetectionEnded;
    public static AndroidComponentStatus InstallationStarted;
    public static AndroidComponentStatus InstallationEnded;
    public static AndroidComponentStatus UnpackingStarted;
    public static AndroidComponentStatus UnpackingEnded;
    public static AndroidComponentStatus RemovalStarted;
    public static AndroidComponentStatus RemovalEnded;
    public static AndroidComponentStatus VerificationStarted;
    public static AndroidComponentStatus VerificationEnded;
    public static AndroidComponentStatus MetadataUpdated;
}
public class Xamarin.Installer.AndroidSDK.Common.AndroidComponentStatusChangeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private AndroidComponentStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private IAndroidComponent <Component>k__BackingField;
    public AndroidComponentStatus Status { get; }
    public IAndroidComponent Component { get; }
    internal AndroidComponentStatusChangeEventArgs(AndroidComponentStatus status, IAndroidComponent component);
    [CompilerGeneratedAttribute]
public AndroidComponentStatus get_Status();
    [CompilerGeneratedAttribute]
public IAndroidComponent get_Component();
}
public static class Xamarin.Installer.AndroidSDK.Common.AndroidLicensesLocalStorage : object {
    public static bool IsLicenseAccepted(string androidSdkPath, License license);
    public static Task AcceptLicensesAsync(string androidSdkPath, IEnumerable`1<License> licenses, CancellationToken token);
    private static string GetLocalStorageLicensesPath(string androidSdkPath);
    private static string GetLicensesLocalStorageIdFor(string androidSdkPath);
    private static string GetLicenseTextHash(License license);
}
public class Xamarin.Installer.AndroidSDK.Common.Archive : ArchiveBase {
    [CompilerGeneratedAttribute]
private IList`1<ArchivePatch> <Patches>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownloadedFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private IAndroidComponent <Owner>k__BackingField;
    public IList`1<ArchivePatch> Patches { get; public set; }
    public bool WasDownloaded { get; }
    public string DownloadedFilePath { get; public set; }
    public IAndroidComponent Owner { get; internal set; }
    public Archive(string hostOS);
    [CompilerGeneratedAttribute]
public IList`1<ArchivePatch> get_Patches();
    [CompilerGeneratedAttribute]
public void set_Patches(IList`1<ArchivePatch> value);
    public bool get_WasDownloaded();
    [CompilerGeneratedAttribute]
public string get_DownloadedFilePath();
    [CompilerGeneratedAttribute]
public void set_DownloadedFilePath(string value);
    [CompilerGeneratedAttribute]
public IAndroidComponent get_Owner();
    [CompilerGeneratedAttribute]
internal void set_Owner(IAndroidComponent value);
    public bool IsDownloadValid(bool verifyChecksum);
    public bool IsInstallable(bool verifyChecksum, bool checkPlatform);
    public virtual bool IsValidForSystem();
    private string GetDownloadPath(bool logMissing);
    private static bool CheckSHA1(string filePath, string sha1hash);
    public sealed virtual bool Equals(Archive other);
    private bool ComparePatches(IList`1<ArchivePatch> otherPatches);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class Xamarin.Installer.AndroidSDK.Common.ArchiveBase : object {
    [CompilerGeneratedAttribute]
private ulong <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Checksum>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostOS>k__BackingField;
    [CompilerGeneratedAttribute]
private AndroidSDKPlatform <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <HostBits>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostArch>k__BackingField;
    public ulong Size { get; public set; }
    public string Checksum { get; public set; }
    public Uri Url { get; public set; }
    public string HostOS { get; }
    public AndroidSDKPlatform Platform { get; }
    public UInt32 HostBits { get; public set; }
    public string HostArch { get; public set; }
    public ArchiveBase(string hostOS);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(ulong value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Checksum();
    [CompilerGeneratedAttribute]
public void set_Checksum(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_HostOS();
    [CompilerGeneratedAttribute]
public sealed virtual AndroidSDKPlatform get_Platform();
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_HostBits();
    [CompilerGeneratedAttribute]
public void set_HostBits(UInt32 value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_HostArch();
    [CompilerGeneratedAttribute]
public void set_HostArch(string value);
    public abstract virtual bool IsValidForSystem();
    public virtual bool IsPlatformValid();
    public virtual bool IsHostArchValid();
    public bool Equals(IArchive other);
    public virtual int GetHashCode();
}
public class Xamarin.Installer.AndroidSDK.Common.ArchivePatch : object {
    [CompilerGeneratedAttribute]
private AndroidRevision <BasedOn>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Checksum>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Url>k__BackingField;
    public AndroidRevision BasedOn { get; internal set; }
    public ulong Size { get; internal set; }
    public string Checksum { get; internal set; }
    public Uri Url { get; internal set; }
    [CompilerGeneratedAttribute]
public AndroidRevision get_BasedOn();
    [CompilerGeneratedAttribute]
internal void set_BasedOn(AndroidRevision value);
    [CompilerGeneratedAttribute]
public ulong get_Size();
    [CompilerGeneratedAttribute]
internal void set_Size(ulong value);
    [CompilerGeneratedAttribute]
public string get_Checksum();
    [CompilerGeneratedAttribute]
internal void set_Checksum(string value);
    [CompilerGeneratedAttribute]
public Uri get_Url();
    [CompilerGeneratedAttribute]
internal void set_Url(Uri value);
    public sealed virtual bool Equals(ArchivePatch other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class Xamarin.Installer.AndroidSDK.Common.BasePackage : object {
    [CompilerGeneratedAttribute]
private Repository <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Archive> <OriginalArchives>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<AndroidComponentStatusChangeEventArgs> StatusChanged;
    [CompilerGeneratedAttribute]
private Guid <UniqueID>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEssential>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Present>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedsUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileSystemPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Obsolete>k__BackingField;
    [CompilerGeneratedAttribute]
private AndroidComponentInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private AndroidRevision <Revision>k__BackingField;
    [CompilerGeneratedAttribute]
private AndroidRevision <InstalledRevision>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Dependency> <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Archive> <Archives>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseID>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ManifestURL>k__BackingField;
    [CompilerGeneratedAttribute]
private IXmlLineInfo <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceInstallation>k__BackingField;
    protected Repository Repository { get; }
    protected IList`1<Archive> OriginalArchives { get; }
    public AndroidComponentType ComponentType { get; }
    public Guid UniqueID { get; }
    public bool IsEssential { get; public set; }
    public bool IgnoreFailure { get; public set; }
    public bool Present { get; public set; }
    public bool NeedsUpdate { get; public set; }
    public string Path { get; public set; }
    public string FileSystemPath { get; public set; }
    public bool Obsolete { get; public set; }
    public bool Preview { get; }
    public AndroidComponentInfo Info { get; public set; }
    public AndroidRevision Revision { get; public set; }
    public AndroidRevision InstalledRevision { get; public set; }
    public string DisplayName { get; public set; }
    public string DetailedDescription { get; }
    public IList`1<Dependency> Dependencies { get; public set; }
    public Channel Channel { get; }
    public IList`1<Archive> Archives { get; protected set; }
    public License License { get; }
    public string LicenseID { get; public set; }
    public Uri ManifestURL { get; }
    public IXmlLineInfo Location { get; }
    public bool ForceInstallation { get; public set; }
    public IEnumerable`1<AndroidSDKPlatform> SupportedPlatforms { get; }
    public bool IsPlatformSpecific { get; }
    public BasePackage(Repository repository, Uri manifestURL, IXmlLineInfo location, IList`1<Archive> archives);
    [CompilerGeneratedAttribute]
protected Repository get_Repository();
    [CompilerGeneratedAttribute]
protected IList`1<Archive> get_OriginalArchives();
    [CompilerGeneratedAttribute]
public sealed virtual void add_StatusChanged(EventHandler`1<AndroidComponentStatusChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StatusChanged(EventHandler`1<AndroidComponentStatusChangeEventArgs> value);
    public abstract virtual AndroidComponentType get_ComponentType();
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_UniqueID();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEssential();
    [CompilerGeneratedAttribute]
public void set_IsEssential(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IgnoreFailure();
    [CompilerGeneratedAttribute]
public void set_IgnoreFailure(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Present();
    [CompilerGeneratedAttribute]
public void set_Present(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NeedsUpdate();
    [CompilerGeneratedAttribute]
public void set_NeedsUpdate(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FileSystemPath();
    [CompilerGeneratedAttribute]
public void set_FileSystemPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Obsolete();
    [CompilerGeneratedAttribute]
public void set_Obsolete(bool value);
    public bool get_Preview();
    [CompilerGeneratedAttribute]
public sealed virtual AndroidComponentInfo get_Info();
    [CompilerGeneratedAttribute]
public void set_Info(AndroidComponentInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual AndroidRevision get_Revision();
    [CompilerGeneratedAttribute]
public void set_Revision(AndroidRevision value);
    [CompilerGeneratedAttribute]
public sealed virtual AndroidRevision get_InstalledRevision();
    [CompilerGeneratedAttribute]
public void set_InstalledRevision(AndroidRevision value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    public sealed virtual string get_DetailedDescription();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<Dependency> get_Dependencies();
    [CompilerGeneratedAttribute]
public void set_Dependencies(IList`1<Dependency> value);
    public abstract virtual Channel get_Channel();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<Archive> get_Archives();
    [CompilerGeneratedAttribute]
protected void set_Archives(IList`1<Archive> value);
    public sealed virtual License get_License();
    [CompilerGeneratedAttribute]
public sealed virtual string get_LicenseID();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LicenseID(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_ManifestURL();
    [CompilerGeneratedAttribute]
public IXmlLineInfo get_Location();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ForceInstallation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ForceInstallation(bool value);
    [IteratorStateMachineAttribute("Xamarin.Installer.AndroidSDK.Common.BasePackage/<get_SupportedPlatforms>d__90")]
public IEnumerable`1<AndroidSDKPlatform> get_SupportedPlatforms();
    public bool get_IsPlatformSpecific();
    public void ExcludePlatform(AndroidSDKPlatform platform);
    protected void PopulatePlatformArchives(bool includeAllArchives);
    protected virtual string GetDetailedDescription();
    protected void OnStatusChange(AndroidComponentStatus status);
    public sealed virtual void Remove(string androidSDKRoot);
    private void DoRemove(string androidSDKRoot, int retries, int delayInSeconds);
    private void DoRemove(string androidSDKRoot);
    public abstract virtual void RefreshMetadata(IAndroidComponent component, bool ignoreInstalledState);
    protected abstract virtual PackageMetadata CreateMetadata(BasePackage component);
    public sealed virtual void PerformDetection(string androidSDKRoot, bool isRefresh);
    private bool Detect(string androidSDKRoot, string description);
    protected AndroidRevision GetPackageRevision(string manifestFile);
    protected string GetAbi(string manifestFile);
    protected int ParseAsInt(XElement e);
    protected string GetRealDirectoryName(string path);
    protected void DeleteDirTreeIfEmpty(DirectoryInfo stopAt, DirectoryInfo di);
    protected virtual bool MetadataChanged(PackageMetadata metadata, bool update, bool ignoreInstalledState);
    public void Install(string archivePath, string androidSDKRoot, InstallationProgressActionDelegate progressCallback);
    private void DoInstall(string archivePath, string androidSDKRoot, InstallationProgressActionDelegate progressCallback);
    private bool InstallArchive(string description, string archivePath, string targetDirectory, InstallationProgressActionDelegate progressCallback);
    protected void GeneratePackageXml(string path);
    private void WriteRevisionPart(XmlWriter writer, string name, int value);
    public virtual bool MatchesTo(IAndroidComponent other);
    public virtual bool BasicMetadataEquals(BasePackage other);
    private bool AreInfosEqual(AndroidComponentInfo info1, AndroidComponentInfo info2);
    public virtual bool Equals(BasePackage other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected abstract virtual void LogError(string message);
    protected abstract virtual void LogWarning(string message);
    protected abstract virtual void LogInfo(string message);
    protected abstract virtual void LogDebug(string message);
    private bool GetPreview();
    [CompilerGeneratedAttribute]
internal static bool <PopulatePlatformArchives>g__IsBitsValid|94_0(UInt32 bits);
}
public class Xamarin.Installer.AndroidSDK.Common.Channel : ItemWithID {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public Channel(string id, string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    public sealed virtual bool Equals(Channel other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public static class Xamarin.Installer.AndroidSDK.Common.Constants : object {
}
public class Xamarin.Installer.AndroidSDK.Common.Dependency : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private AndroidRevision <MinRevision>k__BackingField;
    [CompilerGeneratedAttribute]
private AndroidSDKPlatform <Platform>k__BackingField;
    public string Path { get; }
    public AndroidRevision MinRevision { get; }
    public AndroidSDKPlatform Platform { get; public set; }
    public bool IsPlatformSpecific { get; }
    internal Dependency(string path, AndroidRevision minRevision);
    internal Dependency(Dependency other);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public AndroidRevision get_MinRevision();
    [CompilerGeneratedAttribute]
public AndroidSDKPlatform get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(AndroidSDKPlatform value);
    public bool get_IsPlatformSpecific();
    public sealed virtual bool Equals(Dependency other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface Xamarin.Installer.AndroidSDK.Common.IAndroidApiLevel {
    public string ApiLevel { get; }
    public abstract virtual string get_ApiLevel();
}
internal interface Xamarin.Installer.AndroidSDK.Common.IAndroidArchive {
    public string OS { get; }
    public UInt32 OSBits { get; }
    public string Arch { get; }
    public UInt32 Size { get; }
    public string Checksum { get; }
    public string ChecksumType { get; }
    public Uri Url { get; }
    public abstract virtual string get_OS();
    public abstract virtual UInt32 get_OSBits();
    public abstract virtual string get_Arch();
    public abstract virtual UInt32 get_Size();
    public abstract virtual string get_Checksum();
    public abstract virtual string get_ChecksumType();
    public abstract virtual Uri get_Url();
}
public interface Xamarin.Installer.AndroidSDK.Common.IAndroidComponent {
    public bool IsEssential { get; }
    public bool IgnoreFailure { get; }
    public bool Present { get; }
    public bool NeedsUpdate { get; }
    public AndroidComponentType ComponentType { get; }
    public Guid UniqueID { get; }
    public string Path { get; }
    public string FileSystemPath { get; }
    public bool Obsolete { get; }
    public AndroidComponentInfo Info { get; }
    public AndroidRevision Revision { get; }
    public AndroidRevision InstalledRevision { get; }
    public string DisplayName { get; }
    public string DetailedDescription { get; }
    public IList`1<Dependency> Dependencies { get; }
    public Channel Channel { get; }
    public IList`1<Archive> Archives { get; }
    public License License { get; }
    public Uri ManifestURL { get; }
    public bool ForceInstallation { get; public set; }
    public string LicenseID { get; public set; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_StatusChanged(EventHandler`1<AndroidComponentStatusChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StatusChanged(EventHandler`1<AndroidComponentStatusChangeEventArgs> value);
    public abstract virtual bool get_IsEssential();
    public abstract virtual bool get_IgnoreFailure();
    public abstract virtual bool get_Present();
    public abstract virtual bool get_NeedsUpdate();
    public abstract virtual AndroidComponentType get_ComponentType();
    public abstract virtual Guid get_UniqueID();
    public abstract virtual string get_Path();
    public abstract virtual string get_FileSystemPath();
    public abstract virtual bool get_Obsolete();
    public abstract virtual AndroidComponentInfo get_Info();
    public abstract virtual AndroidRevision get_Revision();
    public abstract virtual AndroidRevision get_InstalledRevision();
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_DetailedDescription();
    public abstract virtual IList`1<Dependency> get_Dependencies();
    public abstract virtual Channel get_Channel();
    public abstract virtual IList`1<Archive> get_Archives();
    public abstract virtual License get_License();
    public abstract virtual Uri get_ManifestURL();
    public abstract virtual bool get_ForceInstallation();
    public abstract virtual void set_ForceInstallation(bool value);
    public abstract virtual string get_LicenseID();
    public abstract virtual void set_LicenseID(string value);
    public abstract virtual bool MatchesTo(IAndroidComponent other);
}
internal interface Xamarin.Installer.AndroidSDK.Common.IAndroidComponentDescriptor {
    public Uri BaseURL { get; }
    public AndroidRevision Revision { get; }
    public string PreviewRevision { get; }
    public string Description { get; }
    public Uri DescriptionUrl { get; }
    public string UsesLicense { get; }
    public bool IsObsolete { get; }
    public bool IsPreview { get; }
    public IList`1<AndroidAddonDependencyInfo> AddonsInfo { get; }
    public string Name { get; }
    public bool IsEssential { get; }
    public abstract virtual Uri get_BaseURL();
    public abstract virtual AndroidRevision get_Revision();
    public abstract virtual string get_PreviewRevision();
    public abstract virtual string get_Description();
    public abstract virtual Uri get_DescriptionUrl();
    public abstract virtual string get_UsesLicense();
    public abstract virtual bool get_IsObsolete();
    public abstract virtual bool get_IsPreview();
    public abstract virtual IList`1<AndroidAddonDependencyInfo> get_AddonsInfo();
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsEssential();
    public abstract virtual IAndroidComponent CreateComponent(AndroidSDKInstaller installer);
    public abstract virtual IAndroidArchive GetArchive(string os, string arch, UInt32 osbits, bool quiet);
}
internal interface Xamarin.Installer.AndroidSDK.Common.IAndroidComponentInternal {
    public abstract virtual void Remove(string androidSDKRoot);
    public abstract virtual void PerformDetection(string androidSDKRoot, bool isRefresh);
    public abstract virtual void RefreshMetadata(IAndroidComponent component, bool ignoreInstalledState);
}
public interface Xamarin.Installer.AndroidSDK.Common.IArchive {
    public ulong Size { get; }
    public string Checksum { get; }
    public Uri Url { get; }
    public string HostOS { get; }
    public AndroidSDKPlatform Platform { get; }
    public UInt32 HostBits { get; }
    public string HostArch { get; }
    public abstract virtual ulong get_Size();
    public abstract virtual string get_Checksum();
    public abstract virtual Uri get_Url();
    public abstract virtual string get_HostOS();
    public abstract virtual AndroidSDKPlatform get_Platform();
    public abstract virtual UInt32 get_HostBits();
    public abstract virtual string get_HostArch();
}
public interface Xamarin.Installer.AndroidSDK.Common.IJdkComponent {
    public Guid UniqueID { get; }
    public string DisplayName { get; }
    public bool Obsolete { get; }
    public bool Preview { get; }
    public string LicenseID { get; }
    public PackageVendor Vendor { get; }
    public AndroidRevision Revision { get; }
    public IList`1<JdkArchive> Archives { get; }
    public abstract virtual Guid get_UniqueID();
    public abstract virtual string get_DisplayName();
    public abstract virtual bool get_Obsolete();
    public abstract virtual bool get_Preview();
    public abstract virtual string get_LicenseID();
    public abstract virtual PackageVendor get_Vendor();
    public abstract virtual AndroidRevision get_Revision();
    public abstract virtual IList`1<JdkArchive> get_Archives();
    public abstract virtual IEnumerable`1<JdkArchive> GetValidArchivesForSystem();
}
public abstract class Xamarin.Installer.AndroidSDK.Common.ItemWithID : object {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    public string ID { get; }
    protected ItemWithID(string id);
    [CompilerGeneratedAttribute]
public string get_ID();
    public sealed virtual bool Equals(ItemWithID other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class Xamarin.Installer.AndroidSDK.Common.ItemWithIDAndDisplay : ItemWithID {
    [CompilerGeneratedAttribute]
private string <Display>k__BackingField;
    public string Display { get; }
    protected ItemWithIDAndDisplay(string id, string display);
    [CompilerGeneratedAttribute]
public string get_Display();
}
public class Xamarin.Installer.AndroidSDK.Common.JdkArchive : ArchiveBase {
    [CompilerGeneratedAttribute]
private string <PayloadFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChecksumType>k__BackingField;
    public string PayloadFileName { get; public set; }
    public string ChecksumType { get; public set; }
    public JdkArchive(string hostOS);
    [CompilerGeneratedAttribute]
public string get_PayloadFileName();
    [CompilerGeneratedAttribute]
public void set_PayloadFileName(string value);
    [CompilerGeneratedAttribute]
public string get_ChecksumType();
    [CompilerGeneratedAttribute]
public void set_ChecksumType(string value);
    public virtual bool IsValidForSystem();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(JdkArchive other);
    public virtual int GetHashCode();
}
public class Xamarin.Installer.AndroidSDK.Common.JdkPackage : object {
    [CompilerGeneratedAttribute]
private Guid <UniqueID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Obsolete>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Preview>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseID>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageVendor <Vendor>k__BackingField;
    [CompilerGeneratedAttribute]
private AndroidRevision <Revision>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JdkArchive> <Archives>k__BackingField;
    public Guid UniqueID { get; }
    public string DisplayName { get; }
    public bool Obsolete { get; }
    public bool Preview { get; }
    public string LicenseID { get; }
    public PackageVendor Vendor { get; }
    public AndroidRevision Revision { get; }
    public IList`1<JdkArchive> Archives { get; }
    public JdkPackage(string displayName, bool obsolete, bool preview, string licenseId, PackageVendor vendor, AndroidRevision revision, List`1<JdkArchive> archives);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_UniqueID();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Obsolete();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Preview();
    [CompilerGeneratedAttribute]
public sealed virtual string get_LicenseID();
    [CompilerGeneratedAttribute]
public sealed virtual PackageVendor get_Vendor();
    [CompilerGeneratedAttribute]
public sealed virtual AndroidRevision get_Revision();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<JdkArchive> get_Archives();
    public sealed virtual IEnumerable`1<JdkArchive> GetValidArchivesForSystem();
}
public class Xamarin.Installer.AndroidSDK.Common.License : ItemWithID {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Type { get; }
    public string Text { get; }
    internal License(string id, string type, string text);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public string get_Text();
    public sealed virtual bool Equals(License other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Xamarin.Installer.AndroidSDK.Common.PackageLibrary : object {
    [CompilerGeneratedAttribute]
private string <LocalJarPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string LocalJarPath { get; internal set; }
    public string Name { get; internal set; }
    public string Description { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_LocalJarPath();
    [CompilerGeneratedAttribute]
internal void set_LocalJarPath(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
internal void set_Description(string value);
    public sealed virtual bool Equals(PackageLibrary other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Xamarin.Installer.AndroidSDK.Common.PackageMetadata : object {
    [CompilerGeneratedAttribute]
private bool <Present>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedsUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileSystemPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Obsolete>k__BackingField;
    [CompilerGeneratedAttribute]
private AndroidComponentInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private AndroidRevision <Revision>k__BackingField;
    [CompilerGeneratedAttribute]
private AndroidRevision <InstalledRevision>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Dependency> <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Archive> <Archives>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseID>k__BackingField;
    public bool Present { get; public set; }
    public bool NeedsUpdate { get; public set; }
    public string Path { get; public set; }
    public string FileSystemPath { get; public set; }
    public bool Obsolete { get; public set; }
    public bool Preview { get; }
    public AndroidComponentInfo Info { get; public set; }
    public AndroidRevision Revision { get; public set; }
    public AndroidRevision InstalledRevision { get; public set; }
    public string DisplayName { get; public set; }
    public IList`1<Dependency> Dependencies { get; public set; }
    public IList`1<Archive> Archives { get; public set; }
    public string LicenseID { get; public set; }
    public PackageMetadata(IAndroidComponent component);
    [CompilerGeneratedAttribute]
public bool get_Present();
    [CompilerGeneratedAttribute]
public void set_Present(bool value);
    [CompilerGeneratedAttribute]
public bool get_NeedsUpdate();
    [CompilerGeneratedAttribute]
public void set_NeedsUpdate(bool value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_FileSystemPath();
    [CompilerGeneratedAttribute]
public void set_FileSystemPath(string value);
    [CompilerGeneratedAttribute]
public bool get_Obsolete();
    [CompilerGeneratedAttribute]
public void set_Obsolete(bool value);
    public bool get_Preview();
    [CompilerGeneratedAttribute]
public AndroidComponentInfo get_Info();
    [CompilerGeneratedAttribute]
public void set_Info(AndroidComponentInfo value);
    [CompilerGeneratedAttribute]
public AndroidRevision get_Revision();
    [CompilerGeneratedAttribute]
public void set_Revision(AndroidRevision value);
    [CompilerGeneratedAttribute]
public AndroidRevision get_InstalledRevision();
    [CompilerGeneratedAttribute]
public void set_InstalledRevision(AndroidRevision value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public IList`1<Dependency> get_Dependencies();
    [CompilerGeneratedAttribute]
public void set_Dependencies(IList`1<Dependency> value);
    [CompilerGeneratedAttribute]
public IList`1<Archive> get_Archives();
    [CompilerGeneratedAttribute]
public void set_Archives(IList`1<Archive> value);
    [CompilerGeneratedAttribute]
public string get_LicenseID();
    [CompilerGeneratedAttribute]
public void set_LicenseID(string value);
    private bool GetPreview();
}
public class Xamarin.Installer.AndroidSDK.Common.PackageTag : ItemWithIDAndDisplay {
    public PackageTag(string id, string display);
    public sealed virtual bool Equals(PackageTag other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Xamarin.Installer.AndroidSDK.Common.PackageVendor : ItemWithIDAndDisplay {
    public PackageVendor(string id, string display);
    public sealed virtual bool Equals(PackageVendor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Xamarin.Installer.AndroidSDK.DirectorySizeMonitoringTimer : object {
    private static int MIN_MOVE_PROGRESS_SPLIT;
    private static int MAX_MOVE_PROGRESS_SPLIT;
    private static int SMALL_NUMBER_OF_FILES;
    private static int BIG_NUMBER_OF_FILES;
    private Timer timer;
    private float maxProgress;
    private float targetMaxProgress;
    private Action`1<float> progressUpdateAction;
    private bool disposed;
    public DirectorySizeMonitoringTimer(string targetDirectoryPath, string dirToCompareWith, Action`1<float> progressUpdateAction, float remapFrom, float remapTo, double checkInterval);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Xamarin.Installer.AndroidSDK.DirectorySizeMonitoringTimer/<GetDirectorySizeAsync>d__11")]
private Task`1<ulong> GetDirectorySizeAsync(string directory);
    public static double Remap(double value, double from1, double to1, double from2, double to2);
    public static ulong CalculateTotalSize(ZipFile zipFile);
    public static int CalculateMoveProgressSplit(string archivePath);
}
[ExtensionAttribute]
public static class Xamarin.Installer.AndroidSDK.Extensions : object {
    [ExtensionAttribute]
internal static IAndroidComponent Clone(IAndroidComponent component);
    [ExtensionAttribute]
public static bool AreEqual(IList`1<T> one, IList`1<T> two);
    [ExtensionAttribute]
public static int XorWith(int value, Nullable`1<int> maybeValue);
    [ExtensionAttribute]
public static int XorWith(int value, int otherValue);
    [ExtensionAttribute]
public static string AsString(IXmlLineInfo info, string openBracket, string closeBracket);
    [ExtensionAttribute]
public static bool GetProperty(JavaProperties props, string name, T& result);
    [ExtensionAttribute]
public static UInt32 AsUInt(string s, bool throwOnError);
    [ExtensionAttribute]
public static ulong AsULong(string s, bool throwOnError);
    [ExtensionAttribute]
public static bool AsBool(string s, bool throwOnError);
    [ExtensionAttribute]
public static Uri AsUri(string s, bool throwOnError);
    [ExtensionAttribute]
public static void GetLineInfo(XElement e, Int32& line, Int32& column);
    [ExtensionAttribute]
public static IXmlLineInfo GetLineInfo(XElement e);
    [ExtensionAttribute]
public static string GetLocation(XElement e, Uri documentUrl);
    [ExtensionAttribute]
public static string GetChildElementValue(XElement element, string childName);
    [ExtensionAttribute]
public static string GetAttributeValue(XElement e, string name, bool required, Uri documentUrl);
    [ExtensionAttribute]
public static XAttribute GetAttribute(XElement e, string name);
    [ExtensionAttribute]
public static XAttribute GetAttribute(XElement e, XNamespace ns, string name);
    [ExtensionAttribute]
public static string GetElementValue(XElement e);
    [ExtensionAttribute]
public static void GetNamespaces(XElement root, Uri docURL, Dictionary`2& namespaces);
    private static void GetNamespace(XElement element, XAttribute attr, Uri docURL, Dictionary`2& namespaces);
    [ExtensionAttribute]
public static string GetFullName(XName name);
}
public class Xamarin.Installer.AndroidSDK.GoogleV2.AddonSite : object {
    [CompilerGeneratedAttribute]
private AddonSiteType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Url>k__BackingField;
    public AddonSiteType Type { get; }
    public string DisplayName { get; }
    public Uri Url { get; }
    public AddonSite(AddonSiteType type, string displayName, Uri url);
    [CompilerGeneratedAttribute]
public AddonSiteType get_Type();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public Uri get_Url();
}
public enum Xamarin.Installer.AndroidSDK.GoogleV2.AddonSiteType : Enum {
    public int value__;
    public static AddonSiteType Unknown;
    public static AddonSiteType SystemImage;
    public static AddonSiteType Addon;
}
[ExtensionAttribute]
public static class Xamarin.Installer.AndroidSDK.GoogleV2.Extensions : object {
    [ExtensionAttribute]
public static void Fatal(IParserErrorHandler handler, string message);
    [ExtensionAttribute]
public static void Fatal(IParserErrorHandler handler, Uri url, string message);
    [ExtensionAttribute]
public static void Fatal(IParserErrorHandler handler, XElement element, string message, bool addLocationInfo);
    [ExtensionAttribute]
public static void Fatal(IParserErrorHandler handler, Uri documentUrl, XElement element, string message, bool addLocationInfo);
    [ExtensionAttribute]
public static void Error(IParserErrorHandler handler, string message);
    [ExtensionAttribute]
public static void Error(IParserErrorHandler handler, Uri url, string message);
    [ExtensionAttribute]
public static void Error(IParserErrorHandler handler, XElement element, string message, bool addLocationInfo);
    [ExtensionAttribute]
public static void Error(IParserErrorHandler handler, Uri documentUrl, XElement element, string message, bool addLocationInfo);
    [ExtensionAttribute]
public static void Warning(IParserErrorHandler handler, string message);
    [ExtensionAttribute]
public static void Warning(IParserErrorHandler handler, Uri url, string message);
    [ExtensionAttribute]
public static void Warning(IParserErrorHandler handler, XElement element, string message, bool addLocationInfo);
    [ExtensionAttribute]
public static void Warning(IParserErrorHandler handler, Uri documentUrl, XElement element, string message, bool addLocationInfo);
    [ExtensionAttribute]
public static void Info(IParserErrorHandler handler, string message);
    [ExtensionAttribute]
public static void Info(IParserErrorHandler handler, Uri url, string message);
    [ExtensionAttribute]
public static void Info(IParserErrorHandler handler, XElement element, string message, bool addLocationInfo);
    [ExtensionAttribute]
public static void Info(IParserErrorHandler handler, Uri documentUrl, XElement element, string message, bool addLocationInfo);
    [ExtensionAttribute]
public static void Debug(IParserErrorHandler handler, string message);
    [ExtensionAttribute]
public static void Debug(IParserErrorHandler handler, Uri url, string message);
    [ExtensionAttribute]
public static void Debug(IParserErrorHandler handler, XElement element, string message, bool addLocationInfo);
    [ExtensionAttribute]
public static void Debug(IParserErrorHandler handler, Uri documentUrl, XElement element, string message, bool addLocationInfo);
    private static void ReportRecoverableError(IParserErrorHandler handler, ParserErrorLevel level, Uri documentUrl, XElement element, string message, bool addLocationInfo);
    private static string RenderLocation(Uri documentUrl, XElement element, bool addLocationInfo);
}
public class Xamarin.Installer.AndroidSDK.GoogleV2.GoogleV2Repository : Repository {
    private static Uri DefaultRepositoryBaseURL;
    private static Uri DefaultManifestURL;
    private static Uri DefaultAddonsListURL;
    private static Regex MANIFEST_FILE_NAME_SANITIZER_REGEX;
    private ParserContext parserContext;
    private List`1<RepositoryParser> repoParts;
    [CompilerGeneratedAttribute]
private Uri <RepositoryBaseURL>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <AddonsListURL>k__BackingField;
    public Uri RepositoryBaseURL { get; private set; }
    public Uri AddonsListURL { get; private set; }
    public GoogleV2Repository(AndroidSDKInstaller installer, Uri manifestURL, Uri addonsListURL, Uri repositoryBaseURL, bool cacheManifest);
    private static GoogleV2Repository();
    [CompilerGeneratedAttribute]
public Uri get_RepositoryBaseURL();
    [CompilerGeneratedAttribute]
private void set_RepositoryBaseURL(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_AddonsListURL();
    [CompilerGeneratedAttribute]
private void set_AddonsListURL(Uri value);
    public virtual void Parse();
    private void ParseInternal();
    private void AddComponents(RepositoryParser rp);
    private void UpdateIDs(List`1<RemotePackage> packages, T item, Func`2<RemotePackage, string> getID, Action`1<RemotePackage> setID);
    private void MergeItems(Dictionary`2<string, T> sourceDict, Dictionary`2& items, Int32& duplicateIdCounter, Action`2<string, T> updateID);
    private void MergeItemWithID(T item, Int32& duplicateIdCounter, Dictionary`2& items, Action`2<string, T> updateID);
    private bool ParseRepository(Stream manifest, Uri url, Dictionary`2& namespaces);
    private void ParseAddons(Stream manifest, Uri url, Dictionary`2& namespaces);
    private string ManifestNameToFileName(string name);
    private XDocument LoadManifest(ParserContext context, Stream manifest, Uri url, Dictionary`2& namespaces);
    private string GetManifestNameForUrl(Uri url);
}
public interface Xamarin.Installer.AndroidSDK.GoogleV2.IParserErrorHandler {
    public abstract virtual void OnRecoverableError(ParserErrorLevel recommendedLevel, Uri url, XElement element, string message);
    public abstract virtual void OnFatalError(Uri url, XElement element, string message);
}
public class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.AddonList3Parser : ElementParser {
    private List`1<AddonSite> sites;
    [CompilerGeneratedAttribute]
private IList`1<AddonSite> <Sites>k__BackingField;
    public IList`1<AddonSite> Sites { get; private set; }
    public AddonList3Parser(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    [CompilerGeneratedAttribute]
public IList`1<AddonSite> get_Sites();
    [CompilerGeneratedAttribute]
private void set_Sites(IList`1<AddonSite> value);
    protected virtual Dictionary`2<string, Action`1<XAttribute>> GetKnownAttributes();
    protected virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    protected virtual void Parsed();
    private void ParseChildElement_Site(XElement element);
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.AddonSiteParser : ElementParser {
    private static Dictionary`2<string, AddonSiteType> siteTypeMap;
    [CompilerGeneratedAttribute]
private AddonSiteType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Url>k__BackingField;
    public AddonSiteType Type { get; private set; }
    public string DisplayName { get; private set; }
    public Uri Url { get; private set; }
    public AddonSiteParser(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    private static AddonSiteParser();
    [CompilerGeneratedAttribute]
public AddonSiteType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(AddonSiteType value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
private void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public Uri get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(Uri value);
    protected virtual Dictionary`2<string, Action`1<XAttribute>> GetKnownAttributes();
    protected virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    private void ParseChildElement_DisplayName(XElement element);
    private void ParseChildElement_Url(XElement element);
    private void ParseAttribute_Type(XAttribute attr);
    protected virtual void Parsed();
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.ArchiveMetadataExtractor : object {
    [CompilerGeneratedAttribute]
private ulong <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Checksum>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Url>k__BackingField;
    public ulong Size { get; }
    public string Checksum { get; }
    public Uri Url { get; }
    public ArchiveMetadataExtractor(XElement element, ParserContext parserContext);
    [CompilerGeneratedAttribute]
public ulong get_Size();
    [CompilerGeneratedAttribute]
public string get_Checksum();
    [CompilerGeneratedAttribute]
public Uri get_Url();
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.ArchiveParser : ElementParser {
    private ulong size;
    private string checksum;
    private Uri url;
    private string hostOS;
    private string hostArch;
    private UInt32 hostBits;
    private IList`1<ArchivePatch> patches;
    [CompilerGeneratedAttribute]
private Archive <Archive>k__BackingField;
    public Archive Archive { get; private set; }
    public ArchiveParser(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    [CompilerGeneratedAttribute]
public Archive get_Archive();
    [CompilerGeneratedAttribute]
private void set_Archive(Archive value);
    protected virtual Dictionary`2<string, Action`1<XAttribute>> GetKnownAttributes();
    protected virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    private static UInt32 HostArchToBits(string hostArch);
    private void ParseChildElement_Patches(XElement element);
    private void ParseChildElement_Complete(XElement element);
    protected virtual void Parsed();
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__13_0(XElement element);
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__13_1(XElement element);
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__13_2(XElement element);
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.ArchivePatchesParser : ElementParser {
    private List`1<ArchivePatch> patches;
    [CompilerGeneratedAttribute]
private IList`1<ArchivePatch> <Patches>k__BackingField;
    public IList`1<ArchivePatch> Patches { get; private set; }
    public ArchivePatchesParser(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    [CompilerGeneratedAttribute]
public IList`1<ArchivePatch> get_Patches();
    [CompilerGeneratedAttribute]
private void set_Patches(IList`1<ArchivePatch> value);
    protected virtual Dictionary`2<string, Action`1<XAttribute>> GetKnownAttributes();
    protected virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    private void ParseChildElement_Patch(XElement element);
    protected virtual void Parsed();
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.ArchivePatchParser : ElementParser {
    private AndroidRevision basedOn;
    [CompilerGeneratedAttribute]
private ArchivePatch <Patch>k__BackingField;
    public ArchivePatch Patch { get; private set; }
    public ArchivePatchParser(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    [CompilerGeneratedAttribute]
public ArchivePatch get_Patch();
    [CompilerGeneratedAttribute]
private void set_Patch(ArchivePatch value);
    protected virtual Dictionary`2<string, Action`1<XAttribute>> GetKnownAttributes();
    protected virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    private void ParseChildElement_BasedOn(XElement element);
    protected virtual void Parsed();
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.ArchivesParser : ElementParser {
    private List`1<Archive> archives;
    [CompilerGeneratedAttribute]
private IList`1<Archive> <Archives>k__BackingField;
    public IList`1<Archive> Archives { get; private set; }
    public ArchivesParser(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    [CompilerGeneratedAttribute]
public IList`1<Archive> get_Archives();
    [CompilerGeneratedAttribute]
private void set_Archives(IList`1<Archive> value);
    protected virtual Dictionary`2<string, Action`1<XAttribute>> GetKnownAttributes();
    protected virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    private void ParseChildElement_Archive(XElement element);
    protected virtual void Parsed();
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.DependenciesParser : ElementParser {
    private List`1<Dependency> dependencies;
    [CompilerGeneratedAttribute]
private IList`1<Dependency> <Dependencies>k__BackingField;
    public IList`1<Dependency> Dependencies { get; private set; }
    public DependenciesParser(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    [CompilerGeneratedAttribute]
public IList`1<Dependency> get_Dependencies();
    [CompilerGeneratedAttribute]
private void set_Dependencies(IList`1<Dependency> value);
    protected virtual Dictionary`2<string, Action`1<XAttribute>> GetKnownAttributes();
    protected virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    private void ParseChildElement_Dependency(XElement element);
    protected virtual void Parsed();
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.DependencyParser : ElementParser {
    private string path;
    private AndroidRevision minRevision;
    [CompilerGeneratedAttribute]
private Dependency <Dependency>k__BackingField;
    public Dependency Dependency { get; private set; }
    public DependencyParser(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    [CompilerGeneratedAttribute]
public Dependency get_Dependency();
    [CompilerGeneratedAttribute]
private void set_Dependency(Dependency value);
    protected virtual Dictionary`2<string, Action`1<XAttribute>> GetKnownAttributes();
    private void ParseAttribute_Path(XAttribute attr);
    protected virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    private void ParseChildElement_MinRevision(XElement element);
    protected virtual void Parsed();
}
public abstract class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.ElementParser : object {
    [CompilerGeneratedAttribute]
private XElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private ParserContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, XNamespace> <Namespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private IParserErrorHandler <ErrorHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreNamespaceAttributes>k__BackingField;
    protected XElement Element { get; }
    protected ParserContext Context { get; }
    protected Dictionary`2<string, XNamespace> Namespaces { get; }
    protected IParserErrorHandler ErrorHandler { get; }
    protected bool IgnoreNamespaceAttributes { get; protected set; }
    protected ElementParser(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    [CompilerGeneratedAttribute]
protected XElement get_Element();
    [CompilerGeneratedAttribute]
protected ParserContext get_Context();
    [CompilerGeneratedAttribute]
protected Dictionary`2<string, XNamespace> get_Namespaces();
    [CompilerGeneratedAttribute]
protected IParserErrorHandler get_ErrorHandler();
    [CompilerGeneratedAttribute]
protected bool get_IgnoreNamespaceAttributes();
    [CompilerGeneratedAttribute]
protected void set_IgnoreNamespaceAttributes(bool value);
    public void Parse();
    protected virtual void Parsed();
    private bool AllAttributesAreNamespaceDeclarations(XElement element);
    protected string GetAttributeName(string namespaceName, string attributeName, bool warnIfMissing);
    protected XNamespace GetNamespace(string name);
    public static XNamespace GetNamespace(string name, Dictionary`2<string, XNamespace> namespaces);
    protected Uri EnsureAbsoluteUrl(Uri url);
    protected abstract virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    protected abstract virtual Dictionary`2<string, Action`1<XAttribute>> GetKnownAttributes();
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.LibrariesParser : ElementParser {
    private List`1<PackageLibrary> libraries;
    [CompilerGeneratedAttribute]
private IList`1<PackageLibrary> <Libraries>k__BackingField;
    public IList`1<PackageLibrary> Libraries { get; private set; }
    public LibrariesParser(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    [CompilerGeneratedAttribute]
public IList`1<PackageLibrary> get_Libraries();
    [CompilerGeneratedAttribute]
private void set_Libraries(IList`1<PackageLibrary> value);
    protected virtual Dictionary`2<string, Action`1<XAttribute>> GetKnownAttributes();
    protected virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    private void ParseChildElement_Archive(XElement element);
    protected virtual void Parsed();
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.LibraryParser : ElementParser {
    private string localJarPath;
    private string name;
    private string description;
    [CompilerGeneratedAttribute]
private PackageLibrary <Library>k__BackingField;
    public PackageLibrary Library { get; private set; }
    public LibraryParser(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    [CompilerGeneratedAttribute]
public PackageLibrary get_Library();
    [CompilerGeneratedAttribute]
private void set_Library(PackageLibrary value);
    protected virtual Dictionary`2<string, Action`1<XAttribute>> GetKnownAttributes();
    protected virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    protected virtual void Parsed();
    [CompilerGeneratedAttribute]
private void <GetKnownAttributes>b__8_0(XAttribute attribute);
    [CompilerGeneratedAttribute]
private void <GetKnownAttributes>b__8_1(XAttribute attribute);
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__9_0(XElement element);
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.LicenseParser : ElementParser {
    private string id;
    private string type;
    [CompilerGeneratedAttribute]
private License <License>k__BackingField;
    public License License { get; private set; }
    public LicenseParser(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    [CompilerGeneratedAttribute]
public License get_License();
    [CompilerGeneratedAttribute]
private void set_License(License value);
    protected virtual Dictionary`2<string, Action`1<XAttribute>> GetKnownAttributes();
    protected virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    protected virtual void Parsed();
    private void ParseAttribute_Id(XAttribute attr);
    private void ParseAttribute_Type(XAttribute attr);
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.PackageTagParser : ElementParser {
    private string id;
    private string display;
    [CompilerGeneratedAttribute]
private PackageTag <Tag>k__BackingField;
    public PackageTag Tag { get; private set; }
    public PackageTagParser(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    [CompilerGeneratedAttribute]
public PackageTag get_Tag();
    [CompilerGeneratedAttribute]
private void set_Tag(PackageTag value);
    protected virtual Dictionary`2<string, Action`1<XAttribute>> GetKnownAttributes();
    protected virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    protected virtual void Parsed();
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__8_0(XElement e);
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__8_1(XElement e);
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.PackageVendorParser : ElementParser {
    private string id;
    private string display;
    [CompilerGeneratedAttribute]
private PackageVendor <Vendor>k__BackingField;
    public PackageVendor Vendor { get; private set; }
    public PackageVendorParser(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    [CompilerGeneratedAttribute]
public PackageVendor get_Vendor();
    [CompilerGeneratedAttribute]
private void set_Vendor(PackageVendor value);
    protected virtual Dictionary`2<string, Action`1<XAttribute>> GetKnownAttributes();
    protected virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    protected virtual void Parsed();
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__8_0(XElement e);
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__8_1(XElement e);
}
public class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.ParserContext : object {
    private Uri currentManifestURL;
    private Uri currentManifestBaseURL;
    [CompilerGeneratedAttribute]
private IParserErrorHandler <ErrorHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <BaseURL>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <RepositoryManifestURL>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <AddonsListManifestURL>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <RepositoryManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <AddonsListManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, License> <Licenses>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Channel> <Channels>k__BackingField;
    public IParserErrorHandler ErrorHandler { get; }
    public Uri BaseURL { get; }
    public Uri RepositoryManifestURL { get; }
    public Uri AddonsListManifestURL { get; }
    public Stream RepositoryManifest { get; }
    public Stream AddonsListManifest { get; }
    public Uri CurrentManifestBaseURL { get; }
    public Uri CurrentManifestURL { get; public set; }
    public IDictionary`2<string, License> Licenses { get; private set; }
    public IDictionary`2<string, Channel> Channels { get; private set; }
    public ParserContext(IParserErrorHandler errorHandler, Uri baseURL, Uri repositoryManifestURL, Stream repositoryManifest, Uri addonsListManifestURL, Stream addonsListManifest);
    public ParserContext(IParserErrorHandler errorHandler, Uri repositoryManifestURL);
    [CompilerGeneratedAttribute]
public IParserErrorHandler get_ErrorHandler();
    [CompilerGeneratedAttribute]
public Uri get_BaseURL();
    [CompilerGeneratedAttribute]
public Uri get_RepositoryManifestURL();
    [CompilerGeneratedAttribute]
public Uri get_AddonsListManifestURL();
    [CompilerGeneratedAttribute]
public Stream get_RepositoryManifest();
    [CompilerGeneratedAttribute]
public Stream get_AddonsListManifest();
    public Uri get_CurrentManifestBaseURL();
    public Uri get_CurrentManifestURL();
    public void set_CurrentManifestURL(Uri value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, License> get_Licenses();
    [CompilerGeneratedAttribute]
private void set_Licenses(IDictionary`2<string, License> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, Channel> get_Channels();
    [CompilerGeneratedAttribute]
private void set_Channels(IDictionary`2<string, Channel> value);
    public sealed virtual void Dispose();
    private Uri GetCurrentManifestBaseURL();
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.RemotePackageParser : ElementParser {
    private Repository repository;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileSystemPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Obsolete>k__BackingField;
    [CompilerGeneratedAttribute]
private AndroidComponentInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private AndroidRevision <Revision>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Dependency> <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChannelID>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Archive> <Archives>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseID>k__BackingField;
    [CompilerGeneratedAttribute]
private RemotePackage <Package>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeAllArchives>k__BackingField;
    protected string Path { get; private set; }
    protected string FileSystemPath { get; private set; }
    protected bool Obsolete { get; protected set; }
    protected AndroidComponentInfo Info { get; private set; }
    protected AndroidRevision Revision { get; private set; }
    protected string DisplayName { get; private set; }
    protected IList`1<Dependency> Dependencies { get; private set; }
    protected string ChannelID { get; private set; }
    protected IList`1<Archive> Archives { get; private set; }
    protected string LicenseID { get; private set; }
    public RemotePackage Package { get; private set; }
    internal bool IncludeAllArchives { get; internal set; }
    public RemotePackageParser(Repository repository, ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    [CompilerGeneratedAttribute]
protected string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
protected string get_FileSystemPath();
    [CompilerGeneratedAttribute]
private void set_FileSystemPath(string value);
    [CompilerGeneratedAttribute]
protected bool get_Obsolete();
    [CompilerGeneratedAttribute]
protected void set_Obsolete(bool value);
    [CompilerGeneratedAttribute]
protected AndroidComponentInfo get_Info();
    [CompilerGeneratedAttribute]
private void set_Info(AndroidComponentInfo value);
    [CompilerGeneratedAttribute]
protected AndroidRevision get_Revision();
    [CompilerGeneratedAttribute]
private void set_Revision(AndroidRevision value);
    [CompilerGeneratedAttribute]
protected string get_DisplayName();
    [CompilerGeneratedAttribute]
private void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
protected IList`1<Dependency> get_Dependencies();
    [CompilerGeneratedAttribute]
private void set_Dependencies(IList`1<Dependency> value);
    [CompilerGeneratedAttribute]
protected string get_ChannelID();
    [CompilerGeneratedAttribute]
private void set_ChannelID(string value);
    [CompilerGeneratedAttribute]
protected IList`1<Archive> get_Archives();
    [CompilerGeneratedAttribute]
private void set_Archives(IList`1<Archive> value);
    [CompilerGeneratedAttribute]
protected string get_LicenseID();
    [CompilerGeneratedAttribute]
private void set_LicenseID(string value);
    [CompilerGeneratedAttribute]
public RemotePackage get_Package();
    [CompilerGeneratedAttribute]
private void set_Package(RemotePackage value);
    [CompilerGeneratedAttribute]
internal bool get_IncludeAllArchives();
    [CompilerGeneratedAttribute]
internal void set_IncludeAllArchives(bool value);
    protected virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    protected virtual void Parsed();
    private void ParseChildElement_Archives(XElement element);
    private void ParseChildElement_Dependencies(XElement element);
    private void ParseChildElement_ChannelRef(XElement element);
    private void ParseChildElement_UsesLicense(XElement element);
    private string GetRefAttributeValue(XElement element);
    private void ParseChildElement_DisplayName(XElement element);
    private void ParseChildElement_Revision(XElement element);
    private void ParseChildElement_TypeDetails(XElement element);
    protected virtual Dictionary`2<string, Action`1<XAttribute>> GetKnownAttributes();
    private void ParseAttribute_Obsolete(XAttribute attr);
    private void ParseAttribute_Path(XAttribute attr);
}
public class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.RepositoryParser : ElementParser {
    private Dictionary`2<string, License> licenses;
    private Dictionary`2<string, Channel> channels;
    private List`1<RemotePackage> packages;
    private GoogleV2Repository repository;
    [CompilerGeneratedAttribute]
private Uri <RepositoryURL>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeAllArchives>k__BackingField;
    public Dictionary`2<string, License> Licenses { get; }
    public Dictionary`2<string, Channel> Channels { get; }
    public List`1<RemotePackage> Packages { get; }
    public Uri RepositoryURL { get; }
    public bool IncludeAllArchives { get; public set; }
    public RepositoryParser(GoogleV2Repository repository, ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    public Dictionary`2<string, License> get_Licenses();
    public Dictionary`2<string, Channel> get_Channels();
    public List`1<RemotePackage> get_Packages();
    [CompilerGeneratedAttribute]
public Uri get_RepositoryURL();
    [CompilerGeneratedAttribute]
public bool get_IncludeAllArchives();
    [CompilerGeneratedAttribute]
public void set_IncludeAllArchives(bool value);
    protected virtual Dictionary`2<string, Action`1<XAttribute>> GetKnownAttributes();
    protected virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    private void ParseChildElement_RemotePackage(XElement element);
    private void ParseChildElement_Channel(XElement element);
    private void ParseChildElement_License(XElement element);
    private void AddPackage(RemotePackage package);
    private void AddChannel(string id, string text);
    private void AddLicense(License license);
    private void AddDictionaryItem(T item, string key, Dictionary`2& dict, string duplicateMessage, Func`2<T, string> getDuplicateLocation);
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.RevisionParser : ElementParser {
    private int major;
    private int minor;
    private int micro;
    private int preview;
    [CompilerGeneratedAttribute]
private AndroidRevision <Revision>k__BackingField;
    public AndroidRevision Revision { get; private set; }
    public RevisionParser(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    [CompilerGeneratedAttribute]
public AndroidRevision get_Revision();
    [CompilerGeneratedAttribute]
private void set_Revision(AndroidRevision value);
    protected virtual void Parsed();
    protected virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    private int ParseValue(XElement element);
    protected virtual Dictionary`2<string, Action`1<XAttribute>> GetKnownAttributes();
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__10_0(XElement e);
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__10_1(XElement e);
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__10_2(XElement e);
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__10_3(XElement e);
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.TypeDetailsAddOnParser : TypeDetailsParser {
    [CompilerGeneratedAttribute]
private string <ApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageVendor <Vendor>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageTag <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PackageLibrary> <Libraries>k__BackingField;
    public string ApiLevel { get; private set; }
    public string CodeName { get; private set; }
    public PackageVendor Vendor { get; private set; }
    public PackageTag Tag { get; private set; }
    public IList`1<PackageLibrary> Libraries { get; private set; }
    public TypeDetailsAddOnParser(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    [CompilerGeneratedAttribute]
public string get_ApiLevel();
    [CompilerGeneratedAttribute]
private void set_ApiLevel(string value);
    [CompilerGeneratedAttribute]
public string get_CodeName();
    [CompilerGeneratedAttribute]
private void set_CodeName(string value);
    [CompilerGeneratedAttribute]
public PackageVendor get_Vendor();
    [CompilerGeneratedAttribute]
private void set_Vendor(PackageVendor value);
    [CompilerGeneratedAttribute]
public PackageTag get_Tag();
    [CompilerGeneratedAttribute]
private void set_Tag(PackageTag value);
    [CompilerGeneratedAttribute]
public IList`1<PackageLibrary> get_Libraries();
    [CompilerGeneratedAttribute]
private void set_Libraries(IList`1<PackageLibrary> value);
    protected virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    private void ParseChildElement_Libraries(XElement element);
    protected virtual AndroidComponentInfo CreateComponentInfo();
    protected virtual bool Validate();
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__21_0(XElement e);
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__21_1(XElement e);
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__21_2(XElement e);
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__21_3(XElement e);
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.TypeDetailsExtraParser : TypeDetailsParser {
    [CompilerGeneratedAttribute]
private PackageVendor <Vendor>k__BackingField;
    public PackageVendor Vendor { get; public set; }
    public TypeDetailsExtraParser(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    [CompilerGeneratedAttribute]
public PackageVendor get_Vendor();
    [CompilerGeneratedAttribute]
public void set_Vendor(PackageVendor value);
    protected virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    protected virtual AndroidComponentInfo CreateComponentInfo();
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__5_0(XElement e);
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.TypeDetailsGenericParser : TypeDetailsParser {
    public TypeDetailsGenericParser(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    protected virtual AndroidComponentInfo CreateComponentInfo();
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.TypeDetailsMavenParser : TypeDetailsParser {
    [CompilerGeneratedAttribute]
private PackageVendor <Vendor>k__BackingField;
    public PackageVendor Vendor { get; public set; }
    public TypeDetailsMavenParser(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    [CompilerGeneratedAttribute]
public PackageVendor get_Vendor();
    [CompilerGeneratedAttribute]
public void set_Vendor(PackageVendor value);
    protected virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    protected virtual AndroidComponentInfo CreateComponentInfo();
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__5_0(XElement e);
}
internal abstract class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.TypeDetailsParser : ElementParser {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private AndroidComponentInfo <Info>k__BackingField;
    protected string Type { get; private set; }
    public AndroidComponentInfo Info { get; private set; }
    protected TypeDetailsParser(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    [CompilerGeneratedAttribute]
protected string get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(string value);
    [CompilerGeneratedAttribute]
public AndroidComponentInfo get_Info();
    [CompilerGeneratedAttribute]
private void set_Info(AndroidComponentInfo value);
    protected virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    protected virtual Dictionary`2<string, Action`1<XAttribute>> GetKnownAttributes();
    protected Dictionary`2<string, Action`1<T>> EnsureDictionary(Dictionary`2<string, Action`1<T>> dict);
    protected virtual void Parsed();
    protected virtual bool Validate();
    protected bool ValidateApiLevel(string apiLevel);
    protected PackageTag ParseChildElement_Tag(XElement element);
    protected PackageVendor ParseChildElement_Vendor(XElement element);
    protected abstract virtual AndroidComponentInfo CreateComponentInfo();
    [CompilerGeneratedAttribute]
private void <GetKnownAttributes>b__10_0(XAttribute e);
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.TypeDetailsParserFactory : object {
    private static TypeCreator genericCreator;
    private static TypeCreator platfomCreator;
    private static TypeCreator sourceCreator;
    private static TypeCreator systemImageCreator;
    private static TypeCreator addonCreator;
    private static TypeCreator extraCreator;
    private static TypeCreator mavenCreator;
    private static Dictionary`2<string, TypeCreator> typeDetailsMap;
    private static TypeDetailsParserFactory();
    public static TypeDetailsParser CreateInstance(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    private static TypeCreator FindCreator(ParserContext parserContext, string typeName, XElement element, Dictionary`2<string, XNamespace> namespaces);
    private static TypeCreator LookupCreator(string typeName);
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.TypeDetailsPlatformParser : TypeDetailsParser {
    [CompilerGeneratedAttribute]
private string <ApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LayoutLibApi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtensionLevel>k__BackingField;
    protected string ApiLevel { get; private set; }
    protected string CodeName { get; private set; }
    protected string LayoutLibApi { get; private set; }
    protected string BaseExtension { get; private set; }
    protected string ExtensionLevel { get; private set; }
    public TypeDetailsPlatformParser(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    [CompilerGeneratedAttribute]
protected string get_ApiLevel();
    [CompilerGeneratedAttribute]
private void set_ApiLevel(string value);
    [CompilerGeneratedAttribute]
protected string get_CodeName();
    [CompilerGeneratedAttribute]
private void set_CodeName(string value);
    [CompilerGeneratedAttribute]
protected string get_LayoutLibApi();
    [CompilerGeneratedAttribute]
private void set_LayoutLibApi(string value);
    [CompilerGeneratedAttribute]
protected string get_BaseExtension();
    [CompilerGeneratedAttribute]
private void set_BaseExtension(string value);
    [CompilerGeneratedAttribute]
protected string get_ExtensionLevel();
    [CompilerGeneratedAttribute]
private void set_ExtensionLevel(string value);
    protected virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    protected virtual AndroidComponentInfo CreateComponentInfo();
    protected virtual bool Validate();
    private void ParseChildElement_LayoutLib(XElement element);
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__21_0(XElement e);
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__21_1(XElement e);
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__21_2(XElement e);
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__21_3(XElement e);
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.TypeDetailsSourceParser : TypeDetailsParser {
    [CompilerGeneratedAttribute]
private string <ApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeName>k__BackingField;
    protected string ApiLevel { get; private set; }
    protected string CodeName { get; private set; }
    public TypeDetailsSourceParser(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    [CompilerGeneratedAttribute]
protected string get_ApiLevel();
    [CompilerGeneratedAttribute]
private void set_ApiLevel(string value);
    [CompilerGeneratedAttribute]
protected string get_CodeName();
    [CompilerGeneratedAttribute]
private void set_CodeName(string value);
    protected virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    protected virtual AndroidComponentInfo CreateComponentInfo();
    protected virtual bool Validate();
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__9_0(XElement e);
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__9_1(XElement e);
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.Parsing.TypeDetailsSystemImageParser : TypeDetailsParser {
    [CompilerGeneratedAttribute]
private Nullable`1<AndroidSystemImageAbi> <Abi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AbiName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageTag <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageVendor <Vendor>k__BackingField;
    protected Nullable`1<AndroidSystemImageAbi> Abi { get; private set; }
    protected string AbiName { get; private set; }
    protected string ApiLevel { get; private set; }
    protected string CodeName { get; private set; }
    protected PackageTag Tag { get; private set; }
    protected PackageVendor Vendor { get; private set; }
    public TypeDetailsSystemImageParser(ParserContext parserContext, XElement element, Dictionary`2<string, XNamespace> namespaces);
    [CompilerGeneratedAttribute]
protected Nullable`1<AndroidSystemImageAbi> get_Abi();
    [CompilerGeneratedAttribute]
private void set_Abi(Nullable`1<AndroidSystemImageAbi> value);
    [CompilerGeneratedAttribute]
protected string get_AbiName();
    [CompilerGeneratedAttribute]
private void set_AbiName(string value);
    [CompilerGeneratedAttribute]
protected string get_ApiLevel();
    [CompilerGeneratedAttribute]
private void set_ApiLevel(string value);
    [CompilerGeneratedAttribute]
protected string get_CodeName();
    [CompilerGeneratedAttribute]
private void set_CodeName(string value);
    [CompilerGeneratedAttribute]
protected PackageTag get_Tag();
    [CompilerGeneratedAttribute]
private void set_Tag(PackageTag value);
    [CompilerGeneratedAttribute]
protected PackageVendor get_Vendor();
    [CompilerGeneratedAttribute]
private void set_Vendor(PackageVendor value);
    protected virtual Dictionary`2<string, Action`1<XElement>> GetKnownChildElements();
    protected virtual AndroidComponentInfo CreateComponentInfo();
    private void ParseChildElement_ABI(XElement element);
    protected virtual bool Validate();
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__25_0(XElement e);
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__25_1(XElement e);
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__25_2(XElement e);
    [CompilerGeneratedAttribute]
private void <GetKnownChildElements>b__25_3(XElement e);
}
public class Xamarin.Installer.AndroidSDK.GoogleV2.RemotePackage : BasePackage {
    private IParserErrorHandler errorHandler;
    [CompilerGeneratedAttribute]
private string <ChannelID>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeAllArchives>k__BackingField;
    public AndroidComponentType ComponentType { get; }
    public Channel Channel { get; }
    public string ChannelID { get; public set; }
    public bool IncludeAllArchives { get; public set; }
    public RemotePackage(Repository repository, Uri manifestURL, IXmlLineInfo location, IParserErrorHandler errorHandler, IList`1<Archive> archives);
    public virtual AndroidComponentType get_ComponentType();
    public virtual Channel get_Channel();
    [CompilerGeneratedAttribute]
public string get_ChannelID();
    [CompilerGeneratedAttribute]
public void set_ChannelID(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeAllArchives();
    [CompilerGeneratedAttribute]
public void set_IncludeAllArchives(bool value);
    public void Verify();
    private void DoVerify();
    public static RemotePackage Clone(RemotePackage source);
    protected virtual PackageMetadata CreateMetadata(BasePackage component);
    protected virtual bool MetadataChanged(PackageMetadata metadata, bool update, bool ignoreInstalledState);
    public virtual void RefreshMetadata(IAndroidComponent component, bool ignoreInstalledState);
    private void RefreshMetadata(RemotePackage rp, bool ignoreInstalledState);
    private bool MetadataChanged(RemotePackageMetadata metadata, bool update, bool ignoreInstalledState);
    private AndroidComponentType GetComponentType(AndroidComponentInfo info);
    public virtual bool MatchesTo(IAndroidComponent other);
    public virtual bool BasicMetadataEquals(BasePackage other);
    private bool BasicMetadataEquals(RemotePackage other);
    public sealed virtual bool Equals(RemotePackage other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual void LogError(string message);
    protected virtual void LogWarning(string message);
    protected virtual void LogInfo(string message);
    protected virtual void LogDebug(string message);
}
internal class Xamarin.Installer.AndroidSDK.GoogleV2.RemotePackageMetadata : PackageMetadata {
    [CompilerGeneratedAttribute]
private string <ChannelID>k__BackingField;
    public string ChannelID { get; public set; }
    public RemotePackageMetadata(RemotePackage rp);
    [CompilerGeneratedAttribute]
public string get_ChannelID();
    [CompilerGeneratedAttribute]
public void set_ChannelID(string value);
}
public class Xamarin.Installer.AndroidSDK.Helpers : object {
    private static string utf8BOM;
    private static Helpers();
    public static void AddDictionaryItem(T item, string key, Dictionary`2& dict, Action`1<string> duplicateHandler);
    public static string GetComponentArchiveSelector(string os, string arch, UInt32 osbits);
    public static XmlDocument LoadXML(string xml, string documentName, bool initializeNamespace, XmlNamespaceManager& nsmgr);
    public static Uri GetBaseURL(Uri fullUrl);
    private static string GetXMLNamespaceName(string xmlns);
}
public interface Xamarin.Installer.AndroidSDK.ILocalManifestProvider {
    public abstract virtual void SaveManifest(string manifest, string fileName);
    public abstract virtual string GetManifest(string fileName);
}
internal class Xamarin.Installer.AndroidSDK.LocalManifestProvider : object {
    private static string AppName;
    private static string XAMARIN_MANIFEST_FILE_NAME;
    private static string GOOGLE_MANIFEST_FILE_NAME;
    private static string CacheFolder;
    private AndroidManifestType manifestType;
    private string ManifestFileName { get; }
    private LocalManifestProvider(AndroidManifestType manifestType);
    private static LocalManifestProvider();
    public static LocalManifestProvider CreateGoogleManifestProvider();
    public static LocalManifestProvider CreateXamarinManifestProvider();
    public sealed virtual void SaveManifest(string manifest, string fileName);
    public sealed virtual string GetManifest(string fileName);
    private string GetManifestFilePath(string fileName);
    private string get_ManifestFileName();
}
internal class Xamarin.Installer.AndroidSDK.LocalSDK.LocalSDKRepository : Repository {
    private List`1<InformationSource> component_info_sources;
    public LocalSDKRepository(AndroidSDKInstaller installer);
    public virtual void Parse();
    protected virtual void DetectInternal(AndroidSdkInstance sdkInstance);
    private void MaybeParseComponent(string dir, string sdkRoot);
    private bool Parse_Package_Xml(string filePath, string sdkRoot);
    private bool Parse_Source_Properties(string filePath, string sdkRoot);
    private string ConstructPackagePath(string filePath, string sdkRoot);
    private string GetRelativePath(string filePath, string sdkRoot);
    private AndroidComponentInfoMaven CreateMavenInfo(JavaProperties props);
    private AndroidComponentInfoExtra CreateExtraInfo(JavaProperties props);
    private AndroidComponentInfoAddon CreateAddonInfo(JavaProperties props, string propsFilePath);
    private List`1<PackageLibrary> GetAddonLibraries(string manifestIni);
    private void AddPackageLibrary(string id, string details, List`1& libraries);
    private AndroidComponentInfoSystemImage CreateSystemImageInfo(JavaProperties props, string abiName);
    private AndroidComponentInfoSource CreateSourceInfo(JavaProperties props);
    private AndroidComponentInfoPlatform CreatePlatformInfo(JavaProperties props);
    private PackageVendor CreateVendor(JavaProperties props, string idKeyName, string displayKeyName);
    private PackageTag CreateTag(JavaProperties props, string idKeyName, string displayKeyName);
    private bool GetIdProperties(JavaProperties props, string idKeyName, string displayKeyName, String& id, String& display);
    private bool IsInParentDir(string filePath, string parentDirName);
    private void AddLicense(License license);
    private void AddComponent(IAndroidComponent component);
}
public class Xamarin.Installer.AndroidSDK.Manager.ConfigManager : object {
    private static string AppName;
    private static string PropertiesRootNode;
    private static string PropertyNode;
    private Dictionary`2<string, string> properties;
    private string filePath;
    public static string ConfigFolder { get; }
    private string FilePath { get; }
    public static string get_ConfigFolder();
    private string get_FilePath();
    internal void SetProperty(string key, string value);
    internal string GetProperty(string key, string defaultValue);
    private void LoadProperties();
    internal void SaveProperties();
}
public class Xamarin.Installer.AndroidSDK.Manager.Helper : object {
    public static TimeSpan HttpTimeout;
    private static string homeDirectory;
    private ConfigManager config;
    [CompilerGeneratedAttribute]
private string <CacheFolder>k__BackingField;
    private static ConcurrentDictionary`2<Uri, Tuple`2<DateTimeOffset, string>> stringDownloadCache;
    public string CacheFolder { get; public set; }
    public static string HomeDirectory { get; }
    private string Xamarin.Installer.Common.IHelpers.HomeDirectory { get; }
    public bool IsArm64 { get; }
    public bool Is64BitOS { get; }
    public bool IsCaseSensitiveFileSystem { get; }
    public string UserName { get; }
    public Helper(string cacheFolder);
    private static Helper();
    [CompilerGeneratedAttribute]
public string get_CacheFolder();
    [CompilerGeneratedAttribute]
public void set_CacheFolder(string value);
    public static string get_HomeDirectory();
    private sealed virtual override string Xamarin.Installer.Common.IHelpers.get_HomeDirectory();
    public sealed virtual bool get_IsArm64();
    public sealed virtual bool get_Is64BitOS();
    public sealed virtual bool get_IsCaseSensitiveFileSystem();
    public sealed virtual string get_UserName();
    public sealed virtual bool DownloadToString(Uri url, String& output);
    public string GetPathForDownloadId(Guid id);
    public sealed virtual ulong GetUrlContentLength(Uri url);
    public sealed virtual bool IsSpecialFile(string filePath);
    public sealed virtual void CopySpecialFile(string source, string target);
    public sealed virtual string Unzip(string baseDirectory, string archivePath, string fileOwnerName);
    public sealed virtual string Unzip(string baseDirectory, string archivePath, string fileOwnerName, InstallationProgressActionDelegate progressCallback);
    private static void SafeSetLastWriteTime(string path, DateTime stamp);
    private static void SetFileAttributes(string filePath, bool dosAttributes, int zipAttributes);
    public sealed virtual bool URLExists(Uri url);
    public sealed virtual string GetRegistryKeyValue(string subKeyPath, string keyName, bool check64Node);
    public sealed virtual string GetPluralString(string s, string p, int n);
    public sealed virtual string GetString(string s);
    public sealed virtual string GetProperty(string key, string defaultValue);
    public sealed virtual void SetProperty(string key, string value);
    [AsyncStateMachineAttribute("Xamarin.Installer.AndroidSDK.Manager.Helper/<CheckIfNetworkIsAvailableAsync>d__37")]
public sealed virtual Task`1<bool> CheckIfNetworkIsAvailableAsync();
    [AsyncStateMachineAttribute("Xamarin.Installer.AndroidSDK.Manager.Helper/<CheckIfNetworkAvailable>d__38")]
private Task`1<bool> CheckIfNetworkAvailable();
    [CompilerGeneratedAttribute]
private Task`1<bool> <CheckIfNetworkIsAvailableAsync>b__37_0();
}
public static class Xamarin.Installer.AndroidSDK.Manager.HttpClientProvider : object {
    private static Func`2<Uri, HttpClient> httpClientFactory;
    public static void SetHttpClientFactory(Func`2<Uri, HttpClient> factory);
    public static HttpClient CreateHttpClient(Uri uri);
}
public interface Xamarin.Installer.AndroidSDK.Manager.ICancellableProgressMonitor {
    public CancellationToken CancellationToken { get; }
    public bool DisposeOnFinish { get; }
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual bool get_DisposeOnFinish();
}
public interface Xamarin.Installer.AndroidSDK.Manager.IProgressMonitor {
    public abstract virtual void BeginStep(string step);
    public abstract virtual void BeginStep(string step, long totalWork);
    public abstract virtual void EndStep(AndroidSDKComponentInstallationResult result);
    public abstract virtual void ReportProgress(long work);
    public abstract virtual void ReportMessage(string message);
    public abstract virtual void ReportError(string message, Exception ex);
}
public interface Xamarin.Installer.AndroidSDK.Manager.IProgressMonitorFactory {
    public abstract virtual IProgressMonitor CreateProgressMonitor();
}
public interface Xamarin.Installer.AndroidSDK.Manager.IProgressMonitorWithTotalProgress {
    public abstract virtual void ReportTotalProgress(double loadPercentage, int mainComponentsCount, int mainComponentIndex, int subComponentsCount, int subComponentIndex);
}
public static class Xamarin.Installer.AndroidSDK.Manager.Platform : object {
    public static bool IsWindows;
    public static bool IsMac;
    public static bool IsLinux;
    [CompilerGeneratedAttribute]
private static Version <OSVersion>k__BackingField;
    public static Version OSVersion { get; private set; }
    private static Platform();
    [CompilerGeneratedAttribute]
public static Version get_OSVersion();
    [CompilerGeneratedAttribute]
private static void set_OSVersion(Version value);
    private static int uname(IntPtr buf);
    private static bool IsRunningOnMac();
}
public class Xamarin.Installer.AndroidSDK.MonitorWithTotalProgress : object {
    private float currentTaskTotalWork;
    private int mainComponentsCount;
    private float lastLoadPercentage;
    private static float minPercentageChange;
    private float fractionPerComponent;
    private float fractionPerSubComponent;
    private IProgressMonitor monitor;
    private int subComponentsCount;
    [CompilerGeneratedAttribute]
private bool <IsMonitorWithTotalProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MainComponentIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SubComponentIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private States <State>k__BackingField;
    public bool DisposeOnFinish { get; }
    public CancellationToken CancellationToken { get; }
    public bool IsMonitorWithTotalProgress { get; private set; }
    public int MainComponentIndex { get; public set; }
    public int SubComponentIndex { get; public set; }
    public int SubComponentsCount { get; public set; }
    public States State { get; public set; }
    public MonitorWithTotalProgress(IProgressMonitor monitor, int mainComponentsCount);
    public sealed virtual bool get_DisposeOnFinish();
    public sealed virtual CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public bool get_IsMonitorWithTotalProgress();
    [CompilerGeneratedAttribute]
private void set_IsMonitorWithTotalProgress(bool value);
    [CompilerGeneratedAttribute]
public int get_MainComponentIndex();
    [CompilerGeneratedAttribute]
public void set_MainComponentIndex(int value);
    [CompilerGeneratedAttribute]
public int get_SubComponentIndex();
    [CompilerGeneratedAttribute]
public void set_SubComponentIndex(int value);
    public int get_SubComponentsCount();
    public void set_SubComponentsCount(int value);
    [CompilerGeneratedAttribute]
public States get_State();
    [CompilerGeneratedAttribute]
public void set_State(States value);
    public sealed virtual void BeginStep(string step);
    public sealed virtual void BeginStep(string step, long totalWork);
    public sealed virtual void EndStep(AndroidSDKComponentInstallationResult result);
    public sealed virtual void ReportProgress(long work);
    private float ReportTotalProgress(long work);
    public sealed virtual void ReportMessage(string message);
    public sealed virtual void ReportError(string message, Exception ex);
    public sealed virtual void Dispose();
}
public enum Xamarin.Installer.AndroidSDK.ParserErrorLevel : Enum {
    public int value__;
    public static ParserErrorLevel Debug;
    public static ParserErrorLevel Info;
    public static ParserErrorLevel Warning;
    public static ParserErrorLevel Error;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Xamarin.Installer.AndroidSDK.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ComponentInstallationFailed { get; }
    internal static string FailedToLoadSourceProperties { get; }
    internal static string NoSuitableArchiveFound { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ComponentInstallationFailed();
    internal static string get_FailedToLoadSourceProperties();
    internal static string get_NoSuitableArchiveFound();
}
[ExtensionAttribute]
public static class Xamarin.Installer.AndroidSDK.PublicExtensions : object {
    [ExtensionAttribute]
public static bool AnyOutdated(IList`1<IAndroidComponent> components);
    [ExtensionAttribute]
public static bool AnyNotInstalled(IList`1<IAndroidComponent> components);
    [ExtensionAttribute]
public static IList`1<IAndroidComponent> AllOutdatedOrMissing(IList`1<IAndroidComponent> components, Func`2<IAndroidComponent, bool> shouldInclude);
    [ExtensionAttribute]
public static IList`1<IAndroidComponent> AllOutdated(IList`1<IAndroidComponent> components, Func`2<IAndroidComponent, bool> shouldInclude);
    [ExtensionAttribute]
public static IList`1<IAndroidComponent> AllInstalled(IList`1<IAndroidComponent> components, bool includeOutdated, Func`2<IAndroidComponent, bool> shouldInclude);
    [ExtensionAttribute]
public static IList`1<IAndroidComponent> AllNotInstalled(IList`1<IAndroidComponent> components, bool includeObsolete, Func`2<IAndroidComponent, bool> shouldInclude);
    [ExtensionAttribute]
public static IList`1<IAndroidComponent> AllOfType(IList`1<IAndroidComponent> components, AndroidComponentType type, Func`2<IAndroidComponent, bool> shouldInclude);
    [ExtensionAttribute]
public static IList`1<IAndroidComponent> AllPlatforms(IList`1<IAndroidComponent> components, Func`2<IAndroidComponent, bool> shouldInclude);
    [ExtensionAttribute]
public static IList`1<IAndroidComponent> AllSystemImages(IList`1<IAndroidComponent> components, AndroidSystemImageAbi forABI, Func`2<IAndroidComponent, bool> shouldInclude);
    [ExtensionAttribute]
public static IList`1<IAndroidComponent> AllApiLevel(IList`1<IAndroidComponent> components, string apiLevel, Func`2<IAndroidComponent, bool> shouldInclude);
    [ExtensionAttribute]
public static IList`1<IAndroidComponent> AllWithPath(IList`1<IAndroidComponent> components, string path, AndroidRevision minimumRevision, Func`2<IAndroidComponent, bool> shouldInclude, bool matchPathStartOnly);
    [ExtensionAttribute]
public static IList`1<IAndroidComponent> AllBuildTools(IList`1<IAndroidComponent> components, AndroidRevision minimumRevision, Func`2<IAndroidComponent, bool> shouldInclude);
    [ExtensionAttribute]
public static IList`1<IAndroidComponent> AllTools(IList`1<IAndroidComponent> components, AndroidRevision minimumRevision, Func`2<IAndroidComponent, bool> shouldInclude);
    [ExtensionAttribute]
public static IList`1<IAndroidComponent> AllPlatformTools(IList`1<IAndroidComponent> components, AndroidRevision minimumRevision, Func`2<IAndroidComponent, bool> shouldInclude);
    [ExtensionAttribute]
public static IList`1<IAndroidComponent> AllEmulators(IList`1<IAndroidComponent> components, AndroidRevision minimumRevision, Func`2<IAndroidComponent, bool> shouldInclude);
    [ExtensionAttribute]
public static IList`1<IAndroidComponent> AllCMake(IList`1<IAndroidComponent> components, AndroidRevision minimumRevision, Func`2<IAndroidComponent, bool> shouldInclude);
    [ExtensionAttribute]
public static IList`1<IAndroidComponent> AllLLDB(IList`1<IAndroidComponent> components, AndroidRevision minimumRevision, Func`2<IAndroidComponent, bool> shouldInclude);
    [ExtensionAttribute]
public static IList`1<IAndroidComponent> AllNDK(IList`1<IAndroidComponent> components, AndroidRevision minimumRevision, Func`2<IAndroidComponent, bool> shouldInclude);
    [ExtensionAttribute]
public static IList`1<IAndroidComponent> AllAddons(IList`1<IAndroidComponent> components, AndroidRevision minimumRevision, Func`2<IAndroidComponent, bool> shouldInclude);
    private static IEnumerable`1<IAndroidComponent> GetAllApiLevel(IList`1<IAndroidComponent> components, string apiLevel, Func`2<IAndroidComponent, bool> shouldInclude);
    private static IEnumerable`1<IAndroidComponent> GetAllOfType(IList`1<IAndroidComponent> components, AndroidComponentType type, Func`2<IAndroidComponent, bool> shouldInclude);
}
public abstract class Xamarin.Installer.AndroidSDK.Repository : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ManifestURL>k__BackingField;
    [CompilerGeneratedAttribute]
private AndroidSDKInstaller <Installer>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IAndroidComponent> <Components>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IJdkComponent> <JdkComponents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Parsed>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, License> <Licenses>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Channel> <Channels>k__BackingField;
    [CompilerGeneratedAttribute]
private Channel <DefaultChannel>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, XNamespace> <Namespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOffline>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalManifestProvider <ManifestCacher>k__BackingField;
    public string Name { get; }
    public Uri ManifestURL { get; protected set; }
    public AndroidSDKInstaller Installer { get; }
    public IList`1<IAndroidComponent> Components { get; }
    public IList`1<IJdkComponent> JdkComponents { get; }
    public bool Parsed { get; protected set; }
    public IDictionary`2<string, License> Licenses { get; }
    public IDictionary`2<string, Channel> Channels { get; protected set; }
    public Channel DefaultChannel { get; protected set; }
    public Dictionary`2<string, XNamespace> Namespaces { get; protected set; }
    public bool IsOffline { get; protected set; }
    protected ILocalManifestProvider ManifestCacher { get; protected set; }
    protected Repository(AndroidSDKInstaller installer, string name, Uri manifestURL);
    protected Repository(AndroidSDKInstaller installer, string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Uri get_ManifestURL();
    [CompilerGeneratedAttribute]
protected void set_ManifestURL(Uri value);
    [CompilerGeneratedAttribute]
public AndroidSDKInstaller get_Installer();
    [CompilerGeneratedAttribute]
public IList`1<IAndroidComponent> get_Components();
    [CompilerGeneratedAttribute]
public IList`1<IJdkComponent> get_JdkComponents();
    [CompilerGeneratedAttribute]
public bool get_Parsed();
    [CompilerGeneratedAttribute]
protected void set_Parsed(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, License> get_Licenses();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, Channel> get_Channels();
    [CompilerGeneratedAttribute]
protected void set_Channels(IDictionary`2<string, Channel> value);
    [CompilerGeneratedAttribute]
public Channel get_DefaultChannel();
    [CompilerGeneratedAttribute]
protected void set_DefaultChannel(Channel value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, XNamespace> get_Namespaces();
    [CompilerGeneratedAttribute]
protected void set_Namespaces(Dictionary`2<string, XNamespace> value);
    [CompilerGeneratedAttribute]
public bool get_IsOffline();
    [CompilerGeneratedAttribute]
protected void set_IsOffline(bool value);
    [CompilerGeneratedAttribute]
protected ILocalManifestProvider get_ManifestCacher();
    [CompilerGeneratedAttribute]
protected void set_ManifestCacher(ILocalManifestProvider value);
    public void Remove(IAndroidComponent component, string androidSDKRoot);
    public void Install(IAndroidComponent component, string archivePath, string androidSDKRoot, InstallationProgressActionDelegate progressCallback);
    protected virtual void InstallComponent(IAndroidComponent component, string archivePath, string androidSDKRoot, InstallationProgressActionDelegate progressCallback);
    public void Detect(AndroidSdkInstance sdkInstance);
    public void Refresh(AndroidSdkInstance sdkInstance);
    private IAndroidComponent FindMatchedComponent(IAndroidComponent c, IList`1<IAndroidComponent> componentList);
    private BasePackage EnsureBasePackage(IAndroidComponent c);
    protected virtual void DetectInternal(AndroidSdkInstance sdkInstance);
    protected virtual void DetectComponent(AndroidSdkInstance sdkInstance, IAndroidComponent c);
    public Channel GetChannel(string channelId);
    public License GetLicense(string licenseId);
    protected T GetDictionaryEntry(IDictionary`2<string, T> dict, string entryId);
    protected void CopyDictionary(IDictionary`2<K, V> source, IDictionary`2<K, V> destination);
    public string GetNamespaceUri(string nsName);
    public abstract virtual void Parse();
    protected string LoadManifest();
    protected XDocument ParseManifest(string manifestName, string manifest);
    protected XDocument ParseManifest(string manifestName, Stream manifestStream, LoadOptions loadOptions);
    public virtual Uri GetFallbackManifestUrl();
    [CompilerGeneratedAttribute]
private bool <Refresh>b__49_0(IAndroidComponent c);
}
public class Xamarin.Installer.AndroidSDK.SystemImageSpec : object {
    [CompilerGeneratedAttribute]
private AndroidSystemImageAbi <ABI>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageTag <Tag>k__BackingField;
    public AndroidSystemImageAbi ABI { get; public set; }
    public PackageTag Tag { get; public set; }
    [CompilerGeneratedAttribute]
public AndroidSystemImageAbi get_ABI();
    [CompilerGeneratedAttribute]
public void set_ABI(AndroidSystemImageAbi value);
    [CompilerGeneratedAttribute]
public PackageTag get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(PackageTag value);
}
internal class Xamarin.Installer.AndroidSDK.Xamarin.XamarinPackage : BasePackage {
    [CompilerGeneratedAttribute]
private AndroidComponentType <ComponentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <OriginalManifestUri>k__BackingField;
    public Channel Channel { get; }
    public AndroidComponentType ComponentType { get; }
    public Uri OriginalManifestUri { get; public set; }
    public XamarinPackage(Repository repository, Uri manifestURL, IXmlLineInfo location, IList`1<Archive> archives, AndroidComponentType componentType);
    public virtual Channel get_Channel();
    [CompilerGeneratedAttribute]
public virtual AndroidComponentType get_ComponentType();
    [CompilerGeneratedAttribute]
public Uri get_OriginalManifestUri();
    [CompilerGeneratedAttribute]
public void set_OriginalManifestUri(Uri value);
    public static XamarinPackage Clone(XamarinPackage source);
    public virtual void RefreshMetadata(IAndroidComponent component, bool ignoreInstalledState);
    private void RefreshMetadata(XamarinPackage rp, bool ignoreInstalledState);
    protected virtual PackageMetadata CreateMetadata(BasePackage component);
    public sealed virtual bool Equals(XamarinPackage other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual void LogError(string message);
    protected virtual void LogWarning(string message);
    protected virtual void LogInfo(string message);
    protected virtual void LogDebug(string message);
}
internal class Xamarin.Installer.AndroidSDK.Xamarin.XamarinRepository : Repository {
    private Dictionary`2<Type, Func`4<string, string, XElement, AndroidComponentInfo>> infoParsers;
    private Dictionary`2<Type, AndroidComponentType> infoToComponentType;
    public XamarinRepository(AndroidSDKInstaller installer, Uri manifestURL, bool cacheManifest);
    private Uri GetDefaultManifestURL();
    public virtual void Parse();
    private void ParseInternal();
    private void ParseJdkPackages(IEnumerable`1<XElement> elements);
    private JdkPackage ParseJdkPackage(XElement element);
    private void ParsePackages(string name, IEnumerable`1<XElement> elements);
    private XamarinPackage ParseCommonPackageData(string name, AndroidComponentInfo info, XElement element);
    private Dependency ParseDependency(XElement element);
    private JdkArchive ParseJDKArchive(XElement element);
    private T ParseArchive(XElement element);
    private AndroidComponentInfo ParsePlatformPackageInfo(string name, string packageType, XElement element);
    private AndroidComponentInfo ParseSystemImageInfo(string name, string packageType, XElement element);
    private AndroidComponentInfo ParseAddonInfo(string name, string packageType, XElement element);
    private PackageLibrary ParseLibrary(XElement element);
    private AndroidComponentInfo ParseExtraInfo(string name, string packageType, XElement element);
    private PackageTag CreateTag(string id, string display);
    private PackageVendor CreateVendor(string id, string display);
    public virtual Uri GetFallbackManifestUrl();
}
