internal class ThisAssembly : object {
}
public class Xamarin.Installer.AndroidSDK.AndroidSDKComponentInstallationResult : object {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private States <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public bool Success { get; public set; }
    public States State { get; public set; }
    public Exception Exception { get; public set; }
    public AndroidSDKComponentInstallationResult(bool success, Exception exception);
    public AndroidSDKComponentInstallationResult(States state, Exception exception, Nullable`1<bool> success);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(bool value);
    [CompilerGeneratedAttribute]
public States get_State();
    [CompilerGeneratedAttribute]
public void set_State(States value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Xamarin.Installer.AndroidSDK.AndroidSDKComponentInstallationResultExtensions : object {
    [ExtensionAttribute]
public static bool IsSuccessful(States state);
    [ExtensionAttribute]
public static string ToReadableString(AndroidSDKComponentInstallationResult result);
}
public class Xamarin.Installer.AndroidSDK.Manager.ConfigManager : object {
    private static string AppName;
    private static string PropertiesRootNode;
    private static string PropertyNode;
    private Dictionary`2<string, string> properties;
    private string filePath;
    public static string ConfigFolder { get; }
    private string FilePath { get; }
    public static string get_ConfigFolder();
    private string get_FilePath();
    internal void SetProperty(string key, string value);
    internal string GetProperty(string key, string defaultValue);
    private void LoadProperties();
    internal void SaveProperties();
}
public class Xamarin.Installer.AndroidSDK.Manager.Helper : object {
    public static TimeSpan HttpTimeout;
    private static string homeDirectory;
    private ConfigManager config;
    [CompilerGeneratedAttribute]
private string <CacheFolder>k__BackingField;
    private static ConcurrentDictionary`2<Uri, Tuple`2<DateTimeOffset, string>> stringDownloadCache;
    public string CacheFolder { get; public set; }
    public static string HomeDirectory { get; }
    private string Xamarin.Installer.Common.IHelpers.HomeDirectory { get; }
    public bool IsArm64 { get; }
    public bool Is64BitOS { get; }
    public bool IsCaseSensitiveFileSystem { get; }
    public string UserName { get; }
    public Helper(string cacheFolder);
    private static Helper();
    [CompilerGeneratedAttribute]
public string get_CacheFolder();
    [CompilerGeneratedAttribute]
public void set_CacheFolder(string value);
    public static string get_HomeDirectory();
    private sealed virtual override string Xamarin.Installer.Common.IHelpers.get_HomeDirectory();
    public sealed virtual bool get_IsArm64();
    public sealed virtual bool get_Is64BitOS();
    public sealed virtual bool get_IsCaseSensitiveFileSystem();
    public sealed virtual string get_UserName();
    public sealed virtual bool DownloadToString(Uri url, String& output);
    public string GetPathForDownloadId(Guid id);
    public sealed virtual ulong GetUrlContentLength(Uri url);
    public sealed virtual bool IsSpecialFile(string filePath);
    public sealed virtual void CopySpecialFile(string source, string target);
    public sealed virtual string Unzip(string baseDirectory, string archivePath, string fileOwnerName);
    public sealed virtual string Unzip(string baseDirectory, string archivePath, string fileOwnerName, InstallationProgressActionDelegate progressCallback);
    private static void SafeSetLastWriteTime(string path, DateTime stamp);
    private static void SetFileAttributes(string filePath, bool dosAttributes, int zipAttributes);
    public sealed virtual bool URLExists(Uri url);
    public sealed virtual string GetRegistryKeyValue(string subKeyPath, string keyName, bool check64Node);
    public sealed virtual string GetPluralString(string s, string p, int n);
    public sealed virtual string GetString(string s);
    public sealed virtual string GetProperty(string key, string defaultValue);
    public sealed virtual void SetProperty(string key, string value);
    [AsyncStateMachineAttribute("Xamarin.Installer.AndroidSDK.Manager.Helper/<CheckIfNetworkIsAvailableAsync>d__37")]
public sealed virtual Task`1<bool> CheckIfNetworkIsAvailableAsync();
    [AsyncStateMachineAttribute("Xamarin.Installer.AndroidSDK.Manager.Helper/<CheckIfNetworkAvailable>d__38")]
private Task`1<bool> CheckIfNetworkAvailable();
    [CompilerGeneratedAttribute]
private Task`1<bool> <CheckIfNetworkIsAvailableAsync>b__37_0();
}
public interface Xamarin.Installer.AndroidSDK.Manager.ICancellableProgressMonitor {
    public CancellationToken CancellationToken { get; }
    public bool DisposeOnFinish { get; }
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual bool get_DisposeOnFinish();
}
public interface Xamarin.Installer.AndroidSDK.Manager.IProgressMonitor {
    public abstract virtual void BeginStep(string step);
    public abstract virtual void BeginStep(string step, long totalWork);
    public abstract virtual void EndStep(AndroidSDKComponentInstallationResult result);
    public abstract virtual void ReportProgress(long work);
    public abstract virtual void ReportMessage(string message);
    public abstract virtual void ReportError(string message, Exception ex);
}
public interface Xamarin.Installer.AndroidSDK.Manager.IProgressMonitorFactory {
    public abstract virtual IProgressMonitor CreateProgressMonitor();
}
public interface Xamarin.Installer.AndroidSDK.Manager.IProgressMonitorWithTotalProgress {
    public abstract virtual void ReportTotalProgress(double loadPercentage, int mainComponentsCount, int mainComponentIndex, int subComponentsCount, int subComponentIndex);
}
public static class Xamarin.Installer.AndroidSDK.Manager.Platform : object {
    public static bool IsWindows;
    public static bool IsMac;
    public static bool IsLinux;
    [CompilerGeneratedAttribute]
private static Version <OSVersion>k__BackingField;
    public static Version OSVersion { get; private set; }
    private static Platform();
    [CompilerGeneratedAttribute]
public static Version get_OSVersion();
    [CompilerGeneratedAttribute]
private static void set_OSVersion(Version value);
    private static int uname(IntPtr buf);
    private static bool IsRunningOnMac();
}
public abstract class Xamarin.Installer.Build.Tasks.AsyncTask : Task {
    private CancellationTokenSource tcs;
    private Queue logMessageQueue;
    private Queue warningMessageQueue;
    private Queue errorMessageQueue;
    private ManualResetEvent logDataAvailable;
    private ManualResetEvent errorDataAvailable;
    private ManualResetEvent warningDataAvailable;
    private ManualResetEvent taskCancelled;
    private ManualResetEvent completed;
    private bool isRunning;
    private object _eventlock;
    private int UIThreadId;
    [CompilerGeneratedAttribute]
private bool <YieldDuringToolExecution>k__BackingField;
    public CancellationToken Token { get; }
    public bool YieldDuringToolExecution { get; public set; }
    [ObsoleteAttribute("Do not use the Log.LogXXXX from within your Async task as it will Lock the Visual Studio UI. Use the this.LogXXXX methods instead.")]
private TaskLoggingHelper Log { get; }
    public CancellationToken get_Token();
    [CompilerGeneratedAttribute]
public bool get_YieldDuringToolExecution();
    [CompilerGeneratedAttribute]
public void set_YieldDuringToolExecution(bool value);
    public sealed virtual void Cancel();
    public void Complete();
    public virtual bool Execute();
    private TaskLoggingHelper get_Log();
    public void LogDebugTaskItems(string message, String[] items);
    public void LogDebugTaskItems(string message, ITaskItem[] items);
    public void LogMessage(string message);
    public void LogMessage(string message, Object[] messageArgs);
    public void LogDebugMessage(string message);
    public void LogDebugMessage(string message, Object[] messageArgs);
    public void LogMessage(string message, MessageImportance importance);
    public void LogError(string message);
    public void LogError(string message, Object[] messageArgs);
    public void LogErrorFromException(Exception exception);
    public void LogCodedError(string code, string message);
    public void LogCodedError(string code, string message, Object[] messageArgs);
    public void LogError(string code, string message, string file, int lineNumber);
    public void LogWarning(string message, Object[] messageArgs);
    public void LogWarning(string message);
    private void LogMessages();
    private void LogErrors();
    private void LogWarnings();
    protected void WaitForCompletion();
}
public class Xamarin.Installer.Build.Tasks.InstallAndroidDependencies : AsyncTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AndroidSdkPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AcceptAndroidSDKLicenses>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TimeoutInMinutes>k__BackingField;
    private List`1<string> temporaryFiles;
    [CompilerGeneratedAttribute]
private string <ManifestType>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] Dependencies { get; public set; }
    [RequiredAttribute]
public string AndroidSdkPath { get; public set; }
    public bool AcceptAndroidSDKLicenses { get; public set; }
    public int TimeoutInMinutes { get; public set; }
    public string ManifestType { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Dependencies();
    [CompilerGeneratedAttribute]
public void set_Dependencies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_AndroidSdkPath();
    [CompilerGeneratedAttribute]
public void set_AndroidSdkPath(string value);
    [CompilerGeneratedAttribute]
public bool get_AcceptAndroidSDKLicenses();
    [CompilerGeneratedAttribute]
public void set_AcceptAndroidSDKLicenses(bool value);
    [CompilerGeneratedAttribute]
public int get_TimeoutInMinutes();
    [CompilerGeneratedAttribute]
public void set_TimeoutInMinutes(int value);
    [CompilerGeneratedAttribute]
public string get_ManifestType();
    [CompilerGeneratedAttribute]
public void set_ManifestType(string value);
    public virtual bool Execute();
    [AsyncStateMachineAttribute("Xamarin.Installer.Build.Tasks.InstallAndroidDependencies/<Install>d__22")]
private void Install();
    [AsyncStateMachineAttribute("Xamarin.Installer.Build.Tasks.InstallAndroidDependencies/<Download>d__23")]
private Task Download(HttpClient httpClient, Archive archive);
    public sealed virtual void Action(string format, Object[] parms);
    public sealed virtual void Debug(string format, Object[] parms);
    public sealed virtual void Debug(string format, Exception ex, Object[] parms);
    public sealed virtual void Error(string format, Object[] parms);
    public sealed virtual void Exception(string format, Exception ex, Object[] parms);
    public sealed virtual void Info(string format, Object[] parms);
    public sealed virtual void Warning(string format, Object[] parms);
    public sealed virtual void SetOperationStatus(OperationStatus status);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Xamarin.Installer.Build.Tasks.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AndroidSdk_Not_Set { get; }
    internal static string AndroidSdk_Not_Found { get; }
    internal static string License_Not_Accepted { get; }
    internal static string Required_Downloadable_Mismatch { get; }
    internal static string Required_Not_Installed { get; }
    internal static string Task_Failed { get; }
    internal static string Unsupported_Manifest_Type { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AndroidSdk_Not_Set();
    internal static string get_AndroidSdk_Not_Found();
    internal static string get_License_Not_Accepted();
    internal static string get_Required_Downloadable_Mismatch();
    internal static string get_Required_Not_Installed();
    internal static string get_Task_Failed();
    internal static string get_Unsupported_Manifest_Type();
}
