internal class ThisAssembly : object {
}
public static class Xamarin.Installer.Common.CommonUtilities : object {
    private static int SHORT_PATH_BUFFER_LENGTH;
    private static Char[] invalidPathChars;
    private static IHelpers __helpers;
    private static string __productName;
    public static string MANIFEST_TYPE_PROPERTY_KEY;
    public static string DONT_SHOW_REPAIR_AGAIN_KEY;
    public static IHelpers Helpers { get; public set; }
    public static string ProductName { get; public set; }
    private static CommonUtilities();
    public static IHelpers get_Helpers();
    public static void set_Helpers(IHelpers value);
    public static string get_ProductName();
    public static void set_ProductName(string value);
    public static void CopyDirectory(string sourceDirName, string destDirName, bool overwrite);
    public static void MoveDirectory(string sourceDirName, string destDirName, bool move, bool overwrite, bool createSourceDirRootAtDestination);
    private static void Copy(FileInfo source, string target, bool overwrite);
    public static bool DeleteDirectoryRecursively(string path, bool throwOnError);
    private static void DoDeleteDirectoryRecursively(FileSystemInfo fi);
    public static string RunCommand(string command, Int32& exitCode, String[] arguments);
    public static string RunCommand(string workingDirectory, string command, Int32& exitCode, String[] arguments);
    public static string RunCommand(string command, Int32& exitCode, bool fireAndForget, String[] arguments);
    public static string RunCommand(string workingDirectory, string command, Int32& exitCode, bool fireAndForget, String[] arguments);
    public static string RunCommand(string workingDirectory, string command, Int32& exitCode, bool fireAndForget, Action`1<ProcessStartInfo> modifyStartInfo, String[] arguments);
    private static UInt32 GetShortPathName(string longPath, StringBuilder shortPath, UInt32 shortPathLength);
    public static string GetShortPath(string path);
    private static void CleanEnvironment(StringDictionary envvars);
}
[ExtensionAttribute]
public static class Xamarin.Installer.Common.Extensions : object {
    [ExtensionAttribute]
public static string SafeTrim(string s);
    [ExtensionAttribute]
public static string RemoveTrailingDirectorySeparator(string path);
    [ExtensionAttribute]
public static Version CloneFillWithZeros(Version v);
    [ExtensionAttribute]
public static Version CloneValidVersion(Version v, int defaultMajor, int defaultMinor, int defaultBuild, int defaultRevision);
    private static int GetValidValue(int versionPart, int defaultValue);
}
public static class Xamarin.Installer.Common.Helpers : object {
    private static string INSTALLER_MACHINE_ID_REGISTRY_KEY;
    private static bool onWindows;
    public static string UserApplicationDataPath;
    public static string XamarinBaseRegistryKey;
    private static Helpers();
    public static Guid GetMachineID();
    private static Guid UnixGetMachineID();
    private static Guid WindowsGetMachineID();
    private static void SaveIdToFile(string idPath, Guid machineId);
    private static Guid GenerateAndSaveId(string idPath);
    public static bool GetRegistryKeyValue(string subKeyPath, string keyName, T& result, RegistryHive hive, bool check64Node);
    private static bool GetRegistryKeyValueInternal(string subKeyPath, string keyName, T& result, RegistryHive hive);
    public static void SetRegistryKeyValue(string subKeyPath, string keyName, object value, RegistryValueKind kind, RegistryHive hive);
    public static RegistryKey HiveToKey(RegistryHive hive);
}
public interface Xamarin.Installer.Common.IHelpers {
    public bool IsArm64 { get; }
    public bool Is64BitOS { get; }
    public string HomeDirectory { get; }
    public string UserName { get; }
    public bool IsCaseSensitiveFileSystem { get; }
    public abstract virtual bool get_IsArm64();
    public abstract virtual bool get_Is64BitOS();
    public abstract virtual string get_HomeDirectory();
    public abstract virtual string get_UserName();
    public abstract virtual bool get_IsCaseSensitiveFileSystem();
    public abstract virtual bool IsSpecialFile(string filePath);
    public abstract virtual void CopySpecialFile(string source, string target);
    public abstract virtual ulong GetUrlContentLength(Uri url);
    public abstract virtual string Unzip(string baseDirectory, string archivePath, string fileOwnerName);
    public abstract virtual string Unzip(string baseDirectory, string archivePath, string fileOwnerName, InstallationProgressActionDelegate progressCallback);
    public abstract virtual bool DownloadToString(Uri url, String& output);
    public abstract virtual bool URLExists(Uri url);
    public abstract virtual string GetRegistryKeyValue(string subKeyPath, string keyName, bool check64Node);
    public abstract virtual string GetString(string s);
    public abstract virtual string GetPluralString(string s, string p, int n);
    public abstract virtual string GetProperty(string key, string defaultValue);
    public abstract virtual void SetProperty(string key, string value);
    public abstract virtual Task`1<bool> CheckIfNetworkIsAvailableAsync();
}
public interface Xamarin.Installer.Common.ILogAdapter {
    public abstract virtual void Action(string format, Object[] parms);
    public abstract virtual void Debug(string format, Object[] parms);
    public abstract virtual void Debug(string format, Exception ex, Object[] parms);
    public abstract virtual void Error(string format, Object[] parms);
    public abstract virtual void Exception(string format, Exception ex, Object[] parms);
    public abstract virtual void Info(string format, Object[] parms);
    public abstract virtual void Warning(string format, Object[] parms);
    public abstract virtual void SetOperationStatus(OperationStatus status);
}
public interface Xamarin.Installer.Common.ILogAdapterExtended {
    public abstract virtual void SaveManifest(string manifestName, string content);
}
public class Xamarin.Installer.Common.InstallationProgressEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInitialEvent>k__BackingField;
    public string Message { get; public set; }
    public float Progress { get; public set; }
    public bool IsInitialEvent { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public float get_Progress();
    [CompilerGeneratedAttribute]
public void set_Progress(float value);
    [CompilerGeneratedAttribute]
public bool get_IsInitialEvent();
    [CompilerGeneratedAttribute]
public void set_IsInitialEvent(bool value);
}
public static class Xamarin.Installer.Common.Logger : object {
    [CompilerGeneratedAttribute]
private static ILogAdapter <LogAdapter>k__BackingField;
    public static ILogAdapter LogAdapter { get; public set; }
    [CompilerGeneratedAttribute]
public static ILogAdapter get_LogAdapter();
    [CompilerGeneratedAttribute]
public static void set_LogAdapter(ILogAdapter value);
    public static void Action(string format, Object[] parms);
    public static void Debug(string format, Object[] parms);
    public static void Debug(string format, Exception ex, Object[] parms);
    public static void Error(string format, Object[] parms);
    public static void Exception(string format, Exception ex, Object[] parms);
    public static void Info(string format, Object[] parms);
    public static void Warning(string format, Object[] parms);
    public static void SetOperationStatus(OperationStatus status);
    public static void LogManifest(string manifestName, Stream contentStream);
}
public enum Xamarin.Installer.Common.OperationStatus : Enum {
    public int value__;
    public static OperationStatus Failure;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Xamarin.Installer.Common.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string UnableToDownloadUpdate { get; }
    internal static string UrlFormatInvalid { get; }
    internal static string UrlSchemeNotSupported { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_UnableToDownloadUpdate();
    internal static string get_UrlFormatInvalid();
    internal static string get_UrlSchemeNotSupported();
}
[ExtensionAttribute]
public static class Xamarin.Installer.Common.XmlElementExtensions : object {
    [ExtensionAttribute]
public static string SelectSingleElementValue(XmlElement element, string xpath);
    [ExtensionAttribute]
public static string GetChildValue(XmlElement element, string childName);
    [ExtensionAttribute]
public static bool GetAttributeValue(XmlElement element, string attributeName, T& result);
    [ExtensionAttribute]
public static bool GetChildValue(XmlElement element, string childName, T& result);
    private static bool ConvertValue(string value, T& result);
    [ExtensionAttribute]
public static XmlElement GetChildElement(XmlElement parent, XmlNamespaceManager nsmgr, string xpath, bool required);
}
[ExtensionAttribute]
public static class Xamarin.Web.Installer.Extensions : object {
    private static DateTime epoch;
    private static Extensions();
    [ExtensionAttribute]
public static string JsonQuoted(string text);
    [ExtensionAttribute]
public static long ToUnixTimestamp(DateTime dt);
    [ExtensionAttribute]
public static string ToBase64(string data);
    [ExtensionAttribute]
public static string FromBase64(string data);
    [IteratorStateMachineAttribute("Xamarin.Web.Installer.Extensions/<DistinctBy>d__5`2")]
[ExtensionAttribute]
public static IEnumerable`1<TSource> DistinctBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
}
