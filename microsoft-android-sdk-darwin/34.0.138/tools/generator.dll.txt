public static class generator.JavaTypeResolutionFixups : object {
    [ObsoleteAttribute("Use the TypeDefinitionCache overload for better performance.", "True")]
public static void Fixup(string xmlFile, string outputXmlFile, DirectoryAssemblyResolver resolver, String[] references);
    public static void Fixup(string xmlFile, string outputXmlFile, DirectoryAssemblyResolver resolver, String[] references, TypeDefinitionCache cache);
    private static void OutputResults(CollectionResolutionResults results, string xmlFile, string outputXmlFile);
    private static void WriteCycle(StreamWriter writer, int index, CollectionResolutionResult result);
}
public class generator.SourceWriters.BoundAbstractProperty : PropertyWriter {
    private MethodCallback getter_callback;
    private MethodCallback setter_callback;
    public BoundAbstractProperty(GenBase gen, Property property, CodeGenerationOptions opt);
    public virtual void Write(CodeWriter writer);
}
public class generator.SourceWriters.BoundClass : ClassWriter {
    private CodeGenerationOptions opt;
    private List`1<TypeWriter> sibling_types;
    public BoundClass(ClassGen klass, CodeGenerationOptions opt, CodeGeneratorContext context, GenerationInfo generationInfo);
    private void AddBindingInfrastructure(ClassGen klass, CodeGenerationOptions opt);
    private void AddConstructors(ClassGen klass, CodeGenerationOptions opt, CodeGeneratorContext context);
    private void AddCharSequenceEnumerator(ClassGen klass);
    private void AddImplementedInterfaces(ClassGen klass);
    private void AddExplicitGenericInterfaceMembers(ClassGen klass, CodeGenerationOptions opt);
    private void AddAbstractMembers(ClassGen klass, CodeGenerationOptions opt, CodeGeneratorContext context);
    private void AddInterfaceAbstractMembers(ClassGen klass, InterfaceGen iface, CodeGenerationOptions opt, CodeGeneratorContext context);
    private void AddMethods(ClassGen klass, CodeGenerationOptions opt, CodeGeneratorContext context);
    private void AddAbstractMethodDeclaration(GenBase klass, Method method, InterfaceGen iface);
    private void AddMethod(GenBase klass, Method method, CodeGenerationOptions opt);
    private void AddProperties(ClassGen klass, CodeGenerationOptions opt);
    private void AddProperty(ClassGen klass, Property property, CodeGenerationOptions opt);
    private void AddAbstractPropertyDeclaration(ClassGen klass, Property property, CodeGenerationOptions opt);
    private void AddNestedTypes(ClassGen klass, CodeGenerationOptions opt, CodeGeneratorContext context, GenerationInfo genInfo);
    public virtual void Write(CodeWriter writer);
    public void WriteSiblingClasses(CodeWriter writer);
}
public class generator.SourceWriters.BoundConstructor : ConstructorWriter {
    protected Ctor constructor;
    protected CodeGenerationOptions opt;
    protected CodeGeneratorContext context;
    private string context_this;
    public BoundConstructor(ClassGen klass, Ctor constructor, bool useBase, CodeGenerationOptions opt, CodeGeneratorContext context);
    protected virtual void WriteBody(CodeWriter writer);
    private void WriteParamterListCallArgs(CodeWriter writer, ParameterList parameters, bool invoker, CodeGenerationOptions opt);
}
public class generator.SourceWriters.BoundField : FieldWriter {
    public BoundField(GenBase type, Field field, CodeGenerationOptions opt);
}
public class generator.SourceWriters.BoundFieldAsProperty : PropertyWriter {
    private Field field;
    private CodeGenerationOptions opt;
    public BoundFieldAsProperty(GenBase type, Field field, CodeGenerationOptions opt);
    public virtual void Write(CodeWriter writer);
    public virtual void WriteAttributes(CodeWriter writer);
    protected virtual void WriteGetterBody(CodeWriter writer);
    protected virtual void WriteSetterBody(CodeWriter writer);
}
public class generator.SourceWriters.BoundInterface : InterfaceWriter {
    private List`1<TypeWriter> pre_sibling_types;
    private List`1<ISourceWriter> post_sibling_types;
    private bool dont_generate;
    public BoundInterface(InterfaceGen iface, CodeGenerationOptions opt, CodeGeneratorContext context, GenerationInfo genInfo);
    private void AddNestedSiblingTypes(InterfaceGen iface, CodeGenerationOptions opt, CodeGeneratorContext context, GenerationInfo genInfo);
    private void AddAlternativesClass(InterfaceGen iface, CodeGenerationOptions opt, CodeGeneratorContext context);
    private void AddInterfaceEventHandler(InterfaceGen iface, CodeGenerationOptions opt, CodeGeneratorContext context);
    private void AddInheritedInterfaces(InterfaceGen iface, CodeGenerationOptions opt);
    private void AddClassHandle(InterfaceGen iface, CodeGenerationOptions opt);
    private void AddFields(InterfaceGen iface, CodeGenerationOptions opt, CodeGeneratorContext context);
    private void AddProperties(InterfaceGen iface, CodeGenerationOptions opt);
    private void AddMethods(InterfaceGen iface, CodeGenerationOptions opt);
    private void AddNestedTypes(InterfaceGen iface, CodeGenerationOptions opt, CodeGeneratorContext context, GenerationInfo genInfo);
    public virtual void Write(CodeWriter writer);
    public void WritePreSiblingClasses(CodeWriter writer);
    public void WritePostSiblingClasses(CodeWriter writer);
}
public class generator.SourceWriters.BoundInterfaceMethodDeclaration : MethodWriter {
    private Method method;
    private CodeGenerationOptions opt;
    public BoundInterfaceMethodDeclaration(Method method, string adapter, CodeGenerationOptions opt);
}
public class generator.SourceWriters.BoundInterfacePropertyDeclaration : PropertyWriter {
    public BoundInterfacePropertyDeclaration(GenBase gen, Property property, string adapter, CodeGenerationOptions opt);
}
public class generator.SourceWriters.BoundMethod : MethodWriter {
    private MethodCallback callback;
    [CompilerGeneratedAttribute]
private Method <JavaMethod>k__BackingField;
    public Method JavaMethod { get; }
    public BoundMethod(GenBase type, Method method, CodeGenerationOptions opt, bool generateCallbacks);
    [CompilerGeneratedAttribute]
public Method get_JavaMethod();
    private static string GetDeclaringTypeOfExplicitInterfaceMethod(Method method);
    public virtual void Write(CodeWriter writer);
}
public class generator.SourceWriters.BoundMethodAbstractDeclaration : MethodWriter {
    private Method method;
    private CodeGenerationOptions opt;
    private MethodCallback method_callback;
    public BoundMethodAbstractDeclaration(GenBase gen, Method method, CodeGenerationOptions opt, GenBase impl);
    public virtual void Write(CodeWriter writer);
}
public class generator.SourceWriters.BoundMethodExtensionStringOverload : MethodWriter {
    private Method method;
    private CodeGenerationOptions opt;
    private string self_type;
    public BoundMethodExtensionStringOverload(Method method, CodeGenerationOptions opt, string selfType);
    protected virtual void WriteBody(CodeWriter writer);
}
public class generator.SourceWriters.BoundMethodStringOverload : MethodWriter {
    private Method method;
    private CodeGenerationOptions opt;
    public BoundMethodStringOverload(Method method, CodeGenerationOptions opt);
    protected virtual void WriteBody(CodeWriter writer);
}
public class generator.SourceWriters.BoundProperty : PropertyWriter {
    private MethodCallback getter_callback;
    private MethodCallback setter_callback;
    public BoundProperty(GenBase gen, Property property, CodeGenerationOptions opt, bool withCallbacks, bool forceOverride);
    public virtual void Write(CodeWriter writer);
    private bool ShouldForceOverride(Property property);
    private void AddJavadocs(Property property);
    private static void MergeSummary(XElement mergeInto, XElement mergeFrom);
    private static void MergeRemarks(XElement mergeInto, XElement mergeFrom);
    private static void MergeReturns(XElement mergeInto, XElement mergeFrom);
}
public class generator.SourceWriters.BoundPropertyStringVariant : PropertyWriter {
    public BoundPropertyStringVariant(Property property, CodeGenerationOptions opt, BoundAbstractProperty original);
    public BoundPropertyStringVariant(Property property, CodeGenerationOptions opt, BoundProperty original);
    private BoundPropertyStringVariant(Property property, CodeGenerationOptions opt, bool isOriginalVirtual);
}
public class generator.SourceWriters.CharSequenceEnumeratorMethod : MethodWriter {
}
public class generator.SourceWriters.CharSequenceGenericEnumeratorMethod : MethodWriter {
}
public class generator.SourceWriters.ClassHandleGetter : PropertyWriter {
    public ClassHandleGetter(bool requireNew);
}
public class generator.SourceWriters.ClassInvokerClass : ClassWriter {
    public ClassInvokerClass(ClassGen klass, CodeGenerationOptions opt);
    private void AddMemberInvokers(ClassGen klass, CodeGenerationOptions opt, HashSet`1<string> members, HashSet`1<string> skipInvokers);
    private void AddPropertyInvokers(ClassGen klass, IEnumerable`1<Property> properties, HashSet`1<string> members, CodeGenerationOptions opt);
    private void AddMethodInvokers(ClassGen klass, IEnumerable`1<Method> methods, HashSet`1<string> members, HashSet`1<string> skipInvokers, InterfaceGen gen, CodeGenerationOptions opt);
}
public class generator.SourceWriters.ClassThresholdClassGetter : PropertyWriter {
}
public class generator.SourceWriters.ConstructorPartialMethod : MethodWriter {
    public ConstructorPartialMethod(string partialMethodName);
}
public class generator.SourceWriters.CreateImplementorMethod : MethodWriter {
    public CreateImplementorMethod(InterfaceGen iface, CodeGenerationOptions opt);
}
public class generator.SourceWriters.CustomAttr : AttributeWriter {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; public set; }
    public CustomAttr(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    public virtual void WriteAttribute(CodeWriter writer);
}
public class generator.SourceWriters.DebuggerBrowsableAttr : AttributeWriter {
    public virtual void WriteAttribute(CodeWriter writer);
}
public class generator.SourceWriters.DisposeMethod : MethodWriter {
}
public class generator.SourceWriters.EditorBrowsableAttr : AttributeWriter {
    public virtual void WriteAttribute(CodeWriter writer);
}
public class generator.SourceWriters.ExplicitInterfaceInvokerMethod : MethodWriter {
    private Method method;
    private CodeGenerationOptions opt;
    public ExplicitInterfaceInvokerMethod(GenBase iface, Method method, CodeGenerationOptions opt);
}
public class generator.SourceWriters.FlagsAttr : AttributeWriter {
    public virtual void WriteAttribute(CodeWriter writer);
}
public class generator.SourceWriters.GeneratedEnumAttr : AttributeWriter {
    private bool is_return;
    public GeneratedEnumAttr(bool isReturn);
    public virtual void WriteAttribute(CodeWriter writer);
}
public class generator.SourceWriters.GenericExplicitInterfaceImplementationMethod : MethodWriter {
    private Method method;
    private CodeGenerationOptions opt;
    private GenericSymbol gen;
    public GenericExplicitInterfaceImplementationMethod(Method method, GenericSymbol gen, CodeGenerationOptions opt);
    protected virtual void WriteBody(CodeWriter writer);
}
public class generator.SourceWriters.GenericExplicitInterfaceImplementationProperty : PropertyWriter {
    public GenericExplicitInterfaceImplementationProperty(Property property, GenericSymbol gen, string adapter, Dictionary`2<string, string> mappings, CodeGenerationOptions opt);
}
public class generator.SourceWriters.GetDelegateHandlerMethod : MethodWriter {
    private Method method;
    private CodeGenerationOptions opt;
    public GetDelegateHandlerMethod(Method method, CodeGenerationOptions opt);
    protected virtual void WriteBody(CodeWriter writer);
}
public class generator.SourceWriters.GetObjectMethod : MethodWriter {
    public GetObjectMethod(InterfaceGen iface, CodeGenerationOptions opt);
}
public class generator.SourceWriters.HandledProperty : PropertyWriter {
    public virtual void Write(CodeWriter writer);
}
public class generator.SourceWriters.IntDefinitionAttr : AttributeWriter {
    [CompilerGeneratedAttribute]
private string <ManagedMember>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JniField>k__BackingField;
    public string ManagedMember { get; public set; }
    public string JniField { get; public set; }
    public IntDefinitionAttr(string managedMember, string jniField);
    [CompilerGeneratedAttribute]
public string get_ManagedMember();
    [CompilerGeneratedAttribute]
public void set_ManagedMember(string value);
    [CompilerGeneratedAttribute]
public string get_JniField();
    [CompilerGeneratedAttribute]
public void set_JniField(string value);
    public virtual void WriteAttribute(CodeWriter writer);
}
public class generator.SourceWriters.InterfaceConstsClass : ClassWriter {
    public bool ShouldGenerate { get; }
    public InterfaceConstsClass(ClassGen klass, HashSet`1<string> seen, CodeGenerationOptions opt, CodeGeneratorContext context);
    public bool get_ShouldGenerate();
}
public class generator.SourceWriters.InterfaceConstsForwardClass : ClassWriter {
    public InterfaceConstsForwardClass(InterfaceGen iface, CodeGenerationOptions opt);
}
public class generator.SourceWriters.InterfaceEventArgsClass : ClassWriter {
    public InterfaceEventArgsClass(InterfaceGen iface, Method method);
    public void AddMembersFromMethod(InterfaceGen iface, Method method, CodeGenerationOptions opt);
    private void AddConstructor(InterfaceGen iface, Method method, CodeGenerationOptions opt);
    private void AddProperties(Method method, CodeGenerationOptions opt);
}
public class generator.SourceWriters.InterfaceEventHandlerImplClass : ClassWriter {
    public InterfaceEventHandlerImplClass(InterfaceGen iface, CodeGenerationOptions opt, CodeGeneratorContext context);
    private void AddConstructor(InterfaceGen iface);
    private void AddMethods(InterfaceGen iface, CodeGenerationOptions opt);
}
public class generator.SourceWriters.InterfaceEventHandlerImplMethod : MethodWriter {
    private InterfaceGen iface;
    private Method method;
    private CodeGenerationOptions opt;
    private bool needs_sender;
    private string method_spec;
    private string args_name;
    public InterfaceEventHandlerImplMethod(InterfaceGen iface, Method method, List`1<string> handlers, CodeGenerationOptions opt);
    protected virtual void WriteBody(CodeWriter writer);
    public virtual void Write(CodeWriter writer);
}
public class generator.SourceWriters.InterfaceExtensionsClass : ClassWriter {
    public bool ShouldGenerate { get; }
    public InterfaceExtensionsClass(InterfaceGen iface, string declaringTypeName, CodeGenerationOptions opt);
    public bool get_ShouldGenerate();
}
public class generator.SourceWriters.InterfaceHandleGetter : PropertyWriter {
}
public class generator.SourceWriters.InterfaceInvokerClass : ClassWriter {
    public InterfaceInvokerClass(InterfaceGen iface, CodeGenerationOptions opt, CodeGeneratorContext context);
    private void AddMemberInvokers(InterfaceGen iface, HashSet`1<string> members, HashSet`1<string> skipInvokers, CodeGenerationOptions opt, CodeGeneratorContext context);
    private void AddCharSequenceEnumerators(InterfaceGen iface);
    private void AddPropertyInvokers(InterfaceGen iface, IEnumerable`1<Property> properties, HashSet`1<string> members, CodeGenerationOptions opt, CodeGeneratorContext context);
    private void AddMethodInvokers(InterfaceGen iface, IEnumerable`1<Method> methods, HashSet`1<string> members, HashSet`1<string> skipInvokers, CodeGenerationOptions opt, CodeGeneratorContext context);
}
public class generator.SourceWriters.InterfaceInvokerConstructor : ConstructorWriter {
    public InterfaceInvokerConstructor(CodeGenerationOptions opt, InterfaceGen iface, CodeGeneratorContext context);
}
public class generator.SourceWriters.InterfaceInvokerMethod : MethodWriter {
    private MethodCallback method_callback;
    private Method method;
    private CodeGenerationOptions opt;
    private string context_this;
    public InterfaceInvokerMethod(InterfaceGen iface, Method method, CodeGenerationOptions opt, CodeGeneratorContext context);
    public virtual void Write(CodeWriter writer);
    protected virtual void WriteBody(CodeWriter writer);
}
public class generator.SourceWriters.InterfaceInvokerProperty : PropertyWriter {
    private MethodCallback getter_callback;
    private MethodCallback setter_callback;
    private Property property;
    private CodeGenerationOptions opt;
    private string context_this;
    public InterfaceInvokerProperty(InterfaceGen iface, Property property, CodeGenerationOptions opt, CodeGeneratorContext context);
    public virtual void Write(CodeWriter writer);
    protected virtual void WriteGetterBody(CodeWriter writer);
    protected virtual void WriteSetterBody(CodeWriter writer);
}
public class generator.SourceWriters.InterfaceListenerEvent : EventWriter {
    private InterfaceListenerEventHandlerHelper helper_method;
    public InterfaceListenerEvent(InterfaceGen iface, Method method, string name, string nameSpec, string fullDelegateName, string wrefSuffix, string add, string remove, bool hasHandlerArgument, CodeGenerationOptions opt);
    public virtual void Write(CodeWriter writer);
}
public class generator.SourceWriters.InterfaceListenerEventHandlerHelper : MethodWriter {
    public InterfaceListenerEventHandlerHelper(InterfaceGen iface, Method method, string add, CodeGenerationOptions opt);
}
public class generator.SourceWriters.InterfaceListenerProperty : PropertyWriter {
    public InterfaceListenerProperty(InterfaceGen iface, string name, string nameSpec, string methodName, string fullDelegateName, CodeGenerationOptions opt);
}
public class generator.SourceWriters.InterfaceListenerPropertyImplementor : PropertyWriter {
    private string name;
    private CodeGenerationOptions opt;
    public InterfaceListenerPropertyImplementor(InterfaceGen iface, string name, CodeGenerationOptions opt);
    public virtual void Write(CodeWriter writer);
}
public class generator.SourceWriters.InterfaceMemberAlternativeClass : ClassWriter {
    private List`1<TypeWriter> sibling_classes;
    public InterfaceMemberAlternativeClass(InterfaceGen iface, CodeGenerationOptions opt, CodeGeneratorContext context);
    private void AddMethods(InterfaceGen iface, bool shouldObsolete, CodeGenerationOptions opt);
    private bool AddFields(InterfaceGen iface, bool shouldObsolete, CodeGenerationOptions opt, CodeGeneratorContext context);
    private bool AddInterfaceFields(InterfaceGen iface, List`1<Field> fields, HashSet`1<string> seen, CodeGenerationOptions opt, CodeGeneratorContext context);
    private List`1<ValueTuple`3<Field, bool, string>> DeprecateFields(InterfaceGen iface, bool shouldObsolete);
    private void RestoreDeprecatedFields(List`1<ValueTuple`3<Field, bool, string>> fields);
    public virtual void Write(CodeWriter writer);
    public void WriteSiblingClasses(CodeWriter writer);
}
public class generator.SourceWriters.InterfaceThresholdClassGetter : PropertyWriter {
}
public class generator.SourceWriters.JavaLangObjectConstructor : ConstructorWriter {
    public JavaLangObjectConstructor(ClassGen klass, CodeGenerationOptions opt, string callPartialMethod);
}
public class generator.SourceWriters.JniPeerMembersGetter : PropertyWriter {
}
public class generator.SourceWriters.MethodAsyncWrapper : MethodWriter {
    private Method method;
    private CodeGenerationOptions opt;
    public MethodAsyncWrapper(Method method, CodeGenerationOptions opt);
}
public class generator.SourceWriters.MethodCallback : MethodWriter {
    private GenBase type;
    private Method method;
    private string property_name;
    private bool is_formatted;
    private CodeGenerationOptions opt;
    private FieldWriter delegate_field;
    private MethodWriter delegate_getter;
    public MethodCallback(GenBase type, Method method, CodeGenerationOptions options, string propertyName, bool isFormatted);
    protected virtual void WriteBody(CodeWriter writer);
    public virtual void Write(CodeWriter writer);
}
public class generator.SourceWriters.MethodCallbackDelegateField : FieldWriter {
    public MethodCallbackDelegateField(Method method, CodeGenerationOptions options);
}
public class generator.SourceWriters.MethodExplicitInterfaceImplementation : MethodWriter {
    private Method method;
    private CodeGenerationOptions opt;
    public MethodExplicitInterfaceImplementation(GenBase iface, Method method, CodeGenerationOptions opt);
    protected virtual void WriteBody(CodeWriter writer);
}
public class generator.SourceWriters.MethodExtensionAsyncWrapper : MethodWriter {
    public MethodExtensionAsyncWrapper(Method method, CodeGenerationOptions opt, string selfType);
}
public class generator.SourceWriters.ObsoleteAttr : AttributeWriter {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsError>k__BackingField;
    public string Message { get; public set; }
    public bool IsError { get; public set; }
    public ObsoleteAttr(string message, bool isError);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public bool get_IsError();
    [CompilerGeneratedAttribute]
public void set_IsError(bool value);
    public virtual void WriteAttribute(CodeWriter writer);
}
public class generator.SourceWriters.ObsoletedOSPlatformAttr : AttributeWriter {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    public string Message { get; public set; }
    public int Version { get; }
    public ObsoletedOSPlatformAttr(string message, int version);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public int get_Version();
    public virtual void WriteAttribute(CodeWriter writer);
}
public class generator.SourceWriters.PeerMembersField : FieldWriter {
    public PeerMembersField(CodeGenerationOptions opt, string rawJniType, string declaringType, bool isInterface);
}
public class generator.SourceWriters.RegisterAttr : AttributeWriter {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Connector>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoNotGenerateAcw>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseGlobal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseShortForm>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AcwLast>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MemberTypes> <MemberType>k__BackingField;
    public string Name { get; public set; }
    public string Signature { get; public set; }
    public string Connector { get; public set; }
    public bool DoNotGenerateAcw { get; public set; }
    public string AdditionalProperties { get; public set; }
    public bool UseGlobal { get; public set; }
    public bool UseShortForm { get; public set; }
    public bool AcwLast { get; public set; }
    public Nullable`1<MemberTypes> MemberType { get; public set; }
    public RegisterAttr(string name, string signature, string connector, bool noAcw, string additionalProperties);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(string value);
    [CompilerGeneratedAttribute]
public string get_Connector();
    [CompilerGeneratedAttribute]
public void set_Connector(string value);
    [CompilerGeneratedAttribute]
public bool get_DoNotGenerateAcw();
    [CompilerGeneratedAttribute]
public void set_DoNotGenerateAcw(bool value);
    [CompilerGeneratedAttribute]
public string get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(string value);
    [CompilerGeneratedAttribute]
public bool get_UseGlobal();
    [CompilerGeneratedAttribute]
public void set_UseGlobal(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseShortForm();
    [CompilerGeneratedAttribute]
public void set_UseShortForm(bool value);
    [CompilerGeneratedAttribute]
public bool get_AcwLast();
    [CompilerGeneratedAttribute]
public void set_AcwLast(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<MemberTypes> get_MemberType();
    [CompilerGeneratedAttribute]
public void set_MemberType(Nullable`1<MemberTypes> value);
    public virtual void WriteAttribute(CodeWriter writer);
    private void WriteJavaInterop1Attribute(CodeWriter writer);
}
public class generator.SourceWriters.RestrictToAttr : AttributeWriter {
    private bool is_type;
    public RestrictToAttr(bool isType);
    public virtual void WriteAttribute(CodeWriter writer);
}
[ExtensionAttribute]
public static class generator.SourceWriters.SourceWriterExtensions : object {
    public static void AddField(TypeWriter tw, GenBase type, Field field, CodeGenerationOptions opt);
    public static bool AddFields(TypeWriter tw, GenBase gen, List`1<Field> fields, HashSet`1<string> seen, CodeGenerationOptions opt, CodeGeneratorContext context);
    public static LocalizedMessage GetFieldCollisionMessage(GenBase gen, Field f);
    public static void AddInterfaceListenerEventsAndProperties(TypeWriter tw, InterfaceGen iface, ClassGen target, CodeGenerationOptions opt);
    public static void AddInterfaceListenerEventsAndProperties(TypeWriter tw, InterfaceGen iface, ClassGen target, string name, string connector_fmt, string add, string remove, CodeGenerationOptions opt, Method setListenerMethod);
    public static void AddInterfaceListenerEventOrProperty(TypeWriter tw, InterfaceGen iface, Method method, ClassGen target, string name, string connector_fmt, string add, string remove, CodeGenerationOptions opt, Method setListenerMethod);
    public static void AddMethodCustomAttributes(List`1<AttributeWriter> attributes, Method method);
    [ExtensionAttribute]
public static void AddMethodParameters(ITakeParameters method, ParameterList parameters, CodeGenerationOptions opt);
    [ExtensionAttribute]
public static void AddMethodParametersStringOverloads(MethodWriter method, ParameterList parameters, CodeGenerationOptions opt);
    public static string GetInvokeType(string type);
    public static void AddMethodBody(List`1<string> body, Method method, CodeGenerationOptions opt);
    public static void AddMethodBodyTryBlock(List`1<string> body, Method method, CodeGenerationOptions opt);
    public static void AddParameterListCallArgs(List`1<string> body, ParameterList parameters, CodeGenerationOptions opt, bool invoker);
    public static void AddSupportedOSPlatform(List`1<AttributeWriter> attributes, IApiAvailability member, CodeGenerationOptions opt);
    public static void AddSupportedOSPlatform(List`1<AttributeWriter> attributes, int since, CodeGenerationOptions opt);
    public static void AddObsolete(List`1<AttributeWriter> attributes, string message, CodeGenerationOptions opt, bool forceDeprecate, bool isError, Nullable`1<int> deprecatedSince);
    private static bool AddObsoletedOSPlatformAttribute(List`1<AttributeWriter> attributes, string message, Nullable`1<int> deprecatedSince, CodeGenerationOptions opt);
    public static void AddRestrictToWarning(List`1<AttributeWriter> attributes, string scope, bool isType, CodeGenerationOptions opt);
    public static void WriteMethodInvokerBody(CodeWriter writer, Method method, CodeGenerationOptions opt, string contextThis);
    public static void WriteParameterListCallArgs(CodeWriter writer, ParameterList parameters, CodeGenerationOptions opt, bool invoker);
    public static void WriteMethodStringOverloadBody(CodeWriter writer, Method method, CodeGenerationOptions opt, bool haveSelf);
    public static TypeWriter BuildManagedTypeModel(GenBase gen, CodeGenerationOptions opt, CodeGeneratorContext context, GenerationInfo genInfo);
    public static void WarnIfTypeNameMatchesNamespace(TypeWriter type, GenBase gen);
}
public class generator.SourceWriters.StringOverloadConstructor : BoundConstructor {
    public StringOverloadConstructor(ClassGen klass, Ctor constructor, bool useBase, CodeGenerationOptions opt, CodeGeneratorContext context);
}
public class generator.SourceWriters.SupportedOSPlatformAttr : AttributeWriter {
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    public int Version { get; }
    public SupportedOSPlatformAttr(int version);
    [CompilerGeneratedAttribute]
public int get_Version();
    public virtual void WriteAttribute(CodeWriter writer);
}
public class generator.SourceWriters.ThresholdTypeGetter : PropertyWriter {
}
public class generator.SourceWriters.ValidateMethod : MethodWriter {
    public ValidateMethod(InterfaceGen iface);
}
public class generator.SourceWriters.WeakImplementorField : FieldWriter {
    public WeakImplementorField(string name, CodeGenerationOptions opt);
}
[ExtensionAttribute]
internal static class generator.StringExtensions : object {
    [ExtensionAttribute]
public static bool HasValue(string s);
    [ExtensionAttribute]
public static string ChompLast(string s, char separator);
    [ExtensionAttribute]
public static string LastSubset(string s, char separator);
}
public static class Java.Interop.Tools.Generator.Transformation.JavadocFixups : object {
    public static void Fixup(List`1<GenBase> gens, CodeGeneratorOptions options);
    private static void AddJavadoc(GenBase type, Dictionary`2<string, XElement> typeJavadocs, XmldocStyle style);
    private static XElement GetMemberJavadoc(XElement typeJavadoc, string elementName, string name, string jniSignature);
}
public static class Java.Interop.Tools.Generator.Transformation.KotlinFixups : object {
    public static void Fixup(List`1<GenBase> gens);
    private static void FixupClass(ClassGen c);
    private static void FixupInterface(InterfaceGen gen);
    private static void FixMethodName(Method method);
}
public static class Java.Interop.Tools.Generator.Transformation.SealedProtectedFixups : object {
    public static void Fixup(List`1<GenBase> gens);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal enum MonoDroid.Generation.ApiLinkStyle : Enum {
    public int value__;
    public static ApiLinkStyle None;
    public static ApiLinkStyle DeveloperAndroidComReference_2020Nov;
}
public class MonoDroid.Generation.ApiTransform : object {
    [CompilerGeneratedAttribute]
private bool <PreserveType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Package>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Enum>k__BackingField;
    public bool PreserveType { get; public set; }
    public string Version { get; public set; }
    public string Package { get; public set; }
    public string Class { get; public set; }
    public string Member { get; public set; }
    public string Parameter { get; public set; }
    public string Enum { get; public set; }
    public ApiTransform(bool preserveType, String[] args);
    [CompilerGeneratedAttribute]
public bool get_PreserveType();
    [CompilerGeneratedAttribute]
public void set_PreserveType(bool value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Package();
    [CompilerGeneratedAttribute]
public void set_Package(string value);
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(string value);
    [CompilerGeneratedAttribute]
public string get_Member();
    [CompilerGeneratedAttribute]
public void set_Member(string value);
    [CompilerGeneratedAttribute]
public string get_Parameter();
    [CompilerGeneratedAttribute]
public void set_Parameter(string value);
    [CompilerGeneratedAttribute]
public string get_Enum();
    [CompilerGeneratedAttribute]
public void set_Enum(string value);
    public void WriteTransform(StreamWriter sw);
}
public static class MonoDroid.Generation.ApiVersionsSupport : object {
    [IteratorStateMachineAttribute("MonoDroid.Generation.ApiVersionsSupport/<FlattenGens>d__1")]
private static IEnumerable`1<GenBase> FlattenGens(IEnumerable`1<GenBase> gens);
    public static void AssignApiLevels(IList`1<GenBase> gens, string apiVersionsXml);
    [IteratorStateMachineAttribute("MonoDroid.Generation.ApiVersionsSupport/<GetAllMethods>d__3")]
private static IEnumerable`1<Method> GetAllMethods(GenBase g);
}
public class MonoDroid.Generation.ArraySymbol : object {
    private static ISymbol byte_sym;
    private ISymbol sym;
    private bool is_params;
    private CodeGenerationTarget target;
    public string DefaultValue { get; }
    public string ElementType { get; }
    public string FullName { get; }
    public bool IsGeneric { get; }
    public bool IsParams { get; public set; }
    public string JavaName { get; }
    public string JniName { get; }
    public string NativeType { get; }
    public bool IsEnum { get; }
    public bool IsArray { get; }
    public string ReturnCast { get; }
    public bool NeedsPrep { get; }
    public ArraySymbol(ISymbol sym, CodeGenerationTarget target);
    private static ArraySymbol();
    public sealed virtual string get_DefaultValue();
    public sealed virtual string get_ElementType();
    public sealed virtual string get_FullName();
    public bool get_IsGeneric();
    public bool get_IsParams();
    public void set_IsParams(bool value);
    public sealed virtual string get_JavaName();
    public sealed virtual string get_JniName();
    public sealed virtual string get_NativeType();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsArray();
    public sealed virtual string get_ReturnCast();
    public sealed virtual string GetObjectHandleProperty(CodeGenerationOptions opt, string variable);
    public sealed virtual string GetGenericType(Dictionary`2<string, string> mappings);
    public sealed virtual string FromNative(CodeGenerationOptions opt, string var_name, bool owned);
    public sealed virtual string ToNative(CodeGenerationOptions opt, string var_name, Dictionary`2<string, string> mappings);
    public sealed virtual bool Validate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
    public sealed virtual string Call(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PostCallback(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PostCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PreCallback(CodeGenerationOptions opt, string var_name, bool owned);
    public sealed virtual String[] PreCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual bool get_NeedsPrep();
    private string GetJavaInterop1MarshalMethod();
    private string GetJavaInterop1MarshalType();
}
internal class MonoDroid.Generation.CecilApiImporter : object {
    public static ClassGen CreateClass(TypeDefinition t, CodeGenerationOptions opt);
    public static Ctor CreateCtor(GenBase declaringType, MethodDefinition m);
    public static Field CreateField(FieldDefinition f);
    public static GenBaseSupport CreateGenBaseSupport(TypeDefinition t, CodeGenerationOptions opt);
    public static InterfaceGen CreateInterface(TypeDefinition t, CodeGenerationOptions opt);
    public static Method CreateMethod(GenBase declaringType, MethodDefinition m);
    public static Parameter CreateParameter(ParameterDefinition p, string jnitype, string rawtype, bool isNotNull);
    public static Parameter CreateParameter(string managedType, string javaType);
    private static CustomAttribute GetJavaDefaultInterfaceMethodAttribute(Collection`1<CustomAttribute> attributes);
    private static CustomAttribute GetGeneratedEnumAttribute(Collection`1<CustomAttribute> attributes);
    private static CustomAttribute GetObsoleteAttribute(Collection`1<CustomAttribute> attributes);
    private static string GetObsoleteComment(CustomAttribute attribute);
    private static CustomAttribute GetRegisterAttribute(Collection`1<CustomAttribute> attributes);
    private static bool IsDefaultInterfaceMethod(GenBase declaringType, MethodDefinition method);
}
public class MonoDroid.Generation.CharSequenceSymbol : object {
    public string DefaultValue { get; }
    public string FullName { get; }
    public bool IsGeneric { get; }
    public string JavaName { get; }
    public string JniName { get; }
    public string NativeType { get; }
    public bool IsEnum { get; }
    public bool IsArray { get; }
    public string ElementType { get; }
    public string ReturnCast { get; }
    public bool NeedsPrep { get; }
    public sealed virtual string get_DefaultValue();
    public sealed virtual string get_FullName();
    public bool get_IsGeneric();
    public sealed virtual string get_JavaName();
    public sealed virtual string get_JniName();
    public sealed virtual string get_NativeType();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsArray();
    public sealed virtual string get_ElementType();
    public sealed virtual string get_ReturnCast();
    public sealed virtual string GetObjectHandleProperty(CodeGenerationOptions opt, string variable);
    public sealed virtual string GetGenericType(Dictionary`2<string, string> mappings);
    public sealed virtual string FromNative(CodeGenerationOptions opt, string var_name, bool owned);
    public sealed virtual string ToNative(CodeGenerationOptions opt, string var_name, Dictionary`2<string, string> mappings);
    public sealed virtual bool Validate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
    public sealed virtual string Call(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PostCallback(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PostCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PreCallback(CodeGenerationOptions opt, string var_name, bool owned);
    public sealed virtual String[] PreCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual bool get_NeedsPrep();
}
public class MonoDroid.Generation.ClassGen : GenBase {
    private bool fill_explicit_implementation_started;
    [CompilerGeneratedAttribute]
private List`1<Ctor> <Ctors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ExplicitlyImplementedInterfaceMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FromXml>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InheritsObject>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAbstract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFinal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedsNew>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PeerConstructorPartialMethod>k__BackingField;
    public List`1<Ctor> Ctors { get; private set; }
    public ClassGen BaseGen { get; }
    public string BaseType { get; public set; }
    public List`1<string> ExplicitlyImplementedInterfaceMethods { get; }
    public bool FromXml { get; public set; }
    public bool InheritsObject { get; public set; }
    public bool IsAbstract { get; public set; }
    public bool IsFinal { get; public set; }
    public bool NeedsNew { get; public set; }
    public string PeerConstructorPartialMethod { get; public set; }
    public ClassGen(GenBaseSupport support);
    [CompilerGeneratedAttribute]
public List`1<Ctor> get_Ctors();
    [CompilerGeneratedAttribute]
private void set_Ctors(List`1<Ctor> value);
    private static void AddNestedInterfaceTypes(GenBase type, List`1<InterfaceExtensionInfo> nestedInterfaces);
    public virtual ClassGen get_BaseGen();
    [CompilerGeneratedAttribute]
public string get_BaseType();
    [CompilerGeneratedAttribute]
public void set_BaseType(string value);
    public bool ContainsCtor(string jni_sig);
    public bool ContainsNestedType(GenBase gen);
    [CompilerGeneratedAttribute]
public List`1<string> get_ExplicitlyImplementedInterfaceMethods();
    public virtual void FixupAccessModifiers(CodeGenerationOptions opt);
    public virtual void FixupExplicitImplementation();
    public virtual string FromNative(CodeGenerationOptions opt, string varname, bool owned);
    [CompilerGeneratedAttribute]
public bool get_FromXml();
    [CompilerGeneratedAttribute]
public void set_FromXml(bool value);
    public virtual void Generate(CodeGenerationOptions opt, GenerationInfo gen_info);
    public static void GenerateEnumList(GenerationInfo gen_info);
    public static void GenerateTypeRegistrations(CodeGenerationOptions opt, GenerationInfo gen_info);
    private static void WriteAutoGeneratedHeader(StreamWriter sw);
    protected virtual bool GetEnumMappedMemberInfo();
    internal IEnumerable`1<InterfaceExtensionInfo> GetNestedInterfaceTypes();
    [CompilerGeneratedAttribute]
public bool get_InheritsObject();
    [CompilerGeneratedAttribute]
public void set_InheritsObject(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAbstract();
    [CompilerGeneratedAttribute]
public void set_IsAbstract(bool value);
    public bool IsExplicitlyImplementedMethod(string sig);
    [CompilerGeneratedAttribute]
public bool get_IsFinal();
    [CompilerGeneratedAttribute]
public void set_IsFinal(bool value);
    [CompilerGeneratedAttribute]
public bool get_NeedsNew();
    [CompilerGeneratedAttribute]
public void set_NeedsNew(bool value);
    [CompilerGeneratedAttribute]
public string get_PeerConstructorPartialMethod();
    [CompilerGeneratedAttribute]
public void set_PeerConstructorPartialMethod(string value);
    protected virtual bool OnValidate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
    public virtual void ResetValidation();
    public virtual string ToNative(CodeGenerationOptions opt, string varname, Dictionary`2<string, string> mappings);
    public virtual void UpdateEnumsInInterfaceImplementation();
    [CompilerGeneratedAttribute]
private bool <FixupExplicitImplementation>b__19_0(Method m);
}
public class MonoDroid.Generation.CodeGenerationOptions : object {
    private CodeGenerationTarget codeGenerationTarget;
    private SymbolTable symbolTable;
    private SortedSet`1<string> jni_marshal_delegates;
    private object jni_marshal_delegates_lock;
    [CompilerGeneratedAttribute]
private string <ApiXmlFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseGlobal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreNonPublicType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseShortFileNames>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProductVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportInterfaceConstants>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportDefaultInterfaceMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportNestedInterfaceTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportNullableReferenceTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseShallowReferencedTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseObsoletedOSPlatformAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseRestrictToAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FixObsoleteOverrides>k__BackingField;
    private Nullable`1<bool> buildingCoreAssembly;
    [CompilerGeneratedAttribute]
private List`1<NamespaceTransform> <NamespaceTransforms>k__BackingField;
    private Dictionary`2<string, string> short_file_names;
    public CodeGenerationTarget CodeGenerationTarget { get; public set; }
    public SymbolTable SymbolTable { get; }
    public string ApiXmlFile { get; public set; }
    public bool UseGlobal { get; public set; }
    public bool IgnoreNonPublicType { get; public set; }
    public string AssemblyName { get; public set; }
    public bool UseShortFileNames { get; public set; }
    public int ProductVersion { get; public set; }
    public bool SupportInterfaceConstants { get; public set; }
    public bool SupportDefaultInterfaceMethods { get; public set; }
    public bool SupportNestedInterfaceTypes { get; public set; }
    public bool SupportNullableReferenceTypes { get; public set; }
    public bool UseShallowReferencedTypes { get; public set; }
    public bool UseObsoletedOSPlatformAttributes { get; public set; }
    public bool UseRestrictToAttributes { get; public set; }
    public bool FixObsoleteOverrides { get; public set; }
    public bool RemoveConstSugar { get; }
    public bool BuildingCoreAssembly { get; }
    public string NullableOperator { get; }
    public string NullForgivingOperator { get; }
    public List`1<NamespaceTransform> NamespaceTransforms { get; }
    public CodeGenerationTarget get_CodeGenerationTarget();
    public void set_CodeGenerationTarget(CodeGenerationTarget value);
    internal JavaInteropCodeGenerator CreateCodeGenerator(TextWriter writer);
    public SymbolTable get_SymbolTable();
    [CompilerGeneratedAttribute]
public string get_ApiXmlFile();
    [CompilerGeneratedAttribute]
public void set_ApiXmlFile(string value);
    [CompilerGeneratedAttribute]
public bool get_UseGlobal();
    [CompilerGeneratedAttribute]
public void set_UseGlobal(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreNonPublicType();
    [CompilerGeneratedAttribute]
public void set_IgnoreNonPublicType(bool value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public bool get_UseShortFileNames();
    [CompilerGeneratedAttribute]
public void set_UseShortFileNames(bool value);
    [CompilerGeneratedAttribute]
public int get_ProductVersion();
    [CompilerGeneratedAttribute]
public void set_ProductVersion(int value);
    [CompilerGeneratedAttribute]
public bool get_SupportInterfaceConstants();
    [CompilerGeneratedAttribute]
public void set_SupportInterfaceConstants(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportDefaultInterfaceMethods();
    [CompilerGeneratedAttribute]
public void set_SupportDefaultInterfaceMethods(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportNestedInterfaceTypes();
    [CompilerGeneratedAttribute]
public void set_SupportNestedInterfaceTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportNullableReferenceTypes();
    [CompilerGeneratedAttribute]
public void set_SupportNullableReferenceTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseShallowReferencedTypes();
    [CompilerGeneratedAttribute]
public void set_UseShallowReferencedTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseObsoletedOSPlatformAttributes();
    [CompilerGeneratedAttribute]
public void set_UseObsoletedOSPlatformAttributes(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseRestrictToAttributes();
    [CompilerGeneratedAttribute]
public void set_UseRestrictToAttributes(bool value);
    [CompilerGeneratedAttribute]
public bool get_FixObsoleteOverrides();
    [CompilerGeneratedAttribute]
public void set_FixObsoleteOverrides(bool value);
    public bool get_RemoveConstSugar();
    public bool get_BuildingCoreAssembly();
    public string get_NullableOperator();
    public string get_NullForgivingOperator();
    [CompilerGeneratedAttribute]
public List`1<NamespaceTransform> get_NamespaceTransforms();
    public string GetTypeReferenceName(Field field);
    public string GetTypeReferenceName(Parameter symbol);
    public string GetTypeReferenceName(ReturnValue symbol);
    public string GetTypeReferenceName(Property symbol);
    public string GetNullForgiveness(Field field);
    public string GetNullForgiveness(ReturnValue symbol);
    public string GetNullForgiveness(Parameter symbol);
    private string GetNullable(string s);
    internal string GetJniMarshalDelegate(Method method);
    private string GetJniTypeCode(ISymbol symbol);
    internal IEnumerable`1<string> GetJniMarshalDelegates();
    public string GetOutputName(string type);
    public string GetSafeIdentifier(string name);
    public string GetFileName(string fullName);
    public string GetTransformedNamespace(string value);
    public string GetStringArrayToCharSequenceArrayMethodName();
}
public class MonoDroid.Generation.CodeGeneratorContext : object {
    [CompilerGeneratedAttribute]
private Stack`1<GenBase> <ContextTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Method> <ContextGeneratedMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private Field <ContextField>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodBase <ContextMethod>k__BackingField;
    public Stack`1<GenBase> ContextTypes { get; }
    public List`1<Method> ContextGeneratedMethods { get; public set; }
    public Field ContextField { get; public set; }
    public MethodBase ContextMethod { get; public set; }
    public GenBase ContextType { get; }
    private string ContextFieldString { get; }
    private string ContextMethodString { get; }
    private string ContextTypeString { get; }
    public string ContextString { get; }
    [CompilerGeneratedAttribute]
public Stack`1<GenBase> get_ContextTypes();
    [CompilerGeneratedAttribute]
public List`1<Method> get_ContextGeneratedMethods();
    [CompilerGeneratedAttribute]
public void set_ContextGeneratedMethods(List`1<Method> value);
    [CompilerGeneratedAttribute]
public Field get_ContextField();
    [CompilerGeneratedAttribute]
public void set_ContextField(Field value);
    [CompilerGeneratedAttribute]
public MethodBase get_ContextMethod();
    [CompilerGeneratedAttribute]
public void set_ContextMethod(MethodBase value);
    public GenBase get_ContextType();
    private string get_ContextFieldString();
    private string get_ContextMethodString();
    private string get_ContextTypeString();
    public string get_ContextString();
    public string GetContextTypeMember();
}
public class MonoDroid.Generation.CollectionSymbol : object {
    private string java_name;
    private string managed_name;
    private string marshaler;
    private GenericParameterList parms;
    public string DefaultValue { get; }
    public string FullName { get; }
    public string JavaName { get; }
    public string JniName { get; }
    public string NativeType { get; }
    public bool IsEnum { get; }
    public bool IsArray { get; }
    public string ElementType { get; }
    public bool MayHaveManagedGenericArguments { get; }
    public string ReturnCast { get; }
    public bool NeedsPrep { get; }
    public CollectionSymbol(string java_name, string managed_name, string marshaler, string type_params);
    public sealed virtual string get_DefaultValue();
    public sealed virtual string get_FullName();
    public sealed virtual string get_JavaName();
    public sealed virtual string get_JniName();
    public sealed virtual string get_NativeType();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsArray();
    public sealed virtual string get_ElementType();
    public sealed virtual bool get_MayHaveManagedGenericArguments();
    public sealed virtual string get_ReturnCast();
    public sealed virtual string GetObjectHandleProperty(CodeGenerationOptions opt, string variable);
    public sealed virtual string GetGenericType(Dictionary`2<string, string> mappings);
    public sealed virtual string FromNative(CodeGenerationOptions opt, string varname, bool owned);
    private string GetManagedTypeName(CodeGenerationOptions opt);
    public sealed virtual string ToNative(CodeGenerationOptions opt, string varname, Dictionary`2<string, string> mappings);
    public sealed virtual bool Validate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
    public sealed virtual String[] PreCallback(CodeGenerationOptions opt, string var_name, bool owned);
    public sealed virtual String[] PostCallback(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PreCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual string Call(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PostCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual bool get_NeedsPrep();
    public sealed virtual string GetGenericJavaObjectTypeOverride();
    public sealed virtual string ToInteroperableJavaObject(string var_name);
}
public class MonoDroid.Generation.ColorSymbol : SimpleSymbol {
}
public class MonoDroid.Generation.CsvParser : object {
    private String[] fields;
    public CsvParser(string line);
    public string GetField(int index);
    public int GetFieldAsInt(int index);
}
public class MonoDroid.Generation.Ctor : MethodBase {
    [CompilerGeneratedAttribute]
private string <CustomAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNonStaticNestedType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JniSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MissingEnclosingClass>k__BackingField;
    public string CustomAttributes { get; public set; }
    public bool IsNonStaticNestedType { get; public set; }
    public string JniSignature { get; private set; }
    public bool MissingEnclosingClass { get; public set; }
    public string ID { get; }
    public Ctor(GenBase declaringType);
    [CompilerGeneratedAttribute]
public string get_CustomAttributes();
    [CompilerGeneratedAttribute]
public void set_CustomAttributes(string value);
    [CompilerGeneratedAttribute]
public bool get_IsNonStaticNestedType();
    [CompilerGeneratedAttribute]
public void set_IsNonStaticNestedType(bool value);
    [CompilerGeneratedAttribute]
public string get_JniSignature();
    [CompilerGeneratedAttribute]
private void set_JniSignature(string value);
    [CompilerGeneratedAttribute]
public bool get_MissingEnclosingClass();
    [CompilerGeneratedAttribute]
public void set_MissingEnclosingClass(bool value);
    public string get_ID();
    protected virtual bool OnValidate(CodeGenerationOptions opt, GenericParameterDefinitionList tps, CodeGeneratorContext context);
}
internal class MonoDroid.Generation.EnumGenerator : object {
    protected TextWriter sw;
    private WeakReference cache_found_class;
    public EnumGenerator(TextWriter writer);
    public void WriteEnumeration(CodeGenerationOptions opt, KeyValuePair`2<string, EnumDescription> enu, GenBase[] gens);
    private EnumWriter CreateWriter(CodeGenerationOptions opt, KeyValuePair`2<string, EnumDescription> enu, GenBase[] gens);
    private Nullable`1<ValueTuple`2<GenBase, Field>> FindManagedMember(EnumDescription desc, ConstantEntry constant, IEnumerable`1<GenBase> gens);
    internal void ParseJniMember(string jniMember, String& package, String& type, String& member);
    private static void DoParseJniMember(string jniMember, String& package, String& type, String& member);
    private string StripExtraInterfaceSpec(string jniFieldSpec);
}
internal class MonoDroid.Generation.EnumMappings : object {
    private string output_dir;
    private string output_metadata;
    private List`1<KeyValuePair`2<string, string>> remove_nodes;
    private int version;
    private bool fix_constants_instead_of_removing;
    private Dictionary`2<string, string> file_name_map;
    public EnumMappings(string outputDir, string outputMetadata, string version, bool fixConstantsInsteadOfRemove);
    internal Dictionary`2<string, EnumDescription> Process(string fieldMap, string flagsFile, string methodMap);
    private void RemoveOldConstants(StreamWriter sw);
    private void FixOldConstants(StreamWriter sw);
    internal Dictionary`2<string, EnumDescription> ParseXmlFieldMappings(string csv, int filter_version, IList`1<KeyValuePair`2<string, string>> remove_nodes);
    internal Dictionary`2<string, EnumDescription> ParseFieldMappings(string csv, string flagsFile, int filter_version, IList`1<KeyValuePair`2<string, string>> remove_nodes);
    internal Dictionary`2<string, EnumDescription> ParseFieldMappings(TextReader source, String[] enumFlags, int filter_version, IList`1<KeyValuePair`2<string, string>> remove_nodes);
    internal void ParseJniMember(string jniMember, String& package, String& type, String& member);
    private static void DoParseJniMember(string jniMember, String& package, String& type, String& member);
    internal List`1<string> WriteEnumerations(string output_dir, Dictionary`2<string, EnumDescription> enums, GenBase[] gens, CodeGenerationOptions opt);
    private string GetFileName(string file, bool useShortFileNames);
    internal void WriteEnumerationRegistrations(StreamWriter sw, Dictionary`2<string, EnumDescription> enums);
    private StringReader MethodXmlToCsv(string file);
    internal List`1<ApiTransform> ParseXmlMethodMappings(string file, int filter_version);
    internal List`1<ApiTransform> ParseMethodMappings(string file, int filter_version);
    internal List`1<ApiTransform> ParseMethodMappings(TextReader source, int filter_version);
    internal static bool IsXml(string file);
    internal static TextReader FieldXmlToCsv(string file);
    internal static TextReader FieldXmlToCsv(XDocument doc);
    private static string GetMandatoryAttribute(XElement e, string name);
}
public class MonoDroid.Generation.EnumSymbol : object {
    private string type;
    public string DefaultValue { get; }
    public string FullName { get; }
    public string JavaName { get; }
    public string JniName { get; }
    public string NativeType { get; }
    public bool IsEnum { get; }
    public bool IsArray { get; }
    public string ElementType { get; }
    public string ReturnCast { get; }
    public bool NeedsPrep { get; }
    public EnumSymbol(string type);
    public sealed virtual string get_DefaultValue();
    public sealed virtual string get_FullName();
    public sealed virtual string get_JavaName();
    public sealed virtual string get_JniName();
    public sealed virtual string get_NativeType();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsArray();
    public sealed virtual string get_ElementType();
    public sealed virtual string get_ReturnCast();
    public sealed virtual string GetObjectHandleProperty(CodeGenerationOptions opt, string variable);
    public sealed virtual string GetGenericType(Dictionary`2<string, string> mappings);
    public sealed virtual string FromNative(CodeGenerationOptions opt, string varname, bool owned);
    public sealed virtual string ToNative(CodeGenerationOptions opt, string varname, Dictionary`2<string, string> mappings);
    public sealed virtual bool Validate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
    public sealed virtual String[] PreCallback(CodeGenerationOptions opt, string var_name, bool owned);
    public sealed virtual String[] PostCallback(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PreCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual string Call(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PostCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual bool get_NeedsPrep();
}
public class MonoDroid.Generation.Field : object {
    [CompilerGeneratedAttribute]
private string <AnnotatedVisibility>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Annotation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ApiAvailableSince>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeprecatedComment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DeprecatedSince>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAcw>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeprecated>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeprecatedError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnumified>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFinal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStatic>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterList <SetParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ISymbol <Symbol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotNull>k__BackingField;
    [CompilerGeneratedAttribute]
private Parameter <SetterParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Visibility>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JniSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private JavadocInfo <JavadocInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFile>k__BackingField;
    private static HashSet`1<string> primitive_types;
    public string AnnotatedVisibility { get; public set; }
    public string Annotation { get; public set; }
    public int ApiAvailableSince { get; public set; }
    public string DeprecatedComment { get; public set; }
    public Nullable`1<int> DeprecatedSince { get; public set; }
    public bool IsAcw { get; public set; }
    public bool IsDeprecated { get; public set; }
    public bool IsDeprecatedError { get; public set; }
    public bool IsEnumified { get; public set; }
    public bool IsFinal { get; public set; }
    public bool IsStatic { get; public set; }
    public ParameterList SetParameters { get; private set; }
    public ISymbol Symbol { get; private set; }
    public string JavaName { get; public set; }
    public string Name { get; public set; }
    public bool NotNull { get; public set; }
    public Parameter SetterParameter { get; public set; }
    public string TypeName { get; public set; }
    public string Value { get; public set; }
    public string Visibility { get; public set; }
    public string JniSignature { get; public set; }
    public JavadocInfo JavadocInfo { get; public set; }
    public int LineNumber { get; public set; }
    public int LinePosition { get; public set; }
    public string SourceFile { get; public set; }
    internal string GetMethodPrefix { get; }
    internal string ID { get; }
    public bool IsConst { get; }
    public bool NeedsProperty { get; }
    private static Field();
    [CompilerGeneratedAttribute]
public string get_AnnotatedVisibility();
    [CompilerGeneratedAttribute]
public void set_AnnotatedVisibility(string value);
    [CompilerGeneratedAttribute]
public string get_Annotation();
    [CompilerGeneratedAttribute]
public void set_Annotation(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ApiAvailableSince();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ApiAvailableSince(int value);
    [CompilerGeneratedAttribute]
public string get_DeprecatedComment();
    [CompilerGeneratedAttribute]
public void set_DeprecatedComment(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_DeprecatedSince();
    [CompilerGeneratedAttribute]
public void set_DeprecatedSince(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_IsAcw();
    [CompilerGeneratedAttribute]
public void set_IsAcw(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDeprecated();
    [CompilerGeneratedAttribute]
public void set_IsDeprecated(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDeprecatedError();
    [CompilerGeneratedAttribute]
public void set_IsDeprecatedError(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEnumified();
    [CompilerGeneratedAttribute]
public void set_IsEnumified(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsFinal();
    [CompilerGeneratedAttribute]
public void set_IsFinal(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsStatic();
    [CompilerGeneratedAttribute]
public void set_IsStatic(bool value);
    [CompilerGeneratedAttribute]
public ParameterList get_SetParameters();
    [CompilerGeneratedAttribute]
private void set_SetParameters(ParameterList value);
    [CompilerGeneratedAttribute]
public ISymbol get_Symbol();
    [CompilerGeneratedAttribute]
private void set_Symbol(ISymbol value);
    [CompilerGeneratedAttribute]
public string get_JavaName();
    [CompilerGeneratedAttribute]
public void set_JavaName(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_NotNull();
    [CompilerGeneratedAttribute]
public void set_NotNull(bool value);
    [CompilerGeneratedAttribute]
public Parameter get_SetterParameter();
    [CompilerGeneratedAttribute]
public void set_SetterParameter(Parameter value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Visibility();
    [CompilerGeneratedAttribute]
public void set_Visibility(string value);
    [CompilerGeneratedAttribute]
public string get_JniSignature();
    [CompilerGeneratedAttribute]
public void set_JniSignature(string value);
    [CompilerGeneratedAttribute]
public JavadocInfo get_JavadocInfo();
    [CompilerGeneratedAttribute]
public void set_JavadocInfo(JavadocInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LineNumber();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LinePosition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LinePosition(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SourceFile();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceFile(string value);
    internal string get_GetMethodPrefix();
    internal string get_ID();
    public bool get_IsConst();
    public bool get_NeedsProperty();
    public bool Validate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
}
public class MonoDroid.Generation.FormatSymbol : object {
    private string default_value;
    private string from_fmt;
    private string java_type;
    private string jni_type;
    private string native_type;
    private string to_fmt;
    private string type;
    private string return_cast;
    public string DefaultValue { get; }
    public string FullName { get; }
    public string FullOutputName { get; }
    public string JavaName { get; }
    public string JniName { get; }
    public string NativeType { get; }
    public bool IsEnum { get; }
    public bool IsArray { get; }
    public string ElementType { get; }
    public string ReturnCast { get; }
    public bool NeedsPrep { get; }
    public FormatSymbol(string default_value, string java_type, string jni_type, string native_type, string type, string from_fmt, string to_fmt, string returnCast);
    public sealed virtual string get_DefaultValue();
    public sealed virtual string get_FullName();
    public string get_FullOutputName();
    public sealed virtual string get_JavaName();
    public sealed virtual string get_JniName();
    public sealed virtual string get_NativeType();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsArray();
    public sealed virtual string get_ElementType();
    public sealed virtual string get_ReturnCast();
    public sealed virtual string GetObjectHandleProperty(CodeGenerationOptions opt, string variable);
    public sealed virtual string GetGenericType(Dictionary`2<string, string> mappings);
    public sealed virtual string FromNative(CodeGenerationOptions opt, string varname, bool owned);
    public sealed virtual string ToNative(CodeGenerationOptions opt, string varname, Dictionary`2<string, string> mappings);
    public sealed virtual bool Validate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
    public sealed virtual String[] PreCallback(CodeGenerationOptions opt, string var_name, bool owned);
    public sealed virtual String[] PostCallback(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PreCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual string Call(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PostCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual bool get_NeedsPrep();
}
public abstract class MonoDroid.Generation.GenBase : object {
    private bool enum_updated;
    private bool property_filled;
    private bool property_filling;
    protected internal ISymbol base_symbol;
    protected bool iface_validation_failed;
    protected GenBaseSupport support;
    protected bool validated;
    private List`1<string> implemented_interfaces;
    private Dictionary`2<string, Method> jni_sig_hash;
    private Dictionary`2<string, Property> prop_hash;
    [CompilerGeneratedAttribute]
private List`1<Field> <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ISymbol> <Interfaces>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Method> <Methods>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<GenBase> <NestedTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Property> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasVirtualMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private JavadocInfo <JavadocInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsShallow>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <PopulateAction>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ApiAvailableSince>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MethodValidationFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NativeType>k__BackingField;
    private static HashSet`1<string> ObjectRequiresNew;
    private static HashSet`1<string> ThrowableRequiresNew;
    [CompilerGeneratedAttribute]
private bool <Unnest>k__BackingField;
    public List`1<Field> Fields { get; private set; }
    public List`1<ISymbol> Interfaces { get; }
    public List`1<Method> Methods { get; private set; }
    public List`1<GenBase> NestedTypes { get; private set; }
    public List`1<Property> Properties { get; }
    public string DefaultValue { get; public set; }
    public bool HasVirtualMethods { get; public set; }
    public int LineNumber { get; public set; }
    public int LinePosition { get; public set; }
    public string SourceFile { get; public set; }
    public string ReturnCast { get; }
    public JavadocInfo JavadocInfo { get; public set; }
    internal bool IsShallow { get; internal set; }
    internal Action PopulateAction { get; internal set; }
    public string AnnotatedVisibility { get; }
    public string AssemblyQualifiedName { get; }
    public int ApiAvailableSince { get; public set; }
    public ClassGen BaseGen { get; }
    public GenBase BaseSymbol { get; }
    public string DeprecatedComment { get; }
    public Nullable`1<int> DeprecatedSince { get; }
    public string ElementType { get; public set; }
    public string FullName { get; public set; }
    public bool HasEnumMappedMembers { get; }
    public bool IsAcw { get; }
    public bool IsAnnotation { get; }
    public bool IsArray { get; }
    public bool IsDeprecated { get; }
    public bool IsEnum { get; }
    public bool IsGeneratable { get; }
    public bool IsGeneric { get; }
    public bool IsObfuscated { get; }
    public IEnumerable`1<string> ImplementedInterfaces { get; }
    public bool IsValid { get; public set; }
    public string JavaName { get; }
    public string JavaSimpleName { get; }
    public string JniName { get; }
    public string MetadataXPathReference { get; }
    public bool MethodValidationFailed { get; public set; }
    public string Name { get; public set; }
    public string Namespace { get; }
    public string NativeType { get; public set; }
    public bool NeedsPrep { get; }
    public string PackageName { get; public set; }
    public string RawJniName { get; }
    public string RawVisibility { get; }
    public bool ShouldGenerateAnnotationAttribute { get; }
    public HashSet`1<string> SkippedInvokerMethods { get; }
    public string TypeNamePrefix { get; }
    public GenericParameterDefinitionList TypeParameters { get; }
    public bool Unnest { get; public set; }
    public string Visibility { get; public set; }
    protected GenBase(GenBaseSupport support);
    private static GenBase();
    [CompilerGeneratedAttribute]
public List`1<Field> get_Fields();
    [CompilerGeneratedAttribute]
private void set_Fields(List`1<Field> value);
    [CompilerGeneratedAttribute]
public List`1<ISymbol> get_Interfaces();
    [CompilerGeneratedAttribute]
public List`1<Method> get_Methods();
    [CompilerGeneratedAttribute]
private void set_Methods(List`1<Method> value);
    [CompilerGeneratedAttribute]
public List`1<GenBase> get_NestedTypes();
    [CompilerGeneratedAttribute]
private void set_NestedTypes(List`1<GenBase> value);
    [CompilerGeneratedAttribute]
public List`1<Property> get_Properties();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public bool get_HasVirtualMethods();
    [CompilerGeneratedAttribute]
public void set_HasVirtualMethods(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LineNumber();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LinePosition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LinePosition(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SourceFile();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceFile(string value);
    public sealed virtual string get_ReturnCast();
    [CompilerGeneratedAttribute]
public JavadocInfo get_JavadocInfo();
    [CompilerGeneratedAttribute]
public void set_JavadocInfo(JavadocInfo value);
    [CompilerGeneratedAttribute]
internal bool get_IsShallow();
    [CompilerGeneratedAttribute]
internal void set_IsShallow(bool value);
    [CompilerGeneratedAttribute]
internal Action get_PopulateAction();
    [CompilerGeneratedAttribute]
internal void set_PopulateAction(Action value);
    public void AddField(Field f);
    public void AddImplementedInterface(string name);
    public void AddMethod(Method m);
    public virtual void AddNestedType(GenBase gen);
    private void AdjustNestedTypeFullName(GenBase parent);
    private void AddPropertyAccessors();
    [IteratorStateMachineAttribute("MonoDroid.Generation.GenBase/<Ancestors>d__69")]
private IEnumerable`1<GenBase> Ancestors();
    public string get_AnnotatedVisibility();
    public string get_AssemblyQualifiedName();
    [CompilerGeneratedAttribute]
public sealed virtual int get_ApiAvailableSince();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ApiAvailableSince(int value);
    public virtual ClassGen get_BaseGen();
    public GenBase get_BaseSymbol();
    public sealed virtual string Call(CodeGenerationOptions opt, string var_name);
    private bool CanMethodBeIsStyleSetter(Method m);
    public bool ContainsMethod(string name_and_jnisig);
    public bool ContainsMethod(Method method, bool check_ifaces);
    public bool ContainsMethod(Method method, bool check_ifaces, bool check_base_ifaces);
    public bool ContainsName(string name);
    public bool ContainsProperty(string name, bool check_ifaces);
    public bool ContainsProperty(string name, bool check_ifaces, bool check_base_ifaces);
    public string get_DeprecatedComment();
    public Nullable`1<int> get_DeprecatedSince();
    [IteratorStateMachineAttribute("MonoDroid.Generation.GenBase/<Descendants>d__94")]
private IEnumerable`1<GenBase> Descendants(IList`1<GenBase> gens);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ElementType();
    [CompilerGeneratedAttribute]
public void set_ElementType(string value);
    public void FillProperties();
    public virtual void FixupAccessModifiers(CodeGenerationOptions opt);
    public virtual void FixupExplicitImplementation();
    public void FixupMethodOverrides(CodeGenerationOptions opt);
    public abstract virtual string FromNative(CodeGenerationOptions opt, string varname, bool owned);
    public sealed virtual string get_FullName();
    public void set_FullName(string value);
    public abstract virtual void Generate(CodeGenerationOptions opt, GenerationInfo gen_info);
    protected void GenerateAnnotationAttribute(CodeGenerationOptions opt, GenerationInfo gen_info);
    public List`1<InterfaceGen> GetAllDerivedInterfaces();
    private void GetAllDerivedInterfaces(List`1<InterfaceGen> ifaces);
    protected internal IEnumerable`1<InterfaceGen> GetAllImplementedInterfaces();
    public IEnumerable`1<Method> GetAllMethods();
    private GenBase GetBaseGen(CodeGenerationOptions opt);
    protected virtual bool GetEnumMappedMemberInfo();
    public bool GetGenericMappings(InterfaceGen gen, Dictionary`2<string, string> mappings);
    public virtual string GetGenericType(Dictionary`2<string, string> mappings);
    public sealed virtual string GetObjectHandleProperty(CodeGenerationOptions opt, string variable);
    public Property GetPropertyByName(string name, bool check_ifaces);
    public Property GetPropertyByName(string name, bool check_ifaces, bool check_base_ifaces);
    public bool get_HasEnumMappedMembers();
    protected internal bool HasNestedType(string name);
    [IteratorStateMachineAttribute("MonoDroid.Generation.GenBase/<Invalidate>d__123")]
public IEnumerable`1<GenBase> Invalidate();
    public bool get_IsAcw();
    public bool get_IsAnnotation();
    public sealed virtual bool get_IsArray();
    public bool IsCovariantMethod(Method method);
    public bool get_IsDeprecated();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsGeneratable();
    public bool get_IsGeneric();
    private bool IsInfrastructural(string name);
    public bool get_IsObfuscated();
    private bool IsThrowable();
    private static bool IsTypeCommensurate(CodeGenerationOptions opt, ISymbol sym);
    public IEnumerable`1<string> get_ImplementedInterfaces();
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
public void set_IsValid(bool value);
    public sealed virtual string get_JavaName();
    public string get_JavaSimpleName();
    public sealed virtual string get_JniName();
    public string get_MetadataXPathReference();
    [CompilerGeneratedAttribute]
public bool get_MethodValidationFailed();
    [CompilerGeneratedAttribute]
public void set_MethodValidationFailed(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Namespace();
    [CompilerGeneratedAttribute]
public sealed virtual string get_NativeType();
    [CompilerGeneratedAttribute]
public void set_NativeType(string value);
    public sealed virtual bool get_NeedsPrep();
    protected virtual bool OnValidate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
    public string get_PackageName();
    public void set_PackageName(string value);
    public sealed virtual String[] PreCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PreCallback(CodeGenerationOptions opt, string var_name, bool owned);
    public sealed virtual String[] PostCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PostCallback(CodeGenerationOptions opt, string var_name);
    public string get_RawJniName();
    public string get_RawVisibility();
    public bool RequiresNew(Property property);
    public bool RequiresNew(string memberName, Method method);
    public virtual void ResetValidation();
    private bool ReturnTypeMatches(Method m, Method mm);
    public bool get_ShouldGenerateAnnotationAttribute();
    public HashSet`1<string> get_SkippedInvokerMethods();
    public void StripNonBindables(CodeGenerationOptions opt);
    public abstract virtual string ToNative(CodeGenerationOptions opt, string varname, Dictionary`2<string, string> mappings);
    public string get_TypeNamePrefix();
    public GenericParameterDefinitionList get_TypeParameters();
    [CompilerGeneratedAttribute]
public bool get_Unnest();
    [CompilerGeneratedAttribute]
public void set_Unnest(bool value);
    public virtual void UpdateEnums(CodeGenerationOptions opt, AncestorDescendantCache cache);
    public virtual void UpdateEnumsInInterfaceImplementation();
    public sealed virtual bool Validate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
    private bool ValidateMethod(CodeGenerationOptions opt, Method m, CodeGeneratorContext context);
    public string get_Visibility();
    public void set_Visibility(string value);
    [CompilerGeneratedAttribute]
private bool <Descendants>b__94_0(GenBase x);
    [CompilerGeneratedAttribute]
internal static void <GetAllImplementedInterfaces>g__visit|111_0(ISymbol isym, <>c__DisplayClass111_0& );
}
public class MonoDroid.Generation.GenBaseSupport : object {
    private HashSet`1<string> skipped_invoker_methods;
    [CompilerGeneratedAttribute]
private string <AnnotatedVisibility>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAcw>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeprecated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeprecatedComment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DeprecatedSince>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGeneratable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGeneric>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsObfuscated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaSimpleName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeNamePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Visibility>k__BackingField;
    [CompilerGeneratedAttribute]
private GenericParameterDefinitionList <TypeParameters>k__BackingField;
    public string AnnotatedVisibility { get; public set; }
    public bool IsAcw { get; public set; }
    public bool IsDeprecated { get; public set; }
    public string DeprecatedComment { get; public set; }
    public Nullable`1<int> DeprecatedSince { get; public set; }
    public bool IsGeneratable { get; public set; }
    public bool IsGeneric { get; public set; }
    public bool IsObfuscated { get; public set; }
    public string FullName { get; public set; }
    public string Name { get; public set; }
    public string Namespace { get; public set; }
    public string JavaSimpleName { get; public set; }
    public string PackageName { get; public set; }
    public string TypeNamePrefix { get; public set; }
    public string Visibility { get; public set; }
    public GenericParameterDefinitionList TypeParameters { get; public set; }
    public HashSet`1<string> SkippedInvokerMethods { get; }
    [CompilerGeneratedAttribute]
public string get_AnnotatedVisibility();
    [CompilerGeneratedAttribute]
public void set_AnnotatedVisibility(string value);
    [CompilerGeneratedAttribute]
public bool get_IsAcw();
    [CompilerGeneratedAttribute]
public void set_IsAcw(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDeprecated();
    [CompilerGeneratedAttribute]
public void set_IsDeprecated(bool value);
    [CompilerGeneratedAttribute]
public string get_DeprecatedComment();
    [CompilerGeneratedAttribute]
public void set_DeprecatedComment(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_DeprecatedSince();
    [CompilerGeneratedAttribute]
public void set_DeprecatedSince(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_IsGeneratable();
    [CompilerGeneratedAttribute]
public void set_IsGeneratable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsGeneric();
    [CompilerGeneratedAttribute]
public void set_IsGeneric(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsObfuscated();
    [CompilerGeneratedAttribute]
public void set_IsObfuscated(bool value);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public void set_FullName(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_JavaSimpleName();
    [CompilerGeneratedAttribute]
public void set_JavaSimpleName(string value);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    [CompilerGeneratedAttribute]
public string get_TypeNamePrefix();
    [CompilerGeneratedAttribute]
public void set_TypeNamePrefix(string value);
    [CompilerGeneratedAttribute]
public string get_Visibility();
    [CompilerGeneratedAttribute]
public void set_Visibility(string value);
    [CompilerGeneratedAttribute]
public GenericParameterDefinitionList get_TypeParameters();
    [CompilerGeneratedAttribute]
public void set_TypeParameters(GenericParameterDefinitionList value);
    public HashSet`1<string> get_SkippedInvokerMethods();
    public virtual bool OnValidate(CodeGenerationOptions opt);
}
public class MonoDroid.Generation.GeneratedEnumSymbol : object {
    private string enum_type;
    private bool is_array;
    public string DefaultValue { get; }
    public string FullName { get; }
    public string JavaName { get; }
    public string JniName { get; }
    public string NativeType { get; }
    public bool IsEnum { get; }
    public bool IsArray { get; }
    public string ElementType { get; }
    public string ReturnCast { get; }
    public bool NeedsPrep { get; }
    public GeneratedEnumSymbol(string enumType);
    public sealed virtual string GetGenericType(Dictionary`2<string, string> mappings);
    public sealed virtual string FromNative(CodeGenerationOptions opt, string var_name, bool owned);
    public sealed virtual string ToNative(CodeGenerationOptions opt, string var_name, Dictionary`2<string, string> mappings);
    public sealed virtual bool Validate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
    public sealed virtual string get_DefaultValue();
    public sealed virtual string get_FullName();
    public sealed virtual string get_JavaName();
    public sealed virtual string get_JniName();
    public sealed virtual string get_NativeType();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsArray();
    public sealed virtual string get_ElementType();
    public sealed virtual string get_ReturnCast();
    public sealed virtual string GetObjectHandleProperty(CodeGenerationOptions opt, string variable);
    public sealed virtual String[] PreCallback(CodeGenerationOptions opt, string var_name, bool owned);
    public sealed virtual String[] PostCallback(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PreCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual string Call(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PostCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual bool get_NeedsPrep();
}
public class MonoDroid.Generation.GenerationInfo : object {
    [CompilerGeneratedAttribute]
private string <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CSharpDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaDir>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentBag`1<string> <GeneratedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentBag`1<string> <Enums>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentBag`1<KeyValuePair`2<string, string>> <TypeRegistrations>k__BackingField;
    public string Assembly { get; }
    public string CSharpDir { get; }
    public string JavaDir { get; }
    public ConcurrentBag`1<string> GeneratedFiles { get; }
    public ConcurrentBag`1<string> Enums { get; }
    public ConcurrentBag`1<KeyValuePair`2<string, string>> TypeRegistrations { get; }
    public GenerationInfo(string csdir, string javadir, string assembly);
    [CompilerGeneratedAttribute]
public string get_Assembly();
    [CompilerGeneratedAttribute]
public string get_CSharpDir();
    [CompilerGeneratedAttribute]
public string get_JavaDir();
    [CompilerGeneratedAttribute]
public ConcurrentBag`1<string> get_GeneratedFiles();
    [CompilerGeneratedAttribute]
public ConcurrentBag`1<string> get_Enums();
    [CompilerGeneratedAttribute]
public ConcurrentBag`1<KeyValuePair`2<string, string>> get_TypeRegistrations();
    public StreamWriter OpenStream(string name);
    internal void GenerateLibraryProjectFile(CodeGeneratorOptions options, IEnumerable`1<string> enumFiles, string path);
    private XElement ToDefineConstants(CodeGeneratorOptions options, XNamespace msbuild);
    private XElement ToCompileElement(XName compile, string path);
}
public class MonoDroid.Generation.GenericParameterDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ConstraintExpressions>k__BackingField;
    [CompilerGeneratedAttribute]
private ISymbol[] <Constraints>k__BackingField;
    private bool validated;
    private bool is_valid;
    public string Name { get; public set; }
    public String[] ConstraintExpressions { get; private set; }
    public ISymbol[] Constraints { get; private set; }
    public GenericParameterDefinition(string name, String[] constraints);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public String[] get_ConstraintExpressions();
    [CompilerGeneratedAttribute]
private void set_ConstraintExpressions(String[] value);
    [CompilerGeneratedAttribute]
public ISymbol[] get_Constraints();
    [CompilerGeneratedAttribute]
private void set_Constraints(ISymbol[] value);
    public bool Validate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
    public GenericParameterDefinition Clone();
}
public class MonoDroid.Generation.GenericParameterDefinitionList : List`1<GenericParameterDefinition> {
    public static GenericParameterDefinitionList Merge(GenericParameterDefinitionList l1, GenericParameterDefinitionList l2);
    public static GenericParameterDefinitionList FromMetadata(IEnumerable`1<GenericParameter> types);
    public static GenericParameterDefinitionList FromXml(XElement tps);
    public string ToGeneratedAttributeString();
    public int IndexOf(string name);
    public string GetSignature();
    public bool Validate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
}
public class MonoDroid.Generation.GenericParameterList : object {
    private bool is_concrete;
    private bool is_valid;
    private bool validated;
    private string managed;
    private String[] java_params;
    private ISymbol[] type_params;
    public bool IsConcrete { get; }
    public ISymbol[] TypeParams { get; }
    public GenericParameterList(string type_params);
    public static String[] Parse(string type_params);
    public bool get_IsConcrete();
    public ISymbol[] get_TypeParams();
    public virtual string ToString();
    public bool Validate(CodeGenerationOptions opt, GenericParameterDefinitionList in_params, CodeGeneratorContext context);
}
public class MonoDroid.Generation.GenericSymbol : object {
    private bool is_concrete;
    private GenBase gen;
    private String[] java_params;
    private string tps;
    private ISymbol[] type_params;
    public string DefaultValue { get; }
    public string FullName { get; }
    public GenBase Gen { get; }
    public bool IsConcrete { get; }
    public string JavaName { get; }
    public string JniName { get; }
    public string NativeType { get; }
    public bool IsEnum { get; }
    public bool IsArray { get; }
    public string ElementType { get; }
    public ISymbol[] TypeParams { get; }
    public string ReturnCast { get; }
    public bool NeedsPrep { get; }
    public GenericSymbol(GenBase gen, string type_params);
    public sealed virtual string get_DefaultValue();
    public sealed virtual string get_FullName();
    public GenBase get_Gen();
    public bool get_IsConcrete();
    public sealed virtual string get_JavaName();
    public sealed virtual string get_JniName();
    public sealed virtual string get_NativeType();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsArray();
    public sealed virtual string get_ElementType();
    public ISymbol[] get_TypeParams();
    public sealed virtual string get_ReturnCast();
    public sealed virtual string GetObjectHandleProperty(CodeGenerationOptions opt, string variable);
    private string MapTypeParams(Dictionary`2<string, string> mappings);
    public sealed virtual string FromNative(CodeGenerationOptions opt, string varname, bool owned);
    public sealed virtual string GetGenericType(Dictionary`2<string, string> mappings);
    public string ToNative(CodeGenerationOptions opt, string varname);
    public sealed virtual string ToNative(CodeGenerationOptions opt, string varname, Dictionary`2<string, string> mappings);
    public sealed virtual bool Validate(CodeGenerationOptions opt, GenericParameterDefinitionList in_params, CodeGeneratorContext context);
    public sealed virtual String[] PreCallback(CodeGenerationOptions opt, string var_name, bool owned);
    public sealed virtual String[] PostCallback(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PreCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual string Call(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PostCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual bool get_NeedsPrep();
}
public class MonoDroid.Generation.GenericTypeParameter : object {
    private string type;
    private string java_type;
    private string jni_type;
    private GenericParameterDefinition parm;
    public GenericParameterDefinition Definition { get; }
    public string DefaultValue { get; }
    public string FullName { get; }
    public string JavaName { get; }
    public string JniName { get; }
    public string NativeType { get; }
    public bool IsEnum { get; }
    public bool IsArray { get; }
    public string ElementType { get; }
    public string ReturnCast { get; }
    public bool NeedsPrep { get; }
    public GenericTypeParameter(GenericParameterDefinition parm);
    public GenericParameterDefinition get_Definition();
    public sealed virtual string get_DefaultValue();
    public sealed virtual string get_FullName();
    public sealed virtual string get_JavaName();
    public sealed virtual string get_JniName();
    public sealed virtual string get_NativeType();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsArray();
    public sealed virtual string get_ElementType();
    public sealed virtual string get_ReturnCast();
    public sealed virtual string GetObjectHandleProperty(CodeGenerationOptions opt, string variable);
    public sealed virtual string FromNative(CodeGenerationOptions opt, string varname, bool owned);
    public sealed virtual string GetGenericType(Dictionary`2<string, string> mappings);
    public sealed virtual string ToNative(CodeGenerationOptions opt, string varname, Dictionary`2<string, string> mappings);
    public sealed virtual bool Validate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
    public sealed virtual String[] PreCallback(CodeGenerationOptions opt, string var_name, bool owned);
    public sealed virtual String[] PostCallback(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PreCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual string Call(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PostCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual bool get_NeedsPrep();
}
[ExtensionAttribute]
internal static class MonoDroid.Generation.IApiAvailabilityExtensions : object {
    [ExtensionAttribute]
public static string AdditionalAttributeString(IApiAvailability a);
}
public interface MonoDroid.Generation.IGeneratable {
    public bool IsGeneratable { get; }
    public abstract virtual bool get_IsGeneratable();
    public abstract virtual void Generate(CodeGenerationOptions opt, GenerationInfo gen_info);
}
internal class MonoDroid.Generation.InterfaceExtensionInfo : object {
    public string DeclaringType;
    public InterfaceGen Type;
}
public class MonoDroid.Generation.InterfaceGen : GenBase {
    [CompilerGeneratedAttribute]
private string <ArgsType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasManagedName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MayHaveManagedGenericArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoAlternatives>k__BackingField;
    public string ArgsType { get; public set; }
    public bool HasDefaultMethods { get; }
    public bool HasFieldsAsProperties { get; }
    public bool HasStaticMethods { get; }
    public bool IsListener { get; }
    public bool HasManagedName { get; public set; }
    public bool MayHaveManagedGenericArguments { get; public set; }
    internal bool NeedsSender { get; }
    public bool NoAlternatives { get; public set; }
    public InterfaceGen(GenBaseSupport support);
    public virtual void AddNestedType(GenBase gen);
    [CompilerGeneratedAttribute]
public string get_ArgsType();
    [CompilerGeneratedAttribute]
public void set_ArgsType(string value);
    public virtual string FromNative(CodeGenerationOptions opt, string varname, bool owned);
    public virtual void FixupAccessModifiers(CodeGenerationOptions opt);
    public virtual void Generate(CodeGenerationOptions opt, GenerationInfo gen_info);
    internal string GetArgsName(Method m);
    internal string GetEventDelegateName(Method m);
    public IEnumerable`1<Field> GetGeneratableFields(CodeGenerationOptions options);
    public bool get_HasDefaultMethods();
    public bool get_HasFieldsAsProperties();
    public bool get_HasStaticMethods();
    public bool IsConstSugar(CodeGenerationOptions options);
    public bool get_IsListener();
    [CompilerGeneratedAttribute]
public bool get_HasManagedName();
    [CompilerGeneratedAttribute]
public void set_HasManagedName(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_MayHaveManagedGenericArguments();
    [CompilerGeneratedAttribute]
public void set_MayHaveManagedGenericArguments(bool value);
    internal bool get_NeedsSender();
    [CompilerGeneratedAttribute]
public bool get_NoAlternatives();
    [CompilerGeneratedAttribute]
public void set_NoAlternatives(bool value);
    protected virtual bool OnValidate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
    public virtual void ResetValidation();
    public virtual string ToNative(CodeGenerationOptions opt, string varname, Dictionary`2<string, string> mappings);
    public sealed virtual string GetGenericJavaObjectTypeOverride();
    public sealed virtual string ToInteroperableJavaObject(string var_name);
    [CompilerGeneratedAttribute]
private bool <FixupAccessModifiers>b__7_0(Method m);
}
public interface MonoDroid.Generation.IRequireGenericMarshal {
    public bool MayHaveManagedGenericArguments { get; }
    public abstract virtual bool get_MayHaveManagedGenericArguments();
    public abstract virtual string GetGenericJavaObjectTypeOverride();
    public abstract virtual string ToInteroperableJavaObject(string varname);
}
public interface MonoDroid.Generation.ISymbol {
    public string DefaultValue { get; }
    public string FullName { get; }
    public string JavaName { get; }
    public string JniName { get; }
    public string NativeType { get; }
    public bool IsEnum { get; }
    public bool IsArray { get; }
    public string ElementType { get; }
    public string ReturnCast { get; }
    public bool NeedsPrep { get; }
    public abstract virtual string get_DefaultValue();
    public abstract virtual string get_FullName();
    public abstract virtual string get_JavaName();
    public abstract virtual string get_JniName();
    public abstract virtual string get_NativeType();
    public abstract virtual bool get_IsEnum();
    public abstract virtual bool get_IsArray();
    public abstract virtual string get_ElementType();
    public abstract virtual string get_ReturnCast();
    public abstract virtual string GetObjectHandleProperty(CodeGenerationOptions opt, string variable);
    public abstract virtual string GetGenericType(Dictionary`2<string, string> mappings);
    public abstract virtual string FromNative(CodeGenerationOptions opt, string var_name, bool owned);
    public abstract virtual string ToNative(CodeGenerationOptions opt, string var_name, Dictionary`2<string, string> mappings);
    public abstract virtual bool Validate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
    public abstract virtual String[] PreCallback(CodeGenerationOptions opt, string var_name, bool owned);
    public abstract virtual String[] PostCallback(CodeGenerationOptions opt, string var_name);
    public abstract virtual String[] PreCall(CodeGenerationOptions opt, string var_name);
    public abstract virtual string Call(CodeGenerationOptions opt, string var_name);
    public abstract virtual String[] PostCall(CodeGenerationOptions opt, string var_name);
    public abstract virtual bool get_NeedsPrep();
}
public class MonoDroid.Generation.JavadocInfo : object {
    [CompilerGeneratedAttribute]
private string <Javadoc>k__BackingField;
    [CompilerGeneratedAttribute]
private XElement[] <ExtraRemarks>k__BackingField;
    [CompilerGeneratedAttribute]
private XElement[] <Copyright>k__BackingField;
    [CompilerGeneratedAttribute]
private XmldocStyle <XmldocStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocRootReplacement>k__BackingField;
    private string MemberDescription;
    private static Dictionary`2<ApiLinkStyle, Func`5<string, string, string, string, XElement>> UrlCreators;
    public string Javadoc { get; public set; }
    public XElement[] ExtraRemarks { get; public set; }
    public XElement[] Copyright { get; public set; }
    public XmldocStyle XmldocStyle { get; public set; }
    public string DocRootReplacement { get; public set; }
    private static JavadocInfo();
    [CompilerGeneratedAttribute]
public string get_Javadoc();
    [CompilerGeneratedAttribute]
public void set_Javadoc(string value);
    [CompilerGeneratedAttribute]
public XElement[] get_ExtraRemarks();
    [CompilerGeneratedAttribute]
public void set_ExtraRemarks(XElement[] value);
    [CompilerGeneratedAttribute]
public XElement[] get_Copyright();
    [CompilerGeneratedAttribute]
public void set_Copyright(XElement[] value);
    [CompilerGeneratedAttribute]
public XmldocStyle get_XmldocStyle();
    [CompilerGeneratedAttribute]
public void set_XmldocStyle(XmldocStyle value);
    [CompilerGeneratedAttribute]
public string get_DocRootReplacement();
    [CompilerGeneratedAttribute]
public void set_DocRootReplacement(string value);
    public static JavadocInfo CreateInfo(XElement element, XmldocStyle style, bool appendCopyrightExtra);
    private static ValueTuple`3<string, string, string> GetMemberDescription(XElement element);
    private static ValueTuple`3<XElement[], XElement[], string> GetExtra(XElement element, XmldocStyle style, string declaringJniType, string declaringMemberName, string declaringMemberParameterString, bool appendCopyrightExtra);
    private static ApiLinkStyle ParseApiLinkStyle(string style);
    public void AddJavadocs(ICollection`1<string> comments);
    public IEnumerable`1<XNode> ParseJavadoc();
    public static void AddComments(ICollection`1<string> comments, IEnumerable`1<XNode> nodes);
    private static void AddNode(ICollection`1<string> comments, XNode node);
    private static void PrintMessages(ParseTree tree, TextWriter writer);
    private static List`1<string> GetLines(string text);
    private static XElement CreateDocLinkUrl(ApiLinkStyle style, string prefix, string declaringJniType, string declaringMemberName, string declaringMemberParameterString);
    private static XElement CreateAndroidDocLinkUri(string prefix, string declaringJniType, string declaringMemberName, string declaringMemberParameterString);
}
internal class MonoDroid.Generation.JavaInteropCodeGenerator : object {
    protected TextWriter writer;
    protected CodeGenerationOptions opt;
    [CompilerGeneratedAttribute]
private CodeGeneratorContext <Context>k__BackingField;
    public CodeGeneratorContext Context { get; }
    public JavaInteropCodeGenerator(TextWriter writer, CodeGenerationOptions options);
    [CompilerGeneratedAttribute]
public CodeGeneratorContext get_Context();
    public static string GetInvokeType(string type);
    public virtual void WriteType(GenBase gen, string indent, GenerationInfo gen_info);
}
[ExtensionAttribute]
internal static class MonoDroid.Generation.ManagedExtensions : object {
    [ExtensionAttribute]
public static string FullNameCorrected(TypeReference t);
    [ExtensionAttribute]
public static GenericParameterDefinitionList GenericArguments(MethodDefinition m);
    [ExtensionAttribute]
public static string Deprecated(MethodDefinition m);
    [ExtensionAttribute]
public static string Visibility(MethodDefinition m);
    [IteratorStateMachineAttribute("MonoDroid.Generation.ManagedExtensions/<GetParameters>d__4")]
[ExtensionAttribute]
public static IEnumerable`1<Parameter> GetParameters(MethodDefinition m, CustomAttribute regatt);
    [ExtensionAttribute]
public static string StripArity(string type);
    [ExtensionAttribute]
public static string FilterPrimitive(string type);
}
public class MonoDroid.Generation.Method : MethodBase {
    private bool is_override;
    [CompilerGeneratedAttribute]
private string <ArgsType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateAsyncWrapper>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateDispatchingSetter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAbstract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCompatVirtualMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFinal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInterfaceDefaultMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Method <OverriddenInterfaceMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReturnEnumified>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStatic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVirtual>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManagedOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManagedReturn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyNameOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Return>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReturnNotNull>k__BackingField;
    [CompilerGeneratedAttribute]
private ReturnValue <RetVal>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SourceApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExplicitInterface>k__BackingField;
    public string ArgsType { get; public set; }
    public string CustomAttributes { get; public set; }
    public string EventName { get; public set; }
    public bool GenerateAsyncWrapper { get; public set; }
    public bool GenerateDispatchingSetter { get; public set; }
    public bool IsAbstract { get; public set; }
    public bool IsCompatVirtualMethod { get; public set; }
    public bool IsFinal { get; public set; }
    public bool IsInterfaceDefaultMethod { get; public set; }
    public Method OverriddenInterfaceMethod { get; public set; }
    public bool IsReturnEnumified { get; public set; }
    public bool IsStatic { get; public set; }
    public bool IsVirtual { get; public set; }
    public string JavaName { get; public set; }
    public string ManagedOverride { get; public set; }
    public string ManagedReturn { get; public set; }
    public string PropertyNameOverride { get; public set; }
    public string Return { get; public set; }
    public bool ReturnNotNull { get; public set; }
    public ReturnValue RetVal { get; public set; }
    public int SourceApiLevel { get; public set; }
    public string ExplicitInterface { get; public set; }
    internal string AdjustedName { get; }
    public bool Asyncify { get; }
    public bool CanAdd { get; }
    public bool CanGet { get; }
    public bool CanSet { get; }
    public bool CanHaveStringOverload { get; }
    public string ConnectorName { get; }
    public string EscapedCallbackName { get; }
    public string EscapedIdName { get; }
    public bool IsEventHandlerWithHandledProperty { get; }
    public bool IsGeneric { get; }
    public bool IsListenerConnector { get; }
    public bool IsOverride { get; public set; }
    public bool IsPropertyAccessor { get; }
    public bool IsReturnCharSequence { get; }
    public bool IsSimpleEventHandler { get; }
    public bool IsVoid { get; }
    public string JniSignature { get; }
    public InterfaceGen ListenerType { get; }
    public string PropertyName { get; }
    public string ReturnType { get; }
    public Method(GenBase declaringType);
    [CompilerGeneratedAttribute]
public string get_ArgsType();
    [CompilerGeneratedAttribute]
public void set_ArgsType(string value);
    [CompilerGeneratedAttribute]
public string get_CustomAttributes();
    [CompilerGeneratedAttribute]
public void set_CustomAttributes(string value);
    [CompilerGeneratedAttribute]
public string get_EventName();
    [CompilerGeneratedAttribute]
public void set_EventName(string value);
    [CompilerGeneratedAttribute]
public bool get_GenerateAsyncWrapper();
    [CompilerGeneratedAttribute]
public void set_GenerateAsyncWrapper(bool value);
    [CompilerGeneratedAttribute]
public bool get_GenerateDispatchingSetter();
    [CompilerGeneratedAttribute]
public void set_GenerateDispatchingSetter(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAbstract();
    [CompilerGeneratedAttribute]
public void set_IsAbstract(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCompatVirtualMethod();
    [CompilerGeneratedAttribute]
public void set_IsCompatVirtualMethod(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsFinal();
    [CompilerGeneratedAttribute]
public void set_IsFinal(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsInterfaceDefaultMethod();
    [CompilerGeneratedAttribute]
public void set_IsInterfaceDefaultMethod(bool value);
    [CompilerGeneratedAttribute]
public Method get_OverriddenInterfaceMethod();
    [CompilerGeneratedAttribute]
public void set_OverriddenInterfaceMethod(Method value);
    [CompilerGeneratedAttribute]
public bool get_IsReturnEnumified();
    [CompilerGeneratedAttribute]
public void set_IsReturnEnumified(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsStatic();
    [CompilerGeneratedAttribute]
public void set_IsStatic(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsVirtual();
    [CompilerGeneratedAttribute]
public void set_IsVirtual(bool value);
    [CompilerGeneratedAttribute]
public string get_JavaName();
    [CompilerGeneratedAttribute]
public void set_JavaName(string value);
    [CompilerGeneratedAttribute]
public string get_ManagedOverride();
    [CompilerGeneratedAttribute]
public void set_ManagedOverride(string value);
    [CompilerGeneratedAttribute]
public string get_ManagedReturn();
    [CompilerGeneratedAttribute]
public void set_ManagedReturn(string value);
    [CompilerGeneratedAttribute]
public string get_PropertyNameOverride();
    [CompilerGeneratedAttribute]
public void set_PropertyNameOverride(string value);
    [CompilerGeneratedAttribute]
public string get_Return();
    [CompilerGeneratedAttribute]
public void set_Return(string value);
    [CompilerGeneratedAttribute]
public bool get_ReturnNotNull();
    [CompilerGeneratedAttribute]
public void set_ReturnNotNull(bool value);
    [CompilerGeneratedAttribute]
public ReturnValue get_RetVal();
    [CompilerGeneratedAttribute]
public void set_RetVal(ReturnValue value);
    [CompilerGeneratedAttribute]
public int get_SourceApiLevel();
    [CompilerGeneratedAttribute]
public void set_SourceApiLevel(int value);
    [CompilerGeneratedAttribute]
public string get_ExplicitInterface();
    [CompilerGeneratedAttribute]
public void set_ExplicitInterface(string value);
    internal string get_AdjustedName();
    public bool get_Asyncify();
    public string AutoDetectEnumifiedOverrideReturn(AncestorDescendantCache cache);
    public bool get_CanAdd();
    public bool get_CanGet();
    public bool get_CanSet();
    internal string CalculateEventName(Func`2<string, bool> checkNameDuplicate);
    public bool get_CanHaveStringOverload();
    public Method Clone(GenBase declaringType);
    public string get_ConnectorName();
    public string get_EscapedCallbackName();
    public string get_EscapedIdName();
    internal void FillReturnType();
    internal string GetAdapterName(CodeGenerationOptions opt, string adapter);
    public string GetConnectorNameFull(CodeGenerationOptions opt);
    internal string GetDelegateType(CodeGenerationOptions opt);
    public string GetMetadataXPathReference(GenBase declaringType);
    public string GetSignature();
    public string GetSkipInvokerSignature();
    public bool get_IsEventHandlerWithHandledProperty();
    public virtual bool get_IsGeneric();
    public bool get_IsListenerConnector();
    public bool get_IsOverride();
    public void set_IsOverride(bool value);
    public bool get_IsPropertyAccessor();
    public bool get_IsReturnCharSequence();
    public bool get_IsSimpleEventHandler();
    public bool get_IsVoid();
    public string get_JniSignature();
    public InterfaceGen get_ListenerType();
    public virtual bool Matches(MethodBase other);
    public string get_PropertyName();
    public string get_ReturnType();
    protected virtual bool OnValidate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
    [CompilerGeneratedAttribute]
private bool <AutoDetectEnumifiedOverrideReturn>b__94_1(Method m);
}
public abstract class MonoDroid.Generation.MethodBase : object {
    [CompilerGeneratedAttribute]
private string <AnnotatedVisibility>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Annotation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ApiAvailableSince>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private GenBase <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Deprecated>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DeprecatedSince>k__BackingField;
    [CompilerGeneratedAttribute]
private GenericParameterDefinitionList <GenericArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAcw>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterList <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Visibility>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private JavadocInfo <JavadocInfo>k__BackingField;
    public string AnnotatedVisibility { get; public set; }
    public string Annotation { get; internal set; }
    public int ApiAvailableSince { get; public set; }
    public string AssemblyName { get; public set; }
    public GenBase DeclaringType { get; }
    public string Deprecated { get; public set; }
    public Nullable`1<int> DeprecatedSince { get; public set; }
    public GenericParameterDefinitionList GenericArguments { get; public set; }
    public bool IsAcw { get; public set; }
    public bool IsValid { get; private set; }
    public string Name { get; public set; }
    public ParameterList Parameters { get; }
    public string Visibility { get; public set; }
    public int LineNumber { get; public set; }
    public int LinePosition { get; public set; }
    public string SourceFile { get; public set; }
    public JavadocInfo JavadocInfo { get; public set; }
    internal string IDSignature { get; }
    public bool IsGeneric { get; }
    public bool IsKotlinNameMangled { get; }
    protected MethodBase(GenBase declaringType);
    [CompilerGeneratedAttribute]
public string get_AnnotatedVisibility();
    [CompilerGeneratedAttribute]
public void set_AnnotatedVisibility(string value);
    [CompilerGeneratedAttribute]
public string get_Annotation();
    [CompilerGeneratedAttribute]
internal void set_Annotation(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ApiAvailableSince();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ApiAvailableSince(int value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public GenBase get_DeclaringType();
    [CompilerGeneratedAttribute]
public string get_Deprecated();
    [CompilerGeneratedAttribute]
public void set_Deprecated(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_DeprecatedSince();
    [CompilerGeneratedAttribute]
public void set_DeprecatedSince(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public GenericParameterDefinitionList get_GenericArguments();
    [CompilerGeneratedAttribute]
public void set_GenericArguments(GenericParameterDefinitionList value);
    [CompilerGeneratedAttribute]
public bool get_IsAcw();
    [CompilerGeneratedAttribute]
public void set_IsAcw(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
private void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public ParameterList get_Parameters();
    [CompilerGeneratedAttribute]
public string get_Visibility();
    [CompilerGeneratedAttribute]
public void set_Visibility(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LineNumber();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LinePosition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LinePosition(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SourceFile();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceFile(string value);
    [CompilerGeneratedAttribute]
public JavadocInfo get_JavadocInfo();
    [CompilerGeneratedAttribute]
public void set_JavadocInfo(JavadocInfo value);
    public String[] AutoDetectEnumifiedOverrideParameters(AncestorDescendantCache cache);
    public string GetSignature(CodeGenerationOptions opt);
    internal string get_IDSignature();
    public virtual bool get_IsGeneric();
    public bool get_IsKotlinNameMangled();
    public virtual bool Matches(MethodBase other);
    protected virtual bool OnValidate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
    public bool Validate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
    [CompilerGeneratedAttribute]
private bool <AutoDetectEnumifiedOverrideParameters>b__67_2(Method m);
}
public class MonoDroid.Generation.NamespaceMapping : object {
    private Dictionary`2<string, string> mappings;
    private bool IsGeneratable { get; }
    public NamespaceMapping(IEnumerable`1<GenBase> gens);
    private bool get_IsGeneratable();
    public void Generate(CodeGenerationOptions opt, GenerationInfo gen_info);
    private string GetDelegateParameters(string jni);
    private string FromJniType(char c);
}
public class MonoDroid.Generation.Parameter : object {
    private bool is_sender;
    private string name;
    private string type;
    private string managed_type;
    private string rawtype;
    private ISymbol sym;
    private bool is_enumified;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotNull>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Annotation>k__BackingField;
    public int LineNumber { get; public set; }
    public int LinePosition { get; public set; }
    public string SourceFile { get; public set; }
    public string GenericType { get; }
    public bool IsArray { get; }
    public bool IsGeneric { get; }
    public bool IsListener { get; }
    public bool IsSender { get; public set; }
    public bool IsEnumified { get; }
    public string JavaType { get; }
    public string JniType { get; }
    public InterfaceGen ListenerType { get; }
    public string Name { get; public set; }
    public bool NotNull { get; public set; }
    public string PropertyName { get; }
    public string UnsafeNativeName { get; }
    public string JavaName { get; }
    public string NativeType { get; }
    public string RawNativeType { get; }
    public bool NeedsPrep { get; }
    public string Type { get; }
    public string InternalType { get; }
    public string Annotation { get; internal set; }
    public ISymbol Symbol { get; }
    internal Parameter(string name, string type, string managedType, bool isEnumified, string rawtype, bool notNull);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LineNumber();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LinePosition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LinePosition(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SourceFile();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceFile(string value);
    public Parameter Clone();
    public string GetCall(CodeGenerationOptions opt);
    public string ToNative(CodeGenerationOptions opt);
    public string get_GenericType();
    public string GetGenericType(Dictionary`2<string, string> mappings);
    public bool get_IsArray();
    public bool get_IsGeneric();
    public bool get_IsListener();
    public bool get_IsSender();
    public void set_IsSender(bool value);
    public bool get_IsEnumified();
    public string get_JavaType();
    public string get_JniType();
    public InterfaceGen get_ListenerType();
    public string get_Name();
    public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_NotNull();
    [CompilerGeneratedAttribute]
public void set_NotNull(bool value);
    public string get_PropertyName();
    public string get_UnsafeNativeName();
    public string get_JavaName();
    public string get_NativeType();
    public string get_RawNativeType();
    public bool get_NeedsPrep();
    public String[] GetPostCall(CodeGenerationOptions opt);
    public String[] GetPostCallback(CodeGenerationOptions opt);
    public string GetName(string prefix);
    public String[] GetPreCall(CodeGenerationOptions opt);
    public bool Equals(Parameter other);
    private static bool Equals(GenericSymbol g1, GenericSymbol g2);
    private static string FilterCSharpType(string s);
    public String[] GetPreCallback(CodeGenerationOptions opt);
    public string get_Type();
    public string get_InternalType();
    [CompilerGeneratedAttribute]
public string get_Annotation();
    [CompilerGeneratedAttribute]
internal void set_Annotation(string value);
    public void SetGeneratedEnumType(string enumType);
    public string FromNative(CodeGenerationOptions opt, bool owned);
    public string GetGenericCall(CodeGenerationOptions opt, Dictionary`2<string, string> mappings);
    public bool Validate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
    public bool ShouldGenerateKeepAlive();
    public ISymbol get_Symbol();
}
[DefaultMemberAttribute("Item")]
public class MonoDroid.Generation.ParameterList : object {
    private List`1<Parameter> items;
    public Parameter Item { get; }
    public string CallDropSender { get; }
    public string JavaCall { get; }
    public int Count { get; }
    public string DelegateTypeParams { get; }
    public bool HasCharSequence { get; }
    public bool HasCleanup { get; }
    public bool HasGeneric { get; }
    public bool HasSender { get; }
    public string JavaSignature { get; }
    public string JniSignature { get; }
    public string SenderName { get; }
    public static bool Equals(ParameterList l1, ParameterList l2);
    public Parameter get_Item(int idx);
    public sealed virtual IEnumerator`1<Parameter> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public string GetCall(CodeGenerationOptions opt);
    public string get_CallDropSender();
    public string get_JavaCall();
    public string GetCallArgs(CodeGenerationOptions opt, bool invoker);
    public StringCollection GetCallCleanup(CodeGenerationOptions opt);
    public StringCollection GetCallPrep(CodeGenerationOptions opt);
    public StringCollection GetCallbackCleanup(CodeGenerationOptions opt);
    public StringCollection GetCallbackPrep(CodeGenerationOptions opt);
    public string GetCallbackSignature(CodeGenerationOptions opt);
    public int get_Count();
    public string get_DelegateTypeParams();
    public bool get_HasCharSequence();
    public bool get_HasCleanup();
    public bool get_HasGeneric();
    public bool get_HasSender();
    public string get_JavaSignature();
    public string get_JniSignature();
    public string GetJniNestedDerivedSignature(CodeGenerationOptions opt);
    public string get_SenderName();
    public string GetSignatureDropSender(CodeGenerationOptions opt);
    public void Add(Parameter parm);
    public void AddFirst(Parameter parm);
    public string GetGenericCall(CodeGenerationOptions opt, Dictionary`2<string, string> mappings);
    public string GetMethodXPathPredicate();
    public bool Validate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
}
public class MonoDroid.Generation.ParsedType : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ParsedType> <GenericArguments>k__BackingField;
    public string Type { get; public set; }
    public List`1<ParsedType> GenericArguments { get; }
    public bool HasGenerics { get; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public List`1<ParsedType> get_GenericArguments();
    public bool get_HasGenerics();
    public static ParsedType Parse(string type);
    public virtual string ToString();
    public string ToString(bool useGlobal);
    private static List`1<string> ParseTypeList(string type);
}
public class MonoDroid.Generation.Property : object {
    private Method setter;
    [CompilerGeneratedAttribute]
private Method <Getter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateDispatchingSetter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public Method Getter { get; public set; }
    public Method Setter { get; public set; }
    public bool IsGeneric { get; }
    public bool GenerateDispatchingSetter { get; public set; }
    internal string AdjustedName { get; }
    public string Name { get; public set; }
    public string Type { get; }
    public string ExplicitInterface { get; }
    public bool IsWholePropertyDeprecated { get; }
    public Property(string name);
    [CompilerGeneratedAttribute]
public Method get_Getter();
    [CompilerGeneratedAttribute]
public void set_Getter(Method value);
    public Method get_Setter();
    public void set_Setter(Method value);
    public bool get_IsGeneric();
    [CompilerGeneratedAttribute]
public bool get_GenerateDispatchingSetter();
    [CompilerGeneratedAttribute]
public void set_GenerateDispatchingSetter(bool value);
    internal string get_AdjustedName();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public string get_Type();
    public void AutoDetectEnumifiedOverrideProperties(AncestorDescendantCache cache);
    public string get_ExplicitInterface();
    public bool get_IsWholePropertyDeprecated();
    [CompilerGeneratedAttribute]
private bool <AutoDetectEnumifiedOverrideProperties>b__23_1(Property p);
}
public class MonoDroid.Generation.ReturnValue : object {
    private ISymbol sym;
    private string java_type;
    private string managed_type;
    private string raw_type;
    private bool is_enumified;
    private Method owner;
    [CompilerGeneratedAttribute]
private bool <NotNull>k__BackingField;
    public string CallMethodPrefix { get; }
    public string DefaultValue { get; }
    public string FullName { get; }
    public bool IsVoid { get; }
    public bool IsArray { get; }
    public bool IsEnumified { get; }
    public bool IsGeneric { get; }
    public string JavaName { get; }
    public string JniName { get; }
    public string NativeType { get; }
    public bool NotNull { get; public set; }
    public string RawJavaType { get; }
    public string ReturnCast { get; }
    public ISymbol Symbol { get; }
    public ReturnValue(Method owner, string java_type, string managed_type, bool isEnumified, bool notNull);
    public string get_CallMethodPrefix();
    public ReturnValue Clone(Method owner);
    public string get_DefaultValue();
    public string get_FullName();
    public void SetGeneratedEnumType(string enumType);
    public string GetGenericType(Dictionary`2<string, string> mappings);
    public bool get_IsVoid();
    public bool get_IsArray();
    public bool get_IsEnumified();
    public bool get_IsGeneric();
    public string get_JavaName();
    public string get_JniName();
    public string get_NativeType();
    [CompilerGeneratedAttribute]
public bool get_NotNull();
    [CompilerGeneratedAttribute]
public void set_NotNull(bool value);
    public string get_RawJavaType();
    public string get_ReturnCast();
    public ISymbol get_Symbol();
    public string FromNative(CodeGenerationOptions opt, string var_name, bool owned);
    public string ToNative(CodeGenerationOptions opt, string var_name);
    public string GetGenericReturn(CodeGenerationOptions opt, string name, Dictionary`2<string, string> mappings);
    public bool Validate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
}
public class MonoDroid.Generation.SimpleSymbol : FormatSymbol {
    public SimpleSymbol(string default_value, string java_type, string type, string jni_type, string native_type, string from_fmt, string to_fmt, string returnCast);
}
public class MonoDroid.Generation.StreamSymbol : object {
    private string base_name;
    private string java_name;
    private string jni_name;
    public string DefaultValue { get; }
    public string FullName { get; }
    public bool IsGeneric { get; }
    public string JavaName { get; }
    public string JniName { get; }
    public string NativeType { get; }
    public bool IsEnum { get; }
    public bool IsArray { get; }
    public string ElementType { get; }
    public string ReturnCast { get; }
    public bool NeedsPrep { get; }
    public StreamSymbol(string name);
    public StreamSymbol(string name, string base_name);
    public sealed virtual string get_DefaultValue();
    public sealed virtual string get_FullName();
    public bool get_IsGeneric();
    public sealed virtual string get_JavaName();
    public sealed virtual string get_JniName();
    public sealed virtual string get_NativeType();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsArray();
    public sealed virtual string get_ElementType();
    public sealed virtual string get_ReturnCast();
    public sealed virtual string GetObjectHandleProperty(CodeGenerationOptions opt, string variable);
    public sealed virtual string GetGenericType(Dictionary`2<string, string> mappings);
    public sealed virtual string FromNative(CodeGenerationOptions opt, string var_name, bool owned);
    public sealed virtual string ToNative(CodeGenerationOptions opt, string var_name, Dictionary`2<string, string> mappings);
    public sealed virtual bool Validate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
    public sealed virtual String[] PreCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual string Call(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PostCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PreCallback(CodeGenerationOptions opt, string var_name, bool owned);
    public sealed virtual String[] PostCallback(CodeGenerationOptions opt, string var_name);
    public sealed virtual bool get_NeedsPrep();
}
public class MonoDroid.Generation.StringSymbol : object {
    public string DefaultValue { get; }
    public string FullName { get; }
    public bool IsGeneric { get; }
    public string JavaName { get; }
    public string JniName { get; }
    public string NativeType { get; }
    public bool IsEnum { get; }
    public bool IsArray { get; }
    public string ElementType { get; }
    public string ReturnCast { get; }
    public bool NeedsPrep { get; }
    public sealed virtual string get_DefaultValue();
    public sealed virtual string get_FullName();
    public bool get_IsGeneric();
    public sealed virtual string get_JavaName();
    public sealed virtual string get_JniName();
    public sealed virtual string get_NativeType();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsArray();
    public sealed virtual string get_ElementType();
    public sealed virtual string get_ReturnCast();
    public sealed virtual string GetObjectHandleProperty(CodeGenerationOptions opt, string variable);
    public sealed virtual string GetGenericType(Dictionary`2<string, string> mappings);
    public sealed virtual string FromNative(CodeGenerationOptions opt, string var_name, bool owned);
    public sealed virtual string ToNative(CodeGenerationOptions opt, string var_name, Dictionary`2<string, string> mappings);
    public sealed virtual bool Validate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
    public sealed virtual string Call(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PostCallback(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PostCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PreCallback(CodeGenerationOptions opt, string var_name, bool owned);
    public sealed virtual String[] PreCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual bool get_NeedsPrep();
}
public class MonoDroid.Generation.SymbolTable : object {
    private ConcurrentDictionary`2<string, List`1<ISymbol>> symbols;
    private ISymbol char_seq;
    private ISymbol fileinstream_sym;
    private ISymbol fileoutstream_sym;
    private ISymbol instream_sym;
    private ISymbol outstream_sym;
    private ISymbol xmlpullparser_sym;
    private ISymbol xmlresourceparser_sym;
    private ISymbol string_sym;
    private CodeGenerationTarget target;
    private static String[] InvariantSymbols;
    private ConcurrentDictionary`2<string, ISymbol> all_symbols_cache;
    private static object cache_population_lock;
    private static object populate_lock;
    public SymbolTable(CodeGenerationTarget target);
    private static SymbolTable();
    public IEnumerable`1<ISymbol> AllRegisteredSymbols(CodeGenerationOptions options);
    public string GetSymbolInfo(string java_type, String& type_params, Int32& arrayRank, Boolean& has_ellipsis);
    public void AddType(ISymbol symbol);
    private bool ShouldAddType(string key);
    public void AddType(string key, ISymbol symbol);
    public ISymbol Lookup(string java_type, GenericParameterDefinitionList in_params);
    private ISymbol CreateArray(ISymbol symbol, int rank, bool has_ellipsis);
    public ISymbol Lookup(string java_type);
    private string AddArity(string key, string typeParams);
    public void Dump();
    private void EnsurePopulated(GenBase gen);
}
public static class MonoDroid.Generation.TypeNameUtilities : object {
    internal static String[] reserved_keywords;
    private static TypeNameUtilities();
    public static string FilterPrimitiveFullName(string s);
    public static string GetGenericJavaObjectTypeOverride(string managed_name, string parms);
    public static string GetNativeName(string name);
    public static string MangleName(string name);
    public static string StudlyCase(string name);
    public static string GetCallPrefix(ISymbol symbol);
}
public class MonoDroid.Generation.Utilities.AncestorDescendantCache : object {
    private List`1<GenBase> gens;
    private Dictionary`2<GenBase, IEnumerable`1<GenBase>> cache;
    public AncestorDescendantCache(List`1<GenBase> gens);
    public IEnumerable`1<GenBase> GetAncestorsAndDescendants(GenBase gen);
    [IteratorStateMachineAttribute("MonoDroid.Generation.Utilities.AncestorDescendantCache/<GetAncestors>d__4")]
private IEnumerable`1<GenBase> GetAncestors(GenBase gen);
    [IteratorStateMachineAttribute("MonoDroid.Generation.Utilities.AncestorDescendantCache/<GetDescendants>d__5")]
private IEnumerable`1<GenBase> GetDescendants(GenBase gen);
}
internal class MonoDroid.Generation.XAJavaInteropCodeGenerator : JavaInteropCodeGenerator {
    public XAJavaInteropCodeGenerator(TextWriter writer, CodeGenerationOptions options);
}
internal class MonoDroid.Generation.XmlApiImporter : object {
    private static Regex api_level;
    private static XmlApiImporter();
    public static List`1<GenBase> Parse(XDocument doc, CodeGenerationOptions options);
    public static List`1<GenBase> ParsePackage(XElement ns, CodeGenerationOptions options);
    public static ClassGen CreateClass(XElement pkg, XElement elem, CodeGenerationOptions options);
    public static Ctor CreateCtor(GenBase declaringType, XElement elem, CodeGenerationOptions options);
    public static Field CreateField(GenBase declaringType, XElement elem, CodeGenerationOptions options);
    public static GenBaseSupport CreateGenBaseSupport(XElement pkg, XElement elem, CodeGenerationOptions opt, bool isInterface);
    public static InterfaceGen CreateInterface(XElement pkg, XElement elem, CodeGenerationOptions options);
    public static Method CreateMethod(GenBase declaringType, XElement elem, CodeGenerationOptions options);
    public static Parameter CreateParameter(XElement elem, CodeGenerationOptions options);
    public static Parameter CreateParameterFromClassElement(XElement elem, CodeGenerationOptions options);
    private static string EnsureValidIdentifer(string name);
    private static int GetApiLevel(string source);
    private static XElement GetPreviousClass(XNode n, string nameValue);
    private static void FillApiSince(IApiAvailability model, XElement[] elems);
    private static bool IsObfuscatedName(int threshold, string name);
    private static bool IsPrefixableName(string name);
    private static void SetLineInfo(ISourceLineInfo model, XNode node, CodeGenerationOptions options);
    private static bool ShouldBind(XElement elem);
}
[ExtensionAttribute]
internal static class MonoDroid.Generation.XmlExtensions : object {
    [ExtensionAttribute]
public static string Deprecated(XElement elem);
    [ExtensionAttribute]
public static string Visibility(XElement elem);
    [ExtensionAttribute]
public static GenericParameterDefinitionList GenericArguments(XElement elem);
}
public class MonoDroid.Generation.XmlPullParserSymbol : object {
    public string DefaultValue { get; }
    public string FullName { get; }
    public bool IsGeneric { get; }
    public string JavaName { get; }
    public string JniName { get; }
    public string NativeType { get; }
    public bool IsEnum { get; }
    public bool IsArray { get; }
    public string ElementType { get; }
    public string ReturnCast { get; }
    public bool NeedsPrep { get; }
    public sealed virtual string get_DefaultValue();
    public sealed virtual string get_FullName();
    public bool get_IsGeneric();
    public sealed virtual string get_JavaName();
    public sealed virtual string get_JniName();
    public sealed virtual string get_NativeType();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsArray();
    public sealed virtual string get_ElementType();
    public sealed virtual string get_ReturnCast();
    public sealed virtual string GetObjectHandleProperty(CodeGenerationOptions opt, string variable);
    public sealed virtual string GetGenericType(Dictionary`2<string, string> mappings);
    public sealed virtual string FromNative(CodeGenerationOptions opt, string var_name, bool owned);
    public sealed virtual string ToNative(CodeGenerationOptions opt, string var_name, Dictionary`2<string, string> mappings);
    public sealed virtual bool Validate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
    public sealed virtual string Call(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PostCallback(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PostCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PreCallback(CodeGenerationOptions opt, string var_name, bool owned);
    public sealed virtual String[] PreCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual bool get_NeedsPrep();
}
public class MonoDroid.Generation.XmlResourceParserSymbol : object {
    public string DefaultValue { get; }
    public string FullName { get; }
    public bool IsGeneric { get; }
    public string JavaName { get; }
    public string JniName { get; }
    public string NativeType { get; }
    public bool IsEnum { get; }
    public bool IsArray { get; }
    public string ElementType { get; }
    public string ReturnCast { get; }
    public bool NeedsPrep { get; }
    public sealed virtual string get_DefaultValue();
    public sealed virtual string get_FullName();
    public bool get_IsGeneric();
    public sealed virtual string get_JavaName();
    public sealed virtual string get_JniName();
    public sealed virtual string get_NativeType();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsArray();
    public sealed virtual string get_ElementType();
    public sealed virtual string get_ReturnCast();
    public sealed virtual string GetObjectHandleProperty(CodeGenerationOptions opt, string variable);
    public sealed virtual string GetGenericType(Dictionary`2<string, string> mappings);
    public sealed virtual string FromNative(CodeGenerationOptions opt, string var_name, bool owned);
    public sealed virtual string ToNative(CodeGenerationOptions opt, string var_name, Dictionary`2<string, string> mappings);
    public sealed virtual bool Validate(CodeGenerationOptions opt, GenericParameterDefinitionList type_params, CodeGeneratorContext context);
    public sealed virtual string Call(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PostCallback(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PostCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual String[] PreCallback(CodeGenerationOptions opt, string var_name, bool owned);
    public sealed virtual String[] PreCall(CodeGenerationOptions opt, string var_name);
    public sealed virtual bool get_NeedsPrep();
}
internal class MonoDroid.Utils.CommandFailedException : InvalidOperationException {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorLog>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string FileName { get; private set; }
    public string Arguments { get; private set; }
    public string ErrorLog { get; private set; }
    public int ExitCode { get; private set; }
    public string Message { get; private set; }
    public string VSFormattedErrorLog { get; }
    public CommandFailedException(string message);
    public CommandFailedException(string filename, string arguments, string errorLog, int exitCode);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_Arguments();
    [CompilerGeneratedAttribute]
private void set_Arguments(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorLog();
    [CompilerGeneratedAttribute]
private void set_ErrorLog(string value);
    [CompilerGeneratedAttribute]
public int get_ExitCode();
    [CompilerGeneratedAttribute]
private void set_ExitCode(int value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    public string get_VSFormattedErrorLog();
    private string FormatForVS(string text);
}
internal static class MonoDroid.Utils.MessageUtils : object {
    internal static string MapGeneratedToProjectFile(string filename);
    private static List`1<string> FindFileInDirectory(string directory, string filename);
}
public static class MonoDroid.Utils.ProcessRocks : object {
    public static IEnumerable`1<string> ReadStandardOutput(IEnumerable`1<string> commandLine, bool printCommandLine);
    [IteratorStateMachineAttribute("MonoDroid.Utils.ProcessRocks/<ReadStandardOutput>d__1")]
public static IEnumerable`1<string> ReadStandardOutput(ProcessStartInfo psi, bool printCommandLine);
}
internal static class MonoDroid.Utils.StringRocks : object {
    public static string ToLowerCase(string value);
    public static string MemberToPascalCase(string value);
    public static string TypeToPascalCase(string value);
    public static string PackageToPascalCase(string value);
    private static string ToPascalCase(string value, int minLength);
    private static string ToPascalCasePart(string value, int minLength);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
public enum Xamarin.Android.Binder.CodeGenerationTarget : Enum {
    public int value__;
    public static CodeGenerationTarget XAJavaInterop1;
    public static CodeGenerationTarget JavaInterop1;
}
public class Xamarin.Android.Binder.CodeGenerator : object {
    public static int Main(String[] args);
    public static void Run(CodeGeneratorOptions options);
    private static void Run(CodeGeneratorOptions options, DirectoryAssemblyResolver resolver);
    private static void AddTypeToTable(CodeGenerationOptions opt, GenBase gb);
    private static bool BindSameType(TypeDefinition a, TypeDefinition b, TypeDefinitionCache cache);
    [IteratorStateMachineAttribute("Xamarin.Android.Binder.CodeGenerator/<FlattenNestedTypes>d__5")]
private static IEnumerable`1<GenBase> FlattenNestedTypes(IEnumerable`1<GenBase> gens);
    private static void Validate(List`1<GenBase> gens, CodeGenerationOptions opt, CodeGeneratorContext context);
    internal static void ProcessReferencedType(TypeDefinition td, CodeGenerationOptions opt);
    private static void GenerateAnnotationAttributes(List`1<GenBase> gens, IEnumerable`1<string> zips);
    private static void AddAnnotationTo(AnnotatedItem item, string annotation);
    private static void GenerateMappingReportFile(List`1<GenBase> gens, string mapping_file);
}
public class Xamarin.Android.Binder.CodeGeneratorOptions : object {
    [CompilerGeneratedAttribute]
private string <ApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeGenerationTarget <CodeGenerationTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManagedCallableWrapperSourceOutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyQualifiedName>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <AssemblyReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <FixupFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <LibraryPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <JavadocXmlFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GlobalTypeNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnlyBindPublicTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiDescriptionFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiVersionsXmlFile>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <ApiVersionsXmlFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <AnnotationsZipFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnumFieldsMapFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnumFlagsFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnumMethodsMapFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnumOutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnumMetadataOutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveEnums>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseShortFileNames>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProductVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MappingReportFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnlyRunApiXmlAdjuster>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiXmlAdjusterOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportInterfaceConstants>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportDefaultInterfaceMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportNestedInterfaceTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportNullableReferenceTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseRestrictToAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FixObsoleteOverrides>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseLegacyJavaResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseObsoletedOSPlatformAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private XmldocStyle <XmldocStyle>k__BackingField;
    public string ApiLevel { get; public set; }
    public CodeGenerationTarget CodeGenerationTarget { get; public set; }
    public string ManagedCallableWrapperSourceOutputDirectory { get; public set; }
    public string AssemblyQualifiedName { get; public set; }
    public Collection`1<string> AssemblyReferences { get; private set; }
    public Collection`1<string> FixupFiles { get; private set; }
    public Collection`1<string> LibraryPaths { get; private set; }
    public Collection`1<string> JavadocXmlFiles { get; private set; }
    public bool GlobalTypeNames { get; public set; }
    public bool OnlyBindPublicTypes { get; public set; }
    public string ApiDescriptionFile { get; public set; }
    [ObsoleteAttribute("Use ApiVersionsXmlFiles")]
public string ApiVersionsXmlFile { get; public set; }
    public Collection`1<string> ApiVersionsXmlFiles { get; public set; }
    public Collection`1<string> AnnotationsZipFiles { get; public set; }
    public string EnumFieldsMapFile { get; public set; }
    public string EnumFlagsFile { get; public set; }
    public string EnumMethodsMapFile { get; public set; }
    public string EnumOutputDirectory { get; public set; }
    public string EnumMetadataOutputFile { get; public set; }
    public bool PreserveEnums { get; public set; }
    public bool UseShortFileNames { get; public set; }
    public int ProductVersion { get; public set; }
    public string MappingReportFile { get; public set; }
    public bool OnlyRunApiXmlAdjuster { get; public set; }
    public string ApiXmlAdjusterOutput { get; public set; }
    public bool SupportInterfaceConstants { get; public set; }
    public bool SupportDefaultInterfaceMethods { get; public set; }
    public bool SupportNestedInterfaceTypes { get; public set; }
    public bool SupportNullableReferenceTypes { get; public set; }
    public bool UseRestrictToAttributes { get; public set; }
    public bool FixObsoleteOverrides { get; public set; }
    public bool UseLegacyJavaResolver { get; public set; }
    public bool UseObsoletedOSPlatformAttributes { get; public set; }
    public XmldocStyle XmldocStyle { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ApiLevel();
    [CompilerGeneratedAttribute]
public void set_ApiLevel(string value);
    [CompilerGeneratedAttribute]
public CodeGenerationTarget get_CodeGenerationTarget();
    [CompilerGeneratedAttribute]
public void set_CodeGenerationTarget(CodeGenerationTarget value);
    [CompilerGeneratedAttribute]
public string get_ManagedCallableWrapperSourceOutputDirectory();
    [CompilerGeneratedAttribute]
public void set_ManagedCallableWrapperSourceOutputDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyQualifiedName();
    [CompilerGeneratedAttribute]
public void set_AssemblyQualifiedName(string value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_AssemblyReferences();
    [CompilerGeneratedAttribute]
private void set_AssemblyReferences(Collection`1<string> value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_FixupFiles();
    [CompilerGeneratedAttribute]
private void set_FixupFiles(Collection`1<string> value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_LibraryPaths();
    [CompilerGeneratedAttribute]
private void set_LibraryPaths(Collection`1<string> value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_JavadocXmlFiles();
    [CompilerGeneratedAttribute]
private void set_JavadocXmlFiles(Collection`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_GlobalTypeNames();
    [CompilerGeneratedAttribute]
public void set_GlobalTypeNames(bool value);
    [CompilerGeneratedAttribute]
public bool get_OnlyBindPublicTypes();
    [CompilerGeneratedAttribute]
public void set_OnlyBindPublicTypes(bool value);
    [CompilerGeneratedAttribute]
public string get_ApiDescriptionFile();
    [CompilerGeneratedAttribute]
public void set_ApiDescriptionFile(string value);
    [CompilerGeneratedAttribute]
public string get_ApiVersionsXmlFile();
    [CompilerGeneratedAttribute]
public void set_ApiVersionsXmlFile(string value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_ApiVersionsXmlFiles();
    [CompilerGeneratedAttribute]
public void set_ApiVersionsXmlFiles(Collection`1<string> value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_AnnotationsZipFiles();
    [CompilerGeneratedAttribute]
public void set_AnnotationsZipFiles(Collection`1<string> value);
    [CompilerGeneratedAttribute]
public string get_EnumFieldsMapFile();
    [CompilerGeneratedAttribute]
public void set_EnumFieldsMapFile(string value);
    [CompilerGeneratedAttribute]
public string get_EnumFlagsFile();
    [CompilerGeneratedAttribute]
public void set_EnumFlagsFile(string value);
    [CompilerGeneratedAttribute]
public string get_EnumMethodsMapFile();
    [CompilerGeneratedAttribute]
public void set_EnumMethodsMapFile(string value);
    [CompilerGeneratedAttribute]
public string get_EnumOutputDirectory();
    [CompilerGeneratedAttribute]
public void set_EnumOutputDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_EnumMetadataOutputFile();
    [CompilerGeneratedAttribute]
public void set_EnumMetadataOutputFile(string value);
    [CompilerGeneratedAttribute]
public bool get_PreserveEnums();
    [CompilerGeneratedAttribute]
public void set_PreserveEnums(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseShortFileNames();
    [CompilerGeneratedAttribute]
public void set_UseShortFileNames(bool value);
    [CompilerGeneratedAttribute]
public int get_ProductVersion();
    [CompilerGeneratedAttribute]
public void set_ProductVersion(int value);
    [CompilerGeneratedAttribute]
public string get_MappingReportFile();
    [CompilerGeneratedAttribute]
public void set_MappingReportFile(string value);
    [CompilerGeneratedAttribute]
public bool get_OnlyRunApiXmlAdjuster();
    [CompilerGeneratedAttribute]
public void set_OnlyRunApiXmlAdjuster(bool value);
    [CompilerGeneratedAttribute]
public string get_ApiXmlAdjusterOutput();
    [CompilerGeneratedAttribute]
public void set_ApiXmlAdjusterOutput(string value);
    [CompilerGeneratedAttribute]
public bool get_SupportInterfaceConstants();
    [CompilerGeneratedAttribute]
public void set_SupportInterfaceConstants(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportDefaultInterfaceMethods();
    [CompilerGeneratedAttribute]
public void set_SupportDefaultInterfaceMethods(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportNestedInterfaceTypes();
    [CompilerGeneratedAttribute]
public void set_SupportNestedInterfaceTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportNullableReferenceTypes();
    [CompilerGeneratedAttribute]
public void set_SupportNullableReferenceTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseRestrictToAttributes();
    [CompilerGeneratedAttribute]
public void set_UseRestrictToAttributes(bool value);
    [CompilerGeneratedAttribute]
public bool get_FixObsoleteOverrides();
    [CompilerGeneratedAttribute]
public void set_FixObsoleteOverrides(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseLegacyJavaResolver();
    [CompilerGeneratedAttribute]
public void set_UseLegacyJavaResolver(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseObsoletedOSPlatformAttributes();
    [CompilerGeneratedAttribute]
public void set_UseObsoletedOSPlatformAttributes(bool value);
    [CompilerGeneratedAttribute]
public XmldocStyle get_XmldocStyle();
    [CompilerGeneratedAttribute]
public void set_XmldocStyle(XmldocStyle value);
    public static CodeGeneratorOptions Parse(String[] args);
    private static CodeGenerationTarget ParseCodeGenerationTarget(string value);
    private static XmldocStyle ParseXmldocStyle(string style);
}
public class Xamarin.Android.Tools.ApiXmlAdjuster.Adjuster : object {
    public void Process(string inputXmlFile, CodeGenerationOptions opt, GenBase[] gens, string outputXmlFile, int reportVerbosity);
}
[ExtensionAttribute]
public static class Xamarin.Android.Tools.ApiXmlAdjuster.JavaApiDllLoaderExtensions : object {
    [ExtensionAttribute]
public static void LoadReferences(JavaApi api, CodeGenerationOptions opt, IEnumerable`1<GenBase> gens);
    [ExtensionAttribute]
private static void Load(JavaType type, GenBase gen);
    [ExtensionAttribute]
private static void Load(JavaInterface iface, InterfaceGen gen);
    private static string ExpandTypeParameters(ISymbol[] tps);
    [ExtensionAttribute]
private static void Load(JavaClass kls, CodeGenerationOptions opt, ClassGen gen);
    [ExtensionAttribute]
private static void Load(JavaField field, Field gf);
    [ExtensionAttribute]
private static void Load(JavaMethodBase method, MethodBase gm);
    [ExtensionAttribute]
private static void Load(JavaMethod method, Method gm);
    [ExtensionAttribute]
private static void Load(JavaConstructor ctor, Ctor gc);
    [ExtensionAttribute]
private static void Load(JavaTypeParameters tps, GenericParameterDefinitionList gtps);
}
[ExtensionAttribute]
internal static class Xamarin.Android.Tools.XmlExtensions : object {
    [ExtensionAttribute]
public static string XGetAttribute(XElement element, string name);
    [ExtensionAttribute]
public static string XGetAttribute(XPathNavigator nav, string name, string ns);
    [ExtensionAttribute]
public static Nullable`1<int> XGetAttributeAsIntOrNull(XElement element, string name);
}
public class Xamarin.AndroidTools.AnnotationSupport.ApiVersionsProvider : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ClassDefinition> <Versions>k__BackingField;
    public IDictionary`2<string, ClassDefinition> Versions { get; private set; }
    public void Parse(string apiVersionsFilePath);
    private void Parse(XmlReader reader);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ClassDefinition> get_Versions();
    [CompilerGeneratedAttribute]
private void set_Versions(IDictionary`2<string, ClassDefinition> value);
}
[ExtensionAttribute]
public static class Xamarin.AndroidTools.AnnotationSupport.GenBaseExtensions : object {
    [IteratorStateMachineAttribute("Xamarin.AndroidTools.AnnotationSupport.GenBaseExtensions/<FlattenTypes>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<GenBase> FlattenTypes(GenBase t);
    [IteratorStateMachineAttribute("Xamarin.AndroidTools.AnnotationSupport.GenBaseExtensions/<GetSelfAndAncestors>d__1")]
[ExtensionAttribute]
public static IEnumerable`1<GenBase> GetSelfAndAncestors(GenBase t);
    [IteratorStateMachineAttribute("Xamarin.AndroidTools.AnnotationSupport.GenBaseExtensions/<GetMethods>d__2")]
[ExtensionAttribute]
public static IEnumerable`1<MethodBase> GetMethods(GenBase t);
    [ExtensionAttribute]
public static IEnumerable`1<Field> GetFields(GenBase t);
    [ExtensionAttribute]
public static GenBase Value(IType t);
    [ExtensionAttribute]
public static Field Value(IProperty p);
    [ExtensionAttribute]
public static Field Value(IDefinition t);
    [ExtensionAttribute]
public static MethodBase Value(IMethodBase t);
    [ExtensionAttribute]
public static IType Wrap(GenBase t);
    [ExtensionAttribute]
public static IProperty WrapAsProperty(Field t);
    [ExtensionAttribute]
public static IDefinition WrapAsDefinition(Field t);
    [ExtensionAttribute]
public static IMethodBase Wrap(MethodBase t);
}
public class Xamarin.AndroidTools.AnnotationSupport.ManagedTypeFinderGeneratorTypeSystem : ManagedTypeFinderDefault {
    private GenBase[] types;
    public ManagedTypeFinderGeneratorTypeSystem(GenBase[] types);
    protected virtual void OnAnnotationsParsed(IEnumerable`1<AnnotatedItem> itemsToBeBound);
    public virtual string GetManagedName(IType t);
    public virtual string GetJavaName(IDefinition f);
    public virtual string GetJavaName(IType t);
    public virtual IProperty GetAnnotatedField(IType t, string fieldName);
    public virtual IDefinition GetDefinitionField(IType t, string fieldName);
    private Field GetField(IType t, string fieldName);
    public virtual TypeName[] GetParameterTypes(IMethodBase method);
    public virtual string GetPropertyName(IProperty m);
    public virtual string GetDefinitionName(IDefinition m);
    public virtual void SetName(ManagedMemberInfo destination, IType iType);
    public virtual IEnumerable`1<IDefinition> GetFields(IType t);
    public virtual string GetMethodName(IMethodBase m);
    public virtual string GetFieldManagedTypeName(IProperty property);
    public virtual string GetMethodReturnManagedTypeName(IMethodBase method);
    public virtual string GetParameterManagedTypeName(IMethodBase m, int index);
    public virtual IMethodBase GetMethod(IType iType, AnnotatedItem item);
}
