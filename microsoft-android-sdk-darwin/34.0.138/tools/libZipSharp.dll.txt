[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
[FlagsAttribute]
public enum Xamarin.Tools.Zip.ArchiveGlobalFlags : Enum {
    public UInt32 value__;
    public static ArchiveGlobalFlags RDOnly;
}
public enum Xamarin.Tools.Zip.CompressionMethod : Enum {
    public short value__;
    public static CompressionMethod Unknown;
    public static CompressionMethod Default;
    public static CompressionMethod Store;
    public static CompressionMethod Shrink;
    public static CompressionMethod Reduce_1;
    public static CompressionMethod Reduce_2;
    public static CompressionMethod Reduce_3;
    public static CompressionMethod Reduce_4;
    public static CompressionMethod Implode;
    public static CompressionMethod Deflate;
    public static CompressionMethod Deflate64;
    public static CompressionMethod PKWare_Implode;
    public static CompressionMethod Bzip2;
    public static CompressionMethod LZMA;
    public static CompressionMethod Terse;
    public static CompressionMethod LZ77;
    public static CompressionMethod LZMA2;
    public static CompressionMethod ZSTD;
    public static CompressionMethod XZ;
    public static CompressionMethod JPEG;
    public static CompressionMethod WavPack;
    public static CompressionMethod PPMD;
}
internal static class Xamarin.Tools.Zip.Constants : object {
    public static string ZIP_LIBNAME;
}
public enum Xamarin.Tools.Zip.EncryptionMethod : Enum {
    public ushort value__;
    public static EncryptionMethod None;
    public static EncryptionMethod Trad_PKWare;
    public static EncryptionMethod DES;
    public static EncryptionMethod RC2_Old;
    public static EncryptionMethod Three_DES_168;
    public static EncryptionMethod Three_DES_112;
    public static EncryptionMethod PKZIP_AES_128;
    [ObsoleteAttribute("Use EncryptionMethod.PKZIP_AES_128")]
public static EncryptionMethod AES_128;
    public static EncryptionMethod PKZIP_AES_192;
    [ObsoleteAttribute("Use EncryptionMethod.PKZIP_AES_192")]
public static EncryptionMethod AES_192;
    public static EncryptionMethod PKZIP_AES_256;
    [ObsoleteAttribute("Use EncryptionMethod.PKZIP_AES_256")]
public static EncryptionMethod AES_256;
    public static EncryptionMethod RC2;
    public static EncryptionMethod RC4;
    public static EncryptionMethod WINZIP_AES_128;
    public static EncryptionMethod WINZIP_AES_192;
    public static EncryptionMethod WINZIP_AES_256;
    public static EncryptionMethod Unknown;
}
public class Xamarin.Tools.Zip.EntryExtractEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ZipEntry <Entry>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ulong <ProcessedSoFar>k__BackingField;
    public ZipEntry Entry { get; internal set; }
    public ulong ProcessedSoFar { get; internal set; }
    [CompilerGeneratedAttribute]
public ZipEntry get_Entry();
    [CompilerGeneratedAttribute]
internal void set_Entry(ZipEntry value);
    [CompilerGeneratedAttribute]
public ulong get_ProcessedSoFar();
    [CompilerGeneratedAttribute]
internal void set_ProcessedSoFar(ulong value);
}
[FlagsAttribute]
public enum Xamarin.Tools.Zip.EntryPermissions : Enum {
    public UInt32 value__;
    public static EntryPermissions Default;
    public static EntryPermissions OwnerRead;
    public static EntryPermissions OwnerWrite;
    public static EntryPermissions OwnerExecute;
    public static EntryPermissions OwnerAll;
    public static EntryPermissions GroupRead;
    public static EntryPermissions GroupWrite;
    public static EntryPermissions GroupExecute;
    public static EntryPermissions GroupAll;
    public static EntryPermissions WorldRead;
    public static EntryPermissions WorldWrite;
    public static EntryPermissions WorldExecute;
    public static EntryPermissions WorldAll;
    public static EntryPermissions SetUserId;
    public static EntryPermissions SetGroupId;
    public static EntryPermissions SetDirectoryPermissionControl;
}
public enum Xamarin.Tools.Zip.ErrorCode : Enum {
    public int value__;
    public static ErrorCode Unknown;
    public static ErrorCode OK;
    public static ErrorCode MultiDisk;
    public static ErrorCode Rename;
    public static ErrorCode Close;
    public static ErrorCode Seek;
    public static ErrorCode Read;
    public static ErrorCode Write;
    public static ErrorCode CRC;
    public static ErrorCode ZipClosed;
    public static ErrorCode NoEnt;
    public static ErrorCode Exists;
    public static ErrorCode Open;
    public static ErrorCode TmpOpen;
    public static ErrorCode Zlib;
    public static ErrorCode Memory;
    public static ErrorCode Changed;
    public static ErrorCode CompNotSupp;
    public static ErrorCode EOF;
    public static ErrorCode Inval;
    public static ErrorCode NoZip;
    public static ErrorCode Internal;
    public static ErrorCode Incons;
    public static ErrorCode Remove;
    public static ErrorCode Deleted;
    public static ErrorCode EncrNotSupp;
    public static ErrorCode RDOnly;
    public static ErrorCode NoPasswd;
    public static ErrorCode WrongPasswd;
    public static ErrorCode OptNotSup;
    public static ErrorCode InUse;
    public static ErrorCode Tell;
    public static ErrorCode CompressedData;
    public static ErrorCode Cancelled;
}
public enum Xamarin.Tools.Zip.ErrorType : Enum {
    public int value__;
    public static ErrorType None;
    public static ErrorType Sys;
    public static ErrorType Zlib;
    public static ErrorType Libzip;
}
public class Xamarin.Tools.Zip.ExtraField : object {
    private Byte[] rawData;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ushort <ID>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ushort <Length>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Local>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ushort <FieldIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ulong <EntryIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <DataValid>k__BackingField;
    public ushort ID { get; public set; }
    public ushort Length { get; public set; }
    public bool Local { get; public set; }
    public ushort FieldIndex { get; public set; }
    public ulong EntryIndex { get; public set; }
    public bool DataValid { get; protected set; }
    public Byte[] RawData { get; public set; }
    public ExtraField(ExtraField ef);
    [CompilerGeneratedAttribute]
public ushort get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(ushort value);
    [CompilerGeneratedAttribute]
public ushort get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(ushort value);
    [CompilerGeneratedAttribute]
public bool get_Local();
    [CompilerGeneratedAttribute]
public void set_Local(bool value);
    [CompilerGeneratedAttribute]
public ushort get_FieldIndex();
    [CompilerGeneratedAttribute]
public void set_FieldIndex(ushort value);
    [CompilerGeneratedAttribute]
public ulong get_EntryIndex();
    [CompilerGeneratedAttribute]
public void set_EntryIndex(ulong value);
    [CompilerGeneratedAttribute]
public bool get_DataValid();
    [CompilerGeneratedAttribute]
protected void set_DataValid(bool value);
    public Byte[] get_RawData();
    public void set_RawData(Byte[] value);
    protected virtual void Parse();
    internal virtual void Encode();
    protected ulong BytesToUnsignedLong(Byte[] data, int startIndex);
    protected Byte[] UnsignedIntToBytes(UInt32 data);
    protected UInt32 BytesToUnsignedInt(Byte[] data, int startIndex);
    protected ushort BytesToUnsignedShort(Byte[] data, int startIndex);
}
internal class Xamarin.Tools.Zip.ExtraField_ExtendedTimestamp : ExtraField {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <ModificationTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <AccessTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <CreationTime>k__BackingField;
    public DateTime ModificationTime { get; internal set; }
    public DateTime AccessTime { get; internal set; }
    public DateTime CreationTime { get; internal set; }
    public ExtraField_ExtendedTimestamp(ExtraField ef);
    public ExtraField_ExtendedTimestamp(ZipEntry entry, short fieldIndex, Nullable`1<DateTime> createTime, Nullable`1<DateTime> accessTime, Nullable`1<DateTime> modificationTime, bool local);
    [CompilerGeneratedAttribute]
public DateTime get_ModificationTime();
    [CompilerGeneratedAttribute]
internal void set_ModificationTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_AccessTime();
    [CompilerGeneratedAttribute]
internal void set_AccessTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
internal void set_CreationTime(DateTime value);
    protected virtual void Parse();
    internal virtual void Encode();
}
internal class Xamarin.Tools.Zip.ExtraField_InfoZipUnix3rdGeneration : ExtraField_UnixIDBase {
    public ExtraField_InfoZipUnix3rdGeneration(ExtraField ef);
    protected virtual void Parse();
    private bool GetID(byte size, int index, Byte[] data, UInt64& id);
}
internal class Xamarin.Tools.Zip.ExtraField_InfoZipUnixOriginal : ExtraField {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <AccessTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <ModificationTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<ushort> <UID>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<ushort> <GID>k__BackingField;
    public DateTime AccessTime { get; internal set; }
    public DateTime ModificationTime { get; internal set; }
    public Nullable`1<ushort> UID { get; internal set; }
    public Nullable`1<ushort> GID { get; internal set; }
    public ExtraField_InfoZipUnixOriginal(ExtraField ef);
    [CompilerGeneratedAttribute]
public DateTime get_AccessTime();
    [CompilerGeneratedAttribute]
internal void set_AccessTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_ModificationTime();
    [CompilerGeneratedAttribute]
internal void set_ModificationTime(DateTime value);
    [CompilerGeneratedAttribute]
public Nullable`1<ushort> get_UID();
    [CompilerGeneratedAttribute]
internal void set_UID(Nullable`1<ushort> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ushort> get_GID();
    [CompilerGeneratedAttribute]
internal void set_GID(Nullable`1<ushort> value);
    protected virtual void Parse();
}
internal class Xamarin.Tools.Zip.ExtraField_InfoZipUnixType2 : ExtraField_UnixIDBase {
    public ExtraField_InfoZipUnixType2(ExtraField ef);
    protected virtual void Parse();
}
internal abstract class Xamarin.Tools.Zip.ExtraField_UnixIDBase : ExtraField {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<ulong> <UID>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<ulong> <GID>k__BackingField;
    public Nullable`1<ulong> UID { get; internal set; }
    public Nullable`1<ulong> GID { get; internal set; }
    public ExtraField_UnixIDBase(ExtraField ef);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_UID();
    [CompilerGeneratedAttribute]
internal void set_UID(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_GID();
    [CompilerGeneratedAttribute]
internal void set_GID(Nullable`1<ulong> value);
}
public class Xamarin.Tools.Zip.Info : object {
    public static Versions GetVersions();
}
public interface Xamarin.Tools.Zip.IPlatformOptions {
}
public interface Xamarin.Tools.Zip.IPlatformServices {
    public abstract virtual bool IsRegularFile(ZipArchive archive, string path, Boolean& result);
    public abstract virtual bool IsDirectory(ZipArchive archive, string path, Boolean& result);
    public abstract virtual bool GetFilesystemPermissions(ZipArchive archive, string path, EntryPermissions& permissions);
    public abstract virtual bool StoreSpecialFile(ZipArchive archive, string sourcePath, string archivePath, Int64& index, CompressionMethod& compressionMethod);
    public abstract virtual bool SetEntryPermissions(ZipArchive archive, string sourcePath, ulong index, EntryPermissions permissions);
    public abstract virtual bool SetEntryPermissions(ZipArchive archive, ulong index, EntryPermissions permissions, bool isDirectory);
    public abstract virtual bool ReadAndProcessExtraFields(ZipEntry entry);
    public abstract virtual bool WriteExtraFields(ZipArchive archive, ZipEntry entry, IList`1<ExtraField> extraFields);
    public abstract virtual bool SetFileProperties(ZipEntry entry, string extractedFilePath, bool throwOnNativeErrors);
    public abstract virtual bool ExtractSpecialFile(ZipEntry entry, string destinationDir);
}
public static class Xamarin.Tools.Zip.KnownExtraFields : object {
    public static ushort Zip64ExtendedInformation;
    public static ushort AVInfo;
    public static ushort ReservedPFS;
    public static ushort OS2ExtendedAttributes;
    public static ushort NTFSFileTimes;
    public static ushort OpenVMS;
    public static ushort Unix;
    public static ushort ReservedFileAndForDescriptors;
    public static ushort PatchDescriptor;
    public static ushort X509PKCS7CertificateStore;
    public static ushort X509FileCertificateIDAndSignature;
    public static ushort X509CentralDirectoryCertificateID;
    public static ushort StrongEncryptionHeader;
    public static ushort RecordManagementControls;
    public static ushort PKCS7RecipientCertificateList;
    public static ushort IBMS390AttributesUncompressed;
    public static ushort IBMS390AttributesCompressed;
    public static ushort ReservedPOSZIP4690;
    public static ushort InfoZipOldMacintosh;
    public static ushort ZipItMacintoshFirstVersion;
    public static ushort ZipItMacintoshNoFullName;
    public static ushort ZipItMacintosh;
    public static ushort InfoZipMacintoshNew;
    public static ushort TandemNSK;
    public static ushort AcorSparkFS;
    public static ushort WindowsNTBinaryACL;
    public static ushort VMCMS;
    public static ushort MVS;
    public static ushort TheosOld;
    public static ushort FWKCSMD5;
    public static ushort OS2TextACL;
    public static ushort InfoZipOpenVMS;
    public static ushort MacintoshSmartZIP;
    public static ushort XceedOriginalLocation;
    public static ushort AOSVSBinaryACL;
    public static ushort ExtendedTimestamp;
    public static ushort XceedUnicode;
    public static ushort InfoZipUnixOriginal;
    public static ushort InfoZipUtf8Comment;
    public static ushort BeOS;
    public static ushort Theos;
    public static ushort InfoZipUtf8Name;
    public static ushort AtheOS;
    public static ushort ASiUnix;
    public static ushort InfoZipUnixType2;
    public static ushort InfoZipUnix3rdGeneration;
    public static ushort MicrosoftOpenPackaging;
    public static ushort SMSQDOS;
}
internal class Xamarin.Tools.Zip.Native : object {
    private static UInt32 LZS_SEEK_SET;
    private static UInt32 LZS_SEEK_CUR;
    private static UInt32 LZS_SEEK_END;
    private static UInt32 LZS_SEEK_INVALID;
    private static Native();
    public static int ZipSourceMakeCommandBitmask(SourceCommand cmd);
    public static bool ZipSourceGetArgs(IntPtr data, ulong len, T& ret);
    private static void lzs_get_versions(LZSVersions& versions);
    public static ulong lzs_get_size_zip_source_args_seek();
    public static UInt32 lzs_convert_whence_value(int whence);
    public static SeekOrigin ConvertWhence(int whence);
    public static Versions get_versions();
    public static IntPtr zip_open(IntPtr path, OpenFlags flags, ErrorCode& errorp);
    public static IntPtr zip_open(string path, OpenFlags flags, ErrorCode& errorp);
    public static IntPtr zip_open_from_source(IntPtr source, OpenFlags flags, zip_error_t& errorp);
    public static void zip_stat_init(zip_stat_t st);
    public static long zip_name_locate(IntPtr archive, IntPtr fname, OperationFlags flags);
    public static long zip_name_locate(IntPtr archive, string fname, OperationFlags flags);
    public static IntPtr zip_fopen(IntPtr archive, IntPtr fname, OperationFlags flags);
    public static IntPtr zip_fopen(IntPtr archive, string fname, OperationFlags flags);
    public static IntPtr zip_fopen_index(IntPtr archive, ulong index, OperationFlags flags);
    public static IntPtr zip_fopen_encrypted(IntPtr archive, IntPtr fname, OperatingSystem flags, string password);
    public static IntPtr zip_fopen_encrypted(IntPtr archive, string fname, OperatingSystem flags, string password);
    public static IntPtr zip_fopen_index_encrypted(IntPtr archive, ulong index, OperationFlags flags, string password);
    public static long zip_fread(IntPtr file, Byte[] buf, ulong nbytes);
    public static int zip_fclose(IntPtr file);
    public static int zip_close(IntPtr archive);
    public static void zip_discard(IntPtr archive);
    public static int zip_stat(IntPtr archive, IntPtr fname, OperationFlags flags, zip_stat_t& sb);
    public static int zip_stat(IntPtr archive, string fname, OperationFlags flags, zip_stat_t& sb);
    public static int zip_stat_index(IntPtr archive, ulong index, OperationFlags flags, zip_stat_t& sb);
    private static void StringToComment(string comment, IntPtr& utfString, UInt16& len);
    public static int zip_file_set_comment(IntPtr archive, ulong index, IntPtr comment, ushort len, OperationFlags flags);
    public static int zip_file_set_comment(IntPtr archive, ulong index, string comment);
    public static IntPtr zip_file_get_comment_ptr(IntPtr archive, ulong index, UInt32& lenp, OperationFlags flags);
    public static string zip_file_get_comment(IntPtr archive, ulong index, UInt32& lenp, OperationFlags flags);
    public static IntPtr zip_get_archive_comment_ptr(IntPtr archive, Int32& lenp, OperationFlags flags);
    public static string zip_get_archive_comment(IntPtr archive, OperationFlags flags);
    public static int zip_set_archive_comment(IntPtr archive, IntPtr comment, ushort len);
    public static int zip_set_archive_comment(IntPtr archive, string comment);
    public static int zip_get_archive_flag(IntPtr archive, ArchiveGlobalFlags flag, OperationFlags flags);
    public static IntPtr zip_get_name_ptr(IntPtr archive, ulong index, OperationFlags flags);
    public static string zip_get_name(IntPtr archive, ulong index, OperationFlags flags);
    public static long zip_get_num_entries(IntPtr archive, OperationFlags flags);
    public static int zip_set_default_password(IntPtr archive, string password);
    public static int zip_file_rename(IntPtr archive, ulong index, IntPtr name, OperationFlags flags);
    public static int zip_file_rename(IntPtr archive, ulong index, string name);
    public static int zip_delete(IntPtr archive, ulong index);
    public static int zip_unchange(IntPtr archive, ulong index);
    public static int zip_unchange_all(IntPtr archive);
    public static int zip_unchange_archive(IntPtr archive);
    public static int zip_file_extra_field_delete(IntPtr archive, ulong index, ushort extra_field_index, OperationFlags flags);
    public static int zip_file_extra_field_delete_by_id(IntPtr archive, ulong index, ushort extra_field_id, ushort extra_field_index, OperationFlags flags);
    public static IntPtr zip_file_extra_field_get(IntPtr archive, ulong index, ushort extra_field_index, UInt16& idp, UInt16& lenp, OperationFlags flags);
    public static IntPtr zip_file_extra_field_get_by_id(IntPtr archive, ulong index, ushort extra_field_id, ushort extra_field_index, UInt16& lenp, OperationFlags flags);
    private static int zip_file_extra_field_set(IntPtr archive, ulong index, ushort extra_field_id, ushort extra_field_index, Byte[] extra_field_data, ushort len, OperationFlags flags);
    public static int zip_file_extra_field_set(IntPtr archive, ulong index, ushort extra_field_id, ushort extra_field_index, Byte[] extra_field_data, OperationFlags flags);
    public static short zip_file_extra_fields_count(IntPtr archive, ulong index, OperationFlags flags);
    public static short zip_file_extra_fields_count_by_id(IntPtr archive, ulong index, ushort extra_field_id, OperationFlags flags);
    public static IntPtr zip_file_strerror_ptr(IntPtr file);
    public static string zip_file_strerror(IntPtr file);
    public static IntPtr zip_strerror(IntPtr archive);
    public static void zip_error_init(IntPtr error);
    public static void zip_error_init_with_code(IntPtr error, int ze);
    public static void zip_error_fini(IntPtr ze);
    public static IntPtr zip_error_strerror(IntPtr ze);
    public static void zip_source_free(IntPtr source);
    public static IntPtr zip_source_zip(IntPtr archive, IntPtr srcarchive, ulong srcidx, OpenFlags flags, ulong start, ulong len);
    public static IntPtr zip_source_file(IntPtr archive, IntPtr fname, ulong start, long len);
    public static IntPtr zip_source_file(IntPtr archive, string fname, ulong start, long len);
    public static IntPtr zip_source_file_create(IntPtr fname, ulong start, ulong len, IntPtr& error);
    public static IntPtr zip_source_file_create(string fname, ulong start, ulong len, IntPtr& error);
    public static IntPtr zip_source_function(IntPtr source, zip_source_callback callback, IntPtr user_data);
    public static IntPtr zip_source_function_create(zip_source_callback callback, IntPtr user_data, zip_error_t& errorp);
    public static long zip_source_seek_compute_offset(ulong offset, ulong length, IntPtr data, ulong data_length, zip_error_t& error);
    public static long zip_dir_add(IntPtr archive, IntPtr name, OperationFlags flags);
    public static long zip_dir_add(IntPtr archive, string name, OperationFlags flags);
    public static long zip_file_add(IntPtr archive, IntPtr name, IntPtr source, OperationFlags flags);
    public static long zip_file_add(IntPtr archive, string name, IntPtr source, OperationFlags flags);
    public static int zip_file_replace(IntPtr archive, ulong index, IntPtr source, OperationFlags flags);
    public static int zip_set_file_compression(IntPtr archive, ulong index, CompressionMethod comp, UInt32 comp_flags);
    public static int zip_file_set_mtime(IntPtr archive, ulong index, ulong mtime, UInt32 flags);
    public static IntPtr zip_source_buffer(IntPtr archive, Byte[] data, ulong len, int freep);
    public static IntPtr zip_source_buffer(IntPtr archive, Byte[] data, int freep);
    public static IntPtr zip_source_buffer_create(Byte[] data, ulong len, int freep, IntPtr error);
    public static IntPtr zip_source_buffer_create(Byte[] data, int freep, IntPtr error);
    public static int zip_file_get_external_attributes(IntPtr archive, ulong index, OperationFlags flags, Byte& opsys, UInt32& attributes);
    public static int zip_file_set_external_attributes(IntPtr archive, ulong index, OperationFlags flags, byte opsys, UInt32 attributes);
    public static IntPtr zip_get_error(IntPtr archive);
    public static int zip_error_code_zip(IntPtr error);
    public static int zip_error_code_system(IntPtr error);
    public static long zip_source_make_command_bitmap(SourceCommand[] cmd);
    private static bool SetDllDirectory(string lpPathName);
}
[FlagsAttribute]
internal enum Xamarin.Tools.Zip.OpenFlags : Enum {
    public int value__;
    public static OpenFlags None;
    public static OpenFlags Create;
    public static OpenFlags Excl;
    public static OpenFlags CheckCons;
    public static OpenFlags Truncate;
    public static OpenFlags RDOnly;
}
public enum Xamarin.Tools.Zip.OperatingSystem : Enum {
    public UInt32 value__;
    public static OperatingSystem DOS;
    public static OperatingSystem AMIGA;
    public static OperatingSystem OPENVMS;
    public static OperatingSystem UNIX;
    public static OperatingSystem VM_CMS;
    public static OperatingSystem ATARI_ST;
    public static OperatingSystem OS_2;
    public static OperatingSystem MACINTOSH;
    public static OperatingSystem Z_SYSTEM;
    public static OperatingSystem CPM;
    public static OperatingSystem WINDOWS_NTFS;
    public static OperatingSystem MVS;
    public static OperatingSystem VSE;
    public static OperatingSystem ACORN_RISC;
    public static OperatingSystem VFAT;
    public static OperatingSystem ALTERNATE_MVS;
    public static OperatingSystem BEOS;
    public static OperatingSystem TANDEM;
    public static OperatingSystem OS_400;
    public static OperatingSystem OS_X;
}
[FlagsAttribute]
public enum Xamarin.Tools.Zip.OperationFlags : Enum {
    public UInt32 value__;
    public static OperationFlags None;
    public static OperationFlags NoCase;
    public static OperationFlags NoDir;
    public static OperationFlags Compressed;
    public static OperationFlags Unchanged;
    public static OperationFlags Recompress;
    public static OperationFlags Encrypted;
    public static OperationFlags Enc_Guess;
    public static OperationFlags Enc_Raw;
    public static OperationFlags Enc_Strict;
    public static OperationFlags Local;
    public static OperationFlags Central;
    public static OperationFlags Enc_UTF_8;
    public static OperationFlags Enc_CP437;
    public static OperationFlags Overwrite;
}
public class Xamarin.Tools.Zip.PlatformServices : object {
    private static List`1<IPlatformServices> serviceRegistry;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static PlatformServices <Instance>k__BackingField;
    public static PlatformServices Instance { get; }
    private static PlatformServices();
    [CompilerGeneratedAttribute]
public static PlatformServices get_Instance();
    private void RegisterUnixServices();
    public static void RegisterServices(IPlatformServices services);
    public static void UnregisterServices(IPlatformServices services);
    public bool IsDirectory(ZipArchive archive, string path);
    public bool IsRegularFile(ZipArchive archive, string path);
    public EntryPermissions GetFilesystemPermissions(ZipArchive archive, string path);
    public void SetEntryPermissions(ZipArchive archive, ulong index, EntryPermissions permissions, bool isDirectory);
    public void SetEntryPermissions(ZipArchive archive, string sourcePath, ulong index, EntryPermissions permissions);
    public long StoreSpecialFile(ZipArchive archive, string sourcePath, string archivePath, CompressionMethod& compressionMethod);
    public void ReadAndProcessExtraFields(ZipEntry entry);
    public bool WriteExtraFields(ZipArchive archive, ZipEntry entry, IList`1<ExtraField> extraFields);
    public void SetFileProperties(ZipEntry entry, string extractedFilePath, bool throwOnNativeExceptions);
    private bool CallServices(Func`2<IPlatformServices, bool> code);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Xamarin.Tools.Zip.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DestinationMustNotBeEmpty { get; }
    internal static string ErrorReadingFile_file { get; }
    internal static string ErrorReadingStream { get; }
    internal static string ExpectedAnInstanceOf_string_type { get; }
    internal static string FailedToReadSymLink_link_error { get; }
    internal static string FailedToSetOwner_entry_error_oserror { get; }
    internal static string FailedToStatFile_file_error { get; }
    internal static string FileAlreadyExists { get; }
    internal static string FileCouldNotBeOpened_file { get; }
    internal static string FileDoesNotExist_file { get; }
    internal static string FileDoesNotSupportSeeking_file { get; }
    internal static string FileFailedConsistencyChecks_file { get; }
    internal static string FileIsNotAZip_file { get; }
    internal static string FilePathAlreadyExists_file { get; }
    internal static string FileTypeNotSupported_filetype { get; }
    internal static string InvalidEntryType_string_type { get; }
    internal static string MustBeAnInstanceOf_string_type { get; }
    internal static string MustNotBeNullOrEmpty_string { get; }
    internal static string OutOfMemory { get; }
    internal static string StreamCouldNotBeOpened { get; }
    internal static string StreamDoesNotExist { get; }
    internal static string StreamDoesNotSupportSeeking { get; }
    internal static string StreamFailedConsistencyChecks { get; }
    internal static string StreamIsNotAZip { get; }
    internal static string UnableToDetermineFileType_file { get; }
    internal static string UnexpectedLibZipError_error { get; }
    internal static string UnexpectedOptionsType_string_type_type { get; }
    internal static string UnknownError { get; }
    internal static string UnsupportedPermission_UnixExternalPermissions { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DestinationMustNotBeEmpty();
    internal static string get_ErrorReadingFile_file();
    internal static string get_ErrorReadingStream();
    internal static string get_ExpectedAnInstanceOf_string_type();
    internal static string get_FailedToReadSymLink_link_error();
    internal static string get_FailedToSetOwner_entry_error_oserror();
    internal static string get_FailedToStatFile_file_error();
    internal static string get_FileAlreadyExists();
    internal static string get_FileCouldNotBeOpened_file();
    internal static string get_FileDoesNotExist_file();
    internal static string get_FileDoesNotSupportSeeking_file();
    internal static string get_FileFailedConsistencyChecks_file();
    internal static string get_FileIsNotAZip_file();
    internal static string get_FilePathAlreadyExists_file();
    internal static string get_FileTypeNotSupported_filetype();
    internal static string get_InvalidEntryType_string_type();
    internal static string get_MustBeAnInstanceOf_string_type();
    internal static string get_MustNotBeNullOrEmpty_string();
    internal static string get_OutOfMemory();
    internal static string get_StreamCouldNotBeOpened();
    internal static string get_StreamDoesNotExist();
    internal static string get_StreamDoesNotSupportSeeking();
    internal static string get_StreamFailedConsistencyChecks();
    internal static string get_StreamIsNotAZip();
    internal static string get_UnableToDetermineFileType_file();
    internal static string get_UnexpectedLibZipError_error();
    internal static string get_UnexpectedOptionsType_string_type_type();
    internal static string get_UnknownError();
    internal static string get_UnsupportedPermission_UnixExternalPermissions();
}
public enum Xamarin.Tools.Zip.SourceCommand : Enum {
    public int value__;
    public static SourceCommand Open;
    public static SourceCommand Read;
    public static SourceCommand Close;
    public static SourceCommand Stat;
    public static SourceCommand Error;
    public static SourceCommand Free;
    public static SourceCommand Seek;
    public static SourceCommand Tell;
    public static SourceCommand BeginWrite;
    public static SourceCommand CommitWrite;
    public static SourceCommand RollbackWrite;
    public static SourceCommand Write;
    public static SourceCommand SeekWrite;
    public static SourceCommand TellWrite;
    public static SourceCommand Supports;
    public static SourceCommand Remove;
    public static SourceCommand Reserved1;
    public static SourceCommand BeginWriteCloning;
    public static SourceCommand AcceptEmpty;
    public static SourceCommand GetFileAttributes;
}
[FlagsAttribute]
public enum Xamarin.Tools.Zip.StatFlags : Enum {
    public ulong value__;
    public static StatFlags Name;
    public static StatFlags Index;
    public static StatFlags Size;
    public static StatFlags CompSize;
    public static StatFlags MTime;
    public static StatFlags CRC;
    public static StatFlags CompMethod;
    public static StatFlags EncryptionMethod;
    public static StatFlags Flags;
}
[FlagsAttribute]
internal enum Xamarin.Tools.Zip.UnixExternalPermissions : Enum {
    public UInt32 value__;
    public static UnixExternalPermissions IFMT;
    public static UnixExternalPermissions IFREG;
    public static UnixExternalPermissions IFSOCK;
    public static UnixExternalPermissions IFLNK;
    public static UnixExternalPermissions IFBLK;
    public static UnixExternalPermissions IFDIR;
    public static UnixExternalPermissions IFCHR;
    public static UnixExternalPermissions IFIFO;
    public static UnixExternalPermissions ISUID;
    public static UnixExternalPermissions ISGID;
    public static UnixExternalPermissions ISVTX;
    public static UnixExternalPermissions IRWXU;
    public static UnixExternalPermissions IRUSR;
    public static UnixExternalPermissions IWUSR;
    public static UnixExternalPermissions IXUSR;
    public static UnixExternalPermissions IRWXG;
    public static UnixExternalPermissions IRGRP;
    public static UnixExternalPermissions IWGRP;
    public static UnixExternalPermissions IXGRP;
    public static UnixExternalPermissions IRWXO;
    public static UnixExternalPermissions IROTH;
    public static UnixExternalPermissions IWOTH;
    public static UnixExternalPermissions IXOTH;
    public static UnixExternalPermissions IMODE;
}
public class Xamarin.Tools.Zip.UnixPlatformOptions : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <StoreSymlinks>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <VerboseLogging>k__BackingField;
    public bool StoreSymlinks { get; public set; }
    public bool VerboseLogging { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_StoreSymlinks();
    [CompilerGeneratedAttribute]
public void set_StoreSymlinks(bool value);
    [CompilerGeneratedAttribute]
public bool get_VerboseLogging();
    [CompilerGeneratedAttribute]
public void set_VerboseLogging(bool value);
}
internal class Xamarin.Tools.Zip.UnixPlatformServices : object {
    public sealed virtual bool IsDirectory(ZipArchive archive, string path, Boolean& result);
    public sealed virtual bool IsRegularFile(ZipArchive archive, string path, Boolean& result);
    public sealed virtual bool GetFilesystemPermissions(ZipArchive archive, string path, EntryPermissions& permissions);
    public sealed virtual bool ReadAndProcessExtraFields(ZipEntry zipEntry);
    private void SetIDSFromInfoZipUnixType2(IList`1<ExtraField> fields, UnixZipEntry entry);
    private void SetIDSFromInfoZipUnix3rdGeneration(IList`1<ExtraField> fields, UnixZipEntry entry);
    private void SetIDS(IList`1<ExtraField> fields, UnixZipEntry entry, Func`2<ExtraField, ExtraField_UnixIDBase> fieldMaker);
    private FilePermissions GetUnixPermissions(UnixZipEntry entry);
    private bool SetTimestampsFromInfoZipUnixOriginal(IList`1<ExtraField> fields, UnixZipEntry entry);
    private void SetOriginalUnixTimeStampTimes(ExtraField_InfoZipUnixOriginal tstamp, DateTime& modTime, DateTime& accTime);
    private bool SetTimestampsFromExtendedTimeStamp(IList`1<ExtraField> fields, UnixZipEntry entry);
    private void SetExtendedTimeStampTimes(ExtraField_ExtendedTimestamp tstamp, DateTime& modTime, DateTime& accTime, DateTime& createTime);
    private void ForEachExtraField(IList`1<ExtraField> fields, bool local, Action`1<ExtraField> code);
    public sealed virtual bool WriteExtraFields(ZipArchive archive, ZipEntry entry, IList`1<ExtraField> extraFields);
    public sealed virtual bool SetEntryPermissions(ZipArchive archive, ulong index, EntryPermissions requestedPermissions, bool isDirectory);
    public sealed virtual bool SetEntryPermissions(ZipArchive zipArchive, string sourcePath, ulong index, EntryPermissions requestedPermissions);
    private bool SetEntryPermissions(ZipArchive archive, ulong index, EntryPermissions requestedPermissions, UnixExternalPermissions unixPermissions);
    public sealed virtual bool StoreSpecialFile(ZipArchive zipArchive, string sourcePath, string archivePath, Int64& index, CompressionMethod& compressionMethod);
    public sealed virtual bool SetFileProperties(ZipEntry zipEntry, string extractedFilePath, bool throwOnNativeExceptions);
    private bool IsFileOfType(string path, FilePermissions mode, Boolean& result);
    public sealed virtual bool ExtractSpecialFile(ZipEntry entry, string destinationDir);
}
public class Xamarin.Tools.Zip.UnixZipArchive : ZipArchive {
    public UnixPlatformOptions UnixOptions { get; }
    internal UnixZipArchive(string defaultExtractionDir, UnixPlatformOptions options);
    internal UnixZipArchive(Stream stream, UnixPlatformOptions options, OpenFlags flags);
    public UnixPlatformOptions get_UnixOptions();
    public ZipEntry CreateSymbolicLink(string linkName, string linkDestination, EntryPermissions requestedPermissions, Encoding encoding);
    internal bool SetEntryUnixPermissions(ulong index, EntryPermissions requestedPermissions, UnixExternalPermissions unixPermissions);
}
public class Xamarin.Tools.Zip.UnixZipEntry : ZipEntry {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<ulong> <UID>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<ulong> <GID>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <AccessTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsSymlink>k__BackingField;
    internal static FilePermissions DefaultDirMode;
    internal static FilePermissions DefaultFileMode;
    private Nullable`1<FilePermissions> permissions;
    public UInt32 Permissions { get; public set; }
    public Nullable`1<ulong> UID { get; public set; }
    public Nullable`1<ulong> GID { get; public set; }
    public DateTime AccessTime { get; internal set; }
    public DateTime CreationTime { get; internal set; }
    public bool IsSymlink { get; internal set; }
    internal FilePermissions FilePermissions { get; internal set; }
    internal UnixZipEntry(ZipArchive archive, zip_stat_t stat);
    public UInt32 get_Permissions();
    public void set_Permissions(UInt32 value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_UID();
    [CompilerGeneratedAttribute]
public void set_UID(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_GID();
    [CompilerGeneratedAttribute]
public void set_GID(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public DateTime get_AccessTime();
    [CompilerGeneratedAttribute]
internal void set_AccessTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
internal void set_CreationTime(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_IsSymlink();
    [CompilerGeneratedAttribute]
internal void set_IsSymlink(bool value);
    private void SetFilePermissions(UInt32 value);
    internal FilePermissions get_FilePermissions();
    internal void set_FilePermissions(FilePermissions value);
    private UInt32 GetPermissions();
}
internal class Xamarin.Tools.Zip.Utilities : object {
    private static String[] RelativePathSegments;
    private static Char[] PathSeparatorChars;
    public static DateTime UnixEpoch;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static bool <IsUnix>k__BackingField;
    public static bool IsUnix { get; }
    public static int Errno { get; }
    private static Utilities();
    [CompilerGeneratedAttribute]
public static bool get_IsUnix();
    public static int get_Errno();
    public static string SanitizeFilePath(string filePath);
    private static string EnsureNotRooted(string filePath);
    private static string RemoveRelativePathComponents(string filePath);
    public static string GetStringFromNativeAnsi(IntPtr data);
    public static DateTime DateTimeFromUnixTime(ulong time);
    public static ulong UnixTimeFromDateTime(DateTime time);
    public static IntPtr StringToUtf8StringPtr(string str);
    public static IntPtr StringToUtf8StringPtr(string str, Int32& count);
    public static string Utf8StringPtrToString(IntPtr utf8Str);
    public static void FreeUtf8StringPtr(IntPtr ptr);
    public static Timeval TimevalFromDateTime(DateTime time);
    public static string GetLastErrorMessage();
    private static bool StatFile(string path, bool followSymlinks, Stat& sbuf);
    public static bool GetFilePermissions(string path, bool followSymlinks, FilePermissions& filePermissions);
    public static bool GetFilePermissions(string path, bool followSymlinks, UnixExternalPermissions& filePermissions);
    private static UnixExternalPermissions MapToUnixExternalPermissions(FilePermissions fp);
    public static bool GetFileType(string path, bool followSymlinks, FilePermissions& fileType);
    public static bool GetFileType(string path, bool followSymlinks, UnixExternalPermissions& fileType);
    public static UnixExternalPermissions GetFileType(Stat sbuf);
    public static UnixExternalPermissions GetFilePermissions(Stat sbuf);
}
public class Xamarin.Tools.Zip.Versions : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <BZip2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <LibZip>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Zlib>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ZStd>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ZlibNG>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <LZMA>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <LibZipSharp>k__BackingField;
    public string BZip2 { get; internal set; }
    public string LibZip { get; internal set; }
    public string Zlib { get; internal set; }
    public string ZStd { get; internal set; }
    public string ZlibNG { get; internal set; }
    public string LZMA { get; internal set; }
    public string LibZipSharp { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_BZip2();
    [CompilerGeneratedAttribute]
internal void set_BZip2(string value);
    [CompilerGeneratedAttribute]
public string get_LibZip();
    [CompilerGeneratedAttribute]
internal void set_LibZip(string value);
    [CompilerGeneratedAttribute]
public string get_Zlib();
    [CompilerGeneratedAttribute]
internal void set_Zlib(string value);
    [CompilerGeneratedAttribute]
public string get_ZStd();
    [CompilerGeneratedAttribute]
internal void set_ZStd(string value);
    [CompilerGeneratedAttribute]
public string get_ZlibNG();
    [CompilerGeneratedAttribute]
internal void set_ZlibNG(string value);
    [CompilerGeneratedAttribute]
public string get_LZMA();
    [CompilerGeneratedAttribute]
internal void set_LZMA(string value);
    [CompilerGeneratedAttribute]
public string get_LibZipSharp();
    [CompilerGeneratedAttribute]
internal void set_LibZipSharp(string value);
}
public class Xamarin.Tools.Zip.WindowsPlatformOptions : object {
}
public class Xamarin.Tools.Zip.WindowsPlatformServices : object {
    public sealed virtual bool ExtractSpecialFile(ZipEntry entry, string destinationDir);
    public sealed virtual bool IsDirectory(ZipArchive archive, string path, Boolean& result);
    public sealed virtual bool IsRegularFile(ZipArchive archive, string path, Boolean& result);
    public sealed virtual bool ReadAndProcessExtraFields(ZipEntry zipEntry);
    private bool SetTimestampsFromInfoZipUnixOriginal(IList`1<ExtraField> fields, WindowsZipEntry entry);
    private void SetOriginalUnixTimeStampTimes(ExtraField_InfoZipUnixOriginal tstamp, DateTime& modTime, DateTime& accTime);
    private bool SetTimestampsFromExtendedTimeStamp(IList`1<ExtraField> fields, WindowsZipEntry entry);
    private void SetExtendedTimeStampTimes(ExtraField_ExtendedTimestamp tstamp, DateTime& modTime, DateTime& accTime, DateTime& createTime);
    private void ForEachExtraField(IList`1<ExtraField> fields, bool local, Action`1<ExtraField> code);
    public sealed virtual bool SetEntryPermissions(ZipArchive archive, ulong index, EntryPermissions requestedPermissions, bool isDirectory);
    public sealed virtual bool SetEntryPermissions(ZipArchive zipArchive, string sourcePath, ulong index, EntryPermissions requestedPermissions);
    private bool SetEntryPermissions(ZipArchive archive, ulong index, EntryPermissions requestedPermissions, UnixExternalPermissions unixPermissions);
    public sealed virtual bool SetFileProperties(ZipEntry entry, string extractedFilePath, bool throwOnNativeErrors);
    public sealed virtual bool StoreSpecialFile(ZipArchive archive, string sourcePath, string archivePath, Int64& index, CompressionMethod& compressionMethod);
    public sealed virtual bool WriteExtraFields(ZipArchive archive, ZipEntry entry, IList`1<ExtraField> extraFields);
    public sealed virtual bool GetFilesystemPermissions(ZipArchive archive, string path, EntryPermissions& permissions);
}
public class Xamarin.Tools.Zip.WindowsZipArchive : ZipArchive {
    internal WindowsPlatformOptions UnixOptions { get; }
    internal WindowsZipArchive(string defaultExtractionDir, WindowsPlatformOptions options);
    internal WindowsZipArchive(Stream stream, WindowsPlatformOptions options, OpenFlags flags);
    internal WindowsPlatformOptions get_UnixOptions();
    internal bool SetEntryUnixPermissions(ulong index, EntryPermissions requestedPermissions, UnixExternalPermissions unixPermissions);
}
public class Xamarin.Tools.Zip.WindowsZipEntry : ZipEntry {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <AccessTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <CreationTime>k__BackingField;
    public DateTime AccessTime { get; internal set; }
    public DateTime CreationTime { get; internal set; }
    internal WindowsZipEntry(ZipArchive archive, zip_stat_t stat);
    [CompilerGeneratedAttribute]
public DateTime get_AccessTime();
    [CompilerGeneratedAttribute]
internal void set_AccessTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
internal void set_CreationTime(DateTime value);
}
public abstract class Xamarin.Tools.Zip.ZipArchive : object {
    public static EntryPermissions DefaultFilePermissions;
    public static EntryPermissions DefaultDirectoryPermissions;
    private IntPtr archive;
    private bool disposed;
    private HashSet`1<IDisposable> sources;
    private static zip_source_callback callback;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DefaultExtractionDir>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ErrorCode <LastErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IPlatformOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<EntryExtractEventArgs> EntryExtract;
    internal IntPtr ArchivePointer { get; }
    internal string DefaultExtractionDir { get; private set; }
    public ErrorCode LastErrorCode { get; private set; }
    public long EntryCount { get; }
    public string Comment { get; public set; }
    public IPlatformOptions Options { get; private set; }
    internal ZipArchive(string defaultExtractionDir, IPlatformOptions options);
    internal ZipArchive(Stream stream, IPlatformOptions options, OpenFlags flags);
    private static ZipArchive();
    internal IntPtr get_ArchivePointer();
    [CompilerGeneratedAttribute]
internal string get_DefaultExtractionDir();
    [CompilerGeneratedAttribute]
private void set_DefaultExtractionDir(string value);
    [CompilerGeneratedAttribute]
public ErrorCode get_LastErrorCode();
    [CompilerGeneratedAttribute]
private void set_LastErrorCode(ErrorCode value);
    public long get_EntryCount();
    public string get_Comment();
    public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public IPlatformOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(IPlatformOptions value);
    [CompilerGeneratedAttribute]
public void add_EntryExtract(EventHandler`1<EntryExtractEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_EntryExtract(EventHandler`1<EntryExtractEventArgs> value);
    protected virtual override void Finalize();
    private ErrorCode Open(string path, OpenFlags flags);
    public static ZipArchive Open(Stream stream, IPlatformOptions options);
    public static ZipArchive Create(Stream stream, IPlatformOptions options);
    public static ZipArchive Open(string path, FileMode mode, string defaultExtractionDir, bool strictConsistencyChecks, IPlatformOptions options);
    public void ExtractAll(string destinationDirectory, string password);
    public ZipEntry AddEntry(Byte[] data, string archivePath, EntryPermissions permissions, CompressionMethod compressionMethod, bool overwriteExisting);
    public ZipEntry AddStream(Stream stream, string archivePath, EntryPermissions permissions, CompressionMethod compressionMethod, bool overwriteExisting, Nullable`1<DateTime> modificationTime);
    public ZipEntry AddFileToDirectory(string sourcePath, string archiveDirectory, EntryPermissions permissions, CompressionMethod compressionMethod, bool overwriteExisting, bool useFileDirectory);
    public ZipEntry AddFile(string sourcePath, string archivePath, EntryPermissions permissions, CompressionMethod compressionMethod, bool overwriteExisting);
    public ZipEntry AddEntry(string entryName, Stream data, CompressionMethod compressionMethod);
    public ZipEntry AddEntry(string entryName, string text, Encoding encoding, CompressionMethod compressionMethod);
    public void AddFiles(IEnumerable`1<string> fileNames, string directoryPathInZip, bool useFileDirectories);
    public void DeleteEntry(ZipEntry entry);
    public void DeleteEntry(string entryName, bool caseSensitive);
    public void DeleteEntry(ulong entryIndex);
    private string GetRootlessPath(string path);
    private long LookupEntry(string entryName, bool caseSensitive);
    public bool ContainsEntry(string entryName, bool caseSensitive);
    public bool ContainsEntry(string entryName, Int64& index, bool caseSensitive);
    public void AddDirectory(string folder, string folderInArchive, CompressionMethod compressionMethod);
    public void CreateDirectory(string directoryName, EntryPermissions permissions);
    internal string EnsureArchivePath(string archivePath, bool isDir);
    private string ArchiveNameForFile(string filename, string directoryPathInZip);
    private string NormalizeArchivePath(bool isDir, string archivePath);
    private bool IsDirectorySeparator(char ch);
    public ZipEntry ReadEntry(string entryName, bool caseSensitive);
    public ZipEntry ReadEntry(ulong index);
    public ZipEntry ReadEntry(ulong index, bool throwIfDeleted);
    internal ZipException GetErrorException();
    internal static long stream_callback(IntPtr state, IntPtr data, ulong len, SourceCommand cmd);
    internal void OnEntryExtract(EntryExtractEventArgs args);
    public void Close();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    public sealed virtual IEnumerator`1<ZipEntry> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private static ZipArchive CreateArchiveInstance(string defaultExtractionDir, IPlatformOptions options);
    private static ZipArchive CreateInstanceFromStream(Stream stream, OpenFlags flags, IPlatformOptions options);
    private static IPlatformOptions EnsureOptions(IPlatformOptions options);
    [CompilerGeneratedAttribute]
internal static bool <stream_callback>g__SeekIfNeeded|61_0(Stream s, SeekOrigin origin, long offset);
}
public abstract class Xamarin.Tools.Zip.ZipEntry : object {
    private static int ReadBufSize;
    private ZipArchive archive;
    private zip_stat_t stat;
    private StatFlags valid;
    private short localExtraFieldsCount;
    private short centralExtraFieldsCount;
    private string nativeName;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ulong <Index>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ulong <Size>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ulong <CompressedSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <ModificationTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private UInt32 <CRC>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CompressionMethod <CompressionMethod>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EncryptionMethod <EncryptionMethod>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private UInt32 <ExternalAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private OperatingSystem <OperatingSystem>k__BackingField;
    public ZipArchive Archive { get; }
    public ulong Index { get; private set; }
    public string FullName { get; private set; }
    public string NativeFullName { get; }
    public ulong Size { get; private set; }
    public ulong CompressedSize { get; private set; }
    public DateTime ModificationTime { get; internal set; }
    public UInt32 CRC { get; private set; }
    public CompressionMethod CompressionMethod { get; private set; }
    public EncryptionMethod EncryptionMethod { get; private set; }
    public bool IsDirectory { get; internal set; }
    public string Comment { get; public set; }
    public UInt32 ExternalAttributes { get; private set; }
    public OperatingSystem OperatingSystem { get; private set; }
    internal ZipEntry(ZipArchive archive, zip_stat_t stat);
    public ZipArchive get_Archive();
    [CompilerGeneratedAttribute]
public ulong get_Index();
    [CompilerGeneratedAttribute]
private void set_Index(ulong value);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
private void set_FullName(string value);
    public string get_NativeFullName();
    [CompilerGeneratedAttribute]
public ulong get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_CompressedSize();
    [CompilerGeneratedAttribute]
private void set_CompressedSize(ulong value);
    [CompilerGeneratedAttribute]
public DateTime get_ModificationTime();
    [CompilerGeneratedAttribute]
internal void set_ModificationTime(DateTime value);
    [CompilerGeneratedAttribute]
public UInt32 get_CRC();
    [CompilerGeneratedAttribute]
private void set_CRC(UInt32 value);
    [CompilerGeneratedAttribute]
public CompressionMethod get_CompressionMethod();
    [CompilerGeneratedAttribute]
private void set_CompressionMethod(CompressionMethod value);
    [CompilerGeneratedAttribute]
public EncryptionMethod get_EncryptionMethod();
    [CompilerGeneratedAttribute]
private void set_EncryptionMethod(EncryptionMethod value);
    [CompilerGeneratedAttribute]
public bool get_IsDirectory();
    [CompilerGeneratedAttribute]
internal void set_IsDirectory(bool value);
    public string get_Comment();
    public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_ExternalAttributes();
    [CompilerGeneratedAttribute]
private void set_ExternalAttributes(UInt32 value);
    [CompilerGeneratedAttribute]
public OperatingSystem get_OperatingSystem();
    [CompilerGeneratedAttribute]
private void set_OperatingSystem(OperatingSystem value);
    internal void Init();
    private string GetNativeFileName(string name);
    public void Rename(string newName);
    public void Delete();
    public void Extract(Stream stream);
    public string Extract(string destinationDir, string destinationFileName, FileMode outputFileMode, bool useNativeFileName, string password);
    private bool TranslateLocation(ZipHeaderLocation location, OperationFlags& flags);
    private ushort GetFieldCount(ushort fieldID, ZipHeaderLocation location, OperationFlags flags);
    public bool ExtraFieldPresent(ushort fieldID, ZipHeaderLocation location);
    public IList`1<ExtraField> GetExtraField(ushort fieldID, ZipHeaderLocation location, bool required);
    private void GatherExtraFields(ushort count, ushort fieldID, OperationFlags flags, List`1<ExtraField> fields, bool required);
    private void DoExtract(IntPtr zipFile, string destinationPath, FileMode outputFileMode, EntryExtractEventArgs args);
    private void DoExtract(IntPtr zipFile, Stream destinationStream, EntryExtractEventArgs args);
    private void OnExtract(EntryExtractEventArgs args);
    private T GetStatField(StatFlags field, Func`1<T> value, T deflt);
    private IntPtr OpenArchive(string password, OperationFlags flags);
    internal static ZipEntry Create(ZipArchive owner, zip_stat_t stat);
    [CompilerGeneratedAttribute]
private string <Init>b__59_0();
    [CompilerGeneratedAttribute]
private ulong <Init>b__59_1();
    [CompilerGeneratedAttribute]
private ulong <Init>b__59_2();
    [CompilerGeneratedAttribute]
private ulong <Init>b__59_3();
    [CompilerGeneratedAttribute]
private DateTime <Init>b__59_4();
    [CompilerGeneratedAttribute]
private UInt32 <Init>b__59_5();
    [CompilerGeneratedAttribute]
private CompressionMethod <Init>b__59_6();
    [CompilerGeneratedAttribute]
private EncryptionMethod <Init>b__59_7();
}
internal class Xamarin.Tools.Zip.ZipEntryEnumerator : object {
    private ZipArchive archive;
    private ZipEntry current;
    private ulong index;
    private bool start;
    public ZipEntry Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public ZipEntryEnumerator(ZipArchive archive);
    public sealed virtual ZipEntry get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
    private ZipEntry ReadEntry(ulong index);
}
public class Xamarin.Tools.Zip.ZipException : Exception {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ErrorCode <ZipErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <RawZipErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <SystemError>k__BackingField;
    public ErrorCode ZipErrorCode { get; private set; }
    public int RawZipErrorCode { get; private set; }
    public int SystemError { get; private set; }
    public ZipException(string message);
    public ZipException(string message, Exception inner);
    public ZipException(SerializationInfo info, StreamingContext context);
    public ZipException(string message, int zip_error, int system_error);
    public ZipException(string message, Exception inner, int zip_error, int system_error);
    [CompilerGeneratedAttribute]
public ErrorCode get_ZipErrorCode();
    [CompilerGeneratedAttribute]
private void set_ZipErrorCode(ErrorCode value);
    [CompilerGeneratedAttribute]
public int get_RawZipErrorCode();
    [CompilerGeneratedAttribute]
private void set_RawZipErrorCode(int value);
    [CompilerGeneratedAttribute]
public int get_SystemError();
    [CompilerGeneratedAttribute]
private void set_SystemError(int value);
    private void CommonInit(int errorCode, int system_error);
}
public enum Xamarin.Tools.Zip.ZipHeaderLocation : Enum {
    public int value__;
    public static ZipHeaderLocation Any;
    public static ZipHeaderLocation Local;
    public static ZipHeaderLocation Central;
    public static ZipHeaderLocation Both;
}
public class Xamarin.Tools.Zip.ZipIOException : IOException {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ErrorCode <ZipErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Errno>k__BackingField;
    public ErrorCode ZipErrorCode { get; private set; }
    public int Errno { get; private set; }
    public ZipIOException(string message);
    public ZipIOException(string message, Exception inner);
    public ZipIOException(SerializationInfo info, StreamingContext context);
    public ZipIOException(string message, ErrorCode errorCode, int errno);
    public ZipIOException(string message, Exception inner, ErrorCode errorCode, int errno);
    [CompilerGeneratedAttribute]
public ErrorCode get_ZipErrorCode();
    [CompilerGeneratedAttribute]
private void set_ZipErrorCode(ErrorCode value);
    [CompilerGeneratedAttribute]
public int get_Errno();
    [CompilerGeneratedAttribute]
private void set_Errno(int value);
    private void CommonInit(ErrorCode errorCode, int errno);
}
