public class Microsoft.AppCenter.Analytics.Analytics : AppCenterService {
    internal static string LogTag;
    private static int MaxEventNameLength;
    private static object AnalyticsLock;
    private static Analytics modreq(System.Runtime.CompilerServices.IsVolatile) _instanceField;
    private bool _isManualSessionTrackerEnabled;
    private ISessionTracker _sessionTracker;
    private ISessionTrackerFactory _sessionTrackerFactory;
    public static Analytics Instance { get; public set; }
    public bool InstanceEnabled { get; public set; }
    protected string ChannelName { get; }
    public string ServiceName { get; }
    internal Analytics(ISessionTrackerFactory sessionTrackerFactory);
    private static Analytics();
    public static Analytics get_Instance();
    public static void set_Instance(Analytics value);
    public static Task`1<bool> IsEnabledAsync();
    public static Task SetEnabledAsync(bool enabled);
    public static void TrackEvent(string name, IDictionary`2<string, string> properties);
    public static void EnableManualSessionTracker();
    public static void StartSession();
    public virtual bool get_InstanceEnabled();
    public virtual void set_InstanceEnabled(bool value);
    protected virtual string get_ChannelName();
    public virtual string get_ServiceName();
    private void InstanceTrackEvent(string name, IDictionary`2<string, string> properties);
    public virtual void OnChannelGroupReady(IChannelGroup channelGroup, string appSecret);
    private void ApplyEnabledState(bool enabled);
    private ISessionTracker CreateSessionTracker(IChannelGroup channelGroup, IChannelUnit channel, IApplicationSettings applicationSettings);
    private bool ValidateName(String& name, string logType);
    private void SubscribeToApplicationLifecycleEvents();
    private void UnsubscribeFromApplicationLifecycleEvents();
    private void ApplicationResumingEventHandler(object sender, EventArgs e);
    private void ApplicationSuspendedEventHandler(object sender, EventArgs e);
}
public interface Microsoft.AppCenter.Analytics.Channel.ISessionTracker {
    public abstract virtual void Resume();
    public abstract virtual void Pause();
    public abstract virtual void Stop();
    public abstract virtual void EnableManualSessionTracker();
    public abstract virtual void StartSession();
}
public interface Microsoft.AppCenter.Analytics.Channel.ISessionTrackerFactory {
    public abstract virtual ISessionTracker CreateSessionTracker(IChannelGroup channelGroup, IChannel channel, IApplicationSettings applicationSettings);
}
internal class Microsoft.AppCenter.Analytics.Channel.SessionTracker : object {
    private SessionState _currentSessionState;
    private bool _isManualSessionTrackerEnabled;
    internal static long SessionTimeout;
    private IChannelUnit _channel;
    private long _lastQueuedLogTime;
    private long _lastResumedTime;
    private long _lastPausedTime;
    private object _lockObject;
    public SessionTracker(IChannel channelGroup, IChannelUnit channel);
    private static SessionTracker();
    public sealed virtual void Pause();
    public sealed virtual void Resume();
    public sealed virtual void Stop();
    private void HandleEnqueuingLog(object sender, EnqueuingLogEventArgs e);
    public sealed virtual void EnableManualSessionTracker();
    public sealed virtual void StartSession();
    private void SendStartSession();
    private void SendStartSessionIfNeeded();
    private bool HasSessionTimedOut(long now);
    internal static bool HasSessionTimedOut(long now, long lastQueuedLogTime, long lastResumedTime, long lastPausedTime);
    internal static bool SetExistingSessionId(Log log, IDictionary`2<long, Guid> sessions);
}
[JsonObjectAttribute("event")]
public class Microsoft.AppCenter.Analytics.Ingestion.Models.EventLog : LogWithProperties {
    internal static string JsonIdentifier;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [JsonPropertyAttribute]
public Guid Id { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    public EventLog(Device device, Guid id, string name, Nullable`1<DateTime> timestamp, Nullable`1<Guid> sid, string userId, string dataResidencyRegion, IDictionary`2<string, string> properties);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public virtual void Validate();
}
[JsonObjectAttribute("page")]
public class Microsoft.AppCenter.Analytics.Ingestion.Models.PageLog : LogWithProperties {
    internal static string JsonIdentifier;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    public PageLog(Device device, string name, Nullable`1<DateTime> timestamp, Nullable`1<Guid> sid, string userId, string dataResidencyRegion, IDictionary`2<string, string> properties);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public virtual void Validate();
}
[JsonObjectAttribute("startSession")]
public class Microsoft.AppCenter.Analytics.Ingestion.Models.StartSessionLog : Log {
    internal static StartSessionLog Empty;
    internal static string JsonIdentifier;
    public StartSessionLog(Device device, Nullable`1<DateTime> timestamp, Nullable`1<Guid> sid, string dataResidencyRegion);
    private static StartSessionLog();
    public virtual void Validate();
}
internal class Microsoft.AppCenter.Analytics.NamespaceDoc : object {
}
