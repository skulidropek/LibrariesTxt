[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ApiDefinition.Messaging : object {
    internal static string LIBOBJC_DYLIB;
    internal static Assembly this_assembly;
    private static Messaging();
    public static IntPtr IntPtr_objc_msgSend(IntPtr receiever, IntPtr selector);
    public static IntPtr IntPtr_objc_msgSendSuper(IntPtr receiever, IntPtr selector);
    public static IntPtr IntPtr_objc_msgSend_IntPtr(IntPtr receiever, IntPtr selector, IntPtr arg1);
    public static IntPtr IntPtr_objc_msgSendSuper_IntPtr(IntPtr receiever, IntPtr selector, IntPtr arg1);
    public static void void_objc_msgSend(IntPtr receiver, IntPtr selector);
    public static void void_objc_msgSendSuper(IntPtr receiver, IntPtr selector);
    public static byte bool_objc_msgSend(IntPtr receiver, IntPtr selector);
    public static byte bool_objc_msgSendSuper(IntPtr receiver, IntPtr selector);
    public static NativeHandle NativeHandle_objc_msgSend(IntPtr receiver, IntPtr selector);
    public static NativeHandle NativeHandle_objc_msgSendSuper(IntPtr receiver, IntPtr selector);
    public static void void_objc_msgSend_bool(IntPtr receiver, IntPtr selector, byte arg1);
    public static void void_objc_msgSendSuper_bool(IntPtr receiver, IntPtr selector, byte arg1);
    public static void void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1, NativeHandle arg2, NativeHandle arg3);
    public static void void_objc_msgSendSuper_NativeHandle_NativeHandle_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1, NativeHandle arg2, NativeHandle arg3);
    public static void void_objc_msgSend_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1);
    public static void void_objc_msgSendSuper_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1);
    public static void void_objc_msgSend_UIntPtr(IntPtr receiver, IntPtr selector, UIntPtr arg1);
    public static void void_objc_msgSendSuper_UIntPtr(IntPtr receiver, IntPtr selector, UIntPtr arg1);
    public static byte bool_objc_msgSend_NativeHandle_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1, NativeHandle arg2);
    public static byte bool_objc_msgSendSuper_NativeHandle_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1, NativeHandle arg2);
    public static NativeHandle NativeHandle_objc_msgSend_NativeHandle_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1, NativeHandle arg2);
    public static NativeHandle NativeHandle_objc_msgSendSuper_NativeHandle_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1, NativeHandle arg2);
    public static void void_objc_msgSend_NativeHandle_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1, NativeHandle arg2);
    public static void void_objc_msgSendSuper_NativeHandle_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1, NativeHandle arg2);
    public static NativeHandle NativeHandle_objc_msgSend_NativeHandle_NativeHandle_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1, NativeHandle arg2, NativeHandle arg3);
    public static NativeHandle NativeHandle_objc_msgSendSuper_NativeHandle_NativeHandle_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1, NativeHandle arg2, NativeHandle arg3);
    public static UIntPtr UIntPtr_objc_msgSend(IntPtr receiver, IntPtr selector);
    public static UIntPtr UIntPtr_objc_msgSendSuper(IntPtr receiver, IntPtr selector);
    public static byte bool_objc_msgSend_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1);
    public static byte bool_objc_msgSendSuper_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1);
    public static NativeHandle NativeHandle_objc_msgSend_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1);
    public static NativeHandle NativeHandle_objc_msgSendSuper_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1);
}
public class Microsoft.AppCenter.Crashes.AndroidErrorDetails : object {
    [CompilerGeneratedAttribute]
private object <Throwable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ThreadName>k__BackingField;
    [ObsoleteAttribute("This property is no longer set due to a security issue, use StackTrace instead.")]
public object Throwable { get; }
    public string StackTrace { get; }
    public string ThreadName { get; }
    internal AndroidErrorDetails(string stackTrace, string threadName);
    [CompilerGeneratedAttribute]
public object get_Throwable();
    [CompilerGeneratedAttribute]
public string get_StackTrace();
    [CompilerGeneratedAttribute]
public string get_ThreadName();
}
[ProtocolAttribute]
[ProtocolMemberAttribute]
[ProtocolMemberAttribute]
[ProtocolMemberAttribute]
[ProtocolMemberAttribute]
[ProtocolMemberAttribute]
public interface Microsoft.AppCenter.Crashes.Apple.Bindings.IMSACCrashesDelegate {
}
[ProtocolAttribute]
[ProtocolMemberAttribute]
[ProtocolMemberAttribute]
[ProtocolMemberAttribute]
public interface Microsoft.AppCenter.Crashes.Apple.Bindings.IMSACCrashHandlerSetupDelegate {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[RegisterAttribute("MSACCrashes", "True")]
public class Microsoft.AppCenter.Crashes.Apple.Bindings.MSACCrashes : NSObject {
    [BindingImplAttribute]
private static NativeHandle class_ptr;
    public NativeHandle ClassHandle { get; }
    [BindingImplAttribute]
public static bool HasCrashedInLastSession { get; }
    [BindingImplAttribute]
public static bool HasReceivedMemoryWarningInLastSession { get; }
    [BindingImplAttribute]
public static MSACErrorReport LastSessionCrashReport { get; }
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACCrashes(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACCrashes(NativeHandle handle);
    private static MSACCrashes();
    public virtual NativeHandle get_ClassHandle();
    [ExportAttribute("disableMachExceptionHandler")]
[BindingImplAttribute]
public static void DisableMachExceptionHandler();
    [ExportAttribute("generateTestCrash")]
[BindingImplAttribute]
public static void GenerateTestCrash();
    [ExportAttribute("isEnabled")]
[BindingImplAttribute]
public static bool IsEnabled();
    [ExportAttribute("notifyWithUserConfirmation:")]
[BindingImplAttribute]
public static void NotifyWithUserConfirmation(MSACUserConfirmation userConfirmation);
    [ExportAttribute("resetSharedInstance")]
[BindingImplAttribute]
public static void ResetSharedInstance();
    [ExportAttribute("setDelegate:")]
[BindingImplAttribute]
public static void SetDelegate(MSACCrashesDelegate crashesDelegate);
    [ExportAttribute("setEnabled:")]
[BindingImplAttribute]
public static void SetEnabled(bool isEnabled);
    [ExportAttribute("setUserConfirmationHandler:")]
[BindingImplAttribute]
public static void SetUserConfirmationHandler(MSACUserConfirmationHandler userConfirmationHandler);
    [NullableContextAttribute("1")]
[ExportAttribute("trackException:withProperties:attachments:")]
[BindingImplAttribute]
public static void TrackException(MSACExceptionModel exception, NSDictionary properties, NSArray attachments);
    [ExportAttribute("hasCrashedInLastSession")]
public static bool get_HasCrashedInLastSession();
    [ExportAttribute("hasReceivedMemoryWarningInLastSession")]
public static bool get_HasReceivedMemoryWarningInLastSession();
    [ExportAttribute("lastSessionCrashReport")]
public static MSACErrorReport get_LastSessionCrashReport();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ProtocolAttribute]
[RegisterAttribute("ApiDefinition__Microsoft_AppCenter_Crashes_Apple_Bindings_MSACCrashesDelegate", "False")]
[ModelAttribute]
public class Microsoft.AppCenter.Crashes.Apple.Bindings.MSACCrashesDelegate : NSObject {
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACCrashesDelegate(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACCrashesDelegate(NativeHandle handle);
    [ExportAttribute("attachmentsWithCrashes:forErrorReport:")]
[BindingImplAttribute]
public virtual NSArray AttachmentsWithCrashes(MSACCrashes crashes, MSACErrorReport errorReport);
    [ExportAttribute("crashes:didFailSendingErrorReport:withError:")]
[BindingImplAttribute]
public virtual void CrashesDidFailSendingErrorReport(MSACCrashes crashes, MSACErrorReport errorReport, NSError error);
    [ExportAttribute("crashes:didSucceedSendingErrorReport:")]
[BindingImplAttribute]
public virtual void CrashesDidSucceedSendingErrorReport(MSACCrashes crashes, MSACErrorReport errorReport);
    [ExportAttribute("crashes:shouldProcessErrorReport:")]
[BindingImplAttribute]
public virtual bool CrashesShouldProcessErrorReport(MSACCrashes crashes, MSACErrorReport errorReport);
    [ExportAttribute("crashes:willSendErrorReport:")]
[BindingImplAttribute]
public virtual void CrashesWillSendErrorReport(MSACCrashes crashes, MSACErrorReport errorReport);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AppCenter.Crashes.Apple.Bindings.MSACCrashesDelegate_Extensions : object {
    [ExtensionAttribute]
[BindingImplAttribute]
public static bool CrashesShouldProcessErrorReport(IMSACCrashesDelegate This, MSACCrashes crashes, MSACErrorReport errorReport);
    [ExtensionAttribute]
[BindingImplAttribute]
public static NSArray AttachmentsWithCrashes(IMSACCrashesDelegate This, MSACCrashes crashes, MSACErrorReport errorReport);
    [ExtensionAttribute]
[BindingImplAttribute]
public static void CrashesWillSendErrorReport(IMSACCrashesDelegate This, MSACCrashes crashes, MSACErrorReport errorReport);
    [ExtensionAttribute]
[BindingImplAttribute]
public static void CrashesDidSucceedSendingErrorReport(IMSACCrashesDelegate This, MSACCrashes crashes, MSACErrorReport errorReport);
    [ExtensionAttribute]
[BindingImplAttribute]
public static void CrashesDidFailSendingErrorReport(IMSACCrashesDelegate This, MSACCrashes crashes, MSACErrorReport errorReport, NSError error);
}
internal class Microsoft.AppCenter.Crashes.Apple.Bindings.MSACCrashesDelegateWrapper : BaseWrapper {
    [PreserveAttribute]
public MSACCrashesDelegateWrapper(NativeHandle handle, bool owns);
}
[ProtocolAttribute]
[RegisterAttribute("ApiDefinition__Microsoft_AppCenter_Crashes_Apple_Bindings_MSACCrashHandlerSetupDelegate", "False")]
[ModelAttribute]
public class Microsoft.AppCenter.Crashes.Apple.Bindings.MSACCrashHandlerSetupDelegate : NSObject {
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACCrashHandlerSetupDelegate(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACCrashHandlerSetupDelegate(NativeHandle handle);
    [ExportAttribute("didSetUpCrashHandlers")]
[BindingImplAttribute]
public virtual void DidSetUpCrashHandlers();
    [ExportAttribute("shouldEnableUncaughtExceptionHandler")]
[BindingImplAttribute]
public virtual bool ShouldEnableUncaughtExceptionHandler();
    [ExportAttribute("willSetUpCrashHandlers")]
[BindingImplAttribute]
public virtual void WillSetUpCrashHandlers();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AppCenter.Crashes.Apple.Bindings.MSACCrashHandlerSetupDelegate_Extensions : object {
    [ExtensionAttribute]
[BindingImplAttribute]
public static void WillSetUpCrashHandlers(IMSACCrashHandlerSetupDelegate This);
    [ExtensionAttribute]
[BindingImplAttribute]
public static void DidSetUpCrashHandlers(IMSACCrashHandlerSetupDelegate This);
    [ExtensionAttribute]
[BindingImplAttribute]
public static bool ShouldEnableUncaughtExceptionHandler(IMSACCrashHandlerSetupDelegate This);
}
internal class Microsoft.AppCenter.Crashes.Apple.Bindings.MSACCrashHandlerSetupDelegateWrapper : BaseWrapper {
    [PreserveAttribute]
public MSACCrashHandlerSetupDelegateWrapper(NativeHandle handle, bool owns);
}
[RegisterAttribute("MSACErrorAttachmentLog", "True")]
public class Microsoft.AppCenter.Crashes.Apple.Bindings.MSACErrorAttachmentLog : NSObject {
    [BindingImplAttribute]
private static NativeHandle class_ptr;
    public NativeHandle ClassHandle { get; }
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACErrorAttachmentLog(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACErrorAttachmentLog(NativeHandle handle);
    private static MSACErrorAttachmentLog();
    public virtual NativeHandle get_ClassHandle();
    [NullableContextAttribute("1")]
[ExportAttribute("attachmentWithBinary:filename:contentType:")]
[BindingImplAttribute]
public static MSACErrorAttachmentLog AttachmentWithBinaryData(NSData data, string filename, string contentType);
    [NullableContextAttribute("2")]
[ExportAttribute("attachmentWithText:filename:")]
[BindingImplAttribute]
public static MSACErrorAttachmentLog AttachmentWithText(string text, string fileName);
}
[NativeAttribute]
public enum Microsoft.AppCenter.Crashes.Apple.Bindings.MSACErrorLogSetting : Enum {
    public ulong value__;
    public static MSACErrorLogSetting Disabled;
    public static MSACErrorLogSetting AlwaysAsk;
    public static MSACErrorLogSetting AutoSend;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("MSACErrorReport", "True")]
public class Microsoft.AppCenter.Crashes.Apple.Bindings.MSACErrorReport : NSObject {
    [BindingImplAttribute]
private static NativeHandle class_ptr;
    public NativeHandle ClassHandle { get; }
    [BindingImplAttribute]
public NSDate AppErrorTime { get; }
    [BindingImplAttribute]
public UIntPtr AppProcessIdentifier { get; }
    [BindingImplAttribute]
public NSDate AppStartTime { get; }
    [BindingImplAttribute]
public MSACDevice Device { get; }
    [BindingImplAttribute]
public string ExceptionName { get; }
    [BindingImplAttribute]
public string ExceptionReason { get; }
    [BindingImplAttribute]
public string IncidentIdentifier { get; }
    [BindingImplAttribute]
public bool IsAppKill { get; }
    [BindingImplAttribute]
public string ReporterKey { get; }
    [BindingImplAttribute]
public string Signal { get; }
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACErrorReport(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACErrorReport(NativeHandle handle);
    private static MSACErrorReport();
    public virtual NativeHandle get_ClassHandle();
    [ExportAttribute]
public virtual NSDate get_AppErrorTime();
    [ExportAttribute("appProcessIdentifier")]
public virtual UIntPtr get_AppProcessIdentifier();
    [ExportAttribute]
public virtual NSDate get_AppStartTime();
    [ExportAttribute("device")]
public virtual MSACDevice get_Device();
    [ExportAttribute("exceptionName")]
public virtual string get_ExceptionName();
    [ExportAttribute("exceptionReason")]
public virtual string get_ExceptionReason();
    [ExportAttribute("incidentIdentifier")]
public virtual string get_IncidentIdentifier();
    [ExportAttribute("isAppKill")]
public virtual bool get_IsAppKill();
    [ExportAttribute("reporterKey")]
public virtual string get_ReporterKey();
    [ExportAttribute("signal")]
public virtual string get_Signal();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("MSACExceptionModel", "True")]
public class Microsoft.AppCenter.Crashes.Apple.Bindings.MSACExceptionModel : NSObject {
    [BindingImplAttribute]
private static NativeHandle class_ptr;
    [NullableAttribute("2")]
[BindingImplAttribute]
private object __mt_Frames_var;
    public NativeHandle ClassHandle { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[BindingImplAttribute]
public MSACStackFrame[] Frames { get; public set; }
    [BindingImplAttribute]
public string Message { get; public set; }
    [NullableAttribute("2")]
[BindingImplAttribute]
public string StackTrace { get; public set; }
    [BindingImplAttribute]
public string Type { get; public set; }
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACExceptionModel(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACExceptionModel(NativeHandle handle);
    private static MSACExceptionModel();
    public virtual NativeHandle get_ClassHandle();
    [ExportAttribute]
public virtual MSACStackFrame[] get_Frames();
    [ExportAttribute]
public virtual void set_Frames(MSACStackFrame[] value);
    [ExportAttribute("message")]
public virtual string get_Message();
    [ExportAttribute("setMessage:")]
public virtual void set_Message(string value);
    [NullableContextAttribute("2")]
[ExportAttribute("stackTrace")]
public virtual string get_StackTrace();
    [NullableContextAttribute("2")]
[ExportAttribute("setStackTrace:")]
public virtual void set_StackTrace(string value);
    [ExportAttribute("type")]
public virtual string get_Type();
    [ExportAttribute("setType:")]
public virtual void set_Type(string value);
    [BindingImplAttribute]
protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[RegisterAttribute("MSACStackFrame", "True")]
public class Microsoft.AppCenter.Crashes.Apple.Bindings.MSACStackFrame : NSObject {
    [BindingImplAttribute]
private static NativeHandle class_ptr;
    [BindingImplAttribute]
private object __mt_LineNumber_var;
    public NativeHandle ClassHandle { get; }
    [BindingImplAttribute]
public string Address { get; public set; }
    [BindingImplAttribute]
public string ClassName { get; public set; }
    [BindingImplAttribute]
public string Code { get; public set; }
    [BindingImplAttribute]
public string FileName { get; public set; }
    [BindingImplAttribute]
public NSNumber LineNumber { get; public set; }
    [BindingImplAttribute]
public string MethodName { get; public set; }
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACStackFrame(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACStackFrame(NativeHandle handle);
    private static MSACStackFrame();
    public virtual NativeHandle get_ClassHandle();
    [ExportAttribute("isEqual:")]
[BindingImplAttribute]
public virtual bool IsEqual(MSACStackFrame frame);
    [ExportAttribute("address")]
public virtual string get_Address();
    [ExportAttribute("setAddress:")]
public virtual void set_Address(string value);
    [ExportAttribute("className")]
public virtual string get_ClassName();
    [ExportAttribute("setClassName:")]
public virtual void set_ClassName(string value);
    [ExportAttribute("code")]
public virtual string get_Code();
    [ExportAttribute("setCode:")]
public virtual void set_Code(string value);
    [ExportAttribute("fileName")]
public virtual string get_FileName();
    [ExportAttribute("setFileName:")]
public virtual void set_FileName(string value);
    [ExportAttribute]
public virtual NSNumber get_LineNumber();
    [ExportAttribute]
public virtual void set_LineNumber(NSNumber value);
    [ExportAttribute("methodName")]
public virtual string get_MethodName();
    [ExportAttribute("setMethodName:")]
public virtual void set_MethodName(string value);
    [BindingImplAttribute]
protected virtual void Dispose(bool disposing);
}
[NativeAttribute]
public enum Microsoft.AppCenter.Crashes.Apple.Bindings.MSACUserConfirmation : Enum {
    public ulong value__;
    public static MSACUserConfirmation DontSend;
    public static MSACUserConfirmation Send;
    public static MSACUserConfirmation Always;
}
public class Microsoft.AppCenter.Crashes.Apple.Bindings.MSACUserConfirmationHandler : MulticastDelegate {
    public MSACUserConfirmationHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual bool Invoke(MSACErrorReport[] reports);
    public virtual IAsyncResult BeginInvoke(MSACErrorReport[] reports, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[RegisterAttribute("MSACWrapperCrashesHelper", "True")]
public class Microsoft.AppCenter.Crashes.Apple.Bindings.MSACWrapperCrashesHelper : NSObject {
    [BindingImplAttribute]
private static NativeHandle class_ptr;
    public NativeHandle ClassHandle { get; }
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACWrapperCrashesHelper(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACWrapperCrashesHelper(NativeHandle handle);
    private static MSACWrapperCrashesHelper();
    public virtual NativeHandle get_ClassHandle();
    [NullableContextAttribute("1")]
[ExportAttribute("setCrashHandlerSetupDelegate:")]
[BindingImplAttribute]
public static void SetCrashHandlerSetupDelegate(MSACCrashHandlerSetupDelegate del);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("MSACWrapperException", "True")]
public class Microsoft.AppCenter.Crashes.Apple.Bindings.MSACWrapperException : NSObject {
    [BindingImplAttribute]
private static NativeHandle class_ptr;
    public NativeHandle ClassHandle { get; }
    [BindingImplAttribute]
public MSACWrapperExceptionModel Exception { get; public set; }
    [BindingImplAttribute]
public NSData ExceptionData { get; public set; }
    [BindingImplAttribute]
public NSNumber ProcessId { get; public set; }
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACWrapperException(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACWrapperException(NativeHandle handle);
    private static MSACWrapperException();
    public virtual NativeHandle get_ClassHandle();
    [ExportAttribute("modelException")]
public virtual MSACWrapperExceptionModel get_Exception();
    [ExportAttribute("setModelException:")]
public virtual void set_Exception(MSACWrapperExceptionModel value);
    [ExportAttribute("exceptionData")]
public virtual NSData get_ExceptionData();
    [ExportAttribute("setExceptionData:")]
public virtual void set_ExceptionData(NSData value);
    [ExportAttribute("processId")]
public virtual NSNumber get_ProcessId();
    [ExportAttribute("setProcessId:")]
public virtual void set_ProcessId(NSNumber value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("MSACWrapperExceptionManager", "True")]
public class Microsoft.AppCenter.Crashes.Apple.Bindings.MSACWrapperExceptionManager : NSObject {
    [BindingImplAttribute]
private static NativeHandle class_ptr;
    public NativeHandle ClassHandle { get; }
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACWrapperExceptionManager(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACWrapperExceptionManager(NativeHandle handle);
    private static MSACWrapperExceptionManager();
    public virtual NativeHandle get_ClassHandle();
    [ExportAttribute("loadWrapperExceptionWithUUIDString:")]
[BindingImplAttribute]
public static MSACWrapperException LoadWrapperExceptionWithUUID(string uuidString);
    [ExportAttribute("saveWrapperException:")]
[BindingImplAttribute]
public static void SaveWrapperException(MSACWrapperException wrapperException);
    [ExportAttribute("saveWrapperExceptionAndCrashReport:")]
[BindingImplAttribute]
public static void SaveWrapperExceptionAndCrashReport(MSACWrapperException wrapperException);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[RegisterAttribute("MSACWrapperExceptionModel", "True")]
public class Microsoft.AppCenter.Crashes.Apple.Bindings.MSACWrapperExceptionModel : MSACExceptionModel {
    [BindingImplAttribute]
private static NativeHandle class_ptr;
    [BindingImplAttribute]
private object __mt_InnerExceptions_var;
    public NativeHandle ClassHandle { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[BindingImplAttribute]
public MSACWrapperExceptionModel[] InnerExceptions { get; public set; }
    [BindingImplAttribute]
public string WrapperSdkName { get; public set; }
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACWrapperExceptionModel(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACWrapperExceptionModel(NativeHandle handle);
    private static MSACWrapperExceptionModel();
    public virtual NativeHandle get_ClassHandle();
    [ExportAttribute("isEqual:")]
[BindingImplAttribute]
public virtual bool IsEqual(MSACWrapperExceptionModel exception);
    [ExportAttribute]
public virtual MSACWrapperExceptionModel[] get_InnerExceptions();
    [ExportAttribute]
public virtual void set_InnerExceptions(MSACWrapperExceptionModel[] value);
    [ExportAttribute("wrapperSdkName")]
public virtual string get_WrapperSdkName();
    [ExportAttribute("setWrapperSdkName:")]
public virtual void set_WrapperSdkName(string value);
    [BindingImplAttribute]
protected virtual void Dispose(bool disposing);
}
public class Microsoft.AppCenter.Crashes.AppleErrorDetails : object {
    [CompilerGeneratedAttribute]
private string <ReporterKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionReason>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <AppProcessIdentifier>k__BackingField;
    public string ReporterKey { get; }
    public string Signal { get; }
    public string ExceptionName { get; }
    public string ExceptionReason { get; }
    public UInt32 AppProcessIdentifier { get; }
    internal AppleErrorDetails(string reporterKey, string signal, string exceptionName, string exceptionReason, UInt32 appProcessIdentifier);
    [CompilerGeneratedAttribute]
public string get_ReporterKey();
    [CompilerGeneratedAttribute]
public string get_Signal();
    [CompilerGeneratedAttribute]
public string get_ExceptionName();
    [CompilerGeneratedAttribute]
public string get_ExceptionReason();
    [CompilerGeneratedAttribute]
public UInt32 get_AppProcessIdentifier();
}
public class Microsoft.AppCenter.Crashes.Crashes : object {
    private static CrashesInitializationDelegate _crashesInitializationDelegate;
    private static CrashesDelegate _crashesDelegate;
    [CompilerGeneratedAttribute]
private static bool <UseMonoRuntimeSignalMethods>k__BackingField;
    internal static string LogTag;
    [CompilerGeneratedAttribute]
private static SendingErrorReportEventHandler SendingErrorReport;
    [CompilerGeneratedAttribute]
private static SentErrorReportEventHandler SentErrorReport;
    [CompilerGeneratedAttribute]
private static FailedToSendErrorReportEventHandler FailedToSendErrorReport;
    public static ShouldProcessErrorReportCallback ShouldProcessErrorReport;
    public static ShouldAwaitUserConfirmationCallback ShouldAwaitUserConfirmation;
    public static GetErrorAttachmentsCallback GetErrorAttachments;
    [PreserveAttribute]
public static Type BindingType { get; }
    public static bool UseMonoRuntimeSignalMethods { get; public set; }
    private static Crashes();
    public static Type get_BindingType();
    private static Task`1<bool> PlatformIsEnabledAsync();
    private static Task PlatformSetEnabledAsync(bool enabled);
    private static Task`1<bool> PlatformHasCrashedInLastSessionAsync();
    private static Task`1<ErrorReport> PlatformGetLastSessionCrashReportAsync();
    private static Task`1<bool> PlatformHasReceivedMemoryWarningInLastSessionAsync();
    private static void PlatformNotifyUserConfirmation(UserConfirmation confirmation);
    private static void PlatformTrackError(Exception exception, IDictionary`2<string, string> properties, ErrorAttachmentLog[] attachments);
    private static void OnUnhandledException(object sender, UnhandledExceptionEventArgs e);
    private static MSACWrapperExceptionModel GenerateAppleException(Exception exception, bool structuredFrames);
    private static MSACStackFrame[] GenerateStackFrames(Exception e);
    private static string AnonymizePath(string path);
    private static NSDictionary StringDictToNSDict(IDictionary`2<string, string> dict);
    private static void PlatformUnsetInstance();
    [CompilerGeneratedAttribute]
public static bool get_UseMonoRuntimeSignalMethods();
    [CompilerGeneratedAttribute]
public static void set_UseMonoRuntimeSignalMethods(bool value);
    [CompilerGeneratedAttribute]
public static void add_SendingErrorReport(SendingErrorReportEventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_SendingErrorReport(SendingErrorReportEventHandler value);
    [CompilerGeneratedAttribute]
public static void add_SentErrorReport(SentErrorReportEventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_SentErrorReport(SentErrorReportEventHandler value);
    [CompilerGeneratedAttribute]
public static void add_FailedToSendErrorReport(FailedToSendErrorReportEventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_FailedToSendErrorReport(FailedToSendErrorReportEventHandler value);
    public static void NotifyUserConfirmation(UserConfirmation confirmation);
    public static Task`1<bool> IsEnabledAsync();
    public static Task SetEnabledAsync(bool enabled);
    public static Task`1<bool> HasCrashedInLastSessionAsync();
    public static Task`1<ErrorReport> GetLastSessionCrashReportAsync();
    public static Task`1<bool> HasReceivedMemoryWarningInLastSessionAsync();
    [ConditionalAttribute("DEBUG")]
public static void GenerateTestCrash();
    public static void TrackError(Exception exception, IDictionary`2<string, string> properties, ErrorAttachmentLog[] attachments);
    internal static void UnsetInstance();
}
public class Microsoft.AppCenter.Crashes.CrashesInitializationDelegate : MSACCrashHandlerSetupDelegate {
    private IntPtr sigbus;
    private IntPtr sigsegv;
    private IntPtr sigfpe;
    public CrashesInitializationDelegate(IntPtr handle);
    private static int sigaction(Signal sig, IntPtr act, IntPtr oact);
    public virtual void WillSetUpCrashHandlers();
    public virtual void DidSetUpCrashHandlers();
    public virtual bool ShouldEnableUncaughtExceptionHandler();
}
internal static class Microsoft.AppCenter.Crashes.CrashesUtils : object {
    internal static Byte[] SerializeException(Exception exception);
    internal static string DeserializeException(Byte[] exceptionBytes);
}
public class Microsoft.AppCenter.Crashes.ErrorAttachmentLog : object {
    [CompilerGeneratedAttribute]
private MSACErrorAttachmentLog <InternalAttachment>k__BackingField;
    internal MSACErrorAttachmentLog InternalAttachment { get; }
    private ErrorAttachmentLog(MSACErrorAttachmentLog appleAttachment);
    [CompilerGeneratedAttribute]
internal MSACErrorAttachmentLog get_InternalAttachment();
    private static ErrorAttachmentLog PlatformAttachmentWithText(string text, string fileName);
    private static ErrorAttachmentLog PlatformAttachmentWithBinary(Byte[] data, string filename, string contentType);
    public static ErrorAttachmentLog AttachmentWithText(string text, string fileName);
    public static ErrorAttachmentLog AttachmentWithBinary(Byte[] data, string fileName, string contentType);
}
public class Microsoft.AppCenter.Crashes.ErrorReport : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <AppStartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <AppErrorTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Device <Device>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private AndroidErrorDetails <AndroidDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private AppleErrorDetails <AppleDetails>k__BackingField;
    public string Id { get; }
    public DateTimeOffset AppStartTime { get; }
    public DateTimeOffset AppErrorTime { get; }
    public Device Device { get; }
    [ObsoleteAttribute("This property is no longer set due to a security issue, use StackTrace as an alternative.")]
public Exception Exception { get; }
    public string StackTrace { get; }
    public AndroidErrorDetails AndroidDetails { get; }
    public AppleErrorDetails AppleDetails { get; }
    internal ErrorReport(MSACErrorReport msReport);
    private DateTimeOffset NSDateToDateTimeOffset(NSDate date);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_AppStartTime();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_AppErrorTime();
    [CompilerGeneratedAttribute]
public Device get_Device();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public string get_StackTrace();
    [CompilerGeneratedAttribute]
public AndroidErrorDetails get_AndroidDetails();
    [CompilerGeneratedAttribute]
public AppleErrorDetails get_AppleDetails();
}
public class Microsoft.AppCenter.Crashes.ErrorReportEventArgs : EventArgs {
    public ErrorReport Report;
}
public class Microsoft.AppCenter.Crashes.FailedToSendErrorReportEventArgs : ErrorReportEventArgs {
    public object Exception;
}
public class Microsoft.AppCenter.Crashes.FailedToSendErrorReportEventHandler : MulticastDelegate {
    public FailedToSendErrorReportEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FailedToSendErrorReportEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FailedToSendErrorReportEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.AppCenter.Crashes.GetErrorAttachmentsCallback : MulticastDelegate {
    public GetErrorAttachmentsCallback(object object, IntPtr method);
    public virtual IEnumerable`1<ErrorAttachmentLog> Invoke(ErrorReport report);
    public virtual IAsyncResult BeginInvoke(ErrorReport report, AsyncCallback callback, object object);
    public virtual IEnumerable`1<ErrorAttachmentLog> EndInvoke(IAsyncResult result);
}
internal class Microsoft.AppCenter.Crashes.NamespaceDoc : object {
}
public class Microsoft.AppCenter.Crashes.SendingErrorReportEventArgs : ErrorReportEventArgs {
}
public class Microsoft.AppCenter.Crashes.SendingErrorReportEventHandler : MulticastDelegate {
    public SendingErrorReportEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SendingErrorReportEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SendingErrorReportEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.AppCenter.Crashes.SentErrorReportEventArgs : ErrorReportEventArgs {
}
public class Microsoft.AppCenter.Crashes.SentErrorReportEventHandler : MulticastDelegate {
    public SentErrorReportEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SentErrorReportEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SentErrorReportEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.AppCenter.Crashes.ShouldAwaitUserConfirmationCallback : MulticastDelegate {
    public ShouldAwaitUserConfirmationCallback(object object, IntPtr method);
    public virtual bool Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Microsoft.AppCenter.Crashes.ShouldProcessErrorReportCallback : MulticastDelegate {
    public ShouldProcessErrorReportCallback(object object, IntPtr method);
    public virtual bool Invoke(ErrorReport report);
    public virtual IAsyncResult BeginInvoke(ErrorReport report, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Microsoft.AppCenter.Crashes.TestCrashException : Exception {
    private static string CrashMessage;
    protected TestCrashException(SerializationInfo info, StreamingContext context);
}
public enum Microsoft.AppCenter.Crashes.UserConfirmation : Enum {
    public int value__;
    public static UserConfirmation DontSend;
    public static UserConfirmation Send;
    public static UserConfirmation AlwaysSend;
}
[BindingImplAttribute]
internal static class ObjCRuntime.Trampolines : object {
}
