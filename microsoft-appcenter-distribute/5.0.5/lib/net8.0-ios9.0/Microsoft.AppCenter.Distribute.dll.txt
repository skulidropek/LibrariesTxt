[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ApiDefinition.Messaging : object {
    internal static string LIBOBJC_DYLIB;
    internal static Assembly this_assembly;
    private static Messaging();
    public static IntPtr IntPtr_objc_msgSend(IntPtr receiever, IntPtr selector);
    public static IntPtr IntPtr_objc_msgSendSuper(IntPtr receiever, IntPtr selector);
    public static IntPtr IntPtr_objc_msgSend_IntPtr(IntPtr receiever, IntPtr selector, IntPtr arg1);
    public static IntPtr IntPtr_objc_msgSendSuper_IntPtr(IntPtr receiever, IntPtr selector, IntPtr arg1);
    public static void void_objc_msgSend_bool(IntPtr receiver, IntPtr selector, byte arg1);
    public static void void_objc_msgSendSuper_bool(IntPtr receiver, IntPtr selector, byte arg1);
    public static byte bool_objc_msgSend(IntPtr receiver, IntPtr selector);
    public static byte bool_objc_msgSendSuper(IntPtr receiver, IntPtr selector);
    public static void void_objc_msgSend_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1);
    public static void void_objc_msgSendSuper_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1);
    public static void void_objc_msgSend_UIntPtr(IntPtr receiver, IntPtr selector, UIntPtr arg1);
    public static void void_objc_msgSendSuper_UIntPtr(IntPtr receiver, IntPtr selector, UIntPtr arg1);
    public static UIntPtr UIntPtr_objc_msgSend(IntPtr receiver, IntPtr selector);
    public static UIntPtr UIntPtr_objc_msgSendSuper(IntPtr receiver, IntPtr selector);
    public static void void_objc_msgSend(IntPtr receiver, IntPtr selector);
    public static void void_objc_msgSendSuper(IntPtr receiver, IntPtr selector);
    public static byte bool_objc_msgSend_NativeHandle_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1, NativeHandle arg2);
    public static byte bool_objc_msgSendSuper_NativeHandle_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1, NativeHandle arg2);
    public static int int_objc_msgSend(IntPtr receiver, IntPtr selector);
    public static int int_objc_msgSendSuper(IntPtr receiver, IntPtr selector);
    public static NativeHandle NativeHandle_objc_msgSend(IntPtr receiver, IntPtr selector);
    public static NativeHandle NativeHandle_objc_msgSendSuper(IntPtr receiver, IntPtr selector);
}
[ProtocolAttribute]
[ProtocolMemberAttribute]
[ProtocolMemberAttribute]
[ProtocolMemberAttribute]
public interface Microsoft.AppCenter.Distribute.Apple.Bindings.IMSACDistributeDelegate {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("MSACDistribute", "True")]
public class Microsoft.AppCenter.Distribute.Apple.Bindings.MSACDistribute : NSObject {
    [BindingImplAttribute]
private static NativeHandle class_ptr;
    public NativeHandle ClassHandle { get; }
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACDistribute(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACDistribute(NativeHandle handle);
    private static MSACDistribute();
    public virtual NativeHandle get_ClassHandle();
    [ExportAttribute("checkForUpdate")]
[BindingImplAttribute]
public static void CheckForUpdate();
    [ExportAttribute("disableAutomaticCheckForUpdate")]
[BindingImplAttribute]
public static void DisableAutomaticCheckForUpdate();
    [ExportAttribute("updateTrack")]
[BindingImplAttribute]
public static MSACUpdateTrack GetUpdateTrack();
    [ExportAttribute("isEnabled")]
[BindingImplAttribute]
public static bool IsEnabled();
    [ExportAttribute("notifyUpdateAction:")]
[BindingImplAttribute]
public static void NotifyUpdateAction(MSACUpdateAction action);
    [ExportAttribute("openURL:")]
[BindingImplAttribute]
public static void OpenUrl(NSUrl url);
    [ExportAttribute("resetSharedInstance")]
[BindingImplAttribute]
public static void ResetSharedInstance();
    [ExportAttribute("setApiUrl:")]
[BindingImplAttribute]
public static void SetApiUrl(string apiUrl);
    [ExportAttribute("setDelegate:")]
[BindingImplAttribute]
public static void SetDelegate(MSACDistributeDelegate distributeDelegate);
    [ExportAttribute("setEnabled:")]
[BindingImplAttribute]
public static void SetEnabled(bool isEnabled);
    [ExportAttribute("setInstallUrl:")]
[BindingImplAttribute]
public static void SetInstallUrl(string installUrl);
    [ExportAttribute("setUpdateTrack:")]
[BindingImplAttribute]
public static void SetUpdateTrack(MSACUpdateTrack updateTrack);
}
[ProtocolAttribute]
[RegisterAttribute("ApiDefinition__Microsoft_AppCenter_Distribute_Apple_Bindings_MSACDistributeDelegate", "False")]
[ModelAttribute]
public class Microsoft.AppCenter.Distribute.Apple.Bindings.MSACDistributeDelegate : NSObject {
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACDistributeDelegate(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACDistributeDelegate(NativeHandle handle);
    [NullableContextAttribute("1")]
[ExportAttribute("distributeNoReleaseAvailable:")]
[BindingImplAttribute]
public virtual void OnNoReleaseAvailable(MSACDistribute distribute);
    [NullableContextAttribute("1")]
[ExportAttribute("distribute:releaseAvailableWithDetails:")]
[BindingImplAttribute]
public virtual bool OnReleaseAvailable(MSACDistribute distribute, MSACReleaseDetails details);
    [NullableContextAttribute("1")]
[ExportAttribute("distributeWillExitApp:")]
[BindingImplAttribute]
public virtual void WillExitApp(MSACDistribute distribute);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AppCenter.Distribute.Apple.Bindings.MSACDistributeDelegate_Extensions : object {
    [ExtensionAttribute]
[BindingImplAttribute]
public static bool OnReleaseAvailable(IMSACDistributeDelegate This, MSACDistribute distribute, MSACReleaseDetails details);
    [ExtensionAttribute]
[BindingImplAttribute]
public static void WillExitApp(IMSACDistributeDelegate This, MSACDistribute distribute);
    [ExtensionAttribute]
[BindingImplAttribute]
public static void OnNoReleaseAvailable(IMSACDistributeDelegate This, MSACDistribute distribute);
}
internal class Microsoft.AppCenter.Distribute.Apple.Bindings.MSACDistributeDelegateWrapper : BaseWrapper {
    [PreserveAttribute]
public MSACDistributeDelegateWrapper(NativeHandle handle, bool owns);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("MSACReleaseDetails", "True")]
public class Microsoft.AppCenter.Distribute.Apple.Bindings.MSACReleaseDetails : NSObject {
    [BindingImplAttribute]
private static NativeHandle class_ptr;
    public NativeHandle ClassHandle { get; }
    [BindingImplAttribute]
public int Id { get; }
    [BindingImplAttribute]
public bool MandatoryUpdate { get; }
    [BindingImplAttribute]
public string ReleaseNotes { get; }
    [BindingImplAttribute]
public NSUrl ReleaseNotesUrl { get; }
    [BindingImplAttribute]
public string ShortVersion { get; }
    [BindingImplAttribute]
public string Version { get; }
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACReleaseDetails(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACReleaseDetails(NativeHandle handle);
    private static MSACReleaseDetails();
    public virtual NativeHandle get_ClassHandle();
    [ExportAttribute("id")]
public virtual int get_Id();
    [ExportAttribute("isMandatoryUpdate")]
public virtual bool get_MandatoryUpdate();
    [ExportAttribute("releaseNotes")]
public virtual string get_ReleaseNotes();
    [ExportAttribute("releaseNotesUrl")]
public virtual NSUrl get_ReleaseNotesUrl();
    [ExportAttribute("shortVersion")]
public virtual string get_ShortVersion();
    [ExportAttribute("version")]
public virtual string get_Version();
}
[NativeAttribute]
public enum Microsoft.AppCenter.Distribute.Apple.Bindings.MSACUpdateAction : Enum {
    public ulong value__;
    public static MSACUpdateAction Update;
    public static MSACUpdateAction Postpone;
}
[NativeAttribute]
public enum Microsoft.AppCenter.Distribute.Apple.Bindings.MSACUpdateTrack : Enum {
    public ulong value__;
    public static MSACUpdateTrack Public;
    public static MSACUpdateTrack Private;
}
public static class Microsoft.AppCenter.Distribute.Distribute : object {
    private static Type _internalBindingType;
    private static Delegate _delegate;
    private static ReleaseAvailableCallback _releaseAvailableCallback;
    private static WillExitAppCallback _willExitAppCallback;
    private static NoReleaseAvailableCallback _noReleaseAvailableCallback;
    [PreserveAttribute]
public static Type BindingType { get; }
    unknown static ReleaseAvailableCallback ReleaseAvailable {public set; }
    unknown static WillExitAppCallback WillExitApp {public set; }
    unknown static NoReleaseAvailableCallback NoReleaseAvailable {public set; }
    public static UpdateTrack UpdateTrack { get; public set; }
    private static Distribute();
    public static Type get_BindingType();
    private static Task`1<bool> PlatformIsEnabledAsync();
    private static Task PlatformSetEnabledAsync(bool enabled);
    private static void PlatformSetInstallUrl(string installUrl);
    private static void PlatformSetApiUrl(string apiUrl);
    public static void OpenUrl(NSUrl url);
    [ConditionalAttribute("DEBUG")]
public static void DontCheckForUpdatesInDebug();
    private static void SetReleaseAvailableCallback(ReleaseAvailableCallback releaseAvailableCallback);
    private static void SetWillExitAppCallback(WillExitAppCallback willExitAppCallback);
    private static void SetNoReleaseAvailable(NoReleaseAvailableCallback noReleaseAvailable);
    private static void HandleUpdateAction(UpdateAction updateAction);
    private static void SetUpdateTrack(UpdateTrack updateTrack);
    private static UpdateTrack GetUpdateTrack();
    private static void PlatformCheckForUpdate();
    private static void PlatformDisableAutomaticCheckForUpdate();
    private static void PlatformUnsetInstance();
    public static Task`1<bool> IsEnabledAsync();
    public static Task SetEnabledAsync(bool enabled);
    public static void SetInstallUrl(string installUrl);
    public static void SetApiUrl(string apiUrl);
    public static void set_ReleaseAvailable(ReleaseAvailableCallback value);
    public static void set_WillExitApp(WillExitAppCallback value);
    public static void set_NoReleaseAvailable(NoReleaseAvailableCallback value);
    public static void NotifyUpdateAction(UpdateAction updateAction);
    public static UpdateTrack get_UpdateTrack();
    public static void set_UpdateTrack(UpdateTrack value);
    public static void CheckForUpdate();
    public static void DisableAutomaticCheckForUpdate();
    internal static void UnsetInstance();
}
internal class Microsoft.AppCenter.Distribute.NamespaceDoc : object {
}
public class Microsoft.AppCenter.Distribute.NoReleaseAvailableCallback : MulticastDelegate {
    public NoReleaseAvailableCallback(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.AppCenter.Distribute.ReleaseAvailableCallback : MulticastDelegate {
    public ReleaseAvailableCallback(object object, IntPtr method);
    public virtual bool Invoke(ReleaseDetails releaseDetails);
    public virtual IAsyncResult BeginInvoke(ReleaseDetails releaseDetails, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Microsoft.AppCenter.Distribute.ReleaseDetails : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleaseNotes>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ReleaseNotesUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MandatoryUpdate>k__BackingField;
    public int Id { get; internal set; }
    public string Version { get; internal set; }
    public string ShortVersion { get; internal set; }
    public string ReleaseNotes { get; internal set; }
    public Uri ReleaseNotesUrl { get; internal set; }
    public bool MandatoryUpdate { get; internal set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
internal void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_ShortVersion();
    [CompilerGeneratedAttribute]
internal void set_ShortVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ReleaseNotes();
    [CompilerGeneratedAttribute]
internal void set_ReleaseNotes(string value);
    [CompilerGeneratedAttribute]
public Uri get_ReleaseNotesUrl();
    [CompilerGeneratedAttribute]
internal void set_ReleaseNotesUrl(Uri value);
    [CompilerGeneratedAttribute]
public bool get_MandatoryUpdate();
    [CompilerGeneratedAttribute]
internal void set_MandatoryUpdate(bool value);
}
public enum Microsoft.AppCenter.Distribute.UpdateAction : Enum {
    public int value__;
    public static UpdateAction Update;
    public static UpdateAction Postpone;
}
public enum Microsoft.AppCenter.Distribute.UpdateTrack : Enum {
    public int value__;
    public static UpdateTrack Public;
    public static UpdateTrack Private;
}
public class Microsoft.AppCenter.Distribute.WillExitAppCallback : MulticastDelegate {
    public WillExitAppCallback(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
