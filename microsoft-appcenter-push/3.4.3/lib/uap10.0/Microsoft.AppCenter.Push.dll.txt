[JsonObjectAttribute("pushInstallation")]
public class Microsoft.AppCenter.Push.Ingestion.Models.PushInstallationLog : Log {
    internal static string JsonIdentifier;
    [CompilerGeneratedAttribute]
private string <PushToken>k__BackingField;
    [JsonPropertyAttribute]
public string PushToken { get; public set; }
    public PushInstallationLog(Device device, string pushToken, Nullable`1<DateTime> timestamp, Nullable`1<Guid> sid, string userId);
    [CompilerGeneratedAttribute]
public string get_PushToken();
    [CompilerGeneratedAttribute]
public void set_PushToken(string value);
    public virtual void Validate();
}
internal interface Microsoft.AppCenter.Push.IWindowsPushNotificationChannelManager {
    public abstract virtual IAsyncOperation`1<PushNotificationChannel> CreatePushNotificationChannelForApplicationAsync();
}
public class Microsoft.AppCenter.Push.Push : AppCenterService {
    private PushNotificationChannel _channel;
    [CompilerGeneratedAttribute]
private string <LatestPushToken>k__BackingField;
    private static object PushLock;
    private static Push modreq(System.Runtime.CompilerServices.IsVolatile) _instanceField;
    private StatefulMutex _mutex;
    [CompilerGeneratedAttribute]
private static EventHandler`1<PushNotificationReceivedEventArgs> PushNotificationReceived;
    internal string LatestPushToken { get; internal set; }
    protected int TriggerCount { get; }
    public static Push Instance { get; public set; }
    public string ServiceName { get; }
    protected string ChannelName { get; }
    public bool InstanceEnabled { get; public set; }
    private static Push();
    [CompilerGeneratedAttribute]
internal string get_LatestPushToken();
    [CompilerGeneratedAttribute]
internal void set_LatestPushToken(string value);
    protected virtual int get_TriggerCount();
    public static void CheckLaunchedFromNotification(LaunchActivatedEventArgs e);
    [EditorBrowsableAttribute("1")]
public void InstanceCheckLaunchedFromNotification(string args);
    public void OnUserIdUpdated(object sender, UserIdUpdatedEventArgs e);
    private void ApplyEnabledState(bool enabled);
    private void OnPushNotificationReceivedHandler(PushNotificationChannel sender, PushNotificationReceivedEventArgs e);
    private void CreatePushNotificationChannel(Action`1<PushNotificationChannel> created);
    internal static PushNotificationReceivedEventArgs ParseAppCenterPush(XmlDocument content);
    internal static Dictionary`2<string, string> ParseLaunchString(string launchString);
    private static Dictionary`2<string, string> ParseCustomData(JObject appCenterData);
    public static Push get_Instance();
    public static void set_Instance(Push value);
    private static Task`1<bool> PlatformIsEnabledAsync();
    private static Task PlatformSetEnabledAsync(bool enabled);
    public virtual string get_ServiceName();
    protected virtual string get_ChannelName();
    public virtual void OnChannelGroupReady(IChannelGroup channelGroup, string appSecret);
    public virtual bool get_InstanceEnabled();
    public virtual void set_InstanceEnabled(bool value);
    public static Task`1<bool> IsEnabledAsync();
    public static Task SetEnabledAsync(bool enabled);
    [CompilerGeneratedAttribute]
public static void add_PushNotificationReceived(EventHandler`1<PushNotificationReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_PushNotificationReceived(EventHandler`1<PushNotificationReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
internal static Task`1<PushNotificationChannel> <CreatePushNotificationChannel>g__CreatePushNotificationChannelForApplicationAsync|12_0();
}
public class Microsoft.AppCenter.Push.PushNotificationReceivedEventArgs : EventArgs {
    public IDictionary`2<string, string> CustomData;
    public string Title;
    public string Message;
}
internal class Microsoft.AppCenter.Push.WindowsPushNotificationChannelManager : object {
    public IAsyncOperation`1<PushNotificationChannel> CreatePushNotificationChannelForApplicationAsync();
}
