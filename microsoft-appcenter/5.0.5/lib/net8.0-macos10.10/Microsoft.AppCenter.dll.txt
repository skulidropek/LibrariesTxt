internal static class ApiDefinition.Messaging : object {
    [NullableAttribute("1")]
internal static string LIBOBJC_DYLIB;
    [NullableAttribute("1")]
internal static Assembly this_assembly;
    private static Messaging();
    public static IntPtr IntPtr_objc_msgSend(IntPtr receiever, IntPtr selector);
    public static IntPtr IntPtr_objc_msgSendSuper(IntPtr receiever, IntPtr selector);
    public static IntPtr IntPtr_objc_msgSend_IntPtr(IntPtr receiever, IntPtr selector, IntPtr arg1);
    public static IntPtr IntPtr_objc_msgSendSuper_IntPtr(IntPtr receiever, IntPtr selector, IntPtr arg1);
    public static NativeHandle NativeHandle_objc_msgSend(IntPtr receiver, IntPtr selector);
    public static NativeHandle NativeHandle_objc_msgSendSuper(IntPtr receiver, IntPtr selector);
    public static void void_objc_msgSend(IntPtr receiver, IntPtr selector);
    public static void void_objc_msgSendSuper(IntPtr receiver, IntPtr selector);
    public static void void_objc_msgSend_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1);
    public static void void_objc_msgSendSuper_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1);
    public static void void_objc_msgSend_NativeHandle_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1, NativeHandle arg2);
    public static void void_objc_msgSendSuper_NativeHandle_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1, NativeHandle arg2);
    public static byte bool_objc_msgSend(IntPtr receiver, IntPtr selector);
    public static byte bool_objc_msgSendSuper(IntPtr receiver, IntPtr selector);
    public static void void_objc_msgSend_bool(IntPtr receiver, IntPtr selector, byte arg1);
    public static void void_objc_msgSendSuper_bool(IntPtr receiver, IntPtr selector, byte arg1);
    public static UIntPtr UIntPtr_objc_msgSend(IntPtr receiver, IntPtr selector);
    public static UIntPtr UIntPtr_objc_msgSendSuper(IntPtr receiver, IntPtr selector);
    public static void void_objc_msgSend_UIntPtr(IntPtr receiver, IntPtr selector, UIntPtr arg1);
    public static void void_objc_msgSendSuper_UIntPtr(IntPtr receiver, IntPtr selector, UIntPtr arg1);
    public static void void_objc_msgSend_Int64_NativeHandle(IntPtr receiver, IntPtr selector, long arg1, NativeHandle arg2);
    public static void void_objc_msgSendSuper_Int64_NativeHandle(IntPtr receiver, IntPtr selector, long arg1, NativeHandle arg2);
    public static byte bool_objc_msgSend_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1);
    public static byte bool_objc_msgSendSuper_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1);
    public static void void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle_NativeHandle_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1, NativeHandle arg2, NativeHandle arg3, NativeHandle arg4, NativeHandle arg5);
    public static void void_objc_msgSendSuper_NativeHandle_NativeHandle_NativeHandle_NativeHandle_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1, NativeHandle arg2, NativeHandle arg3, NativeHandle arg4, NativeHandle arg5);
    public static void void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle_NativeHandle_NativeHandle_bool_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1, NativeHandle arg2, NativeHandle arg3, NativeHandle arg4, NativeHandle arg5, byte arg6, NativeHandle arg7);
    public static void void_objc_msgSendSuper_NativeHandle_NativeHandle_NativeHandle_NativeHandle_NativeHandle_bool_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1, NativeHandle arg2, NativeHandle arg3, NativeHandle arg4, NativeHandle arg5, byte arg6, NativeHandle arg7);
    public static NativeHandle NativeHandle_objc_msgSend_NativeHandle_out_Int32(IntPtr receiver, IntPtr selector, NativeHandle arg1, Int32* arg2);
    public static NativeHandle NativeHandle_objc_msgSendSuper_NativeHandle_out_Int32(IntPtr receiver, IntPtr selector, NativeHandle arg1, Int32* arg2);
    public static void void_objc_msgSend_NativeHandle_UIntPtr_NativeHandle_IntPtr_IntPtr_UInt32(IntPtr receiver, IntPtr selector, NativeHandle arg1, UIntPtr arg2, NativeHandle arg3, IntPtr arg4, IntPtr arg5, UInt32 arg6);
    public static void void_objc_msgSendSuper_NativeHandle_UIntPtr_NativeHandle_IntPtr_IntPtr_UInt32(IntPtr receiver, IntPtr selector, NativeHandle arg1, UIntPtr arg2, NativeHandle arg3, IntPtr arg4, IntPtr arg5, UInt32 arg6);
    public static void void_objc_msgSend_NativeHandle_NativeHandle_UIntPtr(IntPtr receiver, IntPtr selector, NativeHandle arg1, NativeHandle arg2, UIntPtr arg3);
    public static void void_objc_msgSendSuper_NativeHandle_NativeHandle_UIntPtr(IntPtr receiver, IntPtr selector, NativeHandle arg1, NativeHandle arg2, UIntPtr arg3);
    public static IntPtr IntPtr_objc_msgSend_NativeHandle_NativeHandle_NativeHandle_NativeHandle_NativeHandle_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1, NativeHandle arg2, NativeHandle arg3, NativeHandle arg4, NativeHandle arg5, NativeHandle arg6);
    public static IntPtr IntPtr_objc_msgSendSuper_NativeHandle_NativeHandle_NativeHandle_NativeHandle_NativeHandle_NativeHandle(IntPtr receiver, IntPtr selector, NativeHandle arg1, NativeHandle arg2, NativeHandle arg3, NativeHandle arg4, NativeHandle arg5, NativeHandle arg6);
}
public class Microsoft.AppCenter.AppCenter : object {
    private static string PlatformIdentifier;
    private static string SecretDelimiter;
    private static string PlatformKeyValueDelimiter;
    private static string TargetKeyName;
    private static string TargetKeyNameUpper;
    private static string AppSecretKeyName;
    private static string SecretsPattern;
    private static Regex _secretsRegex;
    private static LogLevel PlatformLogLevel { get; private set; }
    private static bool PlatformIsNetworkRequestsAllowed { get; private set; }
    private static bool PlatformConfigured { get; }
    public static LogLevel LogLevel { get; public set; }
    public static bool IsNetworkRequestsAllowed { get; public set; }
    public static string SdkVersion { get; }
    public static bool Configured { get; }
    private static AppCenter();
    private static LogLevel get_PlatformLogLevel();
    private static void set_PlatformLogLevel(LogLevel value);
    private static bool get_PlatformIsNetworkRequestsAllowed();
    private static void set_PlatformIsNetworkRequestsAllowed(bool value);
    private static void PlatformSetUserId(string userId);
    private static void PlatformSetLogUrl(string logUrl);
    private static void PlatformSetCountryCode(string countryCode);
    private static void PlatformSetDataResidencyRegion(string dataResidencyRegion);
    private static string PlatformGetDataResidencyRegion();
    private static bool get_PlatformConfigured();
    private static void PlatformConfigure(string appSecret);
    private static void PlatformStart(Type[] services);
    private static void PlatformStart(string appSecret, Type[] services);
    private static Task`1<bool> PlatformIsEnabledAsync();
    private static Task PlatformSetEnabledAsync(bool enabled);
    private static Task`1<Nullable`1<Guid>> PlatformGetInstallIdAsync();
    private static Class[] GetServices(IEnumerable`1<Type> services);
    private static Class GetClassForType(Type type);
    private static Type GetBindingType(Type type);
    private static void SetWrapperSdk();
    internal static void PlatformUnsetInstance();
    private static Task`1<bool> PlatformSetMaxStorageSizeAsync(long sizeInBytes);
    internal static string GetSecretAndTargetForPlatform(string secrets, string platformIdentifier);
    public static LogLevel get_LogLevel();
    public static void set_LogLevel(LogLevel value);
    public static bool get_IsNetworkRequestsAllowed();
    public static void set_IsNetworkRequestsAllowed(bool value);
    public static void SetCountryCode(string countryCode);
    public static void SetDataResidencyRegion(string dataResidencyRegion);
    public static string GetDataResidencyRegion();
    public static void SetUserId(string userId);
    public static string get_SdkVersion();
    public static Task`1<bool> IsEnabledAsync();
    public static Task SetEnabledAsync(bool enabled);
    public static Task`1<Nullable`1<Guid>> GetInstallIdAsync();
    public static void SetLogUrl(string logUrl);
    public static bool get_Configured();
    public static void Configure(string appSecret);
    public static void Start(Type[] services);
    public static void Start(string appSecret, Type[] services);
    public static Task`1<bool> SetMaxStorageSizeAsync(long sizeInBytes);
    internal static void UnsetInstance();
}
public class Microsoft.AppCenter.AppCenterException : Exception {
    public AppCenterException(string message);
    public AppCenterException(string message, Exception innerException);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.AppCenter.AppCenterLog : object {
    public static string LogTag;
    public static void Verbose(string tag, string message);
    public static void Debug(string tag, string message);
    public static void Info(string tag, string message);
    public static void Warn(string tag, string message);
    public static void Error(string tag, string message);
    public static void Assert(string tag, string message);
    [EditorBrowsableAttribute("1")]
public static void Verbose(string tag, string message, Exception exception);
    [EditorBrowsableAttribute("1")]
public static void Debug(string tag, string message, Exception exception);
    [EditorBrowsableAttribute("1")]
public static void Info(string tag, string message, Exception exception);
    [EditorBrowsableAttribute("1")]
public static void Warn(string tag, string message, Exception exception);
    [EditorBrowsableAttribute("1")]
public static void Error(string tag, string message, Exception exception);
    [EditorBrowsableAttribute("1")]
public static void Assert(string tag, string message, Exception exception);
    private static string ConcatMessageException(string message, Exception exception);
}
public abstract class Microsoft.AppCenter.AppCenterService : object {
}
[ProtocolAttribute]
[ProtocolMemberAttribute]
public interface Microsoft.AppCenter.Apple.Bindings.IMSACHttpClientDelegate {
}
[ProtocolAttribute]
[ProtocolMemberAttribute]
[ProtocolMemberAttribute]
[ProtocolMemberAttribute]
[ProtocolMemberAttribute]
[ProtocolMemberAttribute]
[ProtocolMemberAttribute]
public interface Microsoft.AppCenter.Apple.Bindings.IMSACHttpClientProtocol {
}
[ProtocolAttribute]
public interface Microsoft.AppCenter.Apple.Bindings.IMSACService {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("MSACAppCenter", "True")]
public class Microsoft.AppCenter.Apple.Bindings.MSACAppCenter : NSObject {
    [BindingImplAttribute]
private static string selConfigureWithAppSecret_X;
    private static NativeHandle selConfigureWithAppSecret_XHandle;
    [BindingImplAttribute]
private static string selDataResidencyRegionX;
    private static NativeHandle selDataResidencyRegionXHandle;
    [BindingImplAttribute]
private static string selInstallIdX;
    private static NativeHandle selInstallIdXHandle;
    [BindingImplAttribute]
private static string selIsConfiguredX;
    private static NativeHandle selIsConfiguredXHandle;
    [BindingImplAttribute]
private static string selIsDebuggerAttachedX;
    private static NativeHandle selIsDebuggerAttachedXHandle;
    [BindingImplAttribute]
private static string selIsEnabledX;
    private static NativeHandle selIsEnabledXHandle;
    [BindingImplAttribute]
private static string selIsNetworkRequestsAllowedX;
    private static NativeHandle selIsNetworkRequestsAllowedXHandle;
    [BindingImplAttribute]
private static string selLogLevelX;
    private static NativeHandle selLogLevelXHandle;
    [BindingImplAttribute]
private static string selResetSharedInstanceX;
    private static NativeHandle selResetSharedInstanceXHandle;
    [BindingImplAttribute]
private static string selSetCountryCode_X;
    private static NativeHandle selSetCountryCode_XHandle;
    [BindingImplAttribute]
private static string selSetDataResidencyRegion_X;
    private static NativeHandle selSetDataResidencyRegion_XHandle;
    [BindingImplAttribute]
private static string selSetEnabled_X;
    private static NativeHandle selSetEnabled_XHandle;
    [BindingImplAttribute]
private static string selSetLogHandler_X;
    private static NativeHandle selSetLogHandler_XHandle;
    [BindingImplAttribute]
private static string selSetLogLevel_X;
    private static NativeHandle selSetLogLevel_XHandle;
    [BindingImplAttribute]
private static string selSetLogUrl_X;
    private static NativeHandle selSetLogUrl_XHandle;
    [BindingImplAttribute]
private static string selSetMaxStorageSize_CompletionHandler_X;
    private static NativeHandle selSetMaxStorageSize_CompletionHandler_XHandle;
    [BindingImplAttribute]
private static string selSetNetworkRequestsAllowed_X;
    private static NativeHandle selSetNetworkRequestsAllowed_XHandle;
    [BindingImplAttribute]
private static string selSetUserId_X;
    private static NativeHandle selSetUserId_XHandle;
    [BindingImplAttribute]
private static string selSetWrapperSdk_X;
    private static NativeHandle selSetWrapperSdk_XHandle;
    [BindingImplAttribute]
private static string selSharedInstanceX;
    private static NativeHandle selSharedInstanceXHandle;
    [BindingImplAttribute]
private static string selStart_WithServices_X;
    private static NativeHandle selStart_WithServices_XHandle;
    [BindingImplAttribute]
private static string selStartService_X;
    private static NativeHandle selStartService_XHandle;
    [BindingImplAttribute]
private static NativeHandle class_ptr;
    public NativeHandle ClassHandle { get; }
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACAppCenter(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACAppCenter(NativeHandle handle);
    private static MSACAppCenter();
    public virtual NativeHandle get_ClassHandle();
    [NullableContextAttribute("2")]
[ExportAttribute("configureWithAppSecret:")]
[BindingImplAttribute]
public static void ConfigureWithAppSecret(string appSecret);
    [ExportAttribute("dataResidencyRegion")]
[BindingImplAttribute]
public static NSString GetDataResidencyRegion();
    [ExportAttribute("installId")]
[BindingImplAttribute]
public static NSUuid InstallId();
    [ExportAttribute("isConfigured")]
[BindingImplAttribute]
public static bool IsConfigured();
    [ExportAttribute("isDebuggerAttached")]
[BindingImplAttribute]
public static bool IsDebuggerAttached();
    [ExportAttribute("isEnabled")]
[BindingImplAttribute]
public static bool IsEnabled();
    [ExportAttribute("isNetworkRequestsAllowed")]
[BindingImplAttribute]
public static bool IsNetworkRequestsAllowed();
    [ExportAttribute("logLevel")]
[BindingImplAttribute]
public static MSACLogLevel LogLevel();
    [ExportAttribute("resetSharedInstance")]
[BindingImplAttribute]
public static void ResetSharedInstance();
    [ExportAttribute("setCountryCode:")]
[BindingImplAttribute]
public static void SetCountryCode(string countryCode);
    [NullableContextAttribute("2")]
[ExportAttribute("setDataResidencyRegion:")]
[BindingImplAttribute]
public static void SetDataResidencyRegion(string dataResidencyRegion);
    [ExportAttribute("setEnabled:")]
[BindingImplAttribute]
public static void SetEnabled(bool isEnabled);
    [ExportAttribute("setLogHandler:")]
[BindingImplAttribute]
public static void SetLogHandler(MSACLogHandler logHandler);
    [ExportAttribute("setLogLevel:")]
[BindingImplAttribute]
public static void SetLogLevel(MSACLogLevel logLevel);
    [NullableContextAttribute("2")]
[ExportAttribute("setLogUrl:")]
[BindingImplAttribute]
public static void SetLogUrl(string logUrl);
    [ExportAttribute("setMaxStorageSize:completionHandler:")]
[BindingImplAttribute]
public static void SetMaxStorageSize(long sizeInBytes, MSACSetLogLevelCompletionHandlerCallback callback);
    [ExportAttribute("setNetworkRequestsAllowed:")]
[BindingImplAttribute]
public static void SetNetworkRequestsAllowed(bool isAllowed);
    [NullableContextAttribute("2")]
[ExportAttribute("setUserId:")]
[BindingImplAttribute]
public static void SetUserId(string userId);
    [ExportAttribute("setWrapperSdk:")]
[BindingImplAttribute]
public static void SetWrapperSdk(MSACWrapperSdk wrapperSdk);
    [ExportAttribute("sharedInstance")]
[BindingImplAttribute]
public static MSACAppCenter SharedInstance();
    [ExportAttribute("start:withServices:")]
[BindingImplAttribute]
public static void Start(string appSecret, Class[] services);
    [ExportAttribute("startService:")]
[BindingImplAttribute]
public static void StartService(Class service);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("MSACDependencyConfiguration", "True")]
public class Microsoft.AppCenter.Apple.Bindings.MSACDependencyConfiguration : NSObject {
    [BindingImplAttribute]
private static string selHttpClientX;
    private static NativeHandle selHttpClientXHandle;
    [BindingImplAttribute]
private static string selSetHttpClient_X;
    private static NativeHandle selSetHttpClient_XHandle;
    [BindingImplAttribute]
private static NativeHandle class_ptr;
    public NativeHandle ClassHandle { get; }
    [BindingImplAttribute]
public static MSACHttpClientProtocol HttpClient { get; public set; }
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACDependencyConfiguration(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACDependencyConfiguration(NativeHandle handle);
    private static MSACDependencyConfiguration();
    public virtual NativeHandle get_ClassHandle();
    [ExportAttribute("httpClient")]
public static MSACHttpClientProtocol get_HttpClient();
    [ExportAttribute("setHttpClient:")]
public static void set_HttpClient(MSACHttpClientProtocol value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("MSACDevice", "True")]
public class Microsoft.AppCenter.Apple.Bindings.MSACDevice : MSACWrapperSdk {
    [BindingImplAttribute]
private static string selAppBuildX;
    private static NativeHandle selAppBuildXHandle;
    [BindingImplAttribute]
private static string selAppNamespaceX;
    private static NativeHandle selAppNamespaceXHandle;
    [BindingImplAttribute]
private static string selAppVersionX;
    private static NativeHandle selAppVersionXHandle;
    [BindingImplAttribute]
private static string selCarrierCountryX;
    private static NativeHandle selCarrierCountryXHandle;
    [BindingImplAttribute]
private static string selCarrierNameX;
    private static NativeHandle selCarrierNameXHandle;
    [BindingImplAttribute]
private static string selIsEqual_X;
    private static NativeHandle selIsEqual_XHandle;
    [BindingImplAttribute]
private static string selLocaleX;
    private static NativeHandle selLocaleXHandle;
    [BindingImplAttribute]
private static string selModelX;
    private static NativeHandle selModelXHandle;
    [BindingImplAttribute]
private static string selOemNameX;
    private static NativeHandle selOemNameXHandle;
    [BindingImplAttribute]
private static string selOsApiLevelX;
    private static NativeHandle selOsApiLevelXHandle;
    [BindingImplAttribute]
private static string selOsBuildX;
    private static NativeHandle selOsBuildXHandle;
    [BindingImplAttribute]
private static string selOsNameX;
    private static NativeHandle selOsNameXHandle;
    [BindingImplAttribute]
private static string selOsVersionX;
    private static NativeHandle selOsVersionXHandle;
    [BindingImplAttribute]
private static string selScreenSizeX;
    private static NativeHandle selScreenSizeXHandle;
    [BindingImplAttribute]
private static string selSdkNameX;
    private static NativeHandle selSdkNameXHandle;
    [BindingImplAttribute]
private static string selSdkVersionX;
    private static NativeHandle selSdkVersionXHandle;
    [BindingImplAttribute]
private static string selTimeZoneOffsetX;
    private static NativeHandle selTimeZoneOffsetXHandle;
    [BindingImplAttribute]
private static NativeHandle class_ptr;
    public NativeHandle ClassHandle { get; }
    [BindingImplAttribute]
public string AppBuild { get; }
    [BindingImplAttribute]
public string AppNamespace { get; }
    [BindingImplAttribute]
public string AppVersion { get; }
    [BindingImplAttribute]
public string CarrierCountry { get; }
    [BindingImplAttribute]
public string CarrierName { get; }
    [BindingImplAttribute]
public string Locale { get; }
    [BindingImplAttribute]
public string Model { get; }
    [BindingImplAttribute]
public string OemName { get; }
    [BindingImplAttribute]
public NSNumber OsApiLevel { get; }
    [BindingImplAttribute]
public string OsBuild { get; }
    [BindingImplAttribute]
public string OsName { get; }
    [BindingImplAttribute]
public string OsVersion { get; }
    [BindingImplAttribute]
public string ScreenSize { get; }
    [BindingImplAttribute]
public string SdkName { get; }
    [BindingImplAttribute]
public string SdkVersion { get; }
    [BindingImplAttribute]
public NSNumber TimeZoneOffset { get; }
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACDevice(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACDevice(NativeHandle handle);
    private static MSACDevice();
    public virtual NativeHandle get_ClassHandle();
    [ExportAttribute("isEqual:")]
[BindingImplAttribute]
public virtual bool IsEqual(MSACDevice device);
    [ExportAttribute("appBuild")]
public virtual string get_AppBuild();
    [ExportAttribute("appNamespace")]
public virtual string get_AppNamespace();
    [ExportAttribute("appVersion")]
public virtual string get_AppVersion();
    [ExportAttribute("carrierCountry")]
public virtual string get_CarrierCountry();
    [ExportAttribute("carrierName")]
public virtual string get_CarrierName();
    [ExportAttribute("locale")]
public virtual string get_Locale();
    [ExportAttribute("model")]
public virtual string get_Model();
    [ExportAttribute("oemName")]
public virtual string get_OemName();
    [ExportAttribute("osApiLevel")]
public virtual NSNumber get_OsApiLevel();
    [ExportAttribute("osBuild")]
public virtual string get_OsBuild();
    [ExportAttribute("osName")]
public virtual string get_OsName();
    [ExportAttribute("osVersion")]
public virtual string get_OsVersion();
    [ExportAttribute("screenSize")]
public virtual string get_ScreenSize();
    [ExportAttribute("sdkName")]
public virtual string get_SdkName();
    [ExportAttribute("sdkVersion")]
public virtual string get_SdkVersion();
    [ExportAttribute("timeZoneOffset")]
public virtual NSNumber get_TimeZoneOffset();
}
[ProtocolAttribute]
[RegisterAttribute("MSACHttpClientDelegate", "True")]
public class Microsoft.AppCenter.Apple.Bindings.MSACHttpClientDelegate : NSObject {
    [NullableAttribute("1")]
[BindingImplAttribute]
private static string selWillSendHTTPRequestToURL_WithHeaders_X;
    private static NativeHandle selWillSendHTTPRequestToURL_WithHeaders_XHandle;
    [BindingImplAttribute]
private static NativeHandle class_ptr;
    public NativeHandle ClassHandle { get; }
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACHttpClientDelegate(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACHttpClientDelegate(NativeHandle handle);
    private static MSACHttpClientDelegate();
    public virtual NativeHandle get_ClassHandle();
    [NullableContextAttribute("1")]
[ExportAttribute("willSendHTTPRequestToURL:withHeaders:")]
[BindingImplAttribute]
public virtual void WillSendHTTPRequestToURL(NSUrl url, NSDictionary`2<NSString, NSString> headers);
}
[ExtensionAttribute]
public static class Microsoft.AppCenter.Apple.Bindings.MSACHttpClientDelegate_Extensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[BindingImplAttribute]
public static void WillSendHTTPRequestToURL(IMSACHttpClientDelegate This, NSUrl url, NSDictionary`2<NSString, NSString> headers);
}
internal class Microsoft.AppCenter.Apple.Bindings.MSACHttpClientDelegateWrapper : BaseWrapper {
    [PreserveAttribute]
public MSACHttpClientDelegateWrapper(NativeHandle handle, bool owns);
}
[ProtocolAttribute]
[RegisterAttribute("ApiDefinition__Microsoft_AppCenter_Apple_Bindings_MSACHttpClientProtocol", "False")]
[ModelAttribute]
public class Microsoft.AppCenter.Apple.Bindings.MSACHttpClientProtocol : NSObject {
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACHttpClientProtocol(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACHttpClientProtocol(NativeHandle handle);
    [ExportAttribute("pause")]
[BindingImplAttribute]
public virtual void Pause();
    [ExportAttribute("resume")]
[BindingImplAttribute]
public virtual void Resume();
    [NullableContextAttribute("1")]
[ExportAttribute("sendAsync:method:headers:data:completionHandler:")]
[BindingImplAttribute]
public virtual void SendAsync(NSUrl url, NSString method, NSDictionary`2<NSString, NSString> headers, NSData data, MSACHttpRequestCompletionHandler completionHandler);
    [NullableContextAttribute("1")]
[ExportAttribute("sendAsync:method:headers:data:retryIntervals:compressionEnabled:completionHandler:")]
[BindingImplAttribute]
public virtual void SendAsync(NSUrl url, NSString method, NSDictionary`2<NSString, NSString> headers, NSData data, NSArray retryIntervals, bool compressionEnabled, MSACHttpRequestCompletionHandler completionHandler);
    [NullableContextAttribute("2")]
[ExportAttribute("setDelegate:")]
[BindingImplAttribute]
public virtual void SetDelegate(MSACHttpClientDelegate httpClientDelegate);
    [ExportAttribute("setEnabled:")]
[BindingImplAttribute]
public virtual void SetEnabled(bool enabled);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AppCenter.Apple.Bindings.MSACHttpClientProtocol_Extensions : object {
    [ExtensionAttribute]
[BindingImplAttribute]
public static void SetDelegate(IMSACHttpClientProtocol This, MSACHttpClientDelegate httpClientDelegate);
    [ExtensionAttribute]
[BindingImplAttribute]
public static void SendAsync(IMSACHttpClientProtocol This, NSUrl url, NSString method, NSDictionary`2<NSString, NSString> headers, NSData data, MSACHttpRequestCompletionHandler completionHandler);
    [ExtensionAttribute]
[BindingImplAttribute]
public static void SendAsync(IMSACHttpClientProtocol This, NSUrl url, NSString method, NSDictionary`2<NSString, NSString> headers, NSData data, NSArray retryIntervals, bool compressionEnabled, MSACHttpRequestCompletionHandler completionHandler);
    [ExtensionAttribute]
[BindingImplAttribute]
public static void Pause(IMSACHttpClientProtocol This);
    [ExtensionAttribute]
[BindingImplAttribute]
public static void Resume(IMSACHttpClientProtocol This);
    [ExtensionAttribute]
[BindingImplAttribute]
public static void SetEnabled(IMSACHttpClientProtocol This, bool enabled);
}
internal class Microsoft.AppCenter.Apple.Bindings.MSACHttpClientProtocolWrapper : BaseWrapper {
    [PreserveAttribute]
public MSACHttpClientProtocolWrapper(NativeHandle handle, bool owns);
}
public class Microsoft.AppCenter.Apple.Bindings.MSACHttpRequestCompletionHandler : MulticastDelegate {
    public MSACHttpRequestCompletionHandler(object object, IntPtr method);
    [NullableContextAttribute("2")]
public virtual void Invoke(NSData responseBody, NSHttpUrlResponse response, NSError error);
    public virtual IAsyncResult BeginInvoke(NSData responseBody, NSHttpUrlResponse response, NSError error, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("MSACKeychainUtil", "True")]
public class Microsoft.AppCenter.Apple.Bindings.MSACKeychainUtil : NSObject {
    [BindingImplAttribute]
private static string selClearX;
    private static NativeHandle selClearXHandle;
    [BindingImplAttribute]
private static string selStoreString_ForKey_X;
    private static NativeHandle selStoreString_ForKey_XHandle;
    [BindingImplAttribute]
private static string selStringForKey_StatusCode_X;
    private static NativeHandle selStringForKey_StatusCode_XHandle;
    [BindingImplAttribute]
private static NativeHandle class_ptr;
    public NativeHandle ClassHandle { get; }
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACKeychainUtil(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACKeychainUtil(NativeHandle handle);
    private static MSACKeychainUtil();
    public virtual NativeHandle get_ClassHandle();
    [ExportAttribute("clear")]
[BindingImplAttribute]
public static bool Clear();
    [ExportAttribute("storeString:forKey:")]
[BindingImplAttribute]
public static void StoreString(NSString value, NSString key);
    [ExportAttribute("stringForKey:statusCode:")]
[BindingImplAttribute]
public static NSString StringForKey(NSString key, Int32& errorCode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("MSACLogger", "True")]
public class Microsoft.AppCenter.Apple.Bindings.MSACLogger : NSObject {
    [BindingImplAttribute]
private static string selLogMessage_Level_Tag_File_Function_Line_X;
    private static NativeHandle selLogMessage_Level_Tag_File_Function_Line_XHandle;
    [BindingImplAttribute]
private static NativeHandle class_ptr;
    public NativeHandle ClassHandle { get; }
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACLogger(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACLogger(NativeHandle handle);
    private static MSACLogger();
    public virtual NativeHandle get_ClassHandle();
    [ExportAttribute("logMessage:level:tag:file:function:line:")]
[BindingImplAttribute]
public static void LogMessage(MSACLogMessageProvider messageProvider, MSACLogLevel loglevel, string tag, IntPtr file, IntPtr function, UInt32 line);
}
public class Microsoft.AppCenter.Apple.Bindings.MSACLogHandler : MulticastDelegate {
    public MSACLogHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(MSACLogMessageProvider arg0, MSACLogLevel arg1, IntPtr arg2, IntPtr arg3, UInt32 arg4);
    public virtual IAsyncResult BeginInvoke(MSACLogMessageProvider arg0, MSACLogLevel arg1, IntPtr arg2, IntPtr arg3, UInt32 arg4, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NativeAttribute]
public enum Microsoft.AppCenter.Apple.Bindings.MSACLogLevel : Enum {
    public ulong value__;
    public static MSACLogLevel Verbose;
    public static MSACLogLevel Debug;
    public static MSACLogLevel Info;
    public static MSACLogLevel Warning;
    public static MSACLogLevel Error;
    public static MSACLogLevel Assert;
    public static MSACLogLevel None;
}
public class Microsoft.AppCenter.Apple.Bindings.MSACLogMessageProvider : MulticastDelegate {
    public MSACLogMessageProvider(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[ProtocolAttribute]
[RegisterAttribute("ApiDefinition__Microsoft_AppCenter_Apple_Bindings_MSACService", "False")]
[ModelAttribute]
public class Microsoft.AppCenter.Apple.Bindings.MSACService : NSObject {
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACService(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACService(NativeHandle handle);
}
[RegisterAttribute("MSACServiceAbstract", "True")]
public class Microsoft.AppCenter.Apple.Bindings.MSACServiceAbstract : MSACService {
    [BindingImplAttribute]
private static NativeHandle class_ptr;
    public NativeHandle ClassHandle { get; }
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACServiceAbstract(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACServiceAbstract(NativeHandle handle);
    private static MSACServiceAbstract();
    public virtual NativeHandle get_ClassHandle();
}
internal class Microsoft.AppCenter.Apple.Bindings.MSACServiceWrapper : BaseWrapper {
    [PreserveAttribute]
public MSACServiceWrapper(NativeHandle handle, bool owns);
}
public class Microsoft.AppCenter.Apple.Bindings.MSACSetLogLevelCompletionHandlerCallback : MulticastDelegate {
    public MSACSetLogLevelCompletionHandlerCallback(object object, IntPtr method);
    public virtual void Invoke(bool result);
    public virtual IAsyncResult BeginInvoke(bool result, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("MSACWrapperLogger", "True")]
public class Microsoft.AppCenter.Apple.Bindings.MSACWrapperLogger : NSObject {
    [BindingImplAttribute]
private static string selMSACWrapperLog_Tag_Level_X;
    private static NativeHandle selMSACWrapperLog_Tag_Level_XHandle;
    [BindingImplAttribute]
private static NativeHandle class_ptr;
    public NativeHandle ClassHandle { get; }
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACWrapperLogger(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACWrapperLogger(NativeHandle handle);
    private static MSACWrapperLogger();
    public virtual NativeHandle get_ClassHandle();
    [ExportAttribute("MSACWrapperLog:tag:level:")]
[BindingImplAttribute]
public static void MSACWrapperLog(MSACLogMessageProvider message, string tag, MSACLogLevel level);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("MSACWrapperSdk", "True")]
public class Microsoft.AppCenter.Apple.Bindings.MSACWrapperSdk : NSObject {
    [BindingImplAttribute]
private static string selInitWithWrapperSdkVersion_WrapperSdkName_WrapperRuntimeVersion_LiveUpdateReleaseLabel_LiveUpdateDeploymentKey_LiveUpdatePackageHash_X;
    private static NativeHandle selInitWithWrapperSdkVersion_WrapperSdkName_WrapperRuntimeVersion_LiveUpdateReleaseLabel_LiveUpdateDeploymentKey_LiveUpdatePackageHash_XHandle;
    [BindingImplAttribute]
private static string selIsEqual_X;
    private static NativeHandle selIsEqual_XHandle;
    [BindingImplAttribute]
private static string selLiveUpdateDeploymentKeyX;
    private static NativeHandle selLiveUpdateDeploymentKeyXHandle;
    [BindingImplAttribute]
private static string selLiveUpdatePackageHashX;
    private static NativeHandle selLiveUpdatePackageHashXHandle;
    [BindingImplAttribute]
private static string selLiveUpdateReleaseLabelX;
    private static NativeHandle selLiveUpdateReleaseLabelXHandle;
    [BindingImplAttribute]
private static string selWrapperRuntimeVersionX;
    private static NativeHandle selWrapperRuntimeVersionXHandle;
    [BindingImplAttribute]
private static string selWrapperSdkNameX;
    private static NativeHandle selWrapperSdkNameXHandle;
    [BindingImplAttribute]
private static string selWrapperSdkVersionX;
    private static NativeHandle selWrapperSdkVersionXHandle;
    [BindingImplAttribute]
private static NativeHandle class_ptr;
    public NativeHandle ClassHandle { get; }
    [BindingImplAttribute]
public string LiveUpdateDeploymentKey { get; }
    [BindingImplAttribute]
public string LiveUpdatePackageHash { get; }
    [BindingImplAttribute]
public string LiveUpdateReleaseLabel { get; }
    [BindingImplAttribute]
public string WrapperRuntimeVersion { get; }
    [BindingImplAttribute]
public string WrapperSdkName { get; }
    [BindingImplAttribute]
public string WrapperSdkVersion { get; }
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected MSACWrapperSdk(NSObjectFlag t);
    [BindingImplAttribute]
[EditorBrowsableAttribute("2")]
protected internal MSACWrapperSdk(NativeHandle handle);
    [NullableContextAttribute("2")]
[ExportAttribute("initWithWrapperSdkVersion:wrapperSdkName:wrapperRuntimeVersion:liveUpdateReleaseLabel:liveUpdateDeploymentKey:liveUpdatePackageHash:")]
[BindingImplAttribute]
public MSACWrapperSdk(string wrapperSdkVersion, string wrapperSdkName, string wrapperRuntimeVersion, string liveUpdateReleaseLabel, string liveUpdateDeploymentKey, string liveUpdatePackageHash);
    private static MSACWrapperSdk();
    public virtual NativeHandle get_ClassHandle();
    [ExportAttribute("isEqual:")]
[BindingImplAttribute]
public virtual bool IsEqual(MSACWrapperSdk wrapperSdk);
    [ExportAttribute("liveUpdateDeploymentKey")]
public virtual string get_LiveUpdateDeploymentKey();
    [ExportAttribute("liveUpdatePackageHash")]
public virtual string get_LiveUpdatePackageHash();
    [ExportAttribute("liveUpdateReleaseLabel")]
public virtual string get_LiveUpdateReleaseLabel();
    [ExportAttribute("wrapperRuntimeVersion")]
public virtual string get_WrapperRuntimeVersion();
    [ExportAttribute("wrapperSdkName")]
public virtual string get_WrapperSdkName();
    [ExportAttribute("wrapperSdkVersion")]
public virtual string get_WrapperSdkVersion();
}
internal class Microsoft.AppCenter.AppleHttpClientAdapter : MSACHttpClientProtocol {
    private IHttpNetworkAdapter _httpNetworkAdapter;
    private MSACHttpClientDelegate _httpClientDelegate;
    public AppleHttpClientAdapter(IHttpNetworkAdapter httpNetworkAdapter);
    public virtual void SendAsync(NSUrl url, NSString method, NSDictionary`2<NSString, NSString> headers, NSData data, MSACHttpRequestCompletionHandler completionHandler);
    public virtual void SendAsync(NSUrl url, NSString method, NSDictionary`2<NSString, NSString> headers, NSData data, NSArray retryIntervals, bool compressionEnabled, MSACHttpRequestCompletionHandler completionHandler);
    public virtual void Pause();
    public virtual void Resume();
    public virtual void SetEnabled(bool enabled);
    public virtual void SetDelegate(MSACHttpClientDelegate httpClientDelegate);
}
internal static class Microsoft.AppCenter.DependencyConfiguration : object {
    private static IHttpNetworkAdapter _httpNetworkAdapter;
    private static IHttpNetworkAdapter PlatformHttpNetworkAdapter { get; private set; }
    internal static IHttpNetworkAdapter HttpNetworkAdapter { get; internal set; }
    private static IHttpNetworkAdapter get_PlatformHttpNetworkAdapter();
    private static void set_PlatformHttpNetworkAdapter(IHttpNetworkAdapter value);
    internal static IHttpNetworkAdapter get_HttpNetworkAdapter();
    internal static void set_HttpNetworkAdapter(IHttpNetworkAdapter value);
}
public class Microsoft.AppCenter.Device : object {
    [CompilerGeneratedAttribute]
private string <SdkName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SdkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OemName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OsApiLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Locale>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TimeZoneOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScreenSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CarrierName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CarrierCountry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppNamespace>k__BackingField;
    public string SdkName { get; }
    public string SdkVersion { get; }
    public string Model { get; }
    public string OemName { get; }
    public string OsName { get; }
    public string OsVersion { get; }
    public string OsBuild { get; }
    public Nullable`1<int> OsApiLevel { get; }
    public string Locale { get; }
    public int TimeZoneOffset { get; }
    public string ScreenSize { get; }
    public string AppVersion { get; }
    public string CarrierName { get; }
    public string CarrierCountry { get; }
    public string AppBuild { get; }
    public string AppNamespace { get; }
    public Device(MSACDevice device);
    [CompilerGeneratedAttribute]
public string get_SdkName();
    [CompilerGeneratedAttribute]
public string get_SdkVersion();
    [CompilerGeneratedAttribute]
public string get_Model();
    [CompilerGeneratedAttribute]
public string get_OemName();
    [CompilerGeneratedAttribute]
public string get_OsName();
    [CompilerGeneratedAttribute]
public string get_OsVersion();
    [CompilerGeneratedAttribute]
public string get_OsBuild();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_OsApiLevel();
    [CompilerGeneratedAttribute]
public string get_Locale();
    [CompilerGeneratedAttribute]
public int get_TimeZoneOffset();
    [CompilerGeneratedAttribute]
public string get_ScreenSize();
    [CompilerGeneratedAttribute]
public string get_AppVersion();
    [CompilerGeneratedAttribute]
public string get_CarrierName();
    [CompilerGeneratedAttribute]
public string get_CarrierCountry();
    [CompilerGeneratedAttribute]
public string get_AppBuild();
    [CompilerGeneratedAttribute]
public string get_AppNamespace();
}
internal class Microsoft.AppCenter.HttpException : Exception {
    [CompilerGeneratedAttribute]
private HttpResponse <HttpResponse>k__BackingField;
    internal HttpResponse HttpResponse { get; private set; }
    internal HttpException(HttpResponse httpResponse);
    [CompilerGeneratedAttribute]
internal HttpResponse get_HttpResponse();
    [CompilerGeneratedAttribute]
private void set_HttpResponse(HttpResponse value);
}
internal class Microsoft.AppCenter.HttpResponse : object {
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    internal int StatusCode { get; internal set; }
    internal string Content { get; internal set; }
    [CompilerGeneratedAttribute]
internal int get_StatusCode();
    [CompilerGeneratedAttribute]
internal void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
internal string get_Content();
    [CompilerGeneratedAttribute]
internal void set_Content(string value);
}
public interface Microsoft.AppCenter.IAppCenterService {
}
internal interface Microsoft.AppCenter.IHttpNetworkAdapter {
    public abstract virtual Task`1<HttpResponse> SendAsync(string uri, string method, IDictionary`2<string, string> headers, string jsonContent, CancellationToken cancellationToken);
}
public enum Microsoft.AppCenter.LogLevel : Enum {
    public int value__;
    public static LogLevel Verbose;
    public static LogLevel Debug;
    public static LogLevel Info;
    public static LogLevel Warn;
    public static LogLevel Error;
    public static LogLevel Assert;
    public static LogLevel None;
}
internal class Microsoft.AppCenter.NamespaceDoc : object {
}
public class Microsoft.AppCenter.WrapperSdk : object {
    public static string Name;
    internal static string Version;
}
[BindingImplAttribute]
internal static class ObjCRuntime.Trampolines : object {
}
