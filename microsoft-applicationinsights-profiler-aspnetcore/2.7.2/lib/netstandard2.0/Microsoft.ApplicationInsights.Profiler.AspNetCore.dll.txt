public class Microsoft.ApplicationInsights.Profiler.AspNetCore.ConfigureUserConfiguration : object {
    private static string ServiceProfilerSectionName;
    private IConfiguration _configuration;
    private Action`1<UserConfiguration> _overwriter;
    private ILogger _logger;
    [CompilerGeneratedAttribute]
private ISerializationProvider <_serializer>k__BackingField;
    private ISerializationProvider _serializer { get; }
    public ConfigureUserConfiguration(IConfiguration configuration, Action`1<UserConfiguration> overwriter, ISerializationProvider serializer, ILogger`1<ConfigureUserConfiguration> logger);
    [CompilerGeneratedAttribute]
private ISerializationProvider get__serializer();
    public sealed virtual void Configure(UserConfiguration options);
}
internal class Microsoft.ApplicationInsights.Profiler.AspNetCore.CustomTelemetryClientFactory : object {
    private TelemetryConfiguration _telemetryConfiguration;
    public CustomTelemetryClientFactory(TelemetryConfiguration telemetryConfiguration);
    public sealed virtual TelemetryClient Create();
}
internal class Microsoft.ApplicationInsights.Profiler.AspNetCore.DisabledAgentBootstrap : object {
    private ILogger _logger;
    public DisabledAgentBootstrap(ILogger`1<DisabledAgentBootstrap> logger);
    public sealed virtual Task ActivateAsync(CancellationToken cancellationToken);
}
internal class Microsoft.ApplicationInsights.Profiler.AspNetCore.EndpointProviderMirror : object {
    private PropertyInfo _connectionStringProperty;
    private MethodInfo _getInstrumentationKeyMethod;
    private MethodInfo _getEndpointMethod;
    private object _endpointProvider;
    public string ConnectionString { get; public set; }
    public EndpointProviderMirror(IOptions`1<TelemetryConfiguration> customerTelemetryConfigurationOptions);
    public sealed virtual string get_ConnectionString();
    public sealed virtual void set_ConnectionString(string value);
    public sealed virtual string GetInstrumentationKey();
    public sealed virtual Uri GetEndpoint(EndpointName endpointName);
    private Type Initialize();
}
internal interface Microsoft.ApplicationInsights.Profiler.AspNetCore.IServiceProfilerAgentBootstrap {
    public abstract virtual Task ActivateAsync(CancellationToken cancellationToken);
}
internal class Microsoft.ApplicationInsights.Profiler.AspNetCore.ServiceProfilerAgentBootstrap : object {
    private IServiceProfilerContext _serviceProfilerContext;
    private IOrchestrator _orchestrator;
    private UserConfiguration _userConfiguration;
    private ICompatibilityUtility _compatibilityUtility;
    private ISerializationProvider _serializer;
    private ILogger _logger;
    public ServiceProfilerAgentBootstrap(IServiceProfilerContext serviceProfilerContext, IOrchestrator orchestrator, IOptions`1<UserConfiguration> userConfiguration, ICompatibilityUtility compatibilityUtility, ISerializationProvider serializer, ILogger`1<ServiceProfilerAgentBootstrap> logger);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.AspNetCore.ServiceProfilerAgentBootstrap/<ActivateAsync>d__7")]
public sealed virtual Task ActivateAsync(CancellationToken cancellationToken);
}
internal class Microsoft.ApplicationInsights.Profiler.AspNetCore.ServiceProfilerBackgroundService : BackgroundService {
    private IServiceProfilerAgentBootstrap _bootstrap;
    public ServiceProfilerBackgroundService(IServiceProfilerAgentBootstrap bootstrap);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.AspNetCore.ServiceProfilerBackgroundService/<ExecuteAsync>d__2")]
protected virtual Task ExecuteAsync(CancellationToken stoppingToken);
}
public class Microsoft.ApplicationInsights.Profiler.AspNetCore.ServiceProfilerServices : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> ServicesInitialized;
    private IServiceCollection _services;
    public IServiceCollection Services { get; internal set; }
    [CompilerGeneratedAttribute]
public void add_ServicesInitialized(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ServicesInitialized(EventHandler`1<EventArgs> value);
    public IServiceCollection get_Services();
    internal void set_Services(IServiceCollection value);
}
public class Microsoft.AspNetCore.Hosting.ServiceProfilerInjection : object {
    public sealed virtual void Configure(IWebHostBuilder builder);
}
internal interface Microsoft.Extensions.DependencyInjection.IServiceCollectionBuilder {
    public abstract virtual IServiceCollection Build(IServiceCollection serviceCollection);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceCollectionBuilder : object {
    public sealed virtual IServiceCollection Build(IServiceCollection serviceCollection);
    private void RegisterAppInsightsAADAuthServices(IServiceCollection serviceCollection);
    private static void RegisterTraceControls(IServiceCollection serviceCollection);
    private void RegisterFrontendClient(IServiceCollection serviceCollection);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceProfilerExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddServiceProfiler(IServiceCollection serviceCollection);
    [ExtensionAttribute]
public static IServiceCollection AddServiceProfiler(IServiceCollection serviceCollection, Action`1<UserConfiguration> options);
    [ExtensionAttribute]
public static IServiceCollection AddServiceProfiler(IServiceCollection serviceCollection, IConfiguration configuration);
    [ExtensionAttribute]
internal static IServiceCollection AddServiceProfiler(IServiceCollection serviceCollection, IServiceCollectionBuilder serviceCollectionBuilder);
    private static IServiceCollection AddServiceProfilerImp(IServiceCollection serviceCollection, Action`1<UserConfiguration> context, IConfiguration configuration, IServiceCollectionBuilder serviceCollectionBuilder);
    private static void BuildServiceBase(IServiceCollection serviceCollection, Action`1<UserConfiguration> applyOptions, IConfiguration configuration);
}
