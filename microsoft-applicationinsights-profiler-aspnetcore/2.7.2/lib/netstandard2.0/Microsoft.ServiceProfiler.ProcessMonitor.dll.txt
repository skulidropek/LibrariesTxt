public class Microsoft.ServiceProfiler.ProcessMonitor.BaselineTracker : object {
    private List`1<Action`2<float, float>> _callbacks;
    private TimeSpan _interval;
    private TimeSpan _averageWindow;
    private Func`1<float> _getNextMetric;
    private Timer _timer;
    private RollingHistoryArray`1<float> _history;
    private bool _disposed;
    public BaselineTracker(RollingHistoryArray`1<float> history, TimeSpan averageWindow, Func`1<float> getNextMetric);
    public void Start();
    public void Update(float metric);
    public float GetNextMetric();
    public void RegisterCallback(Action`2<float, float> callback);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <Start>b__1_0(object _);
    [CompilerGeneratedAttribute]
private float <Update>g__GetAverage|2_0();
}
public class Microsoft.ServiceProfiler.ProcessMonitor.CannotGetMachineMemoryException : Exception {
}
public class Microsoft.ServiceProfiler.ProcessMonitor.CPUTracker : object {
    private ConcurrentDictionary`2<string, TimeSpan> _startCpuTime;
    private ConcurrentDictionary`2<string, TimeSpan> _lastCpuTime;
    private ConcurrentDictionary`2<string, DateTimeOffset> _lastCheckTime;
    private DateTimeOffset now;
    public double Update(string processName, int processId, TimeSpan totalProcessorTime);
    public void OnUpdateError(string processName, int processId, bool processHasExited);
}
public class Microsoft.ServiceProfiler.ProcessMonitor.DefaultProcessSource : object {
    [CompilerGeneratedAttribute]
private static DefaultProcessSource <Instance>k__BackingField;
    public static DefaultProcessSource Instance { get; }
    private static DefaultProcessSource();
    [CompilerGeneratedAttribute]
public static DefaultProcessSource get_Instance();
    public sealed virtual IEnumerable`1<Process> GetProcesses();
}
public interface Microsoft.ServiceProfiler.ProcessMonitor.IProcessSource {
    public abstract virtual IEnumerable`1<Process> GetProcesses();
}
public class Microsoft.ServiceProfiler.ProcessMonitor.MemoryTracker : object {
    private MEMORYSTATUSEX _memoryStatus;
    public double Update();
}
public static class Microsoft.ServiceProfiler.ProcessMonitor.NativeMethods : object {
    private static bool GlobalMemoryStatusEx(MEMORYSTATUSEX& lpBuffer);
    public static bool TryGetGlobalMemoryStatus(MEMORYSTATUSEX& memoryStatus);
}
public class Microsoft.ServiceProfiler.ProcessMonitor.ProcessScanner : object {
    private HashSet`1<string> _ignore;
    private IProcessSource _processSource;
    public ProcessScanner(IProcessSource processSource);
    public void ScanProcesses(Action`1<Process> scan, Action`1<Process> onScanFailed);
}
public class Microsoft.ServiceProfiler.ProcessMonitor.RollingHistoryArray`1 : object {
    [CompilerGeneratedAttribute]
private TimeSpan <Interval>k__BackingField;
    private T[] _history;
    private TimeSpan _totalTime;
    private int _currentIndex;
    public TimeSpan Interval { get; }
    public RollingHistoryArray`1(TimeSpan size, TimeSpan interval);
    [CompilerGeneratedAttribute]
public TimeSpan get_Interval();
    public void Add(T metric);
    [IteratorStateMachineAttribute("Microsoft.ServiceProfiler.ProcessMonitor.RollingHistoryArray`1/<GetLastValues>d__5")]
public IEnumerable`1<T> GetLastValues(TimeSpan amount);
    private static int GetSizeOfIndicies(TimeSpan totalTime, TimeSpan increment);
}
