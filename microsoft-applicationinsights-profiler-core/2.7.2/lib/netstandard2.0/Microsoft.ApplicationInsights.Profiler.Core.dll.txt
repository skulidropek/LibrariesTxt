internal class Microsoft.ApplicationInsights.Profiler.Core.AppIdFetchedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Guid <AppId>k__BackingField;
    public Guid AppId { get; }
    public AppIdFetchedEventArgs(Guid appId);
    [CompilerGeneratedAttribute]
public Guid get_AppId();
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Auth.AADAuthTokenCredential : TokenCredential {
    private IAuthTokenProvider _authTokenProvider;
    private ILogger _logger;
    public AADAuthTokenCredential(IAuthTokenProvider authTokenProvider, ILogger`1<AADAuthTokenCredential> logger);
    public virtual AccessToken GetToken(TokenRequestContext requestContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.Auth.AADAuthTokenCredential/<GetTokenAsync>d__4")]
public virtual ValueTask`1<AccessToken> GetTokenAsync(TokenRequestContext requestContext, CancellationToken cancellationToken);
    private Task`1<AccessToken> AcquireTokenAsync(TokenRequestContext requestContext, CancellationToken cancellationToken);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Auth.AccessTokenFactory : object {
    private static string Token;
    private static string ExpiresOn;
    public sealed virtual bool TryCreateFrom(object reflectedAuthTokenObject, AccessToken& authToken);
    private AccessToken FromStringToken(string token);
    private AccessToken FromAuthTokenObject(object tokenObject);
    private DateTimeOffset ExtractExpiry(string token);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Auth.AuthTokenProvider : object {
    private static string GetTokenAsyncMethodName;
    private static string CredentialEnvelopePropertyName;
    private static PropertyInfo _credentialEnvelopePropertyInfo;
    private static TypeInfo _credentialEnvelopeTypeInfo;
    private static MethodInfo _getTokenAsyncMethodInfo;
    private static PropertyInfo _getTokenAsyncTaskResultPropertyInfo;
    private TelemetryConfiguration _telemetryConfiguration;
    private IAccessTokenFactory _authTokenFactory;
    private ILogger _logger;
    public bool IsAADAuthenticateEnabled { get; }
    private object CredentialEnvelope { get; }
    public AuthTokenProvider(TelemetryConfiguration telemetryConfiguration, IAccessTokenFactory authTokenFactory, ILogger`1<AuthTokenProvider> logger);
    private static AuthTokenProvider();
    public sealed virtual bool get_IsAADAuthenticateEnabled();
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.Auth.AuthTokenProvider/<GetTokenAsync>d__12")]
public sealed virtual Task`1<AccessToken> GetTokenAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.Auth.AuthTokenProvider/<GetAuthTokenObjectAsync>d__13")]
private Task`1<object> GetAuthTokenObjectAsync(CancellationToken cancellationToken);
    private Task InvokeGetTokenAsync(CancellationToken cancellationToken);
    private object get_CredentialEnvelope();
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.Auth.IAADAuthChecker {
    public bool IsAADAuthenticateEnabled { get; }
    public abstract virtual bool get_IsAADAuthenticateEnabled();
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.Auth.IAccessTokenFactory {
    public abstract virtual bool TryCreateFrom(object reflectedAuthTokenObject, AccessToken& authToken);
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.Auth.IAuthTokenProvider {
    public abstract virtual Task`1<AccessToken> GetTokenAsync(CancellationToken cancellationToken);
}
internal enum Microsoft.ApplicationInsights.Profiler.Core.Contracts.EndpointName : Enum {
    public int value__;
    public static EndpointName IngestionEndpoint;
    public static EndpointName LiveEndpoint;
    public static EndpointName ProfilerEndpoint;
}
public class Microsoft.ApplicationInsights.Profiler.Core.Contracts.EventPipeProviderItem : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private EventLevel <EventLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Keywords>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Arguments>k__BackingField;
    public string Name { get; public set; }
    public EventLevel EventLevel { get; public set; }
    public long Keywords { get; public set; }
    public IDictionary`2<string, string> Arguments { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public EventLevel get_EventLevel();
    [CompilerGeneratedAttribute]
public void set_EventLevel(EventLevel value);
    [CompilerGeneratedAttribute]
public long get_Keywords();
    [CompilerGeneratedAttribute]
public void set_Keywords(long value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(IDictionary`2<string, string> value);
}
[ExtensionAttribute]
internal static class Microsoft.ApplicationInsights.Profiler.Core.Contracts.EventPipeProviderItemExtensions : object {
    [ExtensionAttribute]
public static EventPipeProvider ToProvider(EventPipeProviderItem item);
}
public class Microsoft.ApplicationInsights.Profiler.Core.Contracts.ProfilerSettings : object {
    private ILogger _logger;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CollectionPlan>k__BackingField;
    [CompilerGeneratedAttribute]
private EngineSettings <Engine>k__BackingField;
    [CompilerGeneratedAttribute]
private SamplingOptions <SamplingOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private CpuTriggerSettings <CpuTriggerSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryTriggerSettings <MemoryTriggerSettings>k__BackingField;
    public bool Enabled { get; private set; }
    public string CollectionPlan { get; private set; }
    public EngineSettings Engine { get; public set; }
    public SamplingOptions SamplingOptions { get; private set; }
    public CpuTriggerSettings CpuTriggerSettings { get; private set; }
    public MemoryTriggerSettings MemoryTriggerSettings { get; private set; }
    public ProfilerSettings(IOptions`1<UserConfiguration> userConfiguration, IProfilerSettingsService settingsService, ILogger`1<ProfilerSettings> logger);
    private void SetFromSettingsContract(SettingsContract settingsContract);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
private void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_CollectionPlan();
    [CompilerGeneratedAttribute]
private void set_CollectionPlan(string value);
    [CompilerGeneratedAttribute]
public EngineSettings get_Engine();
    [CompilerGeneratedAttribute]
public void set_Engine(EngineSettings value);
    [CompilerGeneratedAttribute]
public SamplingOptions get_SamplingOptions();
    [CompilerGeneratedAttribute]
private void set_SamplingOptions(SamplingOptions value);
    [CompilerGeneratedAttribute]
public CpuTriggerSettings get_CpuTriggerSettings();
    [CompilerGeneratedAttribute]
private void set_CpuTriggerSettings(CpuTriggerSettings value);
    [CompilerGeneratedAttribute]
public MemoryTriggerSettings get_MemoryTriggerSettings();
    [CompilerGeneratedAttribute]
private void set_MemoryTriggerSettings(MemoryTriggerSettings value);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Contracts.SampleActivity : object {
    [CompilerGeneratedAttribute]
private string <StartActivityIdPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StopActivityIdPath>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StopTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationId>k__BackingField;
    private Nullable`1<TimeSpan> _duration;
    private static Regex _validActivityIdPathRegex;
    public string StartActivityIdPath { get; public set; }
    public string StopActivityIdPath { get; public set; }
    public DateTimeOffset StartTimeUtc { get; public set; }
    public DateTimeOffset StopTimeUtc { get; public set; }
    public string RequestId { get; public set; }
    public string RoleInstance { get; public set; }
    public string OperationName { get; public set; }
    public string OperationId { get; public set; }
    public TimeSpan Duration { get; public set; }
    private static SampleActivity();
    [CompilerGeneratedAttribute]
public string get_StartActivityIdPath();
    [CompilerGeneratedAttribute]
public void set_StartActivityIdPath(string value);
    [CompilerGeneratedAttribute]
public string get_StopActivityIdPath();
    [CompilerGeneratedAttribute]
public void set_StopActivityIdPath(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_StartTimeUtc();
    [CompilerGeneratedAttribute]
public void set_StartTimeUtc(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_StopTimeUtc();
    [CompilerGeneratedAttribute]
public void set_StopTimeUtc(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(string value);
    [CompilerGeneratedAttribute]
public string get_RoleInstance();
    [CompilerGeneratedAttribute]
public void set_RoleInstance(string value);
    [CompilerGeneratedAttribute]
public string get_OperationName();
    [CompilerGeneratedAttribute]
public void set_OperationName(string value);
    [CompilerGeneratedAttribute]
public string get_OperationId();
    [CompilerGeneratedAttribute]
public void set_OperationId(string value);
    public TimeSpan get_Duration();
    public void set_Duration(TimeSpan value);
    public bool IsValid(ILogger logger);
    private bool IsGoodActivityIdPath(string activityId, ILogger logger);
}
public class Microsoft.ApplicationInsights.Profiler.Core.Contracts.TraceScavengerServiceOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <InitialDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Interval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <GracePeriod>k__BackingField;
    public TimeSpan InitialDelay { get; public set; }
    public TimeSpan Interval { get; public set; }
    public TimeSpan GracePeriod { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_InitialDelay();
    [CompilerGeneratedAttribute]
public void set_InitialDelay(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Interval();
    [CompilerGeneratedAttribute]
public void set_Interval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_GracePeriod();
    [CompilerGeneratedAttribute]
public void set_GracePeriod(TimeSpan value);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Contracts.UploadContext : object {
    private static char InstrumentationKeyShortKeyName;
    private static string InstrumentationKeyKeyName;
    private static string EndpointKeyName;
    private static string SessionIdKeyName;
    private static string StampIdKeyName;
    private static char StampIdShortKeyName;
    private static char TraceFilePathShortKeyName;
    private static string TraceFilePathKeyName;
    private static string MetadataFilePathKeyName;
    private static string PreserveTraceFileKeyName;
    private static string SkipEndpointCertificateValidationKeyName;
    private static string UploadModeKeyName;
    private static string SampleActivityFilePathKeyName;
    private static string PipeNameKeyName;
    private static char PipeNameShortKeyName;
    private static char RoleNameShortKeyName;
    private static string RoleNameKeyName;
    private static char TriggerTypeShortKeyName;
    private static string TriggerTypeKeyName;
    private static char EnvironmentShortKeyName;
    private static string EnvironmentKeyName;
    [CompilerGeneratedAttribute]
private Guid <AIInstrumentationKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <HostUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StampId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TraceFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MetadataFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveTraceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipEndpointCertificateValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private UploadMode <UploadMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SerializedSampleFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PipeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TriggerType>k__BackingField;
    [OptionAttribute("i", "iKey")]
public Guid AIInstrumentationKey { get; public set; }
    [OptionAttribute("host")]
public Uri HostUrl { get; public set; }
    [OptionAttribute("sessionId")]
public DateTimeOffset SessionId { get; public set; }
    [OptionAttribute("s", "stampId")]
public string StampId { get; public set; }
    [OptionAttribute("t", "trace")]
public string TraceFilePath { get; public set; }
    [OptionAttribute("metadata")]
public string MetadataFilePath { get; public set; }
    [OptionAttribute("preserve")]
public bool PreserveTraceFile { get; public set; }
    [OptionAttribute("insecure")]
public bool SkipEndpointCertificateValidation { get; public set; }
    [OptionAttribute("uploadMode")]
public UploadMode UploadMode { get; public set; }
    [OptionAttribute("sampleActivityFilePath")]
public string SerializedSampleFilePath { get; public set; }
    [OptionAttribute("p", "pipeName")]
public string PipeName { get; public set; }
    [OptionAttribute("r", "roleName")]
public string RoleName { get; public set; }
    [OptionAttribute("e", "environment")]
public string Environment { get; public set; }
    [OptionAttribute("u", "trigger")]
public string TriggerType { get; public set; }
    public bool UseNamedPipe { get; }
    [CompilerGeneratedAttribute]
public Guid get_AIInstrumentationKey();
    [CompilerGeneratedAttribute]
public void set_AIInstrumentationKey(Guid value);
    [CompilerGeneratedAttribute]
public Uri get_HostUrl();
    [CompilerGeneratedAttribute]
public void set_HostUrl(Uri value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_StampId();
    [CompilerGeneratedAttribute]
public void set_StampId(string value);
    [CompilerGeneratedAttribute]
public string get_TraceFilePath();
    [CompilerGeneratedAttribute]
public void set_TraceFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_MetadataFilePath();
    [CompilerGeneratedAttribute]
public void set_MetadataFilePath(string value);
    [CompilerGeneratedAttribute]
public bool get_PreserveTraceFile();
    [CompilerGeneratedAttribute]
public void set_PreserveTraceFile(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipEndpointCertificateValidation();
    [CompilerGeneratedAttribute]
public void set_SkipEndpointCertificateValidation(bool value);
    [CompilerGeneratedAttribute]
public UploadMode get_UploadMode();
    [CompilerGeneratedAttribute]
public void set_UploadMode(UploadMode value);
    [CompilerGeneratedAttribute]
public string get_SerializedSampleFilePath();
    [CompilerGeneratedAttribute]
public void set_SerializedSampleFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_PipeName();
    [CompilerGeneratedAttribute]
public void set_PipeName(string value);
    [CompilerGeneratedAttribute]
public string get_RoleName();
    [CompilerGeneratedAttribute]
public void set_RoleName(string value);
    [CompilerGeneratedAttribute]
public string get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(string value);
    [CompilerGeneratedAttribute]
public string get_TriggerType();
    [CompilerGeneratedAttribute]
public void set_TriggerType(string value);
    public virtual string ToString();
    public bool get_UseNamedPipe();
}
public enum Microsoft.ApplicationInsights.Profiler.Core.Contracts.UploadMode : Enum {
    public int value__;
    public static UploadMode Never;
    public static UploadMode OnSuccess;
    public static UploadMode Always;
}
public class Microsoft.ApplicationInsights.Profiler.Core.Contracts.UserConfiguration : object {
    [CompilerGeneratedAttribute]
private int <BufferSizeInMB>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <InitialDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ConfigurationUpdateFrequency>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProvideAnonymousTelemetry>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RandomProfilingOverhead>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSkipCompatibilityTest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private UploadMode <UploadMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveTraceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipEndpointCertificateValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private float <CPUTriggerThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <CPUTriggerCooldown>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MemoryTriggerThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MemoryTriggerCooldown>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StandaloneMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalCacheFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowsCrash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UploaderEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private NamedPipeOptions <NamedPipe>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<EventPipeProviderItem> <CustomEventPipeProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceScavengerServiceOptions <TraceScavenger>k__BackingField;
    public int BufferSizeInMB { get; public set; }
    public TimeSpan Duration { get; public set; }
    public TimeSpan InitialDelay { get; public set; }
    public TimeSpan ConfigurationUpdateFrequency { get; public set; }
    public bool ProvideAnonymousTelemetry { get; public set; }
    public bool IsDisabled { get; public set; }
    public float RandomProfilingOverhead { get; public set; }
    public bool IsSkipCompatibilityTest { get; public set; }
    public string Endpoint { get; public set; }
    [ObsoleteAttribute("Deprecated. Use UploadMode instead. This option will be removed in the future version.", "False")]
public bool SkipUpload { get; public set; }
    public UploadMode UploadMode { get; public set; }
    public bool PreserveTraceFile { get; public set; }
    public bool SkipEndpointCertificateValidation { get; public set; }
    public float CPUTriggerThreshold { get; public set; }
    public TimeSpan CPUTriggerCooldown { get; public set; }
    public float MemoryTriggerThreshold { get; public set; }
    public TimeSpan MemoryTriggerCooldown { get; public set; }
    public bool StandaloneMode { get; public set; }
    public string LocalCacheFolder { get; public set; }
    public bool AllowsCrash { get; public set; }
    public string UploaderEnvironment { get; public set; }
    public NamedPipeOptions NamedPipe { get; public set; }
    public IEnumerable`1<EventPipeProviderItem> CustomEventPipeProviders { get; public set; }
    public TraceScavengerServiceOptions TraceScavenger { get; public set; }
    [CompilerGeneratedAttribute]
public int get_BufferSizeInMB();
    [CompilerGeneratedAttribute]
public void set_BufferSizeInMB(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_InitialDelay();
    [CompilerGeneratedAttribute]
public void set_InitialDelay(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ConfigurationUpdateFrequency();
    [CompilerGeneratedAttribute]
public void set_ConfigurationUpdateFrequency(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_ProvideAnonymousTelemetry();
    [CompilerGeneratedAttribute]
public void set_ProvideAnonymousTelemetry(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDisabled();
    [CompilerGeneratedAttribute]
public void set_IsDisabled(bool value);
    [CompilerGeneratedAttribute]
public float get_RandomProfilingOverhead();
    [CompilerGeneratedAttribute]
public void set_RandomProfilingOverhead(float value);
    [CompilerGeneratedAttribute]
public bool get_IsSkipCompatibilityTest();
    [CompilerGeneratedAttribute]
public void set_IsSkipCompatibilityTest(bool value);
    [CompilerGeneratedAttribute]
public string get_Endpoint();
    [CompilerGeneratedAttribute]
public void set_Endpoint(string value);
    public bool get_SkipUpload();
    public void set_SkipUpload(bool value);
    [CompilerGeneratedAttribute]
public UploadMode get_UploadMode();
    [CompilerGeneratedAttribute]
public void set_UploadMode(UploadMode value);
    [CompilerGeneratedAttribute]
public bool get_PreserveTraceFile();
    [CompilerGeneratedAttribute]
public void set_PreserveTraceFile(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipEndpointCertificateValidation();
    [CompilerGeneratedAttribute]
public void set_SkipEndpointCertificateValidation(bool value);
    [CompilerGeneratedAttribute]
public float get_CPUTriggerThreshold();
    [CompilerGeneratedAttribute]
public void set_CPUTriggerThreshold(float value);
    [CompilerGeneratedAttribute]
public TimeSpan get_CPUTriggerCooldown();
    [CompilerGeneratedAttribute]
public void set_CPUTriggerCooldown(TimeSpan value);
    [CompilerGeneratedAttribute]
public float get_MemoryTriggerThreshold();
    [CompilerGeneratedAttribute]
public void set_MemoryTriggerThreshold(float value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MemoryTriggerCooldown();
    [CompilerGeneratedAttribute]
public void set_MemoryTriggerCooldown(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_StandaloneMode();
    [CompilerGeneratedAttribute]
public void set_StandaloneMode(bool value);
    [CompilerGeneratedAttribute]
public string get_LocalCacheFolder();
    [CompilerGeneratedAttribute]
public void set_LocalCacheFolder(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowsCrash();
    [CompilerGeneratedAttribute]
public void set_AllowsCrash(bool value);
    [CompilerGeneratedAttribute]
public string get_UploaderEnvironment();
    [CompilerGeneratedAttribute]
public void set_UploaderEnvironment(string value);
    [CompilerGeneratedAttribute]
public NamedPipeOptions get_NamedPipe();
    [CompilerGeneratedAttribute]
public void set_NamedPipe(NamedPipeOptions value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<EventPipeProviderItem> get_CustomEventPipeProviders();
    [CompilerGeneratedAttribute]
public void set_CustomEventPipeProviders(IEnumerable`1<EventPipeProviderItem> value);
    [CompilerGeneratedAttribute]
public TraceScavengerServiceOptions get_TraceScavenger();
    [CompilerGeneratedAttribute]
public void set_TraceScavenger(TraceScavengerServiceOptions value);
}
[ExtensionAttribute]
internal static class Microsoft.ApplicationInsights.Profiler.Core.EnumerableUtilities : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> NullAsEmpty(IEnumerable`1<T> target);
}
[EventSourceAttribute]
public class Microsoft.ApplicationInsights.Profiler.Core.EventListeners.ApplicationInsightsDataRelayEventSource : EventSource {
    public static string EventSourceName;
    public static string EventSourceGuidString;
    [CompilerGeneratedAttribute]
private static ApplicationInsightsDataRelayEventSource <Log>k__BackingField;
    public static ApplicationInsightsDataRelayEventSource Log { get; }
    private static ApplicationInsightsDataRelayEventSource();
    [CompilerGeneratedAttribute]
public static ApplicationInsightsDataRelayEventSource get_Log();
    [EventAttribute("1")]
public void RequestStart(string id, string name, long startTimeTicks, long endTimeTicks, string requestId, string operationName, string machineName, string operationId);
    [EventAttribute("2")]
public void RequestStop(string id, string name, long startTimeTicks, long endTimeTicks, string requestId, string operationName, string machineName, string operationId);
}
[EventSourceAttribute]
public class Microsoft.ApplicationInsights.Profiler.Core.EventListeners.ApplicationInsightsDataRelayEventSource30 : EventSource {
    public static string EventSourceName;
    public static string EventSourceGuidString;
    [CompilerGeneratedAttribute]
private static ApplicationInsightsDataRelayEventSource30 <Log>k__BackingField;
    public static ApplicationInsightsDataRelayEventSource30 Log { get; }
    private static ApplicationInsightsDataRelayEventSource30();
    [CompilerGeneratedAttribute]
public static ApplicationInsightsDataRelayEventSource30 get_Log();
    [EventAttribute("1")]
public void RequestStart(string id, string name, long startTimeTicks, long endTimeTicks, string requestId, string operationName, string machineName, string operationId);
    [EventAttribute("2")]
public void RequestStop(string id, string name, long startTimeTicks, long endTimeTicks, string requestId, string operationName, string machineName, string operationId);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.EventListeners.ApplicationInsightsDataRequestDataPayload : object {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [JsonPropertyNameAttribute("ver")]
public string Version { get; public set; }
    [JsonPropertyNameAttribute("id")]
public string Id { get; public set; }
    [JsonPropertyNameAttribute("duration")]
public TimeSpan Duration { get; public set; }
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.EventListeners.ApplicationInsightsOperationEvent : EventObjectBase {
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <TimeStamp>k__BackingField;
    [JsonIgnoreAttribute]
public string RequestId { get; public set; }
    [JsonIgnoreAttribute]
public string OperationId { get; public set; }
    [JsonIgnoreAttribute]
public string OperationName { get; public set; }
    [JsonPropertyNameAttribute("TimeStamp")]
public DateTimeOffset TimeStamp { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(string value);
    [CompilerGeneratedAttribute]
public string get_OperationId();
    [CompilerGeneratedAttribute]
public void set_OperationId(string value);
    [CompilerGeneratedAttribute]
public string get_OperationName();
    [CompilerGeneratedAttribute]
public void set_OperationName(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_TimeStamp();
    [CompilerGeneratedAttribute]
public void set_TimeStamp(DateTimeOffset value);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.EventListeners.ApplicationInsightsRequestEvent : EventObjectBase {
    [CompilerGeneratedAttribute]
private string <ActivityId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelatedActivityId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Keywords>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <TimeStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationInsightsDataRequestDataPayload <RequestDataPayload>k__BackingField;
    [JsonPropertyNameAttribute("ActivityId")]
public string ActivityId { get; public set; }
    [JsonPropertyNameAttribute("RelatedActivityId")]
public string RelatedActivityId { get; public set; }
    [JsonPropertyNameAttribute("Keywords")]
public int Keywords { get; public set; }
    [JsonPropertyNameAttribute("TimeStamp")]
public DateTimeOffset TimeStamp { get; public set; }
    [JsonIgnoreAttribute]
public IDictionary`2<string, string> Properties { get; public set; }
    [JsonIgnoreAttribute]
public ApplicationInsightsDataRequestDataPayload RequestDataPayload { get; public set; }
    [JsonIgnoreAttribute]
public string MachineName { get; }
    [JsonIgnoreAttribute]
public TimeSpan Duration { get; }
    [JsonIgnoreAttribute]
public string RequestId { get; }
    [JsonIgnoreAttribute]
public string OperationName { get; }
    [JsonIgnoreAttribute]
public string OperationId { get; }
    [CompilerGeneratedAttribute]
public string get_ActivityId();
    [CompilerGeneratedAttribute]
public void set_ActivityId(string value);
    [CompilerGeneratedAttribute]
public string get_RelatedActivityId();
    [CompilerGeneratedAttribute]
public void set_RelatedActivityId(string value);
    [CompilerGeneratedAttribute]
public int get_Keywords();
    [CompilerGeneratedAttribute]
public void set_Keywords(int value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_TimeStamp();
    [CompilerGeneratedAttribute]
public void set_TimeStamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public ApplicationInsightsDataRequestDataPayload get_RequestDataPayload();
    [CompilerGeneratedAttribute]
public void set_RequestDataPayload(ApplicationInsightsDataRequestDataPayload value);
    public string get_MachineName();
    public TimeSpan get_Duration();
    public string get_RequestId();
    public string get_OperationName();
    public string get_OperationId();
}
internal static class Microsoft.ApplicationInsights.Profiler.Core.EventListeners.EventName : object {
    public static string Request;
    public static string Operation;
}
internal abstract class Microsoft.ApplicationInsights.Profiler.Core.EventListeners.EventObjectBase : object {
    [CompilerGeneratedAttribute]
private string <EventName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EventId>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Payload>k__BackingField;
    [JsonPropertyNameAttribute("EventName")]
public string EventName { get; public set; }
    [JsonPropertyNameAttribute("EventId")]
public int EventId { get; public set; }
    [JsonPropertyNameAttribute("Payload")]
public Object[] Payload { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EventName();
    [CompilerGeneratedAttribute]
public void set_EventName(string value);
    [CompilerGeneratedAttribute]
public int get_EventId();
    [CompilerGeneratedAttribute]
public void set_EventId(int value);
    [CompilerGeneratedAttribute]
public Object[] get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(Object[] value);
}
[ExtensionAttribute]
internal static class Microsoft.ApplicationInsights.Profiler.Core.EventListeners.Extensions : object {
    [ExtensionAttribute]
public static ApplicationInsightsRequestEvent ToAppInsightsRequestEvent(EventWrittenEventArgs eventData, ISerializationProvider serializer, ISerializationOptionsProvider`1<JsonSerializerOptions> serializationOptionsProvider);
    [ExtensionAttribute]
public static ApplicationInsightsOperationEvent ToAppInsightsOperationEvent(EventWrittenEventArgs eventData, ISerializationProvider serializer);
    [ExtensionAttribute]
public static ArtifactLocationProperties ToArtifactLocationProperties(SampleActivity sample, string stampId, int processId, DateTimeOffset sessionId, Guid dataCube, string machineName);
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.EventListeners.ITraceSessionListener {
    public SampleActivityContainer SampleActivities { get; }
    public abstract virtual void EnableEvents(EventSource eventSource, EventLevel level);
    public abstract virtual void EnableEvents(EventSource eventSource, EventLevel level, EventKeywords matchAnyKeyword);
    public abstract virtual void OnRichPayloadEventWritten(EventWrittenEventArgs eventData);
    public abstract virtual SampleActivityContainer get_SampleActivities();
    public abstract virtual void Activate();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Poisoned(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Poisoned(EventHandler`1<EventArgs> value);
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.EventListeners.ITraceSessionListenerFactory {
    [ObsoleteAttribute("Use CreateTraceSessionListeners instead.", "False")]
public abstract virtual ITraceSessionListener CreateTraceSessionListener();
    public abstract virtual IEnumerable`1<ITraceSessionListener> CreateTraceSessionListeners();
}
internal class Microsoft.ApplicationInsights.Profiler.Core.EventListeners.TraceSessionListener : EventListener {
    public static string MicrosoftApplicationInsightsDataEventSourceName;
    [CompilerGeneratedAttribute]
private SampleActivityContainer <SampleActivities>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Poisoned;
    private bool _hasActivityReported;
    private bool _isActivated;
    private ISerializationProvider _serializer;
    private ISerializationOptionsProvider`1<JsonSerializerOptions> _serializerOptionsProvider;
    private ILogger _logger;
    private ManualResetEventSlim _ctorWaitHandle;
    private ConcurrentDictionary`2<string, SampleActivity> _sampleActivityBuffer;
    private short _healthPoints;
    private short _poisonHit;
    private bool _isDisposed;
    public SampleActivityContainer SampleActivities { get; private set; }
    public TraceSessionListener(SampleActivityContainerFactory sampleActivityContainerFactory, ISerializationProvider serializer, ISerializationOptionsProvider`1<JsonSerializerOptions> serializerOptionsProvider, ILogger`1<TraceSessionListener> logger);
    [CompilerGeneratedAttribute]
public sealed virtual SampleActivityContainer get_SampleActivities();
    [CompilerGeneratedAttribute]
private void set_SampleActivities(SampleActivityContainer value);
    protected virtual void OnEventSourceCreated(EventSource eventSource);
    protected virtual void OnEventWritten(EventWrittenEventArgs eventData);
    public sealed virtual void OnRichPayloadEventWritten(EventWrittenEventArgs eventData);
    protected void AlignCurrentThreadActivityId(Guid activityId);
    protected virtual void AlignCurrentThreadActivityIdImp(Guid activityId);
    protected virtual void RelayStopRequest(ApplicationInsightsOperationEvent operationEventData, long startTimeUTCTicks, Guid activityId);
    protected virtual void RelayStartRequest(ApplicationInsightsOperationEvent operationEventData, Guid activityId);
    private void AppendSampleActivity(SampleActivity activity);
    public sealed virtual void Activate();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Poisoned(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Poisoned(EventHandler`1<EventArgs> value);
    private void OnPoisoned();
    public virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
    private sealed virtual override void Microsoft.ApplicationInsights.Profiler.Core.EventListeners.ITraceSessionListener.EnableEvents(EventSource eventSource, EventLevel level);
    private sealed virtual override void Microsoft.ApplicationInsights.Profiler.Core.EventListeners.ITraceSessionListener.EnableEvents(EventSource eventSource, EventLevel level, EventKeywords matchAnyKeyword);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.EventListeners.TraceSessionListener30 : TraceSessionListener {
    public TraceSessionListener30(SampleActivityContainerFactory sampleActivityContainerFactory, ISerializationProvider serializer, ISerializationOptionsProvider`1<JsonSerializerOptions> serializerOptions, ILogger`1<TraceSessionListener30> logger);
    protected virtual void AlignCurrentThreadActivityIdImp(Guid activityId);
    protected virtual void RelayStartRequest(ApplicationInsightsOperationEvent operationEventData, Guid activityId);
    protected virtual void RelayStopRequest(ApplicationInsightsOperationEvent operationEventData, long startTimeUTCTicks, Guid activityId);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.EventListeners.TraceSessionListenerFactory : object {
    protected ILoggerFactory _loggerFactory;
    protected SampleActivityContainerFactory _sampleActivityContainerFactory;
    private IVersionProvider _versionProvider;
    private ISerializationOptionsProvider`1<JsonSerializerOptions> _serializerOptions;
    private ISerializationProvider _serializer;
    public TraceSessionListenerFactory(SampleActivityContainerFactory sampleActivityContainerFactory, IVersionProvider versionProvider, ISerializationProvider serializer, ISerializationOptionsProvider`1<JsonSerializerOptions> serializerOptions, ILoggerFactory loggerFactory);
    public virtual ITraceSessionListener CreateTraceSessionListener();
    [IteratorStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.EventListeners.TraceSessionListenerFactory/<CreateTraceSessionListeners>d__7")]
public virtual IEnumerable`1<ITraceSessionListener> CreateTraceSessionListeners();
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.IAppInsightsSinks {
    public abstract virtual void LogInformation(string message);
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.IEndpointProvider {
    public string ConnectionString { get; public set; }
    public abstract virtual string get_ConnectionString();
    public abstract virtual void set_ConnectionString(string value);
    public abstract virtual string GetInstrumentationKey();
    public abstract virtual Uri GetEndpoint(EndpointName endpointName);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.IPC.DuplexNamedPipeService : object {
    private SemaphoreSlim _threadSafeLock;
    private NamedPipeRole _currentMode;
    private PipeStream _pipeStream;
    private NamedPipeOptions _options;
    private IPayloadSerializer _payloadSerializer;
    private ILogger _logger;
    [CompilerGeneratedAttribute]
private string <PipeName>k__BackingField;
    public string PipeName { get; private set; }
    public DuplexNamedPipeService(NamedPipeOptions options, IPayloadSerializer payloadSerializer, ILogger`1<DuplexNamedPipeService> logger);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PipeName();
    [CompilerGeneratedAttribute]
private void set_PipeName(string value);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.IPC.DuplexNamedPipeService/<WaitForConnectionAsync>d__11")]
public sealed virtual Task WaitForConnectionAsync(string pipeName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.IPC.DuplexNamedPipeService/<ConnectAsync>d__12")]
public sealed virtual Task ConnectAsync(string pipeName, CancellationToken cancellationToken);
    public sealed virtual Task SendAsync(T message, TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.IPC.DuplexNamedPipeService/<ReadAsync>d__14`1")]
public sealed virtual Task`1<T> ReadAsync(TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.IPC.DuplexNamedPipeService/<ReadMessageAsync>d__15")]
private Task`1<string> ReadMessageAsync(TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.IPC.DuplexNamedPipeService/<SendMessageAsync>d__16")]
private Task SendMessageAsync(string message, TimeSpan timeout, CancellationToken cancellationToken);
    private TimeSpan ConfigureReadWriteTimeout(TimeSpan timeout);
    private void VerifyMessageIsTransmitable(string message);
    public sealed virtual void Dispose();
    private void VerifyModeIsSpecified();
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.IPC.DuplexNamedPipeService/<<ReadMessageAsync>b__15_0>d")]
[CompilerGeneratedAttribute]
private Task`1<string> <ReadMessageAsync>b__15_0();
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.IPC.INamedPipeClientFactory {
    public abstract virtual INamedPipeClientService CreateNamedPipeService();
}
public interface Microsoft.ApplicationInsights.Profiler.Core.IPC.INamedPipeClientService {
    public abstract virtual Task ConnectAsync(string pipeName, CancellationToken cancellationToken);
}
public interface Microsoft.ApplicationInsights.Profiler.Core.IPC.INamedPipeOperations {
    public string PipeName { get; }
    public abstract virtual string get_PipeName();
    public abstract virtual Task SendAsync(T message, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> ReadAsync(TimeSpan timeout, CancellationToken cancellationToken);
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.IPC.INamedPipeServerFactory {
    public abstract virtual INamedPipeServerService CreateNamedPipeService();
}
public interface Microsoft.ApplicationInsights.Profiler.Core.IPC.INamedPipeServerService {
    public abstract virtual Task WaitForConnectionAsync(string pipeName, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
public interface Microsoft.ApplicationInsights.Profiler.Core.IPC.IPayloadSerializer {
    public abstract virtual bool TrySerialize(T obj, String& serialized);
    public abstract virtual bool TryDeserialize(string serialized, T& obj);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.IPC.NamedPipeClientFactory : object {
    private NamedPipeOptions _options;
    private IPayloadSerializer _payloadSerializer;
    private ILoggerFactory _loggerFactory;
    public NamedPipeClientFactory(IOptions`1<UserConfiguration> userConfiguration, IPayloadSerializer payloadSerializer, ILoggerFactory loggerFactory);
    public sealed virtual INamedPipeClientService CreateNamedPipeService();
}
public class Microsoft.ApplicationInsights.Profiler.Core.IPC.NamedPipeOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <ConnectionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DefaultMessageTimeout>k__BackingField;
    public TimeSpan ConnectionTimeout { get; public set; }
    public TimeSpan DefaultMessageTimeout { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_ConnectionTimeout();
    [CompilerGeneratedAttribute]
public void set_ConnectionTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_DefaultMessageTimeout();
    [CompilerGeneratedAttribute]
public void set_DefaultMessageTimeout(TimeSpan value);
}
internal enum Microsoft.ApplicationInsights.Profiler.Core.IPC.NamedPipeRole : Enum {
    public int value__;
    public static NamedPipeRole NotSpecified;
    public static NamedPipeRole Client;
    public static NamedPipeRole Server;
}
internal class Microsoft.ApplicationInsights.Profiler.Core.IPC.NamedPipeServerFactory : object {
    private NamedPipeOptions _options;
    private IPayloadSerializer _payloadSerializer;
    private ILoggerFactory _loggerFactory;
    public NamedPipeServerFactory(IOptions`1<NamedPipeOptions> namedPipeOptions, IPayloadSerializer payloadSerializer, ILoggerFactory loggerFactory);
    public sealed virtual INamedPipeServerService CreateNamedPipeService();
}
public class Microsoft.ApplicationInsights.Profiler.Core.IPC.UnsupportedPayloadTypeException : Exception {
    public UnsupportedPayloadTypeException(string message);
    public UnsupportedPayloadTypeException(string message, Exception inner);
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.IProfilerFrontendClientFactory {
    public abstract virtual IProfilerFrontendClient CreateProfilerFrontendClient();
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.IServiceProfilerContext {
    public Guid AppInsightsAppId { get; }
    public Guid AppInsightsInstrumentationKey { get; }
    public bool HasAppInsightsInstrumentationKey { get; }
    public string MachineName { get; }
    public CancellationTokenSource ServiceProfilerCancellationTokenSource { get; }
    public Uri StampFrontendEndpointUrl { get; }
    public abstract virtual Guid get_AppInsightsAppId();
    public abstract virtual Guid get_AppInsightsInstrumentationKey();
    public abstract virtual bool get_HasAppInsightsInstrumentationKey();
    public abstract virtual string get_MachineName();
    public abstract virtual CancellationTokenSource get_ServiceProfilerCancellationTokenSource();
    public abstract virtual Uri get_StampFrontendEndpointUrl();
    [CompilerGeneratedAttribute]
public abstract virtual void add_AppIdFetched(EventHandler`1<AppIdFetchedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AppIdFetched(EventHandler`1<AppIdFetchedEventArgs> value);
    public abstract virtual Task`1<Guid> GetAppInsightsAppIdAsync();
    public abstract virtual void OnAppIdFetched(Guid appId);
}
public interface Microsoft.ApplicationInsights.Profiler.Core.IServiceProfilerProvider {
    public abstract virtual Task`1<bool> StartServiceProfilerAsync(IProfilerSource source, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> StopServiceProfilerAsync(IProfilerSource source, CancellationToken cancellationToken);
}
public interface Microsoft.ApplicationInsights.Profiler.Core.IThreadUtilities {
    public abstract virtual Task CallWithTimeoutAsync(Action action, TimeSpan timeout);
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.IUserCacheManager {
    public DirectoryInfo TempTraceDirectory { get; }
    public DirectoryInfo UserCacheDirectory { get; }
    public DirectoryInfo UploaderDirectory { get; }
    public abstract virtual DirectoryInfo get_TempTraceDirectory();
    public abstract virtual DirectoryInfo get_UserCacheDirectory();
    public abstract virtual DirectoryInfo get_UploaderDirectory();
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Orchestration.PostStopOptions : object {
    [CompilerGeneratedAttribute]
private string <TraceFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <StampFrontendHostUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProfilerSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UploaderFullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SampleActivity> <Samples>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTraceValid>k__BackingField;
    public string TraceFilePath { get; }
    public DateTimeOffset SessionId { get; }
    public Uri StampFrontendHostUrl { get; }
    public string ProfilerSource { get; }
    public string UploaderFullPath { get; public set; }
    public IEnumerable`1<SampleActivity> Samples { get; public set; }
    public bool IsTraceValid { get; public set; }
    public PostStopOptions(string traceFilePath, DateTimeOffset sessionId, Uri stampFrontendHostUrl, IEnumerable`1<SampleActivity> samples, IProfilerSource profilerSource, string uploaderFullPath);
    [CompilerGeneratedAttribute]
public string get_TraceFilePath();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_SessionId();
    [CompilerGeneratedAttribute]
public Uri get_StampFrontendHostUrl();
    [CompilerGeneratedAttribute]
public string get_ProfilerSource();
    [CompilerGeneratedAttribute]
public string get_UploaderFullPath();
    [CompilerGeneratedAttribute]
public void set_UploaderFullPath(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<SampleActivity> get_Samples();
    [CompilerGeneratedAttribute]
public void set_Samples(IEnumerable`1<SampleActivity> value);
    [CompilerGeneratedAttribute]
public bool get_IsTraceValid();
    [CompilerGeneratedAttribute]
public void set_IsTraceValid(bool value);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.ProfilerFrontendClientFactory : object {
    private IServiceProfilerContext _serviceProfilerContext;
    private ILoggerFactory _loggerFactory;
    private UserConfiguration _userConfiguration;
    private IAuthTokenProvider _authTokenProvider;
    public ProfilerFrontendClientFactory(IAuthTokenProvider authTokenServiceFactory, IServiceProfilerContext serviceProfilerContext, IOptions`1<UserConfiguration> userConfiguration, ILoggerFactory loggerFactory);
    public sealed virtual IProfilerFrontendClient CreateProfilerFrontendClient();
}
internal class Microsoft.ApplicationInsights.Profiler.Core.SampleTransfers.CustomEventsTracker : object {
    [CompilerGeneratedAttribute]
private ISerializationProvider <_serializer>k__BackingField;
    private ILogger _logger;
    private IServiceProfilerContext _context;
    private IResourceUsageSource _resourceUsage;
    private TelemetryClient _telemetryClient;
    private string _roleNameCache;
    private static string ServiceProfilerSample;
    private static string ServiceProfilerContent;
    private static string ServiceProfilerVersion;
    private static string RequestId;
    private static string ServiceProfilerIndex;
    private static string FileId;
    private static string StampId;
    private static string DataCube;
    private static string EtlFileSessionId;
    private static string MachineName;
    private static string ProcessId;
    private static string Source;
    private static string OperatingSystem;
    private static string AverageCPUUsage;
    private static string AverageMemoryUsage;
    public string CloudRoleName { get; }
    protected ISerializationProvider _serializer { get; }
    public CustomEventsTracker(IServiceProfilerContext serviceProfilerContext, ICustomTelemetryClientFactory customTelemetryClientFactory, IResourceUsageSource resourceUsage, ISerializationProvider serializer, ILogger`1<CustomEventsTracker> logger);
    public sealed virtual int Send(IEnumerable`1<SampleActivity> samples, UploadContext uploadContext, int processId, string profilingSource, Guid verifiedDataCube);
    public sealed virtual string get_CloudRoleName();
    private CloudContext GetCloudContext();
    private void SendIndexEventToAI(string fileId, string stampId, Guid dataCube, DateTimeOffset sessionId, int processId, string source, string operatingSystem, float averageCPUUsage, float averageMemoryUsage, string machineName);
    private void SendCustomEventToAI(SampleActivity sample, string stampId, int processId, DateTimeOffset sessionId, Guid dataCube, string machineName);
    protected virtual void SendCustomEventToAI(EventTelemetry telemetry);
    [CompilerGeneratedAttribute]
protected ISerializationProvider get__serializer();
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.SampleTransfers.ICustomEventsTracker {
    public abstract virtual int Send(IEnumerable`1<SampleActivity> samples, UploadContext uploadContext, int processId, string profilingSource, Guid verifiedDataCube);
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.SampleTransfers.ICustomTelemetryClientFactory {
    public abstract virtual TelemetryClient Create();
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.SampleTransfers.IRoleNameSource {
    public string CloudRoleName { get; }
    public abstract virtual string get_CloudRoleName();
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Sampling.SampleActivityBucket : ValueBucket`1<SampleActivity> {
    private double _currentHashValueMin;
    private SampleActivity _sample;
    public IEnumerable`1<SampleActivity> Samples { get; }
    [IteratorStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.Sampling.SampleActivityBucket/<get_Samples>d__1")]
public virtual IEnumerable`1<SampleActivity> get_Samples();
    public void Add(SampleActivity info);
    private static double GetHashValue(string input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.ApplicationInsights.Profiler.Core.Sampling.SampleActivityContainer : object {
    private ILogger _logger;
    private ConcurrentDictionary`2<string, ValueBucketer`2<SampleActivityBucket, SampleActivity>> _operations;
    public SampleActivityContainer(ILogger`1<SampleActivityContainer> logger);
    public bool AddSample(SampleActivity activity);
    public IEnumerable`1<SampleActivity> GetActivities();
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Sampling.SampleActivityContainerFactory : object {
    private ILoggerFactory _loggerFactory;
    public SampleActivityContainerFactory(ILoggerFactory loggerFactory);
    public SampleActivityContainer CreateNewInstance();
}
[ExtensionAttribute]
internal static class Microsoft.ApplicationInsights.Profiler.Core.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddProfilerCoreServices(IServiceCollection services);
    [ExtensionAttribute]
private static IServiceCollection AddTraceScavengerServices(IServiceCollection services);
    private static FileScavenger CreateFileScavenger(IServiceProvider serviceProvider);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.ServiceProfilerContext : object {
    [CompilerGeneratedAttribute]
private CancellationTokenSource <ServiceProfilerCancellationTokenSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <AppInsightsInstrumentationKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <AppInsightsAppId>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<AppIdFetchedEventArgs> AppIdFetched;
    [CompilerGeneratedAttribute]
private Uri <StampFrontendEndpointUrl>k__BackingField;
    private ILogger _logger;
    private AppInsightsProfileFetcher _appInsightsProfileFetcher;
    private TelemetryConfiguration _telemetryConfiguration;
    public string MachineName { get; }
    public CancellationTokenSource ServiceProfilerCancellationTokenSource { get; }
    public Guid AppInsightsInstrumentationKey { get; }
    public Guid AppInsightsAppId { get; private set; }
    public bool HasAppInsightsInstrumentationKey { get; }
    public Uri StampFrontendEndpointUrl { get; }
    public ServiceProfilerContext(IOptions`1<TelemetryConfiguration> telemetryConfiguration, IEndpointProvider endpointProvider, IOptions`1<UserConfiguration> userConfiguration, AppInsightsProfileFetcher appInsightsProfileFetcher, ILogger`1<IServiceProfilerContext> logger);
    public sealed virtual string get_MachineName();
    [CompilerGeneratedAttribute]
public sealed virtual CancellationTokenSource get_ServiceProfilerCancellationTokenSource();
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_AppInsightsInstrumentationKey();
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_AppInsightsAppId();
    [CompilerGeneratedAttribute]
private void set_AppInsightsAppId(Guid value);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.ServiceProfilerContext/<GetAppInsightsAppIdAsync>d__13")]
public sealed virtual Task`1<Guid> GetAppInsightsAppIdAsync();
    public sealed virtual void OnAppIdFetched(Guid appId);
    public sealed virtual bool get_HasAppInsightsInstrumentationKey();
    private Guid GetAppInsightsInstrumentationKeyInGuid(string instrumentationIkeyString);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AppIdFetched(EventHandler`1<AppIdFetchedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AppIdFetched(EventHandler`1<AppIdFetchedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_StampFrontendEndpointUrl();
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.ServiceProfilerContext/<<-ctor>b__0_0>d")]
[CompilerGeneratedAttribute]
private Task <.ctor>b__0_0();
}
internal class Microsoft.ApplicationInsights.Profiler.Core.ServiceProfilerProvider : object {
    internal static string TraceFileExtension;
    private SemaphoreSlim _singleProfilingSemaphore;
    private ILogger _logger;
    private IServiceProfilerContext _serviceProfilerContext;
    private ICustomEventsTracker _customEventsTracker;
    private IRoleNameSource _roleNameSource;
    private ITraceUploader _traceUploader;
    private IMetadataWriter _metadataWriter;
    private UserConfiguration _serviceProfilerConfiguration;
    private ITraceControl _traceControl;
    private IEventPipeTelemetryTracker _telemetryTracker;
    private IEnumerator`1<ITraceSessionListener> _sessionListeners;
    [CompilerGeneratedAttribute]
private ITraceSessionListener <SessionListener>k__BackingField;
    private CancellationTokenSource _terminateTokenSource;
    private ITraceSessionListenerFactory _traceSessionListenerFactory;
    private IAppInsightsSinks _appInsightsSinks;
    private INamedPipeClientFactory _namedPipeClientFactory;
    private IAuthTokenProvider _authTokenProvider;
    private IUploaderPathProvider _uploaderPathProvider;
    private ISerializationProvider _serializer;
    private IUserCacheManager _userCacheManager;
    private string _currentTraceFilePath;
    private static string StartProfilerTriggered;
    private static string StartProfilerSucceeded;
    private static string StopProfilerTriggered;
    private static string StopProfilerSucceeded;
    private bool IsProfiling { get; }
    internal ITraceSessionListener SessionListener { get; private set; }
    public ServiceProfilerProvider(IServiceProfilerContext serviceProfilerContext, ITraceControl traceControl, ITraceSessionListenerFactory traceSessionListenerFactory, IEventPipeTelemetryTracker telemetryTracker, ICustomEventsTracker customEventsTracker, IRoleNameSource roleNameSource, ITraceUploader traceUploader, IMetadataWriter metadataWriter, IOptions`1<UserConfiguration> serviceProfilerConfiguration, IAppInsightsSinks appInsightsSinks, INamedPipeClientFactory namedPipeClientFactory, IAuthTokenProvider aADAuthTokenServiceFactory, IUploaderPathProvider uploaderPathProvider, ISerializationProvider serializer, IUserCacheManager userCacheManager, ILogger`1<ServiceProfilerProvider> logger);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.ServiceProfilerProvider/<StartServiceProfilerAsync>d__1")]
public sealed virtual Task`1<bool> StartServiceProfilerAsync(IProfilerSource source, CancellationToken cancellationToken);
    private void ActivateNext(object sender, EventArgs e);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.ServiceProfilerProvider/<StopServiceProfilerAsync>d__3")]
public sealed virtual Task`1<bool> StopServiceProfilerAsync(IProfilerSource source, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.ServiceProfilerProvider/<PostStopProcessAsync>d__4")]
private Task PostStopProcessAsync(PostStopOptions e, CancellationToken cancellationToken);
    private void TryDeleteFiles(String[] filePaths);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.ServiceProfilerProvider/<UploadTraceAsync>d__6")]
private Task`1<UploadContext> UploadTraceAsync(PostStopOptions options, int processId, string namedPipeName, CancellationToken cancellationToken);
    private void CreateMetadata(IEnumerable`1<ArtifactLocationProperties> locations, string targetPath);
    private bool get_IsProfiling();
    [CompilerGeneratedAttribute]
internal ITraceSessionListener get_SessionListener();
    [CompilerGeneratedAttribute]
private void set_SessionListener(ITraceSessionListener value);
    public sealed virtual void Dispose();
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Stubs.CustomEventsTrackerStub : CustomEventsTracker {
    private ILogger _logger;
    public CustomEventsTrackerStub(IServiceProfilerContext serviceProfilerContext, ICustomTelemetryClientFactory customTelemetryClientFactory, IResourceUsageSource resourceUsage, ISerializationProvider serializer, ILogger`1<CustomEventsTrackerStub> logger);
    protected virtual void SendCustomEventToAI(EventTelemetry telemetry);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Stubs.CustomTelemetryClientStubFactory : object {
    private TelemetryConfiguration _telemetryConfiguration;
    private ITelemetryChannel _telemetryChannelStub;
    public CustomTelemetryClientStubFactory(string iKey, ITelemetryChannel telemetryChannel);
    public sealed virtual TelemetryClient Create();
    public sealed virtual void Dispose();
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Stubs.TelemetryChannelStub : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DeveloperMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndpointAddress>k__BackingField;
    public Nullable`1<bool> DeveloperMode { get; public set; }
    public string EndpointAddress { get; public set; }
    public TelemetryChannelStub(string endpointAddress, bool developMode);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_DeveloperMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DeveloperMode(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_EndpointAddress();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EndpointAddress(string value);
    public sealed virtual void Dispose();
    public sealed virtual void Flush();
    public sealed virtual void Send(ITelemetry item);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Stubs.TraceControlStub : object {
    private ILogger _logger;
    [CompilerGeneratedAttribute]
private DateTime <SessionStartUTC>k__BackingField;
    public DateTime SessionStartUTC { get; private set; }
    public TraceControlStub(ILogger`1<TraceControlStub> logger);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_SessionStartUTC();
    [CompilerGeneratedAttribute]
private void set_SessionStartUTC(DateTime value);
    public void Disable();
    public sealed virtual Task DisableAsync(CancellationToken cancellationToken);
    public sealed virtual void Enable(string traceFilePath);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Stubs.TraceSessionListenerStub : TraceSessionListener {
    private UserConfiguration _userConfiguration;
    private ILogger _logger;
    private DiagnosticsClientTraceConfiguration _traceConfiguration;
    private EventWaitHandle _ctorFinishHandle;
    public TraceSessionListenerStub(SampleActivityContainerFactory sampleActivityContainerFactory, IOptions`1<UserConfiguration> userConfiguration, ISerializationProvider serializer, ISerializationOptionsProvider`1<JsonSerializerOptions> serializerOptions, ILogger`1<TraceSessionListenerStub> logger);
    public void AddSampleActivity(SampleActivity activity);
    protected virtual void Dispose(bool isDisposing);
    protected virtual void OnEventSourceCreated(EventSource eventSource);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(EventSource eventSource);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Stubs.TraceSessionListenerStubFactory : TraceSessionListenerFactory {
    private IOptions`1<UserConfiguration> _userConfiguration;
    private ISerializationOptionsProvider`1<JsonSerializerOptions> _jsonSerializerOptionsProvider;
    [CompilerGeneratedAttribute]
private ISerializationProvider <_serializer>k__BackingField;
    private ISerializationProvider _serializer { get; }
    public TraceSessionListenerStubFactory(SampleActivityContainerFactory sampleActivityContainerFactory, IVersionProvider versionProvider, IOptions`1<UserConfiguration> userConfiguration, ISerializationProvider serializer, ISerializationOptionsProvider`1<JsonSerializerOptions> jsonSerializerOptionsProvider, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
private ISerializationProvider get__serializer();
    public virtual ITraceSessionListener CreateTraceSessionListener();
    [IteratorStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.Stubs.TraceSessionListenerStubFactory/<CreateTraceSessionListeners>d__7")]
public virtual IEnumerable`1<ITraceSessionListener> CreateTraceSessionListeners();
}
public class Microsoft.ApplicationInsights.Profiler.Core.ThreadUtilities : object {
    [CompilerGeneratedAttribute]
private static Lazy`1<ThreadUtilities> <Instance>k__BackingField;
    public static Lazy`1<ThreadUtilities> Instance { get; }
    private static ThreadUtilities();
    [CompilerGeneratedAttribute]
public static Lazy`1<ThreadUtilities> get_Instance();
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.ThreadUtilities/<CallWithTimeoutAsync>d__4")]
public sealed virtual Task CallWithTimeoutAsync(Action action, TimeSpan timeout);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.TraceControls.DiagnosticsClientProvider : object {
    private ConcurrentDictionary`2<int, DiagnosticsClient> _clients;
    public static DiagnosticsClientProvider Instance;
    private static DiagnosticsClientProvider();
    public DiagnosticsClient GetDiagnosticsClient();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.ApplicationInsights.Profiler.Core.TraceControls.DiagnosticsClientTraceConfiguration : object {
    private ILogger _logger;
    [CompilerGeneratedAttribute]
private int <CircularBufferMB>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequestRundown>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<EventPipeProvider> <Providers>k__BackingField;
    public int CircularBufferMB { get; }
    public bool RequestRundown { get; }
    public IEnumerable`1<EventPipeProvider> Providers { get; }
    public DiagnosticsClientTraceConfiguration(IOptions`1<UserConfiguration> userConfiguration, ILogger`1<DiagnosticsClientTraceConfiguration> logger);
    private List`1<EventPipeProvider> BuildServiceProfilerProviders();
    [CompilerGeneratedAttribute]
public int get_CircularBufferMB();
    [CompilerGeneratedAttribute]
public bool get_RequestRundown();
    [CompilerGeneratedAttribute]
public IEnumerable`1<EventPipeProvider> get_Providers();
}
internal class Microsoft.ApplicationInsights.Profiler.Core.TraceControls.DiagnosticsClientTraceControl : object {
    private string _typeName;
    private static SemaphoreSlim _singleTraceSessionHandle;
    private DiagnosticsClientProvider _diagnosticsClientProvider;
    private DiagnosticsClientTraceConfiguration _configuration;
    private IThreadUtilities _threadUtilities;
    private UserConfiguration _userConfiguration;
    private ILogger _logger;
    private EventPipeSession _currentSession;
    private Task _traceFileWritingTask;
    private static string TimeoutMessage;
    [CompilerGeneratedAttribute]
private DateTime <SessionStartUTC>k__BackingField;
    public DateTime SessionStartUTC { get; private set; }
    public DiagnosticsClientTraceControl(DiagnosticsClientProvider diagnosticsClientProvider, DiagnosticsClientTraceConfiguration configuration, IThreadUtilities threadUtilities, IOptions`1<UserConfiguration> userConfiguration, ILogger`1<DiagnosticsClientTraceControl> logger);
    private static DiagnosticsClientTraceControl();
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_SessionStartUTC();
    [CompilerGeneratedAttribute]
private void set_SessionStartUTC(DateTime value);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.TraceControls.DiagnosticsClientTraceControl/<DisableAsync>d__15")]
public sealed virtual Task DisableAsync(CancellationToken cancellationToken);
    public void Disable();
    public sealed virtual void Enable(string traceFilePath);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.TraceControls.DiagnosticsClientTraceControl/<StopProfilerSessionAsync>d__18")]
private Task StopProfilerSessionAsync(bool disposeEventSessionImmediately, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.TraceControls.DiagnosticsClientTraceControl/<StartWriteAsync>d__19")]
private Task StartWriteAsync(string traceFilePath, Stream readFrom, CancellationToken cancellationToken);
    private void DisposeEventPipeSession();
    public sealed virtual void Dispose();
}
internal class Microsoft.ApplicationInsights.Profiler.Core.TraceControls.EventSourceSpec : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProviderGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Keyword>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Level>k__BackingField;
    public string Name { get; }
    public Guid ProviderGuid { get; }
    public long Keyword { get; }
    public UInt32 Level { get; }
    public EventSourceSpec(string name, Guid providerId, long keyword, UInt32 level);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Guid get_ProviderGuid();
    [CompilerGeneratedAttribute]
public long get_Keyword();
    [CompilerGeneratedAttribute]
public UInt32 get_Level();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(EventSourceSpec other);
    public virtual int GetHashCode();
    public static EventPipeProvider op_Implicit(EventSourceSpec rhs);
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.TraceControls.ITraceControl {
    public DateTime SessionStartUTC { get; }
    public abstract virtual Task DisableAsync(CancellationToken cancellationToken);
    public abstract virtual void Enable(string traceFilePath);
    public abstract virtual DateTime get_SessionStartUTC();
}
internal class Microsoft.ApplicationInsights.Profiler.Core.TraceScavenger.TraceScavengerListener : object {
    private ILogger _logger;
    public TraceScavengerListener(ILogger`1<TraceScavengerListener> logger);
    public sealed virtual void OnDeleteException(string path, Exception exception);
    public sealed virtual void OnDeleteSuccess(string path);
    public sealed virtual void OnFilesDiscovered(ICollection`1<string> filesToDelete);
    public sealed virtual void OnMessage(string messageFormat, Object[] args);
    public sealed virtual void OnRunCancelled();
    public sealed virtual void OnRunFailed(Exception exception);
    public sealed virtual void OnRunSucceeded();
    public sealed virtual void OnStarted();
}
internal class Microsoft.ApplicationInsights.Profiler.Core.TraceScavenger.TraceScavengerService : BackgroundService {
    private ILogger _logger;
    private TraceScavengerServiceOptions _options;
    private FileScavenger _fileScavenger;
    public TraceScavengerService(IOptions`1<UserConfiguration> userConfiguration, FileScavenger fileScavenger, ILogger`1<TraceScavengerService> logger);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.TraceScavenger.TraceScavengerService/<ExecuteAsync>d__4")]
protected virtual Task ExecuteAsync(CancellationToken stoppingToken);
}
public class Microsoft.ApplicationInsights.Profiler.Core.UnsupportedPayloadContentException : Exception {
    public UnsupportedPayloadContentException(string message);
    public UnsupportedPayloadContentException(string message, Exception inner);
}
public interface Microsoft.ApplicationInsights.Profiler.Core.UploaderProxy.IOutOfProcCaller {
    public abstract virtual void Setup(string fileName, string arguments);
    [ObsoleteAttribute("This will be removed in the future. Use ExecuteAndWait() instead.", "True")]
public abstract virtual Process Execute(ProcessPriorityClass processPriorityClass);
    public abstract virtual int ExecuteAndWait(ProcessPriorityClass processPriorityClass);
}
public interface Microsoft.ApplicationInsights.Profiler.Core.UploaderProxy.IPrioritizedUploaderLocator {
    public int Priority { get; }
    public abstract virtual int get_Priority();
    public abstract virtual string Locate();
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.UploaderProxy.ITraceUploader {
    public abstract virtual Task`1<UploadContext> UploadAsync(DateTimeOffset sessionId, string traceFilePath, string metadataFilePath, string sampleFilePath, string namedPipeName, string roleName, string triggerType, CancellationToken cancellationToken, string uploaderFullPath);
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.UploaderProxy.IUploaderPathProvider {
    public abstract virtual bool TryGetUploaderFullPath(String& uploaderFullPath);
    public abstract virtual string GetUploaderFullPath();
}
public class Microsoft.ApplicationInsights.Profiler.Core.UploaderProxy.OutOfProcCaller : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public string FileName { get; private set; }
    public string Arguments { get; private set; }
    protected ILogger Logger { get; private set; }
    public OutOfProcCaller(ILogger`1<OutOfProcCaller> logger);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_Arguments();
    [CompilerGeneratedAttribute]
private void set_Arguments(string value);
    [ObsoleteAttribute("Use ExecuteAndWait instead.", "True")]
public virtual Process Execute(ProcessPriorityClass processPriorityClass);
    public sealed virtual int ExecuteAndWait(ProcessPriorityClass processPriorityClass);
    public sealed virtual void Setup(string fileName, string arguments);
    private Process ExecuteImp(ProcessPriorityClass processPriorityClass);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
private void set_Logger(ILogger value);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.UploaderProxy.TraceUploaderNoServer : object {
    private ILogger`1<ITraceUploader> _logger;
    private IServiceProfilerContext _context;
    private UserConfiguration _userConfiguration;
    public TraceUploaderNoServer(IServiceProfilerContext context, IOptions`1<UserConfiguration> userConfiguration, ILogger`1<ITraceUploader> logger);
    public sealed virtual Task`1<UploadContext> UploadAsync(DateTimeOffset sessionId, string traceFilePath, string metadataFilePath, string sampleFilePath, string namedPipeName, string roleName, string triggerType, CancellationToken cancellationToken, string uploaderFullPath);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.UploaderProxy.TraceUploaderProxy : object {
    private ILogger _logger;
    private IServiceProfilerContext _context;
    private IFile _fileService;
    private IOutOfProcCaller _uploader;
    private IUploadContextValidator _uploadContextValidator;
    private IProfilerCoreAssemblyInfo _profilerVersion;
    private UserConfiguration _userConfiguration;
    private IUploaderPathProvider _uploaderPathProvider;
    private IProfilerFrontendClientFactory _profilerFrontendClientFactory;
    public TraceUploaderProxy(IUploaderPathProvider uploaderPathProvider, IProfilerFrontendClientFactory profilerFrontendClient, IFile fileService, IOutOfProcCaller uploader, IServiceProfilerContext context, ILogger`1<TraceUploaderProxy> logger, IOptions`1<UserConfiguration> userConfiguration, IUploadContextValidator uploadContextValidator, IProfilerCoreAssemblyInfo profilerVersion);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.UploaderProxy.TraceUploaderProxy/<UploadAsync>d__1")]
public sealed virtual Task`1<UploadContext> UploadAsync(DateTimeOffset sessionId, string traceFilePath, string metadataFilePath, string sampleFilePath, string namedPipeName, string roleName, string triggerType, CancellationToken cancellationToken, string uploaderFullPath);
    private Task`1<int> CallUploadAsync(string exePath, string args, CancellationToken cancellationToken);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.UploaderProxy.UploaderLocatorByEnvironmentVariable : UploadLocatorBase {
    private static string UploaderPathEnvironmentVariablePattern;
    private IEnvironment _environment;
    public int Priority { get; }
    public UploaderLocatorByEnvironmentVariable(IFile fileService, IEnvironment environment, ILogger`1<UploaderLocatorByEnvironmentVariable> logger);
    public virtual int get_Priority();
    protected virtual string GetUploaderFullPath();
}
internal class Microsoft.ApplicationInsights.Profiler.Core.UploaderProxy.UploaderLocatorByUnzipping : UploadLocatorBase {
    private static string TraceUploaderArchiveFileName;
    private IUserCacheManager _userCacheManager;
    private IProfilerCoreAssemblyInfo _profilerCoreAssemblyInfo;
    private IZipFile _zipFileService;
    public int Priority { get; }
    public UploaderLocatorByUnzipping(IUserCacheManager userCacheManager, IProfilerCoreAssemblyInfo profilerCoreAssemblyInfo, IFile fileService, IZipFile zipFileService, ILogger`1<UploaderLocatorByUnzipping> logger);
    public virtual int get_Priority();
    protected virtual string GetUploaderFullPath();
    private string GetUploaderFullPath(string zipFolder);
    [IteratorStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.UploaderProxy.UploaderLocatorByUnzipping/<GetZipDirectories>d__9")]
internal IEnumerable`1<string> GetZipDirectories();
}
internal class Microsoft.ApplicationInsights.Profiler.Core.UploaderProxy.UploaderLocatorInUserCache : UploadLocatorBase {
    private IUserCacheManager _userCacheManager;
    public int Priority { get; }
    public UploaderLocatorInUserCache(IUserCacheManager userCacheManager, IFile fileService, ILogger`1<UploaderLocatorInUserCache> logger);
    public virtual int get_Priority();
    protected virtual string GetUploaderFullPath();
}
internal class Microsoft.ApplicationInsights.Profiler.Core.UploaderProxy.UploaderPathProvider : object {
    private IEnumerable`1<IPrioritizedUploaderLocator> _uploaderLocators;
    private ILogger _logger;
    public UploaderPathProvider(IEnumerable`1<IPrioritizedUploaderLocator> uploaderLocators, ILogger`1<UploaderPathProvider> logger);
    public sealed virtual string GetUploaderFullPath();
    public sealed virtual bool TryGetUploaderFullPath(String& uploaderFullPath);
}
internal abstract class Microsoft.ApplicationInsights.Profiler.Core.UploaderProxy.UploadLocatorBase : object {
    protected static string TraceUploaderAssemblyName;
    [CompilerGeneratedAttribute]
private IFile <FileService>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    protected IFile FileService { get; }
    protected ILogger Logger { get; }
    public int Priority { get; }
    public UploadLocatorBase(IFile fileService, ILogger`1<IPrioritizedUploaderLocator> logger);
    [CompilerGeneratedAttribute]
protected IFile get_FileService();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    public abstract virtual int get_Priority();
    public sealed virtual string Locate();
    protected abstract virtual string GetUploaderFullPath();
}
internal class Microsoft.ApplicationInsights.Profiler.Core.UserCacheManager : object {
    private static string ProductName;
    private static string Uploader;
    private static string ServiceProfilerTempTraceFolderName;
    private UserConfiguration _userConfiguration;
    private IProfilerCoreAssemblyInfo _profilerAssemblyInfo;
    [CompilerGeneratedAttribute]
private DirectoryInfo <UserCacheDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryInfo <UploaderDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryInfo <TempTraceDirectory>k__BackingField;
    public DirectoryInfo UserCacheDirectory { get; }
    public DirectoryInfo UploaderDirectory { get; }
    public DirectoryInfo TempTraceDirectory { get; }
    public UserCacheManager(IOptions`1<UserConfiguration> userConfiguration, IProfilerCoreAssemblyInfo profilerAssemblyInfo);
    [CompilerGeneratedAttribute]
public sealed virtual DirectoryInfo get_UserCacheDirectory();
    [CompilerGeneratedAttribute]
public sealed virtual DirectoryInfo get_UploaderDirectory();
    [CompilerGeneratedAttribute]
public sealed virtual DirectoryInfo get_TempTraceDirectory();
    private string GetUserCacheFolder();
}
[ExtensionAttribute]
internal static class Microsoft.ApplicationInsights.Profiler.Core.Utilities.ActivityIdUtilities : object {
    [ExtensionAttribute]
public static string GetActivityPath(Guid guid);
    private static int ActivityPathProcessID(Guid guid);
    private static string CreateActivityPathString(Guid guid);
}
[ExtensionAttribute]
internal static class Microsoft.ApplicationInsights.Profiler.Core.Utilities.ArgumentValidation : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Using editor generated code for null check. This method will be gone in the future codebase.", "True")]
public static T ThrowIfNull(T value, string paramName);
    [ExtensionAttribute]
[ObsoleteAttribute("Using editor generated code for null or empty check. This method will be gone in the future codebase.", "True")]
public static string ThrowIfNullOrEmpty(string value, string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.ApplicationInsights.Profiler.Core.Utilities.HighPerfJsonSerializationProvider : object {
    private static JsonSerializerOptions s_serializerOptions;
    public JsonSerializerOptions Options { get; }
    private static HighPerfJsonSerializationProvider();
    public sealed virtual JsonSerializerOptions get_Options();
    [NullableContextAttribute("2")]
public sealed virtual bool TryDeserialize(string serialized, T& obj);
    [NullableContextAttribute("2")]
public sealed virtual bool TrySerialize(T obj, String& serialized);
    private static JsonSerializerOptions BuildJsonSerializationOptions();
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Utilities.HighPerfJsonStringConverter : JsonConverter`1<string> {
    [CompilerGeneratedAttribute]
private static HighPerfJsonStringConverter <Instance>k__BackingField;
    public static HighPerfJsonStringConverter Instance { get; }
    private static HighPerfJsonStringConverter();
    [CompilerGeneratedAttribute]
public static HighPerfJsonStringConverter get_Instance();
    public virtual string Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, string value, JsonSerializerOptions options);
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.Utilities.ICompatibilityUtility {
    public abstract virtual ValueTuple`2<bool, string> IsCompatible();
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.Utilities.IEnvironment {
    public abstract virtual string ExpandEnvironmentVariables(string name);
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.Utilities.IFile {
    public abstract virtual bool Exists(string path);
}
[ObsoleteAttribute("Stop using this interface. This will be reserved for internal use only and it will be removed in the future version.", "False")]
public interface Microsoft.ApplicationInsights.Profiler.Core.Utilities.IFileWrapper {
    public abstract virtual bool Exist(string path);
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.Utilities.IMetadataWriter {
    public abstract virtual void Write(string filePath, IEnumerable`1<ArtifactLocationProperties> locationProperties);
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.Utilities.INetCoreAppVersion {
    public string NetCore2_1 { get; }
    public string NetCore2_2 { get; }
    public abstract virtual string get_NetCore2_1();
    public abstract virtual string get_NetCore2_2();
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.Utilities.IProfilerCoreAssemblyInfo {
    public Version Version { get; }
    public DirectoryInfo Directory { get; }
    public abstract virtual Version get_Version();
    public abstract virtual DirectoryInfo get_Directory();
}
public interface Microsoft.ApplicationInsights.Profiler.Core.Utilities.ISerializationOptionsProvider`1 {
    public T Options { get; }
    public abstract virtual T get_Options();
}
[NullableContextAttribute("2")]
public interface Microsoft.ApplicationInsights.Profiler.Core.Utilities.ISerializationProvider {
    public abstract virtual bool TrySerialize(T obj, String& serialized);
    public abstract virtual bool TryDeserialize(string serialized, T& obj);
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.Utilities.IUploadContextValidator {
    public abstract virtual string Validate(UploadContext uploadContext);
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.Utilities.IVersionProvider {
    public Version RuntimeVersion { get; }
    public abstract virtual Version get_RuntimeVersion();
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.Utilities.IZipFile {
    public abstract virtual void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Utilities.LinuxNetCoreAppVersion : object {
    public string NetCore2_1 { get; }
    public string NetCore2_2 { get; }
    public sealed virtual string get_NetCore2_1();
    public sealed virtual string get_NetCore2_2();
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Utilities.MetadataWriter : object {
    public sealed virtual void Write(string filePath, IEnumerable`1<ArtifactLocationProperties> locationProperties);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Utilities.MetadataWriterStub : object {
    public sealed virtual void Write(string filePath, IEnumerable`1<ArtifactLocationProperties> locationProperties);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Utilities.ProfilerCoreAssemblyInfo : object {
    [CompilerGeneratedAttribute]
private static ProfilerCoreAssemblyInfo <Instance>k__BackingField;
    private Lazy`1<Assembly> _thisAssembly;
    public static ProfilerCoreAssemblyInfo Instance { get; }
    public Version Version { get; }
    public DirectoryInfo Directory { get; }
    private static ProfilerCoreAssemblyInfo();
    [CompilerGeneratedAttribute]
public static ProfilerCoreAssemblyInfo get_Instance();
    public sealed virtual Version get_Version();
    public sealed virtual DirectoryInfo get_Directory();
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Utilities.RuntimeCompatibilityUtility : object {
    private ILogger _logger;
    private INetCoreAppVersion _netCoreAppVersion;
    private IVersionProvider _versionProvider;
    public RuntimeCompatibilityUtility(INetCoreAppVersion netCoreAppVersion, IVersionProvider versionProvider, ILogger`1<RuntimeCompatibilityUtility> logger);
    public sealed virtual ValueTuple`2<bool, string> IsCompatible();
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Utilities.SystemEnvironment : object {
    public sealed virtual string ExpandEnvironmentVariables(string name);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Utilities.SystemFile : object {
    public sealed virtual bool Exists(string path);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Utilities.SystemZipFile : object {
    public sealed virtual void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Utilities.UploadContextValidator : object {
    private Func`2<string, bool> _fileExists;
    public UploadContextValidator(Func`2<string, bool> fileExists);
    public sealed virtual string Validate(UploadContext uploadContext);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Utilities.VersionProvider : object {
    [CompilerGeneratedAttribute]
private Version <RuntimeVersion>k__BackingField;
    private ILogger _logger;
    public Version RuntimeVersion { get; }
    public VersionProvider(string version, ILogger`1<IVersionProvider> logger);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_RuntimeVersion();
    private Version Parse(string versionDescription);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Utilities.WindowsNetCoreAppVersion : object {
    public string NetCore2_1 { get; }
    public string NetCore2_2 { get; }
    public sealed virtual string get_NetCore2_1();
    public sealed virtual string get_NetCore2_2();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal abstract class Microsoft.ServiceProfiler.Collectors.ValueBucket`1 : object {
    [CompilerGeneratedAttribute]
private int <BucketIndex>k__BackingField;
    public int BucketIndex { get; public set; }
    public IEnumerable`1<T> Samples { get; }
    [CompilerGeneratedAttribute]
public int get_BucketIndex();
    [CompilerGeneratedAttribute]
public void set_BucketIndex(int value);
    public abstract virtual IEnumerable`1<T> get_Samples();
}
internal class Microsoft.ServiceProfiler.Collectors.ValueBucketer`2 : object {
    private object _lock;
    private double m_precision;
    private double m_minimumValue;
    private double m_logOnePlusPrecision;
    private int m_smallestNonEmptyBucket;
    private T[] m_values;
    public double Precision { get; }
    public double MinimumValue { get; }
    public ValueBucketer`2(double precision, double minimumValue);
    public T GetByIndex(int index);
    public T Get(double value);
    public void ForEach(Func`3<double, T, bool> action);
    public double get_Precision();
    public double get_MinimumValue();
    public double RoundToBucketMinimum(double value);
    public double RoundToBucketValue(double value);
    public double BucketSize(double value);
    public double GetBucketValue(int bucketIndex);
    public int GetBucketIndex(double value);
    private int ExpandBuckets(int bucketIndex);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
