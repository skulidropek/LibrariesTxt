internal static class Microsoft.ApplicationInsights.Profiler.Core.Logging.Constants : object {
    public static string AuthenticatedUserId;
    public static string ComponentVersion;
    public static string SdkVersion;
    public static string SessionId;
    public static string CloudRoleInstance;
    public static string OS;
    public static string Runtime;
    public static string ProcessWorkingSetInMB;
    public static string ProcessPagedMemoryInMB;
    public static string StartTimeUTC;
    public static string Heartbeat;
    public static string DurationInSeconds;
    public static string RunningMode;
    public static string EventName;
    public static string ProcessId;
    public static string EnablingExtensionVersion;
    public static string FeatureVersion;
    public static string FunctionHostVersion;
    public static string InContainer;
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Logging.EventPipeAppInsightsLogger : object {
    private ConnectionString _connectionString;
    private TelemetryClient _telemetryClient;
    private TelemetryConfiguration _telemetryConfiguration;
    private bool _isDisposed;
    private ServiceProvider _standaloneServiceProvider;
    public ConnectionString ConnectionString { get; public set; }
    public Type TelemetryChannelType { get; }
    private bool IsEnabled { get; }
    public EventPipeAppInsightsLogger(Guid instrumentationKey);
    public sealed virtual ConnectionString get_ConnectionString();
    public sealed virtual void set_ConnectionString(ConnectionString value);
    public sealed virtual Type get_TelemetryChannelType();
    public sealed virtual void SetCommonProperty(string key, string value);
    public sealed virtual void TrackEvent(string eventName, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics, bool preventSampling);
    public sealed virtual void TrackException(Exception exception, string operationName, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics);
    public sealed virtual void TrackTrace(string message, SeverityLevel severityLevel, IDictionary`2<string, string> properties, bool preventSampling);
    public sealed virtual void Flush();
    private bool get_IsEnabled();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
    private static void MergeDictionaries(IDictionary`2<K, V> target, IDictionary`2<K, V> dictionaryToMerge);
    private void Flush(TimeSpan delayPostFlush);
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.Logging.IAppInsightsLogger {
    public ConnectionString ConnectionString { get; public set; }
    public Type TelemetryChannelType { get; }
    public abstract virtual ConnectionString get_ConnectionString();
    public abstract virtual void set_ConnectionString(ConnectionString value);
    public abstract virtual void SetCommonProperty(string key, string value);
    public abstract virtual void TrackEvent(string eventName, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics, bool preventSampling);
    public abstract virtual void TrackException(Exception exception, string operationName, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics);
    public abstract virtual void TrackTrace(string message, SeverityLevel severityLevel, IDictionary`2<string, string> properties, bool preventSampling);
    public abstract virtual Type get_TelemetryChannelType();
    public abstract virtual void Flush();
}
internal interface Microsoft.ApplicationInsights.Profiler.Core.Logging.IEventPipeTelemetryTracker {
    public abstract virtual Task StartAsync(CancellationToken cancellationToken);
    public abstract virtual void SetCustomerAppInfo(Guid appId);
    public abstract virtual void SetUnhealthy(string reason);
    public abstract virtual void SetHealthy();
}
[ExtensionAttribute]
internal static class Microsoft.ApplicationInsights.Profiler.Core.Logging.ISupportSamplingExtensions : object {
    private static Nullable`1<double> NoSampling;
    private static ISupportSamplingExtensions();
    [ExtensionAttribute]
public static void PreventSampling(ISupportSampling supportSampling);
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Logging.NullAppInsightsLogger : object {
    [CompilerGeneratedAttribute]
private ConnectionString <ConnectionString>k__BackingField;
    public ConnectionString ConnectionString { get; public set; }
    public Type TelemetryChannelType { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ConnectionString get_ConnectionString();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectionString(ConnectionString value);
    public sealed virtual Type get_TelemetryChannelType();
    public sealed virtual void Flush();
    public sealed virtual void SetCommonProperty(string key, string value);
    public sealed virtual void TrackEvent(string eventName, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics, bool preventSampling);
    public sealed virtual void TrackException(Exception exception, string operationName, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics);
    public sealed virtual void TrackTrace(string message, SeverityLevel severityLevel, IDictionary`2<string, string> properties, bool preventSampling);
}
internal static class Microsoft.ApplicationInsights.Profiler.Core.Logging.TelemetryConstants : object {
    public static Guid ServiceProfilerAgentIKey;
    public static string SessionStarted;
    public static string SessionEnded;
    public static string TraceUploaded;
    public static string CallTraceUploaderFinished;
    private static TelemetryConstants();
}
internal class Microsoft.ApplicationInsights.Profiler.Core.Logging.TelemetryTracker : object {
    private IAppInsightsLogger _msAILogger;
    private string _unhealthyReason;
    internal static TimeSpan HeartbeatInterval;
    public TelemetryTracker(IAppInsightsLogger msAILogger);
    private static TelemetryTracker();
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual void SetCustomerAppInfo(Guid appId);
    public sealed virtual void SetUnhealthy(string reason);
    public sealed virtual void SetHealthy();
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Profiler.Core.Logging.TelemetryTracker/<StartHeartbeatAsync>d__8")]
private Task StartHeartbeatAsync(CancellationToken cancellationToken);
}
internal class ServiceProfiler.EventPipe.Logging.TelemetryTrackerBackgroundService : BackgroundService {
    private IEventPipeTelemetryTracker _tracker;
    public TelemetryTrackerBackgroundService(IEventPipeTelemetryTracker tracker);
    [AsyncStateMachineAttribute("ServiceProfiler.EventPipe.Logging.TelemetryTrackerBackgroundService/<ExecuteAsync>d__2")]
protected virtual Task ExecuteAsync(CancellationToken stoppingToken);
}
