internal enum Microsoft.ApplicationInsights.SnapshotCollector.Interop.ExitCode : Enum {
    public int value__;
    public static ExitCode Unknown;
    public static ExitCode Unavailable;
    public static ExitCode Success;
    public static ExitCode InvalidArgs;
    public static ExitCode IKeyIsNotGUID;
    public static ExitCode Exception_WebProxy;
    public static ExitCode Exception_CreateDumpFolder;
    public static ExitCode ProcessWatcherCouldNotStart;
    public static ExitCode AnotherInstanceRunning;
    public static ExitCode InvalidProcessId;
    public static ExitCode Exception_FeatureUnavailable;
    public static ExitCode Exception_Handled;
    public static ExitCode Exception_RequestTimeout;
    public static ExitCode MissingConnectionStringAndIkey;
    public static ExitCode UnableToParseConnectionString;
    public static ExitCode UnableToParseAuthenticationString;
    public static ExitCode AadAuthenticationFailed;
    public static ExitCode Exception_InvalidOperationException;
    public static ExitCode Exception_RemoteCouldNotBeResolved;
    public static ExitCode UnhandledException;
}
internal static class Microsoft.ApplicationInsights.SnapshotCollector.Interop.ExitCodeParser : object {
    public static ExitCode Parse(int exitCode);
    public static ExitCode FromException(Exception ex);
}
public class Microsoft.ServiceProfiler.Agent.FrontendClient.FeatureUnavailableException : InvalidOperationException {
    public FeatureUnavailableException(string msg);
}
internal class Microsoft.ServiceProfiler.Agent.FrontendClient.FrontendClientOptions : ClientOptions {
    private static string Scope;
    private static string StampCookieName;
    public FrontendClientOptions(Uri baseEndpoint, string userAgent, TokenCredential tokenCredential, bool skipCertificateValidation);
}
internal class Microsoft.ServiceProfiler.Agent.FrontendClient.FrontendResponseClassifier : ResponseClassifier {
    public virtual bool IsRetriableResponse(HttpMessage message);
}
public interface Microsoft.ServiceProfiler.Agent.FrontendClient.IStampFrontendClient {
    public string FeatureVersion { get; }
    public string StampID { get; }
    public bool FeatureEnabled { get; }
    public abstract virtual string get_FeatureVersion();
    public abstract virtual Task`1<string> GetStampIdAsync(CancellationToken cancellationToken);
    public abstract virtual string get_StampID();
    public abstract virtual bool get_FeatureEnabled();
}
internal class Microsoft.ServiceProfiler.Agent.FrontendClient.PreconditionFailedCallbackPolicy : HttpPipelinePolicy {
    private Func`1<ValueTask> _onPreconditionFailedAsync;
    public PreconditionFailedCallbackPolicy(Func`1<ValueTask> onPreconditionFailedAsync);
    public virtual void Process(HttpMessage message, ReadOnlyMemory`1<HttpPipelinePolicy> pipeline);
    [AsyncStateMachineAttribute("Microsoft.ServiceProfiler.Agent.FrontendClient.PreconditionFailedCallbackPolicy/<ProcessAsync>d__3")]
public virtual ValueTask ProcessAsync(HttpMessage message, ReadOnlyMemory`1<HttpPipelinePolicy> pipeline);
}
public class Microsoft.ServiceProfiler.Agent.FrontendClient.RateLimitedException : Exception {
    public RateLimitedException(string message);
}
public abstract class Microsoft.ServiceProfiler.Agent.FrontendClient.StampFrontendClient : object {
    [CompilerGeneratedAttribute]
private string <FeatureVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <InstrumentationKey>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpPipeline <Pipeline>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MachineName>k__BackingField;
    private string _stampID;
    private Nullable`1<bool> _featureEnabled;
    public string FeatureVersion { get; }
    public bool FeatureEnabled { get; protected set; }
    public string StampID { get; protected set; }
    public Guid InstrumentationKey { get; }
    protected HttpPipeline Pipeline { get; }
    protected string MachineName { get; }
    public StampFrontendClient(Uri host, Guid instrumentationKey, string machineName, string featureVersion, string userAgent, TokenCredential tokenCredential, bool skipCertificateValidation, bool enableAzureCoreDiagnostics);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FeatureVersion();
    public sealed virtual bool get_FeatureEnabled();
    protected void set_FeatureEnabled(bool value);
    public sealed virtual string get_StampID();
    protected void set_StampID(string value);
    public abstract virtual Task`1<string> GetStampIdAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public Guid get_InstrumentationKey();
    [CompilerGeneratedAttribute]
protected HttpPipeline get_Pipeline();
    protected abstract virtual Uri GetStampIDPath();
    [CompilerGeneratedAttribute]
protected string get_MachineName();
    protected static void ThrowIfInstrumentationKeyIsEmpty(Guid instrumentationKey);
    private HttpPipeline BuildHttpPipeline(Uri baseEndpoint, string userAgent, TokenCredential tokenCredential, bool skipCertificateValidation, bool enableAzureCoreDiagnostics);
    [CompilerGeneratedAttribute]
private void <BuildHttpPipeline>b__22_0();
    [AsyncStateMachineAttribute("Microsoft.ServiceProfiler.Agent.FrontendClient.StampFrontendClient/<<BuildHttpPipeline>b__22_1>d")]
[CompilerGeneratedAttribute]
private ValueTask <BuildHttpPipeline>b__22_1();
}
internal class Microsoft.ServiceProfiler.Agent.FrontendClient.TooManyRequestsThrowsRateLimitExceptionPolicy : HttpPipelineSynchronousPolicy {
    public virtual void OnReceivedResponse(HttpMessage message);
}
