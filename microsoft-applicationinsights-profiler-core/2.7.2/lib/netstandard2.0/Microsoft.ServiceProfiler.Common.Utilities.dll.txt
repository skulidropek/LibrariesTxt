[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class Microsoft.Diagnostics.Utilities.DirectoryUtilities : object {
    public static void CleanDirectories(string baseDir, string searchPattern, string excludedDirPath);
    public static int Clean(string directory);
}
internal static class Microsoft.Diagnostics.Utilities.FileUtilities : object {
    public static bool ForceDelete(string fileName);
    public static bool TryDelete(string fileName);
}
internal static class Microsoft.ServiceProfiler.Utilities.EncodingUtilities : object {
    private static HashAlgorithm s_sha256Encoder;
    private static string PIIMarker;
    private static EncodingUtilities();
    public static string Base64Encode(string plainText);
    public static string Base64Decode(string base64EncodedData);
    public static string Sha256(string input);
    public static string Sha256(Guid guid);
    public static string Anonymize(string input);
    public static string AnonymizeBase64(string input);
    public static string Anonymize(Guid input);
    public static string MarkAsPII(string input);
    public static bool IsPII(string input);
    private static string Sha256(Byte[] input, int bytesNeeded);
    private static string Sha256Base64(Byte[] input, int bytesNeeded);
    public static Byte[] GetRandomBytes(int length);
}
internal static class Microsoft.ServiceProfiler.Utilities.EnvironmentUtilities : object {
    private static string s_profilerWebJobFolder;
    private static string s_machineName;
    private static string s_hashedMachineName;
    private static string s_hashedMachineNameWithoutSiteName;
    public static string EnablingSiteExtensionVersion { get; }
    public static string SnapshotFeatureVersion { get; }
    public static string MachineName { get; }
    public static string HashedMachineName { get; }
    public static string MachineNameWithoutSiteName { get; }
    public static string HashedMachineNameWithoutSiteName { get; }
    public static string ShutdownFilePath { get; }
    public static string ExecutingAssemblyFileVersion { get; }
    public static string ExecutingAssemblyInformationalVersion { get; }
    private static EnvironmentUtilities();
    public static string get_EnablingSiteExtensionVersion();
    public static string get_SnapshotFeatureVersion();
    public static string CheckAndSanitizeMachineName(string input, bool throwIfInvalid);
    public static string get_MachineName();
    public static string CreateSessionId();
    public static string get_HashedMachineName();
    public static string get_MachineNameWithoutSiteName();
    public static string get_HashedMachineNameWithoutSiteName();
    public static bool IsRunningInAntares();
    public static string GetAntaresShortRegionName();
    public static string GetAntaresVersion();
    public static bool IsRunningInAzureFunction();
    public static string GetAzureFunctionVersion();
    public static bool IsRunningInServiceFabric();
    public static bool IsRunningInCloudService();
    [AsyncStateMachineAttribute("Microsoft.ServiceProfiler.Utilities.EnvironmentUtilities/<IsRunningInAzureVmAsync>d__21")]
public static Task`1<bool> IsRunningInAzureVmAsync(CancellationToken cancellationToken);
    public static bool IsRunningInWindowsContainer();
    public static bool IsProfilingSupportedInAntares(String& siteSku);
    public static string get_ShutdownFilePath();
    public static string get_ExecutingAssemblyFileVersion();
    public static string get_ExecutingAssemblyInformationalVersion();
    public static string GetApplicationInsightsSdkVersion(string versionPrefix);
    public static bool WasInstalledByDiagnosticServicesExtension();
    public static bool IsDiagnosticServicesExtensionEnabled();
    public static void RemoveWebJob();
    public static bool IsRunningInHyperVContainerAppService();
    private static bool IsRunningInKudu(string iisSiteName);
    private static string GetAssemblyFileVersion(Assembly assembly);
    private static string GetAssemblyInformationalVersion(Assembly assembly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.ServiceProfiler.Utilities.FailedDependencyContext : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, string> _properties;
    [CompilerGeneratedAttribute]
private object <Marker>k__BackingField;
    public object Marker { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, string> Properties { get; }
    public FailedDependencyContext(object marker);
    [CompilerGeneratedAttribute]
public object get_Marker();
    public Dictionary`2<string, string> get_Properties();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.ServiceProfiler.Utilities.FailedDependencyIgnoreMarker : object {
    internal static object Ignore404Marker;
    internal static object Expect404Marker;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static AsyncLocal`1<FailedDependencyContext> s_asyncLocalContext;
    private FailedDependencyIgnoreMarker(object marker);
    private static FailedDependencyIgnoreMarker();
    public static IDisposable Ignore404s();
    public static IDisposable Expect404s();
    [NullableContextAttribute("2")]
internal static FailedDependencyContext GetContext();
    public sealed virtual void Dispose();
}
public interface Microsoft.ServiceProfiler.Utilities.ITimeSource {
    public DateTime UtcNow { get; }
    public abstract virtual DateTime get_UtcNow();
    public abstract virtual Task Delay(TimeSpan timeSpan, CancellationToken cancellationToken);
    public abstract virtual IDisposable StartIntervalTimer(TimeSpan dueTime, TimeSpan period, TimerCallback callback, object state);
}
internal static class Microsoft.ServiceProfiler.Utilities.NativeMethods : object {
    public static int HKEY_LOCAL_MACHINE;
    public static UInt32 RRF_RT_DWORD;
    public static UInt32 REG_DWORD;
    public static int RegGetValueW(IntPtr hKey, string subKey, string value, UInt32 flags, UInt32& type, UInt32& data, UInt32& pcbData);
    public static IntPtr LoadLibraryW(string lpFileName);
}
internal class Microsoft.ServiceProfiler.Utilities.RateLimiter : object {
    private ITimeSource _timeSource;
    private int _operationCount;
    private int _operationLimit;
    [CompilerGeneratedAttribute]
private DateTime <LastResetTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Interval>k__BackingField;
    public int OperationLimit { get; public set; }
    public int RemainingOperationCount { get; }
    public DateTime LastResetTime { get; private set; }
    public TimeSpan Interval { get; }
    public RateLimiter(ITimeSource timeSource, TimeSpan interval, int operationLimit);
    public int get_OperationLimit();
    public void set_OperationLimit(int value);
    public int get_RemainingOperationCount();
    [CompilerGeneratedAttribute]
public DateTime get_LastResetTime();
    [CompilerGeneratedAttribute]
private void set_LastResetTime(DateTime value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Interval();
    public bool CheckOperation();
}
[ExtensionAttribute]
internal static class Microsoft.ServiceProfiler.Utilities.StructuredInstrumentationKeyExtensions : object {
    [ExtensionAttribute]
public static bool TryParseInstrumentationKey(string structuredIKey, Guid& instrumentationKey);
    [ExtensionAttribute]
public static bool TryParseStructuredInstrumentationKey(string structuredIKey, String& domainId, String& applicationId);
    private static bool IsUppercaseAlpha(char ch);
    private static bool IsLowercaseAlpha(char ch);
    private static bool IsDecimalDigit(char ch);
    private static bool IsValidDomainIdChar(char ch);
    private static bool IsValidApplicationIdChar(char ch);
}
internal class Microsoft.ServiceProfiler.Utilities.SystemTimeSource : object {
    public DateTime UtcNow { get; }
    public sealed virtual DateTime get_UtcNow();
    public sealed virtual Task Delay(TimeSpan timeSpan, CancellationToken cancellationToken);
    public sealed virtual IDisposable StartIntervalTimer(TimeSpan dueTime, TimeSpan period, TimerCallback callback, object state);
}
[DefaultMemberAttribute("Item")]
[DataContractAttribute]
internal class ServiceProfiler.Common.Utilities.ConnectionString : object {
    [CompilerGeneratedAttribute]
private Guid <InstrumentationKeyGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private Token[] <Tokens>k__BackingField;
    private static string FeatureSuffix;
    private static string TokenSeparator;
    private static char KeyValueSeparator;
    public string InstrumentationKey { get; }
    public Guid InstrumentationKeyGuid { get; }
    public string EndpointSuffix { get; }
    internal Token[] Tokens { get; }
    private string Item { get; }
    private ConnectionString(List`1<Token> tokens, Guid validatedGuidIkey);
    public static bool TryParse(string input, ConnectionString& connectionString);
    public ConnectionString WithFeatureEndpoint(string feature, Uri endpoint);
    public ConnectionString WithEndpointSuffix(string endpointSuffix);
    public Uri GetFeatureEndpoint(string feature);
    public bool IsFeatureEndpointSpecified(string feature);
    public string get_InstrumentationKey();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public Guid get_InstrumentationKeyGuid();
    public string get_EndpointSuffix();
    [CompilerGeneratedAttribute]
internal Token[] get_Tokens();
    [IteratorStateMachineAttribute("ServiceProfiler.Common.Utilities.ConnectionString/<Tokenize>d__17")]
internal static IEnumerable`1<Token> Tokenize(string input);
    private ConnectionString WithToken(Token newToken);
    private static string ResolveFeaturePrefix(string feature);
    private string FindFeatureEndpoint(string feature);
    private static string ComposeFeatureKey(string feature);
    private string FindTokenValueByKey(string key);
    private static string FindTokenValueByKey(IEnumerable`1<Token> tokens, string key);
    private string get_Item(string key);
}
[ExtensionAttribute]
internal static class ServiceProfiler.Common.Utilities.ConnectionStringDiagnosticServicesExtension : object {
    [ExtensionAttribute]
public static Uri ResolveIngestionEndpoint(ConnectionString connectionString);
    [ExtensionAttribute]
public static Uri ResolveProfilerEndpoint(ConnectionString connectionString);
    [ExtensionAttribute]
public static Uri ResolveSnapshotEndpoint(ConnectionString connectionString);
    [ExtensionAttribute]
public static Uri ResolveAppIdFetchUri(ConnectionString connectionString);
    internal static bool IsStandardIngestionEndpoint(string endpoint, String& endpointSuffix);
    [ExtensionAttribute]
public static ConnectionString WithTelemetryChannelEndpoint(ConnectionString connectionString, string telemetryChannelEndpoint);
    [ExtensionAttribute]
public static ConnectionString WithSnapshotAndTelemetryChannelEndpoints(ConnectionString connectionString, string telemetryChannelEndpoint, string snapshotCollectorEndpoint);
    [ExtensionAttribute]
public static ConnectionString WithProfilerAndTelemetryChannelEndpoints(ConnectionString connectionString, string telemetryChannelEndpoint, string profilerEndpoint);
}
[ExtensionAttribute]
internal static class ServiceProfiler.Common.Utilities.ConnectionStringExtensions : object {
    [ExtensionAttribute]
public static ConnectionString WithIngestionEndpoint(ConnectionString connectionString, Uri ingestionEndpoint);
    [ExtensionAttribute]
public static ConnectionString WithLiveMetricsEndpoint(ConnectionString connectionString, Uri liveMetricsEndpoint);
    [ExtensionAttribute]
public static ConnectionString WithProfilerEndpoint(ConnectionString connectionString, Uri profilerEndpoint);
    [ExtensionAttribute]
public static ConnectionString WithSnapshotEndpoint(ConnectionString connectionString, Uri snapshotEndpoint);
}
internal static class ServiceProfiler.Common.Utilities.ConnectionStringFeatures : object {
    public static Uri GetIngestionEndpoint(ConnectionString connectionString);
    public static Uri GetLiveMetricsEndpoint(ConnectionString connectionString);
    public static Uri GetProfilerEndpoint(ConnectionString connectionString);
    public static Uri GetSnapshotEndpoint(ConnectionString connectionString);
    public static bool HasIngestionEndpoint(ConnectionString connectionString);
    public static bool HasLiveMetricsEndpoint(ConnectionString connectionString);
    public static bool HasProfilerEndpoint(ConnectionString connectionString);
    public static bool HasSnapshotEndpoint(ConnectionString connectionString);
}
internal static class ServiceProfiler.Common.Utilities.CurrentProcessUtilities : object {
    private static Nullable`1<int> s_processId;
    public static bool TryGetId(Nullable`1& processId);
    public static int GetId();
}
internal static class ServiceProfiler.Common.Utilities.Endpoints : object {
    public static string ApplicationInsightsIngestionTrackPath;
    public static string FairfaxAppInsightsIngestion;
    public static string MooncakeAppInsightsIngestion;
    public static string PublicAppInsightsIngestion;
    public static string PublicServiceProfilerFrontEndAddress;
    public static string FairfaxServiceProfilerFrontEndAddress;
    public static string MooncakeServiceProfilerFrontEndAddress;
    public static string PublicSnapshotAgentAppInsightInstrumentationKey;
    public static string FairfaxSnapshotAgentAppInsightInstrumentationKey;
    public static string MooncakeSnapshotAgentAppInsightInstrumentationKey;
    public static string IngestionFeature;
    public static string LiveMetricsFeature;
    public static string ProfilerFeature;
    public static string SnapshotFeature;
    internal static string StandardIngestionFeaturePrefix;
    private static string PublicCloudTopLevelDomain;
    private static string FairfaxCloudTopLevelDomain;
    private static string MooncakeCloudTopLevelDomain;
    public static CloudType ResolveCloudType(string ingestionEndpoint);
    public static CloudType ResolveCloudType(ConnectionString connectionString);
    public static ConnectionString GetSnapshotCollectorInternalTelemetryConnectionString(string customerAppInsightsIngestion);
    public static Uri AdaptIngestionEndpoint(Uri baseIngestionEndpoint);
    public static Uri AdaptIngestionEndpoint(string baseIngestionEndpoint);
}
[ExtensionAttribute]
internal static class ServiceProfiler.Common.Utilities.StringExtensions : object {
    [ExtensionAttribute]
public static int IndexOfOrdinal(string str, char ch);
    [ExtensionAttribute]
public static string TrimStart(string target, string trimString, StringComparison stringComparison);
    [ExtensionAttribute]
public static string NullIfWhiteSpace(string s);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
