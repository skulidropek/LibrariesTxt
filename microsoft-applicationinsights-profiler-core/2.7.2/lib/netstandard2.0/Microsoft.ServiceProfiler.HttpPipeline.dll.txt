[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Azure.Core.ClientOptionsExtensions : object {
    [ExtensionAttribute]
public static ClientOptions SetEndpointPolicy(ClientOptions options, Uri baseEndpoint, HttpPipelinePosition pipelinePosition);
    [ExtensionAttribute]
public static ClientOptions SetEndpointRedirectionCachePolicy(ClientOptions options, Uri baseEndpoint);
    [ExtensionAttribute]
public static ClientOptions SetBearerPolicy(ClientOptions options, TokenCredential tokenCredential, string scope);
    [ExtensionAttribute]
public static ClientOptions SetChallengeBasedAuthenticationPolicy(ClientOptions options, TokenCredential tokenCredential, string fallbackScope);
    [ExtensionAttribute]
public static ClientOptions SetCacheControlPolicy(ClientOptions options, string directive, HttpPipelinePosition pipelinePosition);
    [ExtensionAttribute]
public static ClientOptions SetUserAgentPolicy(ClientOptions options, string userAgent, HttpPipelinePosition pipelinePosition);
    [ExtensionAttribute]
public static ClientOptions SetCookiePolicy(ClientOptions options, Uri baseEndpoint, string name, HttpPipelinePosition pipelinePosition);
    [ExtensionAttribute]
public static ClientOptions SetApiVersionPolicy(ClientOptions options, string apiVersion, HttpPipelinePosition pipelinePosition);
    [ExtensionAttribute]
public static ClientOptions SetForbiddenCallbackPolicy(ClientOptions options, Action onForbiddenResponse, HttpPipelinePosition pipelinePosition);
    [ExtensionAttribute]
public static void EnableDiagnosticsLogging(ClientOptions options);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Azure.Core.Pipeline.HttpPipelineExtensions : object {
    [AsyncStateMachineAttribute("Azure.Core.Pipeline.HttpPipelineExtensions/<GetAsync>d__0")]
[ExtensionAttribute]
public static ValueTask`1<Response> GetAsync(HttpPipeline pipeline, Uri path, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Core.Pipeline.HttpPipelineExtensions/<PostAsync>d__1`1")]
[ExtensionAttribute]
public static ValueTask`1<Response> PostAsync(HttpPipeline pipeline, Uri path, TReq jsonSerializable, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Core.Pipeline.HttpPipelineExtensions/<GetAndEnsureSucceededAsync>d__2")]
[ExtensionAttribute]
public static ValueTask`1<Response> GetAndEnsureSucceededAsync(HttpPipeline pipeline, Uri path, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Core.Pipeline.HttpPipelineExtensions/<GetAndEnsureSucceededAsync>d__3`1")]
[ExtensionAttribute]
public static ValueTask`1<Response`1<TResp>> GetAndEnsureSucceededAsync(HttpPipeline pipeline, Uri path, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Core.Pipeline.HttpPipelineExtensions/<PostAndEnsureSucceededAsync>d__4`1")]
[ExtensionAttribute]
public static ValueTask`1<Response> PostAndEnsureSucceededAsync(HttpPipeline pipeline, Uri path, TReq jsonSerializable, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Core.Pipeline.HttpPipelineExtensions/<SendAndEnsureSucceededAsync>d__5")]
private static ValueTask`1<Response> SendAndEnsureSucceededAsync(HttpPipeline pipeline, HttpMessage message, CancellationToken cancellationToken);
    private static HttpMessage CreateMessage(HttpPipeline pipeline, RequestMethod method, Uri path);
    private static HttpMessage CreateMessage(HttpPipeline pipeline, RequestMethod method, Uri path, TReq jsonSerializable);
    private static Request CreateRequest(HttpPipeline pipeline, RequestMethod method, Uri path);
    private static Request CreateRequest(HttpPipeline pipeline, RequestMethod method, Uri path, TReq jsonSerializable);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Azure.Core.Pipeline.RequestExtensions : object {
    [ExtensionAttribute]
public static Request AddPath(Request request, Uri path);
    [ExtensionAttribute]
public static Request AddJsonContent(Request request, TReq jsonSerializable);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Azure.ResponseExtensions : object {
    [AsyncStateMachineAttribute("Azure.ResponseExtensions/<DeserializeAsync>d__0`1")]
[ExtensionAttribute]
public static ValueTask`1<T> DeserializeAsync(Response response, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void ThrowIfIsError(Response response);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.ServiceProfiler.HttpPipeline.ApiVersionPolicy : HttpPipelineSynchronousPolicy {
    private string _apiVersion;
    public ApiVersionPolicy(string apiVersion);
    public virtual void OnSendingRequest(HttpMessage message);
}
internal static class Microsoft.ServiceProfiler.HttpPipeline.AuthorizationChallengeParser : object {
    [NullableContextAttribute("1")]
public static string GetChallengeParameterFromResponse(Response response, string challengeScheme, string challengeParameter);
    internal static bool TryGetNextChallenge(ReadOnlySpan`1& headerValue, ReadOnlySpan`1& challengeKey);
    internal static bool TryGetNextParameter(ReadOnlySpan`1& headerValue, ReadOnlySpan`1& paramKey, ReadOnlySpan`1& paramValue, char separator);
}
internal class Microsoft.ServiceProfiler.HttpPipeline.CacheControlPolicy : HttpPipelineSynchronousPolicy {
    private static string HeaderName;
    private HttpHeader _httpHeader;
    public CacheControlPolicy(string directive);
    public virtual void OnSendingRequest(HttpMessage message);
}
public static class Microsoft.ServiceProfiler.HttpPipeline.CacheControlPolicyType : object {
    public static string NoCache;
}
internal class Microsoft.ServiceProfiler.HttpPipeline.ChallengeBasedAuthenticationPolicy : BearerTokenAuthenticationPolicy {
    private static string DefaultScopeSuffix;
    private static ConcurrentDictionary`2<string, ChallengeParameters> s_challengeCache;
    private ChallengeParameters _challenge;
    private string _fallbackScope;
    public ChallengeBasedAuthenticationPolicy(TokenCredential tokenCredential, string fallbackScope);
    private static ChallengeBasedAuthenticationPolicy();
    protected virtual ValueTask AuthorizeRequestAsync(HttpMessage message);
    protected virtual void AuthorizeRequest(HttpMessage message);
    [AsyncStateMachineAttribute("Microsoft.ServiceProfiler.HttpPipeline.ChallengeBasedAuthenticationPolicy/<AuthorizeRequestOnChallengeAsync>d__7")]
protected virtual ValueTask`1<bool> AuthorizeRequestOnChallengeAsync(HttpMessage message);
    protected virtual bool AuthorizeRequestOnChallenge(HttpMessage message);
    private ValueTask AuthenticateAndAuthorizeRequestAsync(HttpMessage message, ChallengeParameters challenge);
    private void AuthenticateAndAuthorizeRequest(HttpMessage message, ChallengeParameters challenge);
    private static TokenRequestContext CreateTokenRequestContextFromChallenge(ChallengeParameters challenge, string parentRequestId);
    private bool TryGetChallengeParameters(HttpMessage message, ChallengeParameters& challenge);
    private bool TryCreateChallengeParameters(HttpMessage message, ChallengeParameters& challenge);
    private static string GetScope(Response response);
    private static string GetRequestAuthority(Request request);
}
internal class Microsoft.ServiceProfiler.HttpPipeline.CookiePolicy : HttpPipelineSynchronousPolicy {
    private static string CookieHeader;
    private static int MaxCookieCount;
    private string _name;
    private Uri _hostUri;
    private Cookie _cookie;
    public CookiePolicy(Uri hostUri, string name);
    public virtual void OnReceivedResponse(HttpMessage message);
    public virtual void OnSendingRequest(HttpMessage message);
    private Cookie ParseCookie(string cookieHeader);
}
public class Microsoft.ServiceProfiler.HttpPipeline.EndpointPolicy : HttpPipelineSynchronousPolicy {
    private Uri _endpoint;
    public Uri Endpoint { get; public set; }
    public EndpointPolicy(Uri endpoint);
    public Uri get_Endpoint();
    public void set_Endpoint(Uri value);
    public virtual void OnSendingRequest(HttpMessage message);
}
public class Microsoft.ServiceProfiler.HttpPipeline.ForbiddenCallbackPolicy : HttpPipelineSynchronousPolicy {
    private Action _onForbiddenResponse;
    public ForbiddenCallbackPolicy(Action onForbiddenResponse);
    public virtual void OnReceivedResponse(HttpMessage message);
}
internal static class Microsoft.ServiceProfiler.HttpPipeline.JsonObjectSerializer : object {
    public static JsonObjectSerializer Web;
    private static JsonObjectSerializer();
    private static JsonSerializerOptions CreateWebOptions();
}
public class Microsoft.ServiceProfiler.HttpPipeline.RedirectDetectionPolicy : HttpPipelineSynchronousPolicy {
    private Action`1<Uri> _onRedirect;
    private static string LocationHeaderName;
    public RedirectDetectionPolicy(Action`1<Uri> onRedirect);
    public virtual void OnReceivedResponse(HttpMessage message);
    private static bool IsRedirection(int status);
    private static bool TryGetRedirectLocation(HttpMessage message, Uri& location);
}
internal class Microsoft.ServiceProfiler.HttpPipeline.UserAgentPolicy : HttpPipelineSynchronousPolicy {
    private string _userAgent;
    public UserAgentPolicy(string userAgent);
    public virtual void OnSendingRequest(HttpMessage message);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
