public class Microsoft.ServiceProfiler.DefaultDistributedLock : object {
    public static IDistributedLock Instance;
    private static DefaultDistributedLock();
    public sealed virtual Task`1<IDisposable> TryAcquireLockAsync();
}
public interface Microsoft.ServiceProfiler.IDistributedLock {
    public abstract virtual Task`1<IDisposable> TryAcquireLockAsync();
}
public interface Microsoft.ServiceProfiler.IDistributedLockFactory {
    public abstract virtual IDistributedLock CreateInstance(string uri, string name, int count);
}
public class Microsoft.ServiceProfiler.Orchestration.DateTimeExpirationPolicy : object {
    private DateTime _expirationDate;
    private ITimeSource _timeSource;
    public bool IsExpired { get; }
    public DateTimeExpirationPolicy(ITimeSource timeSource, DateTime expirationDate);
    public sealed virtual bool get_IsExpired();
}
public class Microsoft.ServiceProfiler.Orchestration.DefaultDelaySource : object {
    public sealed virtual Task Delay(TimeSpan duration, CancellationToken cancellationToken);
}
public class Microsoft.ServiceProfiler.Orchestration.DefaultRandomSource : object {
    private Random _random;
    public sealed virtual int Next();
    public sealed virtual double NextDouble();
}
public class Microsoft.ServiceProfiler.Orchestration.DefaultResourceUsageSource : object {
    public sealed virtual void Dispose();
    public sealed virtual float GetAverageCPUUsage();
    public sealed virtual float GetAverageMemoryUsage();
}
public class Microsoft.ServiceProfiler.Orchestration.DefaultTimeSource : object {
    public DateTime UtcNow { get; }
    public sealed virtual DateTime get_UtcNow();
}
public interface Microsoft.ServiceProfiler.Orchestration.IDelaySource {
    public abstract virtual Task Delay(TimeSpan duration, CancellationToken cancellationToken);
}
public interface Microsoft.ServiceProfiler.Orchestration.IExpirationPolicy {
    public bool IsExpired { get; }
    public abstract virtual bool get_IsExpired();
}
public interface Microsoft.ServiceProfiler.Orchestration.IOrchestrator {
    public abstract virtual Task StartAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> StartProfilingAsync(SchedulingPolicy policy, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> StopProfilingAsync(SchedulingPolicy policy, CancellationToken cancellationToken);
}
public interface Microsoft.ServiceProfiler.Orchestration.IProfilerSettingsService {
    public SettingsContract CurrentSettings { get; }
    public abstract virtual SettingsContract get_CurrentSettings();
    [CompilerGeneratedAttribute]
public abstract virtual void add_SettingsUpdated(Action`1<SettingsContract> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SettingsUpdated(Action`1<SettingsContract> value);
    public abstract virtual Task`1<bool> WaitForInitializedAsync(TimeSpan timeout);
}
public interface Microsoft.ServiceProfiler.Orchestration.IProfilerSource {
    public string Source { get; }
    public abstract virtual string get_Source();
}
public interface Microsoft.ServiceProfiler.Orchestration.IRandomSource {
    public abstract virtual double NextDouble();
    public abstract virtual int Next();
}
public interface Microsoft.ServiceProfiler.Orchestration.IResourceUsageSource {
    public abstract virtual float GetAverageCPUUsage();
    public abstract virtual float GetAverageMemoryUsage();
}
public interface Microsoft.ServiceProfiler.Orchestration.ITimeSource {
    public DateTime UtcNow { get; }
    public abstract virtual DateTime get_UtcNow();
}
public class Microsoft.ServiceProfiler.Orchestration.LimitedExpirationPolicy : object {
    private int _count;
    private int _limit;
    public bool IsExpired { get; }
    public LimitedExpirationPolicy(int limit);
    public sealed virtual bool get_IsExpired();
}
public interface Microsoft.ServiceProfiler.Orchestration.MetricsProviders.IMetricsProvider {
    public abstract virtual float GetNextValue();
}
public interface Microsoft.ServiceProfiler.Orchestration.MetricsProviders.IMetricsProviderResolver`1 {
    public abstract virtual IMetricsProvider Resolve(T key);
}
public enum Microsoft.ServiceProfiler.Orchestration.MetricsProviders.MetricsProviderCategory : Enum {
    public int value__;
    public static MetricsProviderCategory CPU;
    public static MetricsProviderCategory Memory;
}
public class Microsoft.ServiceProfiler.Orchestration.MetricsProviders.PerformanceCounterMetricsProvider : object {
    private PerformanceCounter _performanceCounter;
    public PerformanceCounterMetricsProvider(Func`1<PerformanceCounter> performanceCounterProvider);
    public sealed virtual float GetNextValue();
    public sealed virtual void Dispose();
}
internal class Microsoft.ServiceProfiler.Orchestration.MetricsProviders.ProcessInfoCPUMetricsProvider : object {
    private static TimeSpan UpdateInterval;
    private ILogger _logger;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<ValueTuple`2<DateTimeOffset, TimeSpan>> _lastSnap;
    private float _nextValue;
    private int _cpuCount;
    public ProcessInfoCPUMetricsProvider(ILogger`1<ProcessInfoCPUMetricsProvider> logger);
    private static ProcessInfoCPUMetricsProvider();
    public sealed virtual float GetNextValue();
    [AsyncStateMachineAttribute("Microsoft.ServiceProfiler.Orchestration.MetricsProviders.ProcessInfoCPUMetricsProvider/<StartSampleAsync>d__7")]
private Task StartSampleAsync();
    private static TimeSpan GetCurrentCpuUsage(Process currentProcess);
}
internal class Microsoft.ServiceProfiler.Orchestration.MetricsProviders.WindowsMemoryMetricsProvider : object {
    private ILogger _logger;
    public WindowsMemoryMetricsProvider(ILogger`1<WindowsMemoryMetricsProvider> logger);
    public sealed virtual float GetNextValue();
    private long GetCurrentWorkingSetKB();
}
internal class Microsoft.ServiceProfiler.Orchestration.MetricsProviders.WindowsMetricsProviderResolver : object {
    private ProcessInfoCPUMetricsProvider _cpuMetricsProvider;
    private WindowsMemoryMetricsProvider _memoryMetricsProvider;
    public WindowsMetricsProviderResolver(ProcessInfoCPUMetricsProvider cpuMetricsProvider, WindowsMemoryMetricsProvider memoryMetricsProvider);
    public sealed virtual IMetricsProvider Resolve(MetricsProviderCategory category);
}
public class Microsoft.ServiceProfiler.Orchestration.MetricsProviders.ZeroMetricsProvider : object {
    public sealed virtual float GetNextValue();
}
internal static class Microsoft.ServiceProfiler.Orchestration.NativeMethods : object {
    public static bool TryGetPhysicallyInstalledSystemMemory(UInt64& totalMemoryInKiloBytes);
    private static bool GetPhysicallyInstalledSystemMemory(UInt64& TotalMemoryInKilobytes);
}
public abstract class Microsoft.ServiceProfiler.Orchestration.Orchestrator : object {
    [CompilerGeneratedAttribute]
private IDelaySource <DelaySource>k__BackingField;
    protected IDelaySource DelaySource { get; }
    public Orchestrator(IDelaySource delaySource);
    public abstract virtual Task StartAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> StartProfilingAsync(SchedulingPolicy policy, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> StopProfilingAsync(SchedulingPolicy policy, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
protected IDelaySource get_DelaySource();
}
public class Microsoft.ServiceProfiler.Orchestration.OrchestratorReport : object {
    [CompilerGeneratedAttribute]
private int <ElapsedSinceLastProfilingTimeInSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ElapsedProfilingTimeInSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ElapsedTimeSpentInStandbyMode>k__BackingField;
    public int ElapsedSinceLastProfilingTimeInSeconds { get; public set; }
    public int ElapsedProfilingTimeInSeconds { get; public set; }
    public int ElapsedTimeSpentInStandbyMode { get; public set; }
    public int ApproximateTotalElapsedTime { get; }
    [CompilerGeneratedAttribute]
public int get_ElapsedSinceLastProfilingTimeInSeconds();
    [CompilerGeneratedAttribute]
public void set_ElapsedSinceLastProfilingTimeInSeconds(int value);
    [CompilerGeneratedAttribute]
public int get_ElapsedProfilingTimeInSeconds();
    [CompilerGeneratedAttribute]
public void set_ElapsedProfilingTimeInSeconds(int value);
    [CompilerGeneratedAttribute]
public int get_ElapsedTimeSpentInStandbyMode();
    [CompilerGeneratedAttribute]
public void set_ElapsedTimeSpentInStandbyMode(int value);
    public int get_ApproximateTotalElapsedTime();
    public void Add(OrchestratorReport report);
}
public class Microsoft.ServiceProfiler.Orchestration.ProcessExpirationPolicy : object {
    public bool IsExpired { get; }
    public sealed virtual bool get_IsExpired();
}
public enum Microsoft.ServiceProfiler.Orchestration.ProfilerAction : Enum {
    public int value__;
    public static ProfilerAction Standby;
    public static ProfilerAction StartProfilingSession;
}
public abstract class Microsoft.ServiceProfiler.Orchestration.SchedulingPolicy : object {
    [CompilerGeneratedAttribute]
private bool <PolicyEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <PollingInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ProfilingDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ProfilingCooldown>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProfilerEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IDelaySource <DelaySource>k__BackingField;
    private IExpirationPolicy _expirationPolicy;
    private IOrchestrator _manager;
    public bool PolicyEnabled { get; protected set; }
    public TimeSpan PollingInterval { get; protected set; }
    public TimeSpan ProfilingDuration { get; protected set; }
    public TimeSpan ProfilingCooldown { get; protected set; }
    public bool ProfilerEnabled { get; protected set; }
    public string Source { get; }
    protected ILogger Logger { get; }
    protected IDelaySource DelaySource { get; }
    public SchedulingPolicy(TimeSpan profilingDuration, TimeSpan profilingCooldown, TimeSpan pollingInterval, IDelaySource delaySource, IExpirationPolicy expirationPolicy, ILogger`1<SchedulingPolicy> logger);
    [AsyncStateMachineAttribute("Microsoft.ServiceProfiler.Orchestration.SchedulingPolicy/<StartPolicyAsync>d__1")]
public Task StartPolicyAsync(CancellationToken cancellationToken);
    public void RegisterToOrchestrator(IOrchestrator manager);
    private void LogPolicy();
    protected virtual bool PolicyNeedsRefresh();
    public abstract virtual Task`1<IEnumerable`1<ValueTuple`2<TimeSpan, ProfilerAction>>> GetScheduleAsync();
    [CompilerGeneratedAttribute]
public bool get_PolicyEnabled();
    [CompilerGeneratedAttribute]
protected void set_PolicyEnabled(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_PollingInterval();
    [CompilerGeneratedAttribute]
protected void set_PollingInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ProfilingDuration();
    [CompilerGeneratedAttribute]
protected void set_ProfilingDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ProfilingCooldown();
    [CompilerGeneratedAttribute]
protected void set_ProfilingCooldown(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_ProfilerEnabled();
    [CompilerGeneratedAttribute]
protected void set_ProfilerEnabled(bool value);
    public abstract virtual string get_Source();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected IDelaySource get_DelaySource();
}
