[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.ServiceProfiler.DictionaryExtension : object {
    [ExtensionAttribute]
public static TValue GetOrAdd(IDictionary`2<TKey, TValue> dictionary, TKey key, Func`2<TKey, TValue> valueFactory);
}
[ExtensionAttribute]
public static class Microsoft.ServiceProfiler.KeyValuePairExtensions : object {
    [ExtensionAttribute]
public static void Deconstruct(KeyValuePair`2<T1, T2> tuple, T1& key, T2& value);
}
public class Microsoft.ServiceProfiler.TempFolder : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Path { get; }
    public TempFolder(string path);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void DisposeCore();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void <DisposeCore>b__3_0();
}
internal class Microsoft.ServiceProfiler.Utilities.AppIdNotFoundException : Exception {
    public AppIdNotFoundException(string iKey, Exception innerException);
    public AppIdNotFoundException(string iKey, HttpStatusCode statusCode);
}
public class Microsoft.ServiceProfiler.Utilities.AppInsightsProfile : object {
    public static AppInsightsProfile Empty;
    [CompilerGeneratedAttribute]
private Guid <AppId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    public Guid AppId { get; public set; }
    public string Location { get; public set; }
    private static AppInsightsProfile();
    [CompilerGeneratedAttribute]
public Guid get_AppId();
    [CompilerGeneratedAttribute]
public void set_AppId(Guid value);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Microsoft.ServiceProfiler.Utilities.AppInsightsProfileFetcher : object {
    private static JsonSerializerOptions s_jsonSerializerOptions;
    private bool _isDisposed;
    private Uri _breezeEndpoint;
    private HttpClient _httpClient;
    private static string RequestPathAppId;
    public AppInsightsProfileFetcher(string breezeEndpoint, string userAgent, DelegatingHandler handler);
    public AppInsightsProfileFetcher(string breezeEndpoint, DelegatingHandler handler);
    private static AppInsightsProfileFetcher();
    public Task`1<AppInsightsProfile> FetchProfileAsync(Guid iKey, int retryCount, Action`1<AppInsightsProfileResponse> responseCallback);
    [AsyncStateMachineAttribute("Microsoft.ServiceProfiler.Utilities.AppInsightsProfileFetcher/<FetchProfileAsync>d__3")]
private Task`1<AppInsightsProfile> FetchProfileAsync(Guid iKey, Uri endpoint, int retryCount, Action`1<AppInsightsProfileResponse> responseCallback);
    private static bool IsInstrumentationKeyEmpty(Guid instrumentationKey);
    private static bool IsRetriableResponse(HttpResponseMessage response);
    public sealed virtual void Dispose();
}
public class Microsoft.ServiceProfiler.Utilities.AppInsightsProfileResponse : object {
    public AppInsightsProfile Profile;
    public DateTime RequestStartTime;
    public TimeSpan Duration;
    public Uri RequestUri;
    public HttpStatusCode StatusCode;
}
public static class Microsoft.ServiceProfiler.Utilities.CertificateUtilities : object {
    public static StoreLocation[] s_locations;
    private static CertificateUtilities();
    public static X509Certificate2 FindCertificateBySubjectName(string subjectName, bool allowTestSigned);
    public static X509Certificate2 FindCertificateBySubjectName(string subjectName, StoreLocation storeLocation, bool allowTestSigned);
    public static X509Certificate2 FindCertificateBySubjectName(string subjectName, StoreLocation storeLocation, StoreName storeName, bool allowTestSigned);
    private static bool SubjectNameMatches(X509Certificate2 certificate, string subjectName);
    private static void DisposeCertificates(X509Certificate2Collection certificates, X509Certificate2 except);
}
[ExtensionAttribute]
public static class Microsoft.ServiceProfiler.Utilities.DateTimeOffsetExtensions : object {
    [ExtensionAttribute]
public static DateTimeOffset RemoveTime(DateTimeOffset time);
    [ExtensionAttribute]
public static bool FallsBefore(DateTimeOffset time, DateTimeOffset cutoff);
    [ExtensionAttribute]
public static bool FallsAfter(DateTimeOffset time, DateTimeOffset cutoff);
}
public static class Microsoft.ServiceProfiler.Utilities.DateTimeUtilities : object {
    [IteratorStateMachineAttribute("Microsoft.ServiceProfiler.Utilities.DateTimeUtilities/<GetUTCDates>d__0")]
public static IEnumerable`1<DateTime> GetUTCDates(DateTime startDate, DateTime endDate);
    public static DateTime Max(DateTime leftDate, DateTime rightDate);
}
public static class Microsoft.ServiceProfiler.Utilities.DirectoryUtilities : object {
    public static int Clean(string directory);
    [IteratorStateMachineAttribute("Microsoft.ServiceProfiler.Utilities.DirectoryUtilities/<GetFiles>d__1")]
public static IEnumerable`1<string> GetFiles(string directoryPath, string searchPattern, SearchOption searchOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.ServiceProfiler.Utilities.FileScavenger : object {
    private IFileScavengerEventListener _eventListener;
    private ICollection`1<string> _cleanupDirectories;
    private string _deletePattern;
    private TimeSpan _gracePeriod;
    public FileScavenger(IFileScavengerEventListener eventListener, FileScavengerOptions options);
    public void Run(CancellationToken cancellationToken);
    private bool IsInGracePeriod(string path);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private IEnumerable`1<string> <Run>b__5_5(string d);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.ServiceProfiler.Utilities.FileScavengerOptions : object {
    [CompilerGeneratedAttribute]
private String[] <CleanupDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeletePattern>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <GracePeriod>k__BackingField;
    public String[] CleanupDirectories { get; public set; }
    public string DeletePattern { get; public set; }
    public TimeSpan GracePeriod { get; public set; }
    public FileScavengerOptions(String[] cleanupDirectories);
    [CompilerGeneratedAttribute]
public String[] get_CleanupDirectories();
    [CompilerGeneratedAttribute]
public void set_CleanupDirectories(String[] value);
    [CompilerGeneratedAttribute]
public string get_DeletePattern();
    [CompilerGeneratedAttribute]
public void set_DeletePattern(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_GracePeriod();
    [CompilerGeneratedAttribute]
public void set_GracePeriod(TimeSpan value);
}
public static class Microsoft.ServiceProfiler.Utilities.FileUtilities : object {
    internal static string PendingDeleteSuffix;
    [CompilerGeneratedAttribute]
private static Action`1<FileUtilitiesFaultEventArgs> OnFileDeleteFault;
    [CompilerGeneratedAttribute]
private static Action`1<FileUtilitiesFaultEventArgs> OnFileMoveFault;
    [CompilerGeneratedAttribute]
public static void add_OnFileDeleteFault(Action`1<FileUtilitiesFaultEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_OnFileDeleteFault(Action`1<FileUtilitiesFaultEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_OnFileMoveFault(Action`1<FileUtilitiesFaultEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_OnFileMoveFault(Action`1<FileUtilitiesFaultEventArgs> value);
    public static bool ForceDelete(string fileName);
    internal static void Delete(string fileName);
    public static Task CopyAsync(string sourceFilePath, string destinationFilePath, bool overwrite, CancellationToken cancellationToken);
    public static Task WriteAllTextAsync(string filePath, string text, bool overwrite, CancellationToken cancellationToken);
    public static Task WriteAllTextAsync(string filePath, string text, Encoding encoding, bool overwrite, CancellationToken cancellationToken);
    public static Task WriteAllBytesAsync(string filePath, Byte[] bytes, bool overwrite, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceProfiler.Utilities.FileUtilities/<WriteStreamToFileAsync>d__13")]
public static Task WriteStreamToFileAsync(string filePath, Stream sourceStream, bool overwrite, CancellationToken cancellationToken);
    public static FileStream OpenWrite(string filePath, bool overwrite);
    private static IOException CreateFileExistsException(string filePath);
}
public class Microsoft.ServiceProfiler.Utilities.FileUtilitiesFaultEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public string Path { get; }
    public Exception Exception { get; }
    public FileUtilitiesFaultEventArgs(string path, Exception exception);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
}
[ExtensionAttribute]
public static class Microsoft.ServiceProfiler.Utilities.HttpClientExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.ServiceProfiler.Utilities.HttpClientExtensions/<InvokeHttpRequestWithRetriesAsync>d__0")]
[ExtensionAttribute]
public static Task`1<HttpResponseMessage> InvokeHttpRequestWithRetriesAsync(HttpClient httpClient, Func`2<HttpClient, Task`1<HttpResponseMessage>> httpMethod, Predicate`1<HttpResponseMessage> isRetriableResponse, int retryCount, int millisecondsRetryDelay);
}
[ExtensionAttribute]
public static class Microsoft.ServiceProfiler.Utilities.IAsyncEnumerableExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.ServiceProfiler.Utilities.IAsyncEnumerableExtensions/<ParallelForEachAsync>d__0`1")]
[ExtensionAttribute]
public static Task ParallelForEachAsync(IAsyncEnumerable`1<T> iterator, int degreeOfParallelism, Func`3<T, CancellationToken, Task> taskFactory, CancellationToken cancellationToken);
}
public interface Microsoft.ServiceProfiler.Utilities.IFileScavengerEventListener {
    public abstract virtual void OnStarted();
    public abstract virtual void OnMessage(string messageFormat, Object[] args);
    public abstract virtual void OnFilesDiscovered(ICollection`1<string> filesToDelete);
    public abstract virtual void OnDeleteException(string path, Exception exception);
    public abstract virtual void OnDeleteSuccess(string path);
    public abstract virtual void OnRunSucceeded();
    public abstract virtual void OnRunCancelled();
    public abstract virtual void OnRunFailed(Exception exception);
}
public class Microsoft.ServiceProfiler.Utilities.LRUCache`2 : object {
    [CompilerGeneratedAttribute]
private Action`2<TKey, TValue> OnItemRemoved;
    private int _maxCount;
    private Dictionary`2<TKey, LinkedListNode`1<LRUCacheItem`2<TKey, TValue, TKey, TValue>>> _dict;
    private LinkedList`1<LRUCacheItem`2<TKey, TValue, TKey, TValue>> _list;
    public bool IsEmpty { get; }
    public int Count { get; }
    public LRUCache`2(int maxCount);
    public void Add(TKey key, TValue value);
    public bool TryGet(TKey key, TValue& value);
    public void MarkAccess(TKey key);
    public bool get_IsEmpty();
    public int get_Count();
    [CompilerGeneratedAttribute]
public void add_OnItemRemoved(Action`2<TKey, TValue> value);
    [CompilerGeneratedAttribute]
public void remove_OnItemRemoved(Action`2<TKey, TValue> value);
    private void MarkNodeAsMostRecentlyUsed(LinkedListNode`1<LRUCacheItem`2<TKey, TValue, TKey, TValue>> node);
}
internal class Microsoft.ServiceProfiler.Utilities.NetworkInformation : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <PrivateLinkId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <VnetTrafficTag>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SubnetTrafficTag>k__BackingField;
    [CompilerGeneratedAttribute]
private IPAddress <PublicAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private IPAddress <PrivateAddress>k__BackingField;
    public UInt32 PrivateLinkId { get; private set; }
    public UInt32 VnetTrafficTag { get; private set; }
    public UInt32 SubnetTrafficTag { get; private set; }
    public IPAddress PublicAddress { get; private set; }
    public IPAddress PrivateAddress { get; private set; }
    public bool IsPrivateLink { get; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_PrivateLinkId();
    [CompilerGeneratedAttribute]
private void set_PrivateLinkId(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_VnetTrafficTag();
    [CompilerGeneratedAttribute]
private void set_VnetTrafficTag(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_SubnetTrafficTag();
    [CompilerGeneratedAttribute]
private void set_SubnetTrafficTag(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IPAddress get_PublicAddress();
    [CompilerGeneratedAttribute]
private void set_PublicAddress(IPAddress value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IPAddress get_PrivateAddress();
    [CompilerGeneratedAttribute]
private void set_PrivateAddress(IPAddress value);
    [IsReadOnlyAttribute]
public bool get_IsPrivateLink();
    [IsReadOnlyAttribute]
public virtual string ToString();
    public static NetworkInformation Parse(IPAddress ipAddress);
    private static NetworkInformation ParseIPv6Address(IPAddress ipAddress);
    private static IPAddress ExtractIpv4Address(Byte[] bytes, int offset);
}
public static class Microsoft.ServiceProfiler.Utilities.ProcessUtilities : object {
    private static Encoding s_utf8NoBOM;
    private static ProcessUtilities();
    public static Task`1<int> RunAsync(string filePath, string arguments, Func`3<StreamReader, CancellationToken, Task> processStandardOutputAsync, Func`3<StreamReader, CancellationToken, Task> processStandardErrorAsync, CancellationToken cancellationToken);
    public static Task`1<int> RunAsync(string filePath, string arguments, Func`3<StreamReader, CancellationToken, Task> processStandardOutputAsync, Func`3<StreamReader, CancellationToken, Task> processStandardErrorAsync, Action`1<ProcessStartInfo> configureStartInfo, CancellationToken cancellationToken);
    public static Task`1<int> RunAsync(string filePath, string arguments, Action`1<string> processStandardOutput, Action`1<string> processStandardError, CancellationToken cancellationToken);
}
public static class Microsoft.ServiceProfiler.Utilities.Retry : object {
    private static int DefaultMaxAttempts;
    private static int DefaultMillisecondBackoff;
    public static void Run(Action action);
    public static Task RunAsync(Func`1<Task> action);
    public static Task RunAsync(int maxAttempts, Func`1<Task> action);
    public static Task`1<T> RunAsync(Func`1<Task`1<T>> action);
    public static Task`1<T> RunAsync(int maxAttempts, Func`1<Task`1<T>> action);
    public static Task`1<T> RunAsync(Func`2<RetryControl, Task`1<T>> action);
    [AsyncStateMachineAttribute("Microsoft.ServiceProfiler.Utilities.Retry/<RunAsync>d__6`1")]
public static Task`1<T> RunAsync(int maxAttempts, Func`2<RetryControl, Task`1<T>> action);
}
public class Microsoft.ServiceProfiler.Utilities.RetryControl : object {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    public bool Success { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(bool value);
}
public static class Microsoft.ServiceProfiler.Utilities.StringUtilities : object {
    public static string Compress(string originalString);
    public static string Decompress(string compressedString);
}
public static class Microsoft.ServiceProfiler.Utilities.SymbolPathBuilder : object {
    public static string GetGlobalSymbolPath(string datacubeSymbolPath, string symbolCacheRoot, Uri symbolServerLocation);
    private static string GetGlobalSymbolCacheFolder(string symbolCacheRoot, string name);
    private static void AddPath(StringBuilder builder, string cache, string remote);
}
public static class Microsoft.ServiceProfiler.Utilities.TimeUtilities : object {
    public static TimeSpan TimeRemainingUntilTargetTime(DateTime utcNow, TimeSpan utcOffset, TimeSpan targetTimeLocal);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
