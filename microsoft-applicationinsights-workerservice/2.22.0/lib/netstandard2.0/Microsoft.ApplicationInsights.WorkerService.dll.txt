internal class Microsoft.ApplicationInsights.Shared.Internals.ApplicationNameProvider : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    private static string GetApplicationName();
}
public class Microsoft.ApplicationInsights.WorkerService.ApplicationInsightsServiceOptions : object {
    [CompilerGeneratedAttribute]
private bool <EnableQuickPulseMetricStream>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnablePerformanceCounterCollectionModule>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableAppServicesHeartbeatTelemetryModule>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableAzureInstanceMetadataTelemetryModule>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDependencyTrackingTelemetryModule>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableEventCounterCollectionModule>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableAdaptiveSampling>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstrumentationKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DeveloperMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndpointAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDebugLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableHeartbeat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddAutoCollectedMetricExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDiagnosticsTelemetryModule>k__BackingField;
    [CompilerGeneratedAttribute]
private DependencyCollectionOptions <DependencyCollectionOptions>k__BackingField;
    public bool EnableQuickPulseMetricStream { get; public set; }
    public bool EnablePerformanceCounterCollectionModule { get; public set; }
    public bool EnableAppServicesHeartbeatTelemetryModule { get; public set; }
    public bool EnableAzureInstanceMetadataTelemetryModule { get; public set; }
    public bool EnableDependencyTrackingTelemetryModule { get; public set; }
    public bool EnableEventCounterCollectionModule { get; public set; }
    public bool EnableAdaptiveSampling { get; public set; }
    [ObsoleteAttribute("InstrumentationKey based global ingestion is being deprecated. Use ApplicationInsightsServiceOptions.ConnectionString. See https://github.com/microsoft/ApplicationInsights-dotnet/issues/2560 for more details.")]
public string InstrumentationKey { get; public set; }
    public string ConnectionString { get; public set; }
    public string ApplicationVersion { get; public set; }
    public Nullable`1<bool> DeveloperMode { get; public set; }
    public string EndpointAddress { get; public set; }
    public bool EnableDebugLogger { get; public set; }
    public bool EnableHeartbeat { get; public set; }
    public bool AddAutoCollectedMetricExtractor { get; public set; }
    public bool EnableDiagnosticsTelemetryModule { get; public set; }
    public DependencyCollectionOptions DependencyCollectionOptions { get; }
    [CompilerGeneratedAttribute]
public bool get_EnableQuickPulseMetricStream();
    [CompilerGeneratedAttribute]
public void set_EnableQuickPulseMetricStream(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnablePerformanceCounterCollectionModule();
    [CompilerGeneratedAttribute]
public void set_EnablePerformanceCounterCollectionModule(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableAppServicesHeartbeatTelemetryModule();
    [CompilerGeneratedAttribute]
public void set_EnableAppServicesHeartbeatTelemetryModule(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableAzureInstanceMetadataTelemetryModule();
    [CompilerGeneratedAttribute]
public void set_EnableAzureInstanceMetadataTelemetryModule(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableDependencyTrackingTelemetryModule();
    [CompilerGeneratedAttribute]
public void set_EnableDependencyTrackingTelemetryModule(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableEventCounterCollectionModule();
    [CompilerGeneratedAttribute]
public void set_EnableEventCounterCollectionModule(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableAdaptiveSampling();
    [CompilerGeneratedAttribute]
public void set_EnableAdaptiveSampling(bool value);
    [CompilerGeneratedAttribute]
public string get_InstrumentationKey();
    [CompilerGeneratedAttribute]
public void set_InstrumentationKey(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationVersion();
    [CompilerGeneratedAttribute]
public void set_ApplicationVersion(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DeveloperMode();
    [CompilerGeneratedAttribute]
public void set_DeveloperMode(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_EndpointAddress();
    [CompilerGeneratedAttribute]
public void set_EndpointAddress(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableDebugLogger();
    [CompilerGeneratedAttribute]
public void set_EnableDebugLogger(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableHeartbeat();
    [CompilerGeneratedAttribute]
public void set_EnableHeartbeat(bool value);
    [CompilerGeneratedAttribute]
public bool get_AddAutoCollectedMetricExtractor();
    [CompilerGeneratedAttribute]
public void set_AddAutoCollectedMetricExtractor(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableDiagnosticsTelemetryModule();
    [CompilerGeneratedAttribute]
public void set_EnableDiagnosticsTelemetryModule(bool value);
    [CompilerGeneratedAttribute]
public DependencyCollectionOptions get_DependencyCollectionOptions();
    internal void CopyPropertiesTo(ApplicationInsightsServiceOptions target);
}
internal class Microsoft.ApplicationInsights.WorkerService.DefaultApplicationInsightsServiceConfigureOptions : object {
    private IConfiguration configuration;
    public DefaultApplicationInsightsServiceConfigureOptions(IConfiguration configuration);
    public sealed virtual void Configure(ApplicationInsightsServiceOptions options);
}
public class Microsoft.ApplicationInsights.WorkerService.DependencyCollectionOptions : object {
    [CompilerGeneratedAttribute]
private bool <EnableLegacyCorrelationHeadersInjection>k__BackingField;
    public bool EnableLegacyCorrelationHeadersInjection { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnableLegacyCorrelationHeadersInjection();
    [CompilerGeneratedAttribute]
public void set_EnableLegacyCorrelationHeadersInjection(bool value);
}
[EventSourceAttribute]
internal class Microsoft.ApplicationInsights.WorkerService.Implementation.Tracing.WorkerServiceEventSource : EventSource {
    public static WorkerServiceEventSource Instance;
    private ApplicationNameProvider applicationNameProvider;
    private static WorkerServiceEventSource();
    [EventAttribute("1")]
public void LogInformational(string message, string appDomainName);
    [EventAttribute("2")]
public void LogWarning(string message, string appDomainName);
    [EventAttribute("3")]
public void LogError(string message, string appDomainName);
    [EventAttribute("4")]
public void UnableToFindModuleToConfigure(string moduleType, string appDomainName);
    [EventAttribute("5")]
public void TelemetryConfigurationSetupFailure(string errorMessage, string appDomainName);
    [EventAttribute("6")]
public void TelemetryModuleInitialziationSetupFailure(string moduleName, string errorMessage, string appDomainName);
}
public interface Microsoft.ApplicationInsights.WorkerService.ITelemetryModuleConfigurator {
    public Type TelemetryModuleType { get; }
    public abstract virtual Type get_TelemetryModuleType();
    [ObsoleteAttribute("Use Configure(ITelemetryModule telemetryModule, ApplicationInsightsServiceOptions options) instead.")]
public abstract virtual void Configure(ITelemetryModule telemetryModule);
    public abstract virtual void Configure(ITelemetryModule telemetryModule, ApplicationInsightsServiceOptions options);
}
public interface Microsoft.ApplicationInsights.WorkerService.ITelemetryProcessorFactory {
    public abstract virtual ITelemetryProcessor Create(ITelemetryProcessor nextProcessor);
}
internal class Microsoft.ApplicationInsights.WorkerService.NoOpTelemetryModule : object {
    public sealed virtual void Initialize(TelemetryConfiguration configuration);
}
public class Microsoft.ApplicationInsights.WorkerService.TelemetryInitializers.ComponentVersionTelemetryInitializer : object {
    private string version;
    public ComponentVersionTelemetryInitializer(IOptions`1<ApplicationInsightsServiceOptions> options);
    public sealed virtual void Initialize(ITelemetry telemetry);
}
public class Microsoft.ApplicationInsights.WorkerService.TelemetryInitializers.DomainNameRoleInstanceTelemetryInitializer : object {
    private string roleInstanceName;
    public sealed virtual void Initialize(ITelemetry telemetry);
    private string GetMachineName();
}
internal class Microsoft.ApplicationInsights.WorkerService.TelemetryModuleConfigurator : object {
    private Action`2<ITelemetryModule, ApplicationInsightsServiceOptions> configure;
    [CompilerGeneratedAttribute]
private Type <TelemetryModuleType>k__BackingField;
    public Type TelemetryModuleType { get; }
    public TelemetryModuleConfigurator(Action`2<ITelemetryModule, ApplicationInsightsServiceOptions> configure, Type telemetryModuleType);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_TelemetryModuleType();
    [ObsoleteAttribute("Use Configure(ITelemetryModule telemetryModule, ApplicationInsightsServiceOptions options) instead.", "True")]
public sealed virtual void Configure(ITelemetryModule telemetryModule);
    public sealed virtual void Configure(ITelemetryModule telemetryModule, ApplicationInsightsServiceOptions options);
}
internal class Microsoft.ApplicationInsights.WorkerService.TelemetryProcessorFactory : object {
    private IServiceProvider serviceProvider;
    private Type telemetryProcessorType;
    public TelemetryProcessorFactory(IServiceProvider serviceProvider, Type telemetryProcessorType);
    public sealed virtual ITelemetryProcessor Create(ITelemetryProcessor next);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ApplicationInsightsExtensions : object {
    private static string VersionKeyFromConfig;
    private static string InstrumentationKeyFromConfig;
    private static string ConnectionStringFromConfig;
    private static string DeveloperModeFromConfig;
    private static string EndpointAddressFromConfig;
    private static string InstrumentationKeyForWebSites;
    private static string ConnectionStringEnvironmentVariable;
    private static string DeveloperModeForWebSites;
    private static string EndpointAddressForWebSites;
    private static string ApplicationInsightsSectionFromConfig;
    private static string TelemetryChannelSectionFromConfig;
    private static string EventSourceNameForSystemRuntime;
    private static string EventSourceNameForAspNetCoreHosting;
    [ExtensionAttribute]
[ObsoleteAttribute("InstrumentationKey based global ingestion is being deprecated. Use the AddApplicationInsightsTelemetryWorkerService() overload which accepts Action<ApplicationInsightsServiceOptions> and set ApplicationInsightsServiceOptions.ConnectionString. See https://github.com/microsoft/ApplicationInsights-dotnet/issues/2560 for more details.")]
public static IServiceCollection AddApplicationInsightsTelemetryWorkerService(IServiceCollection services, string instrumentationKey);
    [ExtensionAttribute]
public static IServiceCollection AddApplicationInsightsTelemetryWorkerService(IServiceCollection services, IConfiguration configuration);
    [ExtensionAttribute]
public static IServiceCollection AddApplicationInsightsTelemetryWorkerService(IServiceCollection services, Action`1<ApplicationInsightsServiceOptions> options);
    [ExtensionAttribute]
public static IServiceCollection AddApplicationInsightsTelemetryWorkerService(IServiceCollection services, ApplicationInsightsServiceOptions options);
    [ExtensionAttribute]
public static IServiceCollection AddApplicationInsightsTelemetryWorkerService(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddApplicationInsightsTelemetryProcessor(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddApplicationInsightsTelemetryProcessor(IServiceCollection services, Type telemetryProcessorType);
    [ExtensionAttribute]
[ObsoleteAttribute("Use ConfigureTelemetryModule overload that accepts ApplicationInsightsServiceOptions.")]
public static IServiceCollection ConfigureTelemetryModule(IServiceCollection services, Action`1<T> configModule);
    [ExtensionAttribute]
public static IServiceCollection ConfigureTelemetryModule(IServiceCollection services, Action`2<T, ApplicationInsightsServiceOptions> configModule);
    [ExtensionAttribute]
[ObsoleteAttribute("InstrumentationKey based global ingestion is being deprecated. Use the AddApplicationInsightsSettings() overload which accepts string ConnectionString. See https://github.com/microsoft/ApplicationInsights-dotnet/issues/2560 for more details.")]
public static IConfigurationBuilder AddApplicationInsightsSettings(IConfigurationBuilder configurationSourceRoot, Nullable`1<bool> developerMode, string endpointAddress, string instrumentationKey);
    [ExtensionAttribute]
public static IConfigurationBuilder AddApplicationInsightsSettings(IConfigurationBuilder configurationSourceRoot, string connectionString, Nullable`1<bool> developerMode, string endpointAddress, string instrumentationKey);
    internal static void AddTelemetryConfiguration(IConfiguration config, ApplicationInsightsServiceOptions serviceOptions);
    [ExtensionAttribute]
internal static void AddSingletonIfNotExists(IServiceCollection services);
    [ExtensionAttribute]
private static bool TryGetValue(IConfiguration config, string primaryKey, String& value, string backupKey);
    private static bool IsApplicationInsightsAdded(IServiceCollection services);
    private static void AddCommonInitializers(IServiceCollection services);
    private static void AddCommonTelemetryModules(IServiceCollection services);
    private static void AddTelemetryChannel(IServiceCollection services);
    private static void AddDefaultApplicationIdProvider(IServiceCollection services);
    private static void AddTelemetryConfigAndClient(IServiceCollection services);
    private static void AddAndConfigureDependencyTracking(IServiceCollection services);
    private static void AddApplicationInsightsLoggerProvider(IServiceCollection services);
}
internal class Microsoft.Extensions.DependencyInjection.TelemetryConfigurationOptions : object {
    [CompilerGeneratedAttribute]
private TelemetryConfiguration <Value>k__BackingField;
    public TelemetryConfiguration Value { get; }
    public TelemetryConfigurationOptions(IEnumerable`1<IConfigureOptions`1<TelemetryConfiguration>> configureOptions);
    [CompilerGeneratedAttribute]
public sealed virtual TelemetryConfiguration get_Value();
}
internal class Microsoft.Extensions.DependencyInjection.TelemetryConfigurationOptionsSetup : object {
    private ApplicationInsightsServiceOptions applicationInsightsServiceOptions;
    private IEnumerable`1<ITelemetryInitializer> initializers;
    private IEnumerable`1<ITelemetryModule> modules;
    private ITelemetryChannel telemetryChannel;
    private IEnumerable`1<ITelemetryProcessorFactory> telemetryProcessorFactories;
    private IEnumerable`1<ITelemetryModuleConfigurator> telemetryModuleConfigurators;
    private IApplicationIdProvider applicationIdProvider;
    public TelemetryConfigurationOptionsSetup(IServiceProvider serviceProvider, IOptions`1<ApplicationInsightsServiceOptions> applicationInsightsServiceOptions, IEnumerable`1<ITelemetryInitializer> initializers, IEnumerable`1<ITelemetryModule> modules, IEnumerable`1<ITelemetryProcessorFactory> telemetryProcessorFactories, IEnumerable`1<ITelemetryModuleConfigurator> telemetryModuleConfigurators);
    public sealed virtual void Configure(TelemetryConfiguration configuration);
    private static void DisposeIfDisposable(ITelemetryModule module);
    private void AddQuickPulse(TelemetryConfiguration configuration);
    private void AddSampling(TelemetryConfiguration configuration);
    private void AddAutoCollectedMetricExtractor(TelemetryConfiguration configuration);
    private void DisableHeartBeatIfConfigured();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
