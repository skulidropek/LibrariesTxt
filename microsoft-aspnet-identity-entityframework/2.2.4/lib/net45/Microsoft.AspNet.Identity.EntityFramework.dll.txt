internal class Microsoft.AspNet.Identity.EntityFramework.EntityStore`1 : object {
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<TEntity> <DbEntitySet>k__BackingField;
    public DbContext Context { get; private set; }
    public IQueryable`1<TEntity> EntitySet { get; }
    public DbSet`1<TEntity> DbEntitySet { get; private set; }
    public EntityStore`1(DbContext context);
    [CompilerGeneratedAttribute]
public DbContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(DbContext value);
    public IQueryable`1<TEntity> get_EntitySet();
    [CompilerGeneratedAttribute]
public DbSet`1<TEntity> get_DbEntitySet();
    [CompilerGeneratedAttribute]
private void set_DbEntitySet(DbSet`1<TEntity> value);
    public virtual Task`1<TEntity> GetByIdAsync(object id);
    public void Create(TEntity entity);
    public void Delete(TEntity entity);
    public virtual void Update(TEntity entity);
}
public class Microsoft.AspNet.Identity.EntityFramework.IdentityDbContext : IdentityDbContext`6<IdentityUser, IdentityRole, string, IdentityUserLogin, IdentityUserRole, IdentityUserClaim> {
    public IdentityDbContext(string nameOrConnectionString);
    public IdentityDbContext(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection);
    public IdentityDbContext(DbCompiledModel model);
    public IdentityDbContext(DbConnection existingConnection, bool contextOwnsConnection);
    public IdentityDbContext(string nameOrConnectionString, DbCompiledModel model);
}
public class Microsoft.AspNet.Identity.EntityFramework.IdentityDbContext`1 : IdentityDbContext`6<TUser, IdentityRole, string, IdentityUserLogin, IdentityUserRole, IdentityUserClaim> {
    public IdentityDbContext`1(string nameOrConnectionString);
    public IdentityDbContext`1(string nameOrConnectionString, bool throwIfV1Schema);
    public IdentityDbContext`1(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection);
    public IdentityDbContext`1(DbCompiledModel model);
    public IdentityDbContext`1(DbConnection existingConnection, bool contextOwnsConnection);
    public IdentityDbContext`1(string nameOrConnectionString, DbCompiledModel model);
    internal static bool IsIdentityV1Schema(DbContext db);
    internal static bool VerifyColumns(SqlConnection conn, string table, String[] columns);
}
public class Microsoft.AspNet.Identity.EntityFramework.IdentityDbContext`6 : DbContext {
    [CompilerGeneratedAttribute]
private IDbSet`1<TUser> <Users>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbSet`1<TRole> <Roles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireUniqueEmail>k__BackingField;
    public IDbSet`1<TUser> Users { get; public set; }
    public IDbSet`1<TRole> Roles { get; public set; }
    public bool RequireUniqueEmail { get; public set; }
    public IdentityDbContext`6(string nameOrConnectionString);
    public IdentityDbContext`6(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection);
    public IdentityDbContext`6(DbCompiledModel model);
    public IdentityDbContext`6(DbConnection existingConnection, bool contextOwnsConnection);
    public IdentityDbContext`6(string nameOrConnectionString, DbCompiledModel model);
    [CompilerGeneratedAttribute]
public virtual IDbSet`1<TUser> get_Users();
    [CompilerGeneratedAttribute]
public virtual void set_Users(IDbSet`1<TUser> value);
    [CompilerGeneratedAttribute]
public virtual IDbSet`1<TRole> get_Roles();
    [CompilerGeneratedAttribute]
public virtual void set_Roles(IDbSet`1<TRole> value);
    [CompilerGeneratedAttribute]
public bool get_RequireUniqueEmail();
    [CompilerGeneratedAttribute]
public void set_RequireUniqueEmail(bool value);
    protected virtual void OnModelCreating(DbModelBuilder modelBuilder);
    protected virtual DbEntityValidationResult ValidateEntity(DbEntityEntry entityEntry, IDictionary`2<object, object> items);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.AspNet.Identity.EntityFramework.IdentityResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DbValidationFailed { get; }
    internal static string DuplicateEmail { get; }
    internal static string DuplicateUserName { get; }
    internal static string EntityFailedValidation { get; }
    internal static string ExternalLoginExists { get; }
    internal static string IdentityV1SchemaError { get; }
    internal static string IncorrectType { get; }
    internal static string PropertyCannotBeEmpty { get; }
    internal static string RoleAlreadyExists { get; }
    internal static string RoleIsNotEmpty { get; }
    internal static string RoleNotFound { get; }
    internal static string UserAlreadyInRole { get; }
    internal static string UserIdNotFound { get; }
    internal static string UserLoginAlreadyExists { get; }
    internal static string UserNameNotFound { get; }
    internal static string UserNotInRole { get; }
    internal static string ValueCannotBeNullOrEmpty { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DbValidationFailed();
    internal static string get_DuplicateEmail();
    internal static string get_DuplicateUserName();
    internal static string get_EntityFailedValidation();
    internal static string get_ExternalLoginExists();
    internal static string get_IdentityV1SchemaError();
    internal static string get_IncorrectType();
    internal static string get_PropertyCannotBeEmpty();
    internal static string get_RoleAlreadyExists();
    internal static string get_RoleIsNotEmpty();
    internal static string get_RoleNotFound();
    internal static string get_UserAlreadyInRole();
    internal static string get_UserIdNotFound();
    internal static string get_UserLoginAlreadyExists();
    internal static string get_UserNameNotFound();
    internal static string get_UserNotInRole();
    internal static string get_ValueCannotBeNullOrEmpty();
}
public class Microsoft.AspNet.Identity.EntityFramework.IdentityRole : IdentityRole`2<string, IdentityUserRole> {
    public IdentityRole(string roleName);
}
public class Microsoft.AspNet.Identity.EntityFramework.IdentityRole`2 : object {
    [CompilerGeneratedAttribute]
private ICollection`1<TUserRole> <Users>k__BackingField;
    [CompilerGeneratedAttribute]
private TKey <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public ICollection`1<TUserRole> Users { get; private set; }
    public TKey Id { get; public set; }
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public virtual ICollection`1<TUserRole> get_Users();
    [CompilerGeneratedAttribute]
private void set_Users(ICollection`1<TUserRole> value);
    [CompilerGeneratedAttribute]
public sealed virtual TKey get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(TKey value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
}
public class Microsoft.AspNet.Identity.EntityFramework.IdentityUser : IdentityUser`4<string, IdentityUserLogin, IdentityUserRole, IdentityUserClaim> {
    public IdentityUser(string userName);
}
public class Microsoft.AspNet.Identity.EntityFramework.IdentityUser`4 : object {
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmailConfirmed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PasswordHash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecurityStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhoneNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PhoneNumberConfirmed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TwoFactorEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LockoutEndDateUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LockoutEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AccessFailedCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<TRole> <Roles>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<TClaim> <Claims>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<TLogin> <Logins>k__BackingField;
    [CompilerGeneratedAttribute]
private TKey <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    public string Email { get; public set; }
    public bool EmailConfirmed { get; public set; }
    public string PasswordHash { get; public set; }
    public string SecurityStamp { get; public set; }
    public string PhoneNumber { get; public set; }
    public bool PhoneNumberConfirmed { get; public set; }
    public bool TwoFactorEnabled { get; public set; }
    public Nullable`1<DateTime> LockoutEndDateUtc { get; public set; }
    public bool LockoutEnabled { get; public set; }
    public int AccessFailedCount { get; public set; }
    public ICollection`1<TRole> Roles { get; private set; }
    public ICollection`1<TClaim> Claims { get; private set; }
    public ICollection`1<TLogin> Logins { get; private set; }
    public TKey Id { get; public set; }
    public string UserName { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Email();
    [CompilerGeneratedAttribute]
public virtual void set_Email(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_EmailConfirmed();
    [CompilerGeneratedAttribute]
public virtual void set_EmailConfirmed(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_PasswordHash();
    [CompilerGeneratedAttribute]
public virtual void set_PasswordHash(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SecurityStamp();
    [CompilerGeneratedAttribute]
public virtual void set_SecurityStamp(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PhoneNumber();
    [CompilerGeneratedAttribute]
public virtual void set_PhoneNumber(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_PhoneNumberConfirmed();
    [CompilerGeneratedAttribute]
public virtual void set_PhoneNumberConfirmed(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_TwoFactorEnabled();
    [CompilerGeneratedAttribute]
public virtual void set_TwoFactorEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_LockoutEndDateUtc();
    [CompilerGeneratedAttribute]
public virtual void set_LockoutEndDateUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual bool get_LockoutEnabled();
    [CompilerGeneratedAttribute]
public virtual void set_LockoutEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_AccessFailedCount();
    [CompilerGeneratedAttribute]
public virtual void set_AccessFailedCount(int value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<TRole> get_Roles();
    [CompilerGeneratedAttribute]
private void set_Roles(ICollection`1<TRole> value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<TClaim> get_Claims();
    [CompilerGeneratedAttribute]
private void set_Claims(ICollection`1<TClaim> value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<TLogin> get_Logins();
    [CompilerGeneratedAttribute]
private void set_Logins(ICollection`1<TLogin> value);
    [CompilerGeneratedAttribute]
public virtual TKey get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(TKey value);
    [CompilerGeneratedAttribute]
public virtual string get_UserName();
    [CompilerGeneratedAttribute]
public virtual void set_UserName(string value);
}
public class Microsoft.AspNet.Identity.EntityFramework.IdentityUserClaim : IdentityUserClaim`1<string> {
}
public class Microsoft.AspNet.Identity.EntityFramework.IdentityUserClaim`1 : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private TKey <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClaimType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClaimValue>k__BackingField;
    public int Id { get; public set; }
    public TKey UserId { get; public set; }
    public string ClaimType { get; public set; }
    public string ClaimValue { get; public set; }
    [CompilerGeneratedAttribute]
public virtual int get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(int value);
    [CompilerGeneratedAttribute]
public virtual TKey get_UserId();
    [CompilerGeneratedAttribute]
public virtual void set_UserId(TKey value);
    [CompilerGeneratedAttribute]
public virtual string get_ClaimType();
    [CompilerGeneratedAttribute]
public virtual void set_ClaimType(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ClaimValue();
    [CompilerGeneratedAttribute]
public virtual void set_ClaimValue(string value);
}
public class Microsoft.AspNet.Identity.EntityFramework.IdentityUserLogin : IdentityUserLogin`1<string> {
}
public class Microsoft.AspNet.Identity.EntityFramework.IdentityUserLogin`1 : object {
    [CompilerGeneratedAttribute]
private string <LoginProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderKey>k__BackingField;
    [CompilerGeneratedAttribute]
private TKey <UserId>k__BackingField;
    public string LoginProvider { get; public set; }
    public string ProviderKey { get; public set; }
    public TKey UserId { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_LoginProvider();
    [CompilerGeneratedAttribute]
public virtual void set_LoginProvider(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProviderKey();
    [CompilerGeneratedAttribute]
public virtual void set_ProviderKey(string value);
    [CompilerGeneratedAttribute]
public virtual TKey get_UserId();
    [CompilerGeneratedAttribute]
public virtual void set_UserId(TKey value);
}
public class Microsoft.AspNet.Identity.EntityFramework.IdentityUserRole : IdentityUserRole`1<string> {
}
public class Microsoft.AspNet.Identity.EntityFramework.IdentityUserRole`1 : object {
    [CompilerGeneratedAttribute]
private TKey <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private TKey <RoleId>k__BackingField;
    public TKey UserId { get; public set; }
    public TKey RoleId { get; public set; }
    [CompilerGeneratedAttribute]
public virtual TKey get_UserId();
    [CompilerGeneratedAttribute]
public virtual void set_UserId(TKey value);
    [CompilerGeneratedAttribute]
public virtual TKey get_RoleId();
    [CompilerGeneratedAttribute]
public virtual void set_RoleId(TKey value);
}
public class Microsoft.AspNet.Identity.EntityFramework.RoleStore`1 : RoleStore`3<TRole, string, IdentityUserRole> {
    public RoleStore`1(DbContext context);
}
public class Microsoft.AspNet.Identity.EntityFramework.RoleStore`3 : object {
    private bool _disposed;
    private EntityStore`1<TRole> _roleStore;
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisposeContext>k__BackingField;
    public DbContext Context { get; private set; }
    public bool DisposeContext { get; public set; }
    public IQueryable`1<TRole> Roles { get; }
    public RoleStore`3(DbContext context);
    [CompilerGeneratedAttribute]
public DbContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(DbContext value);
    [CompilerGeneratedAttribute]
public bool get_DisposeContext();
    [CompilerGeneratedAttribute]
public void set_DisposeContext(bool value);
    public sealed virtual Task`1<TRole> FindByIdAsync(TKey roleId);
    public sealed virtual Task`1<TRole> FindByNameAsync(string roleName);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.EntityFramework.RoleStore`3/<CreateAsync>d__13")]
public virtual Task CreateAsync(TRole role);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.EntityFramework.RoleStore`3/<DeleteAsync>d__14")]
public virtual Task DeleteAsync(TRole role);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.EntityFramework.RoleStore`3/<UpdateAsync>d__15")]
public virtual Task UpdateAsync(TRole role);
    public sealed virtual IQueryable`1<TRole> get_Roles();
    public sealed virtual void Dispose();
    private void ThrowIfDisposed();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.AspNet.Identity.EntityFramework.UserStore`1 : UserStore`6<TUser, IdentityRole, string, IdentityUserLogin, IdentityUserRole, IdentityUserClaim> {
    public UserStore`1(DbContext context);
}
public class Microsoft.AspNet.Identity.EntityFramework.UserStore`6 : object {
    private IDbSet`1<TUserLogin> _logins;
    private EntityStore`1<TRole> _roleStore;
    private IDbSet`1<TUserClaim> _userClaims;
    private IDbSet`1<TUserRole> _userRoles;
    private bool _disposed;
    private EntityStore`1<TUser> _userStore;
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisposeContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoSaveChanges>k__BackingField;
    public DbContext Context { get; private set; }
    public bool DisposeContext { get; public set; }
    public bool AutoSaveChanges { get; public set; }
    public IQueryable`1<TUser> Users { get; }
    public UserStore`6(DbContext context);
    [CompilerGeneratedAttribute]
public DbContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(DbContext value);
    [CompilerGeneratedAttribute]
public bool get_DisposeContext();
    [CompilerGeneratedAttribute]
public void set_DisposeContext(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoSaveChanges();
    [CompilerGeneratedAttribute]
public void set_AutoSaveChanges(bool value);
    public sealed virtual IQueryable`1<TUser> get_Users();
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.EntityFramework.UserStore`6/<GetClaimsAsync>d__21")]
public virtual Task`1<IList`1<Claim>> GetClaimsAsync(TUser user);
    public virtual Task AddClaimAsync(TUser user, Claim claim);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.EntityFramework.UserStore`6/<RemoveClaimAsync>d__23")]
public virtual Task RemoveClaimAsync(TUser user, Claim claim);
    public virtual Task`1<bool> GetEmailConfirmedAsync(TUser user);
    public virtual Task SetEmailConfirmedAsync(TUser user, bool confirmed);
    public virtual Task SetEmailAsync(TUser user, string email);
    public virtual Task`1<string> GetEmailAsync(TUser user);
    public virtual Task`1<TUser> FindByEmailAsync(string email);
    public virtual Task`1<DateTimeOffset> GetLockoutEndDateAsync(TUser user);
    public virtual Task SetLockoutEndDateAsync(TUser user, DateTimeOffset lockoutEnd);
    public virtual Task`1<int> IncrementAccessFailedCountAsync(TUser user);
    public virtual Task ResetAccessFailedCountAsync(TUser user);
    public virtual Task`1<int> GetAccessFailedCountAsync(TUser user);
    public virtual Task`1<bool> GetLockoutEnabledAsync(TUser user);
    public virtual Task SetLockoutEnabledAsync(TUser user, bool enabled);
    public virtual Task`1<TUser> FindByIdAsync(TKey userId);
    public virtual Task`1<TUser> FindByNameAsync(string userName);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.EntityFramework.UserStore`6/<CreateAsync>d__38")]
public virtual Task CreateAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.EntityFramework.UserStore`6/<DeleteAsync>d__39")]
public virtual Task DeleteAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.EntityFramework.UserStore`6/<UpdateAsync>d__40")]
public virtual Task UpdateAsync(TUser user);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.EntityFramework.UserStore`6/<FindAsync>d__42")]
public virtual Task`1<TUser> FindAsync(UserLoginInfo login);
    public virtual Task AddLoginAsync(TUser user, UserLoginInfo login);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.EntityFramework.UserStore`6/<RemoveLoginAsync>d__44")]
public virtual Task RemoveLoginAsync(TUser user, UserLoginInfo login);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.EntityFramework.UserStore`6/<GetLoginsAsync>d__45")]
public virtual Task`1<IList`1<UserLoginInfo>> GetLoginsAsync(TUser user);
    public virtual Task SetPasswordHashAsync(TUser user, string passwordHash);
    public virtual Task`1<string> GetPasswordHashAsync(TUser user);
    public virtual Task`1<bool> HasPasswordAsync(TUser user);
    public virtual Task SetPhoneNumberAsync(TUser user, string phoneNumber);
    public virtual Task`1<string> GetPhoneNumberAsync(TUser user);
    public virtual Task`1<bool> GetPhoneNumberConfirmedAsync(TUser user);
    public virtual Task SetPhoneNumberConfirmedAsync(TUser user, bool confirmed);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.EntityFramework.UserStore`6/<AddToRoleAsync>d__53")]
public virtual Task AddToRoleAsync(TUser user, string roleName);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.EntityFramework.UserStore`6/<RemoveFromRoleAsync>d__54")]
public virtual Task RemoveFromRoleAsync(TUser user, string roleName);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.EntityFramework.UserStore`6/<GetRolesAsync>d__55")]
public virtual Task`1<IList`1<string>> GetRolesAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.EntityFramework.UserStore`6/<IsInRoleAsync>d__56")]
public virtual Task`1<bool> IsInRoleAsync(TUser user, string roleName);
    public virtual Task SetSecurityStampAsync(TUser user, string stamp);
    public virtual Task`1<string> GetSecurityStampAsync(TUser user);
    public virtual Task SetTwoFactorEnabledAsync(TUser user, bool enabled);
    public virtual Task`1<bool> GetTwoFactorEnabledAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.EntityFramework.UserStore`6/<SaveChanges>d__61")]
private Task SaveChanges();
    private bool AreClaimsLoaded(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.EntityFramework.UserStore`6/<EnsureClaimsLoaded>d__63")]
private Task EnsureClaimsLoaded(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.EntityFramework.UserStore`6/<EnsureRolesLoaded>d__64")]
private Task EnsureRolesLoaded(TUser user);
    private bool AreLoginsLoaded(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.EntityFramework.UserStore`6/<EnsureLoginsLoaded>d__66")]
private Task EnsureLoginsLoaded(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.EntityFramework.UserStore`6/<GetUserAggregateAsync>d__67")]
protected virtual Task`1<TUser> GetUserAggregateAsync(Expression`1<Func`2<TUser, bool>> filter);
    private void ThrowIfDisposed();
    protected virtual void Dispose(bool disposing);
}
