public class Microsoft.AspNet.Identity.Owin.DataProtectorTokenProvider`1 : DataProtectorTokenProvider`2<TUser, string> {
    public DataProtectorTokenProvider`1(IDataProtector protector);
}
public class Microsoft.AspNet.Identity.Owin.DataProtectorTokenProvider`2 : object {
    [CompilerGeneratedAttribute]
private IDataProtector <Protector>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TokenLifespan>k__BackingField;
    public IDataProtector Protector { get; private set; }
    public TimeSpan TokenLifespan { get; public set; }
    public DataProtectorTokenProvider`2(IDataProtector protector);
    [CompilerGeneratedAttribute]
public IDataProtector get_Protector();
    [CompilerGeneratedAttribute]
private void set_Protector(IDataProtector value);
    [CompilerGeneratedAttribute]
public TimeSpan get_TokenLifespan();
    [CompilerGeneratedAttribute]
public void set_TokenLifespan(TimeSpan value);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.Owin.DataProtectorTokenProvider`2/<GenerateAsync>d__9")]
public sealed virtual Task`1<string> GenerateAsync(string purpose, UserManager`2<TUser, TKey> manager, TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.Owin.DataProtectorTokenProvider`2/<ValidateAsync>d__10")]
public sealed virtual Task`1<bool> ValidateAsync(string purpose, string token, UserManager`2<TUser, TKey> manager, TUser user);
    public sealed virtual Task`1<bool> IsValidProviderForUserAsync(UserManager`2<TUser, TKey> manager, TUser user);
    public sealed virtual Task NotifyAsync(string token, UserManager`2<TUser, TKey> manager, TUser user);
}
public class Microsoft.AspNet.Identity.Owin.ExternalLoginInfo : object {
    [CompilerGeneratedAttribute]
private UserLoginInfo <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultUserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsIdentity <ExternalIdentity>k__BackingField;
    public UserLoginInfo Login { get; public set; }
    public string DefaultUserName { get; public set; }
    public string Email { get; public set; }
    public ClaimsIdentity ExternalIdentity { get; public set; }
    [CompilerGeneratedAttribute]
public UserLoginInfo get_Login();
    [CompilerGeneratedAttribute]
public void set_Login(UserLoginInfo value);
    [CompilerGeneratedAttribute]
public string get_DefaultUserName();
    [CompilerGeneratedAttribute]
public void set_DefaultUserName(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    [CompilerGeneratedAttribute]
public ClaimsIdentity get_ExternalIdentity();
    [CompilerGeneratedAttribute]
public void set_ExternalIdentity(ClaimsIdentity value);
}
public class Microsoft.AspNet.Identity.Owin.IdentityFactoryMiddleware`2 : OwinMiddleware {
    [CompilerGeneratedAttribute]
private TOptions <Options>k__BackingField;
    public TOptions Options { get; private set; }
    public IdentityFactoryMiddleware`2(OwinMiddleware next, TOptions options);
    [CompilerGeneratedAttribute]
public TOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(TOptions value);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.Owin.IdentityFactoryMiddleware`2/<Invoke>d__5")]
public virtual Task Invoke(IOwinContext context);
}
public class Microsoft.AspNet.Identity.Owin.IdentityFactoryOptions`1 : object {
    [CompilerGeneratedAttribute]
private IDataProtectionProvider <DataProtectionProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IIdentityFactoryProvider`1<T> <Provider>k__BackingField;
    public IDataProtectionProvider DataProtectionProvider { get; public set; }
    public IIdentityFactoryProvider`1<T> Provider { get; public set; }
    [CompilerGeneratedAttribute]
public IDataProtectionProvider get_DataProtectionProvider();
    [CompilerGeneratedAttribute]
public void set_DataProtectionProvider(IDataProtectionProvider value);
    [CompilerGeneratedAttribute]
public IIdentityFactoryProvider`1<T> get_Provider();
    [CompilerGeneratedAttribute]
public void set_Provider(IIdentityFactoryProvider`1<T> value);
}
public class Microsoft.AspNet.Identity.Owin.IdentityFactoryProvider`1 : object {
    [CompilerGeneratedAttribute]
private Func`3<IdentityFactoryOptions`1<T>, IOwinContext, T> <OnCreate>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<IdentityFactoryOptions`1<T>, T> <OnDispose>k__BackingField;
    public Func`3<IdentityFactoryOptions`1<T>, IOwinContext, T> OnCreate { get; public set; }
    public Action`2<IdentityFactoryOptions`1<T>, T> OnDispose { get; public set; }
    [CompilerGeneratedAttribute]
public Func`3<IdentityFactoryOptions`1<T>, IOwinContext, T> get_OnCreate();
    [CompilerGeneratedAttribute]
public void set_OnCreate(Func`3<IdentityFactoryOptions`1<T>, IOwinContext, T> value);
    [CompilerGeneratedAttribute]
public Action`2<IdentityFactoryOptions`1<T>, T> get_OnDispose();
    [CompilerGeneratedAttribute]
public void set_OnDispose(Action`2<IdentityFactoryOptions`1<T>, T> value);
    public virtual T Create(IdentityFactoryOptions`1<T> options, IOwinContext context);
    public virtual void Dispose(IdentityFactoryOptions`1<T> options, T instance);
}
public interface Microsoft.AspNet.Identity.Owin.IIdentityFactoryProvider`1 {
    public abstract virtual T Create(IdentityFactoryOptions`1<T> options, IOwinContext context);
    public abstract virtual void Dispose(IdentityFactoryOptions`1<T> options, T instance);
}
[ExtensionAttribute]
public static class Microsoft.AspNet.Identity.Owin.OwinContextExtensions : object {
    private static string IdentityKeyPrefix;
    private static OwinContextExtensions();
    private static string GetKey(Type t);
    [ExtensionAttribute]
public static IOwinContext Set(IOwinContext context, T value);
    [ExtensionAttribute]
public static T Get(IOwinContext context);
    [ExtensionAttribute]
public static TManager GetUserManager(IOwinContext context);
}
public static class Microsoft.AspNet.Identity.Owin.SecurityStampValidator : object {
    public static Func`2<CookieValidateIdentityContext, Task> OnValidateIdentity(TimeSpan validateInterval, Func`3<TManager, TUser, Task`1<ClaimsIdentity>> regenerateIdentity);
    public static Func`2<CookieValidateIdentityContext, Task> OnValidateIdentity(TimeSpan validateInterval, Func`3<TManager, TUser, Task`1<ClaimsIdentity>> regenerateIdentityCallback, Func`2<ClaimsIdentity, TKey> getUserIdCallback);
}
public class Microsoft.AspNet.Identity.Owin.SignInManager`2 : object {
    private string _authType;
    [CompilerGeneratedAttribute]
private UserManager`2<TUser, TKey> <UserManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthenticationManager <AuthenticationManager>k__BackingField;
    public string AuthenticationType { get; public set; }
    public UserManager`2<TUser, TKey> UserManager { get; public set; }
    public IAuthenticationManager AuthenticationManager { get; public set; }
    public SignInManager`2(UserManager`2<TUser, TKey> userManager, IAuthenticationManager authenticationManager);
    public string get_AuthenticationType();
    public void set_AuthenticationType(string value);
    [CompilerGeneratedAttribute]
public UserManager`2<TUser, TKey> get_UserManager();
    [CompilerGeneratedAttribute]
public void set_UserManager(UserManager`2<TUser, TKey> value);
    [CompilerGeneratedAttribute]
public IAuthenticationManager get_AuthenticationManager();
    [CompilerGeneratedAttribute]
public void set_AuthenticationManager(IAuthenticationManager value);
    public virtual Task`1<ClaimsIdentity> CreateUserIdentityAsync(TUser user);
    public virtual string ConvertIdToString(TKey id);
    public virtual TKey ConvertIdFromString(string id);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.Owin.SignInManager`2/<SignInAsync>d__16")]
public virtual Task SignInAsync(TUser user, bool isPersistent, bool rememberBrowser);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.Owin.SignInManager`2/<SendTwoFactorCodeAsync>d__17")]
public virtual Task`1<bool> SendTwoFactorCodeAsync(string provider);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.Owin.SignInManager`2/<GetVerifiedUserIdAsync>d__18")]
public Task`1<TKey> GetVerifiedUserIdAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.Owin.SignInManager`2/<HasBeenVerifiedAsync>d__19")]
public Task`1<bool> HasBeenVerifiedAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.Owin.SignInManager`2/<TwoFactorSignInAsync>d__20")]
public virtual Task`1<SignInStatus> TwoFactorSignInAsync(string provider, string code, bool isPersistent, bool rememberBrowser);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.Owin.SignInManager`2/<ExternalSignInAsync>d__21")]
public Task`1<SignInStatus> ExternalSignInAsync(ExternalLoginInfo loginInfo, bool isPersistent);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.Owin.SignInManager`2/<IsTwoFactorEnabled>d__22")]
private Task`1<bool> IsTwoFactorEnabled(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.Owin.SignInManager`2/<SignInOrTwoFactor>d__23")]
private Task`1<SignInStatus> SignInOrTwoFactor(TUser user, bool isPersistent);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.Owin.SignInManager`2/<PasswordSignInAsync>d__24")]
public virtual Task`1<SignInStatus> PasswordSignInAsync(string userName, string password, bool isPersistent, bool shouldLockout);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class Microsoft.AspNet.Identity.Owin.SignInManagerExtensions : object {
    [ExtensionAttribute]
public static ClaimsIdentity CreateUserIdentity(SignInManager`2<TUser, TKey> manager, TUser user);
    [ExtensionAttribute]
public static void SignIn(SignInManager`2<TUser, TKey> manager, TUser user, bool isPersistent, bool rememberBrowser);
    [ExtensionAttribute]
public static bool SendTwoFactorCode(SignInManager`2<TUser, TKey> manager, string provider);
    [ExtensionAttribute]
public static TKey GetVerifiedUserId(SignInManager`2<TUser, TKey> manager);
    [ExtensionAttribute]
public static bool HasBeenVerified(SignInManager`2<TUser, TKey> manager);
    [ExtensionAttribute]
public static SignInStatus TwoFactorSignIn(SignInManager`2<TUser, TKey> manager, string provider, string code, bool isPersistent, bool rememberBrowser);
    [ExtensionAttribute]
public static SignInStatus ExternalSignIn(SignInManager`2<TUser, TKey> manager, ExternalLoginInfo loginInfo, bool isPersistent);
    [ExtensionAttribute]
public static SignInStatus PasswordSignIn(SignInManager`2<TUser, TKey> manager, string userName, string password, bool isPersistent, bool shouldLockout);
}
public enum Microsoft.AspNet.Identity.Owin.SignInStatus : Enum {
    public int value__;
    public static SignInStatus Success;
    public static SignInStatus LockedOut;
    public static SignInStatus RequiresVerification;
    public static SignInStatus Failure;
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.Identity.Owin.StreamExtensions : object {
    internal static Encoding DefaultEncoding;
    private static StreamExtensions();
    [ExtensionAttribute]
public static BinaryReader CreateReader(Stream stream);
    [ExtensionAttribute]
public static BinaryWriter CreateWriter(Stream stream);
    [ExtensionAttribute]
public static DateTimeOffset ReadDateTimeOffset(BinaryReader reader);
    [ExtensionAttribute]
public static void Write(BinaryWriter writer, DateTimeOffset value);
}
[ExtensionAttribute]
public static class Microsoft.Owin.Security.AuthenticationManagerExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<AuthenticationDescription> GetExternalAuthenticationTypes(IAuthenticationManager manager);
    [AsyncStateMachineAttribute("Microsoft.Owin.Security.AuthenticationManagerExtensions/<GetExternalIdentityAsync>d__1")]
[ExtensionAttribute]
public static Task`1<ClaimsIdentity> GetExternalIdentityAsync(IAuthenticationManager manager, string externalAuthenticationType);
    [ExtensionAttribute]
public static ClaimsIdentity GetExternalIdentity(IAuthenticationManager manager, string externalAuthenticationType);
    private static ExternalLoginInfo GetExternalLoginInfo(AuthenticateResult result);
    [AsyncStateMachineAttribute("Microsoft.Owin.Security.AuthenticationManagerExtensions/<GetExternalLoginInfoAsync>d__4")]
[ExtensionAttribute]
public static Task`1<ExternalLoginInfo> GetExternalLoginInfoAsync(IAuthenticationManager manager);
    [ExtensionAttribute]
public static ExternalLoginInfo GetExternalLoginInfo(IAuthenticationManager manager);
    [ExtensionAttribute]
public static ExternalLoginInfo GetExternalLoginInfo(IAuthenticationManager manager, string xsrfKey, string expectedValue);
    [AsyncStateMachineAttribute("Microsoft.Owin.Security.AuthenticationManagerExtensions/<GetExternalLoginInfoAsync>d__7")]
[ExtensionAttribute]
public static Task`1<ExternalLoginInfo> GetExternalLoginInfoAsync(IAuthenticationManager manager, string xsrfKey, string expectedValue);
    [AsyncStateMachineAttribute("Microsoft.Owin.Security.AuthenticationManagerExtensions/<TwoFactorBrowserRememberedAsync>d__8")]
[ExtensionAttribute]
public static Task`1<bool> TwoFactorBrowserRememberedAsync(IAuthenticationManager manager, string userId);
    [ExtensionAttribute]
public static bool TwoFactorBrowserRemembered(IAuthenticationManager manager, string userId);
    [ExtensionAttribute]
public static ClaimsIdentity CreateTwoFactorRememberBrowserIdentity(IAuthenticationManager manager, string userId);
}
[ExtensionAttribute]
public static class Owin.AppBuilderExtensions : object {
    private static string CookiePrefix;
    [ExtensionAttribute]
public static IAppBuilder CreatePerOwinContext(IAppBuilder app, Func`1<T> createCallback);
    [ExtensionAttribute]
public static IAppBuilder CreatePerOwinContext(IAppBuilder app, Func`3<IdentityFactoryOptions`1<T>, IOwinContext, T> createCallback);
    [ExtensionAttribute]
public static IAppBuilder CreatePerOwinContext(IAppBuilder app, Func`3<IdentityFactoryOptions`1<T>, IOwinContext, T> createCallback, Action`2<IdentityFactoryOptions`1<T>, T> disposeCallback);
    [ExtensionAttribute]
public static void UseExternalSignInCookie(IAppBuilder app);
    [ExtensionAttribute]
public static void UseExternalSignInCookie(IAppBuilder app, string externalAuthenticationType);
    [ExtensionAttribute]
public static void UseTwoFactorSignInCookie(IAppBuilder app, string authenticationType, TimeSpan expires);
    [ExtensionAttribute]
public static void UseTwoFactorRememberBrowserCookie(IAppBuilder app, string authenticationType);
    [ExtensionAttribute]
public static void UseOAuthBearerTokens(IAppBuilder app, OAuthAuthorizationServerOptions options);
}
