internal class Microsoft.AspNet.OData.Adapters.WebApiActionDescriptor : object {
    private IList`1<ODataRequestMethod> supportedHttpMethods;
    private HttpActionDescriptor innerDescriptor;
    public string ControllerName { get; }
    public string ActionName { get; }
    public WebApiActionDescriptor(HttpActionDescriptor actionDescriptor);
    public sealed virtual string get_ControllerName();
    public sealed virtual string get_ActionName();
    public sealed virtual IEnumerable`1<T> GetCustomAttributes(bool inherit);
    public sealed virtual MethodInfo GetMethodInfo();
    public sealed virtual bool IsHttpMethodSupported(ODataRequestMethod method);
}
internal class Microsoft.AspNet.OData.Adapters.WebApiActionMap : object {
    private ILookup`2<string, HttpActionDescriptor> innerMap;
    public WebApiActionMap(ILookup`2<string, HttpActionDescriptor> actionMap);
    public sealed virtual bool Contains(string name);
    public sealed virtual IWebApiActionDescriptor GetActionDescriptor(string actionName);
}
internal class Microsoft.AspNet.OData.Adapters.WebApiAssembliesResolver : object {
    private IAssembliesResolver innerResolver;
    public static IWebApiAssembliesResolver Default;
    public IEnumerable`1<Assembly> Assemblies { get; }
    public WebApiAssembliesResolver(IAssembliesResolver resolver);
    private static WebApiAssembliesResolver();
    public sealed virtual IEnumerable`1<Assembly> get_Assemblies();
}
internal class Microsoft.AspNet.OData.Adapters.WebApiContext : object {
    private HttpRequestMessageProperties innerContext;
    public ApplyClause ApplyClause { get; public set; }
    public Uri NextLink { get; public set; }
    public Uri DeltaLink { get; public set; }
    public ODataPath Path { get; }
    public string RouteName { get; }
    public IDictionary`2<string, object> RoutingConventionsStore { get; }
    public SelectExpandClause ProcessedSelectExpandClause { get; public set; }
    public ODataQueryOptions QueryOptions { get; public set; }
    public Nullable`1<long> TotalCount { get; }
    public int PageSize { get; public set; }
    public Func`1<long> TotalCountFunc { get; public set; }
    public WebApiContext(HttpRequestMessageProperties context);
    public sealed virtual ApplyClause get_ApplyClause();
    public sealed virtual void set_ApplyClause(ApplyClause value);
    public sealed virtual Uri get_NextLink();
    public sealed virtual void set_NextLink(Uri value);
    public sealed virtual Uri get_DeltaLink();
    public sealed virtual void set_DeltaLink(Uri value);
    public sealed virtual ODataPath get_Path();
    public sealed virtual string get_RouteName();
    public sealed virtual IDictionary`2<string, object> get_RoutingConventionsStore();
    public sealed virtual SelectExpandClause get_ProcessedSelectExpandClause();
    public sealed virtual void set_ProcessedSelectExpandClause(SelectExpandClause value);
    public sealed virtual ODataQueryOptions get_QueryOptions();
    public sealed virtual void set_QueryOptions(ODataQueryOptions value);
    public sealed virtual Nullable`1<long> get_TotalCount();
    public sealed virtual int get_PageSize();
    public sealed virtual void set_PageSize(int value);
    public sealed virtual Func`1<long> get_TotalCountFunc();
    public sealed virtual void set_TotalCountFunc(Func`1<long> value);
}
internal class Microsoft.AspNet.OData.Adapters.WebApiControllerContext : object {
    private HttpControllerContext innerContext;
    [CompilerGeneratedAttribute]
private SelectControllerResult <ControllerResult>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebApiRequestMessage <Request>k__BackingField;
    public SelectControllerResult ControllerResult { get; private set; }
    public IWebApiRequestMessage Request { get; private set; }
    public IDictionary`2<string, object> RouteData { get; }
    public WebApiControllerContext(HttpControllerContext controllerContext, SelectControllerResult controllerResult);
    [CompilerGeneratedAttribute]
public sealed virtual SelectControllerResult get_ControllerResult();
    [CompilerGeneratedAttribute]
private void set_ControllerResult(SelectControllerResult value);
    [CompilerGeneratedAttribute]
public sealed virtual IWebApiRequestMessage get_Request();
    [CompilerGeneratedAttribute]
private void set_Request(IWebApiRequestMessage value);
    public sealed virtual IDictionary`2<string, object> get_RouteData();
}
internal class Microsoft.AspNet.OData.Adapters.WebApiOptions : object {
    [CompilerGeneratedAttribute]
private ODataUrlKeyDelimiter <UrlKeyDelimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NullDynamicPropertyIsEnabled>k__BackingField;
    public ODataUrlKeyDelimiter UrlKeyDelimiter { get; private set; }
    public bool NullDynamicPropertyIsEnabled { get; private set; }
    public WebApiOptions(HttpConfiguration configuration);
    [CompilerGeneratedAttribute]
public sealed virtual ODataUrlKeyDelimiter get_UrlKeyDelimiter();
    [CompilerGeneratedAttribute]
private void set_UrlKeyDelimiter(ODataUrlKeyDelimiter value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NullDynamicPropertyIsEnabled();
    [CompilerGeneratedAttribute]
private void set_NullDynamicPropertyIsEnabled(bool value);
}
internal class Microsoft.AspNet.OData.Adapters.WebApiRequestHeaders : object {
    private HttpRequestHeaders innerCollection;
    public WebApiRequestHeaders(HttpRequestHeaders headers);
    public sealed virtual bool TryGetValues(string key, IEnumerable`1& values);
}
internal class Microsoft.AspNet.OData.Adapters.WebApiRequestMessage : object {
    private HttpRequestMessage innerRequest;
    [CompilerGeneratedAttribute]
private IWebApiContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebApiHeaders <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebApiOptions <Options>k__BackingField;
    public IWebApiContext Context { get; private set; }
    public IWebApiHeaders Headers { get; private set; }
    public ODataRequestMethod Method { get; }
    public IWebApiOptions Options { get; private set; }
    public IServiceProvider RequestContainer { get; }
    public Uri RequestUri { get; }
    public ODataDeserializerProvider DeserializerProvider { get; }
    public IDictionary`2<string, string> ODataContentIdMapping { get; }
    public IODataPathHandler PathHandler { get; }
    public IDictionary`2<string, string> QueryParameters { get; }
    public ODataMessageReaderSettings ReaderSettings { get; }
    public ODataMessageWriterSettings WriterSettings { get; }
    public HttpConfiguration Configuration { get; }
    public WebApiRequestMessage(HttpRequestMessage request);
    [CompilerGeneratedAttribute]
public sealed virtual IWebApiContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(IWebApiContext value);
    [CompilerGeneratedAttribute]
public sealed virtual IWebApiHeaders get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(IWebApiHeaders value);
    public sealed virtual bool IsCountRequest();
    public sealed virtual ODataRequestMethod get_Method();
    [CompilerGeneratedAttribute]
public sealed virtual IWebApiOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(IWebApiOptions value);
    public sealed virtual IServiceProvider get_RequestContainer();
    public sealed virtual Uri get_RequestUri();
    public sealed virtual ODataDeserializerProvider get_DeserializerProvider();
    public sealed virtual Uri GetNextPageLink(int pageSize, object instance, Func`2<object, string> objToSkipTokenValue);
    public sealed virtual string CreateETag(IDictionary`2<string, object> properties);
    public sealed virtual ETag GetETag(EntityTagHeaderValue etagHeaderValue);
    public sealed virtual ETag GetETag(EntityTagHeaderValue etagHeaderValue);
    public sealed virtual IDictionary`2<string, string> get_ODataContentIdMapping();
    public sealed virtual IODataPathHandler get_PathHandler();
    public sealed virtual IDictionary`2<string, string> get_QueryParameters();
    public sealed virtual ODataMessageReaderSettings get_ReaderSettings();
    public sealed virtual ODataMessageWriterSettings get_WriterSettings();
    public HttpConfiguration get_Configuration();
}
internal class Microsoft.AspNet.OData.Adapters.WebApiUrlHelper : object {
    private UrlHelper innerHelper;
    public WebApiUrlHelper(UrlHelper helper);
    public sealed virtual string CreateODataLink(ODataPathSegment[] segments);
    public sealed virtual string CreateODataLink(IList`1<ODataPathSegment> segments);
    public sealed virtual string CreateODataLink(string routeName, IODataPathHandler pathHandler, IList`1<ODataPathSegment> segments);
}
public class Microsoft.AspNet.OData.Batch.ChangeSetRequestItem : ODataBatchRequestItem {
    [CompilerGeneratedAttribute]
private IEnumerable`1<HttpRequestMessage> <Requests>k__BackingField;
    public IEnumerable`1<HttpRequestMessage> Requests { get; private set; }
    public ChangeSetRequestItem(IEnumerable`1<HttpRequestMessage> requests);
    [CompilerGeneratedAttribute]
public IEnumerable`1<HttpRequestMessage> get_Requests();
    [CompilerGeneratedAttribute]
private void set_Requests(IEnumerable`1<HttpRequestMessage> value);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Batch.ChangeSetRequestItem/<SendRequestAsync>d__5")]
public virtual Task`1<ODataBatchResponseItem> SendRequestAsync(HttpMessageInvoker invoker, CancellationToken cancellationToken);
    public virtual IEnumerable`1<IDisposable> GetResourcesForDisposal();
    protected virtual void Dispose(bool disposing);
    internal static void DisposeResponses(List`1<HttpResponseMessage> responses);
}
public class Microsoft.AspNet.OData.Batch.ChangeSetResponseItem : ODataBatchResponseItem {
    [CompilerGeneratedAttribute]
private IEnumerable`1<HttpResponseMessage> <Responses>k__BackingField;
    public IEnumerable`1<HttpResponseMessage> Responses { get; private set; }
    public ChangeSetResponseItem(IEnumerable`1<HttpResponseMessage> responses);
    [CompilerGeneratedAttribute]
public IEnumerable`1<HttpResponseMessage> get_Responses();
    [CompilerGeneratedAttribute]
private void set_Responses(IEnumerable`1<HttpResponseMessage> value);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Batch.ChangeSetResponseItem/<WriteResponseAsync>d__5")]
public virtual Task WriteResponseAsync(ODataBatchWriter writer, CancellationToken cancellationToken, bool asyncWriter);
    internal virtual bool IsResponseSuccessful();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.AspNet.OData.Batch.DefaultODataBatchHandler : ODataBatchHandler {
    public DefaultODataBatchHandler(HttpServer httpServer);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Batch.DefaultODataBatchHandler/<ProcessBatchAsync>d__1")]
public virtual Task`1<HttpResponseMessage> ProcessBatchAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Batch.DefaultODataBatchHandler/<ExecuteRequestMessagesAsync>d__2")]
public virtual Task`1<IList`1<ODataBatchResponseItem>> ExecuteRequestMessagesAsync(IEnumerable`1<ODataBatchRequestItem> requests, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Batch.DefaultODataBatchHandler/<ParseBatchRequestsAsync>d__3")]
public virtual Task`1<IList`1<ODataBatchRequestItem>> ParseBatchRequestsAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
internal class Microsoft.AspNet.OData.Batch.LazyStreamContent : HttpContent {
    private Func`1<Stream> _getStream;
    private StreamContent _streamContent;
    private StreamContent StreamContent { get; }
    public LazyStreamContent(Func`1<Stream> getStream);
    private StreamContent get_StreamContent();
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual bool TryComputeLength(Int64& length);
    [CompilerGeneratedAttribute]
private void <SerializeToStreamAsync>b__5_0(Task Task);
}
public class Microsoft.AspNet.OData.Batch.ODataBatchContent : HttpContent {
    private IServiceProvider _requestContainer;
    private ODataMessageWriterSettings _writerSettings;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ODataBatchResponseItem> <Responses>k__BackingField;
    public IEnumerable`1<ODataBatchResponseItem> Responses { get; private set; }
    public ODataBatchContent(IEnumerable`1<ODataBatchResponseItem> responses, IServiceProvider requestContainer);
    public ODataBatchContent(IEnumerable`1<ODataBatchResponseItem> responses, IServiceProvider requestContainer, MediaTypeHeaderValue contentType);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual bool TryComputeLength(Int64& length);
    protected virtual void Dispose(bool disposing);
    private void Initialize(IEnumerable`1<ODataBatchResponseItem> responses, IServiceProvider requestContainer);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ODataBatchResponseItem> get_Responses();
    [CompilerGeneratedAttribute]
private void set_Responses(IEnumerable`1<ODataBatchResponseItem> value);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Batch.ODataBatchContent/<WriteToResponseMessageAsync>d__12")]
private Task WriteToResponseMessageAsync(IODataResponseMessage responseMessage);
}
public abstract class Microsoft.AspNet.OData.Batch.ODataBatchHandler : HttpBatchHandler {
    private ODataMessageQuotas _messageQuotas;
    internal static string PreferenceContinueOnError;
    internal static string PreferenceContinueOnErrorFalse;
    [CompilerGeneratedAttribute]
private string <ODataRouteName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContinueOnError>k__BackingField;
    public ODataMessageQuotas MessageQuotas { get; }
    public string ODataRouteName { get; public set; }
    internal bool ContinueOnError { get; private set; }
    protected ODataBatchHandler(HttpServer httpServer);
    public virtual Task`1<HttpResponseMessage> CreateResponseMessageAsync(IEnumerable`1<ODataBatchResponseItem> responses, HttpRequestMessage request, CancellationToken cancellationToken);
    public virtual void ValidateRequest(HttpRequestMessage request);
    public virtual Uri GetBaseUri(HttpRequestMessage request);
    public ODataMessageQuotas get_MessageQuotas();
    [CompilerGeneratedAttribute]
public string get_ODataRouteName();
    [CompilerGeneratedAttribute]
public void set_ODataRouteName(string value);
    [CompilerGeneratedAttribute]
internal bool get_ContinueOnError();
    [CompilerGeneratedAttribute]
private void set_ContinueOnError(bool value);
    internal void SetContinueOnError(IWebApiHeaders header, bool enableContinueOnErrorHeader);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.AspNet.OData.Batch.ODataBatchHttpRequestMessageExtensions : object {
    private static string BatchIdKey;
    private static string ChangeSetIdKey;
    private static string ContentIdKey;
    private static string ContentIdMappingKey;
    private static string BatchMediaTypeMime;
    private static string BatchMediaTypeJson;
    private static string Boundary;
    private static string ContentType;
    [ExtensionAttribute]
public static Nullable`1<Guid> GetODataBatchId(HttpRequestMessage request);
    [ExtensionAttribute]
public static void SetODataBatchId(HttpRequestMessage request, Guid batchId);
    [ExtensionAttribute]
public static Nullable`1<Guid> GetODataChangeSetId(HttpRequestMessage request);
    [ExtensionAttribute]
public static void SetODataChangeSetId(HttpRequestMessage request, Guid changeSetId);
    [ExtensionAttribute]
public static string GetODataContentId(HttpRequestMessage request);
    [ExtensionAttribute]
public static void SetODataContentId(HttpRequestMessage request, string contentId);
    [ExtensionAttribute]
public static IDictionary`2<string, string> GetODataContentIdMapping(HttpRequestMessage request);
    [ExtensionAttribute]
public static void SetODataContentIdMapping(HttpRequestMessage request, IDictionary`2<string, string> contentIdMapping);
    [ExtensionAttribute]
internal static Task`1<HttpResponseMessage> CreateODataBatchResponseAsync(HttpRequestMessage request, IEnumerable`1<ODataBatchResponseItem> responses, ODataMessageQuotas messageQuotas);
    [ExtensionAttribute]
internal static void ValidateODataBatchRequest(HttpRequestMessage request);
    [ExtensionAttribute]
internal static Uri GetODataBatchBaseUri(HttpRequestMessage request, string oDataRouteName);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.AspNet.OData.Batch.ODataBatchReaderExtensions : object {
    [ExtensionAttribute]
public static Task`1<IList`1<HttpRequestMessage>> ReadChangeSetRequestAsync(ODataBatchReader reader, Guid batchId);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Batch.ODataBatchReaderExtensions/<ReadChangeSetRequestAsync>d__1")]
[ExtensionAttribute]
public static Task`1<IList`1<HttpRequestMessage>> ReadChangeSetRequestAsync(ODataBatchReader reader, Guid batchId, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpRequestMessage> ReadOperationRequestAsync(ODataBatchReader reader, Guid batchId, bool bufferContentStream);
    [ExtensionAttribute]
public static Task`1<HttpRequestMessage> ReadOperationRequestAsync(ODataBatchReader reader, Guid batchId, bool bufferContentStream, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpRequestMessage> ReadChangeSetOperationRequestAsync(ODataBatchReader reader, Guid batchId, Guid changeSetId, bool bufferContentStream);
    [ExtensionAttribute]
public static Task`1<HttpRequestMessage> ReadChangeSetOperationRequestAsync(ODataBatchReader reader, Guid batchId, Guid changeSetId, bool bufferContentStream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Batch.ODataBatchReaderExtensions/<ReadOperationInternalAsync>d__6")]
private static Task`1<HttpRequestMessage> ReadOperationInternalAsync(ODataBatchReader reader, Guid batchId, Nullable`1<Guid> changeSetId, CancellationToken cancellationToken, bool bufferContentStream);
}
public abstract class Microsoft.AspNet.OData.Batch.ODataBatchRequestItem : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ContentIdToLocationMapping>k__BackingField;
    public IDictionary`2<string, string> ContentIdToLocationMapping { get; public set; }
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Batch.ODataBatchRequestItem/<SendMessageAsync>d__0")]
public static Task`1<HttpResponseMessage> SendMessageAsync(HttpMessageInvoker invoker, HttpRequestMessage request, CancellationToken cancellationToken, IDictionary`2<string, string> contentIdToLocationMapping);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ContentIdToLocationMapping();
    [CompilerGeneratedAttribute]
public void set_ContentIdToLocationMapping(IDictionary`2<string, string> value);
    private static void AddLocationHeaderToMapping(HttpResponseMessage response, IDictionary`2<string, string> contentIdToLocationMapping, string contentId);
    public sealed virtual void Dispose();
    public abstract virtual IEnumerable`1<IDisposable> GetResourcesForDisposal();
    public abstract virtual Task`1<ODataBatchResponseItem> SendRequestAsync(HttpMessageInvoker invoker, CancellationToken cancellationToken);
    protected abstract virtual void Dispose(bool disposing);
}
public abstract class Microsoft.AspNet.OData.Batch.ODataBatchResponseItem : object {
    public static Task WriteMessageAsync(ODataBatchWriter writer, HttpResponseMessage response);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Batch.ODataBatchResponseItem/<WriteMessageAsync>d__1")]
public static Task WriteMessageAsync(ODataBatchWriter writer, HttpResponseMessage response, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Batch.ODataBatchResponseItem/<WriteMessageAsync>d__2")]
public static Task WriteMessageAsync(ODataBatchWriter writer, HttpResponseMessage response, CancellationToken cancellationToken, bool asyncWriter);
    public sealed virtual void Dispose();
    public Task WriteResponseAsync(ODataBatchWriter writer, CancellationToken cancellationToken);
    public abstract virtual Task WriteResponseAsync(ODataBatchWriter writer, CancellationToken cancellationToken, bool asyncWriter);
    internal Task WriteResponseAsync(ODataBatchWriter writer, bool asyncWriter);
    internal virtual bool IsResponseSuccessful();
    protected abstract virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.AspNet.OData.Batch.ODataHttpContentExtensions : object {
    [ExtensionAttribute]
public static Task`1<ODataMessageReader> GetODataMessageReaderAsync(HttpContent content, IServiceProvider requestContainer);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Batch.ODataHttpContentExtensions/<GetODataMessageReaderAsync>d__1")]
[ExtensionAttribute]
public static Task`1<ODataMessageReader> GetODataMessageReaderAsync(HttpContent content, IServiceProvider requestContainer, CancellationToken cancellationToken);
}
public class Microsoft.AspNet.OData.Batch.OperationRequestItem : ODataBatchRequestItem {
    [CompilerGeneratedAttribute]
private HttpRequestMessage <Request>k__BackingField;
    public HttpRequestMessage Request { get; private set; }
    public OperationRequestItem(HttpRequestMessage request);
    [CompilerGeneratedAttribute]
public HttpRequestMessage get_Request();
    [CompilerGeneratedAttribute]
private void set_Request(HttpRequestMessage value);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Batch.OperationRequestItem/<SendRequestAsync>d__5")]
public virtual Task`1<ODataBatchResponseItem> SendRequestAsync(HttpMessageInvoker invoker, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    public virtual IEnumerable`1<IDisposable> GetResourcesForDisposal();
}
public class Microsoft.AspNet.OData.Batch.OperationResponseItem : ODataBatchResponseItem {
    [CompilerGeneratedAttribute]
private HttpResponseMessage <Response>k__BackingField;
    public HttpResponseMessage Response { get; private set; }
    public OperationResponseItem(HttpResponseMessage response);
    [CompilerGeneratedAttribute]
public HttpResponseMessage get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(HttpResponseMessage value);
    public virtual Task WriteResponseAsync(ODataBatchWriter writer, CancellationToken cancellationToken, bool asyncWriter);
    internal virtual bool IsResponseSuccessful();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.AspNet.OData.Batch.UnbufferedODataBatchHandler : ODataBatchHandler {
    public UnbufferedODataBatchHandler(HttpServer httpServer);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Batch.UnbufferedODataBatchHandler/<ProcessBatchAsync>d__1")]
public virtual Task`1<HttpResponseMessage> ProcessBatchAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Batch.UnbufferedODataBatchHandler/<ExecuteOperationAsync>d__2")]
public virtual Task`1<ODataBatchResponseItem> ExecuteOperationAsync(ODataBatchReader batchReader, Guid batchId, HttpRequestMessage originalRequest, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Batch.UnbufferedODataBatchHandler/<ExecuteChangeSetAsync>d__3")]
public virtual Task`1<ODataBatchResponseItem> ExecuteChangeSetAsync(ODataBatchReader batchReader, Guid batchId, HttpRequestMessage originalRequest, CancellationToken cancellationToken);
}
public class Microsoft.AspNet.OData.Builder.ActionConfiguration : OperationConfiguration {
    public OperationKind Kind { get; }
    public bool IsSideEffecting { get; }
    internal ActionConfiguration(ODataModelBuilder builder, string name);
    public virtual OperationKind get_Kind();
    public virtual bool get_IsSideEffecting();
    public ActionConfiguration HasActionLink(Func`2<ResourceContext, Uri> actionLinkFactory, bool followsConventions);
    public Func`2<ResourceContext, Uri> GetActionLink();
    public ActionConfiguration HasFeedActionLink(Func`2<ResourceSetContext, Uri> actionLinkFactory, bool followsConventions);
    public Func`2<ResourceSetContext, Uri> GetFeedActionLink();
    public ActionConfiguration ReturnsFromEntitySet(string entitySetName);
    public ActionConfiguration ReturnsFromEntitySet(EntitySetConfiguration`1<TEntityType> entitySetConfiguration);
    public ActionConfiguration ReturnsCollectionFromEntitySet(string entitySetName);
    public ActionConfiguration ReturnsCollectionFromEntitySet(EntitySetConfiguration`1<TElementEntityType> entitySetConfiguration);
    public ActionConfiguration Returns(Type clrReturnType);
    public ActionConfiguration Returns();
    public ActionConfiguration ReturnsCollection();
    public ActionConfiguration SetBindingParameter(string name, IEdmTypeConfiguration bindingParameterType);
    public ActionConfiguration HasDerivedTypeConstraintsForReturnType(Type[] subtypes);
    public ActionConfiguration HasDerivedTypeConstraintForReturnType();
    public ActionConfiguration ReturnsEntityViaEntitySetPath(string entitySetPath);
    public ActionConfiguration ReturnsEntityViaEntitySetPath(String[] entitySetPath);
    public ActionConfiguration ReturnsCollectionViaEntitySetPath(string entitySetPath);
    public ActionConfiguration ReturnsCollectionViaEntitySetPath(String[] entitySetPath);
}
[AttributeUsageAttribute("128")]
public class Microsoft.AspNet.OData.Builder.ActionOnDeleteAttribute : Attribute {
    [CompilerGeneratedAttribute]
private EdmOnDeleteAction <OnDeleteAction>k__BackingField;
    public EdmOnDeleteAction OnDeleteAction { get; private set; }
    public ActionOnDeleteAttribute(EdmOnDeleteAction onDeleteAction);
    [CompilerGeneratedAttribute]
public EdmOnDeleteAction get_OnDeleteAction();
    [CompilerGeneratedAttribute]
private void set_OnDeleteAction(EdmOnDeleteAction value);
}
[AttributeUsageAttribute("132")]
public class Microsoft.AspNet.OData.Builder.AutoExpandAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <DisableWhenSelectPresent>k__BackingField;
    public bool DisableWhenSelectPresent { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_DisableWhenSelectPresent();
    [CompilerGeneratedAttribute]
public void set_DisableWhenSelectPresent(bool value);
}
internal class Microsoft.AspNet.OData.Builder.BindableOperationFinder : object {
    private Dictionary`2<IEdmEntityType, List`1<IEdmOperation>> _map;
    private Dictionary`2<IEdmEntityType, List`1<IEdmOperation>> _collectionMap;
    public BindableOperationFinder(IEdmModel model);
    public virtual IEnumerable`1<IEdmOperation> FindOperations(IEdmEntityType entityType);
    public virtual IEnumerable`1<IEdmOperation> FindOperationsBoundToCollection(IEdmEntityType entityType);
    [IteratorStateMachineAttribute("Microsoft.AspNet.OData.Builder.BindableOperationFinder/<GetTypeHierarchy>d__5")]
private static IEnumerable`1<IEdmEntityType> GetTypeHierarchy(IEdmEntityType entityType);
    private IEnumerable`1<IEdmOperation> FindDeclaredOperations(IEdmEntityType entityType);
    private IEnumerable`1<IEdmOperation> FindDeclaredOperationsBoundToCollection(IEdmEntityType entityType);
}
public class Microsoft.AspNet.OData.Builder.BindingParameterConfiguration : ParameterConfiguration {
    public static string DefaultBindingParameterName;
    public BindingParameterConfiguration(string name, IEdmTypeConfiguration parameterType);
}
public class Microsoft.AspNet.OData.Builder.BindingPathConfiguration`1 : object {
    private NavigationSourceConfiguration _navigationSource;
    private StructuralTypeConfiguration`1<TStructuralType> _structuralType;
    private ODataModelBuilder _modelBuilder;
    private IList`1<MemberInfo> _bindingPath;
    public IList`1<MemberInfo> Path { get; }
    public string BindingPath { get; }
    public BindingPathConfiguration`1(ODataModelBuilder modelBuilder, StructuralTypeConfiguration`1<TStructuralType> structuralType, NavigationSourceConfiguration navigationSource);
    public BindingPathConfiguration`1(ODataModelBuilder modelBuilder, StructuralTypeConfiguration`1<TStructuralType> structuralType, NavigationSourceConfiguration navigationSource, IList`1<MemberInfo> bindingPath);
    public IList`1<MemberInfo> get_Path();
    public string get_BindingPath();
    public BindingPathConfiguration`1<TTargetType> HasManyPath(Expression`1<Func`2<TStructuralType, IEnumerable`1<TTargetType>>> pathExpression);
    public BindingPathConfiguration`1<TTargetType> HasManyPath(Expression`1<Func`2<TStructuralType, IEnumerable`1<TTargetType>>> pathExpression, bool contained);
    public BindingPathConfiguration`1<TTargetType> HasManyPath(Expression`1<Func`2<TDerivedType, IEnumerable`1<TTargetType>>> pathExpression);
    public BindingPathConfiguration`1<TTargetType> HasManyPath(Expression`1<Func`2<TDerivedType, IEnumerable`1<TTargetType>>> pathExpression, bool contained);
    public BindingPathConfiguration`1<TTargetType> HasSinglePath(Expression`1<Func`2<TStructuralType, TTargetType>> pathExpression);
    public BindingPathConfiguration`1<TTargetType> HasSinglePath(Expression`1<Func`2<TStructuralType, TTargetType>> pathExpression, bool required, bool contained);
    public BindingPathConfiguration`1<TTargetType> HasSinglePath(Expression`1<Func`2<TDerivedType, TTargetType>> pathExpression);
    public BindingPathConfiguration`1<TTargetType> HasSinglePath(Expression`1<Func`2<TDerivedType, TTargetType>> pathExpression, bool required, bool contained);
    public NavigationPropertyBindingConfiguration HasManyBinding(Expression`1<Func`2<TStructuralType, IEnumerable`1<TTargetType>>> navigationExpression, string targetEntitySet);
    public NavigationPropertyBindingConfiguration HasManyBinding(Expression`1<Func`2<TDerivedType, IEnumerable`1<TTargetType>>> navigationExpression, string targetEntitySet);
    public NavigationPropertyBindingConfiguration HasRequiredBinding(Expression`1<Func`2<TStructuralType, TTargetType>> navigationExpression, string targetEntitySet);
    public NavigationPropertyBindingConfiguration HasRequiredBinding(Expression`1<Func`2<TDerivedType, TTargetType>> navigationExpression, string targetEntitySet);
    public NavigationPropertyBindingConfiguration HasOptionalBinding(Expression`1<Func`2<TStructuralType, TTargetType>> navigationExpression, string targetEntitySet);
    public NavigationPropertyBindingConfiguration HasOptionalBinding(Expression`1<Func`2<TDerivedType, TTargetType>> navigationExpression, string targetEntitySet);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.OData.Builder.BindingPathHelper : object {
    [ExtensionAttribute]
public static string ConvertBindingPath(IEnumerable`1<MemberInfo> bindingPath);
}
internal enum Microsoft.AspNet.OData.Builder.CapabilitiesNavigationType : Enum {
    public int value__;
    public static CapabilitiesNavigationType Recursive;
    public static CapabilitiesNavigationType Single;
    public static CapabilitiesNavigationType None;
}
internal static class Microsoft.AspNet.OData.Builder.CapabilitiesVocabularyConstants : object {
    public static string CountRestrictions;
    public static string CountRestrictionsCountable;
    public static string CountRestrictionsNonCountableProperties;
    public static string CountRestrictionsNonCountableNavigationProperties;
    public static string NavigationRestrictions;
    public static string NavigationRestrictionsNavigability;
    public static string NavigationRestrictionsRestrictedProperties;
    public static string NavigationPropertyRestrictionNavigationProperty;
    public static string NavigationType;
    public static string FilterRestrictions;
    public static string FilterRestrictionsFilterable;
    public static string FilterRestrictionsRequiresFilter;
    public static string FilterRestrictionsRequiredProperties;
    public static string FilterRestrictionsNonFilterableProperties;
    public static string SortRestrictions;
    public static string SortRestrictionsSortable;
    public static string SortRestrictionsAscendingOnlyProperties;
    public static string SortRestrictionsDescendingOnlyProperties;
    public static string SortRestrictionsNonSortableProperties;
    public static string ExpandRestrictions;
    public static string ExpandRestrictionsExpandable;
    public static string ExpandRestrictionsNonExpandableProperties;
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.OData.Builder.CapabilitiesVocabularyExtensionMethods : object {
    private static IEnumerable`1<IEdmStructuralProperty> EmptyStructuralProperties;
    private static IEnumerable`1<IEdmNavigationProperty> EmptyNavigationProperties;
    private static IEdmEnumType _navigationType;
    private static CapabilitiesVocabularyExtensionMethods();
    [ExtensionAttribute]
public static void SetCountRestrictionsAnnotation(EdmModel model, IEdmEntitySet target, bool isCountable, IEnumerable`1<IEdmProperty> nonCountableProperties, IEnumerable`1<IEdmNavigationProperty> nonCountableNavigationProperties);
    [ExtensionAttribute]
public static void SetNavigationRestrictionsAnnotation(EdmModel model, IEdmEntitySet target, CapabilitiesNavigationType navigability, IEnumerable`1<Tuple`2<IEdmNavigationProperty, CapabilitiesNavigationType>> restrictedProperties);
    [ExtensionAttribute]
public static void SetFilterRestrictionsAnnotation(EdmModel model, IEdmEntitySet target, bool isFilterable, bool isRequiresFilter, IEnumerable`1<IEdmProperty> requiredProperties, IEnumerable`1<IEdmProperty> nonFilterableProperties);
    [ExtensionAttribute]
public static void SetSortRestrictionsAnnotation(EdmModel model, IEdmEntitySet target, bool isSortable, IEnumerable`1<IEdmProperty> ascendingOnlyProperties, IEnumerable`1<IEdmProperty> descendingOnlyProperties, IEnumerable`1<IEdmProperty> nonSortableProperties);
    [ExtensionAttribute]
public static void SetExpandRestrictionsAnnotation(EdmModel model, IEdmEntitySet target, bool isExpandable, IEnumerable`1<IEdmNavigationProperty> nonExpandableProperties);
    [ExtensionAttribute]
private static void SetVocabularyAnnotation(EdmModel model, IEdmVocabularyAnnotatable target, IList`1<IEdmPropertyConstructor> properties, string qualifiedName);
    [ExtensionAttribute]
private static IEdmEnumType GetCapabilitiesNavigationType(EdmModel model);
}
public class Microsoft.AspNet.OData.Builder.CollectionPropertyConfiguration : StructuralPropertyConfiguration {
    private Type _elementType;
    public PropertyKind Kind { get; }
    public Type RelatedClrType { get; }
    public Type ElementType { get; }
    public CollectionPropertyConfiguration(PropertyInfo property, StructuralTypeConfiguration declaringType);
    public virtual PropertyKind get_Kind();
    public virtual Type get_RelatedClrType();
    public Type get_ElementType();
    public CollectionPropertyConfiguration IsOptional();
    public CollectionPropertyConfiguration IsRequired();
    public CollectionPropertyConfiguration HasDerivedTypeConstraints(Type[] subtypes);
    public CollectionPropertyConfiguration HasDerivedTypeConstraint();
}
public class Microsoft.AspNet.OData.Builder.CollectionTypeConfiguration : object {
    private IEdmTypeConfiguration _elementType;
    private Type _clrType;
    public IEdmTypeConfiguration ElementType { get; }
    public Type ClrType { get; }
    public string FullName { get; }
    public string Namespace { get; }
    public string Name { get; }
    public EdmTypeKind Kind { get; }
    public ODataModelBuilder ModelBuilder { get; }
    public CollectionTypeConfiguration(IEdmTypeConfiguration elementType, Type clrType);
    public IEdmTypeConfiguration get_ElementType();
    public sealed virtual Type get_ClrType();
    public sealed virtual string get_FullName();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_Name();
    public sealed virtual EdmTypeKind get_Kind();
    public sealed virtual ODataModelBuilder get_ModelBuilder();
}
public class Microsoft.AspNet.OData.Builder.ComplexPropertyConfiguration : StructuralPropertyConfiguration {
    public PropertyKind Kind { get; }
    public Type RelatedClrType { get; }
    public ComplexPropertyConfiguration(PropertyInfo property, StructuralTypeConfiguration declaringType);
    public virtual PropertyKind get_Kind();
    public virtual Type get_RelatedClrType();
    public ComplexPropertyConfiguration IsOptional();
    public ComplexPropertyConfiguration IsRequired();
    public ComplexPropertyConfiguration HasDerivedTypeConstraints(Type[] subtypes);
    public ComplexPropertyConfiguration HasDerivedTypeConstraint();
}
public class Microsoft.AspNet.OData.Builder.ComplexTypeConfiguration : StructuralTypeConfiguration {
    public EdmTypeKind Kind { get; }
    public ComplexTypeConfiguration BaseType { get; public set; }
    public ComplexTypeConfiguration(ODataModelBuilder modelBuilder, Type clrType);
    public virtual EdmTypeKind get_Kind();
    public virtual ComplexTypeConfiguration get_BaseType();
    public virtual void set_BaseType(ComplexTypeConfiguration value);
    public virtual ComplexTypeConfiguration Abstract();
    public virtual ComplexTypeConfiguration DerivesFromNothing();
    public virtual ComplexTypeConfiguration DerivesFrom(ComplexTypeConfiguration baseType);
}
public class Microsoft.AspNet.OData.Builder.ComplexTypeConfiguration`1 : StructuralTypeConfiguration`1<TComplexType> {
    private ComplexTypeConfiguration _configuration;
    private ODataModelBuilder _modelBuilder;
    public ComplexTypeConfiguration BaseType { get; }
    internal ComplexTypeConfiguration`1(ComplexTypeConfiguration configuration);
    internal ComplexTypeConfiguration`1(ODataModelBuilder modelBuilder);
    internal ComplexTypeConfiguration`1(ODataModelBuilder modelBuilder, ComplexTypeConfiguration configuration);
    public ComplexTypeConfiguration`1<TComplexType> Abstract();
    public ComplexTypeConfiguration get_BaseType();
    public ComplexTypeConfiguration`1<TComplexType> DerivesFromNothing();
    public ComplexTypeConfiguration`1<TComplexType> DerivesFrom();
}
[AttributeUsageAttribute("128")]
public class Microsoft.AspNet.OData.Builder.ContainedAttribute : Attribute {
}
internal class Microsoft.AspNet.OData.Builder.ContainmentPathBuilder : object {
    private List`1<ODataPathSegment> _segments;
    public ODataPath TryComputeCanonicalContainingPath(ODataPath path);
    private void RemovePathSegmentsAfterTheLastNavigationProperty();
    private void RemoveRedundantContainingPathSegments();
    private void RemoveAllTypeCasts();
    private void AddTypeCastsIfNecessary();
    private static IEdmEntityType GetTargetEntityType(ODataPathSegment segment);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.AbstractTypeDiscoveryConvention : object {
    public sealed virtual void Apply(IEdmTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.ActionLinkGenerationConvention : object {
    public sealed virtual void Apply(OperationConfiguration configuration, ODataModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.AssociationSetDiscoveryConvention : object {
    public sealed virtual void Apply(NavigationSourceConfiguration configuration, ODataModelBuilder model);
    internal static NavigationSourceConfiguration GetTargetNavigationSource(NavigationPropertyConfiguration navigationProperty, ODataModelBuilder model);
    private static NavigationSourceConfiguration GetDefaultNavigationSource(EntityTypeConfiguration targetEntityType, ODataModelBuilder model, bool isSingleton);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.ActionOnDeleteAttributeConvention : AttributeEdmPropertyConvention`1<NavigationPropertyConfiguration> {
    public virtual void Apply(NavigationPropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal abstract class Microsoft.AspNet.OData.Builder.Conventions.Attributes.AttributeConvention : object {
    [CompilerGeneratedAttribute]
private Func`2<Attribute, bool> <AttributeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowMultiple>k__BackingField;
    public Func`2<Attribute, bool> AttributeFilter { get; private set; }
    public bool AllowMultiple { get; private set; }
    protected AttributeConvention(Func`2<Attribute, bool> attributeFilter, bool allowMultiple);
    [CompilerGeneratedAttribute]
public Func`2<Attribute, bool> get_AttributeFilter();
    [CompilerGeneratedAttribute]
private void set_AttributeFilter(Func`2<Attribute, bool> value);
    [CompilerGeneratedAttribute]
public bool get_AllowMultiple();
    [CompilerGeneratedAttribute]
private void set_AllowMultiple(bool value);
    public Attribute[] GetAttributes(MemberInfo member);
}
internal abstract class Microsoft.AspNet.OData.Builder.Conventions.Attributes.AttributeEdmPropertyConvention`1 : AttributeConvention {
    protected AttributeEdmPropertyConvention`1(Func`2<Attribute, bool> attributeFilter, bool allowMultiple);
    public sealed virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, ODataConventionModelBuilder model);
    public sealed virtual void Apply(TPropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, ODataConventionModelBuilder model);
    public abstract virtual void Apply(TPropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal abstract class Microsoft.AspNet.OData.Builder.Conventions.Attributes.AttributeEdmTypeConvention`1 : AttributeConvention {
    protected AttributeEdmTypeConvention`1(Func`2<Attribute, bool> attributeFilter, bool allowMultiple);
    public sealed virtual void Apply(IEdmTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model);
    public void Apply(TEdmTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model);
    public abstract virtual void Apply(TEdmTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.AutoExpandAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<NavigationPropertyConfiguration> {
    public virtual void Apply(NavigationPropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.AutoExpandAttributeEdmTypeConvention : AttributeEdmTypeConvention`1<StructuralTypeConfiguration> {
    public virtual void Apply(StructuralTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.ColumnAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.ComplexTypeAttributeConvention : AttributeEdmTypeConvention`1<EntityTypeConfiguration> {
    public virtual void Apply(EntityTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.ConcurrencyCheckAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.CountAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.CountAttributeEdmTypeConvention : AttributeEdmTypeConvention`1<StructuralTypeConfiguration> {
    public virtual void Apply(StructuralTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.DataContractAttributeEdmTypeConvention : AttributeEdmTypeConvention`1<StructuralTypeConfiguration> {
    public virtual void Apply(StructuralTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.DataContractAttributeEnumTypeConvention : AttributeEdmTypeConvention`1<EnumTypeConfiguration> {
    public virtual void Apply(EnumTypeConfiguration enumTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.DataMemberAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.DefaultValueAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.DerivedTypeConstraintAttributeConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.ExpandAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.ExpandAttributeEdmTypeConvention : AttributeEdmTypeConvention`1<StructuralTypeConfiguration> {
    public virtual void Apply(StructuralTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.FilterAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.FilterAttributeEdmTypeConvention : AttributeEdmTypeConvention`1<StructuralTypeConfiguration> {
    public virtual void Apply(StructuralTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.ForeignKeyAttributeConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
    private static void ApplyNavigation(NavigationPropertyConfiguration navProperty, EntityTypeConfiguration entityType, ForeignKeyAttribute foreignKeyAttribute);
    private static void ApplyPrimitive(PrimitivePropertyConfiguration dependent, EntityTypeConfiguration entityType, ForeignKeyAttribute foreignKeyAttribute);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.IgnoreDataMemberAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.KeyAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<StructuralPropertyConfiguration> {
    public virtual void Apply(StructuralPropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.MaxLengthAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<StructuralPropertyConfiguration> {
    public virtual void Apply(StructuralPropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.MediaTypeAttributeConvention : AttributeEdmTypeConvention`1<EntityTypeConfiguration> {
    public virtual void Apply(EntityTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.NonFilterableAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.NotCountableAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.NotExpandableAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<NavigationPropertyConfiguration> {
    public virtual void Apply(NavigationPropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.NotFilterableAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.NotMappedAttributeConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    private static string EntityFrameworkNotMappedAttributeTypeName;
    private static Func`2<Attribute, bool> _filter;
    private static NotMappedAttributeConvention();
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.NotNavigableAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<NavigationPropertyConfiguration> {
    public virtual void Apply(NavigationPropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.NotSortableAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.OrderByAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.OrderByAttributeEdmTypeConvention : AttributeEdmTypeConvention`1<StructuralTypeConfiguration> {
    public virtual void Apply(StructuralTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.PageAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.PageAttributeEdmTypeConvention : AttributeEdmTypeConvention`1<StructuralTypeConfiguration> {
    public virtual void Apply(StructuralTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.RequiredAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.SelectAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.SelectAttributeEdmTypeConvention : AttributeEdmTypeConvention`1<StructuralTypeConfiguration> {
    public virtual void Apply(StructuralTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.TimestampAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
    private static PrimitivePropertyConfiguration[] GetPropertiesWithTimestamp(EntityTypeConfiguration config);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.Attributes.UnsortableAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.OData.Builder.Conventions.ConventionsHelpers : object {
    public static IEnumerable`1<KeyValuePair`2<string, object>> GetEntityKey(ResourceContext resourceContext);
    private static object GetKeyValue(IEdmProperty key, ResourceContext resourceContext);
    public static object ConvertValue(object value);
    public static string GetEntityKeyValue(ResourceContext resourceContext);
    public static IEnumerable`1<PropertyInfo> GetProperties(StructuralTypeConfiguration structural, bool includeReadOnly);
    public static IEnumerable`1<PropertyInfo> GetAllProperties(StructuralTypeConfiguration type, bool includeReadOnly);
    [ExtensionAttribute]
public static bool IsValidStructuralProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> IgnoredProperties(StructuralTypeConfiguration structuralType);
    [ExtensionAttribute]
public static bool IsValidStructuralPropertyType(Type type);
    public static string GetUriRepresentationForValue(object value);
    private static string GetUriRepresentationForKeyValue(IEdmProperty key, ResourceContext resourceContext);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.EntityKeyConvention : EntityTypeConvention {
    public virtual void Apply(EntityTypeConfiguration entity, ODataConventionModelBuilder model);
    private static PropertyConfiguration GetKeyProperty(EntityTypeConfiguration entityType);
}
internal abstract class Microsoft.AspNet.OData.Builder.Conventions.EntityTypeConvention : object {
    public sealed virtual void Apply(IEdmTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model);
    public abstract virtual void Apply(EntityTypeConfiguration entity, ODataConventionModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.ForeignKeyDiscoveryConvention : object {
    public sealed virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, ODataConventionModelBuilder model);
    public sealed virtual void Apply(NavigationPropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, ODataConventionModelBuilder model);
    private static IDictionary`2<PrimitivePropertyConfiguration, PrimitivePropertyConfiguration> GetForeignKeys(EntityTypeConfiguration principalEntityType, EntityTypeConfiguration dependentEntityType);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.FunctionLinkGenerationConvention : object {
    public sealed virtual void Apply(OperationConfiguration configuration, ODataModelBuilder model);
}
internal interface Microsoft.AspNet.OData.Builder.Conventions.IConvention {
}
internal interface Microsoft.AspNet.OData.Builder.Conventions.IEdmPropertyConvention {
    public abstract virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, ODataConventionModelBuilder model);
}
internal interface Microsoft.AspNet.OData.Builder.Conventions.IEdmPropertyConvention`1 {
    public abstract virtual void Apply(TPropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, ODataConventionModelBuilder model);
}
internal interface Microsoft.AspNet.OData.Builder.Conventions.IEdmTypeConvention {
    public abstract virtual void Apply(IEdmTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model);
}
internal interface Microsoft.AspNet.OData.Builder.Conventions.INavigationSourceConvention {
    public abstract virtual void Apply(NavigationSourceConfiguration configuration, ODataModelBuilder model);
}
internal interface Microsoft.AspNet.OData.Builder.Conventions.IOperationConvention {
    public abstract virtual void Apply(OperationConfiguration configuration, ODataModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.NavigationLinksGenerationConvention : object {
    public sealed virtual void Apply(NavigationSourceConfiguration configuration, ODataModelBuilder model);
}
internal class Microsoft.AspNet.OData.Builder.Conventions.SelfLinksGenerationConvention : object {
    public sealed virtual void Apply(NavigationSourceConfiguration configuration, ODataModelBuilder model);
}
public class Microsoft.AspNet.OData.Builder.DecimalPropertyConfiguration : PrecisionPropertyConfiguration {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Scale>k__BackingField;
    public Nullable`1<int> Scale { get; public set; }
    public DecimalPropertyConfiguration(PropertyInfo property, StructuralTypeConfiguration declaringType);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(Nullable`1<int> value);
}
[AttributeUsageAttribute("128")]
public class Microsoft.AspNet.OData.Builder.DerivedTypeConstraintAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ISet`1<Type> <DerivedTypeConstraints>k__BackingField;
    public ISet`1<Type> DerivedTypeConstraints { get; private set; }
    public DerivedTypeConstraintAttribute(Type[] types);
    [CompilerGeneratedAttribute]
public ISet`1<Type> get_DerivedTypeConstraints();
    [CompilerGeneratedAttribute]
private void set_DerivedTypeConstraints(ISet`1<Type> value);
}
public class Microsoft.AspNet.OData.Builder.DerivedTypeConstraintConfiguration : object {
    [CompilerGeneratedAttribute]
private EdmVocabularyAnnotationSerializationLocation <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<Type> <ConstraintSet>k__BackingField;
    public EdmVocabularyAnnotationSerializationLocation Location { get; public set; }
    internal ISet`1<Type> ConstraintSet { get; }
    public DerivedTypeConstraintConfiguration(EdmVocabularyAnnotationSerializationLocation location);
    [CompilerGeneratedAttribute]
public EdmVocabularyAnnotationSerializationLocation get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(EdmVocabularyAnnotationSerializationLocation value);
    public DerivedTypeConstraintConfiguration AddConstraint();
    public void AddConstraints(IEnumerable`1<Type> derivedTypes);
    [CompilerGeneratedAttribute]
internal ISet`1<Type> get_ConstraintSet();
    internal void ValidateConstraints(Type clrBaseType);
}
public class Microsoft.AspNet.OData.Builder.DynamicPropertyDictionaryAnnotation : object {
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    public PropertyInfo PropertyInfo { get; private set; }
    public DynamicPropertyDictionaryAnnotation(PropertyInfo propertyInfo);
    [CompilerGeneratedAttribute]
public PropertyInfo get_PropertyInfo();
    [CompilerGeneratedAttribute]
private void set_PropertyInfo(PropertyInfo value);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.OData.Builder.EdmModelHelperMethods : object {
    public static IEdmModel BuildEdmModel(ODataModelBuilder builder);
    [ExtensionAttribute]
private static void AddTypes(EdmModel model, Dictionary`2<Type, IEdmType> types);
    [ExtensionAttribute]
private static NavigationSourceAndAnnotations[] AddEntitySetAndAnnotations(EdmEntityContainer container, ODataModelBuilder builder, Dictionary`2<Type, IEdmType> edmTypeMap);
    [ExtensionAttribute]
private static NavigationSourceAndAnnotations[] AddSingletonAndAnnotations(EdmEntityContainer container, ODataModelBuilder builder, Dictionary`2<Type, IEdmType> edmTypeMap);
    [ExtensionAttribute]
private static IDictionary`2<string, EdmNavigationSource> GetNavigationSourceMap(EdmModel model, EdmTypeMap edmMap, IEnumerable`1<NavigationSourceAndAnnotations> navigationSourceAndAnnotations);
    private static void AddNavigationBindings(EdmTypeMap edmMap, NavigationSourceConfiguration navigationSourceConfiguration, EdmNavigationSource navigationSource, Dictionary`2<string, EdmNavigationSource> edmNavigationSourceMap);
    private static void AddNavigationPropertyLinkBuilders(ODataModelBuilder modelBuilder, EdmTypeMap edmMap, IEnumerable`1<NavigationSourceAndAnnotations> navigationSourceAndAnnotations);
    private static string ConvertBindingPath(EdmTypeMap edmMap, NavigationPropertyBindingConfiguration binding);
    [ExtensionAttribute]
private static void AddOperationParameters(EdmModel model, EdmOperation operation, OperationConfiguration operationConfiguration, Dictionary`2<Type, IEdmType> edmTypeMap);
    private static void AddOperationLinkBuilder(IEdmModel model, IEdmOperation operation, OperationConfiguration operationConfiguration);
    private static void ValidateOperationEntitySetPath(IEdmModel model, IEdmOperationImport operationImport, OperationConfiguration operationConfiguration);
    [ExtensionAttribute]
private static void AddOperations(EdmModel model, IEnumerable`1<OperationConfiguration> configurations, EdmEntityContainer container, Dictionary`2<Type, IEdmType> edmTypeMap, IDictionary`2<string, EdmNavigationSource> edmNavigationSourceMap);
    private static EdmOperationImport CreateActionImport(OperationConfiguration operationConfiguration, EdmEntityContainer container, IEdmTypeReference returnReference, IEdmExpression expression, IEdmPathExpression pathExpression);
    private static EdmOperationImport CreateFunctionImport(FunctionConfiguration function, EdmEntityContainer container, IEdmTypeReference returnReference, IEdmExpression expression, IEdmPathExpression pathExpression);
    private static void ValidateActionOverload(IEnumerable`1<ActionConfiguration> configurations);
    [ExtensionAttribute]
private static Dictionary`2<Type, IEdmType> AddTypes(EdmModel model, EdmTypeMap edmTypeMap);
    [ExtensionAttribute]
private static void AddType(EdmModel model, IEdmType type);
    [ExtensionAttribute]
private static EdmEntitySet AddEntitySet(EdmEntityContainer container, EntitySetConfiguration entitySet, IDictionary`2<Type, IEdmType> edmTypeMap);
    private static IEnumerable`1<Tuple`2<EdmEntitySet, EntitySetConfiguration>> AddEntitySets(IEnumerable`1<EntitySetConfiguration> entitySets, EdmEntityContainer container, Dictionary`2<Type, IEdmType> edmTypeMap);
    [ExtensionAttribute]
private static EdmSingleton AddSingleton(EdmEntityContainer container, SingletonConfiguration singletonType, IDictionary`2<Type, IEdmType> edmTypeMap);
    private static IEnumerable`1<Tuple`2<EdmSingleton, SingletonConfiguration>> AddSingletons(IEnumerable`1<SingletonConfiguration> singletons, EdmEntityContainer container, Dictionary`2<Type, IEdmType> edmTypeMap);
    [ExtensionAttribute]
private static void AddClrTypeAnnotations(EdmModel model, Dictionary`2<Type, IEdmType> edmTypes);
    [ExtensionAttribute]
private static void AddClrPropertyInfoAnnotations(EdmModel model, Dictionary`2<PropertyInfo, IEdmProperty> edmProperties);
    [ExtensionAttribute]
private static void AddClrEnumMemberInfoAnnotations(EdmModel model, EdmTypeMap edmTypeMap);
    [ExtensionAttribute]
private static void AddDynamicPropertyDictionaryAnnotations(EdmModel model, Dictionary`2<IEdmStructuredType, PropertyInfo> openTypes);
    [ExtensionAttribute]
private static void AddInstanceAnnotationsContainer(EdmModel model, Dictionary`2<IEdmStructuredType, PropertyInfo> instanceAnnotations);
    [ExtensionAttribute]
private static void AddPropertiesQuerySettings(EdmModel model, Dictionary`2<IEdmProperty, ModelBoundQuerySettings> edmPropertiesQuerySettings);
    [ExtensionAttribute]
private static void AddStructuredTypeQuerySettings(EdmModel model, Dictionary`2<IEdmStructuredType, ModelBoundQuerySettings> edmStructuredTypeQuerySettings);
    [ExtensionAttribute]
private static void AddPropertyRestrictionsAnnotations(EdmModel model, Dictionary`2<IEdmProperty, QueryableRestrictions> edmPropertiesRestrictions);
    [ExtensionAttribute]
private static void AddCoreAndValidationVocabularyAnnotations(EdmModel model, IEnumerable`1<NavigationSourceAndAnnotations> navigationSources, EdmTypeMap edmTypeMap);
    [ExtensionAttribute]
private static void AddOptimisticConcurrencyAnnotation(EdmModel model, IEdmVocabularyAnnotatable target, NavigationSourceConfiguration navigationSourceConfiguration, EdmTypeMap edmTypeMap);
    [ExtensionAttribute]
private static void AddDerivedTypeConstraintAnnotationForProperties(EdmModel model, EdmTypeMap edmTypeMap);
    [ExtensionAttribute]
private static void AddDerivedTypeConstraintAnnotationForNavigationSource(EdmModel model, IEdmVocabularyAnnotatable target, NavigationSourceConfiguration navigationSourceConfiguration, EdmTypeMap edmTypeMap);
    [ExtensionAttribute]
internal static void AddDerivedTypeConstraintAnnotation(EdmModel model, IEdmVocabularyAnnotatable target, Dictionary`2<Type, IEdmType> edmTypeMap, DerivedTypeConstraintConfiguration derivedTypeConstraints);
    [ExtensionAttribute]
private static void AddCapabilitiesVocabularyAnnotations(EdmModel model, IEnumerable`1<NavigationSourceAndAnnotations> navigationSources, EdmTypeMap edmTypeMap);
    [ExtensionAttribute]
private static void AddCountRestrictionsAnnotation(EdmModel model, IEdmEntitySet target, EntitySetConfiguration entitySetConfiguration, EdmTypeMap edmTypeMap);
    [ExtensionAttribute]
private static void AddNavigationRestrictionsAnnotation(EdmModel model, IEdmEntitySet target, EntitySetConfiguration entitySetConfiguration, EdmTypeMap edmTypeMap);
    [ExtensionAttribute]
private static void AddFilterRestrictionsAnnotation(EdmModel model, IEdmEntitySet target, EntitySetConfiguration entitySetConfiguration, EdmTypeMap edmTypeMap);
    [ExtensionAttribute]
private static void AddSortRestrictionsAnnotation(EdmModel model, IEdmEntitySet target, EntitySetConfiguration entitySetConfiguration, EdmTypeMap edmTypeMap);
    [ExtensionAttribute]
private static void AddExpandRestrictionsAnnotation(EdmModel model, IEdmEntitySet target, EntitySetConfiguration entitySetConfiguration, EdmTypeMap edmTypeMap);
    private static IEdmExpression GetEdmEntitySetExpression(IDictionary`2<string, EdmNavigationSource> navigationSources, OperationConfiguration operationConfiguration);
    private static IEdmTypeReference GetEdmTypeReference(Dictionary`2<Type, IEdmType> availableTypes, IEdmTypeConfiguration configuration, bool nullable);
    [ExtensionAttribute]
internal static string GetNavigationSourceUrl(IEdmModel model, IEdmNavigationSource navigationSource);
    [ExtensionAttribute]
internal static IEnumerable`1<IEdmAction> GetAvailableActions(IEdmModel model, IEdmEntityType entityType);
    [ExtensionAttribute]
internal static IEnumerable`1<IEdmFunction> GetAvailableFunctions(IEdmModel model, IEdmEntityType entityType);
    [ExtensionAttribute]
internal static IEnumerable`1<IEdmOperation> GetAvailableOperationsBoundToCollection(IEdmModel model, IEdmEntityType entityType);
    [ExtensionAttribute]
internal static IEnumerable`1<IEdmOperation> GetAvailableOperations(IEdmModel model, IEdmEntityType entityType, bool boundToCollection);
}
internal class Microsoft.AspNet.OData.Builder.EdmTypeBuilder : object {
    private List`1<IEdmTypeConfiguration> _configurations;
    private Dictionary`2<Type, IEdmType> _types;
    private Dictionary`2<PropertyInfo, IEdmProperty> _properties;
    private Dictionary`2<IEdmProperty, QueryableRestrictions> _propertiesRestrictions;
    private Dictionary`2<IEdmProperty, ModelBoundQuerySettings> _propertiesQuerySettings;
    private Dictionary`2<IEdmProperty, PropertyConfiguration> _propertyConfigurations;
    private Dictionary`2<IEdmStructuredType, ModelBoundQuerySettings> _structuredTypeQuerySettings;
    private Dictionary`2<Enum, IEdmEnumMember> _members;
    private Dictionary`2<IEdmStructuredType, PropertyInfo> _openTypes;
    private Dictionary`2<IEdmStructuredType, PropertyInfo> _instanceAnnotableTypes;
    internal EdmTypeBuilder(IEnumerable`1<IEdmTypeConfiguration> configurations);
    private Dictionary`2<Type, IEdmType> GetEdmTypes();
    private void CreateEdmTypeHeader(IEdmTypeConfiguration config);
    private void CreateEdmTypeBody(IEdmTypeConfiguration config);
    private static IEdmTypeReference AddPrecisionConfigInPrimitiveTypeReference(PrecisionPropertyConfiguration precisionProperty, IEdmTypeReference primitiveTypeReference);
    private static IEdmTypeReference AddLengthConfigInPrimitiveTypeReference(LengthPropertyConfiguration lengthProperty, IEdmTypeReference primitiveTypeReference);
    private void CreateStructuralTypeBody(EdmStructuredType type, StructuralTypeConfiguration config);
    private IEdmProperty CreateStructuralTypeCollectionPropertyBody(EdmStructuredType type, CollectionPropertyConfiguration collectionProperty);
    private IEdmProperty CreateStructuralTypeEnumPropertyBody(EdmStructuredType type, EnumPropertyConfiguration enumProperty);
    private void CreateComplexTypeBody(EdmComplexType type, ComplexTypeConfiguration config);
    private void CreateEntityTypeBody(EdmEntityType type, EntityTypeConfiguration config);
    private void CreateNavigationProperty(StructuralTypeConfiguration config);
    private IList`1<IEdmStructuralProperty> GetDeclaringPropertyInfo(IEnumerable`1<PropertyInfo> propertyInfos);
    private void CreateEnumTypeBody(EdmEnumType type, EnumTypeConfiguration config);
    private IEdmType GetEdmType(Type clrType);
    public static EdmTypeMap GetTypesAndProperties(IEnumerable`1<IEdmTypeConfiguration> configurations);
    public static EdmPrimitiveTypeKind GetTypeKind(Type clrType);
    [CompilerGeneratedAttribute]
private EdmNavigationPropertyInfo <CreateNavigationProperty>b__21_0(NavigationPropertyConfiguration nav);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.OData.Builder.EdmTypeConfigurationExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<PropertyConfiguration> DerivedProperties(StructuralTypeConfiguration structuralType);
    [IteratorStateMachineAttribute("Microsoft.AspNet.OData.Builder.EdmTypeConfigurationExtensions/<DerivedProperties>d__1")]
[ExtensionAttribute]
public static IEnumerable`1<PropertyConfiguration> DerivedProperties(EntityTypeConfiguration entity);
    [IteratorStateMachineAttribute("Microsoft.AspNet.OData.Builder.EdmTypeConfigurationExtensions/<DerivedProperties>d__2")]
[ExtensionAttribute]
public static IEnumerable`1<PropertyConfiguration> DerivedProperties(ComplexTypeConfiguration complex);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyConfiguration> Keys(EntityTypeConfiguration entity);
    [ExtensionAttribute]
public static IEnumerable`1<StructuralTypeConfiguration> ThisAndBaseTypes(StructuralTypeConfiguration structuralType);
    [ExtensionAttribute]
public static IEnumerable`1<StructuralTypeConfiguration> ThisAndBaseAndDerivedTypes(ODataModelBuilder modelBuilder, StructuralTypeConfiguration structuralType);
    [IteratorStateMachineAttribute("Microsoft.AspNet.OData.Builder.EdmTypeConfigurationExtensions/<BaseTypes>d__6")]
[ExtensionAttribute]
public static IEnumerable`1<StructuralTypeConfiguration> BaseTypes(StructuralTypeConfiguration structuralType);
    [ExtensionAttribute]
public static IEnumerable`1<StructuralTypeConfiguration> DerivedTypes(ODataModelBuilder modelBuilder, StructuralTypeConfiguration structuralType);
    [IteratorStateMachineAttribute("Microsoft.AspNet.OData.Builder.EdmTypeConfigurationExtensions/<DerivedTypes>d__8")]
[ExtensionAttribute]
public static IEnumerable`1<EntityTypeConfiguration> DerivedTypes(ODataModelBuilder modelBuilder, EntityTypeConfiguration entity);
    [IteratorStateMachineAttribute("Microsoft.AspNet.OData.Builder.EdmTypeConfigurationExtensions/<DerivedTypes>d__9")]
[ExtensionAttribute]
public static IEnumerable`1<ComplexTypeConfiguration> DerivedTypes(ODataModelBuilder modelBuilder, ComplexTypeConfiguration complex);
    [ExtensionAttribute]
public static bool IsAssignableFrom(StructuralTypeConfiguration baseStructuralType, StructuralTypeConfiguration structuralType);
}
internal class Microsoft.AspNet.OData.Builder.EdmTypeMap : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, IEdmType> <EdmTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<PropertyInfo, IEdmProperty> <EdmProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IEdmProperty, QueryableRestrictions> <EdmPropertiesRestrictions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IEdmProperty, PropertyConfiguration> <EdmPropertyConfigurations>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IEdmProperty, ModelBoundQuerySettings> <EdmPropertiesQuerySettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IEdmStructuredType, ModelBoundQuerySettings> <EdmStructuredTypeQuerySettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Enum, IEdmEnumMember> <EnumMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IEdmStructuredType, PropertyInfo> <OpenTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IEdmStructuredType, PropertyInfo> <InstanceAnnotatableTypes>k__BackingField;
    public Dictionary`2<Type, IEdmType> EdmTypes { get; private set; }
    public Dictionary`2<PropertyInfo, IEdmProperty> EdmProperties { get; private set; }
    public Dictionary`2<IEdmProperty, QueryableRestrictions> EdmPropertiesRestrictions { get; private set; }
    public Dictionary`2<IEdmProperty, PropertyConfiguration> EdmPropertyConfigurations { get; private set; }
    public Dictionary`2<IEdmProperty, ModelBoundQuerySettings> EdmPropertiesQuerySettings { get; private set; }
    public Dictionary`2<IEdmStructuredType, ModelBoundQuerySettings> EdmStructuredTypeQuerySettings { get; private set; }
    public Dictionary`2<Enum, IEdmEnumMember> EnumMembers { get; private set; }
    public Dictionary`2<IEdmStructuredType, PropertyInfo> OpenTypes { get; private set; }
    public Dictionary`2<IEdmStructuredType, PropertyInfo> InstanceAnnotatableTypes { get; private set; }
    public EdmTypeMap(Dictionary`2<Type, IEdmType> edmTypes, Dictionary`2<PropertyInfo, IEdmProperty> edmProperties, Dictionary`2<IEdmProperty, QueryableRestrictions> edmPropertiesRestrictions, Dictionary`2<IEdmProperty, ModelBoundQuerySettings> edmPropertiesQuerySettings, Dictionary`2<IEdmStructuredType, ModelBoundQuerySettings> edmStructuredTypeQuerySettings, Dictionary`2<Enum, IEdmEnumMember> enumMembers, Dictionary`2<IEdmStructuredType, PropertyInfo> openTypes, Dictionary`2<IEdmProperty, PropertyConfiguration> propertyConfigurations, Dictionary`2<IEdmStructuredType, PropertyInfo> instanceAnnotatableTypes);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, IEdmType> get_EdmTypes();
    [CompilerGeneratedAttribute]
private void set_EdmTypes(Dictionary`2<Type, IEdmType> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<PropertyInfo, IEdmProperty> get_EdmProperties();
    [CompilerGeneratedAttribute]
private void set_EdmProperties(Dictionary`2<PropertyInfo, IEdmProperty> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<IEdmProperty, QueryableRestrictions> get_EdmPropertiesRestrictions();
    [CompilerGeneratedAttribute]
private void set_EdmPropertiesRestrictions(Dictionary`2<IEdmProperty, QueryableRestrictions> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<IEdmProperty, PropertyConfiguration> get_EdmPropertyConfigurations();
    [CompilerGeneratedAttribute]
private void set_EdmPropertyConfigurations(Dictionary`2<IEdmProperty, PropertyConfiguration> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<IEdmProperty, ModelBoundQuerySettings> get_EdmPropertiesQuerySettings();
    [CompilerGeneratedAttribute]
private void set_EdmPropertiesQuerySettings(Dictionary`2<IEdmProperty, ModelBoundQuerySettings> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<IEdmStructuredType, ModelBoundQuerySettings> get_EdmStructuredTypeQuerySettings();
    [CompilerGeneratedAttribute]
private void set_EdmStructuredTypeQuerySettings(Dictionary`2<IEdmStructuredType, ModelBoundQuerySettings> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Enum, IEdmEnumMember> get_EnumMembers();
    [CompilerGeneratedAttribute]
private void set_EnumMembers(Dictionary`2<Enum, IEdmEnumMember> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<IEdmStructuredType, PropertyInfo> get_OpenTypes();
    [CompilerGeneratedAttribute]
private void set_OpenTypes(Dictionary`2<IEdmStructuredType, PropertyInfo> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<IEdmStructuredType, PropertyInfo> get_InstanceAnnotatableTypes();
    [CompilerGeneratedAttribute]
private void set_InstanceAnnotatableTypes(Dictionary`2<IEdmStructuredType, PropertyInfo> value);
}
public class Microsoft.AspNet.OData.Builder.EntityCollectionConfiguration`1 : CollectionTypeConfiguration {
    internal EntityCollectionConfiguration`1(EntityTypeConfiguration elementType);
    public ActionConfiguration Action(string name);
    public FunctionConfiguration Function(string name);
}
public class Microsoft.AspNet.OData.Builder.EntitySetConfiguration : NavigationSourceConfiguration {
    private Func`2<ResourceSetContext, Uri> _feedSelfLinkFactory;
    public EntitySetConfiguration(ODataModelBuilder modelBuilder, Type entityClrType, string name);
    public EntitySetConfiguration(ODataModelBuilder modelBuilder, EntityTypeConfiguration entityType, string name);
    public virtual NavigationSourceConfiguration HasFeedSelfLink(Func`2<ResourceSetContext, Uri> feedSelfLinkFactory);
    public virtual Func`2<ResourceSetContext, Uri> GetFeedSelfLink();
    public EntitySetConfiguration HasDerivedTypeConstraints(Type[] subtypes);
    public EntitySetConfiguration HasDerivedTypeConstraint();
}
public class Microsoft.AspNet.OData.Builder.EntitySetConfiguration`1 : NavigationSourceConfiguration`1<TEntityType> {
    internal EntitySetConfiguration EntitySet { get; }
    internal EntitySetConfiguration`1(ODataModelBuilder modelBuilder, string name);
    internal EntitySetConfiguration`1(ODataModelBuilder modelBuilder, EntitySetConfiguration configuration);
    internal EntitySetConfiguration get_EntitySet();
    public virtual void HasFeedSelfLink(Func`2<ResourceSetContext, string> feedSelfLinkFactory);
    public virtual void HasFeedSelfLink(Func`2<ResourceSetContext, Uri> feedSelfLinkFactory);
    public EntitySetConfiguration`1<TEntityType> HasDerivedTypeConstraints(Type[] subtypes);
    public EntitySetConfiguration`1<TEntityType> HasDerivedTypeConstraint();
}
public class Microsoft.AspNet.OData.Builder.EntityTypeConfiguration : StructuralTypeConfiguration {
    private List`1<PrimitivePropertyConfiguration> _keys;
    private List`1<EnumPropertyConfiguration> _enumKeys;
    [CompilerGeneratedAttribute]
private bool <HasStream>k__BackingField;
    public EdmTypeKind Kind { get; }
    public bool HasStream { get; public set; }
    public IEnumerable`1<PrimitivePropertyConfiguration> Keys { get; }
    public IEnumerable`1<EnumPropertyConfiguration> EnumKeys { get; }
    public EntityTypeConfiguration BaseType { get; public set; }
    public EntityTypeConfiguration(ODataModelBuilder modelBuilder, Type clrType);
    public virtual EdmTypeKind get_Kind();
    [CompilerGeneratedAttribute]
public virtual bool get_HasStream();
    [CompilerGeneratedAttribute]
public virtual void set_HasStream(bool value);
    public virtual IEnumerable`1<PrimitivePropertyConfiguration> get_Keys();
    public virtual IEnumerable`1<EnumPropertyConfiguration> get_EnumKeys();
    public virtual EntityTypeConfiguration get_BaseType();
    public virtual void set_BaseType(EntityTypeConfiguration value);
    public virtual EntityTypeConfiguration Abstract();
    public virtual EntityTypeConfiguration MediaType();
    public virtual EntityTypeConfiguration HasKey(PropertyInfo keyProperty);
    public virtual void RemoveKey(PrimitivePropertyConfiguration keyProperty);
    public virtual void RemoveKey(EnumPropertyConfiguration enumKeyProperty);
    public virtual EntityTypeConfiguration DerivesFromNothing();
    public virtual EntityTypeConfiguration DerivesFrom(EntityTypeConfiguration baseType);
    public virtual void RemoveProperty(PropertyInfo propertyInfo);
}
public class Microsoft.AspNet.OData.Builder.EntityTypeConfiguration`1 : StructuralTypeConfiguration`1<TEntityType> {
    private EntityTypeConfiguration _configuration;
    private EntityCollectionConfiguration`1<TEntityType> _collection;
    private ODataModelBuilder _modelBuilder;
    public EntityTypeConfiguration BaseType { get; }
    public IEnumerable`1<NavigationPropertyConfiguration> NavigationProperties { get; }
    public EntityCollectionConfiguration`1<TEntityType> Collection { get; }
    internal EntityTypeConfiguration`1(ODataModelBuilder modelBuilder);
    internal EntityTypeConfiguration`1(ODataModelBuilder modelBuilder, EntityTypeConfiguration configuration);
    public EntityTypeConfiguration get_BaseType();
    public IEnumerable`1<NavigationPropertyConfiguration> get_NavigationProperties();
    public EntityCollectionConfiguration`1<TEntityType> get_Collection();
    public EntityTypeConfiguration`1<TEntityType> Abstract();
    public EntityTypeConfiguration`1<TEntityType> MediaType();
    public EntityTypeConfiguration`1<TEntityType> DerivesFromNothing();
    public EntityTypeConfiguration`1<TEntityType> DerivesFrom();
    public EntityTypeConfiguration`1<TEntityType> HasKey(Expression`1<Func`2<TEntityType, TKey>> keyDefinitionExpression);
    public ActionConfiguration Action(string name);
    public FunctionConfiguration Function(string name);
}
public class Microsoft.AspNet.OData.Builder.EnumMemberConfiguration : object {
    private string _name;
    [CompilerGeneratedAttribute]
private EnumTypeConfiguration <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private Enum <MemberInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddedExplicitly>k__BackingField;
    public string Name { get; public set; }
    public EnumTypeConfiguration DeclaringType { get; private set; }
    public Enum MemberInfo { get; private set; }
    public bool AddedExplicitly { get; public set; }
    public EnumMemberConfiguration(Enum member, EnumTypeConfiguration declaringType);
    public string get_Name();
    public void set_Name(string value);
    [CompilerGeneratedAttribute]
public EnumTypeConfiguration get_DeclaringType();
    [CompilerGeneratedAttribute]
private void set_DeclaringType(EnumTypeConfiguration value);
    [CompilerGeneratedAttribute]
public Enum get_MemberInfo();
    [CompilerGeneratedAttribute]
private void set_MemberInfo(Enum value);
    [CompilerGeneratedAttribute]
public bool get_AddedExplicitly();
    [CompilerGeneratedAttribute]
public void set_AddedExplicitly(bool value);
}
public class Microsoft.AspNet.OData.Builder.EnumPropertyConfiguration : StructuralPropertyConfiguration {
    [CompilerGeneratedAttribute]
private string <DefaultValueString>k__BackingField;
    public string DefaultValueString { get; public set; }
    public PropertyKind Kind { get; }
    public Type RelatedClrType { get; }
    public EnumPropertyConfiguration(PropertyInfo property, StructuralTypeConfiguration declaringType);
    [CompilerGeneratedAttribute]
public string get_DefaultValueString();
    [CompilerGeneratedAttribute]
public void set_DefaultValueString(string value);
    public virtual PropertyKind get_Kind();
    public virtual Type get_RelatedClrType();
    public EnumPropertyConfiguration IsOptional();
    public EnumPropertyConfiguration IsRequired();
    public EnumPropertyConfiguration IsConcurrencyToken();
}
public class Microsoft.AspNet.OData.Builder.EnumTypeConfiguration : object {
    private string _namespace;
    private string _name;
    private NullableEnumTypeConfiguration nullableEnumTypeConfiguration;
    [CompilerGeneratedAttribute]
private bool <IsFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <UnderlyingType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddedExplicitly>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataModelBuilder <ModelBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Enum> <RemovedMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<Enum, EnumMemberConfiguration> <ExplicitMembers>k__BackingField;
    public EdmTypeKind Kind { get; }
    public bool IsFlags { get; private set; }
    public Type ClrType { get; private set; }
    public Type UnderlyingType { get; private set; }
    public string FullName { get; }
    public string Namespace { get; public set; }
    public string Name { get; public set; }
    public IEnumerable`1<EnumMemberConfiguration> Members { get; }
    public ReadOnlyCollection`1<Enum> IgnoredMembers { get; }
    public bool AddedExplicitly { get; public set; }
    public ODataModelBuilder ModelBuilder { get; private set; }
    protected internal IList`1<Enum> RemovedMembers { get; private set; }
    protected internal IDictionary`2<Enum, EnumMemberConfiguration> ExplicitMembers { get; private set; }
    public EnumTypeConfiguration(ODataModelBuilder builder, Type clrType);
    public sealed virtual EdmTypeKind get_Kind();
    [CompilerGeneratedAttribute]
public bool get_IsFlags();
    [CompilerGeneratedAttribute]
private void set_IsFlags(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
private void set_ClrType(Type value);
    [CompilerGeneratedAttribute]
public Type get_UnderlyingType();
    [CompilerGeneratedAttribute]
private void set_UnderlyingType(Type value);
    public sealed virtual string get_FullName();
    public sealed virtual string get_Namespace();
    public void set_Namespace(string value);
    public sealed virtual string get_Name();
    public void set_Name(string value);
    public IEnumerable`1<EnumMemberConfiguration> get_Members();
    public ReadOnlyCollection`1<Enum> get_IgnoredMembers();
    [CompilerGeneratedAttribute]
public bool get_AddedExplicitly();
    [CompilerGeneratedAttribute]
public void set_AddedExplicitly(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ODataModelBuilder get_ModelBuilder();
    [CompilerGeneratedAttribute]
private void set_ModelBuilder(ODataModelBuilder value);
    [CompilerGeneratedAttribute]
protected internal IList`1<Enum> get_RemovedMembers();
    [CompilerGeneratedAttribute]
private void set_RemovedMembers(IList`1<Enum> value);
    [CompilerGeneratedAttribute]
protected internal IDictionary`2<Enum, EnumMemberConfiguration> get_ExplicitMembers();
    [CompilerGeneratedAttribute]
private void set_ExplicitMembers(IDictionary`2<Enum, EnumMemberConfiguration> value);
    public EnumMemberConfiguration AddMember(Enum member);
    public void RemoveMember(Enum member);
    internal NullableEnumTypeConfiguration GetNullableEnumTypeConfiguration();
}
public class Microsoft.AspNet.OData.Builder.EnumTypeConfiguration`1 : object {
    private EnumTypeConfiguration _configuration;
    public IEnumerable`1<EnumMemberConfiguration> Members { get; }
    public string FullName { get; }
    public string Namespace { get; public set; }
    public string Name { get; public set; }
    internal EnumTypeConfiguration`1(EnumTypeConfiguration configuration);
    public IEnumerable`1<EnumMemberConfiguration> get_Members();
    public string get_FullName();
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_Name();
    public void set_Name(string value);
    public virtual void RemoveMember(TEnumType member);
    public EnumMemberConfiguration Member(TEnumType enumMember);
}
public class Microsoft.AspNet.OData.Builder.FunctionConfiguration : OperationConfiguration {
    [CompilerGeneratedAttribute]
private bool <SupportedInFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportedInOrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeInServiceDocument>k__BackingField;
    public OperationKind Kind { get; }
    public bool IsComposable { get; public set; }
    public bool IsSideEffecting { get; }
    public bool SupportedInFilter { get; public set; }
    public bool SupportedInOrderBy { get; public set; }
    public bool IncludeInServiceDocument { get; public set; }
    internal FunctionConfiguration(ODataModelBuilder builder, string name);
    public virtual OperationKind get_Kind();
    public bool get_IsComposable();
    public void set_IsComposable(bool value);
    public virtual bool get_IsSideEffecting();
    [CompilerGeneratedAttribute]
public bool get_SupportedInFilter();
    [CompilerGeneratedAttribute]
public void set_SupportedInFilter(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportedInOrderBy();
    [CompilerGeneratedAttribute]
public void set_SupportedInOrderBy(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeInServiceDocument();
    [CompilerGeneratedAttribute]
public void set_IncludeInServiceDocument(bool value);
    public FunctionConfiguration HasFunctionLink(Func`2<ResourceContext, Uri> functionLinkFactory, bool followsConventions);
    public Func`2<ResourceContext, Uri> GetFunctionLink();
    public FunctionConfiguration HasFeedFunctionLink(Func`2<ResourceSetContext, Uri> functionLinkFactory, bool followsConventions);
    public Func`2<ResourceSetContext, Uri> GetFeedFunctionLink();
    public FunctionConfiguration ReturnsFromEntitySet(string entitySetName);
    public FunctionConfiguration ReturnsCollectionFromEntitySet(string entitySetName);
    public FunctionConfiguration Returns(Type clrReturnType);
    public FunctionConfiguration Returns();
    public FunctionConfiguration ReturnsCollection();
    public FunctionConfiguration SetBindingParameter(string name, IEdmTypeConfiguration bindingParameterType);
    public FunctionConfiguration HasDerivedTypeConstraintsForReturnType(Type[] subtypes);
    public FunctionConfiguration HasDerivedTypeConstraintForReturnType();
    public FunctionConfiguration ReturnsEntityViaEntitySetPath(string entitySetPath);
    public FunctionConfiguration ReturnsEntityViaEntitySetPath(String[] entitySetPath);
    public FunctionConfiguration ReturnsCollectionViaEntitySetPath(string entitySetPath);
    public FunctionConfiguration ReturnsCollectionViaEntitySetPath(String[] entitySetPath);
}
public interface Microsoft.AspNet.OData.Builder.IEdmTypeConfiguration {
    public Type ClrType { get; }
    public string FullName { get; }
    public string Namespace { get; }
    public string Name { get; }
    public EdmTypeKind Kind { get; }
    public ODataModelBuilder ModelBuilder { get; }
    public abstract virtual Type get_ClrType();
    public abstract virtual string get_FullName();
    public abstract virtual string get_Namespace();
    public abstract virtual string get_Name();
    public abstract virtual EdmTypeKind get_Kind();
    public abstract virtual ODataModelBuilder get_ModelBuilder();
}
public interface Microsoft.AspNet.OData.Builder.IODataInstanceAnnotationContainer {
    public abstract virtual void AddResourceAnnotation(string annotationName, object value);
    public abstract virtual void AddPropertyAnnotation(string propertyName, string annotationName, object value);
    public abstract virtual object GetResourceAnnotation(string annotationName);
    public abstract virtual object GetPropertyAnnotation(string propertyName, string annotationName);
    public abstract virtual IDictionary`2<string, object> GetResourceAnnotations();
    public abstract virtual IDictionary`2<string, object> GetPropertyAnnotations(string propertyName);
}
public class Microsoft.AspNet.OData.Builder.LengthPropertyConfiguration : PrimitivePropertyConfiguration {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxLength>k__BackingField;
    public Nullable`1<int> MaxLength { get; public set; }
    public LengthPropertyConfiguration(PropertyInfo property, StructuralTypeConfiguration declaringType);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxLength();
    [CompilerGeneratedAttribute]
public void set_MaxLength(Nullable`1<int> value);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.AspNet.OData.Builder.LinkGenerationHelpers : object {
    [ExtensionAttribute]
public static Uri GenerateSelfLink(ResourceContext resourceContext, bool includeCast);
    [ExtensionAttribute]
public static Uri GenerateNavigationPropertyLink(ResourceContext resourceContext, IEdmNavigationProperty navigationProperty, bool includeCast);
    [ExtensionAttribute]
public static Uri GenerateActionLink(ResourceSetContext resourceSetContext, IEdmOperation action);
    [ExtensionAttribute]
internal static Uri GenerateActionLink(ResourceSetContext feedContext, string bindingParameterType, string actionName);
    [ExtensionAttribute]
internal static Uri GenerateActionLink(ResourceSetContext resourceSetContext, IEdmTypeReference bindingParameterType, IEdmOperation action);
    [ExtensionAttribute]
public static Uri GenerateFunctionLink(ResourceSetContext resourceSetContext, IEdmOperation function);
    [ExtensionAttribute]
internal static Uri GenerateFunctionLink(ResourceSetContext resourceSetContext, IEdmTypeReference bindingParameterType, IEdmOperation functionImport, IEnumerable`1<string> parameterNames);
    [ExtensionAttribute]
internal static Uri GenerateFunctionLink(ResourceSetContext feedContext, string bindingParameterType, string functionName, IEnumerable`1<string> parameterNames);
    [ExtensionAttribute]
public static Uri GenerateActionLink(ResourceContext resourceContext, IEdmOperation action);
    [ExtensionAttribute]
internal static Uri GenerateActionLink(ResourceContext resourceContext, IEdmTypeReference bindingParameterType, IEdmOperation action);
    [ExtensionAttribute]
internal static Uri GenerateActionLink(ResourceContext resourceContext, string bindingParameterType, string actionName);
    [ExtensionAttribute]
public static Uri GenerateFunctionLink(ResourceContext resourceContext, IEdmOperation function);
    [ExtensionAttribute]
internal static Uri GenerateFunctionLink(ResourceContext resourceContext, IEdmTypeReference bindingParameterType, IEdmOperation function, IEnumerable`1<string> parameterNames);
    [ExtensionAttribute]
internal static Uri GenerateFunctionLink(ResourceContext resourceContext, string bindingParameterType, string functionName, IEnumerable`1<string> parameterNames);
    [ExtensionAttribute]
internal static IList`1<ODataPathSegment> GenerateBaseODataPathSegments(ResourceContext resourceContext);
    private static void GenerateBaseODataPathSegments(ODataPath path, IEdmNavigationSource navigationSource, IList`1<ODataPathSegment> odataPath);
    [ExtensionAttribute]
private static void GenerateBaseODataPathSegmentsForEntity(ResourceContext resourceContext, IList`1<ODataPathSegment> odataPath);
    [ExtensionAttribute]
private static void GenerateBaseODataPathSegmentsForFeed(ResourceSetContext feedContext, IList`1<ODataPathSegment> odataPath);
    [ExtensionAttribute]
private static IList`1<ODataPathSegment> GenerateContainmentODataPathSegments(ResourceContext resourceContext);
    [ExtensionAttribute]
private static IEdmSchemaType FindBindingType(IEdmModel model, string bindingParameterType);
}
public class Microsoft.AspNet.OData.Builder.LowerCamelCaser : object {
    private NameResolverOptions _options;
    public LowerCamelCaser(NameResolverOptions options);
    public void ApplyLowerCamelCase(ODataConventionModelBuilder builder);
    public virtual string ToLowerCamelCase(string name);
    private bool ShouldApplyLowerCamelCase(PropertyConfiguration property);
}
[AttributeUsageAttribute("4")]
public class Microsoft.AspNet.OData.Builder.MediaTypeAttribute : Attribute {
}
[FlagsAttribute]
public enum Microsoft.AspNet.OData.Builder.NameResolverOptions : Enum {
    public int value__;
    public static NameResolverOptions ProcessReflectedPropertyNames;
    public static NameResolverOptions ProcessDataMemberAttributePropertyNames;
    public static NameResolverOptions ProcessExplicitPropertyNames;
}
public class Microsoft.AspNet.OData.Builder.NavigationLinkBuilder : object {
    [CompilerGeneratedAttribute]
private Func`3<ResourceContext, IEdmNavigationProperty, Uri> <Factory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FollowsConventions>k__BackingField;
    public Func`3<ResourceContext, IEdmNavigationProperty, Uri> Factory { get; private set; }
    public bool FollowsConventions { get; private set; }
    public NavigationLinkBuilder(Func`3<ResourceContext, IEdmNavigationProperty, Uri> navigationLinkFactory, bool followsConventions);
    [CompilerGeneratedAttribute]
public Func`3<ResourceContext, IEdmNavigationProperty, Uri> get_Factory();
    [CompilerGeneratedAttribute]
private void set_Factory(Func`3<ResourceContext, IEdmNavigationProperty, Uri> value);
    [CompilerGeneratedAttribute]
public bool get_FollowsConventions();
    [CompilerGeneratedAttribute]
private void set_FollowsConventions(bool value);
}
public class Microsoft.AspNet.OData.Builder.NavigationPropertyBindingConfiguration : object {
    [CompilerGeneratedAttribute]
private NavigationPropertyConfiguration <NavigationProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationSourceConfiguration <TargetNavigationSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<MemberInfo> <Path>k__BackingField;
    public NavigationPropertyConfiguration NavigationProperty { get; private set; }
    public NavigationSourceConfiguration TargetNavigationSource { get; private set; }
    public IList`1<MemberInfo> Path { get; private set; }
    public string BindingPath { get; }
    public NavigationPropertyBindingConfiguration(NavigationPropertyConfiguration navigationProperty, NavigationSourceConfiguration navigationSource);
    public NavigationPropertyBindingConfiguration(NavigationPropertyConfiguration navigationProperty, NavigationSourceConfiguration navigationSource, IList`1<MemberInfo> path);
    [CompilerGeneratedAttribute]
public NavigationPropertyConfiguration get_NavigationProperty();
    [CompilerGeneratedAttribute]
private void set_NavigationProperty(NavigationPropertyConfiguration value);
    [CompilerGeneratedAttribute]
public NavigationSourceConfiguration get_TargetNavigationSource();
    [CompilerGeneratedAttribute]
private void set_TargetNavigationSource(NavigationSourceConfiguration value);
    [CompilerGeneratedAttribute]
public IList`1<MemberInfo> get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(IList`1<MemberInfo> value);
    public string get_BindingPath();
}
public enum Microsoft.AspNet.OData.Builder.NavigationPropertyBindingOption : Enum {
    public int value__;
    public static NavigationPropertyBindingOption None;
    public static NavigationPropertyBindingOption Auto;
}
public class Microsoft.AspNet.OData.Builder.NavigationPropertyConfiguration : PropertyConfiguration {
    private Type _relatedType;
    private IDictionary`2<PropertyInfo, PropertyInfo> _referentialConstraint;
    [CompilerGeneratedAttribute]
private NavigationPropertyConfiguration <Partner>k__BackingField;
    [CompilerGeneratedAttribute]
private EdmMultiplicity <Multiplicity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainsTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private EdmOnDeleteAction <OnDeleteAction>k__BackingField;
    public NavigationPropertyConfiguration Partner { get; internal set; }
    public EdmMultiplicity Multiplicity { get; private set; }
    public bool ContainsTarget { get; private set; }
    public Type RelatedClrType { get; }
    public PropertyKind Kind { get; }
    public EdmOnDeleteAction OnDeleteAction { get; public set; }
    public IEnumerable`1<PropertyInfo> DependentProperties { get; }
    public IEnumerable`1<PropertyInfo> PrincipalProperties { get; }
    public NavigationPropertyConfiguration(PropertyInfo property, EdmMultiplicity multiplicity, StructuralTypeConfiguration declaringType);
    [CompilerGeneratedAttribute]
public NavigationPropertyConfiguration get_Partner();
    [CompilerGeneratedAttribute]
internal void set_Partner(NavigationPropertyConfiguration value);
    [CompilerGeneratedAttribute]
public EdmMultiplicity get_Multiplicity();
    [CompilerGeneratedAttribute]
private void set_Multiplicity(EdmMultiplicity value);
    [CompilerGeneratedAttribute]
public bool get_ContainsTarget();
    [CompilerGeneratedAttribute]
private void set_ContainsTarget(bool value);
    public virtual Type get_RelatedClrType();
    public virtual PropertyKind get_Kind();
    [CompilerGeneratedAttribute]
public EdmOnDeleteAction get_OnDeleteAction();
    [CompilerGeneratedAttribute]
public void set_OnDeleteAction(EdmOnDeleteAction value);
    public IEnumerable`1<PropertyInfo> get_DependentProperties();
    public IEnumerable`1<PropertyInfo> get_PrincipalProperties();
    public NavigationPropertyConfiguration HasDerivedTypeConstraints(Type[] subtypes);
    public NavigationPropertyConfiguration HasDerivedTypeConstraint();
    public NavigationPropertyConfiguration Optional();
    public NavigationPropertyConfiguration Required();
    public NavigationPropertyConfiguration Contained();
    public NavigationPropertyConfiguration NonContained();
    public NavigationPropertyConfiguration AutomaticallyExpand(bool disableWhenSelectIsPresent);
    public NavigationPropertyConfiguration CascadeOnDelete();
    public NavigationPropertyConfiguration CascadeOnDelete(bool cascade);
    public NavigationPropertyConfiguration HasConstraint(PropertyInfo dependentPropertyInfo, PropertyInfo principalPropertyInfo);
    public NavigationPropertyConfiguration HasConstraint(KeyValuePair`2<PropertyInfo, PropertyInfo> constraint);
    private bool ValidateConstraint(KeyValuePair`2<PropertyInfo, PropertyInfo> constraint);
    [CompilerGeneratedAttribute]
private bool <HasConstraint>b__37_0(EntityTypeConfiguration e);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.OData.Builder.NavigationPropertyExtensions : object {
    [ExtensionAttribute]
public static void FindAllNavigationProperties(ODataModelBuilder builder, StructuralTypeConfiguration configuration, IList`1<Tuple`3<StructuralTypeConfiguration, IList`1<MemberInfo>, NavigationPropertyConfiguration>> navigations, Stack`1<MemberInfo> path);
    [ExtensionAttribute]
private static void FindAllNavigationPropertiesRecursive(ODataModelBuilder builder, StructuralTypeConfiguration configuration, IList`1<Tuple`3<StructuralTypeConfiguration, IList`1<MemberInfo>, NavigationPropertyConfiguration>> navigations, Stack`1<MemberInfo> path, HashSet`1<Type> typesAlreadyProcessed);
    [ExtensionAttribute]
private static void FindNavigationProperties(ODataModelBuilder builder, StructuralTypeConfiguration configuration, IList`1<Tuple`3<StructuralTypeConfiguration, IList`1<MemberInfo>, NavigationPropertyConfiguration>> navs, Stack`1<MemberInfo> path, HashSet`1<Type> typesAlreadyProcessed);
}
internal class Microsoft.AspNet.OData.Builder.NavigationSourceAndAnnotations : object {
    [CompilerGeneratedAttribute]
private EdmNavigationSource <NavigationSource>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationSourceConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationSourceLinkBuilderAnnotation <LinkBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationSourceUrlAnnotation <Url>k__BackingField;
    public EdmNavigationSource NavigationSource { get; public set; }
    public NavigationSourceConfiguration Configuration { get; public set; }
    public NavigationSourceLinkBuilderAnnotation LinkBuilder { get; public set; }
    public NavigationSourceUrlAnnotation Url { get; public set; }
    [CompilerGeneratedAttribute]
public EdmNavigationSource get_NavigationSource();
    [CompilerGeneratedAttribute]
public void set_NavigationSource(EdmNavigationSource value);
    [CompilerGeneratedAttribute]
public NavigationSourceConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(NavigationSourceConfiguration value);
    [CompilerGeneratedAttribute]
public NavigationSourceLinkBuilderAnnotation get_LinkBuilder();
    [CompilerGeneratedAttribute]
public void set_LinkBuilder(NavigationSourceLinkBuilderAnnotation value);
    [CompilerGeneratedAttribute]
public NavigationSourceUrlAnnotation get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(NavigationSourceUrlAnnotation value);
}
public abstract class Microsoft.AspNet.OData.Builder.NavigationSourceConfiguration : object {
    private ODataModelBuilder _modelBuilder;
    private string _url;
    private SelfLinkBuilder`1<Uri> _editLinkBuilder;
    private SelfLinkBuilder`1<Uri> _readLinkBuilder;
    private SelfLinkBuilder`1<Uri> _idLinkBuilder;
    private Dictionary`2<NavigationPropertyConfiguration, Dictionary`2<string, NavigationPropertyBindingConfiguration>> _navigationPropertyBindings;
    private Dictionary`2<NavigationPropertyConfiguration, NavigationLinkBuilder> _navigationPropertyLinkBuilders;
    [CompilerGeneratedAttribute]
private EntityTypeConfiguration <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private DerivedTypeConstraintConfiguration <DerivedTypeConstraints>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public IEnumerable`1<NavigationPropertyBindingConfiguration> Bindings { get; }
    public EntityTypeConfiguration EntityType { get; private set; }
    public Type ClrType { get; private set; }
    public DerivedTypeConstraintConfiguration DerivedTypeConstraints { get; private set; }
    public string Name { get; private set; }
    protected NavigationSourceConfiguration(ODataModelBuilder modelBuilder, Type entityClrType, string name);
    protected NavigationSourceConfiguration(ODataModelBuilder modelBuilder, EntityTypeConfiguration entityType, string name);
    public IEnumerable`1<NavigationPropertyBindingConfiguration> get_Bindings();
    [CompilerGeneratedAttribute]
public virtual EntityTypeConfiguration get_EntityType();
    [CompilerGeneratedAttribute]
private void set_EntityType(EntityTypeConfiguration value);
    [CompilerGeneratedAttribute]
public Type get_ClrType();
    [CompilerGeneratedAttribute]
private void set_ClrType(Type value);
    [CompilerGeneratedAttribute]
public DerivedTypeConstraintConfiguration get_DerivedTypeConstraints();
    [CompilerGeneratedAttribute]
private void set_DerivedTypeConstraints(DerivedTypeConstraintConfiguration value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public virtual NavigationSourceConfiguration HasUrl(string url);
    public virtual NavigationSourceConfiguration HasEditLink(SelfLinkBuilder`1<Uri> editLinkBuilder);
    public virtual NavigationSourceConfiguration HasReadLink(SelfLinkBuilder`1<Uri> readLinkBuilder);
    public virtual NavigationSourceConfiguration HasIdLink(SelfLinkBuilder`1<Uri> idLinkBuilder);
    public virtual NavigationSourceConfiguration HasNavigationPropertyLink(NavigationPropertyConfiguration navigationProperty, NavigationLinkBuilder navigationLinkBuilder);
    public virtual NavigationSourceConfiguration HasNavigationPropertiesLink(IEnumerable`1<NavigationPropertyConfiguration> navigationProperties, NavigationLinkBuilder navigationLinkBuilder);
    public virtual NavigationPropertyBindingConfiguration AddBinding(NavigationPropertyConfiguration navigationConfiguration, NavigationSourceConfiguration targetNavigationSource);
    public virtual NavigationPropertyBindingConfiguration AddBinding(NavigationPropertyConfiguration navigationConfiguration, NavigationSourceConfiguration targetNavigationSource, IList`1<MemberInfo> bindingPath);
    public virtual void RemoveBinding(NavigationPropertyConfiguration navigationConfiguration);
    public virtual void RemoveBinding(NavigationPropertyConfiguration navigationConfiguration, string bindingPath);
    public virtual IEnumerable`1<NavigationPropertyBindingConfiguration> FindBinding(NavigationPropertyConfiguration navigationConfiguration);
    public virtual NavigationPropertyBindingConfiguration FindBinding(NavigationPropertyConfiguration navigationConfiguration, IList`1<MemberInfo> bindingPath);
    public virtual IEnumerable`1<NavigationPropertyBindingConfiguration> FindBindings(string propertyName);
    public virtual string GetUrl();
    public virtual SelfLinkBuilder`1<Uri> GetEditLink();
    public virtual SelfLinkBuilder`1<Uri> GetReadLink();
    public virtual SelfLinkBuilder`1<Uri> GetIdLink();
    public virtual NavigationLinkBuilder GetNavigationPropertyLink(NavigationPropertyConfiguration navigationProperty);
    private void VerifyBindingPath(NavigationPropertyConfiguration navigationConfiguration, IList`1<MemberInfo> bindingPath);
    private static Type VerifyBindingSegment(Type current, MemberInfo info);
}
public abstract class Microsoft.AspNet.OData.Builder.NavigationSourceConfiguration`1 : object {
    private NavigationSourceConfiguration _configuration;
    private EntityTypeConfiguration`1<TEntityType> _entityType;
    private ODataModelBuilder _modelBuilder;
    private BindingPathConfiguration`1<TEntityType> _binding;
    public EntityTypeConfiguration`1<TEntityType> EntityType { get; }
    internal NavigationSourceConfiguration Configuration { get; }
    public BindingPathConfiguration`1<TEntityType> Binding { get; }
    internal NavigationSourceConfiguration`1(ODataModelBuilder modelBuilder, NavigationSourceConfiguration configuration);
    public EntityTypeConfiguration`1<TEntityType> get_EntityType();
    internal NavigationSourceConfiguration get_Configuration();
    public BindingPathConfiguration`1<TEntityType> get_Binding();
    public NavigationPropertyBindingConfiguration HasManyBinding(Expression`1<Func`2<TDerivedEntityType, IEnumerable`1<TTargetType>>> navigationExpression, string entitySetName);
    public NavigationPropertyBindingConfiguration HasManyBinding(Expression`1<Func`2<TEntityType, IEnumerable`1<TTargetType>>> navigationExpression, string entitySetName);
    public NavigationPropertyBindingConfiguration HasManyBinding(Expression`1<Func`2<TEntityType, IEnumerable`1<TTargetType>>> navigationExpression, NavigationSourceConfiguration`1<TTargetType> targetEntitySet);
    public NavigationPropertyBindingConfiguration HasManyBinding(Expression`1<Func`2<TDerivedEntityType, IEnumerable`1<TTargetType>>> navigationExpression, NavigationSourceConfiguration`1<TTargetType> targetEntitySet);
    public NavigationPropertyBindingConfiguration HasRequiredBinding(Expression`1<Func`2<TEntityType, TTargetType>> navigationExpression, string entitySetName);
    public NavigationPropertyBindingConfiguration HasRequiredBinding(Expression`1<Func`2<TDerivedEntityType, TTargetType>> navigationExpression, string entitySetName);
    public NavigationPropertyBindingConfiguration HasRequiredBinding(Expression`1<Func`2<TEntityType, TTargetType>> navigationExpression, NavigationSourceConfiguration`1<TTargetType> targetEntitySet);
    public NavigationPropertyBindingConfiguration HasRequiredBinding(Expression`1<Func`2<TDerivedEntityType, TTargetType>> navigationExpression, NavigationSourceConfiguration`1<TTargetType> targetEntitySet);
    public NavigationPropertyBindingConfiguration HasOptionalBinding(Expression`1<Func`2<TEntityType, TTargetType>> navigationExpression, string entitySetName);
    public NavigationPropertyBindingConfiguration HasOptionalBinding(Expression`1<Func`2<TDerivedEntityType, TTargetType>> navigationExpression, string entitySetName);
    public NavigationPropertyBindingConfiguration HasOptionalBinding(Expression`1<Func`2<TEntityType, TTargetType>> navigationExpression, NavigationSourceConfiguration`1<TTargetType> targetEntitySet);
    public NavigationPropertyBindingConfiguration HasOptionalBinding(Expression`1<Func`2<TDerivedEntityType, TTargetType>> navigationExpression, NavigationSourceConfiguration`1<TTargetType> targetEntitySet);
    public NavigationPropertyBindingConfiguration HasSingletonBinding(Expression`1<Func`2<TEntityType, TTargetType>> navigationExpression, string singletonName);
    public NavigationPropertyBindingConfiguration HasSingletonBinding(Expression`1<Func`2<TDerivedEntityType, TTargetType>> navigationExpression, string singletonName);
    public NavigationPropertyBindingConfiguration HasSingletonBinding(Expression`1<Func`2<TEntityType, TTargetType>> navigationExpression, NavigationSourceConfiguration`1<TTargetType> targetSingleton);
    public NavigationPropertyBindingConfiguration HasSingletonBinding(Expression`1<Func`2<TDerivedEntityType, TTargetType>> navigationExpression, NavigationSourceConfiguration`1<TTargetType> targetSingleton);
    public void HasEditLink(Func`2<ResourceContext`1<TEntityType>, Uri> editLinkFactory, bool followsConventions);
    public void HasReadLink(Func`2<ResourceContext`1<TEntityType>, Uri> readLinkFactory, bool followsConventions);
    public void HasIdLink(Func`2<ResourceContext`1<TEntityType>, Uri> idLinkFactory, bool followsConventions);
    public void HasNavigationPropertyLink(NavigationPropertyConfiguration navigationProperty, Func`3<ResourceContext`1<TEntityType>, IEdmNavigationProperty, Uri> navigationLinkFactory, bool followsConventions);
    public void HasNavigationPropertiesLink(IEnumerable`1<NavigationPropertyConfiguration> navigationProperties, Func`3<ResourceContext`1<TEntityType>, IEdmNavigationProperty, Uri> navigationLinkFactory, bool followsConventions);
    public IEnumerable`1<NavigationPropertyBindingConfiguration> FindBindings(string propertyName);
    public IEnumerable`1<NavigationPropertyBindingConfiguration> FindBinding(NavigationPropertyConfiguration navigationConfiguration);
    public NavigationPropertyBindingConfiguration FindBinding(NavigationPropertyConfiguration navigationConfiguration, IList`1<MemberInfo> bindingPath);
    private static ResourceContext`1<TEntityType> UpCastEntityContext(ResourceContext context);
}
public class Microsoft.AspNet.OData.Builder.NavigationSourceLinkBuilderAnnotation : object {
    private SelfLinkBuilder`1<Uri> _idLinkBuilder;
    private SelfLinkBuilder`1<Uri> _editLinkBuilder;
    private SelfLinkBuilder`1<Uri> _readLinkBuilder;
    private Dictionary`2<IEdmNavigationProperty, NavigationLinkBuilder> _navigationPropertyLinkBuilderLookup;
    public NavigationSourceLinkBuilderAnnotation(IEdmNavigationSource navigationSource, IEdmModel model);
    public NavigationSourceLinkBuilderAnnotation(IEdmNavigationSource navigationSource, SelfLinkBuilder`1<Uri> idLinkBuilder, SelfLinkBuilder`1<Uri> editLinkBuilder, SelfLinkBuilder`1<Uri> readLinkBuilder);
    public NavigationSourceLinkBuilderAnnotation(NavigationSourceConfiguration navigationSource);
    public void AddNavigationPropertyLinkBuilder(IEdmNavigationProperty navigationProperty, NavigationLinkBuilder linkBuilder);
    public virtual EntitySelfLinks BuildEntitySelfLinks(ResourceContext instanceContext, ODataMetadataLevel metadataLevel);
    public virtual Uri BuildIdLink(ResourceContext instanceContext, ODataMetadataLevel metadataLevel);
    internal Uri BuildIdLink(ResourceContext instanceContext);
    public virtual Uri BuildEditLink(ResourceContext instanceContext, ODataMetadataLevel metadataLevel, Uri idLink);
    internal Uri BuildEditLink(ResourceContext instanceContext);
    public virtual Uri BuildReadLink(ResourceContext instanceContext, ODataMetadataLevel metadataLevel, Uri editLink);
    internal Uri BuildReadLink(ResourceContext instanceContext);
    public virtual Uri BuildNavigationLink(ResourceContext instanceContext, IEdmNavigationProperty navigationProperty, ODataMetadataLevel metadataLevel);
    internal Uri BuildNavigationLink(ResourceContext instanceContext, IEdmNavigationProperty navigationProperty);
}
internal class Microsoft.AspNet.OData.Builder.NavigationSourceUrlAnnotation : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Url { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
public class Microsoft.AspNet.OData.Builder.NonbindingParameterConfiguration : ParameterConfiguration {
    public NonbindingParameterConfiguration(string name, IEdmTypeConfiguration parameterType);
}
internal class Microsoft.AspNet.OData.Builder.NullableEnumTypeConfiguration : object {
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private EdmTypeKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataModelBuilder <ModelBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private EnumTypeConfiguration <EnumTypeConfiguration>k__BackingField;
    public Type ClrType { get; private set; }
    public string FullName { get; private set; }
    public string Namespace { get; private set; }
    public string Name { get; private set; }
    public EdmTypeKind Kind { get; private set; }
    public ODataModelBuilder ModelBuilder { get; private set; }
    internal EnumTypeConfiguration EnumTypeConfiguration { get; private set; }
    internal NullableEnumTypeConfiguration(EnumTypeConfiguration enumTypeConfiguration);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
private void set_ClrType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FullName();
    [CompilerGeneratedAttribute]
private void set_FullName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Namespace();
    [CompilerGeneratedAttribute]
private void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual EdmTypeKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(EdmTypeKind value);
    [CompilerGeneratedAttribute]
public sealed virtual ODataModelBuilder get_ModelBuilder();
    [CompilerGeneratedAttribute]
private void set_ModelBuilder(ODataModelBuilder value);
    [CompilerGeneratedAttribute]
internal EnumTypeConfiguration get_EnumTypeConfiguration();
    [CompilerGeneratedAttribute]
private void set_EnumTypeConfiguration(EnumTypeConfiguration value);
}
public class Microsoft.AspNet.OData.Builder.ODataConventionModelBuilder : ODataModelBuilder {
    private static List`1<IConvention> _conventions;
    private HashSet`1<StructuralTypeConfiguration> _mappedTypes;
    private HashSet`1<NavigationSourceConfiguration> _configuredNavigationSources;
    private HashSet`1<Type> _ignoredTypes;
    private IEnumerable`1<StructuralTypeConfiguration> _explicitlyAddedTypes;
    private bool _isModelBeingBuilt;
    private bool _isQueryCompositionMode;
    private Lazy`1<IDictionary`2<Type, Type[]>> _allTypesWithDerivedTypeMapping;
    [CompilerGeneratedAttribute]
private bool <ModelAliasingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<ODataConventionModelBuilder> <OnModelCreating>k__BackingField;
    public bool ModelAliasingEnabled { get; public set; }
    public Action`1<ODataConventionModelBuilder> OnModelCreating { get; public set; }
    public ODataConventionModelBuilder(HttpConfiguration configuration);
    public ODataConventionModelBuilder(HttpConfiguration configuration, bool isQueryCompositionMode);
    internal ODataConventionModelBuilder(IWebApiAssembliesResolver resolver);
    internal ODataConventionModelBuilder(IWebApiAssembliesResolver resolver, bool isQueryCompositionMode);
    private static ODataConventionModelBuilder();
    [CompilerGeneratedAttribute]
public bool get_ModelAliasingEnabled();
    [CompilerGeneratedAttribute]
public void set_ModelAliasingEnabled(bool value);
    [CompilerGeneratedAttribute]
public Action`1<ODataConventionModelBuilder> get_OnModelCreating();
    [CompilerGeneratedAttribute]
public void set_OnModelCreating(Action`1<ODataConventionModelBuilder> value);
    internal void Initialize(IWebApiAssembliesResolver assembliesResolver, bool isQueryCompositionMode);
    public ODataConventionModelBuilder Ignore();
    public ODataConventionModelBuilder Ignore(Type[] types);
    public virtual EntityTypeConfiguration AddEntityType(Type type);
    public virtual ComplexTypeConfiguration AddComplexType(Type type);
    public virtual EntitySetConfiguration AddEntitySet(string name, EntityTypeConfiguration entityType);
    public virtual SingletonConfiguration AddSingleton(string name, EntityTypeConfiguration entityType);
    public virtual EnumTypeConfiguration AddEnumType(Type type);
    public virtual IEdmModel GetEdmModel();
    internal bool IsIgnoredType(Type type);
    internal void DiscoverInheritanceRelationships();
    internal void RemoveBaseTypeProperties(StructuralTypeConfiguration derivedStructrualType, StructuralTypeConfiguration baseStructuralType);
    private void RediscoverComplexTypes();
    private void ReconfigureEntityTypesAsComplexType(EntityTypeConfiguration[] misconfiguredEntityTypes);
    private void MapTypes();
    private void ApplyForeignKeyConventions();
    private void MapType(StructuralTypeConfiguration edmType);
    private void MapStructuralType(StructuralTypeConfiguration structuralType);
    internal void MapDerivedTypes(StructuralTypeConfiguration structuralType);
    private void MapStructuralProperty(StructuralTypeConfiguration type, PropertyInfo property, PropertyKind propertyKind, bool isCollection);
    private PropertyKind GetPropertyType(PropertyInfo property, Boolean& isCollection, IEdmTypeConfiguration& mappedType, Boolean& mapped);
    private bool TryGetPropertyTypeKind(Type propertyType, IEdmTypeConfiguration& mappedType, PropertyKind& propertyKind);
    internal void ReconfigInferedEntityTypeAsComplexType(Type propertyType);
    internal bool InferEdmTypeFromDerivedTypes(Type propertyType, PropertyKind& propertyKind);
    private void PruneUnreachableTypes();
    private void ApplyTypeAndPropertyConventions(StructuralTypeConfiguration edmTypeConfiguration);
    private void ApplyEnumTypeConventions(EnumTypeConfiguration enumTypeConfiguration);
    private void ApplyNavigationSourceConventions(NavigationSourceConfiguration navigationSourceConfiguration);
    private void ApplyOperationConventions(OperationConfiguration operation);
    private IEdmTypeConfiguration GetStructuralTypeOrNull(Type clrType);
    private void ApplyPropertyConvention(IEdmPropertyConvention propertyConvention, StructuralTypeConfiguration edmTypeConfiguration);
    private void ReapplyPropertyConvention(PropertyConfiguration property, StructuralTypeConfiguration edmTypeConfiguration);
    private static Dictionary`2<Type, Type[]> BuildDerivedTypesMapping(IWebApiAssembliesResolver assemblyResolver);
    public virtual void ValidateModel(IEdmModel model);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.AspNet.OData.Builder.ODataConventionModelBuilderExtensions : object {
    [ExtensionAttribute]
public static ODataConventionModelBuilder EnableLowerCamelCase(ODataConventionModelBuilder builder);
    [ExtensionAttribute]
public static ODataConventionModelBuilder EnableLowerCamelCase(ODataConventionModelBuilder builder, NameResolverOptions options);
}
public class Microsoft.AspNet.OData.Builder.ODataInstanceAnnotationContainer : object {
    private IDictionary`2<string, IDictionary`2<string, object>> instanceAnnotations;
    public sealed virtual void AddResourceAnnotation(string annotationName, object value);
    public sealed virtual void AddPropertyAnnotation(string propertyName, string annotationName, object value);
    public sealed virtual object GetResourceAnnotation(string annotationName);
    public sealed virtual object GetPropertyAnnotation(string propertyName, string annotationName);
    public sealed virtual IDictionary`2<string, object> GetResourceAnnotations();
    public sealed virtual IDictionary`2<string, object> GetPropertyAnnotations(string propertyName);
    private void SetInstanceAnnotation(string propertyName, string annotationName, object value);
    private object GetInstanceAnnotation(string propertyName, string annotationName);
    private IDictionary`2<string, object> GetAllInstanceAnnotations(string propertyName);
    private static void ValidateInstanceAnnotation(string annotationName);
}
internal class Microsoft.AspNet.OData.Builder.ODataInstanceAnnotationContainerAnnotation : object {
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    public PropertyInfo PropertyInfo { get; }
    public ODataInstanceAnnotationContainerAnnotation(PropertyInfo propertyInfo);
    [CompilerGeneratedAttribute]
public PropertyInfo get_PropertyInfo();
}
public class Microsoft.AspNet.OData.Builder.ODataModelBuilder : object {
    private static string DefaultNamespace;
    private static Version _defaultDataServiceVersion;
    private static Version _defaultMaxDataServiceVersion;
    private Dictionary`2<Type, EnumTypeConfiguration> _enumTypes;
    private Dictionary`2<Type, StructuralTypeConfiguration> _structuralTypes;
    private Dictionary`2<string, NavigationSourceConfiguration> _navigationSources;
    private Dictionary`2<Type, PrimitiveTypeConfiguration> _primitiveTypes;
    private List`1<OperationConfiguration> _operations;
    private Version _dataServiceVersion;
    private Version _maxDataServiceVersion;
    private string _namespace;
    [CompilerGeneratedAttribute]
private string <ContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationPropertyBindingOption <BindingOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasAssignedNamespace>k__BackingField;
    public string Namespace { get; public set; }
    public string ContainerName { get; public set; }
    public Version DataServiceVersion { get; public set; }
    public Version MaxDataServiceVersion { get; public set; }
    public IEnumerable`1<EntitySetConfiguration> EntitySets { get; }
    public IEnumerable`1<StructuralTypeConfiguration> StructuralTypes { get; }
    public IEnumerable`1<EnumTypeConfiguration> EnumTypes { get; }
    public IEnumerable`1<SingletonConfiguration> Singletons { get; }
    public IEnumerable`1<NavigationSourceConfiguration> NavigationSources { get; }
    public IEnumerable`1<OperationConfiguration> Operations { get; }
    public NavigationPropertyBindingOption BindingOptions { get; public set; }
    internal bool HasAssignedNamespace { get; private set; }
    private static ODataModelBuilder();
    public string get_Namespace();
    public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_ContainerName();
    [CompilerGeneratedAttribute]
public void set_ContainerName(string value);
    public Version get_DataServiceVersion();
    public void set_DataServiceVersion(Version value);
    public Version get_MaxDataServiceVersion();
    public void set_MaxDataServiceVersion(Version value);
    public virtual IEnumerable`1<EntitySetConfiguration> get_EntitySets();
    public virtual IEnumerable`1<StructuralTypeConfiguration> get_StructuralTypes();
    public virtual IEnumerable`1<EnumTypeConfiguration> get_EnumTypes();
    public virtual IEnumerable`1<SingletonConfiguration> get_Singletons();
    public virtual IEnumerable`1<NavigationSourceConfiguration> get_NavigationSources();
    public virtual IEnumerable`1<OperationConfiguration> get_Operations();
    [CompilerGeneratedAttribute]
public NavigationPropertyBindingOption get_BindingOptions();
    [CompilerGeneratedAttribute]
public void set_BindingOptions(NavigationPropertyBindingOption value);
    [CompilerGeneratedAttribute]
internal bool get_HasAssignedNamespace();
    [CompilerGeneratedAttribute]
private void set_HasAssignedNamespace(bool value);
    public EntityTypeConfiguration`1<TEntityType> EntityType();
    public ComplexTypeConfiguration`1<TComplexType> ComplexType();
    public EntitySetConfiguration`1<TEntityType> EntitySet(string name);
    public EnumTypeConfiguration`1<TEnumType> EnumType();
    public SingletonConfiguration`1<TEntityType> Singleton(string name);
    public virtual ActionConfiguration Action(string name);
    public virtual FunctionConfiguration Function(string name);
    public virtual EntityTypeConfiguration AddEntityType(Type type);
    public virtual ComplexTypeConfiguration AddComplexType(Type type);
    public virtual EnumTypeConfiguration AddEnumType(Type type);
    public virtual void AddOperation(OperationConfiguration operation);
    public virtual EntitySetConfiguration AddEntitySet(string name, EntityTypeConfiguration entityType);
    public virtual SingletonConfiguration AddSingleton(string name, EntityTypeConfiguration entityType);
    public virtual bool RemoveStructuralType(Type type);
    public virtual bool RemoveEnumType(Type type);
    public virtual bool RemoveEntitySet(string name);
    public virtual bool RemoveSingleton(string name);
    public virtual bool RemoveOperation(string name);
    public virtual bool RemoveOperation(OperationConfiguration operation);
    public IEdmTypeConfiguration GetTypeConfigurationOrNull(Type type);
    public virtual IEdmModel GetEdmModel();
    public virtual void ValidateModel(IEdmModel model);
}
public abstract class Microsoft.AspNet.OData.Builder.OperationConfiguration : object {
    private List`1<ParameterConfiguration> _parameters;
    private BindingParameterConfiguration _bindingParameter;
    private string _namespace;
    private IEdmTypeConfiguration _returnType;
    [CompilerGeneratedAttribute]
private OperationLinkBuilder <OperationLinkBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FollowsConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsComposable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReturnNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationSourceConfiguration <NavigationSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <EntitySetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private DerivedTypeConstraintConfiguration <ReturnTypeConstraints>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataModelBuilder <ModelBuilder>k__BackingField;
    protected OperationLinkBuilder OperationLinkBuilder { get; protected set; }
    public bool FollowsConventions { get; protected set; }
    public string Name { get; protected set; }
    public string Title { get; public set; }
    public OperationKind Kind { get; }
    public bool IsComposable { get; internal set; }
    public bool IsSideEffecting { get; }
    public string FullyQualifiedName { get; }
    public string Namespace { get; public set; }
    public IEdmTypeConfiguration ReturnType { get; public set; }
    public bool ReturnNullable { get; public set; }
    public NavigationSourceConfiguration NavigationSource { get; public set; }
    public IEnumerable`1<string> EntitySetPath { get; internal set; }
    public BindingParameterConfiguration BindingParameter { get; }
    public IEnumerable`1<ParameterConfiguration> Parameters { get; }
    public bool IsBindable { get; }
    public DerivedTypeConstraintConfiguration ReturnTypeConstraints { get; protected set; }
    protected ODataModelBuilder ModelBuilder { get; protected set; }
    internal OperationConfiguration(ODataModelBuilder builder, string name);
    [CompilerGeneratedAttribute]
protected OperationLinkBuilder get_OperationLinkBuilder();
    [CompilerGeneratedAttribute]
protected void set_OperationLinkBuilder(OperationLinkBuilder value);
    [CompilerGeneratedAttribute]
public bool get_FollowsConventions();
    [CompilerGeneratedAttribute]
protected void set_FollowsConventions(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    public abstract virtual OperationKind get_Kind();
    [CompilerGeneratedAttribute]
public virtual bool get_IsComposable();
    [CompilerGeneratedAttribute]
internal virtual void set_IsComposable(bool value);
    public abstract virtual bool get_IsSideEffecting();
    public string get_FullyQualifiedName();
    public string get_Namespace();
    public void set_Namespace(string value);
    public IEdmTypeConfiguration get_ReturnType();
    public void set_ReturnType(IEdmTypeConfiguration value);
    [CompilerGeneratedAttribute]
public bool get_ReturnNullable();
    [CompilerGeneratedAttribute]
public void set_ReturnNullable(bool value);
    [CompilerGeneratedAttribute]
public NavigationSourceConfiguration get_NavigationSource();
    [CompilerGeneratedAttribute]
public void set_NavigationSource(NavigationSourceConfiguration value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_EntitySetPath();
    [CompilerGeneratedAttribute]
internal void set_EntitySetPath(IEnumerable`1<string> value);
    public virtual BindingParameterConfiguration get_BindingParameter();
    [IteratorStateMachineAttribute("Microsoft.AspNet.OData.Builder.OperationConfiguration/<get_Parameters>d__52")]
public virtual IEnumerable`1<ParameterConfiguration> get_Parameters();
    public virtual bool get_IsBindable();
    [CompilerGeneratedAttribute]
public DerivedTypeConstraintConfiguration get_ReturnTypeConstraints();
    [CompilerGeneratedAttribute]
protected void set_ReturnTypeConstraints(DerivedTypeConstraintConfiguration value);
    internal void ReturnsFromEntitySetImplementation(string entitySetName);
    internal void ReturnsCollectionFromEntitySetImplementation(string entitySetName);
    internal void ReturnsEntityViaEntitySetPathImplementation(IEnumerable`1<string> entitySetPath);
    internal void ReturnsCollectionViaEntitySetPathImplementation(IEnumerable`1<string> entitySetPath);
    internal void ReturnsImplementation(Type clrReturnType);
    internal void ReturnsCollectionImplementation();
    internal void SetBindingParameterImplementation(string name, IEdmTypeConfiguration bindingParameterType);
    public ParameterConfiguration AddParameter(string name, IEdmTypeConfiguration parameterType);
    public ParameterConfiguration Parameter(Type clrParameterType, string name);
    public ParameterConfiguration Parameter(string name);
    public ParameterConfiguration CollectionParameter(Type clrElementType, string name);
    public ParameterConfiguration CollectionParameter(string name);
    public ParameterConfiguration EntityParameter(Type clrEntityType, string name);
    public ParameterConfiguration EntityParameter(string name);
    public ParameterConfiguration CollectionEntityParameter(Type clrElementEntityType, string name);
    public ParameterConfiguration CollectionEntityParameter(string name);
    [CompilerGeneratedAttribute]
protected ODataModelBuilder get_ModelBuilder();
    [CompilerGeneratedAttribute]
protected void set_ModelBuilder(ODataModelBuilder value);
    private IEdmTypeConfiguration GetOperationTypeConfiguration(Type clrType);
}
public enum Microsoft.AspNet.OData.Builder.OperationKind : Enum {
    public int value__;
    public static OperationKind Action;
    public static OperationKind Function;
    public static OperationKind ServiceOperation;
}
public class Microsoft.AspNet.OData.Builder.OperationLinkBuilder : object {
    private Func`2<ResourceContext, Uri> _linkFactory;
    private Func`2<ResourceSetContext, Uri> _feedLinkFactory;
    [CompilerGeneratedAttribute]
private bool <FollowsConventions>k__BackingField;
    internal Func`2<ResourceContext, Uri> LinkFactory { get; }
    internal Func`2<ResourceSetContext, Uri> FeedLinkFactory { get; }
    public bool FollowsConventions { get; private set; }
    public OperationLinkBuilder(Func`2<ResourceContext, Uri> linkFactory, bool followsConventions);
    public OperationLinkBuilder(Func`2<ResourceSetContext, Uri> linkFactory, bool followsConventions);
    internal Func`2<ResourceContext, Uri> get_LinkFactory();
    internal Func`2<ResourceSetContext, Uri> get_FeedLinkFactory();
    [CompilerGeneratedAttribute]
public bool get_FollowsConventions();
    [CompilerGeneratedAttribute]
private void set_FollowsConventions(bool value);
    public virtual Uri BuildLink(ResourceContext context);
    public virtual Uri BuildLink(ResourceSetContext context);
}
internal class Microsoft.AspNet.OData.Builder.OperationTitleAnnotation : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public string Title { get; private set; }
    public OperationTitleAnnotation(string title);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
}
public abstract class Microsoft.AspNet.OData.Builder.ParameterConfiguration : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmTypeConfiguration <TypeConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Nullable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private DerivedTypeConstraintConfiguration <DerivedTypeConstraints>k__BackingField;
    public string Name { get; protected set; }
    public IEdmTypeConfiguration TypeConfiguration { get; protected set; }
    public bool Nullable { get; public set; }
    public bool IsOptional { get; protected set; }
    public string DefaultValue { get; protected set; }
    public DerivedTypeConstraintConfiguration DerivedTypeConstraints { get; private set; }
    protected ParameterConfiguration(string name, IEdmTypeConfiguration parameterType);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public IEdmTypeConfiguration get_TypeConfiguration();
    [CompilerGeneratedAttribute]
protected void set_TypeConfiguration(IEdmTypeConfiguration value);
    [CompilerGeneratedAttribute]
public bool get_Nullable();
    [CompilerGeneratedAttribute]
public void set_Nullable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
protected void set_IsOptional(bool value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
protected void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public DerivedTypeConstraintConfiguration get_DerivedTypeConstraints();
    [CompilerGeneratedAttribute]
private void set_DerivedTypeConstraints(DerivedTypeConstraintConfiguration value);
    public ParameterConfiguration HasDerivedTypeConstraints(Type[] subtypes);
    public ParameterConfiguration HasDerivedTypeConstraint();
    public ParameterConfiguration Optional();
    public ParameterConfiguration Required();
    public ParameterConfiguration HasDefaultValue(string defaultValue);
}
public class Microsoft.AspNet.OData.Builder.PrecisionPropertyConfiguration : PrimitivePropertyConfiguration {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Precision>k__BackingField;
    public Nullable`1<int> Precision { get; public set; }
    public PrecisionPropertyConfiguration(PropertyInfo property, StructuralTypeConfiguration declaringType);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Precision();
    [CompilerGeneratedAttribute]
public void set_Precision(Nullable`1<int> value);
}
public class Microsoft.AspNet.OData.Builder.PrimitivePropertyConfiguration : StructuralPropertyConfiguration {
    [CompilerGeneratedAttribute]
private string <DefaultValueString>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<EdmPrimitiveTypeKind> <TargetEdmTypeKind>k__BackingField;
    public string DefaultValueString { get; public set; }
    public PropertyKind Kind { get; }
    public Type RelatedClrType { get; }
    public Nullable`1<EdmPrimitiveTypeKind> TargetEdmTypeKind { get; internal set; }
    public PrimitivePropertyConfiguration(PropertyInfo property, StructuralTypeConfiguration declaringType);
    [CompilerGeneratedAttribute]
public string get_DefaultValueString();
    [CompilerGeneratedAttribute]
public void set_DefaultValueString(string value);
    public virtual PropertyKind get_Kind();
    public virtual Type get_RelatedClrType();
    [CompilerGeneratedAttribute]
public Nullable`1<EdmPrimitiveTypeKind> get_TargetEdmTypeKind();
    [CompilerGeneratedAttribute]
internal void set_TargetEdmTypeKind(Nullable`1<EdmPrimitiveTypeKind> value);
    public PrimitivePropertyConfiguration IsOptional();
    public PrimitivePropertyConfiguration IsRequired();
    public PrimitivePropertyConfiguration IsConcurrencyToken();
}
[ExtensionAttribute]
public static class Microsoft.AspNet.OData.Builder.PrimitivePropertyConfigurationExtensions : object {
    [ExtensionAttribute]
public static PrimitivePropertyConfiguration AsDate(PrimitivePropertyConfiguration property);
    [ExtensionAttribute]
public static PrimitivePropertyConfiguration AsTimeOfDay(PrimitivePropertyConfiguration property);
}
public class Microsoft.AspNet.OData.Builder.PrimitiveTypeConfiguration : object {
    private Type _clrType;
    private IEdmPrimitiveType _edmType;
    private ODataModelBuilder _builder;
    public Type ClrType { get; }
    public string FullName { get; }
    public string Namespace { get; }
    public string Name { get; }
    public EdmTypeKind Kind { get; }
    public ODataModelBuilder ModelBuilder { get; }
    public IEdmPrimitiveType EdmPrimitiveType { get; }
    public PrimitiveTypeConfiguration(ODataModelBuilder builder, IEdmPrimitiveType edmType, Type clrType);
    public sealed virtual Type get_ClrType();
    public sealed virtual string get_FullName();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_Name();
    public sealed virtual EdmTypeKind get_Kind();
    public sealed virtual ODataModelBuilder get_ModelBuilder();
    public IEdmPrimitiveType get_EdmPrimitiveType();
}
public abstract class Microsoft.AspNet.OData.Builder.PropertyConfiguration : object {
    private string _name;
    [CompilerGeneratedAttribute]
private StructuralTypeConfiguration <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private DerivedTypeConstraintConfiguration <DerivedTypeConstraints>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddedExplicitly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotFilterable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoExpand>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableAutoExpandWhenSelectIsPresent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotSortable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotNavigable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotExpandable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotCountable>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryConfiguration <QueryConfiguration>k__BackingField;
    public string Name { get; public set; }
    public StructuralTypeConfiguration DeclaringType { get; private set; }
    public PropertyInfo PropertyInfo { get; private set; }
    public Type RelatedClrType { get; }
    public DerivedTypeConstraintConfiguration DerivedTypeConstraints { get; private set; }
    public PropertyKind Kind { get; }
    public bool AddedExplicitly { get; public set; }
    public bool IsRestricted { get; }
    public bool NotFilterable { get; public set; }
    public bool AutoExpand { get; public set; }
    public bool DisableAutoExpandWhenSelectIsPresent { get; public set; }
    public bool NonFilterable { get; public set; }
    public bool NotSortable { get; public set; }
    public bool Unsortable { get; public set; }
    public bool NotNavigable { get; public set; }
    public bool NotExpandable { get; public set; }
    public bool NotCountable { get; public set; }
    public int Order { get; public set; }
    public QueryConfiguration QueryConfiguration { get; public set; }
    protected PropertyConfiguration(PropertyInfo property, StructuralTypeConfiguration declaringType);
    public string get_Name();
    public void set_Name(string value);
    [CompilerGeneratedAttribute]
public StructuralTypeConfiguration get_DeclaringType();
    [CompilerGeneratedAttribute]
private void set_DeclaringType(StructuralTypeConfiguration value);
    [CompilerGeneratedAttribute]
public PropertyInfo get_PropertyInfo();
    [CompilerGeneratedAttribute]
private void set_PropertyInfo(PropertyInfo value);
    public abstract virtual Type get_RelatedClrType();
    [CompilerGeneratedAttribute]
public DerivedTypeConstraintConfiguration get_DerivedTypeConstraints();
    [CompilerGeneratedAttribute]
private void set_DerivedTypeConstraints(DerivedTypeConstraintConfiguration value);
    public abstract virtual PropertyKind get_Kind();
    [CompilerGeneratedAttribute]
public bool get_AddedExplicitly();
    [CompilerGeneratedAttribute]
public void set_AddedExplicitly(bool value);
    public bool get_IsRestricted();
    [CompilerGeneratedAttribute]
public bool get_NotFilterable();
    [CompilerGeneratedAttribute]
public void set_NotFilterable(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoExpand();
    [CompilerGeneratedAttribute]
public void set_AutoExpand(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableAutoExpandWhenSelectIsPresent();
    [CompilerGeneratedAttribute]
public void set_DisableAutoExpandWhenSelectIsPresent(bool value);
    public bool get_NonFilterable();
    public void set_NonFilterable(bool value);
    [CompilerGeneratedAttribute]
public bool get_NotSortable();
    [CompilerGeneratedAttribute]
public void set_NotSortable(bool value);
    public bool get_Unsortable();
    public void set_Unsortable(bool value);
    [CompilerGeneratedAttribute]
public bool get_NotNavigable();
    [CompilerGeneratedAttribute]
public void set_NotNavigable(bool value);
    [CompilerGeneratedAttribute]
public bool get_NotExpandable();
    [CompilerGeneratedAttribute]
public void set_NotExpandable(bool value);
    [CompilerGeneratedAttribute]
public bool get_NotCountable();
    [CompilerGeneratedAttribute]
public void set_NotCountable(bool value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public QueryConfiguration get_QueryConfiguration();
    [CompilerGeneratedAttribute]
public void set_QueryConfiguration(QueryConfiguration value);
    public PropertyConfiguration IsNotFilterable();
    public PropertyConfiguration IsNonFilterable();
    public PropertyConfiguration IsFilterable();
    public PropertyConfiguration IsNotSortable();
    public PropertyConfiguration IsUnsortable();
    public PropertyConfiguration IsSortable();
    public PropertyConfiguration IsNotNavigable();
    public PropertyConfiguration IsNavigable();
    public PropertyConfiguration IsNotExpandable();
    public PropertyConfiguration IsExpandable();
    public PropertyConfiguration IsNotCountable();
    public PropertyConfiguration IsCountable();
    public PropertyConfiguration Count();
    public PropertyConfiguration Count(QueryOptionSetting queryOptionSetting);
    public PropertyConfiguration OrderBy(QueryOptionSetting setting, String[] properties);
    public PropertyConfiguration OrderBy(String[] properties);
    public PropertyConfiguration OrderBy(QueryOptionSetting setting);
    public PropertyConfiguration OrderBy();
    public PropertyConfiguration Filter(QueryOptionSetting setting, String[] properties);
    public PropertyConfiguration Filter(String[] properties);
    public PropertyConfiguration Filter(QueryOptionSetting setting);
    public PropertyConfiguration Filter();
    public PropertyConfiguration Select(SelectExpandType selectType, String[] properties);
    public PropertyConfiguration Select(String[] properties);
    public PropertyConfiguration Select(SelectExpandType selectType);
    public PropertyConfiguration Select();
    public PropertyConfiguration Page(Nullable`1<int> maxTopValue, Nullable`1<int> pageSizeValue);
    public PropertyConfiguration Page();
    public PropertyConfiguration Expand(int maxDepth, SelectExpandType expandType, String[] properties);
    public PropertyConfiguration Expand(String[] properties);
    public PropertyConfiguration Expand(int maxDepth, String[] properties);
    public PropertyConfiguration Expand(SelectExpandType expandType, String[] properties);
    public PropertyConfiguration Expand(SelectExpandType expandType, int maxDepth);
    public PropertyConfiguration Expand(int maxDepth);
    public PropertyConfiguration Expand(SelectExpandType expandType);
    public PropertyConfiguration Expand();
}
public enum Microsoft.AspNet.OData.Builder.PropertyKind : Enum {
    public int value__;
    public static PropertyKind Primitive;
    public static PropertyKind Complex;
    public static PropertyKind Collection;
    public static PropertyKind Navigation;
    public static PropertyKind Enum;
    public static PropertyKind Dynamic;
    public static PropertyKind InstanceAnnotations;
}
internal class Microsoft.AspNet.OData.Builder.PropertyPairSelectorVisitor : ExpressionVisitor {
    private IDictionary`2<PropertyInfo, PropertyInfo> _properties;
    public IDictionary`2<PropertyInfo, PropertyInfo> Properties { get; }
    public IDictionary`2<PropertyInfo, PropertyInfo> get_Properties();
    public static IDictionary`2<PropertyInfo, PropertyInfo> GetSelectedProperty(Expression exp);
    public virtual Expression Visit(Expression exp);
    protected virtual Expression VisitLambda(Expression`1<T> lambda);
    private Expression VisitEqual(Expression exp);
    private PropertyInfo VisitMemberProperty(Expression node);
    private static PropertyInfo GetPropertyInfo(MemberExpression memberNode);
}
internal class Microsoft.AspNet.OData.Builder.PropertySelectorVisitor : ExpressionVisitor {
    private List`1<PropertyInfo> _properties;
    public PropertyInfo Property { get; }
    public ICollection`1<PropertyInfo> Properties { get; }
    internal PropertySelectorVisitor(Expression exp);
    public PropertyInfo get_Property();
    public ICollection`1<PropertyInfo> get_Properties();
    protected virtual Expression VisitMember(MemberExpression node);
    public static PropertyInfo GetSelectedProperty(Expression exp);
    public static ICollection`1<PropertyInfo> GetSelectedProperties(Expression exp);
    public virtual Expression Visit(Expression exp);
    protected virtual Expression VisitLambda(Expression`1<T> lambda);
}
public class Microsoft.AspNet.OData.Builder.QueryConfiguration : object {
    private ModelBoundQuerySettings _querySettings;
    public ModelBoundQuerySettings ModelBoundQuerySettings { get; public set; }
    public ModelBoundQuerySettings get_ModelBoundQuerySettings();
    public void set_ModelBoundQuerySettings(ModelBoundQuerySettings value);
    public virtual void SetCount(bool enableCount);
    public virtual void SetMaxTop(Nullable`1<int> maxTop);
    public virtual void SetPageSize(Nullable`1<int> pageSize);
    public virtual void SetExpand(IEnumerable`1<string> properties, Nullable`1<int> maxDepth, SelectExpandType expandType);
    public virtual void SetSelect(IEnumerable`1<string> properties, SelectExpandType selectType);
    public virtual void SetOrderBy(IEnumerable`1<string> properties, bool enableOrderBy);
    public virtual void SetFilter(IEnumerable`1<string> properties, bool enableFilter);
    internal ModelBoundQuerySettings GetModelBoundQuerySettingsOrDefault();
}
internal class Microsoft.AspNet.OData.Builder.ReturnedEntitySetAnnotation : object {
    [CompilerGeneratedAttribute]
private string <EntitySetName>k__BackingField;
    public string EntitySetName { get; private set; }
    public ReturnedEntitySetAnnotation(string entitySetName);
    [CompilerGeneratedAttribute]
public string get_EntitySetName();
    [CompilerGeneratedAttribute]
private void set_EntitySetName(string value);
}
public class Microsoft.AspNet.OData.Builder.SelfLinkBuilder`1 : object {
    [CompilerGeneratedAttribute]
private Func`2<ResourceContext, T> <Factory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FollowsConventions>k__BackingField;
    public Func`2<ResourceContext, T> Factory { get; private set; }
    public bool FollowsConventions { get; private set; }
    public SelfLinkBuilder`1(Func`2<ResourceContext, T> linkFactory, bool followsConventions);
    [CompilerGeneratedAttribute]
public Func`2<ResourceContext, T> get_Factory();
    [CompilerGeneratedAttribute]
private void set_Factory(Func`2<ResourceContext, T> value);
    [CompilerGeneratedAttribute]
public bool get_FollowsConventions();
    [CompilerGeneratedAttribute]
private void set_FollowsConventions(bool value);
}
[AttributeUsageAttribute("128")]
public class Microsoft.AspNet.OData.Builder.SingletonAttribute : Attribute {
}
public class Microsoft.AspNet.OData.Builder.SingletonConfiguration : NavigationSourceConfiguration {
    public SingletonConfiguration(ODataModelBuilder modelBuilder, Type entityClrType, string name);
    public SingletonConfiguration(ODataModelBuilder modelBuilder, EntityTypeConfiguration entityType, string name);
    public SingletonConfiguration HasDerivedTypeConstraints(Type[] subtypes);
    public SingletonConfiguration HasDerivedTypeConstraint();
}
public class Microsoft.AspNet.OData.Builder.SingletonConfiguration`1 : NavigationSourceConfiguration`1<TEntityType> {
    internal SingletonConfiguration Singleton { get; }
    internal SingletonConfiguration`1(ODataModelBuilder modelBuilder, string name);
    internal SingletonConfiguration`1(ODataModelBuilder modelBuilder, SingletonConfiguration configuration);
    internal SingletonConfiguration get_Singleton();
    public SingletonConfiguration`1<TEntityType> HasDerivedTypeConstraints(Type[] subtypes);
    public SingletonConfiguration`1<TEntityType> HasDerivedTypeConstraints();
}
public abstract class Microsoft.AspNet.OData.Builder.StructuralPropertyConfiguration : PropertyConfiguration {
    [CompilerGeneratedAttribute]
private bool <OptionalProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConcurrencyToken>k__BackingField;
    public bool OptionalProperty { get; public set; }
    public bool ConcurrencyToken { get; public set; }
    protected StructuralPropertyConfiguration(PropertyInfo property, StructuralTypeConfiguration declaringType);
    [CompilerGeneratedAttribute]
public bool get_OptionalProperty();
    [CompilerGeneratedAttribute]
public void set_OptionalProperty(bool value);
    [CompilerGeneratedAttribute]
public bool get_ConcurrencyToken();
    [CompilerGeneratedAttribute]
public void set_ConcurrencyToken(bool value);
}
public abstract class Microsoft.AspNet.OData.Builder.StructuralTypeConfiguration : object {
    private string _namespace;
    private string _name;
    private PropertyInfo _dynamicPropertyDictionary;
    private PropertyInfo _instanceAnnotationContainer;
    private StructuralTypeConfiguration _baseType;
    private bool _baseTypeConfigured;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsAbstract>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryConfiguration <QueryConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddedExplicitly>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataModelBuilder <ModelBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PropertyInfo> <RemovedProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<PropertyInfo, PropertyConfiguration> <ExplicitProperties>k__BackingField;
    public EdmTypeKind Kind { get; }
    public Type ClrType { get; private set; }
    public string FullName { get; }
    public string Namespace { get; public set; }
    public string Name { get; public set; }
    public bool IsOpen { get; }
    public PropertyInfo DynamicPropertyDictionary { get; }
    public bool SupportsInstanceAnnotations { get; }
    public PropertyInfo InstanceAnnotationsContainer { get; }
    public Nullable`1<bool> IsAbstract { get; public set; }
    public bool BaseTypeConfigured { get; }
    public IEnumerable`1<PropertyConfiguration> Properties { get; }
    public ReadOnlyCollection`1<PropertyInfo> IgnoredProperties { get; }
    public IEnumerable`1<NavigationPropertyConfiguration> NavigationProperties { get; }
    public QueryConfiguration QueryConfiguration { get; public set; }
    public bool AddedExplicitly { get; public set; }
    public ODataModelBuilder ModelBuilder { get; private set; }
    protected internal IList`1<PropertyInfo> RemovedProperties { get; private set; }
    protected internal IDictionary`2<PropertyInfo, PropertyConfiguration> ExplicitProperties { get; private set; }
    protected internal StructuralTypeConfiguration BaseTypeInternal { get; }
    protected StructuralTypeConfiguration(ODataModelBuilder modelBuilder, Type clrType);
    public abstract virtual EdmTypeKind get_Kind();
    [CompilerGeneratedAttribute]
public virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
private void set_ClrType(Type value);
    public virtual string get_FullName();
    public virtual string get_Namespace();
    public virtual void set_Namespace(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public bool get_IsOpen();
    public PropertyInfo get_DynamicPropertyDictionary();
    public bool get_SupportsInstanceAnnotations();
    public PropertyInfo get_InstanceAnnotationsContainer();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsAbstract();
    [CompilerGeneratedAttribute]
public virtual void set_IsAbstract(Nullable`1<bool> value);
    public virtual bool get_BaseTypeConfigured();
    public IEnumerable`1<PropertyConfiguration> get_Properties();
    public ReadOnlyCollection`1<PropertyInfo> get_IgnoredProperties();
    public virtual IEnumerable`1<NavigationPropertyConfiguration> get_NavigationProperties();
    [CompilerGeneratedAttribute]
public QueryConfiguration get_QueryConfiguration();
    [CompilerGeneratedAttribute]
public void set_QueryConfiguration(QueryConfiguration value);
    [CompilerGeneratedAttribute]
public bool get_AddedExplicitly();
    [CompilerGeneratedAttribute]
public void set_AddedExplicitly(bool value);
    [CompilerGeneratedAttribute]
public virtual ODataModelBuilder get_ModelBuilder();
    [CompilerGeneratedAttribute]
private void set_ModelBuilder(ODataModelBuilder value);
    [CompilerGeneratedAttribute]
protected internal IList`1<PropertyInfo> get_RemovedProperties();
    [CompilerGeneratedAttribute]
private void set_RemovedProperties(IList`1<PropertyInfo> value);
    [CompilerGeneratedAttribute]
protected internal IDictionary`2<PropertyInfo, PropertyConfiguration> get_ExplicitProperties();
    [CompilerGeneratedAttribute]
private void set_ExplicitProperties(IDictionary`2<PropertyInfo, PropertyConfiguration> value);
    protected internal virtual StructuralTypeConfiguration get_BaseTypeInternal();
    internal virtual void AbstractImpl();
    internal virtual void DerivesFromNothingImpl();
    internal virtual void DerivesFromImpl(StructuralTypeConfiguration baseType);
    public virtual PrimitivePropertyConfiguration AddProperty(PropertyInfo propertyInfo);
    public virtual EnumPropertyConfiguration AddEnumProperty(PropertyInfo propertyInfo);
    public virtual ComplexPropertyConfiguration AddComplexProperty(PropertyInfo propertyInfo);
    public virtual CollectionPropertyConfiguration AddCollectionProperty(PropertyInfo propertyInfo);
    public virtual void AddDynamicPropertyDictionary(PropertyInfo propertyInfo);
    public virtual void AddInstanceAnnotationContainer(PropertyInfo propertyInfo);
    public virtual void RemoveProperty(PropertyInfo propertyInfo);
    public virtual NavigationPropertyConfiguration AddNavigationProperty(PropertyInfo navigationProperty, EdmMultiplicity multiplicity);
    public virtual NavigationPropertyConfiguration AddContainedNavigationProperty(PropertyInfo navigationProperty, EdmMultiplicity multiplicity);
    private NavigationPropertyConfiguration AddNavigationProperty(PropertyInfo navigationProperty, EdmMultiplicity multiplicity, bool containsTarget);
    internal T ValidatePropertyNotAlreadyDefinedOtherTypes(PropertyInfo propertyInfo, string typeErrorMessage);
    internal void ValidatePropertyNotAlreadyDefinedInBaseTypes(PropertyInfo propertyInfo);
    internal void ValidatePropertyNotAlreadyDefinedInDerivedTypes(PropertyInfo propertyInfo);
}
public abstract class Microsoft.AspNet.OData.Builder.StructuralTypeConfiguration`1 : object {
    private StructuralTypeConfiguration _configuration;
    public IEnumerable`1<PropertyConfiguration> Properties { get; }
    public string FullName { get; }
    public string Namespace { get; public set; }
    public string Name { get; public set; }
    public bool IsOpen { get; }
    internal StructuralTypeConfiguration Configuration { get; }
    protected StructuralTypeConfiguration`1(StructuralTypeConfiguration configuration);
    public IEnumerable`1<PropertyConfiguration> get_Properties();
    public string get_FullName();
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_Name();
    public void set_Name(string value);
    public bool get_IsOpen();
    internal StructuralTypeConfiguration get_Configuration();
    public virtual void Ignore(Expression`1<Func`2<TStructuralType, TProperty>> propertyExpression);
    public LengthPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, string>> propertyExpression);
    public LengthPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, Byte[]>> propertyExpression);
    public PrimitivePropertyConfiguration Property(Expression`1<Func`2<TStructuralType, Stream>> propertyExpression);
    public DecimalPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, Nullable`1<decimal>>> propertyExpression);
    public DecimalPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, decimal>> propertyExpression);
    public PrecisionPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, Nullable`1<TimeOfDay>>> propertyExpression);
    public PrecisionPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, TimeOfDay>> propertyExpression);
    public PrecisionPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, Nullable`1<TimeSpan>>> propertyExpression);
    public PrecisionPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, TimeSpan>> propertyExpression);
    public PrecisionPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, Nullable`1<DateTimeOffset>>> propertyExpression);
    public PrecisionPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, DateTimeOffset>> propertyExpression);
    public PrimitivePropertyConfiguration Property(Expression`1<Func`2<TStructuralType, Nullable`1<T>>> propertyExpression);
    public PrimitivePropertyConfiguration Property(Expression`1<Func`2<TStructuralType, T>> propertyExpression);
    public EnumPropertyConfiguration EnumProperty(Expression`1<Func`2<TStructuralType, Nullable`1<T>>> propertyExpression);
    public EnumPropertyConfiguration EnumProperty(Expression`1<Func`2<TStructuralType, T>> propertyExpression);
    public ComplexPropertyConfiguration ComplexProperty(Expression`1<Func`2<TStructuralType, TComplexType>> propertyExpression);
    public CollectionPropertyConfiguration CollectionProperty(Expression`1<Func`2<TStructuralType, IEnumerable`1<TElementType>>> propertyExpression);
    public void HasDynamicProperties(Expression`1<Func`2<TStructuralType, IDictionary`2<string, object>>> propertyExpression);
    public void HasInstanceAnnotations(Expression`1<Func`2<TStructuralType, IODataInstanceAnnotationContainer>> propertyExpression);
    public NavigationPropertyConfiguration HasMany(Expression`1<Func`2<TStructuralType, IEnumerable`1<TTargetEntity>>> navigationPropertyExpression);
    public NavigationPropertyConfiguration HasOptional(Expression`1<Func`2<TStructuralType, TTargetEntity>> navigationPropertyExpression);
    public NavigationPropertyConfiguration HasOptional(Expression`1<Func`2<TStructuralType, TTargetEntity>> navigationPropertyExpression, Expression`1<Func`3<TStructuralType, TTargetEntity, bool>> referentialConstraintExpression);
    public NavigationPropertyConfiguration HasOptional(Expression`1<Func`2<TStructuralType, TTargetEntity>> navigationPropertyExpression, Expression`1<Func`3<TStructuralType, TTargetEntity, bool>> referentialConstraintExpression, Expression`1<Func`2<TTargetEntity, IEnumerable`1<TStructuralType>>> partnerExpression);
    public NavigationPropertyConfiguration HasOptional(Expression`1<Func`2<TStructuralType, TTargetEntity>> navigationPropertyExpression, Expression`1<Func`3<TStructuralType, TTargetEntity, bool>> referentialConstraintExpression, Expression`1<Func`2<TTargetEntity, TStructuralType>> partnerExpression);
    public NavigationPropertyConfiguration HasRequired(Expression`1<Func`2<TStructuralType, TTargetEntity>> navigationPropertyExpression);
    public NavigationPropertyConfiguration HasRequired(Expression`1<Func`2<TStructuralType, TTargetEntity>> navigationPropertyExpression, Expression`1<Func`3<TStructuralType, TTargetEntity, bool>> referentialConstraintExpression, Expression`1<Func`2<TTargetEntity, IEnumerable`1<TStructuralType>>> partnerExpression);
    public NavigationPropertyConfiguration HasRequired(Expression`1<Func`2<TStructuralType, TTargetEntity>> navigationPropertyExpression, Expression`1<Func`3<TStructuralType, TTargetEntity, bool>> referentialConstraintExpression);
    public NavigationPropertyConfiguration HasRequired(Expression`1<Func`2<TStructuralType, TTargetEntity>> navigationPropertyExpression, Expression`1<Func`3<TStructuralType, TTargetEntity, bool>> referentialConstraintExpression, Expression`1<Func`2<TTargetEntity, TStructuralType>> partnerExpression);
    private NavigationPropertyConfiguration HasNavigationProperty(Expression`1<Func`2<TStructuralType, TTargetEntity>> navigationPropertyExpression, Expression`1<Func`3<TStructuralType, TTargetEntity, bool>> referentialConstraintExpression, EdmMultiplicity multiplicity, Expression partnerProperty);
    public NavigationPropertyConfiguration ContainsMany(Expression`1<Func`2<TStructuralType, IEnumerable`1<TTargetEntity>>> navigationPropertyExpression);
    public NavigationPropertyConfiguration ContainsOptional(Expression`1<Func`2<TStructuralType, TTargetEntity>> navigationPropertyExpression);
    public NavigationPropertyConfiguration ContainsRequired(Expression`1<Func`2<TStructuralType, TTargetEntity>> navigationPropertyExpression);
    public StructuralTypeConfiguration`1<TStructuralType> Count();
    public StructuralTypeConfiguration`1<TStructuralType> Count(QueryOptionSetting setting);
    public StructuralTypeConfiguration`1<TStructuralType> OrderBy(QueryOptionSetting setting, String[] properties);
    public StructuralTypeConfiguration`1<TStructuralType> OrderBy(String[] properties);
    public StructuralTypeConfiguration`1<TStructuralType> OrderBy(QueryOptionSetting setting);
    public StructuralTypeConfiguration`1<TStructuralType> OrderBy();
    public StructuralTypeConfiguration`1<TStructuralType> Filter(QueryOptionSetting setting, String[] properties);
    public StructuralTypeConfiguration`1<TStructuralType> Filter(String[] properties);
    public StructuralTypeConfiguration`1<TStructuralType> Filter(QueryOptionSetting setting);
    public StructuralTypeConfiguration`1<TStructuralType> Filter();
    public StructuralTypeConfiguration`1<TStructuralType> Select(SelectExpandType selectType, String[] properties);
    public StructuralTypeConfiguration`1<TStructuralType> Select(String[] properties);
    public StructuralTypeConfiguration`1<TStructuralType> Select(SelectExpandType selectType);
    public StructuralTypeConfiguration`1<TStructuralType> Select();
    public StructuralTypeConfiguration`1<TStructuralType> Page(Nullable`1<int> maxTopValue, Nullable`1<int> pageSizeValue);
    public StructuralTypeConfiguration`1<TStructuralType> Page();
    public StructuralTypeConfiguration`1<TStructuralType> Expand(int maxDepth, SelectExpandType expandType, String[] properties);
    public StructuralTypeConfiguration`1<TStructuralType> Expand(String[] properties);
    public StructuralTypeConfiguration`1<TStructuralType> Expand(int maxDepth, String[] properties);
    public StructuralTypeConfiguration`1<TStructuralType> Expand(SelectExpandType expandType, String[] properties);
    public StructuralTypeConfiguration`1<TStructuralType> Expand(SelectExpandType expandType, int maxDepth);
    public StructuralTypeConfiguration`1<TStructuralType> Expand(int maxDepth);
    public StructuralTypeConfiguration`1<TStructuralType> Expand(SelectExpandType expandType);
    public StructuralTypeConfiguration`1<TStructuralType> Expand();
    internal NavigationPropertyConfiguration GetOrCreateNavigationProperty(Expression navigationPropertyExpression, EdmMultiplicity multiplicity);
    internal NavigationPropertyConfiguration GetOrCreateContainedNavigationProperty(Expression navigationPropertyExpression, EdmMultiplicity multiplicity);
    private PrimitivePropertyConfiguration GetPrimitivePropertyConfiguration(Expression propertyExpression, bool optional);
    private EnumPropertyConfiguration GetEnumPropertyConfiguration(Expression propertyExpression, bool optional);
    private ComplexPropertyConfiguration GetComplexPropertyConfiguration(Expression propertyExpression, bool optional);
    private CollectionPropertyConfiguration GetCollectionPropertyConfiguration(Expression propertyExpression, bool optional);
}
public class Microsoft.AspNet.OData.ClrEnumMemberAnnotation : object {
    private IDictionary`2<Enum, IEdmEnumMember> _map;
    private IDictionary`2<IEdmEnumMember, Enum> _reverseMap;
    public ClrEnumMemberAnnotation(IDictionary`2<Enum, IEdmEnumMember> map);
    public IEdmEnumMember GetEdmEnumMember(Enum clrEnumMemberInfo);
    public Enum GetClrEnumMember(IEdmEnumMember edmEnumMember);
}
public class Microsoft.AspNet.OData.ClrPropertyInfoAnnotation : object {
    [CompilerGeneratedAttribute]
private PropertyInfo <ClrPropertyInfo>k__BackingField;
    public PropertyInfo ClrPropertyInfo { get; private set; }
    public ClrPropertyInfoAnnotation(PropertyInfo clrPropertyInfo);
    [CompilerGeneratedAttribute]
public PropertyInfo get_ClrPropertyInfo();
    [CompilerGeneratedAttribute]
private void set_ClrPropertyInfo(PropertyInfo value);
}
public class Microsoft.AspNet.OData.ClrTypeAnnotation : object {
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    public Type ClrType { get; private set; }
    public ClrTypeAnnotation(Type clrType);
    [CompilerGeneratedAttribute]
public Type get_ClrType();
    [CompilerGeneratedAttribute]
private void set_ClrType(Type value);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.OData.Common.CollectionExtensions : object {
    [ExtensionAttribute]
public static T[] AppendAndReallocate(T[] array, T value);
    [ExtensionAttribute]
public static T[] AsArray(IEnumerable`1<T> values);
    [ExtensionAttribute]
public static Collection`1<T> AsCollection(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static IList`1<T> AsIList(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static List`1<T> AsList(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static void RemoveFrom(List`1<T> list, int start);
    [ExtensionAttribute]
public static T SingleDefaultOrError(IList`1<T> list, Action`1<TArg1> errorAction, TArg1 errorArg1);
    [ExtensionAttribute]
public static TMatch SingleOfTypeDefaultOrError(IList`1<TInput> list, Action`1<TArg1> errorAction, TArg1 errorArg1);
    [ExtensionAttribute]
public static T[] ToArrayWithoutNulls(ICollection`1<T> collection);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionaryFast(TValue[] array, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionaryFast(IList`1<TValue> list, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionaryFast(IEnumerable`1<TValue> enumerable, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    private static Dictionary`2<TKey, TValue> ToDictionaryFastNoCheck(IList`1<TValue> list, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static void MergeWithReplace(Dictionary`2<TKey, TValue> target, Dictionary`2<TKey, TValue> source);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.AspNet.OData.Common.CommonWebApiResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ArgumentInvalidAbsoluteUri { get; }
    internal static string ArgumentInvalidHttpUriScheme { get; }
    internal static string ArgumentMustBeGreaterThanOrEqualTo { get; }
    internal static string ArgumentMustBeLessThanOrEqualTo { get; }
    internal static string ArgumentNullOrEmpty { get; }
    internal static string PropertyNullOrWhiteSpace { get; }
    internal static string ArgumentUriHasQueryOrFragment { get; }
    internal static string InvalidEnumArgument { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgumentInvalidAbsoluteUri();
    internal static string get_ArgumentInvalidHttpUriScheme();
    internal static string get_ArgumentMustBeGreaterThanOrEqualTo();
    internal static string get_ArgumentMustBeLessThanOrEqualTo();
    internal static string get_ArgumentNullOrEmpty();
    internal static string get_PropertyNullOrWhiteSpace();
    internal static string get_ArgumentUriHasQueryOrFragment();
    internal static string get_InvalidEnumArgument();
}
internal static class Microsoft.AspNet.OData.Common.Error : object {
    private static string HttpScheme;
    private static string HttpsScheme;
    internal static string Format(string format, Object[] args);
    internal static ArgumentException Argument(string messageFormat, Object[] messageArgs);
    internal static ArgumentException Argument(string parameterName, string messageFormat, Object[] messageArgs);
    internal static ArgumentException ArgumentUriNotHttpOrHttpsScheme(string parameterName, Uri actualValue);
    internal static ArgumentException ArgumentUriNotAbsolute(string parameterName, Uri actualValue);
    internal static ArgumentException ArgumentUriHasQueryOrFragment(string parameterName, Uri actualValue);
    internal static ArgumentNullException PropertyNull();
    internal static ArgumentException PropertyNullOrWhiteSpace();
    internal static ArgumentNullException ArgumentNull(string parameterName);
    internal static ArgumentNullException ArgumentNull(string parameterName, string messageFormat, Object[] messageArgs);
    internal static ArgumentException ArgumentNullOrEmpty(string parameterName);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string parameterName, object actualValue, string messageFormat, Object[] messageArgs);
    internal static ArgumentOutOfRangeException ArgumentMustBeGreaterThanOrEqualTo(string parameterName, object actualValue, object minValue);
    internal static ArgumentOutOfRangeException ArgumentMustBeLessThanOrEqualTo(string parameterName, object actualValue, object maxValue);
    internal static KeyNotFoundException KeyNotFound();
    internal static KeyNotFoundException KeyNotFound(string messageFormat, Object[] messageArgs);
    internal static ObjectDisposedException ObjectDisposed(string messageFormat, Object[] messageArgs);
    internal static OperationCanceledException OperationCanceled();
    internal static OperationCanceledException OperationCanceled(string messageFormat, Object[] messageArgs);
    internal static ArgumentException InvalidEnumArgument(string parameterName, int invalidValue, Type enumClass);
    internal static InvalidOperationException InvalidOperation(string messageFormat, Object[] messageArgs);
    internal static InvalidOperationException InvalidOperation(Exception innerException, string messageFormat, Object[] messageArgs);
    internal static NotSupportedException NotSupported(string messageFormat, Object[] messageArgs);
}
internal class Microsoft.AspNet.OData.Common.ListWrapperCollection`1 : Collection`1<T> {
    private List`1<T> _items;
    internal List`1<T> ItemsList { get; }
    internal ListWrapperCollection`1(List`1<T> list);
    internal List`1<T> get_ItemsList();
}
internal static class Microsoft.AspNet.OData.Common.ODataPathHelper : object {
    public static Dictionary`2<string, object> KeySegmentAsDictionary(KeySegment keySegment);
    public static int GetNextKeySegmentPosition(IReadOnlyList`1<ODataPathSegment> pathSegments, int currentPosition);
}
internal class Microsoft.AspNet.OData.Common.PropertyHelper : object {
    private static ConcurrentDictionary`2<Type, PropertyHelper[]> _reflectionCache;
    private Func`2<object, object> _valueGetter;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private static MethodInfo _callPropertyGetterOpenGenericMethod;
    private static MethodInfo _callPropertyGetterByReferenceOpenGenericMethod;
    private static MethodInfo _callPropertySetterOpenGenericMethod;
    public string Name { get; protected set; }
    public PropertyHelper(PropertyInfo property);
    private static PropertyHelper();
    public static Action`2<TDeclaringType, object> MakeFastPropertySetter(PropertyInfo propertyInfo);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected virtual void set_Name(string value);
    public object GetValue(object instance);
    public static PropertyHelper[] GetProperties(object instance);
    public static Func`2<object, object> MakeFastPropertyGetter(PropertyInfo propertyInfo);
    private static PropertyHelper CreateInstance(PropertyInfo property);
    private static object CallPropertyGetter(Func`2<TDeclaringType, TValue> getter, object this);
    private static object CallPropertyGetterByReference(ByRefFunc`2<TDeclaringType, TValue> getter, object this);
    private static void CallPropertySetter(Action`2<TDeclaringType, TValue> setter, object this, object value);
    protected static PropertyHelper[] GetProperties(object instance, Func`2<PropertyInfo, PropertyHelper> createPropertyHelper, ConcurrentDictionary`2<Type, PropertyHelper[]> cache);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.AspNet.OData.Common.SRResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActionContextMustHaveDescriptor { get; }
    internal static string ActionContextMustHaveRequest { get; }
    internal static string ActionExecutedContextMustHaveActionContext { get; }
    internal static string ActionExecutedContextMustHaveRequest { get; }
    internal static string ActionNotBoundToCollectionOfEntity { get; }
    internal static string ActionNotBoundToEntity { get; }
    internal static string AggregateKindNotSupported { get; }
    internal static string AggregationMethodNotSupported { get; }
    internal static string AggregationNotSupportedForType { get; }
    internal static string ApplyQueryOptionNotSupportedForLinq2SQL { get; }
    internal static string ApplyToOnUntypedQueryOption { get; }
    internal static string ArgumentMustBeOfType { get; }
    internal static string BaseTypeNotSpecified { get; }
    internal static string BatchRequestInvalidMediaType { get; }
    internal static string BatchRequestMissingBoundary { get; }
    internal static string BatchRequestMissingContent { get; }
    internal static string BatchRequestMissingContentType { get; }
    internal static string BinaryOperatorNotSupported { get; }
    internal static string CannotAddToNullCollection { get; }
    internal static string CannotApplyETagOfT { get; }
    internal static string CannotApplyODataQueryOptionsOfT { get; }
    internal static string CannotAutoCreateMultipleCandidates { get; }
    internal static string CannotCastFilter { get; }
    internal static string MissingConvertNode { get; }
    internal static string CannotCreateInstanceForProperty { get; }
    internal static string CannotDefineKeysOnDerivedTypes { get; }
    internal static string CannotDeserializeUnknownProperty { get; }
    internal static string CannotGetEnumClrMember { get; }
    internal static string CannotInferEdmType { get; }
    internal static string CannotInstantiateAbstractResourceType { get; }
    internal static string CannotPatchNavigationProperties { get; }
    internal static string CannotRecognizeNodeType { get; }
    internal static string CannotReconfigEntityTypeAsComplexType { get; }
    internal static string CannotRedefineBaseTypeProperty { get; }
    internal static string CannotReEnableDependencyInjection { get; }
    internal static string CannotSerializerNull { get; }
    internal static string CannotSetDynamicPropertyDictionary { get; }
    internal static string CannotWriteType { get; }
    internal static string CantFindEdmType { get; }
    internal static string ChangedObjectTypeMismatch { get; }
    internal static string ClrTypeNotInModel { get; }
    internal static string CollectionNavigationPropertyEntityTypeDoesntHaveKeyDefined { get; }
    internal static string CollectionParameterShouldHaveAddMethod { get; }
    internal static string CollectionPropertiesMustReturnIEnumerable { get; }
    internal static string CollectionShouldHaveAddMethod { get; }
    internal static string CollectionShouldHaveClearMethod { get; }
    internal static string ContentID { get; }
    internal static string ConstraintAlreadyExists { get; }
    internal static string ConvertToEnumFailed { get; }
    internal static string CreateODataValueNotSupported { get; }
    internal static string DataModificationException { get; }
    internal static string DeltaEntityTypeNotAssignable { get; }
    internal static string DeltaLinkNotSupported { get; }
    internal static string DeltaNestedResourceNameNotFound { get; }
    internal static string DeltaTypeMismatch { get; }
    internal static string DependentAndPrincipalTypeNotMatch { get; }
    internal static string DeserializerDoesNotSupportRead { get; }
    internal static string DoesNotSupportReadInLine { get; }
    internal static string DuplicateDynamicPropertyNameFound { get; }
    internal static string DuplicateKeyInSegment { get; }
    internal static string DynamicPropertyCannotBeSerialized { get; }
    internal static string DynamicPropertyNameAlreadyUsedAsDeclaredPropertyName { get; }
    internal static string DynamicResourceSetTypeNameIsRequired { get; }
    internal static string EditLinkNullForLocationHeader { get; }
    internal static string EdmComplexObjectNullRef { get; }
    internal static string EdmObjectNull { get; }
    internal static string EdmTypeCannotBeNull { get; }
    internal static string EdmTypeNotSupported { get; }
    internal static string ElementClrTypeNull { get; }
    internal static string EmptyKeyTemplate { get; }
    internal static string EmptyParameterAlias { get; }
    internal static string EntityReferenceMustHasKeySegment { get; }
    internal static string EntitySetAlreadyConfiguredDifferentEntityType { get; }
    internal static string EntitySetMissingDuringSerialization { get; }
    internal static string EntitySetNameAlreadyConfiguredAsSingleton { get; }
    internal static string EntitySetNotFoundForName { get; }
    internal static string EntitySetTypeHasNoKeys { get; }
    internal static string EntityTypeDoesntHaveKeyDefined { get; }
    internal static string EntityTypeMismatch { get; }
    internal static string EnumTypeDoesNotExist { get; }
    internal static string EnumValueCannotBeLong { get; }
    internal static string EqualExpressionsMustHaveSameTypes { get; }
    internal static string ErrorTypeMustBeODataErrorOrHttpError { get; }
    internal static string ETagNotWellFormed { get; }
    internal static string ExpandFilterExpressionNotLambdaExpression { get; }
    internal static string FailedToBuildEdmModelBecauseReturnTypeIsNull { get; }
    internal static string FailedToRetrieveTypeToBuildEdmModel { get; }
    internal static string FormatterReadIsNotSupportedForType { get; }
    internal static string FunctionNotBoundToCollectionOfEntity { get; }
    internal static string FunctionNotBoundToEntity { get; }
    internal static string FunctionNotSupportedOnEnum { get; }
    internal static string FunctionParameterNotFound { get; }
    internal static string GetEdmModelCalledMoreThanOnce { get; }
    internal static string GetOnlyCollectionCannotBeArray { get; }
    internal static string HasActionLinkRequiresBindToCollectionOfEntity { get; }
    internal static string HasActionLinkRequiresBindToEntity { get; }
    internal static string HasFunctionLinkRequiresBindToCollectionOfEntity { get; }
    internal static string HasFunctionLinkRequiresBindToEntity { get; }
    internal static string IdLinkNullForEntityIdHeader { get; }
    internal static string InvalidAttributeRoutingTemplateSegment { get; }
    internal static string InvalidBatchReaderState { get; }
    internal static string InvalidBindingParameterType { get; }
    internal static string InvalidDollarId { get; }
    internal static string InvalidEntitySetName { get; }
    internal static string InvalidETagHandler { get; }
    internal static string InvalidExpansionDepthValue { get; }
    internal static string InvalidLastSegmentInSelectExpandPath { get; }
    internal static string InvalidODataPathTemplate { get; }
    internal static string InvalidODataRouteOnAction { get; }
    internal static string InvalidODataUntypedValue { get; }
    internal static string InvalidPathSegment { get; }
    internal static string InvalidPropertyInfoForDynamicPropertyAnnotation { get; }
    internal static string InvalidPropertyMapper { get; }
    internal static string InvalidPropertyMapping { get; }
    internal static string InvalidSegmentInSelectExpandPath { get; }
    internal static string InvalidSingleQuoteCountForNonStringLiteral { get; }
    internal static string InvalidSingletonName { get; }
    internal static string InvalidTimeZoneInfo { get; }
    internal static string KeyTemplateMustBeInCurlyBraces { get; }
    internal static string KeyValueCannotBeNull { get; }
    internal static string LambdaExpressionMustHaveExactlyOneParameter { get; }
    internal static string LambdaExpressionMustHaveExactlyTwoParameters { get; }
    internal static string LiteralHasABadFormat { get; }
    internal static string ManyNavigationPropertiesCannotBeChanged { get; }
    internal static string ManyToManyNavigationPropertyMustReturnCollection { get; }
    internal static string MappingDoesNotContainResourceType { get; }
    internal static string MaxAnyAllExpressionLimitExceeded { get; }
    internal static string MaxExpandDepthExceeded { get; }
    internal static string MaxNodeLimitExceeded { get; }
    internal static string MemberExpressionsMustBeBoundToLambdaParameter { get; }
    internal static string MemberExpressionsMustBeProperties { get; }
    internal static string MissingNonODataContainer { get; }
    internal static string MissingODataContainer { get; }
    internal static string MissingODataServices { get; }
    internal static string ModelBinderUtil_ModelMetadataCannotBeNull { get; }
    internal static string ModelBinderUtil_ValueCannotBeEnum { get; }
    internal static string ModelMissingFromReadContext { get; }
    internal static string MoreThanOneDynamicPropertyContainerFound { get; }
    internal static string MoreThanOneAnnotationPropertyContainerFound { get; }
    internal static string AnnotationPropertyNameAlreadyUsedAsDeclaredPropertyName { get; }
    internal static string DuplicateAnnotationPropertyNameFound { get; }
    internal static string CannotSetAnnotationPropertyDictionary { get; }
    internal static string InstanceAnnotationCannotBeSerialized { get; }
    internal static string InstanceAnnotationNotContain { get; }
    internal static string InstanceAnnotationShouldContain { get; }
    internal static string InstanceAnnotationNotEmpty { get; }
    internal static string InstanceAnnotationPropertyNotEmpty { get; }
    internal static string TypeOfInstanceAnnotationNotSupported { get; }
    internal static string InvalidPropertyInfoForAnnotationPropertyAnnotation { get; }
    internal static string MoreThanOneOperationFound { get; }
    internal static string MoreThanOneOverloadActionBoundToSameTypeFound { get; }
    internal static string MoreThanOneUnboundActionFound { get; }
    internal static string MultipleAttributesFound { get; }
    internal static string MultipleMatchingClrTypesForEdmType { get; }
    internal static string MustBeCollectionProperty { get; }
    internal static string MustBeComplexProperty { get; }
    internal static string MustBeDateTimeProperty { get; }
    internal static string MustBeEnumProperty { get; }
    internal static string MustBeNavigationProperty { get; }
    internal static string MustBePrimitiveProperty { get; }
    internal static string MustBePrimitiveType { get; }
    internal static string MustBeTimeSpanProperty { get; }
    internal static string MustHaveMatchingMultiplicity { get; }
    internal static string NavigationPropertyBindingPathIsNotValid { get; }
    internal static string NavigationPropertyBindingPathNotInHierarchy { get; }
    internal static string NavigationPropertyBindingPathNotSupported { get; }
    internal static string NavigationPropertyNotInHierarchy { get; }
    internal static string NavigationSourceMissingDuringDeserialization { get; }
    internal static string NavigationSourceMissingDuringSerialization { get; }
    internal static string NavigationSourceTypeHasNoKeys { get; }
    internal static string NestedCollectionsNotSupported { get; }
    internal static string NestedPropertyNotfound { get; }
    internal static string NoClrTypeSpecified { get; }
    internal static string NoKeyNameFoundInSegment { get; }
    internal static string NoMatchingIEdmTypeFound { get; }
    internal static string NoMatchingResource { get; }
    internal static string NonNullUriRequiredForMediaTypeMapping { get; }
    internal static string NoNonODataHttpRouteRegistered { get; }
    internal static string NonSelectExpandOnSingleEntity { get; }
    internal static string NoRoutingHandlerToSelectAction { get; }
    internal static string NotADerivedType { get; }
    internal static string NotAllowedArithmeticOperator { get; }
    internal static string NotAllowedFunction { get; }
    internal static string NotAllowedLogicalOperator { get; }
    internal static string NotAllowedOrderByProperty { get; }
    internal static string NotAllowedQueryOption { get; }
    internal static string NotCountableEntitySetUsedForCount { get; }
    internal static string NotCountablePropertyUsedForCount { get; }
    internal static string NotExpandablePropertyUsedInExpand { get; }
    internal static string NotFilterablePropertyUsedInFilter { get; }
    internal static string NotNavigablePropertyUsedInNavigation { get; }
    internal static string NotSelectablePropertyUsedInSelect { get; }
    internal static string NotSortablePropertyUsedInOrderBy { get; }
    internal static string NotSupportedTransformationKind { get; }
    internal static string NoValueLiteralFoundInSegment { get; }
    internal static string NullContainer { get; }
    internal static string NullContainerBuilder { get; }
    internal static string NullElementInCollection { get; }
    internal static string NullETagHandler { get; }
    internal static string NullOnNonNullableFunctionParameter { get; }
    internal static string Object_NotYetInitialized { get; }
    internal static string ObjectToDeleteNotFound { get; }
    internal static string ODataFunctionNotSupported { get; }
    internal static string ODataPathMissing { get; }
    internal static string ODataPathNotFound { get; }
    internal static string OperationHasInvalidEntitySetPath { get; }
    internal static string OperationImportSegmentMustBeFunction { get; }
    internal static string OperationSegmentMustBeFunction { get; }
    internal static string OrderByClauseNotSupported { get; }
    internal static string OrderByDuplicateIt { get; }
    internal static string OrderByDuplicateProperty { get; }
    internal static string OrderByNodeCountExceeded { get; }
    internal static string ParameterAliasMustBeInCurlyBraces { get; }
    internal static string ParameterTypeIsNotCollection { get; }
    internal static string PropertyAlreadyDefinedInDerivedType { get; }
    internal static string PropertyDoesNotBelongToType { get; }
    internal static string PropertyIsNotCollection { get; }
    internal static string PropertyMustBeBoolean { get; }
    internal static string PropertyMustBeDateTimeOffsetOrDate { get; }
    internal static string PropertyMustBeEnum { get; }
    internal static string PropertyMustBeString { get; }
    internal static string PropertyMustBeStringLengthOne { get; }
    internal static string PropertyMustBeStringMaxLengthOne { get; }
    internal static string PropertyMustBeTimeOfDay { get; }
    internal static string PropertyMustHavePublicGetterAndSetter { get; }
    internal static string PropertyTypeShouldBeOfType { get; }
    internal static string PropertyNotFound { get; }
    internal static string PropertyOrPathWasRemovedFromContext { get; }
    internal static string QueryCannotBeEmpty { get; }
    internal static string QueryGetModelMustNotReturnNull { get; }
    internal static string QueryingRequiresObjectContent { get; }
    internal static string QueryNodeBindingNotSupported { get; }
    internal static string QueryNodeValidationNotSupported { get; }
    internal static string QueryParameterNotSupported { get; }
    internal static string ReadFromStreamAsyncMustHaveRequest { get; }
    internal static string RebindingNotSupported { get; }
    internal static string ReferenceNavigationPropertyExpandFilterVisitorUnexpectedParameter { get; }
    internal static string ReferentialConstraintAlreadyConfigured { get; }
    internal static string ReferentialConstraintOnManyNavigationPropertyNotSupported { get; }
    internal static string ReferentialConstraintPropertyTypeNotValid { get; }
    internal static string RequestContainerAlreadyExists { get; }
    internal static string RequestMustContainConfiguration { get; }
    internal static string RequestMustHaveModel { get; }
    internal static string RequestMustHaveODataRouteName { get; }
    internal static string RequestNotActionInvocation { get; }
    internal static string RequestUriTooShortForODataPath { get; }
    internal static string ResourcesShouldbePresent { get; }
    internal static string ResourceSetWrapperSupported { get; }
    internal static string ResourceTypeNotInModel { get; }
    internal static string ReturnEntityCollectionWithoutEntitySet { get; }
    internal static string ReturnEntityWithoutEntitySet { get; }
    internal static string ReturnTypeOfOperationNotSpecified { get; }
    internal static string RootElementNameMissing { get; }
    internal static string RoutePrefixStartsWithSlash { get; }
    internal static string SelectExpandEmptyOrNull { get; }
    internal static string SelectionTypeNotSupported { get; }
    internal static string SelectNonStructured { get; }
    internal static string ShouldHaveNavigationPropertyInNavigationExpandPath { get; }
    internal static string SingleResultHasMoreThanOneEntity { get; }
    internal static string SingletonAlreadyConfiguredDifferentEntityType { get; }
    internal static string SingletonNameAlreadyConfiguredAsEntitySet { get; }
    internal static string SkipTokenParseError { get; }
    internal static string SkipTokenProcessingError { get; }
    internal static string SkipTopLimitExceeded { get; }
    internal static string TargetEntityTypeMissing { get; }
    internal static string TargetKindNotImplemented { get; }
    internal static string TypeCannotBeComplexWasEntity { get; }
    internal static string TypeCannotBeDeserialized { get; }
    internal static string TypeCannotBeEntityWasComplex { get; }
    internal static string TypeCannotBeEnum { get; }
    internal static string TypeCannotBeSerialized { get; }
    internal static string TypeDoesNotInheritFromBaseType { get; }
    internal static string TypeMustBeEntity { get; }
    internal static string TypeMustBeEnumOrNullableEnum { get; }
    internal static string TypeMustBeResourceSet { get; }
    internal static string TypeOfDynamicPropertyNotSupported { get; }
    internal static string UnableToDetermineBaseUrl { get; }
    internal static string UnableToDetermineMetadataUrl { get; }
    internal static string UnaryNodeValidationNotSupported { get; }
    internal static string UnexpectedElementType { get; }
    internal static string UnresolvedPathSegmentInTemplate { get; }
    internal static string UnsupportedEdmType { get; }
    internal static string UnsupportedEdmTypeKind { get; }
    internal static string UnsupportedExpressionNodeType { get; }
    internal static string UnsupportedExpressionNodeTypeWithName { get; }
    internal static string UnsupportedSelectExpandPath { get; }
    internal static string UnterminatedStringLiteral { get; }
    internal static string UriFunctionClrBinderAlreadyBound { get; }
    internal static string UriQueryStringInvalid { get; }
    internal static string UrlHelperNull { get; }
    internal static string ValueIsInvalid { get; }
    internal static string WriteObjectInlineNotSupported { get; }
    internal static string WriteObjectNotSupported { get; }
    internal static string WriteToStreamAsyncMustHaveRequest { get; }
    internal static string CannotParseQueryOptionsPayload { get; }
    internal static string CannotFindParserForRequestMediaType { get; }
    internal static string QueryOptionsMustNotBeRepeated { get; }
    internal static string QueryOptionsNotInExpectedFormat { get; }
    internal static string JsonConverterDoesNotSupportRead { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActionContextMustHaveDescriptor();
    internal static string get_ActionContextMustHaveRequest();
    internal static string get_ActionExecutedContextMustHaveActionContext();
    internal static string get_ActionExecutedContextMustHaveRequest();
    internal static string get_ActionNotBoundToCollectionOfEntity();
    internal static string get_ActionNotBoundToEntity();
    internal static string get_AggregateKindNotSupported();
    internal static string get_AggregationMethodNotSupported();
    internal static string get_AggregationNotSupportedForType();
    internal static string get_ApplyQueryOptionNotSupportedForLinq2SQL();
    internal static string get_ApplyToOnUntypedQueryOption();
    internal static string get_ArgumentMustBeOfType();
    internal static string get_BaseTypeNotSpecified();
    internal static string get_BatchRequestInvalidMediaType();
    internal static string get_BatchRequestMissingBoundary();
    internal static string get_BatchRequestMissingContent();
    internal static string get_BatchRequestMissingContentType();
    internal static string get_BinaryOperatorNotSupported();
    internal static string get_CannotAddToNullCollection();
    internal static string get_CannotApplyETagOfT();
    internal static string get_CannotApplyODataQueryOptionsOfT();
    internal static string get_CannotAutoCreateMultipleCandidates();
    internal static string get_CannotCastFilter();
    internal static string get_MissingConvertNode();
    internal static string get_CannotCreateInstanceForProperty();
    internal static string get_CannotDefineKeysOnDerivedTypes();
    internal static string get_CannotDeserializeUnknownProperty();
    internal static string get_CannotGetEnumClrMember();
    internal static string get_CannotInferEdmType();
    internal static string get_CannotInstantiateAbstractResourceType();
    internal static string get_CannotPatchNavigationProperties();
    internal static string get_CannotRecognizeNodeType();
    internal static string get_CannotReconfigEntityTypeAsComplexType();
    internal static string get_CannotRedefineBaseTypeProperty();
    internal static string get_CannotReEnableDependencyInjection();
    internal static string get_CannotSerializerNull();
    internal static string get_CannotSetDynamicPropertyDictionary();
    internal static string get_CannotWriteType();
    internal static string get_CantFindEdmType();
    internal static string get_ChangedObjectTypeMismatch();
    internal static string get_ClrTypeNotInModel();
    internal static string get_CollectionNavigationPropertyEntityTypeDoesntHaveKeyDefined();
    internal static string get_CollectionParameterShouldHaveAddMethod();
    internal static string get_CollectionPropertiesMustReturnIEnumerable();
    internal static string get_CollectionShouldHaveAddMethod();
    internal static string get_CollectionShouldHaveClearMethod();
    internal static string get_ContentID();
    internal static string get_ConstraintAlreadyExists();
    internal static string get_ConvertToEnumFailed();
    internal static string get_CreateODataValueNotSupported();
    internal static string get_DataModificationException();
    internal static string get_DeltaEntityTypeNotAssignable();
    internal static string get_DeltaLinkNotSupported();
    internal static string get_DeltaNestedResourceNameNotFound();
    internal static string get_DeltaTypeMismatch();
    internal static string get_DependentAndPrincipalTypeNotMatch();
    internal static string get_DeserializerDoesNotSupportRead();
    internal static string get_DoesNotSupportReadInLine();
    internal static string get_DuplicateDynamicPropertyNameFound();
    internal static string get_DuplicateKeyInSegment();
    internal static string get_DynamicPropertyCannotBeSerialized();
    internal static string get_DynamicPropertyNameAlreadyUsedAsDeclaredPropertyName();
    internal static string get_DynamicResourceSetTypeNameIsRequired();
    internal static string get_EditLinkNullForLocationHeader();
    internal static string get_EdmComplexObjectNullRef();
    internal static string get_EdmObjectNull();
    internal static string get_EdmTypeCannotBeNull();
    internal static string get_EdmTypeNotSupported();
    internal static string get_ElementClrTypeNull();
    internal static string get_EmptyKeyTemplate();
    internal static string get_EmptyParameterAlias();
    internal static string get_EntityReferenceMustHasKeySegment();
    internal static string get_EntitySetAlreadyConfiguredDifferentEntityType();
    internal static string get_EntitySetMissingDuringSerialization();
    internal static string get_EntitySetNameAlreadyConfiguredAsSingleton();
    internal static string get_EntitySetNotFoundForName();
    internal static string get_EntitySetTypeHasNoKeys();
    internal static string get_EntityTypeDoesntHaveKeyDefined();
    internal static string get_EntityTypeMismatch();
    internal static string get_EnumTypeDoesNotExist();
    internal static string get_EnumValueCannotBeLong();
    internal static string get_EqualExpressionsMustHaveSameTypes();
    internal static string get_ErrorTypeMustBeODataErrorOrHttpError();
    internal static string get_ETagNotWellFormed();
    internal static string get_ExpandFilterExpressionNotLambdaExpression();
    internal static string get_FailedToBuildEdmModelBecauseReturnTypeIsNull();
    internal static string get_FailedToRetrieveTypeToBuildEdmModel();
    internal static string get_FormatterReadIsNotSupportedForType();
    internal static string get_FunctionNotBoundToCollectionOfEntity();
    internal static string get_FunctionNotBoundToEntity();
    internal static string get_FunctionNotSupportedOnEnum();
    internal static string get_FunctionParameterNotFound();
    internal static string get_GetEdmModelCalledMoreThanOnce();
    internal static string get_GetOnlyCollectionCannotBeArray();
    internal static string get_HasActionLinkRequiresBindToCollectionOfEntity();
    internal static string get_HasActionLinkRequiresBindToEntity();
    internal static string get_HasFunctionLinkRequiresBindToCollectionOfEntity();
    internal static string get_HasFunctionLinkRequiresBindToEntity();
    internal static string get_IdLinkNullForEntityIdHeader();
    internal static string get_InvalidAttributeRoutingTemplateSegment();
    internal static string get_InvalidBatchReaderState();
    internal static string get_InvalidBindingParameterType();
    internal static string get_InvalidDollarId();
    internal static string get_InvalidEntitySetName();
    internal static string get_InvalidETagHandler();
    internal static string get_InvalidExpansionDepthValue();
    internal static string get_InvalidLastSegmentInSelectExpandPath();
    internal static string get_InvalidODataPathTemplate();
    internal static string get_InvalidODataRouteOnAction();
    internal static string get_InvalidODataUntypedValue();
    internal static string get_InvalidPathSegment();
    internal static string get_InvalidPropertyInfoForDynamicPropertyAnnotation();
    internal static string get_InvalidPropertyMapper();
    internal static string get_InvalidPropertyMapping();
    internal static string get_InvalidSegmentInSelectExpandPath();
    internal static string get_InvalidSingleQuoteCountForNonStringLiteral();
    internal static string get_InvalidSingletonName();
    internal static string get_InvalidTimeZoneInfo();
    internal static string get_KeyTemplateMustBeInCurlyBraces();
    internal static string get_KeyValueCannotBeNull();
    internal static string get_LambdaExpressionMustHaveExactlyOneParameter();
    internal static string get_LambdaExpressionMustHaveExactlyTwoParameters();
    internal static string get_LiteralHasABadFormat();
    internal static string get_ManyNavigationPropertiesCannotBeChanged();
    internal static string get_ManyToManyNavigationPropertyMustReturnCollection();
    internal static string get_MappingDoesNotContainResourceType();
    internal static string get_MaxAnyAllExpressionLimitExceeded();
    internal static string get_MaxExpandDepthExceeded();
    internal static string get_MaxNodeLimitExceeded();
    internal static string get_MemberExpressionsMustBeBoundToLambdaParameter();
    internal static string get_MemberExpressionsMustBeProperties();
    internal static string get_MissingNonODataContainer();
    internal static string get_MissingODataContainer();
    internal static string get_MissingODataServices();
    internal static string get_ModelBinderUtil_ModelMetadataCannotBeNull();
    internal static string get_ModelBinderUtil_ValueCannotBeEnum();
    internal static string get_ModelMissingFromReadContext();
    internal static string get_MoreThanOneDynamicPropertyContainerFound();
    internal static string get_MoreThanOneAnnotationPropertyContainerFound();
    internal static string get_AnnotationPropertyNameAlreadyUsedAsDeclaredPropertyName();
    internal static string get_DuplicateAnnotationPropertyNameFound();
    internal static string get_CannotSetAnnotationPropertyDictionary();
    internal static string get_InstanceAnnotationCannotBeSerialized();
    internal static string get_InstanceAnnotationNotContain();
    internal static string get_InstanceAnnotationShouldContain();
    internal static string get_InstanceAnnotationNotEmpty();
    internal static string get_InstanceAnnotationPropertyNotEmpty();
    internal static string get_TypeOfInstanceAnnotationNotSupported();
    internal static string get_InvalidPropertyInfoForAnnotationPropertyAnnotation();
    internal static string get_MoreThanOneOperationFound();
    internal static string get_MoreThanOneOverloadActionBoundToSameTypeFound();
    internal static string get_MoreThanOneUnboundActionFound();
    internal static string get_MultipleAttributesFound();
    internal static string get_MultipleMatchingClrTypesForEdmType();
    internal static string get_MustBeCollectionProperty();
    internal static string get_MustBeComplexProperty();
    internal static string get_MustBeDateTimeProperty();
    internal static string get_MustBeEnumProperty();
    internal static string get_MustBeNavigationProperty();
    internal static string get_MustBePrimitiveProperty();
    internal static string get_MustBePrimitiveType();
    internal static string get_MustBeTimeSpanProperty();
    internal static string get_MustHaveMatchingMultiplicity();
    internal static string get_NavigationPropertyBindingPathIsNotValid();
    internal static string get_NavigationPropertyBindingPathNotInHierarchy();
    internal static string get_NavigationPropertyBindingPathNotSupported();
    internal static string get_NavigationPropertyNotInHierarchy();
    internal static string get_NavigationSourceMissingDuringDeserialization();
    internal static string get_NavigationSourceMissingDuringSerialization();
    internal static string get_NavigationSourceTypeHasNoKeys();
    internal static string get_NestedCollectionsNotSupported();
    internal static string get_NestedPropertyNotfound();
    internal static string get_NoClrTypeSpecified();
    internal static string get_NoKeyNameFoundInSegment();
    internal static string get_NoMatchingIEdmTypeFound();
    internal static string get_NoMatchingResource();
    internal static string get_NonNullUriRequiredForMediaTypeMapping();
    internal static string get_NoNonODataHttpRouteRegistered();
    internal static string get_NonSelectExpandOnSingleEntity();
    internal static string get_NoRoutingHandlerToSelectAction();
    internal static string get_NotADerivedType();
    internal static string get_NotAllowedArithmeticOperator();
    internal static string get_NotAllowedFunction();
    internal static string get_NotAllowedLogicalOperator();
    internal static string get_NotAllowedOrderByProperty();
    internal static string get_NotAllowedQueryOption();
    internal static string get_NotCountableEntitySetUsedForCount();
    internal static string get_NotCountablePropertyUsedForCount();
    internal static string get_NotExpandablePropertyUsedInExpand();
    internal static string get_NotFilterablePropertyUsedInFilter();
    internal static string get_NotNavigablePropertyUsedInNavigation();
    internal static string get_NotSelectablePropertyUsedInSelect();
    internal static string get_NotSortablePropertyUsedInOrderBy();
    internal static string get_NotSupportedTransformationKind();
    internal static string get_NoValueLiteralFoundInSegment();
    internal static string get_NullContainer();
    internal static string get_NullContainerBuilder();
    internal static string get_NullElementInCollection();
    internal static string get_NullETagHandler();
    internal static string get_NullOnNonNullableFunctionParameter();
    internal static string get_Object_NotYetInitialized();
    internal static string get_ObjectToDeleteNotFound();
    internal static string get_ODataFunctionNotSupported();
    internal static string get_ODataPathMissing();
    internal static string get_ODataPathNotFound();
    internal static string get_OperationHasInvalidEntitySetPath();
    internal static string get_OperationImportSegmentMustBeFunction();
    internal static string get_OperationSegmentMustBeFunction();
    internal static string get_OrderByClauseNotSupported();
    internal static string get_OrderByDuplicateIt();
    internal static string get_OrderByDuplicateProperty();
    internal static string get_OrderByNodeCountExceeded();
    internal static string get_ParameterAliasMustBeInCurlyBraces();
    internal static string get_ParameterTypeIsNotCollection();
    internal static string get_PropertyAlreadyDefinedInDerivedType();
    internal static string get_PropertyDoesNotBelongToType();
    internal static string get_PropertyIsNotCollection();
    internal static string get_PropertyMustBeBoolean();
    internal static string get_PropertyMustBeDateTimeOffsetOrDate();
    internal static string get_PropertyMustBeEnum();
    internal static string get_PropertyMustBeString();
    internal static string get_PropertyMustBeStringLengthOne();
    internal static string get_PropertyMustBeStringMaxLengthOne();
    internal static string get_PropertyMustBeTimeOfDay();
    internal static string get_PropertyMustHavePublicGetterAndSetter();
    internal static string get_PropertyTypeShouldBeOfType();
    internal static string get_PropertyNotFound();
    internal static string get_PropertyOrPathWasRemovedFromContext();
    internal static string get_QueryCannotBeEmpty();
    internal static string get_QueryGetModelMustNotReturnNull();
    internal static string get_QueryingRequiresObjectContent();
    internal static string get_QueryNodeBindingNotSupported();
    internal static string get_QueryNodeValidationNotSupported();
    internal static string get_QueryParameterNotSupported();
    internal static string get_ReadFromStreamAsyncMustHaveRequest();
    internal static string get_RebindingNotSupported();
    internal static string get_ReferenceNavigationPropertyExpandFilterVisitorUnexpectedParameter();
    internal static string get_ReferentialConstraintAlreadyConfigured();
    internal static string get_ReferentialConstraintOnManyNavigationPropertyNotSupported();
    internal static string get_ReferentialConstraintPropertyTypeNotValid();
    internal static string get_RequestContainerAlreadyExists();
    internal static string get_RequestMustContainConfiguration();
    internal static string get_RequestMustHaveModel();
    internal static string get_RequestMustHaveODataRouteName();
    internal static string get_RequestNotActionInvocation();
    internal static string get_RequestUriTooShortForODataPath();
    internal static string get_ResourcesShouldbePresent();
    internal static string get_ResourceSetWrapperSupported();
    internal static string get_ResourceTypeNotInModel();
    internal static string get_ReturnEntityCollectionWithoutEntitySet();
    internal static string get_ReturnEntityWithoutEntitySet();
    internal static string get_ReturnTypeOfOperationNotSpecified();
    internal static string get_RootElementNameMissing();
    internal static string get_RoutePrefixStartsWithSlash();
    internal static string get_SelectExpandEmptyOrNull();
    internal static string get_SelectionTypeNotSupported();
    internal static string get_SelectNonStructured();
    internal static string get_ShouldHaveNavigationPropertyInNavigationExpandPath();
    internal static string get_SingleResultHasMoreThanOneEntity();
    internal static string get_SingletonAlreadyConfiguredDifferentEntityType();
    internal static string get_SingletonNameAlreadyConfiguredAsEntitySet();
    internal static string get_SkipTokenParseError();
    internal static string get_SkipTokenProcessingError();
    internal static string get_SkipTopLimitExceeded();
    internal static string get_TargetEntityTypeMissing();
    internal static string get_TargetKindNotImplemented();
    internal static string get_TypeCannotBeComplexWasEntity();
    internal static string get_TypeCannotBeDeserialized();
    internal static string get_TypeCannotBeEntityWasComplex();
    internal static string get_TypeCannotBeEnum();
    internal static string get_TypeCannotBeSerialized();
    internal static string get_TypeDoesNotInheritFromBaseType();
    internal static string get_TypeMustBeEntity();
    internal static string get_TypeMustBeEnumOrNullableEnum();
    internal static string get_TypeMustBeResourceSet();
    internal static string get_TypeOfDynamicPropertyNotSupported();
    internal static string get_UnableToDetermineBaseUrl();
    internal static string get_UnableToDetermineMetadataUrl();
    internal static string get_UnaryNodeValidationNotSupported();
    internal static string get_UnexpectedElementType();
    internal static string get_UnresolvedPathSegmentInTemplate();
    internal static string get_UnsupportedEdmType();
    internal static string get_UnsupportedEdmTypeKind();
    internal static string get_UnsupportedExpressionNodeType();
    internal static string get_UnsupportedExpressionNodeTypeWithName();
    internal static string get_UnsupportedSelectExpandPath();
    internal static string get_UnterminatedStringLiteral();
    internal static string get_UriFunctionClrBinderAlreadyBound();
    internal static string get_UriQueryStringInvalid();
    internal static string get_UrlHelperNull();
    internal static string get_ValueIsInvalid();
    internal static string get_WriteObjectInlineNotSupported();
    internal static string get_WriteObjectNotSupported();
    internal static string get_WriteToStreamAsyncMustHaveRequest();
    internal static string get_CannotParseQueryOptionsPayload();
    internal static string get_CannotFindParserForRequestMediaType();
    internal static string get_QueryOptionsMustNotBeRepeated();
    internal static string get_QueryOptionsNotInExpectedFormat();
    internal static string get_JsonConverterDoesNotSupportRead();
}
internal static class Microsoft.AspNet.OData.Common.TaskHelpers : object {
    private static Task _defaultCompleted;
    private static TaskHelpers();
    internal static Task Canceled();
    internal static Task Completed();
    internal static Task FromError(Exception exception);
    internal static Task`1<TResult> FromError(Exception exception);
}
[FlagsAttribute]
public enum Microsoft.AspNet.OData.CompatibilityOptions : Enum {
    public int value__;
    public static CompatibilityOptions None;
    public static CompatibilityOptions AllowNextLinkWithNonPositiveTopValue;
    public static CompatibilityOptions DisableCaseInsensitiveRequestPropertyBinding;
    public static CompatibilityOptions ThrowExceptionAfterLoggingModelStateError;
    public static CompatibilityOptions DisableODataQueryOptionsReuse;
}
[ExtensionAttribute]
public static class Microsoft.AspNet.OData.CompatibilityOptionsExtensions : object {
    [ExtensionAttribute]
public static bool HasOption(CompatibilityOptions options, CompatibilityOptions option);
}
public class Microsoft.AspNet.OData.ConcurrencyPropertiesAnnotation : ConcurrentDictionary`2<IEdmNavigationSource, IEnumerable`1<IEdmStructuralProperty>> {
}
internal static class Microsoft.AspNet.OData.ContentIdHelpers : object {
    public static string ResolveContentId(string url, IDictionary`2<string, string> contentIdToLocationMapping);
    public static void AddLocationHeaderToMapping(Uri location, IDictionary`2<string, string> contentIdToLocationMapping, string contentId);
    private static bool IsContentIdCharacter(char c);
}
public class Microsoft.AspNet.OData.CustomAggregateMethodAnnotation : object {
    private Dictionary`2<string, IDictionary`2<Type, MethodInfo>> _tokenToMethodMap;
    public CustomAggregateMethodAnnotation AddMethod(string methodToken, IDictionary`2<Type, MethodInfo> methods);
    public bool GetMethodInfo(string methodToken, Type returnType, MethodInfo& methodInfo);
}
public class Microsoft.AspNet.OData.DefaultContainerBuilder : object {
    private IServiceCollection services;
    public virtual IContainerBuilder AddService(ServiceLifetime lifetime, Type serviceType, Type implementationType);
    public sealed virtual IContainerBuilder AddService(ServiceLifetime lifetime, Type serviceType, Func`2<IServiceProvider, object> implementationFactory);
    public virtual IServiceProvider BuildContainer();
    private IServiceProvider BuildServiceProviderImpl();
    private static ServiceLifetime TranslateServiceLifetime(ServiceLifetime lifetime);
}
internal class Microsoft.AspNet.OData.DefaultEdmODataAPIHandler : EdmODataAPIHandler {
    private IEdmEntityType entityType;
    private ICollection`1<IEdmStructuredObject> originalList;
    public DefaultEdmODataAPIHandler(ICollection`1<IEdmStructuredObject> originalList, IEdmEntityType entityType);
    public virtual ODataAPIResponseStatus TryGet(IDictionary`2<string, object> keyValues, IEdmStructuredObject& originalObject, String& errorMessage);
    public virtual ODataAPIResponseStatus TryCreate(IDictionary`2<string, object> keyValues, IEdmStructuredObject& createdObject, String& errorMessage);
    public virtual ODataAPIResponseStatus TryDelete(IDictionary`2<string, object> keyValues, String& errorMessage);
    public virtual ODataAPIResponseStatus TryAddRelatedObject(IEdmStructuredObject resource, String& errorMessage);
    public virtual EdmODataAPIHandler GetNestedHandler(IEdmStructuredObject parent, string navigationPropertyName);
    private EdmStructuredObject GetFilteredItem(IDictionary`2<string, object> keyValues);
}
internal class Microsoft.AspNet.OData.DefaultODataAPIHandler`1 : ODataAPIHandler`1<TStructuralType> {
    private Type clrType;
    private ICollection`1<TStructuralType> originalList;
    public DefaultODataAPIHandler`1(ICollection`1<TStructuralType> originalList);
    public virtual ODataAPIResponseStatus TryGet(IDictionary`2<string, object> keyValues, TStructuralType& originalObject, String& errorMessage);
    public virtual ODataAPIResponseStatus TryCreate(IDictionary`2<string, object> keyValues, TStructuralType& createdObject, String& errorMessage);
    public virtual ODataAPIResponseStatus TryDelete(IDictionary`2<string, object> keyValues, String& errorMessage);
    public virtual IODataAPIHandler GetNestedHandler(TStructuralType parent, string navigationPropertyName);
    public virtual ODataAPIResponseStatus TryAddRelatedObject(TStructuralType resource, String& errorMessage);
    private TStructuralType GetFilteredItem(IDictionary`2<string, object> keyValues);
    public virtual Task`1<ODataAPIResponseStatus> TryCreateAsync(IDictionary`2<string, object> keyValues, TStructuralType& createdObject, String& errorMessage);
    public virtual Task`1<ODataAPIResponseStatus> TryGetAsync(IDictionary`2<string, object> keyValues, TStructuralType& originalObject, String& errorMessage);
    public virtual Task`1<ODataAPIResponseStatus> TryDeleteAsync(IDictionary`2<string, object> keyValues, String& errorMessage);
    public virtual Task`1<ODataAPIResponseStatus> TryAddRelatedObjectAsync(TStructuralType resource, String& errorMessage);
    public virtual IODataAPIHandler GetNestedHandlerAsync(TStructuralType parent, string navigationPropertyName);
}
[NonValidatingParameterBindingAttribute]
public abstract class Microsoft.AspNet.OData.Delta : DynamicObject {
    public abstract virtual void Clear();
    public abstract virtual bool TrySetPropertyValue(string name, object value);
    public abstract virtual bool TryGetPropertyValue(string name, Object& value);
    public abstract virtual bool TryGetPropertyType(string name, Type& type);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public abstract virtual IEnumerable`1<string> GetChangedPropertyNames();
    public abstract virtual IEnumerable`1<string> GetUnchangedPropertyNames();
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNet.OData.Delta`1 : TypedDelta {
    private static ConcurrentDictionary`2<Type, Dictionary`2<string, PropertyAccessor`1<TStructuralType>>> _propertyCache;
    private Dictionary`2<string, PropertyAccessor`1<TStructuralType>> _allProperties;
    private List`1<string> _updatableProperties;
    private HashSet`1<string> _changedProperties;
    private IDictionary`2<string, object> _deltaNestedResources;
    private TStructuralType _instance;
    private Type _structuredType;
    private PropertyInfo _dynamicDictionaryPropertyinfo;
    private PropertyInfo _instanceAnnotationsPropertyInfo;
    private HashSet`1<string> _changedDynamicProperties;
    private IDictionary`2<string, object> _dynamicDictionaryCache;
    [CompilerGeneratedAttribute]
private Type <ExpectedClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsComplexType>k__BackingField;
    [CompilerGeneratedAttribute]
private EdmDeltaEntityKind <DeltaKind>k__BackingField;
    [CompilerGeneratedAttribute]
private IODataInstanceAnnotationContainer <TransientInstanceAnnotationContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataIdContainer <ODataIdContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataPath <ODataPath>k__BackingField;
    public Type StructuredType { get; }
    internal IDictionary`2<string, object> DeltaNestedResources { get; }
    public Type ExpectedClrType { get; }
    public IList`1<string> UpdatableProperties { get; }
    public bool IsComplexType { get; private set; }
    public EdmDeltaEntityKind DeltaKind { get; protected set; }
    public IODataInstanceAnnotationContainer TransientInstanceAnnotationContainer { get; public set; }
    public ODataIdContainer ODataIdContainer { get; public set; }
    public ODataPath ODataPath { get; public set; }
    internal PropertyInfo InstanceAnnotationsPropertyInfo { get; }
    public Delta`1(Type structuralType);
    public Delta`1(Type structuralType, IEnumerable`1<string> updatableProperties);
    public Delta`1(Type structuralType, IEnumerable`1<string> updatableProperties, PropertyInfo dynamicDictionaryPropertyInfo);
    public Delta`1(Type structuralType, IEnumerable`1<string> updatableProperties, PropertyInfo dynamicDictionaryPropertyInfo, bool isComplexType);
    public Delta`1(Type structuralType, IEnumerable`1<string> updatableProperties, PropertyInfo dynamicDictionaryPropertyInfo, bool isComplexType, PropertyInfo instanceAnnotationsPropertyInfo);
    private static Delta`1();
    public virtual Type get_StructuredType();
    internal IDictionary`2<string, object> get_DeltaNestedResources();
    [CompilerGeneratedAttribute]
public virtual Type get_ExpectedClrType();
    public IList`1<string> get_UpdatableProperties();
    [CompilerGeneratedAttribute]
public bool get_IsComplexType();
    [CompilerGeneratedAttribute]
private void set_IsComplexType(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual EdmDeltaEntityKind get_DeltaKind();
    [CompilerGeneratedAttribute]
protected void set_DeltaKind(EdmDeltaEntityKind value);
    [CompilerGeneratedAttribute]
public sealed virtual IODataInstanceAnnotationContainer get_TransientInstanceAnnotationContainer();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransientInstanceAnnotationContainer(IODataInstanceAnnotationContainer value);
    [CompilerGeneratedAttribute]
public sealed virtual ODataIdContainer get_ODataIdContainer();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ODataIdContainer(ODataIdContainer value);
    [CompilerGeneratedAttribute]
public sealed virtual ODataPath get_ODataPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ODataPath(ODataPath value);
    internal PropertyInfo get_InstanceAnnotationsPropertyInfo();
    public virtual void Clear();
    public virtual bool TrySetPropertyValue(string name, object value);
    public virtual bool TryGetPropertyValue(string name, Object& value);
    public bool TryGetNestedPropertyValue(string name, Object& value);
    public virtual bool TryGetPropertyType(string name, Type& type);
    public TStructuralType GetInstance();
    public virtual IEnumerable`1<string> GetChangedPropertyNames();
    public virtual IEnumerable`1<string> GetUnchangedPropertyNames();
    internal IEnumerable`1<string> GetAllPropertyNames();
    public TStructuralType CopyChangedValues(TStructuralType original);
    internal TStructuralType CopyChangedValues(TStructuralType original, ODataAPIHandler`1<TStructuralType> apiHandler, ODataAPIHandlerFactory apiHandlerFactory);
    public void CopyUnchangedValues(TStructuralType original);
    public TStructuralType Patch(TStructuralType original);
    public void Patch(TStructuralType original, IODataAPIHandler apiHandler);
    public void Patch(TStructuralType original, IODataAPIHandler apiHandler, ODataAPIHandlerFactory apiHandlerFactory);
    public void Put(TStructuralType original);
    internal void UpdateUnchangedPropertiesInInstanceObject(TStructuralType original);
    private static object ReassignComplexDerivedType(object originalValue, Type newType, Type originalType, Type declaredType);
    private static void CopyDynamicPropertyDictionary(IDictionary`2<string, object> source, IDictionary`2<string, object> dest, PropertyInfo dynamicPropertyInfo, TStructuralType targetEntity);
    private static IDictionary`2<string, object> GetDynamicPropertyDictionary(PropertyInfo propertyInfo, TStructuralType entity, bool create);
    private static bool TryGetPropertyRef(TStructuralType structural, string propertyName, Object& propertyRef);
    private void Reset(Type structuralType);
    private void InitializeProperties(IEnumerable`1<string> updatableProperties);
    private static bool IsIgnoredProperty(bool isTypeDataContract, PropertyInfo propertyInfo);
    private void CopyChangedDynamicValues(TStructuralType targetEntity);
    private void CopyChangedNestedProperties(TStructuralType original, ODataAPIHandler`1<TStructuralType> apiHandler, ODataAPIHandlerFactory apiHandlerFactory);
    private void CopyUnchangedDynamicValues(TStructuralType targetEntity);
    private bool TrySetPropertyValueInternal(string name, object value);
    private bool TrySetNestedResourceInternal(string name, object deltaNestedResource);
    [CompilerGeneratedAttribute]
private PropertyAccessor`1<TStructuralType> <CopyChangedValues>b__58_0(string s);
    [CompilerGeneratedAttribute]
private PropertyAccessor`1<TStructuralType> <CopyUnchangedValues>b__59_0(string s);
    [CompilerGeneratedAttribute]
private PropertyAccessor`1<TStructuralType> <UpdateUnchangedPropertiesInInstanceObject>b__64_0(string s);
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNet.OData.DeltaDeletedEntityObject`1 : Delta`1<TStructuralType> {
    [CompilerGeneratedAttribute]
private Uri <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DeltaDeletedEntryReason> <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NavigationSource>k__BackingField;
    public Uri Id { get; public set; }
    public Nullable`1<DeltaDeletedEntryReason> Reason { get; public set; }
    public string NavigationSource { get; public set; }
    public DeltaDeletedEntityObject`1(Type structuralType);
    public DeltaDeletedEntityObject`1(Type structuralType, IEnumerable`1<string> updatableProperties);
    public DeltaDeletedEntityObject`1(Type structuralType, PropertyInfo instanceAnnotationsPropertyInfo);
    public DeltaDeletedEntityObject`1(Type structuralType, PropertyInfo dynamicDictionaryPropertyInfo, PropertyInfo instanceAnnotationsPropertyInfo);
    public DeltaDeletedEntityObject`1(Type structuralType, IEnumerable`1<string> updatableProperties, PropertyInfo dynamicDictionaryPropertyInfo, PropertyInfo instanceAnnotationsPropertyInfo);
    public DeltaDeletedEntityObject`1(Type structuralType, IEnumerable`1<string> updatableProperties, PropertyInfo dynamicDictionaryPropertyInfo, bool isComplexType, PropertyInfo instanceAnnotationsPropertyInfo);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Id(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DeltaDeletedEntryReason> get_Reason();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Reason(Nullable`1<DeltaDeletedEntryReason> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_NavigationSource();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NavigationSource(string value);
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNet.OData.DeltaSet`1 : Collection`1<IDeltaSetItem> {
    private Type _clrType;
    private IList`1<string> _keys;
    public DeltaSet`1(IList`1<string> keys);
    protected virtual void InsertItem(int index, IDeltaSetItem item);
    public DeltaSet`1<TStructuralType> Patch(ICollection`1<TStructuralType> originalCollection);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.DeltaSet`1/<PatchAsync>d__5")]
public Task`1<DeltaSet`1<TStructuralType>> PatchAsync(ICollection`1<TStructuralType> originalCollection);
    public DeltaSet`1<TStructuralType> Patch(ODataAPIHandler`1<TStructuralType> apiHandlerOfT);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.DeltaSet`1/<PatchAsync>d__7")]
public Task`1<DeltaSet`1<TStructuralType>> PatchAsync(ODataAPIHandler`1<TStructuralType> apiHandlerOfT);
    public DeltaSet`1<TStructuralType> Patch(ODataAPIHandler`1<TStructuralType> apiHandlerOfT, ODataAPIHandlerFactory apiHandlerFactory);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.DeltaSet`1/<PatchAsync>d__9")]
public Task`1<DeltaSet`1<TStructuralType>> PatchAsync(ODataAPIHandler`1<TStructuralType> apiHandlerOfT, ODataAPIHandlerFactory apiHandlerFactory);
    internal DeltaSet`1<TStructuralType> CopyChangedValues(IODataAPIHandler apiHandler, ODataAPIHandlerFactory apiHandlerFactory);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.DeltaSet`1/<CopyChangedValuesAsync>d__11")]
internal Task`1<DeltaSet`1<TStructuralType>> CopyChangedValuesAsync(IODataAPIHandler apiHandler, ODataAPIHandlerFactory apiHandlerFactory);
    private DeltaSet`1<TStructuralType> CreateDeltaSet();
    private IDeltaSetItem HandleFailedOperation(Delta`1<TStructuralType> changedObj, DataModificationOperationKind operation, TStructuralType originalObj, string errorMessage);
    private IDeltaSetItem CreateEntityObjectForFailedOperation(Delta`1<TStructuralType> changedObj, TStructuralType originalObj);
    private void SetProperties(TStructuralType originalObj, Delta`1<TStructuralType> edmDeltaEntityObject);
    private DeltaDeletedEntityObject`1<TStructuralType> CreateDeletedEntityForFailedOperation(Delta`1<TStructuralType> changedObj);
    private static void ValidateForDeletedEntityId(IList`1<string> keys, DeltaDeletedEntityObject`1<TStructuralType> edmDeletedObject);
    private static void SetPropertyValues(Delta`1<TStructuralType> changedObj, DeltaDeletedEntityObject`1<TStructuralType> edmDeletedObject, string property);
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNet.OData.EdmChangedObjectCollection : Collection`1<IEdmChangedObject> {
    private IEdmEntityType _entityType;
    private EdmDeltaCollectionType _edmType;
    private IEdmCollectionTypeReference _edmTypeReference;
    public IEdmEntityType EntityType { get; }
    public EdmChangedObjectCollection(IEdmEntityType entityType);
    public EdmChangedObjectCollection(IEdmEntityType entityType, IList`1<IEdmChangedObject> changedObjectList);
    public IEdmEntityType get_EntityType();
    public sealed virtual IEdmTypeReference GetEdmType();
    private void Initialize(IEdmEntityType entityType);
    internal EdmChangedObjectCollection Patch(ICollection`1<IEdmStructuredObject> originalCollection);
    internal EdmChangedObjectCollection Patch(EdmODataAPIHandler apiHandler, EdmODataAPIHandlerFactory apiHandlerFactory);
    internal EdmChangedObjectCollection CopyChangedValues(EdmODataAPIHandler apiHandler, EdmODataAPIHandlerFactory apiHandlerFactory);
    private static IDictionary`2<string, object> GetKeyValues(IEdmStructuralProperty[] keys, IEdmChangedObject changedObj);
    private void PatchItem(EdmStructuredObject changedObj, EdmStructuredObject originalObj, EdmODataAPIHandler apiHandler, EdmODataAPIHandlerFactory apiHandlerFactory);
    private void ApplyODataId(ODataPath oDataPath, EdmStructuredObject original, EdmODataAPIHandlerFactory apiHandlerFactory);
    private void ApplyProperties(EdmStructuredObject changedObj, EdmStructuredObject originalObj, string propertyName, EdmODataAPIHandler apiHandler, EdmODataAPIHandlerFactory apiHandlerFactory);
    private IEdmChangedObject HandleFailedOperation(EdmEntityObject changedObj, DataModificationOperationKind operation, IEdmStructuredObject originalObj, IEdmStructuralProperty[] keys, string errorMessage, EdmODataAPIHandler apiHandler);
    private static void ValidateForDeletedEntityId(IEdmStructuralProperty[] keys, EdmDeltaDeletedEntityObject edmDeletedObject);
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNet.OData.EdmComplexObject : EdmStructuredObject {
    public EdmComplexObject(IEdmComplexType edmType);
    public EdmComplexObject(IEdmComplexTypeReference edmType);
    public EdmComplexObject(IEdmComplexType edmType, bool isNullable);
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNet.OData.EdmComplexObjectCollection : Collection`1<IEdmComplexObject> {
    private IEdmCollectionTypeReference _edmType;
    public EdmComplexObjectCollection(IEdmCollectionTypeReference edmType);
    public EdmComplexObjectCollection(IEdmCollectionTypeReference edmType, IList`1<IEdmComplexObject> list);
    public sealed virtual IEdmTypeReference GetEdmType();
    private void Initialize(IEdmCollectionTypeReference edmType);
}
internal class Microsoft.AspNet.OData.EdmDeltaCollectionType : object {
    private IEdmTypeReference _entityTypeReference;
    public EdmTypeKind TypeKind { get; }
    public IEdmTypeReference ElementType { get; }
    internal EdmDeltaCollectionType(IEdmTypeReference entityTypeReference);
    public sealed virtual EdmTypeKind get_TypeKind();
    public sealed virtual IEdmTypeReference get_ElementType();
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNet.OData.EdmDeltaComplexObject : EdmComplexObject {
    public EdmDeltaComplexObject(IEdmComplexType edmType);
    public EdmDeltaComplexObject(IEdmComplexTypeReference edmType);
    public EdmDeltaComplexObject(IEdmComplexType edmType, bool isNullable);
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNet.OData.EdmDeltaDeletedEntityObject : EdmEntityObject {
    private string _id;
    private DeltaDeletedEntryReason _reason;
    private IEdmNavigationSource _navigationSource;
    public string Id { get; public set; }
    public DeltaDeletedEntryReason Reason { get; public set; }
    public EdmDeltaEntityKind DeltaKind { get; }
    public IEdmNavigationSource NavigationSource { get; public set; }
    public EdmDeltaDeletedEntityObject(IEdmEntityType entityType);
    public EdmDeltaDeletedEntityObject(IEdmEntityTypeReference entityTypeReference);
    public EdmDeltaDeletedEntityObject(IEdmEntityType entityType, bool isNullable);
    public sealed virtual string get_Id();
    public sealed virtual void set_Id(string value);
    public sealed virtual DeltaDeletedEntryReason get_Reason();
    public sealed virtual void set_Reason(DeltaDeletedEntryReason value);
    public virtual EdmDeltaEntityKind get_DeltaKind();
    public IEdmNavigationSource get_NavigationSource();
    public void set_NavigationSource(IEdmNavigationSource value);
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNet.OData.EdmDeltaDeletedLink : EdmEntityObject {
    private Uri _source;
    private Uri _target;
    private string _relationship;
    public Uri Source { get; public set; }
    public Uri Target { get; public set; }
    public string Relationship { get; public set; }
    public EdmDeltaEntityKind DeltaKind { get; }
    public EdmDeltaDeletedLink(IEdmEntityType entityType);
    public EdmDeltaDeletedLink(IEdmEntityTypeReference entityTypeReference);
    public EdmDeltaDeletedLink(IEdmEntityType entityType, bool isNullable);
    public sealed virtual Uri get_Source();
    public sealed virtual void set_Source(Uri value);
    public sealed virtual Uri get_Target();
    public sealed virtual void set_Target(Uri value);
    public sealed virtual string get_Relationship();
    public sealed virtual void set_Relationship(string value);
    public virtual EdmDeltaEntityKind get_DeltaKind();
}
public enum Microsoft.AspNet.OData.EdmDeltaEntityKind : Enum {
    public int value__;
    public static EdmDeltaEntityKind Entry;
    public static EdmDeltaEntityKind DeletedEntry;
    public static EdmDeltaEntityKind DeletedLinkEntry;
    public static EdmDeltaEntityKind LinkEntry;
    public static EdmDeltaEntityKind Unknown;
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNet.OData.EdmDeltaEntityObject : EdmEntityObject {
    private IEdmNavigationSource _navigationSource;
    public EdmDeltaEntityKind DeltaKind { get; }
    public IEdmNavigationSource NavigationSource { get; public set; }
    public EdmDeltaEntityObject(IEdmEntityType entityType);
    public EdmDeltaEntityObject(IEdmEntityTypeReference entityTypeReference);
    public EdmDeltaEntityObject(IEdmEntityType entityType, bool isNullable);
    public virtual EdmDeltaEntityKind get_DeltaKind();
    public IEdmNavigationSource get_NavigationSource();
    public void set_NavigationSource(IEdmNavigationSource value);
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNet.OData.EdmDeltaLink : EdmEntityObject {
    private Uri _source;
    private Uri _target;
    private string _relationship;
    private EdmDeltaType _edmType;
    public Uri Source { get; public set; }
    public Uri Target { get; public set; }
    public string Relationship { get; public set; }
    public EdmDeltaEntityKind DeltaKind { get; }
    public EdmDeltaLink(IEdmEntityType entityType);
    public EdmDeltaLink(IEdmEntityTypeReference entityTypeReference);
    public EdmDeltaLink(IEdmEntityType entityType, bool isNullable);
    public sealed virtual Uri get_Source();
    public sealed virtual void set_Source(Uri value);
    public sealed virtual Uri get_Target();
    public sealed virtual void set_Target(Uri value);
    public sealed virtual string get_Relationship();
    public sealed virtual void set_Relationship(string value);
    public virtual EdmDeltaEntityKind get_DeltaKind();
}
internal class Microsoft.AspNet.OData.EdmDeltaType : object {
    private IEdmEntityType _entityType;
    private EdmDeltaEntityKind _deltaKind;
    public EdmTypeKind TypeKind { get; }
    public IEdmEntityType EntityType { get; }
    public EdmDeltaEntityKind DeltaKind { get; }
    internal EdmDeltaType(IEdmEntityType entityType, EdmDeltaEntityKind deltaKind);
    public sealed virtual EdmTypeKind get_TypeKind();
    public IEdmEntityType get_EntityType();
    public EdmDeltaEntityKind get_DeltaKind();
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNet.OData.EdmEntityObject : EdmStructuredObject {
    private IODataInstanceAnnotationContainer persistentInstanceAnnotationsContainer;
    private IODataInstanceAnnotationContainer transientInstanceAnnotationsContainer;
    [CompilerGeneratedAttribute]
private ODataIdContainer <ODataIdContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataPath <ODataPath>k__BackingField;
    internal IODataInstanceAnnotationContainer PersistentInstanceAnnotationsContainer { get; internal set; }
    internal IODataInstanceAnnotationContainer TransientInstanceAnnotationContainer { get; internal set; }
    internal ODataIdContainer ODataIdContainer { get; internal set; }
    public ODataPath ODataPath { get; public set; }
    public EdmDeltaEntityKind DeltaKind { get; }
    public EdmEntityObject(IEdmEntityType edmType);
    public EdmEntityObject(IEdmEntityTypeReference edmType);
    public EdmEntityObject(IEdmEntityType edmType, bool isNullable);
    internal IODataInstanceAnnotationContainer get_PersistentInstanceAnnotationsContainer();
    internal void set_PersistentInstanceAnnotationsContainer(IODataInstanceAnnotationContainer value);
    internal IODataInstanceAnnotationContainer get_TransientInstanceAnnotationContainer();
    internal void set_TransientInstanceAnnotationContainer(IODataInstanceAnnotationContainer value);
    [CompilerGeneratedAttribute]
internal ODataIdContainer get_ODataIdContainer();
    [CompilerGeneratedAttribute]
internal void set_ODataIdContainer(ODataIdContainer value);
    [CompilerGeneratedAttribute]
public ODataPath get_ODataPath();
    [CompilerGeneratedAttribute]
public void set_ODataPath(ODataPath value);
    public virtual EdmDeltaEntityKind get_DeltaKind();
    public void AddDataException(DataModificationExceptionType dataModificationException);
    public DataModificationExceptionType GetDataException();
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNet.OData.EdmEntityObjectCollection : Collection`1<IEdmEntityObject> {
    private IEdmCollectionTypeReference _edmType;
    public EdmEntityObjectCollection(IEdmCollectionTypeReference edmType);
    public EdmEntityObjectCollection(IEdmCollectionTypeReference edmType, IList`1<IEdmEntityObject> list);
    public sealed virtual IEdmTypeReference GetEdmType();
    private void Initialize(IEdmCollectionTypeReference edmType);
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNet.OData.EdmEnumObject : object {
    private IEdmType _edmType;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    public string Value { get; public set; }
    public bool IsNullable { get; public set; }
    public EdmEnumObject(IEdmEnumType edmType, string value);
    public EdmEnumObject(IEdmEnumTypeReference edmType, string value);
    public EdmEnumObject(IEdmEnumType edmType, string value, bool isNullable);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public bool get_IsNullable();
    [CompilerGeneratedAttribute]
public void set_IsNullable(bool value);
    public sealed virtual IEdmTypeReference GetEdmType();
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNet.OData.EdmEnumObjectCollection : Collection`1<IEdmEnumObject> {
    private IEdmCollectionTypeReference _edmType;
    public EdmEnumObjectCollection(IEdmCollectionTypeReference edmType);
    public EdmEnumObjectCollection(IEdmCollectionTypeReference edmType, IList`1<IEdmEnumObject> list);
    public sealed virtual IEdmTypeReference GetEdmType();
    private void Initialize(IEdmCollectionTypeReference edmType);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.AspNet.OData.EdmModelExtensions : object {
    [ExtensionAttribute]
public static NavigationSourceLinkBuilderAnnotation GetNavigationSourceLinkBuilder(IEdmModel model, IEdmNavigationSource navigationSource);
    [ExtensionAttribute]
public static void SetNavigationSourceLinkBuilder(IEdmModel model, IEdmNavigationSource navigationSource, NavigationSourceLinkBuilderAnnotation navigationSourceLinkBuilder);
    [ExtensionAttribute]
public static OperationLinkBuilder GetOperationLinkBuilder(IEdmModel model, IEdmOperation operation);
    [ExtensionAttribute]
public static void SetOperationLinkBuilder(IEdmModel model, IEdmOperation operation, OperationLinkBuilder operationLinkBuilder);
    [ExtensionAttribute]
internal static ClrTypeCache GetTypeMappingCache(IEdmModel model);
    [ExtensionAttribute]
internal static void SetOperationTitleAnnotation(IEdmModel model, IEdmOperation action, OperationTitleAnnotation title);
    [ExtensionAttribute]
internal static OperationTitleAnnotation GetOperationTitleAnnotation(IEdmModel model, IEdmOperation operation);
    private static OperationLinkBuilder GetDefaultOperationLinkBuilder(IEdmOperation operation);
}
public abstract class Microsoft.AspNet.OData.EdmODataAPIHandler : object {
    public abstract virtual ODataAPIResponseStatus TryCreate(IDictionary`2<string, object> keyValues, IEdmStructuredObject& createdObject, String& errorMessage);
    public abstract virtual ODataAPIResponseStatus TryGet(IDictionary`2<string, object> keyValues, IEdmStructuredObject& originalObject, String& errorMessage);
    public abstract virtual ODataAPIResponseStatus TryDelete(IDictionary`2<string, object> keyValues, String& errorMessage);
    public abstract virtual ODataAPIResponseStatus TryAddRelatedObject(IEdmStructuredObject resource, String& errorMessage);
    public abstract virtual EdmODataAPIHandler GetNestedHandler(IEdmStructuredObject parent, string navigationPropertyName);
}
internal abstract class Microsoft.AspNet.OData.EdmODataAPIHandlerFactory : object {
    [CompilerGeneratedAttribute]
private IEdmModel <Model>k__BackingField;
    public IEdmModel Model { get; }
    protected EdmODataAPIHandlerFactory(IEdmModel model);
    [CompilerGeneratedAttribute]
public IEdmModel get_Model();
    public abstract virtual EdmODataAPIHandler GetHandler(ODataPath odataPath);
    internal EdmODataAPIHandler GetHandler(string path);
}
[NonValidatingParameterBindingAttribute]
public abstract class Microsoft.AspNet.OData.EdmStructuredObject : Delta {
    private Dictionary`2<string, object> _container;
    private HashSet`1<string> _setProperties;
    private IEdmStructuredType _expectedEdmType;
    private IEdmStructuredType _actualEdmType;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    public IEdmStructuredType ExpectedEdmType { get; public set; }
    public IEdmStructuredType ActualEdmType { get; public set; }
    public bool IsNullable { get; public set; }
    protected EdmStructuredObject(IEdmStructuredType edmType);
    protected EdmStructuredObject(IEdmStructuredTypeReference edmType);
    protected EdmStructuredObject(IEdmStructuredType edmType, bool isNullable);
    public IEdmStructuredType get_ExpectedEdmType();
    public void set_ExpectedEdmType(IEdmStructuredType value);
    public IEdmStructuredType get_ActualEdmType();
    public void set_ActualEdmType(IEdmStructuredType value);
    [CompilerGeneratedAttribute]
public bool get_IsNullable();
    [CompilerGeneratedAttribute]
public void set_IsNullable(bool value);
    public virtual void Clear();
    public virtual bool TrySetPropertyValue(string name, object value);
    public virtual bool TryGetPropertyValue(string name, Object& value);
    public virtual bool TryGetPropertyType(string name, Type& type);
    public Dictionary`2<string, object> TryGetDynamicProperties();
    public virtual IEnumerable`1<string> GetChangedPropertyNames();
    public virtual IEnumerable`1<string> GetUnchangedPropertyNames();
    public sealed virtual IEdmTypeReference GetEdmType();
    internal static object GetDefaultValue(IEdmTypeReference propertyType);
    internal static Type GetClrTypeForUntypedDelta(IEdmTypeReference edmType);
    [CompilerGeneratedAttribute]
private bool <TryGetDynamicProperties>b__21_0(KeyValuePair`2<string, object> p);
}
[ExtensionAttribute]
public static class Microsoft.AspNet.OData.EdmTypeExtensions : object {
    [ExtensionAttribute]
public static bool IsDeltaFeed(IEdmType type);
    [ExtensionAttribute]
public static bool IsDeltaResource(IEdmObject resource);
}
internal class Microsoft.AspNet.OData.EdmTypeReferenceEqualityComparer : object {
    public sealed virtual bool Equals(IEdmTypeReference x, IEdmTypeReference y);
    public sealed virtual int GetHashCode(IEdmTypeReference obj);
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNet.OData.EnableQueryAttribute : ActionFilterAttribute {
    private static char CommaSeparator;
    private ODataValidationSettings _validationSettings;
    private string _allowedOrderByProperties;
    private ODataQuerySettings _querySettings;
    public bool EnsureStableOrdering { get; public set; }
    public HandleNullPropagationOption HandleNullPropagation { get; public set; }
    public bool EnableConstantParameterization { get; public set; }
    public bool EnableCorrelatedSubqueryBuffering { get; public set; }
    public int MaxAnyAllExpressionDepth { get; public set; }
    public int MaxNodeCount { get; public set; }
    public int PageSize { get; public set; }
    public bool HandleReferenceNavigationPropertyExpandFilter { get; public set; }
    public AllowedQueryOptions AllowedQueryOptions { get; public set; }
    public AllowedFunctions AllowedFunctions { get; public set; }
    public AllowedArithmeticOperators AllowedArithmeticOperators { get; public set; }
    public AllowedLogicalOperators AllowedLogicalOperators { get; public set; }
    public string AllowedOrderByProperties { get; public set; }
    public int MaxSkip { get; public set; }
    public int MaxTop { get; public set; }
    public int MaxExpansionDepth { get; public set; }
    public int MaxOrderByNodeCount { get; public set; }
    public virtual void OnActionExecuted(HttpActionExecutedContext actionExecutedContext);
    private static string GenerateExpandQueryFromPayload(HttpActionContext context);
    private ODataQueryOptions CreateAndValidateQueryOptions(HttpRequestMessage request, ODataQueryContext queryContext);
    public virtual void ValidateQuery(HttpRequestMessage request, ODataQueryOptions queryOptions);
    public virtual IEdmModel GetModel(Type elementClrType, HttpRequestMessage request, HttpActionDescriptor actionDescriptor);
    public bool get_EnsureStableOrdering();
    public void set_EnsureStableOrdering(bool value);
    public HandleNullPropagationOption get_HandleNullPropagation();
    public void set_HandleNullPropagation(HandleNullPropagationOption value);
    public bool get_EnableConstantParameterization();
    public void set_EnableConstantParameterization(bool value);
    public bool get_EnableCorrelatedSubqueryBuffering();
    public void set_EnableCorrelatedSubqueryBuffering(bool value);
    public int get_MaxAnyAllExpressionDepth();
    public void set_MaxAnyAllExpressionDepth(int value);
    public int get_MaxNodeCount();
    public void set_MaxNodeCount(int value);
    public int get_PageSize();
    public void set_PageSize(int value);
    public bool get_HandleReferenceNavigationPropertyExpandFilter();
    public void set_HandleReferenceNavigationPropertyExpandFilter(bool value);
    public AllowedQueryOptions get_AllowedQueryOptions();
    public void set_AllowedQueryOptions(AllowedQueryOptions value);
    public AllowedFunctions get_AllowedFunctions();
    public void set_AllowedFunctions(AllowedFunctions value);
    public AllowedArithmeticOperators get_AllowedArithmeticOperators();
    public void set_AllowedArithmeticOperators(AllowedArithmeticOperators value);
    public AllowedLogicalOperators get_AllowedLogicalOperators();
    public void set_AllowedLogicalOperators(AllowedLogicalOperators value);
    public string get_AllowedOrderByProperties();
    public void set_AllowedOrderByProperties(string value);
    public int get_MaxSkip();
    public void set_MaxSkip(int value);
    public int get_MaxTop();
    public void set_MaxTop(int value);
    public int get_MaxExpansionDepth();
    public void set_MaxExpansionDepth(int value);
    public int get_MaxOrderByNodeCount();
    public void set_MaxOrderByNodeCount(int value);
    private object OnActionExecuted(object responseValue, IQueryable singleResultCollection, IWebApiActionDescriptor actionDescriptor, IWebApiRequestMessage request, Func`2<Type, IEdmModel> modelFunction, Func`2<ODataQueryContext, ODataQueryOptions> createQueryOptionFunction, Action`1<HttpStatusCode> createResponseAction, Action`3<HttpStatusCode, string, Exception> createErrorAction);
    public virtual IQueryable ApplyQuery(IQueryable queryable, ODataQueryOptions queryOptions);
    public virtual object ApplyQuery(object entity, ODataQueryOptions queryOptions);
    private static ODataQueryContext GetODataQueryContext(object responseValue, IQueryable singleResultCollection, IWebApiActionDescriptor actionDescriptor, Func`2<Type, IEdmModel> modelFunction, ODataPath path);
    private void GetModelBoundPageSize(object responseValue, IQueryable singleResultCollection, IWebApiActionDescriptor actionDescriptor, Func`2<Type, IEdmModel> modelFunction, ODataPath path, Action`3<HttpStatusCode, string, Exception> createErrorAction);
    private object ExecuteQuery(object responseValue, IQueryable singleResultCollection, IWebApiActionDescriptor actionDescriptor, Func`2<Type, IEdmModel> modelFunction, IWebApiRequestMessage request, Func`2<ODataQueryContext, ODataQueryOptions> createQueryOptionFunction);
    internal static Type GetElementType(object responseValue, IQueryable singleResultCollection, IWebApiActionDescriptor actionDescriptor);
    internal static void ValidateSelectExpandOnly(ODataQueryOptions queryOptions);
    private static bool ContainsAutoSelectExpandProperty(object responseValue, IQueryable singleResultCollection, IWebApiActionDescriptor actionDescriptor, Func`2<Type, IEdmModel> modelFunction, ODataPath path);
}
public class Microsoft.AspNet.OData.ETagMessageHandler : DelegatingHandler {
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.ETagMessageHandler/<SendAsync>d__0")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    internal Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request);
    private static EntityTagHeaderValue GetETag(Nullable`1<int> statusCode, ODataPath path, IEdmModel model, object value, IETagHandler etagHandler);
    private static IEdmEntityTypeReference GetTypeReference(IEdmModel model, IEdmEntityType edmType, object value);
    private static EntityTagHeaderValue CreateETag(ResourceContext resourceContext, IETagHandler handler);
    private static ResourceContext CreateInstanceContext(IEdmModel model, IEdmEntityTypeReference reference, object value);
    internal static IEdmEntityType GetSingleEntityEntityType(ODataPath path);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
internal class Microsoft.AspNet.OData.ExpressionHelperMethods : object {
    private static MethodInfo _enumerableWhereMethod;
    private static MethodInfo _queryableToListMethod;
    private static MethodInfo _orderByMethod;
    private static MethodInfo _enumerableOrderByMethod;
    private static MethodInfo _orderByDescendingMethod;
    private static MethodInfo _enumerableOrderByDescendingMethod;
    private static MethodInfo _thenByMethod;
    private static MethodInfo _enumerableThenByMethod;
    private static MethodInfo _thenByDescendingMethod;
    private static MethodInfo _enumerableThenByDescendingMethod;
    private static MethodInfo _countMethod;
    private static MethodInfo _enumerableGroupByMethod;
    private static MethodInfo _groupByMethod;
    private static MethodInfo _aggregateMethod;
    private static MethodInfo _skipMethod;
    private static MethodInfo _enumerableSkipMethod;
    private static MethodInfo _whereMethod;
    private static MethodInfo _queryableCastMethod;
    private static MethodInfo _enumerableCastMethod;
    private static MethodInfo _queryableContainsMethod;
    private static MethodInfo _enumerableContainsMethod;
    private static MethodInfo _queryableEmptyAnyMethod;
    private static MethodInfo _queryableNonEmptyAnyMethod;
    private static MethodInfo _queryableAllMethod;
    private static MethodInfo _enumerableEmptyAnyMethod;
    private static MethodInfo _enumerableNonEmptyAnyMethod;
    private static MethodInfo _enumerableAllMethod;
    private static MethodInfo _enumerableOfTypeMethod;
    private static MethodInfo _queryableOfTypeMethod;
    private static MethodInfo _enumerableSelectManyMethod;
    private static MethodInfo _queryableSelectManyMethod;
    private static MethodInfo _enumerableSelectMethod;
    private static MethodInfo _queryableSelectMethod;
    private static MethodInfo _queryableTakeMethod;
    private static MethodInfo _enumerableTakeMethod;
    private static MethodInfo _queryableAsQueryableMethod;
    private static MethodInfo _toQueryableMethod;
    private static Dictionary`2<Type, MethodInfo> _queryableSumMethods;
    private static Dictionary`2<Type, MethodInfo> _enumerableSumMethods;
    private static MethodInfo _enumerableMinMethod;
    private static MethodInfo _enumerableMaxMethod;
    private static MethodInfo _enumerableDistinctMethod;
    private static MethodInfo _queryableMinMethod;
    private static MethodInfo _queryableMaxMethod;
    private static MethodInfo _queryableDistinctMethod;
    private static MethodInfo _createQueryGenericMethod;
    private static Dictionary`2<Type, MethodInfo> _enumerableAverageMethods;
    private static Dictionary`2<Type, MethodInfo> _queryableAverageMethods;
    private static MethodInfo _enumerableCountMethod;
    private static MethodInfo _safeConvertToDecimalMethod;
    public static MethodInfo EnumerableWhereGeneric { get; }
    public static MethodInfo QueryableToList { get; }
    public static MethodInfo QueryableOrderByGeneric { get; }
    public static MethodInfo EnumerableOrderByGeneric { get; }
    public static MethodInfo QueryableOrderByDescendingGeneric { get; }
    public static MethodInfo EnumerableOrderByDescendingGeneric { get; }
    public static MethodInfo QueryableThenByGeneric { get; }
    public static MethodInfo EnumerableThenByGeneric { get; }
    public static MethodInfo QueryableThenByDescendingGeneric { get; }
    public static MethodInfo EnumerableThenByDescendingGeneric { get; }
    public static MethodInfo QueryableCountGeneric { get; }
    public static Dictionary`2<Type, MethodInfo> QueryableSumGenerics { get; }
    public static Dictionary`2<Type, MethodInfo> EnumerableSumGenerics { get; }
    public static MethodInfo QueryableMin { get; }
    public static MethodInfo EnumerableMin { get; }
    public static MethodInfo QueryableMax { get; }
    public static MethodInfo EnumerableMax { get; }
    public static Dictionary`2<Type, MethodInfo> QueryableAverageGenerics { get; }
    public static Dictionary`2<Type, MethodInfo> EnumerableAverageGenerics { get; }
    public static MethodInfo QueryableDistinct { get; }
    public static MethodInfo EnumerableDistinct { get; }
    public static MethodInfo QueryableGroupByGeneric { get; }
    public static MethodInfo EnumerableGroupByGeneric { get; }
    public static MethodInfo QueryableAggregateGeneric { get; }
    public static MethodInfo QueryableTakeGeneric { get; }
    public static MethodInfo EnumerableTakeGeneric { get; }
    public static MethodInfo QueryableSkipGeneric { get; }
    public static MethodInfo EnumerableSkipGeneric { get; }
    public static MethodInfo QueryableWhereGeneric { get; }
    public static MethodInfo QueryableCastGeneric { get; }
    public static MethodInfo EnumerableCastGeneric { get; }
    public static MethodInfo QueryableContainsGeneric { get; }
    public static MethodInfo EnumerableContainsGeneric { get; }
    public static MethodInfo QueryableSelectGeneric { get; }
    public static MethodInfo EnumerableSelectGeneric { get; }
    public static MethodInfo QueryableSelectManyGeneric { get; }
    public static MethodInfo EnumerableSelectManyGeneric { get; }
    public static MethodInfo QueryableEmptyAnyGeneric { get; }
    public static MethodInfo QueryableNonEmptyAnyGeneric { get; }
    public static MethodInfo QueryableAllGeneric { get; }
    public static MethodInfo EnumerableEmptyAnyGeneric { get; }
    public static MethodInfo EnumerableNonEmptyAnyGeneric { get; }
    public static MethodInfo EnumerableAllGeneric { get; }
    public static MethodInfo EnumerableOfType { get; }
    public static MethodInfo QueryableOfType { get; }
    public static MethodInfo QueryableAsQueryable { get; }
    public static MethodInfo EntityAsQueryable { get; }
    public static MethodInfo EnumerableCountGeneric { get; }
    public static MethodInfo ConvertToDecimal { get; }
    public static MethodInfo CreateQueryGeneric { get; }
    private static ExpressionHelperMethods();
    public static MethodInfo get_EnumerableWhereGeneric();
    public static MethodInfo get_QueryableToList();
    public static MethodInfo get_QueryableOrderByGeneric();
    public static MethodInfo get_EnumerableOrderByGeneric();
    public static MethodInfo get_QueryableOrderByDescendingGeneric();
    public static MethodInfo get_EnumerableOrderByDescendingGeneric();
    public static MethodInfo get_QueryableThenByGeneric();
    public static MethodInfo get_EnumerableThenByGeneric();
    public static MethodInfo get_QueryableThenByDescendingGeneric();
    public static MethodInfo get_EnumerableThenByDescendingGeneric();
    public static MethodInfo get_QueryableCountGeneric();
    public static Dictionary`2<Type, MethodInfo> get_QueryableSumGenerics();
    public static Dictionary`2<Type, MethodInfo> get_EnumerableSumGenerics();
    public static MethodInfo get_QueryableMin();
    public static MethodInfo get_EnumerableMin();
    public static MethodInfo get_QueryableMax();
    public static MethodInfo get_EnumerableMax();
    public static Dictionary`2<Type, MethodInfo> get_QueryableAverageGenerics();
    public static Dictionary`2<Type, MethodInfo> get_EnumerableAverageGenerics();
    public static MethodInfo get_QueryableDistinct();
    public static MethodInfo get_EnumerableDistinct();
    public static MethodInfo get_QueryableGroupByGeneric();
    public static MethodInfo get_EnumerableGroupByGeneric();
    public static MethodInfo get_QueryableAggregateGeneric();
    public static MethodInfo get_QueryableTakeGeneric();
    public static MethodInfo get_EnumerableTakeGeneric();
    public static MethodInfo get_QueryableSkipGeneric();
    public static MethodInfo get_EnumerableSkipGeneric();
    public static MethodInfo get_QueryableWhereGeneric();
    public static MethodInfo get_QueryableCastGeneric();
    public static MethodInfo get_EnumerableCastGeneric();
    public static MethodInfo get_QueryableContainsGeneric();
    public static MethodInfo get_EnumerableContainsGeneric();
    public static MethodInfo get_QueryableSelectGeneric();
    public static MethodInfo get_EnumerableSelectGeneric();
    public static MethodInfo get_QueryableSelectManyGeneric();
    public static MethodInfo get_EnumerableSelectManyGeneric();
    public static MethodInfo get_QueryableEmptyAnyGeneric();
    public static MethodInfo get_QueryableNonEmptyAnyGeneric();
    public static MethodInfo get_QueryableAllGeneric();
    public static MethodInfo get_EnumerableEmptyAnyGeneric();
    public static MethodInfo get_EnumerableNonEmptyAnyGeneric();
    public static MethodInfo get_EnumerableAllGeneric();
    public static MethodInfo get_EnumerableOfType();
    public static MethodInfo get_QueryableOfType();
    public static MethodInfo get_QueryableAsQueryable();
    public static MethodInfo get_EntityAsQueryable();
    public static IQueryable ToQueryable(T value);
    public static MethodInfo get_EnumerableCountGeneric();
    public static MethodInfo get_ConvertToDecimal();
    public static MethodInfo get_CreateQueryGeneric();
    public static Nullable`1<decimal> SafeConvertToDecimal(object value);
    private static MethodInfo GenericMethodOf(Expression`1<Func`2<object, TReturn>> expression);
    private static MethodInfo GenericMethodOf(Expression expression);
    private static Dictionary`2<Type, MethodInfo> GetQueryableAggregationMethods(string methodName);
    private static Dictionary`2<Type, MethodInfo> GetEnumerableAggregationMethods(string methodName);
    private static MethodInfo GetCreateQueryGenericMethod();
}
internal static class Microsoft.AspNet.OData.ExpressionHelpers : object {
    public static Func`1<long> Count(IQueryable query, Type type);
    public static IQueryable Skip(IQueryable query, int count, Type type, bool parameterize);
    public static IQueryable Take(IQueryable query, int count, Type type, bool parameterize);
    public static Expression Skip(Expression source, int count, Type type, bool parameterize);
    public static Expression Take(Expression source, int count, Type elementType, bool parameterize);
    public static Expression OrderByPropertyExpression(Expression source, string propertyName, Type elementType, bool alreadyOrdered);
    public static Expression OrderBy(Expression source, LambdaExpression orderByLambda, Type elementType, OrderByDirection direction, bool alreadyOrdered);
    public static IQueryable OrderByIt(IQueryable query, OrderByDirection direction, Type type, bool alreadyOrdered);
    public static IQueryable OrderByProperty(IQueryable query, IEdmModel model, IEdmProperty property, OrderByDirection direction, Type type, bool alreadyOrdered);
    public static IQueryable OrderBy(IQueryable query, LambdaExpression orderByLambda, OrderByDirection direction, Type type, bool alreadyOrdered);
    public static IQueryable GroupBy(IQueryable query, Expression expression, Type type, Type wrapperType);
    public static IQueryable Select(IQueryable query, LambdaExpression expression, Type type);
    public static IQueryable SelectMany(IQueryable query, LambdaExpression expression, Type type);
    public static IQueryable SelectMany(IQueryable query, LambdaExpression expression, Type sourceType, Type resultType);
    public static IQueryable Aggregate(IQueryable query, object init, LambdaExpression sumLambda, Type type, Type wrapperType);
    public static IQueryable Where(IQueryable query, Expression where, Type type);
    public static Expression ToNullable(Expression expression);
    public static Expression Default(Type type);
    public static LambdaExpression GetPropertyAccessLambda(Type type, string propertyName);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.OData.Extensions.ContainerBuilderExtensions : object {
    [ExtensionAttribute]
public static IContainerBuilder AddDefaultWebApiServices(IContainerBuilder builder);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
internal static class Microsoft.AspNet.OData.Extensions.HttpActionDescriptorExtensions : object {
    private static string ModelKeyPrefix;
    [ExtensionAttribute]
internal static IEdmModel GetEdmModel(HttpActionDescriptor actionDescriptor, Type entityClrType);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.AspNet.OData.Extensions.HttpConfigurationExtensions : object {
    private static string ETagHandlerKey;
    private static string TimeZoneInfoKey;
    private static string UrlKeyDelimiterKey;
    private static string ContinueOnErrorKey;
    private static string NullDynamicPropertyKey;
    private static string ContainerBuilderFactoryKey;
    private static string PerRouteContainerKey;
    private static string DefaultQuerySettingsKey;
    private static string NonODataRootContainerKey;
    private static string CompatibilityOptionsKey;
    [ExtensionAttribute]
public static void AddODataQueryFilter(HttpConfiguration configuration);
    [ExtensionAttribute]
public static void SetDefaultQuerySettings(HttpConfiguration configuration, DefaultQuerySettings defaultQuerySettings);
    [ExtensionAttribute]
public static DefaultQuerySettings GetDefaultQuerySettings(HttpConfiguration configuration);
    [ExtensionAttribute]
public static HttpConfiguration MaxTop(HttpConfiguration configuration, Nullable`1<int> maxTopValue);
    [ExtensionAttribute]
public static HttpConfiguration Expand(HttpConfiguration configuration, QueryOptionSetting setting);
    [ExtensionAttribute]
public static HttpConfiguration Expand(HttpConfiguration configuration);
    [ExtensionAttribute]
public static HttpConfiguration Select(HttpConfiguration configuration, QueryOptionSetting setting);
    [ExtensionAttribute]
public static HttpConfiguration Select(HttpConfiguration configuration);
    [ExtensionAttribute]
public static HttpConfiguration Filter(HttpConfiguration configuration, QueryOptionSetting setting);
    [ExtensionAttribute]
public static HttpConfiguration Filter(HttpConfiguration configuration);
    [ExtensionAttribute]
public static HttpConfiguration OrderBy(HttpConfiguration configuration, QueryOptionSetting setting);
    [ExtensionAttribute]
public static HttpConfiguration OrderBy(HttpConfiguration configuration);
    [ExtensionAttribute]
public static HttpConfiguration SkipToken(HttpConfiguration configuration, QueryOptionSetting setting);
    [ExtensionAttribute]
public static HttpConfiguration SkipToken(HttpConfiguration configuration);
    [ExtensionAttribute]
public static HttpConfiguration Count(HttpConfiguration configuration, QueryOptionSetting setting);
    [ExtensionAttribute]
public static HttpConfiguration Count(HttpConfiguration configuration);
    [ExtensionAttribute]
public static void AddODataQueryFilter(HttpConfiguration configuration, IActionFilter queryFilter);
    [ExtensionAttribute]
public static IETagHandler GetETagHandler(HttpConfiguration configuration);
    [ExtensionAttribute]
public static void SetETagHandler(HttpConfiguration configuration, IETagHandler handler);
    [ExtensionAttribute]
public static TimeZoneInfo GetTimeZoneInfo(HttpConfiguration configuration);
    [ExtensionAttribute]
public static void SetTimeZoneInfo(HttpConfiguration configuration, TimeZoneInfo timeZoneInfo);
    [ExtensionAttribute]
public static void EnableContinueOnErrorHeader(HttpConfiguration configuration);
    [ExtensionAttribute]
internal static bool HasEnabledContinueOnErrorHeader(HttpConfiguration configuration);
    [ExtensionAttribute]
public static void SetSerializeNullDynamicProperty(HttpConfiguration configuration, bool serialize);
    [ExtensionAttribute]
public static void SetUrlKeyDelimiter(HttpConfiguration configuration, ODataUrlKeyDelimiter urlKeyDelimiter);
    [ExtensionAttribute]
public static void SetCompatibilityOptions(HttpConfiguration configuration, CompatibilityOptions options);
    [ExtensionAttribute]
internal static bool HasEnabledNullDynamicProperty(HttpConfiguration configuration);
    [ExtensionAttribute]
internal static ODataUrlKeyDelimiter GetUrlKeyDelimiter(HttpConfiguration configuration);
    [ExtensionAttribute]
internal static CompatibilityOptions GetCompatibilityOptions(HttpConfiguration configuration);
    [ExtensionAttribute]
public static HttpConfiguration UseCustomContainerBuilder(HttpConfiguration configuration, Func`1<IContainerBuilder> builderFactory);
    [ExtensionAttribute]
public static void EnableDependencyInjection(HttpConfiguration configuration);
    [ExtensionAttribute]
public static void EnableDependencyInjection(HttpConfiguration configuration, Action`1<IContainerBuilder> configureAction);
    [ExtensionAttribute]
public static ODataRoute MapODataServiceRoute(HttpConfiguration configuration, string routeName, string routePrefix, Action`1<IContainerBuilder> configureAction);
    [ExtensionAttribute]
public static ODataRoute MapODataServiceRoute(HttpConfiguration configuration, string routeName, string routePrefix, IEdmModel model);
    [ExtensionAttribute]
public static ODataRoute MapODataServiceRoute(HttpConfiguration configuration, string routeName, string routePrefix, IEdmModel model, ODataBatchHandler batchHandler);
    [ExtensionAttribute]
public static ODataRoute MapODataServiceRoute(HttpConfiguration configuration, string routeName, string routePrefix, IEdmModel model, HttpMessageHandler defaultHandler);
    [ExtensionAttribute]
public static ODataRoute MapODataServiceRoute(HttpConfiguration configuration, string routeName, string routePrefix, IEdmModel model, IODataPathHandler pathHandler, IEnumerable`1<IODataRoutingConvention> routingConventions);
    [ExtensionAttribute]
public static ODataRoute MapODataServiceRoute(HttpConfiguration configuration, string routeName, string routePrefix, IEdmModel model, IODataPathHandler pathHandler, IEnumerable`1<IODataRoutingConvention> routingConventions, ODataBatchHandler batchHandler);
    [ExtensionAttribute]
public static ODataRoute MapODataServiceRoute(HttpConfiguration configuration, string routeName, string routePrefix, IEdmModel model, IODataPathHandler pathHandler, IEnumerable`1<IODataRoutingConvention> routingConventions, HttpMessageHandler defaultHandler);
    private static string RemoveTrailingSlash(string routePrefix);
    [ExtensionAttribute]
internal static IServiceProvider CreateODataRootContainer(HttpConfiguration configuration, string routeName, Action`1<IContainerBuilder> configureAction);
    [ExtensionAttribute]
internal static IPerRouteContainer GetPerRouteContainer(HttpConfiguration configuration);
    [ExtensionAttribute]
internal static IServiceProvider GetODataRootContainer(HttpConfiguration configuration, string routeName);
    [ExtensionAttribute]
internal static IServiceProvider GetNonODataRootContainer(HttpConfiguration configuration);
    [ExtensionAttribute]
internal static void SetNonODataRootContainer(HttpConfiguration configuration, IServiceProvider rootContainer);
    private static Action`1<IContainerBuilder> ConfigureDefaultServices(HttpConfiguration configuration, Action`1<IContainerBuilder> configureAction);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.AspNet.OData.Extensions.HttpErrorExtensions : object {
    [ExtensionAttribute]
public static ODataError CreateODataError(HttpError httpError);
    private static ODataInnerError ToODataInnerError(HttpError httpError);
    private static string ConvertModelStateErrors(HttpError error);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.AspNet.OData.Extensions.HttpRequestMessageExtensions : object {
    private static string ODataQueryOptionsKey;
    private static string PropertiesKey;
    private static string RequestContainerKey;
    private static string RequestScopeKey;
    [ExtensionAttribute]
public static HttpRequestMessageProperties ODataProperties(HttpRequestMessage request);
    [ExtensionAttribute]
public static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, ODataError oDataError);
    [ExtensionAttribute]
public static ETag GetETag(HttpRequestMessage request, EntityTagHeaderValue entityTagHeaderValue);
    [ExtensionAttribute]
public static ETag`1<TEntity> GetETag(HttpRequestMessage request, EntityTagHeaderValue entityTagHeaderValue);
    [ExtensionAttribute]
public static Uri GetNextPageLink(HttpRequestMessage request, int pageSize);
    [ExtensionAttribute]
public static Uri GetNextPageLink(HttpRequestMessage request, int pageSize, object instance, Func`2<object, string> objToSkipTokenValue);
    [ExtensionAttribute]
public static ODataQueryOptions GetODataQueryOptions(HttpRequestMessage request);
    [ExtensionAttribute]
public static IServiceProvider GetRequestContainer(HttpRequestMessage request);
    [ExtensionAttribute]
public static IServiceProvider CreateRequestContainer(HttpRequestMessage request, string routeName);
    [ExtensionAttribute]
public static void DeleteRequestContainer(HttpRequestMessage request, bool dispose);
    [ExtensionAttribute]
public static IEdmModel GetModel(HttpRequestMessage request);
    [ExtensionAttribute]
public static ODataMessageWriterSettings GetWriterSettings(HttpRequestMessage request);
    [ExtensionAttribute]
public static ODataMessageReaderSettings GetReaderSettings(HttpRequestMessage request);
    [ExtensionAttribute]
public static IODataPathHandler GetPathHandler(HttpRequestMessage request);
    [ExtensionAttribute]
public static ODataSerializerProvider GetSerializerProvider(HttpRequestMessage request);
    [ExtensionAttribute]
public static ODataDeserializerProvider GetDeserializerProvider(HttpRequestMessage request);
    [ExtensionAttribute]
public static IEnumerable`1<IODataRoutingConvention> GetRoutingConventions(HttpRequestMessage request);
    [ExtensionAttribute]
public static IExpandQueryBuilder GetExpandQueryBuilder(HttpRequestMessage request);
    [ExtensionAttribute]
public static void SetODataQueryOptions(HttpRequestMessage request, ODataQueryOptions queryOptions);
    [ExtensionAttribute]
internal static bool IsQueryRequest(HttpRequestMessage request, string oDataPath);
    [ExtensionAttribute]
internal static void TransformQueryRequest(HttpRequestMessage request);
    [ExtensionAttribute]
internal static CompatibilityOptions GetCompatibilityOptions(HttpRequestMessage request);
    [ExtensionAttribute]
private static IServiceScope CreateRequestScope(HttpRequestMessage request, string routeName);
}
public class Microsoft.AspNet.OData.Extensions.HttpRequestMessageProperties : object {
    private static string DeltaLinkKey;
    private static string NextLinkKey;
    private static string PathKey;
    private static string RouteNameKey;
    private static string RoutingConventionsStoreKey;
    private static string SelectExpandClauseKey;
    private static string ApplyClauseKey;
    private static string TotalCountKey;
    private static string TotalCountFuncKey;
    private static string PageSizeKey;
    private static string QueryOptionsKey;
    private HttpRequestMessage _request;
    internal Func`1<long> TotalCountFunc { get; internal set; }
    internal int PageSize { get; internal set; }
    internal ODataQueryOptions QueryOptions { get; internal set; }
    public string RouteName { get; public set; }
    public ODataPath Path { get; public set; }
    public Nullable`1<long> TotalCount { get; public set; }
    public Uri NextLink { get; public set; }
    public Uri DeltaLink { get; public set; }
    public SelectExpandClause SelectExpandClause { get; public set; }
    public ApplyClause ApplyClause { get; public set; }
    public IDictionary`2<string, object> RoutingConventionsStore { get; private set; }
    internal Nullable`1<ODataVersion> ODataServiceVersion { get; }
    internal Nullable`1<ODataVersion> ODataMaxServiceVersion { get; }
    internal Nullable`1<ODataVersion> ODataMinServiceVersion { get; }
    internal HttpRequestMessageProperties(HttpRequestMessage request);
    internal Func`1<long> get_TotalCountFunc();
    internal void set_TotalCountFunc(Func`1<long> value);
    internal int get_PageSize();
    internal void set_PageSize(int value);
    internal ODataQueryOptions get_QueryOptions();
    internal void set_QueryOptions(ODataQueryOptions value);
    public string get_RouteName();
    public void set_RouteName(string value);
    public ODataPath get_Path();
    public void set_Path(ODataPath value);
    public Nullable`1<long> get_TotalCount();
    public void set_TotalCount(Nullable`1<long> value);
    public Uri get_NextLink();
    public void set_NextLink(Uri value);
    public Uri get_DeltaLink();
    public void set_DeltaLink(Uri value);
    public SelectExpandClause get_SelectExpandClause();
    public void set_SelectExpandClause(SelectExpandClause value);
    public ApplyClause get_ApplyClause();
    public void set_ApplyClause(ApplyClause value);
    public IDictionary`2<string, object> get_RoutingConventionsStore();
    private void set_RoutingConventionsStore(IDictionary`2<string, object> value);
    internal Nullable`1<ODataVersion> get_ODataServiceVersion();
    internal Nullable`1<ODataVersion> get_ODataMaxServiceVersion();
    internal Nullable`1<ODataVersion> get_ODataMinServiceVersion();
    private static Nullable`1<ODataVersion> GetODataVersionFromHeader(HttpHeaders headers, string headerName);
    private T GetValueOrNull(string propertyName);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.OData.Extensions.ODataPathExtensions : object {
    [ExtensionAttribute]
public static Dictionary`2<string, object> GetKeys(ODataPath path);
    [ExtensionAttribute]
public static ODataPathSegment GetLastNonTypeNonKeySegment(ODataPath path);
    [ExtensionAttribute]
public static List`1<ODataPathSegment> GetSegments(ODataPath path);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.AspNet.OData.Extensions.UrlHelperExtensions : object {
    [ExtensionAttribute]
public static string CreateODataLink(UrlHelper urlHelper, ODataPathSegment[] segments);
    [ExtensionAttribute]
public static string CreateODataLink(UrlHelper urlHelper, IList`1<ODataPathSegment> segments);
    [ExtensionAttribute]
public static string CreateODataLink(UrlHelper urlHelper, string routeName, IODataPathHandler pathHandler, IList`1<ODataPathSegment> segments);
}
internal class Microsoft.AspNet.OData.FastPropertyAccessor`1 : PropertyAccessor`1<TStructuralType> {
    private bool _isCollection;
    private PropertyInfo _property;
    private Action`2<TStructuralType, object> _setter;
    private Func`2<object, object> _getter;
    public FastPropertyAccessor`1(PropertyInfo property);
    public virtual object GetValue(TStructuralType instance);
    public virtual void SetValue(TStructuralType instance, object value);
}
internal class Microsoft.AspNet.OData.Formatter.ClrTypeCache : object {
    private ConcurrentDictionary`2<Type, IEdmTypeReference> _clrToEdmTypeCache;
    private ConcurrentDictionary`2<EdmTypeCacheItem, Type> _edmToClrTypeCache;
    internal ConcurrentDictionary`2<Type, IEdmTypeReference> ClrToEdmTypeCache { get; }
    internal ConcurrentDictionary`2<EdmTypeCacheItem, Type> EdmToClrTypeCache { get; }
    internal ConcurrentDictionary`2<Type, IEdmTypeReference> get_ClrToEdmTypeCache();
    internal ConcurrentDictionary`2<EdmTypeCacheItem, Type> get_EdmToClrTypeCache();
    public IEdmTypeReference GetEdmType(Type clrType, IEdmModel model);
    public Type GetClrType(IEdmTypeReference edmType, IEdmModel edmModel);
}
internal class Microsoft.AspNet.OData.Formatter.DefaultODataETagHandler : object {
    private static string NullLiteralInETag;
    private static char Separator;
    public sealed virtual EntityTagHeaderValue CreateETag(IDictionary`2<string, object> properties);
    public sealed virtual IDictionary`2<string, object> ParseETag(EntityTagHeaderValue etagHeaderValue);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.OData.Formatter.Deserialization.CollectionDeserializationHelpers : object {
    private static Type[] _emptyTypeArray;
    private static Object[] _emptyObjectArray;
    private static MethodInfo _toArrayMethodInfo;
    private static CollectionDeserializationHelpers();
    [ExtensionAttribute]
public static void AddToCollection(IEnumerable items, IEnumerable collection, Type elementType, Type resourceType, string propertyName, Type propertyType);
    [ExtensionAttribute]
public static void AddToCollection(IEnumerable items, IEnumerable collection, Type elementType, string paramName, Type paramType);
    [ExtensionAttribute]
private static void AddToCollectionCore(IEnumerable items, IEnumerable collection, Type elementType, IList list, MethodInfo addMethod);
    [ExtensionAttribute]
public static void Clear(IEnumerable collection, string propertyName, Type resourceType);
    public static bool TryCreateInstance(Type collectionType, IEdmCollectionTypeReference edmCollectionType, Type elementType, IEnumerable& instance, bool isDelta);
    public static IEnumerable ToArray(IEnumerable value, Type elementType);
}
public class Microsoft.AspNet.OData.Formatter.Deserialization.DefaultODataDeserializerProvider : ODataDeserializerProvider {
    private IServiceProvider _rootContainer;
    public DefaultODataDeserializerProvider(IServiceProvider rootContainer);
    public virtual ODataDeserializer GetODataDeserializer(Type type, HttpRequestMessage request);
    public virtual ODataEdmTypeDeserializer GetEdmTypeDeserializer(IEdmTypeReference edmType);
    internal ODataDeserializer GetODataDeserializerImpl(Type type, Func`1<IEdmModel> modelFunction);
}
internal static class Microsoft.AspNet.OData.Formatter.Deserialization.DeserializationHelpers : object {
    internal static void ApplyProperty(ODataProperty property, IEdmStructuredTypeReference resourceType, object resource, ODataDeserializerProvider deserializerProvider, ODataDeserializerContext readContext);
    internal static void ApplyInstanceAnnotations(object resource, IEdmStructuredTypeReference structuredType, ODataResourceWrapper resourceWrapper, ODataDeserializerProvider deserializerProvider, ODataDeserializerContext readContext);
    internal static void SetDynamicProperty(object resource, IEdmStructuredTypeReference resourceType, EdmTypeKind propertyKind, string propertyName, object propertyValue, IEdmTypeReference propertyType, IEdmModel model);
    internal static void SetDeclaredProperty(object resource, EdmTypeKind propertyKind, string propertyName, object propertyValue, IEdmProperty edmProperty, ODataDeserializerContext readContext);
    internal static void SetCollectionProperty(object resource, IEdmProperty edmProperty, object value, string propertyName, bool isDelta);
    internal static void SetCollectionProperty(object resource, string propertyName, IEdmCollectionTypeReference edmPropertyType, object value, bool clearCollection, bool isDelta);
    internal static void SetDynamicCollectionProperty(object resource, string propertyName, object value, IEdmCollectionTypeReference edmPropertyType, IEdmStructuredType structuredType, IEdmModel model);
    internal static void SetProperty(object resource, string propertyName, object value);
    internal static void SetDynamicProperty(object resource, string propertyName, object value, IEdmStructuredType structuredType, IEdmModel model);
    internal static void SetInstanceAnnotations(ODataResourceWrapper resourceWrapper, IODataInstanceAnnotationContainer instanceAnnotationContainer, IODataInstanceAnnotationContainer transientAnnotationContainer, ODataDeserializerProvider deserializerProvider, ODataDeserializerContext readContext);
    private static void AddInstanceAnnotationToContainer(IODataInstanceAnnotationContainer instanceAnnotationContainer, ODataDeserializerProvider deserializerProvider, ODataDeserializerContext readContext, ODataInstanceAnnotation annotation, string propertyName);
    public static IODataInstanceAnnotationContainer GetAnnotationContainer(PropertyInfo propertyInfo, object resource);
    internal static object ConvertValue(object oDataValue, IEdmTypeReference& propertyType, ODataDeserializerProvider deserializerProvider, ODataDeserializerContext readContext, EdmTypeKind& typeKind);
    internal static object ConvertAnnotationValue(object oDataValue, IEdmTypeReference& propertyType, ODataDeserializerProvider deserializerProvider, ODataDeserializerContext readContext);
    internal static Type GetPropertyType(object resource, string propertyName);
    private static bool CanSetProperty(object resource, string propertyName);
    private static object GetProperty(object resource, string propertyName);
    private static object ConvertCollectionValue(ODataCollectionValue collection, IEdmTypeReference& propertyType, ODataDeserializerProvider deserializerProvider, ODataDeserializerContext readContext);
    private static object ConvertPrimitiveValue(string value);
    private static object ConvertEnumValue(ODataEnumValue enumValue, IEdmTypeReference& propertyType, ODataDeserializerProvider deserializerProvider, ODataDeserializerContext readContext);
    private static string UnescapeString(string inputString);
    internal static string GetCollectionElementTypeName(string typeName, bool isNested);
}
internal static class Microsoft.AspNet.OData.Formatter.Deserialization.EnumDeserializationHelpers : object {
    public static object ConvertEnumValue(object value, Type type);
}
public class Microsoft.AspNet.OData.Formatter.Deserialization.ODataActionPayloadDeserializer : ODataDeserializer {
    private static MethodInfo _castMethodInfo;
    [CompilerGeneratedAttribute]
private ODataDeserializerProvider <DeserializerProvider>k__BackingField;
    public ODataDeserializerProvider DeserializerProvider { get; private set; }
    public ODataActionPayloadDeserializer(ODataDeserializerProvider deserializerProvider);
    private static ODataActionPayloadDeserializer();
    [CompilerGeneratedAttribute]
public ODataDeserializerProvider get_DeserializerProvider();
    [CompilerGeneratedAttribute]
private void set_DeserializerProvider(ODataDeserializerProvider value);
    public virtual object Read(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Deserialization.ODataActionPayloadDeserializer/<ReadAsync>d__7")]
public virtual Task`1<object> ReadAsync(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
    internal static IEdmAction GetAction(ODataDeserializerContext readContext);
    private static Dictionary`2<string, object> GetPayload(Type type, IEdmAction action);
    private static IEdmOperationParameter GetParameter(IEdmAction action, ODataParameterReader reader, String& parameterName);
    private static IEdmCollectionTypeReference GetCollectionParameterType(IEdmAction action, ODataParameterReader reader, String& parameterName);
    private static void ReadValue(IEdmAction action, ODataParameterReader reader, ODataDeserializerContext readContext, ODataDeserializerProvider deserializerProvider, Dictionary`2<string, object> payload);
    private static void ReadCollection(IEdmAction action, ODataParameterReader reader, ODataDeserializerContext readContext, ODataDeserializerProvider deserializerProvider, Dictionary`2<string, object> payload);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Deserialization.ODataActionPayloadDeserializer/<ReadCollectionAsync>d__14")]
private static Task ReadCollectionAsync(IEdmAction action, ODataParameterReader reader, ODataDeserializerContext readContext, ODataDeserializerProvider deserializerProvider, Dictionary`2<string, object> payload);
    private static void ReadResource(IEdmAction action, ODataParameterReader reader, ODataDeserializerContext readContext, ODataDeserializerProvider deserializerProvider, Dictionary`2<string, object> payload);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Deserialization.ODataActionPayloadDeserializer/<ReadResourceAsync>d__16")]
private static Task ReadResourceAsync(IEdmAction action, ODataParameterReader reader, ODataDeserializerContext readContext, ODataDeserializerProvider deserializerProvider, Dictionary`2<string, object> payload);
    private static void ReadResourceSet(IEdmAction action, ODataParameterReader reader, ODataDeserializerContext readContext, ODataDeserializerProvider deserializerProvider, Dictionary`2<string, object> payload);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Deserialization.ODataActionPayloadDeserializer/<ReadResourceSetAsync>d__18")]
private static Task ReadResourceSetAsync(IEdmAction action, ODataParameterReader reader, ODataDeserializerContext readContext, ODataDeserializerProvider deserializerProvider, Dictionary`2<string, object> payload);
    private static void ProcessResourceSet(object feed, IEdmCollectionTypeReference resourceSetType, ODataDeserializerContext readContext, ODataDeserializerProvider deserializerProvider, Dictionary`2<string, object> payload, string parameterName);
}
public class Microsoft.AspNet.OData.Formatter.Deserialization.ODataCollectionDeserializer : ODataEdmTypeDeserializer {
    private static MethodInfo _castMethodInfo;
    public ODataCollectionDeserializer(ODataDeserializerProvider deserializerProvider);
    private static ODataCollectionDeserializer();
    public virtual object Read(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Deserialization.ODataCollectionDeserializer/<ReadAsync>d__3")]
public virtual Task`1<object> ReadAsync(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
    public sealed virtual object ReadInline(object item, IEdmTypeReference edmType, ODataDeserializerContext readContext);
    [IteratorStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Deserialization.ODataCollectionDeserializer/<ReadCollectionValue>d__5")]
public virtual IEnumerable ReadCollectionValue(ODataCollectionValue collectionValue, IEdmTypeReference elementType, ODataDeserializerContext readContext);
    internal static ODataCollectionValue ReadCollection(ODataCollectionReader reader);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Deserialization.ODataCollectionDeserializer/<ReadCollectionAsync>d__7")]
internal static Task`1<ODataCollectionValue> ReadCollectionAsync(ODataCollectionReader reader);
    private static IEdmTypeReference GetElementType(Type type, ODataDeserializerContext readContext);
    private static string AddCollectionItem(ArrayList items, ODataCollectionReader reader, string typeName);
}
public class Microsoft.AspNet.OData.Formatter.Deserialization.ODataDeltaResourceSetWrapper : ODataResourceSetWrapperBase {
    internal ResourceSetType ResourceSetType { get; }
    public ODataDeltaResourceSetWrapper(ODataDeltaResourceSet item);
    internal virtual ResourceSetType get_ResourceSetType();
}
public abstract class Microsoft.AspNet.OData.Formatter.Deserialization.ODataDeserializer : object {
    [CompilerGeneratedAttribute]
private ODataPayloadKind <ODataPayloadKind>k__BackingField;
    public ODataPayloadKind ODataPayloadKind { get; private set; }
    protected ODataDeserializer(ODataPayloadKind payloadKind);
    [CompilerGeneratedAttribute]
public ODataPayloadKind get_ODataPayloadKind();
    [CompilerGeneratedAttribute]
private void set_ODataPayloadKind(ODataPayloadKind value);
    public virtual object Read(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Deserialization.ODataDeserializer/<ReadAsync>d__6")]
public virtual Task`1<object> ReadAsync(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
}
public class Microsoft.AspNet.OData.Formatter.Deserialization.ODataDeserializerContext : object {
    private HttpRequestMessage _request;
    [CompilerGeneratedAttribute]
private HttpRequestContext <RequestContext>k__BackingField;
    private Nullable`1<bool> _isDeltaOfT;
    private Nullable`1<bool> _isDeletedDeltaOfT;
    private Nullable`1<bool> _isUntyped;
    private Nullable`1<bool> _isChangedObjectCollection;
    private Nullable`1<bool> _isDeltaEntity;
    private Nullable`1<bool> _isDeltaDeletedEntity;
    [CompilerGeneratedAttribute]
private Type <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmTypeReference <ResourceEdmType>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebApiRequestMessage <InternalRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebApiUrlHelper <InternalUrlHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableCaseInsensitiveRequestPropertyBinding>k__BackingField;
    public HttpRequestMessage Request { get; public set; }
    public HttpRequestContext RequestContext { get; public set; }
    public Type ResourceType { get; public set; }
    public IEdmTypeReference ResourceEdmType { get; public set; }
    public ODataPath Path { get; public set; }
    public IEdmModel Model { get; public set; }
    internal IWebApiRequestMessage InternalRequest { get; private set; }
    internal IWebApiUrlHelper InternalUrlHelper { get; private set; }
    internal bool DisableCaseInsensitiveRequestPropertyBinding { get; internal set; }
    internal bool IsDeltaOfT { get; }
    internal bool IsDeletedDeltaOfT { get; }
    internal bool IsDeltaEntity { get; }
    internal bool IsDeltaDeletedEntity { get; }
    internal bool IsChangedObjectCollection { get; }
    internal bool IsUntyped { get; }
    public HttpRequestMessage get_Request();
    public void set_Request(HttpRequestMessage value);
    [CompilerGeneratedAttribute]
public HttpRequestContext get_RequestContext();
    [CompilerGeneratedAttribute]
public void set_RequestContext(HttpRequestContext value);
    [CompilerGeneratedAttribute]
public Type get_ResourceType();
    [CompilerGeneratedAttribute]
public void set_ResourceType(Type value);
    [CompilerGeneratedAttribute]
public IEdmTypeReference get_ResourceEdmType();
    [CompilerGeneratedAttribute]
public void set_ResourceEdmType(IEdmTypeReference value);
    [CompilerGeneratedAttribute]
public ODataPath get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(ODataPath value);
    [CompilerGeneratedAttribute]
public IEdmModel get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(IEdmModel value);
    [CompilerGeneratedAttribute]
internal IWebApiRequestMessage get_InternalRequest();
    [CompilerGeneratedAttribute]
private void set_InternalRequest(IWebApiRequestMessage value);
    [CompilerGeneratedAttribute]
internal IWebApiUrlHelper get_InternalUrlHelper();
    [CompilerGeneratedAttribute]
private void set_InternalUrlHelper(IWebApiUrlHelper value);
    [CompilerGeneratedAttribute]
internal bool get_DisableCaseInsensitiveRequestPropertyBinding();
    [CompilerGeneratedAttribute]
internal void set_DisableCaseInsensitiveRequestPropertyBinding(bool value);
    internal bool get_IsDeltaOfT();
    internal bool get_IsDeletedDeltaOfT();
    internal bool get_IsDeltaEntity();
    internal bool get_IsDeltaDeletedEntity();
    internal bool get_IsChangedObjectCollection();
    internal bool get_IsUntyped();
    internal IEdmTypeReference GetEdmType(Type type);
}
public abstract class Microsoft.AspNet.OData.Formatter.Deserialization.ODataDeserializerProvider : object {
    public abstract virtual ODataDeserializer GetODataDeserializer(Type type, HttpRequestMessage request);
    public abstract virtual ODataEdmTypeDeserializer GetEdmTypeDeserializer(IEdmTypeReference edmType);
}
public abstract class Microsoft.AspNet.OData.Formatter.Deserialization.ODataEdmTypeDeserializer : ODataDeserializer {
    [CompilerGeneratedAttribute]
private ODataDeserializerProvider <DeserializerProvider>k__BackingField;
    public ODataDeserializerProvider DeserializerProvider { get; private set; }
    protected ODataEdmTypeDeserializer(ODataPayloadKind payloadKind);
    protected ODataEdmTypeDeserializer(ODataPayloadKind payloadKind, ODataDeserializerProvider deserializerProvider);
    [CompilerGeneratedAttribute]
public ODataDeserializerProvider get_DeserializerProvider();
    [CompilerGeneratedAttribute]
private void set_DeserializerProvider(ODataDeserializerProvider value);
    public virtual object ReadInline(object item, IEdmTypeReference edmType, ODataDeserializerContext readContext);
}
public class Microsoft.AspNet.OData.Formatter.Deserialization.ODataEntityReferenceLinkBase : ODataItemBase {
    [CompilerGeneratedAttribute]
private ODataEntityReferenceLink <EntityReferenceLink>k__BackingField;
    public ODataEntityReferenceLink EntityReferenceLink { get; }
    public ODataEntityReferenceLinkBase(ODataEntityReferenceLink item);
    [CompilerGeneratedAttribute]
public ODataEntityReferenceLink get_EntityReferenceLink();
}
public class Microsoft.AspNet.OData.Formatter.Deserialization.ODataEntityReferenceLinkDeserializer : ODataDeserializer {
    public virtual object Read(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Deserialization.ODataEntityReferenceLinkDeserializer/<ReadAsync>d__2")]
public virtual Task`1<object> ReadAsync(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
    private static Uri ResolveContentId(Uri uri, ODataDeserializerContext readContext);
}
public class Microsoft.AspNet.OData.Formatter.Deserialization.ODataEnumDeserializer : ODataEdmTypeDeserializer {
    public virtual object Read(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Deserialization.ODataEnumDeserializer/<ReadAsync>d__2")]
public virtual Task`1<object> ReadAsync(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
    public virtual object ReadInline(object item, IEdmTypeReference edmType, ODataDeserializerContext readContext);
}
public abstract class Microsoft.AspNet.OData.Formatter.Deserialization.ODataItemBase : object {
    private ODataItem _item;
    public ODataItem Item { get; }
    protected ODataItemBase(ODataItem item);
    public ODataItem get_Item();
}
public class Microsoft.AspNet.OData.Formatter.Deserialization.ODataNestedResourceInfoWrapper : ODataItemBase {
    [CompilerGeneratedAttribute]
private IList`1<ODataItemBase> <NestedItems>k__BackingField;
    public ODataNestedResourceInfo NestedResourceInfo { get; }
    public IList`1<ODataItemBase> NestedItems { get; private set; }
    public ODataNestedResourceInfoWrapper(ODataNestedResourceInfo item);
    public ODataNestedResourceInfo get_NestedResourceInfo();
    [CompilerGeneratedAttribute]
public IList`1<ODataItemBase> get_NestedItems();
    [CompilerGeneratedAttribute]
private void set_NestedItems(IList`1<ODataItemBase> value);
}
public class Microsoft.AspNet.OData.Formatter.Deserialization.ODataPrimitiveDeserializer : ODataEdmTypeDeserializer {
    public virtual object Read(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Deserialization.ODataPrimitiveDeserializer/<ReadAsync>d__2")]
public virtual Task`1<object> ReadAsync(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
    public sealed virtual object ReadInline(object item, IEdmTypeReference edmType, ODataDeserializerContext readContext);
    public virtual object ReadPrimitive(ODataProperty primitiveProperty, ODataDeserializerContext readContext);
}
[ExtensionAttribute]
public static class Microsoft.AspNet.OData.Formatter.Deserialization.ODataReaderExtensions : object {
    [ExtensionAttribute]
public static ODataItemBase ReadResourceOrResourceSet(ODataReader reader);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Deserialization.ODataReaderExtensions/<ReadResourceOrResourceSetAsync>d__1")]
[ExtensionAttribute]
public static Task`1<ODataItemBase> ReadResourceOrResourceSetAsync(ODataReader reader);
    private static void ReadCollectionItem(ODataReader reader, Stack`1<ODataItemBase> itemsStack, ODataItemBase& topLevelItem);
    private static void AddNestedResourceInfo(Stack`1<ODataItemBase> itemsStack, ODataResourceSetWrapperBase resourceSetWrapper);
    private static void AddResourceToParent(Stack`1<ODataItemBase> itemsStack, ODataResourceWrapper resourceWrapper);
}
public class Microsoft.AspNet.OData.Formatter.Deserialization.ODataResourceDeserializer : ODataEdmTypeDeserializer {
    public ODataResourceDeserializer(ODataDeserializerProvider deserializerProvider);
    public virtual object Read(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Deserialization.ODataResourceDeserializer/<ReadAsync>d__2")]
public virtual Task`1<object> ReadAsync(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
    public sealed virtual object ReadInline(object item, IEdmTypeReference edmType, ODataDeserializerContext readContext);
    public virtual object ReadResource(ODataResourceWrapper resourceWrapper, IEdmStructuredTypeReference structuredType, ODataDeserializerContext readContext);
    public virtual object CreateResourceInstance(IEdmStructuredTypeReference structuredType, ODataDeserializerContext readContext);
    public virtual void ApplyNestedProperties(object resource, ODataResourceWrapper resourceWrapper, IEdmStructuredTypeReference structuredType, ODataDeserializerContext readContext);
    public virtual void ApplyNestedProperty(object resource, ODataNestedResourceInfoWrapper resourceInfoWrapper, IEdmStructuredTypeReference structuredType, ODataDeserializerContext readContext);
    private ODataResourceSetWrapper CreateResourceSetWrapper(IEdmCollectionTypeReference edmPropertyType, IList`1<ODataEntityReferenceLinkBase> refLinks, ODataDeserializerContext readContext);
    private ODataResourceWrapper CreateResourceWrapper(IEdmTypeReference edmPropertyType, ODataEntityReferenceLinkBase refLink, ODataDeserializerContext readContext);
    public virtual void ApplyStructuralProperties(object resource, ODataResourceWrapper resourceWrapper, IEdmStructuredTypeReference structuredType, ODataDeserializerContext readContext);
    public virtual void ApplyInstanceAnnotations(object resource, ODataResourceWrapper resourceWrapper, IEdmStructuredTypeReference structuredType, ODataDeserializerContext readContext);
    public virtual void ApplyStructuralProperty(object resource, ODataProperty structuralProperty, IEdmStructuredTypeReference structuredType, ODataDeserializerContext readContext);
    private void ApplyResourceProperties(object resource, ODataResourceWrapper resourceWrapper, IEdmStructuredTypeReference structuredType, ODataDeserializerContext readContext);
    private void ApplyResourceInNestedProperty(IEdmProperty nestedProperty, object resource, ODataResourceWrapper resourceWrapper, ODataDeserializerContext readContext);
    private void ApplyDynamicResourceInNestedProperty(string propertyName, object resource, IEdmStructuredTypeReference resourceStructuredType, ODataResourceWrapper resourceWrapper, ODataDeserializerContext readContext);
    private object ReadNestedResourceInline(ODataResourceWrapper resourceWrapper, IEdmTypeReference edmType, ODataDeserializerContext readContext);
    private void ApplyResourceSetInNestedProperty(IEdmProperty nestedProperty, object resource, ODataResourceSetWrapperBase resourceSetWrapper, ODataDeserializerContext readContext);
    private void ApplyDynamicResourceSetInNestedProperty(string propertyName, object resource, IEdmStructuredTypeReference structuredType, ODataResourceSetWrapperBase resourceSetWrapper, ODataDeserializerContext readContext);
    private object ReadNestedResourceSetInline(ODataResourceSetWrapperBase resourceSetWrapper, IEdmTypeReference edmType, ODataDeserializerContext nestedReadContext);
    private static IEdmStructuredTypeReference GetStructuredType(Type type, ODataDeserializerContext readContext);
    private static IEdmNavigationSource GetNavigationSource(IEdmStructuredTypeReference edmType, ODataDeserializerContext readContext);
}
internal static class Microsoft.AspNet.OData.Formatter.Deserialization.ODataResourceDeserializerHelpers : object {
    internal static void AppendDeletedProperties(object resource, ODataDeletedResource deletedResource, bool isUntyped);
    internal static ODataDeserializerContext GenerateNestedReadContext(ODataNestedResourceInfoWrapper resourceInfoWrapper, ODataDeserializerContext readContext, IEdmProperty edmProperty);
    private static IEdmPathExpression GetBindingPath(ODataPath path, IEdmNavigationProperty navigationProperty);
    internal static ODataDeserializerContext BuildNestedContextFromCurrentContext(ODataDeserializerContext readContext, ODataPath path, Type resourceType);
    internal static ODataPath AppendToPath(ODataPath path, ODataPathSegment segment);
    internal static ODataPath AppendToPath(ODataPath path, ODataPathSegment segment, IEdmType declaringType, IEdmNavigationSource navigationSource);
    internal static ODataPath GetODataPath(string id, ODataDeserializerContext readContext);
    internal static void ApplyODataIdContainer(object resource, ODataResourceWrapper resourceWrapper, ODataDeserializerContext readContext);
    internal static ODataPath ApplyIdToPath(ODataDeserializerContext readContext, ODataResourceWrapper resourceWrapper);
    internal static IList`1<ODataProperty> CreateKeyProperties(Uri id, ODataDeserializerContext readContext);
}
public class Microsoft.AspNet.OData.Formatter.Deserialization.ODataResourceSetDeserializer : ODataEdmTypeDeserializer {
    private static MethodInfo CastMethodInfo;
    public ODataResourceSetDeserializer(ODataDeserializerProvider deserializerProvider);
    private static ODataResourceSetDeserializer();
    public virtual object Read(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Deserialization.ODataResourceSetDeserializer/<ReadAsync>d__3")]
public virtual Task`1<object> ReadAsync(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
    public sealed virtual object ReadInline(object item, IEdmTypeReference edmType, ODataDeserializerContext readContext);
    private static ICollection`1<IDeltaSetItem> CreateDeltaSet(IList`1<string> keys, ODataDeserializerContext readContext, IEdmStructuredTypeReference elementType, IEnumerable result);
    [IteratorStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Deserialization.ODataResourceSetDeserializer/<ReadResourceSet>d__6")]
public virtual IEnumerable ReadResourceSet(ODataResourceSetWrapperBase resourceSet, IEdmStructuredTypeReference elementType, ODataDeserializerContext readContext);
}
public class Microsoft.AspNet.OData.Formatter.Deserialization.ODataResourceSetWrapper : ODataResourceSetWrapperBase {
    [CompilerGeneratedAttribute]
private ODataResourceSet <ResourceSet>k__BackingField;
    internal ResourceSetType ResourceSetType { get; }
    public ODataResourceSet ResourceSet { get; }
    public ODataResourceSetWrapper(ODataResourceSet item);
    internal virtual ResourceSetType get_ResourceSetType();
    [CompilerGeneratedAttribute]
public ODataResourceSet get_ResourceSet();
}
public abstract class Microsoft.AspNet.OData.Formatter.Deserialization.ODataResourceSetWrapperBase : ODataItemBase {
    [CompilerGeneratedAttribute]
private ODataResourceSetBase <ResourceSetBase>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ODataResourceWrapper> <Resources>k__BackingField;
    internal ResourceSetType ResourceSetType { get; }
    public ODataResourceSetBase ResourceSetBase { get; }
    public IList`1<ODataResourceWrapper> Resources { get; }
    public ODataResourceSetWrapperBase(ODataResourceSetBase item);
    internal abstract virtual ResourceSetType get_ResourceSetType();
    [CompilerGeneratedAttribute]
public ODataResourceSetBase get_ResourceSetBase();
    [CompilerGeneratedAttribute]
public IList`1<ODataResourceWrapper> get_Resources();
}
public class Microsoft.AspNet.OData.Formatter.Deserialization.ODataResourceWrapper : ODataItemBase {
    [CompilerGeneratedAttribute]
private ODataResourceBase <ResourceBase>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ODataNestedResourceInfoWrapper> <NestedResourceInfos>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ODataPropertyInfo> <NestedPropertyInfos>k__BackingField;
    public ODataResourceBase ResourceBase { get; }
    [ObsoleteAttribute("Please use ResourceBase instead")]
public ODataResource Resource { get; }
    public IList`1<ODataNestedResourceInfoWrapper> NestedResourceInfos { get; private set; }
    public IList`1<ODataPropertyInfo> NestedPropertyInfos { get; private set; }
    public ODataResourceWrapper(ODataResourceBase item);
    [CompilerGeneratedAttribute]
public ODataResourceBase get_ResourceBase();
    public ODataResource get_Resource();
    [CompilerGeneratedAttribute]
public IList`1<ODataNestedResourceInfoWrapper> get_NestedResourceInfos();
    [CompilerGeneratedAttribute]
private void set_NestedResourceInfos(IList`1<ODataNestedResourceInfoWrapper> value);
    [CompilerGeneratedAttribute]
public IList`1<ODataPropertyInfo> get_NestedPropertyInfos();
    [CompilerGeneratedAttribute]
private void set_NestedPropertyInfos(IList`1<ODataPropertyInfo> value);
}
internal enum Microsoft.AspNet.OData.Formatter.Deserialization.ResourceSetType : Enum {
    public int value__;
    public static ResourceSetType ResourceSet;
    public static ResourceSetType DeltaResourceSet;
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.OData.Formatter.EdmLibHelpers : object {
    private static EdmCoreModel _coreModel;
    private static Dictionary`2<Type, IEdmPrimitiveType> _builtInTypesMapping;
    private static EdmLibHelpers();
    [ExtensionAttribute]
public static IEdmType GetEdmType(IEdmModel edmModel, Type clrType);
    private static IEdmType GetEdmType(IEdmModel edmModel, Type clrType, bool testCollections);
    [ExtensionAttribute]
public static IEdmTypeReference GetEdmTypeReference(IEdmModel edmModel, Type clrType);
    [ExtensionAttribute]
public static IEdmTypeReference ToEdmTypeReference(IEdmType edmType, bool isNullable);
    [ExtensionAttribute]
public static IEdmCollectionType GetCollection(IEdmEntityType entityType);
    public static Type GetClrType(IEdmTypeReference edmTypeReference, IEdmModel edmModel);
    public static Type GetClrType(IEdmTypeReference edmTypeReference, IEdmModel edmModel, IWebApiAssembliesResolver assembliesResolver);
    public static Type GetClrType(IEdmType edmType, IEdmModel edmModel);
    public static Type GetClrType(IEdmType edmType, IEdmModel edmModel, IWebApiAssembliesResolver assembliesResolver);
    public static bool IsNotFilterable(IEdmProperty edmProperty, IEdmProperty pathEdmProperty, IEdmStructuredType pathEdmStructuredType, IEdmModel edmModel, bool enableFilter);
    public static bool IsNotSortable(IEdmProperty edmProperty, IEdmProperty pathEdmProperty, IEdmStructuredType pathEdmStructuredType, IEdmModel edmModel, bool enableOrderBy);
    public static bool IsNotSelectable(IEdmProperty edmProperty, IEdmProperty pathEdmProperty, IEdmStructuredType pathEdmStructuredType, IEdmModel edmModel, bool enableSelect);
    public static bool IsNotNavigable(IEdmProperty edmProperty, IEdmModel edmModel);
    public static bool IsNotExpandable(IEdmProperty edmProperty, IEdmModel edmModel);
    public static bool IsAutoSelect(IEdmProperty property, IEdmProperty pathProperty, IEdmStructuredType pathStructuredType, IEdmModel edmModel, ModelBoundQuerySettings querySettings);
    public static bool IsAutoExpand(IEdmProperty navigationProperty, IEdmProperty pathProperty, IEdmStructuredType pathStructuredType, IEdmModel edmModel, bool isSelectPresent, ModelBoundQuerySettings querySettings);
    public static IEnumerable`1<IEdmNavigationProperty> GetAutoExpandNavigationProperties(IEdmProperty pathProperty, IEdmStructuredType pathStructuredType, IEdmModel edmModel, bool isSelectPresent, ModelBoundQuerySettings querySettings);
    public static IEnumerable`1<IEdmStructuralProperty> GetAutoSelectProperties(IEdmProperty pathProperty, IEdmStructuredType pathStructuredType, IEdmModel edmModel, ModelBoundQuerySettings querySettings);
    public static bool IsTopLimitExceeded(IEdmProperty property, IEdmStructuredType structuredType, IEdmModel edmModel, int top, DefaultQuerySettings defaultQuerySettings, Int32& maxTop);
    public static bool IsNotCountable(IEdmProperty property, IEdmStructuredType structuredType, IEdmModel edmModel, bool enableCount);
    public static bool IsExpandable(string propertyName, IEdmProperty property, IEdmStructuredType structuredType, IEdmModel edmModel, ExpandConfiguration& expandConfiguration);
    [ExtensionAttribute]
public static ModelBoundQuerySettings GetModelBoundQuerySettingsOrNull(IEdmModel edmModel, IEdmStructuredType structuredType, IEdmProperty property);
    public static ModelBoundQuerySettings GetModelBoundQuerySettings(IEdmProperty property, IEdmStructuredType structuredType, IEdmModel edmModel, DefaultQuerySettings defaultQuerySettings);
    public static IEnumerable`1<IEdmEntityType> GetAllDerivedEntityTypes(IEdmEntityType entityType, IEdmModel edmModel);
    public static IEdmType GetElementType(IEdmTypeReference edmTypeReference);
    public static void GetPropertyAndStructuredTypeFromPath(IEnumerable`1<ODataPathSegment> segments, IEdmProperty& property, IEdmStructuredType& structuredType, String& name);
    public static string GetClrPropertyName(IEdmProperty edmProperty, IEdmModel edmModel);
    [ExtensionAttribute]
public static ClrEnumMemberAnnotation GetClrEnumMemberAnnotation(IEdmModel edmModel, IEdmEnumType enumType);
    public static PropertyInfo GetDynamicPropertyDictionary(IEdmStructuredType edmType, IEdmModel edmModel);
    public static PropertyInfo GetInstanceAnnotationsContainer(IEdmStructuredType edmType, IEdmModel edmModel);
    public static bool HasLength(EdmPrimitiveTypeKind primitiveTypeKind);
    public static bool HasPrecision(EdmPrimitiveTypeKind primitiveTypeKind);
    public static IEdmPrimitiveType GetEdmPrimitiveTypeOrNull(Type clrType);
    public static IEdmPrimitiveTypeReference GetEdmPrimitiveTypeReferenceOrNull(Type clrType);
    public static Type IsNonstandardEdmPrimitive(Type type, Boolean& isNonstandardEdmPrimitive);
    [ExtensionAttribute]
public static string EdmName(Type clrType);
    [ExtensionAttribute]
public static string EdmFullName(Type clrType);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmStructuralProperty> GetConcurrencyProperties(IEdmModel model, IEdmNavigationSource navigationSource);
    public static bool IsDynamicTypeWrapper(Type type);
    public static bool IsNullable(Type type);
    [ExtensionAttribute]
public static IEdmTypeReference GetElementTypeOrSelf(IEdmTypeReference typeReference);
    internal static IEdmTypeReference GetExpectedPayloadType(Type type, ODataPath path, IEdmModel model);
    internal static bool TryGetInnerTypeForDelta(Type& type);
    private static ModelBoundQuerySettings GetMergedPropertyQuerySettings(ModelBoundQuerySettings propertyQuerySettings, ModelBoundQuerySettings propertyTypeQuerySettings);
    private static ModelBoundQuerySettings GetModelBoundQuerySettings(T key, IEdmModel edmModel, DefaultQuerySettings defaultQuerySettings);
    internal static QueryableRestrictionsAnnotation GetPropertyRestrictions(IEdmProperty edmProperty, IEdmModel edmModel);
    private static IEdmPrimitiveType GetPrimitiveType(EdmPrimitiveTypeKind primitiveKind);
    private static bool IsSelectExpandWrapper(Type type, Type& entityType);
    private static bool IsDeltaSetWrapper(Type type, Type& entityType);
    internal static bool IsComputeWrapper(Type type, Type& entityType);
    private static bool IsTypeWrapper(Type wrappedType, Type type, Type& entityType);
    private static Type ExtractGenericInterface(Type queryType, Type interfaceType);
    private static IEnumerable`1<Type> GetMatchingTypes(string edmFullName, IWebApiAssembliesResolver assembliesResolver);
    private static string MangleClrTypeName(Type type);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.OData.Formatter.EdmObjectHelper : object {
    [ExtensionAttribute]
public static IEdmObject ConvertToEdmObject(IEnumerable enumerable, IEdmCollectionTypeReference collectionType);
}
internal static class Microsoft.AspNet.OData.Formatter.EdmPrimitiveHelpers : object {
    public static object ConvertPrimitiveValue(object value, Type type);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNet.OData.Formatter.ETag : DynamicObject {
    private IDictionary`2<string, object> _concurrencyProperties;
    [CompilerGeneratedAttribute]
private bool <IsWellFormed>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAny>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIfNoneMatch>k__BackingField;
    public object Item { get; public set; }
    public bool IsWellFormed { get; public set; }
    public Type EntityType { get; public set; }
    public bool IsAny { get; public set; }
    public bool IsIfNoneMatch { get; public set; }
    internal IDictionary`2<string, object> ConcurrencyProperties { get; internal set; }
    public object get_Item(string key);
    public void set_Item(string key, object value);
    [CompilerGeneratedAttribute]
public bool get_IsWellFormed();
    [CompilerGeneratedAttribute]
public void set_IsWellFormed(bool value);
    [CompilerGeneratedAttribute]
public Type get_EntityType();
    [CompilerGeneratedAttribute]
public void set_EntityType(Type value);
    [CompilerGeneratedAttribute]
public bool get_IsAny();
    [CompilerGeneratedAttribute]
public void set_IsAny(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsIfNoneMatch();
    [CompilerGeneratedAttribute]
public void set_IsIfNoneMatch(bool value);
    internal IDictionary`2<string, object> get_ConcurrencyProperties();
    internal void set_ConcurrencyProperties(IDictionary`2<string, object> value);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public virtual IQueryable ApplyTo(IQueryable query);
}
public class Microsoft.AspNet.OData.Formatter.ETag`1 : ETag {
    public virtual IQueryable ApplyTo(IQueryable query);
    public IQueryable`1<TEntity> ApplyTo(IQueryable`1<TEntity> query);
    private static void ValidateQuery(IQueryable query);
}
public interface Microsoft.AspNet.OData.Formatter.IETagHandler {
    public abstract virtual EntityTagHeaderValue CreateETag(IDictionary`2<string, object> properties);
    public abstract virtual IDictionary`2<string, object> ParseETag(EntityTagHeaderValue etagHeaderValue);
}
public class Microsoft.AspNet.OData.Formatter.ODataBinaryValueMediaTypeMapping : ODataRawValueMediaTypeMapping {
    protected virtual bool IsMatch(PropertySegment propertySegment);
}
public class Microsoft.AspNet.OData.Formatter.ODataCountMediaTypeMapping : MediaTypeMapping {
    public virtual double TryMatchMediaType(HttpRequestMessage request);
    internal static bool IsCountRequest(ODataPath path);
}
public class Microsoft.AspNet.OData.Formatter.ODataEnumValueMediaTypeMapping : ODataRawValueMediaTypeMapping {
    protected virtual bool IsMatch(PropertySegment propertySegment);
}
internal static class Microsoft.AspNet.OData.Formatter.ODataInputFormatterHelper : object {
    internal static bool CanReadType(Type type, IEdmModel model, ODataPath path, IEnumerable`1<ODataPayloadKind> payloadKinds, Func`2<IEdmTypeReference, ODataDeserializer> getEdmTypeDeserializer, Func`2<Type, ODataDeserializer> getODataPayloadDeserializer);
    internal static object ReadFromStream(Type type, object defaultValue, IEdmModel model, ODataVersion version, Uri baseAddress, IWebApiRequestMessage internalRequest, Func`1<IODataRequestMessage> getODataRequestMessage, Func`2<IEdmTypeReference, ODataDeserializer> getEdmTypeDeserializer, Func`2<Type, ODataDeserializer> getODataPayloadDeserializer, Func`1<ODataDeserializerContext> getODataDeserializerContext, Action`1<IDisposable> registerForDisposeAction, Action`1<Exception> logErrorAction);
    private static ODataDeserializer GetDeserializer(Type type, ODataPath path, IEdmModel model, Func`2<IEdmTypeReference, ODataDeserializer> getEdmTypeDeserializer, Func`2<Type, ODataDeserializer> getODataPayloadDeserializer, IEdmTypeReference& expectedPayloadType);
}
public class Microsoft.AspNet.OData.Formatter.ODataMediaTypeFormatter : MediaTypeFormatter {
    private IEnumerable`1<ODataPayloadKind> _payloadKinds;
    [CompilerGeneratedAttribute]
private Func`2<HttpRequestMessage, Uri> <BaseAddressFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpRequestMessage <Request>k__BackingField;
    public Func`2<HttpRequestMessage, Uri> BaseAddressFactory { get; public set; }
    public HttpRequestMessage Request { get; public set; }
    public ODataMediaTypeFormatter(IEnumerable`1<ODataPayloadKind> payloadKinds);
    internal ODataMediaTypeFormatter(ODataMediaTypeFormatter formatter, HttpRequestMessage request);
    [CompilerGeneratedAttribute]
public Func`2<HttpRequestMessage, Uri> get_BaseAddressFactory();
    [CompilerGeneratedAttribute]
public void set_BaseAddressFactory(Func`2<HttpRequestMessage, Uri> value);
    [CompilerGeneratedAttribute]
public HttpRequestMessage get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(HttpRequestMessage value);
    public virtual MediaTypeFormatter GetPerRequestFormatterInstance(Type type, HttpRequestMessage request, MediaTypeHeaderValue mediaType);
    public virtual void SetDefaultContentHeaders(Type type, HttpContentHeaders headers, MediaTypeHeaderValue mediaType);
    public virtual bool CanReadType(Type type);
    public virtual bool CanWriteType(Type type);
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    public virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.ODataMediaTypeFormatter/<CopyStreamAsync>d__17")]
private static Task CopyStreamAsync(Stream source, Stream destination);
    private Uri GetBaseAddressInternal(HttpRequestMessage request);
    public static Uri GetDefaultBaseAddress(HttpRequestMessage request);
}
[ExtensionAttribute]
public static class Microsoft.AspNet.OData.Formatter.ODataMediaTypeFormatters : object {
    private static string DollarFormat;
    private static string JsonFormat;
    private static string XmlFormat;
    public static IList`1<ODataMediaTypeFormatter> Create();
    private static void AddSupportedEncodings(MediaTypeFormatter formatter);
    private static ODataMediaTypeFormatter CreateRawValue();
    private static ODataMediaTypeFormatter CreateApplicationJson();
    private static ODataMediaTypeFormatter CreateMetadataFormatter();
    private static ODataMediaTypeFormatter CreateFormatterWithoutMediaTypes(ODataPayloadKind[] payloadKinds);
    [ExtensionAttribute]
private static void AddDollarFormatQueryStringMappings(ODataMediaTypeFormatter formatter);
}
internal static class Microsoft.AspNet.OData.Formatter.ODataMediaTypes : object {
    public static string ApplicationJson;
    public static string ApplicationJsonODataFullMetadata;
    public static string ApplicationJsonODataFullMetadataStreamingFalse;
    public static string ApplicationJsonODataFullMetadataStreamingTrue;
    public static string ApplicationJsonODataMinimalMetadata;
    public static string ApplicationJsonODataMinimalMetadataStreamingFalse;
    public static string ApplicationJsonODataMinimalMetadataStreamingTrue;
    public static string ApplicationJsonODataNoMetadata;
    public static string ApplicationJsonODataNoMetadataStreamingFalse;
    public static string ApplicationJsonODataNoMetadataStreamingTrue;
    public static string ApplicationJsonStreamingFalse;
    public static string ApplicationJsonStreamingTrue;
    public static string ApplicationJsonIeee754CompatibleTrue;
    public static string ApplicationJsonIeee754CompatibleFalse;
    public static string ApplicationJsonODataFullMetadataIeee754CompatibleTrue;
    public static string ApplicationJsonODataFullMetadataIeee754CompatibleFalse;
    public static string ApplicationJsonODataFullMetadataStreamingFalseIeee754CompatibleTrue;
    public static string ApplicationJsonODataFullMetadataStreamingFalseIeee754CompatibleFalse;
    public static string ApplicationJsonODataFullMetadataStreamingTrueIeee754CompatibleTrue;
    public static string ApplicationJsonODataFullMetadataStreamingTrueIeee754CompatibleFalse;
    public static string ApplicationJsonODataMinimalMetadataIeee754CompatibleTrue;
    public static string ApplicationJsonODataMinimalMetadataIeee754CompatibleFalse;
    public static string ApplicationJsonODataMinimalMetadataStreamingFalseIeee754CompatibleTrue;
    public static string ApplicationJsonODataMinimalMetadataStreamingFalseIeee754CompatibleFalse;
    public static string ApplicationJsonODataMinimalMetadataStreamingTrueIeee754CompatibleTrue;
    public static string ApplicationJsonODataMinimalMetadataStreamingTrueIeee754CompatibleFalse;
    public static string ApplicationJsonODataNoMetadataIeee754CompatibleTrue;
    public static string ApplicationJsonODataNoMetadataIeee754CompatibleFalse;
    public static string ApplicationJsonODataNoMetadataStreamingFalseIeee754CompatibleTrue;
    public static string ApplicationJsonODataNoMetadataStreamingFalseIeee754CompatibleFalse;
    public static string ApplicationJsonODataNoMetadataStreamingTrueIeee754CompatibleTrue;
    public static string ApplicationJsonODataNoMetadataStreamingTrueIeee754CompatibleFalse;
    public static string ApplicationJsonStreamingFalseIeee754CompatibleTrue;
    public static string ApplicationJsonStreamingFalseIeee754CompatibleFalse;
    public static string ApplicationJsonStreamingTrueIeee754CompatibleTrue;
    public static string ApplicationJsonStreamingTrueIeee754CompatibleFalse;
    public static string ApplicationXml;
    private static ODataMediaTypes();
    public static ODataMetadataLevel GetMetadataLevel(string mediaType, IEnumerable`1<KeyValuePair`2<string, string>> parameters);
}
internal class Microsoft.AspNet.OData.Formatter.ODataMessageWrapper : object {
    private Stream _stream;
    private Dictionary`2<string, string> _headers;
    private IDictionary`2<string, string> _contentIdMapping;
    private static Regex ContentIdReferencePattern;
    [CompilerGeneratedAttribute]
private IServiceProvider <Container>k__BackingField;
    public IEnumerable`1<KeyValuePair`2<string, string>> Headers { get; }
    public string Method { get; public set; }
    public Uri Url { get; public set; }
    public int StatusCode { get; public set; }
    public IServiceProvider Container { get; public set; }
    public ODataMessageWrapper(Stream stream);
    public ODataMessageWrapper(Stream stream, Dictionary`2<string, string> headers);
    public ODataMessageWrapper(Stream stream, Dictionary`2<string, string> headers, IDictionary`2<string, string> contentIdMapping);
    private static ODataMessageWrapper();
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, string>> get_Headers();
    public sealed virtual string get_Method();
    public sealed virtual void set_Method(string value);
    public sealed virtual Uri get_Url();
    public sealed virtual void set_Url(Uri value);
    public sealed virtual int get_StatusCode();
    public sealed virtual void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_Container();
    [CompilerGeneratedAttribute]
public void set_Container(IServiceProvider value);
    public sealed virtual string GetHeader(string headerName);
    public sealed virtual Stream GetStream();
    public sealed virtual Task`1<Stream> GetStreamAsync();
    public sealed virtual void SetHeader(string headerName, string headerValue);
    public sealed virtual Uri ConvertPayloadUri(Uri baseUri, Uri payloadUri);
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
}
public enum Microsoft.AspNet.OData.Formatter.ODataMetadataLevel : Enum {
    public int value__;
    public static ODataMetadataLevel MinimalMetadata;
    public static ODataMetadataLevel FullMetadata;
    public static ODataMetadataLevel NoMetadata;
}
public static class Microsoft.AspNet.OData.Formatter.ODataModelBinderConverter : object {
    private static MethodInfo EnumTryParseMethod;
    private static MethodInfo CastMethodInfo;
    private static ODataModelBinderConverter();
    public static object Convert(object graph, IEdmTypeReference edmTypeReference, Type clrType, string parameterName, ODataDeserializerContext readContext, IServiceProvider requestContainer);
    internal static object ConvertTo(string valueString, Type type);
    private static object ConvertCollection(ODataCollectionValue collectionValue, IEdmTypeReference edmTypeReference, Type clrType, string parameterName, ODataDeserializerContext readContext, IServiceProvider requestContainer);
    private static object ConvertResourceOrResourceSet(object oDataValue, IEdmTypeReference edmTypeReference, ODataDeserializerContext readContext);
    private static object ConvertResourceSet(ODataMessageReader oDataMessageReader, IEdmTypeReference edmTypeReference, ODataDeserializerContext readContext);
    private static object ConvertResource(ODataMessageReader oDataMessageReader, IEdmTypeReference edmTypeReference, ODataDeserializerContext readContext);
    [IteratorStateMachineAttribute("Microsoft.AspNet.OData.Formatter.ODataModelBinderConverter/<CovertResourceSetIds>d__8")]
private static IEnumerable CovertResourceSetIds(IEnumerable sources, ODataResourceSetWrapper resourceSet, IEdmCollectionTypeReference collectionType, ODataDeserializerContext readContext);
    private static object CovertResourceId(object source, ODataResourceBase resource, IEdmEntityTypeReference entityTypeReference, ODataDeserializerContext readContext);
    private static IEnumerable`1<KeyValuePair`2<string, object>> GetKeys(DefaultODataPathHandler pathHandler, string serviceRoot, Uri uri, IServiceProvider requestContainer);
}
public class Microsoft.AspNet.OData.Formatter.ODataModelBinderProvider : ModelBinderProvider {
    public virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
}
internal static class Microsoft.AspNet.OData.Formatter.ODataOutputFormatterHelper : object {
    internal static bool TryGetContentHeader(Type type, MediaTypeHeaderValue mediaType, MediaTypeHeaderValue& newMediaType);
    internal static bool TryGetCharSet(MediaTypeHeaderValue mediaType, IEnumerable`1<string> acceptCharsetValues, String& charSet);
    internal static bool CanWriteType(Type type, IEnumerable`1<ODataPayloadKind> payloadKinds, bool isGenericSingleResult, IWebApiRequestMessage internalRequest, Func`2<Type, ODataSerializer> getODataPayloadSerializer);
    internal static void WriteToStream(Type type, object value, IEdmModel model, ODataVersion version, Uri baseAddress, MediaTypeHeaderValue contentType, IWebApiUrlHelper internaUrlHelper, IWebApiRequestMessage internalRequest, IWebApiHeaders internalRequestHeaders, Func`2<IServiceProvider, ODataMessageWrapper> getODataMessageWrapper, Func`2<IEdmTypeReference, ODataSerializer> getEdmTypeSerializer, Func`2<Type, ODataSerializer> getODataPayloadSerializer, Func`1<ODataSerializerContext> getODataSerializerContext);
    private static Nullable`1<ODataPayloadKind> GetClrObjectResponsePayloadKind(Type type, bool isGenericSingleResult, Func`2<Type, ODataSerializer> getODataPayloadSerializer);
    private static Nullable`1<ODataPayloadKind> GetEdmObjectPayloadKind(Type type, IWebApiRequestMessage internalRequest);
    private static ODataSerializer GetSerializer(Type type, object value, IWebApiRequestMessage internalRequest, Func`2<IEdmTypeReference, ODataSerializer> getEdmTypeSerializer, Func`2<Type, ODataSerializer> getODataPayloadSerializer);
    private static string GetRootElementName(ODataPath path);
    private static bool IsOperationPath(ODataPath path);
    private static ODataPath ConvertPath(ODataPath path);
    private static ODataPath GeneratePath(IEdmNavigationSource navigationSource);
}
public class Microsoft.AspNet.OData.Formatter.ODataPrimitiveValueMediaTypeMapping : ODataRawValueMediaTypeMapping {
    protected virtual bool IsMatch(PropertySegment propertySegment);
}
public abstract class Microsoft.AspNet.OData.Formatter.ODataRawValueMediaTypeMapping : MediaTypeMapping {
    protected ODataRawValueMediaTypeMapping(string mediaType);
    public virtual double TryMatchMediaType(HttpRequestMessage request);
    protected abstract virtual bool IsMatch(PropertySegment propertySegment);
    internal static bool IsRawValueRequest(ODataPath path);
    private static PropertySegment GetProperty(ODataPath odataPath);
}
public class Microsoft.AspNet.OData.Formatter.ODataStreamMediaTypeMapping : MediaTypeMapping {
    public virtual double TryMatchMediaType(HttpRequestMessage request);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.OData.Formatter.ODataValueExtensions : object {
    [ExtensionAttribute]
public static object GetInnerValue(ODataValue odataValue);
}
public class Microsoft.AspNet.OData.Formatter.QueryStringMediaTypeMapping : MediaTypeMapping {
    [CompilerGeneratedAttribute]
private string <QueryStringParameterName>k__BackingField;
    public string QueryStringParameterName { get; private set; }
    public QueryStringMediaTypeMapping(string queryStringParameterName, MediaTypeHeaderValue mediaType);
    public QueryStringMediaTypeMapping(string queryStringParameterName, string mediaType);
    public virtual double TryMatchMediaType(HttpRequestMessage request);
    private static FormDataCollection GetQueryString(Uri uri);
    [CompilerGeneratedAttribute]
public string get_QueryStringParameterName();
    [CompilerGeneratedAttribute]
private void set_QueryStringParameterName(string value);
    private bool DoesQueryStringMatch(IEnumerable`1<KeyValuePair`2<string, string>> queryString);
    [CompilerGeneratedAttribute]
private bool <DoesQueryStringMatch>b__8_0(KeyValuePair`2<string, string> kvp);
}
public class Microsoft.AspNet.OData.Formatter.Serialization.DefaultODataSerializerProvider : ODataSerializerProvider {
    private IServiceProvider _rootContainer;
    public DefaultODataSerializerProvider(IServiceProvider rootContainer);
    public virtual ODataSerializer GetODataPayloadSerializer(Type type, HttpRequestMessage request);
    public virtual ODataEdmTypeSerializer GetEdmTypeSerializer(IEdmTypeReference edmType);
    internal ODataSerializer GetODataPayloadSerializerImpl(Type type, Func`1<IEdmModel> modelFunction, ODataPath path, Type errorType);
}
public class Microsoft.AspNet.OData.Formatter.Serialization.EntitySelfLinks : object {
    [CompilerGeneratedAttribute]
private Uri <IdLink>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <EditLink>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ReadLink>k__BackingField;
    public Uri IdLink { get; public set; }
    public Uri EditLink { get; public set; }
    public Uri ReadLink { get; public set; }
    [CompilerGeneratedAttribute]
public Uri get_IdLink();
    [CompilerGeneratedAttribute]
public void set_IdLink(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_EditLink();
    [CompilerGeneratedAttribute]
public void set_EditLink(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_ReadLink();
    [CompilerGeneratedAttribute]
public void set_ReadLink(Uri value);
}
public class Microsoft.AspNet.OData.Formatter.Serialization.ODataCollectionSerializer : ODataEdmTypeSerializer {
    private bool isForAnnotations;
    public ODataCollectionSerializer(ODataSerializerProvider serializerProvider);
    public ODataCollectionSerializer(ODataSerializerProvider serializerProvider, bool isForAnnotations);
    public virtual void WriteObject(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataCollectionSerializer/<WriteObjectAsync>d__4")]
public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    public sealed virtual ODataValue CreateODataValue(object graph, IEdmTypeReference expectedType, ODataSerializerContext writeContext);
    public void WriteCollection(ODataCollectionWriter writer, object graph, IEdmTypeReference collectionType, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataCollectionSerializer/<WriteCollectionAsync>d__7")]
public Task WriteCollectionAsync(ODataCollectionWriter writer, object graph, IEdmTypeReference collectionType, ODataSerializerContext writeContext);
    public virtual ODataCollectionValue CreateODataCollectionValue(IEnumerable enumerable, IEdmTypeReference elementType, ODataSerializerContext writeContext);
    internal virtual ODataProperty CreateProperty(object graph, IEdmTypeReference expectedType, string elementName, ODataSerializerContext writeContext);
    protected internal static void AddTypeNameAnnotationAsNeeded(ODataCollectionValue value, ODataMetadataLevel metadataLevel);
    internal static bool ShouldAddTypeNameAnnotation(ODataMetadataLevel metadataLevel);
    internal static bool ShouldSuppressTypeNameSerialization(ODataMetadataLevel metadataLevel);
    private static IEdmTypeReference GetElementType(IEdmTypeReference feedType);
    private static ODataCollectionStart GetCollectionStart(ODataSerializerContext writeContext);
}
public class Microsoft.AspNet.OData.Formatter.Serialization.ODataDeltaFeedSerializer : ODataEdmTypeSerializer {
    private static string DeltaFeed;
    private IEdmStructuredTypeReference _elementType;
    public ODataDeltaFeedSerializer(ODataSerializerProvider serializerProvider);
    public virtual void WriteObject(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataDeltaFeedSerializer/<WriteObjectAsync>d__4")]
public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    public virtual void WriteDeltaFeedInline(object graph, IEdmTypeReference expectedType, ODataWriter writer, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataDeltaFeedSerializer/<WriteDeltaFeedInlineAsync>d__6")]
public virtual Task WriteDeltaFeedInlineAsync(object graph, IEdmTypeReference expectedType, ODataWriter writer, ODataSerializerContext writeContext);
    private void WriteFeed(IEnumerable enumerable, IEdmTypeReference feedType, ODataWriter writer, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataDeltaFeedSerializer/<WriteFeedAsync>d__8")]
private Task WriteFeedAsync(IEnumerable enumerable, IEdmTypeReference feedType, ODataWriter writer, ODataSerializerContext writeContext);
    internal static Func`2<object, Uri> GetNextLinkGenerator(ODataDeltaResourceSet deltaFeed, IEnumerable enumerable, ODataSerializerContext writeContext);
    public virtual ODataDeltaResourceSet CreateODataDeltaFeed(IEnumerable feedInstance, IEdmCollectionTypeReference feedType, ODataSerializerContext writeContext);
    public virtual void WriteDeltaDeletedEntry(object graph, ODataWriter writer, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataDeltaFeedSerializer/<WriteDeltaDeletedEntryAsync>d__12")]
public virtual Task WriteDeltaDeletedEntryAsync(object graph, ODataWriter writer, ODataSerializerContext writeContext);
    public virtual void WriteDeltaDeletedLink(object graph, ODataWriter writer, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataDeltaFeedSerializer/<WriteDeltaDeletedLinkAsync>d__14")]
public virtual Task WriteDeltaDeletedLinkAsync(object graph, ODataWriter writer, ODataSerializerContext writeContext);
    public virtual void WriteDeltaLink(object graph, ODataWriter writer, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataDeltaFeedSerializer/<WriteDeltaLinkAsync>d__16")]
public Task WriteDeltaLinkAsync(object graph, ODataWriter writer, ODataSerializerContext writeContext);
    private ODataDeletedResource GetDeletedResource(object graph, ResourceContext resourceContext, ODataResourceSerializer serializer, SelectExpandNode selectExpandNode, bool isUntyped);
    private ODataDeltaDeletedLink GetDeletedLink(object graph);
    private ODataDeltaLink GetDeltaLink(object graph);
    private static IEdmStructuredTypeReference GetResourceType(IEdmTypeReference feedType);
    internal static Uri StringToUri(string uriString);
    private EdmDeltaEntityKind GetDeltaEntityKind(IEnumerable enumerable, object entry, ODataSerializerContext writeContext);
}
public abstract class Microsoft.AspNet.OData.Formatter.Serialization.ODataEdmTypeSerializer : ODataSerializer {
    [CompilerGeneratedAttribute]
private ODataSerializerProvider <SerializerProvider>k__BackingField;
    public ODataSerializerProvider SerializerProvider { get; private set; }
    protected ODataEdmTypeSerializer(ODataPayloadKind payloadKind);
    protected ODataEdmTypeSerializer(ODataPayloadKind payloadKind, ODataSerializerProvider serializerProvider);
    [CompilerGeneratedAttribute]
public ODataSerializerProvider get_SerializerProvider();
    [CompilerGeneratedAttribute]
private void set_SerializerProvider(ODataSerializerProvider value);
    public virtual void WriteObjectInline(object graph, IEdmTypeReference expectedType, ODataWriter writer, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataEdmTypeSerializer/<WriteObjectInlineAsync>d__7")]
public virtual Task WriteObjectInlineAsync(object graph, IEdmTypeReference expectedType, ODataWriter writer, ODataSerializerContext writeContext);
    public virtual ODataValue CreateODataValue(object graph, IEdmTypeReference expectedType, ODataSerializerContext writeContext);
    internal virtual ODataProperty CreateProperty(object graph, IEdmTypeReference expectedType, string elementName, ODataSerializerContext writeContext);
}
public class Microsoft.AspNet.OData.Formatter.Serialization.ODataEntityReferenceLinkSerializer : ODataSerializer {
    public virtual void WriteObject(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    private ODataEntityReferenceLink GetEntityReferenceLink(object graph);
}
public class Microsoft.AspNet.OData.Formatter.Serialization.ODataEntityReferenceLinksSerializer : ODataSerializer {
    public virtual void WriteObject(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    private ODataEntityReferenceLinks GetEntityReferenceLinks(object graph, ODataSerializerContext writeContext);
}
public class Microsoft.AspNet.OData.Formatter.Serialization.ODataEnumSerializer : ODataEdmTypeSerializer {
    public ODataEnumSerializer(ODataSerializerProvider serializerProvider);
    public virtual void WriteObject(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    public sealed virtual ODataValue CreateODataValue(object graph, IEdmTypeReference expectedType, ODataSerializerContext writeContext);
    public virtual ODataEnumValue CreateODataEnumValue(object graph, IEdmEnumTypeReference enumType, ODataSerializerContext writeContext);
    internal static void AddTypeNameAnnotationAsNeeded(ODataEnumValue enumValue, IEdmEnumTypeReference enumType, ODataMetadataLevel metadataLevel);
    private static bool ShouldAddTypeNameAnnotation(ODataMetadataLevel metadataLevel);
    private static bool ShouldSuppressTypeNameSerialization(ODataMetadataLevel metadataLevel);
}
public class Microsoft.AspNet.OData.Formatter.Serialization.ODataErrorSerializer : ODataSerializer {
    internal static bool IsHttpError(object error);
    internal static ODataError CreateODataError(object error);
    public virtual void WriteObject(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    private static ODataError GetError(object graph);
}
public class Microsoft.AspNet.OData.Formatter.Serialization.ODataMetadataSerializer : ODataSerializer {
    public virtual void WriteObject(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
}
internal static class Microsoft.AspNet.OData.Formatter.Serialization.ODataPayloadKindHelper : object {
    public static bool IsDefined(ODataPayloadKind payloadKind);
    public static void Validate(ODataPayloadKind payloadKind, string parameterName);
}
public class Microsoft.AspNet.OData.Formatter.Serialization.ODataPrimitiveSerializer : ODataEdmTypeSerializer {
    public virtual void WriteObject(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    public sealed virtual ODataValue CreateODataValue(object graph, IEdmTypeReference expectedType, ODataSerializerContext writeContext);
    public virtual ODataPrimitiveValue CreateODataPrimitiveValue(object graph, IEdmPrimitiveTypeReference primitiveType, ODataSerializerContext writeContext);
    internal static void AddTypeNameAnnotationAsNeeded(ODataPrimitiveValue primitive, IEdmPrimitiveTypeReference primitiveType, ODataMetadataLevel metadataLevel);
    internal static ODataPrimitiveValue CreatePrimitive(object value, IEdmPrimitiveTypeReference primitiveType, ODataSerializerContext writeContext);
    internal static object ConvertPrimitiveValue(object value, IEdmPrimitiveTypeReference primitiveType);
    internal static object ConvertUnsupportedPrimitives(object value);
    internal static bool CanTypeBeInferredInJson(object value);
    internal static bool ShouldSuppressTypeNameSerialization(object value, ODataMetadataLevel metadataLevel);
}
public class Microsoft.AspNet.OData.Formatter.Serialization.ODataRawValueSerializer : ODataSerializer {
    public virtual void WriteObject(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
}
public class Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSerializer : ODataEdmTypeSerializer {
    private static string Resource;
    public ODataResourceSerializer(ODataSerializerProvider serializerProvider);
    public virtual void WriteObject(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSerializer/<WriteObjectAsync>d__3")]
public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    public virtual void WriteObjectInline(object graph, IEdmTypeReference expectedType, ODataWriter writer, ODataSerializerContext writeContext);
    public virtual Task WriteObjectInlineAsync(object graph, IEdmTypeReference expectedType, ODataWriter writer, ODataSerializerContext writeContext);
    public virtual void WriteDeltaObjectInline(object graph, IEdmTypeReference expectedType, ODataWriter writer, ODataSerializerContext writeContext);
    public virtual Task WriteDeltaObjectInlineAsync(object graph, IEdmTypeReference expectedType, ODataWriter writer, ODataSerializerContext writeContext);
    public virtual SelectExpandNode CreateSelectExpandNode(ResourceContext resourceContext);
    public virtual ODataResource CreateResource(SelectExpandNode selectExpandNode, ResourceContext resourceContext);
    public virtual ODataDeletedResource CreateDeletedResource(SelectExpandNode selectExpandNode, ResourceContext resourceContext);
    public virtual void AppendDynamicProperties(ODataResourceBase resource, SelectExpandNode selectExpandNode, ResourceContext resourceContext);
    public virtual void AppendInstanceAnnotations(ODataResourceBase resource, ResourceContext resourceContext);
    public virtual string CreateETag(ResourceContext resourceContext);
    public virtual ODataNestedResourceInfo CreateDynamicComplexNestedResourceInfo(string propertyName, object propertyValue, IEdmTypeReference edmType, ResourceContext resourceContext);
    public virtual ODataNestedResourceInfo CreateComplexNestedResourceInfo(IEdmStructuralProperty complexProperty, PathSelectItem pathSelectItem, ResourceContext resourceContext);
    public virtual ODataNestedResourceInfo CreateNavigationLink(IEdmNavigationProperty navigationProperty, ResourceContext resourceContext);
    public virtual ODataProperty CreateStructuralProperty(IEdmStructuralProperty structuralProperty, ResourceContext resourceContext);
    public virtual ODataAction CreateODataAction(IEdmAction action, ResourceContext resourceContext);
    public virtual ODataFunction CreateODataFunction(IEdmFunction function, ResourceContext resourceContext);
    internal ResourceContext GetResourceContext(object graph, ODataSerializerContext writeContext);
    internal void WriteDeltaComplexProperties(SelectExpandNode selectExpandNode, ResourceContext resourceContext, ODataWriter writer);
    internal void WriteDeltaNavigationProperties(SelectExpandNode selectExpandNode, ResourceContext resourceContext, ODataWriter writer);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSerializer/<WriteDeltaNavigationPropertiesAsync>d__23")]
internal Task WriteDeltaNavigationPropertiesAsync(SelectExpandNode selectExpandNode, ResourceContext resourceContext, ODataWriter writer);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSerializer/<WriteDeltaComplexPropertiesAsync>d__24")]
internal Task WriteDeltaComplexPropertiesAsync(SelectExpandNode selectExpandNode, ResourceContext resourceContext, ODataWriter writer);
    internal virtual ODataStreamPropertyInfo CreateStreamProperty(IEdmStructuralProperty structuralProperty, ResourceContext resourceContext);
    internal static void EmitTitle(IEdmModel model, IEdmOperation operation, ODataOperation odataOperation);
    internal static string CreateMetadataFragment(IEdmOperation operation);
    internal static void AddTypeNameAnnotationAsNeeded(ODataResourceBase resource, IEdmStructuredType odataPathType, ODataMetadataLevel metadataLevel);
    internal static void AddTypeNameAnnotationAsNeededForComplex(ODataResourceBase resource, ODataMetadataLevel metadataLevel);
    internal static bool ShouldAddTypeNameAnnotationForComplex(ODataMetadataLevel metadataLevel);
    internal static bool ShouldSuppressTypeNameSerializationForComplex(ODataMetadataLevel metadataLevel);
    internal static bool ShouldOmitOperation(IEdmOperation operation, OperationLinkBuilder builder, ODataMetadataLevel metadataLevel);
    internal static bool ShouldSuppressTypeNameSerialization(ODataResourceBase resource, IEdmStructuredType edmType, ODataMetadataLevel metadataLevel);
    private ODataResourceBase CreateResource(SelectExpandNode selectExpandNode, ResourceContext resourceContext, bool isDeletedResource);
    private void WriteDeltaComplexAndExpandedNavigationProperty(IEdmProperty edmProperty, SelectExpandClause selectExpandClause, ResourceContext resourceContext, ODataWriter writer, Type navigationPropertyType);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSerializer/<WriteDeltaComplexAndExpandedNavigationPropertyAsync>d__36")]
private Task WriteDeltaComplexAndExpandedNavigationPropertyAsync(IEdmProperty edmProperty, SelectExpandClause selectExpandClause, ResourceContext resourceContext, ODataWriter writer, Type navigationPropertyType);
    private static IEnumerable`1<ODataProperty> CreateODataPropertiesFromDynamicType(EdmStructuredType structuredType, object graph, Dictionary`2<IEdmProperty, object> dynamicTypeProperties);
    private void WriteDynamicTypeResource(object graph, ODataWriter writer, IEdmTypeReference expectedType, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSerializer/<WriteDynamicTypeResourceAsync>d__39")]
private Task WriteDynamicTypeResourceAsync(object graph, ODataWriter writer, IEdmTypeReference expectedType, ODataSerializerContext writeContext);
    private void WriteResource(object graph, ODataWriter writer, ODataSerializerContext writeContext, IEdmTypeReference expectedType);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSerializer/<WriteResourceAsync>d__41")]
private Task WriteResourceAsync(object graph, ODataWriter writer, ODataSerializerContext writeContext, IEdmTypeReference expectedType);
    private void WriteNavigationLinks(SelectExpandNode selectExpandNode, ResourceContext resourceContext, ODataWriter writer);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSerializer/<WriteNavigationLinksAsync>d__43")]
private Task WriteNavigationLinksAsync(SelectExpandNode selectExpandNode, ResourceContext resourceContext, ODataWriter writer);
    private void WriteDynamicComplexProperties(ResourceContext resourceContext, ODataWriter writer);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSerializer/<WriteDynamicComplexPropertiesAsync>d__45")]
private Task WriteDynamicComplexPropertiesAsync(ResourceContext resourceContext, ODataWriter writer);
    private void WriteDynamicComplexProperty(object propertyValue, IEdmTypeReference edmType, ResourceContext resourceContext, ODataWriter writer);
    private Task WriteDynamicComplexPropertyAsync(object propertyValue, IEdmTypeReference edmType, ResourceContext resourceContext, ODataWriter writer);
    private void WriteComplexProperties(SelectExpandNode selectExpandNode, ResourceContext resourceContext, ODataWriter writer);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSerializer/<WriteComplexPropertiesAsync>d__49")]
private Task WriteComplexPropertiesAsync(SelectExpandNode selectExpandNode, ResourceContext resourceContext, ODataWriter writer);
    private void WriteStreamProperties(SelectExpandNode selectExpandNode, ResourceContext resourceContext, ODataWriter writer);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSerializer/<WriteStreamPropertiesAsync>d__51")]
private Task WriteStreamPropertiesAsync(SelectExpandNode selectExpandNode, ResourceContext resourceContext, ODataWriter writer);
    private static IDictionary`2<IEdmStructuralProperty, PathSelectItem> GetPropertiesToWrite(SelectExpandNode selectExpandNode, ResourceContext resourceContext);
    [IteratorStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSerializer/<GetNavigationPropertiesToWrite>d__53")]
private IEnumerable`1<KeyValuePair`2<IEdmNavigationProperty, Type>> GetNavigationPropertiesToWrite(SelectExpandNode selectExpandNode, ResourceContext resourceContext);
    private void WriteExpandedNavigationProperties(SelectExpandNode selectExpandNode, ResourceContext resourceContext, ODataWriter writer);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSerializer/<WriteExpandedNavigationPropertiesAsync>d__55")]
private Task WriteExpandedNavigationPropertiesAsync(SelectExpandNode selectExpandNode, ResourceContext resourceContext, ODataWriter writer);
    private void WriteReferencedNavigationProperties(SelectExpandNode selectExpandNode, ResourceContext resourceContext, ODataWriter writer);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSerializer/<WriteReferencedNavigationPropertiesAsync>d__57")]
private Task WriteReferencedNavigationPropertiesAsync(SelectExpandNode selectExpandNode, ResourceContext resourceContext, ODataWriter writer);
    private void WriteComplexAndExpandedNavigationProperty(IEdmProperty edmProperty, SelectItem selectItem, ResourceContext resourceContext, ODataWriter writer);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSerializer/<WriteComplexAndExpandedNavigationPropertyAsync>d__59")]
private Task WriteComplexAndExpandedNavigationPropertyAsync(IEdmProperty edmProperty, SelectItem selectItem, ResourceContext resourceContext, ODataWriter writer);
    [IteratorStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSerializer/<CreateNavigationLinks>d__60")]
private IEnumerable`1<ODataNestedResourceInfo> CreateNavigationLinks(IEnumerable`1<IEdmNavigationProperty> navigationProperties, ResourceContext resourceContext);
    private IEnumerable`1<ODataProperty> CreateStructuralPropertyBag(SelectExpandNode selectExpandNode, ResourceContext resourceContext);
    [IteratorStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSerializer/<CreateODataActions>d__62")]
private IEnumerable`1<ODataAction> CreateODataActions(IEnumerable`1<IEdmAction> actions, ResourceContext resourceContext);
    private void WriteDeltaResource(object graph, ODataWriter writer, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSerializer/<WriteDeltaResourceAsync>d__64")]
private Task WriteDeltaResourceAsync(object graph, ODataWriter writer, ODataSerializerContext writeContext);
    [IteratorStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSerializer/<CreateODataFunctions>d__65")]
private IEnumerable`1<ODataFunction> CreateODataFunctions(IEnumerable`1<IEdmFunction> functions, ResourceContext resourceContext);
    private static ODataOperation CreateODataOperation(IEdmOperation operation, OperationLinkBuilder builder, ResourceContext resourceContext);
    private static IEdmStructuredType GetODataPathType(ODataSerializerContext serializerContext);
    private IEdmStructuredTypeReference GetResourceType(object graph, ODataSerializerContext writeContext);
}
public class Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSetSerializer : ODataEdmTypeSerializer {
    private static string ResourceSet;
    public ODataResourceSetSerializer(ODataSerializerProvider serializerProvider);
    public virtual void WriteObject(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSetSerializer/<WriteObjectAsync>d__3")]
public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    public virtual void WriteObjectInline(object graph, IEdmTypeReference expectedType, ODataWriter writer, ODataSerializerContext writeContext);
    public virtual Task WriteObjectInlineAsync(object graph, IEdmTypeReference expectedType, ODataWriter writer, ODataSerializerContext writeContext);
    private void WriteResourceSet(IEnumerable enumerable, IEdmTypeReference resourceSetType, ODataWriter writer, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSetSerializer/<WriteResourceSetAsync>d__7")]
private Task WriteResourceSetAsync(IEnumerable enumerable, IEdmTypeReference resourceSetType, ODataWriter writer, ODataSerializerContext writeContext);
    public virtual ODataResourceSet CreateResourceSet(IEnumerable resourceSetInstance, IEdmCollectionTypeReference resourceSetType, ODataSerializerContext writeContext);
    internal static Func`2<object, Uri> GetNextLinkGenerator(ODataResourceSetBase resourceSet, IEnumerable resourceSetInstance, ODataSerializerContext writeContext);
    public virtual ODataOperation CreateODataOperation(IEdmOperation operation, ResourceSetContext resourceSetContext, ODataSerializerContext writeContext);
    private ODataResourceSet GetResourceSet(IEnumerable enumerable, IEdmTypeReference resourceSetType, IEdmStructuredTypeReference elementType, ODataSerializerContext writeContext);
    [IteratorStateMachineAttribute("Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSetSerializer/<CreateODataOperations>d__12")]
private IEnumerable`1<ODataOperation> CreateODataOperations(IEnumerable`1<IEdmOperation> operations, ResourceSetContext resourceSetContext, ODataSerializerContext writeContext);
    private static Uri GetNestedNextPageLink(ODataSerializerContext writeContext, int pageSize, object obj);
    private static Uri GenerateQueryFromExpandedItem(ODataSerializerContext writeContext, Uri navigationLink);
    private static IEdmStructuredTypeReference GetResourceType(IEdmTypeReference resourceSetType);
}
public class Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceValueSerializer : ODataEdmTypeSerializer {
    public ODataResourceValueSerializer(ODataSerializerProvider serializerProvider);
    protected ODataResourceValueSerializer(ODataPayloadKind payloadKind, ODataSerializerProvider serializerProvider);
    public virtual void WriteObject(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    public sealed virtual ODataValue CreateODataValue(object graph, IEdmTypeReference expectedType, ODataSerializerContext writeContext);
    private ODataResourceValue CreateODataResourceValue(object graph, IEdmStructuredTypeReference expectedType, ODataSerializerContext writeContext);
    private void SetDeltaPropertyValue(ODataSerializerContext writeContext, List`1<ODataProperty> properties, IDelta delta, string propertyName);
    private void SetPropertyValueInternal(PropertyInfo property, object graph, List`1<ODataProperty> properties, ODataSerializerContext writeContext);
    private void SetPropertyValue(ODataSerializerContext writeContext, List`1<ODataProperty> properties, IEdmStructuredTypeReference expectedType, string propertyName, object propertyValue);
    private ODataEdmTypeSerializer GetResourceValueEdmTypeSerializer(IEdmTypeReference edmTypeReference);
}
public abstract class Microsoft.AspNet.OData.Formatter.Serialization.ODataSerializer : object {
    [CompilerGeneratedAttribute]
private ODataPayloadKind <ODataPayloadKind>k__BackingField;
    public ODataPayloadKind ODataPayloadKind { get; private set; }
    protected ODataSerializer(ODataPayloadKind payloadKind);
    [CompilerGeneratedAttribute]
public ODataPayloadKind get_ODataPayloadKind();
    [CompilerGeneratedAttribute]
private void set_ODataPayloadKind(ODataPayloadKind value);
    public virtual void WriteObject(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
}
public class Microsoft.AspNet.OData.Formatter.Serialization.ODataSerializerContext : object {
    private HttpRequestMessage _request;
    private UrlHelper _urlHelper;
    [CompilerGeneratedAttribute]
private HttpRequestContext <RequestContext>k__BackingField;
    private ClrTypeCache _typeMappingCache;
    private IDictionary`2<object, object> _items;
    private ODataQueryContext _queryContext;
    private SelectExpandClause _selectExpandClause;
    private bool _isSelectExpandClauseSet;
    private Nullable`1<bool> _isUntyped;
    private Nullable`1<bool> _isDeltaOfT;
    [CompilerGeneratedAttribute]
private IWebApiRequestMessage <InternalRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebApiUrlHelper <InternalUrlHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmNavigationSource <NavigationSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootElementName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipExpensiveAvailabilityChecks>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataMetadataLevel <MetadataLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectItem <CurrentSelectItem>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataQueryOptions <QueryOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Queue`1<IEdmProperty> <PropertiesInPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceContext <ExpandedResource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExpandReference>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmProperty <EdmProperty>k__BackingField;
    public HttpRequestMessage Request { get; public set; }
    public HttpRequestContext RequestContext { get; public set; }
    public UrlHelper Url { get; public set; }
    internal IWebApiRequestMessage InternalRequest { get; private set; }
    internal IWebApiUrlHelper InternalUrlHelper { get; private set; }
    internal ODataQueryContext QueryContext { get; private set; }
    public IEdmNavigationSource NavigationSource { get; public set; }
    public IEdmModel Model { get; public set; }
    public ODataPath Path { get; public set; }
    internal Type Type { get; internal set; }
    internal bool IsUntyped { get; }
    internal bool IsDeltaOfT { get; }
    public string RootElementName { get; public set; }
    public bool SkipExpensiveAvailabilityChecks { get; public set; }
    public ODataMetadataLevel MetadataLevel { get; public set; }
    public SelectExpandClause SelectExpandClause { get; public set; }
    internal ExpandedReferenceSelectItem CurrentExpandedSelectItem { get; }
    internal SelectItem CurrentSelectItem { get; internal set; }
    public ODataQueryOptions QueryOptions { get; internal set; }
    internal Queue`1<IEdmProperty> PropertiesInPath { get; private set; }
    public ResourceContext ExpandedResource { get; public set; }
    public bool ExpandReference { get; public set; }
    public IEdmProperty EdmProperty { get; public set; }
    public IEdmNavigationProperty NavigationProperty { get; }
    public IDictionary`2<object, object> Items { get; private set; }
    public ODataSerializerContext(ResourceContext resource, SelectExpandClause selectExpandClause, IEdmProperty edmProperty);
    internal ODataSerializerContext(ResourceContext resource, IEdmProperty edmProperty, ODataQueryContext queryContext, SelectItem currentSelectItem);
    public HttpRequestMessage get_Request();
    public void set_Request(HttpRequestMessage value);
    [CompilerGeneratedAttribute]
public HttpRequestContext get_RequestContext();
    [CompilerGeneratedAttribute]
public void set_RequestContext(HttpRequestContext value);
    public UrlHelper get_Url();
    public void set_Url(UrlHelper value);
    private void CopyPlatformSpecificProperties(ODataSerializerContext context);
    [CompilerGeneratedAttribute]
internal IWebApiRequestMessage get_InternalRequest();
    [CompilerGeneratedAttribute]
private void set_InternalRequest(IWebApiRequestMessage value);
    [CompilerGeneratedAttribute]
internal IWebApiUrlHelper get_InternalUrlHelper();
    [CompilerGeneratedAttribute]
private void set_InternalUrlHelper(IWebApiUrlHelper value);
    internal ODataQueryContext get_QueryContext();
    private void set_QueryContext(ODataQueryContext value);
    [CompilerGeneratedAttribute]
public IEdmNavigationSource get_NavigationSource();
    [CompilerGeneratedAttribute]
public void set_NavigationSource(IEdmNavigationSource value);
    [CompilerGeneratedAttribute]
public IEdmModel get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(IEdmModel value);
    [CompilerGeneratedAttribute]
public ODataPath get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(ODataPath value);
    [CompilerGeneratedAttribute]
internal Type get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(Type value);
    internal bool get_IsUntyped();
    internal bool get_IsDeltaOfT();
    [CompilerGeneratedAttribute]
public string get_RootElementName();
    [CompilerGeneratedAttribute]
public void set_RootElementName(string value);
    [CompilerGeneratedAttribute]
public bool get_SkipExpensiveAvailabilityChecks();
    [CompilerGeneratedAttribute]
public void set_SkipExpensiveAvailabilityChecks(bool value);
    [CompilerGeneratedAttribute]
public ODataMetadataLevel get_MetadataLevel();
    [CompilerGeneratedAttribute]
public void set_MetadataLevel(ODataMetadataLevel value);
    public SelectExpandClause get_SelectExpandClause();
    public void set_SelectExpandClause(SelectExpandClause value);
    internal ExpandedReferenceSelectItem get_CurrentExpandedSelectItem();
    [CompilerGeneratedAttribute]
internal SelectItem get_CurrentSelectItem();
    [CompilerGeneratedAttribute]
internal void set_CurrentSelectItem(SelectItem value);
    [CompilerGeneratedAttribute]
public ODataQueryOptions get_QueryOptions();
    [CompilerGeneratedAttribute]
internal void set_QueryOptions(ODataQueryOptions value);
    [CompilerGeneratedAttribute]
internal Queue`1<IEdmProperty> get_PropertiesInPath();
    [CompilerGeneratedAttribute]
private void set_PropertiesInPath(Queue`1<IEdmProperty> value);
    [CompilerGeneratedAttribute]
public ResourceContext get_ExpandedResource();
    [CompilerGeneratedAttribute]
public void set_ExpandedResource(ResourceContext value);
    [CompilerGeneratedAttribute]
public bool get_ExpandReference();
    [CompilerGeneratedAttribute]
public void set_ExpandReference(bool value);
    [CompilerGeneratedAttribute]
public IEdmProperty get_EdmProperty();
    [CompilerGeneratedAttribute]
public void set_EdmProperty(IEdmProperty value);
    public IEdmNavigationProperty get_NavigationProperty();
    public IDictionary`2<object, object> get_Items();
    private void set_Items(IDictionary`2<object, object> value);
    internal IEdmTypeReference GetEdmType(object instance, Type type);
}
internal class Microsoft.AspNet.OData.Formatter.Serialization.ODataSerializerHelper : object {
    internal static void AppendInstanceAnnotations(ODataResourceBase resource, ResourceContext resourceContext, IODataInstanceAnnotationContainer instanceAnnotationContainer, ODataSerializerProvider serializerProvider);
    private static void AddODataAnnotations(ICollection`1<ODataInstanceAnnotation> instanceAnnotations, ResourceContext resourceContext, KeyValuePair`2<string, object> annotation, ODataSerializerProvider serializerProvider);
    private static ODataEdmTypeSerializer GetEdmTypeSerializer(IEdmTypeReference edmTypeReference, ODataSerializerProvider serializerProvider);
}
public abstract class Microsoft.AspNet.OData.Formatter.Serialization.ODataSerializerProvider : object {
    public abstract virtual ODataSerializer GetODataPayloadSerializer(Type type, HttpRequestMessage request);
    public abstract virtual ODataEdmTypeSerializer GetEdmTypeSerializer(IEdmTypeReference edmType);
}
public class Microsoft.AspNet.OData.Formatter.Serialization.ODataServiceDocumentSerializer : ODataSerializer {
    public virtual void WriteObject(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    private ODataServiceDocument GetServiceDocument(object graph, Type type);
}
public class Microsoft.AspNet.OData.Formatter.Serialization.SelectExpandNode : object {
    [CompilerGeneratedAttribute]
private ISet`1<IEdmStructuralProperty> <SelectedStructuralProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<IEdmNavigationProperty> <SelectedNavigationProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<IEdmStructuralProperty, PathSelectItem> <SelectedComplexTypeProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<IEdmNavigationProperty, ExpandedNavigationSelectItem> <ExpandedProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<IEdmNavigationProperty, ExpandedReferenceSelectItem> <ReferencedProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <SelectedDynamicProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SelectAllDynamicProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<IEdmAction> <SelectedActions>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<IEdmFunction> <SelectedFunctions>k__BackingField;
    [ObsoleteAttribute("This property will be removed later, please use ReferencedProperties.")]
public ISet`1<IEdmNavigationProperty> ReferencedNavigationProperties { get; }
    [ObsoleteAttribute("This property will be removed later, please use SelectedComplexTypeProperties.")]
public ISet`1<IEdmStructuralProperty> SelectedComplexProperties { get; }
    public ISet`1<IEdmStructuralProperty> SelectedStructuralProperties { get; internal set; }
    public ISet`1<IEdmNavigationProperty> SelectedNavigationProperties { get; internal set; }
    public IDictionary`2<IEdmStructuralProperty, PathSelectItem> SelectedComplexTypeProperties { get; internal set; }
    public IDictionary`2<IEdmNavigationProperty, ExpandedNavigationSelectItem> ExpandedProperties { get; internal set; }
    public IDictionary`2<IEdmNavigationProperty, ExpandedReferenceSelectItem> ReferencedProperties { get; internal set; }
    public ISet`1<string> SelectedDynamicProperties { get; internal set; }
    public bool SelectAllDynamicProperties { get; internal set; }
    public ISet`1<IEdmAction> SelectedActions { get; internal set; }
    public ISet`1<IEdmFunction> SelectedFunctions { get; internal set; }
    public SelectExpandNode(SelectExpandNode selectExpandNodeToCopy);
    public SelectExpandNode(IEdmStructuredType structuredType, ODataSerializerContext writeContext);
    public SelectExpandNode(SelectExpandClause selectExpandClause, IEdmStructuredType structuredType, IEdmModel model);
    public ISet`1<IEdmNavigationProperty> get_ReferencedNavigationProperties();
    public ISet`1<IEdmStructuralProperty> get_SelectedComplexProperties();
    [CompilerGeneratedAttribute]
public ISet`1<IEdmStructuralProperty> get_SelectedStructuralProperties();
    [CompilerGeneratedAttribute]
internal void set_SelectedStructuralProperties(ISet`1<IEdmStructuralProperty> value);
    [CompilerGeneratedAttribute]
public ISet`1<IEdmNavigationProperty> get_SelectedNavigationProperties();
    [CompilerGeneratedAttribute]
internal void set_SelectedNavigationProperties(ISet`1<IEdmNavigationProperty> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<IEdmStructuralProperty, PathSelectItem> get_SelectedComplexTypeProperties();
    [CompilerGeneratedAttribute]
internal void set_SelectedComplexTypeProperties(IDictionary`2<IEdmStructuralProperty, PathSelectItem> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<IEdmNavigationProperty, ExpandedNavigationSelectItem> get_ExpandedProperties();
    [CompilerGeneratedAttribute]
internal void set_ExpandedProperties(IDictionary`2<IEdmNavigationProperty, ExpandedNavigationSelectItem> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<IEdmNavigationProperty, ExpandedReferenceSelectItem> get_ReferencedProperties();
    [CompilerGeneratedAttribute]
internal void set_ReferencedProperties(IDictionary`2<IEdmNavigationProperty, ExpandedReferenceSelectItem> value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_SelectedDynamicProperties();
    [CompilerGeneratedAttribute]
internal void set_SelectedDynamicProperties(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_SelectAllDynamicProperties();
    [CompilerGeneratedAttribute]
internal void set_SelectAllDynamicProperties(bool value);
    [CompilerGeneratedAttribute]
public ISet`1<IEdmAction> get_SelectedActions();
    [CompilerGeneratedAttribute]
internal void set_SelectedActions(ISet`1<IEdmAction> value);
    [CompilerGeneratedAttribute]
public ISet`1<IEdmFunction> get_SelectedFunctions();
    [CompilerGeneratedAttribute]
internal void set_SelectedFunctions(ISet`1<IEdmFunction> value);
    private void Initialize(SelectExpandClause selectExpandClause, IEdmStructuredType structuredType, IEdmModel model, bool expandedReference);
    private void BuildSelectExpand(SelectExpandClause selectExpandClause, EdmStructuralTypeInfo structuralTypeInfo);
    private void BuildExpandItem(ExpandedReferenceSelectItem expandReferenceItem, IDictionary`2<IEdmStructuralProperty, SelectExpandIncludedProperty> currentLevelPropertiesInclude, EdmStructuralTypeInfo structuralTypeInfo);
    private void BuildSelectItem(PathSelectItem pathSelectItem, IDictionary`2<IEdmStructuralProperty, SelectExpandIncludedProperty> currentLevelPropertiesInclude, EdmStructuralTypeInfo structuralTypeInfo);
    private static void MergeAllStructuralProperties(ISet`1<IEdmStructuralProperty> allStructuralProperties, IDictionary`2<IEdmStructuralProperty, SelectExpandIncludedProperty> currentLevelPropertiesInclude);
    private void MergeSelectedNavigationProperties(ISet`1<IEdmNavigationProperty> allNavigationProperties);
    private void MergeSelectedAction(ISet`1<IEdmAction> allActions);
    private void MergeSelectedFunction(ISet`1<IEdmFunction> allFunctions);
    private void AddStructuralProperty(IEdmStructuralProperty structuralProperty, PathSelectItem pathSelectItem);
    private void AddNamespaceWildcardOperation(NamespaceQualifiedWildcardSelectItem namespaceSelectItem, ISet`1<IEdmAction> allActions, ISet`1<IEdmFunction> allFunctions);
    private void AddOperations(OperationSegment operationSegment, ISet`1<IEdmAction> allActions, ISet`1<IEdmFunction> allFunctions);
    private void AdjustSelectNavigationProperties();
    internal static bool IsComplexOrCollectionComplex(IEdmStructuralProperty structuralProperty);
    [ObsoleteAttribute("This public method is not used anymore. It will be removed later.")]
public static void GetStructuralProperties(IEdmStructuredType structuredType, HashSet`1<IEdmStructuralProperty> structuralProperties, HashSet`1<IEdmStructuralProperty> nestedStructuralProperties);
}
internal class Microsoft.AspNet.OData.Formatter.Serialization.TypedEdmComplexObject : TypedEdmStructuredObject {
    public TypedEdmComplexObject(object instance, IEdmComplexTypeReference edmType, IEdmModel edmModel);
}
internal class Microsoft.AspNet.OData.Formatter.Serialization.TypedEdmEntityObject : TypedEdmStructuredObject {
    public TypedEdmEntityObject(object instance, IEdmEntityTypeReference edmType, IEdmModel edmModel);
}
internal abstract class Microsoft.AspNet.OData.Formatter.Serialization.TypedEdmStructuredObject : object {
    private static ConcurrentDictionary`2<Tuple`2<string, Type>, Func`2<object, object>> _propertyGetterCache;
    private IEdmStructuredTypeReference _edmType;
    private Type _type;
    [CompilerGeneratedAttribute]
private object <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmModel <Model>k__BackingField;
    public object Instance { get; private set; }
    public IEdmModel Model { get; private set; }
    protected TypedEdmStructuredObject(object instance, IEdmStructuredTypeReference edmType, IEdmModel edmModel);
    private static TypedEdmStructuredObject();
    [CompilerGeneratedAttribute]
public object get_Instance();
    [CompilerGeneratedAttribute]
private void set_Instance(object value);
    [CompilerGeneratedAttribute]
public IEdmModel get_Model();
    [CompilerGeneratedAttribute]
private void set_Model(IEdmModel value);
    public sealed virtual IEdmTypeReference GetEdmType();
    public sealed virtual bool TryGetPropertyValue(string propertyName, Object& value);
    internal static Func`2<object, object> GetOrCreatePropertyGetter(Type type, string propertyName, IEdmStructuredTypeReference edmType, IEdmModel model);
    private static Func`2<object, object> CreatePropertyGetter(Type type, string propertyName);
}
[AttributeUsageAttribute("2052")]
public class Microsoft.AspNet.OData.FromODataUriAttribute : ModelBinderAttribute {
    private static ModelBinderProvider _provider;
    private static FromODataUriAttribute();
    public virtual HttpParameterBinding GetBinding(HttpParameterDescriptor parameter);
}
internal class Microsoft.AspNet.OData.FunctionImportComparer : object {
    public sealed virtual bool Equals(IEdmFunctionImport left, IEdmFunctionImport right);
    public sealed virtual int GetHashCode(IEdmFunctionImport functionImport);
}
internal static class Microsoft.AspNet.OData.GetNextPageHelper : object {
    internal static Uri GetNextPageLink(Uri requestUri, int pageSize, object instance, Func`2<object, string> objectToSkipTokenValue);
    internal static Uri GetNextPageLink(Uri requestUri, IEnumerable`1<KeyValuePair`2<string, string>> queryParameters, int pageSize, object instance, Func`2<object, string> objectToSkipTokenValue, CompatibilityOptions options);
}
public class Microsoft.AspNet.OData.HttpRequestScope : object {
    [CompilerGeneratedAttribute]
private HttpRequestMessage <HttpRequest>k__BackingField;
    public HttpRequestMessage HttpRequest { get; public set; }
    [CompilerGeneratedAttribute]
public HttpRequestMessage get_HttpRequest();
    [CompilerGeneratedAttribute]
public void set_HttpRequest(HttpRequestMessage value);
}
public interface Microsoft.AspNet.OData.IDelta {
    public abstract virtual IEnumerable`1<string> GetChangedPropertyNames();
    public abstract virtual IEnumerable`1<string> GetUnchangedPropertyNames();
    public abstract virtual bool TrySetPropertyValue(string name, object value);
    public abstract virtual bool TryGetPropertyValue(string name, Object& value);
    public abstract virtual bool TryGetPropertyType(string name, Type& type);
    public abstract virtual void Clear();
}
public interface Microsoft.AspNet.OData.IDeltaDeletedEntityObject {
    public Uri Id { get; public set; }
    public Nullable`1<DeltaDeletedEntryReason> Reason { get; public set; }
    public string NavigationSource { get; public set; }
    public abstract virtual Uri get_Id();
    public abstract virtual void set_Id(Uri value);
    public abstract virtual Nullable`1<DeltaDeletedEntryReason> get_Reason();
    public abstract virtual void set_Reason(Nullable`1<DeltaDeletedEntryReason> value);
    public abstract virtual string get_NavigationSource();
    public abstract virtual void set_NavigationSource(string value);
}
public interface Microsoft.AspNet.OData.IDeltaSet {
}
public interface Microsoft.AspNet.OData.IDeltaSetItem {
    public EdmDeltaEntityKind DeltaKind { get; }
    public IODataInstanceAnnotationContainer TransientInstanceAnnotationContainer { get; public set; }
    public ODataIdContainer ODataIdContainer { get; public set; }
    public ODataPath ODataPath { get; public set; }
    public abstract virtual EdmDeltaEntityKind get_DeltaKind();
    public abstract virtual IODataInstanceAnnotationContainer get_TransientInstanceAnnotationContainer();
    public abstract virtual void set_TransientInstanceAnnotationContainer(IODataInstanceAnnotationContainer value);
    public abstract virtual ODataIdContainer get_ODataIdContainer();
    public abstract virtual void set_ODataIdContainer(ODataIdContainer value);
    public abstract virtual ODataPath get_ODataPath();
    public abstract virtual void set_ODataPath(ODataPath value);
}
public interface Microsoft.AspNet.OData.IEdmChangedObject {
    public EdmDeltaEntityKind DeltaKind { get; }
    public abstract virtual EdmDeltaEntityKind get_DeltaKind();
}
public interface Microsoft.AspNet.OData.IEdmComplexObject {
}
public interface Microsoft.AspNet.OData.IEdmDeltaDeletedEntityObject {
    public string Id { get; public set; }
    public DeltaDeletedEntryReason Reason { get; public set; }
    public abstract virtual string get_Id();
    public abstract virtual void set_Id(string value);
    public abstract virtual DeltaDeletedEntryReason get_Reason();
    public abstract virtual void set_Reason(DeltaDeletedEntryReason value);
}
public interface Microsoft.AspNet.OData.IEdmDeltaDeletedLink {
}
public interface Microsoft.AspNet.OData.IEdmDeltaLink {
}
public interface Microsoft.AspNet.OData.IEdmDeltaLinkBase {
    public Uri Source { get; public set; }
    public Uri Target { get; public set; }
    public string Relationship { get; public set; }
    public abstract virtual Uri get_Source();
    public abstract virtual void set_Source(Uri value);
    public abstract virtual Uri get_Target();
    public abstract virtual void set_Target(Uri value);
    public abstract virtual string get_Relationship();
    public abstract virtual void set_Relationship(string value);
}
public interface Microsoft.AspNet.OData.IEdmEntityObject {
}
public interface Microsoft.AspNet.OData.IEdmEnumObject {
}
public interface Microsoft.AspNet.OData.IEdmObject {
    public abstract virtual IEdmTypeReference GetEdmType();
}
public interface Microsoft.AspNet.OData.IEdmStructuredObject {
    public abstract virtual bool TryGetPropertyValue(string propertyName, Object& value);
}
internal interface Microsoft.AspNet.OData.Interfaces.IWebApiActionDescriptor {
    public string ControllerName { get; }
    public string ActionName { get; }
    public abstract virtual string get_ControllerName();
    public abstract virtual string get_ActionName();
    public abstract virtual IEnumerable`1<T> GetCustomAttributes(bool inherit);
    public abstract virtual MethodInfo GetMethodInfo();
    public abstract virtual bool IsHttpMethodSupported(ODataRequestMethod method);
}
internal interface Microsoft.AspNet.OData.Interfaces.IWebApiActionMap {
    public abstract virtual bool Contains(string name);
    public abstract virtual IWebApiActionDescriptor GetActionDescriptor(string actionName);
}
internal interface Microsoft.AspNet.OData.Interfaces.IWebApiAssembliesResolver {
    public IEnumerable`1<Assembly> Assemblies { get; }
    public abstract virtual IEnumerable`1<Assembly> get_Assemblies();
}
internal interface Microsoft.AspNet.OData.Interfaces.IWebApiContext {
    public ApplyClause ApplyClause { get; public set; }
    public Uri NextLink { get; public set; }
    public Uri DeltaLink { get; public set; }
    public int PageSize { get; public set; }
    public ODataPath Path { get; }
    public string RouteName { get; }
    public IDictionary`2<string, object> RoutingConventionsStore { get; }
    public SelectExpandClause ProcessedSelectExpandClause { get; public set; }
    public ODataQueryOptions QueryOptions { get; public set; }
    public Nullable`1<long> TotalCount { get; }
    public Func`1<long> TotalCountFunc { get; public set; }
    public abstract virtual ApplyClause get_ApplyClause();
    public abstract virtual void set_ApplyClause(ApplyClause value);
    public abstract virtual Uri get_NextLink();
    public abstract virtual void set_NextLink(Uri value);
    public abstract virtual Uri get_DeltaLink();
    public abstract virtual void set_DeltaLink(Uri value);
    public abstract virtual int get_PageSize();
    public abstract virtual void set_PageSize(int value);
    public abstract virtual ODataPath get_Path();
    public abstract virtual string get_RouteName();
    public abstract virtual IDictionary`2<string, object> get_RoutingConventionsStore();
    public abstract virtual SelectExpandClause get_ProcessedSelectExpandClause();
    public abstract virtual void set_ProcessedSelectExpandClause(SelectExpandClause value);
    public abstract virtual ODataQueryOptions get_QueryOptions();
    public abstract virtual void set_QueryOptions(ODataQueryOptions value);
    public abstract virtual Nullable`1<long> get_TotalCount();
    public abstract virtual Func`1<long> get_TotalCountFunc();
    public abstract virtual void set_TotalCountFunc(Func`1<long> value);
}
internal interface Microsoft.AspNet.OData.Interfaces.IWebApiControllerContext {
    public SelectControllerResult ControllerResult { get; }
    public IWebApiRequestMessage Request { get; }
    public IDictionary`2<string, object> RouteData { get; }
    public abstract virtual SelectControllerResult get_ControllerResult();
    public abstract virtual IWebApiRequestMessage get_Request();
    public abstract virtual IDictionary`2<string, object> get_RouteData();
}
internal interface Microsoft.AspNet.OData.Interfaces.IWebApiHeaders {
    public abstract virtual bool TryGetValues(string key, IEnumerable`1& values);
}
internal interface Microsoft.AspNet.OData.Interfaces.IWebApiOptions {
    public ODataUrlKeyDelimiter UrlKeyDelimiter { get; }
    public bool NullDynamicPropertyIsEnabled { get; }
    public abstract virtual ODataUrlKeyDelimiter get_UrlKeyDelimiter();
    public abstract virtual bool get_NullDynamicPropertyIsEnabled();
}
internal interface Microsoft.AspNet.OData.Interfaces.IWebApiRequestMessage {
    public IWebApiContext Context { get; }
    public ODataRequestMethod Method { get; }
    public IWebApiOptions Options { get; }
    public IWebApiHeaders Headers { get; }
    public IServiceProvider RequestContainer { get; }
    public Uri RequestUri { get; }
    public ODataDeserializerProvider DeserializerProvider { get; }
    public IDictionary`2<string, string> ODataContentIdMapping { get; }
    public IODataPathHandler PathHandler { get; }
    public IDictionary`2<string, string> QueryParameters { get; }
    public ODataMessageReaderSettings ReaderSettings { get; }
    public ODataMessageWriterSettings WriterSettings { get; }
    public abstract virtual IWebApiContext get_Context();
    public abstract virtual bool IsCountRequest();
    public abstract virtual ODataRequestMethod get_Method();
    public abstract virtual IWebApiOptions get_Options();
    public abstract virtual IWebApiHeaders get_Headers();
    public abstract virtual IServiceProvider get_RequestContainer();
    public abstract virtual Uri get_RequestUri();
    public abstract virtual ODataDeserializerProvider get_DeserializerProvider();
    public abstract virtual string CreateETag(IDictionary`2<string, object> properties);
    public abstract virtual ETag GetETag(EntityTagHeaderValue etagHeaderValue);
    public abstract virtual ETag GetETag(EntityTagHeaderValue etagHeaderValue);
    public abstract virtual Uri GetNextPageLink(int pageSize, object instance, Func`2<object, string> objToSkipTokenValue);
    public abstract virtual IDictionary`2<string, string> get_ODataContentIdMapping();
    public abstract virtual IODataPathHandler get_PathHandler();
    public abstract virtual IDictionary`2<string, string> get_QueryParameters();
    public abstract virtual ODataMessageReaderSettings get_ReaderSettings();
    public abstract virtual ODataMessageWriterSettings get_WriterSettings();
}
internal interface Microsoft.AspNet.OData.Interfaces.IWebApiUrlHelper {
    public abstract virtual string CreateODataLink(IList`1<ODataPathSegment> segments);
    public abstract virtual string CreateODataLink(ODataPathSegment[] segments);
    public abstract virtual string CreateODataLink(string routeName, IODataPathHandler pathHandler, IList`1<ODataPathSegment> segments);
}
public interface Microsoft.AspNet.OData.IODataAPIHandler {
}
public interface Microsoft.AspNet.OData.IPerRouteContainer {
    public Func`1<IContainerBuilder> BuilderFactory { get; public set; }
    public abstract virtual void AddRoute(string routeName, string routePrefix);
    public abstract virtual string GetRoutePrefix(string routeName);
    public abstract virtual Func`1<IContainerBuilder> get_BuilderFactory();
    public abstract virtual void set_BuilderFactory(Func`1<IContainerBuilder> value);
    public abstract virtual IServiceProvider CreateODataRootContainer(string routeName, Action`1<IContainerBuilder> configureAction);
    public abstract virtual bool HasODataRootContainer(string routeName);
    public abstract virtual IServiceProvider GetODataRootContainer(string routeName);
}
public class Microsoft.AspNet.OData.MetadataController : ODataController {
    private static Version _defaultEdmxVersion;
    private static MetadataController();
    public IEdmModel GetMetadata();
    public ODataServiceDocument GetServiceDocument();
    private static ODataEntitySetInfo GetODataEntitySetInfo(string url, string name);
    private static ODataSingletonInfo GetODataSingletonInfo(string url, string name);
    private static ODataFunctionImportInfo GetODataFunctionImportInfo(string name);
    private IEdmModel GetModel();
}
[AttributeUsageAttribute("4")]
internal class Microsoft.AspNet.OData.NonValidatingParameterBindingAttribute : ParameterBindingAttribute {
    public virtual HttpParameterBinding GetBinding(HttpParameterDescriptor parameter);
}
public class Microsoft.AspNet.OData.NullEdmComplexObject : object {
    private IEdmComplexTypeReference _edmType;
    public NullEdmComplexObject(IEdmComplexTypeReference edmType);
    public sealed virtual bool TryGetPropertyValue(string propertyName, Object& value);
    public sealed virtual IEdmTypeReference GetEdmType();
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNet.OData.ODataActionParameters : Dictionary`2<string, object> {
}
public abstract class Microsoft.AspNet.OData.ODataAPIHandler`1 : object {
    public abstract virtual ODataAPIResponseStatus TryCreate(IDictionary`2<string, object> keyValues, TStructuralType& createdObject, String& errorMessage);
    public abstract virtual Task`1<ODataAPIResponseStatus> TryCreateAsync(IDictionary`2<string, object> keyValues, TStructuralType& createdObject, String& errorMessage);
    public abstract virtual ODataAPIResponseStatus TryGet(IDictionary`2<string, object> keyValues, TStructuralType& originalObject, String& errorMessage);
    public abstract virtual Task`1<ODataAPIResponseStatus> TryGetAsync(IDictionary`2<string, object> keyValues, TStructuralType& originalObject, String& errorMessage);
    public abstract virtual ODataAPIResponseStatus TryDelete(IDictionary`2<string, object> keyValues, String& errorMessage);
    public abstract virtual Task`1<ODataAPIResponseStatus> TryDeleteAsync(IDictionary`2<string, object> keyValues, String& errorMessage);
    public abstract virtual ODataAPIResponseStatus TryAddRelatedObject(TStructuralType resource, String& errorMessage);
    public abstract virtual Task`1<ODataAPIResponseStatus> TryAddRelatedObjectAsync(TStructuralType resource, String& errorMessage);
    public abstract virtual IODataAPIHandler GetNestedHandler(TStructuralType parent, string navigationPropertyName);
    public abstract virtual IODataAPIHandler GetNestedHandlerAsync(TStructuralType parent, string navigationPropertyName);
    public virtual void DeepInsert(TStructuralType resource, IEdmModel model, ODataAPIHandlerFactory apiHandlerFactory);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.ODataAPIHandler`1/<DeepInsertAsync>d__11")]
public virtual Task DeepInsertAsync(TStructuralType resource, IEdmModel model, ODataAPIHandlerFactory apiHandlerFactory);
    internal static void CopyObjectProperties(object resource, IEdmModel model, IODataAPIHandler apiHandler, ODataAPIHandlerFactory apiHandlerFactory);
    internal static void CopyNestedProperties(object resource, Type type, IEdmModel model, IODataAPIHandler apiHandler, ODataAPIHandlerFactory apiHandlerFactory, List`1<string> navPropNames);
    internal static void ApplyHandlers(IODataAPIHandler odataApiHandler, IODataAPIHandler odataIdContainerHandler, object resource, IDictionary`2<string, object> keys, List`1<string> navigationProperties, Boolean& failedOperation);
    private static void HandleFailedOperation(object originalObject, DataModificationOperationKind operation, string errorMessage);
    private static object GetObjectWithoutNavigationPropertyValues(object originalObj, Type type, List`1<string> navPropNames);
    private static void CopyProperties(object originalObject, object newObject, List`1<string> navPropNames);
    private static IDictionary`2<string, object> GetKeys(IEdmModel model, IEnumerable`1<IEdmStructuralProperty> properties, object resource, Type type);
    private static ODataPath GetODataPath(string path, IEdmModel model);
}
public abstract class Microsoft.AspNet.OData.ODataAPIHandlerFactory : object {
    [CompilerGeneratedAttribute]
private IEdmModel <Model>k__BackingField;
    public IEdmModel Model { get; }
    protected ODataAPIHandlerFactory(IEdmModel model);
    [CompilerGeneratedAttribute]
public IEdmModel get_Model();
    public abstract virtual IODataAPIHandler GetHandler(ODataPath odataPath);
    public abstract virtual Task`1<IODataAPIHandler> GetHandlerAsync(ODataPath odataPath);
    internal IODataAPIHandler GetHandler(string path);
}
public enum Microsoft.AspNet.OData.ODataAPIResponseStatus : Enum {
    public int value__;
    public static ODataAPIResponseStatus Success;
    public static ODataAPIResponseStatus Failure;
    public static ODataAPIResponseStatus NotFound;
}
[ODataFormattingAttribute]
[ODataRoutingAttribute]
[ApiExplorerSettingsAttribute]
public abstract class Microsoft.AspNet.OData.ODataController : ApiController {
    protected virtual void Dispose(bool disposing);
    protected virtual CreatedODataResult`1<TEntity> Created(TEntity entity);
    protected virtual UpdatedODataResult`1<TEntity> Updated(TEntity entity);
}
[AttributeUsageAttribute("4")]
public class Microsoft.AspNet.OData.ODataFormattingAttribute : Attribute {
    public sealed virtual void Initialize(HttpControllerSettings controllerSettings, HttpControllerDescriptor controllerDescriptor);
    public virtual IList`1<ODataMediaTypeFormatter> CreateODataFormatters();
    private static void RemoveFormatters(MediaTypeFormatterCollection formatterCollection, IEnumerable`1<MediaTypeFormatter> formattersToRemove);
}
public class Microsoft.AspNet.OData.ODataIdContainer : object {
    [CompilerGeneratedAttribute]
private string <ODataId>k__BackingField;
    public string ODataId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ODataId();
    [CompilerGeneratedAttribute]
public void set_ODataId(string value);
}
internal static class Microsoft.AspNet.OData.ODataMessageWrapperHelper : object {
    internal static ODataMessageWrapper Create(Stream stream, HttpContentHeaders headers);
    internal static ODataMessageWrapper Create(Stream stream, HttpContentHeaders headers, IServiceProvider container);
    internal static ODataMessageWrapper Create(Stream stream, HttpContentHeaders headers, IDictionary`2<string, string> contentIdMapping, IServiceProvider container);
    internal static ODataMessageWrapper Create(Stream stream, HttpContentHeaders headers, IDictionary`2<string, string> contentIdMapping);
}
public class Microsoft.AspNet.OData.ODataNullValueMessageHandler : DelegatingHandler {
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.ODataNullValueMessageHandler/<SendAsync>d__0")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    internal Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request);
    internal static Nullable`1<HttpStatusCode> GetUpdatedResponseStatusCodeOrNull(ODataPath oDataPath);
    private static Nullable`1<HttpStatusCode> GetChangedStatusCodeForNavigationProperty(NavigationPropertySegment navigation);
    private static Nullable`1<HttpStatusCode> GetChangedStatusCodeForProperty(PropertySegment propertySegment);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class Microsoft.AspNet.OData.ODataQueryContext : object {
    private DefaultQuerySettings _defaultQuerySettings;
    [CompilerGeneratedAttribute]
private IEdmModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmType <ElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmNavigationSource <NavigationSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ElementClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <RequestContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmProperty <TargetProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmStructuredType <TargetStructuredType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetName>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataValidationSettings <ValidationSettings>k__BackingField;
    public DefaultQuerySettings DefaultQuerySettings { get; }
    public IEdmModel Model { get; private set; }
    public IEdmType ElementType { get; private set; }
    public IEdmNavigationSource NavigationSource { get; private set; }
    public Type ElementClrType { get; internal set; }
    public ODataPath Path { get; private set; }
    public IServiceProvider RequestContainer { get; internal set; }
    internal IEdmProperty TargetProperty { get; private set; }
    internal IEdmStructuredType TargetStructuredType { get; private set; }
    internal string TargetName { get; private set; }
    internal ODataValidationSettings ValidationSettings { get; internal set; }
    public ODataQueryContext(IEdmModel model, Type elementClrType, ODataPath path);
    public ODataQueryContext(IEdmModel model, IEdmType elementType, ODataPath path);
    internal ODataQueryContext(IEdmModel model, Type elementClrType);
    internal ODataQueryContext(IEdmModel model, IEdmType elementType);
    public DefaultQuerySettings get_DefaultQuerySettings();
    [CompilerGeneratedAttribute]
public IEdmModel get_Model();
    [CompilerGeneratedAttribute]
private void set_Model(IEdmModel value);
    [CompilerGeneratedAttribute]
public IEdmType get_ElementType();
    [CompilerGeneratedAttribute]
private void set_ElementType(IEdmType value);
    [CompilerGeneratedAttribute]
public IEdmNavigationSource get_NavigationSource();
    [CompilerGeneratedAttribute]
private void set_NavigationSource(IEdmNavigationSource value);
    [CompilerGeneratedAttribute]
public Type get_ElementClrType();
    [CompilerGeneratedAttribute]
internal void set_ElementClrType(Type value);
    [CompilerGeneratedAttribute]
public ODataPath get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(ODataPath value);
    [CompilerGeneratedAttribute]
public IServiceProvider get_RequestContainer();
    [CompilerGeneratedAttribute]
internal void set_RequestContainer(IServiceProvider value);
    [CompilerGeneratedAttribute]
internal IEdmProperty get_TargetProperty();
    [CompilerGeneratedAttribute]
private void set_TargetProperty(IEdmProperty value);
    [CompilerGeneratedAttribute]
internal IEdmStructuredType get_TargetStructuredType();
    [CompilerGeneratedAttribute]
private void set_TargetStructuredType(IEdmStructuredType value);
    [CompilerGeneratedAttribute]
internal string get_TargetName();
    [CompilerGeneratedAttribute]
private void set_TargetName(string value);
    [CompilerGeneratedAttribute]
internal ODataValidationSettings get_ValidationSettings();
    [CompilerGeneratedAttribute]
internal void set_ValidationSettings(ODataValidationSettings value);
    private static IEdmNavigationSource GetNavigationSource(IEdmModel model, IEdmType elementType, ODataPath odataPath);
    private void GetPathContext();
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.OData.ODataQueryContextExtensions : object {
    [ExtensionAttribute]
public static ODataQuerySettings UpdateQuerySettings(ODataQueryContext context, ODataQuerySettings querySettings, IQueryable query);
    [ExtensionAttribute]
public static SkipTokenHandler GetSkipTokenHandler(ODataQueryContext context);
    [ExtensionAttribute]
public static SkipTokenQueryValidator GetSkipTokenQueryValidator(ODataQueryContext context);
}
[AttributeUsageAttribute("2052")]
public class Microsoft.AspNet.OData.ODataQueryParameterBindingAttribute : ParameterBindingAttribute {
    public virtual HttpParameterBinding GetBinding(HttpParameterDescriptor parameter);
    internal static Type GetEntityClrTypeFromParameterType(Type parameterType);
}
internal enum Microsoft.AspNet.OData.ODataRequestMethod : Enum {
    public int value__;
    public static ODataRequestMethod Unknown;
    public static ODataRequestMethod Get;
    public static ODataRequestMethod Delete;
    public static ODataRequestMethod Merge;
    public static ODataRequestMethod Patch;
    public static ODataRequestMethod Post;
    public static ODataRequestMethod Put;
    public static ODataRequestMethod Head;
    public static ODataRequestMethod Options;
}
[AttributeUsageAttribute("4")]
public class Microsoft.AspNet.OData.ODataRoutingAttribute : Attribute {
    public sealed virtual void Initialize(HttpControllerSettings controllerSettings, HttpControllerDescriptor controllerDescriptor);
}
public class Microsoft.AspNet.OData.ODataSwaggerConverter : object {
    private static Uri DefaultMetadataUri;
    private static string DefaultHost;
    private static string DefaultbasePath;
    [CompilerGeneratedAttribute]
private Uri <MetadataUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmModel <EdmModel>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <SwaggerDocument>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <SwaggerPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <SwaggerTypeDefinitions>k__BackingField;
    public Uri MetadataUri { get; public set; }
    public string Host { get; public set; }
    public string BasePath { get; public set; }
    public IEdmModel EdmModel { get; private set; }
    public Version SwaggerVersion { get; }
    protected JObject SwaggerDocument { get; protected set; }
    protected JObject SwaggerPaths { get; protected set; }
    protected JObject SwaggerTypeDefinitions { get; protected set; }
    public ODataSwaggerConverter(IEdmModel model);
    private static ODataSwaggerConverter();
    [CompilerGeneratedAttribute]
public Uri get_MetadataUri();
    [CompilerGeneratedAttribute]
public void set_MetadataUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    [CompilerGeneratedAttribute]
public string get_BasePath();
    [CompilerGeneratedAttribute]
public void set_BasePath(string value);
    [CompilerGeneratedAttribute]
public IEdmModel get_EdmModel();
    [CompilerGeneratedAttribute]
private void set_EdmModel(IEdmModel value);
    public virtual Version get_SwaggerVersion();
    [CompilerGeneratedAttribute]
protected virtual JObject get_SwaggerDocument();
    [CompilerGeneratedAttribute]
protected virtual void set_SwaggerDocument(JObject value);
    [CompilerGeneratedAttribute]
protected virtual JObject get_SwaggerPaths();
    [CompilerGeneratedAttribute]
protected virtual void set_SwaggerPaths(JObject value);
    [CompilerGeneratedAttribute]
protected virtual JObject get_SwaggerTypeDefinitions();
    [CompilerGeneratedAttribute]
protected virtual void set_SwaggerTypeDefinitions(JObject value);
    public virtual JObject GetSwaggerModel();
    protected virtual void InitializeStart();
    protected virtual void InitializeDocument();
    protected virtual void InitializeContainer();
    protected virtual void InitializeTypeDefinitions();
    protected virtual void InitializeOperations();
    protected virtual void InitializeEnd();
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.OData.ODataSwaggerUtilities : object {
    public static JObject CreateSwaggerPathForEntitySet(IEdmNavigationSource navigationSource);
    public static JObject CreateSwaggerPathForEntity(IEdmNavigationSource navigationSource);
    public static JObject CreateSwaggerPathForOperationImport(IEdmOperationImport operationImport);
    public static JObject CreateSwaggerPathForOperationOfEntitySet(IEdmOperation operation, IEdmNavigationSource navigationSource);
    public static JObject CreateSwaggerPathForOperationOfEntity(IEdmOperation operation, IEdmNavigationSource navigationSource);
    public static string GetPathForEntity(IEdmNavigationSource navigationSource);
    public static string GetPathForOperationImport(IEdmOperationImport operationImport);
    public static string GetPathForOperationOfEntitySet(IEdmOperation operation, IEdmNavigationSource navigationSource);
    public static string GetPathForOperationOfEntity(IEdmOperation operation, IEdmNavigationSource navigationSource);
    public static JObject CreateSwaggerTypeDefinitionForStructuredType(IEdmStructuredType edmType);
    private static void SetSwaggerType(JObject obj, IEdmType edmType);
    private static string GetPrimitiveTypeAndFormat(IEdmPrimitiveType primitiveType, String& format);
    [ExtensionAttribute]
private static JObject Responses(JObject obj, JObject responses);
    [ExtensionAttribute]
private static JObject ResponseRef(JObject responses, string name, string description, string refType);
    [ExtensionAttribute]
private static JObject Response(JObject responses, string name, string description, IEdmType type);
    [ExtensionAttribute]
private static JObject DefaultErrorResponse(JObject responses);
    [ExtensionAttribute]
private static JObject Response(JObject responses, string name, string description);
    [ExtensionAttribute]
private static JObject Parameters(JObject obj, JArray parameters);
    [ExtensionAttribute]
private static JArray Parameter(JArray parameters, string name, string kind, string description, string type, string format);
    [ExtensionAttribute]
private static JArray Parameter(JArray parameters, string name, string kind, string description, IEdmType type);
    [ExtensionAttribute]
private static JObject Tags(JObject obj, String[] tags);
    [ExtensionAttribute]
private static JObject Summary(JObject obj, string summary);
    [ExtensionAttribute]
private static JObject Description(JObject obj, string description);
    [ExtensionAttribute]
private static JObject OperationId(JObject obj, string operationId);
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNet.OData.ODataUntypedActionParameters : Dictionary`2<string, object> {
    [CompilerGeneratedAttribute]
private IEdmAction <Action>k__BackingField;
    public IEdmAction Action { get; private set; }
    public ODataUntypedActionParameters(IEdmAction action);
    [CompilerGeneratedAttribute]
public IEdmAction get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(IEdmAction value);
}
public static class Microsoft.AspNet.OData.ODataUriFunctions : object {
    public static void AddCustomUriFunction(string functionName, FunctionSignatureWithReturnType functionSignature, MethodInfo methodInfo);
    public static bool RemoveCustomUriFunction(string functionName, FunctionSignatureWithReturnType functionSignature, MethodInfo methodInfo);
}
[DataContractAttribute]
public abstract class Microsoft.AspNet.OData.PageResult : object {
    private Nullable`1<long> _count;
    [CompilerGeneratedAttribute]
private Uri <NextPageLink>k__BackingField;
    [DataMemberAttribute]
public Uri NextPageLink { get; private set; }
    [DataMemberAttribute]
public Nullable`1<long> Count { get; private set; }
    protected PageResult(Uri nextPageLink, Nullable`1<long> count);
    [CompilerGeneratedAttribute]
public Uri get_NextPageLink();
    [CompilerGeneratedAttribute]
private void set_NextPageLink(Uri value);
    public Nullable`1<long> get_Count();
    private void set_Count(Nullable`1<long> value);
}
[DataContractAttribute]
[JsonObjectAttribute]
public class Microsoft.AspNet.OData.PageResult`1 : PageResult {
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Items>k__BackingField;
    [DataMemberAttribute]
public IEnumerable`1<T> Items { get; private set; }
    public PageResult`1(IEnumerable`1<T> items, Uri nextPageLink, Nullable`1<long> count);
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(IEnumerable`1<T> value);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.AspNet.OData.PerRequestActionValueBinder : object {
    private IActionValueBinder _innerActionValueBinder;
    public PerRequestActionValueBinder(IActionValueBinder innerActionValueBinder);
    public sealed virtual HttpActionBinding GetBinding(HttpActionDescriptor actionDescriptor);
}
internal class Microsoft.AspNet.OData.PerRequestContentNegotiator : object {
    private IContentNegotiator _innerContentNegotiator;
    public PerRequestContentNegotiator(IContentNegotiator innerContentNegotiator);
    public sealed virtual ContentNegotiationResult Negotiate(Type type, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
}
internal class Microsoft.AspNet.OData.PerRequestParameterBinding : HttpParameterBinding {
    private IEnumerable`1<MediaTypeFormatter> _formatters;
    public bool WillReadBody { get; }
    public PerRequestParameterBinding(HttpParameterDescriptor descriptor, IEnumerable`1<MediaTypeFormatter> formatters);
    public virtual bool get_WillReadBody();
    public virtual Task ExecuteBindingAsync(ModelMetadataProvider metadataProvider, HttpActionContext actionContext, CancellationToken cancellationToken);
    protected virtual HttpParameterBinding CreateInnerBinding(IEnumerable`1<MediaTypeFormatter> perRequestFormatters);
}
public class Microsoft.AspNet.OData.PerRouteContainer : PerRouteContainerBase {
    private static string RootContainerMappingsKey;
    private HttpConfiguration configuration;
    public PerRouteContainer(HttpConfiguration configuration);
    protected virtual IServiceProvider GetContainer(string routeName);
    protected virtual void SetContainer(string routeName, IServiceProvider rootContainer);
    private ConcurrentDictionary`2<string, IServiceProvider> GetRootContainerMappings();
}
public abstract class Microsoft.AspNet.OData.PerRouteContainerBase : object {
    private IDictionary`2<string, string> routeMapping;
    [CompilerGeneratedAttribute]
private Func`1<IContainerBuilder> <BuilderFactory>k__BackingField;
    public Func`1<IContainerBuilder> BuilderFactory { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Func`1<IContainerBuilder> get_BuilderFactory();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuilderFactory(Func`1<IContainerBuilder> value);
    public virtual void AddRoute(string routeName, string routePrefix);
    public sealed virtual string GetRoutePrefix(string routeName);
    public sealed virtual IServiceProvider CreateODataRootContainer(string routeName, Action`1<IContainerBuilder> configureAction);
    public IServiceProvider CreateODataRootContainer(Action`1<IContainerBuilder> configureAction);
    public sealed virtual bool HasODataRootContainer(string routeName);
    public sealed virtual IServiceProvider GetODataRootContainer(string routeName);
    internal void SetODataRootContainer(string routeName, IServiceProvider rootContainer);
    protected abstract virtual IServiceProvider GetContainer(string routeName);
    protected abstract virtual void SetContainer(string routeName, IServiceProvider rootContainer);
    protected IContainerBuilder CreateContainerBuilderWithCoreServices();
}
internal abstract class Microsoft.AspNet.OData.PropertyAccessor`1 : object {
    [CompilerGeneratedAttribute]
private PropertyInfo <Property>k__BackingField;
    public PropertyInfo Property { get; private set; }
    protected PropertyAccessor`1(PropertyInfo property);
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
private void set_Property(PropertyInfo value);
    public void Copy(TStructuralType from, TStructuralType to);
    public abstract virtual object GetValue(TStructuralType instance);
    public abstract virtual void SetValue(TStructuralType instance, object value);
}
[FlagsAttribute]
public enum Microsoft.AspNet.OData.Query.AllowedArithmeticOperators : Enum {
    public int value__;
    public static AllowedArithmeticOperators None;
    public static AllowedArithmeticOperators Add;
    public static AllowedArithmeticOperators Subtract;
    public static AllowedArithmeticOperators Multiply;
    public static AllowedArithmeticOperators Divide;
    public static AllowedArithmeticOperators Modulo;
    public static AllowedArithmeticOperators All;
}
[FlagsAttribute]
public enum Microsoft.AspNet.OData.Query.AllowedFunctions : Enum {
    public int value__;
    public static AllowedFunctions None;
    public static AllowedFunctions StartsWith;
    public static AllowedFunctions EndsWith;
    public static AllowedFunctions Contains;
    public static AllowedFunctions Length;
    public static AllowedFunctions IndexOf;
    public static AllowedFunctions Concat;
    public static AllowedFunctions Substring;
    public static AllowedFunctions ToLower;
    public static AllowedFunctions ToUpper;
    public static AllowedFunctions Trim;
    public static AllowedFunctions Cast;
    public static AllowedFunctions Year;
    public static AllowedFunctions Date;
    public static AllowedFunctions Month;
    public static AllowedFunctions Time;
    public static AllowedFunctions Day;
    public static AllowedFunctions Hour;
    public static AllowedFunctions Minute;
    public static AllowedFunctions Second;
    public static AllowedFunctions FractionalSeconds;
    public static AllowedFunctions Round;
    public static AllowedFunctions Floor;
    public static AllowedFunctions Ceiling;
    public static AllowedFunctions IsOf;
    public static AllowedFunctions Any;
    public static AllowedFunctions All;
    public static AllowedFunctions MatchesPattern;
    public static AllowedFunctions AllStringFunctions;
    public static AllowedFunctions AllDateTimeFunctions;
    public static AllowedFunctions AllMathFunctions;
    public static AllowedFunctions AllFunctions;
}
[FlagsAttribute]
public enum Microsoft.AspNet.OData.Query.AllowedLogicalOperators : Enum {
    public int value__;
    public static AllowedLogicalOperators None;
    public static AllowedLogicalOperators Or;
    public static AllowedLogicalOperators And;
    public static AllowedLogicalOperators Equal;
    public static AllowedLogicalOperators NotEqual;
    public static AllowedLogicalOperators GreaterThan;
    public static AllowedLogicalOperators GreaterThanOrEqual;
    public static AllowedLogicalOperators LessThan;
    public static AllowedLogicalOperators LessThanOrEqual;
    public static AllowedLogicalOperators Not;
    public static AllowedLogicalOperators Has;
    public static AllowedLogicalOperators All;
}
[FlagsAttribute]
public enum Microsoft.AspNet.OData.Query.AllowedQueryOptions : Enum {
    public int value__;
    public static AllowedQueryOptions None;
    public static AllowedQueryOptions Filter;
    public static AllowedQueryOptions Expand;
    public static AllowedQueryOptions Select;
    public static AllowedQueryOptions OrderBy;
    public static AllowedQueryOptions Top;
    public static AllowedQueryOptions Skip;
    public static AllowedQueryOptions Count;
    public static AllowedQueryOptions Format;
    public static AllowedQueryOptions SkipToken;
    public static AllowedQueryOptions DeltaToken;
    public static AllowedQueryOptions Apply;
    public static AllowedQueryOptions Supported;
    public static AllowedQueryOptions All;
}
public class Microsoft.AspNet.OData.Query.ApplyQueryOption : object {
    private ApplyClause _applyClause;
    private ODataQueryOptionParser _queryOptionParser;
    [CompilerGeneratedAttribute]
private ODataQueryContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResultClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawValue>k__BackingField;
    public ODataQueryContext Context { get; private set; }
    public Type ResultClrType { get; private set; }
    public ApplyClause ApplyClause { get; }
    public string RawValue { get; private set; }
    public ApplyQueryOption(string rawValue, ODataQueryContext context, ODataQueryOptionParser queryOptionParser);
    [CompilerGeneratedAttribute]
public ODataQueryContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ODataQueryContext value);
    [CompilerGeneratedAttribute]
public Type get_ResultClrType();
    [CompilerGeneratedAttribute]
private void set_ResultClrType(Type value);
    public ApplyClause get_ApplyClause();
    [CompilerGeneratedAttribute]
public string get_RawValue();
    [CompilerGeneratedAttribute]
private void set_RawValue(string value);
    public IQueryable ApplyTo(IQueryable query, ODataQuerySettings querySettings);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.OData.Query.AutoSelectExpandHelper : object {
    [ExtensionAttribute]
public static bool HasAutoSelectProperty(IEdmModel edmModel, IEdmStructuredType structuredType, IEdmProperty property);
    [ExtensionAttribute]
public static bool HasAutoExpandProperty(IEdmModel edmModel, IEdmStructuredType structuredType, IEdmProperty property);
    [ExtensionAttribute]
private static bool HasAutoExpandProperty(IEdmModel edmModel, IEdmStructuredType structuredType, IEdmProperty pathProperty, ISet`1<IEdmStructuredType> visited);
    [ExtensionAttribute]
public static IEnumerable`1<SelectModelPath> GetAutoSelectPaths(IEdmModel edmModel, IEdmStructuredType structuredType, IEdmProperty pathProperty, ModelBoundQuerySettings querySettings);
    [ExtensionAttribute]
public static IEnumerable`1<ExpandModelPath> GetAutoExpandPaths(IEdmModel edmModel, IEdmStructuredType structuredType, IEdmProperty property, bool isSelectPresent, ModelBoundQuerySettings querySettings);
    public static bool IsAutoExpand(IEdmProperty navigationProperty, IEdmProperty pathProperty, IEdmStructuredType pathStructuredType, IEdmModel edmModel, bool isSelectPresent, ModelBoundQuerySettings querySettings);
    public static bool IsAutoSelect(IEdmProperty property, IEdmProperty pathProperty, IEdmStructuredType pathStructuredType, IEdmModel edmModel, ModelBoundQuerySettings querySettings);
    [ExtensionAttribute]
private static bool CanExpand(IEdmModel edmModel, IEdmStructuredType structuredType, IEdmProperty property);
    [ExtensionAttribute]
private static void GetAutoExpandPaths(IEdmModel edmModel, IEdmStructuredType structuredType, IEdmProperty pathProperty, Stack`1<IEdmElement> nodes, ISet`1<IEdmStructuredType> visited, IList`1<ExpandModelPath> results, bool isSelectPresent, ModelBoundQuerySettings querySettings);
}
[AttributeUsageAttribute("132")]
public class Microsoft.AspNet.OData.Query.CountAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    public bool Disabled { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
}
public class Microsoft.AspNet.OData.Query.CountQueryOption : object {
    private Nullable`1<bool> _value;
    private ODataQueryOptionParser _queryOptionParser;
    [CompilerGeneratedAttribute]
private ODataQueryContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawValue>k__BackingField;
    [CompilerGeneratedAttribute]
private CountQueryValidator <Validator>k__BackingField;
    public ODataQueryContext Context { get; private set; }
    public string RawValue { get; private set; }
    public bool Value { get; }
    public CountQueryValidator Validator { get; public set; }
    public CountQueryOption(string rawValue, ODataQueryContext context, ODataQueryOptionParser queryOptionParser);
    internal CountQueryOption(string rawValue, ODataQueryContext context);
    [CompilerGeneratedAttribute]
public ODataQueryContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ODataQueryContext value);
    [CompilerGeneratedAttribute]
public string get_RawValue();
    [CompilerGeneratedAttribute]
private void set_RawValue(string value);
    public bool get_Value();
    [CompilerGeneratedAttribute]
public CountQueryValidator get_Validator();
    [CompilerGeneratedAttribute]
public void set_Validator(CountQueryValidator value);
    public void Validate(ODataValidationSettings validationSettings);
    public Nullable`1<long> GetEntityCount(IQueryable query);
    internal Func`1<long> GetEntityCountFunc(IQueryable query);
}
internal enum Microsoft.AspNet.OData.Query.DataSourceProviderKind : Enum {
    public int value__;
    public static DataSourceProviderKind Unknown;
    public static DataSourceProviderKind InMemory;
    public static DataSourceProviderKind EFClassic;
    public static DataSourceProviderKind EFCore;
}
public class Microsoft.AspNet.OData.Query.DefaultQuerySettings : object {
    private Nullable`1<int> _maxTop;
    [CompilerGeneratedAttribute]
private bool <EnableExpand>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSelect>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableOrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSkipToken>k__BackingField;
    public bool EnableExpand { get; public set; }
    public bool EnableSelect { get; public set; }
    public bool EnableCount { get; public set; }
    public bool EnableOrderBy { get; public set; }
    public bool EnableFilter { get; public set; }
    public Nullable`1<int> MaxTop { get; public set; }
    public bool EnableSkipToken { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnableExpand();
    [CompilerGeneratedAttribute]
public void set_EnableExpand(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableSelect();
    [CompilerGeneratedAttribute]
public void set_EnableSelect(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableCount();
    [CompilerGeneratedAttribute]
public void set_EnableCount(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableOrderBy();
    [CompilerGeneratedAttribute]
public void set_EnableOrderBy(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableFilter();
    [CompilerGeneratedAttribute]
public void set_EnableFilter(bool value);
    public Nullable`1<int> get_MaxTop();
    public void set_MaxTop(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_EnableSkipToken();
    [CompilerGeneratedAttribute]
public void set_EnableSkipToken(bool value);
    internal void CopySettings(DefaultQuerySettings settings);
}
public class Microsoft.AspNet.OData.Query.DefaultSkipTokenHandler : SkipTokenHandler {
    private static char CommaDelimiter;
    private static char propertyDelimiter;
    internal static DefaultSkipTokenHandler Instance;
    private static DefaultSkipTokenHandler();
    public virtual Uri GenerateNextPageLink(Uri baseUri, int pageSize, object instance, ODataSerializerContext context);
    private static string GenerateSkipTokenValue(object lastMember, IEdmModel model, IList`1<OrderByNode> orderByNodes);
    public virtual IQueryable`1<T> ApplyTo(IQueryable`1<T> query, SkipTokenQueryOption skipTokenQueryOption);
    public virtual IQueryable ApplyTo(IQueryable query, SkipTokenQueryOption skipTokenQueryOption);
    private static IQueryable ApplyToCore(IQueryable query, ODataQuerySettings querySettings, IList`1<OrderByNode> orderByNodes, ODataQueryContext context, string skipTokenRawValue);
    private static IDictionary`2<string, Tuple`2<object, Type>> PopulatePropertyValuePairs(string value, ODataQueryContext context);
    private static IList`1<string> ParseValue(string value, char delim);
    private static IEnumerable`1<IEdmProperty> GetPropertiesForSkipToken(object lastMember, IEdmModel model, IList`1<OrderByNode> orderByNodes);
    private static IEdmType GetTypeFromObject(object value, IEdmModel model);
}
[AttributeUsageAttribute("132")]
public class Microsoft.AspNet.OData.Query.ExpandAttribute : Attribute {
    private Dictionary`2<string, ExpandConfiguration> _expandConfigurations;
    private SelectExpandType _expandType;
    private Nullable`1<SelectExpandType> _defaultExpandType;
    private Nullable`1<int> _defaultMaxDepth;
    private int _maxDepth;
    public Dictionary`2<string, ExpandConfiguration> ExpandConfigurations { get; }
    public SelectExpandType ExpandType { get; public set; }
    public int MaxDepth { get; public set; }
    internal Nullable`1<SelectExpandType> DefaultExpandType { get; internal set; }
    internal Nullable`1<int> DefaultMaxDepth { get; internal set; }
    public ExpandAttribute(String[] properties);
    public Dictionary`2<string, ExpandConfiguration> get_ExpandConfigurations();
    public SelectExpandType get_ExpandType();
    public void set_ExpandType(SelectExpandType value);
    public int get_MaxDepth();
    public void set_MaxDepth(int value);
    internal Nullable`1<SelectExpandType> get_DefaultExpandType();
    internal void set_DefaultExpandType(Nullable`1<SelectExpandType> value);
    internal Nullable`1<int> get_DefaultMaxDepth();
    internal void set_DefaultMaxDepth(Nullable`1<int> value);
}
public class Microsoft.AspNet.OData.Query.ExpandConfiguration : object {
    [CompilerGeneratedAttribute]
private SelectExpandType <ExpandType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxDepth>k__BackingField;
    public SelectExpandType ExpandType { get; public set; }
    public int MaxDepth { get; public set; }
    [CompilerGeneratedAttribute]
public SelectExpandType get_ExpandType();
    [CompilerGeneratedAttribute]
public void set_ExpandType(SelectExpandType value);
    [CompilerGeneratedAttribute]
public int get_MaxDepth();
    [CompilerGeneratedAttribute]
public void set_MaxDepth(int value);
}
internal class Microsoft.AspNet.OData.Query.ExpandModelPath : List`1<IEdmElement> {
    private string _navigationPath;
    [CompilerGeneratedAttribute]
private IEdmNavigationProperty <Navigation>k__BackingField;
    public IEdmNavigationProperty Navigation { get; private set; }
    public string NavigationPropertyPath { get; }
    public string ExpandPath { get; }
    public ExpandModelPath(IEnumerable`1<IEdmElement> nodes);
    [CompilerGeneratedAttribute]
public IEdmNavigationProperty get_Navigation();
    [CompilerGeneratedAttribute]
private void set_Navigation(IEdmNavigationProperty value);
    public string get_NavigationPropertyPath();
    public string get_ExpandPath();
    private void ValidateAndCalculateElementPath();
}
public class Microsoft.AspNet.OData.Query.ExpandQueryBuilder : object {
    public virtual string GenerateExpandQueryParameter(object value, IEdmModel model);
    private string GenerateExpandQueryStringInternal(object value, IEdmModel model, bool isNestedExpand);
}
internal class Microsoft.AspNet.OData.Query.Expressions.AggregationBinder : TransformationBinderBase {
    private static string GroupByContainerProperty;
    private TransformationNode _transformation;
    private IEnumerable`1<AggregateExpressionBase> _aggregateExpressions;
    private IEnumerable`1<GroupByPropertyNode> _groupingProperties;
    private Type _groupByClrType;
    private Dictionary`2<SingleValueNode, Expression> _preFlattenedMap;
    internal AggregationBinder(ODataQuerySettings settings, IWebApiAssembliesResolver assembliesResolver, Type elementType, IEdmModel model, TransformationNode transformation);
    private static Expression WrapDynamicCastIfNeeded(Expression propertyAccessor);
    private IEnumerable`1<AggregateExpressionBase> FixCustomMethodReturnTypes(IEnumerable`1<AggregateExpressionBase> aggregateExpressions);
    private AggregateExpression FixCustomMethodReturnType(AggregateExpression expression);
    private MethodInfo GetCustomMethod(AggregateExpression expression);
    public IQueryable Bind(IQueryable query);
    private IQueryable FlattenReferencedProperties(IQueryable query);
    private IQueryable BindSelect(IQueryable grouping);
    private List`1<MemberAssignment> CreateSelectMemberAssigments(Type type, MemberExpression propertyAccessor, IEnumerable`1<GroupByPropertyNode> properties);
    private Expression CreateAggregationExpression(ParameterExpression accum, AggregateExpressionBase expression, Type baseType);
    private Expression CreateEntitySetAggregateExpression(ParameterExpression accum, EntitySetAggregateExpression expression, Type baseType);
    private Expression CreatePropertyAggregateExpression(ParameterExpression accum, AggregateExpression expression, Type baseType);
    private IQueryable BindGroupBy(IQueryable query);
    private List`1<NamedPropertyExpression> CreateGroupByMemberAssignments(IEnumerable`1<GroupByPropertyNode> nodes);
    [CompilerGeneratedAttribute]
private AggregateExpressionBase <FixCustomMethodReturnTypes>b__7_0(AggregateExpressionBase x);
}
internal class Microsoft.AspNet.OData.Query.Expressions.AggregationPropertyContainer : NamedProperty`1<object> {
    [CompilerGeneratedAttribute]
private AggregationPropertyContainer <Next>k__BackingField;
    public GroupByWrapper NestedValue { get; public set; }
    public AggregationPropertyContainer Next { get; public set; }
    public GroupByWrapper get_NestedValue();
    public void set_NestedValue(GroupByWrapper value);
    [CompilerGeneratedAttribute]
public AggregationPropertyContainer get_Next();
    [CompilerGeneratedAttribute]
public void set_Next(AggregationPropertyContainer value);
    public virtual void ToDictionaryCore(Dictionary`2<string, object> dictionary, IPropertyMapper propertyMapper, bool includeAutoSelected);
    public virtual object GetValue();
    public static Expression CreateNextNamedPropertyContainer(IList`1<NamedPropertyExpression> properties);
    private static Expression CreateNextNamedPropertyCreationExpression(NamedPropertyExpression property, Expression next);
}
internal class Microsoft.AspNet.OData.Query.Expressions.AggregationWrapper : GroupByWrapper {
}
internal class Microsoft.AspNet.OData.Query.Expressions.ClrCanonicalFunctions : object {
    private static string _defaultString;
    private static Enum _defaultEnum;
    internal static string StartswithFunctionName;
    internal static string EndswithFunctionName;
    internal static string ContainsFunctionName;
    internal static string SubstringFunctionName;
    internal static string LengthFunctionName;
    internal static string IndexofFunctionName;
    internal static string TolowerFunctionName;
    internal static string ToupperFunctionName;
    internal static string TrimFunctionName;
    internal static string ConcatFunctionName;
    internal static string MatchesPatternFunctionName;
    internal static string YearFunctionName;
    internal static string MonthFunctionName;
    internal static string DayFunctionName;
    internal static string HourFunctionName;
    internal static string MinuteFunctionName;
    internal static string SecondFunctionName;
    internal static string MillisecondFunctionName;
    internal static string FractionalSecondsFunctionName;
    internal static string RoundFunctionName;
    internal static string FloorFunctionName;
    internal static string CeilingFunctionName;
    internal static string CastFunctionName;
    internal static string IsofFunctionName;
    internal static string DateFunctionName;
    internal static string TimeFunctionName;
    internal static string NowFunctionName;
    public static MethodInfo StartsWith;
    public static MethodInfo EndsWith;
    public static MethodInfo Contains;
    public static MethodInfo SubstringStart;
    public static MethodInfo SubstringStartAndLength;
    public static MethodInfo SubstringStartNoThrow;
    public static MethodInfo SubstringStartAndLengthNoThrow;
    public static MethodInfo IndexOf;
    public static MethodInfo ToLower;
    public static MethodInfo ToUpper;
    public static MethodInfo Trim;
    public static MethodInfo Concat;
    public static MethodInfo MatchesPattern;
    public static MethodInfo CeilingOfDouble;
    public static MethodInfo RoundOfDouble;
    public static MethodInfo FloorOfDouble;
    public static MethodInfo CeilingOfDecimal;
    public static MethodInfo RoundOfDecimal;
    public static MethodInfo FloorOfDecimal;
    public static MethodInfo HasFlag;
    public static Dictionary`2<string, PropertyInfo> DateProperties;
    public static Dictionary`2<string, PropertyInfo> DateTimeProperties;
    public static Dictionary`2<string, PropertyInfo> DateTimeOffsetProperties;
    public static Dictionary`2<string, PropertyInfo> TimeOfDayProperties;
    public static Dictionary`2<string, PropertyInfo> TimeSpanProperties;
    public static PropertyInfo Length;
    public static PropertyInfo DateTimeKindPropertyInfo;
    public static MethodInfo ToUniversalTimeDateTime;
    public static MethodInfo ToUniversalTimeDateTimeOffset;
    public static MethodInfo ToOffsetFunction;
    public static MethodInfo GetUtcOffset;
    private static ClrCanonicalFunctions();
    private static MethodInfo MethodOf(Expression`1<Func`2<object, TReturn>> expression);
    private static MethodInfo MethodOf(Expression expression);
}
internal class Microsoft.AspNet.OData.Query.Expressions.ClrSafeFunctions : object {
    public static string SubstringStart(string str, int startIndex);
    public static string SubstringStartAndLength(string str, int startIndex, int length);
}
internal class Microsoft.AspNet.OData.Query.Expressions.ComputeBinder : TransformationBinderBase {
    private ComputeTransformationNode _transformation;
    private string _modelID;
    internal ComputeBinder(ODataQuerySettings settings, IWebApiAssembliesResolver assembliesResolver, Type elementType, IEdmModel model, ComputeTransformationNode transformation);
    public IQueryable Bind(IQueryable query);
    private Expression CreateComputeExpression(ComputeExpression expression);
}
internal class Microsoft.AspNet.OData.Query.Expressions.ComputeWrapper`1 : GroupByWrapper {
    [CompilerGeneratedAttribute]
private T <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModelID>k__BackingField;
    private bool _merged;
    private TypedEdmStructuredObject _typedEdmStructuredObject;
    public T Instance { get; public set; }
    public string ModelID { get; public set; }
    public Dictionary`2<string, object> Values { get; }
    [CompilerGeneratedAttribute]
public T get_Instance();
    [CompilerGeneratedAttribute]
public void set_Instance(T value);
    [CompilerGeneratedAttribute]
public string get_ModelID();
    [CompilerGeneratedAttribute]
public void set_ModelID(string value);
    public virtual Dictionary`2<string, object> get_Values();
    private void EnsureValues();
    private IEdmModel GetModel();
    public sealed virtual IEdmTypeReference GetEdmType();
}
public abstract class Microsoft.AspNet.OData.Query.Expressions.DynamicTypeWrapper : object {
    public Dictionary`2<string, object> Values { get; }
    public abstract virtual Dictionary`2<string, object> get_Values();
    public sealed virtual bool TryGetPropertyValue(string propertyName, Object& value);
}
internal class Microsoft.AspNet.OData.Query.Expressions.DynamicTypeWrapperConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
internal class Microsoft.AspNet.OData.Query.Expressions.EntitySetAggregationWrapper : GroupByWrapper {
}
public abstract class Microsoft.AspNet.OData.Query.Expressions.ExpressionBinderBase : object {
    internal static MethodInfo StringCompareMethodInfo;
    internal static MethodInfo GuidCompareMethodInfo;
    internal static string DictionaryStringObjectIndexerName;
    internal static Expression NullConstant;
    internal static Expression FalseConstant;
    internal static Expression TrueConstant;
    internal static Expression ZeroConstant;
    internal static MethodInfo EnumTryParseMethod;
    internal static Dictionary`2<BinaryOperatorKind, ExpressionType> BinaryOperatorMapping;
    [CompilerGeneratedAttribute]
private IEdmModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataQuerySettings <QuerySettings>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebApiAssembliesResolver <InternalAssembliesResolver>k__BackingField;
    internal IQueryable BaseQuery;
    internal IDictionary`2<string, Expression> FlattenedPropertyContainer;
    internal bool HasInstancePropertyContainer;
    internal IEdmModel Model { get; internal set; }
    internal ODataQuerySettings QuerySettings { get; internal set; }
    internal IWebApiAssembliesResolver InternalAssembliesResolver { get; internal set; }
    protected ParameterExpression Parameter { get; }
    protected ExpressionBinderBase(IServiceProvider requestContainer);
    internal ExpressionBinderBase(IEdmModel model, IWebApiAssembliesResolver assembliesResolver, ODataQuerySettings querySettings);
    internal ExpressionBinderBase(IEdmModel model, ODataQuerySettings querySettings);
    private static ExpressionBinderBase();
    [CompilerGeneratedAttribute]
internal IEdmModel get_Model();
    [CompilerGeneratedAttribute]
internal void set_Model(IEdmModel value);
    [CompilerGeneratedAttribute]
internal ODataQuerySettings get_QuerySettings();
    [CompilerGeneratedAttribute]
internal void set_QuerySettings(ODataQuerySettings value);
    [CompilerGeneratedAttribute]
internal IWebApiAssembliesResolver get_InternalAssembliesResolver();
    [CompilerGeneratedAttribute]
internal void set_InternalAssembliesResolver(IWebApiAssembliesResolver value);
    internal Expression CreateBinaryExpression(BinaryOperatorKind binaryOperator, Expression left, Expression right, bool liftToNull, bool containsDateFunction);
    internal Expression CreateConvertExpression(ConvertNode convertNode, Expression source);
    internal Expression ConvertNonStandardPrimitives(Expression source);
    internal Expression MakePropertyAccess(PropertyInfo propertyInfo, Expression argument);
    internal Expression MakeFunctionCall(MemberInfo member, Expression[] arguments);
    internal Expression CreateFunctionCallWithNullPropagation(Expression functionCall, Expression[] arguments);
    internal Expression RemoveInnerNullPropagation(Expression expression);
    internal string GetFullPropertyPath(SingleValueNode node);
    protected PropertyInfo GetDynamicPropertyContainer(SingleValueOpenPropertyAccessNode openNode);
    private static Expression CheckIfArgumentsAreNull(Expression[] arguments);
    internal static Expression CheckForNull(Expression expression);
    private static IEnumerable`1<Expression> ExtractValueFromNullableArguments(IEnumerable`1<Expression> arguments);
    internal static Expression ExtractValueFromNullableExpression(Expression source);
    internal Expression BindHas(Expression left, Expression flag);
    protected void EnsureFlattenedPropertyContainer(ParameterExpression source);
    internal IDictionary`2<string, Expression> GetFlattenedProperties(ParameterExpression source);
    private static MethodCallExpression SkipFilters(MethodCallExpression expression);
    private static void CollectContainerAssignments(Expression source, MethodCallExpression expression, Dictionary`2<string, Expression> result);
    private static MemberInitExpression ExtractContainerExpression(MethodCallExpression expression, string containerName);
    private static void CollectAssigments(IDictionary`2<string, Expression> flattenPropertyContainer, Expression source, MemberInitExpression expression, string prefix);
    protected Expression GetFlattenedPropertyExpression(string propertyPath);
    private Expression GetProperty(Expression source, string propertyName);
    private Expression CreateDateBinaryExpression(Expression source);
    private Expression CreateTimeBinaryExpression(Expression source);
    private static Expression ConvertToDateTimeRelatedConstExpression(Expression source);
    internal static Expression ConvertToEnumUnderlyingType(Expression expression, Type enumType, Type enumUnderlyingType);
    internal static object ExtractParameterizedConstant(Expression expression);
    internal static Expression DateTimeOffsetToDateTime(Expression expression, bool EnableConstantParameterization);
    internal static bool IsNullable(Type t);
    internal static Type ToNullable(Type t);
    internal static Expression ToNullable(Expression expression);
    internal static bool IsIQueryable(Type type);
    internal static bool IsDoubleOrDecimal(Type type);
    internal static bool IsDateAndTimeRelated(Type type);
    internal static bool IsDateRelated(Type type);
    internal static bool IsTimeRelated(Type type);
    internal static bool IsDateOrOffset(Type type);
    internal static bool IsDateTime(Type type);
    internal static bool IsTimeSpan(Type type);
    internal static bool IsTimeOfDay(Type type);
    internal static bool IsDate(Type type);
    internal static bool ContainsDateFunction(BinaryOperatorNode binaryOperatorNode);
    internal static bool IsInteger(Type type);
    internal static bool IsType(Type type);
    internal static Expression ConvertNull(Expression expression, Type type);
    private bool IsFlatteningSource(Expression source);
    internal Expression CreatePropertyAccessExpression(Expression source, IEdmProperty property, string propertyPath);
    internal static Expression GetPropertyExpression(Expression source, string propertyPath);
    public abstract virtual Expression Bind(QueryNode node);
    protected abstract virtual ParameterExpression get_Parameter();
    public virtual Expression BindConstantNode(ConstantNode constantNode);
    public virtual Expression BindSingleValueFunctionCallNode(SingleValueFunctionCallNode node);
    public virtual Expression BindCollectionConstantNode(CollectionConstantNode node);
    private Expression BindCastSingleValue(SingleValueFunctionCallNode node);
    private static Expression BindCastToStringType(Expression source);
    private Expression BindCastToEnumType(Type sourceType, Type targetClrType, QueryNode firstParameter, int parameterLength);
    private Expression BindIsOf(SingleValueFunctionCallNode node);
    private Expression BindCeiling(SingleValueFunctionCallNode node);
    private Expression BindFloor(SingleValueFunctionCallNode node);
    private Expression BindRound(SingleValueFunctionCallNode node);
    private Expression BindDate(SingleValueFunctionCallNode node);
    private Expression BindNow(SingleValueFunctionCallNode node);
    private Expression BindTime(SingleValueFunctionCallNode node);
    private Expression BindFractionalSeconds(SingleValueFunctionCallNode node);
    private Expression BindDateRelatedProperty(SingleValueFunctionCallNode node);
    private Expression BindTimeRelatedProperty(SingleValueFunctionCallNode node);
    private Expression BindConcat(SingleValueFunctionCallNode node);
    private Expression BindMatchesPattern(SingleValueFunctionCallNode node);
    private Expression BindTrim(SingleValueFunctionCallNode node);
    private Expression BindToUpper(SingleValueFunctionCallNode node);
    private Expression BindToLower(SingleValueFunctionCallNode node);
    private Expression BindIndexOf(SingleValueFunctionCallNode node);
    private Expression BindSubstring(SingleValueFunctionCallNode node);
    private Expression BindLength(SingleValueFunctionCallNode node);
    private Expression BindContains(SingleValueFunctionCallNode node);
    private Expression BindStartsWith(SingleValueFunctionCallNode node);
    private Expression BindEndsWith(SingleValueFunctionCallNode node);
    protected Expression[] BindArguments(IEnumerable`1<QueryNode> nodes);
    private static void ValidateAllStringArguments(string functionName, Expression[] arguments);
    private Expression BindCustomMethodExpressionOrNull(SingleValueFunctionCallNode node);
    private Type RetrieveClrTypeForConstant(IEdmTypeReference edmTypeReference, Object& value);
    [CompilerGeneratedAttribute]
private Expression <MakeFunctionCall>b__31_0(Expression a);
    [CompilerGeneratedAttribute]
private Expression <BindArguments>b__105_0(SingleValueNode n);
}
public class Microsoft.AspNet.OData.Query.Expressions.FilterBinder : ExpressionBinderBase {
    private static string ODataItParameterName;
    private static string ODataThisParameterName;
    private Stack`1<Dictionary`2<string, ParameterExpression>> _parametersStack;
    private Dictionary`2<string, ParameterExpression> _lambdaParameters;
    private Type _filterType;
    protected ParameterExpression Parameter { get; }
    public FilterBinder(IServiceProvider requestContainer);
    internal FilterBinder(ODataQuerySettings settings, IWebApiAssembliesResolver assembliesResolver, IEdmModel model);
    private FilterBinder(IEdmModel model, IWebApiAssembliesResolver assembliesResolver, ODataQuerySettings querySettings, Type filterType);
    internal static Expression Bind(IQueryable baseQuery, FilterClause filterClause, Type filterType, ODataQueryContext context, ODataQuerySettings querySettings);
    internal static LambdaExpression Bind(IQueryable baseQuery, OrderByClause orderBy, Type elementType, ODataQueryContext context, ODataQuerySettings querySettings);
    private static FilterBinder GetOrCreateFilterBinder(ODataQueryContext context, ODataQuerySettings querySettings);
    internal static Expression`1<Func`2<TEntityType, bool>> Bind(FilterClause filterClause, IEdmModel model, IWebApiAssembliesResolver assembliesResolver, ODataQuerySettings querySettings);
    internal static Expression Bind(FilterClause filterClause, Type filterType, IEdmModel model, IWebApiAssembliesResolver assembliesResolver, ODataQuerySettings querySettings);
    private static LambdaExpression BindFilterClause(FilterBinder binder, FilterClause filterClause, Type filterType);
    private static LambdaExpression BindOrderByClause(FilterBinder binder, OrderByClause orderBy, Type elementType);
    public virtual Expression Bind(QueryNode node);
    private Expression BindCountNode(CountNode node);
    public virtual Expression BindDynamicPropertyAccessQueryNode(SingleValueOpenPropertyAccessNode openNode);
    private Expression BindPropertyAccessExpression(SingleValueOpenPropertyAccessNode openNode, PropertyInfo prop);
    public virtual Expression BindSingleResourceFunctionCallNode(SingleResourceFunctionCallNode node);
    private Expression BindSingleResourceCastFunctionCall(SingleResourceFunctionCallNode node);
    public virtual Expression BindSingleResourceCastNode(SingleResourceCastNode node);
    public virtual Expression BindCollectionResourceCastNode(CollectionResourceCastNode node);
    private Expression BindCastSourceNode(QueryNode sourceNode);
    private static Expression OfType(Expression source, Type elementType);
    public virtual Expression BindNavigationPropertyNode(QueryNode sourceNode, IEdmNavigationProperty navigationProperty);
    public virtual Expression BindNavigationPropertyNode(QueryNode sourceNode, IEdmNavigationProperty navigationProperty, string propertyPath);
    public virtual Expression BindBinaryOperatorNode(BinaryOperatorNode binaryOperatorNode);
    public virtual Expression BindInNode(InNode inNode);
    public virtual Expression BindConvertNode(ConvertNode convertNode);
    private LambdaExpression BindExpression(SingleValueNode expression, RangeVariable rangeVariable, Type elementType);
    private Expression ApplyNullPropagationForFilterBody(Expression body);
    public virtual Expression BindRangeVariable(RangeVariable rangeVariable);
    public virtual Expression BindCollectionPropertyAccessNode(CollectionPropertyAccessNode propertyAccessNode);
    public virtual Expression BindCollectionComplexNode(CollectionComplexNode collectionComplexNode);
    public virtual Expression BindPropertyAccessQueryNode(SingleValuePropertyAccessNode propertyAccessNode);
    public virtual Expression BindSingleComplexNode(SingleComplexNode singleComplexNode);
    public virtual Expression BindUnaryOperatorNode(UnaryOperatorNode unaryOperatorNode);
    private static void ValidateAllStringArguments(string functionName, Expression[] arguments);
    public virtual Expression BindAllNode(AllNode allNode);
    public virtual Expression BindAnyNode(AnyNode anyNode);
    protected virtual ParameterExpression get_Parameter();
    private Expression BindSingleValueNode(SingleValueNode node);
    private Expression BindCollectionNode(CollectionNode node);
    private ParameterExpression HandleLambdaParameters(IEnumerable`1<RangeVariable> rangeVariables);
    private void EnterLambdaScope();
    private void ExitLamdbaScope();
    private static Expression Any(Expression source, Expression filter);
    private static Expression All(Expression source, Expression filter);
}
internal class Microsoft.AspNet.OData.Query.Expressions.FlatteningWrapper`1 : GroupByWrapper {
    [CompilerGeneratedAttribute]
private T <Source>k__BackingField;
    public T Source { get; public set; }
    [CompilerGeneratedAttribute]
public T get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(T value);
}
[JsonConverterAttribute("Microsoft.AspNet.OData.Query.Expressions.DynamicTypeWrapperConverter")]
internal class Microsoft.AspNet.OData.Query.Expressions.GroupByWrapper : DynamicTypeWrapper {
    private Dictionary`2<string, object> _values;
    protected static IPropertyMapper DefaultPropertyMapper;
    [CompilerGeneratedAttribute]
private AggregationPropertyContainer <GroupByContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private AggregationPropertyContainer <Container>k__BackingField;
    public AggregationPropertyContainer GroupByContainer { get; public set; }
    public AggregationPropertyContainer Container { get; public set; }
    public Dictionary`2<string, object> Values { get; }
    private static GroupByWrapper();
    [CompilerGeneratedAttribute]
public virtual AggregationPropertyContainer get_GroupByContainer();
    [CompilerGeneratedAttribute]
public virtual void set_GroupByContainer(AggregationPropertyContainer value);
    [CompilerGeneratedAttribute]
public virtual AggregationPropertyContainer get_Container();
    [CompilerGeneratedAttribute]
public virtual void set_Container(AggregationPropertyContainer value);
    public virtual Dictionary`2<string, object> get_Values();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private void EnsureValues();
}
internal class Microsoft.AspNet.OData.Query.Expressions.IdentityPropertyMapper : object {
    public sealed virtual string MapProperty(string propertyName);
}
internal static class Microsoft.AspNet.OData.Query.Expressions.Linq2ObjectsComparisonMethods : object {
    public static MethodInfo AreByteArraysEqualMethodInfo;
    public static MethodInfo AreByteArraysNotEqualMethodInfo;
    private static Linq2ObjectsComparisonMethods();
    public static bool AreByteArraysEqual(Byte[] left, Byte[] right);
    public static bool AreByteArraysNotEqual(Byte[] left, Byte[] right);
}
internal abstract class Microsoft.AspNet.OData.Query.Expressions.LinqParameterContainer : object {
    private static ConcurrentDictionary`2<Type, Func`2<object, LinqParameterContainer>> _ctors;
    public object Property { get; }
    private static LinqParameterContainer();
    public abstract virtual object get_Property();
    public static Expression Parameterize(Type type, object value);
    private static LinqParameterContainer Create(Type type, object value);
    public static LinqParameterContainer CreateInternal(T value);
}
internal static class Microsoft.AspNet.OData.Query.Expressions.ModelContainer : object {
    private static ConcurrentDictionary`2<IEdmModel, string> _map;
    private static ConcurrentDictionary`2<string, IEdmModel> _reverseMap;
    private static ModelContainer();
    public static string GetModelID(IEdmModel model);
    public static IEdmModel GetModel(string id);
}
internal class Microsoft.AspNet.OData.Query.Expressions.NamedPropertyExpression : object {
    [CompilerGeneratedAttribute]
private Expression <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <NullCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoSelected>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CountOption>k__BackingField;
    public Expression Name { get; private set; }
    public Expression Value { get; private set; }
    public Expression TotalCount { get; public set; }
    public Expression NullCheck { get; public set; }
    public Nullable`1<int> PageSize { get; public set; }
    public bool AutoSelected { get; public set; }
    public Nullable`1<bool> CountOption { get; public set; }
    public NamedPropertyExpression(Expression name, Expression value);
    [CompilerGeneratedAttribute]
public Expression get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(Expression value);
    [CompilerGeneratedAttribute]
public Expression get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(Expression value);
    [CompilerGeneratedAttribute]
public Expression get_TotalCount();
    [CompilerGeneratedAttribute]
public void set_TotalCount(Expression value);
    [CompilerGeneratedAttribute]
public Expression get_NullCheck();
    [CompilerGeneratedAttribute]
public void set_NullCheck(Expression value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_AutoSelected();
    [CompilerGeneratedAttribute]
public void set_AutoSelected(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CountOption();
    [CompilerGeneratedAttribute]
public void set_CountOption(Nullable`1<bool> value);
}
internal class Microsoft.AspNet.OData.Query.Expressions.NoGroupByAggregationWrapper : GroupByWrapper {
}
internal class Microsoft.AspNet.OData.Query.Expressions.NoGroupByWrapper : GroupByWrapper {
}
internal abstract class Microsoft.AspNet.OData.Query.Expressions.PropertyContainer : object {
    private static List`1<Type> SingleExpandedPropertyTypes;
    private static List`1<Type> CollectionExpandedPropertyTypes;
    private static List`1<Type> AutoSelectedNamedPropertyTypes;
    private static List`1<Type> NamedPropertyTypes;
    private static PropertyContainer();
    public Dictionary`2<string, object> ToDictionary(IPropertyMapper propertyMapper, bool includeAutoSelected);
    public abstract virtual void ToDictionaryCore(Dictionary`2<string, object> dictionary, IPropertyMapper propertyMapper, bool includeAutoSelected);
    public static Expression CreatePropertyContainer(IList`1<NamedPropertyExpression> properties);
    private static int GetLeftSize(int count, int parts);
    private static Expression CreateNamedPropertyCreationExpression(NamedPropertyExpression property, IList`1<Expression> expressions);
    private static Type GetNamedPropertyType(NamedPropertyExpression property, IList`1<Expression> expressions);
}
internal class Microsoft.AspNet.OData.Query.Expressions.SelectExpandBinder : object {
    private ODataQueryContext _context;
    private IEdmModel _model;
    private ODataQuerySettings _settings;
    private string _modelID;
    private DataSourceProviderKind _dataSourceProviderKind;
    public SelectExpandBinder(ODataQuerySettings settings, ODataQueryContext context);
    public static IQueryable Bind(IQueryable queryable, ODataQuerySettings settings, SelectExpandQueryOption selectExpandQuery);
    public static object Bind(object entity, ODataQuerySettings settings, SelectExpandQueryOption selectExpandQuery);
    private object Bind(object entity, SelectExpandQueryOption selectExpandQuery);
    private IQueryable Bind(IQueryable queryable, SelectExpandQueryOption selectExpandQuery);
    private LambdaExpression GetProjectionLambda(SelectExpandQueryOption selectExpandQuery);
    internal Expression ProjectAsWrapper(Expression source, SelectExpandClause selectExpandClause, IEdmStructuredType structuredType, IEdmNavigationSource navigationSource, OrderByClause orderByClause, Nullable`1<long> topOption, Nullable`1<long> skipOption, Nullable`1<int> modelBoundPageSize);
    internal Expression CreatePropertyNameExpression(IEdmStructuredType elementType, IEdmProperty property, Expression source);
    internal Expression CreatePropertyValueExpression(IEdmStructuredType elementType, IEdmProperty property, Expression source, FilterClause filterClause);
    internal Expression ProjectElement(Expression source, SelectExpandClause selectExpandClause, IEdmStructuredType structuredType, IEdmNavigationSource navigationSource);
    internal static bool GetSelectExpandProperties(IEdmModel model, IEdmStructuredType structuredType, IEdmNavigationSource navigationSource, SelectExpandClause selectExpandClause, IDictionary`2& propertiesToInclude, IDictionary`2& propertiesToExpand, ISet`1& autoSelectedProperties);
    private static void ProcessExpandedItem(ExpandedReferenceSelectItem expandedItem, IEdmNavigationSource navigationSource, IDictionary`2<IEdmStructuralProperty, SelectExpandIncludedProperty> currentLevelPropertiesInclude, IDictionary`2& propertiesToExpand);
    private static bool ProcessSelectedItem(PathSelectItem pathSelectItem, IEdmNavigationSource navigationSource, IDictionary`2<IEdmStructuralProperty, SelectExpandIncludedProperty> currentLevelPropertiesInclude);
    private static bool IsSelectAllOnOpenType(SelectExpandClause selectExpandClause, IEdmStructuredType structuredType);
    private Expression CreateTotalCountExpression(Expression source, Nullable`1<bool> countOption);
    private Expression BuildPropertyContainer(Expression source, IEdmStructuredType structuredType, IDictionary`2<IEdmNavigationProperty, ExpandedReferenceSelectItem> propertiesToExpand, IDictionary`2<IEdmStructuralProperty, PathSelectItem> propertiesToInclude, ISet`1<IEdmStructuralProperty> autoSelectedProperties, bool isSelectingOpenTypeSegments);
    internal void BuildExpandedProperty(Expression source, IEdmStructuredType structuredType, IEdmNavigationProperty navigationProperty, ExpandedReferenceSelectItem expandedItem, IList`1<NamedPropertyExpression> includedProperties);
    internal void BuildSelectedProperty(Expression source, IEdmStructuredType structuredType, IEdmStructuralProperty structuralProperty, PathSelectItem pathSelectItem, IList`1<NamedPropertyExpression> includedProperties);
    internal void BuildDynamicProperty(Expression source, IEdmStructuredType structuredType, IList`1<NamedPropertyExpression> includedProperties);
    private static SelectExpandClause GetOrCreateSelectExpandClause(IEdmNavigationProperty navigationProperty, ExpandedReferenceSelectItem expandedItem);
    private Expression AddOrderByQueryForSource(Expression source, OrderByClause orderbyClause, Type elementType);
    private static Expression GetNullCheckExpression(IEdmStructuralProperty propertyToInclude, Expression propertyValue, SelectExpandClause projection);
    private Expression GetNullCheckExpression(IEdmNavigationProperty propertyToExpand, Expression propertyValue, SelectExpandClause projection);
    private Expression ProjectCollection(Expression source, Type elementType, SelectExpandClause selectExpandClause, IEdmStructuredType structuredType, IEdmNavigationSource navigationSource, OrderByClause orderByClause, Nullable`1<long> topOption, Nullable`1<long> skipOption, Nullable`1<int> modelBoundPageSize);
    internal static Expression CreateTypeNameExpression(Expression source, IEdmStructuredType elementType, IEdmModel model);
    private static IReadOnlyList`1<IEdmStructuredType> GetAllDerivedTypes(IEdmStructuredType baseType, IEdmModel model);
    private static int IsDerivedTypeOf(IEdmStructuredType type, IEdmStructuredType baseType);
    private static MethodInfo GetSelectMethod(Type elementType, Type resultType);
    private static bool IsSelectAll(SelectExpandClause selectExpandClause);
    private static Type GetWrapperGenericType(bool isInstancePropertySet, bool isTypeNamePropertySet, bool isContainerPropertySet);
}
internal class Microsoft.AspNet.OData.Query.Expressions.SelectExpandIncludedProperty : object {
    private PropertySegment _propertySegment;
    private IEdmNavigationSource _navigationSource;
    private PathSelectItem _propertySelectItem;
    private IList`1<SelectItem> _subSelectItems;
    public SelectExpandIncludedProperty(PropertySegment propertySegment);
    public SelectExpandIncludedProperty(PropertySegment propertySegment, IEdmNavigationSource navigationSource);
    public PathSelectItem ToPathSelectItem();
    public void AddSubSelectItem(IList`1<ODataPathSegment> remainingSegments, PathSelectItem oldSelectItem);
    public void AddSubExpandItem(IList`1<ODataPathSegment> remainingSegments, ExpandedReferenceSelectItem oldRefItem);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.OData.Query.Expressions.SelectExpandPathExtensions : object {
    [ExtensionAttribute]
public static ODataPathSegment GetFirstNonTypeCastSegment(ODataSelectPath selectPath, IList`1& remainingSegments);
    [ExtensionAttribute]
public static ODataPathSegment GetFirstNonTypeCastSegment(ODataExpandPath expandPath, IList`1& remainingSegments);
    private static ODataPathSegment GetFirstNonTypeCastSegment(ODataPath path, Func`2<ODataPathSegment, bool> middleSegmentPredicte, Func`2<ODataPathSegment, bool> lastSegmentPredicte, IList`1& remainingSegments);
}
internal abstract class Microsoft.AspNet.OData.Query.Expressions.SelectExpandWrapper : object {
    private static IPropertyMapper DefaultPropertyMapper;
    private static Func`3<IEdmModel, IEdmStructuredType, IPropertyMapper> _mapperProvider;
    private Dictionary`2<string, object> _containerDict;
    private TypedEdmStructuredObject _typedEdmStructuredObject;
    [CompilerGeneratedAttribute]
private PropertyContainer <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModelID>k__BackingField;
    [CompilerGeneratedAttribute]
private object <UntypedInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseInstanceForProperties>k__BackingField;
    public PropertyContainer Container { get; public set; }
    public string ModelID { get; public set; }
    public object UntypedInstance { get; public set; }
    public string InstanceType { get; public set; }
    public bool UseInstanceForProperties { get; public set; }
    private static SelectExpandWrapper();
    [CompilerGeneratedAttribute]
public PropertyContainer get_Container();
    [CompilerGeneratedAttribute]
public void set_Container(PropertyContainer value);
    [CompilerGeneratedAttribute]
public string get_ModelID();
    [CompilerGeneratedAttribute]
public void set_ModelID(string value);
    [CompilerGeneratedAttribute]
public object get_UntypedInstance();
    [CompilerGeneratedAttribute]
public void set_UntypedInstance(object value);
    [CompilerGeneratedAttribute]
public string get_InstanceType();
    [CompilerGeneratedAttribute]
public void set_InstanceType(string value);
    [CompilerGeneratedAttribute]
public bool get_UseInstanceForProperties();
    [CompilerGeneratedAttribute]
public void set_UseInstanceForProperties(bool value);
    public sealed virtual IEdmTypeReference GetEdmType();
    public sealed virtual bool TryGetPropertyValue(string propertyName, Object& value);
    public sealed virtual IDictionary`2<string, object> ToDictionary();
    public sealed virtual IDictionary`2<string, object> ToDictionary(Func`3<IEdmModel, IEdmStructuredType, IPropertyMapper> mapperProvider);
    protected abstract virtual Type GetElementType();
    private IEdmModel GetModel();
}
[JsonConverterAttribute("Microsoft.AspNet.OData.Query.Expressions.SelectExpandWrapperConverter")]
internal class Microsoft.AspNet.OData.Query.Expressions.SelectExpandWrapper`1 : SelectExpandWrapper {
    public TElement Instance { get; public set; }
    public TElement get_Instance();
    public void set_Instance(TElement value);
    protected virtual Type GetElementType();
}
internal class Microsoft.AspNet.OData.Query.Expressions.SelectExpandWrapperConverter : JsonConverter {
    private static Func`3<IEdmModel, IEdmStructuredType, IPropertyMapper> _mapperProvider;
    private static SelectExpandWrapperConverter();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
internal class Microsoft.AspNet.OData.Query.Expressions.TransformationBinderBase : ExpressionBinderBase {
    [CompilerGeneratedAttribute]
private ParameterExpression <LambdaParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClassicEF>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResultClrType>k__BackingField;
    protected Type ElementType { get; }
    protected ParameterExpression LambdaParameter { get; protected set; }
    protected bool ClassicEF { get; private set; }
    public Type ResultClrType { get; protected set; }
    protected ParameterExpression Parameter { get; }
    internal TransformationBinderBase(ODataQuerySettings settings, IWebApiAssembliesResolver assembliesResolver, Type elementType, IEdmModel model);
    protected Type get_ElementType();
    [CompilerGeneratedAttribute]
protected ParameterExpression get_LambdaParameter();
    [CompilerGeneratedAttribute]
protected void set_LambdaParameter(ParameterExpression value);
    [CompilerGeneratedAttribute]
protected bool get_ClassicEF();
    [CompilerGeneratedAttribute]
private void set_ClassicEF(bool value);
    [CompilerGeneratedAttribute]
public Type get_ResultClrType();
    [CompilerGeneratedAttribute]
protected void set_ResultClrType(Type value);
    internal virtual bool IsClassicEF(IQueryable query);
    protected void PreprocessQuery(IQueryable query);
    protected Expression WrapConvert(Expression expression);
    public virtual Expression Bind(QueryNode node);
    protected virtual ParameterExpression get_Parameter();
    protected Expression BindAccessor(QueryNode node, Expression baseElement);
    private Expression CreateOpenPropertyAccessExpression(SingleValueOpenPropertyAccessNode openNode);
}
internal static class Microsoft.AspNet.OData.Query.Expressions.UriFunctionsBinder : object {
    private static Dictionary`2<string, MethodInfo> methodLiteralSignaturesToMethodInfo;
    private static object locker;
    private static UriFunctionsBinder();
    public static void BindUriFunctionName(string functionName, MethodInfo methodInfo);
    public static bool UnbindUriFunctionName(string functionName, MethodInfo methodInfo);
    public static bool TryGetMethodInfo(string functionName, IEnumerable`1<Type> methodArgumentsType, MethodInfo& methodInfo);
    private static string GetMethodLiteralSignature(string methodName, MethodInfo methodInfo);
    private static string GetMethodLiteralSignature(string methodName, IEnumerable`1<Type> methodArgumentsType);
}
[AttributeUsageAttribute("132")]
public class Microsoft.AspNet.OData.Query.FilterAttribute : Attribute {
    private Nullable`1<bool> _defaultEnableFilter;
    private bool _disable;
    private Dictionary`2<string, bool> _filterConfigurations;
    public Dictionary`2<string, bool> FilterConfigurations { get; }
    public bool Disabled { get; public set; }
    internal Nullable`1<bool> DefaultEnableFilter { get; internal set; }
    public FilterAttribute(String[] properties);
    public Dictionary`2<string, bool> get_FilterConfigurations();
    public bool get_Disabled();
    public void set_Disabled(bool value);
    internal Nullable`1<bool> get_DefaultEnableFilter();
    internal void set_DefaultEnableFilter(Nullable`1<bool> value);
}
public class Microsoft.AspNet.OData.Query.FilterQueryOption : object {
    private FilterClause _filterClause;
    private ODataQueryOptionParser _queryOptionParser;
    [CompilerGeneratedAttribute]
private ODataQueryContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterQueryValidator <Validator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawValue>k__BackingField;
    public ODataQueryContext Context { get; private set; }
    public FilterQueryValidator Validator { get; public set; }
    public FilterClause FilterClause { get; }
    public string RawValue { get; private set; }
    public FilterQueryOption(string rawValue, ODataQueryContext context, ODataQueryOptionParser queryOptionParser);
    internal FilterQueryOption(string rawValue, ODataQueryContext context);
    [CompilerGeneratedAttribute]
public ODataQueryContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ODataQueryContext value);
    [CompilerGeneratedAttribute]
public FilterQueryValidator get_Validator();
    [CompilerGeneratedAttribute]
public void set_Validator(FilterQueryValidator value);
    public FilterClause get_FilterClause();
    [CompilerGeneratedAttribute]
public string get_RawValue();
    [CompilerGeneratedAttribute]
private void set_RawValue(string value);
    public IQueryable ApplyTo(IQueryable query, ODataQuerySettings querySettings);
    public void Validate(ODataValidationSettings validationSettings);
}
public enum Microsoft.AspNet.OData.Query.HandleNullPropagationOption : Enum {
    public int value__;
    public static HandleNullPropagationOption Default;
    public static HandleNullPropagationOption True;
    public static HandleNullPropagationOption False;
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.OData.Query.HandleNullPropagationOptionHelper : object {
    internal static string EntityFrameworkQueryProviderNamespace;
    internal static string ObjectContextQueryProviderNamespaceEF5;
    internal static string ObjectContextQueryProviderNamespaceEF6;
    internal static string ObjectContextQueryProviderNamespaceEFCore2;
    internal static string Linq2SqlQueryProviderNamespace;
    internal static string Linq2ObjectsQueryProviderNamespace;
    public static bool IsDefined(HandleNullPropagationOption value);
    public static void Validate(HandleNullPropagationOption value, string parameterValue);
    public static HandleNullPropagationOption GetDefaultHandleNullPropagationOption(IQueryable query);
    [ExtensionAttribute]
public static DataSourceProviderKind GetDataSourceProviderKind(IQueryable query);
}
internal interface Microsoft.AspNet.OData.Query.ICountOptionCollection {
    public Nullable`1<long> TotalCount { get; }
    public abstract virtual Nullable`1<long> get_TotalCount();
}
public interface Microsoft.AspNet.OData.Query.IExpandQueryBuilder {
    public abstract virtual string GenerateExpandQueryParameter(object value, IEdmModel model);
}
public interface Microsoft.AspNet.OData.Query.IODataQueryOptionsParser {
    public abstract virtual bool CanParse(HttpRequestMessage request);
    public abstract virtual Task`1<string> ParseAsync(Stream requestStream);
}
public interface Microsoft.AspNet.OData.Query.IPropertyMapper {
    public abstract virtual string MapProperty(string propertyName);
}
public interface Microsoft.AspNet.OData.Query.ISelectExpandWrapper {
    public abstract virtual IDictionary`2<string, object> ToDictionary();
    public abstract virtual IDictionary`2<string, object> ToDictionary(Func`3<IEdmModel, IEdmStructuredType, IPropertyMapper> propertyMapperProvider);
}
public interface Microsoft.AspNet.OData.Query.ITruncatedCollection {
    public int PageSize { get; }
    public bool IsTruncated { get; }
    public abstract virtual int get_PageSize();
    public abstract virtual bool get_IsTruncated();
}
public class Microsoft.AspNet.OData.Query.ModelBoundQuerySettings : object {
    private Nullable`1<int> _pageSize;
    private Nullable`1<int> _maxTop;
    private Dictionary`2<string, ExpandConfiguration> _expandConfigurations;
    private Dictionary`2<string, SelectExpandType> _selectConfigurations;
    private Dictionary`2<string, bool> _orderByConfigurations;
    private Dictionary`2<string, bool> _filterConfigurations;
    internal static ModelBoundQuerySettings DefaultModelBoundQuerySettings;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Countable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SelectExpandType> <DefaultExpandType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DefaultMaxDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DefaultEnableOrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DefaultEnableFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SelectExpandType> <DefaultSelectType>k__BackingField;
    public Nullable`1<int> MaxTop { get; public set; }
    public Nullable`1<int> PageSize { get; public set; }
    public Nullable`1<bool> Countable { get; public set; }
    public Dictionary`2<string, ExpandConfiguration> ExpandConfigurations { get; }
    public Nullable`1<SelectExpandType> DefaultExpandType { get; public set; }
    public int DefaultMaxDepth { get; public set; }
    public Nullable`1<bool> DefaultEnableOrderBy { get; public set; }
    public Nullable`1<bool> DefaultEnableFilter { get; public set; }
    public Nullable`1<SelectExpandType> DefaultSelectType { get; public set; }
    public Dictionary`2<string, bool> OrderByConfigurations { get; }
    public Dictionary`2<string, bool> FilterConfigurations { get; }
    public Dictionary`2<string, SelectExpandType> SelectConfigurations { get; }
    public ModelBoundQuerySettings(ModelBoundQuerySettings querySettings);
    private static ModelBoundQuerySettings();
    public Nullable`1<int> get_MaxTop();
    public void set_MaxTop(Nullable`1<int> value);
    public Nullable`1<int> get_PageSize();
    public void set_PageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Countable();
    [CompilerGeneratedAttribute]
public void set_Countable(Nullable`1<bool> value);
    public Dictionary`2<string, ExpandConfiguration> get_ExpandConfigurations();
    [CompilerGeneratedAttribute]
public Nullable`1<SelectExpandType> get_DefaultExpandType();
    [CompilerGeneratedAttribute]
public void set_DefaultExpandType(Nullable`1<SelectExpandType> value);
    [CompilerGeneratedAttribute]
public int get_DefaultMaxDepth();
    [CompilerGeneratedAttribute]
public void set_DefaultMaxDepth(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DefaultEnableOrderBy();
    [CompilerGeneratedAttribute]
public void set_DefaultEnableOrderBy(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DefaultEnableFilter();
    [CompilerGeneratedAttribute]
public void set_DefaultEnableFilter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<SelectExpandType> get_DefaultSelectType();
    [CompilerGeneratedAttribute]
public void set_DefaultSelectType(Nullable`1<SelectExpandType> value);
    public Dictionary`2<string, bool> get_OrderByConfigurations();
    public Dictionary`2<string, bool> get_FilterConfigurations();
    public Dictionary`2<string, SelectExpandType> get_SelectConfigurations();
    internal void CopyExpandConfigurations(Dictionary`2<string, ExpandConfiguration> expandConfigurations);
    internal void CopyOrderByConfigurations(Dictionary`2<string, bool> orderByConfigurations);
    internal void CopySelectConfigurations(Dictionary`2<string, SelectExpandType> selectConfigurations);
    internal void CopyFilterConfigurations(Dictionary`2<string, bool> filterConfigurations);
    internal bool Expandable(string propertyName);
    internal bool Selectable(string propertyName);
    internal bool Sortable(string propertyName);
    internal bool Filterable(string propertyName);
    internal bool IsAutomaticExpand(string propertyName);
    internal bool IsAutomaticSelect(string propertyName);
}
[AttributeUsageAttribute("128")]
public class Microsoft.AspNet.OData.Query.NonFilterableAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Microsoft.AspNet.OData.Query.NotCountableAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Microsoft.AspNet.OData.Query.NotExpandableAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Microsoft.AspNet.OData.Query.NotFilterableAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Microsoft.AspNet.OData.Query.NotNavigableAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Microsoft.AspNet.OData.Query.NotSortableAttribute : Attribute {
}
internal class Microsoft.AspNet.OData.Query.ODataPathQueryBuilder : object {
    private IQueryable source;
    private ODataPath path;
    public ODataPathQueryBuilder(IQueryable source, ODataPath path);
    public ODataPathQueryResult BuildQuery();
    private static IQueryable GetSinglePropertyQuery(IQueryable queryable, string propertyName, bool checkIfNull);
    private static IQueryable GetCollectionPropertyQuery(IQueryable queryable, string propertyName);
}
internal class Microsoft.AspNet.OData.Query.ODataPathQueryResult : object {
    [CompilerGeneratedAttribute]
private IQueryable <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasCountSegment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasValueSegment>k__BackingField;
    public IQueryable Result { get; public set; }
    public bool HasCountSegment { get; public set; }
    public bool HasValueSegment { get; public set; }
    [CompilerGeneratedAttribute]
public IQueryable get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(IQueryable value);
    [CompilerGeneratedAttribute]
public bool get_HasCountSegment();
    [CompilerGeneratedAttribute]
public void set_HasCountSegment(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasValueSegment();
    [CompilerGeneratedAttribute]
public void set_HasValueSegment(bool value);
}
[ODataQueryParameterBindingAttribute]
public class Microsoft.AspNet.OData.Query.ODataQueryOptions : object {
    [CompilerGeneratedAttribute]
private HttpRequestMessage <Request>k__BackingField;
    private static MethodInfo _limitResultsGenericMethod;
    private ODataQueryOptionParser _queryOptionParser;
    private AllowedQueryOptions _ignoreQueryOptions;
    private ETag _etagIfMatch;
    private bool _etagIfMatchChecked;
    private ETag _etagIfNoneMatch;
    private bool _etagIfNoneMatchChecked;
    private bool _enableNoDollarSignQueryOptions;
    private OrderByQueryOption _stableOrderBy;
    [CompilerGeneratedAttribute]
private IWebApiRequestMessage <InternalRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataQueryContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataRawQueryOptions <RawValues>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectExpandQueryOption <SelectExpand>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplyQueryOption <Apply>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterQueryOption <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private OrderByQueryOption <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private SkipQueryOption <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private SkipTokenQueryOption <SkipToken>k__BackingField;
    [CompilerGeneratedAttribute]
private TopQueryOption <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private CountQueryOption <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataQueryValidator <Validator>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebApiHeaders <InternalHeaders>k__BackingField;
    public HttpRequestMessage Request { get; private set; }
    internal IWebApiRequestMessage InternalRequest { get; private set; }
    public ODataQueryContext Context { get; private set; }
    public ODataRawQueryOptions RawValues { get; private set; }
    public SelectExpandQueryOption SelectExpand { get; private set; }
    public ApplyQueryOption Apply { get; private set; }
    public FilterQueryOption Filter { get; private set; }
    public OrderByQueryOption OrderBy { get; private set; }
    public SkipQueryOption Skip { get; private set; }
    public SkipTokenQueryOption SkipToken { get; private set; }
    public TopQueryOption Top { get; private set; }
    public CountQueryOption Count { get; private set; }
    public ODataQueryValidator Validator { get; public set; }
    private IWebApiHeaders InternalHeaders { get; private set; }
    public ETag IfMatch { get; }
    public ETag IfNoneMatch { get; }
    public ODataQueryOptions(ODataQueryContext context, HttpRequestMessage request);
    private static ODataQueryOptions();
    [CompilerGeneratedAttribute]
public HttpRequestMessage get_Request();
    [CompilerGeneratedAttribute]
private void set_Request(HttpRequestMessage value);
    private void Initialize(ODataQueryContext context);
    [CompilerGeneratedAttribute]
internal IWebApiRequestMessage get_InternalRequest();
    [CompilerGeneratedAttribute]
private void set_InternalRequest(IWebApiRequestMessage value);
    [CompilerGeneratedAttribute]
public ODataQueryContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ODataQueryContext value);
    [CompilerGeneratedAttribute]
public ODataRawQueryOptions get_RawValues();
    [CompilerGeneratedAttribute]
private void set_RawValues(ODataRawQueryOptions value);
    [CompilerGeneratedAttribute]
public SelectExpandQueryOption get_SelectExpand();
    [CompilerGeneratedAttribute]
private void set_SelectExpand(SelectExpandQueryOption value);
    [CompilerGeneratedAttribute]
public ApplyQueryOption get_Apply();
    [CompilerGeneratedAttribute]
private void set_Apply(ApplyQueryOption value);
    [CompilerGeneratedAttribute]
public FilterQueryOption get_Filter();
    [CompilerGeneratedAttribute]
private void set_Filter(FilterQueryOption value);
    [CompilerGeneratedAttribute]
public OrderByQueryOption get_OrderBy();
    [CompilerGeneratedAttribute]
private void set_OrderBy(OrderByQueryOption value);
    [CompilerGeneratedAttribute]
public SkipQueryOption get_Skip();
    [CompilerGeneratedAttribute]
private void set_Skip(SkipQueryOption value);
    [CompilerGeneratedAttribute]
public SkipTokenQueryOption get_SkipToken();
    [CompilerGeneratedAttribute]
private void set_SkipToken(SkipTokenQueryOption value);
    [CompilerGeneratedAttribute]
public TopQueryOption get_Top();
    [CompilerGeneratedAttribute]
private void set_Top(TopQueryOption value);
    [CompilerGeneratedAttribute]
public CountQueryOption get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(CountQueryOption value);
    [CompilerGeneratedAttribute]
public ODataQueryValidator get_Validator();
    [CompilerGeneratedAttribute]
public void set_Validator(ODataQueryValidator value);
    [CompilerGeneratedAttribute]
private IWebApiHeaders get_InternalHeaders();
    [CompilerGeneratedAttribute]
private void set_InternalHeaders(IWebApiHeaders value);
    public static bool IsSystemQueryOption(string queryOptionName);
    public static bool IsSystemQueryOption(string queryOptionName, bool isDollarSignOptional);
    public virtual ETag get_IfMatch();
    public virtual ETag get_IfNoneMatch();
    internal virtual ETag GetETag(EntityTagHeaderValue etagHeaderValue);
    public bool IsSupportedQueryOption(string queryOptionName);
    public virtual IQueryable ApplyTo(IQueryable query);
    public virtual IQueryable ApplyTo(IQueryable query, AllowedQueryOptions ignoreQueryOptions);
    public virtual IQueryable ApplyTo(IQueryable query, ODataQuerySettings querySettings, AllowedQueryOptions ignoreQueryOptions);
    public virtual IQueryable ApplyTo(IQueryable query, ODataQuerySettings querySettings);
    internal IQueryable ApplyPaging(IQueryable result, ODataQuerySettings querySettings);
    public virtual OrderByQueryOption GenerateStableOrder();
    private static List`1<string> GetApplySortOptions(ApplyClause apply);
    private static void ExtractGroupingProperties(List`1<string> result, IEnumerable`1<GroupByPropertyNode> groupingProperties, string prefix);
    public virtual object ApplyTo(object entity, ODataQuerySettings querySettings, AllowedQueryOptions ignoreQueryOptions);
    public virtual object ApplyTo(object entity, ODataQuerySettings querySettings);
    public virtual void Validate(ODataValidationSettings validationSettings);
    private static void ThrowIfEmpty(string queryValue, string queryName);
    private static IEnumerable`1<IEdmStructuralProperty> GetAvailableOrderByProperties(ODataQueryContext context);
    private OrderByQueryOption GenerateDefaultOrderBy(ODataQueryContext context, List`1<string> applySortOptions);
    private OrderByQueryOption EnsureStableSortOrderBy(OrderByQueryOption orderBy, ODataQueryContext context, List`1<string> applySortOptions);
    internal static IQueryable LimitResults(IQueryable queryable, int limit, bool parameterize, Boolean& resultsLimited);
    public static IQueryable`1<T> LimitResults(IQueryable`1<T> queryable, int limit, Boolean& resultsLimited);
    public static IQueryable`1<T> LimitResults(IQueryable`1<T> queryable, int limit, bool parameterize, Boolean& resultsLimited);
    internal void AddAutoSelectExpandProperties();
    private IDictionary`2<string, string> GetODataQueryParameters();
    private string GetAutoSelectRawValue();
    private string GetAutoExpandRawValue();
    private void BuildQueryOptions(IDictionary`2<string, string> queryParameters);
    private bool IsAvailableODataQueryOption(object queryOption, AllowedQueryOptions queryOptionFlag);
    private T ApplySelectExpand(T entity, ODataQuerySettings querySettings);
}
[ODataQueryParameterBindingAttribute]
public class Microsoft.AspNet.OData.Query.ODataQueryOptions`1 : ODataQueryOptions {
    public ETag`1<TEntity> IfMatch { get; }
    public ETag`1<TEntity> IfNoneMatch { get; }
    public ODataQueryOptions`1(ODataQueryContext context, HttpRequestMessage request);
    public ETag`1<TEntity> get_IfMatch();
    public ETag`1<TEntity> get_IfNoneMatch();
    internal virtual ETag GetETag(EntityTagHeaderValue etagHeaderValue);
    public virtual IQueryable ApplyTo(IQueryable query);
    public virtual IQueryable ApplyTo(IQueryable query, ODataQuerySettings querySettings);
    private static void ValidateQuery(IQueryable query);
}
public static class Microsoft.AspNet.OData.Query.ODataQueryOptionsParserFactory : object {
    public static IList`1<IODataQueryOptionsParser> Create();
    public static IODataQueryOptionsParser GetQueryOptionsParser(HttpRequestMessage request);
}
public class Microsoft.AspNet.OData.Query.ODataQuerySettings : object {
    private HandleNullPropagationOption _handleNullPropagationOption;
    private Nullable`1<int> _pageSize;
    private Nullable`1<int> _modelBoundPageSize;
    [CompilerGeneratedAttribute]
private bool <EnsureStableOrdering>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableConstantParameterization>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCorrelatedSubqueryBuffering>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HandleReferenceNavigationPropertyExpandFilter>k__BackingField;
    internal Nullable`1<int> ModelBoundPageSize { get; internal set; }
    public bool EnsureStableOrdering { get; public set; }
    public HandleNullPropagationOption HandleNullPropagation { get; public set; }
    public bool EnableConstantParameterization { get; public set; }
    public bool EnableCorrelatedSubqueryBuffering { get; public set; }
    public Nullable`1<int> PageSize { get; public set; }
    public bool HandleReferenceNavigationPropertyExpandFilter { get; public set; }
    internal Nullable`1<int> get_ModelBoundPageSize();
    internal void set_ModelBoundPageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_EnsureStableOrdering();
    [CompilerGeneratedAttribute]
public void set_EnsureStableOrdering(bool value);
    public HandleNullPropagationOption get_HandleNullPropagation();
    public void set_HandleNullPropagation(HandleNullPropagationOption value);
    [CompilerGeneratedAttribute]
public bool get_EnableConstantParameterization();
    [CompilerGeneratedAttribute]
public void set_EnableConstantParameterization(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableCorrelatedSubqueryBuffering();
    [CompilerGeneratedAttribute]
public void set_EnableCorrelatedSubqueryBuffering(bool value);
    public Nullable`1<int> get_PageSize();
    public void set_PageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_HandleReferenceNavigationPropertyExpandFilter();
    [CompilerGeneratedAttribute]
public void set_HandleReferenceNavigationPropertyExpandFilter(bool value);
    internal void CopyFrom(ODataQuerySettings settings);
}
public class Microsoft.AspNet.OData.Query.ODataRawQueryOptions : object {
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Apply>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Select>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Expand>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SkipToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeltaToken>k__BackingField;
    public string Filter { get; internal set; }
    public string Apply { get; internal set; }
    public string OrderBy { get; internal set; }
    public string Top { get; internal set; }
    public string Skip { get; internal set; }
    public string Select { get; internal set; }
    public string Expand { get; internal set; }
    public string Count { get; internal set; }
    public string Format { get; internal set; }
    public string SkipToken { get; internal set; }
    public string DeltaToken { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
internal void set_Filter(string value);
    [CompilerGeneratedAttribute]
public string get_Apply();
    [CompilerGeneratedAttribute]
internal void set_Apply(string value);
    [CompilerGeneratedAttribute]
public string get_OrderBy();
    [CompilerGeneratedAttribute]
internal void set_OrderBy(string value);
    [CompilerGeneratedAttribute]
public string get_Top();
    [CompilerGeneratedAttribute]
internal void set_Top(string value);
    [CompilerGeneratedAttribute]
public string get_Skip();
    [CompilerGeneratedAttribute]
internal void set_Skip(string value);
    [CompilerGeneratedAttribute]
public string get_Select();
    [CompilerGeneratedAttribute]
internal void set_Select(string value);
    [CompilerGeneratedAttribute]
public string get_Expand();
    [CompilerGeneratedAttribute]
internal void set_Expand(string value);
    [CompilerGeneratedAttribute]
public string get_Count();
    [CompilerGeneratedAttribute]
internal void set_Count(string value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
internal void set_Format(string value);
    [CompilerGeneratedAttribute]
public string get_SkipToken();
    [CompilerGeneratedAttribute]
internal void set_SkipToken(string value);
    [CompilerGeneratedAttribute]
public string get_DeltaToken();
    [CompilerGeneratedAttribute]
internal void set_DeltaToken(string value);
}
public class Microsoft.AspNet.OData.Query.ODataValidationSettings : object {
    private static int MinMaxSkip;
    private static int MinMaxTop;
    private static int MinMaxExpansionDepth;
    private static int MinMaxNodeCount;
    private static int MinMaxAnyAllExpressionDepth;
    private static int MinMaxOrderByNodeCount;
    internal static int DefaultMaxExpansionDepth;
    private AllowedArithmeticOperators _allowedArithmeticOperators;
    private AllowedFunctions _allowedFunctions;
    private AllowedLogicalOperators _allowedLogicalOperators;
    private AllowedQueryOptions _allowedQueryParameters;
    private Collection`1<string> _allowedOrderByProperties;
    private Nullable`1<int> _maxSkip;
    private Nullable`1<int> _maxTop;
    private int _maxAnyAllExpressionDepth;
    private int _maxNodeCount;
    private int _maxExpansionDepth;
    private int _maxOrderByNodeCount;
    public AllowedArithmeticOperators AllowedArithmeticOperators { get; public set; }
    public AllowedFunctions AllowedFunctions { get; public set; }
    public AllowedLogicalOperators AllowedLogicalOperators { get; public set; }
    public Collection`1<string> AllowedOrderByProperties { get; }
    public AllowedQueryOptions AllowedQueryOptions { get; public set; }
    public int MaxOrderByNodeCount { get; public set; }
    public int MaxAnyAllExpressionDepth { get; public set; }
    public int MaxNodeCount { get; public set; }
    public Nullable`1<int> MaxSkip { get; public set; }
    public Nullable`1<int> MaxTop { get; public set; }
    public int MaxExpansionDepth { get; public set; }
    public AllowedArithmeticOperators get_AllowedArithmeticOperators();
    public void set_AllowedArithmeticOperators(AllowedArithmeticOperators value);
    public AllowedFunctions get_AllowedFunctions();
    public void set_AllowedFunctions(AllowedFunctions value);
    public AllowedLogicalOperators get_AllowedLogicalOperators();
    public void set_AllowedLogicalOperators(AllowedLogicalOperators value);
    public Collection`1<string> get_AllowedOrderByProperties();
    public AllowedQueryOptions get_AllowedQueryOptions();
    public void set_AllowedQueryOptions(AllowedQueryOptions value);
    public int get_MaxOrderByNodeCount();
    public void set_MaxOrderByNodeCount(int value);
    public int get_MaxAnyAllExpressionDepth();
    public void set_MaxAnyAllExpressionDepth(int value);
    public int get_MaxNodeCount();
    public void set_MaxNodeCount(int value);
    public Nullable`1<int> get_MaxSkip();
    public void set_MaxSkip(Nullable`1<int> value);
    public Nullable`1<int> get_MaxTop();
    public void set_MaxTop(Nullable`1<int> value);
    public int get_MaxExpansionDepth();
    public void set_MaxExpansionDepth(int value);
}
[AttributeUsageAttribute("132")]
public class Microsoft.AspNet.OData.Query.OrderByAttribute : Attribute {
    private Nullable`1<bool> _defaultEnableOrderBy;
    private bool _disable;
    private Dictionary`2<string, bool> _orderByConfigurations;
    public Dictionary`2<string, bool> OrderByConfigurations { get; }
    public bool Disabled { get; public set; }
    internal Nullable`1<bool> DefaultEnableOrderBy { get; internal set; }
    public OrderByAttribute(String[] properties);
    public Dictionary`2<string, bool> get_OrderByConfigurations();
    public bool get_Disabled();
    public void set_Disabled(bool value);
    internal Nullable`1<bool> get_DefaultEnableOrderBy();
    internal void set_DefaultEnableOrderBy(Nullable`1<bool> value);
}
public class Microsoft.AspNet.OData.Query.OrderByCountNode : OrderByNode {
    [CompilerGeneratedAttribute]
private OrderByClause <OrderByClause>k__BackingField;
    public OrderByClause OrderByClause { get; private set; }
    public OrderByCountNode(OrderByClause orderByClause);
    [CompilerGeneratedAttribute]
public OrderByClause get_OrderByClause();
    [CompilerGeneratedAttribute]
private void set_OrderByClause(OrderByClause value);
}
public class Microsoft.AspNet.OData.Query.OrderByItNode : OrderByNode {
    public OrderByItNode(OrderByDirection direction);
}
public abstract class Microsoft.AspNet.OData.Query.OrderByNode : object {
    [CompilerGeneratedAttribute]
private OrderByDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyPath>k__BackingField;
    public OrderByDirection Direction { get; internal set; }
    internal string PropertyPath { get; internal set; }
    protected OrderByNode(OrderByDirection direction);
    protected OrderByNode(OrderByClause orderByClause);
    [CompilerGeneratedAttribute]
public OrderByDirection get_Direction();
    [CompilerGeneratedAttribute]
internal void set_Direction(OrderByDirection value);
    [CompilerGeneratedAttribute]
internal string get_PropertyPath();
    [CompilerGeneratedAttribute]
internal void set_PropertyPath(string value);
    public static IList`1<OrderByNode> CreateCollection(OrderByClause orderByClause);
    internal static string RestorePropertyPath(SingleValueNode expression);
}
public class Microsoft.AspNet.OData.Query.OrderByOpenPropertyNode : OrderByNode {
    [CompilerGeneratedAttribute]
private OrderByClause <OrderByClause>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public OrderByClause OrderByClause { get; private set; }
    public string PropertyName { get; private set; }
    public OrderByOpenPropertyNode(OrderByClause orderByClause);
    [CompilerGeneratedAttribute]
public OrderByClause get_OrderByClause();
    [CompilerGeneratedAttribute]
private void set_OrderByClause(OrderByClause value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
}
public class Microsoft.AspNet.OData.Query.OrderByPropertyNode : OrderByNode {
    [CompilerGeneratedAttribute]
private OrderByClause <OrderByClause>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmProperty <Property>k__BackingField;
    public OrderByClause OrderByClause { get; private set; }
    public IEdmProperty Property { get; private set; }
    public OrderByPropertyNode(OrderByClause orderByClause);
    public OrderByPropertyNode(IEdmProperty property, OrderByDirection direction);
    [CompilerGeneratedAttribute]
public OrderByClause get_OrderByClause();
    [CompilerGeneratedAttribute]
private void set_OrderByClause(OrderByClause value);
    [CompilerGeneratedAttribute]
public IEdmProperty get_Property();
    [CompilerGeneratedAttribute]
private void set_Property(IEdmProperty value);
}
public class Microsoft.AspNet.OData.Query.OrderByQueryOption : object {
    private OrderByClause _orderByClause;
    private IList`1<OrderByNode> _orderByNodes;
    private ODataQueryOptionParser _queryOptionParser;
    [CompilerGeneratedAttribute]
private ODataQueryContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawValue>k__BackingField;
    [CompilerGeneratedAttribute]
private OrderByQueryValidator <Validator>k__BackingField;
    public ODataQueryContext Context { get; private set; }
    public IList`1<OrderByNode> OrderByNodes { get; }
    public string RawValue { get; private set; }
    public OrderByQueryValidator Validator { get; public set; }
    public OrderByClause OrderByClause { get; }
    public OrderByQueryOption(string rawValue, ODataQueryContext context, ODataQueryOptionParser queryOptionParser);
    internal OrderByQueryOption(string rawValue, ODataQueryContext context, string applyRaw);
    internal OrderByQueryOption(string rawValue, ODataQueryContext context);
    internal OrderByQueryOption(OrderByQueryOption orderBy);
    [CompilerGeneratedAttribute]
public ODataQueryContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ODataQueryContext value);
    public IList`1<OrderByNode> get_OrderByNodes();
    [CompilerGeneratedAttribute]
public string get_RawValue();
    [CompilerGeneratedAttribute]
private void set_RawValue(string value);
    [CompilerGeneratedAttribute]
public OrderByQueryValidator get_Validator();
    [CompilerGeneratedAttribute]
public void set_Validator(OrderByQueryValidator value);
    public OrderByClause get_OrderByClause();
    public IOrderedQueryable`1<T> ApplyTo(IQueryable`1<T> query);
    public IOrderedQueryable`1<T> ApplyTo(IQueryable`1<T> query, ODataQuerySettings querySettings);
    public IOrderedQueryable ApplyTo(IQueryable query);
    public IOrderedQueryable ApplyTo(IQueryable query, ODataQuerySettings querySettings);
    public void Validate(ODataValidationSettings validationSettings);
    private IOrderedQueryable ApplyToCore(IQueryable query, ODataQuerySettings querySettings);
    private IQueryable AddOrderByQueryForProperty(IQueryable query, ODataQuerySettings querySettings, OrderByClause orderbyClause, IQueryable querySoFar, OrderByDirection direction, bool alreadyOrdered);
    private OrderByClause TranslateParameterAlias(OrderByClause orderBy);
}
[AttributeUsageAttribute("132")]
public class Microsoft.AspNet.OData.Query.PageAttribute : Attribute {
    private int _maxTop;
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    public int MaxTop { get; public set; }
    public int PageSize { get; public set; }
    public int get_MaxTop();
    public void set_MaxTop(int value);
    [CompilerGeneratedAttribute]
public int get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(int value);
}
public class Microsoft.AspNet.OData.Query.ParameterAliasNodeTranslator : QueryNodeVisitor`1<QueryNode> {
    private IDictionary`2<string, SingleValueNode> _parameterAliasNode;
    public ParameterAliasNodeTranslator(IDictionary`2<string, SingleValueNode> parameterAliasNodes);
    public virtual QueryNode Visit(AllNode nodeIn);
    public virtual QueryNode Visit(AnyNode nodeIn);
    public virtual QueryNode Visit(BinaryOperatorNode nodeIn);
    public virtual QueryNode Visit(InNode nodeIn);
    public virtual QueryNode Visit(CollectionFunctionCallNode nodeIn);
    public virtual QueryNode Visit(CollectionNavigationNode nodeIn);
    public virtual QueryNode Visit(CollectionOpenPropertyAccessNode nodeIn);
    public virtual QueryNode Visit(CollectionComplexNode nodeIn);
    public virtual QueryNode Visit(CollectionPropertyAccessNode nodeIn);
    public virtual QueryNode Visit(ConstantNode nodeIn);
    public virtual QueryNode Visit(CollectionConstantNode nodeIn);
    public virtual QueryNode Visit(ConvertNode nodeIn);
    public virtual QueryNode Visit(CollectionResourceCastNode nodeIn);
    public virtual QueryNode Visit(CollectionResourceFunctionCallNode nodeIn);
    public virtual QueryNode Visit(ResourceRangeVariableReferenceNode nodeIn);
    public virtual QueryNode Visit(NamedFunctionParameterNode nodeIn);
    public virtual QueryNode Visit(NonResourceRangeVariableReferenceNode nodeIn);
    public virtual QueryNode Visit(ParameterAliasNode nodeIn);
    public virtual QueryNode Visit(SearchTermNode nodeIn);
    public virtual QueryNode Visit(SingleResourceCastNode nodeIn);
    public virtual QueryNode Visit(SingleResourceFunctionCallNode nodeIn);
    public virtual QueryNode Visit(SingleNavigationNode nodeIn);
    public virtual QueryNode Visit(SingleValueFunctionCallNode nodeIn);
    public virtual QueryNode Visit(SingleValueOpenPropertyAccessNode nodeIn);
    public virtual QueryNode Visit(SingleValuePropertyAccessNode nodeIn);
    public virtual QueryNode Visit(SingleComplexNode nodeIn);
    public virtual QueryNode Visit(UnaryOperatorNode nodeIn);
    public virtual QueryNode Visit(CountNode nodeIn);
    [CompilerGeneratedAttribute]
private QueryNode <Visit>b__6_0(QueryNode p);
    [CompilerGeneratedAttribute]
private QueryNode <Visit>b__15_0(QueryNode p);
    [CompilerGeneratedAttribute]
private QueryNode <Visit>b__22_0(QueryNode p);
    [CompilerGeneratedAttribute]
private QueryNode <Visit>b__24_0(QueryNode p);
}
public class Microsoft.AspNet.OData.Query.PlainTextODataQueryOptionsParser : object {
    private static MediaTypeHeaderValue SupportedMediaType;
    private static PlainTextODataQueryOptionsParser();
    public sealed virtual bool CanParse(HttpRequestMessage request);
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Query.PlainTextODataQueryOptionsParser/<ParseAsync>d__2")]
public sealed virtual Task`1<string> ParseAsync(Stream requestStream);
}
public class Microsoft.AspNet.OData.Query.QueryFilterProvider : object {
    [CompilerGeneratedAttribute]
private IActionFilter <QueryFilter>k__BackingField;
    public IActionFilter QueryFilter { get; private set; }
    public QueryFilterProvider(IActionFilter queryFilter);
    [CompilerGeneratedAttribute]
public IActionFilter get_QueryFilter();
    [CompilerGeneratedAttribute]
private void set_QueryFilter(IActionFilter value);
    public sealed virtual IEnumerable`1<FilterInfo> GetFilters(HttpConfiguration configuration, HttpActionDescriptor actionDescriptor);
}
internal static class Microsoft.AspNet.OData.Query.QueryHelpers : object {
    internal static object SingleOrDefault(IQueryable queryable, IWebApiActionDescriptor actionDescriptor);
}
public enum Microsoft.AspNet.OData.Query.QueryOptionSetting : Enum {
    public int value__;
    public static QueryOptionSetting Allowed;
    public static QueryOptionSetting Disabled;
}
[AttributeUsageAttribute("132")]
public class Microsoft.AspNet.OData.Query.SelectAttribute : Attribute {
    private Dictionary`2<string, SelectExpandType> _selectConfigurations;
    private SelectExpandType _selectType;
    private Nullable`1<SelectExpandType> _defaultSelectType;
    public Dictionary`2<string, SelectExpandType> SelectConfigurations { get; }
    public SelectExpandType SelectType { get; public set; }
    internal Nullable`1<SelectExpandType> DefaultSelectType { get; internal set; }
    public SelectAttribute(String[] properties);
    public Dictionary`2<string, SelectExpandType> get_SelectConfigurations();
    public SelectExpandType get_SelectType();
    public void set_SelectType(SelectExpandType value);
    internal Nullable`1<SelectExpandType> get_DefaultSelectType();
    internal void set_DefaultSelectType(Nullable`1<SelectExpandType> value);
}
public class Microsoft.AspNet.OData.Query.SelectExpandQueryOption : object {
    private SelectExpandClause _selectExpandClause;
    private ODataQueryOptionParser _queryOptionParser;
    private SelectExpandClause _processedSelectExpandClause;
    private int _levelsMaxLiteralExpansionDepth;
    [CompilerGeneratedAttribute]
private ODataQueryContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawSelect>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawExpand>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectExpandQueryValidator <Validator>k__BackingField;
    public ODataQueryContext Context { get; private set; }
    public string RawSelect { get; private set; }
    public string RawExpand { get; private set; }
    public SelectExpandQueryValidator Validator { get; public set; }
    public SelectExpandClause SelectExpandClause { get; }
    internal SelectExpandClause ProcessedSelectExpandClause { get; }
    public int LevelsMaxLiteralExpansionDepth { get; public set; }
    public SelectExpandQueryOption(string select, string expand, ODataQueryContext context, ODataQueryOptionParser queryOptionParser);
    internal SelectExpandQueryOption(string select, string expand, ODataQueryContext context, SelectExpandClause selectExpandClause);
    internal SelectExpandQueryOption(string select, string expand, ODataQueryContext context);
    [CompilerGeneratedAttribute]
public ODataQueryContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ODataQueryContext value);
    [CompilerGeneratedAttribute]
public string get_RawSelect();
    [CompilerGeneratedAttribute]
private void set_RawSelect(string value);
    [CompilerGeneratedAttribute]
public string get_RawExpand();
    [CompilerGeneratedAttribute]
private void set_RawExpand(string value);
    [CompilerGeneratedAttribute]
public SelectExpandQueryValidator get_Validator();
    [CompilerGeneratedAttribute]
public void set_Validator(SelectExpandQueryValidator value);
    public SelectExpandClause get_SelectExpandClause();
    internal SelectExpandClause get_ProcessedSelectExpandClause();
    public int get_LevelsMaxLiteralExpansionDepth();
    public void set_LevelsMaxLiteralExpansionDepth(int value);
    public IQueryable ApplyTo(IQueryable queryable, ODataQuerySettings settings);
    public object ApplyTo(object entity, ODataQuerySettings settings);
    public void Validate(ODataValidationSettings validationSettings);
    internal SelectExpandClause ProcessLevels();
    private SelectExpandClause ProcessLevels(SelectExpandClause selectExpandClause, int levelsMaxLiteralExpansionDepth, ModelBoundQuerySettings querySettings, Boolean& levelsEncountered, Boolean& isMaxLevel);
    private IEnumerable`1<SelectItem> ProcessLevels(IEnumerable`1<SelectItem> selectItems, int levelsMaxLiteralExpansionDepth, ModelBoundQuerySettings querySettings, Boolean& levelsEncountered, Boolean& isMaxLevel);
    private void GetAutoSelectExpandItems(IEdmEntityType baseEntityType, IEdmModel model, IEdmNavigationSource navigationSource, bool isAllSelected, ModelBoundQuerySettings modelBoundQuerySettings, int depth, List`1& autoSelectItems, List`1& autoExpandItems);
    private static ODataSelectPath BuildSelectPath(SelectModelPath path, IEdmNavigationSource navigationSource);
    private static ODataExpandPath BuildExpandPath(ExpandModelPath path, IEdmNavigationSource navigationSource, IEdmNavigationSource currentEdmNavigationSource);
    private ExpandedNavigationSelectItem ProcessLevels(ExpandedNavigationSelectItem expandItem, int levelsMaxLiteralExpansionDepth, ModelBoundQuerySettings querySettings, Boolean& levelsEncounteredInExpand, Boolean& isMaxLevelInExpand);
    private static List`1<SelectItem> RemoveExpandItemExceedMaxDepth(int depth, IEnumerable`1<SelectItem> autoExpandItems);
    private static void RemoveSameExpandItem(IEdmNavigationProperty navigationProperty, List`1<SelectItem> autoExpandItems);
    private static int GetMaxExpandDepth(ModelBoundQuerySettings querySettings, string propertyName);
}
public enum Microsoft.AspNet.OData.Query.SelectExpandType : Enum {
    public int value__;
    public static SelectExpandType Allowed;
    public static SelectExpandType Automatic;
    public static SelectExpandType Disabled;
}
internal class Microsoft.AspNet.OData.Query.SelectModelPath : List`1<IEdmElement> {
    private string _selectPath;
    public string SelectPath { get; }
    public SelectModelPath(IEnumerable`1<IEdmElement> nodes);
    public string get_SelectPath();
    private void ValidateAndCalculateElementPath();
}
public class Microsoft.AspNet.OData.Query.SkipQueryOption : object {
    private Nullable`1<int> _value;
    private ODataQueryOptionParser _queryOptionParser;
    [CompilerGeneratedAttribute]
private ODataQueryContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawValue>k__BackingField;
    [CompilerGeneratedAttribute]
private SkipQueryValidator <Validator>k__BackingField;
    public ODataQueryContext Context { get; private set; }
    public string RawValue { get; private set; }
    public int Value { get; }
    public SkipQueryValidator Validator { get; public set; }
    public SkipQueryOption(string rawValue, ODataQueryContext context, ODataQueryOptionParser queryOptionParser);
    internal SkipQueryOption(string rawValue, ODataQueryContext context);
    [CompilerGeneratedAttribute]
public ODataQueryContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ODataQueryContext value);
    [CompilerGeneratedAttribute]
public string get_RawValue();
    [CompilerGeneratedAttribute]
private void set_RawValue(string value);
    public int get_Value();
    [CompilerGeneratedAttribute]
public SkipQueryValidator get_Validator();
    [CompilerGeneratedAttribute]
public void set_Validator(SkipQueryValidator value);
    public IQueryable`1<T> ApplyTo(IQueryable`1<T> query, ODataQuerySettings querySettings);
    public IQueryable ApplyTo(IQueryable query, ODataQuerySettings querySettings);
    public void Validate(ODataValidationSettings validationSettings);
    private IQueryable ApplyToCore(IQueryable query, ODataQuerySettings querySettings);
}
public abstract class Microsoft.AspNet.OData.Query.SkipTokenHandler : object {
    public abstract virtual IQueryable`1<T> ApplyTo(IQueryable`1<T> query, SkipTokenQueryOption skipTokenQueryOption);
    public abstract virtual IQueryable ApplyTo(IQueryable query, SkipTokenQueryOption skipTokenQueryOption);
    public abstract virtual Uri GenerateNextPageLink(Uri baseUri, int pageSize, object instance, ODataSerializerContext context);
}
public class Microsoft.AspNet.OData.Query.SkipTokenQueryOption : object {
    private SkipTokenHandler skipTokenHandler;
    [CompilerGeneratedAttribute]
private string <RawValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataQueryContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private SkipTokenQueryValidator <Validator>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataQuerySettings <QuerySettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataQueryOptions <QueryOptions>k__BackingField;
    public string RawValue { get; private set; }
    public ODataQueryContext Context { get; private set; }
    public SkipTokenQueryValidator Validator { get; }
    public ODataQuerySettings QuerySettings { get; private set; }
    public ODataQueryOptions QueryOptions { get; private set; }
    public SkipTokenQueryOption(string rawValue, ODataQueryContext context, ODataQueryOptionParser queryOptionParser);
    [CompilerGeneratedAttribute]
public string get_RawValue();
    [CompilerGeneratedAttribute]
private void set_RawValue(string value);
    [CompilerGeneratedAttribute]
public ODataQueryContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ODataQueryContext value);
    [CompilerGeneratedAttribute]
public SkipTokenQueryValidator get_Validator();
    [CompilerGeneratedAttribute]
public ODataQuerySettings get_QuerySettings();
    [CompilerGeneratedAttribute]
private void set_QuerySettings(ODataQuerySettings value);
    [CompilerGeneratedAttribute]
public ODataQueryOptions get_QueryOptions();
    [CompilerGeneratedAttribute]
private void set_QueryOptions(ODataQueryOptions value);
    public virtual IQueryable`1<T> ApplyTo(IQueryable`1<T> query, ODataQuerySettings querySettings, ODataQueryOptions queryOptions);
    public virtual IQueryable ApplyTo(IQueryable query, ODataQuerySettings querySettings, ODataQueryOptions queryOptions);
    public void Validate(ODataValidationSettings validationSettings);
}
public class Microsoft.AspNet.OData.Query.TopQueryOption : object {
    private Nullable`1<int> _value;
    private ODataQueryOptionParser _queryOptionParser;
    [CompilerGeneratedAttribute]
private ODataQueryContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawValue>k__BackingField;
    [CompilerGeneratedAttribute]
private TopQueryValidator <Validator>k__BackingField;
    public ODataQueryContext Context { get; private set; }
    public string RawValue { get; private set; }
    public int Value { get; }
    public TopQueryValidator Validator { get; public set; }
    public TopQueryOption(string rawValue, ODataQueryContext context, ODataQueryOptionParser queryOptionParser);
    internal TopQueryOption(string rawValue, ODataQueryContext context);
    [CompilerGeneratedAttribute]
public ODataQueryContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ODataQueryContext value);
    [CompilerGeneratedAttribute]
public string get_RawValue();
    [CompilerGeneratedAttribute]
private void set_RawValue(string value);
    public int get_Value();
    [CompilerGeneratedAttribute]
public TopQueryValidator get_Validator();
    [CompilerGeneratedAttribute]
public void set_Validator(TopQueryValidator value);
    public IOrderedQueryable`1<T> ApplyTo(IQueryable`1<T> query, ODataQuerySettings querySettings);
    public IQueryable ApplyTo(IQueryable query, ODataQuerySettings querySettings);
    public void Validate(ODataValidationSettings validationSettings);
    private IQueryable ApplyToCore(IQueryable query, ODataQuerySettings querySettings);
}
public class Microsoft.AspNet.OData.Query.TruncatedCollection`1 : List`1<T> {
    private static int MinPageSize;
    private bool _isTruncated;
    private int _pageSize;
    private Nullable`1<long> _totalCount;
    public int PageSize { get; }
    public bool IsTruncated { get; }
    public Nullable`1<long> TotalCount { get; }
    public TruncatedCollection`1(IEnumerable`1<T> source, int pageSize);
    public TruncatedCollection`1(IQueryable`1<T> source, int pageSize);
    public TruncatedCollection`1(IQueryable`1<T> source, int pageSize, bool parameterize);
    public TruncatedCollection`1(IEnumerable`1<T> source, int pageSize, Nullable`1<long> totalCount);
    public TruncatedCollection`1(IQueryable`1<T> source, int pageSize, Nullable`1<long> totalCount);
    public TruncatedCollection`1(IQueryable`1<T> source, int pageSize, Nullable`1<long> totalCount, bool parameterize);
    private void Initialize(int pageSize);
    private static IQueryable`1<T> Take(IQueryable`1<T> source, int pageSize, bool parameterize);
    public sealed virtual int get_PageSize();
    public sealed virtual bool get_IsTruncated();
    public sealed virtual Nullable`1<long> get_TotalCount();
}
[AttributeUsageAttribute("128")]
public class Microsoft.AspNet.OData.Query.UnsortableAttribute : Attribute {
}
public class Microsoft.AspNet.OData.Query.Validators.CountQueryValidator : object {
    private DefaultQuerySettings _defaultQuerySettings;
    public CountQueryValidator(DefaultQuerySettings defaultQuerySettings);
    public virtual void Validate(CountQueryOption countQueryOption, ODataValidationSettings validationSettings);
    internal static CountQueryValidator GetCountQueryValidator(ODataQueryContext context);
}
public class Microsoft.AspNet.OData.Query.Validators.FilterQueryValidator : object {
    private int _currentAnyAllExpressionDepth;
    private int _currentNodeCount;
    private DefaultQuerySettings _defaultQuerySettings;
    private IEdmProperty _property;
    private IEdmStructuredType _structuredType;
    private IEdmModel _model;
    public FilterQueryValidator(DefaultQuerySettings defaultQuerySettings);
    public virtual void Validate(FilterQueryOption filterQueryOption, ODataValidationSettings settings);
    public virtual void Validate(FilterClause filterClause, ODataValidationSettings settings, IEdmModel model);
    internal virtual void Validate(IEdmProperty property, IEdmStructuredType structuredType, FilterClause filterClause, ODataValidationSettings settings, IEdmModel model);
    public virtual void ValidateAllNode(AllNode allNode, ODataValidationSettings settings);
    public virtual void ValidateAnyNode(AnyNode anyNode, ODataValidationSettings settings);
    public virtual void ValidateBinaryOperatorNode(BinaryOperatorNode binaryOperatorNode, ODataValidationSettings settings);
    public virtual void ValidateLogicalOperator(BinaryOperatorNode binaryNode, ODataValidationSettings settings);
    public virtual void ValidateArithmeticOperator(BinaryOperatorNode binaryNode, ODataValidationSettings settings);
    public virtual void ValidateConstantNode(ConstantNode constantNode, ODataValidationSettings settings);
    public virtual void ValidateConvertNode(ConvertNode convertNode, ODataValidationSettings settings);
    public virtual void ValidateCountNode(CountNode countNode, ODataValidationSettings settings);
    public virtual void ValidateNavigationPropertyNode(QueryNode sourceNode, IEdmNavigationProperty navigationProperty, ODataValidationSettings settings);
    public virtual void ValidateRangeVariable(RangeVariable rangeVariable, ODataValidationSettings settings);
    public virtual void ValidateSingleValuePropertyAccessNode(SingleValuePropertyAccessNode propertyAccessNode, ODataValidationSettings settings);
    public virtual void ValidateSingleComplexNode(SingleComplexNode singleComplexNode, ODataValidationSettings settings);
    public virtual void ValidateCollectionPropertyAccessNode(CollectionPropertyAccessNode propertyAccessNode, ODataValidationSettings settings);
    public virtual void ValidateCollectionComplexNode(CollectionComplexNode collectionComplexNode, ODataValidationSettings settings);
    public virtual void ValidateSingleValueFunctionCallNode(SingleValueFunctionCallNode node, ODataValidationSettings settings);
    public virtual void ValidateSingleResourceFunctionCallNode(SingleResourceFunctionCallNode node, ODataValidationSettings settings);
    public virtual void ValidateUnaryOperatorNode(UnaryOperatorNode unaryOperatorNode, ODataValidationSettings settings);
    public virtual void ValidateQueryNode(QueryNode node, ODataValidationSettings settings);
    public virtual void ValidateCollectionResourceCastNode(CollectionResourceCastNode collectionResourceCastNode, ODataValidationSettings settings);
    public virtual void ValidateSingleResourceCastNode(SingleResourceCastNode singleResourceCastNode, ODataValidationSettings settings);
    internal static FilterQueryValidator GetFilterQueryValidator(ODataQueryContext context);
    private void EnterLambda(ODataValidationSettings validationSettings);
    private void ExitLambda();
    private void IncrementNodeCount(ODataValidationSettings validationSettings);
    private void ValidateCollectionNode(CollectionNode node, ODataValidationSettings settings);
    private void ValidateSingleValueNode(SingleValueNode node, ODataValidationSettings settings);
    private static void ValidateFunction(string functionName, ODataValidationSettings settings);
    private static AllowedFunctions ToODataFunction(string functionName);
    private static AllowedLogicalOperators ToLogicalOperator(BinaryOperatorNode binaryNode);
    private static AllowedArithmeticOperators ToArithmeticOperator(BinaryOperatorNode binaryNode);
}
public class Microsoft.AspNet.OData.Query.Validators.ODataQueryValidator : object {
    public virtual void Validate(ODataQueryOptions options, ODataValidationSettings validationSettings);
    internal static ODataQueryValidator GetODataQueryValidator(ODataQueryContext context);
    private static void ValidateQueryOptionAllowed(AllowedQueryOptions queryOption, AllowedQueryOptions allowed);
}
internal class Microsoft.AspNet.OData.Query.Validators.OrderByModelLimitationsValidator : QueryNodeVisitor`1<SingleValueNode> {
    private IEdmModel _model;
    private bool _enableOrderBy;
    private IEdmProperty _property;
    private IEdmStructuredType _structuredType;
    public OrderByModelLimitationsValidator(ODataQueryContext context, bool enableOrderBy);
    public bool TryValidate(IEdmProperty property, IEdmStructuredType structuredType, OrderByClause orderByClause, bool explicitPropertiesDefined);
    public bool TryValidate(OrderByClause orderByClause, bool explicitPropertiesDefined);
    public virtual SingleValueNode Visit(SingleValuePropertyAccessNode nodeIn);
    public virtual SingleValueNode Visit(SingleComplexNode nodeIn);
    public virtual SingleValueNode Visit(SingleNavigationNode nodeIn);
    public virtual SingleValueNode Visit(ResourceRangeVariableReferenceNode nodeIn);
    public virtual SingleValueNode Visit(NonResourceRangeVariableReferenceNode nodeIn);
    public virtual SingleValueNode Visit(SingleResourceCastNode nodeIn);
    private static string GetPropertyName(SingleValueNode node);
}
public class Microsoft.AspNet.OData.Query.Validators.OrderByQueryValidator : object {
    private DefaultQuerySettings _defaultQuerySettings;
    public OrderByQueryValidator(DefaultQuerySettings defaultQuerySettings);
    public virtual void Validate(OrderByQueryOption orderByOption, ODataValidationSettings validationSettings);
    internal static OrderByQueryValidator GetOrderByQueryValidator(ODataQueryContext context);
    private static bool IsAllowed(ODataValidationSettings validationSettings, string propertyName);
}
public class Microsoft.AspNet.OData.Query.Validators.SelectExpandQueryValidator : object {
    private DefaultQuerySettings _defaultQuerySettings;
    private FilterQueryValidator _filterQueryValidator;
    private OrderByModelLimitationsValidator _orderByQueryValidator;
    private SelectExpandQueryOption _selectExpandQueryOption;
    public SelectExpandQueryValidator(DefaultQuerySettings defaultQuerySettings);
    public virtual void Validate(SelectExpandQueryOption selectExpandQueryOption, ODataValidationSettings validationSettings);
    internal static SelectExpandQueryValidator GetSelectExpandQueryValidator(ODataQueryContext context);
    private static void ValidateDepth(SelectExpandClause selectExpand, int maxDepth);
    private void ValidateTopInExpand(IEdmProperty property, IEdmStructuredType structuredType, IEdmModel edmModel, Nullable`1<long> topOption);
    private void ValidateCountInExpand(IEdmProperty property, IEdmStructuredType structuredType, IEdmModel edmModel, Nullable`1<bool> countOption);
    private void ValidateOrderByInExpand(IEdmProperty property, IEdmStructuredType structuredType, OrderByClause orderByClause);
    private void ValidateFilterInExpand(IEdmProperty property, IEdmStructuredType structuredType, IEdmModel edmModel, FilterClause filterClause, ODataValidationSettings validationSettings);
    private void ValidateSelectItem(SelectItem selectItem, IEdmProperty pathProperty, IEdmStructuredType pathStructuredType, IEdmModel edmModel);
    private void ValidateLevelsOption(LevelsClause levelsClause, int depth, int currentDepth, IEdmModel edmModel, IEdmNavigationProperty property);
    private void ValidateOtherQueryOptionInExpand(IEdmNavigationProperty property, IEdmModel edmModel, ExpandedNavigationSelectItem expandItem, ODataValidationSettings validationSettings);
    private void ValidateRestrictions(Nullable`1<int> remainDepth, int currentDepth, SelectExpandClause selectExpandClause, IEdmNavigationProperty navigationProperty, ODataValidationSettings validationSettings);
}
public class Microsoft.AspNet.OData.Query.Validators.SkipQueryValidator : object {
    public virtual void Validate(SkipQueryOption skipQueryOption, ODataValidationSettings validationSettings);
    internal static SkipQueryValidator GetSkipQueryValidator(ODataQueryContext context);
}
public class Microsoft.AspNet.OData.Query.Validators.SkipTokenQueryValidator : object {
    public virtual void Validate(SkipTokenQueryOption skipToken, ODataValidationSettings validationSettings);
}
public class Microsoft.AspNet.OData.Query.Validators.TopQueryValidator : object {
    public virtual void Validate(TopQueryOption topQueryOption, ODataValidationSettings validationSettings);
    internal static TopQueryValidator GetTopQueryValidator(ODataQueryContext context);
}
public class Microsoft.AspNet.OData.QueryableRestrictions : object {
    private bool _autoExpand;
    [CompilerGeneratedAttribute]
private bool <NotFilterable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotSortable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotNavigable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotExpandable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotCountable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableAutoExpandWhenSelectIsPresent>k__BackingField;
    public bool NotFilterable { get; public set; }
    public bool NonFilterable { get; public set; }
    public bool NotSortable { get; public set; }
    public bool Unsortable { get; public set; }
    public bool NotNavigable { get; public set; }
    public bool NotExpandable { get; public set; }
    public bool NotCountable { get; public set; }
    public bool AutoExpand { get; public set; }
    public bool DisableAutoExpandWhenSelectIsPresent { get; public set; }
    public QueryableRestrictions(PropertyConfiguration propertyConfiguration);
    [CompilerGeneratedAttribute]
public bool get_NotFilterable();
    [CompilerGeneratedAttribute]
public void set_NotFilterable(bool value);
    public bool get_NonFilterable();
    public void set_NonFilterable(bool value);
    [CompilerGeneratedAttribute]
public bool get_NotSortable();
    [CompilerGeneratedAttribute]
public void set_NotSortable(bool value);
    public bool get_Unsortable();
    public void set_Unsortable(bool value);
    [CompilerGeneratedAttribute]
public bool get_NotNavigable();
    [CompilerGeneratedAttribute]
public void set_NotNavigable(bool value);
    [CompilerGeneratedAttribute]
public bool get_NotExpandable();
    [CompilerGeneratedAttribute]
public void set_NotExpandable(bool value);
    [CompilerGeneratedAttribute]
public bool get_NotCountable();
    [CompilerGeneratedAttribute]
public void set_NotCountable(bool value);
    public bool get_AutoExpand();
    public void set_AutoExpand(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableAutoExpandWhenSelectIsPresent();
    [CompilerGeneratedAttribute]
public void set_DisableAutoExpandWhenSelectIsPresent(bool value);
}
public class Microsoft.AspNet.OData.QueryableRestrictionsAnnotation : object {
    [CompilerGeneratedAttribute]
private QueryableRestrictions <Restrictions>k__BackingField;
    public QueryableRestrictions Restrictions { get; private set; }
    public QueryableRestrictionsAnnotation(QueryableRestrictions restrictions);
    [CompilerGeneratedAttribute]
public QueryableRestrictions get_Restrictions();
    [CompilerGeneratedAttribute]
private void set_Restrictions(QueryableRestrictions value);
}
internal static class Microsoft.AspNet.OData.RequestPreferenceHelpers : object {
    public static string PreferHeaderName;
    public static string ReturnContentHeaderValue;
    public static string ReturnNoContentHeaderValue;
    public static string ODataMaxPageSize;
    public static string MaxPageSize;
    internal static bool RequestPrefersReturnContent(IWebApiHeaders headers);
    internal static bool RequestPrefersReturnNoContent(IWebApiHeaders headers);
    internal static bool RequestPrefersMaxPageSize(IWebApiHeaders headers, Int32& pageSize);
    private static int GetMaxPageSize(IEnumerable`1<string> preferences, string preferenceHeaderName);
    internal static string GetRequestPreferHeader(IWebApiHeaders headers);
}
public class Microsoft.AspNet.OData.ResourceContext : object {
    private object _resourceInstance;
    [CompilerGeneratedAttribute]
private ODataSerializerContext <SerializerContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmStructuredType <StructuredType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmStructuredObject <EdmObject>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <DynamicComplexProperties>k__BackingField;
    public HttpRequestMessage Request { get; public set; }
    public UrlHelper Url { get; public set; }
    public ODataSerializerContext SerializerContext { get; public set; }
    internal IWebApiRequestMessage InternalRequest { get; }
    public IEdmModel EdmModel { get; public set; }
    public IEdmNavigationSource NavigationSource { get; public set; }
    public IEdmStructuredType StructuredType { get; public set; }
    public IEdmStructuredObject EdmObject { get; public set; }
    public object ResourceInstance { get; public set; }
    internal IWebApiUrlHelper InternalUrlHelper { get; }
    public bool SkipExpensiveAvailabilityChecks { get; public set; }
    public IDictionary`2<string, object> DynamicComplexProperties { get; public set; }
    public ResourceContext(ODataSerializerContext serializerContext, IEdmStructuredTypeReference structuredType, object resourceInstance);
    private ResourceContext(ODataSerializerContext serializerContext, IEdmStructuredTypeReference structuredType, IEdmStructuredObject edmObject);
    public HttpRequestMessage get_Request();
    public void set_Request(HttpRequestMessage value);
    public UrlHelper get_Url();
    public void set_Url(UrlHelper value);
    [CompilerGeneratedAttribute]
public ODataSerializerContext get_SerializerContext();
    [CompilerGeneratedAttribute]
public void set_SerializerContext(ODataSerializerContext value);
    internal IWebApiRequestMessage get_InternalRequest();
    public IEdmModel get_EdmModel();
    public void set_EdmModel(IEdmModel value);
    public IEdmNavigationSource get_NavigationSource();
    public void set_NavigationSource(IEdmNavigationSource value);
    [CompilerGeneratedAttribute]
public IEdmStructuredType get_StructuredType();
    [CompilerGeneratedAttribute]
public void set_StructuredType(IEdmStructuredType value);
    [CompilerGeneratedAttribute]
public IEdmStructuredObject get_EdmObject();
    [CompilerGeneratedAttribute]
public void set_EdmObject(IEdmStructuredObject value);
    public object get_ResourceInstance();
    public void set_ResourceInstance(object value);
    internal IWebApiUrlHelper get_InternalUrlHelper();
    public bool get_SkipExpensiveAvailabilityChecks();
    public void set_SkipExpensiveAvailabilityChecks(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_DynamicComplexProperties();
    [CompilerGeneratedAttribute]
public void set_DynamicComplexProperties(IDictionary`2<string, object> value);
    public object GetPropertyValue(string propertyName);
    private object BuildResourceInstance();
    private static IEdmStructuredObject AsEdmResourceObject(object resourceInstance, IEdmStructuredTypeReference structuredType, IEdmModel model);
}
public class Microsoft.AspNet.OData.ResourceContext`1 : ResourceContext {
    [ObsoleteAttribute("Resource instance might not be available when the incoming uri has a $select. Use the EdmObject property instead.")]
public TStructuredType ResourceInstance { get; public set; }
    public TStructuredType get_ResourceInstance();
    public void set_ResourceInstance(TStructuredType value);
}
public class Microsoft.AspNet.OData.ResourceSetContext : object {
    private HttpRequestMessage _request;
    private UrlHelper _urlHelper;
    [CompilerGeneratedAttribute]
private HttpRequestContext <RequestContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmEntitySetBase <EntitySetBase>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ResourceSetInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebApiRequestMessage <InternalRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebApiUrlHelper <InternalUrlHelper>k__BackingField;
    public HttpRequestMessage Request { get; public set; }
    public HttpRequestContext RequestContext { get; public set; }
    public UrlHelper Url { get; public set; }
    public IEdmModel EdmModel { get; }
    public IEdmEntitySetBase EntitySetBase { get; public set; }
    public object ResourceSetInstance { get; public set; }
    internal IWebApiRequestMessage InternalRequest { get; private set; }
    internal IWebApiUrlHelper InternalUrlHelper { get; private set; }
    public HttpRequestMessage get_Request();
    public void set_Request(HttpRequestMessage value);
    [CompilerGeneratedAttribute]
public HttpRequestContext get_RequestContext();
    [CompilerGeneratedAttribute]
public void set_RequestContext(HttpRequestContext value);
    public UrlHelper get_Url();
    public void set_Url(UrlHelper value);
    public IEdmModel get_EdmModel();
    internal static ResourceSetContext Create(ODataSerializerContext writeContext, IEnumerable resourceSetInstance);
    [CompilerGeneratedAttribute]
public IEdmEntitySetBase get_EntitySetBase();
    [CompilerGeneratedAttribute]
public void set_EntitySetBase(IEdmEntitySetBase value);
    [CompilerGeneratedAttribute]
public object get_ResourceSetInstance();
    [CompilerGeneratedAttribute]
public void set_ResourceSetInstance(object value);
    [CompilerGeneratedAttribute]
internal IWebApiRequestMessage get_InternalRequest();
    [CompilerGeneratedAttribute]
private void set_InternalRequest(IWebApiRequestMessage value);
    [CompilerGeneratedAttribute]
internal IWebApiUrlHelper get_InternalUrlHelper();
    [CompilerGeneratedAttribute]
private void set_InternalUrlHelper(IWebApiUrlHelper value);
}
public class Microsoft.AspNet.OData.Results.CreatedODataResult`1 : object {
    private NegotiatedContentResult`1<T> _innerResult;
    private Uri _locationHeader;
    public T Entity { get; }
    public IContentNegotiator ContentNegotiator { get; }
    public HttpRequestMessage Request { get; }
    public IEnumerable`1<MediaTypeFormatter> Formatters { get; }
    public Uri LocationHeader { get; }
    public CreatedODataResult`1(T entity, ApiController controller);
    public CreatedODataResult`1(T entity, IContentNegotiator contentNegotiator, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters, Uri locationHeader);
    private CreatedODataResult`1(NegotiatedContentResult`1<T> innerResult);
    public T get_Entity();
    public IContentNegotiator get_ContentNegotiator();
    public HttpRequestMessage get_Request();
    public IEnumerable`1<MediaTypeFormatter> get_Formatters();
    public Uri get_LocationHeader();
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Results.CreatedODataResult`1/<ExecuteAsync>d__15")]
public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    internal IHttpActionResult GetInnerActionResult(HttpRequestMessage request);
    internal Uri GenerateEntityId(HttpRequestMessage request);
    internal Uri GenerateLocationHeader(HttpRequestMessage request);
    private static T CheckNull(T entity);
    [CompilerGeneratedAttribute]
private Uri <ExecuteAsync>b__15_0();
    [CompilerGeneratedAttribute]
private string <ExecuteAsync>b__15_1();
}
internal static class Microsoft.AspNet.OData.Results.ResultHelpers : object {
    public static string EntityIdHeaderName;
    public static Uri GenerateODataLink(HttpRequestMessage request, object entity, bool isEntityId);
    public static void AddEntityId(HttpResponseMessage response, Func`1<Uri> entityId);
    public static void AddServiceVersion(HttpResponseMessage response, Func`1<string> version);
    internal static ODataVersion GetODataResponseVersion(HttpRequestMessage request);
    public static Uri GenerateODataLink(ResourceContext resourceContext, bool isEntityId);
    private static Uri GenerateContainmentODataPathSegments(ResourceContext resourceContext, bool isEntityId);
    private static IEdmEntityTypeReference GetEntityType(IEdmModel model, object entity);
}
public class Microsoft.AspNet.OData.Results.UpdatedODataResult`1 : object {
    private NegotiatedContentResult`1<T> _innerResult;
    public T Entity { get; }
    public IContentNegotiator ContentNegotiator { get; }
    public HttpRequestMessage Request { get; }
    public IEnumerable`1<MediaTypeFormatter> Formatters { get; }
    public UpdatedODataResult`1(T entity, ApiController controller);
    public UpdatedODataResult`1(T entity, IContentNegotiator contentNegotiator, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
    private UpdatedODataResult`1(NegotiatedContentResult`1<T> innerResult);
    public T get_Entity();
    public IContentNegotiator get_ContentNegotiator();
    public HttpRequestMessage get_Request();
    public IEnumerable`1<MediaTypeFormatter> get_Formatters();
    [AsyncStateMachineAttribute("Microsoft.AspNet.OData.Results.UpdatedODataResult`1/<ExecuteAsync>d__12")]
public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    internal IHttpActionResult GetInnerActionResult();
    private static T CheckNull(T entity);
    [CompilerGeneratedAttribute]
private string <ExecuteAsync>b__12_0();
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.OData.Routing.Conventions.ActionMapExtensions : object {
    [ExtensionAttribute]
public static string FindMatchingAction(IWebApiActionMap actionMap, String[] targetActionNames);
}
public class Microsoft.AspNet.OData.Routing.Conventions.ActionRoutingConvention : NavigationSourceRoutingConvention {
    public virtual string SelectAction(ODataPath odataPath, HttpControllerContext controllerContext, ILookup`2<string, HttpActionDescriptor> actionMap);
    internal static string SelectActionImpl(ODataPath odataPath, IWebApiControllerContext controllerContext, IWebApiActionMap actionMap);
    private static IEdmAction GetAction(ODataPath odataPath);
}
public class Microsoft.AspNet.OData.Routing.Conventions.AttributeRoutingConvention : object {
    private static DefaultODataPathHandler _defaultPathHandler;
    private string _routeName;
    private IDictionary`2<ODataPathTemplate, IWebApiActionDescriptor> _attributeMappings;
    [CompilerGeneratedAttribute]
private IODataPathTemplateHandler <ODataPathTemplateHandler>k__BackingField;
    internal IDictionary`2<ODataPathTemplate, IWebApiActionDescriptor> AttributeMappings { get; }
    public IODataPathTemplateHandler ODataPathTemplateHandler { get; private set; }
    public AttributeRoutingConvention(string routeName, HttpConfiguration configuration);
    public AttributeRoutingConvention(string routeName, HttpConfiguration configuration, IODataPathTemplateHandler pathTemplateHandler);
    public AttributeRoutingConvention(string routeName, IEnumerable`1<HttpControllerDescriptor> controllers);
    public AttributeRoutingConvention(string routeName, IEnumerable`1<HttpControllerDescriptor> controllers, IODataPathTemplateHandler pathTemplateHandler);
    private AttributeRoutingConvention(string routeName);
    private static AttributeRoutingConvention();
    internal IDictionary`2<ODataPathTemplate, IWebApiActionDescriptor> get_AttributeMappings();
    public virtual bool ShouldMapController(HttpControllerDescriptor controller);
    public sealed virtual string SelectController(ODataPath odataPath, HttpRequestMessage request);
    public sealed virtual string SelectAction(ODataPath odataPath, HttpControllerContext controllerContext, ILookup`2<string, HttpActionDescriptor> actionMap);
    private IDictionary`2<ODataPathTemplate, IWebApiActionDescriptor> BuildAttributeMappings(IEnumerable`1<HttpControllerDescriptor> controllers);
    private static bool IsODataController(HttpControllerDescriptor controller);
    private static IEnumerable`1<string> GetODataRoutePrefixes(HttpControllerDescriptor controllerDescriptor);
    private IEnumerable`1<ODataPathTemplate> GetODataPathTemplates(string prefix, HttpActionDescriptor action);
    [CompilerGeneratedAttribute]
public IODataPathTemplateHandler get_ODataPathTemplateHandler();
    [CompilerGeneratedAttribute]
private void set_ODataPathTemplateHandler(IODataPathTemplateHandler value);
    internal static SelectControllerResult SelectControllerImpl(ODataPath odataPath, IWebApiRequestMessage request, IDictionary`2<ODataPathTemplate, IWebApiActionDescriptor> attributeMappings);
    internal static string SelectActionImpl(IWebApiControllerContext controllerContext);
    [IteratorStateMachineAttribute("Microsoft.AspNet.OData.Routing.Conventions.AttributeRoutingConvention/<GetODataRoutePrefixes>d__23")]
private static IEnumerable`1<string> GetODataRoutePrefixes(IEnumerable`1<ODataRoutePrefixAttribute> prefixAttributes, string controllerName);
    private ODataPathTemplate GetODataPathTemplate(string prefix, string pathTemplate, IServiceProvider requestContainer, string controllerName, string actionName);
}
public class Microsoft.AspNet.OData.Routing.Conventions.DynamicPropertyRoutingConvention : NavigationSourceRoutingConvention {
    private static string ActionName;
    public virtual string SelectAction(ODataPath odataPath, HttpControllerContext controllerContext, ILookup`2<string, HttpActionDescriptor> actionMap);
    internal static string SelectActionImpl(ODataPath odataPath, IWebApiControllerContext controllerContext, IWebApiActionMap actionMap);
}
public class Microsoft.AspNet.OData.Routing.Conventions.EntityRoutingConvention : NavigationSourceRoutingConvention {
    public virtual string SelectAction(ODataPath odataPath, HttpControllerContext controllerContext, ILookup`2<string, HttpActionDescriptor> actionMap);
    internal static string SelectActionImpl(ODataPath odataPath, IWebApiControllerContext controllerContext, IWebApiActionMap actionMap);
}
public class Microsoft.AspNet.OData.Routing.Conventions.EntitySetRoutingConvention : NavigationSourceRoutingConvention {
    public virtual string SelectAction(ODataPath odataPath, HttpControllerContext controllerContext, ILookup`2<string, HttpActionDescriptor> actionMap);
    internal static string SelectActionImpl(ODataPath odataPath, IWebApiControllerContext controllerContext, IWebApiActionMap actionMap);
}
public class Microsoft.AspNet.OData.Routing.Conventions.FunctionRoutingConvention : NavigationSourceRoutingConvention {
    public virtual string SelectAction(ODataPath odataPath, HttpControllerContext controllerContext, ILookup`2<string, HttpActionDescriptor> actionMap);
    internal static string SelectActionImpl(ODataPath odataPath, IWebApiControllerContext controllerContext, IWebApiActionMap actionMap);
    private static IEdmFunction GetFunction(OperationSegment segment);
}
public interface Microsoft.AspNet.OData.Routing.Conventions.IODataRoutingConvention {
    public abstract virtual string SelectController(ODataPath odataPath, HttpRequestMessage request);
    public abstract virtual string SelectAction(ODataPath odataPath, HttpControllerContext controllerContext, ILookup`2<string, HttpActionDescriptor> actionMap);
}
public class Microsoft.AspNet.OData.Routing.Conventions.MetadataRoutingConvention : object {
    public sealed virtual string SelectController(ODataPath odataPath, HttpRequestMessage request);
    public sealed virtual string SelectAction(ODataPath odataPath, HttpControllerContext controllerContext, ILookup`2<string, HttpActionDescriptor> actionMap);
    internal static SelectControllerResult SelectControllerImpl(ODataPath odataPath, IWebApiRequestMessage request);
    internal static string SelectActionImpl(ODataPath odataPath, IWebApiControllerContext controllerContext, IWebApiActionMap actionMap);
}
public class Microsoft.AspNet.OData.Routing.Conventions.NavigationRoutingConvention : NavigationSourceRoutingConvention {
    public virtual string SelectAction(ODataPath odataPath, HttpControllerContext controllerContext, ILookup`2<string, HttpActionDescriptor> actionMap);
    internal static string SelectActionImpl(ODataPath odataPath, IWebApiControllerContext controllerContext, IWebApiActionMap actionMap);
    private static string GetActionMethodPrefix(ODataRequestMethod method);
}
public abstract class Microsoft.AspNet.OData.Routing.Conventions.NavigationSourceRoutingConvention : object {
    public virtual string SelectController(ODataPath odataPath, HttpRequestMessage request);
    public abstract virtual string SelectAction(ODataPath odataPath, HttpControllerContext controllerContext, ILookup`2<string, HttpActionDescriptor> actionMap);
    internal static void ValidateSelectActionParameters(ODataPath odataPath, HttpControllerContext controllerContext, ILookup`2<string, HttpActionDescriptor> actionMap);
    internal static SelectControllerResult GetControllerResult(HttpControllerContext controllerContext);
    internal static SelectControllerResult SelectControllerImpl(ODataPath odataPath);
}
public static class Microsoft.AspNet.OData.Routing.Conventions.ODataRoutingConventions : object {
    public static IList`1<IODataRoutingConvention> CreateDefaultWithAttributeRouting(string routeName, HttpConfiguration configuration);
    public static IList`1<IODataRoutingConvention> CreateDefault();
}
public class Microsoft.AspNet.OData.Routing.Conventions.OperationImportRoutingConvention : NavigationSourceRoutingConvention {
    public virtual string SelectAction(ODataPath odataPath, HttpControllerContext controllerContext, ILookup`2<string, HttpActionDescriptor> actionMap);
    internal static string SelectActionImpl(ODataPath odataPath, IWebApiControllerContext controllerContext, IWebApiActionMap actionMap);
    private static string SelectAction(OperationImportSegment operationImportSegment, IWebApiActionMap actionMap);
}
public class Microsoft.AspNet.OData.Routing.Conventions.PropertyRoutingConvention : NavigationSourceRoutingConvention {
    public virtual string SelectAction(ODataPath odataPath, HttpControllerContext controllerContext, ILookup`2<string, HttpActionDescriptor> actionMap);
    internal static string SelectActionImpl(ODataPath odataPath, IWebApiControllerContext controllerContext, IWebApiActionMap actionMap);
    private static IEdmProperty GetProperty(ODataPath odataPath, ODataRequestMethod method, String& prefix, TypeSegment& cast);
}
public class Microsoft.AspNet.OData.Routing.Conventions.RefRoutingConvention : NavigationSourceRoutingConvention {
    private static string DeleteRefActionNamePrefix;
    private static string CreateRefActionNamePrefix;
    private static string GetRefActionNamePrefix;
    public virtual string SelectAction(ODataPath odataPath, HttpControllerContext controllerContext, ILookup`2<string, HttpActionDescriptor> actionMap);
    internal static string SelectActionImpl(ODataPath odataPath, IWebApiControllerContext controllerContext, IWebApiActionMap actionMap);
    private static string FindRefActionName(IWebApiActionMap actionMap, IEdmNavigationProperty navigationProperty, IEdmEntityType declaringType, ODataRequestMethod method);
    private static bool IsSupportedRequestMethod(ODataRequestMethod method);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.OData.Routing.Conventions.RequestMethodExtensions : object {
    [ExtensionAttribute]
internal static ODataRequestMethod GetRequestMethodOrPreflightMethod(IWebApiRequestMessage request);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.OData.Routing.Conventions.RoutingConventionHelpers : object {
    [ExtensionAttribute]
public static string SelectAction(IEdmOperation operation, IWebApiActionMap actionMap, bool isCollection);
    public static bool TryMatch(IDictionary`2<string, string> templateParameters, IDictionary`2<string, object> parameters, IDictionary`2<string, object> matches);
    [ExtensionAttribute]
public static bool TryMatch(KeySegment keySegment, IDictionary`2<string, string> mapping, IDictionary`2<string, object> values);
    [ExtensionAttribute]
public static void AddKeyValueToRouteData(IWebApiControllerContext controllerContext, KeySegment segment, string keyName);
    private static void AddKeyValues(string name, object value, IEdmTypeReference edmTypeReference, IDictionary`2<string, object> routeValues, IDictionary`2<string, object> odataValues);
    [ExtensionAttribute]
public static void AddFunctionParameterToRouteData(IWebApiControllerContext controllerContext, OperationImportSegment importSegment);
    [ExtensionAttribute]
public static void AddFunctionParameterToRouteData(IWebApiControllerContext controllerContext, OperationSegment functionSegment);
    public static void AddFunctionParameters(IEdmFunction function, string paramName, object paramValue, IDictionary`2<string, object> routeData, IDictionary`2<string, object> values, IDictionary`2<string, string> paramMapping);
    [ExtensionAttribute]
public static void AddNavigationPropertyToRouteData(IWebApiControllerContext controllerContext, NavigationPropertyLinkSegment navigationLinkSegment);
    public static void IncrementKeyCount(IDictionary`2<string, object> routingConventionsStore);
    public static IDictionary`2<string, string> BuildParameterMappings(IEnumerable`1<OperationSegmentParameter> parameters, string segment);
    public static bool IsRouteParameter(string parameterName);
}
public class Microsoft.AspNet.OData.Routing.Conventions.SelectControllerResult : object {
    [CompilerGeneratedAttribute]
private string <ControllerName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Values>k__BackingField;
    public string ControllerName { get; private set; }
    public IDictionary`2<string, object> Values { get; private set; }
    public SelectControllerResult(string controllerName, IDictionary`2<string, object> values);
    [CompilerGeneratedAttribute]
public string get_ControllerName();
    [CompilerGeneratedAttribute]
private void set_ControllerName(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(IDictionary`2<string, object> value);
}
public class Microsoft.AspNet.OData.Routing.Conventions.SingletonRoutingConvention : NavigationSourceRoutingConvention {
    public virtual string SelectAction(ODataPath odataPath, HttpControllerContext controllerContext, ILookup`2<string, HttpActionDescriptor> actionMap);
    internal static string SelectActionImpl(ODataPath odataPath, IWebApiControllerContext controllerContext, IWebApiActionMap actionMap);
    private static string GetActionNamePrefix(ODataRequestMethod method);
}
public class Microsoft.AspNet.OData.Routing.Conventions.UnmappedRequestRoutingConvention : NavigationSourceRoutingConvention {
    private static string UnmappedRequestActionName;
    public virtual string SelectAction(ODataPath odataPath, HttpControllerContext controllerContext, ILookup`2<string, HttpActionDescriptor> actionMap);
    internal static string SelectActionImpl(IWebApiActionMap actionMap);
}
public class Microsoft.AspNet.OData.Routing.DefaultODataPathHandler : object {
    [CompilerGeneratedAttribute]
private ODataUrlKeyDelimiter <UrlKeyDelimiter>k__BackingField;
    public ODataUrlKeyDelimiter UrlKeyDelimiter { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ODataUrlKeyDelimiter get_UrlKeyDelimiter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UrlKeyDelimiter(ODataUrlKeyDelimiter value);
    public virtual ODataPath Parse(string serviceRoot, string odataPath, IServiceProvider requestContainer);
    public virtual ODataPathTemplate ParseTemplate(string odataPathTemplate, IServiceProvider requestContainer);
    public virtual string Link(ODataPath path);
    private ODataPath Parse(string serviceRoot, string odataPath, IServiceProvider requestContainer, bool template);
    private static void AppendIdForRef(IList`1<ODataPathSegment> segments, KeySegment id);
    private static ODataPathTemplate Templatify(ODataPath path, string pathTemplate);
}
public class Microsoft.AspNet.OData.Routing.DefaultODataPathValidator : PathSegmentHandler {
    private IEdmModel _edmModel;
    public DefaultODataPathValidator(IEdmModel model);
    public virtual void Handle(EntitySetSegment segment);
    public virtual void Handle(KeySegment segment);
    public virtual void Handle(NavigationPropertyLinkSegment segment);
    public virtual void Handle(NavigationPropertySegment segment);
    public virtual void Handle(DynamicPathSegment segment);
    public virtual void Handle(OperationImportSegment segment);
    public virtual void Handle(OperationSegment segment);
    public virtual void Handle(PathTemplateSegment segment);
    public virtual void Handle(PropertySegment segment);
    public virtual void Handle(SingletonSegment segment);
    public virtual void Handle(TypeSegment segment);
    public virtual void Handle(ValueSegment segment);
    public virtual void Handle(CountSegment segment);
    public virtual void Handle(BatchSegment segment);
    public virtual void Handle(MetadataSegment segment);
    public virtual void Handle(UnresolvedPathSegment segment);
}
public interface Microsoft.AspNet.OData.Routing.IODataPathHandler {
    public ODataUrlKeyDelimiter UrlKeyDelimiter { get; public set; }
    public abstract virtual ODataPath Parse(string serviceRoot, string odataPath, IServiceProvider requestContainer);
    public abstract virtual string Link(ODataPath path);
    public abstract virtual ODataUrlKeyDelimiter get_UrlKeyDelimiter();
    public abstract virtual void set_UrlKeyDelimiter(ODataUrlKeyDelimiter value);
}
public interface Microsoft.AspNet.OData.Routing.IODataPathTemplateHandler {
    public abstract virtual ODataPathTemplate ParseTemplate(string odataPathTemplate, IServiceProvider requestContainer);
}
internal static class Microsoft.AspNet.OData.Routing.KeyValueParser : object {
    private static Regex _stringLiteralRegex;
    private static KeyValueParser();
    public static Dictionary`2<string, string> ParseKeys(string segment);
    private static void CheckSingleQuote(string value, string segment);
}
public class Microsoft.AspNet.OData.Routing.ODataActionSelector : object {
    private static string MessageDetailKey;
    private IHttpActionSelector _innerSelector;
    public ODataActionSelector(IHttpActionSelector innerSelector);
    public sealed virtual ILookup`2<string, HttpActionDescriptor> GetActionMapping(HttpControllerDescriptor controllerDescriptor);
    public sealed virtual HttpActionDescriptor SelectAction(HttpControllerContext controllerContext);
    private static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, string message, string messageDetail);
    private static bool ActionParametersMatchRequest(HttpActionDescriptor action, HttpControllerContext context);
}
internal class Microsoft.AspNet.OData.Routing.ODataOptionalParameter : object {
    private List`1<IEdmOptionalParameter> _optionalParameters;
    public IReadOnlyList`1<IEdmOptionalParameter> OptionalParameters { get; }
    public IReadOnlyList`1<IEdmOptionalParameter> get_OptionalParameters();
    public void Add(IEdmOptionalParameter parameter);
}
[ExtensionAttribute]
public static class Microsoft.AspNet.OData.Routing.ODataParameterHelper : object {
    [ExtensionAttribute]
public static bool TryGetParameterValue(OperationSegment segment, string parameterName, Object& parameterValue);
    [ExtensionAttribute]
public static object GetParameterValue(OperationSegment segment, string parameterName);
    [ExtensionAttribute]
public static bool TryGetParameterValue(OperationImportSegment segment, string parameterName, Object& parameterValue);
    [ExtensionAttribute]
public static object GetParameterValue(OperationImportSegment segment, string parameterName);
    internal static object TranslateNode(object value);
}
internal class Microsoft.AspNet.OData.Routing.ODataParameterValue : object {
    public static string ParameterValuePrefix;
    [CompilerGeneratedAttribute]
private IEdmTypeReference <EdmType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public IEdmTypeReference EdmType { get; private set; }
    public object Value { get; private set; }
    public ODataParameterValue(object paramValue, IEdmTypeReference paramType);
    [CompilerGeneratedAttribute]
public IEdmTypeReference get_EdmType();
    [CompilerGeneratedAttribute]
private void set_EdmType(IEdmTypeReference value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(object value);
}
[ODataPathParameterBindingAttribute]
public class Microsoft.AspNet.OData.Routing.ODataPath : object {
    private ReadOnlyCollection`1<ODataPathSegment> _segments;
    private IEdmType _edmType;
    private IEdmNavigationSource _navigationSource;
    private string _pathTemplate;
    private string _pathLiteral;
    [CompilerGeneratedAttribute]
private ODataPath <Path>k__BackingField;
    public IEdmType EdmType { get; }
    public IEdmNavigationSource NavigationSource { get; }
    public ReadOnlyCollection`1<ODataPathSegment> Segments { get; }
    public string PathTemplate { get; }
    public ODataPath Path { get; internal set; }
    internal IList`1<ODataPathSegment> SegmentList { get; }
    public ODataPath(ODataPathSegment[] segments);
    public ODataPath(IEnumerable`1<ODataPathSegment> segments);
    public IEdmType get_EdmType();
    public IEdmNavigationSource get_NavigationSource();
    public ReadOnlyCollection`1<ODataPathSegment> get_Segments();
    public virtual string get_PathTemplate();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public ODataPath get_Path();
    [CompilerGeneratedAttribute]
internal void set_Path(ODataPath value);
    internal IList`1<ODataPathSegment> get_SegmentList();
}
[AttributeUsageAttribute("2052")]
public class Microsoft.AspNet.OData.Routing.ODataPathParameterBindingAttribute : ParameterBindingAttribute {
    public virtual HttpParameterBinding GetBinding(HttpParameterDescriptor parameter);
}
public class Microsoft.AspNet.OData.Routing.ODataPathRouteConstraint : object {
    private static string _escapedSlash;
    [CompilerGeneratedAttribute]
private string <RouteName>k__BackingField;
    public string RouteName { get; private set; }
    public ODataPathRouteConstraint(string routeName);
    private static ODataPathRouteConstraint();
    public virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
    protected virtual string SelectControllerName(ODataPath path, HttpRequestMessage request);
    [CompilerGeneratedAttribute]
public string get_RouteName();
    [CompilerGeneratedAttribute]
private void set_RouteName(string value);
    internal static ODataPath GetODataPath(string oDataPathString, string uriPathString, string queryString, Func`1<IServiceProvider> requestContainerFactory);
    private static string RemoveODataPath(string uriString, string oDataPathString);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.OData.Routing.ODataPathSegmentExtensions : object {
    [ExtensionAttribute]
public static bool IsStreamPropertyPath(ODataPath path);
    [ExtensionAttribute]
public static string TranslatePathTemplateSegment(PathTemplateSegment pathTemplatesegment, String& value);
    [ExtensionAttribute]
public static string ToUriLiteral(MetadataSegment segment);
    [ExtensionAttribute]
public static string ToUriLiteral(ValueSegment segment);
    [ExtensionAttribute]
public static string ToUriLiteral(BatchSegment segment);
    [ExtensionAttribute]
public static string ToUriLiteral(CountSegment segment);
    [ExtensionAttribute]
public static string ToUriLiteral(TypeSegment segment);
    [ExtensionAttribute]
public static string ToUriLiteral(SingletonSegment segment);
    [ExtensionAttribute]
public static string ToUriLiteral(PropertySegment segment);
    [ExtensionAttribute]
public static string ToUriLiteral(PathTemplateSegment segment);
    [ExtensionAttribute]
public static string ToUriLiteral(DynamicPathSegment segment);
    [ExtensionAttribute]
public static string ToUriLiteral(NavigationPropertySegment segment);
    [ExtensionAttribute]
public static string ToUriLiteral(NavigationPropertyLinkSegment segment);
    [ExtensionAttribute]
public static string ToUriLiteral(KeySegment segment);
    [ExtensionAttribute]
public static string ToUriLiteral(EntitySetSegment segment);
    [ExtensionAttribute]
public static string ToUriLiteral(OperationSegment segment);
    [ExtensionAttribute]
public static string ToUriLiteral(OperationImportSegment segment);
    [ExtensionAttribute]
public static string ToUriLiteral(UnresolvedPathSegment segment);
    private static string ConvertKeysToUriLiteral(IEnumerable`1<KeyValuePair`2<string, object>> keys, IEdmType edmType);
    private static string TranslateKeySegmentValue(object value);
    private static string TranslateNode(object node);
}
public class Microsoft.AspNet.OData.Routing.ODataPathSegmentHandler : PathSegmentHandler {
    private IList`1<string> _pathTemplate;
    private IList`1<string> _pathUriLiteral;
    private IEdmNavigationSource _navigationSource;
    public IEdmNavigationSource NavigationSource { get; }
    public string PathTemplate { get; }
    public string PathLiteral { get; }
    public IEdmNavigationSource get_NavigationSource();
    public string get_PathTemplate();
    public string get_PathLiteral();
    public virtual void Handle(EntitySetSegment segment);
    public virtual void Handle(KeySegment segment);
    public virtual void Handle(NavigationPropertyLinkSegment segment);
    public virtual void Handle(NavigationPropertySegment segment);
    public virtual void Handle(DynamicPathSegment segment);
    public virtual void Handle(OperationImportSegment segment);
    public virtual void Handle(OperationSegment segment);
    public virtual void Handle(PathTemplateSegment segment);
    public virtual void Handle(PropertySegment segment);
    public virtual void Handle(SingletonSegment segment);
    public virtual void Handle(TypeSegment segment);
    public virtual void Handle(ValueSegment segment);
    public virtual void Handle(CountSegment segment);
    public virtual void Handle(BatchSegment segment);
    public virtual void Handle(MetadataSegment segment);
    public virtual void Handle(ODataPathSegment segment);
    public virtual void Handle(UnresolvedPathSegment segment);
    private static string ConvertKeysToString(IEnumerable`1<KeyValuePair`2<string, object>> keys, IEdmType edmType);
    private static string TranslateKeySegmentValue(object value);
    private static string TranslateNode(object node, string functionName, string parameterName);
}
public class Microsoft.AspNet.OData.Routing.ODataPathSegmentTranslator : PathSegmentTranslator`1<ODataPathSegment> {
    private IDictionary`2<string, SingleValueNode> _parameterAliasNodes;
    private IEdmModel _model;
    public ODataPathSegmentTranslator(IEdmModel model, IDictionary`2<string, SingleValueNode> parameterAliasNodes);
    public static IEnumerable`1<ODataPathSegment> Translate(IEdmModel model, ODataPath path, IDictionary`2<string, SingleValueNode> parameterAliasNodes);
    public virtual ODataPathSegment Translate(TypeSegment segment);
    public virtual ODataPathSegment Translate(EntitySetSegment segment);
    public virtual ODataPathSegment Translate(SingletonSegment segment);
    public virtual ODataPathSegment Translate(PropertySegment segment);
    public virtual ODataPathSegment Translate(DynamicPathSegment segment);
    public virtual ODataPathSegment Translate(CountSegment segment);
    public virtual ODataPathSegment Translate(NavigationPropertySegment segment);
    public virtual ODataPathSegment Translate(NavigationPropertyLinkSegment segment);
    public virtual ODataPathSegment Translate(ValueSegment segment);
    public virtual ODataPathSegment Translate(BatchSegment segment);
    public virtual ODataPathSegment Translate(MetadataSegment segment);
    public virtual ODataPathSegment Translate(PathTemplateSegment segment);
    public virtual ODataPathSegment Translate(KeySegment segment);
    public virtual ODataPathSegment Translate(OperationImportSegment segment);
    public virtual ODataPathSegment Translate(OperationSegment segment);
    private object TranslateNode(object node);
    private object ConvertNode(object node, IEdmTypeReference typeReference);
    internal static SingleValueNode TranslateParameterAlias(SingleValueNode node, IDictionary`2<string, SingleValueNode> parameterAliasNodes);
    [CompilerGeneratedAttribute]
private OperationSegmentParameter <Translate>b__17_1(OperationSegmentParameter e);
    [CompilerGeneratedAttribute]
private OperationSegmentParameter <Translate>b__18_1(OperationSegmentParameter e);
}
public class Microsoft.AspNet.OData.Routing.ODataRoute : HttpRoute {
    [CompilerGeneratedAttribute]
private IHttpRouteConstraint <RouteConstraint>k__BackingField;
    private static string _escapedHashMark;
    private static string _escapedQuestionMark;
    [CompilerGeneratedAttribute]
private string <RoutePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataPathRouteConstraint <PathRouteConstraint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanGenerateDirectLink>k__BackingField;
    public IHttpRouteConstraint RouteConstraint { get; private set; }
    public string RoutePrefix { get; private set; }
    public ODataPathRouteConstraint PathRouteConstraint { get; private set; }
    internal bool CanGenerateDirectLink { get; private set; }
    public ODataRoute(string routePrefix, ODataPathRouteConstraint pathConstraint);
    public ODataRoute(string routePrefix, IHttpRouteConstraint routeConstraint);
    public ODataRoute(string routePrefix, ODataPathRouteConstraint pathConstraint, HttpRouteValueDictionary defaults, HttpRouteValueDictionary constraints, HttpRouteValueDictionary dataTokens, HttpMessageHandler handler);
    public ODataRoute(string routePrefix, IHttpRouteConstraint routeConstraint, HttpRouteValueDictionary defaults, HttpRouteValueDictionary constraints, HttpRouteValueDictionary dataTokens, HttpMessageHandler handler);
    private static ODataRoute();
    [CompilerGeneratedAttribute]
public IHttpRouteConstraint get_RouteConstraint();
    [CompilerGeneratedAttribute]
private void set_RouteConstraint(IHttpRouteConstraint value);
    public virtual IHttpVirtualPathData GetVirtualPath(HttpRequestMessage request, IDictionary`2<string, object> values);
    [ObsoleteAttribute("The version constraint is relaxed by default")]
public ODataRoute HasRelaxedODataVersionConstraint();
    private ODataRoute SetODataVersionConstraint(bool isRelaxedMatch);
    internal HttpVirtualPathData GenerateLinkDirectly(string odataPath);
    private void Initialize(string routePrefix, ODataPathRouteConstraint pathRouteConstraint);
    [CompilerGeneratedAttribute]
public string get_RoutePrefix();
    [CompilerGeneratedAttribute]
private void set_RoutePrefix(string value);
    [CompilerGeneratedAttribute]
public ODataPathRouteConstraint get_PathRouteConstraint();
    [CompilerGeneratedAttribute]
private void set_PathRouteConstraint(ODataPathRouteConstraint value);
    [CompilerGeneratedAttribute]
internal bool get_CanGenerateDirectLink();
    [CompilerGeneratedAttribute]
private void set_CanGenerateDirectLink(bool value);
    private static string GetRouteTemplate(string prefix);
    private static string CombinePathSegments(string routePrefix, string odataPath);
    private static string UriEncode(string str);
}
[AttributeUsageAttribute("64")]
public class Microsoft.AspNet.OData.Routing.ODataRouteAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PathTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RouteName>k__BackingField;
    public string PathTemplate { get; private set; }
    public string RouteName { get; public set; }
    public ODataRouteAttribute(string pathTemplate);
    [CompilerGeneratedAttribute]
public string get_PathTemplate();
    [CompilerGeneratedAttribute]
private void set_PathTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_RouteName();
    [CompilerGeneratedAttribute]
public void set_RouteName(string value);
}
public static class Microsoft.AspNet.OData.Routing.ODataRouteConstants : object {
    public static string ODataPath;
    public static string ODataPathTemplate;
    public static string ConstraintName;
    public static string VersionConstraintName;
    public static string Action;
    public static string MethodInfo;
    public static string Controller;
    public static string Key;
    public static string RelatedKey;
    public static string NavigationProperty;
    public static string Batch;
    public static string DynamicProperty;
    public static string OptionalParameters;
    public static string KeyCount;
    public static string QuerySegment;
    private static ODataRouteConstants();
}
[AttributeUsageAttribute("4")]
public class Microsoft.AspNet.OData.Routing.ODataRoutePrefixAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public string Prefix { get; private set; }
    public ODataRoutePrefixAttribute(string prefix);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
private void set_Prefix(string value);
}
public static class Microsoft.AspNet.OData.Routing.ODataSegmentKinds : object {
    public static string ServiceBase;
    public static string Batch;
    public static string Ref;
    public static string Metadata;
    public static string Value;
    public static string Count;
    public static string Action;
    public static string Function;
    public static string UnboundAction;
    public static string UnboundFunction;
    public static string Cast;
    public static string EntitySet;
    public static string Singleton;
    public static string Key;
    public static string Navigation;
    public static string PathTemplate;
    public static string Property;
    public static string DynamicProperty;
    public static string Unresolved;
}
internal class Microsoft.AspNet.OData.Routing.ODataValueProviderFactory : ValueProviderFactory {
    public virtual IValueProvider GetValueProvider(HttpActionContext actionContext);
}
public class Microsoft.AspNet.OData.Routing.ODataVersionConstraint : object {
    internal static string ODataServiceVersionHeader;
    internal static string ODataMaxServiceVersionHeader;
    internal static string ODataMinServiceVersionHeader;
    internal static ODataVersion DefaultODataVersion;
    private static string PreviousODataVersionHeaderName;
    private static string PreviousODataMaxVersionHeaderName;
    private static string PreviousODataMinVersionHeaderName;
    [CompilerGeneratedAttribute]
private ODataVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRelaxedMatch>k__BackingField;
    public ODataVersion Version { get; private set; }
    public bool IsRelaxedMatch { get; public set; }
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
    [CompilerGeneratedAttribute]
public ODataVersion get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(ODataVersion value);
    [CompilerGeneratedAttribute]
public bool get_IsRelaxedMatch();
    [CompilerGeneratedAttribute]
public void set_IsRelaxedMatch(bool value);
    private bool IsVersionMatch(IDictionary`2<string, IEnumerable`1<string>> headers, Nullable`1<ODataVersion> serviceVersion, Nullable`1<ODataVersion> maxServiceVersion);
    private bool ValidateVersionHeaders(IDictionary`2<string, IEnumerable`1<string>> headers);
    private Nullable`1<ODataVersion> GetVersion(IDictionary`2<string, IEnumerable`1<string>> headers, Nullable`1<ODataVersion> serviceVersion, Nullable`1<ODataVersion> maxServiceVersion);
    private static int GetHeaderCount(string headerName, IDictionary`2<string, IEnumerable`1<string>> headers);
}
public class Microsoft.AspNet.OData.Routing.Template.DynamicSegmentTemplate : ODataPathSegmentTemplate {
    [CompilerGeneratedAttribute]
private DynamicPathSegment <Segment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TreatPropertyNameAsParameterName>k__BackingField;
    public DynamicPathSegment Segment { get; private set; }
    private string PropertyName { get; private set; }
    private bool TreatPropertyNameAsParameterName { get; private set; }
    public DynamicSegmentTemplate(DynamicPathSegment segment);
    [CompilerGeneratedAttribute]
public DynamicPathSegment get_Segment();
    [CompilerGeneratedAttribute]
private void set_Segment(DynamicPathSegment value);
    [CompilerGeneratedAttribute]
private string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
private bool get_TreatPropertyNameAsParameterName();
    [CompilerGeneratedAttribute]
private void set_TreatPropertyNameAsParameterName(bool value);
    public virtual bool TryMatch(ODataPathSegment pathSegment, IDictionary`2<string, object> values);
}
public class Microsoft.AspNet.OData.Routing.Template.EntitySetSegmentTemplate : ODataPathSegmentTemplate {
    [CompilerGeneratedAttribute]
private EntitySetSegment <Segment>k__BackingField;
    public EntitySetSegment Segment { get; private set; }
    public EntitySetSegmentTemplate(EntitySetSegment segment);
    [CompilerGeneratedAttribute]
public EntitySetSegment get_Segment();
    [CompilerGeneratedAttribute]
private void set_Segment(EntitySetSegment value);
    public virtual bool TryMatch(ODataPathSegment pathSegment, IDictionary`2<string, object> values);
}
public class Microsoft.AspNet.OData.Routing.Template.KeySegmentTemplate : ODataPathSegmentTemplate {
    [CompilerGeneratedAttribute]
private KeySegment <Segment>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ParameterMappings>k__BackingField;
    public KeySegment Segment { get; public set; }
    public IDictionary`2<string, string> ParameterMappings { get; private set; }
    public KeySegmentTemplate(KeySegment segment);
    [CompilerGeneratedAttribute]
public KeySegment get_Segment();
    [CompilerGeneratedAttribute]
public void set_Segment(KeySegment value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ParameterMappings();
    [CompilerGeneratedAttribute]
private void set_ParameterMappings(IDictionary`2<string, string> value);
    public virtual bool TryMatch(ODataPathSegment pathSegment, IDictionary`2<string, object> values);
    internal static IDictionary`2<string, string> BuildKeyMappings(IEnumerable`1<KeyValuePair`2<string, object>> keys);
}
public class Microsoft.AspNet.OData.Routing.Template.NavigationPropertyLinkSegmentTemplate : ODataPathSegmentTemplate {
    [CompilerGeneratedAttribute]
private NavigationPropertyLinkSegment <Segment>k__BackingField;
    public NavigationPropertyLinkSegment Segment { get; private set; }
    public NavigationPropertyLinkSegmentTemplate(NavigationPropertyLinkSegment segment);
    [CompilerGeneratedAttribute]
public NavigationPropertyLinkSegment get_Segment();
    [CompilerGeneratedAttribute]
private void set_Segment(NavigationPropertyLinkSegment value);
    public virtual bool TryMatch(ODataPathSegment pathSegment, IDictionary`2<string, object> values);
}
public class Microsoft.AspNet.OData.Routing.Template.NavigationPropertySegmentTemplate : ODataPathSegmentTemplate {
    [CompilerGeneratedAttribute]
private NavigationPropertySegment <Segment>k__BackingField;
    public NavigationPropertySegment Segment { get; private set; }
    public NavigationPropertySegmentTemplate(NavigationPropertySegment segment);
    [CompilerGeneratedAttribute]
public NavigationPropertySegment get_Segment();
    [CompilerGeneratedAttribute]
private void set_Segment(NavigationPropertySegment value);
    public virtual bool TryMatch(ODataPathSegment pathSegment, IDictionary`2<string, object> values);
}
public abstract class Microsoft.AspNet.OData.Routing.Template.ODataPathSegmentTemplate : object {
    public virtual bool TryMatch(ODataPathSegment pathSegment, IDictionary`2<string, object> values);
}
public class Microsoft.AspNet.OData.Routing.Template.ODataPathSegmentTemplate`1 : ODataPathSegmentTemplate {
    public virtual bool TryMatch(ODataPathSegment pathSegment, IDictionary`2<string, object> values);
}
public class Microsoft.AspNet.OData.Routing.Template.ODataPathSegmentTemplateTranslator : PathSegmentTranslator`1<ODataPathSegmentTemplate> {
    public virtual ODataPathSegmentTemplate Translate(TypeSegment segment);
    public virtual ODataPathSegmentTemplate Translate(NavigationPropertySegment segment);
    public virtual ODataPathSegmentTemplate Translate(EntitySetSegment segment);
    public virtual ODataPathSegmentTemplate Translate(SingletonSegment segment);
    public virtual ODataPathSegmentTemplate Translate(KeySegment segment);
    public virtual ODataPathSegmentTemplate Translate(PropertySegment segment);
    public virtual ODataPathSegmentTemplate Translate(PathTemplateSegment segment);
    public virtual ODataPathSegmentTemplate Translate(OperationImportSegment segment);
    public virtual ODataPathSegmentTemplate Translate(OperationSegment segment);
    public virtual ODataPathSegmentTemplate Translate(DynamicPathSegment segment);
    public virtual ODataPathSegmentTemplate Translate(NavigationPropertyLinkSegment segment);
    public virtual ODataPathSegmentTemplate Translate(CountSegment segment);
    public virtual ODataPathSegmentTemplate Translate(ValueSegment segment);
    public virtual ODataPathSegmentTemplate Translate(BatchSegment segment);
    public virtual ODataPathSegmentTemplate Translate(MetadataSegment segment);
    public virtual ODataPathSegmentTemplate Translate(BatchReferenceSegment segment);
}
public class Microsoft.AspNet.OData.Routing.Template.ODataPathTemplate : object {
    private ReadOnlyCollection`1<ODataPathSegmentTemplate> _segments;
    public ReadOnlyCollection`1<ODataPathSegmentTemplate> Segments { get; }
    public ODataPathTemplate(ODataPathSegmentTemplate[] segments);
    public ODataPathTemplate(IEnumerable`1<ODataPathSegmentTemplate> segments);
    public ODataPathTemplate(IList`1<ODataPathSegmentTemplate> segments);
    public ReadOnlyCollection`1<ODataPathSegmentTemplate> get_Segments();
    public bool TryMatch(ODataPath path, IDictionary`2<string, object> values);
}
public class Microsoft.AspNet.OData.Routing.Template.OperationImportSegmentTemplate : ODataPathSegmentTemplate {
    [CompilerGeneratedAttribute]
private OperationImportSegment <Segment>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ParameterMappings>k__BackingField;
    public OperationImportSegment Segment { get; private set; }
    public IDictionary`2<string, string> ParameterMappings { get; private set; }
    public OperationImportSegmentTemplate(OperationImportSegment segment);
    [CompilerGeneratedAttribute]
public OperationImportSegment get_Segment();
    [CompilerGeneratedAttribute]
private void set_Segment(OperationImportSegment value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ParameterMappings();
    [CompilerGeneratedAttribute]
private void set_ParameterMappings(IDictionary`2<string, string> value);
    public virtual bool TryMatch(ODataPathSegment pathSegment, IDictionary`2<string, object> values);
}
public class Microsoft.AspNet.OData.Routing.Template.OperationSegmentTemplate : ODataPathSegmentTemplate {
    [CompilerGeneratedAttribute]
private OperationSegment <Segment>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ParameterMappings>k__BackingField;
    public OperationSegment Segment { get; private set; }
    public IDictionary`2<string, string> ParameterMappings { get; private set; }
    public OperationSegmentTemplate(OperationSegment segment);
    [CompilerGeneratedAttribute]
public OperationSegment get_Segment();
    [CompilerGeneratedAttribute]
private void set_Segment(OperationSegment value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ParameterMappings();
    [CompilerGeneratedAttribute]
private void set_ParameterMappings(IDictionary`2<string, string> value);
    public virtual bool TryMatch(ODataPathSegment pathSegment, IDictionary`2<string, object> values);
}
public class Microsoft.AspNet.OData.Routing.Template.PathTemplateSegmentTemplate : ODataPathSegmentTemplate {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SegmentName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TreatPropertyNameAsParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private PathTemplateSegment <TemplateSegment>k__BackingField;
    public string PropertyName { get; private set; }
    public string SegmentName { get; private set; }
    private bool TreatPropertyNameAsParameterName { get; private set; }
    public PathTemplateSegment TemplateSegment { get; private set; }
    public PathTemplateSegmentTemplate(PathTemplateSegment segment);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_SegmentName();
    [CompilerGeneratedAttribute]
private void set_SegmentName(string value);
    [CompilerGeneratedAttribute]
private bool get_TreatPropertyNameAsParameterName();
    [CompilerGeneratedAttribute]
private void set_TreatPropertyNameAsParameterName(bool value);
    [CompilerGeneratedAttribute]
public PathTemplateSegment get_TemplateSegment();
    [CompilerGeneratedAttribute]
private void set_TemplateSegment(PathTemplateSegment value);
    public virtual bool TryMatch(ODataPathSegment pathSegment, IDictionary`2<string, object> values);
}
public class Microsoft.AspNet.OData.Routing.Template.PropertySegmentTemplate : ODataPathSegmentTemplate {
    [CompilerGeneratedAttribute]
private PropertySegment <Segment>k__BackingField;
    public PropertySegment Segment { get; private set; }
    public PropertySegmentTemplate(PropertySegment segment);
    [CompilerGeneratedAttribute]
public PropertySegment get_Segment();
    [CompilerGeneratedAttribute]
private void set_Segment(PropertySegment value);
    public virtual bool TryMatch(ODataPathSegment pathSegment, IDictionary`2<string, object> values);
}
public class Microsoft.AspNet.OData.Routing.Template.SingletonSegmentTemplate : ODataPathSegmentTemplate {
    [CompilerGeneratedAttribute]
private SingletonSegment <Segment>k__BackingField;
    public SingletonSegment Segment { get; private set; }
    public SingletonSegmentTemplate(SingletonSegment segment);
    [CompilerGeneratedAttribute]
public SingletonSegment get_Segment();
    [CompilerGeneratedAttribute]
private void set_Segment(SingletonSegment value);
    public virtual bool TryMatch(ODataPathSegment pathSegment, IDictionary`2<string, object> values);
}
public class Microsoft.AspNet.OData.Routing.Template.TypeSegmentTemplate : ODataPathSegmentTemplate {
    [CompilerGeneratedAttribute]
private TypeSegment <Segment>k__BackingField;
    public TypeSegment Segment { get; private set; }
    public TypeSegmentTemplate(TypeSegment segment);
    [CompilerGeneratedAttribute]
public TypeSegment get_Segment();
    [CompilerGeneratedAttribute]
private void set_Segment(TypeSegment value);
    public virtual bool TryMatch(ODataPathSegment pathSegment, IDictionary`2<string, object> values);
}
public class Microsoft.AspNet.OData.Routing.UnresolvedPathSegment : ODataPathSegment {
    [CompilerGeneratedAttribute]
private string <SegmentValue>k__BackingField;
    public string SegmentKind { get; }
    public string SegmentValue { get; private set; }
    public IEdmType EdmType { get; }
    public UnresolvedPathSegment(string segmentValue);
    public virtual string get_SegmentKind();
    [CompilerGeneratedAttribute]
public string get_SegmentValue();
    [CompilerGeneratedAttribute]
private void set_SegmentValue(string value);
    public virtual string ToString();
    public virtual T TranslateWith(PathSegmentTranslator`1<T> translator);
    public virtual void HandleWith(PathSegmentHandler handler);
    public virtual IEdmType get_EdmType();
}
internal class Microsoft.AspNet.OData.TimeZoneInfoHelper : object {
    private static TimeZoneInfo _defaultTimeZoneInfo;
    public static TimeZoneInfo TimeZone { get; public set; }
    public static TimeZoneInfo get_TimeZone();
    public static void set_TimeZone(TimeZoneInfo value);
    public static DateTimeOffset ConvertToDateTimeOffset(DateTime dateTime);
}
internal static class Microsoft.AspNet.OData.TransientAnnotations : object {
    internal static HashSet`1<string> TransientAnnotationTerms;
    private static TransientAnnotations();
}
public abstract class Microsoft.AspNet.OData.TypedDelta : Delta {
    public Type StructuredType { get; }
    public Type ExpectedClrType { get; }
    public abstract virtual Type get_StructuredType();
    public abstract virtual Type get_ExpectedClrType();
    internal static bool IsDeltaOfT(Type type);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.OData.TypeHelper : object {
    public static MemberInfo AsMemberInfo(Type clrType);
    public static Type AsType(MemberInfo memberInfo);
    public static Assembly GetAssembly(Type clrType);
    public static Type GetBaseType(Type clrType);
    public static string GetQualifiedName(MemberInfo memberInfo);
    public static Type GetReflectedType(MemberInfo memberInfo);
    public static bool IsAbstract(Type clrType);
    public static bool IsClass(Type clrType);
    [ExtensionAttribute]
public static bool IsGenericType(Type clrType);
    [ExtensionAttribute]
public static bool IsGenericTypeDefinition(Type clrType);
    public static bool IsInterface(Type clrType);
    public static bool IsNullable(Type clrType);
    public static bool IsPublic(Type clrType);
    public static bool IsPrimitive(Type clrType);
    public static bool IsTypeAssignableFrom(Type clrType, Type fromType);
    public static bool IsValueType(Type clrType);
    public static bool IsVisible(Type clrType);
    public static Type ToNullable(Type clrType);
    public static Type GetInnerElementType(Type clrType);
    public static bool IsCollection(Type clrType);
    public static bool IsCollection(Type clrType, Type& elementType);
    public static Type GetUnderlyingTypeOrSelf(Type type);
    public static bool IsEnum(Type clrType);
    public static bool IsDateTime(Type clrType);
    public static bool IsTimeSpan(Type clrType);
    internal static bool IsIQueryable(Type type);
    internal static bool IsQueryPrimitiveType(Type type);
    internal static Type GetInnerMostElementType(Type type);
    internal static Type GetImplementedIEnumerableType(Type type);
    [IteratorStateMachineAttribute("Microsoft.AspNet.OData.TypeHelper/<GetLoadedTypes>d__29")]
internal static IEnumerable`1<Type> GetLoadedTypes(IWebApiAssembliesResolver assembliesResolver);
    internal static Type GetTaskInnerTypeOrSelf(Type type);
    internal static void ValidateAssignableFromForArgument(Type expectedType, Type type, string customTypeDescription);
    private static Type GetInnerGenericType(Type interfaceType);
    internal static PropertyInfo GetProperty(Type targetType, string propertyName);
    internal static bool HasDefaultConstructor(Type type);
}
public class Microsoft.AspNet.OData.UnqualifiedCallAndEnumPrefixFreeResolver : ODataUriResolver {
    private StringAsEnumResolver _stringAsEnum;
    private UnqualifiedODataUriResolver _unqualified;
    private bool _enableCaseInsensitive;
    public bool EnableCaseInsensitive { get; public set; }
    public virtual bool get_EnableCaseInsensitive();
    public virtual void set_EnableCaseInsensitive(bool value);
    public virtual IEnumerable`1<IEdmOperation> ResolveUnboundOperations(IEdmModel model, string identifier);
    public virtual IEnumerable`1<IEdmOperation> ResolveBoundOperations(IEdmModel model, string identifier, IEdmType bindingType);
    public virtual void PromoteBinaryOperandTypes(BinaryOperatorKind binaryOperatorKind, SingleValueNode& leftNode, SingleValueNode& rightNode, IEdmTypeReference& typeReference);
    public virtual IEnumerable`1<KeyValuePair`2<string, object>> ResolveKeys(IEdmEntityType type, IDictionary`2<string, string> namedValues, Func`3<IEdmTypeReference, string, object> convertFunc);
    public virtual IEnumerable`1<KeyValuePair`2<string, object>> ResolveKeys(IEdmEntityType type, IList`1<string> positionalValues, Func`3<IEdmTypeReference, string, object> convertFunc);
    public virtual IDictionary`2<IEdmOperationParameter, SingleValueNode> ResolveOperationParameters(IEdmOperation operation, IDictionary`2<string, SingleValueNode> input);
}
public class Org.OData.Core.V1.DataModificationExceptionType : ExceptionType {
    [CompilerGeneratedAttribute]
private DataModificationOperationKind <FailedOperation>k__BackingField;
    [CompilerGeneratedAttribute]
private short <ResponseCode>k__BackingField;
    public DataModificationOperationKind FailedOperation { get; }
    public short ResponseCode { get; public set; }
    public DataModificationExceptionType(DataModificationOperationKind failedOperation);
    [CompilerGeneratedAttribute]
public DataModificationOperationKind get_FailedOperation();
    [CompilerGeneratedAttribute]
public short get_ResponseCode();
    [CompilerGeneratedAttribute]
public void set_ResponseCode(short value);
}
public enum Org.OData.Core.V1.DataModificationOperationKind : Enum {
    public int value__;
    public static DataModificationOperationKind Insert;
    public static DataModificationOperationKind Update;
    public static DataModificationOperationKind Upsert;
    public static DataModificationOperationKind Delete;
    public static DataModificationOperationKind Invoke;
    public static DataModificationOperationKind Link;
    public static DataModificationOperationKind Unlink;
}
public abstract class Org.OData.Core.V1.ExceptionType : object {
    [CompilerGeneratedAttribute]
private MessageType <MessageType>k__BackingField;
    public MessageType MessageType { get; public set; }
    [CompilerGeneratedAttribute]
public MessageType get_MessageType();
    [CompilerGeneratedAttribute]
public void set_MessageType(MessageType value);
}
public class Org.OData.Core.V1.MessageType : object {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Details>k__BackingField;
    public string Code { get; public set; }
    public string Message { get; public set; }
    public string Severity { get; public set; }
    public string Target { get; public set; }
    public string Details { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Severity();
    [CompilerGeneratedAttribute]
public void set_Severity(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_Details();
    [CompilerGeneratedAttribute]
public void set_Details(string value);
}
