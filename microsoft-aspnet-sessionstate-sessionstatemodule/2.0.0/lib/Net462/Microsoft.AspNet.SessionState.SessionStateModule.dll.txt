internal static class Microsoft.AspNet.SessionState.AppSettings : object {
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _settingsInitialized;
    private static object _lock;
    public static int DefaultRequestQueueLimitPerSession;
    private static int _requestQueueLimitPerSession;
    private static bool _allowConcurrentRequestsPerSession;
    public static int RequestQueueLimitPerSession { get; }
    public static bool AllowConcurrentRequestsPerSession { get; }
    private static AppSettings();
    private static void LoadSettings(NameValueCollection appSettings);
    private static void EnsureSettingsLoaded();
    public static int get_RequestQueueLimitPerSession();
    public static bool get_AllowConcurrentRequestsPerSession();
}
public class Microsoft.AspNet.SessionState.GetItemResult : object {
    [CompilerGeneratedAttribute]
private SessionStateStoreData <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Locked>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <LockAge>k__BackingField;
    [CompilerGeneratedAttribute]
private object <LockId>k__BackingField;
    [CompilerGeneratedAttribute]
private SessionStateActions <Actions>k__BackingField;
    public SessionStateStoreData Item { get; private set; }
    public bool Locked { get; private set; }
    public TimeSpan LockAge { get; private set; }
    public object LockId { get; private set; }
    public SessionStateActions Actions { get; private set; }
    public GetItemResult(SessionStateStoreData item, bool locked, TimeSpan lockAge, object lockId, SessionStateActions actions);
    [CompilerGeneratedAttribute]
public SessionStateStoreData get_Item();
    [CompilerGeneratedAttribute]
private void set_Item(SessionStateStoreData value);
    [CompilerGeneratedAttribute]
public bool get_Locked();
    [CompilerGeneratedAttribute]
private void set_Locked(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_LockAge();
    [CompilerGeneratedAttribute]
private void set_LockAge(TimeSpan value);
    [CompilerGeneratedAttribute]
public object get_LockId();
    [CompilerGeneratedAttribute]
private void set_LockId(object value);
    [CompilerGeneratedAttribute]
public SessionStateActions get_Actions();
    [CompilerGeneratedAttribute]
private void set_Actions(SessionStateActions value);
}
public class Microsoft.AspNet.SessionState.InProcSessionState : object {
    private ISessionStateItemCollection _sessionItems;
    private HttpStaticObjectsCollection _staticObjects;
    private int _timeout;
    [CompilerGeneratedAttribute]
private bool <Locked>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LockDate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LockCookie>k__BackingField;
    public SpinLock SpinLock;
    public int Flags;
    public ISessionStateItemCollection SessionItems { get; }
    public HttpStaticObjectsCollection StaticObjects { get; }
    public int Timeout { get; }
    public bool Locked { get; public set; }
    public DateTime LockDate { get; public set; }
    public int LockCookie { get; public set; }
    public InProcSessionState(ISessionStateItemCollection sessionItems, HttpStaticObjectsCollection staticObjects, int timeout, bool locked, DateTime utcLockDate, int lockCookie, int flags);
    public ISessionStateItemCollection get_SessionItems();
    public HttpStaticObjectsCollection get_StaticObjects();
    public int get_Timeout();
    [CompilerGeneratedAttribute]
public bool get_Locked();
    [CompilerGeneratedAttribute]
public void set_Locked(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_LockDate();
    [CompilerGeneratedAttribute]
public void set_LockDate(DateTime value);
    [CompilerGeneratedAttribute]
public int get_LockCookie();
    [CompilerGeneratedAttribute]
public void set_LockCookie(int value);
    public void Copy(ISessionStateItemCollection sessionItems, HttpStaticObjectsCollection staticObjects, int timeout, bool locked, DateTime utcLockDate, int lockCookie, int flags);
}
public class Microsoft.AspNet.SessionState.InProcSessionStateStoreAsync : SessionStateStoreProviderAsyncBase {
    private static int NewLockCookie;
    private static MemoryCache s_store;
    private CacheEntryRemovedCallback _callback;
    private SessionStateItemExpireCallback _expireCallback;
    private static InProcSessionStateStoreAsync();
    public virtual void Initialize(string name, NameValueCollection config);
    public virtual SessionStateStoreData CreateNewStoreData(HttpContextBase context, int timeout);
    public virtual Task CreateUninitializedItemAsync(HttpContextBase context, string id, int timeout, CancellationToken cancellationToken);
    public virtual void Dispose();
    public virtual Task EndRequestAsync(HttpContextBase context);
    public virtual Task`1<GetItemResult> GetItemAsync(HttpContextBase context, string id, CancellationToken cancellationToken);
    public virtual Task`1<GetItemResult> GetItemExclusiveAsync(HttpContextBase context, string id, CancellationToken cancellationToken);
    public virtual void InitializeRequest(HttpContextBase context);
    public virtual Task ReleaseItemExclusiveAsync(HttpContextBase context, string id, object lockId, CancellationToken cancellationToken);
    public virtual Task RemoveItemAsync(HttpContextBase context, string id, object lockId, SessionStateStoreData item, CancellationToken cancellationToken);
    public virtual Task ResetItemTimeoutAsync(HttpContextBase context, string id, CancellationToken cancellationToken);
    public virtual Task SetAndReleaseItemExclusiveAsync(HttpContextBase context, string id, SessionStateStoreData item, object lockId, bool newItem, CancellationToken cancellationToken);
    public virtual bool SetItemExpireCallback(SessionStateItemExpireCallback expireCallback);
    private void OnCacheItemRemoved(CacheEntryRemovedArguments arguments);
    private Task`1<GetItemResult> DoGetAsync(HttpContextBase context, string id, bool exclusive);
    private SessionStateStoreData DoGet(HttpContextBase context, string id, bool exclusive, Boolean& locked, TimeSpan& lockAge, Object& lockId, SessionStateActions& actionFlags);
    private void InsertToCache(string key, InProcSessionState value);
    private SessionStateStoreData CreateLegitStoreData(HttpContextBase context, ISessionStateItemCollection sessionItems, HttpStaticObjectsCollection staticObjects, int timeout);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.AspNet.SessionState.Resources.SR : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Error_Occured_Reading_Config_Secion { get; }
    internal static string Invalid_provider_option { get; }
    internal static string Invalid_session_custom_provider { get; }
    internal static string Missing_session_custom_provider { get; }
    internal static string Not_Support_SessionState_Mode { get; }
    internal static string Null_value_for_SessionStateItemCollection { get; }
    internal static string Request_Queue_Limit_Per_Session_Exceeded { get; }
    internal static string Session_id_too_long { get; }
    internal static string Type_doesnt_inherit_from_type { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Error_Occured_Reading_Config_Secion();
    internal static string get_Invalid_provider_option();
    internal static string get_Invalid_session_custom_provider();
    internal static string get_Missing_session_custom_provider();
    internal static string get_Not_Support_SessionState_Mode();
    internal static string get_Null_value_for_SessionStateItemCollection();
    internal static string get_Request_Queue_Limit_Per_Session_Exceeded();
    internal static string get_Session_id_too_long();
    internal static string get_Type_doesnt_inherit_from_type();
}
[EventSourceAttribute]
internal class Microsoft.AspNet.SessionState.SessionEventSource : EventSource {
    [CompilerGeneratedAttribute]
private static SessionEventSource <Log>k__BackingField;
    public static SessionEventSource Log { get; }
    private static SessionEventSource();
    [CompilerGeneratedAttribute]
public static SessionEventSource get_Log();
    [NonEventAttribute]
public void SessionDataBegin(HttpContext context);
    [EventAttribute("42")]
private void SessionDataBegin(Guid contextId);
    [NonEventAttribute]
public void SessionDataEnd(HttpContext context);
    [EventAttribute("43")]
private void SessionDataEnd(Guid contextId);
    [NonEventAttribute]
private void RaiseEvent(Action`1<Guid> action, HttpContext context);
    [NonEventAttribute]
private HttpWorkerRequest GetWorkerRequest(HttpContext context);
}
internal class Microsoft.AspNet.SessionState.SessionOnEndTarget : object {
    private int _sessionEndEventHandlerCount;
    public int SessionEndEventHandlerCount { get; public set; }
    public int get_SessionEndEventHandlerCount();
    public void set_SessionEndEventHandlerCount(int value);
    public void RaiseOnEnd(HttpSessionStateContainer sessionStateContainer);
    public void RaiseSessionOnEnd(string id, SessionStateStoreData item);
}
[FlagsAttribute]
public enum Microsoft.AspNet.SessionState.SessionStateItemFlags : Enum {
    public int value__;
    public static SessionStateItemFlags None;
    public static SessionStateItemFlags Uninitialized;
    public static SessionStateItemFlags IgnoreCacheItemRemoved;
}
public class Microsoft.AspNet.SessionState.SessionStateModuleAsync : object {
    private static long s_lockedItemPollingInterval;
    private static TimeSpan s_pollingTimespan;
    private static int s_timeout;
    private static SessionStateSection s_config;
    private static TimeSpan s_configExecutionTimeout;
    private static bool s_configRegenerateExpiredSessionId;
    private static HttpCookieMode s_configCookieless;
    private static SessionStateMode s_configMode;
    private static bool s_pollIntervalRegLookedUp;
    private static object PollIntervalRegLock;
    private static object LockObject;
    private static bool s_oneTimeInit;
    private SessionOnEndTarget _onEndTarget;
    private static ConcurrentDictionary`2<string, int> s_queuedRequestsNumPerSession;
    private bool _acquireCalled;
    private ISessionIDManager _idManager;
    private bool _releaseCalled;
    private SessionStateActions _rqActionFlags;
    private bool _rqAddedCookie;
    private HttpContextBase _rqContext;
    private TimeSpan _rqExecutionTimeout;
    private string _rqId;
    private bool _rqIdNew;
    private bool _rqIsNewSession;
    private SessionStateStoreData _rqItem;
    private object _rqLockId;
    private bool _rqReadonly;
    private bool _rqRequiresState;
    private ISessionStateItemCollection _rqSessionItems;
    private HttpSessionStateContainer _rqSessionState;
    private bool _rqSessionStateNotFound;
    private HttpStaticObjectsCollection _rqStaticObjects;
    private bool _rqSupportSessionIdReissue;
    private EventHandler _sessionStartEventHandler;
    private SessionStateStoreProviderAsyncBase _store;
    private bool _supportSessionExpiry;
    public static HttpCookieMode ConfigCookieless { get; }
    public static SessionStateMode ConfigMode { get; }
    private bool SessionIdManagerUseCookieless { get; }
    private static SessionStateModuleAsync();
    public static HttpCookieMode get_ConfigCookieless();
    public static SessionStateMode get_ConfigMode();
    public sealed virtual void Init(HttpApplication app);
    public sealed virtual void Dispose();
    public sealed virtual void ReleaseSessionState(HttpContext context);
    public sealed virtual Task ReleaseSessionStateAsync(HttpContext context);
    public void add_Start(EventHandler value);
    public void remove_Start(EventHandler value);
    public void add_End(EventHandler value);
    public void remove_End(EventHandler value);
    private SessionStateStoreProviderAsyncBase SecureInstantiateAsyncProvider(ProviderSettings settings);
    private SessionStateStoreProviderAsyncBase InitCustomStore(SessionStateSection config);
    private void InitModuleFromConfig(HttpApplication app, SessionStateSection config);
    private IAsyncResult BeginAcquireState(object source, EventArgs e, AsyncCallback cb, object extraData);
    private void EndAcquireState(IAsyncResult result);
    private IAsyncResult BeginOnEndRequest(object source, EventArgs e, AsyncCallback cb, object extraData);
    private void EndOnEndRequest(IAsyncResult result);
    private IAsyncResult BeginOnReleaseState(object source, EventArgs e, AsyncCallback cb, object extraData);
    private void EndOnReleaseState(IAsyncResult result);
    private ISessionIDManager InitSessionIDManager(SessionStateSection config);
    private static void CheckAssignableType(Type baseType, Type type, ConfigurationElement configElement, string propertyName);
    private void ResetPerRequestFields();
    private void RaiseOnStart(EventArgs e);
    private void OnStart(EventArgs e);
    [AsyncStateMachineAttribute("Microsoft.AspNet.SessionState.SessionStateModuleAsync/<AcquireStateAsync>d__65")]
private Task AcquireStateAsync(HttpApplication app);
    private bool get_SessionIdManagerUseCookieless();
    private bool CreateSessionId();
    private void RegisterEnsureStateStoreItemLocked();
    [AsyncStateMachineAttribute("Microsoft.AspNet.SessionState.SessionStateModuleAsync/<EnsureStateStoreItemLockedAsync>d__70")]
private Task EnsureStateStoreItemLockedAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNet.SessionState.SessionStateModuleAsync/<CompleteAcquireStateAsync>d__71")]
private Task CompleteAcquireStateAsync(HttpContext context);
    private void InitStateStoreItem(bool addToContext);
    [AsyncStateMachineAttribute("Microsoft.AspNet.SessionState.SessionStateModuleAsync/<LockSessionStateItemAsync>d__73")]
private Task LockSessionStateItemAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNet.SessionState.SessionStateModuleAsync/<GetSessionStateItemAsync>d__74")]
private Task GetSessionStateItemAsync();
    private void QueueRef();
    private void DequeRef();
    private void ExtractValuesFromGetItemResult(GetItemResult result, SessionStateStoreData& rqItem, Boolean& locked, TimeSpan& lockAge, Object& rqLockId, SessionStateActions& rqActionFlags);
    private static void LookUpRegForPollInterval();
    private Task ReleaseStateAsync(HttpApplication application);
    [AsyncStateMachineAttribute("Microsoft.AspNet.SessionState.SessionStateModuleAsync/<ReleaseStateAsyncImpl>d__80")]
private Task ReleaseStateAsyncImpl(HttpApplication application);
    private void RemoveSessionId(HttpContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNet.SessionState.SessionStateModuleAsync/<OnEndRequestAsync>d__82")]
private Task OnEndRequestAsync(HttpApplication application);
    private static CancellationToken GetCancellationToken();
    [CompilerGeneratedAttribute]
private Task <BeginAcquireState>b__54_0(HttpApplication app);
    [CompilerGeneratedAttribute]
private Task <BeginOnEndRequest>b__56_0(HttpApplication app);
    [CompilerGeneratedAttribute]
private Task <BeginOnReleaseState>b__58_0(HttpApplication app);
    [CompilerGeneratedAttribute]
private void <RegisterEnsureStateStoreItemLocked>b__69_0(HttpContextBase _);
}
public abstract class Microsoft.AspNet.SessionState.SessionStateStoreProviderAsyncBase : ProviderBase {
    private bool _skipKeepAliveWhenUnused;
    internal bool SkipKeepAliveWhenUnused { get; }
    public abstract virtual SessionStateStoreData CreateNewStoreData(HttpContextBase context, int timeout);
    public abstract virtual Task CreateUninitializedItemAsync(HttpContextBase context, string id, int timeout, CancellationToken cancellationToken);
    public abstract virtual void Dispose();
    public abstract virtual Task EndRequestAsync(HttpContextBase context);
    public abstract virtual Task`1<GetItemResult> GetItemAsync(HttpContextBase context, string id, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetItemResult> GetItemExclusiveAsync(HttpContextBase context, string id, CancellationToken cancellationToken);
    public abstract virtual void InitializeRequest(HttpContextBase context);
    public abstract virtual Task ReleaseItemExclusiveAsync(HttpContextBase context, string id, object lockId, CancellationToken cancellationToken);
    public abstract virtual Task RemoveItemAsync(HttpContextBase context, string id, object lockId, SessionStateStoreData item, CancellationToken cancellationToken);
    public abstract virtual Task ResetItemTimeoutAsync(HttpContextBase context, string id, CancellationToken cancellationToken);
    public abstract virtual Task SetAndReleaseItemExclusiveAsync(HttpContextBase context, string id, SessionStateStoreData item, object lockId, bool newItem, CancellationToken cancellationToken);
    public abstract virtual bool SetItemExpireCallback(SessionStateItemExpireCallback expireCallback);
    public virtual void Initialize(string name, NameValueCollection config);
    internal bool get_SkipKeepAliveWhenUnused();
}
internal static class Microsoft.AspNet.SessionState.TaskAsyncHelper : object {
    private static Task CompletedTask;
    private static TaskAsyncHelper();
    public static IAsyncResult BeginTask(HttpApplication app, Func`2<HttpApplication, Task> taskFunc, AsyncCallback callback, object state);
    public static void EndTask(IAsyncResult ar);
    public static void RunAsyncMethodSynchronously(Func`1<Task> func);
}
internal class Microsoft.AspNet.SessionState.TaskWrapperAsyncResult : object {
    private bool _forceCompletedSynchronously;
    [CompilerGeneratedAttribute]
private Task <Task>k__BackingField;
    [CompilerGeneratedAttribute]
private object <AsyncState>k__BackingField;
    public Task Task { get; }
    public object AsyncState { get; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; }
    public bool IsCompleted { get; }
    public TaskWrapperAsyncResult(Task task, object asyncState);
    [CompilerGeneratedAttribute]
public Task get_Task();
    [CompilerGeneratedAttribute]
public sealed virtual object get_AsyncState();
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    public sealed virtual bool get_CompletedSynchronously();
    public sealed virtual bool get_IsCompleted();
    public void ForceCompletedSynchronously();
}
