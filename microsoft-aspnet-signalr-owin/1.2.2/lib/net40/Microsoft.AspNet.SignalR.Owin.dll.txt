internal static class Microsoft.AspNet.SignalR.Infrastructure.UrlDecoder : object {
    public static string UrlDecode(string str);
    private static string UrlDecodeInternal(string value, Encoding encoding);
    private static int HexToInt(char h);
}
public class Microsoft.AspNet.SignalR.Owin.CallHandler : object {
    private ConnectionConfiguration _configuration;
    private PersistentConnection _connection;
    public CallHandler(ConnectionConfiguration configuration, PersistentConnection connection);
    public Task Invoke(IDictionary`2<string, object> environment);
    private static Task EndResponse(IDictionary`2<string, object> environment, int statusCode, string reason);
    private static bool IsSameOrigin(Uri requestUri, string origin);
}
public class Microsoft.AspNet.SignalR.Owin.Handlers.HubDispatcherHandler : object {
    private Func`2<IDictionary`2<string, object>, Task> _next;
    private string _path;
    private HubConfiguration _configuration;
    public HubDispatcherHandler(Func`2<IDictionary`2<string, object>, Task> next, string path, HubConfiguration configuration);
    public Task Invoke(IDictionary`2<string, object> environment);
}
public class Microsoft.AspNet.SignalR.Owin.Handlers.PersistentConnectionHandler : object {
    private Func`2<IDictionary`2<string, object>, Task> _next;
    private string _path;
    private Type _connectionType;
    private ConnectionConfiguration _configuration;
    public PersistentConnectionHandler(Func`2<IDictionary`2<string, object>, Task> next, string path, Type connectionType, ConnectionConfiguration configuration);
    public Task Invoke(IDictionary`2<string, object> environment);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.SignalR.Owin.Infrastructure.Headers : object {
    [ExtensionAttribute]
public static IDictionary`2<string, String[]> SetHeader(IDictionary`2<string, String[]> headers, string name, string value);
    [ExtensionAttribute]
public static String[] GetHeaders(IDictionary`2<string, String[]> headers, string name);
    [ExtensionAttribute]
public static string GetHeader(IDictionary`2<string, String[]> headers, string name);
}
internal class Microsoft.AspNet.SignalR.Owin.Infrastructure.ParamDictionary : object {
    private static Char[] DefaultParamSeparators;
    private static Char[] ParamKeyValueSeparator;
    private static Char[] LeadingWhitespaceChars;
    private static ParamDictionary();
    internal static IEnumerable`1<KeyValuePair`2<string, string>> ParseToEnumerable(string value, Char[] delimiters);
}
internal static class Microsoft.AspNet.SignalR.Owin.Infrastructure.PrefixMatcher : object {
    public static bool IsMatch(string pathBase, string path);
    private static string EnsureStartsWithSlash(string path);
}
internal static class Microsoft.AspNet.SignalR.Owin.OwinConstants : object {
    public static string Version;
    public static string RequestBody;
    public static string RequestHeaders;
    public static string RequestScheme;
    public static string RequestMethod;
    public static string RequestPathBase;
    public static string RequestPath;
    public static string RequestQueryString;
    public static string RequestProtocol;
    public static string CallCancelled;
    public static string ResponseStatusCode;
    public static string ResponseReasonPhrase;
    public static string ResponseHeaders;
    public static string ResponseBody;
    public static string TraceOutput;
    public static string User;
    public static string RemoteIpAddress;
    public static string RemotePort;
    public static string LocalIpAddress;
    public static string LocalPort;
    public static string DisableRequestCompression;
    public static string DisableRequestBuffering;
    public static string DisableResponseBuffering;
    public static string ServerCapabilities;
    public static string WebSocketVersion;
    public static string WebSocketAccept;
    public static string HostOnAppDisposing;
    public static string HostAppNameKey;
    public static string HostAppModeKey;
    public static string AppModeDevelopment;
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.SignalR.Owin.OwinEnvironmentExtensions : object {
    [ExtensionAttribute]
internal static T Get(IDictionary`2<string, object> environment, string key);
    [ExtensionAttribute]
internal static CancellationToken GetShutdownToken(IDictionary`2<string, object> env);
    [ExtensionAttribute]
internal static string GetAppInstanceName(IDictionary`2<string, object> environment);
    [ExtensionAttribute]
internal static bool SupportsWebSockets(IDictionary`2<string, object> environment);
    [ExtensionAttribute]
internal static bool GetIsDebugEnabled(IDictionary`2<string, object> environment);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.AspNet.SignalR.Owin.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Error_NoConfiguration { get; }
    internal static string Error_NoDepenendeyResolver { get; }
    internal static string Error_NotWebSocketRequest { get; }
    internal static string Forbidden_CrossDomainIsDisabled { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Error_NoConfiguration();
    internal static string get_Error_NoDepenendeyResolver();
    internal static string get_Error_NotWebSocketRequest();
    internal static string get_Forbidden_CrossDomainIsDisabled();
}
public class Microsoft.AspNet.SignalR.Owin.ServerRequest : object {
    private IDictionary`2<string, object> _environment;
    public static string OwinEnvironmentKey;
    private static Char[] CommaSemicolon;
    private Uri _url;
    private NameValueCollection _queryString;
    private NameValueCollection _headers;
    private NameValueCollection _form;
    private bool _formInitialized;
    private object _formLock;
    private IDictionary`2<string, Cookie> _cookies;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate2;
    private string RequestMethod { get; }
    public IDictionary`2<string, String[]> RequestHeaders { get; }
    private Stream RequestBody { get; }
    private string RequestScheme { get; }
    private string RequestPathBase { get; }
    private string RequestPath { get; }
    private string RequestQueryString { get; }
    public Action DisableRequestCompression { get; }
    private string RequestHost { get; }
    private int RequestPort { get; }
    private int DefaultPort { get; }
    private string ContentType { get; }
    private string MediaType { get; }
    private bool HasFormData { get; }
    private bool HasParseableData { get; }
    public Uri Url { get; }
    public NameValueCollection QueryString { get; }
    public NameValueCollection Headers { get; }
    public NameValueCollection Form { get; }
    public IDictionary`2<string, Cookie> Cookies { get; }
    public IPrincipal User { get; }
    public IDictionary`2<string, object> Items { get; private set; }
    public ServerRequest(IDictionary`2<string, object> environment);
    private static ServerRequest();
    private string get_RequestMethod();
    public IDictionary`2<string, String[]> get_RequestHeaders();
    private Stream get_RequestBody();
    private string get_RequestScheme();
    private string get_RequestPathBase();
    private string get_RequestPath();
    private string get_RequestQueryString();
    public Action get_DisableRequestCompression();
    private bool TryParseHostHeader(IPAddress& address, String& host, Int32& port);
    private string get_RequestHost();
    private int get_RequestPort();
    private int get_DefaultPort();
    private string get_ContentType();
    private string get_MediaType();
    private bool get_HasFormData();
    private bool get_HasParseableData();
    private IEnumerable`1<KeyValuePair`2<string, string>> ReadForm();
    public sealed virtual Uri get_Url();
    public sealed virtual NameValueCollection get_QueryString();
    public sealed virtual NameValueCollection get_Headers();
    public sealed virtual NameValueCollection get_Form();
    public sealed virtual IDictionary`2<string, Cookie> get_Cookies();
    public sealed virtual IPrincipal get_User();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
private static void <get_DisableRequestCompression>b__1();
    [CompilerGeneratedAttribute]
private Uri <get_Url>b__3();
    [CompilerGeneratedAttribute]
private NameValueCollection <get_QueryString>b__4();
    [CompilerGeneratedAttribute]
private NameValueCollection <get_Headers>b__5();
    [CompilerGeneratedAttribute]
private NameValueCollection <get_Form>b__6();
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Cookie> <get_Cookies>b__7();
}
public class Microsoft.AspNet.SignalR.Owin.ServerResponse : object {
    private CancellationToken _callCancelled;
    private IDictionary`2<string, object> _environment;
    private Stream _responseBody;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate2;
    public CancellationToken CancellationToken { get; }
    public int StatusCode { get; public set; }
    public string ContentType { get; public set; }
    public IDictionary`2<string, String[]> ResponseHeaders { get; }
    public Stream ResponseBody { get; }
    public Action DisableResponseBuffering { get; }
    public ServerResponse(IDictionary`2<string, object> environment);
    public sealed virtual CancellationToken get_CancellationToken();
    public sealed virtual int get_StatusCode();
    public sealed virtual void set_StatusCode(int value);
    public sealed virtual string get_ContentType();
    public sealed virtual void set_ContentType(string value);
    public sealed virtual void Write(ArraySegment`1<byte> data);
    public sealed virtual Task Flush();
    public sealed virtual Task End();
    public IDictionary`2<string, String[]> get_ResponseHeaders();
    public Stream get_ResponseBody();
    public Action get_DisableResponseBuffering();
    [CompilerGeneratedAttribute]
private void <Flush>b__0();
    [CompilerGeneratedAttribute]
private static void <get_DisableResponseBuffering>b__1();
}
[ExtensionAttribute]
public static class Microsoft.AspNet.SignalR.RequestExtensions : object {
    [ExtensionAttribute]
public static T GetOwinVariable(IRequest request, string key);
    [ExtensionAttribute]
private static T Get(IDictionary`2<string, object> values, string key);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.SignalR.TaskAsyncHelper : object {
    private static Task _emptyTask;
    private static Task`1<bool> _trueTask;
    private static Task`1<bool> _falseTask;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Action`1<object> CS$<>9__CachedAnonymousMethodDelegate29;
    public static Task Empty { get; }
    public static Task`1<bool> True { get; }
    public static Task`1<bool> False { get; }
    private static TaskAsyncHelper();
    private static Task`1<T> MakeTask(T value);
    public static Task get_Empty();
    public static Task`1<bool> get_True();
    public static Task`1<bool> get_False();
    [ExtensionAttribute]
public static Task OrEmpty(Task task);
    [ExtensionAttribute]
public static Task`1<T> OrEmpty(Task`1<T> task);
    public static Task FromAsync(Func`3<AsyncCallback, object, IAsyncResult> beginMethod, Action`1<IAsyncResult> endMethod, object state);
    public static Task`1<T> FromAsync(Func`3<AsyncCallback, object, IAsyncResult> beginMethod, Func`2<IAsyncResult, T> endMethod, object state);
    public static Task Series(Func`2[] tasks, Object[] state);
    [ExtensionAttribute]
public static TTask Catch(TTask task);
    [ExtensionAttribute]
public static TTask Catch(TTask task, Action`2<AggregateException, object> handler, object state);
    private static void AttachFaultedContinuation(TTask task, Action`2<AggregateException, object> handler, object state);
    private static void ExecuteOnFaulted(Action`2<AggregateException, object> handler, object state, AggregateException exception);
    [ExtensionAttribute]
public static TTask Catch(TTask task, Action`1<AggregateException> handler);
    [ExtensionAttribute]
public static Task ContinueWithNotComplete(Task task, Action action);
    [ExtensionAttribute]
public static void ContinueWithNotComplete(Task task, TaskCompletionSource`1<object> tcs);
    [ExtensionAttribute]
public static void ContinueWith(Task task, TaskCompletionSource`1<object> tcs);
    [ExtensionAttribute]
public static void ContinueWith(Task`1<T> task, TaskCompletionSource`1<T> tcs);
    [ExtensionAttribute]
public static Task Return(Task[] tasks);
    [ExtensionAttribute]
public static Task Then(Task task, Action successor);
    [ExtensionAttribute]
public static Task`1<TResult> Then(Task task, Func`1<TResult> successor);
    [ExtensionAttribute]
public static Task Then(Task[] tasks, Action successor);
    [ExtensionAttribute]
public static Task Then(Task task, Action`1<T1> successor, T1 arg1);
    [ExtensionAttribute]
public static Task Then(Task task, Action`2<T1, T2> successor, T1 arg1, T2 arg2);
    [ExtensionAttribute]
public static Task Then(Task task, Func`2<T1, Task> successor, T1 arg1);
    [ExtensionAttribute]
public static Task Then(Task task, Func`3<T1, T2, Task> successor, T1 arg1, T2 arg2);
    [ExtensionAttribute]
public static Task`1<TResult> Then(Task`1<T> task, Func`2<T, Task`1<TResult>> successor);
    [ExtensionAttribute]
public static Task`1<TResult> Then(Task`1<T> task, Func`2<T, TResult> successor);
    [ExtensionAttribute]
public static Task`1<TResult> Then(Task`1<T> task, Func`3<T, T1, TResult> successor, T1 arg1);
    [ExtensionAttribute]
public static Task Then(Task task, Func`1<Task> successor);
    [ExtensionAttribute]
public static Task`1<TResult> Then(Task task, Func`1<Task`1<TResult>> successor);
    [ExtensionAttribute]
public static Task Then(Task`1<TResult> task, Action`1<TResult> successor);
    [ExtensionAttribute]
public static Task Then(Task`1<TResult> task, Func`2<TResult, Task> successor);
    [ExtensionAttribute]
public static Task`1<TResult> Then(Task`1<TResult> task, Func`3<Task`1<TResult>, T1, Task`1<TResult>> successor, T1 arg1);
    [ExtensionAttribute]
public static Task Finally(Task task, Action`1<object> next, object state);
    [ExtensionAttribute]
public static Task RunSynchronously(Task task, Action successor);
    [ExtensionAttribute]
public static Task FastUnwrap(Task`1<Task> task);
    [ExtensionAttribute]
public static Task`1<T> FastUnwrap(Task`1<Task`1<T>> task);
    public static Task Delay(TimeSpan timeOut);
    public static Task FromMethod(Action func);
    public static Task FromMethod(Action`1<T1> func, T1 arg);
    public static Task FromMethod(Action`2<T1, T2> func, T1 arg1, T2 arg2);
    public static Task FromMethod(Func`1<Task> func);
    public static Task`1<TResult> FromMethod(Func`1<Task`1<TResult>> func);
    public static Task`1<TResult> FromMethod(Func`1<TResult> func);
    public static Task FromMethod(Func`2<T1, Task> func, T1 arg);
    public static Task FromMethod(Func`3<T1, T2, Task> func, T1 arg1, T2 arg2);
    public static Task`1<TResult> FromMethod(Func`2<T1, Task`1<TResult>> func, T1 arg);
    public static Task`1<TResult> FromMethod(Func`2<T1, TResult> func, T1 arg);
    public static Task`1<TResult> FromMethod(Func`3<T1, T2, Task`1<TResult>> func, T1 arg1, T2 arg2);
    public static Task`1<TResult> FromMethod(Func`3<T1, T2, TResult> func, T1 arg1, T2 arg2);
    public static Task`1<T> FromResult(T value);
    internal static Task FromError(Exception e);
    internal static Task`1<T> FromError(Exception e);
    [ExtensionAttribute]
internal static void SetUnwrappedException(TaskCompletionSource`1<T> tcs, Exception e);
    [ExtensionAttribute]
internal static bool TrySetUnwrappedException(TaskCompletionSource`1<T> tcs, Exception e);
    private static Task Canceled();
    private static Task`1<T> Canceled();
    private static Task RunTask(Task task, Action successor);
    private static Task RunTaskSynchronously(Task task, Action`1<object> next, object state, bool onlyOnSuccess);
    [CompilerGeneratedAttribute]
private static void <Catch>b__0(AggregateException ex);
    [CompilerGeneratedAttribute]
private static void <Catch>b__4(AggregateException ex, object state);
    [CompilerGeneratedAttribute]
private static void <Return>b__13();
    [CompilerGeneratedAttribute]
private static void <RunSynchronously>b__28(object state);
}
[ExtensionAttribute]
public static class Owin.OwinExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder MapHubs(IAppBuilder builder);
    [ExtensionAttribute]
public static IAppBuilder MapHubs(IAppBuilder builder, HubConfiguration configuration);
    [ExtensionAttribute]
public static IAppBuilder MapHubs(IAppBuilder builder, string path, HubConfiguration configuration);
    [ExtensionAttribute]
public static IAppBuilder MapConnection(IAppBuilder builder, string url);
    [ExtensionAttribute]
public static IAppBuilder MapConnection(IAppBuilder builder, string url, ConnectionConfiguration configuration);
    [ExtensionAttribute]
public static IAppBuilder MapConnection(IAppBuilder builder, string url, Type connectionType, ConnectionConfiguration configuration);
    [ExtensionAttribute]
private static IAppBuilder UseType(IAppBuilder builder, Object[] args);
}
[AttributeUsageAttribute("1")]
internal class System.Reflection.AssemblyMetadataAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Key { get; public set; }
    public string Value { get; public set; }
    public AssemblyMetadataAttribute(string key, string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
