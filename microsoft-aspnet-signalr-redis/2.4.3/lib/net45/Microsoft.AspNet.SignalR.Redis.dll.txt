[ExtensionAttribute]
public static class Microsoft.AspNet.SignalR.DependencyResolverExtensions : object {
    [ExtensionAttribute]
public static IDependencyResolver UseRedis(IDependencyResolver resolver, string server, int port, string password, string eventKey);
    [ExtensionAttribute]
public static IDependencyResolver UseRedis(IDependencyResolver resolver, RedisScaleoutConfiguration configuration);
}
internal class Microsoft.AspNet.SignalR.Infrastructure.DispatchingTaskCompletionSource`1 : object {
    private TaskCompletionSource`1<TResult> _tcs;
    public Task`1<TResult> Task { get; }
    public Task`1<TResult> get_Task();
    public void SetCanceled();
    public void SetException(Exception exception);
    public void SetException(IEnumerable`1<Exception> exceptions);
    public void SetResult(TResult result);
    public void TrySetCanceled();
    public void TrySetException(Exception exception);
    public void TrySetException(IEnumerable`1<Exception> exceptions);
    public void SetUnwrappedException(Exception e);
    public void TrySetUnwrappedException(Exception e);
    public void TrySetResult(TResult result);
    [CompilerGeneratedAttribute]
private void <SetCanceled>b__3_0();
    [CompilerGeneratedAttribute]
private void <TrySetCanceled>b__7_0();
}
public interface Microsoft.AspNet.SignalR.Redis.IRedisConnection {
    public abstract virtual Task ConnectAsync(string connectionString, TraceSource trace);
    public abstract virtual void Close(string key, bool allowCommandsToComplete);
    public abstract virtual Task SubscribeAsync(string key, Action`2<int, RedisMessage> onMessage);
    public abstract virtual Task ScriptEvaluateAsync(int database, string script, string key, Byte[] messageArguments);
    public abstract virtual Task RestoreLatestValueForKey(int database, string key);
    public abstract virtual void Dispose();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConnectionFailed(Action`1<Exception> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConnectionFailed(Action`1<Exception> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConnectionRestored(Action`1<Exception> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConnectionRestored(Action`1<Exception> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ErrorMessage(Action`1<Exception> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ErrorMessage(Action`1<Exception> value);
}
public class Microsoft.AspNet.SignalR.Redis.RedisConnection : object {
    private ISubscriber _redisSubscriber;
    private ConnectionMultiplexer _connection;
    private TraceSource _trace;
    private ulong _latestMessageId;
    private object _shutdownLock;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private Action`1<Exception> ConnectionFailed;
    [CompilerGeneratedAttribute]
private Action`1<Exception> ConnectionRestored;
    [CompilerGeneratedAttribute]
private Action`1<Exception> ErrorMessage;
    [AsyncStateMachineAttribute("Microsoft.AspNet.SignalR.Redis.RedisConnection/<ConnectAsync>d__6")]
public sealed virtual Task ConnectAsync(string connectionString, TraceSource trace);
    public sealed virtual void Close(string key, bool allowCommandsToComplete);
    [AsyncStateMachineAttribute("Microsoft.AspNet.SignalR.Redis.RedisConnection/<SubscribeAsync>d__8")]
public sealed virtual Task SubscribeAsync(string key, Action`2<int, RedisMessage> onMessage);
    public sealed virtual void Dispose();
    public sealed virtual Task ScriptEvaluateAsync(int database, string script, string key, Byte[] messageArguments);
    [AsyncStateMachineAttribute("Microsoft.AspNet.SignalR.Redis.RedisConnection/<RestoreLatestValueForKey>d__11")]
public sealed virtual Task RestoreLatestValueForKey(int database, string key);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ConnectionFailed(Action`1<Exception> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ConnectionFailed(Action`1<Exception> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ConnectionRestored(Action`1<Exception> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ConnectionRestored(Action`1<Exception> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ErrorMessage(Action`1<Exception> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ErrorMessage(Action`1<Exception> value);
    private void OnConnectionFailed(object sender, ConnectionFailedEventArgs args);
    private void OnConnectionRestored(object sender, ConnectionFailedEventArgs args);
    private void OnError(object sender, RedisErrorEventArgs args);
}
public class Microsoft.AspNet.SignalR.Redis.RedisMessage : object {
    [CompilerGeneratedAttribute]
private ulong <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ScaleoutMessage <ScaleoutMessage>k__BackingField;
    public ulong Id { get; private set; }
    public ScaleoutMessage ScaleoutMessage { get; private set; }
    [CompilerGeneratedAttribute]
public ulong get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(ulong value);
    [CompilerGeneratedAttribute]
public ScaleoutMessage get_ScaleoutMessage();
    [CompilerGeneratedAttribute]
private void set_ScaleoutMessage(ScaleoutMessage value);
    public static Byte[] ToBytes(IList`1<Message> messages);
    public static RedisMessage FromBytes(Byte[] data, TraceSource trace);
}
public class Microsoft.AspNet.SignalR.Redis.RedisMessageBus : ScaleoutMessageBus {
    private static int DefaultBufferSize;
    private int _db;
    private string _key;
    private TraceSource _trace;
    private ITraceManager _traceManager;
    private IRedisConnection _connection;
    private string _connectionString;
    private object _callbackLock;
    private Nullable`1<ulong> lastId;
    [CompilerGeneratedAttribute]
private TimeSpan <ReconnectDelay>k__BackingField;
    public TimeSpan ReconnectDelay { get; public set; }
    public RedisMessageBus(IDependencyResolver resolver, RedisScaleoutConfiguration configuration, IRedisConnection connection);
    internal RedisMessageBus(IDependencyResolver resolver, RedisScaleoutConfiguration configuration, IRedisConnection connection, bool connectAutomatically);
    [CompilerGeneratedAttribute]
public TimeSpan get_ReconnectDelay();
    [CompilerGeneratedAttribute]
public void set_ReconnectDelay(TimeSpan value);
    public virtual void OpenStream(int streamIndex);
    protected virtual Task Send(int streamIndex, IList`1<Message> messages);
    protected virtual void Dispose(bool disposing);
    private void Shutdown();
    private void OnConnectionFailed(Exception ex);
    private void OnConnectionError(Exception ex);
    [AsyncStateMachineAttribute("Microsoft.AspNet.SignalR.Redis.RedisMessageBus/<OnConnectionRestored>d__21")]
private void OnConnectionRestored(Exception ex);
    [AsyncStateMachineAttribute("Microsoft.AspNet.SignalR.Redis.RedisMessageBus/<ConnectWithRetry>d__22")]
internal Task ConnectWithRetry();
    [AsyncStateMachineAttribute("Microsoft.AspNet.SignalR.Redis.RedisMessageBus/<ConnectToRedisAsync>d__23")]
private Task ConnectToRedisAsync();
    private void OnMessage(int streamIndex, RedisMessage message);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0(object _);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.AspNet.SignalR.Redis.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Error_EndOfStreamRedis { get; }
    internal static string Error_RedisConnectionClosed { get; }
    internal static string Error_RedisConnectionNotStarted { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Error_EndOfStreamRedis();
    internal static string get_Error_RedisConnectionClosed();
    internal static string get_Error_RedisConnectionNotStarted();
}
internal class Microsoft.AspNet.SignalR.Redis.TraceTextWriter : TextWriter {
    private string _prefix;
    private TraceSource _trace;
    public Encoding Encoding { get; }
    public TraceTextWriter(string prefix, TraceSource trace);
    public virtual Encoding get_Encoding();
    public virtual void Write(char value);
    public virtual void WriteLine(string value);
}
public class Microsoft.AspNet.SignalR.RedisScaleoutConfiguration : ScaleoutConfiguration {
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventKey>k__BackingField;
    internal string ConnectionString { get; private set; }
    public int Database { get; public set; }
    public string EventKey { get; private set; }
    public RedisScaleoutConfiguration(string server, int port, string password, string eventKey);
    public RedisScaleoutConfiguration(string connectionString, string eventKey);
    [CompilerGeneratedAttribute]
internal string get_ConnectionString();
    [CompilerGeneratedAttribute]
private void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public int get_Database();
    [CompilerGeneratedAttribute]
public void set_Database(int value);
    [CompilerGeneratedAttribute]
public string get_EventKey();
    [CompilerGeneratedAttribute]
private void set_EventKey(string value);
    private static string CreateConnectionString(string server, int port, string password);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.SignalR.TaskAsyncHelper : object {
    private static Task _emptyTask;
    private static Task`1<bool> _trueTask;
    private static Task`1<bool> _falseTask;
    public static Task Empty { get; }
    public static Task`1<bool> True { get; }
    public static Task`1<bool> False { get; }
    private static TaskAsyncHelper();
    private static Task`1<T> MakeTask(T value);
    public static Task get_Empty();
    public static Task`1<bool> get_True();
    public static Task`1<bool> get_False();
    [ExtensionAttribute]
public static Task OrEmpty(Task task);
    [ExtensionAttribute]
public static Task`1<T> OrEmpty(Task`1<T> task);
    public static Task FromAsync(Func`3<AsyncCallback, object, IAsyncResult> beginMethod, Action`1<IAsyncResult> endMethod, object state);
    public static Task`1<T> FromAsync(Func`3<AsyncCallback, object, IAsyncResult> beginMethod, Func`2<IAsyncResult, T> endMethod, object state);
    [ExtensionAttribute]
public static TTask Catch(TTask task, TraceSource traceSource);
    [ExtensionAttribute]
public static TTask Catch(TTask task, Action`2<AggregateException, object> handler, object state, TraceSource traceSource);
    private static void AttachFaultedContinuation(TTask task, Action`2<AggregateException, object> handler, object state, TraceSource traceSource);
    private static void ExecuteOnFaulted(Action`2<AggregateException, object> handler, object state, AggregateException exception, TraceSource traceSource);
    [ExtensionAttribute]
public static TTask Catch(TTask task, Action`1<AggregateException> handler, TraceSource traceSource);
    [ExtensionAttribute]
public static Task ContinueWithNotComplete(Task task, Action action);
    [ExtensionAttribute]
public static void ContinueWithNotComplete(Task task, DispatchingTaskCompletionSource`1<object> tcs);
    [ExtensionAttribute]
public static Task ContinueWith(Task task, DispatchingTaskCompletionSource`1<object> tcs);
    [ExtensionAttribute]
public static void ContinueWith(Task`1<T> task, TaskCompletionSource`1<T> tcs);
    [ExtensionAttribute]
public static Task Then(Task task, Action successor);
    [ExtensionAttribute]
public static Task`1<TResult> Then(Task task, Func`1<TResult> successor);
    [ExtensionAttribute]
public static Task Then(Task task, Action`1<T1> successor, T1 arg1);
    [ExtensionAttribute]
public static Task Then(Task task, Action`2<T1, T2> successor, T1 arg1, T2 arg2);
    [ExtensionAttribute]
public static Task Then(Task task, Func`2<T1, Task> successor, T1 arg1);
    [ExtensionAttribute]
public static Task Then(Task task, Func`3<T1, T2, Task> successor, T1 arg1, T2 arg2);
    [ExtensionAttribute]
public static Task Then(Task task, Func`4<T1, T2, T3, Task> successor, T1 arg1, T2 arg2, T3 arg3);
    [ExtensionAttribute]
public static Task`1<TResult> Then(Task`1<T> task, Func`2<T, Task`1<TResult>> successor);
    [ExtensionAttribute]
public static Task`1<TResult> Then(Task`1<T> task, Func`2<T, TResult> successor);
    [ExtensionAttribute]
public static Task`1<TResult> Then(Task`1<T> task, Func`3<T, T1, TResult> successor, T1 arg1);
    [ExtensionAttribute]
public static Task`1<TResult> Then(Task`1<T> task, Func`4<T, T1, T2, TResult> successor, T1 arg1, T2 arg2);
    [ExtensionAttribute]
public static Task Then(Task task, Func`1<Task> successor);
    [ExtensionAttribute]
public static Task`1<TResult> Then(Task task, Func`1<Task`1<TResult>> successor);
    [ExtensionAttribute]
public static Task Then(Task`1<TResult> task, Action`1<TResult> successor);
    [ExtensionAttribute]
public static Task Then(Task`1<T> task, Action`2<T, T1> successor, T1 arg1);
    [ExtensionAttribute]
public static Task Then(Task`1<TResult> task, Func`2<TResult, Task> successor);
    [ExtensionAttribute]
public static Task`1<TResult> Then(Task`1<TResult> task, Func`3<Task`1<TResult>, T1, Task`1<TResult>> successor, T1 arg1);
    [ExtensionAttribute]
public static Task Finally(Task task, Action`1<object> next, object state);
    [ExtensionAttribute]
public static Task RunSynchronously(Task task, Action successor);
    [ExtensionAttribute]
public static Task FastUnwrap(Task`1<Task> task);
    [ExtensionAttribute]
public static Task`1<T> FastUnwrap(Task`1<Task`1<T>> task);
    public static Task Delay(TimeSpan timeOut);
    public static Task FromMethod(Action func);
    public static Task FromMethod(Action`1<T1> func, T1 arg);
    public static Task FromMethod(Action`2<T1, T2> func, T1 arg1, T2 arg2);
    public static Task FromMethod(Func`1<Task> func);
    public static Task`1<TResult> FromMethod(Func`1<Task`1<TResult>> func);
    public static Task`1<TResult> FromMethod(Func`1<TResult> func);
    public static Task FromMethod(Func`2<T1, Task> func, T1 arg);
    public static Task FromMethod(Func`3<T1, T2, Task> func, T1 arg1, T2 arg2);
    public static Task FromMethod(Func`4<T1, T2, T3, Task> func, T1 arg1, T2 arg2, T3 arg3);
    public static Task`1<TResult> FromMethod(Func`2<T1, Task`1<TResult>> func, T1 arg);
    public static Task`1<TResult> FromMethod(Func`2<T1, TResult> func, T1 arg);
    public static Task`1<TResult> FromMethod(Func`3<T1, T2, Task`1<TResult>> func, T1 arg1, T2 arg2);
    public static Task`1<TResult> FromMethod(Func`3<T1, T2, TResult> func, T1 arg1, T2 arg2);
    public static Task`1<TResult> FromMethod(Func`4<T1, T2, T3, TResult> func, T1 arg1, T2 arg2, T3 arg3);
    public static Task`1<T> FromResult(T value);
    internal static Task FromError(Exception e);
    internal static Task`1<T> FromError(Exception e);
    [ExtensionAttribute]
internal static void SetUnwrappedException(TaskCompletionSource`1<T> tcs, Exception e);
    [ExtensionAttribute]
internal static bool TrySetUnwrappedException(TaskCompletionSource`1<T> tcs, Exception e);
    private static Task Canceled();
    private static Task`1<T> Canceled();
    internal static CulturePair SaveCulture();
    internal static TResult RunWithPreservedCulture(CulturePair preservedCulture, Func`3<T1, T2, TResult> func, T1 arg1, T2 arg2);
    internal static TResult RunWithPreservedCulture(CulturePair preservedCulture, Func`2<T, TResult> func, T arg);
    internal static void RunWithPreservedCulture(CulturePair preservedCulture, Action`1<T> action, T arg);
    internal static void RunWithPreservedCulture(CulturePair preservedCulture, Action action);
    [ExtensionAttribute]
internal static Task ContinueWithPreservedCulture(Task task, Action`1<Task> continuationAction, TaskContinuationOptions continuationOptions);
    [ExtensionAttribute]
internal static Task ContinueWithPreservedCulture(Task`1<T> task, Action`1<Task`1<T>> continuationAction, TaskContinuationOptions continuationOptions);
    [ExtensionAttribute]
internal static Task`1<TResult> ContinueWithPreservedCulture(Task`1<T> task, Func`2<Task`1<T>, TResult> continuationAction, TaskContinuationOptions continuationOptions);
    [ExtensionAttribute]
internal static Task ContinueWithPreservedCulture(Task task, Action`1<Task> continuationAction);
    [ExtensionAttribute]
internal static Task ContinueWithPreservedCulture(Task`1<T> task, Action`1<Task`1<T>> continuationAction);
    [ExtensionAttribute]
internal static Task`1<TResult> ContinueWithPreservedCulture(Task`1<T> task, Func`2<Task`1<T>, TResult> continuationAction);
    private static Task RunTask(Task task, Action successor);
    private static Task RunTaskSynchronously(Task task, Action`1<object> next, object state, bool onlyOnSuccess);
    public static void Dispatch(Action action);
}
