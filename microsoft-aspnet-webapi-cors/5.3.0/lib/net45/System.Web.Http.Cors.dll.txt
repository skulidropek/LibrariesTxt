public class System.Web.Http.Cors.AttributeBasedPolicyProviderFactory : object {
    private static string HttpContextBaseKey;
    [CompilerGeneratedAttribute]
private ICorsPolicyProvider <DefaultPolicyProvider>k__BackingField;
    public ICorsPolicyProvider DefaultPolicyProvider { get; public set; }
    [CompilerGeneratedAttribute]
public ICorsPolicyProvider get_DefaultPolicyProvider();
    [CompilerGeneratedAttribute]
public void set_DefaultPolicyProvider(ICorsPolicyProvider value);
    public virtual ICorsPolicyProvider GetCorsPolicyProvider(HttpRequestMessage request);
    private ICorsPolicyProvider GetCorsPolicyProvider(HttpActionDescriptor actionDescriptor);
    private static HttpActionDescriptor SelectAction(HttpRequestMessage request, IHttpRouteData routeData, HttpConfiguration config);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class System.Web.Http.Cors.CorsHttpRequestMessageExtensions : object {
    private static string CorsRequestContextKey;
    [ExtensionAttribute]
public static CorsRequestContext GetCorsRequestContext(HttpRequestMessage request);
    [ExtensionAttribute]
private static string GetHeader(HttpRequestMessage request, string name);
    [ExtensionAttribute]
private static IEnumerable`1<string> GetHeaders(HttpRequestMessage request, string name);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class System.Web.Http.Cors.CorsHttpResponseMessageExtensions : object {
    [ExtensionAttribute]
public static void WriteCorsHeaders(HttpResponseMessage response, CorsResult corsResult);
}
public class System.Web.Http.Cors.CorsMessageHandler : DelegatingHandler {
    private HttpConfiguration _httpConfiguration;
    private bool _rethrowExceptions;
    public CorsMessageHandler(HttpConfiguration httpConfiguration);
    public CorsMessageHandler(HttpConfiguration httpConfiguration, bool rethrowExceptions);
    [AsyncStateMachineAttribute("System.Web.Http.Cors.CorsMessageHandler/<SendAsync>d__4")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Web.Http.Cors.CorsMessageHandler/<HandleCorsRequestAsync>d__5")]
public virtual Task`1<HttpResponseMessage> HandleCorsRequestAsync(HttpRequestMessage request, CorsRequestContext corsRequestContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Web.Http.Cors.CorsMessageHandler/<HandleCorsPreflightRequestAsync>d__6")]
public virtual Task`1<HttpResponseMessage> HandleCorsPreflightRequestAsync(HttpRequestMessage request, CorsRequestContext corsRequestContext, CancellationToken cancellationToken);
    private static HttpResponseMessage HandleException(HttpRequestMessage request, Exception exception);
    [AsyncStateMachineAttribute("System.Web.Http.Cors.CorsMessageHandler/<GetCorsPolicyAsync>d__8")]
private Task`1<CorsPolicy> GetCorsPolicyAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private bool TryEvaluateCorsPolicy(CorsRequestContext requestContext, CorsPolicy corsPolicy, CorsResult& corsResult);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
[AttributeUsageAttribute("68")]
public class System.Web.Http.Cors.DisableCorsAttribute : Attribute {
    public sealed virtual Task`1<CorsPolicy> GetCorsPolicyAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
[AttributeUsageAttribute("68")]
public class System.Web.Http.Cors.EnableCorsAttribute : Attribute {
    private CorsPolicy _corsPolicy;
    private bool _originsValidated;
    public IList`1<string> ExposedHeaders { get; }
    public IList`1<string> Headers { get; }
    public IList`1<string> Methods { get; }
    public IList`1<string> Origins { get; }
    public long PreflightMaxAge { get; public set; }
    public bool SupportsCredentials { get; public set; }
    public EnableCorsAttribute(string origins, string headers, string methods);
    public EnableCorsAttribute(string origins, string headers, string methods, string exposedHeaders);
    public IList`1<string> get_ExposedHeaders();
    public IList`1<string> get_Headers();
    public IList`1<string> get_Methods();
    public IList`1<string> get_Origins();
    public long get_PreflightMaxAge();
    public void set_PreflightMaxAge(long value);
    public bool get_SupportsCredentials();
    public void set_SupportsCredentials(bool value);
    public sealed virtual Task`1<CorsPolicy> GetCorsPolicyAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private static void ValidateOrigins(IList`1<string> origins);
    private static void AddCommaSeparatedValuesToCollection(string commaSeparatedValues, IList`1<string> collection);
}
public interface System.Web.Http.Cors.ICorsPolicyProvider {
    public abstract virtual Task`1<CorsPolicy> GetCorsPolicyAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
public interface System.Web.Http.Cors.ICorsPolicyProviderFactory {
    public abstract virtual ICorsPolicyProvider GetCorsPolicyProvider(HttpRequestMessage request);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Web.Http.Cors.Properties.SRResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AccessControlRequestMethodCannotBeNullOrEmpty { get; }
    internal static string ArgumentCannotBeNullOrEmpty { get; }
    internal static string InvalidAccessControlRequestMethod { get; }
    internal static string NoConfiguration { get; }
    internal static string OriginCannotBeNullOrEmpty { get; }
    internal static string OriginCannotEndWithSlash { get; }
    internal static string OriginMustNotContainPathQueryOrFragment { get; }
    internal static string OriginNotWellFormed { get; }
    internal static string TraceCorsRequestContext { get; }
    internal static string TraceEndCorsResultReturned { get; }
    internal static string TraceEndNoCorsResultReturned { get; }
    internal static string TraceEndNoPolicyProviderReturned { get; }
    internal static string TraceEndNoPolicyReturned { get; }
    internal static string TraceEndPolicyProviderReturned { get; }
    internal static string TraceEndPolicyReturned { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AccessControlRequestMethodCannotBeNullOrEmpty();
    internal static string get_ArgumentCannotBeNullOrEmpty();
    internal static string get_InvalidAccessControlRequestMethod();
    internal static string get_NoConfiguration();
    internal static string get_OriginCannotBeNullOrEmpty();
    internal static string get_OriginCannotEndWithSlash();
    internal static string get_OriginMustNotContainPathQueryOrFragment();
    internal static string get_OriginNotWellFormed();
    internal static string get_TraceCorsRequestContext();
    internal static string get_TraceEndCorsResultReturned();
    internal static string get_TraceEndNoCorsResultReturned();
    internal static string get_TraceEndNoPolicyProviderReturned();
    internal static string get_TraceEndNoPolicyReturned();
    internal static string get_TraceEndPolicyProviderReturned();
    internal static string get_TraceEndPolicyReturned();
}
internal class System.Web.Http.Cors.Tracing.CorsEngineTracer : object {
    private ICorsEngine _innerCorsEngine;
    private ITraceWriter _traceWriter;
    private static string MethodName;
    public CorsEngineTracer(ICorsEngine corsEngine, ITraceWriter traceWriter);
    public sealed virtual CorsResult EvaluatePolicy(CorsRequestContext requestContext, CorsPolicy policy);
}
internal class System.Web.Http.Cors.Tracing.CorsPolicyProviderFactoryTracer : object {
    private ICorsPolicyProviderFactory _innerPolicyProviderFactory;
    private ITraceWriter _traceWriter;
    private static string MethodName;
    public CorsPolicyProviderFactoryTracer(ICorsPolicyProviderFactory innerPolicyProviderFactory, ITraceWriter traceWriter);
    public sealed virtual ICorsPolicyProvider GetCorsPolicyProvider(HttpRequestMessage request);
}
internal class System.Web.Http.Cors.Tracing.CorsPolicyProviderTracer : object {
    private ICorsPolicyProvider _innerPolicyProvider;
    private ITraceWriter _traceWriter;
    private static string MethodName;
    public CorsPolicyProviderTracer(ICorsPolicyProvider innerPolicyProvider, ITraceWriter traceWriter);
    public sealed virtual Task`1<CorsPolicy> GetCorsPolicyAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
public static class System.Web.Http.Cors.Tracing.TraceCategories : object {
    public static string CorsCategory;
    private static TraceCategories();
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class System.Web.Http.CorsHttpConfigurationExtensions : object {
    private static string CorsEngineKey;
    private static string CorsPolicyProviderFactoryKey;
    private static string CorsEnabledKey;
    [ExtensionAttribute]
public static void EnableCors(HttpConfiguration httpConfiguration);
    [ExtensionAttribute]
public static void EnableCors(HttpConfiguration httpConfiguration, bool rethrowExceptions);
    [ExtensionAttribute]
public static void EnableCors(HttpConfiguration httpConfiguration, ICorsPolicyProvider defaultPolicyProvider);
    [ExtensionAttribute]
public static void EnableCors(HttpConfiguration httpConfiguration, ICorsPolicyProvider defaultPolicyProvider, bool rethrowExceptions);
    [ExtensionAttribute]
private static void AddCorsMessageHandler(HttpConfiguration httpConfiguration, bool rethrowExceptions);
    [ExtensionAttribute]
public static void SetCorsEngine(HttpConfiguration httpConfiguration, ICorsEngine corsEngine);
    [ExtensionAttribute]
public static ICorsEngine GetCorsEngine(HttpConfiguration httpConfiguration);
    [ExtensionAttribute]
public static void SetCorsPolicyProviderFactory(HttpConfiguration httpConfiguration, ICorsPolicyProviderFactory corsPolicyProviderFactory);
    [ExtensionAttribute]
public static ICorsPolicyProviderFactory GetCorsPolicyProviderFactory(HttpConfiguration httpConfiguration);
}
