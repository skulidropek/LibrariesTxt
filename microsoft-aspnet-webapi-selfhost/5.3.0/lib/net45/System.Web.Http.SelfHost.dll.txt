[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
internal static class System.Collections.Generic.DictionaryExtensions : object {
    [ExtensionAttribute]
public static void RemoveFromDictionary(IDictionary`2<TKey, TValue> dictionary, Func`2<KeyValuePair`2<TKey, TValue>, bool> removeCondition);
    [ExtensionAttribute]
public static void RemoveFromDictionary(IDictionary`2<TKey, TValue> dictionary, Func`3<KeyValuePair`2<TKey, TValue>, TState, bool> removeCondition, TState state);
    [ExtensionAttribute]
public static bool TryGetValue(IDictionary`2<string, object> collection, string key, T& value);
    [IteratorStateMachineAttribute("System.Collections.Generic.DictionaryExtensions/<FindKeysWithPrefix>d__3`1")]
[ExtensionAttribute]
internal static IEnumerable`1<KeyValuePair`2<string, TValue>> FindKeysWithPrefix(IDictionary`2<string, TValue> dictionary, string prefix);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class System.Net.Http.HttpRequestMessageExtensions : object {
    [ExtensionAttribute]
public static SecurityMessageProperty GetSecurityMessageProperty(HttpRequestMessage request);
    [ExtensionAttribute]
private static T GetProperty(HttpRequestMessage request, string key);
}
internal static class System.Threading.Tasks.TaskHelpers : object {
    private static Task _defaultCompleted;
    private static Task`1<object> _completedTaskReturningNull;
    private static TaskHelpers();
    internal static Task Canceled();
    internal static Task`1<TResult> Canceled();
    internal static Task Completed();
    internal static Task FromError(Exception exception);
    internal static Task`1<TResult> FromError(Exception exception);
    internal static Task`1<object> NullResult();
}
[ExtensionAttribute]
internal static class System.Threading.Tasks.TaskHelpersExtensions : object {
    [AsyncStateMachineAttribute("System.Threading.Tasks.TaskHelpersExtensions/<CastToObject>d__0")]
[ExtensionAttribute]
internal static Task`1<object> CastToObject(Task task);
    [AsyncStateMachineAttribute("System.Threading.Tasks.TaskHelpersExtensions/<CastToObject>d__1`1")]
[ExtensionAttribute]
internal static Task`1<object> CastToObject(Task`1<T> task);
    [ExtensionAttribute]
internal static void ThrowIfFaulted(Task task);
    [ExtensionAttribute]
internal static bool TryGetResult(Task`1<TResult> task, TResult& result);
}
internal static class System.Web.Http.Error : object {
    private static string HttpScheme;
    private static string HttpsScheme;
    internal static string Format(string format, Object[] args);
    internal static ArgumentException Argument(string messageFormat, Object[] messageArgs);
    internal static ArgumentException Argument(string parameterName, string messageFormat, Object[] messageArgs);
    internal static ArgumentException ArgumentUriNotHttpOrHttpsScheme(string parameterName, Uri actualValue);
    internal static ArgumentException ArgumentUriNotAbsolute(string parameterName, Uri actualValue);
    internal static ArgumentException ArgumentUriHasQueryOrFragment(string parameterName, Uri actualValue);
    internal static ArgumentNullException PropertyNull();
    internal static ArgumentNullException ArgumentNull(string parameterName);
    internal static ArgumentNullException ArgumentNull(string parameterName, string messageFormat, Object[] messageArgs);
    internal static ArgumentException ArgumentNullOrEmpty(string parameterName);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string parameterName, object actualValue, string messageFormat, Object[] messageArgs);
    internal static ArgumentOutOfRangeException ArgumentMustBeGreaterThanOrEqualTo(string parameterName, object actualValue, object minValue);
    internal static ArgumentOutOfRangeException ArgumentMustBeLessThanOrEqualTo(string parameterName, object actualValue, object maxValue);
    internal static KeyNotFoundException KeyNotFound();
    internal static KeyNotFoundException KeyNotFound(string messageFormat, Object[] messageArgs);
    internal static ObjectDisposedException ObjectDisposed(string messageFormat, Object[] messageArgs);
    internal static OperationCanceledException OperationCanceled();
    internal static OperationCanceledException OperationCanceled(string messageFormat, Object[] messageArgs);
    internal static ArgumentException InvalidEnumArgument(string parameterName, int invalidValue, Type enumClass);
    internal static InvalidOperationException InvalidOperation(string messageFormat, Object[] messageArgs);
    internal static InvalidOperationException InvalidOperation(Exception innerException, string messageFormat, Object[] messageArgs);
    internal static NotSupportedException NotSupported(string messageFormat, Object[] messageArgs);
}
internal static class System.Web.Http.HttpMethodHelper : object {
    internal static HttpMethod GetHttpMethod(string method);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Web.Http.Properties.CommonWebApiResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ArgumentInvalidAbsoluteUri { get; }
    internal static string ArgumentInvalidHttpUriScheme { get; }
    internal static string ArgumentMustBeGreaterThanOrEqualTo { get; }
    internal static string ArgumentMustBeLessThanOrEqualTo { get; }
    internal static string ArgumentNullOrEmpty { get; }
    internal static string ArgumentUriHasQueryOrFragment { get; }
    internal static string InvalidEnumArgument { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgumentInvalidAbsoluteUri();
    internal static string get_ArgumentInvalidHttpUriScheme();
    internal static string get_ArgumentMustBeGreaterThanOrEqualTo();
    internal static string get_ArgumentMustBeLessThanOrEqualTo();
    internal static string get_ArgumentNullOrEmpty();
    internal static string get_ArgumentUriHasQueryOrFragment();
    internal static string get_InvalidEnumArgument();
}
public class System.Web.Http.SelfHost.Channels.HttpBinding : Binding {
    internal static string CollectionElementName;
    internal static TransferMode DefaultTransferMode;
    private HttpsTransportBindingElement _httpsTransportBindingElement;
    private HttpTransportBindingElement _httpTransportBindingElement;
    private HttpBindingSecurity _security;
    private HttpMessageEncodingBindingElement _httpMessageEncodingBindingElement;
    private Action`1<HttpTransportBindingElement> _configureTransportBindingElement;
    public EnvelopeVersion EnvelopeVersion { get; }
    [DefaultValueAttribute]
public HostNameComparisonMode HostNameComparisonMode { get; public set; }
    [DefaultValueAttribute("524288")]
public long MaxBufferPoolSize { get; public set; }
    [DefaultValueAttribute("65536")]
public int MaxBufferSize { get; public set; }
    [DefaultValueAttribute("65536")]
public long MaxReceivedMessageSize { get; public set; }
    public Action`1<HttpTransportBindingElement> ConfigureTransportBindingElement { get; public set; }
    public string Scheme { get; }
    public HttpBindingSecurity Security { get; public set; }
    [DefaultValueAttribute]
public TransferMode TransferMode { get; public set; }
    private bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously { get; }
    public HttpBinding(HttpBindingSecurityMode securityMode);
    public EnvelopeVersion get_EnvelopeVersion();
    public HostNameComparisonMode get_HostNameComparisonMode();
    public void set_HostNameComparisonMode(HostNameComparisonMode value);
    public long get_MaxBufferPoolSize();
    public void set_MaxBufferPoolSize(long value);
    public int get_MaxBufferSize();
    public void set_MaxBufferSize(int value);
    public long get_MaxReceivedMessageSize();
    public void set_MaxReceivedMessageSize(long value);
    public Action`1<HttpTransportBindingElement> get_ConfigureTransportBindingElement();
    public void set_ConfigureTransportBindingElement(Action`1<HttpTransportBindingElement> value);
    public virtual string get_Scheme();
    public HttpBindingSecurity get_Security();
    public void set_Security(HttpBindingSecurity value);
    public TransferMode get_TransferMode();
    public void set_TransferMode(TransferMode value);
    private sealed virtual override bool System.ServiceModel.Channels.IBindingRuntimePreferences.get_ReceiveSynchronously();
    public virtual BindingElementCollection CreateBindingElements();
    private TransportBindingElement GetTransport();
    private void Initialize();
}
public class System.Web.Http.SelfHost.Channels.HttpBindingSecurity : object {
    internal static HttpBindingSecurityMode DefaultMode;
    private HttpBindingSecurityMode _mode;
    private HttpTransportSecurity _transportSecurity;
    public HttpBindingSecurityMode Mode { get; public set; }
    public HttpTransportSecurity Transport { get; public set; }
    public HttpBindingSecurityMode get_Mode();
    public void set_Mode(HttpBindingSecurityMode value);
    public HttpTransportSecurity get_Transport();
    public void set_Transport(HttpTransportSecurity value);
}
public enum System.Web.Http.SelfHost.Channels.HttpBindingSecurityMode : Enum {
    public int value__;
    public static HttpBindingSecurityMode None;
    public static HttpBindingSecurityMode Transport;
    public static HttpBindingSecurityMode TransportCredentialOnly;
}
internal static class System.Web.Http.SelfHost.Channels.HttpBindingSecurityModeHelper : object {
    public static bool IsDefined(HttpBindingSecurityMode value);
    public static void Validate(HttpBindingSecurityMode value, string parameterName);
}
internal class System.Web.Http.SelfHost.Channels.HttpMessage : Message {
    private HttpRequestMessage _request;
    private HttpResponseMessage _response;
    private MessageHeaders _headers;
    private MessageProperties _properties;
    [CompilerGeneratedAttribute]
private bool <IsRequest>k__BackingField;
    public MessageVersion Version { get; }
    public MessageHeaders Headers { get; }
    public MessageProperties Properties { get; }
    public bool IsEmpty { get; }
    public bool IsFault { get; }
    public bool IsRequest { get; private set; }
    public HttpMessage(HttpRequestMessage request);
    public HttpMessage(HttpResponseMessage response);
    public virtual MessageVersion get_Version();
    public virtual MessageHeaders get_Headers();
    public virtual MessageProperties get_Properties();
    public virtual bool get_IsEmpty();
    public virtual bool get_IsFault();
    [CompilerGeneratedAttribute]
public bool get_IsRequest();
    [CompilerGeneratedAttribute]
private void set_IsRequest(bool value);
    public HttpRequestMessage GetHttpRequestMessage(bool extract);
    public HttpResponseMessage GetHttpResponseMessage(bool extract);
    protected virtual void OnWriteBodyContents(XmlDictionaryWriter writer);
    protected virtual MessageBuffer OnCreateBufferedCopy(int maxBufferSize);
    protected virtual XmlDictionaryReader OnGetReaderAtBodyContents();
    protected virtual string OnGetBodyAttribute(string localName, string ns);
    protected virtual void OnWriteStartBody(XmlDictionaryWriter writer);
    protected virtual void OnWriteStartEnvelope(XmlDictionaryWriter writer);
    protected virtual void OnBodyToString(XmlDictionaryWriter writer);
    protected virtual void OnWriteMessage(XmlDictionaryWriter writer);
    protected virtual void OnWriteStartHeaders(XmlDictionaryWriter writer);
    protected virtual void OnClose();
    private static string GetNotSupportedMessage();
    private void EnsureNotDisposed();
    private Nullable`1<long> GetHttpContentLength();
}
internal class System.Web.Http.SelfHost.Channels.HttpMessageEncoderFactory : MessageEncoderFactory {
    private HttpMessageEncoder _encoder;
    public MessageEncoder Encoder { get; }
    public MessageVersion MessageVersion { get; }
    public virtual MessageEncoder get_Encoder();
    public virtual MessageVersion get_MessageVersion();
    public virtual MessageEncoder CreateSessionEncoder();
}
internal class System.Web.Http.SelfHost.Channels.HttpMessageEncodingBindingElement : MessageEncodingBindingElement {
    private static Type _replyChannelType;
    public MessageVersion MessageVersion { get; public set; }
    private static HttpMessageEncodingBindingElement();
    public virtual MessageVersion get_MessageVersion();
    public virtual void set_MessageVersion(MessageVersion value);
    public virtual bool CanBuildChannelFactory(BindingContext context);
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context);
    public virtual bool CanBuildChannelListener(BindingContext context);
    public virtual IChannelListener`1<TChannel> BuildChannelListener(BindingContext context);
    public virtual BindingElement Clone();
    public virtual MessageEncoderFactory CreateMessageEncoderFactory();
    private static bool IsChannelShapeSupported();
}
internal class System.Web.Http.SelfHost.Channels.HttpMessageEncodingChannelListener : LayeredChannelListener`1<IReplyChannel> {
    private IChannelListener`1<IReplyChannel> _innerChannelListener;
    public HttpMessageEncodingChannelListener(Binding binding, IChannelListener`1<IReplyChannel> innerListener);
    protected virtual void OnOpening();
    protected virtual IReplyChannel OnAcceptChannel(TimeSpan timeout);
    protected virtual IAsyncResult OnBeginAcceptChannel(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual IReplyChannel OnEndAcceptChannel(IAsyncResult result);
    protected virtual IAsyncResult OnBeginWaitForChannel(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual bool OnEndWaitForChannel(IAsyncResult result);
    protected virtual bool OnWaitForChannel(TimeSpan timeout);
    private IReplyChannel WrapInnerChannel(IReplyChannel innerChannel);
}
internal class System.Web.Http.SelfHost.Channels.HttpMessageEncodingReplyChannel : LayeredChannel`1<IReplyChannel> {
    public EndpointAddress LocalAddress { get; }
    public HttpMessageEncodingReplyChannel(ChannelManagerBase channelManager, IReplyChannel innerChannel);
    public sealed virtual EndpointAddress get_LocalAddress();
    public sealed virtual IAsyncResult BeginReceiveRequest(AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginReceiveRequest(TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginTryReceiveRequest(TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginWaitForRequest(TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual RequestContext EndReceiveRequest(IAsyncResult result);
    public sealed virtual bool EndTryReceiveRequest(IAsyncResult result, RequestContext& context);
    public sealed virtual bool EndWaitForRequest(IAsyncResult result);
    public sealed virtual RequestContext ReceiveRequest();
    public sealed virtual RequestContext ReceiveRequest(TimeSpan timeout);
    public sealed virtual bool TryReceiveRequest(TimeSpan timeout, RequestContext& context);
    public sealed virtual bool WaitForRequest(TimeSpan timeout);
    private static RequestContext WrapRequestContext(RequestContext innerContext);
}
internal class System.Web.Http.SelfHost.Channels.HttpMessageEncodingRequestContext : RequestContext {
    private static string HttpMessageEncodingRequestContextPropertyName;
    private static string DefaultReasonPhrase;
    private RequestContext _innerContext;
    private Message _configuredRequestMessage;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private BufferManager <BufferManager>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <BufferToReturn>k__BackingField;
    internal Exception Exception { get; internal set; }
    internal BufferManager BufferManager { get; internal set; }
    internal Byte[] BufferToReturn { get; internal set; }
    public Message RequestMessage { get; }
    public HttpMessageEncodingRequestContext(RequestContext innerContext);
    [CompilerGeneratedAttribute]
internal Exception get_Exception();
    [CompilerGeneratedAttribute]
internal void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
internal BufferManager get_BufferManager();
    [CompilerGeneratedAttribute]
internal void set_BufferManager(BufferManager value);
    [CompilerGeneratedAttribute]
internal Byte[] get_BufferToReturn();
    [CompilerGeneratedAttribute]
internal void set_BufferToReturn(Byte[] value);
    public virtual Message get_RequestMessage();
    public virtual void Abort();
    public virtual IAsyncResult BeginReply(Message message, TimeSpan timeout, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginReply(Message message, AsyncCallback callback, object state);
    public virtual void Close(TimeSpan timeout);
    public virtual void Close();
    public virtual void EndReply(IAsyncResult result);
    public virtual void Reply(Message message, TimeSpan timeout);
    public virtual void Reply(Message message);
    protected virtual void Dispose(bool disposing);
    internal static HttpMessageEncodingRequestContext GetContextFromMessage(Message message);
    private void Cleanup();
    private static void CopyHeadersToNameValueCollection(HttpHeaders headers, NameValueCollection nameValueCollection);
    private static Message ConfigureRequestMessage(Message message);
    private void ConfigureResponseMessage(Message message);
}
[ExtensionAttribute]
internal static class System.Web.Http.SelfHost.Channels.HttpMessageExtensions : object {
    internal static string ToHttpRequestMessageMethodName;
    internal static string ToHttpResponseMessageMethodName;
    internal static string ToMessageMethodName;
    [ExtensionAttribute]
public static HttpRequestMessage ToHttpRequestMessage(Message message);
    [ExtensionAttribute]
public static HttpResponseMessage ToHttpResponseMessage(Message message);
    [ExtensionAttribute]
public static HttpResponseMessage ExtractHttpResponseMessage(Message message);
    [ExtensionAttribute]
public static Message ToMessage(HttpRequestMessage request);
    [ExtensionAttribute]
public static Message ToMessage(HttpResponseMessage response);
}
public class System.Web.Http.SelfHost.HttpSelfHostConfiguration : HttpConfiguration {
    private static int DefaultMaxConcurrentRequests;
    private static int DefaultMaxBufferSize;
    private static int DefaultReceivedMessageSize;
    private static int MinConcurrentRequests;
    private static int MinBufferSize;
    private static int MinReceivedMessageSize;
    private static TimeSpan DefaultReceiveTimeout;
    private static TimeSpan DefaultSendTimeout;
    private Uri _baseAddress;
    private int _maxConcurrentRequests;
    private ServiceCredentials _credentials;
    private HttpClientCredentialType _clientCredentialType;
    private TransferMode _transferMode;
    private int _maxBufferSize;
    private bool _maxBufferSizeIsInitialized;
    private long _maxReceivedMessageSize;
    private TimeSpan _receiveTimeout;
    private TimeSpan _sendTimeout;
    private HostNameComparisonMode _hostNameComparisonMode;
    public Uri BaseAddress { get; }
    public int MaxConcurrentRequests { get; public set; }
    public TransferMode TransferMode { get; public set; }
    public HostNameComparisonMode HostNameComparisonMode { get; public set; }
    public int MaxBufferSize { get; public set; }
    public long MaxReceivedMessageSize { get; public set; }
    public TimeSpan ReceiveTimeout { get; public set; }
    public TimeSpan SendTimeout { get; public set; }
    public UserNamePasswordValidator UserNamePasswordValidator { get; public set; }
    public X509CertificateValidator X509CertificateValidator { get; public set; }
    public HttpClientCredentialType ClientCredentialType { get; public set; }
    public HttpSelfHostConfiguration(string baseAddress);
    public HttpSelfHostConfiguration(Uri baseAddress);
    private static HttpSelfHostConfiguration();
    public Uri get_BaseAddress();
    public int get_MaxConcurrentRequests();
    public void set_MaxConcurrentRequests(int value);
    public TransferMode get_TransferMode();
    public void set_TransferMode(TransferMode value);
    public HostNameComparisonMode get_HostNameComparisonMode();
    public void set_HostNameComparisonMode(HostNameComparisonMode value);
    public int get_MaxBufferSize();
    public void set_MaxBufferSize(int value);
    public long get_MaxReceivedMessageSize();
    public void set_MaxReceivedMessageSize(long value);
    public TimeSpan get_ReceiveTimeout();
    public void set_ReceiveTimeout(TimeSpan value);
    public TimeSpan get_SendTimeout();
    public void set_SendTimeout(TimeSpan value);
    public UserNamePasswordValidator get_UserNamePasswordValidator();
    public void set_UserNamePasswordValidator(UserNamePasswordValidator value);
    public X509CertificateValidator get_X509CertificateValidator();
    public void set_X509CertificateValidator(X509CertificateValidator value);
    public HttpClientCredentialType get_ClientCredentialType();
    public void set_ClientCredentialType(HttpClientCredentialType value);
    internal BindingParameterCollection ConfigureBinding(HttpBinding httpBinding);
    protected virtual BindingParameterCollection OnConfigureBinding(HttpBinding httpBinding);
    private BindingParameterCollection AddCredentialsToBindingParameters();
    private static Uri CreateBaseAddress(string baseAddress);
    private static Uri ValidateBaseAddress(Uri baseAddress);
    internal static int MultiplyByProcessorCount(int value);
}
public class System.Web.Http.SelfHost.HttpSelfHostServer : HttpServer {
    internal static string SecurityKey;
    private static AsyncCallback _onCloseListenerComplete;
    private static AsyncCallback _onCloseChannelComplete;
    private static TimeSpan _acceptTimeout;
    private static TimeSpan _receiveTimeout;
    private static Func`2<HttpRequestMessage, X509Certificate2> _retrieveClientCertificate;
    private static double IncreaseWindowSizeRatio;
    private static double DecreaseWindowSizeRatio;
    private static int InitialWindowSizeMultiplier;
    private static int MinimumWindowSizeMultiplier;
    private static int InitialWindowSize;
    private static int MinimumWindowSize;
    private AsyncCallback _onOpenListenerComplete;
    private AsyncCallback _onAcceptChannelComplete;
    private AsyncCallback _onOpenChannelComplete;
    private AsyncCallback _onReceiveRequestContextComplete;
    private AsyncCallback _onReplyComplete;
    private ConcurrentBag`1<IReplyChannel> _channels;
    private CancellationTokenSource _cancellationTokenSource;
    private bool _disposed;
    private HttpSelfHostConfiguration _configuration;
    private IChannelListener`1<IReplyChannel> _listener;
    private TaskCompletionSource`1<bool> _openTaskCompletionSource;
    private TaskCompletionSource`1<bool> _closeTaskCompletionSource;
    private int _state;
    private int _requestsOutstanding;
    private int _windowSize;
    private object _windowSizeLock;
    public HttpSelfHostServer(HttpSelfHostConfiguration configuration);
    public HttpSelfHostServer(HttpSelfHostConfiguration configuration, HttpMessageHandler dispatcher);
    private static HttpSelfHostServer();
    private void InitializeCallbacks();
    public Task OpenAsync();
    public Task CloseAsync();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("System.Web.Http.SelfHost.HttpSelfHostServer/<ProcessRequestContext>d__34")]
private void ProcessRequestContext(ChannelContext channelContext, RequestContext requestContext);
    [AsyncStateMachineAttribute("System.Web.Http.SelfHost.HttpSelfHostServer/<SendAsync>d__35")]
private Task`1<HttpResponseMessage> SendAsync(ChannelContext channelContext, RequestContext requestContext);
    private HttpRequestMessage CreateHttpRequestMessage(RequestContext requestContext);
    internal static bool IsLocal(Message message);
    private static void SetCurrentPrincipal(HttpRequestMessage request);
    internal static X509Certificate2 RetrieveClientCertificate(HttpRequestMessage request);
    private static void CancelTask(TaskCompletionSource`1<bool> taskCompletionSource);
    private static void FaultTask(TaskCompletionSource`1<bool> taskCompletionSource, Exception exception);
    private static void CompleteTask(TaskCompletionSource`1<bool> taskCompletionSource);
    private void BeginOpenListener(HttpSelfHostServer server);
    private void OnOpenListenerComplete(IAsyncResult result);
    private void OpenListenerComplete(IAsyncResult result);
    private void BeginAcceptChannel(HttpSelfHostServer server);
    private void OnAcceptChannelComplete(IAsyncResult result);
    private void AcceptChannelComplete(IAsyncResult result);
    private static IAsyncResult BeginTryAcceptChannel(HttpSelfHostServer server, AsyncCallback callback);
    private static bool EndTryAcceptChannel(IAsyncResult result, IReplyChannel& channel);
    private void BeginOpenChannel(ChannelContext channelContext);
    private void OnOpenChannelComplete(IAsyncResult result);
    private void OpenChannelComplete(IAsyncResult result);
    private void BeginReceiveRequestContext(ChannelContext context);
    private void OnReceiveRequestContextComplete(IAsyncResult result);
    private void ReceiveRequestContextComplete(IAsyncResult result);
    private static IAsyncResult BeginTryReceiveRequestContext(ChannelContext channelContext, AsyncCallback callback);
    private static bool EndTryReceiveRequestContext(IAsyncResult result, RequestContext& requestContext);
    private void BeginReply(ReplyContext replyContext);
    private void OnReplyComplete(IAsyncResult result);
    private void ReplyComplete(IAsyncResult result);
    private void BeginNextRequest(ChannelContext context);
    private bool TryIncreaseWindowSize();
    private bool TryDecreaseWindowSize();
    private bool ShouldIncreaseWindowSize();
    private bool ShouldDecreaseWindowSize();
    private static void BeginCloseListener(HttpSelfHostServer server);
    private static void OnCloseListenerComplete(IAsyncResult result);
    private static void CloseListenerComplete(IAsyncResult result);
    private static void CloseNextChannel(HttpSelfHostServer server);
    private static void BeginCloseChannel(ChannelContext channelContext);
    private static void OnCloseChannelComplete(IAsyncResult result);
    private static void CloseChannelComplete(IAsyncResult result);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Web.Http.SelfHost.Properties.SRResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AsyncResultAlreadyEnded { get; }
    internal static string AsyncResultCompletedTwice { get; }
    internal static string BufferedOutputStreamQuotaExceeded { get; }
    internal static string CannotUseOtherClientCredentialTypeWithX509CertificateValidator { get; }
    internal static string CannotUseOtherClientCredentialTypeWithUserNamePasswordValidator { get; }
    internal static string CertificateUnsupportedForHttpTransportCredentialOnly { get; }
    internal static string ChannelFactoryNotSupported { get; }
    internal static string ChannelShapeNotSupported { get; }
    internal static string EncoderMessageVersionMismatch { get; }
    internal static string HttpMessageEncoderFactoryDoesNotSupportSessionEncoder { get; }
    internal static string HttpMessageHandlerInvalidMessage { get; }
    internal static string HttpServerAlreadyRunning { get; }
    internal static string InnerListenerFactoryNotSet { get; }
    internal static string InvalidAsyncResult { get; }
    internal static string InvalidAsyncResultImplementation { get; }
    internal static string InvalidAsyncResultImplementationGeneric { get; }
    internal static string InvalidChannelListener { get; }
    internal static string InvalidNullAsyncResult { get; }
    internal static string MessageBodyIsHttpRequestMessageWithKnownContentLength { get; }
    internal static string MessageBodyIsHttpRequestMessageWithUnknownContentLength { get; }
    internal static string MessageBodyIsHttpResponseMessageWithKnownContentLength { get; }
    internal static string MessageBodyIsHttpResponseMessageWithUnknownContentLength { get; }
    internal static string MessageClosed { get; }
    internal static string MessageInvalidForHttpMessageEncoder { get; }
    internal static string MessageReadWriteCopyNotSupported { get; }
    internal static string NonHttpMessageMustBeEmpty { get; }
    internal static string NonnegativeNumberRequired { get; }
    internal static string OnlyMessageVersionNoneSupportedOnHttpMessageEncodingBindingElement { get; }
    internal static string ParameterMustBeLessThanOrEqualSecondParameter { get; }
    internal static string ReadNotSupported { get; }
    internal static string RequestCancelled { get; }
    internal static string RequestMissingHttpRequestMessageProperty { get; }
    internal static string RequestMissingToHeader { get; }
    internal static string SeekNotSupported { get; }
    internal static string ValueMustBeNonNegative { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AsyncResultAlreadyEnded();
    internal static string get_AsyncResultCompletedTwice();
    internal static string get_BufferedOutputStreamQuotaExceeded();
    internal static string get_CannotUseOtherClientCredentialTypeWithX509CertificateValidator();
    internal static string get_CannotUseOtherClientCredentialTypeWithUserNamePasswordValidator();
    internal static string get_CertificateUnsupportedForHttpTransportCredentialOnly();
    internal static string get_ChannelFactoryNotSupported();
    internal static string get_ChannelShapeNotSupported();
    internal static string get_EncoderMessageVersionMismatch();
    internal static string get_HttpMessageEncoderFactoryDoesNotSupportSessionEncoder();
    internal static string get_HttpMessageHandlerInvalidMessage();
    internal static string get_HttpServerAlreadyRunning();
    internal static string get_InnerListenerFactoryNotSet();
    internal static string get_InvalidAsyncResult();
    internal static string get_InvalidAsyncResultImplementation();
    internal static string get_InvalidAsyncResultImplementationGeneric();
    internal static string get_InvalidChannelListener();
    internal static string get_InvalidNullAsyncResult();
    internal static string get_MessageBodyIsHttpRequestMessageWithKnownContentLength();
    internal static string get_MessageBodyIsHttpRequestMessageWithUnknownContentLength();
    internal static string get_MessageBodyIsHttpResponseMessageWithKnownContentLength();
    internal static string get_MessageBodyIsHttpResponseMessageWithUnknownContentLength();
    internal static string get_MessageClosed();
    internal static string get_MessageInvalidForHttpMessageEncoder();
    internal static string get_MessageReadWriteCopyNotSupported();
    internal static string get_NonHttpMessageMustBeEmpty();
    internal static string get_NonnegativeNumberRequired();
    internal static string get_OnlyMessageVersionNoneSupportedOnHttpMessageEncodingBindingElement();
    internal static string get_ParameterMustBeLessThanOrEqualSecondParameter();
    internal static string get_ReadNotSupported();
    internal static string get_RequestCancelled();
    internal static string get_RequestMissingHttpRequestMessageProperty();
    internal static string get_RequestMissingToHeader();
    internal static string get_SeekNotSupported();
    internal static string get_ValueMustBeNonNegative();
}
internal class System.Web.Http.SelfHost.SelfHostHttpRequestContext : HttpRequestContext {
    private RequestContext _requestContext;
    private HttpRequestMessage _request;
    private HttpConfiguration _configuration;
    private X509Certificate2 _clientCertificate;
    private bool _clientCertificateSet;
    private bool _includeErrorDetail;
    private bool _includeErrorDetailSet;
    private bool _isLocal;
    private bool _isLocalSet;
    private UrlHelper _url;
    private bool _urlSet;
    private string _virtualPathRoot;
    private bool _virtualPathRootSet;
    public RequestContext RequestContext { get; }
    public HttpRequestMessage Request { get; }
    public X509Certificate2 ClientCertificate { get; public set; }
    public HttpConfiguration Configuration { get; public set; }
    public bool IncludeErrorDetail { get; public set; }
    public bool IsLocal { get; public set; }
    public IPrincipal Principal { get; public set; }
    public UrlHelper Url { get; public set; }
    public string VirtualPathRoot { get; public set; }
    public SelfHostHttpRequestContext(RequestContext requestContext, HttpConfiguration configuration, HttpRequestMessage request);
    public RequestContext get_RequestContext();
    public HttpRequestMessage get_Request();
    public virtual X509Certificate2 get_ClientCertificate();
    public virtual void set_ClientCertificate(X509Certificate2 value);
    public virtual HttpConfiguration get_Configuration();
    public virtual void set_Configuration(HttpConfiguration value);
    public virtual bool get_IncludeErrorDetail();
    public virtual void set_IncludeErrorDetail(bool value);
    public virtual bool get_IsLocal();
    public virtual void set_IsLocal(bool value);
    public virtual IPrincipal get_Principal();
    public virtual void set_Principal(IPrincipal value);
    public virtual UrlHelper get_Url();
    public virtual void set_Url(UrlHelper value);
    public virtual string get_VirtualPathRoot();
    public virtual void set_VirtualPathRoot(string value);
}
internal abstract class System.Web.Http.SelfHost.ServiceModel.Channels.AsyncResult : object {
    private static AsyncCallback _asyncCompletionWrapperCallback;
    private AsyncCallback _completionCallback;
    private bool _completedSynchronously;
    private bool _endCalled;
    private Exception _exception;
    private bool _isCompleted;
    private AsyncCompletion _nextAsyncCompletion;
    private object _state;
    private Action _beforePrepareAsyncCompletionAction;
    private Func`2<IAsyncResult, bool> _checkSyncValidationFunc;
    private ManualResetEvent _manualResetEvent;
    private object _manualResetEventLock;
    [CompilerGeneratedAttribute]
private Action`2<AsyncResult, Exception> <OnCompleting>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<AsyncCallback, IAsyncResult> <VirtualCallback>k__BackingField;
    public object AsyncState { get; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; }
    public bool HasCallback { get; }
    public bool IsCompleted { get; }
    protected Action`2<AsyncResult, Exception> OnCompleting { get; protected set; }
    protected Action`2<AsyncCallback, IAsyncResult> VirtualCallback { get; protected set; }
    protected AsyncResult(AsyncCallback callback, object state);
    public sealed virtual object get_AsyncState();
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    public sealed virtual bool get_CompletedSynchronously();
    public bool get_HasCallback();
    public sealed virtual bool get_IsCompleted();
    [CompilerGeneratedAttribute]
protected Action`2<AsyncResult, Exception> get_OnCompleting();
    [CompilerGeneratedAttribute]
protected void set_OnCompleting(Action`2<AsyncResult, Exception> value);
    [CompilerGeneratedAttribute]
protected Action`2<AsyncCallback, IAsyncResult> get_VirtualCallback();
    [CompilerGeneratedAttribute]
protected void set_VirtualCallback(Action`2<AsyncCallback, IAsyncResult> value);
    protected void Complete(bool didCompleteSynchronously);
    protected void Complete(bool didCompleteSynchronously, Exception error);
    private static void AsyncCompletionWrapperCallback(IAsyncResult result);
    protected virtual bool OnContinueAsyncCompletion(IAsyncResult result);
    protected void SetBeforePrepareAsyncCompletionAction(Action completionAction);
    protected void SetCheckSyncValidationFunc(Func`2<IAsyncResult, bool> validationFunc);
    protected AsyncCallback PrepareAsyncCompletion(AsyncCompletion callback);
    protected bool CheckSyncContinue(IAsyncResult result);
    protected bool SyncContinue(IAsyncResult result);
    private bool TryContinueHelper(IAsyncResult result, AsyncCompletion& callback);
    private AsyncCompletion GetNextCompletion();
    protected static void ThrowInvalidAsyncResult(IAsyncResult result);
    protected static void ThrowInvalidAsyncResult(string debugText);
    protected static TAsyncResult End(IAsyncResult result);
}
internal class System.Web.Http.SelfHost.ServiceModel.Channels.BufferedOutputStream : Stream {
    private BufferManager _bufferManager;
    private Byte[][] _chunks;
    private int _chunkCount;
    private Byte[] _currentChunk;
    private int _currentChunkSize;
    private int _maxSize;
    private int _theMaxSizeQuota;
    private int _totalSize;
    private bool _callerReturnsBuffer;
    private bool _bufferReturned;
    private bool _initialized;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public BufferedOutputStream(int initialSize, int maxSize, BufferManager bufferManager);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public void Reinitialize(int initialSize, int maxSizeQuota, BufferManager bufferManager);
    public void Reinitialize(int initialSize, int maxSizeQuota, int effectiveMaxSize, BufferManager bufferManager);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public void Clear();
    public virtual void Close();
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public MemoryStream ToMemoryStream();
    public Byte[] ToArray(Int32& bufferSize);
    public void Skip(int size);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
    protected virtual Exception CreateQuotaExceededException(int maxSizeQuota);
    private void WriteCore(Byte[] buffer, int offset, int size);
    private void AllocNextChunk(int minimumChunkSize);
}
internal class System.Web.Http.SelfHost.ServiceModel.Channels.BufferManagerOutputStream : BufferedOutputStream {
    private string _quotaExceededString;
    public BufferManagerOutputStream(string quotaExceededString, int initialSize, int maxSize, BufferManager bufferManager);
    public void Init(int initialSize, int maxSizeQuota, BufferManager bufferManager);
    public void Init(int initialSize, int maxSizeQuota, int effectiveMaxSize, BufferManager bufferManager);
    protected virtual Exception CreateQuotaExceededException(int maxSizeQuota);
}
internal abstract class System.Web.Http.SelfHost.ServiceModel.Channels.ChannelAcceptor`1 : CommunicationObject {
    private ChannelManagerBase _channelManager;
    protected ChannelManagerBase ChannelManager { get; }
    protected TimeSpan DefaultCloseTimeout { get; }
    protected TimeSpan DefaultOpenTimeout { get; }
    protected ChannelAcceptor`1(ChannelManagerBase channelManager);
    protected ChannelManagerBase get_ChannelManager();
    protected virtual TimeSpan get_DefaultCloseTimeout();
    protected virtual TimeSpan get_DefaultOpenTimeout();
    public abstract virtual TChannel AcceptChannel(TimeSpan timeout);
    public abstract virtual IAsyncResult BeginAcceptChannel(TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual TChannel EndAcceptChannel(IAsyncResult result);
    public abstract virtual bool WaitForChannel(TimeSpan timeout);
    public abstract virtual IAsyncResult BeginWaitForChannel(TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual bool EndWaitForChannel(IAsyncResult result);
    protected virtual void OnAbort();
    protected virtual IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnEndClose(IAsyncResult result);
    protected virtual void OnClose(TimeSpan timeout);
    protected virtual IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnEndOpen(IAsyncResult result);
    protected virtual void OnOpen(TimeSpan timeout);
}
internal static class System.Web.Http.SelfHost.ServiceModel.Channels.ChannelBindingUtility : object {
    private static ExtendedProtectionPolicy disabledPolicy;
    private static ExtendedProtectionPolicy defaultPolicy;
    private static ChannelBindingUtility();
    public static bool IsDefaultPolicy(ExtendedProtectionPolicy policy);
}
internal class System.Web.Http.SelfHost.ServiceModel.Channels.CompletedAsyncResult : AsyncResult {
    public CompletedAsyncResult(AsyncCallback callback, object state);
    public static void End(IAsyncResult result);
}
internal class System.Web.Http.SelfHost.ServiceModel.Channels.CompletedAsyncResult`1 : AsyncResult {
    private T data;
    public CompletedAsyncResult`1(T data, AsyncCallback callback, object state);
    public static T End(IAsyncResult result);
}
internal static class System.Web.Http.SelfHost.ServiceModel.Channels.HttpTransportDefaults : object {
    internal static HostNameComparisonMode HostNameComparisonMode;
    internal static TransferMode TransferMode;
}
internal interface System.Web.Http.SelfHost.ServiceModel.Channels.IChannelAcceptor`1 {
    public abstract virtual TChannel AcceptChannel(TimeSpan timeout);
    public abstract virtual IAsyncResult BeginAcceptChannel(TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual TChannel EndAcceptChannel(IAsyncResult result);
    public abstract virtual bool WaitForChannel(TimeSpan timeout);
    public abstract virtual IAsyncResult BeginWaitForChannel(TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual bool EndWaitForChannel(IAsyncResult result);
}
internal abstract class System.Web.Http.SelfHost.ServiceModel.Channels.LayeredChannel`1 : ChannelBase {
    private TInnerChannel _innerChannel;
    private EventHandler _onInnerChannelFaulted;
    protected TInnerChannel InnerChannel { get; }
    protected LayeredChannel`1(ChannelManagerBase channelManager, TInnerChannel innerChannel);
    protected TInnerChannel get_InnerChannel();
    public virtual T GetProperty();
    protected virtual void OnClosing();
    protected virtual void OnAbort();
    protected virtual void OnClose(TimeSpan timeout);
    protected virtual IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnEndClose(IAsyncResult result);
    protected virtual void OnOpen(TimeSpan timeout);
    protected virtual IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnEndOpen(IAsyncResult result);
    private void OnInnerChannelFaulted(object sender, EventArgs e);
}
internal abstract class System.Web.Http.SelfHost.ServiceModel.Channels.LayeredChannelAcceptor`2 : ChannelAcceptor`1<TChannel> {
    private IChannelListener`1<TInnerChannel> _innerListener;
    protected LayeredChannelAcceptor`2(ChannelManagerBase channelManager, IChannelListener`1<TInnerChannel> innerListener);
    public virtual TChannel AcceptChannel(TimeSpan timeout);
    public virtual IAsyncResult BeginAcceptChannel(TimeSpan timeout, AsyncCallback callback, object state);
    public virtual TChannel EndAcceptChannel(IAsyncResult result);
    public virtual bool WaitForChannel(TimeSpan timeout);
    public virtual IAsyncResult BeginWaitForChannel(TimeSpan timeout, AsyncCallback callback, object state);
    public virtual bool EndWaitForChannel(IAsyncResult result);
    protected abstract virtual TChannel OnAcceptChannel(TInnerChannel innerChannel);
}
internal abstract class System.Web.Http.SelfHost.ServiceModel.Channels.LayeredChannelListener`1 : ChannelListenerBase`1<TChannel> {
    private IChannelListener _innerChannelListener;
    private bool _sharedInnerListener;
    private EventHandler _onInnerListenerFaulted;
    public Uri Uri { get; }
    internal IChannelListener InnerChannelListener { get; internal set; }
    internal bool SharedInnerListener { get; }
    protected LayeredChannelListener`1(bool sharedInnerListener, IDefaultCommunicationTimeouts timeouts, IChannelListener innerChannelListener);
    protected LayeredChannelListener`1(bool sharedInnerListener, IDefaultCommunicationTimeouts timeouts);
    protected LayeredChannelListener`1(bool sharedInnerListener);
    protected LayeredChannelListener`1(IDefaultCommunicationTimeouts timeouts, IChannelListener innerChannelListener);
    public virtual Uri get_Uri();
    internal virtual IChannelListener get_InnerChannelListener();
    internal virtual void set_InnerChannelListener(IChannelListener value);
    internal bool get_SharedInnerListener();
    public virtual T GetProperty();
    internal void ThrowIfInnerListenerNotSet();
    internal IChannelListener GetInnerListenerSnapshot();
    protected virtual void OnOpening();
    protected virtual void OnOpen(TimeSpan timeout);
    protected virtual void OnEndOpen(IAsyncResult result);
    protected virtual IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnClose(TimeSpan timeout);
    protected virtual void OnEndClose(IAsyncResult result);
    protected virtual IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnAbort();
    private void OnInnerListenerFaulted(object sender, EventArgs e);
    private void OnCloseOrAbort();
}
internal static class System.Web.Http.SelfHost.ServiceModel.Channels.TransportDefaults : object {
    internal static long MaxReceivedMessageSize;
    internal static long MaxBufferPoolSize;
    internal static int MaxBufferSize;
    internal static int MaxFaultSize;
}
internal static class System.Web.Http.SelfHost.ServiceModel.HostNameComparisonModeHelper : object {
    public static bool IsDefined(HostNameComparisonMode value);
    public static void Validate(HostNameComparisonMode value, string parameterName);
}
internal static class System.Web.Http.SelfHost.ServiceModel.HttpClientCredentialTypeHelper : object {
    internal static AuthenticationSchemes MapToAuthenticationScheme(HttpClientCredentialType clientCredentialType);
}
internal static class System.Web.Http.SelfHost.ServiceModel.HttpProxyCredentialTypeHelper : object {
    internal static AuthenticationSchemes MapToAuthenticationScheme(HttpProxyCredentialType proxyCredentialType);
}
[ExtensionAttribute]
internal static class System.Web.Http.SelfHost.ServiceModel.HttpTransportSecurityExtensionMethods : object {
    [ExtensionAttribute]
internal static void ConfigureTransportProtectionAndAuthentication(HttpTransportSecurity httpTransportSecurity, HttpsTransportBindingElement httpsTransportBindingElement);
    [ExtensionAttribute]
internal static void ConfigureTransportAuthentication(HttpTransportSecurity httpTransportSecurity, HttpTransportBindingElement httpTransportBindingElement);
    [ExtensionAttribute]
internal static void DisableTransportAuthentication(HttpTransportSecurity httpTransportSecurity, HttpTransportBindingElement httpTransportBindingElement);
    [ExtensionAttribute]
private static void ConfigureAuthentication(HttpTransportSecurity httpTransportSecurity, HttpTransportBindingElement httpTransportBindingElement);
}
internal static class System.Web.Http.SelfHost.ServiceModel.TransferModeHelper : object {
    public static bool IsDefined(TransferMode transferMode);
    public static void Validate(TransferMode value, string parameterValue);
}
