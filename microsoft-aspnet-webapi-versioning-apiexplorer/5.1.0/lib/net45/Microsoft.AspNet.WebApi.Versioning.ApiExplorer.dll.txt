[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
internal static class Microsoft.Web.Http.CollectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static int IndexOf(IEnumerable`1<TItem> sequence, TItem item, IEqualityComparer`1<TItem> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Description.ApiDescriptionComparer : object {
    private StringComparer comparer;
    public virtual bool Equals(VersionedApiDescription x, VersionedApiDescription y);
    public virtual int GetHashCode(VersionedApiDescription obj);
    public virtual bool Equals(ApiDescription x, ApiDescription y);
    public virtual int GetHashCode(ApiDescription obj);
    public virtual int Compare(VersionedApiDescription x, VersionedApiDescription y);
    public virtual int Compare(ApiDescription x, ApiDescription y);
    [NullableContextAttribute("2")]
private int CompareStrings(string string1, string string2);
    private static int CompareVersions(ApiVersion version1, ApiVersion version2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("ApiVersion = {ApiVersion}, Count = {ApiDescriptions.Count}")]
public class Microsoft.Web.Http.Description.ApiDescriptionGroup : object {
    [CompilerGeneratedAttribute]
private ApiVersion <ApiVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<VersionedApiDescription> <ApiDescriptions>k__BackingField;
    public ApiVersion ApiVersion { get; }
    public string Name { get; public set; }
    public bool IsDeprecated { get; }
    public Collection`1<VersionedApiDescription> ApiDescriptions { get; }
    public ApiDescriptionGroup(ApiVersion apiVersion);
    [CompilerGeneratedAttribute]
public ApiVersion get_ApiVersion();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public virtual bool get_IsDeprecated();
    [CompilerGeneratedAttribute]
public virtual Collection`1<VersionedApiDescription> get_ApiDescriptions();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.Web.Http.Description.ApiDescriptionGroupCollection : KeyedCollection`2<ApiVersion, ApiDescriptionGroup> {
    public IReadOnlyList`1<ApiVersion> ApiVersions { get; }
    protected virtual ApiVersion GetKeyForItem(ApiDescriptionGroup item);
    public virtual ApiDescriptionGroup GetOrAdd(ApiVersion apiVersion);
    public virtual ApiDescriptionGroup GetOrAdd(ApiVersion apiVersion, Func`2<ApiVersion, string> formatName);
    public virtual IReadOnlyList`1<ApiVersion> get_ApiVersions();
    public virtual Collection`1<ApiDescription> Flatten();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Description.ApiExplorerOptions : object {
    private Lazy`1<ApiVersioningOptions> versioningOptions;
    [CompilerGeneratedAttribute]
private string <GroupNameFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubstitutionFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SubstituteApiVersionInUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultApiVersionParameterDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddApiVersionParametersWhenVersionNeutral>k__BackingField;
    public ApiVersion DefaultApiVersion { get; }
    public bool AssumeDefaultVersionWhenUnspecified { get; }
    public IApiVersionParameterSource ApiVersionParameterSource { get; }
    public string GroupNameFormat { get; public set; }
    public string SubstitutionFormat { get; public set; }
    public bool SubstituteApiVersionInUrl { get; public set; }
    public string DefaultApiVersionParameterDescription { get; public set; }
    public bool AddApiVersionParametersWhenVersionNeutral { get; public set; }
    public ApiExplorerOptions(HttpConfiguration configuration);
    public ApiVersion get_DefaultApiVersion();
    public bool get_AssumeDefaultVersionWhenUnspecified();
    public IApiVersionParameterSource get_ApiVersionParameterSource();
    [CompilerGeneratedAttribute]
public string get_GroupNameFormat();
    [CompilerGeneratedAttribute]
public void set_GroupNameFormat(string value);
    [CompilerGeneratedAttribute]
public string get_SubstitutionFormat();
    [CompilerGeneratedAttribute]
public void set_SubstitutionFormat(string value);
    [CompilerGeneratedAttribute]
public bool get_SubstituteApiVersionInUrl();
    [CompilerGeneratedAttribute]
public void set_SubstituteApiVersionInUrl(bool value);
    [CompilerGeneratedAttribute]
public string get_DefaultApiVersionParameterDescription();
    [CompilerGeneratedAttribute]
public void set_DefaultApiVersionParameterDescription(string value);
    [CompilerGeneratedAttribute]
public bool get_AddApiVersionParametersWhenVersionNeutral();
    [CompilerGeneratedAttribute]
public void set_AddApiVersionParametersWhenVersionNeutral(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Description.ApiVersionParameterDescriptionContext : object {
    private List`1<ApiParameterDescription> parameters;
    private Lazy`1<bool> versionNeutral;
    private bool optional;
    [CompilerGeneratedAttribute]
private ApiDescription <ApiDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiVersion <ApiVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiExplorerOptions <Options>k__BackingField;
    protected ApiDescription ApiDescription { get; }
    protected ApiVersion ApiVersion { get; }
    protected bool IsApiVersionNeutral { get; }
    protected ApiExplorerOptions Options { get; }
    private bool HasPathParameter { get; }
    public ApiVersionParameterDescriptionContext(ApiDescription apiDescription, ApiVersion apiVersion, ApiExplorerOptions options);
    [CompilerGeneratedAttribute]
protected ApiDescription get_ApiDescription();
    [CompilerGeneratedAttribute]
protected ApiVersion get_ApiVersion();
    protected bool get_IsApiVersionNeutral();
    [CompilerGeneratedAttribute]
protected ApiExplorerOptions get_Options();
    private bool get_HasPathParameter();
    public virtual void AddParameter(string name, ApiVersionParameterLocation location);
    protected virtual void AddQueryString(string name);
    protected virtual void AddHeader(string name);
    protected virtual void UpdateUrlSegment();
    protected virtual void AddMediaTypeParameter(string name);
    private ApiParameterDescription NewApiVersionParameter(string name, ApiParameterSource source);
    private ApiParameterDescription NewApiVersionParameter(string name, ApiParameterSource source, bool allowOptional);
    private void RemoveAllParametersExcept(ApiParameterDescription parameter);
    private static void CloneFormattersAndAddMediaTypeParameter(NameValueHeaderValue parameter, ICollection`1<MediaTypeFormatter> formatters);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__3_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Description.ApiVersionParameterDescriptor : HttpParameterDescriptor {
    private string parameterName;
    private object defaultValue;
    private bool optional;
    [CompilerGeneratedAttribute]
private bool <FromPath>k__BackingField;
    public string ParameterName { get; }
    public Type ParameterType { get; }
    public object DefaultValue { get; }
    public bool IsOptional { get; }
    public bool FromPath { get; }
    internal ApiVersionParameterDescriptor(string parameterName, object defaultValue, bool optional, bool fromPath);
    public virtual string get_ParameterName();
    public virtual Type get_ParameterType();
    public virtual object get_DefaultValue();
    public virtual bool get_IsOptional();
    [CompilerGeneratedAttribute]
public bool get_FromPath();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Microsoft.Web.Http.Description.VersionedApiDescription : ApiDescription {
    private static Lazy`1<Action`2<ApiDescription, ResponseDescription>> setResponseDescription;
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiVersion <ApiVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeprecated>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <Properties>k__BackingField;
    public string GroupName { get; public set; }
    public ApiVersion ApiVersion { get; public set; }
    public bool IsDeprecated { get; public set; }
    public ResponseDescription ResponseDescription { get; public set; }
    public IDictionary`2<object, object> Properties { get; }
    private string DebuggerDisplay { get; }
    private static VersionedApiDescription();
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
public void set_GroupName(string value);
    [CompilerGeneratedAttribute]
public ApiVersion get_ApiVersion();
    [CompilerGeneratedAttribute]
public void set_ApiVersion(ApiVersion value);
    [CompilerGeneratedAttribute]
public bool get_IsDeprecated();
    [CompilerGeneratedAttribute]
public void set_IsDeprecated(bool value);
    public ResponseDescription get_ResponseDescription();
    public void set_ResponseDescription(ResponseDescription value);
    [CompilerGeneratedAttribute]
public IDictionary`2<object, object> get_Properties();
    private static Action`2<ApiDescription, ResponseDescription> CreateSetResponseDescriptionMutator();
    private string get_DebuggerDisplay();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Description.VersionedApiExplorer : object {
    private static Regex actionVariableRegex;
    private static Regex controllerVariableRegex;
    private Lazy`1<ApiDescriptionGroupCollection> apiDescriptions;
    [NullableAttribute("2")]
private IDocumentationProvider documentationProvider;
    [CompilerGeneratedAttribute]
private HttpConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiExplorerOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiDescriptionComparer <Comparer>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteParser <RouteParser>k__BackingField;
    protected HttpConfiguration Configuration { get; }
    protected ApiExplorerOptions Options { get; }
    protected ApiDescriptionComparer Comparer { get; }
    protected RouteParser RouteParser { get; }
    private Collection`1<ApiDescription> System.Web.Http.Description.IApiExplorer.ApiDescriptions { get; }
    public ApiDescriptionGroupCollection ApiDescriptions { get; }
    public IDocumentationProvider DocumentationProvider { get; public set; }
    public VersionedApiExplorer(HttpConfiguration configuration);
    public VersionedApiExplorer(HttpConfiguration configuration, ApiExplorerOptions options);
    private static VersionedApiExplorer();
    [CompilerGeneratedAttribute]
protected HttpConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
protected virtual ApiExplorerOptions get_Options();
    [CompilerGeneratedAttribute]
protected virtual ApiDescriptionComparer get_Comparer();
    [CompilerGeneratedAttribute]
protected virtual RouteParser get_RouteParser();
    private sealed virtual override Collection`1<ApiDescription> System.Web.Http.Description.IApiExplorer.get_ApiDescriptions();
    public virtual ApiDescriptionGroupCollection get_ApiDescriptions();
    public IDocumentationProvider get_DocumentationProvider();
    public void set_DocumentationProvider(IDocumentationProvider value);
    protected virtual Collection`1<HttpMethod> GetHttpMethodsSupportedByAction(IHttpRoute route, HttpActionDescriptor actionDescriptor);
    protected virtual bool ShouldExploreAction(string actionRouteParameterValue, HttpActionDescriptor actionDescriptor, IHttpRoute route, ApiVersion apiVersion);
    protected virtual bool ShouldExploreController(string controllerRouteParameterValue, HttpControllerDescriptor controllerDescriptor, IHttpRoute route, ApiVersion apiVersion);
    protected virtual string GetGroupName(ApiVersion apiVersion);
    protected virtual ApiDescriptionGroupCollection InitializeApiDescriptions();
    protected virtual void SortApiDescriptionGroup(ApiDescriptionGroup apiDescriptionGroup);
    protected virtual bool TryExpandUriParameters(IHttpRoute route, IParsedRoute parsedRoute, ICollection`1<ApiParameterDescription> parameterDescriptions, String& expandedRouteTemplate);
    private static bool IsApiVersionRouteParameter(ApiParameterDescription parameter, IEnumerable`1<object> constraints);
    private static bool IsApiVersionRouteParameter(Type parameterType, IEnumerable`1<object> constraints);
    [IteratorStateMachineAttribute("Microsoft.Web.Http.Description.VersionedApiExplorer/<FlattenRoutes>d__34")]
private static IEnumerable`1<IHttpRoute> FlattenRoutes(IEnumerable`1<IHttpRoute> routes);
    private IEnumerable`1<ApiVersion> FlattenApiVersions(IDictionary`2<string, HttpControllerDescriptor> controllerMapping);
    private static HttpControllerDescriptor FindControllerDescriptor(IEnumerable`1<HttpControllerDescriptor> controllerDescriptors, Type controllerType);
    private static HttpControllerDescriptor GetDirectRouteController(CandidateAction[] candidates, ApiVersion apiVersion);
    protected virtual Collection`1<VersionedApiDescription> ExploreDirectRouteControllers(HttpControllerDescriptor controllerDescriptor, IReadOnlyList`1<HttpActionDescriptor> candidateActionDescriptors, IHttpRoute route, ApiVersion apiVersion);
    protected virtual Collection`1<VersionedApiDescription> ExploreRouteControllers(IDictionary`2<string, HttpControllerDescriptor> controllerMappings, IHttpRoute route, ApiVersion apiVersion);
    protected virtual void PopulateApiVersionParameters(ApiDescription apiDescription, ApiVersion apiVersion);
    private void ExploreRouteActions(IHttpRoute route, string localPath, HttpControllerDescriptor controllerDescriptor, Collection`1<VersionedApiDescription> apiDescriptions, ApiVersion apiVersion);
    private void PopulateActionDescriptions(IEnumerable`1<HttpActionDescriptor> actionDescriptors, string actionVariableValue, IHttpRoute route, string localPath, Collection`1<VersionedApiDescription> apiDescriptions, ApiVersion apiVersion);
    private void PopulateActionDescriptions(HttpActionDescriptor actionDescriptor, IHttpRoute route, string localPath, Collection`1<VersionedApiDescription> apiDescriptions, ApiVersion apiVersion);
    protected virtual ResponseDescription CreateResponseDescription(HttpActionDescriptor actionDescriptor);
    private static IEnumerable`1<MediaTypeFormatter> GetInnerFormatters(IEnumerable`1<MediaTypeFormatter> mediaTypeFormatters);
    private static bool ShouldEmitPrefixes(ICollection`1<ApiParameterDescription> parameterDescriptions);
    private static Type GetCollectionElementType(Type collectionType);
    private static void AddPlaceholderForProperties(Dictionary`2<string, object> parameterValuesForRoute, IEnumerable`1<PropertyInfo> properties, string prefix);
    private static bool IsBindableCollection(Type type);
    private static bool IsBindableDictionry(Type type);
    private static bool IsBindableKeyValuePair(Type type);
    private static void AddPlaceholder(IDictionary`2<string, object> parameterValuesForRoute, string queryParameterName);
    private IList`1<ApiParameterDescription> CreateParameterDescriptions(HttpActionDescriptor actionDescriptor, IParsedRoute parsedRoute, IDictionary`2<string, object> routeDefaults);
    private static void AddUndeclaredRouteParameters(IParsedRoute parsedRoute, IDictionary`2<string, object> routeDefaults, IList`1<ApiParameterDescription> parameterDescriptions);
    protected virtual ApiParameterDescription CreateParameterDescription(HttpParameterDescriptor parameterDescriptor);
    private ApiParameterDescription CreateParameterDescriptionFromBinding(HttpParameterBinding parameterBinding);
    private static Collection`1<VersionedApiDescription> RemoveInvalidApiDescriptions(Collection`1<VersionedApiDescription> apiDescriptions, ApiVersion apiVersion);
    private static bool MatchRegexConstraint(IHttpRoute route, string parameterName, string parameterValue);
    private static HttpActionBinding GetActionBinding(HttpActionDescriptor actionDescriptor);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Web.Http.LocalSR : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DefaultApiVersionParamDesc { get; }
    internal static string MediaTypeFormatterNotCloneable { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DefaultApiVersionParamDesc();
    internal static string get_MediaTypeFormatterNotCloneable();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Web.Http.Routing.BoundRouteTemplateAdapter`1 : object {
    private static Lazy`1<Func`2<T, string>> boundTemplateAccessor;
    private static Lazy`1<Action`2<T, string>> boundTemplateMutator;
    private static Lazy`1<Func`2<T, HttpRouteValueDictionary>> valuesAccessor;
    private static Lazy`1<Action`2<T, HttpRouteValueDictionary>> valuesMutator;
    private T adapted;
    public string BoundTemplate { get; public set; }
    public HttpRouteValueDictionary Values { get; public set; }
    public BoundRouteTemplateAdapter`1(T adapted);
    private static BoundRouteTemplateAdapter`1();
    public sealed virtual string get_BoundTemplate();
    public sealed virtual void set_BoundTemplate(string value);
    public sealed virtual HttpRouteValueDictionary get_Values();
    public sealed virtual void set_Values(HttpRouteValueDictionary value);
    private static Func`2<T, string> NewBoundTemplateAccessor();
    private static Action`2<T, string> NewBoundTemplateMutator();
    private static Func`2<T, HttpRouteValueDictionary> NewValuesAccessor();
    private static Action`2<T, HttpRouteValueDictionary> NewValuesMutator();
}
[NullableContextAttribute("1")]
public interface Microsoft.Web.Http.Routing.IBoundRouteTemplate {
    public string BoundTemplate { get; public set; }
    public HttpRouteValueDictionary Values { get; public set; }
    public abstract virtual string get_BoundTemplate();
    public abstract virtual void set_BoundTemplate(string value);
    public abstract virtual HttpRouteValueDictionary get_Values();
    public abstract virtual void set_Values(HttpRouteValueDictionary value);
}
[NullableContextAttribute("1")]
public interface Microsoft.Web.Http.Routing.IParsedRoute {
    public IReadOnlyList`1<IPathSegment> PathSegments { get; }
    public abstract virtual IBoundRouteTemplate Bind(IDictionary`2<string, object> currentValues, IDictionary`2<string, object> values, HttpRouteValueDictionary defaultValues, HttpRouteValueDictionary constraints);
    public abstract virtual IReadOnlyList`1<IPathSegment> get_PathSegments();
}
[NullableContextAttribute("1")]
public interface Microsoft.Web.Http.Routing.IPathContentSegment {
    public bool IsCatchAll { get; }
    public IReadOnlyList`1<IPathSubsegment> Subsegments { get; }
    public abstract virtual bool get_IsCatchAll();
    public abstract virtual IReadOnlyList`1<IPathSubsegment> get_Subsegments();
}
[NullableContextAttribute("1")]
public interface Microsoft.Web.Http.Routing.IPathLiteralSubsegment {
    public string Literal { get; }
    public abstract virtual string get_Literal();
}
[NullableContextAttribute("1")]
public interface Microsoft.Web.Http.Routing.IPathParameterSubsegment {
    public bool IsCatchAll { get; }
    public string ParameterName { get; }
    public abstract virtual bool get_IsCatchAll();
    public abstract virtual string get_ParameterName();
}
public interface Microsoft.Web.Http.Routing.IPathSegment {
}
public interface Microsoft.Web.Http.Routing.IPathSeparatorSegment {
}
public interface Microsoft.Web.Http.Routing.IPathSubsegment {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Web.Http.Routing.ParsedRouteAdapter`1 : object {
    private static Lazy`1<Func`2<T, IEnumerable`1<object>>> pathSegmentsAccessor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Lazy`1<Func`6<T, IDictionary`2<string, object>, IDictionary`2<string, object>, HttpRouteValueDictionary, HttpRouteValueDictionary, object>> bindFunc;
    private T adapted;
    private Lazy`1<IReadOnlyList`1<IPathSegment>> pathSegments;
    public IReadOnlyList`1<IPathSegment> PathSegments { get; }
    public ParsedRouteAdapter`1(T adapted);
    private static ParsedRouteAdapter`1();
    public sealed virtual IBoundRouteTemplate Bind(IDictionary`2<string, object> currentValues, IDictionary`2<string, object> values, HttpRouteValueDictionary defaultValues, HttpRouteValueDictionary constraints);
    public sealed virtual IReadOnlyList`1<IPathSegment> get_PathSegments();
    private IReadOnlyList`1<IPathSegment> AdaptToPathSegments();
    private static Func`2<T, IEnumerable`1<object>> NewPathSegmentsAccessor();
    private static Func`6<T, IDictionary`2<string, object>, IDictionary`2<string, object>, HttpRouteValueDictionary, HttpRouteValueDictionary, object> NewBindFunc();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Web.Http.Routing.PathContentSegmentAdapter`1 : object {
    private static Lazy`1<Func`2<T, bool>> catchAllAccessor;
    private static Lazy`1<Func`2<T, IEnumerable`1<object>>> subsegmentsAccessor;
    private T adapted;
    private Lazy`1<IReadOnlyList`1<IPathSubsegment>> subsegments;
    public bool IsCatchAll { get; }
    public IReadOnlyList`1<IPathSubsegment> Subsegments { get; }
    public PathContentSegmentAdapter`1(T adapted);
    private static PathContentSegmentAdapter`1();
    public sealed virtual bool get_IsCatchAll();
    public sealed virtual IReadOnlyList`1<IPathSubsegment> get_Subsegments();
    public virtual string ToString();
    private IReadOnlyList`1<IPathSubsegment> AdaptToPathSubsegments();
    private static Func`2<T, bool> NewCatchAllAccessor();
    private static Func`2<T, IEnumerable`1<object>> NewSubsegmentsAccessor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Web.Http.Routing.PathLiteralSubsegmentAdapter`1 : object {
    private static Lazy`1<Func`2<T, string>> literalAccessor;
    private T adapted;
    public string Literal { get; }
    public PathLiteralSubsegmentAdapter`1(T adapted);
    private static PathLiteralSubsegmentAdapter`1();
    public sealed virtual string get_Literal();
    public virtual string ToString();
    private static Func`2<T, string> NewLiteralAccessor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Web.Http.Routing.PathParameterSubsegmentAdapter`1 : object {
    private static Lazy`1<Func`2<T, bool>> catchAllAccessor;
    private static Lazy`1<Func`2<T, string>> parameterNameAccessor;
    private T adapted;
    public bool IsCatchAll { get; }
    public string ParameterName { get; }
    public PathParameterSubsegmentAdapter`1(T adapted);
    private static PathParameterSubsegmentAdapter`1();
    public sealed virtual bool get_IsCatchAll();
    public sealed virtual string get_ParameterName();
    public virtual string ToString();
    private static Func`2<T, bool> NewCatchAllAccessor();
    private static Func`2<T, string> NewParameterNameAccessor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Web.Http.Routing.PathSeparatorSegmentAdapter`1 : object {
    private T adapted;
    public PathSeparatorSegmentAdapter`1(T adapted);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Routing.RouteParser : object {
    private static Lazy`1<Func`1<IParsedRoute>> createNewFunc;
    private static Lazy`1<Func`2<string, object>> parseFunc;
    private static RouteParser();
    public virtual IParsedRoute CreateNew();
    public virtual IParsedRoute Parse(string routeTemplate);
    private static Func`1<IParsedRoute> CreateNewFunc();
    private static Func`2<string, object> NewParseFunc();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Web.Http.TypeExtensions : object {
    [ExtensionAttribute]
internal static Type[] GetTypeArgumentsIfMatch(Type closedType, Type matchingOpenType);
    [ExtensionAttribute]
internal static IEnumerable`1<PropertyInfo> GetBindableProperties(Type type);
    [ExtensionAttribute]
internal static Type[] GetGenericBinderTypeArgs(Type supportedInterfaceType, Type modelType);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[ExtensionAttribute]
internal static class System.StringExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static string Replace(string string, string oldValue, string newValue, StringComparison comparisonType);
}
[ExtensionAttribute]
internal static class System.Web.Http.Controllers.HttpActionDescriptorExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static IList`1<HttpMethod> GetHttpMethods(HttpActionDescriptor actionDescriptor, IHttpRoute route);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Web.Http.Description.ApiDescriptionExtensions : object {
    [ExtensionAttribute]
public static ApiVersion GetApiVersion(ApiDescription apiDescription);
    [ExtensionAttribute]
public static bool IsDeprecated(ApiDescription apiDescription);
    [ExtensionAttribute]
public static string GetGroupName(ApiDescription apiDescription);
    [ExtensionAttribute]
public static string GetUniqueID(ApiDescription apiDescription);
    [ExtensionAttribute]
public static bool TryUpdateRelativePathAndRemoveApiVersionParameter(ApiDescription apiDescription, ApiExplorerOptions options);
    [ExtensionAttribute]
public static T GetProperty(VersionedApiDescription apiDescription);
    [ExtensionAttribute]
public static void SetProperty(VersionedApiDescription apiDescription, T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Web.Http.Description.ApiParameterDescriptionExtensions : object {
    [ExtensionAttribute]
internal static IEnumerable`1<PropertyInfo> GetBindableProperties(ApiParameterDescription description);
    [ExtensionAttribute]
internal static bool CanConvertPropertiesFromString(ApiParameterDescription description);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Web.Http.HttpConfigurationExtensions : object {
    [ExtensionAttribute]
public static VersionedApiExplorer AddVersionedApiExplorer(HttpConfiguration configuration);
    [ExtensionAttribute]
public static VersionedApiExplorer AddVersionedApiExplorer(HttpConfiguration configuration, Action`1<ApiExplorerOptions> setupAction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Web.Http.MediaTypeFormatterAdapterFactory : object {
    private static ConcurrentDictionary`2<Type, Func`2<MediaTypeFormatter, MediaTypeFormatter>> cloneFunctions;
    private static MediaTypeFormatterAdapterFactory();
    internal static Func`2<MediaTypeFormatter, MediaTypeFormatter> GetOrCreateCloneFunction(MediaTypeFormatter formatter);
    private static MediaTypeFormatter UseICloneable(MediaTypeFormatter instance);
    private static Func`2<MediaTypeFormatter, MediaTypeFormatter> NewCloneFunction(Type type);
    private static Func`2<MediaTypeFormatter, MediaTypeFormatter> NewCopyConstructorActivator(Type type);
    private static Func`2<MediaTypeFormatter, MediaTypeFormatter> ReinitializeSupportedMediaTypes(Func`2<MediaTypeFormatter, MediaTypeFormatter> clone);
    private static Func`2<MediaTypeFormatter, MediaTypeFormatter> NewParameterlessConstructorActivator(Type type);
    private static MediaTypeFormatter CloneMediaTypes(MediaTypeFormatter target, MediaTypeFormatter source);
}
[ExtensionAttribute]
internal static class System.Web.Http.MediaTypeFormatterExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static MediaTypeFormatter Clone(MediaTypeFormatter formatter);
}
