[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.StringExtensions : object {
    [ExtensionAttribute]
internal static string FormatInvariant(string format, Object[] args);
    [ExtensionAttribute]
internal static string FormatDefault(string format, Object[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.TypeExtensions : object {
    private static Dictionary`2<Type, string> BuiltInTypeNames;
    private static TypeExtensions();
    [ExtensionAttribute]
internal static string GetTypeDisplayName(Type type, bool fullName, bool includeGenericParameterNames);
    private static void ProcessType(StringBuilder builder, Type type, DisplayNameOptions options);
    private static void ProcessArrayType(StringBuilder builder, Type type, DisplayNameOptions options);
    private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, DisplayNameOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("68")]
public class Microsoft.Web.Http.AdvertiseApiVersionsAttribute : ApiVersionsBaseAttribute {
    private ApiVersionProviderOptions options;
    private ApiVersionProviderOptions Microsoft.Web.Http.Versioning.IApiVersionProvider.Options { get; }
    public bool Deprecated { get; public set; }
    protected AdvertiseApiVersionsAttribute(ApiVersion version);
    protected AdvertiseApiVersionsAttribute(ApiVersion[] versions);
    public AdvertiseApiVersionsAttribute(string version);
    [CLSCompliantAttribute("False")]
public AdvertiseApiVersionsAttribute(String[] versions);
    private sealed virtual override ApiVersionProviderOptions Microsoft.Web.Http.Versioning.IApiVersionProvider.get_Options();
    public bool get_Deprecated();
    public void set_Deprecated(bool value);
    public virtual int GetHashCode();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.ApiVersion : object {
    private static int Prime;
    [NullableAttribute("1")]
private static string ParsePattern;
    [NullableAttribute("1")]
private static string GroupVersionFormat;
    private int hashCode;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private static ApiVersion <Default>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private static ApiVersion <Neutral>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <GroupVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MajorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [NullableAttribute("1")]
public static ApiVersion Default { get; }
    [NullableAttribute("1")]
public static ApiVersion Neutral { get; }
    public Nullable`1<DateTime> GroupVersion { get; }
    public Nullable`1<int> MajorVersion { get; }
    public Nullable`1<int> MinorVersion { get; }
    private int ImpliedMinorVersion { get; }
    public string Status { get; }
    public ApiVersion(DateTime groupVersion);
    [NullableContextAttribute("1")]
public ApiVersion(DateTime groupVersion, string status);
    public ApiVersion(int majorVersion, int minorVersion);
    public ApiVersion(int majorVersion, int minorVersion, string status);
    public ApiVersion(DateTime groupVersion, int majorVersion, int minorVersion);
    public ApiVersion(DateTime groupVersion, int majorVersion, int minorVersion, string status);
    internal ApiVersion(Nullable`1<DateTime> groupVersion, Nullable`1<int> majorVersion, Nullable`1<int> minorVersion, string status);
    private static ApiVersion();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static ApiVersion get_Default();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static ApiVersion get_Neutral();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_GroupVersion();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MajorVersion();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinorVersion();
    private int get_ImpliedMinorVersion();
    [CompilerGeneratedAttribute]
public string get_Status();
    public static bool IsValidStatus(string status);
    [NullableContextAttribute("1")]
public static ApiVersion Parse(string text);
    public static bool TryParse(string text, ApiVersion& version);
    [NullableContextAttribute("1")]
public virtual string ToString(string format);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ApiVersion version1, ApiVersion version2);
    public static bool op_Inequality(ApiVersion version1, ApiVersion version2);
    public static bool op_LessThan(ApiVersion version1, ApiVersion version2);
    public static bool op_LessThanOrEqual(ApiVersion version1, ApiVersion version2);
    public static bool op_GreaterThan(ApiVersion version1, ApiVersion version2);
    public static bool op_GreaterThanOrEqual(ApiVersion version1, ApiVersion version2);
    public virtual bool Equals(ApiVersion other);
    public virtual int CompareTo(ApiVersion other);
    public virtual string ToString(string format, IFormatProvider formatProvider);
}
[AttributeUsageAttribute("68")]
public class Microsoft.Web.Http.ApiVersionAttribute : ApiVersionsBaseAttribute {
    private ApiVersionProviderOptions options;
    private ApiVersionProviderOptions Microsoft.Web.Http.Versioning.IApiVersionProvider.Options { get; }
    public bool Deprecated { get; public set; }
    [NullableContextAttribute("1")]
protected ApiVersionAttribute(ApiVersion version);
    [NullableContextAttribute("1")]
public ApiVersionAttribute(string version);
    private sealed virtual override ApiVersionProviderOptions Microsoft.Web.Http.Versioning.IApiVersionProvider.get_Options();
    public bool get_Deprecated();
    public void set_Deprecated(bool value);
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("68")]
public class Microsoft.Web.Http.ApiVersionNeutralAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Web.Http.CollectionExtensions : object {
    [ExtensionAttribute]
internal static bool TryGetValue(IDictionary`2<TKey, object> dictionary, TKey key, TValue& value);
    [ExtensionAttribute]
internal static List`1<T> AsList(IEnumerable`1<T> sequence);
    [ExtensionAttribute]
internal static IReadOnlyList`1<T> ToSortedReadOnlyList(IEnumerable`1<T> sequence);
    [ExtensionAttribute]
internal static void AddRange(ICollection`1<T> collection, IEnumerable`1<T> items);
    [ExtensionAttribute]
internal static string EnsureZeroOrOneApiVersions(ICollection`1<string> apiVersions);
    [ExtensionAttribute]
internal static void UnionWith(ICollection`1<T> collection, IEnumerable`1<T> other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.Web.Http.ControllerNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public ControllerNameAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Controllers.ApiVersionActionSelector : object {
    private object cacheKey;
    [NullableAttribute("2")]
private ActionSelectorCacheItem fastCache;
    public virtual HttpActionDescriptor SelectAction(HttpControllerContext controllerContext);
    public virtual ILookup`2<string, HttpActionDescriptor> GetActionMapping(HttpControllerDescriptor controllerDescriptor);
    protected virtual HttpActionDescriptor SelectActionVersion(HttpControllerContext controllerContext, IReadOnlyList`1<HttpActionDescriptor> candidateActions);
    private static Exception CreateAmbiguousActionException(IEnumerable`1<HttpActionDescriptor> matches);
    private ActionSelectorCacheItem GetInternalSelector(HttpControllerDescriptor controllerDescriptor);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private <>f__AnonymousType0`2<HttpControllerDescriptor, ActionSelectorCacheItem> <GetActionMapping>b__6_0(HttpControllerDescriptor descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Controllers.ApiVersionParameterBinding : HttpParameterBinding {
    private static Task CompletedTask;
    public ApiVersionParameterBinding(HttpParameterDescriptor descriptor);
    private static ApiVersionParameterBinding();
    public virtual Task ExecuteBindingAsync(ModelMetadataProvider metadataProvider, HttpActionContext actionContext, CancellationToken cancellationToken);
    public static HttpParameterBinding Create(HttpParameterDescriptor descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.Web.Http.Controllers.HttpControllerDescriptorGroup : HttpControllerDescriptor {
    private IReadOnlyList`1<HttpControllerDescriptor> descriptors;
    public HttpControllerDescriptor Item { get; }
    public int Count { get; }
    public HttpControllerDescriptorGroup(HttpControllerDescriptor[] controllerDescriptors);
    public HttpControllerDescriptorGroup(HttpConfiguration configuration, string controllerName, HttpControllerDescriptor[] controllerDescriptors);
    public HttpControllerDescriptorGroup(IReadOnlyList`1<HttpControllerDescriptor> controllerDescriptors);
    public HttpControllerDescriptorGroup(HttpConfiguration configuration, string controllerName, IReadOnlyList`1<HttpControllerDescriptor> controllerDescriptors);
    public virtual IHttpController CreateController(HttpRequestMessage request);
    [NullableContextAttribute("0")]
public virtual Collection`1<T> GetCustomAttributes(bool inherit);
    public virtual Collection`1<IFilter> GetFilters();
    public sealed virtual IEnumerator`1<HttpControllerDescriptor> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual HttpControllerDescriptor get_Item(int index);
    public sealed virtual int get_Count();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Dispatcher.ApiVersionControllerSelector : object {
    private HttpConfiguration configuration;
    private ApiVersioningOptions options;
    private HttpControllerTypeCache controllerTypeCache;
    private Lazy`1<ConcurrentDictionary`2<string, HttpControllerDescriptorGroup>> controllerInfoCache;
    public ApiVersionControllerSelector(HttpConfiguration configuration, ApiVersioningOptions options);
    public virtual IDictionary`2<string, HttpControllerDescriptor> GetControllerMapping();
    public virtual HttpControllerDescriptor SelectController(HttpRequestMessage request);
    public virtual string GetControllerName(HttpRequestMessage request);
    private ConcurrentDictionary`2<string, HttpControllerDescriptorGroup> InitializeControllerInfoCache();
    private static bool IsDecoratedWithAttributes(HttpControllerDescriptor controller);
    private static void ApplyImplicitConventions(HttpControllerDescriptor controller, IHttpActionSelector actionSelector, ApiVersionModel implicitVersionModel);
    private static void ApplyAttributeOrImplicitConventions(HttpControllerDescriptor controller, IHttpActionSelector actionSelector, ApiVersionModel implicitVersionModel);
    private static HttpControllerDescriptor[] ApplyCollatedModels(List`1<HttpControllerDescriptor> controllers, IHttpActionSelector actionSelector);
    private static void EnsureRequestHasValidApiVersion(HttpRequestMessage request);
    private static void EnsureUrlHelper(HttpRequestMessage request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Web.Http.Dispatcher.ControllerSelectionContext : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<string> controllerName;
    private Lazy`1<ConcurrentDictionary`2<string, HttpControllerDescriptorGroup>> controllerInfoCache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<CandidateAction[]> conventionRouteCandidates;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<CandidateAction[]> directRouteCandidates;
    private Lazy`1<ApiVersionModel> allVersions;
    private ApiVersionRequestProperties requestProperties;
    [CompilerGeneratedAttribute]
private HttpRequestMessage <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpRouteData <RouteData>k__BackingField;
    internal HttpRequestMessage Request { get; }
    internal IHttpRouteData RouteData { get; }
    [NullableAttribute("2")]
internal string ControllerName { get; }
    [NullableAttribute("2")]
internal ApiVersion RequestedVersion { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal CandidateAction[] ConventionRouteCandidates { get; }
    internal bool HasConventionBasedRoutes { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal CandidateAction[] DirectRouteCandidates { get; }
    internal bool HasAttributeBasedRoutes { get; }
    internal ApiVersionModel AllVersions { get; }
    internal ControllerSelectionContext(HttpRequestMessage request, Func`2<HttpRequestMessage, string> controllerName, Lazy`1<ConcurrentDictionary`2<string, HttpControllerDescriptorGroup>> controllerInfoCache);
    [CompilerGeneratedAttribute]
internal HttpRequestMessage get_Request();
    [CompilerGeneratedAttribute]
internal IHttpRouteData get_RouteData();
    [NullableContextAttribute("2")]
internal string get_ControllerName();
    [NullableContextAttribute("2")]
internal ApiVersion get_RequestedVersion();
    [NullableContextAttribute("2")]
internal void set_RequestedVersion(ApiVersion value);
    internal CandidateAction[] get_ConventionRouteCandidates();
    internal bool get_HasConventionBasedRoutes();
    internal CandidateAction[] get_DirectRouteCandidates();
    internal bool get_HasAttributeBasedRoutes();
    internal ApiVersionModel get_AllVersions();
    private CandidateAction[] GetConventionRouteCandidates();
    private ApiVersionModel CreateAggregatedModel();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Web.Http.Dispatcher.ControllerSelectionResult : object {
    [CompilerGeneratedAttribute]
private HttpControllerDescriptor <Controller>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ControllerName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasCandidates>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiVersion <RequestedVersion>k__BackingField;
    internal HttpControllerDescriptor Controller { get; internal set; }
    internal string ControllerName { get; internal set; }
    internal bool Succeeded { get; }
    internal bool CouldMatchVersion { get; }
    internal bool HasCandidates { get; internal set; }
    internal ApiVersion RequestedVersion { get; internal set; }
    [CompilerGeneratedAttribute]
internal HttpControllerDescriptor get_Controller();
    [CompilerGeneratedAttribute]
internal void set_Controller(HttpControllerDescriptor value);
    [CompilerGeneratedAttribute]
internal string get_ControllerName();
    [CompilerGeneratedAttribute]
internal void set_ControllerName(string value);
    internal bool get_Succeeded();
    internal bool get_CouldMatchVersion();
    [CompilerGeneratedAttribute]
internal bool get_HasCandidates();
    [CompilerGeneratedAttribute]
internal void set_HasCandidates(bool value);
    [CompilerGeneratedAttribute]
internal ApiVersion get_RequestedVersion();
    [CompilerGeneratedAttribute]
internal void set_RequestedVersion(ApiVersion value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Web.Http.Dispatcher.ControllerSelector : object {
    public abstract virtual ControllerSelectionResult SelectController(ControllerSelectionContext context);
    protected static ICollection`1<HttpControllerDescriptor> SelectBestCandidates(IReadOnlyList`1<CandidateAction> candidates, ApiVersion apiVersion);
    protected static bool TryDisambiguateControllerByAction(HttpRequestMessage request, IEnumerable`1<HttpControllerDescriptor> controllers, HttpControllerDescriptor& resolvedController);
    private static IHttpRouteData EnsureRouteDataSet(HttpConfiguration configuration, HttpRequestMessage request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Web.Http.Dispatcher.ConventionRouteControllerSelector : ControllerSelector {
    private HttpControllerTypeCache controllerTypeCache;
    internal ConventionRouteControllerSelector(HttpControllerTypeCache controllerTypeCache);
    public virtual ControllerSelectionResult SelectController(ControllerSelectionContext context);
    private static Exception CreateAmbiguousControllerException(IHttpRoute route, string controllerName, ICollection`1<Type> matchingTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Web.Http.Dispatcher.DirectRouteControllerSelector : ControllerSelector {
    public virtual ControllerSelectionResult SelectController(ControllerSelectionContext context);
    private static Exception CreateAmbiguousControllerException(IEnumerable`1<HttpControllerDescriptor> candidates);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Web.Http.Dispatcher.HttpControllerTypeCache : object {
    private HttpConfiguration configuration;
    private Lazy`1<Dictionary`2<string, ILookup`2<string, Type>>> cache;
    internal Dictionary`2<string, ILookup`2<string, Type>> Cache { get; }
    internal HttpControllerTypeCache(HttpConfiguration configuration);
    private static string GetControllerName(Type type, IControllerNameConvention convention);
    private Dictionary`2<string, ILookup`2<string, Type>> InitializeCache();
    internal Dictionary`2<string, ILookup`2<string, Type>> get_Cache();
    internal ICollection`1<Type> GetControllerTypes(string controllerName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Web.Http.Dispatcher.HttpResponseExceptionFactory : object {
    private static string Allow;
    private static string ControllerSelectorCategory;
    private HttpRequestMessage request;
    private Lazy`1<ApiVersionModel> allApiVersions;
    private ApiVersioningOptions Options { get; }
    private ITraceWriter TraceWriter { get; }
    private IReportApiVersions ApiVersionReporter { get; }
    internal HttpResponseExceptionFactory(HttpRequestMessage request, Lazy`1<ApiVersionModel> allApiVersions);
    private static HttpResponseExceptionFactory();
    private ApiVersioningOptions get_Options();
    private ITraceWriter get_TraceWriter();
    private IReportApiVersions get_ApiVersionReporter();
    internal HttpResponseException NewNotFoundOrBadRequestException(ControllerSelectionResult conventionRouteResult, ControllerSelectionResult directRouteResult);
    [NullableContextAttribute("2")]
internal HttpResponseMessage CreateBadRequestResponse(ApiVersion requestedVersion);
    internal HttpResponseException CreateBadRequest(ApiVersion requestedVersion);
    [NullableContextAttribute("2")]
private HttpResponseException CreateBadRequest(ControllerSelectionResult conventionRouteResult, ControllerSelectionResult directRouteResult);
    [NullableContextAttribute("2")]
private HttpResponseMessage CreateBadRequestForUnspecifiedApiVersionOrInvalidApiVersion(bool versionNeutral);
    private HttpResponseMessage CreateBadRequestForUnsupportedApiVersion(ApiVersion requestedVersion);
    internal HttpResponseMessage CreateMethodNotAllowedResponse(bool versionNeutral, IEnumerable`1<HttpMethod> allowedMethods);
    internal HttpResponseException NewMethodNotAllowedException(bool versionNeutral, IEnumerable`1<HttpMethod> allowedMethods);
    private HttpResponseException CreateNotFound(ControllerSelectionResult conventionRouteResult);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Web.Http.IErrorResponseProviderExtensions : object {
    [ExtensionAttribute]
internal static HttpResponseMessage BadRequest(IErrorResponseProvider responseProvider, HttpRequestMessage request, string code, string message, string messageDetail);
    [ExtensionAttribute]
internal static HttpResponseMessage MethodNotAllowed(IErrorResponseProvider responseProvider, HttpRequestMessage request, string code, string message, string messageDetail);
}
[AttributeUsageAttribute("64")]
public class Microsoft.Web.Http.MapToApiVersionAttribute : ApiVersionsBaseAttribute {
    private ApiVersionProviderOptions Microsoft.Web.Http.Versioning.IApiVersionProvider.Options { get; }
    [NullableContextAttribute("1")]
protected MapToApiVersionAttribute(ApiVersion version);
    [NullableContextAttribute("1")]
public MapToApiVersionAttribute(string version);
    private sealed virtual override ApiVersionProviderOptions Microsoft.Web.Http.Versioning.IApiVersionProvider.get_Options();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Web.Http.NullTraceWriter : object {
    [CompilerGeneratedAttribute]
private static ITraceWriter <Instance>k__BackingField;
    internal static ITraceWriter Instance { get; }
    private static NullTraceWriter();
    [CompilerGeneratedAttribute]
internal static ITraceWriter get_Instance();
    public sealed virtual void Trace(HttpRequestMessage request, string category, TraceLevel level, Action`1<TraceRecord> traceAction);
}
[AttributeUsageAttribute("68")]
public class Microsoft.Web.Http.ReportApiVersionsAttribute : ActionFilterAttribute {
    [NullableContextAttribute("1")]
public virtual void OnActionExecuted(HttpActionExecutedContext actionExecutedContext);
}
public class Microsoft.Web.Http.Routing.ApiVersionRouteConstraint : object {
    [NullableContextAttribute("1")]
public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerToString()}")]
internal class Microsoft.Web.Http.Routing.CandidateAction : object {
    private static string DebugFormat;
    [CompilerGeneratedAttribute]
private HttpActionDescriptor <ActionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Precedence>k__BackingField;
    public HttpActionDescriptor ActionDescriptor { get; public set; }
    public int Order { get; public set; }
    public decimal Precedence { get; public set; }
    internal CandidateAction(HttpActionDescriptor actionDescriptor);
    internal CandidateAction(HttpActionDescriptor actionDescriptor, int order, decimal precedence);
    internal string DebuggerToString();
    public bool MatchName(string actionName);
    public bool MatchVerb(HttpMethod method);
    [CompilerGeneratedAttribute]
public HttpActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public void set_ActionDescriptor(HttpActionDescriptor value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public decimal get_Precedence();
    [CompilerGeneratedAttribute]
public void set_Precedence(decimal value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Web.Http.Routing.RouteDataTokenKeys : object {
    internal static string Actions;
    internal static string Controller;
    internal static string Order;
    internal static string Precedence;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Web.Http.Routing.RouteValueKeys : object {
    internal static string Action;
    internal static string Controller;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Web.Http.SR : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActionMethodNotFound { get; }
    internal static string ActionSelector_AmbiguousMatchType { get; }
    internal static string AmbiguousActionMethod { get; }
    internal static string ApiControllerActionSelector_ActionNameNotFound { get; }
    internal static string ApiControllerActionSelector_ActionNotFound { get; }
    internal static string ApiControllerActionSelector_AmbiguousMatch { get; }
    internal static string ApiControllerActionSelector_HttpMethodNotSupported { get; }
    internal static string ApiVersionBadGroupVersion { get; }
    internal static string ApiVersionBadStatus { get; }
    internal static string ApiVersionInvalidFormat { get; }
    internal static string ApiVersionInvalidFormatCode { get; }
    internal static string ApiVersionNotSupported { get; }
    internal static string ApiVersionUnspecified { get; }
    internal static string ControllerNameNotFound { get; }
    internal static string ConventionStyleMismatch { get; }
    internal static string DefaultControllerFactory_ControllerNameAmbiguous_WithRouteTemplate { get; }
    internal static string DefaultControllerFactory_ControllerNameNotFound { get; }
    internal static string DirectRoute_AmbiguousController { get; }
    internal static string InvalidActionMethodExpression { get; }
    internal static string InvalidFormatString { get; }
    internal static string MultipleApiVersionsInferredFromNamespaces { get; }
    internal static string MultipleDifferentApiVersionsRequested { get; }
    internal static string RequiredInterfaceNotImplemented { get; }
    internal static string ResourceNotFound { get; }
    internal static string VersionedActionNameNotFound { get; }
    internal static string VersionedControllerNameNotFound { get; }
    internal static string VersionedMethodNotSupported { get; }
    internal static string VersionedResourceNotSupported { get; }
    internal static string ZeroApiVersionReaders { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActionMethodNotFound();
    internal static string get_ActionSelector_AmbiguousMatchType();
    internal static string get_AmbiguousActionMethod();
    internal static string get_ApiControllerActionSelector_ActionNameNotFound();
    internal static string get_ApiControllerActionSelector_ActionNotFound();
    internal static string get_ApiControllerActionSelector_AmbiguousMatch();
    internal static string get_ApiControllerActionSelector_HttpMethodNotSupported();
    internal static string get_ApiVersionBadGroupVersion();
    internal static string get_ApiVersionBadStatus();
    internal static string get_ApiVersionInvalidFormat();
    internal static string get_ApiVersionInvalidFormatCode();
    internal static string get_ApiVersionNotSupported();
    internal static string get_ApiVersionUnspecified();
    internal static string get_ControllerNameNotFound();
    internal static string get_ConventionStyleMismatch();
    internal static string get_DefaultControllerFactory_ControllerNameAmbiguous_WithRouteTemplate();
    internal static string get_DefaultControllerFactory_ControllerNameNotFound();
    internal static string get_DirectRoute_AmbiguousController();
    internal static string get_InvalidActionMethodExpression();
    internal static string get_InvalidFormatString();
    internal static string get_MultipleApiVersionsInferredFromNamespaces();
    internal static string get_MultipleDifferentApiVersionsRequested();
    internal static string get_RequiredInterfaceNotImplemented();
    internal static string get_ResourceNotFound();
    internal static string get_VersionedActionNameNotFound();
    internal static string get_VersionedControllerNameNotFound();
    internal static string get_VersionedMethodNotSupported();
    internal static string get_VersionedResourceNotSupported();
    internal static string get_ZeroApiVersionReaders();
}
[ExtensionAttribute]
internal static class Microsoft.Web.Http.TupleExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static void Deconstruct(Tuple`2<T1, T2> tuple, T1& item1, T2& item2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Web.Http.TypeExtensions : object {
    [ExtensionAttribute]
internal static bool IsSimpleType(Type type);
    [ExtensionAttribute]
internal static bool IsSimpleUnderlyingType(Type type);
    [ExtensionAttribute]
internal static bool HasStringConverter(Type type);
    [ExtensionAttribute]
internal static bool CanConvertFromString(Type type);
}
[ExtensionAttribute]
internal static class Microsoft.Web.Http.UriExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static string SafeFullPath(Uri uri);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Versioning.AmbiguousApiVersionException : Exception {
    private String[] apiVersions;
    public IReadOnlyList`1<string> ApiVersions { get; }
    public AmbiguousApiVersionException(string message);
    public AmbiguousApiVersionException(string message, Exception innerException);
    public AmbiguousApiVersionException(string message, IEnumerable`1<string> apiVersions);
    public AmbiguousApiVersionException(string message, IEnumerable`1<string> apiVersions, Exception innerException);
    protected AmbiguousApiVersionException(SerializationInfo info, StreamingContext context);
    public IReadOnlyList`1<string> get_ApiVersions();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private static String[] EmptyArray();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Versioning.ApiVersionFormatProvider : object {
    private static string GroupVersionFormat;
    [CompilerGeneratedAttribute]
private DateTimeFormatInfo <DateTimeFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private Calendar <Calendar>k__BackingField;
    [CompilerGeneratedAttribute]
private static ApiVersionFormatProvider <CurrentCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private static ApiVersionFormatProvider <InvariantCulture>k__BackingField;
    protected DateTimeFormatInfo DateTimeFormat { get; }
    protected Calendar Calendar { get; }
    public static ApiVersionFormatProvider CurrentCulture { get; }
    public static ApiVersionFormatProvider InvariantCulture { get; }
    public ApiVersionFormatProvider(DateTimeFormatInfo dateTimeFormat);
    public ApiVersionFormatProvider(Calendar calendar);
    public ApiVersionFormatProvider(DateTimeFormatInfo dateTimeFormat, Calendar calendar);
    private static ApiVersionFormatProvider();
    [CompilerGeneratedAttribute]
protected DateTimeFormatInfo get_DateTimeFormat();
    [CompilerGeneratedAttribute]
protected Calendar get_Calendar();
    [CompilerGeneratedAttribute]
public static ApiVersionFormatProvider get_CurrentCulture();
    [CompilerGeneratedAttribute]
public static ApiVersionFormatProvider get_InvariantCulture();
    public static ApiVersionFormatProvider GetInstance(IFormatProvider formatProvider);
    protected virtual string FormatAllParts(ApiVersion apiVersion, string format, IFormatProvider formatProvider);
    protected virtual string FormatGroupVersionPart(ApiVersion apiVersion, string format, IFormatProvider formatProvider);
    protected virtual string FormatVersionPart(ApiVersion apiVersion, string format, IFormatProvider formatProvider);
    protected virtual string FormatStatusPart(ApiVersion apiVersion, string format, IFormatProvider formatProvider);
    [NullableContextAttribute("2")]
public virtual object GetFormat(Type formatType);
    [NullableContextAttribute("2")]
public virtual string Format(string format, object arg, IFormatProvider formatProvider);
    [NullableContextAttribute("2")]
private static string GetDefaultFormat(string format, object arg, IFormatProvider formatProvider);
    private string GetCustomFormat(ApiVersion value, string format, IFormatProvider formatProvider);
    private static string FormatVersionWithoutPadding(ApiVersion apiVersion, string format, IFormatProvider formatProvider);
    private static string FormatVersionWithPadding(ApiVersion apiVersion, string format, IFormatProvider formatProvider);
    private static void SplitFormatSpecifierWithNumber(string format, IFormatProvider formatProvider, String& specifier, Int32& count);
    private static void AppendStatus(StringBuilder text, string status);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Versioning.ApiVersioningOptions : object {
    [NullableAttribute("2")]
private IApiVersionReader apiVersionReader;
    [NullableAttribute("2")]
private IApiVersionSelector apiVersionSelector;
    [NullableAttribute("2")]
private IApiVersionConventionBuilder conventions;
    [NullableAttribute("2")]
private IErrorResponseProvider errorResponses;
    [NullableAttribute("2")]
private IControllerNameConvention controllerNameConvention;
    [CompilerGeneratedAttribute]
private string <RouteConstraintName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReportApiVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AssumeDefaultVersionWhenUnspecified>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiVersion <DefaultApiVersion>k__BackingField;
    public string RouteConstraintName { get; public set; }
    public bool ReportApiVersions { get; public set; }
    public bool AssumeDefaultVersionWhenUnspecified { get; public set; }
    public ApiVersion DefaultApiVersion { get; public set; }
    public IApiVersionReader ApiVersionReader { get; public set; }
    public IApiVersionSelector ApiVersionSelector { get; public set; }
    public IApiVersionConventionBuilder Conventions { get; public set; }
    public IErrorResponseProvider ErrorResponses { get; public set; }
    public IControllerNameConvention ControllerNameConvention { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RouteConstraintName();
    [CompilerGeneratedAttribute]
public void set_RouteConstraintName(string value);
    [CompilerGeneratedAttribute]
public bool get_ReportApiVersions();
    [CompilerGeneratedAttribute]
public void set_ReportApiVersions(bool value);
    [CompilerGeneratedAttribute]
public bool get_AssumeDefaultVersionWhenUnspecified();
    [CompilerGeneratedAttribute]
public void set_AssumeDefaultVersionWhenUnspecified(bool value);
    [CompilerGeneratedAttribute]
public ApiVersion get_DefaultApiVersion();
    [CompilerGeneratedAttribute]
public void set_DefaultApiVersion(ApiVersion value);
    public IApiVersionReader get_ApiVersionReader();
    public void set_ApiVersionReader(IApiVersionReader value);
    public IApiVersionSelector get_ApiVersionSelector();
    public void set_ApiVersionSelector(IApiVersionSelector value);
    public IApiVersionConventionBuilder get_Conventions();
    public void set_Conventions(IApiVersionConventionBuilder value);
    public IErrorResponseProvider get_ErrorResponses();
    public void set_ErrorResponses(IErrorResponseProvider value);
    public IControllerNameConvention get_ControllerNameConvention();
    public void set_ControllerNameConvention(IControllerNameConvention value);
}
public enum Microsoft.Web.Http.Versioning.ApiVersionMapping : Enum {
    public int value__;
    public static ApiVersionMapping None;
    public static ApiVersionMapping Explicit;
    public static ApiVersionMapping Implicit;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerDisplayText}")]
[DebuggerTypeProxyAttribute("Microsoft.Web.Http.Versioning.ApiVersionModelDebugView")]
public class Microsoft.Web.Http.Versioning.ApiVersionModel : object {
    private static int DefaultModel;
    private static int NeutralModel;
    private static int EmptyModel;
    private static Lazy`1<ApiVersionModel> defaultVersion;
    private static Lazy`1<ApiVersionModel> neutralVersion;
    private static Lazy`1<ApiVersionModel> emptyVersion;
    private static IReadOnlyList`1<ApiVersion> emptyVersions;
    private static IReadOnlyList`1<ApiVersion> defaultVersions;
    [CompilerGeneratedAttribute]
private bool <IsApiVersionNeutral>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ApiVersion> <DeclaredApiVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ApiVersion> <ImplementedApiVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ApiVersion> <SupportedApiVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ApiVersion> <DeprecatedApiVersions>k__BackingField;
    private string DebuggerDisplayText { get; }
    public static ApiVersionModel Default { get; }
    public static ApiVersionModel Neutral { get; }
    public static ApiVersionModel Empty { get; }
    public bool IsApiVersionNeutral { get; }
    public IReadOnlyList`1<ApiVersion> DeclaredApiVersions { get; }
    public IReadOnlyList`1<ApiVersion> ImplementedApiVersions { get; }
    public IReadOnlyList`1<ApiVersion> SupportedApiVersions { get; }
    public IReadOnlyList`1<ApiVersion> DeprecatedApiVersions { get; }
    private ApiVersionModel(int kind);
    internal ApiVersionModel(ApiVersionModel original, IReadOnlyList`1<ApiVersion> implemented, IReadOnlyList`1<ApiVersion> supported, IReadOnlyList`1<ApiVersion> deprecated);
    public ApiVersionModel(ApiVersion declaredVersion);
    public ApiVersionModel(IEnumerable`1<ApiVersion> supportedVersions, IEnumerable`1<ApiVersion> deprecatedVersions);
    public ApiVersionModel(IEnumerable`1<ApiVersion> supportedVersions, IEnumerable`1<ApiVersion> deprecatedVersions, IEnumerable`1<ApiVersion> advertisedVersions, IEnumerable`1<ApiVersion> deprecatedAdvertisedVersions);
    public ApiVersionModel(IEnumerable`1<ApiVersion> declaredVersions, IEnumerable`1<ApiVersion> supportedVersions, IEnumerable`1<ApiVersion> deprecatedVersions, IEnumerable`1<ApiVersion> advertisedVersions, IEnumerable`1<ApiVersion> deprecatedAdvertisedVersions);
    private static ApiVersionModel();
    private string get_DebuggerDisplayText();
    public static ApiVersionModel get_Default();
    public static ApiVersionModel get_Neutral();
    public static ApiVersionModel get_Empty();
    [CompilerGeneratedAttribute]
public bool get_IsApiVersionNeutral();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ApiVersion> get_DeclaredApiVersions();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ApiVersion> get_ImplementedApiVersions();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ApiVersion> get_SupportedApiVersions();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ApiVersion> get_DeprecatedApiVersions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Web.Http.Versioning.ApiVersionModelDebugView : object {
    private static string Comma;
    private ApiVersionModel model;
    public bool VersionNeutral { get; }
    public string Declared { get; }
    public string Implemented { get; }
    public string Supported { get; }
    public string Deprecated { get; }
    public ApiVersionModelDebugView(ApiVersionModel model);
    public bool get_VersionNeutral();
    public string get_Declared();
    public string get_Implemented();
    public string get_Supported();
    public string get_Deprecated();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Web.Http.Versioning.ApiVersionModelExtensions : object {
    [ExtensionAttribute]
public static ApiVersionModel Aggregate(ApiVersionModel version, ApiVersionModel otherVersion);
    [ExtensionAttribute]
public static ApiVersionModel Aggregate(ApiVersionModel version, IEnumerable`1<ApiVersionModel> otherVersions);
    [ExtensionAttribute]
public static ApiVersionModel Aggregate(IEnumerable`1<ApiVersionModel> versions);
}
public enum Microsoft.Web.Http.Versioning.ApiVersionParameterLocation : Enum {
    public int value__;
    public static ApiVersionParameterLocation Query;
    public static ApiVersionParameterLocation Header;
    public static ApiVersionParameterLocation Path;
    public static ApiVersionParameterLocation MediaTypeParameter;
}
[FlagsAttribute]
public enum Microsoft.Web.Http.Versioning.ApiVersionProviderOptions : Enum {
    public int value__;
    public static ApiVersionProviderOptions None;
    public static ApiVersionProviderOptions Deprecated;
    public static ApiVersionProviderOptions Advertised;
    public static ApiVersionProviderOptions Mapped;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Web.Http.Versioning.ApiVersionReader : object {
    public static IApiVersionReader Combine(IApiVersionReader[] apiVersionReaders);
    public static IApiVersionReader Combine(IEnumerable`1<IApiVersionReader> apiVersionReaders);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Versioning.ApiVersionRequestProperties : object {
    [NullableAttribute("1")]
private HttpRequestMessage request;
    private string rawApiVersion;
    private ApiVersion apiVersion;
    [CompilerGeneratedAttribute]
private string <RouteParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpControllerDescriptor <SelectedController>k__BackingField;
    public string RouteParameter { get; public set; }
    public string RawRequestedApiVersion { get; public set; }
    public ApiVersion RequestedApiVersion { get; public set; }
    [EditorBrowsableAttribute("1")]
public HttpControllerDescriptor SelectedController { get; public set; }
    [NullableContextAttribute("1")]
public ApiVersionRequestProperties(HttpRequestMessage request);
    [CompilerGeneratedAttribute]
public string get_RouteParameter();
    [CompilerGeneratedAttribute]
public void set_RouteParameter(string value);
    public string get_RawRequestedApiVersion();
    public void set_RawRequestedApiVersion(string value);
    public ApiVersion get_RequestedApiVersion();
    public void set_RequestedApiVersion(ApiVersion value);
    [CompilerGeneratedAttribute]
public HttpControllerDescriptor get_SelectedController();
    [CompilerGeneratedAttribute]
public void set_SelectedController(HttpControllerDescriptor value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Web.Http.Versioning.ApiVersionsBaseAttribute : Attribute {
    private Lazy`1<int> computedHashCode;
    private Lazy`1<IReadOnlyList`1<ApiVersion>> versions;
    public IReadOnlyList`1<ApiVersion> Versions { get; }
    protected ApiVersionsBaseAttribute(ApiVersion version);
    protected ApiVersionsBaseAttribute(ApiVersion[] versions);
    protected ApiVersionsBaseAttribute(string version);
    [CLSCompliantAttribute("False")]
protected ApiVersionsBaseAttribute(String[] versions);
    private static int ComputeHashCode(IEnumerable`1<ApiVersion> versions);
    public sealed virtual IReadOnlyList`1<ApiVersion> get_Versions();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Versioning.ApiVersionUrlHelper : UrlHelper {
    [CompilerGeneratedAttribute]
private UrlHelper <Url>k__BackingField;
    protected UrlHelper Url { get; }
    public ApiVersionUrlHelper(UrlHelper url);
    [CompilerGeneratedAttribute]
protected UrlHelper get_Url();
    public virtual string Content(string path);
    public virtual string Link(string routeName, IDictionary`2<string, object> routeValues);
    public virtual string Route(string routeName, IDictionary`2<string, object> routeValues);
    private IDictionary`2<string, object> AddApiVersionRouteValueIfNecessary(IDictionary`2<string, object> routeValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Web.Http.Versioning.ApplyContentTypeVersionActionFilter : ActionFilterAttribute {
    private string parameterName;
    public bool AllowMultiple { get; }
    internal ApplyContentTypeVersionActionFilter(IApiVersionReader reader);
    public virtual bool get_AllowMultiple();
    public virtual void OnActionExecuted(HttpActionExecutedContext actionExecutedContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Versioning.ConstantApiVersionSelector : object {
    private ApiVersion version;
    public ConstantApiVersionSelector(ApiVersion version);
    public sealed virtual ApiVersion SelectVersion(HttpRequestMessage request, ApiVersionModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Versioning.Conventions.ActionApiVersionConventionBuilder : ActionApiVersionConventionBuilderBase {
    [CompilerGeneratedAttribute]
private ControllerApiVersionConventionBuilder <ControllerBuilder>k__BackingField;
    protected ControllerApiVersionConventionBuilder ControllerBuilder { get; }
    public Type ControllerType { get; }
    public ActionApiVersionConventionBuilder(ControllerApiVersionConventionBuilder controllerBuilder);
    [CompilerGeneratedAttribute]
protected ControllerApiVersionConventionBuilder get_ControllerBuilder();
    public sealed virtual Type get_ControllerType();
    public virtual ActionApiVersionConventionBuilder Action(MethodInfo actionMethod);
    public virtual ActionApiVersionConventionBuilder MapToApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder IsApiVersionNeutral();
    public virtual ActionApiVersionConventionBuilder HasApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder HasDeprecatedApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder AdvertisesApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.Web.Http.Versioning.Conventions.IDeclareApiVersionConventionBuilder.IsApiVersionNeutral();
    private sealed virtual override void Microsoft.Web.Http.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.Web.Http.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.Web.Http.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.Web.Http.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.Web.Http.Versioning.Conventions.IMapToApiVersionConventionBuilder.MapToApiVersion(ApiVersion apiVersion);
    private sealed virtual override IActionConventionBuilder Microsoft.Web.Http.Versioning.Conventions.IActionConventionBuilder.Action(MethodInfo actionMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Versioning.Conventions.ActionApiVersionConventionBuilder`1 : ActionApiVersionConventionBuilderBase {
    [CompilerGeneratedAttribute]
private ControllerApiVersionConventionBuilder`1<T> <ControllerBuilder>k__BackingField;
    protected ControllerApiVersionConventionBuilder`1<T> ControllerBuilder { get; }
    private Type Microsoft.Web.Http.Versioning.Conventions.IActionConventionBuilder.ControllerType { get; }
    public ActionApiVersionConventionBuilder`1(ControllerApiVersionConventionBuilder`1<T> controllerBuilder);
    [CompilerGeneratedAttribute]
protected ControllerApiVersionConventionBuilder`1<T> get_ControllerBuilder();
    [EditorBrowsableAttribute("1")]
public virtual ActionApiVersionConventionBuilder`1<T> Action(MethodInfo actionMethod);
    public virtual ActionApiVersionConventionBuilder`1<T> MapToApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder`1<T> IsApiVersionNeutral();
    public virtual ActionApiVersionConventionBuilder`1<T> HasApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder`1<T> HasDeprecatedApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder`1<T> AdvertisesApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder`1<T> AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override Type Microsoft.Web.Http.Versioning.Conventions.IActionConventionBuilder.get_ControllerType();
    private sealed virtual override void Microsoft.Web.Http.Versioning.Conventions.IDeclareApiVersionConventionBuilder.IsApiVersionNeutral();
    private sealed virtual override void Microsoft.Web.Http.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.Web.Http.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.Web.Http.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.Web.Http.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.Web.Http.Versioning.Conventions.IMapToApiVersionConventionBuilder.MapToApiVersion(ApiVersion apiVersion);
    private sealed virtual override IActionConventionBuilder Microsoft.Web.Http.Versioning.Conventions.IActionConventionBuilder.Action(MethodInfo actionMethod);
    private sealed virtual override IActionConventionBuilder`1<T> Microsoft.Web.Http.Versioning.Conventions.IActionConventionBuilder<T>.Action(MethodInfo actionMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Web.Http.Versioning.Conventions.ActionApiVersionConventionBuilderBase : ApiVersionConventionBuilderBase {
    [CompilerGeneratedAttribute]
private ICollection`1<ApiVersion> <MappedVersions>k__BackingField;
    protected ICollection`1<ApiVersion> MappedVersions { get; }
    public virtual void ApplyTo(HttpActionDescriptor actionDescriptor);
    [CompilerGeneratedAttribute]
protected ICollection`1<ApiVersion> get_MappedVersions();
    protected virtual void MergeAttributesWithConventions(IReadOnlyList`1<object> attributes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Versioning.Conventions.ActionApiVersionConventionBuilderCollection : object {
    private ControllerApiVersionConventionBuilder controllerBuilder;
    private IList`1<ActionBuilderMapping> actionBuilderMappings;
    public int Count { get; }
    public ActionApiVersionConventionBuilderCollection(ControllerApiVersionConventionBuilder controllerBuilder);
    protected internal virtual ActionApiVersionConventionBuilder GetOrAdd(MethodInfo actionMethod);
    public virtual int get_Count();
    [NullableContextAttribute("2")]
public virtual bool TryGetValue(MethodInfo actionMethod, ActionApiVersionConventionBuilder& actionBuilder);
    [IteratorStateMachineAttribute("Microsoft.Web.Http.Versioning.Conventions.ActionApiVersionConventionBuilderCollection/<GetEnumerator>d__7")]
public virtual IEnumerator`1<ActionApiVersionConventionBuilder> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Versioning.Conventions.ActionApiVersionConventionBuilderCollection`1 : object {
    private ControllerApiVersionConventionBuilder`1<T> controllerBuilder;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IList`1<ActionBuilderMapping<T>> actionBuilderMappings;
    public int Count { get; }
    public ActionApiVersionConventionBuilderCollection`1(ControllerApiVersionConventionBuilder`1<T> controllerBuilder);
    protected internal virtual ActionApiVersionConventionBuilder`1<T> GetOrAdd(MethodInfo actionMethod);
    public virtual int get_Count();
    [NullableContextAttribute("2")]
public virtual bool TryGetValue(MethodInfo actionMethod, ActionApiVersionConventionBuilder`1& actionBuilder);
    [IteratorStateMachineAttribute("Microsoft.Web.Http.Versioning.Conventions.ActionApiVersionConventionBuilderCollection`1/<GetEnumerator>d__7")]
public virtual IEnumerator`1<ActionApiVersionConventionBuilder`1<T>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Web.Http.Versioning.Conventions.ActionConventionBuilderExtensions : object {
    [ExtensionAttribute]
public static IActionConventionBuilder`1<TController> Action(IActionConventionBuilder`1<TController> builder, Expression`1<Action`1<TController>> actionExpression);
    [ExtensionAttribute]
public static IActionConventionBuilder`1<TController> Action(IActionConventionBuilder`1<TController> builder, Expression`1<Func`2<TController, TResult>> actionExpression);
    [ExtensionAttribute]
public static IActionConventionBuilder Action(IActionConventionBuilder builder, string methodName, Type[] argumentTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Web.Http.Versioning.Conventions.ActionMethodResolver : object {
    internal static MethodInfo Resolve(Type controllerType, string methodName, Type[] argumentTypes);
    private static bool IsAction(MethodInfo method);
    private static bool SignatureMatches(MethodInfo method, Type[] argumentTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Versioning.Conventions.ApiVersionConventionBuilder : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<Type, IControllerConventionBuilder> <ControllerConventionBuilders>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IControllerConvention> <ControllerConventions>k__BackingField;
    protected IDictionary`2<Type, IControllerConventionBuilder> ControllerConventionBuilders { get; }
    protected IList`1<IControllerConvention> ControllerConventions { get; }
    public int Count { get; }
    public virtual bool ApplyTo(HttpControllerDescriptor controllerDescriptor);
    private static Type GetKey(Type type);
    private static bool HasDecoratedActions(HttpControllerDescriptor controllerDescriptor);
    [CompilerGeneratedAttribute]
protected IDictionary`2<Type, IControllerConventionBuilder> get_ControllerConventionBuilders();
    [CompilerGeneratedAttribute]
protected IList`1<IControllerConvention> get_ControllerConventions();
    public virtual int get_Count();
    public virtual IControllerConventionBuilder`1<TController> Controller();
    public virtual IControllerConventionBuilder Controller(Type controllerType);
    public virtual void Add(IControllerConvention convention);
    private bool InternalApplyTo(HttpControllerDescriptor model);
    private static IControllerConventionBuilder NewGenericControllerConventionBuilder(Type controllerType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Web.Http.Versioning.Conventions.ApiVersionConventionBuilderBase : object {
    [CompilerGeneratedAttribute]
private bool <VersionNeutral>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ApiVersion> <SupportedVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ApiVersion> <DeprecatedVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ApiVersion> <AdvertisedVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ApiVersion> <DeprecatedAdvertisedVersions>k__BackingField;
    protected bool VersionNeutral { get; protected set; }
    protected ICollection`1<ApiVersion> SupportedVersions { get; }
    protected ICollection`1<ApiVersion> DeprecatedVersions { get; }
    protected ICollection`1<ApiVersion> AdvertisedVersions { get; }
    protected ICollection`1<ApiVersion> DeprecatedAdvertisedVersions { get; }
    [CompilerGeneratedAttribute]
protected bool get_VersionNeutral();
    [CompilerGeneratedAttribute]
protected void set_VersionNeutral(bool value);
    [CompilerGeneratedAttribute]
protected ICollection`1<ApiVersion> get_SupportedVersions();
    [CompilerGeneratedAttribute]
protected ICollection`1<ApiVersion> get_DeprecatedVersions();
    [CompilerGeneratedAttribute]
protected ICollection`1<ApiVersion> get_AdvertisedVersions();
    [CompilerGeneratedAttribute]
protected ICollection`1<ApiVersion> get_DeprecatedAdvertisedVersions();
    protected virtual void MergeAttributesWithConventions(IEnumerable`1<object> attributes);
    protected virtual void MergeAttributesWithConventions(IReadOnlyList`1<object> attributes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Web.Http.Versioning.Conventions.ApiVersionConventionBuilderExtensions : object {
    [ExtensionAttribute]
public static T HasApiVersion(T builder, int majorVersion);
    [ExtensionAttribute]
public static T HasApiVersion(T builder, int majorVersion, string status);
    [ExtensionAttribute]
public static T HasApiVersion(T builder, int majorVersion, int minorVersion);
    [ExtensionAttribute]
public static T HasApiVersion(T builder, int majorVersion, int minorVersion, string status);
    [ExtensionAttribute]
public static T HasApiVersion(T builder, int year, int month, int day);
    [ExtensionAttribute]
public static T HasApiVersion(T builder, int year, int month, int day, string status);
    [ExtensionAttribute]
public static T HasApiVersion(T builder, DateTime groupVersion);
    [ExtensionAttribute]
public static T HasApiVersion(T builder, DateTime groupVersion, string status);
    [ExtensionAttribute]
public static T HasApiVersions(T builder, IEnumerable`1<ApiVersion> apiVersions);
    [ExtensionAttribute]
public static T HasDeprecatedApiVersion(T builder, int majorVersion);
    [ExtensionAttribute]
public static T HasDeprecatedApiVersion(T builder, int majorVersion, string status);
    [ExtensionAttribute]
public static T HasDeprecatedApiVersion(T builder, int majorVersion, int minorVersion);
    [ExtensionAttribute]
public static T HasDeprecatedApiVersion(T builder, int majorVersion, int minorVersion, string status);
    [ExtensionAttribute]
public static T HasDeprecatedApiVersion(T builder, int year, int month, int day);
    [ExtensionAttribute]
public static T HasDeprecatedApiVersion(T builder, int year, int month, int day, string status);
    [ExtensionAttribute]
public static T HasDeprecatedApiVersion(T builder, DateTime groupVersion);
    [ExtensionAttribute]
public static T HasDeprecatedApiVersion(T builder, DateTime groupVersion, string status);
    [ExtensionAttribute]
public static T HasDeprecatedApiVersions(T builder, IEnumerable`1<ApiVersion> apiVersions);
    [ExtensionAttribute]
public static T AdvertisesApiVersion(T builder, int majorVersion);
    [ExtensionAttribute]
public static T AdvertisesApiVersion(T builder, int majorVersion, string status);
    [ExtensionAttribute]
public static T AdvertisesApiVersion(T builder, int majorVersion, int minorVersion);
    [ExtensionAttribute]
public static T AdvertisesApiVersion(T builder, int majorVersion, int minorVersion, string status);
    [ExtensionAttribute]
public static T AdvertisesApiVersion(T builder, int year, int month, int day);
    [ExtensionAttribute]
public static T AdvertisesApiVersion(T builder, int year, int month, int day, string status);
    [ExtensionAttribute]
public static T AdvertisesApiVersion(T builder, DateTime groupVersion);
    [ExtensionAttribute]
public static T AdvertisesApiVersion(T builder, DateTime groupVersion, string status);
    [ExtensionAttribute]
public static T AdvertisesApiVersions(T builder, IEnumerable`1<ApiVersion> apiVersions);
    [ExtensionAttribute]
public static T AdvertisesDeprecatedApiVersion(T builder, int majorVersion);
    [ExtensionAttribute]
public static T AdvertisesDeprecatedApiVersion(T builder, int majorVersion, string status);
    [ExtensionAttribute]
public static T AdvertisesDeprecatedApiVersion(T builder, int majorVersion, int minorVersion);
    [ExtensionAttribute]
public static T AdvertisesDeprecatedApiVersion(T builder, int majorVersion, int minorVersion, string status);
    [ExtensionAttribute]
public static T AdvertisesDeprecatedApiVersion(T builder, int year, int month, int day);
    [ExtensionAttribute]
public static T AdvertisesDeprecatedApiVersion(T builder, int year, int month, int day, string status);
    [ExtensionAttribute]
public static T AdvertisesDeprecatedApiVersion(T builder, DateTime groupVersion);
    [ExtensionAttribute]
public static T AdvertisesDeprecatedApiVersion(T builder, DateTime groupVersion, string status);
    [ExtensionAttribute]
public static T AdvertisesDeprecatedApiVersions(T builder, IEnumerable`1<ApiVersion> apiVersions);
    [ExtensionAttribute]
public static T MapToApiVersion(T builder, int majorVersion);
    [ExtensionAttribute]
public static T MapToApiVersion(T builder, int majorVersion, string status);
    [ExtensionAttribute]
public static T MapToApiVersion(T builder, int majorVersion, int minorVersion);
    [ExtensionAttribute]
public static T MapToApiVersion(T builder, int majorVersion, int minorVersion, string status);
    [ExtensionAttribute]
public static T MapToApiVersion(T builder, int year, int month, int day);
    [ExtensionAttribute]
public static T MapToApiVersion(T builder, int year, int month, int day, string status);
    [ExtensionAttribute]
public static T MapToApiVersion(T builder, DateTime groupVersion);
    [ExtensionAttribute]
public static T MapToApiVersion(T builder, DateTime groupVersion, string status);
    [ExtensionAttribute]
public static T MapToApiVersions(T builder, IEnumerable`1<ApiVersion> apiVersions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Versioning.Conventions.ControllerApiVersionConventionBuilder : ControllerApiVersionConventionBuilderBase {
    [CompilerGeneratedAttribute]
private Type <ControllerType>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionApiVersionConventionBuilderCollection <ActionBuilders>k__BackingField;
    protected bool HasActionConventions { get; }
    public Type ControllerType { get; }
    protected ActionApiVersionConventionBuilderCollection ActionBuilders { get; }
    public ControllerApiVersionConventionBuilder(Type controllerType);
    protected virtual bool get_HasActionConventions();
    protected virtual bool TryGetConvention(MethodInfo method, IApiVersionConvention`1& convention);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ControllerType();
    [CompilerGeneratedAttribute]
protected virtual ActionApiVersionConventionBuilderCollection get_ActionBuilders();
    public virtual ControllerApiVersionConventionBuilder IsApiVersionNeutral();
    public virtual ControllerApiVersionConventionBuilder HasApiVersion(ApiVersion apiVersion);
    public virtual ControllerApiVersionConventionBuilder HasDeprecatedApiVersion(ApiVersion apiVersion);
    public virtual ControllerApiVersionConventionBuilder AdvertisesApiVersion(ApiVersion apiVersion);
    public virtual ControllerApiVersionConventionBuilder AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder Action(MethodInfo actionMethod);
    private sealed virtual override void Microsoft.Web.Http.Versioning.Conventions.IDeclareApiVersionConventionBuilder.IsApiVersionNeutral();
    private sealed virtual override void Microsoft.Web.Http.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.Web.Http.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.Web.Http.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.Web.Http.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override IActionConventionBuilder Microsoft.Web.Http.Versioning.Conventions.IControllerConventionBuilder.Action(MethodInfo actionMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Versioning.Conventions.ControllerApiVersionConventionBuilder`1 : ControllerApiVersionConventionBuilderBase {
    [CompilerGeneratedAttribute]
private ActionApiVersionConventionBuilderCollection`1<T> <ActionBuilders>k__BackingField;
    protected bool HasActionConventions { get; }
    protected ActionApiVersionConventionBuilderCollection`1<T> ActionBuilders { get; }
    private Type Microsoft.Web.Http.Versioning.Conventions.IControllerConventionBuilder.ControllerType { get; }
    protected virtual bool get_HasActionConventions();
    protected virtual bool TryGetConvention(MethodInfo method, IApiVersionConvention`1& convention);
    [CompilerGeneratedAttribute]
protected virtual ActionApiVersionConventionBuilderCollection`1<T> get_ActionBuilders();
    public virtual ControllerApiVersionConventionBuilder`1<T> IsApiVersionNeutral();
    public virtual ControllerApiVersionConventionBuilder`1<T> HasApiVersion(ApiVersion apiVersion);
    public virtual ControllerApiVersionConventionBuilder`1<T> HasDeprecatedApiVersion(ApiVersion apiVersion);
    public virtual ControllerApiVersionConventionBuilder`1<T> AdvertisesApiVersion(ApiVersion apiVersion);
    public virtual ControllerApiVersionConventionBuilder`1<T> AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    [EditorBrowsableAttribute("1")]
public virtual ActionApiVersionConventionBuilder`1<T> Action(MethodInfo actionMethod);
    private sealed virtual override Type Microsoft.Web.Http.Versioning.Conventions.IControllerConventionBuilder.get_ControllerType();
    private sealed virtual override void Microsoft.Web.Http.Versioning.Conventions.IDeclareApiVersionConventionBuilder.IsApiVersionNeutral();
    private sealed virtual override void Microsoft.Web.Http.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.Web.Http.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.Web.Http.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.Web.Http.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override IActionConventionBuilder Microsoft.Web.Http.Versioning.Conventions.IControllerConventionBuilder.Action(MethodInfo actionMethod);
    private sealed virtual override IActionConventionBuilder`1<T> Microsoft.Web.Http.Versioning.Conventions.IControllerConventionBuilder<T>.Action(MethodInfo actionMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Web.Http.Versioning.Conventions.ControllerApiVersionConventionBuilderBase : ApiVersionConventionBuilderBase {
    protected bool HasActionConventions { get; }
    public virtual void ApplyTo(HttpControllerDescriptor controllerDescriptor);
    protected abstract virtual bool get_HasActionConventions();
    protected abstract virtual bool TryGetConvention(MethodInfo method, IApiVersionConvention`1& convention);
    private void ApplyActionConventions(HttpControllerDescriptor controller);
    private void ApplyInheritedActionConventions(IReadOnlyList`1<HttpActionDescriptor> actions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Web.Http.Versioning.Conventions.ControllerConventionBuilderExtensions : object {
    [ExtensionAttribute]
public static IActionConventionBuilder`1<TController> Action(IControllerConventionBuilder`1<TController> builder, Expression`1<Action`1<TController>> actionExpression);
    [ExtensionAttribute]
public static IActionConventionBuilder`1<TController> Action(IControllerConventionBuilder`1<TController> builder, Expression`1<Func`2<TController, TResult>> actionExpression);
    [ExtensionAttribute]
public static IActionConventionBuilder Action(IControllerConventionBuilder builder, string methodName, Type[] argumentTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Web.Http.Versioning.Conventions.ControllerNameConvention : object {
    [NullableAttribute("2")]
private static IControllerNameConvention default;
    [NullableAttribute("2")]
private static IControllerNameConvention original;
    [NullableAttribute("2")]
private static IControllerNameConvention grouped;
    public static IControllerNameConvention Default { get; }
    public static IControllerNameConvention Original { get; }
    public static IControllerNameConvention Grouped { get; }
    public abstract virtual string NormalizeName(string controllerName);
    public abstract virtual string GroupName(string controllerName);
    public static IControllerNameConvention get_Default();
    public static IControllerNameConvention get_Original();
    public static IControllerNameConvention get_Grouped();
    public static string TrimTrailingNumbers(string name);
}
public class Microsoft.Web.Http.Versioning.Conventions.DefaultControllerNameConvention : OriginalControllerNameConvention {
    [NullableContextAttribute("1")]
public virtual string NormalizeName(string controllerName);
}
[ExtensionAttribute]
internal static class Microsoft.Web.Http.Versioning.Conventions.ExpressionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static MethodInfo ExtractMethod(Expression`1<TDelegate> expression);
}
public class Microsoft.Web.Http.Versioning.Conventions.GroupedControllerNameConvention : OriginalControllerNameConvention {
    [NullableContextAttribute("1")]
public virtual string GroupName(string controllerName);
}
[NullableContextAttribute("1")]
public interface Microsoft.Web.Http.Versioning.Conventions.IActionConventionBuilder {
    public Type ControllerType { get; }
    public abstract virtual Type get_ControllerType();
    public abstract virtual IActionConventionBuilder Action(MethodInfo actionMethod);
}
[NullableContextAttribute("1")]
public interface Microsoft.Web.Http.Versioning.Conventions.IActionConventionBuilder`1 {
    public abstract virtual IActionConventionBuilder`1<T> Action(MethodInfo actionMethod);
}
[NullableContextAttribute("1")]
public interface Microsoft.Web.Http.Versioning.Conventions.IApiVersionConvention`1 {
    public abstract virtual void ApplyTo(T item);
}
[NullableContextAttribute("1")]
public interface Microsoft.Web.Http.Versioning.Conventions.IApiVersionConventionBuilder {
    public int Count { get; }
    public abstract virtual IControllerConventionBuilder`1<TController> Controller();
    public abstract virtual bool ApplyTo(HttpControllerDescriptor controllerDescriptor);
    public abstract virtual int get_Count();
    public abstract virtual IControllerConventionBuilder Controller(Type controllerType);
    public abstract virtual void Add(IControllerConvention convention);
}
[NullableContextAttribute("1")]
public interface Microsoft.Web.Http.Versioning.Conventions.IControllerConvention {
    public abstract virtual bool Apply(IControllerConventionBuilder controller, HttpControllerDescriptor controllerDescriptor);
}
[NullableContextAttribute("1")]
public interface Microsoft.Web.Http.Versioning.Conventions.IControllerConventionBuilder {
    public Type ControllerType { get; }
    public abstract virtual Type get_ControllerType();
    public abstract virtual IActionConventionBuilder Action(MethodInfo actionMethod);
}
[NullableContextAttribute("1")]
public interface Microsoft.Web.Http.Versioning.Conventions.IControllerConventionBuilder`1 {
    public abstract virtual IActionConventionBuilder`1<T> Action(MethodInfo actionMethod);
}
[NullableContextAttribute("1")]
public interface Microsoft.Web.Http.Versioning.Conventions.IControllerNameConvention {
    public abstract virtual string NormalizeName(string controllerName);
    public abstract virtual string GroupName(string controllerName);
}
[NullableContextAttribute("1")]
public interface Microsoft.Web.Http.Versioning.Conventions.IDeclareApiVersionConventionBuilder {
    public abstract virtual void IsApiVersionNeutral();
    public abstract virtual void HasApiVersion(ApiVersion apiVersion);
    public abstract virtual void HasDeprecatedApiVersion(ApiVersion apiVersion);
    public abstract virtual void AdvertisesApiVersion(ApiVersion apiVersion);
    public abstract virtual void AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
}
public interface Microsoft.Web.Http.Versioning.Conventions.IMapToApiVersionConventionBuilder {
    [NullableContextAttribute("1")]
public abstract virtual void MapToApiVersion(ApiVersion apiVersion);
}
public class Microsoft.Web.Http.Versioning.Conventions.OriginalControllerNameConvention : object {
    [NullableContextAttribute("1")]
public virtual string NormalizeName(string controllerName);
    [NullableContextAttribute("1")]
public virtual string GroupName(string controllerName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Versioning.Conventions.VersionByNamespaceConvention : object {
    private static string CompactDateFormat;
    private static string ReadableDateFormat;
    public virtual bool Apply(IControllerConventionBuilder controller, HttpControllerDescriptor controllerDescriptor);
    private static ApiVersion GetApiVersion(string namespace);
    private static IReadOnlyList`1<ApiVersion> Parse(string namespace);
    private static bool TryParse(string identifier, ApiVersion& apiVersion);
    private static bool IsDateLike(string value);
    private static bool TryConsumeGroup(String& identifier, string format, int length, Nullable`1& group);
    private static bool TryConsumeNumber(String& identifier, Nullable`1& number);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Versioning.CurrentImplementationApiVersionSelector : object {
    private ApiVersioningOptions options;
    public CurrentImplementationApiVersionSelector(ApiVersioningOptions options);
    public virtual ApiVersion SelectVersion(HttpRequestMessage request, ApiVersionModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Web.Http.Versioning.DefaultApiVersionReporter : object {
    [CompilerGeneratedAttribute]
private static IReportApiVersions <Instance>k__BackingField;
    private static string ApiSupportedVersions;
    private static string ApiDeprecatedVersions;
    private static string ValueSeparator;
    internal static IReportApiVersions Instance { get; }
    private static DefaultApiVersionReporter();
    [CompilerGeneratedAttribute]
internal static IReportApiVersions get_Instance();
    public sealed virtual void Report(HttpResponseHeaders headers, Lazy`1<ApiVersionModel> apiVersionModel);
    public sealed virtual void Report(HttpResponseHeaders headers, ApiVersionModel apiVersionModel);
    private static void AddApiVersionHeader(HttpResponseHeaders headers, string headerName, IReadOnlyList`1<ApiVersion> versions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Versioning.DefaultApiVersionSelector : object {
    private ApiVersioningOptions options;
    public DefaultApiVersionSelector(ApiVersioningOptions options);
    public sealed virtual ApiVersion SelectVersion(HttpRequestMessage request, ApiVersionModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Versioning.DefaultErrorResponseProvider : object {
    public virtual HttpResponseMessage CreateResponse(ErrorResponseContext context);
    protected virtual HttpError CreateErrorContent(ErrorResponseContext context);
    private static bool IsODataRequest(ErrorResponseContext context);
    private static HttpError CreateWebApiError(ErrorResponseContext context);
    private static HttpError CreateODataError(ErrorResponseContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Web.Http.Versioning.DoNotReportApiVersions : object {
    [NullableAttribute("2")]
private static DoNotReportApiVersions instance;
    internal static IReportApiVersions Instance { get; }
    internal static IReportApiVersions get_Instance();
    public sealed virtual void Report(HttpResponseHeaders headers, ApiVersionModel apiVersionModel);
    public sealed virtual void Report(HttpResponseHeaders headers, Lazy`1<ApiVersionModel> apiVersionModel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Web.Http.Versioning.ErrorCodes : object {
    public static string UnsupportedApiVersion;
    public static string ApiVersionUnspecified;
    public static string InvalidApiVersion;
    public static string AmbiguousApiVersion;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Versioning.ErrorResponseContext : object {
    [CompilerGeneratedAttribute]
private HttpRequestMessage <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <MessageDetail>k__BackingField;
    public HttpRequestMessage Request { get; }
    public HttpStatusCode StatusCode { get; }
    public string ErrorCode { get; }
    public string Message { get; }
    [NullableAttribute("2")]
public string MessageDetail { get; }
    public ErrorResponseContext(HttpRequestMessage request, HttpStatusCode statusCode, string errorCode, string message, string messageDetail);
    [CompilerGeneratedAttribute]
public HttpRequestMessage get_Request();
    [CompilerGeneratedAttribute]
public HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public string get_ErrorCode();
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_MessageDetail();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Versioning.HeaderApiVersionReader : object {
    [CompilerGeneratedAttribute]
private ICollection`1<string> <HeaderNames>k__BackingField;
    public ICollection`1<string> HeaderNames { get; }
    public HeaderApiVersionReader(IEnumerable`1<string> headerNames);
    public HeaderApiVersionReader(String[] headerNames);
    public virtual string Read(HttpRequestMessage request);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_HeaderNames();
    public virtual void AddParameters(IApiVersionParameterDescriptionContext context);
}
public interface Microsoft.Web.Http.Versioning.IApiVersionNeutral {
}
[NullableContextAttribute("1")]
public interface Microsoft.Web.Http.Versioning.IApiVersionParameterDescriptionContext {
    public abstract virtual void AddParameter(string name, ApiVersionParameterLocation location);
}
[NullableContextAttribute("1")]
public interface Microsoft.Web.Http.Versioning.IApiVersionParameterSource {
    public abstract virtual void AddParameters(IApiVersionParameterDescriptionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Web.Http.Versioning.IApiVersionParameterSourceExtensions : object {
    [ExtensionAttribute]
internal static bool VersionsByUrlSegment(IApiVersionParameterSource source);
    [ExtensionAttribute]
internal static bool VersionsOnlyByUrlSegment(IApiVersionParameterSource source);
    [ExtensionAttribute]
internal static bool VersionsByMediaType(IApiVersionParameterSource source);
    [ExtensionAttribute]
internal static string GetMediaTypeVersionParameter(IApiVersionParameterSource source);
}
[NullableContextAttribute("1")]
public interface Microsoft.Web.Http.Versioning.IApiVersionProvider {
    public ApiVersionProviderOptions Options { get; }
    public IReadOnlyList`1<ApiVersion> Versions { get; }
    public abstract virtual ApiVersionProviderOptions get_Options();
    public abstract virtual IReadOnlyList`1<ApiVersion> get_Versions();
}
public interface Microsoft.Web.Http.Versioning.IApiVersionReader {
    [NullableContextAttribute("1")]
public abstract virtual string Read(HttpRequestMessage request);
}
[NullableContextAttribute("1")]
public interface Microsoft.Web.Http.Versioning.IApiVersionSelector {
    public abstract virtual ApiVersion SelectVersion(HttpRequestMessage request, ApiVersionModel model);
}
[NullableContextAttribute("1")]
public interface Microsoft.Web.Http.Versioning.IErrorResponseProvider {
    public abstract virtual HttpResponseMessage CreateResponse(ErrorResponseContext context);
}
[NullableContextAttribute("1")]
public interface Microsoft.Web.Http.Versioning.IReportApiVersions {
    public abstract virtual void Report(HttpResponseHeaders headers, ApiVersionModel apiVersionModel);
    public abstract virtual void Report(HttpResponseHeaders headers, Lazy`1<ApiVersionModel> apiVersionModel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Versioning.LowestImplementedApiVersionSelector : object {
    private ApiVersioningOptions options;
    public LowestImplementedApiVersionSelector(ApiVersioningOptions options);
    public virtual ApiVersion SelectVersion(HttpRequestMessage request, ApiVersionModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Versioning.MediaTypeApiVersionReader : object {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; public set; }
    public MediaTypeApiVersionReader(string parameterName);
    public virtual string Read(HttpRequestMessage request);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
public void set_ParameterName(string value);
    protected virtual string ReadAcceptHeader(ICollection`1<MediaTypeWithQualityHeaderValue> accept);
    protected virtual string ReadContentTypeHeader(MediaTypeHeaderValue contentType);
    public virtual void AddParameters(IApiVersionParameterDescriptionContext context);
    [NullableContextAttribute("2")]
private static int ByQualityDescending(MediaTypeWithQualityHeaderValue left, MediaTypeWithQualityHeaderValue right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Web.Http.Versioning.QueryStringApiVersionReader : object {
    private static string DefaultQueryParameterName;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <ParameterNames>k__BackingField;
    public ICollection`1<string> ParameterNames { get; }
    public QueryStringApiVersionReader(IEnumerable`1<string> parameterNames);
    public QueryStringApiVersionReader(String[] parameterNames);
    public virtual string Read(HttpRequestMessage request);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_ParameterNames();
    public virtual void AddParameters(IApiVersionParameterDescriptionContext context);
}
public class Microsoft.Web.Http.Versioning.UrlSegmentApiVersionReader : object {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) reentrant;
    [NullableContextAttribute("1")]
public virtual string Read(HttpRequestMessage request);
    [NullableContextAttribute("1")]
public virtual void AddParameters(IApiVersionParameterDescriptionContext context);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Web.Http.HttpActionDescriptorExtensions : object {
    private static string AttributeRoutedPropertyKey;
    [ExtensionAttribute]
public static ApiVersionModel GetApiVersionModel(HttpActionDescriptor action);
    [ExtensionAttribute]
public static ApiVersionModel GetApiVersionModel(HttpActionDescriptor action, ApiVersionMapping mapping);
    [ExtensionAttribute]
public static ApiVersionMapping MappingTo(HttpActionDescriptor action, ApiVersion apiVersion);
    [ExtensionAttribute]
public static bool IsMappedTo(HttpActionDescriptor action, ApiVersion apiVersion);
    [ExtensionAttribute]
internal static bool IsAttributeRouted(HttpActionDescriptor action);
    [ExtensionAttribute]
internal static T GetProperty(HttpActionDescriptor action);
    [ExtensionAttribute]
internal static void SetProperty(HttpActionDescriptor action, T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Web.Http.HttpConfigurationExtensions : object {
    private static string ApiVersioningOptionsKey;
    [ExtensionAttribute]
public static ApiVersioningOptions GetApiVersioningOptions(HttpConfiguration configuration);
    [ExtensionAttribute]
public static void AddApiVersioning(HttpConfiguration configuration);
    [ExtensionAttribute]
public static void AddApiVersioning(HttpConfiguration configuration, Action`1<ApiVersioningOptions> setupAction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Web.Http.HttpControllerDescriptorExtensions : object {
    private static string AttributeRoutedPropertyKey;
    private static string PossibleControllerCandidatesKey;
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static ApiVersionModel GetApiVersionModel(HttpControllerDescriptor controllerDescriptor);
    [ExtensionAttribute]
public static IEnumerable`1<HttpControllerDescriptor> AsEnumerable(HttpControllerDescriptor controllerDescriptor);
    [IteratorStateMachineAttribute("System.Web.Http.HttpControllerDescriptorExtensions/<AsEnumerable>d__4")]
[ExtensionAttribute]
internal static IEnumerable`1<HttpControllerDescriptor> AsEnumerable(HttpControllerDescriptor controllerDescriptor, bool includeCandidates);
    [ExtensionAttribute]
internal static void SetApiVersionModel(HttpControllerDescriptor controller, ApiVersionModel value);
    [ExtensionAttribute]
internal static bool IsAttributeRouted(HttpControllerDescriptor controller);
    [ExtensionAttribute]
internal static void SetPossibleCandidates(HttpControllerDescriptor controllerDescriptor, IEnumerable`1<HttpControllerDescriptor> value);
    [ExtensionAttribute]
private static T GetProperty(HttpControllerDescriptor controller);
    [ExtensionAttribute]
private static void SetProperty(HttpControllerDescriptor controller, T value);
}
[ExtensionAttribute]
internal static class System.Web.Http.HttpParameterBindingExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static bool WillReadUri(HttpParameterBinding parameterBinding);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Web.Http.HttpRequestMessageExtensions : object {
    private static string RoutingContextKey;
    private static string ApiVersionPropertiesKey;
    [ExtensionAttribute]
private static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, Func`2<bool, HttpError> errorCreator);
    [ExtensionAttribute]
internal static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, string message, string messageDetail);
    [ExtensionAttribute]
public static ApiVersioningOptions GetApiVersioningOptions(HttpRequestMessage request);
    [ExtensionAttribute]
public static ApiVersionRequestProperties ApiVersionProperties(HttpRequestMessage request);
    [ExtensionAttribute]
public static ApiVersion GetRequestedApiVersion(HttpRequestMessage request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Web.Http.HttpRouteCollectionExtensions : object {
    [ExtensionAttribute]
public static IReadOnlyDictionary`2<string, IHttpRoute> ToDictionary(HttpRouteCollection routes);
    [ExtensionAttribute]
private static IReadOnlyDictionary`2<string, IHttpRoute> CopyToDictionary(HttpRouteCollection routes);
    [ExtensionAttribute]
private static IReadOnlyDictionary`2<string, IHttpRoute> BuildDictionaryFromKeys(HttpRouteCollection routes);
    [ExtensionAttribute]
private static IReadOnlyList`1<string> Keys(HttpRouteCollection routes);
    private static ICollection`1<string> GetDictionaryKeys(HttpRouteCollection routes);
}
[ExtensionAttribute]
internal static class System.Web.Http.HttpRouteDataExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static CandidateAction[] GetDirectRouteCandidates(IHttpRouteData routeData);
}
[ExtensionAttribute]
internal static class System.Web.Http.HttpRouteExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static CandidateAction[] GetDirectRouteCandidates(IHttpRoute route);
}
