internal class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.AbsoluteUrlFactory : object {
    [CompilerGeneratedAttribute]
private IHttpContextAccessor <ContextAccessor>k__BackingField;
    public IHttpContextAccessor ContextAccessor { get; }
    public AbsoluteUrlFactory(IHttpContextAccessor httpContextAccessor);
    [CompilerGeneratedAttribute]
public IHttpContextAccessor get_ContextAccessor();
    public sealed virtual string GetAbsoluteUrl(string path);
    public sealed virtual string GetAbsoluteUrl(HttpContext context, string path);
    private static ValueTuple`2<bool, string> ShouldProcessPath(string path);
}
public class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.ApiAuthorizationDbContext`1 : IdentityDbContext`1<TUser> {
    private IOptions`1<OperationalStoreOptions> _operationalStoreOptions;
    [CompilerGeneratedAttribute]
private DbSet`1<PersistedGrant> <PersistedGrants>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<DeviceFlowCodes> <DeviceFlowCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<Key> <Keys>k__BackingField;
    public DbSet`1<PersistedGrant> PersistedGrants { get; public set; }
    public DbSet`1<DeviceFlowCodes> DeviceFlowCodes { get; public set; }
    public DbSet`1<Key> Keys { get; public set; }
    public ApiAuthorizationDbContext`1(DbContextOptions options, IOptions`1<OperationalStoreOptions> operationalStoreOptions);
    [CompilerGeneratedAttribute]
public sealed virtual DbSet`1<PersistedGrant> get_PersistedGrants();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PersistedGrants(DbSet`1<PersistedGrant> value);
    [CompilerGeneratedAttribute]
public sealed virtual DbSet`1<DeviceFlowCodes> get_DeviceFlowCodes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DeviceFlowCodes(DbSet`1<DeviceFlowCodes> value);
    [CompilerGeneratedAttribute]
public sealed virtual DbSet`1<Key> get_Keys();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Keys(DbSet`1<Key> value);
    private sealed virtual override Task`1<int> Duende.IdentityServer.EntityFramework.Interfaces.IPersistedGrantDbContext.SaveChangesAsync();
    protected virtual void OnModelCreating(ModelBuilder builder);
}
public class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.ApiAuthorizationOptions : object {
    [CompilerGeneratedAttribute]
private IdentityResourceCollection <IdentityResources>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiResourceCollection <ApiResources>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiScopeCollection <ApiScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientCollection <Clients>k__BackingField;
    [CompilerGeneratedAttribute]
private SigningCredentials <SigningCredential>k__BackingField;
    public IdentityResourceCollection IdentityResources { get; public set; }
    public ApiResourceCollection ApiResources { get; public set; }
    public ApiScopeCollection ApiScopes { get; public set; }
    public ClientCollection Clients { get; public set; }
    public SigningCredentials SigningCredential { get; public set; }
    [CompilerGeneratedAttribute]
public IdentityResourceCollection get_IdentityResources();
    [CompilerGeneratedAttribute]
public void set_IdentityResources(IdentityResourceCollection value);
    [CompilerGeneratedAttribute]
public ApiResourceCollection get_ApiResources();
    [CompilerGeneratedAttribute]
public void set_ApiResources(ApiResourceCollection value);
    [CompilerGeneratedAttribute]
public ApiScopeCollection get_ApiScopes();
    [CompilerGeneratedAttribute]
public void set_ApiScopes(ApiScopeCollection value);
    [CompilerGeneratedAttribute]
public ClientCollection get_Clients();
    [CompilerGeneratedAttribute]
public void set_Clients(ClientCollection value);
    [CompilerGeneratedAttribute]
public SigningCredentials get_SigningCredential();
    [CompilerGeneratedAttribute]
public void set_SigningCredential(SigningCredentials value);
}
public class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.ApiResourceBuilder : object {
    private ApiResource _apiResource;
    private bool _built;
    public ApiResourceBuilder(ApiResource resource);
    public static ApiResourceBuilder ApiResource(string name);
    public static ApiResourceBuilder IdentityServerJwt(string name);
    public ApiResourceBuilder WithApplicationProfile(string profile);
    public ApiResourceBuilder WithScopes(String[] resourceScopes);
    public ApiResourceBuilder ReplaceScopes(String[] resourceScopes);
    public ApiResourceBuilder AllowAllClients();
    public ApiResource Build();
    internal ApiResourceBuilder WithAllowedClients(string clientList);
    internal ApiResourceBuilder FromConfiguration();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.ApiResourceCollection : Collection`1<ApiResource> {
    public ApiResource Item { get; }
    public ApiResourceCollection(IList`1<ApiResource> list);
    public ApiResource get_Item(string key);
    public void AddRange(ApiResource[] resources);
    public void AddApiResource(string name, Action`1<ApiResourceBuilder> configure);
    public void AddIdentityServerJwt(string name, Action`1<ApiResourceBuilder> configure);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.ApiScopeCollection : Collection`1<ApiScope> {
    public ApiScope Item { get; }
    public ApiScopeCollection(IList`1<ApiScope> list);
    public ApiScope get_Item(string key);
    public bool ContainsScope(string key);
    public void AddRange(ApiScope[] scopes);
}
public static class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.ApplicationProfiles : object {
    public static string API;
    public static string IdentityServerJwt;
    public static string SPA;
    public static string IdentityServerSPA;
    public static string NativeApp;
}
public static class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.ApplicationProfilesPropertyNames : object {
    public static string Profile;
    public static string Source;
    public static string Clients;
}
public static class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.ApplicationProfilesPropertyValues : object {
    public static string AllowAllApplications;
    public static string Configuration;
    public static string Default;
}
internal class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.AspNetConventionsConfigureOptions : object {
    public sealed virtual void Configure(IdentityServerOptions options);
}
internal class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.Authentication.IdentityServerJwtPolicySchemeForwardSelector : object {
    private PathString _identityPath;
    private string _IdentityServerJwtScheme;
    public IdentityServerJwtPolicySchemeForwardSelector(string identityPath, string IdentityServerJwtScheme);
    public string SelectScheme(HttpContext ctx);
}
internal class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.AutoRedirectEndSessionEndpoint : object {
    private ILogger _logger;
    private IUserSession _session;
    private IOptions`1<IdentityServerOptions> _identityServerOptions;
    private IEndSessionRequestValidator _requestvalidator;
    public AutoRedirectEndSessionEndpoint(ILogger`1<AutoRedirectEndSessionEndpoint> logger, IEndSessionRequestValidator requestValidator, IOptions`1<IdentityServerOptions> identityServerOptions, IUserSession session);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.ApiAuthorization.IdentityServer.AutoRedirectEndSessionEndpoint/<ProcessAsync>d__5")]
public sealed virtual Task`1<IEndpointResult> ProcessAsync(HttpContext ctx);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.ApiAuthorization.IdentityServer.AutoRedirectEndSessionEndpoint/<GetParametersAsync>d__6")]
private static Task`1<NameValueCollection> GetParametersAsync(HttpRequest request);
    private static IEndpointResult ValidateRequest(HttpRequest request);
}
public class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.ClientBuilder : object {
    private static string NativeAppClientRedirectUri;
    private Client _client;
    private bool _built;
    public ClientBuilder(Client client);
    public static ClientBuilder IdentityServerSPA(string clientId);
    public static ClientBuilder SPA(string clientId);
    public static ClientBuilder NativeApp(string clientId);
    public ClientBuilder WithClientId(string clientId);
    public ClientBuilder WithApplicationProfile(string profile);
    public ClientBuilder WithScopes(String[] scopes);
    public ClientBuilder WithRedirectUri(string redirectUri);
    public ClientBuilder WithLogoutRedirectUri(string logoutUri);
    internal ClientBuilder WithClientSecret(string clientSecret);
    public ClientBuilder WithoutClientSecrets();
    public Client Build();
    internal ClientBuilder WithPkce();
    internal ClientBuilder FromConfiguration();
    internal ClientBuilder WithAllowedGrants(ICollection`1<string> grants);
    internal ClientBuilder WithAllowedOrigins(String[] origins);
    internal ClientBuilder AllowAccessTokensViaBrowser();
    private static Client CreateClient(string name);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.ClientCollection : Collection`1<Client> {
    public Client Item { get; }
    public ClientCollection(IList`1<Client> list);
    public Client get_Item(string key);
    public void AddRange(Client[] clients);
    public Client AddIdentityServerSPA(string clientId, Action`1<ClientBuilder> configure);
    public Client AddSPA(string clientId, Action`1<ClientBuilder> configure);
    public Client AddNativeApp(string clientId, Action`1<ClientBuilder> configure);
}
internal class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.ClientDefinition : ServiceDefinition {
    [CompilerGeneratedAttribute]
private string <RedirectUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogoutUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientSecret>k__BackingField;
    public string RedirectUri { get; public set; }
    public string LogoutUri { get; public set; }
    public string ClientSecret { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RedirectUri();
    [CompilerGeneratedAttribute]
public void set_RedirectUri(string value);
    [CompilerGeneratedAttribute]
public string get_LogoutUri();
    [CompilerGeneratedAttribute]
public void set_LogoutUri(string value);
    [CompilerGeneratedAttribute]
public string get_ClientSecret();
    [CompilerGeneratedAttribute]
public void set_ClientSecret(string value);
}
[HtmlTargetElementAttribute("*")]
public class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.ClientParametersTagHelper : TagHelper {
    private IClientRequestParametersProvider _clientRequestParametersProvider;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private ViewContext <ViewContext>k__BackingField;
    [HtmlAttributeNameAttribute("asp-apiauth-parameters")]
public string ClientId { get; public set; }
    [ViewContextAttribute]
public ViewContext ViewContext { get; public set; }
    public ClientParametersTagHelper(IClientRequestParametersProvider clientRequestParametersProvider);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public ViewContext get_ViewContext();
    [CompilerGeneratedAttribute]
public void set_ViewContext(ViewContext value);
    public virtual void Process(TagHelperContext context, TagHelperOutput output);
}
internal class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.Configuration.ConfigureApiScopes : object {
    public sealed virtual void PostConfigure(string name, ApiAuthorizationOptions options);
    private static void AddResourceScopesToApiScopes(ApiAuthorizationOptions options);
}
internal class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.Configuration.ConfigureClientScopes : object {
    private static char DefaultClientListSeparator;
    private ILogger`1<ConfigureClientScopes> _logger;
    public ConfigureClientScopes(ILogger`1<ConfigureClientScopes> logger);
    public sealed virtual void PostConfigure(string name, ApiAuthorizationOptions options);
    private void AddIdentityResourceScopesToClients(ApiAuthorizationOptions options);
    private void AddApiResourceScopesToClients(ApiAuthorizationOptions options);
    private static void AddScopes(ApiResource resource, Client client);
}
internal class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.Configuration.IdentityServerJwtDescriptor : object {
    [CompilerGeneratedAttribute]
private IWebHostEnvironment <Environment>k__BackingField;
    public IWebHostEnvironment Environment { get; }
    public IdentityServerJwtDescriptor(IWebHostEnvironment environment);
    [CompilerGeneratedAttribute]
public IWebHostEnvironment get_Environment();
    public sealed virtual IDictionary`2<string, ResourceDefinition> GetResourceDefinitions();
}
internal interface Microsoft.AspNetCore.ApiAuthorization.IdentityServer.Configuration.IIdentityServerJwtDescriptor {
    public abstract virtual IDictionary`2<string, ResourceDefinition> GetResourceDefinitions();
}
internal class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.Configuration.KeyDefinition : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Persisted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StoreLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StoreName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorageFlags>k__BackingField;
    public string Type { get; public set; }
    public Nullable`1<bool> Persisted { get; public set; }
    public string FilePath { get; public set; }
    public string Password { get; public set; }
    public string Name { get; public set; }
    public string StoreLocation { get; public set; }
    public string StoreName { get; public set; }
    public string StorageFlags { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Persisted();
    [CompilerGeneratedAttribute]
public void set_Persisted(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_StoreLocation();
    [CompilerGeneratedAttribute]
public void set_StoreLocation(string value);
    [CompilerGeneratedAttribute]
public string get_StoreName();
    [CompilerGeneratedAttribute]
public void set_StoreName(string value);
    [CompilerGeneratedAttribute]
public string get_StorageFlags();
    [CompilerGeneratedAttribute]
public void set_StorageFlags(string value);
}
internal class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.Configuration.KeySources : object {
    public static string File;
    public static string Development;
    public static string Store;
}
internal class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.ConfigureClients : object {
    private static string DefaultLocalSPARelativeRedirectUri;
    private static string DefaultLocalSPARelativePostLogoutRedirectUri;
    private IConfiguration _configuration;
    private ILogger`1<ConfigureClients> _logger;
    public ConfigureClients(IConfiguration configuration, ILogger`1<ConfigureClients> logger);
    public sealed virtual void Configure(ApiAuthorizationOptions options);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.ApiAuthorization.IdentityServer.ConfigureClients/<GetClients>d__6")]
internal IEnumerable`1<Client> GetClients();
    private static Client GetSPA(string name, ClientDefinition definition);
    private static Client GetNativeApp(string name);
    private static Client GetLocalSPA(string name, ClientDefinition definition);
}
internal class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.ConfigureIdentityResources : object {
    private IConfiguration _configuration;
    private static char ScopesSeparator;
    public ConfigureIdentityResources(IConfiguration configuration);
    public sealed virtual void Configure(ApiAuthorizationOptions options);
    private static void ClearDefaultIdentityResources(ApiAuthorizationOptions options);
    private static String[] ParseScopes(string scopes);
}
internal class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.ConfigureSigningCredentials : object {
    private static X509KeyStorageFlags UnsafeEphemeralKeySet;
    private static string DefaultTempKeyRelativePath;
    private IConfiguration _configuration;
    private ILogger`1<ConfigureSigningCredentials> _logger;
    public ConfigureSigningCredentials(IConfiguration configuration, ILogger`1<ConfigureSigningCredentials> logger);
    public sealed virtual void Configure(ApiAuthorizationOptions options);
    public SigningCredentials LoadKey();
    internal static DateTimeOffset GetCurrentTime();
    private static X509KeyStorageFlags GetStorageFlags(KeyDefinition key);
    [CompilerGeneratedAttribute]
internal static X509KeyStorageFlags <GetStorageFlags>g__ParseCurrentFlag|8_0(string candidate);
}
internal class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.DefaultClientRequestParametersProvider : object {
    [CompilerGeneratedAttribute]
private IAbsoluteUrlFactory <UrlFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IOptions`1<ApiAuthorizationOptions> <Options>k__BackingField;
    public IAbsoluteUrlFactory UrlFactory { get; }
    public IOptions`1<ApiAuthorizationOptions> Options { get; }
    public DefaultClientRequestParametersProvider(IAbsoluteUrlFactory urlFactory, IOptions`1<ApiAuthorizationOptions> options);
    [CompilerGeneratedAttribute]
public IAbsoluteUrlFactory get_UrlFactory();
    [CompilerGeneratedAttribute]
public IOptions`1<ApiAuthorizationOptions> get_Options();
    public sealed virtual IDictionary`2<string, string> GetClientParameters(HttpContext context, string clientId);
}
internal interface Microsoft.AspNetCore.ApiAuthorization.IdentityServer.IAbsoluteUrlFactory {
    public abstract virtual string GetAbsoluteUrl(string path);
    public abstract virtual string GetAbsoluteUrl(HttpContext context, string path);
}
public interface Microsoft.AspNetCore.ApiAuthorization.IdentityServer.IClientRequestParametersProvider {
    public abstract virtual IDictionary`2<string, string> GetClientParameters(HttpContext context, string clientId);
}
public class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.IdentityResourceBuilder : object {
    private IdentityResource _identityResource;
    private bool _built;
    public IdentityResourceBuilder(IdentityResource resource);
    public static IdentityResourceBuilder OpenId();
    public static IdentityResourceBuilder Profile();
    public static IdentityResourceBuilder Address();
    public static IdentityResourceBuilder Email();
    public static IdentityResourceBuilder Phone();
    public IdentityResourceBuilder AllowAllClients();
    public IdentityResource Build();
    internal IdentityResourceBuilder WithAllowedClients(string clientList);
    internal IdentityResourceBuilder FromConfiguration();
    internal IdentityResourceBuilder FromDefault();
    internal static IdentityResourceBuilder IdentityResource(string name);
    private static IdentityResource GetResource(string name);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.IdentityResourceCollection : Collection`1<IdentityResource> {
    public IdentityResource Item { get; }
    public IdentityResourceCollection(IList`1<IdentityResource> list);
    public IdentityResource get_Item(string key);
    public void AddRange(IdentityResource[] identityResources);
    public void AddOpenId();
    public void AddOpenId(Action`1<IdentityResourceBuilder> configure);
    public void AddProfile();
    public void AddProfile(Action`1<IdentityResourceBuilder> configure);
    public void AddAddress();
    public void AddAddress(Action`1<IdentityResourceBuilder> configure);
    public void AddEmail();
    public void AddEmail(Action`1<IdentityResourceBuilder> configure);
    public void AddPhone();
    public void AddPhone(Action`1<IdentityResourceBuilder> configure);
}
internal class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.IdentityResourceDefinition : ResourceDefinition {
}
internal class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.IdentityServerJwtBearerOptionsConfiguration : object {
    private string _scheme;
    private string _apiName;
    private IIdentityServerJwtDescriptor _localApiDescriptor;
    public IdentityServerJwtBearerOptionsConfiguration(string scheme, string apiName, IIdentityServerJwtDescriptor localApiDescriptor);
    public sealed virtual void Configure(string name, JwtBearerOptions options);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.ApiAuthorization.IdentityServer.IdentityServerJwtBearerOptionsConfiguration/<ResolveAuthorityAndKeysAsync>d__5")]
internal static Task ResolveAuthorityAndKeysAsync(MessageReceivedContext messageReceivedContext);
    public sealed virtual void Configure(JwtBearerOptions options);
}
public class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.IdentityServerJwtConstants : object {
    public static string IdentityServerJwtScheme;
    public static string IdentityServerJwtBearerScheme;
}
internal static class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.LoggerEventIds : object {
    public static EventId ConfiguringAPIResource;
    public static EventId ConfiguringLocalAPIResource;
    public static EventId ConfiguringClient;
    public static EventId AllowedApplicationNotDefienedForIdentityResource;
    public static EventId AllApplicationsAllowedForIdentityResource;
    public static EventId ApplicationsAllowedForIdentityResource;
    public static EventId AllowedApplicationNotDefienedForApiResource;
    public static EventId AllApplicationsAllowedForApiResource;
    public static EventId ApplicationsAllowedForApiResource;
    public static EventId DevelopmentKeyLoaded;
    public static EventId CertificateLoadedFromFile;
    public static EventId CertificateLoadedFromStore;
    public static EventId EndingSessionFailed;
    private static LoggerEventIds();
}
internal class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.RelativeRedirectUriValidator : StrictRedirectUriValidator {
    [CompilerGeneratedAttribute]
private IAbsoluteUrlFactory <AbsoluteUrlFactory>k__BackingField;
    public IAbsoluteUrlFactory AbsoluteUrlFactory { get; }
    public RelativeRedirectUriValidator(IAbsoluteUrlFactory absoluteUrlFactory);
    [CompilerGeneratedAttribute]
public IAbsoluteUrlFactory get_AbsoluteUrlFactory();
    public virtual Task`1<bool> IsRedirectUriValidAsync(string requestedUri, Client client);
    public virtual Task`1<bool> IsPostLogoutRedirectUriValidAsync(string requestedUri, Client client);
    private static bool IsLocalSPA(Client client);
    private Task`1<bool> ValidateRelativeUris(string requestedUri, IEnumerable`1<string> clientUris);
}
internal class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.ResourceDefinition : ServiceDefinition {
    [CompilerGeneratedAttribute]
private string <Scopes>k__BackingField;
    public string Scopes { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Scopes();
    [CompilerGeneratedAttribute]
public void set_Scopes(string value);
}
internal class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.ServiceDefinition : object {
    [CompilerGeneratedAttribute]
private string <Profile>k__BackingField;
    public string Profile { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Profile();
    [CompilerGeneratedAttribute]
public void set_Profile(string value);
}
internal static class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.SigningKeysLoader : object {
    public static X509Certificate2 LoadFromFile(string path, string password, X509KeyStorageFlags keyStorageFlags);
    public static X509Certificate2 LoadFromStoreCert(string subject, string storeName, StoreLocation storeLocation, DateTimeOffset currentTime);
    public static RSA LoadDevelopment(string path, bool createIfMissing);
    private static void DisposeCertificates(X509Certificate2Collection certificates, X509Certificate2 except);
}
internal class Microsoft.AspNetCore.ApiAuthorization.IdentityServer.StaticConfigurationManager : object {
    private Task`1<OpenIdConnectConfiguration> _configuration;
    public StaticConfigurationManager(OpenIdConnectConfiguration configuration);
    public sealed virtual Task`1<OpenIdConnectConfiguration> GetConfigurationAsync(CancellationToken cancel);
    public sealed virtual void RequestRefresh();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Authentication.AuthenticationBuilderExtensions : object {
    private static string IdentityServerJwtNameSuffix;
    private static PathString DefaultIdentityUIPathPrefix;
    private static AuthenticationBuilderExtensions();
    [ExtensionAttribute]
public static AuthenticationBuilder AddIdentityServerJwt(AuthenticationBuilder builder);
    [CompilerGeneratedAttribute]
internal static IdentityServerJwtBearerOptionsConfiguration <AddIdentityServerJwt>g__JwtBearerOptionsFactory|2_2(IServiceProvider sp);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.Extensions.DependencyInjection.ConfigureApiResources : object {
    private static char ScopesSeparator;
    private IConfiguration _configuration;
    private ILogger`1<ConfigureApiResources> _logger;
    private IIdentityServerJwtDescriptor _localApiDescriptor;
    public ConfigureApiResources(IConfiguration configuration, IIdentityServerJwtDescriptor localApiDescriptor, ILogger`1<ConfigureApiResources> logger);
    public sealed virtual void Configure(ApiAuthorizationOptions options);
    [IteratorStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ConfigureApiResources/<GetApiResources>d__6")]
internal IEnumerable`1<ApiResource> GetApiResources();
    public static ApiResource GetResource(string name, ResourceDefinition definition);
    private static String[] ParseScopes(string scopes);
    private static ApiResource GetAPI(string name, ResourceDefinition definition);
    private static ApiResource GetLocalAPI(string name, ResourceDefinition definition);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.IdentityServerBuilderConfigurationExtensions : object {
    [ExtensionAttribute]
public static IIdentityServerBuilder AddApiAuthorization(IIdentityServerBuilder builder);
    [ExtensionAttribute]
public static IIdentityServerBuilder AddApiAuthorization(IIdentityServerBuilder builder, Action`1<ApiAuthorizationOptions> configure);
    [ExtensionAttribute]
public static IIdentityServerBuilder AddApiResources(IIdentityServerBuilder builder);
    [ExtensionAttribute]
public static IIdentityServerBuilder AddApiResources(IIdentityServerBuilder builder, IConfiguration configuration);
    [ExtensionAttribute]
internal static IIdentityServerBuilder AddApiScopes(IIdentityServerBuilder builder);
    [ExtensionAttribute]
public static IIdentityServerBuilder AddIdentityResources(IIdentityServerBuilder builder);
    [ExtensionAttribute]
public static IIdentityServerBuilder AddIdentityResources(IIdentityServerBuilder builder, IConfiguration configuration);
    [ExtensionAttribute]
public static IIdentityServerBuilder AddClients(IIdentityServerBuilder builder);
    [ExtensionAttribute]
public static IIdentityServerBuilder AddClients(IIdentityServerBuilder builder, IConfiguration configuration);
    [ExtensionAttribute]
public static IIdentityServerBuilder AddSigningCredentials(IIdentityServerBuilder builder);
    [ExtensionAttribute]
public static IIdentityServerBuilder AddSigningCredentials(IIdentityServerBuilder builder, IConfiguration configuration);
    [ExtensionAttribute]
internal static IIdentityServerBuilder ConfigureReplacedServices(IIdentityServerBuilder builder);
    private static void ReplaceEndSessionEndpoint(IIdentityServerBuilder builder);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
