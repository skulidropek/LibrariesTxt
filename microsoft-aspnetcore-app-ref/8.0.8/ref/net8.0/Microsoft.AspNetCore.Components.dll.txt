[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class Microsoft.AspNetCore.Components.BindConverter : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static BindParser`1<string> ConvertToString;
    [NullableAttribute("1")]
internal static BindParser`1<bool> ConvertToBool;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<bool>> ConvertToNullableBool;
    [NullableAttribute("1")]
internal static BindParser`1<int> ConvertToInt;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<int>> ConvertToNullableInt;
    [NullableAttribute("1")]
internal static BindParser`1<long> ConvertToLong;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<long>> ConvertToNullableLong;
    [NullableAttribute("1")]
internal static BindParser`1<short> ConvertToShort;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<short>> ConvertToNullableShort;
    [NullableAttribute("1")]
internal static BindParser`1<float> ConvertToFloat;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<float>> ConvertToNullableFloat;
    [NullableAttribute("1")]
internal static BindParser`1<double> ConvertToDoubleDelegate;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<double>> ConvertToNullableDoubleDelegate;
    [NullableAttribute("1")]
internal static BindParser`1<decimal> ConvertToDecimal;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<decimal>> ConvertToNullableDecimal;
    [NullableAttribute("1")]
internal static BindParser`1<DateTime> ConvertToDateTime;
    [NullableAttribute("1")]
internal static BindParserWithFormat`1<DateTime> ConvertToDateTimeWithFormat;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<DateTime>> ConvertToNullableDateTime;
    [NullableAttribute("1")]
internal static BindParserWithFormat`1<Nullable`1<DateTime>> ConvertToNullableDateTimeWithFormat;
    [NullableAttribute("1")]
internal static BindParser`1<DateTimeOffset> ConvertToDateTimeOffset;
    [NullableAttribute("1")]
internal static BindParserWithFormat`1<DateTimeOffset> ConvertToDateTimeOffsetWithFormat;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<DateTimeOffset>> ConvertToNullableDateTimeOffset;
    [NullableAttribute("1")]
internal static BindParserWithFormat`1<Nullable`1<DateTimeOffset>> ConvertToNullableDateTimeOffsetWithFormat;
    [NullableAttribute("1")]
internal static BindParser`1<DateOnly> ConvertToDateOnly;
    [NullableAttribute("1")]
internal static BindParserWithFormat`1<DateOnly> ConvertToDateOnlyWithFormat;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<DateOnly>> ConvertToNullableDateOnly;
    [NullableAttribute("1")]
internal static BindParserWithFormat`1<Nullable`1<DateOnly>> ConvertToNullableDateOnlyWithFormat;
    [NullableAttribute("1")]
internal static BindParser`1<TimeOnly> ConvertToTimeOnly;
    [NullableAttribute("1")]
internal static BindParserWithFormat`1<TimeOnly> ConvertToTimeOnlyWithFormat;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<TimeOnly>> ConvertToNullableTimeOnly;
    [NullableAttribute("1")]
internal static BindParserWithFormat`1<Nullable`1<TimeOnly>> ConvertToNullableTimeOnlyWithFormat;
    [NullableAttribute("1")]
internal static BindParser`1<Guid> ConvertToGuid;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<Guid>> ConvertToNullableGuid;
    public static string FormatValue(string value, CultureInfo culture);
    public static bool FormatValue(bool value, CultureInfo culture);
    public static Nullable`1<bool> FormatValue(Nullable`1<bool> value, CultureInfo culture);
    public static string FormatValue(int value, CultureInfo culture);
    public static string FormatValue(Nullable`1<int> value, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(long value, CultureInfo culture);
    public static string FormatValue(Nullable`1<long> value, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(short value, CultureInfo culture);
    public static string FormatValue(Nullable`1<short> value, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(float value, CultureInfo culture);
    public static string FormatValue(Nullable`1<float> value, CultureInfo culture);
    public static string FormatValue(double value, CultureInfo culture);
    public static string FormatValue(Nullable`1<double> value, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(decimal value, CultureInfo culture);
    public static string FormatValue(Nullable`1<decimal> value, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(DateTime value, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(DateTime value, string format, CultureInfo culture);
    public static string FormatValue(Nullable`1<DateTime> value, CultureInfo culture);
    public static string FormatValue(Nullable`1<DateTime> value, string format, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(DateTimeOffset value, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(DateTimeOffset value, string format, CultureInfo culture);
    public static string FormatValue(Nullable`1<DateTimeOffset> value, CultureInfo culture);
    public static string FormatValue(Nullable`1<DateTimeOffset> value, string format, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(DateOnly value, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(DateOnly value, string format, CultureInfo culture);
    public static string FormatValue(Nullable`1<DateOnly> value, CultureInfo culture);
    public static string FormatValue(Nullable`1<DateOnly> value, string format, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(TimeOnly value, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(TimeOnly value, string format, CultureInfo culture);
    public static string FormatValue(Nullable`1<TimeOnly> value, CultureInfo culture);
    public static string FormatValue(Nullable`1<TimeOnly> value, string format, CultureInfo culture);
    public static object FormatValue(T value, CultureInfo culture);
    public static bool TryConvertToString(object obj, CultureInfo culture, String& value);
    public static bool TryConvertToBool(object obj, CultureInfo culture, Boolean& value);
    public static bool TryConvertToNullableBool(object obj, CultureInfo culture, Nullable`1& value);
    public static bool TryConvertToInt(object obj, CultureInfo culture, Int32& value);
    public static bool TryConvertToNullableInt(object obj, CultureInfo culture, Nullable`1& value);
    public static bool TryConvertToLong(object obj, CultureInfo culture, Int64& value);
    public static bool TryConvertToNullableLong(object obj, CultureInfo culture, Nullable`1& value);
    public static bool TryConvertToShort(object obj, CultureInfo culture, Int16& value);
    public static bool TryConvertToNullableShort(object obj, CultureInfo culture, Nullable`1& value);
    public static bool TryConvertToFloat(object obj, CultureInfo culture, Single& value);
    public static bool TryConvertToNullableFloat(object obj, CultureInfo culture, Nullable`1& value);
    public static bool TryConvertToDouble(object obj, CultureInfo culture, Double& value);
    public static bool TryConvertToNullableDouble(object obj, CultureInfo culture, Nullable`1& value);
    public static bool TryConvertToDecimal(object obj, CultureInfo culture, Decimal& value);
    public static bool TryConvertToNullableDecimal(object obj, CultureInfo culture, Nullable`1& value);
    public static bool TryConvertToDateTime(object obj, CultureInfo culture, DateTime& value);
    public static bool TryConvertToDateTime(object obj, CultureInfo culture, string format, DateTime& value);
    public static bool TryConvertToNullableDateTime(object obj, CultureInfo culture, Nullable`1& value);
    public static bool TryConvertToNullableDateTime(object obj, CultureInfo culture, string format, Nullable`1& value);
    public static bool TryConvertToDateTimeOffset(object obj, CultureInfo culture, DateTimeOffset& value);
    public static bool TryConvertToDateTimeOffset(object obj, CultureInfo culture, string format, DateTimeOffset& value);
    public static bool TryConvertToNullableDateTimeOffset(object obj, CultureInfo culture, Nullable`1& value);
    public static bool TryConvertToNullableDateTimeOffset(object obj, CultureInfo culture, string format, Nullable`1& value);
    public static bool TryConvertToDateOnly(object obj, CultureInfo culture, DateOnly& value);
    public static bool TryConvertToDateOnly(object obj, CultureInfo culture, string format, DateOnly& value);
    public static bool TryConvertToNullableDateOnly(object obj, CultureInfo culture, Nullable`1& value);
    public static bool TryConvertToNullableDateOnly(object obj, CultureInfo culture, string format, Nullable`1& value);
    public static bool TryConvertToTimeOnly(object obj, CultureInfo culture, TimeOnly& value);
    public static bool TryConvertToTimeOnly(object obj, CultureInfo culture, string format, TimeOnly& value);
    public static bool TryConvertToNullableTimeOnly(object obj, CultureInfo culture, Nullable`1& value);
    public static bool TryConvertToNullableTimeOnly(object obj, CultureInfo culture, string format, Nullable`1& value);
    public static bool TryConvertTo(object obj, CultureInfo culture, T& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Components.BindElementAttribute : Attribute {
    public string Element { get; }
    [NullableAttribute("2")]
public string Suffix { get; }
    public string ValueAttribute { get; }
    public string ChangeAttribute { get; }
    public BindElementAttribute(string element, string suffix, string valueAttribute, string changeAttribute);
    [CompilerGeneratedAttribute]
public string get_Element();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Suffix();
    [CompilerGeneratedAttribute]
public string get_ValueAttribute();
    [CompilerGeneratedAttribute]
public string get_ChangeAttribute();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("128")]
public class Microsoft.AspNetCore.Components.CascadingParameterAttribute : CascadingParameterAttributeBase {
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public abstract class Microsoft.AspNetCore.Components.CascadingParameterAttributeBase : Attribute {
    internal bool SingleDelivery { get; }
    internal virtual bool get_SingleDelivery();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.CascadingParameterInfo : ValueType {
    [CompilerGeneratedAttribute]
private CascadingParameterAttributeBase <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <PropertyType>k__BackingField;
    public CascadingParameterAttributeBase Attribute { get; }
    public string PropertyName { get; }
    public Type PropertyType { get; }
    internal CascadingParameterInfo(CascadingParameterAttributeBase attribute, string propertyName, Type propertyType);
    [CompilerGeneratedAttribute]
public CascadingParameterAttributeBase get_Attribute();
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public Type get_PropertyType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.Components.CascadingParameterState : ValueType {
    private static ConcurrentDictionary`2<Type, CascadingParameterInfo[]> _cachedInfos;
    [CompilerGeneratedAttribute]
private CascadingParameterInfo <ParameterInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ICascadingValueSupplier <ValueSupplier>k__BackingField;
    public CascadingParameterInfo ParameterInfo { get; }
    public ICascadingValueSupplier ValueSupplier { get; }
    public CascadingParameterState(CascadingParameterInfo& parameterInfo, ICascadingValueSupplier valueSupplier);
    [CompilerGeneratedAttribute]
public CascadingParameterInfo get_ParameterInfo();
    [CompilerGeneratedAttribute]
public ICascadingValueSupplier get_ValueSupplier();
    public static IReadOnlyList`1<CascadingParameterState> FindCascadingParameters(ComponentState componentState, Boolean& hasSingleDeliveryParameters);
    [NullableContextAttribute("2")]
internal static ICascadingValueSupplier GetMatchingCascadingValueSupplier(CascadingParameterInfo& info, Renderer renderer, ComponentState componentState);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Components.CascadingTypeParameterAttribute : Attribute {
    public string Name { get; }
    public CascadingTypeParameterAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.CascadingValue`1 : object {
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public TValue Value { get; public set; }
    [ParameterAttribute]
public string Name { get; public set; }
    [ParameterAttribute]
public bool IsFixed { get; public set; }
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public TValue get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(TValue value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFixed();
    [CompilerGeneratedAttribute]
public void set_IsFixed(bool value);
    public sealed virtual void Attach(RenderHandle renderHandle);
    [NullableContextAttribute("1")]
public sealed virtual Task SetParametersAsync(ParameterView parameters);
    private sealed virtual override bool Microsoft.AspNetCore.Components.ICascadingValueSupplier.CanSupplyValue(CascadingParameterInfo& modreq(System.Runtime.InteropServices.InAttribute) parameterInfo);
    private sealed virtual override object Microsoft.AspNetCore.Components.ICascadingValueSupplier.GetCurrentValue(CascadingParameterInfo& modreq(System.Runtime.InteropServices.InAttribute) parameterInfo);
    private sealed virtual override void Microsoft.AspNetCore.Components.ICascadingValueSupplier.Subscribe(ComponentState subscriber, CascadingParameterInfo& modreq(System.Runtime.InteropServices.InAttribute) parameterInfo);
    private sealed virtual override void Microsoft.AspNetCore.Components.ICascadingValueSupplier.Unsubscribe(ComponentState subscriber, CascadingParameterInfo& modreq(System.Runtime.InteropServices.InAttribute) parameterInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.CascadingValueSource`1 : object {
    private bool Microsoft.AspNetCore.Components.ICascadingValueSupplier.IsFixed { get; }
    public CascadingValueSource`1(TValue value, bool isFixed);
    public CascadingValueSource`1(string name, TValue value, bool isFixed);
    public CascadingValueSource`1(Func`1<TValue> initialValueFactory, bool isFixed);
    public CascadingValueSource`1(string name, Func`1<TValue> initialValueFactory, bool isFixed);
    public Task NotifyChangedAsync();
    public Task NotifyChangedAsync(TValue newValue);
    private sealed virtual override bool Microsoft.AspNetCore.Components.ICascadingValueSupplier.get_IsFixed();
    private sealed virtual override bool Microsoft.AspNetCore.Components.ICascadingValueSupplier.CanSupplyValue(CascadingParameterInfo& modreq(System.Runtime.InteropServices.InAttribute) parameterInfo);
    private sealed virtual override object Microsoft.AspNetCore.Components.ICascadingValueSupplier.GetCurrentValue(CascadingParameterInfo& modreq(System.Runtime.InteropServices.InAttribute) parameterInfo);
    private sealed virtual override void Microsoft.AspNetCore.Components.ICascadingValueSupplier.Subscribe(ComponentState subscriber, CascadingParameterInfo& modreq(System.Runtime.InteropServices.InAttribute) parameterInfo);
    private sealed virtual override void Microsoft.AspNetCore.Components.ICascadingValueSupplier.Unsubscribe(ComponentState subscriber, CascadingParameterInfo& modreq(System.Runtime.InteropServices.InAttribute) parameterInfo);
}
internal class Microsoft.AspNetCore.Components.ChangeDetection : object {
    [NullableContextAttribute("1")]
public static bool MayHaveChanged(T1 oldValue, T2 newValue);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.ChangeEventArgs : EventArgs {
    public object Value { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers : object {
    public static T TypeCheck(T value);
    public static EventCallback`1<T> CreateInferredEventCallback(object receiver, Action`1<T> callback, T value);
    public static EventCallback`1<T> CreateInferredEventCallback(object receiver, Func`2<T, Task> callback, T value);
    public static EventCallback`1<T> CreateInferredEventCallback(object receiver, EventCallback`1<T> callback, T value);
    public static Func`2<T, Task> CreateInferredBindSetter(Func`2<T, Task> callback, T value);
    public static Func`2<T, Task> CreateInferredBindSetter(Action`1<T> callback, T value);
    public static void InvokeSynchronousDelegate(Action callback);
    public static Task InvokeAsynchronousDelegate(Action callback);
    public static Task InvokeAsynchronousDelegate(Func`1<Task> callback);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.AspNetCore.Components.ComponentBase : object {
    protected virtual void BuildRenderTree(RenderTreeBuilder builder);
    protected virtual void OnInitialized();
    protected virtual Task OnInitializedAsync();
    protected virtual void OnParametersSet();
    protected virtual Task OnParametersSetAsync();
    protected void StateHasChanged();
    protected virtual bool ShouldRender();
    protected virtual void OnAfterRender(bool firstRender);
    protected virtual Task OnAfterRenderAsync(bool firstRender);
    protected Task InvokeAsync(Action workItem);
    protected Task InvokeAsync(Func`1<Task> workItem);
    protected Task DispatchExceptionAsync(Exception exception);
    private sealed virtual override void Microsoft.AspNetCore.Components.IComponent.Attach(RenderHandle renderHandle);
    public virtual Task SetParametersAsync(ParameterView parameters);
    private sealed virtual override Task Microsoft.AspNetCore.Components.IHandleEvent.HandleEventAsync(EventCallbackWorkItem callback, object arg);
    private sealed virtual override Task Microsoft.AspNetCore.Components.IHandleAfterRender.OnAfterRenderAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.ComponentFactory : object {
    public ComponentFactory(IComponentActivator componentActivator, Renderer renderer);
    public static void ClearCache();
    public IComponent InstantiateComponent(IServiceProvider serviceProvider, Type componentType, IComponentRenderMode callerSpecifiedRenderMode, Nullable`1<int> parentComponentId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.DefaultComponentActivator : object {
    public static IComponentActivator Instance { get; }
    [CompilerGeneratedAttribute]
public static IComponentActivator get_Instance();
    public sealed virtual IComponent CreateInstance(Type componentType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.AspNetCore.Components.Dispatcher : object {
    internal SectionRegistry SectionRegistry { get; }
    public static Dispatcher CreateDefault();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void add_UnhandledException(UnhandledExceptionEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void remove_UnhandledException(UnhandledExceptionEventHandler value);
    internal SectionRegistry get_SectionRegistry();
    public void AssertAccess();
    public abstract virtual bool CheckAccess();
    public abstract virtual Task InvokeAsync(Action workItem);
    public abstract virtual Task InvokeAsync(Func`1<Task> workItem);
    public abstract virtual Task`1<TResult> InvokeAsync(Func`1<TResult> workItem);
    public abstract virtual Task`1<TResult> InvokeAsync(Func`1<Task`1<TResult>> workItem);
    protected void OnUnhandledException(UnhandledExceptionEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.DynamicComponent : object {
    [ParameterAttribute]
[DynamicallyAccessedMembersAttribute("-1")]
[EditorRequiredAttribute]
public Type Type { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public IDictionary`2<string, object> Parameters { get; public set; }
    [NullableAttribute("2")]
public object Instance { get; }
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(IDictionary`2<string, object> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Instance();
    public sealed virtual void Attach(RenderHandle renderHandle);
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2072")]
public sealed virtual Task SetParametersAsync(ParameterView parameters);
}
[AttributeUsageAttribute("128")]
public class Microsoft.AspNetCore.Components.EditorRequiredAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.ElementReference : ValueType {
    private static long _nextIdForWebAssemblyOnly;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ElementReferenceContext <Context>k__BackingField;
    public string Id { get; }
    [NullableAttribute("2")]
public ElementReferenceContext Context { get; }
    public ElementReference(string id, ElementReferenceContext context);
    public ElementReference(string id);
    [CompilerGeneratedAttribute]
public string get_Id();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ElementReferenceContext get_Context();
    [NullableContextAttribute("2")]
internal static ElementReference CreateWithUniqueId(ElementReferenceContext context);
}
public abstract class Microsoft.AspNetCore.Components.ElementReferenceContext : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Microsoft.AspNetCore.Components.ErrorBoundaryBase : ComponentBase {
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public RenderFragment`1<Exception> ErrorContent { get; public set; }
    [ParameterAttribute]
public int MaximumErrorCount { get; public set; }
    protected Exception CurrentException { get; }
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<Exception> get_ErrorContent();
    [CompilerGeneratedAttribute]
public void set_ErrorContent(RenderFragment`1<Exception> value);
    [CompilerGeneratedAttribute]
public int get_MaximumErrorCount();
    [CompilerGeneratedAttribute]
public void set_MaximumErrorCount(int value);
    [CompilerGeneratedAttribute]
protected Exception get_CurrentException();
    public void Recover();
    [NullableContextAttribute("1")]
protected abstract virtual Task OnErrorAsync(Exception exception);
    private sealed virtual override void Microsoft.AspNetCore.Components.IErrorBoundary.HandleException(Exception exception);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.EventCallback : ValueType {
    [NullableAttribute("1")]
public static EventCallbackFactory Factory;
    public static EventCallback Empty;
    internal MulticastDelegate Delegate;
    internal IHandleEvent Receiver;
    public bool HasDelegate { get; }
    internal bool RequiresExplicitReceiver { get; }
    public EventCallback(IHandleEvent receiver, MulticastDelegate delegate);
    public sealed virtual bool get_HasDelegate();
    internal bool get_RequiresExplicitReceiver();
    [NullableContextAttribute("1")]
public Task InvokeAsync(object arg);
    [NullableContextAttribute("1")]
public Task InvokeAsync();
    private sealed virtual override object Microsoft.AspNetCore.Components.IEventCallback.UnpackForRenderTree();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.EventCallback`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static EventCallback`1<TValue> Empty;
    internal MulticastDelegate Delegate;
    internal IHandleEvent Receiver;
    public bool HasDelegate { get; }
    internal bool RequiresExplicitReceiver { get; }
    public EventCallback`1(IHandleEvent receiver, MulticastDelegate delegate);
    public sealed virtual bool get_HasDelegate();
    internal bool get_RequiresExplicitReceiver();
    [NullableContextAttribute("1")]
public Task InvokeAsync(TValue arg);
    [NullableContextAttribute("1")]
public Task InvokeAsync();
    internal EventCallback AsUntyped();
    private sealed virtual override object Microsoft.AspNetCore.Components.IEventCallback.UnpackForRenderTree();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.EventCallbackFactory : object {
    [EditorBrowsableAttribute("1")]
public EventCallback Create(object receiver, EventCallback callback);
    public EventCallback Create(object receiver, Action callback);
    public EventCallback Create(object receiver, Action`1<object> callback);
    public EventCallback Create(object receiver, Func`1<Task> callback);
    public EventCallback Create(object receiver, Func`2<object, Task> callback);
    [EditorBrowsableAttribute("1")]
public EventCallback`1<TValue> Create(object receiver, EventCallback callback);
    [EditorBrowsableAttribute("1")]
public EventCallback`1<TValue> Create(object receiver, EventCallback`1<TValue> callback);
    public EventCallback`1<TValue> Create(object receiver, Action callback);
    public EventCallback`1<TValue> Create(object receiver, Action`1<TValue> callback);
    public EventCallback`1<TValue> Create(object receiver, Func`1<Task> callback);
    public EventCallback`1<TValue> Create(object receiver, Func`2<TValue, Task> callback);
    [EditorBrowsableAttribute("1")]
public EventCallback`1<TValue> CreateInferred(object receiver, Action`1<TValue> callback, TValue value);
    [EditorBrowsableAttribute("1")]
public EventCallback`1<TValue> CreateInferred(object receiver, Func`2<TValue, Task> callback, TValue value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions : object {
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<string> setter, string existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<string, Task> setter, string existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<bool> setter, bool existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<bool, Task> setter, bool existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<bool>> setter, Nullable`1<bool> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<Nullable`1<bool>, Task> setter, Nullable`1<bool> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<int> setter, int existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<int, Task> setter, int existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<int>> setter, Nullable`1<int> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<Nullable`1<int>, Task> setter, Nullable`1<int> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<long> setter, long existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<long, Task> setter, long existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<short> setter, short existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<short, Task> setter, short existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<long>> setter, Nullable`1<long> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<Nullable`1<long>, Task> setter, Nullable`1<long> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<short>> setter, Nullable`1<short> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<Nullable`1<short>, Task> setter, Nullable`1<short> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<float> setter, float existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<float, Task> setter, float existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<float>> setter, Nullable`1<float> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<Nullable`1<float>, Task> setter, Nullable`1<float> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<double> setter, double existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<double, Task> setter, double existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<double>> setter, Nullable`1<double> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<Nullable`1<double>, Task> setter, Nullable`1<double> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<decimal> setter, decimal existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<decimal, Task> setter, decimal existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<decimal>> setter, Nullable`1<decimal> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<Nullable`1<decimal>, Task> setter, Nullable`1<decimal> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<DateTime> setter, DateTime existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<DateTime, Task> setter, DateTime existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<DateTime> setter, DateTime existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<DateTime, Task> setter, DateTime existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<DateTime>> setter, Nullable`1<DateTime> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<Nullable`1<DateTime>, Task> setter, Nullable`1<DateTime> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<DateTime>> setter, Nullable`1<DateTime> existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<Nullable`1<DateTime>, Task> setter, Nullable`1<DateTime> existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<DateTimeOffset> setter, DateTimeOffset existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<DateTimeOffset, Task> setter, DateTimeOffset existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<DateTimeOffset> setter, DateTimeOffset existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<DateTimeOffset, Task> setter, DateTimeOffset existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<DateTimeOffset>> setter, Nullable`1<DateTimeOffset> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<Nullable`1<DateTimeOffset>, Task> setter, Nullable`1<DateTimeOffset> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<DateTimeOffset>> setter, Nullable`1<DateTimeOffset> existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<Nullable`1<DateTimeOffset>, Task> setter, Nullable`1<DateTimeOffset> existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<DateOnly> setter, DateOnly existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<DateOnly, Task> setter, DateOnly existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<DateOnly> setter, DateOnly existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<DateOnly, Task> setter, DateOnly existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<DateOnly>> setter, Nullable`1<DateOnly> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<Nullable`1<DateOnly>, Task> setter, Nullable`1<DateOnly> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<DateOnly>> setter, Nullable`1<DateOnly> existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<Nullable`1<DateOnly>, Task> setter, Nullable`1<DateOnly> existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<TimeOnly> setter, TimeOnly existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<TimeOnly, Task> setter, TimeOnly existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<TimeOnly> setter, TimeOnly existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<TimeOnly, Task> setter, TimeOnly existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<TimeOnly>> setter, Nullable`1<TimeOnly> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<Nullable`1<TimeOnly>, Task> setter, Nullable`1<TimeOnly> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<TimeOnly>> setter, Nullable`1<TimeOnly> existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<Nullable`1<TimeOnly>, Task> setter, Nullable`1<TimeOnly> existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<T> setter, T existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Func`2<T, Task> setter, T existingValue, CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Components.EventCallbackFactoryEventArgsExtensions : object {
    [ExtensionAttribute]
public static EventCallback`1<EventArgs> Create(EventCallbackFactory factory, object receiver, Action`1<EventArgs> callback);
    [ExtensionAttribute]
public static EventCallback`1<EventArgs> Create(EventCallbackFactory factory, object receiver, Func`2<EventArgs, Task> callback);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> Create(EventCallbackFactory factory, object receiver, Action`1<ChangeEventArgs> callback);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> Create(EventCallbackFactory factory, object receiver, Func`2<ChangeEventArgs, Task> callback);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.EventCallbackWorkItem : ValueType {
    public static EventCallbackWorkItem Empty;
    private MulticastDelegate _delegate;
    [NullableContextAttribute("2")]
public EventCallbackWorkItem(MulticastDelegate delegate);
    public Task InvokeAsync(object arg);
    internal static Task InvokeAsync(MulticastDelegate delegate, T arg);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Components.EventHandlerAttribute : Attribute {
    public string AttributeName { get; }
    public Type EventArgsType { get; }
    public bool EnableStopPropagation { get; }
    public bool EnablePreventDefault { get; }
    public EventHandlerAttribute(string attributeName, Type eventArgsType);
    public EventHandlerAttribute(string attributeName, Type eventArgsType, bool enableStopPropagation, bool enablePreventDefault);
    [CompilerGeneratedAttribute]
public string get_AttributeName();
    [CompilerGeneratedAttribute]
public Type get_EventArgsType();
    [CompilerGeneratedAttribute]
public bool get_EnableStopPropagation();
    [CompilerGeneratedAttribute]
public bool get_EnablePreventDefault();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.HotReload.HotReloadManager : object {
    [NullableAttribute("1")]
public static HotReloadManager Default;
    public bool MetadataUpdateSupported { get; public set; }
    public bool IsSubscribedTo { get; }
    [CompilerGeneratedAttribute]
public bool get_MetadataUpdateSupported();
    [CompilerGeneratedAttribute]
public void set_MetadataUpdateSupported(bool value);
    public bool get_IsSubscribedTo();
    [CompilerGeneratedAttribute]
public void add_OnDeltaApplied(Action value);
    [CompilerGeneratedAttribute]
public void remove_OnDeltaApplied(Action value);
    public static void UpdateApplication(Type[] _);
}
[NullableContextAttribute("1")]
internal interface Microsoft.AspNetCore.Components.ICascadingValueSupplier {
    public bool IsFixed { get; }
    public abstract virtual bool get_IsFixed();
    public abstract virtual bool CanSupplyValue(CascadingParameterInfo& modreq(System.Runtime.InteropServices.InAttribute) parameterInfo);
    [NullableContextAttribute("2")]
public abstract virtual object GetCurrentValue(CascadingParameterInfo& modreq(System.Runtime.InteropServices.InAttribute) parameterInfo);
    public abstract virtual void Subscribe(ComponentState subscriber, CascadingParameterInfo& modreq(System.Runtime.InteropServices.InAttribute) parameterInfo);
    public abstract virtual void Unsubscribe(ComponentState subscriber, CascadingParameterInfo& modreq(System.Runtime.InteropServices.InAttribute) parameterInfo);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Components.IComponent {
    public abstract virtual void Attach(RenderHandle renderHandle);
    public abstract virtual Task SetParametersAsync(ParameterView parameters);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Components.IComponentActivator {
    public abstract virtual IComponent CreateInstance(Type componentType);
}
public interface Microsoft.AspNetCore.Components.IComponentRenderMode {
}
[NullableContextAttribute("1")]
internal interface Microsoft.AspNetCore.Components.IErrorBoundary {
    public abstract virtual void HandleException(Exception error);
}
[NullableContextAttribute("2")]
internal interface Microsoft.AspNetCore.Components.IEventCallback {
    public bool HasDelegate { get; }
    public abstract virtual bool get_HasDelegate();
    public abstract virtual object UnpackForRenderTree();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Components.IHandleAfterRender {
    public abstract virtual Task OnAfterRenderAsync();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Components.IHandleEvent {
    public abstract virtual Task HandleEventAsync(EventCallbackWorkItem item, object arg);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager : object {
    public PersistentComponentState State { get; }
    public ComponentStatePersistenceManager(ILogger`1<ComponentStatePersistenceManager> logger);
    [CompilerGeneratedAttribute]
public PersistentComponentState get_State();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager/<RestoreStateAsync>d__8")]
public Task RestoreStateAsync(IPersistentComponentStateStore store);
    public Task PersistStateAsync(IPersistentComponentStateStore store, Renderer renderer);
    internal Task PauseAsync(IPersistentComponentStateStore store);
    [CompilerGeneratedAttribute]
internal static Task <PauseAsync>g__ExecuteCallback|11_0(Func`1<Task> callback, ILogger`1<ComponentStatePersistenceManager> logger);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager/<<PauseAsync>g__Awaited|11_1>d")]
[CompilerGeneratedAttribute]
internal static Task <PauseAsync>g__Awaited|11_1(Task task, ILogger`1<ComponentStatePersistenceManager> logger);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("128")]
public class Microsoft.AspNetCore.Components.InjectAttribute : Attribute {
    public object Key { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Key();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Key(object value);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Components.IPersistentComponentStateStore {
    public abstract virtual Task`1<IDictionary`2<string, Byte[]>> GetPersistedStateAsync();
    public abstract virtual Task PersistStateAsync(IReadOnlyDictionary`2<string, Byte[]> state);
    public virtual bool SupportsRenderMode(IComponentRenderMode renderMode);
}
internal static class Microsoft.AspNetCore.Components.JsonSerializerOptionsProvider : object {
    [NullableAttribute("1")]
public static JsonSerializerOptions Options;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Components.LayoutAttribute : Attribute {
    public Type LayoutType { get; }
    public LayoutAttribute(Type layoutType);
    [CompilerGeneratedAttribute]
public Type get_LayoutType();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Microsoft.AspNetCore.Components.LayoutComponentBase : ComponentBase {
    [NullableAttribute("1")]
internal static string BodyPropertyName;
    [ParameterAttribute]
public RenderFragment Body { get; public set; }
    [CompilerGeneratedAttribute]
public RenderFragment get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(RenderFragment value);
    [NullableContextAttribute("1")]
[DynamicDependencyAttribute("-1", "Microsoft.AspNetCore.Components.LayoutComponentBase")]
public virtual Task SetParametersAsync(ParameterView parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.LayoutView : object {
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[DynamicallyAccessedMembersAttribute("-1")]
public Type Layout { get; public set; }
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public Type get_Layout();
    [CompilerGeneratedAttribute]
public void set_Layout(Type value);
    public sealed virtual void Attach(RenderHandle renderHandle);
    public sealed virtual Task SetParametersAsync(ParameterView parameters);
}
public class Microsoft.AspNetCore.Components.LocationChangeException : Exception {
    [NullableContextAttribute("1")]
public LocationChangeException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.MarkupString : ValueType {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public MarkupString(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    public static MarkupString op_Explicit(string value);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.NavigationException : Exception {
    public string Location { get; }
    public NavigationException(string uri);
    [CompilerGeneratedAttribute]
public string get_Location();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.AspNetCore.Components.NavigationManager : object {
    public string BaseUri { get; protected set; }
    public string Uri { get; protected set; }
    [NullableAttribute("2")]
public string HistoryEntryState { get; protected set; }
    public void add_LocationChanged(EventHandler`1<LocationChangedEventArgs> value);
    public void remove_LocationChanged(EventHandler`1<LocationChangedEventArgs> value);
    public string get_BaseUri();
    protected void set_BaseUri(string value);
    public string get_Uri();
    protected void set_Uri(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_HistoryEntryState();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_HistoryEntryState(string value);
    public void NavigateTo(string uri, bool forceLoad);
    public void NavigateTo(string uri, bool forceLoad, bool replace);
    public void NavigateTo(string uri, NavigationOptions options);
    protected virtual void NavigateToCore(string uri, bool forceLoad);
    protected virtual void NavigateToCore(string uri, NavigationOptions options);
    public virtual void Refresh(bool forceReload);
    protected void Initialize(string baseUri, string uri);
    protected virtual void EnsureInitialized();
    public Uri ToAbsoluteUri(string relativeUri);
    public string ToBaseRelativePath(string uri);
    [NullableContextAttribute("0")]
internal ReadOnlySpan`1<char> ToBaseRelativePath(ReadOnlySpan`1<char> uri);
    internal static string NormalizeBaseUri(string baseUri);
    protected void NotifyLocationChanged(bool isInterceptedLink);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.NavigationManager/<NotifyLocationChangingAsync>d__32")]
protected ValueTask`1<bool> NotifyLocationChangingAsync(string uri, string state, bool isNavigationIntercepted);
    protected virtual void HandleLocationChangingHandlerException(Exception ex, LocationChangingContext context);
    protected virtual void SetNavigationLockState(bool value);
    public IDisposable RegisterLocationChangingHandler(Func`2<LocationChangingContext, ValueTask> locationChangingHandler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Components.NavigationManagerExtensions : object {
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, bool value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, Nullable`1<bool> value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, DateTime value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, Nullable`1<DateTime> value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, DateOnly value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, Nullable`1<DateOnly> value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, TimeOnly value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, Nullable`1<TimeOnly> value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, decimal value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, Nullable`1<decimal> value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, double value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, Nullable`1<double> value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, float value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, Nullable`1<float> value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, Guid value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, Nullable`1<Guid> value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, int value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, Nullable`1<int> value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, long value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, Nullable`1<long> value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, string value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameters(NavigationManager navigationManager, IReadOnlyDictionary`2<string, object> parameters);
    [ExtensionAttribute]
public static string GetUriWithQueryParameters(NavigationManager navigationManager, string uri, IReadOnlyDictionary`2<string, object> parameters);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.NavigationOptions : ValueType {
    [CompilerGeneratedAttribute]
private bool <ForceLoad>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReplaceHistoryEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HistoryEntryState>k__BackingField;
    public bool ForceLoad { get; public set; }
    public bool ReplaceHistoryEntry { get; public set; }
    public string HistoryEntryState { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ForceLoad();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ForceLoad(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReplaceHistoryEntry();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ReplaceHistoryEntry(bool value);
    [CompilerGeneratedAttribute]
public string get_HistoryEntryState();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HistoryEntryState(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.AspNetCore.Components.OwningComponentBase : ComponentBase {
    protected bool IsDisposed { get; }
    protected IServiceProvider ScopedServices { get; }
    [CompilerGeneratedAttribute]
protected bool get_IsDisposed();
    protected IServiceProvider get_ScopedServices();
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.AspNetCore.Components.OwningComponentBase`1 : OwningComponentBase {
    protected TService Service { get; }
    protected TService get_Service();
}
[AttributeUsageAttribute("128")]
public class Microsoft.AspNetCore.Components.ParameterAttribute : Attribute {
    public bool CaptureUnmatchedValues { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CaptureUnmatchedValues();
    [CompilerGeneratedAttribute]
public void set_CaptureUnmatchedValues(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.ParameterValue : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cascading>k__BackingField;
    public string Name { get; }
    public object Value { get; }
    public bool Cascading { get; }
    internal ParameterValue(string name, object value, bool cascading);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public bool get_Cascading();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.ParameterView : ValueType {
    private static RenderTreeFrame[] _emptyFrames;
    private static ParameterView _empty;
    private ParameterViewLifetime _lifetime;
    private RenderTreeFrame[] _frames;
    private int _ownerIndex;
    private IReadOnlyList`1<CascadingParameterState> _cascadingParameters;
    public static ParameterView Empty { get; }
    internal ParameterViewLifetime Lifetime { get; }
    internal ParameterView(ParameterViewLifetime& lifetime, RenderTreeFrame[] frames, int ownerIndex);
    public static ParameterView get_Empty();
    internal ParameterViewLifetime get_Lifetime();
    public Enumerator GetEnumerator();
    public bool TryGetValue(string parameterName, TValue& result);
    [NullableContextAttribute("2")]
public TValue GetValueOrDefault(string parameterName);
    public TValue GetValueOrDefault(string parameterName, TValue defaultValue);
    public IReadOnlyDictionary`2<string, object> ToDictionary();
    internal ParameterView Clone();
    internal ParameterView WithCascadingParameters(IReadOnlyList`1<CascadingParameterState> cascadingParameters);
    internal bool HasDirectParameter(string parameterName);
    internal bool DefinitelyEquals(ParameterView oldParameters);
    internal bool HasRemovedDirectParameters(ParameterView& oldParameters);
    internal void CaptureSnapshot(ArrayBuilder`1<RenderTreeFrame> builder);
    public static ParameterView FromDictionary(IDictionary`2<string, object> parameters);
    public void SetParameterProperties(object target);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static Span`1<RenderTreeFrame> <HasRemovedDirectParameters>g__GetDirectParameterFrames|21_0(ParameterView& parameterView);
}
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.Components.ParameterViewBuilder : ValueType {
    private static string GeneratedParameterViewElementName;
    private RenderTreeFrame[] _frames;
    public ParameterViewBuilder(int maxCapacity);
    [NullableContextAttribute("1")]
public void Add(string name, object value);
    public ParameterView ToParameterView();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.Components.PersistComponentStateRegistration : ValueType {
    [CompilerGeneratedAttribute]
private Func`1<Task> <Callback>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentRenderMode <RenderMode>k__BackingField;
    public Func`1<Task> Callback { get; }
    [NullableAttribute("2")]
public IComponentRenderMode RenderMode { get; }
    public PersistComponentStateRegistration(Func`1<Task> callback, IComponentRenderMode renderMode);
    [CompilerGeneratedAttribute]
public Func`1<Task> get_Callback();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IComponentRenderMode get_RenderMode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.PersistentComponentState : object {
    internal bool PersistingState { get; internal set; }
    internal PersistentComponentState(IDictionary`2<string, Byte[]> currentState, List`1<PersistComponentStateRegistration> pauseCallbacks);
    [CompilerGeneratedAttribute]
internal bool get_PersistingState();
    [CompilerGeneratedAttribute]
internal void set_PersistingState(bool value);
    internal void InitializeExistingState(IDictionary`2<string, Byte[]> existingState);
    public PersistingComponentStateSubscription RegisterOnPersisting(Func`1<Task> callback);
    public PersistingComponentStateSubscription RegisterOnPersisting(Func`1<Task> callback, IComponentRenderMode renderMode);
    [RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed.")]
public void PersistAsJson(string key, TValue instance);
    [NullableContextAttribute("2")]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed.")]
public bool TryTakeFromJson(string key, TValue& instance);
}
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.PersistingComponentStateSubscription : ValueType {
    private List`1<PersistComponentStateRegistration> _callbacks;
    private Nullable`1<PersistComponentStateRegistration> _callback;
    [NullableContextAttribute("1")]
internal PersistingComponentStateSubscription(List`1<PersistComponentStateRegistration> callbacks, PersistComponentStateRegistration callback);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Components.Reflection.ComponentProperties : object {
    internal static BindingFlags BindablePropertyFlags;
    public static void ClearCache();
    public static void SetProperties(ParameterView& parameters, object target);
    internal static IEnumerable`1<PropertyInfo> GetCandidateBindableProperties(Type targetType);
    [CompilerGeneratedAttribute]
internal static void <SetProperties>g__SetProperty|3_0(object target, PropertySetter writer, string parameterName, object value);
}
internal class Microsoft.AspNetCore.Components.Reflection.MemberAssignment : object {
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Microsoft.AspNetCore.Components.Reflection.MemberAssignment/<GetPropertiesIncludingInherited>d__0")]
public static IEnumerable`1<PropertyInfo> GetPropertiesIncludingInherited(Type type, BindingFlags bindingFlags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.Reflection.PropertySetter : object {
    public bool AcceptsDirectParameters { get; public set; }
    public bool AcceptsCascadingParameters { get; public set; }
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2060:MakeGenericMethod")]
public PropertySetter(Type targetType, PropertyInfo property);
    [CompilerGeneratedAttribute]
public bool get_AcceptsDirectParameters();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AcceptsDirectParameters(bool value);
    [CompilerGeneratedAttribute]
public bool get_AcceptsCascadingParameters();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AcceptsCascadingParameters(bool value);
    public void SetValue(object target, object value);
}
public class Microsoft.AspNetCore.Components.RenderFragment : MulticastDelegate {
    public RenderFragment(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(RenderTreeBuilder builder);
    public virtual IAsyncResult BeginInvoke(RenderTreeBuilder builder, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.AspNetCore.Components.RenderFragment`1 : MulticastDelegate {
    public RenderFragment`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual RenderFragment Invoke(TValue value);
    public virtual IAsyncResult BeginInvoke(TValue value, AsyncCallback callback, object object);
    public virtual RenderFragment EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.RenderHandle : ValueType {
    private Renderer _renderer;
    private int _componentId;
    public Dispatcher Dispatcher { get; }
    public bool IsInitialized { get; }
    public bool IsRenderingOnMetadataUpdate { get; }
    internal bool IsRendererDisposed { get; }
    internal RenderHandle(Renderer renderer, int componentId);
    public Dispatcher get_Dispatcher();
    public bool get_IsInitialized();
    public bool get_IsRenderingOnMetadataUpdate();
    internal bool get_IsRendererDisposed();
    public void Render(RenderFragment renderFragment);
    public Task DispatchExceptionAsync(Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{GetDebuggerDisplay(),nq}")]
public class Microsoft.AspNetCore.Components.Rendering.ComponentState : object {
    public int ComponentId { get; }
    public IComponent Component { get; }
    [NullableAttribute("2")]
public ComponentState ParentComponentState { get; }
    [NullableAttribute("2")]
public ComponentState LogicalParentComponentState { get; }
    internal RenderTreeBuilder CurrentRenderTree { get; internal set; }
    internal Renderer Renderer { get; }
    public ComponentState(Renderer renderer, int componentId, IComponent component, ComponentState parentComponentState);
    [CompilerGeneratedAttribute]
public int get_ComponentId();
    [CompilerGeneratedAttribute]
public IComponent get_Component();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ComponentState get_ParentComponentState();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ComponentState get_LogicalParentComponentState();
    [CompilerGeneratedAttribute]
internal RenderTreeBuilder get_CurrentRenderTree();
    [CompilerGeneratedAttribute]
internal void set_CurrentRenderTree(RenderTreeBuilder value);
    internal Renderer get_Renderer();
    internal void RenderIntoBatch(RenderBatchBuilder batchBuilder, RenderFragment renderFragment, Exception& renderFragmentException);
    internal Task NotifyRenderCompletedAsync();
    internal void SetDirectParameters(ParameterView parameters);
    internal void NotifyCascadingValueChanged(ParameterViewLifetime& lifetime);
    public virtual ValueTask DisposeAsync();
    internal ValueTask DisposeInBatchAsync(RenderBatchBuilder batchBuilder);
}
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.Components.Rendering.KeyedItemInfo : ValueType {
    public int OldIndex;
    public int NewIndex;
    public int OldSiblingIndex;
    public int NewSiblingIndex;
    public KeyedItemInfo(int oldIndex, int newIndex);
    public KeyedItemInfo WithOldSiblingIndex(int oldSiblingIndex);
    public KeyedItemInfo WithNewSiblingIndex(int newSiblingIndex);
}
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.Components.Rendering.ParameterViewLifetime : ValueType {
    private RenderBatchBuilder _owner;
    private int _stamp;
    public static ParameterViewLifetime Unbound;
    [NullableContextAttribute("1")]
public ParameterViewLifetime(RenderBatchBuilder owner);
    public void AssertNotExpired();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.Rendering.RenderBatchBuilder : object {
    [NullableAttribute("2")]
public ArrayBuilder`1<NamedEventChange> NamedEventChanges;
    public ArrayBuilder`1<RenderTreeDiff> UpdatedComponentDiffs { get; }
    public ArrayBuilder`1<int> DisposedComponentIds { get; }
    public ArrayBuilder`1<ulong> DisposedEventHandlerIds { get; }
    public ArrayBuilder`1<RenderTreeEdit> EditsBuffer { get; }
    public ArrayBuilder`1<RenderTreeFrame> ReferenceFramesBuffer { get; }
    public Queue`1<RenderQueueEntry> ComponentRenderQueue { get; }
    public Queue`1<int> ComponentDisposalQueue { get; }
    public Dictionary`2<string, int> AttributeDiffSet { get; }
    public int ParameterViewValidityStamp { get; }
    internal StackObjectPool`1<Dictionary`2<object, KeyedItemInfo>> KeyedItemInfoDictionaryPool { get; }
    [CompilerGeneratedAttribute]
public ArrayBuilder`1<RenderTreeDiff> get_UpdatedComponentDiffs();
    [CompilerGeneratedAttribute]
public ArrayBuilder`1<int> get_DisposedComponentIds();
    [CompilerGeneratedAttribute]
public ArrayBuilder`1<ulong> get_DisposedEventHandlerIds();
    [CompilerGeneratedAttribute]
public ArrayBuilder`1<RenderTreeEdit> get_EditsBuffer();
    [CompilerGeneratedAttribute]
public ArrayBuilder`1<RenderTreeFrame> get_ReferenceFramesBuffer();
    [CompilerGeneratedAttribute]
public Queue`1<RenderQueueEntry> get_ComponentRenderQueue();
    [CompilerGeneratedAttribute]
public Queue`1<int> get_ComponentDisposalQueue();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, int> get_AttributeDiffSet();
    public int get_ParameterViewValidityStamp();
    [CompilerGeneratedAttribute]
internal StackObjectPool`1<Dictionary`2<object, KeyedItemInfo>> get_KeyedItemInfoDictionaryPool();
    public void ClearStateForCurrentBatch();
    public RenderBatch ToBatch();
    public void InvalidateParameterViews();
    public void AddNamedEvent(int componentId, int frameIndex, RenderTreeFrame& frame);
    public void RemoveNamedEvent(int componentId, int frameIndex, RenderTreeFrame& frame);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{_state,nq}")]
internal class Microsoft.AspNetCore.Components.Rendering.RendererSynchronizationContext : SynchronizationContext {
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_UnhandledException(UnhandledExceptionEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_UnhandledException(UnhandledExceptionEventHandler value);
    public virtual SynchronizationContext CreateCopy();
    public Task InvokeAsync(Action action);
    public Task`1<TResult> InvokeAsync(Func`1<TResult> function);
    public Task InvokeAsync(Func`1<Task> asyncAction);
    public Task`1<TResult> InvokeAsync(Func`1<Task`1<TResult>> asyncFunction);
    public virtual void Post(SendOrPostCallback d, object state);
    public virtual void Send(SendOrPostCallback d, object state);
    [CompilerGeneratedAttribute]
internal static void <InvokeAsync>g__Execute|8_0(ValueTuple`3<AsyncTaskMethodBuilder, Action, RendererSynchronizationContext> state);
    [CompilerGeneratedAttribute]
internal static void <InvokeAsync>g__Execute|9_0(ValueTuple`3<AsyncTaskMethodBuilder`1<TResult>, Func`1<TResult>, RendererSynchronizationContext> state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.Rendering.RendererSynchronizationContextDispatcher : Dispatcher {
    public virtual bool CheckAccess();
    public virtual Task InvokeAsync(Action workItem);
    public virtual Task InvokeAsync(Func`1<Task> workItem);
    public virtual Task`1<TResult> InvokeAsync(Func`1<TResult> workItem);
    public virtual Task`1<TResult> InvokeAsync(Func`1<Task`1<TResult>> workItem);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{GetDebuggerDisplay(),nq}")]
internal class Microsoft.AspNetCore.Components.Rendering.RenderQueueEntry : ValueType {
    public ComponentState ComponentState;
    public RenderFragment RenderFragment;
    public RenderQueueEntry(ComponentState componentState, RenderFragment renderFragment);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder : object {
    public void OpenElement(int sequence, string elementName);
    public void CloseElement();
    [NullableContextAttribute("2")]
public void AddMarkupContent(int sequence, string markupContent);
    [NullableContextAttribute("2")]
public void AddContent(int sequence, string textContent);
    [NullableContextAttribute("2")]
public void AddContent(int sequence, RenderFragment fragment);
    public void AddContent(int sequence, RenderFragment`1<TValue> fragment, TValue value);
    public void AddContent(int sequence, Nullable`1<MarkupString> markupContent);
    public void AddContent(int sequence, MarkupString markupContent);
    [NullableContextAttribute("2")]
public void AddContent(int sequence, object textContent);
    public void AddAttribute(int sequence, string name);
    public void AddAttribute(int sequence, string name, bool value);
    public void AddAttribute(int sequence, string name, string value);
    public void AddAttribute(int sequence, string name, MulticastDelegate value);
    public void AddAttribute(int sequence, string name, EventCallback value);
    public void AddAttribute(int sequence, string name, EventCallback`1<TArgument> value);
    public void AddAttribute(int sequence, string name, object value);
    public void AddAttribute(int sequence, RenderTreeFrame frame);
    public void AddMultipleAttributes(int sequence, IEnumerable`1<KeyValuePair`2<string, object>> attributes);
    public void SetUpdatesAttributeName(string updatesAttributeName);
    public void OpenComponent(int sequence);
    public void OpenComponent(int sequence, Type componentType);
    public void AddComponentParameter(int sequence, string name, object value);
    [NullableContextAttribute("2")]
public void SetKey(object value);
    public void CloseComponent();
    public void AddElementReferenceCapture(int sequence, Action`1<ElementReference> elementReferenceCaptureAction);
    public void AddComponentReferenceCapture(int sequence, Action`1<object> componentReferenceCaptureAction);
    [NullableContextAttribute("2")]
public void AddComponentRenderMode(IComponentRenderMode renderMode);
    public void AddNamedEvent(string eventType, string assignedName);
    public void OpenRegion(int sequence);
    public void CloseRegion();
    public void Clear();
    internal bool InsertAttributeExpensive(int insertAtIndex, int sequence, string attributeName, object attributeValue);
    [NullableContextAttribute("0")]
public ArrayRange`1<RenderTreeFrame> GetFrames();
    internal void AssertTreeIsValid(IComponent component);
    internal void ProcessDuplicateAttributes(int first);
    internal void TrackAttributeName(string name);
    public sealed virtual void Dispose();
}
internal class Microsoft.AspNetCore.Components.Rendering.RenderTreeUpdater : object {
    [NullableContextAttribute("1")]
public static void UpdateToMatchClientState(RenderTreeBuilder renderTreeBuilder, ulong eventHandlerId, object newFieldValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.Rendering.SimplifiedStringHashComparer : object {
    public static SimplifiedStringHashComparer Instance;
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(string x, string y);
    public sealed virtual int GetHashCode(string key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public abstract class Microsoft.AspNetCore.Components.RenderModeAttribute : Attribute {
    public IComponentRenderMode Mode { get; }
    public abstract virtual IComponentRenderMode get_Mode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1 : object {
    protected T[] _items;
    protected int _itemsInUse;
    public int Count { get; }
    public T[] Buffer { get; }
    public ArrayBuilder`1(int minCapacity, ArrayPool`1<T> arrayPool);
    public int get_Count();
    public T[] get_Buffer();
    public int Append(T& item);
    internal int Append(T[] source, int startIndex, int length);
    internal int Append(ReadOnlySpan`1<T> source);
    public void Overwrite(int index, T& value);
    public void RemoveLast();
    public void InsertExpensive(int index, T value);
    public void Clear();
    protected void GrowBuffer(int desiredCapacity);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Components.RenderTree.ArrayBuilderExtensions : object {
    [ExtensionAttribute]
public static ArrayRange`1<T> ToRange(ArrayBuilder`1<T> builder);
    [ExtensionAttribute]
public static ArrayBuilderSegment`1<T> ToSegment(ArrayBuilder`1<T> builder, int fromIndexInclusive, int toIndexExclusive);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Components.RenderTree.ArrayBuilderSegment`1 : ValueType {
    private ArrayBuilder`1<T> _builder;
    private int _offset;
    private int _count;
    public T[] Array { get; }
    public int Offset { get; }
    public int Count { get; }
    public T Item { get; }
    internal ArrayBuilderSegment`1(ArrayBuilder`1<T> builder, int offset, int count);
    public T[] get_Array();
    public int get_Offset();
    public int get_Count();
    public T get_Item(int index);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1 : ValueType {
    public T[] Array;
    public int Count;
    public ArrayRange`1(T[] array, int count);
    public ArrayRange`1<T> Clone();
}
[FlagsAttribute]
public enum Microsoft.AspNetCore.Components.RenderTree.ComponentFrameFlags : Enum {
    public byte value__;
    public static ComponentFrameFlags HasCallerSpecifiedRenderMode;
}
internal static class Microsoft.AspNetCore.Components.RenderTree.EventArgsTypeCache : object {
    [NullableContextAttribute("1")]
public static Type GetEventArgsType(MethodInfo methodInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo : object {
    public int ComponentId { get; public set; }
    public object FieldValue { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ComponentId();
    [CompilerGeneratedAttribute]
public void set_ComponentId(int value);
    [CompilerGeneratedAttribute]
public object get_FieldValue();
    [CompilerGeneratedAttribute]
public void set_FieldValue(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.RenderTree.NamedEventChange : ValueType {
    [CompilerGeneratedAttribute]
private NamedEventChangeType <ChangeType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ComponentId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FrameIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssignedName>k__BackingField;
    public NamedEventChangeType ChangeType { get; }
    public int ComponentId { get; }
    public int FrameIndex { get; }
    public string EventType { get; }
    public string AssignedName { get; }
    public NamedEventChange(NamedEventChangeType changeType, int componentId, int frameIndex, string eventType, string assignedName);
    [CompilerGeneratedAttribute]
public NamedEventChangeType get_ChangeType();
    [CompilerGeneratedAttribute]
public int get_ComponentId();
    [CompilerGeneratedAttribute]
public int get_FrameIndex();
    [CompilerGeneratedAttribute]
public string get_EventType();
    [CompilerGeneratedAttribute]
public string get_AssignedName();
}
public enum Microsoft.AspNetCore.Components.RenderTree.NamedEventChangeType : Enum {
    public int value__;
    public static NamedEventChangeType Added;
    public static NamedEventChangeType Removed;
}
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.RenderTree.RenderBatch : ValueType {
    [CompilerGeneratedAttribute]
private ArrayRange`1<RenderTreeDiff> <UpdatedComponents>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrayRange`1<RenderTreeFrame> <ReferenceFrames>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrayRange`1<int> <DisposedComponentIDs>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrayRange`1<ulong> <DisposedEventHandlerIDs>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ArrayRange`1<NamedEventChange>> <NamedEventChanges>k__BackingField;
    public ArrayRange`1<RenderTreeDiff> UpdatedComponents { get; }
    public ArrayRange`1<RenderTreeFrame> ReferenceFrames { get; }
    public ArrayRange`1<int> DisposedComponentIDs { get; }
    public ArrayRange`1<ulong> DisposedEventHandlerIDs { get; }
    public Nullable`1<ArrayRange`1<NamedEventChange>> NamedEventChanges { get; }
    internal RenderBatch(ArrayRange`1<RenderTreeDiff> updatedComponents, ArrayRange`1<RenderTreeFrame> referenceFrames, ArrayRange`1<int> disposedComponentIDs, ArrayRange`1<ulong> disposedEventHandlerIDs, Nullable`1<ArrayRange`1<NamedEventChange>> changedNamedEvents);
    [CompilerGeneratedAttribute]
public ArrayRange`1<RenderTreeDiff> get_UpdatedComponents();
    [CompilerGeneratedAttribute]
public ArrayRange`1<RenderTreeFrame> get_ReferenceFrames();
    [CompilerGeneratedAttribute]
public ArrayRange`1<int> get_DisposedComponentIDs();
    [CompilerGeneratedAttribute]
public ArrayRange`1<ulong> get_DisposedEventHandlerIDs();
    [CompilerGeneratedAttribute]
public Nullable`1<ArrayRange`1<NamedEventChange>> get_NamedEventChanges();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.AspNetCore.Components.RenderTree.Renderer : object {
    internal ICascadingValueSupplier[] ServiceProviderCascadingValueSuppliers { get; }
    internal HotReloadManager HotReloadManager { get; internal set; }
    public Dispatcher Dispatcher { get; }
    [NullableAttribute("2")]
protected internal ElementReferenceContext ElementReferenceContext { get; protected set; }
    internal bool IsRenderingOnMetadataUpdate { get; }
    internal bool Disposed { get; }
    public Renderer(IServiceProvider serviceProvider, ILoggerFactory loggerFactory);
    public Renderer(IServiceProvider serviceProvider, ILoggerFactory loggerFactory, IComponentActivator componentActivator);
    public void add_UnhandledSynchronizationException(UnhandledExceptionEventHandler value);
    public void remove_UnhandledSynchronizationException(UnhandledExceptionEventHandler value);
    [CompilerGeneratedAttribute]
internal ICascadingValueSupplier[] get_ServiceProviderCascadingValueSuppliers();
    [CompilerGeneratedAttribute]
internal HotReloadManager get_HotReloadManager();
    [CompilerGeneratedAttribute]
internal void set_HotReloadManager(HotReloadManager value);
    public abstract virtual Dispatcher get_Dispatcher();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected internal ElementReferenceContext get_ElementReferenceContext();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_ElementReferenceContext(ElementReferenceContext value);
    [CompilerGeneratedAttribute]
internal bool get_IsRenderingOnMetadataUpdate();
    internal bool get_Disposed();
    protected ComponentState GetComponentState(int componentId);
    protected internal virtual IComponentRenderMode GetComponentRenderMode(IComponent component);
    protected internal ComponentState GetComponentState(IComponent component);
    protected IComponent InstantiateComponent(Type componentType);
    protected internal int AssignRootComponentId(IComponent component);
    [NullableContextAttribute("0")]
protected ArrayRange`1<RenderTreeFrame> GetCurrentRenderTreeFrames(int componentId);
    protected Task RenderRootComponentAsync(int componentId);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.RenderTree.Renderer/<RenderRootComponentAsync>d__50")]
protected internal Task RenderRootComponentAsync(int componentId, ParameterView initialParameters);
    protected internal void RemoveRootComponent(int componentId);
    internal Type GetRootComponentType(int componentId);
    protected abstract virtual void HandleException(Exception exception);
    protected virtual ComponentState CreateComponentState(int componentId, IComponent component, ComponentState parentComponentState);
    protected abstract virtual Task UpdateDisplayAsync(RenderBatch& modreq(System.Runtime.InteropServices.InAttribute) renderBatch);
    public virtual Task DispatchEventAsync(ulong eventHandlerId, EventFieldInfo fieldInfo, EventArgs eventArgs);
    public virtual Task DispatchEventAsync(ulong eventHandlerId, EventFieldInfo fieldInfo, EventArgs eventArgs, bool waitForQuiescence);
    public Type GetEventArgsType(ulong eventHandlerId);
    internal ComponentState InstantiateChildComponentOnFrame(RenderTreeFrame[] frames, int frameIndex, int parentComponentId);
    internal void AddToPendingTasksWithErrorHandling(Task task, ComponentState owningComponentState);
    protected virtual void AddPendingTask(ComponentState componentState, Task task);
    internal void AssignEventHandlerId(int renderedByComponentId, RenderTreeFrame& frame);
    internal void AddToRenderQueue(int componentId, RenderFragment renderFragment);
    internal void TrackReplacedEventHandlerId(ulong oldEventHandlerId, ulong newEventHandlerId);
    protected virtual void ProcessPendingRender();
    internal void HandleComponentException(Exception exception, int componentId);
    protected virtual void Dispose(bool disposing);
    protected internal virtual IComponent ResolveComponentForRenderMode(Type componentType, Nullable`1<int> parentComponentId, IComponentActivator componentActivator, IComponentRenderMode renderMode);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.RenderTree.Renderer/<DisposeAsync>d__88")]
public sealed virtual ValueTask DisposeAsync();
}
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiff : ValueType {
    public int ComponentId;
    public ArrayBuilderSegment`1<RenderTreeEdit> Edits;
    internal RenderTreeDiff(int componentId, ArrayBuilderSegment`1<RenderTreeEdit> entries);
}
internal static class Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiffBuilder : object {
    public static int SystemAddedAttributeSequenceNumber;
    public static RenderTreeDiff ComputeDiff(Renderer renderer, RenderBatchBuilder batchBuilder, int componentId, ArrayRange`1<RenderTreeFrame> oldTree, ArrayRange`1<RenderTreeFrame> newTree);
    public static void DisposeFrames(RenderBatchBuilder batchBuilder, int componentId, ArrayRange`1<RenderTreeFrame> frames);
}
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.RenderTree.RenderTreeEdit : ValueType {
    public RenderTreeEditType Type;
    public int SiblingIndex;
    public int ReferenceFrameIndex;
    public int MoveToSiblingIndex;
    [NullableAttribute("2")]
public string RemovedAttributeName;
    internal static RenderTreeEdit RemoveFrame(int siblingIndex);
    internal static RenderTreeEdit PrependFrame(int siblingIndex, int referenceFrameIndex);
    internal static RenderTreeEdit UpdateText(int siblingIndex, int referenceFrameIndex);
    internal static RenderTreeEdit UpdateMarkup(int siblingIndex, int referenceFrameIndex);
    internal static RenderTreeEdit SetAttribute(int siblingIndex, int referenceFrameIndex);
    [NullableContextAttribute("1")]
internal static RenderTreeEdit RemoveAttribute(int siblingIndex, string name);
    internal static RenderTreeEdit StepIn(int siblingIndex);
    internal static RenderTreeEdit StepOut();
    internal static RenderTreeEdit PermutationListEntry(int fromSiblingIndex, int toSiblingIndex);
    internal static RenderTreeEdit PermutationListEnd();
}
public enum Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType : Enum {
    public int value__;
    public static RenderTreeEditType PrependFrame;
    public static RenderTreeEditType RemoveFrame;
    public static RenderTreeEditType SetAttribute;
    public static RenderTreeEditType RemoveAttribute;
    public static RenderTreeEditType UpdateText;
    public static RenderTreeEditType StepIn;
    public static RenderTreeEditType StepOut;
    public static RenderTreeEditType UpdateMarkup;
    public static RenderTreeEditType PermutationListEntry;
    public static RenderTreeEditType PermutationListEnd;
}
public class Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame : ValueType {
    internal int SequenceField;
    internal RenderTreeFrameType FrameTypeField;
    internal int ElementSubtreeLengthField;
    internal string ElementNameField;
    internal object ElementKeyField;
    internal string TextContentField;
    internal ulong AttributeEventHandlerIdField;
    internal string AttributeNameField;
    internal object AttributeValueField;
    internal string AttributeEventUpdatesAttributeNameField;
    internal ComponentFrameFlags ComponentFrameFlagsField;
    internal int ComponentSubtreeLengthField;
    internal int ComponentIdField;
    [DynamicallyAccessedMembersAttribute("-1")]
internal Type ComponentTypeField;
    internal ComponentState ComponentStateField;
    internal object ComponentKeyField;
    internal int RegionSubtreeLengthField;
    internal string ElementReferenceCaptureIdField;
    internal Action`1<ElementReference> ElementReferenceCaptureActionField;
    internal int ComponentReferenceCaptureParentFrameIndexField;
    internal Action`1<object> ComponentReferenceCaptureActionField;
    internal string MarkupContentField;
    internal IComponentRenderMode ComponentRenderModeField;
    internal string NamedEventTypeField;
    internal string NamedEventAssignedNameField;
    public int Sequence { get; }
    public RenderTreeFrameType FrameType { get; }
    public int ElementSubtreeLength { get; }
    public string ElementName { get; }
    public object ElementKey { get; }
    public string TextContent { get; }
    public ulong AttributeEventHandlerId { get; }
    public string AttributeName { get; }
    public object AttributeValue { get; }
    public string AttributeEventUpdatesAttributeName { get; }
    public ComponentFrameFlags ComponentFrameFlags { get; }
    public int ComponentSubtreeLength { get; }
    public int ComponentId { get; }
    public Type ComponentType { get; }
    internal ComponentState ComponentState { get; }
    public object ComponentKey { get; }
    public IComponent Component { get; }
    public int RegionSubtreeLength { get; }
    public string ElementReferenceCaptureId { get; }
    public Action`1<ElementReference> ElementReferenceCaptureAction { get; }
    public int ComponentReferenceCaptureParentFrameIndex { get; }
    public Action`1<object> ComponentReferenceCaptureAction { get; }
    public string MarkupContent { get; }
    public IComponentRenderMode ComponentRenderMode { get; }
    public string NamedEventType { get; }
    public string NamedEventAssignedName { get; }
    public int get_Sequence();
    public RenderTreeFrameType get_FrameType();
    public int get_ElementSubtreeLength();
    public string get_ElementName();
    public object get_ElementKey();
    public string get_TextContent();
    public ulong get_AttributeEventHandlerId();
    public string get_AttributeName();
    public object get_AttributeValue();
    public string get_AttributeEventUpdatesAttributeName();
    public ComponentFrameFlags get_ComponentFrameFlags();
    public int get_ComponentSubtreeLength();
    public int get_ComponentId();
    public Type get_ComponentType();
    internal ComponentState get_ComponentState();
    public object get_ComponentKey();
    public IComponent get_Component();
    public int get_RegionSubtreeLength();
    public string get_ElementReferenceCaptureId();
    public Action`1<ElementReference> get_ElementReferenceCaptureAction();
    public int get_ComponentReferenceCaptureParentFrameIndex();
    public Action`1<object> get_ComponentReferenceCaptureAction();
    public string get_MarkupContent();
    public IComponentRenderMode get_ComponentRenderMode();
    public string get_NamedEventType();
    public string get_NamedEventAssignedName();
    internal static RenderTreeFrame Element(int sequence, string elementName);
    internal static RenderTreeFrame Text(int sequence, string textContent);
    internal static RenderTreeFrame Markup(int sequence, string markupContent);
    internal static RenderTreeFrame Attribute(int sequence, string name, object value);
    internal static RenderTreeFrame ChildComponent(int sequence, Type componentType);
    internal static RenderTreeFrame PlaceholderChildComponentWithSubtreeLength(int subtreeLength);
    internal static RenderTreeFrame Region(int sequence);
    internal static RenderTreeFrame ElementReferenceCapture(int sequence, Action`1<ElementReference> elementReferenceCaptureAction);
    internal static RenderTreeFrame ComponentReferenceCapture(int sequence, Action`1<object> componentReferenceCaptureAction, int parentFrameIndex);
    internal static RenderTreeFrame NamedEvent(int sequence, string eventType, string assignedName);
    internal static RenderTreeFrame ComponentRenderModeFrame(int sequence, IComponentRenderMode renderMode);
    internal RenderTreeFrame WithElementSubtreeLength(int elementSubtreeLength);
    internal RenderTreeFrame WithComponentSubtreeLength(int componentSubtreeLength);
    internal RenderTreeFrame WithAttributeSequence(int sequence);
    internal RenderTreeFrame WithComponent(ComponentState componentState);
    internal RenderTreeFrame WithAttributeEventHandlerId(ulong eventHandlerId);
    internal RenderTreeFrame WithAttributeValue(object attributeValue);
    internal RenderTreeFrame WithAttributeEventUpdatesAttributeName(string attributeUpdatesAttributeName);
    internal RenderTreeFrame WithRegionSubtreeLength(int regionSubtreeLength);
    internal RenderTreeFrame WithElementReferenceCaptureId(string elementReferenceCaptureId);
    internal RenderTreeFrame WithElementKey(object elementKey);
    internal RenderTreeFrame WithComponentKey(object componentKey);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameArrayBuilder : ArrayBuilder`1<RenderTreeFrame> {
    public void AppendElement(int sequence, string elementName);
    public void AppendText(int sequence, string textContent);
    public void AppendMarkup(int sequence, string markupContent);
    public void AppendAttribute(int sequence, string attributeName, object attributeValue);
    public void AppendComponent(int sequence, Type componentType);
    public void AppendElementReferenceCapture(int sequence, Action`1<ElementReference> elementReferenceCaptureAction);
    public void AppendComponentReferenceCapture(int sequence, Action`1<object> componentReferenceCaptureAction, int parentFrameIndexValue);
    public void AppendRegion(int sequence);
    public void AppendComponentRenderMode(IComponentRenderMode renderMode);
    public void AppendNamedEvent(string eventType, string assignedName);
}
public enum Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType : Enum {
    public short value__;
    public static RenderTreeFrameType None;
    public static RenderTreeFrameType Element;
    public static RenderTreeFrameType Text;
    public static RenderTreeFrameType Attribute;
    public static RenderTreeFrameType Component;
    public static RenderTreeFrameType Region;
    public static RenderTreeFrameType ElementReferenceCapture;
    public static RenderTreeFrameType ComponentReferenceCapture;
    public static RenderTreeFrameType Markup;
    public static RenderTreeFrameType ComponentRenderMode;
    public static RenderTreeFrameType NamedEvent;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.RenderTree.StackObjectPool`1 : object {
    public StackObjectPool`1(int maxPreservedItems, Func`1<T> instanceFactory);
    public T Get();
    public void Return(T instance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Components.RouteAttribute : Attribute {
    public string Template { get; }
    public RouteAttribute(string template);
    [CompilerGeneratedAttribute]
public string get_Template();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.RouteData : object {
    [DynamicallyAccessedMembersAttribute("-1")]
public Type PageType { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> RouteValues { get; }
    [NullableAttribute("2")]
public string Template { get; public set; }
    public RouteData(Type pageType, IReadOnlyDictionary`2<string, object> routeValues);
    [CompilerGeneratedAttribute]
public Type get_PageType();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_RouteValues();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Template();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Template(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Components.RouteTableFactory : object {
    public static IComparer`1<InboundRouteEntry> RouteOrder;
    public static RouteTable Create(RouteKey routeKey, IServiceProvider serviceProvider);
    public static void ClearCaches();
    internal static RouteTable Create(List`1<Type> componentTypes, IServiceProvider serviceProvider);
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2067")]
internal static RouteTable Create(Dictionary`2<Type, String[]> templatesByHandler, IServiceProvider serviceProvider);
    internal static InboundRouteEntry CreateEntry(Type pageType, string template);
    internal static int RouteComparison(InboundRouteEntry x, InboundRouteEntry y);
    [CompilerGeneratedAttribute]
internal static void <GetRouteableComponents>g__GetRouteableComponents|4_0(List`1<Type> routeableComponents, Assembly assembly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.RouteView : object {
    [ParameterAttribute]
[EditorRequiredAttribute]
public RouteData RouteData { get; public set; }
    [ParameterAttribute]
public Type DefaultLayout { get; public set; }
    [CompilerGeneratedAttribute]
public RouteData get_RouteData();
    [CompilerGeneratedAttribute]
public void set_RouteData(RouteData value);
    [CompilerGeneratedAttribute]
public Type get_DefaultLayout();
    [CompilerGeneratedAttribute]
public void set_DefaultLayout(Type value);
    public sealed virtual void Attach(RenderHandle renderHandle);
    public sealed virtual Task SetParametersAsync(ParameterView parameters);
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2111")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2118")]
protected virtual void Render(RenderTreeBuilder builder);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Components.Routing.IHostEnvironmentNavigationManager {
    public abstract virtual void Initialize(string baseUri, string uri);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Components.Routing.INavigationInterception {
    public abstract virtual Task EnableNavigationInterceptionAsync();
}
[NullableContextAttribute("2")]
public interface Microsoft.AspNetCore.Components.Routing.IRoutingStateProvider {
    public RouteData RouteData { get; }
    public abstract virtual RouteData get_RouteData();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Components.Routing.IScrollToLocationHash {
    public abstract virtual Task RefreshScrollPositionForHash(string locationAbsolute);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs : EventArgs {
    public string Location { get; }
    public bool IsNavigationIntercepted { get; }
    [NullableAttribute("2")]
public string HistoryEntryState { get; internal set; }
    public LocationChangedEventArgs(string location, bool isNavigationIntercepted);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public bool get_IsNavigationIntercepted();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_HistoryEntryState();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HistoryEntryState(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public class Microsoft.AspNetCore.Components.Routing.LocationChangingContext : object {
    internal bool DidPreventNavigation { get; }
    [RequiredMemberAttribute]
public string TargetLocation { get; public set; }
    [NullableAttribute("2")]
public string HistoryEntryState { get; public set; }
    public bool IsNavigationIntercepted { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    [CompilerGeneratedAttribute]
internal bool get_DidPreventNavigation();
    [CompilerGeneratedAttribute]
public string get_TargetLocation();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TargetLocation(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_HistoryEntryState();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HistoryEntryState(string value);
    [CompilerGeneratedAttribute]
public bool get_IsNavigationIntercepted();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsNavigationIntercepted(bool value);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CancellationToken(CancellationToken value);
    public void PreventNavigation();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.Routing.NavigationContext : object {
    public string Path { get; }
    public CancellationToken CancellationToken { get; }
    internal NavigationContext(string path, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.Components.Routing.PathString : ValueType {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public PathString(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Components.Routing.Patterns.RoutePatternFactory : object {
    public static RoutePattern Pattern(string rawText, IEnumerable`1<RoutePatternPathSegment> segments);
    public static RoutePatternLiteralPart LiteralPart(string content);
    public static RoutePatternSeparatorPart SeparatorPart(string content);
    public static RoutePatternParameterPolicyReference Constraint(object constraint);
    public static RoutePatternParameterPolicyReference Constraint(IRouteConstraint constraint);
    public static RoutePatternParameterPolicyReference Constraint(string constraint);
    public static RoutePatternParameterPolicyReference ParameterPolicy(IParameterPolicy parameterPolicy);
    public static RoutePatternParameterPolicyReference ParameterPolicy(string parameterPolicy);
    [CompilerGeneratedAttribute]
internal static RoutePatternPathSegment <PatternCore>g__VisitSegment|3_2(RoutePatternPathSegment segment, <>c__DisplayClass3_0& );
    [CompilerGeneratedAttribute]
internal static RoutePatternPart <PatternCore>g__VisitPart|3_3(RoutePatternPart part, <>c__DisplayClass3_0& );
}
internal class Microsoft.AspNetCore.Components.Routing.QueryParameterNameComparer : object {
    [NullableAttribute("1")]
public static QueryParameterNameComparer Instance;
    public sealed virtual int Compare(ReadOnlyMemory`1<char> x, ReadOnlyMemory`1<char> y);
    public sealed virtual bool Equals(ReadOnlyMemory`1<char> x, ReadOnlyMemory`1<char> y);
    public sealed virtual int GetHashCode(ReadOnlyMemory`1<char> obj);
}
internal class Microsoft.AspNetCore.Components.Routing.QueryParameterValueSupplier : object {
    public void ReadParametersFromQuery(ReadOnlyMemory`1<char> query);
    [NullableContextAttribute("1")]
public object GetQueryParameterValue(Type targetType, string queryParameterName);
}
internal static class Microsoft.AspNetCore.Components.Routing.Resources : object {
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string RangeConstraint_MinShouldBeLessThanOrEqualToMax { get; }
    internal static string DefaultInlineConstraintResolver_AmbiguousCtors { get; }
    internal static string DefaultInlineConstraintResolver_CouldNotFindCtor { get; }
    internal static string DefaultInlineConstraintResolver_TypeNotConstraint { get; }
    internal static string RouteConstraintBuilder_ValidationMustBeStringOrCustomConstraint { get; }
    internal static string RouteConstraintBuilder_CouldNotResolveConstraint { get; }
    internal static string RoutePatternBuilder_CollectionCannotBeEmpty { get; }
    internal static string ConstraintMustBeStringOrConstraint { get; }
    internal static string RoutePattern_InvalidConstraintReference { get; }
    internal static string RoutePattern_InvalidParameterConstraintReference { get; }
    internal static string RoutePattern_ConstraintReferenceNotFound { get; }
    internal static string RoutePattern_InvalidStringConstraintReference { get; }
    internal static string RegexRouteContraint_NotConfigured { get; }
    internal static string ArgumentMustBeGreaterThanOrEqualTo { get; }
    internal static string Argument_NullOrEmpty { get; }
    internal static string TemplateRoute_CannotHaveCatchAllInMultiSegment { get; }
    internal static string TemplateRoute_CannotHaveConsecutiveParameters { get; }
    internal static string TemplateRoute_CannotHaveConsecutiveSeparators { get; }
    internal static string TemplateRoute_CannotHaveDefaultValueSpecifiedInlineAndExplicitly { get; }
    internal static string TemplateRoute_CatchAllCannotBeOptional { get; }
    internal static string TemplateRoute_CatchAllMustBeLast { get; }
    internal static string TemplateRoute_Exception { get; }
    internal static string TemplateRoute_InvalidLiteral { get; }
    internal static string TemplateRoute_InvalidParameterName { get; }
    internal static string TemplateRoute_InvalidRouteTemplate { get; }
    internal static string TemplateRoute_MismatchedParameter { get; }
    internal static string TemplateRoute_OptionalCannotHaveDefaultValue { get; }
    internal static string TemplateRoute_OptionalParameterCanbBePrecededByPeriod { get; }
    internal static string TemplateRoute_OptionalParameterHasTobeTheLast { get; }
    internal static string TemplateRoute_RepeatedParameter { get; }
    internal static string TemplateRoute_UnescapedBrace { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_RangeConstraint_MinShouldBeLessThanOrEqualToMax();
    internal static string FormatRangeConstraint_MinShouldBeLessThanOrEqualToMax(object p0, object p1);
    internal static string get_DefaultInlineConstraintResolver_AmbiguousCtors();
    internal static string FormatDefaultInlineConstraintResolver_AmbiguousCtors(object p0, object p1);
    internal static string get_DefaultInlineConstraintResolver_CouldNotFindCtor();
    internal static string FormatDefaultInlineConstraintResolver_CouldNotFindCtor(object p0, object p1);
    internal static string get_DefaultInlineConstraintResolver_TypeNotConstraint();
    internal static string FormatDefaultInlineConstraintResolver_TypeNotConstraint(object p0, object p1, object p2);
    internal static string get_RouteConstraintBuilder_ValidationMustBeStringOrCustomConstraint();
    internal static string FormatRouteConstraintBuilder_ValidationMustBeStringOrCustomConstraint(object p0, object p1, object p2, object p3);
    internal static string get_RouteConstraintBuilder_CouldNotResolveConstraint();
    internal static string FormatRouteConstraintBuilder_CouldNotResolveConstraint(object p0, object p1, object p2, object p3);
    internal static string get_RoutePatternBuilder_CollectionCannotBeEmpty();
    internal static string get_ConstraintMustBeStringOrConstraint();
    internal static string FormatConstraintMustBeStringOrConstraint(object p0, object p1, object p2);
    internal static string get_RoutePattern_InvalidConstraintReference();
    internal static string FormatRoutePattern_InvalidConstraintReference(object p0, object p1);
    internal static string get_RoutePattern_InvalidParameterConstraintReference();
    internal static string FormatRoutePattern_InvalidParameterConstraintReference(object p0, object p1, object p2, object p3);
    internal static string get_RoutePattern_ConstraintReferenceNotFound();
    internal static string FormatRoutePattern_ConstraintReferenceNotFound(object p0, object p1, object p2);
    internal static string get_RoutePattern_InvalidStringConstraintReference();
    internal static string FormatRoutePattern_InvalidStringConstraintReference(object p0, object p1, object p2, object p3);
    internal static string get_RegexRouteContraint_NotConfigured();
    internal static string get_ArgumentMustBeGreaterThanOrEqualTo();
    internal static string FormatArgumentMustBeGreaterThanOrEqualTo(object p0);
    internal static string get_Argument_NullOrEmpty();
    internal static string get_TemplateRoute_CannotHaveCatchAllInMultiSegment();
    internal static string get_TemplateRoute_CannotHaveConsecutiveParameters();
    internal static string get_TemplateRoute_CannotHaveConsecutiveSeparators();
    internal static string get_TemplateRoute_CannotHaveDefaultValueSpecifiedInlineAndExplicitly();
    internal static string FormatTemplateRoute_CannotHaveDefaultValueSpecifiedInlineAndExplicitly(object p0);
    internal static string get_TemplateRoute_CatchAllCannotBeOptional();
    internal static string get_TemplateRoute_CatchAllMustBeLast();
    internal static string get_TemplateRoute_Exception();
    internal static string FormatTemplateRoute_Exception(object p0, object p1);
    internal static string get_TemplateRoute_InvalidLiteral();
    internal static string FormatTemplateRoute_InvalidLiteral(object p0);
    internal static string get_TemplateRoute_InvalidParameterName();
    internal static string FormatTemplateRoute_InvalidParameterName(object p0);
    internal static string get_TemplateRoute_InvalidRouteTemplate();
    internal static string get_TemplateRoute_MismatchedParameter();
    internal static string get_TemplateRoute_OptionalCannotHaveDefaultValue();
    internal static string get_TemplateRoute_OptionalParameterCanbBePrecededByPeriod();
    internal static string FormatTemplateRoute_OptionalParameterCanbBePrecededByPeriod(object p0, object p1, object p2);
    internal static string get_TemplateRoute_OptionalParameterHasTobeTheLast();
    internal static string FormatTemplateRoute_OptionalParameterHasTobeTheLast(object p0, object p1, object p2);
    internal static string get_TemplateRoute_RepeatedParameter();
    internal static string FormatTemplateRoute_RepeatedParameter(object p0);
    internal static string get_TemplateRoute_UnescapedBrace();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.Routing.RouteContext : object {
    public string Path { get; public set; }
    public RouteValueDictionary RouteValues { get; public set; }
    [NullableAttribute("2")]
public InboundRouteEntry Entry { get; public set; }
    [NullableAttribute("2")]
[DynamicallyAccessedMembersAttribute("-1")]
public Type Handler { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Parameters { get; }
    public RouteContext(string path);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_RouteValues();
    [CompilerGeneratedAttribute]
public void set_RouteValues(RouteValueDictionary value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public InboundRouteEntry get_Entry();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Entry(InboundRouteEntry value);
    [NullableContextAttribute("2")]
public Type get_Handler();
    public IReadOnlyDictionary`2<string, object> get_Parameters();
    [CompilerGeneratedAttribute]
[SkipLocalsInitAttribute]
internal static string <.ctor>g__GetDecodedPath|0_0(string path);
}
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.Components.Routing.RouteKey : ValueType {
    [NullableAttribute("2")]
public Assembly AppAssembly;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public HashSet`1<Assembly> AdditionalAssemblies;
    [NullableContextAttribute("1")]
public RouteKey(Assembly appAssembly, IEnumerable`1<Assembly> additionalAssemblies);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RouteKey other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.Routing.Router : object {
    [ParameterAttribute]
[EditorRequiredAttribute]
public Assembly AppAssembly { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<Assembly> AdditionalAssemblies { get; public set; }
    [ParameterAttribute]
public RenderFragment NotFound { get; public set; }
    [ParameterAttribute]
[EditorRequiredAttribute]
public RenderFragment`1<RouteData> Found { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
public RenderFragment Navigating { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<NavigationContext> OnNavigateAsync { get; public set; }
    [ObsoleteAttribute("This property is obsolete and configuring it has not effect.")]
[ParameterAttribute]
public bool PreferExactMatches { get; public set; }
    [CompilerGeneratedAttribute]
public Assembly get_AppAssembly();
    [CompilerGeneratedAttribute]
public void set_AppAssembly(Assembly value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Assembly> get_AdditionalAssemblies();
    [CompilerGeneratedAttribute]
public void set_AdditionalAssemblies(IEnumerable`1<Assembly> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_NotFound();
    [CompilerGeneratedAttribute]
public void set_NotFound(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<RouteData> get_Found();
    [CompilerGeneratedAttribute]
public void set_Found(RenderFragment`1<RouteData> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_Navigating();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Navigating(RenderFragment value);
    [CompilerGeneratedAttribute]
public EventCallback`1<NavigationContext> get_OnNavigateAsync();
    [CompilerGeneratedAttribute]
public void set_OnNavigateAsync(EventCallback`1<NavigationContext> value);
    [CompilerGeneratedAttribute]
public bool get_PreferExactMatches();
    [CompilerGeneratedAttribute]
public void set_PreferExactMatches(bool value);
    public sealed virtual void Attach(RenderHandle renderHandle);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.Routing.Router/<SetParametersAsync>d__69")]
public sealed virtual Task SetParametersAsync(ParameterView parameters);
    public sealed virtual void Dispose();
    internal virtual void Refresh(bool isNavigationIntercepted);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.Routing.Router/<RunOnNavigateAsync>d__76")]
internal ValueTask RunOnNavigateAsync(string path, bool isNavigationIntercepted);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.Routing.Router/<Microsoft-AspNetCore-Components-IHandleAfterRender-OnAfterRenderAsync>d__78")]
private sealed virtual override Task Microsoft.AspNetCore.Components.IHandleAfterRender.OnAfterRenderAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.Routing.RouteTable : object {
    [NullableAttribute("2")]
public TreeRouter TreeRouter { get; }
    public RouteTable(TreeRouter treeRouter);
    [NullableContextAttribute("2")]
public TreeRouter get_TreeRouter();
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2077:Target parameter argument does not satisfy 'DynamicallyAccessedMembersAttribute' in call to target method. The source field does not have matching annotations.")]
internal static RouteData ProcessParameters(RouteData endpointRouteData);
    public void Route(RouteContext routeContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DebuggerTypeProxyAttribute("Microsoft.AspNetCore.Components.Routing.RouteValueDictionary/RouteValueDictionaryDebugView")]
[DebuggerDisplayAttribute("Count = {Count}")]
internal class Microsoft.AspNetCore.Components.Routing.RouteValueDictionary : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal KeyValuePair`2[] _arrayStorage;
    [NullableAttribute("2")]
public object Item { get; public set; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly { get; }
    public ICollection`1<string> Keys { get; }
    private IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.Keys { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollection`1<object> Values { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<object> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.Values { get; }
    public RouteValueDictionary(IEnumerable`1<KeyValuePair`2<string, object>> values);
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_IsReadOnly();
    public sealed virtual ICollection`1<string> get_Keys();
    private sealed virtual override IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.get_Keys();
    public sealed virtual ICollection`1<object> get_Values();
    private sealed virtual override IEnumerable`1<object> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Add(string key, object value);
    public sealed virtual void Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(KeyValuePair`2<string, object> item);
    public sealed virtual bool ContainsKey(string key);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(KeyValuePair`2<string, object> item);
    public sealed virtual bool Remove(string key);
    public bool Remove(string key, Object& value);
    public bool TryAdd(string key, object value);
    public sealed virtual bool TryGetValue(string key, Object& value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Components.Routing.StringSegmentAccumulator : ValueType {
    private int count;
    private ReadOnlyMemory`1<char> _single;
    private List`1<ReadOnlyMemory`1<char>> _multiple;
    public ReadOnlyMemory`1<char> Item { get; }
    public int Count { get; }
    public ReadOnlyMemory`1<char> get_Item(int index);
    public int get_Count();
    public void SetSingle(ReadOnlyMemory`1<char> value);
    public void Add(ReadOnlyMemory`1<char> value);
}
internal class Microsoft.AspNetCore.Components.Routing.SupplyParameterFromQueryValueProvider : object {
    public bool IsFixed { get; }
    [NullableContextAttribute("1")]
public SupplyParameterFromQueryValueProvider(NavigationManager navigationManager);
    public sealed virtual bool get_IsFixed();
    public bool CanSupplyValue(CascadingParameterInfo& parameterInfo);
    [NullableContextAttribute("2")]
public object GetCurrentValue(CascadingParameterInfo& parameterInfo);
    [NullableContextAttribute("1")]
public void Subscribe(ComponentState subscriber, CascadingParameterInfo& parameterInfo);
    [NullableContextAttribute("1")]
public void Unsubscribe(ComponentState subscriber, CascadingParameterInfo& parameterInfo);
    public sealed virtual void Dispose();
    private sealed virtual override bool Microsoft.AspNetCore.Components.ICascadingValueSupplier.CanSupplyValue(CascadingParameterInfo& modreq(System.Runtime.InteropServices.InAttribute) parameterInfo);
    private sealed virtual override object Microsoft.AspNetCore.Components.ICascadingValueSupplier.GetCurrentValue(CascadingParameterInfo& modreq(System.Runtime.InteropServices.InAttribute) parameterInfo);
    private sealed virtual override void Microsoft.AspNetCore.Components.ICascadingValueSupplier.Subscribe(ComponentState subscriber, CascadingParameterInfo& modreq(System.Runtime.InteropServices.InAttribute) parameterInfo);
    private sealed virtual override void Microsoft.AspNetCore.Components.ICascadingValueSupplier.Unsubscribe(ComponentState subscriber, CascadingParameterInfo& modreq(System.Runtime.InteropServices.InAttribute) parameterInfo);
    [CompilerGeneratedAttribute]
internal static ReadOnlyMemory`1<char> <TryUpdateUri>g__GetQueryString|14_0(string url);
}
internal abstract class Microsoft.AspNetCore.Components.Routing.UrlValueConstraint : object {
    [NullableContextAttribute("1")]
public static bool TryGetByTargetType(Type targetType, UrlValueConstraint& result);
    public abstract virtual bool TryParse(ReadOnlySpan`1<char> value, Object& result);
    public abstract virtual object Parse(ReadOnlySpan`1<char> value, string destinationNameForMessage);
    [NullableContextAttribute("1")]
public abstract virtual Array ParseMultiple(StringSegmentAccumulator values, string destinationNameForMessage);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.Sections.SectionContent : object {
    [ParameterAttribute]
public string SectionName { get; public set; }
    [ParameterAttribute]
public object SectionId { get; public set; }
    internal bool IsDefaultContent { get; internal set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SectionName();
    [CompilerGeneratedAttribute]
public void set_SectionName(string value);
    [CompilerGeneratedAttribute]
public object get_SectionId();
    [CompilerGeneratedAttribute]
public void set_SectionId(object value);
    [CompilerGeneratedAttribute]
internal bool get_IsDefaultContent();
    [CompilerGeneratedAttribute]
internal void set_IsDefaultContent(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    private sealed virtual override void Microsoft.AspNetCore.Components.IComponent.Attach(RenderHandle renderHandle);
    private sealed virtual override Task Microsoft.AspNetCore.Components.IComponent.SetParametersAsync(ParameterView parameters);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.Sections.SectionOutlet : object {
    [ParameterAttribute]
public string SectionName { get; public set; }
    [ParameterAttribute]
public object SectionId { get; public set; }
    internal IComponent CurrentLogicalParent { get; }
    [CompilerGeneratedAttribute]
public string get_SectionName();
    [CompilerGeneratedAttribute]
public void set_SectionName(string value);
    [CompilerGeneratedAttribute]
public object get_SectionId();
    [CompilerGeneratedAttribute]
public void set_SectionId(object value);
    internal IComponent get_CurrentLogicalParent();
    private sealed virtual override void Microsoft.AspNetCore.Components.IComponent.Attach(RenderHandle renderHandle);
    private sealed virtual override Task Microsoft.AspNetCore.Components.IComponent.SetParametersAsync(ParameterView parameters);
    internal void ContentUpdated(SectionContent provider);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.Sections.SectionRegistry : object {
    public void AddProvider(object identifier, SectionContent provider, bool isDefaultProvider);
    public void RemoveProvider(object identifier, SectionContent provider);
    public void Subscribe(object identifier, SectionOutlet subscriber);
    public void Unsubscribe(object identifier);
    public void NotifyContentProviderChanged(object identifier, SectionContent provider);
}
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Components.StreamRenderingAttribute : Attribute {
    public bool Enabled { get; }
    public StreamRenderingAttribute(bool enabled);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("128")]
public class Microsoft.AspNetCore.Components.SupplyParameterFromQueryAttribute : CascadingParameterAttributeBase {
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Components.SupplyParameterFromQueryProviderServiceCollectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IServiceCollection AddSupplyValueFromQueryProvider(IServiceCollection services);
}
internal static class Microsoft.AspNetCore.Internal.LinkerFlags : object {
    public static DynamicallyAccessedMemberTypes JsonSerialized;
    public static DynamicallyAccessedMemberTypes Component;
    public static DynamicallyAccessedMemberTypes JSInvokable;
}
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.Internal.QueryStringEnumerable : ValueType {
    private ReadOnlyMemory`1<char> _queryString;
    [NullableContextAttribute("2")]
public QueryStringEnumerable(string queryString);
    public QueryStringEnumerable(ReadOnlyMemory`1<char> queryString);
    public Enumerator GetEnumerator();
}
internal class Microsoft.AspNetCore.Internal.UrlDecoder : object {
    public static int DecodeRequestLine(ReadOnlySpan`1<byte> source, Span`1<byte> destination, bool isFormEncoding);
    public static int DecodeInPlace(Span`1<byte> buffer, bool isFormEncoding);
    public static int DecodeRequestLine(ReadOnlySpan`1<char> source, Span`1<char> destination);
    public static int DecodeInPlace(Span`1<char> buffer);
}
internal class Microsoft.AspNetCore.Routing.Constraints.AlphaRouteConstraint : RegexRouteConstraint {
}
internal class Microsoft.AspNetCore.Routing.Constraints.BoolRouteConstraint : object {
    [NullableContextAttribute("1")]
public sealed virtual bool Match(string routeKey, RouteValueDictionary values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Routing.Constraints.CompositeRouteConstraint : object {
    public IEnumerable`1<IRouteConstraint> Constraints { get; }
    public CompositeRouteConstraint(IEnumerable`1<IRouteConstraint> constraints);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IRouteConstraint> get_Constraints();
    public sealed virtual bool Match(string routeKey, RouteValueDictionary values);
}
internal class Microsoft.AspNetCore.Routing.Constraints.DateTimeRouteConstraint : object {
    [NullableContextAttribute("1")]
public sealed virtual bool Match(string routeKey, RouteValueDictionary values);
}
internal class Microsoft.AspNetCore.Routing.Constraints.DecimalRouteConstraint : object {
    [NullableContextAttribute("1")]
public sealed virtual bool Match(string routeKey, RouteValueDictionary values);
}
internal class Microsoft.AspNetCore.Routing.Constraints.DoubleRouteConstraint : object {
    [NullableContextAttribute("1")]
public sealed virtual bool Match(string routeKey, RouteValueDictionary values);
}
internal class Microsoft.AspNetCore.Routing.Constraints.FileNameRouteConstraint : object {
    [NullableContextAttribute("1")]
public sealed virtual bool Match(string routeKey, RouteValueDictionary values);
    internal static bool IsFileName(ReadOnlySpan`1<char> value);
}
internal class Microsoft.AspNetCore.Routing.Constraints.FloatRouteConstraint : object {
    [NullableContextAttribute("1")]
public sealed virtual bool Match(string routeKey, RouteValueDictionary values);
}
internal class Microsoft.AspNetCore.Routing.Constraints.GuidRouteConstraint : object {
    [NullableContextAttribute("1")]
public sealed virtual bool Match(string routeKey, RouteValueDictionary values);
}
internal class Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint : object {
    [NullableContextAttribute("1")]
public sealed virtual bool Match(string routeKey, RouteValueDictionary values);
}
internal class Microsoft.AspNetCore.Routing.Constraints.LengthRouteConstraint : object {
    public int MinLength { get; }
    public int MaxLength { get; }
    public LengthRouteConstraint(int length);
    public LengthRouteConstraint(int minLength, int maxLength);
    [CompilerGeneratedAttribute]
public int get_MinLength();
    [CompilerGeneratedAttribute]
public int get_MaxLength();
    [NullableContextAttribute("1")]
public sealed virtual bool Match(string routeKey, RouteValueDictionary values);
}
internal class Microsoft.AspNetCore.Routing.Constraints.LongRouteConstraint : object {
    [NullableContextAttribute("1")]
public sealed virtual bool Match(string routeKey, RouteValueDictionary values);
}
internal class Microsoft.AspNetCore.Routing.Constraints.MaxLengthRouteConstraint : object {
    public int MaxLength { get; }
    public MaxLengthRouteConstraint(int maxLength);
    [CompilerGeneratedAttribute]
public int get_MaxLength();
    [NullableContextAttribute("1")]
public sealed virtual bool Match(string routeKey, RouteValueDictionary values);
}
internal class Microsoft.AspNetCore.Routing.Constraints.MaxRouteConstraint : object {
    public long Max { get; }
    public MaxRouteConstraint(long max);
    [CompilerGeneratedAttribute]
public long get_Max();
    [NullableContextAttribute("1")]
public sealed virtual bool Match(string routeKey, RouteValueDictionary values);
}
internal class Microsoft.AspNetCore.Routing.Constraints.MinLengthRouteConstraint : object {
    public int MinLength { get; }
    public MinLengthRouteConstraint(int minLength);
    [CompilerGeneratedAttribute]
public int get_MinLength();
    [NullableContextAttribute("1")]
public sealed virtual bool Match(string routeKey, RouteValueDictionary values);
}
internal class Microsoft.AspNetCore.Routing.Constraints.MinRouteConstraint : object {
    public long Min { get; }
    public MinRouteConstraint(long min);
    [CompilerGeneratedAttribute]
public long get_Min();
    [NullableContextAttribute("1")]
public sealed virtual bool Match(string routeKey, RouteValueDictionary values);
}
internal class Microsoft.AspNetCore.Routing.Constraints.NonFileNameRouteConstraint : object {
    [NullableContextAttribute("1")]
public sealed virtual bool Match(string routeKey, RouteValueDictionary values);
}
internal class Microsoft.AspNetCore.Routing.Constraints.NullRouteConstraint : object {
    [NullableAttribute("1")]
public static NullRouteConstraint Instance;
    [NullableContextAttribute("1")]
public sealed virtual bool Match(string routeKey, RouteValueDictionary values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Routing.Constraints.OptionalRouteConstraint : object {
    public IRouteConstraint InnerConstraint { get; }
    public OptionalRouteConstraint(IRouteConstraint innerConstraint);
    [CompilerGeneratedAttribute]
public IRouteConstraint get_InnerConstraint();
    public sealed virtual bool Match(string routeKey, RouteValueDictionary values);
}
internal class Microsoft.AspNetCore.Routing.Constraints.RangeRouteConstraint : object {
    public long Min { get; }
    public long Max { get; }
    public RangeRouteConstraint(long min, long max);
    [CompilerGeneratedAttribute]
public long get_Min();
    [CompilerGeneratedAttribute]
public long get_Max();
    [NullableContextAttribute("1")]
public sealed virtual bool Match(string routeKey, RouteValueDictionary values);
}
internal class Microsoft.AspNetCore.Routing.Constraints.RegexInlineRouteConstraint : RegexRouteConstraint {
    [NullableContextAttribute("1")]
public RegexInlineRouteConstraint(string regexPattern);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Routing.Constraints.RegexRouteConstraint : object {
    public Regex Constraint { get; }
    public RegexRouteConstraint(Regex regex);
    public RegexRouteConstraint(string regexPattern);
    public Regex get_Constraint();
    public sealed virtual bool Match(string routeKey, RouteValueDictionary values);
}
internal class Microsoft.AspNetCore.Routing.DefaultInlineConstraintResolver : object {
    [NullableContextAttribute("1")]
public DefaultInlineConstraintResolver(IOptions`1<RouteOptions> routeOptions, IServiceProvider serviceProvider);
    [NullableContextAttribute("1")]
public virtual IRouteConstraint ResolveConstraint(string inlineConstraint);
}
[NullableContextAttribute("1")]
internal interface Microsoft.AspNetCore.Routing.IInlineConstraintResolver {
    public abstract virtual IRouteConstraint ResolveConstraint(string inlineConstraint);
}
internal interface Microsoft.AspNetCore.Routing.IParameterPolicy {
}
internal interface Microsoft.AspNetCore.Routing.IRouteConstraint {
    [NullableContextAttribute("1")]
public abstract virtual bool Match(string routeKey, RouteValueDictionary values);
}
internal static class Microsoft.AspNetCore.Routing.ParameterPolicyActivator : object {
    [NullableContextAttribute("1")]
public static T ResolveParameterPolicy(IDictionary`2<string, Type> inlineParameterPolicyMap, IServiceProvider serviceProvider, string inlineParameterPolicy, String& parameterPolicyKey);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Routing.PathTokenizer : ValueType {
    private string _path;
    private int _count;
    public int Count { get; }
    public StringSegment Item { get; }
    public PathTokenizer(PathString path);
    public sealed virtual int get_Count();
    public sealed virtual StringSegment get_Item(int index);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<StringSegment> System.Collections.Generic.IEnumerable<Microsoft.Extensions.Primitives.StringSegment>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class Microsoft.AspNetCore.Routing.Patterns.RouteParameterParser : object {
    [NullableContextAttribute("1")]
public static RoutePatternParameterPart ParseRouteParameter(string parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerToString()}")]
internal class Microsoft.AspNetCore.Routing.Patterns.RoutePattern : object {
    public static object RequiredValueAny;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Defaults { get; }
    public IReadOnlyDictionary`2<string, IReadOnlyList`1<RoutePatternParameterPolicyReference>> ParameterPolicies { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> RequiredValues { get; }
    public decimal InboundPrecedence { get; }
    public decimal OutboundPrecedence { get; }
    [NullableAttribute("2")]
public string RawText { get; }
    public IReadOnlyList`1<RoutePatternParameterPart> Parameters { get; }
    public IReadOnlyList`1<RoutePatternPathSegment> PathSegments { get; }
    internal RoutePattern(string rawText, IReadOnlyDictionary`2<string, object> defaults, IReadOnlyDictionary`2<string, IReadOnlyList`1<RoutePatternParameterPolicyReference>> parameterPolicies, IReadOnlyDictionary`2<string, object> requiredValues, IReadOnlyList`1<RoutePatternParameterPart> parameters, IReadOnlyList`1<RoutePatternPathSegment> pathSegments);
    [NullableContextAttribute("2")]
internal static bool IsRequiredValueAny(object value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Defaults();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, IReadOnlyList`1<RoutePatternParameterPolicyReference>> get_ParameterPolicies();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_RequiredValues();
    [CompilerGeneratedAttribute]
public decimal get_InboundPrecedence();
    [CompilerGeneratedAttribute]
public decimal get_OutboundPrecedence();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_RawText();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RoutePatternParameterPart> get_Parameters();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RoutePatternPathSegment> get_PathSegments();
    public RoutePatternParameterPart GetParameter(string name);
    internal string DebuggerToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Routing.Patterns.RoutePatternException : Exception {
    public string Pattern { get; }
    public RoutePatternException(string pattern, string message);
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerToString()}")]
internal class Microsoft.AspNetCore.Routing.Patterns.RoutePatternLiteralPart : RoutePatternPart {
    public string Content { get; }
    internal RoutePatternLiteralPart(string content);
    [CompilerGeneratedAttribute]
public string get_Content();
    internal virtual string DebuggerToString();
}
internal enum Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind : Enum {
    public int value__;
    public static RoutePatternParameterKind Standard;
    public static RoutePatternParameterKind Optional;
    public static RoutePatternParameterKind CatchAll;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerToString()}")]
internal class Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart : RoutePatternPart {
    public IReadOnlyList`1<RoutePatternParameterPolicyReference> ParameterPolicies { get; }
    public bool EncodeSlashes { get; }
    [NullableAttribute("2")]
public object Default { get; }
    public bool IsCatchAll { get; }
    public bool IsOptional { get; }
    public RoutePatternParameterKind ParameterKind { get; }
    public string Name { get; }
    internal RoutePatternParameterPart(string parameterName, object default, RoutePatternParameterKind parameterKind, RoutePatternParameterPolicyReference[] parameterPolicies);
    internal RoutePatternParameterPart(string parameterName, object default, RoutePatternParameterKind parameterKind, RoutePatternParameterPolicyReference[] parameterPolicies, bool encodeSlashes);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RoutePatternParameterPolicyReference> get_ParameterPolicies();
    [CompilerGeneratedAttribute]
public bool get_EncodeSlashes();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Default();
    public bool get_IsCatchAll();
    public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public RoutePatternParameterKind get_ParameterKind();
    [CompilerGeneratedAttribute]
public string get_Name();
    internal virtual string DebuggerToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerToString()}")]
internal class Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference : object {
    public string Content { get; }
    public IParameterPolicy ParameterPolicy { get; }
    [NullableContextAttribute("1")]
internal RoutePatternParameterPolicyReference(string content);
    [NullableContextAttribute("1")]
internal RoutePatternParameterPolicyReference(IParameterPolicy parameterPolicy);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public IParameterPolicy get_ParameterPolicy();
}
internal static class Microsoft.AspNetCore.Routing.Patterns.RoutePatternParser : object {
    internal static SearchValues`1<char> InvalidParameterNameChars;
    public static RoutePattern Parse(string pattern);
}
internal abstract class Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart : object {
    public RoutePatternPartKind PartKind { get; }
    public bool IsLiteral { get; }
    public bool IsParameter { get; }
    public bool IsSeparator { get; }
    private protected RoutePatternPart(RoutePatternPartKind partKind);
    [CompilerGeneratedAttribute]
public RoutePatternPartKind get_PartKind();
    public bool get_IsLiteral();
    public bool get_IsParameter();
    public bool get_IsSeparator();
    [NullableContextAttribute("1")]
internal abstract virtual string DebuggerToString();
}
internal enum Microsoft.AspNetCore.Routing.Patterns.RoutePatternPartKind : Enum {
    public int value__;
    public static RoutePatternPartKind Literal;
    public static RoutePatternPartKind Parameter;
    public static RoutePatternPartKind Separator;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerToString()}")]
internal class Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment : object {
    public bool IsSimple { get; }
    public IReadOnlyList`1<RoutePatternPart> Parts { get; }
    internal RoutePatternPathSegment(IReadOnlyList`1<RoutePatternPart> parts);
    public bool get_IsSimple();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RoutePatternPart> get_Parts();
    internal string DebuggerToString();
    internal static string DebuggerToString(IReadOnlyList`1<RoutePatternPart> parts);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerToString()}")]
internal class Microsoft.AspNetCore.Routing.Patterns.RoutePatternSeparatorPart : RoutePatternPart {
    public string Content { get; }
    internal RoutePatternSeparatorPart(string content);
    [CompilerGeneratedAttribute]
public string get_Content();
    internal virtual string DebuggerToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Routing.RouteConstraintBuilder : object {
    public RouteConstraintBuilder(IInlineConstraintResolver inlineConstraintResolver, string displayName);
    public IDictionary`2<string, IRouteConstraint> Build();
    public void AddResolvedConstraint(string key, string constraintText);
    public void SetOptional(string key);
}
internal static class Microsoft.AspNetCore.Routing.RouteConstraintMatcher : object {
    [NullableContextAttribute("1")]
public static bool Match(IDictionary`2<string, IRouteConstraint> constraints, RouteValueDictionary routeValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Routing.RouteCreationException : Exception {
    public RouteCreationException(string message);
    public RouteCreationException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Routing.RouteOptions : object {
    public IDictionary`2<string, Type> ConstraintMap { get; public set; }
    internal IDictionary`2<string, Type> TrimmerSafeConstraintMap { get; }
    [RequiresUnreferencedCodeAttribute("The linker cannot determine what constraints are being added via the ConstraintMap property. Prefer RouteOptions.SetParameterPolicy instead for setting constraints. This warning can be suppressed if this property is being used to read or delete constraints.")]
public IDictionary`2<string, Type> get_ConstraintMap();
    public void set_ConstraintMap(IDictionary`2<string, Type> value);
    internal IDictionary`2<string, Type> get_TrimmerSafeConstraintMap();
    public void SetParameterPolicy(string token);
    public void SetParameterPolicy(string token, Type type);
}
internal class Microsoft.AspNetCore.Routing.RoutePatternMatcher : object {
    public RouteValueDictionary Defaults { get; }
    public RoutePattern RoutePattern { get; }
    public RoutePatternMatcher(RoutePattern pattern, RouteValueDictionary defaults);
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_Defaults();
    [CompilerGeneratedAttribute]
public RoutePattern get_RoutePattern();
    public bool TryMatch(PathString path, RouteValueDictionary values);
    internal static bool MatchComplexSegment(RoutePatternPathSegment routeSegment, ReadOnlySpan`1<char> requestSegment, RouteValueDictionary values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Routing.RouteValueEqualityComparer : object {
    public static RouteValueEqualityComparer Default;
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(object x, object y);
    public sealed virtual int GetHashCode(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Routing.Template.RoutePrecedence : object {
    internal static decimal ComputeInbound(RoutePattern routePattern);
    internal static decimal ComputeOutbound(RoutePattern routePattern);
    internal static int ComputeInboundPrecedenceDigit(RoutePattern routePattern, RoutePatternPathSegment pathSegment);
}
[DebuggerDisplayAttribute("{DebuggerToString(),nq}")]
internal class Microsoft.AspNetCore.Routing.Tree.InboundMatch : object {
    public InboundRouteEntry Entry { get; public set; }
    public RoutePatternMatcher TemplateMatcher { get; public set; }
    [CompilerGeneratedAttribute]
public InboundRouteEntry get_Entry();
    [CompilerGeneratedAttribute]
public void set_Entry(InboundRouteEntry value);
    [CompilerGeneratedAttribute]
public RoutePatternMatcher get_TemplateMatcher();
    [CompilerGeneratedAttribute]
public void set_TemplateMatcher(RoutePatternMatcher value);
}
internal class Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry : object {
    public IDictionary`2<string, IRouteConstraint> Constraints { get; public set; }
    public RouteValueDictionary Defaults { get; public set; }
    [DynamicallyAccessedMembersAttribute("-1")]
public Type Handler { get; public set; }
    public int Order { get; public set; }
    public decimal Precedence { get; public set; }
    public string RouteName { get; public set; }
    public RoutePattern RoutePattern { get; public set; }
    public List`1<string> UnusedRouteParameterNames { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, IRouteConstraint> get_Constraints();
    [CompilerGeneratedAttribute]
public void set_Constraints(IDictionary`2<string, IRouteConstraint> value);
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_Defaults();
    [CompilerGeneratedAttribute]
public void set_Defaults(RouteValueDictionary value);
    [CompilerGeneratedAttribute]
public Type get_Handler();
    [CompilerGeneratedAttribute]
public void set_Handler(Type value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public decimal get_Precedence();
    [CompilerGeneratedAttribute]
public void set_Precedence(decimal value);
    [CompilerGeneratedAttribute]
public string get_RouteName();
    [CompilerGeneratedAttribute]
public void set_RouteName(string value);
    [CompilerGeneratedAttribute]
public RoutePattern get_RoutePattern();
    [CompilerGeneratedAttribute]
public void set_RoutePattern(RoutePattern value);
    [CompilerGeneratedAttribute]
public List`1<string> get_UnusedRouteParameterNames();
    [CompilerGeneratedAttribute]
public void set_UnusedRouteParameterNames(List`1<string> value);
}
internal class Microsoft.AspNetCore.Routing.Tree.TreeEnumerator : ValueType {
    private Stack`1<UrlMatchingNode> _stack;
    private PathTokenizer _tokenizer;
    [CompilerGeneratedAttribute]
private UrlMatchingNode <Current>k__BackingField;
    public UrlMatchingNode Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public TreeEnumerator(UrlMatchingNode root, PathTokenizer tokenizer);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual UrlMatchingNode get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual void Dispose();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
internal class Microsoft.AspNetCore.Routing.Tree.TreeRouteBuilder : object {
    public IList`1<InboundRouteEntry> InboundEntries { get; }
    internal TreeRouteBuilder(ILoggerFactory loggerFactory, IInlineConstraintResolver constraintResolver);
    public InboundRouteEntry MapInbound(Type handler, RoutePattern routeTemplate, List`1<string> unusedParameterNames);
    [CompilerGeneratedAttribute]
public IList`1<InboundRouteEntry> get_InboundEntries();
    public TreeRouter Build();
    public TreeRouter Build(int version);
    public void Clear();
}
internal class Microsoft.AspNetCore.Routing.Tree.TreeRouter : object {
    public int Version { get; }
    internal IEnumerable`1<UrlMatchingTree> MatchingTrees { get; }
    internal TreeRouter(UrlMatchingTree[] trees, UrlEncoder urlEncoder, ILogger routeLogger, int version);
    [CompilerGeneratedAttribute]
public int get_Version();
    internal IEnumerable`1<UrlMatchingTree> get_MatchingTrees();
    public void Route(RouteContext context);
}
[DebuggerDisplayAttribute("{DebuggerToString(),nq}")]
internal class Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode : object {
    public int Depth { get; }
    public bool IsCatchAll { get; public set; }
    public List`1<InboundMatch> Matches { get; }
    public Dictionary`2<string, UrlMatchingNode> Literals { get; }
    public UrlMatchingNode ConstrainedParameters { get; public set; }
    public UrlMatchingNode Parameters { get; public set; }
    public UrlMatchingNode ConstrainedCatchAlls { get; public set; }
    public UrlMatchingNode CatchAlls { get; public set; }
    public UrlMatchingNode(int length);
    [CompilerGeneratedAttribute]
public int get_Depth();
    [CompilerGeneratedAttribute]
public bool get_IsCatchAll();
    [CompilerGeneratedAttribute]
public void set_IsCatchAll(bool value);
    [CompilerGeneratedAttribute]
public List`1<InboundMatch> get_Matches();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, UrlMatchingNode> get_Literals();
    [CompilerGeneratedAttribute]
public UrlMatchingNode get_ConstrainedParameters();
    [CompilerGeneratedAttribute]
public void set_ConstrainedParameters(UrlMatchingNode value);
    [CompilerGeneratedAttribute]
public UrlMatchingNode get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(UrlMatchingNode value);
    [CompilerGeneratedAttribute]
public UrlMatchingNode get_ConstrainedCatchAlls();
    [CompilerGeneratedAttribute]
public void set_ConstrainedCatchAlls(UrlMatchingNode value);
    [CompilerGeneratedAttribute]
public UrlMatchingNode get_CatchAlls();
    [CompilerGeneratedAttribute]
public void set_CatchAlls(UrlMatchingNode value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Routing.Tree.UrlMatchingTree : object {
    public int Order { get; }
    public UrlMatchingNode Root { get; }
    public UrlMatchingTree(int order);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public UrlMatchingNode get_Root();
    internal void AddEntry(InboundRouteEntry entry);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.CascadingValueServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddCascadingValue(IServiceCollection serviceCollection, Func`2<IServiceProvider, TValue> initialValueFactory);
    [ExtensionAttribute]
public static IServiceCollection AddCascadingValue(IServiceCollection serviceCollection, string name, Func`2<IServiceProvider, TValue> initialValueFactory);
    [ExtensionAttribute]
public static IServiceCollection AddCascadingValue(IServiceCollection serviceCollection, Func`2<IServiceProvider, CascadingValueSource`1<TValue>> sourceFactory);
    [ExtensionAttribute]
public static void TryAddCascadingValue(IServiceCollection serviceCollection, Func`2<IServiceProvider, TValue> valueFactory);
    [ExtensionAttribute]
public static void TryAddCascadingValue(IServiceCollection serviceCollection, string name, Func`2<IServiceProvider, TValue> valueFactory);
    [ExtensionAttribute]
public static void TryAddCascadingValue(IServiceCollection serviceCollection, Func`2<IServiceProvider, CascadingValueSource`1<TValue>> sourceFactory);
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.36612")]
[SkipLocalsInitAttribute]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__GetAlphaRouteRegex_0 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__GetAlphaRouteRegex_0 Instance;
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.36612")]
internal static class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__Utilities : object {
    internal static TimeSpan s_defaultTimeout;
    internal static bool s_hasTimeout;
    [NullableAttribute("1")]
internal static SearchValues`1<char> s_asciiLetters;
}
