[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.CorsEndpointConventionBuilderExtensions : object {
    [ExtensionAttribute]
public static TBuilder RequireCors(TBuilder builder);
    [ExtensionAttribute]
public static TBuilder RequireCors(TBuilder builder, string policyName);
    [ExtensionAttribute]
public static TBuilder RequireCors(TBuilder builder, Action`1<CorsPolicyBuilder> configurePolicy);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.CorsMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseCors(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseCors(IApplicationBuilder app, string policyName);
    [ExtensionAttribute]
public static IApplicationBuilder UseCors(IApplicationBuilder app, Action`1<CorsPolicyBuilder> configurePolicy);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Cors.CORSLoggerExtensions : object {
    [ExtensionAttribute]
[LoggerMessageAttribute("1", "1", "The request is a preflight request.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void IsPreflightRequest(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("2", "1", "The request has an origin header: '{origin}'.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void RequestHasOriginHeader(ILogger logger, string origin);
    [ExtensionAttribute]
[LoggerMessageAttribute("3", "1", "The request does not have an origin header.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void RequestDoesNotHaveOriginHeader(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("4", "2", "CORS policy execution successful.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void PolicySuccess(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("5", "2", "CORS policy execution failed.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void PolicyFailure(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("6", "2", "Request origin {origin} does not have permission to access the resource.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void OriginNotAllowed(ILogger logger, string origin);
    [ExtensionAttribute]
[LoggerMessageAttribute("7", "2", "Request method {accessControlRequestMethod} not allowed in CORS policy.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void AccessControlMethodNotAllowed(ILogger logger, string accessControlRequestMethod);
    [ExtensionAttribute]
[LoggerMessageAttribute("8", "2", "Request header '{requestHeader}' not allowed in CORS policy.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void RequestHeaderNotAllowed(ILogger logger, string requestHeader);
    [ExtensionAttribute]
[LoggerMessageAttribute("9", "3", "Failed to apply CORS Response headers.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void FailedToSetCorsHeaders(ILogger logger, Exception exception);
    [ExtensionAttribute]
[LoggerMessageAttribute("10", "2", "No CORS policy found for the specified request.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void NoCorsPolicyFound(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("12", "1", "This request uses the HTTP OPTIONS method but does not have an Access-Control-Request-Method header. This request will not be treated as a CORS preflight request.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void IsNotPreflightRequest(ILogger logger);
}
public class Microsoft.AspNetCore.Cors.CorsPolicyMetadata : object {
    [NullableAttribute("1")]
public CorsPolicy Policy { get; }
    [NullableContextAttribute("1")]
public CorsPolicyMetadata(CorsPolicy policy);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual CorsPolicy get_Policy();
}
[AttributeUsageAttribute("68")]
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Microsoft.AspNetCore.Cors.DisableCorsAttribute : Attribute {
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("68")]
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Microsoft.AspNetCore.Cors.EnableCorsAttribute : Attribute {
    public string PolicyName { get; public set; }
    public EnableCorsAttribute(string policyName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PolicyName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PolicyName(string value);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.AspNetCore.Cors.Infrastructure.CorsConstants : object {
    public static string PreflightHttpMethod;
    public static string Origin;
    public static string AnyOrigin;
    public static string AccessControlRequestMethod;
    public static string AccessControlRequestHeaders;
    public static string AccessControlAllowOrigin;
    public static string AccessControlAllowHeaders;
    public static string AccessControlExposeHeaders;
    public static string AccessControlAllowMethods;
    public static string AccessControlAllowCredentials;
    public static string AccessControlMaxAge;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware : object {
    public CorsMiddleware(RequestDelegate next, ICorsService corsService, ILoggerFactory loggerFactory);
    public CorsMiddleware(RequestDelegate next, ICorsService corsService, ILoggerFactory loggerFactory, string policyName);
    public CorsMiddleware(RequestDelegate next, ICorsService corsService, CorsPolicy policy, ILoggerFactory loggerFactory);
    public Task Invoke(HttpContext context, ICorsPolicyProvider corsPolicyProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IDictionary`2<string, ValueTuple`2<CorsPolicy, Task`1<CorsPolicy>>> PolicyMap { get; }
    public string DefaultPolicyName { get; public set; }
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, ValueTuple`2<CorsPolicy, Task`1<CorsPolicy>>> get_PolicyMap();
    public string get_DefaultPolicyName();
    public void set_DefaultPolicyName(string value);
    public void AddDefaultPolicy(CorsPolicy policy);
    public void AddDefaultPolicy(Action`1<CorsPolicyBuilder> configurePolicy);
    public void AddPolicy(string name, CorsPolicy policy);
    public void AddPolicy(string name, Action`1<CorsPolicyBuilder> configurePolicy);
    public CorsPolicy GetPolicy(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy : object {
    public bool AllowAnyHeader { get; }
    public bool AllowAnyMethod { get; }
    public bool AllowAnyOrigin { get; }
    internal bool IsDefaultIsOriginAllowed { get; }
    public Func`2<string, bool> IsOriginAllowed { get; public set; }
    public IList`1<string> ExposedHeaders { get; }
    public IList`1<string> Headers { get; }
    public IList`1<string> Methods { get; }
    public IList`1<string> Origins { get; }
    public Nullable`1<TimeSpan> PreflightMaxAge { get; public set; }
    public bool SupportsCredentials { get; public set; }
    public bool get_AllowAnyHeader();
    public bool get_AllowAnyMethod();
    public bool get_AllowAnyOrigin();
    [CompilerGeneratedAttribute]
internal bool get_IsDefaultIsOriginAllowed();
    public Func`2<string, bool> get_IsOriginAllowed();
    public void set_IsOriginAllowed(Func`2<string, bool> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ExposedHeaders();
    [CompilerGeneratedAttribute]
public IList`1<string> get_Headers();
    [CompilerGeneratedAttribute]
public IList`1<string> get_Methods();
    [CompilerGeneratedAttribute]
public IList`1<string> get_Origins();
    public Nullable`1<TimeSpan> get_PreflightMaxAge();
    public void set_PreflightMaxAge(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public bool get_SupportsCredentials();
    [CompilerGeneratedAttribute]
public void set_SupportsCredentials(bool value);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder : object {
    public CorsPolicyBuilder(String[] origins);
    public CorsPolicyBuilder(CorsPolicy policy);
    public CorsPolicyBuilder WithOrigins(String[] origins);
    internal static string GetNormalizedOrigin(string origin);
    public CorsPolicyBuilder WithHeaders(String[] headers);
    public CorsPolicyBuilder WithExposedHeaders(String[] exposedHeaders);
    public CorsPolicyBuilder WithMethods(String[] methods);
    public CorsPolicyBuilder AllowCredentials();
    public CorsPolicyBuilder DisallowCredentials();
    public CorsPolicyBuilder AllowAnyOrigin();
    public CorsPolicyBuilder AllowAnyMethod();
    public CorsPolicyBuilder AllowAnyHeader();
    public CorsPolicyBuilder SetPreflightMaxAge(TimeSpan preflightMaxAge);
    public CorsPolicyBuilder SetIsOriginAllowed(Func`2<string, bool> isOriginAllowed);
    public CorsPolicyBuilder SetIsOriginAllowedToAllowWildcardSubdomains();
    public CorsPolicy Build();
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsOriginAnAllowedSubdomain(CorsPolicy policy, string origin);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Cors.Infrastructure.CorsResult : object {
    public bool IsPreflightRequest { get; public set; }
    [NullableAttribute("2")]
public string AllowedOrigin { get; public set; }
    public bool IsOriginAllowed { get; public set; }
    public bool SupportsCredentials { get; public set; }
    public IList`1<string> AllowedMethods { get; }
    public IList`1<string> AllowedHeaders { get; }
    public IList`1<string> AllowedExposedHeaders { get; }
    public bool VaryByOrigin { get; public set; }
    public Nullable`1<TimeSpan> PreflightMaxAge { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsPreflightRequest();
    [CompilerGeneratedAttribute]
public void set_IsPreflightRequest(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_AllowedOrigin();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_AllowedOrigin(string value);
    [CompilerGeneratedAttribute]
public bool get_IsOriginAllowed();
    [CompilerGeneratedAttribute]
public void set_IsOriginAllowed(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportsCredentials();
    [CompilerGeneratedAttribute]
public void set_SupportsCredentials(bool value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_AllowedMethods();
    [CompilerGeneratedAttribute]
public IList`1<string> get_AllowedHeaders();
    [CompilerGeneratedAttribute]
public IList`1<string> get_AllowedExposedHeaders();
    [CompilerGeneratedAttribute]
public bool get_VaryByOrigin();
    [CompilerGeneratedAttribute]
public void set_VaryByOrigin(bool value);
    public Nullable`1<TimeSpan> get_PreflightMaxAge();
    public void set_PreflightMaxAge(Nullable`1<TimeSpan> value);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Cors.Infrastructure.CorsService : object {
    public CorsService(IOptions`1<CorsOptions> options, ILoggerFactory loggerFactory);
    public CorsResult EvaluatePolicy(HttpContext context, string policyName);
    public sealed virtual CorsResult EvaluatePolicy(HttpContext context, CorsPolicy policy);
    public virtual void EvaluateRequest(HttpContext context, CorsPolicy policy, CorsResult result);
    public virtual void EvaluatePreflightRequest(HttpContext context, CorsPolicy policy, CorsResult result);
    public virtual void ApplyResult(CorsResult result, HttpResponse response);
}
public class Microsoft.AspNetCore.Cors.Infrastructure.DefaultCorsPolicyProvider : object {
    [NullableContextAttribute("1")]
public DefaultCorsPolicyProvider(IOptions`1<CorsOptions> options);
    [NullableContextAttribute("1")]
public sealed virtual Task`1<CorsPolicy> GetPolicyAsync(HttpContext context, string policyName);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Cors.Infrastructure.ICorsPolicyMetadata {
    public CorsPolicy Policy { get; }
    public abstract virtual CorsPolicy get_Policy();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Cors.Infrastructure.ICorsPolicyProvider {
    public abstract virtual Task`1<CorsPolicy> GetPolicyAsync(HttpContext context, string policyName);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Cors.Infrastructure.ICorsService {
    public abstract virtual CorsResult EvaluatePolicy(HttpContext context, CorsPolicy policy);
    public abstract virtual void ApplyResult(CorsResult result, HttpResponse response);
}
public interface Microsoft.AspNetCore.Cors.Infrastructure.IDisableCorsAttribute {
}
[NullableContextAttribute("2")]
public interface Microsoft.AspNetCore.Cors.Infrastructure.IEnableCorsAttribute {
    public string PolicyName { get; public set; }
    public abstract virtual string get_PolicyName();
    public abstract virtual void set_PolicyName(string value);
}
internal static class Microsoft.AspNetCore.Cors.Infrastructure.UriHelpers : object {
    [NullableContextAttribute("1")]
public static bool IsSubdomainOf(Uri subdomain, Uri domain);
}
internal static class Microsoft.AspNetCore.Cors.Resources : object {
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string InsecureConfiguration { get; }
    internal static string PolicyNotFound { get; }
    internal static string PreflightMaxAgeOutOfRange { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_InsecureConfiguration();
    internal static string get_PolicyNotFound();
    internal static string FormatPolicyNotFound(object p0);
    internal static string get_PreflightMaxAgeOutOfRange();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Shared.DebuggerHelpers : object {
    public static string GetDebugText(string key1, object value1, bool includeNullValues, string prefix);
    public static string GetDebugText(string key1, object value1, string key2, object value2, bool includeNullValues, string prefix);
    public static string GetDebugText(string key1, object value1, string key2, object value2, string key3, object value3, bool includeNullValues, string prefix);
    public static string GetDebugText(ReadOnlySpan`1<KeyValuePair`2<string, object>> values, bool includeNullValues, string prefix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.CorsServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddCors(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddCors(IServiceCollection services, Action`1<CorsOptions> setupAction);
}
