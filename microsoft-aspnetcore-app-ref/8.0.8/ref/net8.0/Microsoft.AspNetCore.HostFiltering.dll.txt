[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.HostFilteringBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IApplicationBuilder UseHostFiltering(IApplicationBuilder app);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.HostFilteringServicesExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IServiceCollection AddHostFiltering(IServiceCollection services, Action`1<HostFilteringOptions> configureOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware : object {
    public HostFilteringMiddleware(RequestDelegate next, ILogger`1<HostFilteringMiddleware> logger, IOptionsMonitor`1<HostFilteringOptions> optionsMonitor);
    public Task Invoke(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.HostFiltering.HostFilteringOptions : object {
    public IList`1<string> AllowedHosts { get; public set; }
    public bool AllowEmptyHosts { get; public set; }
    public bool IncludeFailureMessage { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_AllowedHosts();
    [CompilerGeneratedAttribute]
public void set_AllowedHosts(IList`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_AllowEmptyHosts();
    [CompilerGeneratedAttribute]
public void set_AllowEmptyHosts(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeFailureMessage();
    [CompilerGeneratedAttribute]
public void set_IncludeFailureMessage(bool value);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.HostFiltering.LoggerExtensions : object {
    [ExtensionAttribute]
[LoggerMessageAttribute("0", "1", "Wildcard detected, all requests with hosts will be allowed.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void WildcardDetected(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("1", "1", "Allowed hosts: {Hosts}")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void AllowedHosts(ILogger logger, string hosts);
    [ExtensionAttribute]
[LoggerMessageAttribute("2", "0", "All hosts are allowed.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void AllHostsAllowed(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("3", "2", "{Protocol} request rejected due to missing or empty host header.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void RequestRejectedMissingHost(ILogger logger, string protocol);
    [ExtensionAttribute]
[LoggerMessageAttribute("4", "1", "{Protocol} request allowed with missing or empty host header.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void RequestAllowedMissingHost(ILogger logger, string protocol);
    [ExtensionAttribute]
[LoggerMessageAttribute("5", "0", "The host '{Host}' matches an allowed host.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void AllowedHostMatched(ILogger logger, string host);
    [ExtensionAttribute]
[LoggerMessageAttribute("6", "2", "The host '{Host}' does not match an allowed host.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void NoAllowedHostMatched(ILogger logger, string host);
}
