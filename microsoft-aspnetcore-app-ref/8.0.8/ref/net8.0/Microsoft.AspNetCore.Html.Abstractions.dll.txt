[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerToString()}")]
public class Microsoft.AspNetCore.Html.HtmlContentBuilder : object {
    public int Count { get; }
    internal IList`1<object> Entries { get; }
    public HtmlContentBuilder(int capacity);
    public HtmlContentBuilder(IList`1<object> entries);
    public int get_Count();
    [CompilerGeneratedAttribute]
internal IList`1<object> get_Entries();
    public sealed virtual IHtmlContentBuilder Append(string unencoded);
    public sealed virtual IHtmlContentBuilder AppendHtml(IHtmlContent htmlContent);
    public sealed virtual IHtmlContentBuilder AppendHtml(string encoded);
    public sealed virtual IHtmlContentBuilder Clear();
    public sealed virtual void CopyTo(IHtmlContentBuilder destination);
    public sealed virtual void MoveTo(IHtmlContentBuilder destination);
    public sealed virtual void WriteTo(TextWriter writer, HtmlEncoder encoder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions : object {
    [ExtensionAttribute]
public static IHtmlContentBuilder AppendFormat(IHtmlContentBuilder builder, string format, Object[] args);
    [ExtensionAttribute]
public static IHtmlContentBuilder AppendFormat(IHtmlContentBuilder builder, IFormatProvider formatProvider, string format, Object[] args);
    [ExtensionAttribute]
public static IHtmlContentBuilder AppendLine(IHtmlContentBuilder builder);
    [ExtensionAttribute]
public static IHtmlContentBuilder AppendLine(IHtmlContentBuilder builder, string unencoded);
    [ExtensionAttribute]
public static IHtmlContentBuilder AppendLine(IHtmlContentBuilder builder, IHtmlContent content);
    [ExtensionAttribute]
public static IHtmlContentBuilder AppendHtmlLine(IHtmlContentBuilder builder, string encoded);
    [ExtensionAttribute]
public static IHtmlContentBuilder SetContent(IHtmlContentBuilder builder, string unencoded);
    [ExtensionAttribute]
public static IHtmlContentBuilder SetHtmlContent(IHtmlContentBuilder builder, IHtmlContent content);
    [ExtensionAttribute]
public static IHtmlContentBuilder SetHtmlContent(IHtmlContentBuilder builder, string encoded);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerToString()}")]
public class Microsoft.AspNetCore.Html.HtmlFormattableString : object {
    public HtmlFormattableString(string format, Object[] args);
    public HtmlFormattableString(IFormatProvider formatProvider, string format, Object[] args);
    public sealed virtual void WriteTo(TextWriter writer, HtmlEncoder encoder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Html.HtmlString : object {
    public static HtmlString NewLine;
    public static HtmlString Empty;
    [NullableAttribute("2")]
public string Value { get; }
    [NullableContextAttribute("2")]
public HtmlString(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Value();
    public sealed virtual void WriteTo(TextWriter writer, HtmlEncoder encoder);
    public virtual string ToString();
}
public interface Microsoft.AspNetCore.Html.IHtmlAsyncContent {
    [NullableContextAttribute("1")]
public abstract virtual ValueTask WriteToAsync(TextWriter writer);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Html.IHtmlContent {
    public abstract virtual void WriteTo(TextWriter writer, HtmlEncoder encoder);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Html.IHtmlContentBuilder {
    public abstract virtual IHtmlContentBuilder AppendHtml(IHtmlContent content);
    public abstract virtual IHtmlContentBuilder Append(string unencoded);
    public abstract virtual IHtmlContentBuilder AppendHtml(string encoded);
    public abstract virtual IHtmlContentBuilder Clear();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Html.IHtmlContentContainer {
    public abstract virtual void CopyTo(IHtmlContentBuilder builder);
    public abstract virtual void MoveTo(IHtmlContentBuilder builder);
}
