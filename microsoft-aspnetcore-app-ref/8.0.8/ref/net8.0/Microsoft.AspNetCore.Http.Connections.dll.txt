[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Builder.ConnectionEndpointRouteBuilder : object {
    internal ConnectionEndpointRouteBuilder(IEndpointConventionBuilder endpointConventionBuilder);
    public sealed virtual void Add(Action`1<EndpointBuilder> convention);
    public sealed virtual void Finally(Action`1<EndpointBuilder> finalConvention);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.ConnectionEndpointRouteBuilderExtensions : object {
    [ExtensionAttribute]
public static ConnectionEndpointRouteBuilder MapConnections(IEndpointRouteBuilder endpoints, string pattern, Action`1<IConnectionBuilder> configure);
    [ExtensionAttribute]
public static ConnectionEndpointRouteBuilder MapConnectionHandler(IEndpointRouteBuilder endpoints, string pattern);
    [ExtensionAttribute]
public static ConnectionEndpointRouteBuilder MapConnectionHandler(IEndpointRouteBuilder endpoints, string pattern, Action`1<HttpConnectionDispatcherOptions> configureOptions);
    [ExtensionAttribute]
public static ConnectionEndpointRouteBuilder MapConnections(IEndpointRouteBuilder endpoints, string pattern, HttpConnectionDispatcherOptions options, Action`1<IConnectionBuilder> configure);
}
public class Microsoft.AspNetCore.Http.Connections.ConnectionOptions : object {
    public Nullable`1<TimeSpan> DisconnectTimeout { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_DisconnectTimeout();
    [CompilerGeneratedAttribute]
public void set_DisconnectTimeout(Nullable`1<TimeSpan> value);
}
public class Microsoft.AspNetCore.Http.Connections.ConnectionOptionsSetup : object {
    public static TimeSpan DefaultDisconectTimeout;
    [NullableContextAttribute("1")]
public sealed virtual void Configure(ConnectionOptions options);
}
[NullableContextAttribute("2")]
public interface Microsoft.AspNetCore.Http.Connections.Features.IHttpContextFeature {
    public HttpContext HttpContext { get; public set; }
    public abstract virtual HttpContext get_HttpContext();
    public abstract virtual void set_HttpContext(HttpContext value);
}
public interface Microsoft.AspNetCore.Http.Connections.Features.IHttpTransportFeature {
    public HttpTransportType TransportType { get; }
    public abstract virtual HttpTransportType get_TransportType();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Http.Connections.HttpConnectionContextExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static HttpContext GetHttpContext(ConnectionContext connection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Http.Connections.HttpConnectionDispatcherOptions : object {
    public IList`1<IAuthorizeData> AuthorizationData { get; }
    public HttpTransportType Transports { get; public set; }
    public WebSocketOptions WebSockets { get; }
    public LongPollingOptions LongPolling { get; }
    public long TransportMaxBufferSize { get; public set; }
    public long ApplicationMaxBufferSize { get; public set; }
    public int MinimumProtocolVersion { get; public set; }
    public TimeSpan TransportSendTimeout { get; public set; }
    public bool CloseOnAuthenticationExpiration { get; public set; }
    public bool AllowStatefulReconnects { get; public set; }
    internal bool TransportSendTimeoutEnabled { get; }
    internal PipeOptions TransportPipeOptions { get; }
    internal PipeOptions AppPipeOptions { get; }
    [CompilerGeneratedAttribute]
public IList`1<IAuthorizeData> get_AuthorizationData();
    [CompilerGeneratedAttribute]
public HttpTransportType get_Transports();
    [CompilerGeneratedAttribute]
public void set_Transports(HttpTransportType value);
    [CompilerGeneratedAttribute]
public WebSocketOptions get_WebSockets();
    [CompilerGeneratedAttribute]
public LongPollingOptions get_LongPolling();
    public long get_TransportMaxBufferSize();
    public void set_TransportMaxBufferSize(long value);
    public long get_ApplicationMaxBufferSize();
    public void set_ApplicationMaxBufferSize(long value);
    [CompilerGeneratedAttribute]
public int get_MinimumProtocolVersion();
    [CompilerGeneratedAttribute]
public void set_MinimumProtocolVersion(int value);
    public TimeSpan get_TransportSendTimeout();
    public void set_TransportSendTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_CloseOnAuthenticationExpiration();
    [CompilerGeneratedAttribute]
public void set_CloseOnAuthenticationExpiration(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowStatefulReconnects();
    [CompilerGeneratedAttribute]
public void set_AllowStatefulReconnects(bool value);
    internal bool get_TransportSendTimeoutEnabled();
    internal PipeOptions get_TransportPipeOptions();
    internal PipeOptions get_AppPipeOptions();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Http.Connections.Internal.ConnectionLogScope : object {
    public string ConnectionId { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public KeyValuePair`2<string, object> Item { get; }
    public int Count { get; }
    public ConnectionLogScope(string connectionId);
    [CompilerGeneratedAttribute]
public string get_ConnectionId();
    [CompilerGeneratedAttribute]
public void set_ConnectionId(string value);
    public sealed virtual KeyValuePair`2<string, object> get_Item(int index);
    public sealed virtual int get_Count();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.ConnectionLogScope/<GetEnumerator>d__10")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionContext : ConnectionContext {
    internal CancellationToken SendingToken { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`2<PipeWriter, Task> NotifyOnReconnect { get; internal set; }
    public bool UseStatefulReconnect { get; }
    [NullableAttribute("2")]
public CancellationTokenSource Cancellation { get; public set; }
    public HttpTransportType TransportType { get; public set; }
    internal long StartTimestamp { get; internal set; }
    public SemaphoreSlim WriteLock { get; }
    [NullableAttribute("2")]
internal Task DisposeAndRemoveTask { get; internal set; }
    internal Nullable`1<AsyncServiceScope> ServiceScope { get; internal set; }
    internal DateTimeOffset AuthenticationExpiration { get; internal set; }
    internal bool IsAuthenticationExpirationEnabled { get; }
    [NullableAttribute("2")]
public Task`1<bool> TransportTask { get; public set; }
    public Task PreviousPollTask { get; public set; }
    [NullableAttribute("2")]
public Task ApplicationTask { get; public set; }
    public TimeSpan LastSeenTicks { get; public set; }
    public Nullable`1<TimeSpan> LastSeenTicksIfInactive { get; }
    public HttpConnectionStatus Status { get; public set; }
    public string ConnectionId { get; public set; }
    public MetricsContext MetricsContext { get; }
    internal string ConnectionToken { get; internal set; }
    public IFeatureCollection Features { get; }
    [NullableAttribute("2")]
public ClaimsPrincipal User { get; public set; }
    public bool HasInherentKeepAlive { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<object, object> Items { get; public set; }
    public IDuplexPipe Application { get; public set; }
    internal PipeWriterStream ApplicationStream { get; }
    public IDuplexPipe Transport { get; public set; }
    public TransferFormat SupportedFormats { get; public set; }
    public TransferFormat ActiveFormat { get; public set; }
    [NullableAttribute("2")]
public HttpContext HttpContext { get; public set; }
    public CancellationToken ConnectionClosed { get; public set; }
    public CancellationToken ConnectionClosedRequested { get; public set; }
    public HttpConnectionContext(string connectionId, string connectionToken, ILogger logger, MetricsContext metricsContext, IDuplexPipe transport, IDuplexPipe application, HttpConnectionDispatcherOptions options, bool useStatefulReconnect);
    [CompilerGeneratedAttribute]
internal CancellationToken get_SendingToken();
    [CompilerGeneratedAttribute]
internal Func`2<PipeWriter, Task> get_NotifyOnReconnect();
    [CompilerGeneratedAttribute]
internal void set_NotifyOnReconnect(Func`2<PipeWriter, Task> value);
    public bool get_UseStatefulReconnect();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public CancellationTokenSource get_Cancellation();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Cancellation(CancellationTokenSource value);
    [CompilerGeneratedAttribute]
public sealed virtual HttpTransportType get_TransportType();
    [CompilerGeneratedAttribute]
public void set_TransportType(HttpTransportType value);
    [CompilerGeneratedAttribute]
internal long get_StartTimestamp();
    [CompilerGeneratedAttribute]
internal void set_StartTimestamp(long value);
    [CompilerGeneratedAttribute]
public SemaphoreSlim get_WriteLock();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal Task get_DisposeAndRemoveTask();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_DisposeAndRemoveTask(Task value);
    [CompilerGeneratedAttribute]
internal Nullable`1<AsyncServiceScope> get_ServiceScope();
    [CompilerGeneratedAttribute]
internal void set_ServiceScope(Nullable`1<AsyncServiceScope> value);
    [CompilerGeneratedAttribute]
internal DateTimeOffset get_AuthenticationExpiration();
    [CompilerGeneratedAttribute]
internal void set_AuthenticationExpiration(DateTimeOffset value);
    internal bool get_IsAuthenticationExpirationEnabled();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Task`1<bool> get_TransportTask();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TransportTask(Task`1<bool> value);
    [CompilerGeneratedAttribute]
public Task get_PreviousPollTask();
    [CompilerGeneratedAttribute]
public void set_PreviousPollTask(Task value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Task get_ApplicationTask();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ApplicationTask(Task value);
    [CompilerGeneratedAttribute]
public TimeSpan get_LastSeenTicks();
    [CompilerGeneratedAttribute]
public void set_LastSeenTicks(TimeSpan value);
    public Nullable`1<TimeSpan> get_LastSeenTicksIfInactive();
    [CompilerGeneratedAttribute]
public HttpConnectionStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(HttpConnectionStatus value);
    [CompilerGeneratedAttribute]
public virtual string get_ConnectionId();
    [CompilerGeneratedAttribute]
public virtual void set_ConnectionId(string value);
    [CompilerGeneratedAttribute]
public MetricsContext get_MetricsContext();
    [CompilerGeneratedAttribute]
internal string get_ConnectionToken();
    [CompilerGeneratedAttribute]
internal void set_ConnectionToken(string value);
    [CompilerGeneratedAttribute]
public virtual IFeatureCollection get_Features();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ClaimsPrincipal get_User();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_User(ClaimsPrincipal value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasInherentKeepAlive();
    [CompilerGeneratedAttribute]
public void set_HasInherentKeepAlive(bool value);
    public virtual IDictionary`2<object, object> get_Items();
    public virtual void set_Items(IDictionary`2<object, object> value);
    public IDuplexPipe get_Application();
    public void set_Application(IDuplexPipe value);
    internal PipeWriterStream get_ApplicationStream();
    [CompilerGeneratedAttribute]
public virtual IDuplexPipe get_Transport();
    [CompilerGeneratedAttribute]
public virtual void set_Transport(IDuplexPipe value);
    [CompilerGeneratedAttribute]
public sealed virtual TransferFormat get_SupportedFormats();
    [CompilerGeneratedAttribute]
public void set_SupportedFormats(TransferFormat value);
    [CompilerGeneratedAttribute]
public sealed virtual TransferFormat get_ActiveFormat();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ActiveFormat(TransferFormat value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual HttpContext get_HttpContext();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_HttpContext(HttpContext value);
    [CompilerGeneratedAttribute]
public virtual CancellationToken get_ConnectionClosed();
    [CompilerGeneratedAttribute]
public virtual void set_ConnectionClosed(CancellationToken value);
    [CompilerGeneratedAttribute]
public sealed virtual CancellationToken get_ConnectionClosedRequested();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectionClosedRequested(CancellationToken value);
    public virtual void Abort();
    public sealed virtual void OnHeartbeat(Action`1<object> action, object state);
    public void TickHeartbeat();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionContext/<DisposeAsync>d__136")]
public Task DisposeAsync(bool closeGracefully);
    internal bool TryActivatePersistentConnection(ConnectionDelegate connectionDelegate, IHttpTransport transport, Task currentRequestTask, HttpContext context, ILogger dispatcherLogger);
    public bool TryActivateLongPollingConnection(ConnectionDelegate connectionDelegate, HttpContext nonClonedContext, TimeSpan pollTimeout, Task currentRequestTask, ILoggerFactory loggerFactory, ILogger dispatcherLogger);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionContext/<CancelPreviousPoll>d__141")]
internal Task`1<bool> CancelPreviousPoll(HttpContext context);
    internal SetTransportState TrySetTransport(HttpTransportType transportType, HttpConnectionsMetrics metrics);
    public void MarkInactive();
    internal void StartSendCancellation();
    internal void TryCancelSend(TimeSpan currentTicks);
    internal void StopSendCancellation();
    public sealed virtual void RequestClose();
    public sealed virtual void DisableReconnect();
    public sealed virtual void OnReconnected(Func`2<PipeWriter, Task> notifyOnReconnect);
    internal bool ClientReconnectExpected();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher : object {
    public HttpConnectionDispatcher(HttpConnectionManager manager, ILoggerFactory loggerFactory, HttpConnectionsMetrics metrics);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher/<ExecuteAsync>d__12")]
public Task ExecuteAsync(HttpContext context, HttpConnectionDispatcherOptions options, ConnectionDelegate connectionDelegate);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher/<ExecuteNegotiateAsync>d__13")]
public Task ExecuteNegotiateAsync(HttpContext context, HttpConnectionDispatcherOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager : object {
    public HttpConnectionManager(ILoggerFactory loggerFactory, IHostApplicationLifetime appLifetime, IOptions`1<ConnectionOptions> connectionOptions, HttpConnectionsMetrics metrics);
    public void Start();
    internal bool TryGetConnection(string id, HttpConnectionContext& connection);
    internal HttpConnectionContext CreateConnection();
    internal HttpConnectionContext CreateConnection(HttpConnectionDispatcherOptions options, int negotiateVersion, bool useStatefulReconnect);
    public void RemoveConnection(string id, HttpTransportType transportType, HttpConnectionStopStatus status);
    public void Scan();
    public void CloseConnections();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager/<DisposeAndRemoveAsync>d__17")]
internal Task DisposeAndRemoveAsync(HttpConnectionContext connection, bool closeGracefully, HttpConnectionStopStatus status);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionsEventSource : EventSource {
    public static HttpConnectionsEventSource Log;
    internal HttpConnectionsEventSource(string eventSourceName);
    [NonEventAttribute]
public void ConnectionStop(string connectionId, long startTimestamp, long currentTimestamp);
    [EventAttribute("1")]
public void ConnectionStart(string connectionId);
    [EventAttribute("3")]
public void ConnectionTimedOut(string connectionId);
    protected virtual void OnEventCommand(EventCommandEventArgs command);
}
internal class Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionsMetrics : object {
    [NullableAttribute("1")]
public static string MeterName;
    [NullableContextAttribute("1")]
public HttpConnectionsMetrics(IMeterFactory meterFactory);
    public void ConnectionStop(MetricsContext& metricsContext, HttpTransportType transportType, HttpConnectionStopStatus status, long startTimestamp, long currentTimestamp);
    public void ConnectionTransportStart(MetricsContext& metricsContext, HttpTransportType transportType);
    public void TransportStop(MetricsContext& metricsContext, HttpTransportType transportType);
    public sealed virtual void Dispose();
    public MetricsContext CreateContext();
}
internal enum Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionStatus : Enum {
    public int value__;
    public static HttpConnectionStatus Inactive;
    public static HttpConnectionStatus Active;
    public static HttpConnectionStatus Disposed;
}
internal enum Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionStopStatus : Enum {
    public int value__;
    public static HttpConnectionStopStatus NormalClosure;
    public static HttpConnectionStopStatus Timeout;
    public static HttpConnectionStopStatus AppShutdown;
}
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.Http.Connections.Internal.MetricsContext : ValueType {
    [CompilerGeneratedAttribute]
private bool <ConnectionDurationEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CurrentConnectionsCounterEnabled>k__BackingField;
    public bool ConnectionDurationEnabled { get; }
    public bool CurrentConnectionsCounterEnabled { get; }
    public MetricsContext(bool connectionDurationEnabled, bool currentConnectionsCounterEnabled);
    [CompilerGeneratedAttribute]
public bool get_ConnectionDurationEnabled();
    [CompilerGeneratedAttribute]
public bool get_CurrentConnectionsCounterEnabled();
}
[NullableContextAttribute("1")]
internal interface Microsoft.AspNetCore.Http.Connections.Internal.Transports.IHttpTransport {
    public abstract virtual Task`1<bool> ProcessRequestAsync(HttpContext context, CancellationToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingServerTransport : object {
    public LongPollingServerTransport(CancellationToken timeoutToken, PipeReader application, ILoggerFactory loggerFactory);
    public LongPollingServerTransport(CancellationToken timeoutToken, PipeReader application, ILoggerFactory loggerFactory, HttpConnectionContext connection);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingServerTransport/<ProcessRequestAsync>d__6")]
public sealed virtual Task`1<bool> ProcessRequestAsync(HttpContext context, CancellationToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Http.Connections.Internal.Transports.ServerSentEventsServerTransport : object {
    public ServerSentEventsServerTransport(PipeReader application, string connectionId, ILoggerFactory loggerFactory);
    public ServerSentEventsServerTransport(PipeReader application, string connectionId, HttpConnectionContext connection, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.Transports.ServerSentEventsServerTransport/<ProcessRequestAsync>d__6")]
public sealed virtual Task`1<bool> ProcessRequestAsync(HttpContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsServerTransport : object {
    public WebSocketsServerTransport(WebSocketOptions options, IDuplexPipe application, HttpConnectionContext connection, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsServerTransport/<ProcessRequestAsync>d__7")]
public sealed virtual Task`1<bool> ProcessRequestAsync(HttpContext context, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsServerTransport/<ProcessSocketAsync>d__8")]
public Task ProcessSocketAsync(WebSocket socket);
}
public class Microsoft.AspNetCore.Http.Connections.LongPollingOptions : object {
    public TimeSpan PollTimeout { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_PollTimeout();
    [CompilerGeneratedAttribute]
public void set_PollTimeout(TimeSpan value);
}
public class Microsoft.AspNetCore.Http.Connections.NegotiateMetadata : object {
}
internal static class Microsoft.AspNetCore.Http.Connections.ServerSentEventsMessageFormatter : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.ServerSentEventsMessageFormatter/<WriteMessageAsync>d__3")]
public static Task WriteMessageAsync(ReadOnlySequence`1<byte> payload, Stream output, CancellationToken token);
}
public class Microsoft.AspNetCore.Http.Connections.WebSocketOptions : object {
    public TimeSpan CloseTimeout { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<IList`1<string>, string> SubProtocolSelector { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_CloseTimeout();
    [CompilerGeneratedAttribute]
public void set_CloseTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public Func`2<IList`1<string>, string> get_SubProtocolSelector();
    [CompilerGeneratedAttribute]
public void set_SubProtocolSelector(Func`2<IList`1<string>, string> value);
}
internal static class Microsoft.AspNetCore.Internal.AwaitableThreadPool : object {
    public static Awaitable Yield();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Internal.MemoryBufferWriter : Stream {
    public long Length { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Position { get; public set; }
    public MemoryBufferWriter(int minimumSegmentSize);
    public virtual long get_Length();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public static MemoryBufferWriter Get();
    public static void Return(MemoryBufferWriter writer);
    public void Reset();
    public sealed virtual void Advance(int count);
    [NullableContextAttribute("0")]
public sealed virtual Memory`1<byte> GetMemory(int sizeHint);
    [NullableContextAttribute("0")]
public sealed virtual Span`1<byte> GetSpan(int sizeHint);
    public void CopyTo(IBufferWriter`1<byte> destination);
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    public Byte[] ToArray();
    [NullableContextAttribute("0")]
public void CopyTo(Span`1<byte> span);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void WriteByte(byte value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public virtual void Write(ReadOnlySpan`1<byte> span);
    public WrittenBuffers DetachAndReset();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Internal.TaskCache : object {
    public static Task`1<bool> True;
    public static Task`1<bool> False;
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Internal.ValueTaskExtensions : object {
    [ExtensionAttribute]
public static Task GetAsTask(ValueTask`1& valueTask);
    [ExtensionAttribute]
public static ValueTask GetAsValueTask(ValueTask`1& valueTask);
}
internal static class Microsoft.AspNetCore.Shared.ArgumentNullThrowHelper : object {
    [NullableContextAttribute("2")]
public static void ThrowIfNull(object argument, string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Shared.ArgumentOutOfRangeThrowHelper : object {
    [NullableContextAttribute("2")]
public static void ThrowIfZero(int value, string paramName);
    [NullableContextAttribute("2")]
public static void ThrowIfNegative(int value, string paramName);
    [NullableContextAttribute("2")]
public static void ThrowIfNegative(long value, string paramName);
    [NullableContextAttribute("2")]
public static void ThrowIfNegativeOrZero(int value, string paramName);
    public static void ThrowIfGreaterThan(T value, T other, string paramName);
    public static void ThrowIfGreaterThanOrEqual(T value, T other, string paramName);
    public static void ThrowIfLessThan(T value, T other, string paramName);
    public static void ThrowIfLessThanOrEqual(T value, T other, string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ConnectionsDependencyInjectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddConnections(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddConnections(IServiceCollection services, Action`1<ConnectionOptions> options);
}
internal static class Microsoft.Extensions.Internal.NonCapturingTimer : object {
    [NullableContextAttribute("1")]
public static Timer Create(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);
}
internal static class Microsoft.Extensions.Internal.SecurityHelper : object {
    [NullableContextAttribute("2")]
public static ClaimsPrincipal MergeUserPrincipal(ClaimsPrincipal existingPrincipal, ClaimsPrincipal additionalPrincipal);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Extensions.Internal.WebEncoders : object {
    public static Byte[] Base64UrlDecode(string input);
    public static Byte[] Base64UrlDecode(string input, int offset, int count);
    public static Byte[] Base64UrlDecode(string input, int offset, Char[] buffer, int bufferOffset, int count);
    public static int GetArraySizeRequiredToDecode(int count);
    public static string Base64UrlEncode(Byte[] input);
    public static string Base64UrlEncode(Byte[] input, int offset, int count);
    public static int Base64UrlEncode(Byte[] input, int offset, Char[] output, int outputOffset, int count);
    public static int GetArraySizeRequiredToEncode(int count);
    [NullableContextAttribute("0")]
[SkipLocalsInitAttribute]
public static string Base64UrlEncode(ReadOnlySpan`1<byte> input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Extensions.WebEncoders.Sources.EncoderResources : object {
    internal static string WebEncoders_InvalidCountOffsetOrLength;
    internal static string WebEncoders_MalformedInput;
    internal static string FormatWebEncoders_InvalidCountOffsetOrLength(object p0, object p1, object p2);
    internal static string FormatWebEncoders_MalformedInput(object p0);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.IO.Pipelines.DuplexPipe : object {
    public PipeReader Input { get; }
    public PipeWriter Output { get; }
    public DuplexPipe(PipeReader reader, PipeWriter writer);
    [CompilerGeneratedAttribute]
public sealed virtual PipeReader get_Input();
    [CompilerGeneratedAttribute]
public sealed virtual PipeWriter get_Output();
    public static DuplexPipePair CreateConnectionPair(PipeOptions inputOptions, PipeOptions outputOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.IO.Pipelines.PipeWriterStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public PipeWriterStream(PipeWriter pipeWriter);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> source, CancellationToken cancellationToken);
    public void Reset();
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("System.IO.Pipelines.PipeWriterStream/<<WriteCoreAsync>g__WriteSlowAsync|21_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask <WriteCoreAsync>g__WriteSlowAsync|21_0(ValueTask`1<FlushResult> flushTask);
}
[ExtensionAttribute]
internal static class System.IO.StreamExtensions : object {
    [ExtensionAttribute]
public static ValueTask WriteAsync(Stream stream, ReadOnlySequence`1<byte> buffer, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class System.Net.WebSockets.WebSocketExtensions : object {
    [ExtensionAttribute]
public static ValueTask SendAsync(WebSocket webSocket, ReadOnlySequence`1<byte> buffer, WebSocketMessageType webSocketMessageType, CancellationToken cancellationToken);
}
