[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.CertificateForwardingBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IApplicationBuilder UseCertificateForwarding(IApplicationBuilder app);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.ForwardedHeadersExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseForwardedHeaders(IApplicationBuilder builder);
    [ExtensionAttribute]
public static IApplicationBuilder UseForwardedHeaders(IApplicationBuilder builder, ForwardedHeadersOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Builder.ForwardedHeadersOptions : object {
    public string ForwardedForHeaderName { get; public set; }
    public string ForwardedHostHeaderName { get; public set; }
    public string ForwardedProtoHeaderName { get; public set; }
    public string ForwardedPrefixHeaderName { get; public set; }
    public string OriginalForHeaderName { get; public set; }
    public string OriginalHostHeaderName { get; public set; }
    public string OriginalProtoHeaderName { get; public set; }
    public string OriginalPrefixHeaderName { get; public set; }
    public ForwardedHeaders ForwardedHeaders { get; public set; }
    public Nullable`1<int> ForwardLimit { get; public set; }
    public IList`1<IPAddress> KnownProxies { get; }
    public IList`1<IPNetwork> KnownNetworks { get; }
    public IList`1<string> AllowedHosts { get; public set; }
    public bool RequireHeaderSymmetry { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ForwardedForHeaderName();
    [CompilerGeneratedAttribute]
public void set_ForwardedForHeaderName(string value);
    [CompilerGeneratedAttribute]
public string get_ForwardedHostHeaderName();
    [CompilerGeneratedAttribute]
public void set_ForwardedHostHeaderName(string value);
    [CompilerGeneratedAttribute]
public string get_ForwardedProtoHeaderName();
    [CompilerGeneratedAttribute]
public void set_ForwardedProtoHeaderName(string value);
    [CompilerGeneratedAttribute]
public string get_ForwardedPrefixHeaderName();
    [CompilerGeneratedAttribute]
public void set_ForwardedPrefixHeaderName(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalForHeaderName();
    [CompilerGeneratedAttribute]
public void set_OriginalForHeaderName(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalHostHeaderName();
    [CompilerGeneratedAttribute]
public void set_OriginalHostHeaderName(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalProtoHeaderName();
    [CompilerGeneratedAttribute]
public void set_OriginalProtoHeaderName(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalPrefixHeaderName();
    [CompilerGeneratedAttribute]
public void set_OriginalPrefixHeaderName(string value);
    [CompilerGeneratedAttribute]
public ForwardedHeaders get_ForwardedHeaders();
    [CompilerGeneratedAttribute]
public void set_ForwardedHeaders(ForwardedHeaders value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ForwardLimit();
    [CompilerGeneratedAttribute]
public void set_ForwardLimit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IList`1<IPAddress> get_KnownProxies();
    [CompilerGeneratedAttribute]
public IList`1<IPNetwork> get_KnownNetworks();
    [CompilerGeneratedAttribute]
public IList`1<string> get_AllowedHosts();
    [CompilerGeneratedAttribute]
public void set_AllowedHosts(IList`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_RequireHeaderSymmetry();
    [CompilerGeneratedAttribute]
public void set_RequireHeaderSymmetry(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.HttpMethodOverrideExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseHttpMethodOverride(IApplicationBuilder builder);
    [ExtensionAttribute]
public static IApplicationBuilder UseHttpMethodOverride(IApplicationBuilder builder, HttpMethodOverrideOptions options);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Builder.HttpMethodOverrideOptions : object {
    public string FormFieldName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FormFieldName();
    [CompilerGeneratedAttribute]
public void set_FormFieldName(string value);
}
internal class Microsoft.AspNetCore.HttpOverrides.CertificateForwardingFeature : object {
    public X509Certificate2 ClientCertificate { get; public set; }
    public CertificateForwardingFeature(ILogger logger, StringValues header, CertificateForwardingOptions options);
    public sealed virtual X509Certificate2 get_ClientCertificate();
    public sealed virtual void set_ClientCertificate(X509Certificate2 value);
    public sealed virtual Task`1<X509Certificate2> GetClientCertificateAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.HttpOverrides.CertificateForwardingMiddleware : object {
    public CertificateForwardingMiddleware(RequestDelegate next, ILoggerFactory loggerFactory, IOptions`1<CertificateForwardingOptions> options);
    public Task Invoke(HttpContext httpContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.HttpOverrides.CertificateForwardingOptions : object {
    public Func`2<string, X509Certificate2> HeaderConverter;
    public string CertificateHeader { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CertificateHeader();
    [CompilerGeneratedAttribute]
public void set_CertificateHeader(string value);
}
[FlagsAttribute]
public enum Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders : Enum {
    public int value__;
    public static ForwardedHeaders None;
    public static ForwardedHeaders XForwardedFor;
    public static ForwardedHeaders XForwardedHost;
    public static ForwardedHeaders XForwardedProto;
    public static ForwardedHeaders XForwardedPrefix;
    public static ForwardedHeaders All;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.AspNetCore.HttpOverrides.ForwardedHeadersDefaults : object {
    public static string XForwardedForHeaderName { get; }
    public static string XForwardedHostHeaderName { get; }
    public static string XForwardedProtoHeaderName { get; }
    public static string XForwardedPrefixHeaderName { get; }
    public static string XOriginalForHeaderName { get; }
    public static string XOriginalHostHeaderName { get; }
    public static string XOriginalProtoHeaderName { get; }
    public static string XOriginalPrefixHeaderName { get; }
    [CompilerGeneratedAttribute]
public static string get_XForwardedForHeaderName();
    [CompilerGeneratedAttribute]
public static string get_XForwardedHostHeaderName();
    [CompilerGeneratedAttribute]
public static string get_XForwardedProtoHeaderName();
    [CompilerGeneratedAttribute]
public static string get_XForwardedPrefixHeaderName();
    [CompilerGeneratedAttribute]
public static string get_XOriginalForHeaderName();
    [CompilerGeneratedAttribute]
public static string get_XOriginalHostHeaderName();
    [CompilerGeneratedAttribute]
public static string get_XOriginalProtoHeaderName();
    [CompilerGeneratedAttribute]
public static string get_XOriginalPrefixHeaderName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.HttpOverrides.ForwardedHeadersMiddleware : object {
    public ForwardedHeadersMiddleware(RequestDelegate next, ILoggerFactory loggerFactory, IOptions`1<ForwardedHeadersOptions> options);
    public Task Invoke(HttpContext context);
    public void ApplyForwarders(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.HttpOverrides.HttpMethodOverrideMiddleware : object {
    public HttpMethodOverrideMiddleware(RequestDelegate next, IOptions`1<HttpMethodOverrideOptions> options);
    public Task Invoke(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.HttpOverrides.IPNetwork : object {
    public IPAddress Prefix { get; }
    public int PrefixLength { get; }
    public IPNetwork(IPAddress prefix, int prefixLength);
    [CompilerGeneratedAttribute]
public IPAddress get_Prefix();
    [CompilerGeneratedAttribute]
public int get_PrefixLength();
    public bool Contains(IPAddress address);
    [NullableContextAttribute("0")]
public static IPNetwork Parse(ReadOnlySpan`1<char> networkSpan);
    [NullableContextAttribute("0")]
public static bool TryParse(ReadOnlySpan`1<char> networkSpan, IPNetwork& network);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.CertificateForwardingServiceExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IServiceCollection AddCertificateForwarding(IServiceCollection services, Action`1<CertificateForwardingOptions> configure);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.Logging.LoggingExtensions : object {
    [ExtensionAttribute]
[LoggerMessageAttribute("0", "3", "Could not read certificate from header.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void NoCertificate(ILogger logger, Exception exception);
}
