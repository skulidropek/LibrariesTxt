[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.ResponseCachingExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IApplicationBuilder UseResponseCaching(IApplicationBuilder app);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.ResponseCaching.CachedResponse : object {
    public DateTimeOffset Created { get; public set; }
    public int StatusCode { get; public set; }
    public IHeaderDictionary Headers { get; public set; }
    public CachedResponseBody Body { get; public set; }
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
public IHeaderDictionary get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IHeaderDictionary value);
    [CompilerGeneratedAttribute]
public CachedResponseBody get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(CachedResponseBody value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.ResponseCaching.CachedResponseBody : object {
    public List`1<Byte[]> Segments { get; }
    public long Length { get; }
    public CachedResponseBody(List`1<Byte[]> segments, long length);
    [CompilerGeneratedAttribute]
public List`1<Byte[]> get_Segments();
    [CompilerGeneratedAttribute]
public long get_Length();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.ResponseCaching.CachedResponseBody/<CopyToAsync>d__7")]
public Task CopyToAsync(PipeWriter destination, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.ResponseCaching.CachedVaryByRules : object {
    public string VaryByKeyPrefix { get; public set; }
    public StringValues Headers { get; public set; }
    public StringValues QueryKeys { get; public set; }
    [CompilerGeneratedAttribute]
public string get_VaryByKeyPrefix();
    [CompilerGeneratedAttribute]
public void set_VaryByKeyPrefix(string value);
    [CompilerGeneratedAttribute]
public StringValues get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(StringValues value);
    [CompilerGeneratedAttribute]
public StringValues get_QueryKeys();
    [CompilerGeneratedAttribute]
public void set_QueryKeys(StringValues value);
}
internal static class Microsoft.AspNetCore.ResponseCaching.CacheEntryHelpers : object {
    [NullableContextAttribute("1")]
internal static long EstimateCachedResponseSize(CachedResponse cachedResponse);
    [NullableContextAttribute("2")]
internal static long EstimateCachedVaryByRulesySize(CachedVaryByRules cachedVaryByRules);
    internal static long EstimateStringValuesSize(StringValues stringValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.ResponseCaching.FastGuid : object {
    internal long IdValue { get; }
    internal string IdString { get; }
    internal FastGuid(long id);
    [CompilerGeneratedAttribute]
internal long get_IdValue();
    internal string get_IdString();
    internal static FastGuid NewGuid();
}
[NullableContextAttribute("1")]
internal interface Microsoft.AspNetCore.ResponseCaching.IResponseCache {
    public abstract virtual IResponseCacheEntry Get(string key);
    public abstract virtual void Set(string key, IResponseCacheEntry entry, TimeSpan validFor);
}
internal interface Microsoft.AspNetCore.ResponseCaching.IResponseCacheEntry {
}
[NullableContextAttribute("1")]
internal interface Microsoft.AspNetCore.ResponseCaching.IResponseCachingKeyProvider {
    public abstract virtual string CreateBaseKey(ResponseCachingContext context);
    public abstract virtual string CreateStorageVaryByKey(ResponseCachingContext context);
    public abstract virtual IEnumerable`1<string> CreateLookupVaryByKeys(ResponseCachingContext context);
}
[NullableContextAttribute("1")]
internal interface Microsoft.AspNetCore.ResponseCaching.IResponseCachingPolicyProvider {
    public abstract virtual bool AttemptResponseCaching(ResponseCachingContext context);
    public abstract virtual bool AllowCacheLookup(ResponseCachingContext context);
    public abstract virtual bool AllowCacheStorage(ResponseCachingContext context);
    public abstract virtual bool IsResponseCacheable(ResponseCachingContext context);
    public abstract virtual bool IsCachedEntryFresh(ResponseCachingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.ResponseCaching.LoggerExtensions : object {
    [ExtensionAttribute]
[LoggerMessageAttribute("1", "1", "The request cannot be served from cache because it uses the HTTP method: {Method}.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void RequestMethodNotCacheable(ILogger logger, string method);
    [ExtensionAttribute]
[LoggerMessageAttribute("2", "1", "The request cannot be served from cache because it contains an 'Authorization' header.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void RequestWithAuthorizationNotCacheable(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("3", "1", "The request cannot be served from cache because it contains a 'no-cache' cache directive.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void RequestWithNoCacheNotCacheable(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("4", "1", "The request cannot be served from cache because it contains a 'no-cache' pragma directive.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void RequestWithPragmaNoCacheNotCacheable(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("5", "1", "Adding a minimum freshness requirement of {Duration} specified by the 'min-fresh' cache directive.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void ExpirationMinFreshAdded(ILogger logger, TimeSpan duration);
    [ExtensionAttribute]
[LoggerMessageAttribute("6", "1", "The age of the entry is {Age} and has exceeded the maximum age for shared caches of {SharedMaxAge} specified by the 's-maxage' cache directive.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void ExpirationSharedMaxAgeExceeded(ILogger logger, TimeSpan age, TimeSpan sharedMaxAge);
    [ExtensionAttribute]
[LoggerMessageAttribute("7", "1", "The age of the entry is {Age} and has exceeded the maximum age of {MaxAge} specified by the 'max-age' cache directive. It must be revalidated because the 'must-revalidate' or 'proxy-revalidate' cache directive is specified.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void ExpirationMustRevalidate(ILogger logger, TimeSpan age, TimeSpan maxAge);
    [ExtensionAttribute]
[LoggerMessageAttribute("8", "1", "The age of the entry is {Age} and has exceeded the maximum age of {MaxAge} specified by the 'max-age' cache directive. However, it satisfied the maximum stale allowance of {MaxStale} specified by the 'max-stale' cache directive.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void ExpirationMaxStaleSatisfied(ILogger logger, TimeSpan age, TimeSpan maxAge, TimeSpan maxStale);
    [ExtensionAttribute]
[LoggerMessageAttribute("9", "1", "The age of the entry is {Age} and has exceeded the maximum age of {MaxAge} specified by the 'max-age' cache directive.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void ExpirationMaxAgeExceeded(ILogger logger, TimeSpan age, TimeSpan maxAge);
    [ExtensionAttribute]
[LoggerMessageAttribute("10", "1", "The response time of the entry is {ResponseTime} and has exceeded the expiry date of {Expired} specified by the 'Expires' header.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void ExpirationExpiresExceeded(ILogger logger, DateTimeOffset responseTime, DateTimeOffset expired);
    [ExtensionAttribute]
[LoggerMessageAttribute("11", "1", "Response is not cacheable because it does not contain the 'public' cache directive.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void ResponseWithoutPublicNotCacheable(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("12", "1", "Response is not cacheable because it or its corresponding request contains a 'no-store' cache directive.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void ResponseWithNoStoreNotCacheable(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("13", "1", "Response is not cacheable because it contains a 'no-cache' cache directive.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void ResponseWithNoCacheNotCacheable(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("14", "1", "Response is not cacheable because it contains a 'SetCookie' header.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void ResponseWithSetCookieNotCacheable(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("15", "1", "Response is not cacheable because it contains a '.Vary' header with a value of *.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void ResponseWithVaryStarNotCacheable(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("16", "1", "Response is not cacheable because it contains the 'private' cache directive.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void ResponseWithPrivateNotCacheable(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("17", "1", "Response is not cacheable because its status code {StatusCode} does not indicate success.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void ResponseWithUnsuccessfulStatusCodeNotCacheable(ILogger logger, int statusCode);
    [ExtensionAttribute]
[LoggerMessageAttribute("18", "1", "The 'IfNoneMatch' header of the request contains a value of *.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void NotModifiedIfNoneMatchStar(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("19", "1", "The ETag {ETag} in the 'IfNoneMatch' header matched the ETag of a cached entry.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void NotModifiedIfNoneMatchMatched(ILogger logger, EntityTagHeaderValue etag);
    [ExtensionAttribute]
[LoggerMessageAttribute("20", "1", "The last modified date of {LastModified} is before the date {IfModifiedSince} specified in the 'IfModifiedSince' header.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void NotModifiedIfModifiedSinceSatisfied(ILogger logger, DateTimeOffset lastModified, DateTimeOffset ifModifiedSince);
    [ExtensionAttribute]
[LoggerMessageAttribute("21", "2", "The content requested has not been modified.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void NotModifiedServed(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("22", "2", "Serving response from cache.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void CachedResponseServed(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("23", "2", "No cached response available for this request and the 'only-if-cached' cache directive was specified.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void GatewayTimeoutServed(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("24", "2", "No cached response available for this request.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void NoResponseServed(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("25", "1", "Vary by rules were updated. Headers: {Headers}, Query keys: {QueryKeys}")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void VaryByRulesUpdated(ILogger logger, string headers, string queryKeys);
    [ExtensionAttribute]
[LoggerMessageAttribute("26", "2", "The response has been cached.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void ResponseCached(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("27", "2", "The response could not be cached for this request.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void LogResponseNotCached(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("28", "3", "The response could not be cached for this request because the 'Content-Length' did not match the body length.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void ResponseContentLengthMismatchNotCached(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("29", "1", "The age of the entry is {Age} and has exceeded the maximum age of {MaxAge} specified by the 'max-age' cache directive. However, the 'max-stale' cache directive was specified without an assigned value and a stale response of any age is accepted.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void ExpirationInfiniteMaxStaleSatisfied(ILogger logger, TimeSpan age, TimeSpan maxAge);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.ResponseCaching.MemoryCachedResponse : object {
    public DateTimeOffset Created { get; public set; }
    public int StatusCode { get; public set; }
    public IHeaderDictionary Headers { get; public set; }
    public CachedResponseBody Body { get; public set; }
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
public IHeaderDictionary get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IHeaderDictionary value);
    [CompilerGeneratedAttribute]
public CachedResponseBody get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(CachedResponseBody value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.ResponseCaching.MemoryResponseCache : object {
    internal MemoryResponseCache(IMemoryCache cache);
    public sealed virtual IResponseCacheEntry Get(string key);
    public sealed virtual void Set(string key, IResponseCacheEntry entry, TimeSpan validFor);
}
internal class Microsoft.AspNetCore.ResponseCaching.ResponseCachingContext : object {
    public HttpContext HttpContext { get; }
    public Nullable`1<DateTimeOffset> ResponseTime { get; internal set; }
    public Nullable`1<TimeSpan> CachedEntryAge { get; internal set; }
    public CachedVaryByRules CachedVaryByRules { get; public set; }
    internal ILogger Logger { get; }
    internal bool ShouldCacheResponse { get; internal set; }
    internal string BaseKey { get; internal set; }
    internal string StorageVaryKey { get; internal set; }
    internal TimeSpan CachedResponseValidFor { get; internal set; }
    internal CachedResponse CachedResponse { get; internal set; }
    internal bool ResponseStarted { get; internal set; }
    internal Stream OriginalResponseStream { get; internal set; }
    internal ResponseCachingStream ResponseCachingStream { get; internal set; }
    internal IHeaderDictionary CachedResponseHeaders { get; internal set; }
    internal Nullable`1<DateTimeOffset> ResponseDate { get; internal set; }
    internal Nullable`1<DateTimeOffset> ResponseExpires { get; }
    internal Nullable`1<TimeSpan> ResponseSharedMaxAge { get; }
    internal Nullable`1<TimeSpan> ResponseMaxAge { get; }
    internal ResponseCachingContext(HttpContext httpContext, ILogger logger);
    [CompilerGeneratedAttribute]
public HttpContext get_HttpContext();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_ResponseTime();
    [CompilerGeneratedAttribute]
internal void set_ResponseTime(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_CachedEntryAge();
    [CompilerGeneratedAttribute]
internal void set_CachedEntryAge(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public CachedVaryByRules get_CachedVaryByRules();
    [CompilerGeneratedAttribute]
public void set_CachedVaryByRules(CachedVaryByRules value);
    [CompilerGeneratedAttribute]
internal ILogger get_Logger();
    [CompilerGeneratedAttribute]
internal bool get_ShouldCacheResponse();
    [CompilerGeneratedAttribute]
internal void set_ShouldCacheResponse(bool value);
    [CompilerGeneratedAttribute]
internal string get_BaseKey();
    [CompilerGeneratedAttribute]
internal void set_BaseKey(string value);
    [CompilerGeneratedAttribute]
internal string get_StorageVaryKey();
    [CompilerGeneratedAttribute]
internal void set_StorageVaryKey(string value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_CachedResponseValidFor();
    [CompilerGeneratedAttribute]
internal void set_CachedResponseValidFor(TimeSpan value);
    [CompilerGeneratedAttribute]
internal CachedResponse get_CachedResponse();
    [CompilerGeneratedAttribute]
internal void set_CachedResponse(CachedResponse value);
    [CompilerGeneratedAttribute]
internal bool get_ResponseStarted();
    [CompilerGeneratedAttribute]
internal void set_ResponseStarted(bool value);
    [CompilerGeneratedAttribute]
internal Stream get_OriginalResponseStream();
    [CompilerGeneratedAttribute]
internal void set_OriginalResponseStream(Stream value);
    [CompilerGeneratedAttribute]
internal ResponseCachingStream get_ResponseCachingStream();
    [CompilerGeneratedAttribute]
internal void set_ResponseCachingStream(ResponseCachingStream value);
    [CompilerGeneratedAttribute]
internal IHeaderDictionary get_CachedResponseHeaders();
    [CompilerGeneratedAttribute]
internal void set_CachedResponseHeaders(IHeaderDictionary value);
    internal Nullable`1<DateTimeOffset> get_ResponseDate();
    internal void set_ResponseDate(Nullable`1<DateTimeOffset> value);
    internal Nullable`1<DateTimeOffset> get_ResponseExpires();
    internal Nullable`1<TimeSpan> get_ResponseSharedMaxAge();
    internal Nullable`1<TimeSpan> get_ResponseMaxAge();
}
public class Microsoft.AspNetCore.ResponseCaching.ResponseCachingFeature : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] VaryByQueryKeys { get; public set; }
    public sealed virtual String[] get_VaryByQueryKeys();
    public sealed virtual void set_VaryByQueryKeys(String[] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.ResponseCaching.ResponseCachingKeyProvider : object {
    internal ResponseCachingKeyProvider(ObjectPoolProvider poolProvider, IOptions`1<ResponseCachingOptions> options);
    public sealed virtual IEnumerable`1<string> CreateLookupVaryByKeys(ResponseCachingContext context);
    public sealed virtual string CreateBaseKey(ResponseCachingContext context);
    public sealed virtual string CreateStorageVaryByKey(ResponseCachingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.ResponseCaching.ResponseCachingMiddleware : object {
    public ResponseCachingMiddleware(RequestDelegate next, IOptions`1<ResponseCachingOptions> options, ILoggerFactory loggerFactory, ObjectPoolProvider poolProvider);
    internal ResponseCachingMiddleware(RequestDelegate next, IOptions`1<ResponseCachingOptions> options, ILoggerFactory loggerFactory, IResponseCachingPolicyProvider policyProvider, IResponseCache cache, IResponseCachingKeyProvider keyProvider);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.ResponseCaching.ResponseCachingMiddleware/<Invoke>d__10")]
public Task Invoke(HttpContext httpContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.ResponseCaching.ResponseCachingMiddleware/<TryServeCachedResponseAsync>d__11")]
internal Task`1<bool> TryServeCachedResponseAsync(ResponseCachingContext context, IResponseCacheEntry cacheEntry);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.ResponseCaching.ResponseCachingMiddleware/<TryServeFromCacheAsync>d__12")]
internal Task`1<bool> TryServeFromCacheAsync(ResponseCachingContext context);
    internal void FinalizeCacheHeaders(ResponseCachingContext context);
    internal void FinalizeCacheBody(ResponseCachingContext context);
    internal void StartResponse(ResponseCachingContext context);
    internal static void AddResponseCachingFeature(HttpContext context);
    internal void ShimResponseStream(ResponseCachingContext context);
    internal static void RemoveResponseCachingFeature(HttpContext context);
    internal static void UnshimResponseStream(ResponseCachingContext context);
    internal static bool ContentIsNotModified(ResponseCachingContext context);
    internal static StringValues GetOrderCasingNormalizedStringValues(StringValues stringValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.ResponseCaching.ResponseCachingOptions : object {
    public long SizeLimit { get; public set; }
    public long MaximumBodySize { get; public set; }
    public bool UseCaseSensitivePaths { get; public set; }
    internal TimeProvider TimeProvider { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_SizeLimit();
    [CompilerGeneratedAttribute]
public void set_SizeLimit(long value);
    [CompilerGeneratedAttribute]
public long get_MaximumBodySize();
    [CompilerGeneratedAttribute]
public void set_MaximumBodySize(long value);
    [CompilerGeneratedAttribute]
public bool get_UseCaseSensitivePaths();
    [CompilerGeneratedAttribute]
public void set_UseCaseSensitivePaths(bool value);
    [CompilerGeneratedAttribute]
internal TimeProvider get_TimeProvider();
    [CompilerGeneratedAttribute]
internal void set_TimeProvider(TimeProvider value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.ResponseCaching.ResponseCachingPolicyProvider : object {
    public sealed virtual bool AttemptResponseCaching(ResponseCachingContext context);
    public sealed virtual bool AllowCacheLookup(ResponseCachingContext context);
    public sealed virtual bool AllowCacheStorage(ResponseCachingContext context);
    public sealed virtual bool IsResponseCacheable(ResponseCachingContext context);
    public sealed virtual bool IsCachedEntryFresh(ResponseCachingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.ResponseCaching.ResponseCachingStream : Stream {
    internal bool BufferingEnabled { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal ResponseCachingStream(Stream innerStream, long maxBufferSize, int segmentSize, Action startResponseCallback);
    [CompilerGeneratedAttribute]
internal bool get_BufferingEnabled();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    internal CachedResponseBody GetCachedResponseBody();
    internal void DisableBuffering();
    public virtual void SetLength(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void Flush();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.ResponseCaching.ResponseCachingStream/<FlushAsync>d__26")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.ResponseCaching.ResponseCachingStream/<WriteAsync>d__29")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.ResponseCaching.ResponseCachingStream/<WriteAsync>d__30")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
}
internal static class Microsoft.AspNetCore.ResponseCaching.StreamUtilities : object {
    internal static int BodySegmentSize { get; internal set; }
    [CompilerGeneratedAttribute]
internal static int get_BodySegmentSize();
    [CompilerGeneratedAttribute]
internal static void set_BodySegmentSize(int value);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.ResponseCaching.StringBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static StringBuilder AppendUpperInvariant(StringBuilder builder, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.WriteStream.SegmentWriteStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal SegmentWriteStream(int segmentSize);
    internal List`1<Byte[]> GetSegments();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public virtual void Write(ReadOnlySpan`1<byte> buffer);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ResponseCachingServicesExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddResponseCaching(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddResponseCaching(IServiceCollection services, Action`1<ResponseCachingOptions> configureOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Threading.Tasks.TaskToApm : object {
    public static IAsyncResult Begin(Task task, AsyncCallback callback, object state);
    public static void End(IAsyncResult asyncResult);
    public static TResult End(IAsyncResult asyncResult);
}
