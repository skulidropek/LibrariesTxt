[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.ResponseCompressionBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IApplicationBuilder UseResponseCompression(IApplicationBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.ResponseCompressionServicesExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddResponseCompression(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddResponseCompression(IServiceCollection services, Action`1<ResponseCompressionOptions> configureOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.ResponseCompression.BrotliCompressionProvider : object {
    public string EncodingName { get; }
    public bool SupportsFlush { get; }
    public BrotliCompressionProvider(IOptions`1<BrotliCompressionProviderOptions> options);
    [CompilerGeneratedAttribute]
public sealed virtual string get_EncodingName();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SupportsFlush();
    public sealed virtual Stream CreateStream(Stream outputStream);
}
public class Microsoft.AspNetCore.ResponseCompression.BrotliCompressionProviderOptions : object {
    public CompressionLevel Level { get; public set; }
    [NullableAttribute("1")]
private BrotliCompressionProviderOptions Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.ResponseCompression.BrotliCompressionProviderOptions>.Value { get; }
    [CompilerGeneratedAttribute]
public CompressionLevel get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(CompressionLevel value);
    private sealed virtual override BrotliCompressionProviderOptions Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.ResponseCompression.BrotliCompressionProviderOptions>.get_Value();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.ResponseCompression.CompressionProviderCollection : Collection`1<ICompressionProvider> {
    public void Add();
    [NullableContextAttribute("1")]
public void Add(Type providerType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.ResponseCompression.CompressionProviderFactory : object {
    private string Microsoft.AspNetCore.ResponseCompression.ICompressionProvider.EncodingName { get; }
    private bool Microsoft.AspNetCore.ResponseCompression.ICompressionProvider.SupportsFlush { get; }
    public CompressionProviderFactory(Type providerType);
    public ICompressionProvider CreateInstance(IServiceProvider serviceProvider);
    private sealed virtual override string Microsoft.AspNetCore.ResponseCompression.ICompressionProvider.get_EncodingName();
    private sealed virtual override bool Microsoft.AspNetCore.ResponseCompression.ICompressionProvider.get_SupportsFlush();
    private sealed virtual override Stream Microsoft.AspNetCore.ResponseCompression.ICompressionProvider.CreateStream(Stream outputStream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.ResponseCompression.GzipCompressionProvider : object {
    public string EncodingName { get; }
    public bool SupportsFlush { get; }
    public GzipCompressionProvider(IOptions`1<GzipCompressionProviderOptions> options);
    [CompilerGeneratedAttribute]
public sealed virtual string get_EncodingName();
    public sealed virtual bool get_SupportsFlush();
    public sealed virtual Stream CreateStream(Stream outputStream);
}
public class Microsoft.AspNetCore.ResponseCompression.GzipCompressionProviderOptions : object {
    public CompressionLevel Level { get; public set; }
    [NullableAttribute("1")]
private GzipCompressionProviderOptions Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.ResponseCompression.GzipCompressionProviderOptions>.Value { get; }
    [CompilerGeneratedAttribute]
public CompressionLevel get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(CompressionLevel value);
    private sealed virtual override GzipCompressionProviderOptions Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.ResponseCompression.GzipCompressionProviderOptions>.get_Value();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.ResponseCompression.ICompressionProvider {
    public string EncodingName { get; }
    public bool SupportsFlush { get; }
    public abstract virtual string get_EncodingName();
    public abstract virtual bool get_SupportsFlush();
    public abstract virtual Stream CreateStream(Stream outputStream);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.ResponseCompression.IResponseCompressionProvider {
    public abstract virtual ICompressionProvider GetCompressionProvider(HttpContext context);
    public abstract virtual bool ShouldCompressResponse(HttpContext context);
    public abstract virtual bool CheckRequestAcceptsCompression(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.ResponseCompression.ResponseCompressionBody : Stream {
    private HttpsCompressionMode Microsoft.AspNetCore.Http.Features.IHttpsCompressionFeature.Mode { get; private set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public Stream Stream { get; }
    public PipeWriter Writer { get; }
    internal ResponseCompressionBody(HttpContext context, IResponseCompressionProvider provider, IHttpResponseBodyFeature innerBodyFeature);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.ResponseCompression.ResponseCompressionBody/<FinishCompressionAsync>d__12")]
internal Task FinishCompressionAsync();
    [CompilerGeneratedAttribute]
private sealed virtual override HttpsCompressionMode Microsoft.AspNetCore.Http.Features.IHttpsCompressionFeature.get_Mode();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpsCompressionFeature.set_Mode(HttpsCompressionMode value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public sealed virtual Stream get_Stream();
    public sealed virtual PipeWriter get_Writer();
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.ResponseCompression.ResponseCompressionBody/<WriteAsync>d__40")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.ResponseCompression.ResponseCompressionBody/<WriteAsync>d__41")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public sealed virtual void DisableBuffering();
    public sealed virtual Task SendFileAsync(string path, long offset, Nullable`1<long> count, CancellationToken cancellation);
    public sealed virtual Task StartAsync(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.ResponseCompression.ResponseCompressionBody/<CompleteAsync>d__48")]
public sealed virtual Task CompleteAsync();
}
public class Microsoft.AspNetCore.ResponseCompression.ResponseCompressionDefaults : object {
    [NullableAttribute("1")]
public static IEnumerable`1<string> MimeTypes;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.ResponseCompression.ResponseCompressionLoggingExtensions : object {
    [ExtensionAttribute]
[LoggerMessageAttribute("1", "1", "No response compression available, the Accept-Encoding header is missing or invalid.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void NoAcceptEncoding(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("2", "1", "No response compression available for HTTPS requests. See ResponseCompressionOptions.EnableForHttps.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void NoCompressionForHttps(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("3", "0", "This request accepts compression.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void RequestAcceptsCompression(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("4", "1", "Response compression disabled due to the {header} header.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void NoCompressionDueToHeader(ILogger logger, string header);
    [ExtensionAttribute]
[LoggerMessageAttribute("5", "1", "Response compression is not enabled for the Content-Type '{header}'.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void NoCompressionForContentType(ILogger logger, string header);
    [ExtensionAttribute]
[LoggerMessageAttribute("6", "0", "Response compression is available for this Content-Type.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void ShouldCompressResponse(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("7", "1", "No matching response compression provider found.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void NoCompressionProvider(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("8", "1", "The response will be compressed with '{provider}'.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void CompressingWith(ILogger logger, string provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.ResponseCompression.ResponseCompressionMiddleware : object {
    public ResponseCompressionMiddleware(RequestDelegate next, IResponseCompressionProvider provider);
    public Task Invoke(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions : object {
    public IEnumerable`1<string> MimeTypes { get; public set; }
    public IEnumerable`1<string> ExcludedMimeTypes { get; public set; }
    public bool EnableForHttps { get; public set; }
    public CompressionProviderCollection Providers { get; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_MimeTypes();
    [CompilerGeneratedAttribute]
public void set_MimeTypes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ExcludedMimeTypes();
    [CompilerGeneratedAttribute]
public void set_ExcludedMimeTypes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_EnableForHttps();
    [CompilerGeneratedAttribute]
public void set_EnableForHttps(bool value);
    [CompilerGeneratedAttribute]
public CompressionProviderCollection get_Providers();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.ResponseCompression.ResponseCompressionProvider : object {
    public ResponseCompressionProvider(IServiceProvider services, IOptions`1<ResponseCompressionOptions> options);
    public virtual ICompressionProvider GetCompressionProvider(HttpContext context);
    public virtual bool ShouldCompressResponse(HttpContext context);
    public sealed virtual bool CheckRequestAcceptsCompression(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Threading.Tasks.TaskToApm : object {
    public static IAsyncResult Begin(Task task, AsyncCallback callback, object state);
    public static void End(IAsyncResult asyncResult);
    public static TResult End(IAsyncResult asyncResult);
}
