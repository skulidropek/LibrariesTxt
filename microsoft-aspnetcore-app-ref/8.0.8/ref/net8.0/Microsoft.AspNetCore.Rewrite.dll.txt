[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.RewriteBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseRewriter(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseRewriter(IApplicationBuilder app, RewriteOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Rewrite.ApacheModRewrite.ApacheModRewriteRule : object {
    public UrlMatch InitialMatch { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<Condition> Conditions { get; }
    public IList`1<UrlAction> Actions { get; }
    public ApacheModRewriteRule(UrlMatch initialMatch, IList`1<Condition> conditions, IList`1<UrlAction> urlActions);
    [CompilerGeneratedAttribute]
public UrlMatch get_InitialMatch();
    [CompilerGeneratedAttribute]
public IList`1<Condition> get_Conditions();
    [CompilerGeneratedAttribute]
public IList`1<UrlAction> get_Actions();
    public sealed virtual void ApplyRule(RewriteContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Rewrite.ApacheModRewrite.Condition : object {
    public Pattern Input { get; }
    public UrlMatch Match { get; }
    public bool OrNext { get; }
    public Condition(Pattern input, UrlMatch match, bool orNext);
    [CompilerGeneratedAttribute]
public Pattern get_Input();
    [CompilerGeneratedAttribute]
public UrlMatch get_Match();
    [CompilerGeneratedAttribute]
public bool get_OrNext();
    public MatchResults Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Rewrite.ApacheModRewrite.ConditionEvaluator : object {
    public static MatchResults Evaluate(IEnumerable`1<Condition> conditions, RewriteContext context, BackReferenceCollection backReferences);
    public static MatchResults Evaluate(IEnumerable`1<Condition> conditions, RewriteContext context, BackReferenceCollection backReferences, bool trackAllCaptures);
}
internal class Microsoft.AspNetCore.Rewrite.ApacheModRewrite.ConditionPatternParser : object {
    [NullableContextAttribute("1")]
public static ParsedModRewriteInput ParseActionCondition(string condition);
}
internal enum Microsoft.AspNetCore.Rewrite.ApacheModRewrite.ConditionType : Enum {
    public int value__;
    public static ConditionType Regex;
    public static ConditionType PropertyTest;
    public static ConditionType StringComp;
    public static ConditionType IntComp;
}
internal class Microsoft.AspNetCore.Rewrite.ApacheModRewrite.CookieActionFactory : object {
    [NullableContextAttribute("1")]
public static ChangeCookieAction Create(string flagValue);
}
internal class Microsoft.AspNetCore.Rewrite.ApacheModRewrite.FileParser : object {
    [NullableContextAttribute("1")]
public static IList`1<IRule> Parse(TextReader input);
}
internal static class Microsoft.AspNetCore.Rewrite.ApacheModRewrite.FlagParser : object {
    [NullableContextAttribute("1")]
public static Flags Parse(string flagString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Rewrite.ApacheModRewrite.Flags : object {
    public IDictionary`2<FlagType, string> FlagDictionary { get; }
    [NullableAttribute("2")]
public string Item { get; public set; }
    public Flags(IDictionary`2<FlagType, string> flags);
    [CompilerGeneratedAttribute]
public IDictionary`2<FlagType, string> get_FlagDictionary();
    public void SetFlag(FlagType flag, string value);
    [NullableContextAttribute("2")]
public bool GetValue(FlagType flag, String& value);
    [NullableContextAttribute("2")]
public string get_Item(FlagType flag);
    [NullableContextAttribute("2")]
public void set_Item(FlagType flag, string value);
    public bool HasFlag(FlagType flag);
}
internal enum Microsoft.AspNetCore.Rewrite.ApacheModRewrite.FlagType : Enum {
    public int value__;
    public static FlagType EscapeBackreference;
    public static FlagType Chain;
    public static FlagType Cookie;
    public static FlagType DiscardPath;
    public static FlagType Env;
    public static FlagType End;
    public static FlagType Forbidden;
    public static FlagType Gone;
    public static FlagType Handler;
    public static FlagType Last;
    public static FlagType Next;
    public static FlagType NoCase;
    public static FlagType NoEscape;
    public static FlagType NoSubReq;
    public static FlagType NoVary;
    public static FlagType Or;
    public static FlagType Proxy;
    public static FlagType PassThrough;
    public static FlagType QSAppend;
    public static FlagType QSDiscard;
    public static FlagType QSLast;
    public static FlagType Redirect;
    public static FlagType Skip;
    public static FlagType Type;
}
internal enum Microsoft.AspNetCore.Rewrite.ApacheModRewrite.OperationType : Enum {
    public int value__;
    public static OperationType None;
    public static OperationType Equal;
    public static OperationType Greater;
    public static OperationType GreaterEqual;
    public static OperationType Less;
    public static OperationType LessEqual;
    public static OperationType NotEqual;
    public static OperationType Directory;
    public static OperationType RegularFile;
    public static OperationType ExistingFile;
    public static OperationType SymbolicLink;
    public static OperationType Size;
    public static OperationType ExistingUrl;
    public static OperationType Executable;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Rewrite.ApacheModRewrite.ParsedModRewriteInput : object {
    public bool Invert { get; public set; }
    public ConditionType ConditionType { get; public set; }
    public OperationType OperationType { get; public set; }
    public string Operand { get; public set; }
    public ParsedModRewriteInput(bool invert, ConditionType conditionType, OperationType operationType, string operand);
    [CompilerGeneratedAttribute]
public bool get_Invert();
    [CompilerGeneratedAttribute]
public void set_Invert(bool value);
    [CompilerGeneratedAttribute]
public ConditionType get_ConditionType();
    [CompilerGeneratedAttribute]
public void set_ConditionType(ConditionType value);
    [CompilerGeneratedAttribute]
public OperationType get_OperationType();
    [CompilerGeneratedAttribute]
public void set_OperationType(OperationType value);
    [CompilerGeneratedAttribute]
public string get_Operand();
    [CompilerGeneratedAttribute]
public void set_Operand(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Rewrite.ApacheModRewrite.RuleBuilder : object {
    internal IList`1<UrlAction> _actions;
    public ApacheModRewriteRule Build();
    public void AddRule(string rule);
    public void AddConditionFromParts(Pattern pattern, ParsedModRewriteInput input, Flags flags);
    public void AddMatch(ParsedModRewriteInput input, Flags flags);
    public void AddAction(Pattern pattern, Flags flags);
}
internal class Microsoft.AspNetCore.Rewrite.ApacheModRewrite.RuleRegexParser : object {
    [NullableContextAttribute("1")]
public static ParsedModRewriteInput ParseRuleRegex(string regex);
}
internal enum Microsoft.AspNetCore.Rewrite.ApacheModRewrite.SegmentType : Enum {
    public int value__;
    public static SegmentType Literal;
    public static SegmentType ServerParameter;
    public static SegmentType ConditionParameter;
    public static SegmentType RuleParameter;
}
internal static class Microsoft.AspNetCore.Rewrite.ApacheModRewrite.ServerVariables : object {
    [NullableContextAttribute("1")]
public static PatternSegment FindServerVariable(string serverVariable, ParserContext context);
}
internal class Microsoft.AspNetCore.Rewrite.ApacheModRewrite.TestStringParser : object {
    [NullableContextAttribute("1")]
public static Pattern Parse(string testString);
}
internal class Microsoft.AspNetCore.Rewrite.ApacheModRewrite.Tokenizer : object {
    [NullableContextAttribute("1")]
public static IList`1<string> Tokenize(string rule);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Rewrite.ApacheModRewriteOptionsExtensions : object {
    [ExtensionAttribute]
public static RewriteOptions AddApacheModRewrite(RewriteOptions options, IFileProvider fileProvider, string filePath);
    [ExtensionAttribute]
public static RewriteOptions AddApacheModRewrite(RewriteOptions options, TextReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Rewrite.BackReferenceCollection : object {
    public string Item { get; }
    public BackReferenceCollection(GroupCollection references);
    public BackReferenceCollection(string reference);
    public string get_Item(int index);
    public void Add(BackReferenceCollection references);
}
internal class Microsoft.AspNetCore.Rewrite.DelegateRule : object {
    [NullableContextAttribute("1")]
public DelegateRule(Action`1<RewriteContext> onApplyRule);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyRule(RewriteContext context);
}
internal enum Microsoft.AspNetCore.Rewrite.IISUrlRewrite.ActionType : Enum {
    public int value__;
    public static ActionType None;
    public static ActionType Rewrite;
    public static ActionType Redirect;
    public static ActionType CustomResponse;
    public static ActionType AbortRequest;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Rewrite.IISUrlRewrite.Condition : object {
    public Pattern Input { get; }
    public UrlMatch Match { get; }
    public Condition(Pattern input, UrlMatch match);
    [CompilerGeneratedAttribute]
public Pattern get_Input();
    [CompilerGeneratedAttribute]
public UrlMatch get_Match();
    public MatchResults Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Rewrite.IISUrlRewrite.ConditionCollection : object {
    public LogicalGrouping Grouping { get; }
    public bool TrackAllCaptures { get; }
    public int Count { get; }
    public Condition Item { get; }
    public ConditionCollection(LogicalGrouping grouping, bool trackAllCaptures);
    [CompilerGeneratedAttribute]
public LogicalGrouping get_Grouping();
    [CompilerGeneratedAttribute]
public bool get_TrackAllCaptures();
    public int get_Count();
    public Condition get_Item(int index);
    public void Add(Condition condition);
    public void AddConditions(IEnumerable`1<Condition> conditions);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<Condition> GetEnumerator();
}
internal static class Microsoft.AspNetCore.Rewrite.IISUrlRewrite.ConditionEvaluator : object {
    [NullableContextAttribute("1")]
public static MatchResults Evaluate(ConditionCollection conditions, RewriteContext context, BackReferenceCollection backReferences);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Rewrite.IISUrlRewrite.IISRewriteMap : object {
    public string Name { get; }
    [NullableAttribute("2")]
public string Item { get; public set; }
    public IISRewriteMap(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    public string get_Item(string key);
    public void set_Item(string key, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Rewrite.IISUrlRewrite.IISRewriteMapCollection : object {
    public int Count { get; }
    [NullableAttribute("2")]
public IISRewriteMap Item { get; }
    public void Add(IISRewriteMap rewriteMap);
    public int get_Count();
    public IISRewriteMap get_Item(string key);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<IISRewriteMap> GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Rewrite.IISUrlRewrite.IISUrlRewriteRule : object {
    [NullableAttribute("2")]
public string Name { get; }
    public UrlMatch InitialMatch { get; }
    [NullableAttribute("2")]
public ConditionCollection Conditions { get; }
    public UrlAction Action { get; }
    public bool Global { get; }
    public IISUrlRewriteRule(string name, UrlMatch initialMatch, ConditionCollection conditions, UrlAction action);
    public IISUrlRewriteRule(string name, UrlMatch initialMatch, ConditionCollection conditions, UrlAction action, bool global);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public UrlMatch get_InitialMatch();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ConditionCollection get_Conditions();
    [CompilerGeneratedAttribute]
public UrlAction get_Action();
    [CompilerGeneratedAttribute]
public bool get_Global();
    public sealed virtual void ApplyRule(RewriteContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Rewrite.IISUrlRewrite.InputParser : object {
    [NullableContextAttribute("2")]
public InputParser(IISRewriteMapCollection rewriteMaps, bool alwaysUseManagedServerVariables);
    public Pattern ParseInputString(string testString);
    public Pattern ParseInputString(string testString, UriMatchPart uriMatchPart);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Rewrite.IISUrlRewrite.InvalidUrlRewriteFormatException : FormatException {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public InvalidUrlRewriteFormatException(XElement element, string message);
    public InvalidUrlRewriteFormatException(XElement element, string message, Exception innerException);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public int get_LinePosition();
}
internal enum Microsoft.AspNetCore.Rewrite.IISUrlRewrite.LogicalGrouping : Enum {
    public int value__;
    public static LogicalGrouping MatchAll;
    public static LogicalGrouping MatchAny;
}
internal enum Microsoft.AspNetCore.Rewrite.IISUrlRewrite.MatchType : Enum {
    public int value__;
    public static MatchType Pattern;
    public static MatchType IsFile;
    public static MatchType IsDirectory;
}
internal enum Microsoft.AspNetCore.Rewrite.IISUrlRewrite.PatternSyntax : Enum {
    public int value__;
    public static PatternSyntax ECMAScript;
    public static PatternSyntax Wildcard;
    public static PatternSyntax ExactMatch;
}
internal enum Microsoft.AspNetCore.Rewrite.IISUrlRewrite.RedirectType : Enum {
    public int value__;
    public static RedirectType Permanent;
    public static RedirectType Found;
    public static RedirectType SeeOther;
    public static RedirectType Temporary;
}
internal static class Microsoft.AspNetCore.Rewrite.IISUrlRewrite.RewriteMapParser : object {
    [NullableContextAttribute("1")]
public static IISRewriteMapCollection Parse(XElement xmlRoot);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Rewrite.IISUrlRewrite.RewriteTags : object {
    public static string Action;
    public static string Add;
    public static string AppendQueryString;
    public static string Conditions;
    public static string Enabled;
    public static string GlobalRules;
    public static string IgnoreCase;
    public static string Input;
    public static string Key;
    public static string LogicalGrouping;
    public static string LogRewrittenUrl;
    public static string Match;
    public static string MatchPattern;
    public static string MatchType;
    public static string Name;
    public static string Negate;
    public static string Pattern;
    public static string PatternSyntax;
    public static string RedirectType;
    public static string Rewrite;
    public static string RewriteMap;
    public static string RewriteMaps;
    public static string Rule;
    public static string Rules;
    public static string StatusCode;
    public static string SubStatusCode;
    public static string StatusDescription;
    public static string StatusReason;
    public static string StopProcessing;
    public static string TrackAllCaptures;
    public static string Type;
    public static string Url;
    public static string Value;
}
internal static class Microsoft.AspNetCore.Rewrite.IISUrlRewrite.ServerVariables : object {
    [NullableContextAttribute("1")]
public static PatternSegment FindServerVariable(string serverVariable, ParserContext context, UriMatchPart uriMatchPart, bool alwaysUseManagedServerVariables);
}
internal class Microsoft.AspNetCore.Rewrite.IISUrlRewrite.UriMatchCondition : Condition {
    [NullableContextAttribute("1")]
public UriMatchCondition(InputParser inputParser, string input, string pattern, UriMatchPart uriMatchPart, bool ignoreCase, bool negate);
}
internal enum Microsoft.AspNetCore.Rewrite.IISUrlRewrite.UriMatchPart : Enum {
    public int value__;
    public static UriMatchPart Full;
    public static UriMatchPart Path;
}
internal class Microsoft.AspNetCore.Rewrite.IISUrlRewrite.UrlRewriteFileParser : object {
    [NullableContextAttribute("1")]
public IList`1<IISUrlRewriteRule> Parse(TextReader reader, bool alwaysUseManagedServerVariables);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Rewrite.IISUrlRewrite.UrlRewriteRuleBuilder : object {
    [NullableAttribute("2")]
public string Name { get; public set; }
    public bool Enabled { get; public set; }
    public bool Global { get; public set; }
    public UriMatchPart UriMatchPart { get; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Global();
    [CompilerGeneratedAttribute]
public void set_Global(bool value);
    public UriMatchPart get_UriMatchPart();
    public IISUrlRewriteRule Build();
    public void AddUrlAction(UrlAction action);
    public void AddUrlMatch(string input, bool ignoreCase, bool negate, PatternSyntax patternSyntax);
    public void ConfigureConditionBehavior(LogicalGrouping logicalGrouping, bool trackAllCaptures);
    public void AddUrlCondition(Condition condition);
    public void AddUrlConditions(IEnumerable`1<Condition> conditions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Rewrite.IISUrlRewriteOptionsExtensions : object {
    [ExtensionAttribute]
public static RewriteOptions AddIISUrlRewrite(RewriteOptions options, IFileProvider fileProvider, string filePath, bool alwaysUseManagedServerVariables);
    [ExtensionAttribute]
public static RewriteOptions AddIISUrlRewrite(RewriteOptions options, TextReader reader, bool alwaysUseManagedServerVariables);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Rewrite.IRule {
    public abstract virtual void ApplyRule(RewriteContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Rewrite.Logging.RewriteMiddlewareLoggingExtensions : object {
    [ExtensionAttribute]
[LoggerMessageAttribute("1", "1", "Request is continuing in applying rules. Current url is {currentUrl}")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void RewriteMiddlewareRequestContinueResults(ILogger logger, string currentUrl);
    [ExtensionAttribute]
[LoggerMessageAttribute("2", "1", "Request is done processing. Location header '{Location}' with status code '{StatusCode}'.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void RewriteMiddlewareRequestResponseComplete(ILogger logger, string location, int statusCode);
    [ExtensionAttribute]
[LoggerMessageAttribute("3", "1", "Request is done applying rules. Url was rewritten to {rewrittenUrl}")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void RewriteMiddlewareRequestStopRules(ILogger logger, string rewrittenUrl);
    [ExtensionAttribute]
[LoggerMessageAttribute("4", "1", "Request did not match current rule '{Name}'.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void UrlRewriteNotMatchedRule(ILogger logger, string name);
    [ExtensionAttribute]
[LoggerMessageAttribute("5", "1", "Request matched current UrlRewriteRule '{Name}'.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void UrlRewriteMatchedRule(ILogger logger, string name);
    [ExtensionAttribute]
[LoggerMessageAttribute("6", "1", "Request matched current ModRewriteRule.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void ModRewriteNotMatchedRule(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("7", "1", "Request matched current ModRewriteRule.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void ModRewriteMatchedRule(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("8", "2", "Request redirected to HTTPS")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void RedirectedToHttps(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("13", "2", "Request redirected to www")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void RedirectedToWww(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("14", "2", "Request redirected to root domain from www subdomain")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void RedirectedToNonWww(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("9", "2", "Request was redirected to {redirectedUrl}")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void RedirectedRequest(ILogger logger, string redirectedUrl);
    [ExtensionAttribute]
[LoggerMessageAttribute("10", "2", "Request was rewritten to {rewrittenUrl}")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void RewrittenRequest(ILogger logger, string rewrittenUrl);
    [ExtensionAttribute]
[LoggerMessageAttribute("11", "1", "Request to {requestedUrl} was aborted")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void AbortedRequest(ILogger logger, string requestedUrl);
    [ExtensionAttribute]
[LoggerMessageAttribute("12", "1", "Request to {requestedUrl} was ended")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void CustomResponse(ILogger logger, string requestedUrl);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Rewrite.MatchResults : object {
    [NullableAttribute("1")]
public static MatchResults EmptySuccess;
    [NullableAttribute("1")]
public static MatchResults EmptyFailure;
    [MemberNotNullWhenAttribute("True", "BackReferences")]
public bool Success { get; }
    public BackReferenceCollection BackReferences { get; }
    public MatchResults(bool success, BackReferenceCollection backReferences);
    [CompilerGeneratedAttribute]
[MemberNotNullWhenAttribute("True", "BackReferences")]
public bool get_Success();
    [CompilerGeneratedAttribute]
public BackReferenceCollection get_BackReferences();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Rewrite.ParserContext : object {
    public string Template;
    public int Index { get; public set; }
    public char Current { get; }
    public ParserContext(string condition);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    public char get_Current();
    public bool Back();
    public bool Next();
    public bool HasNext();
    public void Mark();
    public int GetIndex();
    [NullableContextAttribute("2")]
public string Capture();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Rewrite.Pattern : object {
    public IList`1<PatternSegment> PatternSegments { get; }
    public Pattern(IList`1<PatternSegment> patternSegments);
    [CompilerGeneratedAttribute]
public IList`1<PatternSegment> get_PatternSegments();
    public string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal abstract class Microsoft.AspNetCore.Rewrite.PatternSegment : object {
    [NullableContextAttribute("2")]
public abstract virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.PatternSegments.ConditionMatchSegment : PatternSegment {
    public ConditionMatchSegment(int index);
    [NullableContextAttribute("2")]
public virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.PatternSegments.DateTimeSegment : PatternSegment {
    [NullableContextAttribute("1")]
public DateTimeSegment(string segment);
    [NullableContextAttribute("2")]
public virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReference);
}
internal class Microsoft.AspNetCore.Rewrite.PatternSegments.HeaderSegment : PatternSegment {
    [NullableContextAttribute("1")]
public HeaderSegment(string header);
    [NullableContextAttribute("2")]
public virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.PatternSegments.IISServerVariableSegment : PatternSegment {
    [NullableContextAttribute("1")]
public IISServerVariableSegment(string variableName, Func`1<PatternSegment> fallbackThunk);
    [NullableContextAttribute("2")]
public virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.PatternSegments.IsHttpsModSegment : PatternSegment {
    [NullableContextAttribute("2")]
public virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.PatternSegments.IsHttpsUrlSegment : PatternSegment {
    [NullableContextAttribute("2")]
public virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.PatternSegments.IsIPV6Segment : PatternSegment {
    [NullableContextAttribute("2")]
public virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.PatternSegments.LiteralSegment : PatternSegment {
    [NullableContextAttribute("1")]
public LiteralSegment(string literal);
    [NullableContextAttribute("2")]
public virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.PatternSegments.LocalAddressSegment : PatternSegment {
    [NullableContextAttribute("2")]
public virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.PatternSegments.LocalPortSegment : PatternSegment {
    [NullableContextAttribute("2")]
public virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.PatternSegments.QueryStringSegment : PatternSegment {
    [NullableContextAttribute("2")]
public virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackRefernces, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.PatternSegments.RemoteAddressSegment : PatternSegment {
    [NullableContextAttribute("2")]
public virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.PatternSegments.RemotePortSegment : PatternSegment {
    [NullableContextAttribute("2")]
public virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.PatternSegments.RequestFileNameSegment : PatternSegment {
    [NullableContextAttribute("2")]
public virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.PatternSegments.RequestMethodSegment : PatternSegment {
    [NullableContextAttribute("2")]
public virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.PatternSegments.RewriteMapSegment : PatternSegment {
    [NullableContextAttribute("1")]
public RewriteMapSegment(IISRewriteMap rewriteMap, Pattern pattern);
    [NullableContextAttribute("2")]
public virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.PatternSegments.RuleMatchSegment : PatternSegment {
    public RuleMatchSegment(int index);
    [NullableContextAttribute("2")]
public virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.PatternSegments.SchemeSegment : PatternSegment {
    [NullableContextAttribute("2")]
public virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.PatternSegments.ServerProtocolSegment : PatternSegment {
    [NullableContextAttribute("2")]
public virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.PatternSegments.ToLowerSegment : PatternSegment {
    [NullableContextAttribute("1")]
public ToLowerSegment(Pattern pattern);
    [NullableContextAttribute("2")]
public virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.PatternSegments.UrlDecodeSegment : PatternSegment {
    [NullableContextAttribute("1")]
public UrlDecodeSegment(Pattern pattern);
    [NullableContextAttribute("2")]
public virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.PatternSegments.UrlEncodeSegment : PatternSegment {
    [NullableContextAttribute("1")]
public UrlEncodeSegment(Pattern pattern);
    [NullableContextAttribute("2")]
public virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.PatternSegments.UrlSegment : PatternSegment {
    public UrlSegment(UriMatchPart uriMatchPart);
    [NullableContextAttribute("2")]
public virtual string Evaluate(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Rewrite.RedirectRule : object {
    public Regex InitialMatch { get; }
    public string Replacement { get; }
    public int StatusCode { get; }
    public RedirectRule(string regex, string replacement, int statusCode);
    [CompilerGeneratedAttribute]
public Regex get_InitialMatch();
    [CompilerGeneratedAttribute]
public string get_Replacement();
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    public sealed virtual void ApplyRule(RewriteContext context);
}
internal class Microsoft.AspNetCore.Rewrite.RedirectToHttpsRule : object {
    public Nullable`1<int> SSLPort { get; public set; }
    public int StatusCode { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SSLPort();
    [CompilerGeneratedAttribute]
public void set_SSLPort(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(int value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyRule(RewriteContext context);
}
internal class Microsoft.AspNetCore.Rewrite.RedirectToNonWwwRule : object {
    public RedirectToNonWwwRule(int statusCode);
    [NullableContextAttribute("1")]
public RedirectToNonWwwRule(int statusCode, String[] domains);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyRule(RewriteContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Rewrite.RedirectToWwwHelper : object {
    public static bool IsHostInDomains(HttpRequest request, String[] domains);
    public static void SetRedirect(RewriteContext context, HostString newHost, int statusCode);
}
internal class Microsoft.AspNetCore.Rewrite.RedirectToWwwRule : object {
    public RedirectToWwwRule(int statusCode);
    [NullableContextAttribute("1")]
public RedirectToWwwRule(int statusCode, String[] domains);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyRule(RewriteContext context);
}
internal static class Microsoft.AspNetCore.Rewrite.Resources : object {
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string Error_ChangeEnvironmentNotSupported { get; }
    internal static string Error_CouldNotParseInteger { get; }
    internal static string Error_InputParserIndexOutOfRange { get; }
    internal static string Error_InputParserInvalidInteger { get; }
    internal static string Error_InputParserMissingCloseBrace { get; }
    internal static string Error_InputParserNoBackreference { get; }
    internal static string Error_InputParserUnrecognizedParameter { get; }
    internal static string Error_IntegerMatch_FormatExceptionMessage { get; }
    internal static string Error_InvalidChangeCookieFlag { get; }
    internal static string Error_ModRewriteParseError { get; }
    internal static string Error_ModRewriteGeneralParseError { get; }
    internal static string Error_UrlRewriteParseError { get; }
    internal static string Error_UnsupportedServerVariable { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_Error_ChangeEnvironmentNotSupported();
    internal static string get_Error_CouldNotParseInteger();
    internal static string FormatError_CouldNotParseInteger(object p0);
    internal static string get_Error_InputParserIndexOutOfRange();
    internal static string FormatError_InputParserIndexOutOfRange(object p0, object p1);
    internal static string get_Error_InputParserInvalidInteger();
    internal static string FormatError_InputParserInvalidInteger(object p0, object p1);
    internal static string get_Error_InputParserMissingCloseBrace();
    internal static string FormatError_InputParserMissingCloseBrace(object p0);
    internal static string get_Error_InputParserNoBackreference();
    internal static string FormatError_InputParserNoBackreference(object p0);
    internal static string get_Error_InputParserUnrecognizedParameter();
    internal static string FormatError_InputParserUnrecognizedParameter(object p0, object p1);
    internal static string get_Error_IntegerMatch_FormatExceptionMessage();
    internal static string get_Error_InvalidChangeCookieFlag();
    internal static string FormatError_InvalidChangeCookieFlag(object p0);
    internal static string get_Error_ModRewriteParseError();
    internal static string FormatError_ModRewriteParseError(object p0, object p1);
    internal static string get_Error_ModRewriteGeneralParseError();
    internal static string FormatError_ModRewriteGeneralParseError(object p0);
    internal static string get_Error_UrlRewriteParseError();
    internal static string FormatError_UrlRewriteParseError(object p0, object p1, object p2);
    internal static string get_Error_UnsupportedServerVariable();
    internal static string FormatError_UnsupportedServerVariable(object p0);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Rewrite.RewriteContext : object {
    public HttpContext HttpContext { get; public set; }
    public IFileProvider StaticFileProvider { get; public set; }
    public ILogger Logger { get; public set; }
    public RuleResult Result { get; public set; }
    internal StringBuilder Builder { get; internal set; }
    [CompilerGeneratedAttribute]
public HttpContext get_HttpContext();
    [CompilerGeneratedAttribute]
public void set_HttpContext(HttpContext value);
    [CompilerGeneratedAttribute]
public IFileProvider get_StaticFileProvider();
    [CompilerGeneratedAttribute]
public void set_StaticFileProvider(IFileProvider value);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public RuleResult get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(RuleResult value);
    [CompilerGeneratedAttribute]
internal StringBuilder get_Builder();
    [CompilerGeneratedAttribute]
internal void set_Builder(StringBuilder value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Rewrite.RewriteMiddleware : object {
    public RewriteMiddleware(RequestDelegate next, IWebHostEnvironment hostingEnvironment, ILoggerFactory loggerFactory, IOptions`1<RewriteOptions> options);
    public Task Invoke(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Rewrite.RewriteOptions : object {
    public IList`1<IRule> Rules { get; }
    public IFileProvider StaticFileProvider { get; public set; }
    [NullableAttribute("2")]
internal RequestDelegate BranchedNext { get; internal set; }
    [CompilerGeneratedAttribute]
public IList`1<IRule> get_Rules();
    [CompilerGeneratedAttribute]
public IFileProvider get_StaticFileProvider();
    [CompilerGeneratedAttribute]
public void set_StaticFileProvider(IFileProvider value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal RequestDelegate get_BranchedNext();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_BranchedNext(RequestDelegate value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions : object {
    [ExtensionAttribute]
public static RewriteOptions Add(RewriteOptions options, IRule rule);
    [ExtensionAttribute]
public static RewriteOptions Add(RewriteOptions options, Action`1<RewriteContext> applyRule);
    [ExtensionAttribute]
public static RewriteOptions AddRewrite(RewriteOptions options, string regex, string replacement, bool skipRemainingRules);
    [ExtensionAttribute]
public static RewriteOptions AddRedirect(RewriteOptions options, string regex, string replacement);
    [ExtensionAttribute]
public static RewriteOptions AddRedirect(RewriteOptions options, string regex, string replacement, int statusCode);
    [ExtensionAttribute]
public static RewriteOptions AddRedirectToHttpsPermanent(RewriteOptions options);
    [ExtensionAttribute]
public static RewriteOptions AddRedirectToHttps(RewriteOptions options);
    [ExtensionAttribute]
public static RewriteOptions AddRedirectToHttps(RewriteOptions options, int statusCode);
    [ExtensionAttribute]
public static RewriteOptions AddRedirectToHttps(RewriteOptions options, int statusCode, Nullable`1<int> sslPort);
    [ExtensionAttribute]
public static RewriteOptions AddRedirectToWwwPermanent(RewriteOptions options);
    [ExtensionAttribute]
public static RewriteOptions AddRedirectToWwwPermanent(RewriteOptions options, String[] domains);
    [ExtensionAttribute]
public static RewriteOptions AddRedirectToWww(RewriteOptions options);
    [ExtensionAttribute]
public static RewriteOptions AddRedirectToWww(RewriteOptions options, String[] domains);
    [ExtensionAttribute]
public static RewriteOptions AddRedirectToWww(RewriteOptions options, int statusCode);
    [ExtensionAttribute]
public static RewriteOptions AddRedirectToWww(RewriteOptions options, int statusCode, String[] domains);
    [ExtensionAttribute]
public static RewriteOptions AddRedirectToNonWwwPermanent(RewriteOptions options);
    [ExtensionAttribute]
public static RewriteOptions AddRedirectToNonWwwPermanent(RewriteOptions options, String[] domains);
    [ExtensionAttribute]
public static RewriteOptions AddRedirectToNonWww(RewriteOptions options);
    [ExtensionAttribute]
public static RewriteOptions AddRedirectToNonWww(RewriteOptions options, String[] domains);
    [ExtensionAttribute]
public static RewriteOptions AddRedirectToNonWww(RewriteOptions options, int statusCode);
    [ExtensionAttribute]
public static RewriteOptions AddRedirectToNonWww(RewriteOptions options, int statusCode, String[] domains);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Rewrite.RewriteRule : object {
    public Regex InitialMatch { get; }
    public string Replacement { get; }
    public bool StopProcessing { get; }
    public RewriteRule(string regex, string replacement, bool stopProcessing);
    [CompilerGeneratedAttribute]
public Regex get_InitialMatch();
    [CompilerGeneratedAttribute]
public string get_Replacement();
    [CompilerGeneratedAttribute]
public bool get_StopProcessing();
    public sealed virtual void ApplyRule(RewriteContext context);
}
public enum Microsoft.AspNetCore.Rewrite.RuleResult : Enum {
    public int value__;
    public static RuleResult ContinueRules;
    public static RuleResult EndResponse;
    public static RuleResult SkipRemainingRules;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal abstract class Microsoft.AspNetCore.Rewrite.UrlAction : object {
    protected Pattern Url { get; protected set; }
    [CompilerGeneratedAttribute]
protected Pattern get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(Pattern value);
    public abstract virtual void ApplyAction(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.UrlActions.AbortAction : UrlAction {
    [NullableContextAttribute("2")]
public virtual void ApplyAction(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Rewrite.UrlActions.ChangeCookieAction : UrlAction {
    [NullableAttribute("1")]
public string Name { get; }
    public string Value { get; public set; }
    public string Domain { get; public set; }
    public TimeSpan Lifetime { get; public set; }
    public string Path { get; public set; }
    public bool Secure { get; public set; }
    public bool HttpOnly { get; public set; }
    [NullableContextAttribute("1")]
public ChangeCookieAction(string name);
    [NullableContextAttribute("1")]
internal ChangeCookieAction(string name, Func`1<DateTimeOffset> timeSource);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
public void set_Domain(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Lifetime();
    [CompilerGeneratedAttribute]
public void set_Lifetime(TimeSpan value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public bool get_Secure();
    [CompilerGeneratedAttribute]
public void set_Secure(bool value);
    [CompilerGeneratedAttribute]
public bool get_HttpOnly();
    [CompilerGeneratedAttribute]
public void set_HttpOnly(bool value);
    public virtual void ApplyAction(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Rewrite.UrlActions.CustomResponseAction : UrlAction {
    public int StatusCode { get; }
    public string StatusReason { get; public set; }
    public string StatusDescription { get; public set; }
    public CustomResponseAction(int statusCode);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
public string get_StatusReason();
    [CompilerGeneratedAttribute]
public void set_StatusReason(string value);
    [CompilerGeneratedAttribute]
public string get_StatusDescription();
    [CompilerGeneratedAttribute]
public void set_StatusDescription(string value);
    public virtual void ApplyAction(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.UrlActions.ForbiddenAction : UrlAction {
    [NullableContextAttribute("2")]
public virtual void ApplyAction(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.UrlActions.GoneAction : UrlAction {
    [NullableContextAttribute("2")]
public virtual void ApplyAction(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.UrlActions.NoneAction : UrlAction {
    public RuleResult Result { get; }
    public NoneAction(RuleResult result);
    [CompilerGeneratedAttribute]
public RuleResult get_Result();
    [NullableContextAttribute("2")]
public virtual void ApplyAction(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal class Microsoft.AspNetCore.Rewrite.UrlActions.RedirectAction : UrlAction {
    public int StatusCode { get; }
    public bool QueryStringAppend { get; }
    public bool QueryStringDelete { get; }
    public bool EscapeBackReferences { get; }
    [NullableContextAttribute("1")]
public RedirectAction(int statusCode, Pattern pattern, bool queryStringAppend, bool queryStringDelete, bool escapeBackReferences);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
public bool get_QueryStringAppend();
    [CompilerGeneratedAttribute]
public bool get_QueryStringDelete();
    [CompilerGeneratedAttribute]
public bool get_EscapeBackReferences();
    [NullableContextAttribute("2")]
public virtual void ApplyAction(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Rewrite.UrlActions.RewriteAction : UrlAction {
    public RuleResult Result { get; }
    public bool QueryStringAppend { get; }
    public bool QueryStringDelete { get; }
    public bool EscapeBackReferences { get; }
    public RewriteAction(RuleResult result, Pattern pattern, bool queryStringAppend, bool queryStringDelete, bool escapeBackReferences);
    public RewriteAction(RuleResult result, Pattern pattern, bool queryStringAppend);
    [CompilerGeneratedAttribute]
public RuleResult get_Result();
    [CompilerGeneratedAttribute]
public bool get_QueryStringAppend();
    [CompilerGeneratedAttribute]
public bool get_QueryStringDelete();
    [CompilerGeneratedAttribute]
public bool get_EscapeBackReferences();
    [NullableContextAttribute("2")]
public virtual void ApplyAction(RewriteContext context, BackReferenceCollection ruleBackReferences, BackReferenceCollection conditionBackReferences);
}
internal abstract class Microsoft.AspNetCore.Rewrite.UrlMatch : object {
    protected bool Negate { get; protected set; }
    [CompilerGeneratedAttribute]
protected bool get_Negate();
    [CompilerGeneratedAttribute]
protected void set_Negate(bool value);
    [NullableContextAttribute("1")]
public abstract virtual MatchResults Evaluate(string input, RewriteContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Rewrite.UrlMatches.ExactMatch : UrlMatch {
    public ExactMatch(bool ignoreCase, string input, bool negate);
    public virtual MatchResults Evaluate(string pattern, RewriteContext context);
}
internal class Microsoft.AspNetCore.Rewrite.UrlMatches.FileSizeMatch : UrlMatch {
    public FileSizeMatch(bool negate);
    [NullableContextAttribute("1")]
public virtual MatchResults Evaluate(string input, RewriteContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Rewrite.UrlMatches.IntegerMatch : UrlMatch {
    public IntegerMatch(int value, IntegerOperationType operation);
    public IntegerMatch(string value, IntegerOperationType operation);
    public virtual MatchResults Evaluate(string input, RewriteContext context);
}
internal enum Microsoft.AspNetCore.Rewrite.UrlMatches.IntegerOperationType : Enum {
    public int value__;
    public static IntegerOperationType Equal;
    public static IntegerOperationType Greater;
    public static IntegerOperationType GreaterEqual;
    public static IntegerOperationType Less;
    public static IntegerOperationType LessEqual;
    public static IntegerOperationType NotEqual;
}
internal class Microsoft.AspNetCore.Rewrite.UrlMatches.IsDirectoryMatch : UrlMatch {
    public IsDirectoryMatch(bool negate);
    [NullableContextAttribute("1")]
public virtual MatchResults Evaluate(string pattern, RewriteContext context);
}
internal class Microsoft.AspNetCore.Rewrite.UrlMatches.IsFileMatch : UrlMatch {
    public IsFileMatch(bool negate);
    [NullableContextAttribute("1")]
public virtual MatchResults Evaluate(string pattern, RewriteContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Rewrite.UrlMatches.RegexMatch : UrlMatch {
    public RegexMatch(Regex match, bool negate);
    public virtual MatchResults Evaluate(string pattern, RewriteContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Rewrite.UrlMatches.StringMatch : UrlMatch {
    public StringMatch(string value, StringOperationType operation, bool ignoreCase);
    public virtual MatchResults Evaluate(string input, RewriteContext context);
}
internal enum Microsoft.AspNetCore.Rewrite.UrlMatches.StringOperationType : Enum {
    public int value__;
    public static StringOperationType Equal;
    public static StringOperationType Greater;
    public static StringOperationType GreaterEqual;
    public static StringOperationType Less;
    public static StringOperationType LessEqual;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Routing.RerouteHelper : object {
    internal static string GlobalRouteBuilderKey;
    internal static string UseRoutingKey;
    internal static RequestDelegate Reroute(IApplicationBuilder app, object routeBuilder, RequestDelegate next);
}
