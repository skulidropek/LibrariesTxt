[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Builder.IISServerOptions : object {
    internal long IisMaxRequestSizeLimit;
    public bool AllowSynchronousIO { get; public set; }
    public bool AutomaticAuthentication { get; public set; }
    [NullableAttribute("2")]
public string AuthenticationDisplayName { get; public set; }
    public int MaxRequestBodyBufferSize { get; public set; }
    internal bool ForwardWindowsAuthentication { get; internal set; }
    internal String[] ServerAddresses { get; internal set; }
    public Nullable`1<long> MaxRequestBodySize { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllowSynchronousIO();
    [CompilerGeneratedAttribute]
public void set_AllowSynchronousIO(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutomaticAuthentication();
    [CompilerGeneratedAttribute]
public void set_AutomaticAuthentication(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_AuthenticationDisplayName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_AuthenticationDisplayName(string value);
    [CompilerGeneratedAttribute]
public int get_MaxRequestBodyBufferSize();
    [CompilerGeneratedAttribute]
public void set_MaxRequestBodyBufferSize(int value);
    [CompilerGeneratedAttribute]
internal bool get_ForwardWindowsAuthentication();
    [CompilerGeneratedAttribute]
internal void set_ForwardWindowsAuthentication(bool value);
    [CompilerGeneratedAttribute]
internal String[] get_ServerAddresses();
    [CompilerGeneratedAttribute]
internal void set_ServerAddresses(String[] value);
    public Nullable`1<long> get_MaxRequestBodySize();
    public void set_MaxRequestBodySize(Nullable`1<long> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Hosting.Views.ErrorPage : BaseView {
    public ErrorPageModel Model { get; public set; }
    public ErrorPage(ErrorPageModel model);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.Hosting.Views.ErrorPage/<ExecuteAsync>d__0")]
public virtual Task ExecuteAsync();
    [CompilerGeneratedAttribute]
public ErrorPageModel get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(ErrorPageModel value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Hosting.Views.ErrorPageModel : object {
    public IEnumerable`1<ExceptionDetails> ErrorDetails { get; }
    public bool ShowRuntimeDetails { get; }
    public string RuntimeDisplayName { get; }
    public string RuntimeArchitecture { get; }
    public string ClrVersion { get; }
    public string CurrentAssemblyVesion { get; }
    public string OperatingSystemDescription { get; }
    public ErrorPageModel(IEnumerable`1<ExceptionDetails> errorDetails, bool showRuntimeDetails, string runtimeDisplayName, string runtimeArchitecture, string clrVersion, string currentAssemblyVesion, string operatingSystemDescription);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ExceptionDetails> get_ErrorDetails();
    [CompilerGeneratedAttribute]
public bool get_ShowRuntimeDetails();
    [CompilerGeneratedAttribute]
public string get_RuntimeDisplayName();
    [CompilerGeneratedAttribute]
public string get_RuntimeArchitecture();
    [CompilerGeneratedAttribute]
public string get_ClrVersion();
    [CompilerGeneratedAttribute]
public string get_CurrentAssemblyVesion();
    [CompilerGeneratedAttribute]
public string get_OperatingSystemDescription();
}
internal static class Microsoft.AspNetCore.Hosting.Views.ErrorPageModelBuilder : object {
    [NullableContextAttribute("1")]
public static ErrorPageModel CreateErrorPageModel(IFileProvider contentRootFileProvider, ILogger logger, bool showDetailedErrors, Exception exception);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Hosting.WebHostBuilderIISExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IWebHostBuilder UseIIS(IWebHostBuilder hostBuilder);
}
internal static class Microsoft.AspNetCore.Http.HttpCharacters : object {
    public static bool ContainsInvalidAuthorityChar(ReadOnlySpan`1<byte> span);
    public static int IndexOfInvalidHostChar(ReadOnlySpan`1<char> span);
    public static int IndexOfInvalidTokenChar(ReadOnlySpan`1<char> span);
    public static int IndexOfInvalidTokenChar(ReadOnlySpan`1<byte> span);
    public static int IndexOfInvalidFieldValueChar(ReadOnlySpan`1<char> span);
    public static int IndexOfInvalidFieldValueCharExtended(ReadOnlySpan`1<char> span);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.HttpSys.Internal.Constants : object {
    internal static string HttpScheme;
    internal static string HttpsScheme;
    internal static string Chunked;
    internal static string Close;
    internal static string Zero;
    internal static string SchemeDelimiter;
    internal static string DefaultServerAddress;
    internal static Version V1_0;
    internal static Version V1_1;
    internal static Version V2;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.HttpSys.Internal.CookedUrl : ValueType {
    private HTTP_COOKED_URL _nativeCookedUrl;
    internal CookedUrl(HTTP_COOKED_URL nativeCookedUrl);
    internal string GetFullUrl();
    internal string GetHost();
    internal string GetAbsPath();
    internal string GetQueryString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
[DebuggerTypeProxyAttribute("Microsoft.AspNetCore.HttpSys.Internal.HeaderCollection/HeaderCollectionDebugView")]
internal class Microsoft.AspNetCore.HttpSys.Internal.HeaderCollection : object {
    internal static HashSet`1<string> DisallowedTrailers;
    public bool IsReadOnly { get; internal set; }
    public StringValues Item { get; public set; }
    private StringValues System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.Item { get; private set; }
    public int Count { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<StringValues> Values { get; }
    public Nullable`1<long> ContentLength { get; public set; }
    public HeaderCollection(bool checkTrailers);
    public HeaderCollection(IDictionary`2<string, StringValues> store);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
internal void set_IsReadOnly(bool value);
    public sealed virtual StringValues get_Item(string key);
    public sealed virtual void set_Item(string key, StringValues value);
    private sealed virtual override StringValues System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.get_Item(string key);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.set_Item(string key, StringValues value);
    public sealed virtual int get_Count();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<StringValues> get_Values();
    public sealed virtual Nullable`1<long> get_ContentLength();
    public sealed virtual void set_ContentLength(Nullable`1<long> value);
    public sealed virtual void Add(KeyValuePair`2<string, StringValues> item);
    public sealed virtual void Add(string key, StringValues value);
    public void Append(string key, string value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, StringValues> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, StringValues>> GetEnumerator();
    public IEnumerable`1<string> GetValues(string key);
    public sealed virtual bool Remove(KeyValuePair`2<string, StringValues> item);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, StringValues& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public static void ValidateHeaderCharacters(StringValues headerValues);
    public static void ValidateHeaderCharacters(string headerCharacters);
    [CompilerGeneratedAttribute]
internal static void <ValidateHeaderCharacters>g__Throw|44_0(string headerCharacters, int invalidIndex);
}
internal static class Microsoft.AspNetCore.HttpSys.Internal.HeaderEncoding : object {
    internal static string GetString(Byte* pBytes, int byteCount, bool useLatin1);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.HttpSys.Internal.HeaderParser : object {
    internal static IEnumerable`1<string> Empty;
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.HttpSys.Internal.HeaderParser/<SplitValues>d__1")]
internal static IEnumerable`1<string> SplitValues(StringValues values);
}
internal class Microsoft.AspNetCore.HttpSys.Internal.HeapAllocHandle : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
internal static class Microsoft.AspNetCore.HttpSys.Internal.HttpApiTypes : object {
    internal static int SniPropertySizeInBytes;
    internal static int MaxTimeout;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static String[] HttpVerbs;
}
internal enum Microsoft.AspNetCore.HttpSys.Internal.HttpSysRequestHeader : Enum {
    public int value__;
    public static HttpSysRequestHeader CacheControl;
    public static HttpSysRequestHeader Connection;
    public static HttpSysRequestHeader Date;
    public static HttpSysRequestHeader KeepAlive;
    public static HttpSysRequestHeader Pragma;
    public static HttpSysRequestHeader Trailer;
    public static HttpSysRequestHeader TransferEncoding;
    public static HttpSysRequestHeader Upgrade;
    public static HttpSysRequestHeader Via;
    public static HttpSysRequestHeader Warning;
    public static HttpSysRequestHeader Allow;
    public static HttpSysRequestHeader ContentLength;
    public static HttpSysRequestHeader ContentType;
    public static HttpSysRequestHeader ContentEncoding;
    public static HttpSysRequestHeader ContentLanguage;
    public static HttpSysRequestHeader ContentLocation;
    public static HttpSysRequestHeader ContentMd5;
    public static HttpSysRequestHeader ContentRange;
    public static HttpSysRequestHeader Expires;
    public static HttpSysRequestHeader LastModified;
    public static HttpSysRequestHeader Accept;
    public static HttpSysRequestHeader AcceptCharset;
    public static HttpSysRequestHeader AcceptEncoding;
    public static HttpSysRequestHeader AcceptLanguage;
    public static HttpSysRequestHeader Authorization;
    public static HttpSysRequestHeader Cookie;
    public static HttpSysRequestHeader Expect;
    public static HttpSysRequestHeader From;
    public static HttpSysRequestHeader Host;
    public static HttpSysRequestHeader IfMatch;
    public static HttpSysRequestHeader IfModifiedSince;
    public static HttpSysRequestHeader IfNoneMatch;
    public static HttpSysRequestHeader IfRange;
    public static HttpSysRequestHeader IfUnmodifiedSince;
    public static HttpSysRequestHeader MaxForwards;
    public static HttpSysRequestHeader ProxyAuthorization;
    public static HttpSysRequestHeader Referer;
    public static HttpSysRequestHeader Range;
    public static HttpSysRequestHeader Te;
    public static HttpSysRequestHeader Translate;
    public static HttpSysRequestHeader UserAgent;
}
internal enum Microsoft.AspNetCore.HttpSys.Internal.HttpSysResponseHeader : Enum {
    public int value__;
    public static HttpSysResponseHeader CacheControl;
    public static HttpSysResponseHeader Connection;
    public static HttpSysResponseHeader Date;
    public static HttpSysResponseHeader KeepAlive;
    public static HttpSysResponseHeader Pragma;
    public static HttpSysResponseHeader Trailer;
    public static HttpSysResponseHeader TransferEncoding;
    public static HttpSysResponseHeader Upgrade;
    public static HttpSysResponseHeader Via;
    public static HttpSysResponseHeader Warning;
    public static HttpSysResponseHeader Allow;
    public static HttpSysResponseHeader ContentLength;
    public static HttpSysResponseHeader ContentType;
    public static HttpSysResponseHeader ContentEncoding;
    public static HttpSysResponseHeader ContentLanguage;
    public static HttpSysResponseHeader ContentLocation;
    public static HttpSysResponseHeader ContentMd5;
    public static HttpSysResponseHeader ContentRange;
    public static HttpSysResponseHeader Expires;
    public static HttpSysResponseHeader LastModified;
    public static HttpSysResponseHeader AcceptRanges;
    public static HttpSysResponseHeader Age;
    public static HttpSysResponseHeader ETag;
    public static HttpSysResponseHeader Location;
    public static HttpSysResponseHeader ProxyAuthenticate;
    public static HttpSysResponseHeader RetryAfter;
    public static HttpSysResponseHeader Server;
    public static HttpSysResponseHeader SetCookie;
    public static HttpSysResponseHeader Vary;
    public static HttpSysResponseHeader WwwAuthenticate;
}
internal class Microsoft.AspNetCore.HttpSys.Internal.NativeRequestContext : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<int, ReadOnlyMemory`1<byte>> RequestInfo { get; }
    public ReadOnlySpan`1<long> Timestamps { get; }
    internal HTTP_REQUEST* NativeRequest { get; }
    internal HTTP_REQUEST_V2* NativeRequestV2 { get; }
    internal ulong RequestId { get; internal set; }
    internal ulong ConnectionId { get; }
    internal ulong RawConnectionId { get; }
    internal HTTP_VERB VerbId { get; }
    internal ulong UrlContext { get; }
    internal ushort UnknownHeaderCount { get; }
    internal SslStatus SslStatus { get; }
    internal bool IsHttp2 { get; }
    internal bool IsHttp3 { get; }
    internal UInt32 Size { get; }
    [NullableContextAttribute("1")]
internal NativeRequestContext(MemoryPool`1<byte> memoryPool, Nullable`1<UInt32> bufferSize, ulong requestId, bool useLatin1);
    internal NativeRequestContext(HTTP_REQUEST* request, bool useLatin1);
    public sealed virtual IReadOnlyDictionary`2<int, ReadOnlyMemory`1<byte>> get_RequestInfo();
    public sealed virtual ReadOnlySpan`1<long> get_Timestamps();
    internal HTTP_REQUEST* get_NativeRequest();
    internal HTTP_REQUEST_V2* get_NativeRequestV2();
    internal ulong get_RequestId();
    internal void set_RequestId(ulong value);
    internal ulong get_ConnectionId();
    internal ulong get_RawConnectionId();
    internal HTTP_VERB get_VerbId();
    internal ulong get_UrlContext();
    internal ushort get_UnknownHeaderCount();
    internal SslStatus get_SslStatus();
    internal bool get_IsHttp2();
    internal bool get_IsHttp3();
    internal UInt32 get_Size();
    internal void ReleasePins();
    public sealed virtual bool TryGetTimestamp(HttpSysRequestTimingType timestampType, Int64& timestamp);
    public sealed virtual bool TryGetElapsedTime(HttpSysRequestTimingType startingTimestampType, HttpSysRequestTimingType endingTimestampType, TimeSpan& elapsed);
    public virtual void Dispose();
    [NullableContextAttribute("2")]
internal string GetVerb();
    [NullableContextAttribute("2")]
internal string GetRawUrl();
    internal Span`1<byte> GetRawUrlInBytes();
    internal CookedUrl GetCookedUrl();
    [NullableContextAttribute("1")]
internal Version GetVersion();
    internal bool CheckAuthenticated();
    [NullableContextAttribute("1")]
internal WindowsPrincipal GetUser();
    internal HTTP_SSL_PROTOCOL_INFO GetTlsHandshake();
    internal bool HasKnownHeader(HttpSysRequestHeader header);
    [NullableContextAttribute("2")]
internal string GetKnownHeader(HttpSysRequestHeader header);
    internal void GetUnknownKeys(Span`1<string> destination);
    internal int CountUnknownHeaders();
    [NullableContextAttribute("1")]
internal void GetUnknownHeaders(IDictionary`2<string, StringValues> unknownHeaders);
    [NullableContextAttribute("2")]
internal SocketAddress GetRemoteEndPoint();
    [NullableContextAttribute("2")]
internal SocketAddress GetLocalEndPoint();
    [NullableContextAttribute("1")]
internal UInt32 GetChunks(Int32& dataChunkIndex, UInt32& dataChunkOffset, Byte[] buffer, int offset, int size);
    internal IReadOnlyDictionary`2<int, ReadOnlyMemory`1<byte>> GetRequestInfo();
    [NullableContextAttribute("2")]
internal X509Certificate2 GetClientCertificate();
}
internal static class Microsoft.AspNetCore.HttpSys.Internal.NclUtilities : object {
    internal static bool HasShutdownStarted { get; }
    internal static bool get_HasShutdownStarted();
}
internal static class Microsoft.AspNetCore.HttpSys.Internal.PathNormalizer : object {
    public static int RemoveDotSegments(Span`1<byte> input);
    public static int RemoveDotSegments(Byte* start, Byte* end);
    public static bool ContainsDotSegments(Byte* start, Byte* end);
}
internal static class Microsoft.AspNetCore.HttpSys.Internal.RawUrlHelper : object {
    public static Span`1<byte> GetPath(Span`1<byte> raw);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
[DebuggerTypeProxyAttribute("Microsoft.AspNetCore.HttpSys.Internal.RequestHeaders/RequestHeadersDebugView")]
[GeneratedCodeAttribute("TextTemplatingFileGenerator", "")]
internal class Microsoft.AspNetCore.HttpSys.Internal.RequestHeaders : object {
    public bool IsReadOnly { get; internal set; }
    private StringValues System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.Item { get; private set; }
    public ICollection`1<string> Keys { get; }
    private ICollection`1<StringValues> System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.Values { get; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.IsReadOnly { get; }
    private Nullable`1<long> Microsoft.AspNetCore.Http.IHeaderDictionary.ContentLength { get; private set; }
    public StringValues Item { get; public set; }
    public StringValues Accept { get; public set; }
    public StringValues AcceptCharset { get; public set; }
    public StringValues AcceptEncoding { get; public set; }
    public StringValues AcceptLanguage { get; public set; }
    public StringValues Allow { get; public set; }
    public StringValues Authorization { get; public set; }
    public StringValues CacheControl { get; public set; }
    public StringValues Connection { get; public set; }
    public StringValues ContentEncoding { get; public set; }
    public StringValues ContentLanguage { get; public set; }
    public StringValues ContentLength { get; public set; }
    public StringValues ContentLocation { get; public set; }
    public StringValues ContentMD5 { get; public set; }
    public StringValues ContentRange { get; public set; }
    public StringValues ContentType { get; public set; }
    public StringValues Cookie { get; public set; }
    public StringValues Date { get; public set; }
    public StringValues Expect { get; public set; }
    public StringValues Expires { get; public set; }
    public StringValues From { get; public set; }
    public StringValues Host { get; public set; }
    public StringValues IfMatch { get; public set; }
    public StringValues IfModifiedSince { get; public set; }
    public StringValues IfNoneMatch { get; public set; }
    public StringValues IfRange { get; public set; }
    public StringValues IfUnmodifiedSince { get; public set; }
    public StringValues KeepAlive { get; public set; }
    public StringValues LastModified { get; public set; }
    public StringValues MaxForwards { get; public set; }
    public StringValues Pragma { get; public set; }
    public StringValues ProxyAuthorization { get; public set; }
    public StringValues Range { get; public set; }
    public StringValues Referer { get; public set; }
    public StringValues TE { get; public set; }
    public StringValues Trailer { get; public set; }
    public StringValues TransferEncoding { get; public set; }
    public StringValues Translate { get; public set; }
    public StringValues Upgrade { get; public set; }
    public StringValues UserAgent { get; public set; }
    public StringValues Via { get; public set; }
    public StringValues Warning { get; public set; }
    internal RequestHeaders(NativeRequestContext requestMemoryBlob);
    [CompilerGeneratedAttribute]
public bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
internal void set_IsReadOnly(bool value);
    private sealed virtual override StringValues System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.get_Item(string key);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.set_Item(string key, StringValues value);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.Add(string key, StringValues value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual ICollection`1<string> get_Keys();
    private sealed virtual override ICollection`1<StringValues> System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, StringValues& value);
    internal void ResetFlags();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.Add(KeyValuePair`2<string, StringValues> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.Contains(KeyValuePair`2<string, StringValues> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.get_IsReadOnly();
    private sealed virtual override Nullable`1<long> Microsoft.AspNetCore.Http.IHeaderDictionary.get_ContentLength();
    private sealed virtual override void Microsoft.AspNetCore.Http.IHeaderDictionary.set_ContentLength(Nullable`1<long> value);
    public sealed virtual StringValues get_Item(string key);
    public sealed virtual void set_Item(string key, StringValues value);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.Remove(KeyValuePair`2<string, StringValues> item);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, StringValues>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public IEnumerable`1<string> GetValues(string key);
    public sealed virtual StringValues get_Accept();
    public sealed virtual void set_Accept(StringValues value);
    public sealed virtual StringValues get_AcceptCharset();
    public sealed virtual void set_AcceptCharset(StringValues value);
    public sealed virtual StringValues get_AcceptEncoding();
    public sealed virtual void set_AcceptEncoding(StringValues value);
    public sealed virtual StringValues get_AcceptLanguage();
    public sealed virtual void set_AcceptLanguage(StringValues value);
    public sealed virtual StringValues get_Allow();
    public sealed virtual void set_Allow(StringValues value);
    public sealed virtual StringValues get_Authorization();
    public sealed virtual void set_Authorization(StringValues value);
    public sealed virtual StringValues get_CacheControl();
    public sealed virtual void set_CacheControl(StringValues value);
    public sealed virtual StringValues get_Connection();
    public sealed virtual void set_Connection(StringValues value);
    public sealed virtual StringValues get_ContentEncoding();
    public sealed virtual void set_ContentEncoding(StringValues value);
    public sealed virtual StringValues get_ContentLanguage();
    public sealed virtual void set_ContentLanguage(StringValues value);
    public StringValues get_ContentLength();
    public void set_ContentLength(StringValues value);
    public sealed virtual StringValues get_ContentLocation();
    public sealed virtual void set_ContentLocation(StringValues value);
    public sealed virtual StringValues get_ContentMD5();
    public sealed virtual void set_ContentMD5(StringValues value);
    public sealed virtual StringValues get_ContentRange();
    public sealed virtual void set_ContentRange(StringValues value);
    public sealed virtual StringValues get_ContentType();
    public sealed virtual void set_ContentType(StringValues value);
    public sealed virtual StringValues get_Cookie();
    public sealed virtual void set_Cookie(StringValues value);
    public sealed virtual StringValues get_Date();
    public sealed virtual void set_Date(StringValues value);
    public sealed virtual StringValues get_Expect();
    public sealed virtual void set_Expect(StringValues value);
    public sealed virtual StringValues get_Expires();
    public sealed virtual void set_Expires(StringValues value);
    public sealed virtual StringValues get_From();
    public sealed virtual void set_From(StringValues value);
    public sealed virtual StringValues get_Host();
    public sealed virtual void set_Host(StringValues value);
    public sealed virtual StringValues get_IfMatch();
    public sealed virtual void set_IfMatch(StringValues value);
    public sealed virtual StringValues get_IfModifiedSince();
    public sealed virtual void set_IfModifiedSince(StringValues value);
    public sealed virtual StringValues get_IfNoneMatch();
    public sealed virtual void set_IfNoneMatch(StringValues value);
    public sealed virtual StringValues get_IfRange();
    public sealed virtual void set_IfRange(StringValues value);
    public sealed virtual StringValues get_IfUnmodifiedSince();
    public sealed virtual void set_IfUnmodifiedSince(StringValues value);
    public sealed virtual StringValues get_KeepAlive();
    public sealed virtual void set_KeepAlive(StringValues value);
    public sealed virtual StringValues get_LastModified();
    public sealed virtual void set_LastModified(StringValues value);
    public sealed virtual StringValues get_MaxForwards();
    public sealed virtual void set_MaxForwards(StringValues value);
    public sealed virtual StringValues get_Pragma();
    public sealed virtual void set_Pragma(StringValues value);
    public sealed virtual StringValues get_ProxyAuthorization();
    public sealed virtual void set_ProxyAuthorization(StringValues value);
    public sealed virtual StringValues get_Range();
    public sealed virtual void set_Range(StringValues value);
    public sealed virtual StringValues get_Referer();
    public sealed virtual void set_Referer(StringValues value);
    public sealed virtual StringValues get_TE();
    public sealed virtual void set_TE(StringValues value);
    public sealed virtual StringValues get_Trailer();
    public sealed virtual void set_Trailer(StringValues value);
    public sealed virtual StringValues get_TransferEncoding();
    public sealed virtual void set_TransferEncoding(StringValues value);
    public sealed virtual StringValues get_Translate();
    public sealed virtual void set_Translate(StringValues value);
    public sealed virtual StringValues get_Upgrade();
    public sealed virtual void set_Upgrade(StringValues value);
    public sealed virtual StringValues get_UserAgent();
    public sealed virtual void set_UserAgent(StringValues value);
    public sealed virtual StringValues get_Via();
    public sealed virtual void set_Via(StringValues value);
    public sealed virtual StringValues get_Warning();
    public sealed virtual void set_Warning(StringValues value);
}
internal static class Microsoft.AspNetCore.HttpSys.Internal.RequestUriBuilder : object {
    public static string DecodeAndUnescapePath(Span`1<byte> rawUrlBytes);
}
internal class Microsoft.AspNetCore.HttpSys.Internal.SafeLocalFreeChannelBinding : ChannelBinding {
    public int Size { get; }
    public bool IsInvalid { get; }
    public virtual int get_Size();
    [NullableContextAttribute("1")]
public static SafeLocalFreeChannelBinding LocalAlloc(int cb);
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
internal class Microsoft.AspNetCore.HttpSys.Internal.SafeLocalMemHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal SafeLocalMemHandle(IntPtr existingHandle, bool ownsHandle);
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.AspNetCore.HttpSys.Internal.SafeNativeOverlapped : SafeHandle {
    [NullableAttribute("1")]
internal static SafeNativeOverlapped Zero;
    public bool IsInvalid { get; }
    internal SafeNativeOverlapped(ThreadPoolBoundHandle boundHandle, NativeOverlapped* handle);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.HttpSys.Internal.SocketAddress : object {
    internal static int IPv6AddressSize;
    internal static int IPv4AddressSize;
    internal Byte[] Buffer { get; }
    internal AddressFamily Family { get; }
    internal int Size { get; }
    public SocketAddress(AddressFamily family, int size);
    internal Byte[] get_Buffer();
    internal AddressFamily get_Family();
    internal int get_Size();
    internal int GetPort();
    [NullableContextAttribute("2")]
public virtual bool Equals(object comparand);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
internal IPAddress GetIPAddress();
    public virtual string ToString();
    [NullableContextAttribute("2")]
internal string GetIPAddressString();
}
internal enum Microsoft.AspNetCore.HttpSys.Internal.SslStatus : Enum {
    public byte value__;
    public static SslStatus Insecure;
    public static SslStatus NoClientCert;
    public static SslStatus ClientCert;
}
internal static class Microsoft.AspNetCore.HttpSys.Internal.UnsafeNclNativeMethods : object {
    [NullableContextAttribute("1")]
[LibraryImportAttribute("api-ms-win-core-io-l1-1-0.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.10.36612")]
[SkipLocalsInitAttribute]
internal static UInt32 CancelIoEx(SafeHandle handle, SafeNativeOverlapped overlapped);
    [NullableContextAttribute("1")]
[LibraryImportAttribute("api-ms-win-core-kernel32-legacy-l1-1-0.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.10.36612")]
[SkipLocalsInitAttribute]
internal static bool SetFileCompletionNotificationModes(SafeHandle handle, FileCompletionNotificationModes modes);
    [LibraryImportAttribute("tokenbinding.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.10.36612")]
[SkipLocalsInitAttribute]
public static int TokenBindingVerifyMessage(Byte* tokenBindingMessage, UInt32 tokenBindingMessageSize, Char* keyType, Byte* tlsUnique, UInt32 tlsUniqueSize, HeapAllocHandle& resultList);
    [LibraryImportAttribute("api-ms-win-core-heap-L1-2-0.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.10.36612")]
[SkipLocalsInitAttribute]
internal static IntPtr GetProcessHeap();
    [LibraryImportAttribute("api-ms-win-core-heap-L1-2-0.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.10.36612")]
[SkipLocalsInitAttribute]
internal static bool HeapFree(IntPtr hHeap, UInt32 dwFlags, IntPtr lpMem);
    [CompilerGeneratedAttribute]
internal static UInt32 <CancelIoEx>g____PInvoke|8_0(IntPtr __handle_native, IntPtr __overlapped_native);
    [CompilerGeneratedAttribute]
internal static int <SetFileCompletionNotificationModes>g____PInvoke|9_0(IntPtr __handle_native, FileCompletionNotificationModes __modes_native);
    [CompilerGeneratedAttribute]
internal static int <TokenBindingVerifyMessage>g____PInvoke|11_0(Byte* __tokenBindingMessage_native, UInt32 __tokenBindingMessageSize_native, Char* __keyType_native, Byte* __tlsUnique_native, UInt32 __tlsUniqueSize_native, IntPtr* __resultList_native);
    [CompilerGeneratedAttribute]
internal static IntPtr <GetProcessHeap>g____PInvoke|12_0();
    [CompilerGeneratedAttribute]
internal static int <HeapFree>g____PInvoke|13_0(IntPtr __hHeap_native, UInt32 __dwFlags_native, IntPtr __lpMem_native);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Internal.ValueTaskExtensions : object {
    [ExtensionAttribute]
public static Task GetAsTask(ValueTask`1& valueTask);
    [ExtensionAttribute]
public static ValueTask GetAsValueTask(ValueTask`1& valueTask);
}
[ObsoleteAttribute("Moved to Microsoft.AspNetCore.Http.BadHttpRequestException. See https://aka.ms/badhttprequestexception for details.")]
public class Microsoft.AspNetCore.Server.IIS.BadHttpRequestException : BadHttpRequestException {
    public int StatusCode { get; }
    internal RequestRejectionReason Reason { get; }
    [NullableContextAttribute("1")]
internal BadHttpRequestException(string message, int statusCode, RequestRejectionReason reason);
    public int get_StatusCode();
    [CompilerGeneratedAttribute]
internal RequestRejectionReason get_Reason();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.IIS.Core.DuplexStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public DuplexStream(Stream requestBody, Stream responseBody);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    public virtual Task FlushAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.IIS.Core.EmptyStream : ReadOnlyStream {
    public EmptyStream(IHttpBodyControlFeature bodyControl);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public void StopAcceptingReads();
    [NullableContextAttribute("2")]
public void Abort(Exception error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.IIS.Core.HttpRequestStream : ReadOnlyStream {
    public HttpRequestStream(IHttpBodyControlFeature bodyControl);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> destination, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.IIS.Core.HttpRequestStream/<CopyToAsync>d__11")]
public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    public void StartAcceptingReads(IISHttpContext body);
    public void StopAcceptingReads();
    [NullableContextAttribute("2")]
public void Abort(Exception error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.IIS.Core.HttpResponseStream : WriteOnlyStreamInternal {
    public HttpResponseStream(IHttpBodyControlFeature bodyControl, IISHttpContext context);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> source, CancellationToken cancellationToken);
    public void StartAcceptingWrites();
    public void StopAcceptingWrites();
    public void Abort();
}
internal enum Microsoft.AspNetCore.Server.IIS.Core.HttpStreamState : Enum {
    public int value__;
    public static HttpStreamState Open;
    public static HttpStreamState Closed;
    public static HttpStreamState Aborted;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.IIS.Core.HttpUpgradeStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public HttpUpgradeStream(Stream requestStream, Stream responseStream);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual void Close();
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> destination, CancellationToken cancellationToken);
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> source, CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[NativeMarshallingAttribute("Microsoft.AspNetCore.Server.IIS.Core.IISConfigurationData/Marshaller")]
internal class Microsoft.AspNetCore.Server.IIS.Core.IISConfigurationData : ValueType {
    public IntPtr pNativeApplication;
    public string pwzFullApplicationPath;
    public string pwzVirtualApplicationPath;
    public bool fWindowsAuthEnabled;
    public bool fBasicAuthEnabled;
    public bool fAnonymousAuthEnable;
    public string pwzBindings;
    public UInt32 maxRequestBodySize;
}
[NullableContextAttribute("1")]
internal interface Microsoft.AspNetCore.Server.IIS.Core.IISContextFactory {
    public abstract virtual IISHttpContext CreateHttpContext(NativeSafeHandle pInProcessHandler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.IIS.Core.IISEnvironmentFeature : object {
    public Version IISVersion { get; }
    public string AppPoolId { get; }
    public string AppPoolConfigFile { get; }
    public string AppConfigPath { get; }
    public string ApplicationPhysicalPath { get; }
    public string ApplicationVirtualPath { get; }
    public string ApplicationId { get; }
    public string SiteName { get; }
    public UInt32 SiteId { get; }
    public static bool TryCreate(IConfiguration configuration, IIISEnvironmentFeature& result);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_IISVersion();
    [CompilerGeneratedAttribute]
public sealed virtual string get_AppPoolId();
    [CompilerGeneratedAttribute]
public sealed virtual string get_AppPoolConfigFile();
    [CompilerGeneratedAttribute]
public sealed virtual string get_AppConfigPath();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ApplicationPhysicalPath();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ApplicationVirtualPath();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ApplicationId();
    [CompilerGeneratedAttribute]
public sealed virtual string get_SiteName();
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_SiteId();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.AspNetCore.Server.IIS.Core.IISHttpContext : NativeRequestContext {
    protected NativeSafeHandle _requestNativeHandle;
    protected Streams _streams;
    internal object _contextLock;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected Stack`1<KeyValuePair`2<Func`2<object, Task>, object>> _onStarting;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected Stack`1<KeyValuePair`2<Func`2<object, Task>, object>> _onCompleted;
    [NullableAttribute("2")]
protected Exception _applicationException;
    [NullableAttribute("2")]
protected BadHttpRequestException _requestRejectedException;
    [NullableAttribute("2")]
protected Task _readBodyTask;
    [NullableAttribute("2")]
protected Task _writeBodyTask;
    [NullableAttribute("2")]
protected Pipe _bodyInputPipe;
    protected OutputProducer _bodyOutput;
    protected Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _requestAborted;
    public Version HttpVersion { get; public set; }
    public string Scheme { get; public set; }
    public string Method { get; public set; }
    public string PathBase { get; public set; }
    public string Path { get; public set; }
    public string QueryString { get; public set; }
    public string RawTarget { get; public set; }
    public bool HasResponseStarted { get; }
    [NullableAttribute("2")]
public IPAddress RemoteIpAddress { get; public set; }
    public int RemotePort { get; public set; }
    [NullableAttribute("2")]
public IPAddress LocalIpAddress { get; public set; }
    public int LocalPort { get; public set; }
    [NullableAttribute("2")]
public string RequestConnectionId { get; public set; }
    [NullableAttribute("2")]
public string TraceIdentifier { get; public set; }
    [NullableAttribute("2")]
public ClaimsPrincipal User { get; public set; }
    [NullableAttribute("2")]
internal WindowsPrincipal WindowsUser { get; internal set; }
    internal bool RequestCanHaveBody { get; }
    public Stream RequestBody { get; public set; }
    public Stream ResponseBody { get; public set; }
    [NullableAttribute("2")]
public PipeWriter ResponsePipeWrapper { get; public set; }
    public SslProtocols Protocol { get; }
    public Nullable`1<TlsCipherSuite> NegotiatedCipherSuite { get; }
    public string SniHostName { get; }
    public CipherAlgorithmType CipherAlgorithm { get; }
    public int CipherStrength { get; }
    public HashAlgorithmType HashAlgorithm { get; }
    public int HashStrength { get; }
    public ExchangeAlgorithmType KeyExchangeAlgorithm { get; }
    public int KeyExchangeStrength { get; }
    [NullableAttribute("2")]
protected IAsyncIOEngine AsyncIO { get; protected set; }
    public IHeaderDictionary RequestHeaders { get; public set; }
    public IHeaderDictionary ResponseHeaders { get; public set; }
    [NullableAttribute("2")]
public IHeaderDictionary ResponseTrailers { get; public set; }
    internal bool HasTrailers { get; }
    internal HTTP_VERB KnownMethod { get; }
    public Nullable`1<long> MaxRequestBodySize { get; public set; }
    public int StatusCode { get; public set; }
    [NullableAttribute("2")]
public string ReasonPhrase { get; public set; }
    internal IISHttpServer Server { get; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Protocol { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Scheme { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Method { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.PathBase { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Path { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.QueryString { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.RawTarget { get; private set; }
    private IHeaderDictionary Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Headers { get; private set; }
    private Stream Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Body { get; private set; }
    private bool Microsoft.AspNetCore.Http.Features.IHttpRequestBodyDetectionFeature.CanHaveBody { get; }
    private int Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.StatusCode { get; private set; }
    [NullableAttribute("2")]
private string Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.ReasonPhrase { get; private set; }
    private IHeaderDictionary Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.Headers { get; private set; }
    private Stream Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.Body { get; private set; }
    private bool Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.HasStarted { get; }
    private Stream Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.Stream { get; }
    private PipeWriter Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.Writer { get; }
    private bool Microsoft.AspNetCore.Http.Features.IHttpUpgradeFeature.IsUpgradableRequest { get; }
    private bool Microsoft.AspNetCore.Http.Features.IFeatureCollection.IsReadOnly { get; }
    private int Microsoft.AspNetCore.Http.Features.IFeatureCollection.Revision { get; }
    [NullableAttribute("2")]
private ClaimsPrincipal Microsoft.AspNetCore.Http.Features.Authentication.IHttpAuthenticationFeature.User { get; private set; }
    [NullableAttribute("2")]
private string Microsoft.AspNetCore.Http.Features.IServerVariablesFeature.Item { get; private set; }
    [NullableAttribute("2")]
private object Microsoft.AspNetCore.Http.Features.IFeatureCollection.Item { get; private set; }
    [NullableAttribute("2")]
private X509Certificate2 Microsoft.AspNetCore.Http.Features.ITlsConnectionFeature.ClientCertificate { get; private set; }
    private SslProtocols Microsoft.AspNetCore.Connections.Features.ITlsHandshakeFeature.Protocol { get; }
    private Nullable`1<TlsCipherSuite> Microsoft.AspNetCore.Connections.Features.ITlsHandshakeFeature.NegotiatedCipherSuite { get; }
    private string Microsoft.AspNetCore.Connections.Features.ITlsHandshakeFeature.HostName { get; }
    private CipherAlgorithmType Microsoft.AspNetCore.Connections.Features.ITlsHandshakeFeature.CipherAlgorithm { get; }
    private int Microsoft.AspNetCore.Connections.Features.ITlsHandshakeFeature.CipherStrength { get; }
    private HashAlgorithmType Microsoft.AspNetCore.Connections.Features.ITlsHandshakeFeature.HashAlgorithm { get; }
    private int Microsoft.AspNetCore.Connections.Features.ITlsHandshakeFeature.HashStrength { get; }
    private ExchangeAlgorithmType Microsoft.AspNetCore.Connections.Features.ITlsHandshakeFeature.KeyExchangeAlgorithm { get; }
    private int Microsoft.AspNetCore.Connections.Features.ITlsHandshakeFeature.KeyExchangeStrength { get; }
    private bool Microsoft.AspNetCore.Http.Features.IHttpBodyControlFeature.AllowSynchronousIO { get; private set; }
    private bool Microsoft.AspNetCore.Http.Features.IHttpMaxRequestBodySizeFeature.IsReadOnly { get; }
    private Nullable`1<long> Microsoft.AspNetCore.Http.Features.IHttpMaxRequestBodySizeFeature.MaxRequestBodySize { get; private set; }
    private IHeaderDictionary Microsoft.AspNetCore.Http.Features.IHttpResponseTrailersFeature.Trailers { get; private set; }
    private CancellationToken Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeNotificationFeature.ConnectionClosedRequested { get; private set; }
    [NullableAttribute("2")]
private IPAddress Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.RemoteIpAddress { get; private set; }
    [NullableAttribute("2")]
private IPAddress Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.LocalIpAddress { get; private set; }
    private int Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.RemotePort { get; private set; }
    private int Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.LocalPort { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.ConnectionId { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestIdentifierFeature.TraceIdentifier { get; private set; }
    private CancellationToken Microsoft.AspNetCore.Http.Features.IHttpRequestLifetimeFeature.RequestAborted { get; private set; }
    internal bool ClientDisconnected { get; }
    internal IISHttpContext(MemoryPool`1<byte> memoryPool, NativeSafeHandle pInProcessHandler, IISServerOptions options, IISHttpServer server, ILogger logger, bool useLatin1);
    [CompilerGeneratedAttribute]
public Version get_HttpVersion();
    [CompilerGeneratedAttribute]
public void set_HttpVersion(Version value);
    [CompilerGeneratedAttribute]
public string get_Scheme();
    [CompilerGeneratedAttribute]
public void set_Scheme(string value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public string get_PathBase();
    [CompilerGeneratedAttribute]
public void set_PathBase(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_QueryString();
    [CompilerGeneratedAttribute]
public void set_QueryString(string value);
    [CompilerGeneratedAttribute]
public string get_RawTarget();
    [CompilerGeneratedAttribute]
public void set_RawTarget(string value);
    public bool get_HasResponseStarted();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IPAddress get_RemoteIpAddress();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_RemoteIpAddress(IPAddress value);
    [CompilerGeneratedAttribute]
public int get_RemotePort();
    [CompilerGeneratedAttribute]
public void set_RemotePort(int value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IPAddress get_LocalIpAddress();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_LocalIpAddress(IPAddress value);
    [CompilerGeneratedAttribute]
public int get_LocalPort();
    [CompilerGeneratedAttribute]
public void set_LocalPort(int value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_RequestConnectionId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_RequestConnectionId(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_TraceIdentifier();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TraceIdentifier(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ClaimsPrincipal get_User();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_User(ClaimsPrincipal value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal WindowsPrincipal get_WindowsUser();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_WindowsUser(WindowsPrincipal value);
    [CompilerGeneratedAttribute]
internal bool get_RequestCanHaveBody();
    [CompilerGeneratedAttribute]
public Stream get_RequestBody();
    [CompilerGeneratedAttribute]
public void set_RequestBody(Stream value);
    [CompilerGeneratedAttribute]
public Stream get_ResponseBody();
    [CompilerGeneratedAttribute]
public void set_ResponseBody(Stream value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public PipeWriter get_ResponsePipeWrapper();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ResponsePipeWrapper(PipeWriter value);
    [CompilerGeneratedAttribute]
public SslProtocols get_Protocol();
    [CompilerGeneratedAttribute]
public Nullable`1<TlsCipherSuite> get_NegotiatedCipherSuite();
    [CompilerGeneratedAttribute]
public string get_SniHostName();
    [CompilerGeneratedAttribute]
public CipherAlgorithmType get_CipherAlgorithm();
    [CompilerGeneratedAttribute]
public int get_CipherStrength();
    [CompilerGeneratedAttribute]
public HashAlgorithmType get_HashAlgorithm();
    [CompilerGeneratedAttribute]
public int get_HashStrength();
    [CompilerGeneratedAttribute]
public ExchangeAlgorithmType get_KeyExchangeAlgorithm();
    [CompilerGeneratedAttribute]
public int get_KeyExchangeStrength();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected IAsyncIOEngine get_AsyncIO();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_AsyncIO(IAsyncIOEngine value);
    [CompilerGeneratedAttribute]
public IHeaderDictionary get_RequestHeaders();
    [CompilerGeneratedAttribute]
public void set_RequestHeaders(IHeaderDictionary value);
    [CompilerGeneratedAttribute]
public IHeaderDictionary get_ResponseHeaders();
    [CompilerGeneratedAttribute]
public void set_ResponseHeaders(IHeaderDictionary value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IHeaderDictionary get_ResponseTrailers();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ResponseTrailers(IHeaderDictionary value);
    internal bool get_HasTrailers();
    [CompilerGeneratedAttribute]
internal HTTP_VERB get_KnownMethod();
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxRequestBodySize();
    [CompilerGeneratedAttribute]
public void set_MaxRequestBodySize(Nullable`1<long> value);
    protected void InitializeContext();
    public int get_StatusCode();
    public void set_StatusCode(int value);
    [NullableContextAttribute("2")]
public string get_ReasonPhrase();
    [NullableContextAttribute("2")]
public void set_ReasonPhrase(string value);
    internal IISHttpServer get_Server();
    protected Task ProduceEnd();
    protected bool AdvancedHttp2FeaturesSupported();
    public void SetResponseHeaders();
    public void SetResponseTrailers();
    public abstract virtual Task`1<bool> ProcessRequestAsync();
    public void OnStarting(Func`2<object, Task> callback, object state);
    public void OnCompleted(Func`2<object, Task> callback, object state);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.IIS.Core.IISHttpContext/<FireOnStarting>d__212")]
protected Task FireOnStarting();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.IIS.Core.IISHttpContext/<FireOnCompleted>d__213")]
protected Task FireOnCompleted();
    public void SetBadRequestState(BadHttpRequestException ex);
    protected void ReportApplicationError(Exception ex);
    protected void ReportRequestAborted();
    public void PostCompletion(REQUEST_NOTIFICATION_STATUS requestNotificationStatus);
    internal void OnAsyncCompletion(int hr, int bytes);
    protected virtual void Dispose(bool disposing);
    public virtual void Dispose();
    public sealed virtual void Execute();
    public void ResetFeatureCollection();
    private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Protocol();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Protocol(string value);
    private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Scheme();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Scheme(string value);
    private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Method();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Method(string value);
    private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_PathBase();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_PathBase(string value);
    private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Path();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Path(string value);
    private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_QueryString();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_QueryString(string value);
    private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_RawTarget();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_RawTarget(string value);
    private sealed virtual override IHeaderDictionary Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Headers();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Headers(IHeaderDictionary value);
    private sealed virtual override Stream Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Body();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Body(Stream value);
    private sealed virtual override bool Microsoft.AspNetCore.Http.Features.IHttpRequestBodyDetectionFeature.get_CanHaveBody();
    private sealed virtual override int Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.get_StatusCode();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.set_StatusCode(int value);
    private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.get_ReasonPhrase();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.set_ReasonPhrase(string value);
    private sealed virtual override IHeaderDictionary Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.get_Headers();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.set_Headers(IHeaderDictionary value);
    private sealed virtual override Stream Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.get_Body();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.set_Body(Stream value);
    private sealed virtual override bool Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.get_HasStarted();
    private sealed virtual override Stream Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.get_Stream();
    private sealed virtual override PipeWriter Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.get_Writer();
    private sealed virtual override Task Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.StartAsync(CancellationToken cancellationToken);
    private sealed virtual override Task Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.SendFileAsync(string path, long offset, Nullable`1<long> count, CancellationToken cancellation);
    private sealed virtual override Task Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.CompleteAsync();
    private sealed virtual override bool Microsoft.AspNetCore.Http.Features.IHttpUpgradeFeature.get_IsUpgradableRequest();
    private sealed virtual override bool Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_IsReadOnly();
    private sealed virtual override int Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_Revision();
    private sealed virtual override ClaimsPrincipal Microsoft.AspNetCore.Http.Features.Authentication.IHttpAuthenticationFeature.get_User();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.Authentication.IHttpAuthenticationFeature.set_User(ClaimsPrincipal value);
    private sealed virtual override string Microsoft.AspNetCore.Http.Features.IServerVariablesFeature.get_Item(string variableName);
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IServerVariablesFeature.set_Item(string variableName, string value);
    private sealed virtual override object Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_Item(Type key);
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IFeatureCollection.set_Item(Type key, object value);
    private sealed virtual override TFeature Microsoft.AspNetCore.Http.Features.IFeatureCollection.Get();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IFeatureCollection.Set(TFeature instance);
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.OnStarting(Func`2<object, Task> callback, object state);
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.OnCompleted(Func`2<object, Task> callback, object state);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.IIS.Core.IISHttpContext/<Microsoft-AspNetCore-Http-Features-IHttpUpgradeFeature-UpgradeAsync>d__307")]
private sealed virtual override Task`1<Stream> Microsoft.AspNetCore.Http.Features.IHttpUpgradeFeature.UpgradeAsync();
    private sealed virtual override Task`1<X509Certificate2> Microsoft.AspNetCore.Http.Features.ITlsConnectionFeature.GetClientCertificateAsync(CancellationToken cancellationToken);
    private sealed virtual override X509Certificate2 Microsoft.AspNetCore.Http.Features.ITlsConnectionFeature.get_ClientCertificate();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.ITlsConnectionFeature.set_ClientCertificate(X509Certificate2 value);
    private sealed virtual override SslProtocols Microsoft.AspNetCore.Connections.Features.ITlsHandshakeFeature.get_Protocol();
    private sealed virtual override Nullable`1<TlsCipherSuite> Microsoft.AspNetCore.Connections.Features.ITlsHandshakeFeature.get_NegotiatedCipherSuite();
    private sealed virtual override string Microsoft.AspNetCore.Connections.Features.ITlsHandshakeFeature.get_HostName();
    private sealed virtual override CipherAlgorithmType Microsoft.AspNetCore.Connections.Features.ITlsHandshakeFeature.get_CipherAlgorithm();
    private sealed virtual override int Microsoft.AspNetCore.Connections.Features.ITlsHandshakeFeature.get_CipherStrength();
    private sealed virtual override HashAlgorithmType Microsoft.AspNetCore.Connections.Features.ITlsHandshakeFeature.get_HashAlgorithm();
    private sealed virtual override int Microsoft.AspNetCore.Connections.Features.ITlsHandshakeFeature.get_HashStrength();
    private sealed virtual override ExchangeAlgorithmType Microsoft.AspNetCore.Connections.Features.ITlsHandshakeFeature.get_KeyExchangeAlgorithm();
    private sealed virtual override int Microsoft.AspNetCore.Connections.Features.ITlsHandshakeFeature.get_KeyExchangeStrength();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<Type, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private sealed virtual override bool Microsoft.AspNetCore.Http.Features.IHttpBodyControlFeature.get_AllowSynchronousIO();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpBodyControlFeature.set_AllowSynchronousIO(bool value);
    private sealed virtual override bool Microsoft.AspNetCore.Http.Features.IHttpMaxRequestBodySizeFeature.get_IsReadOnly();
    private sealed virtual override Nullable`1<long> Microsoft.AspNetCore.Http.Features.IHttpMaxRequestBodySizeFeature.get_MaxRequestBodySize();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpMaxRequestBodySizeFeature.set_MaxRequestBodySize(Nullable`1<long> value);
    [NullableContextAttribute("2")]
internal IHttpResponseTrailersFeature GetResponseTrailersFeature();
    [NullableContextAttribute("2")]
internal ITlsHandshakeFeature GetTlsHandshakeFeature();
    private sealed virtual override IHeaderDictionary Microsoft.AspNetCore.Http.Features.IHttpResponseTrailersFeature.get_Trailers();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpResponseTrailersFeature.set_Trailers(IHeaderDictionary value);
    [CompilerGeneratedAttribute]
private sealed virtual override CancellationToken Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeNotificationFeature.get_ConnectionClosedRequested();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeNotificationFeature.set_ConnectionClosedRequested(CancellationToken value);
    [NullableContextAttribute("2")]
internal IHttpResetFeature GetResetFeature();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpResetFeature.Reset(int errorCode);
    internal void SetResetCode(int errorCode);
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.DisableBuffering();
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeNotificationFeature.RequestClose();
    internal object FastFeatureGet(Type key);
    internal void FastFeatureSet(Type key, object feature);
    private sealed virtual override IPAddress Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_RemoteIpAddress();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_RemoteIpAddress(IPAddress value);
    private sealed virtual override IPAddress Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_LocalIpAddress();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_LocalIpAddress(IPAddress value);
    private sealed virtual override int Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_RemotePort();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_RemotePort(int value);
    private sealed virtual override int Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_LocalPort();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_LocalPort(int value);
    private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_ConnectionId();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_ConnectionId(string value);
    private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestIdentifierFeature.get_TraceIdentifier();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestIdentifierFeature.set_TraceIdentifier(string value);
    private sealed virtual override CancellationToken Microsoft.AspNetCore.Http.Features.IHttpRequestLifetimeFeature.get_RequestAborted();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestLifetimeFeature.set_RequestAborted(CancellationToken value);
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestLifetimeFeature.Abort();
    [CompilerGeneratedAttribute]
internal bool get_ClientDisconnected();
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.IIS.Core.IISHttpContext/<ReadAsync>d__450")]
internal ValueTask`1<int> ReadAsync(Memory`1<byte> memory, CancellationToken cancellationToken);
    internal Task CopyToAsync(Stream destination, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
internal Task WriteAsync(ReadOnlyMemory`1<byte> memory, CancellationToken cancellationToken);
    internal Task FlushAsync(CancellationToken cancellationToken);
    internal void AbortIO(bool clientDisconnect);
    public void Abort(Exception reason);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.IIS.Core.IISHttpContextOfT`1 : IISHttpContext {
    public IISHttpContextOfT`1(MemoryPool`1<byte> memoryPool, IHttpApplication`1<TContext> application, NativeSafeHandle pInProcessHandler, IISServerOptions options, IISHttpServer server, ILogger logger, bool useLatin1);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.IIS.Core.IISHttpContextOfT`1/<ProcessRequestAsync>d__2")]
public virtual Task`1<bool> ProcessRequestAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.IIS.Core.IISHttpServer : object {
    public IFeatureCollection Features { get; }
    [NullableAttribute("2")]
public string VirtualPath { get; }
    public IISHttpServer(IISNativeApplication nativeApplication, IHostApplicationLifetime applicationLifetime, IAuthenticationSchemeProvider authentication, IConfiguration configuration, IOptions`1<IISServerOptions> options, ILogger`1<IISHttpServer> logger);
    [CompilerGeneratedAttribute]
public sealed virtual IFeatureCollection get_Features();
    public bool IsWebSocketAvailable(NativeSafeHandle pInProcessHandler);
    [NullableContextAttribute("2")]
public string get_VirtualPath();
    public sealed virtual Task StartAsync(IHttpApplication`1<TContext> application, CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
}
internal class Microsoft.AspNetCore.Server.IIS.Core.IISNativeApplication : object {
    [NullableContextAttribute("1")]
public IISNativeApplication(NativeSafeHandle nativeApplication);
    public void StopIncomingRequests();
    public void StopCallsIntoManaged();
    public void RegisterCallbacks(method requestCallback, method shutdownCallback, method disconnectCallback, method asyncCallback, method requestsDrainedHandler, IntPtr pvRequestContext, IntPtr pvShutdownContext);
    public void Dispose();
    protected virtual override void Finalize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.IIS.Core.IISServerAuthenticationHandlerInternal : object {
    [NullableAttribute("2")]
internal AuthenticationScheme Scheme { get; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal AuthenticationScheme get_Scheme();
    public sealed virtual Task`1<AuthenticateResult> AuthenticateAsync();
    public sealed virtual Task ChallengeAsync(AuthenticationProperties properties);
    public sealed virtual Task ForbidAsync(AuthenticationProperties properties);
    public sealed virtual Task InitializeAsync(AuthenticationScheme scheme, HttpContext context);
}
internal class Microsoft.AspNetCore.Server.IIS.Core.IISServerSetupFilter : object {
    [NullableContextAttribute("1")]
public sealed virtual Action`1<IApplicationBuilder> Configure(Action`1<IApplicationBuilder> next);
}
internal class Microsoft.AspNetCore.Server.IIS.Core.IO.AsyncIOEngine : object {
    [NullableContextAttribute("1")]
public AsyncIOEngine(IISHttpContext context, NativeSafeHandle handler);
    public sealed virtual ValueTask`1<int> ReadAsync(Memory`1<byte> memory);
    public sealed virtual ValueTask`1<int> WriteAsync(ReadOnlySequence`1<byte> data);
    public sealed virtual ValueTask FlushAsync(bool moreData);
    public sealed virtual void NotifyCompletion(int hr, int bytes);
    public sealed virtual void Complete();
    public sealed virtual void Dispose();
}
internal abstract class Microsoft.AspNetCore.Server.IIS.Core.IO.AsyncIOOperation : object {
    public sealed virtual ValueTaskSourceStatus GetStatus(short token);
    [NullableContextAttribute("2")]
public sealed virtual void OnCompleted(Action`1<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags);
    private sealed virtual override void System.Threading.Tasks.Sources.IValueTaskSource.GetResult(short token);
    public sealed virtual int GetResult(short token);
    public Nullable`1<AsyncContinuation> Invoke();
    protected abstract virtual bool InvokeOperation(Int32& hr, Int32& bytes);
    public AsyncContinuation Complete(int hr, int bytes);
    protected virtual bool IsSuccessfulResult(int hr);
    public virtual void FreeOperationResources(int hr, int bytes);
    protected virtual void ResetOperation();
    public bool InUse();
}
internal abstract class Microsoft.AspNetCore.Server.IIS.Core.IO.AsyncWriteOperationBase : AsyncIOOperation {
    public void Initialize(NativeSafeHandle requestHandler, ReadOnlySequence`1<byte> buffer);
    protected virtual bool InvokeOperation(Int32& hr, Int32& bytes);
    public virtual void FreeOperationResources(int hr, int bytes);
    protected virtual void ResetOperation();
    protected abstract virtual int WriteChunks(NativeSafeHandle requestHandler, int chunkCount, HTTP_DATA_CHUNK* dataChunks, Boolean& completionExpected);
}
internal interface Microsoft.AspNetCore.Server.IIS.Core.IO.IAsyncIOEngine {
    public abstract virtual ValueTask`1<int> ReadAsync(Memory`1<byte> memory);
    public abstract virtual ValueTask`1<int> WriteAsync(ReadOnlySequence`1<byte> data);
    public abstract virtual ValueTask FlushAsync(bool moreData);
    public abstract virtual void NotifyCompletion(int hr, int bytes);
    public abstract virtual void Complete();
}
internal class Microsoft.AspNetCore.Server.IIS.Core.IO.WebSocketsAsyncIOEngine : object {
    [NullableContextAttribute("1")]
public WebSocketsAsyncIOEngine(IISHttpContext context, NativeSafeHandle handler);
    public sealed virtual ValueTask`1<int> ReadAsync(Memory`1<byte> memory);
    public sealed virtual ValueTask`1<int> WriteAsync(ReadOnlySequence`1<byte> data);
    public sealed virtual ValueTask FlushAsync(bool moreData);
    public sealed virtual void NotifyCompletion(int hr, int bytes);
    public sealed virtual void Complete();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.IIS.Core.NativeSafeHandle : SafeHandle {
    public bool IsInvalid { get; }
    public short Version { get; }
    public NativeSafeHandle(IntPtr handle);
    public virtual bool get_IsInvalid();
    public short get_Version();
    protected virtual bool ReleaseHandle();
    public sealed virtual object GetResult(short token);
    public sealed virtual ValueTaskSourceStatus GetStatus(short token);
    public sealed virtual void OnCompleted(Action`1<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.IIS.Core.OutputProducer : object {
    public PipeReader Reader { get; }
    public bool Aborted { get; }
    public OutputProducer(Pipe pipe);
    public PipeReader get_Reader();
    public bool get_Aborted();
    public Task FlushAsync(CancellationToken cancellationToken);
    public void Complete();
    public void Abort();
    [NullableContextAttribute("0")]
public Task WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.AspNetCore.Server.IIS.Core.ReadOnlyStream : Stream {
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public int WriteTimeout { get; public set; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.IIS.Core.ServerAddressesFeature : object {
    public ICollection`1<string> Addresses { get; public set; }
    public bool PreferHostingUrls { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<string> get_Addresses();
    [CompilerGeneratedAttribute]
public void set_Addresses(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PreferHostingUrls();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PreferHostingUrls(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.IIS.Core.Streams : object {
    public Streams(IISHttpContext context);
    public Stream Upgrade();
    public ValueTuple`2<Stream, Stream> Start();
    public void Stop();
    public void Abort(Exception error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.IIS.Core.ThrowingWasUpgradedWriteOnlyStreamInternal : WriteOnlyStreamInternal {
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.IIS.Core.WrappingStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public bool CanTimeout { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public WrappingStream(Stream inner);
    public void SetInnerStream(Stream inner);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual bool get_CanTimeout();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> destination, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> source, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual object InitializeLifetimeService();
    public virtual void Close();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual string ToString();
    protected virtual void Dispose(bool disposing);
}
internal abstract class Microsoft.AspNetCore.Server.IIS.Core.WriteOnlyStreamInternal : Stream {
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public int ReadTimeout { get; public set; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    [NullableContextAttribute("1")]
public virtual int Read(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("1")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
}
internal static class Microsoft.AspNetCore.Server.IIS.CoreStrings : object {
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string ResponseStreamWasUpgraded { get; }
    internal static string UnhandledApplicationException { get; }
    internal static string CannotUpgradeNonUpgradableRequest { get; }
    internal static string UpgradeCannotBeCalledMultipleTimes { get; }
    internal static string SynchronousReadsDisallowed { get; }
    internal static string SynchronousWritesDisallowed { get; }
    internal static string WritingToResponseBodyAfterResponseCompleted { get; }
    internal static string ConnectionAbortedByApplication { get; }
    internal static string ConnectionOrStreamAbortedByCancellationToken { get; }
    internal static string ParameterReadOnlyAfterResponseStarted { get; }
    internal static string BadRequest_RequestBodyTooLarge { get; }
    internal static string MaxRequestBodySizeCannotBeModifiedAfterRead { get; }
    internal static string MaxRequestBodySizeCannotBeModifiedForUpgradedRequests { get; }
    internal static string NonNegativeNumberOrNullRequired { get; }
    internal static string BadRequest { get; }
    internal static string MaxRequestLimitWarning { get; }
    internal static string UpgradeWithWrongProtocolVersion { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_ResponseStreamWasUpgraded();
    internal static string get_UnhandledApplicationException();
    internal static string get_CannotUpgradeNonUpgradableRequest();
    internal static string get_UpgradeCannotBeCalledMultipleTimes();
    internal static string get_SynchronousReadsDisallowed();
    internal static string get_SynchronousWritesDisallowed();
    internal static string get_WritingToResponseBodyAfterResponseCompleted();
    internal static string get_ConnectionAbortedByApplication();
    internal static string get_ConnectionOrStreamAbortedByCancellationToken();
    internal static string get_ParameterReadOnlyAfterResponseStarted();
    internal static string FormatParameterReadOnlyAfterResponseStarted(object name);
    internal static string get_BadRequest_RequestBodyTooLarge();
    internal static string get_MaxRequestBodySizeCannotBeModifiedAfterRead();
    internal static string get_MaxRequestBodySizeCannotBeModifiedForUpgradedRequests();
    internal static string get_NonNegativeNumberOrNullRequired();
    internal static string get_BadRequest();
    internal static string get_MaxRequestLimitWarning();
    internal static string get_UpgradeWithWrongProtocolVersion();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Server.IIS.HttpContextExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("This is obsolete and will be removed in a future version. Use GetServerVariable instead.")]
public static string GetIISServerVariable(HttpContext context, string variableName);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Server.IIS.IIISEnvironmentFeature {
    public Version IISVersion { get; }
    public string AppPoolId { get; }
    public string AppPoolConfigFile { get; }
    public string AppConfigPath { get; }
    public string ApplicationPhysicalPath { get; }
    public string ApplicationVirtualPath { get; }
    public string ApplicationId { get; }
    public string SiteName { get; }
    public UInt32 SiteId { get; }
    public abstract virtual Version get_IISVersion();
    public abstract virtual string get_AppPoolId();
    public abstract virtual string get_AppPoolConfigFile();
    public abstract virtual string get_AppConfigPath();
    public abstract virtual string get_ApplicationPhysicalPath();
    public abstract virtual string get_ApplicationVirtualPath();
    public abstract virtual string get_ApplicationId();
    public abstract virtual string get_SiteName();
    public abstract virtual UInt32 get_SiteId();
}
internal static class Microsoft.AspNetCore.Server.IIS.IISBadHttpRequestException : object {
    internal static void Throw(RequestRejectionReason reason);
    [NullableContextAttribute("1")]
internal static BadHttpRequestException GetException(RequestRejectionReason reason);
}
public class Microsoft.AspNetCore.Server.IIS.IISServerDefaults : object {
    [NullableAttribute("1")]
public static string AuthenticationScheme;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Server.IIS.NativeMethods : object {
    internal static int HR_OK;
    internal static int ERROR_NOT_FOUND;
    internal static int ERROR_OPERATION_ABORTED;
    internal static int ERROR_INVALID_PARAMETER;
    internal static int ERROR_HANDLE_EOF;
    internal static string AspNetCoreModuleDll;
    [LibraryImportAttribute("kernel32.dll")]
[GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.10.36612")]
[SkipLocalsInitAttribute]
public static bool CloseHandle(IntPtr handle);
    public static bool IsAspNetCoreModuleLoaded();
    public static void HttpPostCompletion(NativeSafeHandle pInProcessHandler, int cbBytes);
    public static void HttpSetCompletionStatus(NativeSafeHandle pInProcessHandler, REQUEST_NOTIFICATION_STATUS rquestNotificationStatus);
    [NullableContextAttribute("0")]
public static void HttpRegisterCallbacks(NativeSafeHandle pInProcessApplication, method requestCallback, method shutdownCallback, method disconnectCallback, method asyncCallback, method requestsDrainedHandler, IntPtr pvRequestContext, IntPtr pvShutdownContext);
    [NullableContextAttribute("0")]
internal static int HttpWriteResponseBytes(NativeSafeHandle pInProcessHandler, HTTP_DATA_CHUNK* pDataChunks, int nChunks, Boolean& fCompletionExpected);
    public static int HttpFlushResponseBytes(NativeSafeHandle pInProcessHandler, bool fMoreData, Boolean& fCompletionExpected);
    [NullableContextAttribute("0")]
internal static HTTP_REQUEST_V2* HttpGetRawRequest(NativeSafeHandle pInProcessHandler);
    public static void HttpStopCallsIntoManaged(NativeSafeHandle pInProcessApplication);
    public static void HttpStopIncomingRequests(NativeSafeHandle pInProcessApplication);
    public static void HttpDisableBuffering(NativeSafeHandle pInProcessHandler);
    public static void HttpSetResponseStatusCode(NativeSafeHandle pInProcessHandler, ushort statusCode, string pszReason);
    [NullableContextAttribute("0")]
public static int HttpReadRequestBytes(NativeSafeHandle pInProcessHandler, Byte* pvBuffer, int cbBuffer, Int32& dwBytesReceived, Boolean& fCompletionExpected);
    public static void HttpGetCompletionInfo(IntPtr pCompletionInfo, Int32& cbBytes, Int32& hr);
    public static void HttpSetManagedContext(NativeSafeHandle pInProcessHandler, IntPtr pvManagedContext);
    internal static IISConfigurationData HttpGetApplicationProperties();
    [NullableContextAttribute("0")]
public static int HttpQueryRequestProperty(ulong requestId, HTTP_REQUEST_PROPERTY propertyId, Void* qualifier, UInt32 qualifierSize, Void* output, UInt32 outputSize, UInt32* bytesReturned, IntPtr overlapped);
    public static bool HttpTryGetServerVariable(NativeSafeHandle pInProcessHandler, string variableName, String& value);
    public static void HttpSetServerVariable(NativeSafeHandle pInProcessHandler, string variableName, string value);
    [NullableContextAttribute("0")]
public static int HttpWebsocketsReadBytes(NativeSafeHandle pInProcessHandler, Byte* pvBuffer, int cbBuffer, method pfnCompletionCallback, IntPtr pvCompletionContext, Int32& dwBytesReceived, Boolean& fCompletionExpected);
    [NullableContextAttribute("0")]
internal static int HttpWebsocketsWriteBytes(NativeSafeHandle pInProcessHandler, HTTP_DATA_CHUNK* pDataChunks, int nChunks, method pfnCompletionCallback, IntPtr pvCompletionContext, Boolean& fCompletionExpected);
    public static void HttpEnableWebsockets(NativeSafeHandle pInProcessHandler);
    public static bool HttpTryCancelIO(NativeSafeHandle pInProcessHandler);
    public static void HttpCloseConnection(NativeSafeHandle pInProcessHandler);
    [NullableContextAttribute("0")]
public static void HttpResponseSetUnknownHeader(NativeSafeHandle pInProcessHandler, Byte* pszHeaderName, Byte* pszHeaderValue, ushort usHeaderValueLength, bool fReplace);
    [NullableContextAttribute("0")]
public static void HttpResponseSetKnownHeader(NativeSafeHandle pInProcessHandler, int headerId, Byte* pHeaderValue, ushort length, bool fReplace);
    internal static void HttpSetNeedGoAway(NativeSafeHandle pInProcessHandler);
    public static void HttpGetAuthenticationInformation(NativeSafeHandle pInProcessHandler, String& authType, IntPtr& token);
    internal static void HttpSetStartupErrorPageContent(Byte[] content);
    [NullableContextAttribute("0")]
internal static void HttpResponseSetTrailer(NativeSafeHandle pInProcessHandler, Byte* pHeaderName, Byte* pHeaderValue, ushort length, bool replace);
    internal static void HttpResetStream(NativeSafeHandle pInProcessHandler, ulong errorCode);
    internal static bool HttpHasResponse4(NativeSafeHandle pInProcessHandler);
    [CompilerGeneratedAttribute]
internal static int <CloseHandle>g____PInvoke|7_0(IntPtr __handle_native);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static IntPtr <GetModuleHandle>g____PInvoke|8_0(UInt16* __lpModuleName_native);
    [CompilerGeneratedAttribute]
internal static int <http_post_completion>g____PInvoke|11_0(IntPtr __pInProcessHandler_native, int __cbBytes_native);
    [CompilerGeneratedAttribute]
internal static int <http_set_completion_status>g____PInvoke|12_0(IntPtr __pInProcessHandler_native, REQUEST_NOTIFICATION_STATUS __rquestNotificationStatus_native);
    [CompilerGeneratedAttribute]
internal static void <http_indicate_completion>g____PInvoke|13_0(IntPtr __pInProcessHandler_native, REQUEST_NOTIFICATION_STATUS __notificationStatus_native);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static int <register_callbacks>g____PInvoke|14_0(IntPtr __pInProcessApplication_native, method __requestCallback_native, method __shutdownCallback_native, method __disconnectCallback_native, method __asyncCallback_native, method __requestsDrainedHandler_native, IntPtr __pvRequestContext_native, IntPtr __pvShutdownContext_native);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static int <http_write_response_bytes>g____PInvoke|15_0(IntPtr __pInProcessHandler_native, HTTP_DATA_CHUNK* __pDataChunks_native, int __nChunks_native, Int32* __fCompletionExpected_native);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static int <http_flush_response_bytes>g____PInvoke|16_0(IntPtr __pInProcessHandler_native, int __fMoreData_native, Int32* __fCompletionExpected_native);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static HTTP_REQUEST_V2* <http_get_raw_request>g____PInvoke|17_0(IntPtr __pInProcessHandler_native);
    [CompilerGeneratedAttribute]
internal static int <http_stop_calls_into_managed>g____PInvoke|18_0(IntPtr __pInProcessApplication_native);
    [CompilerGeneratedAttribute]
internal static int <http_stop_incoming_requests>g____PInvoke|19_0(IntPtr __pInProcessApplication_native);
    [CompilerGeneratedAttribute]
internal static int <http_disable_buffering>g____PInvoke|20_0(IntPtr __pInProcessHandler_native);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static int <http_set_response_status_code>g____PInvoke|21_0(IntPtr __pInProcessHandler_native, ushort __statusCode_native, Byte* __pszReason_native);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static int <http_read_request_bytes>g____PInvoke|22_0(IntPtr __pInProcessHandler_native, Byte* __pvBuffer_native, int __cbBuffer_native, Int32* __dwBytesReceived_native, Int32* __fCompletionExpected_native);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static void <http_get_completion_info>g____PInvoke|23_0(IntPtr __pCompletionInfo_native, Int32* __cbBytes_native, Int32* __hr_native);
    [CompilerGeneratedAttribute]
internal static int <http_set_managed_context>g____PInvoke|24_0(IntPtr __pInProcessHandler_native, IntPtr __pvManagedContext_native);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static int <http_get_application_properties>g____PInvoke|25_0(Native* __iiConfigData_native);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static int <http_get_server_variable>g____PInvoke|27_0(IntPtr __pInProcessHandler_native, Byte* __variableName_native, UInt16** __value_native);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static int <http_set_server_variable>g____PInvoke|28_0(IntPtr __pInProcessHandler_native, Byte* __variableName_native, UInt16* __value_native);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static int <http_websockets_read_bytes>g____PInvoke|29_0(IntPtr __pInProcessHandler_native, Byte* __pvBuffer_native, int __cbBuffer_native, method __pfnCompletionCallback_native, IntPtr __pvCompletionContext_native, Int32* __dwBytesReceived_native, Int32* __fCompletionExpected_native);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static int <http_websockets_write_bytes>g____PInvoke|30_0(IntPtr __pInProcessHandler_native, HTTP_DATA_CHUNK* __pDataChunks_native, int __nChunks_native, method __pfnCompletionCallback_native, IntPtr __pvCompletionContext_native, Int32* __fCompletionExpected_native);
    [CompilerGeneratedAttribute]
internal static int <http_enable_websockets>g____PInvoke|31_0(IntPtr __pInProcessHandler_native);
    [CompilerGeneratedAttribute]
internal static int <http_cancel_io>g____PInvoke|32_0(IntPtr __pInProcessHandler_native);
    [CompilerGeneratedAttribute]
internal static int <http_close_connection>g____PInvoke|33_0(IntPtr __pInProcessHandler_native);
    [CompilerGeneratedAttribute]
internal static int <http_response_set_need_goaway>g____PInvoke|34_0(IntPtr __pInProcessHandler_native);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static int <http_response_set_unknown_header>g____PInvoke|35_0(IntPtr __pInProcessHandler_native, Byte* __pszHeaderName_native, Byte* __pszHeaderValue_native, ushort __usHeaderValueLength_native, int __fReplace_native);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static int <http_has_response4>g____PInvoke|36_0(IntPtr __pInProcessHandler_native, Int32* __isResponse4_native);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static int <http_response_set_trailer>g____PInvoke|37_0(IntPtr __pInProcessHandler_native, Byte* __pszHeaderName_native, Byte* __pszHeaderValue_native, ushort __usHeaderValueLength_native, int __replace_native);
    [CompilerGeneratedAttribute]
internal static int <http_reset_stream>g____PInvoke|38_0(IntPtr __pInProcessHandler_native, ulong __errorCode_native);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static int <http_response_set_known_header>g____PInvoke|39_0(IntPtr __pInProcessHandler_native, int __headerId_native, Byte* __pHeaderValue_native, ushort __length_native, int __fReplace_native);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static int <http_get_authentication_information>g____PInvoke|40_0(IntPtr __pInProcessHandler_native, UInt16** __authType_native, IntPtr* __token_native);
}
internal enum Microsoft.AspNetCore.Server.IIS.RequestRejectionReason : Enum {
    public int value__;
    public static RequestRejectionReason RequestBodyTooLarge;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.DuplexPipeStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public DuplexPipeStream(PipeReader input, PipeWriter output, bool throwOnCancelled);
    public void CancelPendingRead();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> destination, CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> source, CancellationToken cancellationToken);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.DuplexPipeStreamAdapter`1 : DuplexPipeStream {
    public TStream Stream { get; }
    public PipeReader Input { get; }
    public PipeWriter Output { get; }
    public DuplexPipeStreamAdapter`1(IDuplexPipe duplexPipe, Func`2<Stream, TStream> createStream);
    public DuplexPipeStreamAdapter`1(IDuplexPipe duplexPipe, StreamPipeReaderOptions readerOptions, StreamPipeWriterOptions writerOptions, Func`2<Stream, TStream> createStream);
    [CompilerGeneratedAttribute]
public TStream get_Stream();
    [CompilerGeneratedAttribute]
public sealed virtual PipeReader get_Input();
    [CompilerGeneratedAttribute]
public sealed virtual PipeWriter get_Output();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.DuplexPipeStreamAdapter`1/<DisposeAsync>d__13")]
public virtual ValueTask DisposeAsync();
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.StringUtilities : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string GetAsciiOrUTF8StringNonNullCharacters(ReadOnlySpan`1<byte> span, Encoding defaultEncoding);
    [ExtensionAttribute]
public static string GetAsciiStringNonNullCharacters(ReadOnlySpan`1<byte> span);
    [ExtensionAttribute]
public static string GetLatin1StringNonNullCharacters(ReadOnlySpan`1<byte> span);
    public static bool TryGetAsciiString(Byte* input, Char* output, int count);
    public static bool TryGetLatin1String(Byte* input, Char* output, int count);
    public static bool BytesOrdinalEqualsStringAndAscii(string previousValue, ReadOnlySpan`1<byte> newValue);
    [NullableContextAttribute("1")]
public static string ConcatAsHexSuffix(string str, char separator, UInt32 number);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.ManualResetValueTaskSource`1 : object {
    public bool RunContinuationsAsynchronously { get; public set; }
    public short Version { get; }
    public bool get_RunContinuationsAsynchronously();
    public void set_RunContinuationsAsynchronously(bool value);
    public short get_Version();
    public void Reset();
    public void SetResult(T result);
    public void SetException(Exception error);
    public sealed virtual T GetResult(short token);
    private sealed virtual override void System.Threading.Tasks.Sources.IValueTaskSource.GetResult(short token);
    public sealed virtual ValueTaskSourceStatus GetStatus(short token);
    [NullableContextAttribute("2")]
public sealed virtual void OnCompleted(Action`1<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags);
    public ValueTaskSourceStatus GetStatus();
    public void TrySetResult(T result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.MemoryPoolExtensions : object {
    [ExtensionAttribute]
public static int GetMinimumSegmentSize(MemoryPool`1<byte> pool);
    [ExtensionAttribute]
public static int GetMinimumAllocSize(MemoryPool`1<byte> pool);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Microsoft.AspNetCore.Server.Kestrel.Https.Internal.SslDuplexPipe : DuplexPipeStreamAdapter`1<SslStream> {
    public SslDuplexPipe(IDuplexPipe transport, StreamPipeReaderOptions readerOptions, StreamPipeWriterOptions writerOptions);
    public SslDuplexPipe(IDuplexPipe transport, StreamPipeReaderOptions readerOptions, StreamPipeWriterOptions writerOptions, Func`2<Stream, SslStream> factory);
}
internal static class Microsoft.Extensions.Internal.TypeNameHelper : object {
    [NullableContextAttribute("2")]
public static string GetTypeDisplayName(object item, bool fullName);
    [NullableContextAttribute("1")]
public static string GetTypeDisplayName(Type type, bool fullName, bool includeGenericParameterNames, bool includeGenericParameters, char nestedTypeDelimiter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.RazorViews.AttributeValue : object {
    public string Prefix { get; }
    public object Value { get; }
    public bool Literal { get; }
    public AttributeValue(string prefix, object value, bool literal);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public bool get_Literal();
    public static AttributeValue FromTuple(Tuple`3<string, object, bool> value);
    public static AttributeValue FromTuple(Tuple`3<string, string, bool> value);
    public static AttributeValue op_Implicit(Tuple`3<string, object, bool> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Extensions.RazorViews.BaseView : object {
    protected HttpContext Context { get; }
    protected HttpRequest Request { get; }
    protected HttpResponse Response { get; }
    protected TextWriter Output { get; }
    protected HtmlEncoder HtmlEncoder { get; protected set; }
    protected UrlEncoder UrlEncoder { get; protected set; }
    protected JavaScriptEncoder JavaScriptEncoder { get; protected set; }
    [CompilerGeneratedAttribute]
protected HttpContext get_Context();
    [CompilerGeneratedAttribute]
protected HttpRequest get_Request();
    [CompilerGeneratedAttribute]
protected HttpResponse get_Response();
    [CompilerGeneratedAttribute]
protected TextWriter get_Output();
    [CompilerGeneratedAttribute]
protected HtmlEncoder get_HtmlEncoder();
    [CompilerGeneratedAttribute]
protected void set_HtmlEncoder(HtmlEncoder value);
    [CompilerGeneratedAttribute]
protected UrlEncoder get_UrlEncoder();
    [CompilerGeneratedAttribute]
protected void set_UrlEncoder(UrlEncoder value);
    [CompilerGeneratedAttribute]
protected JavaScriptEncoder get_JavaScriptEncoder();
    [CompilerGeneratedAttribute]
protected void set_JavaScriptEncoder(JavaScriptEncoder value);
    [AsyncStateMachineAttribute("Microsoft.Extensions.RazorViews.BaseView/<ExecuteAsync>d__31")]
public Task ExecuteAsync(Stream stream);
    [AsyncStateMachineAttribute("Microsoft.Extensions.RazorViews.BaseView/<ExecuteAsync>d__32")]
public Task ExecuteAsync(HttpContext context);
    public abstract virtual Task ExecuteAsync();
    protected virtual void PushWriter(TextWriter writer);
    protected virtual TextWriter PopWriter();
    protected void WriteLiteral(object value);
    [NullableContextAttribute("2")]
protected void WriteLiteral(string value);
    protected void WriteAttributeValue(string thingy, int startPostion, object value, int endValue, int dealyo, bool yesno);
    protected void BeginWriteAttribute(string name, string beginning, int startPosition, string ending, int endPosition, int thingy);
    protected void EndWriteAttribute();
    protected void WriteAttribute(string name, string leader, string trailer, AttributeValue[] values);
    protected void Write(HelperResult result);
    protected void Write(object value);
    [NullableContextAttribute("2")]
protected void Write(string value);
    protected string HtmlEncodeAndReplaceLineBreaks(string input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.RazorViews.HelperResult : object {
    public Action`1<TextWriter> WriteAction { get; }
    public HelperResult(Action`1<TextWriter> action);
    [CompilerGeneratedAttribute]
public Action`1<TextWriter> get_WriteAction();
    public void WriteTo(TextWriter writer);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.StackTrace.Sources.ExceptionDetails : object {
    public Exception Error { get; }
    [NullableAttribute("1")]
public IEnumerable`1<StackFrameSourceCodeInfo> StackFrames { get; }
    public string ErrorMessage { get; public set; }
    [NullableContextAttribute("1")]
public ExceptionDetails(Exception error, IEnumerable`1<StackFrameSourceCodeInfo> stackFrames);
    [NullableContextAttribute("1")]
public ExceptionDetails(string errorMessage, IEnumerable`1<StackFrameSourceCodeInfo> stackFrames);
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IEnumerable`1<StackFrameSourceCodeInfo> get_StackFrames();
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.StackTrace.Sources.ExceptionDetailsProvider : object {
    public ExceptionDetailsProvider(IFileProvider fileProvider, ILogger logger, int sourceCodeLineCount);
    [IteratorStateMachineAttribute("Microsoft.Extensions.StackTrace.Sources.ExceptionDetailsProvider/<GetDetails>d__4")]
public IEnumerable`1<ExceptionDetails> GetDetails(Exception exception);
    [NullableContextAttribute("2")]
internal StackFrameSourceCodeInfo GetStackFrameSourceCodeInfo(string method, string filePath, int lineNumber);
    internal void ReadFrameContent(StackFrameSourceCodeInfo frame, IEnumerable`1<string> allLines, int errorStartLineNumberInFile, int errorEndLineNumberInFile);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.StackTrace.Sources.LoggerExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LoggerMessageAttribute("0", "1", "Failed to read stack trace information for exception.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void FailedToReadStackTraceInfo(ILogger logger, Exception exception);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.StackTrace.Sources.MethodDisplayInfo : object {
    public string DeclaringTypeName { get; }
    [NullableAttribute("1")]
public string Name { get; }
    public string GenericArguments { get; }
    public string SubMethod { get; }
    [NullableAttribute("1")]
public IEnumerable`1<ParameterDisplayInfo> Parameters { get; }
    public MethodDisplayInfo(string declaringTypeName, string name, string genericArguments, string subMethod, IEnumerable`1<ParameterDisplayInfo> parameters);
    [CompilerGeneratedAttribute]
public string get_DeclaringTypeName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_GenericArguments();
    [CompilerGeneratedAttribute]
public string get_SubMethod();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IEnumerable`1<ParameterDisplayInfo> get_Parameters();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.StackTrace.Sources.ParameterDisplayInfo : object {
    public string Name { get; public set; }
    public string Type { get; public set; }
    public string Prefix { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.StackTrace.Sources.StackFrameInfo : object {
    public int LineNumber { get; }
    public string FilePath { get; }
    public StackFrame StackFrame { get; }
    public MethodDisplayInfo MethodDisplayInfo { get; }
    public StackFrameInfo(int lineNumber, string filePath, StackFrame stackFrame, MethodDisplayInfo methodDisplayInfo);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public StackFrame get_StackFrame();
    [CompilerGeneratedAttribute]
public MethodDisplayInfo get_MethodDisplayInfo();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.StackTrace.Sources.StackFrameSourceCodeInfo : object {
    [NullableAttribute("2")]
public string Function { get; public set; }
    [NullableAttribute("2")]
public string File { get; public set; }
    public int Line { get; public set; }
    public int PreContextLine { get; public set; }
    public IEnumerable`1<string> PreContextCode { get; public set; }
    public IEnumerable`1<string> ContextCode { get; public set; }
    public IEnumerable`1<string> PostContextCode { get; public set; }
    [NullableAttribute("2")]
public string ErrorDetails { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Function();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Function(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_File();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_File(string value);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(int value);
    [CompilerGeneratedAttribute]
public int get_PreContextLine();
    [CompilerGeneratedAttribute]
public void set_PreContextLine(int value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_PreContextCode();
    [CompilerGeneratedAttribute]
public void set_PreContextCode(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ContextCode();
    [CompilerGeneratedAttribute]
public void set_ContextCode(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_PostContextCode();
    [CompilerGeneratedAttribute]
public void set_PostContextCode(IEnumerable`1<string> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ErrorDetails();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ErrorDetails(string value);
}
internal class Microsoft.Extensions.StackTrace.Sources.StackTraceHelper : object {
    [NullableContextAttribute("1")]
[UnconditionalSuppressMessageAttribute("Trimmer", "IL2026")]
public static IList`1<StackFrameInfo> GetFrames(Exception exception, AggregateException& error);
    [NullableContextAttribute("2")]
internal static MethodDisplayInfo GetMethodDisplayString(MethodBase method);
}
internal class StartupHook : object {
    public static void Initialize();
}
[ExtensionAttribute]
internal static class System.Buffers.BufferExtensions : object {
    [ExtensionAttribute]
public static ReadOnlySpan`1<byte> ToSpan(ReadOnlySequence`1& buffer);
    [ExtensionAttribute]
public static void CopyTo(ReadOnlySequence`1& buffer, PipeWriter pipeWriter);
    [ExtensionAttribute]
public static ArraySegment`1<byte> GetArray(Memory`1<byte> buffer);
    [ExtensionAttribute]
public static ArraySegment`1<byte> GetArray(ReadOnlyMemory`1<byte> memory);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Nullable`1<SequencePosition> PositionOfAny(ReadOnlySequence`1& source, T value0, T value1);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static void WriteAscii(BufferWriter`1& buffer, string data);
    [ExtensionAttribute]
internal static void WriteNumeric(BufferWriter`1& buffer, ulong number);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static void WriteEncoded(BufferWriter`1& buffer, string data, Encoding encoding);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
internal class System.Buffers.BufferWriter`1 : ValueType {
    private T _output;
    private Span`1<byte> _span;
    private int _buffered;
    private long _bytesCommitted;
    public Span`1<byte> Span { get; }
    public long BytesCommitted { get; }
    [NullableContextAttribute("1")]
public BufferWriter`1(T output);
    [IsReadOnlyAttribute]
public Span`1<byte> get_Span();
    [IsReadOnlyAttribute]
public long get_BytesCommitted();
    public void Commit();
    public void Advance(int count);
    public void Write(ReadOnlySpan`1<byte> source);
    public void Ensure(int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Buffers.DiagnosticMemoryPool : MemoryPool`1<byte> {
    public bool IsDisposed { get; }
    public int MaxBufferSize { get; }
    public DiagnosticMemoryPool(MemoryPool`1<byte> pool, bool allowLateReturn, bool rentTracking);
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    public virtual IMemoryOwner`1<byte> Rent(int size);
    public virtual int get_MaxBufferSize();
    internal void Return(DiagnosticPoolBlock block);
    internal void ReportException(Exception exception);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("System.Buffers.DiagnosticMemoryPool/<WhenAllBlocksReturnedAsync>d__22")]
public Task WhenAllBlocksReturnedAsync(TimeSpan timeout);
}
internal class System.Buffers.DiagnosticPoolBlock : MemoryManager`1<byte> {
    public Memory`1<byte> Memory { get; }
    [NullableAttribute("2")]
public StackTrace Leaser { get; public set; }
    [NullableContextAttribute("1")]
internal DiagnosticPoolBlock(DiagnosticMemoryPool pool, IMemoryOwner`1<byte> memoryOwner);
    public virtual Memory`1<byte> get_Memory();
    protected virtual void Dispose(bool disposing);
    public virtual Span`1<byte> GetSpan();
    public virtual MemoryHandle Pin(int byteOffset);
    protected virtual bool TryGetArray(ArraySegment`1& segment);
    public virtual void Unpin();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public StackTrace get_Leaser();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Leaser(StackTrace value);
    public void Track();
}
internal class System.Buffers.MemoryPoolBlock : object {
    [NullableAttribute("1")]
public PinnedBlockMemoryPool Pool { get; }
    public Memory`1<byte> Memory { get; }
    [NullableContextAttribute("1")]
internal MemoryPoolBlock(PinnedBlockMemoryPool pool, int length);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public PinnedBlockMemoryPool get_Pool();
    [CompilerGeneratedAttribute]
public sealed virtual Memory`1<byte> get_Memory();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Buffers.MemoryPoolThrowHelper : object {
    public static void ThrowArgumentOutOfRangeException(int sourceLength, int offset);
    public static void ThrowInvalidOperationException_PinCountZero(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_ReturningPinnedBlock(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_DoubleDispose();
    public static void ThrowInvalidOperationException_BlockDoubleDispose(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_BlockReturnedToDisposedPool(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_BlockIsBackedByDisposedSlab(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_DisposingPoolWithActiveBlocks(int returned, int total, DiagnosticPoolBlock[] blocks);
    public static void ThrowInvalidOperationException_BlocksWereNotReturnedInTime(int returned, int total, DiagnosticPoolBlock[] blocks);
    public static void ThrowArgumentOutOfRangeException_BufferRequestTooLarge(int maxSize);
    public static void ThrowObjectDisposedException(ExceptionArgument argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Buffers.PinnedBlockMemoryPool : MemoryPool`1<byte> {
    public int MaxBufferSize { get; }
    public static int BlockSize { get; }
    [CompilerGeneratedAttribute]
public virtual int get_MaxBufferSize();
    public static int get_BlockSize();
    public virtual IMemoryOwner`1<byte> Rent(int size);
    internal void Return(MemoryPoolBlock block);
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Buffers.PinnedBlockMemoryPoolFactory : object {
    public static MemoryPool`1<byte> Create();
    public static MemoryPool`1<byte> CreatePinnedBlockMemoryPool();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.IO.Pipelines.DuplexPipe : object {
    public PipeReader Input { get; }
    public PipeWriter Output { get; }
    public DuplexPipe(PipeReader reader, PipeWriter writer);
    [CompilerGeneratedAttribute]
public sealed virtual PipeReader get_Input();
    [CompilerGeneratedAttribute]
public sealed virtual PipeWriter get_Output();
    public static DuplexPipePair CreateConnectionPair(PipeOptions inputOptions, PipeOptions outputOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Threading.Tasks.TaskToApm : object {
    public static IAsyncResult Begin(Task task, AsyncCallback callback, object state);
    public static void End(IAsyncResult asyncResult);
    public static TResult End(IAsyncResult asyncResult);
}
internal class UnmanagedBufferAllocator : ValueType {
    private int _blockSize;
    private int _currentBlockCount;
    private Void** _currentAlloc;
    private Byte* _currentBlock;
    public static int DefaultBlockSize { get; }
    public UnmanagedBufferAllocator(int blockSize);
    public static int get_DefaultBlockSize();
    public T* AllocAsPointer(int count);
    public Span`1<T> AllocAsSpan(int count);
    public Byte* GetHeaderEncodedBytes(string myString, Int32& length);
    public sealed virtual void Dispose();
}
