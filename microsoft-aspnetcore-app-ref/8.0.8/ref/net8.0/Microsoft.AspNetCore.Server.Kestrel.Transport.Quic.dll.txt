internal static class Interop : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Connections.CompletionPipeReader : PipeReader {
    public bool IsCompleted { get; }
    public Exception CompleteException { get; }
    public bool IsCompletedSuccessfully { get; }
    [NullableContextAttribute("1")]
public CompletionPipeReader(PipeReader inner);
    [CompilerGeneratedAttribute]
public bool get_IsCompleted();
    [CompilerGeneratedAttribute]
public Exception get_CompleteException();
    public bool get_IsCompletedSuccessfully();
    public virtual void AdvanceTo(SequencePosition consumed);
    public virtual void AdvanceTo(SequencePosition consumed, SequencePosition examined);
    public virtual ValueTask CompleteAsync(Exception exception);
    public virtual void Complete(Exception exception);
    public virtual void CancelPendingRead();
    [NullableContextAttribute("0")]
public virtual ValueTask`1<ReadResult> ReadAsync(CancellationToken cancellationToken);
    public virtual bool TryRead(ReadResult& result);
    public void Reset();
}
internal class Microsoft.AspNetCore.Connections.CompletionPipeWriter : PipeWriter {
    public bool IsCompleted { get; }
    [NullableAttribute("2")]
public Exception CompleteException { get; }
    public bool IsCompletedSuccessfully { get; }
    [NullableContextAttribute("1")]
public CompletionPipeWriter(PipeWriter inner);
    [CompilerGeneratedAttribute]
public bool get_IsCompleted();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Exception get_CompleteException();
    public bool get_IsCompletedSuccessfully();
    public virtual void Advance(int bytes);
    public virtual void CancelPendingFlush();
    [NullableContextAttribute("2")]
public virtual void Complete(Exception exception);
    [NullableContextAttribute("2")]
public virtual ValueTask CompleteAsync(Exception exception);
    public virtual ValueTask`1<FlushResult> WriteAsync(ReadOnlyMemory`1<byte> source, CancellationToken cancellationToken);
    public virtual ValueTask`1<FlushResult> FlushAsync(CancellationToken cancellationToken);
    public virtual Memory`1<byte> GetMemory(int sizeHint);
    public virtual Span`1<byte> GetSpan(int sizeHint);
    public void Reset();
}
internal static class Microsoft.AspNetCore.Connections.ConnectionCompletion : object {
    [NullableContextAttribute("1")]
public static Task FireOnCompletedAsync(ILogger logger, Stack`1<KeyValuePair`2<Func`2<object, Task>, object>> onCompleted);
}
internal static class Microsoft.AspNetCore.Connections.CorrelationIdGenerator : object {
    [NullableContextAttribute("1")]
public static string GetNextId();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal abstract class Microsoft.AspNetCore.Connections.TransportConnection : ConnectionContext {
    protected internal IConnectionIdFeature _currentIConnectionIdFeature;
    protected internal IConnectionTransportFeature _currentIConnectionTransportFeature;
    protected internal IConnectionItemsFeature _currentIConnectionItemsFeature;
    protected internal IMemoryPoolFeature _currentIMemoryPoolFeature;
    protected internal IConnectionLifetimeFeature _currentIConnectionLifetimeFeature;
    protected internal IPersistentStateFeature _currentIPersistentStateFeature;
    protected internal IConnectionSocketFeature _currentIConnectionSocketFeature;
    protected internal IProtocolErrorCodeFeature _currentIProtocolErrorCodeFeature;
    protected internal IStreamDirectionFeature _currentIStreamDirectionFeature;
    protected internal IStreamIdFeature _currentIStreamIdFeature;
    protected internal IStreamAbortFeature _currentIStreamAbortFeature;
    protected internal IStreamClosedFeature _currentIStreamClosedFeature;
    protected internal IConnectionMetricsTagsFeature _currentIConnectionMetricsTagsFeature;
    public IFeatureCollection MultiplexedConnectionFeatures { get; protected set; }
    public EndPoint LocalEndPoint { get; public set; }
    public EndPoint RemoteEndPoint { get; public set; }
    [NullableAttribute("1")]
public string ConnectionId { get; public set; }
    [NullableAttribute("1")]
public IFeatureCollection Features { get; }
    [NullableAttribute("1")]
public MemoryPool`1<byte> MemoryPool { get; }
    [NullableAttribute("1")]
public IDuplexPipe Transport { get; public set; }
    [NullableAttribute("1")]
public IDuplexPipe Application { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<object, object> Items { get; public set; }
    public CancellationToken ConnectionClosed { get; public set; }
    private bool Microsoft.AspNetCore.Http.Features.IFeatureCollection.IsReadOnly { get; }
    private int Microsoft.AspNetCore.Http.Features.IFeatureCollection.Revision { get; }
    private object Microsoft.AspNetCore.Http.Features.IFeatureCollection.Item { get; private set; }
    [NullableAttribute("1")]
private MemoryPool`1<byte> Microsoft.AspNetCore.Connections.Features.IMemoryPoolFeature.MemoryPool { get; }
    [NullableAttribute("1")]
private IDuplexPipe Microsoft.AspNetCore.Connections.Features.IConnectionTransportFeature.Transport { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<object, object> Microsoft.AspNetCore.Connections.Features.IConnectionItemsFeature.Items { get; private set; }
    private CancellationToken Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.ConnectionClosed { get; private set; }
    [CompilerGeneratedAttribute]
public IFeatureCollection get_MultiplexedConnectionFeatures();
    [CompilerGeneratedAttribute]
protected void set_MultiplexedConnectionFeatures(IFeatureCollection value);
    [CompilerGeneratedAttribute]
public virtual EndPoint get_LocalEndPoint();
    [CompilerGeneratedAttribute]
public virtual void set_LocalEndPoint(EndPoint value);
    [CompilerGeneratedAttribute]
public virtual EndPoint get_RemoteEndPoint();
    [CompilerGeneratedAttribute]
public virtual void set_RemoteEndPoint(EndPoint value);
    [NullableContextAttribute("1")]
public virtual string get_ConnectionId();
    [NullableContextAttribute("1")]
public virtual void set_ConnectionId(string value);
    [NullableContextAttribute("1")]
public virtual IFeatureCollection get_Features();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual MemoryPool`1<byte> get_MemoryPool();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual IDuplexPipe get_Transport();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual void set_Transport(IDuplexPipe value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IDuplexPipe get_Application();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Application(IDuplexPipe value);
    public virtual IDictionary`2<object, object> get_Items();
    public virtual void set_Items(IDictionary`2<object, object> value);
    internal void ResetItems();
    [CompilerGeneratedAttribute]
public virtual CancellationToken get_ConnectionClosed();
    [CompilerGeneratedAttribute]
public virtual void set_ConnectionClosed(CancellationToken value);
    [NullableContextAttribute("1")]
public virtual void Abort(ConnectionAbortedException abortReason);
    internal void ResetFeatureCollection();
    private sealed virtual override bool Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_IsReadOnly();
    private sealed virtual override int Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_Revision();
    private sealed virtual override object Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_Item(Type key);
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IFeatureCollection.set_Item(Type key, object value);
    private sealed virtual override TFeature Microsoft.AspNetCore.Http.Features.IFeatureCollection.Get();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IFeatureCollection.Set(TFeature feature);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<Type, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override MemoryPool`1<byte> Microsoft.AspNetCore.Connections.Features.IMemoryPoolFeature.get_MemoryPool();
    private sealed virtual override IDuplexPipe Microsoft.AspNetCore.Connections.Features.IConnectionTransportFeature.get_Transport();
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionTransportFeature.set_Transport(IDuplexPipe value);
    private sealed virtual override IDictionary`2<object, object> Microsoft.AspNetCore.Connections.Features.IConnectionItemsFeature.get_Items();
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionItemsFeature.set_Items(IDictionary`2<object, object> value);
    private sealed virtual override CancellationToken Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.get_ConnectionClosed();
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.set_ConnectionClosed(CancellationToken value);
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.Abort();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal abstract class Microsoft.AspNetCore.Connections.TransportMultiplexedConnection : MultiplexedConnectionContext {
    protected internal IConnectionIdFeature _currentIConnectionIdFeature;
    protected internal IConnectionItemsFeature _currentIConnectionItemsFeature;
    protected internal IMemoryPoolFeature _currentIMemoryPoolFeature;
    protected internal IConnectionLifetimeFeature _currentIConnectionLifetimeFeature;
    protected internal IConnectionTransportFeature _currentIConnectionTransportFeature;
    protected internal IProtocolErrorCodeFeature _currentIProtocolErrorCodeFeature;
    protected internal ITlsConnectionFeature _currentITlsConnectionFeature;
    public EndPoint LocalEndPoint { get; public set; }
    public EndPoint RemoteEndPoint { get; public set; }
    [NullableAttribute("1")]
public string ConnectionId { get; public set; }
    [NullableAttribute("1")]
public IFeatureCollection Features { get; }
    [NullableAttribute("1")]
public MemoryPool`1<byte> MemoryPool { get; }
    [NullableAttribute("1")]
public IDuplexPipe Application { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<object, object> Items { get; public set; }
    public CancellationToken ConnectionClosed { get; public set; }
    private bool Microsoft.AspNetCore.Http.Features.IFeatureCollection.IsReadOnly { get; }
    private int Microsoft.AspNetCore.Http.Features.IFeatureCollection.Revision { get; }
    private object Microsoft.AspNetCore.Http.Features.IFeatureCollection.Item { get; private set; }
    [NullableAttribute("1")]
private MemoryPool`1<byte> Microsoft.AspNetCore.Connections.Features.IMemoryPoolFeature.MemoryPool { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<object, object> Microsoft.AspNetCore.Connections.Features.IConnectionItemsFeature.Items { get; private set; }
    private CancellationToken Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.ConnectionClosed { get; private set; }
    [CompilerGeneratedAttribute]
public virtual EndPoint get_LocalEndPoint();
    [CompilerGeneratedAttribute]
public virtual void set_LocalEndPoint(EndPoint value);
    [CompilerGeneratedAttribute]
public virtual EndPoint get_RemoteEndPoint();
    [CompilerGeneratedAttribute]
public virtual void set_RemoteEndPoint(EndPoint value);
    [NullableContextAttribute("1")]
public virtual string get_ConnectionId();
    [NullableContextAttribute("1")]
public virtual void set_ConnectionId(string value);
    [NullableContextAttribute("1")]
public virtual IFeatureCollection get_Features();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual MemoryPool`1<byte> get_MemoryPool();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IDuplexPipe get_Application();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Application(IDuplexPipe value);
    public virtual IDictionary`2<object, object> get_Items();
    public virtual void set_Items(IDictionary`2<object, object> value);
    [CompilerGeneratedAttribute]
public virtual CancellationToken get_ConnectionClosed();
    [CompilerGeneratedAttribute]
public virtual void set_ConnectionClosed(CancellationToken value);
    [NullableContextAttribute("1")]
public virtual void Abort(ConnectionAbortedException abortReason);
    internal void ResetFeatureCollection();
    private sealed virtual override bool Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_IsReadOnly();
    private sealed virtual override int Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_Revision();
    private sealed virtual override object Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_Item(Type key);
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IFeatureCollection.set_Item(Type key, object value);
    private sealed virtual override TFeature Microsoft.AspNetCore.Http.Features.IFeatureCollection.Get();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IFeatureCollection.Set(TFeature feature);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<Type, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override MemoryPool`1<byte> Microsoft.AspNetCore.Connections.Features.IMemoryPoolFeature.get_MemoryPool();
    private sealed virtual override IDictionary`2<object, object> Microsoft.AspNetCore.Connections.Features.IConnectionItemsFeature.get_Items();
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionItemsFeature.set_Items(IDictionary`2<object, object> value);
    private sealed virtual override CancellationToken Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.get_ConnectionClosed();
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.set_ConnectionClosed(CancellationToken value);
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.Abort();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Hosting.WebHostBuilderQuicExtensions : object {
    [ExtensionAttribute]
public static IWebHostBuilder UseQuic(IWebHostBuilder hostBuilder);
    [ExtensionAttribute]
public static IWebHostBuilder UseQuic(IWebHostBuilder hostBuilder, Action`1<QuicTransportOptions> configureOptions);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.StringUtilities : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string GetAsciiOrUTF8StringNonNullCharacters(ReadOnlySpan`1<byte> span, Encoding defaultEncoding);
    [ExtensionAttribute]
public static string GetAsciiStringNonNullCharacters(ReadOnlySpan`1<byte> span);
    [ExtensionAttribute]
public static string GetLatin1StringNonNullCharacters(ReadOnlySpan`1<byte> span);
    public static bool TryGetAsciiString(Byte* input, Char* output, int count);
    public static bool TryGetLatin1String(Byte* input, Char* output, int count);
    public static bool BytesOrdinalEqualsStringAndAscii(string previousValue, ReadOnlySpan`1<byte> newValue);
    [NullableContextAttribute("1")]
public static string ConcatAsHexSuffix(string str, char separator, UInt32 number);
}
internal interface Microsoft.AspNetCore.Server.Kestrel.IPooledStream {
    public long PoolExpirationTimestamp { get; }
    public abstract virtual long get_PoolExpirationTimestamp();
    public abstract virtual void DisposeCore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.Kestrel.PooledStreamStack`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal StreamAsValueType[] _array;
    private int _size;
    public int Count { get; }
    public PooledStreamStack`1(int size);
    [IsReadOnlyAttribute]
public int get_Count();
    [NullableContextAttribute("2")]
public bool TryPop(TValue& result);
    [NullableContextAttribute("2")]
public bool TryPeek(TValue& result);
    public void Push(TValue item);
    public void RemoveExpired(long timestamp);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.Internal.QuicConnectionContext : TransportMultiplexedConnection {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal PooledStreamStack`1<QuicStreamContext> StreamPool;
    internal static int InitialStreamPoolSize;
    internal static int MaxStreamPoolSize;
    internal static long StreamPoolExpirySeconds;
    public long Error { get; public set; }
    [NullableAttribute("2")]
public X509Certificate2 ClientCertificate { get; public set; }
    public QuicConnectionContext(QuicConnection connection, QuicTransportContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.Internal.QuicConnectionContext/<DisposeAsync>d__15")]
public virtual ValueTask DisposeAsync();
    public virtual void Abort();
    public virtual void Abort(ConnectionAbortedException abortReason);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.Internal.QuicConnectionContext/<AcceptAsync>d__18")]
[AsyncMethodBuilderAttribute("System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1")]
public virtual ValueTask`1<ConnectionContext> AcceptAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.Internal.QuicConnectionContext/<ConnectAsync>d__20")]
public virtual ValueTask`1<ConnectionContext> ConnectAsync(IFeatureCollection features, CancellationToken cancellationToken);
    internal bool TryReturnStream(QuicStreamContext stream);
    internal QuicConnection GetInnerConnection();
    public sealed virtual long get_Error();
    public sealed virtual void set_Error(long value);
    [NullableContextAttribute("2")]
public sealed virtual X509Certificate2 get_ClientCertificate();
    [NullableContextAttribute("2")]
public sealed virtual void set_ClientCertificate(X509Certificate2 value);
    public sealed virtual Task`1<X509Certificate2> GetClientCertificateAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.Internal.QuicConnectionListener : object {
    internal ConditionalWeakTable`2<QuicConnection, QuicConnectionContext> _pendingConnections;
    public EndPoint EndPoint { get; public set; }
    public QuicConnectionListener(QuicTransportOptions options, ILogger log, EndPoint endpoint, TlsConnectionCallbackOptions tlsConnectionCallbackOptions);
    [CompilerGeneratedAttribute]
public sealed virtual EndPoint get_EndPoint();
    [CompilerGeneratedAttribute]
public void set_EndPoint(EndPoint value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.Internal.QuicConnectionListener/<CreateListenerAsync>d__13")]
public ValueTask CreateListenerAsync();
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.Internal.QuicConnectionListener/<AcceptAsync>d__14")]
public sealed virtual ValueTask`1<MultiplexedConnectionContext> AcceptAsync(IFeatureCollection features, CancellationToken cancellationToken);
    public sealed virtual ValueTask UnbindAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.Internal.QuicConnectionListener/<DisposeAsync>d__16")]
public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.Internal.QuicLog : object {
    public static void AcceptedConnection(ILogger logger, BaseConnectionContext connection);
    public static void AcceptedStream(ILogger logger, QuicStreamContext streamContext);
    public static void ConnectedStream(ILogger logger, QuicStreamContext streamContext);
    public static void ConnectionError(ILogger logger, BaseConnectionContext connection, Exception ex);
    public static void ConnectionAborted(ILogger logger, BaseConnectionContext connection, long errorCode, Exception ex);
    public static void ConnectionAbort(ILogger logger, BaseConnectionContext connection, long errorCode, string reason);
    public static void StreamError(ILogger logger, QuicStreamContext streamContext, Exception ex);
    public static void StreamPause(ILogger logger, QuicStreamContext streamContext);
    public static void StreamResume(ILogger logger, QuicStreamContext streamContext);
    public static void StreamShutdownWrite(ILogger logger, QuicStreamContext streamContext, string reason);
    public static void StreamAbortedRead(ILogger logger, QuicStreamContext streamContext, long errorCode);
    public static void StreamAbortedWrite(ILogger logger, QuicStreamContext streamContext, long errorCode);
    public static void StreamAbort(ILogger logger, QuicStreamContext streamContext, long errorCode, string reason);
    public static void StreamAbortRead(ILogger logger, QuicStreamContext streamContext, long errorCode, string reason);
    public static void StreamAbortWrite(ILogger logger, QuicStreamContext streamContext, long errorCode, string reason);
    public static void StreamPooled(ILogger logger, QuicStreamContext streamContext);
    public static void StreamReused(ILogger logger, QuicStreamContext streamContext);
    [LoggerMessageAttribute("18", "3", "SslServerAuthenticationOptions must provide a server certificate using ServerCertificate, ServerCertificateContext, or ServerCertificateSelectionCallback.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void ConnectionListenerCertificateNotSpecified(ILogger logger);
    [LoggerMessageAttribute("19", "3", "SslServerAuthenticationOptions must provide at least one application protocol using ApplicationProtocols.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void ConnectionListenerApplicationProtocolsNotSpecified(ILogger logger);
    [LoggerMessageAttribute("20", "1", "QUIC listener starting with configured endpoint {listenEndPoint}.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void ConnectionListenerStarting(ILogger logger, IPEndPoint listenEndPoint);
    [LoggerMessageAttribute("21", "1", "QUIC listener aborted.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void ConnectionListenerAborted(ILogger logger, Exception exception);
    public static void StreamTimeoutRead(ILogger logger, QuicStreamContext streamContext);
    public static void StreamTimeoutWrite(ILogger logger, QuicStreamContext streamContext);
    [LoggerMessageAttribute("24", "1", "QUIC listener connection failed.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void ConnectionListenerAcceptConnectionFailed(ILogger logger, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.Internal.QuicStreamContext : TransportConnection {
    internal Task _processingTask;
    public MemoryPool`1<byte> MemoryPool { get; }
    public bool CanReuse { get; }
    public CancellationToken ConnectionClosed { get; public set; }
    public string ConnectionId { get; public set; }
    public long PoolExpirationTimestamp { get; public set; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public long Error { get; public set; }
    public long StreamId { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<object, object> Microsoft.AspNetCore.Connections.Features.IPersistentStateFeature.State { get; }
    public QuicStreamContext(QuicConnectionContext connection, QuicTransportContext context);
    [CompilerGeneratedAttribute]
public virtual MemoryPool`1<byte> get_MemoryPool();
    [CompilerGeneratedAttribute]
public bool get_CanReuse();
    public void Initialize(QuicStream stream);
    public virtual CancellationToken get_ConnectionClosed();
    public virtual void set_ConnectionClosed(CancellationToken value);
    public virtual string get_ConnectionId();
    public virtual void set_ConnectionId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_PoolExpirationTimestamp();
    [CompilerGeneratedAttribute]
public void set_PoolExpirationTimestamp(long value);
    public void Start();
    public virtual void Abort(ConnectionAbortedException abortReason);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.Internal.QuicStreamContext/<DisposeAsync>d__56")]
[AsyncMethodBuilderAttribute("System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder")]
public virtual ValueTask DisposeAsync();
    public sealed virtual void Dispose();
    public sealed virtual void DisposeCore();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CanRead();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CanWrite();
    public sealed virtual long get_Error();
    public sealed virtual void set_Error(long value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_StreamId();
    private sealed virtual override IDictionary`2<object, object> Microsoft.AspNetCore.Connections.Features.IPersistentStateFeature.get_State();
    public sealed virtual void AbortRead(long errorCode, ConnectionAbortedException abortReason);
    public sealed virtual void AbortWrite(long errorCode, ConnectionAbortedException abortReason);
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IStreamClosedFeature.OnClosed(Action`1<object> callback, object state);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.Internal.QuicStreamContext/<<DoReceiveAsync>g__AwaitCompleteTaskAsync|49_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<FlushResult> <DoReceiveAsync>g__AwaitCompleteTaskAsync|49_0(ValueTask completeTask);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.Internal.QuicTransportContext : object {
    public ILogger Log { get; }
    public QuicTransportOptions Options { get; }
    public QuicTransportContext(ILogger log, QuicTransportOptions options);
    [CompilerGeneratedAttribute]
public ILogger get_Log();
    [CompilerGeneratedAttribute]
public QuicTransportOptions get_Options();
}
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportFactory : object {
    [NullableContextAttribute("1")]
public QuicTransportFactory(ILoggerFactory loggerFactory, IOptions`1<QuicTransportOptions> options);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportFactory/<BindAsync>d__3")]
public sealed virtual ValueTask`1<IMultiplexedConnectionListener> BindAsync(EndPoint endpoint, IFeatureCollection features, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public sealed virtual bool CanBind(EndPoint endpoint);
}
public class Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportOptions : object {
    [NullableAttribute("1")]
internal TimeProvider TimeProvider;
    [RequiresPreviewFeaturesAttribute]
public int MaxBidirectionalStreamCount { get; public set; }
    [RequiresPreviewFeaturesAttribute]
public int MaxUnidirectionalStreamCount { get; public set; }
    [RequiresPreviewFeaturesAttribute]
public Nullable`1<long> MaxReadBufferSize { get; public set; }
    [RequiresPreviewFeaturesAttribute]
public Nullable`1<long> MaxWriteBufferSize { get; public set; }
    public int Backlog { get; public set; }
    public long DefaultStreamErrorCode { get; public set; }
    public long DefaultCloseErrorCode { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaxBidirectionalStreamCount();
    [CompilerGeneratedAttribute]
public void set_MaxBidirectionalStreamCount(int value);
    [CompilerGeneratedAttribute]
public int get_MaxUnidirectionalStreamCount();
    [CompilerGeneratedAttribute]
public void set_MaxUnidirectionalStreamCount(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxReadBufferSize();
    [CompilerGeneratedAttribute]
public void set_MaxReadBufferSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxWriteBufferSize();
    [CompilerGeneratedAttribute]
public void set_MaxWriteBufferSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public int get_Backlog();
    [CompilerGeneratedAttribute]
public void set_Backlog(int value);
    public long get_DefaultStreamErrorCode();
    public void set_DefaultStreamErrorCode(long value);
    public long get_DefaultCloseErrorCode();
    public void set_DefaultCloseErrorCode(long value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Buffers.DiagnosticMemoryPool : MemoryPool`1<byte> {
    public bool IsDisposed { get; }
    public int MaxBufferSize { get; }
    public DiagnosticMemoryPool(MemoryPool`1<byte> pool, bool allowLateReturn, bool rentTracking);
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    public virtual IMemoryOwner`1<byte> Rent(int size);
    public virtual int get_MaxBufferSize();
    internal void Return(DiagnosticPoolBlock block);
    internal void ReportException(Exception exception);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("System.Buffers.DiagnosticMemoryPool/<WhenAllBlocksReturnedAsync>d__22")]
public Task WhenAllBlocksReturnedAsync(TimeSpan timeout);
}
internal class System.Buffers.DiagnosticPoolBlock : MemoryManager`1<byte> {
    public Memory`1<byte> Memory { get; }
    [NullableAttribute("2")]
public StackTrace Leaser { get; public set; }
    [NullableContextAttribute("1")]
internal DiagnosticPoolBlock(DiagnosticMemoryPool pool, IMemoryOwner`1<byte> memoryOwner);
    public virtual Memory`1<byte> get_Memory();
    protected virtual void Dispose(bool disposing);
    public virtual Span`1<byte> GetSpan();
    public virtual MemoryHandle Pin(int byteOffset);
    protected virtual bool TryGetArray(ArraySegment`1& segment);
    public virtual void Unpin();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public StackTrace get_Leaser();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Leaser(StackTrace value);
    public void Track();
}
internal class System.Buffers.MemoryPoolBlock : object {
    [NullableAttribute("1")]
public PinnedBlockMemoryPool Pool { get; }
    public Memory`1<byte> Memory { get; }
    [NullableContextAttribute("1")]
internal MemoryPoolBlock(PinnedBlockMemoryPool pool, int length);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public PinnedBlockMemoryPool get_Pool();
    [CompilerGeneratedAttribute]
public sealed virtual Memory`1<byte> get_Memory();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Buffers.MemoryPoolThrowHelper : object {
    public static void ThrowArgumentOutOfRangeException(int sourceLength, int offset);
    public static void ThrowInvalidOperationException_PinCountZero(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_ReturningPinnedBlock(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_DoubleDispose();
    public static void ThrowInvalidOperationException_BlockDoubleDispose(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_BlockReturnedToDisposedPool(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_BlockIsBackedByDisposedSlab(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_DisposingPoolWithActiveBlocks(int returned, int total, DiagnosticPoolBlock[] blocks);
    public static void ThrowInvalidOperationException_BlocksWereNotReturnedInTime(int returned, int total, DiagnosticPoolBlock[] blocks);
    public static void ThrowArgumentOutOfRangeException_BufferRequestTooLarge(int maxSize);
    public static void ThrowObjectDisposedException(ExceptionArgument argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Buffers.PinnedBlockMemoryPool : MemoryPool`1<byte> {
    public int MaxBufferSize { get; }
    public static int BlockSize { get; }
    [CompilerGeneratedAttribute]
public virtual int get_MaxBufferSize();
    public static int get_BlockSize();
    public virtual IMemoryOwner`1<byte> Rent(int size);
    internal void Return(MemoryPoolBlock block);
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Buffers.PinnedBlockMemoryPoolFactory : object {
    public static MemoryPool`1<byte> Create();
    public static MemoryPool`1<byte> CreatePinnedBlockMemoryPool();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.IO.Pipelines.DuplexPipe : object {
    public PipeReader Input { get; }
    public PipeWriter Output { get; }
    public DuplexPipe(PipeReader reader, PipeWriter writer);
    [CompilerGeneratedAttribute]
public sealed virtual PipeReader get_Input();
    [CompilerGeneratedAttribute]
public sealed virtual PipeWriter get_Output();
    public static DuplexPipePair CreateConnectionPair(PipeOptions inputOptions, PipeOptions outputOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Threading.Tasks.TaskToApm : object {
    public static IAsyncResult Begin(Task task, AsyncCallback callback, object state);
    public static void End(IAsyncResult asyncResult);
    public static TResult End(IAsyncResult asyncResult);
}
internal class UnmanagedBufferAllocator : ValueType {
    private int _blockSize;
    private int _currentBlockCount;
    private Void** _currentAlloc;
    private Byte* _currentBlock;
    public static int DefaultBlockSize { get; }
    public UnmanagedBufferAllocator(int blockSize);
    public static int get_DefaultBlockSize();
    public T* AllocAsPointer(int count);
    public Span`1<T> AllocAsSpan(int count);
    public Byte* GetHeaderEncodedBytes(string myString, Int32& length);
    public sealed virtual void Dispose();
}
