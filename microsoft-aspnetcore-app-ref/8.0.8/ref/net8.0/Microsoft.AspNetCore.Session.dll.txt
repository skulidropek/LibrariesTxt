[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.SessionMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseSession(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseSession(IApplicationBuilder app, SessionOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Builder.SessionOptions : object {
    public CookieBuilder Cookie { get; public set; }
    public TimeSpan IdleTimeout { get; public set; }
    public TimeSpan IOTimeout { get; public set; }
    public CookieBuilder get_Cookie();
    public void set_Cookie(CookieBuilder value);
    [CompilerGeneratedAttribute]
public TimeSpan get_IdleTimeout();
    [CompilerGeneratedAttribute]
public void set_IdleTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_IOTimeout();
    [CompilerGeneratedAttribute]
public void set_IOTimeout(TimeSpan value);
}
internal static class Microsoft.AspNetCore.Session.CookieProtection : object {
}
internal class Microsoft.AspNetCore.Session.DefaultDistributedSessionStore : object {
    public int Count { get; }
    public ICollection`1<EncodedKey> Keys { get; }
    public sealed virtual int get_Count();
    public sealed virtual ICollection`1<EncodedKey> get_Keys();
    public sealed virtual bool TryGetValue(EncodedKey key, Byte[]& value);
    public sealed virtual void SetValue(EncodedKey key, Byte[] value);
    public sealed virtual bool Remove(EncodedKey encodedKey);
    public sealed virtual void Clear();
    public sealed virtual IEnumerator`1<KeyValuePair`2<EncodedKey, Byte[]>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Count = {System.Linq.Enumerable.Count(Keys)}")]
[DebuggerTypeProxyAttribute("Microsoft.AspNetCore.Session.DistributedSession/DistributedSessionDebugView")]
public class Microsoft.AspNetCore.Session.DistributedSession : object {
    public bool IsAvailable { get; }
    public string Id { get; }
    public IEnumerable`1<string> Keys { get; }
    public DistributedSession(IDistributedCache cache, string sessionKey, TimeSpan idleTimeout, TimeSpan ioTimeout, Func`1<bool> tryEstablishSession, ILoggerFactory loggerFactory, bool isNewSessionKey);
    public sealed virtual bool get_IsAvailable();
    public sealed virtual string get_Id();
    public sealed virtual IEnumerable`1<string> get_Keys();
    public sealed virtual bool TryGetValue(string key, Byte[]& value);
    public sealed virtual void Set(string key, Byte[] value);
    public sealed virtual void Remove(string key);
    public sealed virtual void Clear();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Session.DistributedSession/<LoadAsync>d__30")]
public sealed virtual Task LoadAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Session.DistributedSession/<CommitAsync>d__31")]
public sealed virtual Task CommitAsync(CancellationToken cancellationToken);
}
public class Microsoft.AspNetCore.Session.DistributedSessionStore : object {
    [NullableContextAttribute("1")]
public DistributedSessionStore(IDistributedCache cache, ILoggerFactory loggerFactory);
    [NullableContextAttribute("1")]
public sealed virtual ISession Create(string sessionKey, TimeSpan idleTimeout, TimeSpan ioTimeout, Func`1<bool> tryEstablishSession, bool isNewSessionKey);
}
internal class Microsoft.AspNetCore.Session.EncodedKey : object {
    public EncodedKey(Byte[] key);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal interface Microsoft.AspNetCore.Session.IDistributedSessionStore {
    public int Count { get; }
    public ICollection`1<EncodedKey> Keys { get; }
    public abstract virtual int get_Count();
    public abstract virtual ICollection`1<EncodedKey> get_Keys();
    public abstract virtual bool TryGetValue(EncodedKey key, Byte[]& value);
    public abstract virtual void SetValue(EncodedKey key, Byte[] value);
    public abstract virtual bool Remove(EncodedKey encodedKey);
    public abstract virtual void Clear();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Session.ISessionStore {
    public abstract virtual ISession Create(string sessionKey, TimeSpan idleTimeout, TimeSpan ioTimeout, Func`1<bool> tryEstablishSession, bool isNewSessionKey);
}
internal class Microsoft.AspNetCore.Session.NoOpSessionStore : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ICollection`1<EncodedKey> Keys { get; }
    public ICollection`1<Byte[]> Values { get; }
    public sealed virtual void SetValue(EncodedKey key, Byte[] value);
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<EncodedKey> get_Keys();
    [CompilerGeneratedAttribute]
public ICollection`1<Byte[]> get_Values();
    public sealed virtual void Clear();
    public sealed virtual IEnumerator`1<KeyValuePair`2<EncodedKey, Byte[]>> GetEnumerator();
    public sealed virtual bool Remove(EncodedKey key);
    public sealed virtual bool TryGetValue(EncodedKey key, Byte[]& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class Microsoft.AspNetCore.Session.Resources : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.AspNetCore.Session.SessionDefaults : object {
    public static string CookieName;
    public static string CookiePath;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Session.SessionFeature : object {
    public ISession Session { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ISession get_Session();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Session(ISession value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Session.SessionMiddleware : object {
    public SessionMiddleware(RequestDelegate next, ILoggerFactory loggerFactory, IDataProtectionProvider dataProtectionProvider, ISessionStore sessionStore, IOptions`1<SessionOptions> options);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Session.SessionMiddleware/<Invoke>d__8")]
public Task Invoke(HttpContext context);
}
internal static class Microsoft.AspNetCore.Session.SipHash : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.SessionServiceCollectionExtensions : object {
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("Session State middleware does not currently support trimming or native AOT.")]
public static IServiceCollection AddSession(IServiceCollection services);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("Session State middleware does not currently support trimming or native AOT.")]
public static IServiceCollection AddSession(IServiceCollection services, Action`1<SessionOptions> configure);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.Logging.LoggingExtensions : object {
    [ExtensionAttribute]
[LoggerMessageAttribute("1", "4", "Error closing the session.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void ErrorClosingTheSession(ILogger logger, Exception exception);
    [ExtensionAttribute]
[LoggerMessageAttribute("2", "2", "Accessing expired session, Key:{sessionKey}")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void AccessingExpiredSession(ILogger logger, string sessionKey);
    [ExtensionAttribute]
[LoggerMessageAttribute("3", "2", "Session started; Key:{sessionKey}, Id:{sessionId}")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void SessionStarted(ILogger logger, string sessionKey, string sessionId);
    [ExtensionAttribute]
[LoggerMessageAttribute("4", "1", "Session loaded; Key:{sessionKey}, Id:{sessionId}, Count:{count}")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void SessionLoaded(ILogger logger, string sessionKey, string sessionId, int count);
    [ExtensionAttribute]
[LoggerMessageAttribute("5", "1", "Session stored; Key:{sessionKey}, Id:{sessionId}, Count:{count}")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void SessionStored(ILogger logger, string sessionKey, string sessionId, int count);
    [ExtensionAttribute]
[LoggerMessageAttribute("6", "4", "Session cache read exception, Key:{sessionKey}")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void SessionCacheReadException(ILogger logger, string sessionKey, Exception exception);
    [ExtensionAttribute]
[LoggerMessageAttribute("7", "3", "Error unprotecting the session cookie.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void ErrorUnprotectingSessionCookie(ILogger logger, Exception exception);
    [ExtensionAttribute]
[LoggerMessageAttribute("8", "3", "Loading the session timed out.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void SessionLoadingTimeout(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("9", "3", "Committing the session timed out.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void SessionCommitTimeout(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("10", "2", "Committing the session was canceled.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void SessionCommitCanceled(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("11", "3", "Refreshing the session timed out.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void SessionRefreshTimeout(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("12", "2", "Refreshing the session was canceled.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void SessionRefreshCanceled(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("13", "2", "Session cannot be committed since it is unavailable.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void SessionNotAvailable(ILogger logger);
}
