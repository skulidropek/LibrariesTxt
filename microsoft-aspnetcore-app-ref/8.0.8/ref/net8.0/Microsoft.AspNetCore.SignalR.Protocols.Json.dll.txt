internal class Microsoft.AspNetCore.Internal.ReusableUtf8JsonWriter : object {
    public ReusableUtf8JsonWriter(IBufferWriter`1<byte> stream);
    public static ReusableUtf8JsonWriter Get(IBufferWriter`1<byte> stream);
    public static void Return(ReusableUtf8JsonWriter writer);
    public Utf8JsonWriter GetJsonWriter();
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Internal.SystemTextJsonExtensions : object {
    [ExtensionAttribute]
public static bool CheckRead(Utf8JsonReader& reader);
    [ExtensionAttribute]
public static void EnsureObjectStart(Utf8JsonReader& reader);
    [ExtensionAttribute]
public static string GetTokenString(Utf8JsonReader& reader);
    public static string GetTokenString(JsonTokenType tokenType);
    [ExtensionAttribute]
public static void EnsureArrayStart(Utf8JsonReader& reader);
    [ExtensionAttribute]
public static bool ReadAsBoolean(Utf8JsonReader& reader, string propertyName);
    [ExtensionAttribute]
public static string ReadAsString(Utf8JsonReader& reader, string propertyName);
    [ExtensionAttribute]
public static Nullable`1<int> ReadAsInt32(Utf8JsonReader& reader, string propertyName);
    [ExtensionAttribute]
public static Nullable`1<long> ReadAsInt64(Utf8JsonReader& reader, string propertyName);
}
internal static class Microsoft.AspNetCore.Internal.TextMessageFormatter : object {
    public static byte RecordSeparator;
    public static void WriteRecordSeparator(IBufferWriter`1<byte> output);
}
internal static class Microsoft.AspNetCore.Internal.TextMessageParser : object {
    public static bool TryParseMessage(ReadOnlySequence`1& buffer, ReadOnlySequence`1& payload);
}
internal class Microsoft.AspNetCore.Internal.Utf8BufferTextWriter : TextWriter {
    public Encoding Encoding { get; }
    public virtual Encoding get_Encoding();
    public static Utf8BufferTextWriter Get(IBufferWriter`1<byte> bufferWriter);
    public static void Return(Utf8BufferTextWriter writer);
    public void SetWriter(IBufferWriter`1<byte> bufferWriter);
    public virtual void Write(Char[] buffer, int index, int count);
    public virtual void Write(Char[] buffer);
    public virtual void Write(char value);
    public virtual void Write(string value);
    public virtual void Flush();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.AspNetCore.SignalR.Internal.Utf8BufferTextReader : TextReader {
    public static Utf8BufferTextReader Get(ReadOnlySequence`1& utf8Buffer);
    public static void Return(Utf8BufferTextReader reader);
    public void SetBuffer(ReadOnlySequence`1& utf8Buffer);
    public virtual int Read(Char[] buffer, int index, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.SignalR.JsonHubProtocolOptions : object {
    public JsonSerializerOptions PayloadSerializerOptions { get; public set; }
    [CompilerGeneratedAttribute]
public JsonSerializerOptions get_PayloadSerializerOptions();
    [CompilerGeneratedAttribute]
public void set_PayloadSerializerOptions(JsonSerializerOptions value);
}
public class Microsoft.AspNetCore.SignalR.Protocol.JsonHubProtocol : object {
    [NullableAttribute("1")]
public string Name { get; }
    public int Version { get; }
    public TransferFormat TransferFormat { get; }
    [NullableContextAttribute("1")]
public JsonHubProtocol(IOptions`1<JsonHubProtocolOptions> options);
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    public sealed virtual int get_Version();
    public sealed virtual TransferFormat get_TransferFormat();
    public sealed virtual bool IsVersionSupported(int version);
    public sealed virtual bool TryParseMessage(ReadOnlySequence`1& input, IInvocationBinder binder, HubMessage& message);
    [NullableContextAttribute("1")]
public sealed virtual void WriteMessage(HubMessage message, IBufferWriter`1<byte> output);
    public sealed virtual ReadOnlyMemory`1<byte> GetMessageBytes(HubMessage message);
}
internal static class Microsoft.AspNetCore.SignalR.Protocol.ProtocolHelper : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.JsonProtocolDependencyInjectionExtensions : object {
    [ExtensionAttribute]
public static TBuilder AddJsonProtocol(TBuilder builder);
    [ExtensionAttribute]
public static TBuilder AddJsonProtocol(TBuilder builder, Action`1<JsonHubProtocolOptions> configure);
}
