public class Microsoft.AspNetCore.Builder.HubEndpointConventionBuilder : object {
    [NullableContextAttribute("1")]
public sealed virtual void Add(Action`1<EndpointBuilder> convention);
    [NullableContextAttribute("1")]
public sealed virtual void Finally(Action`1<EndpointBuilder> finalConvention);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.HubEndpointRouteBuilderExtensions : object {
    [ExtensionAttribute]
public static HubEndpointConventionBuilder MapHub(IEndpointRouteBuilder endpoints, string pattern);
    [ExtensionAttribute]
public static HubEndpointConventionBuilder MapHub(IEndpointRouteBuilder endpoints, string pattern, Action`1<HttpConnectionDispatcherOptions> configureOptions);
}
public interface Microsoft.AspNetCore.Builder.IHubEndpointConventionBuilder {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.SignalR.GetHttpContextExtensions : object {
    [ExtensionAttribute]
public static HttpContext GetHttpContext(HubCallerContext connection);
    [ExtensionAttribute]
public static HttpContext GetHttpContext(HubConnectionContext connection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.SignalRDependencyInjectionExtensions : object {
    [ExtensionAttribute]
public static ISignalRServerBuilder AddHubOptions(ISignalRServerBuilder signalrBuilder, Action`1<HubOptions`1<THub>> configure);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("SignalR does not currently support trimming or native AOT.")]
public static ISignalRServerBuilder AddSignalR(IServiceCollection services);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("SignalR does not currently support trimming or native AOT.")]
public static ISignalRServerBuilder AddSignalR(IServiceCollection services, Action`1<HubOptions> configure);
}
internal class Microsoft.Extensions.DependencyInjection.SignalRMarkerService : object {
}
