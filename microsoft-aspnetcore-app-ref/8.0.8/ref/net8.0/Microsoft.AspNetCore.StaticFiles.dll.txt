[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.DefaultFilesExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseDefaultFiles(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseDefaultFiles(IApplicationBuilder app, string requestPath);
    [ExtensionAttribute]
public static IApplicationBuilder UseDefaultFiles(IApplicationBuilder app, DefaultFilesOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Builder.DefaultFilesOptions : SharedOptionsBase {
    public IList`1<string> DefaultFileNames { get; public set; }
    public DefaultFilesOptions(SharedOptions sharedOptions);
    [CompilerGeneratedAttribute]
public IList`1<string> get_DefaultFileNames();
    [CompilerGeneratedAttribute]
public void set_DefaultFileNames(IList`1<string> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.DirectoryBrowserExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseDirectoryBrowser(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseDirectoryBrowser(IApplicationBuilder app, string requestPath);
    [ExtensionAttribute]
public static IApplicationBuilder UseDirectoryBrowser(IApplicationBuilder app, DirectoryBrowserOptions options);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Builder.DirectoryBrowserOptions : SharedOptionsBase {
    public IDirectoryFormatter Formatter { get; public set; }
    [NullableContextAttribute("1")]
public DirectoryBrowserOptions(SharedOptions sharedOptions);
    [CompilerGeneratedAttribute]
public IDirectoryFormatter get_Formatter();
    [CompilerGeneratedAttribute]
public void set_Formatter(IDirectoryFormatter value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.FileServerExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseFileServer(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseFileServer(IApplicationBuilder app, bool enableDirectoryBrowsing);
    [ExtensionAttribute]
public static IApplicationBuilder UseFileServer(IApplicationBuilder app, string requestPath);
    [ExtensionAttribute]
public static IApplicationBuilder UseFileServer(IApplicationBuilder app, FileServerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Builder.FileServerOptions : SharedOptionsBase {
    public StaticFileOptions StaticFileOptions { get; }
    public DirectoryBrowserOptions DirectoryBrowserOptions { get; }
    public DefaultFilesOptions DefaultFilesOptions { get; }
    public bool EnableDirectoryBrowsing { get; public set; }
    public bool EnableDefaultFiles { get; public set; }
    [CompilerGeneratedAttribute]
public StaticFileOptions get_StaticFileOptions();
    [CompilerGeneratedAttribute]
public DirectoryBrowserOptions get_DirectoryBrowserOptions();
    [CompilerGeneratedAttribute]
public DefaultFilesOptions get_DefaultFilesOptions();
    [CompilerGeneratedAttribute]
public bool get_EnableDirectoryBrowsing();
    [CompilerGeneratedAttribute]
public void set_EnableDirectoryBrowsing(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableDefaultFiles();
    [CompilerGeneratedAttribute]
public void set_EnableDefaultFiles(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.StaticFileExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseStaticFiles(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseStaticFiles(IApplicationBuilder app, string requestPath);
    [ExtensionAttribute]
public static IApplicationBuilder UseStaticFiles(IApplicationBuilder app, StaticFileOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Builder.StaticFileOptions : SharedOptionsBase {
    internal static Action`1<StaticFileResponseContext> _defaultOnPrepareResponse;
    internal static Func`2<StaticFileResponseContext, Task> _defaultOnPrepareResponseAsync;
    public IContentTypeProvider ContentTypeProvider { get; public set; }
    [NullableAttribute("2")]
public string DefaultContentType { get; public set; }
    public bool ServeUnknownFileTypes { get; public set; }
    public HttpsCompressionMode HttpsCompression { get; public set; }
    public Action`1<StaticFileResponseContext> OnPrepareResponse { get; public set; }
    public Func`2<StaticFileResponseContext, Task> OnPrepareResponseAsync { get; public set; }
    public StaticFileOptions(SharedOptions sharedOptions);
    [CompilerGeneratedAttribute]
public IContentTypeProvider get_ContentTypeProvider();
    [CompilerGeneratedAttribute]
public void set_ContentTypeProvider(IContentTypeProvider value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_DefaultContentType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_DefaultContentType(string value);
    [CompilerGeneratedAttribute]
public bool get_ServeUnknownFileTypes();
    [CompilerGeneratedAttribute]
public void set_ServeUnknownFileTypes(bool value);
    [CompilerGeneratedAttribute]
public HttpsCompressionMode get_HttpsCompression();
    [CompilerGeneratedAttribute]
public void set_HttpsCompression(HttpsCompressionMode value);
    [CompilerGeneratedAttribute]
public Action`1<StaticFileResponseContext> get_OnPrepareResponse();
    [CompilerGeneratedAttribute]
public void set_OnPrepareResponse(Action`1<StaticFileResponseContext> value);
    [CompilerGeneratedAttribute]
public Func`2<StaticFileResponseContext, Task> get_OnPrepareResponseAsync();
    [CompilerGeneratedAttribute]
public void set_OnPrepareResponseAsync(Func`2<StaticFileResponseContext, Task> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.StaticFilesEndpointRouteBuilderExtensions : object {
    [ExtensionAttribute]
[UnconditionalSuppressMessageAttribute("Trimmer", "IL2026")]
public static IEndpointConventionBuilder MapFallbackToFile(IEndpointRouteBuilder endpoints, string filePath);
    [ExtensionAttribute]
[UnconditionalSuppressMessageAttribute("Trimmer", "IL2026")]
public static IEndpointConventionBuilder MapFallbackToFile(IEndpointRouteBuilder endpoints, string filePath, StaticFileOptions options);
    [ExtensionAttribute]
[UnconditionalSuppressMessageAttribute("Trimmer", "IL2026")]
public static IEndpointConventionBuilder MapFallbackToFile(IEndpointRouteBuilder endpoints, string pattern, string filePath);
    [ExtensionAttribute]
[UnconditionalSuppressMessageAttribute("Trimmer", "IL2026")]
public static IEndpointConventionBuilder MapFallbackToFile(IEndpointRouteBuilder endpoints, string pattern, string filePath, StaticFileOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Internal.RangeHelper : object {
    public static ValueTuple`2<bool, RangeItemHeaderValue> ParseRange(HttpContext context, RequestHeaders requestHeaders, long length, ILogger logger);
    internal static RangeItemHeaderValue NormalizeRange(RangeItemHeaderValue range, long length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.StaticFiles.Constants : object {
    internal static string ServerCapabilitiesKey;
    internal static string SendFileVersionKey;
    internal static string SendFileVersion;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.StaticFiles.DefaultFilesMiddleware : object {
    public DefaultFilesMiddleware(RequestDelegate next, IWebHostEnvironment hostingEnv, IOptions`1<DefaultFilesOptions> options);
    public Task Invoke(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.StaticFiles.DirectoryBrowserMiddleware : object {
    public DirectoryBrowserMiddleware(RequestDelegate next, IWebHostEnvironment hostingEnv, IOptions`1<DirectoryBrowserOptions> options);
    public DirectoryBrowserMiddleware(RequestDelegate next, IWebHostEnvironment hostingEnv, HtmlEncoder encoder, IOptions`1<DirectoryBrowserOptions> options);
    public Task Invoke(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider : object {
    public IDictionary`2<string, string> Mappings { get; }
    public FileExtensionContentTypeProvider(IDictionary`2<string, string> mapping);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Mappings();
    public sealed virtual bool TryGetContentType(string subpath, String& contentType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.StaticFiles.Helpers : object {
    internal static IFileProvider ResolveFileProvider(IWebHostEnvironment hostingEnv);
    internal static bool IsGetOrHeadMethod(string method);
    internal static bool PathEndsInSlash(PathString path);
    internal static string GetPathValueWithSlash(PathString path);
    internal static void RedirectToPathWithSlash(HttpContext context);
    internal static bool TryMatchPath(HttpContext context, PathString matchUrl, bool forDirectory, PathString& subpath);
}
public class Microsoft.AspNetCore.StaticFiles.HtmlDirectoryFormatter : object {
    [NullableContextAttribute("1")]
public HtmlDirectoryFormatter(HtmlEncoder encoder);
    [NullableContextAttribute("1")]
public virtual Task GenerateContentAsync(HttpContext context, IEnumerable`1<IFileInfo> contents);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.StaticFiles.IContentTypeProvider {
    public abstract virtual bool TryGetContentType(string subpath, String& contentType);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.StaticFiles.IDirectoryFormatter {
    public abstract virtual Task GenerateContentAsync(HttpContext context, IEnumerable`1<IFileInfo> contents);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptions : object {
    public PathString RequestPath { get; public set; }
    public IFileProvider FileProvider { get; public set; }
    public bool RedirectToAppendTrailingSlash { get; public set; }
    public PathString get_RequestPath();
    public void set_RequestPath(PathString value);
    [CompilerGeneratedAttribute]
public IFileProvider get_FileProvider();
    [CompilerGeneratedAttribute]
public void set_FileProvider(IFileProvider value);
    [CompilerGeneratedAttribute]
public bool get_RedirectToAppendTrailingSlash();
    [CompilerGeneratedAttribute]
public void set_RedirectToAppendTrailingSlash(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptionsBase : object {
    protected SharedOptions SharedOptions { get; }
    public PathString RequestPath { get; public set; }
    [NullableAttribute("2")]
public IFileProvider FileProvider { get; public set; }
    public bool RedirectToAppendTrailingSlash { get; public set; }
    protected SharedOptionsBase(SharedOptions sharedOptions);
    [CompilerGeneratedAttribute]
protected SharedOptions get_SharedOptions();
    public PathString get_RequestPath();
    public void set_RequestPath(PathString value);
    [NullableContextAttribute("2")]
public IFileProvider get_FileProvider();
    [NullableContextAttribute("2")]
public void set_FileProvider(IFileProvider value);
    public bool get_RedirectToAppendTrailingSlash();
    public void set_RedirectToAppendTrailingSlash(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.StaticFiles.LoggerExtensions : object {
    [ExtensionAttribute]
[LoggerMessageAttribute("1", "1", "{Method} requests are not supported")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void RequestMethodNotSupported(ILogger logger, string method);
    [ExtensionAttribute]
public static void FileServed(ILogger logger, string virtualPath, string physicalPath);
    [ExtensionAttribute]
[LoggerMessageAttribute("15", "1", "Static files was skipped as the request already matched an endpoint.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void EndpointMatched(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("3", "1", "The request path {Path} does not match the path filter")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void PathMismatch(ILogger logger, string path);
    [ExtensionAttribute]
[LoggerMessageAttribute("4", "1", "The request path {Path} does not match a supported file type")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void FileTypeNotSupported(ILogger logger, string path);
    [ExtensionAttribute]
[LoggerMessageAttribute("5", "1", "The request path {Path} does not match an existing file")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void FileNotFound(ILogger logger, string path);
    [ExtensionAttribute]
[LoggerMessageAttribute("6", "2", "The file {Path} was not modified")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void FileNotModified(ILogger logger, string path);
    [ExtensionAttribute]
[LoggerMessageAttribute("7", "2", "Precondition for {Path} failed")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void PreconditionFailed(ILogger logger, string path);
    [ExtensionAttribute]
[LoggerMessageAttribute("8", "1", "Handled. Status code: {StatusCode} File: {Path}")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void Handled(ILogger logger, int statusCode, string path);
    [ExtensionAttribute]
[LoggerMessageAttribute("9", "3", "Range not satisfiable for {Path}")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void RangeNotSatisfiable(ILogger logger, string path);
    [ExtensionAttribute]
[LoggerMessageAttribute("10", "2", "Sending {Range} of file {Path}")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void SendingFileRange(ILogger logger, StringValues range, string path);
    [ExtensionAttribute]
[LoggerMessageAttribute("11", "1", "Copying {Range} of file {Path} to the response body")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void CopyingFileRange(ILogger logger, StringValues range, string path);
    [ExtensionAttribute]
[LoggerMessageAttribute("14", "1", "The file transmission was cancelled")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void WriteCancelled(ILogger logger, Exception ex);
    [ExtensionAttribute]
[LoggerMessageAttribute("16", "3", "The WebRootPath was not found: {WebRootPath}. Static files may be unavailable.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void WebRootPathNotFound(ILogger logger, string webRootPath);
}
internal static class Microsoft.AspNetCore.StaticFiles.Resources : object {
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string Args_NoFormatter { get; }
    internal static string HtmlDir_IndexOf { get; }
    internal static string HtmlDir_LastModified { get; }
    internal static string HtmlDir_Modified { get; }
    internal static string HtmlDir_Name { get; }
    internal static string HtmlDir_Size { get; }
    internal static string HtmlDir_TableSummary { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_Args_NoFormatter();
    internal static string get_HtmlDir_IndexOf();
    internal static string get_HtmlDir_LastModified();
    internal static string get_HtmlDir_Modified();
    internal static string get_HtmlDir_Name();
    internal static string get_HtmlDir_Size();
    internal static string get_HtmlDir_TableSummary();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.StaticFiles.StaticFileContext : ValueType {
    private HttpContext _context;
    private StaticFileOptions _options;
    private HttpRequest _request;
    private HttpResponse _response;
    private ILogger _logger;
    private IFileProvider _fileProvider;
    private string _method;
    private string _contentType;
    private IFileInfo _fileInfo;
    private EntityTagHeaderValue _etag;
    private RequestHeaders _requestHeaders;
    private ResponseHeaders _responseHeaders;
    private RangeItemHeaderValue _range;
    private long _length;
    private PathString _subPath;
    private DateTimeOffset _lastModified;
    private PreconditionState _ifMatchState;
    private PreconditionState _ifNoneMatchState;
    private PreconditionState _ifModifiedSinceState;
    private PreconditionState _ifUnmodifiedSinceState;
    private RequestType _requestType;
    public bool IsHeadMethod { get; }
    public bool IsGetMethod { get; }
    public bool IsRangeRequest { get; }
    public string SubPath { get; }
    public string PhysicalPath { get; }
    public StaticFileContext(HttpContext context, StaticFileOptions options, ILogger logger, IFileProvider fileProvider, string contentType, PathString subPath);
    public bool get_IsHeadMethod();
    public bool get_IsGetMethod();
    public bool get_IsRangeRequest();
    public string get_SubPath();
    public string get_PhysicalPath();
    public bool LookupFileInfo();
    public void ComprehendRequestHeaders();
    public Task ApplyResponseHeadersAsync(int statusCode);
    public PreconditionState GetPreconditionState();
    public Task SendStatusAsync(int statusCode);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.StaticFiles.StaticFileContext/<ServeStaticFile>d__47")]
public Task ServeStaticFile(HttpContext context, RequestDelegate next);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.StaticFiles.StaticFileContext/<SendAsync>d__48")]
public Task SendAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.StaticFiles.StaticFileContext/<SendRangeAsync>d__49")]
internal Task SendRangeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware : object {
    public StaticFileMiddleware(RequestDelegate next, IWebHostEnvironment hostingEnv, IOptions`1<StaticFileOptions> options, ILoggerFactory loggerFactory);
    public Task Invoke(HttpContext context);
    internal static bool ValidatePath(HttpContext context, PathString matchUrl, PathString& subPath);
    internal static bool LookupContentType(IContentTypeProvider contentTypeProvider, StaticFileOptions options, PathString subPath, String& contentType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.StaticFiles.StaticFileResponseContext : object {
    public HttpContext Context { get; }
    public IFileInfo File { get; }
    public StaticFileResponseContext(HttpContext context, IFileInfo file);
    [CompilerGeneratedAttribute]
public HttpContext get_Context();
    [CompilerGeneratedAttribute]
public IFileInfo get_File();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.DirectoryBrowserServiceExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IServiceCollection AddDirectoryBrowser(IServiceCollection services);
}
