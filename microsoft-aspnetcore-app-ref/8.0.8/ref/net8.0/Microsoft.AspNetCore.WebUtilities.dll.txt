[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Internal.AspNetCoreTempDirectory : object {
    public static string TempDirectory { get; }
    public static Func`1<string> TempDirectoryFactory { get; }
    public static string get_TempDirectory();
    public static Func`1<string> get_TempDirectoryFactory();
}
internal class Microsoft.AspNetCore.Internal.UrlDecoder : object {
    public static int DecodeRequestLine(ReadOnlySpan`1<byte> source, Span`1<byte> destination, bool isFormEncoding);
    public static int DecodeInPlace(Span`1<byte> buffer, bool isFormEncoding);
    public static int DecodeRequestLine(ReadOnlySpan`1<char> source, Span`1<char> destination);
    public static int DecodeInPlace(Span`1<char> buffer);
}
internal static class Microsoft.AspNetCore.Shared.ArgumentNullThrowHelper : object {
    [NullableContextAttribute("2")]
public static void ThrowIfNull(object argument, string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Shared.ArgumentOutOfRangeThrowHelper : object {
    [NullableContextAttribute("2")]
public static void ThrowIfZero(int value, string paramName);
    [NullableContextAttribute("2")]
public static void ThrowIfNegative(int value, string paramName);
    [NullableContextAttribute("2")]
public static void ThrowIfNegative(long value, string paramName);
    [NullableContextAttribute("2")]
public static void ThrowIfNegativeOrZero(int value, string paramName);
    public static void ThrowIfGreaterThan(T value, T other, string paramName);
    public static void ThrowIfGreaterThanOrEqual(T value, T other, string paramName);
    public static void ThrowIfLessThan(T value, T other, string paramName);
    public static void ThrowIfLessThanOrEqual(T value, T other, string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.AspNetCore.WebUtilities.Base64UrlTextEncoder : object {
    public static string Encode(Byte[] data);
    public static Byte[] Decode(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.WebUtilities.BufferedReadStream : Stream {
    [NullableAttribute("0")]
public ArraySegment`1<byte> BufferedData { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public BufferedReadStream(Stream inner, int bufferSize);
    public BufferedReadStream(Stream inner, int bufferSize, ArrayPool`1<byte> bytePool);
    [NullableContextAttribute("0")]
public ArraySegment`1<byte> get_BufferedData();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.BufferedReadStream/<ReadAsync>d__35")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public bool EnsureBuffered();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.BufferedReadStream/<EnsureBufferedAsync>d__37")]
public Task`1<bool> EnsureBufferedAsync(CancellationToken cancellationToken);
    public bool EnsureBuffered(int minCount);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.BufferedReadStream/<EnsureBufferedAsync>d__39")]
public Task`1<bool> EnsureBufferedAsync(int minCount, CancellationToken cancellationToken);
    public string ReadLine(int lengthLimit);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.BufferedReadStream/<ReadLineAsync>d__41")]
public Task`1<string> ReadLineAsync(int lengthLimit, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream : Stream {
    public int MemoryThreshold { get; }
    public bool InMemory { get; }
    [NullableAttribute("2")]
public string TempFileName { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public FileBufferingReadStream(Stream inner, int memoryThreshold);
    public FileBufferingReadStream(Stream inner, int memoryThreshold, Nullable`1<long> bufferLimit, Func`1<string> tempFileDirectoryAccessor);
    public FileBufferingReadStream(Stream inner, int memoryThreshold, Nullable`1<long> bufferLimit, Func`1<string> tempFileDirectoryAccessor, ArrayPool`1<byte> bytePool);
    public FileBufferingReadStream(Stream inner, int memoryThreshold, Nullable`1<long> bufferLimit, string tempFileDirectory);
    public FileBufferingReadStream(Stream inner, int memoryThreshold, Nullable`1<long> bufferLimit, string tempFileDirectory, ArrayPool`1<byte> bytePool);
    public int get_MemoryThreshold();
    public bool get_InMemory();
    [NullableContextAttribute("2")]
public string get_TempFileName();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    [NullableContextAttribute("0")]
public virtual int Read(Span`1<byte> buffer);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream/<ReadAsync>d__40")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void SetLength(long value);
    public virtual void Flush();
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream/<DisposeAsync>d__48")]
public virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream : Stream {
    public int MemoryThreshold { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal PagedByteBuffer PagedByteBuffer { get; }
    [NullableAttribute("2")]
internal FileStream FileStream { get; }
    internal bool Disposed { get; }
    public FileBufferingWriteStream(int memoryThreshold, Nullable`1<long> bufferLimit, Func`1<string> tempFileDirectoryAccessor);
    public int get_MemoryThreshold();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    [CompilerGeneratedAttribute]
internal PagedByteBuffer get_PagedByteBuffer();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal FileStream get_FileStream();
    [CompilerGeneratedAttribute]
internal bool get_Disposed();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream/<WriteAsync>d__34")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream/<WriteAsync>d__35")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual void SetLength(long value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream/<DrainBufferAsync>d__39")]
public Task DrainBufferAsync(Stream destination, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream/<DrainBufferAsync>d__40")]
public Task DrainBufferAsync(PipeWriter destination, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream/<DisposeAsync>d__42")]
public virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.WebUtilities.FileMultipartSection : object {
    public MultipartSection Section { get; }
    [NullableAttribute("2")]
public Stream FileStream { get; }
    public string Name { get; }
    public string FileName { get; }
    public FileMultipartSection(MultipartSection section);
    public FileMultipartSection(MultipartSection section, ContentDispositionHeaderValue header);
    [CompilerGeneratedAttribute]
public MultipartSection get_Section();
    [NullableContextAttribute("2")]
public Stream get_FileStream();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_FileName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.WebUtilities.FormMultipartSection : object {
    public MultipartSection Section { get; }
    public string Name { get; }
    public FormMultipartSection(MultipartSection section);
    public FormMultipartSection(MultipartSection section, ContentDispositionHeaderValue header);
    [CompilerGeneratedAttribute]
public MultipartSection get_Section();
    [CompilerGeneratedAttribute]
public string get_Name();
    public Task`1<string> GetValueAsync();
    public ValueTask`1<string> GetValueAsync(CancellationToken cancellationToken);
}
public class Microsoft.AspNetCore.WebUtilities.FormPipeReader : object {
    public int ValueCountLimit { get; public set; }
    public int KeyLengthLimit { get; public set; }
    public int ValueLengthLimit { get; public set; }
    [NullableContextAttribute("1")]
public FormPipeReader(PipeReader pipeReader);
    [NullableContextAttribute("1")]
public FormPipeReader(PipeReader pipeReader, Encoding encoding);
    [CompilerGeneratedAttribute]
public int get_ValueCountLimit();
    [CompilerGeneratedAttribute]
public void set_ValueCountLimit(int value);
    [CompilerGeneratedAttribute]
public int get_KeyLengthLimit();
    [CompilerGeneratedAttribute]
public void set_KeyLengthLimit(int value);
    [CompilerGeneratedAttribute]
public int get_ValueLengthLimit();
    [CompilerGeneratedAttribute]
public void set_ValueLengthLimit(int value);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.FormPipeReader/<ReadFormAsync>d__26")]
public Task`1<Dictionary`2<string, StringValues>> ReadFormAsync(CancellationToken cancellationToken);
    internal void ParseFormValues(ReadOnlySequence`1& buffer, KeyValueAccumulator& accumulator, bool isFinalBlock);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.WebUtilities.FormReader : object {
    public static int DefaultValueCountLimit;
    public static int DefaultKeyLengthLimit;
    public static int DefaultValueLengthLimit;
    public int ValueCountLimit { get; public set; }
    public int KeyLengthLimit { get; public set; }
    public int ValueLengthLimit { get; public set; }
    public FormReader(string data);
    public FormReader(string data, ArrayPool`1<char> charPool);
    public FormReader(Stream stream);
    public FormReader(Stream stream, Encoding encoding);
    public FormReader(Stream stream, Encoding encoding, ArrayPool`1<char> charPool);
    [CompilerGeneratedAttribute]
public int get_ValueCountLimit();
    [CompilerGeneratedAttribute]
public void set_ValueCountLimit(int value);
    [CompilerGeneratedAttribute]
public int get_KeyLengthLimit();
    [CompilerGeneratedAttribute]
public void set_KeyLengthLimit(int value);
    [CompilerGeneratedAttribute]
public int get_ValueLengthLimit();
    [CompilerGeneratedAttribute]
public void set_ValueLengthLimit(int value);
    public Nullable`1<KeyValuePair`2<string, string>> ReadNextPair();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.FormReader/<ReadNextPairAsync>d__33")]
public Task`1<Nullable`1<KeyValuePair`2<string, string>>> ReadNextPairAsync(CancellationToken cancellationToken);
    public Dictionary`2<string, StringValues> ReadForm();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.FormReader/<ReadFormAsync>d__43")]
public Task`1<Dictionary`2<string, StringValues>> ReadFormAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.WebUtilities.HttpRequestStreamReader : TextReader {
    public HttpRequestStreamReader(Stream stream, Encoding encoding);
    public HttpRequestStreamReader(Stream stream, Encoding encoding, int bufferSize);
    public HttpRequestStreamReader(Stream stream, Encoding encoding, int bufferSize, ArrayPool`1<byte> bytePool, ArrayPool`1<char> charPool);
    protected virtual void Dispose(bool disposing);
    public virtual int Peek();
    public virtual int Read();
    public virtual int Read(Char[] buffer, int index, int count);
    [NullableContextAttribute("0")]
public virtual int Read(Span`1<char> buffer);
    public virtual Task`1<int> ReadAsync(Char[] buffer, int index, int count);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.HttpRequestStreamReader/<ReadAsync>d__23")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<char> buffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.HttpRequestStreamReader/<ReadLineAsync>d__24")]
public virtual Task`1<string> ReadLineAsync();
    [NullableContextAttribute("2")]
public virtual string ReadLine();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.HttpRequestStreamReader/<ReadToEndAsync>d__29")]
public virtual Task`1<string> ReadToEndAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.WebUtilities.HttpResponseStreamWriter : TextWriter {
    internal static int DefaultBufferSize;
    public Encoding Encoding { get; }
    public HttpResponseStreamWriter(Stream stream, Encoding encoding);
    public HttpResponseStreamWriter(Stream stream, Encoding encoding, int bufferSize);
    public HttpResponseStreamWriter(Stream stream, Encoding encoding, int bufferSize, ArrayPool`1<byte> bytePool, ArrayPool`1<char> charPool);
    [CompilerGeneratedAttribute]
public virtual Encoding get_Encoding();
    public virtual void Write(char value);
    public virtual void Write(Char[] values, int index, int count);
    [NullableContextAttribute("0")]
public virtual void Write(ReadOnlySpan`1<char> value);
    [NullableContextAttribute("2")]
public virtual void Write(string value);
    [NullableContextAttribute("0")]
public virtual void WriteLine(ReadOnlySpan`1<char> value);
    public virtual Task WriteAsync(char value);
    public virtual Task WriteAsync(Char[] values, int index, int count);
    public virtual Task WriteAsync(string value);
    [NullableContextAttribute("0")]
public virtual Task WriteAsync(ReadOnlyMemory`1<char> value, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual Task WriteLineAsync(ReadOnlyMemory`1<char> value, CancellationToken cancellationToken);
    public virtual Task WriteLineAsync(Char[] values, int index, int count);
    public virtual Task WriteLineAsync(char value);
    public virtual Task WriteLineAsync(string value);
    public virtual void Flush();
    public virtual Task FlushAsync();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.HttpResponseStreamWriter/<DisposeAsync>d__40")]
public virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.WebUtilities.KeyValueAccumulator : ValueType {
    private Dictionary`2<string, StringValues> _accumulator;
    private Dictionary`2<string, List`1<string>> _expandingAccumulator;
    [CompilerGeneratedAttribute]
private int <ValueCount>k__BackingField;
    public bool HasValues { get; }
    public int KeyCount { get; }
    public int ValueCount { get; }
    public void Append(string key, string value);
    public bool get_HasValues();
    public int get_KeyCount();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_ValueCount();
    public Dictionary`2<string, StringValues> GetResults();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.WebUtilities.MultipartBoundary : object {
    public bool ExpectLeadingCrlf { get; public set; }
    public Byte[] BoundaryBytes { get; }
    public int FinalBoundaryLength { get; }
    public MultipartBoundary(string boundary, bool expectLeadingCrlf);
    public int GetSkipValue(byte input);
    public bool get_ExpectLeadingCrlf();
    public void set_ExpectLeadingCrlf(bool value);
    [CompilerGeneratedAttribute]
public Byte[] get_BoundaryBytes();
    [CompilerGeneratedAttribute]
public int get_FinalBoundaryLength();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.WebUtilities.MultipartReader : object {
    public static int DefaultHeadersCountLimit;
    public static int DefaultHeadersLengthLimit;
    public int HeadersCountLimit { get; public set; }
    public int HeadersLengthLimit { get; public set; }
    public Nullable`1<long> BodyLengthLimit { get; public set; }
    public MultipartReader(string boundary, Stream stream);
    public MultipartReader(string boundary, Stream stream, int bufferSize);
    [CompilerGeneratedAttribute]
public int get_HeadersCountLimit();
    [CompilerGeneratedAttribute]
public void set_HeadersCountLimit(int value);
    [CompilerGeneratedAttribute]
public int get_HeadersLengthLimit();
    [CompilerGeneratedAttribute]
public void set_HeadersLengthLimit(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_BodyLengthLimit();
    [CompilerGeneratedAttribute]
public void set_BodyLengthLimit(Nullable`1<long> value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.MultipartReader/<ReadNextSectionAsync>d__20")]
public Task`1<MultipartSection> ReadNextSectionAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.WebUtilities.MultipartReaderStream : Stream {
    public bool FinalBoundaryFound { get; }
    public Nullable`1<long> LengthLimit { get; public set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public MultipartReaderStream(BufferedReadStream stream, MultipartBoundary boundary);
    public MultipartReaderStream(BufferedReadStream stream, MultipartBoundary boundary, ArrayPool`1<byte> bytePool);
    [CompilerGeneratedAttribute]
public bool get_FinalBoundaryFound();
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_LengthLimit();
    [CompilerGeneratedAttribute]
public void set_LengthLimit(Nullable`1<long> value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.MultipartReaderStream/<ReadAsync>d__38")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.WebUtilities.MultipartSection : object {
    public string ContentType { get; }
    public string ContentDisposition { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, StringValues> Headers { get; public set; }
    [NullableAttribute("1")]
public Stream Body { get; public set; }
    public Nullable`1<long> BaseStreamOffset { get; public set; }
    public string get_ContentType();
    public string get_ContentDisposition();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, StringValues> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(Dictionary`2<string, StringValues> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Stream get_Body();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Body(Stream value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_BaseStreamOffset();
    [CompilerGeneratedAttribute]
public void set_BaseStreamOffset(Nullable`1<long> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.WebUtilities.MultipartSectionConverterExtensions : object {
    [ExtensionAttribute]
public static FileMultipartSection AsFileSection(MultipartSection section);
    [ExtensionAttribute]
public static FormMultipartSection AsFormDataSection(MultipartSection section);
    [ExtensionAttribute]
public static ContentDispositionHeaderValue GetContentDispositionHeader(MultipartSection section);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.WebUtilities.MultipartSectionStreamExtensions : object {
    [ExtensionAttribute]
public static Task`1<string> ReadAsStringAsync(MultipartSection section);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.MultipartSectionStreamExtensions/<ReadAsStringAsync>d__1")]
[ExtensionAttribute]
public static ValueTask`1<string> ReadAsStringAsync(MultipartSection section, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.WebUtilities.PagedByteBuffer : object {
    internal static int PageSize;
    public int Length { get; }
    internal bool Disposed { get; }
    internal List`1<Byte[]> Pages { get; }
    public PagedByteBuffer(ArrayPool`1<byte> arrayPool);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
internal bool get_Disposed();
    [CompilerGeneratedAttribute]
internal List`1<Byte[]> get_Pages();
    public void Add(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public void Add(ReadOnlyMemory`1<byte> memory);
    public void MoveTo(Stream stream);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.PagedByteBuffer/<MoveToAsync>d__21")]
public Task MoveToAsync(PipeWriter writer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.PagedByteBuffer/<MoveToAsync>d__22")]
public Task MoveToAsync(Stream stream, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.AspNetCore.WebUtilities.QueryHelpers : object {
    public static string AddQueryString(string uri, string name, string value);
    public static string AddQueryString(string uri, IDictionary`2<string, string> queryString);
    public static string AddQueryString(string uri, IEnumerable`1<KeyValuePair`2<string, StringValues>> queryString);
    public static string AddQueryString(string uri, IEnumerable`1<KeyValuePair`2<string, string>> queryString);
    public static Dictionary`2<string, StringValues> ParseQuery(string queryString);
    [NullableContextAttribute("2")]
public static Dictionary`2<string, StringValues> ParseNullableQuery(string queryString);
}
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.WebUtilities.QueryStringEnumerable : ValueType {
    private ReadOnlyMemory`1<char> _queryString;
    [NullableContextAttribute("2")]
public QueryStringEnumerable(string queryString);
    public QueryStringEnumerable(ReadOnlyMemory`1<char> queryString);
    public Enumerator GetEnumerator();
}
public static class Microsoft.AspNetCore.WebUtilities.ReasonPhrases : object {
    [NullableContextAttribute("1")]
public static string GetReasonPhrase(int statusCode);
}
internal static class Microsoft.AspNetCore.WebUtilities.Resources : object {
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string FormPipeReader_KeyOrValueTooLarge { get; }
    internal static string FormPipeReader_KeyTooLarge { get; }
    internal static string FormPipeReader_ValueTooLarge { get; }
    internal static string HttpRequestStreamReader_StreamNotReadable { get; }
    internal static string HttpResponseStreamWriter_StreamNotWritable { get; }
    internal static string WebEncoders_InvalidCountOffsetOrLength { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_FormPipeReader_KeyOrValueTooLarge();
    internal static string FormatFormPipeReader_KeyOrValueTooLarge(object p0, object p1);
    internal static string get_FormPipeReader_KeyTooLarge();
    internal static string FormatFormPipeReader_KeyTooLarge(object p0);
    internal static string get_FormPipeReader_ValueTooLarge();
    internal static string FormatFormPipeReader_ValueTooLarge(object p0);
    internal static string get_HttpRequestStreamReader_StreamNotReadable();
    internal static string get_HttpResponseStreamWriter_StreamNotWritable();
    internal static string get_WebEncoders_InvalidCountOffsetOrLength();
    internal static string FormatWebEncoders_InvalidCountOffsetOrLength(object p0, object p1, object p2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.WebUtilities.StreamHelperExtensions : object {
    [ExtensionAttribute]
public static Task DrainAsync(Stream stream, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task DrainAsync(Stream stream, Nullable`1<long> limit, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.StreamHelperExtensions/<DrainAsync>d__3")]
[ExtensionAttribute]
public static Task DrainAsync(Stream stream, ArrayPool`1<byte> bytePool, Nullable`1<long> limit, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.AspNetCore.WebUtilities.WebEncoders : object {
    public static Byte[] Base64UrlDecode(string input);
    public static Byte[] Base64UrlDecode(string input, int offset, int count);
    public static Byte[] Base64UrlDecode(string input, int offset, Char[] buffer, int bufferOffset, int count);
    public static int GetArraySizeRequiredToDecode(int count);
    public static string Base64UrlEncode(Byte[] input);
    public static string Base64UrlEncode(Byte[] input, int offset, int count);
    public static int Base64UrlEncode(Byte[] input, int offset, Char[] output, int outputOffset, int count);
    public static int GetArraySizeRequiredToEncode(int count);
    [NullableContextAttribute("0")]
[SkipLocalsInitAttribute]
public static string Base64UrlEncode(ReadOnlySpan`1<byte> input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Extensions.WebEncoders.Sources.EncoderResources : object {
    internal static string WebEncoders_InvalidCountOffsetOrLength;
    internal static string WebEncoders_MalformedInput;
    internal static string FormatWebEncoders_InvalidCountOffsetOrLength(object p0, object p1, object p2);
    internal static string FormatWebEncoders_MalformedInput(object p0);
}
