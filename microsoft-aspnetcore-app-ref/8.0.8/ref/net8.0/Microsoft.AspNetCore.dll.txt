[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Builder.ConfigureHostBuilder : object {
    public IDictionary`2<object, object> Properties { get; }
    internal ConfigureHostBuilder(HostBuilderContext context, ConfigurationManager configuration, IServiceCollection services);
    public sealed virtual IDictionary`2<object, object> get_Properties();
    private sealed virtual override IHost Microsoft.Extensions.Hosting.IHostBuilder.Build();
    public sealed virtual IHostBuilder ConfigureAppConfiguration(Action`2<HostBuilderContext, IConfigurationBuilder> configureDelegate);
    public sealed virtual IHostBuilder ConfigureContainer(Action`2<HostBuilderContext, TContainerBuilder> configureDelegate);
    public sealed virtual IHostBuilder ConfigureHostConfiguration(Action`1<IConfigurationBuilder> configureDelegate);
    public sealed virtual IHostBuilder ConfigureServices(Action`2<HostBuilderContext, IServiceCollection> configureDelegate);
    public sealed virtual IHostBuilder UseServiceProviderFactory(IServiceProviderFactory`1<TContainerBuilder> factory);
    public sealed virtual IHostBuilder UseServiceProviderFactory(Func`2<HostBuilderContext, IServiceProviderFactory`1<TContainerBuilder>> factory);
    private sealed virtual override IHostBuilder Microsoft.AspNetCore.Hosting.Infrastructure.ISupportsConfigureWebHost.ConfigureWebHost(Action`1<IWebHostBuilder> configure, Action`1<WebHostBuilderOptions> configureOptions);
    internal void ApplyServiceProviderFactory(HostApplicationBuilder hostApplicationBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Builder.ConfigureWebHostBuilder : object {
    internal ConfigureWebHostBuilder(WebHostBuilderContext webHostBuilderContext, ConfigurationManager configuration, IServiceCollection services);
    private sealed virtual override IWebHost Microsoft.AspNetCore.Hosting.IWebHostBuilder.Build();
    public sealed virtual IWebHostBuilder ConfigureAppConfiguration(Action`2<WebHostBuilderContext, IConfigurationBuilder> configureDelegate);
    public sealed virtual IWebHostBuilder ConfigureServices(Action`2<WebHostBuilderContext, IServiceCollection> configureServices);
    public sealed virtual IWebHostBuilder ConfigureServices(Action`1<IServiceCollection> configureServices);
    public sealed virtual string GetSetting(string key);
    public sealed virtual IWebHostBuilder UseSetting(string key, string value);
    private sealed virtual override IWebHostBuilder Microsoft.AspNetCore.Hosting.Infrastructure.ISupportsStartup.Configure(Action`1<IApplicationBuilder> configure);
    private sealed virtual override IWebHostBuilder Microsoft.AspNetCore.Hosting.Infrastructure.ISupportsStartup.Configure(Action`2<WebHostBuilderContext, IApplicationBuilder> configure);
    private sealed virtual override IWebHostBuilder Microsoft.AspNetCore.Hosting.Infrastructure.ISupportsStartup.UseStartup(Type startupType);
    private sealed virtual override IWebHostBuilder Microsoft.AspNetCore.Hosting.Infrastructure.ISupportsStartup.UseStartup(Func`2<WebHostBuilderContext, TStartup> startupFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerToString(),nq}")]
[DebuggerTypeProxyAttribute("Microsoft.AspNetCore.Builder.WebApplication/WebApplicationDebugView")]
public class Microsoft.AspNetCore.Builder.WebApplication : object {
    internal static string GlobalEndpointRouteBuilderKey;
    public IServiceProvider Services { get; }
    public IConfiguration Configuration { get; }
    public IWebHostEnvironment Environment { get; }
    public IHostApplicationLifetime Lifetime { get; }
    public ILogger Logger { get; }
    public ICollection`1<string> Urls { get; }
    private IServiceProvider Microsoft.AspNetCore.Builder.IApplicationBuilder.ApplicationServices { get; private set; }
    internal IFeatureCollection ServerFeatures { get; }
    private IFeatureCollection Microsoft.AspNetCore.Builder.IApplicationBuilder.ServerFeatures { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IDictionary`2<string, object> Properties { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<string, object> Microsoft.AspNetCore.Builder.IApplicationBuilder.Properties { get; }
    internal ICollection`1<EndpointDataSource> DataSources { get; }
    private ICollection`1<EndpointDataSource> Microsoft.AspNetCore.Routing.IEndpointRouteBuilder.DataSources { get; }
    internal ApplicationBuilder ApplicationBuilder { get; }
    private IServiceProvider Microsoft.AspNetCore.Routing.IEndpointRouteBuilder.ServiceProvider { get; }
    internal WebApplication(IHost host);
    public sealed virtual IServiceProvider get_Services();
    public IConfiguration get_Configuration();
    public IWebHostEnvironment get_Environment();
    public IHostApplicationLifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    public ICollection`1<string> get_Urls();
    private sealed virtual override IServiceProvider Microsoft.AspNetCore.Builder.IApplicationBuilder.get_ApplicationServices();
    private sealed virtual override void Microsoft.AspNetCore.Builder.IApplicationBuilder.set_ApplicationServices(IServiceProvider value);
    internal IFeatureCollection get_ServerFeatures();
    private sealed virtual override IFeatureCollection Microsoft.AspNetCore.Builder.IApplicationBuilder.get_ServerFeatures();
    internal IDictionary`2<string, object> get_Properties();
    private sealed virtual override IDictionary`2<string, object> Microsoft.AspNetCore.Builder.IApplicationBuilder.get_Properties();
    internal ICollection`1<EndpointDataSource> get_DataSources();
    private sealed virtual override ICollection`1<EndpointDataSource> Microsoft.AspNetCore.Routing.IEndpointRouteBuilder.get_DataSources();
    [CompilerGeneratedAttribute]
internal ApplicationBuilder get_ApplicationBuilder();
    private sealed virtual override IServiceProvider Microsoft.AspNetCore.Routing.IEndpointRouteBuilder.get_ServiceProvider();
    public static WebApplication Create(String[] args);
    public static WebApplicationBuilder CreateBuilder();
    public static WebApplicationBuilder CreateSlimBuilder();
    public static WebApplicationBuilder CreateBuilder(String[] args);
    public static WebApplicationBuilder CreateSlimBuilder(String[] args);
    public static WebApplicationBuilder CreateBuilder(WebApplicationOptions options);
    public static WebApplicationBuilder CreateSlimBuilder(WebApplicationOptions options);
    public static WebApplicationBuilder CreateEmptyBuilder(WebApplicationOptions options);
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public Task RunAsync(string url);
    [NullableContextAttribute("2")]
public void Run(string url);
    private sealed virtual override void System.IDisposable.Dispose();
    public sealed virtual ValueTask DisposeAsync();
    internal RequestDelegate BuildRequestDelegate();
    private sealed virtual override RequestDelegate Microsoft.AspNetCore.Builder.IApplicationBuilder.Build();
    private sealed virtual override IApplicationBuilder Microsoft.AspNetCore.Builder.IApplicationBuilder.New();
    public sealed virtual IApplicationBuilder Use(Func`2<RequestDelegate, RequestDelegate> middleware);
    private sealed virtual override IApplicationBuilder Microsoft.AspNetCore.Routing.IEndpointRouteBuilder.CreateApplicationBuilder();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Builder.WebApplicationBuilder : object {
    public IWebHostEnvironment Environment { get; }
    public IServiceCollection Services { get; }
    public ConfigurationManager Configuration { get; }
    public ILoggingBuilder Logging { get; }
    public IMetricsBuilder Metrics { get; }
    public ConfigureWebHostBuilder WebHost { get; }
    public ConfigureHostBuilder Host { get; }
    private IDictionary`2<object, object> Microsoft.Extensions.Hosting.IHostApplicationBuilder.Properties { get; }
    private IConfigurationManager Microsoft.Extensions.Hosting.IHostApplicationBuilder.Configuration { get; }
    private IHostEnvironment Microsoft.Extensions.Hosting.IHostApplicationBuilder.Environment { get; }
    internal WebApplicationBuilder(WebApplicationOptions options, Action`1<IHostBuilder> configureDefaults);
    internal WebApplicationBuilder(WebApplicationOptions options, bool slim, Action`1<IHostBuilder> configureDefaults);
    internal WebApplicationBuilder(WebApplicationOptions options, bool slim, bool empty, Action`1<IHostBuilder> configureDefaults);
    [CompilerGeneratedAttribute]
public IWebHostEnvironment get_Environment();
    public sealed virtual IServiceCollection get_Services();
    public ConfigurationManager get_Configuration();
    public sealed virtual ILoggingBuilder get_Logging();
    public sealed virtual IMetricsBuilder get_Metrics();
    [CompilerGeneratedAttribute]
public ConfigureWebHostBuilder get_WebHost();
    [CompilerGeneratedAttribute]
public ConfigureHostBuilder get_Host();
    private sealed virtual override IDictionary`2<object, object> Microsoft.Extensions.Hosting.IHostApplicationBuilder.get_Properties();
    private sealed virtual override IConfigurationManager Microsoft.Extensions.Hosting.IHostApplicationBuilder.get_Configuration();
    private sealed virtual override IHostEnvironment Microsoft.Extensions.Hosting.IHostApplicationBuilder.get_Environment();
    public WebApplication Build();
    private sealed virtual override void Microsoft.Extensions.Hosting.IHostApplicationBuilder.ConfigureContainer(IServiceProviderFactory`1<TContainerBuilder> factory, Action`1<TContainerBuilder> configure);
    [CompilerGeneratedAttribute]
internal static bool <ApplyDefaultAppConfigurationSlim>g__GetReloadConfigOnChangeValue|14_0(ConfigurationManager configuration);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Builder.WebApplicationOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Args { get; public set; }
    public string EnvironmentName { get; public set; }
    public string ApplicationName { get; public set; }
    public string ContentRootPath { get; public set; }
    public string WebRootPath { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Args();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Args(String[] value);
    [CompilerGeneratedAttribute]
public string get_EnvironmentName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EnvironmentName(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
public string get_ContentRootPath();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ContentRootPath(string value);
    [CompilerGeneratedAttribute]
public string get_WebRootPath();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_WebRootPath(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.ForwardedHeadersOptionsSetup : object {
    public ForwardedHeadersOptionsSetup(IConfiguration configuration);
    public sealed virtual void Configure(ForwardedHeadersOptions options);
}
internal class Microsoft.AspNetCore.ForwardedHeadersStartupFilter : object {
    [NullableContextAttribute("1")]
public ForwardedHeadersStartupFilter(IConfiguration configuration);
    [NullableContextAttribute("1")]
public sealed virtual Action`1<IApplicationBuilder> Configure(Action`1<IApplicationBuilder> next);
}
internal class Microsoft.AspNetCore.HostFilteringStartupFilter : object {
    [NullableContextAttribute("1")]
public sealed virtual Action`1<IApplicationBuilder> Configure(Action`1<IApplicationBuilder> next);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Hosting.BootstrapHostBuilder : object {
    public IDictionary`2<object, object> Properties { get; }
    public HostBuilderContext Context { get; }
    public BootstrapHostBuilder(HostApplicationBuilder builder);
    public sealed virtual IDictionary`2<object, object> get_Properties();
    [CompilerGeneratedAttribute]
public HostBuilderContext get_Context();
    public sealed virtual IHostBuilder ConfigureHostConfiguration(Action`1<IConfigurationBuilder> configureDelegate);
    public sealed virtual IHostBuilder ConfigureAppConfiguration(Action`2<HostBuilderContext, IConfigurationBuilder> configureDelegate);
    public sealed virtual IHostBuilder ConfigureServices(Action`2<HostBuilderContext, IServiceCollection> configureDelegate);
    public sealed virtual IHost Build();
    public sealed virtual IHostBuilder ConfigureContainer(Action`2<HostBuilderContext, TContainerBuilder> configureDelegate);
    public sealed virtual IHostBuilder UseServiceProviderFactory(IServiceProviderFactory`1<TContainerBuilder> factory);
    public sealed virtual IHostBuilder UseServiceProviderFactory(Func`2<HostBuilderContext, IServiceProviderFactory`1<TContainerBuilder>> factory);
    public ServiceDescriptor RunDefaultCallbacks();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.HostingPathResolver : object {
    public static string ResolvePath(string contentRootPath);
    public static string ResolvePath(string contentRootPath, string basePath);
}
internal static class Microsoft.AspNetCore.StartupLinkerOptions : object {
    public static DynamicallyAccessedMemberTypes Accessibility;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.AspNetCore.WebHost : object {
    public static IWebHost Start(RequestDelegate app);
    public static IWebHost Start(string url, RequestDelegate app);
    public static IWebHost Start(Action`1<IRouteBuilder> routeBuilder);
    public static IWebHost Start(string url, Action`1<IRouteBuilder> routeBuilder);
    public static IWebHost StartWith(Action`1<IApplicationBuilder> app);
    public static IWebHost StartWith(string url, Action`1<IApplicationBuilder> app);
    public static IWebHostBuilder CreateDefaultBuilder();
    public static IWebHostBuilder CreateDefaultBuilder(String[] args);
    internal static void ConfigureWebDefaults(IWebHostBuilder builder);
    internal static void ConfigureWebDefaultsSlim(IWebHostBuilder builder);
    public static IWebHostBuilder CreateDefaultBuilder(String[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.GenericHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IHostBuilder ConfigureWebHostDefaults(IHostBuilder builder, Action`1<IWebHostBuilder> configure);
    [ExtensionAttribute]
public static IHostBuilder ConfigureWebHostDefaults(IHostBuilder builder, Action`1<IWebHostBuilder> configure, Action`1<WebHostBuilderOptions> configureOptions);
}
