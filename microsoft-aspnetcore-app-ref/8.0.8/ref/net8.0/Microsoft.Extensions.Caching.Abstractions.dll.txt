[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryExtensions : object {
    [ExtensionAttribute]
public static DistributedCacheEntryOptions SetAbsoluteExpiration(DistributedCacheEntryOptions options, DateTimeOffset absolute);
    [ExtensionAttribute]
public static DistributedCacheEntryOptions SetAbsoluteExpiration(DistributedCacheEntryOptions options, TimeSpan relative);
    [ExtensionAttribute]
public static DistributedCacheEntryOptions SetSlidingExpiration(DistributedCacheEntryOptions options, TimeSpan offset);
}
public class Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions : object {
    public Nullable`1<DateTimeOffset> AbsoluteExpiration { get; public set; }
    public Nullable`1<TimeSpan> AbsoluteExpirationRelativeToNow { get; public set; }
    public Nullable`1<TimeSpan> SlidingExpiration { get; public set; }
    public Nullable`1<DateTimeOffset> get_AbsoluteExpiration();
    public void set_AbsoluteExpiration(Nullable`1<DateTimeOffset> value);
    public Nullable`1<TimeSpan> get_AbsoluteExpirationRelativeToNow();
    public void set_AbsoluteExpirationRelativeToNow(Nullable`1<TimeSpan> value);
    public Nullable`1<TimeSpan> get_SlidingExpiration();
    public void set_SlidingExpiration(Nullable`1<TimeSpan> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions : object {
    [ExtensionAttribute]
public static string GetString(IDistributedCache cache, string key);
    [ExtensionAttribute]
public static Task`1<string> GetStringAsync(IDistributedCache cache, string key, CancellationToken token);
    [ExtensionAttribute]
public static void Set(IDistributedCache cache, string key, Byte[] value);
    [ExtensionAttribute]
public static Task SetAsync(IDistributedCache cache, string key, Byte[] value, CancellationToken token);
    [ExtensionAttribute]
public static void SetString(IDistributedCache cache, string key, string value);
    [ExtensionAttribute]
public static void SetString(IDistributedCache cache, string key, string value, DistributedCacheEntryOptions options);
    [ExtensionAttribute]
public static Task SetStringAsync(IDistributedCache cache, string key, string value, DistributedCacheEntryOptions options, CancellationToken token);
    [ExtensionAttribute]
public static Task SetStringAsync(IDistributedCache cache, string key, string value, CancellationToken token);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Caching.Distributed.IDistributedCache {
    public abstract virtual Byte[] Get(string key);
    public abstract virtual Task`1<Byte[]> GetAsync(string key, CancellationToken token);
    public abstract virtual void Refresh(string key);
    public abstract virtual Task RefreshAsync(string key, CancellationToken token);
    public abstract virtual void Remove(string key);
    public abstract virtual Task RemoveAsync(string key, CancellationToken token);
    public abstract virtual void Set(string key, Byte[] value, DistributedCacheEntryOptions options);
    public abstract virtual Task SetAsync(string key, Byte[] value, DistributedCacheEntryOptions options, CancellationToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Caching.Memory.CacheEntryExtensions : object {
    [ExtensionAttribute]
public static ICacheEntry AddExpirationToken(ICacheEntry entry, IChangeToken expirationToken);
    [ExtensionAttribute]
public static ICacheEntry RegisterPostEvictionCallback(ICacheEntry entry, PostEvictionDelegate callback);
    [ExtensionAttribute]
public static ICacheEntry RegisterPostEvictionCallback(ICacheEntry entry, PostEvictionDelegate callback, object state);
    [ExtensionAttribute]
public static ICacheEntry SetAbsoluteExpiration(ICacheEntry entry, DateTimeOffset absolute);
    [ExtensionAttribute]
public static ICacheEntry SetAbsoluteExpiration(ICacheEntry entry, TimeSpan relative);
    [ExtensionAttribute]
public static ICacheEntry SetOptions(ICacheEntry entry, MemoryCacheEntryOptions options);
    [ExtensionAttribute]
public static ICacheEntry SetPriority(ICacheEntry entry, CacheItemPriority priority);
    [ExtensionAttribute]
public static ICacheEntry SetSize(ICacheEntry entry, long size);
    [ExtensionAttribute]
public static ICacheEntry SetSlidingExpiration(ICacheEntry entry, TimeSpan offset);
    [ExtensionAttribute]
public static ICacheEntry SetValue(ICacheEntry entry, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Caching.Memory.CacheExtensions : object {
    [ExtensionAttribute]
public static object Get(IMemoryCache cache, object key);
    [ExtensionAttribute]
public static Task`1<TItem> GetOrCreateAsync(IMemoryCache cache, object key, Func`2<ICacheEntry, Task`1<TItem>> factory);
    [ExtensionAttribute]
public static TItem GetOrCreate(IMemoryCache cache, object key, Func`2<ICacheEntry, TItem> factory);
    [ExtensionAttribute]
public static TItem Get(IMemoryCache cache, object key);
    [ExtensionAttribute]
public static TItem Set(IMemoryCache cache, object key, TItem value);
    [ExtensionAttribute]
public static TItem Set(IMemoryCache cache, object key, TItem value, MemoryCacheEntryOptions options);
    [ExtensionAttribute]
public static TItem Set(IMemoryCache cache, object key, TItem value, IChangeToken expirationToken);
    [ExtensionAttribute]
public static TItem Set(IMemoryCache cache, object key, TItem value, DateTimeOffset absoluteExpiration);
    [ExtensionAttribute]
public static TItem Set(IMemoryCache cache, object key, TItem value, TimeSpan absoluteExpirationRelativeToNow);
    [ExtensionAttribute]
public static bool TryGetValue(IMemoryCache cache, object key, TItem& value);
}
public enum Microsoft.Extensions.Caching.Memory.CacheItemPriority : Enum {
    public int value__;
    public static CacheItemPriority Low;
    public static CacheItemPriority Normal;
    public static CacheItemPriority High;
    public static CacheItemPriority NeverRemove;
}
public enum Microsoft.Extensions.Caching.Memory.EvictionReason : Enum {
    public int value__;
    public static EvictionReason None;
    public static EvictionReason Removed;
    public static EvictionReason Replaced;
    public static EvictionReason Expired;
    public static EvictionReason TokenExpired;
    public static EvictionReason Capacity;
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Caching.Memory.ICacheEntry {
    public Nullable`1<DateTimeOffset> AbsoluteExpiration { get; public set; }
    public Nullable`1<TimeSpan> AbsoluteExpirationRelativeToNow { get; public set; }
    public IList`1<IChangeToken> ExpirationTokens { get; }
    public object Key { get; }
    public IList`1<PostEvictionCallbackRegistration> PostEvictionCallbacks { get; }
    public CacheItemPriority Priority { get; public set; }
    public Nullable`1<long> Size { get; public set; }
    public Nullable`1<TimeSpan> SlidingExpiration { get; public set; }
    [NullableAttribute("2")]
public object Value { get; public set; }
    public abstract virtual Nullable`1<DateTimeOffset> get_AbsoluteExpiration();
    public abstract virtual void set_AbsoluteExpiration(Nullable`1<DateTimeOffset> value);
    public abstract virtual Nullable`1<TimeSpan> get_AbsoluteExpirationRelativeToNow();
    public abstract virtual void set_AbsoluteExpirationRelativeToNow(Nullable`1<TimeSpan> value);
    public abstract virtual IList`1<IChangeToken> get_ExpirationTokens();
    public abstract virtual object get_Key();
    public abstract virtual IList`1<PostEvictionCallbackRegistration> get_PostEvictionCallbacks();
    public abstract virtual CacheItemPriority get_Priority();
    public abstract virtual void set_Priority(CacheItemPriority value);
    public abstract virtual Nullable`1<long> get_Size();
    public abstract virtual void set_Size(Nullable`1<long> value);
    public abstract virtual Nullable`1<TimeSpan> get_SlidingExpiration();
    public abstract virtual void set_SlidingExpiration(Nullable`1<TimeSpan> value);
    [NullableContextAttribute("2")]
public abstract virtual object get_Value();
    [NullableContextAttribute("2")]
public abstract virtual void set_Value(object value);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Caching.Memory.IMemoryCache {
    public abstract virtual ICacheEntry CreateEntry(object key);
    public abstract virtual void Remove(object key);
    public abstract virtual bool TryGetValue(object key, Object& value);
    [NullableContextAttribute("2")]
public virtual MemoryCacheStatistics GetCurrentStatistics();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions : object {
    [ExtensionAttribute]
public static MemoryCacheEntryOptions AddExpirationToken(MemoryCacheEntryOptions options, IChangeToken expirationToken);
    [ExtensionAttribute]
public static MemoryCacheEntryOptions RegisterPostEvictionCallback(MemoryCacheEntryOptions options, PostEvictionDelegate callback);
    [ExtensionAttribute]
public static MemoryCacheEntryOptions RegisterPostEvictionCallback(MemoryCacheEntryOptions options, PostEvictionDelegate callback, object state);
    [ExtensionAttribute]
public static MemoryCacheEntryOptions SetAbsoluteExpiration(MemoryCacheEntryOptions options, DateTimeOffset absolute);
    [ExtensionAttribute]
public static MemoryCacheEntryOptions SetAbsoluteExpiration(MemoryCacheEntryOptions options, TimeSpan relative);
    [ExtensionAttribute]
public static MemoryCacheEntryOptions SetPriority(MemoryCacheEntryOptions options, CacheItemPriority priority);
    [ExtensionAttribute]
public static MemoryCacheEntryOptions SetSize(MemoryCacheEntryOptions options, long size);
    [ExtensionAttribute]
public static MemoryCacheEntryOptions SetSlidingExpiration(MemoryCacheEntryOptions options, TimeSpan offset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions : object {
    public Nullable`1<DateTimeOffset> AbsoluteExpiration { get; public set; }
    public Nullable`1<TimeSpan> AbsoluteExpirationRelativeToNow { get; public set; }
    public IList`1<IChangeToken> ExpirationTokens { get; }
    public IList`1<PostEvictionCallbackRegistration> PostEvictionCallbacks { get; }
    public CacheItemPriority Priority { get; public set; }
    public Nullable`1<long> Size { get; public set; }
    public Nullable`1<TimeSpan> SlidingExpiration { get; public set; }
    public Nullable`1<DateTimeOffset> get_AbsoluteExpiration();
    public void set_AbsoluteExpiration(Nullable`1<DateTimeOffset> value);
    public Nullable`1<TimeSpan> get_AbsoluteExpirationRelativeToNow();
    public void set_AbsoluteExpirationRelativeToNow(Nullable`1<TimeSpan> value);
    public IList`1<IChangeToken> get_ExpirationTokens();
    public IList`1<PostEvictionCallbackRegistration> get_PostEvictionCallbacks();
    public CacheItemPriority get_Priority();
    public void set_Priority(CacheItemPriority value);
    public Nullable`1<long> get_Size();
    public void set_Size(Nullable`1<long> value);
    public Nullable`1<TimeSpan> get_SlidingExpiration();
    public void set_SlidingExpiration(Nullable`1<TimeSpan> value);
}
public class Microsoft.Extensions.Caching.Memory.MemoryCacheStatistics : object {
    public long CurrentEntryCount { get; public set; }
    public Nullable`1<long> CurrentEstimatedSize { get; public set; }
    public long TotalHits { get; public set; }
    public long TotalMisses { get; public set; }
    public long get_CurrentEntryCount();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CurrentEntryCount(long value);
    public Nullable`1<long> get_CurrentEstimatedSize();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CurrentEstimatedSize(Nullable`1<long> value);
    public long get_TotalHits();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TotalHits(long value);
    public long get_TotalMisses();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TotalMisses(long value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Caching.Memory.PostEvictionCallbackRegistration : object {
    public PostEvictionDelegate EvictionCallback { get; public set; }
    public object State { get; public set; }
    public PostEvictionDelegate get_EvictionCallback();
    public void set_EvictionCallback(PostEvictionDelegate value);
    public object get_State();
    public void set_State(object value);
}
public class Microsoft.Extensions.Caching.Memory.PostEvictionDelegate : MulticastDelegate {
    public PostEvictionDelegate(object object, IntPtr method);
    [NullableContextAttribute("2")]
public virtual void Invoke(object key, object value, EvictionReason reason, object state);
    public virtual IAsyncResult BeginInvoke(object key, object value, EvictionReason reason, object state, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface Microsoft.Extensions.Internal.ISystemClock {
    public DateTimeOffset UtcNow { get; }
    public abstract virtual DateTimeOffset get_UtcNow();
}
public class Microsoft.Extensions.Internal.SystemClock : object {
    public DateTimeOffset UtcNow { get; }
    public sealed virtual DateTimeOffset get_UtcNow();
}
