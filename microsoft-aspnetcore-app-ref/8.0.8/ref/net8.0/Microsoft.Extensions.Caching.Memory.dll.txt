[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache : object {
    public MemoryDistributedCache(IOptions`1<MemoryDistributedCacheOptions> optionsAccessor);
    public MemoryDistributedCache(IOptions`1<MemoryDistributedCacheOptions> optionsAccessor, ILoggerFactory loggerFactory);
    public sealed virtual Byte[] Get(string key);
    public sealed virtual Task`1<Byte[]> GetAsync(string key, CancellationToken token);
    public sealed virtual void Refresh(string key);
    public sealed virtual Task RefreshAsync(string key, CancellationToken token);
    public sealed virtual void Remove(string key);
    public sealed virtual Task RemoveAsync(string key, CancellationToken token);
    public sealed virtual void Set(string key, Byte[] value, DistributedCacheEntryOptions options);
    public sealed virtual Task SetAsync(string key, Byte[] value, DistributedCacheEntryOptions options, CancellationToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Caching.Memory.MemoryCache : object {
    public int Count { get; }
    public MemoryCache(IOptions`1<MemoryCacheOptions> optionsAccessor);
    public MemoryCache(IOptions`1<MemoryCacheOptions> optionsAccessor, ILoggerFactory loggerFactory);
    public int get_Count();
    public void Clear();
    public void Compact(double percentage);
    public sealed virtual ICacheEntry CreateEntry(object key);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    [NullableContextAttribute("2")]
public sealed virtual MemoryCacheStatistics GetCurrentStatistics();
    public sealed virtual void Remove(object key);
    public sealed virtual bool TryGetValue(object key, Object& result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Caching.Memory.MemoryCacheOptions : object {
    [CompilerGeneratedAttribute]
private bool <CompactOnMemoryPressure>k__BackingField;
    public ISystemClock Clock { get; public set; }
    public double CompactionPercentage { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This property is retained only for compatibility.  Remove use and instead call MemoryCache.Compact as needed.", "True")]
public bool CompactOnMemoryPressure { get; public set; }
    public TimeSpan ExpirationScanFrequency { get; public set; }
    [NullableAttribute("1")]
private MemoryCacheOptions Microsoft.Extensions.Options.IOptions<Microsoft.Extensions.Caching.Memory.MemoryCacheOptions>.Value { get; }
    public Nullable`1<long> SizeLimit { get; public set; }
    public bool TrackLinkedCacheEntries { get; public set; }
    public bool TrackStatistics { get; public set; }
    public ISystemClock get_Clock();
    public void set_Clock(ISystemClock value);
    public double get_CompactionPercentage();
    public void set_CompactionPercentage(double value);
    [CompilerGeneratedAttribute]
public bool get_CompactOnMemoryPressure();
    [CompilerGeneratedAttribute]
public void set_CompactOnMemoryPressure(bool value);
    public TimeSpan get_ExpirationScanFrequency();
    public void set_ExpirationScanFrequency(TimeSpan value);
    private sealed virtual override MemoryCacheOptions Microsoft.Extensions.Options.IOptions<Microsoft.Extensions.Caching.Memory.MemoryCacheOptions>.get_Value();
    public Nullable`1<long> get_SizeLimit();
    public void set_SizeLimit(Nullable`1<long> value);
    public bool get_TrackLinkedCacheEntries();
    public void set_TrackLinkedCacheEntries(bool value);
    public bool get_TrackStatistics();
    public void set_TrackStatistics(bool value);
}
public class Microsoft.Extensions.Caching.Memory.MemoryDistributedCacheOptions : MemoryCacheOptions {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddDistributedMemoryCache(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddDistributedMemoryCache(IServiceCollection services, Action`1<MemoryDistributedCacheOptions> setupAction);
    [ExtensionAttribute]
public static IServiceCollection AddMemoryCache(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddMemoryCache(IServiceCollection services, Action`1<MemoryCacheOptions> setupAction);
}
