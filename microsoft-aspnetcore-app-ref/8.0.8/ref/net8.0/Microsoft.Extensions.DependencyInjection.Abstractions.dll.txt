[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Extensions.DependencyInjection.ActivatorUtilities : object {
    public static ObjectFactory CreateFactory(Type instanceType, Type[] argumentTypes);
    public static ObjectFactory`1<T> CreateFactory(Type[] argumentTypes);
    public static object CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters);
    public static T CreateInstance(IServiceProvider provider, Object[] parameters);
    public static object GetServiceOrCreateInstance(IServiceProvider provider, Type type);
    public static T GetServiceOrCreateInstance(IServiceProvider provider);
}
[AttributeUsageAttribute("32767")]
public class Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesConstructorAttribute : Attribute {
}
[IsReadOnlyAttribute]
public class Microsoft.Extensions.DependencyInjection.AsyncServiceScope : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    [NullableAttribute("1")]
public IServiceProvider ServiceProvider { get; }
    [NullableContextAttribute("1")]
public AsyncServiceScope(IServiceScope serviceScope);
    [NullableContextAttribute("1")]
public sealed virtual IServiceProvider get_ServiceProvider();
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection Add(IServiceCollection collection, ServiceDescriptor descriptor);
    [ExtensionAttribute]
public static IServiceCollection Add(IServiceCollection collection, IEnumerable`1<ServiceDescriptor> descriptors);
    [ExtensionAttribute]
public static IServiceCollection RemoveAll(IServiceCollection collection, Type serviceType);
    [ExtensionAttribute]
public static IServiceCollection RemoveAll(IServiceCollection collection);
    [ExtensionAttribute]
public static IServiceCollection Replace(IServiceCollection collection, ServiceDescriptor descriptor);
    [ExtensionAttribute]
public static void TryAdd(IServiceCollection collection, ServiceDescriptor descriptor);
    [ExtensionAttribute]
public static void TryAdd(IServiceCollection collection, IEnumerable`1<ServiceDescriptor> descriptors);
    [ExtensionAttribute]
public static void TryAddEnumerable(IServiceCollection services, ServiceDescriptor descriptor);
    [ExtensionAttribute]
public static void TryAddEnumerable(IServiceCollection services, IEnumerable`1<ServiceDescriptor> descriptors);
    [ExtensionAttribute]
public static void TryAddScoped(IServiceCollection collection, Type service);
    [ExtensionAttribute]
public static void TryAddScoped(IServiceCollection collection, Type service, Func`2<IServiceProvider, object> implementationFactory);
    [ExtensionAttribute]
public static void TryAddScoped(IServiceCollection collection, Type service, Type implementationType);
    [ExtensionAttribute]
public static void TryAddScoped(IServiceCollection collection);
    [ExtensionAttribute]
public static void TryAddScoped(IServiceCollection services, Func`2<IServiceProvider, TService> implementationFactory);
    [ExtensionAttribute]
public static void TryAddScoped(IServiceCollection collection);
    [ExtensionAttribute]
public static void TryAddSingleton(IServiceCollection collection, Type service);
    [ExtensionAttribute]
public static void TryAddSingleton(IServiceCollection collection, Type service, Func`2<IServiceProvider, object> implementationFactory);
    [ExtensionAttribute]
public static void TryAddSingleton(IServiceCollection collection, Type service, Type implementationType);
    [ExtensionAttribute]
public static void TryAddSingleton(IServiceCollection collection);
    [ExtensionAttribute]
public static void TryAddSingleton(IServiceCollection services, Func`2<IServiceProvider, TService> implementationFactory);
    [ExtensionAttribute]
public static void TryAddSingleton(IServiceCollection collection, TService instance);
    [ExtensionAttribute]
public static void TryAddSingleton(IServiceCollection collection);
    [ExtensionAttribute]
public static void TryAddTransient(IServiceCollection collection, Type service);
    [ExtensionAttribute]
public static void TryAddTransient(IServiceCollection collection, Type service, Func`2<IServiceProvider, object> implementationFactory);
    [ExtensionAttribute]
public static void TryAddTransient(IServiceCollection collection, Type service, Type implementationType);
    [ExtensionAttribute]
public static void TryAddTransient(IServiceCollection collection);
    [ExtensionAttribute]
public static void TryAddTransient(IServiceCollection services, Func`2<IServiceProvider, TService> implementationFactory);
    [ExtensionAttribute]
public static void TryAddTransient(IServiceCollection collection);
    [ExtensionAttribute]
public static IServiceCollection RemoveAllKeyed(IServiceCollection collection, Type serviceType, object serviceKey);
    [ExtensionAttribute]
public static IServiceCollection RemoveAllKeyed(IServiceCollection collection, object serviceKey);
    [ExtensionAttribute]
public static void TryAddKeyedScoped(IServiceCollection collection, Type service, object serviceKey);
    [ExtensionAttribute]
public static void TryAddKeyedScoped(IServiceCollection collection, Type service, object serviceKey, Func`3<IServiceProvider, object, object> implementationFactory);
    [ExtensionAttribute]
public static void TryAddKeyedScoped(IServiceCollection collection, Type service, object serviceKey, Type implementationType);
    [ExtensionAttribute]
public static void TryAddKeyedScoped(IServiceCollection collection, object serviceKey);
    [ExtensionAttribute]
public static void TryAddKeyedScoped(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TService> implementationFactory);
    [ExtensionAttribute]
public static void TryAddKeyedScoped(IServiceCollection collection, object serviceKey);
    [ExtensionAttribute]
public static void TryAddKeyedSingleton(IServiceCollection collection, Type service, object serviceKey);
    [ExtensionAttribute]
public static void TryAddKeyedSingleton(IServiceCollection collection, Type service, object serviceKey, Func`3<IServiceProvider, object, object> implementationFactory);
    [ExtensionAttribute]
public static void TryAddKeyedSingleton(IServiceCollection collection, Type service, object serviceKey, Type implementationType);
    [ExtensionAttribute]
public static void TryAddKeyedSingleton(IServiceCollection collection, object serviceKey);
    [ExtensionAttribute]
public static void TryAddKeyedSingleton(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TService> implementationFactory);
    [ExtensionAttribute]
public static void TryAddKeyedSingleton(IServiceCollection collection, object serviceKey, TService instance);
    [ExtensionAttribute]
public static void TryAddKeyedSingleton(IServiceCollection collection, object serviceKey);
    [ExtensionAttribute]
public static void TryAddKeyedTransient(IServiceCollection collection, Type service, object serviceKey);
    [ExtensionAttribute]
public static void TryAddKeyedTransient(IServiceCollection collection, Type service, object serviceKey, Func`3<IServiceProvider, object, object> implementationFactory);
    [ExtensionAttribute]
public static void TryAddKeyedTransient(IServiceCollection collection, Type service, object serviceKey, Type implementationType);
    [ExtensionAttribute]
public static void TryAddKeyedTransient(IServiceCollection collection, object serviceKey);
    [ExtensionAttribute]
public static void TryAddKeyedTransient(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TService> implementationFactory);
    [ExtensionAttribute]
public static void TryAddKeyedTransient(IServiceCollection collection, object serviceKey);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
public class Microsoft.Extensions.DependencyInjection.FromKeyedServicesAttribute : Attribute {
    public object Key { get; }
    public FromKeyedServicesAttribute(object key);
    public object get_Key();
}
public interface Microsoft.Extensions.DependencyInjection.IKeyedServiceProvider {
    [NullableContextAttribute("2")]
public abstract virtual object GetKeyedService(Type serviceType, object serviceKey);
    [NullableContextAttribute("1")]
public abstract virtual object GetRequiredKeyedService(Type serviceType, object serviceKey);
}
public interface Microsoft.Extensions.DependencyInjection.IServiceCollection {
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.DependencyInjection.IServiceProviderFactory`1 {
    public abstract virtual TContainerBuilder CreateBuilder(IServiceCollection services);
    public abstract virtual IServiceProvider CreateServiceProvider(TContainerBuilder containerBuilder);
}
public interface Microsoft.Extensions.DependencyInjection.IServiceProviderIsKeyedService {
    [NullableContextAttribute("1")]
public abstract virtual bool IsKeyedService(Type serviceType, object serviceKey);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.DependencyInjection.IServiceProviderIsService {
    public abstract virtual bool IsService(Type serviceType);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.DependencyInjection.IServiceScope {
    public IServiceProvider ServiceProvider { get; }
    public abstract virtual IServiceProvider get_ServiceProvider();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.DependencyInjection.IServiceScopeFactory {
    public abstract virtual IServiceScope CreateScope();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.DependencyInjection.ISupportRequiredService {
    public abstract virtual object GetRequiredService(Type serviceType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Extensions.DependencyInjection.KeyedService : object {
    public static object AnyKey { get; }
    public static object get_AnyKey();
}
public class Microsoft.Extensions.DependencyInjection.ObjectFactory : MulticastDelegate {
    public ObjectFactory(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual object Invoke(IServiceProvider serviceProvider, Object[] arguments);
    public virtual IAsyncResult BeginInvoke(IServiceProvider serviceProvider, Object[] arguments, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public class Microsoft.Extensions.DependencyInjection.ObjectFactory`1 : MulticastDelegate {
    public ObjectFactory`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual T Invoke(IServiceProvider serviceProvider, Object[] arguments);
    public virtual IAsyncResult BeginInvoke(IServiceProvider serviceProvider, Object[] arguments, AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.Extensions.DependencyInjection.ServiceCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ServiceDescriptor Item { get; public set; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ServiceDescriptor get_Item(int index);
    public sealed virtual void set_Item(int index, ServiceDescriptor value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ServiceDescriptor item);
    public sealed virtual void CopyTo(ServiceDescriptor[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<ServiceDescriptor> GetEnumerator();
    public sealed virtual int IndexOf(ServiceDescriptor item);
    public sealed virtual void Insert(int index, ServiceDescriptor item);
    public void MakeReadOnly();
    public sealed virtual bool Remove(ServiceDescriptor item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.Extensions.DependencyInjection.ServiceDescriptor>.Add(ServiceDescriptor item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddKeyedScoped(IServiceCollection services, Type serviceType, object serviceKey);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedScoped(IServiceCollection services, Type serviceType, object serviceKey, Func`3<IServiceProvider, object, object> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedScoped(IServiceCollection services, Type serviceType, object serviceKey, Type implementationType);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedScoped(IServiceCollection services, object serviceKey);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedScoped(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TService> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedScoped(IServiceCollection services, object serviceKey);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedScoped(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TImplementation> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedSingleton(IServiceCollection services, Type serviceType, object serviceKey);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedSingleton(IServiceCollection services, Type serviceType, object serviceKey, Func`3<IServiceProvider, object, object> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedSingleton(IServiceCollection services, Type serviceType, object serviceKey, object implementationInstance);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedSingleton(IServiceCollection services, Type serviceType, object serviceKey, Type implementationType);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedSingleton(IServiceCollection services, object serviceKey);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedSingleton(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TService> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedSingleton(IServiceCollection services, object serviceKey, TService implementationInstance);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedSingleton(IServiceCollection services, object serviceKey);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedSingleton(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TImplementation> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedTransient(IServiceCollection services, Type serviceType, object serviceKey);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedTransient(IServiceCollection services, Type serviceType, object serviceKey, Func`3<IServiceProvider, object, object> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedTransient(IServiceCollection services, Type serviceType, object serviceKey, Type implementationType);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedTransient(IServiceCollection services, object serviceKey);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedTransient(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TService> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedTransient(IServiceCollection services, object serviceKey);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedTransient(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TImplementation> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddScoped(IServiceCollection services, Type serviceType);
    [ExtensionAttribute]
public static IServiceCollection AddScoped(IServiceCollection services, Type serviceType, Func`2<IServiceProvider, object> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddScoped(IServiceCollection services, Type serviceType, Type implementationType);
    [ExtensionAttribute]
public static IServiceCollection AddScoped(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddScoped(IServiceCollection services, Func`2<IServiceProvider, TService> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddScoped(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddScoped(IServiceCollection services, Func`2<IServiceProvider, TImplementation> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services, Type serviceType);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services, Type serviceType, Func`2<IServiceProvider, object> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services, Type serviceType, object implementationInstance);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services, Type serviceType, Type implementationType);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services, Func`2<IServiceProvider, TService> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services, TService implementationInstance);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services, Func`2<IServiceProvider, TImplementation> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddTransient(IServiceCollection services, Type serviceType);
    [ExtensionAttribute]
public static IServiceCollection AddTransient(IServiceCollection services, Type serviceType, Func`2<IServiceProvider, object> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddTransient(IServiceCollection services, Type serviceType, Type implementationType);
    [ExtensionAttribute]
public static IServiceCollection AddTransient(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddTransient(IServiceCollection services, Func`2<IServiceProvider, TService> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddTransient(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddTransient(IServiceCollection services, Func`2<IServiceProvider, TImplementation> implementationFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.DependencyInjection.ServiceDescriptor : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<IServiceProvider, object> ImplementationFactory { get; }
    [NullableAttribute("2")]
public object ImplementationInstance { get; }
    [NullableAttribute("2")]
[DynamicallyAccessedMembersAttribute("3")]
public Type ImplementationType { get; }
    public bool IsKeyedService { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<IServiceProvider, object, object> KeyedImplementationFactory { get; }
    [NullableAttribute("2")]
public object KeyedImplementationInstance { get; }
    [NullableAttribute("2")]
[DynamicallyAccessedMembersAttribute("3")]
public Type KeyedImplementationType { get; }
    public ServiceLifetime Lifetime { get; }
    [NullableAttribute("2")]
public object ServiceKey { get; }
    public Type ServiceType { get; }
    public ServiceDescriptor(Type serviceType, Func`2<IServiceProvider, object> factory, ServiceLifetime lifetime);
    public ServiceDescriptor(Type serviceType, object instance);
    public ServiceDescriptor(Type serviceType, object serviceKey, Func`3<IServiceProvider, object, object> factory, ServiceLifetime lifetime);
    public ServiceDescriptor(Type serviceType, object serviceKey, object instance);
    public ServiceDescriptor(Type serviceType, object serviceKey, Type implementationType, ServiceLifetime lifetime);
    public ServiceDescriptor(Type serviceType, Type implementationType, ServiceLifetime lifetime);
    public Func`2<IServiceProvider, object> get_ImplementationFactory();
    [NullableContextAttribute("2")]
public object get_ImplementationInstance();
    [NullableContextAttribute("2")]
public Type get_ImplementationType();
    public bool get_IsKeyedService();
    public Func`3<IServiceProvider, object, object> get_KeyedImplementationFactory();
    [NullableContextAttribute("2")]
public object get_KeyedImplementationInstance();
    [NullableContextAttribute("2")]
public Type get_KeyedImplementationType();
    public ServiceLifetime get_Lifetime();
    [NullableContextAttribute("2")]
public object get_ServiceKey();
    public Type get_ServiceType();
    public static ServiceDescriptor Describe(Type serviceType, Func`2<IServiceProvider, object> implementationFactory, ServiceLifetime lifetime);
    public static ServiceDescriptor Describe(Type serviceType, Type implementationType, ServiceLifetime lifetime);
    public static ServiceDescriptor DescribeKeyed(Type serviceType, object serviceKey, Func`3<IServiceProvider, object, object> implementationFactory, ServiceLifetime lifetime);
    public static ServiceDescriptor DescribeKeyed(Type serviceType, object serviceKey, Type implementationType, ServiceLifetime lifetime);
    public static ServiceDescriptor KeyedScoped(Type service, object serviceKey, Func`3<IServiceProvider, object, object> implementationFactory);
    public static ServiceDescriptor KeyedScoped(Type service, object serviceKey, Type implementationType);
    public static ServiceDescriptor KeyedScoped(object serviceKey, Func`3<IServiceProvider, object, TService> implementationFactory);
    public static ServiceDescriptor KeyedScoped(object serviceKey);
    public static ServiceDescriptor KeyedScoped(object serviceKey, Func`3<IServiceProvider, object, TImplementation> implementationFactory);
    public static ServiceDescriptor KeyedSingleton(Type serviceType, object serviceKey, Func`3<IServiceProvider, object, object> implementationFactory);
    public static ServiceDescriptor KeyedSingleton(Type serviceType, object serviceKey, object implementationInstance);
    public static ServiceDescriptor KeyedSingleton(Type service, object serviceKey, Type implementationType);
    public static ServiceDescriptor KeyedSingleton(object serviceKey, Func`3<IServiceProvider, object, TService> implementationFactory);
    public static ServiceDescriptor KeyedSingleton(object serviceKey, TService implementationInstance);
    public static ServiceDescriptor KeyedSingleton(object serviceKey);
    public static ServiceDescriptor KeyedSingleton(object serviceKey, Func`3<IServiceProvider, object, TImplementation> implementationFactory);
    public static ServiceDescriptor KeyedTransient(Type service, object serviceKey, Func`3<IServiceProvider, object, object> implementationFactory);
    public static ServiceDescriptor KeyedTransient(Type service, object serviceKey, Type implementationType);
    public static ServiceDescriptor KeyedTransient(object serviceKey, Func`3<IServiceProvider, object, TService> implementationFactory);
    public static ServiceDescriptor KeyedTransient(object serviceKey);
    public static ServiceDescriptor KeyedTransient(object serviceKey, Func`3<IServiceProvider, object, TImplementation> implementationFactory);
    public static ServiceDescriptor Scoped(Type service, Func`2<IServiceProvider, object> implementationFactory);
    public static ServiceDescriptor Scoped(Type service, Type implementationType);
    public static ServiceDescriptor Scoped(Func`2<IServiceProvider, TService> implementationFactory);
    public static ServiceDescriptor Scoped();
    public static ServiceDescriptor Scoped(Func`2<IServiceProvider, TImplementation> implementationFactory);
    public static ServiceDescriptor Singleton(Type serviceType, Func`2<IServiceProvider, object> implementationFactory);
    public static ServiceDescriptor Singleton(Type serviceType, object implementationInstance);
    public static ServiceDescriptor Singleton(Type service, Type implementationType);
    public static ServiceDescriptor Singleton(Func`2<IServiceProvider, TService> implementationFactory);
    public static ServiceDescriptor Singleton(TService implementationInstance);
    public static ServiceDescriptor Singleton();
    public static ServiceDescriptor Singleton(Func`2<IServiceProvider, TImplementation> implementationFactory);
    public virtual string ToString();
    public static ServiceDescriptor Transient(Type service, Func`2<IServiceProvider, object> implementationFactory);
    public static ServiceDescriptor Transient(Type service, Type implementationType);
    public static ServiceDescriptor Transient(Func`2<IServiceProvider, TService> implementationFactory);
    public static ServiceDescriptor Transient();
    public static ServiceDescriptor Transient(Func`2<IServiceProvider, TImplementation> implementationFactory);
}
[AttributeUsageAttribute("2048")]
public class Microsoft.Extensions.DependencyInjection.ServiceKeyAttribute : Attribute {
}
public enum Microsoft.Extensions.DependencyInjection.ServiceLifetime : Enum {
    public int value__;
    public static ServiceLifetime Singleton;
    public static ServiceLifetime Scoped;
    public static ServiceLifetime Transient;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceProviderKeyedServiceExtensions : object {
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("The native code for an IEnumerable<serviceType> might not be available at runtime.")]
public static IEnumerable`1<object> GetKeyedServices(IServiceProvider provider, Type serviceType, object serviceKey);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetKeyedServices(IServiceProvider provider, object serviceKey);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T GetKeyedService(IServiceProvider provider, object serviceKey);
    [ExtensionAttribute]
public static object GetRequiredKeyedService(IServiceProvider provider, Type serviceType, object serviceKey);
    [ExtensionAttribute]
public static T GetRequiredKeyedService(IServiceProvider provider, object serviceKey);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions : object {
    [ExtensionAttribute]
public static AsyncServiceScope CreateAsyncScope(IServiceScopeFactory serviceScopeFactory);
    [ExtensionAttribute]
public static AsyncServiceScope CreateAsyncScope(IServiceProvider provider);
    [ExtensionAttribute]
public static IServiceScope CreateScope(IServiceProvider provider);
    [ExtensionAttribute]
public static object GetRequiredService(IServiceProvider provider, Type serviceType);
    [ExtensionAttribute]
public static T GetRequiredService(IServiceProvider provider);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("The native code for an IEnumerable<serviceType> might not be available at runtime.")]
public static IEnumerable`1<object> GetServices(IServiceProvider provider, Type serviceType);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetServices(IServiceProvider provider);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T GetService(IServiceProvider provider);
}
