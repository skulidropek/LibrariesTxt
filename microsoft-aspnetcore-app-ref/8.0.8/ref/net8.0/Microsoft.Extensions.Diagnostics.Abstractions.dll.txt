[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder {
    public IServiceCollection Services { get; }
    public abstract virtual IServiceCollection get_Services();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual void Initialize(IObservableInstrumentsSource source);
    public abstract virtual bool InstrumentPublished(Instrument instrument, Object& userState);
    public abstract virtual void MeasurementsCompleted(Instrument instrument, object userState);
    public abstract virtual MeasurementHandlers GetMeasurementHandlers();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Diagnostics.Metrics.InstrumentRule : object {
    [CompilerGeneratedAttribute]
private string <MeterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstrumentName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ListenerName>k__BackingField;
    [CompilerGeneratedAttribute]
private MeterScope <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enable>k__BackingField;
    public string MeterName { get; }
    public string InstrumentName { get; }
    public string ListenerName { get; }
    public MeterScope Scopes { get; }
    public bool Enable { get; }
    public InstrumentRule(string meterName, string instrumentName, string listenerName, MeterScope scopes, bool enable);
    [CompilerGeneratedAttribute]
public string get_MeterName();
    [CompilerGeneratedAttribute]
public string get_InstrumentName();
    [CompilerGeneratedAttribute]
public string get_ListenerName();
    [CompilerGeneratedAttribute]
public MeterScope get_Scopes();
    [CompilerGeneratedAttribute]
public bool get_Enable();
}
public interface Microsoft.Extensions.Diagnostics.Metrics.IObservableInstrumentsSource {
    public abstract virtual void RecordObservableInstruments();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Diagnostics.Metrics.MeasurementHandlers : object {
    [CompilerGeneratedAttribute]
private MeasurementCallback`1<byte> <ByteHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasurementCallback`1<short> <ShortHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasurementCallback`1<int> <IntHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasurementCallback`1<long> <LongHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasurementCallback`1<float> <FloatHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasurementCallback`1<double> <DoubleHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasurementCallback`1<decimal> <DecimalHandler>k__BackingField;
    public MeasurementCallback`1<byte> ByteHandler { get; public set; }
    public MeasurementCallback`1<short> ShortHandler { get; public set; }
    public MeasurementCallback`1<int> IntHandler { get; public set; }
    public MeasurementCallback`1<long> LongHandler { get; public set; }
    public MeasurementCallback`1<float> FloatHandler { get; public set; }
    public MeasurementCallback`1<double> DoubleHandler { get; public set; }
    public MeasurementCallback`1<decimal> DecimalHandler { get; public set; }
    [CompilerGeneratedAttribute]
public MeasurementCallback`1<byte> get_ByteHandler();
    [CompilerGeneratedAttribute]
public void set_ByteHandler(MeasurementCallback`1<byte> value);
    [CompilerGeneratedAttribute]
public MeasurementCallback`1<short> get_ShortHandler();
    [CompilerGeneratedAttribute]
public void set_ShortHandler(MeasurementCallback`1<short> value);
    [CompilerGeneratedAttribute]
public MeasurementCallback`1<int> get_IntHandler();
    [CompilerGeneratedAttribute]
public void set_IntHandler(MeasurementCallback`1<int> value);
    [CompilerGeneratedAttribute]
public MeasurementCallback`1<long> get_LongHandler();
    [CompilerGeneratedAttribute]
public void set_LongHandler(MeasurementCallback`1<long> value);
    [CompilerGeneratedAttribute]
public MeasurementCallback`1<float> get_FloatHandler();
    [CompilerGeneratedAttribute]
public void set_FloatHandler(MeasurementCallback`1<float> value);
    [CompilerGeneratedAttribute]
public MeasurementCallback`1<double> get_DoubleHandler();
    [CompilerGeneratedAttribute]
public void set_DoubleHandler(MeasurementCallback`1<double> value);
    [CompilerGeneratedAttribute]
public MeasurementCallback`1<decimal> get_DecimalHandler();
    [CompilerGeneratedAttribute]
public void set_DecimalHandler(MeasurementCallback`1<decimal> value);
}
[FlagsAttribute]
public enum Microsoft.Extensions.Diagnostics.Metrics.MeterScope : Enum {
    public int value__;
    public static MeterScope None;
    public static MeterScope Global;
    public static MeterScope Local;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Diagnostics.Metrics.MetricsBuilderExtensions : object {
    [ExtensionAttribute]
public static IMetricsBuilder AddListener(IMetricsBuilder builder);
    [ExtensionAttribute]
public static IMetricsBuilder AddListener(IMetricsBuilder builder, IMetricsListener listener);
    [ExtensionAttribute]
public static IMetricsBuilder ClearListeners(IMetricsBuilder builder);
    [ExtensionAttribute]
public static IMetricsBuilder EnableMetrics(IMetricsBuilder builder, string meterName);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IMetricsBuilder EnableMetrics(IMetricsBuilder builder, string meterName, string instrumentName, string listenerName, MeterScope scopes);
    [ExtensionAttribute]
public static MetricsOptions EnableMetrics(MetricsOptions options, string meterName);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static MetricsOptions EnableMetrics(MetricsOptions options, string meterName, string instrumentName, string listenerName, MeterScope scopes);
    [ExtensionAttribute]
public static IMetricsBuilder DisableMetrics(IMetricsBuilder builder, string meterName);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IMetricsBuilder DisableMetrics(IMetricsBuilder builder, string meterName, string instrumentName, string listenerName, MeterScope scopes);
    [ExtensionAttribute]
public static MetricsOptions DisableMetrics(MetricsOptions options, string meterName);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static MetricsOptions DisableMetrics(MetricsOptions options, string meterName, string instrumentName, string listenerName, MeterScope scopes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Diagnostics.Metrics.MetricsOptions : object {
    [CompilerGeneratedAttribute]
private IList`1<InstrumentRule> <Rules>k__BackingField;
    public IList`1<InstrumentRule> Rules { get; }
    [CompilerGeneratedAttribute]
public IList`1<InstrumentRule> get_Rules();
}
