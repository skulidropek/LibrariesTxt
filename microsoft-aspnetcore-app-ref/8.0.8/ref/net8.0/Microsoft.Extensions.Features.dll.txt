[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {GetCount()}")]
[DebuggerTypeProxyAttribute("Microsoft.AspNetCore.Http.Features.FeatureCollection/FeatureCollectionDebugView")]
public class Microsoft.AspNetCore.Http.Features.FeatureCollection : object {
    public int Revision { get; }
    public bool IsReadOnly { get; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    public FeatureCollection(int initialCapacity);
    [NullableContextAttribute("1")]
public FeatureCollection(IFeatureCollection defaults);
    public virtual int get_Revision();
    public sealed virtual bool get_IsReadOnly();
    [NullableContextAttribute("1")]
public sealed virtual object get_Item(Type key);
    [NullableContextAttribute("1")]
public sealed virtual void set_Item(Type key, object value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Http.Features.FeatureCollection/<GetEnumerator>d__16")]
public sealed virtual IEnumerator`1<KeyValuePair`2<Type, object>> GetEnumerator();
    [NullableContextAttribute("2")]
public sealed virtual TFeature Get();
    [NullableContextAttribute("2")]
public sealed virtual void Set(TFeature instance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Http.Features.FeatureCollectionExtensions : object {
    [ExtensionAttribute]
public static TFeature GetRequiredFeature(IFeatureCollection featureCollection);
    [ExtensionAttribute]
public static object GetRequiredFeature(IFeatureCollection featureCollection, Type key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Http.Features.FeatureReference`1 : ValueType {
    private T _feature;
    private int _revision;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FeatureReference`1<T> Default;
    public T Fetch(IFeatureCollection features);
    public T Update(IFeatureCollection features, T feature);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Http.Features.FeatureReferences`1 : ValueType {
    [CompilerGeneratedAttribute]
private IFeatureCollection <Collection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Revision>k__BackingField;
    [NullableAttribute("2")]
public TCache Cache;
    public IFeatureCollection Collection { get; }
    public int Revision { get; }
    public FeatureReferences`1(IFeatureCollection collection);
    public void Initalize(IFeatureCollection collection);
    public void Initalize(IFeatureCollection collection, int revision);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IFeatureCollection get_Collection();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Revision();
    [NullableContextAttribute("2")]
public TFeature Fetch(TFeature& cached, TState state, Func`2<TState, TFeature> factory);
    [NullableContextAttribute("2")]
public TFeature Fetch(TFeature& cached, Func`2<IFeatureCollection, TFeature> factory);
}
[NullableContextAttribute("2")]
[DefaultMemberAttribute("Item")]
public interface Microsoft.AspNetCore.Http.Features.IFeatureCollection {
    public bool IsReadOnly { get; }
    public int Revision { get; }
    public object Item { get; public set; }
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual int get_Revision();
    [NullableContextAttribute("1")]
public abstract virtual object get_Item(Type key);
    [NullableContextAttribute("1")]
public abstract virtual void set_Item(Type key, object value);
    public abstract virtual TFeature Get();
    public abstract virtual void Set(TFeature instance);
}
internal static class Microsoft.AspNetCore.Shared.ArgumentNullThrowHelper : object {
    public static void ThrowIfNull(object argument, string paramName);
}
internal static class Microsoft.AspNetCore.Shared.ArgumentOutOfRangeThrowHelper : object {
    public static void ThrowIfZero(int value, string paramName);
    public static void ThrowIfNegative(int value, string paramName);
    public static void ThrowIfNegative(long value, string paramName);
    public static void ThrowIfNegativeOrZero(int value, string paramName);
    public static void ThrowIfGreaterThan(T value, T other, string paramName);
    public static void ThrowIfGreaterThanOrEqual(T value, T other, string paramName);
    public static void ThrowIfLessThan(T value, T other, string paramName);
    public static void ThrowIfLessThanOrEqual(T value, T other, string paramName);
}
