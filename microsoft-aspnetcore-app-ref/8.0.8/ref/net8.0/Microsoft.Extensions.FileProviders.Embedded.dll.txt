internal static class Microsoft.AspNetCore.Shared.ArgumentNullThrowHelper : object {
    [NullableContextAttribute("2")]
public static void ThrowIfNull(object argument, string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileProviders.Embedded.EmbeddedResourceFileInfo : object {
    public bool Exists { get; }
    public long Length { get; }
    [NullableAttribute("2")]
public string PhysicalPath { get; }
    public string Name { get; }
    public DateTimeOffset LastModified { get; }
    public bool IsDirectory { get; }
    public EmbeddedResourceFileInfo(Assembly assembly, string resourcePath, string name, DateTimeOffset lastModified);
    public sealed virtual bool get_Exists();
    public sealed virtual long get_Length();
    [NullableContextAttribute("2")]
public sealed virtual string get_PhysicalPath();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_LastModified();
    public sealed virtual bool get_IsDirectory();
    public sealed virtual Stream CreateReadStream();
}
internal class Microsoft.Extensions.FileProviders.Embedded.EnumerableDirectoryContents : object {
    public bool Exists { get; }
    [NullableContextAttribute("1")]
public EnumerableDirectoryContents(IEnumerable`1<IFileInfo> entries);
    public sealed virtual bool get_Exists();
    [NullableContextAttribute("1")]
public sealed virtual IEnumerator`1<IFileInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.FileProviders.Embedded.Manifest.EmbeddedFilesManifest : object {
    internal EmbeddedFilesManifest(ManifestDirectory rootDirectory);
    internal ManifestEntry ResolveEntry(string path);
    internal EmbeddedFilesManifest Scope(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.FileProviders.Embedded.Manifest.ManifestDirectory : ManifestEntry {
    public IReadOnlyList`1<ManifestEntry> Children { get; protected set; }
    protected ManifestDirectory(string name, ManifestEntry[] children);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ManifestEntry> get_Children();
    [CompilerGeneratedAttribute]
protected void set_Children(IReadOnlyList`1<ManifestEntry> value);
    public virtual ManifestEntry Traverse(StringSegment segment);
    public virtual ManifestDirectory ToRootDirectory();
    public static ManifestDirectory CreateDirectory(string name, ManifestEntry[] children);
    public static ManifestRootDirectory CreateRootDirectory(ManifestEntry[] children);
    internal static void ValidateChildrenAndSetParent(ManifestEntry[] children, ManifestDirectory parent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.FileProviders.Embedded.Manifest.ManifestDirectoryContents : object {
    public bool Exists { get; }
    public Assembly Assembly { get; }
    public ManifestDirectory Directory { get; }
    public ManifestDirectoryContents(Assembly assembly, ManifestDirectory directory, DateTimeOffset lastModified);
    public sealed virtual bool get_Exists();
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    [CompilerGeneratedAttribute]
public ManifestDirectory get_Directory();
    public sealed virtual IEnumerator`1<IFileInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.FileProviders.Embedded.Manifest.ManifestDirectoryInfo : object {
    public bool Exists { get; }
    public long Length { get; }
    [NullableAttribute("2")]
public string PhysicalPath { get; }
    public string Name { get; }
    public DateTimeOffset LastModified { get; }
    public bool IsDirectory { get; }
    public ManifestDirectory Directory { get; }
    public ManifestDirectoryInfo(ManifestDirectory directory, DateTimeOffset lastModified);
    public sealed virtual bool get_Exists();
    public sealed virtual long get_Length();
    [NullableContextAttribute("2")]
public sealed virtual string get_PhysicalPath();
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_LastModified();
    public sealed virtual bool get_IsDirectory();
    [CompilerGeneratedAttribute]
public ManifestDirectory get_Directory();
    public sealed virtual Stream CreateReadStream();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Extensions.FileProviders.Embedded.Manifest.ManifestEntry : object {
    [NullableAttribute("2")]
public ManifestEntry Parent { get; }
    public string Name { get; }
    public static ManifestEntry UnknownPath { get; }
    public ManifestEntry(string name);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ManifestEntry get_Parent();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public static ManifestEntry get_UnknownPath();
    protected internal virtual void SetParent(ManifestDirectory directory);
    public abstract virtual ManifestEntry Traverse(StringSegment segment);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.FileProviders.Embedded.Manifest.ManifestFile : ManifestEntry {
    public string ResourcePath { get; }
    public ManifestFile(string name, string resourcePath);
    [CompilerGeneratedAttribute]
public string get_ResourcePath();
    public virtual ManifestEntry Traverse(StringSegment segment);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.FileProviders.Embedded.Manifest.ManifestFileInfo : object {
    public Assembly Assembly { get; }
    public ManifestFile ManifestFile { get; }
    public bool Exists { get; }
    public long Length { get; }
    [NullableAttribute("2")]
public string PhysicalPath { get; }
    public string Name { get; }
    public DateTimeOffset LastModified { get; }
    public bool IsDirectory { get; }
    public ManifestFileInfo(Assembly assembly, ManifestFile file, DateTimeOffset lastModified);
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    [CompilerGeneratedAttribute]
public ManifestFile get_ManifestFile();
    public sealed virtual bool get_Exists();
    public sealed virtual long get_Length();
    [NullableContextAttribute("2")]
public sealed virtual string get_PhysicalPath();
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_LastModified();
    public sealed virtual bool get_IsDirectory();
    public sealed virtual Stream CreateReadStream();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Extensions.FileProviders.Embedded.Manifest.ManifestParser : object {
    public static EmbeddedFilesManifest Parse(Assembly assembly);
    public static EmbeddedFilesManifest Parse(Assembly assembly, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.FileProviders.Embedded.Manifest.ManifestRootDirectory : ManifestDirectory {
    public ManifestRootDirectory(ManifestEntry[] children);
    public virtual ManifestDirectory ToRootDirectory();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.FileProviders.Embedded.Manifest.ManifestSinkDirectory : ManifestDirectory {
    public static ManifestDirectory Instance { get; }
    [CompilerGeneratedAttribute]
public static ManifestDirectory get_Instance();
    public virtual ManifestEntry Traverse(StringSegment segment);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileProviders.EmbeddedFileProvider : object {
    public EmbeddedFileProvider(Assembly assembly);
    [UnconditionalSuppressMessageAttribute("SingleFile", "IL3000:Assembly.Location")]
public EmbeddedFileProvider(Assembly assembly, string baseNamespace);
    public sealed virtual IFileInfo GetFileInfo(string subpath);
    public sealed virtual IDirectoryContents GetDirectoryContents(string subpath);
    public sealed virtual IChangeToken Watch(string pattern);
    internal static void MakeValidEverettFolderIdentifier(StringBuilder builder, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileProviders.ManifestEmbeddedFileProvider : object {
    public Assembly Assembly { get; }
    internal EmbeddedFilesManifest Manifest { get; }
    public ManifestEmbeddedFileProvider(Assembly assembly);
    public ManifestEmbeddedFileProvider(Assembly assembly, string root);
    public ManifestEmbeddedFileProvider(Assembly assembly, string root, DateTimeOffset lastModified);
    public ManifestEmbeddedFileProvider(Assembly assembly, string root, string manifestName, DateTimeOffset lastModified);
    internal ManifestEmbeddedFileProvider(Assembly assembly, EmbeddedFilesManifest manifest, DateTimeOffset lastModified);
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    [CompilerGeneratedAttribute]
internal EmbeddedFilesManifest get_Manifest();
    public sealed virtual IDirectoryContents GetDirectoryContents(string subpath);
    public sealed virtual IFileInfo GetFileInfo(string subpath);
    public sealed virtual IChangeToken Watch(string filter);
}
