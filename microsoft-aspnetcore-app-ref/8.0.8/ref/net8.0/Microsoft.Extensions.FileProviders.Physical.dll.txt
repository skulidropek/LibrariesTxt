public class Microsoft.Extensions.FileProviders.Internal.PhysicalDirectoryContents : object {
    public bool Exists { get; }
    [NullableContextAttribute("1")]
public PhysicalDirectoryContents(string directory);
    [NullableContextAttribute("1")]
public PhysicalDirectoryContents(string directory, ExclusionFilters filters);
    public sealed virtual bool get_Exists();
    [NullableContextAttribute("1")]
public sealed virtual IEnumerator`1<IFileInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[FlagsAttribute]
public enum Microsoft.Extensions.FileProviders.Physical.ExclusionFilters : Enum {
    public int value__;
    public static ExclusionFilters None;
    public static ExclusionFilters DotPrefixed;
    public static ExclusionFilters Hidden;
    public static ExclusionFilters System;
    public static ExclusionFilters Sensitive;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo : object {
    public bool Exists { get; }
    public bool IsDirectory { get; }
    public DateTimeOffset LastModified { get; }
    public long Length { get; }
    public string Name { get; }
    public string PhysicalPath { get; }
    public PhysicalDirectoryInfo(DirectoryInfo info);
    public sealed virtual bool get_Exists();
    public sealed virtual bool get_IsDirectory();
    public sealed virtual DateTimeOffset get_LastModified();
    public sealed virtual long get_Length();
    public sealed virtual string get_Name();
    public sealed virtual string get_PhysicalPath();
    public sealed virtual Stream CreateReadStream();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo : object {
    public bool Exists { get; }
    public bool IsDirectory { get; }
    public DateTimeOffset LastModified { get; }
    public long Length { get; }
    public string Name { get; }
    public string PhysicalPath { get; }
    public PhysicalFileInfo(FileInfo info);
    public sealed virtual bool get_Exists();
    public sealed virtual bool get_IsDirectory();
    public sealed virtual DateTimeOffset get_LastModified();
    public sealed virtual long get_Length();
    public sealed virtual string get_Name();
    public sealed virtual string get_PhysicalPath();
    public sealed virtual Stream CreateReadStream();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher : object {
    public PhysicalFilesWatcher(string root, FileSystemWatcher fileSystemWatcher, bool pollForChanges);
    public PhysicalFilesWatcher(string root, FileSystemWatcher fileSystemWatcher, bool pollForChanges, ExclusionFilters filters);
    public IChangeToken CreateFileChangeToken(string filter);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public class Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken : object {
    public bool ActiveChangeCallbacks { get; }
    public bool HasChanged { get; }
    [NullableContextAttribute("1")]
public PollingFileChangeToken(FileInfo fileInfo);
    public sealed virtual bool get_ActiveChangeCallbacks();
    public sealed virtual bool get_HasChanged();
    [NullableContextAttribute("1")]
public sealed virtual IDisposable RegisterChangeCallback(Action`1<object> callback, object state);
}
public class Microsoft.Extensions.FileProviders.Physical.PollingWildCardChangeToken : object {
    public bool ActiveChangeCallbacks { get; }
    public bool HasChanged { get; }
    [NullableContextAttribute("1")]
public PollingWildCardChangeToken(string root, string pattern);
    public sealed virtual bool get_ActiveChangeCallbacks();
    public sealed virtual bool get_HasChanged();
    [NullableContextAttribute("1")]
protected virtual DateTime GetLastWriteUtc(string path);
    private sealed virtual override IDisposable Microsoft.Extensions.Primitives.IChangeToken.RegisterChangeCallback(Action`1<object> callback, object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileProviders.PhysicalFileProvider : object {
    public string Root { get; }
    public bool UseActivePolling { get; public set; }
    public bool UsePollingFileWatcher { get; public set; }
    public PhysicalFileProvider(string root);
    public PhysicalFileProvider(string root, ExclusionFilters filters);
    public string get_Root();
    public bool get_UseActivePolling();
    public void set_UseActivePolling(bool value);
    public bool get_UsePollingFileWatcher();
    public void set_UsePollingFileWatcher(bool value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public sealed virtual IDirectoryContents GetDirectoryContents(string subpath);
    public sealed virtual IFileInfo GetFileInfo(string subpath);
    public sealed virtual IChangeToken Watch(string filter);
}
