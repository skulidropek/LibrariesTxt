[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoBase : FileSystemInfoBase {
    public abstract virtual IEnumerable`1<FileSystemInfoBase> EnumerateFileSystemInfos();
    public abstract virtual DirectoryInfoBase GetDirectory(string path);
    public abstract virtual FileInfoBase GetFile(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper : DirectoryInfoBase {
    public string FullName { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public DirectoryInfoBase ParentDirectory { get; }
    public DirectoryInfoWrapper(DirectoryInfo directoryInfo);
    public virtual string get_FullName();
    public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual DirectoryInfoBase get_ParentDirectory();
    public virtual IEnumerable`1<FileSystemInfoBase> EnumerateFileSystemInfos();
    public virtual DirectoryInfoBase GetDirectory(string name);
    public virtual FileInfoBase GetFile(string name);
}
public abstract class Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileInfoBase : FileSystemInfoBase {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileInfoWrapper : FileInfoBase {
    public string FullName { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public DirectoryInfoBase ParentDirectory { get; }
    public FileInfoWrapper(FileInfo fileInfo);
    public virtual string get_FullName();
    public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual DirectoryInfoBase get_ParentDirectory();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileSystemInfoBase : object {
    public string FullName { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public DirectoryInfoBase ParentDirectory { get; }
    public abstract virtual string get_FullName();
    public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual DirectoryInfoBase get_ParentDirectory();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public string Path { get; }
    [NullableAttribute("2")]
public string Stem { get; }
    public FilePatternMatch(string path, string stem);
    [IsReadOnlyAttribute]
public string get_Path();
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
public string get_Stem();
    public sealed virtual bool Equals(FilePatternMatch other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo : DirectoryInfoBase {
    public string FullName { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public DirectoryInfoBase ParentDirectory { get; }
    public InMemoryDirectoryInfo(string rootDir, IEnumerable`1<string> files);
    public virtual string get_FullName();
    public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual DirectoryInfoBase get_ParentDirectory();
    public virtual IEnumerable`1<FileSystemInfoBase> EnumerateFileSystemInfos();
    public virtual DirectoryInfoBase GetDirectory(string path);
    public virtual FileInfoBase GetFile(string path);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.FileSystemGlobbing.Internal.ILinearPattern {
    public IList`1<IPathSegment> Segments { get; }
    public abstract virtual IList`1<IPathSegment> get_Segments();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment {
    public bool CanProduceStem { get; }
    public abstract virtual bool get_CanProduceStem();
    public abstract virtual bool Match(string value);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.FileSystemGlobbing.Internal.IPattern {
    public abstract virtual IPatternContext CreatePatternContextForExclude();
    public abstract virtual IPatternContext CreatePatternContextForInclude();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.FileSystemGlobbing.Internal.IPatternContext {
    public abstract virtual void Declare(Action`2<IPathSegment, bool> onDeclare);
    public abstract virtual void PopDirectory();
    public abstract virtual void PushDirectory(DirectoryInfoBase directory);
    public abstract virtual bool Test(DirectoryInfoBase directory);
    public abstract virtual PatternTestResult Test(FileInfoBase file);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.FileSystemGlobbing.Internal.IRaggedPattern {
    public IList`1<IList`1<IPathSegment>> Contains { get; }
    public IList`1<IPathSegment> EndsWith { get; }
    public IList`1<IPathSegment> Segments { get; }
    public IList`1<IPathSegment> StartsWith { get; }
    public abstract virtual IList`1<IList`1<IPathSegment>> get_Contains();
    public abstract virtual IList`1<IPathSegment> get_EndsWith();
    public abstract virtual IList`1<IPathSegment> get_Segments();
    public abstract virtual IList`1<IPathSegment> get_StartsWith();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileSystemGlobbing.Internal.MatcherContext : object {
    public MatcherContext(IEnumerable`1<IPattern> includePatterns, IEnumerable`1<IPattern> excludePatterns, DirectoryInfoBase directoryInfo, StringComparison comparison);
    public PatternMatchingResult Execute();
}
public class Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.CurrentPathSegment : object {
    public bool CanProduceStem { get; }
    public sealed virtual bool get_CanProduceStem();
    [NullableContextAttribute("1")]
public sealed virtual bool Match(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment : object {
    public bool CanProduceStem { get; }
    public string Value { get; }
    public LiteralPathSegment(string value, StringComparison comparisonType);
    public sealed virtual bool get_CanProduceStem();
    public string get_Value();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Match(string value);
}
public class Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.ParentPathSegment : object {
    public bool CanProduceStem { get; }
    public sealed virtual bool get_CanProduceStem();
    [NullableContextAttribute("1")]
public sealed virtual bool Match(string value);
}
public class Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.RecursiveWildcardSegment : object {
    public bool CanProduceStem { get; }
    public sealed virtual bool get_CanProduceStem();
    [NullableContextAttribute("1")]
public sealed virtual bool Match(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment : object {
    public static WildcardPathSegment MatchAll;
    public string BeginsWith { get; }
    public bool CanProduceStem { get; }
    public List`1<string> Contains { get; }
    public string EndsWith { get; }
    public WildcardPathSegment(string beginsWith, List`1<string> contains, string endsWith, StringComparison comparisonType);
    public string get_BeginsWith();
    public sealed virtual bool get_CanProduceStem();
    public List`1<string> get_Contains();
    public string get_EndsWith();
    public sealed virtual bool Match(string value);
}
public abstract class Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContext`1 : object {
    protected TFrame Frame;
    [NullableContextAttribute("1")]
public virtual void Declare(Action`2<IPathSegment, bool> declare);
    protected bool IsStackEmpty();
    public virtual void PopDirectory();
    protected void PushDataFrame(TFrame frame);
    [NullableContextAttribute("1")]
public abstract virtual void PushDirectory(DirectoryInfoBase directory);
    [NullableContextAttribute("1")]
public abstract virtual bool Test(DirectoryInfoBase directory);
    [NullableContextAttribute("1")]
public abstract virtual PatternTestResult Test(FileInfoBase file);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextLinear : PatternContext`1<FrameData> {
    protected ILinearPattern Pattern { get; }
    public PatternContextLinear(ILinearPattern pattern);
    protected ILinearPattern get_Pattern();
    protected string CalculateStem(FileInfoBase matchedFile);
    protected bool IsLastSegment();
    public virtual void PushDirectory(DirectoryInfoBase directory);
    public virtual PatternTestResult Test(FileInfoBase file);
    protected bool TestMatchingSegment(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextLinearExclude : PatternContextLinear {
    public PatternContextLinearExclude(ILinearPattern pattern);
    public virtual bool Test(DirectoryInfoBase directory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextLinearInclude : PatternContextLinear {
    public PatternContextLinearInclude(ILinearPattern pattern);
    public virtual void Declare(Action`2<IPathSegment, bool> onDeclare);
    public virtual bool Test(DirectoryInfoBase directory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextRagged : PatternContext`1<FrameData> {
    protected IRaggedPattern Pattern { get; }
    public PatternContextRagged(IRaggedPattern pattern);
    protected IRaggedPattern get_Pattern();
    protected string CalculateStem(FileInfoBase matchedFile);
    protected bool IsEndingGroup();
    protected bool IsStartingGroup();
    public virtual void PopDirectory();
    public sealed virtual void PushDirectory(DirectoryInfoBase directory);
    public virtual PatternTestResult Test(FileInfoBase file);
    protected bool TestMatchingGroup(FileSystemInfoBase value);
    protected bool TestMatchingSegment(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextRaggedExclude : PatternContextRagged {
    public PatternContextRaggedExclude(IRaggedPattern pattern);
    public virtual bool Test(DirectoryInfoBase directory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts.PatternContextRaggedInclude : PatternContextRagged {
    public PatternContextRaggedInclude(IRaggedPattern pattern);
    public virtual void Declare(Action`2<IPathSegment, bool> onDeclare);
    public virtual bool Test(DirectoryInfoBase directory);
}
public class Microsoft.Extensions.FileSystemGlobbing.Internal.Patterns.PatternBuilder : object {
    public StringComparison ComparisonType { get; }
    public PatternBuilder(StringComparison comparisonType);
    public StringComparison get_ComparisonType();
    [NullableContextAttribute("1")]
public IPattern Build(string pattern);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileSystemGlobbing.Internal.PatternTestResult : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public static PatternTestResult Failed;
    public bool IsSuccessful { get; }
    public string Stem { get; }
    [IsReadOnlyAttribute]
public bool get_IsSuccessful();
    [IsReadOnlyAttribute]
public string get_Stem();
    public static PatternTestResult Success(string stem);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileSystemGlobbing.Matcher : object {
    public Matcher(StringComparison comparisonType);
    public virtual Matcher AddExclude(string pattern);
    public virtual Matcher AddInclude(string pattern);
    public virtual PatternMatchingResult Execute(DirectoryInfoBase directoryInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions : object {
    [ExtensionAttribute]
public static void AddExcludePatterns(Matcher matcher, IEnumerable`1[] excludePatternsGroups);
    [ExtensionAttribute]
public static void AddIncludePatterns(Matcher matcher, IEnumerable`1[] includePatternsGroups);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetResultsInFullPath(Matcher matcher, string directoryPath);
    [ExtensionAttribute]
public static PatternMatchingResult Match(Matcher matcher, IEnumerable`1<string> files);
    [ExtensionAttribute]
public static PatternMatchingResult Match(Matcher matcher, string file);
    [ExtensionAttribute]
public static PatternMatchingResult Match(Matcher matcher, string rootDir, IEnumerable`1<string> files);
    [ExtensionAttribute]
public static PatternMatchingResult Match(Matcher matcher, string rootDir, string file);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult : object {
    public IEnumerable`1<FilePatternMatch> Files { get; public set; }
    public bool HasMatches { get; }
    public PatternMatchingResult(IEnumerable`1<FilePatternMatch> files);
    public PatternMatchingResult(IEnumerable`1<FilePatternMatch> files, bool hasMatches);
    public IEnumerable`1<FilePatternMatch> get_Files();
    public void set_Files(IEnumerable`1<FilePatternMatch> value);
    public bool get_HasMatches();
}
