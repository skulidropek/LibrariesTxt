[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionHostedServiceExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddHostedService(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddHostedService(IServiceCollection services, Func`2<IServiceProvider, THostedService> implementationFactory);
}
public abstract class Microsoft.Extensions.Hosting.BackgroundService : object {
    [NullableAttribute("2")]
public Task ExecuteTask { get; }
    [NullableContextAttribute("2")]
public virtual Task get_ExecuteTask();
    public virtual void Dispose();
    [NullableContextAttribute("1")]
protected abstract virtual Task ExecuteAsync(CancellationToken stoppingToken);
    [NullableContextAttribute("1")]
public virtual Task StartAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public virtual Task StopAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("EnvironmentName has been deprecated. Use Microsoft.Extensions.Hosting.Environments instead.")]
public static class Microsoft.Extensions.Hosting.EnvironmentName : object {
    public static string Development;
    public static string Production;
    public static string Staging;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Extensions.Hosting.Environments : object {
    public static string Development;
    public static string Production;
    public static string Staging;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Hosting.HostAbortedException : Exception {
    public HostAbortedException(string message);
    public HostAbortedException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Hosting.HostBuilderContext : object {
    public IConfiguration Configuration { get; public set; }
    public IHostEnvironment HostingEnvironment { get; public set; }
    public IDictionary`2<object, object> Properties { get; }
    public HostBuilderContext(IDictionary`2<object, object> properties);
    public IConfiguration get_Configuration();
    public void set_Configuration(IConfiguration value);
    public IHostEnvironment get_HostingEnvironment();
    public void set_HostingEnvironment(IHostEnvironment value);
    public IDictionary`2<object, object> get_Properties();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Extensions.Hosting.HostDefaults : object {
    public static string ApplicationKey;
    public static string ContentRootKey;
    public static string EnvironmentKey;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.HostEnvironmentEnvExtensions : object {
    [ExtensionAttribute]
public static bool IsDevelopment(IHostEnvironment hostEnvironment);
    [ExtensionAttribute]
public static bool IsEnvironment(IHostEnvironment hostEnvironment, string environmentName);
    [ExtensionAttribute]
public static bool IsProduction(IHostEnvironment hostEnvironment);
    [ExtensionAttribute]
public static bool IsStaging(IHostEnvironment hostEnvironment);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.HostingAbstractionsHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IHost Start(IHostBuilder hostBuilder);
    [ExtensionAttribute]
public static Task`1<IHost> StartAsync(IHostBuilder hostBuilder, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions : object {
    [ExtensionAttribute]
public static void Run(IHost host);
    [ExtensionAttribute]
public static Task RunAsync(IHost host, CancellationToken token);
    [ExtensionAttribute]
public static void Start(IHost host);
    [ExtensionAttribute]
public static Task StopAsync(IHost host, TimeSpan timeout);
    [ExtensionAttribute]
public static void WaitForShutdown(IHost host);
    [ExtensionAttribute]
public static Task WaitForShutdownAsync(IHost host, CancellationToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.HostingEnvironmentExtensions : object {
    [ExtensionAttribute]
public static bool IsDevelopment(IHostingEnvironment hostingEnvironment);
    [ExtensionAttribute]
public static bool IsEnvironment(IHostingEnvironment hostingEnvironment, string environmentName);
    [ExtensionAttribute]
public static bool IsProduction(IHostingEnvironment hostingEnvironment);
    [ExtensionAttribute]
public static bool IsStaging(IHostingEnvironment hostingEnvironment);
}
[ObsoleteAttribute("IApplicationLifetime has been deprecated. Use Microsoft.Extensions.Hosting.IHostApplicationLifetime instead.")]
public interface Microsoft.Extensions.Hosting.IApplicationLifetime {
    public CancellationToken ApplicationStarted { get; }
    public CancellationToken ApplicationStopped { get; }
    public CancellationToken ApplicationStopping { get; }
    public abstract virtual CancellationToken get_ApplicationStarted();
    public abstract virtual CancellationToken get_ApplicationStopped();
    public abstract virtual CancellationToken get_ApplicationStopping();
    public abstract virtual void StopApplication();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Hosting.IHost {
    public IServiceProvider Services { get; }
    public abstract virtual IServiceProvider get_Services();
    public abstract virtual Task StartAsync(CancellationToken cancellationToken);
    public abstract virtual Task StopAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Hosting.IHostApplicationBuilder {
    public IConfigurationManager Configuration { get; }
    public IHostEnvironment Environment { get; }
    public ILoggingBuilder Logging { get; }
    public IMetricsBuilder Metrics { get; }
    public IDictionary`2<object, object> Properties { get; }
    public IServiceCollection Services { get; }
    public abstract virtual IConfigurationManager get_Configuration();
    public abstract virtual IHostEnvironment get_Environment();
    public abstract virtual ILoggingBuilder get_Logging();
    public abstract virtual IMetricsBuilder get_Metrics();
    public abstract virtual IDictionary`2<object, object> get_Properties();
    public abstract virtual IServiceCollection get_Services();
    public abstract virtual void ConfigureContainer(IServiceProviderFactory`1<TContainerBuilder> factory, Action`1<TContainerBuilder> configure);
}
public interface Microsoft.Extensions.Hosting.IHostApplicationLifetime {
    public CancellationToken ApplicationStarted { get; }
    public CancellationToken ApplicationStopped { get; }
    public CancellationToken ApplicationStopping { get; }
    public abstract virtual CancellationToken get_ApplicationStarted();
    public abstract virtual CancellationToken get_ApplicationStopped();
    public abstract virtual CancellationToken get_ApplicationStopping();
    public abstract virtual void StopApplication();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Hosting.IHostBuilder {
    public IDictionary`2<object, object> Properties { get; }
    public abstract virtual IDictionary`2<object, object> get_Properties();
    public abstract virtual IHost Build();
    public abstract virtual IHostBuilder ConfigureAppConfiguration(Action`2<HostBuilderContext, IConfigurationBuilder> configureDelegate);
    public abstract virtual IHostBuilder ConfigureContainer(Action`2<HostBuilderContext, TContainerBuilder> configureDelegate);
    public abstract virtual IHostBuilder ConfigureHostConfiguration(Action`1<IConfigurationBuilder> configureDelegate);
    public abstract virtual IHostBuilder ConfigureServices(Action`2<HostBuilderContext, IServiceCollection> configureDelegate);
    public abstract virtual IHostBuilder UseServiceProviderFactory(IServiceProviderFactory`1<TContainerBuilder> factory);
    public abstract virtual IHostBuilder UseServiceProviderFactory(Func`2<HostBuilderContext, IServiceProviderFactory`1<TContainerBuilder>> factory);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Hosting.IHostedLifecycleService {
    public abstract virtual Task StartedAsync(CancellationToken cancellationToken);
    public abstract virtual Task StartingAsync(CancellationToken cancellationToken);
    public abstract virtual Task StoppedAsync(CancellationToken cancellationToken);
    public abstract virtual Task StoppingAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Hosting.IHostedService {
    public abstract virtual Task StartAsync(CancellationToken cancellationToken);
    public abstract virtual Task StopAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Hosting.IHostEnvironment {
    public string ApplicationName { get; public set; }
    public IFileProvider ContentRootFileProvider { get; public set; }
    public string ContentRootPath { get; public set; }
    public string EnvironmentName { get; public set; }
    public abstract virtual string get_ApplicationName();
    public abstract virtual void set_ApplicationName(string value);
    public abstract virtual IFileProvider get_ContentRootFileProvider();
    public abstract virtual void set_ContentRootFileProvider(IFileProvider value);
    public abstract virtual string get_ContentRootPath();
    public abstract virtual void set_ContentRootPath(string value);
    public abstract virtual string get_EnvironmentName();
    public abstract virtual void set_EnvironmentName(string value);
}
[NullableContextAttribute("1")]
[ObsoleteAttribute("IHostingEnvironment has been deprecated. Use Microsoft.Extensions.Hosting.IHostEnvironment instead.")]
public interface Microsoft.Extensions.Hosting.IHostingEnvironment {
    public string ApplicationName { get; public set; }
    public IFileProvider ContentRootFileProvider { get; public set; }
    public string ContentRootPath { get; public set; }
    public string EnvironmentName { get; public set; }
    public abstract virtual string get_ApplicationName();
    public abstract virtual void set_ApplicationName(string value);
    public abstract virtual IFileProvider get_ContentRootFileProvider();
    public abstract virtual void set_ContentRootFileProvider(IFileProvider value);
    public abstract virtual string get_ContentRootPath();
    public abstract virtual void set_ContentRootPath(string value);
    public abstract virtual string get_EnvironmentName();
    public abstract virtual void set_EnvironmentName(string value);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Hosting.IHostLifetime {
    public abstract virtual Task StopAsync(CancellationToken cancellationToken);
    public abstract virtual Task WaitForStartAsync(CancellationToken cancellationToken);
}
