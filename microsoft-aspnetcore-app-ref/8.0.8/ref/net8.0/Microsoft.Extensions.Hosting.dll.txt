public enum Microsoft.Extensions.Hosting.BackgroundServiceExceptionBehavior : Enum {
    public int value__;
    public static BackgroundServiceExceptionBehavior StopHost;
    public static BackgroundServiceExceptionBehavior Ignore;
}
public class Microsoft.Extensions.Hosting.ConsoleLifetimeOptions : object {
    public bool SuppressStatusMessages { get; public set; }
    public bool get_SuppressStatusMessages();
    public void set_SuppressStatusMessages(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Extensions.Hosting.Host : object {
    public static HostApplicationBuilder CreateApplicationBuilder();
    public static HostApplicationBuilder CreateApplicationBuilder(HostApplicationBuilderSettings settings);
    public static HostApplicationBuilder CreateApplicationBuilder(String[] args);
    public static IHostBuilder CreateDefaultBuilder();
    public static IHostBuilder CreateDefaultBuilder(String[] args);
    public static HostApplicationBuilder CreateEmptyApplicationBuilder(HostApplicationBuilderSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Hosting.HostApplicationBuilder : object {
    public ConfigurationManager Configuration { get; }
    public IHostEnvironment Environment { get; }
    public ILoggingBuilder Logging { get; }
    public IMetricsBuilder Metrics { get; }
    private IConfigurationManager Microsoft.Extensions.Hosting.IHostApplicationBuilder.Configuration { get; }
    private IDictionary`2<object, object> Microsoft.Extensions.Hosting.IHostApplicationBuilder.Properties { get; }
    public IServiceCollection Services { get; }
    [NullableContextAttribute("2")]
public HostApplicationBuilder(HostApplicationBuilderSettings settings);
    public HostApplicationBuilder(String[] args);
    public ConfigurationManager get_Configuration();
    public sealed virtual IHostEnvironment get_Environment();
    public sealed virtual ILoggingBuilder get_Logging();
    public sealed virtual IMetricsBuilder get_Metrics();
    private sealed virtual override IConfigurationManager Microsoft.Extensions.Hosting.IHostApplicationBuilder.get_Configuration();
    private sealed virtual override IDictionary`2<object, object> Microsoft.Extensions.Hosting.IHostApplicationBuilder.get_Properties();
    public sealed virtual IServiceCollection get_Services();
    public IHost Build();
    public sealed virtual void ConfigureContainer(IServiceProviderFactory`1<TContainerBuilder> factory, Action`1<TContainerBuilder> configure);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Hosting.HostApplicationBuilderSettings : object {
    public string ApplicationName { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Args { get; public set; }
    public ConfigurationManager Configuration { get; public set; }
    public string ContentRootPath { get; public set; }
    public bool DisableDefaults { get; public set; }
    public string EnvironmentName { get; public set; }
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public String[] get_Args();
    public void set_Args(String[] value);
    public ConfigurationManager get_Configuration();
    public void set_Configuration(ConfigurationManager value);
    public string get_ContentRootPath();
    public void set_ContentRootPath(string value);
    public bool get_DisableDefaults();
    public void set_DisableDefaults(bool value);
    public string get_EnvironmentName();
    public void set_EnvironmentName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Hosting.HostBuilder : object {
    public IDictionary`2<object, object> Properties { get; }
    public sealed virtual IDictionary`2<object, object> get_Properties();
    public sealed virtual IHost Build();
    public sealed virtual IHostBuilder ConfigureAppConfiguration(Action`2<HostBuilderContext, IConfigurationBuilder> configureDelegate);
    public sealed virtual IHostBuilder ConfigureContainer(Action`2<HostBuilderContext, TContainerBuilder> configureDelegate);
    public sealed virtual IHostBuilder ConfigureHostConfiguration(Action`1<IConfigurationBuilder> configureDelegate);
    public sealed virtual IHostBuilder ConfigureServices(Action`2<HostBuilderContext, IServiceCollection> configureDelegate);
    public sealed virtual IHostBuilder UseServiceProviderFactory(IServiceProviderFactory`1<TContainerBuilder> factory);
    public sealed virtual IHostBuilder UseServiceProviderFactory(Func`2<HostBuilderContext, IServiceProviderFactory`1<TContainerBuilder>> factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.HostingHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IHostBuilder ConfigureAppConfiguration(IHostBuilder hostBuilder, Action`1<IConfigurationBuilder> configureDelegate);
    [ExtensionAttribute]
public static IHostBuilder ConfigureContainer(IHostBuilder hostBuilder, Action`1<TContainerBuilder> configureDelegate);
    [ExtensionAttribute]
public static IHostBuilder ConfigureDefaults(IHostBuilder builder, String[] args);
    [ExtensionAttribute]
public static IHostBuilder ConfigureHostOptions(IHostBuilder hostBuilder, Action`2<HostBuilderContext, HostOptions> configureOptions);
    [ExtensionAttribute]
public static IHostBuilder ConfigureHostOptions(IHostBuilder hostBuilder, Action`1<HostOptions> configureOptions);
    [ExtensionAttribute]
public static IHostBuilder ConfigureLogging(IHostBuilder hostBuilder, Action`2<HostBuilderContext, ILoggingBuilder> configureLogging);
    [ExtensionAttribute]
public static IHostBuilder ConfigureLogging(IHostBuilder hostBuilder, Action`1<ILoggingBuilder> configureLogging);
    [ExtensionAttribute]
public static IHostBuilder ConfigureMetrics(IHostBuilder hostBuilder, Action`1<IMetricsBuilder> configureMetrics);
    [ExtensionAttribute]
public static IHostBuilder ConfigureMetrics(IHostBuilder hostBuilder, Action`2<HostBuilderContext, IMetricsBuilder> configureMetrics);
    [ExtensionAttribute]
public static IHostBuilder ConfigureServices(IHostBuilder hostBuilder, Action`1<IServiceCollection> configureDelegate);
    [ExtensionAttribute]
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static Task RunConsoleAsync(IHostBuilder hostBuilder, Action`1<ConsoleLifetimeOptions> configureOptions, CancellationToken cancellationToken);
    [ExtensionAttribute]
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static Task RunConsoleAsync(IHostBuilder hostBuilder, CancellationToken cancellationToken);
    [ExtensionAttribute]
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static IHostBuilder UseConsoleLifetime(IHostBuilder hostBuilder);
    [ExtensionAttribute]
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static IHostBuilder UseConsoleLifetime(IHostBuilder hostBuilder, Action`1<ConsoleLifetimeOptions> configureOptions);
    [ExtensionAttribute]
public static IHostBuilder UseContentRoot(IHostBuilder hostBuilder, string contentRoot);
    [ExtensionAttribute]
public static IHostBuilder UseDefaultServiceProvider(IHostBuilder hostBuilder, Action`1<ServiceProviderOptions> configure);
    [ExtensionAttribute]
public static IHostBuilder UseDefaultServiceProvider(IHostBuilder hostBuilder, Action`2<HostBuilderContext, ServiceProviderOptions> configure);
    [ExtensionAttribute]
public static IHostBuilder UseEnvironment(IHostBuilder hostBuilder, string environment);
}
public class Microsoft.Extensions.Hosting.HostOptions : object {
    public BackgroundServiceExceptionBehavior BackgroundServiceExceptionBehavior { get; public set; }
    public bool ServicesStartConcurrently { get; public set; }
    public bool ServicesStopConcurrently { get; public set; }
    public TimeSpan ShutdownTimeout { get; public set; }
    public TimeSpan StartupTimeout { get; public set; }
    public BackgroundServiceExceptionBehavior get_BackgroundServiceExceptionBehavior();
    public void set_BackgroundServiceExceptionBehavior(BackgroundServiceExceptionBehavior value);
    public bool get_ServicesStartConcurrently();
    public void set_ServicesStartConcurrently(bool value);
    public bool get_ServicesStopConcurrently();
    public void set_ServicesStopConcurrently(bool value);
    public TimeSpan get_ShutdownTimeout();
    public void set_ShutdownTimeout(TimeSpan value);
    public TimeSpan get_StartupTimeout();
    public void set_StartupTimeout(TimeSpan value);
}
public class Microsoft.Extensions.Hosting.Internal.ApplicationLifetime : object {
    public CancellationToken ApplicationStarted { get; }
    public CancellationToken ApplicationStopped { get; }
    public CancellationToken ApplicationStopping { get; }
    [NullableContextAttribute("1")]
public ApplicationLifetime(ILogger`1<ApplicationLifetime> logger);
    public sealed virtual CancellationToken get_ApplicationStarted();
    public sealed virtual CancellationToken get_ApplicationStopped();
    public sealed virtual CancellationToken get_ApplicationStopping();
    public void NotifyStarted();
    public void NotifyStopped();
    public sealed virtual void StopApplication();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public class Microsoft.Extensions.Hosting.Internal.ConsoleLifetime : object {
    public ConsoleLifetime(IOptions`1<ConsoleLifetimeOptions> options, IHostEnvironment environment, IHostApplicationLifetime applicationLifetime, IOptions`1<HostOptions> hostOptions);
    public ConsoleLifetime(IOptions`1<ConsoleLifetimeOptions> options, IHostEnvironment environment, IHostApplicationLifetime applicationLifetime, IOptions`1<HostOptions> hostOptions, ILoggerFactory loggerFactory);
    public sealed virtual void Dispose();
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual Task WaitForStartAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Hosting.Internal.HostingEnvironment : object {
    public string ApplicationName { get; public set; }
    public IFileProvider ContentRootFileProvider { get; public set; }
    public string ContentRootPath { get; public set; }
    public string EnvironmentName { get; public set; }
    public sealed virtual string get_ApplicationName();
    public sealed virtual void set_ApplicationName(string value);
    public sealed virtual IFileProvider get_ContentRootFileProvider();
    public sealed virtual void set_ContentRootFileProvider(IFileProvider value);
    public sealed virtual string get_ContentRootPath();
    public sealed virtual void set_ContentRootPath(string value);
    public sealed virtual string get_EnvironmentName();
    public sealed virtual void set_EnvironmentName(string value);
}
