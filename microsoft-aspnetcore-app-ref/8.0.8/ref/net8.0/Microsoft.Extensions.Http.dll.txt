[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions : object {
    [ExtensionAttribute]
public static IHttpClientBuilder AddDefaultLogger(IHttpClientBuilder builder);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpMessageHandler(IHttpClientBuilder builder, Func`2<IServiceProvider, DelegatingHandler> configureHandler);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpMessageHandler(IHttpClientBuilder builder, Func`1<DelegatingHandler> configureHandler);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpMessageHandler(IHttpClientBuilder builder);
    [ExtensionAttribute]
public static IHttpClientBuilder AddLogger(IHttpClientBuilder builder, Func`2<IServiceProvider, IHttpClientLogger> httpClientLoggerFactory, bool wrapHandlersPipeline);
    [ExtensionAttribute]
public static IHttpClientBuilder AddLogger(IHttpClientBuilder builder, bool wrapHandlersPipeline);
    [ExtensionAttribute]
public static IHttpClientBuilder AddTypedClient(IHttpClientBuilder builder);
    [ExtensionAttribute]
public static IHttpClientBuilder AddTypedClient(IHttpClientBuilder builder, Func`3<HttpClient, IServiceProvider, TClient> factory);
    [ExtensionAttribute]
public static IHttpClientBuilder AddTypedClient(IHttpClientBuilder builder, Func`2<HttpClient, TClient> factory);
    [ExtensionAttribute]
public static IHttpClientBuilder AddTypedClient(IHttpClientBuilder builder);
    [ExtensionAttribute]
public static IHttpClientBuilder ConfigureAdditionalHttpMessageHandlers(IHttpClientBuilder builder, Action`2<IList`1<DelegatingHandler>, IServiceProvider> configureAdditionalHandlers);
    [ExtensionAttribute]
public static IHttpClientBuilder ConfigureHttpClient(IHttpClientBuilder builder, Action`2<IServiceProvider, HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder ConfigureHttpClient(IHttpClientBuilder builder, Action`1<HttpClient> configureClient);
    [ExtensionAttribute]
[ObsoleteAttribute("This method has been deprecated. Use ConfigurePrimaryHttpMessageHandler or ConfigureAdditionalHttpMessageHandlers instead.")]
public static IHttpClientBuilder ConfigureHttpMessageHandlerBuilder(IHttpClientBuilder builder, Action`1<HttpMessageHandlerBuilder> configureBuilder);
    [ExtensionAttribute]
public static IHttpClientBuilder ConfigurePrimaryHttpMessageHandler(IHttpClientBuilder builder, Func`2<IServiceProvider, HttpMessageHandler> configureHandler);
    [ExtensionAttribute]
public static IHttpClientBuilder ConfigurePrimaryHttpMessageHandler(IHttpClientBuilder builder, Func`1<HttpMessageHandler> configureHandler);
    [ExtensionAttribute]
public static IHttpClientBuilder ConfigurePrimaryHttpMessageHandler(IHttpClientBuilder builder);
    [ExtensionAttribute]
public static IHttpClientBuilder ConfigurePrimaryHttpMessageHandler(IHttpClientBuilder builder, Action`2<HttpMessageHandler, IServiceProvider> configureHandler);
    [ExtensionAttribute]
public static IHttpClientBuilder RedactLoggedHeaders(IHttpClientBuilder builder, IEnumerable`1<string> redactedLoggedHeaderNames);
    [ExtensionAttribute]
public static IHttpClientBuilder RedactLoggedHeaders(IHttpClientBuilder builder, Func`2<string, bool> shouldRedactHeaderValue);
    [ExtensionAttribute]
public static IHttpClientBuilder RemoveAllLoggers(IHttpClientBuilder builder);
    [ExtensionAttribute]
public static IHttpClientBuilder SetHandlerLifetime(IHttpClientBuilder builder, TimeSpan handlerLifetime);
    [ExtensionAttribute]
[UnsupportedOSPlatformAttribute("browser")]
public static IHttpClientBuilder UseSocketsHttpHandler(IHttpClientBuilder builder, Action`2<SocketsHttpHandler, IServiceProvider> configureHandler);
    [ExtensionAttribute]
[UnsupportedOSPlatformAttribute("browser")]
public static IHttpClientBuilder UseSocketsHttpHandler(IHttpClientBuilder builder, Action`1<ISocketsHttpHandlerBuilder> configureBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddHttpClient(IServiceCollection services);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name, Action`2<IServiceProvider, HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name, Action`1<HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, Action`2<IServiceProvider, HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, Action`1<HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name, Action`2<IServiceProvider, HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name, Action`1<HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, Action`2<IServiceProvider, HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, Action`1<HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, Func`3<HttpClient, IServiceProvider, TImplementation> factory);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, Func`2<HttpClient, TImplementation> factory);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name, Action`2<IServiceProvider, HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name, Action`1<HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name, Func`3<HttpClient, IServiceProvider, TImplementation> factory);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name, Func`2<HttpClient, TImplementation> factory);
    [ExtensionAttribute]
public static IServiceCollection ConfigureHttpClientDefaults(IServiceCollection services, Action`1<IHttpClientBuilder> configure);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.DependencyInjection.IHttpClientBuilder {
    public string Name { get; }
    public IServiceCollection Services { get; }
    public abstract virtual string get_Name();
    public abstract virtual IServiceCollection get_Services();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.DependencyInjection.ISocketsHttpHandlerBuilder {
    public string Name { get; }
    public IServiceCollection Services { get; }
    public abstract virtual string get_Name();
    public abstract virtual IServiceCollection get_Services();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.SocketsHttpHandlerBuilderExtensions : object {
    [ExtensionAttribute]
[UnsupportedOSPlatformAttribute("browser")]
public static ISocketsHttpHandlerBuilder Configure(ISocketsHttpHandlerBuilder builder, Action`2<SocketsHttpHandler, IServiceProvider> configure);
    [ExtensionAttribute]
[UnsupportedOSPlatformAttribute("browser")]
public static ISocketsHttpHandlerBuilder Configure(ISocketsHttpHandlerBuilder builder, IConfiguration configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Http.HttpClientFactoryOptions : object {
    public TimeSpan HandlerLifetime { get; public set; }
    public IList`1<Action`1<HttpClient>> HttpClientActions { get; }
    public IList`1<Action`1<HttpMessageHandlerBuilder>> HttpMessageHandlerBuilderActions { get; }
    public Func`2<string, bool> ShouldRedactHeaderValue { get; public set; }
    public bool SuppressHandlerScope { get; public set; }
    public TimeSpan get_HandlerLifetime();
    public void set_HandlerLifetime(TimeSpan value);
    [CompilerGeneratedAttribute]
public IList`1<Action`1<HttpClient>> get_HttpClientActions();
    [CompilerGeneratedAttribute]
public IList`1<Action`1<HttpMessageHandlerBuilder>> get_HttpMessageHandlerBuilderActions();
    [CompilerGeneratedAttribute]
public Func`2<string, bool> get_ShouldRedactHeaderValue();
    [CompilerGeneratedAttribute]
public void set_ShouldRedactHeaderValue(Func`2<string, bool> value);
    [CompilerGeneratedAttribute]
public bool get_SuppressHandlerScope();
    [CompilerGeneratedAttribute]
public void set_SuppressHandlerScope(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Extensions.Http.HttpMessageHandlerBuilder : object {
    public IList`1<DelegatingHandler> AdditionalHandlers { get; }
    [NullableAttribute("2")]
public string Name { get; public set; }
    public HttpMessageHandler PrimaryHandler { get; public set; }
    public IServiceProvider Services { get; }
    public abstract virtual IList`1<DelegatingHandler> get_AdditionalHandlers();
    [NullableContextAttribute("2")]
public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual void set_Name(string value);
    public abstract virtual HttpMessageHandler get_PrimaryHandler();
    public abstract virtual void set_PrimaryHandler(HttpMessageHandler value);
    [CompilerGeneratedAttribute]
public virtual IServiceProvider get_Services();
    public abstract virtual HttpMessageHandler Build();
    protected internal static HttpMessageHandler CreateHandlerPipeline(HttpMessageHandler primaryHandler, IEnumerable`1<DelegatingHandler> additionalHandlers);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Http.IHttpMessageHandlerBuilderFilter {
    public abstract virtual Action`1<HttpMessageHandlerBuilder> Configure(Action`1<HttpMessageHandlerBuilder> next);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Http.ITypedHttpClientFactory`1 {
    public abstract virtual TClient CreateClient(HttpClient httpClient);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger {
    public abstract virtual ValueTask`1<object> LogRequestStartAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    public abstract virtual ValueTask LogRequestStopAsync(object context, HttpRequestMessage request, HttpResponseMessage response, TimeSpan elapsed, CancellationToken cancellationToken);
    public abstract virtual ValueTask LogRequestFailedAsync(object context, HttpRequestMessage request, HttpResponseMessage response, Exception exception, TimeSpan elapsed, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Http.Logging.IHttpClientLogger {
    public abstract virtual object LogRequestStart(HttpRequestMessage request);
    public abstract virtual void LogRequestStop(object context, HttpRequestMessage request, HttpResponseMessage response, TimeSpan elapsed);
    public abstract virtual void LogRequestFailed(object context, HttpRequestMessage request, HttpResponseMessage response, Exception exception, TimeSpan elapsed);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler : DelegatingHandler {
    public LoggingHttpMessageHandler(ILogger logger);
    public LoggingHttpMessageHandler(ILogger logger, HttpClientFactoryOptions options);
    [DebuggerStepThroughAttribute]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler : DelegatingHandler {
    public LoggingScopeHttpMessageHandler(ILogger logger);
    public LoggingScopeHttpMessageHandler(ILogger logger, HttpClientFactoryOptions options);
    [DebuggerStepThroughAttribute]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class System.Net.Http.HttpClientFactoryExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static HttpClient CreateClient(IHttpClientFactory factory);
}
[ExtensionAttribute]
public static class System.Net.Http.HttpMessageHandlerFactoryExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static HttpMessageHandler CreateHandler(IHttpMessageHandlerFactory factory);
}
[NullableContextAttribute("1")]
public interface System.Net.Http.IHttpClientFactory {
    public abstract virtual HttpClient CreateClient(string name);
}
[NullableContextAttribute("1")]
public interface System.Net.Http.IHttpMessageHandlerFactory {
    public abstract virtual HttpMessageHandler CreateHandler(string name);
}
