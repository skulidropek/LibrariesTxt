[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.Extensions.Logging.Abstractions.LogEntry`1 : ValueType {
    private TState _State_k__BackingField;
    private object _dummy;
    private int _dummyPrimitive;
    public string Category { get; }
    public EventId EventId { get; }
    [NullableAttribute("2")]
public Exception Exception { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<TState, Exception, string> Formatter { get; }
    public LogLevel LogLevel { get; }
    public TState State { get; }
    public LogEntry`1(LogLevel logLevel, string category, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public string get_Category();
    public EventId get_EventId();
    [NullableContextAttribute("2")]
public Exception get_Exception();
    public Func`3<TState, Exception, string> get_Formatter();
    public LogLevel get_LogLevel();
    public TState get_State();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Logging.Abstractions.NullLogger : object {
    public static NullLogger Instance { get; }
    public static NullLogger get_Instance();
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    [NullableContextAttribute("2")]
public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
}
public class Microsoft.Extensions.Logging.Abstractions.NullLogger`1 : object {
    [NullableAttribute("1")]
public static NullLogger`1<T> Instance;
    [NullableContextAttribute("1")]
public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    [NullableContextAttribute("2")]
public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
}
public class Microsoft.Extensions.Logging.Abstractions.NullLoggerFactory : object {
    [NullableAttribute("1")]
public static NullLoggerFactory Instance;
    [NullableContextAttribute("1")]
public sealed virtual void AddProvider(ILoggerProvider provider);
    [NullableContextAttribute("1")]
public sealed virtual ILogger CreateLogger(string name);
    public sealed virtual void Dispose();
}
public class Microsoft.Extensions.Logging.Abstractions.NullLoggerProvider : object {
    [NullableAttribute("1")]
public static NullLoggerProvider Instance { get; }
    [NullableContextAttribute("1")]
public static NullLoggerProvider get_Instance();
    [NullableContextAttribute("1")]
public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.Extensions.Logging.EventId : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public int Id { get; }
    public string Name { get; }
    public EventId(int id, string name);
    public int get_Id();
    public string get_Name();
    public sealed virtual bool Equals(EventId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(EventId left, EventId right);
    public static EventId op_Implicit(int i);
    public static bool op_Inequality(EventId left, EventId right);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Logging.IExternalScopeProvider {
    public abstract virtual void ForEachScope(Action`2<object, TState> callback, TState state);
    public abstract virtual IDisposable Push(object state);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Logging.ILogger {
    public abstract virtual IDisposable BeginScope(TState state);
    public abstract virtual bool IsEnabled(LogLevel logLevel);
    [NullableContextAttribute("2")]
public abstract virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
}
public interface Microsoft.Extensions.Logging.ILogger`1 {
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Logging.ILoggerFactory {
    public abstract virtual void AddProvider(ILoggerProvider provider);
    public abstract virtual ILogger CreateLogger(string categoryName);
}
public interface Microsoft.Extensions.Logging.ILoggerProvider {
    [NullableContextAttribute("1")]
public abstract virtual ILogger CreateLogger(string categoryName);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Logging.ILoggingBuilder {
    public IServiceCollection Services { get; }
    public abstract virtual IServiceCollection get_Services();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Logging.ISupportExternalScope {
    public abstract virtual void SetScopeProvider(IExternalScopeProvider scopeProvider);
}
public class Microsoft.Extensions.Logging.LogDefineOptions : object {
    public bool SkipEnabledCheck { get; public set; }
    public bool get_SkipEnabledCheck();
    public void set_SkipEnabledCheck(bool value);
}
public class Microsoft.Extensions.Logging.Logger`1 : object {
    [NullableContextAttribute("1")]
public Logger`1(ILoggerFactory factory);
    private sealed virtual override IDisposable Microsoft.Extensions.Logging.ILogger.BeginScope(TState state);
    private sealed virtual override bool Microsoft.Extensions.Logging.ILogger.IsEnabled(LogLevel logLevel);
    private sealed virtual override void Microsoft.Extensions.Logging.ILogger.Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.LoggerExtensions : object {
    [ExtensionAttribute]
public static IDisposable BeginScope(ILogger logger, string messageFormat, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void Log(ILogger logger, LogLevel logLevel, EventId eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void Log(ILogger logger, LogLevel logLevel, EventId eventId, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void Log(ILogger logger, LogLevel logLevel, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void Log(ILogger logger, LogLevel logLevel, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogCritical(ILogger logger, EventId eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogCritical(ILogger logger, EventId eventId, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogCritical(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogCritical(ILogger logger, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogDebug(ILogger logger, EventId eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogDebug(ILogger logger, EventId eventId, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogDebug(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogDebug(ILogger logger, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogError(ILogger logger, EventId eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogError(ILogger logger, EventId eventId, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogError(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogError(ILogger logger, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogInformation(ILogger logger, EventId eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogInformation(ILogger logger, EventId eventId, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogInformation(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogInformation(ILogger logger, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogTrace(ILogger logger, EventId eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogTrace(ILogger logger, EventId eventId, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogTrace(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogTrace(ILogger logger, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogWarning(ILogger logger, EventId eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogWarning(ILogger logger, EventId eventId, string message, Object[] args);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void LogWarning(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogWarning(ILogger logger, string message, Object[] args);
}
public class Microsoft.Extensions.Logging.LoggerExternalScopeProvider : object {
    [NullableContextAttribute("1")]
public sealed virtual void ForEachScope(Action`2<object, TState> callback, TState state);
    [NullableContextAttribute("1")]
public sealed virtual IDisposable Push(object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.LoggerFactoryExtensions : object {
    [ExtensionAttribute]
public static ILogger CreateLogger(ILoggerFactory factory, Type type);
    [ExtensionAttribute]
public static ILogger`1<T> CreateLogger(ILoggerFactory factory);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class Microsoft.Extensions.Logging.LoggerMessage : object {
    [NullableContextAttribute("1")]
public static Action`2<ILogger, Exception> Define(LogLevel logLevel, EventId eventId, string formatString);
    [NullableContextAttribute("1")]
public static Action`2<ILogger, Exception> Define(LogLevel logLevel, EventId eventId, string formatString, LogDefineOptions options);
    [NullableContextAttribute("1")]
public static Func`2<ILogger, IDisposable> DefineScope(string formatString);
    [NullableContextAttribute("1")]
public static Func`3<ILogger, T1, IDisposable> DefineScope(string formatString);
    public static Func`4<ILogger, T1, T2, IDisposable> DefineScope(string formatString);
    public static Func`5<ILogger, T1, T2, T3, IDisposable> DefineScope(string formatString);
    public static Func`6<ILogger, T1, T2, T3, T4, IDisposable> DefineScope(string formatString);
    public static Func`7<ILogger, T1, T2, T3, T4, T5, IDisposable> DefineScope(string formatString);
    public static Func`8<ILogger, T1, T2, T3, T4, T5, T6, IDisposable> DefineScope(string formatString);
    [NullableContextAttribute("1")]
public static Action`3<ILogger, T1, Exception> Define(LogLevel logLevel, EventId eventId, string formatString);
    public static Action`3<ILogger, T1, Exception> Define(LogLevel logLevel, EventId eventId, string formatString, LogDefineOptions options);
    public static Action`4<ILogger, T1, T2, Exception> Define(LogLevel logLevel, EventId eventId, string formatString);
    public static Action`4<ILogger, T1, T2, Exception> Define(LogLevel logLevel, EventId eventId, string formatString, LogDefineOptions options);
    public static Action`5<ILogger, T1, T2, T3, Exception> Define(LogLevel logLevel, EventId eventId, string formatString);
    public static Action`5<ILogger, T1, T2, T3, Exception> Define(LogLevel logLevel, EventId eventId, string formatString, LogDefineOptions options);
    public static Action`6<ILogger, T1, T2, T3, T4, Exception> Define(LogLevel logLevel, EventId eventId, string formatString);
    public static Action`6<ILogger, T1, T2, T3, T4, Exception> Define(LogLevel logLevel, EventId eventId, string formatString, LogDefineOptions options);
    public static Action`7<ILogger, T1, T2, T3, T4, T5, Exception> Define(LogLevel logLevel, EventId eventId, string formatString);
    public static Action`7<ILogger, T1, T2, T3, T4, T5, Exception> Define(LogLevel logLevel, EventId eventId, string formatString, LogDefineOptions options);
    public static Action`8<ILogger, T1, T2, T3, T4, T5, T6, Exception> Define(LogLevel logLevel, EventId eventId, string formatString);
    public static Action`8<ILogger, T1, T2, T3, T4, T5, T6, Exception> Define(LogLevel logLevel, EventId eventId, string formatString, LogDefineOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class Microsoft.Extensions.Logging.LoggerMessageAttribute : Attribute {
    public int EventId { get; public set; }
    [NullableAttribute("2")]
public string EventName { get; public set; }
    public LogLevel Level { get; public set; }
    public string Message { get; public set; }
    public bool SkipEnabledCheck { get; public set; }
    public LoggerMessageAttribute(int eventId, LogLevel level, string message);
    public LoggerMessageAttribute(LogLevel level);
    public LoggerMessageAttribute(LogLevel level, string message);
    public LoggerMessageAttribute(string message);
    public int get_EventId();
    public void set_EventId(int value);
    [NullableContextAttribute("2")]
public string get_EventName();
    [NullableContextAttribute("2")]
public void set_EventName(string value);
    public LogLevel get_Level();
    public void set_Level(LogLevel value);
    public string get_Message();
    public void set_Message(string value);
    public bool get_SkipEnabledCheck();
    public void set_SkipEnabledCheck(bool value);
}
public enum Microsoft.Extensions.Logging.LogLevel : Enum {
    public int value__;
    public static LogLevel Trace;
    public static LogLevel Debug;
    public static LogLevel Information;
    public static LogLevel Warning;
    public static LogLevel Error;
    public static LogLevel Critical;
    public static LogLevel None;
}
