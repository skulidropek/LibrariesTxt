[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfiguration`1 {
    public IConfiguration Configuration { get; }
    public abstract virtual IConfiguration get_Configuration();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfigurationFactory {
    public abstract virtual IConfiguration GetConfiguration(Type providerType);
}
public static class Microsoft.Extensions.Logging.Configuration.LoggerProviderOptions : object {
    [NullableContextAttribute("1")]
[RequiresDynamicCodeAttribute("Binding TOptions to configuration values may require generating dynamic code at runtime.")]
[RequiresUnreferencedCodeAttribute("TOptions's dependent types may have their members trimmed. Ensure all required members are preserved.")]
public static void RegisterProviderOptions(IServiceCollection services);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.Extensions.Logging.Configuration.LoggerProviderOptionsChangeTokenSource`2 : ConfigurationChangeTokenSource`1<TOptions> {
    [NullableContextAttribute("1")]
public LoggerProviderOptionsChangeTokenSource`2(ILoggerProviderConfiguration`1<TProvider> providerConfiguration);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.Configuration.LoggingBuilderConfigurationExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void AddConfiguration(ILoggingBuilder builder);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.LoggingBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ILoggingBuilder AddConfiguration(ILoggingBuilder builder, IConfiguration configuration);
}
