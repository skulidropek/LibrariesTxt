[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This type is retained only for compatibility. The recommended alternative is ConsoleLoggerOptions.")]
public class Microsoft.Extensions.Logging.Console.ConfigurationConsoleLoggerSettings : object {
    [NullableAttribute("2")]
public IChangeToken ChangeToken { get; }
    public bool IncludeScopes { get; }
    public ConfigurationConsoleLoggerSettings(IConfiguration configuration);
    [NullableContextAttribute("2")]
public sealed virtual IChangeToken get_ChangeToken();
    public sealed virtual bool get_IncludeScopes();
    public sealed virtual IConsoleLoggerSettings Reload();
    public sealed virtual bool TryGetSwitch(string name, LogLevel& level);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Extensions.Logging.Console.ConsoleFormatter : object {
    public string Name { get; }
    protected ConsoleFormatter(string name);
    public string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual void Write(LogEntry`1& modreq(System.Runtime.InteropServices.InAttribute) logEntry, IExternalScopeProvider scopeProvider, TextWriter textWriter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Extensions.Logging.Console.ConsoleFormatterNames : object {
    public static string Json;
    public static string Simple;
    public static string Systemd;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions : object {
    public bool IncludeScopes { get; public set; }
    [StringSyntaxAttribute("DateTimeFormat")]
public string TimestampFormat { get; public set; }
    public bool UseUtcTimestamp { get; public set; }
    public bool get_IncludeScopes();
    public void set_IncludeScopes(bool value);
    public string get_TimestampFormat();
    public void set_TimestampFormat(string value);
    public bool get_UseUtcTimestamp();
    public void set_UseUtcTimestamp(bool value);
}
[ObsoleteAttribute("ConsoleLoggerFormat has been deprecated.")]
public enum Microsoft.Extensions.Logging.Console.ConsoleLoggerFormat : Enum {
    public int value__;
    public static ConsoleLoggerFormat Default;
    public static ConsoleLoggerFormat Systemd;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions : object {
    [ObsoleteAttribute("ConsoleLoggerOptions.DisableColors has been deprecated. Use SimpleConsoleFormatterOptions.ColorBehavior instead.")]
public bool DisableColors { get; public set; }
    [ObsoleteAttribute("ConsoleLoggerOptions.Format has been deprecated. Use ConsoleLoggerOptions.FormatterName instead.")]
public ConsoleLoggerFormat Format { get; public set; }
    public string FormatterName { get; public set; }
    [ObsoleteAttribute("ConsoleLoggerOptions.IncludeScopes has been deprecated. Use ConsoleFormatterOptions.IncludeScopes instead.")]
public bool IncludeScopes { get; public set; }
    public LogLevel LogToStandardErrorThreshold { get; public set; }
    public int MaxQueueLength { get; public set; }
    public ConsoleLoggerQueueFullMode QueueFullMode { get; public set; }
    [ObsoleteAttribute("ConsoleLoggerOptions.TimestampFormat has been deprecated. Use ConsoleFormatterOptions.TimestampFormat instead.")]
public string TimestampFormat { get; public set; }
    [ObsoleteAttribute("ConsoleLoggerOptions.UseUtcTimestamp has been deprecated. Use ConsoleFormatterOptions.UseUtcTimestamp instead.")]
public bool UseUtcTimestamp { get; public set; }
    public bool get_DisableColors();
    public void set_DisableColors(bool value);
    public ConsoleLoggerFormat get_Format();
    public void set_Format(ConsoleLoggerFormat value);
    public string get_FormatterName();
    public void set_FormatterName(string value);
    public bool get_IncludeScopes();
    public void set_IncludeScopes(bool value);
    public LogLevel get_LogToStandardErrorThreshold();
    public void set_LogToStandardErrorThreshold(LogLevel value);
    public int get_MaxQueueLength();
    public void set_MaxQueueLength(int value);
    public ConsoleLoggerQueueFullMode get_QueueFullMode();
    public void set_QueueFullMode(ConsoleLoggerQueueFullMode value);
    public string get_TimestampFormat();
    public void set_TimestampFormat(string value);
    public bool get_UseUtcTimestamp();
    public void set_UseUtcTimestamp(bool value);
}
[ProviderAliasAttribute("Console")]
[UnsupportedOSPlatformAttribute("browser")]
public class Microsoft.Extensions.Logging.Console.ConsoleLoggerProvider : object {
    [NullableContextAttribute("1")]
public ConsoleLoggerProvider(IOptionsMonitor`1<ConsoleLoggerOptions> options);
    [NullableContextAttribute("1")]
public ConsoleLoggerProvider(IOptionsMonitor`1<ConsoleLoggerOptions> options, IEnumerable`1<ConsoleFormatter> formatters);
    [NullableContextAttribute("1")]
public sealed virtual ILogger CreateLogger(string name);
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public sealed virtual void SetScopeProvider(IExternalScopeProvider scopeProvider);
}
public enum Microsoft.Extensions.Logging.Console.ConsoleLoggerQueueFullMode : Enum {
    public int value__;
    public static ConsoleLoggerQueueFullMode Wait;
    public static ConsoleLoggerQueueFullMode DropWrite;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This type is retained only for compatibility. The recommended alternative is ConsoleLoggerOptions.", "True")]
public class Microsoft.Extensions.Logging.Console.ConsoleLoggerSettings : object {
    [NullableAttribute("2")]
public IChangeToken ChangeToken { get; public set; }
    public bool DisableColors { get; public set; }
    public bool IncludeScopes { get; public set; }
    public IDictionary`2<string, LogLevel> Switches { get; public set; }
    [NullableContextAttribute("2")]
public sealed virtual IChangeToken get_ChangeToken();
    [NullableContextAttribute("2")]
public void set_ChangeToken(IChangeToken value);
    public bool get_DisableColors();
    public void set_DisableColors(bool value);
    public sealed virtual bool get_IncludeScopes();
    public void set_IncludeScopes(bool value);
    public IDictionary`2<string, LogLevel> get_Switches();
    public void set_Switches(IDictionary`2<string, LogLevel> value);
    public sealed virtual IConsoleLoggerSettings Reload();
    public sealed virtual bool TryGetSwitch(string name, LogLevel& level);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This type is retained only for compatibility. The recommended alternative is ConsoleLoggerOptions.", "True")]
public interface Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings {
    [NullableAttribute("2")]
public IChangeToken ChangeToken { get; }
    public bool IncludeScopes { get; }
    [NullableContextAttribute("2")]
public abstract virtual IChangeToken get_ChangeToken();
    public abstract virtual bool get_IncludeScopes();
    public abstract virtual IConsoleLoggerSettings Reload();
    public abstract virtual bool TryGetSwitch(string name, LogLevel& level);
}
public class Microsoft.Extensions.Logging.Console.JsonConsoleFormatterOptions : ConsoleFormatterOptions {
    public JsonWriterOptions JsonWriterOptions { get; public set; }
    public JsonWriterOptions get_JsonWriterOptions();
    public void set_JsonWriterOptions(JsonWriterOptions value);
}
public enum Microsoft.Extensions.Logging.Console.LoggerColorBehavior : Enum {
    public int value__;
    public static LoggerColorBehavior Default;
    public static LoggerColorBehavior Enabled;
    public static LoggerColorBehavior Disabled;
}
public class Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions : ConsoleFormatterOptions {
    public LoggerColorBehavior ColorBehavior { get; public set; }
    public bool SingleLine { get; public set; }
    public LoggerColorBehavior get_ColorBehavior();
    public void set_ColorBehavior(LoggerColorBehavior value);
    public bool get_SingleLine();
    public void set_SingleLine(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[UnsupportedOSPlatformAttribute("browser")]
public static class Microsoft.Extensions.Logging.ConsoleLoggerExtensions : object {
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddConsole(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddConsole(ILoggerFactory factory);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddConsole(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddConsole(ILoggerFactory factory, IConfiguration configuration);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddConsole(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddConsole(ILoggerFactory factory, IConsoleLoggerSettings settings);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddConsole(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddConsole(ILoggerFactory factory, LogLevel minLevel);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddConsole(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddConsole(ILoggerFactory factory, LogLevel minLevel, bool includeScopes);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddConsole(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddConsole(ILoggerFactory factory, bool includeScopes);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddConsole(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddConsole(ILoggerFactory factory, Func`3<string, LogLevel, bool> filter);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddConsole(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddConsole(ILoggerFactory factory, Func`3<string, LogLevel, bool> filter, bool includeScopes);
    [ExtensionAttribute]
public static ILoggingBuilder AddConsole(ILoggingBuilder builder);
    [ExtensionAttribute]
public static ILoggingBuilder AddConsole(ILoggingBuilder builder, Action`1<ConsoleLoggerOptions> configure);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Binding TOptions to configuration values may require generating dynamic code at runtime.")]
[RequiresUnreferencedCodeAttribute("TOptions's dependent types may have their members trimmed. Ensure all required members are preserved.")]
public static ILoggingBuilder AddConsoleFormatter(ILoggingBuilder builder);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Binding TOptions to configuration values may require generating dynamic code at runtime.")]
[RequiresUnreferencedCodeAttribute("TOptions's dependent types may have their members trimmed. Ensure all required members are preserved.")]
public static ILoggingBuilder AddConsoleFormatter(ILoggingBuilder builder, Action`1<TOptions> configure);
    [ExtensionAttribute]
public static ILoggingBuilder AddJsonConsole(ILoggingBuilder builder);
    [ExtensionAttribute]
public static ILoggingBuilder AddJsonConsole(ILoggingBuilder builder, Action`1<JsonConsoleFormatterOptions> configure);
    [ExtensionAttribute]
public static ILoggingBuilder AddSimpleConsole(ILoggingBuilder builder);
    [ExtensionAttribute]
public static ILoggingBuilder AddSimpleConsole(ILoggingBuilder builder, Action`1<SimpleConsoleFormatterOptions> configure);
    [ExtensionAttribute]
public static ILoggingBuilder AddSystemdConsole(ILoggingBuilder builder);
    [ExtensionAttribute]
public static ILoggingBuilder AddSystemdConsole(ILoggingBuilder builder, Action`1<ConsoleFormatterOptions> configure);
}
