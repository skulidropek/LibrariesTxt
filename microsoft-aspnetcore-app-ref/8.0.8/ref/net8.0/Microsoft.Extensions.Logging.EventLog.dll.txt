[ProviderAliasAttribute("EventLog")]
public class Microsoft.Extensions.Logging.EventLog.EventLogLoggerProvider : object {
    [NullableContextAttribute("2")]
public EventLogLoggerProvider(EventLogSettings settings);
    [NullableContextAttribute("1")]
public EventLogLoggerProvider(IOptions`1<EventLogSettings> options);
    [NullableContextAttribute("1")]
public sealed virtual ILogger CreateLogger(string name);
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public sealed virtual void SetScopeProvider(IExternalScopeProvider scopeProvider);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Logging.EventLog.EventLogSettings : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<string, LogLevel, bool> Filter { get; public set; }
    public string LogName { get; public set; }
    public string MachineName { get; public set; }
    public string SourceName { get; public set; }
    public Func`3<string, LogLevel, bool> get_Filter();
    public void set_Filter(Func`3<string, LogLevel, bool> value);
    public string get_LogName();
    public void set_LogName(string value);
    public string get_MachineName();
    public void set_MachineName(string value);
    public string get_SourceName();
    public void set_SourceName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.EventLoggerFactoryExtensions : object {
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddEventLog(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddEventLog(ILoggerFactory factory);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddEventLog(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddEventLog(ILoggerFactory factory, EventLogSettings settings);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddEventLog(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddEventLog(ILoggerFactory factory, LogLevel minLevel);
    [ExtensionAttribute]
public static ILoggingBuilder AddEventLog(ILoggingBuilder builder);
    [ExtensionAttribute]
public static ILoggingBuilder AddEventLog(ILoggingBuilder builder, EventLogSettings settings);
    [ExtensionAttribute]
public static ILoggingBuilder AddEventLog(ILoggingBuilder builder, Action`1<EventLogSettings> configure);
}
