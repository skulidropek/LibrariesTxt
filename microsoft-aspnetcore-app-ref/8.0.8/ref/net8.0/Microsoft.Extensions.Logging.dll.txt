[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddLogging(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddLogging(IServiceCollection services, Action`1<ILoggingBuilder> configure);
}
[FlagsAttribute]
public enum Microsoft.Extensions.Logging.ActivityTrackingOptions : Enum {
    public int value__;
    public static ActivityTrackingOptions None;
    public static ActivityTrackingOptions SpanId;
    public static ActivityTrackingOptions TraceId;
    public static ActivityTrackingOptions ParentId;
    public static ActivityTrackingOptions TraceState;
    public static ActivityTrackingOptions TraceFlags;
    public static ActivityTrackingOptions Tags;
    public static ActivityTrackingOptions Baggage;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions : object {
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, Func`3<string, LogLevel, bool> categoryLevelFilter);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, Func`4<string, string, LogLevel, bool> filter);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, string category, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, string category, LogLevel level);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, Func`3<string, LogLevel, bool> categoryLevelFilter);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, Func`4<string, string, LogLevel, bool> filter);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, string category, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, string category, LogLevel level);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, Func`3<string, LogLevel, bool> categoryLevelFilter);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, string category, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, string category, LogLevel level);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, Func`3<string, LogLevel, bool> categoryLevelFilter);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, string category, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, string category, LogLevel level);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Logging.LoggerFactory : object {
    public LoggerFactory(IEnumerable`1<ILoggerProvider> providers);
    public LoggerFactory(IEnumerable`1<ILoggerProvider> providers, LoggerFilterOptions filterOptions);
    public LoggerFactory(IEnumerable`1<ILoggerProvider> providers, IOptionsMonitor`1<LoggerFilterOptions> filterOption);
    public LoggerFactory(IEnumerable`1<ILoggerProvider> providers, IOptionsMonitor`1<LoggerFilterOptions> filterOption, IOptions`1<LoggerFactoryOptions> options);
    public LoggerFactory(IEnumerable`1<ILoggerProvider> providers, IOptionsMonitor`1<LoggerFilterOptions> filterOption, IOptions`1<LoggerFactoryOptions> options, IExternalScopeProvider scopeProvider);
    public sealed virtual void AddProvider(ILoggerProvider provider);
    protected virtual bool CheckDisposed();
    public static ILoggerFactory Create(Action`1<ILoggingBuilder> configure);
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
}
public class Microsoft.Extensions.Logging.LoggerFactoryOptions : object {
    public ActivityTrackingOptions ActivityTrackingOptions { get; public set; }
    public ActivityTrackingOptions get_ActivityTrackingOptions();
    public void set_ActivityTrackingOptions(ActivityTrackingOptions value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Logging.LoggerFilterOptions : object {
    public bool CaptureScopes { get; public set; }
    public LogLevel MinLevel { get; public set; }
    public IList`1<LoggerFilterRule> Rules { get; }
    public bool get_CaptureScopes();
    public void set_CaptureScopes(bool value);
    public LogLevel get_MinLevel();
    public void set_MinLevel(LogLevel value);
    public IList`1<LoggerFilterRule> get_Rules();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Logging.LoggerFilterRule : object {
    public string CategoryName { get; }
    public Func`4<string, string, LogLevel, bool> Filter { get; }
    public Nullable`1<LogLevel> LogLevel { get; }
    public string ProviderName { get; }
    public LoggerFilterRule(string providerName, string categoryName, Nullable`1<LogLevel> logLevel, Func`4<string, string, LogLevel, bool> filter);
    public string get_CategoryName();
    public Func`4<string, string, LogLevel, bool> get_Filter();
    public Nullable`1<LogLevel> get_LogLevel();
    public string get_ProviderName();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.LoggingBuilderExtensions : object {
    [ExtensionAttribute]
public static ILoggingBuilder AddProvider(ILoggingBuilder builder, ILoggerProvider provider);
    [ExtensionAttribute]
public static ILoggingBuilder ClearProviders(ILoggingBuilder builder);
    [ExtensionAttribute]
public static ILoggingBuilder Configure(ILoggingBuilder builder, Action`1<LoggerFactoryOptions> action);
    [ExtensionAttribute]
public static ILoggingBuilder SetMinimumLevel(ILoggingBuilder builder, LogLevel level);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.Extensions.Logging.ProviderAliasAttribute : Attribute {
    public string Alias { get; }
    public ProviderAliasAttribute(string alias);
    public string get_Alias();
}
