public class Microsoft.Extensions.Primitives.CancellationChangeToken : object {
    public bool ActiveChangeCallbacks { get; }
    public bool HasChanged { get; }
    public CancellationChangeToken(CancellationToken cancellationToken);
    public sealed virtual bool get_ActiveChangeCallbacks();
    public sealed virtual bool get_HasChanged();
    [NullableContextAttribute("1")]
public sealed virtual IDisposable RegisterChangeCallback(Action`1<object> callback, object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Extensions.Primitives.ChangeToken : object {
    public static IDisposable OnChange(Func`1<IChangeToken> changeTokenProducer, Action changeTokenConsumer);
    public static IDisposable OnChange(Func`1<IChangeToken> changeTokenProducer, Action`1<TState> changeTokenConsumer, TState state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Primitives.CompositeChangeToken : object {
    public bool ActiveChangeCallbacks { get; }
    public IReadOnlyList`1<IChangeToken> ChangeTokens { get; }
    public bool HasChanged { get; }
    public CompositeChangeToken(IReadOnlyList`1<IChangeToken> changeTokens);
    public sealed virtual bool get_ActiveChangeCallbacks();
    public IReadOnlyList`1<IChangeToken> get_ChangeTokens();
    public sealed virtual bool get_HasChanged();
    public sealed virtual IDisposable RegisterChangeCallback(Action`1<object> callback, object state);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Primitives.Extensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static StringBuilder Append(StringBuilder builder, StringSegment segment);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Primitives.IChangeToken {
    public bool ActiveChangeCallbacks { get; }
    public bool HasChanged { get; }
    public abstract virtual bool get_ActiveChangeCallbacks();
    public abstract virtual bool get_HasChanged();
    public abstract virtual IDisposable RegisterChangeCallback(Action`1<object> callback, object state);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This type is retained only for compatibility. The recommended alternative is string.Create<TState> (int length, TState state, System.Buffers.SpanAction<char,TState> action).", "True")]
public class Microsoft.Extensions.Primitives.InplaceStringBuilder : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public int Capacity { get; public set; }
    public InplaceStringBuilder(int capacity);
    public int get_Capacity();
    public void set_Capacity(int value);
    public void Append(StringSegment segment);
    public void Append(char c);
    public void Append(string value);
    public void Append(string value, int offset, int count);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
public class Microsoft.Extensions.Primitives.StringSegment : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public static StringSegment Empty;
    [NullableAttribute("2")]
public string Buffer { get; }
    [MemberNotNullWhenAttribute("True", "Buffer")]
[MemberNotNullWhenAttribute("True", "Value")]
public bool HasValue { get; }
    public char Item { get; }
    public int Length { get; }
    public int Offset { get; }
    [NullableAttribute("2")]
public string Value { get; }
    [NullableContextAttribute("2")]
public StringSegment(string buffer);
    public StringSegment(string buffer, int offset, int length);
    [NullableContextAttribute("2")]
public string get_Buffer();
    [MemberNotNullWhenAttribute("True", "Buffer")]
[MemberNotNullWhenAttribute("True", "Value")]
public bool get_HasValue();
    public char get_Item(int index);
    public int get_Length();
    public int get_Offset();
    [NullableContextAttribute("2")]
public string get_Value();
    [NullableContextAttribute("0")]
public ReadOnlyMemory`1<char> AsMemory();
    [NullableContextAttribute("0")]
public ReadOnlySpan`1<char> AsSpan();
    [NullableContextAttribute("0")]
public ReadOnlySpan`1<char> AsSpan(int start);
    [NullableContextAttribute("0")]
public ReadOnlySpan`1<char> AsSpan(int start, int length);
    public static int Compare(StringSegment a, StringSegment b, StringComparison comparisonType);
    public bool EndsWith(string text, StringComparison comparisonType);
    public sealed virtual bool Equals(StringSegment other);
    public static bool Equals(StringSegment a, StringSegment b, StringComparison comparisonType);
    public bool Equals(StringSegment other, StringComparison comparisonType);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(string text);
    [NullableContextAttribute("2")]
public bool Equals(string text, StringComparison comparisonType);
    public virtual int GetHashCode();
    public int IndexOf(char c);
    public int IndexOf(char c, int start);
    public int IndexOf(char c, int start, int count);
    public int IndexOfAny(Char[] anyOf);
    public int IndexOfAny(Char[] anyOf, int startIndex);
    public int IndexOfAny(Char[] anyOf, int startIndex, int count);
    public static bool IsNullOrEmpty(StringSegment value);
    public int LastIndexOf(char value);
    public static bool op_Equality(StringSegment left, StringSegment right);
    [NullableContextAttribute("0")]
public static ReadOnlyMemory`1<char> op_Implicit(StringSegment segment);
    [NullableContextAttribute("0")]
public static ReadOnlySpan`1<char> op_Implicit(StringSegment segment);
    [NullableContextAttribute("2")]
public static StringSegment op_Implicit(string value);
    public static bool op_Inequality(StringSegment left, StringSegment right);
    public StringTokenizer Split(Char[] chars);
    public bool StartsWith(string text, StringComparison comparisonType);
    public StringSegment Subsegment(int offset);
    public StringSegment Subsegment(int offset, int length);
    public string Substring(int offset);
    public string Substring(int offset, int length);
    public virtual string ToString();
    public StringSegment Trim();
    public StringSegment TrimEnd();
    public StringSegment TrimStart();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Primitives.StringSegmentComparer : object {
    public static StringSegmentComparer Ordinal { get; }
    public static StringSegmentComparer OrdinalIgnoreCase { get; }
    public static StringSegmentComparer get_Ordinal();
    public static StringSegmentComparer get_OrdinalIgnoreCase();
    public sealed virtual int Compare(StringSegment x, StringSegment y);
    public sealed virtual bool Equals(StringSegment x, StringSegment y);
    public sealed virtual int GetHashCode(StringSegment obj);
}
[IsReadOnlyAttribute]
public class Microsoft.Extensions.Primitives.StringTokenizer : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    [NullableContextAttribute("1")]
public StringTokenizer(StringSegment value, Char[] separators);
    [NullableContextAttribute("1")]
public StringTokenizer(string value, Char[] separators);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<StringSegment> System.Collections.Generic.IEnumerable<Microsoft.Extensions.Primitives.StringSegment>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
public class Microsoft.Extensions.Primitives.StringValues : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public static StringValues Empty;
    public int Count { get; }
    public string Item { get; }
    private bool System.Collections.Generic.ICollection<System.String>.IsReadOnly { get; }
    private string System.Collections.Generic.IList<System.String>.Item { get; private set; }
    public StringValues(string value);
    public StringValues(String[] values);
    public sealed virtual int get_Count();
    public sealed virtual string get_Item(int index);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.String>.get_IsReadOnly();
    private sealed virtual override string System.Collections.Generic.IList<System.String>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<System.String>.set_Item(int index, string value);
    public static StringValues Concat(StringValues values1, StringValues values2);
    public static StringValues Concat(StringValues& values, string value);
    public static StringValues Concat(string value, StringValues& values);
    public sealed virtual bool Equals(StringValues other);
    public static bool Equals(StringValues left, StringValues right);
    public static bool Equals(StringValues left, string right);
    public static bool Equals(StringValues left, String[] right);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(string other);
    public static bool Equals(string left, StringValues right);
    public sealed virtual bool Equals(String[] other);
    public static bool Equals(String[] left, StringValues right);
    public Enumerator GetEnumerator();
    public virtual int GetHashCode();
    public static bool IsNullOrEmpty(StringValues value);
    public static bool op_Equality(StringValues left, StringValues right);
    public static bool op_Equality(StringValues left, object right);
    public static bool op_Equality(StringValues left, string right);
    public static bool op_Equality(StringValues left, String[] right);
    public static bool op_Equality(object left, StringValues right);
    public static bool op_Equality(string left, StringValues right);
    public static bool op_Equality(String[] left, StringValues right);
    public static string op_Implicit(StringValues values);
    public static String[] op_Implicit(StringValues value);
    public static StringValues op_Implicit(string value);
    public static StringValues op_Implicit(String[] values);
    public static bool op_Inequality(StringValues left, StringValues right);
    public static bool op_Inequality(StringValues left, object right);
    public static bool op_Inequality(StringValues left, string right);
    public static bool op_Inequality(StringValues left, String[] right);
    public static bool op_Inequality(object left, StringValues right);
    public static bool op_Inequality(string left, StringValues right);
    public static bool op_Inequality(String[] left, StringValues right);
    private sealed virtual override void System.Collections.Generic.ICollection<System.String>.Add(string item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.String>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.String>.Contains(string item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.String>.CopyTo(String[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.String>.Remove(string item);
    private sealed virtual override IEnumerator`1<string> System.Collections.Generic.IEnumerable<System.String>.GetEnumerator();
    private sealed virtual override int System.Collections.Generic.IList<System.String>.IndexOf(string item);
    private sealed virtual override void System.Collections.Generic.IList<System.String>.Insert(int index, string item);
    private sealed virtual override void System.Collections.Generic.IList<System.String>.RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public String[] ToArray();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
