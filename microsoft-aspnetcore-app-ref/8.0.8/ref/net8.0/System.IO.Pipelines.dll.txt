public class System.IO.Pipelines.FlushResult : ValueType {
    private int _dummyPrimitive;
    public bool IsCanceled { get; }
    public bool IsCompleted { get; }
    public FlushResult(bool isCanceled, bool isCompleted);
    public bool get_IsCanceled();
    public bool get_IsCompleted();
}
[NullableContextAttribute("1")]
public interface System.IO.Pipelines.IDuplexPipe {
    public PipeReader Input { get; }
    public PipeWriter Output { get; }
    public abstract virtual PipeReader get_Input();
    public abstract virtual PipeWriter get_Output();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.Pipelines.Pipe : object {
    public PipeReader Reader { get; }
    public PipeWriter Writer { get; }
    public Pipe(PipeOptions options);
    public PipeReader get_Reader();
    public PipeWriter get_Writer();
    public void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.Pipelines.PipeOptions : object {
    public static PipeOptions Default { get; }
    public int MinimumSegmentSize { get; }
    public long PauseWriterThreshold { get; }
    public MemoryPool`1<byte> Pool { get; }
    public PipeScheduler ReaderScheduler { get; }
    public long ResumeWriterThreshold { get; }
    public bool UseSynchronizationContext { get; }
    public PipeScheduler WriterScheduler { get; }
    [NullableContextAttribute("2")]
public PipeOptions(MemoryPool`1<byte> pool, PipeScheduler readerScheduler, PipeScheduler writerScheduler, long pauseWriterThreshold, long resumeWriterThreshold, int minimumSegmentSize, bool useSynchronizationContext);
    public static PipeOptions get_Default();
    public int get_MinimumSegmentSize();
    public long get_PauseWriterThreshold();
    public MemoryPool`1<byte> get_Pool();
    public PipeScheduler get_ReaderScheduler();
    public long get_ResumeWriterThreshold();
    public bool get_UseSynchronizationContext();
    public PipeScheduler get_WriterScheduler();
}
public abstract class System.IO.Pipelines.PipeReader : object {
    public abstract virtual void AdvanceTo(SequencePosition consumed);
    public abstract virtual void AdvanceTo(SequencePosition consumed, SequencePosition examined);
    [NullableContextAttribute("1")]
public virtual Stream AsStream(bool leaveOpen);
    public abstract virtual void CancelPendingRead();
    [NullableContextAttribute("2")]
public abstract virtual void Complete(Exception exception);
    [NullableContextAttribute("2")]
public virtual ValueTask CompleteAsync(Exception exception);
    [NullableContextAttribute("1")]
public virtual Task CopyToAsync(PipeWriter destination, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public virtual Task CopyToAsync(Stream destination, CancellationToken cancellationToken);
    public static PipeReader Create(ReadOnlySequence`1<byte> sequence);
    [NullableContextAttribute("1")]
public static PipeReader Create(Stream stream, StreamPipeReaderOptions readerOptions);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("OnWriterCompleted has been deprecated and may not be invoked on all implementations of PipeReader.")]
public virtual void OnWriterCompleted(Action`2<Exception, object> callback, object state);
    public abstract virtual ValueTask`1<ReadResult> ReadAsync(CancellationToken cancellationToken);
    public ValueTask`1<ReadResult> ReadAtLeastAsync(int minimumSize, CancellationToken cancellationToken);
    protected virtual ValueTask`1<ReadResult> ReadAtLeastAsyncCore(int minimumSize, CancellationToken cancellationToken);
    public abstract virtual bool TryRead(ReadResult& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.IO.Pipelines.PipeScheduler : object {
    public static PipeScheduler Inline { get; }
    public static PipeScheduler ThreadPool { get; }
    public static PipeScheduler get_Inline();
    public static PipeScheduler get_ThreadPool();
    [NullableContextAttribute("2")]
public abstract virtual void Schedule(Action`1<object> action, object state);
}
public abstract class System.IO.Pipelines.PipeWriter : object {
    public bool CanGetUnflushedBytes { get; }
    public long UnflushedBytes { get; }
    public abstract virtual void Advance(int bytes);
    [NullableContextAttribute("1")]
public virtual Stream AsStream(bool leaveOpen);
    public abstract virtual void CancelPendingFlush();
    public virtual bool get_CanGetUnflushedBytes();
    [NullableContextAttribute("2")]
public abstract virtual void Complete(Exception exception);
    [NullableContextAttribute("2")]
public virtual ValueTask CompleteAsync(Exception exception);
    [NullableContextAttribute("1")]
protected internal virtual Task CopyFromAsync(Stream source, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public static PipeWriter Create(Stream stream, StreamPipeWriterOptions writerOptions);
    public abstract virtual ValueTask`1<FlushResult> FlushAsync(CancellationToken cancellationToken);
    public abstract virtual Memory`1<byte> GetMemory(int sizeHint);
    public abstract virtual Span`1<byte> GetSpan(int sizeHint);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("OnReaderCompleted has been deprecated and may not be invoked on all implementations of PipeWriter.")]
public virtual void OnReaderCompleted(Action`2<Exception, object> callback, object state);
    public virtual long get_UnflushedBytes();
    public virtual ValueTask`1<FlushResult> WriteAsync(ReadOnlyMemory`1<byte> source, CancellationToken cancellationToken);
}
[IsReadOnlyAttribute]
public class System.IO.Pipelines.ReadResult : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public ReadOnlySequence`1<byte> Buffer { get; }
    public bool IsCanceled { get; }
    public bool IsCompleted { get; }
    public ReadResult(ReadOnlySequence`1<byte> buffer, bool isCanceled, bool isCompleted);
    public ReadOnlySequence`1<byte> get_Buffer();
    public bool get_IsCanceled();
    public bool get_IsCompleted();
}
[ExtensionAttribute]
public static class System.IO.Pipelines.StreamPipeExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task CopyToAsync(Stream source, PipeWriter destination, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.Pipelines.StreamPipeReaderOptions : object {
    public int BufferSize { get; }
    public bool LeaveOpen { get; }
    public int MinimumReadSize { get; }
    public MemoryPool`1<byte> Pool { get; }
    public bool UseZeroByteReads { get; }
    [NullableContextAttribute("2")]
public StreamPipeReaderOptions(MemoryPool`1<byte> pool, int bufferSize, int minimumReadSize, bool leaveOpen);
    [NullableContextAttribute("2")]
public StreamPipeReaderOptions(MemoryPool`1<byte> pool, int bufferSize, int minimumReadSize, bool leaveOpen, bool useZeroByteReads);
    public int get_BufferSize();
    public bool get_LeaveOpen();
    public int get_MinimumReadSize();
    public MemoryPool`1<byte> get_Pool();
    public bool get_UseZeroByteReads();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.Pipelines.StreamPipeWriterOptions : object {
    public bool LeaveOpen { get; }
    public int MinimumBufferSize { get; }
    public MemoryPool`1<byte> Pool { get; }
    [NullableContextAttribute("2")]
public StreamPipeWriterOptions(MemoryPool`1<byte> pool, int minimumBufferSize, bool leaveOpen);
    public bool get_LeaveOpen();
    public int get_MinimumBufferSize();
    public MemoryPool`1<byte> get_Pool();
}
