[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.RateLimiting.ConcurrencyLimiter : RateLimiter {
    public Nullable`1<TimeSpan> IdleDuration { get; }
    public ConcurrencyLimiter(ConcurrencyLimiterOptions options);
    public virtual Nullable`1<TimeSpan> get_IdleDuration();
    protected virtual ValueTask`1<RateLimitLease> AcquireAsyncCore(int permitCount, CancellationToken cancellationToken);
    protected virtual RateLimitLease AttemptAcquireCore(int permitCount);
    protected virtual void Dispose(bool disposing);
    protected virtual ValueTask DisposeAsyncCore();
    [NullableContextAttribute("2")]
public virtual RateLimiterStatistics GetStatistics();
}
public class System.Threading.RateLimiting.ConcurrencyLimiterOptions : object {
    public int PermitLimit { get; public set; }
    public int QueueLimit { get; public set; }
    public QueueProcessingOrder QueueProcessingOrder { get; public set; }
    public int get_PermitLimit();
    public void set_PermitLimit(int value);
    public int get_QueueLimit();
    public void set_QueueLimit(int value);
    public QueueProcessingOrder get_QueueProcessingOrder();
    public void set_QueueProcessingOrder(QueueProcessingOrder value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.RateLimiting.FixedWindowRateLimiter : ReplenishingRateLimiter {
    public Nullable`1<TimeSpan> IdleDuration { get; }
    public bool IsAutoReplenishing { get; }
    public TimeSpan ReplenishmentPeriod { get; }
    public FixedWindowRateLimiter(FixedWindowRateLimiterOptions options);
    public virtual Nullable`1<TimeSpan> get_IdleDuration();
    public virtual bool get_IsAutoReplenishing();
    public virtual TimeSpan get_ReplenishmentPeriod();
    protected virtual ValueTask`1<RateLimitLease> AcquireAsyncCore(int permitCount, CancellationToken cancellationToken);
    protected virtual RateLimitLease AttemptAcquireCore(int permitCount);
    protected virtual void Dispose(bool disposing);
    protected virtual ValueTask DisposeAsyncCore();
    [NullableContextAttribute("2")]
public virtual RateLimiterStatistics GetStatistics();
    public virtual bool TryReplenish();
}
public class System.Threading.RateLimiting.FixedWindowRateLimiterOptions : object {
    public bool AutoReplenishment { get; public set; }
    public int PermitLimit { get; public set; }
    public int QueueLimit { get; public set; }
    public QueueProcessingOrder QueueProcessingOrder { get; public set; }
    public TimeSpan Window { get; public set; }
    public bool get_AutoReplenishment();
    public void set_AutoReplenishment(bool value);
    public int get_PermitLimit();
    public void set_PermitLimit(int value);
    public int get_QueueLimit();
    public void set_QueueLimit(int value);
    public QueueProcessingOrder get_QueueProcessingOrder();
    public void set_QueueProcessingOrder(QueueProcessingOrder value);
    public TimeSpan get_Window();
    public void set_Window(TimeSpan value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Threading.RateLimiting.MetadataName : object {
    public static MetadataName`1<string> ReasonPhrase { get; }
    public static MetadataName`1<TimeSpan> RetryAfter { get; }
    public static MetadataName`1<string> get_ReasonPhrase();
    public static MetadataName`1<TimeSpan> get_RetryAfter();
    public static MetadataName`1<T> Create(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.RateLimiting.MetadataName`1 : object {
    public string Name { get; }
    public MetadataName`1(string name);
    public string get_Name();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MetadataName`1<T> other);
    public virtual int GetHashCode();
    public static bool op_Equality(MetadataName`1<T> left, MetadataName`1<T> right);
    public static bool op_Inequality(MetadataName`1<T> left, MetadataName`1<T> right);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Threading.RateLimiting.PartitionedRateLimiter : object {
    public static PartitionedRateLimiter`1<TResource> CreateChained(PartitionedRateLimiter`1[] limiters);
    public static PartitionedRateLimiter`1<TResource> Create(Func`2<TResource, RateLimitPartition`1<TPartitionKey>> partitioner, IEqualityComparer`1<TPartitionKey> equalityComparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Threading.RateLimiting.PartitionedRateLimiter`1 : object {
    public ValueTask`1<RateLimitLease> AcquireAsync(TResource resource, int permitCount, CancellationToken cancellationToken);
    protected abstract virtual ValueTask`1<RateLimitLease> AcquireAsyncCore(TResource resource, int permitCount, CancellationToken cancellationToken);
    public RateLimitLease AttemptAcquire(TResource resource, int permitCount);
    protected abstract virtual RateLimitLease AttemptAcquireCore(TResource resource, int permitCount);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public sealed virtual ValueTask DisposeAsync();
    protected virtual ValueTask DisposeAsyncCore();
    public abstract virtual RateLimiterStatistics GetStatistics(TResource resource);
    public PartitionedRateLimiter`1<TOuter> WithTranslatedKey(Func`2<TOuter, TResource> keyAdapter, bool leaveOpen);
}
public enum System.Threading.RateLimiting.QueueProcessingOrder : Enum {
    public int value__;
    public static QueueProcessingOrder OldestFirst;
    public static QueueProcessingOrder NewestFirst;
}
public abstract class System.Threading.RateLimiting.RateLimiter : object {
    public Nullable`1<TimeSpan> IdleDuration { get; }
    public abstract virtual Nullable`1<TimeSpan> get_IdleDuration();
    public ValueTask`1<RateLimitLease> AcquireAsync(int permitCount, CancellationToken cancellationToken);
    protected abstract virtual ValueTask`1<RateLimitLease> AcquireAsyncCore(int permitCount, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public RateLimitLease AttemptAcquire(int permitCount);
    [NullableContextAttribute("1")]
protected abstract virtual RateLimitLease AttemptAcquireCore(int permitCount);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public sealed virtual ValueTask DisposeAsync();
    protected virtual ValueTask DisposeAsyncCore();
    [NullableContextAttribute("2")]
public abstract virtual RateLimiterStatistics GetStatistics();
}
public class System.Threading.RateLimiting.RateLimiterStatistics : object {
    public long CurrentAvailablePermits { get; public set; }
    public long CurrentQueuedCount { get; public set; }
    public long TotalFailedLeases { get; public set; }
    public long TotalSuccessfulLeases { get; public set; }
    public long get_CurrentAvailablePermits();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CurrentAvailablePermits(long value);
    public long get_CurrentQueuedCount();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CurrentQueuedCount(long value);
    public long get_TotalFailedLeases();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TotalFailedLeases(long value);
    public long get_TotalSuccessfulLeases();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TotalSuccessfulLeases(long value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Threading.RateLimiting.RateLimitLease : object {
    public bool IsAcquired { get; }
    public IEnumerable`1<string> MetadataNames { get; }
    public abstract virtual bool get_IsAcquired();
    public abstract virtual IEnumerable`1<string> get_MetadataNames();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual IEnumerable`1<KeyValuePair`2<string, object>> GetAllMetadata();
    public abstract virtual bool TryGetMetadata(string metadataName, Object& metadata);
    public bool TryGetMetadata(MetadataName`1<T> metadataName, T& metadata);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Threading.RateLimiting.RateLimitPartition : object {
    public static RateLimitPartition`1<TKey> GetConcurrencyLimiter(TKey partitionKey, Func`2<TKey, ConcurrencyLimiterOptions> factory);
    public static RateLimitPartition`1<TKey> GetFixedWindowLimiter(TKey partitionKey, Func`2<TKey, FixedWindowRateLimiterOptions> factory);
    public static RateLimitPartition`1<TKey> GetNoLimiter(TKey partitionKey);
    public static RateLimitPartition`1<TKey> GetSlidingWindowLimiter(TKey partitionKey, Func`2<TKey, SlidingWindowRateLimiterOptions> factory);
    public static RateLimitPartition`1<TKey> GetTokenBucketLimiter(TKey partitionKey, Func`2<TKey, TokenBucketRateLimiterOptions> factory);
    public static RateLimitPartition`1<TKey> Get(TKey partitionKey, Func`2<TKey, RateLimiter> factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.RateLimiting.RateLimitPartition`1 : ValueType {
    private TKey _PartitionKey_k__BackingField;
    private object _dummy;
    private int _dummyPrimitive;
    public Func`2<TKey, RateLimiter> Factory { get; }
    public TKey PartitionKey { get; }
    public RateLimitPartition`1(TKey partitionKey, Func`2<TKey, RateLimiter> factory);
    [IsReadOnlyAttribute]
public Func`2<TKey, RateLimiter> get_Factory();
    [IsReadOnlyAttribute]
public TKey get_PartitionKey();
}
public abstract class System.Threading.RateLimiting.ReplenishingRateLimiter : RateLimiter {
    public bool IsAutoReplenishing { get; }
    public TimeSpan ReplenishmentPeriod { get; }
    public abstract virtual bool get_IsAutoReplenishing();
    public abstract virtual TimeSpan get_ReplenishmentPeriod();
    public abstract virtual bool TryReplenish();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.RateLimiting.SlidingWindowRateLimiter : ReplenishingRateLimiter {
    public Nullable`1<TimeSpan> IdleDuration { get; }
    public bool IsAutoReplenishing { get; }
    public TimeSpan ReplenishmentPeriod { get; }
    public SlidingWindowRateLimiter(SlidingWindowRateLimiterOptions options);
    public virtual Nullable`1<TimeSpan> get_IdleDuration();
    public virtual bool get_IsAutoReplenishing();
    public virtual TimeSpan get_ReplenishmentPeriod();
    protected virtual ValueTask`1<RateLimitLease> AcquireAsyncCore(int permitCount, CancellationToken cancellationToken);
    protected virtual RateLimitLease AttemptAcquireCore(int permitCount);
    protected virtual void Dispose(bool disposing);
    protected virtual ValueTask DisposeAsyncCore();
    [NullableContextAttribute("2")]
public virtual RateLimiterStatistics GetStatistics();
    public virtual bool TryReplenish();
}
public class System.Threading.RateLimiting.SlidingWindowRateLimiterOptions : object {
    public bool AutoReplenishment { get; public set; }
    public int PermitLimit { get; public set; }
    public int QueueLimit { get; public set; }
    public QueueProcessingOrder QueueProcessingOrder { get; public set; }
    public int SegmentsPerWindow { get; public set; }
    public TimeSpan Window { get; public set; }
    public bool get_AutoReplenishment();
    public void set_AutoReplenishment(bool value);
    public int get_PermitLimit();
    public void set_PermitLimit(int value);
    public int get_QueueLimit();
    public void set_QueueLimit(int value);
    public QueueProcessingOrder get_QueueProcessingOrder();
    public void set_QueueProcessingOrder(QueueProcessingOrder value);
    public int get_SegmentsPerWindow();
    public void set_SegmentsPerWindow(int value);
    public TimeSpan get_Window();
    public void set_Window(TimeSpan value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.RateLimiting.TokenBucketRateLimiter : ReplenishingRateLimiter {
    public Nullable`1<TimeSpan> IdleDuration { get; }
    public bool IsAutoReplenishing { get; }
    public TimeSpan ReplenishmentPeriod { get; }
    public TokenBucketRateLimiter(TokenBucketRateLimiterOptions options);
    public virtual Nullable`1<TimeSpan> get_IdleDuration();
    public virtual bool get_IsAutoReplenishing();
    public virtual TimeSpan get_ReplenishmentPeriod();
    protected virtual ValueTask`1<RateLimitLease> AcquireAsyncCore(int tokenCount, CancellationToken cancellationToken);
    protected virtual RateLimitLease AttemptAcquireCore(int tokenCount);
    protected virtual void Dispose(bool disposing);
    protected virtual ValueTask DisposeAsyncCore();
    [NullableContextAttribute("2")]
public virtual RateLimiterStatistics GetStatistics();
    public virtual bool TryReplenish();
}
public class System.Threading.RateLimiting.TokenBucketRateLimiterOptions : object {
    public bool AutoReplenishment { get; public set; }
    public int QueueLimit { get; public set; }
    public QueueProcessingOrder QueueProcessingOrder { get; public set; }
    public TimeSpan ReplenishmentPeriod { get; public set; }
    public int TokenLimit { get; public set; }
    public int TokensPerPeriod { get; public set; }
    public bool get_AutoReplenishment();
    public void set_AutoReplenishment(bool value);
    public int get_QueueLimit();
    public void set_QueueLimit(int value);
    public QueueProcessingOrder get_QueueProcessingOrder();
    public void set_QueueProcessingOrder(QueueProcessingOrder value);
    public TimeSpan get_ReplenishmentPeriod();
    public void set_ReplenishmentPeriod(TimeSpan value);
    public int get_TokenLimit();
    public void set_TokenLimit(int value);
    public int get_TokensPerPeriod();
    public void set_TokensPerPeriod(int value);
}
