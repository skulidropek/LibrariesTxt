[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authorization.AuthorizationMiddleware : object {
    private static string SuppressUseHttpContextAsAuthorizationResource;
    private static string AuthorizationMiddlewareInvokedWithEndpointKey;
    private static object AuthorizationMiddlewareWithEndpointInvokedValue;
    private RequestDelegate _next;
    private IAuthorizationPolicyProvider _policyProvider;
    private bool _canCache;
    private AuthorizationPolicyCache _policyCache;
    private ILogger`1<AuthorizationMiddleware> _logger;
    public AuthorizationMiddleware(RequestDelegate next, IAuthorizationPolicyProvider policyProvider);
    public AuthorizationMiddleware(RequestDelegate next, IAuthorizationPolicyProvider policyProvider, IServiceProvider services, ILogger`1<AuthorizationMiddleware> logger);
    public AuthorizationMiddleware(RequestDelegate next, IAuthorizationPolicyProvider policyProvider, IServiceProvider services);
    private static AuthorizationMiddleware();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AuthorizationMiddleware/<Invoke>d__11")]
public Task Invoke(HttpContext context);
}
internal class Microsoft.AspNetCore.Authorization.AuthorizationMiddlewareInternal : AuthorizationMiddleware {
    public AuthorizationMiddlewareInternal(RequestDelegate next, IServiceProvider services, IAuthorizationPolicyProvider policyProvider, ILogger`1<AuthorizationMiddleware> logger);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Authorization.IAuthorizationMiddlewareResultHandler {
    public abstract virtual Task HandleAsync(RequestDelegate next, HttpContext context, AuthorizationPolicy policy, PolicyAuthorizationResult authorizeResult);
}
internal class Microsoft.AspNetCore.Authorization.Policy.AuthenticationFeatures : object {
    private ClaimsPrincipal _user;
    private AuthenticateResult _result;
    public AuthenticateResult AuthenticateResult { get; public set; }
    public ClaimsPrincipal User { get; public set; }
    public AuthenticationFeatures(AuthenticateResult result);
    public sealed virtual AuthenticateResult get_AuthenticateResult();
    public sealed virtual void set_AuthenticateResult(AuthenticateResult value);
    public sealed virtual ClaimsPrincipal get_User();
    public sealed virtual void set_User(ClaimsPrincipal value);
}
public class Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler : object {
    [NullableContextAttribute("1")]
public sealed virtual Task HandleAsync(RequestDelegate next, HttpContext context, AuthorizationPolicy policy, PolicyAuthorizationResult authorizeResult);
}
internal class Microsoft.AspNetCore.Authorization.Policy.AuthorizationPolicyCache : object {
    private DataSourceDependentCache`1<ConcurrentDictionary`2<Endpoint, AuthorizationPolicy>> _policyCache;
    public AuthorizationPolicyCache(EndpointDataSource dataSource);
    public AuthorizationPolicy Lookup(Endpoint endpoint);
    public void Store(Endpoint endpoint, AuthorizationPolicy policy);
    public sealed virtual void Dispose();
}
internal class Microsoft.AspNetCore.Authorization.Policy.AuthorizationPolicyMarkerService : object {
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Authorization.Policy.IPolicyEvaluator {
    public abstract virtual Task`1<AuthenticateResult> AuthenticateAsync(AuthorizationPolicy policy, HttpContext context);
    public abstract virtual Task`1<PolicyAuthorizationResult> AuthorizeAsync(AuthorizationPolicy policy, AuthenticateResult authenticationResult, HttpContext context, object resource);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult : object {
    private static PolicyAuthorizationResult _challengedResult;
    private static PolicyAuthorizationResult _forbiddenResult;
    private static PolicyAuthorizationResult _succeededResult;
    [CompilerGeneratedAttribute]
private bool <Challenged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Forbidden>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Succeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthorizationFailure <AuthorizationFailure>k__BackingField;
    public bool Challenged { get; private set; }
    public bool Forbidden { get; private set; }
    public bool Succeeded { get; private set; }
    [NullableAttribute("2")]
public AuthorizationFailure AuthorizationFailure { get; private set; }
    private static PolicyAuthorizationResult();
    [CompilerGeneratedAttribute]
public bool get_Challenged();
    [CompilerGeneratedAttribute]
private void set_Challenged(bool value);
    [CompilerGeneratedAttribute]
public bool get_Forbidden();
    [CompilerGeneratedAttribute]
private void set_Forbidden(bool value);
    [CompilerGeneratedAttribute]
public bool get_Succeeded();
    [CompilerGeneratedAttribute]
private void set_Succeeded(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public AuthorizationFailure get_AuthorizationFailure();
    [CompilerGeneratedAttribute]
private void set_AuthorizationFailure(AuthorizationFailure value);
    public static PolicyAuthorizationResult Challenge();
    public static PolicyAuthorizationResult Forbid();
    public static PolicyAuthorizationResult Forbid(AuthorizationFailure authorizationFailure);
    public static PolicyAuthorizationResult Success();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authorization.Policy.PolicyEvaluator : object {
    private IAuthorizationService _authorization;
    public PolicyEvaluator(IAuthorizationService authorization);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.Policy.PolicyEvaluator/<AuthenticateAsync>d__2")]
public virtual Task`1<AuthenticateResult> AuthenticateAsync(AuthorizationPolicy policy, HttpContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.Policy.PolicyEvaluator/<AuthorizeAsync>d__3")]
public virtual Task`1<PolicyAuthorizationResult> AuthorizeAsync(AuthorizationPolicy policy, AuthenticateResult authenticationResult, HttpContext context, object resource);
    [CompilerGeneratedAttribute]
internal static AuthenticateResult <AuthenticateAsync>g__DefaultAuthenticateResult|2_0(HttpContext context);
}
internal static class Microsoft.AspNetCore.Authorization.Policy.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string Exception_UnableToFindServices { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_Exception_UnableToFindServices();
    internal static string FormatException_UnableToFindServices(object p0, object p1);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.AuthorizationAppBuilderExtensions : object {
    internal static string AuthorizationMiddlewareSetKey;
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IApplicationBuilder UseAuthorization(IApplicationBuilder app);
    private static void VerifyServicesRegistered(IApplicationBuilder app);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.AuthorizationEndpointConventionBuilderExtensions : object {
    private static IAllowAnonymous _allowAnonymousMetadata;
    private static AuthorizationEndpointConventionBuilderExtensions();
    [ExtensionAttribute]
public static TBuilder RequireAuthorization(TBuilder builder);
    [ExtensionAttribute]
public static TBuilder RequireAuthorization(TBuilder builder, String[] policyNames);
    [ExtensionAttribute]
public static TBuilder RequireAuthorization(TBuilder builder, IAuthorizeData[] authorizeData);
    [ExtensionAttribute]
public static TBuilder RequireAuthorization(TBuilder builder, AuthorizationPolicy policy);
    [ExtensionAttribute]
public static TBuilder RequireAuthorization(TBuilder builder, Action`1<AuthorizationPolicyBuilder> configurePolicy);
    [ExtensionAttribute]
public static TBuilder AllowAnonymous(TBuilder builder);
    private static void RequirePolicyCore(TBuilder builder, AuthorizationPolicy policy);
    private static void RequireAuthorizationCore(TBuilder builder, IEnumerable`1<IAuthorizeData> authorizeData);
}
internal class Microsoft.AspNetCore.Routing.DataSourceDependentCache`1 : object {
    private EndpointDataSource _dataSource;
    private Func`2<IReadOnlyList`1<Endpoint>, T> _initializeCore;
    private Func`1<T> _initializer;
    private Action`1<object> _initializerWithState;
    private object _lock;
    private bool _initialized;
    private T _value;
    private IDisposable _disposable;
    private bool _disposed;
    [NotNullIfNotNullAttribute("_value")]
public T Value { get; }
    public DataSourceDependentCache`1(EndpointDataSource dataSource, Func`2<IReadOnlyList`1<Endpoint>, T> initialize);
    public T get_Value();
    [MemberNotNullAttribute("_value")]
public T EnsureInitialized();
    private T Initialize();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_0(object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.PolicyServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static AuthorizationBuilder AddAuthorizationBuilder(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddAuthorizationPolicyEvaluator(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddAuthorization(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddAuthorization(IServiceCollection services, Action`1<AuthorizationOptions> configure);
}
internal static class Microsoft.Extensions.Internal.SecurityHelper : object {
    public static ClaimsPrincipal MergeUserPrincipal(ClaimsPrincipal existingPrincipal, ClaimsPrincipal additionalPrincipal);
}
