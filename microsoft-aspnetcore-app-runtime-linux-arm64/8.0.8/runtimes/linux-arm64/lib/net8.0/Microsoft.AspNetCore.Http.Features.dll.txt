[NullableContextAttribute("2")]
public interface Microsoft.AspNetCore.Antiforgery.IAntiforgeryValidationFeature {
    public bool IsValid { get; }
    public Exception Error { get; }
    public abstract virtual bool get_IsValid();
    public abstract virtual Exception get_Error();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Http.CookieOptions : object {
    private List`1<string> _extensions;
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Expires>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Secure>k__BackingField;
    [CompilerGeneratedAttribute]
private SameSiteMode <SameSite>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HttpOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <MaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEssential>k__BackingField;
    public string Domain { get; public set; }
    public string Path { get; public set; }
    public Nullable`1<DateTimeOffset> Expires { get; public set; }
    public bool Secure { get; public set; }
    public SameSiteMode SameSite { get; public set; }
    public bool HttpOnly { get; public set; }
    public Nullable`1<TimeSpan> MaxAge { get; public set; }
    public bool IsEssential { get; public set; }
    [NullableAttribute("1")]
public IList`1<string> Extensions { get; }
    [NullableContextAttribute("1")]
public CookieOptions(CookieOptions options);
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
public void set_Domain(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public bool get_Secure();
    [CompilerGeneratedAttribute]
public void set_Secure(bool value);
    [CompilerGeneratedAttribute]
public SameSiteMode get_SameSite();
    [CompilerGeneratedAttribute]
public void set_SameSite(SameSiteMode value);
    [CompilerGeneratedAttribute]
public bool get_HttpOnly();
    [CompilerGeneratedAttribute]
public void set_HttpOnly(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_MaxAge();
    [CompilerGeneratedAttribute]
public void set_MaxAge(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public bool get_IsEssential();
    [CompilerGeneratedAttribute]
public void set_IsEssential(bool value);
    [NullableContextAttribute("1")]
public IList`1<string> get_Extensions();
    [NullableContextAttribute("1")]
public SetCookieHeaderValue CreateCookieHeader(string name, string value);
}
[NullableContextAttribute("2")]
public interface Microsoft.AspNetCore.Http.Features.Authentication.IHttpAuthenticationFeature {
    public ClaimsPrincipal User { get; public set; }
    public abstract virtual ClaimsPrincipal get_User();
    public abstract virtual void set_User(ClaimsPrincipal value);
}
public enum Microsoft.AspNetCore.Http.Features.HttpsCompressionMode : Enum {
    public int value__;
    public static HttpsCompressionMode Default;
    public static HttpsCompressionMode DoNotCompress;
    public static HttpsCompressionMode Compress;
}
[NullableContextAttribute("2")]
public interface Microsoft.AspNetCore.Http.Features.IBadRequestExceptionFeature {
    public Exception Error { get; }
    public abstract virtual Exception get_Error();
}
[NullableContextAttribute("2")]
public interface Microsoft.AspNetCore.Http.Features.IFormFeature {
    public bool HasFormContentType { get; }
    public IFormCollection Form { get; public set; }
    public abstract virtual bool get_HasFormContentType();
    public abstract virtual IFormCollection get_Form();
    public abstract virtual void set_Form(IFormCollection value);
    [NullableContextAttribute("1")]
public abstract virtual IFormCollection ReadForm();
    [NullableContextAttribute("1")]
public abstract virtual Task`1<IFormCollection> ReadFormAsync(CancellationToken cancellationToken);
}
public interface Microsoft.AspNetCore.Http.Features.IHttpBodyControlFeature {
    public bool AllowSynchronousIO { get; public set; }
    public abstract virtual bool get_AllowSynchronousIO();
    public abstract virtual void set_AllowSynchronousIO(bool value);
}
[NullableContextAttribute("2")]
public interface Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature {
    [NullableAttribute("1")]
public string ConnectionId { get; public set; }
    public IPAddress RemoteIpAddress { get; public set; }
    public IPAddress LocalIpAddress { get; public set; }
    public int RemotePort { get; public set; }
    public int LocalPort { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual string get_ConnectionId();
    [NullableContextAttribute("1")]
public abstract virtual void set_ConnectionId(string value);
    public abstract virtual IPAddress get_RemoteIpAddress();
    public abstract virtual void set_RemoteIpAddress(IPAddress value);
    public abstract virtual IPAddress get_LocalIpAddress();
    public abstract virtual void set_LocalIpAddress(IPAddress value);
    public abstract virtual int get_RemotePort();
    public abstract virtual void set_RemotePort(int value);
    public abstract virtual int get_LocalPort();
    public abstract virtual void set_LocalPort(int value);
}
[NullableContextAttribute("2")]
public interface Microsoft.AspNetCore.Http.Features.IHttpExtendedConnectFeature {
    [MemberNotNullWhenAttribute("True", "Protocol")]
public bool IsExtendedConnect { get; }
    public string Protocol { get; }
    [MemberNotNullWhenAttribute("True", "Protocol")]
public abstract virtual bool get_IsExtendedConnect();
    public abstract virtual string get_Protocol();
    public abstract virtual ValueTask`1<Stream> AcceptAsync();
}
public interface Microsoft.AspNetCore.Http.Features.IHttpMaxRequestBodySizeFeature {
    public bool IsReadOnly { get; }
    public Nullable`1<long> MaxRequestBodySize { get; public set; }
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual Nullable`1<long> get_MaxRequestBodySize();
    public abstract virtual void set_MaxRequestBodySize(Nullable`1<long> value);
}
public interface Microsoft.AspNetCore.Http.Features.IHttpMetricsTagsFeature {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollection`1<KeyValuePair`2<string, object>> Tags { get; }
    public abstract virtual ICollection`1<KeyValuePair`2<string, object>> get_Tags();
}
public interface Microsoft.AspNetCore.Http.Features.IHttpRequestBodyDetectionFeature {
    public bool CanHaveBody { get; }
    public abstract virtual bool get_CanHaveBody();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Http.Features.IHttpRequestFeature {
    public string Protocol { get; public set; }
    public string Scheme { get; public set; }
    public string Method { get; public set; }
    public string PathBase { get; public set; }
    public string Path { get; public set; }
    public string QueryString { get; public set; }
    public string RawTarget { get; public set; }
    public IHeaderDictionary Headers { get; public set; }
    public Stream Body { get; public set; }
    public abstract virtual string get_Protocol();
    public abstract virtual void set_Protocol(string value);
    public abstract virtual string get_Scheme();
    public abstract virtual void set_Scheme(string value);
    public abstract virtual string get_Method();
    public abstract virtual void set_Method(string value);
    public abstract virtual string get_PathBase();
    public abstract virtual void set_PathBase(string value);
    public abstract virtual string get_Path();
    public abstract virtual void set_Path(string value);
    public abstract virtual string get_QueryString();
    public abstract virtual void set_QueryString(string value);
    public abstract virtual string get_RawTarget();
    public abstract virtual void set_RawTarget(string value);
    public abstract virtual IHeaderDictionary get_Headers();
    public abstract virtual void set_Headers(IHeaderDictionary value);
    public abstract virtual Stream get_Body();
    public abstract virtual void set_Body(Stream value);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Http.Features.IHttpRequestIdentifierFeature {
    public string TraceIdentifier { get; public set; }
    public abstract virtual string get_TraceIdentifier();
    public abstract virtual void set_TraceIdentifier(string value);
}
public interface Microsoft.AspNetCore.Http.Features.IHttpRequestLifetimeFeature {
    public CancellationToken RequestAborted { get; public set; }
    public abstract virtual CancellationToken get_RequestAborted();
    public abstract virtual void set_RequestAborted(CancellationToken value);
    public abstract virtual void Abort();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Http.Features.IHttpRequestTrailersFeature {
    public bool Available { get; }
    public IHeaderDictionary Trailers { get; }
    public abstract virtual bool get_Available();
    public abstract virtual IHeaderDictionary get_Trailers();
}
public interface Microsoft.AspNetCore.Http.Features.IHttpResetFeature {
    public abstract virtual void Reset(int errorCode);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature {
    public Stream Stream { get; }
    public PipeWriter Writer { get; }
    public abstract virtual Stream get_Stream();
    public abstract virtual PipeWriter get_Writer();
    public abstract virtual void DisableBuffering();
    public abstract virtual Task StartAsync(CancellationToken cancellationToken);
    public abstract virtual Task SendFileAsync(string path, long offset, Nullable`1<long> count, CancellationToken cancellationToken);
    public abstract virtual Task CompleteAsync();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Http.Features.IHttpResponseFeature {
    public int StatusCode { get; public set; }
    [NullableAttribute("2")]
public string ReasonPhrase { get; public set; }
    public IHeaderDictionary Headers { get; public set; }
    [ObsoleteAttribute("Use IHttpResponseBodyFeature.Stream instead.", "False")]
public Stream Body { get; public set; }
    public bool HasStarted { get; }
    public abstract virtual int get_StatusCode();
    public abstract virtual void set_StatusCode(int value);
    [NullableContextAttribute("2")]
public abstract virtual string get_ReasonPhrase();
    [NullableContextAttribute("2")]
public abstract virtual void set_ReasonPhrase(string value);
    public abstract virtual IHeaderDictionary get_Headers();
    public abstract virtual void set_Headers(IHeaderDictionary value);
    public abstract virtual Stream get_Body();
    public abstract virtual void set_Body(Stream value);
    public abstract virtual bool get_HasStarted();
    public abstract virtual void OnStarting(Func`2<object, Task> callback, object state);
    public abstract virtual void OnCompleted(Func`2<object, Task> callback, object state);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Http.Features.IHttpResponseTrailersFeature {
    public IHeaderDictionary Trailers { get; public set; }
    public abstract virtual IHeaderDictionary get_Trailers();
    public abstract virtual void set_Trailers(IHeaderDictionary value);
}
public interface Microsoft.AspNetCore.Http.Features.IHttpsCompressionFeature {
    public HttpsCompressionMode Mode { get; public set; }
    public abstract virtual HttpsCompressionMode get_Mode();
    public abstract virtual void set_Mode(HttpsCompressionMode value);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Http.Features.IHttpUpgradeFeature {
    public bool IsUpgradableRequest { get; }
    public abstract virtual bool get_IsUpgradableRequest();
    public abstract virtual Task`1<Stream> UpgradeAsync();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Http.Features.IHttpWebSocketFeature {
    public bool IsWebSocketRequest { get; }
    public abstract virtual bool get_IsWebSocketRequest();
    public abstract virtual Task`1<WebSocket> AcceptAsync(WebSocketAcceptContext context);
}
[RequiresPreviewFeaturesAttribute("WebTransport is a preview feature")]
public interface Microsoft.AspNetCore.Http.Features.IHttpWebTransportFeature {
    public bool IsWebTransportRequest { get; }
    public abstract virtual bool get_IsWebTransportRequest();
    public abstract virtual ValueTask`1<IWebTransportSession> AcceptAsync(CancellationToken cancellationToken);
}
public interface Microsoft.AspNetCore.Http.Features.IItemsFeature {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<object, object> Items { get; public set; }
    public abstract virtual IDictionary`2<object, object> get_Items();
    public abstract virtual void set_Items(IDictionary`2<object, object> value);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Http.Features.IQueryFeature {
    public IQueryCollection Query { get; public set; }
    public abstract virtual IQueryCollection get_Query();
    public abstract virtual void set_Query(IQueryCollection value);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Http.Features.IRequestBodyPipeFeature {
    public PipeReader Reader { get; }
    public abstract virtual PipeReader get_Reader();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Http.Features.IRequestCookiesFeature {
    public IRequestCookieCollection Cookies { get; public set; }
    public abstract virtual IRequestCookieCollection get_Cookies();
    public abstract virtual void set_Cookies(IRequestCookieCollection value);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Http.Features.IResponseCookiesFeature {
    public IResponseCookies Cookies { get; }
    public abstract virtual IResponseCookies get_Cookies();
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface Microsoft.AspNetCore.Http.Features.IServerVariablesFeature {
    [NullableAttribute("2")]
public string Item { get; public set; }
    public abstract virtual string get_Item(string variableName);
    public abstract virtual void set_Item(string variableName, string value);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Http.Features.IServiceProvidersFeature {
    public IServiceProvider RequestServices { get; public set; }
    public abstract virtual IServiceProvider get_RequestServices();
    public abstract virtual void set_RequestServices(IServiceProvider value);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Http.Features.ISessionFeature {
    public ISession Session { get; public set; }
    public abstract virtual ISession get_Session();
    public abstract virtual void set_Session(ISession value);
}
[NullableContextAttribute("2")]
public interface Microsoft.AspNetCore.Http.Features.ITlsConnectionFeature {
    public X509Certificate2 ClientCertificate { get; public set; }
    public abstract virtual X509Certificate2 get_ClientCertificate();
    public abstract virtual void set_ClientCertificate(X509Certificate2 value);
    public abstract virtual Task`1<X509Certificate2> GetClientCertificateAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Http.Features.ITlsTokenBindingFeature {
    public abstract virtual Byte[] GetProvidedTokenBindingId();
    public abstract virtual Byte[] GetReferredTokenBindingId();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Http.Features.ITrackingConsentFeature {
    public bool IsConsentNeeded { get; }
    public bool HasConsent { get; }
    public bool CanTrack { get; }
    public abstract virtual bool get_IsConsentNeeded();
    public abstract virtual bool get_HasConsent();
    public abstract virtual bool get_CanTrack();
    public abstract virtual void GrantConsent();
    public abstract virtual void WithdrawConsent();
    public abstract virtual string CreateConsentCookie();
}
[RequiresPreviewFeaturesAttribute("WebTransport is a preview feature")]
public interface Microsoft.AspNetCore.Http.Features.IWebTransportSession {
    public long SessionId { get; }
    public abstract virtual long get_SessionId();
    public abstract virtual void Abort(int errorCode);
    public abstract virtual ValueTask`1<ConnectionContext> AcceptStreamAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<ConnectionContext> OpenUnidirectionalStreamAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface Microsoft.AspNetCore.Http.IFormCollection {
    public int Count { get; }
    public ICollection`1<string> Keys { get; }
    public StringValues Item { get; }
    public IFormFileCollection Files { get; }
    public abstract virtual int get_Count();
    public abstract virtual ICollection`1<string> get_Keys();
    public abstract virtual bool ContainsKey(string key);
    public abstract virtual bool TryGetValue(string key, StringValues& value);
    public abstract virtual StringValues get_Item(string key);
    public abstract virtual IFormFileCollection get_Files();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Http.IFormFile {
    public string ContentType { get; }
    public string ContentDisposition { get; }
    public IHeaderDictionary Headers { get; }
    public long Length { get; }
    public string Name { get; }
    public string FileName { get; }
    public abstract virtual string get_ContentType();
    public abstract virtual string get_ContentDisposition();
    public abstract virtual IHeaderDictionary get_Headers();
    public abstract virtual long get_Length();
    public abstract virtual string get_Name();
    public abstract virtual string get_FileName();
    public abstract virtual Stream OpenReadStream();
    public abstract virtual void CopyTo(Stream target);
    public abstract virtual Task CopyToAsync(Stream target, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface Microsoft.AspNetCore.Http.IFormFileCollection {
    [NullableAttribute("2")]
public IFormFile Item { get; }
    public abstract virtual IFormFile get_Item(string name);
    public abstract virtual IFormFile GetFile(string name);
    public abstract virtual IReadOnlyList`1<IFormFile> GetFiles(string name);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface Microsoft.AspNetCore.Http.IHeaderDictionary {
    public StringValues Item { get; public set; }
    public Nullable`1<long> ContentLength { get; public set; }
    public StringValues Accept { get; public set; }
    public StringValues AcceptCharset { get; public set; }
    public StringValues AcceptEncoding { get; public set; }
    public StringValues AcceptLanguage { get; public set; }
    public StringValues AcceptRanges { get; public set; }
    public StringValues AccessControlAllowCredentials { get; public set; }
    public StringValues AccessControlAllowHeaders { get; public set; }
    public StringValues AccessControlAllowMethods { get; public set; }
    public StringValues AccessControlAllowOrigin { get; public set; }
    public StringValues AccessControlExposeHeaders { get; public set; }
    public StringValues AccessControlMaxAge { get; public set; }
    public StringValues AccessControlRequestHeaders { get; public set; }
    public StringValues AccessControlRequestMethod { get; public set; }
    public StringValues Age { get; public set; }
    public StringValues Allow { get; public set; }
    public StringValues AltSvc { get; public set; }
    public StringValues Authorization { get; public set; }
    public StringValues Baggage { get; public set; }
    public StringValues CacheControl { get; public set; }
    public StringValues Connection { get; public set; }
    public StringValues ContentDisposition { get; public set; }
    public StringValues ContentEncoding { get; public set; }
    public StringValues ContentLanguage { get; public set; }
    public StringValues ContentLocation { get; public set; }
    public StringValues ContentMD5 { get; public set; }
    public StringValues ContentRange { get; public set; }
    public StringValues ContentSecurityPolicy { get; public set; }
    public StringValues ContentSecurityPolicyReportOnly { get; public set; }
    public StringValues ContentType { get; public set; }
    public StringValues CorrelationContext { get; public set; }
    public StringValues Cookie { get; public set; }
    public StringValues Date { get; public set; }
    public StringValues ETag { get; public set; }
    public StringValues Expires { get; public set; }
    public StringValues Expect { get; public set; }
    public StringValues From { get; public set; }
    public StringValues GrpcAcceptEncoding { get; public set; }
    public StringValues GrpcEncoding { get; public set; }
    public StringValues GrpcMessage { get; public set; }
    public StringValues GrpcStatus { get; public set; }
    public StringValues GrpcTimeout { get; public set; }
    public StringValues Host { get; public set; }
    public StringValues KeepAlive { get; public set; }
    public StringValues IfMatch { get; public set; }
    public StringValues IfModifiedSince { get; public set; }
    public StringValues IfNoneMatch { get; public set; }
    public StringValues IfRange { get; public set; }
    public StringValues IfUnmodifiedSince { get; public set; }
    public StringValues LastModified { get; public set; }
    public StringValues Link { get; public set; }
    public StringValues Location { get; public set; }
    public StringValues MaxForwards { get; public set; }
    public StringValues Origin { get; public set; }
    public StringValues Pragma { get; public set; }
    public StringValues ProxyAuthenticate { get; public set; }
    public StringValues ProxyAuthorization { get; public set; }
    public StringValues ProxyConnection { get; public set; }
    public StringValues Range { get; public set; }
    public StringValues Referer { get; public set; }
    public StringValues RetryAfter { get; public set; }
    public StringValues RequestId { get; public set; }
    public StringValues SecWebSocketAccept { get; public set; }
    public StringValues SecWebSocketKey { get; public set; }
    public StringValues SecWebSocketProtocol { get; public set; }
    public StringValues SecWebSocketVersion { get; public set; }
    public StringValues SecWebSocketExtensions { get; public set; }
    public StringValues Server { get; public set; }
    public StringValues SetCookie { get; public set; }
    public StringValues StrictTransportSecurity { get; public set; }
    public StringValues TE { get; public set; }
    public StringValues Trailer { get; public set; }
    public StringValues TransferEncoding { get; public set; }
    public StringValues Translate { get; public set; }
    public StringValues TraceParent { get; public set; }
    public StringValues TraceState { get; public set; }
    public StringValues Upgrade { get; public set; }
    public StringValues UpgradeInsecureRequests { get; public set; }
    public StringValues UserAgent { get; public set; }
    public StringValues Vary { get; public set; }
    public StringValues Via { get; public set; }
    public StringValues Warning { get; public set; }
    public StringValues WebSocketSubProtocols { get; public set; }
    public StringValues WWWAuthenticate { get; public set; }
    public StringValues XContentTypeOptions { get; public set; }
    public StringValues XFrameOptions { get; public set; }
    public StringValues XPoweredBy { get; public set; }
    public StringValues XRequestedWith { get; public set; }
    public StringValues XUACompatible { get; public set; }
    public StringValues XXSSProtection { get; public set; }
    public abstract virtual StringValues get_Item(string key);
    public abstract virtual void set_Item(string key, StringValues value);
    public abstract virtual Nullable`1<long> get_ContentLength();
    public abstract virtual void set_ContentLength(Nullable`1<long> value);
    public virtual StringValues get_Accept();
    public virtual void set_Accept(StringValues value);
    public virtual StringValues get_AcceptCharset();
    public virtual void set_AcceptCharset(StringValues value);
    public virtual StringValues get_AcceptEncoding();
    public virtual void set_AcceptEncoding(StringValues value);
    public virtual StringValues get_AcceptLanguage();
    public virtual void set_AcceptLanguage(StringValues value);
    public virtual StringValues get_AcceptRanges();
    public virtual void set_AcceptRanges(StringValues value);
    public virtual StringValues get_AccessControlAllowCredentials();
    public virtual void set_AccessControlAllowCredentials(StringValues value);
    public virtual StringValues get_AccessControlAllowHeaders();
    public virtual void set_AccessControlAllowHeaders(StringValues value);
    public virtual StringValues get_AccessControlAllowMethods();
    public virtual void set_AccessControlAllowMethods(StringValues value);
    public virtual StringValues get_AccessControlAllowOrigin();
    public virtual void set_AccessControlAllowOrigin(StringValues value);
    public virtual StringValues get_AccessControlExposeHeaders();
    public virtual void set_AccessControlExposeHeaders(StringValues value);
    public virtual StringValues get_AccessControlMaxAge();
    public virtual void set_AccessControlMaxAge(StringValues value);
    public virtual StringValues get_AccessControlRequestHeaders();
    public virtual void set_AccessControlRequestHeaders(StringValues value);
    public virtual StringValues get_AccessControlRequestMethod();
    public virtual void set_AccessControlRequestMethod(StringValues value);
    public virtual StringValues get_Age();
    public virtual void set_Age(StringValues value);
    public virtual StringValues get_Allow();
    public virtual void set_Allow(StringValues value);
    public virtual StringValues get_AltSvc();
    public virtual void set_AltSvc(StringValues value);
    public virtual StringValues get_Authorization();
    public virtual void set_Authorization(StringValues value);
    public virtual StringValues get_Baggage();
    public virtual void set_Baggage(StringValues value);
    public virtual StringValues get_CacheControl();
    public virtual void set_CacheControl(StringValues value);
    public virtual StringValues get_Connection();
    public virtual void set_Connection(StringValues value);
    public virtual StringValues get_ContentDisposition();
    public virtual void set_ContentDisposition(StringValues value);
    public virtual StringValues get_ContentEncoding();
    public virtual void set_ContentEncoding(StringValues value);
    public virtual StringValues get_ContentLanguage();
    public virtual void set_ContentLanguage(StringValues value);
    public virtual StringValues get_ContentLocation();
    public virtual void set_ContentLocation(StringValues value);
    public virtual StringValues get_ContentMD5();
    public virtual void set_ContentMD5(StringValues value);
    public virtual StringValues get_ContentRange();
    public virtual void set_ContentRange(StringValues value);
    public virtual StringValues get_ContentSecurityPolicy();
    public virtual void set_ContentSecurityPolicy(StringValues value);
    public virtual StringValues get_ContentSecurityPolicyReportOnly();
    public virtual void set_ContentSecurityPolicyReportOnly(StringValues value);
    public virtual StringValues get_ContentType();
    public virtual void set_ContentType(StringValues value);
    public virtual StringValues get_CorrelationContext();
    public virtual void set_CorrelationContext(StringValues value);
    public virtual StringValues get_Cookie();
    public virtual void set_Cookie(StringValues value);
    public virtual StringValues get_Date();
    public virtual void set_Date(StringValues value);
    public virtual StringValues get_ETag();
    public virtual void set_ETag(StringValues value);
    public virtual StringValues get_Expires();
    public virtual void set_Expires(StringValues value);
    public virtual StringValues get_Expect();
    public virtual void set_Expect(StringValues value);
    public virtual StringValues get_From();
    public virtual void set_From(StringValues value);
    public virtual StringValues get_GrpcAcceptEncoding();
    public virtual void set_GrpcAcceptEncoding(StringValues value);
    public virtual StringValues get_GrpcEncoding();
    public virtual void set_GrpcEncoding(StringValues value);
    public virtual StringValues get_GrpcMessage();
    public virtual void set_GrpcMessage(StringValues value);
    public virtual StringValues get_GrpcStatus();
    public virtual void set_GrpcStatus(StringValues value);
    public virtual StringValues get_GrpcTimeout();
    public virtual void set_GrpcTimeout(StringValues value);
    public virtual StringValues get_Host();
    public virtual void set_Host(StringValues value);
    public virtual StringValues get_KeepAlive();
    public virtual void set_KeepAlive(StringValues value);
    public virtual StringValues get_IfMatch();
    public virtual void set_IfMatch(StringValues value);
    public virtual StringValues get_IfModifiedSince();
    public virtual void set_IfModifiedSince(StringValues value);
    public virtual StringValues get_IfNoneMatch();
    public virtual void set_IfNoneMatch(StringValues value);
    public virtual StringValues get_IfRange();
    public virtual void set_IfRange(StringValues value);
    public virtual StringValues get_IfUnmodifiedSince();
    public virtual void set_IfUnmodifiedSince(StringValues value);
    public virtual StringValues get_LastModified();
    public virtual void set_LastModified(StringValues value);
    public virtual StringValues get_Link();
    public virtual void set_Link(StringValues value);
    public virtual StringValues get_Location();
    public virtual void set_Location(StringValues value);
    public virtual StringValues get_MaxForwards();
    public virtual void set_MaxForwards(StringValues value);
    public virtual StringValues get_Origin();
    public virtual void set_Origin(StringValues value);
    public virtual StringValues get_Pragma();
    public virtual void set_Pragma(StringValues value);
    public virtual StringValues get_ProxyAuthenticate();
    public virtual void set_ProxyAuthenticate(StringValues value);
    public virtual StringValues get_ProxyAuthorization();
    public virtual void set_ProxyAuthorization(StringValues value);
    public virtual StringValues get_ProxyConnection();
    public virtual void set_ProxyConnection(StringValues value);
    public virtual StringValues get_Range();
    public virtual void set_Range(StringValues value);
    public virtual StringValues get_Referer();
    public virtual void set_Referer(StringValues value);
    public virtual StringValues get_RetryAfter();
    public virtual void set_RetryAfter(StringValues value);
    public virtual StringValues get_RequestId();
    public virtual void set_RequestId(StringValues value);
    public virtual StringValues get_SecWebSocketAccept();
    public virtual void set_SecWebSocketAccept(StringValues value);
    public virtual StringValues get_SecWebSocketKey();
    public virtual void set_SecWebSocketKey(StringValues value);
    public virtual StringValues get_SecWebSocketProtocol();
    public virtual void set_SecWebSocketProtocol(StringValues value);
    public virtual StringValues get_SecWebSocketVersion();
    public virtual void set_SecWebSocketVersion(StringValues value);
    public virtual StringValues get_SecWebSocketExtensions();
    public virtual void set_SecWebSocketExtensions(StringValues value);
    public virtual StringValues get_Server();
    public virtual void set_Server(StringValues value);
    public virtual StringValues get_SetCookie();
    public virtual void set_SetCookie(StringValues value);
    public virtual StringValues get_StrictTransportSecurity();
    public virtual void set_StrictTransportSecurity(StringValues value);
    public virtual StringValues get_TE();
    public virtual void set_TE(StringValues value);
    public virtual StringValues get_Trailer();
    public virtual void set_Trailer(StringValues value);
    public virtual StringValues get_TransferEncoding();
    public virtual void set_TransferEncoding(StringValues value);
    public virtual StringValues get_Translate();
    public virtual void set_Translate(StringValues value);
    public virtual StringValues get_TraceParent();
    public virtual void set_TraceParent(StringValues value);
    public virtual StringValues get_TraceState();
    public virtual void set_TraceState(StringValues value);
    public virtual StringValues get_Upgrade();
    public virtual void set_Upgrade(StringValues value);
    public virtual StringValues get_UpgradeInsecureRequests();
    public virtual void set_UpgradeInsecureRequests(StringValues value);
    public virtual StringValues get_UserAgent();
    public virtual void set_UserAgent(StringValues value);
    public virtual StringValues get_Vary();
    public virtual void set_Vary(StringValues value);
    public virtual StringValues get_Via();
    public virtual void set_Via(StringValues value);
    public virtual StringValues get_Warning();
    public virtual void set_Warning(StringValues value);
    public virtual StringValues get_WebSocketSubProtocols();
    public virtual void set_WebSocketSubProtocols(StringValues value);
    public virtual StringValues get_WWWAuthenticate();
    public virtual void set_WWWAuthenticate(StringValues value);
    public virtual StringValues get_XContentTypeOptions();
    public virtual void set_XContentTypeOptions(StringValues value);
    public virtual StringValues get_XFrameOptions();
    public virtual void set_XFrameOptions(StringValues value);
    public virtual StringValues get_XPoweredBy();
    public virtual void set_XPoweredBy(StringValues value);
    public virtual StringValues get_XRequestedWith();
    public virtual void set_XRequestedWith(StringValues value);
    public virtual StringValues get_XUACompatible();
    public virtual void set_XUACompatible(StringValues value);
    public virtual StringValues get_XXSSProtection();
    public virtual void set_XXSSProtection(StringValues value);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface Microsoft.AspNetCore.Http.IQueryCollection {
    public int Count { get; }
    public ICollection`1<string> Keys { get; }
    public StringValues Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual ICollection`1<string> get_Keys();
    public abstract virtual bool ContainsKey(string key);
    public abstract virtual bool TryGetValue(string key, StringValues& value);
    public abstract virtual StringValues get_Item(string key);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface Microsoft.AspNetCore.Http.IRequestCookieCollection {
    public int Count { get; }
    public ICollection`1<string> Keys { get; }
    [NullableAttribute("2")]
public string Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual ICollection`1<string> get_Keys();
    public abstract virtual bool ContainsKey(string key);
    public abstract virtual bool TryGetValue(string key, String& value);
    public abstract virtual string get_Item(string key);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Http.IResponseCookies {
    public abstract virtual void Append(string key, string value);
    public abstract virtual void Append(string key, string value, CookieOptions options);
    public virtual void Append(ReadOnlySpan`1<KeyValuePair`2<string, string>> keyValuePairs, CookieOptions options);
    public abstract virtual void Delete(string key);
    public abstract virtual void Delete(string key, CookieOptions options);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Http.ISession {
    public bool IsAvailable { get; }
    public string Id { get; }
    public IEnumerable`1<string> Keys { get; }
    public abstract virtual bool get_IsAvailable();
    public abstract virtual string get_Id();
    public abstract virtual IEnumerable`1<string> get_Keys();
    public abstract virtual Task LoadAsync(CancellationToken cancellationToken);
    public abstract virtual Task CommitAsync(CancellationToken cancellationToken);
    public abstract virtual bool TryGetValue(string key, Byte[]& value);
    public abstract virtual void Set(string key, Byte[] value);
    public abstract virtual void Remove(string key);
    public abstract virtual void Clear();
}
public enum Microsoft.AspNetCore.Http.SameSiteMode : Enum {
    public int value__;
    public static SameSiteMode Unspecified;
    public static SameSiteMode None;
    public static SameSiteMode Lax;
    public static SameSiteMode Strict;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Http.WebSocketAcceptContext : object {
    private int _serverMaxWindowBits;
    [CompilerGeneratedAttribute]
private string <SubProtocol>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <KeepAliveInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DangerousEnableCompression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableServerContextTakeover>k__BackingField;
    public string SubProtocol { get; public set; }
    public Nullable`1<TimeSpan> KeepAliveInterval { get; public set; }
    public bool DangerousEnableCompression { get; public set; }
    public bool DisableServerContextTakeover { get; public set; }
    public int ServerMaxWindowBits { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_SubProtocol();
    [CompilerGeneratedAttribute]
public virtual void set_SubProtocol(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<TimeSpan> get_KeepAliveInterval();
    [CompilerGeneratedAttribute]
public virtual void set_KeepAliveInterval(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public bool get_DangerousEnableCompression();
    [CompilerGeneratedAttribute]
public void set_DangerousEnableCompression(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableServerContextTakeover();
    [CompilerGeneratedAttribute]
public void set_DisableServerContextTakeover(bool value);
    public int get_ServerMaxWindowBits();
    public void set_ServerMaxWindowBits(int value);
}
