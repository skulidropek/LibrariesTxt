[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.OutputCacheApplicationBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IApplicationBuilder UseOutputCache(IApplicationBuilder app);
}
internal static class Microsoft.AspNetCore.OutputCaching.CacheEntryHelpers : object {
    [NullableContextAttribute("1")]
internal static long EstimateCachedResponseSize(OutputCacheEntry cachedResponse);
    internal static long EstimateStringValuesSize(StringValues stringValues);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.OutputCaching.CacheVaryByRules : object {
    private Dictionary`2<string, string> _varyByValues;
    [CompilerGeneratedAttribute]
private StringValues <RouteValueNames>k__BackingField;
    [CompilerGeneratedAttribute]
private StringValues <HeaderNames>k__BackingField;
    [CompilerGeneratedAttribute]
private StringValues <QueryKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CacheKeyPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VaryByHost>k__BackingField;
    internal bool HasVaryByValues { get; }
    [NullableAttribute("1")]
public IDictionary`2<string, string> VaryByValues { get; }
    public StringValues RouteValueNames { get; public set; }
    public StringValues HeaderNames { get; public set; }
    public StringValues QueryKeys { get; public set; }
    public string CacheKeyPrefix { get; public set; }
    public bool VaryByHost { get; public set; }
    internal bool get_HasVaryByValues();
    [NullableContextAttribute("1")]
public IDictionary`2<string, string> get_VaryByValues();
    [CompilerGeneratedAttribute]
public StringValues get_RouteValueNames();
    [CompilerGeneratedAttribute]
public void set_RouteValueNames(StringValues value);
    [CompilerGeneratedAttribute]
public StringValues get_HeaderNames();
    [CompilerGeneratedAttribute]
public void set_HeaderNames(StringValues value);
    [CompilerGeneratedAttribute]
public StringValues get_QueryKeys();
    [CompilerGeneratedAttribute]
public void set_QueryKeys(StringValues value);
    [CompilerGeneratedAttribute]
public string get_CacheKeyPrefix();
    [CompilerGeneratedAttribute]
public void set_CacheKeyPrefix(string value);
    [CompilerGeneratedAttribute]
public bool get_VaryByHost();
    [CompilerGeneratedAttribute]
public void set_VaryByHost(bool value);
}
internal class Microsoft.AspNetCore.OutputCaching.DefaultPolicy : object {
    [NullableAttribute("1")]
public static DefaultPolicy Instance;
    private static DefaultPolicy();
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.CacheRequestAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeResponseAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private static bool AttemptOutputCaching(OutputCacheContext context);
}
internal class Microsoft.AspNetCore.OutputCaching.EnableCachePolicy : object {
    [NullableAttribute("1")]
public static EnableCachePolicy Enabled;
    [NullableAttribute("1")]
public static EnableCachePolicy Disabled;
    private static EnableCachePolicy();
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.CacheRequestAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeResponseAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellationToken);
}
internal class Microsoft.AspNetCore.OutputCaching.ExpirationPolicy : object {
    private TimeSpan _expiration;
    public ExpirationPolicy(TimeSpan expiration);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.CacheRequestAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeResponseAsync(OutputCacheContext context, CancellationToken cancellationToken);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
internal class Microsoft.AspNetCore.OutputCaching.FormatterBinaryReader : ValueType {
    private ReadOnlyMemory`1<byte> _original;
    private Byte& _root;
    private int _length;
    private int _offset;
    public bool IsEOF { get; }
    public FormatterBinaryReader(ReadOnlyMemory`1<byte> content);
    public bool get_IsEOF();
    public byte ReadByte();
    public int Read7BitEncodedInt();
    public long Read7BitEncodedInt64();
    [NullableContextAttribute("1")]
public string ReadString();
    public void SkipString();
    [NullableContextAttribute("1")]
public string ReadString(int bytes);
    public void Skip(int bytes);
    public ReadOnlySpan`1<byte> ReadBytesSpan(int count);
    public ReadOnlyMemory`1<byte> ReadBytesMemory(int count);
    [DoesNotReturnAttribute]
private static void ThrowEndOfStream();
    [DoesNotReturnAttribute]
private static void ThrowOverflowException();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
internal class Microsoft.AspNetCore.OutputCaching.FormatterBinaryWriter : ValueType {
    private IBufferWriter`1<byte> target;
    private int offset;
    private int length;
    private Byte& root;
    private Span`1<byte> AvailableBuffer { get; }
    [NullableContextAttribute("1")]
public FormatterBinaryWriter(IBufferWriter`1<byte> target);
    private Span`1<byte> get_AvailableBuffer();
    [ConditionalAttribute("DEBUG")]
private void DebugAssertValid();
    public void Write(byte value);
    [NullableContextAttribute("1")]
public void Write(string value);
    [NullableContextAttribute("1")]
internal void Write(string value, int lengthShift);
    private void RequestNewBuffer();
    public void Flush();
    private void SlowWrite(byte value);
    public void Write7BitEncodedInt(int value);
    public void Write7BitEncodedInt64(long value);
    public void WriteRaw(ReadOnlySpan`1<byte> value);
    private void SlowWriteRaw(ReadOnlySpan`1<byte> value);
    [CompilerGeneratedAttribute]
internal static void <RequestNewBuffer>g__Throw|11_0();
}
public interface Microsoft.AspNetCore.OutputCaching.IOutputCacheBufferStore {
    [NullableContextAttribute("1")]
public abstract virtual ValueTask`1<bool> TryGetAsync(string key, PipeWriter destination, CancellationToken cancellationToken);
    public abstract virtual ValueTask SetAsync(string key, ReadOnlySequence`1<byte> value, ReadOnlyMemory`1<string> tags, TimeSpan validFor, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.OutputCaching.IOutputCacheFeature {
    public OutputCacheContext Context { get; }
    public abstract virtual OutputCacheContext get_Context();
}
[NullableContextAttribute("1")]
internal interface Microsoft.AspNetCore.OutputCaching.IOutputCacheKeyProvider {
    public abstract virtual string CreateStorageKey(OutputCacheContext context);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy {
    public abstract virtual ValueTask CacheRequestAsync(OutputCacheContext context, CancellationToken cancellation);
    public abstract virtual ValueTask ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellation);
    public abstract virtual ValueTask ServeResponseAsync(OutputCacheContext context, CancellationToken cancellation);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.OutputCaching.IOutputCacheStore {
    public abstract virtual ValueTask EvictByTagAsync(string tag, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<Byte[]> GetAsync(string key, CancellationToken cancellationToken);
    public abstract virtual ValueTask SetAsync(string key, Byte[] value, String[] tags, TimeSpan validFor, CancellationToken cancellationToken);
}
internal class Microsoft.AspNetCore.OutputCaching.LockingPolicy : object {
    private bool _lockResponse;
    [NullableAttribute("1")]
public static LockingPolicy Enabled;
    [NullableAttribute("1")]
public static LockingPolicy Disabled;
    private LockingPolicy(bool lockResponse);
    private static LockingPolicy();
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.CacheRequestAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeResponseAsync(OutputCacheContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.OutputCaching.LoggerExtensions : object {
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`2<ILogger, Exception> __NotModifiedIfNoneMatchStarCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`3<ILogger, EntityTagHeaderValue, Exception> __NotModifiedIfNoneMatchMatchedCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`4<ILogger, DateTimeOffset, DateTimeOffset, Exception> __NotModifiedIfModifiedSinceSatisfiedCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`2<ILogger, Exception> __NotModifiedServedCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`2<ILogger, Exception> __CachedResponseServedCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`2<ILogger, Exception> __GatewayTimeoutServedCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`2<ILogger, Exception> __NoResponseServedCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`2<ILogger, Exception> __ResponseCachedCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`2<ILogger, Exception> __ResponseNotCachedCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`2<ILogger, Exception> __ResponseContentLengthMismatchNotCachedCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`3<ILogger, DateTimeOffset, Exception> __ExpirationExpiresExceededCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`2<ILogger, Exception> __UnableToQueryOutputCacheCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`2<ILogger, Exception> __UnableToWriteToOutputCacheCallback;
    private static LoggerExtensions();
    [ExtensionAttribute]
[LoggerMessageAttribute("1", "1", "The 'IfNoneMatch' header of the request contains a value of *.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void NotModifiedIfNoneMatchStar(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("2", "1", "The ETag {ETag} in the 'IfNoneMatch' header matched the ETag of a cached entry.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void NotModifiedIfNoneMatchMatched(ILogger logger, EntityTagHeaderValue etag);
    [ExtensionAttribute]
[LoggerMessageAttribute("3", "1", "The last modified date of {LastModified} is before the date {IfModifiedSince} specified in the 'IfModifiedSince' header.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void NotModifiedIfModifiedSinceSatisfied(ILogger logger, DateTimeOffset lastModified, DateTimeOffset ifModifiedSince);
    [ExtensionAttribute]
[LoggerMessageAttribute("4", "2", "The content requested has not been modified.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void NotModifiedServed(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("5", "2", "Serving response from cache.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void CachedResponseServed(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("6", "2", "No cached response available for this request and the 'only-if-cached' cache directive was specified.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void GatewayTimeoutServed(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("7", "2", "No cached response available for this request.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void NoResponseServed(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("8", "2", "The response has been cached.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void ResponseCached(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("9", "2", "The response could not be cached for this request.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void ResponseNotCached(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("10", "3", "The response could not be cached for this request because the 'Content-Length' did not match the body length.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void ResponseContentLengthMismatchNotCached(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("11", "1", "The response time of the entry is {ResponseTime} and has exceeded its expiry date.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void ExpirationExpiresExceeded(ILogger logger, DateTimeOffset responseTime);
    [ExtensionAttribute]
[LoggerMessageAttribute("12", "4", "Unable to query output cache.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void UnableToQueryOutputCache(ILogger logger, Exception exception);
    [ExtensionAttribute]
[LoggerMessageAttribute("13", "4", "Unable to write to output-cache.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
internal static void UnableToWriteToOutputCache(ILogger logger, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.OutputCaching.Memory.MemoryOutputCacheStore : object {
    private MemoryCache _cache;
    private Dictionary`2<string, HashSet`1<string>> _taggedEntries;
    private object _tagsLock;
    internal Dictionary`2<string, HashSet`1<string>> TaggedEntries { get; }
    internal MemoryOutputCacheStore(MemoryCache cache);
    internal Dictionary`2<string, HashSet`1<string>> get_TaggedEntries();
    public sealed virtual ValueTask EvictByTagAsync(string tag, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<Byte[]> GetAsync(string key, CancellationToken cancellationToken);
    public sealed virtual ValueTask SetAsync(string key, Byte[] value, String[] tags, TimeSpan validFor, CancellationToken cancellationToken);
    private void SetEntry(string key, Byte[] value, String[] tags, TimeSpan validFor);
    private void RemoveFromTags(object key, object value, EvictionReason reason, object state);
}
internal class Microsoft.AspNetCore.OutputCaching.NamedPolicy : object {
    private string _policyName;
    private IOptions`1<OutputCacheOptions> _options;
    private object _synLock;
    [NullableContextAttribute("1")]
public NamedPolicy(string policyName);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeResponseAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.CacheRequestAsync(OutputCacheContext context, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
internal IOutputCachePolicy GetProfilePolicy(OutputCacheContext context);
}
internal class Microsoft.AspNetCore.OutputCaching.NoLookupPolicy : object {
    [NullableAttribute("1")]
public static NoLookupPolicy Instance;
    private static NoLookupPolicy();
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeResponseAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.CacheRequestAsync(OutputCacheContext context, CancellationToken cancellationToken);
}
internal class Microsoft.AspNetCore.OutputCaching.NoStorePolicy : object {
    [NullableAttribute("1")]
public static NoStorePolicy Instance;
    private static NoStorePolicy();
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeResponseAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.CacheRequestAsync(OutputCacheContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.OutputCaching.OutputCacheAttribute : Attribute {
    private Nullable`1<int> _duration;
    private Nullable`1<bool> _noCache;
    private IOutputCachePolicy _builtPolicy;
    [CompilerGeneratedAttribute]
private String[] <VaryByQueryKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <VaryByHeaderNames>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <VaryByRouteValueNames>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PolicyName>k__BackingField;
    public int Duration { get; public set; }
    public bool NoStore { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] VaryByQueryKeys { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] VaryByHeaderNames { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] VaryByRouteValueNames { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Tags { get; public set; }
    public string PolicyName { get; public set; }
    public int get_Duration();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Duration(int value);
    public bool get_NoStore();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NoStore(bool value);
    [CompilerGeneratedAttribute]
public String[] get_VaryByQueryKeys();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_VaryByQueryKeys(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_VaryByHeaderNames();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_VaryByHeaderNames(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_VaryByRouteValueNames();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_VaryByRouteValueNames(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Tags();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Tags(String[] value);
    [CompilerGeneratedAttribute]
public string get_PolicyName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PolicyName(string value);
    [NullableContextAttribute("1")]
internal IOutputCachePolicy BuildPolicy();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public class Microsoft.AspNetCore.OutputCaching.OutputCacheContext : object {
    [CompilerGeneratedAttribute]
private bool <EnableOutputCaching>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowCacheLookup>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowCacheStorage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowLocking>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpContext <HttpContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <ResponseTime>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheVaryByRules <CacheVaryByRules>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ResponseExpirationTimeSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CacheKey>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <CachedResponseValidFor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCacheEntryFresh>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <CachedEntryAge>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputCacheEntry <CachedResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResponseStarted>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <OriginalResponseStream>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputCacheStream <OutputCacheStream>k__BackingField;
    public bool EnableOutputCaching { get; public set; }
    public bool AllowCacheLookup { get; public set; }
    public bool AllowCacheStorage { get; public set; }
    public bool AllowLocking { get; public set; }
    [RequiredMemberAttribute]
public HttpContext HttpContext { get; public set; }
    public Nullable`1<DateTimeOffset> ResponseTime { get; public set; }
    public CacheVaryByRules CacheVaryByRules { get; }
    public HashSet`1<string> Tags { get; }
    public Nullable`1<TimeSpan> ResponseExpirationTimeSpan { get; public set; }
    internal string CacheKey { get; internal set; }
    internal TimeSpan CachedResponseValidFor { get; internal set; }
    internal bool IsCacheEntryFresh { get; internal set; }
    internal TimeSpan CachedEntryAge { get; internal set; }
    [NullableAttribute("2")]
internal OutputCacheEntry CachedResponse { get; internal set; }
    internal bool ResponseStarted { get; internal set; }
    internal Stream OriginalResponseStream { get; internal set; }
    internal OutputCacheStream OutputCacheStream { get; internal set; }
    [CompilerGeneratedAttribute]
public bool get_EnableOutputCaching();
    [CompilerGeneratedAttribute]
public void set_EnableOutputCaching(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowCacheLookup();
    [CompilerGeneratedAttribute]
public void set_AllowCacheLookup(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowCacheStorage();
    [CompilerGeneratedAttribute]
public void set_AllowCacheStorage(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowLocking();
    [CompilerGeneratedAttribute]
public void set_AllowLocking(bool value);
    [CompilerGeneratedAttribute]
public HttpContext get_HttpContext();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HttpContext(HttpContext value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_ResponseTime();
    [CompilerGeneratedAttribute]
public void set_ResponseTime(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public CacheVaryByRules get_CacheVaryByRules();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_ResponseExpirationTimeSpan();
    [CompilerGeneratedAttribute]
public void set_ResponseExpirationTimeSpan(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
internal string get_CacheKey();
    [CompilerGeneratedAttribute]
internal void set_CacheKey(string value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_CachedResponseValidFor();
    [CompilerGeneratedAttribute]
internal void set_CachedResponseValidFor(TimeSpan value);
    [CompilerGeneratedAttribute]
internal bool get_IsCacheEntryFresh();
    [CompilerGeneratedAttribute]
internal void set_IsCacheEntryFresh(bool value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_CachedEntryAge();
    [CompilerGeneratedAttribute]
internal void set_CachedEntryAge(TimeSpan value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal OutputCacheEntry get_CachedResponse();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_CachedResponse(OutputCacheEntry value);
    internal void ReleaseCachedResponse();
    [CompilerGeneratedAttribute]
internal bool get_ResponseStarted();
    [CompilerGeneratedAttribute]
internal void set_ResponseStarted(bool value);
    [CompilerGeneratedAttribute]
internal Stream get_OriginalResponseStream();
    [CompilerGeneratedAttribute]
internal void set_OriginalResponseStream(Stream value);
    [CompilerGeneratedAttribute]
internal OutputCacheStream get_OutputCacheStream();
    [CompilerGeneratedAttribute]
internal void set_OutputCacheStream(OutputCacheStream value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.OutputCaching.OutputCacheEntry : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ReadOnlyMemory`1<ValueTuple`2<string, StringValues>> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlySequence`1<byte> <Body>k__BackingField;
    public DateTimeOffset Created { get; }
    public int StatusCode { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ReadOnlyMemory`1<ValueTuple`2<string, StringValues>> Headers { get; private set; }
    [NullableAttribute("0")]
public ReadOnlySequence`1<byte> Body { get; private set; }
    public OutputCacheEntry(DateTimeOffset created, int statusCode);
    public StringValues FindHeader(string key);
    public bool TryFindHeader(string key, StringValues& values);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Created();
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<ValueTuple`2<string, StringValues>> get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(ReadOnlyMemory`1<ValueTuple`2<string, StringValues>> value);
    internal void SetHeaders(ReadOnlyMemory`1<ValueTuple`2<string, StringValues>> value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public ReadOnlySequence`1<byte> get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(ReadOnlySequence`1<byte> value);
    [NullableContextAttribute("0")]
internal void SetBody(ReadOnlySequence`1<byte> value, bool recycleBuffers);
    internal OutputCacheEntry CreateBodyFrom(IList`1<Byte[]> segments);
    internal OutputCacheEntry CopyHeadersFrom(IHeaderDictionary headers);
    public void CopyHeadersTo(IHeaderDictionary headers);
    public ValueTask CopyToAsync(PipeWriter destination, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.OutputCaching.OutputCacheEntryFormatter : object {
    private static String[] CommonHeaders;
    private static FrozenSet`1<string> IgnoredHeaders;
    private static FrozenDictionary`2<string, int> CommonHeadersLookup;
    private static OutputCacheEntryFormatter();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OutputCaching.OutputCacheEntryFormatter/<GetAsync>d__1")]
public static ValueTask`1<OutputCacheEntry> GetAsync(string key, IOutputCacheStore store, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OutputCaching.OutputCacheEntryFormatter/<StoreAsync>d__2")]
public static ValueTask StoreAsync(string key, OutputCacheEntry value, HashSet`1<string> tags, TimeSpan duration, IOutputCacheStore store, ILogger logger, CancellationToken cancellationToken);
    private static void Serialize(IBufferWriter`1<byte> output, OutputCacheEntry entry);
    private static void WriteCommonHeader(FormatterBinaryWriter& writer, string value);
    private static bool CanParseRevision(SerializationRevision revision, Boolean& useCommonHeaders);
    [NullableContextAttribute("0")]
internal static OutputCacheEntry Deserialize(ReadOnlyMemory`1<byte> content);
    private static string ReadCommonHeader(FormatterBinaryReader& reader);
    private static FrozenDictionary`2<string, int> BuildCommonHeadersLookup();
    internal static bool ShouldStoreHeader(string key);
    [CompilerGeneratedAttribute]
internal static ReadOnlyMemory`1<string> <StoreAsync>g__CopyToLeasedMemory|2_0(HashSet`1<string> tags, String[]& lease);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static ReadOnlyMemory`1<byte> <Deserialize>g__ReadSegment|6_0(FormatterBinaryReader& reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.OutputCaching.OutputCacheFeature : object {
    [CompilerGeneratedAttribute]
private OutputCacheContext <Context>k__BackingField;
    public OutputCacheContext Context { get; }
    public OutputCacheFeature(OutputCacheContext context);
    [CompilerGeneratedAttribute]
public sealed virtual OutputCacheContext get_Context();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.OutputCaching.OutputCacheKeyProvider : object {
    private static char KeyDelimiter;
    private static char KeySubDelimiter;
    private ObjectPool`1<StringBuilder> _builderPool;
    private OutputCacheOptions _options;
    internal OutputCacheKeyProvider(ObjectPoolProvider poolProvider, IOptions`1<OutputCacheOptions> options);
    public sealed virtual string CreateStorageKey(OutputCacheContext context);
    [NullableContextAttribute("2")]
public static bool ContainsDelimiters(string value);
    public static bool TryAppendKeyPrefix(OutputCacheContext context, StringBuilder builder);
    public bool TryAppendBaseKey(OutputCacheContext context, StringBuilder builder);
    public bool TryAppendVaryByKey(OutputCacheContext context, StringBuilder builder);
    internal static String[] GetOrderDictionaryKeys(IDictionary`2<string, string> dictionary);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.OutputCaching.OutputCacheMiddleware : object {
    private static String[] HeadersToIncludeIn304;
    private RequestDelegate _next;
    private OutputCacheOptions _options;
    private ILogger _logger;
    private IOutputCacheStore _store;
    private IOutputCacheKeyProvider _keyProvider;
    private WorkDispatcher`2<string, OutputCacheEntry> _outputCacheEntryDispatcher;
    private WorkDispatcher`2<string, OutputCacheEntry> _requestDispatcher;
    public OutputCacheMiddleware(RequestDelegate next, IOptions`1<OutputCacheOptions> options, ILoggerFactory loggerFactory, IOutputCacheStore outputCache, ObjectPoolProvider poolProvider);
    internal OutputCacheMiddleware(RequestDelegate next, IOptions`1<OutputCacheOptions> options, ILoggerFactory loggerFactory, IOutputCacheStore cache, IOutputCacheKeyProvider keyProvider);
    private static OutputCacheMiddleware();
    public Task Invoke(HttpContext httpContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OutputCaching.OutputCacheMiddleware/<InvokeAwaited>d__11")]
private Task InvokeAwaited(HttpContext httpContext, IReadOnlyList`1<IOutputCachePolicy> policies);
    internal bool TryGetRequestPolicies(HttpContext httpContext, IReadOnlyList`1& policies);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OutputCaching.OutputCacheMiddleware/<TryServeCachedResponseAsync>d__13")]
internal Task`1<bool> TryServeCachedResponseAsync(OutputCacheContext context, OutputCacheEntry cacheEntry, IReadOnlyList`1<IOutputCachePolicy> policies);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OutputCaching.OutputCacheMiddleware/<TryServeFromCacheAsync>d__14")]
internal Task`1<bool> TryServeFromCacheAsync(OutputCacheContext cacheContext, IReadOnlyList`1<IOutputCachePolicy> policies);
    internal void CreateCacheKey(OutputCacheContext context);
    internal void FinalizeCacheHeaders(OutputCacheContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OutputCaching.OutputCacheMiddleware/<FinalizeCacheBodyAsync>d__17")]
internal ValueTask FinalizeCacheBodyAsync(OutputCacheContext context);
    private bool OnStartResponse(OutputCacheContext context);
    internal void StartResponse(OutputCacheContext context);
    internal static void AddOutputCacheFeature(OutputCacheContext context);
    internal void ShimResponseStream(OutputCacheContext context);
    internal static void RemoveOutputCacheFeature(HttpContext context);
    internal static void UnshimResponseStream(OutputCacheContext context);
    internal bool ContentIsNotModified(OutputCacheContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.OutputCaching.OutputCacheOptions : object {
    [CompilerGeneratedAttribute]
private long <SizeLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaximumBodySize>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DefaultExpirationTimeSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCaseSensitivePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ApplicationServices>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IOutputCachePolicy> <NamedPolicies>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IOutputCachePolicy> <BasePolicies>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeProvider <TimeProvider>k__BackingField;
    public long SizeLimit { get; public set; }
    public long MaximumBodySize { get; public set; }
    public TimeSpan DefaultExpirationTimeSpan { get; public set; }
    public bool UseCaseSensitivePaths { get; public set; }
    public IServiceProvider ApplicationServices { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<string, IOutputCachePolicy> NamedPolicies { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<IOutputCachePolicy> BasePolicies { get; internal set; }
    internal TimeProvider TimeProvider { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_SizeLimit();
    [CompilerGeneratedAttribute]
public void set_SizeLimit(long value);
    [CompilerGeneratedAttribute]
public long get_MaximumBodySize();
    [CompilerGeneratedAttribute]
public void set_MaximumBodySize(long value);
    [CompilerGeneratedAttribute]
public TimeSpan get_DefaultExpirationTimeSpan();
    [CompilerGeneratedAttribute]
public void set_DefaultExpirationTimeSpan(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_UseCaseSensitivePaths();
    [CompilerGeneratedAttribute]
public void set_UseCaseSensitivePaths(bool value);
    [CompilerGeneratedAttribute]
public IServiceProvider get_ApplicationServices();
    [CompilerGeneratedAttribute]
internal void set_ApplicationServices(IServiceProvider value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, IOutputCachePolicy> get_NamedPolicies();
    [CompilerGeneratedAttribute]
internal void set_NamedPolicies(Dictionary`2<string, IOutputCachePolicy> value);
    [CompilerGeneratedAttribute]
internal List`1<IOutputCachePolicy> get_BasePolicies();
    [CompilerGeneratedAttribute]
internal void set_BasePolicies(List`1<IOutputCachePolicy> value);
    [CompilerGeneratedAttribute]
internal TimeProvider get_TimeProvider();
    [CompilerGeneratedAttribute]
internal void set_TimeProvider(TimeProvider value);
    public void AddPolicy(string name, IOutputCachePolicy policy);
    public void AddPolicy(string name, Action`1<OutputCachePolicyBuilder> build);
    public void AddPolicy(string name, Action`1<OutputCachePolicyBuilder> build, bool excludeDefaultPolicy);
    public void AddBasePolicy(IOutputCachePolicy policy);
    public void AddBasePolicy(Action`1<OutputCachePolicyBuilder> build);
    public void AddBasePolicy(Action`1<OutputCachePolicyBuilder> build, bool excludeDefaultPolicy);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.OutputCaching.OutputCacheOptionsSetup : object {
    private IServiceProvider _services;
    public OutputCacheOptionsSetup(IServiceProvider services);
    public sealed virtual void Configure(OutputCacheOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder : object {
    private static DynamicallyAccessedMemberTypes ActivatorAccessibility;
    private IOutputCachePolicy _builtPolicy;
    private List`1<IOutputCachePolicy> _policies;
    private List`1<Func`3<OutputCacheContext, CancellationToken, ValueTask`1<bool>>> _requirements;
    internal OutputCachePolicyBuilder(bool excludeDefaultPolicy);
    internal OutputCachePolicyBuilder AddPolicy(IOutputCachePolicy policy);
    public OutputCachePolicyBuilder AddPolicy(Type policyType);
    public OutputCachePolicyBuilder AddPolicy();
    public OutputCachePolicyBuilder With(Func`3<OutputCacheContext, CancellationToken, ValueTask`1<bool>> predicate);
    public OutputCachePolicyBuilder With(Func`2<OutputCacheContext, bool> predicate);
    public OutputCachePolicyBuilder SetVaryByQuery(string queryKey, String[] queryKeys);
    public OutputCachePolicyBuilder SetVaryByQuery(String[] queryKeys);
    public OutputCachePolicyBuilder SetVaryByHeader(string headerName, String[] headerNames);
    public OutputCachePolicyBuilder SetVaryByHeader(String[] headerNames);
    public OutputCachePolicyBuilder SetVaryByRouteValue(string routeValueName, String[] routeValueNames);
    public OutputCachePolicyBuilder SetVaryByRouteValue(String[] routeValueNames);
    public OutputCachePolicyBuilder SetCacheKeyPrefix(string keyPrefix);
    public OutputCachePolicyBuilder SetCacheKeyPrefix(Func`2<HttpContext, string> keyPrefix);
    public OutputCachePolicyBuilder SetCacheKeyPrefix(Func`3<HttpContext, CancellationToken, ValueTask`1<string>> keyPrefix);
    public OutputCachePolicyBuilder VaryByValue(string key, string value);
    public OutputCachePolicyBuilder VaryByValue(Func`2<HttpContext, KeyValuePair`2<string, string>> varyBy);
    public OutputCachePolicyBuilder VaryByValue(Func`3<HttpContext, CancellationToken, ValueTask`1<KeyValuePair`2<string, string>>> varyBy);
    public OutputCachePolicyBuilder Tag(String[] tags);
    public OutputCachePolicyBuilder Expire(TimeSpan expiration);
    public OutputCachePolicyBuilder SetLocking(bool enabled);
    public OutputCachePolicyBuilder NoCache();
    public OutputCachePolicyBuilder Cache();
    public OutputCachePolicyBuilder SetVaryByHost(bool enabled);
    internal IOutputCachePolicy Build();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder/<<Build>b__29_0>d")]
[CompilerGeneratedAttribute]
private ValueTask`1<bool> <Build>b__29_0(OutputCacheContext c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.OutputCaching.OutputCacheStream : Stream {
    private Stream _innerStream;
    private long _maxBufferSize;
    private int _segmentSize;
    private RecyclableSequenceBuilder _segmentWriteStream;
    private Action _startResponseCallback;
    [CompilerGeneratedAttribute]
private bool <BufferingEnabled>k__BackingField;
    internal bool BufferingEnabled { get; private set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal OutputCacheStream(Stream innerStream, long maxBufferSize, int segmentSize, Action startResponseCallback);
    [CompilerGeneratedAttribute]
internal bool get_BufferingEnabled();
    [CompilerGeneratedAttribute]
private void set_BufferingEnabled(bool value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    [NullableContextAttribute("0")]
internal ReadOnlySequence`1<byte> GetCachedResponseBody();
    internal void DisableBuffering();
    public virtual void SetLength(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void Flush();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OutputCaching.OutputCacheStream/<FlushAsync>d__26")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public virtual void Write(ReadOnlySpan`1<byte> buffer);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OutputCaching.OutputCacheStream/<WriteAsync>d__30")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.OutputCaching.OutputCacheStream/<WriteAsync>d__31")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
    protected virtual void Dispose(bool disposing);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
}
internal class Microsoft.AspNetCore.OutputCaching.Policies.CompositePolicy : object {
    private IOutputCachePolicy[] _policies;
    [NullableContextAttribute("1")]
public CompositePolicy(IOutputCachePolicy[] policies);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OutputCaching.Policies.CompositePolicy/<Microsoft-AspNetCore-OutputCaching-IOutputCachePolicy-CacheRequestAsync>d__2")]
private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.CacheRequestAsync(OutputCacheContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OutputCaching.Policies.CompositePolicy/<Microsoft-AspNetCore-OutputCaching-IOutputCachePolicy-ServeFromCacheAsync>d__3")]
private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OutputCaching.Policies.CompositePolicy/<Microsoft-AspNetCore-OutputCaching-IOutputCachePolicy-ServeResponseAsync>d__4")]
private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeResponseAsync(OutputCacheContext context, CancellationToken cancellationToken);
}
internal class Microsoft.AspNetCore.OutputCaching.Policies.EmptyPolicy : object {
    [NullableAttribute("1")]
public static IOutputCachePolicy Instance;
    private static EmptyPolicy();
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.CacheRequestAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeResponseAsync(OutputCacheContext context, CancellationToken cancellationToken);
}
internal class Microsoft.AspNetCore.OutputCaching.Policies.PredicatePolicy : object {
    private Func`2<OutputCacheContext, ValueTask`1<bool>> _predicate;
    private IOutputCachePolicy _policy;
    [NullableContextAttribute("1")]
public PredicatePolicy(Func`2<OutputCacheContext, ValueTask`1<bool>> asyncPredicate, IOutputCachePolicy policy);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.CacheRequestAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeResponseAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private ValueTask ExecuteAwaited(Func`4<IOutputCachePolicy, OutputCacheContext, CancellationToken, ValueTask> action, IOutputCachePolicy policy, OutputCacheContext context, CancellationToken cancellationToken);
}
internal class Microsoft.AspNetCore.OutputCaching.Policies.TypedPolicy : object {
    private IOutputCachePolicy _instance;
    [DynamicallyAccessedMembersAttribute("3")]
private Type _policyType;
    [NullableContextAttribute("1")]
public TypedPolicy(Type policyType);
    private IOutputCachePolicy CreatePolicy(OutputCacheContext context);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.CacheRequestAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeResponseAsync(OutputCacheContext context, CancellationToken cancellationToken);
}
internal class Microsoft.AspNetCore.OutputCaching.RecyclableArrayBufferWriter`1 : object {
    private static int ArrayMaxLength;
    private static int DefaultInitialBufferSize;
    private T[] _buffer;
    private int _index;
    public int FreeCapacity { get; }
    public int get_FreeCapacity();
    public sealed virtual void Dispose();
    public sealed virtual void Advance(int count);
    public ReadOnlyMemory`1<T> GetCommittedMemory();
    public sealed virtual Memory`1<T> GetMemory(int sizeHint);
    public sealed virtual Span`1<T> GetSpan(int sizeHint);
    [NullableContextAttribute("1")]
public T[] ToArray();
    private void CheckAndResizeBuffer(int sizeHint);
    [CompilerGeneratedAttribute]
internal static void <Advance>g__Throw|8_0();
    [CompilerGeneratedAttribute]
internal static void <CheckAndResizeBuffer>g__ThrowOutOfMemoryException|13_0();
}
internal class Microsoft.AspNetCore.OutputCaching.RecyclableReadOnlySequenceSegment : ReadOnlySequenceSegment`1<byte> {
    private static int TARGET_MAX;
    private static ConcurrentQueue`1<RecyclableReadOnlySequenceSegment> s_Spares;
    public int Length { get; }
    private static RecyclableReadOnlySequenceSegment();
    public int get_Length();
    [NullableContextAttribute("1")]
public static RecyclableReadOnlySequenceSegment Create(int minimumLength, RecyclableReadOnlySequenceSegment previous);
    public static RecyclableReadOnlySequenceSegment Create(ReadOnlyMemory`1<byte> memory, RecyclableReadOnlySequenceSegment previous);
    [NullableContextAttribute("2")]
public static void RecycleChain(RecyclableReadOnlySequenceSegment obj, bool recycleBuffers);
    public static void RecycleChain(ReadOnlySequence`1& value, bool recycleBuffers);
    internal static ReadOnlySequence`1<byte> CreateSequence(IList`1<Byte[]> segments);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OutputCaching.RecyclableReadOnlySequenceSegment/<CopyToAsync>d__10")]
public static ValueTask CopyToAsync(ReadOnlySequence`1<byte> source, PipeWriter destination, CancellationToken cancellationToken);
    private static Byte[] GetBuffer(int minimumLength);
    private static void Recycle(ReadOnlyMemory`1<byte> _);
}
internal class Microsoft.AspNetCore.OutputCaching.RecyclableSequenceBuilder : object {
    private RecyclableReadOnlySequenceSegment _firstSegment;
    private RecyclableReadOnlySequenceSegment _currentSegment;
    private int _currentSegmentIndex;
    private int _segmentSize;
    private bool _closed;
    [CompilerGeneratedAttribute]
private long <Length>k__BackingField;
    public long Length { get; private set; }
    internal RecyclableSequenceBuilder(int segmentSize);
    [CompilerGeneratedAttribute]
public long get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(long value);
    internal ReadOnlySequence`1<byte> DetachAndReset();
    public sealed virtual void Dispose();
    private Span`1<byte> GetBuffer();
    public void Write(ReadOnlySpan`1<byte> buffer);
    private void Advance(int count);
    public void WriteByte(byte value);
    [CompilerGeneratedAttribute]
internal static void <GetBuffer>g__Throw|12_0();
    [CompilerGeneratedAttribute]
internal static void <Write>g__Throw|13_0();
}
internal static class Microsoft.AspNetCore.OutputCaching.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string TagCannotBeNull { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_TagCannotBeNull();
}
internal class Microsoft.AspNetCore.OutputCaching.SetCacheKeyPrefixPolicy : object {
    private Func`4<HttpContext, CacheVaryByRules, CancellationToken, ValueTask> _varyByAsync;
    public SetCacheKeyPrefixPolicy(Func`3<HttpContext, CancellationToken, ValueTask`1<string>> varyBy);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.CacheRequestAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeResponseAsync(OutputCacheContext context, CancellationToken cancellationToken);
}
internal static class Microsoft.AspNetCore.OutputCaching.StreamUtilities : object {
    [CompilerGeneratedAttribute]
private static int <BodySegmentSize>k__BackingField;
    internal static int BodySegmentSize { get; internal set; }
    private static StreamUtilities();
    [CompilerGeneratedAttribute]
internal static int get_BodySegmentSize();
    [CompilerGeneratedAttribute]
internal static void set_BodySegmentSize(int value);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.OutputCaching.StringBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static StringBuilder AppendUpperInvariant(StringBuilder builder, string value);
}
internal class Microsoft.AspNetCore.OutputCaching.TagsPolicy : object {
    private String[] _tags;
    [NullableContextAttribute("1")]
public TagsPolicy(String[] tags);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.CacheRequestAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeResponseAsync(OutputCacheContext context, CancellationToken cancellationToken);
}
internal class Microsoft.AspNetCore.OutputCaching.VaryByHeaderPolicy : object {
    private StringValues _headerNames;
    [NullableContextAttribute("1")]
public VaryByHeaderPolicy(string header, String[] headerNames);
    [NullableContextAttribute("1")]
public VaryByHeaderPolicy(String[] headerNames);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.CacheRequestAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeResponseAsync(OutputCacheContext context, CancellationToken cancellationToken);
}
internal class Microsoft.AspNetCore.OutputCaching.VaryByHostPolicy : object {
    [NullableAttribute("1")]
public static VaryByHostPolicy Enabled;
    [NullableAttribute("1")]
public static VaryByHostPolicy Disabled;
    private bool _varyByHost;
    private VaryByHostPolicy(bool varyByHost);
    private static VaryByHostPolicy();
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.CacheRequestAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeResponseAsync(OutputCacheContext context, CancellationToken cancellationToken);
}
internal class Microsoft.AspNetCore.OutputCaching.VaryByQueryPolicy : object {
    private StringValues _queryKeys;
    [NullableContextAttribute("1")]
public VaryByQueryPolicy(string queryKey, String[] queryKeys);
    [NullableContextAttribute("1")]
public VaryByQueryPolicy(String[] queryKeys);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.CacheRequestAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeResponseAsync(OutputCacheContext context, CancellationToken cancellationToken);
}
internal class Microsoft.AspNetCore.OutputCaching.VaryByRouteValuePolicy : object {
    private StringValues _routeValueNames;
    [NullableContextAttribute("1")]
public VaryByRouteValuePolicy(string routeValue, String[] routeValueNames);
    [NullableContextAttribute("1")]
public VaryByRouteValuePolicy(String[] routeValueNames);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.CacheRequestAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeResponseAsync(OutputCacheContext context, CancellationToken cancellationToken);
}
internal class Microsoft.AspNetCore.OutputCaching.VaryByValuePolicy : object {
    private Func`4<HttpContext, CacheVaryByRules, CancellationToken, ValueTask> _varyByAsync;
    public VaryByValuePolicy(Func`3<HttpContext, CancellationToken, ValueTask`1<KeyValuePair`2<string, string>>> varyBy);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.CacheRequestAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Microsoft.AspNetCore.OutputCaching.IOutputCachePolicy.ServeResponseAsync(OutputCacheContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.OutputCaching.WorkDispatcher`2 : object {
    private ConcurrentDictionary`2<TKey, Task`1<TValue>> _workers;
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OutputCaching.WorkDispatcher`2/<ScheduleAsync>d__1")]
public Task`1<TValue> ScheduleAsync(TKey key, Func`2<TKey, Task`1<TValue>> valueFactory);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OutputCaching.WorkDispatcher`2/<ScheduleAsync>d__2`1")]
public Task`1<TValue> ScheduleAsync(TKey key, TState state, Func`3<TKey, TState, Task`1<TValue>> valueFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.OutputCacheConventionBuilderExtensions : object {
    [ExtensionAttribute]
public static TBuilder CacheOutput(TBuilder builder);
    [ExtensionAttribute]
public static TBuilder CacheOutput(TBuilder builder, IOutputCachePolicy policy);
    [ExtensionAttribute]
public static TBuilder CacheOutput(TBuilder builder, Action`1<OutputCachePolicyBuilder> policy);
    [ExtensionAttribute]
public static TBuilder CacheOutput(TBuilder builder, Action`1<OutputCachePolicyBuilder> policy, bool excludeDefaultPolicy);
    [ExtensionAttribute]
public static TBuilder CacheOutput(TBuilder builder, string policyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.OutputCacheServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddOutputCache(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddOutputCache(IServiceCollection services, Action`1<OutputCacheOptions> configureOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Threading.Tasks.TaskToApm : object {
    public static IAsyncResult Begin(Task task, AsyncCallback callback, object state);
    public static void End(IAsyncResult asyncResult);
    public static TResult End(IAsyncResult asyncResult);
}
