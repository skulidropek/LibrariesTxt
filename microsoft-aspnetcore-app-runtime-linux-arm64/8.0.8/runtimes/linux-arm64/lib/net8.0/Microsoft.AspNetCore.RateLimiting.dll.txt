[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.RateLimiterApplicationBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseRateLimiter(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseRateLimiter(IApplicationBuilder app, RateLimiterOptions options);
    private static void VerifyServicesAreRegistered(IApplicationBuilder app);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.RateLimiterEndpointConventionBuilderExtensions : object {
    [ExtensionAttribute]
public static TBuilder RequireRateLimiting(TBuilder builder, string policyName);
    [ExtensionAttribute]
public static TBuilder RequireRateLimiting(TBuilder builder, IRateLimiterPolicy`1<TPartitionKey> policy);
    [ExtensionAttribute]
public static TBuilder DisableRateLimiting(TBuilder builder);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.RateLimiterServiceCollectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IServiceCollection AddRateLimiter(IServiceCollection services, Action`1<RateLimiterOptions> configureOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.RateLimiting.DefaultCombinedLease : RateLimitLease {
    private RateLimitLease _globalLease;
    private RateLimitLease _endpointLease;
    private HashSet`1<string> _metadataNames;
    public bool IsAcquired { get; }
    public IEnumerable`1<string> MetadataNames { get; }
    public DefaultCombinedLease(RateLimitLease globalLease, RateLimitLease endpointLease);
    public virtual bool get_IsAcquired();
    public virtual IEnumerable`1<string> get_MetadataNames();
    public virtual bool TryGetMetadata(string metadataName, Object& metadata);
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.RateLimiting.DefaultKeyType : ValueType {
    [CompilerGeneratedAttribute]
private string <PolicyName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Factory>k__BackingField;
    public string PolicyName { get; }
    public object Key { get; }
    public object Factory { get; }
    public DefaultKeyType(string policyName, object key, object factory);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_PolicyName();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public object get_Key();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public object get_Factory();
}
internal class Microsoft.AspNetCore.RateLimiting.DefaultKeyTypeEqualityComparer : object {
    public sealed virtual bool Equals(DefaultKeyType x, DefaultKeyType y);
    public sealed virtual int GetHashCode(DefaultKeyType obj);
}
internal class Microsoft.AspNetCore.RateLimiting.DefaultRateLimiterPolicy : object {
    private Func`2<HttpContext, RateLimitPartition`1<DefaultKeyType>> _partitioner;
    private Func`3<OnRejectedContext, CancellationToken, ValueTask> _onRejected;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<OnRejectedContext, CancellationToken, ValueTask> OnRejected { get; }
    public DefaultRateLimiterPolicy(Func`2<HttpContext, RateLimitPartition`1<DefaultKeyType>> partitioner, Func`3<OnRejectedContext, CancellationToken, ValueTask> onRejected);
    public sealed virtual Func`3<OnRejectedContext, CancellationToken, ValueTask> get_OnRejected();
    public sealed virtual RateLimitPartition`1<DefaultKeyType> GetPartition(HttpContext httpContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.RateLimiting.DisableRateLimitingAttribute : Attribute {
    [CompilerGeneratedAttribute]
private static DisableRateLimitingAttribute <Instance>k__BackingField;
    internal static DisableRateLimitingAttribute Instance { get; }
    private static DisableRateLimitingAttribute();
    [CompilerGeneratedAttribute]
internal static DisableRateLimitingAttribute get_Instance();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.RateLimiting.EnableRateLimitingAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PolicyName>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultRateLimiterPolicy <Policy>k__BackingField;
    public string PolicyName { get; }
    internal DefaultRateLimiterPolicy Policy { get; }
    [NullableContextAttribute("1")]
public EnableRateLimitingAttribute(string policyName);
    [NullableContextAttribute("1")]
internal EnableRateLimitingAttribute(DefaultRateLimiterPolicy policy);
    [CompilerGeneratedAttribute]
public string get_PolicyName();
    [CompilerGeneratedAttribute]
internal DefaultRateLimiterPolicy get_Policy();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.RateLimiting.IRateLimiterPolicy`1 {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<OnRejectedContext, CancellationToken, ValueTask> OnRejected { get; }
    public abstract virtual Func`3<OnRejectedContext, CancellationToken, ValueTask> get_OnRejected();
    public abstract virtual RateLimitPartition`1<TPartitionKey> GetPartition(HttpContext httpContext);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.RateLimiting.LeaseContext : ValueType {
    [CompilerGeneratedAttribute]
private Nullable`1<RequestRejectionReason> <RequestRejectionReason>k__BackingField;
    [CompilerGeneratedAttribute]
private RateLimitLease <Lease>k__BackingField;
    public Nullable`1<RequestRejectionReason> RequestRejectionReason { get; public set; }
    public RateLimitLease Lease { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<RequestRejectionReason> get_RequestRejectionReason();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RequestRejectionReason(Nullable`1<RequestRejectionReason> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public RateLimitLease get_Lease();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Lease(RateLimitLease value);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.RateLimiting.MetricsContext : ValueType {
    public string PolicyName;
    public bool CurrentLeasedRequestsCounterEnabled;
    public bool CurrentQueuedRequestsCounterEnabled;
    public MetricsContext(string policyName, bool currentLeasedRequestsCounterEnabled, bool currentQueuedRequestsCounterEnabled);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public class Microsoft.AspNetCore.RateLimiting.OnRejectedContext : object {
    [CompilerGeneratedAttribute]
private HttpContext <HttpContext>k__BackingField;
    [CompilerGeneratedAttribute]
private RateLimitLease <Lease>k__BackingField;
    [RequiredMemberAttribute]
public HttpContext HttpContext { get; public set; }
    [RequiredMemberAttribute]
public RateLimitLease Lease { get; public set; }
    [CompilerGeneratedAttribute]
public HttpContext get_HttpContext();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HttpContext(HttpContext value);
    [CompilerGeneratedAttribute]
public RateLimitLease get_Lease();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Lease(RateLimitLease value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
internal class Microsoft.AspNetCore.RateLimiting.PolicyNameKey : object {
    [CompilerGeneratedAttribute]
private string <PolicyName>k__BackingField;
    [RequiredMemberAttribute]
public string PolicyName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PolicyName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PolicyName(string value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.RateLimiting.RateLimiterOptions : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, DefaultRateLimiterPolicy> <PolicyMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Func`2<IServiceProvider, DefaultRateLimiterPolicy>> <UnactivatedPolicyMap>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionedRateLimiter`1<HttpContext> <GlobalLimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<OnRejectedContext, CancellationToken, ValueTask> <OnRejected>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RejectionStatusCode>k__BackingField;
    internal Dictionary`2<string, DefaultRateLimiterPolicy> PolicyMap { get; }
    internal Dictionary`2<string, Func`2<IServiceProvider, DefaultRateLimiterPolicy>> UnactivatedPolicyMap { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public PartitionedRateLimiter`1<HttpContext> GlobalLimiter { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<OnRejectedContext, CancellationToken, ValueTask> OnRejected { get; public set; }
    public int RejectionStatusCode { get; public set; }
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, DefaultRateLimiterPolicy> get_PolicyMap();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, Func`2<IServiceProvider, DefaultRateLimiterPolicy>> get_UnactivatedPolicyMap();
    [CompilerGeneratedAttribute]
public PartitionedRateLimiter`1<HttpContext> get_GlobalLimiter();
    [CompilerGeneratedAttribute]
public void set_GlobalLimiter(PartitionedRateLimiter`1<HttpContext> value);
    [CompilerGeneratedAttribute]
public Func`3<OnRejectedContext, CancellationToken, ValueTask> get_OnRejected();
    [CompilerGeneratedAttribute]
public void set_OnRejected(Func`3<OnRejectedContext, CancellationToken, ValueTask> value);
    [CompilerGeneratedAttribute]
public int get_RejectionStatusCode();
    [CompilerGeneratedAttribute]
public void set_RejectionStatusCode(int value);
    public RateLimiterOptions AddPolicy(string policyName, Func`2<HttpContext, RateLimitPartition`1<TPartitionKey>> partitioner);
    public RateLimiterOptions AddPolicy(string policyName);
    public RateLimiterOptions AddPolicy(string policyName, IRateLimiterPolicy`1<TPartitionKey> policy);
    [NullableContextAttribute("2")]
internal static Func`2<HttpContext, RateLimitPartition`1<DefaultKeyType>> ConvertPartitioner(string policyName, Func`2<HttpContext, RateLimitPartition`1<TPartitionKey>> partitioner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.RateLimiting.RateLimiterOptionsExtensions : object {
    [ExtensionAttribute]
public static RateLimiterOptions AddTokenBucketLimiter(RateLimiterOptions options, string policyName, Action`1<TokenBucketRateLimiterOptions> configureOptions);
    [ExtensionAttribute]
public static RateLimiterOptions AddFixedWindowLimiter(RateLimiterOptions options, string policyName, Action`1<FixedWindowRateLimiterOptions> configureOptions);
    [ExtensionAttribute]
public static RateLimiterOptions AddSlidingWindowLimiter(RateLimiterOptions options, string policyName, Action`1<SlidingWindowRateLimiterOptions> configureOptions);
    [ExtensionAttribute]
public static RateLimiterOptions AddConcurrencyLimiter(RateLimiterOptions options, string policyName, Action`1<ConcurrencyLimiterOptions> configureOptions);
}
internal class Microsoft.AspNetCore.RateLimiting.RateLimitingMetrics : object {
    [NullableAttribute("1")]
public static string MeterName;
    private Meter _meter;
    private UpDownCounter`1<long> _activeRequestLeasesCounter;
    private Histogram`1<double> _requestLeaseDurationCounter;
    private UpDownCounter`1<long> _queuedRequestsCounter;
    private Histogram`1<double> _queuedRequestDurationCounter;
    private Counter`1<long> _requestsCounter;
    [NullableContextAttribute("1")]
public RateLimitingMetrics(IMeterFactory meterFactory);
    public void LeaseFailed(MetricsContext& metricsContext, RequestRejectionReason reason);
    private void LeaseFailedCore(MetricsContext& metricsContext, RequestRejectionReason reason);
    public void LeaseStart(MetricsContext& metricsContext);
    public void LeaseStartCore(MetricsContext& metricsContext);
    public void LeaseEnd(MetricsContext& metricsContext, long startTimestamp, long currentTimestamp);
    private void LeaseEndCore(MetricsContext& metricsContext, long startTimestamp, long currentTimestamp);
    public void QueueStart(MetricsContext& metricsContext);
    private void QueueStartCore(MetricsContext& metricsContext);
    public void QueueEnd(MetricsContext& metricsContext, Nullable`1<RequestRejectionReason> reason, long startTimestamp, long currentTimestamp);
    private void QueueEndCore(MetricsContext& metricsContext, Nullable`1<RequestRejectionReason> reason, long startTimestamp, long currentTimestamp);
    public sealed virtual void Dispose();
    private static void InitializeRateLimitingTags(TagList& tags, MetricsContext& metricsContext);
    private static string GetResult(RequestRejectionReason reason);
    [NullableContextAttribute("2")]
public MetricsContext CreateContext(string policyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware : object {
    private RequestDelegate _next;
    private Func`3<OnRejectedContext, CancellationToken, ValueTask> _defaultOnRejected;
    private ILogger _logger;
    private RateLimitingMetrics _metrics;
    private PartitionedRateLimiter`1<HttpContext> _globalLimiter;
    private PartitionedRateLimiter`1<HttpContext> _endpointLimiter;
    private int _rejectionStatusCode;
    private Dictionary`2<string, DefaultRateLimiterPolicy> _policyMap;
    private DefaultKeyType _defaultPolicyKey;
    public RateLimitingMiddleware(RequestDelegate next, ILogger`1<RateLimitingMiddleware> logger, IOptions`1<RateLimiterOptions> options, IServiceProvider serviceProvider, RateLimitingMetrics metrics);
    public Task Invoke(HttpContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware/<InvokeInternal>d__11")]
private Task InvokeInternal(HttpContext context, EnableRateLimitingAttribute enableRateLimitingAttribute);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware/<TryAcquireAsync>d__12")]
private ValueTask`1<LeaseContext> TryAcquireAsync(HttpContext context, MetricsContext metricsContext);
    private LeaseContext CombinedAcquire(HttpContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.RateLimiting.RateLimitingMiddleware/<CombinedWaitAsync>d__14")]
private ValueTask`1<LeaseContext> CombinedWaitAsync(HttpContext context, CancellationToken cancellationToken);
    private PartitionedRateLimiter`1<HttpContext> CreateEndpointLimiter();
    [CompilerGeneratedAttribute]
private RateLimitPartition`1<DefaultKeyType> <CreateEndpointLimiter>b__15_0(HttpContext context);
}
internal enum Microsoft.AspNetCore.RateLimiting.RequestRejectionReason : Enum {
    public int value__;
    public static RequestRejectionReason EndpointLimiter;
    public static RequestRejectionReason GlobalLimiter;
    public static RequestRejectionReason RequestCanceled;
}
internal static class Microsoft.AspNetCore.RateLimiting.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string UnableToFindServices { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_UnableToFindServices();
    internal static string FormatUnableToFindServices(object p0, object p1);
}
internal class Microsoft.Extensions.Internal.ValueStopwatch : ValueType {
    private long _startTimestamp;
    public bool IsActive { get; }
    private ValueStopwatch(long startTimestamp);
    public bool get_IsActive();
    public static ValueStopwatch StartNew();
    public TimeSpan GetElapsedTime();
}
