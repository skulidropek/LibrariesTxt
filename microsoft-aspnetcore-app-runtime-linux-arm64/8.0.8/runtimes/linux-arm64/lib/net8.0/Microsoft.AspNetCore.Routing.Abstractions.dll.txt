public interface Microsoft.AspNetCore.Routing.IOutboundParameterTransformer {
    [NullableContextAttribute("2")]
public abstract virtual string TransformOutbound(object value);
}
public interface Microsoft.AspNetCore.Routing.IParameterPolicy {
}
public interface Microsoft.AspNetCore.Routing.IRouteConstraint {
    [NullableContextAttribute("1")]
public abstract virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Routing.IRouteHandler {
    public abstract virtual RequestDelegate GetRequestHandler(HttpContext httpContext, RouteData routeData);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Routing.IRouter {
    public abstract virtual Task RouteAsync(RouteContext context);
    public abstract virtual VirtualPathData GetVirtualPath(VirtualPathContext context);
}
[NullableContextAttribute("2")]
public interface Microsoft.AspNetCore.Routing.IRoutingFeature {
    public RouteData RouteData { get; public set; }
    public abstract virtual RouteData get_RouteData();
    public abstract virtual void set_RouteData(RouteData value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Microsoft.AspNetCore.Routing.LinkGenerator : object {
    public abstract virtual string GetPathByAddress(HttpContext httpContext, TAddress address, RouteValueDictionary values, RouteValueDictionary ambientValues, Nullable`1<PathString> pathBase, FragmentString fragment, LinkOptions options);
    public abstract virtual string GetPathByAddress(TAddress address, RouteValueDictionary values, PathString pathBase, FragmentString fragment, LinkOptions options);
    public abstract virtual string GetUriByAddress(HttpContext httpContext, TAddress address, RouteValueDictionary values, RouteValueDictionary ambientValues, string scheme, Nullable`1<HostString> host, Nullable`1<PathString> pathBase, FragmentString fragment, LinkOptions options);
    [NullableContextAttribute("1")]
public abstract virtual string GetUriByAddress(TAddress address, RouteValueDictionary values, string scheme, HostString host, PathString pathBase, FragmentString fragment, LinkOptions options);
}
public class Microsoft.AspNetCore.Routing.LinkOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <LowercaseUrls>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <LowercaseQueryStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AppendTrailingSlash>k__BackingField;
    public Nullable`1<bool> LowercaseUrls { get; public set; }
    public Nullable`1<bool> LowercaseQueryStrings { get; public set; }
    public Nullable`1<bool> AppendTrailingSlash { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_LowercaseUrls();
    [CompilerGeneratedAttribute]
public void set_LowercaseUrls(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_LowercaseQueryStrings();
    [CompilerGeneratedAttribute]
public void set_LowercaseQueryStrings(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AppendTrailingSlash();
    [CompilerGeneratedAttribute]
public void set_AppendTrailingSlash(Nullable`1<bool> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Routing.RouteContext : object {
    private RouteData _routeData;
    [CompilerGeneratedAttribute]
private RequestDelegate <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpContext <HttpContext>k__BackingField;
    [NullableAttribute("2")]
public RequestDelegate Handler { get; public set; }
    public HttpContext HttpContext { get; }
    public RouteData RouteData { get; public set; }
    public RouteContext(HttpContext httpContext);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RequestDelegate get_Handler();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Handler(RequestDelegate value);
    [CompilerGeneratedAttribute]
public HttpContext get_HttpContext();
    public RouteData get_RouteData();
    public void set_RouteData(RouteData value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Count = {Values.Count}")]
[DebuggerTypeProxyAttribute("Microsoft.AspNetCore.Routing.RouteData/RouteDataDebugView")]
public class Microsoft.AspNetCore.Routing.RouteData : object {
    private RouteValueDictionary _dataTokens;
    private List`1<IRouter> _routers;
    private RouteValueDictionary _values;
    public RouteValueDictionary DataTokens { get; }
    public IList`1<IRouter> Routers { get; }
    public RouteValueDictionary Values { get; }
    public RouteData(RouteData other);
    public RouteData(RouteValueDictionary values);
    public RouteValueDictionary get_DataTokens();
    public IList`1<IRouter> get_Routers();
    public RouteValueDictionary get_Values();
    [NullableContextAttribute("2")]
public RouteDataSnapshot PushState(IRouter router, RouteValueDictionary values, RouteValueDictionary dataTokens);
}
public enum Microsoft.AspNetCore.Routing.RouteDirection : Enum {
    public int value__;
    public static RouteDirection IncomingRequest;
    public static RouteDirection UrlGeneration;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Routing.RoutingHttpContextExtensions : object {
    [ExtensionAttribute]
public static RouteData GetRouteData(HttpContext httpContext);
    [ExtensionAttribute]
public static object GetRouteValue(HttpContext httpContext, string key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Routing.VirtualPathContext : object {
    [CompilerGeneratedAttribute]
private RouteValueDictionary <AmbientValues>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpContext <HttpContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RouteName>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteValueDictionary <Values>k__BackingField;
    public RouteValueDictionary AmbientValues { get; }
    public HttpContext HttpContext { get; }
    [NullableAttribute("2")]
public string RouteName { get; }
    public RouteValueDictionary Values { get; public set; }
    public VirtualPathContext(HttpContext httpContext, RouteValueDictionary ambientValues, RouteValueDictionary values);
    public VirtualPathContext(HttpContext httpContext, RouteValueDictionary ambientValues, RouteValueDictionary values, string routeName);
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_AmbientValues();
    [CompilerGeneratedAttribute]
public HttpContext get_HttpContext();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_RouteName();
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(RouteValueDictionary value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Routing.VirtualPathData : object {
    private RouteValueDictionary _dataTokens;
    private string _virtualPath;
    [CompilerGeneratedAttribute]
private IRouter <Router>k__BackingField;
    public RouteValueDictionary DataTokens { get; }
    public IRouter Router { get; public set; }
    public string VirtualPath { get; public set; }
    public VirtualPathData(IRouter router, string virtualPath);
    public VirtualPathData(IRouter router, string virtualPath, RouteValueDictionary dataTokens);
    public RouteValueDictionary get_DataTokens();
    [CompilerGeneratedAttribute]
public IRouter get_Router();
    [CompilerGeneratedAttribute]
public void set_Router(IRouter value);
    public string get_VirtualPath();
    public void set_VirtualPath(string value);
    private static string NormalizePath(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Internal.PropertyHelper : object {
    private static BindingFlags DeclaredOnlyLookup;
    private static BindingFlags Everything;
    private static MethodInfo CallPropertyGetterOpenGenericMethod;
    private static MethodInfo CallPropertyGetterByReferenceOpenGenericMethod;
    private static MethodInfo CallNullSafePropertyGetterOpenGenericMethod;
    private static MethodInfo CallNullSafePropertyGetterByReferenceOpenGenericMethod;
    private static MethodInfo CallPropertySetterOpenGenericMethod;
    private static ConcurrentDictionary`2<Type, PropertyHelper[]> PropertiesCache;
    private static ConcurrentDictionary`2<Type, PropertyHelper[]> VisiblePropertiesCache;
    private Action`2<object, object> _valueSetter;
    private Func`2<object, object> _valueGetter;
    [CompilerGeneratedAttribute]
private PropertyInfo <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public PropertyInfo Property { get; }
    public string Name { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, object> ValueGetter { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<object, object> ValueSetter { get; }
    public PropertyHelper(PropertyInfo property);
    private static PropertyHelper();
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
public string get_Name();
    [RequiresUnreferencedCodeAttribute("This API is not trim safe.")]
public Func`2<object, object> get_ValueGetter();
    [RequiresUnreferencedCodeAttribute("This API is not trim safe.")]
public Action`2<object, object> get_ValueSetter();
    [RequiresUnreferencedCodeAttribute("This API is not trim safe.")]
public object GetValue(object instance);
    [RequiresUnreferencedCodeAttribute("This API is not trim safe.")]
public void SetValue(object instance, object value);
    [RequiresUnreferencedCodeAttribute("This API is not trim safe.")]
public static PropertyHelper[] GetProperties(Type type);
    [RequiresUnreferencedCodeAttribute("This API is not trim safe.")]
public static PropertyHelper[] GetVisibleProperties(Type type);
    [RequiresUnreferencedCodeAttribute("This API is not trimmer safe.")]
public static Func`2<object, object> MakeFastPropertyGetter(PropertyInfo propertyInfo);
    [RequiresUnreferencedCodeAttribute("This API is not trimmer safe.")]
public static Func`2<object, object> MakeNullSafeFastPropertyGetter(PropertyInfo propertyInfo);
    [RequiresUnreferencedCodeAttribute("This API is not trimmer safe.")]
private static Func`2<object, object> MakeFastPropertyGetter(PropertyInfo propertyInfo, MethodInfo propertyGetterWrapperMethod, MethodInfo propertyGetterByRefWrapperMethod);
    [RequiresUnreferencedCodeAttribute("This API is not trimmer safe.")]
[RequiresDynamicCodeAttribute("This API requires dynamic code because it makes generic types which may be filled with ValueTypes.")]
private static Func`2<object, object> MakeFastPropertyGetter(Type openGenericDelegateType, MethodInfo propertyGetMethod, MethodInfo openGenericWrapperMethod);
    [RequiresUnreferencedCodeAttribute("This API is not trimmer safe.")]
public static Action`2<object, object> MakeFastPropertySetter(PropertyInfo propertyInfo);
    [NullableContextAttribute("2")]
[RequiresUnreferencedCodeAttribute("Method uses reflection to generate the dictionary.")]
public static IDictionary`2<string, object> ObjectToDictionary(object value);
    private static object CallPropertyGetter(Func`2<TDeclaringType, TValue> getter, object target);
    private static object CallPropertyGetterByReference(ByRefFunc`2<TDeclaringType, TValue> getter, object target);
    private static object CallNullSafePropertyGetter(Func`2<TDeclaringType, TValue> getter, object target);
    private static object CallNullSafePropertyGetterByReference(ByRefFunc`2<TDeclaringType, TValue> getter, object target);
    private static void CallPropertySetter(Action`2<TDeclaringType, TValue> setter, object target, object value);
    [RequiresUnreferencedCodeAttribute("This API is not trim safe.")]
public static PropertyHelper[] GetVisibleProperties(Type type, ConcurrentDictionary`2<Type, PropertyHelper[]> allPropertiesCache, ConcurrentDictionary`2<Type, PropertyHelper[]> visiblePropertiesCache);
    [RequiresUnreferencedCodeAttribute("This API is not trim safe.")]
public static PropertyHelper[] GetProperties(Type type, ConcurrentDictionary`2<Type, PropertyHelper[]> cache);
    private static bool IsInterestingProperty(PropertyInfo property);
    [CompilerGeneratedAttribute]
internal static void <GetProperties>g__AddInterestingProperties|39_0(List`1<PropertyHelper> propertyHelpers, Type type);
}
