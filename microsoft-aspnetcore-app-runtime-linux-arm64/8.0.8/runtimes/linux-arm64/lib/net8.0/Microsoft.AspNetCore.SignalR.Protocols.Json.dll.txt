internal class Microsoft.AspNetCore.Internal.ReusableUtf8JsonWriter : object {
    [ThreadStaticAttribute]
private static ReusableUtf8JsonWriter _cachedInstance;
    private Utf8JsonWriter _writer;
    public ReusableUtf8JsonWriter(IBufferWriter`1<byte> stream);
    public static ReusableUtf8JsonWriter Get(IBufferWriter`1<byte> stream);
    public static void Return(ReusableUtf8JsonWriter writer);
    public Utf8JsonWriter GetJsonWriter();
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Internal.SystemTextJsonExtensions : object {
    [ExtensionAttribute]
public static bool CheckRead(Utf8JsonReader& reader);
    [ExtensionAttribute]
public static void EnsureObjectStart(Utf8JsonReader& reader);
    [ExtensionAttribute]
public static string GetTokenString(Utf8JsonReader& reader);
    public static string GetTokenString(JsonTokenType tokenType);
    [ExtensionAttribute]
public static void EnsureArrayStart(Utf8JsonReader& reader);
    [ExtensionAttribute]
public static bool ReadAsBoolean(Utf8JsonReader& reader, string propertyName);
    [ExtensionAttribute]
public static string ReadAsString(Utf8JsonReader& reader, string propertyName);
    [ExtensionAttribute]
public static Nullable`1<int> ReadAsInt32(Utf8JsonReader& reader, string propertyName);
    [ExtensionAttribute]
public static Nullable`1<long> ReadAsInt64(Utf8JsonReader& reader, string propertyName);
}
internal static class Microsoft.AspNetCore.Internal.TextMessageFormatter : object {
    public static byte RecordSeparator;
    public static void WriteRecordSeparator(IBufferWriter`1<byte> output);
}
internal static class Microsoft.AspNetCore.Internal.TextMessageParser : object {
    public static bool TryParseMessage(ReadOnlySequence`1& buffer, ReadOnlySequence`1& payload);
    private static bool TryParseMessageMultiSegment(ReadOnlySequence`1& buffer, ReadOnlySequence`1& payload);
}
internal class Microsoft.AspNetCore.Internal.Utf8BufferTextWriter : TextWriter {
    private static UTF8Encoding _utf8NoBom;
    private static int MaximumBytesPerUtf8Char;
    [ThreadStaticAttribute]
private static Utf8BufferTextWriter _cachedInstance;
    private Encoder _encoder;
    private IBufferWriter`1<byte> _bufferWriter;
    private Memory`1<byte> _memory;
    private int _memoryUsed;
    public Encoding Encoding { get; }
    private static Utf8BufferTextWriter();
    public virtual Encoding get_Encoding();
    public static Utf8BufferTextWriter Get(IBufferWriter`1<byte> bufferWriter);
    public static void Return(Utf8BufferTextWriter writer);
    public void SetWriter(IBufferWriter`1<byte> bufferWriter);
    public virtual void Write(Char[] buffer, int index, int count);
    public virtual void Write(Char[] buffer);
    public virtual void Write(char value);
    private void WriteMultiByteChar(char value);
    public virtual void Write(string value);
    private Span`1<byte> GetBuffer();
    private void EnsureBuffer();
    private void WriteInternal(ReadOnlySpan`1<char> buffer);
    public virtual void Flush();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.AspNetCore.SignalR.Internal.Utf8BufferTextReader : TextReader {
    private Decoder _decoder;
    private ReadOnlySequence`1<byte> _utf8Buffer;
    [ThreadStaticAttribute]
private static Utf8BufferTextReader _cachedInstance;
    public static Utf8BufferTextReader Get(ReadOnlySequence`1& utf8Buffer);
    public static void Return(Utf8BufferTextReader reader);
    public void SetBuffer(ReadOnlySequence`1& utf8Buffer);
    public virtual int Read(Char[] buffer, int index, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.SignalR.JsonHubProtocolOptions : object {
    [CompilerGeneratedAttribute]
private JsonSerializerOptions <PayloadSerializerOptions>k__BackingField;
    public JsonSerializerOptions PayloadSerializerOptions { get; public set; }
    [CompilerGeneratedAttribute]
public JsonSerializerOptions get_PayloadSerializerOptions();
    [CompilerGeneratedAttribute]
public void set_PayloadSerializerOptions(JsonSerializerOptions value);
}
public class Microsoft.AspNetCore.SignalR.Protocol.JsonHubProtocol : object {
    private static string ResultPropertyName;
    private static JsonEncodedText ResultPropertyNameBytes;
    private static string ItemPropertyName;
    private static JsonEncodedText ItemPropertyNameBytes;
    private static string InvocationIdPropertyName;
    private static JsonEncodedText InvocationIdPropertyNameBytes;
    private static string StreamIdsPropertyName;
    private static JsonEncodedText StreamIdsPropertyNameBytes;
    private static string TypePropertyName;
    private static JsonEncodedText TypePropertyNameBytes;
    private static string ErrorPropertyName;
    private static JsonEncodedText ErrorPropertyNameBytes;
    private static string AllowReconnectPropertyName;
    private static JsonEncodedText AllowReconnectPropertyNameBytes;
    private static string TargetPropertyName;
    private static JsonEncodedText TargetPropertyNameBytes;
    private static string ArgumentsPropertyName;
    private static JsonEncodedText ArgumentsPropertyNameBytes;
    private static string HeadersPropertyName;
    private static JsonEncodedText HeadersPropertyNameBytes;
    private static string SequenceIdPropertyName;
    private static JsonEncodedText SequenceIdPropertyNameBytes;
    private static string ProtocolName;
    private static int ProtocolVersion;
    private JsonSerializerOptions _payloadSerializerOptions;
    [NullableAttribute("1")]
public string Name { get; }
    public int Version { get; }
    public TransferFormat TransferFormat { get; }
    [NullableContextAttribute("1")]
public JsonHubProtocol(IOptions`1<JsonHubProtocolOptions> options);
    private static JsonHubProtocol();
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    public sealed virtual int get_Version();
    public sealed virtual TransferFormat get_TransferFormat();
    public sealed virtual bool IsVersionSupported(int version);
    public sealed virtual bool TryParseMessage(ReadOnlySequence`1& input, IInvocationBinder binder, HubMessage& message);
    [NullableContextAttribute("1")]
public sealed virtual void WriteMessage(HubMessage message, IBufferWriter`1<byte> output);
    public sealed virtual ReadOnlyMemory`1<byte> GetMessageBytes(HubMessage message);
    private HubMessage ParseMessage(ReadOnlySequence`1<byte> input, IInvocationBinder binder);
    private static Dictionary`2<string, string> ReadHeaders(Utf8JsonReader& reader);
    private void WriteMessageCore(HubMessage message, IBufferWriter`1<byte> stream);
    private static void WriteHeaders(Utf8JsonWriter writer, HubInvocationMessage message);
    private void WriteCompletionMessage(CompletionMessage message, Utf8JsonWriter writer);
    private static void WriteCancelInvocationMessage(CancelInvocationMessage message, Utf8JsonWriter writer);
    private void WriteStreamItemMessage(StreamItemMessage message, Utf8JsonWriter writer);
    private void WriteInvocationMessage(InvocationMessage message, Utf8JsonWriter writer);
    private void WriteStreamInvocationMessage(StreamInvocationMessage message, Utf8JsonWriter writer);
    private static void WriteCloseMessage(CloseMessage message, Utf8JsonWriter writer);
    private static void WriteAckMessage(AckMessage message, Utf8JsonWriter writer);
    private static void WriteSequenceMessage(SequenceMessage message, Utf8JsonWriter writer);
    private void WriteArguments(Object[] arguments, Utf8JsonWriter writer);
    private static void WriteStreamIds(String[] streamIds, Utf8JsonWriter writer);
    private static void WriteInvocationId(HubInvocationMessage message, Utf8JsonWriter writer);
    private static void WriteMessageType(Utf8JsonWriter writer, int type);
    private static HubMessage BindCancelInvocationMessage(string invocationId);
    private static HubMessage BindCompletionMessage(string invocationId, string error, object result, bool hasResult);
    private static HubMessage BindStreamItemMessage(string invocationId, object item, bool hasItem);
    private static HubMessage BindStreamInvocationMessage(string invocationId, string target, Object[] arguments, bool hasArguments, String[] streamIds);
    private static HubMessage BindInvocationMessage(string invocationId, string target, Object[] arguments, bool hasArguments, String[] streamIds);
    private object BindType(Utf8JsonReader& reader, ReadOnlySequence`1<byte> input, Type type);
    private object BindType(Utf8JsonReader& reader, Type type);
    private Object[] BindTypes(Utf8JsonReader& reader, IReadOnlyList`1<Type> paramTypes);
    private static CloseMessage BindCloseMessage(string error, bool allowReconnect);
    private static AckMessage BindAckMessage(Nullable`1<long> sequenceId);
    private static SequenceMessage BindSequenceMessage(Nullable`1<long> sequenceId);
    private static HubMessage ApplyHeaders(HubMessage message, Dictionary`2<string, string> headers);
    internal static JsonSerializerOptions CreateDefaultSerializerSettings();
}
internal static class Microsoft.AspNetCore.SignalR.Protocol.ProtocolHelper : object {
    internal static Type TryGetReturnType(IInvocationBinder binder, string invocationId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.JsonProtocolDependencyInjectionExtensions : object {
    [ExtensionAttribute]
public static TBuilder AddJsonProtocol(TBuilder builder);
    [ExtensionAttribute]
public static TBuilder AddJsonProtocol(TBuilder builder, Action`1<JsonHubProtocolOptions> configure);
}
