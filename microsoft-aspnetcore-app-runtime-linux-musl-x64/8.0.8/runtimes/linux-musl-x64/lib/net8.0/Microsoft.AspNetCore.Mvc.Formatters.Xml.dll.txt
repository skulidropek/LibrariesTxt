[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2 : object {
    private IEnumerable`1<TDeclared> _source;
    private IWrapperProvider _wrapperProvider;
    public DelegatingEnumerable`2(IEnumerable`1<TDeclared> source, IWrapperProvider elementWrapperProvider);
    public sealed virtual IEnumerator`1<TWrapped> GetEnumerator();
    public void Add(object item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2 : object {
    private IEnumerator`1<TDeclared> _inner;
    private IWrapperProvider _wrapperProvider;
    [NullableAttribute("1")]
public TWrapped Current { get; }
    [NullableAttribute("2")]
private object System.Collections.IEnumerator.Current { get; }
    [NullableContextAttribute("1")]
public DelegatingEnumerator`2(IEnumerator`1<TDeclared> inner, IWrapperProvider wrapperProvider);
    [NullableContextAttribute("1")]
public sealed virtual TWrapped get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual void Dispose();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Mvc.Formatters.Xml.EnumerableWrapperProvider : object {
    private IWrapperProvider _wrapperProvider;
    private ConstructorInfo _wrappingTypeConstructor;
    [CompilerGeneratedAttribute]
private Type <WrappingType>k__BackingField;
    public Type WrappingType { get; }
    public EnumerableWrapperProvider(Type sourceEnumerableOfT, IWrapperProvider elementWrapperProvider);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_WrappingType();
    [NullableContextAttribute("2")]
public sealed virtual object Wrap(object original);
}
public class Microsoft.AspNetCore.Mvc.Formatters.Xml.EnumerableWrapperProviderFactory : object {
    private IEnumerable`1<IWrapperProviderFactory> _wrapperProviderFactories;
    [NullableContextAttribute("1")]
public EnumerableWrapperProviderFactory(IEnumerable`1<IWrapperProviderFactory> wrapperProviderFactories);
    [NullableContextAttribute("1")]
public sealed virtual IWrapperProvider GetProvider(WrapperProviderContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Mvc.Formatters.Xml.FormattingUtilities : object {
    public static int DefaultMaxDepth;
    public static XsdDataContractExporter XsdDataContractExporter;
    private static FormattingUtilities();
    public static XmlDictionaryReaderQuotas GetDefaultXmlReaderQuotas();
    public static XmlWriterSettings GetDefaultXmlWriterSettings();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Mvc.Formatters.Xml.IUnwrappable {
    public abstract virtual object Unwrap(Type declaredType);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider {
    public Type WrappingType { get; }
    public abstract virtual Type get_WrappingType();
    [NullableContextAttribute("2")]
public abstract virtual object Wrap(object original);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory {
    public abstract virtual IWrapperProvider GetProvider(WrapperProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions : object {
    private IReadOnlyList`1<ICompatibilitySwitch> _switches;
    private sealed virtual override IEnumerator`1<ICompatibilitySwitch> System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Infrastructure.ICompatibilitySwitch>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[XmlRootAttribute("problem")]
public class Microsoft.AspNetCore.Mvc.Formatters.Xml.ProblemDetailsWrapper : object {
    internal static string Namespace;
    protected static string EmptyKey;
    [CompilerGeneratedAttribute]
private ProblemDetails <ProblemDetails>k__BackingField;
    internal ProblemDetails ProblemDetails { get; }
    public ProblemDetailsWrapper(ProblemDetails problemDetails);
    private static ProblemDetailsWrapper();
    [CompilerGeneratedAttribute]
internal ProblemDetails get_ProblemDetails();
    [NullableContextAttribute("2")]
public sealed virtual XmlSchema GetSchema();
    public virtual void ReadXml(XmlReader reader);
    protected virtual void ReadValue(XmlReader reader, string name);
    public virtual void WriteXml(XmlWriter writer);
    private sealed virtual override object Microsoft.AspNetCore.Mvc.Formatters.Xml.IUnwrappable.Unwrap(Type declaredType);
}
internal class Microsoft.AspNetCore.Mvc.Formatters.Xml.ProblemDetailsWrapperProviderFactory : object {
    [NullableContextAttribute("1")]
public sealed virtual IWrapperProvider GetProvider(WrapperProviderContext context);
}
internal static class Microsoft.AspNetCore.Mvc.Formatters.Xml.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string EnumerableWrapperProvider_InvalidSourceEnumerableOfT { get; }
    internal static string ErrorDeserializingInputData { get; }
    internal static string RequiredProperty_MustHaveDataMemberRequired { get; }
    internal static string WrapperProvider_MismatchType { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_EnumerableWrapperProvider_InvalidSourceEnumerableOfT();
    internal static string FormatEnumerableWrapperProvider_InvalidSourceEnumerableOfT(object p0);
    internal static string get_ErrorDeserializingInputData();
    internal static string get_RequiredProperty_MustHaveDataMemberRequired();
    internal static string FormatRequiredProperty_MustHaveDataMemberRequired(object p0, object p1, object p2, object p3, object p4, object p5, object p6);
    internal static string get_WrapperProvider_MismatchType();
    internal static string FormatWrapperProvider_MismatchType(object p0, object p1);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[XmlRootAttribute("Error")]
public class Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapper : object {
    internal static string EmptyKey;
    [CompilerGeneratedAttribute]
private SerializableError <SerializableError>k__BackingField;
    public SerializableError SerializableError { get; }
    public SerializableErrorWrapper(SerializableError error);
    [CompilerGeneratedAttribute]
public SerializableError get_SerializableError();
    [NullableContextAttribute("2")]
public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
    public sealed virtual object Unwrap(Type declaredType);
}
public class Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapperProvider : object {
    [NullableAttribute("1")]
public Type WrappingType { get; }
    [NullableContextAttribute("1")]
public sealed virtual Type get_WrappingType();
    [NullableContextAttribute("2")]
public sealed virtual object Wrap(object original);
}
public class Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapperProviderFactory : object {
    [NullableContextAttribute("1")]
public sealed virtual IWrapperProvider GetProvider(WrapperProviderContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[XmlRootAttribute("problem")]
public class Microsoft.AspNetCore.Mvc.Formatters.Xml.ValidationProblemDetailsWrapper : ProblemDetailsWrapper {
    private static string ErrorKey;
    [CompilerGeneratedAttribute]
private ValidationProblemDetails <ProblemDetails>k__BackingField;
    internal ValidationProblemDetails ProblemDetails { get; }
    public ValidationProblemDetailsWrapper(ValidationProblemDetails problemDetails);
    [CompilerGeneratedAttribute]
internal ValidationProblemDetails get_ProblemDetails();
    protected virtual void ReadValue(XmlReader reader, string name);
    private void ReadErrorProperty(XmlReader reader);
    public virtual void WriteXml(XmlWriter writer);
    private sealed virtual override object Microsoft.AspNetCore.Mvc.Formatters.Xml.IUnwrappable.Unwrap(Type declaredType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext : object {
    [CompilerGeneratedAttribute]
private Type <DeclaredType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSerialization>k__BackingField;
    public Type DeclaredType { get; }
    public bool IsSerialization { get; }
    public WrapperProviderContext(Type declaredType, bool isSerialization);
    [CompilerGeneratedAttribute]
public Type get_DeclaredType();
    [CompilerGeneratedAttribute]
public bool get_IsSerialization();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderFactoriesExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IWrapperProvider GetWrapperProvider(IEnumerable`1<IWrapperProviderFactory> wrapperProviderFactories, WrapperProviderContext wrapperProviderContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter : TextInputFormatter {
    private static int DefaultMemoryThreshold;
    private ConcurrentDictionary`2<Type, object> _serializerCache;
    private XmlDictionaryReaderQuotas _readerQuotas;
    private MvcOptions _options;
    private DataContractSerializerSettings _serializerSettings;
    [CompilerGeneratedAttribute]
private IList`1<IWrapperProviderFactory> <WrapperProviderFactories>k__BackingField;
    public IList`1<IWrapperProviderFactory> WrapperProviderFactories { get; }
    public int MaxDepth { get; public set; }
    public XmlDictionaryReaderQuotas XmlDictionaryReaderQuotas { get; }
    public DataContractSerializerSettings SerializerSettings { get; public set; }
    public InputFormatterExceptionPolicy ExceptionPolicy { get; }
    public XmlDataContractSerializerInputFormatter(MvcOptions options);
    [CompilerGeneratedAttribute]
public IList`1<IWrapperProviderFactory> get_WrapperProviderFactories();
    public int get_MaxDepth();
    public void set_MaxDepth(int value);
    public XmlDictionaryReaderQuotas get_XmlDictionaryReaderQuotas();
    public DataContractSerializerSettings get_SerializerSettings();
    public void set_SerializerSettings(DataContractSerializerSettings value);
    public virtual InputFormatterExceptionPolicy get_ExceptionPolicy();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter/<ReadRequestBodyAsync>d__19")]
public virtual Task`1<InputFormatterResult> ReadRequestBodyAsync(InputFormatterContext context, Encoding encoding);
    protected virtual bool CanReadType(Type type);
    protected virtual XmlReader CreateXmlReader(Stream readStream, Encoding encoding);
    protected virtual Type GetSerializableType(Type declaredType);
    protected virtual DataContractSerializer CreateSerializer(Type type);
    protected virtual DataContractSerializer GetCachedSerializer(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter : TextOutputFormatter {
    private ConcurrentDictionary`2<Type, object> _serializerCache;
    private ILogger _logger;
    private DataContractSerializerSettings _serializerSettings;
    private MvcOptions _mvcOptions;
    private AsyncEnumerableReader _asyncEnumerableReaderFactory;
    [CompilerGeneratedAttribute]
private IList`1<IWrapperProviderFactory> <WrapperProviderFactories>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlWriterSettings <WriterSettings>k__BackingField;
    public IList`1<IWrapperProviderFactory> WrapperProviderFactories { get; }
    public XmlWriterSettings WriterSettings { get; }
    public DataContractSerializerSettings SerializerSettings { get; public set; }
    public XmlDataContractSerializerOutputFormatter(ILoggerFactory loggerFactory);
    public XmlDataContractSerializerOutputFormatter(XmlWriterSettings writerSettings);
    public XmlDataContractSerializerOutputFormatter(XmlWriterSettings writerSettings, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
public IList`1<IWrapperProviderFactory> get_WrapperProviderFactories();
    [CompilerGeneratedAttribute]
public XmlWriterSettings get_WriterSettings();
    public DataContractSerializerSettings get_SerializerSettings();
    public void set_SerializerSettings(DataContractSerializerSettings value);
    protected virtual Type GetSerializableType(Type type);
    [NullableContextAttribute("2")]
protected virtual bool CanWriteType(Type type);
    protected virtual DataContractSerializer CreateSerializer(Type type);
    public virtual XmlWriter CreateXmlWriter(TextWriter writer, XmlWriterSettings xmlWriterSettings);
    public virtual XmlWriter CreateXmlWriter(OutputFormatterWriteContext context, TextWriter writer, XmlWriterSettings xmlWriterSettings);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter/<WriteResponseBodyAsync>d__23")]
public virtual Task WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding);
    protected virtual DataContractSerializer GetCachedSerializer(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter : TextInputFormatter {
    private static int DefaultMemoryThreshold;
    private ConcurrentDictionary`2<Type, object> _serializerCache;
    private XmlDictionaryReaderQuotas _readerQuotas;
    private MvcOptions _options;
    [CompilerGeneratedAttribute]
private IList`1<IWrapperProviderFactory> <WrapperProviderFactories>k__BackingField;
    public IList`1<IWrapperProviderFactory> WrapperProviderFactories { get; }
    public int MaxDepth { get; public set; }
    public XmlDictionaryReaderQuotas XmlDictionaryReaderQuotas { get; }
    public InputFormatterExceptionPolicy ExceptionPolicy { get; }
    public XmlSerializerInputFormatter(MvcOptions options);
    [CompilerGeneratedAttribute]
public IList`1<IWrapperProviderFactory> get_WrapperProviderFactories();
    public int get_MaxDepth();
    public void set_MaxDepth(int value);
    public XmlDictionaryReaderQuotas get_XmlDictionaryReaderQuotas();
    public virtual InputFormatterExceptionPolicy get_ExceptionPolicy();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter/<ReadRequestBodyAsync>d__15")]
public virtual Task`1<InputFormatterResult> ReadRequestBodyAsync(InputFormatterContext context, Encoding encoding);
    protected virtual bool CanReadType(Type type);
    protected virtual Type GetSerializableType(Type declaredType);
    protected virtual XmlReader CreateXmlReader(Stream readStream, Encoding encoding, Type type);
    protected virtual XmlReader CreateXmlReader(Stream readStream, Encoding encoding);
    protected virtual XmlSerializer CreateSerializer(Type type);
    protected virtual XmlSerializer GetCachedSerializer(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter : TextOutputFormatter {
    private ConcurrentDictionary`2<Type, object> _serializerCache;
    private ILogger _logger;
    private MvcOptions _mvcOptions;
    private AsyncEnumerableReader _asyncEnumerableReaderFactory;
    [CompilerGeneratedAttribute]
private IList`1<IWrapperProviderFactory> <WrapperProviderFactories>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlWriterSettings <WriterSettings>k__BackingField;
    public IList`1<IWrapperProviderFactory> WrapperProviderFactories { get; }
    public XmlWriterSettings WriterSettings { get; }
    public XmlSerializerOutputFormatter(ILoggerFactory loggerFactory);
    public XmlSerializerOutputFormatter(XmlWriterSettings writerSettings);
    public XmlSerializerOutputFormatter(XmlWriterSettings writerSettings, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
public IList`1<IWrapperProviderFactory> get_WrapperProviderFactories();
    [CompilerGeneratedAttribute]
public XmlWriterSettings get_WriterSettings();
    protected virtual Type GetSerializableType(Type type);
    [NullableContextAttribute("2")]
protected virtual bool CanWriteType(Type type);
    protected virtual XmlSerializer CreateSerializer(Type type);
    public virtual XmlWriter CreateXmlWriter(TextWriter writer, XmlWriterSettings xmlWriterSettings);
    public virtual XmlWriter CreateXmlWriter(OutputFormatterWriteContext context, TextWriter writer, XmlWriterSettings xmlWriterSettings);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter/<WriteResponseBodyAsync>d__19")]
public virtual Task WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding);
    protected virtual void Serialize(XmlSerializer xmlSerializer, XmlWriter xmlWriter, object value);
    protected virtual XmlSerializer GetCachedSerializer(Type type);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DataMemberRequiredBindingMetadataProvider : object {
    [NullableContextAttribute("1")]
public sealed virtual void CreateBindingMetadata(BindingMetadataProviderContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions : object {
    [ExtensionAttribute]
public static IMvcBuilder AddXmlOptions(IMvcBuilder builder, Action`1<MvcXmlOptions> setupAction);
    [ExtensionAttribute]
public static IMvcBuilder AddXmlDataContractSerializerFormatters(IMvcBuilder builder);
    [ExtensionAttribute]
public static IMvcBuilder AddXmlDataContractSerializerFormatters(IMvcBuilder builder, Action`1<MvcXmlOptions> setupAction);
    [ExtensionAttribute]
public static IMvcBuilder AddXmlSerializerFormatters(IMvcBuilder builder);
    [ExtensionAttribute]
public static IMvcBuilder AddXmlSerializerFormatters(IMvcBuilder builder, Action`1<MvcXmlOptions> setupAction);
    internal static void AddXmlDataContractSerializerFormatterServices(IServiceCollection services);
    internal static void AddXmlSerializerFormatterServices(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions : object {
    [ExtensionAttribute]
public static IMvcCoreBuilder AddXmlOptions(IMvcCoreBuilder builder, Action`1<MvcXmlOptions> setupAction);
    [ExtensionAttribute]
public static IMvcCoreBuilder AddXmlDataContractSerializerFormatters(IMvcCoreBuilder builder);
    [ExtensionAttribute]
public static IMvcCoreBuilder AddXmlDataContractSerializerFormatters(IMvcCoreBuilder builder, Action`1<MvcXmlOptions> setupAction);
    [ExtensionAttribute]
public static IMvcCoreBuilder AddXmlSerializerFormatters(IMvcCoreBuilder builder);
    [ExtensionAttribute]
public static IMvcCoreBuilder AddXmlSerializerFormatters(IMvcCoreBuilder builder, Action`1<MvcXmlOptions> setupAction);
    internal static void AddXmlDataContractSerializerFormatterServices(IServiceCollection services);
    internal static void AddXmlSerializerFormatterServices(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.XmlDataContractSerializerMvcOptionsSetup : object {
    private ILoggerFactory _loggerFactory;
    public XmlDataContractSerializerMvcOptionsSetup(ILoggerFactory loggerFactory);
    public sealed virtual void Configure(MvcOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.XmlSerializerMvcOptionsSetup : object {
    private ILoggerFactory _loggerFactory;
    public XmlSerializerMvcOptionsSetup(ILoggerFactory loggerFactory);
    public sealed virtual void Configure(MvcOptions options);
}
