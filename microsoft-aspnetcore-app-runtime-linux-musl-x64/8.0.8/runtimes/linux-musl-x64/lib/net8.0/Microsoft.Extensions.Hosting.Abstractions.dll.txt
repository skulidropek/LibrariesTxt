internal static class FxResources.Microsoft.Extensions.Hosting.Abstractions.SR : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionHostedServiceExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddHostedService(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddHostedService(IServiceCollection services, Func`2<IServiceProvider, THostedService> implementationFactory);
}
public abstract class Microsoft.Extensions.Hosting.BackgroundService : object {
    private Task _executeTask;
    private CancellationTokenSource _stoppingCts;
    [NullableAttribute("2")]
public Task ExecuteTask { get; }
    [NullableContextAttribute("2")]
public virtual Task get_ExecuteTask();
    [NullableContextAttribute("1")]
protected abstract virtual Task ExecuteAsync(CancellationToken stoppingToken);
    [NullableContextAttribute("1")]
public virtual Task StartAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.BackgroundService/<StopAsync>d__6")]
public virtual Task StopAsync(CancellationToken cancellationToken);
    public virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("EnvironmentName has been deprecated. Use Microsoft.Extensions.Hosting.Environments instead.")]
public static class Microsoft.Extensions.Hosting.EnvironmentName : object {
    public static string Development;
    public static string Staging;
    public static string Production;
    private static EnvironmentName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Extensions.Hosting.Environments : object {
    public static string Development;
    public static string Staging;
    public static string Production;
    private static Environments();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Hosting.HostAbortedException : Exception {
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
private HostAbortedException(SerializationInfo info, StreamingContext context);
    public HostAbortedException(string message);
    public HostAbortedException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Hosting.HostBuilderContext : object {
    [CompilerGeneratedAttribute]
private IHostEnvironment <HostingEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <Properties>k__BackingField;
    public IHostEnvironment HostingEnvironment { get; public set; }
    public IConfiguration Configuration { get; public set; }
    public IDictionary`2<object, object> Properties { get; }
    public HostBuilderContext(IDictionary`2<object, object> properties);
    [CompilerGeneratedAttribute]
public IHostEnvironment get_HostingEnvironment();
    [CompilerGeneratedAttribute]
public void set_HostingEnvironment(IHostEnvironment value);
    [CompilerGeneratedAttribute]
public IConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(IConfiguration value);
    [CompilerGeneratedAttribute]
public IDictionary`2<object, object> get_Properties();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Extensions.Hosting.HostDefaults : object {
    public static string ApplicationKey;
    public static string EnvironmentKey;
    public static string ContentRootKey;
    private static HostDefaults();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.HostEnvironmentEnvExtensions : object {
    [ExtensionAttribute]
public static bool IsDevelopment(IHostEnvironment hostEnvironment);
    [ExtensionAttribute]
public static bool IsStaging(IHostEnvironment hostEnvironment);
    [ExtensionAttribute]
public static bool IsProduction(IHostEnvironment hostEnvironment);
    [ExtensionAttribute]
public static bool IsEnvironment(IHostEnvironment hostEnvironment, string environmentName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.HostingAbstractionsHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IHost Start(IHostBuilder hostBuilder);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.HostingAbstractionsHostBuilderExtensions/<StartAsync>d__1")]
[ExtensionAttribute]
public static Task`1<IHost> StartAsync(IHostBuilder hostBuilder, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions : object {
    [ExtensionAttribute]
public static void Start(IHost host);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions/<StopAsync>d__1")]
[ExtensionAttribute]
public static Task StopAsync(IHost host, TimeSpan timeout);
    [ExtensionAttribute]
public static void WaitForShutdown(IHost host);
    [ExtensionAttribute]
public static void Run(IHost host);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions/<RunAsync>d__4")]
[ExtensionAttribute]
public static Task RunAsync(IHost host, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions/<WaitForShutdownAsync>d__5")]
[ExtensionAttribute]
public static Task WaitForShutdownAsync(IHost host, CancellationToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.HostingEnvironmentExtensions : object {
    [ExtensionAttribute]
public static bool IsDevelopment(IHostingEnvironment hostingEnvironment);
    [ExtensionAttribute]
public static bool IsStaging(IHostingEnvironment hostingEnvironment);
    [ExtensionAttribute]
public static bool IsProduction(IHostingEnvironment hostingEnvironment);
    [ExtensionAttribute]
public static bool IsEnvironment(IHostingEnvironment hostingEnvironment, string environmentName);
}
[ObsoleteAttribute("IApplicationLifetime has been deprecated. Use Microsoft.Extensions.Hosting.IHostApplicationLifetime instead.")]
public interface Microsoft.Extensions.Hosting.IApplicationLifetime {
    public CancellationToken ApplicationStarted { get; }
    public CancellationToken ApplicationStopping { get; }
    public CancellationToken ApplicationStopped { get; }
    public abstract virtual CancellationToken get_ApplicationStarted();
    public abstract virtual CancellationToken get_ApplicationStopping();
    public abstract virtual CancellationToken get_ApplicationStopped();
    public abstract virtual void StopApplication();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Hosting.IHost {
    public IServiceProvider Services { get; }
    public abstract virtual IServiceProvider get_Services();
    public abstract virtual Task StartAsync(CancellationToken cancellationToken);
    public abstract virtual Task StopAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Hosting.IHostApplicationBuilder {
    public IDictionary`2<object, object> Properties { get; }
    public IConfigurationManager Configuration { get; }
    public IHostEnvironment Environment { get; }
    public ILoggingBuilder Logging { get; }
    public IMetricsBuilder Metrics { get; }
    public IServiceCollection Services { get; }
    public abstract virtual IDictionary`2<object, object> get_Properties();
    public abstract virtual IConfigurationManager get_Configuration();
    public abstract virtual IHostEnvironment get_Environment();
    public abstract virtual ILoggingBuilder get_Logging();
    public abstract virtual IMetricsBuilder get_Metrics();
    public abstract virtual IServiceCollection get_Services();
    public abstract virtual void ConfigureContainer(IServiceProviderFactory`1<TContainerBuilder> factory, Action`1<TContainerBuilder> configure);
}
public interface Microsoft.Extensions.Hosting.IHostApplicationLifetime {
    public CancellationToken ApplicationStarted { get; }
    public CancellationToken ApplicationStopping { get; }
    public CancellationToken ApplicationStopped { get; }
    public abstract virtual CancellationToken get_ApplicationStarted();
    public abstract virtual CancellationToken get_ApplicationStopping();
    public abstract virtual CancellationToken get_ApplicationStopped();
    public abstract virtual void StopApplication();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Hosting.IHostBuilder {
    public IDictionary`2<object, object> Properties { get; }
    public abstract virtual IDictionary`2<object, object> get_Properties();
    public abstract virtual IHostBuilder ConfigureHostConfiguration(Action`1<IConfigurationBuilder> configureDelegate);
    public abstract virtual IHostBuilder ConfigureAppConfiguration(Action`2<HostBuilderContext, IConfigurationBuilder> configureDelegate);
    public abstract virtual IHostBuilder ConfigureServices(Action`2<HostBuilderContext, IServiceCollection> configureDelegate);
    public abstract virtual IHostBuilder UseServiceProviderFactory(IServiceProviderFactory`1<TContainerBuilder> factory);
    public abstract virtual IHostBuilder UseServiceProviderFactory(Func`2<HostBuilderContext, IServiceProviderFactory`1<TContainerBuilder>> factory);
    public abstract virtual IHostBuilder ConfigureContainer(Action`2<HostBuilderContext, TContainerBuilder> configureDelegate);
    public abstract virtual IHost Build();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Hosting.IHostedLifecycleService {
    public abstract virtual Task StartingAsync(CancellationToken cancellationToken);
    public abstract virtual Task StartedAsync(CancellationToken cancellationToken);
    public abstract virtual Task StoppingAsync(CancellationToken cancellationToken);
    public abstract virtual Task StoppedAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Hosting.IHostedService {
    public abstract virtual Task StartAsync(CancellationToken cancellationToken);
    public abstract virtual Task StopAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Hosting.IHostEnvironment {
    public string EnvironmentName { get; public set; }
    public string ApplicationName { get; public set; }
    public string ContentRootPath { get; public set; }
    public IFileProvider ContentRootFileProvider { get; public set; }
    public abstract virtual string get_EnvironmentName();
    public abstract virtual void set_EnvironmentName(string value);
    public abstract virtual string get_ApplicationName();
    public abstract virtual void set_ApplicationName(string value);
    public abstract virtual string get_ContentRootPath();
    public abstract virtual void set_ContentRootPath(string value);
    public abstract virtual IFileProvider get_ContentRootFileProvider();
    public abstract virtual void set_ContentRootFileProvider(IFileProvider value);
}
[NullableContextAttribute("1")]
[ObsoleteAttribute("IHostingEnvironment has been deprecated. Use Microsoft.Extensions.Hosting.IHostEnvironment instead.")]
public interface Microsoft.Extensions.Hosting.IHostingEnvironment {
    public string EnvironmentName { get; public set; }
    public string ApplicationName { get; public set; }
    public string ContentRootPath { get; public set; }
    public IFileProvider ContentRootFileProvider { get; public set; }
    public abstract virtual string get_EnvironmentName();
    public abstract virtual void set_EnvironmentName(string value);
    public abstract virtual string get_ApplicationName();
    public abstract virtual void set_ApplicationName(string value);
    public abstract virtual string get_ContentRootPath();
    public abstract virtual void set_ContentRootPath(string value);
    public abstract virtual IFileProvider get_ContentRootFileProvider();
    public abstract virtual void set_ContentRootFileProvider(IFileProvider value);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Hosting.IHostLifetime {
    public abstract virtual Task WaitForStartAsync(CancellationToken cancellationToken);
    public abstract virtual Task StopAsync(CancellationToken cancellationToken);
}
internal static class System.Obsoletions : object {
    internal static string SharedUrlFormat;
    internal static string SystemTextEncodingUTF7Message;
    internal static string SystemTextEncodingUTF7DiagId;
    internal static string PrincipalPermissionAttributeMessage;
    internal static string PrincipalPermissionAttributeDiagId;
    internal static string CodeAccessSecurityMessage;
    internal static string CodeAccessSecurityDiagId;
    internal static string ConstrainedExecutionRegionMessage;
    internal static string ConstrainedExecutionRegionDiagId;
    internal static string GlobalAssemblyCacheMessage;
    internal static string GlobalAssemblyCacheDiagId;
    internal static string ThreadAbortMessage;
    internal static string ThreadResetAbortMessage;
    internal static string ThreadAbortDiagId;
    internal static string DefaultCryptoAlgorithmsMessage;
    internal static string DefaultCryptoAlgorithmsDiagId;
    internal static string CreatePdbGeneratorMessage;
    internal static string CreatePdbGeneratorDiagId;
    internal static string AuthenticationManagerMessage;
    internal static string AuthenticationManagerDiagId;
    internal static string RemotingApisMessage;
    internal static string RemotingApisDiagId;
    internal static string BinaryFormatterMessage;
    internal static string BinaryFormatterDiagId;
    internal static string CodeBaseMessage;
    internal static string CodeBaseDiagId;
    internal static string EscapeUriStringMessage;
    internal static string EscapeUriStringDiagId;
    internal static string WebRequestMessage;
    internal static string WebRequestDiagId;
    internal static string DisablePrivateReflectionAttributeMessage;
    internal static string DisablePrivateReflectionAttributeDiagId;
    internal static string GetContextInfoMessage;
    internal static string GetContextInfoDiagId;
    internal static string StrongNameKeyPairMessage;
    internal static string StrongNameKeyPairDiagId;
    internal static string ReflectionOnlyLoadingMessage;
    internal static string ReflectionOnlyLoadingDiagId;
    internal static string RuntimeEnvironmentMessage;
    internal static string RuntimeEnvironmentDiagId;
    internal static string JsonSerializerOptionsIgnoreNullValuesMessage;
    internal static string JsonSerializerOptionsIgnoreNullValuesDiagId;
    internal static string DerivedCryptographicTypesMessage;
    internal static string DerivedCryptographicTypesDiagId;
    internal static string RijndaelMessage;
    internal static string RijndaelDiagId;
    internal static string RNGCryptoServiceProviderMessage;
    internal static string RNGCryptoServiceProviderDiagId;
    internal static string AppDomainCreateUnloadMessage;
    internal static string AppDomainCreateUnloadDiagId;
    internal static string SuppressIldasmAttributeMessage;
    internal static string SuppressIldasmAttributeDiagId;
    internal static string X509CertificateImmutableMessage;
    internal static string X509CertificateImmutableDiagId;
    internal static string PublicKeyPropertyMessage;
    internal static string PublicKeyPropertyDiagId;
    internal static string X509CertificatePrivateKeyMessage;
    internal static string X509CertificatePrivateKeyDiagId;
    internal static string ProduceLegacyHmacValuesMessage;
    internal static string ProduceLegacyHmacValuesDiagId;
    internal static string UseManagedSha1Message;
    internal static string UseManagedSha1DiagId;
    internal static string CryptoConfigEncodeOIDMessage;
    internal static string CryptoConfigEncodeOIDDiagId;
    internal static string CorruptedStateRecoveryMessage;
    internal static string CorruptedStateRecoveryDiagId;
    internal static string Rfc2898CryptDeriveKeyMessage;
    internal static string Rfc2898CryptDeriveKeyDiagId;
    internal static string CmsSignerCspParamsCtorMessage;
    internal static string CmsSignerCspParamsCtorDiagId;
    internal static string SignerInfoCounterSigMessage;
    internal static string SignerInfoCounterSigDiagId;
    internal static string RegexCompileToAssemblyMessage;
    internal static string RegexCompileToAssemblyDiagId;
    internal static string AssemblyNameMembersMessage;
    internal static string AssemblyNameMembersDiagId;
    internal static string SystemDataSerializationFormatBinaryMessage;
    internal static string SystemDataSerializationFormatBinaryDiagId;
    internal static string TlsVersion10and11Message;
    internal static string TlsVersion10and11DiagId;
    internal static string EncryptionPolicyMessage;
    internal static string EncryptionPolicyDiagId;
    internal static string Rfc2898OutdatedCtorMessage;
    internal static string Rfc2898OutdatedCtorDiagId;
    internal static string EccXmlExportImportMessage;
    internal static string EccXmlExportImportDiagId;
    internal static string EcDhPublicKeyBlobMessage;
    internal static string EcDhPublicKeyBlobDiagId;
    internal static string AssemblyNameCodeBaseMessage;
    internal static string AssemblyNameCodeBaseDiagId;
    internal static string CryptoStringFactoryMessage;
    internal static string CryptoStringFactoryDiagId;
    internal static string ControlledExecutionRunMessage;
    internal static string ControlledExecutionRunDiagId;
    internal static string XmlSecureResolverMessage;
    internal static string XmlSecureResolverDiagId;
    internal static string RsaEncryptDecryptValueMessage;
    internal static string RsaEncryptDecryptDiagId;
    internal static string JsonSerializerOptionsAddContextMessage;
    internal static string JsonSerializerOptionsAddContextDiagId;
    internal static string LegacyFormatterMessage;
    internal static string LegacyFormatterDiagId;
    internal static string LegacyFormatterImplMessage;
    internal static string LegacyFormatterImplDiagId;
    internal static string RegexExtensibilityImplMessage;
    internal static string RegexExtensibilityDiagId;
    internal static string AesGcmTagConstructorMessage;
    internal static string AesGcmTagConstructorDiagId;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string HostAbortedExceptionMessage { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_HostAbortedExceptionMessage();
}
internal static class System.ThrowHelper : object {
    internal static void ThrowIfNull(object argument, string paramName);
    [DoesNotReturnAttribute]
private static void Throw(string paramName);
    public static string IfNullOrWhitespace(string argument, string paramName);
}
