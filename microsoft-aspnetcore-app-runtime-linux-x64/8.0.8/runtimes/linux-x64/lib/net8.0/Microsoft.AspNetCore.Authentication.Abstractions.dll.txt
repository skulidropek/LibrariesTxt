internal static class Microsoft.AspNetCore.Authentication.Abstractions.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string Exception_UnableToFindServices { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_Exception_UnableToFindServices();
    internal static string FormatException_UnableToFindServices(object p0, object p1, object p2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authentication.AuthenticateResult : object {
    private static AuthenticateResult _noResult;
    [CompilerGeneratedAttribute]
private AuthenticationTicket <Ticket>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationProperties <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Failure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <None>k__BackingField;
    [MemberNotNullWhenAttribute("True", "Mono.Cecil.CustomAttributeArgument[]")]
public bool Succeeded { get; }
    public AuthenticationTicket Ticket { get; protected set; }
    public ClaimsPrincipal Principal { get; }
    public AuthenticationProperties Properties { get; protected set; }
    public Exception Failure { get; protected set; }
    public bool None { get; protected set; }
    private static AuthenticateResult();
    [MemberNotNullWhenAttribute("True", "Mono.Cecil.CustomAttributeArgument[]")]
public bool get_Succeeded();
    [CompilerGeneratedAttribute]
public AuthenticationTicket get_Ticket();
    [CompilerGeneratedAttribute]
protected void set_Ticket(AuthenticationTicket value);
    public ClaimsPrincipal get_Principal();
    [CompilerGeneratedAttribute]
public AuthenticationProperties get_Properties();
    [CompilerGeneratedAttribute]
protected void set_Properties(AuthenticationProperties value);
    [CompilerGeneratedAttribute]
public Exception get_Failure();
    [CompilerGeneratedAttribute]
protected void set_Failure(Exception value);
    [CompilerGeneratedAttribute]
public bool get_None();
    [CompilerGeneratedAttribute]
protected void set_None(bool value);
    [NullableContextAttribute("1")]
public AuthenticateResult Clone();
    [NullableContextAttribute("1")]
public static AuthenticateResult Success(AuthenticationTicket ticket);
    [NullableContextAttribute("1")]
public static AuthenticateResult NoResult();
    [NullableContextAttribute("1")]
public static AuthenticateResult Fail(Exception failure);
    [NullableContextAttribute("1")]
public static AuthenticateResult Fail(Exception failure, AuthenticationProperties properties);
    [NullableContextAttribute("1")]
public static AuthenticateResult Fail(string failureMessage);
    [NullableContextAttribute("1")]
public static AuthenticateResult Fail(string failureMessage, AuthenticationProperties properties);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authentication.AuthenticationFailureException : Exception {
    public AuthenticationFailureException(string message);
    public AuthenticationFailureException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions : object {
    [ExtensionAttribute]
public static Task`1<AuthenticateResult> AuthenticateAsync(HttpContext context);
    [ExtensionAttribute]
public static Task`1<AuthenticateResult> AuthenticateAsync(HttpContext context, string scheme);
    [ExtensionAttribute]
public static Task ChallengeAsync(HttpContext context, string scheme);
    [ExtensionAttribute]
public static Task ChallengeAsync(HttpContext context);
    [ExtensionAttribute]
public static Task ChallengeAsync(HttpContext context, AuthenticationProperties properties);
    [ExtensionAttribute]
public static Task ChallengeAsync(HttpContext context, string scheme, AuthenticationProperties properties);
    [ExtensionAttribute]
public static Task ForbidAsync(HttpContext context, string scheme);
    [ExtensionAttribute]
public static Task ForbidAsync(HttpContext context);
    [ExtensionAttribute]
public static Task ForbidAsync(HttpContext context, AuthenticationProperties properties);
    [ExtensionAttribute]
public static Task ForbidAsync(HttpContext context, string scheme, AuthenticationProperties properties);
    [ExtensionAttribute]
public static Task SignInAsync(HttpContext context, string scheme, ClaimsPrincipal principal);
    [ExtensionAttribute]
public static Task SignInAsync(HttpContext context, ClaimsPrincipal principal);
    [ExtensionAttribute]
public static Task SignInAsync(HttpContext context, ClaimsPrincipal principal, AuthenticationProperties properties);
    [ExtensionAttribute]
public static Task SignInAsync(HttpContext context, string scheme, ClaimsPrincipal principal, AuthenticationProperties properties);
    [ExtensionAttribute]
public static Task SignOutAsync(HttpContext context);
    [ExtensionAttribute]
public static Task SignOutAsync(HttpContext context, AuthenticationProperties properties);
    [ExtensionAttribute]
public static Task SignOutAsync(HttpContext context, string scheme);
    [ExtensionAttribute]
public static Task SignOutAsync(HttpContext context, string scheme, AuthenticationProperties properties);
    [ExtensionAttribute]
public static Task`1<string> GetTokenAsync(HttpContext context, string scheme, string tokenName);
    [ExtensionAttribute]
public static Task`1<string> GetTokenAsync(HttpContext context, string tokenName);
    private static IAuthenticationService GetAuthenticationService(HttpContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authentication.AuthenticationOptions : object {
    private IList`1<AuthenticationSchemeBuilder> _schemes;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, AuthenticationSchemeBuilder> <SchemeMap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultAuthenticateScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultSignInScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultSignOutScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultChallengeScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultForbidScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireAuthenticatedSignIn>k__BackingField;
    private Nullable`1<bool> _disableAutoDefaultScheme;
    [NullableAttribute("1")]
public IEnumerable`1<AuthenticationSchemeBuilder> Schemes { get; }
    [NullableAttribute("1")]
public IDictionary`2<string, AuthenticationSchemeBuilder> SchemeMap { get; }
    public string DefaultScheme { get; public set; }
    public string DefaultAuthenticateScheme { get; public set; }
    public string DefaultSignInScheme { get; public set; }
    public string DefaultSignOutScheme { get; public set; }
    public string DefaultChallengeScheme { get; public set; }
    public string DefaultForbidScheme { get; public set; }
    public bool RequireAuthenticatedSignIn { get; public set; }
    internal bool DisableAutoDefaultScheme { get; internal set; }
    [NullableContextAttribute("1")]
public IEnumerable`1<AuthenticationSchemeBuilder> get_Schemes();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IDictionary`2<string, AuthenticationSchemeBuilder> get_SchemeMap();
    [NullableContextAttribute("1")]
public void AddScheme(string name, Action`1<AuthenticationSchemeBuilder> configureBuilder);
    [NullableContextAttribute("1")]
public void AddScheme(string name, string displayName);
    [CompilerGeneratedAttribute]
public string get_DefaultScheme();
    [CompilerGeneratedAttribute]
public void set_DefaultScheme(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultAuthenticateScheme();
    [CompilerGeneratedAttribute]
public void set_DefaultAuthenticateScheme(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultSignInScheme();
    [CompilerGeneratedAttribute]
public void set_DefaultSignInScheme(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultSignOutScheme();
    [CompilerGeneratedAttribute]
public void set_DefaultSignOutScheme(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultChallengeScheme();
    [CompilerGeneratedAttribute]
public void set_DefaultChallengeScheme(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultForbidScheme();
    [CompilerGeneratedAttribute]
public void set_DefaultForbidScheme(string value);
    [CompilerGeneratedAttribute]
public bool get_RequireAuthenticatedSignIn();
    [CompilerGeneratedAttribute]
public void set_RequireAuthenticatedSignIn(bool value);
    internal bool get_DisableAutoDefaultScheme();
    internal void set_DisableAutoDefaultScheme(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authentication.AuthenticationProperties : object {
    internal static string IssuedUtcKey;
    internal static string ExpiresUtcKey;
    internal static string IsPersistentKey;
    internal static string RedirectUriKey;
    internal static string RefreshKey;
    internal static string UtcDateTimeFormat;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Parameters>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, string> Items { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonIgnoreAttribute]
public IDictionary`2<string, object> Parameters { get; }
    [JsonIgnoreAttribute]
public bool IsPersistent { get; public set; }
    [NullableAttribute("2")]
[JsonIgnoreAttribute]
public string RedirectUri { get; public set; }
    [JsonIgnoreAttribute]
public Nullable`1<DateTimeOffset> IssuedUtc { get; public set; }
    [JsonIgnoreAttribute]
public Nullable`1<DateTimeOffset> ExpiresUtc { get; public set; }
    [JsonIgnoreAttribute]
public Nullable`1<bool> AllowRefresh { get; public set; }
    [JsonConstructorAttribute]
public AuthenticationProperties(IDictionary`2<string, string> items);
    public AuthenticationProperties(IDictionary`2<string, string> items, IDictionary`2<string, object> parameters);
    public AuthenticationProperties Clone();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Items();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Parameters();
    public bool get_IsPersistent();
    public void set_IsPersistent(bool value);
    [NullableContextAttribute("2")]
public string get_RedirectUri();
    [NullableContextAttribute("2")]
public void set_RedirectUri(string value);
    public Nullable`1<DateTimeOffset> get_IssuedUtc();
    public void set_IssuedUtc(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_ExpiresUtc();
    public void set_ExpiresUtc(Nullable`1<DateTimeOffset> value);
    public Nullable`1<bool> get_AllowRefresh();
    public void set_AllowRefresh(Nullable`1<bool> value);
    public string GetString(string key);
    public void SetString(string key, string value);
    [NullableContextAttribute("2")]
public T GetParameter(string key);
    public void SetParameter(string key, T value);
    protected Nullable`1<bool> GetBool(string key);
    protected void SetBool(string key, Nullable`1<bool> value);
    protected Nullable`1<DateTimeOffset> GetDateTimeOffset(string key);
    protected void SetDateTimeOffset(string key, Nullable`1<DateTimeOffset> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authentication.AuthenticationScheme : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <HandlerType>k__BackingField;
    public string Name { get; }
    [NullableAttribute("2")]
public string DisplayName { get; }
    [DynamicallyAccessedMembersAttribute("3")]
public Type HandlerType { get; }
    public AuthenticationScheme(string name, string displayName, Type handlerType);
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public Type get_HandlerType();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <HandlerType>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; }
    public string DisplayName { get; public set; }
    [DynamicallyAccessedMembersAttribute("3")]
public Type HandlerType { get; public set; }
    [NullableContextAttribute("1")]
public AuthenticationSchemeBuilder(string name);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public Type get_HandlerType();
    [CompilerGeneratedAttribute]
public void set_HandlerType(Type value);
    [NullableContextAttribute("1")]
public AuthenticationScheme Build();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authentication.AuthenticationTicket : object {
    [CompilerGeneratedAttribute]
private string <AuthenticationScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <Principal>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationProperties <Properties>k__BackingField;
    public string AuthenticationScheme { get; }
    public ClaimsPrincipal Principal { get; }
    public AuthenticationProperties Properties { get; }
    public AuthenticationTicket(ClaimsPrincipal principal, AuthenticationProperties properties, string authenticationScheme);
    public AuthenticationTicket(ClaimsPrincipal principal, string authenticationScheme);
    [CompilerGeneratedAttribute]
public string get_AuthenticationScheme();
    [CompilerGeneratedAttribute]
public ClaimsPrincipal get_Principal();
    [CompilerGeneratedAttribute]
public AuthenticationProperties get_Properties();
    public AuthenticationTicket Clone();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authentication.AuthenticationToken : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions : object {
    private static string TokenNamesKey;
    private static string TokenKeyPrefix;
    [ExtensionAttribute]
public static void StoreTokens(AuthenticationProperties properties, IEnumerable`1<AuthenticationToken> tokens);
    [ExtensionAttribute]
public static string GetTokenValue(AuthenticationProperties properties, string tokenName);
    [ExtensionAttribute]
public static bool UpdateTokenValue(AuthenticationProperties properties, string tokenName, string tokenValue);
    [ExtensionAttribute]
public static IEnumerable`1<AuthenticationToken> GetTokens(AuthenticationProperties properties);
    [ExtensionAttribute]
public static Task`1<string> GetTokenAsync(IAuthenticationService auth, HttpContext context, string tokenName);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions/<GetTokenAsync>d__7")]
[ExtensionAttribute]
public static Task`1<string> GetTokenAsync(IAuthenticationService auth, HttpContext context, string scheme, string tokenName);
}
[NullableContextAttribute("2")]
public interface Microsoft.AspNetCore.Authentication.IAuthenticateResultFeature {
    public AuthenticateResult AuthenticateResult { get; public set; }
    public abstract virtual AuthenticateResult get_AuthenticateResult();
    public abstract virtual void set_AuthenticateResult(AuthenticateResult value);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Authentication.IAuthenticationConfigurationProvider {
    public IConfiguration AuthenticationConfiguration { get; }
    public abstract virtual IConfiguration get_AuthenticationConfiguration();
}
public interface Microsoft.AspNetCore.Authentication.IAuthenticationFeature {
    public PathString OriginalPathBase { get; public set; }
    public PathString OriginalPath { get; public set; }
    public abstract virtual PathString get_OriginalPathBase();
    public abstract virtual void set_OriginalPathBase(PathString value);
    public abstract virtual PathString get_OriginalPath();
    public abstract virtual void set_OriginalPath(PathString value);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Authentication.IAuthenticationHandler {
    public abstract virtual Task InitializeAsync(AuthenticationScheme scheme, HttpContext context);
    public abstract virtual Task`1<AuthenticateResult> AuthenticateAsync();
    public abstract virtual Task ChallengeAsync(AuthenticationProperties properties);
    public abstract virtual Task ForbidAsync(AuthenticationProperties properties);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Authentication.IAuthenticationHandlerProvider {
    public abstract virtual Task`1<IAuthenticationHandler> GetHandlerAsync(HttpContext context, string authenticationScheme);
}
public interface Microsoft.AspNetCore.Authentication.IAuthenticationRequestHandler {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<bool> HandleRequestAsync();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider {
    public abstract virtual Task`1<IEnumerable`1<AuthenticationScheme>> GetAllSchemesAsync();
    public abstract virtual Task`1<AuthenticationScheme> GetSchemeAsync(string name);
    public abstract virtual Task`1<AuthenticationScheme> GetDefaultAuthenticateSchemeAsync();
    public abstract virtual Task`1<AuthenticationScheme> GetDefaultChallengeSchemeAsync();
    public abstract virtual Task`1<AuthenticationScheme> GetDefaultForbidSchemeAsync();
    public abstract virtual Task`1<AuthenticationScheme> GetDefaultSignInSchemeAsync();
    public abstract virtual Task`1<AuthenticationScheme> GetDefaultSignOutSchemeAsync();
    public abstract virtual void AddScheme(AuthenticationScheme scheme);
    public virtual bool TryAddScheme(AuthenticationScheme scheme);
    public abstract virtual void RemoveScheme(string name);
    public abstract virtual Task`1<IEnumerable`1<AuthenticationScheme>> GetRequestHandlerSchemesAsync();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Authentication.IAuthenticationService {
    public abstract virtual Task`1<AuthenticateResult> AuthenticateAsync(HttpContext context, string scheme);
    public abstract virtual Task ChallengeAsync(HttpContext context, string scheme, AuthenticationProperties properties);
    public abstract virtual Task ForbidAsync(HttpContext context, string scheme, AuthenticationProperties properties);
    public abstract virtual Task SignInAsync(HttpContext context, string scheme, ClaimsPrincipal principal, AuthenticationProperties properties);
    public abstract virtual Task SignOutAsync(HttpContext context, string scheme, AuthenticationProperties properties);
}
public interface Microsoft.AspNetCore.Authentication.IAuthenticationSignInHandler {
    [NullableContextAttribute("1")]
public abstract virtual Task SignInAsync(ClaimsPrincipal user, AuthenticationProperties properties);
}
public interface Microsoft.AspNetCore.Authentication.IAuthenticationSignOutHandler {
    [NullableContextAttribute("1")]
public abstract virtual Task SignOutAsync(AuthenticationProperties properties);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Authentication.IClaimsTransformation {
    public abstract virtual Task`1<ClaimsPrincipal> TransformAsync(ClaimsPrincipal principal);
}
