[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.HttpLoggingBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseHttpLogging(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseW3CLogging(IApplicationBuilder app);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.HttpLoggingEndpointConventionBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static TBuilder WithHttpLogging(TBuilder builder, HttpLoggingFields loggingFields, Nullable`1<int> requestBodyLogLimit, Nullable`1<int> responseBodyLogLimit);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.AspNetCore.HttpLogging.BufferingStream : Stream {
    private static int MinimumBufferSize;
    protected int _bytesBuffered;
    private BufferSegment _head;
    private BufferSegment _tail;
    [NullableAttribute("0")]
protected Memory`1<byte> _tailMemory;
    protected int _tailBytesBuffered;
    protected ILogger _logger;
    protected Stream _innerStream;
    public bool CanSeek { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int WriteTimeout { get; public set; }
    public BufferingStream(Stream innerStream, ILogger logger);
    public virtual bool get_CanSeek();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public string GetString(Encoding encoding);
    public sealed virtual void Advance(int bytes);
    [NullableContextAttribute("0")]
public sealed virtual Memory`1<byte> GetMemory(int sizeHint);
    [NullableContextAttribute("0")]
public sealed virtual Span`1<byte> GetSpan(int sizeHint);
    private void AllocateMemory(int sizeHint);
    private BufferSegment AllocateSegment(int sizeHint);
    private static BufferSegment CreateSegment();
    private static int GetSegmentSize(int sizeHint, int maxBufferSize);
    protected virtual void Dispose(bool disposing);
    public void Reset();
    private static void ThrowArgumentOutOfRangeException(string argumentName);
    private static Exception CreateArgumentOutOfRangeException(string argumentName);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual void Write(ReadOnlySpan`1<byte> buffer);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void EndWrite(IAsyncResult asyncResult);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.HttpLogging.FileLoggerProcessor : object {
    private static int _maxQueuedMessages;
    private string _path;
    private string _fileName;
    private Nullable`1<int> _maxFileSize;
    private Nullable`1<int> _maxRetainedFiles;
    private int _fileNumber;
    private bool _maxFilesReached;
    private TimeSpan _flushInterval;
    private W3CLoggingFields _fields;
    private DateTime _today;
    private bool _firstFile;
    private IOptionsMonitor`1<W3CLoggerOptions> _options;
    private BlockingCollection`1<string> _messageQueue;
    private ILogger _logger;
    private List`1<string> _currentBatch;
    private Task _outputTask;
    private CancellationTokenSource _cancellationTokenSource;
    [CompilerGeneratedAttribute]
private ISystemDateTime <SystemDateTime>k__BackingField;
    private object _pathLock;
    private ISet`1<string> _additionalHeaders;
    internal ISystemDateTime SystemDateTime { get; internal set; }
    public FileLoggerProcessor(IOptionsMonitor`1<W3CLoggerOptions> options, IHostEnvironment environment, ILoggerFactory factory);
    [CompilerGeneratedAttribute]
internal ISystemDateTime get_SystemDateTime();
    [CompilerGeneratedAttribute]
internal void set_SystemDateTime(ISystemDateTime value);
    public void EnqueueMessage(string message);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.HttpLogging.FileLoggerProcessor/<ProcessLogQueue>d__25")]
private Task ProcessLogQueue();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.HttpLogging.FileLoggerProcessor/<WriteMessagesAsync>d__26")]
private Task WriteMessagesAsync(List`1<string> messages, CancellationToken cancellationToken);
    internal bool TryCreateDirectory();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.HttpLogging.FileLoggerProcessor/<WriteMessageAsync>d__28")]
internal virtual Task WriteMessageAsync(string message, StreamWriter streamWriter, CancellationToken cancellationToken);
    internal virtual StreamWriter GetStreamWriter(string fileName);
    private void RollFiles();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.HttpLogging.FileLoggerProcessor/<DisposeAsync>d__31")]
public sealed virtual ValueTask DisposeAsync();
    private int GetFirstFileCount(DateTime date);
    private string GetFullName(DateTime date);
    public virtual Task OnFirstWrite(StreamWriter streamWriter, CancellationToken cancellationToken);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.HttpLogging.HttpLog : object {
    private List`1<KeyValuePair`2<string, object>> _keyValues;
    private string _title;
    private string _cachedToString;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Func`3<object, Exception, string> Callback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public KeyValuePair`2<string, object> Item { get; }
    public int Count { get; }
    [NullableContextAttribute("1")]
public HttpLog(List`1<KeyValuePair`2<string, object>> keyValues, string title);
    private static HttpLog();
    public sealed virtual KeyValuePair`2<string, object> get_Item(int index);
    public sealed virtual int get_Count();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.HttpLogging.HttpLog/<GetEnumerator>d__9")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    [NullableContextAttribute("1")]
public virtual string ToString();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.HttpLogging.HttpLoggingAttribute : Attribute {
    private int _responseBodyLogLimit;
    private int _requestBodyLogLimit;
    [CompilerGeneratedAttribute]
private HttpLoggingFields <LoggingFields>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRequestBodyLogLimitSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsResponseBodyLogLimitSet>k__BackingField;
    public HttpLoggingFields LoggingFields { get; }
    public bool IsRequestBodyLogLimitSet { get; private set; }
    public int RequestBodyLogLimit { get; public set; }
    public bool IsResponseBodyLogLimitSet { get; private set; }
    public int ResponseBodyLogLimit { get; public set; }
    public HttpLoggingAttribute(HttpLoggingFields loggingFields);
    [CompilerGeneratedAttribute]
public HttpLoggingFields get_LoggingFields();
    [CompilerGeneratedAttribute]
public bool get_IsRequestBodyLogLimitSet();
    [CompilerGeneratedAttribute]
private void set_IsRequestBodyLogLimitSet(bool value);
    public int get_RequestBodyLogLimit();
    public void set_RequestBodyLogLimit(int value);
    [CompilerGeneratedAttribute]
public bool get_IsResponseBodyLogLimitSet();
    [CompilerGeneratedAttribute]
private void set_IsResponseBodyLogLimitSet(bool value);
    public int get_ResponseBodyLogLimit();
    public void set_ResponseBodyLogLimit(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.HttpLogging.HttpLoggingExtensions : object {
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`4<ILogger, string, string, Exception> __RequestBodyCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`3<ILogger, string, Exception> __ResponseBodyCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`2<ILogger, Exception> __DecodeFailureCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`3<ILogger, string, Exception> __UnrecognizedMediaTypeCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`3<ILogger, string, Exception> __NoMediaTypeCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`3<ILogger, double, Exception> __DurationCallback;
    private static HttpLoggingExtensions();
    [ExtensionAttribute]
public static void RequestLog(ILogger logger, HttpLog requestLog);
    [ExtensionAttribute]
public static void ResponseLog(ILogger logger, HttpLog responseLog);
    [ExtensionAttribute]
[LoggerMessageAttribute("3", "2", "RequestBody: {Body}{Status}")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void RequestBody(ILogger logger, string body, string status);
    [ExtensionAttribute]
[LoggerMessageAttribute("4", "2", "ResponseBody: {Body}")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void ResponseBody(ILogger logger, string body);
    [ExtensionAttribute]
[LoggerMessageAttribute("5", "1", "Decode failure while converting body.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void DecodeFailure(ILogger logger, Exception ex);
    [ExtensionAttribute]
[LoggerMessageAttribute("6", "1", "Unrecognized Content-Type for {Name} body.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void UnrecognizedMediaType(ILogger logger, string name);
    [ExtensionAttribute]
[LoggerMessageAttribute("7", "1", "No Content-Type header for {Name} body.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void NoMediaType(ILogger logger, string name);
    [ExtensionAttribute]
[LoggerMessageAttribute("8", "2", "Duration: {Duration}ms")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void Duration(ILogger logger, double duration);
    [ExtensionAttribute]
public static void RequestResponseLog(ILogger logger, HttpLog log);
}
[FlagsAttribute]
public enum Microsoft.AspNetCore.HttpLogging.HttpLoggingFields : Enum {
    public long value__;
    public static HttpLoggingFields None;
    public static HttpLoggingFields RequestPath;
    public static HttpLoggingFields RequestQuery;
    public static HttpLoggingFields RequestProtocol;
    public static HttpLoggingFields RequestMethod;
    public static HttpLoggingFields RequestScheme;
    public static HttpLoggingFields ResponseStatusCode;
    public static HttpLoggingFields RequestHeaders;
    public static HttpLoggingFields ResponseHeaders;
    public static HttpLoggingFields RequestTrailers;
    public static HttpLoggingFields ResponseTrailers;
    public static HttpLoggingFields RequestBody;
    public static HttpLoggingFields ResponseBody;
    public static HttpLoggingFields Duration;
    public static HttpLoggingFields RequestProperties;
    public static HttpLoggingFields RequestPropertiesAndHeaders;
    public static HttpLoggingFields ResponsePropertiesAndHeaders;
    public static HttpLoggingFields Request;
    public static HttpLoggingFields Response;
    public static HttpLoggingFields All;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext : object {
    private HttpContext _httpContext;
    [CompilerGeneratedAttribute]
private HttpLoggingFields <LoggingFields>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RequestBodyLogLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResponseBodyLogLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeProvider <TimeProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<KeyValuePair`2<string, object>> <InternalParameters>k__BackingField;
    public HttpContext HttpContext { get; public set; }
    public HttpLoggingFields LoggingFields { get; public set; }
    public int RequestBodyLogLimit { get; public set; }
    public int ResponseBodyLogLimit { get; public set; }
    internal long StartTimestamp { get; internal set; }
    internal TimeProvider TimeProvider { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<KeyValuePair`2<string, object>> InternalParameters { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<KeyValuePair`2<string, object>> Parameters { get; }
    public HttpContext get_HttpContext();
    public void set_HttpContext(HttpContext value);
    [CompilerGeneratedAttribute]
public HttpLoggingFields get_LoggingFields();
    [CompilerGeneratedAttribute]
public void set_LoggingFields(HttpLoggingFields value);
    [CompilerGeneratedAttribute]
public int get_RequestBodyLogLimit();
    [CompilerGeneratedAttribute]
public void set_RequestBodyLogLimit(int value);
    [CompilerGeneratedAttribute]
public int get_ResponseBodyLogLimit();
    [CompilerGeneratedAttribute]
public void set_ResponseBodyLogLimit(int value);
    [CompilerGeneratedAttribute]
internal long get_StartTimestamp();
    [CompilerGeneratedAttribute]
internal void set_StartTimestamp(long value);
    [CompilerGeneratedAttribute]
internal TimeProvider get_TimeProvider();
    [CompilerGeneratedAttribute]
internal void set_TimeProvider(TimeProvider value);
    [CompilerGeneratedAttribute]
internal List`1<KeyValuePair`2<string, object>> get_InternalParameters();
    [CompilerGeneratedAttribute]
internal void set_InternalParameters(List`1<KeyValuePair`2<string, object>> value);
    public IList`1<KeyValuePair`2<string, object>> get_Parameters();
    public void AddParameter(string key, object value);
    public void Enable(HttpLoggingFields fields);
    public bool IsAnyEnabled(HttpLoggingFields fields);
    public void Disable(HttpLoggingFields fields);
    public bool TryDisable(HttpLoggingFields fields);
    internal void Reset();
    internal double GetDuration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware : object {
    private RequestDelegate _next;
    private ILogger _logger;
    private ObjectPool`1<HttpLoggingInterceptorContext> _contextPool;
    private TimeProvider _timeProvider;
    private IHttpLoggingInterceptor[] _interceptors;
    private IOptionsMonitor`1<HttpLoggingOptions> _options;
    private static string Redacted;
    public HttpLoggingMiddleware(RequestDelegate next, IOptionsMonitor`1<HttpLoggingOptions> options, ILogger`1<HttpLoggingMiddleware> logger, IEnumerable`1<IHttpLoggingInterceptor> interceptors, ObjectPool`1<HttpLoggingInterceptorContext> contextPool, TimeProvider timeProvider);
    public Task Invoke(HttpContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware/<InvokeInternal>d__9")]
private Task InvokeInternal(HttpContext context, HttpLoggingOptions options, HttpLoggingAttribute loggingAttribute, HttpLoggingFields loggingFields);
    private static bool ResponseHeadersNotYetWritten(ResponseBufferingStream responseBufferingStream, UpgradeFeatureLoggingDecorator upgradeFeatureLogging);
    private static bool BodyNotYetWritten(ResponseBufferingStream responseBufferingStream);
    private static bool NotUpgradeableRequestOrRequestNotUpgraded(UpgradeFeatureLoggingDecorator upgradeFeatureLogging);
    public static void LogResponseHeadersSync(HttpLoggingInterceptorContext logContext, HttpLoggingOptions options, IHttpLoggingInterceptor[] interceptors, ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware/<LogResponseHeadersAsync>d__14")]
public static ValueTask LogResponseHeadersAsync(HttpLoggingInterceptorContext logContext, HttpLoggingOptions options, IHttpLoggingInterceptor[] interceptors, ILogger logger);
    private static void LogResponseHeadersCore(HttpLoggingInterceptorContext logContext, HttpLoggingOptions options, ILogger logger);
    internal static void FilterHeaders(HttpLoggingInterceptorContext logContext, IHeaderDictionary headers, HashSet`1<string> allowedHeaders);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions : object {
    [CompilerGeneratedAttribute]
private HttpLoggingFields <LoggingFields>k__BackingField;
    internal HashSet`1<string> _internalRequestHeaders;
    internal HashSet`1<string> _internalResponseHeaders;
    [CompilerGeneratedAttribute]
private MediaTypeOptions <MediaTypeOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RequestBodyLogLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResponseBodyLogLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CombineLogs>k__BackingField;
    public HttpLoggingFields LoggingFields { get; public set; }
    public ISet`1<string> RequestHeaders { get; }
    public ISet`1<string> ResponseHeaders { get; }
    public MediaTypeOptions MediaTypeOptions { get; }
    public int RequestBodyLogLimit { get; public set; }
    public int ResponseBodyLogLimit { get; public set; }
    public bool CombineLogs { get; public set; }
    [CompilerGeneratedAttribute]
public HttpLoggingFields get_LoggingFields();
    [CompilerGeneratedAttribute]
public void set_LoggingFields(HttpLoggingFields value);
    public ISet`1<string> get_RequestHeaders();
    public ISet`1<string> get_ResponseHeaders();
    [CompilerGeneratedAttribute]
public MediaTypeOptions get_MediaTypeOptions();
    [CompilerGeneratedAttribute]
public int get_RequestBodyLogLimit();
    [CompilerGeneratedAttribute]
public void set_RequestBodyLogLimit(int value);
    [CompilerGeneratedAttribute]
public int get_ResponseBodyLogLimit();
    [CompilerGeneratedAttribute]
public void set_ResponseBodyLogLimit(int value);
    [CompilerGeneratedAttribute]
public bool get_CombineLogs();
    [CompilerGeneratedAttribute]
public void set_CombineLogs(bool value);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.HttpLogging.IHttpLoggingInterceptor {
    public abstract virtual ValueTask OnRequestAsync(HttpLoggingInterceptorContext logContext);
    public abstract virtual ValueTask OnResponseAsync(HttpLoggingInterceptorContext logContext);
}
internal interface Microsoft.AspNetCore.HttpLogging.ISystemDateTime {
    public DateTime Now { get; }
    public abstract virtual DateTime get_Now();
}
internal static class Microsoft.AspNetCore.HttpLogging.MediaTypeHelpers : object {
    private static List`1<Encoding> SupportedEncodings;
    private static MediaTypeHelpers();
    [NullableContextAttribute("2")]
public static bool TryGetEncodingForMediaType(string contentType, List`1<MediaTypeState> mediaTypeList, Encoding& encoding);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.HttpLogging.MediaTypeOptions : object {
    private List`1<MediaTypeState> _mediaTypeStates;
    internal List`1<MediaTypeState> MediaTypeStates { get; }
    internal List`1<MediaTypeState> get_MediaTypeStates();
    internal static MediaTypeOptions BuildDefaultMediaTypeOptions();
    internal void AddText(MediaTypeHeaderValue mediaType);
    public void AddText(string contentType);
    public void AddText(string contentType, Encoding encoding);
    public void AddBinary(MediaTypeHeaderValue mediaType);
    public void AddBinary(string contentType);
    public void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.HttpLogging.RequestBufferingStream : BufferingStream {
    private Encoding _encoding;
    private bool _logOnFinish;
    private int _limit;
    private BodyStatus _status;
    [CompilerGeneratedAttribute]
private bool <HasLogged>k__BackingField;
    public bool HasLogged { get; private set; }
    public RequestBufferingStream(Stream innerStream, int limit, ILogger logger, Encoding encoding, bool logOnFinish);
    [CompilerGeneratedAttribute]
public bool get_HasLogged();
    [CompilerGeneratedAttribute]
private void set_HasLogged(bool value);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.HttpLogging.RequestBufferingStream/<ReadAsync>d__9")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> destination, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.HttpLogging.RequestBufferingStream/<ReadAsync>d__10")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    private void WriteToBuffer(ReadOnlySpan`1<byte> span);
    public void LogRequestBody();
    public void LogRequestBody(HttpLoggingInterceptorContext logContext);
    private string GetStatus(bool showCompleted);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.HttpLogging.ResponseBufferingStream : BufferingStream {
    private IHttpResponseBodyFeature _innerBodyFeature;
    private int _limit;
    private PipeWriter _pipeAdapter;
    private HttpLoggingInterceptorContext _logContext;
    private HttpLoggingOptions _options;
    private IHttpLoggingInterceptor[] _interceptors;
    private bool _logBody;
    private Encoding _encoding;
    private static StreamPipeWriterOptions _pipeWriterOptions;
    [CompilerGeneratedAttribute]
private bool <HeadersWritten>k__BackingField;
    public bool HeadersWritten { get; private set; }
    public Stream Stream { get; }
    public PipeWriter Writer { get; }
    internal ResponseBufferingStream(IHttpResponseBodyFeature innerBodyFeature, ILogger logger, HttpLoggingInterceptorContext logContext, HttpLoggingOptions options, IHttpLoggingInterceptor[] interceptors);
    private static ResponseBufferingStream();
    [CompilerGeneratedAttribute]
public bool get_HeadersWritten();
    [CompilerGeneratedAttribute]
private void set_HeadersWritten(bool value);
    public sealed virtual Stream get_Stream();
    public sealed virtual PipeWriter get_Writer();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    [NullableContextAttribute("0")]
public virtual void Write(ReadOnlySpan`1<byte> span);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.HttpLogging.ResponseBufferingStream/<WriteAsync>d__22")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.HttpLogging.ResponseBufferingStream/<WriteAsync>d__23")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    private void CommonWrite(ReadOnlySpan`1<byte> span);
    private void OnFirstWriteSync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.HttpLogging.ResponseBufferingStream/<OnFirstWriteAsync>d__26")]
private ValueTask OnFirstWriteAsync();
    private void OnFirstWriteCore();
    public sealed virtual void DisableBuffering();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.HttpLogging.ResponseBufferingStream/<SendFileAsync>d__29")]
public sealed virtual Task SendFileAsync(string path, long offset, Nullable`1<long> count, CancellationToken cancellation);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.HttpLogging.ResponseBufferingStream/<StartAsync>d__30")]
public sealed virtual Task StartAsync(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.HttpLogging.ResponseBufferingStream/<CompleteAsync>d__31")]
public sealed virtual Task CompleteAsync();
    public virtual void Flush();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.HttpLogging.ResponseBufferingStream/<FlushAsync>d__33")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    public void LogResponseBody();
    public void LogResponseBody(HttpLoggingInterceptorContext logContext);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(CancellationToken cancellationToken);
}
internal static class Microsoft.AspNetCore.HttpLogging.StatusCodeHelper : object {
    [NullableContextAttribute("1")]
public static string ToStatusString(int statusCode);
}
internal class Microsoft.AspNetCore.HttpLogging.SystemDateTime : object {
    public DateTime Now { get; }
    public sealed virtual DateTime get_Now();
}
internal class Microsoft.AspNetCore.HttpLogging.UpgradeFeatureLoggingDecorator : object {
    private IHttpUpgradeFeature _innerUpgradeFeature;
    private HttpLoggingInterceptorContext _logContext;
    private HttpLoggingOptions _options;
    private IHttpLoggingInterceptor[] _interceptors;
    private ILogger _logger;
    private bool _isUpgraded;
    public bool IsUpgradableRequest { get; }
    public bool IsUpgraded { get; }
    [NullableContextAttribute("1")]
public UpgradeFeatureLoggingDecorator(IHttpUpgradeFeature innerUpgradeFeature, HttpLoggingInterceptorContext logContext, HttpLoggingOptions options, IHttpLoggingInterceptor[] interceptors, ILogger logger);
    public sealed virtual bool get_IsUpgradableRequest();
    public bool get_IsUpgraded();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.HttpLogging.UpgradeFeatureLoggingDecorator/<UpgradeAsync>d__11")]
public sealed virtual Task`1<Stream> UpgradeAsync();
}
internal class Microsoft.AspNetCore.HttpLogging.W3CLogger : object {
    private W3CLoggerProcessor _messageQueue;
    private IOptionsMonitor`1<W3CLoggerOptions> _options;
    private W3CLoggingFields _loggingFields;
    [NullableContextAttribute("1")]
public W3CLogger(IOptionsMonitor`1<W3CLoggerOptions> options, W3CLoggerProcessor messageQueue);
    public sealed virtual ValueTask DisposeAsync();
    [NullableContextAttribute("1")]
public void Log(String[] elements, String[] additionalHeaders);
    private string Format(String[] elements, String[] additionalHeaders);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(W3CLoggerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions : object {
    private Nullable`1<int> _fileSizeLimit;
    private Nullable`1<int> _retainedFileCountLimit;
    private string _fileName;
    private string _logDirectory;
    private TimeSpan _flushInterval;
    internal static int MaxFileCount;
    [CompilerGeneratedAttribute]
private ISet`1<string> <AdditionalRequestHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private W3CLoggingFields <LoggingFields>k__BackingField;
    public Nullable`1<int> FileSizeLimit { get; public set; }
    public Nullable`1<int> RetainedFileCountLimit { get; public set; }
    public string FileName { get; public set; }
    public string LogDirectory { get; public set; }
    public TimeSpan FlushInterval { get; public set; }
    public ISet`1<string> AdditionalRequestHeaders { get; }
    public W3CLoggingFields LoggingFields { get; public set; }
    public Nullable`1<int> get_FileSizeLimit();
    public void set_FileSizeLimit(Nullable`1<int> value);
    public Nullable`1<int> get_RetainedFileCountLimit();
    public void set_RetainedFileCountLimit(Nullable`1<int> value);
    public string get_FileName();
    public void set_FileName(string value);
    public string get_LogDirectory();
    public void set_LogDirectory(string value);
    public TimeSpan get_FlushInterval();
    public void set_FlushInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_AdditionalRequestHeaders();
    [CompilerGeneratedAttribute]
public W3CLoggingFields get_LoggingFields();
    [CompilerGeneratedAttribute]
public void set_LoggingFields(W3CLoggingFields value);
    internal static ISet`1<string> FilterRequestHeaders(W3CLoggerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.HttpLogging.W3CLoggerProcessor : FileLoggerProcessor {
    private W3CLoggingFields _loggingFields;
    private ISet`1<string> _additionalRequestHeaders;
    public W3CLoggerProcessor(IOptionsMonitor`1<W3CLoggerOptions> options, IHostEnvironment environment, ILoggerFactory factory);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.HttpLogging.W3CLoggerProcessor/<OnFirstWrite>d__3")]
public virtual Task OnFirstWrite(StreamWriter streamWriter, CancellationToken cancellationToken);
    private string GetFieldsDirective();
    internal virtual Task WriteMessageAsync(string message, StreamWriter streamWriter, CancellationToken cancellationToken);
    internal virtual void OnWrite(string message);
}
[FlagsAttribute]
public enum Microsoft.AspNetCore.HttpLogging.W3CLoggingFields : Enum {
    public long value__;
    public static W3CLoggingFields None;
    public static W3CLoggingFields Date;
    public static W3CLoggingFields Time;
    public static W3CLoggingFields ClientIpAddress;
    public static W3CLoggingFields UserName;
    public static W3CLoggingFields ServerName;
    public static W3CLoggingFields ServerIpAddress;
    public static W3CLoggingFields ServerPort;
    public static W3CLoggingFields Method;
    public static W3CLoggingFields UriStem;
    public static W3CLoggingFields UriQuery;
    public static W3CLoggingFields ProtocolStatus;
    public static W3CLoggingFields TimeTaken;
    public static W3CLoggingFields ProtocolVersion;
    public static W3CLoggingFields Host;
    public static W3CLoggingFields UserAgent;
    public static W3CLoggingFields Cookie;
    public static W3CLoggingFields Referer;
    public static W3CLoggingFields ConnectionInfoFields;
    public static W3CLoggingFields RequestHeaders;
    public static W3CLoggingFields Request;
    public static W3CLoggingFields All;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.HttpLogging.W3CLoggingMiddleware : object {
    private RequestDelegate _next;
    private W3CLogger _w3cLogger;
    private IOptionsMonitor`1<W3CLoggerOptions> _options;
    private string _serverName;
    internal static int _dateIndex;
    internal static int _timeIndex;
    internal static int _clientIpIndex;
    internal static int _userNameIndex;
    internal static int _serverNameIndex;
    internal static int _serverIpIndex;
    internal static int _serverPortIndex;
    internal static int _methodIndex;
    internal static int _uriStemIndex;
    internal static int _uriQueryIndex;
    internal static int _protocolStatusIndex;
    internal static int _timeTakenIndex;
    internal static int _protocolVersionIndex;
    internal static int _hostIndex;
    internal static int _userAgentIndex;
    internal static int _cookieIndex;
    internal static int _refererIndex;
    private ISet`1<string> _additionalRequestHeaders;
    internal static int _fieldsLength;
    public W3CLoggingMiddleware(RequestDelegate next, IOptionsMonitor`1<W3CLoggerOptions> options, W3CLogger w3cLogger);
    private static W3CLoggingMiddleware();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.HttpLogging.W3CLoggingMiddleware/<Invoke>d__24")]
public Task Invoke(HttpContext context);
    private static bool AddToList(String[] elements, int index, string value);
    private static string ReplaceWhitespace(string entry);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.HttpLoggingServicesExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddHttpLogging(IServiceCollection services, Action`1<HttpLoggingOptions> configureOptions);
    [ExtensionAttribute]
public static IServiceCollection AddHttpLoggingInterceptor(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddW3CLogging(IServiceCollection services, Action`1<W3CLoggerOptions> configureOptions);
}
internal class Microsoft.Extensions.Internal.ValueStopwatch : ValueType {
    private long _startTimestamp;
    public bool IsActive { get; }
    private ValueStopwatch(long startTimestamp);
    public bool get_IsActive();
    public static ValueStopwatch StartNew();
    public TimeSpan GetElapsedTime();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.IO.Pipelines.BufferSegment : ReadOnlySequenceSegment`1<byte> {
    private object _memoryOwner;
    private BufferSegment _next;
    private int _end;
    [CompilerGeneratedAttribute]
private Memory`1<byte> <AvailableMemory>k__BackingField;
    public int End { get; public set; }
    [NullableAttribute("2")]
public BufferSegment NextSegment { get; public set; }
    [NullableAttribute("2")]
internal object MemoryOwner { get; }
    [NullableAttribute("0")]
public Memory`1<byte> AvailableMemory { get; private set; }
    public int Length { get; }
    public int WritableBytes { get; }
    public int get_End();
    public void set_End(int value);
    [NullableContextAttribute("2")]
public BufferSegment get_NextSegment();
    [NullableContextAttribute("2")]
public void set_NextSegment(BufferSegment value);
    public void SetOwnedMemory(IMemoryOwner`1<byte> memoryOwner);
    public void SetOwnedMemory(Byte[] arrayPoolBuffer);
    public void ResetMemory();
    [NullableContextAttribute("2")]
internal object get_MemoryOwner();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public Memory`1<byte> get_AvailableMemory();
    [CompilerGeneratedAttribute]
private void set_AvailableMemory(Memory`1<byte> value);
    public int get_Length();
    public int get_WritableBytes();
    public void SetNext(BufferSegment segment);
    internal static long GetLength(BufferSegment startSegment, int startIndex, BufferSegment endSegment, int endIndex);
    internal static long GetLength(long startPosition, BufferSegment endSegment, int endIndex);
}
internal class System.IO.Pipelines.BufferSegmentStack : ValueType {
    private SegmentAsValueType[] _array;
    private int _size;
    public int Count { get; }
    public BufferSegmentStack(int size);
    [IsReadOnlyAttribute]
public int get_Count();
    [NullableContextAttribute("2")]
public bool TryPop(BufferSegment& result);
    [NullableContextAttribute("1")]
public void Push(BufferSegment item);
    private void PushWithResize(BufferSegment item);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[DefaultMemberAttribute("Item")]
internal class System.Text.ValueStringBuilder : ValueType {
    private Char[] _arrayToReturnToPool;
    private Span`1<char> _chars;
    private int _pos;
    public int Length { get; public set; }
    public int Capacity { get; }
    public Char& Item { get; }
    public Span`1<char> RawChars { get; }
    public ValueStringBuilder(Span`1<char> initialBuffer);
    public ValueStringBuilder(int initialCapacity);
    public int get_Length();
    public void set_Length(int value);
    public int get_Capacity();
    public void EnsureCapacity(int capacity);
    public Char& GetPinnableReference();
    public Char& GetPinnableReference(bool terminate);
    public Char& get_Item(int index);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public Span`1<char> get_RawChars();
    public ReadOnlySpan`1<char> AsSpan(bool terminate);
    public ReadOnlySpan`1<char> AsSpan();
    public ReadOnlySpan`1<char> AsSpan(int start);
    public ReadOnlySpan`1<char> AsSpan(int start, int length);
    public bool TryCopyTo(Span`1<char> destination, Int32& charsWritten);
    public void Insert(int index, char value, int count);
    [NullableContextAttribute("2")]
public void Insert(int index, string s);
    public void Append(char c);
    [NullableContextAttribute("2")]
public void Append(string s);
    private void AppendSlow(string s);
    public void Append(char c, int count);
    public void Append(Char* value, int length);
    public void Append(ReadOnlySpan`1<char> value);
    public Span`1<char> AppendSpan(int length);
    private void GrowAndAppend(char c);
    private void Grow(int additionalCapacityBeyondPos);
    public void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Threading.Tasks.TaskToApm : object {
    public static IAsyncResult Begin(Task task, AsyncCallback callback, object state);
    public static void End(IAsyncResult asyncResult);
    public static TResult End(IAsyncResult asyncResult);
}
