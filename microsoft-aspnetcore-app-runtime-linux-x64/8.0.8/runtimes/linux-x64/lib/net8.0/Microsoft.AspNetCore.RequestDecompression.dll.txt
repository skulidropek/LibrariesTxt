[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.RequestDecompressionBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IApplicationBuilder UseRequestDecompression(IApplicationBuilder builder);
}
internal class Microsoft.AspNetCore.RequestDecompression.BrotliDecompressionProvider : object {
    [NullableContextAttribute("1")]
public sealed virtual Stream GetDecompressionStream(Stream stream);
}
internal class Microsoft.AspNetCore.RequestDecompression.DefaultRequestDecompressionProvider : object {
    private ILogger _logger;
    private IDictionary`2<string, IDecompressionProvider> _providers;
    [NullableContextAttribute("1")]
public DefaultRequestDecompressionProvider(ILogger`1<DefaultRequestDecompressionProvider> logger, IOptions`1<RequestDecompressionOptions> options);
    [NullableContextAttribute("1")]
public sealed virtual Stream GetDecompressionStream(HttpContext context);
}
internal class Microsoft.AspNetCore.RequestDecompression.DeflateDecompressionProvider : object {
    [NullableContextAttribute("1")]
public sealed virtual Stream GetDecompressionStream(Stream stream);
}
internal class Microsoft.AspNetCore.RequestDecompression.GZipDecompressionProvider : object {
    [NullableContextAttribute("1")]
public sealed virtual Stream GetDecompressionStream(Stream stream);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.RequestDecompression.IDecompressionProvider {
    public abstract virtual Stream GetDecompressionStream(Stream stream);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.RequestDecompression.IRequestDecompressionProvider {
    public abstract virtual Stream GetDecompressionStream(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.RequestDecompression.RequestDecompressionMiddleware : object {
    private RequestDelegate _next;
    private ILogger`1<RequestDecompressionMiddleware> _logger;
    private IRequestDecompressionProvider _provider;
    public RequestDecompressionMiddleware(RequestDelegate next, ILogger`1<RequestDecompressionMiddleware> logger, IRequestDecompressionProvider provider);
    public Task Invoke(HttpContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.RequestDecompression.RequestDecompressionMiddleware/<InvokeCore>d__5")]
private Task InvokeCore(HttpContext context, Stream decompressionStream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.RequestDecompression.RequestDecompressionOptions : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, IDecompressionProvider> <DecompressionProviders>k__BackingField;
    public IDictionary`2<string, IDecompressionProvider> DecompressionProviders { get; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, IDecompressionProvider> get_DecompressionProviders();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.RequestDecompressionServiceExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddRequestDecompression(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddRequestDecompression(IServiceCollection services, Action`1<RequestDecompressionOptions> configureOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SizeLimitedStream : Stream {
    private Stream _innerStream;
    private Nullable`1<long> _sizeLimit;
    private long _totalBytesRead;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public SizeLimitedStream(Stream innerStream, Nullable`1<long> sizeLimit);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("SizeLimitedStream/<ReadAsync>d__21")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
}
