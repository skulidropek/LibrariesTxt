internal static class Microsoft.AspNetCore.Connections.CorrelationIdGenerator : object {
    private static Char[] s_encode32Chars;
    private static long _lastId;
    private static CorrelationIdGenerator();
    [NullableContextAttribute("1")]
public static string GetNextId();
    private static string GenerateId(long id);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal abstract class Microsoft.AspNetCore.Connections.TransportConnection : ConnectionContext {
    private IDictionary`2<object, object> _items;
    private string _connectionId;
    [CompilerGeneratedAttribute]
private IFeatureCollection <MultiplexedConnectionFeatures>k__BackingField;
    [CompilerGeneratedAttribute]
private EndPoint <LocalEndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private EndPoint <RemoteEndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryPool`1<byte> <MemoryPool>k__BackingField;
    [CompilerGeneratedAttribute]
private IDuplexPipe <Transport>k__BackingField;
    [CompilerGeneratedAttribute]
private IDuplexPipe <Application>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <ConnectionClosed>k__BackingField;
    protected internal IConnectionIdFeature _currentIConnectionIdFeature;
    protected internal IConnectionTransportFeature _currentIConnectionTransportFeature;
    protected internal IConnectionItemsFeature _currentIConnectionItemsFeature;
    protected internal IMemoryPoolFeature _currentIMemoryPoolFeature;
    protected internal IConnectionLifetimeFeature _currentIConnectionLifetimeFeature;
    protected internal IPersistentStateFeature _currentIPersistentStateFeature;
    protected internal IConnectionSocketFeature _currentIConnectionSocketFeature;
    protected internal IProtocolErrorCodeFeature _currentIProtocolErrorCodeFeature;
    protected internal IStreamDirectionFeature _currentIStreamDirectionFeature;
    protected internal IStreamIdFeature _currentIStreamIdFeature;
    protected internal IStreamAbortFeature _currentIStreamAbortFeature;
    protected internal IStreamClosedFeature _currentIStreamClosedFeature;
    protected internal IConnectionMetricsTagsFeature _currentIConnectionMetricsTagsFeature;
    private int _featureRevision;
    private List`1<KeyValuePair`2<Type, object>> MaybeExtra;
    public IFeatureCollection MultiplexedConnectionFeatures { get; protected set; }
    public EndPoint LocalEndPoint { get; public set; }
    public EndPoint RemoteEndPoint { get; public set; }
    [NullableAttribute("1")]
public string ConnectionId { get; public set; }
    [NullableAttribute("1")]
public IFeatureCollection Features { get; }
    [NullableAttribute("1")]
public MemoryPool`1<byte> MemoryPool { get; }
    [NullableAttribute("1")]
public IDuplexPipe Transport { get; public set; }
    [NullableAttribute("1")]
public IDuplexPipe Application { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<object, object> Items { get; public set; }
    public CancellationToken ConnectionClosed { get; public set; }
    private bool Microsoft.AspNetCore.Http.Features.IFeatureCollection.IsReadOnly { get; }
    private int Microsoft.AspNetCore.Http.Features.IFeatureCollection.Revision { get; }
    private object Microsoft.AspNetCore.Http.Features.IFeatureCollection.Item { get; private set; }
    [NullableAttribute("1")]
private MemoryPool`1<byte> Microsoft.AspNetCore.Connections.Features.IMemoryPoolFeature.MemoryPool { get; }
    [NullableAttribute("1")]
private IDuplexPipe Microsoft.AspNetCore.Connections.Features.IConnectionTransportFeature.Transport { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<object, object> Microsoft.AspNetCore.Connections.Features.IConnectionItemsFeature.Items { get; private set; }
    private CancellationToken Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.ConnectionClosed { get; private set; }
    [CompilerGeneratedAttribute]
public IFeatureCollection get_MultiplexedConnectionFeatures();
    [CompilerGeneratedAttribute]
protected void set_MultiplexedConnectionFeatures(IFeatureCollection value);
    [CompilerGeneratedAttribute]
public virtual EndPoint get_LocalEndPoint();
    [CompilerGeneratedAttribute]
public virtual void set_LocalEndPoint(EndPoint value);
    [CompilerGeneratedAttribute]
public virtual EndPoint get_RemoteEndPoint();
    [CompilerGeneratedAttribute]
public virtual void set_RemoteEndPoint(EndPoint value);
    [NullableContextAttribute("1")]
public virtual string get_ConnectionId();
    [NullableContextAttribute("1")]
public virtual void set_ConnectionId(string value);
    [NullableContextAttribute("1")]
public virtual IFeatureCollection get_Features();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual MemoryPool`1<byte> get_MemoryPool();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual IDuplexPipe get_Transport();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual void set_Transport(IDuplexPipe value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IDuplexPipe get_Application();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Application(IDuplexPipe value);
    public virtual IDictionary`2<object, object> get_Items();
    public virtual void set_Items(IDictionary`2<object, object> value);
    internal void ResetItems();
    [CompilerGeneratedAttribute]
public virtual CancellationToken get_ConnectionClosed();
    [CompilerGeneratedAttribute]
public virtual void set_ConnectionClosed(CancellationToken value);
    [NullableContextAttribute("1")]
public virtual void Abort(ConnectionAbortedException abortReason);
    private void FastReset();
    internal void ResetFeatureCollection();
    private object ExtraFeatureGet(Type key);
    private void ExtraFeatureSet(Type key, object value);
    private sealed virtual override bool Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_IsReadOnly();
    private sealed virtual override int Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_Revision();
    private sealed virtual override object Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_Item(Type key);
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IFeatureCollection.set_Item(Type key, object value);
    private sealed virtual override TFeature Microsoft.AspNetCore.Http.Features.IFeatureCollection.Get();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IFeatureCollection.Set(TFeature feature);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Connections.TransportConnection/<FastEnumerable>d__68")]
private IEnumerable`1<KeyValuePair`2<Type, object>> FastEnumerable();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<Type, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override MemoryPool`1<byte> Microsoft.AspNetCore.Connections.Features.IMemoryPoolFeature.get_MemoryPool();
    private sealed virtual override IDuplexPipe Microsoft.AspNetCore.Connections.Features.IConnectionTransportFeature.get_Transport();
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionTransportFeature.set_Transport(IDuplexPipe value);
    private sealed virtual override IDictionary`2<object, object> Microsoft.AspNetCore.Connections.Features.IConnectionItemsFeature.get_Items();
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionItemsFeature.set_Items(IDictionary`2<object, object> value);
    private sealed virtual override CancellationToken Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.get_ConnectionClosed();
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.set_ConnectionClosed(CancellationToken value);
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.Abort();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Hosting.WebHostBuilderSocketExtensions : object {
    [ExtensionAttribute]
public static IWebHostBuilder UseSockets(IWebHostBuilder hostBuilder);
    [ExtensionAttribute]
public static IWebHostBuilder UseSockets(IWebHostBuilder hostBuilder, Action`1<SocketTransportOptions> configureOptions);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.BufferExtensions : object {
    [ExtensionAttribute]
public static ArraySegment`1<byte> GetArray(Memory`1<byte> memory);
    [ExtensionAttribute]
public static ArraySegment`1<byte> GetArray(ReadOnlyMemory`1<byte> memory);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.IOQueue : PipeScheduler {
    private ConcurrentQueue`1<Work> _workItems;
    private int _doingWork;
    [NullableContextAttribute("2")]
public virtual void Schedule(Action`1<object> action, object state);
    private sealed virtual override void System.Threading.IThreadPoolWorkItem.Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketAwaitableEventArgs : SocketAsyncEventArgs {
    private static Action`1<object> _continuationCompleted;
    private PipeScheduler _ioScheduler;
    private Action`1 modreq(System.Runtime.CompilerServices.IsVolatile) _continuation;
    public SocketAwaitableEventArgs(PipeScheduler ioScheduler);
    private static SocketAwaitableEventArgs();
    protected virtual void OnCompleted(SocketAsyncEventArgs _);
    public sealed virtual SocketOperationResult GetResult(short token);
    protected static SocketException CreateException(SocketError e);
    public sealed virtual ValueTaskSourceStatus GetStatus(short token);
    [NullableContextAttribute("2")]
public sealed virtual void OnCompleted(Action`1<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection : TransportConnection {
    private static int MinAllocBufferSize;
    private Socket _socket;
    private ILogger _logger;
    private SocketReceiver _receiver;
    private SocketSender _sender;
    private SocketSenderPool _socketSenderPool;
    private IDuplexPipe _originalTransport;
    private CancellationTokenSource _connectionClosedTokenSource;
    private object _shutdownLock;
    private Exception modreq(System.Runtime.CompilerServices.IsVolatile) _shutdownReason;
    private Task _sendingTask;
    private Task _receivingTask;
    private TaskCompletionSource _waitForConnectionClosedTcs;
    private bool _connectionClosed;
    private bool _waitForData;
    private bool _finOnError;
    [CompilerGeneratedAttribute]
private MemoryPool`1<byte> <MemoryPool>k__BackingField;
    public PipeWriter Input { get; }
    public PipeReader Output { get; }
    public MemoryPool`1<byte> MemoryPool { get; }
    public Socket Socket { get; }
    internal SocketConnection(Socket socket, MemoryPool`1<byte> memoryPool, PipeScheduler socketScheduler, ILogger logger, SocketSenderPool socketSenderPool, PipeOptions inputOptions, PipeOptions outputOptions, bool waitForData, bool finOnError);
    private static SocketConnection();
    public PipeWriter get_Input();
    public PipeReader get_Output();
    [CompilerGeneratedAttribute]
public virtual MemoryPool`1<byte> get_MemoryPool();
    public void Start();
    public virtual void Abort(ConnectionAbortedException abortReason);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection/<DisposeAsync>d__26")]
public virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection/<DoReceive>d__27")]
private Task DoReceive();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection/<DoSend>d__28")]
private Task DoSend();
    private void FireConnectionClosed();
    private void Shutdown(Exception shutdownReason);
    private void CancelConnectionClosedToken();
    private static bool IsConnectionResetError(SocketError errorCode);
    private static bool IsConnectionAbortError(SocketError errorCode);
    public sealed virtual Socket get_Socket();
    private void InitializeFeatures();
    [CompilerGeneratedAttribute]
private bool <DoReceive>g__IsNormalCompletion|27_0(SocketOperationResult result, <>c__DisplayClass27_0& );
}
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketOperationResult : ValueType {
    [NullableAttribute("2")]
public SocketException SocketError;
    public int BytesTransferred;
    [MemberNotNullWhenAttribute("True", "SocketError")]
public bool HasError { get; }
    public SocketOperationResult(int bytesTransferred);
    [NullableContextAttribute("1")]
public SocketOperationResult(SocketException exception);
    [MemberNotNullWhenAttribute("True", "SocketError")]
public bool get_HasError();
}
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketReceiver : SocketAwaitableEventArgs {
    [NullableContextAttribute("1")]
public SocketReceiver(PipeScheduler ioScheduler);
    public ValueTask`1<SocketOperationResult> WaitForDataAsync(Socket socket);
    public ValueTask`1<SocketOperationResult> ReceiveAsync(Socket socket, Memory`1<byte> buffer);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketSender : SocketAwaitableEventArgs {
    private List`1<ArraySegment`1<byte>> _bufferList;
    [NullableContextAttribute("1")]
public SocketSender(PipeScheduler scheduler);
    public ValueTask`1<SocketOperationResult> SendAsync(Socket socket, ReadOnlySequence`1& buffers);
    public void Reset();
    private ValueTask`1<SocketOperationResult> SendAsync(Socket socket, ReadOnlyMemory`1<byte> memory);
    private void SetBufferList(ReadOnlySequence`1& buffer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketSenderPool : object {
    private static int MaxQueueSize;
    private ConcurrentQueue`1<SocketSender> _queue;
    private int _count;
    private PipeScheduler _scheduler;
    private bool _disposed;
    public PipeScheduler Scheduler { get; }
    public SocketSenderPool(PipeScheduler scheduler);
    public PipeScheduler get_Scheduler();
    public SocketSender Rent();
    public void Return(SocketSender sender);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketsLog : object {
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`3<ILogger, string, Exception> __ConnectionReadFinCoreCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`4<ILogger, string, string, Exception> __ConnectionWriteFinCoreCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`4<ILogger, string, string, Exception> __ConnectionWriteRstCoreCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`3<ILogger, string, Exception> __ConnectionErrorCoreCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`3<ILogger, string, Exception> __ConnectionResetCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`3<ILogger, string, Exception> __ConnectionPauseCoreCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`3<ILogger, string, Exception> __ConnectionResumeCoreCallback;
    private static SocketsLog();
    [LoggerMessageAttribute("6", "1", "Connection id "{ConnectionId}" received FIN.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static void ConnectionReadFinCore(ILogger logger, string connectionId);
    public static void ConnectionReadFin(ILogger logger, SocketConnection connection);
    [LoggerMessageAttribute("7", "1", "Connection id "{ConnectionId}" sending FIN because: "{Reason}"")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static void ConnectionWriteFinCore(ILogger logger, string connectionId, string reason);
    public static void ConnectionWriteFin(ILogger logger, SocketConnection connection, string reason);
    [LoggerMessageAttribute("8", "1", "Connection id "{ConnectionId}" sending RST because: "{Reason}"")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static void ConnectionWriteRstCore(ILogger logger, string connectionId, string reason);
    public static void ConnectionWriteRst(ILogger logger, SocketConnection connection, string reason);
    [LoggerMessageAttribute("14", "1", "Connection id "{ConnectionId}" communication error.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static void ConnectionErrorCore(ILogger logger, string connectionId, Exception ex);
    public static void ConnectionError(ILogger logger, SocketConnection connection, Exception ex);
    [LoggerMessageAttribute("19", "1", "Connection id "{ConnectionId}" reset.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void ConnectionReset(ILogger logger, string connectionId);
    public static void ConnectionReset(ILogger logger, SocketConnection connection);
    [LoggerMessageAttribute("4", "1", "Connection id "{ConnectionId}" paused.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static void ConnectionPauseCore(ILogger logger, string connectionId);
    public static void ConnectionPause(ILogger logger, SocketConnection connection);
    [LoggerMessageAttribute("5", "1", "Connection id "{ConnectionId}" resumed.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static void ConnectionResumeCore(ILogger logger, string connectionId);
    public static void ConnectionResume(ILogger logger, SocketConnection connection);
}
public class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketConnectionContextFactory : object {
    private SocketConnectionFactoryOptions _options;
    private ILogger _logger;
    private int _settingsCount;
    private QueueSettings[] _settings;
    private long _settingsIndex;
    [NullableContextAttribute("1")]
public SocketConnectionContextFactory(SocketConnectionFactoryOptions options, ILogger logger);
    [NullableContextAttribute("1")]
public ConnectionContext Create(Socket socket);
    public sealed virtual void Dispose();
}
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketConnectionFactory : object {
    private SocketTransportOptions _options;
    private MemoryPool`1<byte> _memoryPool;
    private ILogger _trace;
    private PipeOptions _inputOptions;
    private PipeOptions _outputOptions;
    private SocketSenderPool _socketSenderPool;
    [NullableContextAttribute("1")]
public SocketConnectionFactory(IOptions`1<SocketTransportOptions> options, ILoggerFactory loggerFactory);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketConnectionFactory/<ConnectAsync>d__7")]
public sealed virtual ValueTask`1<ConnectionContext> ConnectAsync(EndPoint endpoint, CancellationToken cancellationToken);
    public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketConnectionFactoryOptions : object {
    [CompilerGeneratedAttribute]
private bool <FinOnError>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IOQueueCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WaitForDataBeforeAllocatingBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxReadBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxWriteBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UnsafePreferInlineScheduling>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<MemoryPool`1<byte>> <MemoryPoolFactory>k__BackingField;
    internal bool FinOnError { get; internal set; }
    public int IOQueueCount { get; public set; }
    public bool WaitForDataBeforeAllocatingBuffer { get; public set; }
    public Nullable`1<long> MaxReadBufferSize { get; public set; }
    public Nullable`1<long> MaxWriteBufferSize { get; public set; }
    public bool UnsafePreferInlineScheduling { get; public set; }
    internal Func`1<MemoryPool`1<byte>> MemoryPoolFactory { get; internal set; }
    internal SocketConnectionFactoryOptions(SocketTransportOptions transportOptions);
    [CompilerGeneratedAttribute]
internal bool get_FinOnError();
    [CompilerGeneratedAttribute]
internal void set_FinOnError(bool value);
    [CompilerGeneratedAttribute]
public int get_IOQueueCount();
    [CompilerGeneratedAttribute]
public void set_IOQueueCount(int value);
    [CompilerGeneratedAttribute]
public bool get_WaitForDataBeforeAllocatingBuffer();
    [CompilerGeneratedAttribute]
public void set_WaitForDataBeforeAllocatingBuffer(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxReadBufferSize();
    [CompilerGeneratedAttribute]
public void set_MaxReadBufferSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxWriteBufferSize();
    [CompilerGeneratedAttribute]
public void set_MaxWriteBufferSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public bool get_UnsafePreferInlineScheduling();
    [CompilerGeneratedAttribute]
public void set_UnsafePreferInlineScheduling(bool value);
    [CompilerGeneratedAttribute]
internal Func`1<MemoryPool`1<byte>> get_MemoryPoolFactory();
    [CompilerGeneratedAttribute]
internal void set_MemoryPoolFactory(Func`1<MemoryPool`1<byte>> value);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketConnectionListener : object {
    private SocketConnectionContextFactory _factory;
    private ILogger _logger;
    private Socket _listenSocket;
    private SocketTransportOptions _options;
    [CompilerGeneratedAttribute]
private EndPoint <EndPoint>k__BackingField;
    [NullableAttribute("1")]
public EndPoint EndPoint { get; private set; }
    [NullableContextAttribute("1")]
internal SocketConnectionListener(EndPoint endpoint, SocketTransportOptions options, ILoggerFactory loggerFactory);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual EndPoint get_EndPoint();
    [CompilerGeneratedAttribute]
private void set_EndPoint(EndPoint value);
    internal void Bind();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketConnectionListener/<AcceptAsync>d__10")]
public sealed virtual ValueTask`1<ConnectionContext> AcceptAsync(CancellationToken cancellationToken);
    public sealed virtual ValueTask UnbindAsync(CancellationToken cancellationToken);
    public sealed virtual ValueTask DisposeAsync();
}
internal static class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketsStrings : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string OnlyIPEndPointsSupported { get; }
    internal static string TransportAlreadyBound { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_OnlyIPEndPointsSupported();
    internal static string get_TransportAlreadyBound();
}
public class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketTransportFactory : object {
    private SocketTransportOptions _options;
    private ILoggerFactory _logger;
    [NullableContextAttribute("1")]
public SocketTransportFactory(IOptions`1<SocketTransportOptions> options, ILoggerFactory loggerFactory);
    [NullableContextAttribute("1")]
public sealed virtual ValueTask`1<IConnectionListener> BindAsync(EndPoint endpoint, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public sealed virtual bool CanBind(EndPoint endpoint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketTransportOptions : object {
    private static string FinOnErrorSwitch;
    private static bool _finOnError;
    [CompilerGeneratedAttribute]
private bool <FinOnError>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IOQueueCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WaitForDataBeforeAllocatingBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Backlog>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxReadBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxWriteBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UnsafePreferInlineScheduling>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<EndPoint, Socket> <CreateBoundListenSocket>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<MemoryPool`1<byte>> <MemoryPoolFactory>k__BackingField;
    internal bool FinOnError { get; internal set; }
    public int IOQueueCount { get; public set; }
    public bool WaitForDataBeforeAllocatingBuffer { get; public set; }
    public bool NoDelay { get; public set; }
    public int Backlog { get; public set; }
    public Nullable`1<long> MaxReadBufferSize { get; public set; }
    public Nullable`1<long> MaxWriteBufferSize { get; public set; }
    public bool UnsafePreferInlineScheduling { get; public set; }
    public Func`2<EndPoint, Socket> CreateBoundListenSocket { get; public set; }
    internal Func`1<MemoryPool`1<byte>> MemoryPoolFactory { get; internal set; }
    private static SocketTransportOptions();
    [CompilerGeneratedAttribute]
internal bool get_FinOnError();
    [CompilerGeneratedAttribute]
internal void set_FinOnError(bool value);
    [CompilerGeneratedAttribute]
public int get_IOQueueCount();
    [CompilerGeneratedAttribute]
public void set_IOQueueCount(int value);
    [CompilerGeneratedAttribute]
public bool get_WaitForDataBeforeAllocatingBuffer();
    [CompilerGeneratedAttribute]
public void set_WaitForDataBeforeAllocatingBuffer(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoDelay();
    [CompilerGeneratedAttribute]
public void set_NoDelay(bool value);
    [CompilerGeneratedAttribute]
public int get_Backlog();
    [CompilerGeneratedAttribute]
public void set_Backlog(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxReadBufferSize();
    [CompilerGeneratedAttribute]
public void set_MaxReadBufferSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxWriteBufferSize();
    [CompilerGeneratedAttribute]
public void set_MaxWriteBufferSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public bool get_UnsafePreferInlineScheduling();
    [CompilerGeneratedAttribute]
public void set_UnsafePreferInlineScheduling(bool value);
    [CompilerGeneratedAttribute]
public Func`2<EndPoint, Socket> get_CreateBoundListenSocket();
    [CompilerGeneratedAttribute]
public void set_CreateBoundListenSocket(Func`2<EndPoint, Socket> value);
    public static Socket CreateDefaultBoundListenSocket(EndPoint endpoint);
    [CompilerGeneratedAttribute]
internal Func`1<MemoryPool`1<byte>> get_MemoryPoolFactory();
    [CompilerGeneratedAttribute]
internal void set_MemoryPoolFactory(Func`1<MemoryPool`1<byte>> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Buffers.DiagnosticMemoryPool : MemoryPool`1<byte> {
    private MemoryPool`1<byte> _pool;
    private bool _allowLateReturn;
    private bool _rentTracking;
    private object _syncObj;
    private HashSet`1<DiagnosticPoolBlock> _blocks;
    private List`1<Exception> _blockAccessExceptions;
    private TaskCompletionSource _allBlocksReturned;
    private int _totalBlocks;
    private static int AnySize;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    public bool IsDisposed { get; private set; }
    public int MaxBufferSize { get; }
    public DiagnosticMemoryPool(MemoryPool`1<byte> pool, bool allowLateReturn, bool rentTracking);
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public virtual IMemoryOwner`1<byte> Rent(int size);
    public virtual int get_MaxBufferSize();
    internal void Return(DiagnosticPoolBlock block);
    internal void ReportException(Exception exception);
    protected virtual void Dispose(bool disposing);
    private void SetAllBlocksReturned();
    private AggregateException CreateAccessExceptions();
    [AsyncStateMachineAttribute("System.Buffers.DiagnosticMemoryPool/<WhenAllBlocksReturnedAsync>d__22")]
public Task WhenAllBlocksReturnedAsync(TimeSpan timeout);
}
internal class System.Buffers.DiagnosticPoolBlock : MemoryManager`1<byte> {
    private DiagnosticMemoryPool _pool;
    private IMemoryOwner`1<byte> _memoryOwner;
    private Nullable`1<MemoryHandle> _memoryHandle;
    private Memory`1<byte> _memory;
    private object _syncObj;
    private bool _isDisposed;
    private int _pinCount;
    [CompilerGeneratedAttribute]
private StackTrace <Leaser>k__BackingField;
    public Memory`1<byte> Memory { get; }
    [NullableAttribute("2")]
public StackTrace Leaser { get; public set; }
    [NullableContextAttribute("1")]
internal DiagnosticPoolBlock(DiagnosticMemoryPool pool, IMemoryOwner`1<byte> memoryOwner);
    public virtual Memory`1<byte> get_Memory();
    protected virtual void Dispose(bool disposing);
    public virtual Span`1<byte> GetSpan();
    public virtual MemoryHandle Pin(int byteOffset);
    protected virtual bool TryGetArray(ArraySegment`1& segment);
    public virtual void Unpin();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public StackTrace get_Leaser();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Leaser(StackTrace value);
    public void Track();
}
internal class System.Buffers.MemoryPoolBlock : object {
    [CompilerGeneratedAttribute]
private PinnedBlockMemoryPool <Pool>k__BackingField;
    [CompilerGeneratedAttribute]
private Memory`1<byte> <Memory>k__BackingField;
    [NullableAttribute("1")]
public PinnedBlockMemoryPool Pool { get; }
    public Memory`1<byte> Memory { get; }
    [NullableContextAttribute("1")]
internal MemoryPoolBlock(PinnedBlockMemoryPool pool, int length);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public PinnedBlockMemoryPool get_Pool();
    [CompilerGeneratedAttribute]
public sealed virtual Memory`1<byte> get_Memory();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Buffers.MemoryPoolThrowHelper : object {
    public static void ThrowArgumentOutOfRangeException(int sourceLength, int offset);
    private static ArgumentOutOfRangeException GetArgumentOutOfRangeException(int sourceLength, int offset);
    public static void ThrowInvalidOperationException_PinCountZero(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_ReturningPinnedBlock(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_DoubleDispose();
    public static void ThrowInvalidOperationException_BlockDoubleDispose(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_BlockReturnedToDisposedPool(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_BlockIsBackedByDisposedSlab(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_DisposingPoolWithActiveBlocks(int returned, int total, DiagnosticPoolBlock[] blocks);
    public static void ThrowInvalidOperationException_BlocksWereNotReturnedInTime(int returned, int total, DiagnosticPoolBlock[] blocks);
    private static string GenerateMessage(string message, DiagnosticPoolBlock[] blocks);
    public static void ThrowArgumentOutOfRangeException_BufferRequestTooLarge(int maxSize);
    public static void ThrowObjectDisposedException(ExceptionArgument argument);
    private static ArgumentOutOfRangeException GetArgumentOutOfRangeException_BufferRequestTooLarge(int maxSize);
    private static ObjectDisposedException GetObjectDisposedException(ExceptionArgument argument);
    private static string GetArgumentName(ExceptionArgument argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Buffers.PinnedBlockMemoryPool : MemoryPool`1<byte> {
    private static int _blockSize;
    [CompilerGeneratedAttribute]
private int <MaxBufferSize>k__BackingField;
    private ConcurrentQueue`1<MemoryPoolBlock> _blocks;
    private bool _isDisposed;
    private object _disposeSync;
    private static int AnySize;
    public int MaxBufferSize { get; }
    public static int BlockSize { get; }
    [CompilerGeneratedAttribute]
public virtual int get_MaxBufferSize();
    public static int get_BlockSize();
    public virtual IMemoryOwner`1<byte> Rent(int size);
    internal void Return(MemoryPoolBlock block);
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Buffers.PinnedBlockMemoryPoolFactory : object {
    public static MemoryPool`1<byte> Create();
    public static MemoryPool`1<byte> CreatePinnedBlockMemoryPool();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.IO.Pipelines.DuplexPipe : object {
    [CompilerGeneratedAttribute]
private PipeReader <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private PipeWriter <Output>k__BackingField;
    public PipeReader Input { get; }
    public PipeWriter Output { get; }
    public DuplexPipe(PipeReader reader, PipeWriter writer);
    [CompilerGeneratedAttribute]
public sealed virtual PipeReader get_Input();
    [CompilerGeneratedAttribute]
public sealed virtual PipeWriter get_Output();
    public static DuplexPipePair CreateConnectionPair(PipeOptions inputOptions, PipeOptions outputOptions);
}
internal class UnmanagedBufferAllocator : ValueType {
    private int _blockSize;
    private int _currentBlockCount;
    private Void** _currentAlloc;
    private Byte* _currentBlock;
    public static int DefaultBlockSize { get; }
    public UnmanagedBufferAllocator(int blockSize);
    public static int get_DefaultBlockSize();
    public T* AllocAsPointer(int count);
    public Span`1<T> AllocAsSpan(int count);
    public Byte* GetHeaderEncodedBytes(string myString, Int32& length);
    public sealed virtual void Dispose();
    private Span`1<byte> GetSpan(int sizeHint, Boolean& mustCommit);
    private void Commit(int count);
    private Byte* Alloc(int size);
    private void NewBlock();
}
