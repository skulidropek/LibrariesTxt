[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.WebSocketMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseWebSockets(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseWebSockets(IApplicationBuilder app, WebSocketOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Builder.WebSocketOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <KeepAliveInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReceiveBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <AllowedOrigins>k__BackingField;
    public TimeSpan KeepAliveInterval { get; public set; }
    [ObsoleteAttribute("Setting this property has no effect. It will be removed in a future version.")]
public int ReceiveBufferSize { get; public set; }
    public IList`1<string> AllowedOrigins { get; }
    [CompilerGeneratedAttribute]
public TimeSpan get_KeepAliveInterval();
    [CompilerGeneratedAttribute]
public void set_KeepAliveInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_ReceiveBufferSize();
    [CompilerGeneratedAttribute]
public void set_ReceiveBufferSize(int value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_AllowedOrigins();
}
internal static class Microsoft.AspNetCore.WebSockets.Constants : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ObsoleteAttribute("This type is obsolete and will be removed in a future version. The recommended alternative is Microsoft.AspNetCore.Http.WebSocketAcceptContext.")]
public class Microsoft.AspNetCore.WebSockets.ExtendedWebSocketAcceptContext : WebSocketAcceptContext {
    [CompilerGeneratedAttribute]
private string <SubProtocol>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ReceiveBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <KeepAliveInterval>k__BackingField;
    public string SubProtocol { get; public set; }
    [ObsoleteAttribute("Setting this property has no effect. It will be removed in a future version.")]
public Nullable`1<int> ReceiveBufferSize { get; public set; }
    public Nullable`1<TimeSpan> KeepAliveInterval { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_SubProtocol();
    [CompilerGeneratedAttribute]
public virtual void set_SubProtocol(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ReceiveBufferSize();
    [CompilerGeneratedAttribute]
public void set_ReceiveBufferSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_KeepAliveInterval();
    [CompilerGeneratedAttribute]
public void set_KeepAliveInterval(Nullable`1<TimeSpan> value);
}
internal static class Microsoft.AspNetCore.WebSockets.HandshakeHelpers : object {
    private static ReadOnlySpan`1<byte> EncodedWebSocketKey { get; }
    private static ReadOnlySpan`1<byte> get_EncodedWebSocketKey();
    [NullableContextAttribute("1")]
public static void GenerateResponseHeaders(bool isHttp1, IHeaderDictionary requestHeaders, string subProtocol, IHeaderDictionary responseHeaders);
    [NullableContextAttribute("1")]
public static bool IsRequestKeyValid(string value);
    [NullableContextAttribute("1")]
public static string CreateResponseKey(string requestKey);
    public static bool ParseDeflateOptions(ReadOnlySpan`1<char> extension, bool serverContextTakeover, int serverMaxWindowBits, WebSocketDeflateOptions& parsedOptions, String& response);
    [CompilerGeneratedAttribute]
internal static bool <ParseDeflateOptions>g__ParseWindowBits|5_0(ReadOnlySpan`1<char> value, Nullable`1& parsedValue);
}
internal class Microsoft.AspNetCore.WebSockets.ServerWebSocket : WebSocket {
    private WebSocket _wrappedSocket;
    private HttpContext _context;
    public Nullable`1<WebSocketCloseStatus> CloseStatus { get; }
    [NullableAttribute("2")]
public string CloseStatusDescription { get; }
    public WebSocketState State { get; }
    [NullableAttribute("2")]
public string SubProtocol { get; }
    [NullableContextAttribute("1")]
internal ServerWebSocket(WebSocket wrappedSocket, HttpContext context);
    public virtual Nullable`1<WebSocketCloseStatus> get_CloseStatus();
    [NullableContextAttribute("2")]
public virtual string get_CloseStatusDescription();
    public virtual WebSocketState get_State();
    [NullableContextAttribute("2")]
public virtual string get_SubProtocol();
    public virtual void Abort();
    [NullableContextAttribute("1")]
public virtual Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public virtual Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public virtual void Dispose();
    public virtual Task`1<WebSocketReceiveResult> ReceiveAsync(ArraySegment`1<byte> buffer, CancellationToken cancellationToken);
    public virtual ValueTask`1<ValueWebSocketReceiveResult> ReceiveAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual ValueTask SendAsync(ReadOnlyMemory`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    public virtual ValueTask SendAsync(ReadOnlyMemory`1<byte> buffer, WebSocketMessageType messageType, WebSocketMessageFlags messageFlags, CancellationToken cancellationToken);
    public virtual Task SendAsync(ArraySegment`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.WebSockets.WebSocketDeflateConstants : object {
    public static int MaxExtensionLength;
    public static string Extension;
    public static string ClientMaxWindowBits;
    public static string ClientNoContextTakeover;
    public static string ServerMaxWindowBits;
    public static string ServerNoContextTakeover;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.WebSockets.WebSocketMiddleware : object {
    private RequestDelegate _next;
    private WebSocketOptions _options;
    private ILogger _logger;
    private bool _anyOriginAllowed;
    private List`1<string> _allowedOrigins;
    public WebSocketMiddleware(RequestDelegate next, IOptions`1<WebSocketOptions> options, ILoggerFactory loggerFactory);
    public Task Invoke(HttpContext context);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.WebSockets.WebSocketsDependencyInjectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IServiceCollection AddWebSockets(IServiceCollection services, Action`1<WebSocketOptions> configure);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[DefaultMemberAttribute("Item")]
internal class System.Text.ValueStringBuilder : ValueType {
    private Char[] _arrayToReturnToPool;
    private Span`1<char> _chars;
    private int _pos;
    public int Length { get; public set; }
    public int Capacity { get; }
    public Char& Item { get; }
    public Span`1<char> RawChars { get; }
    public ValueStringBuilder(Span`1<char> initialBuffer);
    public ValueStringBuilder(int initialCapacity);
    public int get_Length();
    public void set_Length(int value);
    public int get_Capacity();
    public void EnsureCapacity(int capacity);
    public Char& GetPinnableReference();
    public Char& GetPinnableReference(bool terminate);
    public Char& get_Item(int index);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public Span`1<char> get_RawChars();
    public ReadOnlySpan`1<char> AsSpan(bool terminate);
    public ReadOnlySpan`1<char> AsSpan();
    public ReadOnlySpan`1<char> AsSpan(int start);
    public ReadOnlySpan`1<char> AsSpan(int start, int length);
    public bool TryCopyTo(Span`1<char> destination, Int32& charsWritten);
    public void Insert(int index, char value, int count);
    [NullableContextAttribute("2")]
public void Insert(int index, string s);
    public void Append(char c);
    [NullableContextAttribute("2")]
public void Append(string s);
    private void AppendSlow(string s);
    public void Append(char c, int count);
    public void Append(Char* value, int length);
    public void Append(ReadOnlySpan`1<char> value);
    public Span`1<char> AppendSpan(int length);
    private void GrowAndAppend(char c);
    private void Grow(int additionalCapacityBeyondPos);
    public void Dispose();
}
