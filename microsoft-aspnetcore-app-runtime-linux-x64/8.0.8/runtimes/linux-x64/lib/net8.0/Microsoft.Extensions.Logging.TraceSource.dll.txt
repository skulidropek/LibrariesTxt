internal class Microsoft.Extensions.Logging.TraceSource.TraceSourceLogger : object {
    private TraceSource _traceSource;
    public TraceSourceLogger(TraceSource traceSource);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    private static TraceEventType GetEventType(LogLevel logLevel);
    public sealed virtual IDisposable BeginScope(TState state);
}
[ProviderAliasAttribute("TraceSource")]
public class Microsoft.Extensions.Logging.TraceSource.TraceSourceLoggerProvider : object {
    private SourceSwitch _rootSourceSwitch;
    private TraceListener _rootTraceListener;
    private ConcurrentDictionary`2<string, TraceSource> _sources;
    private bool _disposed;
    [NullableContextAttribute("1")]
public TraceSourceLoggerProvider(SourceSwitch rootSourceSwitch);
    [NullableContextAttribute("1")]
public TraceSourceLoggerProvider(SourceSwitch rootSourceSwitch, TraceListener rootTraceListener);
    [NullableContextAttribute("1")]
public sealed virtual ILogger CreateLogger(string name);
    private TraceSource GetOrAddTraceSource(string name);
    private TraceSource InitializeTraceSource(string traceSourceName);
    private static string ParentSourceName(string traceSourceName);
    private static bool HasDefaultListeners(TraceSource traceSource);
    private static bool HasDefaultSwitch(TraceSource traceSource);
    public sealed virtual void Dispose();
}
internal class Microsoft.Extensions.Logging.TraceSource.TraceSourceScope : object {
    private bool _isDisposed;
    public TraceSourceScope(object state);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.TraceSourceFactoryExtensions : object {
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddTraceSource(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddTraceSource(ILoggerFactory factory, SourceSwitch sourceSwitch, TraceListener listener);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddTraceSource(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddTraceSource(ILoggerFactory factory, SourceSwitch sourceSwitch);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddTraceSource(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddTraceSource(ILoggerFactory factory, string switchName, TraceListener listener);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddTraceSource(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddTraceSource(ILoggerFactory factory, string switchName);
    [ExtensionAttribute]
public static ILoggingBuilder AddTraceSource(ILoggingBuilder builder, string switchName);
    [ExtensionAttribute]
public static ILoggingBuilder AddTraceSource(ILoggingBuilder builder, string switchName, TraceListener listener);
    [ExtensionAttribute]
public static ILoggingBuilder AddTraceSource(ILoggingBuilder builder, SourceSwitch sourceSwitch);
    [ExtensionAttribute]
public static ILoggingBuilder AddTraceSource(ILoggingBuilder builder, SourceSwitch sourceSwitch, TraceListener listener);
}
internal static class System.ThrowHelper : object {
    internal static void ThrowIfNull(object argument, string paramName);
    [DoesNotReturnAttribute]
private static void Throw(string paramName);
    public static string IfNullOrWhitespace(string argument, string paramName);
}
