[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.Cors.CorsApplicationModelProvider : object {
    private MvcOptions _mvcOptions;
    public int Order { get; }
    public CorsApplicationModelProvider(IOptions`1<MvcOptions> mvcOptions);
    public sealed virtual int get_Order();
    public sealed virtual void OnProvidersExecuted(ApplicationModelProviderContext context);
    public sealed virtual void OnProvidersExecuting(ApplicationModelProviderContext context);
    private static void ConfigureCorsFilters(ApplicationModelProviderContext context);
    private static void ConfigureCorsActionConstraint(ActionModel actionModel);
}
public class Microsoft.AspNetCore.Mvc.Cors.CorsAuthorizationFilter : object {
    private ICorsService _corsService;
    private ICorsPolicyProvider _corsPolicyProvider;
    private ILogger _logger;
    [CompilerGeneratedAttribute]
private string <PolicyName>k__BackingField;
    [NullableAttribute("2")]
public string PolicyName { get; public set; }
    public int Order { get; }
    [NullableContextAttribute("1")]
public CorsAuthorizationFilter(ICorsService corsService, ICorsPolicyProvider policyProvider);
    [NullableContextAttribute("1")]
public CorsAuthorizationFilter(ICorsService corsService, ICorsPolicyProvider policyProvider, ILoggerFactory loggerFactory);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_PolicyName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_PolicyName(string value);
    public sealed virtual int get_Order();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Cors.CorsAuthorizationFilter/<OnAuthorizationAsync>d__11")]
public sealed virtual Task OnAuthorizationAsync(AuthorizationFilterContext context);
}
internal class Microsoft.AspNetCore.Mvc.Cors.CorsAuthorizationFilterFactory : object {
    private string _policyName;
    public int Order { get; }
    public bool IsReusable { get; }
    [NullableContextAttribute("2")]
public CorsAuthorizationFilterFactory(string policyName);
    public sealed virtual int get_Order();
    public sealed virtual bool get_IsReusable();
    [NullableContextAttribute("1")]
public sealed virtual IFilterMetadata CreateInstance(IServiceProvider serviceProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.Cors.CorsHttpMethodActionConstraint : HttpMethodActionConstraint {
    private string OriginHeader;
    private string AccessControlRequestMethod;
    public CorsHttpMethodActionConstraint(HttpMethodActionConstraint constraint);
    public virtual bool Accept(ActionConstraintContext context);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Mvc.Cors.CorsLoggerExtensions : object {
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`3<ILogger, Type, Exception> __NotMostEffectiveFilterCallback;
    private static CorsLoggerExtensions();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LoggerMessageAttribute("1", "1", "Skipping the execution of current filter as its not the most effective filter implementing the policy {FilterPolicy}.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void NotMostEffectiveFilter(ILogger logger, Type filterPolicy);
}
internal class Microsoft.AspNetCore.Mvc.Cors.DisableCorsAuthorizationFilter : object {
    public int Order { get; }
    public sealed virtual int get_Order();
    [NullableContextAttribute("1")]
public sealed virtual Task OnAuthorizationAsync(AuthorizationFilterContext context);
}
internal interface Microsoft.AspNetCore.Mvc.Cors.ICorsAuthorizationFilter {
}
internal static class Microsoft.AspNetCore.Mvc.Cors.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string CorsAuthorizationFilter_MissingCorsPolicy { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_CorsAuthorizationFilter_MissingCorsPolicy();
    internal static string FormatCorsAuthorizationFilter_MissingCorsPolicy(object p0);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.MvcCorsMvcCoreBuilderExtensions : object {
    [ExtensionAttribute]
public static IMvcCoreBuilder AddCors(IMvcCoreBuilder builder);
    [ExtensionAttribute]
public static IMvcCoreBuilder AddCors(IMvcCoreBuilder builder, Action`1<CorsOptions> setupAction);
    [ExtensionAttribute]
public static IMvcCoreBuilder ConfigureCors(IMvcCoreBuilder builder, Action`1<CorsOptions> setupAction);
    internal static void AddCorsServices(IServiceCollection services);
}
