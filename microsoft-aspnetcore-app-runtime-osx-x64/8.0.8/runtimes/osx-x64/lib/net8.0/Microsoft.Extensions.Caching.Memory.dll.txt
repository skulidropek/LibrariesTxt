internal static class FxResources.Microsoft.Extensions.Caching.Memory.SR : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache : object {
    private MemoryCache _memCache;
    public MemoryDistributedCache(IOptions`1<MemoryDistributedCacheOptions> optionsAccessor);
    public MemoryDistributedCache(IOptions`1<MemoryDistributedCacheOptions> optionsAccessor, ILoggerFactory loggerFactory);
    public sealed virtual Byte[] Get(string key);
    public sealed virtual Task`1<Byte[]> GetAsync(string key, CancellationToken token);
    public sealed virtual void Set(string key, Byte[] value, DistributedCacheEntryOptions options);
    public sealed virtual Task SetAsync(string key, Byte[] value, DistributedCacheEntryOptions options, CancellationToken token);
    public sealed virtual void Refresh(string key);
    public sealed virtual Task RefreshAsync(string key, CancellationToken token);
    public sealed virtual void Remove(string key);
    public sealed virtual Task RemoveAsync(string key, CancellationToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Caching.Memory.CacheEntry : object {
    private static Action`1<object> ExpirationCallback;
    private static AsyncLocal`1<CacheEntry> _current;
    private MemoryCache _cache;
    private CacheEntryTokens _tokens;
    private TimeSpan _absoluteExpirationRelativeToNow;
    private TimeSpan _slidingExpiration;
    private long _size;
    private CacheEntry _previous;
    private object _value;
    private long _absoluteExpirationTicks;
    private short _absoluteExpirationOffsetMinutes;
    private bool _isDisposed;
    private bool _isExpired;
    private bool _isValueSet;
    private byte _evictionReason;
    private byte _priority;
    private static int NotSet;
    [CompilerGeneratedAttribute]
private object <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastAccessed>k__BackingField;
    [NullableAttribute("2")]
internal static CacheEntry Current { get; }
    internal long AbsoluteExpirationTicks { get; internal set; }
    private Nullable`1<DateTimeOffset> Microsoft.Extensions.Caching.Memory.ICacheEntry.AbsoluteExpiration { get; private set; }
    internal TimeSpan AbsoluteExpirationRelativeToNow { get; }
    private Nullable`1<TimeSpan> Microsoft.Extensions.Caching.Memory.ICacheEntry.AbsoluteExpirationRelativeToNow { get; private set; }
    public Nullable`1<TimeSpan> SlidingExpiration { get; public set; }
    [MemberNotNullAttribute("_tokens")]
public IList`1<IChangeToken> ExpirationTokens { get; }
    [MemberNotNullAttribute("_tokens")]
public IList`1<PostEvictionCallbackRegistration> PostEvictionCallbacks { get; }
    public CacheItemPriority Priority { get; public set; }
    internal long Size { get; }
    private Nullable`1<long> Microsoft.Extensions.Caching.Memory.ICacheEntry.Size { get; private set; }
    public object Key { get; }
    [NullableAttribute("2")]
public object Value { get; public set; }
    internal DateTime LastAccessed { get; internal set; }
    internal EvictionReason EvictionReason { get; private set; }
    internal CacheEntry(object key, MemoryCache memoryCache);
    private static CacheEntry();
    [NullableContextAttribute("2")]
internal static CacheEntry get_Current();
    internal long get_AbsoluteExpirationTicks();
    internal void set_AbsoluteExpirationTicks(long value);
    private sealed virtual override Nullable`1<DateTimeOffset> Microsoft.Extensions.Caching.Memory.ICacheEntry.get_AbsoluteExpiration();
    private sealed virtual override void Microsoft.Extensions.Caching.Memory.ICacheEntry.set_AbsoluteExpiration(Nullable`1<DateTimeOffset> value);
    internal TimeSpan get_AbsoluteExpirationRelativeToNow();
    private sealed virtual override Nullable`1<TimeSpan> Microsoft.Extensions.Caching.Memory.ICacheEntry.get_AbsoluteExpirationRelativeToNow();
    private sealed virtual override void Microsoft.Extensions.Caching.Memory.ICacheEntry.set_AbsoluteExpirationRelativeToNow(Nullable`1<TimeSpan> value);
    public sealed virtual Nullable`1<TimeSpan> get_SlidingExpiration();
    public sealed virtual void set_SlidingExpiration(Nullable`1<TimeSpan> value);
    [MemberNotNullAttribute("_tokens")]
public sealed virtual IList`1<IChangeToken> get_ExpirationTokens();
    [MemberNotNullAttribute("_tokens")]
public sealed virtual IList`1<PostEvictionCallbackRegistration> get_PostEvictionCallbacks();
    public sealed virtual CacheItemPriority get_Priority();
    public sealed virtual void set_Priority(CacheItemPriority value);
    internal long get_Size();
    private sealed virtual override Nullable`1<long> Microsoft.Extensions.Caching.Memory.ICacheEntry.get_Size();
    private sealed virtual override void Microsoft.Extensions.Caching.Memory.ICacheEntry.set_Size(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Key();
    [NullableContextAttribute("2")]
public sealed virtual object get_Value();
    [NullableContextAttribute("2")]
public sealed virtual void set_Value(object value);
    [CompilerGeneratedAttribute]
internal DateTime get_LastAccessed();
    [CompilerGeneratedAttribute]
internal void set_LastAccessed(DateTime value);
    internal EvictionReason get_EvictionReason();
    private void set_EvictionReason(EvictionReason value);
    public sealed virtual void Dispose();
    private void CommitWithTracking();
    internal bool CheckExpired(DateTime utcNow);
    internal void SetExpired(EvictionReason reason);
    private bool CheckForExpiredTime(DateTime utcNow);
    internal void AttachTokens();
    private static void ExpirationTokensExpired(object obj);
    internal void InvokeEvictionCallbacks();
    internal void PropagateOptionsToCurrent();
    [MemberNotNullAttribute("_tokens")]
private CacheEntryTokens GetOrCreateTokens();
    [CompilerGeneratedAttribute]
private bool <CheckForExpiredTime>g__FullCheck|64_0(DateTime utcNow);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Caching.Memory.MemoryCache : object {
    internal ILogger _logger;
    private MemoryCacheOptions _options;
    private List`1<WeakReference`1<Stats>> _allStats;
    private Stats _accumulatedStats;
    private ThreadLocal`1<Stats> _stats;
    private CoherentState _coherentState;
    private bool _disposed;
    private DateTime _lastExpirationScan;
    [CompilerGeneratedAttribute]
private bool <TrackLinkedCacheEntries>k__BackingField;
    private DateTime UtcNow { get; }
    public int Count { get; }
    internal long Size { get; }
    internal bool TrackLinkedCacheEntries { get; }
    public MemoryCache(IOptions`1<MemoryCacheOptions> optionsAccessor);
    public MemoryCache(IOptions`1<MemoryCacheOptions> optionsAccessor, ILoggerFactory loggerFactory);
    private DateTime get_UtcNow();
    protected virtual override void Finalize();
    public int get_Count();
    internal long get_Size();
    [CompilerGeneratedAttribute]
internal bool get_TrackLinkedCacheEntries();
    public sealed virtual ICacheEntry CreateEntry(object key);
    internal void SetEntry(CacheEntry entry);
    public sealed virtual bool TryGetValue(object key, Object& result);
    public sealed virtual void Remove(object key);
    public void Clear();
    [NullableContextAttribute("2")]
public sealed virtual MemoryCacheStatistics GetCurrentStatistics();
    internal void EntryExpired(CacheEntry entry);
    private void StartScanForExpiredItemsIfNeeded(DateTime utcNow);
    private ValueTuple`2<long, long> Sum();
    private Stats GetStats();
    private void RemoveFromStats(Stats current);
    private void AddToStats(Stats current);
    private void ScanForExpiredItems();
    private bool UpdateCacheSizeExceedsCapacity(CacheEntry entry, CoherentState coherentState);
    private void TriggerOvercapacityCompaction();
    private void OvercapacityCompaction();
    public void Compact(double percentage);
    private void Compact(long removalSizeTarget, Func`2<CacheEntry, long> computeEntrySize, CoherentState coherentState);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void CheckDisposed();
    private static void ValidateCacheKey(object key);
    [CompilerGeneratedAttribute]
private Stats <.ctor>b__9_0();
    [CompilerGeneratedAttribute]
private void <StartScanForExpiredItemsIfNeeded>g__ScheduleTask|27_0(DateTime utcNow);
    [CompilerGeneratedAttribute]
internal static void <Compact>g__ExpirePriorityBucket|38_0(Int64& removedSize, long removalSizeTarget, Func`2<CacheEntry, long> computeEntrySize, List`1<CacheEntry> entriesToRemove, List`1<ValueTuple`2<CacheEntry, DateTimeOffset>> priorityEntries);
    [CompilerGeneratedAttribute]
[DoesNotReturnAttribute]
internal static void <CheckDisposed>g__Throw|41_0();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Caching.Memory.MemoryCacheOptions : object {
    private long _sizeLimit;
    private double _compactionPercentage;
    private static int NotSet;
    [CompilerGeneratedAttribute]
private ISystemClock <Clock>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ExpirationScanFrequency>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompactOnMemoryPressure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrackLinkedCacheEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrackStatistics>k__BackingField;
    public ISystemClock Clock { get; public set; }
    public TimeSpan ExpirationScanFrequency { get; public set; }
    internal bool HasSizeLimit { get; }
    internal long SizeLimitValue { get; }
    public Nullable`1<long> SizeLimit { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This property is retained only for compatibility.  Remove use and instead call MemoryCache.Compact as needed.", "True")]
public bool CompactOnMemoryPressure { get; public set; }
    public double CompactionPercentage { get; public set; }
    public bool TrackLinkedCacheEntries { get; public set; }
    public bool TrackStatistics { get; public set; }
    [NullableAttribute("1")]
private MemoryCacheOptions Microsoft.Extensions.Options.IOptions<Microsoft.Extensions.Caching.Memory.MemoryCacheOptions>.Value { get; }
    [CompilerGeneratedAttribute]
public ISystemClock get_Clock();
    [CompilerGeneratedAttribute]
public void set_Clock(ISystemClock value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ExpirationScanFrequency();
    [CompilerGeneratedAttribute]
public void set_ExpirationScanFrequency(TimeSpan value);
    internal bool get_HasSizeLimit();
    internal long get_SizeLimitValue();
    public Nullable`1<long> get_SizeLimit();
    public void set_SizeLimit(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public bool get_CompactOnMemoryPressure();
    [CompilerGeneratedAttribute]
public void set_CompactOnMemoryPressure(bool value);
    public double get_CompactionPercentage();
    public void set_CompactionPercentage(double value);
    [CompilerGeneratedAttribute]
public bool get_TrackLinkedCacheEntries();
    [CompilerGeneratedAttribute]
public void set_TrackLinkedCacheEntries(bool value);
    [CompilerGeneratedAttribute]
public bool get_TrackStatistics();
    [CompilerGeneratedAttribute]
public void set_TrackStatistics(bool value);
    private sealed virtual override MemoryCacheOptions Microsoft.Extensions.Options.IOptions<Microsoft.Extensions.Caching.Memory.MemoryCacheOptions>.get_Value();
}
public class Microsoft.Extensions.Caching.Memory.MemoryDistributedCacheOptions : MemoryCacheOptions {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddMemoryCache(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddMemoryCache(IServiceCollection services, Action`1<MemoryCacheOptions> setupAction);
    [ExtensionAttribute]
public static IServiceCollection AddDistributedMemoryCache(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddDistributedMemoryCache(IServiceCollection services, Action`1<MemoryDistributedCacheOptions> setupAction);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string CacheEntryHasEmptySize { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, Object[] args);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_CacheEntryHasEmptySize();
}
internal static class System.ThrowHelper : object {
    [NullableContextAttribute("2")]
internal static void ThrowIfNull(object argument, string paramName);
    [DoesNotReturnAttribute]
private static void Throw(string paramName);
    [NullableContextAttribute("1")]
public static string IfNullOrWhitespace(string argument, string paramName);
}
