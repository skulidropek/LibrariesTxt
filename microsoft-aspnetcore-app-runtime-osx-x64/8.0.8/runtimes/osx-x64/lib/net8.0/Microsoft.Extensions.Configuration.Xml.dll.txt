internal static class FxResources.Microsoft.Extensions.Configuration.Xml.SR : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Configuration.Xml.Prefix : object {
    private StringBuilder _sb;
    private Stack`1<int> _lengths;
    public string AsString { get; }
    public string get_AsString();
    public void Push(string value);
    public void Pop();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Configuration.Xml.XmlConfigurationElement : object {
    [CompilerGeneratedAttribute]
private string <ElementName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SiblingName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, List`1<XmlConfigurationElement>> <ChildrenBySiblingName>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlConfigurationElement <SingleChild>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlConfigurationElementTextContent <TextContent>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<XmlConfigurationElementAttributeValue> <Attributes>k__BackingField;
    [NullableAttribute("1")]
public string ElementName { get; }
    public string Name { get; }
    [NullableAttribute("1")]
public string SiblingName { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, List`1<XmlConfigurationElement>> ChildrenBySiblingName { get; public set; }
    public XmlConfigurationElement SingleChild { get; public set; }
    public XmlConfigurationElementTextContent TextContent { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<XmlConfigurationElementAttributeValue> Attributes { get; public set; }
    [NullableContextAttribute("1")]
public XmlConfigurationElement(string elementName, string name);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ElementName();
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_SiblingName();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, List`1<XmlConfigurationElement>> get_ChildrenBySiblingName();
    [CompilerGeneratedAttribute]
public void set_ChildrenBySiblingName(IDictionary`2<string, List`1<XmlConfigurationElement>> value);
    [CompilerGeneratedAttribute]
public XmlConfigurationElement get_SingleChild();
    [CompilerGeneratedAttribute]
public void set_SingleChild(XmlConfigurationElement value);
    [CompilerGeneratedAttribute]
public XmlConfigurationElementTextContent get_TextContent();
    [CompilerGeneratedAttribute]
public void set_TextContent(XmlConfigurationElementTextContent value);
    [CompilerGeneratedAttribute]
public List`1<XmlConfigurationElementAttributeValue> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(List`1<XmlConfigurationElementAttributeValue> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Configuration.Xml.XmlConfigurationElementAttributeValue : object {
    [CompilerGeneratedAttribute]
private string <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LinePosition>k__BackingField;
    public string Attribute { get; }
    public string Value { get; }
    public Nullable`1<int> LineNumber { get; }
    public Nullable`1<int> LinePosition { get; }
    public XmlConfigurationElementAttributeValue(string attribute, string value, Nullable`1<int> lineNumber, Nullable`1<int> linePosition);
    [CompilerGeneratedAttribute]
public string get_Attribute();
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LineNumber();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LinePosition();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Configuration.Xml.XmlConfigurationElementTextContent : object {
    [CompilerGeneratedAttribute]
private string <TextContent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LinePosition>k__BackingField;
    public string TextContent { get; }
    public Nullable`1<int> LineNumber { get; }
    public Nullable`1<int> LinePosition { get; }
    public XmlConfigurationElementTextContent(string textContent, Nullable`1<int> linePosition, Nullable`1<int> lineNumber);
    [CompilerGeneratedAttribute]
public string get_TextContent();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LineNumber();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LinePosition();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiresDynamicCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml which may contain XSLTs in the xml. XSLTs require dynamic code.")]
[RequiresUnreferencedCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml. If you use encrypted XML files, your application might not have the algorithm implementations it needs. To avoid this problem, one option you can use is a DynamicDependency attribute to keep the algorithm implementations in your application.")]
public class Microsoft.Extensions.Configuration.Xml.XmlConfigurationProvider : FileConfigurationProvider {
    [CompilerGeneratedAttribute]
private XmlDocumentDecryptor <Decryptor>k__BackingField;
    internal XmlDocumentDecryptor Decryptor { get; internal set; }
    public XmlConfigurationProvider(XmlConfigurationSource source);
    [CompilerGeneratedAttribute]
internal XmlDocumentDecryptor get_Decryptor();
    [CompilerGeneratedAttribute]
internal void set_Decryptor(XmlDocumentDecryptor value);
    public virtual void Load(Stream stream);
}
[RequiresDynamicCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml which may contain XSLTs in the xml. XSLTs require dynamic code.")]
[RequiresUnreferencedCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml. If you use encrypted XML files, your application might not have the algorithm implementations it needs. To avoid this problem, one option you can use is a DynamicDependency attribute to keep the algorithm implementations in your application.")]
public class Microsoft.Extensions.Configuration.Xml.XmlConfigurationSource : FileConfigurationSource {
    [NullableContextAttribute("1")]
public virtual IConfigurationProvider Build(IConfigurationBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Configuration.Xml.XmlDocumentDecryptor : object {
    internal static string RequiresDynamicCodeMessage;
    internal static string RequiresUnreferencedCodeMessage;
    public static XmlDocumentDecryptor Instance;
    private Func`2<XmlDocument, EncryptedXml> _encryptedXmlFactory;
    internal XmlDocumentDecryptor(Func`2<XmlDocument, EncryptedXml> encryptedXmlFactory);
    private static XmlDocumentDecryptor();
    private static bool ContainsEncryptedData(XmlDocument document);
    [RequiresDynamicCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml which may contain XSLTs in the xml. XSLTs require dynamic code.")]
[RequiresUnreferencedCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml. If you use encrypted XML files, your application might not have the algorithm implementations it needs. To avoid this problem, one option you can use is a DynamicDependency attribute to keep the algorithm implementations in your application.")]
public XmlReader CreateDecryptingXmlReader(Stream input, XmlReaderSettings settings);
    [UnsupportedOSPlatformAttribute("browser")]
[RequiresDynamicCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml which may contain XSLTs in the xml. XSLTs require dynamic code.")]
[RequiresUnreferencedCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml. If you use encrypted XML files, your application might not have the algorithm implementations it needs. To avoid this problem, one option you can use is a DynamicDependency attribute to keep the algorithm implementations in your application.")]
protected virtual XmlReader DecryptDocumentAndCreateXmlReader(XmlDocument document);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiresDynamicCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml which may contain XSLTs in the xml. XSLTs require dynamic code.")]
[RequiresUnreferencedCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml. If you use encrypted XML files, your application might not have the algorithm implementations it needs. To avoid this problem, one option you can use is a DynamicDependency attribute to keep the algorithm implementations in your application.")]
public class Microsoft.Extensions.Configuration.Xml.XmlStreamConfigurationProvider : StreamConfigurationProvider {
    public XmlStreamConfigurationProvider(XmlStreamConfigurationSource source);
    public static IDictionary`2<string, string> Read(Stream stream, XmlDocumentDecryptor decryptor);
    public virtual void Load(Stream stream);
    private static string GetLineInfo(XmlReader reader);
    private static void ReadAttributes(XmlReader reader, XmlConfigurationElement element);
    private static string GetName(XmlReader reader);
    private static Dictionary`2<string, string> ProvideConfiguration(XmlConfigurationElement root);
    [CompilerGeneratedAttribute]
internal static void <ProvideConfiguration>g__ProcessElement|7_0(Prefix prefix, XmlConfigurationElement element, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static void <ProvideConfiguration>g__ProcessElementAttributes|7_1(Prefix prefix, XmlConfigurationElement element, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static void <ProvideConfiguration>g__ProcessElementContent|7_2(Prefix prefix, XmlConfigurationElement element, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static void <ProvideConfiguration>g__ProcessElementChildren|7_3(Prefix prefix, XmlConfigurationElement element, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static void <ProvideConfiguration>g__ProcessElementChild|7_4(Prefix prefix, XmlConfigurationElement child, Nullable`1<int> index, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static void <ProvideConfiguration>g__AddToConfiguration|7_5(string key, string value, Nullable`1<int> lineNumber, Nullable`1<int> linePosition, <>c__DisplayClass7_0& );
}
[RequiresDynamicCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml which may contain XSLTs in the xml. XSLTs require dynamic code.")]
[RequiresUnreferencedCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml. If you use encrypted XML files, your application might not have the algorithm implementations it needs. To avoid this problem, one option you can use is a DynamicDependency attribute to keep the algorithm implementations in your application.")]
public class Microsoft.Extensions.Configuration.Xml.XmlStreamConfigurationSource : StreamConfigurationSource {
    [NullableContextAttribute("1")]
public virtual IConfigurationProvider Build(IConfigurationBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Configuration.XmlConfigurationExtensions : object {
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml which may contain XSLTs in the xml. XSLTs require dynamic code.")]
[RequiresUnreferencedCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml. If you use encrypted XML files, your application might not have the algorithm implementations it needs. To avoid this problem, one option you can use is a DynamicDependency attribute to keep the algorithm implementations in your application.")]
public static IConfigurationBuilder AddXmlFile(IConfigurationBuilder builder, string path);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml which may contain XSLTs in the xml. XSLTs require dynamic code.")]
[RequiresUnreferencedCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml. If you use encrypted XML files, your application might not have the algorithm implementations it needs. To avoid this problem, one option you can use is a DynamicDependency attribute to keep the algorithm implementations in your application.")]
public static IConfigurationBuilder AddXmlFile(IConfigurationBuilder builder, string path, bool optional);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml which may contain XSLTs in the xml. XSLTs require dynamic code.")]
[RequiresUnreferencedCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml. If you use encrypted XML files, your application might not have the algorithm implementations it needs. To avoid this problem, one option you can use is a DynamicDependency attribute to keep the algorithm implementations in your application.")]
public static IConfigurationBuilder AddXmlFile(IConfigurationBuilder builder, string path, bool optional, bool reloadOnChange);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml which may contain XSLTs in the xml. XSLTs require dynamic code.")]
[RequiresUnreferencedCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml. If you use encrypted XML files, your application might not have the algorithm implementations it needs. To avoid this problem, one option you can use is a DynamicDependency attribute to keep the algorithm implementations in your application.")]
public static IConfigurationBuilder AddXmlFile(IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml which may contain XSLTs in the xml. XSLTs require dynamic code.")]
[RequiresUnreferencedCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml. If you use encrypted XML files, your application might not have the algorithm implementations it needs. To avoid this problem, one option you can use is a DynamicDependency attribute to keep the algorithm implementations in your application.")]
public static IConfigurationBuilder AddXmlFile(IConfigurationBuilder builder, Action`1<XmlConfigurationSource> configureSource);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml which may contain XSLTs in the xml. XSLTs require dynamic code.")]
[RequiresUnreferencedCodeAttribute("Microsoft.Extensions.Configuration.Xml can use EncryptedXml. If you use encrypted XML files, your application might not have the algorithm implementations it needs. To avoid this problem, one option you can use is a DynamicDependency attribute to keep the algorithm implementations in your application.")]
public static IConfigurationBuilder AddXmlStream(IConfigurationBuilder builder, Stream stream);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Error_InvalidFilePath { get; }
    internal static string Error_KeyIsDuplicated { get; }
    internal static string Error_NamespaceIsNotSupported { get; }
    internal static string Error_UnsupportedNodeType { get; }
    internal static string Msg_LineInfo { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, Object[] args);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Error_InvalidFilePath();
    internal static string get_Error_KeyIsDuplicated();
    internal static string get_Error_NamespaceIsNotSupported();
    internal static string get_Error_UnsupportedNodeType();
    internal static string get_Msg_LineInfo();
}
internal static class System.ThrowHelper : object {
    [NullableContextAttribute("2")]
internal static void ThrowIfNull(object argument, string paramName);
    [DoesNotReturnAttribute]
private static void Throw(string paramName);
    [NullableContextAttribute("1")]
public static string IfNullOrWhitespace(string argument, string paramName);
}
