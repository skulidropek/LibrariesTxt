public class Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator : ComponentBase {
    private IDisposable _subscriptions;
    private EditContext _originalEditContext;
    [CompilerGeneratedAttribute]
private EditContext <CurrentEditContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [NullableAttribute("2")]
[CascadingParameterAttribute]
private EditContext CurrentEditContext { get; private set; }
    [NullableAttribute("1")]
[InjectAttribute]
private IServiceProvider ServiceProvider { get; private set; }
    [CompilerGeneratedAttribute]
private EditContext get_CurrentEditContext();
    [CompilerGeneratedAttribute]
private void set_CurrentEditContext(EditContext value);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private void set_ServiceProvider(IServiceProvider value);
    protected virtual void OnInitialized();
    protected virtual void OnParametersSet();
    protected virtual void Dispose(bool disposing);
    private sealed virtual override void System.IDisposable.Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.Forms.EditContext : object {
    private Dictionary`2<FieldIdentifier, FieldState> _fieldStates;
    [CompilerGeneratedAttribute]
private EventHandler`1<FieldChangedEventArgs> OnFieldChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<ValidationRequestedEventArgs> OnValidationRequested;
    [CompilerGeneratedAttribute]
private EventHandler`1<ValidationStateChangedEventArgs> OnValidationStateChanged;
    [CompilerGeneratedAttribute]
private object <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private EditContextProperties <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldUseFieldIdentifiers>k__BackingField;
    public object Model { get; }
    public EditContextProperties Properties { get; }
    public bool ShouldUseFieldIdentifiers { get; public set; }
    public EditContext(object model);
    [CompilerGeneratedAttribute]
public void add_OnFieldChanged(EventHandler`1<FieldChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnFieldChanged(EventHandler`1<FieldChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_OnValidationRequested(EventHandler`1<ValidationRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnValidationRequested(EventHandler`1<ValidationRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_OnValidationStateChanged(EventHandler`1<ValidationStateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnValidationStateChanged(EventHandler`1<ValidationStateChangedEventArgs> value);
    public FieldIdentifier Field(string fieldName);
    [CompilerGeneratedAttribute]
public object get_Model();
    [CompilerGeneratedAttribute]
public EditContextProperties get_Properties();
    [CompilerGeneratedAttribute]
public bool get_ShouldUseFieldIdentifiers();
    [CompilerGeneratedAttribute]
public void set_ShouldUseFieldIdentifiers(bool value);
    public void NotifyFieldChanged(FieldIdentifier& fieldIdentifier);
    public void NotifyValidationStateChanged();
    public void MarkAsUnmodified(FieldIdentifier& fieldIdentifier);
    public void MarkAsUnmodified();
    public bool IsModified();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Components.Forms.EditContext/<GetValidationMessages>d__27")]
public IEnumerable`1<string> GetValidationMessages();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Components.Forms.EditContext/<GetValidationMessages>d__28")]
public IEnumerable`1<string> GetValidationMessages(FieldIdentifier fieldIdentifier);
    public IEnumerable`1<string> GetValidationMessages(Expression`1<Func`1<object>> accessor);
    public bool IsModified(FieldIdentifier& fieldIdentifier);
    public bool IsModified(Expression`1<Func`1<object>> accessor);
    public bool IsValid(FieldIdentifier& fieldIdentifier);
    public bool IsValid(Expression`1<Func`1<object>> accessor);
    public bool Validate();
    [NullableContextAttribute("2")]
internal FieldState GetFieldState(FieldIdentifier& fieldIdentifier);
    internal FieldState GetOrAddFieldState(FieldIdentifier& fieldIdentifier);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Components.Forms.EditContextDataAnnotationsExtensions : object {
    [CompilerGeneratedAttribute]
private static Action OnClearCache;
    [ExtensionAttribute]
[ObsoleteAttribute("Use EnableDataAnnotationsValidation instead.")]
public static EditContext AddDataAnnotationsValidation(EditContext editContext);
    [ExtensionAttribute]
[ObsoleteAttribute("This API is obsolete and may be removed in future versions. Use the overload that accepts an IServiceProvider instead.")]
public static IDisposable EnableDataAnnotationsValidation(EditContext editContext);
    [ExtensionAttribute]
public static IDisposable EnableDataAnnotationsValidation(EditContext editContext, IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private static void add_OnClearCache(Action value);
    [CompilerGeneratedAttribute]
private static void remove_OnClearCache(Action value);
    private static void ClearCache(Type[] _);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Components.Forms.EditContextProperties : object {
    private Dictionary`2<object, object> _contents;
    public object Item { get; public set; }
    public object get_Item(object key);
    public void set_Item(object key, object value);
    public bool TryGetValue(object key, Object& value);
    public bool Remove(object key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Components.Forms.ExpressionFormatter : object {
    internal static int StackAllocBufferSize;
    private static ConcurrentDictionary`2<MemberInfo, CapturedValueFormatter> s_capturedValueFormatterCache;
    private static ConcurrentDictionary`2<MethodInfo, MethodInfoData> s_methodInfoDataCache;
    private static ExpressionFormatter();
    public static void ClearCache();
    public static string FormatLambda(LambdaExpression expression);
    public static string FormatLambda(LambdaExpression expression, string prefix);
    internal static bool IsSingleArgumentIndexer(Expression expression);
    private static MethodInfoData GetOrCreateMethodInfoData(MethodInfo methodInfo);
    private static void FormatIndexArgument(Expression indexExpression, ReverseStringBuilder& builder);
    internal static string FormatIndexArgument(Expression indexExpression);
    private static void FormatCapturedValue(MemberExpression memberExpression, ConstantExpression constantExpression, ReverseStringBuilder& builder);
    private static CapturedValueFormatter CreateCapturedValueFormatter(MemberExpression memberExpression);
    private static void FormatConstantValue(ConstantExpression constantExpression, ReverseStringBuilder& builder);
    [CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2072")]
internal static MethodInfoData <GetOrCreateMethodInfoData>g__GetMethodInfoData|9_0(MethodInfo methodInfo);
    [CompilerGeneratedAttribute]
internal static Func`2<object, TResult> <CreateCapturedValueFormatter>g__CompileMemberEvaluator|13_0(MemberExpression memberExpression);
}
public class Microsoft.AspNetCore.Components.Forms.FieldChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private FieldIdentifier <FieldIdentifier>k__BackingField;
    public FieldIdentifier FieldIdentifier { get; }
    public FieldChangedEventArgs(FieldIdentifier& fieldIdentifier);
    [CompilerGeneratedAttribute]
public FieldIdentifier get_FieldIdentifier();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.Forms.FieldIdentifier : ValueType {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<ValueTuple`2<Type, MemberInfo>, Func`2<object, object>> _fieldAccessors;
    [CompilerGeneratedAttribute]
private object <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    public object Model { get; }
    public string FieldName { get; }
    private static FieldIdentifier();
    public FieldIdentifier(object model, string fieldName);
    public static FieldIdentifier Create(Expression`1<Func`1<TField>> accessor);
    [CompilerGeneratedAttribute]
public object get_Model();
    [CompilerGeneratedAttribute]
public string get_FieldName();
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(FieldIdentifier otherIdentifier);
    private static void ParseAccessor(Expression`1<Func`1<T>> accessor, Object& model, String& fieldName);
    internal static object GetModelFromMemberAccess(MemberExpression member, ConcurrentDictionary`2<ValueTuple`2<Type, MemberInfo>, Func`2<object, object>> cache);
    private static object GetModelFromIndexer(Expression methodCallExpression);
    private static void ClearCache();
    [CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
internal static Func`2<object, object> <GetModelFromMemberAccess>g__CreateAccessor|14_0(ValueTuple`2<Type, MemberInfo> arg);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.Forms.FieldState : object {
    private FieldIdentifier _fieldIdentifier;
    private HashSet`1<ValidationMessageStore> _validationMessageStores;
    [CompilerGeneratedAttribute]
private bool <IsModified>k__BackingField;
    public bool IsModified { get; public set; }
    public FieldState(FieldIdentifier fieldIdentifier);
    [CompilerGeneratedAttribute]
public bool get_IsModified();
    [CompilerGeneratedAttribute]
public void set_IsModified(bool value);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Components.Forms.FieldState/<GetValidationMessages>d__7")]
public IEnumerable`1<string> GetValidationMessages();
    public void AssociateWithValidationMessageStore(ValidationMessageStore validationMessageStore);
    public void DissociateFromValidationMessageStore(ValidationMessageStore validationMessageStore);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
internal class Microsoft.AspNetCore.Components.Forms.ReverseStringBuilder : ValueType {
    public static int MinimumRentedArraySize;
    private static ArrayPool`1<char> s_arrayPool;
    private int _nextEndIndex;
    private Span`1<char> _currentBuffer;
    private SequenceSegment _fallbackSequenceSegment;
    internal int SequenceSegmentCount { get; }
    public bool Empty { get; }
    public ReverseStringBuilder(int conservativeEstimatedStringLength);
    public ReverseStringBuilder(Span`1<char> initialBuffer);
    private static ReverseStringBuilder();
    internal int get_SequenceSegmentCount();
    public bool get_Empty();
    public void InsertFront(ReadOnlySpan`1<char> span);
    [NullableContextAttribute("1")]
public void InsertFront(T value);
    [NullableContextAttribute("1")]
public void InsertFront(IFormattable formattable);
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
public virtual string ToString();
    [IsReadOnlyAttribute]
public void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Components.Forms.ValidationMessageStore : object {
    private EditContext _editContext;
    private Dictionary`2<FieldIdentifier, List`1<string>> _messages;
    public IEnumerable`1<string> Item { get; }
    public IEnumerable`1<string> Item { get; }
    public ValidationMessageStore(EditContext editContext);
    public void Add(FieldIdentifier& fieldIdentifier, string message);
    public void Add(Expression`1<Func`1<object>> accessor, string message);
    public void Add(FieldIdentifier& fieldIdentifier, IEnumerable`1<string> messages);
    public void Add(Expression`1<Func`1<object>> accessor, IEnumerable`1<string> messages);
    public IEnumerable`1<string> get_Item(FieldIdentifier fieldIdentifier);
    public IEnumerable`1<string> get_Item(Expression`1<Func`1<object>> accessor);
    public void Clear();
    public void Clear(Expression`1<Func`1<object>> accessor);
    public void Clear(FieldIdentifier& fieldIdentifier);
    private List`1<string> GetOrCreateMessagesListForField(FieldIdentifier& fieldIdentifier);
    private void AssociateWithField(FieldIdentifier& fieldIdentifier);
    private void DissociateFromField(FieldIdentifier& fieldIdentifier);
}
public class Microsoft.AspNetCore.Components.Forms.ValidationRequestedEventArgs : EventArgs {
    [NullableAttribute("1")]
public static ValidationRequestedEventArgs Empty;
    private static ValidationRequestedEventArgs();
}
public class Microsoft.AspNetCore.Components.Forms.ValidationStateChangedEventArgs : EventArgs {
    [NullableAttribute("1")]
public static ValidationStateChangedEventArgs Empty;
    private static ValidationStateChangedEventArgs();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.HotReload.HotReloadManager : object {
    [NullableAttribute("1")]
public static HotReloadManager Default;
    [CompilerGeneratedAttribute]
private bool <MetadataUpdateSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private Action OnDeltaApplied;
    public bool MetadataUpdateSupported { get; public set; }
    public bool IsSubscribedTo { get; }
    private static HotReloadManager();
    [CompilerGeneratedAttribute]
public bool get_MetadataUpdateSupported();
    [CompilerGeneratedAttribute]
public void set_MetadataUpdateSupported(bool value);
    public bool get_IsSubscribedTo();
    [CompilerGeneratedAttribute]
public void add_OnDeltaApplied(Action value);
    [CompilerGeneratedAttribute]
public void remove_OnDeltaApplied(Action value);
    public static void UpdateApplication(Type[] _);
}
