public class Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents : object {
    private IList`1<IFileProvider> _fileProviders;
    private string _subPath;
    private List`1<IFileInfo> _files;
    private bool _exists;
    private List`1<IDirectoryContents> _directories;
    public bool Exists { get; }
    [NullableContextAttribute("1")]
public CompositeDirectoryContents(IList`1<IFileProvider> fileProviders, string subpath);
    [MemberNotNullAttribute("_directories")]
private void EnsureDirectoriesAreInitialized();
    [MemberNotNullAttribute("_files")]
[MemberNotNullAttribute("_directories")]
private void EnsureFilesAreInitialized();
    [NullableContextAttribute("1")]
public sealed virtual IEnumerator`1<IFileInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool get_Exists();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileProviders.CompositeFileProvider : object {
    private IFileProvider[] _fileProviders;
    public IEnumerable`1<IFileProvider> FileProviders { get; }
    public CompositeFileProvider(IFileProvider[] fileProviders);
    public CompositeFileProvider(IEnumerable`1<IFileProvider> fileProviders);
    public sealed virtual IFileInfo GetFileInfo(string subpath);
    public sealed virtual IDirectoryContents GetDirectoryContents(string subpath);
    public sealed virtual IChangeToken Watch(string pattern);
    public IEnumerable`1<IFileProvider> get_FileProviders();
}
internal static class System.ThrowHelper : object {
    internal static void ThrowIfNull(object argument, string paramName);
    [DoesNotReturnAttribute]
private static void Throw(string paramName);
    public static string IfNullOrWhitespace(string argument, string paramName);
}
