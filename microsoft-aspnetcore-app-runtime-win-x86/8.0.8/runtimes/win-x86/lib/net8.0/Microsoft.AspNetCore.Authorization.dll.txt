[AttributeUsageAttribute("68")]
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Microsoft.AspNetCore.Authorization.AllowAnonymousAttribute : Attribute {
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authorization.AuthorizationBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public IServiceCollection Services { get; }
    public AuthorizationBuilder(IServiceCollection services);
    [CompilerGeneratedAttribute]
public virtual IServiceCollection get_Services();
    public virtual AuthorizationBuilder SetInvokeHandlersAfterFailure(bool invoke);
    public virtual AuthorizationBuilder SetDefaultPolicy(AuthorizationPolicy policy);
    public virtual AuthorizationBuilder SetFallbackPolicy(AuthorizationPolicy policy);
    public virtual AuthorizationBuilder AddPolicy(string name, AuthorizationPolicy policy);
    public virtual AuthorizationBuilder AddPolicy(string name, Action`1<AuthorizationPolicyBuilder> configurePolicy);
    public virtual AuthorizationBuilder AddDefaultPolicy(string name, AuthorizationPolicy policy);
    public virtual AuthorizationBuilder AddDefaultPolicy(string name, Action`1<AuthorizationPolicyBuilder> configurePolicy);
    public virtual AuthorizationBuilder AddFallbackPolicy(string name, AuthorizationPolicy policy);
    public virtual AuthorizationBuilder AddFallbackPolicy(string name, Action`1<AuthorizationPolicyBuilder> configurePolicy);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authorization.AuthorizationFailure : object {
    private static AuthorizationFailure _explicitFailure;
    [CompilerGeneratedAttribute]
private bool <FailCalled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IAuthorizationRequirement> <FailedRequirements>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<AuthorizationFailureReason> <FailureReasons>k__BackingField;
    public bool FailCalled { get; private set; }
    public IEnumerable`1<IAuthorizationRequirement> FailedRequirements { get; private set; }
    public IEnumerable`1<AuthorizationFailureReason> FailureReasons { get; private set; }
    private static AuthorizationFailure();
    [CompilerGeneratedAttribute]
public bool get_FailCalled();
    [CompilerGeneratedAttribute]
private void set_FailCalled(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IAuthorizationRequirement> get_FailedRequirements();
    [CompilerGeneratedAttribute]
private void set_FailedRequirements(IEnumerable`1<IAuthorizationRequirement> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<AuthorizationFailureReason> get_FailureReasons();
    [CompilerGeneratedAttribute]
private void set_FailureReasons(IEnumerable`1<AuthorizationFailureReason> value);
    public static AuthorizationFailure ExplicitFail();
    public static AuthorizationFailure Failed(IEnumerable`1<AuthorizationFailureReason> reasons);
    public static AuthorizationFailure Failed(IEnumerable`1<IAuthorizationRequirement> failed);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authorization.AuthorizationFailureReason : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthorizationHandler <Handler>k__BackingField;
    public string Message { get; }
    public IAuthorizationHandler Handler { get; }
    public AuthorizationFailureReason(IAuthorizationHandler handler, string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public IAuthorizationHandler get_Handler();
}
public abstract class Microsoft.AspNetCore.Authorization.AuthorizationHandler`1 : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AuthorizationHandler`1/<HandleAsync>d__0")]
public virtual Task HandleAsync(AuthorizationHandlerContext context);
    [NullableContextAttribute("1")]
protected abstract virtual Task HandleRequirementAsync(AuthorizationHandlerContext context, TRequirement requirement);
}
public abstract class Microsoft.AspNetCore.Authorization.AuthorizationHandler`2 : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AuthorizationHandler`2/<HandleAsync>d__0")]
public virtual Task HandleAsync(AuthorizationHandlerContext context);
    [NullableContextAttribute("1")]
protected abstract virtual Task HandleRequirementAsync(AuthorizationHandlerContext context, TRequirement requirement, TResource resource);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext : object {
    private HashSet`1<IAuthorizationRequirement> _pendingRequirements;
    private List`1<AuthorizationFailureReason> _failedReasons;
    private bool _failCalled;
    private bool _succeedCalled;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IAuthorizationRequirement> <Requirements>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <User>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Resource>k__BackingField;
    public IEnumerable`1<IAuthorizationRequirement> Requirements { get; }
    public ClaimsPrincipal User { get; }
    [NullableAttribute("2")]
public object Resource { get; }
    public IEnumerable`1<IAuthorizationRequirement> PendingRequirements { get; }
    public IEnumerable`1<AuthorizationFailureReason> FailureReasons { get; }
    public bool HasFailed { get; }
    public bool HasSucceeded { get; }
    public AuthorizationHandlerContext(IEnumerable`1<IAuthorizationRequirement> requirements, ClaimsPrincipal user, object resource);
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<IAuthorizationRequirement> get_Requirements();
    [CompilerGeneratedAttribute]
public virtual ClaimsPrincipal get_User();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual object get_Resource();
    public virtual IEnumerable`1<IAuthorizationRequirement> get_PendingRequirements();
    public virtual IEnumerable`1<AuthorizationFailureReason> get_FailureReasons();
    public virtual bool get_HasFailed();
    public virtual bool get_HasSucceeded();
    public virtual void Fail();
    public virtual void Fail(AuthorizationFailureReason reason);
    public virtual void Succeed(IAuthorizationRequirement requirement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authorization.AuthorizationOptions : object {
    private static Task`1<AuthorizationPolicy> _nullPolicyTask;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Task`1<AuthorizationPolicy>> <PolicyMap>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InvokeHandlersAfterFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthorizationPolicy <DefaultPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthorizationPolicy <FallbackPolicy>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, Task`1<AuthorizationPolicy>> PolicyMap { get; }
    public bool InvokeHandlersAfterFailure { get; public set; }
    public AuthorizationPolicy DefaultPolicy { get; public set; }
    [NullableAttribute("2")]
public AuthorizationPolicy FallbackPolicy { get; public set; }
    private static AuthorizationOptions();
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Task`1<AuthorizationPolicy>> get_PolicyMap();
    [CompilerGeneratedAttribute]
public bool get_InvokeHandlersAfterFailure();
    [CompilerGeneratedAttribute]
public void set_InvokeHandlersAfterFailure(bool value);
    [CompilerGeneratedAttribute]
public AuthorizationPolicy get_DefaultPolicy();
    [CompilerGeneratedAttribute]
public void set_DefaultPolicy(AuthorizationPolicy value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public AuthorizationPolicy get_FallbackPolicy();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_FallbackPolicy(AuthorizationPolicy value);
    public void AddPolicy(string name, AuthorizationPolicy policy);
    public void AddPolicy(string name, Action`1<AuthorizationPolicyBuilder> configurePolicy);
    public AuthorizationPolicy GetPolicy(string name);
    internal Task`1<AuthorizationPolicy> GetPolicyTask(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authorization.AuthorizationPolicy : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IAuthorizationRequirement> <Requirements>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <AuthenticationSchemes>k__BackingField;
    public IReadOnlyList`1<IAuthorizationRequirement> Requirements { get; }
    public IReadOnlyList`1<string> AuthenticationSchemes { get; }
    public AuthorizationPolicy(IEnumerable`1<IAuthorizationRequirement> requirements, IEnumerable`1<string> authenticationSchemes);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IAuthorizationRequirement> get_Requirements();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_AuthenticationSchemes();
    public static AuthorizationPolicy Combine(AuthorizationPolicy[] policies);
    public static AuthorizationPolicy Combine(IEnumerable`1<AuthorizationPolicy> policies);
    public static Task`1<AuthorizationPolicy> CombineAsync(IAuthorizationPolicyProvider policyProvider, IEnumerable`1<IAuthorizeData> authorizeData);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AuthorizationPolicy/<CombineAsync>d__10")]
public static Task`1<AuthorizationPolicy> CombineAsync(IAuthorizationPolicyProvider policyProvider, IEnumerable`1<IAuthorizeData> authorizeData, IEnumerable`1<AuthorizationPolicy> policies);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder : object {
    private static DenyAnonymousAuthorizationRequirement _denyAnonymousAuthorizationRequirement;
    [CompilerGeneratedAttribute]
private IList`1<IAuthorizationRequirement> <Requirements>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <AuthenticationSchemes>k__BackingField;
    public IList`1<IAuthorizationRequirement> Requirements { get; public set; }
    public IList`1<string> AuthenticationSchemes { get; public set; }
    public AuthorizationPolicyBuilder(String[] authenticationSchemes);
    public AuthorizationPolicyBuilder(AuthorizationPolicy policy);
    private static AuthorizationPolicyBuilder();
    [CompilerGeneratedAttribute]
public IList`1<IAuthorizationRequirement> get_Requirements();
    [CompilerGeneratedAttribute]
public void set_Requirements(IList`1<IAuthorizationRequirement> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_AuthenticationSchemes();
    [CompilerGeneratedAttribute]
public void set_AuthenticationSchemes(IList`1<string> value);
    public AuthorizationPolicyBuilder AddAuthenticationSchemes(String[] schemes);
    private AuthorizationPolicyBuilder AddAuthenticationSchemesCore(IEnumerable`1<string> schemes);
    public AuthorizationPolicyBuilder AddRequirements(IAuthorizationRequirement[] requirements);
    private AuthorizationPolicyBuilder AddRequirementsCore(IEnumerable`1<IAuthorizationRequirement> requirements);
    public AuthorizationPolicyBuilder Combine(AuthorizationPolicy policy);
    public AuthorizationPolicyBuilder RequireClaim(string claimType, String[] allowedValues);
    public AuthorizationPolicyBuilder RequireClaim(string claimType, IEnumerable`1<string> allowedValues);
    public AuthorizationPolicyBuilder RequireClaim(string claimType);
    public AuthorizationPolicyBuilder RequireRole(String[] roles);
    public AuthorizationPolicyBuilder RequireRole(IEnumerable`1<string> roles);
    public AuthorizationPolicyBuilder RequireUserName(string userName);
    public AuthorizationPolicyBuilder RequireAuthenticatedUser();
    public AuthorizationPolicyBuilder RequireAssertion(Func`2<AuthorizationHandlerContext, bool> handler);
    public AuthorizationPolicyBuilder RequireAssertion(Func`2<AuthorizationHandlerContext, Task`1<bool>> handler);
    public AuthorizationPolicy Build();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authorization.AuthorizationResult : object {
    private static AuthorizationResult _succeededResult;
    private static AuthorizationResult _failedResult;
    [CompilerGeneratedAttribute]
private bool <Succeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthorizationFailure <Failure>k__BackingField;
    [MemberNotNullWhenAttribute("False", "Failure")]
public bool Succeeded { get; private set; }
    [NullableAttribute("2")]
public AuthorizationFailure Failure { get; private set; }
    private static AuthorizationResult();
    [CompilerGeneratedAttribute]
[MemberNotNullWhenAttribute("False", "Failure")]
public bool get_Succeeded();
    [CompilerGeneratedAttribute]
[MemberNotNullWhenAttribute("False", "Failure")]
private void set_Succeeded(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public AuthorizationFailure get_Failure();
    [CompilerGeneratedAttribute]
private void set_Failure(AuthorizationFailure value);
    public static AuthorizationResult Success();
    public static AuthorizationResult Failed(AuthorizationFailure failure);
    public static AuthorizationResult Failed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions : object {
    [ExtensionAttribute]
public static Task`1<AuthorizationResult> AuthorizeAsync(IAuthorizationService service, ClaimsPrincipal user, object resource, IAuthorizationRequirement requirement);
    [ExtensionAttribute]
public static Task`1<AuthorizationResult> AuthorizeAsync(IAuthorizationService service, ClaimsPrincipal user, object resource, AuthorizationPolicy policy);
    [ExtensionAttribute]
public static Task`1<AuthorizationResult> AuthorizeAsync(IAuthorizationService service, ClaimsPrincipal user, AuthorizationPolicy policy);
    [ExtensionAttribute]
public static Task`1<AuthorizationResult> AuthorizeAsync(IAuthorizationService service, ClaimsPrincipal user, string policyName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("68")]
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Microsoft.AspNetCore.Authorization.AuthorizeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Policy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Roles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationSchemes>k__BackingField;
    public string Policy { get; public set; }
    public string Roles { get; public set; }
    public string AuthenticationSchemes { get; public set; }
    [NullableContextAttribute("1")]
public AuthorizeAttribute(string policy);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Policy();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Policy(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Roles();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Roles(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AuthenticationSchemes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AuthenticationSchemes(string value);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public class Microsoft.AspNetCore.Authorization.DefaultAuthorizationEvaluator : object {
    [NullableContextAttribute("1")]
public sealed virtual AuthorizationResult Evaluate(AuthorizationHandlerContext context);
}
public class Microsoft.AspNetCore.Authorization.DefaultAuthorizationHandlerContextFactory : object {
    [NullableContextAttribute("1")]
public virtual AuthorizationHandlerContext CreateContext(IEnumerable`1<IAuthorizationRequirement> requirements, ClaimsPrincipal user, object resource);
}
public class Microsoft.AspNetCore.Authorization.DefaultAuthorizationHandlerProvider : object {
    private Task`1<IEnumerable`1<IAuthorizationHandler>> _handlersTask;
    [NullableContextAttribute("1")]
public DefaultAuthorizationHandlerProvider(IEnumerable`1<IAuthorizationHandler> handlers);
    [NullableContextAttribute("1")]
public sealed virtual Task`1<IEnumerable`1<IAuthorizationHandler>> GetHandlersAsync(AuthorizationHandlerContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authorization.DefaultAuthorizationPolicyProvider : object {
    private AuthorizationOptions _options;
    private Task`1<AuthorizationPolicy> _cachedDefaultPolicy;
    private Task`1<AuthorizationPolicy> _cachedFallbackPolicy;
    public bool AllowsCachingPolicies { get; }
    public DefaultAuthorizationPolicyProvider(IOptions`1<AuthorizationOptions> options);
    public sealed virtual Task`1<AuthorizationPolicy> GetDefaultPolicyAsync();
    public sealed virtual Task`1<AuthorizationPolicy> GetFallbackPolicyAsync();
    public virtual Task`1<AuthorizationPolicy> GetPolicyAsync(string policyName);
    public virtual bool get_AllowsCachingPolicies();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authorization.DefaultAuthorizationService : object {
    private AuthorizationOptions _options;
    private IAuthorizationHandlerContextFactory _contextFactory;
    private IAuthorizationHandlerProvider _handlers;
    private IAuthorizationEvaluator _evaluator;
    private IAuthorizationPolicyProvider _policyProvider;
    private ILogger _logger;
    public DefaultAuthorizationService(IAuthorizationPolicyProvider policyProvider, IAuthorizationHandlerProvider handlers, ILogger`1<DefaultAuthorizationService> logger, IAuthorizationHandlerContextFactory contextFactory, IAuthorizationEvaluator evaluator, IOptions`1<AuthorizationOptions> options);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.DefaultAuthorizationService/<AuthorizeAsync>d__7")]
public virtual Task`1<AuthorizationResult> AuthorizeAsync(ClaimsPrincipal user, object resource, IEnumerable`1<IAuthorizationRequirement> requirements);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.DefaultAuthorizationService/<AuthorizeAsync>d__8")]
public virtual Task`1<AuthorizationResult> AuthorizeAsync(ClaimsPrincipal user, object resource, string policyName);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Authorization.IAuthorizationEvaluator {
    public abstract virtual AuthorizationResult Evaluate(AuthorizationHandlerContext context);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Authorization.IAuthorizationHandler {
    public abstract virtual Task HandleAsync(AuthorizationHandlerContext context);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Authorization.IAuthorizationHandlerContextFactory {
    public abstract virtual AuthorizationHandlerContext CreateContext(IEnumerable`1<IAuthorizationRequirement> requirements, ClaimsPrincipal user, object resource);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Authorization.IAuthorizationHandlerProvider {
    public abstract virtual Task`1<IEnumerable`1<IAuthorizationHandler>> GetHandlersAsync(AuthorizationHandlerContext context);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider {
    public bool AllowsCachingPolicies { get; }
    public abstract virtual Task`1<AuthorizationPolicy> GetPolicyAsync(string policyName);
    public abstract virtual Task`1<AuthorizationPolicy> GetDefaultPolicyAsync();
    public abstract virtual Task`1<AuthorizationPolicy> GetFallbackPolicyAsync();
    public virtual bool get_AllowsCachingPolicies();
}
public interface Microsoft.AspNetCore.Authorization.IAuthorizationRequirement {
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Authorization.IAuthorizationRequirementData {
    public abstract virtual IEnumerable`1<IAuthorizationRequirement> GetRequirements();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Authorization.IAuthorizationService {
    public abstract virtual Task`1<AuthorizationResult> AuthorizeAsync(ClaimsPrincipal user, object resource, IEnumerable`1<IAuthorizationRequirement> requirements);
    public abstract virtual Task`1<AuthorizationResult> AuthorizeAsync(ClaimsPrincipal user, object resource, string policyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement : object {
    [CompilerGeneratedAttribute]
private Func`2<AuthorizationHandlerContext, Task`1<bool>> <Handler>k__BackingField;
    public Func`2<AuthorizationHandlerContext, Task`1<bool>> Handler { get; }
    public AssertionRequirement(Func`2<AuthorizationHandlerContext, bool> handler);
    public AssertionRequirement(Func`2<AuthorizationHandlerContext, Task`1<bool>> handler);
    [CompilerGeneratedAttribute]
public Func`2<AuthorizationHandlerContext, Task`1<bool>> get_Handler();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement/<HandleAsync>d__5")]
public sealed virtual Task HandleAsync(AuthorizationHandlerContext context);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Authorization.Infrastructure.ClaimsAuthorizationRequirement : AuthorizationHandler`1<ClaimsAuthorizationRequirement> {
    private bool _emptyAllowedValues;
    [CompilerGeneratedAttribute]
private string <ClaimType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AllowedValues>k__BackingField;
    public string ClaimType { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<string> AllowedValues { get; }
    public ClaimsAuthorizationRequirement(string claimType, IEnumerable`1<string> allowedValues);
    [CompilerGeneratedAttribute]
public string get_ClaimType();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AllowedValues();
    protected virtual Task HandleRequirementAsync(AuthorizationHandlerContext context, ClaimsAuthorizationRequirement requirement);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Authorization.Infrastructure.DenyAnonymousAuthorizationRequirement : AuthorizationHandler`1<DenyAnonymousAuthorizationRequirement> {
    protected virtual Task HandleRequirementAsync(AuthorizationHandlerContext context, DenyAnonymousAuthorizationRequirement requirement);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Authorization.Infrastructure.NameAuthorizationRequirement : AuthorizationHandler`1<NameAuthorizationRequirement> {
    [CompilerGeneratedAttribute]
private string <RequiredName>k__BackingField;
    public string RequiredName { get; }
    public NameAuthorizationRequirement(string requiredName);
    [CompilerGeneratedAttribute]
public string get_RequiredName();
    protected virtual Task HandleRequirementAsync(AuthorizationHandlerContext context, NameAuthorizationRequirement requirement);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authorization.Infrastructure.OperationAuthorizationRequirement : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public virtual string ToString();
}
public class Microsoft.AspNetCore.Authorization.Infrastructure.PassThroughAuthorizationHandler : object {
    private AuthorizationOptions _options;
    [NullableContextAttribute("1")]
public PassThroughAuthorizationHandler(IOptions`1<AuthorizationOptions> options);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.Infrastructure.PassThroughAuthorizationHandler/<HandleAsync>d__3")]
public sealed virtual Task HandleAsync(AuthorizationHandlerContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Authorization.Infrastructure.RolesAuthorizationRequirement : AuthorizationHandler`1<RolesAuthorizationRequirement> {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AllowedRoles>k__BackingField;
    public IEnumerable`1<string> AllowedRoles { get; }
    public RolesAuthorizationRequirement(IEnumerable`1<string> allowedRoles);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AllowedRoles();
    protected virtual Task HandleRequirementAsync(AuthorizationHandlerContext context, RolesAuthorizationRequirement requirement);
    public virtual string ToString();
}
internal static class Microsoft.AspNetCore.Authorization.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string Exception_AuthorizationPolicyEmpty { get; }
    internal static string Exception_AuthorizationPolicyNotFound { get; }
    internal static string Exception_RoleRequirementEmpty { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_Exception_AuthorizationPolicyEmpty();
    internal static string get_Exception_AuthorizationPolicyNotFound();
    internal static string FormatException_AuthorizationPolicyNotFound(object p0);
    internal static string get_Exception_RoleRequirementEmpty();
}
internal static class Microsoft.AspNetCore.Shared.ArgumentNullThrowHelper : object {
    public static void ThrowIfNull(object argument, string paramName);
}
internal static class Microsoft.AspNetCore.Shared.DebuggerHelpers : object {
    public static string GetDebugText(string key1, object value1, bool includeNullValues, string prefix);
    public static string GetDebugText(string key1, object value1, string key2, object value2, bool includeNullValues, string prefix);
    public static string GetDebugText(string key1, object value1, string key2, object value2, string key3, object value3, bool includeNullValues, string prefix);
    public static string GetDebugText(ReadOnlySpan`1<KeyValuePair`2<string, object>> values, bool includeNullValues, string prefix);
    private static bool HasValue(object value);
    private static KeyValuePair`2<string, object> Create(string key, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddAuthorizationCore(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddAuthorizationCore(IServiceCollection services, Action`1<AuthorizationOptions> configure);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.Logging.LoggingExtensions : object {
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`2<ILogger, Exception> __UserAuthorizationSucceededCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`3<ILogger, string, Exception> __UserAuthorizationFailedCallback;
    private static LoggingExtensions();
    [ExtensionAttribute]
[LoggerMessageAttribute("1", "1", "Authorization was successful.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void UserAuthorizationSucceeded(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("2", "2", "Authorization failed. {Reason}")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static void UserAuthorizationFailed(ILogger logger, string reason);
    [ExtensionAttribute]
public static void UserAuthorizationFailed(ILogger logger, AuthorizationFailure failure);
}
