[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.HstsBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IApplicationBuilder UseHsts(IApplicationBuilder app);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.HstsServicesExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IServiceCollection AddHsts(IServiceCollection services, Action`1<HstsOptions> configureOptions);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.HttpsPolicyBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IApplicationBuilder UseHttpsRedirection(IApplicationBuilder app);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.HttpsRedirectionServicesExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IServiceCollection AddHttpsRedirection(IServiceCollection services, Action`1<HttpsRedirectionOptions> configureOptions);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.HttpsPolicy.HstsLoggingExtensions : object {
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`2<ILogger, Exception> __SkippingInsecureCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`3<ILogger, string, Exception> __SkippingExcludedHostCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`2<ILogger, Exception> __AddingHstsHeaderCallback;
    private static HstsLoggingExtensions();
    [ExtensionAttribute]
[LoggerMessageAttribute("1", "1", "The request is insecure. Skipping HSTS header.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void SkippingInsecure(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("2", "1", "The host '{host}' is excluded. Skipping HSTS header.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void SkippingExcludedHost(ILogger logger, string host);
    [ExtensionAttribute]
[LoggerMessageAttribute("3", "0", "Adding HSTS header to response.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void AddingHstsHeader(ILogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.HttpsPolicy.HstsMiddleware : object {
    private static string IncludeSubDomains;
    private static string Preload;
    private RequestDelegate _next;
    private StringValues _strictTransportSecurityValue;
    private IList`1<string> _excludedHosts;
    private ILogger _logger;
    public HstsMiddleware(RequestDelegate next, IOptions`1<HstsOptions> options, ILoggerFactory loggerFactory);
    public HstsMiddleware(RequestDelegate next, IOptions`1<HstsOptions> options);
    public Task Invoke(HttpContext context);
    private bool IsHostExcluded(string host);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.HttpsPolicy.HstsOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <MaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeSubDomains>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Preload>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ExcludedHosts>k__BackingField;
    public TimeSpan MaxAge { get; public set; }
    public bool IncludeSubDomains { get; public set; }
    public bool Preload { get; public set; }
    public IList`1<string> ExcludedHosts { get; }
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxAge();
    [CompilerGeneratedAttribute]
public void set_MaxAge(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_IncludeSubDomains();
    [CompilerGeneratedAttribute]
public void set_IncludeSubDomains(bool value);
    [CompilerGeneratedAttribute]
public bool get_Preload();
    [CompilerGeneratedAttribute]
public void set_Preload(bool value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ExcludedHosts();
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.HttpsPolicy.HttpsLoggingExtensions : object {
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`3<ILogger, string, Exception> __RedirectingToHttpsCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`3<ILogger, int, Exception> __PortLoadedFromConfigCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`2<ILogger, Exception> __FailedToDeterminePortCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`3<ILogger, int, Exception> __PortFromServerCallback;
    private static HttpsLoggingExtensions();
    [ExtensionAttribute]
[LoggerMessageAttribute("1", "1", "Redirecting to '{redirect}'.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void RedirectingToHttps(ILogger logger, string redirect);
    [ExtensionAttribute]
[LoggerMessageAttribute("2", "1", "Https port '{port}' loaded from configuration.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void PortLoadedFromConfig(ILogger logger, int port);
    [ExtensionAttribute]
[LoggerMessageAttribute("3", "3", "Failed to determine the https port for redirect.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void FailedToDeterminePort(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute("5", "1", "Https port '{httpsPort}' discovered from server endpoints.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void PortFromServer(ILogger logger, int httpsPort);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionMiddleware : object {
    private static int PortNotFound;
    private RequestDelegate _next;
    private Lazy`1<int> _httpsPort;
    private int _statusCode;
    private IServerAddressesFeature _serverAddressesFeature;
    private IConfiguration _config;
    private ILogger _logger;
    public HttpsRedirectionMiddleware(RequestDelegate next, IOptions`1<HttpsRedirectionOptions> options, IConfiguration config, ILoggerFactory loggerFactory);
    public HttpsRedirectionMiddleware(RequestDelegate next, IOptions`1<HttpsRedirectionOptions> options, IConfiguration config, ILoggerFactory loggerFactory, IServerAddressesFeature serverAddressesFeature);
    public Task Invoke(HttpContext context);
    private int TryGetHttpsPort();
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TryGetHttpsPort>g__GetIntConfigValue|10_0(string name);
}
public class Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions : object {
    [CompilerGeneratedAttribute]
private int <RedirectStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <HttpsPort>k__BackingField;
    public int RedirectStatusCode { get; public set; }
    public Nullable`1<int> HttpsPort { get; public set; }
    [CompilerGeneratedAttribute]
public int get_RedirectStatusCode();
    [CompilerGeneratedAttribute]
public void set_RedirectStatusCode(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_HttpsPort();
    [CompilerGeneratedAttribute]
public void set_HttpsPort(Nullable`1<int> value);
}
