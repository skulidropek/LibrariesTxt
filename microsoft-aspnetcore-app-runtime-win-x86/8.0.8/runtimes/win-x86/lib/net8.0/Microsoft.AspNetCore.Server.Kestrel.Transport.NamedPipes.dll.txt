internal static class Microsoft.AspNetCore.Connections.CorrelationIdGenerator : object {
    private static Char[] s_encode32Chars;
    private static long _lastId;
    private static CorrelationIdGenerator();
    [NullableContextAttribute("1")]
public static string GetNextId();
    private static string GenerateId(long id);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal abstract class Microsoft.AspNetCore.Connections.TransportConnection : ConnectionContext {
    private IDictionary`2<object, object> _items;
    private string _connectionId;
    [CompilerGeneratedAttribute]
private IFeatureCollection <MultiplexedConnectionFeatures>k__BackingField;
    [CompilerGeneratedAttribute]
private EndPoint <LocalEndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private EndPoint <RemoteEndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryPool`1<byte> <MemoryPool>k__BackingField;
    [CompilerGeneratedAttribute]
private IDuplexPipe <Transport>k__BackingField;
    [CompilerGeneratedAttribute]
private IDuplexPipe <Application>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <ConnectionClosed>k__BackingField;
    protected internal IConnectionIdFeature _currentIConnectionIdFeature;
    protected internal IConnectionTransportFeature _currentIConnectionTransportFeature;
    protected internal IConnectionItemsFeature _currentIConnectionItemsFeature;
    protected internal IMemoryPoolFeature _currentIMemoryPoolFeature;
    protected internal IConnectionLifetimeFeature _currentIConnectionLifetimeFeature;
    protected internal IPersistentStateFeature _currentIPersistentStateFeature;
    protected internal IConnectionSocketFeature _currentIConnectionSocketFeature;
    protected internal IProtocolErrorCodeFeature _currentIProtocolErrorCodeFeature;
    protected internal IStreamDirectionFeature _currentIStreamDirectionFeature;
    protected internal IStreamIdFeature _currentIStreamIdFeature;
    protected internal IStreamAbortFeature _currentIStreamAbortFeature;
    protected internal IStreamClosedFeature _currentIStreamClosedFeature;
    protected internal IConnectionMetricsTagsFeature _currentIConnectionMetricsTagsFeature;
    private int _featureRevision;
    private List`1<KeyValuePair`2<Type, object>> MaybeExtra;
    public IFeatureCollection MultiplexedConnectionFeatures { get; protected set; }
    public EndPoint LocalEndPoint { get; public set; }
    public EndPoint RemoteEndPoint { get; public set; }
    [NullableAttribute("1")]
public string ConnectionId { get; public set; }
    [NullableAttribute("1")]
public IFeatureCollection Features { get; }
    [NullableAttribute("1")]
public MemoryPool`1<byte> MemoryPool { get; }
    [NullableAttribute("1")]
public IDuplexPipe Transport { get; public set; }
    [NullableAttribute("1")]
public IDuplexPipe Application { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<object, object> Items { get; public set; }
    public CancellationToken ConnectionClosed { get; public set; }
    private bool Microsoft.AspNetCore.Http.Features.IFeatureCollection.IsReadOnly { get; }
    private int Microsoft.AspNetCore.Http.Features.IFeatureCollection.Revision { get; }
    private object Microsoft.AspNetCore.Http.Features.IFeatureCollection.Item { get; private set; }
    [NullableAttribute("1")]
private MemoryPool`1<byte> Microsoft.AspNetCore.Connections.Features.IMemoryPoolFeature.MemoryPool { get; }
    [NullableAttribute("1")]
private IDuplexPipe Microsoft.AspNetCore.Connections.Features.IConnectionTransportFeature.Transport { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<object, object> Microsoft.AspNetCore.Connections.Features.IConnectionItemsFeature.Items { get; private set; }
    private CancellationToken Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.ConnectionClosed { get; private set; }
    [CompilerGeneratedAttribute]
public IFeatureCollection get_MultiplexedConnectionFeatures();
    [CompilerGeneratedAttribute]
protected void set_MultiplexedConnectionFeatures(IFeatureCollection value);
    [CompilerGeneratedAttribute]
public virtual EndPoint get_LocalEndPoint();
    [CompilerGeneratedAttribute]
public virtual void set_LocalEndPoint(EndPoint value);
    [CompilerGeneratedAttribute]
public virtual EndPoint get_RemoteEndPoint();
    [CompilerGeneratedAttribute]
public virtual void set_RemoteEndPoint(EndPoint value);
    [NullableContextAttribute("1")]
public virtual string get_ConnectionId();
    [NullableContextAttribute("1")]
public virtual void set_ConnectionId(string value);
    [NullableContextAttribute("1")]
public virtual IFeatureCollection get_Features();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual MemoryPool`1<byte> get_MemoryPool();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual IDuplexPipe get_Transport();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual void set_Transport(IDuplexPipe value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IDuplexPipe get_Application();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Application(IDuplexPipe value);
    public virtual IDictionary`2<object, object> get_Items();
    public virtual void set_Items(IDictionary`2<object, object> value);
    internal void ResetItems();
    [CompilerGeneratedAttribute]
public virtual CancellationToken get_ConnectionClosed();
    [CompilerGeneratedAttribute]
public virtual void set_ConnectionClosed(CancellationToken value);
    [NullableContextAttribute("1")]
public virtual void Abort(ConnectionAbortedException abortReason);
    private void FastReset();
    internal void ResetFeatureCollection();
    private object ExtraFeatureGet(Type key);
    private void ExtraFeatureSet(Type key, object value);
    private sealed virtual override bool Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_IsReadOnly();
    private sealed virtual override int Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_Revision();
    private sealed virtual override object Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_Item(Type key);
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IFeatureCollection.set_Item(Type key, object value);
    private sealed virtual override TFeature Microsoft.AspNetCore.Http.Features.IFeatureCollection.Get();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IFeatureCollection.Set(TFeature feature);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Connections.TransportConnection/<FastEnumerable>d__68")]
private IEnumerable`1<KeyValuePair`2<Type, object>> FastEnumerable();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<Type, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override MemoryPool`1<byte> Microsoft.AspNetCore.Connections.Features.IMemoryPoolFeature.get_MemoryPool();
    private sealed virtual override IDuplexPipe Microsoft.AspNetCore.Connections.Features.IConnectionTransportFeature.get_Transport();
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionTransportFeature.set_Transport(IDuplexPipe value);
    private sealed virtual override IDictionary`2<object, object> Microsoft.AspNetCore.Connections.Features.IConnectionItemsFeature.get_Items();
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionItemsFeature.set_Items(IDictionary`2<object, object> value);
    private sealed virtual override CancellationToken Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.get_ConnectionClosed();
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.set_ConnectionClosed(CancellationToken value);
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.Abort();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Hosting.WebHostBuilderNamedPipeExtensions : object {
    [ExtensionAttribute]
[SupportedOSPlatformAttribute("windows")]
public static IWebHostBuilder UseNamedPipes(IWebHostBuilder hostBuilder);
    [ExtensionAttribute]
[SupportedOSPlatformAttribute("windows")]
public static IWebHostBuilder UseNamedPipes(IWebHostBuilder hostBuilder, Action`1<NamedPipeTransportOptions> configureOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.NamedPipes.Internal.NamedPipeConnection : TransportConnection {
    private static ConnectionAbortedException SendGracefullyCompletedException;
    private static int MinAllocBufferSize;
    private NamedPipeConnectionListener _connectionListener;
    private NamedPipeServerStream _stream;
    private ILogger _log;
    private IDuplexPipe _originalTransport;
    private CancellationTokenSource _connectionClosedTokenSource;
    private bool _connectionClosed;
    private bool _connectionShutdown;
    private bool _streamDisconnected;
    private Exception _shutdownReason;
    private object _shutdownLock;
    internal Task _receivingTask;
    internal Task _sendingTask;
    [CompilerGeneratedAttribute]
private MemoryPool`1<byte> <MemoryPool>k__BackingField;
    public PipeWriter Input { get; }
    public PipeReader Output { get; }
    public MemoryPool`1<byte> MemoryPool { get; }
    public NamedPipeServerStream NamedPipe { get; }
    public NamedPipeConnection(NamedPipeConnectionListener connectionListener, NamedPipeServerStream stream, NamedPipeEndPoint endPoint, ILogger logger, MemoryPool`1<byte> memoryPool, PipeOptions inputOptions, PipeOptions outputOptions);
    private static NamedPipeConnection();
    public PipeWriter get_Input();
    public PipeReader get_Output();
    [CompilerGeneratedAttribute]
public virtual MemoryPool`1<byte> get_MemoryPool();
    public sealed virtual NamedPipeServerStream get_NamedPipe();
    public void Start();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.NamedPipes.Internal.NamedPipeConnection/<DoReceiveAsync>d__25")]
private Task DoReceiveAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.NamedPipes.Internal.NamedPipeConnection/<DoSendAsync>d__26")]
private Task DoSendAsync();
    private void Shutdown(Exception shutdownReason);
    private void FireConnectionClosed();
    private void CancelConnectionClosedToken();
    public virtual void Abort(ConnectionAbortedException abortReason);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.NamedPipes.Internal.NamedPipeConnection/<DisposeAsync>d__31")]
public virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.NamedPipes.Internal.NamedPipeConnectionListener : object {
    private ILogger _log;
    private NamedPipeEndPoint _endpoint;
    private NamedPipeTransportOptions _options;
    private ObjectPool`1<NamedPipeServerStream> _namedPipeServerStreamPool;
    private CancellationTokenSource _listeningTokenSource;
    private CancellationToken _listeningToken;
    private Channel`1<ConnectionContext> _acceptedQueue;
    private MemoryPool`1<byte> _memoryPool;
    private PipeOptions _inputOptions;
    private PipeOptions _outputOptions;
    private NamedPipeServerStreamPoolPolicy _poolPolicy;
    private Task _completeListeningTask;
    private int _disposed;
    public EndPoint EndPoint { get; }
    public NamedPipeConnectionListener(NamedPipeEndPoint endpoint, NamedPipeTransportOptions options, ILoggerFactory loggerFactory, ObjectPoolProvider objectPoolProvider);
    internal void ReturnStream(NamedPipeServerStream stream);
    public void Start();
    public sealed virtual EndPoint get_EndPoint();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.NamedPipes.Internal.NamedPipeConnectionListener/<StartAsync>d__18")]
private Task StartAsync(NamedPipeServerStream nextStream);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.NamedPipes.Internal.NamedPipeConnectionListener/<AcceptAsync>d__19")]
public sealed virtual ValueTask`1<ConnectionContext> AcceptAsync(CancellationToken cancellationToken);
    public sealed virtual ValueTask UnbindAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.NamedPipes.Internal.NamedPipeConnectionListener/<DisposeAsync>d__21")]
public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Server.Kestrel.Transport.NamedPipes.Internal.NamedPipeLog : object {
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`3<ILogger, string, Exception> __AcceptedConnectionCoreCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`3<ILogger, string, Exception> __ConnectionErrorCoreCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`2<ILogger, Exception> __ConnectionListenerAbortedCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`3<ILogger, string, Exception> __ConnectionPauseCoreCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`3<ILogger, string, Exception> __ConnectionResumeCoreCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`3<ILogger, string, Exception> __ConnectionReadEndCoreCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`4<ILogger, string, string, Exception> __ConnectionDisconnectCoreCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`2<ILogger, Exception> __ConnectionListenerBrokenPipeCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static Action`2<ILogger, Exception> __ConnectionListenerQueueExitedCallback;
    private static NamedPipeLog();
    [LoggerMessageAttribute("1", "1", "Connection id "{ConnectionId}" accepted.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static void AcceptedConnectionCore(ILogger logger, string connectionId);
    public static void AcceptedConnection(ILogger logger, BaseConnectionContext connection);
    [LoggerMessageAttribute("2", "1", "Connection id "{ConnectionId}" unexpected error.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static void ConnectionErrorCore(ILogger logger, string connectionId, Exception ex);
    public static void ConnectionError(ILogger logger, BaseConnectionContext connection, Exception ex);
    [LoggerMessageAttribute("3", "4", "Named pipe listener aborted.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void ConnectionListenerAborted(ILogger logger, Exception exception);
    [LoggerMessageAttribute("4", "1", "Connection id "{ConnectionId}" paused.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static void ConnectionPauseCore(ILogger logger, string connectionId);
    public static void ConnectionPause(ILogger logger, NamedPipeConnection connection);
    [LoggerMessageAttribute("5", "1", "Connection id "{ConnectionId}" resumed.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static void ConnectionResumeCore(ILogger logger, string connectionId);
    public static void ConnectionResume(ILogger logger, NamedPipeConnection connection);
    [LoggerMessageAttribute("6", "1", "Connection id "{ConnectionId}" received end of stream.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static void ConnectionReadEndCore(ILogger logger, string connectionId);
    public static void ConnectionReadEnd(ILogger logger, NamedPipeConnection connection);
    [LoggerMessageAttribute("7", "1", "Connection id "{ConnectionId}" disconnecting stream because: "{Reason}"")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
private static void ConnectionDisconnectCore(ILogger logger, string connectionId, string reason);
    public static void ConnectionDisconnect(ILogger logger, NamedPipeConnection connection, string reason);
    [LoggerMessageAttribute("8", "1", "Named pipe listener received broken pipe while waiting for a connection.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void ConnectionListenerBrokenPipe(ILogger logger, Exception ex);
    [LoggerMessageAttribute("9", "0", "Named pipe listener queue exited.")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.36612")]
public static void ConnectionListenerQueueExited(ILogger logger);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.NamedPipes.Internal.NamedPipeTransportFactory : object {
    private static string LocalComputerServerName;
    private ILoggerFactory _loggerFactory;
    private ObjectPoolProvider _objectPoolProvider;
    private NamedPipeTransportOptions _options;
    [NullableContextAttribute("1")]
public NamedPipeTransportFactory(ILoggerFactory loggerFactory, IOptions`1<NamedPipeTransportOptions> options, ObjectPoolProvider objectPoolProvider);
    [NullableContextAttribute("1")]
public sealed virtual ValueTask`1<IConnectionListener> BindAsync(EndPoint endpoint, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public sealed virtual bool CanBind(EndPoint endpoint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Server.Kestrel.Transport.NamedPipes.NamedPipeTransportOptions : object {
    [CompilerGeneratedAttribute]
private int <ListenerQueueCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxReadBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxWriteBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CurrentUserOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private PipeSecurity <PipeSecurity>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<MemoryPool`1<byte>> <MemoryPoolFactory>k__BackingField;
    public int ListenerQueueCount { get; public set; }
    public Nullable`1<long> MaxReadBufferSize { get; public set; }
    public Nullable`1<long> MaxWriteBufferSize { get; public set; }
    public bool CurrentUserOnly { get; public set; }
    [NullableAttribute("2")]
public PipeSecurity PipeSecurity { get; public set; }
    internal Func`1<MemoryPool`1<byte>> MemoryPoolFactory { get; internal set; }
    [CompilerGeneratedAttribute]
public int get_ListenerQueueCount();
    [CompilerGeneratedAttribute]
public void set_ListenerQueueCount(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxReadBufferSize();
    [CompilerGeneratedAttribute]
public void set_MaxReadBufferSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxWriteBufferSize();
    [CompilerGeneratedAttribute]
public void set_MaxWriteBufferSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public bool get_CurrentUserOnly();
    [CompilerGeneratedAttribute]
public void set_CurrentUserOnly(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public PipeSecurity get_PipeSecurity();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_PipeSecurity(PipeSecurity value);
    [CompilerGeneratedAttribute]
internal Func`1<MemoryPool`1<byte>> get_MemoryPoolFactory();
    [CompilerGeneratedAttribute]
internal void set_MemoryPoolFactory(Func`1<MemoryPool`1<byte>> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Buffers.DiagnosticMemoryPool : MemoryPool`1<byte> {
    private MemoryPool`1<byte> _pool;
    private bool _allowLateReturn;
    private bool _rentTracking;
    private object _syncObj;
    private HashSet`1<DiagnosticPoolBlock> _blocks;
    private List`1<Exception> _blockAccessExceptions;
    private TaskCompletionSource _allBlocksReturned;
    private int _totalBlocks;
    private static int AnySize;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    public bool IsDisposed { get; private set; }
    public int MaxBufferSize { get; }
    public DiagnosticMemoryPool(MemoryPool`1<byte> pool, bool allowLateReturn, bool rentTracking);
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public virtual IMemoryOwner`1<byte> Rent(int size);
    public virtual int get_MaxBufferSize();
    internal void Return(DiagnosticPoolBlock block);
    internal void ReportException(Exception exception);
    protected virtual void Dispose(bool disposing);
    private void SetAllBlocksReturned();
    private AggregateException CreateAccessExceptions();
    [AsyncStateMachineAttribute("System.Buffers.DiagnosticMemoryPool/<WhenAllBlocksReturnedAsync>d__22")]
public Task WhenAllBlocksReturnedAsync(TimeSpan timeout);
}
internal class System.Buffers.DiagnosticPoolBlock : MemoryManager`1<byte> {
    private DiagnosticMemoryPool _pool;
    private IMemoryOwner`1<byte> _memoryOwner;
    private Nullable`1<MemoryHandle> _memoryHandle;
    private Memory`1<byte> _memory;
    private object _syncObj;
    private bool _isDisposed;
    private int _pinCount;
    [CompilerGeneratedAttribute]
private StackTrace <Leaser>k__BackingField;
    public Memory`1<byte> Memory { get; }
    [NullableAttribute("2")]
public StackTrace Leaser { get; public set; }
    [NullableContextAttribute("1")]
internal DiagnosticPoolBlock(DiagnosticMemoryPool pool, IMemoryOwner`1<byte> memoryOwner);
    public virtual Memory`1<byte> get_Memory();
    protected virtual void Dispose(bool disposing);
    public virtual Span`1<byte> GetSpan();
    public virtual MemoryHandle Pin(int byteOffset);
    protected virtual bool TryGetArray(ArraySegment`1& segment);
    public virtual void Unpin();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public StackTrace get_Leaser();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Leaser(StackTrace value);
    public void Track();
}
internal class System.Buffers.MemoryPoolBlock : object {
    [CompilerGeneratedAttribute]
private PinnedBlockMemoryPool <Pool>k__BackingField;
    [CompilerGeneratedAttribute]
private Memory`1<byte> <Memory>k__BackingField;
    [NullableAttribute("1")]
public PinnedBlockMemoryPool Pool { get; }
    public Memory`1<byte> Memory { get; }
    [NullableContextAttribute("1")]
internal MemoryPoolBlock(PinnedBlockMemoryPool pool, int length);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public PinnedBlockMemoryPool get_Pool();
    [CompilerGeneratedAttribute]
public sealed virtual Memory`1<byte> get_Memory();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Buffers.MemoryPoolThrowHelper : object {
    public static void ThrowArgumentOutOfRangeException(int sourceLength, int offset);
    private static ArgumentOutOfRangeException GetArgumentOutOfRangeException(int sourceLength, int offset);
    public static void ThrowInvalidOperationException_PinCountZero(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_ReturningPinnedBlock(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_DoubleDispose();
    public static void ThrowInvalidOperationException_BlockDoubleDispose(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_BlockReturnedToDisposedPool(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_BlockIsBackedByDisposedSlab(DiagnosticPoolBlock block);
    public static void ThrowInvalidOperationException_DisposingPoolWithActiveBlocks(int returned, int total, DiagnosticPoolBlock[] blocks);
    public static void ThrowInvalidOperationException_BlocksWereNotReturnedInTime(int returned, int total, DiagnosticPoolBlock[] blocks);
    private static string GenerateMessage(string message, DiagnosticPoolBlock[] blocks);
    public static void ThrowArgumentOutOfRangeException_BufferRequestTooLarge(int maxSize);
    public static void ThrowObjectDisposedException(ExceptionArgument argument);
    private static ArgumentOutOfRangeException GetArgumentOutOfRangeException_BufferRequestTooLarge(int maxSize);
    private static ObjectDisposedException GetObjectDisposedException(ExceptionArgument argument);
    private static string GetArgumentName(ExceptionArgument argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Buffers.PinnedBlockMemoryPool : MemoryPool`1<byte> {
    private static int _blockSize;
    [CompilerGeneratedAttribute]
private int <MaxBufferSize>k__BackingField;
    private ConcurrentQueue`1<MemoryPoolBlock> _blocks;
    private bool _isDisposed;
    private object _disposeSync;
    private static int AnySize;
    public int MaxBufferSize { get; }
    public static int BlockSize { get; }
    [CompilerGeneratedAttribute]
public virtual int get_MaxBufferSize();
    public static int get_BlockSize();
    public virtual IMemoryOwner`1<byte> Rent(int size);
    internal void Return(MemoryPoolBlock block);
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Buffers.PinnedBlockMemoryPoolFactory : object {
    public static MemoryPool`1<byte> Create();
    public static MemoryPool`1<byte> CreatePinnedBlockMemoryPool();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.IO.Pipelines.DuplexPipe : object {
    [CompilerGeneratedAttribute]
private PipeReader <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private PipeWriter <Output>k__BackingField;
    public PipeReader Input { get; }
    public PipeWriter Output { get; }
    public DuplexPipe(PipeReader reader, PipeWriter writer);
    [CompilerGeneratedAttribute]
public sealed virtual PipeReader get_Input();
    [CompilerGeneratedAttribute]
public sealed virtual PipeWriter get_Output();
    public static DuplexPipePair CreateConnectionPair(PipeOptions inputOptions, PipeOptions outputOptions);
}
internal class UnmanagedBufferAllocator : ValueType {
    private int _blockSize;
    private int _currentBlockCount;
    private Void** _currentAlloc;
    private Byte* _currentBlock;
    public static int DefaultBlockSize { get; }
    public UnmanagedBufferAllocator(int blockSize);
    public static int get_DefaultBlockSize();
    public T* AllocAsPointer(int count);
    public Span`1<T> AllocAsSpan(int count);
    public Byte* GetHeaderEncodedBytes(string myString, Int32& length);
    public sealed virtual void Dispose();
    private Span`1<byte> GetSpan(int sizeHint, Boolean& mustCommit);
    private void Commit(int count);
    private Byte* Alloc(int size);
    private void NewBlock();
}
