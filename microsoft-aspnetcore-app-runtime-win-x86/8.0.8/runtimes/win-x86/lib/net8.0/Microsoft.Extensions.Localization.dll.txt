internal static class Microsoft.AspNetCore.Shared.ArgumentNullThrowHelper : object {
    [NullableContextAttribute("2")]
public static void ThrowIfNull(object argument, string paramName);
}
internal static class Microsoft.AspNetCore.Shared.ArgumentThrowHelper : object {
    [NullableContextAttribute("2")]
public static void ThrowIfNullOrEmpty(string argument, string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.LocalizationServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddLocalization(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddLocalization(IServiceCollection services, Action`1<LocalizationOptions> setupAction);
    internal static void AddLocalizationServices(IServiceCollection services);
    internal static void AddLocalizationServices(IServiceCollection services, Action`1<LocalizationOptions> setupAction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Localization.AssemblyWrapper : object {
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    public Assembly Assembly { get; }
    public string FullName { get; }
    public AssemblyWrapper(Assembly assembly);
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    public virtual string get_FullName();
    public virtual Stream GetManifestResourceStream(string name);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Localization.IResourceNamesCache {
    public abstract virtual IList`1<string> GetOrAdd(string name, Func`2<string, IList`1<string>> valueFactory);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Extensions.Localization.IResourceStringProvider {
    public abstract virtual IList`1<string> GetAllResourceStrings(CultureInfo culture, bool throwOnMissing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Localization.LocalizationOptions : object {
    [CompilerGeneratedAttribute]
private string <ResourcesPath>k__BackingField;
    public string ResourcesPath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ResourcesPath();
    [CompilerGeneratedAttribute]
public void set_ResourcesPath(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class Microsoft.Extensions.Localization.ResourceLocationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ResourceLocation>k__BackingField;
    public string ResourceLocation { get; }
    public ResourceLocationAttribute(string resourceLocation);
    [CompilerGeneratedAttribute]
public string get_ResourceLocation();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.Extensions.Localization.ResourceManagerStringLocalizer : object {
    private ConcurrentDictionary`2<string, object> _missingManifestCache;
    private IResourceNamesCache _resourceNamesCache;
    private ResourceManager _resourceManager;
    private IResourceStringProvider _resourceStringProvider;
    private string _resourceBaseName;
    private ILogger _logger;
    public LocalizedString Item { get; }
    public LocalizedString Item { get; }
    public ResourceManagerStringLocalizer(ResourceManager resourceManager, Assembly resourceAssembly, string baseName, IResourceNamesCache resourceNamesCache, ILogger logger);
    internal ResourceManagerStringLocalizer(ResourceManager resourceManager, AssemblyWrapper resourceAssemblyWrapper, string baseName, IResourceNamesCache resourceNamesCache, ILogger logger);
    internal ResourceManagerStringLocalizer(ResourceManager resourceManager, IResourceStringProvider resourceStringProvider, string baseName, IResourceNamesCache resourceNamesCache, ILogger logger);
    public virtual LocalizedString get_Item(string name);
    public virtual LocalizedString get_Item(string name, Object[] arguments);
    public virtual IEnumerable`1<LocalizedString> GetAllStrings(bool includeParentCultures);
    [IteratorStateMachineAttribute("Microsoft.Extensions.Localization.ResourceManagerStringLocalizer/<GetAllStrings>d__14")]
protected IEnumerable`1<LocalizedString> GetAllStrings(bool includeParentCultures, CultureInfo culture);
    [NullableContextAttribute("2")]
protected string GetStringSafely(string name, CultureInfo culture);
    private IEnumerable`1<string> GetResourceNamesFromCultureHierarchy(CultureInfo startingCulture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Localization.ResourceManagerStringLocalizerFactory : object {
    private IResourceNamesCache _resourceNamesCache;
    private ConcurrentDictionary`2<string, ResourceManagerStringLocalizer> _localizerCache;
    private string _resourcesRelativePath;
    private ILoggerFactory _loggerFactory;
    public ResourceManagerStringLocalizerFactory(IOptions`1<LocalizationOptions> localizationOptions, ILoggerFactory loggerFactory);
    protected virtual string GetResourcePrefix(TypeInfo typeInfo);
    protected virtual string GetResourcePrefix(TypeInfo typeInfo, string baseNamespace, string resourcesRelativePath);
    protected virtual string GetResourcePrefix(string baseResourceName, string baseNamespace);
    public sealed virtual IStringLocalizer Create(Type resourceSource);
    public sealed virtual IStringLocalizer Create(string baseName, string location);
    protected virtual ResourceManagerStringLocalizer CreateResourceManagerStringLocalizer(Assembly assembly, string baseName);
    protected virtual string GetResourcePrefix(string location, string baseName, string resourceLocation);
    protected virtual ResourceLocationAttribute GetResourceLocationAttribute(Assembly assembly);
    protected virtual RootNamespaceAttribute GetRootNamespaceAttribute(Assembly assembly);
    private string GetRootNamespace(Assembly assembly);
    private string GetResourcePath(Assembly assembly);
    private static string TrimPrefix(string name, string prefix);
}
internal class Microsoft.Extensions.Localization.ResourceManagerStringProvider : object {
    private IResourceNamesCache _resourceNamesCache;
    private ResourceManager _resourceManager;
    private Assembly _assembly;
    private string _resourceBaseName;
    [NullableContextAttribute("1")]
public ResourceManagerStringProvider(IResourceNamesCache resourceCache, ResourceManager resourceManager, Assembly assembly, string baseName);
    private string GetResourceCacheKey(CultureInfo culture);
    private string GetResourceName(CultureInfo culture);
    [NullableContextAttribute("1")]
public sealed virtual IList`1<string> GetAllResourceStrings(CultureInfo culture, bool throwOnMissing);
}
public class Microsoft.Extensions.Localization.ResourceNamesCache : object {
    private ConcurrentDictionary`2<string, IList`1<string>> _cache;
    [NullableContextAttribute("1")]
public sealed virtual IList`1<string> GetOrAdd(string name, Func`2<string, IList`1<string>> valueFactory);
}
internal static class Microsoft.Extensions.Localization.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string Localization_MissingManifest { get; }
    internal static string Localization_MissingManifest_Parent { get; }
    internal static string Localization_TypeMustHaveTypeName { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_Localization_MissingManifest();
    internal static string FormatLocalization_MissingManifest(object p0);
    internal static string get_Localization_MissingManifest_Parent();
    internal static string get_Localization_TypeMustHaveTypeName();
    internal static string FormatLocalization_TypeMustHaveTypeName(object p0);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class Microsoft.Extensions.Localization.RootNamespaceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <RootNamespace>k__BackingField;
    public string RootNamespace { get; }
    public RootNamespaceAttribute(string rootNamespace);
    [CompilerGeneratedAttribute]
public string get_RootNamespace();
}
