[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Authentication.Certificate.AuthenticateResults : object {
    internal static AuthenticateResult NoSelfSigned;
    internal static AuthenticateResult NoChainedCertificates;
    internal static AuthenticateResult InvalidClientCertificate;
    private static AuthenticateResults();
}
public static class Microsoft.AspNetCore.Authentication.Certificate.CertificateAuthenticationDefaults : object {
    [NullableAttribute("1")]
public static string AuthenticationScheme;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authentication.Certificate.CertificateAuthenticationEvents : object {
    [CompilerGeneratedAttribute]
private Func`2<CertificateAuthenticationFailedContext, Task> <OnAuthenticationFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<CertificateValidatedContext, Task> <OnCertificateValidated>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<CertificateChallengeContext, Task> <OnChallenge>k__BackingField;
    public Func`2<CertificateAuthenticationFailedContext, Task> OnAuthenticationFailed { get; public set; }
    public Func`2<CertificateValidatedContext, Task> OnCertificateValidated { get; public set; }
    public Func`2<CertificateChallengeContext, Task> OnChallenge { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<CertificateAuthenticationFailedContext, Task> get_OnAuthenticationFailed();
    [CompilerGeneratedAttribute]
public void set_OnAuthenticationFailed(Func`2<CertificateAuthenticationFailedContext, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<CertificateValidatedContext, Task> get_OnCertificateValidated();
    [CompilerGeneratedAttribute]
public void set_OnCertificateValidated(Func`2<CertificateValidatedContext, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<CertificateChallengeContext, Task> get_OnChallenge();
    [CompilerGeneratedAttribute]
public void set_OnChallenge(Func`2<CertificateChallengeContext, Task> value);
    public virtual Task AuthenticationFailed(CertificateAuthenticationFailedContext context);
    public virtual Task CertificateValidated(CertificateValidatedContext context);
    public virtual Task Challenge(CertificateChallengeContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Authentication.Certificate.CertificateAuthenticationFailedContext : ResultContext`1<CertificateAuthenticationOptions> {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; public set; }
    public CertificateAuthenticationFailedContext(HttpContext context, AuthenticationScheme scheme, CertificateAuthenticationOptions options);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Microsoft.AspNetCore.Authentication.Certificate.CertificateAuthenticationHandler : AuthenticationHandler`1<CertificateAuthenticationOptions> {
    private static Oid ClientCertificateOid;
    private ICertificateValidationCache _cache;
    private CertificateAuthenticationEvents Events { get; private set; }
    public CertificateAuthenticationHandler(IOptionsMonitor`1<CertificateAuthenticationOptions> options, ILoggerFactory logger, UrlEncoder encoder);
    private static CertificateAuthenticationHandler();
    private CertificateAuthenticationEvents get_Events();
    private void set_Events(CertificateAuthenticationEvents value);
    protected virtual Task`1<object> CreateEventsAsync();
    protected virtual Task InitializeHandlerAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.Certificate.CertificateAuthenticationHandler/<HandleAuthenticateAsync>d__8")]
protected virtual Task`1<AuthenticateResult> HandleAuthenticateAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.Certificate.CertificateAuthenticationHandler/<HandleFailureAsync>d__9")]
private Task`1<CertificateAuthenticationFailedContext> HandleFailureAsync(Exception error);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.Certificate.CertificateAuthenticationHandler/<ValidateCertificateAsync>d__10")]
private Task`1<AuthenticateResult> ValidateCertificateAsync(X509Certificate2 clientCertificate);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.Certificate.CertificateAuthenticationHandler/<HandleChallengeAsync>d__11")]
protected virtual Task HandleChallengeAsync(AuthenticationProperties properties);
    private X509ChainPolicy BuildChainPolicy(X509Certificate2 certificate, bool isCertificateSelfSigned);
    private ClaimsPrincipal CreatePrincipal(X509Certificate2 certificate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authentication.Certificate.CertificateAuthenticationOptions : AuthenticationSchemeOptions {
    [CompilerGeneratedAttribute]
private CertificateTypes <AllowedCertificateTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2Collection <CustomTrustStore>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2Collection <AdditionalChainCertificates>k__BackingField;
    [CompilerGeneratedAttribute]
private X509ChainTrustMode <ChainTrustValidationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateCertificateUse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateValidityPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private X509RevocationFlag <RevocationFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private X509RevocationMode <RevocationMode>k__BackingField;
    public CertificateTypes AllowedCertificateTypes { get; public set; }
    public X509Certificate2Collection CustomTrustStore { get; public set; }
    public X509Certificate2Collection AdditionalChainCertificates { get; public set; }
    public X509ChainTrustMode ChainTrustValidationMode { get; public set; }
    public bool ValidateCertificateUse { get; public set; }
    public bool ValidateValidityPeriod { get; public set; }
    public X509RevocationFlag RevocationFlag { get; public set; }
    public X509RevocationMode RevocationMode { get; public set; }
    [NullableAttribute("2")]
public CertificateAuthenticationEvents Events { get; public set; }
    [CompilerGeneratedAttribute]
public CertificateTypes get_AllowedCertificateTypes();
    [CompilerGeneratedAttribute]
public void set_AllowedCertificateTypes(CertificateTypes value);
    [CompilerGeneratedAttribute]
public X509Certificate2Collection get_CustomTrustStore();
    [CompilerGeneratedAttribute]
public void set_CustomTrustStore(X509Certificate2Collection value);
    [CompilerGeneratedAttribute]
public X509Certificate2Collection get_AdditionalChainCertificates();
    [CompilerGeneratedAttribute]
public void set_AdditionalChainCertificates(X509Certificate2Collection value);
    [CompilerGeneratedAttribute]
public X509ChainTrustMode get_ChainTrustValidationMode();
    [CompilerGeneratedAttribute]
public void set_ChainTrustValidationMode(X509ChainTrustMode value);
    [CompilerGeneratedAttribute]
public bool get_ValidateCertificateUse();
    [CompilerGeneratedAttribute]
public void set_ValidateCertificateUse(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateValidityPeriod();
    [CompilerGeneratedAttribute]
public void set_ValidateValidityPeriod(bool value);
    [CompilerGeneratedAttribute]
public X509RevocationFlag get_RevocationFlag();
    [CompilerGeneratedAttribute]
public void set_RevocationFlag(X509RevocationFlag value);
    [CompilerGeneratedAttribute]
public X509RevocationMode get_RevocationMode();
    [CompilerGeneratedAttribute]
public void set_RevocationMode(X509RevocationMode value);
    [NullableContextAttribute("2")]
public CertificateAuthenticationEvents get_Events();
    [NullableContextAttribute("2")]
public void set_Events(CertificateAuthenticationEvents value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Authentication.Certificate.CertificateChallengeContext : PropertiesContext`1<CertificateAuthenticationOptions> {
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public bool Handled { get; private set; }
    public CertificateChallengeContext(HttpContext context, AuthenticationScheme scheme, CertificateAuthenticationOptions options, AuthenticationProperties properties);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
private void set_Handled(bool value);
    public void HandleResponse();
}
[FlagsAttribute]
public enum Microsoft.AspNetCore.Authentication.Certificate.CertificateTypes : Enum {
    public int value__;
    public static CertificateTypes Chained;
    public static CertificateTypes SelfSigned;
    public static CertificateTypes All;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Authentication.Certificate.CertificateValidatedContext : ResultContext`1<CertificateAuthenticationOptions> {
    [CompilerGeneratedAttribute]
private X509Certificate2 <ClientCertificate>k__BackingField;
    public X509Certificate2 ClientCertificate { get; public set; }
    public CertificateValidatedContext(HttpContext context, AuthenticationScheme scheme, CertificateAuthenticationOptions options);
    [CompilerGeneratedAttribute]
public X509Certificate2 get_ClientCertificate();
    [CompilerGeneratedAttribute]
public void set_ClientCertificate(X509Certificate2 value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authentication.Certificate.CertificateValidationCache : object {
    private MemoryCache _cache;
    private CertificateValidationCacheOptions _options;
    private TimeProvider _timeProvider;
    internal CertificateValidationCache(IOptions`1<CertificateValidationCacheOptions> options, TimeProvider timeProvider);
    public CertificateValidationCache(IOptions`1<CertificateValidationCacheOptions> options);
    public sealed virtual AuthenticateResult Get(HttpContext context, X509Certificate2 certificate);
    public sealed virtual void Put(HttpContext context, X509Certificate2 certificate, AuthenticateResult result);
    private static string ComputeKey(X509Certificate2 certificate);
}
public class Microsoft.AspNetCore.Authentication.Certificate.CertificateValidationCacheOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <CacheEntryExpiration>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CacheSize>k__BackingField;
    public TimeSpan CacheEntryExpiration { get; public set; }
    public int CacheSize { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_CacheEntryExpiration();
    [CompilerGeneratedAttribute]
public void set_CacheEntryExpiration(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_CacheSize();
    [CompilerGeneratedAttribute]
public void set_CacheSize(int value);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Authentication.Certificate.ICertificateValidationCache {
    public abstract virtual AuthenticateResult Get(HttpContext context, X509Certificate2 certificate);
    public abstract virtual void Put(HttpContext context, X509Certificate2 certificate, AuthenticateResult result);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Authentication.Certificate.X509Certificate2Extensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsSelfSigned(X509Certificate2 certificate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.CertificateAuthenticationAppBuilderExtensions : object {
    [ExtensionAttribute]
public static AuthenticationBuilder AddCertificate(AuthenticationBuilder builder);
    [ExtensionAttribute]
public static AuthenticationBuilder AddCertificate(AuthenticationBuilder builder, string authenticationScheme);
    [ExtensionAttribute]
public static AuthenticationBuilder AddCertificate(AuthenticationBuilder builder, Action`1<CertificateAuthenticationOptions> configureOptions);
    [ExtensionAttribute]
public static AuthenticationBuilder AddCertificate(AuthenticationBuilder builder, string authenticationScheme, Action`1<CertificateAuthenticationOptions> configureOptions);
    [ExtensionAttribute]
public static AuthenticationBuilder AddCertificateCache(AuthenticationBuilder builder, Action`1<CertificateValidationCacheOptions> configureOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Extensions.Logging.LoggingExtensions : object {
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`2<ILogger, Exception> __NoCertificateCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`2<ILogger, Exception> __NotHttpsCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`4<ILogger, string, string, Exception> __CertificateRejectedCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`4<ILogger, string, IList`1<string>, Exception> __CertificateFailedValidationCallback;
    private static LoggingExtensions();
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void NoCertificate(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void NotHttps(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void CertificateRejected(ILogger logger, string certificateType, string subject);
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void CertificateFailedValidation(ILogger logger, string subject, IList`1<string> chainErrors);
}
