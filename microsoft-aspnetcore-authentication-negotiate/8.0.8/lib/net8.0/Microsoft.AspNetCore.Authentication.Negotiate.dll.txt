[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Authentication.Negotiate.AuthenticatedContext : ResultContext`1<NegotiateOptions> {
    public AuthenticatedContext(HttpContext context, AuthenticationScheme scheme, NegotiateOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Authentication.Negotiate.AuthenticationFailedContext : RemoteAuthenticationContext`1<NegotiateOptions> {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; public set; }
    public AuthenticationFailedContext(HttpContext context, AuthenticationScheme scheme, NegotiateOptions options);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
}
internal enum Microsoft.AspNetCore.Authentication.Negotiate.BlobErrorType : Enum {
    public int value__;
    public static BlobErrorType None;
    public static BlobErrorType CredentialError;
    public static BlobErrorType ClientError;
    public static BlobErrorType Other;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Authentication.Negotiate.ChallengeContext : PropertiesContext`1<NegotiateOptions> {
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public bool Handled { get; private set; }
    public ChallengeContext(HttpContext context, AuthenticationScheme scheme, NegotiateOptions options, AuthenticationProperties properties);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
private void set_Handled(bool value);
    public void HandleResponse();
}
[NullableContextAttribute("1")]
internal interface Microsoft.AspNetCore.Authentication.Negotiate.INegotiateState {
    public bool IsCompleted { get; }
    public string Protocol { get; }
    [NullableContextAttribute("2")]
public abstract virtual string GetOutgoingBlob(string incomingBlob, BlobErrorType& status, Exception& error);
    public abstract virtual bool get_IsCompleted();
    public abstract virtual string get_Protocol();
    public abstract virtual IIdentity GetIdentity();
}
[NullableContextAttribute("1")]
internal interface Microsoft.AspNetCore.Authentication.Negotiate.INegotiateStateFactory {
    public abstract virtual INegotiateState CreateInstance();
}
internal class Microsoft.AspNetCore.Authentication.Negotiate.Internal.NegotiateOptionsValidationStartupFilter : object {
    private string _authenticationScheme;
    [NullableContextAttribute("1")]
public NegotiateOptionsValidationStartupFilter(string authenticationScheme);
    [NullableContextAttribute("1")]
public sealed virtual Action`1<IApplicationBuilder> Configure(Action`1<IApplicationBuilder> next);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Authentication.Negotiate.LdapAdapter : object {
    [GeneratedRegexAttribute("(?<![^\\]\\),")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.36612")]
internal static Regex DistinguishedNameSeparator();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.Negotiate.LdapAdapter/<RetrieveClaimsAsync>d__1")]
public static Task RetrieveClaimsAsync(LdapSettings settings, ClaimsIdentity identity, ILogger logger);
    private static void GetNestedGroups(LdapConnection connection, ClaimsIdentity principal, string distinguishedName, string groupCN, ILogger logger, IList`1<string> retrievedClaims, HashSet`1<string> processedGroups);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Authentication.Negotiate.LdapContext : ResultContext`1<NegotiateOptions> {
    [CompilerGeneratedAttribute]
private LdapSettings <LdapSettings>k__BackingField;
    public LdapSettings LdapSettings { get; }
    public LdapContext(HttpContext context, AuthenticationScheme scheme, NegotiateOptions options, LdapSettings settings);
    [CompilerGeneratedAttribute]
public LdapSettings get_LdapSettings();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authentication.Negotiate.LdapSettings : object {
    [CompilerGeneratedAttribute]
private bool <EnableLdapClaimResolution>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MachineAccountName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MachineAccountPassword>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreNestedGroups>k__BackingField;
    [CompilerGeneratedAttribute]
private LdapConnection <LdapConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ClaimsCacheSlidingExpiration>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ClaimsCacheAbsoluteExpiration>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClaimsCacheSize>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryCache <ClaimsCache>k__BackingField;
    public bool EnableLdapClaimResolution { get; public set; }
    [NullableAttribute("1")]
public string Domain { get; public set; }
    public string MachineAccountName { get; public set; }
    public string MachineAccountPassword { get; public set; }
    public bool IgnoreNestedGroups { get; public set; }
    public LdapConnection LdapConnection { get; public set; }
    public TimeSpan ClaimsCacheSlidingExpiration { get; public set; }
    public TimeSpan ClaimsCacheAbsoluteExpiration { get; public set; }
    public int ClaimsCacheSize { get; public set; }
    internal MemoryCache ClaimsCache { get; internal set; }
    [CompilerGeneratedAttribute]
public bool get_EnableLdapClaimResolution();
    [CompilerGeneratedAttribute]
public void set_EnableLdapClaimResolution(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Domain();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Domain(string value);
    [CompilerGeneratedAttribute]
public string get_MachineAccountName();
    [CompilerGeneratedAttribute]
public void set_MachineAccountName(string value);
    [CompilerGeneratedAttribute]
public string get_MachineAccountPassword();
    [CompilerGeneratedAttribute]
public void set_MachineAccountPassword(string value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreNestedGroups();
    [CompilerGeneratedAttribute]
public void set_IgnoreNestedGroups(bool value);
    [CompilerGeneratedAttribute]
public LdapConnection get_LdapConnection();
    [CompilerGeneratedAttribute]
public void set_LdapConnection(LdapConnection value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ClaimsCacheSlidingExpiration();
    [CompilerGeneratedAttribute]
public void set_ClaimsCacheSlidingExpiration(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ClaimsCacheAbsoluteExpiration();
    [CompilerGeneratedAttribute]
public void set_ClaimsCacheAbsoluteExpiration(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_ClaimsCacheSize();
    [CompilerGeneratedAttribute]
public void set_ClaimsCacheSize(int value);
    [CompilerGeneratedAttribute]
internal MemoryCache get_ClaimsCache();
    [CompilerGeneratedAttribute]
internal void set_ClaimsCache(MemoryCache value);
    public void Validate();
}
public static class Microsoft.AspNetCore.Authentication.Negotiate.NegotiateDefaults : object {
    [NullableAttribute("1")]
public static string AuthenticationScheme;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authentication.Negotiate.NegotiateEvents : object {
    [CompilerGeneratedAttribute]
private Func`2<AuthenticationFailedContext, Task> <OnAuthenticationFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<LdapContext, Task> <OnRetrieveLdapClaims>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<AuthenticatedContext, Task> <OnAuthenticated>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<ChallengeContext, Task> <OnChallenge>k__BackingField;
    public Func`2<AuthenticationFailedContext, Task> OnAuthenticationFailed { get; public set; }
    public Func`2<LdapContext, Task> OnRetrieveLdapClaims { get; public set; }
    public Func`2<AuthenticatedContext, Task> OnAuthenticated { get; public set; }
    public Func`2<ChallengeContext, Task> OnChallenge { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<AuthenticationFailedContext, Task> get_OnAuthenticationFailed();
    [CompilerGeneratedAttribute]
public void set_OnAuthenticationFailed(Func`2<AuthenticationFailedContext, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<LdapContext, Task> get_OnRetrieveLdapClaims();
    [CompilerGeneratedAttribute]
public void set_OnRetrieveLdapClaims(Func`2<LdapContext, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<AuthenticatedContext, Task> get_OnAuthenticated();
    [CompilerGeneratedAttribute]
public void set_OnAuthenticated(Func`2<AuthenticatedContext, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<ChallengeContext, Task> get_OnChallenge();
    [CompilerGeneratedAttribute]
public void set_OnChallenge(Func`2<ChallengeContext, Task> value);
    public virtual Task AuthenticationFailed(AuthenticationFailedContext context);
    public virtual Task RetrieveLdapClaims(LdapContext context);
    public virtual Task Authenticated(AuthenticatedContext context);
    public virtual Task Challenge(ChallengeContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Authentication.Negotiate.NegotiateHandler : AuthenticationHandler`1<NegotiateOptions> {
    private static string AuthPersistenceKey;
    private static string NegotiateVerb;
    private static string AuthHeaderPrefix;
    private bool _requestProcessed;
    private INegotiateState _negotiateState;
    protected NegotiateEvents Events { get; protected set; }
    private bool IsSupportedProtocol { get; }
    [ObsoleteAttribute("ISystemClock is obsolete, use TimeProvider on AuthenticationSchemeOptions instead.")]
public NegotiateHandler(IOptionsMonitor`1<NegotiateOptions> options, ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock);
    public NegotiateHandler(IOptionsMonitor`1<NegotiateOptions> options, ILoggerFactory logger, UrlEncoder encoder);
    protected NegotiateEvents get_Events();
    protected void set_Events(NegotiateEvents value);
    protected virtual Task`1<object> CreateEventsAsync();
    private bool get_IsSupportedProtocol();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.Negotiate.NegotiateHandler/<HandleRequestAsync>d__13")]
public sealed virtual Task`1<bool> HandleRequestAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.Negotiate.NegotiateHandler/<InvokeAuthenticateFailedEvent>d__14")]
private Task`1<Nullable`1<bool>> InvokeAuthenticateFailedEvent(Exception ex);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.Negotiate.NegotiateHandler/<HandleAuthenticateAsync>d__15")]
protected virtual Task`1<AuthenticateResult> HandleAuthenticateAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.Negotiate.NegotiateHandler/<HandleChallengeAsync>d__16")]
protected virtual Task HandleChallengeAsync(AuthenticationProperties properties);
    private AuthPersistence EstablishConnectionPersistence(IDictionary`2<object, object> items);
    private IDictionary`2<object, object> GetConnectionItems();
    private void RegisterForConnectionDispose(IDisposable authState);
    private static Task DisposeState(object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authentication.Negotiate.NegotiateOptions : AuthenticationSchemeOptions {
    [CompilerGeneratedAttribute]
private bool <PersistKerberosCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PersistNtlmCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private LdapSettings <LdapSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeferToServer>k__BackingField;
    [CompilerGeneratedAttribute]
private INegotiateStateFactory <StateFactory>k__BackingField;
    [NullableAttribute("2")]
public NegotiateEvents Events { get; public set; }
    public bool PersistKerberosCredentials { get; public set; }
    public bool PersistNtlmCredentials { get; public set; }
    internal LdapSettings LdapSettings { get; }
    internal bool DeferToServer { get; internal set; }
    internal INegotiateStateFactory StateFactory { get; internal set; }
    [NullableContextAttribute("2")]
public NegotiateEvents get_Events();
    [NullableContextAttribute("2")]
public void set_Events(NegotiateEvents value);
    [CompilerGeneratedAttribute]
public bool get_PersistKerberosCredentials();
    [CompilerGeneratedAttribute]
public void set_PersistKerberosCredentials(bool value);
    [CompilerGeneratedAttribute]
public bool get_PersistNtlmCredentials();
    [CompilerGeneratedAttribute]
public void set_PersistNtlmCredentials(bool value);
    [CompilerGeneratedAttribute]
internal LdapSettings get_LdapSettings();
    public void EnableLdap(string domain);
    public void EnableLdap(Action`1<LdapSettings> configureSettings);
    [CompilerGeneratedAttribute]
internal bool get_DeferToServer();
    [CompilerGeneratedAttribute]
internal void set_DeferToServer(bool value);
    [CompilerGeneratedAttribute]
internal INegotiateStateFactory get_StateFactory();
    [CompilerGeneratedAttribute]
internal void set_StateFactory(INegotiateStateFactory value);
}
internal class Microsoft.AspNetCore.Authentication.Negotiate.NegotiateState : object {
    private static NegotiateAuthenticationServerOptions _serverOptions;
    private NegotiateAuthentication _instance;
    public bool IsCompleted { get; }
    [NullableAttribute("1")]
public string Protocol { get; }
    private static NegotiateState();
    [NullableContextAttribute("2")]
public sealed virtual string GetOutgoingBlob(string incomingBlob, BlobErrorType& status, Exception& error);
    public sealed virtual bool get_IsCompleted();
    [NullableContextAttribute("1")]
public sealed virtual string get_Protocol();
    [NullableContextAttribute("1")]
public sealed virtual IIdentity GetIdentity();
    public sealed virtual void Dispose();
    private static bool IsCredentialError(NegotiateAuthenticationStatusCode error);
    private static bool IsClientError(NegotiateAuthenticationStatusCode error);
}
internal class Microsoft.AspNetCore.Authentication.Negotiate.NegotiateStateFactory : object {
    [NullableContextAttribute("1")]
public sealed virtual INegotiateState CreateInstance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Authentication.Negotiate.PostConfigureNegotiateOptions : object {
    private IServerIntegratedAuth _serverAuth;
    private ILogger`1<NegotiateHandler> _logger;
    public PostConfigureNegotiateOptions(IEnumerable`1<IServerIntegratedAuth> serverAuthServices, ILogger`1<NegotiateHandler> logger);
    public sealed virtual void PostConfigure(string name, NegotiateOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.NegotiateExtensions : object {
    [ExtensionAttribute]
public static AuthenticationBuilder AddNegotiate(AuthenticationBuilder builder);
    [ExtensionAttribute]
public static AuthenticationBuilder AddNegotiate(AuthenticationBuilder builder, Action`1<NegotiateOptions> configureOptions);
    [ExtensionAttribute]
public static AuthenticationBuilder AddNegotiate(AuthenticationBuilder builder, string authenticationScheme, Action`1<NegotiateOptions> configureOptions);
    [ExtensionAttribute]
public static AuthenticationBuilder AddNegotiate(AuthenticationBuilder builder, string authenticationScheme, string displayName, Action`1<NegotiateOptions> configureOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Extensions.Logging.NegotiateLoggingExtensions : object {
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`2<ILogger, Exception> __IncompleteNegotiateChallengeCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`2<ILogger, Exception> __NegotiateCompleteCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`2<ILogger, Exception> __EnablingCredentialPersistenceCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`3<ILogger, string, Exception> __DisablingCredentialPersistenceCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`2<ILogger, Exception> __ExceptionProcessingAuthCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`2<ILogger, Exception> __ChallengeNegotiateCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`2<ILogger, Exception> __ReauthenticatingCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`2<ILogger, Exception> __DeferringCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`2<ILogger, Exception> __CredentialErrorCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`2<ILogger, Exception> __ClientErrorCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`3<ILogger, string, Exception> __NegotiateErrorCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`3<ILogger, string, Exception> __ProtocolNotSupportedCallback;
    private static NegotiateLoggingExtensions();
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void IncompleteNegotiateChallenge(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void NegotiateComplete(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void EnablingCredentialPersistence(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void DisablingCredentialPersistence(ILogger logger, string protocol);
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void ExceptionProcessingAuth(ILogger logger, Exception ex);
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void ChallengeNegotiate(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void Reauthenticating(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void Deferring(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void CredentialError(ILogger logger, Exception ex);
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void ClientError(ILogger logger, Exception ex);
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void NegotiateError(ILogger logger, string error);
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void ProtocolNotSupported(ILogger logger, string protocol);
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.36612")]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__DistinguishedNameSeparator_0 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__DistinguishedNameSeparator_0 Instance;
    private static <RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__DistinguishedNameSeparator_0();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.36612")]
internal static class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__Utilities : object {
    internal static TimeSpan s_defaultTimeout;
    internal static bool s_hasTimeout;
    private static <RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__Utilities();
}
