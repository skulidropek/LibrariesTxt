[ExtensionAttribute]
public static class Microsoft.AspNetCore.DataProtection.AzureDataProtectionBuilderExtensions : object {
    [ExtensionAttribute]
public static IDataProtectionBuilder ProtectKeysWithAzureKeyVault(IDataProtectionBuilder builder, string keyIdentifier, string clientId, X509Certificate2 certificate);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.DataProtection.AzureDataProtectionBuilderExtensions/<GetTokenFromClientCertificate>d__1")]
private static Task`1<string> GetTokenFromClientCertificate(string authority, string resource, string clientId, X509Certificate2 certificate);
    [ExtensionAttribute]
public static IDataProtectionBuilder ProtectKeysWithAzureKeyVault(IDataProtectionBuilder builder, string keyIdentifier, string clientId, string clientSecret);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.DataProtection.AzureDataProtectionBuilderExtensions/<GetTokenFromClientSecret>d__3")]
private static Task`1<string> GetTokenFromClientSecret(string authority, string resource, string clientId, string clientSecret);
    [ExtensionAttribute]
public static IDataProtectionBuilder ProtectKeysWithAzureKeyVault(IDataProtectionBuilder builder, KeyVaultClient client, string keyIdentifier);
}
internal class Microsoft.AspNetCore.DataProtection.AzureKeyVault.AzureKeyVaultXmlDecryptor : object {
    private IKeyVaultWrappingClient _client;
    public AzureKeyVaultXmlDecryptor(IServiceProvider serviceProvider);
    public sealed virtual XElement Decrypt(XElement encryptedElement);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.DataProtection.AzureKeyVault.AzureKeyVaultXmlDecryptor/<DecryptAsync>d__3")]
private Task`1<XElement> DecryptAsync(XElement encryptedElement);
}
internal class Microsoft.AspNetCore.DataProtection.AzureKeyVault.AzureKeyVaultXmlEncryptor : object {
    internal static string DefaultKeyEncryption;
    internal static Func`1<SymmetricAlgorithm> DefaultSymmetricAlgorithmFactory;
    private RandomNumberGenerator _randomNumberGenerator;
    private IKeyVaultWrappingClient _client;
    private string _keyId;
    public AzureKeyVaultXmlEncryptor(IKeyVaultWrappingClient client, string keyId);
    internal AzureKeyVaultXmlEncryptor(IKeyVaultWrappingClient client, string keyId, RandomNumberGenerator randomNumberGenerator);
    private static AzureKeyVaultXmlEncryptor();
    public sealed virtual EncryptedXmlInfo Encrypt(XElement plaintextElement);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.DataProtection.AzureKeyVault.AzureKeyVaultXmlEncryptor/<EncryptAsync>d__8")]
private Task`1<EncryptedXmlInfo> EncryptAsync(XElement plaintextElement);
}
internal interface Microsoft.AspNetCore.DataProtection.AzureKeyVault.IKeyVaultWrappingClient {
    public abstract virtual Task`1<KeyOperationResult> UnwrapKeyAsync(string keyIdentifier, string algorithm, Byte[] cipherText);
    public abstract virtual Task`1<KeyOperationResult> WrapKeyAsync(string keyIdentifier, string algorithm, Byte[] cipherText);
}
internal class Microsoft.AspNetCore.DataProtection.AzureKeyVault.KeyVaultClientWrapper : object {
    private KeyVaultClient _client;
    public KeyVaultClientWrapper(KeyVaultClient client);
    public sealed virtual Task`1<KeyOperationResult> UnwrapKeyAsync(string keyIdentifier, string algorithm, Byte[] cipherText);
    public sealed virtual Task`1<KeyOperationResult> WrapKeyAsync(string keyIdentifier, string algorithm, Byte[] cipherText);
}
