[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.HostFilteringBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseHostFiltering(IApplicationBuilder app);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.HostFilteringServicesExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddHostFiltering(IServiceCollection services, Action`1<HostFilteringOptions> configureOptions);
}
public class Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware : object {
    private static Byte[] DefaultResponse;
    private RequestDelegate _next;
    private ILogger`1<HostFilteringMiddleware> _logger;
    private IOptionsMonitor`1<HostFilteringOptions> _optionsMonitor;
    private HostFilteringOptions _options;
    private IList`1<StringSegment> _allowedHosts;
    private Nullable`1<bool> _allowAnyNonEmptyHost;
    public HostFilteringMiddleware(RequestDelegate next, ILogger`1<HostFilteringMiddleware> logger, IOptionsMonitor`1<HostFilteringOptions> optionsMonitor);
    private static HostFilteringMiddleware();
    public Task Invoke(HttpContext context);
    private IList`1<StringSegment> EnsureConfigured();
    private bool TryProcessHosts(IEnumerable`1<string> incoming, IList`1<StringSegment> results);
    private bool IsTopLevelWildcard(string host);
    private bool CheckHost(HttpContext context, IList`1<StringSegment> allowedHosts);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0(HostFilteringOptions options);
}
public class Microsoft.AspNetCore.HostFiltering.HostFilteringOptions : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <AllowedHosts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowEmptyHosts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeFailureMessage>k__BackingField;
    public IList`1<string> AllowedHosts { get; public set; }
    public bool AllowEmptyHosts { get; public set; }
    public bool IncludeFailureMessage { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_AllowedHosts();
    [CompilerGeneratedAttribute]
public void set_AllowedHosts(IList`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_AllowEmptyHosts();
    [CompilerGeneratedAttribute]
public void set_AllowEmptyHosts(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeFailureMessage();
    [CompilerGeneratedAttribute]
public void set_IncludeFailureMessage(bool value);
}
