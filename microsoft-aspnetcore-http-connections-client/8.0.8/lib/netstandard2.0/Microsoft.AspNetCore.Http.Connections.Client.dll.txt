[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Http.Connections.Client.HttpConnection : ConnectionContext {
    private static int _maxRedirects;
    private static int _protocolVersionNumber;
    private static Task`1<string> _noAccessToken;
    private static TimeSpan HttpClientTimeout;
    internal ILogger _logger;
    private SemaphoreSlim _connectionLock;
    private bool _started;
    private bool _disposed;
    private bool _hasInherentKeepAlive;
    private HttpClient _httpClient;
    private HttpConnectionOptions _httpConnectionOptions;
    private ITransport _transport;
    private ITransportFactory _transportFactory;
    private string _connectionId;
    private ConnectionLogScope _logScope;
    private ILoggerFactory _loggerFactory;
    private Uri _url;
    private Func`1<Task`1<string>> _accessTokenProvider;
    [CompilerGeneratedAttribute]
private IFeatureCollection <Features>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <Items>k__BackingField;
    public IDuplexPipe Transport { get; public set; }
    public IFeatureCollection Features { get; }
    [NullableAttribute("2")]
public string ConnectionId { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<object, object> Items { get; public set; }
    private bool Microsoft.AspNetCore.Connections.Features.IConnectionInherentKeepAliveFeature.HasInherentKeepAlive { get; }
    public HttpConnection(Uri url);
    public HttpConnection(Uri url, HttpTransportType transports);
    public HttpConnection(Uri url, HttpTransportType transports, ILoggerFactory loggerFactory);
    public HttpConnection(HttpConnectionOptions httpConnectionOptions, ILoggerFactory loggerFactory);
    internal HttpConnection(HttpConnectionOptions httpConnectionOptions, ILoggerFactory loggerFactory, ITransportFactory transportFactory);
    private static HttpConnection();
    public virtual IDuplexPipe get_Transport();
    public virtual void set_Transport(IDuplexPipe value);
    [CompilerGeneratedAttribute]
public virtual IFeatureCollection get_Features();
    [NullableContextAttribute("2")]
public virtual string get_ConnectionId();
    [NullableContextAttribute("2")]
public virtual void set_ConnectionId(string value);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<object, object> get_Items();
    [CompilerGeneratedAttribute]
public virtual void set_Items(IDictionary`2<object, object> value);
    private sealed virtual override bool Microsoft.AspNetCore.Connections.Features.IConnectionInherentKeepAliveFeature.get_HasInherentKeepAlive();
    private static HttpConnectionOptions CreateHttpOptions(Uri url, HttpTransportType transports);
    public Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.HttpConnection/<StartAsync>d__40")]
public Task StartAsync(TransferFormat transferFormat, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.HttpConnection/<StartAsyncCore>d__41")]
private Task StartAsyncCore(TransferFormat transferFormat, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.HttpConnection/<DisposeAsync>d__42")]
public virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.HttpConnection/<DisposeAsyncCore>d__43")]
private Task DisposeAsyncCore();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.HttpConnection/<SelectAndStartTransport>d__44")]
private Task SelectAndStartTransport(TransferFormat transferFormat, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.HttpConnection/<NegotiateAsync>d__45")]
private Task`1<NegotiationResponse> NegotiateAsync(Uri url, HttpClient httpClient, ILogger logger, CancellationToken cancellationToken);
    private static Uri CreateConnectUrl(Uri url, string connectionId);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.HttpConnection/<StartTransport>d__47")]
private Task StartTransport(Uri connectUrl, HttpTransportType transportType, TransferFormat transferFormat, CancellationToken cancellationToken, bool useStatefulReconnect);
    private HttpClient CreateHttpClient();
    internal Task`1<string> GetAccessTokenAsync();
    private void CheckDisposed();
    private static bool IsWebSocketsSupported();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.HttpConnection/<GetNegotiationResponseAsync>d__52")]
private Task`1<NegotiationResponse> GetNegotiationResponseAsync(Uri uri, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Http.Connections.Client.HttpConnectionFactory : object {
    private HttpConnectionOptions _httpConnectionOptions;
    private ILoggerFactory _loggerFactory;
    public HttpConnectionFactory(IOptions`1<HttpConnectionOptions> options, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.HttpConnectionFactory/<ConnectAsync>d__3")]
public sealed virtual ValueTask`1<ConnectionContext> ConnectAsync(EndPoint endPoint, CancellationToken cancellationToken);
    internal static HttpConnectionOptions ShallowCopyHttpConnectionOptions(HttpConnectionOptions options);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Http.Connections.Client.HttpConnectionOptions : object {
    private IDictionary`2<string, string> _headers;
    private X509CertificateCollection _clientCertificates;
    private CookieContainer _cookies;
    private ICredentials _credentials;
    private IWebProxy _proxy;
    private Nullable`1<bool> _useDefaultCredentials;
    private Action`1<ClientWebSocketOptions> _webSocketConfiguration;
    private PipeOptions _transportPipeOptions;
    private PipeOptions _appPipeOptions;
    private long _transportMaxBufferSize;
    private long _applicationMaxBufferSize;
    private static int DefaultBufferSize;
    [CompilerGeneratedAttribute]
private Func`2<HttpMessageHandler, HttpMessageHandler> <HttpMessageHandlerFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<WebSocketConnectionContext, CancellationToken, ValueTask`1<WebSocket>> <WebSocketFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpTransportType <Transports>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipNegotiation>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<Task`1<string>> <AccessTokenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <CloseTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TransferFormat <DefaultTransferFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseStatefulReconnect>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<HttpMessageHandler, HttpMessageHandler> HttpMessageHandlerFactory { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<WebSocketConnectionContext, CancellationToken, ValueTask`1<WebSocket>> WebSocketFactory { get; public set; }
    [NullableAttribute("1")]
public IDictionary`2<string, string> Headers { get; public set; }
    public long TransportMaxBufferSize { get; public set; }
    public long ApplicationMaxBufferSize { get; public set; }
    [NullableAttribute("1")]
internal PipeOptions TransportPipeOptions { get; }
    [NullableAttribute("1")]
internal PipeOptions AppPipeOptions { get; }
    [UnsupportedOSPlatformAttribute("browser")]
public X509CertificateCollection ClientCertificates { get; public set; }
    [NullableAttribute("1")]
[UnsupportedOSPlatformAttribute("browser")]
public CookieContainer Cookies { get; public set; }
    public Uri Url { get; public set; }
    public HttpTransportType Transports { get; public set; }
    public bool SkipNegotiation { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<Task`1<string>> AccessTokenProvider { get; public set; }
    public TimeSpan CloseTimeout { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public ICredentials Credentials { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public IWebProxy Proxy { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public Nullable`1<bool> UseDefaultCredentials { get; public set; }
    public TransferFormat DefaultTransferFormat { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[UnsupportedOSPlatformAttribute("browser")]
public Action`1<ClientWebSocketOptions> WebSocketConfiguration { get; public set; }
    public bool UseStatefulReconnect { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<HttpMessageHandler, HttpMessageHandler> get_HttpMessageHandlerFactory();
    [CompilerGeneratedAttribute]
public void set_HttpMessageHandlerFactory(Func`2<HttpMessageHandler, HttpMessageHandler> value);
    [CompilerGeneratedAttribute]
public Func`3<WebSocketConnectionContext, CancellationToken, ValueTask`1<WebSocket>> get_WebSocketFactory();
    [CompilerGeneratedAttribute]
public void set_WebSocketFactory(Func`3<WebSocketConnectionContext, CancellationToken, ValueTask`1<WebSocket>> value);
    [NullableContextAttribute("1")]
public IDictionary`2<string, string> get_Headers();
    [NullableContextAttribute("1")]
public void set_Headers(IDictionary`2<string, string> value);
    public long get_TransportMaxBufferSize();
    public void set_TransportMaxBufferSize(long value);
    public long get_ApplicationMaxBufferSize();
    public void set_ApplicationMaxBufferSize(long value);
    [NullableContextAttribute("1")]
internal PipeOptions get_TransportPipeOptions();
    [NullableContextAttribute("1")]
internal PipeOptions get_AppPipeOptions();
    public X509CertificateCollection get_ClientCertificates();
    public void set_ClientCertificates(X509CertificateCollection value);
    [NullableContextAttribute("1")]
public CookieContainer get_Cookies();
    [NullableContextAttribute("1")]
public void set_Cookies(CookieContainer value);
    [CompilerGeneratedAttribute]
public Uri get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(Uri value);
    [CompilerGeneratedAttribute]
public HttpTransportType get_Transports();
    [CompilerGeneratedAttribute]
public void set_Transports(HttpTransportType value);
    [CompilerGeneratedAttribute]
public bool get_SkipNegotiation();
    [CompilerGeneratedAttribute]
public void set_SkipNegotiation(bool value);
    [CompilerGeneratedAttribute]
public Func`1<Task`1<string>> get_AccessTokenProvider();
    [CompilerGeneratedAttribute]
public void set_AccessTokenProvider(Func`1<Task`1<string>> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_CloseTimeout();
    [CompilerGeneratedAttribute]
public void set_CloseTimeout(TimeSpan value);
    public ICredentials get_Credentials();
    public void set_Credentials(ICredentials value);
    public IWebProxy get_Proxy();
    public void set_Proxy(IWebProxy value);
    public Nullable`1<bool> get_UseDefaultCredentials();
    public void set_UseDefaultCredentials(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public TransferFormat get_DefaultTransferFormat();
    [CompilerGeneratedAttribute]
public void set_DefaultTransferFormat(TransferFormat value);
    public Action`1<ClientWebSocketOptions> get_WebSocketConfiguration();
    public void set_WebSocketConfiguration(Action`1<ClientWebSocketOptions> value);
    [CompilerGeneratedAttribute]
public bool get_UseStatefulReconnect();
    [CompilerGeneratedAttribute]
public void set_UseStatefulReconnect(bool value);
    private static void ThrowIfUnsupportedPlatform();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Http.Connections.Client.Internal.AccessTokenHttpMessageHandler : DelegatingHandler {
    private HttpConnection _httpConnection;
    private string _accessToken;
    public AccessTokenHttpMessageHandler(HttpMessageHandler inner, HttpConnection httpConnection);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.Internal.AccessTokenHttpMessageHandler/<SendAsync>d__3")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private static void SetAccessToken(string accessToken, HttpRequestMessage request);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
internal static class Microsoft.AspNetCore.Http.Connections.Client.Internal.ClientPipeOptions : object {
    [NullableAttribute("1")]
public static PipeOptions DefaultOptions;
    private static ClientPipeOptions();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Http.Connections.Client.Internal.ConnectionLogScope : object {
    private static string ClientConnectionIdKey;
    private string _cachedToString;
    private string _connectionId;
    public string ConnectionId { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public KeyValuePair`2<string, object> Item { get; }
    public int Count { get; }
    public string get_ConnectionId();
    public void set_ConnectionId(string value);
    public sealed virtual KeyValuePair`2<string, object> get_Item(int index);
    public sealed virtual int get_Count();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.Internal.ConnectionLogScope/<GetEnumerator>d__10")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Http.Connections.Client.Internal.Constants : object {
    public static string UserAgent;
    public static string UserAgentHeader;
    private static Constants();
    private static string GetUserAgentHeader();
    private static string GetOS();
    public static string ConstructUserAgent(Version version, string detailedVersion, string os, string runtime, string runtimeVersion);
}
internal class Microsoft.AspNetCore.Http.Connections.Client.Internal.DefaultTransportFactory : object {
    private HttpClient _httpClient;
    private HttpConnectionOptions _httpConnectionOptions;
    private Func`1<Task`1<string>> _accessTokenProvider;
    private HttpTransportType _requestedTransportType;
    private ILoggerFactory _loggerFactory;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _websocketsSupported;
    [NullableContextAttribute("1")]
public DefaultTransportFactory(HttpTransportType requestedTransportType, ILoggerFactory loggerFactory, HttpClient httpClient, HttpConnectionOptions httpConnectionOptions, Func`1<Task`1<string>> accessTokenProvider);
    private static DefaultTransportFactory();
    [NullableContextAttribute("1")]
public sealed virtual ITransport CreateTransport(HttpTransportType availableServerTransports, bool useStatefulReconnect);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Http.Connections.Client.Internal.Http2HttpMessageHandler : DelegatingHandler {
    public Http2HttpMessageHandler(HttpMessageHandler inner);
    protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
internal interface Microsoft.AspNetCore.Http.Connections.Client.Internal.ITransport {
    public abstract virtual Task StartAsync(Uri url, TransferFormat transferFormat, CancellationToken cancellationToken);
    public abstract virtual Task StopAsync();
}
[NullableContextAttribute("1")]
internal interface Microsoft.AspNetCore.Http.Connections.Client.Internal.ITransportFactory {
    public abstract virtual ITransport CreateTransport(HttpTransportType availableServerTransports, bool useStatefulReconnect);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Http.Connections.Client.Internal.LoggingHttpMessageHandler : DelegatingHandler {
    private ILogger`1<LoggingHttpMessageHandler> _logger;
    public LoggingHttpMessageHandler(HttpMessageHandler inner, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.Internal.LoggingHttpMessageHandler/<SendAsync>d__2")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport : object {
    private HttpClient _httpClient;
    private ILogger _logger;
    private HttpConnectionOptions _httpConnectionOptions;
    private IDuplexPipe _application;
    private IDuplexPipe _transport;
    private Exception modreq(System.Runtime.CompilerServices.IsVolatile) _error;
    private CancellationTokenSource _transportCts;
    [CompilerGeneratedAttribute]
private Task <Running>k__BackingField;
    internal Task Running { get; private set; }
    public PipeReader Input { get; }
    public PipeWriter Output { get; }
    [NullableContextAttribute("2")]
public LongPollingTransport(HttpClient httpClient, HttpConnectionOptions httpConnectionOptions, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
internal Task get_Running();
    [CompilerGeneratedAttribute]
private void set_Running(Task value);
    public sealed virtual PipeReader get_Input();
    public sealed virtual PipeWriter get_Output();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport/<StartAsync>d__16")]
public sealed virtual Task StartAsync(Uri url, TransferFormat transferFormat, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport/<ProcessAsync>d__17")]
private Task ProcessAsync(Uri url);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport/<StopAsync>d__18")]
public sealed virtual Task StopAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport/<Poll>d__19")]
private Task Poll(Uri pollUrl, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport/<SendDeleteRequest>d__20")]
private Task SendDeleteRequest(Uri url);
}
internal static class Microsoft.AspNetCore.Http.Connections.Client.Internal.SendUtils : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.Internal.SendUtils/<SendMessages>d__0")]
public static Task SendMessages(Uri sendUrl, IDuplexPipe application, HttpClient httpClient, ILogger logger, CancellationToken cancellationToken);
}
internal class Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsMessageParser : object {
    private static byte ByteCR;
    private static byte ByteLF;
    private static byte ByteColon;
    private static Byte[] _newLine;
    private InternalParseState _internalParserState;
    private List`1<Byte[]> _data;
    private static ReadOnlySpan`1<byte> DataPrefix { get; }
    private static ReadOnlySpan`1<byte> SseLineEnding { get; }
    private static ServerSentEventsMessageParser();
    private static ReadOnlySpan`1<byte> get_DataPrefix();
    private static ReadOnlySpan`1<byte> get_SseLineEnding();
    public ParseResult ParseMessage(ReadOnlySequence`1<byte> buffer, SequencePosition& consumed, SequencePosition& examined, Byte[]& message);
    private static ReadOnlySpan`1<byte> ConvertBufferToSpan(ReadOnlySequence`1& buffer);
    public void Reset();
    private static void EnsureStartsWithDataPrefix(ReadOnlySpan`1<byte> line);
    private static bool IsMessageEnd(ReadOnlySpan`1<byte> line);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport : object {
    private HttpClient _httpClient;
    private ILogger _logger;
    private HttpConnectionOptions _httpConnectionOptions;
    private Exception modreq(System.Runtime.CompilerServices.IsVolatile) _error;
    private CancellationTokenSource _transportCts;
    private CancellationTokenSource _inputCts;
    private ServerSentEventsMessageParser _parser;
    private IDuplexPipe _transport;
    private IDuplexPipe _application;
    [CompilerGeneratedAttribute]
private Task <Running>k__BackingField;
    internal Task Running { get; private set; }
    public PipeReader Input { get; }
    public PipeWriter Output { get; }
    [NullableContextAttribute("2")]
public ServerSentEventsTransport(HttpClient httpClient, HttpConnectionOptions httpConnectionOptions, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
internal Task get_Running();
    [CompilerGeneratedAttribute]
private void set_Running(Task value);
    public sealed virtual PipeReader get_Input();
    public sealed virtual PipeWriter get_Output();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport/<StartAsync>d__18")]
public sealed virtual Task StartAsync(Uri url, TransferFormat transferFormat, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport/<ProcessAsync>d__19")]
private Task ProcessAsync(Uri url, HttpResponseMessage response);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport/<ProcessEventStream>d__20")]
private Task ProcessEventStream(HttpResponseMessage response, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport/<StopAsync>d__21")]
public sealed virtual Task StopAsync();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static void <ProcessEventStream>g__CancelReader|20_0(object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Http.Connections.Client.Internal.Utils : object {
    public static Uri AppendPath(Uri url, string path);
    internal static Uri AppendQueryString(Uri url, string qs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport : object {
    private WebSocket _webSocket;
    private IDuplexPipe _application;
    private WebSocketMessageType _webSocketMessageType;
    private ILogger _logger;
    private TimeSpan _closeTimeout;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _aborted;
    private HttpConnectionOptions _httpConnectionOptions;
    private HttpClient _httpClient;
    private CancellationTokenSource _stopCts;
    private bool _useStatefulReconnect;
    private IDuplexPipe _transport;
    private bool _gracefulClose;
    private Func`2<PipeWriter, Task> _notifyOnReconnect;
    [CompilerGeneratedAttribute]
private Task <Running>k__BackingField;
    internal Task Running { get; private set; }
    public PipeReader Input { get; }
    public PipeWriter Output { get; }
    public WebSocketsTransport(HttpConnectionOptions httpConnectionOptions, ILoggerFactory loggerFactory, Func`1<Task`1<string>> accessTokenProvider, HttpClient httpClient, bool useStatefulReconnect);
    [CompilerGeneratedAttribute]
internal Task get_Running();
    [CompilerGeneratedAttribute]
private void set_Running(Task value);
    public sealed virtual PipeReader get_Input();
    public sealed virtual PipeWriter get_Output();
    public sealed virtual void OnReconnected(Func`2<PipeWriter, Task> notifyOnReconnect);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport/<DefaultWebSocketFactory>d__23")]
private ValueTask`1<WebSocket> DefaultWebSocketFactory(WebSocketConnectionContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport/<StartAsync>d__24")]
public sealed virtual Task StartAsync(Uri url, TransferFormat transferFormat, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport/<ProcessSocketAsync>d__25")]
private Task ProcessSocketAsync(WebSocket socket, Uri url, bool isReconnect);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport/<StartReceiving>d__26")]
private Task StartReceiving(WebSocket socket);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport/<StartSending>d__27")]
private Task StartSending(WebSocket socket, bool ignoreFirstCanceled);
    private static bool WebSocketCanSend(WebSocket ws);
    private static Uri ResolveWebSocketsUrl(Uri url);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport/<StopAsync>d__30")]
public sealed virtual Task StopAsync();
    private bool UpdateConnectionPair();
    public sealed virtual void DisableReconnect();
}
public class Microsoft.AspNetCore.Http.Connections.Client.NoTransportSupportedException : Exception {
    [NullableContextAttribute("1")]
public NoTransportSupportedException(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Http.Connections.Client.TransportFailedException : Exception {
    [CompilerGeneratedAttribute]
private string <TransportType>k__BackingField;
    public string TransportType { get; }
    public TransportFailedException(string transportType, string message, Exception innerException);
    [CompilerGeneratedAttribute]
public string get_TransportType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Http.Connections.Client.WebSocketConnectionContext : object {
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpConnectionOptions <Options>k__BackingField;
    public Uri Uri { get; }
    public HttpConnectionOptions Options { get; }
    public WebSocketConnectionContext(Uri uri, HttpConnectionOptions options);
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
public HttpConnectionOptions get_Options();
}
internal class Microsoft.AspNetCore.OperatingSystem : object {
    private static bool _isBrowser;
    private static OperatingSystem();
    public static bool IsBrowser();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Shared.ArgumentNullThrowHelper : object {
    public static void ThrowIfNull(object argument, string paramName);
    [DoesNotReturnAttribute]
internal static void Throw(string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Shared.ArgumentOutOfRangeThrowHelper : object {
    [DoesNotReturnAttribute]
private static void ThrowZero(string paramName, T value);
    [DoesNotReturnAttribute]
private static void ThrowNegative(string paramName, T value);
    [DoesNotReturnAttribute]
private static void ThrowNegativeOrZero(string paramName, T value);
    [DoesNotReturnAttribute]
private static void ThrowGreater(string paramName, T value, T other);
    [DoesNotReturnAttribute]
private static void ThrowGreaterEqual(string paramName, T value, T other);
    [DoesNotReturnAttribute]
private static void ThrowLess(string paramName, T value, T other);
    [DoesNotReturnAttribute]
private static void ThrowLessEqual(string paramName, T value, T other);
    [NullableContextAttribute("2")]
public static void ThrowIfZero(int value, string paramName);
    [NullableContextAttribute("2")]
public static void ThrowIfNegative(int value, string paramName);
    [NullableContextAttribute("2")]
public static void ThrowIfNegative(long value, string paramName);
    [NullableContextAttribute("2")]
public static void ThrowIfNegativeOrZero(int value, string paramName);
    public static void ThrowIfGreaterThan(T value, T other, string paramName);
    public static void ThrowIfGreaterThanOrEqual(T value, T other, string paramName);
    public static void ThrowIfLessThan(T value, T other, string paramName);
    public static void ThrowIfLessThanOrEqual(T value, T other, string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Shared.ObjectDisposedThrowHelper : object {
    public static void ThrowIf(bool condition, object instance);
    public static void ThrowIf(bool condition, Type type);
    [DoesNotReturnAttribute]
private static void ThrowObjectDisposedException(object instance);
    [DoesNotReturnAttribute]
private static void ThrowObjectDisposedException(Type type);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.IO.Pipelines.DuplexPipe : object {
    [CompilerGeneratedAttribute]
private PipeReader <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private PipeWriter <Output>k__BackingField;
    public PipeReader Input { get; }
    public PipeWriter Output { get; }
    public DuplexPipe(PipeReader reader, PipeWriter writer);
    [CompilerGeneratedAttribute]
public sealed virtual PipeReader get_Input();
    [CompilerGeneratedAttribute]
public sealed virtual PipeWriter get_Output();
    public static DuplexPipePair CreateConnectionPair(PipeOptions inputOptions, PipeOptions outputOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.IO.Pipelines.PipeWriterStream : Stream {
    private long _length;
    private PipeWriter _pipeWriter;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public PipeWriterStream(PipeWriter pipeWriter);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    private ValueTask WriteCoreAsync(ReadOnlyMemory`1<byte> source, CancellationToken cancellationToken);
    public void Reset();
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("System.IO.Pipelines.PipeWriterStream/<<WriteCoreAsync>g__WriteSlowAsync|20_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask <WriteCoreAsync>g__WriteSlowAsync|20_0(ValueTask`1<FlushResult> flushTask);
}
[ExtensionAttribute]
internal static class System.IO.StreamExtensions : object {
    [ExtensionAttribute]
public static ValueTask WriteAsync(Stream stream, ReadOnlySequence`1<byte> buffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.IO.StreamExtensions/<WriteMultiSegmentAsync>d__1")]
private static ValueTask WriteMultiSegmentAsync(Stream stream, ReadOnlySequence`1<byte> buffer, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class System.Net.WebSockets.WebSocketExtensions : object {
    [ExtensionAttribute]
public static ValueTask SendAsync(WebSocket webSocket, ReadOnlySequence`1<byte> buffer, WebSocketMessageType webSocketMessageType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.WebSockets.WebSocketExtensions/<SendMultiSegmentAsync>d__1")]
private static ValueTask SendMultiSegmentAsync(WebSocket webSocket, ReadOnlySequence`1<byte> buffer, WebSocketMessageType webSocketMessageType, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class System.Runtime.Versioning.OSPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PlatformName>k__BackingField;
    public string PlatformName { get; }
    private protected OSPlatformAttribute(string platformName);
    [CompilerGeneratedAttribute]
public string get_PlatformName();
}
[AttributeUsageAttribute("1023")]
internal class System.Runtime.Versioning.SupportedOSPlatformAttribute : OSPlatformAttribute {
    [NullableContextAttribute("1")]
public SupportedOSPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("1")]
internal class System.Runtime.Versioning.TargetPlatformAttribute : OSPlatformAttribute {
    [NullableContextAttribute("1")]
public TargetPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("1023")]
internal class System.Runtime.Versioning.UnsupportedOSPlatformAttribute : OSPlatformAttribute {
    [NullableContextAttribute("1")]
public UnsupportedOSPlatformAttribute(string platformName);
}
