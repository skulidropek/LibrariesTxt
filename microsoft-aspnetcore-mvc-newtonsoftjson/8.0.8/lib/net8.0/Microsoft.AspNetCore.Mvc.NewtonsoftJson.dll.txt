[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Internal.ResponseContentTypeHelper : object {
    public static void ResolveContentTypeAndEncoding(string actionResultContentType, string httpResponseContentType, ValueTuple`2<string, Encoding> default, Func`2<string, Encoding> getEncoding, String& resolvedContentType, Encoding& resolvedContentTypeEncoding);
    public static Encoding GetEncoding(string mediaType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonInputFormatter : TextInputFormatter {
    private IArrayPool`1<char> _charPool;
    private ILogger _logger;
    private ObjectPoolProvider _objectPoolProvider;
    private MvcOptions _options;
    private MvcNewtonsoftJsonOptions _jsonOptions;
    private ObjectPool`1<JsonSerializer> _jsonSerializerPool;
    [CompilerGeneratedAttribute]
private JsonSerializerSettings <SerializerSettings>k__BackingField;
    public InputFormatterExceptionPolicy ExceptionPolicy { get; }
    protected JsonSerializerSettings SerializerSettings { get; }
    public NewtonsoftJsonInputFormatter(ILogger logger, JsonSerializerSettings serializerSettings, ArrayPool`1<char> charPool, ObjectPoolProvider objectPoolProvider, MvcOptions options, MvcNewtonsoftJsonOptions jsonOptions);
    public virtual InputFormatterExceptionPolicy get_ExceptionPolicy();
    [CompilerGeneratedAttribute]
protected JsonSerializerSettings get_SerializerSettings();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonInputFormatter/<ReadRequestBodyAsync>d__12")]
public virtual Task`1<InputFormatterResult> ReadRequestBodyAsync(InputFormatterContext context, Encoding encoding);
    protected virtual JsonSerializer CreateJsonSerializer();
    protected virtual JsonSerializer CreateJsonSerializer(InputFormatterContext context);
    protected virtual void ReleaseJsonSerializer(JsonSerializer serializer);
    private static ModelMetadata GetPathMetadata(ModelMetadata metadata, string path);
    private Exception WrapExceptionForModelState(Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter : TextOutputFormatter {
    private IArrayPool`1<char> _charPool;
    private MvcOptions _mvcOptions;
    private MvcNewtonsoftJsonOptions _jsonOptions;
    private AsyncEnumerableReader _asyncEnumerableReaderFactory;
    private JsonSerializerSettings _serializerSettings;
    [CompilerGeneratedAttribute]
private JsonSerializerSettings <SerializerSettings>k__BackingField;
    protected JsonSerializerSettings SerializerSettings { get; }
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version.")]
public NewtonsoftJsonOutputFormatter(JsonSerializerSettings serializerSettings, ArrayPool`1<char> charPool, MvcOptions mvcOptions);
    public NewtonsoftJsonOutputFormatter(JsonSerializerSettings serializerSettings, ArrayPool`1<char> charPool, MvcOptions mvcOptions, MvcNewtonsoftJsonOptions jsonOptions);
    [CompilerGeneratedAttribute]
protected JsonSerializerSettings get_SerializerSettings();
    protected virtual JsonWriter CreateJsonWriter(TextWriter writer);
    protected virtual JsonSerializer CreateJsonSerializer();
    protected virtual JsonSerializer CreateJsonSerializer(OutputFormatterWriteContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter/<WriteResponseBodyAsync>d__13")]
public virtual Task WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding);
    private static JsonSerializerSettings ShallowCopy(JsonSerializerSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonPatchInputFormatter : NewtonsoftJsonInputFormatter {
    public InputFormatterExceptionPolicy ExceptionPolicy { get; }
    public NewtonsoftJsonPatchInputFormatter(ILogger logger, JsonSerializerSettings serializerSettings, ArrayPool`1<char> charPool, ObjectPoolProvider objectPoolProvider, MvcOptions options, MvcNewtonsoftJsonOptions jsonOptions);
    public virtual InputFormatterExceptionPolicy get_ExceptionPolicy();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonPatchInputFormatter/<ReadRequestBodyAsync>d__3")]
public virtual Task`1<InputFormatterResult> ReadRequestBodyAsync(InputFormatterContext context, Encoding encoding);
    public virtual bool CanRead(InputFormatterContext context);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<InputFormatterResult> <>n__0(InputFormatterContext context, Encoding encoding);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Mvc.JsonPatchExtensions : object {
    [ExtensionAttribute]
public static void ApplyTo(JsonPatchDocument`1<T> patchDoc, T objectToApplyTo, ModelStateDictionary modelState);
    [ExtensionAttribute]
public static void ApplyTo(JsonPatchDocument`1<T> patchDoc, T objectToApplyTo, ModelStateDictionary modelState, string prefix);
}
public class Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions : object {
    private IReadOnlyList`1<ICompatibilitySwitch> _switches;
    [CompilerGeneratedAttribute]
private bool <AllowInputFormatterExceptionMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSerializerSettings <SerializerSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InputFormatterMemoryBufferThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadJsonWithRequestCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OutputFormatterMemoryBufferThreshold>k__BackingField;
    public bool AllowInputFormatterExceptionMessages { get; public set; }
    [NullableAttribute("1")]
public JsonSerializerSettings SerializerSettings { get; }
    public int InputFormatterMemoryBufferThreshold { get; public set; }
    public bool ReadJsonWithRequestCulture { get; public set; }
    public int OutputFormatterMemoryBufferThreshold { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllowInputFormatterExceptionMessages();
    [CompilerGeneratedAttribute]
public void set_AllowInputFormatterExceptionMessages(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public JsonSerializerSettings get_SerializerSettings();
    [CompilerGeneratedAttribute]
public int get_InputFormatterMemoryBufferThreshold();
    [CompilerGeneratedAttribute]
public void set_InputFormatterMemoryBufferThreshold(int value);
    [CompilerGeneratedAttribute]
public bool get_ReadJsonWithRequestCulture();
    [CompilerGeneratedAttribute]
public void set_ReadJsonWithRequestCulture(bool value);
    [CompilerGeneratedAttribute]
public int get_OutputFormatterMemoryBufferThreshold();
    [CompilerGeneratedAttribute]
public void set_OutputFormatterMemoryBufferThreshold(int value);
    private sealed virtual override IEnumerator`1<ICompatibilitySwitch> System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Infrastructure.ICompatibilitySwitch>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.NewtonsoftJson.AnnotatedProblemDetails : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Detail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Extensions>k__BackingField;
    [JsonPropertyAttribute]
public string Type { get; public set; }
    [JsonPropertyAttribute]
public string Title { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> Status { get; public set; }
    [JsonPropertyAttribute]
public string Detail { get; public set; }
    [JsonPropertyAttribute]
public string Instance { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonExtensionDataAttribute]
public IDictionary`2<string, object> Extensions { get; }
    [NullableContextAttribute("1")]
public AnnotatedProblemDetails(ProblemDetails problemDetails);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Detail();
    [CompilerGeneratedAttribute]
public void set_Detail(string value);
    [CompilerGeneratedAttribute]
public string get_Instance();
    [CompilerGeneratedAttribute]
public void set_Instance(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Extensions();
    [NullableContextAttribute("1")]
public void CopyTo(ProblemDetails problemDetails);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.NewtonsoftJson.AsyncEnumerableReader : object {
    private MethodInfo Converter;
    private ConcurrentDictionary`2<Type, Func`3<object, CancellationToken, Task`1<ICollection>>> _asyncEnumerableConverters;
    private MvcOptions _mvcOptions;
    public AsyncEnumerableReader(MvcOptions mvcOptions);
    public bool TryGetReader(Type type, Func`3& reader);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.NewtonsoftJson.AsyncEnumerableReader/<ReadInternal>d__5`1")]
private Task`1<ICollection> ReadInternal(object value, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.NewtonsoftJson.BsonTempDataSerializer : TempDataSerializer {
    private JsonSerializer _jsonSerializer;
    private static MethodInfo _convertArrayMethodInfo;
    private static MethodInfo _convertDictionaryMethodInfo;
    private static ConcurrentDictionary`2<Type, Func`2<JArray, object>> _arrayConverters;
    private static ConcurrentDictionary`2<Type, Func`2<JObject, object>> _dictionaryConverters;
    private static Dictionary`2<JTokenType, Type> _tokenTypeLookup;
    private static BsonTempDataSerializer();
    public virtual IDictionary`2<string, object> Deserialize(Byte[] value);
    public virtual Byte[] Serialize(IDictionary`2<string, object> values);
    public static void EnsureObjectCanBeSerialized(object item);
    public virtual bool CanSerializeType(Type type);
    private static bool CanSerializeType(Type typeToSerialize, String& errorMessage);
    private static IList`1<TVal> ConvertArray(JArray array);
    private static IDictionary`2<string, TVal> ConvertDictionary(JObject jObject);
    private static bool IsSimpleType(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.NewtonsoftJson.JsonArrayPool`1 : object {
    private ArrayPool`1<T> _inner;
    public JsonArrayPool`1(ArrayPool`1<T> inner);
    public sealed virtual T[] Rent(int minimumLength);
    public sealed virtual void Return(T[] array);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.NewtonsoftJson.JsonPatchOperationsArrayProvider : object {
    private IModelMetadataProvider _modelMetadataProvider;
    public int Order { get; }
    public JsonPatchOperationsArrayProvider(IModelMetadataProvider modelMetadataProvider);
    public sealed virtual int get_Order();
    public sealed virtual void OnProvidersExecuting(ApiDescriptionProviderContext context);
    public sealed virtual void OnProvidersExecuted(ApiDescriptionProviderContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.NewtonsoftJson.JsonSerializerObjectPolicy : object {
    private JsonSerializerSettings _serializerSettings;
    public JsonSerializerObjectPolicy(JsonSerializerSettings serializerSettings);
    public sealed virtual JsonSerializer Create();
    public sealed virtual bool Return(JsonSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.AspNetCore.Mvc.NewtonsoftJson.JsonSerializerSettingsProvider : object {
    private static int DefaultMaxDepth;
    private static ProblemDetailsConverter ProblemDetailsConverter;
    private static ValidationProblemDetailsConverter ValidationProblemDetailsConverter;
    private static DefaultContractResolver SharedContractResolver;
    private static JsonSerializerSettingsProvider();
    public static JsonSerializerSettings CreateSerializerSettings();
    internal static DefaultContractResolver CreateContractResolver();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Mvc.NewtonsoftJson.MediaTypeHeaderValues : object {
    public static MediaTypeHeaderValue ApplicationJson;
    public static MediaTypeHeaderValue TextJson;
    public static MediaTypeHeaderValue ApplicationJsonPatch;
    public static MediaTypeHeaderValue ApplicationAnyJsonSyntax;
    private static MediaTypeHeaderValues();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.NewtonsoftJson.NewtonsoftJsonHelper : object {
    private JsonSerializer _defaultSettingsJsonSerializer;
    private IArrayPool`1<char> _charPool;
    public NewtonsoftJsonHelper(IOptions`1<MvcNewtonsoftJsonOptions> options, ArrayPool`1<char> charPool);
    public sealed virtual IHtmlContent Serialize(object value);
    public IHtmlContent Serialize(object value, JsonSerializerSettings serializerSettings);
    private IHtmlContent Serialize(object value, JsonSerializer jsonSerializer);
    private static JsonSerializer CreateHtmlSafeSerializer(JsonSerializerSettings serializerSettings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.NewtonsoftJson.NewtonsoftJsonResultExecutor : object {
    private static string DefaultContentType;
    private IHttpResponseStreamWriterFactory _writerFactory;
    private ILogger _logger;
    private MvcOptions _mvcOptions;
    private MvcNewtonsoftJsonOptions _jsonOptions;
    private IArrayPool`1<char> _charPool;
    private AsyncEnumerableReader _asyncEnumerableReaderFactory;
    public NewtonsoftJsonResultExecutor(IHttpResponseStreamWriterFactory writerFactory, ILogger`1<NewtonsoftJsonResultExecutor> logger, IOptions`1<MvcOptions> mvcOptions, IOptions`1<MvcNewtonsoftJsonOptions> jsonOptions, ArrayPool`1<char> charPool);
    private static NewtonsoftJsonResultExecutor();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.NewtonsoftJson.NewtonsoftJsonResultExecutor/<ExecuteAsync>d__8")]
public sealed virtual Task ExecuteAsync(ActionContext context, JsonResult result);
    private JsonSerializerSettings GetSerializerSettings(JsonResult result);
}
public class Microsoft.AspNetCore.Mvc.NewtonsoftJson.NewtonsoftJsonValidationMetadataProvider : object {
    private NamingStrategy _jsonNamingPolicy;
    [NullableContextAttribute("1")]
public NewtonsoftJsonValidationMetadataProvider(NamingStrategy namingStrategy);
    [NullableContextAttribute("1")]
public sealed virtual void CreateDisplayMetadata(DisplayMetadataProviderContext context);
    [NullableContextAttribute("1")]
public sealed virtual void CreateValidationMetadata(ValidationMetadataProviderContext context);
    private static string ReadPropertyNameFrom(IReadOnlyList`1<object> attributes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Mvc.NewtonsoftJson.ProblemDetailsConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
internal static class Microsoft.AspNetCore.Mvc.NewtonsoftJson.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string ContractResolverCannotBeNull { get; }
    internal static string InvalidContractResolverForJsonCasingConfiguration { get; }
    internal static string JsonHelperMustBeAnInstanceOfNewtonsoftJson { get; }
    internal static string ObjectResultExecutor_MaxEnumerationExceeded { get; }
    internal static string Property_MustBeInstanceOfType { get; }
    internal static string TempData_CannotDeserializeToken { get; }
    internal static string TempData_CannotSerializeDictionary { get; }
    internal static string TempData_CannotSerializeType { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_ContractResolverCannotBeNull();
    internal static string FormatContractResolverCannotBeNull(object p0);
    internal static string get_InvalidContractResolverForJsonCasingConfiguration();
    internal static string FormatInvalidContractResolverForJsonCasingConfiguration(object p0, object p1);
    internal static string get_JsonHelperMustBeAnInstanceOfNewtonsoftJson();
    internal static string FormatJsonHelperMustBeAnInstanceOfNewtonsoftJson(object p0, object p1, object p2, object p3);
    internal static string get_ObjectResultExecutor_MaxEnumerationExceeded();
    internal static string FormatObjectResultExecutor_MaxEnumerationExceeded(object p0, object p1);
    internal static string get_Property_MustBeInstanceOfType();
    internal static string FormatProperty_MustBeInstanceOfType(object p0, object p1, object p2);
    internal static string get_TempData_CannotDeserializeToken();
    internal static string FormatTempData_CannotDeserializeToken(object p0, object p1);
    internal static string get_TempData_CannotSerializeDictionary();
    internal static string FormatTempData_CannotSerializeDictionary(object p0, object p1, object p2);
    internal static string get_TempData_CannotSerializeType();
    internal static string FormatTempData_CannotSerializeType(object p0, object p1);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Mvc.NewtonsoftJson.ValidationProblemDetailsConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Mvc.Rendering.JsonHelperExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IHtmlContent Serialize(IJsonHelper jsonHelper, object value, JsonSerializerSettings serializerSettings);
}
internal static class Microsoft.AspNetCore.Shared.ArgumentNullThrowHelper : object {
    [NullableContextAttribute("2")]
public static void ThrowIfNull(object argument, string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.MvcNewtonsoftJsonOptionsExtensions : object {
    [ExtensionAttribute]
public static MvcNewtonsoftJsonOptions UseCamelCasing(MvcNewtonsoftJsonOptions options, bool processDictionaryKeys);
    [ExtensionAttribute]
public static MvcNewtonsoftJsonOptions UseMemberCasing(MvcNewtonsoftJsonOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.NewtonsoftJsonMvcBuilderExtensions : object {
    [ExtensionAttribute]
public static IMvcBuilder AddNewtonsoftJson(IMvcBuilder builder);
    [ExtensionAttribute]
public static IMvcBuilder AddNewtonsoftJson(IMvcBuilder builder, Action`1<MvcNewtonsoftJsonOptions> setupAction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.NewtonsoftJsonMvcCoreBuilderExtensions : object {
    [ExtensionAttribute]
public static IMvcCoreBuilder AddNewtonsoftJson(IMvcCoreBuilder builder);
    [ExtensionAttribute]
public static IMvcCoreBuilder AddNewtonsoftJson(IMvcCoreBuilder builder, Action`1<MvcNewtonsoftJsonOptions> setupAction);
    internal static void AddServicesCore(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.NewtonsoftJsonMvcOptionsSetup : object {
    private ILoggerFactory _loggerFactory;
    private MvcNewtonsoftJsonOptions _jsonOptions;
    private ArrayPool`1<char> _charPool;
    private ObjectPoolProvider _objectPoolProvider;
    public NewtonsoftJsonMvcOptionsSetup(ILoggerFactory loggerFactory, IOptions`1<MvcNewtonsoftJsonOptions> jsonOptions, ArrayPool`1<char> charPool, ObjectPoolProvider objectPoolProvider);
    public sealed virtual void Configure(MvcOptions options);
}
internal static class Microsoft.Extensions.Internal.ClosedGenericMatcher : object {
    [NullableContextAttribute("1")]
public static Type ExtractGenericInterface(Type queryType, Type interfaceType);
    private static bool IsGenericInstantiation(Type candidate, Type interfaceType);
    private static Type GetGenericInstantiation(Type queryType, Type interfaceType);
}
