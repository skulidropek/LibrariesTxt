internal class Microsoft.AspNetCore.Mvc.Testing.DeferredHostBuilder : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <Properties>k__BackingField;
    private Action`1<IHostBuilder> _configure;
    private Func`2<String[], object> _hostFactory;
    private ConfigurationManager _hostConfiguration;
    private TaskCompletionSource _hostStartTcs;
    public IDictionary`2<object, object> Properties { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<object, object> get_Properties();
    public sealed virtual IHost Build();
    public sealed virtual IHostBuilder ConfigureAppConfiguration(Action`2<HostBuilderContext, IConfigurationBuilder> configureDelegate);
    public sealed virtual IHostBuilder ConfigureContainer(Action`2<HostBuilderContext, TContainerBuilder> configureDelegate);
    public sealed virtual IHostBuilder ConfigureHostConfiguration(Action`1<IConfigurationBuilder> configureDelegate);
    public sealed virtual IHostBuilder ConfigureServices(Action`2<HostBuilderContext, IServiceCollection> configureDelegate);
    public sealed virtual IHostBuilder UseServiceProviderFactory(IServiceProviderFactory`1<TContainerBuilder> factory);
    public sealed virtual IHostBuilder UseServiceProviderFactory(Func`2<HostBuilderContext, IServiceProviderFactory`1<TContainerBuilder>> factory);
    public void ConfigureHostBuilder(object hostBuilder);
    public void EntryPointCompleted(Exception exception);
    public void SetHostFactory(Func`2<String[], object> hostFactory);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0(IHostBuilder b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Mvc.Testing.Handlers.CookieContainerHandler : DelegatingHandler {
    [CompilerGeneratedAttribute]
private CookieContainer <Container>k__BackingField;
    public CookieContainer Container { get; }
    public CookieContainerHandler(CookieContainer cookieContainer);
    [CompilerGeneratedAttribute]
public CookieContainer get_Container();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Testing.Handlers.CookieContainerHandler/<SendAsync>d__5")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class Microsoft.AspNetCore.Mvc.Testing.Handlers.RedirectHandler : DelegatingHandler {
    internal static int DefaultMaxRedirects;
    [CompilerGeneratedAttribute]
private int <MaxRedirects>k__BackingField;
    public int MaxRedirects { get; }
    public RedirectHandler(int maxRedirects);
    [CompilerGeneratedAttribute]
public int get_MaxRedirects();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Testing.Handlers.RedirectHandler/<SendAsync>d__6")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private static bool HasBody(HttpRequestMessage request);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Testing.Handlers.RedirectHandler/<DuplicateRequestContent>d__8")]
private static Task`1<HttpContent> DuplicateRequestContent(HttpRequestMessage request);
    private static void CopyContentHeaders(HttpContent originalRequestContent, HttpContent newRequestContent, HttpContent contentCopy);
    private static void CopyRequestHeaders(HttpRequestHeaders originalRequestHeaders, HttpRequestHeaders redirectRequestHeaders);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Testing.Handlers.RedirectHandler/<CopyBody>d__11")]
private static Task`1<ValueTuple`2<Stream, Stream>> CopyBody(HttpRequestMessage request);
    private static void UpdateRedirectRequest(HttpResponseMessage response, HttpRequestMessage redirect, HttpContent originalContent);
    private static bool ShouldKeepVerb(HttpResponseMessage response);
    private static bool IsRedirect(HttpResponseMessage response);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
internal static class Microsoft.AspNetCore.Mvc.Testing.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string InvalidAssemblyEntryPoint { get; }
    internal static string MissingBuilderMethod { get; }
    internal static string MissingDepsFile { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_InvalidAssemblyEntryPoint();
    internal static string FormatInvalidAssemblyEntryPoint(object p0);
    internal static string get_MissingBuilderMethod();
    internal static string FormatMissingBuilderMethod(object p0, object p1, object p2, object p3, object p4, object p5);
    internal static string get_MissingDepsFile();
    internal static string FormatMissingDepsFile(object p0, object p1);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory`1 : object {
    private bool _disposed;
    private bool _disposedAsync;
    private TestServer _server;
    private IHost _host;
    private Action`1<IWebHostBuilder> _configuration;
    private List`1<HttpClient> _clients;
    private List`1<WebApplicationFactory`1<TEntryPoint>> _derivedFactories;
    [CompilerGeneratedAttribute]
private WebApplicationFactoryClientOptions <ClientOptions>k__BackingField;
    public TestServer Server { get; }
    public IServiceProvider Services { get; }
    public IReadOnlyList`1<WebApplicationFactory`1<TEntryPoint>> Factories { get; }
    public WebApplicationFactoryClientOptions ClientOptions { get; private set; }
    protected virtual override void Finalize();
    public TestServer get_Server();
    public virtual IServiceProvider get_Services();
    public IReadOnlyList`1<WebApplicationFactory`1<TEntryPoint>> get_Factories();
    [CompilerGeneratedAttribute]
public WebApplicationFactoryClientOptions get_ClientOptions();
    [CompilerGeneratedAttribute]
private void set_ClientOptions(WebApplicationFactoryClientOptions value);
    public WebApplicationFactory`1<TEntryPoint> WithWebHostBuilder(Action`1<IWebHostBuilder> configuration);
    internal virtual WebApplicationFactory`1<TEntryPoint> WithWebHostBuilderCore(Action`1<IWebHostBuilder> configuration);
    [MemberNotNullAttribute("_server")]
private void EnsureServer();
    [MemberNotNullAttribute("_server")]
private void ConfigureHostBuilder(IHostBuilder hostBuilder);
    private void SetContentRoot(IWebHostBuilder builder);
    private static string GetContentRootFromFile(string file);
    private string GetContentRootFromAssembly();
    private static bool SetContentRootFromSetting(IWebHostBuilder builder);
    private WebApplicationFactoryContentRootAttribute[] GetContentRootMetadataAttributes(string tEntryPointAssemblyFullName, string tEntryPointAssemblyName);
    protected virtual IEnumerable`1<Assembly> GetTestAssemblies();
    private static void EnsureDepsFile();
    [NullableContextAttribute("2")]
protected virtual IHostBuilder CreateHostBuilder();
    [NullableContextAttribute("2")]
protected virtual IWebHostBuilder CreateWebHostBuilder();
    protected virtual TestServer CreateServer(IWebHostBuilder builder);
    protected virtual IHost CreateHost(IHostBuilder builder);
    protected virtual void ConfigureWebHost(IWebHostBuilder builder);
    public HttpClient CreateClient();
    public HttpClient CreateClient(WebApplicationFactoryClientOptions options);
    public HttpClient CreateDefaultClient(DelegatingHandler[] handlers);
    protected virtual void ConfigureClient(HttpClient client);
    public HttpClient CreateDefaultClient(Uri baseAddress, DelegatingHandler[] handlers);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory`1/<DisposeAsync>d__42")]
public virtual ValueTask DisposeAsync();
    [CompilerGeneratedAttribute]
private void <ConfigureHostBuilder>b__22_0(IWebHostBuilder webHostBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactoryClientOptions : object {
    [CompilerGeneratedAttribute]
private Uri <BaseAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAutoRedirect>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxAutomaticRedirections>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HandleCookies>k__BackingField;
    public Uri BaseAddress { get; public set; }
    public bool AllowAutoRedirect { get; public set; }
    public int MaxAutomaticRedirections { get; public set; }
    public bool HandleCookies { get; public set; }
    internal WebApplicationFactoryClientOptions(WebApplicationFactoryClientOptions clientOptions);
    [CompilerGeneratedAttribute]
public Uri get_BaseAddress();
    [CompilerGeneratedAttribute]
public void set_BaseAddress(Uri value);
    [CompilerGeneratedAttribute]
public bool get_AllowAutoRedirect();
    [CompilerGeneratedAttribute]
public void set_AllowAutoRedirect(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxAutomaticRedirections();
    [CompilerGeneratedAttribute]
public void set_MaxAutomaticRedirections(int value);
    [CompilerGeneratedAttribute]
public bool get_HandleCookies();
    [CompilerGeneratedAttribute]
public void set_HandleCookies(bool value);
    internal DelegatingHandler[] CreateHandlers();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactoryClientOptions/<<CreateHandlers>g__CreateHandlersCore|18_0>d")]
[CompilerGeneratedAttribute]
private IEnumerable`1<DelegatingHandler> <CreateHandlers>g__CreateHandlersCore|18_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactoryContentRootAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentRootTest>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public string Key { get; }
    public string ContentRootPath { get; }
    public string ContentRootTest { get; }
    public int Priority { get; }
    public WebApplicationFactoryContentRootAttribute(string key, string contentRootPath, string contentRootTest, string priority);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public string get_ContentRootPath();
    [CompilerGeneratedAttribute]
public string get_ContentRootTest();
    [CompilerGeneratedAttribute]
public int get_Priority();
}
internal class Microsoft.Extensions.Hosting.HostFactoryResolver : object {
    private static BindingFlags DeclaredOnlyLookup;
    public static string BuildWebHost;
    public static string CreateWebHostBuilder;
    public static string CreateHostBuilder;
    private static string TimeoutEnvironmentKey;
    private static TimeSpan s_defaultWaitTimeout;
    private static HostFactoryResolver();
    private static TimeSpan SetupDefaultTimeout();
    public static Func`2<String[], TWebHost> ResolveWebHostFactory(Assembly assembly);
    public static Func`2<String[], TWebHostBuilder> ResolveWebHostBuilderFactory(Assembly assembly);
    public static Func`2<String[], THostBuilder> ResolveHostBuilderFactory(Assembly assembly);
    public static Func`2<String[], object> ResolveHostFactory(Assembly assembly, Nullable`1<TimeSpan> waitTimeout, bool stopApplication, Action`1<object> configureHostBuilder, Action`1<Exception> entrypointCompleted);
    private static Func`2<String[], T> ResolveFactory(Assembly assembly, string name);
    private static bool IsFactory(MethodInfo factory);
    public static Func`2<String[], IServiceProvider> ResolveServiceProviderFactory(Assembly assembly, Nullable`1<TimeSpan> waitTimeout);
    private static object Build(object builder);
    private static IServiceProvider GetServiceProvider(object host);
    [CompilerGeneratedAttribute]
internal static bool <ResolveServiceProviderFactory>g__IsApplicationNameArg|13_4(string arg);
}
