[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Microsoft.AspNetCore.Builder.IApplicationBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IApplicationBuilder UseApiVersioning(IApplicationBuilder app);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorExtensions : object {
    [ExtensionAttribute]
public static ApiVersionModel GetApiVersionModel(ActionDescriptor action);
    [ExtensionAttribute]
public static ApiVersionModel GetApiVersionModel(ActionDescriptor action, ApiVersionMapping mapping);
    [ExtensionAttribute]
public static ApiVersionMapping MappingTo(ActionDescriptor action, ApiVersion apiVersion);
    [ExtensionAttribute]
public static bool IsMappedTo(ActionDescriptor action, ApiVersion apiVersion);
    [ExtensionAttribute]
internal static string ExpandSignature(ActionDescriptor action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.Mvc.AdvertiseApiVersionsAttribute : ApiVersionsBaseAttribute {
    private ApiVersionProviderOptions options;
    private ApiVersionProviderOptions Microsoft.AspNetCore.Mvc.Versioning.IApiVersionProvider.Options { get; }
    public bool Deprecated { get; public set; }
    protected AdvertiseApiVersionsAttribute(ApiVersion version);
    protected AdvertiseApiVersionsAttribute(ApiVersion[] versions);
    public AdvertiseApiVersionsAttribute(string version);
    [CLSCompliantAttribute("False")]
public AdvertiseApiVersionsAttribute(String[] versions);
    private sealed virtual override ApiVersionProviderOptions Microsoft.AspNetCore.Mvc.Versioning.IApiVersionProvider.get_Options();
    public bool get_Deprecated();
    public void set_Deprecated(bool value);
    public virtual int GetHashCode();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Mvc.ApiVersion : object {
    private static int Prime;
    [NullableAttribute("1")]
private static string ParsePattern;
    [NullableAttribute("1")]
private static string GroupVersionFormat;
    private int hashCode;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private static ApiVersion <Default>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private static ApiVersion <Neutral>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <GroupVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MajorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [NullableAttribute("1")]
public static ApiVersion Default { get; }
    [NullableAttribute("1")]
public static ApiVersion Neutral { get; }
    public Nullable`1<DateTime> GroupVersion { get; }
    public Nullable`1<int> MajorVersion { get; }
    public Nullable`1<int> MinorVersion { get; }
    private int ImpliedMinorVersion { get; }
    public string Status { get; }
    public ApiVersion(DateTime groupVersion);
    [NullableContextAttribute("1")]
public ApiVersion(DateTime groupVersion, string status);
    public ApiVersion(int majorVersion, int minorVersion);
    public ApiVersion(int majorVersion, int minorVersion, string status);
    public ApiVersion(DateTime groupVersion, int majorVersion, int minorVersion);
    public ApiVersion(DateTime groupVersion, int majorVersion, int minorVersion, string status);
    internal ApiVersion(Nullable`1<DateTime> groupVersion, Nullable`1<int> majorVersion, Nullable`1<int> minorVersion, string status);
    private static ApiVersion();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static ApiVersion get_Default();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static ApiVersion get_Neutral();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_GroupVersion();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MajorVersion();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinorVersion();
    private int get_ImpliedMinorVersion();
    [CompilerGeneratedAttribute]
public string get_Status();
    public static bool IsValidStatus(string status);
    [NullableContextAttribute("1")]
public static ApiVersion Parse(string text);
    public static bool TryParse(string text, ApiVersion& version);
    [NullableContextAttribute("1")]
public virtual string ToString(string format);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ApiVersion version1, ApiVersion version2);
    public static bool op_Inequality(ApiVersion version1, ApiVersion version2);
    public static bool op_LessThan(ApiVersion version1, ApiVersion version2);
    public static bool op_LessThanOrEqual(ApiVersion version1, ApiVersion version2);
    public static bool op_GreaterThan(ApiVersion version1, ApiVersion version2);
    public static bool op_GreaterThanOrEqual(ApiVersion version1, ApiVersion version2);
    public virtual bool Equals(ApiVersion other);
    public virtual int CompareTo(ApiVersion other);
    public virtual string ToString(string format, IFormatProvider formatProvider);
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.Mvc.ApiVersionAttribute : ApiVersionsBaseAttribute {
    private ApiVersionProviderOptions options;
    private ApiVersionProviderOptions Microsoft.AspNetCore.Mvc.Versioning.IApiVersionProvider.Options { get; }
    public bool Deprecated { get; public set; }
    [NullableContextAttribute("1")]
protected ApiVersionAttribute(ApiVersion version);
    [NullableContextAttribute("1")]
public ApiVersionAttribute(string version);
    private sealed virtual override ApiVersionProviderOptions Microsoft.AspNetCore.Mvc.Versioning.IApiVersionProvider.get_Options();
    public bool get_Deprecated();
    public void set_Deprecated(bool value);
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.Mvc.ApiVersionNeutralAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.ApplicationModels.ApiBehaviorSpecification : object {
    [CompilerGeneratedAttribute]
private Func`2<ControllerModel, bool> <IsApiController>k__BackingField;
    private Func`2<ControllerModel, bool> IsApiController { get; }
    [CompilerGeneratedAttribute]
private Func`2<ControllerModel, bool> get_IsApiController();
    public sealed virtual bool IsSatisfiedBy(ControllerModel controller);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.ApplicationModels.DefaultApiControllerFilter : object {
    private IReadOnlyList`1<IApiControllerSpecification> specifications;
    public DefaultApiControllerFilter(IEnumerable`1<IApiControllerSpecification> specifications);
    public sealed virtual IList`1<ControllerModel> Apply(IList`1<ControllerModel> controllers);
    private bool IsApiController(ControllerModel controller);
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Microsoft.AspNetCore.Mvc.ApplicationModels.IApiControllerFilter {
    public abstract virtual IList`1<ControllerModel> Apply(IList`1<ControllerModel> controllers);
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Microsoft.AspNetCore.Mvc.ApplicationModels.IApiControllerSpecification {
    public abstract virtual bool IsSatisfiedBy(ControllerModel controller);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Microsoft.AspNetCore.Mvc.ApplicationModels.ModelExtensions : object {
    [ExtensionAttribute]
public static T GetProperty(ControllerModel controller);
    [ExtensionAttribute]
public static void SetProperty(ControllerModel controller, T value);
    [ExtensionAttribute]
public static T GetProperty(ActionModel action);
    [ExtensionAttribute]
public static void SetProperty(ActionModel action, T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Mvc.CollectionExtensions : object {
    [ExtensionAttribute]
internal static TValue GetOrDefault(IDictionary`2<TKey, object> dictionary, TKey key, TValue defaultValue);
    [ExtensionAttribute]
internal static TValue GetOrDefault(IDictionary`2<TKey, object> dictionary, TKey key, Func`1<TValue> defaultValue);
    [ExtensionAttribute]
internal static void SetOrRemove(IDictionary`2<TKey, object> dictionary, TKey key, TValue value);
    [ExtensionAttribute]
internal static T AddAndReturn(ICollection`1<T> collection, T item);
    [ExtensionAttribute]
internal static bool TryGetValue(IDictionary`2<TKey, object> dictionary, TKey key, TValue& value);
    [ExtensionAttribute]
internal static List`1<T> AsList(IEnumerable`1<T> sequence);
    [ExtensionAttribute]
internal static IReadOnlyList`1<T> ToSortedReadOnlyList(IEnumerable`1<T> sequence);
    [ExtensionAttribute]
internal static void AddRange(ICollection`1<T> collection, IEnumerable`1<T> items);
    [ExtensionAttribute]
internal static string EnsureZeroOrOneApiVersions(ICollection`1<string> apiVersions);
    [ExtensionAttribute]
internal static void UnionWith(ICollection`1<T> collection, IEnumerable`1<T> other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Mvc.ControllerNameAttribute : RouteValueAttribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public ControllerNameAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Microsoft.AspNetCore.Mvc.HttpContextExtensions : object {
    [ExtensionAttribute]
public static IApiVersioningFeature ApiVersioningFeature(HttpContext context);
    [ExtensionAttribute]
public static ApiVersion GetRequestedApiVersion(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Mvc.IErrorResponseProviderExtensions : object {
    [ExtensionAttribute]
internal static IActionResult BadRequest(IErrorResponseProvider responseProvider, HttpContext context, string code, string message, string messageDetail);
    [ExtensionAttribute]
internal static IActionResult MethodNotAllowed(IErrorResponseProvider responseProvider, HttpContext context, string code, string message, string messageDetail);
}
[CLSCompliantAttribute("False")]
[AttributeUsageAttribute("64")]
public class Microsoft.AspNetCore.Mvc.MapToApiVersionAttribute : ApiVersionsBaseAttribute {
    private ApiVersionProviderOptions Microsoft.AspNetCore.Mvc.Versioning.IApiVersionProvider.Options { get; }
    [NullableContextAttribute("1")]
protected MapToApiVersionAttribute(ApiVersion version);
    [NullableContextAttribute("1")]
public MapToApiVersionAttribute(string version);
    private sealed virtual override ApiVersionProviderOptions Microsoft.AspNetCore.Mvc.Versioning.IApiVersionProvider.get_Options();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.Mvc.ReportApiVersionsAttribute : ActionFilterAttribute {
    private IReportApiVersions reporter;
    public ReportApiVersionsAttribute(IReportApiVersions reportApiVersions);
    public virtual void OnActionExecuting(ActionExecutingContext context);
    private Task ReportApiVersions(object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Routing.ApiVersionLinkGenerator : LinkGenerator {
    [CompilerGeneratedAttribute]
private LinkGenerator <LinkGenerator>k__BackingField;
    protected LinkGenerator LinkGenerator { get; }
    public ApiVersionLinkGenerator(LinkGenerator linkGenerator);
    [CompilerGeneratedAttribute]
protected LinkGenerator get_LinkGenerator();
    public virtual string GetPathByAddress(HttpContext httpContext, TAddress address, RouteValueDictionary values, RouteValueDictionary ambientValues, Nullable`1<PathString> pathBase, FragmentString fragment, LinkOptions options);
    public virtual string GetPathByAddress(TAddress address, RouteValueDictionary values, PathString pathBase, FragmentString fragment, LinkOptions options);
    [NullableContextAttribute("2")]
public virtual string GetUriByAddress(HttpContext httpContext, TAddress address, RouteValueDictionary values, RouteValueDictionary ambientValues, string scheme, Nullable`1<HostString> host, Nullable`1<PathString> pathBase, FragmentString fragment, LinkOptions options);
    public virtual string GetUriByAddress(TAddress address, RouteValueDictionary values, string scheme, HostString host, PathString pathBase, FragmentString fragment, LinkOptions options);
    private static void AddApiVersionRouteValueIfNecessary(HttpContext httpContext, RouteValueDictionary values);
}
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Routing.ApiVersionLinkGenerator`1 : ApiVersionLinkGenerator {
    [NullableContextAttribute("1")]
public ApiVersionLinkGenerator`1(T linkGenerator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Routing.ApiVersionMatcherPolicy : MatcherPolicy {
    private IOptions`1<ApiVersioningOptions> options;
    [CompilerGeneratedAttribute]
private IReportApiVersions <ApiVersionReporter>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public int Order { get; }
    private ApiVersioningOptions Options { get; }
    private IApiVersionSelector ApiVersionSelector { get; }
    private IReportApiVersions ApiVersionReporter { get; }
    private ILogger Logger { get; }
    public ApiVersionMatcherPolicy(IOptions`1<ApiVersioningOptions> options, IReportApiVersions reportApiVersions, ILoggerFactory loggerFactory);
    public virtual int get_Order();
    private ApiVersioningOptions get_Options();
    private IApiVersionSelector get_ApiVersionSelector();
    [CompilerGeneratedAttribute]
private IReportApiVersions get_ApiVersionReporter();
    [CompilerGeneratedAttribute]
private ILogger get_Logger();
    public sealed virtual bool AppliesToEndpoints(IReadOnlyList`1<Endpoint> endpoints);
    public sealed virtual Task ApplyAsync(HttpContext httpContext, CandidateSet candidates);
    [NullableContextAttribute("0")]
private static ValueTuple`2<bool, bool> MatchApiVersion(CandidateSet candidates, ApiVersion apiVersion);
    private static bool DifferByRouteConstraintsOnly(CandidateSet candidates);
    private bool IsRequestedApiVersionAmbiguous(HttpContext httpContext, ApiVersion& apiVersion);
    private ApiVersion TrySelectApiVersion(HttpContext httpContext, CandidateSet candidates);
    private RequestHandler ClientError(HttpContext httpContext, CandidateSet candidateSet);
}
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Routing.ApiVersionRouteConstraint : object {
    [NullableContextAttribute("1")]
public sealed virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Routing.ApiVersionUrlHelper : object {
    private IApiVersioningFeature feature;
    [CompilerGeneratedAttribute]
private IUrlHelper <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionContext <ActionContext>k__BackingField;
    protected IUrlHelper Url { get; }
    [NullableAttribute("2")]
protected string RouteParameter { get; }
    [NullableAttribute("2")]
protected string ApiVersion { get; }
    public ActionContext ActionContext { get; }
    public ApiVersionUrlHelper(ActionContext actionContext, IUrlHelper url);
    [CompilerGeneratedAttribute]
protected IUrlHelper get_Url();
    [NullableContextAttribute("2")]
protected string get_RouteParameter();
    [NullableContextAttribute("2")]
protected string get_ApiVersion();
    [CompilerGeneratedAttribute]
public sealed virtual ActionContext get_ActionContext();
    public virtual string Action(UrlActionContext actionContext);
    [NullableContextAttribute("2")]
public virtual string Content(string contentPath);
    [NullableContextAttribute("2")]
public virtual bool IsLocalUrl(string url);
    [NullableContextAttribute("2")]
public virtual string Link(string routeName, object values);
    public virtual string RouteUrl(UrlRouteContext routeContext);
    [NullableContextAttribute("2")]
private object AddApiVersionRouteValueIfNecessary(object current);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Routing.ApiVersionUrlHelperFactory : object {
    [CompilerGeneratedAttribute]
private IUrlHelperFactory <Factory>k__BackingField;
    protected IUrlHelperFactory Factory { get; }
    public ApiVersionUrlHelperFactory(IUrlHelperFactory factory);
    [CompilerGeneratedAttribute]
protected IUrlHelperFactory get_Factory();
    public virtual IUrlHelper GetUrlHelper(ActionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.Routing.CatchAllRouteHandler : object {
    private IApiVersionRoutePolicy routePolicy;
    public CatchAllRouteHandler(IApiVersionRoutePolicy routePolicy);
    public sealed virtual VirtualPathData GetVirtualPath(VirtualPathContext context);
    public sealed virtual Task RouteAsync(RouteContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.Routing.ClientErrorBuilder : object {
    [CompilerGeneratedAttribute]
private ApiVersioningOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IReportApiVersions <ApiVersionReporter>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpContext <HttpContext>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ActionDescriptor> <Candidates>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    internal ApiVersioningOptions Options { get; internal set; }
    internal IReportApiVersions ApiVersionReporter { get; internal set; }
    internal HttpContext HttpContext { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IReadOnlyCollection`1<ActionDescriptor> Candidates { get; internal set; }
    internal ILogger Logger { get; internal set; }
    [NullableAttribute("1")]
private IErrorResponseProvider ErrorResponseProvider { get; }
    [CompilerGeneratedAttribute]
internal ApiVersioningOptions get_Options();
    [CompilerGeneratedAttribute]
internal void set_Options(ApiVersioningOptions value);
    [CompilerGeneratedAttribute]
internal IReportApiVersions get_ApiVersionReporter();
    [CompilerGeneratedAttribute]
internal void set_ApiVersionReporter(IReportApiVersions value);
    [CompilerGeneratedAttribute]
internal HttpContext get_HttpContext();
    [CompilerGeneratedAttribute]
internal void set_HttpContext(HttpContext value);
    [CompilerGeneratedAttribute]
internal IReadOnlyCollection`1<ActionDescriptor> get_Candidates();
    [CompilerGeneratedAttribute]
internal void set_Candidates(IReadOnlyCollection`1<ActionDescriptor> value);
    [CompilerGeneratedAttribute]
internal ILogger get_Logger();
    [CompilerGeneratedAttribute]
internal void set_Logger(ILogger value);
    [NullableContextAttribute("1")]
private IErrorResponseProvider get_ErrorResponseProvider();
    [NullableContextAttribute("1")]
internal RequestHandler Build();
    [NullableContextAttribute("1")]
private static HashSet`1<string> AllowedMethodsFromCandidates(IEnumerable`1<ActionDescriptor> candidates, ApiVersion apiVersion);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Microsoft.AspNetCore.Mvc.Routing.ClientErrorBuilder/<GetHttpMethods>d__24")]
private static IEnumerable`1<string> GetHttpMethods(ActionDescriptor action);
    [NullableContextAttribute("1")]
private bool MethodSupportedInAnyOtherVersion(string method, ApiVersion version);
    [NullableContextAttribute("1")]
private RequestHandler VersionNeutralUnmatched(RequestHandlerContext context, string requestUrl, string method, IReadOnlyCollection`1<string> allowedMethods, string actionNames);
    [NullableContextAttribute("1")]
private RequestHandler UnspecifiedApiVersion(RequestHandlerContext context, string actionNames);
    [NullableContextAttribute("1")]
private RequestHandler MalformedApiVersion(RequestHandlerContext context, string requestUrl, string requestedVersion);
    [NullableContextAttribute("1")]
private RequestHandler Unmatched(RequestHandlerContext context, string requestUrl, string method, IReadOnlyCollection`1<string> allowedMethods, string actionNames, ApiVersion version, string rawVersion, Lazy`1<ApiVersionModel> aggregateModel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Routing.DefaultApiVersionRoutePolicy : object {
    private IOptions`1<ApiVersioningOptions> options;
    [CompilerGeneratedAttribute]
private IErrorResponseProvider <ErrorResponseProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IReportApiVersions <ApiVersionReporter>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    protected IErrorResponseProvider ErrorResponseProvider { get; }
    protected IReportApiVersions ApiVersionReporter { get; }
    protected ILogger Logger { get; }
    protected ApiVersioningOptions Options { get; }
    public DefaultApiVersionRoutePolicy(IErrorResponseProvider errorResponseProvider, IReportApiVersions reportApiVersions, ILoggerFactory loggerFactory, IOptions`1<ApiVersioningOptions> options);
    [CompilerGeneratedAttribute]
protected IErrorResponseProvider get_ErrorResponseProvider();
    [CompilerGeneratedAttribute]
protected IReportApiVersions get_ApiVersionReporter();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    protected ApiVersioningOptions get_Options();
    public virtual ActionDescriptor Evaluate(RouteContext context, ActionSelectionResult selectionResult);
    protected virtual ActionDescriptor OnSingleMatch(RouteContext context, ActionSelectionResult selectionResult);
    protected virtual void OnUnmatched(RouteContext context, ActionSelectionResult selectionResult);
    protected virtual void OnMultipleMatches(RouteContext context, ActionSelectionResult selectionResult);
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Microsoft.AspNetCore.Mvc.Routing.IApiVersionRoutePolicy {
    public abstract virtual ActionDescriptor Evaluate(RouteContext context, ActionSelectionResult selectionResult);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Mvc.Routing.RouteContextExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static void SetHandlerOrEndpoint(RouteContext context, RequestHandler handler);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.AspNetCore.Mvc.SR : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActionMethodNotFound { get; }
    internal static string ActionSelector_AmbiguousActions { get; }
    internal static string AmbiguousActionMethod { get; }
    internal static string ApiVersionBadGroupVersion { get; }
    internal static string ApiVersionBadStatus { get; }
    internal static string ApiVersionInvalidFormat { get; }
    internal static string ApiVersionInvalidFormatCode { get; }
    internal static string ApiVersionNotSupported { get; }
    internal static string ApiVersionUnspecified { get; }
    internal static string ConventionStyleMismatch { get; }
    internal static string CouldNotCreateInvoker { get; }
    internal static string InvalidActionMethodExpression { get; }
    internal static string InvalidFormatString { get; }
    internal static string MultipleApiVersionsInferredFromNamespaces { get; }
    internal static string MultipleDifferentApiVersionsRequested { get; }
    internal static string VersionedMethodNotSupported { get; }
    internal static string VersionedResourceNotSupported { get; }
    internal static string VersionNeutralMethodNotSupported { get; }
    internal static string VersionNeutralResourceNotSupported { get; }
    internal static string ZeroApiVersionReaders { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActionMethodNotFound();
    internal static string get_ActionSelector_AmbiguousActions();
    internal static string get_AmbiguousActionMethod();
    internal static string get_ApiVersionBadGroupVersion();
    internal static string get_ApiVersionBadStatus();
    internal static string get_ApiVersionInvalidFormat();
    internal static string get_ApiVersionInvalidFormatCode();
    internal static string get_ApiVersionNotSupported();
    internal static string get_ApiVersionUnspecified();
    internal static string get_ConventionStyleMismatch();
    internal static string get_CouldNotCreateInvoker();
    internal static string get_InvalidActionMethodExpression();
    internal static string get_InvalidFormatString();
    internal static string get_MultipleApiVersionsInferredFromNamespaces();
    internal static string get_MultipleDifferentApiVersionsRequested();
    internal static string get_VersionedMethodNotSupported();
    internal static string get_VersionedResourceNotSupported();
    internal static string get_VersionNeutralMethodNotSupported();
    internal static string get_VersionNeutralResourceNotSupported();
    internal static string get_ZeroApiVersionReaders();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Mvc.TypeExtensions : object {
    [ExtensionAttribute]
internal static bool IsPrimitive(Type type);
    [ExtensionAttribute]
internal static bool IsSimpleType(Type type);
    [ExtensionAttribute]
internal static bool IsSimpleUnderlyingType(Type type);
    [ExtensionAttribute]
internal static bool HasStringConverter(Type type);
    [ExtensionAttribute]
internal static bool CanConvertFromString(Type type);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Mvc.UriExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static string SafeFullPath(Uri uri);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.ActionSelectionContext : object {
    private Lazy`1<ApiVersionModel> allVersions;
    [CompilerGeneratedAttribute]
private HttpContext <HttpContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ActionDescriptor> <MatchingActions>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ApiVersion <RequestedVersion>k__BackingField;
    public HttpContext HttpContext { get; }
    public IReadOnlyList`1<ActionDescriptor> MatchingActions { get; }
    public ApiVersionModel AllVersions { get; }
    [NullableAttribute("2")]
public ApiVersion RequestedVersion { get; public set; }
    public ActionSelectionContext(HttpContext httpContext, IReadOnlyList`1<ActionDescriptor> matchingActions, ApiVersion requestedVersion);
    [CompilerGeneratedAttribute]
public HttpContext get_HttpContext();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ActionDescriptor> get_MatchingActions();
    public ApiVersionModel get_AllVersions();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ApiVersion get_RequestedVersion();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_RequestedVersion(ApiVersion value);
    private ApiVersionModel CreateAggregatedModel();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.ActionSelectionResult : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<ActionDescriptor> candidateActions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<ActionDescriptor> matchingActions;
    [NullableAttribute("2")]
[CLSCompliantAttribute("False")]
public ActionDescriptor BestMatch { get; }
    [CLSCompliantAttribute("False")]
public IReadOnlyCollection`1<ActionDescriptor> CandidateActions { get; }
    [CLSCompliantAttribute("False")]
public IReadOnlyCollection`1<ActionDescriptor> MatchingActions { get; }
    [NullableContextAttribute("2")]
public ActionDescriptor get_BestMatch();
    public IReadOnlyCollection`1<ActionDescriptor> get_CandidateActions();
    public IReadOnlyCollection`1<ActionDescriptor> get_MatchingActions();
    [CLSCompliantAttribute("False")]
public void AddCandidates(IEnumerable`1<ActionDescriptor> actions);
    [CLSCompliantAttribute("False")]
public void AddMatches(IEnumerable`1<ActionDescriptor> matches);
    public void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Mvc.Versioning.AmbiguousApiVersionException : Exception {
    private String[] apiVersions;
    public IReadOnlyList`1<string> ApiVersions { get; }
    public AmbiguousApiVersionException(string message);
    public AmbiguousApiVersionException(string message, Exception innerException);
    public AmbiguousApiVersionException(string message, IEnumerable`1<string> apiVersions);
    public AmbiguousApiVersionException(string message, IEnumerable`1<string> apiVersions, Exception innerException);
    protected AmbiguousApiVersionException(SerializationInfo info, StreamingContext context);
    public IReadOnlyList`1<string> get_ApiVersions();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private static String[] EmptyArray();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.ApiVersionActionSelector : object {
    private static IReadOnlyList`1<ActionDescriptor> NoMatches;
    private IActionDescriptorCollectionProvider actionDescriptorCollectionProvider;
    private IOptions`1<ApiVersioningOptions> options;
    private ActionConstraintCache actionConstraintCache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ActionSelectionTable`1<ActionDescriptor> cache;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IApiVersionRoutePolicy <RoutePolicy>k__BackingField;
    private ActionSelectionTable`1<ActionDescriptor> Current { get; }
    protected ApiVersioningOptions Options { get; }
    protected IApiVersionSelector ApiVersionSelector { get; }
    protected ILogger Logger { get; }
    protected IApiVersionRoutePolicy RoutePolicy { get; }
    public ApiVersionActionSelector(IActionDescriptorCollectionProvider actionDescriptorCollectionProvider, IEnumerable`1<IActionConstraintProvider> actionConstraintProviders, IOptions`1<ApiVersioningOptions> options, ILoggerFactory loggerFactory, IApiVersionRoutePolicy routePolicy);
    private static ApiVersionActionSelector();
    private ActionSelectionTable`1<ActionDescriptor> get_Current();
    protected ApiVersioningOptions get_Options();
    protected IApiVersionSelector get_ApiVersionSelector();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected IApiVersionRoutePolicy get_RoutePolicy();
    public virtual IReadOnlyList`1<ActionDescriptor> SelectCandidates(RouteContext context);
    public virtual ActionDescriptor SelectBestCandidate(RouteContext context, IReadOnlyList`1<ActionDescriptor> candidates);
    protected virtual IReadOnlyList`1<ActionDescriptor> SelectBestActions(ActionSelectionContext context);
    protected virtual ActionDescriptor SelectActionWithoutApiVersionConvention(IReadOnlyList`1<ActionDescriptor> matches);
    protected virtual bool IsRequestedApiVersionAmbiguous(RouteContext context, ApiVersion& apiVersion);
    protected virtual IReadOnlyList`1<ActionDescriptor> EvaluateActionConstraints(RouteContext context, IReadOnlyList`1<ActionDescriptor> actions);
    private IReadOnlyList`1<ActionSelectorCandidate> EvaluateActionConstraintsCore(RouteContext context, IReadOnlyList`1<ActionSelectorCandidate> candidates, Nullable`1<int> startingOrder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.ApiVersionCollator : object {
    private IOptions`1<ApiVersioningOptions> options;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    protected ApiVersioningOptions Options { get; }
    public int Order { get; protected set; }
    public ApiVersionCollator(IOptions`1<ApiVersioningOptions> options);
    protected ApiVersioningOptions get_Options();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
protected void set_Order(int value);
    public virtual void OnProvidersExecuted(ActionDescriptorProviderContext context);
    public virtual void OnProvidersExecuting(ActionDescriptorProviderContext context);
    protected virtual string GetControllerName(ActionDescriptor action);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Mvc.Versioning.ApiVersionCollator/<GroupActionsByController>d__11")]
private IEnumerable`1<IReadOnlyList`1<ActionDescriptor>> GroupActionsByController(IList`1<ActionDescriptor> actions);
    private static ApiVersionModel CollateModel(IEnumerable`1<ActionDescriptor> actions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Mvc.Versioning.ApiVersionFormatProvider : object {
    private static string GroupVersionFormat;
    [CompilerGeneratedAttribute]
private DateTimeFormatInfo <DateTimeFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private Calendar <Calendar>k__BackingField;
    [CompilerGeneratedAttribute]
private static ApiVersionFormatProvider <CurrentCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private static ApiVersionFormatProvider <InvariantCulture>k__BackingField;
    protected DateTimeFormatInfo DateTimeFormat { get; }
    protected Calendar Calendar { get; }
    public static ApiVersionFormatProvider CurrentCulture { get; }
    public static ApiVersionFormatProvider InvariantCulture { get; }
    public ApiVersionFormatProvider(DateTimeFormatInfo dateTimeFormat);
    public ApiVersionFormatProvider(Calendar calendar);
    public ApiVersionFormatProvider(DateTimeFormatInfo dateTimeFormat, Calendar calendar);
    private static ApiVersionFormatProvider();
    [CompilerGeneratedAttribute]
protected DateTimeFormatInfo get_DateTimeFormat();
    [CompilerGeneratedAttribute]
protected Calendar get_Calendar();
    [CompilerGeneratedAttribute]
public static ApiVersionFormatProvider get_CurrentCulture();
    [CompilerGeneratedAttribute]
public static ApiVersionFormatProvider get_InvariantCulture();
    public static ApiVersionFormatProvider GetInstance(IFormatProvider formatProvider);
    protected virtual string FormatAllParts(ApiVersion apiVersion, string format, IFormatProvider formatProvider);
    protected virtual string FormatGroupVersionPart(ApiVersion apiVersion, string format, IFormatProvider formatProvider);
    protected virtual string FormatVersionPart(ApiVersion apiVersion, string format, IFormatProvider formatProvider);
    protected virtual string FormatStatusPart(ApiVersion apiVersion, string format, IFormatProvider formatProvider);
    [NullableContextAttribute("2")]
public virtual object GetFormat(Type formatType);
    [NullableContextAttribute("2")]
public virtual string Format(string format, object arg, IFormatProvider formatProvider);
    [NullableContextAttribute("2")]
private static string GetDefaultFormat(string format, object arg, IFormatProvider formatProvider);
    private string GetCustomFormat(ApiVersion value, string format, IFormatProvider formatProvider);
    private static string FormatVersionWithoutPadding(ApiVersion apiVersion, string format, IFormatProvider formatProvider);
    private static string FormatVersionWithPadding(ApiVersion apiVersion, string format, IFormatProvider formatProvider);
    private static void SplitFormatSpecifierWithNumber(string format, IFormatProvider formatProvider, String& specifier, Int32& count);
    private static void AppendStatus(StringBuilder text, string status);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.ApiVersioningApplicationModelProvider : object {
    private IOptions`1<ApiVersioningOptions> options;
    [CompilerGeneratedAttribute]
private IApiControllerFilter <ControllerFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    protected ApiVersioningOptions Options { get; }
    protected IApiControllerFilter ControllerFilter { get; }
    public int Order { get; protected set; }
    public ApiVersioningApplicationModelProvider(IOptions`1<ApiVersioningOptions> options, IApiControllerFilter controllerFilter);
    protected ApiVersioningOptions get_Options();
    [CompilerGeneratedAttribute]
protected IApiControllerFilter get_ControllerFilter();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
protected void set_Order(int value);
    public virtual void OnProvidersExecuted(ApplicationModelProviderContext context);
    public virtual void OnProvidersExecuting(ApplicationModelProviderContext context);
    private static bool IsDecoratedWithAttributes(ControllerModel controller);
    private static void ApplyImplicitConventions(ControllerModel controller, ApiVersionModel implicitVersionModel);
    private static void ApplyAttributeOrImplicitConventions(ControllerModel controller, ApiVersionModel implicitVersionModel);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.ApiVersioningFeature : object {
    [NullableAttribute("1")]
private HttpContext context;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<string> rawApiVersions;
    private ApiVersion apiVersion;
    private ActionSelectionResult selectionResult;
    [CompilerGeneratedAttribute]
private string <RouteParameter>k__BackingField;
    public string RouteParameter { get; public set; }
    [NullableAttribute("1")]
public IReadOnlyList`1<string> RawRequestedApiVersions { get; public set; }
    public string RawRequestedApiVersion { get; public set; }
    public ApiVersion RequestedApiVersion { get; public set; }
    [NullableAttribute("1")]
public ActionSelectionResult SelectionResult { get; }
    [NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public ApiVersioningFeature(HttpContext context);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RouteParameter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RouteParameter(string value);
    [NullableContextAttribute("1")]
public sealed virtual IReadOnlyList`1<string> get_RawRequestedApiVersions();
    [NullableContextAttribute("1")]
public sealed virtual void set_RawRequestedApiVersions(IReadOnlyList`1<string> value);
    public sealed virtual string get_RawRequestedApiVersion();
    public sealed virtual void set_RawRequestedApiVersion(string value);
    public sealed virtual ApiVersion get_RequestedApiVersion();
    public sealed virtual void set_RequestedApiVersion(ApiVersion value);
    [NullableContextAttribute("1")]
public sealed virtual ActionSelectionResult get_SelectionResult();
    [NullableContextAttribute("1")]
private String[] ReadApiVersions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.Versioning.ApiVersioningMiddleware : object {
    private RequestDelegate next;
    private bool usingLegacyRouting;
    public ApiVersioningMiddleware(RequestDelegate next, IOptions`1<MvcOptions> options);
    public Task InvokeAsync(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.ApiVersioningMvcOptionsSetup : object {
    private IOptions`1<ApiVersioningOptions> versioningOptions;
    public ApiVersioningMvcOptionsSetup(IOptions`1<ApiVersioningOptions> options);
    public virtual void PostConfigure(string name, MvcOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Mvc.Versioning.ApiVersioningOptions : object {
    [CompilerGeneratedAttribute]
private bool <RegisterMiddleware>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseApiBehavior>k__BackingField;
    [NullableAttribute("2")]
private IApiVersionReader apiVersionReader;
    [NullableAttribute("2")]
private IApiVersionSelector apiVersionSelector;
    [NullableAttribute("2")]
private IApiVersionConventionBuilder conventions;
    [NullableAttribute("2")]
private IErrorResponseProvider errorResponses;
    [NullableAttribute("2")]
private IControllerNameConvention controllerNameConvention;
    [CompilerGeneratedAttribute]
private string <RouteConstraintName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReportApiVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AssumeDefaultVersionWhenUnspecified>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiVersion <DefaultApiVersion>k__BackingField;
    public bool RegisterMiddleware { get; public set; }
    public bool UseApiBehavior { get; public set; }
    public string RouteConstraintName { get; public set; }
    public bool ReportApiVersions { get; public set; }
    public bool AssumeDefaultVersionWhenUnspecified { get; public set; }
    public ApiVersion DefaultApiVersion { get; public set; }
    [CLSCompliantAttribute("False")]
public IApiVersionReader ApiVersionReader { get; public set; }
    [CLSCompliantAttribute("False")]
public IApiVersionSelector ApiVersionSelector { get; public set; }
    [CLSCompliantAttribute("False")]
public IApiVersionConventionBuilder Conventions { get; public set; }
    [CLSCompliantAttribute("False")]
public IErrorResponseProvider ErrorResponses { get; public set; }
    public IControllerNameConvention ControllerNameConvention { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RegisterMiddleware();
    [CompilerGeneratedAttribute]
public void set_RegisterMiddleware(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseApiBehavior();
    [CompilerGeneratedAttribute]
public void set_UseApiBehavior(bool value);
    [CompilerGeneratedAttribute]
public string get_RouteConstraintName();
    [CompilerGeneratedAttribute]
public void set_RouteConstraintName(string value);
    [CompilerGeneratedAttribute]
public bool get_ReportApiVersions();
    [CompilerGeneratedAttribute]
public void set_ReportApiVersions(bool value);
    [CompilerGeneratedAttribute]
public bool get_AssumeDefaultVersionWhenUnspecified();
    [CompilerGeneratedAttribute]
public void set_AssumeDefaultVersionWhenUnspecified(bool value);
    [CompilerGeneratedAttribute]
public ApiVersion get_DefaultApiVersion();
    [CompilerGeneratedAttribute]
public void set_DefaultApiVersion(ApiVersion value);
    public IApiVersionReader get_ApiVersionReader();
    public void set_ApiVersionReader(IApiVersionReader value);
    public IApiVersionSelector get_ApiVersionSelector();
    public void set_ApiVersionSelector(IApiVersionSelector value);
    public IApiVersionConventionBuilder get_Conventions();
    public void set_Conventions(IApiVersionConventionBuilder value);
    public IErrorResponseProvider get_ErrorResponses();
    public void set_ErrorResponses(IErrorResponseProvider value);
    public IControllerNameConvention get_ControllerNameConvention();
    public void set_ControllerNameConvention(IControllerNameConvention value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.ApiVersioningRouteOptionsSetup : object {
    private IOptions`1<ApiVersioningOptions> versioningOptions;
    public ApiVersioningRouteOptionsSetup(IOptions`1<ApiVersioningOptions> options);
    public virtual void PostConfigure(string name, RouteOptions options);
}
public enum Microsoft.AspNetCore.Mvc.Versioning.ApiVersionMapping : Enum {
    public int value__;
    public static ApiVersionMapping None;
    public static ApiVersionMapping Explicit;
    public static ApiVersionMapping Implicit;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerDisplayText}")]
[DebuggerTypeProxyAttribute("Microsoft.AspNetCore.Mvc.Versioning.ApiVersionModelDebugView")]
public class Microsoft.AspNetCore.Mvc.Versioning.ApiVersionModel : object {
    private static int DefaultModel;
    private static int NeutralModel;
    private static int EmptyModel;
    private static Lazy`1<ApiVersionModel> defaultVersion;
    private static Lazy`1<ApiVersionModel> neutralVersion;
    private static Lazy`1<ApiVersionModel> emptyVersion;
    private static IReadOnlyList`1<ApiVersion> emptyVersions;
    private static IReadOnlyList`1<ApiVersion> defaultVersions;
    [CompilerGeneratedAttribute]
private bool <IsApiVersionNeutral>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ApiVersion> <DeclaredApiVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ApiVersion> <ImplementedApiVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ApiVersion> <SupportedApiVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ApiVersion> <DeprecatedApiVersions>k__BackingField;
    private string DebuggerDisplayText { get; }
    public static ApiVersionModel Default { get; }
    public static ApiVersionModel Neutral { get; }
    public static ApiVersionModel Empty { get; }
    public bool IsApiVersionNeutral { get; }
    public IReadOnlyList`1<ApiVersion> DeclaredApiVersions { get; }
    public IReadOnlyList`1<ApiVersion> ImplementedApiVersions { get; }
    public IReadOnlyList`1<ApiVersion> SupportedApiVersions { get; }
    public IReadOnlyList`1<ApiVersion> DeprecatedApiVersions { get; }
    private ApiVersionModel(int kind);
    internal ApiVersionModel(ApiVersionModel original, IReadOnlyList`1<ApiVersion> implemented, IReadOnlyList`1<ApiVersion> supported, IReadOnlyList`1<ApiVersion> deprecated);
    public ApiVersionModel(ApiVersion declaredVersion);
    public ApiVersionModel(IEnumerable`1<ApiVersion> supportedVersions, IEnumerable`1<ApiVersion> deprecatedVersions);
    public ApiVersionModel(IEnumerable`1<ApiVersion> supportedVersions, IEnumerable`1<ApiVersion> deprecatedVersions, IEnumerable`1<ApiVersion> advertisedVersions, IEnumerable`1<ApiVersion> deprecatedAdvertisedVersions);
    public ApiVersionModel(IEnumerable`1<ApiVersion> declaredVersions, IEnumerable`1<ApiVersion> supportedVersions, IEnumerable`1<ApiVersion> deprecatedVersions, IEnumerable`1<ApiVersion> advertisedVersions, IEnumerable`1<ApiVersion> deprecatedAdvertisedVersions);
    private static ApiVersionModel();
    private string get_DebuggerDisplayText();
    public static ApiVersionModel get_Default();
    public static ApiVersionModel get_Neutral();
    public static ApiVersionModel get_Empty();
    [CompilerGeneratedAttribute]
public bool get_IsApiVersionNeutral();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ApiVersion> get_DeclaredApiVersions();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ApiVersion> get_ImplementedApiVersions();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ApiVersion> get_SupportedApiVersions();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ApiVersion> get_DeprecatedApiVersions();
}
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.ApiVersionModelBinder : object {
    [NullableContextAttribute("1")]
public virtual Task BindModelAsync(ModelBindingContext bindingContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.Versioning.ApiVersionModelBinderProvider : object {
    private static Type ApiVersionType;
    private static ApiVersionModelBinder binder;
    private static ApiVersionModelBinderProvider();
    public sealed virtual IModelBinder GetBinder(ModelBinderProviderContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.Versioning.ApiVersionModelDebugView : object {
    private static string Comma;
    private ApiVersionModel model;
    public bool VersionNeutral { get; }
    public string Declared { get; }
    public string Implemented { get; }
    public string Supported { get; }
    public string Deprecated { get; }
    public ApiVersionModelDebugView(ApiVersionModel model);
    public bool get_VersionNeutral();
    public string get_Declared();
    public string get_Implemented();
    public string get_Supported();
    public string get_Deprecated();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Mvc.Versioning.ApiVersionModelExtensions : object {
    [ExtensionAttribute]
public static ApiVersionModel Aggregate(ApiVersionModel version, ApiVersionModel otherVersion);
    [ExtensionAttribute]
public static ApiVersionModel Aggregate(ApiVersionModel version, IEnumerable`1<ApiVersionModel> otherVersions);
    [ExtensionAttribute]
public static ApiVersionModel Aggregate(IEnumerable`1<ApiVersionModel> versions);
}
public enum Microsoft.AspNetCore.Mvc.Versioning.ApiVersionParameterLocation : Enum {
    public int value__;
    public static ApiVersionParameterLocation Query;
    public static ApiVersionParameterLocation Header;
    public static ApiVersionParameterLocation Path;
    public static ApiVersionParameterLocation MediaTypeParameter;
}
[FlagsAttribute]
public enum Microsoft.AspNetCore.Mvc.Versioning.ApiVersionProviderOptions : Enum {
    public int value__;
    public static ApiVersionProviderOptions None;
    public static ApiVersionProviderOptions Deprecated;
    public static ApiVersionProviderOptions Advertised;
    public static ApiVersionProviderOptions Mapped;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.AspNetCore.Mvc.Versioning.ApiVersionReader : object {
    [CLSCompliantAttribute("False")]
public static IApiVersionReader Combine(IApiVersionReader[] apiVersionReaders);
    [CLSCompliantAttribute("False")]
public static IApiVersionReader Combine(IEnumerable`1<IApiVersionReader> apiVersionReaders);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.AspNetCore.Mvc.Versioning.ApiVersionsBaseAttribute : Attribute {
    private Lazy`1<int> computedHashCode;
    private Lazy`1<IReadOnlyList`1<ApiVersion>> versions;
    public IReadOnlyList`1<ApiVersion> Versions { get; }
    protected ApiVersionsBaseAttribute(ApiVersion version);
    protected ApiVersionsBaseAttribute(ApiVersion[] versions);
    protected ApiVersionsBaseAttribute(string version);
    [CLSCompliantAttribute("False")]
protected ApiVersionsBaseAttribute(String[] versions);
    private static int ComputeHashCode(IEnumerable`1<ApiVersion> versions);
    public sealed virtual IReadOnlyList`1<ApiVersion> get_Versions();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.Versioning.ApplyContentTypeVersionActionFilter : object {
    private string parameterName;
    public ApplyContentTypeVersionActionFilter(IApiVersionReader reader);
    public sealed virtual void OnActionExecuted(ActionExecutedContext context);
    public sealed virtual void OnActionExecuting(ActionExecutingContext context);
    private Task ApplyApiVersionMediaTypeParameter(object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.Versioning.BadRequestHandler : RequestHandler {
    internal BadRequestHandler(RequestHandlerContext context);
    protected virtual IActionResult CreateResult(HttpContext httpContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.ConstantApiVersionSelector : object {
    private ApiVersion version;
    public ConstantApiVersionSelector(ApiVersion version);
    public sealed virtual ApiVersion SelectVersion(HttpRequest request, ApiVersionModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.Conventions.ActionApiVersionConventionBuilder : ActionApiVersionConventionBuilderBase {
    [CompilerGeneratedAttribute]
private ControllerApiVersionConventionBuilder <ControllerBuilder>k__BackingField;
    protected ControllerApiVersionConventionBuilder ControllerBuilder { get; }
    public Type ControllerType { get; }
    public ActionApiVersionConventionBuilder(ControllerApiVersionConventionBuilder controllerBuilder);
    [CompilerGeneratedAttribute]
protected ControllerApiVersionConventionBuilder get_ControllerBuilder();
    public sealed virtual Type get_ControllerType();
    public virtual ActionApiVersionConventionBuilder Action(MethodInfo actionMethod);
    public virtual ActionApiVersionConventionBuilder MapToApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder IsApiVersionNeutral();
    public virtual ActionApiVersionConventionBuilder HasApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder HasDeprecatedApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder AdvertisesApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.AspNetCore.Mvc.Versioning.Conventions.IDeclareApiVersionConventionBuilder.IsApiVersionNeutral();
    private sealed virtual override void Microsoft.AspNetCore.Mvc.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.AspNetCore.Mvc.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.AspNetCore.Mvc.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.AspNetCore.Mvc.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.AspNetCore.Mvc.Versioning.Conventions.IMapToApiVersionConventionBuilder.MapToApiVersion(ApiVersion apiVersion);
    private sealed virtual override IActionConventionBuilder Microsoft.AspNetCore.Mvc.Versioning.Conventions.IActionConventionBuilder.Action(MethodInfo actionMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.Conventions.ActionApiVersionConventionBuilder`1 : ActionApiVersionConventionBuilderBase {
    [CompilerGeneratedAttribute]
private ControllerApiVersionConventionBuilder`1<T> <ControllerBuilder>k__BackingField;
    protected ControllerApiVersionConventionBuilder`1<T> ControllerBuilder { get; }
    private Type Microsoft.AspNetCore.Mvc.Versioning.Conventions.IActionConventionBuilder.ControllerType { get; }
    public ActionApiVersionConventionBuilder`1(ControllerApiVersionConventionBuilder`1<T> controllerBuilder);
    [CompilerGeneratedAttribute]
protected ControllerApiVersionConventionBuilder`1<T> get_ControllerBuilder();
    [EditorBrowsableAttribute("1")]
public virtual ActionApiVersionConventionBuilder`1<T> Action(MethodInfo actionMethod);
    public virtual ActionApiVersionConventionBuilder`1<T> MapToApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder`1<T> IsApiVersionNeutral();
    public virtual ActionApiVersionConventionBuilder`1<T> HasApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder`1<T> HasDeprecatedApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder`1<T> AdvertisesApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder`1<T> AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override Type Microsoft.AspNetCore.Mvc.Versioning.Conventions.IActionConventionBuilder.get_ControllerType();
    private sealed virtual override void Microsoft.AspNetCore.Mvc.Versioning.Conventions.IDeclareApiVersionConventionBuilder.IsApiVersionNeutral();
    private sealed virtual override void Microsoft.AspNetCore.Mvc.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.AspNetCore.Mvc.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.AspNetCore.Mvc.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.AspNetCore.Mvc.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.AspNetCore.Mvc.Versioning.Conventions.IMapToApiVersionConventionBuilder.MapToApiVersion(ApiVersion apiVersion);
    private sealed virtual override IActionConventionBuilder Microsoft.AspNetCore.Mvc.Versioning.Conventions.IActionConventionBuilder.Action(MethodInfo actionMethod);
    private sealed virtual override IActionConventionBuilder`1<T> Microsoft.AspNetCore.Mvc.Versioning.Conventions.IActionConventionBuilder<T>.Action(MethodInfo actionMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public abstract class Microsoft.AspNetCore.Mvc.Versioning.Conventions.ActionApiVersionConventionBuilderBase : ApiVersionConventionBuilderBase {
    [CompilerGeneratedAttribute]
private ICollection`1<ApiVersion> <MappedVersions>k__BackingField;
    protected ICollection`1<ApiVersion> MappedVersions { get; }
    public virtual void ApplyTo(ActionModel actionModel);
    [CompilerGeneratedAttribute]
protected ICollection`1<ApiVersion> get_MappedVersions();
    protected virtual void MergeAttributesWithConventions(IReadOnlyList`1<object> attributes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.Conventions.ActionApiVersionConventionBuilderCollection : object {
    private ControllerApiVersionConventionBuilder controllerBuilder;
    private IList`1<ActionBuilderMapping> actionBuilderMappings;
    public int Count { get; }
    public ActionApiVersionConventionBuilderCollection(ControllerApiVersionConventionBuilder controllerBuilder);
    protected internal virtual ActionApiVersionConventionBuilder GetOrAdd(MethodInfo actionMethod);
    public virtual int get_Count();
    [NullableContextAttribute("2")]
public virtual bool TryGetValue(MethodInfo actionMethod, ActionApiVersionConventionBuilder& actionBuilder);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Mvc.Versioning.Conventions.ActionApiVersionConventionBuilderCollection/<GetEnumerator>d__7")]
public virtual IEnumerator`1<ActionApiVersionConventionBuilder> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.Conventions.ActionApiVersionConventionBuilderCollection`1 : object {
    private ControllerApiVersionConventionBuilder`1<T> controllerBuilder;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IList`1<ActionBuilderMapping<T>> actionBuilderMappings;
    public int Count { get; }
    public ActionApiVersionConventionBuilderCollection`1(ControllerApiVersionConventionBuilder`1<T> controllerBuilder);
    protected internal virtual ActionApiVersionConventionBuilder`1<T> GetOrAdd(MethodInfo actionMethod);
    public virtual int get_Count();
    [NullableContextAttribute("2")]
public virtual bool TryGetValue(MethodInfo actionMethod, ActionApiVersionConventionBuilder`1& actionBuilder);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Mvc.Versioning.Conventions.ActionApiVersionConventionBuilderCollection`1/<GetEnumerator>d__7")]
public virtual IEnumerator`1<ActionApiVersionConventionBuilder`1<T>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Microsoft.AspNetCore.Mvc.Versioning.Conventions.ActionConventionBuilderExtensions : object {
    [ExtensionAttribute]
public static IActionConventionBuilder`1<TController> Action(IActionConventionBuilder`1<TController> builder, Expression`1<Action`1<TController>> actionExpression);
    [ExtensionAttribute]
public static IActionConventionBuilder`1<TController> Action(IActionConventionBuilder`1<TController> builder, Expression`1<Func`2<TController, TResult>> actionExpression);
    [ExtensionAttribute]
public static IActionConventionBuilder Action(IActionConventionBuilder builder, string methodName, Type[] argumentTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Mvc.Versioning.Conventions.ActionMethodResolver : object {
    internal static MethodInfo Resolve(Type controllerType, string methodName, Type[] argumentTypes);
    private static bool IsAction(MethodInfo method);
    private static bool SignatureMatches(MethodInfo method, Type[] argumentTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.Conventions.ApiVersionConventionBuilder : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<TypeInfo, IControllerConventionBuilder> <ControllerConventionBuilders>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IControllerConvention> <ControllerConventions>k__BackingField;
    protected IDictionary`2<TypeInfo, IControllerConventionBuilder> ControllerConventionBuilders { get; }
    protected IList`1<IControllerConvention> ControllerConventions { get; }
    public int Count { get; }
    public virtual bool ApplyTo(ControllerModel controllerModel);
    private static TypeInfo GetKey(Type type);
    private static bool HasDecoratedActions(ControllerModel controllerModel);
    [CompilerGeneratedAttribute]
protected IDictionary`2<TypeInfo, IControllerConventionBuilder> get_ControllerConventionBuilders();
    [CompilerGeneratedAttribute]
protected IList`1<IControllerConvention> get_ControllerConventions();
    public virtual int get_Count();
    public virtual IControllerConventionBuilder`1<TController> Controller();
    public virtual IControllerConventionBuilder Controller(Type controllerType);
    public virtual void Add(IControllerConvention convention);
    private bool InternalApplyTo(ControllerModel model);
    private static IControllerConventionBuilder NewGenericControllerConventionBuilder(Type controllerType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.AspNetCore.Mvc.Versioning.Conventions.ApiVersionConventionBuilderBase : object {
    [CompilerGeneratedAttribute]
private bool <VersionNeutral>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ApiVersion> <SupportedVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ApiVersion> <DeprecatedVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ApiVersion> <AdvertisedVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ApiVersion> <DeprecatedAdvertisedVersions>k__BackingField;
    protected bool VersionNeutral { get; protected set; }
    protected ICollection`1<ApiVersion> SupportedVersions { get; }
    protected ICollection`1<ApiVersion> DeprecatedVersions { get; }
    protected ICollection`1<ApiVersion> AdvertisedVersions { get; }
    protected ICollection`1<ApiVersion> DeprecatedAdvertisedVersions { get; }
    [CompilerGeneratedAttribute]
protected bool get_VersionNeutral();
    [CompilerGeneratedAttribute]
protected void set_VersionNeutral(bool value);
    [CompilerGeneratedAttribute]
protected ICollection`1<ApiVersion> get_SupportedVersions();
    [CompilerGeneratedAttribute]
protected ICollection`1<ApiVersion> get_DeprecatedVersions();
    [CompilerGeneratedAttribute]
protected ICollection`1<ApiVersion> get_AdvertisedVersions();
    [CompilerGeneratedAttribute]
protected ICollection`1<ApiVersion> get_DeprecatedAdvertisedVersions();
    protected virtual void MergeAttributesWithConventions(IEnumerable`1<object> attributes);
    protected virtual void MergeAttributesWithConventions(IReadOnlyList`1<object> attributes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Microsoft.AspNetCore.Mvc.Versioning.Conventions.ApiVersionConventionBuilderExtensions : object {
    [ExtensionAttribute]
public static T HasApiVersion(T builder, int majorVersion);
    [ExtensionAttribute]
public static T HasApiVersion(T builder, int majorVersion, string status);
    [ExtensionAttribute]
public static T HasApiVersion(T builder, int majorVersion, int minorVersion);
    [ExtensionAttribute]
public static T HasApiVersion(T builder, int majorVersion, int minorVersion, string status);
    [ExtensionAttribute]
public static T HasApiVersion(T builder, int year, int month, int day);
    [ExtensionAttribute]
public static T HasApiVersion(T builder, int year, int month, int day, string status);
    [ExtensionAttribute]
public static T HasApiVersion(T builder, DateTime groupVersion);
    [ExtensionAttribute]
public static T HasApiVersion(T builder, DateTime groupVersion, string status);
    [ExtensionAttribute]
public static T HasApiVersions(T builder, IEnumerable`1<ApiVersion> apiVersions);
    [ExtensionAttribute]
public static T HasDeprecatedApiVersion(T builder, int majorVersion);
    [ExtensionAttribute]
public static T HasDeprecatedApiVersion(T builder, int majorVersion, string status);
    [ExtensionAttribute]
public static T HasDeprecatedApiVersion(T builder, int majorVersion, int minorVersion);
    [ExtensionAttribute]
public static T HasDeprecatedApiVersion(T builder, int majorVersion, int minorVersion, string status);
    [ExtensionAttribute]
public static T HasDeprecatedApiVersion(T builder, int year, int month, int day);
    [ExtensionAttribute]
public static T HasDeprecatedApiVersion(T builder, int year, int month, int day, string status);
    [ExtensionAttribute]
public static T HasDeprecatedApiVersion(T builder, DateTime groupVersion);
    [ExtensionAttribute]
public static T HasDeprecatedApiVersion(T builder, DateTime groupVersion, string status);
    [ExtensionAttribute]
public static T HasDeprecatedApiVersions(T builder, IEnumerable`1<ApiVersion> apiVersions);
    [ExtensionAttribute]
public static T AdvertisesApiVersion(T builder, int majorVersion);
    [ExtensionAttribute]
public static T AdvertisesApiVersion(T builder, int majorVersion, string status);
    [ExtensionAttribute]
public static T AdvertisesApiVersion(T builder, int majorVersion, int minorVersion);
    [ExtensionAttribute]
public static T AdvertisesApiVersion(T builder, int majorVersion, int minorVersion, string status);
    [ExtensionAttribute]
public static T AdvertisesApiVersion(T builder, int year, int month, int day);
    [ExtensionAttribute]
public static T AdvertisesApiVersion(T builder, int year, int month, int day, string status);
    [ExtensionAttribute]
public static T AdvertisesApiVersion(T builder, DateTime groupVersion);
    [ExtensionAttribute]
public static T AdvertisesApiVersion(T builder, DateTime groupVersion, string status);
    [ExtensionAttribute]
public static T AdvertisesApiVersions(T builder, IEnumerable`1<ApiVersion> apiVersions);
    [ExtensionAttribute]
public static T AdvertisesDeprecatedApiVersion(T builder, int majorVersion);
    [ExtensionAttribute]
public static T AdvertisesDeprecatedApiVersion(T builder, int majorVersion, string status);
    [ExtensionAttribute]
public static T AdvertisesDeprecatedApiVersion(T builder, int majorVersion, int minorVersion);
    [ExtensionAttribute]
public static T AdvertisesDeprecatedApiVersion(T builder, int majorVersion, int minorVersion, string status);
    [ExtensionAttribute]
public static T AdvertisesDeprecatedApiVersion(T builder, int year, int month, int day);
    [ExtensionAttribute]
public static T AdvertisesDeprecatedApiVersion(T builder, int year, int month, int day, string status);
    [ExtensionAttribute]
public static T AdvertisesDeprecatedApiVersion(T builder, DateTime groupVersion);
    [ExtensionAttribute]
public static T AdvertisesDeprecatedApiVersion(T builder, DateTime groupVersion, string status);
    [ExtensionAttribute]
public static T AdvertisesDeprecatedApiVersions(T builder, IEnumerable`1<ApiVersion> apiVersions);
    [ExtensionAttribute]
public static T MapToApiVersion(T builder, int majorVersion);
    [ExtensionAttribute]
public static T MapToApiVersion(T builder, int majorVersion, string status);
    [ExtensionAttribute]
public static T MapToApiVersion(T builder, int majorVersion, int minorVersion);
    [ExtensionAttribute]
public static T MapToApiVersion(T builder, int majorVersion, int minorVersion, string status);
    [ExtensionAttribute]
public static T MapToApiVersion(T builder, int year, int month, int day);
    [ExtensionAttribute]
public static T MapToApiVersion(T builder, int year, int month, int day, string status);
    [ExtensionAttribute]
public static T MapToApiVersion(T builder, DateTime groupVersion);
    [ExtensionAttribute]
public static T MapToApiVersion(T builder, DateTime groupVersion, string status);
    [ExtensionAttribute]
public static T MapToApiVersions(T builder, IEnumerable`1<ApiVersion> apiVersions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.Conventions.ControllerApiVersionConventionBuilder : ControllerApiVersionConventionBuilderBase {
    [CompilerGeneratedAttribute]
private Type <ControllerType>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionApiVersionConventionBuilderCollection <ActionBuilders>k__BackingField;
    public Type ControllerType { get; }
    protected ActionApiVersionConventionBuilderCollection ActionBuilders { get; }
    public ControllerApiVersionConventionBuilder(Type controllerType);
    protected virtual bool TryGetConvention(MethodInfo method, IApiVersionConvention`1& convention);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ControllerType();
    [CompilerGeneratedAttribute]
protected virtual ActionApiVersionConventionBuilderCollection get_ActionBuilders();
    public virtual ControllerApiVersionConventionBuilder IsApiVersionNeutral();
    public virtual ControllerApiVersionConventionBuilder HasApiVersion(ApiVersion apiVersion);
    public virtual ControllerApiVersionConventionBuilder HasDeprecatedApiVersion(ApiVersion apiVersion);
    public virtual ControllerApiVersionConventionBuilder AdvertisesApiVersion(ApiVersion apiVersion);
    public virtual ControllerApiVersionConventionBuilder AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder Action(MethodInfo actionMethod);
    private sealed virtual override void Microsoft.AspNetCore.Mvc.Versioning.Conventions.IDeclareApiVersionConventionBuilder.IsApiVersionNeutral();
    private sealed virtual override void Microsoft.AspNetCore.Mvc.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.AspNetCore.Mvc.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.AspNetCore.Mvc.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.AspNetCore.Mvc.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override IActionConventionBuilder Microsoft.AspNetCore.Mvc.Versioning.Conventions.IControllerConventionBuilder.Action(MethodInfo actionMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.Conventions.ControllerApiVersionConventionBuilder`1 : ControllerApiVersionConventionBuilderBase {
    [CompilerGeneratedAttribute]
private ActionApiVersionConventionBuilderCollection`1<T> <ActionBuilders>k__BackingField;
    protected ActionApiVersionConventionBuilderCollection`1<T> ActionBuilders { get; }
    private Type Microsoft.AspNetCore.Mvc.Versioning.Conventions.IControllerConventionBuilder.ControllerType { get; }
    protected virtual bool TryGetConvention(MethodInfo method, IApiVersionConvention`1& convention);
    [CompilerGeneratedAttribute]
protected virtual ActionApiVersionConventionBuilderCollection`1<T> get_ActionBuilders();
    public virtual ControllerApiVersionConventionBuilder`1<T> IsApiVersionNeutral();
    public virtual ControllerApiVersionConventionBuilder`1<T> HasApiVersion(ApiVersion apiVersion);
    public virtual ControllerApiVersionConventionBuilder`1<T> HasDeprecatedApiVersion(ApiVersion apiVersion);
    public virtual ControllerApiVersionConventionBuilder`1<T> AdvertisesApiVersion(ApiVersion apiVersion);
    public virtual ControllerApiVersionConventionBuilder`1<T> AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    [EditorBrowsableAttribute("1")]
public virtual ActionApiVersionConventionBuilder`1<T> Action(MethodInfo actionMethod);
    private sealed virtual override Type Microsoft.AspNetCore.Mvc.Versioning.Conventions.IControllerConventionBuilder.get_ControllerType();
    private sealed virtual override void Microsoft.AspNetCore.Mvc.Versioning.Conventions.IDeclareApiVersionConventionBuilder.IsApiVersionNeutral();
    private sealed virtual override void Microsoft.AspNetCore.Mvc.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.AspNetCore.Mvc.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.AspNetCore.Mvc.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Microsoft.AspNetCore.Mvc.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override IActionConventionBuilder Microsoft.AspNetCore.Mvc.Versioning.Conventions.IControllerConventionBuilder.Action(MethodInfo actionMethod);
    private sealed virtual override IActionConventionBuilder`1<T> Microsoft.AspNetCore.Mvc.Versioning.Conventions.IControllerConventionBuilder<T>.Action(MethodInfo actionMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public abstract class Microsoft.AspNetCore.Mvc.Versioning.Conventions.ControllerApiVersionConventionBuilderBase : ApiVersionConventionBuilderBase {
    public virtual void ApplyTo(ControllerModel controllerModel);
    protected abstract virtual bool TryGetConvention(MethodInfo method, IApiVersionConvention`1& convention);
    private void ApplyActionConventions(ControllerModel controller);
    private void ApplyInheritedActionConventions(IList`1<ActionModel> actions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Microsoft.AspNetCore.Mvc.Versioning.Conventions.ControllerConventionBuilderExtensions : object {
    [ExtensionAttribute]
public static IActionConventionBuilder`1<TController> Action(IControllerConventionBuilder`1<TController> builder, Expression`1<Action`1<TController>> actionExpression);
    [ExtensionAttribute]
public static IActionConventionBuilder`1<TController> Action(IControllerConventionBuilder`1<TController> builder, Expression`1<Func`2<TController, TResult>> actionExpression);
    [ExtensionAttribute]
public static IActionConventionBuilder Action(IControllerConventionBuilder builder, string methodName, Type[] argumentTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.AspNetCore.Mvc.Versioning.Conventions.ControllerNameConvention : object {
    [NullableAttribute("2")]
private static IControllerNameConvention default;
    [NullableAttribute("2")]
private static IControllerNameConvention original;
    [NullableAttribute("2")]
private static IControllerNameConvention grouped;
    public static IControllerNameConvention Default { get; }
    public static IControllerNameConvention Original { get; }
    public static IControllerNameConvention Grouped { get; }
    public abstract virtual string NormalizeName(string controllerName);
    public abstract virtual string GroupName(string controllerName);
    public static IControllerNameConvention get_Default();
    public static IControllerNameConvention get_Original();
    public static IControllerNameConvention get_Grouped();
    public static string TrimTrailingNumbers(string name);
}
public class Microsoft.AspNetCore.Mvc.Versioning.Conventions.DefaultControllerNameConvention : OriginalControllerNameConvention {
    [NullableContextAttribute("1")]
public virtual string NormalizeName(string controllerName);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Mvc.Versioning.Conventions.ExpressionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static MethodInfo ExtractMethod(Expression`1<TDelegate> expression);
}
public class Microsoft.AspNetCore.Mvc.Versioning.Conventions.GroupedControllerNameConvention : OriginalControllerNameConvention {
    [NullableContextAttribute("1")]
public virtual string GroupName(string controllerName);
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Microsoft.AspNetCore.Mvc.Versioning.Conventions.IActionConventionBuilder {
    public Type ControllerType { get; }
    public abstract virtual Type get_ControllerType();
    public abstract virtual IActionConventionBuilder Action(MethodInfo actionMethod);
}
[CLSCompliantAttribute("False")]
public interface Microsoft.AspNetCore.Mvc.Versioning.Conventions.IActionConventionBuilder`1 {
    [NullableContextAttribute("1")]
public abstract virtual IActionConventionBuilder`1<T> Action(MethodInfo actionMethod);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Mvc.Versioning.Conventions.IApiVersionConvention`1 {
    public abstract virtual void ApplyTo(T item);
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Microsoft.AspNetCore.Mvc.Versioning.Conventions.IApiVersionConventionBuilder {
    public int Count { get; }
    public abstract virtual IControllerConventionBuilder`1<TController> Controller();
    public abstract virtual bool ApplyTo(ControllerModel controllerModel);
    public abstract virtual int get_Count();
    public abstract virtual IControllerConventionBuilder Controller(Type controllerType);
    public abstract virtual void Add(IControllerConvention convention);
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Microsoft.AspNetCore.Mvc.Versioning.Conventions.IControllerConvention {
    public abstract virtual bool Apply(IControllerConventionBuilder controller, ControllerModel controllerModel);
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Microsoft.AspNetCore.Mvc.Versioning.Conventions.IControllerConventionBuilder {
    public Type ControllerType { get; }
    public abstract virtual Type get_ControllerType();
    public abstract virtual IActionConventionBuilder Action(MethodInfo actionMethod);
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Microsoft.AspNetCore.Mvc.Versioning.Conventions.IControllerConventionBuilder`1 {
    public abstract virtual IActionConventionBuilder`1<T> Action(MethodInfo actionMethod);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Mvc.Versioning.Conventions.IControllerNameConvention {
    public abstract virtual string NormalizeName(string controllerName);
    public abstract virtual string GroupName(string controllerName);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Mvc.Versioning.Conventions.IDeclareApiVersionConventionBuilder {
    public abstract virtual void IsApiVersionNeutral();
    public abstract virtual void HasApiVersion(ApiVersion apiVersion);
    public abstract virtual void HasDeprecatedApiVersion(ApiVersion apiVersion);
    public abstract virtual void AdvertisesApiVersion(ApiVersion apiVersion);
    public abstract virtual void AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
}
public interface Microsoft.AspNetCore.Mvc.Versioning.Conventions.IMapToApiVersionConventionBuilder {
    [NullableContextAttribute("1")]
public abstract virtual void MapToApiVersion(ApiVersion apiVersion);
}
public class Microsoft.AspNetCore.Mvc.Versioning.Conventions.OriginalControllerNameConvention : object {
    [NullableContextAttribute("1")]
public virtual string NormalizeName(string controllerName);
    [NullableContextAttribute("1")]
public virtual string GroupName(string controllerName);
}
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.Conventions.VersionByNamespaceConvention : object {
    [NullableAttribute("1")]
private static string CompactDateFormat;
    [NullableAttribute("1")]
private static string ReadableDateFormat;
    [NullableContextAttribute("1")]
public virtual bool Apply(IControllerConventionBuilder controller, ControllerModel controllerModel);
    [NullableContextAttribute("1")]
private static ApiVersion GetApiVersion(string namespace);
    [NullableContextAttribute("1")]
private static IReadOnlyList`1<ApiVersion> Parse(string namespace);
    private static bool TryParse(ReadOnlySpan`1<char> identifier, ApiVersion& apiVersion);
    private static bool IsDateLike(ReadOnlySpan`1<char> value);
    private static bool TryConsumeGroup(ReadOnlySpan`1& identifier, string format, int length, Nullable`1& group);
    private static bool TryConsumeNumber(ReadOnlySpan`1& identifier, Nullable`1& number);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.CurrentImplementationApiVersionSelector : object {
    private ApiVersioningOptions options;
    public CurrentImplementationApiVersionSelector(ApiVersioningOptions options);
    public virtual ApiVersion SelectVersion(HttpRequest request, ApiVersionModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.Versioning.DefaultApiVersionReporter : object {
    private static string ApiSupportedVersions;
    private static string ApiDeprecatedVersions;
    private static string ValueSeparator;
    public sealed virtual void Report(IHeaderDictionary headers, Lazy`1<ApiVersionModel> apiVersionModel);
    public sealed virtual void Report(IHeaderDictionary headers, ApiVersionModel apiVersionModel);
    private static void AddApiVersionHeader(IHeaderDictionary headers, string headerName, IReadOnlyList`1<ApiVersion> versions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.DefaultApiVersionSelector : object {
    private ApiVersioningOptions options;
    public DefaultApiVersionSelector(ApiVersioningOptions options);
    public sealed virtual ApiVersion SelectVersion(HttpRequest request, ApiVersionModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.DefaultErrorResponseProvider : object {
    public virtual IActionResult CreateResponse(ErrorResponseContext context);
    protected virtual object CreateErrorContent(ErrorResponseContext context);
    private static string NullIfEmpty(string value);
    private static TError NewInnerError(ErrorResponseContext context, Func`2<ErrorResponseContext, TError> create);
}
internal class Microsoft.AspNetCore.Mvc.Versioning.DoNotReportApiVersions : object {
    [NullableContextAttribute("1")]
public sealed virtual void Report(IHeaderDictionary headers, ApiVersionModel apiVersionModel);
    [NullableContextAttribute("1")]
public sealed virtual void Report(IHeaderDictionary headers, Lazy`1<ApiVersionModel> apiVersionModel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.AspNetCore.Mvc.Versioning.ErrorCodes : object {
    public static string UnsupportedApiVersion;
    public static string ApiVersionUnspecified;
    public static string InvalidApiVersion;
    public static string AmbiguousApiVersion;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Mvc.Versioning.ErrorResponseContext : object {
    [CompilerGeneratedAttribute]
private HttpRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <MessageDetail>k__BackingField;
    [CLSCompliantAttribute("False")]
public HttpRequest Request { get; }
    public int StatusCode { get; }
    public string ErrorCode { get; }
    public string Message { get; }
    [NullableAttribute("2")]
public string MessageDetail { get; }
    [CLSCompliantAttribute("False")]
public ErrorResponseContext(HttpRequest request, int statusCode, string errorCode, string message, string messageDetail);
    [CompilerGeneratedAttribute]
public HttpRequest get_Request();
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
public string get_ErrorCode();
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_MessageDetail();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.HeaderApiVersionReader : object {
    [CompilerGeneratedAttribute]
private ICollection`1<string> <HeaderNames>k__BackingField;
    public ICollection`1<string> HeaderNames { get; }
    public HeaderApiVersionReader(IEnumerable`1<string> headerNames);
    public HeaderApiVersionReader(String[] headerNames);
    public virtual string Read(HttpRequest request);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_HeaderNames();
    public virtual void AddParameters(IApiVersionParameterDescriptionContext context);
}
[NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public interface Microsoft.AspNetCore.Mvc.Versioning.IApiVersioningFeature {
    public string RouteParameter { get; public set; }
    [NullableAttribute("1")]
public IReadOnlyList`1<string> RawRequestedApiVersions { get; public set; }
    public string RawRequestedApiVersion { get; public set; }
    public ApiVersion RequestedApiVersion { get; public set; }
    [NullableAttribute("1")]
public ActionSelectionResult SelectionResult { get; }
    public abstract virtual string get_RouteParameter();
    public abstract virtual void set_RouteParameter(string value);
    [NullableContextAttribute("1")]
public abstract virtual IReadOnlyList`1<string> get_RawRequestedApiVersions();
    [NullableContextAttribute("1")]
public abstract virtual void set_RawRequestedApiVersions(IReadOnlyList`1<string> value);
    public abstract virtual string get_RawRequestedApiVersion();
    public abstract virtual void set_RawRequestedApiVersion(string value);
    public abstract virtual ApiVersion get_RequestedApiVersion();
    public abstract virtual void set_RequestedApiVersion(ApiVersion value);
    [NullableContextAttribute("1")]
public abstract virtual ActionSelectionResult get_SelectionResult();
}
public interface Microsoft.AspNetCore.Mvc.Versioning.IApiVersionNeutral {
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Mvc.Versioning.IApiVersionParameterDescriptionContext {
    public abstract virtual void AddParameter(string name, ApiVersionParameterLocation location);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Mvc.Versioning.IApiVersionParameterSource {
    public abstract virtual void AddParameters(IApiVersionParameterDescriptionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Mvc.Versioning.IApiVersionParameterSourceExtensions : object {
    [ExtensionAttribute]
internal static bool VersionsByUrlSegment(IApiVersionParameterSource source);
    [ExtensionAttribute]
internal static bool VersionsOnlyByUrlSegment(IApiVersionParameterSource source);
    [ExtensionAttribute]
internal static bool VersionsByMediaType(IApiVersionParameterSource source);
    [ExtensionAttribute]
internal static string GetMediaTypeVersionParameter(IApiVersionParameterSource source);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Mvc.Versioning.IApiVersionProvider {
    public ApiVersionProviderOptions Options { get; }
    public IReadOnlyList`1<ApiVersion> Versions { get; }
    public abstract virtual ApiVersionProviderOptions get_Options();
    public abstract virtual IReadOnlyList`1<ApiVersion> get_Versions();
}
[CLSCompliantAttribute("False")]
public interface Microsoft.AspNetCore.Mvc.Versioning.IApiVersionReader {
    [NullableContextAttribute("1")]
public abstract virtual string Read(HttpRequest request);
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Microsoft.AspNetCore.Mvc.Versioning.IApiVersionSelector {
    public abstract virtual ApiVersion SelectVersion(HttpRequest request, ApiVersionModel model);
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Microsoft.AspNetCore.Mvc.Versioning.IErrorResponseProvider {
    public abstract virtual IActionResult CreateResponse(ErrorResponseContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Mvc.Versioning.ILoggerExtensions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, string, Exception> ambiguousActions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`5<ILogger, string, string, IActionConstraint, Exception> constraintMismatch;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, string, Exception> apiVersionUnspecified;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`4<ILogger, ApiVersion, string, Exception> apiVersionUnspecifiedWithDefaultVersion;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`4<ILogger, ApiVersion, string, Exception> apiVersionUnmatched;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, string, Exception> apiVersionInvalid;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, String[], Exception> noActionsMatched;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, String[], Exception> apiVersionAmbiguous;
    private static ILoggerExtensions();
    [ExtensionAttribute]
internal static void AmbiguousActions(ILogger logger, string actionNames);
    [ExtensionAttribute]
internal static void ConstraintMismatch(ILogger logger, string actionName, string actionId, IActionConstraint actionConstraint);
    [ExtensionAttribute]
internal static void ApiVersionUnspecified(ILogger logger, string actionNames);
    [ExtensionAttribute]
internal static void ApiVersionUnspecified(ILogger logger, ApiVersion apiVersion, string actionNames);
    [ExtensionAttribute]
internal static void ApiVersionUnmatched(ILogger logger, ApiVersion apiVersion, string actionNames);
    [ExtensionAttribute]
internal static void ApiVersionInvalid(ILogger logger, string apiVersion);
    [ExtensionAttribute]
internal static void ApiVersionAmbiguous(ILogger logger, String[] apiVersions);
    [ExtensionAttribute]
internal static void ApiVersionAmbiguous(ILogger logger, AmbiguousApiVersionException exception);
    [ExtensionAttribute]
internal static void NoActionsMatched(ILogger logger, IDictionary`2<string, object> routeValueDictionary);
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Microsoft.AspNetCore.Mvc.Versioning.IReportApiVersions {
    public abstract virtual void Report(IHeaderDictionary headers, ApiVersionModel apiVersionModel);
    public abstract virtual void Report(IHeaderDictionary headers, Lazy`1<ApiVersionModel> apiVersionModel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.LowestImplementedApiVersionSelector : object {
    private ApiVersioningOptions options;
    public LowestImplementedApiVersionSelector(ApiVersioningOptions options);
    public virtual ApiVersion SelectVersion(HttpRequest request, ApiVersionModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.MediaTypeApiVersionReader : object {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; public set; }
    public MediaTypeApiVersionReader(string parameterName);
    public virtual string Read(HttpRequest request);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
public void set_ParameterName(string value);
    protected virtual string ReadAcceptHeader(ICollection`1<MediaTypeHeaderValue> accept);
    protected virtual string ReadContentTypeHeader(MediaTypeHeaderValue contentType);
    public virtual void AddParameters(IApiVersionParameterDescriptionContext context);
    [NullableContextAttribute("2")]
private static int ByQualityDescending(MediaTypeHeaderValue left, MediaTypeHeaderValue right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.Versioning.MethodNotAllowedHandler : RequestHandler {
    internal MethodNotAllowedHandler(RequestHandlerContext context);
    protected virtual IActionResult CreateResult(HttpContext httpContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.ProblemDetailsErrorResponseProvider : object {
    public virtual IActionResult CreateResponse(ErrorResponseContext context);
    protected virtual ProblemDetails NewProblemDetails(ErrorResponseContext context);
    protected virtual ObjectResult NewResult(ErrorResponseContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.QueryStringApiVersionReader : object {
    private static string DefaultQueryParameterName;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <ParameterNames>k__BackingField;
    public ICollection`1<string> ParameterNames { get; }
    public QueryStringApiVersionReader(IEnumerable`1<string> parameterNames);
    public QueryStringApiVersionReader(String[] parameterNames);
    public virtual string Read(HttpRequest request);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_ParameterNames();
    public virtual void AddParameters(IApiVersionParameterDescriptionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.AspNetCore.Mvc.Versioning.RequestHandler : object {
    [CompilerGeneratedAttribute]
private RequestHandlerContext <Context>k__BackingField;
    protected RequestHandlerContext Context { get; }
    protected RequestHandler(RequestHandlerContext context);
    [CompilerGeneratedAttribute]
protected RequestHandlerContext get_Context();
    protected abstract virtual IActionResult CreateResult(HttpContext httpContext);
    internal Task ExecuteAsync(HttpContext httpContext);
    public static RequestDelegate op_Implicit(RequestHandler handler);
    [NullableContextAttribute("2")]
public static Endpoint op_Implicit(RequestHandler handler);
    internal Endpoint ToEndpoint();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Mvc.Versioning.RequestHandlerContext : object {
    private IReportApiVersions reporter;
    private Lazy`1<ApiVersionModel> apiVersions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] allowedMethods;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IList`1<object> metadata;
    [CompilerGeneratedAttribute]
private IErrorResponseProvider <ErrorResponses>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    internal IErrorResponseProvider ErrorResponses { get; }
    internal string Message { get; internal set; }
    internal string Code { get; internal set; }
    internal String[] AllowedMethods { get; internal set; }
    internal IList`1<object> Metadata { get; internal set; }
    internal RequestHandlerContext(IErrorResponseProvider errorResponseProvider, IReportApiVersions reportApiVersions);
    internal RequestHandlerContext(IErrorResponseProvider errorResponseProvider, IReportApiVersions reportApiVersions, Lazy`1<ApiVersionModel> apiVersions);
    [CompilerGeneratedAttribute]
internal IErrorResponseProvider get_ErrorResponses();
    [CompilerGeneratedAttribute]
internal string get_Message();
    [CompilerGeneratedAttribute]
internal void set_Message(string value);
    [CompilerGeneratedAttribute]
internal string get_Code();
    [CompilerGeneratedAttribute]
internal void set_Code(string value);
    internal String[] get_AllowedMethods();
    internal void set_AllowedMethods(String[] value);
    internal IList`1<object> get_Metadata();
    internal void set_Metadata(IList`1<object> value);
    internal void ReportApiVersions(HttpResponse response);
}
[CLSCompliantAttribute("False")]
public class Microsoft.AspNetCore.Mvc.Versioning.UrlSegmentApiVersionReader : object {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) reentrant;
    [NullableContextAttribute("1")]
public virtual string Read(HttpRequest request);
    [NullableContextAttribute("1")]
public virtual void AddParameters(IApiVersionParameterDescriptionContext context);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.AutoRegisterMiddleware : object {
    private IApiVersionRoutePolicy routePolicy;
    private IOptions`1<ApiVersioningOptions> options;
    private IOptions`1<MvcOptions> mvcOptions;
    public AutoRegisterMiddleware(IApiVersionRoutePolicy routePolicy, IOptions`1<ApiVersioningOptions> options, IOptions`1<MvcOptions> mvcOptions);
    public sealed virtual Action`1<IApplicationBuilder> Configure(Action`1<IApplicationBuilder> next);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddApiVersioning(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddApiVersioning(IServiceCollection services, Action`1<ApiVersioningOptions> setupAction);
    private static void AddApiVersioningServices(IServiceCollection services);
    [ExtensionAttribute]
private static IServiceCollection TryAddOrReplace(IServiceCollection services, ServiceDescriptor descriptor);
    private static IReportApiVersions OnRequestIReportApiVersions(IServiceProvider serviceProvider);
    [ExtensionAttribute]
private static object CreateInstance(IServiceProvider services, ServiceDescriptor descriptor);
    [ExtensionAttribute]
private static Type GetImplementationType(ServiceDescriptor descriptor);
    private static ServiceDescriptor WithUrlHelperFactoryDecorator(IServiceCollection services);
    private static ServiceDescriptor WithLinkGeneratorDecorator(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.StringExtensions : object {
    [ExtensionAttribute]
internal static string FormatInvariant(string format, Object[] args);
    [ExtensionAttribute]
internal static string FormatDefault(string format, Object[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.TypeExtensions : object {
    private static Dictionary`2<Type, string> BuiltInTypeNames;
    private static TypeExtensions();
    [ExtensionAttribute]
internal static string GetTypeDisplayName(Type type, bool fullName, bool includeGenericParameterNames);
    private static void ProcessType(StringBuilder builder, Type type, DisplayNameOptions options);
    private static void ProcessArrayType(StringBuilder builder, Type type, DisplayNameOptions options);
    private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, DisplayNameOptions options);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
