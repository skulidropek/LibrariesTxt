[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.WebApiCompatShimRouteBuilderExtensions : object {
    [ExtensionAttribute]
public static IRouteBuilder MapWebApiRoute(IRouteBuilder routeCollectionBuilder, string name, string template);
    [ExtensionAttribute]
public static IRouteBuilder MapWebApiRoute(IRouteBuilder routeCollectionBuilder, string name, string template, object defaults);
    [ExtensionAttribute]
public static IRouteBuilder MapWebApiRoute(IRouteBuilder routeCollectionBuilder, string name, string template, object defaults, object constraints);
    [ExtensionAttribute]
public static IRouteBuilder MapWebApiRoute(IRouteBuilder routeCollectionBuilder, string name, string template, object defaults, object constraints, object dataTokens);
    private static IDictionary`2<string, object> ObjectToDictionary(object value);
}
public interface Microsoft.AspNetCore.Mvc.ModelBinding.IOptionalBinderMetadata {
    public bool IsOptional { get; }
    public abstract virtual bool get_IsOptional();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Mvc.WebApiCompatShim.FormDataCollectionExtensions : object {
    public static string NormalizeJQueryToMvc(string key);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Mvc.WebApiCompatShim.FormDataCollectionExtensions/<GetJQueryNameValuePairs>d__1")]
[ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<string, string>> GetJQueryNameValuePairs(FormDataCollection formData);
    private static void ThrowIfMaxHttpCollectionKeysExceeded(int count);
}
public class Microsoft.AspNetCore.Mvc.WebApiCompatShim.HttpRequestMessageFeature : object {
    private HttpContext _httpContext;
    private HttpRequestMessage _httpRequestMessage;
    public HttpRequestMessage HttpRequestMessage { get; public set; }
    public HttpRequestMessageFeature(HttpContext httpContext);
    public sealed virtual HttpRequestMessage get_HttpRequestMessage();
    public sealed virtual void set_HttpRequestMessage(HttpRequestMessage value);
    private static HttpRequestMessage CreateHttpRequestMessage(HttpContext httpContext);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Mvc.WebApiCompatShim.HttpRequestMessageHttpContextExtensions : object {
    [ExtensionAttribute]
public static HttpRequestMessage GetHttpRequestMessage(HttpContext httpContext);
}
public class Microsoft.AspNetCore.Mvc.WebApiCompatShim.HttpRequestMessageModelBinder : object {
    public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
}
public class Microsoft.AspNetCore.Mvc.WebApiCompatShim.HttpRequestMessageModelBinderProvider : object {
    public sealed virtual IModelBinder GetBinder(ModelBinderProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.WebApiCompatShim.HttpResponseExceptionActionFilter : object {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public sealed virtual void OnActionExecuting(ActionExecutingContext context);
    public sealed virtual void OnActionExecuted(ActionExecutedContext context);
}
public class Microsoft.AspNetCore.Mvc.WebApiCompatShim.HttpResponseMessageOutputFormatter : object {
    public sealed virtual bool CanWriteResult(OutputFormatterCanWriteContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.WebApiCompatShim.HttpResponseMessageOutputFormatter/<WriteAsync>d__1")]
public sealed virtual Task WriteAsync(OutputFormatterWriteContext context);
}
public interface Microsoft.AspNetCore.Mvc.WebApiCompatShim.IHttpRequestMessageFeature {
    public HttpRequestMessage HttpRequestMessage { get; public set; }
    public abstract virtual HttpRequestMessage get_HttpRequestMessage();
    public abstract virtual void set_HttpRequestMessage(HttpRequestMessage value);
}
public interface Microsoft.AspNetCore.Mvc.WebApiCompatShim.IUseWebApiActionConventions {
}
public interface Microsoft.AspNetCore.Mvc.WebApiCompatShim.IUseWebApiOverloading {
}
public interface Microsoft.AspNetCore.Mvc.WebApiCompatShim.IUseWebApiParameterConventions {
}
public interface Microsoft.AspNetCore.Mvc.WebApiCompatShim.IUseWebApiRoutes {
}
public class Microsoft.AspNetCore.Mvc.WebApiCompatShim.OverloadActionConstraint : object {
    public int Order { get; }
    public sealed virtual int get_Order();
    public sealed virtual bool Accept(ActionConstraintContext context);
    private List`1<OverloadedParameter> GetOverloadableParameters(ActionSelectorCandidate candidate);
    private static ISet`1<string> GetCombinedKeys(RouteContext routeContext);
    private static bool CanConvertFromString(Type destinationType);
    private static bool IsSimpleType(Type type);
}
internal static class Microsoft.AspNetCore.Mvc.WebApiCompatShim.Resources : object {
    private static ResourceManager _resourceManager;
    internal static string HttpError_BadRequest { get; }
    internal static string HttpError_GenericError { get; }
    internal static string HttpError_ValidModelState { get; }
    internal static string HttpRequestMessage_CouldNotFindMatchingFormatter { get; }
    internal static string HttpRequestMessage_MustHaveHttpContext { get; }
    internal static string HttpResponseMessageFormatter_UnsupportedType { get; }
    internal static string JQuerySyntaxMissingClosingBracket { get; }
    internal static string MaxHttpCollectionKeyLimitReached { get; }
    internal static string HttpResponseExceptionMessage { get; }
    internal static string CreatedAtRoute_RouteFailed { get; }
    internal static string BindingSource_URL { get; }
    private static Resources();
    internal static string get_HttpError_BadRequest();
    internal static string FormatHttpError_BadRequest();
    internal static string get_HttpError_GenericError();
    internal static string FormatHttpError_GenericError();
    internal static string get_HttpError_ValidModelState();
    internal static string FormatHttpError_ValidModelState();
    internal static string get_HttpRequestMessage_CouldNotFindMatchingFormatter();
    internal static string FormatHttpRequestMessage_CouldNotFindMatchingFormatter(object p0, object p1);
    internal static string get_HttpRequestMessage_MustHaveHttpContext();
    internal static string FormatHttpRequestMessage_MustHaveHttpContext(object p0, object p1);
    internal static string get_HttpResponseMessageFormatter_UnsupportedType();
    internal static string FormatHttpResponseMessageFormatter_UnsupportedType(object p0, object p1);
    internal static string get_JQuerySyntaxMissingClosingBracket();
    internal static string FormatJQuerySyntaxMissingClosingBracket();
    internal static string get_MaxHttpCollectionKeyLimitReached();
    internal static string FormatMaxHttpCollectionKeyLimitReached(object p0, object p1);
    internal static string get_HttpResponseExceptionMessage();
    internal static string FormatHttpResponseExceptionMessage();
    internal static string get_CreatedAtRoute_RouteFailed();
    internal static string FormatCreatedAtRoute_RouteFailed(object p0);
    internal static string get_BindingSource_URL();
    internal static string FormatBindingSource_URL();
    private static string GetString(string name, String[] formatterNames);
}
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Mvc.WebApiCompatShim.UseWebApiActionConventionsAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Mvc.WebApiCompatShim.UseWebApiOverloadingAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Mvc.WebApiCompatShim.UseWebApiParameterConventionsAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Mvc.WebApiCompatShim.UseWebApiRoutesAttribute : Attribute {
}
public class Microsoft.AspNetCore.Mvc.WebApiCompatShim.WebApiActionConventionsApplicationModelConvention : object {
    private static String[] SupportedHttpMethodConventions;
    private static WebApiActionConventionsApplicationModelConvention();
    public sealed virtual void Apply(ControllerModel controller);
    private bool IsConventionApplicable(ControllerModel controller);
    private bool IsActionAttributeRouted(ActionModel action);
    private void SetHttpMethodFromConvention(ActionModel action);
}
public class Microsoft.AspNetCore.Mvc.WebApiCompatShim.WebApiCompatShimOptions : object {
    [CompilerGeneratedAttribute]
private MediaTypeFormatterCollection <Formatters>k__BackingField;
    public MediaTypeFormatterCollection Formatters { get; public set; }
    [CompilerGeneratedAttribute]
public MediaTypeFormatterCollection get_Formatters();
    [CompilerGeneratedAttribute]
public void set_Formatters(MediaTypeFormatterCollection value);
}
public class Microsoft.AspNetCore.Mvc.WebApiCompatShim.WebApiCompatShimOptionsSetup : object {
    public static string DefaultAreaName;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    private static WebApiCompatShimOptionsSetup();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public sealed virtual void Configure(MvcOptions options);
    public sealed virtual void Configure(WebApiCompatShimOptions options);
}
public class Microsoft.AspNetCore.Mvc.WebApiCompatShim.WebApiOverloadingApplicationModelConvention : object {
    public sealed virtual void Apply(ActionModel action);
    private bool IsConventionApplicable(ControllerModel controller);
}
public class Microsoft.AspNetCore.Mvc.WebApiCompatShim.WebApiParameterConventionsApplicationModelConvention : object {
    public sealed virtual void Apply(ActionModel action);
    private bool IsConventionApplicable(ControllerModel controller);
    private static bool CanConvertFromString(Type destinationType);
    private static bool IsSimpleType(Type type);
}
public class Microsoft.AspNetCore.Mvc.WebApiCompatShim.WebApiRoutesApplicationModelConvention : object {
    private string _area;
    public WebApiRoutesApplicationModelConvention(string area);
    public sealed virtual void Apply(ControllerModel controller);
    private bool IsConventionApplicable(ControllerModel controller);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.WebApiCompatShimMvcBuilderExtensions : object {
    [ExtensionAttribute]
public static IMvcBuilder AddWebApiConventions(IMvcBuilder builder);
}
internal class Microsoft.Extensions.Internal.PropertyHelper : object {
    private static MethodInfo CallPropertyGetterOpenGenericMethod;
    private static MethodInfo CallPropertyGetterByReferenceOpenGenericMethod;
    private static MethodInfo CallNullSafePropertyGetterOpenGenericMethod;
    private static MethodInfo CallNullSafePropertyGetterByReferenceOpenGenericMethod;
    private static MethodInfo CallPropertySetterOpenGenericMethod;
    private static ConcurrentDictionary`2<Type, PropertyHelper[]> PropertiesCache;
    private static ConcurrentDictionary`2<Type, PropertyHelper[]> VisiblePropertiesCache;
    private static Type IsByRefLikeAttribute;
    private Action`2<object, object> _valueSetter;
    private Func`2<object, object> _valueGetter;
    [CompilerGeneratedAttribute]
private PropertyInfo <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public PropertyInfo Property { get; }
    public string Name { get; protected set; }
    public Func`2<object, object> ValueGetter { get; }
    public Action`2<object, object> ValueSetter { get; }
    public PropertyHelper(PropertyInfo property);
    private static PropertyHelper();
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected virtual void set_Name(string value);
    public Func`2<object, object> get_ValueGetter();
    public Action`2<object, object> get_ValueSetter();
    public object GetValue(object instance);
    public void SetValue(object instance, object value);
    public static PropertyHelper[] GetProperties(TypeInfo typeInfo);
    public static PropertyHelper[] GetProperties(Type type);
    public static PropertyHelper[] GetVisibleProperties(TypeInfo typeInfo);
    public static PropertyHelper[] GetVisibleProperties(Type type);
    public static Func`2<object, object> MakeFastPropertyGetter(PropertyInfo propertyInfo);
    public static Func`2<object, object> MakeNullSafeFastPropertyGetter(PropertyInfo propertyInfo);
    private static Func`2<object, object> MakeFastPropertyGetter(PropertyInfo propertyInfo, MethodInfo propertyGetterWrapperMethod, MethodInfo propertyGetterByRefWrapperMethod);
    private static Func`2<object, object> MakeFastPropertyGetter(Type openGenericDelegateType, MethodInfo propertyGetMethod, MethodInfo openGenericWrapperMethod);
    public static Action`2<object, object> MakeFastPropertySetter(PropertyInfo propertyInfo);
    public static IDictionary`2<string, object> ObjectToDictionary(object value);
    private static PropertyHelper CreateInstance(PropertyInfo property);
    private static object CallPropertyGetter(Func`2<TDeclaringType, TValue> getter, object target);
    private static object CallPropertyGetterByReference(ByRefFunc`2<TDeclaringType, TValue> getter, object target);
    private static object CallNullSafePropertyGetter(Func`2<TDeclaringType, TValue> getter, object target);
    private static object CallNullSafePropertyGetterByReference(ByRefFunc`2<TDeclaringType, TValue> getter, object target);
    private static void CallPropertySetter(Action`2<TDeclaringType, TValue> setter, object target, object value);
    protected static PropertyHelper[] GetVisibleProperties(Type type, Func`2<PropertyInfo, PropertyHelper> createPropertyHelper, ConcurrentDictionary`2<Type, PropertyHelper[]> allPropertiesCache, ConcurrentDictionary`2<Type, PropertyHelper[]> visiblePropertiesCache);
    protected static PropertyHelper[] GetProperties(Type type, Func`2<PropertyInfo, PropertyHelper> createPropertyHelper, ConcurrentDictionary`2<Type, PropertyHelper[]> cache);
    private static bool IsInterestingProperty(PropertyInfo property);
    private static bool IsRefStructProperty(PropertyInfo property);
}
[ExtensionAttribute]
public static class System.Net.Http.HttpRequestMessageExtensions : object {
    [ExtensionAttribute]
public static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, string message);
    [ExtensionAttribute]
public static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, string message, Exception exception);
    [ExtensionAttribute]
public static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, Exception exception);
    [ExtensionAttribute]
public static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, ModelStateDictionary modelState);
    [ExtensionAttribute]
public static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, HttpError error);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, T value);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode, T value);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode, T value, IEnumerable`1<MediaTypeFormatter> formatters);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode, T value, string mediaType);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode, T value, MediaTypeHeaderValue mediaType);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode, T value, MediaTypeFormatter formatter);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode, T value, MediaTypeFormatter formatter, string mediaType);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode, T value, MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType);
    private static HttpContext GetHttpContext(HttpRequestMessage request);
    [ExtensionAttribute]
private static T GetProperty(HttpRequestMessage request, string key);
}
[UseWebApiRoutesAttribute]
[UseWebApiActionConventionsAttribute]
[UseWebApiParameterConventionsAttribute]
[UseWebApiOverloadingAttribute]
[ControllerAttribute]
public abstract class System.Web.Http.ApiController : object {
    private ControllerContext _controllerContext;
    private HttpRequestMessage _request;
    private IModelMetadataProvider _metadataProvider;
    private IObjectModelValidator _objectValidator;
    private IUrlHelper _urlHelper;
    public ActionContext ActionContext { get; }
    [ControllerContextAttribute]
public ControllerContext ControllerContext { get; public set; }
    public HttpContext Context { get; }
    public IModelMetadataProvider MetadataProvider { get; public set; }
    public IObjectModelValidator ObjectValidator { get; public set; }
    public ModelStateDictionary ModelState { get; }
    public HttpRequestMessage Request { get; public set; }
    public IUrlHelper Url { get; public set; }
    public IPrincipal User { get; }
    public ActionContext get_ActionContext();
    public ControllerContext get_ControllerContext();
    public void set_ControllerContext(ControllerContext value);
    public HttpContext get_Context();
    public IModelMetadataProvider get_MetadataProvider();
    public void set_MetadataProvider(IModelMetadataProvider value);
    public IObjectModelValidator get_ObjectValidator();
    public void set_ObjectValidator(IObjectModelValidator value);
    public ModelStateDictionary get_ModelState();
    public HttpRequestMessage get_Request();
    public void set_Request(HttpRequestMessage value);
    public IUrlHelper get_Url();
    public void set_Url(IUrlHelper value);
    public IPrincipal get_User();
    [NonActionAttribute]
public virtual BadRequestResult BadRequest();
    [NonActionAttribute]
public virtual BadRequestErrorMessageResult BadRequest(string message);
    [NonActionAttribute]
public virtual InvalidModelStateResult BadRequest(ModelStateDictionary modelState);
    [NonActionAttribute]
public virtual ConflictResult Conflict();
    [NonActionAttribute]
public virtual NegotiatedContentResult`1<T> Content(HttpStatusCode statusCode, T value);
    [NonActionAttribute]
public virtual CreatedResult Created(string location, object content);
    [NonActionAttribute]
public virtual CreatedResult Created(Uri uri, object content);
    [NonActionAttribute]
public virtual CreatedAtRouteResult CreatedAtRoute(string routeName, object routeValues, object content);
    [NonActionAttribute]
public virtual InternalServerErrorResult InternalServerError();
    [NonActionAttribute]
public virtual ExceptionResult InternalServerError(Exception exception);
    [NonActionAttribute]
public virtual JsonResult Json(T content);
    [NonActionAttribute]
public virtual JsonResult Json(T content, JsonSerializerSettings serializerSettings);
    [NonActionAttribute]
public virtual JsonResult Json(T content, JsonSerializerSettings serializerSettings, Encoding encoding);
    [NonActionAttribute]
public virtual NotFoundResult NotFound();
    [NonActionAttribute]
public virtual OkResult Ok();
    [NonActionAttribute]
public virtual OkObjectResult Ok(T content);
    [NonActionAttribute]
public virtual RedirectResult Redirect(string location);
    [NonActionAttribute]
public virtual RedirectResult Redirect(Uri location);
    [NonActionAttribute]
public virtual RedirectToRouteResult RedirectToRoute(string routeName, object routeValues);
    [NonActionAttribute]
public virtual ResponseMessageResult ResponseMessage(HttpResponseMessage response);
    [NonActionAttribute]
public virtual StatusCodeResult StatusCode(HttpStatusCode status);
    public sealed virtual void Dispose();
    public void Validate(TEntity entity);
    public void Validate(TEntity entity, string keyPrefix);
    protected virtual void Dispose(bool disposing);
}
public class System.Web.Http.BadRequestErrorMessageResult : ObjectResult {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; private set; }
    public BadRequestErrorMessageResult(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    public virtual Task ExecuteResultAsync(ActionContext context);
}
public class System.Web.Http.ConflictResult : StatusCodeResult {
}
public class System.Web.Http.ExceptionResult : ObjectResult {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeErrorDetail>k__BackingField;
    public Exception Exception { get; private set; }
    public bool IncludeErrorDetail { get; private set; }
    public ExceptionResult(Exception exception, bool includeErrorDetail);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public bool get_IncludeErrorDetail();
    [CompilerGeneratedAttribute]
private void set_IncludeErrorDetail(bool value);
    public virtual Task ExecuteResultAsync(ActionContext context);
}
[AttributeUsageAttribute("2048")]
public class System.Web.Http.FromUriAttribute : Attribute {
    private static BindingSource FromUriSource;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public BindingSource BindingSource { get; }
    public bool IsOptional { get; public set; }
    public string Name { get; public set; }
    private static FromUriAttribute();
    public sealed virtual BindingSource get_BindingSource();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsOptional();
    [CompilerGeneratedAttribute]
public void set_IsOptional(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[XmlRootAttribute("Error")]
public class System.Web.Http.HttpError : Dictionary`2<string, object> {
    public string Message { get; public set; }
    public HttpError ModelState { get; }
    public string MessageDetail { get; public set; }
    public string ExceptionMessage { get; public set; }
    public string ExceptionType { get; public set; }
    public string StackTrace { get; public set; }
    public HttpError InnerException { get; }
    public HttpError(string message);
    public HttpError(Exception exception, bool includeErrorDetail);
    public HttpError(ModelStateDictionary modelState, bool includeErrorDetail);
    public string get_Message();
    public void set_Message(string value);
    public HttpError get_ModelState();
    public string get_MessageDetail();
    public void set_MessageDetail(string value);
    public string get_ExceptionMessage();
    public void set_ExceptionMessage(string value);
    public string get_ExceptionType();
    public void set_ExceptionType(string value);
    public string get_StackTrace();
    public void set_StackTrace(string value);
    public HttpError get_InnerException();
    public TValue GetPropertyValue(string key);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
}
public static class System.Web.Http.HttpErrorKeys : object {
    public static string MessageKey;
    public static string MessageDetailKey;
    public static string ModelStateKey;
    public static string ExceptionMessageKey;
    public static string ExceptionTypeKey;
    public static string StackTraceKey;
    public static string InnerExceptionKey;
    public static string MessageLanguageKey;
    public static string ErrorCodeKey;
    private static HttpErrorKeys();
}
public class System.Web.Http.HttpResponseException : Exception {
    [CompilerGeneratedAttribute]
private HttpResponseMessage <Response>k__BackingField;
    public HttpResponseMessage Response { get; private set; }
    public HttpResponseException(HttpStatusCode statusCode);
    public HttpResponseException(HttpResponseMessage response);
    [CompilerGeneratedAttribute]
public HttpResponseMessage get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(HttpResponseMessage value);
}
public class System.Web.Http.InternalServerErrorResult : StatusCodeResult {
}
public class System.Web.Http.InvalidModelStateResult : ObjectResult {
    [CompilerGeneratedAttribute]
private ModelStateDictionary <ModelState>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeErrorDetail>k__BackingField;
    public ModelStateDictionary ModelState { get; private set; }
    public bool IncludeErrorDetail { get; private set; }
    public InvalidModelStateResult(ModelStateDictionary modelState, bool includeErrorDetail);
    [CompilerGeneratedAttribute]
public ModelStateDictionary get_ModelState();
    [CompilerGeneratedAttribute]
private void set_ModelState(ModelStateDictionary value);
    [CompilerGeneratedAttribute]
public bool get_IncludeErrorDetail();
    [CompilerGeneratedAttribute]
private void set_IncludeErrorDetail(bool value);
    public virtual Task ExecuteResultAsync(ActionContext context);
}
public class System.Web.Http.NegotiatedContentResult`1 : ObjectResult {
    [CompilerGeneratedAttribute]
private T <Content>k__BackingField;
    public T Content { get; private set; }
    public NegotiatedContentResult`1(HttpStatusCode statusCode, T content);
    [CompilerGeneratedAttribute]
public T get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(T value);
    public virtual Task ExecuteResultAsync(ActionContext context);
}
public class System.Web.Http.ResponseMessageResult : ObjectResult {
    [CompilerGeneratedAttribute]
private HttpResponseMessage <Response>k__BackingField;
    public HttpResponseMessage Response { get; private set; }
    public ResponseMessageResult(HttpResponseMessage response);
    [CompilerGeneratedAttribute]
public HttpResponseMessage get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(HttpResponseMessage value);
}
