internal static class Microsoft.AspNetCore.OData.Abstracts.AssemblyResolverHelper : object {
    public static IAssemblyResolver Default;
    private static AssemblyResolverHelper();
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.OData.Abstracts.ETagActionFilterAttribute : ActionFilterAttribute {
    public virtual void OnActionExecuted(ActionExecutedContext actionExecutedContext);
    private static EntityTagHeaderValue GetETag(Nullable`1<int> statusCode, ODataPath path, IEdmModel model, object value, IETagHandler etagHandler);
    private static IEdmEntityTypeReference GetTypeReference(IEdmModel model, IEdmEntityType edmType, object value);
    private static EntityTagHeaderValue CreateETag(ResourceContext resourceContext, IETagHandler handler);
    private static ResourceContext CreateInstanceContext(IEdmModel model, IEdmEntityTypeReference reference, object value);
    internal static IEdmEntityType GetSingleEntityEntityType(ODataPath path);
}
public class Microsoft.AspNetCore.OData.Abstracts.HttpRequestScope : object {
    [CompilerGeneratedAttribute]
private HttpRequest <HttpRequest>k__BackingField;
    public HttpRequest HttpRequest { get; public set; }
    [CompilerGeneratedAttribute]
public HttpRequest get_HttpRequest();
    [CompilerGeneratedAttribute]
public void set_HttpRequest(HttpRequest value);
}
public interface Microsoft.AspNetCore.OData.Abstracts.IETagHandler {
    public abstract virtual EntityTagHeaderValue CreateETag(IDictionary`2<string, object> properties, TimeZoneInfo timeZoneInfo);
    public abstract virtual IDictionary`2<string, object> ParseETag(EntityTagHeaderValue etagHeaderValue);
}
public interface Microsoft.AspNetCore.OData.Abstracts.IODataBatchFeature {
    public Nullable`1<Guid> BatchId { get; public set; }
    public Nullable`1<Guid> ChangeSetId { get; public set; }
    public string ContentId { get; public set; }
    public IDictionary`2<string, string> ContentIdMapping { get; }
    public abstract virtual Nullable`1<Guid> get_BatchId();
    public abstract virtual void set_BatchId(Nullable`1<Guid> value);
    public abstract virtual Nullable`1<Guid> get_ChangeSetId();
    public abstract virtual void set_ChangeSetId(Nullable`1<Guid> value);
    public abstract virtual string get_ContentId();
    public abstract virtual void set_ContentId(string value);
    public abstract virtual IDictionary`2<string, string> get_ContentIdMapping();
}
public interface Microsoft.AspNetCore.OData.Abstracts.IODataFeature {
    public IEdmModel Model { get; public set; }
    public ODataPath Path { get; public set; }
    public string RoutePrefix { get; public set; }
    public EndPoint Endpoint { get; public set; }
    public string BaseAddress { get; public set; }
    public IServiceScope RequestScope { get; public set; }
    public IServiceProvider Services { get; public set; }
    public RouteValueDictionary BatchRouteData { get; }
    public Nullable`1<long> TotalCount { get; public set; }
    public Func`1<long> TotalCountFunc { get; public set; }
    public ApplyClause ApplyClause { get; public set; }
    public SelectExpandClause SelectExpandClause { get; public set; }
    public Uri NextLink { get; public set; }
    public Uri DeltaLink { get; public set; }
    public IDictionary`2<string, object> RoutingConventionsStore { get; }
    public abstract virtual IEdmModel get_Model();
    public abstract virtual void set_Model(IEdmModel value);
    public abstract virtual ODataPath get_Path();
    public abstract virtual void set_Path(ODataPath value);
    public abstract virtual string get_RoutePrefix();
    public abstract virtual void set_RoutePrefix(string value);
    public abstract virtual EndPoint get_Endpoint();
    public abstract virtual void set_Endpoint(EndPoint value);
    public abstract virtual string get_BaseAddress();
    public abstract virtual void set_BaseAddress(string value);
    public abstract virtual IServiceScope get_RequestScope();
    public abstract virtual void set_RequestScope(IServiceScope value);
    public abstract virtual IServiceProvider get_Services();
    public abstract virtual void set_Services(IServiceProvider value);
    public abstract virtual RouteValueDictionary get_BatchRouteData();
    public abstract virtual Nullable`1<long> get_TotalCount();
    public abstract virtual void set_TotalCount(Nullable`1<long> value);
    public abstract virtual Func`1<long> get_TotalCountFunc();
    public abstract virtual void set_TotalCountFunc(Func`1<long> value);
    public abstract virtual ApplyClause get_ApplyClause();
    public abstract virtual void set_ApplyClause(ApplyClause value);
    public abstract virtual SelectExpandClause get_SelectExpandClause();
    public abstract virtual void set_SelectExpandClause(SelectExpandClause value);
    public abstract virtual Uri get_NextLink();
    public abstract virtual void set_NextLink(Uri value);
    public abstract virtual Uri get_DeltaLink();
    public abstract virtual void set_DeltaLink(Uri value);
    public abstract virtual IDictionary`2<string, object> get_RoutingConventionsStore();
}
[AttributeUsageAttribute("132")]
public class Microsoft.AspNetCore.OData.Abstracts.NonValidatingParameterBindingAttribute : ModelBinderAttribute {
    public BindingSource BindingSource { get; }
    public sealed virtual bool ShouldValidateEntry(ValidationEntry entry, ValidationEntry parentEntry);
    public virtual BindingSource get_BindingSource();
}
public class Microsoft.AspNetCore.OData.Abstracts.ODataBatchFeature : object {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <BatchId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ChangeSetId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentId>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ContentIdMapping>k__BackingField;
    public Nullable`1<Guid> BatchId { get; public set; }
    public Nullable`1<Guid> ChangeSetId { get; public set; }
    public string ContentId { get; public set; }
    public IDictionary`2<string, string> ContentIdMapping { get; }
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Guid> get_BatchId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BatchId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Guid> get_ChangeSetId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ChangeSetId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_ContentIdMapping();
}
public class Microsoft.AspNetCore.OData.Abstracts.ODataFeature : object {
    internal static string ODataServiceVersionHeader;
    internal static ODataVersion DefaultODataVersion;
    private Nullable`1<long> _totalCount;
    private bool _totalCountSet;
    [CompilerGeneratedAttribute]
private IEdmModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private EndPoint <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoutePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceScope <RequestScope>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteValueDictionary <BatchRouteData>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<long> <TotalCountFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplyClause <ApplyClause>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectExpandClause <SelectExpandClause>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <NextLink>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <DeltaLink>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataQueryOptions <QueryOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <BodyValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <RoutingConventionsStore>k__BackingField;
    public IEdmModel Model { get; public set; }
    public ODataPath Path { get; public set; }
    public EndPoint Endpoint { get; public set; }
    public string RoutePrefix { get; public set; }
    public string BaseAddress { get; public set; }
    public IServiceScope RequestScope { get; public set; }
    public IServiceProvider Services { get; public set; }
    public RouteValueDictionary BatchRouteData { get; }
    public Nullable`1<long> TotalCount { get; public set; }
    public Func`1<long> TotalCountFunc { get; public set; }
    public ApplyClause ApplyClause { get; public set; }
    public SelectExpandClause SelectExpandClause { get; public set; }
    public Uri NextLink { get; public set; }
    public Uri DeltaLink { get; public set; }
    internal ODataQueryOptions QueryOptions { get; internal set; }
    internal int PageSize { get; internal set; }
    internal IDictionary`2<string, object> BodyValues { get; internal set; }
    public IDictionary`2<string, object> RoutingConventionsStore { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IEdmModel get_Model();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Model(IEdmModel value);
    [CompilerGeneratedAttribute]
public sealed virtual ODataPath get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Path(ODataPath value);
    [CompilerGeneratedAttribute]
public sealed virtual EndPoint get_Endpoint();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Endpoint(EndPoint value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RoutePrefix();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RoutePrefix(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_BaseAddress();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BaseAddress(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceScope get_RequestScope();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestScope(IServiceScope value);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_Services();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Services(IServiceProvider value);
    [CompilerGeneratedAttribute]
public sealed virtual RouteValueDictionary get_BatchRouteData();
    public sealed virtual Nullable`1<long> get_TotalCount();
    public sealed virtual void set_TotalCount(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`1<long> get_TotalCountFunc();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TotalCountFunc(Func`1<long> value);
    [CompilerGeneratedAttribute]
public sealed virtual ApplyClause get_ApplyClause();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ApplyClause(ApplyClause value);
    [CompilerGeneratedAttribute]
public sealed virtual SelectExpandClause get_SelectExpandClause();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SelectExpandClause(SelectExpandClause value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_NextLink();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NextLink(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_DeltaLink();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DeltaLink(Uri value);
    [CompilerGeneratedAttribute]
internal ODataQueryOptions get_QueryOptions();
    [CompilerGeneratedAttribute]
internal void set_QueryOptions(ODataQueryOptions value);
    [CompilerGeneratedAttribute]
internal int get_PageSize();
    [CompilerGeneratedAttribute]
internal void set_PageSize(int value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, object> get_BodyValues();
    [CompilerGeneratedAttribute]
internal void set_BodyValues(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_RoutingConventionsStore();
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.OData.Abstracts.ODataServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddDefaultWebApiServices(IServiceCollection services);
}
public class Microsoft.AspNetCore.OData.Batch.ChangeSetRequestItem : ODataBatchRequestItem {
    [CompilerGeneratedAttribute]
private IEnumerable`1<HttpContext> <Contexts>k__BackingField;
    public IEnumerable`1<HttpContext> Contexts { get; }
    public ChangeSetRequestItem(IEnumerable`1<HttpContext> contexts);
    [CompilerGeneratedAttribute]
public IEnumerable`1<HttpContext> get_Contexts();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Batch.ChangeSetRequestItem/<SendRequestAsync>d__4")]
public virtual Task`1<ODataBatchResponseItem> SendRequestAsync(RequestDelegate handler);
}
public class Microsoft.AspNetCore.OData.Batch.ChangeSetResponseItem : ODataBatchResponseItem {
    [CompilerGeneratedAttribute]
private IEnumerable`1<HttpContext> <Contexts>k__BackingField;
    public IEnumerable`1<HttpContext> Contexts { get; }
    public ChangeSetResponseItem(IEnumerable`1<HttpContext> contexts);
    [CompilerGeneratedAttribute]
public IEnumerable`1<HttpContext> get_Contexts();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Batch.ChangeSetResponseItem/<WriteResponseAsync>d__4")]
public virtual Task WriteResponseAsync(ODataBatchWriter writer);
    internal virtual bool IsResponseSuccessful();
}
public class Microsoft.AspNetCore.OData.Batch.DefaultODataBatchHandler : ODataBatchHandler {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Batch.DefaultODataBatchHandler/<ProcessBatchAsync>d__0")]
public virtual Task ProcessBatchAsync(HttpContext context, RequestDelegate nextHandler);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Batch.DefaultODataBatchHandler/<ExecuteRequestMessagesAsync>d__1")]
public virtual Task`1<IList`1<ODataBatchResponseItem>> ExecuteRequestMessagesAsync(IEnumerable`1<ODataBatchRequestItem> requests, RequestDelegate handler);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Batch.DefaultODataBatchHandler/<ParseBatchRequestsAsync>d__2")]
public virtual Task`1<IList`1<ODataBatchRequestItem>> ParseBatchRequestsAsync(HttpContext context);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.AspNetCore.OData.Batch.HttpRequestExtensions : object {
    [ExtensionAttribute]
public static ODataMessageReader GetODataMessageReader(HttpRequest request, IServiceProvider requestContainer);
    [ExtensionAttribute]
public static void CopyAbsoluteUrl(HttpRequest request, Uri uri);
}
public class Microsoft.AspNetCore.OData.Batch.ODataBatchContent : object {
    private IServiceProvider _requestContainer;
    private ODataMessageWriterSettings _writerSettings;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ODataBatchResponseItem> <Responses>k__BackingField;
    [CompilerGeneratedAttribute]
private IHeaderDictionary <Headers>k__BackingField;
    public IEnumerable`1<ODataBatchResponseItem> Responses { get; }
    public IHeaderDictionary Headers { get; }
    public ODataBatchContent(IEnumerable`1<ODataBatchResponseItem> responses, IServiceProvider requestContainer);
    public ODataBatchContent(IEnumerable`1<ODataBatchResponseItem> responses, IServiceProvider requestContainer, string contentType);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ODataBatchResponseItem> get_Responses();
    [CompilerGeneratedAttribute]
public IHeaderDictionary get_Headers();
    public Task SerializeToStreamAsync(Stream stream);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Batch.ODataBatchContent/<WriteToResponseMessageAsync>d__11")]
private Task WriteToResponseMessageAsync(IODataResponseMessage responseMessage);
}
public abstract class Microsoft.AspNetCore.OData.Batch.ODataBatchHandler : object {
    private ODataMessageQuotas _messageQuotas;
    internal static string PreferenceContinueOnError;
    internal static string PreferenceContinueOnErrorFalse;
    [CompilerGeneratedAttribute]
private string <PrefixName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContinueOnError>k__BackingField;
    public ODataMessageQuotas MessageQuotas { get; }
    public string PrefixName { get; public set; }
    internal bool ContinueOnError { get; private set; }
    public ODataMessageQuotas get_MessageQuotas();
    [CompilerGeneratedAttribute]
public string get_PrefixName();
    [CompilerGeneratedAttribute]
public void set_PrefixName(string value);
    public abstract virtual Task ProcessBatchAsync(HttpContext context, RequestDelegate nextHandler);
    public virtual Task CreateResponseMessageAsync(IEnumerable`1<ODataBatchResponseItem> responses, HttpRequest request);
    public virtual Task`1<bool> ValidateRequest(HttpRequest request);
    public virtual Uri GetBaseUri(HttpRequest request);
    [CompilerGeneratedAttribute]
internal bool get_ContinueOnError();
    [CompilerGeneratedAttribute]
private void set_ContinueOnError(bool value);
    internal void SetContinueOnError(IHeaderDictionary header, bool enableContinueOnErrorHeader);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.AspNetCore.OData.Batch.ODataBatchHttpRequestExtensions : object {
    private static string BatchMediaTypeMime;
    private static string BatchMediaTypeJson;
    private static string Boundary;
    [ExtensionAttribute]
public static bool IsODataBatchRequest(HttpRequest request);
    [ExtensionAttribute]
public static Nullable`1<Guid> GetODataBatchId(HttpRequest request);
    [ExtensionAttribute]
public static void SetODataBatchId(HttpRequest request, Guid batchId);
    [ExtensionAttribute]
public static Nullable`1<Guid> GetODataChangeSetId(HttpRequest request);
    [ExtensionAttribute]
public static void SetODataChangeSetId(HttpRequest request, Guid changeSetId);
    [ExtensionAttribute]
public static string GetODataContentId(HttpRequest request);
    [ExtensionAttribute]
public static void SetODataContentId(HttpRequest request, string contentId);
    [ExtensionAttribute]
public static IDictionary`2<string, string> GetODataContentIdMapping(HttpRequest request);
    [ExtensionAttribute]
public static void SetODataContentIdMapping(HttpRequest request, IDictionary`2<string, string> contentIdMapping);
    [ExtensionAttribute]
internal static Task CreateODataBatchResponseAsync(HttpRequest request, IEnumerable`1<ODataBatchResponseItem> responses, ODataMessageQuotas messageQuotas);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Batch.ODataBatchHttpRequestExtensions/<ValidateODataBatchRequest>d__13")]
[ExtensionAttribute]
internal static Task`1<bool> ValidateODataBatchRequest(HttpRequest request);
    [ExtensionAttribute]
internal static Uri GetODataBatchBaseUri(HttpRequest request, string oDataPrefixName);
    internal static ODataVersion GetODataResponseVersion(HttpRequest request);
}
public class Microsoft.AspNetCore.OData.Batch.ODataBatchMiddleware : object {
    private RequestDelegate _next;
    private ODataBatchPathMapping _batchMapping;
    internal ODataBatchPathMapping BatchMapping { get; }
    public ODataBatchMiddleware(IServiceProvider serviceProvider, RequestDelegate next);
    internal ODataBatchPathMapping get_BatchMapping();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Batch.ODataBatchMiddleware/<Invoke>d__5")]
public Task Invoke(HttpContext context);
    private void Initialize(ODataOptions options);
}
internal class Microsoft.AspNetCore.OData.Batch.ODataBatchPathMapping : object {
    private Dictionary`2<TemplateMatcher, ValueTuple`2<string, ODataBatchHandler>> templateMappings;
    public void AddRoute(string prefixName, string routeTemplate, ODataBatchHandler handler);
    public bool TryGetPrefixName(HttpContext context, String& prefixName, ODataBatchHandler& handler);
    private static void Merge(RouteValueDictionary batchRouteData, RouteValueDictionary routeData);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.AspNetCore.OData.Batch.ODataBatchReaderExtensions : object {
    private static String[] nonInheritableHeaders;
    private static String[] nonInheritablePreferences;
    private static ODataBatchReaderExtensions();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Batch.ODataBatchReaderExtensions/<ReadChangeSetRequestAsync>d__2")]
[ExtensionAttribute]
public static Task`1<IList`1<HttpContext>> ReadChangeSetRequestAsync(ODataBatchReader reader, HttpContext context, Guid batchId, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpContext> ReadOperationRequestAsync(ODataBatchReader reader, HttpContext context, Guid batchId, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpContext> ReadChangeSetOperationRequestAsync(ODataBatchReader reader, HttpContext context, Guid batchId, Guid changeSetId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Batch.ODataBatchReaderExtensions/<ReadOperationInternalAsync>d__5")]
private static Task`1<HttpContext> ReadOperationInternalAsync(ODataBatchReader reader, HttpContext originalContext, Guid batchId, Nullable`1<Guid> changeSetId, CancellationToken cancellationToken);
    private static HttpContext CreateHttpContext(HttpContext originalContext);
    private static string GetPreferencesToInheritFromBatch(string batchPreferences);
    private static string MergeIndividualAndBatchPreferences(string individualPreferences, string batchPreferences);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Batch.ODataBatchReaderExtensions/<SplitPreferences>d__9")]
private static IEnumerable`1<string> SplitPreferences(string preferences);
}
public abstract class Microsoft.AspNetCore.OData.Batch.ODataBatchRequestItem : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ContentIdToLocationMapping>k__BackingField;
    public IDictionary`2<string, string> ContentIdToLocationMapping { get; public set; }
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Batch.ODataBatchRequestItem/<SendRequestAsync>d__0")]
public static Task SendRequestAsync(RequestDelegate handler, HttpContext context, IDictionary`2<string, string> contentIdToLocationMapping);
    public abstract virtual Task`1<ODataBatchResponseItem> SendRequestAsync(RequestDelegate handler);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ContentIdToLocationMapping();
    [CompilerGeneratedAttribute]
public void set_ContentIdToLocationMapping(IDictionary`2<string, string> value);
    private static void AddLocationHeaderToMapping(HttpResponse response, IDictionary`2<string, string> contentIdToLocationMapping, string contentId);
}
public abstract class Microsoft.AspNetCore.OData.Batch.ODataBatchResponseItem : object {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Batch.ODataBatchResponseItem/<WriteMessageAsync>d__0")]
public static Task WriteMessageAsync(ODataBatchWriter writer, HttpContext context);
    public abstract virtual Task WriteResponseAsync(ODataBatchWriter writer);
    internal abstract virtual bool IsResponseSuccessful();
}
internal class Microsoft.AspNetCore.OData.Batch.ODataBatchStream : MemoryStream {
    private bool isDisposed;
    internal void InternalDispose();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Batch.ODataBatchStream/<InternalDisposeAsync>d__2")]
internal Task InternalDisposeAsync();
    public virtual void Close();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1();
}
public class Microsoft.AspNetCore.OData.Batch.OperationRequestItem : ODataBatchRequestItem {
    [CompilerGeneratedAttribute]
private HttpContext <Context>k__BackingField;
    public HttpContext Context { get; }
    public OperationRequestItem(HttpContext context);
    [CompilerGeneratedAttribute]
public HttpContext get_Context();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Batch.OperationRequestItem/<SendRequestAsync>d__4")]
public virtual Task`1<ODataBatchResponseItem> SendRequestAsync(RequestDelegate handler);
}
public class Microsoft.AspNetCore.OData.Batch.OperationResponseItem : ODataBatchResponseItem {
    [CompilerGeneratedAttribute]
private HttpContext <Context>k__BackingField;
    public HttpContext Context { get; private set; }
    public OperationResponseItem(HttpContext context);
    [CompilerGeneratedAttribute]
public HttpContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(HttpContext value);
    public virtual Task WriteResponseAsync(ODataBatchWriter writer);
    internal virtual bool IsResponseSuccessful();
}
public class Microsoft.AspNetCore.OData.Batch.UnbufferedODataBatchHandler : ODataBatchHandler {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Batch.UnbufferedODataBatchHandler/<ProcessBatchAsync>d__0")]
public virtual Task ProcessBatchAsync(HttpContext context, RequestDelegate nextHandler);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Batch.UnbufferedODataBatchHandler/<ExecuteOperationAsync>d__1")]
public virtual Task`1<ODataBatchResponseItem> ExecuteOperationAsync(ODataBatchReader batchReader, Guid batchId, HttpRequest originalRequest, RequestDelegate handler);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Batch.UnbufferedODataBatchHandler/<ExecuteChangeSetAsync>d__2")]
public virtual Task`1<ODataBatchResponseItem> ExecuteChangeSetAsync(ODataBatchReader batchReader, Guid batchId, HttpRequest originalRequest, RequestDelegate handler);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.OData.Common.CollectionExtensions : object {
    [ExtensionAttribute]
public static void MergeWithReplace(Dictionary`2<TKey, TValue> target, Dictionary`2<TKey, TValue> source);
}
internal class Microsoft.AspNetCore.OData.Common.ExpressionLexer : object {
    [CompilerGeneratedAttribute]
private string <_rawText>k__BackingField;
    [CompilerGeneratedAttribute]
private int <_length>k__BackingField;
    private Nullable`1<char> _char;
    private ExpressionToken _token;
    private int _textPos;
    protected string _rawText { get; }
    protected int _length { get; }
    public ExpressionToken CurrentToken { get; public set; }
    protected bool IsValidWhiteSpace { get; }
    public ExpressionLexer(string expression);
    [CompilerGeneratedAttribute]
protected string get__rawText();
    [CompilerGeneratedAttribute]
protected int get__length();
    public ExpressionToken get_CurrentToken();
    public void set_CurrentToken(ExpressionToken value);
    public ExpressionToken NextToken();
    public void ValidateToken(ExpressionTokenKind kind);
    protected virtual bool get_IsValidWhiteSpace();
    protected virtual ExpressionToken ReadNextToken(Exception& error);
    protected virtual void AdvanceToNextOccurenceOf(char endingValue);
    private void AdvanceThroughBalancedExpression(char startingCharacter, char endingCharacter);
    private void ParseLiteral();
    protected void NextChar();
    private void SetTextPos(int pos);
    protected void ParseWhitespace();
}
internal class Microsoft.AspNetCore.OData.Common.ExpressionToken : ValueType {
    public ExpressionTokenKind Kind;
    public string Text;
    public int Position;
}
internal enum Microsoft.AspNetCore.OData.Common.ExpressionTokenKind : Enum {
    public int value__;
    public static ExpressionTokenKind Unknown;
    public static ExpressionTokenKind TextEnd;
    public static ExpressionTokenKind Literal;
    public static ExpressionTokenKind Comma;
    public static ExpressionTokenKind Equal;
}
internal class Microsoft.AspNetCore.OData.Common.FastPropertyAccessor`1 : PropertyAccessor`1<TStructuralType> {
    private bool _isCollection;
    private PropertyInfo _property;
    private Action`2<TStructuralType, object> _setter;
    private Func`2<object, object> _getter;
    public FastPropertyAccessor`1(PropertyInfo property);
    public virtual object GetValue(TStructuralType instance);
    public virtual void SetValue(TStructuralType instance, object value);
}
internal class Microsoft.AspNetCore.OData.Common.KeyValuePairParser : object {
    public static IDictionary`2<string, string> Parse(string expression);
    public static bool TryParse(string expression, IDictionary`2& pairs);
}
internal class Microsoft.AspNetCore.OData.Common.ListWrapperCollection`1 : Collection`1<T> {
    private List`1<T> _items;
    internal List`1<T> ItemsList { get; }
    internal ListWrapperCollection`1(List`1<T> list);
    internal List`1<T> get_ItemsList();
}
internal static class Microsoft.AspNetCore.OData.Common.ODataVersionConstraint : object {
    internal static string ODataServiceVersionHeader;
    internal static string ODataMaxServiceVersionHeader;
    internal static string ODataMinServiceVersionHeader;
    internal static ODataVersion DefaultODataVersion;
}
internal abstract class Microsoft.AspNetCore.OData.Common.PropertyAccessor`1 : object {
    [CompilerGeneratedAttribute]
private PropertyInfo <Property>k__BackingField;
    public PropertyInfo Property { get; private set; }
    protected PropertyAccessor`1(PropertyInfo property);
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
private void set_Property(PropertyInfo value);
    public void Copy(TStructuralType from, TStructuralType to);
    public abstract virtual object GetValue(TStructuralType instance);
    public abstract virtual void SetValue(TStructuralType instance, object value);
}
internal class Microsoft.AspNetCore.OData.Common.PropertyHelper : object {
    private static ConcurrentDictionary`2<Type, PropertyHelper[]> _reflectionCache;
    private Func`2<object, object> _valueGetter;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private static MethodInfo _callPropertyGetterOpenGenericMethod;
    private static MethodInfo _callPropertyGetterByReferenceOpenGenericMethod;
    private static MethodInfo _callPropertySetterOpenGenericMethod;
    public string Name { get; protected set; }
    public PropertyHelper(PropertyInfo property);
    private static PropertyHelper();
    public static Action`2<TDeclaringType, object> MakeFastPropertySetter(PropertyInfo propertyInfo);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected virtual void set_Name(string value);
    public object GetValue(object instance);
    public static PropertyHelper[] GetProperties(object instance);
    public static Func`2<object, object> MakeFastPropertyGetter(PropertyInfo propertyInfo);
    private static PropertyHelper CreateInstance(PropertyInfo property);
    private static object CallPropertyGetter(Func`2<TDeclaringType, TValue> getter, object this);
    private static object CallPropertyGetterByReference(ByRefFunc`2<TDeclaringType, TValue> getter, object this);
    private static void CallPropertySetter(Action`2<TDeclaringType, TValue> setter, object this, object value);
    protected static PropertyHelper[] GetProperties(object instance, Func`2<PropertyInfo, PropertyHelper> createPropertyHelper, ConcurrentDictionary`2<Type, PropertyHelper[]> cache);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.OData.Common.StringExtensions : object {
    [ExtensionAttribute]
public static string UnescapeBackSlashUriString(string uriString);
    [ExtensionAttribute]
public static string EscapeBackSlashUriString(string uriString);
    [ExtensionAttribute]
internal static string NormalizeHttpMethod(string method);
    [ExtensionAttribute]
internal static bool IsValidTemplateLiteral(string literalText);
}
internal class Microsoft.AspNetCore.OData.Common.TimeZoneInfoHelper : object {
    public static DateTimeOffset ConvertToDateTimeOffset(DateTime dateTime);
    public static DateTimeOffset ConvertToDateTimeOffset(DateTime dateTime, TimeZoneInfo timeZone);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.OData.Common.TypeHelper : object {
    [ExtensionAttribute]
public static bool IsDynamicTypeWrapper(Type type);
    [ExtensionAttribute]
public static bool IsDeltaSetWrapper(Type type, Type& entityType);
    [ExtensionAttribute]
public static bool IsSelectExpandWrapper(Type type, Type& entityType);
    [ExtensionAttribute]
public static bool IsComputeWrapper(Type type, Type& entityType);
    private static bool IsTypeWrapper(Type wrappedType, Type type, Type& entityType);
    public static Type GetInnerElementType(Type clrType);
    public static Type GetUnderlyingTypeOrSelf(Type type);
    public static bool IsDateTime(Type clrType);
    [ExtensionAttribute]
public static bool IsDateOnly(Type clrType);
    [ExtensionAttribute]
public static bool IsTimeOnly(Type clrType);
    public static bool IsTimeSpan(Type clrType);
    public static bool IsTypeAssignableFrom(Type clrType, Type fromType);
    public static Type GetReflectedType(MemberInfo memberInfo);
    public static bool IsEnum(Type clrType);
    [ExtensionAttribute]
public static bool IsNullable(Type clrType);
    public static Type ToNullable(Type clrType);
    public static bool IsCollection(Type clrType);
    public static bool IsCollection(Type clrType, Type& elementType);
    internal static bool IsDictionary(Type clrType);
    internal static IEdmTypeReference GetUntypedEdmType(Type clrType);
    internal static Type GetImplementedIEnumerableType(Type type);
    internal static IEnumerable`1<Type> GetLoadedTypes(IAssemblyResolver assembliesResolver);
    internal static Type GetTaskInnerTypeOrSelf(Type type);
    internal static bool TryGetInstance(Type type, object value, Object& instance);
    private static Type GetInnerGenericType(Type interfaceType);
}
public abstract class Microsoft.AspNetCore.OData.Deltas.Delta : DynamicObject {
    public DeltaItemKind Kind { get; }
    public abstract virtual DeltaItemKind get_Kind();
    public abstract virtual void Clear();
    public abstract virtual bool TrySetPropertyValue(string name, object value);
    public abstract virtual bool TryGetPropertyValue(string name, Object& value);
    public abstract virtual bool TryGetPropertyType(string name, Type& type);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public abstract virtual IEnumerable`1<string> GetChangedPropertyNames();
    public abstract virtual IEnumerable`1<string> GetUnchangedPropertyNames();
    public abstract virtual IDictionary`2<string, object> GetDeltaNestedNavigationProperties();
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNetCore.OData.Deltas.Delta`1 : Delta {
    private static ConcurrentDictionary`2<Type, Dictionary`2<string, PropertyAccessor`1<T>>> _propertyCache;
    private Dictionary`2<string, PropertyAccessor`1<T>> _allProperties;
    private List`1<string> _updatableProperties;
    private HashSet`1<string> _changedProperties;
    private IDictionary`2<string, object> _deltaNestedResources;
    private T _instance;
    private Type _structuredType;
    private bool _isComplexType;
    private PropertyInfo _dynamicDictionaryPropertyinfo;
    private HashSet`1<string> _changedDynamicProperties;
    private IDictionary`2<string, object> _dynamicDictionaryCache;
    public DeltaItemKind Kind { get; }
    public Type StructuredType { get; }
    public Type ExpectedClrType { get; }
    public IList`1<string> UpdatableProperties { get; }
    public bool IsComplexType { get; }
    public Delta`1(Type structuralType);
    public Delta`1(Type structuralType, IEnumerable`1<string> updatableProperties);
    public Delta`1(Type structuralType, IEnumerable`1<string> updatableProperties, PropertyInfo dynamicDictionaryPropertyInfo);
    public Delta`1(Type structuralType, IEnumerable`1<string> updatableProperties, PropertyInfo dynamicDictionaryPropertyInfo, bool isComplexType);
    private static Delta`1();
    public virtual DeltaItemKind get_Kind();
    public virtual Type get_StructuredType();
    public virtual Type get_ExpectedClrType();
    public IList`1<string> get_UpdatableProperties();
    public bool get_IsComplexType();
    public virtual void Clear();
    public virtual bool TrySetPropertyValue(string name, object value);
    public virtual bool TryGetPropertyValue(string name, Object& value);
    internal bool TryGetNestedPropertyValue(string name, Object& value);
    public virtual bool TryGetPropertyType(string name, Type& type);
    public T GetInstance();
    public virtual IEnumerable`1<string> GetChangedPropertyNames();
    public virtual IEnumerable`1<string> GetUnchangedPropertyNames();
    public virtual IDictionary`2<string, object> GetDeltaNestedNavigationProperties();
    public void CopyChangedValues(T original);
    public void CopyUnchangedValues(T original);
    public T Patch(T original);
    public void Put(T original);
    private object ReAssignComplexDerivedType(object originalValue, Type newType, Type originalType, Type declaredType);
    private static void CopyDynamicPropertyDictionary(IDictionary`2<string, object> source, IDictionary`2<string, object> dest, PropertyInfo dynamicPropertyInfo, T targetEntity);
    private static IDictionary`2<string, object> GetDynamicPropertyDictionary(PropertyInfo propertyInfo, T entity, bool create);
    private static bool TryGetPropertyRef(T structural, string propertyName, Object& propertyRef);
    private void Reset(Type structuralType);
    private void InitializeProperties(IEnumerable`1<string> updatableProperties);
    private static bool IsIgnoredProperty(bool isTypeDataContract, PropertyInfo propertyInfo);
    private void CopyChangedDynamicValues(T targetEntity);
    private void CopyUnchangedDynamicValues(T targetEntity);
    private bool TrySetPropertyValueInternal(string name, object value);
    private bool TrySetNestedResourceInternal(string name, object deltaNestedResource);
    [CompilerGeneratedAttribute]
private PropertyAccessor`1<T> <CopyChangedValues>b__35_0(string s);
    [CompilerGeneratedAttribute]
private PropertyAccessor`1<T> <CopyUnchangedValues>b__36_0(string s);
}
internal class Microsoft.AspNetCore.OData.Deltas.DeltaDeletedLink`1 : DeltaLinkBase`1<T> {
    public DeltaItemKind Kind { get; }
    public DeltaDeletedLink`1(Type structuralType);
    public virtual DeltaItemKind get_Kind();
}
public class Microsoft.AspNetCore.OData.Deltas.DeltaDeletedResource`1 : Delta`1<T> {
    [CompilerGeneratedAttribute]
private Uri <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DeltaDeletedEntryReason> <Reason>k__BackingField;
    public Uri Id { get; public set; }
    public Nullable`1<DeltaDeletedEntryReason> Reason { get; public set; }
    public DeltaItemKind Kind { get; }
    public DeltaDeletedResource`1(Type structuralType);
    public DeltaDeletedResource`1(Type structuralType, IEnumerable`1<string> updatableProperties);
    public DeltaDeletedResource`1(Type structuralType, IEnumerable`1<string> updatableProperties, PropertyInfo dynamicDictionaryPropertyInfo);
    public DeltaDeletedResource`1(Type structuralType, IEnumerable`1<string> updatableProperties, PropertyInfo dynamicDictionaryPropertyInfo, bool isComplexType);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Id(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DeltaDeletedEntryReason> get_Reason();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Reason(Nullable`1<DeltaDeletedEntryReason> value);
    public virtual DeltaItemKind get_Kind();
}
internal static class Microsoft.AspNetCore.OData.Deltas.DeltaHelper : object {
    public static bool IsDeltaOfT(Type type);
    public static bool IsDeltaResourceSet(object result);
}
public enum Microsoft.AspNetCore.OData.Deltas.DeltaItemKind : Enum {
    public int value__;
    public static DeltaItemKind Resource;
    public static DeltaItemKind DeletedResource;
    public static DeltaItemKind DeltaDeletedLink;
    public static DeltaItemKind DeltaLink;
    public static DeltaItemKind Unknown;
}
internal class Microsoft.AspNetCore.OData.Deltas.DeltaLink`1 : DeltaLinkBase`1<T> {
    public DeltaItemKind Kind { get; }
    public DeltaLink`1(Type structuralType);
    public virtual DeltaItemKind get_Kind();
}
internal abstract class Microsoft.AspNetCore.OData.Deltas.DeltaLinkBase`1 : object {
    [CompilerGeneratedAttribute]
private Type <StructuredType>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Relationship>k__BackingField;
    public DeltaItemKind Kind { get; }
    public Type StructuredType { get; }
    public Type ExpectedClrType { get; }
    public Uri Source { get; public set; }
    public Uri Target { get; public set; }
    public string Relationship { get; public set; }
    protected DeltaLinkBase`1(Type structuralType);
    public abstract virtual DeltaItemKind get_Kind();
    [CompilerGeneratedAttribute]
public virtual Type get_StructuredType();
    public virtual Type get_ExpectedClrType();
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Source();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Source(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Target();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Target(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Relationship();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Relationship(string value);
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNetCore.OData.Deltas.DeltaSet`1 : Collection`1<IDeltaSetItem> {
    public Type StructuredType { get; }
    public Type ExpectedClrType { get; }
    public sealed virtual Type get_StructuredType();
    public sealed virtual Type get_ExpectedClrType();
}
public interface Microsoft.AspNetCore.OData.Deltas.IDelta {
    public abstract virtual IEnumerable`1<string> GetChangedPropertyNames();
    public abstract virtual IEnumerable`1<string> GetUnchangedPropertyNames();
    public abstract virtual IDictionary`2<string, object> GetDeltaNestedNavigationProperties();
    public abstract virtual bool TrySetPropertyValue(string name, object value);
    public abstract virtual bool TryGetPropertyValue(string name, Object& value);
    public abstract virtual bool TryGetPropertyType(string name, Type& type);
    public abstract virtual void Clear();
}
internal interface Microsoft.AspNetCore.OData.Deltas.IDeltaDeletedLink {
}
public interface Microsoft.AspNetCore.OData.Deltas.IDeltaDeletedResource {
    public Uri Id { get; public set; }
    public Nullable`1<DeltaDeletedEntryReason> Reason { get; public set; }
    public abstract virtual Uri get_Id();
    public abstract virtual void set_Id(Uri value);
    public abstract virtual Nullable`1<DeltaDeletedEntryReason> get_Reason();
    public abstract virtual void set_Reason(Nullable`1<DeltaDeletedEntryReason> value);
}
internal interface Microsoft.AspNetCore.OData.Deltas.IDeltaLink {
}
internal interface Microsoft.AspNetCore.OData.Deltas.IDeltaLinkBase {
    public Uri Source { get; public set; }
    public Uri Target { get; public set; }
    public string Relationship { get; public set; }
    public abstract virtual Uri get_Source();
    public abstract virtual void set_Source(Uri value);
    public abstract virtual Uri get_Target();
    public abstract virtual void set_Target(Uri value);
    public abstract virtual string get_Relationship();
    public abstract virtual void set_Relationship(string value);
}
public interface Microsoft.AspNetCore.OData.Deltas.IDeltaSet {
}
public interface Microsoft.AspNetCore.OData.Deltas.IDeltaSetItem {
    public DeltaItemKind Kind { get; }
    public abstract virtual DeltaItemKind get_Kind();
}
public interface Microsoft.AspNetCore.OData.Deltas.ITypedDelta {
    public Type StructuredType { get; }
    public Type ExpectedClrType { get; }
    public abstract virtual Type get_StructuredType();
    public abstract virtual Type get_ExpectedClrType();
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.OData.Edm.AutoSelectExpandHelper : object {
    [ExtensionAttribute]
public static bool HasAutoSelectProperty(IEdmModel edmModel, IEdmStructuredType structuredType, IEdmProperty property);
    [ExtensionAttribute]
public static bool HasAutoExpandProperty(IEdmModel edmModel, IEdmStructuredType structuredType, IEdmProperty property);
    [ExtensionAttribute]
private static bool HasAutoExpandProperty(IEdmModel edmModel, IEdmStructuredType structuredType, IEdmProperty pathProperty, ISet`1<IEdmStructuredType> visited);
    [ExtensionAttribute]
public static IList`1<SelectModelPath> GetAutoSelectPaths(IEdmModel edmModel, IEdmStructuredType structuredType, IEdmProperty pathProperty, ModelBoundQuerySettings querySettings);
    [ExtensionAttribute]
public static IList`1<ExpandModelPath> GetAutoExpandPaths(IEdmModel edmModel, IEdmStructuredType structuredType, IEdmProperty property, bool isSelectPresent, ModelBoundQuerySettings querySettings);
    public static bool IsAutoExpand(IEdmProperty navigationProperty, IEdmProperty pathProperty, IEdmStructuredType pathStructuredType, IEdmModel edmModel, bool isSelectPresent, ModelBoundQuerySettings querySettings);
    public static bool IsAutoSelect(IEdmProperty property, IEdmProperty pathProperty, IEdmStructuredType pathStructuredType, IEdmModel edmModel, ModelBoundQuerySettings querySettings);
    [ExtensionAttribute]
private static bool CanExpand(IEdmModel edmModel, IEdmStructuredType structuredType, IEdmProperty property);
    [ExtensionAttribute]
private static void GetAutoExpandPaths(IEdmModel edmModel, IEdmStructuredType structuredType, IEdmProperty pathProperty, Stack`1<IEdmElement> nodes, ISet`1<IEdmStructuredType> visited, IList`1<ExpandModelPath> results, bool isSelectPresent, ModelBoundQuerySettings querySettings);
}
internal class Microsoft.AspNetCore.OData.Edm.BindableOperationFinder : object {
    private Dictionary`2<IEdmEntityType, List`1<IEdmOperation>> _map;
    private Dictionary`2<IEdmEntityType, List`1<IEdmOperation>> _collectionMap;
    public BindableOperationFinder(IEdmModel model);
    public virtual IEnumerable`1<IEdmOperation> FindOperations(IEdmEntityType entityType);
    public virtual IEnumerable`1<IEdmOperation> FindOperationsBoundToCollection(IEdmEntityType entityType);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Edm.BindableOperationFinder/<GetTypeHierarchy>d__5")]
private static IEnumerable`1<IEdmEntityType> GetTypeHierarchy(IEdmEntityType entityType);
    private IEnumerable`1<IEdmOperation> FindDeclaredOperations(IEdmEntityType entityType);
    private IEnumerable`1<IEdmOperation> FindDeclaredOperationsBoundToCollection(IEdmEntityType entityType);
}
internal class Microsoft.AspNetCore.OData.Edm.BindingPathHelper : object {
    public static bool MatchBindingPath(IEdmPathExpression bindingPath, IList`1<ODataSegmentTemplate> parsedSegments);
}
internal class Microsoft.AspNetCore.OData.Edm.ContainmentPathBuilder : object {
    private List`1<ODataPathSegment> _segments;
    public ODataPath TryComputeCanonicalContainingPath(ODataPath path);
    private void RemovePathSegmentsAfterTheLastNavigationProperty();
    private void RemoveRedundantContainingPathSegments();
    private void RemoveAllTypeCasts();
    private void AddTypeCastsIfNecessary();
    private static IEdmEntityType GetTargetEntityType(ODataPathSegment segment);
}
public class Microsoft.AspNetCore.OData.Edm.CustomAggregateMethodAnnotation : object {
    private Dictionary`2<string, IDictionary`2<Type, MethodInfo>> _tokenToMethodMap;
    public CustomAggregateMethodAnnotation AddMethod(string methodToken, IDictionary`2<Type, MethodInfo> methods);
    public bool GetMethodInfo(string methodToken, Type returnType, MethodInfo& methodInfo);
}
public class Microsoft.AspNetCore.OData.Edm.DefaultODataTypeMapper : object {
    internal static DefaultODataTypeMapper Default;
    private static IDictionary`2<Type, IEdmPrimitiveTypeReference> ClrPrimitiveTypes;
    private static IDictionary`2<IEdmPrimitiveType, ValueTuple`2<Type, Type>> EdmPrimitiveTypes;
    private ConcurrentDictionary`2<IEdmModel, TypeCacheItem> _cache;
    private static DefaultODataTypeMapper();
    public virtual IEdmPrimitiveTypeReference GetEdmPrimitiveType(Type clrType);
    public virtual Type GetClrPrimitiveType(IEdmPrimitiveType primitiveType, bool nullable);
    public virtual IEdmTypeReference GetEdmTypeReference(IEdmModel edmModel, Type clrType);
    private IEdmType GetEdmType(IEdmModel edmModel, Type clrType, bool testCollections);
    public virtual Type GetClrType(IEdmModel edmModel, IEdmType edmType, bool nullable, IAssemblyResolver assembliesResolver);
    internal static Type FindClrType(IEdmModel edmModel, IEdmType edmType, IAssemblyResolver assembliesResolver);
    private static Type ExtractGenericInterface(Type queryType, Type interfaceType);
    private static IEnumerable`1<Type> GetMatchingTypes(string edmFullName, IAssemblyResolver assembliesResolver);
    private static void BuildTypeMapping(EdmPrimitiveTypeKind primitiveKind, bool isStandard);
    private static void BuildValueTypeMapping(EdmPrimitiveTypeKind primitiveKind, bool isStandard);
    private static void BuildReferenceTypeMapping(EdmPrimitiveTypeKind primitiveKind, bool isStandard);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.OData.Edm.EdmClrTypeMapExtensions : object {
    [ExtensionAttribute]
public static IEdmPrimitiveTypeReference GetEdmPrimitiveTypeReference(Type clrType);
    [ExtensionAttribute]
public static IEdmPrimitiveTypeReference GetEdmPrimitiveTypeReference(IEdmModel edmModel, Type clrType);
    [ExtensionAttribute]
public static Type GetClrPrimitiveType(IEdmModel edmModel, IEdmPrimitiveTypeReference edmPrimitiveType);
    [ExtensionAttribute]
public static Type IsNonstandardEdmPrimitive(IEdmModel edmModel, Type clrType, Boolean& isNonstandardEdmPrimitive);
    [ExtensionAttribute]
public static IEdmTypeReference GetEdmTypeReference(IEdmModel edmModel, Type clrType);
    [ExtensionAttribute]
public static IEdmType GetEdmType(IEdmModel edmModel, Type clrType);
    [ExtensionAttribute]
public static Type GetClrType(IEdmModel edmModel, IEdmTypeReference edmTypeReference);
    [ExtensionAttribute]
public static Type GetClrType(IEdmModel edmModel, IEdmTypeReference edmTypeReference, IAssemblyResolver assembliesResolver);
    [ExtensionAttribute]
public static Type GetClrType(IEdmModel edmModel, IEdmType edmType);
    [ExtensionAttribute]
public static Type GetClrType(IEdmModel edmModel, IEdmType edmType, IAssemblyResolver assembliesResolver);
    [ExtensionAttribute]
internal static string EdmFullName(Type clrType);
    [ExtensionAttribute]
internal static string EdmName(Type clrType);
    private static string MangleClrTypeName(Type type);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.OData.Edm.EdmHelpers : object {
    [ExtensionAttribute]
public static IEdmStructuredTypeReference ToStructuredTypeReference(IEdmTypeReference edmTypeReference);
    [ExtensionAttribute]
public static bool IsStructuredOrUntypedStructuredCollection(IEdmTypeReference edmTypeReference);
    [ExtensionAttribute]
public static bool IsStructuredOrUntypedStructured(IEdmTypeReference edmTypeReference);
    [ExtensionAttribute]
public static bool IsStructuredOrUntyped(IEdmTypeReference edmTypeReference);
    [ExtensionAttribute]
public static bool IsCollectionUntyped(IEdmTypeReference typeReference);
    [ExtensionAttribute]
public static bool IsUntypedOrCollectionUntyped(IEdmTypeReference typeReference);
    [ExtensionAttribute]
public static IEdmTypeReference GetElementTypeOrSelf(IEdmTypeReference typeReference);
    [ExtensionAttribute]
public static IEdmType GetElementType(IEdmTypeReference edmTypeReference);
    [ExtensionAttribute]
public static IEdmCollectionType ToCollection(IEdmType edmType, bool isNullable);
    [ExtensionAttribute]
public static IEdmTypeReference ToEdmTypeReference(IEdmType edmType, bool isNullable);
    public static bool IsTopLimitExceeded(IEdmProperty property, IEdmStructuredType structuredType, IEdmModel edmModel, int top, DefaultQueryConfigurations defaultQueryConfigs, Int32& maxTop);
    public static bool IsNotCountable(IEdmProperty property, IEdmStructuredType structuredType, IEdmModel edmModel, bool enableCount);
    public static bool IsNotFilterable(IEdmProperty edmProperty, IEdmProperty pathEdmProperty, IEdmStructuredType pathEdmStructuredType, IEdmModel edmModel, bool enableFilter);
    public static bool IsNotSortable(IEdmProperty edmProperty, IEdmProperty pathEdmProperty, IEdmStructuredType pathEdmStructuredType, IEdmModel edmModel, bool enableOrderBy);
    public static bool IsNotSelectable(IEdmProperty edmProperty, IEdmProperty pathEdmProperty, IEdmStructuredType pathEdmStructuredType, IEdmModel edmModel, bool enableSelect);
    public static bool IsNotNavigable(IEdmProperty edmProperty, IEdmModel edmModel);
    public static bool IsNotExpandable(IEdmProperty edmProperty, IEdmModel edmModel);
    public static bool IsExpandable(string propertyName, IEdmProperty property, IEdmStructuredType structuredType, IEdmModel edmModel, ExpandConfiguration& expandConfiguration);
    [ExtensionAttribute]
public static ModelBoundQuerySettings GetModelBoundQuerySettingsOrNull(IEdmModel edmModel, IEdmStructuredType structuredType, IEdmProperty property);
    [ExtensionAttribute]
public static ModelBoundQuerySettings GetModelBoundQuerySettings(IEdmModel edmModel, IEdmProperty property, IEdmStructuredType structuredType, DefaultQueryConfigurations defaultQueryConfigs);
    [ExtensionAttribute]
private static ModelBoundQuerySettings GetModelBoundQuerySettings(IEdmModel edmModel, T key, DefaultQueryConfigurations defaultQueryConfigs);
    private static ModelBoundQuerySettings GetMergedPropertyQuerySettings(ModelBoundQuerySettings propertyQuerySettings, ModelBoundQuerySettings propertyTypeQuerySettings);
    internal static QueryableRestrictionsAnnotation GetPropertyRestrictions(IEdmProperty edmProperty, IEdmModel edmModel);
    [ExtensionAttribute]
internal static void SetOperationTitleAnnotation(IEdmModel model, IEdmOperation action, OperationTitleAnnotation title);
    [ExtensionAttribute]
internal static OperationTitleAnnotation GetOperationTitleAnnotation(IEdmModel model, IEdmOperation operation);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.OData.Edm.EdmModelAnnotationExtensions : object {
    [ExtensionAttribute]
internal static IList`1<string> GetAcceptableMediaTypes(IEdmModel model, IEdmVocabularyAnnotatable target);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmStructuralProperty> GetConcurrencyProperties(IEdmModel model, IEdmNavigationSource navigationSource);
    [ExtensionAttribute]
public static ClrEnumMemberAnnotation GetClrEnumMemberAnnotation(IEdmModel edmModel, IEdmEnumType enumType);
    [ExtensionAttribute]
public static string GetClrPropertyName(IEdmModel edmModel, IEdmProperty edmProperty);
    [ExtensionAttribute]
public static PropertyInfo GetDynamicPropertyDictionary(IEdmModel edmModel, IEdmStructuredType edmType);
    [ExtensionAttribute]
public static string GetModelName(IEdmModel model);
    [ExtensionAttribute]
public static void SetModelName(IEdmModel model, string name);
    [ExtensionAttribute]
public static IODataTypeMapper GetTypeMapper(IEdmModel model);
    [ExtensionAttribute]
public static void SetTypeMapper(IEdmModel model, IODataTypeMapper mapper);
    [ExtensionAttribute]
public static IEnumerable`1<IDictionary`2<string, IEdmPathExpression>> GetAlternateKeys(IEdmModel model, IEdmEntityType entityType);
    [ExtensionAttribute]
private static bool TryGetAlternateKeys(IEdmModel model, IEdmEntityType entityType, IEdmTerm term, IEnumerable`1& alternateKeys);
    private static IEnumerable`1<IDictionary`2<string, IEdmPathExpression>> GetDeclaredAlternateKeysForType(IEdmModel model, IEdmEntityType type, IEdmTerm term);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.OData.Edm.EdmModelExtensions : object {
    [ExtensionAttribute]
public static IEdmCollectionTypeReference ResolveResourceSetType(IEdmModel model, ODataResourceSetBase resourceSet);
    [ExtensionAttribute]
public static IEdmStructuredTypeReference ResolveResourceType(IEdmModel model, ODataResourceBase resource);
    [ExtensionAttribute]
public static ICollection`1<string> GetAllProperties(IEdmModel model, IEdmStructuredType structuredType);
    [ExtensionAttribute]
public static IDictionary`2<string, IEdmProperty> ResolveAlternateKeyProperties(IEdmModel model, KeySegment keySegment);
    [ExtensionAttribute]
public static IEdmProperty ResolveProperty(IEdmStructuredType structuredType, string propertyName);
    [ExtensionAttribute]
public static IEdmSchemaType ResolveType(IEdmModel model, string typeName);
    [ExtensionAttribute]
public static IEdmProperty FindProperty(IEdmModel model, IEdmStructuredType structuredType, IEdmPathExpression path);
    [ExtensionAttribute]
public static IEdmNavigationSource ResolveNavigationSource(IEdmModel model, string identifier, bool enableCaseInsensitive);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmOperationImport> ResolveOperationImports(IEdmModel model, string identifier, bool enableCaseInsensitive);
    [ExtensionAttribute]
internal static IEdmEntitySetBase GetTargetEntitySet(IEdmOperation operation, IEdmNavigationSource source, IEdmModel model);
    [ExtensionAttribute]
public static IEdmNavigationSource FindNavigationTarget(IEdmNavigationSource navigationSource, IEdmNavigationProperty navigationProperty, IList`1<ODataSegmentTemplate> parsedSegments, IEdmPathExpression& bindingPath);
    [ExtensionAttribute]
public static bool IsEntityOrEntityCollectionType(IEdmType edmType, IEdmEntityType& entityType);
    [ExtensionAttribute]
internal static bool IsResourceOrCollectionResource(IEdmTypeReference edmType);
    [ExtensionAttribute]
public static bool IsEnumOrCollectionEnum(IEdmTypeReference edmType);
    [ExtensionAttribute]
public static IEdmStructuredType FindTypeInInheritance(IEdmStructuredType structuralType, IEdmModel model, string typeName, bool caseInsensitive);
    private static string GetName(IEdmStructuredType type);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmAction> GetAvailableActions(IEdmModel model, IEdmEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmFunction> GetAvailableFunctions(IEdmModel model, IEdmEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmOperation> GetAvailableOperationsBoundToCollection(IEdmModel model, IEdmEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmOperation> GetAvailableOperations(IEdmModel model, IEdmEntityType entityType, bool boundToCollection);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.OData.Edm.EdmModelLinkBuilderExtensions : object {
    [ExtensionAttribute]
public static void HasIdLink(IEdmModel model, IEdmNavigationSource navigationSource, SelfLinkBuilder`1<Uri> idLinkBuilder);
    [ExtensionAttribute]
public static void HasEditLink(IEdmModel model, IEdmNavigationSource navigationSource, SelfLinkBuilder`1<Uri> editLinkBuilder);
    [ExtensionAttribute]
public static void HasReadLink(IEdmModel model, IEdmNavigationSource navigationSource, SelfLinkBuilder`1<Uri> readLinkBuilder);
    [ExtensionAttribute]
public static void HasNavigationPropertyLink(IEdmModel model, IEdmNavigationSource navigationSource, IEdmNavigationProperty navigationProperty, NavigationLinkBuilder linkBuilder);
    [ExtensionAttribute]
public static NavigationSourceLinkBuilderAnnotation GetNavigationSourceLinkBuilder(IEdmModel model, IEdmNavigationSource navigationSource);
    [ExtensionAttribute]
public static void SetNavigationSourceLinkBuilder(IEdmModel model, IEdmNavigationSource navigationSource, NavigationSourceLinkBuilderAnnotation navigationSourceLinkBuilder);
    [ExtensionAttribute]
public static OperationLinkBuilder GetOperationLinkBuilder(IEdmModel model, IEdmOperation operation);
    [ExtensionAttribute]
public static void SetOperationLinkBuilder(IEdmModel model, IEdmOperation operation, OperationLinkBuilder operationLinkBuilder);
    private static OperationLinkBuilder GetDefaultOperationLinkBuilder(IEdmOperation operation);
}
internal static class Microsoft.AspNetCore.OData.Edm.EdmPrimitiveHelper : object {
    public static object ConvertPrimitiveValue(object value, Type type);
    public static object ConvertPrimitiveValue(object value, Type type, TimeZoneInfo timeZoneInfo);
}
internal class Microsoft.AspNetCore.OData.Edm.EdmUntypedHelpers : object {
    public static EdmCollectionTypeReference NullableUntypedCollectionReference;
    private static EdmUntypedHelpers();
}
public class Microsoft.AspNetCore.OData.Edm.EntitySelfLinks : object {
    [CompilerGeneratedAttribute]
private Uri <IdLink>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <EditLink>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ReadLink>k__BackingField;
    public Uri IdLink { get; public set; }
    public Uri EditLink { get; public set; }
    public Uri ReadLink { get; public set; }
    [CompilerGeneratedAttribute]
public Uri get_IdLink();
    [CompilerGeneratedAttribute]
public void set_IdLink(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_EditLink();
    [CompilerGeneratedAttribute]
public void set_EditLink(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_ReadLink();
    [CompilerGeneratedAttribute]
public void set_ReadLink(Uri value);
}
internal class Microsoft.AspNetCore.OData.Edm.ExpandModelPath : List`1<IEdmElement> {
    private string _navigationPath;
    [CompilerGeneratedAttribute]
private IEdmNavigationProperty <Navigation>k__BackingField;
    public IEdmNavigationProperty Navigation { get; private set; }
    public string NavigationPropertyPath { get; }
    public string ExpandPath { get; }
    public ExpandModelPath(IEnumerable`1<IEdmElement> nodes);
    [CompilerGeneratedAttribute]
public IEdmNavigationProperty get_Navigation();
    [CompilerGeneratedAttribute]
private void set_Navigation(IEdmNavigationProperty value);
    public string get_NavigationPropertyPath();
    public string get_ExpandPath();
    private void ValidateAndCalculateElementPath();
}
public interface Microsoft.AspNetCore.OData.Edm.IODataTypeMapper {
    public abstract virtual IEdmPrimitiveTypeReference GetEdmPrimitiveType(Type clrType);
    public abstract virtual Type GetClrPrimitiveType(IEdmPrimitiveType primitiveType, bool nullable);
    public abstract virtual IEdmTypeReference GetEdmTypeReference(IEdmModel edmModel, Type clrType);
    public abstract virtual Type GetClrType(IEdmModel edmModel, IEdmType edmType, bool nullable, IAssemblyResolver assembliesResolver);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.OData.Edm.IODataTypeMapperExtensions : object {
    [ExtensionAttribute]
public static Type GetPrimitiveType(IODataTypeMapper mapper, IEdmPrimitiveTypeReference primitiveType);
    [ExtensionAttribute]
public static IEdmType GetEdmType(IODataTypeMapper mapper, IEdmModel edmModel, Type clrType);
    [ExtensionAttribute]
public static Type GetClrType(IODataTypeMapper mapper, IEdmModel edmModel, IEdmTypeReference edmType);
    [ExtensionAttribute]
public static Type GetClrType(IODataTypeMapper mapper, IEdmModel edmModel, IEdmTypeReference edmType, IAssemblyResolver assembliesResolver);
}
public class Microsoft.AspNetCore.OData.Edm.ModelNameAnnotation : object {
    [CompilerGeneratedAttribute]
private string <ModelName>k__BackingField;
    public string ModelName { get; }
    public ModelNameAnnotation(string name);
    [CompilerGeneratedAttribute]
public string get_ModelName();
}
public class Microsoft.AspNetCore.OData.Edm.NavigationLinkBuilder : object {
    [CompilerGeneratedAttribute]
private Func`3<ResourceContext, IEdmNavigationProperty, Uri> <Factory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FollowsConventions>k__BackingField;
    public Func`3<ResourceContext, IEdmNavigationProperty, Uri> Factory { get; }
    public bool FollowsConventions { get; }
    public NavigationLinkBuilder(Func`3<ResourceContext, IEdmNavigationProperty, Uri> navigationLinkFactory, bool followsConventions);
    [CompilerGeneratedAttribute]
public Func`3<ResourceContext, IEdmNavigationProperty, Uri> get_Factory();
    [CompilerGeneratedAttribute]
public bool get_FollowsConventions();
}
public class Microsoft.AspNetCore.OData.Edm.NavigationSourceLinkBuilderAnnotation : object {
    private Dictionary`2<IEdmNavigationProperty, NavigationLinkBuilder> _navigationPropertyLinkBuilderLookup;
    [CompilerGeneratedAttribute]
private SelfLinkBuilder`1<Uri> <IdLinkBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private SelfLinkBuilder`1<Uri> <ReadLinkBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private SelfLinkBuilder`1<Uri> <EditLinkBuilder>k__BackingField;
    public SelfLinkBuilder`1<Uri> IdLinkBuilder { get; public set; }
    public SelfLinkBuilder`1<Uri> ReadLinkBuilder { get; public set; }
    public SelfLinkBuilder`1<Uri> EditLinkBuilder { get; public set; }
    public NavigationSourceLinkBuilderAnnotation(IEdmNavigationSource navigationSource, IEdmModel model);
    [CompilerGeneratedAttribute]
public SelfLinkBuilder`1<Uri> get_IdLinkBuilder();
    [CompilerGeneratedAttribute]
public void set_IdLinkBuilder(SelfLinkBuilder`1<Uri> value);
    [CompilerGeneratedAttribute]
public SelfLinkBuilder`1<Uri> get_ReadLinkBuilder();
    [CompilerGeneratedAttribute]
public void set_ReadLinkBuilder(SelfLinkBuilder`1<Uri> value);
    [CompilerGeneratedAttribute]
public SelfLinkBuilder`1<Uri> get_EditLinkBuilder();
    [CompilerGeneratedAttribute]
public void set_EditLinkBuilder(SelfLinkBuilder`1<Uri> value);
    public void AddNavigationPropertyLinkBuilder(IEdmNavigationProperty navigationProperty, NavigationLinkBuilder linkBuilder);
    public virtual EntitySelfLinks BuildEntitySelfLinks(ResourceContext instanceContext, ODataMetadataLevel metadataLevel);
    public virtual Uri BuildIdLink(ResourceContext instanceContext, ODataMetadataLevel metadataLevel);
    internal Uri BuildIdLink(ResourceContext instanceContext);
    public virtual Uri BuildEditLink(ResourceContext instanceContext, ODataMetadataLevel metadataLevel, Uri idLink);
    internal Uri BuildEditLink(ResourceContext instanceContext);
    public virtual Uri BuildReadLink(ResourceContext instanceContext, ODataMetadataLevel metadataLevel, Uri editLink);
    internal Uri BuildReadLink(ResourceContext instanceContext);
    public virtual Uri BuildNavigationLink(ResourceContext instanceContext, IEdmNavigationProperty navigationProperty, ODataMetadataLevel metadataLevel);
    internal Uri BuildNavigationLink(ResourceContext instanceContext, IEdmNavigationProperty navigationProperty);
}
internal class Microsoft.AspNetCore.OData.Edm.ODataNullValueExtensions : object {
    public static ODataNullValue NullValue;
    private static ODataNullValueExtensions();
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.OData.Edm.OperationHelper : object {
    [ExtensionAttribute]
public static IDictionary`2<string, string> VerifyAndBuildParameterMappings(IEdmFunction function, IDictionary`2<string, string> parameters);
    [ExtensionAttribute]
public static IDictionary`2<string, string> BuildParameterMappings(IEnumerable`1<OperationSegmentParameter> parameters, string segment);
    [ExtensionAttribute]
public static IDictionary`2<string, string> GetFunctionParamterMappings(IEdmFunction function);
    [ExtensionAttribute]
public static IDictionary`2<string, string> GetFunctionParamterMappings(IEdmFunctionImport functionImport);
    [ExtensionAttribute]
public static ValueTuple`2<IList`1<IEdmActionImport>, IList`1<IEdmFunctionImport>> SplitOperationImports(IEnumerable`1<IEdmOperationImport> operationImports);
}
public class Microsoft.AspNetCore.OData.Edm.OperationLinkBuilder : object {
    [CompilerGeneratedAttribute]
private Func`2<ResourceContext, Uri> <LinkFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<ResourceSetContext, Uri> <FeedLinkFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FollowsConventions>k__BackingField;
    internal Func`2<ResourceContext, Uri> LinkFactory { get; }
    internal Func`2<ResourceSetContext, Uri> FeedLinkFactory { get; }
    public bool FollowsConventions { get; }
    public OperationLinkBuilder(Func`2<ResourceContext, Uri> linkFactory, bool followsConventions);
    public OperationLinkBuilder(Func`2<ResourceSetContext, Uri> linkFactory, bool followsConventions);
    [CompilerGeneratedAttribute]
internal Func`2<ResourceContext, Uri> get_LinkFactory();
    [CompilerGeneratedAttribute]
internal Func`2<ResourceSetContext, Uri> get_FeedLinkFactory();
    [CompilerGeneratedAttribute]
public bool get_FollowsConventions();
    public virtual Uri BuildLink(ResourceContext context);
    public virtual Uri BuildLink(ResourceSetContext context);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.OData.Edm.OrderByClauseHelpers : object {
    public static string OrderByGlobalNameKey;
    public static string OrderByPropertyNamePrefix;
    private static OrderByClauseHelpers();
    [ExtensionAttribute]
public static List`1<OrderByClause> ToList(OrderByClause clause);
    [ExtensionAttribute]
public static bool IsTopLevelSingleProperty(OrderByClause clause, IEdmProperty& property, String& propertyName);
    [ExtensionAttribute]
public static string RemoveDirection(string orderby, string direction);
}
internal class Microsoft.AspNetCore.OData.Edm.SelectModelPath : List`1<IEdmElement> {
    private string _selectPath;
    public string SelectPath { get; }
    public SelectModelPath(IEnumerable`1<IEdmElement> nodes);
    public string get_SelectPath();
    private void ValidateAndCalculateElementPath();
}
public class Microsoft.AspNetCore.OData.Edm.SelfLinkBuilder`1 : object {
    [CompilerGeneratedAttribute]
private Func`2<ResourceContext, T> <Factory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FollowsConventions>k__BackingField;
    public Func`2<ResourceContext, T> Factory { get; }
    public bool FollowsConventions { get; }
    public SelfLinkBuilder`1(Func`2<ResourceContext, T> linkFactory, bool followsConventions);
    [CompilerGeneratedAttribute]
public Func`2<ResourceContext, T> get_Factory();
    [CompilerGeneratedAttribute]
public bool get_FollowsConventions();
}
internal class Microsoft.AspNetCore.OData.Edm.TypeCacheItem : object {
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<Type, IEdmTypeReference> <ClrToEdmTypeCache>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<IEdmType, ValueTuple`2<Type, Type>> <EdmToClrTypeCache>k__BackingField;
    public ConcurrentDictionary`2<Type, IEdmTypeReference> ClrToEdmTypeCache { get; }
    public ConcurrentDictionary`2<IEdmType, ValueTuple`2<Type, Type>> EdmToClrTypeCache { get; }
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<Type, IEdmTypeReference> get_ClrToEdmTypeCache();
    public bool TryFindEdmType(Type clrType, IEdmTypeReference& edmType);
    public void AddClrToEdmMap(Type clrType, IEdmTypeReference edmType);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<IEdmType, ValueTuple`2<Type, Type>> get_EdmToClrTypeCache();
    public bool TryFindClrType(IEdmType edmType, bool isNullable, Type& clrType);
    public void AddEdmToClrMap(IEdmType edmType, bool isNullable, Type clrType);
}
[ExcludeFromCodeCoverageAttribute]
internal static class Microsoft.AspNetCore.OData.Error : object {
    internal static string Format(string format, Object[] args);
    internal static ArgumentException Argument(string messageFormat, Object[] messageArgs);
    internal static ArgumentException Argument(string parameterName, string messageFormat, Object[] messageArgs);
    internal static ArgumentNullException PropertyNull();
    internal static ArgumentNullException ArgumentNull(string parameterName);
    internal static ArgumentNullException ArgumentNull(string parameterName, string messageFormat, Object[] messageArgs);
    internal static ArgumentException ArgumentNullOrEmpty(string parameterName);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string parameterName, object actualValue, string messageFormat, Object[] messageArgs);
    internal static ArgumentOutOfRangeException ArgumentMustBeGreaterThanOrEqualTo(string parameterName, object actualValue, object minValue);
    internal static ArgumentOutOfRangeException ArgumentMustBeLessThanOrEqualTo(string parameterName, object actualValue, object maxValue);
    internal static KeyNotFoundException KeyNotFound();
    internal static KeyNotFoundException KeyNotFound(string messageFormat, Object[] messageArgs);
    internal static ObjectDisposedException ObjectDisposed(string messageFormat, Object[] messageArgs);
    internal static OperationCanceledException OperationCanceled();
    internal static OperationCanceledException OperationCanceled(string messageFormat, Object[] messageArgs);
    internal static ArgumentException InvalidEnumArgument(string parameterName, int invalidValue, Type enumClass);
    internal static InvalidOperationException InvalidOperation(string messageFormat, Object[] messageArgs);
    internal static InvalidOperationException InvalidOperation(Exception innerException, string messageFormat, Object[] messageArgs);
    internal static NotSupportedException NotSupported(string messageFormat, Object[] messageArgs);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
internal static class Microsoft.AspNetCore.OData.Extensions.ActionDescriptorExtensions : object {
    private static string ModelKeyPrefix;
    private static object SyncLock;
    private static ActionDescriptorExtensions();
    [ExtensionAttribute]
internal static IEdmModel GetEdmModel(ActionDescriptor actionDescriptor, HttpRequest request, Type entityClrType);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.OData.Extensions.ActionModelExtensions : object {
    [ExtensionAttribute]
public static bool IsODataIgnored(ActionModel action);
    [ExtensionAttribute]
public static bool HasParameter(ActionModel action, string parameterName);
    [ExtensionAttribute]
public static T GetAttribute(ActionModel action);
    [ExtensionAttribute]
public static bool HasODataKeyParameter(ActionModel action, IEdmEntityType entityType, bool enablePropertyNameCaseInsensitive, string keyPrefix);
    [ExtensionAttribute]
public static void AddSelector(ActionModel action, string httpMethods, string prefix, IEdmModel model, ODataPathTemplate path, ODataRouteOptions options);
    internal static SelectorModel UpdateSelectorModel(SelectorModel selectorModel, String[] httpMethods, bool acceptPreflight);
    internal static SelectorModel CreateSelectorModel(ActionModel actionModel, String[] httpMethods, bool acceptPreflight);
    private static void AddRange(IList`1<T> list, IEnumerable`1<T> items);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.OData.Extensions.ControllerModelExtensions : object {
    [ExtensionAttribute]
public static bool IsODataIgnored(ControllerModel controller);
    [ExtensionAttribute]
public static bool HasAttribute(ControllerModel controller);
    [ExtensionAttribute]
public static T GetAttribute(ControllerModel controller);
}
internal static class Microsoft.AspNetCore.OData.Extensions.GetNextPageHelper : object {
    internal static Uri GetNextPageLink(Uri requestUri, IEnumerable`1<KeyValuePair`2<string, string>> queryParameters, int pageSize, object instance, Func`2<object, string> objectToSkipTokenValue);
    internal static Uri GetNextPageLink(Uri requestUri, int pageSize, object instance, Func`2<object, string> objectToSkipTokenValue);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.OData.Extensions.HttpContextExtensions : object {
    [ExtensionAttribute]
public static IODataFeature ODataFeature(HttpContext httpContext);
    [ExtensionAttribute]
public static IODataBatchFeature ODataBatchFeature(HttpContext httpContext);
    [ExtensionAttribute]
public static ODataOptions ODataOptions(HttpContext httpContext);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.OData.Extensions.HttpRequestExtensions : object {
    [ExtensionAttribute]
public static IODataFeature ODataFeature(HttpRequest request);
    [ExtensionAttribute]
public static IODataBatchFeature ODataBatchFeature(HttpRequest request);
    [ExtensionAttribute]
public static ODataOptions ODataOptions(HttpRequest request);
    [ExtensionAttribute]
public static IEdmModel GetModel(HttpRequest request);
    [ExtensionAttribute]
public static TimeZoneInfo GetTimeZoneInfo(HttpRequest request);
    [ExtensionAttribute]
public static bool IsNoDollarQueryEnable(HttpRequest request);
    [ExtensionAttribute]
public static bool IsCountRequest(HttpRequest request);
    [ExtensionAttribute]
public static ODataMessageReaderSettings GetReaderSettings(HttpRequest request);
    [ExtensionAttribute]
public static ODataMessageWriterSettings GetWriterSettings(HttpRequest request);
    [ExtensionAttribute]
public static IODataDeserializerProvider GetDeserializerProvider(HttpRequest request);
    [ExtensionAttribute]
public static Uri GetNextPageLink(HttpRequest request, int pageSize, object instance, Func`2<object, string> objectToSkipTokenValue);
    [ExtensionAttribute]
public static string CreateETag(HttpRequest request, IDictionary`2<string, object> properties, TimeZoneInfo timeZone);
    [ExtensionAttribute]
public static IETagHandler GetETagHandler(HttpRequest request);
    [ExtensionAttribute]
internal static bool IsODataQueryRequest(HttpRequest request);
    [ExtensionAttribute]
public static IServiceProvider GetRouteServices(HttpRequest request);
    [ExtensionAttribute]
public static IServiceProvider CreateRouteServices(HttpRequest request, string routePrefix);
    [ExtensionAttribute]
public static void ClearRouteServices(HttpRequest request, bool dispose);
    [ExtensionAttribute]
private static IServiceScope CreateRequestScope(HttpRequest request, string routePrefix);
    [ExtensionAttribute]
public static ODataVersion GetODataVersion(HttpRequest request);
    [ExtensionAttribute]
internal static ODataQueryOptions GetQueryOptions(HttpRequest request);
    [ExtensionAttribute]
internal static Nullable`1<ODataVersion> ODataServiceVersion(HttpRequest request);
    [ExtensionAttribute]
internal static Nullable`1<ODataVersion> ODataMaxServiceVersion(HttpRequest request);
    [ExtensionAttribute]
internal static Nullable`1<ODataVersion> ODataMinServiceVersion(HttpRequest request);
    private static Nullable`1<ODataVersion> GetODataVersionFromHeader(IHeaderDictionary headers, string headerName);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.OData.Extensions.HttpResponseExtensions : object {
    [ExtensionAttribute]
public static bool IsSuccessStatusCode(HttpResponse response);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.OData.Extensions.LinkGeneratorHelpers : object {
    [ExtensionAttribute]
public static string CreateODataLink(HttpRequest request, ODataPathSegment[] segments);
    [ExtensionAttribute]
public static string CreateODataLink(HttpRequest request, IList`1<ODataPathSegment> segments);
    private static bool TryProcessPrefixTemplate(HttpRequest request, RoutePattern routePattern, String& path);
    private static RouteValueDictionary GetAmbientValues(HttpContext httpContext);
    private static string CombinePath(string baseAddress, string path);
}
internal static class Microsoft.AspNetCore.OData.Extensions.RequestPreferenceHelpers : object {
    public static string PreferHeaderName;
    public static string ReturnContentHeaderValue;
    public static string ReturnNoContentHeaderValue;
    public static string ODataMaxPageSize;
    public static string MaxPageSize;
    internal static bool RequestPrefersReturnContent(IHeaderDictionary headers);
    internal static bool RequestPrefersReturnNoContent(IHeaderDictionary headers);
    internal static bool RequestPrefersMaxPageSize(IHeaderDictionary headers, Int32& pageSize);
    private static int GetMaxPageSize(IEnumerable`1<string> preferences, string preferenceHeaderName);
    internal static string GetRequestPreferHeader(IHeaderDictionary headers);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.AspNetCore.OData.Extensions.SerializableErrorExtensions : object {
    [ExtensionAttribute]
public static ODataError CreateODataError(SerializableError serializableError);
    [ExtensionAttribute]
private static ODataInnerError ToODataInnerError(Dictionary`2<string, object> errors);
    [ExtensionAttribute]
private static string ConvertModelStateErrors(IReadOnlyDictionary`2<string, object> errors);
    [ExtensionAttribute]
private static ICollection`1<ODataErrorDetail> CreateErrorDetails(IReadOnlyDictionary`2<string, object> errors);
    private static IEnumerable`1<ODataErrorDetail> CreateErrorDetails(KeyValuePair`2<string, object> pair);
    [ExtensionAttribute]
private static TValue GetPropertyValue(IReadOnlyDictionary`2<string, object> error, string errorKey);
}
public static class Microsoft.AspNetCore.OData.Extensions.SerializableErrorKeys : object {
    public static string MessageKey;
    public static string MessageDetailKey;
    public static string ModelStateKey;
    public static string ExceptionMessageKey;
    public static string ExceptionTypeKey;
    public static string StackTraceKey;
    public static string InnerExceptionKey;
    public static string MessageLanguageKey;
    public static string ErrorCodeKey;
    private static SerializableErrorKeys();
}
internal static class Microsoft.AspNetCore.OData.Formatter.ContentIdHelpers : object {
    public static string ResolveContentId(string url, IDictionary`2<string, string> contentIdToLocationMapping);
    private static bool IsContentIdCharacter(char c);
}
internal static class Microsoft.AspNetCore.OData.Formatter.ConventionsHelpers : object {
    public static IEnumerable`1<KeyValuePair`2<string, object>> GetEntityKey(ResourceContext resourceContext);
    private static object GetKeyValue(IEdmProperty key, ResourceContext resourceContext);
    public static object ConvertValue(object value, TimeZoneInfo timeZone, IEdmModel model);
    public static string GetEntityKeyValue(ResourceContext resourceContext);
    public static string GetUriRepresentationForValue(object value);
    public static string GetUriRepresentationForValue(object value, TimeZoneInfo timeZone);
    private static string GetUriRepresentationForKeyValue(IEdmProperty key, ResourceContext resourceContext);
}
internal class Microsoft.AspNetCore.OData.Formatter.DefaultODataETagHandler : object {
    private static string NullLiteralInETag;
    private static char Separator;
    public sealed virtual EntityTagHeaderValue CreateETag(IDictionary`2<string, object> properties, TimeZoneInfo timeZoneInfo);
    public sealed virtual IDictionary`2<string, object> ParseETag(EntityTagHeaderValue etagHeaderValue);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.OData.Formatter.Deserialization.CollectionDeserializationHelpers : object {
    private static Type[] _emptyTypeArray;
    private static Object[] _emptyObjectArray;
    private static MethodInfo _toArrayMethodInfo;
    private static CollectionDeserializationHelpers();
    [ExtensionAttribute]
public static void AddToCollection(IEnumerable items, IEnumerable collection, Type elementType, Type resourceType, string propertyName, Type propertyType, ODataDeserializerContext context);
    [ExtensionAttribute]
public static void AddToCollection(IEnumerable items, IEnumerable collection, Type elementType, string paramName, Type paramType, ODataDeserializerContext context);
    [ExtensionAttribute]
private static void AddToCollectionCore(IEnumerable items, IEnumerable collection, Type elementType, IList list, MethodInfo addMethod, ODataDeserializerContext context);
    [ExtensionAttribute]
public static void Clear(IEnumerable collection, string propertyName, Type resourceType);
    public static bool TryCreateInstance(Type collectionType, IEdmCollectionTypeReference edmCollectionType, Type elementType, IEnumerable& instance);
    public static IEnumerable ToArray(IEnumerable value, Type elementType);
}
internal static class Microsoft.AspNetCore.OData.Formatter.Deserialization.DeserializationHelpers : object {
    internal static void ApplyProperty(ODataProperty property, IEdmStructuredTypeReference resourceType, object resource, IODataDeserializerProvider deserializerProvider, ODataDeserializerContext readContext);
    internal static void SetDynamicProperty(object resource, IEdmStructuredTypeReference resourceType, EdmTypeKind propertyKind, string propertyName, object propertyValue, IEdmTypeReference propertyType, IEdmModel model);
    internal static void SetDeclaredProperty(object resource, EdmTypeKind propertyKind, string propertyName, object propertyValue, IEdmProperty edmProperty, ODataDeserializerContext readContext);
    internal static void SetCollectionProperty(object resource, IEdmProperty edmProperty, object value, string propertyName, ODataDeserializerContext context);
    internal static void SetCollectionProperty(object resource, string propertyName, IEdmCollectionTypeReference edmPropertyType, object value, bool clearCollection, ODataDeserializerContext context);
    internal static void SetDynamicCollectionProperty(object resource, string propertyName, object value, IEdmCollectionTypeReference edmPropertyType, IEdmStructuredType structuredType, IEdmModel model);
    internal static void SetProperty(object resource, string propertyName, object value);
    internal static void SetDynamicProperty(object resource, string propertyName, object value, IEdmStructuredType structuredType, IEdmModel model);
    internal static object ConvertValue(object oDataValue, IEdmTypeReference& propertyType, IODataDeserializerProvider deserializerProvider, ODataDeserializerContext readContext, EdmTypeKind& typeKind);
    internal static Type GetPropertyType(object resource, string propertyName);
    private static bool CanSetProperty(object resource, string propertyName);
    private static object GetProperty(object resource, string propertyName);
    private static object ConvertCollectionValue(ODataCollectionValue collection, IEdmTypeReference& propertyType, IODataDeserializerProvider deserializerProvider, ODataDeserializerContext readContext);
    private static object ConvertPrimitiveValue(string value);
    private static object ConvertEnumValue(ODataEnumValue enumValue, IEdmTypeReference& propertyType, IODataDeserializerProvider deserializerProvider, ODataDeserializerContext readContext);
    internal static string GetCollectionElementTypeName(string typeName, bool isNested);
}
internal static class Microsoft.AspNetCore.OData.Formatter.Deserialization.EnumDeserializationHelpers : object {
    public static object ConvertEnumValue(object value, Type type);
}
public interface Microsoft.AspNetCore.OData.Formatter.Deserialization.IODataDeserializer {
    public ODataPayloadKind ODataPayloadKind { get; }
    public abstract virtual ODataPayloadKind get_ODataPayloadKind();
    public abstract virtual Task`1<object> ReadAsync(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
}
public interface Microsoft.AspNetCore.OData.Formatter.Deserialization.IODataDeserializerProvider {
    public abstract virtual IODataDeserializer GetODataDeserializer(Type type, HttpRequest request);
    public abstract virtual IODataEdmTypeDeserializer GetEdmTypeDeserializer(IEdmTypeReference edmType, bool isDelta);
}
public interface Microsoft.AspNetCore.OData.Formatter.Deserialization.IODataEdmTypeDeserializer {
    public abstract virtual object ReadInline(object item, IEdmTypeReference edmType, ODataDeserializerContext readContext);
}
public class Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataActionPayloadDeserializer : ODataDeserializer {
    private static MethodInfo _castMethodInfo;
    [CompilerGeneratedAttribute]
private IODataDeserializerProvider <DeserializerProvider>k__BackingField;
    public IODataDeserializerProvider DeserializerProvider { get; private set; }
    public ODataActionPayloadDeserializer(IODataDeserializerProvider deserializerProvider);
    private static ODataActionPayloadDeserializer();
    [CompilerGeneratedAttribute]
public IODataDeserializerProvider get_DeserializerProvider();
    [CompilerGeneratedAttribute]
private void set_DeserializerProvider(IODataDeserializerProvider value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataActionPayloadDeserializer/<ReadAsync>d__6")]
public virtual Task`1<object> ReadAsync(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
    internal static IEdmAction GetAction(ODataDeserializerContext readContext);
}
public class Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataCollectionDeserializer : ODataEdmTypeDeserializer {
    private static MethodInfo _castMethodInfo;
    public ODataCollectionDeserializer(IODataDeserializerProvider deserializerProvider);
    private static ODataCollectionDeserializer();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataCollectionDeserializer/<ReadAsync>d__2")]
public virtual Task`1<object> ReadAsync(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
    public sealed virtual object ReadInline(object item, IEdmTypeReference edmType, ODataDeserializerContext readContext);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataCollectionDeserializer/<ReadCollectionValue>d__4")]
public virtual IEnumerable ReadCollectionValue(ODataCollectionValue collectionValue, IEdmTypeReference elementType, ODataDeserializerContext readContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataCollectionDeserializer/<ReadCollectionAsync>d__5")]
internal static Task`1<ODataCollectionValue> ReadCollectionAsync(ODataCollectionReader reader);
}
public class Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataDeltaResourceSetDeserializer : ODataEdmTypeDeserializer {
    public ODataDeltaResourceSetDeserializer(IODataDeserializerProvider deserializerProvider);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataDeltaResourceSetDeserializer/<ReadAsync>d__1")]
public virtual Task`1<object> ReadAsync(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
    public virtual object ReadInline(object item, IEdmTypeReference edmType, ODataDeserializerContext readContext);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataDeltaResourceSetDeserializer/<ReadDeltaResourceSet>d__3")]
public virtual IEnumerable ReadDeltaResourceSet(ODataDeltaResourceSetWrapper deltaResourceSet, IEdmStructuredTypeReference elementType, ODataDeserializerContext readContext);
    public virtual object ReadDeltaResource(ODataResourceWrapper resource, IEdmStructuredTypeReference elementType, ODataDeserializerContext readContext);
    internal virtual object ReadDeltaDeletedLink(ODataDeltaDeletedLinkWrapper deletedLink, IEdmStructuredTypeReference elementType, ODataDeserializerContext readContext);
    internal virtual object ReadDeltaLink(ODataDeltaLinkWrapper link, IEdmStructuredTypeReference elementType, ODataDeserializerContext readContext);
}
public abstract class Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataDeserializer : object {
    [CompilerGeneratedAttribute]
private ODataPayloadKind <ODataPayloadKind>k__BackingField;
    public ODataPayloadKind ODataPayloadKind { get; private set; }
    protected ODataDeserializer(ODataPayloadKind payloadKind);
    [CompilerGeneratedAttribute]
public sealed virtual ODataPayloadKind get_ODataPayloadKind();
    [CompilerGeneratedAttribute]
private void set_ODataPayloadKind(ODataPayloadKind value);
    public virtual Task`1<object> ReadAsync(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
}
public class Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataDeserializerContext : object {
    private Nullable`1<bool> _isDeltaOfT;
    private Nullable`1<bool> _isDeltaDeleted;
    private Nullable`1<bool> _isNoClrType;
    [CompilerGeneratedAttribute]
private Type <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmTypeReference <ResourceEdmType>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeZoneInfo <TimeZone>k__BackingField;
    public Type ResourceType { get; public set; }
    public IEdmTypeReference ResourceEdmType { get; public set; }
    public ODataPath Path { get; public set; }
    public IEdmModel Model { get; public set; }
    public HttpRequest Request { get; public set; }
    public TimeZoneInfo TimeZone { get; public set; }
    internal bool IsDeltaOfT { get; }
    internal bool IsDeltaDeleted { get; }
    internal bool IsNoClrType { get; }
    [CompilerGeneratedAttribute]
public Type get_ResourceType();
    [CompilerGeneratedAttribute]
public void set_ResourceType(Type value);
    [CompilerGeneratedAttribute]
public IEdmTypeReference get_ResourceEdmType();
    [CompilerGeneratedAttribute]
public void set_ResourceEdmType(IEdmTypeReference value);
    [CompilerGeneratedAttribute]
public ODataPath get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(ODataPath value);
    [CompilerGeneratedAttribute]
public IEdmModel get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(IEdmModel value);
    [CompilerGeneratedAttribute]
public HttpRequest get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(HttpRequest value);
    [CompilerGeneratedAttribute]
public TimeZoneInfo get_TimeZone();
    [CompilerGeneratedAttribute]
public void set_TimeZone(TimeZoneInfo value);
    internal bool get_IsDeltaOfT();
    internal bool get_IsDeltaDeleted();
    internal bool get_IsNoClrType();
    internal IEdmTypeReference GetEdmType(Type type);
    internal ODataDeserializerContext CloneWithoutType();
}
public class Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataDeserializerProvider : object {
    private IServiceProvider _serviceProvider;
    public ODataDeserializerProvider(IServiceProvider serviceProvider);
    public virtual IODataEdmTypeDeserializer GetEdmTypeDeserializer(IEdmTypeReference edmType, bool isDelta);
    public virtual IODataDeserializer GetODataDeserializer(Type type, HttpRequest request);
    private static bool IsDelta(Type type);
}
public abstract class Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataEdmTypeDeserializer : ODataDeserializer {
    [CompilerGeneratedAttribute]
private IODataDeserializerProvider <DeserializerProvider>k__BackingField;
    public IODataDeserializerProvider DeserializerProvider { get; private set; }
    protected ODataEdmTypeDeserializer(ODataPayloadKind payloadKind);
    protected ODataEdmTypeDeserializer(ODataPayloadKind payloadKind, IODataDeserializerProvider deserializerProvider);
    [CompilerGeneratedAttribute]
public IODataDeserializerProvider get_DeserializerProvider();
    [CompilerGeneratedAttribute]
private void set_DeserializerProvider(IODataDeserializerProvider value);
    public virtual object ReadInline(object item, IEdmTypeReference edmType, ODataDeserializerContext readContext);
}
public class Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataEntityReferenceLinkDeserializer : ODataDeserializer {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataEntityReferenceLinkDeserializer/<ReadAsync>d__1")]
public virtual Task`1<object> ReadAsync(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
    private static Uri ResolveContentId(Uri uri, ODataDeserializerContext readContext);
}
public class Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataEnumDeserializer : ODataEdmTypeDeserializer {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataEnumDeserializer/<ReadAsync>d__1")]
public virtual Task`1<object> ReadAsync(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
    public virtual object ReadInline(object item, IEdmTypeReference edmType, ODataDeserializerContext readContext);
}
public class Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataPrimitiveDeserializer : ODataEdmTypeDeserializer {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataPrimitiveDeserializer/<ReadAsync>d__1")]
public virtual Task`1<object> ReadAsync(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
    public sealed virtual object ReadInline(object item, IEdmTypeReference edmType, ODataDeserializerContext readContext);
    public virtual object ReadPrimitive(ODataProperty primitiveProperty, ODataDeserializerContext readContext);
}
public class Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataResourceDeserializer : ODataEdmTypeDeserializer {
    private static Regex ContentIdReferencePattern;
    public ODataResourceDeserializer(IODataDeserializerProvider deserializerProvider);
    private static ODataResourceDeserializer();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataResourceDeserializer/<ReadAsync>d__2")]
public virtual Task`1<object> ReadAsync(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
    public sealed virtual object ReadInline(object item, IEdmTypeReference edmType, ODataDeserializerContext readContext);
    public virtual object ReadResource(ODataResourceWrapper resourceWrapper, IEdmStructuredTypeReference structuredType, ODataDeserializerContext readContext);
    public virtual object CreateResourceInstance(IEdmStructuredTypeReference structuredType, ODataDeserializerContext readContext);
    public virtual void ApplyDeletedResource(object resource, ODataResourceWrapper resourceWrapper, ODataDeserializerContext readContext);
    public virtual void ApplyNestedProperties(object resource, ODataResourceWrapper resourceWrapper, IEdmStructuredTypeReference structuredType, ODataDeserializerContext readContext);
    public virtual void ApplyNestedProperty(object resource, ODataNestedResourceInfoWrapper resourceInfoWrapper, IEdmStructuredTypeReference structuredType, ODataDeserializerContext readContext);
    public virtual void ApplyStructuralProperties(object resource, ODataResourceWrapper resourceWrapper, IEdmStructuredTypeReference structuredType, ODataDeserializerContext readContext);
    public virtual void ApplyStructuralProperty(object resource, ODataProperty structuralProperty, IEdmStructuredTypeReference structuredType, ODataDeserializerContext readContext);
    private void ApplyResourceProperties(object resource, ODataResourceWrapper resourceWrapper, IEdmStructuredTypeReference structuredType, ODataDeserializerContext readContext);
    private void ApplyResourceInNestedProperty(IEdmProperty nestedProperty, object resource, ODataResourceWrapper resourceWrapper, ODataDeserializerContext readContext);
    private void ApplyDynamicResourceInNestedProperty(string propertyName, object resource, IEdmStructuredTypeReference resourceStructuredType, ODataResourceWrapper resourceWrapper, ODataDeserializerContext readContext);
    private object ReadNestedResourceInline(ODataResourceWrapper resourceWrapper, IEdmTypeReference edmType, ODataDeserializerContext readContext);
    private void ApplyResourceSetInNestedProperty(IEdmProperty nestedProperty, object resource, ODataResourceSetWrapper resourceSetWrapper, ODataDeserializerContext readContext);
    private void ApplyDynamicResourceSetInNestedProperty(string propertyName, object resource, IEdmStructuredTypeReference structuredType, ODataResourceSetWrapper resourceSetWrapper, ODataDeserializerContext readContext);
    private object ReadNestedResourceSetInline(ODataResourceSetWrapper resourceSetWrapper, IEdmTypeReference edmType, ODataDeserializerContext readContext);
    private void ApplyNestedDeltaResourceSet(IEdmProperty nestedProperty, object resource, ODataDeltaResourceSetWrapper deltaResourceSetWrapper, ODataDeserializerContext readContext);
    private static ODataResourceSetWrapper CreateResourceSetWrapper(IEdmCollectionTypeReference edmPropertyType, ODataEntityReferenceLinkWrapper[] refLinks, ODataDeserializerContext readContext);
    private static ODataResourceWrapper CreateResourceWrapper(IEdmTypeReference edmPropertyType, ODataEntityReferenceLinkWrapper refLink, ODataDeserializerContext readContext);
    private ODataResourceWrapper UpdateResourceWrapper(ODataResourceWrapper resourceWrapper, ODataDeserializerContext readContext);
    private static IList`1<ODataProperty> CreateKeyProperties(Uri id, ODataDeserializerContext readContext);
}
public class Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataResourceSetDeserializer : ODataEdmTypeDeserializer {
    private static MethodInfo CastMethodInfo;
    public ODataResourceSetDeserializer(IODataDeserializerProvider deserializerProvider);
    private static ODataResourceSetDeserializer();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataResourceSetDeserializer/<ReadAsync>d__2")]
public virtual Task`1<object> ReadAsync(ODataMessageReader messageReader, Type type, ODataDeserializerContext readContext);
    public sealed virtual object ReadInline(object item, IEdmTypeReference edmType, ODataDeserializerContext readContext);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Deserialization.ODataResourceSetDeserializer/<ReadResourceSet>d__4")]
public virtual IEnumerable ReadResourceSet(ODataResourceSetWrapper resourceSet, IEdmStructuredTypeReference elementType, ODataDeserializerContext readContext);
    public virtual object ReadPrimitiveItem(ODataPrimitiveWrapper primitiveWrapper, IEdmTypeReference elementType, ODataDeserializerContext readContext);
    public virtual object ReadResourceItem(ODataResourceWrapper resourceWrapper, IEdmTypeReference elementType, ODataDeserializerContext readContext);
    public virtual object ReadResourceSetItem(ODataResourceSetWrapper resourceSetWrapper, IEdmTypeReference elementType, ODataDeserializerContext readContext);
    private static IList`1<ODataItemWrapper> GetItems(ODataResourceSetWrapper setWrapper);
    private IEdmTypeReference VerifyAndGetElementType(IEdmTypeReference edmType, ODataDeserializerContext readContext);
}
internal static class Microsoft.AspNetCore.OData.Formatter.EdmLibHelper : object {
    internal static IEdmTypeReference GetExpectedPayloadType(Type type, ODataPath path, IEdmModel model);
    internal static bool TryGetInnerTypeForDelta(Type& type);
}
internal class Microsoft.AspNetCore.OData.Formatter.EdmTypeReferenceEqualityComparer : object {
    public sealed virtual bool Equals(IEdmTypeReference x, IEdmTypeReference y);
    public sealed virtual int GetHashCode(IEdmTypeReference obj);
}
[AttributeUsageAttribute("2052")]
public class Microsoft.AspNetCore.OData.Formatter.FromODataBodyAttribute : ModelBinderAttribute {
}
[AttributeUsageAttribute("2052")]
public class Microsoft.AspNetCore.OData.Formatter.FromODataUriAttribute : ModelBinderAttribute {
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Microsoft.AspNetCore.OData.Formatter.LinkGenerationHelpers : object {
    [ExtensionAttribute]
public static Uri GenerateSelfLink(ResourceContext resourceContext, bool includeCast);
    [ExtensionAttribute]
public static Uri GenerateNavigationPropertyLink(ResourceContext resourceContext, IEdmNavigationProperty navigationProperty, bool includeCast);
    [ExtensionAttribute]
public static Uri GenerateActionLink(ResourceSetContext resourceSetContext, IEdmOperation action);
    [ExtensionAttribute]
internal static Uri GenerateActionLink(ResourceSetContext resourceSetContext, IEdmTypeReference bindingParameterType, IEdmOperation action);
    [ExtensionAttribute]
public static Uri GenerateFunctionLink(ResourceSetContext resourceSetContext, IEdmOperation function);
    [ExtensionAttribute]
internal static Uri GenerateFunctionLink(ResourceSetContext resourceSetContext, IEdmTypeReference bindingParameterType, IEdmOperation functionImport, IEnumerable`1<string> parameterNames);
    [ExtensionAttribute]
public static Uri GenerateActionLink(ResourceContext resourceContext, IEdmOperation action);
    [ExtensionAttribute]
internal static Uri GenerateActionLink(ResourceContext resourceContext, IEdmTypeReference bindingParameterType, IEdmOperation action);
    [ExtensionAttribute]
public static Uri GenerateFunctionLink(ResourceContext resourceContext, IEdmOperation function);
    [ExtensionAttribute]
internal static Uri GenerateFunctionLink(ResourceContext resourceContext, IEdmTypeReference bindingParameterType, IEdmOperation function, IEnumerable`1<string> parameterNames);
    [ExtensionAttribute]
internal static Uri GenerateFunctionLink(ResourceContext resourceContext, string bindingParameterType, string functionName, IEnumerable`1<string> parameterNames);
    [ExtensionAttribute]
internal static IList`1<ODataPathSegment> GenerateBaseODataPathSegments(ResourceContext resourceContext);
    private static void GenerateBaseODataPathSegments(ODataPath path, IEdmNavigationSource navigationSource, IList`1<ODataPathSegment> odataPath);
    [ExtensionAttribute]
private static void GenerateBaseODataPathSegmentsForEntity(ResourceContext resourceContext, IList`1<ODataPathSegment> odataPath);
    [ExtensionAttribute]
private static void GenerateBaseODataPathSegmentsForFeed(ResourceSetContext feedContext, IList`1<ODataPathSegment> odataPath);
    [ExtensionAttribute]
private static IList`1<ODataPathSegment> GenerateContainmentODataPathSegments(ResourceContext resourceContext);
}
internal interface Microsoft.AspNetCore.OData.Formatter.MediaType.IMediaTypeMappingCollection {
    public ICollection`1<MediaTypeMapping> MediaTypeMappings { get; }
    public abstract virtual ICollection`1<MediaTypeMapping> get_MediaTypeMappings();
}
public abstract class Microsoft.AspNetCore.OData.Formatter.MediaType.MediaTypeMapping : object {
    [CompilerGeneratedAttribute]
private MediaTypeHeaderValue <MediaType>k__BackingField;
    public MediaTypeHeaderValue MediaType { get; protected set; }
    protected MediaTypeMapping(string mediaType);
    [CompilerGeneratedAttribute]
public MediaTypeHeaderValue get_MediaType();
    [CompilerGeneratedAttribute]
protected void set_MediaType(MediaTypeHeaderValue value);
    public abstract virtual double TryMatchMediaType(HttpRequest request);
}
public class Microsoft.AspNetCore.OData.Formatter.MediaType.ODataBinaryValueMediaTypeMapping : ODataRawValueMediaTypeMapping {
    protected virtual bool IsMatch(PropertySegment propertySegment);
}
public class Microsoft.AspNetCore.OData.Formatter.MediaType.ODataCountMediaTypeMapping : MediaTypeMapping {
    internal static bool IsCountRequest(ODataPath path);
    public virtual double TryMatchMediaType(HttpRequest request);
}
public class Microsoft.AspNetCore.OData.Formatter.MediaType.ODataEnumValueMediaTypeMapping : ODataRawValueMediaTypeMapping {
    protected virtual bool IsMatch(PropertySegment propertySegment);
}
internal static class Microsoft.AspNetCore.OData.Formatter.MediaType.ODataMediaTypes : object {
    public static string ApplicationJson;
    public static string ApplicationJsonODataFullMetadata;
    public static string ApplicationJsonODataFullMetadataStreamingFalse;
    public static string ApplicationJsonODataFullMetadataStreamingTrue;
    public static string ApplicationJsonODataMinimalMetadata;
    public static string ApplicationJsonODataMinimalMetadataStreamingFalse;
    public static string ApplicationJsonODataMinimalMetadataStreamingTrue;
    public static string ApplicationJsonODataNoMetadata;
    public static string ApplicationJsonODataNoMetadataStreamingFalse;
    public static string ApplicationJsonODataNoMetadataStreamingTrue;
    public static string ApplicationJsonStreamingFalse;
    public static string ApplicationJsonStreamingTrue;
    public static string ApplicationJsonIeee754CompatibleTrue;
    public static string ApplicationJsonIeee754CompatibleFalse;
    public static string ApplicationJsonODataFullMetadataIeee754CompatibleTrue;
    public static string ApplicationJsonODataFullMetadataIeee754CompatibleFalse;
    public static string ApplicationJsonODataFullMetadataStreamingFalseIeee754CompatibleTrue;
    public static string ApplicationJsonODataFullMetadataStreamingFalseIeee754CompatibleFalse;
    public static string ApplicationJsonODataFullMetadataStreamingTrueIeee754CompatibleTrue;
    public static string ApplicationJsonODataFullMetadataStreamingTrueIeee754CompatibleFalse;
    public static string ApplicationJsonODataMinimalMetadataIeee754CompatibleTrue;
    public static string ApplicationJsonODataMinimalMetadataIeee754CompatibleFalse;
    public static string ApplicationJsonODataMinimalMetadataStreamingFalseIeee754CompatibleTrue;
    public static string ApplicationJsonODataMinimalMetadataStreamingFalseIeee754CompatibleFalse;
    public static string ApplicationJsonODataMinimalMetadataStreamingTrueIeee754CompatibleTrue;
    public static string ApplicationJsonODataMinimalMetadataStreamingTrueIeee754CompatibleFalse;
    public static string ApplicationJsonODataNoMetadataIeee754CompatibleTrue;
    public static string ApplicationJsonODataNoMetadataIeee754CompatibleFalse;
    public static string ApplicationJsonODataNoMetadataStreamingFalseIeee754CompatibleTrue;
    public static string ApplicationJsonODataNoMetadataStreamingFalseIeee754CompatibleFalse;
    public static string ApplicationJsonODataNoMetadataStreamingTrueIeee754CompatibleTrue;
    public static string ApplicationJsonODataNoMetadataStreamingTrueIeee754CompatibleFalse;
    public static string ApplicationJsonStreamingFalseIeee754CompatibleTrue;
    public static string ApplicationJsonStreamingFalseIeee754CompatibleFalse;
    public static string ApplicationJsonStreamingTrueIeee754CompatibleTrue;
    public static string ApplicationJsonStreamingTrueIeee754CompatibleFalse;
    public static string ApplicationXml;
    public static ODataMetadataLevel GetMetadataLevel(string mediaType, IEnumerable`1<KeyValuePair`2<string, string>> parameters);
}
public class Microsoft.AspNetCore.OData.Formatter.MediaType.ODataPrimitiveValueMediaTypeMapping : ODataRawValueMediaTypeMapping {
    protected virtual bool IsMatch(PropertySegment propertySegment);
}
public abstract class Microsoft.AspNetCore.OData.Formatter.MediaType.ODataRawValueMediaTypeMapping : MediaTypeMapping {
    protected ODataRawValueMediaTypeMapping(string mediaType);
    public virtual double TryMatchMediaType(HttpRequest request);
    protected abstract virtual bool IsMatch(PropertySegment propertySegment);
    internal static bool IsRawValueRequest(ODataPath path);
    private static PropertySegment GetProperty(ODataPath odataPath);
}
public class Microsoft.AspNetCore.OData.Formatter.MediaType.ODataStreamMediaTypeMapping : MediaTypeMapping {
    public virtual double TryMatchMediaType(HttpRequest request);
}
public class Microsoft.AspNetCore.OData.Formatter.MediaType.QueryStringMediaTypeMapping : MediaTypeMapping {
    [CompilerGeneratedAttribute]
private string <QueryStringParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryStringParameterValue>k__BackingField;
    public string QueryStringParameterName { get; private set; }
    public string QueryStringParameterValue { get; private set; }
    public QueryStringMediaTypeMapping(string queryStringParameterName, string mediaType);
    public QueryStringMediaTypeMapping(string queryStringParameterName, string queryStringParameterValue, string mediaType);
    [CompilerGeneratedAttribute]
public string get_QueryStringParameterName();
    [CompilerGeneratedAttribute]
private void set_QueryStringParameterName(string value);
    [CompilerGeneratedAttribute]
public string get_QueryStringParameterValue();
    [CompilerGeneratedAttribute]
private void set_QueryStringParameterValue(string value);
    public virtual double TryMatchMediaType(HttpRequest request);
    private bool DoesQueryStringMatch(IEnumerable`1<KeyValuePair`2<string, string>> queryString);
    [CompilerGeneratedAttribute]
private bool <TryMatchMediaType>b__10_3(KeyValuePair`2<string, string> kvp);
    [CompilerGeneratedAttribute]
private bool <DoesQueryStringMatch>b__11_0(KeyValuePair`2<string, string> kvp);
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNetCore.OData.Formatter.ODataActionParameters : Dictionary`2<string, object> {
}
internal class Microsoft.AspNetCore.OData.Formatter.ODataBodyModelBinder : object {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.ODataBodyModelBinder/<BindModelAsync>d__0")]
public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
    internal static ODataDeserializerContext BuildDeserializerContext(ModelBindingContext bindingContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.ODataBodyModelBinder/<ReadODataBodyAsync>d__2")]
public static Task`1<IDictionary`2<string, object>> ReadODataBodyAsync(ModelBindingContext bindingContext);
}
public class Microsoft.AspNetCore.OData.Formatter.ODataInputFormatter : TextInputFormatter {
    private ISet`1<ODataPayloadKind> _payloadKinds;
    [CompilerGeneratedAttribute]
private Func`2<HttpRequest, Uri> <BaseAddressFactory>k__BackingField;
    public Func`2<HttpRequest, Uri> BaseAddressFactory { get; public set; }
    public ODataInputFormatter(IEnumerable`1<ODataPayloadKind> payloadKinds);
    [CompilerGeneratedAttribute]
public Func`2<HttpRequest, Uri> get_BaseAddressFactory();
    [CompilerGeneratedAttribute]
public void set_BaseAddressFactory(Func`2<HttpRequest, Uri> value);
    public virtual IReadOnlyList`1<string> GetSupportedContentTypes(string contentType, Type objectType);
    public virtual bool CanRead(InputFormatterContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.ODataInputFormatter/<ReadRequestBodyAsync>d__8")]
public virtual Task`1<InputFormatterResult> ReadRequestBodyAsync(InputFormatterContext context, Encoding encoding);
    public static Uri GetDefaultBaseAddress(HttpRequest request);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.ODataInputFormatter/<ReadFromStreamAsync>d__10")]
internal static Task`1<object> ReadFromStreamAsync(Type type, object defaultValue, Uri baseAddress, ODataVersion version, HttpRequest request, IList`1<IDisposable> disposes);
    private static ODataDeserializerContext BuildDeserializerContext(HttpRequest request);
    private static void LoggerError(HttpContext context, Exception ex);
    private Uri GetBaseAddressInternal(HttpRequest request);
    private static IODataDeserializer GetDeserializer(HttpRequest request, Type type, IEdmTypeReference& expectedPayloadType);
}
public static class Microsoft.AspNetCore.OData.Formatter.ODataInputFormatterFactory : object {
    public static IList`1<ODataInputFormatter> Create();
    private static ODataInputFormatter CreateApplicationJson();
    private static ODataInputFormatter CreateApplicationXml();
    private static ODataInputFormatter CreateRawValue();
    private static ODataInputFormatter CreateFormatterWithoutMediaTypes(ODataPayloadKind[] payloadKinds);
    private static void AddSupportedEncodings(ODataInputFormatter formatter);
}
internal class Microsoft.AspNetCore.OData.Formatter.ODataMessageWrapper : object {
    private Stream _stream;
    private Dictionary`2<string, string> _headers;
    private IDictionary`2<string, string> _contentIdMapping;
    private static Regex ContentIdReferencePattern;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    public IEnumerable`1<KeyValuePair`2<string, string>> Headers { get; }
    public string Method { get; public set; }
    public Uri Url { get; public set; }
    public int StatusCode { get; public set; }
    public IServiceProvider ServiceProvider { get; public set; }
    public ODataMessageWrapper(Stream stream);
    public ODataMessageWrapper(Stream stream, Dictionary`2<string, string> headers);
    public ODataMessageWrapper(Stream stream, Dictionary`2<string, string> headers, IDictionary`2<string, string> contentIdMapping);
    private static ODataMessageWrapper();
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, string>> get_Headers();
    public sealed virtual string get_Method();
    public sealed virtual void set_Method(string value);
    public sealed virtual Uri get_Url();
    public sealed virtual void set_Url(Uri value);
    public sealed virtual int get_StatusCode();
    public sealed virtual void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public void set_ServiceProvider(IServiceProvider value);
    public sealed virtual string GetHeader(string headerName);
    public sealed virtual Stream GetStream();
    public sealed virtual Task`1<Stream> GetStreamAsync();
    public sealed virtual void SetHeader(string headerName, string headerValue);
    public sealed virtual Uri ConvertPayloadUri(Uri baseUri, Uri payloadUri);
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
}
internal static class Microsoft.AspNetCore.OData.Formatter.ODataMessageWrapperHelper : object {
    internal static ODataMessageWrapper Create(Stream stream, IHeaderDictionary headers);
    internal static ODataMessageWrapper Create(Stream stream, IHeaderDictionary headers, IServiceProvider container);
    internal static ODataMessageWrapper Create(Stream stream, IHeaderDictionary headers, IDictionary`2<string, string> contentIdMapping, IServiceProvider serviceProvider);
    internal static ODataMessageWrapper Create(Stream stream, IHeaderDictionary headers, IDictionary`2<string, string> contentIdMapping);
}
public enum Microsoft.AspNetCore.OData.Formatter.ODataMetadataLevel : Enum {
    public int value__;
    public static ODataMetadataLevel Minimal;
    public static ODataMetadataLevel Full;
    public static ODataMetadataLevel None;
}
internal class Microsoft.AspNetCore.OData.Formatter.ODataModelBinder : object {
    public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
    internal static object ConvertTo(ODataParameterValue parameterValue, ModelBindingContext bindingContext, IServiceProvider requestContainer);
    internal static ODataDeserializerContext BuildDeserializerContext(ModelBindingContext bindingContext, IEdmTypeReference edmTypeReference);
}
internal static class Microsoft.AspNetCore.OData.Formatter.ODataModelBinderConverter : object {
    private static MethodInfo EnumTryParseMethod;
    private static MethodInfo CastMethodInfo;
    private static ODataModelBinderConverter();
    public static object Convert(object graph, IEdmTypeReference edmTypeReference, Type clrType, string parameterName, ODataDeserializerContext readContext, IServiceProvider requestContainer);
    internal static object ConvertTo(string valueString, Type type, TimeZoneInfo timeZone, IEdmModel edmModel);
    private static object ConvertCollection(ODataCollectionValue collectionValue, IEdmTypeReference edmTypeReference, Type clrType, string parameterName, ODataDeserializerContext readContext, IServiceProvider requestContainer);
    internal static object ConvertResourceOrResourceSet(object oDataValue, IEdmTypeReference edmTypeReference, ODataDeserializerContext readContext);
    private static object ConvertResourceSet(ODataMessageReader oDataMessageReader, IEdmTypeReference edmTypeReference, ODataDeserializerContext readContext);
    private static object ConvertResource(ODataMessageReader oDataMessageReader, IEdmTypeReference edmTypeReference, ODataDeserializerContext readContext);
}
public class Microsoft.AspNetCore.OData.Formatter.ODataOutputFormatter : TextOutputFormatter {
    private ISet`1<ODataPayloadKind> _payloadKinds;
    [CompilerGeneratedAttribute]
private Func`2<HttpRequest, Uri> <BaseAddressFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<MediaTypeMapping> <MediaTypeMappings>k__BackingField;
    public Func`2<HttpRequest, Uri> BaseAddressFactory { get; public set; }
    public ICollection`1<MediaTypeMapping> MediaTypeMappings { get; }
    public ODataOutputFormatter(IEnumerable`1<ODataPayloadKind> payloadKinds);
    [CompilerGeneratedAttribute]
public Func`2<HttpRequest, Uri> get_BaseAddressFactory();
    [CompilerGeneratedAttribute]
public void set_BaseAddressFactory(Func`2<HttpRequest, Uri> value);
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<MediaTypeMapping> get_MediaTypeMappings();
    public virtual IReadOnlyList`1<string> GetSupportedContentTypes(string contentType, Type objectType);
    public virtual bool CanWriteResult(OutputFormatterCanWriteContext context);
    public virtual void WriteResponseHeaders(OutputFormatterWriteContext context);
    public virtual Task WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding);
    public static Uri GetDefaultBaseAddress(HttpRequest request);
    internal static bool TryGetCharSet(MediaTypeHeaderValue mediaType, IEnumerable`1<string> acceptCharsetValues, String& charSet);
    internal static bool TryGetContentHeader(Type type, MediaTypeHeaderValue mediaType, MediaTypeHeaderValue& newMediaType);
    private static Nullable`1<ODataPayloadKind> GetClrObjectResponsePayloadKind(Type type, bool isGenericSingleResult, IODataSerializerProvider serializerProvider, HttpRequest request);
    private Uri GetBaseAddressInternal(HttpRequest request);
    private MediaTypeHeaderValue GetContentType(string contentTypeValue);
    private static Nullable`1<ODataPayloadKind> GetEdmObjectPayloadKind(Type type, HttpRequest request);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.ODataOutputFormatter/<CopyStreamAsync>d__20")]
private static Task CopyStreamAsync(Stream source, HttpResponse response);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.OData.Formatter.ODataOutputFormatterFactory : object {
    private static string DollarFormat;
    private static string JsonFormat;
    private static string XmlFormat;
    public static IList`1<ODataOutputFormatter> Create();
    private static ODataOutputFormatter CreateApplicationJson();
    private static ODataOutputFormatter CreateApplicationXml();
    private static ODataOutputFormatter CreateRawValue();
    private static ODataOutputFormatter CreateFormatterWithoutMediaTypes(ODataPayloadKind[] payloadKinds);
    private static void AddSupportedEncodings(ODataOutputFormatter formatter);
    [ExtensionAttribute]
private static void AddDollarFormatQueryStringMappings(ODataOutputFormatter formatter);
    [ExtensionAttribute]
private static void AddQueryStringMapping(ODataOutputFormatter formatter, string queryStringParameterName, string queryStringParameterValue, string mediaType);
}
internal static class Microsoft.AspNetCore.OData.Formatter.ODataOutputFormatterHelper : object {
    public static ODataSerializerContext BuildSerializerContext(HttpRequest request);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.ODataOutputFormatterHelper/<WriteToStreamAsync>d__1")]
internal static Task WriteToStreamAsync(Type type, object value, IEdmModel model, ODataVersion version, Uri baseAddress, MediaTypeHeaderValue contentType, HttpRequest request, IHeaderDictionary requestHeaders, IODataSerializerProvider serializerProvider);
    internal static IODataSerializer GetSerializer(Type type, object value, HttpRequest request, IODataSerializerProvider serializerProvider);
    private static string GetRootElementName(ODataPath path);
}
public class Microsoft.AspNetCore.OData.Formatter.ODataParameterValue : object {
    public static string ParameterValuePrefix;
    [CompilerGeneratedAttribute]
private IEdmTypeReference <EdmType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public IEdmTypeReference EdmType { get; }
    public object Value { get; }
    public ODataParameterValue(object paramValue, IEdmTypeReference paramType);
    [CompilerGeneratedAttribute]
public IEdmTypeReference get_EdmType();
    [CompilerGeneratedAttribute]
public object get_Value();
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNetCore.OData.Formatter.ODataUntypedActionParameters : Dictionary`2<string, object> {
    [CompilerGeneratedAttribute]
private IEdmAction <Action>k__BackingField;
    public IEdmAction Action { get; }
    public ODataUntypedActionParameters(IEdmAction action);
    [CompilerGeneratedAttribute]
public IEdmAction get_Action();
}
internal static class Microsoft.AspNetCore.OData.Formatter.RequestPreferenceHelpers : object {
    public static string PreferHeaderName;
    public static string ReturnContentHeaderValue;
    public static string ReturnNoContentHeaderValue;
    public static string ODataMaxPageSize;
    public static string MaxPageSize;
    internal static string GetRequestPreferHeader(IHeaderDictionary headers);
}
public class Microsoft.AspNetCore.OData.Formatter.ResourceContext : object {
    private object _resourceInstance;
    [CompilerGeneratedAttribute]
private ODataSerializerContext <SerializerContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmStructuredType <StructuredType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmStructuredObject <EdmObject>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <DynamicComplexProperties>k__BackingField;
    public ODataSerializerContext SerializerContext { get; public set; }
    public IEdmModel EdmModel { get; public set; }
    public IEdmNavigationSource NavigationSource { get; public set; }
    public IEdmStructuredType StructuredType { get; public set; }
    public IEdmStructuredObject EdmObject { get; public set; }
    public object ResourceInstance { get; public set; }
    public HttpRequest Request { get; public set; }
    internal TimeZoneInfo TimeZone { get; }
    public bool SkipExpensiveAvailabilityChecks { get; public set; }
    public IDictionary`2<string, object> DynamicComplexProperties { get; public set; }
    public ResourceContext(ODataSerializerContext serializerContext, IEdmStructuredTypeReference structuredType, object resourceInstance);
    private ResourceContext(ODataSerializerContext serializerContext, IEdmStructuredTypeReference structuredType, IEdmStructuredObject edmObject);
    [CompilerGeneratedAttribute]
public ODataSerializerContext get_SerializerContext();
    [CompilerGeneratedAttribute]
public void set_SerializerContext(ODataSerializerContext value);
    public IEdmModel get_EdmModel();
    public void set_EdmModel(IEdmModel value);
    public IEdmNavigationSource get_NavigationSource();
    public void set_NavigationSource(IEdmNavigationSource value);
    [CompilerGeneratedAttribute]
public IEdmStructuredType get_StructuredType();
    [CompilerGeneratedAttribute]
public void set_StructuredType(IEdmStructuredType value);
    [CompilerGeneratedAttribute]
public IEdmStructuredObject get_EdmObject();
    [CompilerGeneratedAttribute]
public void set_EdmObject(IEdmStructuredObject value);
    public object get_ResourceInstance();
    public void set_ResourceInstance(object value);
    public HttpRequest get_Request();
    public void set_Request(HttpRequest value);
    internal TimeZoneInfo get_TimeZone();
    public bool get_SkipExpensiveAvailabilityChecks();
    public void set_SkipExpensiveAvailabilityChecks(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_DynamicComplexProperties();
    [CompilerGeneratedAttribute]
public void set_DynamicComplexProperties(IDictionary`2<string, object> value);
    public object GetPropertyValue(string propertyName);
    private object BuildResourceInstance();
    private static IEdmStructuredObject AsEdmResourceObject(ODataSerializerContext serializerContext, object resourceInstance, IEdmStructuredTypeReference structuredType);
    internal void AppendDynamicOrUntypedProperty(string propertyName, object value);
}
internal class Microsoft.AspNetCore.OData.Formatter.ResourceContext`1 : ResourceContext {
}
public class Microsoft.AspNetCore.OData.Formatter.ResourceSetContext : object {
    [CompilerGeneratedAttribute]
private IEdmEntitySetBase <EntitySetBase>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ResourceSetInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpRequest <Request>k__BackingField;
    public IEdmEntitySetBase EntitySetBase { get; public set; }
    public object ResourceSetInstance { get; public set; }
    public HttpRequest Request { get; public set; }
    public IEdmModel EdmModel { get; }
    [CompilerGeneratedAttribute]
public IEdmEntitySetBase get_EntitySetBase();
    [CompilerGeneratedAttribute]
public void set_EntitySetBase(IEdmEntitySetBase value);
    [CompilerGeneratedAttribute]
public object get_ResourceSetInstance();
    [CompilerGeneratedAttribute]
public void set_ResourceSetInstance(object value);
    [CompilerGeneratedAttribute]
public HttpRequest get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(HttpRequest value);
    public IEdmModel get_EdmModel();
    internal static ResourceSetContext Create(ODataSerializerContext writeContext, IEnumerable resourceSetInstance);
    internal static ResourceSetContext Create(ODataSerializerContext writeContext, IAsyncEnumerable`1<object> resourceSetInstance);
}
public class Microsoft.AspNetCore.OData.Formatter.Serialization.DefaultUntypedResourceMapper : object {
    public static IUntypedResourceMapper Instance;
    private static DefaultUntypedResourceMapper();
    public virtual IDictionary`2<string, object> Map(object resource, ODataSerializerContext context);
    private static JsonPropertyNameAttribute GetJsonProperty(PropertyInfo property);
    private static JsonIgnoreAttribute GetJsonIgnore(PropertyInfo property);
}
public interface Microsoft.AspNetCore.OData.Formatter.Serialization.IODataEdmTypeSerializer {
    public abstract virtual ODataValue CreateODataValue(object graph, IEdmTypeReference expectedType, ODataSerializerContext writeContext);
    public abstract virtual Task WriteObjectInlineAsync(object graph, IEdmTypeReference expectedType, ODataWriter writer, ODataSerializerContext writeContext);
}
public interface Microsoft.AspNetCore.OData.Formatter.Serialization.IODataSerializer {
    public ODataPayloadKind ODataPayloadKind { get; }
    public abstract virtual ODataPayloadKind get_ODataPayloadKind();
    public abstract virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
}
public interface Microsoft.AspNetCore.OData.Formatter.Serialization.IODataSerializerProvider {
    public abstract virtual IODataEdmTypeSerializer GetEdmTypeSerializer(IEdmTypeReference edmType);
    public abstract virtual IODataSerializer GetODataPayloadSerializer(Type type, HttpRequest request);
}
public interface Microsoft.AspNetCore.OData.Formatter.Serialization.IUntypedResourceMapper {
    public abstract virtual IDictionary`2<string, object> Map(object resource, ODataSerializerContext context);
}
public class Microsoft.AspNetCore.OData.Formatter.Serialization.ODataCollectionSerializer : ODataEdmTypeSerializer {
    public ODataCollectionSerializer(IODataSerializerProvider serializerProvider);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataCollectionSerializer/<WriteObjectAsync>d__1")]
public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    public sealed virtual ODataValue CreateODataValue(object graph, IEdmTypeReference expectedType, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataCollectionSerializer/<WriteCollectionAsync>d__3")]
public virtual Task WriteCollectionAsync(ODataCollectionWriter writer, object graph, IEdmTypeReference collectionType, ODataSerializerContext writeContext);
    public virtual ODataCollectionValue CreateODataCollectionValue(IEnumerable enumerable, IEdmTypeReference elementType, ODataSerializerContext writeContext);
    protected internal static void AddTypeNameAnnotationAsNeeded(ODataCollectionValue value, ODataMetadataLevel metadataLevel);
    internal static bool ShouldAddTypeNameAnnotation(ODataMetadataLevel metadataLevel);
    internal static bool ShouldSuppressTypeNameSerialization(ODataMetadataLevel metadataLevel);
    internal static IEdmTypeReference GetElementType(IEdmTypeReference feedType);
}
public class Microsoft.AspNetCore.OData.Formatter.Serialization.ODataDeltaResourceSetSerializer : ODataEdmTypeSerializer {
    private static string DeltaResourceSet;
    public ODataDeltaResourceSetSerializer(IODataSerializerProvider serializerProvider);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataDeltaResourceSetSerializer/<WriteObjectAsync>d__2")]
public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataDeltaResourceSetSerializer/<WriteObjectInlineAsync>d__3")]
public virtual Task WriteObjectInlineAsync(object graph, IEdmTypeReference expectedType, ODataWriter writer, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataDeltaResourceSetSerializer/<WriteDeltaResourceSetAsync>d__4")]
private Task WriteDeltaResourceSetAsync(IEnumerable enumerable, IEdmTypeReference feedType, ODataWriter writer, ODataSerializerContext writeContext);
    internal static Func`2<object, Uri> GetNextLinkGenerator(ODataDeltaResourceSet deltaResourceSet, IEnumerable enumerable, ODataSerializerContext writeContext);
    public virtual ODataDeltaResourceSet CreateODataDeltaResourceSet(IEnumerable feedInstance, IEdmCollectionTypeReference feedType, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataDeltaResourceSetSerializer/<WriteDeltaDeletedResourceAsync>d__7")]
public virtual Task WriteDeltaDeletedResourceAsync(object value, ODataWriter writer, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataDeltaResourceSetSerializer/<WriteDeltaDeletedLinkAsync>d__8")]
public virtual Task WriteDeltaDeletedLinkAsync(object value, ODataWriter writer, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataDeltaResourceSetSerializer/<WriteDeltaLinkAsync>d__9")]
public virtual Task WriteDeltaLinkAsync(object value, ODataWriter writer, ODataSerializerContext writeContext);
    internal DeltaItemKind GetDelteItemKind(object item);
    private static IEdmStructuredTypeReference GetResourceType(IEdmTypeReference feedType);
}
public abstract class Microsoft.AspNetCore.OData.Formatter.Serialization.ODataEdmTypeSerializer : ODataSerializer {
    [CompilerGeneratedAttribute]
private IODataSerializerProvider <SerializerProvider>k__BackingField;
    public IODataSerializerProvider SerializerProvider { get; }
    protected ODataEdmTypeSerializer(ODataPayloadKind payloadKind);
    protected ODataEdmTypeSerializer(ODataPayloadKind payloadKind, IODataSerializerProvider serializerProvider);
    [CompilerGeneratedAttribute]
public IODataSerializerProvider get_SerializerProvider();
    public virtual Task WriteObjectInlineAsync(object graph, IEdmTypeReference expectedType, ODataWriter writer, ODataSerializerContext writeContext);
    public virtual ODataValue CreateODataValue(object graph, IEdmTypeReference expectedType, ODataSerializerContext writeContext);
}
public class Microsoft.AspNetCore.OData.Formatter.Serialization.ODataEntityReferenceLinkSerializer : ODataSerializer {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataEntityReferenceLinkSerializer/<WriteObjectAsync>d__1")]
public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
}
public class Microsoft.AspNetCore.OData.Formatter.Serialization.ODataEntityReferenceLinksSerializer : ODataSerializer {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataEntityReferenceLinksSerializer/<WriteObjectAsync>d__1")]
public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
}
public class Microsoft.AspNetCore.OData.Formatter.Serialization.ODataEnumSerializer : ODataEdmTypeSerializer {
    public ODataEnumSerializer(IODataSerializerProvider serializerProvider);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataEnumSerializer/<WriteObjectAsync>d__1")]
public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    public sealed virtual ODataValue CreateODataValue(object graph, IEdmTypeReference expectedType, ODataSerializerContext writeContext);
    public virtual ODataEnumValue CreateODataEnumValue(object graph, IEdmEnumTypeReference enumType, ODataSerializerContext writeContext);
    internal static void AddTypeNameAnnotationAsNeeded(ODataEnumValue enumValue, IEdmEnumTypeReference enumType, ODataMetadataLevel metadataLevel);
    private static bool ShouldAddTypeNameAnnotation(ODataMetadataLevel metadataLevel);
    private static bool ShouldSuppressTypeNameSerialization(ODataMetadataLevel metadataLevel);
}
public class Microsoft.AspNetCore.OData.Formatter.Serialization.ODataErrorSerializer : ODataSerializer {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataErrorSerializer/<WriteObjectAsync>d__1")]
public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    internal static bool IsHttpError(object error);
    internal static ODataError CreateODataError(object error);
}
public class Microsoft.AspNetCore.OData.Formatter.Serialization.ODataMetadataSerializer : ODataSerializer {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataMetadataSerializer/<WriteObjectAsync>d__1")]
public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
}
internal static class Microsoft.AspNetCore.OData.Formatter.Serialization.ODataPayloadKindHelper : object {
    public static bool IsDefined(ODataPayloadKind payloadKind);
    public static void Validate(ODataPayloadKind payloadKind, string parameterName);
}
public class Microsoft.AspNetCore.OData.Formatter.Serialization.ODataPrimitiveSerializer : ODataEdmTypeSerializer {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataPrimitiveSerializer/<WriteObjectAsync>d__1")]
public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    public sealed virtual ODataValue CreateODataValue(object graph, IEdmTypeReference expectedType, ODataSerializerContext writeContext);
    public virtual ODataPrimitiveValue CreateODataPrimitiveValue(object graph, IEdmPrimitiveTypeReference primitiveType, ODataSerializerContext writeContext);
    internal static void AddTypeNameAnnotationAsNeeded(ODataPrimitiveValue primitive, IEdmPrimitiveTypeReference primitiveType, ODataMetadataLevel metadataLevel);
    internal static ODataPrimitiveValue CreatePrimitive(object value, IEdmPrimitiveTypeReference primitiveType, ODataSerializerContext writeContext);
    internal static object ConvertPrimitiveValue(object value, IEdmPrimitiveTypeReference primitiveType, TimeZoneInfo timeZoneInfo);
    internal static object ConvertUnsupportedPrimitives(object value, TimeZoneInfo timeZoneInfo);
    internal static bool CanTypeBeInferredInJson(object value);
    internal static bool ShouldSuppressTypeNameSerialization(object value, ODataMetadataLevel metadataLevel);
}
public class Microsoft.AspNetCore.OData.Formatter.Serialization.ODataRawValueSerializer : ODataSerializer {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataRawValueSerializer/<WriteObjectAsync>d__1")]
public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
}
public class Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSerializer : ODataEdmTypeSerializer {
    private static string Resource;
    public ODataResourceSerializer(IODataSerializerProvider serializerProvider);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSerializer/<WriteObjectAsync>d__2")]
public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSerializer/<WriteObjectInlineAsync>d__3")]
public virtual Task WriteObjectInlineAsync(object graph, IEdmTypeReference expectedType, ODataWriter writer, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSerializer/<WriteDeltaObjectInlineAsync>d__4")]
public virtual Task WriteDeltaObjectInlineAsync(object graph, IEdmTypeReference expectedType, ODataWriter writer, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSerializer/<WriteDeltaResourceAsync>d__5")]
private Task WriteDeltaResourceAsync(object graph, ODataWriter writer, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSerializer/<WriteDeltaComplexPropertiesAsync>d__6")]
private Task WriteDeltaComplexPropertiesAsync(SelectExpandNode selectExpandNode, ResourceContext resourceContext, ODataWriter writer);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSerializer/<WriteDeltaComplexAndExpandedNavigationPropertyAsync>d__7")]
private Task WriteDeltaComplexAndExpandedNavigationPropertyAsync(IEdmProperty edmProperty, SelectExpandClause selectExpandClause, ResourceContext resourceContext, ODataWriter writer, Type navigationPropertyType);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSerializer/<WriteDeltaNavigationPropertiesAsync>d__8")]
internal Task WriteDeltaNavigationPropertiesAsync(SelectExpandNode selectExpandNode, ResourceContext resourceContext, ODataWriter writer);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSerializer/<GetNavigationPropertiesToWrite>d__9")]
private IEnumerable`1<KeyValuePair`2<IEdmNavigationProperty, Type>> GetNavigationPropertiesToWrite(SelectExpandNode selectExpandNode, ResourceContext resourceContext);
    private static IEnumerable`1<ODataProperty> CreateODataPropertiesFromDynamicType(EdmStructuredType structuredType, object graph, Dictionary`2<IEdmProperty, object> dynamicTypeProperties, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSerializer/<WriteDynamicTypeResourceAsync>d__11")]
private Task WriteDynamicTypeResourceAsync(object graph, ODataWriter writer, IEdmTypeReference expectedType, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSerializer/<WriteResourceAsync>d__12")]
private Task WriteResourceAsync(object graph, ODataWriter writer, ODataSerializerContext writeContext, IEdmTypeReference expectedType);
    public virtual SelectExpandNode CreateSelectExpandNode(ResourceContext resourceContext);
    public virtual ODataResource CreateResource(SelectExpandNode selectExpandNode, ResourceContext resourceContext);
    public virtual void AppendDynamicProperties(ODataResource resource, SelectExpandNode selectExpandNode, ResourceContext resourceContext);
    public virtual string CreateETag(ResourceContext resourceContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSerializer/<WriteNavigationLinksAsync>d__17")]
private Task WriteNavigationLinksAsync(SelectExpandNode selectExpandNode, ResourceContext resourceContext, ODataWriter writer);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSerializer/<WriteDynamicComplexPropertiesAsync>d__18")]
private Task WriteDynamicComplexPropertiesAsync(ResourceContext resourceContext, ODataWriter writer);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSerializer/<WriteDynamicComplexPropertyAsync>d__19")]
private Task WriteDynamicComplexPropertyAsync(object propertyValue, IEdmTypeReference edmType, ResourceContext resourceContext, ODataWriter writer);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSerializer/<WriteUntypedPropertiesAsync>d__20")]
private Task WriteUntypedPropertiesAsync(SelectExpandNode selectExpandNode, ResourceContext resourceContext, ODataWriter writer);
    public virtual ODataNestedResourceInfo CreateUntypedNestedResourceInfo(IEdmStructuralProperty structuralProperty, object propertyValue, IEdmTypeReference valueType, PathSelectItem pathSelectItem, ResourceContext resourceContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSerializer/<WriteStreamPropertiesAsync>d__22")]
private Task WriteStreamPropertiesAsync(SelectExpandNode selectExpandNode, ResourceContext resourceContext, ODataWriter writer);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSerializer/<WriteComplexPropertiesAsync>d__23")]
private Task WriteComplexPropertiesAsync(SelectExpandNode selectExpandNode, ResourceContext resourceContext, ODataWriter writer);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSerializer/<WriteExpandedNavigationPropertiesAsync>d__24")]
private Task WriteExpandedNavigationPropertiesAsync(SelectExpandNode selectExpandNode, ResourceContext resourceContext, ODataWriter writer);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSerializer/<WriteReferencedNavigationPropertiesAsync>d__25")]
private Task WriteReferencedNavigationPropertiesAsync(SelectExpandNode selectExpandNode, ResourceContext resourceContext, ODataWriter writer);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSerializer/<WriteComplexAndExpandedNavigationPropertyAsync>d__26")]
private Task WriteComplexAndExpandedNavigationPropertyAsync(IEdmProperty edmProperty, SelectItem selectItem, ResourceContext resourceContext, ODataWriter writer);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSerializer/<CreateNavigationLinks>d__27")]
private IEnumerable`1<ODataNestedResourceInfo> CreateNavigationLinks(IEnumerable`1<IEdmNavigationProperty> navigationProperties, ResourceContext resourceContext);
    protected virtual bool ShouldWriteNavigation(ODataNestedResourceInfo navigationLink, ResourceContext resourceContext);
    public virtual ODataNestedResourceInfo CreateDynamicComplexNestedResourceInfo(string propertyName, object propertyValue, IEdmTypeReference edmType, ResourceContext resourceContext);
    public virtual ODataNestedResourceInfo CreateComplexNestedResourceInfo(IEdmStructuralProperty complexProperty, PathSelectItem pathSelectItem, ResourceContext resourceContext);
    public virtual ODataNestedResourceInfo CreateNavigationLink(IEdmNavigationProperty navigationProperty, ResourceContext resourceContext);
    private IEnumerable`1<ODataProperty> CreateStructuralPropertyBag(SelectExpandNode selectExpandNode, ResourceContext resourceContext);
    public virtual ODataProperty CreateComputedProperty(string propertyName, ResourceContext resourceContext);
    public virtual ODataStreamPropertyInfo CreateStreamProperty(IEdmStructuralProperty structuralProperty, ResourceContext resourceContext);
    public virtual object CreateUntypedPropertyValue(IEdmStructuralProperty structuralProperty, ResourceContext resourceContext, IEdmTypeReference& actualType);
    public virtual ODataProperty CreateStructuralProperty(IEdmStructuralProperty structuralProperty, ResourceContext resourceContext);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSerializer/<CreateODataActions>d__37")]
private IEnumerable`1<ODataAction> CreateODataActions(IEnumerable`1<IEdmAction> actions, ResourceContext resourceContext);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSerializer/<CreateODataFunctions>d__38")]
private IEnumerable`1<ODataFunction> CreateODataFunctions(IEnumerable`1<IEdmFunction> functions, ResourceContext resourceContext);
    public virtual ODataAction CreateODataAction(IEdmAction action, ResourceContext resourceContext);
    public virtual ODataFunction CreateODataFunction(IEdmFunction function, ResourceContext resourceContext);
    private static ODataOperation CreateODataOperation(IEdmOperation operation, OperationLinkBuilder builder, ResourceContext resourceContext);
    internal static void EmitTitle(IEdmModel model, IEdmOperation operation, ODataOperation odataOperation);
    internal static string CreateMetadataFragment(IEdmOperation operation);
    private static IEdmStructuredType GetODataPathType(ODataSerializerContext serializerContext);
    internal static void AddTypeNameAnnotationAsNeeded(ODataResource resource, IEdmStructuredType odataPathType, ODataMetadataLevel metadataLevel);
    internal static void AddTypeNameAnnotationAsNeededForComplex(ODataResource resource, ODataMetadataLevel metadataLevel);
    internal static bool ShouldAddTypeNameAnnotationForComplex(ODataMetadataLevel metadataLevel);
    internal static bool ShouldSuppressTypeNameSerializationForComplex(ODataMetadataLevel metadataLevel);
    internal static bool ShouldOmitOperation(IEdmOperation operation, OperationLinkBuilder builder, ODataMetadataLevel metadataLevel);
    internal static bool ShouldSuppressTypeNameSerialization(ODataResource resource, IEdmStructuredType edmType, ODataMetadataLevel metadataLevel);
    private IEdmStructuredTypeReference GetResourceType(object graph, ODataSerializerContext writeContext);
}
public class Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSetSerializer : ODataEdmTypeSerializer {
    private static string ResourceSet;
    public ODataResourceSetSerializer(IODataSerializerProvider serializerProvider);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSetSerializer/<WriteObjectAsync>d__2")]
public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSetSerializer/<WriteObjectInlineAsync>d__3")]
public virtual Task WriteObjectInlineAsync(object graph, IEdmTypeReference expectedType, ODataWriter writer, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSetSerializer/<WriteResourceSetAsync>d__4")]
private Task WriteResourceSetAsync(IEnumerable enumerable, IEdmTypeReference resourceSetType, ODataWriter writer, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSetSerializer/<WriteResourceSetAsync>d__5")]
private Task WriteResourceSetAsync(IAsyncEnumerable`1<object> asyncEnumerable, IEdmTypeReference resourceSetType, ODataWriter writer, ODataSerializerContext writeContext);
    private void WriteResourceSetInternal(ODataResourceSet resourceSet, IEdmStructuredTypeReference elementType, IEdmTypeReference resourceSetType, ODataSerializerContext writeContext, Boolean& isUntypedCollection, IODataEdmTypeSerializer& resourceSerializer);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSetSerializer/<WriteResourceSetItemAsync>d__7")]
private Task WriteResourceSetItemAsync(object item, IEdmStructuredTypeReference elementType, bool isUntypedCollection, IEdmTypeReference resourceSetType, ODataWriter writer, IODataEdmTypeSerializer resourceSerializer, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSetSerializer/<WriteUntypedResourceSetItemAsync>d__8")]
private Task WriteUntypedResourceSetItemAsync(object item, IEdmTypeReference parentSetType, ODataWriter writer, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSetSerializer/<WritePrimitiveItemAsync>d__9")]
protected virtual Task WritePrimitiveItemAsync(object primitiveValue, IEdmTypeReference primitiveType, IEdmTypeReference parentSetType, ODataWriter writer, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSetSerializer/<WriteEnumItemAsync>d__10")]
protected virtual Task WriteEnumItemAsync(object enumValue, IEdmTypeReference enumType, IEdmTypeReference parentSetType, ODataWriter writer, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSetSerializer/<WriteResourceSetItemAsync>d__11")]
protected virtual Task WriteResourceSetItemAsync(object itemSetValue, IEdmTypeReference itemSetType, IEdmTypeReference parentSetType, ODataWriter writer, ODataSerializerContext writeContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSetSerializer/<WriteResourceItemAsync>d__12")]
protected virtual Task WriteResourceItemAsync(object resourceValue, IEdmTypeReference resourceType, IEdmTypeReference parentSetType, ODataWriter writer, ODataSerializerContext writeContext);
    public virtual ODataResourceSet CreateResourceSet(IEnumerable resourceSetInstance, IEdmCollectionTypeReference resourceSetType, ODataSerializerContext writeContext);
    public virtual ODataResourceSet CreateResourceSet(IAsyncEnumerable`1<object> resourceSetInstance, IEdmCollectionTypeReference resourceSetType, ODataSerializerContext writeContext);
    private void WriteEntityTypeOperations(ODataResourceSet resourceSet, ResourceSetContext resourceSetContext, IEdmStructuredTypeReference structuredType, ODataSerializerContext writeContext);
    private void ApplyODataResourceSetAnnotations(ODataResourceSet resourceSet, PageResult odataResourceSetAnnotations, ODataSerializerContext writeContext);
    internal static Func`2<object, Uri> GetNextLinkGenerator(ODataResourceSetBase resourceSet, IEnumerable resourceSetInstance, ODataSerializerContext writeContext);
    internal static Func`2<object, Uri> GetNextLinkGenerator(ODataResourceSetBase resourceSet, IAsyncEnumerable`1<object> resourceSetInstance, ODataSerializerContext writeContext);
    public virtual ODataOperation CreateODataOperation(IEdmOperation operation, ResourceSetContext resourceSetContext, ODataSerializerContext writeContext);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataResourceSetSerializer/<CreateODataOperations>d__20")]
private IEnumerable`1<ODataOperation> CreateODataOperations(IEnumerable`1<IEdmOperation> operations, ResourceSetContext resourceSetContext, ODataSerializerContext writeContext);
    private static Uri GetNestedNextPageLink(ODataSerializerContext writeContext, int pageSize, object obj);
    private static Uri GenerateQueryFromExpandedItem(ODataSerializerContext writeContext, Uri navigationLink);
    private static IEdmStructuredTypeReference GetResourceType(IEdmTypeReference resourceSetType);
}
public abstract class Microsoft.AspNetCore.OData.Formatter.Serialization.ODataSerializer : object {
    [CompilerGeneratedAttribute]
private ODataPayloadKind <ODataPayloadKind>k__BackingField;
    public ODataPayloadKind ODataPayloadKind { get; }
    protected ODataSerializer(ODataPayloadKind payloadKind);
    [CompilerGeneratedAttribute]
public sealed virtual ODataPayloadKind get_ODataPayloadKind();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataSerializer/<WriteObjectAsync>d__4")]
public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private Task <WriteObjectAsync>b__4_0();
}
public class Microsoft.AspNetCore.OData.Formatter.Serialization.ODataSerializerContext : object {
    private IDictionary`2<object, object> _items;
    private ODataQueryContext _queryContext;
    private SelectExpandClause _selectExpandClause;
    private bool _isSelectExpandClauseSet;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    private Nullable`1<bool> _isDeltaOfT;
    [CompilerGeneratedAttribute]
private IEdmNavigationSource <NavigationSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataMetadataLevel <MetadataLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootElementName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExpandReference>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmProperty <EdmProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipExpensiveAvailabilityChecks>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeZoneInfo <TimeZone>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataQueryOptions <QueryOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <ComputedProperties>k__BackingField;
    private IUntypedResourceMapper _valueMapper;
    [CompilerGeneratedAttribute]
private SelectItem <CurrentSelectItem>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceContext <ExpandedResource>k__BackingField;
    internal Type Type { get; internal set; }
    public IEdmNavigationSource NavigationSource { get; public set; }
    public IEdmModel Model { get; public set; }
    public ODataPath Path { get; public set; }
    public ODataMetadataLevel MetadataLevel { get; public set; }
    public HttpRequest Request { get; public set; }
    public string RootElementName { get; public set; }
    public bool ExpandReference { get; public set; }
    public IEdmProperty EdmProperty { get; public set; }
    public bool SkipExpensiveAvailabilityChecks { get; public set; }
    public TimeZoneInfo TimeZone { get; public set; }
    public ODataQueryOptions QueryOptions { get; internal set; }
    public ISet`1<string> ComputedProperties { get; }
    internal IUntypedResourceMapper UntypedMapper { get; }
    internal ODataQueryContext QueryContext { get; private set; }
    internal SelectItem CurrentSelectItem { get; internal set; }
    public IDictionary`2<object, object> Items { get; private set; }
    public ResourceContext ExpandedResource { get; public set; }
    public SelectExpandClause SelectExpandClause { get; public set; }
    internal bool IsDeltaOfT { get; }
    internal ExpandedReferenceSelectItem CurrentExpandedSelectItem { get; }
    public IEdmNavigationProperty NavigationProperty { get; }
    public ODataSerializerContext(ResourceContext resource, SelectExpandClause selectExpandClause, IEdmProperty edmProperty);
    internal ODataSerializerContext(ResourceContext resource, IEdmProperty edmProperty, ODataQueryContext queryContext, SelectItem currentSelectItem);
    [CompilerGeneratedAttribute]
internal Type get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(Type value);
    [CompilerGeneratedAttribute]
public IEdmNavigationSource get_NavigationSource();
    [CompilerGeneratedAttribute]
public void set_NavigationSource(IEdmNavigationSource value);
    [CompilerGeneratedAttribute]
public IEdmModel get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(IEdmModel value);
    [CompilerGeneratedAttribute]
public ODataPath get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(ODataPath value);
    [CompilerGeneratedAttribute]
public ODataMetadataLevel get_MetadataLevel();
    [CompilerGeneratedAttribute]
public void set_MetadataLevel(ODataMetadataLevel value);
    [CompilerGeneratedAttribute]
public HttpRequest get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(HttpRequest value);
    [CompilerGeneratedAttribute]
public string get_RootElementName();
    [CompilerGeneratedAttribute]
public void set_RootElementName(string value);
    [CompilerGeneratedAttribute]
public bool get_ExpandReference();
    [CompilerGeneratedAttribute]
public void set_ExpandReference(bool value);
    [CompilerGeneratedAttribute]
public IEdmProperty get_EdmProperty();
    [CompilerGeneratedAttribute]
public void set_EdmProperty(IEdmProperty value);
    [CompilerGeneratedAttribute]
public bool get_SkipExpensiveAvailabilityChecks();
    [CompilerGeneratedAttribute]
public void set_SkipExpensiveAvailabilityChecks(bool value);
    [CompilerGeneratedAttribute]
public TimeZoneInfo get_TimeZone();
    [CompilerGeneratedAttribute]
public void set_TimeZone(TimeZoneInfo value);
    [CompilerGeneratedAttribute]
public ODataQueryOptions get_QueryOptions();
    [CompilerGeneratedAttribute]
internal void set_QueryOptions(ODataQueryOptions value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_ComputedProperties();
    internal IUntypedResourceMapper get_UntypedMapper();
    internal ODataQueryContext get_QueryContext();
    private void set_QueryContext(ODataQueryContext value);
    [CompilerGeneratedAttribute]
internal SelectItem get_CurrentSelectItem();
    [CompilerGeneratedAttribute]
internal void set_CurrentSelectItem(SelectItem value);
    public IDictionary`2<object, object> get_Items();
    private void set_Items(IDictionary`2<object, object> value);
    [CompilerGeneratedAttribute]
public ResourceContext get_ExpandedResource();
    [CompilerGeneratedAttribute]
public void set_ExpandedResource(ResourceContext value);
    public SelectExpandClause get_SelectExpandClause();
    public void set_SelectExpandClause(SelectExpandClause value);
    internal bool get_IsDeltaOfT();
    internal ExpandedReferenceSelectItem get_CurrentExpandedSelectItem();
    public IEdmNavigationProperty get_NavigationProperty();
    internal IEdmTypeReference GetEdmType(object instance, Type type, bool isUntyped);
    internal void SetComputedProperties(ComputeClause computeClause);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.OData.Formatter.Serialization.ODataSerializerPropertyHelper : object {
    [ExtensionAttribute]
public static ODataProperty CreateProperty(IODataEdmTypeSerializer serializer, object graph, IEdmTypeReference expectedType, string elementName, ODataSerializerContext writeContext);
    private static ODataProperty CreateCollectionProperty(ODataCollectionSerializer serializer, object graph, IEdmTypeReference expectedType, string elementName, ODataSerializerContext writeContext);
}
public class Microsoft.AspNetCore.OData.Formatter.Serialization.ODataSerializerProvider : object {
    private IServiceProvider _serviceProvider;
    public ODataSerializerProvider(IServiceProvider serviceProvider);
    public virtual IODataEdmTypeSerializer GetEdmTypeSerializer(IEdmTypeReference edmType);
    public virtual IODataSerializer GetODataPayloadSerializer(Type type, HttpRequest request);
}
public class Microsoft.AspNetCore.OData.Formatter.Serialization.ODataServiceDocumentSerializer : ODataSerializer {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Serialization.ODataServiceDocumentSerializer/<WriteObjectAsync>d__1")]
public virtual Task WriteObjectAsync(object graph, Type type, ODataMessageWriter messageWriter, ODataSerializerContext writeContext);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.OData.Formatter.Serialization.ODataValueExtensions : object {
    [ExtensionAttribute]
public static object GetInnerValue(ODataValue odataValue);
}
public class Microsoft.AspNetCore.OData.Formatter.Serialization.SelectExpandNode : object {
    [CompilerGeneratedAttribute]
private ISet`1<IEdmStructuralProperty> <SelectedStructuralProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<IEdmStructuralProperty, PathSelectItem> <SelectedComplexProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<IEdmNavigationProperty> <SelectedNavigationProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<IEdmNavigationProperty, ExpandedNavigationSelectItem> <ExpandedProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<IEdmNavigationProperty, ExpandedReferenceSelectItem> <ReferencedProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <SelectedDynamicProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <SelectedComputedProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SelectAllDynamicProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<IEdmAction> <SelectedActions>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<IEdmFunction> <SelectedFunctions>k__BackingField;
    public ISet`1<IEdmStructuralProperty> SelectedStructuralProperties { get; internal set; }
    public IDictionary`2<IEdmStructuralProperty, PathSelectItem> SelectedComplexProperties { get; internal set; }
    public ISet`1<IEdmNavigationProperty> SelectedNavigationProperties { get; internal set; }
    public IDictionary`2<IEdmNavigationProperty, ExpandedNavigationSelectItem> ExpandedProperties { get; internal set; }
    public IDictionary`2<IEdmNavigationProperty, ExpandedReferenceSelectItem> ReferencedProperties { get; internal set; }
    public ISet`1<string> SelectedDynamicProperties { get; internal set; }
    public ISet`1<string> SelectedComputedProperties { get; }
    public bool SelectAllDynamicProperties { get; internal set; }
    public ISet`1<IEdmAction> SelectedActions { get; internal set; }
    public ISet`1<IEdmFunction> SelectedFunctions { get; internal set; }
    public SelectExpandNode(IEdmStructuredType structuredType, ODataSerializerContext writeContext);
    public SelectExpandNode(SelectExpandClause selectExpandClause, IEdmStructuredType structuredType, IEdmModel model);
    [CompilerGeneratedAttribute]
public ISet`1<IEdmStructuralProperty> get_SelectedStructuralProperties();
    [CompilerGeneratedAttribute]
internal void set_SelectedStructuralProperties(ISet`1<IEdmStructuralProperty> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<IEdmStructuralProperty, PathSelectItem> get_SelectedComplexProperties();
    [CompilerGeneratedAttribute]
internal void set_SelectedComplexProperties(IDictionary`2<IEdmStructuralProperty, PathSelectItem> value);
    [CompilerGeneratedAttribute]
public ISet`1<IEdmNavigationProperty> get_SelectedNavigationProperties();
    [CompilerGeneratedAttribute]
internal void set_SelectedNavigationProperties(ISet`1<IEdmNavigationProperty> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<IEdmNavigationProperty, ExpandedNavigationSelectItem> get_ExpandedProperties();
    [CompilerGeneratedAttribute]
internal void set_ExpandedProperties(IDictionary`2<IEdmNavigationProperty, ExpandedNavigationSelectItem> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<IEdmNavigationProperty, ExpandedReferenceSelectItem> get_ReferencedProperties();
    [CompilerGeneratedAttribute]
internal void set_ReferencedProperties(IDictionary`2<IEdmNavigationProperty, ExpandedReferenceSelectItem> value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_SelectedDynamicProperties();
    [CompilerGeneratedAttribute]
internal void set_SelectedDynamicProperties(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_SelectedComputedProperties();
    [CompilerGeneratedAttribute]
public bool get_SelectAllDynamicProperties();
    [CompilerGeneratedAttribute]
internal void set_SelectAllDynamicProperties(bool value);
    [CompilerGeneratedAttribute]
public ISet`1<IEdmAction> get_SelectedActions();
    [CompilerGeneratedAttribute]
internal void set_SelectedActions(ISet`1<IEdmAction> value);
    [CompilerGeneratedAttribute]
public ISet`1<IEdmFunction> get_SelectedFunctions();
    [CompilerGeneratedAttribute]
internal void set_SelectedFunctions(ISet`1<IEdmFunction> value);
    private void Initialize(SelectExpandClause selectExpandClause, IEdmStructuredType structuredType, IEdmModel model, bool expandedReference, ISet`1<string> computedProperties);
    private void BuildSelectExpand(SelectExpandClause selectExpandClause, ISet`1<string> computedProperties, EdmStructuralTypeInfo structuralTypeInfo);
    private void BuildExpandItem(ExpandedReferenceSelectItem expandReferenceItem, IDictionary`2<IEdmStructuralProperty, SelectExpandIncludedProperty> currentLevelPropertiesInclude, EdmStructuralTypeInfo structuralTypeInfo);
    private void BuildSelectItem(PathSelectItem pathSelectItem, IDictionary`2<IEdmStructuralProperty, SelectExpandIncludedProperty> currentLevelPropertiesInclude, ISet`1<string> computedProperties, EdmStructuralTypeInfo structuralTypeInfo);
    private static void MergeAllStructuralProperties(ISet`1<IEdmStructuralProperty> allStructuralProperties, IDictionary`2<IEdmStructuralProperty, SelectExpandIncludedProperty> currentLevelPropertiesInclude);
    private void MergeSelectedNavigationProperties(ISet`1<IEdmNavigationProperty> allNavigationProperties);
    private void MergeSelectedAction(ISet`1<IEdmAction> allActions);
    private void MergeSelectedFunction(ISet`1<IEdmFunction> allFunctions);
    private void AddStructuralProperty(IEdmStructuralProperty structuralProperty, PathSelectItem pathSelectItem);
    private void AddNamespaceWildcardOperation(NamespaceQualifiedWildcardSelectItem namespaceSelectItem, ISet`1<IEdmAction> allActions, ISet`1<IEdmFunction> allFunctions);
    private void AddOperations(OperationSegment operationSegment, ISet`1<IEdmAction> allActions, ISet`1<IEdmFunction> allFunctions);
    private void AdjustSelectNavigationProperties();
    internal static bool IsComplexOrCollectionComplex(IEdmStructuralProperty structuralProperty);
}
[ExcludeFromCodeCoverageAttribute]
internal class Microsoft.AspNetCore.OData.Formatter.StreamWrapper : Stream {
    private Stream stream;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public bool CanTimeout { get; }
    public long Position { get; public set; }
    public StreamWrapper(Stream stream);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual bool get_CanTimeout();
    public virtual void Close();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual void WriteByte(byte value);
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual string ToString();
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNetCore.OData.Formatter.Value.EdmChangedObjectCollection : Collection`1<IEdmChangedObject> {
    private IEdmEntityType _entityType;
    private EdmDeltaCollectionType _edmType;
    private IEdmCollectionTypeReference _edmTypeReference;
    public EdmChangedObjectCollection(IEdmEntityType entityType);
    public EdmChangedObjectCollection(IEdmEntityType entityType, IList`1<IEdmChangedObject> changedObjectList);
    public sealed virtual IEdmTypeReference GetEdmType();
    private void Initialize(IEdmEntityType entityType);
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNetCore.OData.Formatter.Value.EdmComplexObject : EdmStructuredObject {
    public EdmComplexObject(IEdmComplexType edmType);
    public EdmComplexObject(IEdmComplexTypeReference edmType);
    public EdmComplexObject(IEdmComplexType edmType, bool isNullable);
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNetCore.OData.Formatter.Value.EdmComplexObjectCollection : Collection`1<IEdmComplexObject> {
    private IEdmCollectionTypeReference _edmType;
    public EdmComplexObjectCollection(IEdmCollectionTypeReference edmType);
    public EdmComplexObjectCollection(IEdmCollectionTypeReference edmType, IList`1<IEdmComplexObject> list);
    public sealed virtual IEdmTypeReference GetEdmType();
    private void Initialize(IEdmCollectionTypeReference edmType);
}
internal class Microsoft.AspNetCore.OData.Formatter.Value.EdmDeltaCollectionType : object {
    [CompilerGeneratedAttribute]
private IEdmTypeReference <ElementType>k__BackingField;
    public EdmTypeKind TypeKind { get; }
    public IEdmTypeReference ElementType { get; }
    internal EdmDeltaCollectionType(IEdmTypeReference typeReference);
    public sealed virtual EdmTypeKind get_TypeKind();
    [CompilerGeneratedAttribute]
public sealed virtual IEdmTypeReference get_ElementType();
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNetCore.OData.Formatter.Value.EdmDeltaComplexObject : EdmComplexObject {
    public EdmDeltaComplexObject(IEdmComplexType edmType);
    public EdmDeltaComplexObject(IEdmComplexTypeReference edmType);
    public EdmDeltaComplexObject(IEdmComplexType edmType, bool isNullable);
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNetCore.OData.Formatter.Value.EdmDeltaDeletedLink : EdmDeltaLinkBase {
    public DeltaItemKind Kind { get; }
    public EdmDeltaDeletedLink(IEdmEntityType entityType);
    public EdmDeltaDeletedLink(IEdmEntityTypeReference entityTypeReference);
    public EdmDeltaDeletedLink(IEdmEntityType entityType, bool isNullable);
    public virtual DeltaItemKind get_Kind();
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNetCore.OData.Formatter.Value.EdmDeltaDeletedResourceObject : EdmEntityObject {
    private EdmDeltaType _edmType;
    [CompilerGeneratedAttribute]
private Uri <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DeltaDeletedEntryReason> <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmNavigationSource <NavigationSource>k__BackingField;
    public Uri Id { get; public set; }
    public Nullable`1<DeltaDeletedEntryReason> Reason { get; public set; }
    public DeltaItemKind Kind { get; }
    public IEdmNavigationSource NavigationSource { get; public set; }
    public EdmDeltaDeletedResourceObject(IEdmEntityType entityType);
    public EdmDeltaDeletedResourceObject(IEdmEntityTypeReference entityTypeReference);
    public EdmDeltaDeletedResourceObject(IEdmEntityType entityType, bool isNullable);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Id(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DeltaDeletedEntryReason> get_Reason();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Reason(Nullable`1<DeltaDeletedEntryReason> value);
    public virtual DeltaItemKind get_Kind();
    [CompilerGeneratedAttribute]
public IEdmNavigationSource get_NavigationSource();
    [CompilerGeneratedAttribute]
public void set_NavigationSource(IEdmNavigationSource value);
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNetCore.OData.Formatter.Value.EdmDeltaLink : EdmDeltaLinkBase {
    public DeltaItemKind Kind { get; }
    public EdmDeltaLink(IEdmEntityType entityType);
    public EdmDeltaLink(IEdmEntityTypeReference entityTypeReference);
    public EdmDeltaLink(IEdmEntityType entityType, bool isNullable);
    public virtual DeltaItemKind get_Kind();
}
public abstract class Microsoft.AspNetCore.OData.Formatter.Value.EdmDeltaLinkBase : object {
    private IEdmEntityTypeReference _edmTypeReference;
    [CompilerGeneratedAttribute]
private Uri <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Relationship>k__BackingField;
    public IEdmEntityType EntityType { get; }
    public bool IsNullable { get; }
    public Uri Source { get; public set; }
    public Uri Target { get; public set; }
    public string Relationship { get; public set; }
    public DeltaItemKind Kind { get; }
    protected EdmDeltaLinkBase(IEdmEntityTypeReference typeReference);
    protected EdmDeltaLinkBase(IEdmEntityType entityType, bool isNullable);
    public IEdmEntityType get_EntityType();
    public bool get_IsNullable();
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Source();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Source(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Target();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Target(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Relationship();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Relationship(string value);
    public abstract virtual DeltaItemKind get_Kind();
    public sealed virtual IEdmTypeReference GetEdmType();
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNetCore.OData.Formatter.Value.EdmDeltaResourceObject : EdmEntityObject {
    private EdmDeltaType _edmType;
    [CompilerGeneratedAttribute]
private IEdmNavigationSource <NavigationSource>k__BackingField;
    public DeltaItemKind DeltaKind { get; }
    public IEdmNavigationSource NavigationSource { get; public set; }
    public EdmDeltaResourceObject(IEdmEntityType entityType);
    public EdmDeltaResourceObject(IEdmEntityTypeReference entityTypeReference);
    public EdmDeltaResourceObject(IEdmEntityType entityType, bool isNullable);
    public DeltaItemKind get_DeltaKind();
    [CompilerGeneratedAttribute]
public IEdmNavigationSource get_NavigationSource();
    [CompilerGeneratedAttribute]
public void set_NavigationSource(IEdmNavigationSource value);
}
internal class Microsoft.AspNetCore.OData.Formatter.Value.EdmDeltaType : object {
    [CompilerGeneratedAttribute]
private IEdmEntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private DeltaItemKind <DeltaKind>k__BackingField;
    public EdmTypeKind TypeKind { get; }
    public IEdmEntityType EntityType { get; }
    public DeltaItemKind DeltaKind { get; }
    internal EdmDeltaType(IEdmEntityType entityType, DeltaItemKind deltaKind);
    public sealed virtual EdmTypeKind get_TypeKind();
    [CompilerGeneratedAttribute]
public IEdmEntityType get_EntityType();
    [CompilerGeneratedAttribute]
public DeltaItemKind get_DeltaKind();
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNetCore.OData.Formatter.Value.EdmEntityObject : EdmStructuredObject {
    public EdmEntityObject(IEdmEntityType edmType);
    public EdmEntityObject(IEdmEntityTypeReference edmType);
    public EdmEntityObject(IEdmEntityType edmType, bool isNullable);
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNetCore.OData.Formatter.Value.EdmEntityObjectCollection : Collection`1<IEdmEntityObject> {
    private IEdmCollectionTypeReference _edmType;
    public EdmEntityObjectCollection(IEdmCollectionTypeReference edmType);
    public EdmEntityObjectCollection(IEdmCollectionTypeReference edmType, IList`1<IEdmEntityObject> list);
    public sealed virtual IEdmTypeReference GetEdmType();
    private void Initialize(IEdmCollectionTypeReference edmType);
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNetCore.OData.Formatter.Value.EdmEnumObject : object {
    private IEdmType _edmType;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    public string Value { get; public set; }
    public bool IsNullable { get; public set; }
    public EdmEnumObject(IEdmEnumType edmType, string value);
    public EdmEnumObject(IEdmEnumTypeReference edmType, string value);
    public EdmEnumObject(IEdmEnumType edmType, string value, bool isNullable);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public bool get_IsNullable();
    [CompilerGeneratedAttribute]
public void set_IsNullable(bool value);
    public sealed virtual IEdmTypeReference GetEdmType();
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNetCore.OData.Formatter.Value.EdmEnumObjectCollection : Collection`1<IEdmEnumObject> {
    private IEdmCollectionTypeReference _edmType;
    public EdmEnumObjectCollection(IEdmCollectionTypeReference edmType);
    public EdmEnumObjectCollection(IEdmCollectionTypeReference edmType, IList`1<IEdmEnumObject> list);
    public sealed virtual IEdmTypeReference GetEdmType();
    private void Initialize(IEdmCollectionTypeReference edmType);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.OData.Formatter.Value.EdmObjectHelper : object {
    [ExtensionAttribute]
public static IEdmObject ConvertToEdmObject(IEnumerable enumerable, IEdmCollectionTypeReference collectionType);
}
[NonValidatingParameterBindingAttribute]
public abstract class Microsoft.AspNetCore.OData.Formatter.Value.EdmStructuredObject : Delta {
    private Dictionary`2<string, object> _container;
    private HashSet`1<string> _setProperties;
    private IEdmStructuredType _expectedEdmType;
    private IEdmStructuredType _actualEdmType;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    public DeltaItemKind Kind { get; }
    public IEdmStructuredType ExpectedEdmType { get; public set; }
    public IEdmStructuredType ActualEdmType { get; public set; }
    public bool IsNullable { get; public set; }
    protected EdmStructuredObject(IEdmStructuredType edmType);
    protected EdmStructuredObject(IEdmStructuredTypeReference edmType);
    protected EdmStructuredObject(IEdmStructuredType edmType, bool isNullable);
    public virtual DeltaItemKind get_Kind();
    public IEdmStructuredType get_ExpectedEdmType();
    public void set_ExpectedEdmType(IEdmStructuredType value);
    public IEdmStructuredType get_ActualEdmType();
    public void set_ActualEdmType(IEdmStructuredType value);
    [CompilerGeneratedAttribute]
public bool get_IsNullable();
    [CompilerGeneratedAttribute]
public void set_IsNullable(bool value);
    public virtual void Clear();
    public virtual bool TrySetPropertyValue(string name, object value);
    public virtual bool TryGetPropertyValue(string name, Object& value);
    public virtual bool TryGetPropertyType(string name, Type& type);
    public Dictionary`2<string, object> TryGetDynamicProperties();
    public virtual IEnumerable`1<string> GetChangedPropertyNames();
    public virtual IDictionary`2<string, object> GetDeltaNestedNavigationProperties();
    public virtual IEnumerable`1<string> GetUnchangedPropertyNames();
    public sealed virtual IEdmTypeReference GetEdmType();
    internal static object GetDefaultValue(IEdmTypeReference propertyType);
    internal static Type GetClrTypeForUntypedDelta(IEdmTypeReference edmType);
    [CompilerGeneratedAttribute]
private bool <TryGetDynamicProperties>b__23_0(KeyValuePair`2<string, object> p);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.OData.Formatter.Value.EdmTypeExtensions : object {
    [ExtensionAttribute]
public static bool IsDeltaResourceSet(IEdmType type);
    [ExtensionAttribute]
public static bool IsDeltaResource(IEdmObject resource);
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNetCore.OData.Formatter.Value.EdmUntypedCollection : List`1<object> {
    public sealed virtual IEdmTypeReference GetEdmType();
}
[NonValidatingParameterBindingAttribute]
public class Microsoft.AspNetCore.OData.Formatter.Value.EdmUntypedObject : Dictionary`2<string, object> {
    public sealed virtual IEdmTypeReference GetEdmType();
    public sealed virtual bool TryGetPropertyValue(string propertyName, Object& value);
}
public interface Microsoft.AspNetCore.OData.Formatter.Value.IEdmChangedObject {
    public DeltaItemKind Kind { get; }
    public abstract virtual DeltaItemKind get_Kind();
}
public interface Microsoft.AspNetCore.OData.Formatter.Value.IEdmComplexObject {
}
public interface Microsoft.AspNetCore.OData.Formatter.Value.IEdmDeltaDeletedLink {
}
public interface Microsoft.AspNetCore.OData.Formatter.Value.IEdmDeltaDeletedResourceObject {
    public Uri Id { get; public set; }
    public Nullable`1<DeltaDeletedEntryReason> Reason { get; public set; }
    public abstract virtual Uri get_Id();
    public abstract virtual void set_Id(Uri value);
    public abstract virtual Nullable`1<DeltaDeletedEntryReason> get_Reason();
    public abstract virtual void set_Reason(Nullable`1<DeltaDeletedEntryReason> value);
}
public interface Microsoft.AspNetCore.OData.Formatter.Value.IEdmDeltaLink {
}
public interface Microsoft.AspNetCore.OData.Formatter.Value.IEdmDeltaLinkBase {
    public Uri Source { get; public set; }
    public Uri Target { get; public set; }
    public string Relationship { get; public set; }
    public abstract virtual Uri get_Source();
    public abstract virtual void set_Source(Uri value);
    public abstract virtual Uri get_Target();
    public abstract virtual void set_Target(Uri value);
    public abstract virtual string get_Relationship();
    public abstract virtual void set_Relationship(string value);
}
public interface Microsoft.AspNetCore.OData.Formatter.Value.IEdmEntityObject {
}
public interface Microsoft.AspNetCore.OData.Formatter.Value.IEdmEnumObject {
}
public interface Microsoft.AspNetCore.OData.Formatter.Value.IEdmObject {
    public abstract virtual IEdmTypeReference GetEdmType();
}
public interface Microsoft.AspNetCore.OData.Formatter.Value.IEdmStructuredObject {
    public abstract virtual bool TryGetPropertyValue(string propertyName, Object& value);
}
public interface Microsoft.AspNetCore.OData.Formatter.Value.IEdmUntypedObject {
}
public class Microsoft.AspNetCore.OData.Formatter.Value.NullEdmComplexObject : object {
    private IEdmComplexTypeReference _edmType;
    public NullEdmComplexObject(IEdmComplexTypeReference edmType);
    public sealed virtual bool TryGetPropertyValue(string propertyName, Object& value);
    public sealed virtual IEdmTypeReference GetEdmType();
}
internal class Microsoft.AspNetCore.OData.Formatter.Value.PropertyGetterCacheEqualityComparer : object {
    public sealed virtual bool Equals(ValueTuple`2<string, Type> x, ValueTuple`2<string, Type> y);
    public sealed virtual int GetHashCode(ValueTuple`2<string, Type> obj);
}
internal class Microsoft.AspNetCore.OData.Formatter.Value.TypedEdmComplexObject : TypedEdmStructuredObject {
    public TypedEdmComplexObject(object instance, IEdmComplexTypeReference edmType, IEdmModel edmModel);
}
internal class Microsoft.AspNetCore.OData.Formatter.Value.TypedEdmEntityObject : TypedEdmStructuredObject {
    public TypedEdmEntityObject(object instance, IEdmEntityTypeReference edmType, IEdmModel edmModel);
}
internal abstract class Microsoft.AspNetCore.OData.Formatter.Value.TypedEdmStructuredObject : object {
    private static ConcurrentDictionary`2<ValueTuple`2<string, Type>, Func`2<object, object>> _propertyGetterCache;
    private IEdmStructuredTypeReference _edmType;
    private Type _type;
    [CompilerGeneratedAttribute]
private object <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmModel <Model>k__BackingField;
    public object Instance { get; private set; }
    public IEdmModel Model { get; private set; }
    protected TypedEdmStructuredObject(object instance, IEdmStructuredTypeReference edmType, IEdmModel edmModel);
    private static TypedEdmStructuredObject();
    [CompilerGeneratedAttribute]
public object get_Instance();
    [CompilerGeneratedAttribute]
private void set_Instance(object value);
    [CompilerGeneratedAttribute]
public IEdmModel get_Model();
    [CompilerGeneratedAttribute]
private void set_Model(IEdmModel value);
    public sealed virtual IEdmTypeReference GetEdmType();
    public sealed virtual bool TryGetPropertyValue(string propertyName, Object& value);
    internal static Func`2<object, object> GetOrCreatePropertyGetter(Type type, string propertyName, IEdmStructuredTypeReference edmType, IEdmModel model);
    private static Func`2<object, object> CreatePropertyGetter(Type type, string propertyName);
}
internal class Microsoft.AspNetCore.OData.Formatter.Value.TypedEdmUntypedObject : TypedEdmStructuredObject {
    private ODataSerializerContext _context;
    public TypedEdmUntypedObject(ODataSerializerContext context, object instance);
    public IDictionary`2<string, object> GetProperties();
}
public class Microsoft.AspNetCore.OData.Formatter.Wrapper.ODataDeltaDeletedLinkWrapper : ODataDeltaLinkBaseWrapper {
    [CompilerGeneratedAttribute]
private ODataDeltaDeletedLink <DeltaDeletedLink>k__BackingField;
    public ODataDeltaDeletedLink DeltaDeletedLink { get; }
    public ODataDeltaDeletedLinkWrapper(ODataDeltaDeletedLink deltaDeletedLink);
    [CompilerGeneratedAttribute]
public ODataDeltaDeletedLink get_DeltaDeletedLink();
}
public abstract class Microsoft.AspNetCore.OData.Formatter.Wrapper.ODataDeltaLinkBaseWrapper : ODataItemWrapper {
}
public class Microsoft.AspNetCore.OData.Formatter.Wrapper.ODataDeltaLinkWrapper : ODataDeltaLinkBaseWrapper {
    [CompilerGeneratedAttribute]
private ODataDeltaLink <DeltaLink>k__BackingField;
    public ODataDeltaLink DeltaLink { get; }
    public ODataDeltaLinkWrapper(ODataDeltaLink deltaLink);
    [CompilerGeneratedAttribute]
public ODataDeltaLink get_DeltaLink();
}
public class Microsoft.AspNetCore.OData.Formatter.Wrapper.ODataDeltaResourceSetWrapper : ODataResourceSetBaseWrapper {
    [CompilerGeneratedAttribute]
private ODataDeltaResourceSet <DeltaResourceSet>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ODataItemWrapper> <DeltaItems>k__BackingField;
    public ODataDeltaResourceSet DeltaResourceSet { get; }
    public IList`1<ODataItemWrapper> DeltaItems { get; }
    public ODataDeltaResourceSetWrapper(ODataDeltaResourceSet deltaResourceSet);
    [CompilerGeneratedAttribute]
public ODataDeltaResourceSet get_DeltaResourceSet();
    [CompilerGeneratedAttribute]
public IList`1<ODataItemWrapper> get_DeltaItems();
}
public class Microsoft.AspNetCore.OData.Formatter.Wrapper.ODataEntityReferenceLinkWrapper : ODataItemWrapper {
    [CompilerGeneratedAttribute]
private ODataEntityReferenceLink <EntityReferenceLink>k__BackingField;
    public ODataEntityReferenceLink EntityReferenceLink { get; }
    public ODataEntityReferenceLinkWrapper(ODataEntityReferenceLink link);
    [CompilerGeneratedAttribute]
public ODataEntityReferenceLink get_EntityReferenceLink();
}
public abstract class Microsoft.AspNetCore.OData.Formatter.Wrapper.ODataItemWrapper : object {
}
public class Microsoft.AspNetCore.OData.Formatter.Wrapper.ODataNestedResourceInfoWrapper : ODataItemWrapper {
    [CompilerGeneratedAttribute]
private ODataNestedResourceInfo <NestedResourceInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ODataItemWrapper> <NestedItems>k__BackingField;
    public ODataNestedResourceInfo NestedResourceInfo { get; }
    public IList`1<ODataItemWrapper> NestedItems { get; }
    public ODataNestedResourceInfoWrapper(ODataNestedResourceInfo nestedInfo);
    [CompilerGeneratedAttribute]
public ODataNestedResourceInfo get_NestedResourceInfo();
    [CompilerGeneratedAttribute]
public IList`1<ODataItemWrapper> get_NestedItems();
}
public class Microsoft.AspNetCore.OData.Formatter.Wrapper.ODataPrimitiveWrapper : ODataItemWrapper {
    [CompilerGeneratedAttribute]
private ODataPrimitiveValue <Value>k__BackingField;
    public ODataPrimitiveValue Value { get; }
    public ODataPrimitiveWrapper(ODataPrimitiveValue value);
    [CompilerGeneratedAttribute]
public ODataPrimitiveValue get_Value();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.OData.Formatter.Wrapper.ODataReaderExtensions : object {
    [ExtensionAttribute]
public static ODataItemWrapper ReadResourceOrResourceSet(ODataReader reader);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Formatter.Wrapper.ODataReaderExtensions/<ReadResourceOrResourceSetAsync>d__1")]
[ExtensionAttribute]
public static Task`1<ODataItemWrapper> ReadResourceOrResourceSetAsync(ODataReader reader);
    private static void ReadODataItem(ODataReader reader, Stack`1<ODataItemWrapper> itemsStack, ODataItemWrapper& topLevelItem);
    private static void ReadResource(ODataReader reader, Stack`1<ODataItemWrapper> itemsStack, ODataItemWrapper& topLevelItem);
    private static void ReadDeletedResource(ODataReader reader, Stack`1<ODataItemWrapper> itemsStack);
    private static void ReadResourceSet(ODataReader reader, Stack`1<ODataItemWrapper> itemsStack, ODataItemWrapper& topLevelItem);
    private static void ReadDeltaResourceSet(ODataReader reader, Stack`1<ODataItemWrapper> itemsStack, ODataItemWrapper& topLevelItem);
}
public abstract class Microsoft.AspNetCore.OData.Formatter.Wrapper.ODataResourceSetBaseWrapper : ODataItemWrapper {
}
public class Microsoft.AspNetCore.OData.Formatter.Wrapper.ODataResourceSetWrapper : ODataResourceSetBaseWrapper {
    [CompilerGeneratedAttribute]
private ODataResourceSet <ResourceSet>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ODataResourceWrapper> <Resources>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ODataItemWrapper> <Items>k__BackingField;
    public ODataResourceSet ResourceSet { get; }
    public IList`1<ODataResourceWrapper> Resources { get; }
    public IList`1<ODataItemWrapper> Items { get; }
    public ODataResourceSetWrapper(ODataResourceSet resourceSet);
    [CompilerGeneratedAttribute]
public ODataResourceSet get_ResourceSet();
    [CompilerGeneratedAttribute]
public IList`1<ODataResourceWrapper> get_Resources();
    [CompilerGeneratedAttribute]
public IList`1<ODataItemWrapper> get_Items();
}
public class Microsoft.AspNetCore.OData.Formatter.Wrapper.ODataResourceWrapper : ODataItemWrapper {
    [CompilerGeneratedAttribute]
private ODataResourceBase <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeletedResource>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ODataNestedResourceInfoWrapper> <NestedResourceInfos>k__BackingField;
    public ODataResourceBase Resource { get; }
    public bool IsDeletedResource { get; }
    public IList`1<ODataNestedResourceInfoWrapper> NestedResourceInfos { get; }
    public ODataResourceWrapper(ODataResourceBase resource);
    [CompilerGeneratedAttribute]
public ODataResourceBase get_Resource();
    [CompilerGeneratedAttribute]
public bool get_IsDeletedResource();
    [CompilerGeneratedAttribute]
public IList`1<ODataNestedResourceInfoWrapper> get_NestedResourceInfos();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.OData.ODataApplicationBuilderExtensions : object {
    private static string DefaultODataRouteDebugMiddlewareRoutePattern;
    [ExtensionAttribute]
public static IApplicationBuilder UseODataBatching(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseODataQueryRequest(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseODataRouteDebug(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseODataRouteDebug(IApplicationBuilder app, string routePattern);
}
public class Microsoft.AspNetCore.OData.ODataJsonOptionsSetup : object {
    public sealed virtual void Configure(JsonOptions options);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.OData.ODataMvcBuilderExtensions : object {
    [ExtensionAttribute]
public static IMvcBuilder AddOData(IMvcBuilder builder);
    [ExtensionAttribute]
public static IMvcBuilder AddOData(IMvcBuilder builder, Action`1<ODataOptions> setupAction);
    [ExtensionAttribute]
public static IMvcBuilder AddOData(IMvcBuilder builder, Action`2<ODataOptions, IServiceProvider> setupAction);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.OData.ODataMvcCoreBuilderExtensions : object {
    [ExtensionAttribute]
public static IMvcCoreBuilder AddOData(IMvcCoreBuilder builder);
    [ExtensionAttribute]
public static IMvcCoreBuilder AddOData(IMvcCoreBuilder builder, Action`1<ODataOptions> setupAction);
    [ExtensionAttribute]
public static IMvcCoreBuilder AddOData(IMvcCoreBuilder builder, Action`2<ODataOptions, IServiceProvider> setupAction);
}
public class Microsoft.AspNetCore.OData.ODataMvcOptionsSetup : object {
    public sealed virtual void Configure(MvcOptions options);
}
public class Microsoft.AspNetCore.OData.ODataOptions : object {
    [CompilerGeneratedAttribute]
private ODataUrlKeyDelimiter <UrlKeyDelimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableContinueOnErrorHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableAttributeRouting>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeZoneInfo <TimeZone>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IODataControllerActionConvention> <Conventions>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataRouteOptions <RouteOptions>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, ValueTuple`2<IEdmModel, IServiceProvider>> <RouteComponents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableNoDollarQueryOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultQueryConfigurations <QueryConfigurations>k__BackingField;
    public ODataUrlKeyDelimiter UrlKeyDelimiter { get; public set; }
    public bool EnableContinueOnErrorHeader { get; public set; }
    public bool EnableAttributeRouting { get; public set; }
    public TimeZoneInfo TimeZone { get; public set; }
    public IList`1<IODataControllerActionConvention> Conventions { get; }
    public ODataRouteOptions RouteOptions { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, ValueTuple`2<IEdmModel, IServiceProvider>> RouteComponents { get; }
    public bool EnableNoDollarQueryOptions { get; public set; }
    [ObsoleteAttribute("QuerySettings will be removed in the next major version. Use QueryConfigurations instead.")]
public DefaultQuerySettings QuerySettings { get; }
    public DefaultQueryConfigurations QueryConfigurations { get; }
    [CompilerGeneratedAttribute]
public ODataUrlKeyDelimiter get_UrlKeyDelimiter();
    [CompilerGeneratedAttribute]
public void set_UrlKeyDelimiter(ODataUrlKeyDelimiter value);
    [CompilerGeneratedAttribute]
public bool get_EnableContinueOnErrorHeader();
    [CompilerGeneratedAttribute]
public void set_EnableContinueOnErrorHeader(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableAttributeRouting();
    [CompilerGeneratedAttribute]
public void set_EnableAttributeRouting(bool value);
    [CompilerGeneratedAttribute]
public TimeZoneInfo get_TimeZone();
    [CompilerGeneratedAttribute]
public void set_TimeZone(TimeZoneInfo value);
    [CompilerGeneratedAttribute]
public IList`1<IODataControllerActionConvention> get_Conventions();
    [CompilerGeneratedAttribute]
public ODataRouteOptions get_RouteOptions();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ValueTuple`2<IEdmModel, IServiceProvider>> get_RouteComponents();
    public ODataOptions AddRouteComponents(IEdmModel model);
    public ODataOptions AddRouteComponents(IEdmModel model, ODataBatchHandler batchHandler);
    public ODataOptions AddRouteComponents(string routePrefix, IEdmModel model);
    public ODataOptions AddRouteComponents(string routePrefix, IEdmModel model, ODataBatchHandler batchHandler);
    public ODataOptions AddRouteComponents(string routePrefix, IEdmModel model, Action`1<IServiceCollection> configureServices);
    public ODataOptions AddRouteComponents(string routePrefix, IEdmModel model, ODataVersion version, Action`1<IServiceCollection> configureServices);
    public IServiceProvider GetRouteServices(string routePrefix);
    public ODataOptions EnableQueryFeatures(Nullable`1<int> maxTopValue);
    public ODataOptions Expand();
    public ODataOptions Select();
    public ODataOptions Filter();
    public ODataOptions OrderBy();
    public ODataOptions Count();
    public ODataOptions SkipToken();
    public ODataOptions SetMaxTop(Nullable`1<int> maxTopValue);
    [CompilerGeneratedAttribute]
public bool get_EnableNoDollarQueryOptions();
    [CompilerGeneratedAttribute]
public void set_EnableNoDollarQueryOptions(bool value);
    public DefaultQuerySettings get_QuerySettings();
    [CompilerGeneratedAttribute]
public DefaultQueryConfigurations get_QueryConfigurations();
    private IServiceProvider BuildRouteContainer(IEdmModel model, ODataVersion version, Action`1<IServiceCollection> setupAction);
    private static string SanitizeRoutePrefix(string routePrefix);
}
public class Microsoft.AspNetCore.OData.ODataOptionsSetup : object {
    private ILoggerFactory _loggerFactory;
    private IODataPathTemplateParser _templateParser;
    public ODataOptionsSetup(ILoggerFactory loggerFactory, IODataPathTemplateParser parser);
    public sealed virtual void Configure(ODataOptions options);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.OData.ODataServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddODataQueryFilter(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddODataQueryFilter(IServiceCollection services, IActionFilter queryFilter);
    [ExtensionAttribute]
internal static IServiceCollection AddODataCore(IServiceCollection services);
}
public static class Microsoft.AspNetCore.OData.ODataUriFunctions : object {
    public static void AddCustomUriFunction(string functionName, FunctionSignatureWithReturnType functionSignature, MethodInfo methodInfo);
    public static bool RemoveCustomUriFunction(string functionName, FunctionSignatureWithReturnType functionSignature, MethodInfo methodInfo);
}
[FlagsAttribute]
public enum Microsoft.AspNetCore.OData.Query.AllowedArithmeticOperators : Enum {
    public int value__;
    public static AllowedArithmeticOperators None;
    public static AllowedArithmeticOperators Add;
    public static AllowedArithmeticOperators Subtract;
    public static AllowedArithmeticOperators Multiply;
    public static AllowedArithmeticOperators Divide;
    public static AllowedArithmeticOperators Modulo;
    public static AllowedArithmeticOperators All;
}
[FlagsAttribute]
public enum Microsoft.AspNetCore.OData.Query.AllowedFunctions : Enum {
    public int value__;
    public static AllowedFunctions None;
    public static AllowedFunctions StartsWith;
    public static AllowedFunctions EndsWith;
    public static AllowedFunctions Contains;
    public static AllowedFunctions Length;
    public static AllowedFunctions IndexOf;
    public static AllowedFunctions Concat;
    public static AllowedFunctions Substring;
    public static AllowedFunctions ToLower;
    public static AllowedFunctions ToUpper;
    public static AllowedFunctions Trim;
    public static AllowedFunctions Cast;
    public static AllowedFunctions Year;
    public static AllowedFunctions Date;
    public static AllowedFunctions Month;
    public static AllowedFunctions Time;
    public static AllowedFunctions Day;
    public static AllowedFunctions Hour;
    public static AllowedFunctions Minute;
    public static AllowedFunctions Second;
    public static AllowedFunctions FractionalSeconds;
    public static AllowedFunctions Round;
    public static AllowedFunctions Floor;
    public static AllowedFunctions Ceiling;
    public static AllowedFunctions IsOf;
    public static AllowedFunctions Any;
    public static AllowedFunctions All;
    public static AllowedFunctions MatchesPattern;
    public static AllowedFunctions AllStringFunctions;
    public static AllowedFunctions AllDateTimeFunctions;
    public static AllowedFunctions AllMathFunctions;
    public static AllowedFunctions AllFunctions;
}
[FlagsAttribute]
public enum Microsoft.AspNetCore.OData.Query.AllowedLogicalOperators : Enum {
    public int value__;
    public static AllowedLogicalOperators None;
    public static AllowedLogicalOperators Or;
    public static AllowedLogicalOperators And;
    public static AllowedLogicalOperators Equal;
    public static AllowedLogicalOperators NotEqual;
    public static AllowedLogicalOperators GreaterThan;
    public static AllowedLogicalOperators GreaterThanOrEqual;
    public static AllowedLogicalOperators LessThan;
    public static AllowedLogicalOperators LessThanOrEqual;
    public static AllowedLogicalOperators Not;
    public static AllowedLogicalOperators Has;
    public static AllowedLogicalOperators All;
}
[FlagsAttribute]
public enum Microsoft.AspNetCore.OData.Query.AllowedQueryOptions : Enum {
    public int value__;
    public static AllowedQueryOptions None;
    public static AllowedQueryOptions Filter;
    public static AllowedQueryOptions Expand;
    public static AllowedQueryOptions Select;
    public static AllowedQueryOptions OrderBy;
    public static AllowedQueryOptions Top;
    public static AllowedQueryOptions Skip;
    public static AllowedQueryOptions Count;
    public static AllowedQueryOptions Format;
    public static AllowedQueryOptions SkipToken;
    public static AllowedQueryOptions DeltaToken;
    public static AllowedQueryOptions Apply;
    public static AllowedQueryOptions Compute;
    public static AllowedQueryOptions Search;
    public static AllowedQueryOptions Supported;
    public static AllowedQueryOptions All;
}
public class Microsoft.AspNetCore.OData.Query.ApplyQueryOption : object {
    private ApplyClause _applyClause;
    private ODataQueryOptionParser _queryOptionParser;
    [CompilerGeneratedAttribute]
private ODataQueryContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResultClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawValue>k__BackingField;
    public ODataQueryContext Context { get; private set; }
    public Type ResultClrType { get; private set; }
    public ApplyClause ApplyClause { get; }
    public string RawValue { get; private set; }
    public ApplyQueryOption(string rawValue, ODataQueryContext context, ODataQueryOptionParser queryOptionParser);
    internal ApplyQueryOption(string rawValue, ODataQueryContext context);
    [CompilerGeneratedAttribute]
public ODataQueryContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ODataQueryContext value);
    [CompilerGeneratedAttribute]
public Type get_ResultClrType();
    [CompilerGeneratedAttribute]
private void set_ResultClrType(Type value);
    public ApplyClause get_ApplyClause();
    [CompilerGeneratedAttribute]
public string get_RawValue();
    [CompilerGeneratedAttribute]
private void set_RawValue(string value);
    public IQueryable ApplyTo(IQueryable query, ODataQuerySettings querySettings);
}
internal class Microsoft.AspNetCore.OData.Query.ClrCanonicalFunctions : object {
    private static string _defaultString;
    private static Enum _defaultEnum;
    internal static string StartswithFunctionName;
    internal static string EndswithFunctionName;
    internal static string ContainsFunctionName;
    internal static string SubstringFunctionName;
    internal static string LengthFunctionName;
    internal static string IndexofFunctionName;
    internal static string TolowerFunctionName;
    internal static string ToupperFunctionName;
    internal static string TrimFunctionName;
    internal static string ConcatFunctionName;
    internal static string MatchesPatternFunctionName;
    internal static string YearFunctionName;
    internal static string MonthFunctionName;
    internal static string DayFunctionName;
    internal static string HourFunctionName;
    internal static string MinuteFunctionName;
    internal static string SecondFunctionName;
    internal static string MillisecondFunctionName;
    internal static string FractionalSecondsFunctionName;
    internal static string RoundFunctionName;
    internal static string FloorFunctionName;
    internal static string CeilingFunctionName;
    internal static string CastFunctionName;
    internal static string IsofFunctionName;
    internal static string DateFunctionName;
    internal static string TimeFunctionName;
    internal static string NowFunctionName;
    public static MethodInfo StartsWith;
    public static MethodInfo EndsWith;
    public static MethodInfo Contains;
    public static MethodInfo SubstringStart;
    public static MethodInfo SubstringStartAndLength;
    public static MethodInfo SubstringStartNoThrow;
    public static MethodInfo SubstringStartAndLengthNoThrow;
    public static MethodInfo IndexOf;
    public static MethodInfo ToLower;
    public static MethodInfo ToUpper;
    public static MethodInfo Trim;
    public static MethodInfo Concat;
    public static MethodInfo MatchesMattern;
    public static MethodInfo CeilingOfDouble;
    public static MethodInfo RoundOfDouble;
    public static MethodInfo FloorOfDouble;
    public static MethodInfo CeilingOfDecimal;
    public static MethodInfo RoundOfDecimal;
    public static MethodInfo FloorOfDecimal;
    public static MethodInfo HasFlag;
    public static Dictionary`2<string, PropertyInfo> DateProperties;
    public static Dictionary`2<string, PropertyInfo> DateTimeProperties;
    public static Dictionary`2<string, PropertyInfo> DateTimeOffsetProperties;
    public static Dictionary`2<string, PropertyInfo> TimeOfDayProperties;
    public static Dictionary`2<string, PropertyInfo> DateOnlyProperties;
    public static Dictionary`2<string, PropertyInfo> TimeOnlyProperties;
    public static Dictionary`2<string, PropertyInfo> TimeSpanProperties;
    public static PropertyInfo Length;
    public static PropertyInfo DateTimeKindPropertyInfo;
    public static MethodInfo ToUniversalTimeDateTime;
    public static MethodInfo ToUniversalTimeDateTimeOffset;
    public static MethodInfo ToOffsetFunction;
    public static MethodInfo GetUtcOffset;
    private static ClrCanonicalFunctions();
    private static MethodInfo MethodOf(Expression`1<Func`2<object, TReturn>> expression);
    private static MethodInfo MethodOf(Expression expression);
}
internal class Microsoft.AspNetCore.OData.Query.ClrSafeFunctions : object {
    public static string SubstringStart(string str, int startIndex);
    public static string SubstringStartAndLength(string str, int startIndex, int length);
}
public class Microsoft.AspNetCore.OData.Query.ComputeQueryOption : object {
    private ComputeClause _computeClause;
    private ODataQueryOptionParser _queryOptionParser;
    [CompilerGeneratedAttribute]
private ODataQueryContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResultClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IComputeQueryValidator <Validator>k__BackingField;
    public ODataQueryContext Context { get; }
    public Type ResultClrType { get; }
    public ComputeClause ComputeClause { get; }
    public string RawValue { get; }
    public IComputeQueryValidator Validator { get; public set; }
    public ComputeQueryOption(string rawValue, ODataQueryContext context, ODataQueryOptionParser queryOptionParser);
    internal ComputeQueryOption(string rawValue, ODataQueryContext context);
    [CompilerGeneratedAttribute]
public ODataQueryContext get_Context();
    [CompilerGeneratedAttribute]
public Type get_ResultClrType();
    public ComputeClause get_ComputeClause();
    [CompilerGeneratedAttribute]
public string get_RawValue();
    [CompilerGeneratedAttribute]
public IComputeQueryValidator get_Validator();
    [CompilerGeneratedAttribute]
public void set_Validator(IComputeQueryValidator value);
    public void Validate(ODataValidationSettings validationSettings);
}
internal class Microsoft.AspNetCore.OData.Query.Container.AggregationPropertyContainer : NamedProperty`1<object> {
    [CompilerGeneratedAttribute]
private AggregationPropertyContainer <Next>k__BackingField;
    public GroupByWrapper NestedValue { get; public set; }
    public AggregationPropertyContainer Next { get; public set; }
    public GroupByWrapper get_NestedValue();
    public void set_NestedValue(GroupByWrapper value);
    [CompilerGeneratedAttribute]
public AggregationPropertyContainer get_Next();
    [CompilerGeneratedAttribute]
public void set_Next(AggregationPropertyContainer value);
    public virtual void ToDictionaryCore(Dictionary`2<string, object> dictionary, IPropertyMapper propertyMapper, bool includeAutoSelected);
    public virtual object GetValue();
    public static Expression CreateNextNamedPropertyContainer(IList`1<NamedPropertyExpression> properties);
    private static Expression CreateNextNamedPropertyCreationExpression(NamedPropertyExpression property, Expression next);
}
internal class Microsoft.AspNetCore.OData.Query.Container.AutoSelectedNamedProperty`1 : NamedProperty`1<T> {
}
internal class Microsoft.AspNetCore.OData.Query.Container.CollectionExpandedProperty`1 : NamedProperty`1<T> {
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Collection>k__BackingField;
    public int PageSize { get; public set; }
    public Nullable`1<long> TotalCount { get; public set; }
    public IEnumerable`1<T> Collection { get; public set; }
    [CompilerGeneratedAttribute]
public int get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_TotalCount();
    [CompilerGeneratedAttribute]
public void set_TotalCount(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_Collection();
    [CompilerGeneratedAttribute]
public void set_Collection(IEnumerable`1<T> value);
    public virtual object GetValue();
}
internal class Microsoft.AspNetCore.OData.Query.Container.IdentityPropertyMapper : object {
    public sealed virtual string MapProperty(string propertyName);
}
public interface Microsoft.AspNetCore.OData.Query.Container.IPropertyMapper {
    public abstract virtual string MapProperty(string propertyName);
}
public interface Microsoft.AspNetCore.OData.Query.Container.ITruncatedCollection {
    public int PageSize { get; }
    public bool IsTruncated { get; }
    public abstract virtual int get_PageSize();
    public abstract virtual bool get_IsTruncated();
}
internal class Microsoft.AspNetCore.OData.Query.Container.JsonPropertyNameMapper : object {
    private IEdmModel _model;
    private IEdmStructuredType _type;
    public JsonPropertyNameMapper(IEdmModel model, IEdmStructuredType type);
    public sealed virtual string MapProperty(string propertyName);
    private PropertyInfo GetPropertyInfo(IEdmProperty property);
    private static JsonPropertyNameAttribute GetJsonProperty(PropertyInfo property);
    private static JsonIgnoreAttribute GetJsonIgnore(PropertyInfo property);
}
internal abstract class Microsoft.AspNetCore.OData.Query.Container.LinqParameterContainer : object {
    private static ConcurrentDictionary`2<Type, Func`2<object, LinqParameterContainer>> _ctors;
    public object Property { get; }
    private static LinqParameterContainer();
    public abstract virtual object get_Property();
    public static Expression Parameterize(Type type, object value);
    private static LinqParameterContainer Create(Type type, object value);
    public static LinqParameterContainer CreateInternal(T value);
}
internal class Microsoft.AspNetCore.OData.Query.Container.NamedProperty`1 : PropertyContainer {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoSelected>k__BackingField;
    public string Name { get; public set; }
    public T Value { get; public set; }
    public bool AutoSelected { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
    [CompilerGeneratedAttribute]
public bool get_AutoSelected();
    [CompilerGeneratedAttribute]
public void set_AutoSelected(bool value);
    public virtual void ToDictionaryCore(Dictionary`2<string, object> dictionary, IPropertyMapper propertyMapper, bool includeAutoSelected);
    public virtual object GetValue();
}
public class Microsoft.AspNetCore.OData.Query.Container.NamedPropertyExpression : object {
    [CompilerGeneratedAttribute]
private Expression <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <NullCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoSelected>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CountOption>k__BackingField;
    public Expression Name { get; private set; }
    public Expression Value { get; private set; }
    public Expression TotalCount { get; public set; }
    public Expression NullCheck { get; public set; }
    public Nullable`1<int> PageSize { get; public set; }
    public bool AutoSelected { get; public set; }
    public Nullable`1<bool> CountOption { get; public set; }
    public NamedPropertyExpression(Expression name, Expression value);
    [CompilerGeneratedAttribute]
public Expression get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(Expression value);
    [CompilerGeneratedAttribute]
public Expression get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(Expression value);
    [CompilerGeneratedAttribute]
public Expression get_TotalCount();
    [CompilerGeneratedAttribute]
public void set_TotalCount(Expression value);
    [CompilerGeneratedAttribute]
public Expression get_NullCheck();
    [CompilerGeneratedAttribute]
public void set_NullCheck(Expression value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_AutoSelected();
    [CompilerGeneratedAttribute]
public void set_AutoSelected(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CountOption();
    [CompilerGeneratedAttribute]
public void set_CountOption(Nullable`1<bool> value);
}
[ExcludeFromCodeCoverageAttribute]
internal abstract class Microsoft.AspNetCore.OData.Query.Container.PropertyContainer : object {
    private static List`1<Type> SingleExpandedPropertyTypes;
    private static List`1<Type> CollectionExpandedPropertyTypes;
    private static List`1<Type> AutoSelectedNamedPropertyTypes;
    private static List`1<Type> NamedPropertyTypes;
    private static PropertyContainer();
    public Dictionary`2<string, object> ToDictionary(IPropertyMapper propertyMapper, bool includeAutoSelected);
    public abstract virtual void ToDictionaryCore(Dictionary`2<string, object> dictionary, IPropertyMapper propertyMapper, bool includeAutoSelected);
    public static Expression CreatePropertyContainer(IList`1<NamedPropertyExpression> properties);
    private static int GetLeftSize(int count, int parts);
    private static Expression CreateNamedPropertyCreationExpression(NamedPropertyExpression property, IList`1<Expression> expressions);
    private static Type GetNamedPropertyType(NamedPropertyExpression property, IList`1<Expression> expressions);
}
internal class Microsoft.AspNetCore.OData.Query.Container.SingleExpandedProperty`1 : NamedProperty`1<T> {
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    public bool IsNull { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsNull();
    [CompilerGeneratedAttribute]
public void set_IsNull(bool value);
    public virtual object GetValue();
}
public class Microsoft.AspNetCore.OData.Query.Container.TruncatedCollection`1 : List`1<T> {
    private static int DefaultCapacity;
    private static int MinPageSize;
    private bool _isTruncated;
    private int _pageSize;
    private Nullable`1<long> _totalCount;
    public int PageSize { get; }
    public bool IsTruncated { get; }
    public Nullable`1<long> TotalCount { get; }
    public TruncatedCollection`1(IEnumerable`1<T> source, int pageSize);
    public TruncatedCollection`1(IQueryable`1<T> source, int pageSize);
    public TruncatedCollection`1(IQueryable`1<T> source, int pageSize, bool parameterize);
    public TruncatedCollection`1(IEnumerable`1<T> source, int pageSize, Nullable`1<long> totalCount);
    [ObsoleteAttribute("should not be used, will be marked internal in the next major version")]
public TruncatedCollection`1(IQueryable`1<T> source, int pageSize, Nullable`1<long> totalCount);
    [ObsoleteAttribute("should not be used, will be marked internal in the next major version")]
public TruncatedCollection`1(IQueryable`1<T> source, int pageSize, Nullable`1<long> totalCount, bool parameterize);
    private void Initialize(int pageSize);
    private static IQueryable`1<T> Take(IQueryable`1<T> source, int pageSize, bool parameterize);
    public sealed virtual int get_PageSize();
    public sealed virtual bool get_IsTruncated();
    public sealed virtual Nullable`1<long> get_TotalCount();
}
public class Microsoft.AspNetCore.OData.Query.CountQueryOption : object {
    private Nullable`1<bool> _value;
    private ODataQueryOptionParser _queryOptionParser;
    [CompilerGeneratedAttribute]
private ODataQueryContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ICountQueryValidator <Validator>k__BackingField;
    public ODataQueryContext Context { get; private set; }
    public string RawValue { get; private set; }
    public bool Value { get; }
    public ICountQueryValidator Validator { get; public set; }
    public CountQueryOption(string rawValue, ODataQueryContext context, ODataQueryOptionParser queryOptionParser);
    internal CountQueryOption(string rawValue, ODataQueryContext context);
    [CompilerGeneratedAttribute]
public ODataQueryContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ODataQueryContext value);
    [CompilerGeneratedAttribute]
public string get_RawValue();
    [CompilerGeneratedAttribute]
private void set_RawValue(string value);
    public bool get_Value();
    [CompilerGeneratedAttribute]
public ICountQueryValidator get_Validator();
    [CompilerGeneratedAttribute]
public void set_Validator(ICountQueryValidator value);
    public void Validate(ODataValidationSettings validationSettings);
    public Nullable`1<long> GetEntityCount(IQueryable query);
    internal Func`1<long> GetEntityCountFunc(IQueryable query);
}
public class Microsoft.AspNetCore.OData.Query.DefaultODataQueryRequestParser : object {
    private static MediaTypeHeaderValue SupportedMediaType;
    private static DefaultODataQueryRequestParser();
    public sealed virtual bool CanParse(HttpRequest request);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Query.DefaultODataQueryRequestParser/<ParseAsync>d__2")]
public sealed virtual Task`1<string> ParseAsync(HttpRequest request);
}
public class Microsoft.AspNetCore.OData.Query.DefaultQueryConfigurations : DefaultQuerySettings {
}
public class Microsoft.AspNetCore.OData.Query.DefaultSkipTokenHandler : SkipTokenHandler {
    private static char CommaDelimiter;
    private static char propertyDelimiter;
    internal static DefaultSkipTokenHandler Instance;
    private static DefaultSkipTokenHandler();
    public virtual Uri GenerateNextPageLink(Uri baseUri, int pageSize, object instance, ODataSerializerContext context);
    internal static string GenerateSkipTokenValue(object lastMember, IEdmModel model, OrderByClause clause, ODataSerializerContext context);
    private static List`1<KeyValuePair`2<string, object>> GetPropertyValues(object source, IEdmModel model, List`1<OrderByClause> clauses, ODataSerializerContext context);
    private static object GetValue(IEdmStructuredObject source, String[] orderByNames, int index, String& name);
    public virtual IQueryable`1<T> ApplyTo(IQueryable`1<T> query, SkipTokenQueryOption skipTokenQueryOption, ODataQuerySettings querySettings, ODataQueryOptions queryOptions);
    public virtual IQueryable ApplyTo(IQueryable query, SkipTokenQueryOption skipTokenQueryOption, ODataQuerySettings querySettings, ODataQueryOptions queryOptions);
    private static IQueryable ApplyToImplementation(IQueryable query, SkipTokenQueryOption skipTokenQueryOption, ODataQuerySettings querySettings, ODataQueryOptions queryOptions);
    private static IQueryable ApplyToCore(IQueryable query, ODataQuerySettings querySettings, ODataQueryOptions queryOptions, string skipTokenRawValue);
    internal static String[] PopulatePropertyValues(string value);
    internal static List`1<OrderByClause> GetOrderByClauses(object lastMember, IEdmModel model, OrderByClause clause);
    internal static IEdmType GetTypeFromObject(object value, IEdmModel model);
    private static IList`1<string> ParseValue(string value, char delim);
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.OData.Query.EnableQueryAttribute : ActionFilterAttribute {
    private static char CommaSeparator;
    private ODataValidationSettings _validationSettings;
    private string _allowedOrderByProperties;
    private ODataQuerySettings _querySettings;
    public bool EnsureStableOrdering { get; public set; }
    public HandleNullPropagationOption HandleNullPropagation { get; public set; }
    public bool EnableConstantParameterization { get; public set; }
    public bool EnableCorrelatedSubqueryBuffering { get; public set; }
    public int MaxAnyAllExpressionDepth { get; public set; }
    public int MaxNodeCount { get; public set; }
    public int PageSize { get; public set; }
    public bool HandleReferenceNavigationPropertyExpandFilter { get; public set; }
    public AllowedQueryOptions AllowedQueryOptions { get; public set; }
    public AllowedFunctions AllowedFunctions { get; public set; }
    public AllowedArithmeticOperators AllowedArithmeticOperators { get; public set; }
    public AllowedLogicalOperators AllowedLogicalOperators { get; public set; }
    public string AllowedOrderByProperties { get; public set; }
    public int MaxSkip { get; public set; }
    public int MaxTop { get; public set; }
    public int MaxExpansionDepth { get; public set; }
    public int MaxOrderByNodeCount { get; public set; }
    public bool get_EnsureStableOrdering();
    public void set_EnsureStableOrdering(bool value);
    public HandleNullPropagationOption get_HandleNullPropagation();
    public void set_HandleNullPropagation(HandleNullPropagationOption value);
    public bool get_EnableConstantParameterization();
    public void set_EnableConstantParameterization(bool value);
    public bool get_EnableCorrelatedSubqueryBuffering();
    public void set_EnableCorrelatedSubqueryBuffering(bool value);
    public int get_MaxAnyAllExpressionDepth();
    public void set_MaxAnyAllExpressionDepth(int value);
    public int get_MaxNodeCount();
    public void set_MaxNodeCount(int value);
    public int get_PageSize();
    public void set_PageSize(int value);
    public bool get_HandleReferenceNavigationPropertyExpandFilter();
    public void set_HandleReferenceNavigationPropertyExpandFilter(bool value);
    public AllowedQueryOptions get_AllowedQueryOptions();
    public void set_AllowedQueryOptions(AllowedQueryOptions value);
    public AllowedFunctions get_AllowedFunctions();
    public void set_AllowedFunctions(AllowedFunctions value);
    public AllowedArithmeticOperators get_AllowedArithmeticOperators();
    public void set_AllowedArithmeticOperators(AllowedArithmeticOperators value);
    public AllowedLogicalOperators get_AllowedLogicalOperators();
    public void set_AllowedLogicalOperators(AllowedLogicalOperators value);
    public string get_AllowedOrderByProperties();
    public void set_AllowedOrderByProperties(string value);
    public int get_MaxSkip();
    public void set_MaxSkip(int value);
    public int get_MaxTop();
    public void set_MaxTop(int value);
    public int get_MaxExpansionDepth();
    public void set_MaxExpansionDepth(int value);
    public int get_MaxOrderByNodeCount();
    public void set_MaxOrderByNodeCount(int value);
    public virtual void OnActionExecuting(ActionExecutingContext actionExecutingContext);
    protected virtual ODataQueryOptions CreateQueryOptionsOnExecuting(ActionExecutingContext actionExecutingContext);
    public virtual void OnActionExecuted(ActionExecutedContext actionExecutedContext);
    private object OnActionExecuted(ActionExecutedContext actionExecutedContext, object responseValue, IQueryable singleResultCollection, ControllerActionDescriptor actionDescriptor, HttpRequest request);
    private void GetModelBoundPageSize(ActionExecutedContext actionExecutedContext, object responseValue, IQueryable singleResultCollection, ControllerActionDescriptor actionDescriptor, HttpRequest request);
    private static BadRequestObjectResult CreateBadRequestResult(string message, Exception exception);
    public static SerializableError CreateErrorResponse(string message, Exception exception);
    private static bool IsSuccessStatusCode(int statusCode);
    private object ExecuteQuery(object responseValue, IQueryable singleResultCollection, ControllerActionDescriptor actionDescriptor, HttpRequest request);
    public virtual IQueryable ApplyQuery(IQueryable queryable, ODataQueryOptions queryOptions);
    public virtual object ApplyQuery(object entity, ODataQueryOptions queryOptions);
    protected virtual ODataQueryOptions CreateAndValidateQueryOptions(HttpRequest request, ODataQueryContext queryContext);
    internal static object SingleOrDefault(IQueryable queryable, ControllerActionDescriptor actionDescriptor);
    internal static void ValidateSelectExpandOnly(ODataQueryOptions queryOptions);
    private ODataQueryContext GetODataQueryContext(object responseValue, IQueryable singleResultCollection, ControllerActionDescriptor actionDescriptor, HttpRequest request);
    internal static Type GetElementType(object responseValue, IQueryable singleResultCollection, ControllerActionDescriptor actionDescriptor);
    public virtual void ValidateQuery(HttpRequest request, ODataQueryOptions queryOptions);
    private bool ContainsAutoSelectExpandProperty(object responseValue, IQueryable singleResultCollection, ControllerActionDescriptor actionDescriptor, HttpRequest request);
    public virtual IEdmModel GetModel(Type elementClrType, HttpRequest request, ActionDescriptor actionDescriptor);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.OData.Query.ETag : DynamicObject {
    private IDictionary`2<string, object> _concurrencyProperties;
    [CompilerGeneratedAttribute]
private bool <IsWellFormed>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAny>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIfNoneMatch>k__BackingField;
    public object Item { get; public set; }
    public bool IsWellFormed { get; public set; }
    public Type EntityType { get; public set; }
    public bool IsAny { get; public set; }
    public bool IsIfNoneMatch { get; public set; }
    internal IDictionary`2<string, object> ConcurrencyProperties { get; internal set; }
    public object get_Item(string key);
    public void set_Item(string key, object value);
    [CompilerGeneratedAttribute]
public bool get_IsWellFormed();
    [CompilerGeneratedAttribute]
public void set_IsWellFormed(bool value);
    [CompilerGeneratedAttribute]
public Type get_EntityType();
    [CompilerGeneratedAttribute]
public void set_EntityType(Type value);
    [CompilerGeneratedAttribute]
public bool get_IsAny();
    [CompilerGeneratedAttribute]
public void set_IsAny(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsIfNoneMatch();
    [CompilerGeneratedAttribute]
public void set_IsIfNoneMatch(bool value);
    internal IDictionary`2<string, object> get_ConcurrencyProperties();
    internal void set_ConcurrencyProperties(IDictionary`2<string, object> value);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public virtual IQueryable ApplyTo(IQueryable query);
}
public class Microsoft.AspNetCore.OData.Query.ETag`1 : ETag {
    public virtual IQueryable ApplyTo(IQueryable query);
    public IQueryable`1<TEntity> ApplyTo(IQueryable`1<TEntity> query);
    private static void ValidateQuery(IQueryable query);
}
internal class Microsoft.AspNetCore.OData.Query.ExpressionHelperMethods : object {
    private static MethodInfo _enumerableWhereMethod;
    private static MethodInfo _queryableToListMethod;
    private static MethodInfo _orderByMethod;
    private static MethodInfo _enumerableOrderByMethod;
    private static MethodInfo _orderByDescendingMethod;
    private static MethodInfo _enumerableOrderByDescendingMethod;
    private static MethodInfo _thenByMethod;
    private static MethodInfo _enumerableThenByMethod;
    private static MethodInfo _thenByDescendingMethod;
    private static MethodInfo _enumerableThenByDescendingMethod;
    private static MethodInfo _countMethod;
    private static MethodInfo _enumerableGroupByMethod;
    private static MethodInfo _groupByMethod;
    private static MethodInfo _aggregateMethod;
    private static MethodInfo _skipMethod;
    private static MethodInfo _enumerableSkipMethod;
    private static MethodInfo _whereMethod;
    private static MethodInfo _queryableCastMethod;
    private static MethodInfo _enumerableCastMethod;
    private static MethodInfo _queryableContainsMethod;
    private static MethodInfo _enumerableContainsMethod;
    private static MethodInfo _queryableEmptyAnyMethod;
    private static MethodInfo _queryableNonEmptyAnyMethod;
    private static MethodInfo _queryableAllMethod;
    private static MethodInfo _enumerableEmptyAnyMethod;
    private static MethodInfo _enumerableNonEmptyAnyMethod;
    private static MethodInfo _enumerableAllMethod;
    private static MethodInfo _enumerableOfTypeMethod;
    private static MethodInfo _queryableOfTypeMethod;
    private static MethodInfo _enumerableSelectManyMethod;
    private static MethodInfo _queryableSelectManyMethod;
    private static MethodInfo _enumerableSelectMethod;
    private static MethodInfo _queryableSelectMethod;
    private static MethodInfo _queryableTakeMethod;
    private static MethodInfo _enumerableTakeMethod;
    private static MethodInfo _queryableAsQueryableMethod;
    private static MethodInfo _toQueryableMethod;
    private static Dictionary`2<Type, MethodInfo> _queryableSumMethods;
    private static Dictionary`2<Type, MethodInfo> _enumerableSumMethods;
    private static MethodInfo _enumerableMinMethod;
    private static MethodInfo _enumerableMaxMethod;
    private static MethodInfo _enumerableDistinctMethod;
    private static MethodInfo _queryableMinMethod;
    private static MethodInfo _queryableMaxMethod;
    private static MethodInfo _queryableDistinctMethod;
    private static MethodInfo _createQueryGenericMethod;
    private static Dictionary`2<Type, MethodInfo> _enumerableAverageMethods;
    private static Dictionary`2<Type, MethodInfo> _queryableAverageMethods;
    private static MethodInfo _enumerableCountMethod;
    private static MethodInfo _safeConvertToDecimalMethod;
    public static MethodInfo EnumerableWhereGeneric { get; }
    public static MethodInfo QueryableToList { get; }
    public static MethodInfo QueryableOrderByGeneric { get; }
    public static MethodInfo EnumerableOrderByGeneric { get; }
    public static MethodInfo QueryableOrderByDescendingGeneric { get; }
    public static MethodInfo EnumerableOrderByDescendingGeneric { get; }
    public static MethodInfo QueryableThenByGeneric { get; }
    public static MethodInfo EnumerableThenByGeneric { get; }
    public static MethodInfo QueryableThenByDescendingGeneric { get; }
    public static MethodInfo EnumerableThenByDescendingGeneric { get; }
    public static MethodInfo QueryableCountGeneric { get; }
    public static Dictionary`2<Type, MethodInfo> QueryableSumGenerics { get; }
    public static Dictionary`2<Type, MethodInfo> EnumerableSumGenerics { get; }
    public static MethodInfo QueryableMin { get; }
    public static MethodInfo EnumerableMin { get; }
    public static MethodInfo QueryableMax { get; }
    public static MethodInfo EnumerableMax { get; }
    public static Dictionary`2<Type, MethodInfo> QueryableAverageGenerics { get; }
    public static Dictionary`2<Type, MethodInfo> EnumerableAverageGenerics { get; }
    public static MethodInfo QueryableDistinct { get; }
    public static MethodInfo EnumerableDistinct { get; }
    public static MethodInfo QueryableGroupByGeneric { get; }
    public static MethodInfo EnumerableGroupByGeneric { get; }
    public static MethodInfo QueryableAggregateGeneric { get; }
    public static MethodInfo QueryableTakeGeneric { get; }
    public static MethodInfo EnumerableTakeGeneric { get; }
    public static MethodInfo QueryableSkipGeneric { get; }
    public static MethodInfo EnumerableSkipGeneric { get; }
    public static MethodInfo QueryableWhereGeneric { get; }
    public static MethodInfo QueryableCastGeneric { get; }
    public static MethodInfo EnumerableCastGeneric { get; }
    public static MethodInfo QueryableContainsGeneric { get; }
    public static MethodInfo EnumerableContainsGeneric { get; }
    public static MethodInfo QueryableSelectGeneric { get; }
    public static MethodInfo EnumerableSelectGeneric { get; }
    public static MethodInfo QueryableSelectManyGeneric { get; }
    public static MethodInfo EnumerableSelectManyGeneric { get; }
    public static MethodInfo QueryableEmptyAnyGeneric { get; }
    public static MethodInfo QueryableNonEmptyAnyGeneric { get; }
    public static MethodInfo QueryableAllGeneric { get; }
    public static MethodInfo EnumerableEmptyAnyGeneric { get; }
    public static MethodInfo EnumerableNonEmptyAnyGeneric { get; }
    public static MethodInfo EnumerableAllGeneric { get; }
    public static MethodInfo EnumerableOfType { get; }
    public static MethodInfo QueryableOfType { get; }
    public static MethodInfo QueryableAsQueryable { get; }
    public static MethodInfo EntityAsQueryable { get; }
    public static MethodInfo EnumerableCountGeneric { get; }
    public static MethodInfo ConvertToDecimal { get; }
    public static MethodInfo CreateQueryGeneric { get; }
    private static ExpressionHelperMethods();
    public static MethodInfo get_EnumerableWhereGeneric();
    public static MethodInfo get_QueryableToList();
    public static MethodInfo get_QueryableOrderByGeneric();
    public static MethodInfo get_EnumerableOrderByGeneric();
    public static MethodInfo get_QueryableOrderByDescendingGeneric();
    public static MethodInfo get_EnumerableOrderByDescendingGeneric();
    public static MethodInfo get_QueryableThenByGeneric();
    public static MethodInfo get_EnumerableThenByGeneric();
    public static MethodInfo get_QueryableThenByDescendingGeneric();
    public static MethodInfo get_EnumerableThenByDescendingGeneric();
    public static MethodInfo get_QueryableCountGeneric();
    public static Dictionary`2<Type, MethodInfo> get_QueryableSumGenerics();
    public static Dictionary`2<Type, MethodInfo> get_EnumerableSumGenerics();
    public static MethodInfo get_QueryableMin();
    public static MethodInfo get_EnumerableMin();
    public static MethodInfo get_QueryableMax();
    public static MethodInfo get_EnumerableMax();
    public static Dictionary`2<Type, MethodInfo> get_QueryableAverageGenerics();
    public static Dictionary`2<Type, MethodInfo> get_EnumerableAverageGenerics();
    public static MethodInfo get_QueryableDistinct();
    public static MethodInfo get_EnumerableDistinct();
    public static MethodInfo get_QueryableGroupByGeneric();
    public static MethodInfo get_EnumerableGroupByGeneric();
    public static MethodInfo get_QueryableAggregateGeneric();
    public static MethodInfo get_QueryableTakeGeneric();
    public static MethodInfo get_EnumerableTakeGeneric();
    public static MethodInfo get_QueryableSkipGeneric();
    public static MethodInfo get_EnumerableSkipGeneric();
    public static MethodInfo get_QueryableWhereGeneric();
    public static MethodInfo get_QueryableCastGeneric();
    public static MethodInfo get_EnumerableCastGeneric();
    public static MethodInfo get_QueryableContainsGeneric();
    public static MethodInfo get_EnumerableContainsGeneric();
    public static MethodInfo get_QueryableSelectGeneric();
    public static MethodInfo get_EnumerableSelectGeneric();
    public static MethodInfo get_QueryableSelectManyGeneric();
    public static MethodInfo get_EnumerableSelectManyGeneric();
    public static MethodInfo get_QueryableEmptyAnyGeneric();
    public static MethodInfo get_QueryableNonEmptyAnyGeneric();
    public static MethodInfo get_QueryableAllGeneric();
    public static MethodInfo get_EnumerableEmptyAnyGeneric();
    public static MethodInfo get_EnumerableNonEmptyAnyGeneric();
    public static MethodInfo get_EnumerableAllGeneric();
    public static MethodInfo get_EnumerableOfType();
    public static MethodInfo get_QueryableOfType();
    public static MethodInfo get_QueryableAsQueryable();
    public static MethodInfo get_EntityAsQueryable();
    public static MethodInfo get_EnumerableCountGeneric();
    public static MethodInfo get_ConvertToDecimal();
    public static MethodInfo get_CreateQueryGeneric();
    public static IQueryable ToQueryable(T value);
    public static Nullable`1<decimal> SafeConvertToDecimal(object value);
    private static MethodInfo GenericMethodOf(Expression`1<Func`2<object, TReturn>> expression);
    private static MethodInfo GenericMethodOf(Expression expression);
    private static Dictionary`2<Type, MethodInfo> GetQueryableAggregationMethods(string methodName);
    private static Dictionary`2<Type, MethodInfo> GetEnumerableAggregationMethods(string methodName);
    private static MethodInfo GetCreateQueryGenericMethod();
}
internal static class Microsoft.AspNetCore.OData.Query.ExpressionHelpers : object {
    public static Func`1<long> Count(IQueryable query, Type type);
    public static IQueryable Skip(IQueryable query, int count, Type type, bool parameterize);
    public static IQueryable Take(IQueryable query, int count, Type type, bool parameterize);
    public static Expression Skip(Expression source, int count, Type type, bool parameterize);
    public static Expression Take(Expression source, int count, Type elementType, bool parameterize);
    public static Expression OrderByPropertyExpression(Expression source, string propertyName, Type elementType, bool alreadyOrdered);
    public static Expression OrderBy(Expression source, LambdaExpression orderByLambda, Type elementType, OrderByDirection direction, bool alreadyOrdered);
    public static IQueryable OrderByIt(IQueryable query, OrderByDirection direction, Type type, bool alreadyOrdered);
    public static IQueryable OrderByProperty(IQueryable query, IEdmModel model, IEdmProperty property, OrderByDirection direction, Type type, bool alreadyOrdered);
    public static IQueryable OrderBy(IQueryable query, LambdaExpression orderByLambda, OrderByDirection direction, Type type, bool alreadyOrdered);
    public static IQueryable GroupBy(IQueryable query, Expression expression, Type type, Type wrapperType);
    public static IQueryable Select(IQueryable query, LambdaExpression expression, Type type);
    public static IQueryable Where(IQueryable query, Expression where, Type type);
    public static Expression ToNullable(Expression expression);
    public static Expression Default(Type type);
    public static LambdaExpression GetPropertyAccessLambda(Type type, string propertyName);
}
internal class Microsoft.AspNetCore.OData.Query.Expressions.AggregationBinder : TransformationBinderBase {
    private static string GroupByContainerProperty;
    private TransformationNode _transformation;
    private IEnumerable`1<AggregateExpressionBase> _aggregateExpressions;
    private IEnumerable`1<GroupByPropertyNode> _groupingProperties;
    private Type _groupByClrType;
    private Dictionary`2<SingleValueNode, Expression> _preFlattenedMap;
    internal AggregationBinder(ODataQuerySettings settings, IAssemblyResolver assembliesResolver, Type elementType, IEdmModel model, TransformationNode transformation);
    private static Expression WrapDynamicCastIfNeeded(Expression propertyAccessor);
    private IEnumerable`1<AggregateExpressionBase> FixCustomMethodReturnTypes(IEnumerable`1<AggregateExpressionBase> aggregateExpressions);
    private AggregateExpression FixCustomMethodReturnType(AggregateExpression expression);
    private MethodInfo GetCustomMethod(AggregateExpression expression);
    public IQueryable Bind(IQueryable query);
    private IQueryable FlattenReferencedProperties(IQueryable query);
    private IQueryable BindSelect(IQueryable grouping);
    private List`1<MemberAssignment> CreateSelectMemberAssigments(Type type, MemberExpression propertyAccessor, IEnumerable`1<GroupByPropertyNode> properties);
    private Expression CreateAggregationExpression(ParameterExpression accum, AggregateExpressionBase expression, Type baseType);
    private Expression CreateEntitySetAggregateExpression(ParameterExpression accum, EntitySetAggregateExpression expression, Type baseType);
    private Expression CreatePropertyAggregateExpression(ParameterExpression accum, AggregateExpression expression, Type baseType);
    private IQueryable BindGroupBy(IQueryable query);
    private List`1<NamedPropertyExpression> CreateGroupByMemberAssignments(IEnumerable`1<GroupByPropertyNode> nodes);
    [CompilerGeneratedAttribute]
private AggregateExpressionBase <FixCustomMethodReturnTypes>b__7_0(AggregateExpressionBase x);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.OData.Query.Expressions.BinderExtensions : object {
    [ExtensionAttribute]
public static IEnumerable ApplyBind(IFilterBinder binder, IEnumerable query, FilterClause filterClause, QueryBinderContext context);
    [ExtensionAttribute]
public static IQueryable ApplyBind(IFilterBinder binder, IQueryable query, FilterClause filterClause, QueryBinderContext context);
    [ExtensionAttribute]
public static Expression ApplyBind(IFilterBinder binder, Expression source, FilterClause filterClause, QueryBinderContext context);
    [ExtensionAttribute]
public static IQueryable ApplyBind(IOrderByBinder binder, IQueryable query, OrderByClause orderByClause, QueryBinderContext context, bool alreadyOrdered);
    [ExtensionAttribute]
public static Expression ApplyBind(IOrderByBinder binder, Expression source, OrderByClause orderByClause, QueryBinderContext context, bool alreadyOrdered);
    [ExtensionAttribute]
public static IQueryable ApplyBind(ISelectExpandBinder binder, IQueryable source, SelectExpandClause selectExpandClause, QueryBinderContext context);
    [ExtensionAttribute]
public static object ApplyBind(ISelectExpandBinder binder, object source, SelectExpandClause selectExpandClause, QueryBinderContext context);
    [ExtensionAttribute]
public static IQueryable ApplyBind(ISearchBinder binder, IQueryable source, SearchClause searchClause, QueryBinderContext context);
}
internal class Microsoft.AspNetCore.OData.Query.Expressions.ComputeBinder : TransformationBinderBase {
    private ComputeTransformationNode _transformation;
    private IEdmModel _model;
    internal ComputeBinder(ODataQuerySettings settings, IAssemblyResolver assembliesResolver, Type elementType, IEdmModel model, ComputeTransformationNode transformation);
    public IQueryable Bind(IQueryable query);
    private Expression CreateComputeExpression(ComputeExpression expression);
}
public abstract class Microsoft.AspNetCore.OData.Query.Expressions.ExpressionBinderBase : object {
    internal static string DictionaryStringObjectIndexerName;
    internal static Expression NullConstant;
    internal static Expression FalseConstant;
    internal static Expression TrueConstant;
    internal static MethodInfo EnumTryParseMethod;
    [CompilerGeneratedAttribute]
private IEdmModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataQuerySettings <QuerySettings>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyResolver <InternalAssembliesResolver>k__BackingField;
    internal bool HasInstancePropertyContainer;
    internal IQueryable BaseQuery;
    internal IDictionary`2<string, Expression> FlattenedPropertyContainer;
    internal IEdmModel Model { get; internal set; }
    internal ODataQuerySettings QuerySettings { get; internal set; }
    internal IAssemblyResolver InternalAssembliesResolver { get; internal set; }
    protected ParameterExpression Parameter { get; }
    internal ExpressionBinderBase(IEdmModel model, IAssemblyResolver assembliesResolver, ODataQuerySettings querySettings);
    internal ExpressionBinderBase(IEdmModel model, ODataQuerySettings querySettings);
    private static ExpressionBinderBase();
    [CompilerGeneratedAttribute]
internal IEdmModel get_Model();
    [CompilerGeneratedAttribute]
internal void set_Model(IEdmModel value);
    [CompilerGeneratedAttribute]
internal ODataQuerySettings get_QuerySettings();
    [CompilerGeneratedAttribute]
internal void set_QuerySettings(ODataQuerySettings value);
    [CompilerGeneratedAttribute]
internal IAssemblyResolver get_InternalAssembliesResolver();
    [CompilerGeneratedAttribute]
internal void set_InternalAssembliesResolver(IAssemblyResolver value);
    public abstract virtual Expression Bind(QueryNode node);
    protected abstract virtual ParameterExpression get_Parameter();
    public virtual Expression BindConstantNode(ConstantNode constantNode);
    public virtual Expression BindSingleValueFunctionCallNode(SingleValueFunctionCallNode node);
    public virtual Expression BindCollectionConstantNode(CollectionConstantNode node);
    private Expression BindIsOf(SingleValueFunctionCallNode node);
    private Expression BindCeiling(SingleValueFunctionCallNode node);
    private Expression BindFloor(SingleValueFunctionCallNode node);
    private Expression BindRound(SingleValueFunctionCallNode node);
    private Expression BindDate(SingleValueFunctionCallNode node);
    private Expression BindNow(SingleValueFunctionCallNode node);
    private Expression BindTime(SingleValueFunctionCallNode node);
    private Expression BindFractionalSeconds(SingleValueFunctionCallNode node);
    private Expression BindDateRelatedProperty(SingleValueFunctionCallNode node);
    private Expression BindTimeRelatedProperty(SingleValueFunctionCallNode node);
    private Expression BindConcat(SingleValueFunctionCallNode node);
    private Expression BindMatchesPattern(SingleValueFunctionCallNode node);
    private Expression BindTrim(SingleValueFunctionCallNode node);
    private Expression BindToUpper(SingleValueFunctionCallNode node);
    private Expression BindToLower(SingleValueFunctionCallNode node);
    private Expression BindIndexOf(SingleValueFunctionCallNode node);
    private Expression BindSubstring(SingleValueFunctionCallNode node);
    private Expression BindLength(SingleValueFunctionCallNode node);
    private Expression BindContains(SingleValueFunctionCallNode node);
    private Expression BindStartsWith(SingleValueFunctionCallNode node);
    private Expression BindEndsWith(SingleValueFunctionCallNode node);
    private Expression BindCustomMethodExpressionOrNull(SingleValueFunctionCallNode node);
    private Expression BindCastSingleValue(SingleValueFunctionCallNode node);
    private static void ValidateAllStringArguments(string functionName, Expression[] arguments);
    private bool IsFlatteningSource(Expression source);
    private static MethodCallExpression SkipFilters(MethodCallExpression expression);
    private static void CollectContainerAssignments(Expression source, MethodCallExpression expression, Dictionary`2<string, Expression> result);
    private static void CollectAssigments(IDictionary`2<string, Expression> flattenPropertyContainer, Expression source, MemberInitExpression expression, string prefix);
    private static MemberInitExpression ExtractContainerExpression(MethodCallExpression expression, string containerName);
    protected Expression[] BindArguments(IEnumerable`1<QueryNode> nodes);
    protected PropertyInfo GetDynamicPropertyContainer(SingleValueOpenPropertyAccessNode openNode);
    protected void EnsureFlattenedPropertyContainer(ParameterExpression source);
    protected Expression GetFlattenedPropertyExpression(string propertyPath);
    internal string GetFullPropertyPath(SingleValueNode node);
    internal Expression CreatePropertyAccessExpression(Expression source, IEdmProperty property, string propertyPath);
    internal static Expression GetPropertyExpression(Expression source, string propertyPath);
    internal Expression ConvertNonStandardPrimitives(Expression source);
    internal Expression CreateConvertExpression(ConvertNode convertNode, Expression source);
    internal IDictionary`2<string, Expression> GetFlattenedProperties(ParameterExpression source);
    internal Type RetrieveClrTypeForConstant(IEdmTypeReference edmTypeReference, Object& value);
    internal Expression BindCastToEnumType(Type sourceType, Type targetClrType, QueryNode firstParameter, int parameterLength);
    [CompilerGeneratedAttribute]
private Expression <BindArguments>b__57_0(SingleValueNode n);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.OData.Query.Expressions.ExpressionBinderHelper : object {
    private static MethodInfo StringCompareMethodInfo;
    private static MethodInfo GuidCompareMethodInfo;
    private static Expression NullConstant;
    private static Expression FalseConstant;
    private static Expression TrueConstant;
    private static Expression ZeroConstant;
    private static Dictionary`2<BinaryOperatorKind, ExpressionType> BinaryOperatorMapping;
    private static ExpressionBinderHelper();
    public static Expression CreateBinaryExpression(BinaryOperatorKind binaryOperator, Expression left, Expression right, bool liftToNull, ODataQuerySettings querySettings);
    public static Expression MakePropertyAccess(PropertyInfo propertyInfo, Expression argument, ODataQuerySettings querySettings);
    public static Expression MakeFunctionCall(MemberInfo member, ODataQuerySettings querySettings, Expression[] arguments);
    public static Expression CreateFunctionCallWithNullPropagation(Expression functionCall, Expression[] arguments, ODataQuerySettings querySettings);
    public static Expression RemoveInnerNullPropagation(Expression expression, ODataQuerySettings querySettings);
    private static Expression CheckIfArgumentsAreNull(Expression[] arguments);
    public static Expression CheckForNull(Expression expression);
    private static IEnumerable`1<Expression> ExtractValueFromNullableArguments(IEnumerable`1<Expression> arguments);
    public static Expression ExtractValueFromNullableExpression(Expression source);
    public static Expression BindHas(Expression left, Expression flag, ODataQuerySettings querySettings);
    private static Expression GetProperty(Expression source, string propertyName, ODataQuerySettings querySettings);
    private static Expression CreateDateBinaryExpression(Expression source, ODataQuerySettings querySettings);
    private static Expression CreateTimeBinaryExpression(Expression source, ODataQuerySettings querySettings);
    private static Expression ConvertToDateTimeRelatedConstExpression(Expression source);
    public static bool IsIQueryable(Type type);
    public static bool IsDoubleOrDecimal(Type type);
    public static bool IsDateAndTimeRelated(Type type);
    public static bool IsDateRelated(Type type);
    public static bool IsTimeRelated(Type type);
    public static bool IsDateOrOffset(Type type);
    public static bool IsDateTime(Type type);
    public static bool IsTimeSpan(Type type);
    public static bool IsTimeOfDay(Type type);
    public static bool IsDate(Type type);
    [ExtensionAttribute]
public static bool IsDateOnly(Type type);
    [ExtensionAttribute]
public static bool IsTimeOnly(Type type);
    public static bool IsInteger(Type type);
    public static bool IsType(Type type);
    public static Expression ConvertToEnumUnderlyingType(Expression expression, Type enumType, Type enumUnderlyingType);
    public static object ExtractParameterizedConstant(Expression expression);
    public static Expression DateTimeOffsetToDateTime(Expression expression, TimeZoneInfo timeZoneInfo, ODataQuerySettings settings);
    public static bool IsNullable(Type t);
    public static Type ToNullable(Type t);
    public static Expression ToNullable(Expression expression);
    public static Expression ConvertNull(Expression expression, Type type);
    public static Expression BindCastToStringType(Expression source);
}
public class Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder : QueryBinder {
    public virtual Expression BindFilter(FilterClause filterClause, QueryBinderContext context);
}
public interface Microsoft.AspNetCore.OData.Query.Expressions.IFilterBinder {
    public abstract virtual Expression BindFilter(FilterClause filterClause, QueryBinderContext context);
}
public interface Microsoft.AspNetCore.OData.Query.Expressions.IOrderByBinder {
    public abstract virtual OrderByBinderResult BindOrderBy(OrderByClause orderByClause, QueryBinderContext context);
}
public interface Microsoft.AspNetCore.OData.Query.Expressions.ISearchBinder {
    public abstract virtual Expression BindSearch(SearchClause searchClause, QueryBinderContext context);
}
public interface Microsoft.AspNetCore.OData.Query.Expressions.ISelectExpandBinder {
    public abstract virtual Expression BindSelectExpand(SelectExpandClause selectExpandClause, QueryBinderContext context);
}
internal static class Microsoft.AspNetCore.OData.Query.Expressions.Linq2ObjectsComparisonMethods : object {
    public static MethodInfo AreByteArraysEqualMethodInfo;
    public static MethodInfo AreByteArraysNotEqualMethodInfo;
    private static Linq2ObjectsComparisonMethods();
    public static bool AreByteArraysEqual(Byte[] left, Byte[] right);
    public static bool AreByteArraysNotEqual(Byte[] left, Byte[] right);
}
public class Microsoft.AspNetCore.OData.Query.Expressions.OrderByBinder : QueryBinder {
    public virtual OrderByBinderResult BindOrderBy(OrderByClause orderByClause, QueryBinderContext context);
}
public class Microsoft.AspNetCore.OData.Query.Expressions.OrderByBinderResult : object {
    [CompilerGeneratedAttribute]
private Expression <OrderByExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private OrderByDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private OrderByBinderResult <ThenBy>k__BackingField;
    public Expression OrderByExpression { get; }
    public OrderByDirection Direction { get; }
    public OrderByBinderResult ThenBy { get; public set; }
    public OrderByBinderResult(Expression orderByExpression, OrderByDirection direction);
    [CompilerGeneratedAttribute]
public Expression get_OrderByExpression();
    [CompilerGeneratedAttribute]
public OrderByDirection get_Direction();
    [CompilerGeneratedAttribute]
public OrderByBinderResult get_ThenBy();
    [CompilerGeneratedAttribute]
public void set_ThenBy(OrderByBinderResult value);
}
public abstract class Microsoft.AspNetCore.OData.Query.Expressions.QueryBinder : object {
    internal static string DictionaryStringObjectIndexerName;
    internal static Expression NullConstant;
    internal static Expression FalseConstant;
    internal static Expression TrueConstant;
    internal static MethodInfo EnumTryParseMethod;
    private static QueryBinder();
    public virtual Expression Bind(QueryNode node, QueryBinderContext context);
    public virtual Expression BindCollectionNode(CollectionNode node, QueryBinderContext context);
    public virtual Expression BindSingleValueNode(SingleValueNode node, QueryBinderContext context);
    public virtual Expression BindNavigationPropertyNode(QueryNode sourceNode, IEdmNavigationProperty navigationProperty, string propertyPath, QueryBinderContext context);
    public virtual Expression BindCollectionResourceCastNode(CollectionResourceCastNode node, QueryBinderContext context);
    public virtual Expression BindCollectionComplexNode(CollectionComplexNode collectionComplexNode, QueryBinderContext context);
    public virtual Expression BindCollectionPropertyAccessNode(CollectionPropertyAccessNode propertyAccessNode, QueryBinderContext context);
    public virtual Expression BindDynamicPropertyAccessQueryNode(SingleValueOpenPropertyAccessNode openNode, QueryBinderContext context);
    public virtual Expression BindPropertyAccessQueryNode(SingleValuePropertyAccessNode propertyAccessNode, QueryBinderContext context);
    public virtual Expression BindSingleComplexNode(SingleComplexNode singleComplexNode, QueryBinderContext context);
    public virtual Expression BindRangeVariable(RangeVariable rangeVariable, QueryBinderContext context);
    public virtual Expression BindBinaryOperatorNode(BinaryOperatorNode binaryOperatorNode, QueryBinderContext context);
    public virtual Expression BindConvertNode(ConvertNode convertNode, QueryBinderContext context);
    public virtual Expression BindCountNode(CountNode node, QueryBinderContext context);
    public virtual Expression BindInNode(InNode inNode, QueryBinderContext context);
    public virtual Expression BindSingleResourceFunctionCallNode(SingleResourceFunctionCallNode node, QueryBinderContext context);
    public virtual Expression BindSingleResourceCastFunctionCall(SingleResourceFunctionCallNode node, QueryBinderContext context);
    public virtual Expression BindSingleResourceCastNode(SingleResourceCastNode node, QueryBinderContext context);
    public virtual Expression BindAllNode(AllNode allNode, QueryBinderContext context);
    public virtual Expression BindAnyNode(AnyNode anyNode, QueryBinderContext context);
    private Expression BindCastSourceNode(QueryNode sourceNode, QueryBinderContext context);
    public virtual Expression BindUnaryOperatorNode(UnaryOperatorNode unaryOperatorNode, QueryBinderContext context);
    public virtual Expression BindConstantNode(ConstantNode constantNode, QueryBinderContext context);
    public virtual Expression BindCollectionConstantNode(CollectionConstantNode node, QueryBinderContext context);
    private static void ValidateAllStringArguments(string functionName, Expression[] arguments);
    private static bool IsFlatteningSource(Expression source, QueryBinderContext context);
    protected Expression[] BindArguments(IEnumerable`1<QueryNode> nodes, QueryBinderContext context);
    protected static PropertyInfo GetDynamicPropertyContainer(SingleValueOpenPropertyAccessNode openNode, QueryBinderContext context);
    protected Expression GetFlattenedPropertyExpression(string propertyPath, QueryBinderContext context);
    internal string GetFullPropertyPath(SingleValueNode node);
    internal Expression CreatePropertyAccessExpression(Expression source, QueryBinderContext context, IEdmProperty property, string propertyPath);
    internal static Expression GetPropertyExpression(Expression source, string propertyPath, bool isAggregated);
    internal static Expression ConvertNonStandardPrimitives(Expression source, QueryBinderContext context);
    internal Expression CreateConvertExpression(ConvertNode convertNode, Expression source, QueryBinderContext context);
    internal Type RetrieveClrTypeForConstant(IEdmTypeReference edmTypeReference, QueryBinderContext context, Object& value);
    internal Expression BindCastToEnumType(Type sourceType, Type targetClrType, QueryNode firstParameter, int parameterLength, QueryBinderContext context);
    private static Expression Any(Expression source, Expression filter);
    private static Expression All(Expression source, Expression filter);
    private Expression BindPropertyAccessExpression(SingleValueOpenPropertyAccessNode openNode, PropertyInfo prop, QueryBinderContext context);
    protected static Expression ApplyNullPropagationForFilterBody(Expression body, QueryBinderContext context);
    private static void CheckArgumentNull(T node, QueryBinderContext context);
    public virtual Expression BindSingleValueFunctionCallNode(SingleValueFunctionCallNode node, QueryBinderContext context);
    protected virtual Expression BindStartsWith(SingleValueFunctionCallNode node, QueryBinderContext context);
    protected virtual Expression BindEndsWith(SingleValueFunctionCallNode node, QueryBinderContext context);
    protected virtual Expression BindContains(SingleValueFunctionCallNode node, QueryBinderContext context);
    protected virtual Expression BindSubstring(SingleValueFunctionCallNode node, QueryBinderContext context);
    protected virtual Expression BindLength(SingleValueFunctionCallNode node, QueryBinderContext context);
    protected virtual Expression BindIndexOf(SingleValueFunctionCallNode node, QueryBinderContext context);
    protected virtual Expression BindToLower(SingleValueFunctionCallNode node, QueryBinderContext context);
    protected virtual Expression BindToUpper(SingleValueFunctionCallNode node, QueryBinderContext context);
    protected virtual Expression BindTrim(SingleValueFunctionCallNode node, QueryBinderContext context);
    protected virtual Expression BindConcat(SingleValueFunctionCallNode node, QueryBinderContext context);
    protected virtual Expression BindMatchesPattern(SingleValueFunctionCallNode node, QueryBinderContext context);
    protected virtual Expression BindDateRelatedProperty(SingleValueFunctionCallNode node, QueryBinderContext context);
    protected virtual Expression BindTimeRelatedProperty(SingleValueFunctionCallNode node, QueryBinderContext context);
    protected virtual Expression BindFractionalSeconds(SingleValueFunctionCallNode node, QueryBinderContext context);
    protected virtual Expression BindRound(SingleValueFunctionCallNode node, QueryBinderContext context);
    protected virtual Expression BindFloor(SingleValueFunctionCallNode node, QueryBinderContext context);
    protected virtual Expression BindCeiling(SingleValueFunctionCallNode node, QueryBinderContext context);
    protected virtual Expression BindCastSingleValue(SingleValueFunctionCallNode node, QueryBinderContext context);
    protected virtual Expression BindIsOf(SingleValueFunctionCallNode node, QueryBinderContext context);
    protected virtual Expression BindDate(SingleValueFunctionCallNode node, QueryBinderContext context);
    protected virtual Expression BindTime(SingleValueFunctionCallNode node, QueryBinderContext context);
    protected virtual Expression BindNow(SingleValueFunctionCallNode node, QueryBinderContext context);
    protected virtual Expression BindCustomMethodExpressionOrNull(SingleValueFunctionCallNode node, QueryBinderContext context);
    private static void CheckArgumentNull(SingleValueFunctionCallNode node, QueryBinderContext context, string nodeName);
}
public class Microsoft.AspNetCore.OData.Query.Expressions.QueryBinderContext : object {
    private static string DollarIt;
    private static string DollarThis;
    private IDictionary`2<string, ParameterExpression> _lambdaParameters;
    [CompilerGeneratedAttribute]
private IEdmModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataQuerySettings <QuerySettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ElementClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyResolver <AssembliesResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ComputeExpression> <ComputedProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<OrderByClause> <OrderByClauses>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSkipToken>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Expression> <FlattenedProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmType <ElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmNavigationSource <NavigationSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNested>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Source>k__BackingField;
    public IEdmModel Model { get; }
    public ODataQuerySettings QuerySettings { get; }
    public Type ElementClrType { get; }
    public IAssemblyResolver AssembliesResolver { get; public set; }
    public IDictionary`2<string, ComputeExpression> ComputedProperties { get; }
    internal List`1<OrderByClause> OrderByClauses { get; internal set; }
    internal bool EnableSkipToken { get; internal set; }
    internal IDictionary`2<string, Expression> FlattenedProperties { get; private set; }
    public IEdmType ElementType { get; }
    public IEdmNavigationSource NavigationSource { get; public set; }
    internal bool IsNested { get; }
    public ParameterExpression CurrentParameter { get; }
    public Expression Source { get; public set; }
    public QueryBinderContext(IEdmModel model, ODataQuerySettings querySettings, Type clrType);
    public QueryBinderContext(QueryBinderContext context, ODataQuerySettings querySettings, Type clrType);
    [CompilerGeneratedAttribute]
public IEdmModel get_Model();
    [CompilerGeneratedAttribute]
public ODataQuerySettings get_QuerySettings();
    [CompilerGeneratedAttribute]
public Type get_ElementClrType();
    [CompilerGeneratedAttribute]
public IAssemblyResolver get_AssembliesResolver();
    [CompilerGeneratedAttribute]
public void set_AssembliesResolver(IAssemblyResolver value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ComputeExpression> get_ComputedProperties();
    [CompilerGeneratedAttribute]
internal List`1<OrderByClause> get_OrderByClauses();
    [CompilerGeneratedAttribute]
internal void set_OrderByClauses(List`1<OrderByClause> value);
    [CompilerGeneratedAttribute]
internal bool get_EnableSkipToken();
    [CompilerGeneratedAttribute]
internal void set_EnableSkipToken(bool value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, Expression> get_FlattenedProperties();
    [CompilerGeneratedAttribute]
private void set_FlattenedProperties(IDictionary`2<string, Expression> value);
    [CompilerGeneratedAttribute]
public IEdmType get_ElementType();
    [CompilerGeneratedAttribute]
public IEdmNavigationSource get_NavigationSource();
    [CompilerGeneratedAttribute]
public void set_NavigationSource(IEdmNavigationSource value);
    [CompilerGeneratedAttribute]
internal bool get_IsNested();
    public ParameterExpression get_CurrentParameter();
    [CompilerGeneratedAttribute]
public Expression get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(Expression value);
    public ParameterExpression GetParameter(string name);
    public void RemoveParameter(string name);
    internal ValueTuple`2<string, ParameterExpression> HandleLambdaParameters(IEnumerable`1<RangeVariable> rangeVariables);
    internal void AddComputedProperties(IEnumerable`1<ComputeExpression> computedProperties);
    internal void EnsureFlattenedProperties(ParameterExpression source, IQueryable query);
}
public class Microsoft.AspNetCore.OData.Query.Expressions.SelectExpandBinder : QueryBinder {
    [CompilerGeneratedAttribute]
private IFilterBinder <FilterBinder>k__BackingField;
    [CompilerGeneratedAttribute]
private IOrderByBinder <OrderByBinder>k__BackingField;
    public IFilterBinder FilterBinder { get; }
    public IOrderByBinder OrderByBinder { get; }
    public SelectExpandBinder(IFilterBinder filterBinder, IOrderByBinder orderByBinder);
    [CompilerGeneratedAttribute]
public IFilterBinder get_FilterBinder();
    [CompilerGeneratedAttribute]
public IOrderByBinder get_OrderByBinder();
    public virtual Expression BindSelectExpand(SelectExpandClause selectExpandClause, QueryBinderContext context);
    internal Expression ProjectAsWrapper(QueryBinderContext context, Expression source, SelectExpandClause selectExpandClause, IEdmStructuredType structuredType, IEdmNavigationSource navigationSource, OrderByClause orderByClause, ComputeClause computeClause, Nullable`1<long> topOption, Nullable`1<long> skipOption, Nullable`1<int> modelBoundPageSize);
    public virtual Expression CreatePropertyNameExpression(QueryBinderContext context, IEdmStructuredType elementType, IEdmProperty edmProperty, Expression source);
    public virtual Expression CreatePropertyValueExpression(QueryBinderContext context, IEdmStructuredType elementType, IEdmProperty edmProperty, Expression source, FilterClause filterClause, ComputeClause computeClause);
    internal Expression ProjectElement(QueryBinderContext context, Expression source, SelectExpandClause selectExpandClause, IEdmStructuredType structuredType, IEdmNavigationSource navigationSource);
    private static bool ParseComputedDynamicProperties(QueryBinderContext context, IList`1<DynamicPathSegment> dynamicPathSegments, bool isSelectedAll, IList`1& computedProperties);
    internal static IList`1<DynamicPathSegment> GetSelectExpandProperties(IEdmModel model, IEdmStructuredType structuredType, IEdmNavigationSource navigationSource, SelectExpandClause selectExpandClause, IDictionary`2& propertiesToInclude, IDictionary`2& propertiesToExpand, ISet`1& autoSelectedProperties);
    private static void ProcessExpandedItem(ExpandedReferenceSelectItem expandedItem, IEdmNavigationSource navigationSource, IDictionary`2<IEdmStructuralProperty, SelectExpandIncludedProperty> currentLevelPropertiesInclude, IDictionary`2& propertiesToExpand);
    private static DynamicPathSegment ProcessSelectedItem(PathSelectItem pathSelectItem, IEdmNavigationSource navigationSource, IDictionary`2<IEdmStructuralProperty, SelectExpandIncludedProperty> currentLevelPropertiesInclude);
    private static bool IsSelectAllOnOpenType(SelectExpandClause selectExpandClause, IEdmStructuredType structuredType);
    public virtual Expression CreateTotalCountExpression(QueryBinderContext context, Expression source, Nullable`1<bool> countOption);
    private Expression BuildPropertyContainer(QueryBinderContext context, Expression source, IEdmStructuredType structuredType, IDictionary`2<IEdmNavigationProperty, ExpandedReferenceSelectItem> propertiesToExpand, IDictionary`2<IEdmStructuralProperty, PathSelectItem> propertiesToInclude, IList`1<string> computedProperties, ISet`1<IEdmStructuralProperty> autoSelectedProperties, bool isSelectingOpenTypeSegments, bool isSelectedAll);
    internal void BuildExpandedProperty(QueryBinderContext context, Expression source, IEdmStructuredType structuredType, IEdmNavigationProperty navigationProperty, ExpandedReferenceSelectItem expandedItem, IList`1<NamedPropertyExpression> includedProperties);
    internal void BuildSelectedProperty(QueryBinderContext context, Expression source, IEdmStructuredType structuredType, IEdmStructuralProperty structuralProperty, PathSelectItem pathSelectItem, IList`1<NamedPropertyExpression> includedProperties);
    public virtual void BindComputedProperty(Expression source, QueryBinderContext context, string computedProperty, IList`1<NamedPropertyExpression> includedProperties);
    public virtual void BuildDynamicProperty(QueryBinderContext context, Expression source, IEdmStructuredType structuredType, IList`1<NamedPropertyExpression> includedProperties);
    protected virtual void BindOrderByProperties(QueryBinderContext context, Expression source, IEdmStructuredType structuredType, IList`1<NamedPropertyExpression> includedProperties, bool isSelectedAll);
    private static string GetOrderByName(HashSet`1<string> usedPropertyNames, Int32& start);
    private static SelectExpandClause GetOrCreateSelectExpandClause(IEdmNavigationProperty navigationProperty, ExpandedReferenceSelectItem expandedItem);
    private Expression AddOrderByQueryForSource(QueryBinderContext context, Expression source, OrderByClause orderbyClause, Type elementType);
    private static Expression GetNullCheckExpression(IEdmStructuralProperty propertyToInclude, Expression propertyValue, SelectExpandClause projection);
    private Expression GetNullCheckExpression(QueryBinderContext context, IEdmNavigationProperty propertyToExpand, Expression propertyValue, SelectExpandClause projection);
    private Expression ProjectCollection(QueryBinderContext context, Expression source, Type elementType, SelectExpandClause selectExpandClause, IEdmStructuredType structuredType, IEdmNavigationSource navigationSource, OrderByClause orderByClause, Nullable`1<long> topOption, Nullable`1<long> skipOption, Nullable`1<int> modelBoundPageSize);
    public virtual Expression CreateTypeNameExpression(Expression source, IEdmStructuredType elementType, IEdmModel model);
    private static bool IsAvailableODataQueryOption(ODataQuerySettings querySettings, AllowedQueryOptions queryOptionFlag);
    private static IReadOnlyList`1<IEdmStructuredType> GetAllDerivedTypes(IEdmStructuredType baseType, IEdmModel model);
    private static int IsDerivedTypeOf(IEdmStructuredType type, IEdmStructuredType baseType);
    private static MethodInfo GetSelectMethod(Type elementType, Type resultType);
    private static bool IsSelectAll(SelectExpandClause selectExpandClause);
    private static Type GetWrapperGenericType(bool isInstancePropertySet, bool isTypeNamePropertySet, bool isContainerPropertySet);
}
internal class Microsoft.AspNetCore.OData.Query.Expressions.TransformationBinderBase : ExpressionBinderBase {
    [CompilerGeneratedAttribute]
private ParameterExpression <LambdaParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClassicEF>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResultClrType>k__BackingField;
    protected Type ElementType { get; }
    protected ParameterExpression LambdaParameter { get; protected set; }
    protected bool ClassicEF { get; private set; }
    public Type ResultClrType { get; protected set; }
    protected ParameterExpression Parameter { get; }
    internal TransformationBinderBase(ODataQuerySettings settings, IAssemblyResolver assembliesResolver, Type elementType, IEdmModel model);
    protected Type get_ElementType();
    [CompilerGeneratedAttribute]
protected ParameterExpression get_LambdaParameter();
    [CompilerGeneratedAttribute]
protected void set_LambdaParameter(ParameterExpression value);
    [CompilerGeneratedAttribute]
protected bool get_ClassicEF();
    [CompilerGeneratedAttribute]
private void set_ClassicEF(bool value);
    [CompilerGeneratedAttribute]
public Type get_ResultClrType();
    [CompilerGeneratedAttribute]
protected void set_ResultClrType(Type value);
    internal virtual bool IsClassicEF(IQueryable query);
    protected void PreprocessQuery(IQueryable query);
    protected Expression WrapConvert(Expression expression);
    public virtual Expression Bind(QueryNode node);
    protected virtual ParameterExpression get_Parameter();
    protected Expression BindAccessor(QueryNode node, Expression baseElement);
    private Expression CreateOpenPropertyAccessExpression(SingleValueOpenPropertyAccessNode openNode);
}
internal static class Microsoft.AspNetCore.OData.Query.Expressions.UriFunctionsBinder : object {
    private static Dictionary`2<string, MethodInfo> methodLiteralSignaturesToMethodInfo;
    private static object locker;
    private static UriFunctionsBinder();
    public static void BindUriFunctionName(string functionName, MethodInfo methodInfo);
    public static bool UnbindUriFunctionName(string functionName, MethodInfo methodInfo);
    public static bool TryGetMethodInfo(string functionName, IEnumerable`1<Type> methodArgumentsType, MethodInfo& methodInfo);
    private static string GetMethodLiteralSignature(string methodName, MethodInfo methodInfo);
    private static string GetMethodLiteralSignature(string methodName, IEnumerable`1<Type> methodArgumentsType);
}
public class Microsoft.AspNetCore.OData.Query.FilterQueryOption : object {
    private FilterClause _filterClause;
    private ODataQueryOptionParser _queryOptionParser;
    [CompilerGeneratedAttribute]
private ODataQueryContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IFilterQueryValidator <Validator>k__BackingField;
    [CompilerGeneratedAttribute]
private ComputeQueryOption <Compute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawValue>k__BackingField;
    public ODataQueryContext Context { get; private set; }
    public IFilterQueryValidator Validator { get; public set; }
    public ComputeQueryOption Compute { get; public set; }
    public FilterClause FilterClause { get; internal set; }
    public string RawValue { get; private set; }
    public FilterQueryOption(string rawValue, ODataQueryContext context, ODataQueryOptionParser queryOptionParser);
    internal FilterQueryOption(ODataQueryContext context, FilterClause filterClause);
    internal FilterQueryOption(string rawValue, ODataQueryContext context);
    [CompilerGeneratedAttribute]
public ODataQueryContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ODataQueryContext value);
    [CompilerGeneratedAttribute]
public IFilterQueryValidator get_Validator();
    [CompilerGeneratedAttribute]
public void set_Validator(IFilterQueryValidator value);
    [CompilerGeneratedAttribute]
public ComputeQueryOption get_Compute();
    [CompilerGeneratedAttribute]
public void set_Compute(ComputeQueryOption value);
    public FilterClause get_FilterClause();
    internal void set_FilterClause(FilterClause value);
    [CompilerGeneratedAttribute]
public string get_RawValue();
    [CompilerGeneratedAttribute]
private void set_RawValue(string value);
    public IQueryable ApplyTo(IQueryable query, ODataQuerySettings querySettings);
    public void Validate(ODataValidationSettings validationSettings);
}
public enum Microsoft.AspNetCore.OData.Query.HandleNullPropagationOption : Enum {
    public int value__;
    public static HandleNullPropagationOption Default;
    public static HandleNullPropagationOption True;
    public static HandleNullPropagationOption False;
}
internal static class Microsoft.AspNetCore.OData.Query.HandleNullPropagationOptionHelper : object {
    internal static string EntityFrameworkQueryProviderNamespace;
    internal static string ObjectContextQueryProviderNamespaceEF5;
    internal static string ObjectContextQueryProviderNamespaceEF6;
    internal static string ObjectContextQueryProviderNamespaceEFCore2;
    internal static string Linq2SqlQueryProviderNamespace;
    internal static string Linq2ObjectsQueryProviderNamespace;
    public static bool IsDefined(HandleNullPropagationOption value);
    public static void Validate(HandleNullPropagationOption value, string parameterValue);
    public static HandleNullPropagationOption GetDefaultHandleNullPropagationOption(IQueryable query);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.OData.Query.HttpRequestODataQueryExtensions : object {
    [ExtensionAttribute]
public static ETag GetETag(HttpRequest request, EntityTagHeaderValue entityTagHeaderValue);
    [ExtensionAttribute]
public static ETag`1<TEntity> GetETag(HttpRequest request, EntityTagHeaderValue entityTagHeaderValue);
}
internal interface Microsoft.AspNetCore.OData.Query.ICountOptionCollection {
    public Nullable`1<long> TotalCount { get; }
    public abstract virtual Nullable`1<long> get_TotalCount();
}
public interface Microsoft.AspNetCore.OData.Query.IODataQueryRequestParser {
    public abstract virtual bool CanParse(HttpRequest request);
    public abstract virtual Task`1<string> ParseAsync(HttpRequest request);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.OData.Query.ModelBoundQuerySettingsExtensions : object {
    [ExtensionAttribute]
internal static void CopyExpandConfigurations(ModelBoundQuerySettings settings, Dictionary`2<string, ExpandConfiguration> expandConfigurations);
    [ExtensionAttribute]
internal static void CopyOrderByConfigurations(ModelBoundQuerySettings settings, Dictionary`2<string, bool> orderByConfigurations);
    [ExtensionAttribute]
internal static void CopySelectConfigurations(ModelBoundQuerySettings settings, Dictionary`2<string, SelectExpandType> selectConfigurations);
    [ExtensionAttribute]
internal static void CopyFilterConfigurations(ModelBoundQuerySettings settings, Dictionary`2<string, bool> filterConfigurations);
    [ExtensionAttribute]
internal static bool IsAutomaticExpand(ModelBoundQuerySettings settings, string propertyName);
    [ExtensionAttribute]
internal static bool IsAutomaticSelect(ModelBoundQuerySettings settings, string propertyName);
    [ExtensionAttribute]
internal static bool Expandable(ModelBoundQuerySettings settings, string propertyName);
    [ExtensionAttribute]
internal static bool Selectable(ModelBoundQuerySettings settings, string propertyName);
    [ExtensionAttribute]
internal static bool Sortable(ModelBoundQuerySettings settings, string propertyName);
    [ExtensionAttribute]
internal static bool Filterable(ModelBoundQuerySettings settings, string propertyName);
}
public class Microsoft.AspNetCore.OData.Query.ODataQueryContext : object {
    internal static ODataUriResolver DefaultCaseInsensitiveResolver;
    private DefaultQueryConfigurations _defaultQueryConfigurations;
    [CompilerGeneratedAttribute]
private IEdmModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmType <ElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmNavigationSource <NavigationSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ElementClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <RequestContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmProperty <TargetProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmStructuredType <TargetStructuredType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetName>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataValidationSettings <ValidationSettings>k__BackingField;
    public DefaultQueryConfigurations DefaultQueryConfigurations { get; }
    public IEdmModel Model { get; internal set; }
    public IEdmType ElementType { get; private set; }
    public IEdmNavigationSource NavigationSource { get; private set; }
    public Type ElementClrType { get; internal set; }
    public ODataPath Path { get; private set; }
    public IServiceProvider RequestContainer { get; internal set; }
    internal HttpRequest Request { get; internal set; }
    internal IEdmProperty TargetProperty { get; internal set; }
    internal IEdmStructuredType TargetStructuredType { get; internal set; }
    internal string TargetName { get; internal set; }
    internal ODataValidationSettings ValidationSettings { get; internal set; }
    public ODataQueryContext(IEdmModel model, Type elementClrType, ODataPath path);
    public ODataQueryContext(IEdmModel model, IEdmType elementType, ODataPath path);
    internal ODataQueryContext(IEdmModel model, Type elementClrType);
    internal ODataQueryContext(IEdmModel model, IEdmType elementType);
    private static ODataQueryContext();
    public DefaultQueryConfigurations get_DefaultQueryConfigurations();
    [CompilerGeneratedAttribute]
public IEdmModel get_Model();
    [CompilerGeneratedAttribute]
internal void set_Model(IEdmModel value);
    [CompilerGeneratedAttribute]
public IEdmType get_ElementType();
    [CompilerGeneratedAttribute]
private void set_ElementType(IEdmType value);
    [CompilerGeneratedAttribute]
public IEdmNavigationSource get_NavigationSource();
    [CompilerGeneratedAttribute]
private void set_NavigationSource(IEdmNavigationSource value);
    [CompilerGeneratedAttribute]
public Type get_ElementClrType();
    [CompilerGeneratedAttribute]
internal void set_ElementClrType(Type value);
    [CompilerGeneratedAttribute]
public ODataPath get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(ODataPath value);
    [CompilerGeneratedAttribute]
public IServiceProvider get_RequestContainer();
    [CompilerGeneratedAttribute]
internal void set_RequestContainer(IServiceProvider value);
    [CompilerGeneratedAttribute]
internal HttpRequest get_Request();
    [CompilerGeneratedAttribute]
internal void set_Request(HttpRequest value);
    [CompilerGeneratedAttribute]
internal IEdmProperty get_TargetProperty();
    [CompilerGeneratedAttribute]
internal void set_TargetProperty(IEdmProperty value);
    [CompilerGeneratedAttribute]
internal IEdmStructuredType get_TargetStructuredType();
    [CompilerGeneratedAttribute]
internal void set_TargetStructuredType(IEdmStructuredType value);
    [CompilerGeneratedAttribute]
internal string get_TargetName();
    [CompilerGeneratedAttribute]
internal void set_TargetName(string value);
    [CompilerGeneratedAttribute]
internal ODataValidationSettings get_ValidationSettings();
    [CompilerGeneratedAttribute]
internal void set_ValidationSettings(ODataValidationSettings value);
    private static IEdmNavigationSource GetNavigationSource(IEdmModel model, IEdmType elementType, ODataPath odataPath);
    private void GetPathContext();
    private DefaultQueryConfigurations GetDefaultQuerySettings();
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.OData.Query.ODataQueryContextExtensions : object {
    [ExtensionAttribute]
public static ODataQuerySettings GetODataQuerySettings(ODataQueryContext context);
    [ExtensionAttribute]
public static ODataQuerySettings UpdateQuerySettings(ODataQueryContext context, ODataQuerySettings querySettings, IQueryable query);
    [ExtensionAttribute]
public static SkipTokenHandler GetSkipTokenHandler(ODataQueryContext context);
    [ExtensionAttribute]
public static IFilterBinder GetFilterBinder(ODataQueryContext context);
    [ExtensionAttribute]
public static ISearchBinder GetSearchBinder(ODataQueryContext context);
    [ExtensionAttribute]
public static ISelectExpandBinder GetSelectExpandBinder(ODataQueryContext context);
    [ExtensionAttribute]
public static IOrderByBinder GetOrderByBinder(ODataQueryContext context);
    [ExtensionAttribute]
public static IAssemblyResolver GetAssemblyResolver(ODataQueryContext context);
    [ExtensionAttribute]
public static IODataQueryValidator GetODataQueryValidator(ODataQueryContext context);
    [ExtensionAttribute]
public static IComputeQueryValidator GetComputeQueryValidator(ODataQueryContext context);
    [ExtensionAttribute]
public static ICountQueryValidator GetCountQueryValidator(ODataQueryContext context);
    [ExtensionAttribute]
public static IFilterQueryValidator GetFilterQueryValidator(ODataQueryContext context);
    [ExtensionAttribute]
public static IOrderByQueryValidator GetOrderByQueryValidator(ODataQueryContext context);
    [ExtensionAttribute]
public static ISkipQueryValidator GetSkipQueryValidator(ODataQueryContext context);
    [ExtensionAttribute]
public static ISkipTokenQueryValidator GetSkipTokenQueryValidator(ODataQueryContext context);
    [ExtensionAttribute]
public static ITopQueryValidator GetTopQueryValidator(ODataQueryContext context);
    [ExtensionAttribute]
public static ISelectExpandQueryValidator GetSelectExpandQueryValidator(ODataQueryContext context);
}
[NonValidatingParameterBindingAttribute]
[ODataQueryParameterBindingAttribute]
public class Microsoft.AspNetCore.OData.Query.ODataQueryOptions : object {
    private static MethodInfo _limitResultsGenericMethod;
    private ODataQueryOptionParser _queryOptionParser;
    private ETag _etagIfMatch;
    private bool _etagIfMatchChecked;
    private ETag _etagIfNoneMatch;
    private bool _etagIfNoneMatchChecked;
    private bool _enableNoDollarSignQueryOptions;
    private OrderByQueryOption _stableOrderBy;
    [CompilerGeneratedAttribute]
private HttpRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataQueryContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataRawQueryOptions <RawValues>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectExpandQueryOption <SelectExpand>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplyQueryOption <Apply>k__BackingField;
    [CompilerGeneratedAttribute]
private ComputeQueryOption <Compute>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterQueryOption <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchQueryOption <Search>k__BackingField;
    [CompilerGeneratedAttribute]
private OrderByQueryOption <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private SkipQueryOption <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private SkipTokenQueryOption <SkipToken>k__BackingField;
    [CompilerGeneratedAttribute]
private TopQueryOption <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private CountQueryOption <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private IODataQueryValidator <Validator>k__BackingField;
    public HttpRequest Request { get; private set; }
    public ODataQueryContext Context { get; private set; }
    public ODataRawQueryOptions RawValues { get; private set; }
    public SelectExpandQueryOption SelectExpand { get; private set; }
    public ApplyQueryOption Apply { get; private set; }
    public ComputeQueryOption Compute { get; private set; }
    public FilterQueryOption Filter { get; private set; }
    public SearchQueryOption Search { get; private set; }
    public OrderByQueryOption OrderBy { get; private set; }
    public SkipQueryOption Skip { get; private set; }
    public SkipTokenQueryOption SkipToken { get; private set; }
    public TopQueryOption Top { get; private set; }
    public CountQueryOption Count { get; private set; }
    public IODataQueryValidator Validator { get; public set; }
    public ETag IfMatch { get; }
    public ETag IfNoneMatch { get; }
    public ODataQueryOptions(ODataQueryContext context, HttpRequest request);
    private static ODataQueryOptions();
    [CompilerGeneratedAttribute]
public HttpRequest get_Request();
    [CompilerGeneratedAttribute]
private void set_Request(HttpRequest value);
    [CompilerGeneratedAttribute]
public ODataQueryContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ODataQueryContext value);
    [CompilerGeneratedAttribute]
public ODataRawQueryOptions get_RawValues();
    [CompilerGeneratedAttribute]
private void set_RawValues(ODataRawQueryOptions value);
    [CompilerGeneratedAttribute]
public SelectExpandQueryOption get_SelectExpand();
    [CompilerGeneratedAttribute]
private void set_SelectExpand(SelectExpandQueryOption value);
    [CompilerGeneratedAttribute]
public ApplyQueryOption get_Apply();
    [CompilerGeneratedAttribute]
private void set_Apply(ApplyQueryOption value);
    [CompilerGeneratedAttribute]
public ComputeQueryOption get_Compute();
    [CompilerGeneratedAttribute]
private void set_Compute(ComputeQueryOption value);
    [CompilerGeneratedAttribute]
public FilterQueryOption get_Filter();
    [CompilerGeneratedAttribute]
private void set_Filter(FilterQueryOption value);
    [CompilerGeneratedAttribute]
public SearchQueryOption get_Search();
    [CompilerGeneratedAttribute]
private void set_Search(SearchQueryOption value);
    [CompilerGeneratedAttribute]
public OrderByQueryOption get_OrderBy();
    [CompilerGeneratedAttribute]
private void set_OrderBy(OrderByQueryOption value);
    [CompilerGeneratedAttribute]
public SkipQueryOption get_Skip();
    [CompilerGeneratedAttribute]
private void set_Skip(SkipQueryOption value);
    [CompilerGeneratedAttribute]
public SkipTokenQueryOption get_SkipToken();
    [CompilerGeneratedAttribute]
private void set_SkipToken(SkipTokenQueryOption value);
    [CompilerGeneratedAttribute]
public TopQueryOption get_Top();
    [CompilerGeneratedAttribute]
private void set_Top(TopQueryOption value);
    [CompilerGeneratedAttribute]
public CountQueryOption get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(CountQueryOption value);
    [CompilerGeneratedAttribute]
public IODataQueryValidator get_Validator();
    [CompilerGeneratedAttribute]
public void set_Validator(IODataQueryValidator value);
    public static bool IsSystemQueryOption(string queryOptionName);
    public static bool IsSystemQueryOption(string queryOptionName, bool isDollarSignOptional);
    public virtual ETag get_IfMatch();
    public virtual ETag get_IfNoneMatch();
    internal virtual ETag GetETag(EntityTagHeaderValue etagHeaderValue);
    public bool IsSupportedQueryOption(string queryOptionName);
    public virtual IQueryable ApplyTo(IQueryable query);
    public virtual IQueryable ApplyTo(IQueryable query, AllowedQueryOptions ignoreQueryOptions);
    public virtual IQueryable ApplyTo(IQueryable query, ODataQuerySettings querySettings, AllowedQueryOptions ignoreQueryOptions);
    public virtual IQueryable ApplyTo(IQueryable query, ODataQuerySettings querySettings);
    internal IQueryable ApplyPaging(IQueryable result, ODataQuerySettings querySettings);
    public virtual OrderByQueryOption GenerateStableOrder();
    private static List`1<string> GetApplySortOptions(ApplyClause apply);
    private static void ExtractGroupingProperties(List`1<string> result, IEnumerable`1<GroupByPropertyNode> groupingProperties, string prefix);
    public virtual object ApplyTo(object entity, ODataQuerySettings querySettings, AllowedQueryOptions ignoreQueryOptions);
    public virtual object ApplyTo(object entity, ODataQuerySettings querySettings);
    public virtual void Validate(ODataValidationSettings validationSettings);
    private static void ThrowIfEmpty(string queryValue, string queryName);
    private static IEnumerable`1<IEdmStructuralProperty> GetAvailableOrderByProperties(ODataQueryContext context);
    private OrderByQueryOption GenerateDefaultOrderBy(ODataQueryContext context, List`1<string> applySortOptions);
    private OrderByQueryOption EnsureStableSortOrderBy(OrderByQueryOption orderBy, ODataQueryContext context, List`1<string> applySortOptions);
    internal static IQueryable LimitResults(IQueryable queryable, int limit, bool parameterize, Boolean& resultsLimited);
    public static IQueryable`1<T> LimitResults(IQueryable`1<T> queryable, int limit, Boolean& resultsLimited);
    public static IQueryable`1<T> LimitResults(IQueryable`1<T> queryable, int limit, bool parameterize, Boolean& resultsLimited);
    internal void AddAutoSelectExpandProperties();
    private IDictionary`2<string, string> GetODataQueryParameters();
    private string GetAutoSelectRawValue();
    private string GetAutoExpandRawValue();
    private void BuildQueryOptions(IDictionary`2<string, string> queryParameters);
    private static bool IsAvailableODataQueryOption(object queryOption, ODataQuerySettings querySettings, AllowedQueryOptions queryOptionFlag);
    private T ApplySelectExpand(T entity, ODataQuerySettings querySettings);
    private void Initialize(ODataQueryContext context);
}
[ODataQueryParameterBindingAttribute]
public class Microsoft.AspNetCore.OData.Query.ODataQueryOptions`1 : ODataQueryOptions {
    public ETag`1<TEntity> IfMatch { get; }
    public ETag`1<TEntity> IfNoneMatch { get; }
    public ODataQueryOptions`1(ODataQueryContext context, HttpRequest request);
    public ETag`1<TEntity> get_IfMatch();
    public ETag`1<TEntity> get_IfNoneMatch();
    internal virtual ETag GetETag(EntityTagHeaderValue etagHeaderValue);
    public virtual IQueryable ApplyTo(IQueryable query);
    public virtual IQueryable ApplyTo(IQueryable query, ODataQuerySettings querySettings);
    private static void ValidateQuery(IQueryable query);
}
[AttributeUsageAttribute("2052")]
public class Microsoft.AspNetCore.OData.Query.ODataQueryParameterBindingAttribute : ModelBinderAttribute {
    internal static Type GetEntityClrTypeFromParameterType(Type parameterType);
}
public class Microsoft.AspNetCore.OData.Query.ODataQueryRequestMiddleware : object {
    private IEnumerable`1<IODataQueryRequestParser> _parsers;
    private RequestDelegate _next;
    public ODataQueryRequestMiddleware(IEnumerable`1<IODataQueryRequestParser> queryRequestParsers, RequestDelegate next);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Query.ODataQueryRequestMiddleware/<Invoke>d__3")]
public Task Invoke(HttpContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Query.ODataQueryRequestMiddleware/<TransformQueryRequestAsync>d__4")]
internal static Task TransformQueryRequestAsync(IODataQueryRequestParser parser, HttpRequest request);
}
public class Microsoft.AspNetCore.OData.Query.ODataQuerySettings : object {
    private HandleNullPropagationOption _handleNullPropagationOption;
    private Nullable`1<int> _pageSize;
    private Nullable`1<int> _modelBoundPageSize;
    [CompilerGeneratedAttribute]
private TimeZoneInfo <TimeZone>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnsureStableOrdering>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableConstantParameterization>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCorrelatedSubqueryBuffering>k__BackingField;
    [CompilerGeneratedAttribute]
private AllowedQueryOptions <IgnoredQueryOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private AllowedQueryOptions <IgnoredNestedQueryOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HandleReferenceNavigationPropertyExpandFilter>k__BackingField;
    public TimeZoneInfo TimeZone { get; public set; }
    internal Nullable`1<int> ModelBoundPageSize { get; internal set; }
    public bool EnsureStableOrdering { get; public set; }
    public HandleNullPropagationOption HandleNullPropagation { get; public set; }
    public bool EnableConstantParameterization { get; public set; }
    public bool EnableCorrelatedSubqueryBuffering { get; public set; }
    public AllowedQueryOptions IgnoredQueryOptions { get; public set; }
    public AllowedQueryOptions IgnoredNestedQueryOptions { get; public set; }
    public Nullable`1<int> PageSize { get; public set; }
    public bool HandleReferenceNavigationPropertyExpandFilter { get; public set; }
    [CompilerGeneratedAttribute]
public TimeZoneInfo get_TimeZone();
    [CompilerGeneratedAttribute]
public void set_TimeZone(TimeZoneInfo value);
    internal Nullable`1<int> get_ModelBoundPageSize();
    internal void set_ModelBoundPageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_EnsureStableOrdering();
    [CompilerGeneratedAttribute]
public void set_EnsureStableOrdering(bool value);
    public HandleNullPropagationOption get_HandleNullPropagation();
    public void set_HandleNullPropagation(HandleNullPropagationOption value);
    [CompilerGeneratedAttribute]
public bool get_EnableConstantParameterization();
    [CompilerGeneratedAttribute]
public void set_EnableConstantParameterization(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableCorrelatedSubqueryBuffering();
    [CompilerGeneratedAttribute]
public void set_EnableCorrelatedSubqueryBuffering(bool value);
    [CompilerGeneratedAttribute]
public AllowedQueryOptions get_IgnoredQueryOptions();
    [CompilerGeneratedAttribute]
public void set_IgnoredQueryOptions(AllowedQueryOptions value);
    [CompilerGeneratedAttribute]
public AllowedQueryOptions get_IgnoredNestedQueryOptions();
    [CompilerGeneratedAttribute]
public void set_IgnoredNestedQueryOptions(AllowedQueryOptions value);
    public Nullable`1<int> get_PageSize();
    public void set_PageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_HandleReferenceNavigationPropertyExpandFilter();
    [CompilerGeneratedAttribute]
public void set_HandleReferenceNavigationPropertyExpandFilter(bool value);
    internal void CopyFrom(ODataQuerySettings settings);
}
public class Microsoft.AspNetCore.OData.Query.ODataRawQueryOptions : object {
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Apply>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Compute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Search>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Select>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Expand>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SkipToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeltaToken>k__BackingField;
    public string Filter { get; internal set; }
    public string Apply { get; internal set; }
    public string Compute { get; internal set; }
    public string Search { get; internal set; }
    public string OrderBy { get; internal set; }
    public string Top { get; internal set; }
    public string Skip { get; internal set; }
    public string Select { get; internal set; }
    public string Expand { get; internal set; }
    public string Count { get; internal set; }
    public string Format { get; internal set; }
    public string SkipToken { get; internal set; }
    public string DeltaToken { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
internal void set_Filter(string value);
    [CompilerGeneratedAttribute]
public string get_Apply();
    [CompilerGeneratedAttribute]
internal void set_Apply(string value);
    [CompilerGeneratedAttribute]
public string get_Compute();
    [CompilerGeneratedAttribute]
internal void set_Compute(string value);
    [CompilerGeneratedAttribute]
public string get_Search();
    [CompilerGeneratedAttribute]
internal void set_Search(string value);
    [CompilerGeneratedAttribute]
public string get_OrderBy();
    [CompilerGeneratedAttribute]
internal void set_OrderBy(string value);
    [CompilerGeneratedAttribute]
public string get_Top();
    [CompilerGeneratedAttribute]
internal void set_Top(string value);
    [CompilerGeneratedAttribute]
public string get_Skip();
    [CompilerGeneratedAttribute]
internal void set_Skip(string value);
    [CompilerGeneratedAttribute]
public string get_Select();
    [CompilerGeneratedAttribute]
internal void set_Select(string value);
    [CompilerGeneratedAttribute]
public string get_Expand();
    [CompilerGeneratedAttribute]
internal void set_Expand(string value);
    [CompilerGeneratedAttribute]
public string get_Count();
    [CompilerGeneratedAttribute]
internal void set_Count(string value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
internal void set_Format(string value);
    [CompilerGeneratedAttribute]
public string get_SkipToken();
    [CompilerGeneratedAttribute]
internal void set_SkipToken(string value);
    [CompilerGeneratedAttribute]
public string get_DeltaToken();
    [CompilerGeneratedAttribute]
internal void set_DeltaToken(string value);
}
public class Microsoft.AspNetCore.OData.Query.OrderByClauseNode : OrderByNode {
    [CompilerGeneratedAttribute]
private OrderByClause <OrderByClause>k__BackingField;
    public OrderByClause OrderByClause { get; }
    public OrderByClauseNode(OrderByClause orderByClause);
    [CompilerGeneratedAttribute]
public OrderByClause get_OrderByClause();
}
public class Microsoft.AspNetCore.OData.Query.OrderByCountNode : OrderByNode {
    [CompilerGeneratedAttribute]
private OrderByClause <OrderByClause>k__BackingField;
    public OrderByClause OrderByClause { get; }
    public OrderByCountNode(OrderByClause orderByClause);
    [CompilerGeneratedAttribute]
public OrderByClause get_OrderByClause();
}
public class Microsoft.AspNetCore.OData.Query.OrderByItNode : OrderByNode {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public OrderByItNode(OrderByDirection direction);
    public OrderByItNode(OrderByClause clause);
    [CompilerGeneratedAttribute]
public string get_Name();
}
public abstract class Microsoft.AspNetCore.OData.Query.OrderByNode : object {
    [CompilerGeneratedAttribute]
private OrderByDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyPath>k__BackingField;
    public OrderByDirection Direction { get; internal set; }
    internal string PropertyPath { get; internal set; }
    protected OrderByNode(OrderByDirection direction);
    protected OrderByNode(OrderByClause orderByClause);
    [CompilerGeneratedAttribute]
public OrderByDirection get_Direction();
    [CompilerGeneratedAttribute]
internal void set_Direction(OrderByDirection value);
    [CompilerGeneratedAttribute]
internal string get_PropertyPath();
    [CompilerGeneratedAttribute]
internal void set_PropertyPath(string value);
    public static IList`1<OrderByNode> CreateCollection(OrderByClause orderByClause);
    internal static string RestorePropertyPath(SingleValueNode expression);
}
public class Microsoft.AspNetCore.OData.Query.OrderByOpenPropertyNode : OrderByNode {
    [CompilerGeneratedAttribute]
private OrderByClause <OrderByClause>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public OrderByClause OrderByClause { get; }
    public string PropertyName { get; }
    public OrderByOpenPropertyNode(OrderByClause orderByClause);
    [CompilerGeneratedAttribute]
public OrderByClause get_OrderByClause();
    [CompilerGeneratedAttribute]
public string get_PropertyName();
}
public class Microsoft.AspNetCore.OData.Query.OrderByPropertyNode : OrderByNode {
    [CompilerGeneratedAttribute]
private OrderByClause <OrderByClause>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmProperty <Property>k__BackingField;
    public OrderByClause OrderByClause { get; private set; }
    public IEdmProperty Property { get; private set; }
    public OrderByPropertyNode(OrderByClause orderByClause);
    public OrderByPropertyNode(IEdmProperty property, OrderByDirection direction);
    [CompilerGeneratedAttribute]
public OrderByClause get_OrderByClause();
    [CompilerGeneratedAttribute]
private void set_OrderByClause(OrderByClause value);
    [CompilerGeneratedAttribute]
public IEdmProperty get_Property();
    [CompilerGeneratedAttribute]
private void set_Property(IEdmProperty value);
}
public class Microsoft.AspNetCore.OData.Query.OrderByQueryOption : object {
    private OrderByClause _orderByClause;
    private IList`1<OrderByNode> _orderByNodes;
    private ODataQueryOptionParser _queryOptionParser;
    [CompilerGeneratedAttribute]
private ODataQueryContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IOrderByQueryValidator <Validator>k__BackingField;
    [CompilerGeneratedAttribute]
private ComputeQueryOption <Compute>k__BackingField;
    public ODataQueryContext Context { get; private set; }
    public IList`1<OrderByNode> OrderByNodes { get; }
    public string RawValue { get; private set; }
    public IOrderByQueryValidator Validator { get; public set; }
    public ComputeQueryOption Compute { get; public set; }
    public OrderByClause OrderByClause { get; }
    public OrderByQueryOption(string rawValue, ODataQueryContext context, ODataQueryOptionParser queryOptionParser);
    internal OrderByQueryOption(string rawValue, ODataQueryContext context, string applyRaw);
    internal OrderByQueryOption(string rawValue, ODataQueryContext context);
    internal OrderByQueryOption(OrderByQueryOption orderBy);
    [CompilerGeneratedAttribute]
public ODataQueryContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ODataQueryContext value);
    public IList`1<OrderByNode> get_OrderByNodes();
    [CompilerGeneratedAttribute]
public string get_RawValue();
    [CompilerGeneratedAttribute]
private void set_RawValue(string value);
    [CompilerGeneratedAttribute]
public IOrderByQueryValidator get_Validator();
    [CompilerGeneratedAttribute]
public void set_Validator(IOrderByQueryValidator value);
    [CompilerGeneratedAttribute]
public ComputeQueryOption get_Compute();
    [CompilerGeneratedAttribute]
public void set_Compute(ComputeQueryOption value);
    public OrderByClause get_OrderByClause();
    public IOrderedQueryable`1<T> ApplyTo(IQueryable`1<T> query);
    public IOrderedQueryable`1<T> ApplyTo(IQueryable`1<T> query, ODataQuerySettings querySettings);
    public IOrderedQueryable ApplyTo(IQueryable query);
    public IOrderedQueryable ApplyTo(IQueryable query, ODataQuerySettings querySettings);
    public void Validate(ODataValidationSettings validationSettings);
    private IOrderedQueryable ApplyToCore(IQueryable query, ODataQuerySettings querySettings);
    internal List`1<string> GetOrderByRawValues();
    private static IQueryable AddOrderByQueryForProperty(IOrderByBinder orderByBinder, OrderByClause orderbyClause, IQueryable querySoFar, QueryBinderContext binderContext, bool alreadyOrdered);
    private OrderByClause TranslateParameterAlias(OrderByClause orderBy);
}
internal class Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator : QueryNodeVisitor`1<QueryNode> {
    private IDictionary`2<string, SingleValueNode> _parameterAliasNode;
    public ParameterAliasNodeTranslator(IDictionary`2<string, SingleValueNode> parameterAliasNodes);
    public virtual QueryNode Visit(AllNode nodeIn);
    public virtual QueryNode Visit(AnyNode nodeIn);
    public virtual QueryNode Visit(BinaryOperatorNode nodeIn);
    public virtual QueryNode Visit(InNode nodeIn);
    public virtual QueryNode Visit(CollectionFunctionCallNode nodeIn);
    public virtual QueryNode Visit(CollectionNavigationNode nodeIn);
    public virtual QueryNode Visit(CollectionOpenPropertyAccessNode nodeIn);
    public virtual QueryNode Visit(CollectionComplexNode nodeIn);
    public virtual QueryNode Visit(CollectionPropertyAccessNode nodeIn);
    public virtual QueryNode Visit(ConstantNode nodeIn);
    public virtual QueryNode Visit(CollectionConstantNode nodeIn);
    public virtual QueryNode Visit(ConvertNode nodeIn);
    public virtual QueryNode Visit(CollectionResourceCastNode nodeIn);
    public virtual QueryNode Visit(CollectionResourceFunctionCallNode nodeIn);
    public virtual QueryNode Visit(ResourceRangeVariableReferenceNode nodeIn);
    public virtual QueryNode Visit(NamedFunctionParameterNode nodeIn);
    public virtual QueryNode Visit(NonResourceRangeVariableReferenceNode nodeIn);
    public virtual QueryNode Visit(ParameterAliasNode nodeIn);
    public virtual QueryNode Visit(SearchTermNode nodeIn);
    public virtual QueryNode Visit(SingleResourceCastNode nodeIn);
    public virtual QueryNode Visit(SingleResourceFunctionCallNode nodeIn);
    public virtual QueryNode Visit(SingleNavigationNode nodeIn);
    public virtual QueryNode Visit(SingleValueFunctionCallNode nodeIn);
    public virtual QueryNode Visit(SingleValueOpenPropertyAccessNode nodeIn);
    public virtual QueryNode Visit(SingleValuePropertyAccessNode nodeIn);
    public virtual QueryNode Visit(SingleComplexNode nodeIn);
    public virtual QueryNode Visit(UnaryOperatorNode nodeIn);
    public virtual QueryNode Visit(CountNode nodeIn);
    [CompilerGeneratedAttribute]
private QueryNode <Visit>b__6_0(QueryNode p);
    [CompilerGeneratedAttribute]
private QueryNode <Visit>b__15_0(QueryNode p);
    [CompilerGeneratedAttribute]
private QueryNode <Visit>b__22_0(QueryNode p);
    [CompilerGeneratedAttribute]
private QueryNode <Visit>b__24_0(QueryNode p);
}
public class Microsoft.AspNetCore.OData.Query.QueryFilterProvider : object {
    [CompilerGeneratedAttribute]
private IActionFilter <QueryFilter>k__BackingField;
    public IActionFilter QueryFilter { get; }
    public int Order { get; }
    public QueryFilterProvider(IActionFilter queryFilter);
    [CompilerGeneratedAttribute]
public IActionFilter get_QueryFilter();
    public sealed virtual int get_Order();
    public sealed virtual void OnProvidersExecuting(FilterProviderContext context);
    public sealed virtual void OnProvidersExecuted(FilterProviderContext context);
    private bool ShouldAddFilter(FilterProviderContext context, Type returnType, ControllerActionDescriptor controllerActionDescriptor);
    internal static bool IsIQueryable(Type type);
    [CompilerGeneratedAttribute]
private bool <ShouldAddFilter>b__8_1(FilterItem f);
}
public class Microsoft.AspNetCore.OData.Query.SearchQueryOption : object {
    private SearchClause _searchClause;
    private ODataQueryOptionParser _queryOptionParser;
    [CompilerGeneratedAttribute]
private ODataQueryContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResultClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawValue>k__BackingField;
    public ODataQueryContext Context { get; }
    public Type ResultClrType { get; }
    public SearchClause SearchClause { get; }
    public string RawValue { get; }
    public SearchQueryOption(string rawValue, ODataQueryContext context, ODataQueryOptionParser queryOptionParser);
    internal SearchQueryOption(string rawValue, ODataQueryContext context);
    [CompilerGeneratedAttribute]
public ODataQueryContext get_Context();
    [CompilerGeneratedAttribute]
public Type get_ResultClrType();
    public SearchClause get_SearchClause();
    [CompilerGeneratedAttribute]
public string get_RawValue();
    public IQueryable ApplyTo(IQueryable query, ODataQuerySettings querySettings);
}
internal class Microsoft.AspNetCore.OData.Query.SelectExpandIncludedProperty : object {
    private PropertySegment _propertySegment;
    private IEdmNavigationSource _navigationSource;
    private PathSelectItem _propertySelectItem;
    private IList`1<SelectItem> _subSelectItems;
    public SelectExpandIncludedProperty(PropertySegment propertySegment);
    public SelectExpandIncludedProperty(PropertySegment propertySegment, IEdmNavigationSource navigationSource);
    public PathSelectItem ToPathSelectItem();
    public void AddSubSelectItem(IList`1<ODataPathSegment> remainingSegments, PathSelectItem oldSelectItem);
    public void AddSubExpandItem(IList`1<ODataPathSegment> remainingSegments, ExpandedReferenceSelectItem oldRefItem);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.OData.Query.SelectExpandPathExtensions : object {
    [ExtensionAttribute]
public static ODataPathSegment GetFirstNonTypeCastSegment(ODataSelectPath selectPath, IList`1& remainingSegments);
    [ExtensionAttribute]
public static ODataPathSegment GetFirstNonTypeCastSegment(ODataExpandPath expandPath, IList`1& remainingSegments);
    private static ODataPathSegment GetFirstNonTypeCastSegment(ODataPath path, Func`2<ODataPathSegment, bool> middleSegmentPredicte, Func`2<ODataPathSegment, bool> lastSegmentPredicte, IList`1& remainingSegments);
}
public class Microsoft.AspNetCore.OData.Query.SelectExpandQueryOption : object {
    private SelectExpandClause _selectExpandClause;
    private ODataQueryOptionParser _queryOptionParser;
    private SelectExpandClause _processedSelectExpandClause;
    private int _levelsMaxLiteralExpansionDepth;
    [CompilerGeneratedAttribute]
private ODataQueryContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawSelect>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawExpand>k__BackingField;
    [CompilerGeneratedAttribute]
private ComputeQueryOption <Compute>k__BackingField;
    [CompilerGeneratedAttribute]
private ISelectExpandQueryValidator <Validator>k__BackingField;
    [CompilerGeneratedAttribute]
private OrderByQueryOption <OrderBy>k__BackingField;
    public ODataQueryContext Context { get; private set; }
    public string RawSelect { get; private set; }
    public string RawExpand { get; private set; }
    public ComputeQueryOption Compute { get; public set; }
    public ISelectExpandQueryValidator Validator { get; public set; }
    internal OrderByQueryOption OrderBy { get; internal set; }
    public SelectExpandClause SelectExpandClause { get; }
    internal SelectExpandClause ProcessedSelectExpandClause { get; }
    public int LevelsMaxLiteralExpansionDepth { get; public set; }
    public SelectExpandQueryOption(string select, string expand, ODataQueryContext context, ODataQueryOptionParser queryOptionParser);
    internal SelectExpandQueryOption(string select, string expand, ODataQueryContext context, SelectExpandClause selectExpandClause);
    internal SelectExpandQueryOption(string select, string expand, ODataQueryContext context);
    [CompilerGeneratedAttribute]
public ODataQueryContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ODataQueryContext value);
    [CompilerGeneratedAttribute]
public string get_RawSelect();
    [CompilerGeneratedAttribute]
private void set_RawSelect(string value);
    [CompilerGeneratedAttribute]
public string get_RawExpand();
    [CompilerGeneratedAttribute]
private void set_RawExpand(string value);
    [CompilerGeneratedAttribute]
public ComputeQueryOption get_Compute();
    [CompilerGeneratedAttribute]
public void set_Compute(ComputeQueryOption value);
    [CompilerGeneratedAttribute]
public ISelectExpandQueryValidator get_Validator();
    [CompilerGeneratedAttribute]
public void set_Validator(ISelectExpandQueryValidator value);
    [CompilerGeneratedAttribute]
internal OrderByQueryOption get_OrderBy();
    [CompilerGeneratedAttribute]
internal void set_OrderBy(OrderByQueryOption value);
    public SelectExpandClause get_SelectExpandClause();
    internal SelectExpandClause get_ProcessedSelectExpandClause();
    public int get_LevelsMaxLiteralExpansionDepth();
    public void set_LevelsMaxLiteralExpansionDepth(int value);
    public IQueryable ApplyTo(IQueryable queryable, ODataQuerySettings settings);
    public object ApplyTo(object entity, ODataQuerySettings settings);
    public void Validate(ODataValidationSettings validationSettings);
    internal SelectExpandClause ProcessLevels();
    private SelectExpandClause ProcessLevels(SelectExpandClause selectExpandClause, int levelsMaxLiteralExpansionDepth, ModelBoundQuerySettings querySettings, Boolean& levelsEncountered, Boolean& isMaxLevel);
    private IEnumerable`1<SelectItem> ProcessLevels(IEnumerable`1<SelectItem> selectItems, int levelsMaxLiteralExpansionDepth, ModelBoundQuerySettings querySettings, Boolean& levelsEncountered, Boolean& isMaxLevel);
    private void GetAutoSelectExpandItems(IEdmEntityType baseEntityType, IEdmModel model, IEdmNavigationSource navigationSource, bool isAllSelected, ModelBoundQuerySettings modelBoundQuerySettings, int depth, List`1& autoSelectItems, List`1& autoExpandItems);
    private static ODataSelectPath BuildSelectPath(SelectModelPath path, IEdmNavigationSource navigationSource);
    private static ODataExpandPath BuildExpandPath(ExpandModelPath path, IEdmNavigationSource navigationSource, IEdmNavigationSource currentEdmNavigationSource);
    private ExpandedNavigationSelectItem ProcessLevels(ExpandedNavigationSelectItem expandItem, int levelsMaxLiteralExpansionDepth, ModelBoundQuerySettings querySettings, Boolean& levelsEncounteredInExpand, Boolean& isMaxLevelInExpand);
    private static List`1<SelectItem> RemoveExpandItemExceedMaxDepth(int depth, IEnumerable`1<SelectItem> autoExpandItems);
    private static void RemoveSameExpandItem(IEdmNavigationProperty navigationProperty, List`1<SelectItem> autoExpandItems);
    private static int GetMaxExpandDepth(ModelBoundQuerySettings querySettings, string propertyName);
}
public class Microsoft.AspNetCore.OData.Query.SkipQueryOption : object {
    private Nullable`1<int> _value;
    private ODataQueryOptionParser _queryOptionParser;
    [CompilerGeneratedAttribute]
private ODataQueryContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ISkipQueryValidator <Validator>k__BackingField;
    public ODataQueryContext Context { get; private set; }
    public string RawValue { get; private set; }
    public int Value { get; }
    public ISkipQueryValidator Validator { get; public set; }
    public SkipQueryOption(string rawValue, ODataQueryContext context, ODataQueryOptionParser queryOptionParser);
    internal SkipQueryOption(string rawValue, ODataQueryContext context);
    [CompilerGeneratedAttribute]
public ODataQueryContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ODataQueryContext value);
    [CompilerGeneratedAttribute]
public string get_RawValue();
    [CompilerGeneratedAttribute]
private void set_RawValue(string value);
    public int get_Value();
    [CompilerGeneratedAttribute]
public ISkipQueryValidator get_Validator();
    [CompilerGeneratedAttribute]
public void set_Validator(ISkipQueryValidator value);
    public IQueryable`1<T> ApplyTo(IQueryable`1<T> query, ODataQuerySettings querySettings);
    public IQueryable ApplyTo(IQueryable query, ODataQuerySettings querySettings);
    public void Validate(ODataValidationSettings validationSettings);
    private IQueryable ApplyToCore(IQueryable query, ODataQuerySettings querySettings);
}
public abstract class Microsoft.AspNetCore.OData.Query.SkipTokenHandler : object {
    public abstract virtual IQueryable`1<T> ApplyTo(IQueryable`1<T> query, SkipTokenQueryOption skipTokenQueryOption, ODataQuerySettings querySettings, ODataQueryOptions queryOptions);
    public abstract virtual IQueryable ApplyTo(IQueryable query, SkipTokenQueryOption skipTokenQueryOption, ODataQuerySettings querySettings, ODataQueryOptions queryOptions);
    public abstract virtual Uri GenerateNextPageLink(Uri baseUri, int pageSize, object instance, ODataSerializerContext context);
}
public class Microsoft.AspNetCore.OData.Query.SkipTokenQueryOption : object {
    [CompilerGeneratedAttribute]
private string <RawValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataQueryContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private ISkipTokenQueryValidator <Validator>k__BackingField;
    [CompilerGeneratedAttribute]
private SkipTokenHandler <Handler>k__BackingField;
    public string RawValue { get; }
    public ODataQueryContext Context { get; }
    public ISkipTokenQueryValidator Validator { get; }
    public SkipTokenHandler Handler { get; }
    public SkipTokenQueryOption(string rawValue, ODataQueryContext context);
    [CompilerGeneratedAttribute]
public string get_RawValue();
    [CompilerGeneratedAttribute]
public ODataQueryContext get_Context();
    [CompilerGeneratedAttribute]
public ISkipTokenQueryValidator get_Validator();
    [CompilerGeneratedAttribute]
public SkipTokenHandler get_Handler();
    public virtual IQueryable`1<T> ApplyTo(IQueryable`1<T> query, ODataQuerySettings querySettings, ODataQueryOptions queryOptions);
    public virtual IQueryable ApplyTo(IQueryable query, ODataQuerySettings querySettings, ODataQueryOptions queryOptions);
    public void Validate(ODataValidationSettings validationSettings);
}
public class Microsoft.AspNetCore.OData.Query.TopQueryOption : object {
    private Nullable`1<int> _value;
    private ODataQueryOptionParser _queryOptionParser;
    [CompilerGeneratedAttribute]
private ODataQueryContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ITopQueryValidator <Validator>k__BackingField;
    public ODataQueryContext Context { get; private set; }
    public string RawValue { get; private set; }
    public int Value { get; }
    public ITopQueryValidator Validator { get; public set; }
    public TopQueryOption(string rawValue, ODataQueryContext context, ODataQueryOptionParser queryOptionParser);
    internal TopQueryOption(string rawValue, ODataQueryContext context);
    [CompilerGeneratedAttribute]
public ODataQueryContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ODataQueryContext value);
    [CompilerGeneratedAttribute]
public string get_RawValue();
    [CompilerGeneratedAttribute]
private void set_RawValue(string value);
    public int get_Value();
    [CompilerGeneratedAttribute]
public ITopQueryValidator get_Validator();
    [CompilerGeneratedAttribute]
public void set_Validator(ITopQueryValidator value);
    public IOrderedQueryable`1<T> ApplyTo(IQueryable`1<T> query, ODataQuerySettings querySettings);
    public IQueryable ApplyTo(IQueryable query, ODataQuerySettings querySettings);
    public void Validate(ODataValidationSettings validationSettings);
    private IQueryable ApplyToCore(IQueryable query, ODataQuerySettings querySettings);
}
public class Microsoft.AspNetCore.OData.Query.Validator.ComputeQueryValidator : object {
    public virtual void Validate(ComputeQueryOption computeQueryOption, ODataValidationSettings validationSettings);
}
public class Microsoft.AspNetCore.OData.Query.Validator.CountQueryValidator : object {
    public virtual void Validate(CountQueryOption countQueryOption, ODataValidationSettings validationSettings);
}
public class Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator : object {
    public virtual void Validate(FilterQueryOption filterQueryOption, ODataValidationSettings settings);
    protected virtual void ValidateFilter(FilterClause filterClause, FilterValidatorContext validatorContext);
    protected virtual void ValidateAllNode(AllNode allNode, FilterValidatorContext validatorContext);
    protected virtual void ValidateAnyNode(AnyNode anyNode, FilterValidatorContext validatorContext);
    protected virtual void ValidateBinaryOperatorNode(BinaryOperatorNode binaryOperatorNode, FilterValidatorContext validatorContext);
    protected virtual void ValidateLogicalOperator(BinaryOperatorNode binaryNode, FilterValidatorContext validatorContext);
    protected virtual void ValidateArithmeticOperator(BinaryOperatorNode binaryNode, FilterValidatorContext validatorContext);
    protected virtual void ValidateConstantNode(ConstantNode constantNode, FilterValidatorContext validatorContext);
    protected virtual void ValidateConvertNode(ConvertNode convertNode, FilterValidatorContext validatorContext);
    protected virtual void ValidateCountNode(CountNode countNode, FilterValidatorContext validatorContext);
    protected virtual void ValidateNavigationPropertyNode(QueryNode sourceNode, IEdmNavigationProperty navigationProperty, FilterValidatorContext validatorContext);
    protected virtual void ValidateRangeVariable(RangeVariable rangeVariable, FilterValidatorContext validatorContext);
    protected virtual void ValidateSingleValuePropertyAccessNode(SingleValuePropertyAccessNode propertyAccessNode, FilterValidatorContext validatorContext);
    protected virtual void ValidateSingleComplexNode(SingleComplexNode singleComplexNode, FilterValidatorContext validatorContext);
    protected virtual void ValidateCollectionPropertyAccessNode(CollectionPropertyAccessNode propertyAccessNode, FilterValidatorContext validatorContext);
    protected virtual void ValidateCollectionComplexNode(CollectionComplexNode collectionComplexNode, FilterValidatorContext validatorContext);
    protected virtual void ValidateSingleValueFunctionCallNode(SingleValueFunctionCallNode node, FilterValidatorContext validatorContext);
    protected virtual void ValidateSingleResourceFunctionCallNode(SingleResourceFunctionCallNode node, FilterValidatorContext validatorContext);
    protected virtual void ValidateUnaryOperatorNode(UnaryOperatorNode unaryOperatorNode, FilterValidatorContext validatorContext);
    protected virtual void ValidateQueryNode(QueryNode node, FilterValidatorContext validatorContext);
    protected virtual void ValidateCollectionResourceCastNode(CollectionResourceCastNode collectionResourceCastNode, FilterValidatorContext validatorContext);
    protected virtual void ValidateSingleResourceCastNode(SingleResourceCastNode singleResourceCastNode, FilterValidatorContext validatorContext);
    protected virtual void ValidateCollectionNode(CollectionNode node, FilterValidatorContext validatorContext);
    protected virtual void ValidateSingleValueNode(SingleValueNode node, FilterValidatorContext validatorContext);
    private static void ValidateFunction(string functionName, FilterValidatorContext validatorContext);
    private static AllowedFunctions ToODataFunction(string functionName);
    private static AllowedLogicalOperators ToLogicalOperator(BinaryOperatorNode binaryNode);
    private static AllowedArithmeticOperators ToArithmeticOperator(BinaryOperatorNode binaryNode);
}
public class Microsoft.AspNetCore.OData.Query.Validator.FilterValidatorContext : QueryValidatorContext {
    private int _currentNodeCount;
    private int _currentAnyAllExpressionDepth;
    [CompilerGeneratedAttribute]
private FilterQueryOption <Filter>k__BackingField;
    public FilterQueryOption Filter { get; public set; }
    public int CurrentNodeCount { get; }
    public int CurrentAnyAllExpressionDepth { get; }
    [CompilerGeneratedAttribute]
public FilterQueryOption get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(FilterQueryOption value);
    public int get_CurrentNodeCount();
    public int get_CurrentAnyAllExpressionDepth();
    public FilterValidatorContext Clone();
    public void IncrementNodeCount();
    public void EnterLambda();
    public void ExitLambda();
}
public interface Microsoft.AspNetCore.OData.Query.Validator.IComputeQueryValidator {
    public abstract virtual void Validate(ComputeQueryOption computeQueryOption, ODataValidationSettings validationSettings);
}
public interface Microsoft.AspNetCore.OData.Query.Validator.ICountQueryValidator {
    public abstract virtual void Validate(CountQueryOption countQueryOption, ODataValidationSettings validationSettings);
}
public interface Microsoft.AspNetCore.OData.Query.Validator.IFilterQueryValidator {
    public abstract virtual void Validate(FilterQueryOption filterQueryOption, ODataValidationSettings validationSettings);
}
public interface Microsoft.AspNetCore.OData.Query.Validator.IODataQueryValidator {
    public abstract virtual void Validate(ODataQueryOptions options, ODataValidationSettings validationSettings);
}
public interface Microsoft.AspNetCore.OData.Query.Validator.IOrderByQueryValidator {
    public abstract virtual void Validate(OrderByQueryOption orderByOption, ODataValidationSettings validationSettings);
}
public interface Microsoft.AspNetCore.OData.Query.Validator.ISelectExpandQueryValidator {
    public abstract virtual void Validate(SelectExpandQueryOption selectExpandQueryOption, ODataValidationSettings validationSettings);
}
public interface Microsoft.AspNetCore.OData.Query.Validator.ISkipQueryValidator {
    public abstract virtual void Validate(SkipQueryOption skipQueryOption, ODataValidationSettings validationSettings);
}
public interface Microsoft.AspNetCore.OData.Query.Validator.ISkipTokenQueryValidator {
    public abstract virtual void Validate(SkipTokenQueryOption skipToken, ODataValidationSettings validationSettings);
}
public interface Microsoft.AspNetCore.OData.Query.Validator.ITopQueryValidator {
    public abstract virtual void Validate(TopQueryOption topQueryOption, ODataValidationSettings validationSettings);
}
public class Microsoft.AspNetCore.OData.Query.Validator.ODataQueryValidator : object {
    public virtual void Validate(ODataQueryOptions options, ODataValidationSettings validationSettings);
    private static void ValidateQueryOptionAllowed(AllowedQueryOptions queryOption, AllowedQueryOptions allowed);
    private static void ValidateNotEmptyOrWhitespace(string rawValue);
}
public class Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings : object {
    private static int MinMaxSkip;
    private static int MinMaxTop;
    private static int MinMaxExpansionDepth;
    private static int MinMaxNodeCount;
    private static int MinMaxAnyAllExpressionDepth;
    private static int MinMaxOrderByNodeCount;
    internal static int DefaultMaxExpansionDepth;
    private AllowedArithmeticOperators _allowedArithmeticOperators;
    private AllowedFunctions _allowedFunctions;
    private AllowedLogicalOperators _allowedLogicalOperators;
    private AllowedQueryOptions _allowedQueryParameters;
    private ISet`1<string> _allowedOrderByProperties;
    private Nullable`1<int> _maxSkip;
    private Nullable`1<int> _maxTop;
    private int _maxAnyAllExpressionDepth;
    private int _maxNodeCount;
    private int _maxExpansionDepth;
    private int _maxOrderByNodeCount;
    public AllowedArithmeticOperators AllowedArithmeticOperators { get; public set; }
    public AllowedFunctions AllowedFunctions { get; public set; }
    public AllowedLogicalOperators AllowedLogicalOperators { get; public set; }
    public ISet`1<string> AllowedOrderByProperties { get; }
    public AllowedQueryOptions AllowedQueryOptions { get; public set; }
    public int MaxOrderByNodeCount { get; public set; }
    public int MaxAnyAllExpressionDepth { get; public set; }
    public int MaxNodeCount { get; public set; }
    public Nullable`1<int> MaxSkip { get; public set; }
    public Nullable`1<int> MaxTop { get; public set; }
    public int MaxExpansionDepth { get; public set; }
    public AllowedArithmeticOperators get_AllowedArithmeticOperators();
    public void set_AllowedArithmeticOperators(AllowedArithmeticOperators value);
    public AllowedFunctions get_AllowedFunctions();
    public void set_AllowedFunctions(AllowedFunctions value);
    public AllowedLogicalOperators get_AllowedLogicalOperators();
    public void set_AllowedLogicalOperators(AllowedLogicalOperators value);
    public ISet`1<string> get_AllowedOrderByProperties();
    public AllowedQueryOptions get_AllowedQueryOptions();
    public void set_AllowedQueryOptions(AllowedQueryOptions value);
    public int get_MaxOrderByNodeCount();
    public void set_MaxOrderByNodeCount(int value);
    public int get_MaxAnyAllExpressionDepth();
    public void set_MaxAnyAllExpressionDepth(int value);
    public int get_MaxNodeCount();
    public void set_MaxNodeCount(int value);
    public Nullable`1<int> get_MaxSkip();
    public void set_MaxSkip(Nullable`1<int> value);
    public Nullable`1<int> get_MaxTop();
    public void set_MaxTop(Nullable`1<int> value);
    public int get_MaxExpansionDepth();
    public void set_MaxExpansionDepth(int value);
}
internal class Microsoft.AspNetCore.OData.Query.Validator.OrderByModelLimitationsValidator : QueryNodeVisitor`1<SingleValueNode> {
    private IEdmModel _model;
    private bool _enableOrderBy;
    private IEdmProperty _property;
    private IEdmStructuredType _structuredType;
    public OrderByModelLimitationsValidator(ODataQueryContext context, bool enableOrderBy);
    public bool TryValidate(IEdmProperty property, IEdmStructuredType structuredType, OrderByClause orderByClause, bool explicitPropertiesDefined);
    public bool TryValidate(OrderByClause orderByClause, bool explicitPropertiesDefined);
    public virtual SingleValueNode Visit(SingleValuePropertyAccessNode nodeIn);
    public virtual SingleValueNode Visit(SingleValueOpenPropertyAccessNode nodeIn);
    public virtual SingleValueNode Visit(SingleComplexNode nodeIn);
    public virtual SingleValueNode Visit(SingleNavigationNode nodeIn);
    public virtual SingleValueNode Visit(ResourceRangeVariableReferenceNode nodeIn);
    public virtual SingleValueNode Visit(NonResourceRangeVariableReferenceNode nodeIn);
    public virtual SingleValueNode Visit(SingleValueFunctionCallNode nodeIn);
    private static string GetPropertyName(SingleValueNode node);
}
public class Microsoft.AspNetCore.OData.Query.Validator.OrderByQueryValidator : object {
    public virtual void Validate(OrderByQueryOption orderByOption, ODataValidationSettings validationSettings);
    protected virtual void ValidateOrderBy(OrderByClause orderByClause, OrderByValidatorContext validatorContext);
    protected virtual void ValidateQueryNode(QueryNode node, OrderByValidatorContext validatorContext);
    protected virtual void ValidateSingleValueNode(SingleValueNode node, OrderByValidatorContext validatorContext, bool skipRangeVariable);
    protected virtual void ValidateSingleValueOpenPropertyNode(SingleValueOpenPropertyAccessNode openPropertyNode, OrderByValidatorContext validatorContext);
    protected virtual void ValidateInNode(InNode inNode, OrderByValidatorContext validatorContext);
    protected virtual void ValidateConstantNode(ConstantNode constantNode, OrderByValidatorContext validatorContext);
    protected virtual void ValidateConvertNode(ConvertNode convertNode, OrderByValidatorContext validatorContext);
    protected virtual void ValidateCountNode(CountNode countNode, OrderByValidatorContext validatorContext);
    protected virtual void ValidateBinaryOperatorNode(BinaryOperatorNode binaryOperatorNode, OrderByValidatorContext validatorContext);
    protected virtual void ValidateRangeVariable(RangeVariable rangeVariable, OrderByValidatorContext validatorContext);
    protected virtual void ValidateSingleValuePropertyAccessNode(SingleValuePropertyAccessNode propertyAccessNode, OrderByValidatorContext validatorContext);
    protected virtual void ValidateSingleValueFunctionCallNode(SingleValueFunctionCallNode node, OrderByValidatorContext validatorContext);
    protected virtual void ValidateSingleComplexNode(SingleComplexNode singleComplexNode, OrderByValidatorContext validatorContext);
    protected virtual void ValidateSingleResourceFunctionCallNode(SingleResourceFunctionCallNode node, OrderByValidatorContext validatorContext);
    protected virtual void ValidateSingleResourceCastNode(SingleResourceCastNode singleResourceCastNode, OrderByValidatorContext validatorContext);
    protected virtual void ValidateUnaryOperatorNode(UnaryOperatorNode unaryOperatorNode, OrderByValidatorContext validatorContext);
    protected virtual void ValidateNavigationPropertyNode(CollectionNavigationNode collectionNavigation, OrderByValidatorContext validatorContext);
    protected virtual void ValidateNavigationPropertyNode(SingleNavigationNode singleNavigation, OrderByValidatorContext validatorContext);
    protected virtual void ValidateAllNode(AllNode allNode, OrderByValidatorContext validatorContext);
    protected virtual void ValidateAnyNode(AnyNode anyNode, OrderByValidatorContext validatorContext);
    protected virtual void ValidateCollectionNode(CollectionNode node, OrderByValidatorContext validatorContext);
    protected virtual void ValidateCollectionResourceCastNode(CollectionResourceCastNode collectionResourceCastNode, OrderByValidatorContext validatorContext);
    protected virtual void ValidateCollectionPropertyAccessNode(CollectionPropertyAccessNode propertyAccessNode, OrderByValidatorContext validatorContext);
    protected virtual void ValidateCollectionComplexNode(CollectionComplexNode collectionComplexNode, OrderByValidatorContext validatorContext);
    private static void ValidatePropertyAllowed(string propertyName, ODataValidationSettings validationSettings);
    private static bool IsAllowed(ODataValidationSettings validationSettings, string propertyName);
}
public class Microsoft.AspNetCore.OData.Query.Validator.OrderByValidatorContext : QueryValidatorContext {
    private int _orderByNodeCount;
    [CompilerGeneratedAttribute]
private OrderByQueryOption <OrderBy>k__BackingField;
    public OrderByQueryOption OrderBy { get; public set; }
    public int OrderByNodeCount { get; }
    [CompilerGeneratedAttribute]
public OrderByQueryOption get_OrderBy();
    [CompilerGeneratedAttribute]
public void set_OrderBy(OrderByQueryOption value);
    public int get_OrderByNodeCount();
    public void IncrementNodeCount();
}
public abstract class Microsoft.AspNetCore.OData.Query.Validator.QueryValidatorContext : object {
    [CompilerGeneratedAttribute]
private ODataQueryContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataValidationSettings <ValidationSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmStructuredType <StructuredType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentDepth>k__BackingField;
    public ODataQueryContext Context { get; public set; }
    public ODataValidationSettings ValidationSettings { get; public set; }
    public IEdmProperty Property { get; public set; }
    public IEdmStructuredType StructuredType { get; public set; }
    public int CurrentDepth { get; public set; }
    public IEdmModel Model { get; }
    [CompilerGeneratedAttribute]
public ODataQueryContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(ODataQueryContext value);
    [CompilerGeneratedAttribute]
public ODataValidationSettings get_ValidationSettings();
    [CompilerGeneratedAttribute]
public void set_ValidationSettings(ODataValidationSettings value);
    [CompilerGeneratedAttribute]
public IEdmProperty get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(IEdmProperty value);
    [CompilerGeneratedAttribute]
public IEdmStructuredType get_StructuredType();
    [CompilerGeneratedAttribute]
public void set_StructuredType(IEdmStructuredType value);
    [CompilerGeneratedAttribute]
public int get_CurrentDepth();
    [CompilerGeneratedAttribute]
public void set_CurrentDepth(int value);
    public IEdmModel get_Model();
}
internal class Microsoft.AspNetCore.OData.Query.Validator.QueryValidatorHelpers : object {
    public static void ValidateFunction(SingleValueFunctionCallNode functionCallNode, ODataValidationSettings settings);
    private static AllowedFunctions ToODataFunction(string functionName);
}
public class Microsoft.AspNetCore.OData.Query.Validator.SelectExpandQueryValidator : object {
    public virtual void Validate(SelectExpandQueryOption selectExpandQueryOption, ODataValidationSettings validationSettings);
    protected virtual void ValidateSelectExpand(SelectExpandClause selectExpandClause, SelectExpandValidatorContext validatorContext);
    protected virtual void ValidateExpandedNavigationSelectItem(ExpandedNavigationSelectItem expandItem, SelectExpandValidatorContext validatorContext);
    protected virtual void ValidateExpandedCountSelectItem(ExpandedCountSelectItem expandCountItem, SelectExpandValidatorContext validatorContext);
    protected virtual void ValidateExpandedReferenceSelectItem(ExpandedReferenceSelectItem expandReferItem, SelectExpandValidatorContext validatorContext);
    protected virtual void ValidatePathSelectItem(PathSelectItem pathSelectItem, SelectExpandValidatorContext validatorContext);
    protected virtual void ValidateWildcardSelectItem(WildcardSelectItem wildCardSelectItem, SelectExpandValidatorContext validatorContext);
    protected virtual void ValidateNamespaceQualifiedWildcardSelectItem(NamespaceQualifiedWildcardSelectItem namespaceQualifiedWildcardSelectItem, SelectExpandValidatorContext validatorContext);
    protected virtual void ValidateNestedFilter(FilterClause filterClause, SelectExpandValidatorContext validatorContext);
    protected virtual void ValidateNestedOrderby(OrderByClause orderByClause, SelectExpandValidatorContext validatorContext);
    protected virtual void ValidateNestedTop(Nullable`1<long> topOption, SelectExpandValidatorContext validatorContext);
    protected virtual void ValidateNestedSkip(Nullable`1<long> skipOption, SelectExpandValidatorContext validatorContext);
    protected virtual void ValidateNestedCount(Nullable`1<bool> countOption, SelectExpandValidatorContext validatorContext);
    protected virtual void ValidateNestedLevels(LevelsClause levelsClause, SelectExpandValidatorContext validatorContext);
    protected virtual void ValidateNestedSearch(SearchClause searchClause, SelectExpandValidatorContext validatorContext);
    protected virtual void ValidateNestedCompute(ComputeClause computeClause, SelectExpandValidatorContext validatorContext);
    protected virtual void ValidateNestedApply(ApplyClause applyClause, SelectExpandValidatorContext validatorContext);
    private static void ValidateDepth(SelectExpandClause selectExpand, int maxDepth);
}
public class Microsoft.AspNetCore.OData.Query.Validator.SelectExpandValidatorContext : QueryValidatorContext {
    [CompilerGeneratedAttribute]
private SelectExpandQueryOption <SelectExpand>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RemainingDepth>k__BackingField;
    public SelectExpandQueryOption SelectExpand { get; public set; }
    public Nullable`1<int> RemainingDepth { get; public set; }
    [CompilerGeneratedAttribute]
public SelectExpandQueryOption get_SelectExpand();
    [CompilerGeneratedAttribute]
public void set_SelectExpand(SelectExpandQueryOption value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RemainingDepth();
    [CompilerGeneratedAttribute]
public void set_RemainingDepth(Nullable`1<int> value);
    public SelectExpandValidatorContext Clone();
}
public class Microsoft.AspNetCore.OData.Query.Validator.SkipQueryValidator : object {
    public virtual void Validate(SkipQueryOption skipQueryOption, ODataValidationSettings validationSettings);
}
public class Microsoft.AspNetCore.OData.Query.Validator.SkipTokenQueryValidator : object {
    public virtual void Validate(SkipTokenQueryOption skipToken, ODataValidationSettings validationSettings);
}
public class Microsoft.AspNetCore.OData.Query.Validator.TopQueryValidator : object {
    public virtual void Validate(TopQueryOption topQueryOption, ODataValidationSettings validationSettings);
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.AggregationWrapper : GroupByWrapper {
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.AggregationWrapperConverter : JsonConverter`1<AggregationWrapper> {
    public virtual AggregationWrapper Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, AggregationWrapper value, JsonSerializerOptions options);
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.ComputeWrapper`1 : GroupByWrapper {
    [CompilerGeneratedAttribute]
private T <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmModel <Model>k__BackingField;
    private bool _merged;
    private TypedEdmStructuredObject _typedEdmStructuredObject;
    public T Instance { get; public set; }
    public IEdmModel Model { get; public set; }
    public Dictionary`2<string, object> Values { get; }
    [CompilerGeneratedAttribute]
public T get_Instance();
    [CompilerGeneratedAttribute]
public void set_Instance(T value);
    [CompilerGeneratedAttribute]
public IEdmModel get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(IEdmModel value);
    public virtual Dictionary`2<string, object> get_Values();
    private void EnsureValues();
    public sealed virtual IEdmTypeReference GetEdmType();
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.ComputeWrapperConverter`1 : JsonConverter`1<ComputeWrapper`1<T>> {
    public virtual ComputeWrapper`1<T> Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, ComputeWrapper`1<T> value, JsonSerializerOptions options);
}
public abstract class Microsoft.AspNetCore.OData.Query.Wrapper.DynamicTypeWrapper : object {
    public Dictionary`2<string, object> Values { get; }
    public abstract virtual Dictionary`2<string, object> get_Values();
    public sealed virtual bool TryGetPropertyValue(string propertyName, Object& value);
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.DynamicTypeWrapperConverter : JsonConverterFactory {
    public virtual bool CanConvert(Type typeToConvert);
    public virtual JsonConverter CreateConverter(Type type, JsonSerializerOptions options);
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.EntitySetAggregationWrapper : GroupByWrapper {
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.EntitySetAggregationWrapperConverter : JsonConverter`1<EntitySetAggregationWrapper> {
    public virtual EntitySetAggregationWrapper Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, EntitySetAggregationWrapper value, JsonSerializerOptions options);
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.FlatteningWrapper`1 : GroupByWrapper {
    [CompilerGeneratedAttribute]
private T <Source>k__BackingField;
    public T Source { get; public set; }
    [CompilerGeneratedAttribute]
public T get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(T value);
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.FlatteningWrapperConverter`1 : JsonConverter`1<FlatteningWrapper`1<T>> {
    public virtual FlatteningWrapper`1<T> Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, FlatteningWrapper`1<T> value, JsonSerializerOptions options);
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.GroupByWrapper : DynamicTypeWrapper {
    private Dictionary`2<string, object> _values;
    protected static IPropertyMapper DefaultPropertyMapper;
    [CompilerGeneratedAttribute]
private AggregationPropertyContainer <GroupByContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private AggregationPropertyContainer <Container>k__BackingField;
    public AggregationPropertyContainer GroupByContainer { get; public set; }
    public AggregationPropertyContainer Container { get; public set; }
    public Dictionary`2<string, object> Values { get; }
    private static GroupByWrapper();
    [CompilerGeneratedAttribute]
public virtual AggregationPropertyContainer get_GroupByContainer();
    [CompilerGeneratedAttribute]
public virtual void set_GroupByContainer(AggregationPropertyContainer value);
    [CompilerGeneratedAttribute]
public virtual AggregationPropertyContainer get_Container();
    [CompilerGeneratedAttribute]
public virtual void set_Container(AggregationPropertyContainer value);
    public virtual Dictionary`2<string, object> get_Values();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private void EnsureValues();
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.GroupByWrapperConverter : JsonConverter`1<GroupByWrapper> {
    public virtual GroupByWrapper Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, GroupByWrapper value, JsonSerializerOptions options);
}
public interface Microsoft.AspNetCore.OData.Query.Wrapper.ISelectExpandWrapper {
    public abstract virtual IDictionary`2<string, object> ToDictionary();
    public abstract virtual IDictionary`2<string, object> ToDictionary(Func`3<IEdmModel, IEdmStructuredType, IPropertyMapper> propertyMapperProvider);
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.NoGroupByAggregationWrapper : GroupByWrapper {
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.NoGroupByAggregationWrapperConverter : JsonConverter`1<NoGroupByAggregationWrapper> {
    public virtual NoGroupByAggregationWrapper Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, NoGroupByAggregationWrapper value, JsonSerializerOptions options);
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.NoGroupByWrapper : GroupByWrapper {
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.NoGroupByWrapperConverter : JsonConverter`1<NoGroupByWrapper> {
    public virtual NoGroupByWrapper Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, NoGroupByWrapper value, JsonSerializerOptions options);
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.SelectAll`1 : SelectExpandWrapper`1<TEntity> {
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.SelectAllAndExpand`1 : SelectExpandWrapper`1<TEntity> {
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.SelectAllAndExpandConverter`1 : JsonConverter`1<SelectAllAndExpand`1<TEntity>> {
    public virtual SelectAllAndExpand`1<TEntity> Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, SelectAllAndExpand`1<TEntity> value, JsonSerializerOptions options);
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.SelectAllConverter`1 : JsonConverter`1<SelectAll`1<TEntity>> {
    public virtual SelectAll`1<TEntity> Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, SelectAll`1<TEntity> value, JsonSerializerOptions options);
}
internal abstract class Microsoft.AspNetCore.OData.Query.Wrapper.SelectExpandWrapper : object {
    private static IPropertyMapper DefaultPropertyMapper;
    private static Func`3<IEdmModel, IEdmStructuredType, IPropertyMapper> _mapperProvider;
    private Dictionary`2<string, object> _containerDict;
    private TypedEdmStructuredObject _typedEdmStructuredObject;
    [CompilerGeneratedAttribute]
private PropertyContainer <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private object <UntypedInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseInstanceForProperties>k__BackingField;
    public PropertyContainer Container { get; public set; }
    public IEdmModel Model { get; public set; }
    public object UntypedInstance { get; public set; }
    public string InstanceType { get; public set; }
    public bool UseInstanceForProperties { get; public set; }
    private static SelectExpandWrapper();
    [CompilerGeneratedAttribute]
public PropertyContainer get_Container();
    [CompilerGeneratedAttribute]
public void set_Container(PropertyContainer value);
    [CompilerGeneratedAttribute]
public IEdmModel get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(IEdmModel value);
    [CompilerGeneratedAttribute]
public object get_UntypedInstance();
    [CompilerGeneratedAttribute]
public void set_UntypedInstance(object value);
    [CompilerGeneratedAttribute]
public string get_InstanceType();
    [CompilerGeneratedAttribute]
public void set_InstanceType(string value);
    [CompilerGeneratedAttribute]
public bool get_UseInstanceForProperties();
    [CompilerGeneratedAttribute]
public void set_UseInstanceForProperties(bool value);
    public sealed virtual IEdmTypeReference GetEdmType();
    public sealed virtual bool TryGetPropertyValue(string propertyName, Object& value);
    public sealed virtual IDictionary`2<string, object> ToDictionary();
    public sealed virtual IDictionary`2<string, object> ToDictionary(Func`3<IEdmModel, IEdmStructuredType, IPropertyMapper> mapperProvider);
    protected abstract virtual Type GetElementType();
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.SelectExpandWrapper`1 : SelectExpandWrapper {
    public TElement Instance { get; public set; }
    public TElement get_Instance();
    public void set_Instance(TElement value);
    protected virtual Type GetElementType();
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.SelectExpandWrapperConverter : JsonConverterFactory {
    public static Func`3<IEdmModel, IEdmStructuredType, IPropertyMapper> MapperProvider;
    private static SelectExpandWrapperConverter();
    public virtual bool CanConvert(Type typeToConvert);
    public virtual JsonConverter CreateConverter(Type type, JsonSerializerOptions options);
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.SelectExpandWrapperConverter`1 : JsonConverter`1<SelectExpandWrapper`1<TEntity>> {
    public virtual SelectExpandWrapper`1<TEntity> Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, SelectExpandWrapper`1<TEntity> value, JsonSerializerOptions options);
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.SelectSome`1 : SelectAllAndExpand`1<TEntity> {
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.SelectSomeAndInheritance`1 : SelectExpandWrapper`1<TEntity> {
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.SelectSomeAndInheritanceConverter`1 : JsonConverter`1<SelectSomeAndInheritance`1<TEntity>> {
    public virtual SelectSomeAndInheritance`1<TEntity> Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, SelectSomeAndInheritance`1<TEntity> value, JsonSerializerOptions options);
}
internal class Microsoft.AspNetCore.OData.Query.Wrapper.SelectSomeConverter`1 : JsonConverter`1<SelectSome`1<TEntity>> {
    public virtual SelectSome`1<TEntity> Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, SelectSome`1<TEntity> value, JsonSerializerOptions options);
}
public class Microsoft.AspNetCore.OData.Results.BadRequestODataResult : BadRequestResult {
    private static string errorCode;
    [CompilerGeneratedAttribute]
private ODataError <Error>k__BackingField;
    public ODataError Error { get; }
    public BadRequestODataResult(string message);
    public BadRequestODataResult(ODataError odataError);
    [CompilerGeneratedAttribute]
public sealed virtual ODataError get_Error();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Results.BadRequestODataResult/<ExecuteResultAsync>d__6")]
public virtual Task ExecuteResultAsync(ActionContext context);
}
public class Microsoft.AspNetCore.OData.Results.ConflictODataResult : ConflictResult {
    private static string errorCode;
    [CompilerGeneratedAttribute]
private ODataError <Error>k__BackingField;
    public ODataError Error { get; }
    public ConflictODataResult(string message);
    public ConflictODataResult(ODataError odataError);
    [CompilerGeneratedAttribute]
public sealed virtual ODataError get_Error();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Results.ConflictODataResult/<ExecuteResultAsync>d__6")]
public virtual Task ExecuteResultAsync(ActionContext context);
}
public class Microsoft.AspNetCore.OData.Results.CreatedODataResult`1 : ObjectResult {
    [CompilerGeneratedAttribute]
private T <Entity>k__BackingField;
    public T Entity { get; }
    public CreatedODataResult`1(T entity);
    [CompilerGeneratedAttribute]
public virtual T get_Entity();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Results.CreatedODataResult`1/<ExecuteResultAsync>d__4")]
public virtual Task ExecuteResultAsync(ActionContext context);
    internal IActionResult GetInnerActionResult(HttpRequest request);
    internal Uri GenerateEntityId(HttpRequest request);
    internal Uri GenerateLocationHeader(HttpRequest request);
}
public interface Microsoft.AspNetCore.OData.Results.IODataErrorResult {
    public ODataError Error { get; }
    public abstract virtual ODataError get_Error();
}
public class Microsoft.AspNetCore.OData.Results.NotFoundODataResult : NotFoundResult {
    private static string errorCode;
    [CompilerGeneratedAttribute]
private ODataError <Error>k__BackingField;
    public ODataError Error { get; }
    public NotFoundODataResult(string message);
    public NotFoundODataResult(ODataError odataError);
    [CompilerGeneratedAttribute]
public sealed virtual ODataError get_Error();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Results.NotFoundODataResult/<ExecuteResultAsync>d__6")]
public virtual Task ExecuteResultAsync(ActionContext context);
}
public class Microsoft.AspNetCore.OData.Results.ODataErrorResult : ActionResult {
    [CompilerGeneratedAttribute]
private ODataError <Error>k__BackingField;
    public ODataError Error { get; }
    public ODataErrorResult(string errorCode, string message);
    public ODataErrorResult(ODataError odataError);
    [CompilerGeneratedAttribute]
public sealed virtual ODataError get_Error();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Results.ODataErrorResult/<ExecuteResultAsync>d__5")]
public virtual Task ExecuteResultAsync(ActionContext context);
}
[DataContractAttribute]
public abstract class Microsoft.AspNetCore.OData.Results.PageResult : object {
    private Nullable`1<long> _count;
    [CompilerGeneratedAttribute]
private Uri <NextPageLink>k__BackingField;
    [DataMemberAttribute]
public Uri NextPageLink { get; }
    [DataMemberAttribute]
public Nullable`1<long> Count { get; private set; }
    protected PageResult(Uri nextPageLink, Nullable`1<long> count);
    [CompilerGeneratedAttribute]
public Uri get_NextPageLink();
    public Nullable`1<long> get_Count();
    private void set_Count(Nullable`1<long> value);
    public abstract virtual IDictionary`2<string, object> ToDictionary();
}
[DataContractAttribute]
public class Microsoft.AspNetCore.OData.Results.PageResult`1 : PageResult {
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Items>k__BackingField;
    [DataMemberAttribute]
public IEnumerable`1<T> Items { get; private set; }
    public PageResult`1(IEnumerable`1<T> items, Uri nextPageLink, Nullable`1<long> count);
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(IEnumerable`1<T> value);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual IDictionary`2<string, object> ToDictionary();
}
internal class Microsoft.AspNetCore.OData.Results.PageResultConverter`1 : JsonConverter`1<PageResult`1<TEntity>> {
    public virtual PageResult`1<TEntity> Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, PageResult`1<TEntity> value, JsonSerializerOptions options);
}
internal class Microsoft.AspNetCore.OData.Results.PageResultValueConverter : JsonConverterFactory {
    public virtual bool CanConvert(Type typeToConvert);
    public virtual JsonConverter CreateConverter(Type type, JsonSerializerOptions options);
}
internal static class Microsoft.AspNetCore.OData.Results.ResultHelpers : object {
    public static string EntityIdHeaderName;
    public static Uri GenerateODataLink(HttpRequest request, object entity, bool isEntityId);
    public static void AddEntityId(HttpResponse response, Func`1<Uri> entityId);
    public static void AddServiceVersion(HttpResponse response, Func`1<string> version);
    public static Uri GenerateODataLink(ResourceContext resourceContext, bool isEntityId);
    private static Uri GenerateContainmentODataPathSegments(ResourceContext resourceContext, bool isEntityId);
    private static IEdmEntityTypeReference GetEntityType(IEdmModel model, object entity);
}
public abstract class Microsoft.AspNetCore.OData.Results.SingleResult : object {
    [CompilerGeneratedAttribute]
private IQueryable <Queryable>k__BackingField;
    public IQueryable Queryable { get; }
    protected SingleResult(IQueryable queryable);
    [CompilerGeneratedAttribute]
public IQueryable get_Queryable();
    public static SingleResult`1<T> Create(IQueryable`1<T> queryable);
}
public class Microsoft.AspNetCore.OData.Results.SingleResult`1 : SingleResult {
    public IQueryable`1<T> Queryable { get; }
    public SingleResult`1(IQueryable`1<T> queryable);
    public IQueryable`1<T> get_Queryable();
}
internal class Microsoft.AspNetCore.OData.Results.SingleResultConverter`1 : JsonConverter`1<SingleResult`1<TEntity>> {
    public virtual SingleResult`1<TEntity> Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, SingleResult`1<TEntity> value, JsonSerializerOptions options);
}
internal class Microsoft.AspNetCore.OData.Results.SingleResultValueConverter : JsonConverterFactory {
    public virtual bool CanConvert(Type typeToConvert);
    public virtual JsonConverter CreateConverter(Type type, JsonSerializerOptions options);
}
public class Microsoft.AspNetCore.OData.Results.UnauthorizedODataResult : UnauthorizedResult {
    private static string errorCode;
    [CompilerGeneratedAttribute]
private ODataError <Error>k__BackingField;
    public ODataError Error { get; }
    public UnauthorizedODataResult(string message);
    public UnauthorizedODataResult(ODataError odataError);
    [CompilerGeneratedAttribute]
public sealed virtual ODataError get_Error();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Results.UnauthorizedODataResult/<ExecuteResultAsync>d__6")]
public virtual Task ExecuteResultAsync(ActionContext context);
}
public class Microsoft.AspNetCore.OData.Results.UnprocessableEntityODataResult : UnprocessableEntityResult {
    private static string errorCode;
    [CompilerGeneratedAttribute]
private ODataError <Error>k__BackingField;
    public ODataError Error { get; }
    public UnprocessableEntityODataResult(string message);
    public UnprocessableEntityODataResult(ODataError odataError);
    [CompilerGeneratedAttribute]
public sealed virtual ODataError get_Error();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Results.UnprocessableEntityODataResult/<ExecuteResultAsync>d__6")]
public virtual Task ExecuteResultAsync(ActionContext context);
}
public class Microsoft.AspNetCore.OData.Results.UpdatedODataResult`1 : ObjectResult {
    [CompilerGeneratedAttribute]
private T <Entity>k__BackingField;
    public T Entity { get; }
    public UpdatedODataResult`1(T entity);
    [CompilerGeneratedAttribute]
public virtual T get_Entity();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Results.UpdatedODataResult`1/<ExecuteResultAsync>d__4")]
public virtual Task ExecuteResultAsync(ActionContext context);
    internal IActionResult GetInnerActionResult(HttpRequest request);
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.OData.Routing.Attributes.ODataAttributeRoutingAttribute : Attribute {
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.OData.Routing.Attributes.ODataIgnoredAttribute : Attribute {
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.OData.Routing.Attributes.ODataRouteComponentAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <RoutePrefix>k__BackingField;
    public string RoutePrefix { get; }
    public ODataRouteComponentAttribute(string routePrefix);
    [CompilerGeneratedAttribute]
public string get_RoutePrefix();
}
public class Microsoft.AspNetCore.OData.Routing.Controllers.MetadataController : ControllerBase {
    private static Version _defaultEdmxVersion;
    private static MetadataController();
    [HttpGetAttribute]
public IEdmModel GetMetadata();
    [HttpGetAttribute]
public ODataServiceDocument GetServiceDocument();
    private IEdmModel GetModel();
}
[ODataAttributeRoutingAttribute]
public abstract class Microsoft.AspNetCore.OData.Routing.Controllers.ODataController : ControllerBase {
    protected virtual CreatedODataResult`1<TEntity> Created(TEntity entity);
    protected virtual UpdatedODataResult`1<TEntity> Updated(TEntity entity);
    protected virtual BadRequestODataResult BadRequest(string message);
    protected virtual BadRequestODataResult BadRequest(ODataError odataError);
    protected virtual NotFoundODataResult NotFound(string message);
    protected virtual NotFoundODataResult NotFound(ODataError odataError);
    protected virtual UnauthorizedODataResult Unauthorized(string message);
    protected virtual UnauthorizedODataResult Unauthorized(ODataError odataError);
    protected virtual ConflictODataResult Conflict(string message);
    protected virtual ConflictODataResult Conflict(ODataError odataError);
    protected virtual UnprocessableEntityODataResult UnprocessableEntity(string message);
    protected virtual UnprocessableEntityODataResult UnprocessableEntity(ODataError odataError);
    protected virtual ODataErrorResult ODataErrorResult(string errorCode, string message);
    protected virtual ODataErrorResult ODataErrorResult(ODataError odataError);
}
public class Microsoft.AspNetCore.OData.Routing.Conventions.ActionRoutingConvention : OperationRoutingConvention {
    public int Order { get; }
    public virtual int get_Order();
    public virtual bool AppliesToAction(ODataControllerActionContext context);
    protected virtual bool IsOperationParameterMatched(IEdmOperation operation, ActionModel action);
}
public class Microsoft.AspNetCore.OData.Routing.Conventions.AttributeRoutingConvention : object {
    private ILogger`1<AttributeRoutingConvention> _logger;
    private IODataPathTemplateParser _templateParser;
    public int Order { get; }
    public AttributeRoutingConvention(ILogger`1<AttributeRoutingConvention> logger, IODataPathTemplateParser parser);
    public virtual int get_Order();
    public virtual bool AppliesToController(ODataControllerActionContext context);
    public virtual bool AppliesToAction(ODataControllerActionContext context);
    private void ProcessAttributeModel(AttributeRouteModel attributeRouteModel, IEnumerable`1<string> prefixes, ODataControllerActionContext context, SelectorModel actionSelector, ActionModel actionModel, ControllerModel controllerModel, IDictionary`2<SelectorModel, IList`1<SelectorModel>> updatedSelectors);
    private SelectorModel CreateActionSelectorModel(string prefix, IEdmModel model, IServiceProvider sp, string routeTemplate, SelectorModel actionSelectorModel, string originalTemplate, string actionName, string controllerName, Nullable`1<int> order);
    private static void ClearMetadata(SelectorModel selectorModel);
    private static string FindRelatedODataPrefix(string routeTemplate, IEnumerable`1<string> prefixes, String& newRouteTemplate);
}
public class Microsoft.AspNetCore.OData.Routing.Conventions.EntityRoutingConvention : object {
    public int Order { get; }
    public virtual int get_Order();
    public virtual bool AppliesToController(ODataControllerActionContext context);
    public virtual bool AppliesToAction(ODataControllerActionContext context);
    internal static ValueTuple`2<string, string> Split(string actionName);
    private static void AddSelector(IEdmEntitySet entitySet, IEdmEntityType entityType, IEdmStructuredType castType, string prefix, IEdmModel model, ActionModel action, string httpMethod, ODataRouteOptions options);
}
public class Microsoft.AspNetCore.OData.Routing.Conventions.EntitySetRoutingConvention : object {
    public int Order { get; }
    public virtual int get_Order();
    public virtual bool AppliesToController(ODataControllerActionContext context);
    public virtual bool AppliesToAction(ODataControllerActionContext context);
    private bool ProcessEntitySetAction(string actionName, IEdmEntitySet entitySet, IEdmStructuredType castType, ODataControllerActionContext context, ActionModel action);
    protected virtual bool CanApplyDollarCount(IEdmEntitySet entitySet, ODataRouteOptions routeOptions);
}
public class Microsoft.AspNetCore.OData.Routing.Conventions.FunctionRoutingConvention : OperationRoutingConvention {
    public int Order { get; }
    public virtual int get_Order();
    public virtual bool AppliesToAction(ODataControllerActionContext context);
    protected virtual bool IsOperationParameterMatched(IEdmOperation operation, ActionModel action);
}
public interface Microsoft.AspNetCore.OData.Routing.Conventions.IODataControllerActionConvention {
    public int Order { get; }
    public abstract virtual int get_Order();
    public abstract virtual bool AppliesToController(ODataControllerActionContext context);
    public abstract virtual bool AppliesToAction(ODataControllerActionContext context);
}
public class Microsoft.AspNetCore.OData.Routing.Conventions.MetadataRoutingConvention : object {
    private static TypeInfo metadataTypeInfo;
    public int Order { get; }
    private static MetadataRoutingConvention();
    public virtual int get_Order();
    public virtual bool AppliesToController(ODataControllerActionContext context);
    public virtual bool AppliesToAction(ODataControllerActionContext context);
}
public class Microsoft.AspNetCore.OData.Routing.Conventions.NavigationRoutingConvention : object {
    private ILogger`1<NavigationRoutingConvention> _logger;
    public int Order { get; }
    public NavigationRoutingConvention(ILogger`1<NavigationRoutingConvention> logger);
    public virtual int get_Order();
    public virtual bool AppliesToController(ODataControllerActionContext context);
    public virtual bool AppliesToAction(ODataControllerActionContext context);
    private void AddSelector(string httpMethod, ODataControllerActionContext context, ActionModel action, IEdmNavigationSource navigationSource, string declared, IEdmEntityType declaringEntityType, IEdmNavigationProperty navigationProperty, bool hasKey, bool dollarCount);
    internal static string SplitActionName(string actionName, String& property, String& declaring);
    protected virtual bool CanApplyDollarCount(IEdmNavigationProperty edmProperty, string method, ODataRouteOptions routeOptions);
}
public class Microsoft.AspNetCore.OData.Routing.Conventions.ODataControllerActionContext : object {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private ControllerModel <Controller>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmNavigationSource <NavigationSource>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionModel <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataOptions <Options>k__BackingField;
    public string Prefix { get; internal set; }
    public IEdmModel Model { get; internal set; }
    public ControllerModel Controller { get; internal set; }
    public IEdmNavigationSource NavigationSource { get; public set; }
    public ActionModel Action { get; public set; }
    public IEdmEntitySet EntitySet { get; }
    public IEdmEntityType EntityType { get; }
    public IEdmSingleton Singleton { get; }
    public ODataOptions Options { get; public set; }
    public ODataControllerActionContext(string prefix, IEdmModel model, ControllerModel controller);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
internal void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public IEdmModel get_Model();
    [CompilerGeneratedAttribute]
internal void set_Model(IEdmModel value);
    [CompilerGeneratedAttribute]
public ControllerModel get_Controller();
    [CompilerGeneratedAttribute]
internal void set_Controller(ControllerModel value);
    [CompilerGeneratedAttribute]
public IEdmNavigationSource get_NavigationSource();
    [CompilerGeneratedAttribute]
public void set_NavigationSource(IEdmNavigationSource value);
    [CompilerGeneratedAttribute]
public ActionModel get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(ActionModel value);
    public IEdmEntitySet get_EntitySet();
    public IEdmEntityType get_EntityType();
    public IEdmSingleton get_Singleton();
    [CompilerGeneratedAttribute]
public ODataOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(ODataOptions value);
}
public class Microsoft.AspNetCore.OData.Routing.Conventions.OperationImportRoutingConvention : object {
    public int Order { get; }
    public virtual int get_Order();
    public virtual bool AppliesToController(ODataControllerActionContext context);
    public virtual bool AppliesToAction(ODataControllerActionContext context);
    private static IEdmFunctionImport FindFunctionImport(IList`1<IEdmFunctionImport> functionImports, ActionModel action);
}
public abstract class Microsoft.AspNetCore.OData.Routing.Conventions.OperationRoutingConvention : object {
    public int Order { get; }
    public abstract virtual int get_Order();
    public virtual bool AppliesToController(ODataControllerActionContext context);
    public abstract virtual bool AppliesToAction(ODataControllerActionContext context);
    protected void ProcessOperations(ODataControllerActionContext context, IEdmEntityType entityType, IEdmNavigationSource navigationSource);
    private static IEdmOperation[] FindCandidates(ODataControllerActionContext context, string operationName);
    private static IEdmOperation[] FindCandidates(ODataControllerActionContext context, IEdmEntityType entityType, string actionName, IEdmEntityType& castTypeFromActionName, Boolean& isOnCollection);
    internal static string SplitActionName(string actionName, String& cast, Boolean& isOnCollection, StringComparison comparison);
    protected abstract virtual bool IsOperationParameterMatched(IEdmOperation operation, ActionModel action);
    protected static void AddSelector(ODataControllerActionContext context, IEdmOperation edmOperation, bool hasKeyParameter, IEdmEntityType entityType, IEdmNavigationSource navigationSource, IEdmEntityType castType);
    private static IDictionary`2<string, string> GetRequiredFunctionParamters(IEdmOperation operation, ActionModel action);
}
public class Microsoft.AspNetCore.OData.Routing.Conventions.PropertyRoutingConvention : object {
    public int Order { get; }
    public virtual int get_Order();
    public virtual bool AppliesToController(ODataControllerActionContext context);
    public virtual bool AppliesToAction(ODataControllerActionContext context);
    private static void AddSelector(string httpMethod, ODataControllerActionContext context, ActionModel action, IEdmNavigationSource navigationSource, IEdmStructuralProperty edmProperty, IEdmType cast, IEdmEntityType declaringType, bool dollarValue, bool dollarCount);
    private static string SplitActionName(string actionName, String& property, String& cast, String& declared);
    private static string Match(string text, String& declared);
    protected virtual bool CanApply(IEdmProperty edmProperty, string method, ODataRouteOptions routeOptions);
    protected virtual bool CanApplyDollarValue(IEdmProperty edmProperty, string method, ODataRouteOptions routeOptions);
    protected virtual bool CanApplyDollarCount(IEdmProperty edmProperty, string method, ODataRouteOptions routeOptions);
}
public class Microsoft.AspNetCore.OData.Routing.Conventions.RefRoutingConvention : object {
    public int Order { get; }
    public virtual int get_Order();
    public virtual bool AppliesToController(ODataControllerActionContext context);
    public sealed virtual bool AppliesToAction(ODataControllerActionContext context);
    internal static bool ProcessNonNavigationProperty(string httpMethod, ODataControllerActionContext context, ActionModel action, IEdmNavigationSource navigationSource, IEdmEntityType entityType, IEdmStructuredType castType);
    internal static string SplitRefActionName(string actionName, String& httpMethod, String& property, String& declaring);
}
public class Microsoft.AspNetCore.OData.Routing.Conventions.SingletonRoutingConvention : object {
    public int Order { get; }
    public virtual int get_Order();
    public virtual bool AppliesToController(ODataControllerActionContext context);
    public sealed virtual bool AppliesToAction(ODataControllerActionContext context);
    private static bool IsSupportedActionName(ODataControllerActionContext context, string actionName, string singletonName, String& httpMethod);
}
public interface Microsoft.AspNetCore.OData.Routing.IODataRoutingMetadata {
    public string Prefix { get; }
    public IEdmModel Model { get; }
    public ODataPathTemplate Template { get; }
    public bool IsConventional { get; }
    public abstract virtual string get_Prefix();
    public abstract virtual IEdmModel get_Model();
    public abstract virtual ODataPathTemplate get_Template();
    public abstract virtual bool get_IsConventional();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.OData.Routing.ODataPathExtensions : object {
    [ExtensionAttribute]
public static bool IsStreamPropertyPath(ODataPath path);
    [ExtensionAttribute]
public static IEdmType GetEdmType(ODataPath path);
    [ExtensionAttribute]
public static IEdmNavigationSource GetNavigationSource(ODataPath path);
    [ExtensionAttribute]
public static string GetPathString(ODataPath path);
    [ExtensionAttribute]
public static string GetPathString(IList`1<ODataPathSegment> segments);
    [ExtensionAttribute]
internal static bool IsUntypedPropertyPath(ODataPath path);
    [ExtensionAttribute]
internal static ValueTuple`3<IEdmProperty, IEdmStructuredType, string> GetPropertyAndStructuredTypeFromPath(ODataPath path);
}
public class Microsoft.AspNetCore.OData.Routing.ODataPathNavigationSourceHandler : PathSegmentHandler {
    private IList`1<string> _path;
    [CompilerGeneratedAttribute]
private IEdmNavigationSource <NavigationSource>k__BackingField;
    public IEdmNavigationSource NavigationSource { get; private set; }
    public string Path { get; }
    [CompilerGeneratedAttribute]
public IEdmNavigationSource get_NavigationSource();
    [CompilerGeneratedAttribute]
private void set_NavigationSource(IEdmNavigationSource value);
    public string get_Path();
    public virtual void Handle(EntitySetSegment segment);
    public virtual void Handle(KeySegment segment);
    public virtual void Handle(NavigationPropertyLinkSegment segment);
    public virtual void Handle(NavigationPropertySegment segment);
    public virtual void Handle(DynamicPathSegment segment);
    public virtual void Handle(OperationImportSegment segment);
    public virtual void Handle(OperationSegment segment);
    public virtual void Handle(PathTemplateSegment segment);
    public virtual void Handle(PropertySegment segment);
    public virtual void Handle(SingletonSegment segment);
    public virtual void Handle(TypeSegment segment);
    public virtual void Handle(ValueSegment segment);
    public virtual void Handle(CountSegment segment);
    public virtual void Handle(BatchSegment segment);
    public virtual void Handle(MetadataSegment segment);
    public virtual void Handle(ODataPathSegment segment);
}
public class Microsoft.AspNetCore.OData.Routing.ODataPathSegmentHandler : PathSegmentHandler {
    private IList`1<string> _pathUriLiteral;
    private IEdmNavigationSource _navigationSource;
    public IEdmNavigationSource NavigationSource { get; }
    public string PathLiteral { get; }
    public IEdmNavigationSource get_NavigationSource();
    public string get_PathLiteral();
    public virtual void Handle(EntitySetSegment segment);
    public virtual void Handle(KeySegment segment);
    public virtual void Handle(NavigationPropertyLinkSegment segment);
    public virtual void Handle(NavigationPropertySegment segment);
    public virtual void Handle(DynamicPathSegment segment);
    public virtual void Handle(OperationImportSegment segment);
    public virtual void Handle(OperationSegment segment);
    public virtual void Handle(PathTemplateSegment segment);
    public virtual void Handle(PropertySegment segment);
    public virtual void Handle(SingletonSegment segment);
    public virtual void Handle(TypeSegment segment);
    public virtual void Handle(ValueSegment segment);
    public virtual void Handle(CountSegment segment);
    public virtual void Handle(BatchSegment segment);
    public virtual void Handle(MetadataSegment segment);
    internal static string ConvertKeysToString(IEnumerable`1<KeyValuePair`2<string, object>> keys, IEdmType edmType);
    internal static string TranslateNode(object node);
}
public class Microsoft.AspNetCore.OData.Routing.ODataPathSegmentTranslator : PathSegmentTranslator`1<ODataPathSegment> {
    public static SingleValueNode TranslateParameterAlias(SingleValueNode node, IDictionary`2<string, SingleValueNode> parameterAliasNodes);
}
[ExcludeFromCodeCoverageAttribute]
internal class Microsoft.AspNetCore.OData.Routing.ODataRouteDebugMiddleware : object {
    private static IReadOnlyList`1<string> EmptyHeaders;
    private RequestDelegate _next;
    private string _routePattern;
    private static string ODataRouteMappingHtmlTemplate;
    public ODataRouteDebugMiddleware(string routePattern, RequestDelegate next);
    private static ODataRouteDebugMiddleware();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Routing.ODataRouteDebugMiddleware/<Invoke>d__4")]
public Task Invoke(HttpContext context);
    internal static IList`1<EndpointRouteInfo> GetRouteInfo(HttpContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Routing.ODataRouteDebugMiddleware/<WriteRoutesAsJson>d__6")]
internal static Task WriteRoutesAsJson(HttpContext context, IList`1<EndpointRouteInfo> routeInfoList);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.OData.Routing.ODataRouteDebugMiddleware/<WriteRoutesAsHtml>d__7")]
internal static Task WriteRoutesAsHtml(HttpContext context, IList`1<EndpointRouteInfo> routeInfoList);
    internal static bool AcceptsJson(IHeaderDictionary headers);
    private static void AppendRoute(StringBuilder builder, EndpointRouteInfo routeInfo);
}
public class Microsoft.AspNetCore.OData.Routing.ODataRouteOptions : object {
    internal static ODataRouteOptions Default;
    private bool _enableKeyInParenthesis;
    private bool _enableKeyAsSegment;
    private bool _enableQualifiedOperationCall;
    private bool _enableUnqualifiedOperationCall;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDollarCountRouting>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDollarValueRouting>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableActionNameCaseInsensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableControllerNameCaseInsensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnablePropertyNameCaseInsensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableNonParenthesisForEmptyParameterFunction>k__BackingField;
    public Nullable`1<int> Order { get; public set; }
    public bool EnableDollarCountRouting { get; public set; }
    public bool EnableDollarValueRouting { get; public set; }
    public bool EnableActionNameCaseInsensitive { get; public set; }
    public bool EnableControllerNameCaseInsensitive { get; public set; }
    public bool EnablePropertyNameCaseInsensitive { get; public set; }
    public bool EnableKeyInParenthesis { get; public set; }
    public bool EnableKeyAsSegment { get; public set; }
    public bool EnableQualifiedOperationCall { get; public set; }
    public bool EnableUnqualifiedOperationCall { get; public set; }
    public bool EnableNonParenthesisForEmptyParameterFunction { get; public set; }
    private static ODataRouteOptions();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_EnableDollarCountRouting();
    [CompilerGeneratedAttribute]
public void set_EnableDollarCountRouting(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableDollarValueRouting();
    [CompilerGeneratedAttribute]
public void set_EnableDollarValueRouting(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableActionNameCaseInsensitive();
    [CompilerGeneratedAttribute]
public void set_EnableActionNameCaseInsensitive(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableControllerNameCaseInsensitive();
    [CompilerGeneratedAttribute]
public void set_EnableControllerNameCaseInsensitive(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnablePropertyNameCaseInsensitive();
    [CompilerGeneratedAttribute]
public void set_EnablePropertyNameCaseInsensitive(bool value);
    public bool get_EnableKeyInParenthesis();
    public void set_EnableKeyInParenthesis(bool value);
    public bool get_EnableKeyAsSegment();
    public void set_EnableKeyAsSegment(bool value);
    public bool get_EnableQualifiedOperationCall();
    public void set_EnableQualifiedOperationCall(bool value);
    public bool get_EnableUnqualifiedOperationCall();
    public void set_EnableUnqualifiedOperationCall(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableNonParenthesisForEmptyParameterFunction();
    [CompilerGeneratedAttribute]
public void set_EnableNonParenthesisForEmptyParameterFunction(bool value);
}
internal class Microsoft.AspNetCore.OData.Routing.ODataRoutingApplicationModelProvider : object {
    private IODataControllerActionConvention[] _controllerActionConventions;
    private ODataOptions _options;
    public int Order { get; }
    public ODataRoutingApplicationModelProvider(IOptions`1<ODataOptions> options);
    public sealed virtual int get_Order();
    public sealed virtual void OnProvidersExecuted(ApplicationModelProviderContext context);
    public sealed virtual void OnProvidersExecuting(ApplicationModelProviderContext context);
    internal void ApplyAttributeRouting(IList`1<ControllerModel> controllers);
    internal static bool CanApply(string prefix, Func`1<ODataRouteComponentAttribute> func);
}
internal class Microsoft.AspNetCore.OData.Routing.ODataRoutingMatcherPolicy : MatcherPolicy {
    private IODataTemplateTranslator _translator;
    public int Order { get; }
    public ODataRoutingMatcherPolicy(IODataTemplateTranslator translator);
    public virtual int get_Order();
    public sealed virtual bool AppliesToEndpoints(IReadOnlyList`1<Endpoint> endpoints);
    public sealed virtual Task ApplyAsync(HttpContext httpContext, CandidateSet candidates);
    private static void MergeRouteValues(RouteValueDictionary updates, RouteValueDictionary source);
}
public class Microsoft.AspNetCore.OData.Routing.ODataRoutingMetadata : object {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataPathTemplate <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConventional>k__BackingField;
    public string Prefix { get; }
    public IEdmModel Model { get; }
    public ODataPathTemplate Template { get; }
    public bool IsConventional { get; public set; }
    public ODataRoutingMetadata(string prefix, IEdmModel model, ODataPathTemplate template);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Prefix();
    [CompilerGeneratedAttribute]
public sealed virtual IEdmModel get_Model();
    [CompilerGeneratedAttribute]
public sealed virtual ODataPathTemplate get_Template();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsConventional();
    [CompilerGeneratedAttribute]
public void set_IsConventional(bool value);
}
public static class Microsoft.AspNetCore.OData.Routing.ODataSegmentKinds : object {
    public static string ServiceBase;
    public static string Batch;
    public static string Ref;
    public static string Metadata;
    public static string Value;
    public static string Count;
    public static string Action;
    public static string Function;
    public static string UnboundAction;
    public static string UnboundFunction;
    public static string Cast;
    public static string EntitySet;
    public static string Singleton;
    public static string Key;
    public static string Navigation;
    public static string PathTemplate;
    public static string Property;
    public static string DynamicProperty;
    public static string Unresolved;
}
internal class Microsoft.AspNetCore.OData.Routing.Parser.DefaultODataPathParser : object {
    public virtual ODataPath Parse(IEdmModel model, Uri serviceRoot, Uri odataPath, IServiceProvider requestProvider);
}
public class Microsoft.AspNetCore.OData.Routing.Parser.DefaultODataPathTemplateParser : object {
    public virtual ODataPathTemplate Parse(IEdmModel model, string odataPath, IServiceProvider requestProvider);
}
internal interface Microsoft.AspNetCore.OData.Routing.Parser.IODataPathParser {
    public abstract virtual ODataPath Parse(IEdmModel model, Uri serviceRoot, Uri odataPath, IServiceProvider requestProvider);
}
public interface Microsoft.AspNetCore.OData.Routing.Parser.IODataPathTemplateParser {
    public abstract virtual ODataPathTemplate Parse(IEdmModel model, string odataPath, IServiceProvider requestProvider);
}
internal class Microsoft.AspNetCore.OData.Routing.Parser.ODataPathSegmentToTemplateHandler : PathSegmentHandler {
    private IEdmModel _model;
    private IList`1<ODataSegmentTemplate> _segmentTemplates;
    public IList`1<ODataSegmentTemplate> Templates { get; }
    public ODataPathSegmentToTemplateHandler(IEdmModel model);
    public IList`1<ODataSegmentTemplate> get_Templates();
    public virtual void Handle(MetadataSegment segment);
    public virtual void Handle(ValueSegment segment);
    public virtual void Handle(NavigationPropertyLinkSegment segment);
    public virtual void Handle(CountSegment segment);
    public virtual void Handle(DynamicPathSegment segment);
    public virtual void Handle(OperationSegment segment);
    public virtual void Handle(OperationImportSegment segment);
    public virtual void Handle(PropertySegment segment);
    public virtual void Handle(KeySegment segment);
    public virtual void Handle(SingletonSegment segment);
    public virtual void Handle(EntitySetSegment segment);
    public virtual void Handle(NavigationPropertySegment segment);
    public virtual void Handle(TypeSegment segment);
    public virtual void Handle(PathTemplateSegment segment);
    public virtual void Handle(BatchSegment segment);
    public virtual void Handle(BatchReferenceSegment segment);
}
internal class Microsoft.AspNetCore.OData.Routing.Parser.UnqualifiedCallAndAlternateKeyResolver : ODataUriResolver {
    private AlternateKeysODataUriResolver _alternateKey;
    private UnqualifiedODataUriResolver _unqualified;
    private bool _enableCaseInsensitive;
    public bool EnableCaseInsensitive { get; public set; }
    public UnqualifiedCallAndAlternateKeyResolver(IEdmModel model);
    public virtual bool get_EnableCaseInsensitive();
    public virtual void set_EnableCaseInsensitive(bool value);
    public virtual IEnumerable`1<IEdmOperation> ResolveUnboundOperations(IEdmModel model, string identifier);
    public virtual IEnumerable`1<IEdmOperation> ResolveBoundOperations(IEdmModel model, string identifier, IEdmType bindingType);
    public virtual IEnumerable`1<KeyValuePair`2<string, object>> ResolveKeys(IEdmEntityType type, IDictionary`2<string, string> namedValues, Func`3<IEdmTypeReference, string, object> convertFunc);
}
public class Microsoft.AspNetCore.OData.Routing.Template.ActionImportSegmentTemplate : ODataSegmentTemplate {
    [CompilerGeneratedAttribute]
private IEdmActionImport <ActionImport>k__BackingField;
    [CompilerGeneratedAttribute]
private OperationImportSegment <Segment>k__BackingField;
    public IEdmActionImport ActionImport { get; }
    public OperationImportSegment Segment { get; }
    public ActionImportSegmentTemplate(IEdmActionImport actionImport, IEdmNavigationSource navigationSource);
    public ActionImportSegmentTemplate(OperationImportSegment segment);
    [CompilerGeneratedAttribute]
public IEdmActionImport get_ActionImport();
    [CompilerGeneratedAttribute]
public OperationImportSegment get_Segment();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Routing.Template.ActionImportSegmentTemplate/<GetTemplates>d__8")]
public virtual IEnumerable`1<string> GetTemplates(ODataRouteOptions options);
    public virtual bool TryTranslate(ODataTemplateTranslateContext context);
}
public class Microsoft.AspNetCore.OData.Routing.Template.ActionSegmentTemplate : ODataSegmentTemplate {
    [CompilerGeneratedAttribute]
private IEdmAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmNavigationSource <NavigationSource>k__BackingField;
    [CompilerGeneratedAttribute]
private OperationSegment <Segment>k__BackingField;
    public IEdmAction Action { get; }
    public IEdmNavigationSource NavigationSource { get; }
    public OperationSegment Segment { get; }
    public ActionSegmentTemplate(IEdmAction action, IEdmNavigationSource navigationSource);
    public ActionSegmentTemplate(OperationSegment segment);
    [CompilerGeneratedAttribute]
public IEdmAction get_Action();
    [CompilerGeneratedAttribute]
public IEdmNavigationSource get_NavigationSource();
    [CompilerGeneratedAttribute]
public OperationSegment get_Segment();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Routing.Template.ActionSegmentTemplate/<GetTemplates>d__11")]
public virtual IEnumerable`1<string> GetTemplates(ODataRouteOptions options);
    public virtual bool TryTranslate(ODataTemplateTranslateContext context);
}
public class Microsoft.AspNetCore.OData.Routing.Template.CastSegmentTemplate : ODataSegmentTemplate {
    [CompilerGeneratedAttribute]
private TypeSegment <TypeSegment>k__BackingField;
    public IEdmType CastType { get; }
    public IEdmType ExpectedType { get; }
    public TypeSegment TypeSegment { get; }
    public CastSegmentTemplate(IEdmType castType, IEdmType expectedType, IEdmNavigationSource navigationSource);
    public CastSegmentTemplate(TypeSegment typeSegment);
    public IEdmType get_CastType();
    public IEdmType get_ExpectedType();
    [CompilerGeneratedAttribute]
public TypeSegment get_TypeSegment();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Routing.Template.CastSegmentTemplate/<GetTemplates>d__9")]
public virtual IEnumerable`1<string> GetTemplates(ODataRouteOptions options);
    public virtual bool TryTranslate(ODataTemplateTranslateContext context);
}
public class Microsoft.AspNetCore.OData.Routing.Template.CountSegmentTemplate : ODataSegmentTemplate {
    [CompilerGeneratedAttribute]
private static CountSegmentTemplate <Instance>k__BackingField;
    public static CountSegmentTemplate Instance { get; }
    private static CountSegmentTemplate();
    [CompilerGeneratedAttribute]
public static CountSegmentTemplate get_Instance();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Routing.Template.CountSegmentTemplate/<GetTemplates>d__4")]
public virtual IEnumerable`1<string> GetTemplates(ODataRouteOptions options);
    public virtual bool TryTranslate(ODataTemplateTranslateContext context);
}
internal class Microsoft.AspNetCore.OData.Routing.Template.DefaultODataTemplateTranslator : object {
    public virtual ODataPath Translate(ODataPathTemplate path, ODataTemplateTranslateContext context);
}
public class Microsoft.AspNetCore.OData.Routing.Template.DynamicSegmentTemplate : ODataSegmentTemplate {
    [CompilerGeneratedAttribute]
private DynamicPathSegment <Segment>k__BackingField;
    public DynamicPathSegment Segment { get; }
    public DynamicSegmentTemplate(DynamicPathSegment segment);
    [CompilerGeneratedAttribute]
public DynamicPathSegment get_Segment();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Routing.Template.DynamicSegmentTemplate/<GetTemplates>d__4")]
public virtual IEnumerable`1<string> GetTemplates(ODataRouteOptions options);
    public virtual bool TryTranslate(ODataTemplateTranslateContext context);
}
public class Microsoft.AspNetCore.OData.Routing.Template.EntitySetSegmentTemplate : ODataSegmentTemplate {
    [CompilerGeneratedAttribute]
private EntitySetSegment <Segment>k__BackingField;
    public IEdmEntitySet EntitySet { get; }
    public EntitySetSegment Segment { get; }
    public EntitySetSegmentTemplate(IEdmEntitySet entitySet);
    public EntitySetSegmentTemplate(EntitySetSegment segment);
    public IEdmEntitySet get_EntitySet();
    [CompilerGeneratedAttribute]
public EntitySetSegment get_Segment();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Routing.Template.EntitySetSegmentTemplate/<GetTemplates>d__7")]
public virtual IEnumerable`1<string> GetTemplates(ODataRouteOptions options);
    public virtual bool TryTranslate(ODataTemplateTranslateContext context);
}
public class Microsoft.AspNetCore.OData.Routing.Template.FunctionImportSegmentTemplate : ODataSegmentTemplate {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ParameterMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmNavigationSource <NavigationSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmFunctionImport <FunctionImport>k__BackingField;
    public IDictionary`2<string, string> ParameterMappings { get; }
    public IEdmNavigationSource NavigationSource { get; }
    public IEdmFunctionImport FunctionImport { get; }
    public FunctionImportSegmentTemplate(IEdmFunctionImport functionImport, IEdmNavigationSource navigationSource);
    public FunctionImportSegmentTemplate(IDictionary`2<string, string> parameters, IEdmFunctionImport functionImport, IEdmNavigationSource navigationSource);
    public FunctionImportSegmentTemplate(OperationImportSegment segment);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ParameterMappings();
    [CompilerGeneratedAttribute]
public IEdmNavigationSource get_NavigationSource();
    [CompilerGeneratedAttribute]
public IEdmFunctionImport get_FunctionImport();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Routing.Template.FunctionImportSegmentTemplate/<GetTemplates>d__12")]
public virtual IEnumerable`1<string> GetTemplates(ODataRouteOptions options);
    public virtual bool TryTranslate(ODataTemplateTranslateContext context);
    private bool HasOptionalMissing();
}
public class Microsoft.AspNetCore.OData.Routing.Template.FunctionSegmentTemplate : ODataSegmentTemplate {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ParameterMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmFunction <Function>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmNavigationSource <NavigationSource>k__BackingField;
    public IDictionary`2<string, string> ParameterMappings { get; private set; }
    public IEdmFunction Function { get; }
    public IEdmNavigationSource NavigationSource { get; }
    public FunctionSegmentTemplate(IEdmFunction function, IEdmNavigationSource navigationSource);
    public FunctionSegmentTemplate(IDictionary`2<string, string> parameters, IEdmFunction function, IEdmNavigationSource navigationSource);
    public FunctionSegmentTemplate(OperationSegment operationSegment);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ParameterMappings();
    [CompilerGeneratedAttribute]
private void set_ParameterMappings(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IEdmFunction get_Function();
    [CompilerGeneratedAttribute]
public IEdmNavigationSource get_NavigationSource();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Routing.Template.FunctionSegmentTemplate/<GetTemplates>d__13")]
public virtual IEnumerable`1<string> GetTemplates(ODataRouteOptions options);
    public virtual bool TryTranslate(ODataTemplateTranslateContext context);
    private bool HasOptionalMissing();
}
public interface Microsoft.AspNetCore.OData.Routing.Template.IODataTemplateTranslator {
    public abstract virtual ODataPath Translate(ODataPathTemplate path, ODataTemplateTranslateContext context);
}
public class Microsoft.AspNetCore.OData.Routing.Template.KeySegmentTemplate : ODataSegmentTemplate {
    private string _keyLiteral;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <KeyMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, IEdmProperty> <KeyProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmNavigationSource <NavigationSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmEntityType <EntityType>k__BackingField;
    public IDictionary`2<string, string> KeyMappings { get; }
    public IDictionary`2<string, IEdmProperty> KeyProperties { get; }
    public IEdmNavigationSource NavigationSource { get; }
    public IEdmEntityType EntityType { get; }
    public int Count { get; }
    public KeySegmentTemplate(IDictionary`2<string, string> keys, IEdmEntityType entityType, IEdmNavigationSource navigationSource);
    public KeySegmentTemplate(KeySegment segment);
    public KeySegmentTemplate(KeySegment segment, IDictionary`2<string, IEdmProperty> keyProperties);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_KeyMappings();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, IEdmProperty> get_KeyProperties();
    [CompilerGeneratedAttribute]
public IEdmNavigationSource get_NavigationSource();
    [CompilerGeneratedAttribute]
public IEdmEntityType get_EntityType();
    public int get_Count();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Routing.Template.KeySegmentTemplate/<GetTemplates>d__18")]
public virtual IEnumerable`1<string> GetTemplates(ODataRouteOptions options);
    public virtual bool TryTranslate(ODataTemplateTranslateContext context);
    internal static KeySegmentTemplate CreateKeySegment(IEdmEntityType entityType, IEdmNavigationSource navigationSource, string keyPrefix);
    internal static IDictionary`2<string, string> BuildKeyMappings(IEnumerable`1<KeyValuePair`2<string, object>> keys, IEdmEntityType entityType);
    internal static IDictionary`2<string, string> BuildKeyMappings(IEnumerable`1<KeyValuePair`2<string, object>> keys, IEdmEntityType entityType, IDictionary`2<string, IEdmProperty> keyProperties);
}
public class Microsoft.AspNetCore.OData.Routing.Template.MetadataSegmentTemplate : ODataSegmentTemplate {
    [CompilerGeneratedAttribute]
private static MetadataSegmentTemplate <Instance>k__BackingField;
    public static MetadataSegmentTemplate Instance { get; }
    private static MetadataSegmentTemplate();
    [CompilerGeneratedAttribute]
public static MetadataSegmentTemplate get_Instance();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Routing.Template.MetadataSegmentTemplate/<GetTemplates>d__4")]
public virtual IEnumerable`1<string> GetTemplates(ODataRouteOptions options);
    public virtual bool TryTranslate(ODataTemplateTranslateContext context);
}
public class Microsoft.AspNetCore.OData.Routing.Template.NavigationLinkSegmentTemplate : ODataSegmentTemplate {
    [CompilerGeneratedAttribute]
private KeySegmentTemplate <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationPropertyLinkSegment <Segment>k__BackingField;
    public KeySegmentTemplate Key { get; public set; }
    public IEdmNavigationProperty NavigationProperty { get; }
    public IEdmNavigationSource NavigationSource { get; }
    public NavigationPropertyLinkSegment Segment { get; }
    public NavigationLinkSegmentTemplate(IEdmNavigationProperty navigationProperty, IEdmNavigationSource navigationSource);
    public NavigationLinkSegmentTemplate(NavigationPropertyLinkSegment segment);
    [CompilerGeneratedAttribute]
public KeySegmentTemplate get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(KeySegmentTemplate value);
    public IEdmNavigationProperty get_NavigationProperty();
    public IEdmNavigationSource get_NavigationSource();
    [CompilerGeneratedAttribute]
public NavigationPropertyLinkSegment get_Segment();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Routing.Template.NavigationLinkSegmentTemplate/<GetTemplates>d__13")]
public virtual IEnumerable`1<string> GetTemplates(ODataRouteOptions options);
    public virtual bool TryTranslate(ODataTemplateTranslateContext context);
}
public class Microsoft.AspNetCore.OData.Routing.Template.NavigationLinkTemplateSegmentTemplate : ODataSegmentTemplate {
    private string ParameterName;
    [CompilerGeneratedAttribute]
private string <RelatedKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmStructuredType <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmNavigationSource <NavigationSource>k__BackingField;
    public string RelatedKey { get; public set; }
    public IEdmStructuredType DeclaringType { get; }
    public IEdmNavigationSource NavigationSource { get; }
    public NavigationLinkTemplateSegmentTemplate(IEdmStructuredType declaringType, IEdmNavigationSource navigationSource);
    [CompilerGeneratedAttribute]
public string get_RelatedKey();
    [CompilerGeneratedAttribute]
public void set_RelatedKey(string value);
    [CompilerGeneratedAttribute]
public IEdmStructuredType get_DeclaringType();
    [CompilerGeneratedAttribute]
public IEdmNavigationSource get_NavigationSource();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Routing.Template.NavigationLinkTemplateSegmentTemplate/<GetTemplates>d__12")]
public virtual IEnumerable`1<string> GetTemplates(ODataRouteOptions options);
    public virtual bool TryTranslate(ODataTemplateTranslateContext context);
}
public class Microsoft.AspNetCore.OData.Routing.Template.NavigationSegmentTemplate : ODataSegmentTemplate {
    [CompilerGeneratedAttribute]
private NavigationPropertySegment <Segment>k__BackingField;
    public IEdmNavigationProperty NavigationProperty { get; }
    public NavigationPropertySegment Segment { get; }
    public NavigationSegmentTemplate(IEdmNavigationProperty navigationProperty, IEdmNavigationSource navigationSource);
    public NavigationSegmentTemplate(NavigationPropertySegment segment);
    public IEdmNavigationProperty get_NavigationProperty();
    [CompilerGeneratedAttribute]
public NavigationPropertySegment get_Segment();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Routing.Template.NavigationSegmentTemplate/<GetTemplates>d__7")]
public virtual IEnumerable`1<string> GetTemplates(ODataRouteOptions options);
    public virtual bool TryTranslate(ODataTemplateTranslateContext context);
}
public class Microsoft.AspNetCore.OData.Routing.Template.ODataPathTemplate : List`1<ODataSegmentTemplate> {
    public ODataPathTemplate(ODataSegmentTemplate[] segments);
    public ODataPathTemplate(IEnumerable`1<ODataSegmentTemplate> segments);
    public ODataPathTemplate(IList`1<ODataSegmentTemplate> segments);
    public virtual IEnumerable`1<string> GetTemplates(ODataRouteOptions options);
    private void ProcessSegment(Stack`1<string> stack, int index, int count, IList`1<string> templates, ODataRouteOptions options);
}
public abstract class Microsoft.AspNetCore.OData.Routing.Template.ODataSegmentTemplate : object {
    public abstract virtual IEnumerable`1<string> GetTemplates(ODataRouteOptions options);
    public abstract virtual bool TryTranslate(ODataTemplateTranslateContext context);
    internal IEnumerable`1<string> GetTemplates();
}
public class Microsoft.AspNetCore.OData.Routing.Template.ODataTemplateTranslateContext : object {
    [CompilerGeneratedAttribute]
private Endpoint <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpContext <HttpContext>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteValueDictionary <RouteValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteValueDictionary <UpdatedValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ODataPathSegment> <Segments>k__BackingField;
    public Endpoint Endpoint { get; internal set; }
    public HttpContext HttpContext { get; internal set; }
    public RouteValueDictionary RouteValues { get; internal set; }
    public IEdmModel Model { get; internal set; }
    public RouteValueDictionary UpdatedValues { get; }
    public IList`1<ODataPathSegment> Segments { get; }
    public ODataTemplateTranslateContext(HttpContext context, Endpoint endpoint, RouteValueDictionary routeValues, IEdmModel model);
    [CompilerGeneratedAttribute]
public Endpoint get_Endpoint();
    [CompilerGeneratedAttribute]
internal void set_Endpoint(Endpoint value);
    [CompilerGeneratedAttribute]
public HttpContext get_HttpContext();
    [CompilerGeneratedAttribute]
internal void set_HttpContext(HttpContext value);
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_RouteValues();
    [CompilerGeneratedAttribute]
internal void set_RouteValues(RouteValueDictionary value);
    [CompilerGeneratedAttribute]
public IEdmModel get_Model();
    [CompilerGeneratedAttribute]
internal void set_Model(IEdmModel value);
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_UpdatedValues();
    [CompilerGeneratedAttribute]
public IList`1<ODataPathSegment> get_Segments();
    public string GetParameterAliasOrSelf(string alias);
    private string GetParameterAliasOrSelf(string alias, ISet`1<string> visited);
    internal bool IsPartOfRouteTemplate(string part);
}
public class Microsoft.AspNetCore.OData.Routing.Template.PathTemplateSegmentTemplate : ODataSegmentTemplate {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private PathTemplateSegment <Segment>k__BackingField;
    public string ParameterName { get; }
    public PathTemplateSegment Segment { get; }
    public PathTemplateSegmentTemplate(PathTemplateSegment segment);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
public PathTemplateSegment get_Segment();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Routing.Template.PathTemplateSegmentTemplate/<GetTemplates>d__7")]
public virtual IEnumerable`1<string> GetTemplates(ODataRouteOptions options);
    public virtual bool TryTranslate(ODataTemplateTranslateContext context);
    private static ODataPathSegment CreatePropertySegment(ODataPathSegment previous, ODataTemplateTranslateContext context);
    private static DynamicPathSegment CreateDynamicSegment(ODataPathSegment previous, ODataTemplateTranslateContext context);
    private static bool IsRouteParameter(string parameterName);
}
public class Microsoft.AspNetCore.OData.Routing.Template.PropertyCatchAllSegmentTemplate : ODataSegmentTemplate {
    [CompilerGeneratedAttribute]
private IEdmStructuredType <StructuredType>k__BackingField;
    public IEdmStructuredType StructuredType { get; }
    public PropertyCatchAllSegmentTemplate(IEdmStructuredType declaredType);
    [CompilerGeneratedAttribute]
public IEdmStructuredType get_StructuredType();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Routing.Template.PropertyCatchAllSegmentTemplate/<GetTemplates>d__4")]
public virtual IEnumerable`1<string> GetTemplates(ODataRouteOptions options);
    public virtual bool TryTranslate(ODataTemplateTranslateContext context);
}
public class Microsoft.AspNetCore.OData.Routing.Template.PropertySegmentTemplate : ODataSegmentTemplate {
    [CompilerGeneratedAttribute]
private PropertySegment <Segment>k__BackingField;
    public IEdmStructuralProperty Property { get; }
    public PropertySegment Segment { get; }
    public PropertySegmentTemplate(IEdmStructuralProperty property);
    public PropertySegmentTemplate(PropertySegment segment);
    public IEdmStructuralProperty get_Property();
    [CompilerGeneratedAttribute]
public PropertySegment get_Segment();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Routing.Template.PropertySegmentTemplate/<GetTemplates>d__7")]
public virtual IEnumerable`1<string> GetTemplates(ODataRouteOptions options);
    public virtual bool TryTranslate(ODataTemplateTranslateContext context);
}
internal static class Microsoft.AspNetCore.OData.Routing.Template.SegmentTemplateHelpers : object {
    public static IList`1<OperationSegmentParameter> Match(ODataTemplateTranslateContext context, IEdmFunction function, IDictionary`2<string, string> parameterMappings);
    internal static bool IsMatchParameters(RouteValueDictionary routeValues, IDictionary`2<string, string> parameterMappings);
    internal static IEdmNavigationSource GetNavigationSourceFromEdmOperation(IEdmModel model, IEdmOperation operation);
}
public class Microsoft.AspNetCore.OData.Routing.Template.SingletonSegmentTemplate : ODataSegmentTemplate {
    [CompilerGeneratedAttribute]
private SingletonSegment <Segment>k__BackingField;
    public IEdmSingleton Singleton { get; }
    public SingletonSegment Segment { get; }
    public SingletonSegmentTemplate(IEdmSingleton singleton);
    public SingletonSegmentTemplate(SingletonSegment segment);
    public IEdmSingleton get_Singleton();
    [CompilerGeneratedAttribute]
public SingletonSegment get_Segment();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Routing.Template.SingletonSegmentTemplate/<GetTemplates>d__7")]
public virtual IEnumerable`1<string> GetTemplates(ODataRouteOptions options);
    public virtual bool TryTranslate(ODataTemplateTranslateContext context);
}
public class Microsoft.AspNetCore.OData.Routing.Template.ValueSegmentTemplate : ODataSegmentTemplate {
    [CompilerGeneratedAttribute]
private ValueSegment <Segment>k__BackingField;
    public ValueSegment Segment { get; }
    public ValueSegmentTemplate(IEdmType previousType);
    public ValueSegmentTemplate(ValueSegment segment);
    [CompilerGeneratedAttribute]
public ValueSegment get_Segment();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.OData.Routing.Template.ValueSegmentTemplate/<GetTemplates>d__5")]
public virtual IEnumerable`1<string> GetTemplates(ODataRouteOptions options);
    public virtual bool TryTranslate(ODataTemplateTranslateContext context);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.AspNetCore.OData.SRResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActionContextMustHaveDescriptor { get; }
    internal static string ActionDescriptorNotControllerActionDescriptor { get; }
    internal static string ActionExecutedContextMustHaveRequest { get; }
    internal static string ActionNotBoundToCollectionOfEntity { get; }
    internal static string ActionNotBoundToEntity { get; }
    internal static string AggregateKindNotSupported { get; }
    internal static string AggregationMethodNotSupported { get; }
    internal static string AggregationNotSupportedForType { get; }
    internal static string AmbiguousNavigationSourceNameFound { get; }
    internal static string AmbiguousPropertyNameFound { get; }
    internal static string AmbiguousTypeNameFound { get; }
    internal static string ApplyQueryOptionNotSupportedForLinq2SQL { get; }
    internal static string ApplyToOnUntypedQueryOption { get; }
    internal static string ArgumentMustBeGreaterThanOrEqualTo { get; }
    internal static string ArgumentMustBeLessThanOrEqualTo { get; }
    internal static string ArgumentMustBeOfType { get; }
    internal static string ArgumentNullOrEmpty { get; }
    internal static string BatchRequestInvalidMediaType { get; }
    internal static string BatchRequestMissingBody { get; }
    internal static string BatchRequestMissingBoundary { get; }
    internal static string BatchRequestMissingContentType { get; }
    internal static string BinaryOperatorNotSupported { get; }
    internal static string CannotAddToNullCollection { get; }
    internal static string CannotApplyETagOfT { get; }
    internal static string CannotApplyODataQueryOptionsOfT { get; }
    internal static string CannotCastFilter { get; }
    internal static string CannotDeserializeUnknownProperty { get; }
    internal static string CannotFindKeyInEntityType { get; }
    internal static string CannotFindParameterInOperation { get; }
    internal static string CannotGetEnumClrMember { get; }
    internal static string CannotInstantiateAbstractResourceType { get; }
    internal static string CannotParseQueryRequestPayload { get; }
    internal static string CannotPatchNavigationProperties { get; }
    internal static string CannotProcessPrefixTemplate { get; }
    internal static string CannotSerializerNull { get; }
    internal static string CannotSetDynamicPropertyDictionary { get; }
    internal static string CannotWriteType { get; }
    internal static string ClrTypeNotInModel { get; }
    internal static string CollectionParameterShouldHaveAddMethod { get; }
    internal static string CollectionShouldHaveAddMethod { get; }
    internal static string CollectionShouldHaveClearMethod { get; }
    internal static string ConvertToEnumFailed { get; }
    internal static string CreateODataValueNotSupported { get; }
    internal static string CustomQueryOptionNotSupportedWithDollarSign { get; }
    internal static string DeltaEntityTypeNotAssignable { get; }
    internal static string DeltaNestedResourceNameNotFound { get; }
    internal static string DeltaTypeMismatch { get; }
    internal static string DeserializerDoesNotSupportRead { get; }
    internal static string DoesNotSupportReadInLine { get; }
    internal static string DuplicateDynamicPropertyNameFound { get; }
    internal static string DynamicPropertyCannotBeSerialized { get; }
    internal static string DynamicPropertyNameAlreadyUsedAsDeclaredPropertyName { get; }
    internal static string DynamicResourceSetTypeNameIsRequired { get; }
    internal static string EditLinkNullForLocationHeader { get; }
    internal static string EdmComplexObjectNullRef { get; }
    internal static string EdmObjectNull { get; }
    internal static string EdmTypeCannotBeNull { get; }
    internal static string EdmTypeNotSupported { get; }
    internal static string ElementClrTypeNull { get; }
    internal static string EmptyKeyTemplate { get; }
    internal static string EmptyParameterAlias { get; }
    internal static string EmptyPathTemplate { get; }
    internal static string EntityReferenceMustHasKeySegment { get; }
    internal static string EntitySetMissingDuringSerialization { get; }
    internal static string EntityTypeMismatch { get; }
    internal static string ErrorTypeMustBeODataErrorOrHttpError { get; }
    internal static string ETagNotWellFormed { get; }
    internal static string ExpandFilterExpressionNotLambdaExpression { get; }
    internal static string ExpressionLexer_UnbalancedBracketExpression { get; }
    internal static string ExpressionLexerSyntaxError { get; }
    internal static string ExpressionLexerUnterminatedStringLiteral { get; }
    internal static string FailedToBuildEdmModelBecauseReturnTypeIsNull { get; }
    internal static string FailedToRetrieveTypeToBuildEdmModel { get; }
    internal static string FormatterReadIsNotSupportedForType { get; }
    internal static string FunctionNotBoundToCollectionOfEntity { get; }
    internal static string FunctionNotBoundToEntity { get; }
    internal static string FunctionNotSupportedOnEnum { get; }
    internal static string GetOnlyCollectionCannotBeArray { get; }
    internal static string IdLinkNullForEntityIdHeader { get; }
    internal static string InfiniteParameterAlias { get; }
    internal static string InputCastTypeKindNotMatch { get; }
    internal static string InputKeyNotMatchEntityTypeKey { get; }
    internal static string InvalidAttributeRoutingTemplateSegment { get; }
    internal static string InvalidBatchReaderState { get; }
    internal static string InvalidExpansionDepthValue { get; }
    internal static string InvalidKeyInUriFound { get; }
    internal static string InvalidLastSegmentInSelectExpandPath { get; }
    internal static string InvalidODataRouteOnAction { get; }
    internal static string InvalidODataUntypedValue { get; }
    internal static string InvalidParameterValueInUriFound { get; }
    internal static string InvalidPropertyMapper { get; }
    internal static string InvalidPropertyMapping { get; }
    internal static string InvalidSegmentInSelectExpandPath { get; }
    internal static string InvalidTemplateLiteral { get; }
    internal static string JsonConverterDoesnotSupportRead { get; }
    internal static string KeyTemplateMustBeInCurlyBraces { get; }
    internal static string KeyValueCannotBeNull { get; }
    internal static string MappingDoesNotContainResourceType { get; }
    internal static string MaxAnyAllExpressionLimitExceeded { get; }
    internal static string MaxExpandDepthExceeded { get; }
    internal static string MaxNodeLimitExceeded { get; }
    internal static string MissingNonODataContainer { get; }
    internal static string MissingODataContainer { get; }
    internal static string MissingODataServices { get; }
    internal static string MissingParameterAlias { get; }
    internal static string MissingRequiredParameterInOperation { get; }
    internal static string ModelBinderUtil_ModelMetadataCannotBeNull { get; }
    internal static string ModelBinderUtil_ValueCannotBeEnum { get; }
    internal static string ModelBindingContextMustHaveRequest { get; }
    internal static string ModelMissingFromReadContext { get; }
    internal static string ModelPrefixAlreadyUsed { get; }
    internal static string MultipleActionImportFound { get; }
    internal static string MultipleMatchingClrTypesForEdmType { get; }
    internal static string MultipleSingleLiteralNotAllowed { get; }
    internal static string NavigationSourceMissingDuringDeserialization { get; }
    internal static string NavigationSourceMissingDuringSerialization { get; }
    internal static string NestedCollectionsNotSupported { get; }
    internal static string NestedPropertyNotfound { get; }
    internal static string NonSelectExpandOnSingleEntity { get; }
    internal static string NotAllowedArithmeticOperator { get; }
    internal static string NotAllowedFunction { get; }
    internal static string NotAllowedLogicalOperator { get; }
    internal static string NotAllowedOrderByProperty { get; }
    internal static string NotAllowedQueryOption { get; }
    internal static string NotCountableEntitySetUsedForCount { get; }
    internal static string NotCountablePropertyUsedForCount { get; }
    internal static string NotExpandablePropertyUsedInExpand { get; }
    internal static string NotFilterablePropertyUsedInFilter { get; }
    internal static string NotNavigablePropertyUsedInNavigation { get; }
    internal static string NotSelectablePropertyUsedInSelect { get; }
    internal static string NotSortablePropertyUsedInOrderBy { get; }
    internal static string NotSupportedTransformationKind { get; }
    internal static string NullContainer { get; }
    internal static string NullContainerBuilder { get; }
    internal static string NullElementInCollection { get; }
    internal static string ODataFunctionNotSupported { get; }
    internal static string ODataPathMissing { get; }
    internal static string OnlySingleValueNodeSupported { get; }
    internal static string OperationIsNotBound { get; }
    internal static string OperationMustBeUniqueInEntitySetContainer { get; }
    internal static string OrderByClauseInvalid { get; }
    internal static string OrderByClauseNotSupported { get; }
    internal static string OrderByDuplicateIt { get; }
    internal static string OrderByDuplicateProperty { get; }
    internal static string OrderByNodeCountExceeded { get; }
    internal static string ParameterTemplateMustBeInCurlyBraces { get; }
    internal static string ParameterTypeIsNotCollection { get; }
    internal static string PropertyCannotBeConverted { get; }
    internal static string PropertyIsNotCollection { get; }
    internal static string PropertyMustBeBoolean { get; }
    internal static string PropertyMustBeDateTimeOffsetOrDate { get; }
    internal static string PropertyMustBeEnum { get; }
    internal static string PropertyMustBeString { get; }
    internal static string PropertyMustBeStringLengthOne { get; }
    internal static string PropertyMustBeStringMaxLengthOne { get; }
    internal static string PropertyMustBeTimeOfDay { get; }
    internal static string PropertyMustHavePublicGetterAndSetter { get; }
    internal static string PropertyNotFound { get; }
    internal static string PropertyNotFoundOnPathExpression { get; }
    internal static string PropertyOrPathWasRemovedFromContext { get; }
    internal static string PropertyTypeOverflow { get; }
    internal static string PropertyUnrecognizedFormat { get; }
    internal static string QueryCannotBeEmpty { get; }
    internal static string QueryGetModelMustNotReturnNull { get; }
    internal static string QueryNodeBindingNotSupported { get; }
    internal static string QueryNodeValidationNotSupported { get; }
    internal static string QueryParameterNotSupported { get; }
    internal static string ReadFromStreamAsyncMustHaveRequest { get; }
    internal static string ReferenceNavigationPropertyExpandFilterVisitorUnexpectedParameter { get; }
    internal static string RequestMustHaveModel { get; }
    internal static string RequestNotActionInvocation { get; }
    internal static string RequiredParametersNotSubsetOfFunctionParameters { get; }
    internal static string ResourceTypeNotInModel { get; }
    internal static string RootElementNameMissing { get; }
    internal static string RouteOptionDisabledKeySegment { get; }
    internal static string RouteOptionDisabledOperationSegment { get; }
    internal static string RouteServicesAlreadyExist { get; }
    internal static string SegmentShouldBeKind { get; }
    internal static string SelectExpandEmptyOrNull { get; }
    internal static string SelectExpandEmptyOrWhitespace { get; }
    internal static string SelectionTypeNotSupported { get; }
    internal static string SelectNonStructured { get; }
    internal static string ShouldHaveNavigationPropertyInNavigationExpandPath { get; }
    internal static string SingleResultHasMoreThanOneEntity { get; }
    internal static string SkipTokenNotSupportedOrderByExpression { get; }
    internal static string SkipTokenParseError { get; }
    internal static string SkipTokenProcessingError { get; }
    internal static string SkipTopLimitExceeded { get; }
    internal static string TargetKindNotImplemented { get; }
    internal static string TypeCannotBeDeserialized { get; }
    internal static string TypeCannotBeSerialized { get; }
    internal static string TypeMustBeEntity { get; }
    internal static string TypeMustBeEnumOrNullableEnum { get; }
    internal static string TypeMustBeRelated { get; }
    internal static string TypeMustBeResourceSet { get; }
    internal static string TypeOfDynamicPropertyNotSupported { get; }
    internal static string UnableToDetermineBaseUrl { get; }
    internal static string UnableToDetermineMetadataUrl { get; }
    internal static string UnableToIdentifyUniqueProperty { get; }
    internal static string UnaryNodeValidationNotSupported { get; }
    internal static string UnexpectedElementType { get; }
    internal static string UnsupportedEdmType { get; }
    internal static string UnsupportedEdmTypeKind { get; }
    internal static string UriFunctionClrBinderAlreadyBound { get; }
    internal static string UriQueryStringInvalid { get; }
    internal static string ValueIsInvalid { get; }
    internal static string WriteObjectInlineNotSupported { get; }
    internal static string WriteObjectNotSupported { get; }
    internal static string WriteToResponseAsyncMustHaveRequest { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActionContextMustHaveDescriptor();
    internal static string get_ActionDescriptorNotControllerActionDescriptor();
    internal static string get_ActionExecutedContextMustHaveRequest();
    internal static string get_ActionNotBoundToCollectionOfEntity();
    internal static string get_ActionNotBoundToEntity();
    internal static string get_AggregateKindNotSupported();
    internal static string get_AggregationMethodNotSupported();
    internal static string get_AggregationNotSupportedForType();
    internal static string get_AmbiguousNavigationSourceNameFound();
    internal static string get_AmbiguousPropertyNameFound();
    internal static string get_AmbiguousTypeNameFound();
    internal static string get_ApplyQueryOptionNotSupportedForLinq2SQL();
    internal static string get_ApplyToOnUntypedQueryOption();
    internal static string get_ArgumentMustBeGreaterThanOrEqualTo();
    internal static string get_ArgumentMustBeLessThanOrEqualTo();
    internal static string get_ArgumentMustBeOfType();
    internal static string get_ArgumentNullOrEmpty();
    internal static string get_BatchRequestInvalidMediaType();
    internal static string get_BatchRequestMissingBody();
    internal static string get_BatchRequestMissingBoundary();
    internal static string get_BatchRequestMissingContentType();
    internal static string get_BinaryOperatorNotSupported();
    internal static string get_CannotAddToNullCollection();
    internal static string get_CannotApplyETagOfT();
    internal static string get_CannotApplyODataQueryOptionsOfT();
    internal static string get_CannotCastFilter();
    internal static string get_CannotDeserializeUnknownProperty();
    internal static string get_CannotFindKeyInEntityType();
    internal static string get_CannotFindParameterInOperation();
    internal static string get_CannotGetEnumClrMember();
    internal static string get_CannotInstantiateAbstractResourceType();
    internal static string get_CannotParseQueryRequestPayload();
    internal static string get_CannotPatchNavigationProperties();
    internal static string get_CannotProcessPrefixTemplate();
    internal static string get_CannotSerializerNull();
    internal static string get_CannotSetDynamicPropertyDictionary();
    internal static string get_CannotWriteType();
    internal static string get_ClrTypeNotInModel();
    internal static string get_CollectionParameterShouldHaveAddMethod();
    internal static string get_CollectionShouldHaveAddMethod();
    internal static string get_CollectionShouldHaveClearMethod();
    internal static string get_ConvertToEnumFailed();
    internal static string get_CreateODataValueNotSupported();
    internal static string get_CustomQueryOptionNotSupportedWithDollarSign();
    internal static string get_DeltaEntityTypeNotAssignable();
    internal static string get_DeltaNestedResourceNameNotFound();
    internal static string get_DeltaTypeMismatch();
    internal static string get_DeserializerDoesNotSupportRead();
    internal static string get_DoesNotSupportReadInLine();
    internal static string get_DuplicateDynamicPropertyNameFound();
    internal static string get_DynamicPropertyCannotBeSerialized();
    internal static string get_DynamicPropertyNameAlreadyUsedAsDeclaredPropertyName();
    internal static string get_DynamicResourceSetTypeNameIsRequired();
    internal static string get_EditLinkNullForLocationHeader();
    internal static string get_EdmComplexObjectNullRef();
    internal static string get_EdmObjectNull();
    internal static string get_EdmTypeCannotBeNull();
    internal static string get_EdmTypeNotSupported();
    internal static string get_ElementClrTypeNull();
    internal static string get_EmptyKeyTemplate();
    internal static string get_EmptyParameterAlias();
    internal static string get_EmptyPathTemplate();
    internal static string get_EntityReferenceMustHasKeySegment();
    internal static string get_EntitySetMissingDuringSerialization();
    internal static string get_EntityTypeMismatch();
    internal static string get_ErrorTypeMustBeODataErrorOrHttpError();
    internal static string get_ETagNotWellFormed();
    internal static string get_ExpandFilterExpressionNotLambdaExpression();
    internal static string get_ExpressionLexer_UnbalancedBracketExpression();
    internal static string get_ExpressionLexerSyntaxError();
    internal static string get_ExpressionLexerUnterminatedStringLiteral();
    internal static string get_FailedToBuildEdmModelBecauseReturnTypeIsNull();
    internal static string get_FailedToRetrieveTypeToBuildEdmModel();
    internal static string get_FormatterReadIsNotSupportedForType();
    internal static string get_FunctionNotBoundToCollectionOfEntity();
    internal static string get_FunctionNotBoundToEntity();
    internal static string get_FunctionNotSupportedOnEnum();
    internal static string get_GetOnlyCollectionCannotBeArray();
    internal static string get_IdLinkNullForEntityIdHeader();
    internal static string get_InfiniteParameterAlias();
    internal static string get_InputCastTypeKindNotMatch();
    internal static string get_InputKeyNotMatchEntityTypeKey();
    internal static string get_InvalidAttributeRoutingTemplateSegment();
    internal static string get_InvalidBatchReaderState();
    internal static string get_InvalidExpansionDepthValue();
    internal static string get_InvalidKeyInUriFound();
    internal static string get_InvalidLastSegmentInSelectExpandPath();
    internal static string get_InvalidODataRouteOnAction();
    internal static string get_InvalidODataUntypedValue();
    internal static string get_InvalidParameterValueInUriFound();
    internal static string get_InvalidPropertyMapper();
    internal static string get_InvalidPropertyMapping();
    internal static string get_InvalidSegmentInSelectExpandPath();
    internal static string get_InvalidTemplateLiteral();
    internal static string get_JsonConverterDoesnotSupportRead();
    internal static string get_KeyTemplateMustBeInCurlyBraces();
    internal static string get_KeyValueCannotBeNull();
    internal static string get_MappingDoesNotContainResourceType();
    internal static string get_MaxAnyAllExpressionLimitExceeded();
    internal static string get_MaxExpandDepthExceeded();
    internal static string get_MaxNodeLimitExceeded();
    internal static string get_MissingNonODataContainer();
    internal static string get_MissingODataContainer();
    internal static string get_MissingODataServices();
    internal static string get_MissingParameterAlias();
    internal static string get_MissingRequiredParameterInOperation();
    internal static string get_ModelBinderUtil_ModelMetadataCannotBeNull();
    internal static string get_ModelBinderUtil_ValueCannotBeEnum();
    internal static string get_ModelBindingContextMustHaveRequest();
    internal static string get_ModelMissingFromReadContext();
    internal static string get_ModelPrefixAlreadyUsed();
    internal static string get_MultipleActionImportFound();
    internal static string get_MultipleMatchingClrTypesForEdmType();
    internal static string get_MultipleSingleLiteralNotAllowed();
    internal static string get_NavigationSourceMissingDuringDeserialization();
    internal static string get_NavigationSourceMissingDuringSerialization();
    internal static string get_NestedCollectionsNotSupported();
    internal static string get_NestedPropertyNotfound();
    internal static string get_NonSelectExpandOnSingleEntity();
    internal static string get_NotAllowedArithmeticOperator();
    internal static string get_NotAllowedFunction();
    internal static string get_NotAllowedLogicalOperator();
    internal static string get_NotAllowedOrderByProperty();
    internal static string get_NotAllowedQueryOption();
    internal static string get_NotCountableEntitySetUsedForCount();
    internal static string get_NotCountablePropertyUsedForCount();
    internal static string get_NotExpandablePropertyUsedInExpand();
    internal static string get_NotFilterablePropertyUsedInFilter();
    internal static string get_NotNavigablePropertyUsedInNavigation();
    internal static string get_NotSelectablePropertyUsedInSelect();
    internal static string get_NotSortablePropertyUsedInOrderBy();
    internal static string get_NotSupportedTransformationKind();
    internal static string get_NullContainer();
    internal static string get_NullContainerBuilder();
    internal static string get_NullElementInCollection();
    internal static string get_ODataFunctionNotSupported();
    internal static string get_ODataPathMissing();
    internal static string get_OnlySingleValueNodeSupported();
    internal static string get_OperationIsNotBound();
    internal static string get_OperationMustBeUniqueInEntitySetContainer();
    internal static string get_OrderByClauseInvalid();
    internal static string get_OrderByClauseNotSupported();
    internal static string get_OrderByDuplicateIt();
    internal static string get_OrderByDuplicateProperty();
    internal static string get_OrderByNodeCountExceeded();
    internal static string get_ParameterTemplateMustBeInCurlyBraces();
    internal static string get_ParameterTypeIsNotCollection();
    internal static string get_PropertyCannotBeConverted();
    internal static string get_PropertyIsNotCollection();
    internal static string get_PropertyMustBeBoolean();
    internal static string get_PropertyMustBeDateTimeOffsetOrDate();
    internal static string get_PropertyMustBeEnum();
    internal static string get_PropertyMustBeString();
    internal static string get_PropertyMustBeStringLengthOne();
    internal static string get_PropertyMustBeStringMaxLengthOne();
    internal static string get_PropertyMustBeTimeOfDay();
    internal static string get_PropertyMustHavePublicGetterAndSetter();
    internal static string get_PropertyNotFound();
    internal static string get_PropertyNotFoundOnPathExpression();
    internal static string get_PropertyOrPathWasRemovedFromContext();
    internal static string get_PropertyTypeOverflow();
    internal static string get_PropertyUnrecognizedFormat();
    internal static string get_QueryCannotBeEmpty();
    internal static string get_QueryGetModelMustNotReturnNull();
    internal static string get_QueryNodeBindingNotSupported();
    internal static string get_QueryNodeValidationNotSupported();
    internal static string get_QueryParameterNotSupported();
    internal static string get_ReadFromStreamAsyncMustHaveRequest();
    internal static string get_ReferenceNavigationPropertyExpandFilterVisitorUnexpectedParameter();
    internal static string get_RequestMustHaveModel();
    internal static string get_RequestNotActionInvocation();
    internal static string get_RequiredParametersNotSubsetOfFunctionParameters();
    internal static string get_ResourceTypeNotInModel();
    internal static string get_RootElementNameMissing();
    internal static string get_RouteOptionDisabledKeySegment();
    internal static string get_RouteOptionDisabledOperationSegment();
    internal static string get_RouteServicesAlreadyExist();
    internal static string get_SegmentShouldBeKind();
    internal static string get_SelectExpandEmptyOrNull();
    internal static string get_SelectExpandEmptyOrWhitespace();
    internal static string get_SelectionTypeNotSupported();
    internal static string get_SelectNonStructured();
    internal static string get_ShouldHaveNavigationPropertyInNavigationExpandPath();
    internal static string get_SingleResultHasMoreThanOneEntity();
    internal static string get_SkipTokenNotSupportedOrderByExpression();
    internal static string get_SkipTokenParseError();
    internal static string get_SkipTokenProcessingError();
    internal static string get_SkipTopLimitExceeded();
    internal static string get_TargetKindNotImplemented();
    internal static string get_TypeCannotBeDeserialized();
    internal static string get_TypeCannotBeSerialized();
    internal static string get_TypeMustBeEntity();
    internal static string get_TypeMustBeEnumOrNullableEnum();
    internal static string get_TypeMustBeRelated();
    internal static string get_TypeMustBeResourceSet();
    internal static string get_TypeOfDynamicPropertyNotSupported();
    internal static string get_UnableToDetermineBaseUrl();
    internal static string get_UnableToDetermineMetadataUrl();
    internal static string get_UnableToIdentifyUniqueProperty();
    internal static string get_UnaryNodeValidationNotSupported();
    internal static string get_UnexpectedElementType();
    internal static string get_UnsupportedEdmType();
    internal static string get_UnsupportedEdmTypeKind();
    internal static string get_UriFunctionClrBinderAlreadyBound();
    internal static string get_UriQueryStringInvalid();
    internal static string get_ValueIsInvalid();
    internal static string get_WriteObjectInlineNotSupported();
    internal static string get_WriteObjectNotSupported();
    internal static string get_WriteToResponseAsyncMustHaveRequest();
}
