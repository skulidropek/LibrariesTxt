[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.OpenApiEndpointConventionBuilderExtensions : object {
    [ExtensionAttribute]
public static TBuilder WithOpenApi(TBuilder builder);
    [ExtensionAttribute]
public static TBuilder WithOpenApi(TBuilder builder, Func`2<OpenApiOperation, OpenApiOperation> configureOperation);
    private static void AddAndConfigureOperationForEndpoint(EndpointBuilder endpointBuilder, Func`2<OpenApiOperation, OpenApiOperation> configure);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiresUnreferencedCodeAttribute("Uses unbounded Reflection to inspect property types.")]
internal class Microsoft.AspNetCore.Http.ParameterBindingMethodCache : object {
    private static MethodInfo ConvertValueTaskMethod;
    private static MethodInfo ConvertValueTaskOfNullableResultMethod;
    private static MethodInfo BindAsyncMethod;
    private static MethodInfo UriTryCreateMethod;
    private MethodInfo _enumTryParseMethod;
    private bool _throwOnInvalidMethod;
    private ConcurrentDictionary`2<Type, Func`3<ParameterExpression, Expression, Expression>> _stringMethodCallCache;
    private ConcurrentDictionary`2<Type, ValueTuple`2<Func`2<ParameterInfo, Expression>, int>> _bindAsyncMethodCallCache;
    private ConcurrentDictionary`2<Type, ValueTuple`2<ConstructorInfo, ConstructorParameter[]>> _constructorCache;
    public ParameterBindingMethodCache(bool throwOnInvalidMethod);
    public ParameterBindingMethodCache(bool preferNonGenericEnumParseOverload, bool throwOnInvalidMethod);
    private static ParameterBindingMethodCache();
    [RequiresUnreferencedCodeAttribute("Performs reflection on type hierarchy. This cannot be statically analyzed.")]
[RequiresDynamicCodeAttribute("Performs reflection on type hierarchy. This cannot be statically analyzed.")]
public bool HasTryParseMethod(Type type);
    [RequiresUnreferencedCodeAttribute("Performs reflection on type hierarchy. This cannot be statically analyzed.")]
[RequiresDynamicCodeAttribute("Performs reflection on type hierarchy. This cannot be statically analyzed.")]
public bool HasBindAsyncMethod(ParameterInfo parameter);
    [RequiresUnreferencedCodeAttribute("Performs reflection on type hierarchy. This cannot be statically analyzed.")]
[RequiresDynamicCodeAttribute("Performs reflection on type hierarchy. This cannot be statically analyzed.")]
public Func`3<ParameterExpression, Expression, Expression> FindTryParseMethod(Type type);
    [RequiresUnreferencedCodeAttribute("Performs reflection on type hierarchy. This cannot be statically analyzed.")]
[RequiresDynamicCodeAttribute("Performs reflection on type hierarchy. This cannot be statically analyzed.")]
public ValueTuple`2<Expression, int> FindBindAsyncMethod(ParameterInfo parameter);
    public ValueTuple`2<ConstructorInfo, ConstructorParameter[]> FindConstructor(Type type);
    private static ConstructorInfo GetConstructor(Type type);
    [RequiresDynamicCodeAttribute("MakeGenericMethod is possible used with ValueTypes and isn't compatible with AOT.")]
private static MethodInfo GetIBindableFromHttpContextMethod(Type type);
    private static ValueTask`1<TValue> BindAsync(HttpContext httpContext, ParameterInfo parameter);
    [RequiresUnreferencedCodeAttribute("Performs reflection on type hierarchy. This cannot be statically analyzed.")]
private static bool TryGetExplicitIParsableTryParseMethod(Type type, MethodInfo& methodInfo);
    [RequiresUnreferencedCodeAttribute("Performs reflection on type hierarchy. This cannot be statically analyzed.")]
private MethodInfo GetStaticMethodFromHierarchy(Type type, string name, Type[] parameterTypes, Func`2<MethodInfo, bool> validateReturnType);
    [RequiresUnreferencedCodeAttribute("Performs reflection on type hierarchy. This cannot be statically analyzed.")]
private static MethodInfo GetAnyMethodFromHierarchy(Type type, string name);
    private static MethodInfo GetEnumTryParseMethod(bool preferNonGenericEnumParseOverload);
    private static bool TryGetDateTimeTryParseMethod(Type type, MethodInfo& methodInfo);
    private static bool TryGetNumberStylesTryGetMethod(Type type, MethodInfo& method, Nullable`1& numberStyles);
    private static ValueTask`1<object> ConvertValueTask(ValueTask`1<T> typedValueTask);
    private static ValueTask`1<object> ConvertValueTaskOfNullableResult(ValueTask`1<Nullable`1<T>> typedValueTask);
    [CompilerGeneratedAttribute]
private Func`3<ParameterExpression, Expression, Expression> <FindTryParseMethod>g__Finder|14_0(Type type);
    [CompilerGeneratedAttribute]
internal static bool <FindTryParseMethod>g__ValidateReturnType|14_8(MethodInfo methodInfo);
    [CompilerGeneratedAttribute]
private ValueTuple`2<Func`2<ParameterInfo, Expression>, int> <FindBindAsyncMethod>g__Finder|15_0(Type nonNullableParameterType);
    [CompilerGeneratedAttribute]
internal static bool <FindBindAsyncMethod>g__ValidateReturnType|15_1(MethodInfo methodInfo);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<ConstructorInfo, ConstructorParameter[]> <FindConstructor>g__Finder|16_0(Type type);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <GetStaticMethodFromHierarchy>g__IsMatch|21_0(MethodInfo method, <>c__DisplayClass21_0& );
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.ParameterBindingMethodCache/<<ConvertValueTask>g__ConvertAwaited|26_0>d`1")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<object> <ConvertValueTask>g__ConvertAwaited|26_0(ValueTask`1<T> typedValueTask);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.ParameterBindingMethodCache/<<ConvertValueTaskOfNullableResult>g__ConvertAwaited|27_0>d`1")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<object> <ConvertValueTaskOfNullableResult>g__ConvertAwaited|27_0(ValueTask`1<Nullable`1<T>> typedValueTask);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Http.PropertyAsParameterInfo : ParameterInfo {
    private PropertyInfo _underlyingProperty;
    private ParameterInfo _constructionParameterInfo;
    private NullabilityInfoContext _nullabilityContext;
    private NullabilityInfo _nullabilityInfo;
    public bool HasDefaultValue { get; }
    [NullableAttribute("2")]
public object DefaultValue { get; }
    public int MetadataToken { get; }
    [NullableAttribute("2")]
public object RawDefaultValue { get; }
    public bool IsOptional { get; }
    public NullabilityInfo NullabilityInfo { get; }
    public PropertyAsParameterInfo(PropertyInfo propertyInfo, NullabilityInfoContext nullabilityContext);
    public PropertyAsParameterInfo(PropertyInfo property, ParameterInfo parameterInfo, NullabilityInfoContext nullabilityContext);
    public virtual bool get_HasDefaultValue();
    [NullableContextAttribute("2")]
public virtual object get_DefaultValue();
    public virtual int get_MetadataToken();
    [NullableContextAttribute("2")]
public virtual object get_RawDefaultValue();
    [RequiresUnreferencedCodeAttribute("Uses unbounded Reflection to access parameter type constructors.")]
public static ReadOnlySpan`1<ParameterInfo> Flatten(ParameterInfo[] parameters, ParameterBindingMethodCache cache);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual IList`1<CustomAttributeData> GetCustomAttributesData();
    public virtual Type[] GetOptionalCustomModifiers();
    public virtual Type[] GetRequiredCustomModifiers();
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public bool get_IsOptional();
    public NullabilityInfo get_NullabilityInfo();
    [CompilerGeneratedAttribute]
internal static List`1<ParameterInfo> <Flatten>g__InitializeList|14_1(ParameterInfo[] parameters, int i);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.OpenApi.OpenApiGenerator : object {
    private IHostEnvironment _environment;
    private IServiceProviderIsService _serviceProviderIsService;
    internal static ParameterBindingMethodCache ParameterBindingMethodCache;
    [NullableContextAttribute("2")]
internal OpenApiGenerator(IHostEnvironment environment, IServiceProviderIsService serviceProviderIsService);
    private static OpenApiGenerator();
    internal OpenApiOperation GetOpenApiOperation(MethodInfo methodInfo, EndpointMetadataCollection metadata, RoutePattern pattern);
    private OpenApiOperation GetOperation(string httpMethod, MethodInfo methodInfo, EndpointMetadataCollection metadata, RoutePattern pattern);
    private static OpenApiResponses GetOpenApiResponses(MethodInfo method, EndpointMetadataCollection metadata);
    private static string GetResponseDescription(int statusCode);
    private static void GenerateDefaultContent(MediaTypeCollection discoveredContentTypeAnnotation, Type discoveredTypeAnnotation);
    private static void GenerateDefaultResponses(Dictionary`2<int, ValueTuple`2<Type, MediaTypeCollection>> eligibleAnnotations, Type responseType);
    private OpenApiRequestBody GetOpenApiRequestBody(MethodInfo methodInfo, EndpointMetadataCollection metadata, RoutePattern pattern, bool disableInferredBody);
    private List`1<OpenApiTag> GetOperationTags(MethodInfo methodInfo, EndpointMetadataCollection metadata);
    private List`1<OpenApiParameter> GetOpenApiParameters(MethodInfo methodInfo, RoutePattern pattern, bool disableInferredBody);
    private ValueTuple`3<bool, Nullable`1<ParameterLocation>, string> GetOpenApiParameterLocation(ParameterInfo parameter, RoutePattern pattern, bool disableInferredBody);
    [CompilerGeneratedAttribute]
internal static bool <GetOperation>g__ShouldDisableInferredBody|5_0(string method);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.Extensions.Internal.AwaitableInfo : ValueType {
    private static BindingFlags Everything;
    private static MethodInfo INotifyCompletion_OnCompleted;
    private static MethodInfo ICriticalNotifyCompletion_UnsafeOnCompleted;
    [CompilerGeneratedAttribute]
private Type <AwaiterType>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <AwaiterIsCompletedProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <AwaiterGetResultMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <AwaiterOnCompletedMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <AwaiterUnsafeOnCompletedMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResultType>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <GetAwaiterMethod>k__BackingField;
    public Type AwaiterType { get; }
    public PropertyInfo AwaiterIsCompletedProperty { get; }
    public MethodInfo AwaiterGetResultMethod { get; }
    public MethodInfo AwaiterOnCompletedMethod { get; }
    [NullableAttribute("2")]
public MethodInfo AwaiterUnsafeOnCompletedMethod { get; }
    public Type ResultType { get; }
    public MethodInfo GetAwaiterMethod { get; }
    public AwaitableInfo(Type awaiterType, PropertyInfo awaiterIsCompletedProperty, MethodInfo awaiterGetResultMethod, MethodInfo awaiterOnCompletedMethod, MethodInfo awaiterUnsafeOnCompletedMethod, Type resultType, MethodInfo getAwaiterMethod);
    private static AwaitableInfo();
    [CompilerGeneratedAttribute]
public Type get_AwaiterType();
    [CompilerGeneratedAttribute]
public PropertyInfo get_AwaiterIsCompletedProperty();
    [CompilerGeneratedAttribute]
public MethodInfo get_AwaiterGetResultMethod();
    [CompilerGeneratedAttribute]
public MethodInfo get_AwaiterOnCompletedMethod();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public MethodInfo get_AwaiterUnsafeOnCompletedMethod();
    [CompilerGeneratedAttribute]
public Type get_ResultType();
    [CompilerGeneratedAttribute]
public MethodInfo get_GetAwaiterMethod();
    [UnconditionalSuppressMessageAttribute("Trimmer", "IL2070")]
[UnconditionalSuppressMessageAttribute("Trimmer", "IL2075")]
public static bool IsTypeAwaitable(Type type, AwaitableInfo& awaitableInfo);
}
[IsReadOnlyAttribute]
internal class Microsoft.Extensions.Internal.CoercedAwaitableInfo : ValueType {
    [CompilerGeneratedAttribute]
private AwaitableInfo <AwaitableInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <CoercerExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <CoercerResultType>k__BackingField;
    public AwaitableInfo AwaitableInfo { get; }
    public Expression CoercerExpression { get; }
    public Type CoercerResultType { get; }
    public bool RequiresCoercion { get; }
    public CoercedAwaitableInfo(AwaitableInfo awaitableInfo);
    public CoercedAwaitableInfo(Expression coercerExpression, Type coercerResultType, AwaitableInfo coercedAwaitableInfo);
    [CompilerGeneratedAttribute]
public AwaitableInfo get_AwaitableInfo();
    [CompilerGeneratedAttribute]
public Expression get_CoercerExpression();
    [CompilerGeneratedAttribute]
public Type get_CoercerResultType();
    public bool get_RequiresCoercion();
    [RequiresDynamicCodeAttribute("Dynamically generates calls to FSharpAsync.")]
public static bool IsTypeAwaitable(Type type, CoercedAwaitableInfo& info);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiresUnreferencedCodeAttribute("ObjectMethodExecutor performs reflection on arbitrary types.")]
[RequiresDynamicCodeAttribute("ObjectMethodExecutor performs reflection on arbitrary types.")]
internal class Microsoft.Extensions.Internal.ObjectMethodExecutor : object {
    private Object[] _parameterDefaultValues;
    private MethodExecutorAsync _executorAsync;
    private MethodExecutor _executor;
    private static ConstructorInfo _objectMethodExecutorAwaitableConstructor;
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterInfo[] <MethodParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeInfo <TargetTypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <AsyncResultType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <MethodReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMethodAsync>k__BackingField;
    public MethodInfo MethodInfo { get; }
    public ParameterInfo[] MethodParameters { get; }
    public TypeInfo TargetTypeInfo { get; }
    [NullableAttribute("2")]
public Type AsyncResultType { get; }
    public Type MethodReturnType { get; internal set; }
    public bool IsMethodAsync { get; }
    private ObjectMethodExecutor(MethodInfo methodInfo, TypeInfo targetTypeInfo, Object[] parameterDefaultValues);
    private static ObjectMethodExecutor();
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
public ParameterInfo[] get_MethodParameters();
    [CompilerGeneratedAttribute]
public TypeInfo get_TargetTypeInfo();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_AsyncResultType();
    [CompilerGeneratedAttribute]
public Type get_MethodReturnType();
    [CompilerGeneratedAttribute]
internal void set_MethodReturnType(Type value);
    [CompilerGeneratedAttribute]
public bool get_IsMethodAsync();
    public static ObjectMethodExecutor Create(MethodInfo methodInfo, TypeInfo targetTypeInfo);
    public static ObjectMethodExecutor Create(MethodInfo methodInfo, TypeInfo targetTypeInfo, Object[] parameterDefaultValues);
    [NullableContextAttribute("2")]
public object Execute(object target, Object[] parameters);
    public ObjectMethodExecutorAwaitable ExecuteAsync(object target, Object[] parameters);
    [NullableContextAttribute("2")]
public object GetDefaultValueForParameter(int index);
    private static MethodExecutor GetExecutor(MethodInfo methodInfo, TypeInfo targetTypeInfo);
    private static MethodExecutor WrapVoidMethod(VoidMethodExecutor executor);
    private static MethodExecutorAsync GetExecutorAsync(MethodInfo methodInfo, TypeInfo targetTypeInfo, CoercedAwaitableInfo coercedAwaitableInfo);
}
[IsReadOnlyAttribute]
internal class Microsoft.Extensions.Internal.ObjectMethodExecutorAwaitable : ValueType {
    private object _customAwaitable;
    private Func`2<object, object> _getAwaiterMethod;
    private Func`2<object, bool> _isCompletedMethod;
    private Func`2<object, object> _getResultMethod;
    private Action`2<object, Action> _onCompletedMethod;
    private Action`2<object, Action> _unsafeOnCompletedMethod;
    public ObjectMethodExecutorAwaitable(object customAwaitable, Func`2<object, object> getAwaiterMethod, Func`2<object, bool> isCompletedMethod, Func`2<object, object> getResultMethod, Action`2<object, Action> onCompletedMethod, Action`2<object, Action> unsafeOnCompletedMethod);
    public Awaiter GetAwaiter();
}
[RequiresDynamicCodeAttribute("Dynamically generates calls to FSharpAsync.")]
internal static class Microsoft.Extensions.Internal.ObjectMethodExecutorFSharpSupport : object {
    private static object _fsharpValuesCacheLock;
    private static Assembly _fsharpCoreAssembly;
    private static MethodInfo _fsharpAsyncStartAsTaskGenericMethod;
    private static PropertyInfo _fsharpOptionOfTaskCreationOptionsNoneProperty;
    private static PropertyInfo _fsharpOptionOfCancellationTokenNoneProperty;
    private static ObjectMethodExecutorFSharpSupport();
    [UnconditionalSuppressMessageAttribute("Trimmer", "IL2060")]
public static bool TryBuildCoercerFromFSharpAsyncToAwaitable(Type possibleFSharpAsyncType, Expression& coerceToAwaitableExpression, Type& awaitableType);
    private static bool IsFSharpAsyncOpenGenericType(Type possibleFSharpAsyncGenericType);
    [UnconditionalSuppressMessageAttribute("Trimmer", "IL2026")]
[UnconditionalSuppressMessageAttribute("Trimmer", "IL2055")]
[UnconditionalSuppressMessageAttribute("Trimmer", "IL2072")]
private static bool TryPopulateFSharpValueCaches(Type possibleFSharpAsyncGenericType);
    private static bool TypesHaveSameIdentity(Type type1, Type type2);
}
internal static class Microsoft.Extensions.Internal.TypeNameHelper : object {
    private static char DefaultNestedTypeDelimiter;
    private static Dictionary`2<Type, string> _builtInTypeNames;
    private static TypeNameHelper();
    [NullableContextAttribute("2")]
public static string GetTypeDisplayName(object item, bool fullName);
    [NullableContextAttribute("1")]
public static string GetTypeDisplayName(Type type, bool fullName, bool includeGenericParameterNames, bool includeGenericParameters, char nestedTypeDelimiter);
    private static void ProcessType(StringBuilder builder, Type type, DisplayNameOptions& options);
    private static void ProcessArrayType(StringBuilder builder, Type type, DisplayNameOptions& options);
    private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, DisplayNameOptions& options);
}
internal static class System.Runtime.CompilerServices.TypeHelper : object {
    [NullableContextAttribute("2")]
internal static bool IsCompilerGeneratedType(Type type);
    private static bool IsCompilerGeneratedMethod(MethodInfo method);
    private static bool TryParseLocalFunctionName(string generatedName, String& originalName);
    [NullableContextAttribute("1")]
internal static bool TryGetNonCompilerGeneratedMethodName(MethodInfo method, String& originalName);
}
