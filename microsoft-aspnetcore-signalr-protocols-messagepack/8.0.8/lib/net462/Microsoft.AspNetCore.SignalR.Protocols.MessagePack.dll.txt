internal static class Microsoft.AspNetCore.Internal.BinaryMessageFormatter : object {
    public static void WriteLengthPrefix(long length, IBufferWriter`1<byte> output);
    public static int WriteLengthPrefix(long length, Span`1<byte> output);
    public static int LengthPrefixLength(long length);
}
internal static class Microsoft.AspNetCore.Internal.BinaryMessageParser : object {
    private static int MaxLengthPrefixSize;
    public static bool TryParseMessage(ReadOnlySequence`1& buffer, ReadOnlySequence`1& payload);
    private static ReadOnlySpan`1<byte> GetSpan(ReadOnlySequence`1& lengthPrefixBuffer);
}
internal class Microsoft.AspNetCore.Internal.MemoryBufferWriter : Stream {
    [ThreadStaticAttribute]
private static MemoryBufferWriter _cachedInstance;
    private int _minimumSegmentSize;
    private int _bytesWritten;
    private List`1<CompletedBuffer> _completedSegments;
    private Byte[] _currentSegment;
    private int _position;
    public long Length { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Position { get; public set; }
    public MemoryBufferWriter(int minimumSegmentSize);
    public virtual long get_Length();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public static MemoryBufferWriter Get();
    public static void Return(MemoryBufferWriter writer);
    public void Reset();
    public sealed virtual void Advance(int count);
    public sealed virtual Memory`1<byte> GetMemory(int sizeHint);
    public sealed virtual Span`1<byte> GetSpan(int sizeHint);
    public void CopyTo(IBufferWriter`1<byte> destination);
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    [MemberNotNullAttribute("_currentSegment")]
private void EnsureCapacity(int sizeHint);
    [MemberNotNullAttribute("_currentSegment")]
private void AddSegment(int sizeHint);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Internal.MemoryBufferWriter/<CopyToSlowAsync>d__28")]
private Task CopyToSlowAsync(Stream destination, CancellationToken cancellationToken);
    public Byte[] ToArray();
    public void CopyTo(Span`1<byte> span);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void WriteByte(byte value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public WrittenBuffers DetachAndReset();
    protected virtual void Dispose(bool disposing);
}
internal static class Microsoft.AspNetCore.Shared.ArgumentNullThrowHelper : object {
    public static void ThrowIfNull(object argument, string paramName);
    [DoesNotReturnAttribute]
internal static void Throw(string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.SignalR.MessagePackHubProtocolOptions : object {
    private MessagePackSerializerOptions _messagePackSerializerOptions;
    public MessagePackSerializerOptions SerializerOptions { get; public set; }
    public MessagePackSerializerOptions get_SerializerOptions();
    public void set_SerializerOptions(MessagePackSerializerOptions value);
}
internal class Microsoft.AspNetCore.SignalR.Protocol.DefaultMessagePackHubProtocolWorker : MessagePackHubProtocolWorker {
    private MessagePackSerializerOptions _messagePackSerializerOptions;
    public DefaultMessagePackHubProtocolWorker(MessagePackSerializerOptions messagePackSerializerOptions);
    protected virtual object DeserializeObject(MessagePackReader& reader, Type type, string field);
    protected virtual void Serialize(MessagePackWriter& writer, Type type, object value);
}
public class Microsoft.AspNetCore.SignalR.Protocol.MessagePackHubProtocol : object {
    private static string ProtocolName;
    private static int ProtocolVersion;
    private DefaultMessagePackHubProtocolWorker _worker;
    [NullableAttribute("1")]
public string Name { get; }
    public int Version { get; }
    public TransferFormat TransferFormat { get; }
    [NullableContextAttribute("1")]
public MessagePackHubProtocol(IOptions`1<MessagePackHubProtocolOptions> options);
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    public sealed virtual int get_Version();
    public sealed virtual TransferFormat get_TransferFormat();
    public sealed virtual bool IsVersionSupported(int version);
    public sealed virtual bool TryParseMessage(ReadOnlySequence`1& input, IInvocationBinder binder, HubMessage& message);
    [NullableContextAttribute("1")]
public sealed virtual void WriteMessage(HubMessage message, IBufferWriter`1<byte> output);
    public sealed virtual ReadOnlyMemory`1<byte> GetMessageBytes(HubMessage message);
    internal static MessagePackSerializerOptions CreateDefaultMessagePackSerializerOptions();
}
internal abstract class Microsoft.AspNetCore.SignalR.Protocol.MessagePackHubProtocolWorker : object {
    private static int ErrorResult;
    private static int VoidResult;
    private static int NonVoidResult;
    public bool TryParseMessage(ReadOnlySequence`1& input, IInvocationBinder binder, HubMessage& message);
    private HubMessage ParseMessage(MessagePackReader& reader, IInvocationBinder binder);
    private HubMessage CreateInvocationMessage(MessagePackReader& reader, IInvocationBinder binder, int itemCount);
    private HubMessage CreateStreamInvocationMessage(MessagePackReader& reader, IInvocationBinder binder, int itemCount);
    private HubMessage CreateStreamItemMessage(MessagePackReader& reader, IInvocationBinder binder);
    private CompletionMessage CreateCompletionMessage(MessagePackReader& reader, IInvocationBinder binder);
    private static CancelInvocationMessage CreateCancelInvocationMessage(MessagePackReader& reader);
    private static CloseMessage CreateCloseMessage(MessagePackReader& reader, int itemCount);
    private static Dictionary`2<string, string> ReadHeaders(MessagePackReader& reader);
    private static String[] ReadStreamIds(MessagePackReader& reader);
    private static AckMessage CreateAckMessage(MessagePackReader& reader);
    private static SequenceMessage CreateSequenceMessage(MessagePackReader& reader);
    private Object[] BindArguments(MessagePackReader& reader, IReadOnlyList`1<Type> parameterTypes);
    protected abstract virtual object DeserializeObject(MessagePackReader& reader, Type type, string field);
    private static T ApplyHeaders(IDictionary`2<string, string> source, T destination);
    public void WriteMessage(HubMessage message, IBufferWriter`1<byte> output);
    public ReadOnlyMemory`1<byte> GetMessageBytes(HubMessage message);
    private void WriteMessageCore(HubMessage message, MessagePackWriter& writer);
    private void WriteInvocationMessage(InvocationMessage message, MessagePackWriter& writer);
    private void WriteStreamInvocationMessage(StreamInvocationMessage message, MessagePackWriter& writer);
    private void WriteStreamingItemMessage(StreamItemMessage message, MessagePackWriter& writer);
    private void WriteArgument(object argument, MessagePackWriter& writer);
    protected abstract virtual void Serialize(MessagePackWriter& writer, Type type, object value);
    private static void WriteStreamIds(String[] streamIds, MessagePackWriter& writer);
    private void WriteCompletionMessage(CompletionMessage message, MessagePackWriter& writer);
    private static void WriteCancelInvocationMessage(CancelInvocationMessage message, MessagePackWriter& writer);
    private static void WriteCloseMessage(CloseMessage message, MessagePackWriter& writer);
    private static void WritePingMessage(MessagePackWriter& writer);
    private static void WriteAckMessage(AckMessage message, MessagePackWriter& writer);
    private static void WriteSequenceMessage(SequenceMessage message, MessagePackWriter& writer);
    private static void PackHeaders(IDictionary`2<string, string> headers, MessagePackWriter& writer);
    private static string ReadInvocationId(MessagePackReader& reader);
    private static bool ReadBoolean(MessagePackReader& reader, string field);
    private static int ReadInt32(MessagePackReader& reader, string field);
    private static long ReadInt64(MessagePackReader& reader, string field);
    protected static string ReadString(MessagePackReader& reader, IInvocationBinder binder, string field);
    protected static string ReadString(MessagePackReader& reader, string field);
    private static long ReadMapLength(MessagePackReader& reader, string field);
    private static long ReadArrayLength(MessagePackReader& reader, string field);
    private static void ThrowIfNullOrEmpty(string target, string message);
}
internal static class Microsoft.AspNetCore.SignalR.Protocol.ProtocolHelper : object {
    internal static Type TryGetReturnType(IInvocationBinder binder, string invocationId);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.MessagePackProtocolDependencyInjectionExtensions : object {
    [ExtensionAttribute]
public static TBuilder AddMessagePackProtocol(TBuilder builder);
    [ExtensionAttribute]
public static TBuilder AddMessagePackProtocol(TBuilder builder, Action`1<MessagePackHubProtocolOptions> configure);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
