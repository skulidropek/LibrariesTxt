internal static class Microsoft.AspNetCore.Internal.JsonUtils : object {
    internal static JsonTextReader CreateJsonTextReader(TextReader textReader);
    internal static JsonTextWriter CreateJsonTextWriter(TextWriter textWriter);
    public static JObject GetObject(JToken token);
    public static T GetRequiredProperty(JObject json, string property, JTokenType expectedType);
    public static T GetValue(string property, JTokenType expectedType, JToken prop);
    public static string GetTokenString(JsonToken tokenType);
    public static void EnsureObjectStart(JsonTextReader reader);
    public static void EnsureArrayStart(JsonTextReader reader);
    public static bool ReadAsBoolean(JsonTextReader reader, string propertyName);
    public static Nullable`1<int> ReadAsInt32(JsonTextReader reader, string propertyName);
    public static Nullable`1<long> ReadAsInt64(JsonTextReader reader, string propertyName);
    public static string ReadAsString(JsonTextReader reader, string propertyName);
    public static bool CheckRead(JsonTextReader reader);
    public static bool ReadForType(JsonTextReader reader, Type type);
}
internal class Microsoft.AspNetCore.Internal.MemoryBufferWriter : Stream {
    [ThreadStaticAttribute]
private static MemoryBufferWriter _cachedInstance;
    private int _minimumSegmentSize;
    private int _bytesWritten;
    private List`1<CompletedBuffer> _completedSegments;
    private Byte[] _currentSegment;
    private int _position;
    public long Length { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Position { get; public set; }
    public MemoryBufferWriter(int minimumSegmentSize);
    public virtual long get_Length();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public static MemoryBufferWriter Get();
    public static void Return(MemoryBufferWriter writer);
    public void Reset();
    public sealed virtual void Advance(int count);
    public sealed virtual Memory`1<byte> GetMemory(int sizeHint);
    public sealed virtual Span`1<byte> GetSpan(int sizeHint);
    public void CopyTo(IBufferWriter`1<byte> destination);
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    [MemberNotNullAttribute("_currentSegment")]
private void EnsureCapacity(int sizeHint);
    [MemberNotNullAttribute("_currentSegment")]
private void AddSegment(int sizeHint);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Internal.MemoryBufferWriter/<CopyToSlowAsync>d__28")]
private Task CopyToSlowAsync(Stream destination, CancellationToken cancellationToken);
    public Byte[] ToArray();
    public void CopyTo(Span`1<byte> span);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void WriteByte(byte value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public WrittenBuffers DetachAndReset();
    protected virtual void Dispose(bool disposing);
}
internal static class Microsoft.AspNetCore.Internal.TextMessageFormatter : object {
    public static byte RecordSeparator;
    public static void WriteRecordSeparator(IBufferWriter`1<byte> output);
}
internal static class Microsoft.AspNetCore.Internal.TextMessageParser : object {
    public static bool TryParseMessage(ReadOnlySequence`1& buffer, ReadOnlySequence`1& payload);
    private static bool TryParseMessageMultiSegment(ReadOnlySequence`1& buffer, ReadOnlySequence`1& payload);
}
internal class Microsoft.AspNetCore.Internal.Utf8BufferTextWriter : TextWriter {
    private static UTF8Encoding _utf8NoBom;
    private static int MaximumBytesPerUtf8Char;
    [ThreadStaticAttribute]
private static Utf8BufferTextWriter _cachedInstance;
    private Encoder _encoder;
    private IBufferWriter`1<byte> _bufferWriter;
    private Memory`1<byte> _memory;
    private int _memoryUsed;
    public Encoding Encoding { get; }
    private static Utf8BufferTextWriter();
    public virtual Encoding get_Encoding();
    public static Utf8BufferTextWriter Get(IBufferWriter`1<byte> bufferWriter);
    public static void Return(Utf8BufferTextWriter writer);
    public void SetWriter(IBufferWriter`1<byte> bufferWriter);
    public virtual void Write(Char[] buffer, int index, int count);
    public virtual void Write(Char[] buffer);
    public virtual void Write(char value);
    private void WriteMultiByteChar(char value);
    public virtual void Write(string value);
    private Span`1<byte> GetBuffer();
    private void EnsureBuffer();
    private void WriteInternal(ReadOnlySpan`1<char> buffer);
    public virtual void Flush();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.AspNetCore.SignalR.Internal.Utf8BufferTextReader : TextReader {
    private Decoder _decoder;
    private ReadOnlySequence`1<byte> _utf8Buffer;
    [ThreadStaticAttribute]
private static Utf8BufferTextReader _cachedInstance;
    public static Utf8BufferTextReader Get(ReadOnlySequence`1& utf8Buffer);
    public static void Return(Utf8BufferTextReader reader);
    public void SetBuffer(ReadOnlySequence`1& utf8Buffer);
    public virtual int Read(Char[] buffer, int index, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.SignalR.NewtonsoftJsonHubProtocolOptions : object {
    [CompilerGeneratedAttribute]
private JsonSerializerSettings <PayloadSerializerSettings>k__BackingField;
    public JsonSerializerSettings PayloadSerializerSettings { get; public set; }
    [CompilerGeneratedAttribute]
public JsonSerializerSettings get_PayloadSerializerSettings();
    [CompilerGeneratedAttribute]
public void set_PayloadSerializerSettings(JsonSerializerSettings value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.SignalR.Protocol.NewtonsoftJsonHubProtocol : object {
    private static string ResultPropertyName;
    private static string ItemPropertyName;
    private static string InvocationIdPropertyName;
    private static string StreamIdsPropertyName;
    private static string TypePropertyName;
    private static string ErrorPropertyName;
    private static string TargetPropertyName;
    private static string ArgumentsPropertyName;
    private static string HeadersPropertyName;
    private static string AllowReconnectPropertyName;
    private static string SequenceIdPropertyName;
    private static string ProtocolName;
    private static int ProtocolVersion;
    [CompilerGeneratedAttribute]
private JsonSerializer <PayloadSerializer>k__BackingField;
    public JsonSerializer PayloadSerializer { get; }
    public string Name { get; }
    public int Version { get; }
    public TransferFormat TransferFormat { get; }
    public NewtonsoftJsonHubProtocol(IOptions`1<NewtonsoftJsonHubProtocolOptions> options);
    [CompilerGeneratedAttribute]
public JsonSerializer get_PayloadSerializer();
    public sealed virtual string get_Name();
    public sealed virtual int get_Version();
    public sealed virtual TransferFormat get_TransferFormat();
    public sealed virtual bool IsVersionSupported(int version);
    [NullableContextAttribute("0")]
public sealed virtual bool TryParseMessage(ReadOnlySequence`1& input, IInvocationBinder binder, HubMessage& message);
    public sealed virtual void WriteMessage(HubMessage message, IBufferWriter`1<byte> output);
    [NullableContextAttribute("0")]
public sealed virtual ReadOnlyMemory`1<byte> GetMessageBytes(HubMessage message);
    private HubMessage ParseMessage(Utf8BufferTextReader textReader, IInvocationBinder binder);
    private static Dictionary`2<string, string> ReadHeaders(JsonTextReader reader);
    private void WriteMessageCore(HubMessage message, IBufferWriter`1<byte> stream);
    private static void WriteHeaders(JsonTextWriter writer, HubInvocationMessage message);
    private void WriteCompletionMessage(CompletionMessage message, JsonTextWriter writer);
    private static void WriteCancelInvocationMessage(CancelInvocationMessage message, JsonTextWriter writer);
    private void WriteStreamItemMessage(StreamItemMessage message, JsonTextWriter writer);
    private void WriteInvocationMessage(InvocationMessage message, JsonTextWriter writer);
    private void WriteStreamInvocationMessage(StreamInvocationMessage message, JsonTextWriter writer);
    private static void WriteCloseMessage(CloseMessage message, JsonTextWriter writer);
    private void WriteArguments(Object[] arguments, JsonTextWriter writer);
    private static void WriteStreamIds(String[] streamIds, JsonTextWriter writer);
    private static void WriteInvocationId(HubInvocationMessage message, JsonTextWriter writer);
    private static void WriteMessageType(JsonTextWriter writer, int type);
    private static void WriteAckMessage(AckMessage message, JsonTextWriter writer);
    private static void WriteSequenceMessage(SequenceMessage message, JsonTextWriter writer);
    private static HubMessage BindCancelInvocationMessage(string invocationId);
    private static HubMessage BindCompletionMessage(string invocationId, string error, object result, bool hasResult);
    private static HubMessage BindStreamItemMessage(string invocationId, object item, bool hasItem);
    private static HubMessage BindStreamInvocationMessage(string invocationId, string target, Object[] arguments, bool hasArguments, String[] streamIds);
    private static HubMessage BindInvocationMessage(string invocationId, string target, Object[] arguments, bool hasArguments, String[] streamIds);
    private static bool ReadArgumentAsType(JsonTextReader reader, IReadOnlyList`1<Type> paramTypes, int paramIndex);
    private Object[] BindArguments(JsonTextReader reader, IReadOnlyList`1<Type> paramTypes);
    private static CloseMessage BindCloseMessage(string error, bool allowReconnect);
    private static AckMessage BindAckMessage(Nullable`1<long> sequenceId);
    private static SequenceMessage BindSequenceMessage(Nullable`1<long> sequenceId);
    private Object[] BindArguments(JArray args, IReadOnlyList`1<Type> paramTypes);
    private static HubMessage ApplyHeaders(HubMessage message, Dictionary`2<string, string> headers);
    private static RawResult GetRawResult(JToken token);
    internal static JsonSerializerSettings CreateDefaultSerializerSettings();
}
internal static class Microsoft.AspNetCore.SignalR.Protocol.ProtocolHelper : object {
    internal static Type TryGetReturnType(IInvocationBinder binder, string invocationId);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.NewtonsoftJsonProtocolDependencyInjectionExtensions : object {
    [ExtensionAttribute]
public static TBuilder AddNewtonsoftJsonProtocol(TBuilder builder);
    [ExtensionAttribute]
public static TBuilder AddNewtonsoftJsonProtocol(TBuilder builder, Action`1<NewtonsoftJsonHubProtocolOptions> configure);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
