internal static class Microsoft.AspNetCore.Internal.JsonUtils : object {
    internal static JsonTextReader CreateJsonTextReader(TextReader textReader);
    internal static JsonTextWriter CreateJsonTextWriter(TextWriter textWriter);
    public static JObject GetObject(JToken token);
    public static T GetOptionalProperty(JObject json, string property, JTokenType expectedType, T defaultValue);
    public static T GetRequiredProperty(JObject json, string property, JTokenType expectedType);
    public static T GetValue(string property, JTokenType expectedType, JToken prop);
    public static string GetTokenString(JsonToken tokenType);
    public static void EnsureObjectStart(JsonTextReader reader);
    public static void EnsureArrayStart(JsonTextReader reader);
    public static Nullable`1<int> ReadAsInt32(JsonTextReader reader, string propertyName);
    public static string ReadAsString(JsonTextReader reader, string propertyName);
    public static bool CheckRead(JsonTextReader reader);
    public static bool ReadForType(JsonTextReader reader, Type type);
}
internal class Microsoft.AspNetCore.Internal.MemoryBufferWriter : Stream {
    [ThreadStaticAttribute]
private static MemoryBufferWriter _cachedInstance;
    private int _minimumSegmentSize;
    private int _bytesWritten;
    private List`1<CompletedBuffer> _completedSegments;
    private Byte[] _currentSegment;
    private int _position;
    public long Length { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Position { get; public set; }
    public MemoryBufferWriter(int minimumSegmentSize);
    public virtual long get_Length();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public static MemoryBufferWriter Get();
    public static void Return(MemoryBufferWriter writer);
    public void Reset();
    public sealed virtual void Advance(int count);
    public sealed virtual Memory`1<byte> GetMemory(int sizeHint);
    public sealed virtual Span`1<byte> GetSpan(int sizeHint);
    public void CopyTo(IBufferWriter`1<byte> destination);
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    private void EnsureCapacity(int sizeHint);
    private void AddSegment(int sizeHint);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Internal.MemoryBufferWriter/<CopyToSlowAsync>d__28")]
private Task CopyToSlowAsync(Stream destination);
    public Byte[] ToArray();
    public void CopyTo(Span`1<byte> span);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void WriteByte(byte value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.AspNetCore.SignalR.Redis.Internal.AckHandler : object {
    private ConcurrentDictionary`2<int, AckInfo> _acks;
    private Timer _timer;
    private TimeSpan _ackThreshold;
    private TimeSpan _ackInterval;
    private object _lock;
    private bool _disposed;
    public Task CreateAck(int id);
    public void TriggerAck(int id);
    private void CheckAcks();
    public sealed virtual void Dispose();
}
public enum Microsoft.AspNetCore.SignalR.Redis.Internal.GroupAction : Enum {
    public byte value__;
    public static GroupAction Add;
    public static GroupAction Remove;
}
internal static class Microsoft.AspNetCore.SignalR.Redis.Internal.MessagePackUtil : object {
    public static int ReadArrayHeader(ReadOnlyMemory`1& data);
    public static int ReadMapHeader(ReadOnlyMemory`1& data);
    public static string ReadString(ReadOnlyMemory`1& data);
    public static Byte[] ReadBytes(ReadOnlyMemory`1& data);
    public static int ReadInt32(ReadOnlyMemory`1& data);
    public static byte ReadByte(ReadOnlyMemory`1& data);
    private static ArraySegment`1<byte> GetArray(ReadOnlyMemory`1<byte> data);
}
internal class Microsoft.AspNetCore.SignalR.Redis.Internal.RedisChannels : object {
    private string _prefix;
    [CompilerGeneratedAttribute]
private string <All>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupManagement>k__BackingField;
    public string All { get; }
    public string GroupManagement { get; }
    public RedisChannels(string prefix);
    [CompilerGeneratedAttribute]
public string get_All();
    [CompilerGeneratedAttribute]
public string get_GroupManagement();
    public string Connection(string connectionId);
    public string Group(string groupName);
    public string User(string userId);
    public string Ack(string serverName);
}
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.SignalR.Redis.Internal.RedisGroupCommand : ValueType {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private GroupAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionId>k__BackingField;
    public int Id { get; }
    public string ServerName { get; }
    public GroupAction Action { get; }
    public string GroupName { get; }
    public string ConnectionId { get; }
    public RedisGroupCommand(int id, string serverName, GroupAction action, string groupName, string connectionId);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public string get_ServerName();
    [CompilerGeneratedAttribute]
public GroupAction get_Action();
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
public string get_ConnectionId();
}
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.SignalR.Redis.Internal.RedisInvocation : ValueType {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <ExcludedConnectionIds>k__BackingField;
    [CompilerGeneratedAttribute]
private SerializedHubMessage <Message>k__BackingField;
    public IReadOnlyList`1<string> ExcludedConnectionIds { get; }
    public SerializedHubMessage Message { get; }
    public RedisInvocation(SerializedHubMessage message, IReadOnlyList`1<string> excludedConnectionIds);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_ExcludedConnectionIds();
    [CompilerGeneratedAttribute]
public SerializedHubMessage get_Message();
    public static RedisInvocation Create(string target, Object[] arguments, IReadOnlyList`1<string> excludedConnectionIds);
}
internal static class Microsoft.AspNetCore.SignalR.Redis.Internal.RedisLog : object {
    private static Action`4<ILogger, string, string, Exception> _connectingToEndpoints;
    private static Action`2<ILogger, Exception> _connected;
    private static Action`3<ILogger, string, Exception> _subscribing;
    private static Action`3<ILogger, string, Exception> _receivedFromChannel;
    private static Action`3<ILogger, string, Exception> _publishToChannel;
    private static Action`3<ILogger, string, Exception> _unsubscribe;
    private static Action`2<ILogger, Exception> _notConnected;
    private static Action`2<ILogger, Exception> _connectionRestored;
    private static Action`2<ILogger, Exception> _connectionFailed;
    private static Action`2<ILogger, Exception> _failedWritingMessage;
    private static Action`2<ILogger, Exception> _internalMessageFailed;
    private static RedisLog();
    public static void ConnectingToEndpoints(ILogger logger, EndPointCollection endpoints, string serverName);
    public static void Connected(ILogger logger);
    public static void Subscribing(ILogger logger, string channelName);
    public static void ReceivedFromChannel(ILogger logger, string channelName);
    public static void PublishToChannel(ILogger logger, string channelName);
    public static void Unsubscribe(ILogger logger, string channelName);
    public static void NotConnected(ILogger logger);
    public static void ConnectionRestored(ILogger logger);
    public static void ConnectionFailed(ILogger logger, Exception exception);
    public static void FailedWritingMessage(ILogger logger, Exception exception);
    public static void InternalMessageFailed(ILogger logger, Exception exception);
    public static void ConnectionMultiplexerMessage(ILogger logger, string message);
}
public class Microsoft.AspNetCore.SignalR.Redis.Internal.RedisProtocol : object {
    private IReadOnlyList`1<IHubProtocol> _protocols;
    public RedisProtocol(IReadOnlyList`1<IHubProtocol> protocols);
    public Byte[] WriteInvocation(string methodName, Object[] args);
    public Byte[] WriteInvocation(string methodName, Object[] args, IReadOnlyList`1<string> excludedConnectionIds);
    public Byte[] WriteGroupCommand(RedisGroupCommand command);
    public Byte[] WriteAck(int messageId);
    public RedisInvocation ReadInvocation(ReadOnlyMemory`1<byte> data);
    public RedisGroupCommand ReadGroupCommand(ReadOnlyMemory`1<byte> data);
    public int ReadAck(ReadOnlyMemory`1<byte> data);
    private void WriteSerializedHubMessage(Stream stream, SerializedHubMessage message);
    public static SerializedHubMessage ReadSerializedHubMessage(ReadOnlyMemory`1& data);
    private static void ValidateArraySize(ReadOnlyMemory`1& data, int expectedLength, string messageType);
}
internal class Microsoft.AspNetCore.SignalR.Redis.Internal.RedisSubscriptionManager : object {
    private ConcurrentDictionary`2<string, HubConnectionStore> _subscriptions;
    private SemaphoreSlim _lock;
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Redis.Internal.RedisSubscriptionManager/<AddSubscriptionAsync>d__2")]
public Task AddSubscriptionAsync(string id, HubConnectionContext connection, Func`3<string, HubConnectionStore, Task> subscribeMethod);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Redis.Internal.RedisSubscriptionManager/<RemoveSubscriptionAsync>d__3")]
public Task RemoveSubscriptionAsync(string id, HubConnectionContext connection, Func`2<string, Task> unsubscribeMethod);
}
public class Microsoft.AspNetCore.SignalR.Redis.RedisHubLifetimeManager`1 : HubLifetimeManager`1<THub> {
    private HubConnectionStore _connections;
    private RedisSubscriptionManager _groups;
    private RedisSubscriptionManager _users;
    private IConnectionMultiplexer _redisServerConnection;
    private ISubscriber _bus;
    private ILogger _logger;
    private RedisOptions _options;
    private RedisChannels _channels;
    private string _serverName;
    private RedisProtocol _protocol;
    private SemaphoreSlim _connectionLock;
    private AckHandler _ackHandler;
    private int _internalId;
    public RedisHubLifetimeManager`1(ILogger`1<RedisHubLifetimeManager`1<THub>> logger, IOptions`1<RedisOptions> options, IHubProtocolResolver hubProtocolResolver);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Redis.RedisHubLifetimeManager`1/<OnConnectedAsync>d__14")]
public virtual Task OnConnectedAsync(HubConnectionContext connection);
    public virtual Task OnDisconnectedAsync(HubConnectionContext connection);
    public virtual Task SendAllAsync(string methodName, Object[] args, CancellationToken cancellationToken);
    public virtual Task SendAllExceptAsync(string methodName, Object[] args, IReadOnlyList`1<string> excludedConnectionIds, CancellationToken cancellationToken);
    public virtual Task SendConnectionAsync(string connectionId, string methodName, Object[] args, CancellationToken cancellationToken);
    public virtual Task SendGroupAsync(string groupName, string methodName, Object[] args, CancellationToken cancellationToken);
    public virtual Task SendGroupExceptAsync(string groupName, string methodName, Object[] args, IReadOnlyList`1<string> excludedConnectionIds, CancellationToken cancellationToken);
    public virtual Task SendUserAsync(string userId, string methodName, Object[] args, CancellationToken cancellationToken);
    public virtual Task AddToGroupAsync(string connectionId, string groupName, CancellationToken cancellationToken);
    public virtual Task RemoveFromGroupAsync(string connectionId, string groupName, CancellationToken cancellationToken);
    public virtual Task SendConnectionsAsync(IReadOnlyList`1<string> connectionIds, string methodName, Object[] args, CancellationToken cancellationToken);
    public virtual Task SendGroupsAsync(IReadOnlyList`1<string> groupNames, string methodName, Object[] args, CancellationToken cancellationToken);
    public virtual Task SendUsersAsync(IReadOnlyList`1<string> userIds, string methodName, Object[] args, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Redis.RedisHubLifetimeManager`1/<PublishAsync>d__27")]
private Task PublishAsync(string channel, Byte[] payload);
    private Task AddGroupAsyncCore(HubConnectionContext connection, string groupName);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Redis.RedisHubLifetimeManager`1/<RemoveGroupAsyncCore>d__29")]
private Task RemoveGroupAsyncCore(HubConnectionContext connection, string groupName);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Redis.RedisHubLifetimeManager`1/<SendGroupActionAndWaitForAck>d__30")]
private Task SendGroupActionAndWaitForAck(string connectionId, string groupName, GroupAction action);
    private Task RemoveUserAsync(HubConnectionContext connection);
    public sealed virtual void Dispose();
    private Task SubscribeToAll();
    private Task SubscribeToGroupManagementChannel();
    private Task SubscribeToAckChannel();
    private Task SubscribeToConnection(HubConnectionContext connection);
    private Task SubscribeToUser(HubConnectionContext connection);
    private Task SubscribeToGroupAsync(string groupChannel, HubConnectionStore groupConnections);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Redis.RedisHubLifetimeManager`1/<EnsureRedisServerConnection>d__39")]
private Task EnsureRedisServerConnection();
    private static string GenerateServerName();
    [CompilerGeneratedAttribute]
private Task <RemoveGroupAsyncCore>b__29_0(string channelName);
    [CompilerGeneratedAttribute]
private Task <RemoveUserAsync>b__31_0(string channelName);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Redis.RedisHubLifetimeManager`1/<<SubscribeToAll>b__33_0>d")]
[CompilerGeneratedAttribute]
private void <SubscribeToAll>b__33_0(RedisChannel c, RedisValue data);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Redis.RedisHubLifetimeManager`1/<<SubscribeToGroupManagementChannel>b__34_0>d")]
[CompilerGeneratedAttribute]
private void <SubscribeToGroupManagementChannel>b__34_0(RedisChannel c, RedisValue data);
    [CompilerGeneratedAttribute]
private void <SubscribeToAckChannel>b__35_0(RedisChannel c, RedisValue data);
    [CompilerGeneratedAttribute]
private Task <SubscribeToUser>b__37_0(string channelName, HubConnectionStore subscriptions);
    [CompilerGeneratedAttribute]
private void <EnsureRedisServerConnection>b__39_0(object _, ConnectionFailedEventArgs e);
    [CompilerGeneratedAttribute]
private void <EnsureRedisServerConnection>b__39_1(object _, ConnectionFailedEventArgs e);
}
public class Microsoft.AspNetCore.SignalR.Redis.RedisOptions : object {
    [CompilerGeneratedAttribute]
private ConfigurationOptions <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<TextWriter, Task`1<IConnectionMultiplexer>> <ConnectionFactory>k__BackingField;
    public ConfigurationOptions Configuration { get; public set; }
    public Func`2<TextWriter, Task`1<IConnectionMultiplexer>> ConnectionFactory { get; public set; }
    [CompilerGeneratedAttribute]
public ConfigurationOptions get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(ConfigurationOptions value);
    [CompilerGeneratedAttribute]
public Func`2<TextWriter, Task`1<IConnectionMultiplexer>> get_ConnectionFactory();
    [CompilerGeneratedAttribute]
public void set_ConnectionFactory(Func`2<TextWriter, Task`1<IConnectionMultiplexer>> value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.Redis.RedisOptions/<ConnectAsync>d__8")]
internal Task`1<IConnectionMultiplexer> ConnectAsync(TextWriter log);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.RedisDependencyInjectionExtensions : object {
    [ExtensionAttribute]
public static ISignalRServerBuilder AddRedis(ISignalRServerBuilder signalrBuilder);
    [ExtensionAttribute]
public static ISignalRServerBuilder AddRedis(ISignalRServerBuilder signalrBuilder, string redisConnectionString);
    [ExtensionAttribute]
public static ISignalRServerBuilder AddRedis(ISignalRServerBuilder signalrBuilder, Action`1<RedisOptions> configure);
    [ExtensionAttribute]
public static ISignalRServerBuilder AddRedis(ISignalRServerBuilder signalrBuilder, string redisConnectionString, Action`1<RedisOptions> configure);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
