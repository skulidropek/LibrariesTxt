[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Internal.MemoryBufferWriter : Stream {
    [ThreadStaticAttribute]
private static MemoryBufferWriter _cachedInstance;
    private int _minimumSegmentSize;
    private int _bytesWritten;
    private List`1<CompletedBuffer> _completedSegments;
    private Byte[] _currentSegment;
    private int _position;
    public long Length { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Position { get; public set; }
    public MemoryBufferWriter(int minimumSegmentSize);
    public virtual long get_Length();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public static MemoryBufferWriter Get();
    public static void Return(MemoryBufferWriter writer);
    public void Reset();
    public sealed virtual void Advance(int count);
    [NullableContextAttribute("0")]
public sealed virtual Memory`1<byte> GetMemory(int sizeHint);
    [NullableContextAttribute("0")]
public sealed virtual Span`1<byte> GetSpan(int sizeHint);
    public void CopyTo(IBufferWriter`1<byte> destination);
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    [MemberNotNullAttribute("_currentSegment")]
private void EnsureCapacity(int sizeHint);
    [MemberNotNullAttribute("_currentSegment")]
private void AddSegment(int sizeHint);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Internal.MemoryBufferWriter/<CopyToSlowAsync>d__28")]
private Task CopyToSlowAsync(Stream destination, CancellationToken cancellationToken);
    public Byte[] ToArray();
    [NullableContextAttribute("0")]
public void CopyTo(Span`1<byte> span);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void WriteByte(byte value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public virtual void Write(ReadOnlySpan`1<byte> span);
    public WrittenBuffers DetachAndReset();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Internal.SystemTextJsonExtensions : object {
    [ExtensionAttribute]
public static bool CheckRead(Utf8JsonReader& reader);
    [ExtensionAttribute]
public static void EnsureObjectStart(Utf8JsonReader& reader);
    [ExtensionAttribute]
public static string GetTokenString(Utf8JsonReader& reader);
    public static string GetTokenString(JsonTokenType tokenType);
    [ExtensionAttribute]
public static void EnsureArrayStart(Utf8JsonReader& reader);
    [ExtensionAttribute]
public static bool ReadAsBoolean(Utf8JsonReader& reader, string propertyName);
    [ExtensionAttribute]
public static string ReadAsString(Utf8JsonReader& reader, string propertyName);
    [ExtensionAttribute]
public static Nullable`1<int> ReadAsInt32(Utf8JsonReader& reader, string propertyName);
    [ExtensionAttribute]
public static Nullable`1<long> ReadAsInt64(Utf8JsonReader& reader, string propertyName);
}
internal static class Microsoft.AspNetCore.Shared.ArgumentNullThrowHelper : object {
    [NullableContextAttribute("2")]
public static void ThrowIfNull(object argument, string paramName);
}
internal static class Microsoft.AspNetCore.SignalR.Internal.CancellationTokenUtils : object {
    [NullableContextAttribute("2")]
internal static IDisposable CreateLinkedToken(CancellationToken token1, CancellationToken token2, CancellationToken& linkedToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.SignalR.Internal.ClientResultsManager : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<string, ValueTuple`4<Type, string, object, Action`2<object, CompletionMessage>>> _pendingInvocations;
    public Task`1<T> AddInvocation(string connectionId, string invocationId, CancellationToken cancellationToken);
    public void AddInvocation(string invocationId, ValueTuple`4<Type, string, object, Action`2<object, CompletionMessage>> invocationInfo);
    public void TryCompleteResult(string connectionId, CompletionMessage message);
    public Nullable`1<ValueTuple`4<Type, string, object, Action`2<object, CompletionMessage>>> RemoveInvocation(string invocationId);
    public bool TryGetType(string invocationId, Type& type);
    public sealed virtual Type GetReturnType(string invocationId);
    public sealed virtual IReadOnlyList`1<Type> GetParameterTypes(string methodName);
    public sealed virtual Type GetStreamItemType(string streamId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.SignalR.Internal.DefaultHubMessageSerializer : object {
    private List`1<IHubProtocol> _hubProtocols;
    public DefaultHubMessageSerializer(IHubProtocolResolver hubProtocolResolver, IList`1<string> globalSupportedProtocols, IList`1<string> hubSupportedProtocols);
    public IReadOnlyList`1<SerializedMessage> SerializeMessage(HubMessage message);
}
internal class Microsoft.AspNetCore.SignalR.StackExchangeRedis.Internal.AckHandler : object {
    private ConcurrentDictionary`2<int, AckInfo> _acks;
    private Timer _timer;
    private long _ackThreshold;
    private TimeSpan _ackInterval;
    private object _lock;
    private bool _disposed;
    [NullableContextAttribute("1")]
public Task CreateAck(int id);
    public void TriggerAck(int id);
    private void CheckAcks();
    public sealed virtual void Dispose();
}
internal enum Microsoft.AspNetCore.SignalR.StackExchangeRedis.Internal.GroupAction : Enum {
    public byte value__;
    public static GroupAction Add;
    public static GroupAction Remove;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.SignalR.StackExchangeRedis.Internal.RedisChannels : object {
    private string _prefix;
    [CompilerGeneratedAttribute]
private string <All>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupManagement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReturnResults>k__BackingField;
    public string All { get; }
    public string GroupManagement { get; }
    public string ReturnResults { get; }
    public RedisChannels(string prefix, string serverName);
    [CompilerGeneratedAttribute]
public string get_All();
    [CompilerGeneratedAttribute]
public string get_GroupManagement();
    [CompilerGeneratedAttribute]
public string get_ReturnResults();
    public string Connection(string connectionId);
    public string Group(string groupName);
    public string User(string userId);
    public string Ack(string serverName);
}
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.SignalR.StackExchangeRedis.Internal.RedisCompletion : ValueType {
    [CompilerGeneratedAttribute]
private ReadOnlySequence`1<byte> <CompletionMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProtocolName>k__BackingField;
    public ReadOnlySequence`1<byte> CompletionMessage { get; }
    [NullableAttribute("1")]
public string ProtocolName { get; }
    public RedisCompletion(string protocolName, ReadOnlySequence`1<byte> completionMessage);
    [CompilerGeneratedAttribute]
public ReadOnlySequence`1<byte> get_CompletionMessage();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ProtocolName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.SignalR.StackExchangeRedis.Internal.RedisGroupCommand : ValueType {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private GroupAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionId>k__BackingField;
    public int Id { get; }
    public string ServerName { get; }
    public GroupAction Action { get; }
    public string GroupName { get; }
    public string ConnectionId { get; }
    public RedisGroupCommand(int id, string serverName, GroupAction action, string groupName, string connectionId);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public string get_ServerName();
    [CompilerGeneratedAttribute]
public GroupAction get_Action();
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
public string get_ConnectionId();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.SignalR.StackExchangeRedis.Internal.RedisInvocation : ValueType {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <ExcludedConnectionIds>k__BackingField;
    [CompilerGeneratedAttribute]
private SerializedHubMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReturnChannel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InvocationId>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<string> ExcludedConnectionIds { get; }
    [NullableAttribute("1")]
public SerializedHubMessage Message { get; }
    public string ReturnChannel { get; }
    public string InvocationId { get; }
    public RedisInvocation(SerializedHubMessage message, IReadOnlyList`1<string> excludedConnectionIds, string invocationId, string returnChannel);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_ExcludedConnectionIds();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public SerializedHubMessage get_Message();
    [CompilerGeneratedAttribute]
public string get_ReturnChannel();
    [CompilerGeneratedAttribute]
public string get_InvocationId();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.SignalR.StackExchangeRedis.Internal.RedisLog : object {
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`4<ILogger, string, string, Exception> __ConnectingToEndpointsCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`2<ILogger, Exception> __ConnectedCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`3<ILogger, string, Exception> __SubscribingCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`3<ILogger, string, Exception> __ReceivedFromChannelCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`3<ILogger, string, Exception> __PublishToChannelCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`3<ILogger, string, Exception> __UnsubscribeCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`2<ILogger, Exception> __NotConnectedCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`2<ILogger, Exception> __ConnectionRestoredCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`2<ILogger, Exception> __ConnectionFailedCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`2<ILogger, Exception> __FailedWritingMessageCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`2<ILogger, Exception> __InternalMessageFailedCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`3<ILogger, string, Exception> __MismatchedServersCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`3<ILogger, string, Exception> __ErrorForwardingResultCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`2<ILogger, Exception> __ErrorConnectingCallback;
    [GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`3<ILogger, string, Exception> __ErrorParsingResultCallback;
    private static RedisLog();
    public static void ConnectingToEndpoints(ILogger logger, EndPointCollection endpoints, string serverName);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static void ConnectingToEndpoints(ILogger logger, string endpoints, string serverName);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void Connected(ILogger logger);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void Subscribing(ILogger logger, string channel);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void ReceivedFromChannel(ILogger logger, string channel);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void PublishToChannel(ILogger logger, string channel);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void Unsubscribe(ILogger logger, string channel);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void NotConnected(ILogger logger);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void ConnectionRestored(ILogger logger);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void ConnectionFailed(ILogger logger, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void FailedWritingMessage(ILogger logger, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void InternalMessageFailed(ILogger logger, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void MismatchedServers(ILogger logger, string hubProtocol);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void ErrorForwardingResult(ILogger logger, string invocationId, Exception ex);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void ErrorConnecting(ILogger logger, Exception ex);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
public static void ErrorParsingResult(ILogger logger, string hubProtocol, Exception ex);
    public static void ConnectionMultiplexerMessage(ILogger logger, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.SignalR.StackExchangeRedis.Internal.RedisProtocol : object {
    private DefaultHubMessageSerializer _messageSerializer;
    public RedisProtocol(DefaultHubMessageSerializer messageSerializer);
    public Byte[] WriteInvocation(string methodName, Object[] args, string invocationId, IReadOnlyList`1<string> excludedConnectionIds, string returnChannel);
    public static Byte[] WriteGroupCommand(RedisGroupCommand command);
    public static Byte[] WriteAck(int messageId);
    public static Byte[] WriteCompletionMessage(MemoryBufferWriter writer, string protocolName);
    [NullableContextAttribute("0")]
public static RedisInvocation ReadInvocation(ReadOnlyMemory`1<byte> data);
    [NullableContextAttribute("0")]
public static RedisGroupCommand ReadGroupCommand(ReadOnlyMemory`1<byte> data);
    [NullableContextAttribute("0")]
public static int ReadAck(ReadOnlyMemory`1<byte> data);
    private void WriteHubMessage(MessagePackWriter& writer, HubMessage message);
    public static SerializedHubMessage ReadSerializedHubMessage(MessagePackReader& reader);
    [NullableContextAttribute("0")]
public static RedisCompletion ReadCompletion(ReadOnlyMemory`1<byte> data);
    private static int ValidateArraySize(MessagePackReader& reader, int expectedLength, string messageType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.SignalR.StackExchangeRedis.Internal.RedisSubscriptionManager : object {
    private ConcurrentDictionary`2<string, HubConnectionStore> _subscriptions;
    private SemaphoreSlim _lock;
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.StackExchangeRedis.Internal.RedisSubscriptionManager/<AddSubscriptionAsync>d__2")]
public Task AddSubscriptionAsync(string id, HubConnectionContext connection, Func`3<string, HubConnectionStore, Task> subscribeMethod);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.StackExchangeRedis.Internal.RedisSubscriptionManager/<RemoveSubscriptionAsync>d__3")]
public Task RemoveSubscriptionAsync(string id, HubConnectionContext connection, object state, Func`3<object, string, Task> unsubscribeMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager`1 : HubLifetimeManager`1<THub> {
    private HubConnectionStore _connections;
    private RedisSubscriptionManager _groups;
    private RedisSubscriptionManager _users;
    private IConnectionMultiplexer _redisServerConnection;
    private ISubscriber _bus;
    private ILogger _logger;
    private RedisOptions _options;
    private RedisChannels _channels;
    private string _serverName;
    private RedisProtocol _protocol;
    private SemaphoreSlim _connectionLock;
    private IHubProtocolResolver _hubProtocolResolver;
    private ClientResultsManager _clientResultsManager;
    private bool _redisConnectErrorLogged;
    private AckHandler _ackHandler;
    private int _internalAckId;
    public RedisHubLifetimeManager`1(ILogger`1<RedisHubLifetimeManager`1<THub>> logger, IOptions`1<RedisOptions> options, IHubProtocolResolver hubProtocolResolver);
    public RedisHubLifetimeManager`1(ILogger`1<RedisHubLifetimeManager`1<THub>> logger, IOptions`1<RedisOptions> options, IHubProtocolResolver hubProtocolResolver, IOptions`1<HubOptions> globalHubOptions, IOptions`1<HubOptions`1<THub>> hubOptions);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager`1/<OnConnectedAsync>d__18")]
public virtual Task OnConnectedAsync(HubConnectionContext connection);
    public virtual Task OnDisconnectedAsync(HubConnectionContext connection);
    public virtual Task SendAllAsync(string methodName, Object[] args, CancellationToken cancellationToken);
    public virtual Task SendAllExceptAsync(string methodName, Object[] args, IReadOnlyList`1<string> excludedConnectionIds, CancellationToken cancellationToken);
    public virtual Task SendConnectionAsync(string connectionId, string methodName, Object[] args, CancellationToken cancellationToken);
    public virtual Task SendGroupAsync(string groupName, string methodName, Object[] args, CancellationToken cancellationToken);
    public virtual Task SendGroupExceptAsync(string groupName, string methodName, Object[] args, IReadOnlyList`1<string> excludedConnectionIds, CancellationToken cancellationToken);
    public virtual Task SendUserAsync(string userId, string methodName, Object[] args, CancellationToken cancellationToken);
    public virtual Task AddToGroupAsync(string connectionId, string groupName, CancellationToken cancellationToken);
    public virtual Task RemoveFromGroupAsync(string connectionId, string groupName, CancellationToken cancellationToken);
    public virtual Task SendConnectionsAsync(IReadOnlyList`1<string> connectionIds, string methodName, Object[] args, CancellationToken cancellationToken);
    public virtual Task SendGroupsAsync(IReadOnlyList`1<string> groupNames, string methodName, Object[] args, CancellationToken cancellationToken);
    public virtual Task SendUsersAsync(IReadOnlyList`1<string> userIds, string methodName, Object[] args, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager`1/<PublishAsync>d__31")]
private Task`1<long> PublishAsync(string channel, Byte[] payload);
    private Task AddGroupAsyncCore(HubConnectionContext connection, string groupName);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager`1/<RemoveGroupAsyncCore>d__33")]
private Task RemoveGroupAsyncCore(HubConnectionContext connection, string groupName);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager`1/<SendGroupActionAndWaitForAck>d__34")]
private Task SendGroupActionAndWaitForAck(string connectionId, string groupName, GroupAction action);
    private Task RemoveUserAsync(HubConnectionContext connection);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager`1/<InvokeConnectionAsync>d__37`1")]
public virtual Task`1<T> InvokeConnectionAsync(string connectionId, string methodName, Object[] args, CancellationToken cancellationToken);
    public virtual Task SetConnectionResultAsync(string connectionId, CompletionMessage result);
    public virtual bool TryGetReturnType(string invocationId, Type& type);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager`1/<SubscribeToAll>d__40")]
private Task SubscribeToAll();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager`1/<SubscribeToGroupManagementChannel>d__41")]
private Task SubscribeToGroupManagementChannel();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager`1/<SubscribeToAckChannel>d__42")]
private Task SubscribeToAckChannel();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager`1/<SubscribeToConnection>d__43")]
private Task SubscribeToConnection(HubConnectionContext connection);
    private Task SubscribeToUser(HubConnectionContext connection);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager`1/<SubscribeToGroupAsync>d__45")]
private Task SubscribeToGroupAsync(string groupChannel, HubConnectionStore groupConnections);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager`1/<SubscribeToReturnResultsAsync>d__46")]
private Task SubscribeToReturnResultsAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager`1/<EnsureRedisServerConnection>d__48")]
private Task EnsureRedisServerConnection();
    private static string GenerateServerName();
    private static string GenerateInvocationId();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager`1/<<SubscribeToAll>b__40_0>d")]
[CompilerGeneratedAttribute]
private Task <SubscribeToAll>b__40_0(ChannelMessage channelMessage);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager`1/<<SubscribeToGroupManagementChannel>b__41_0>d")]
[CompilerGeneratedAttribute]
private Task <SubscribeToGroupManagementChannel>b__41_0(ChannelMessage channelMessage);
    [CompilerGeneratedAttribute]
private void <SubscribeToAckChannel>b__42_0(ChannelMessage channelMessage);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager`1/<<SubscribeToUser>b__44_0>d")]
[CompilerGeneratedAttribute]
private Task <SubscribeToUser>b__44_0(string channelName, HubConnectionStore subscriptions);
    [CompilerGeneratedAttribute]
private void <SubscribeToReturnResultsAsync>b__46_0(ChannelMessage channelMessage);
    [CompilerGeneratedAttribute]
private void <EnsureRedisServerConnection>b__48_0(object _, ConnectionFailedEventArgs e);
    [CompilerGeneratedAttribute]
private void <EnsureRedisServerConnection>b__48_1(object _, ConnectionFailedEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisOptions : object {
    [CompilerGeneratedAttribute]
private ConfigurationOptions <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<TextWriter, Task`1<IConnectionMultiplexer>> <ConnectionFactory>k__BackingField;
    public ConfigurationOptions Configuration { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<TextWriter, Task`1<IConnectionMultiplexer>> ConnectionFactory { get; public set; }
    [CompilerGeneratedAttribute]
public ConfigurationOptions get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(ConfigurationOptions value);
    [CompilerGeneratedAttribute]
public Func`2<TextWriter, Task`1<IConnectionMultiplexer>> get_ConnectionFactory();
    [CompilerGeneratedAttribute]
public void set_ConnectionFactory(Func`2<TextWriter, Task`1<IConnectionMultiplexer>> value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisOptions/<ConnectAsync>d__8")]
internal Task`1<IConnectionMultiplexer> ConnectAsync(TextWriter log);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.StackExchangeRedisDependencyInjectionExtensions : object {
    [ExtensionAttribute]
public static ISignalRServerBuilder AddStackExchangeRedis(ISignalRServerBuilder signalrBuilder);
    [ExtensionAttribute]
public static ISignalRServerBuilder AddStackExchangeRedis(ISignalRServerBuilder signalrBuilder, string redisConnectionString);
    [ExtensionAttribute]
public static ISignalRServerBuilder AddStackExchangeRedis(ISignalRServerBuilder signalrBuilder, Action`1<RedisOptions> configure);
    [ExtensionAttribute]
public static ISignalRServerBuilder AddStackExchangeRedis(ISignalRServerBuilder signalrBuilder, string redisConnectionString, Action`1<RedisOptions> configure);
}
internal static class Microsoft.Extensions.Internal.NonCapturingTimer : object {
    [NullableContextAttribute("1")]
public static Timer Create(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);
}
