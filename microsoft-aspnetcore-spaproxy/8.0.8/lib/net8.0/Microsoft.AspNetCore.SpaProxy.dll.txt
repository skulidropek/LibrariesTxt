internal class Microsoft.AspNetCore.SpaProxy.SpaDevelopmentServerOptions : object {
    [CompilerGeneratedAttribute]
private string <ServerUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedirectUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LaunchCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxTimeoutInSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepRunning>k__BackingField;
    public string ServerUrl { get; public set; }
    public string RedirectUrl { get; public set; }
    public string LaunchCommand { get; public set; }
    public int MaxTimeoutInSeconds { get; public set; }
    public TimeSpan MaxTimeout { get; }
    public string WorkingDirectory { get; public set; }
    public bool KeepRunning { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ServerUrl();
    [CompilerGeneratedAttribute]
public void set_ServerUrl(string value);
    [CompilerGeneratedAttribute]
public string get_RedirectUrl();
    [CompilerGeneratedAttribute]
public void set_RedirectUrl(string value);
    internal string GetRedirectUrl();
    [CompilerGeneratedAttribute]
public string get_LaunchCommand();
    [CompilerGeneratedAttribute]
public void set_LaunchCommand(string value);
    [CompilerGeneratedAttribute]
public int get_MaxTimeoutInSeconds();
    [CompilerGeneratedAttribute]
public void set_MaxTimeoutInSeconds(int value);
    public TimeSpan get_MaxTimeout();
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_KeepRunning();
    [CompilerGeneratedAttribute]
public void set_KeepRunning(bool value);
}
internal class Microsoft.AspNetCore.SpaProxy.SpaHostingStartup : object {
    public sealed virtual void Configure(IWebHostBuilder builder);
    [CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026")]
internal static void <Configure>g__ConfigureOptions|0_1(IServiceCollection services, IConfigurationSection section);
}
internal class Microsoft.AspNetCore.SpaProxy.SpaProxyLaunchManager : object {
    private SpaDevelopmentServerOptions _options;
    private ILogger`1<SpaProxyLaunchManager> _logger;
    private object _lock;
    private Process _spaProcess;
    private bool _disposedValue;
    private Task _launchTask;
    public SpaProxyLaunchManager(ILogger`1<SpaProxyLaunchManager> logger, IHostApplicationLifetime appLifetime, IOptions`1<SpaDevelopmentServerOptions> options);
    public void StartInBackground(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SpaProxy.SpaProxyLaunchManager/<IsSpaProxyRunning>d__8")]
public Task`1<bool> IsSpaProxyRunning(CancellationToken cancellationToken);
    private static HttpClient CreateHttpClient();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SpaProxy.SpaProxyLaunchManager/<ProbeSpaDevelopmentServerUrl>d__10")]
private Task`1<bool> ProbeSpaDevelopmentServerUrl(HttpClient httpClient, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SpaProxy.SpaProxyLaunchManager/<StartSpaProcessAndProbeForLiveness>d__11")]
private Task StartSpaProcessAndProbeForLiveness(CancellationToken cancellationToken);
    private void LaunchDevelopmentProxy();
    private void LaunchStopScriptWindows(int spaProcessId);
    private void LaunchStopScriptMacOS(int spaProcessId);
    public Task StopAsync();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SpaProxy.SpaProxyLaunchManager/<<StartInBackground>g__UpdateStatus|7_0>d")]
[CompilerGeneratedAttribute]
private Task <StartInBackground>g__UpdateStatus|7_0(Task launchTask);
}
internal class Microsoft.AspNetCore.SpaProxy.SpaProxyMiddleware : object {
    private RequestDelegate _next;
    private SpaProxyLaunchManager _spaProxyLaunchManager;
    private IOptions`1<SpaDevelopmentServerOptions> _options;
    private IHostApplicationLifetime _hostLifetime;
    private ILogger`1<SpaProxyMiddleware> _logger;
    public SpaProxyMiddleware(RequestDelegate next, SpaProxyLaunchManager spaProxyLaunchManager, IOptions`1<SpaDevelopmentServerOptions> options, IHostApplicationLifetime hostLifetime, ILogger`1<SpaProxyMiddleware> logger);
    public Task Invoke(HttpContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SpaProxy.SpaProxyMiddleware/<InvokeCore>d__7")]
private Task InvokeCore(HttpContext context);
    [CompilerGeneratedAttribute]
internal static string <InvokeCore>g__GenerateSpaLaunchPage|7_0(SpaDevelopmentServerOptions options);
}
internal class Microsoft.AspNetCore.SpaProxy.SpaProxyStartupFilter : object {
    private SpaProxyLaunchManager _spaProxyLaunchManager;
    private IHostApplicationLifetime _hostLifetime;
    private ILogger`1<SpaProxyStartupFilter> _logger;
    public SpaProxyStartupFilter(SpaProxyLaunchManager spaProxyLaunchManager, IHostApplicationLifetime hostLifetime, ILogger`1<SpaProxyStartupFilter> logger);
    public sealed virtual Action`1<IApplicationBuilder> Configure(Action`1<IApplicationBuilder> next);
}
