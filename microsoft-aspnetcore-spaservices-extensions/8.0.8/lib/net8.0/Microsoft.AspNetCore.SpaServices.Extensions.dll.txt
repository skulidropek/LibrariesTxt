[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.SpaApplicationBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void UseSpa(IApplicationBuilder app, Action`1<ISpaBuilder> configuration);
}
[ObsoleteAttribute("Prerendering is no longer supported out of box")]
public class Microsoft.AspNetCore.Builder.SpaPrerenderingOptions : object {
    [CompilerGeneratedAttribute]
private ISpaPrerendererBuilder <BootModuleBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BootModulePath>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExcludeUrls>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<HttpContext, IDictionary`2<string, object>> <SupplyData>k__BackingField;
    public ISpaPrerendererBuilder BootModuleBuilder { get; public set; }
    public string BootModulePath { get; public set; }
    public String[] ExcludeUrls { get; public set; }
    public Action`2<HttpContext, IDictionary`2<string, object>> SupplyData { get; public set; }
    [CompilerGeneratedAttribute]
public ISpaPrerendererBuilder get_BootModuleBuilder();
    [CompilerGeneratedAttribute]
public void set_BootModuleBuilder(ISpaPrerendererBuilder value);
    [CompilerGeneratedAttribute]
public string get_BootModulePath();
    [CompilerGeneratedAttribute]
public void set_BootModulePath(string value);
    [CompilerGeneratedAttribute]
public String[] get_ExcludeUrls();
    [CompilerGeneratedAttribute]
public void set_ExcludeUrls(String[] value);
    [CompilerGeneratedAttribute]
public Action`2<HttpContext, IDictionary`2<string, object>> get_SupplyData();
    [CompilerGeneratedAttribute]
public void set_SupplyData(Action`2<HttpContext, IDictionary`2<string, object>> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.SpaProxyingExtensions : object {
    [ExtensionAttribute]
public static void UseProxyToSpaDevelopmentServer(ISpaBuilder spaBuilder, string baseUri);
    [ExtensionAttribute]
public static void UseProxyToSpaDevelopmentServer(ISpaBuilder spaBuilder, Uri baseUri);
    [ExtensionAttribute]
public static void UseProxyToSpaDevelopmentServer(ISpaBuilder spaBuilder, Func`1<Task`1<Uri>> baseUriTaskFactory);
    private static CancellationToken GetStoppingToken(IApplicationBuilder appBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.NodeServices.Npm.NodeScriptRunner : object {
    private Process _npmProcess;
    [CompilerGeneratedAttribute]
private EventedStreamReader <StdOut>k__BackingField;
    [CompilerGeneratedAttribute]
private EventedStreamReader <StdErr>k__BackingField;
    private static Regex AnsiColorRegex;
    public EventedStreamReader StdOut { get; }
    public EventedStreamReader StdErr { get; }
    public NodeScriptRunner(string workingDirectory, string scriptName, string arguments, IDictionary`2<string, string> envVars, string pkgManagerCommand, DiagnosticSource diagnosticSource, CancellationToken applicationStoppingToken);
    private static NodeScriptRunner();
    [CompilerGeneratedAttribute]
public EventedStreamReader get_StdOut();
    [CompilerGeneratedAttribute]
public EventedStreamReader get_StdErr();
    public void AttachToLogger(ILogger logger);
    private static string StripAnsiColors(string line);
    private static Process LaunchNodeProcess(ProcessStartInfo startInfo, string commandName);
    private sealed virtual override void System.IDisposable.Dispose();
    [CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026")]
internal static void <.ctor>g__WriteDiagnosticEvent|8_0(DiagnosticSource diagnosticSource, string name, TValue value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.NodeServices.Util.EventedStreamReader : object {
    [CompilerGeneratedAttribute]
private OnReceivedChunkHandler OnReceivedChunk;
    [CompilerGeneratedAttribute]
private OnReceivedLineHandler OnReceivedLine;
    [CompilerGeneratedAttribute]
private OnStreamClosedHandler OnStreamClosed;
    private StreamReader _streamReader;
    private StringBuilder _linesBuffer;
    [NullableContextAttribute("1")]
public EventedStreamReader(StreamReader streamReader);
    [CompilerGeneratedAttribute]
public void add_OnReceivedChunk(OnReceivedChunkHandler value);
    [CompilerGeneratedAttribute]
public void remove_OnReceivedChunk(OnReceivedChunkHandler value);
    [CompilerGeneratedAttribute]
public void add_OnReceivedLine(OnReceivedLineHandler value);
    [CompilerGeneratedAttribute]
public void remove_OnReceivedLine(OnReceivedLineHandler value);
    [CompilerGeneratedAttribute]
public void add_OnStreamClosed(OnStreamClosedHandler value);
    [CompilerGeneratedAttribute]
public void remove_OnStreamClosed(OnStreamClosedHandler value);
    [NullableContextAttribute("1")]
public Task`1<Match> WaitForMatch(Regex regex);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.NodeServices.Util.EventedStreamReader/<Run>d__16")]
private Task Run();
    private void OnChunk(ArraySegment`1<char> chunk);
    private void OnCompleteLine(string line);
    private void OnClosed();
}
internal class Microsoft.AspNetCore.NodeServices.Util.EventedStreamStringReader : object {
    private EventedStreamReader _eventedStreamReader;
    private bool _isDisposed;
    private StringBuilder _stringBuilder;
    [NullableContextAttribute("1")]
public EventedStreamStringReader(EventedStreamReader eventedStreamReader);
    [NullableContextAttribute("1")]
public string ReadAsString();
    private void OnReceivedLine(string line);
    public sealed virtual void Dispose();
}
[ObsoleteAttribute("Prerendering is no longer supported out of box")]
public class Microsoft.AspNetCore.SpaServices.AngularCli.AngularCliBuilder : object {
    private static TimeSpan RegexMatchTimeout;
    private string _scriptName;
    [NullableContextAttribute("1")]
public AngularCliBuilder(string npmScript);
    private static AngularCliBuilder();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.SpaServices.AngularCli.AngularCliBuilder/<Build>d__3")]
public sealed virtual Task Build(ISpaBuilder spaBuilder);
}
internal static class Microsoft.AspNetCore.SpaServices.AngularCli.AngularCliMiddleware : object {
    private static string LogCategoryName;
    private static TimeSpan RegexMatchTimeout;
    private static AngularCliMiddleware();
    [NullableContextAttribute("1")]
public static void Attach(ISpaBuilder spaBuilder, string scriptName);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SpaServices.AngularCli.AngularCliMiddleware/<StartAngularCliServerAsync>d__3")]
private static Task`1<Uri> StartAngularCliServerAsync(string sourcePath, string scriptName, string pkgManagerCommand, int portNumber, ILogger logger, DiagnosticSource diagnosticSource, CancellationToken applicationStoppingToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SpaServices.AngularCli.AngularCliMiddleware/<WaitForAngularCliServerToAcceptRequests>d__4")]
private static Task WaitForAngularCliServerToAcceptRequests(Uri cliServerUri);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.SpaServices.AngularCli.AngularCliMiddlewareExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void UseAngularCliServer(ISpaBuilder spaBuilder, string npmScript);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.SpaServices.DefaultSpaBuilder : object {
    [CompilerGeneratedAttribute]
private IApplicationBuilder <ApplicationBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private SpaOptions <Options>k__BackingField;
    public IApplicationBuilder ApplicationBuilder { get; }
    public SpaOptions Options { get; }
    public DefaultSpaBuilder(IApplicationBuilder applicationBuilder, SpaOptions options);
    [CompilerGeneratedAttribute]
public sealed virtual IApplicationBuilder get_ApplicationBuilder();
    [CompilerGeneratedAttribute]
public sealed virtual SpaOptions get_Options();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.SpaServices.Extensions.Proxy.ConditionalProxyMiddleware : object {
    private RequestDelegate _next;
    private Task`1<Uri> _baseUriTask;
    private string _pathPrefix;
    private bool _pathPrefixIsRoot;
    private HttpClient _httpClient;
    private CancellationToken _applicationStoppingToken;
    public ConditionalProxyMiddleware(RequestDelegate next, string pathPrefix, TimeSpan requestTimeout, Task`1<Uri> baseUriTask, IHostApplicationLifetime applicationLifetime);
    public Task Invoke(HttpContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SpaServices.Extensions.Proxy.ConditionalProxyMiddleware/<InvokeCore>d__8")]
private Task InvokeCore(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.SpaServices.Extensions.Proxy.SpaProxy : object {
    private static int DefaultWebSocketBufferSize;
    private static int StreamCopyBufferSize;
    private static HashSet`1<string> NotForwardedHttpHeaders;
    private static HashSet`1<string> NotForwardedWebSocketHeaders;
    private static HashSet`1<string> InvalidH2H3Headers;
    private static SpaProxy();
    public static HttpClient CreateHttpClientForProxy(TimeSpan requestTimeout);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SpaServices.Extensions.Proxy.SpaProxy/<PerformProxyRequest>d__6")]
public static Task`1<bool> PerformProxyRequest(HttpContext context, HttpClient httpClient, Task`1<Uri> baseUriTask, CancellationToken applicationStoppingToken, bool proxy404s);
    private static HttpRequestMessage CreateProxyHttpRequest(HttpContext context, Uri uri);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SpaServices.Extensions.Proxy.SpaProxy/<CopyProxyHttpResponse>d__8")]
private static Task CopyProxyHttpResponse(HttpContext context, HttpResponseMessage responseMessage, CancellationToken cancellationToken);
    private static Uri ToWebSocketScheme(Uri uri);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SpaServices.Extensions.Proxy.SpaProxy/<AcceptProxyWebSocketRequest>d__10")]
private static Task`1<bool> AcceptProxyWebSocketRequest(HttpContext context, Uri destinationUri, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SpaServices.Extensions.Proxy.SpaProxy/<PumpWebSocket>d__11")]
private static Task PumpWebSocket(WebSocket source, WebSocket destination, int bufferSize, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.SpaServices.Extensions.Util.TaskTimeoutExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SpaServices.Extensions.Util.TaskTimeoutExtensions/<WithTimeout>d__0")]
[ExtensionAttribute]
public static Task WithTimeout(Task task, TimeSpan timeoutDelay, string message);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SpaServices.Extensions.Util.TaskTimeoutExtensions/<WithTimeout>d__1`1")]
[ExtensionAttribute]
public static Task`1<T> WithTimeout(Task`1<T> task, TimeSpan timeoutDelay, string message);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.SpaServices.ISpaBuilder {
    public IApplicationBuilder ApplicationBuilder { get; }
    public SpaOptions Options { get; }
    public abstract virtual IApplicationBuilder get_ApplicationBuilder();
    public abstract virtual SpaOptions get_Options();
}
[NullableContextAttribute("1")]
[ObsoleteAttribute("Prerendering is no longer supported out of box")]
public interface Microsoft.AspNetCore.SpaServices.Prerendering.ISpaPrerendererBuilder {
    public abstract virtual Task Build(ISpaBuilder spaBuilder);
}
internal static class Microsoft.AspNetCore.SpaServices.ReactDevelopmentServer.ReactDevelopmentServerMiddleware : object {
    private static string LogCategoryName;
    private static TimeSpan RegexMatchTimeout;
    private static ReactDevelopmentServerMiddleware();
    [NullableContextAttribute("1")]
public static void Attach(ISpaBuilder spaBuilder, string scriptName);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SpaServices.ReactDevelopmentServer.ReactDevelopmentServerMiddleware/<StartCreateReactAppServerAsync>d__3")]
private static Task`1<int> StartCreateReactAppServerAsync(string sourcePath, string scriptName, string pkgManagerCommand, int portNumber, ILogger logger, DiagnosticSource diagnosticSource, CancellationToken applicationStoppingToken);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.SpaServices.ReactDevelopmentServer.ReactDevelopmentServerMiddlewareExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void UseReactDevelopmentServer(ISpaBuilder spaBuilder, string npmScript);
}
internal class Microsoft.AspNetCore.SpaServices.SpaDefaultPageMiddleware : object {
    [NullableContextAttribute("1")]
public static void Attach(ISpaBuilder spaBuilder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.SpaServices.SpaOptions : object {
    private PathString _defaultPage;
    private string _packageManagerCommand;
    [CompilerGeneratedAttribute]
private StaticFileOptions <DefaultPageStaticFileOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourcePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DevServerPort>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <StartupTimeout>k__BackingField;
    public PathString DefaultPage { get; public set; }
    public StaticFileOptions DefaultPageStaticFileOptions { get; public set; }
    public string SourcePath { get; public set; }
    public int DevServerPort { get; public set; }
    [NullableAttribute("1")]
public string PackageManagerCommand { get; public set; }
    public TimeSpan StartupTimeout { get; public set; }
    [NullableContextAttribute("1")]
internal SpaOptions(SpaOptions copyFromOptions);
    public PathString get_DefaultPage();
    public void set_DefaultPage(PathString value);
    [CompilerGeneratedAttribute]
public StaticFileOptions get_DefaultPageStaticFileOptions();
    [CompilerGeneratedAttribute]
public void set_DefaultPageStaticFileOptions(StaticFileOptions value);
    [CompilerGeneratedAttribute]
public string get_SourcePath();
    [CompilerGeneratedAttribute]
public void set_SourcePath(string value);
    [CompilerGeneratedAttribute]
public int get_DevServerPort();
    [CompilerGeneratedAttribute]
public void set_DevServerPort(int value);
    [NullableContextAttribute("1")]
public string get_PackageManagerCommand();
    [NullableContextAttribute("1")]
public void set_PackageManagerCommand(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_StartupTimeout();
    [CompilerGeneratedAttribute]
public void set_StartupTimeout(TimeSpan value);
}
internal class Microsoft.AspNetCore.SpaServices.StaticFiles.DefaultSpaStaticFileProvider : object {
    private IFileProvider _fileProvider;
    [NullableAttribute("2")]
public IFileProvider FileProvider { get; }
    [NullableContextAttribute("1")]
public DefaultSpaStaticFileProvider(IServiceProvider serviceProvider, SpaStaticFilesOptions options);
    [NullableContextAttribute("2")]
public sealed virtual IFileProvider get_FileProvider();
}
[NullableContextAttribute("2")]
public interface Microsoft.AspNetCore.SpaServices.StaticFiles.ISpaStaticFileProvider {
    public IFileProvider FileProvider { get; }
    public abstract virtual IFileProvider get_FileProvider();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.SpaServices.StaticFiles.SpaStaticFilesOptions : object {
    [CompilerGeneratedAttribute]
private string <RootPath>k__BackingField;
    public string RootPath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RootPath();
    [CompilerGeneratedAttribute]
public void set_RootPath(string value);
}
internal static class Microsoft.AspNetCore.SpaServices.Util.LoggerFinder : object {
    [NullableContextAttribute("1")]
public static ILogger GetOrCreateLogger(IApplicationBuilder appBuilder, string logCategoryName);
}
internal static class Microsoft.AspNetCore.SpaServices.Util.TcpPortFinder : object {
    public static int FindAvailablePort();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.SpaStaticFilesExtensions : object {
    [ExtensionAttribute]
public static void AddSpaStaticFiles(IServiceCollection services, Action`1<SpaStaticFilesOptions> configuration);
    [ExtensionAttribute]
public static void UseSpaStaticFiles(IApplicationBuilder applicationBuilder);
    [ExtensionAttribute]
public static void UseSpaStaticFiles(IApplicationBuilder applicationBuilder, StaticFileOptions options);
    [ExtensionAttribute]
internal static void UseSpaStaticFilesInternal(IApplicationBuilder app, StaticFileOptions staticFileOptions, bool allowFallbackOnServingWebRootFiles);
    private static bool ShouldServeStaticFiles(IApplicationBuilder app, bool allowFallbackOnServingWebRootFiles, IFileProvider& fileProviderOrDefault);
}
