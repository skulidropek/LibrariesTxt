public class Microsoft.Azure.ActiveDirectory.GraphClient.ActiveDirectoryClient : object {
    private static string _path;
    private UserFetcher _me;
    private IDirectoryObjectCollection _deletedDirectoryObjects;
    private IDirectoryObjectCollection _directoryObjects;
    private IDomainCollection _domains;
    private IDomainDnsRecordCollection _domainDnsRecords;
    private ILicenseDetailCollection _licenseDetails;
    private IOAuth2PermissionGrantCollection _oauth2PermissionGrants;
    private ISubscribedSkuCollection _subscribedSkus;
    private ITrustedCAsForPasswordlessAuthCollection _trustedCAsForPasswordlessAuth;
    private IUserCollection _users;
    private IApplicationCollection _applications;
    private IContactCollection _contacts;
    private IGroupCollection _groups;
    private IDirectoryRoleCollection _directoryRoles;
    private IServicePrincipalCollection _servicePrincipals;
    private ITenantDetailCollection _tenantDetails;
    private IDeviceCollection _devices;
    [CompilerGeneratedAttribute]
private DataServiceContextWrapper <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private DataServiceContextWrapper <meContext>k__BackingField;
    public IUserFetcher Me { get; }
    public IServicePrincipalCollection ServicePrincipalsByAppId { get; }
    public DataServiceContextWrapper Context { get; private set; }
    private DataServiceContextWrapper meContext { get; private set; }
    public IDirectoryObjectCollection DeletedDirectoryObjects { get; }
    public IDirectoryObjectCollection DirectoryObjects { get; }
    public IDomainCollection Domains { get; }
    public IDomainDnsRecordCollection DomainDnsRecords { get; }
    public ILicenseDetailCollection LicenseDetails { get; }
    public IOAuth2PermissionGrantCollection Oauth2PermissionGrants { get; }
    public ISubscribedSkuCollection SubscribedSkus { get; }
    public ITrustedCAsForPasswordlessAuthCollection TrustedCAsForPasswordlessAuth { get; }
    public IUserCollection Users { get; }
    public IApplicationCollection Applications { get; }
    public IContactCollection Contacts { get; }
    public IGroupCollection Groups { get; }
    public IDirectoryRoleCollection DirectoryRoles { get; }
    public IServicePrincipalCollection ServicePrincipals { get; }
    public ITenantDetailCollection TenantDetails { get; }
    public IDeviceCollection Devices { get; }
    public ActiveDirectoryClient(Uri serviceRoot, Func`1<Task`1<string>> accessTokenGetter, IEnumerable`1<CustomTypeMapping> customTypeMappings);
    public IUserFetcher get_Me();
    public IServicePrincipalCollection get_ServicePrincipalsByAppId();
    [CompilerGeneratedAttribute]
public DataServiceContextWrapper get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(DataServiceContextWrapper value);
    public void SetHeader(string headerName, string headerValue);
    internal DataServiceContextWrapper GetContext();
    private string GetPath(string propertyName);
    [CompilerGeneratedAttribute]
private DataServiceContextWrapper get_meContext();
    [CompilerGeneratedAttribute]
private void set_meContext(DataServiceContextWrapper value);
    private Type ResolveTypeFromName(string typeName);
    private string ResolveNameFromType(Type clientType);
    public sealed virtual IDirectoryObjectCollection get_DeletedDirectoryObjects();
    public sealed virtual IDirectoryObjectCollection get_DirectoryObjects();
    public sealed virtual IDomainCollection get_Domains();
    public sealed virtual IDomainDnsRecordCollection get_DomainDnsRecords();
    public sealed virtual ILicenseDetailCollection get_LicenseDetails();
    public sealed virtual IOAuth2PermissionGrantCollection get_Oauth2PermissionGrants();
    public sealed virtual ISubscribedSkuCollection get_SubscribedSkus();
    public sealed virtual ITrustedCAsForPasswordlessAuthCollection get_TrustedCAsForPasswordlessAuth();
    public sealed virtual IUserCollection get_Users();
    public sealed virtual IApplicationCollection get_Applications();
    public sealed virtual IContactCollection get_Contacts();
    public sealed virtual IGroupCollection get_Groups();
    public sealed virtual IDirectoryRoleCollection get_DirectoryRoles();
    public sealed virtual IServicePrincipalCollection get_ServicePrincipals();
    public sealed virtual ITenantDetailCollection get_TenantDetails();
    public sealed virtual IDeviceCollection get_Devices();
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.ActiveDirectoryClient/<GetAvailableExtensionPropertiesAsync>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IEnumerable`1<IExtensionProperty>> GetAvailableExtensionPropertiesAsync(Nullable`1<bool> isSyncedFromOnPremises);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.ActiveDirectoryClient/<GetObjectsByObjectIdsAsync>d__5")]
public sealed virtual Task`1<IEnumerable`1<IDirectoryObject>> GetObjectsByObjectIdsAsync(ICollection`1<string> objectIds, ICollection`1<string> types);
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.ActiveDirectoryClient/<IsMemberOfAsync>d__a")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Nullable`1<bool>> IsMemberOfAsync(string groupId, string memberId);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.AddIn : ComplexTypeBase {
    private Nullable`1<Guid> _id;
    private string _type;
    private NonEntityTypeCollectionImpl`1<KeyValue> _properties;
    [LowerCasePropertyAttribute]
public Nullable`1<Guid> Id { get; public set; }
    [LowerCasePropertyAttribute]
public string Type { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<KeyValue> Properties { get; public set; }
    internal AddIn(bool dontCreateProxy);
    protected AddIn(ComplexTypeBase proxy);
    public Nullable`1<Guid> get_Id();
    public void set_Id(Nullable`1<Guid> value);
    public string get_Type();
    public void set_Type(string value);
    public IList`1<KeyValue> get_Properties();
    public void set_Properties(IList`1<KeyValue> value);
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_Properties>b__0();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_Properties>b__2();
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.AlternativeSecurityId : ComplexTypeBase {
    private Nullable`1<int> _type;
    private string _identityProvider;
    private Byte[] _key;
    [LowerCasePropertyAttribute]
public Nullable`1<int> Type { get; public set; }
    [LowerCasePropertyAttribute]
public string IdentityProvider { get; public set; }
    [LowerCasePropertyAttribute]
public Byte[] Key { get; public set; }
    internal AlternativeSecurityId(bool dontCreateProxy);
    protected AlternativeSecurityId(ComplexTypeBase proxy);
    public Nullable`1<int> get_Type();
    public void set_Type(Nullable`1<int> value);
    public string get_IdentityProvider();
    public void set_IdentityProvider(string value);
    public Byte[] get_Key();
    public void set_Key(Byte[] value);
}
[DataServiceKeyAttribute("ObjectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Application : DirectoryObject {
    private NonEntityTypeCollectionImpl`1<AddIn> _addIns;
    private string _appId;
    private NonEntityTypeCollectionImpl`1<AppRole> _appRoles;
    private Nullable`1<bool> _availableToOtherTenants;
    private string _displayName;
    private string _errorUrl;
    private string _groupMembershipClaims;
    private string _homepage;
    private NonEntityTypeCollectionImpl`1<string> _identifierUris;
    private NonEntityTypeCollectionImpl`1<KeyCredential> _keyCredentials;
    private NonEntityTypeCollectionImpl`1<Guid> _knownClientApplications;
    private IStreamFetcher _mainLogoFetcher;
    private string _logoutUrl;
    private bool _oauth2AllowImplicitFlow;
    private bool _oauth2AllowUrlPathMatching;
    private NonEntityTypeCollectionImpl`1<OAuth2Permission> _oauth2Permissions;
    private bool _oauth2RequirePostResponse;
    private NonEntityTypeCollectionImpl`1<PasswordCredential> _passwordCredentials;
    private Nullable`1<bool> _publicClient;
    private string _recordConsentConditions;
    private NonEntityTypeCollectionImpl`1<string> _replyUrls;
    private NonEntityTypeCollectionImpl`1<RequiredResourceAccess> _requiredResourceAccess;
    private string _samlMetadataUrl;
    private IExtensionPropertyCollection _extensionPropertiesFetcher;
    private EntityCollectionImpl`1<ExtensionProperty> _extensionProperties;
    private IDirectoryObjectCollection _policiesFetcher;
    private EntityCollectionImpl`1<DirectoryObject> _policies;
    private IServiceEndpointCollection _serviceEndpointsFetcher;
    private EntityCollectionImpl`1<ServiceEndpoint> _serviceEndpoints;
    [LowerCasePropertyAttribute]
public IList`1<AddIn> AddIns { get; public set; }
    [LowerCasePropertyAttribute]
public string AppId { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<AppRole> AppRoles { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> AvailableToOtherTenants { get; public set; }
    [LowerCasePropertyAttribute]
public string DisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public string ErrorUrl { get; public set; }
    [LowerCasePropertyAttribute]
public string GroupMembershipClaims { get; public set; }
    [LowerCasePropertyAttribute]
public string Homepage { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> IdentifierUris { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<KeyCredential> KeyCredentials { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<Guid> KnownClientApplications { get; public set; }
    private IStreamFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IApplication.MainLogo { get; }
    [LowerCasePropertyAttribute]
public string LogoutUrl { get; public set; }
    [LowerCasePropertyAttribute]
public bool Oauth2AllowImplicitFlow { get; public set; }
    [LowerCasePropertyAttribute]
public bool Oauth2AllowUrlPathMatching { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<OAuth2Permission> Oauth2Permissions { get; public set; }
    [LowerCasePropertyAttribute]
public bool Oauth2RequirePostResponse { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<PasswordCredential> PasswordCredentials { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> PublicClient { get; public set; }
    [LowerCasePropertyAttribute]
public string RecordConsentConditions { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> ReplyUrls { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<RequiredResourceAccess> RequiredResourceAccess { get; public set; }
    [LowerCasePropertyAttribute]
public string SamlMetadataUrl { get; public set; }
    [LowerCasePropertyAttribute]
private IExtensionPropertyCollection Microsoft.Azure.ActiveDirectory.GraphClient.IApplicationFetcher.ExtensionProperties { get; }
    [LowerCasePropertyAttribute]
public IList`1<ExtensionProperty> ExtensionProperties { get; public set; }
    private IPagedCollection`1<IExtensionProperty> Microsoft.Azure.ActiveDirectory.GraphClient.IApplication.ExtensionProperties { get; }
    [LowerCasePropertyAttribute]
private IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IApplicationFetcher.Policies { get; }
    [LowerCasePropertyAttribute]
public IList`1<DirectoryObject> Policies { get; public set; }
    private IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IApplication.Policies { get; }
    [LowerCasePropertyAttribute]
private IServiceEndpointCollection Microsoft.Azure.ActiveDirectory.GraphClient.IApplicationFetcher.ServiceEndpoints { get; }
    [LowerCasePropertyAttribute]
public IList`1<ServiceEndpoint> ServiceEndpoints { get; public set; }
    private IPagedCollection`1<IServiceEndpoint> Microsoft.Azure.ActiveDirectory.GraphClient.IApplication.ServiceEndpoints { get; }
    internal Application(bool dontCreateProxy);
    protected Application(GraphObject proxy);
    public sealed virtual IList`1<AddIn> get_AddIns();
    public void set_AddIns(IList`1<AddIn> value);
    public sealed virtual string get_AppId();
    public sealed virtual void set_AppId(string value);
    public sealed virtual IList`1<AppRole> get_AppRoles();
    public void set_AppRoles(IList`1<AppRole> value);
    public sealed virtual Nullable`1<bool> get_AvailableToOtherTenants();
    public sealed virtual void set_AvailableToOtherTenants(Nullable`1<bool> value);
    public sealed virtual string get_DisplayName();
    public sealed virtual void set_DisplayName(string value);
    public sealed virtual string get_ErrorUrl();
    public sealed virtual void set_ErrorUrl(string value);
    public sealed virtual string get_GroupMembershipClaims();
    public sealed virtual void set_GroupMembershipClaims(string value);
    public sealed virtual string get_Homepage();
    public sealed virtual void set_Homepage(string value);
    public sealed virtual IList`1<string> get_IdentifierUris();
    public void set_IdentifierUris(IList`1<string> value);
    public sealed virtual IList`1<KeyCredential> get_KeyCredentials();
    public void set_KeyCredentials(IList`1<KeyCredential> value);
    public sealed virtual IList`1<Guid> get_KnownClientApplications();
    public void set_KnownClientApplications(IList`1<Guid> value);
    private sealed virtual override IStreamFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IApplication.get_MainLogo();
    public sealed virtual string get_LogoutUrl();
    public sealed virtual void set_LogoutUrl(string value);
    public sealed virtual bool get_Oauth2AllowImplicitFlow();
    public sealed virtual void set_Oauth2AllowImplicitFlow(bool value);
    public sealed virtual bool get_Oauth2AllowUrlPathMatching();
    public sealed virtual void set_Oauth2AllowUrlPathMatching(bool value);
    public sealed virtual IList`1<OAuth2Permission> get_Oauth2Permissions();
    public void set_Oauth2Permissions(IList`1<OAuth2Permission> value);
    public sealed virtual bool get_Oauth2RequirePostResponse();
    public sealed virtual void set_Oauth2RequirePostResponse(bool value);
    public sealed virtual IList`1<PasswordCredential> get_PasswordCredentials();
    public void set_PasswordCredentials(IList`1<PasswordCredential> value);
    public sealed virtual Nullable`1<bool> get_PublicClient();
    public sealed virtual void set_PublicClient(Nullable`1<bool> value);
    public sealed virtual string get_RecordConsentConditions();
    public sealed virtual void set_RecordConsentConditions(string value);
    public sealed virtual IList`1<string> get_ReplyUrls();
    public void set_ReplyUrls(IList`1<string> value);
    public sealed virtual IList`1<RequiredResourceAccess> get_RequiredResourceAccess();
    public void set_RequiredResourceAccess(IList`1<RequiredResourceAccess> value);
    public sealed virtual string get_SamlMetadataUrl();
    public sealed virtual void set_SamlMetadataUrl(string value);
    private sealed virtual override IExtensionPropertyCollection Microsoft.Azure.ActiveDirectory.GraphClient.IApplicationFetcher.get_ExtensionProperties();
    public IList`1<ExtensionProperty> get_ExtensionProperties();
    public void set_ExtensionProperties(IList`1<ExtensionProperty> value);
    private sealed virtual override IPagedCollection`1<IExtensionProperty> Microsoft.Azure.ActiveDirectory.GraphClient.IApplication.get_ExtensionProperties();
    private sealed virtual override IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IApplicationFetcher.get_Policies();
    public IList`1<DirectoryObject> get_Policies();
    public void set_Policies(IList`1<DirectoryObject> value);
    private sealed virtual override IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IApplication.get_Policies();
    private sealed virtual override IServiceEndpointCollection Microsoft.Azure.ActiveDirectory.GraphClient.IApplicationFetcher.get_ServiceEndpoints();
    public IList`1<ServiceEndpoint> get_ServiceEndpoints();
    public void set_ServiceEndpoints(IList`1<ServiceEndpoint> value);
    private sealed virtual override IPagedCollection`1<IServiceEndpoint> Microsoft.Azure.ActiveDirectory.GraphClient.IApplication.get_ServiceEndpoints();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.Application/<RestoreAsync>d__30")]
public sealed virtual Task`1<IApplication> RestoreAsync(ICollection`1<string> identifierUris);
    private sealed virtual override Task`1<IApplication> Microsoft.Azure.ActiveDirectory.GraphClient.IApplicationFetcher.ExecuteAsync();
    private sealed virtual override IApplicationFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IApplicationFetcher.Expand(Expression`1<Func`2<IApplication, TTarget>> navigationPropertyAccessor);
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_AddIns>b__0();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_AddIns>b__2();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_AppRoles>b__4();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_AppRoles>b__6();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_IdentifierUris>b__8();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_IdentifierUris>b__a();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_KeyCredentials>b__c();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_KeyCredentials>b__e();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_KnownClientApplications>b__10();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_KnownClientApplications>b__12();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_Oauth2Permissions>b__14();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_Oauth2Permissions>b__16();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_PasswordCredentials>b__18();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_PasswordCredentials>b__1a();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_ReplyUrls>b__1c();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_ReplyUrls>b__1e();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_RequiredResourceAccess>b__20();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_RequiredResourceAccess>b__22();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_ExtensionProperties>b__24();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_ExtensionProperties>b__26();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_Policies>b__28();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_Policies>b__2a();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_ServiceEndpoints>b__2c();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_ServiceEndpoints>b__2e();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.ActiveDirectory.GraphClient.ApplicationCollection : QueryableSet`2<IApplication, Application> {
    public IApplicationFetcher Item { get; }
    internal ApplicationCollection(DataServiceQuery inner, DataServiceContextWrapper context, object entity, string path);
    public sealed virtual IApplicationFetcher GetByObjectId(string objectId);
    public sealed virtual IApplicationFetcher get_Item(string objectId);
    public sealed virtual Task`1<IPagedCollection`1<IApplication>> ExecuteAsync();
    public sealed virtual Task AddApplicationAsync(IApplication item, bool deferredSave);
    [CompilerGeneratedAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.ApplicationCollection/<<ExecuteAsync>b__2>d__3")]
[DebuggerStepThroughAttribute]
private Task`1<IPagedCollection`1<IApplication>> <ExecuteAsync>b__2();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.ApplicationFetcher : DirectoryObjectFetcher {
    private IExtensionPropertyCollection _extensionProperties;
    private IDirectoryObjectCollection _policies;
    private IServiceEndpointCollection _serviceEndpoints;
    private IReadOnlyQueryableSet`1<IApplication> _query;
    [LowerCasePropertyAttribute]
public IExtensionPropertyCollection ExtensionProperties { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection Policies { get; }
    [LowerCasePropertyAttribute]
public IServiceEndpointCollection ServiceEndpoints { get; }
    public sealed virtual IExtensionPropertyCollection get_ExtensionProperties();
    public sealed virtual IDirectoryObjectCollection get_Policies();
    public sealed virtual IServiceEndpointCollection get_ServiceEndpoints();
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.ApplicationFetcher/<ExecuteAsync>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IApplication> ExecuteAsync();
    public sealed virtual IApplicationFetcher Expand(Expression`1<Func`2<IApplication, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IApplication> EnsureQuery();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.ApplicationFetcher/<RestoreAsync>d__4")]
public sealed virtual Task`1<IApplication> RestoreAsync(ICollection`1<string> identifierUris);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.AppRole : ComplexTypeBase {
    private NonEntityTypeCollectionImpl`1<string> _allowedMemberTypes;
    private string _description;
    private string _displayName;
    private Guid _id;
    private bool _isEnabled;
    private string _value;
    [LowerCasePropertyAttribute]
public IList`1<string> AllowedMemberTypes { get; public set; }
    [LowerCasePropertyAttribute]
public string Description { get; public set; }
    [LowerCasePropertyAttribute]
public string DisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public Guid Id { get; public set; }
    [LowerCasePropertyAttribute]
public bool IsEnabled { get; public set; }
    [LowerCasePropertyAttribute]
public string Value { get; public set; }
    internal AppRole(bool dontCreateProxy);
    protected AppRole(ComplexTypeBase proxy);
    public IList`1<string> get_AllowedMemberTypes();
    public void set_AllowedMemberTypes(IList`1<string> value);
    public string get_Description();
    public void set_Description(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public Guid get_Id();
    public void set_Id(Guid value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public string get_Value();
    public void set_Value(string value);
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_AllowedMemberTypes>b__0();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_AllowedMemberTypes>b__2();
}
[DataServiceKeyAttribute("ObjectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.AppRoleAssignment : DirectoryObject {
    private Nullable`1<DateTime> _creationTimestamp;
    private Guid _id;
    private string _principalDisplayName;
    private Nullable`1<Guid> _principalId;
    private string _principalType;
    private string _resourceDisplayName;
    private Nullable`1<Guid> _resourceId;
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> CreationTimestamp { get; public set; }
    [LowerCasePropertyAttribute]
public Guid Id { get; public set; }
    [LowerCasePropertyAttribute]
public string PrincipalDisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<Guid> PrincipalId { get; public set; }
    [LowerCasePropertyAttribute]
public string PrincipalType { get; public set; }
    [LowerCasePropertyAttribute]
public string ResourceDisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<Guid> ResourceId { get; public set; }
    internal AppRoleAssignment(bool dontCreateProxy);
    protected AppRoleAssignment(GraphObject proxy);
    public sealed virtual Nullable`1<DateTime> get_CreationTimestamp();
    public sealed virtual void set_CreationTimestamp(Nullable`1<DateTime> value);
    public sealed virtual Guid get_Id();
    public sealed virtual void set_Id(Guid value);
    public sealed virtual string get_PrincipalDisplayName();
    public sealed virtual void set_PrincipalDisplayName(string value);
    public sealed virtual Nullable`1<Guid> get_PrincipalId();
    public sealed virtual void set_PrincipalId(Nullable`1<Guid> value);
    public sealed virtual string get_PrincipalType();
    public sealed virtual void set_PrincipalType(string value);
    public sealed virtual string get_ResourceDisplayName();
    public sealed virtual void set_ResourceDisplayName(string value);
    public sealed virtual Nullable`1<Guid> get_ResourceId();
    public sealed virtual void set_ResourceId(Nullable`1<Guid> value);
    private sealed virtual override Task`1<IAppRoleAssignment> Microsoft.Azure.ActiveDirectory.GraphClient.IAppRoleAssignmentFetcher.ExecuteAsync();
    private sealed virtual override IAppRoleAssignmentFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IAppRoleAssignmentFetcher.Expand(Expression`1<Func`2<IAppRoleAssignment, TTarget>> navigationPropertyAccessor);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.ActiveDirectory.GraphClient.AppRoleAssignmentCollection : QueryableSet`2<IAppRoleAssignment, AppRoleAssignment> {
    public IAppRoleAssignmentFetcher Item { get; }
    internal AppRoleAssignmentCollection(DataServiceQuery inner, DataServiceContextWrapper context, object entity, string path);
    public sealed virtual IAppRoleAssignmentFetcher GetByObjectId(string objectId);
    public sealed virtual IAppRoleAssignmentFetcher get_Item(string objectId);
    public sealed virtual Task`1<IPagedCollection`1<IAppRoleAssignment>> ExecuteAsync();
    public sealed virtual Task AddAppRoleAssignmentAsync(IAppRoleAssignment item, bool deferredSave);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.AppRoleAssignmentCollection/<<ExecuteAsync>b__2>d__3")]
[CompilerGeneratedAttribute]
private Task`1<IPagedCollection`1<IAppRoleAssignment>> <ExecuteAsync>b__2();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.AppRoleAssignmentFetcher : DirectoryObjectFetcher {
    private IReadOnlyQueryableSet`1<IAppRoleAssignment> _query;
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.AppRoleAssignmentFetcher/<ExecuteAsync>d__0")]
public sealed virtual Task`1<IAppRoleAssignment> ExecuteAsync();
    public sealed virtual IAppRoleAssignmentFetcher Expand(Expression`1<Func`2<IAppRoleAssignment, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IAppRoleAssignment> EnsureQuery();
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.AssignedLicense : ComplexTypeBase {
    private NonEntityTypeCollectionImpl`1<Guid> _disabledPlans;
    private Nullable`1<Guid> _skuId;
    [LowerCasePropertyAttribute]
public IList`1<Guid> DisabledPlans { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<Guid> SkuId { get; public set; }
    internal AssignedLicense(bool dontCreateProxy);
    protected AssignedLicense(ComplexTypeBase proxy);
    public IList`1<Guid> get_DisabledPlans();
    public void set_DisabledPlans(IList`1<Guid> value);
    public Nullable`1<Guid> get_SkuId();
    public void set_SkuId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_DisabledPlans>b__0();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_DisabledPlans>b__2();
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.AssignedPlan : ComplexTypeBase {
    private Nullable`1<DateTime> _assignedTimestamp;
    private string _capabilityStatus;
    private string _service;
    private Nullable`1<Guid> _servicePlanId;
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> AssignedTimestamp { get; public set; }
    [LowerCasePropertyAttribute]
public string CapabilityStatus { get; public set; }
    [LowerCasePropertyAttribute]
public string Service { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<Guid> ServicePlanId { get; public set; }
    internal AssignedPlan(bool dontCreateProxy);
    protected AssignedPlan(ComplexTypeBase proxy);
    public Nullable`1<DateTime> get_AssignedTimestamp();
    public void set_AssignedTimestamp(Nullable`1<DateTime> value);
    public string get_CapabilityStatus();
    public void set_CapabilityStatus(string value);
    public string get_Service();
    public void set_Service(string value);
    public Nullable`1<Guid> get_ServicePlanId();
    public void set_ServicePlanId(Nullable`1<Guid> value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.AuthenticationException : GraphException {
    public AuthenticationException(HttpStatusCode httpStatusCode, string message);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.AuthorizationException : GraphException {
    public AuthorizationException(HttpStatusCode httpStatusCode, string message);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.BadRequestException : GraphException {
    public BadRequestException(HttpStatusCode httpStatusCode, string message);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.BatchRequestItem : object {
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <RequestUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsChangesetRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ChangeSetId>k__BackingField;
    [CompilerGeneratedAttribute]
private WebHeaderCollection <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    public string Method { get; public set; }
    public Uri RequestUri { get; public set; }
    public Guid RequestId { get; public set; }
    public bool IsChangesetRequired { get; public set; }
    public Guid ChangeSetId { get; public set; }
    public WebHeaderCollection Headers { get; public set; }
    public string Body { get; public set; }
    public BatchRequestItem(string httpMethod, bool isChangesetRequired, Uri requestUri, WebHeaderCollection headers, string body);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public Uri get_RequestUri();
    [CompilerGeneratedAttribute]
public void set_RequestUri(Uri value);
    [CompilerGeneratedAttribute]
public Guid get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(Guid value);
    [CompilerGeneratedAttribute]
public bool get_IsChangesetRequired();
    [CompilerGeneratedAttribute]
public void set_IsChangesetRequired(bool value);
    [CompilerGeneratedAttribute]
public Guid get_ChangeSetId();
    [CompilerGeneratedAttribute]
public void set_ChangeSetId(Guid value);
    [CompilerGeneratedAttribute]
public WebHeaderCollection get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(WebHeaderCollection value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    public virtual string ToString();
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.BatchResponseItem : object {
    [CompilerGeneratedAttribute]
private bool <Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private PagedResults`1<DirectoryObject> <ResultSet>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphException <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private WebHeaderCollection <BatchHeaders>k__BackingField;
    public bool Failed { get; public set; }
    public PagedResults`1<DirectoryObject> ResultSet { get; public set; }
    public GraphException Exception { get; public set; }
    public WebHeaderCollection BatchHeaders { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_Failed();
    [CompilerGeneratedAttribute]
public void set_Failed(bool value);
    [CompilerGeneratedAttribute]
public PagedResults`1<DirectoryObject> get_ResultSet();
    [CompilerGeneratedAttribute]
public void set_ResultSet(PagedResults`1<DirectoryObject> value);
    [CompilerGeneratedAttribute]
public GraphException get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(GraphException value);
    [CompilerGeneratedAttribute]
public WebHeaderCollection get_BatchHeaders();
    [CompilerGeneratedAttribute]
private void set_BatchHeaders(WebHeaderCollection value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.CertificateAuthorityInformation : ComplexTypeBase {
    private string _authorityType;
    private string _crlDistributionPoint;
    private string _deltaCrlDistributionPoint;
    private Byte[] _trustedCertificate;
    private string _trustedIssuer;
    private string _trustedIssuerSki;
    [LowerCasePropertyAttribute]
public string AuthorityType { get; public set; }
    [LowerCasePropertyAttribute]
public string CrlDistributionPoint { get; public set; }
    [LowerCasePropertyAttribute]
public string DeltaCrlDistributionPoint { get; public set; }
    [LowerCasePropertyAttribute]
public Byte[] TrustedCertificate { get; public set; }
    [LowerCasePropertyAttribute]
public string TrustedIssuer { get; public set; }
    [LowerCasePropertyAttribute]
public string TrustedIssuerSki { get; public set; }
    internal CertificateAuthorityInformation(bool dontCreateProxy);
    protected CertificateAuthorityInformation(ComplexTypeBase proxy);
    public string get_AuthorityType();
    public void set_AuthorityType(string value);
    public string get_CrlDistributionPoint();
    public void set_CrlDistributionPoint(string value);
    public string get_DeltaCrlDistributionPoint();
    public void set_DeltaCrlDistributionPoint(string value);
    public Byte[] get_TrustedCertificate();
    public void set_TrustedCertificate(Byte[] value);
    public string get_TrustedIssuer();
    public void set_TrustedIssuer(string value);
    public string get_TrustedIssuerSki();
    public void set_TrustedIssuerSki(string value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.ChangeTrackingCollection`1 : Collection`1<T> {
    private EventHandler CollectionChanged;
    internal void add_CollectionChanged(EventHandler value);
    internal void remove_CollectionChanged(EventHandler value);
    public bool Any();
    public bool Any(T value);
    protected virtual void InsertItem(int index, T item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, T item);
    protected virtual void ClearItems();
    protected virtual void OnItemInserted(T insertedItem);
    protected virtual void OnItemRemoved(T removedItem);
    protected virtual void OnItemSet(T replacedItem, T newItem);
    protected virtual void OnItemsCleared(IEnumerable`1<T> clearedItems);
    protected virtual void OnCollectionChanged();
}
[ObsoleteAttribute]
public class Microsoft.Azure.ActiveDirectory.GraphClient.ConnectionWrapper : object {
    private GraphSettings graphSettings;
    public DataServiceContextWrapper wrapper;
    internal string accessToken;
    [CompilerGeneratedAttribute]
private Guid <ClientRequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private ICredentials <GraphCredentials>k__BackingField;
    internal Guid ClientRequestId { get; internal set; }
    internal string AccessToken { get; internal set; }
    internal ICredentials GraphCredentials { get; internal set; }
    internal string GraphApiDomainName { get; }
    internal string GraphApiVersion { get; }
    internal bool IsRetryEnabled { get; }
    internal HashSet`1<string> RetryOnExceptions { get; }
    internal TimeSpan WaitBeforeRetry { get; }
    internal int TotalAttempts { get; }
    public ConnectionWrapper(GraphSettings graphSettings);
    [CompilerGeneratedAttribute]
internal Guid get_ClientRequestId();
    [CompilerGeneratedAttribute]
internal void set_ClientRequestId(Guid value);
    internal string get_AccessToken();
    internal void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
internal ICredentials get_GraphCredentials();
    [CompilerGeneratedAttribute]
internal void set_GraphCredentials(ICredentials value);
    internal string get_GraphApiDomainName();
    internal string get_GraphApiVersion();
    internal bool get_IsRetryEnabled();
    internal HashSet`1<string> get_RetryOnExceptions();
    internal TimeSpan get_WaitBeforeRetry();
    internal int get_TotalAttempts();
    public virtual void AttachRequiredHeaders(HttpWebRequest httpWebRequest, bool includeContentType, WebHeaderCollection additionalHeaders);
    protected virtual void AttachRequiredHeaders(HttpClientHandler clientHandler, HttpClient httpClient, bool includeContentType, WebHeaderCollection additionalHeaders);
    protected virtual void AttachRequiredHeaders(WebHeaderCollection headers, bool includeContentType, WebHeaderCollection additionalHeaders, bool addAuthorizationHeader);
    protected virtual void AttachRequiredHeaders(HttpRequestHeaders headers, bool includeContentType, WebHeaderCollection additionalHeaders, bool addAuthorizationHeader);
    public virtual T InvokeNetworkOperation(Func`1<T> action);
    public virtual Byte[] DownloadData(string address, WebHeaderCollection additionalHeaders);
    public virtual Byte[] DownloadData(Uri address, WebHeaderCollection additionalHeaders);
    public virtual string UploadString(string requestUri, string method, string requestBody, WebHeaderCollection additionalHeaders, WebHeaderCollection responseHeaders);
    public virtual string UploadString(Uri requestUri, string method, string requestBody, WebHeaderCollection additionalHeaders, WebHeaderCollection responseHeaders);
    public virtual Byte[] UploadData(Uri requestUri, string method, Byte[] data, WebHeaderCollection additionalHeaders);
    public virtual void DeleteRequest(Uri requestUri);
    [DebuggerStepThroughAttribute]
[CompilerGeneratedAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.ConnectionWrapper/<<set_AccessToken>b__0>d__1")]
private Task`1<string> <set_AccessToken>b__0();
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Constants : object {
    public static string AadGraphEndpointFormat;
    public static string QueryParameterNameApiVersion;
    public static string DefaultGraphApiDomainName;
    public static int MaxRetryAttempts;
    public static string HeaderAadClientRequestId;
    public static string PreferHeaderName;
    public static string PreferHeaderValue;
    public static string HeaderAadRequestId;
    public static string HeaderAadServerName;
    public static string UserAgentString;
    public static string UserAgentStringV2;
    public static string HeaderShortLivedToken;
    public static string ClaimNameTenantId;
    public static string OdataTypeKey;
    public static string ODataNextLink;
    public static string ODataMetadataKey;
    public static string ODataValues;
    public static string ODataErrorKey;
    public static string ODataCodeKey;
    public static string ODataMessageKey;
    public static string MinimalMetadataContentType;
    public static string FilterOperator;
    public static string TopOperator;
    public static string ExpandOperator;
    public static string OrderByOperator;
    public static string SelectOperator;
    public static string LinksFragment;
    public static string CommonTenantName;
    public static string ActionGetMemberGroups;
    public static string ActionCheckMemberGroups;
    public static string ActionAssignLicense;
    public static string ActionIsMemberOf;
    public static string ActionRestoreApplication;
    public static string PublicClientAppId;
    public static string ClientAppId;
    public static string TokenUrlFormat;
    public static string ResourceId;
    public static string DefaultApiVersion;
    private static Constants();
    public static string GetTokenUrl(string domainNameOrTenantId);
    public static string GetTokenAuthority(string domainNameOrTenantId);
}
[DataServiceKeyAttribute("ObjectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Contact : DirectoryObject {
    private string _city;
    private string _companyName;
    private string _country;
    private string _department;
    private Nullable`1<bool> _dirSyncEnabled;
    private string _displayName;
    private string _facsimileTelephoneNumber;
    private string _givenName;
    private string _jobTitle;
    private Nullable`1<DateTime> _lastDirSyncTime;
    private string _mail;
    private string _mailNickname;
    private string _mobile;
    private string _physicalDeliveryOfficeName;
    private string _postalCode;
    private NonEntityTypeCollectionImpl`1<ProvisioningError> _provisioningErrors;
    private NonEntityTypeCollectionImpl`1<string> _proxyAddresses;
    private string _sipProxyAddress;
    private string _state;
    private string _streetAddress;
    private string _surname;
    private string _telephoneNumber;
    private IStreamFetcher _thumbnailPhotoFetcher;
    [LowerCasePropertyAttribute]
public string City { get; public set; }
    [LowerCasePropertyAttribute]
public string CompanyName { get; public set; }
    [LowerCasePropertyAttribute]
public string Country { get; public set; }
    [LowerCasePropertyAttribute]
public string Department { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> DirSyncEnabled { get; public set; }
    [LowerCasePropertyAttribute]
public string DisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public string FacsimileTelephoneNumber { get; public set; }
    [LowerCasePropertyAttribute]
public string GivenName { get; public set; }
    [LowerCasePropertyAttribute]
public string JobTitle { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> LastDirSyncTime { get; public set; }
    [LowerCasePropertyAttribute]
public string Mail { get; public set; }
    [LowerCasePropertyAttribute]
public string MailNickname { get; public set; }
    [LowerCasePropertyAttribute]
public string Mobile { get; public set; }
    [LowerCasePropertyAttribute]
public string PhysicalDeliveryOfficeName { get; public set; }
    [LowerCasePropertyAttribute]
public string PostalCode { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<ProvisioningError> ProvisioningErrors { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> ProxyAddresses { get; public set; }
    [LowerCasePropertyAttribute]
public string SipProxyAddress { get; public set; }
    [LowerCasePropertyAttribute]
public string State { get; public set; }
    [LowerCasePropertyAttribute]
public string StreetAddress { get; public set; }
    [LowerCasePropertyAttribute]
public string Surname { get; public set; }
    [LowerCasePropertyAttribute]
public string TelephoneNumber { get; public set; }
    private IStreamFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IContact.ThumbnailPhoto { get; }
    internal Contact(bool dontCreateProxy);
    protected Contact(GraphObject proxy);
    public sealed virtual string get_City();
    public sealed virtual void set_City(string value);
    public sealed virtual string get_CompanyName();
    public sealed virtual void set_CompanyName(string value);
    public sealed virtual string get_Country();
    public sealed virtual void set_Country(string value);
    public sealed virtual string get_Department();
    public sealed virtual void set_Department(string value);
    public sealed virtual Nullable`1<bool> get_DirSyncEnabled();
    public sealed virtual void set_DirSyncEnabled(Nullable`1<bool> value);
    public sealed virtual string get_DisplayName();
    public sealed virtual void set_DisplayName(string value);
    public sealed virtual string get_FacsimileTelephoneNumber();
    public sealed virtual void set_FacsimileTelephoneNumber(string value);
    public sealed virtual string get_GivenName();
    public sealed virtual void set_GivenName(string value);
    public sealed virtual string get_JobTitle();
    public sealed virtual void set_JobTitle(string value);
    public sealed virtual Nullable`1<DateTime> get_LastDirSyncTime();
    public sealed virtual void set_LastDirSyncTime(Nullable`1<DateTime> value);
    public sealed virtual string get_Mail();
    public sealed virtual void set_Mail(string value);
    public sealed virtual string get_MailNickname();
    public sealed virtual void set_MailNickname(string value);
    public sealed virtual string get_Mobile();
    public sealed virtual void set_Mobile(string value);
    public sealed virtual string get_PhysicalDeliveryOfficeName();
    public sealed virtual void set_PhysicalDeliveryOfficeName(string value);
    public sealed virtual string get_PostalCode();
    public sealed virtual void set_PostalCode(string value);
    public sealed virtual IList`1<ProvisioningError> get_ProvisioningErrors();
    public void set_ProvisioningErrors(IList`1<ProvisioningError> value);
    public sealed virtual IList`1<string> get_ProxyAddresses();
    public void set_ProxyAddresses(IList`1<string> value);
    public sealed virtual string get_SipProxyAddress();
    public sealed virtual void set_SipProxyAddress(string value);
    public sealed virtual string get_State();
    public sealed virtual void set_State(string value);
    public sealed virtual string get_StreetAddress();
    public sealed virtual void set_StreetAddress(string value);
    public sealed virtual string get_Surname();
    public sealed virtual void set_Surname(string value);
    public sealed virtual string get_TelephoneNumber();
    public sealed virtual void set_TelephoneNumber(string value);
    private sealed virtual override IStreamFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IContact.get_ThumbnailPhoto();
    private sealed virtual override Task`1<IContact> Microsoft.Azure.ActiveDirectory.GraphClient.IContactFetcher.ExecuteAsync();
    private sealed virtual override IContactFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IContactFetcher.Expand(Expression`1<Func`2<IContact, TTarget>> navigationPropertyAccessor);
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_ProvisioningErrors>b__0();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_ProvisioningErrors>b__2();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_ProxyAddresses>b__4();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_ProxyAddresses>b__6();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.ActiveDirectory.GraphClient.ContactCollection : QueryableSet`2<IContact, Contact> {
    public IContactFetcher Item { get; }
    internal ContactCollection(DataServiceQuery inner, DataServiceContextWrapper context, object entity, string path);
    public sealed virtual IContactFetcher GetByObjectId(string objectId);
    public sealed virtual IContactFetcher get_Item(string objectId);
    public sealed virtual Task`1<IPagedCollection`1<IContact>> ExecuteAsync();
    public sealed virtual Task AddContactAsync(IContact item, bool deferredSave);
    [CompilerGeneratedAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.ContactCollection/<<ExecuteAsync>b__2>d__3")]
[DebuggerStepThroughAttribute]
private Task`1<IPagedCollection`1<IContact>> <ExecuteAsync>b__2();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.ContactFetcher : DirectoryObjectFetcher {
    private IReadOnlyQueryableSet`1<IContact> _query;
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.ContactFetcher/<ExecuteAsync>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IContact> ExecuteAsync();
    public sealed virtual IContactFetcher Expand(Expression`1<Func`2<IContact, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IContact> EnsureQuery();
}
[DataServiceKeyAttribute("ObjectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Contract : DirectoryObject {
    private string _contractType;
    private Nullable`1<Guid> _customerContextId;
    private string _defaultDomainName;
    private string _displayName;
    [LowerCasePropertyAttribute]
public string ContractType { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<Guid> CustomerContextId { get; public set; }
    [LowerCasePropertyAttribute]
public string DefaultDomainName { get; public set; }
    [LowerCasePropertyAttribute]
public string DisplayName { get; public set; }
    internal Contract(bool dontCreateProxy);
    protected Contract(GraphObject proxy);
    public sealed virtual string get_ContractType();
    public sealed virtual void set_ContractType(string value);
    public sealed virtual Nullable`1<Guid> get_CustomerContextId();
    public sealed virtual void set_CustomerContextId(Nullable`1<Guid> value);
    public sealed virtual string get_DefaultDomainName();
    public sealed virtual void set_DefaultDomainName(string value);
    public sealed virtual string get_DisplayName();
    public sealed virtual void set_DisplayName(string value);
    private sealed virtual override Task`1<IContract> Microsoft.Azure.ActiveDirectory.GraphClient.IContractFetcher.ExecuteAsync();
    private sealed virtual override IContractFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IContractFetcher.Expand(Expression`1<Func`2<IContract, TTarget>> navigationPropertyAccessor);
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.ContractFetcher : DirectoryObjectFetcher {
    private IReadOnlyQueryableSet`1<IContract> _query;
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.ContractFetcher/<ExecuteAsync>d__0")]
public sealed virtual Task`1<IContract> ExecuteAsync();
    public sealed virtual IContractFetcher Expand(Expression`1<Func`2<IContract, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IContract> EnsureQuery();
}
[DataServiceKeyAttribute("ObjectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Device : DirectoryObject {
    private Nullable`1<bool> _accountEnabled;
    private NonEntityTypeCollectionImpl`1<AlternativeSecurityId> _alternativeSecurityIds;
    private Nullable`1<DateTime> _approximateLastLogonTimestamp;
    private Nullable`1<Guid> _deviceId;
    private string _deviceMetadata;
    private Nullable`1<int> _deviceObjectVersion;
    private string _deviceOSType;
    private string _deviceOSVersion;
    private NonEntityTypeCollectionImpl`1<string> _devicePhysicalIds;
    private string _deviceTrustType;
    private Nullable`1<bool> _dirSyncEnabled;
    private string _displayName;
    private Nullable`1<bool> _isCompliant;
    private Nullable`1<bool> _isManaged;
    private Nullable`1<DateTime> _lastDirSyncTime;
    private IDirectoryObjectCollection _registeredOwnersFetcher;
    private EntityCollectionImpl`1<DirectoryObject> _registeredOwners;
    private IDirectoryObjectCollection _registeredUsersFetcher;
    private EntityCollectionImpl`1<DirectoryObject> _registeredUsers;
    [LowerCasePropertyAttribute]
public Nullable`1<bool> AccountEnabled { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<AlternativeSecurityId> AlternativeSecurityIds { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> ApproximateLastLogonTimestamp { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<Guid> DeviceId { get; public set; }
    [LowerCasePropertyAttribute]
public string DeviceMetadata { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<int> DeviceObjectVersion { get; public set; }
    [LowerCasePropertyAttribute]
public string DeviceOSType { get; public set; }
    [LowerCasePropertyAttribute]
public string DeviceOSVersion { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> DevicePhysicalIds { get; public set; }
    [LowerCasePropertyAttribute]
public string DeviceTrustType { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> DirSyncEnabled { get; public set; }
    [LowerCasePropertyAttribute]
public string DisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> IsCompliant { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> IsManaged { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> LastDirSyncTime { get; public set; }
    [LowerCasePropertyAttribute]
private IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IDeviceFetcher.RegisteredOwners { get; }
    [LowerCasePropertyAttribute]
public IList`1<DirectoryObject> RegisteredOwners { get; public set; }
    private IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IDevice.RegisteredOwners { get; }
    [LowerCasePropertyAttribute]
private IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IDeviceFetcher.RegisteredUsers { get; }
    [LowerCasePropertyAttribute]
public IList`1<DirectoryObject> RegisteredUsers { get; public set; }
    private IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IDevice.RegisteredUsers { get; }
    internal Device(bool dontCreateProxy);
    protected Device(GraphObject proxy);
    public sealed virtual Nullable`1<bool> get_AccountEnabled();
    public sealed virtual void set_AccountEnabled(Nullable`1<bool> value);
    public sealed virtual IList`1<AlternativeSecurityId> get_AlternativeSecurityIds();
    public void set_AlternativeSecurityIds(IList`1<AlternativeSecurityId> value);
    public sealed virtual Nullable`1<DateTime> get_ApproximateLastLogonTimestamp();
    public sealed virtual void set_ApproximateLastLogonTimestamp(Nullable`1<DateTime> value);
    public sealed virtual Nullable`1<Guid> get_DeviceId();
    public sealed virtual void set_DeviceId(Nullable`1<Guid> value);
    public sealed virtual string get_DeviceMetadata();
    public sealed virtual void set_DeviceMetadata(string value);
    public sealed virtual Nullable`1<int> get_DeviceObjectVersion();
    public sealed virtual void set_DeviceObjectVersion(Nullable`1<int> value);
    public sealed virtual string get_DeviceOSType();
    public sealed virtual void set_DeviceOSType(string value);
    public sealed virtual string get_DeviceOSVersion();
    public sealed virtual void set_DeviceOSVersion(string value);
    public sealed virtual IList`1<string> get_DevicePhysicalIds();
    public void set_DevicePhysicalIds(IList`1<string> value);
    public sealed virtual string get_DeviceTrustType();
    public sealed virtual void set_DeviceTrustType(string value);
    public sealed virtual Nullable`1<bool> get_DirSyncEnabled();
    public sealed virtual void set_DirSyncEnabled(Nullable`1<bool> value);
    public sealed virtual string get_DisplayName();
    public sealed virtual void set_DisplayName(string value);
    public sealed virtual Nullable`1<bool> get_IsCompliant();
    public sealed virtual void set_IsCompliant(Nullable`1<bool> value);
    public sealed virtual Nullable`1<bool> get_IsManaged();
    public sealed virtual void set_IsManaged(Nullable`1<bool> value);
    public sealed virtual Nullable`1<DateTime> get_LastDirSyncTime();
    public sealed virtual void set_LastDirSyncTime(Nullable`1<DateTime> value);
    private sealed virtual override IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IDeviceFetcher.get_RegisteredOwners();
    public IList`1<DirectoryObject> get_RegisteredOwners();
    public void set_RegisteredOwners(IList`1<DirectoryObject> value);
    private sealed virtual override IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IDevice.get_RegisteredOwners();
    private sealed virtual override IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IDeviceFetcher.get_RegisteredUsers();
    public IList`1<DirectoryObject> get_RegisteredUsers();
    public void set_RegisteredUsers(IList`1<DirectoryObject> value);
    private sealed virtual override IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IDevice.get_RegisteredUsers();
    private sealed virtual override Task`1<IDevice> Microsoft.Azure.ActiveDirectory.GraphClient.IDeviceFetcher.ExecuteAsync();
    private sealed virtual override IDeviceFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDeviceFetcher.Expand(Expression`1<Func`2<IDevice, TTarget>> navigationPropertyAccessor);
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_AlternativeSecurityIds>b__0();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_AlternativeSecurityIds>b__2();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_DevicePhysicalIds>b__4();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_DevicePhysicalIds>b__6();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_RegisteredOwners>b__8();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_RegisteredOwners>b__a();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_RegisteredUsers>b__c();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_RegisteredUsers>b__e();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.ActiveDirectory.GraphClient.DeviceCollection : QueryableSet`2<IDevice, Device> {
    public IDeviceFetcher Item { get; }
    internal DeviceCollection(DataServiceQuery inner, DataServiceContextWrapper context, object entity, string path);
    public sealed virtual IDeviceFetcher GetByObjectId(string objectId);
    public sealed virtual IDeviceFetcher get_Item(string objectId);
    public sealed virtual Task`1<IPagedCollection`1<IDevice>> ExecuteAsync();
    public sealed virtual Task AddDeviceAsync(IDevice item, bool deferredSave);
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DeviceCollection/<<ExecuteAsync>b__2>d__3")]
[DebuggerStepThroughAttribute]
[CompilerGeneratedAttribute]
private Task`1<IPagedCollection`1<IDevice>> <ExecuteAsync>b__2();
}
[DataServiceKeyAttribute("ObjectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.DeviceConfiguration : DirectoryObject {
    private NonEntityTypeCollectionImpl`1<Byte[]> _publicIssuerCertificates;
    private NonEntityTypeCollectionImpl`1<Byte[]> _cloudPublicIssuerCertificates;
    private Nullable`1<int> _registrationQuota;
    private Nullable`1<int> _maximumRegistrationInactivityPeriod;
    [LowerCasePropertyAttribute]
public IList`1<Byte[]> PublicIssuerCertificates { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<Byte[]> CloudPublicIssuerCertificates { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<int> RegistrationQuota { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<int> MaximumRegistrationInactivityPeriod { get; public set; }
    internal DeviceConfiguration(bool dontCreateProxy);
    protected DeviceConfiguration(GraphObject proxy);
    public sealed virtual IList`1<Byte[]> get_PublicIssuerCertificates();
    public void set_PublicIssuerCertificates(IList`1<Byte[]> value);
    public sealed virtual IList`1<Byte[]> get_CloudPublicIssuerCertificates();
    public void set_CloudPublicIssuerCertificates(IList`1<Byte[]> value);
    public sealed virtual Nullable`1<int> get_RegistrationQuota();
    public sealed virtual void set_RegistrationQuota(Nullable`1<int> value);
    public sealed virtual Nullable`1<int> get_MaximumRegistrationInactivityPeriod();
    public sealed virtual void set_MaximumRegistrationInactivityPeriod(Nullable`1<int> value);
    private sealed virtual override Task`1<IDeviceConfiguration> Microsoft.Azure.ActiveDirectory.GraphClient.IDeviceConfigurationFetcher.ExecuteAsync();
    private sealed virtual override IDeviceConfigurationFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDeviceConfigurationFetcher.Expand(Expression`1<Func`2<IDeviceConfiguration, TTarget>> navigationPropertyAccessor);
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_PublicIssuerCertificates>b__0();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_PublicIssuerCertificates>b__2();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_CloudPublicIssuerCertificates>b__4();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_CloudPublicIssuerCertificates>b__6();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.DeviceConfigurationFetcher : DirectoryObjectFetcher {
    private IReadOnlyQueryableSet`1<IDeviceConfiguration> _query;
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DeviceConfigurationFetcher/<ExecuteAsync>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IDeviceConfiguration> ExecuteAsync();
    public sealed virtual IDeviceConfigurationFetcher Expand(Expression`1<Func`2<IDeviceConfiguration, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IDeviceConfiguration> EnsureQuery();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.DeviceFetcher : DirectoryObjectFetcher {
    private IDirectoryObjectCollection _registeredOwners;
    private IDirectoryObjectCollection _registeredUsers;
    private IReadOnlyQueryableSet`1<IDevice> _query;
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection RegisteredOwners { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection RegisteredUsers { get; }
    public sealed virtual IDirectoryObjectCollection get_RegisteredOwners();
    public sealed virtual IDirectoryObjectCollection get_RegisteredUsers();
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DeviceFetcher/<ExecuteAsync>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IDevice> ExecuteAsync();
    public sealed virtual IDeviceFetcher Expand(Expression`1<Func`2<IDevice, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IDevice> EnsureQuery();
}
[DataServiceKeyAttribute("ObjectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.DirectoryLinkChange : DirectoryObject {
    private string _associationType;
    private string _sourceObjectId;
    private string _sourceObjectType;
    private string _sourceObjectUri;
    private string _targetObjectId;
    private string _targetObjectType;
    private string _targetObjectUri;
    [LowerCasePropertyAttribute]
public string AssociationType { get; public set; }
    [LowerCasePropertyAttribute]
public string SourceObjectId { get; public set; }
    [LowerCasePropertyAttribute]
public string SourceObjectType { get; public set; }
    [LowerCasePropertyAttribute]
public string SourceObjectUri { get; public set; }
    [LowerCasePropertyAttribute]
public string TargetObjectId { get; public set; }
    [LowerCasePropertyAttribute]
public string TargetObjectType { get; public set; }
    [LowerCasePropertyAttribute]
public string TargetObjectUri { get; public set; }
    internal DirectoryLinkChange(bool dontCreateProxy);
    protected DirectoryLinkChange(GraphObject proxy);
    public sealed virtual string get_AssociationType();
    public sealed virtual void set_AssociationType(string value);
    public sealed virtual string get_SourceObjectId();
    public sealed virtual void set_SourceObjectId(string value);
    public sealed virtual string get_SourceObjectType();
    public sealed virtual void set_SourceObjectType(string value);
    public sealed virtual string get_SourceObjectUri();
    public sealed virtual void set_SourceObjectUri(string value);
    public sealed virtual string get_TargetObjectId();
    public sealed virtual void set_TargetObjectId(string value);
    public sealed virtual string get_TargetObjectType();
    public sealed virtual void set_TargetObjectType(string value);
    public sealed virtual string get_TargetObjectUri();
    public sealed virtual void set_TargetObjectUri(string value);
    private sealed virtual override Task`1<IDirectoryLinkChange> Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryLinkChangeFetcher.ExecuteAsync();
    private sealed virtual override IDirectoryLinkChangeFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryLinkChangeFetcher.Expand(Expression`1<Func`2<IDirectoryLinkChange, TTarget>> navigationPropertyAccessor);
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.DirectoryLinkChangeFetcher : DirectoryObjectFetcher {
    private IReadOnlyQueryableSet`1<IDirectoryLinkChange> _query;
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DirectoryLinkChangeFetcher/<ExecuteAsync>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IDirectoryLinkChange> ExecuteAsync();
    public sealed virtual IDirectoryLinkChangeFetcher Expand(Expression`1<Func`2<IDirectoryLinkChange, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IDirectoryLinkChange> EnsureQuery();
}
[DataServiceKeyAttribute("ObjectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.DirectoryObject : GraphObject {
    private string _objectType;
    private string _objectId;
    private Nullable`1<DateTime> _deletionTimestamp;
    private DirectoryObject _createdOnBehalfOf;
    private IDirectoryObjectCollection _createdObjectsFetcher;
    private EntityCollectionImpl`1<DirectoryObject> _createdObjects;
    private DirectoryObject _manager;
    private IDirectoryObjectCollection _directReportsFetcher;
    private EntityCollectionImpl`1<DirectoryObject> _directReports;
    private IDirectoryObjectCollection _membersFetcher;
    private EntityCollectionImpl`1<DirectoryObject> _members;
    private IDirectoryObjectCollection _memberOfFetcher;
    private EntityCollectionImpl`1<DirectoryObject> _memberOf;
    private IDirectoryObjectCollection _ownersFetcher;
    private EntityCollectionImpl`1<DirectoryObject> _owners;
    private IDirectoryObjectCollection _ownedObjectsFetcher;
    private EntityCollectionImpl`1<DirectoryObject> _ownedObjects;
    [LowerCasePropertyAttribute]
public string ObjectType { get; public set; }
    [LowerCasePropertyAttribute]
public string ObjectId { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> DeletionTimestamp { get; public set; }
    [LowerCasePropertyAttribute]
private IDirectoryObject Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObject.CreatedOnBehalfOf { get; private set; }
    private IDirectoryObjectFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.CreatedOnBehalfOf { get; }
    [LowerCasePropertyAttribute]
public DirectoryObject CreatedOnBehalfOf { get; public set; }
    [LowerCasePropertyAttribute]
private IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.CreatedObjects { get; }
    [LowerCasePropertyAttribute]
public IList`1<DirectoryObject> CreatedObjects { get; public set; }
    private IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObject.CreatedObjects { get; }
    [LowerCasePropertyAttribute]
private IDirectoryObject Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObject.Manager { get; private set; }
    private IDirectoryObjectFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.Manager { get; }
    [LowerCasePropertyAttribute]
public DirectoryObject Manager { get; public set; }
    [LowerCasePropertyAttribute]
private IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.DirectReports { get; }
    [LowerCasePropertyAttribute]
public IList`1<DirectoryObject> DirectReports { get; public set; }
    private IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObject.DirectReports { get; }
    [LowerCasePropertyAttribute]
private IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.Members { get; }
    [LowerCasePropertyAttribute]
public IList`1<DirectoryObject> Members { get; public set; }
    private IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObject.Members { get; }
    [LowerCasePropertyAttribute]
private IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.MemberOf { get; }
    [LowerCasePropertyAttribute]
public IList`1<DirectoryObject> MemberOf { get; public set; }
    private IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObject.MemberOf { get; }
    [LowerCasePropertyAttribute]
private IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.Owners { get; }
    [LowerCasePropertyAttribute]
public IList`1<DirectoryObject> Owners { get; public set; }
    private IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObject.Owners { get; }
    [LowerCasePropertyAttribute]
private IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.OwnedObjects { get; }
    [LowerCasePropertyAttribute]
public IList`1<DirectoryObject> OwnedObjects { get; public set; }
    private IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObject.OwnedObjects { get; }
    internal DirectoryObject(bool dontCreateProxy);
    protected DirectoryObject(GraphObject proxy);
    protected Uri UpcastUri(Uri uri, string type);
    protected string UpcastPath(string path, string type);
    private string UpcastInternal(string path, string type);
    public sealed virtual string get_ObjectType();
    public sealed virtual void set_ObjectType(string value);
    public sealed virtual string get_ObjectId();
    public sealed virtual void set_ObjectId(string value);
    public sealed virtual Nullable`1<DateTime> get_DeletionTimestamp();
    public sealed virtual void set_DeletionTimestamp(Nullable`1<DateTime> value);
    private sealed virtual override IDirectoryObject Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObject.get_CreatedOnBehalfOf();
    private sealed virtual override void Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObject.set_CreatedOnBehalfOf(IDirectoryObject value);
    private sealed virtual override IDirectoryObjectFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.get_CreatedOnBehalfOf();
    public DirectoryObject get_CreatedOnBehalfOf();
    public void set_CreatedOnBehalfOf(DirectoryObject value);
    private sealed virtual override IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.get_CreatedObjects();
    public IList`1<DirectoryObject> get_CreatedObjects();
    public void set_CreatedObjects(IList`1<DirectoryObject> value);
    private sealed virtual override IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObject.get_CreatedObjects();
    private sealed virtual override IDirectoryObject Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObject.get_Manager();
    private sealed virtual override void Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObject.set_Manager(IDirectoryObject value);
    private sealed virtual override IDirectoryObjectFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.get_Manager();
    public DirectoryObject get_Manager();
    public void set_Manager(DirectoryObject value);
    private sealed virtual override IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.get_DirectReports();
    public IList`1<DirectoryObject> get_DirectReports();
    public void set_DirectReports(IList`1<DirectoryObject> value);
    private sealed virtual override IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObject.get_DirectReports();
    private sealed virtual override IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.get_Members();
    public IList`1<DirectoryObject> get_Members();
    public void set_Members(IList`1<DirectoryObject> value);
    private sealed virtual override IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObject.get_Members();
    private sealed virtual override IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.get_MemberOf();
    public IList`1<DirectoryObject> get_MemberOf();
    public void set_MemberOf(IList`1<DirectoryObject> value);
    private sealed virtual override IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObject.get_MemberOf();
    private sealed virtual override IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.get_Owners();
    public IList`1<DirectoryObject> get_Owners();
    public void set_Owners(IList`1<DirectoryObject> value);
    private sealed virtual override IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObject.get_Owners();
    private sealed virtual override IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.get_OwnedObjects();
    public IList`1<DirectoryObject> get_OwnedObjects();
    public void set_OwnedObjects(IList`1<DirectoryObject> value);
    private sealed virtual override IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObject.get_OwnedObjects();
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DirectoryObject/<CheckMemberGroupsAsync>d__18")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IEnumerable`1<string>> CheckMemberGroupsAsync(ICollection`1<string> groupIds);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DirectoryObject/<GetMemberGroupsAsync>d__1d")]
public sealed virtual Task`1<IEnumerable`1<string>> GetMemberGroupsAsync(Nullable`1<bool> securityEnabledOnly);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DirectoryObject/<GetMemberObjectsAsync>d__22")]
public sealed virtual Task`1<IEnumerable`1<string>> GetMemberObjectsAsync(Nullable`1<bool> securityEnabledOnly);
    private sealed virtual override Task`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.ExecuteAsync();
    private sealed virtual override IDirectoryObjectFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.Expand(Expression`1<Func`2<IDirectoryObject, TTarget>> navigationPropertyAccessor);
    private sealed virtual override IExtensionPropertyFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.ToExtensionProperty();
    private sealed virtual override IServiceEndpointFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.ToServiceEndpoint();
    private sealed virtual override IApplicationFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.ToApplication();
    private sealed virtual override IAppRoleAssignmentFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.ToAppRoleAssignment();
    private sealed virtual override IContactFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.ToContact();
    private sealed virtual override IContractFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.ToContract();
    private sealed virtual override IDeviceFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.ToDevice();
    private sealed virtual override IDeviceConfigurationFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.ToDeviceConfiguration();
    private sealed virtual override IDirectoryLinkChangeFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.ToDirectoryLinkChange();
    private sealed virtual override IDirectoryRoleFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.ToDirectoryRole();
    private sealed virtual override IDirectoryRoleTemplateFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.ToDirectoryRoleTemplate();
    private sealed virtual override IGroupFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.ToGroup();
    private sealed virtual override IPolicyFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.ToPolicy();
    private sealed virtual override IServicePrincipalFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.ToServicePrincipal();
    private sealed virtual override ITenantDetailFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.ToTenantDetail();
    private sealed virtual override IUserFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher.ToUser();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_CreatedObjects>b__0();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_CreatedObjects>b__2();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_DirectReports>b__4();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_DirectReports>b__6();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_Members>b__8();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_Members>b__a();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_MemberOf>b__c();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_MemberOf>b__e();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_Owners>b__10();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_Owners>b__12();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_OwnedObjects>b__14();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_OwnedObjects>b__16();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.ActiveDirectory.GraphClient.DirectoryObjectCollection : QueryableSet`2<IDirectoryObject, DirectoryObject> {
    public IDirectoryObjectFetcher Item { get; }
    internal DirectoryObjectCollection(DataServiceQuery inner, DataServiceContextWrapper context, object entity, string path);
    public sealed virtual IDirectoryObjectFetcher GetByObjectId(string objectId);
    public sealed virtual IDirectoryObjectFetcher get_Item(string objectId);
    public sealed virtual Task`1<IPagedCollection`1<IDirectoryObject>> ExecuteAsync();
    public sealed virtual Task AddDirectoryObjectAsync(IDirectoryObject item, bool deferredSave);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DirectoryObjectCollection/<<ExecuteAsync>b__2>d__3")]
[CompilerGeneratedAttribute]
private Task`1<IPagedCollection`1<IDirectoryObject>> <ExecuteAsync>b__2();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.DirectoryObjectFetcher : RestShallowObjectFetcher {
    private DirectoryObjectFetcher _createdOnBehalfOf;
    private IDirectoryObjectCollection _createdObjects;
    private DirectoryObjectFetcher _manager;
    private IDirectoryObjectCollection _directReports;
    private IDirectoryObjectCollection _members;
    private IDirectoryObjectCollection _memberOf;
    private IDirectoryObjectCollection _owners;
    private IDirectoryObjectCollection _ownedObjects;
    private IReadOnlyQueryableSet`1<IDirectoryObject> _query;
    [LowerCasePropertyAttribute]
public IDirectoryObjectFetcher CreatedOnBehalfOf { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection CreatedObjects { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectFetcher Manager { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection DirectReports { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection Members { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection MemberOf { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection Owners { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection OwnedObjects { get; }
    protected Uri UpcastUri(Uri uri, string type);
    protected string UpcastPath(string path, string type);
    private string UpcastInternal(string path, string type);
    public sealed virtual IDirectoryObjectFetcher get_CreatedOnBehalfOf();
    public sealed virtual IDirectoryObjectCollection get_CreatedObjects();
    public sealed virtual IDirectoryObjectFetcher get_Manager();
    public sealed virtual IDirectoryObjectCollection get_DirectReports();
    public sealed virtual IDirectoryObjectCollection get_Members();
    public sealed virtual IDirectoryObjectCollection get_MemberOf();
    public sealed virtual IDirectoryObjectCollection get_Owners();
    public sealed virtual IDirectoryObjectCollection get_OwnedObjects();
    public sealed virtual IExtensionPropertyFetcher ToExtensionProperty();
    public sealed virtual IServiceEndpointFetcher ToServiceEndpoint();
    public sealed virtual IApplicationFetcher ToApplication();
    public sealed virtual IAppRoleAssignmentFetcher ToAppRoleAssignment();
    public sealed virtual IContactFetcher ToContact();
    public sealed virtual IContractFetcher ToContract();
    public sealed virtual IDeviceFetcher ToDevice();
    public sealed virtual IDeviceConfigurationFetcher ToDeviceConfiguration();
    public sealed virtual IDirectoryLinkChangeFetcher ToDirectoryLinkChange();
    public sealed virtual IDirectoryRoleFetcher ToDirectoryRole();
    public sealed virtual IDirectoryRoleTemplateFetcher ToDirectoryRoleTemplate();
    public sealed virtual IGroupFetcher ToGroup();
    public sealed virtual IPolicyFetcher ToPolicy();
    public sealed virtual IServicePrincipalFetcher ToServicePrincipal();
    public sealed virtual ITenantDetailFetcher ToTenantDetail();
    public sealed virtual IUserFetcher ToUser();
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DirectoryObjectFetcher/<ExecuteAsync>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IDirectoryObject> ExecuteAsync();
    public sealed virtual IDirectoryObjectFetcher Expand(Expression`1<Func`2<IDirectoryObject, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IDirectoryObject> EnsureQuery();
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DirectoryObjectFetcher/<CheckMemberGroupsAsync>d__4")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IEnumerable`1<string>> CheckMemberGroupsAsync(ICollection`1<string> groupIds);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DirectoryObjectFetcher/<GetMemberGroupsAsync>d__9")]
public sealed virtual Task`1<IEnumerable`1<string>> GetMemberGroupsAsync(Nullable`1<bool> securityEnabledOnly);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DirectoryObjectFetcher/<GetMemberObjectsAsync>d__e")]
public sealed virtual Task`1<IEnumerable`1<string>> GetMemberObjectsAsync(Nullable`1<bool> securityEnabledOnly);
}
[DataServiceKeyAttribute("ObjectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.DirectoryRole : DirectoryObject {
    private string _description;
    private string _displayName;
    private Nullable`1<bool> _isSystem;
    private Nullable`1<bool> _roleDisabled;
    private string _roleTemplateId;
    [LowerCasePropertyAttribute]
public string Description { get; public set; }
    [LowerCasePropertyAttribute]
public string DisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> IsSystem { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> RoleDisabled { get; public set; }
    [LowerCasePropertyAttribute]
public string RoleTemplateId { get; public set; }
    internal DirectoryRole(bool dontCreateProxy);
    protected DirectoryRole(GraphObject proxy);
    public sealed virtual string get_Description();
    public sealed virtual void set_Description(string value);
    public sealed virtual string get_DisplayName();
    public sealed virtual void set_DisplayName(string value);
    public sealed virtual Nullable`1<bool> get_IsSystem();
    public sealed virtual void set_IsSystem(Nullable`1<bool> value);
    public sealed virtual Nullable`1<bool> get_RoleDisabled();
    public sealed virtual void set_RoleDisabled(Nullable`1<bool> value);
    public sealed virtual string get_RoleTemplateId();
    public sealed virtual void set_RoleTemplateId(string value);
    private sealed virtual override Task`1<IDirectoryRole> Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryRoleFetcher.ExecuteAsync();
    private sealed virtual override IDirectoryRoleFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryRoleFetcher.Expand(Expression`1<Func`2<IDirectoryRole, TTarget>> navigationPropertyAccessor);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.ActiveDirectory.GraphClient.DirectoryRoleCollection : QueryableSet`2<IDirectoryRole, DirectoryRole> {
    public IDirectoryRoleFetcher Item { get; }
    internal DirectoryRoleCollection(DataServiceQuery inner, DataServiceContextWrapper context, object entity, string path);
    public sealed virtual IDirectoryRoleFetcher GetByObjectId(string objectId);
    public sealed virtual IDirectoryRoleFetcher get_Item(string objectId);
    public sealed virtual Task`1<IPagedCollection`1<IDirectoryRole>> ExecuteAsync();
    public sealed virtual Task AddDirectoryRoleAsync(IDirectoryRole item, bool deferredSave);
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DirectoryRoleCollection/<<ExecuteAsync>b__2>d__3")]
[DebuggerStepThroughAttribute]
[CompilerGeneratedAttribute]
private Task`1<IPagedCollection`1<IDirectoryRole>> <ExecuteAsync>b__2();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.DirectoryRoleFetcher : DirectoryObjectFetcher {
    private IReadOnlyQueryableSet`1<IDirectoryRole> _query;
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DirectoryRoleFetcher/<ExecuteAsync>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IDirectoryRole> ExecuteAsync();
    public sealed virtual IDirectoryRoleFetcher Expand(Expression`1<Func`2<IDirectoryRole, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IDirectoryRole> EnsureQuery();
}
[DataServiceKeyAttribute("ObjectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.DirectoryRoleTemplate : DirectoryObject {
    private string _description;
    private string _displayName;
    [LowerCasePropertyAttribute]
public string Description { get; public set; }
    [LowerCasePropertyAttribute]
public string DisplayName { get; public set; }
    internal DirectoryRoleTemplate(bool dontCreateProxy);
    protected DirectoryRoleTemplate(GraphObject proxy);
    public sealed virtual string get_Description();
    public sealed virtual void set_Description(string value);
    public sealed virtual string get_DisplayName();
    public sealed virtual void set_DisplayName(string value);
    private sealed virtual override Task`1<IDirectoryRoleTemplate> Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryRoleTemplateFetcher.ExecuteAsync();
    private sealed virtual override IDirectoryRoleTemplateFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryRoleTemplateFetcher.Expand(Expression`1<Func`2<IDirectoryRoleTemplate, TTarget>> navigationPropertyAccessor);
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.DirectoryRoleTemplateFetcher : DirectoryObjectFetcher {
    private IReadOnlyQueryableSet`1<IDirectoryRoleTemplate> _query;
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DirectoryRoleTemplateFetcher/<ExecuteAsync>d__0")]
public sealed virtual Task`1<IDirectoryRoleTemplate> ExecuteAsync();
    public sealed virtual IDirectoryRoleTemplateFetcher Expand(Expression`1<Func`2<IDirectoryRoleTemplate, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IDirectoryRoleTemplate> EnsureQuery();
}
[DataServiceKeyAttribute("Name")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Domain : GraphObject {
    private string _authenticationType;
    private string _availabilityStatus;
    private bool _isAdminManaged;
    private bool _isDefault;
    private bool _isInitial;
    private bool _isRoot;
    private bool _isVerified;
    private string _name;
    private NonEntityTypeCollectionImpl`1<string> _supportedServices;
    private ForceDeleteState _forceDeleteState;
    private IDomainDnsRecordCollection _serviceConfigurationRecordsFetcher;
    private EntityCollectionImpl`1<DomainDnsRecord> _serviceConfigurationRecords;
    private IDomainDnsRecordCollection _verificationDnsRecordsFetcher;
    private EntityCollectionImpl`1<DomainDnsRecord> _verificationDnsRecords;
    private IDirectoryObjectCollection _domainNameReferencesFetcher;
    private EntityCollectionImpl`1<DirectoryObject> _domainNameReferences;
    [LowerCasePropertyAttribute]
public string AuthenticationType { get; public set; }
    [LowerCasePropertyAttribute]
public string AvailabilityStatus { get; public set; }
    [LowerCasePropertyAttribute]
public bool IsAdminManaged { get; public set; }
    [LowerCasePropertyAttribute]
public bool IsDefault { get; public set; }
    [LowerCasePropertyAttribute]
public bool IsInitial { get; public set; }
    [LowerCasePropertyAttribute]
public bool IsRoot { get; public set; }
    [LowerCasePropertyAttribute]
public bool IsVerified { get; public set; }
    [LowerCasePropertyAttribute]
public string Name { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> SupportedServices { get; public set; }
    [LowerCasePropertyAttribute]
public ForceDeleteState ForceDeleteState { get; public set; }
    [LowerCasePropertyAttribute]
private IDomainDnsRecordCollection Microsoft.Azure.ActiveDirectory.GraphClient.IDomainFetcher.ServiceConfigurationRecords { get; }
    [LowerCasePropertyAttribute]
public IList`1<DomainDnsRecord> ServiceConfigurationRecords { get; public set; }
    private IPagedCollection`1<IDomainDnsRecord> Microsoft.Azure.ActiveDirectory.GraphClient.IDomain.ServiceConfigurationRecords { get; }
    [LowerCasePropertyAttribute]
private IDomainDnsRecordCollection Microsoft.Azure.ActiveDirectory.GraphClient.IDomainFetcher.VerificationDnsRecords { get; }
    [LowerCasePropertyAttribute]
public IList`1<DomainDnsRecord> VerificationDnsRecords { get; public set; }
    private IPagedCollection`1<IDomainDnsRecord> Microsoft.Azure.ActiveDirectory.GraphClient.IDomain.VerificationDnsRecords { get; }
    [LowerCasePropertyAttribute]
private IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IDomainFetcher.DomainNameReferences { get; }
    [LowerCasePropertyAttribute]
public IList`1<DirectoryObject> DomainNameReferences { get; public set; }
    private IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IDomain.DomainNameReferences { get; }
    internal Domain(bool dontCreateProxy);
    protected Domain(GraphObject proxy);
    protected Uri UpcastUri(Uri uri, string type);
    protected string UpcastPath(string path, string type);
    private string UpcastInternal(string path, string type);
    public sealed virtual string get_AuthenticationType();
    public sealed virtual void set_AuthenticationType(string value);
    public sealed virtual string get_AvailabilityStatus();
    public sealed virtual void set_AvailabilityStatus(string value);
    public sealed virtual bool get_IsAdminManaged();
    public sealed virtual void set_IsAdminManaged(bool value);
    public sealed virtual bool get_IsDefault();
    public sealed virtual void set_IsDefault(bool value);
    public sealed virtual bool get_IsInitial();
    public sealed virtual void set_IsInitial(bool value);
    public sealed virtual bool get_IsRoot();
    public sealed virtual void set_IsRoot(bool value);
    public sealed virtual bool get_IsVerified();
    public sealed virtual void set_IsVerified(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual IList`1<string> get_SupportedServices();
    public void set_SupportedServices(IList`1<string> value);
    public sealed virtual ForceDeleteState get_ForceDeleteState();
    public sealed virtual void set_ForceDeleteState(ForceDeleteState value);
    private sealed virtual override IDomainDnsRecordCollection Microsoft.Azure.ActiveDirectory.GraphClient.IDomainFetcher.get_ServiceConfigurationRecords();
    public IList`1<DomainDnsRecord> get_ServiceConfigurationRecords();
    public void set_ServiceConfigurationRecords(IList`1<DomainDnsRecord> value);
    private sealed virtual override IPagedCollection`1<IDomainDnsRecord> Microsoft.Azure.ActiveDirectory.GraphClient.IDomain.get_ServiceConfigurationRecords();
    private sealed virtual override IDomainDnsRecordCollection Microsoft.Azure.ActiveDirectory.GraphClient.IDomainFetcher.get_VerificationDnsRecords();
    public IList`1<DomainDnsRecord> get_VerificationDnsRecords();
    public void set_VerificationDnsRecords(IList`1<DomainDnsRecord> value);
    private sealed virtual override IPagedCollection`1<IDomainDnsRecord> Microsoft.Azure.ActiveDirectory.GraphClient.IDomain.get_VerificationDnsRecords();
    private sealed virtual override IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IDomainFetcher.get_DomainNameReferences();
    public IList`1<DirectoryObject> get_DomainNameReferences();
    public void set_DomainNameReferences(IList`1<DirectoryObject> value);
    private sealed virtual override IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IDomain.get_DomainNameReferences();
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.Domain/<VerifyAsync>d__10")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IDomain> VerifyAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.Domain/<ForceDeleteAsync>d__15")]
[DebuggerStepThroughAttribute]
public sealed virtual Task ForceDeleteAsync(Nullable`1<bool> disableUserAccounts);
    private sealed virtual override Task`1<IDomain> Microsoft.Azure.ActiveDirectory.GraphClient.IDomainFetcher.ExecuteAsync();
    private sealed virtual override IDomainFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDomainFetcher.Expand(Expression`1<Func`2<IDomain, TTarget>> navigationPropertyAccessor);
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_SupportedServices>b__0();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_SupportedServices>b__2();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_ServiceConfigurationRecords>b__4();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_ServiceConfigurationRecords>b__6();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_VerificationDnsRecords>b__8();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_VerificationDnsRecords>b__a();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_DomainNameReferences>b__c();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_DomainNameReferences>b__e();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.ActiveDirectory.GraphClient.DomainCollection : QueryableSet`2<IDomain, Domain> {
    public IDomainFetcher Item { get; }
    internal DomainCollection(DataServiceQuery inner, DataServiceContextWrapper context, object entity, string path);
    public sealed virtual IDomainFetcher GetByName(string name);
    public sealed virtual IDomainFetcher get_Item(string name);
    public sealed virtual Task`1<IPagedCollection`1<IDomain>> ExecuteAsync();
    public sealed virtual Task AddDomainAsync(IDomain item, bool deferredSave);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DomainCollection/<<ExecuteAsync>b__2>d__3")]
private Task`1<IPagedCollection`1<IDomain>> <ExecuteAsync>b__2();
}
[DataServiceKeyAttribute("RecordType")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.DomainDnsCnameRecord : DomainDnsRecord {
    private string _canonicalName;
    [LowerCasePropertyAttribute]
public string CanonicalName { get; public set; }
    internal DomainDnsCnameRecord(bool dontCreateProxy);
    protected DomainDnsCnameRecord(GraphObject proxy);
    public sealed virtual string get_CanonicalName();
    public sealed virtual void set_CanonicalName(string value);
    private sealed virtual override Task`1<IDomainDnsCnameRecord> Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsCnameRecordFetcher.ExecuteAsync();
    private sealed virtual override IDomainDnsCnameRecordFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsCnameRecordFetcher.Expand(Expression`1<Func`2<IDomainDnsCnameRecord, TTarget>> navigationPropertyAccessor);
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.DomainDnsCnameRecordFetcher : DomainDnsRecordFetcher {
    private IReadOnlyQueryableSet`1<IDomainDnsCnameRecord> _query;
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DomainDnsCnameRecordFetcher/<ExecuteAsync>d__0")]
public sealed virtual Task`1<IDomainDnsCnameRecord> ExecuteAsync();
    public sealed virtual IDomainDnsCnameRecordFetcher Expand(Expression`1<Func`2<IDomainDnsCnameRecord, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IDomainDnsCnameRecord> EnsureQuery();
}
[DataServiceKeyAttribute("RecordType")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.DomainDnsMxRecord : DomainDnsRecord {
    private string _mailExchange;
    private Nullable`1<int> _preference;
    [LowerCasePropertyAttribute]
public string MailExchange { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<int> Preference { get; public set; }
    internal DomainDnsMxRecord(bool dontCreateProxy);
    protected DomainDnsMxRecord(GraphObject proxy);
    public sealed virtual string get_MailExchange();
    public sealed virtual void set_MailExchange(string value);
    public sealed virtual Nullable`1<int> get_Preference();
    public sealed virtual void set_Preference(Nullable`1<int> value);
    private sealed virtual override Task`1<IDomainDnsMxRecord> Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsMxRecordFetcher.ExecuteAsync();
    private sealed virtual override IDomainDnsMxRecordFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsMxRecordFetcher.Expand(Expression`1<Func`2<IDomainDnsMxRecord, TTarget>> navigationPropertyAccessor);
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.DomainDnsMxRecordFetcher : DomainDnsRecordFetcher {
    private IReadOnlyQueryableSet`1<IDomainDnsMxRecord> _query;
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DomainDnsMxRecordFetcher/<ExecuteAsync>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IDomainDnsMxRecord> ExecuteAsync();
    public sealed virtual IDomainDnsMxRecordFetcher Expand(Expression`1<Func`2<IDomainDnsMxRecord, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IDomainDnsMxRecord> EnsureQuery();
}
[DataServiceKeyAttribute("RecordType")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.DomainDnsRecord : GraphObject {
    private Guid _dnsRecordId;
    private bool _isOptional;
    private string _label;
    private string _recordType;
    private string _supportedService;
    private int _ttl;
    [LowerCasePropertyAttribute]
public Guid DnsRecordId { get; public set; }
    [LowerCasePropertyAttribute]
public bool IsOptional { get; public set; }
    [LowerCasePropertyAttribute]
public string Label { get; public set; }
    [LowerCasePropertyAttribute]
public string RecordType { get; public set; }
    [LowerCasePropertyAttribute]
public string SupportedService { get; public set; }
    [LowerCasePropertyAttribute]
public int Ttl { get; public set; }
    internal DomainDnsRecord(bool dontCreateProxy);
    protected DomainDnsRecord(GraphObject proxy);
    protected Uri UpcastUri(Uri uri, string type);
    protected string UpcastPath(string path, string type);
    private string UpcastInternal(string path, string type);
    public sealed virtual Guid get_DnsRecordId();
    public sealed virtual void set_DnsRecordId(Guid value);
    public sealed virtual bool get_IsOptional();
    public sealed virtual void set_IsOptional(bool value);
    public sealed virtual string get_Label();
    public sealed virtual void set_Label(string value);
    public sealed virtual string get_RecordType();
    public sealed virtual void set_RecordType(string value);
    public sealed virtual string get_SupportedService();
    public sealed virtual void set_SupportedService(string value);
    public sealed virtual int get_Ttl();
    public sealed virtual void set_Ttl(int value);
    private sealed virtual override Task`1<IDomainDnsRecord> Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsRecordFetcher.ExecuteAsync();
    private sealed virtual override IDomainDnsRecordFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsRecordFetcher.Expand(Expression`1<Func`2<IDomainDnsRecord, TTarget>> navigationPropertyAccessor);
    private sealed virtual override IDomainDnsCnameRecordFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsRecordFetcher.ToDomainDnsCnameRecord();
    private sealed virtual override IDomainDnsMxRecordFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsRecordFetcher.ToDomainDnsMxRecord();
    private sealed virtual override IDomainDnsSrvRecordFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsRecordFetcher.ToDomainDnsSrvRecord();
    private sealed virtual override IDomainDnsTxtRecordFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsRecordFetcher.ToDomainDnsTxtRecord();
    private sealed virtual override IDomainDnsUnavailableRecordFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsRecordFetcher.ToDomainDnsUnavailableRecord();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.ActiveDirectory.GraphClient.DomainDnsRecordCollection : QueryableSet`2<IDomainDnsRecord, DomainDnsRecord> {
    public IDomainDnsRecordFetcher Item { get; }
    internal DomainDnsRecordCollection(DataServiceQuery inner, DataServiceContextWrapper context, object entity, string path);
    public sealed virtual IDomainDnsRecordFetcher GetByRecordType(string recordType);
    public sealed virtual IDomainDnsRecordFetcher get_Item(string recordType);
    public sealed virtual Task`1<IPagedCollection`1<IDomainDnsRecord>> ExecuteAsync();
    public sealed virtual Task AddDomainDnsRecordAsync(IDomainDnsRecord item, bool deferredSave);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DomainDnsRecordCollection/<<ExecuteAsync>b__2>d__3")]
private Task`1<IPagedCollection`1<IDomainDnsRecord>> <ExecuteAsync>b__2();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.DomainDnsRecordFetcher : RestShallowObjectFetcher {
    private IReadOnlyQueryableSet`1<IDomainDnsRecord> _query;
    protected Uri UpcastUri(Uri uri, string type);
    protected string UpcastPath(string path, string type);
    private string UpcastInternal(string path, string type);
    public sealed virtual IDomainDnsCnameRecordFetcher ToDomainDnsCnameRecord();
    public sealed virtual IDomainDnsMxRecordFetcher ToDomainDnsMxRecord();
    public sealed virtual IDomainDnsSrvRecordFetcher ToDomainDnsSrvRecord();
    public sealed virtual IDomainDnsTxtRecordFetcher ToDomainDnsTxtRecord();
    public sealed virtual IDomainDnsUnavailableRecordFetcher ToDomainDnsUnavailableRecord();
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DomainDnsRecordFetcher/<ExecuteAsync>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IDomainDnsRecord> ExecuteAsync();
    public sealed virtual IDomainDnsRecordFetcher Expand(Expression`1<Func`2<IDomainDnsRecord, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IDomainDnsRecord> EnsureQuery();
}
[DataServiceKeyAttribute("RecordType")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.DomainDnsSrvRecord : DomainDnsRecord {
    private string _nameTarget;
    private Nullable`1<int> _port;
    private Nullable`1<int> _priority;
    private string _protocol;
    private string _service;
    private Nullable`1<int> _weight;
    [LowerCasePropertyAttribute]
public string NameTarget { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<int> Port { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<int> Priority { get; public set; }
    [LowerCasePropertyAttribute]
public string Protocol { get; public set; }
    [LowerCasePropertyAttribute]
public string Service { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<int> Weight { get; public set; }
    internal DomainDnsSrvRecord(bool dontCreateProxy);
    protected DomainDnsSrvRecord(GraphObject proxy);
    public sealed virtual string get_NameTarget();
    public sealed virtual void set_NameTarget(string value);
    public sealed virtual Nullable`1<int> get_Port();
    public sealed virtual void set_Port(Nullable`1<int> value);
    public sealed virtual Nullable`1<int> get_Priority();
    public sealed virtual void set_Priority(Nullable`1<int> value);
    public sealed virtual string get_Protocol();
    public sealed virtual void set_Protocol(string value);
    public sealed virtual string get_Service();
    public sealed virtual void set_Service(string value);
    public sealed virtual Nullable`1<int> get_Weight();
    public sealed virtual void set_Weight(Nullable`1<int> value);
    private sealed virtual override Task`1<IDomainDnsSrvRecord> Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsSrvRecordFetcher.ExecuteAsync();
    private sealed virtual override IDomainDnsSrvRecordFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsSrvRecordFetcher.Expand(Expression`1<Func`2<IDomainDnsSrvRecord, TTarget>> navigationPropertyAccessor);
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.DomainDnsSrvRecordFetcher : DomainDnsRecordFetcher {
    private IReadOnlyQueryableSet`1<IDomainDnsSrvRecord> _query;
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DomainDnsSrvRecordFetcher/<ExecuteAsync>d__0")]
public sealed virtual Task`1<IDomainDnsSrvRecord> ExecuteAsync();
    public sealed virtual IDomainDnsSrvRecordFetcher Expand(Expression`1<Func`2<IDomainDnsSrvRecord, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IDomainDnsSrvRecord> EnsureQuery();
}
[DataServiceKeyAttribute("RecordType")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.DomainDnsTxtRecord : DomainDnsRecord {
    private string _text;
    [LowerCasePropertyAttribute]
public string Text { get; public set; }
    internal DomainDnsTxtRecord(bool dontCreateProxy);
    protected DomainDnsTxtRecord(GraphObject proxy);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    private sealed virtual override Task`1<IDomainDnsTxtRecord> Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsTxtRecordFetcher.ExecuteAsync();
    private sealed virtual override IDomainDnsTxtRecordFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsTxtRecordFetcher.Expand(Expression`1<Func`2<IDomainDnsTxtRecord, TTarget>> navigationPropertyAccessor);
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.DomainDnsTxtRecordFetcher : DomainDnsRecordFetcher {
    private IReadOnlyQueryableSet`1<IDomainDnsTxtRecord> _query;
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DomainDnsTxtRecordFetcher/<ExecuteAsync>d__0")]
public sealed virtual Task`1<IDomainDnsTxtRecord> ExecuteAsync();
    public sealed virtual IDomainDnsTxtRecordFetcher Expand(Expression`1<Func`2<IDomainDnsTxtRecord, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IDomainDnsTxtRecord> EnsureQuery();
}
[DataServiceKeyAttribute("RecordType")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.DomainDnsUnavailableRecord : DomainDnsRecord {
    private string _description;
    [LowerCasePropertyAttribute]
public string Description { get; public set; }
    internal DomainDnsUnavailableRecord(bool dontCreateProxy);
    protected DomainDnsUnavailableRecord(GraphObject proxy);
    public sealed virtual string get_Description();
    public sealed virtual void set_Description(string value);
    private sealed virtual override Task`1<IDomainDnsUnavailableRecord> Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsUnavailableRecordFetcher.ExecuteAsync();
    private sealed virtual override IDomainDnsUnavailableRecordFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsUnavailableRecordFetcher.Expand(Expression`1<Func`2<IDomainDnsUnavailableRecord, TTarget>> navigationPropertyAccessor);
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.DomainDnsUnavailableRecordFetcher : DomainDnsRecordFetcher {
    private IReadOnlyQueryableSet`1<IDomainDnsUnavailableRecord> _query;
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DomainDnsUnavailableRecordFetcher/<ExecuteAsync>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IDomainDnsUnavailableRecord> ExecuteAsync();
    public sealed virtual IDomainDnsUnavailableRecordFetcher Expand(Expression`1<Func`2<IDomainDnsUnavailableRecord, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IDomainDnsUnavailableRecord> EnsureQuery();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.DomainFetcher : RestShallowObjectFetcher {
    private IDomainDnsRecordCollection _serviceConfigurationRecords;
    private IDomainDnsRecordCollection _verificationDnsRecords;
    private IDirectoryObjectCollection _domainNameReferences;
    private IReadOnlyQueryableSet`1<IDomain> _query;
    [LowerCasePropertyAttribute]
public IDomainDnsRecordCollection ServiceConfigurationRecords { get; }
    [LowerCasePropertyAttribute]
public IDomainDnsRecordCollection VerificationDnsRecords { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection DomainNameReferences { get; }
    protected Uri UpcastUri(Uri uri, string type);
    protected string UpcastPath(string path, string type);
    private string UpcastInternal(string path, string type);
    public sealed virtual IDomainDnsRecordCollection get_ServiceConfigurationRecords();
    public sealed virtual IDomainDnsRecordCollection get_VerificationDnsRecords();
    public sealed virtual IDirectoryObjectCollection get_DomainNameReferences();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DomainFetcher/<ExecuteAsync>d__0")]
public sealed virtual Task`1<IDomain> ExecuteAsync();
    public sealed virtual IDomainFetcher Expand(Expression`1<Func`2<IDomain, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IDomain> EnsureQuery();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DomainFetcher/<VerifyAsync>d__4")]
public sealed virtual Task`1<IDomain> VerifyAsync();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.DomainFetcher/<ForceDeleteAsync>d__9")]
public sealed virtual Task ForceDeleteAsync(Nullable`1<bool> disableUserAccounts);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.DuplicateObjectException : GraphException {
    public DuplicateObjectException(HttpStatusCode httpStatusCode, string message);
}
[AttributeUsageAttribute("4")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.EntityAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <SetName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ODataType>k__BackingField;
    public string SetName { get; public set; }
    public string ODataType { get; public set; }
    public EntityAttribute(string setName, string odataType);
    [CompilerGeneratedAttribute]
public string get_SetName();
    [CompilerGeneratedAttribute]
public void set_SetName(string value);
    [CompilerGeneratedAttribute]
public string get_ODataType();
    [CompilerGeneratedAttribute]
public void set_ODataType(string value);
}
public static class Microsoft.Azure.ActiveDirectory.GraphClient.ErrorHandling.ErrorCodes : object {
    private static Dictionary`2<string, Type> exceptionCodeMap;
    public static Dictionary`2<string, Type> ExceptionErrorCodeMap { get; }
    private static ErrorCodes();
    public static Dictionary`2<string, Type> get_ExceptionErrorCodeMap();
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.ErrorHandling.ErrorResolver : object {
    public static GraphException ParseWebException(WebException webException);
    public static GraphException ParseErrorMessageString(HttpStatusCode statusCode, string errorMessage);
    public static GraphException ResolveErrorCode(HttpStatusCode statusCode, ODataError oDataError);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.ExpiredTokenException : AuthenticationException {
    public ExpiredTokenException(HttpStatusCode httpStatusCode, string message);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.ExpressionHelper : object {
    public static MethodInfo CompareMethodInfo;
    public static MethodInfo StartsWithMethodInfo;
    private static ExpressionHelper();
    public static void ValidateBinaryExpression(BinaryExpression binaryExpression);
    public static void ValidateLeafExpression(BinaryExpression binaryExpression);
    public static void ValidateConjunctiveExpression(BinaryExpression binaryExpression);
    public static void ValidateLeafNode(Expression expression);
    public static void ValidateConjuctiveNode(Expression expression);
    public static BinaryExpression CreateEqualsExpression(Type entityType, GraphProperty propertyName, object propertyValue);
    public static BinaryExpression CreateLessThanEqualsExpression(Type entityType, GraphProperty propertyName, object propertyValue);
    public static BinaryExpression CreateGreaterThanEqualsExpression(Type entityType, GraphProperty propertyName, object propertyValue);
    public static BinaryExpression CreateConditionalExpression(Type entityType, GraphProperty propertyName, object propertyValue, ExpressionType expressionType);
    public static MemberExpression GetMemberExpression(Type entityType, GraphProperty propertyName, PropertyInfo& propertyInfo);
    public static MethodCallExpression CreateStartsWithExpression(Type entityType, GraphProperty propertyName, string propertyValue);
    public static MethodCallExpression CreateAnyExpression(Type entityType, GraphProperty propertyName, object propertyValue);
    public static BinaryExpression JoinExpressions(Expression left, Expression right, ExpressionType expressionType);
    public static string GetFormattedValue(object filterValue);
    public static string GetODataOperator(ExpressionType expressionType);
    public static string GetPropertyName(BinaryExpression binaryExpression);
    public static string GetPropertyName(MemberExpression memberExpression);
    public static string GetPropertyValue(BinaryExpression binaryExpression);
    public static string GetPropertyValue(ConstantExpression constantExpression);
    public static string GetODataConjuctiveOperator(ExpressionType expressionType);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.ExtendedErrorValue : object {
    [CompilerGeneratedAttribute]
private string <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Item { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
[DataServiceKeyAttribute("ObjectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.ExtensionProperty : DirectoryObject {
    private string _appDisplayName;
    private string _name;
    private string _dataType;
    private Nullable`1<bool> _isSyncedFromOnPremises;
    private NonEntityTypeCollectionImpl`1<string> _targetObjects;
    [LowerCasePropertyAttribute]
public string AppDisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public string Name { get; public set; }
    [LowerCasePropertyAttribute]
public string DataType { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> IsSyncedFromOnPremises { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> TargetObjects { get; public set; }
    internal ExtensionProperty(bool dontCreateProxy);
    protected ExtensionProperty(GraphObject proxy);
    public sealed virtual string get_AppDisplayName();
    public sealed virtual void set_AppDisplayName(string value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual string get_DataType();
    public sealed virtual void set_DataType(string value);
    public sealed virtual Nullable`1<bool> get_IsSyncedFromOnPremises();
    public sealed virtual void set_IsSyncedFromOnPremises(Nullable`1<bool> value);
    public sealed virtual IList`1<string> get_TargetObjects();
    public void set_TargetObjects(IList`1<string> value);
    private sealed virtual override Task`1<IExtensionProperty> Microsoft.Azure.ActiveDirectory.GraphClient.IExtensionPropertyFetcher.ExecuteAsync();
    private sealed virtual override IExtensionPropertyFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IExtensionPropertyFetcher.Expand(Expression`1<Func`2<IExtensionProperty, TTarget>> navigationPropertyAccessor);
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_TargetObjects>b__0();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_TargetObjects>b__2();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.ActiveDirectory.GraphClient.ExtensionPropertyCollection : QueryableSet`2<IExtensionProperty, ExtensionProperty> {
    public IExtensionPropertyFetcher Item { get; }
    internal ExtensionPropertyCollection(DataServiceQuery inner, DataServiceContextWrapper context, object entity, string path);
    public sealed virtual IExtensionPropertyFetcher GetByObjectId(string objectId);
    public sealed virtual IExtensionPropertyFetcher get_Item(string objectId);
    public sealed virtual Task`1<IPagedCollection`1<IExtensionProperty>> ExecuteAsync();
    public sealed virtual Task AddExtensionPropertyAsync(IExtensionProperty item, bool deferredSave);
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.ExtensionPropertyCollection/<<ExecuteAsync>b__2>d__3")]
[CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
private Task`1<IPagedCollection`1<IExtensionProperty>> <ExecuteAsync>b__2();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.ExtensionPropertyFetcher : DirectoryObjectFetcher {
    private IReadOnlyQueryableSet`1<IExtensionProperty> _query;
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.ExtensionPropertyFetcher/<ExecuteAsync>d__0")]
public sealed virtual Task`1<IExtensionProperty> ExecuteAsync();
    public sealed virtual IExtensionPropertyFetcher Expand(Expression`1<Func`2<IExtensionProperty, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IExtensionProperty> EnsureQuery();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.BatchElementResult : object {
    [CompilerGeneratedAttribute]
private IPagedCollection <SuccessResult>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <FailureResult>k__BackingField;
    public IPagedCollection SuccessResult { get; private set; }
    public Exception FailureResult { get; private set; }
    public BatchElementResult(IPagedCollection successResult);
    public BatchElementResult(Exception failureResult);
    [CompilerGeneratedAttribute]
public sealed virtual IPagedCollection get_SuccessResult();
    [CompilerGeneratedAttribute]
private void set_SuccessResult(IPagedCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_FailureResult();
    [CompilerGeneratedAttribute]
private void set_FailureResult(Exception value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.ComplexTypeBase : object {
    protected internal ComplexTypeBase _proxy;
    protected bool _isInternalProxy;
    private Func`1<Tuple`2<GraphObject, string>> _entity;
    protected ComplexTypeBase(bool dontCreateProxy);
    protected internal ComplexTypeBase(ComplexTypeBase proxy);
    internal void SetProxy(ComplexTypeBase proxy);
    internal virtual void SetContainer(Func`1<Tuple`2<GraphObject, string>> entity);
    protected internal Tuple`2<GraphObject, string> GetContainingEntity(string propertyName);
    protected internal void OnPropertyChanged(string propertyName);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.CustomTypeMapping : object {
    [CompilerGeneratedAttribute]
private Type <BuiltInType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <CustomType>k__BackingField;
    public Type BuiltInType { get; public set; }
    public Type CustomType { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_BuiltInType();
    [CompilerGeneratedAttribute]
public void set_BuiltInType(Type value);
    [CompilerGeneratedAttribute]
public Type get_CustomType();
    [CompilerGeneratedAttribute]
public void set_CustomType(Type value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.DataServiceContextWrapper : DataServiceContext {
    private object _syncLock;
    private string _accessToken;
    private Func`1<Task`1<string>> _accessTokenGetter;
    private Func`1<Task> _accessTokenSetter;
    private HashSet`1<GraphObject> _modifiedEntities;
    private string XClientStringClientTag;
    private Dictionary`2<string, string> additionalHeaders;
    private Dictionary`2<Type, Type> _customTypes;
    private Dictionary`2<Type, Type> _reverseCustomTypes;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, object>, ODataProperty> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<MethodInfo, <>f__AnonymousType0`2<MethodInfo, ParameterInfo[]>> CS$<>9__CachedAnonymousMethodDelegate21;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<MethodInfo, ParameterInfo[]>, bool> CS$<>9__CachedAnonymousMethodDelegate22;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<MethodInfo, ParameterInfo[]>, MethodInfo> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static Func`2<IReadOnlyQueryableSetBase, DataServiceRequest> CS$<>9__CachedAnonymousMethodDelegate2e;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, IEnumerable`1<string>>, string> CS$<>9__CachedAnonymousMethodDelegate81;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, IEnumerable`1<string>>, string> CS$<>9__CachedAnonymousMethodDelegate82;
    public DataServiceContextWrapper(Uri serviceRoot, DataServiceProtocolVersion maxProtocolVersion, Func`1<Task`1<string>> accessTokenGetter, IEnumerable`1<CustomTypeMapping> customTypeMappings);
    public void SetHeader(string headerName, string headerValue);
    public void UpdateObject(GraphObject entity);
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.DataServiceContextWrapper/<SetToken>d__1")]
[DebuggerStepThroughAttribute]
private Task SetToken();
    private IEnumerable`1<PropertyInfo> DeclaredAndInheritedProperties(TypeInfo typeInfo);
    internal DataServiceQuery CreateQuery(Type entityType, string entitySetName);
    internal Type DefaultResolveTypeInternal(string typeName, string fullNamespace, string languageDependentNamespace);
    internal Type DefaultResolveTypeInternal(Type clientType);
    internal string DefaultResolveNameInternal(Type clientType, string fullNamespace, string languageDependentNamespace);
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.DataServiceContextWrapper/<ExecuteSingleAsync>d__28`2")]
[DebuggerStepThroughAttribute]
public Task`1<TInterface> ExecuteSingleAsync(DataServiceQuery`1<TSource> inner);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.DataServiceContextWrapper/<ExecuteBatchAsync>d__30")]
public Task`1<IBatchElementResult[]> ExecuteBatchAsync(IReadOnlyQueryableSetBase[] queries);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.DataServiceContextWrapper/<GetStreamAsync>d__38")]
public Task`1<Stream> GetStreamAsync(Uri requestUriTmp);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.DataServiceContextWrapper/<GetReadStreamAsync>d__44")]
public Task`1<DataServiceStreamResponse> GetReadStreamAsync(GraphObject entity, string streamName, string contentType);
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.DataServiceContextWrapper/<ExecuteAsync>d__4e`2")]
[DebuggerStepThroughAttribute]
public Task`1<IPagedCollection`1<TInterface>> ExecuteAsync(DataServiceQuery`1<TSource> inner);
    public Task`1<IEnumerable`1<T>> ExecuteAsync(Uri uri, string httpMethod, bool singleResult, OperationParameter[] operationParameters);
    public Task`1<IEnumerable`1<T>> ExecuteAsync(Uri uri, string httpMethod, bool singleResult, Stream stream, OperationParameter[] operationParameters);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.DataServiceContextWrapper/<ExecuteAsyncInternal>d__59`1")]
public Task`1<IEnumerable`1<T>> ExecuteAsyncInternal(Uri uri, string httpMethod, bool singleResult, Stream stream, OperationParameter[] operationParameters);
    public Task ExecuteAsync(Uri uri, string httpMethod, OperationParameter[] operationParameters);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.DataServiceContextWrapper/<ExecuteAsync>d__66")]
public Task ExecuteAsync(Uri uri, string httpMethod, Stream stream, OperationParameter[] operationParameters);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.DataServiceContextWrapper/<ExecuteAsync>d__70`2")]
public Task`1<QueryOperationResponse`1<TSource>> ExecuteAsync(DataServiceQueryContinuation`1<TSource> token);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.DataServiceContextWrapper/<SaveChangesAsync>d__74")]
public Task`1<DataServiceResponse> SaveChangesAsync(SaveChangesOptions options);
    public Task`1<DataServiceResponse> SaveChangesAsync();
    internal static Exception ProcessException(Exception ex);
    private static Exception ProcessError(Exception outer, DataServiceClientException inner, IDictionary`2<string, string> headers);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.DataServiceContextWrapper/<ProcessErrorAsync>d__86")]
private static Task`1<Exception> ProcessErrorAsync(HttpResponseMessage response);
    private static StreamWriter WriteToStream(string contents);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9(object sender, BuildingRequestEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__a(WritingEntryArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__e(MaterializedEntityArgs args);
    [CompilerGeneratedAttribute]
private static ODataProperty <.ctor>b__d(KeyValuePair`2<string, object> i);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType0`2<MethodInfo, ParameterInfo[]> <CreateQuery>b__1e(MethodInfo i);
    [CompilerGeneratedAttribute]
private static bool <CreateQuery>b__1f(<>f__AnonymousType0`2<MethodInfo, ParameterInfo[]> <>h__TransparentIdentifier1d);
    [CompilerGeneratedAttribute]
private static MethodInfo <CreateQuery>b__20(<>f__AnonymousType0`2<MethodInfo, ParameterInfo[]> <>h__TransparentIdentifier1d);
    [CompilerGeneratedAttribute]
private static DataServiceRequest <ExecuteBatchAsync>b__2c(IReadOnlyQueryableSetBase i);
    [CompilerGeneratedAttribute]
private IAsyncResult <ExecuteBatchAsync>b__2d(DataServiceRequest[] q, AsyncCallback callback, object state);
    [CompilerGeneratedAttribute]
private OperationResponse <ExecuteAsync>b__60(IAsyncResult i);
    [CompilerGeneratedAttribute]
private QueryOperationResponse`1<TSource> <ExecuteAsync>b__6b(IAsyncResult i);
    [CompilerGeneratedAttribute]
private static string <ProcessErrorAsync>b__7e(KeyValuePair`2<string, IEnumerable`1<string>> i);
    [CompilerGeneratedAttribute]
private static string <ProcessErrorAsync>b__7f(KeyValuePair`2<string, IEnumerable`1<string>> i);
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.EntityCollectionImpl`1 : DataServiceCollection`1<T> {
    private Func`1<Tuple`2<GraphObject, string>> _entity;
    internal void SetContainer(Func`1<Tuple`2<GraphObject, string>> entity);
    protected virtual void InsertItem(int index, T item);
    protected virtual void ClearItems();
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, T item);
    private void InvokeOnEntity(Action`1<Tuple`2<GraphObject, string>> action);
    [CompilerGeneratedAttribute]
private void <ClearItems>b__3(Tuple`2<GraphObject, string> tuple);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.GraphObject : object {
    private Lazy`1<HashSet`1<string>> _changedProperties;
    private Lazy`1<IDictionary`2<string, object>> _extendedProperties;
    private Lazy`1<HashSet`1<string>> _changedExtendedProperties;
    protected internal GraphObject _proxy;
    protected internal bool _isInternalProxy;
    [CompilerGeneratedAttribute]
private DataServiceContextWrapper <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`1<IDictionary`2<string, object>> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`1<IDictionary`2<string, object>> CS$<>9__CachedAnonymousMethodDelegate3;
    protected internal GraphObject InternalProxy { get; }
    protected internal GraphObject ConcreteProxy { get; }
    internal Lazy`1<HashSet`1<string>> ChangedProperties { get; }
    internal Lazy`1<HashSet`1<string>> ChangedExtendedProperties { get; }
    internal DataServiceContextWrapper Context { get; private set; }
    protected GraphObject(bool dontCreateProxy);
    protected GraphObject(GraphObject proxy);
    protected internal GraphObject get_InternalProxy();
    protected internal GraphObject get_ConcreteProxy();
    internal void SetProxy(GraphObject proxy);
    internal Lazy`1<HashSet`1<string>> get_ChangedProperties();
    internal Lazy`1<HashSet`1<string>> get_ChangedExtendedProperties();
    public IReadOnlyDictionary`2<string, object> GetExtendedProperties();
    internal void ClearExtendedProperties();
    public void SetExtendedProperty(string name, object value);
    protected internal Tuple`2<GraphObject, string> GetContainingEntity(string propertyName);
    protected internal void OnPropertyChanged(string propertyName);
    protected internal void OnExtendedPropertyChanged(string propertyName);
    internal void ResetChanges();
    [CompilerGeneratedAttribute]
internal DataServiceContextWrapper get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(DataServiceContextWrapper value);
    public DataServiceContextWrapper GetContext();
    internal void Initialize(DataServiceContextWrapper context);
    protected internal string GetPath(string propertyName);
    protected internal Uri GetUrl();
    public sealed virtual Task UpdateAsync(bool deferredSave);
    public sealed virtual Task DeleteAsync(bool deferredSave);
    protected internal Task SaveAsNeeded(bool deferredSave);
    [CompilerGeneratedAttribute]
private static IDictionary`2<string, object> <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static IDictionary`2<string, object> <.ctor>b__2();
}
public interface Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.IBatchElementResult {
    public IPagedCollection SuccessResult { get; }
    public Exception FailureResult { get; }
    public abstract virtual IPagedCollection get_SuccessResult();
    public abstract virtual Exception get_FailureResult();
}
public interface Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.IConcreteTypeAccessor {
    public Type ConcreteType { get; }
    public Type ElementType { get; }
    public abstract virtual Type get_ConcreteType();
    public abstract virtual Type get_ElementType();
}
public interface Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.IGraphObject {
    public abstract virtual Task UpdateAsync(bool deferredSave);
    public abstract virtual Task DeleteAsync(bool deferredSave);
}
public interface Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.IPagedCollection {
    public IReadOnlyList`1<object> CurrentPage { get; }
    public bool MorePagesAvailable { get; }
    public abstract virtual IReadOnlyList`1<object> get_CurrentPage();
    public abstract virtual bool get_MorePagesAvailable();
    public abstract virtual Task`1<IPagedCollection> GetNextPageAsync();
}
public interface Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.IPagedCollection`1 {
    public IReadOnlyList`1<TElement> CurrentPage { get; }
    public bool MorePagesAvailable { get; }
    public abstract virtual IReadOnlyList`1<TElement> get_CurrentPage();
    public abstract virtual bool get_MorePagesAvailable();
    public abstract virtual Task`1<IPagedCollection`1<TElement>> GetNextPageAsync();
}
public interface Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.IReadOnlyQueryableSet`1 {
    public abstract virtual Task`1<IPagedCollection`1<TSource>> ExecuteAsync();
    public abstract virtual Task`1<TSource> ExecuteSingleAsync();
}
public interface Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.IReadOnlyQueryableSetBase {
    public DataServiceContextWrapper Context { get; }
    public DataServiceQuery Query { get; }
    public abstract virtual DataServiceContextWrapper get_Context();
    public abstract virtual DataServiceQuery get_Query();
}
public interface Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.IReadOnlyQueryableSetBase`1 {
    public abstract virtual IReadOnlyQueryableSet`1<TSource> Expand(Expression`1<Func`2<TSource, TTarget>> navigationPropertyAccessor);
    public abstract virtual IReadOnlyQueryableSet`1<TResult> OfType();
    public abstract virtual IReadOnlyQueryableSet`1<TSource> OrderBy(Expression`1<Func`2<TSource, TKey>> keySelector);
    public abstract virtual IReadOnlyQueryableSet`1<TSource> OrderByDescending(Expression`1<Func`2<TSource, TKey>> keySelector);
    public abstract virtual IReadOnlyQueryableSet`1<TResult> Select(Expression`1<Func`2<TSource, TResult>> selector);
    public abstract virtual IReadOnlyQueryableSet`1<TSource> Skip(int count);
    public abstract virtual IReadOnlyQueryableSet`1<TSource> Take(int count);
    public abstract virtual IReadOnlyQueryableSet`1<TSource> Where(Expression`1<Func`2<TSource, bool>> predicate);
}
public interface Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.IStreamFetcher {
    public string ContentType { get; }
    public abstract virtual string get_ContentType();
    public abstract virtual Task`1<DataServiceStreamResponse> DownloadAsync();
    public abstract virtual Task UploadAsync(Stream stream, string contentType, bool deferredSave, bool closeStream);
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.LowerCasePropertyAttribute : Attribute {
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.NonEntityTypeCollectionImpl`1 : Collection`1<T> {
    private Func`1<Tuple`2<GraphObject, string>> _entity;
    private static bool _isComplexType;
    private static NonEntityTypeCollectionImpl`1();
    internal void SetContainer(Func`1<Tuple`2<GraphObject, string>> entity);
    protected virtual void InsertItem(int index, T item);
    protected virtual void ClearItems();
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, T item);
    private void InvokeOnPropertyChanged();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.PagedCollection`2 : object {
    private DataServiceContextWrapper _context;
    private DataServiceQueryContinuation`1<TConcrete> _continuation;
    private IReadOnlyList`1<TElement> _currentPage;
    public bool MorePagesAvailable { get; }
    public IReadOnlyList`1<TElement> CurrentPage { get; }
    private IReadOnlyList`1<object> Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.IPagedCollection.CurrentPage { get; }
    internal PagedCollection`2(DataServiceContextWrapper context, QueryOperationResponse`1<TConcrete> qor);
    public PagedCollection`2(DataServiceContextWrapper context, DataServiceCollection`1<TConcrete> collection);
    public static PagedCollection`2<TElement, TConcrete> Create(DataServiceContextWrapper context, QueryOperationResponse`1<TConcrete> qor);
    public sealed virtual bool get_MorePagesAvailable();
    public sealed virtual IReadOnlyList`1<TElement> get_CurrentPage();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.PagedCollection`2/<GetNextPageAsync>d__0")]
public sealed virtual Task`1<IPagedCollection`1<TElement>> GetNextPageAsync();
    private sealed virtual override IReadOnlyList`1<object> Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.IPagedCollection.get_CurrentPage();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.PagedCollection`2/<Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.IPagedCollection.GetNextPageAsync>d__4")]
private sealed virtual override Task`1<IPagedCollection> Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.IPagedCollection.GetNextPageAsync();
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.QueryableSet`2 : ReadOnlyQueryableSetBase`2<TSource, TISource> {
    protected string _path;
    protected object _entity;
    internal QueryableSet`2(DataServiceQuery inner, DataServiceContextWrapper context, GraphObject entity, string path);
    internal void SetContainer(Func`1<GraphObject> entity, string property);
    protected Uri GetUrl();
    internal void Initialize(DataServiceQuery inner, DataServiceContextWrapper context, GraphObject entity, string path);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.ReadOnlyQueryableSet`2 : ReadOnlyQueryableSetBase`2<TSource, TISource> {
    internal ReadOnlyQueryableSet`2(DataServiceQuery inner, DataServiceContextWrapper context);
    public sealed virtual Task`1<IPagedCollection`1<TSource>> ExecuteAsync();
    public sealed virtual Task`1<TSource> ExecuteSingleAsync();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.ReadOnlyQueryableSet`2/<<ExecuteAsync>b__0>d__2")]
private Task`1<IPagedCollection`1<TSource>> <ExecuteAsync>b__0();
    [DebuggerStepThroughAttribute]
[CompilerGeneratedAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.ReadOnlyQueryableSet`2/<<ExecuteSingleAsync>b__5>d__7")]
private Task`1<TSource> <ExecuteSingleAsync>b__5();
}
public abstract class Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.ReadOnlyQueryableSetBase`2 : object {
    protected DataServiceQuery _inner;
    protected DataServiceContextWrapper _context;
    private Lazy`1<Type> _concreteType;
    private ExpressionVisitor _pascalCaseExpressionVisitor;
    [CompilerGeneratedAttribute]
private static Func`2<CustomAttributeData, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`1<Type> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<MethodInfo, <>f__AnonymousType0`2<MethodInfo, ParameterInfo[]>> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<MethodInfo, ParameterInfo[]>, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<MethodInfo, ParameterInfo[]>, MethodInfo> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<MethodInfo, <>f__AnonymousType0`2<MethodInfo, ParameterInfo[]>> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<MethodInfo, ParameterInfo[]>, bool> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<MethodInfo, ParameterInfo[]>, MethodInfo> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<MethodInfo, <>f__AnonymousType0`2<MethodInfo, ParameterInfo[]>> CS$<>9__CachedAnonymousMethodDelegate1c;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType1`2<<>f__AnonymousType0`2<MethodInfo, ParameterInfo[]>, MethodInfo>, MethodInfo> CS$<>9__CachedAnonymousMethodDelegate1d;
    [CompilerGeneratedAttribute]
private static Func`2<MethodInfo, <>f__AnonymousType0`2<MethodInfo, ParameterInfo[]>> CS$<>9__CachedAnonymousMethodDelegate27;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2`2<<>f__AnonymousType0`2<MethodInfo, ParameterInfo[]>, MethodInfo>, MethodInfo> CS$<>9__CachedAnonymousMethodDelegate28;
    public DataServiceContextWrapper Context { get; }
    public DataServiceQuery Query { get; }
    private Type Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.IConcreteTypeAccessor.ConcreteType { get; }
    private Type Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.IConcreteTypeAccessor.ElementType { get; }
    public ReadOnlyQueryableSetBase`2(DataServiceQuery inner, DataServiceContextWrapper context);
    private static Type GetInnerType(Type tsourceType);
    private static bool TryGetInnerType(Type type, Type& resolvedType);
    private static Type GetInnerTypeRecursive(Type type);
    private static bool TryGetInnerTypeRecursive(Type type, Type& revisedType);
    private static Type CreateConcreteType(Type tsourceType);
    public sealed virtual DataServiceContextWrapper get_Context();
    public sealed virtual DataServiceQuery get_Query();
    protected void Initialize(DataServiceQuery inner, DataServiceContextWrapper context);
    private sealed virtual override Type Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.IConcreteTypeAccessor.get_ConcreteType();
    private sealed virtual override Type Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.IConcreteTypeAccessor.get_ElementType();
    protected Task`1<IPagedCollection`1<TISource>> ExecuteAsyncInternal();
    protected Task`1<TISource> ExecuteSingleAsyncInternal();
    public sealed virtual IReadOnlyQueryableSet`1<TResult> Select(Expression`1<Func`2<TSource, TResult>> selector);
    public sealed virtual IReadOnlyQueryableSet`1<TSource> Where(Expression`1<Func`2<TSource, bool>> predicate);
    public sealed virtual IReadOnlyQueryableSet`1<TResult> OfType();
    public sealed virtual IReadOnlyQueryableSet`1<TSource> Skip(int count);
    public sealed virtual IReadOnlyQueryableSet`1<TSource> Take(int count);
    public sealed virtual IReadOnlyQueryableSet`1<TSource> OrderBy(Expression`1<Func`2<TSource, TKey>> keySelector);
    public sealed virtual IReadOnlyQueryableSet`1<TSource> OrderByDescending(Expression`1<Func`2<TSource, TKey>> keySelector);
    public sealed virtual IReadOnlyQueryableSet`1<TSource> Expand(Expression`1<Func`2<TSource, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<TResult> CreateReadOnlyQueryableSet(Object[] callParams);
    private DataServiceQuery ApplyLinq(Type[] typeParams, Object[] callParams, string methodName);
    private DataServiceQuery CallOnConcreteType(Type targetType, object instance, Type[] typeParams, Object[] callParams, string methodName);
    private bool AllParametersAreAssignable(ParameterInfo[] parameterInfo, Object[] callParams);
    private DataServiceQuery CallLinqMethod(Expression predicate, bool singleGenericParameter, string methodName);
    [CompilerGeneratedAttribute]
private static bool <CreateConcreteType>b__0(CustomAttributeData i);
    [CompilerGeneratedAttribute]
private static Type <.ctor>b__2();
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType0`2<MethodInfo, ParameterInfo[]> <ExecuteAsyncInternal>b__5(MethodInfo i);
    [CompilerGeneratedAttribute]
private static bool <ExecuteAsyncInternal>b__6(<>f__AnonymousType0`2<MethodInfo, ParameterInfo[]> <>h__TransparentIdentifier4);
    [CompilerGeneratedAttribute]
private static MethodInfo <ExecuteAsyncInternal>b__7(<>f__AnonymousType0`2<MethodInfo, ParameterInfo[]> <>h__TransparentIdentifier4);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType0`2<MethodInfo, ParameterInfo[]> <ExecuteSingleAsyncInternal>b__c(MethodInfo i);
    [CompilerGeneratedAttribute]
private static bool <ExecuteSingleAsyncInternal>b__d(<>f__AnonymousType0`2<MethodInfo, ParameterInfo[]> <>h__TransparentIdentifierb);
    [CompilerGeneratedAttribute]
private static MethodInfo <ExecuteSingleAsyncInternal>b__e(<>f__AnonymousType0`2<MethodInfo, ParameterInfo[]> <>h__TransparentIdentifierb);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType0`2<MethodInfo, ParameterInfo[]> <CallOnConcreteType>b__17(MethodInfo i);
    [CompilerGeneratedAttribute]
private static MethodInfo <CallOnConcreteType>b__1b(<>f__AnonymousType1`2<<>f__AnonymousType0`2<MethodInfo, ParameterInfo[]>, MethodInfo> <>h__TransparentIdentifier16);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType0`2<MethodInfo, ParameterInfo[]> <CallLinqMethod>b__22(MethodInfo i);
    [CompilerGeneratedAttribute]
private static MethodInfo <CallLinqMethod>b__26(<>f__AnonymousType2`2<<>f__AnonymousType0`2<MethodInfo, ParameterInfo[]>, MethodInfo> <>h__TransparentIdentifier21);
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.RestShallowObjectFetcher : object {
    private string _path;
    internal RestShallowObjectFetcher _proxy;
    [CompilerGeneratedAttribute]
private DataServiceContextWrapper <Context>k__BackingField;
    internal DataServiceContextWrapper Context { get; private set; }
    [CompilerGeneratedAttribute]
internal DataServiceContextWrapper get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(DataServiceContextWrapper value);
    public DataServiceContextWrapper GetContext();
    internal void Initialize(DataServiceContextWrapper context, string path);
    protected internal string GetPath(string propertyName);
    protected internal Uri GetUrl();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.StreamFetcher : object {
    private DataServiceStreamLink _link;
    private GraphObject _entity;
    private string _propertyName;
    private DataServiceContextWrapper _context;
    public string ContentType { get; }
    internal StreamFetcher(DataServiceContextWrapper context, GraphObject entity, string propertyName, DataServiceStreamLink link);
    public sealed virtual string get_ContentType();
    public sealed virtual Task UploadAsync(Stream stream, string contentType, bool deferredSave, bool closeStream);
    public sealed virtual Task`1<DataServiceStreamResponse> DownloadAsync();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.TranslatingPagedCollection`2 : object {
    private IPagedCollection`1<TInternalSource> _proxy;
    public IReadOnlyList`1<TInterface> CurrentPage { get; }
    public bool MorePagesAvailable { get; }
    private IReadOnlyList`1<object> Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.IPagedCollection.CurrentPage { get; }
    internal TranslatingPagedCollection`2(IPagedCollection`1<TInternalSource> proxy);
    public static TranslatingPagedCollection`2<TInterface, TInternalSource> Create(IPagedCollection`1<TInternalSource> proxy);
    public sealed virtual IReadOnlyList`1<TInterface> get_CurrentPage();
    public sealed virtual bool get_MorePagesAvailable();
    public sealed virtual Task`1<IPagedCollection`1<TInterface>> GetNextPageAsync();
    private sealed virtual override IReadOnlyList`1<object> Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.IPagedCollection.get_CurrentPage();
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.TranslatingPagedCollection`2/<Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.IPagedCollection.GetNextPageAsync>d__1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<IPagedCollection> Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.IPagedCollection.GetNextPageAsync();
    [CompilerGeneratedAttribute]
private IPagedCollection`1<TInterface> <GetNextPageAsync>b__0();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.ActiveDirectory.GraphClient.Extensions.TranslatingReadOnlyList`2 : object {
    private IReadOnlyList`1<TInternalSource> _proxy;
    public TInterface Item { get; }
    public int Count { get; }
    internal TranslatingReadOnlyList`2(IReadOnlyList`1<TInternalSource> proxy);
    public sealed virtual TInterface get_Item(int index);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<TInterface> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.FilterGenerator : object {
    [CompilerGeneratedAttribute]
private Expression <QueryFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OverrideQueryFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private LinkProperty <ExpandProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphProperty <OrderByProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <QueryArguments>k__BackingField;
    public int Top { get; public set; }
    public Expression QueryFilter { get; public set; }
    public string OverrideQueryFilter { get; public set; }
    public LinkProperty ExpandProperty { get; public set; }
    public GraphProperty OrderByProperty { get; public set; }
    public string Item { get; public set; }
    internal IEnumerable`1<string> Names { get; }
    private IDictionary`2<string, string> QueryArguments { get; private set; }
    public int get_Top();
    public void set_Top(int value);
    [CompilerGeneratedAttribute]
public Expression get_QueryFilter();
    [CompilerGeneratedAttribute]
public void set_QueryFilter(Expression value);
    [CompilerGeneratedAttribute]
public string get_OverrideQueryFilter();
    [CompilerGeneratedAttribute]
public void set_OverrideQueryFilter(string value);
    [CompilerGeneratedAttribute]
public LinkProperty get_ExpandProperty();
    [CompilerGeneratedAttribute]
public void set_ExpandProperty(LinkProperty value);
    [CompilerGeneratedAttribute]
public GraphProperty get_OrderByProperty();
    [CompilerGeneratedAttribute]
public void set_OrderByProperty(GraphProperty value);
    public string get_Item(string name);
    public void set_Item(string name, string value);
    internal IEnumerable`1<string> get_Names();
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> get_QueryArguments();
    [CompilerGeneratedAttribute]
private void set_QueryArguments(IDictionary`2<string, string> value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.ForceDeleteState : ComplexTypeBase {
    private string _Status;
    private Nullable`1<DateTime> _LastActionDateTime;
    public string Status { get; public set; }
    public Nullable`1<DateTime> LastActionDateTime { get; public set; }
    internal ForceDeleteState(bool dontCreateProxy);
    protected ForceDeleteState(ComplexTypeBase proxy);
    public string get_Status();
    public void set_Status(string value);
    public Nullable`1<DateTime> get_LastActionDateTime();
    public void set_LastActionDateTime(Nullable`1<DateTime> value);
}
[ObsoleteAttribute]
public class Microsoft.Azure.ActiveDirectory.GraphClient.GraphConnection : object {
    private ThreadLocal`1<bool> returnBatchItem;
    private ThreadLocal`1<IList`1<BatchRequestItem>> batchRequestItems;
    private string tenantId;
    private bool overrideTenantId;
    private DataServiceContextWrapper wrapper;
    [CompilerGeneratedAttribute]
private ConnectionWrapper <ClientConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`1<bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`1<IList`1<BatchRequestItem>> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`1<bool> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`1<IList`1<BatchRequestItem>> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`1<bool> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`1<IList`1<BatchRequestItem>> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`1<bool> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`1<IList`1<BatchRequestItem>> CS$<>9__CachedAnonymousMethodDelegate15;
    public string GraphApiDomainName { get; }
    public string GraphApiVersion { get; }
    public ICredentials GraphCredentials { get; public set; }
    public bool IsRetryEnabled { get; }
    public HashSet`1<string> RetryOnExceptions { get; }
    public TimeSpan WaitBeforeRetry { get; }
    public int TotalAttempts { get; }
    public ConnectionWrapper ClientConnection { get; private set; }
    public Guid ClientRequestId { get; public set; }
    public string TenantId { get; public set; }
    public string AccessToken { get; public set; }
    public string AadGraphEndpoint { get; }
    public GraphConnection(string accessToken);
    public GraphConnection(string accessToken, Guid clientRequestId);
    public GraphConnection(string accessToken, GraphSettings graphSettings);
    public GraphConnection(string accessToken, Guid clientRequestId, GraphSettings graphSettings);
    public GraphConnection(ICredentials credentials, Guid clientRequestId, GraphSettings graphSettings);
    protected GraphConnection(ConnectionWrapper connectionWrapper, string accessToken);
    public virtual IList`1<string> GetMemberGroups(User user, bool securityEnabledOnly);
    public virtual IList`1<string> CheckMemberGroups(DirectoryObject graphObject, IList`1<string> groupIds);
    public virtual Application Restore(Application application, IList`1<string> identifierUris);
    public virtual User AssignLicense(User user, IList`1<AssignedLicense> addLicenses, IList`1<Guid> removeLicenses);
    public virtual bool IsMemberOf(string groupId, string memberId);
    public string get_GraphApiDomainName();
    public string get_GraphApiVersion();
    public ICredentials get_GraphCredentials();
    public void set_GraphCredentials(ICredentials value);
    public bool get_IsRetryEnabled();
    public HashSet`1<string> get_RetryOnExceptions();
    public TimeSpan get_WaitBeforeRetry();
    public int get_TotalAttempts();
    [CompilerGeneratedAttribute]
public ConnectionWrapper get_ClientConnection();
    [CompilerGeneratedAttribute]
private void set_ClientConnection(ConnectionWrapper value);
    public Guid get_ClientRequestId();
    public void set_ClientRequestId(Guid value);
    public string get_TenantId();
    public void set_TenantId(string value);
    public string get_AccessToken();
    public void set_AccessToken(string value);
    public string get_AadGraphEndpoint();
    [GraphMethodAttribute("True")]
public virtual PagedResults`1<GraphObject> List(Type objectType, string pageToken, FilterGenerator filter);
    public IList`1<GraphObject> GetGraphList(string pageToken, FilterGenerator filter);
    [GraphMethodAttribute("True")]
public virtual PagedResults`1<T> List(string pageToken, FilterGenerator filter);
    public virtual TenantDetail GetTenantDetails();
    [GraphMethodAttribute("True")]
public virtual T Get(string objectId);
    [GraphMethodAttribute("True")]
public virtual DirectoryObject Get(Type objectType, string objectId);
    [GraphMethodAttribute("True")]
public virtual DirectoryObject Get(Type objectType, string objectId, LinkProperty expandProperty);
    [GraphMethodAttribute("True")]
public virtual DirectoryObject Add(DirectoryObject entity);
    [GraphMethodAttribute("True")]
public virtual T Add(T entity);
    [GraphMethodAttribute("True")]
public virtual DirectoryObject Add(DirectoryObject entity, RequestOptions requestOptions);
    [GraphMethodAttribute("True")]
public virtual T Add(T entity, RequestOptions requestOptions);
    [GraphMethodAttribute("True")]
public virtual DirectoryObject Update(DirectoryObject entity);
    [GraphMethodAttribute("True")]
public virtual T Update(T entity);
    [ObsoleteAttribute]
[GraphMethodAttribute("True")]
public virtual void Delete(DirectoryObject graphObject);
    [GraphMethodAttribute("True")]
public DirectoryObject AddContainment(DirectoryObject parent, DirectoryObject containment);
    [GraphMethodAttribute("True")]
public T AddContainment(DirectoryObject parent, T containment);
    [GraphMethodAttribute("True")]
public T UpdateContainment(DirectoryObject parent, T containment);
    [GraphMethodAttribute("True")]
public virtual PagedResults`1<DirectoryObject> ListContainments(DirectoryObject parent, Type containmentType, string linkToNextPage, FilterGenerator filter);
    [GraphMethodAttribute("True")]
public virtual PagedResults`1<T> ListContainments(DirectoryObject parent, string linkToNextPage, FilterGenerator filter);
    [GraphMethodAttribute("True")]
public virtual T GetContainment(DirectoryObject parent, string containmentObjectId);
    [GraphMethodAttribute("True")]
public virtual DirectoryObject GetContainment(DirectoryObject parent, Type containmentType, string containmentObjectId);
    [GraphMethodAttribute("True")]
public virtual void DeleteContainment(DirectoryObject parent, DirectoryObject containment);
    [GraphMethodAttribute("True")]
public virtual PagedResults`1<DirectoryObject> GetLinkedObjects(DirectoryObject graphObject, LinkProperty linkProperty, string nextPageToken);
    [GraphMethodAttribute("True")]
public virtual PagedResults`1<DirectoryObject> GetLinkedObjects(DirectoryObject graphObject, LinkProperty linkProperty, string nextPageToken, int top);
    public virtual IList`1<DirectoryObject> GetAllDirectLinks(DirectoryObject graphObject, LinkProperty linkProperty);
    [GraphMethodAttribute("True")]
public virtual void AddLink(DirectoryObject sourceObject, DirectoryObject targetObject, LinkProperty linkProperty);
    [GraphMethodAttribute("True")]
public virtual void DeleteLink(DirectoryObject sourceObject, DirectoryObject targetObject, LinkProperty linkProperty);
    public virtual Stream GetStreamProperty(DirectoryObject graphObject, GraphProperty graphProperty, string acceptType);
    public virtual void SetStreamProperty(DirectoryObject graphObject, GraphProperty graphProperty, MemoryStream memoryStream, string contentType);
    public virtual IList`1<BatchResponseItem> ExecuteBatch(Expression`1[] batchRequests);
    public virtual IList`1<BatchResponseItem> ExecuteBatch(IList`1<BatchRequestItem> batchRequests);
    private DirectoryObject AddOrUpdateContainment(DirectoryObject parent, DirectoryObject containment, bool isCreate);
    private DirectoryObject AddOrUpdate(DirectoryObject entity, bool isCreate, RequestOptions requestOptions);
    private string ListCore(Type objectType, string linkToNextPage, FilterGenerator filter, Uri& listUri);
    private string GetCore(Type objectType, string objectId, FilterGenerator filterGenerator, Uri& requestUri);
    private string ListContainmentsCore(DirectoryObject parent, Type containmentType, string linkToNextPage, FilterGenerator filter, Uri& listUri);
    private string GetEntityName();
    private string GetEntityName(Type objectType);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static IList`1<BatchRequestItem> <.ctor>b__1();
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__a();
    [CompilerGeneratedAttribute]
private static IList`1<BatchRequestItem> <.ctor>b__b();
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__e();
    [CompilerGeneratedAttribute]
private static IList`1<BatchRequestItem> <.ctor>b__f();
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__12();
    [CompilerGeneratedAttribute]
private static IList`1<BatchRequestItem> <.ctor>b__13();
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.GraphException : Exception {
    [CompilerGeneratedAttribute]
private HttpStatusCode <HttpStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private WebHeaderCollection <ResponseHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <ExtendedErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataError <ErrorResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseUri>k__BackingField;
    public HttpStatusCode HttpStatusCode { get; public set; }
    public string Code { get; public set; }
    public string ErrorMessage { get; public set; }
    public WebHeaderCollection ResponseHeaders { get; public set; }
    public Dictionary`2<string, string> ExtendedErrors { get; public set; }
    public ODataError ErrorResponse { get; public set; }
    public string ResponseUri { get; public set; }
    public GraphException(string message);
    public GraphException(HttpStatusCode statusCode, string message);
    public GraphException(HttpStatusCode statusCode, string errorCode, string message);
    [CompilerGeneratedAttribute]
public HttpStatusCode get_HttpStatusCode();
    [CompilerGeneratedAttribute]
public void set_HttpStatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public WebHeaderCollection get_ResponseHeaders();
    [CompilerGeneratedAttribute]
public void set_ResponseHeaders(WebHeaderCollection value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_ExtendedErrors();
    [CompilerGeneratedAttribute]
public void set_ExtendedErrors(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public ODataError get_ErrorResponse();
    [CompilerGeneratedAttribute]
public void set_ErrorResponse(ODataError value);
    [CompilerGeneratedAttribute]
public string get_ResponseUri();
    [CompilerGeneratedAttribute]
public void set_ResponseUri(string value);
    public virtual string ToString();
}
[AttributeUsageAttribute("64")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.GraphMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <SupportsBatching>k__BackingField;
    public bool SupportsBatching { get; public set; }
    public GraphMethodAttribute(bool supportsBatching);
    [CompilerGeneratedAttribute]
public bool get_SupportsBatching();
    [CompilerGeneratedAttribute]
public void set_SupportsBatching(bool value);
}
public enum Microsoft.Azure.ActiveDirectory.GraphClient.GraphProperty : Enum {
    public int value__;
    public static GraphProperty None;
    public static GraphProperty AccountEnabled;
    public static GraphProperty AlternativeSecurityIds;
    public static GraphProperty AppId;
    public static GraphProperty AppOwnerTenantId;
    public static GraphProperty ApproximateLastLogonTimestamp;
    public static GraphProperty AssignedLicenses;
    public static GraphProperty AssignedPlans;
    public static GraphProperty AssociationType;
    public static GraphProperty AuthenticationPolicy;
    public static GraphProperty AvailableToOtherTenants;
    public static GraphProperty CapabilityStatus;
    public static GraphProperty City;
    public static GraphProperty ClientId;
    public static GraphProperty CloudPublicIssuerCertificates;
    public static GraphProperty CompanyLastDirSyncTime;
    public static GraphProperty ConsentType;
    public static GraphProperty ConsumedUnits;
    public static GraphProperty Country;
    public static GraphProperty CountryLetterCode;
    public static GraphProperty Department;
    public static GraphProperty Description;
    public static GraphProperty DeviceId;
    public static GraphProperty DeviceObjectVersion;
    public static GraphProperty DeviceOSType;
    public static GraphProperty DeviceOSVersion;
    public static GraphProperty DevicePhysicalIds;
    public static GraphProperty DirSyncEnabled;
    public static GraphProperty DisplayName;
    public static GraphProperty ErrorUrl;
    public static GraphProperty ExpiryTime;
    public static GraphProperty FacsimileTelephoneNumber;
    public static GraphProperty GivenName;
    public static GraphProperty Homepage;
    public static GraphProperty IdentifierUris;
    public static GraphProperty ImmutableId;
    public static GraphProperty IsSystem;
    public static GraphProperty JobTitle;
    public static GraphProperty KeyCredentials;
    public static GraphProperty LastDirSyncTime;
    public static GraphProperty LogoutUrl;
    public static GraphProperty Mail;
    public static GraphProperty MailEnabled;
    public static GraphProperty MailNickname;
    public static GraphProperty MainLogo;
    public static GraphProperty MarketingNotificationEmails;
    public static GraphProperty MaximumRegistrationInactivityPeriod;
    public static GraphProperty Mobile;
    public static GraphProperty ObjectId;
    public static GraphProperty ObjectType;
    public static GraphProperty OtherMails;
    public static GraphProperty PasswordCredentials;
    public static GraphProperty PasswordPolicies;
    public static GraphProperty PasswordProfile;
    public static GraphProperty PhysicalDeliveryOfficeName;
    public static GraphProperty PostalCode;
    public static GraphProperty PreferredLanguage;
    public static GraphProperty PrepaidUnits;
    public static GraphProperty PrincipalId;
    public static GraphProperty ProvisionedPlans;
    public static GraphProperty ProvisioningErrors;
    public static GraphProperty ProxyAddresses;
    public static GraphProperty PublicClient;
    public static GraphProperty PublicIssuerCertificates;
    public static GraphProperty PublisherName;
    public static GraphProperty RegistrationQuota;
    public static GraphProperty ReplyUrls;
    public static GraphProperty ResourceId;
    public static GraphProperty RoleDisabled;
    public static GraphProperty SamlMetadataUrl;
    public static GraphProperty Scope;
    public static GraphProperty SecurityEnabled;
    public static GraphProperty ServicePlans;
    public static GraphProperty ServicePrincipalNames;
    public static GraphProperty SkuId;
    public static GraphProperty SkuPartNumber;
    public static GraphProperty SourceObjectId;
    public static GraphProperty SourceObjectType;
    public static GraphProperty SourceObjectUri;
    public static GraphProperty StartTime;
    public static GraphProperty State;
    public static GraphProperty Street;
    public static GraphProperty StreetAddress;
    public static GraphProperty Surname;
    public static GraphProperty Tags;
    public static GraphProperty TargetObjectId;
    public static GraphProperty TargetObjectType;
    public static GraphProperty TargetObjectUri;
    public static GraphProperty TechnicalNotificationMails;
    public static GraphProperty TelephoneNumber;
    public static GraphProperty TenantType;
    public static GraphProperty ThumbnailPhoto;
    public static GraphProperty UsageLocation;
    public static GraphProperty UserPrincipalName;
    public static GraphProperty UserType;
    public static GraphProperty VerifiedDomains;
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.GraphSettings : object {
    private bool isRetryEnabled;
    private HashSet`1<string> retryOnExceptions;
    private TimeSpan waitBeforeRetry;
    private int totalAttempts;
    private string apiVersion;
    private string graphDomainName;
    public bool IsRetryEnabled { get; public set; }
    public HashSet`1<string> RetryOnExceptions { get; public set; }
    public TimeSpan WaitBeforeRetry { get; public set; }
    public int TotalAttempts { get; public set; }
    public string ApiVersion { get; public set; }
    public string GraphDomainName { get; public set; }
    public bool get_IsRetryEnabled();
    public void set_IsRetryEnabled(bool value);
    public HashSet`1<string> get_RetryOnExceptions();
    public void set_RetryOnExceptions(HashSet`1<string> value);
    public TimeSpan get_WaitBeforeRetry();
    public void set_WaitBeforeRetry(TimeSpan value);
    public int get_TotalAttempts();
    public void set_TotalAttempts(int value);
    public string get_ApiVersion();
    public void set_ApiVersion(string value);
    public string get_GraphDomainName();
    public void set_GraphDomainName(string value);
}
[DataServiceKeyAttribute("ObjectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Group : DirectoryObject {
    private string _description;
    private Nullable`1<bool> _dirSyncEnabled;
    private string _displayName;
    private Nullable`1<DateTime> _lastDirSyncTime;
    private string _mail;
    private string _mailNickname;
    private Nullable`1<bool> _mailEnabled;
    private string _onPremisesSecurityIdentifier;
    private NonEntityTypeCollectionImpl`1<ProvisioningError> _provisioningErrors;
    private NonEntityTypeCollectionImpl`1<string> _proxyAddresses;
    private Nullable`1<bool> _securityEnabled;
    private IAppRoleAssignmentCollection _appRoleAssignmentsFetcher;
    private EntityCollectionImpl`1<AppRoleAssignment> _appRoleAssignments;
    [LowerCasePropertyAttribute]
public string Description { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> DirSyncEnabled { get; public set; }
    [LowerCasePropertyAttribute]
public string DisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> LastDirSyncTime { get; public set; }
    [LowerCasePropertyAttribute]
public string Mail { get; public set; }
    [LowerCasePropertyAttribute]
public string MailNickname { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> MailEnabled { get; public set; }
    [LowerCasePropertyAttribute]
public string OnPremisesSecurityIdentifier { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<ProvisioningError> ProvisioningErrors { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> ProxyAddresses { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> SecurityEnabled { get; public set; }
    [LowerCasePropertyAttribute]
private IAppRoleAssignmentCollection Microsoft.Azure.ActiveDirectory.GraphClient.IGroupFetcher.AppRoleAssignments { get; }
    [LowerCasePropertyAttribute]
public IList`1<AppRoleAssignment> AppRoleAssignments { get; public set; }
    private IPagedCollection`1<IAppRoleAssignment> Microsoft.Azure.ActiveDirectory.GraphClient.IGroup.AppRoleAssignments { get; }
    internal Group(bool dontCreateProxy);
    protected Group(GraphObject proxy);
    public sealed virtual string get_Description();
    public sealed virtual void set_Description(string value);
    public sealed virtual Nullable`1<bool> get_DirSyncEnabled();
    public sealed virtual void set_DirSyncEnabled(Nullable`1<bool> value);
    public sealed virtual string get_DisplayName();
    public sealed virtual void set_DisplayName(string value);
    public sealed virtual Nullable`1<DateTime> get_LastDirSyncTime();
    public sealed virtual void set_LastDirSyncTime(Nullable`1<DateTime> value);
    public sealed virtual string get_Mail();
    public sealed virtual void set_Mail(string value);
    public sealed virtual string get_MailNickname();
    public sealed virtual void set_MailNickname(string value);
    public sealed virtual Nullable`1<bool> get_MailEnabled();
    public sealed virtual void set_MailEnabled(Nullable`1<bool> value);
    public sealed virtual string get_OnPremisesSecurityIdentifier();
    public sealed virtual void set_OnPremisesSecurityIdentifier(string value);
    public sealed virtual IList`1<ProvisioningError> get_ProvisioningErrors();
    public void set_ProvisioningErrors(IList`1<ProvisioningError> value);
    public sealed virtual IList`1<string> get_ProxyAddresses();
    public void set_ProxyAddresses(IList`1<string> value);
    public sealed virtual Nullable`1<bool> get_SecurityEnabled();
    public sealed virtual void set_SecurityEnabled(Nullable`1<bool> value);
    private sealed virtual override IAppRoleAssignmentCollection Microsoft.Azure.ActiveDirectory.GraphClient.IGroupFetcher.get_AppRoleAssignments();
    public IList`1<AppRoleAssignment> get_AppRoleAssignments();
    public void set_AppRoleAssignments(IList`1<AppRoleAssignment> value);
    private sealed virtual override IPagedCollection`1<IAppRoleAssignment> Microsoft.Azure.ActiveDirectory.GraphClient.IGroup.get_AppRoleAssignments();
    private sealed virtual override Task`1<IGroup> Microsoft.Azure.ActiveDirectory.GraphClient.IGroupFetcher.ExecuteAsync();
    private sealed virtual override IGroupFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IGroupFetcher.Expand(Expression`1<Func`2<IGroup, TTarget>> navigationPropertyAccessor);
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_ProvisioningErrors>b__0();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_ProvisioningErrors>b__2();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_ProxyAddresses>b__4();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_ProxyAddresses>b__6();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_AppRoleAssignments>b__8();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_AppRoleAssignments>b__a();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.ActiveDirectory.GraphClient.GroupCollection : QueryableSet`2<IGroup, Group> {
    public IGroupFetcher Item { get; }
    internal GroupCollection(DataServiceQuery inner, DataServiceContextWrapper context, object entity, string path);
    public sealed virtual IGroupFetcher GetByObjectId(string objectId);
    public sealed virtual IGroupFetcher get_Item(string objectId);
    public sealed virtual Task`1<IPagedCollection`1<IGroup>> ExecuteAsync();
    public sealed virtual Task AddGroupAsync(IGroup item, bool deferredSave);
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.GroupCollection/<<ExecuteAsync>b__2>d__3")]
[CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
private Task`1<IPagedCollection`1<IGroup>> <ExecuteAsync>b__2();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.GroupFetcher : DirectoryObjectFetcher {
    private IAppRoleAssignmentCollection _appRoleAssignments;
    private IReadOnlyQueryableSet`1<IGroup> _query;
    [LowerCasePropertyAttribute]
public IAppRoleAssignmentCollection AppRoleAssignments { get; }
    public sealed virtual IAppRoleAssignmentCollection get_AppRoleAssignments();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.GroupFetcher/<ExecuteAsync>d__0")]
public sealed virtual Task`1<IGroup> ExecuteAsync();
    public sealed virtual IGroupFetcher Expand(Expression`1<Func`2<IGroup, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IGroup> EnsureQuery();
}
public static class Microsoft.Azure.ActiveDirectory.GraphClient.HttpVerb : object {
    public static string DELETE;
    public static string GET;
    public static string PATCH;
    public static string POST;
    public static string PUT;
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IActiveDirectoryClient {
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection DeletedDirectoryObjects { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection DirectoryObjects { get; }
    [LowerCasePropertyAttribute]
public IDomainCollection Domains { get; }
    [LowerCasePropertyAttribute]
public IDomainDnsRecordCollection DomainDnsRecords { get; }
    [LowerCasePropertyAttribute]
public ILicenseDetailCollection LicenseDetails { get; }
    [LowerCasePropertyAttribute]
public IOAuth2PermissionGrantCollection Oauth2PermissionGrants { get; }
    [LowerCasePropertyAttribute]
public ISubscribedSkuCollection SubscribedSkus { get; }
    [LowerCasePropertyAttribute]
public ITrustedCAsForPasswordlessAuthCollection TrustedCAsForPasswordlessAuth { get; }
    [LowerCasePropertyAttribute]
public IUserCollection Users { get; }
    [LowerCasePropertyAttribute]
public IApplicationCollection Applications { get; }
    [LowerCasePropertyAttribute]
public IContactCollection Contacts { get; }
    [LowerCasePropertyAttribute]
public IGroupCollection Groups { get; }
    [LowerCasePropertyAttribute]
public IDirectoryRoleCollection DirectoryRoles { get; }
    [LowerCasePropertyAttribute]
public IServicePrincipalCollection ServicePrincipals { get; }
    [LowerCasePropertyAttribute]
public ITenantDetailCollection TenantDetails { get; }
    [LowerCasePropertyAttribute]
public IDeviceCollection Devices { get; }
    public abstract virtual IDirectoryObjectCollection get_DeletedDirectoryObjects();
    public abstract virtual IDirectoryObjectCollection get_DirectoryObjects();
    public abstract virtual IDomainCollection get_Domains();
    public abstract virtual IDomainDnsRecordCollection get_DomainDnsRecords();
    public abstract virtual ILicenseDetailCollection get_LicenseDetails();
    public abstract virtual IOAuth2PermissionGrantCollection get_Oauth2PermissionGrants();
    public abstract virtual ISubscribedSkuCollection get_SubscribedSkus();
    public abstract virtual ITrustedCAsForPasswordlessAuthCollection get_TrustedCAsForPasswordlessAuth();
    public abstract virtual IUserCollection get_Users();
    public abstract virtual IApplicationCollection get_Applications();
    public abstract virtual IContactCollection get_Contacts();
    public abstract virtual IGroupCollection get_Groups();
    public abstract virtual IDirectoryRoleCollection get_DirectoryRoles();
    public abstract virtual IServicePrincipalCollection get_ServicePrincipals();
    public abstract virtual ITenantDetailCollection get_TenantDetails();
    public abstract virtual IDeviceCollection get_Devices();
    public abstract virtual Task`1<IEnumerable`1<IExtensionProperty>> GetAvailableExtensionPropertiesAsync(Nullable`1<bool> isSyncedFromOnPremises);
    public abstract virtual Task`1<IEnumerable`1<IDirectoryObject>> GetObjectsByObjectIdsAsync(ICollection`1<string> objectIds, ICollection`1<string> types);
    public abstract virtual Task`1<Nullable`1<bool>> IsMemberOfAsync(string groupId, string memberId);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IApplication {
    [LowerCasePropertyAttribute]
public IList`1<AddIn> AddIns { get; }
    [LowerCasePropertyAttribute]
public string AppId { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<AppRole> AppRoles { get; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> AvailableToOtherTenants { get; public set; }
    [LowerCasePropertyAttribute]
public string DisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public string ErrorUrl { get; public set; }
    [LowerCasePropertyAttribute]
public string GroupMembershipClaims { get; public set; }
    [LowerCasePropertyAttribute]
public string Homepage { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> IdentifierUris { get; }
    [LowerCasePropertyAttribute]
public IList`1<KeyCredential> KeyCredentials { get; }
    [LowerCasePropertyAttribute]
public IList`1<Guid> KnownClientApplications { get; }
    [LowerCasePropertyAttribute]
public IStreamFetcher MainLogo { get; }
    [LowerCasePropertyAttribute]
public string LogoutUrl { get; public set; }
    [LowerCasePropertyAttribute]
public bool Oauth2AllowImplicitFlow { get; public set; }
    [LowerCasePropertyAttribute]
public bool Oauth2AllowUrlPathMatching { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<OAuth2Permission> Oauth2Permissions { get; }
    [LowerCasePropertyAttribute]
public bool Oauth2RequirePostResponse { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<PasswordCredential> PasswordCredentials { get; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> PublicClient { get; public set; }
    [LowerCasePropertyAttribute]
public string RecordConsentConditions { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> ReplyUrls { get; }
    [LowerCasePropertyAttribute]
public IList`1<RequiredResourceAccess> RequiredResourceAccess { get; }
    [LowerCasePropertyAttribute]
public string SamlMetadataUrl { get; public set; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IExtensionProperty> ExtensionProperties { get; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IDirectoryObject> Policies { get; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IServiceEndpoint> ServiceEndpoints { get; }
    public abstract virtual IList`1<AddIn> get_AddIns();
    public abstract virtual string get_AppId();
    public abstract virtual void set_AppId(string value);
    public abstract virtual IList`1<AppRole> get_AppRoles();
    public abstract virtual Nullable`1<bool> get_AvailableToOtherTenants();
    public abstract virtual void set_AvailableToOtherTenants(Nullable`1<bool> value);
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
    public abstract virtual string get_ErrorUrl();
    public abstract virtual void set_ErrorUrl(string value);
    public abstract virtual string get_GroupMembershipClaims();
    public abstract virtual void set_GroupMembershipClaims(string value);
    public abstract virtual string get_Homepage();
    public abstract virtual void set_Homepage(string value);
    public abstract virtual IList`1<string> get_IdentifierUris();
    public abstract virtual IList`1<KeyCredential> get_KeyCredentials();
    public abstract virtual IList`1<Guid> get_KnownClientApplications();
    public abstract virtual IStreamFetcher get_MainLogo();
    public abstract virtual string get_LogoutUrl();
    public abstract virtual void set_LogoutUrl(string value);
    public abstract virtual bool get_Oauth2AllowImplicitFlow();
    public abstract virtual void set_Oauth2AllowImplicitFlow(bool value);
    public abstract virtual bool get_Oauth2AllowUrlPathMatching();
    public abstract virtual void set_Oauth2AllowUrlPathMatching(bool value);
    public abstract virtual IList`1<OAuth2Permission> get_Oauth2Permissions();
    public abstract virtual bool get_Oauth2RequirePostResponse();
    public abstract virtual void set_Oauth2RequirePostResponse(bool value);
    public abstract virtual IList`1<PasswordCredential> get_PasswordCredentials();
    public abstract virtual Nullable`1<bool> get_PublicClient();
    public abstract virtual void set_PublicClient(Nullable`1<bool> value);
    public abstract virtual string get_RecordConsentConditions();
    public abstract virtual void set_RecordConsentConditions(string value);
    public abstract virtual IList`1<string> get_ReplyUrls();
    public abstract virtual IList`1<RequiredResourceAccess> get_RequiredResourceAccess();
    public abstract virtual string get_SamlMetadataUrl();
    public abstract virtual void set_SamlMetadataUrl(string value);
    public abstract virtual IPagedCollection`1<IExtensionProperty> get_ExtensionProperties();
    public abstract virtual IPagedCollection`1<IDirectoryObject> get_Policies();
    public abstract virtual IPagedCollection`1<IServiceEndpoint> get_ServiceEndpoints();
    public abstract virtual Task`1<IApplication> RestoreAsync(ICollection`1<string> identifierUris);
}
[DefaultMemberAttribute("Item")]
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IApplicationCollection {
    public IApplicationFetcher Item { get; }
    public abstract virtual IApplicationFetcher GetByObjectId(string objectId);
    public abstract virtual IApplicationFetcher get_Item(string objectId);
    public abstract virtual Task`1<IPagedCollection`1<IApplication>> ExecuteAsync();
    public abstract virtual Task AddApplicationAsync(IApplication item, bool deferredSave);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IApplicationFetcher {
    [LowerCasePropertyAttribute]
public IExtensionPropertyCollection ExtensionProperties { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection Policies { get; }
    [LowerCasePropertyAttribute]
public IServiceEndpointCollection ServiceEndpoints { get; }
    public abstract virtual Task`1<IApplication> ExecuteAsync();
    public abstract virtual IApplicationFetcher Expand(Expression`1<Func`2<IApplication, TTarget>> navigationPropertyAccessor);
    public abstract virtual IExtensionPropertyCollection get_ExtensionProperties();
    public abstract virtual IDirectoryObjectCollection get_Policies();
    public abstract virtual IServiceEndpointCollection get_ServiceEndpoints();
    public abstract virtual Task`1<IApplication> RestoreAsync(ICollection`1<string> identifierUris);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IAppRoleAssignment {
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> CreationTimestamp { get; public set; }
    [LowerCasePropertyAttribute]
public Guid Id { get; public set; }
    [LowerCasePropertyAttribute]
public string PrincipalDisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<Guid> PrincipalId { get; public set; }
    [LowerCasePropertyAttribute]
public string PrincipalType { get; public set; }
    [LowerCasePropertyAttribute]
public string ResourceDisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<Guid> ResourceId { get; public set; }
    public abstract virtual Nullable`1<DateTime> get_CreationTimestamp();
    public abstract virtual void set_CreationTimestamp(Nullable`1<DateTime> value);
    public abstract virtual Guid get_Id();
    public abstract virtual void set_Id(Guid value);
    public abstract virtual string get_PrincipalDisplayName();
    public abstract virtual void set_PrincipalDisplayName(string value);
    public abstract virtual Nullable`1<Guid> get_PrincipalId();
    public abstract virtual void set_PrincipalId(Nullable`1<Guid> value);
    public abstract virtual string get_PrincipalType();
    public abstract virtual void set_PrincipalType(string value);
    public abstract virtual string get_ResourceDisplayName();
    public abstract virtual void set_ResourceDisplayName(string value);
    public abstract virtual Nullable`1<Guid> get_ResourceId();
    public abstract virtual void set_ResourceId(Nullable`1<Guid> value);
}
[LowerCasePropertyAttribute]
[DefaultMemberAttribute("Item")]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IAppRoleAssignmentCollection {
    public IAppRoleAssignmentFetcher Item { get; }
    public abstract virtual IAppRoleAssignmentFetcher GetByObjectId(string objectId);
    public abstract virtual IAppRoleAssignmentFetcher get_Item(string objectId);
    public abstract virtual Task`1<IPagedCollection`1<IAppRoleAssignment>> ExecuteAsync();
    public abstract virtual Task AddAppRoleAssignmentAsync(IAppRoleAssignment item, bool deferredSave);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IAppRoleAssignmentFetcher {
    public abstract virtual Task`1<IAppRoleAssignment> ExecuteAsync();
    public abstract virtual IAppRoleAssignmentFetcher Expand(Expression`1<Func`2<IAppRoleAssignment, TTarget>> navigationPropertyAccessor);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IContact {
    [LowerCasePropertyAttribute]
public string City { get; public set; }
    [LowerCasePropertyAttribute]
public string CompanyName { get; public set; }
    [LowerCasePropertyAttribute]
public string Country { get; public set; }
    [LowerCasePropertyAttribute]
public string Department { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> DirSyncEnabled { get; public set; }
    [LowerCasePropertyAttribute]
public string DisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public string FacsimileTelephoneNumber { get; public set; }
    [LowerCasePropertyAttribute]
public string GivenName { get; public set; }
    [LowerCasePropertyAttribute]
public string JobTitle { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> LastDirSyncTime { get; public set; }
    [LowerCasePropertyAttribute]
public string Mail { get; public set; }
    [LowerCasePropertyAttribute]
public string MailNickname { get; public set; }
    [LowerCasePropertyAttribute]
public string Mobile { get; public set; }
    [LowerCasePropertyAttribute]
public string PhysicalDeliveryOfficeName { get; public set; }
    [LowerCasePropertyAttribute]
public string PostalCode { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<ProvisioningError> ProvisioningErrors { get; }
    [LowerCasePropertyAttribute]
public IList`1<string> ProxyAddresses { get; }
    [LowerCasePropertyAttribute]
public string SipProxyAddress { get; public set; }
    [LowerCasePropertyAttribute]
public string State { get; public set; }
    [LowerCasePropertyAttribute]
public string StreetAddress { get; public set; }
    [LowerCasePropertyAttribute]
public string Surname { get; public set; }
    [LowerCasePropertyAttribute]
public string TelephoneNumber { get; public set; }
    [LowerCasePropertyAttribute]
public IStreamFetcher ThumbnailPhoto { get; }
    public abstract virtual string get_City();
    public abstract virtual void set_City(string value);
    public abstract virtual string get_CompanyName();
    public abstract virtual void set_CompanyName(string value);
    public abstract virtual string get_Country();
    public abstract virtual void set_Country(string value);
    public abstract virtual string get_Department();
    public abstract virtual void set_Department(string value);
    public abstract virtual Nullable`1<bool> get_DirSyncEnabled();
    public abstract virtual void set_DirSyncEnabled(Nullable`1<bool> value);
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
    public abstract virtual string get_FacsimileTelephoneNumber();
    public abstract virtual void set_FacsimileTelephoneNumber(string value);
    public abstract virtual string get_GivenName();
    public abstract virtual void set_GivenName(string value);
    public abstract virtual string get_JobTitle();
    public abstract virtual void set_JobTitle(string value);
    public abstract virtual Nullable`1<DateTime> get_LastDirSyncTime();
    public abstract virtual void set_LastDirSyncTime(Nullable`1<DateTime> value);
    public abstract virtual string get_Mail();
    public abstract virtual void set_Mail(string value);
    public abstract virtual string get_MailNickname();
    public abstract virtual void set_MailNickname(string value);
    public abstract virtual string get_Mobile();
    public abstract virtual void set_Mobile(string value);
    public abstract virtual string get_PhysicalDeliveryOfficeName();
    public abstract virtual void set_PhysicalDeliveryOfficeName(string value);
    public abstract virtual string get_PostalCode();
    public abstract virtual void set_PostalCode(string value);
    public abstract virtual IList`1<ProvisioningError> get_ProvisioningErrors();
    public abstract virtual IList`1<string> get_ProxyAddresses();
    public abstract virtual string get_SipProxyAddress();
    public abstract virtual void set_SipProxyAddress(string value);
    public abstract virtual string get_State();
    public abstract virtual void set_State(string value);
    public abstract virtual string get_StreetAddress();
    public abstract virtual void set_StreetAddress(string value);
    public abstract virtual string get_Surname();
    public abstract virtual void set_Surname(string value);
    public abstract virtual string get_TelephoneNumber();
    public abstract virtual void set_TelephoneNumber(string value);
    public abstract virtual IStreamFetcher get_ThumbnailPhoto();
}
[LowerCasePropertyAttribute]
[DefaultMemberAttribute("Item")]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IContactCollection {
    public IContactFetcher Item { get; }
    public abstract virtual IContactFetcher GetByObjectId(string objectId);
    public abstract virtual IContactFetcher get_Item(string objectId);
    public abstract virtual Task`1<IPagedCollection`1<IContact>> ExecuteAsync();
    public abstract virtual Task AddContactAsync(IContact item, bool deferredSave);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IContactFetcher {
    public abstract virtual Task`1<IContact> ExecuteAsync();
    public abstract virtual IContactFetcher Expand(Expression`1<Func`2<IContact, TTarget>> navigationPropertyAccessor);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IContract {
    [LowerCasePropertyAttribute]
public string ContractType { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<Guid> CustomerContextId { get; public set; }
    [LowerCasePropertyAttribute]
public string DefaultDomainName { get; public set; }
    [LowerCasePropertyAttribute]
public string DisplayName { get; public set; }
    public abstract virtual string get_ContractType();
    public abstract virtual void set_ContractType(string value);
    public abstract virtual Nullable`1<Guid> get_CustomerContextId();
    public abstract virtual void set_CustomerContextId(Nullable`1<Guid> value);
    public abstract virtual string get_DefaultDomainName();
    public abstract virtual void set_DefaultDomainName(string value);
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IContractFetcher {
    public abstract virtual Task`1<IContract> ExecuteAsync();
    public abstract virtual IContractFetcher Expand(Expression`1<Func`2<IContract, TTarget>> navigationPropertyAccessor);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDevice {
    [LowerCasePropertyAttribute]
public Nullable`1<bool> AccountEnabled { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<AlternativeSecurityId> AlternativeSecurityIds { get; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> ApproximateLastLogonTimestamp { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<Guid> DeviceId { get; public set; }
    [LowerCasePropertyAttribute]
public string DeviceMetadata { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<int> DeviceObjectVersion { get; public set; }
    [LowerCasePropertyAttribute]
public string DeviceOSType { get; public set; }
    [LowerCasePropertyAttribute]
public string DeviceOSVersion { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> DevicePhysicalIds { get; }
    [LowerCasePropertyAttribute]
public string DeviceTrustType { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> DirSyncEnabled { get; public set; }
    [LowerCasePropertyAttribute]
public string DisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> IsCompliant { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> IsManaged { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> LastDirSyncTime { get; public set; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IDirectoryObject> RegisteredOwners { get; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IDirectoryObject> RegisteredUsers { get; }
    public abstract virtual Nullable`1<bool> get_AccountEnabled();
    public abstract virtual void set_AccountEnabled(Nullable`1<bool> value);
    public abstract virtual IList`1<AlternativeSecurityId> get_AlternativeSecurityIds();
    public abstract virtual Nullable`1<DateTime> get_ApproximateLastLogonTimestamp();
    public abstract virtual void set_ApproximateLastLogonTimestamp(Nullable`1<DateTime> value);
    public abstract virtual Nullable`1<Guid> get_DeviceId();
    public abstract virtual void set_DeviceId(Nullable`1<Guid> value);
    public abstract virtual string get_DeviceMetadata();
    public abstract virtual void set_DeviceMetadata(string value);
    public abstract virtual Nullable`1<int> get_DeviceObjectVersion();
    public abstract virtual void set_DeviceObjectVersion(Nullable`1<int> value);
    public abstract virtual string get_DeviceOSType();
    public abstract virtual void set_DeviceOSType(string value);
    public abstract virtual string get_DeviceOSVersion();
    public abstract virtual void set_DeviceOSVersion(string value);
    public abstract virtual IList`1<string> get_DevicePhysicalIds();
    public abstract virtual string get_DeviceTrustType();
    public abstract virtual void set_DeviceTrustType(string value);
    public abstract virtual Nullable`1<bool> get_DirSyncEnabled();
    public abstract virtual void set_DirSyncEnabled(Nullable`1<bool> value);
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
    public abstract virtual Nullable`1<bool> get_IsCompliant();
    public abstract virtual void set_IsCompliant(Nullable`1<bool> value);
    public abstract virtual Nullable`1<bool> get_IsManaged();
    public abstract virtual void set_IsManaged(Nullable`1<bool> value);
    public abstract virtual Nullable`1<DateTime> get_LastDirSyncTime();
    public abstract virtual void set_LastDirSyncTime(Nullable`1<DateTime> value);
    public abstract virtual IPagedCollection`1<IDirectoryObject> get_RegisteredOwners();
    public abstract virtual IPagedCollection`1<IDirectoryObject> get_RegisteredUsers();
}
[DefaultMemberAttribute("Item")]
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDeviceCollection {
    public IDeviceFetcher Item { get; }
    public abstract virtual IDeviceFetcher GetByObjectId(string objectId);
    public abstract virtual IDeviceFetcher get_Item(string objectId);
    public abstract virtual Task`1<IPagedCollection`1<IDevice>> ExecuteAsync();
    public abstract virtual Task AddDeviceAsync(IDevice item, bool deferredSave);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDeviceConfiguration {
    [LowerCasePropertyAttribute]
public IList`1<Byte[]> PublicIssuerCertificates { get; }
    [LowerCasePropertyAttribute]
public IList`1<Byte[]> CloudPublicIssuerCertificates { get; }
    [LowerCasePropertyAttribute]
public Nullable`1<int> RegistrationQuota { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<int> MaximumRegistrationInactivityPeriod { get; public set; }
    public abstract virtual IList`1<Byte[]> get_PublicIssuerCertificates();
    public abstract virtual IList`1<Byte[]> get_CloudPublicIssuerCertificates();
    public abstract virtual Nullable`1<int> get_RegistrationQuota();
    public abstract virtual void set_RegistrationQuota(Nullable`1<int> value);
    public abstract virtual Nullable`1<int> get_MaximumRegistrationInactivityPeriod();
    public abstract virtual void set_MaximumRegistrationInactivityPeriod(Nullable`1<int> value);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDeviceConfigurationFetcher {
    public abstract virtual Task`1<IDeviceConfiguration> ExecuteAsync();
    public abstract virtual IDeviceConfigurationFetcher Expand(Expression`1<Func`2<IDeviceConfiguration, TTarget>> navigationPropertyAccessor);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDeviceFetcher {
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection RegisteredOwners { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection RegisteredUsers { get; }
    public abstract virtual Task`1<IDevice> ExecuteAsync();
    public abstract virtual IDeviceFetcher Expand(Expression`1<Func`2<IDevice, TTarget>> navigationPropertyAccessor);
    public abstract virtual IDirectoryObjectCollection get_RegisteredOwners();
    public abstract virtual IDirectoryObjectCollection get_RegisteredUsers();
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryLinkChange {
    [LowerCasePropertyAttribute]
public string AssociationType { get; public set; }
    [LowerCasePropertyAttribute]
public string SourceObjectId { get; public set; }
    [LowerCasePropertyAttribute]
public string SourceObjectType { get; public set; }
    [LowerCasePropertyAttribute]
public string SourceObjectUri { get; public set; }
    [LowerCasePropertyAttribute]
public string TargetObjectId { get; public set; }
    [LowerCasePropertyAttribute]
public string TargetObjectType { get; public set; }
    [LowerCasePropertyAttribute]
public string TargetObjectUri { get; public set; }
    public abstract virtual string get_AssociationType();
    public abstract virtual void set_AssociationType(string value);
    public abstract virtual string get_SourceObjectId();
    public abstract virtual void set_SourceObjectId(string value);
    public abstract virtual string get_SourceObjectType();
    public abstract virtual void set_SourceObjectType(string value);
    public abstract virtual string get_SourceObjectUri();
    public abstract virtual void set_SourceObjectUri(string value);
    public abstract virtual string get_TargetObjectId();
    public abstract virtual void set_TargetObjectId(string value);
    public abstract virtual string get_TargetObjectType();
    public abstract virtual void set_TargetObjectType(string value);
    public abstract virtual string get_TargetObjectUri();
    public abstract virtual void set_TargetObjectUri(string value);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryLinkChangeFetcher {
    public abstract virtual Task`1<IDirectoryLinkChange> ExecuteAsync();
    public abstract virtual IDirectoryLinkChangeFetcher Expand(Expression`1<Func`2<IDirectoryLinkChange, TTarget>> navigationPropertyAccessor);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObject {
    [LowerCasePropertyAttribute]
public string ObjectType { get; public set; }
    [LowerCasePropertyAttribute]
public string ObjectId { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> DeletionTimestamp { get; public set; }
    [LowerCasePropertyAttribute]
public IDirectoryObject CreatedOnBehalfOf { get; public set; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IDirectoryObject> CreatedObjects { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObject Manager { get; public set; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IDirectoryObject> DirectReports { get; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IDirectoryObject> Members { get; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IDirectoryObject> MemberOf { get; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IDirectoryObject> Owners { get; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IDirectoryObject> OwnedObjects { get; }
    public abstract virtual string get_ObjectType();
    public abstract virtual void set_ObjectType(string value);
    public abstract virtual string get_ObjectId();
    public abstract virtual void set_ObjectId(string value);
    public abstract virtual Nullable`1<DateTime> get_DeletionTimestamp();
    public abstract virtual void set_DeletionTimestamp(Nullable`1<DateTime> value);
    public abstract virtual IDirectoryObject get_CreatedOnBehalfOf();
    public abstract virtual void set_CreatedOnBehalfOf(IDirectoryObject value);
    public abstract virtual IPagedCollection`1<IDirectoryObject> get_CreatedObjects();
    public abstract virtual IDirectoryObject get_Manager();
    public abstract virtual void set_Manager(IDirectoryObject value);
    public abstract virtual IPagedCollection`1<IDirectoryObject> get_DirectReports();
    public abstract virtual IPagedCollection`1<IDirectoryObject> get_Members();
    public abstract virtual IPagedCollection`1<IDirectoryObject> get_MemberOf();
    public abstract virtual IPagedCollection`1<IDirectoryObject> get_Owners();
    public abstract virtual IPagedCollection`1<IDirectoryObject> get_OwnedObjects();
    public abstract virtual Task`1<IEnumerable`1<string>> CheckMemberGroupsAsync(ICollection`1<string> groupIds);
    public abstract virtual Task`1<IEnumerable`1<string>> GetMemberGroupsAsync(Nullable`1<bool> securityEnabledOnly);
    public abstract virtual Task`1<IEnumerable`1<string>> GetMemberObjectsAsync(Nullable`1<bool> securityEnabledOnly);
}
[DefaultMemberAttribute("Item")]
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectCollection {
    public IDirectoryObjectFetcher Item { get; }
    public abstract virtual IDirectoryObjectFetcher GetByObjectId(string objectId);
    public abstract virtual IDirectoryObjectFetcher get_Item(string objectId);
    public abstract virtual Task`1<IPagedCollection`1<IDirectoryObject>> ExecuteAsync();
    public abstract virtual Task AddDirectoryObjectAsync(IDirectoryObject item, bool deferredSave);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryObjectFetcher {
    [LowerCasePropertyAttribute]
public IDirectoryObjectFetcher CreatedOnBehalfOf { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection CreatedObjects { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectFetcher Manager { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection DirectReports { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection Members { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection MemberOf { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection Owners { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection OwnedObjects { get; }
    public abstract virtual Task`1<IDirectoryObject> ExecuteAsync();
    public abstract virtual IDirectoryObjectFetcher Expand(Expression`1<Func`2<IDirectoryObject, TTarget>> navigationPropertyAccessor);
    public abstract virtual IDirectoryObjectFetcher get_CreatedOnBehalfOf();
    public abstract virtual IDirectoryObjectCollection get_CreatedObjects();
    public abstract virtual IDirectoryObjectFetcher get_Manager();
    public abstract virtual IDirectoryObjectCollection get_DirectReports();
    public abstract virtual IDirectoryObjectCollection get_Members();
    public abstract virtual IDirectoryObjectCollection get_MemberOf();
    public abstract virtual IDirectoryObjectCollection get_Owners();
    public abstract virtual IDirectoryObjectCollection get_OwnedObjects();
    public abstract virtual IExtensionPropertyFetcher ToExtensionProperty();
    public abstract virtual IServiceEndpointFetcher ToServiceEndpoint();
    public abstract virtual IApplicationFetcher ToApplication();
    public abstract virtual IAppRoleAssignmentFetcher ToAppRoleAssignment();
    public abstract virtual IContactFetcher ToContact();
    public abstract virtual IContractFetcher ToContract();
    public abstract virtual IDeviceFetcher ToDevice();
    public abstract virtual IDeviceConfigurationFetcher ToDeviceConfiguration();
    public abstract virtual IDirectoryLinkChangeFetcher ToDirectoryLinkChange();
    public abstract virtual IDirectoryRoleFetcher ToDirectoryRole();
    public abstract virtual IDirectoryRoleTemplateFetcher ToDirectoryRoleTemplate();
    public abstract virtual IGroupFetcher ToGroup();
    public abstract virtual IPolicyFetcher ToPolicy();
    public abstract virtual IServicePrincipalFetcher ToServicePrincipal();
    public abstract virtual ITenantDetailFetcher ToTenantDetail();
    public abstract virtual IUserFetcher ToUser();
    public abstract virtual Task`1<IEnumerable`1<string>> CheckMemberGroupsAsync(ICollection`1<string> groupIds);
    public abstract virtual Task`1<IEnumerable`1<string>> GetMemberGroupsAsync(Nullable`1<bool> securityEnabledOnly);
    public abstract virtual Task`1<IEnumerable`1<string>> GetMemberObjectsAsync(Nullable`1<bool> securityEnabledOnly);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryRole {
    [LowerCasePropertyAttribute]
public string Description { get; public set; }
    [LowerCasePropertyAttribute]
public string DisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> IsSystem { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> RoleDisabled { get; public set; }
    [LowerCasePropertyAttribute]
public string RoleTemplateId { get; public set; }
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
    public abstract virtual Nullable`1<bool> get_IsSystem();
    public abstract virtual void set_IsSystem(Nullable`1<bool> value);
    public abstract virtual Nullable`1<bool> get_RoleDisabled();
    public abstract virtual void set_RoleDisabled(Nullable`1<bool> value);
    public abstract virtual string get_RoleTemplateId();
    public abstract virtual void set_RoleTemplateId(string value);
}
[LowerCasePropertyAttribute]
[DefaultMemberAttribute("Item")]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryRoleCollection {
    public IDirectoryRoleFetcher Item { get; }
    public abstract virtual IDirectoryRoleFetcher GetByObjectId(string objectId);
    public abstract virtual IDirectoryRoleFetcher get_Item(string objectId);
    public abstract virtual Task`1<IPagedCollection`1<IDirectoryRole>> ExecuteAsync();
    public abstract virtual Task AddDirectoryRoleAsync(IDirectoryRole item, bool deferredSave);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryRoleFetcher {
    public abstract virtual Task`1<IDirectoryRole> ExecuteAsync();
    public abstract virtual IDirectoryRoleFetcher Expand(Expression`1<Func`2<IDirectoryRole, TTarget>> navigationPropertyAccessor);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryRoleTemplate {
    [LowerCasePropertyAttribute]
public string Description { get; public set; }
    [LowerCasePropertyAttribute]
public string DisplayName { get; public set; }
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryRoleTemplateFetcher {
    public abstract virtual Task`1<IDirectoryRoleTemplate> ExecuteAsync();
    public abstract virtual IDirectoryRoleTemplateFetcher Expand(Expression`1<Func`2<IDirectoryRoleTemplate, TTarget>> navigationPropertyAccessor);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDomain {
    [LowerCasePropertyAttribute]
public string AuthenticationType { get; public set; }
    [LowerCasePropertyAttribute]
public string AvailabilityStatus { get; public set; }
    [LowerCasePropertyAttribute]
public bool IsAdminManaged { get; public set; }
    [LowerCasePropertyAttribute]
public bool IsDefault { get; public set; }
    [LowerCasePropertyAttribute]
public bool IsInitial { get; public set; }
    [LowerCasePropertyAttribute]
public bool IsRoot { get; public set; }
    [LowerCasePropertyAttribute]
public bool IsVerified { get; public set; }
    [LowerCasePropertyAttribute]
public string Name { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> SupportedServices { get; }
    [LowerCasePropertyAttribute]
public ForceDeleteState ForceDeleteState { get; public set; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IDomainDnsRecord> ServiceConfigurationRecords { get; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IDomainDnsRecord> VerificationDnsRecords { get; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IDirectoryObject> DomainNameReferences { get; }
    public abstract virtual string get_AuthenticationType();
    public abstract virtual void set_AuthenticationType(string value);
    public abstract virtual string get_AvailabilityStatus();
    public abstract virtual void set_AvailabilityStatus(string value);
    public abstract virtual bool get_IsAdminManaged();
    public abstract virtual void set_IsAdminManaged(bool value);
    public abstract virtual bool get_IsDefault();
    public abstract virtual void set_IsDefault(bool value);
    public abstract virtual bool get_IsInitial();
    public abstract virtual void set_IsInitial(bool value);
    public abstract virtual bool get_IsRoot();
    public abstract virtual void set_IsRoot(bool value);
    public abstract virtual bool get_IsVerified();
    public abstract virtual void set_IsVerified(bool value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual IList`1<string> get_SupportedServices();
    public abstract virtual ForceDeleteState get_ForceDeleteState();
    public abstract virtual void set_ForceDeleteState(ForceDeleteState value);
    public abstract virtual IPagedCollection`1<IDomainDnsRecord> get_ServiceConfigurationRecords();
    public abstract virtual IPagedCollection`1<IDomainDnsRecord> get_VerificationDnsRecords();
    public abstract virtual IPagedCollection`1<IDirectoryObject> get_DomainNameReferences();
    public abstract virtual Task`1<IDomain> VerifyAsync();
    public abstract virtual Task ForceDeleteAsync(Nullable`1<bool> disableUserAccounts);
}
[DefaultMemberAttribute("Item")]
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDomainCollection {
    public IDomainFetcher Item { get; }
    public abstract virtual IDomainFetcher GetByName(string name);
    public abstract virtual IDomainFetcher get_Item(string name);
    public abstract virtual Task`1<IPagedCollection`1<IDomain>> ExecuteAsync();
    public abstract virtual Task AddDomainAsync(IDomain item, bool deferredSave);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsCnameRecord {
    [LowerCasePropertyAttribute]
public string CanonicalName { get; public set; }
    public abstract virtual string get_CanonicalName();
    public abstract virtual void set_CanonicalName(string value);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsCnameRecordFetcher {
    public abstract virtual Task`1<IDomainDnsCnameRecord> ExecuteAsync();
    public abstract virtual IDomainDnsCnameRecordFetcher Expand(Expression`1<Func`2<IDomainDnsCnameRecord, TTarget>> navigationPropertyAccessor);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsMxRecord {
    [LowerCasePropertyAttribute]
public string MailExchange { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<int> Preference { get; public set; }
    public abstract virtual string get_MailExchange();
    public abstract virtual void set_MailExchange(string value);
    public abstract virtual Nullable`1<int> get_Preference();
    public abstract virtual void set_Preference(Nullable`1<int> value);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsMxRecordFetcher {
    public abstract virtual Task`1<IDomainDnsMxRecord> ExecuteAsync();
    public abstract virtual IDomainDnsMxRecordFetcher Expand(Expression`1<Func`2<IDomainDnsMxRecord, TTarget>> navigationPropertyAccessor);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsRecord {
    [LowerCasePropertyAttribute]
public Guid DnsRecordId { get; public set; }
    [LowerCasePropertyAttribute]
public bool IsOptional { get; public set; }
    [LowerCasePropertyAttribute]
public string Label { get; public set; }
    [LowerCasePropertyAttribute]
public string RecordType { get; public set; }
    [LowerCasePropertyAttribute]
public string SupportedService { get; public set; }
    [LowerCasePropertyAttribute]
public int Ttl { get; public set; }
    public abstract virtual Guid get_DnsRecordId();
    public abstract virtual void set_DnsRecordId(Guid value);
    public abstract virtual bool get_IsOptional();
    public abstract virtual void set_IsOptional(bool value);
    public abstract virtual string get_Label();
    public abstract virtual void set_Label(string value);
    public abstract virtual string get_RecordType();
    public abstract virtual void set_RecordType(string value);
    public abstract virtual string get_SupportedService();
    public abstract virtual void set_SupportedService(string value);
    public abstract virtual int get_Ttl();
    public abstract virtual void set_Ttl(int value);
}
[LowerCasePropertyAttribute]
[DefaultMemberAttribute("Item")]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsRecordCollection {
    public IDomainDnsRecordFetcher Item { get; }
    public abstract virtual IDomainDnsRecordFetcher GetByRecordType(string recordType);
    public abstract virtual IDomainDnsRecordFetcher get_Item(string recordType);
    public abstract virtual Task`1<IPagedCollection`1<IDomainDnsRecord>> ExecuteAsync();
    public abstract virtual Task AddDomainDnsRecordAsync(IDomainDnsRecord item, bool deferredSave);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsRecordFetcher {
    public abstract virtual Task`1<IDomainDnsRecord> ExecuteAsync();
    public abstract virtual IDomainDnsRecordFetcher Expand(Expression`1<Func`2<IDomainDnsRecord, TTarget>> navigationPropertyAccessor);
    public abstract virtual IDomainDnsCnameRecordFetcher ToDomainDnsCnameRecord();
    public abstract virtual IDomainDnsMxRecordFetcher ToDomainDnsMxRecord();
    public abstract virtual IDomainDnsSrvRecordFetcher ToDomainDnsSrvRecord();
    public abstract virtual IDomainDnsTxtRecordFetcher ToDomainDnsTxtRecord();
    public abstract virtual IDomainDnsUnavailableRecordFetcher ToDomainDnsUnavailableRecord();
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsSrvRecord {
    [LowerCasePropertyAttribute]
public string NameTarget { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<int> Port { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<int> Priority { get; public set; }
    [LowerCasePropertyAttribute]
public string Protocol { get; public set; }
    [LowerCasePropertyAttribute]
public string Service { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<int> Weight { get; public set; }
    public abstract virtual string get_NameTarget();
    public abstract virtual void set_NameTarget(string value);
    public abstract virtual Nullable`1<int> get_Port();
    public abstract virtual void set_Port(Nullable`1<int> value);
    public abstract virtual Nullable`1<int> get_Priority();
    public abstract virtual void set_Priority(Nullable`1<int> value);
    public abstract virtual string get_Protocol();
    public abstract virtual void set_Protocol(string value);
    public abstract virtual string get_Service();
    public abstract virtual void set_Service(string value);
    public abstract virtual Nullable`1<int> get_Weight();
    public abstract virtual void set_Weight(Nullable`1<int> value);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsSrvRecordFetcher {
    public abstract virtual Task`1<IDomainDnsSrvRecord> ExecuteAsync();
    public abstract virtual IDomainDnsSrvRecordFetcher Expand(Expression`1<Func`2<IDomainDnsSrvRecord, TTarget>> navigationPropertyAccessor);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsTxtRecord {
    [LowerCasePropertyAttribute]
public string Text { get; public set; }
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsTxtRecordFetcher {
    public abstract virtual Task`1<IDomainDnsTxtRecord> ExecuteAsync();
    public abstract virtual IDomainDnsTxtRecordFetcher Expand(Expression`1<Func`2<IDomainDnsTxtRecord, TTarget>> navigationPropertyAccessor);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsUnavailableRecord {
    [LowerCasePropertyAttribute]
public string Description { get; public set; }
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDomainDnsUnavailableRecordFetcher {
    public abstract virtual Task`1<IDomainDnsUnavailableRecord> ExecuteAsync();
    public abstract virtual IDomainDnsUnavailableRecordFetcher Expand(Expression`1<Func`2<IDomainDnsUnavailableRecord, TTarget>> navigationPropertyAccessor);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IDomainFetcher {
    [LowerCasePropertyAttribute]
public IDomainDnsRecordCollection ServiceConfigurationRecords { get; }
    [LowerCasePropertyAttribute]
public IDomainDnsRecordCollection VerificationDnsRecords { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection DomainNameReferences { get; }
    public abstract virtual Task`1<IDomain> ExecuteAsync();
    public abstract virtual IDomainFetcher Expand(Expression`1<Func`2<IDomain, TTarget>> navigationPropertyAccessor);
    public abstract virtual IDomainDnsRecordCollection get_ServiceConfigurationRecords();
    public abstract virtual IDomainDnsRecordCollection get_VerificationDnsRecords();
    public abstract virtual IDirectoryObjectCollection get_DomainNameReferences();
    public abstract virtual Task`1<IDomain> VerifyAsync();
    public abstract virtual Task ForceDeleteAsync(Nullable`1<bool> disableUserAccounts);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IExtensionProperty {
    [LowerCasePropertyAttribute]
public string AppDisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public string Name { get; public set; }
    [LowerCasePropertyAttribute]
public string DataType { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> IsSyncedFromOnPremises { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> TargetObjects { get; }
    public abstract virtual string get_AppDisplayName();
    public abstract virtual void set_AppDisplayName(string value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_DataType();
    public abstract virtual void set_DataType(string value);
    public abstract virtual Nullable`1<bool> get_IsSyncedFromOnPremises();
    public abstract virtual void set_IsSyncedFromOnPremises(Nullable`1<bool> value);
    public abstract virtual IList`1<string> get_TargetObjects();
}
[LowerCasePropertyAttribute]
[DefaultMemberAttribute("Item")]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IExtensionPropertyCollection {
    public IExtensionPropertyFetcher Item { get; }
    public abstract virtual IExtensionPropertyFetcher GetByObjectId(string objectId);
    public abstract virtual IExtensionPropertyFetcher get_Item(string objectId);
    public abstract virtual Task`1<IPagedCollection`1<IExtensionProperty>> ExecuteAsync();
    public abstract virtual Task AddExtensionPropertyAsync(IExtensionProperty item, bool deferredSave);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IExtensionPropertyFetcher {
    public abstract virtual Task`1<IExtensionProperty> ExecuteAsync();
    public abstract virtual IExtensionPropertyFetcher Expand(Expression`1<Func`2<IExtensionProperty, TTarget>> navigationPropertyAccessor);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IGroup {
    [LowerCasePropertyAttribute]
public string Description { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> DirSyncEnabled { get; public set; }
    [LowerCasePropertyAttribute]
public string DisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> LastDirSyncTime { get; public set; }
    [LowerCasePropertyAttribute]
public string Mail { get; public set; }
    [LowerCasePropertyAttribute]
public string MailNickname { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> MailEnabled { get; public set; }
    [LowerCasePropertyAttribute]
public string OnPremisesSecurityIdentifier { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<ProvisioningError> ProvisioningErrors { get; }
    [LowerCasePropertyAttribute]
public IList`1<string> ProxyAddresses { get; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> SecurityEnabled { get; public set; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IAppRoleAssignment> AppRoleAssignments { get; }
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual Nullable`1<bool> get_DirSyncEnabled();
    public abstract virtual void set_DirSyncEnabled(Nullable`1<bool> value);
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
    public abstract virtual Nullable`1<DateTime> get_LastDirSyncTime();
    public abstract virtual void set_LastDirSyncTime(Nullable`1<DateTime> value);
    public abstract virtual string get_Mail();
    public abstract virtual void set_Mail(string value);
    public abstract virtual string get_MailNickname();
    public abstract virtual void set_MailNickname(string value);
    public abstract virtual Nullable`1<bool> get_MailEnabled();
    public abstract virtual void set_MailEnabled(Nullable`1<bool> value);
    public abstract virtual string get_OnPremisesSecurityIdentifier();
    public abstract virtual void set_OnPremisesSecurityIdentifier(string value);
    public abstract virtual IList`1<ProvisioningError> get_ProvisioningErrors();
    public abstract virtual IList`1<string> get_ProxyAddresses();
    public abstract virtual Nullable`1<bool> get_SecurityEnabled();
    public abstract virtual void set_SecurityEnabled(Nullable`1<bool> value);
    public abstract virtual IPagedCollection`1<IAppRoleAssignment> get_AppRoleAssignments();
}
[DefaultMemberAttribute("Item")]
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IGroupCollection {
    public IGroupFetcher Item { get; }
    public abstract virtual IGroupFetcher GetByObjectId(string objectId);
    public abstract virtual IGroupFetcher get_Item(string objectId);
    public abstract virtual Task`1<IPagedCollection`1<IGroup>> ExecuteAsync();
    public abstract virtual Task AddGroupAsync(IGroup item, bool deferredSave);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IGroupFetcher {
    [LowerCasePropertyAttribute]
public IAppRoleAssignmentCollection AppRoleAssignments { get; }
    public abstract virtual Task`1<IGroup> ExecuteAsync();
    public abstract virtual IGroupFetcher Expand(Expression`1<Func`2<IGroup, TTarget>> navigationPropertyAccessor);
    public abstract virtual IAppRoleAssignmentCollection get_AppRoleAssignments();
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.ILicenseDetail {
    [LowerCasePropertyAttribute]
public string ObjectId { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<ServicePlanInfo> ServicePlans { get; }
    [LowerCasePropertyAttribute]
public Nullable`1<Guid> SkuId { get; public set; }
    [LowerCasePropertyAttribute]
public string SkuPartNumber { get; public set; }
    public abstract virtual string get_ObjectId();
    public abstract virtual void set_ObjectId(string value);
    public abstract virtual IList`1<ServicePlanInfo> get_ServicePlans();
    public abstract virtual Nullable`1<Guid> get_SkuId();
    public abstract virtual void set_SkuId(Nullable`1<Guid> value);
    public abstract virtual string get_SkuPartNumber();
    public abstract virtual void set_SkuPartNumber(string value);
}
[DefaultMemberAttribute("Item")]
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.ILicenseDetailCollection {
    public ILicenseDetailFetcher Item { get; }
    public abstract virtual ILicenseDetailFetcher GetByObjectId(string objectId);
    public abstract virtual ILicenseDetailFetcher get_Item(string objectId);
    public abstract virtual Task`1<IPagedCollection`1<ILicenseDetail>> ExecuteAsync();
    public abstract virtual Task AddLicenseDetailAsync(ILicenseDetail item, bool deferredSave);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.ILicenseDetailFetcher {
    public abstract virtual Task`1<ILicenseDetail> ExecuteAsync();
    public abstract virtual ILicenseDetailFetcher Expand(Expression`1<Func`2<ILicenseDetail, TTarget>> navigationPropertyAccessor);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.AddIn : ComplexTypeBase {
    public Nullable`1<Guid> id { get; public set; }
    public string type { get; public set; }
    public IList`1<KeyValue> properties { get; public set; }
    internal AddIn(bool dontCreateProxy);
    protected AddIn(ComplexTypeBase proxy);
    public Nullable`1<Guid> get_id();
    public void set_id(Nullable`1<Guid> value);
    public string get_type();
    public void set_type(string value);
    public IList`1<KeyValue> get_properties();
    public void set_properties(IList`1<KeyValue> value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.AlternativeSecurityId : ComplexTypeBase {
    public Nullable`1<int> type { get; public set; }
    public string identityProvider { get; public set; }
    public Byte[] key { get; public set; }
    internal AlternativeSecurityId(bool dontCreateProxy);
    protected AlternativeSecurityId(ComplexTypeBase proxy);
    public Nullable`1<int> get_type();
    public void set_type(Nullable`1<int> value);
    public string get_identityProvider();
    public void set_identityProvider(string value);
    public Byte[] get_key();
    public void set_key(Byte[] value);
}
[DataServiceKeyAttribute("objectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.Application : DirectoryObject {
    private DataServiceStreamLink _mainLogo;
    public IList`1<AddIn> addIns { get; public set; }
    public string appId { get; public set; }
    public IList`1<AppRole> appRoles { get; public set; }
    public Nullable`1<bool> availableToOtherTenants { get; public set; }
    public string displayName { get; public set; }
    public string errorUrl { get; public set; }
    public string groupMembershipClaims { get; public set; }
    public string homepage { get; public set; }
    public IList`1<string> identifierUris { get; public set; }
    public IList`1<KeyCredential> keyCredentials { get; public set; }
    public IList`1<Guid> knownClientApplications { get; public set; }
    public DataServiceStreamLink mainLogo { get; public set; }
    public string logoutUrl { get; public set; }
    public bool oauth2AllowImplicitFlow { get; public set; }
    public bool oauth2AllowUrlPathMatching { get; public set; }
    public IList`1<OAuth2Permission> oauth2Permissions { get; public set; }
    public bool oauth2RequirePostResponse { get; public set; }
    public IList`1<PasswordCredential> passwordCredentials { get; public set; }
    public Nullable`1<bool> publicClient { get; public set; }
    public string recordConsentConditions { get; public set; }
    public IList`1<string> replyUrls { get; public set; }
    public IList`1<RequiredResourceAccess> requiredResourceAccess { get; public set; }
    public string samlMetadataUrl { get; public set; }
    public IList`1<ExtensionProperty> extensionProperties { get; public set; }
    public IList`1<DirectoryObject> policies { get; public set; }
    public IList`1<ServiceEndpoint> serviceEndpoints { get; public set; }
    internal Application(bool dontCreateProxy);
    protected Application(GraphObject proxy);
    public IList`1<AddIn> get_addIns();
    public void set_addIns(IList`1<AddIn> value);
    public string get_appId();
    public void set_appId(string value);
    public IList`1<AppRole> get_appRoles();
    public void set_appRoles(IList`1<AppRole> value);
    public Nullable`1<bool> get_availableToOtherTenants();
    public void set_availableToOtherTenants(Nullable`1<bool> value);
    public string get_displayName();
    public void set_displayName(string value);
    public string get_errorUrl();
    public void set_errorUrl(string value);
    public string get_groupMembershipClaims();
    public void set_groupMembershipClaims(string value);
    public string get_homepage();
    public void set_homepage(string value);
    public IList`1<string> get_identifierUris();
    public void set_identifierUris(IList`1<string> value);
    public IList`1<KeyCredential> get_keyCredentials();
    public void set_keyCredentials(IList`1<KeyCredential> value);
    public IList`1<Guid> get_knownClientApplications();
    public void set_knownClientApplications(IList`1<Guid> value);
    public DataServiceStreamLink get_mainLogo();
    public void set_mainLogo(DataServiceStreamLink value);
    public string get_logoutUrl();
    public void set_logoutUrl(string value);
    public bool get_oauth2AllowImplicitFlow();
    public void set_oauth2AllowImplicitFlow(bool value);
    public bool get_oauth2AllowUrlPathMatching();
    public void set_oauth2AllowUrlPathMatching(bool value);
    public IList`1<OAuth2Permission> get_oauth2Permissions();
    public void set_oauth2Permissions(IList`1<OAuth2Permission> value);
    public bool get_oauth2RequirePostResponse();
    public void set_oauth2RequirePostResponse(bool value);
    public IList`1<PasswordCredential> get_passwordCredentials();
    public void set_passwordCredentials(IList`1<PasswordCredential> value);
    public Nullable`1<bool> get_publicClient();
    public void set_publicClient(Nullable`1<bool> value);
    public string get_recordConsentConditions();
    public void set_recordConsentConditions(string value);
    public IList`1<string> get_replyUrls();
    public void set_replyUrls(IList`1<string> value);
    public IList`1<RequiredResourceAccess> get_requiredResourceAccess();
    public void set_requiredResourceAccess(IList`1<RequiredResourceAccess> value);
    public string get_samlMetadataUrl();
    public void set_samlMetadataUrl(string value);
    public IList`1<ExtensionProperty> get_extensionProperties();
    public void set_extensionProperties(IList`1<ExtensionProperty> value);
    public IList`1<DirectoryObject> get_policies();
    public void set_policies(IList`1<DirectoryObject> value);
    public IList`1<ServiceEndpoint> get_serviceEndpoints();
    public void set_serviceEndpoints(IList`1<ServiceEndpoint> value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.AppRole : ComplexTypeBase {
    public IList`1<string> allowedMemberTypes { get; public set; }
    public string description { get; public set; }
    public string displayName { get; public set; }
    public Guid id { get; public set; }
    public bool isEnabled { get; public set; }
    public string value { get; public set; }
    internal AppRole(bool dontCreateProxy);
    protected AppRole(ComplexTypeBase proxy);
    public IList`1<string> get_allowedMemberTypes();
    public void set_allowedMemberTypes(IList`1<string> value);
    public string get_description();
    public void set_description(string value);
    public string get_displayName();
    public void set_displayName(string value);
    public Guid get_id();
    public void set_id(Guid value);
    public bool get_isEnabled();
    public void set_isEnabled(bool value);
    public string get_value();
    public void set_value(string value);
}
[DataServiceKeyAttribute("objectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.AppRoleAssignment : DirectoryObject {
    public Nullable`1<DateTime> creationTimestamp { get; public set; }
    public Guid id { get; public set; }
    public string principalDisplayName { get; public set; }
    public Nullable`1<Guid> principalId { get; public set; }
    public string principalType { get; public set; }
    public string resourceDisplayName { get; public set; }
    public Nullable`1<Guid> resourceId { get; public set; }
    internal AppRoleAssignment(bool dontCreateProxy);
    protected AppRoleAssignment(GraphObject proxy);
    public Nullable`1<DateTime> get_creationTimestamp();
    public void set_creationTimestamp(Nullable`1<DateTime> value);
    public Guid get_id();
    public void set_id(Guid value);
    public string get_principalDisplayName();
    public void set_principalDisplayName(string value);
    public Nullable`1<Guid> get_principalId();
    public void set_principalId(Nullable`1<Guid> value);
    public string get_principalType();
    public void set_principalType(string value);
    public string get_resourceDisplayName();
    public void set_resourceDisplayName(string value);
    public Nullable`1<Guid> get_resourceId();
    public void set_resourceId(Nullable`1<Guid> value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.AssignedLicense : ComplexTypeBase {
    public IList`1<Guid> disabledPlans { get; public set; }
    public Nullable`1<Guid> skuId { get; public set; }
    internal AssignedLicense(bool dontCreateProxy);
    protected AssignedLicense(ComplexTypeBase proxy);
    public IList`1<Guid> get_disabledPlans();
    public void set_disabledPlans(IList`1<Guid> value);
    public Nullable`1<Guid> get_skuId();
    public void set_skuId(Nullable`1<Guid> value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.AssignedPlan : ComplexTypeBase {
    public Nullable`1<DateTime> assignedTimestamp { get; public set; }
    public string capabilityStatus { get; public set; }
    public string service { get; public set; }
    public Nullable`1<Guid> servicePlanId { get; public set; }
    internal AssignedPlan(bool dontCreateProxy);
    protected AssignedPlan(ComplexTypeBase proxy);
    public Nullable`1<DateTime> get_assignedTimestamp();
    public void set_assignedTimestamp(Nullable`1<DateTime> value);
    public string get_capabilityStatus();
    public void set_capabilityStatus(string value);
    public string get_service();
    public void set_service(string value);
    public Nullable`1<Guid> get_servicePlanId();
    public void set_servicePlanId(Nullable`1<Guid> value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.CertificateAuthorityInformation : ComplexTypeBase {
    public string authorityType { get; public set; }
    public string crlDistributionPoint { get; public set; }
    public string deltaCrlDistributionPoint { get; public set; }
    public Byte[] trustedCertificate { get; public set; }
    public string trustedIssuer { get; public set; }
    public string trustedIssuerSki { get; public set; }
    internal CertificateAuthorityInformation(bool dontCreateProxy);
    protected CertificateAuthorityInformation(ComplexTypeBase proxy);
    public string get_authorityType();
    public void set_authorityType(string value);
    public string get_crlDistributionPoint();
    public void set_crlDistributionPoint(string value);
    public string get_deltaCrlDistributionPoint();
    public void set_deltaCrlDistributionPoint(string value);
    public Byte[] get_trustedCertificate();
    public void set_trustedCertificate(Byte[] value);
    public string get_trustedIssuer();
    public void set_trustedIssuer(string value);
    public string get_trustedIssuerSki();
    public void set_trustedIssuerSki(string value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.ComplexTypeBase : ComplexTypeBase {
    protected ComplexTypeBase(bool dontCreateProxy);
    protected ComplexTypeBase(ComplexTypeBase proxy);
}
[DataServiceKeyAttribute("objectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.Contact : DirectoryObject {
    private DataServiceStreamLink _thumbnailPhoto;
    public string city { get; public set; }
    public string companyName { get; public set; }
    public string country { get; public set; }
    public string department { get; public set; }
    public Nullable`1<bool> dirSyncEnabled { get; public set; }
    public string displayName { get; public set; }
    public string facsimileTelephoneNumber { get; public set; }
    public string givenName { get; public set; }
    public string jobTitle { get; public set; }
    public Nullable`1<DateTime> lastDirSyncTime { get; public set; }
    public string mail { get; public set; }
    public string mailNickname { get; public set; }
    public string mobile { get; public set; }
    public string physicalDeliveryOfficeName { get; public set; }
    public string postalCode { get; public set; }
    public IList`1<ProvisioningError> provisioningErrors { get; public set; }
    public IList`1<string> proxyAddresses { get; public set; }
    public string sipProxyAddress { get; public set; }
    public string state { get; public set; }
    public string streetAddress { get; public set; }
    public string surname { get; public set; }
    public string telephoneNumber { get; public set; }
    public DataServiceStreamLink thumbnailPhoto { get; public set; }
    internal Contact(bool dontCreateProxy);
    protected Contact(GraphObject proxy);
    public string get_city();
    public void set_city(string value);
    public string get_companyName();
    public void set_companyName(string value);
    public string get_country();
    public void set_country(string value);
    public string get_department();
    public void set_department(string value);
    public Nullable`1<bool> get_dirSyncEnabled();
    public void set_dirSyncEnabled(Nullable`1<bool> value);
    public string get_displayName();
    public void set_displayName(string value);
    public string get_facsimileTelephoneNumber();
    public void set_facsimileTelephoneNumber(string value);
    public string get_givenName();
    public void set_givenName(string value);
    public string get_jobTitle();
    public void set_jobTitle(string value);
    public Nullable`1<DateTime> get_lastDirSyncTime();
    public void set_lastDirSyncTime(Nullable`1<DateTime> value);
    public string get_mail();
    public void set_mail(string value);
    public string get_mailNickname();
    public void set_mailNickname(string value);
    public string get_mobile();
    public void set_mobile(string value);
    public string get_physicalDeliveryOfficeName();
    public void set_physicalDeliveryOfficeName(string value);
    public string get_postalCode();
    public void set_postalCode(string value);
    public IList`1<ProvisioningError> get_provisioningErrors();
    public void set_provisioningErrors(IList`1<ProvisioningError> value);
    public IList`1<string> get_proxyAddresses();
    public void set_proxyAddresses(IList`1<string> value);
    public string get_sipProxyAddress();
    public void set_sipProxyAddress(string value);
    public string get_state();
    public void set_state(string value);
    public string get_streetAddress();
    public void set_streetAddress(string value);
    public string get_surname();
    public void set_surname(string value);
    public string get_telephoneNumber();
    public void set_telephoneNumber(string value);
    public DataServiceStreamLink get_thumbnailPhoto();
    public void set_thumbnailPhoto(DataServiceStreamLink value);
}
[DataServiceKeyAttribute("objectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.Contract : DirectoryObject {
    public string contractType { get; public set; }
    public Nullable`1<Guid> customerContextId { get; public set; }
    public string defaultDomainName { get; public set; }
    public string displayName { get; public set; }
    internal Contract(bool dontCreateProxy);
    protected Contract(GraphObject proxy);
    public string get_contractType();
    public void set_contractType(string value);
    public Nullable`1<Guid> get_customerContextId();
    public void set_customerContextId(Nullable`1<Guid> value);
    public string get_defaultDomainName();
    public void set_defaultDomainName(string value);
    public string get_displayName();
    public void set_displayName(string value);
}
[DataServiceKeyAttribute("objectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.Device : DirectoryObject {
    public Nullable`1<bool> accountEnabled { get; public set; }
    public IList`1<AlternativeSecurityId> alternativeSecurityIds { get; public set; }
    public Nullable`1<DateTime> approximateLastLogonTimestamp { get; public set; }
    public Nullable`1<Guid> deviceId { get; public set; }
    public string deviceMetadata { get; public set; }
    public Nullable`1<int> deviceObjectVersion { get; public set; }
    public string deviceOSType { get; public set; }
    public string deviceOSVersion { get; public set; }
    public IList`1<string> devicePhysicalIds { get; public set; }
    public string deviceTrustType { get; public set; }
    public Nullable`1<bool> dirSyncEnabled { get; public set; }
    public string displayName { get; public set; }
    public Nullable`1<bool> isCompliant { get; public set; }
    public Nullable`1<bool> isManaged { get; public set; }
    public Nullable`1<DateTime> lastDirSyncTime { get; public set; }
    public IList`1<DirectoryObject> registeredOwners { get; public set; }
    public IList`1<DirectoryObject> registeredUsers { get; public set; }
    internal Device(bool dontCreateProxy);
    protected Device(GraphObject proxy);
    public Nullable`1<bool> get_accountEnabled();
    public void set_accountEnabled(Nullable`1<bool> value);
    public IList`1<AlternativeSecurityId> get_alternativeSecurityIds();
    public void set_alternativeSecurityIds(IList`1<AlternativeSecurityId> value);
    public Nullable`1<DateTime> get_approximateLastLogonTimestamp();
    public void set_approximateLastLogonTimestamp(Nullable`1<DateTime> value);
    public Nullable`1<Guid> get_deviceId();
    public void set_deviceId(Nullable`1<Guid> value);
    public string get_deviceMetadata();
    public void set_deviceMetadata(string value);
    public Nullable`1<int> get_deviceObjectVersion();
    public void set_deviceObjectVersion(Nullable`1<int> value);
    public string get_deviceOSType();
    public void set_deviceOSType(string value);
    public string get_deviceOSVersion();
    public void set_deviceOSVersion(string value);
    public IList`1<string> get_devicePhysicalIds();
    public void set_devicePhysicalIds(IList`1<string> value);
    public string get_deviceTrustType();
    public void set_deviceTrustType(string value);
    public Nullable`1<bool> get_dirSyncEnabled();
    public void set_dirSyncEnabled(Nullable`1<bool> value);
    public string get_displayName();
    public void set_displayName(string value);
    public Nullable`1<bool> get_isCompliant();
    public void set_isCompliant(Nullable`1<bool> value);
    public Nullable`1<bool> get_isManaged();
    public void set_isManaged(Nullable`1<bool> value);
    public Nullable`1<DateTime> get_lastDirSyncTime();
    public void set_lastDirSyncTime(Nullable`1<DateTime> value);
    public IList`1<DirectoryObject> get_registeredOwners();
    public void set_registeredOwners(IList`1<DirectoryObject> value);
    public IList`1<DirectoryObject> get_registeredUsers();
    public void set_registeredUsers(IList`1<DirectoryObject> value);
}
[DataServiceKeyAttribute("objectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.DeviceConfiguration : DirectoryObject {
    public IList`1<Byte[]> publicIssuerCertificates { get; public set; }
    public IList`1<Byte[]> cloudPublicIssuerCertificates { get; public set; }
    public Nullable`1<int> registrationQuota { get; public set; }
    public Nullable`1<int> maximumRegistrationInactivityPeriod { get; public set; }
    internal DeviceConfiguration(bool dontCreateProxy);
    protected DeviceConfiguration(GraphObject proxy);
    public IList`1<Byte[]> get_publicIssuerCertificates();
    public void set_publicIssuerCertificates(IList`1<Byte[]> value);
    public IList`1<Byte[]> get_cloudPublicIssuerCertificates();
    public void set_cloudPublicIssuerCertificates(IList`1<Byte[]> value);
    public Nullable`1<int> get_registrationQuota();
    public void set_registrationQuota(Nullable`1<int> value);
    public Nullable`1<int> get_maximumRegistrationInactivityPeriod();
    public void set_maximumRegistrationInactivityPeriod(Nullable`1<int> value);
}
[DataServiceKeyAttribute("objectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.DirectoryLinkChange : DirectoryObject {
    public string associationType { get; public set; }
    public string sourceObjectId { get; public set; }
    public string sourceObjectType { get; public set; }
    public string sourceObjectUri { get; public set; }
    public string targetObjectId { get; public set; }
    public string targetObjectType { get; public set; }
    public string targetObjectUri { get; public set; }
    internal DirectoryLinkChange(bool dontCreateProxy);
    protected DirectoryLinkChange(GraphObject proxy);
    public string get_associationType();
    public void set_associationType(string value);
    public string get_sourceObjectId();
    public void set_sourceObjectId(string value);
    public string get_sourceObjectType();
    public void set_sourceObjectType(string value);
    public string get_sourceObjectUri();
    public void set_sourceObjectUri(string value);
    public string get_targetObjectId();
    public void set_targetObjectId(string value);
    public string get_targetObjectType();
    public void set_targetObjectType(string value);
    public string get_targetObjectUri();
    public void set_targetObjectUri(string value);
}
[DataServiceKeyAttribute("objectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.DirectoryObject : GraphObject {
    public string objectType { get; public set; }
    public string objectId { get; public set; }
    public Nullable`1<DateTime> deletionTimestamp { get; public set; }
    public DirectoryObject createdOnBehalfOf { get; public set; }
    public IList`1<DirectoryObject> createdObjects { get; public set; }
    public DirectoryObject manager { get; public set; }
    public IList`1<DirectoryObject> directReports { get; public set; }
    public IList`1<DirectoryObject> members { get; public set; }
    public IList`1<DirectoryObject> memberOf { get; public set; }
    public IList`1<DirectoryObject> owners { get; public set; }
    public IList`1<DirectoryObject> ownedObjects { get; public set; }
    internal DirectoryObject(bool dontCreateProxy);
    protected DirectoryObject(GraphObject proxy);
    public string get_objectType();
    public void set_objectType(string value);
    public string get_objectId();
    public void set_objectId(string value);
    public Nullable`1<DateTime> get_deletionTimestamp();
    public void set_deletionTimestamp(Nullable`1<DateTime> value);
    public DirectoryObject get_createdOnBehalfOf();
    public void set_createdOnBehalfOf(DirectoryObject value);
    public IList`1<DirectoryObject> get_createdObjects();
    public void set_createdObjects(IList`1<DirectoryObject> value);
    public DirectoryObject get_manager();
    public void set_manager(DirectoryObject value);
    public IList`1<DirectoryObject> get_directReports();
    public void set_directReports(IList`1<DirectoryObject> value);
    public IList`1<DirectoryObject> get_members();
    public void set_members(IList`1<DirectoryObject> value);
    public IList`1<DirectoryObject> get_memberOf();
    public void set_memberOf(IList`1<DirectoryObject> value);
    public IList`1<DirectoryObject> get_owners();
    public void set_owners(IList`1<DirectoryObject> value);
    public IList`1<DirectoryObject> get_ownedObjects();
    public void set_ownedObjects(IList`1<DirectoryObject> value);
}
[DataServiceKeyAttribute("objectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.DirectoryRole : DirectoryObject {
    public string description { get; public set; }
    public string displayName { get; public set; }
    public Nullable`1<bool> isSystem { get; public set; }
    public Nullable`1<bool> roleDisabled { get; public set; }
    public string roleTemplateId { get; public set; }
    internal DirectoryRole(bool dontCreateProxy);
    protected DirectoryRole(GraphObject proxy);
    public string get_description();
    public void set_description(string value);
    public string get_displayName();
    public void set_displayName(string value);
    public Nullable`1<bool> get_isSystem();
    public void set_isSystem(Nullable`1<bool> value);
    public Nullable`1<bool> get_roleDisabled();
    public void set_roleDisabled(Nullable`1<bool> value);
    public string get_roleTemplateId();
    public void set_roleTemplateId(string value);
}
[DataServiceKeyAttribute("objectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.DirectoryRoleTemplate : DirectoryObject {
    public string description { get; public set; }
    public string displayName { get; public set; }
    internal DirectoryRoleTemplate(bool dontCreateProxy);
    protected DirectoryRoleTemplate(GraphObject proxy);
    public string get_description();
    public void set_description(string value);
    public string get_displayName();
    public void set_displayName(string value);
}
[DataServiceKeyAttribute("name")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.Domain : GraphObject {
    public string authenticationType { get; public set; }
    public string availabilityStatus { get; public set; }
    public bool isAdminManaged { get; public set; }
    public bool isDefault { get; public set; }
    public bool isInitial { get; public set; }
    public bool isRoot { get; public set; }
    public bool isVerified { get; public set; }
    public string name { get; public set; }
    public IList`1<string> supportedServices { get; public set; }
    public ForceDeleteState forceDeleteState { get; public set; }
    public IList`1<DomainDnsRecord> serviceConfigurationRecords { get; public set; }
    public IList`1<DomainDnsRecord> verificationDnsRecords { get; public set; }
    public IList`1<DirectoryObject> domainNameReferences { get; public set; }
    internal Domain(bool dontCreateProxy);
    protected Domain(GraphObject proxy);
    public string get_authenticationType();
    public void set_authenticationType(string value);
    public string get_availabilityStatus();
    public void set_availabilityStatus(string value);
    public bool get_isAdminManaged();
    public void set_isAdminManaged(bool value);
    public bool get_isDefault();
    public void set_isDefault(bool value);
    public bool get_isInitial();
    public void set_isInitial(bool value);
    public bool get_isRoot();
    public void set_isRoot(bool value);
    public bool get_isVerified();
    public void set_isVerified(bool value);
    public string get_name();
    public void set_name(string value);
    public IList`1<string> get_supportedServices();
    public void set_supportedServices(IList`1<string> value);
    public ForceDeleteState get_forceDeleteState();
    public void set_forceDeleteState(ForceDeleteState value);
    public IList`1<DomainDnsRecord> get_serviceConfigurationRecords();
    public void set_serviceConfigurationRecords(IList`1<DomainDnsRecord> value);
    public IList`1<DomainDnsRecord> get_verificationDnsRecords();
    public void set_verificationDnsRecords(IList`1<DomainDnsRecord> value);
    public IList`1<DirectoryObject> get_domainNameReferences();
    public void set_domainNameReferences(IList`1<DirectoryObject> value);
}
[DataServiceKeyAttribute("recordType")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.DomainDnsCnameRecord : DomainDnsRecord {
    public string canonicalName { get; public set; }
    internal DomainDnsCnameRecord(bool dontCreateProxy);
    protected DomainDnsCnameRecord(GraphObject proxy);
    public string get_canonicalName();
    public void set_canonicalName(string value);
}
[DataServiceKeyAttribute("recordType")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.DomainDnsMxRecord : DomainDnsRecord {
    public string mailExchange { get; public set; }
    public Nullable`1<int> preference { get; public set; }
    internal DomainDnsMxRecord(bool dontCreateProxy);
    protected DomainDnsMxRecord(GraphObject proxy);
    public string get_mailExchange();
    public void set_mailExchange(string value);
    public Nullable`1<int> get_preference();
    public void set_preference(Nullable`1<int> value);
}
[DataServiceKeyAttribute("recordType")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.DomainDnsRecord : GraphObject {
    public Guid dnsRecordId { get; public set; }
    public bool isOptional { get; public set; }
    public string label { get; public set; }
    public string recordType { get; public set; }
    public string supportedService { get; public set; }
    public int ttl { get; public set; }
    internal DomainDnsRecord(bool dontCreateProxy);
    protected DomainDnsRecord(GraphObject proxy);
    public Guid get_dnsRecordId();
    public void set_dnsRecordId(Guid value);
    public bool get_isOptional();
    public void set_isOptional(bool value);
    public string get_label();
    public void set_label(string value);
    public string get_recordType();
    public void set_recordType(string value);
    public string get_supportedService();
    public void set_supportedService(string value);
    public int get_ttl();
    public void set_ttl(int value);
}
[DataServiceKeyAttribute("recordType")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.DomainDnsSrvRecord : DomainDnsRecord {
    public string nameTarget { get; public set; }
    public Nullable`1<int> port { get; public set; }
    public Nullable`1<int> priority { get; public set; }
    public string protocol { get; public set; }
    public string service { get; public set; }
    public Nullable`1<int> weight { get; public set; }
    internal DomainDnsSrvRecord(bool dontCreateProxy);
    protected DomainDnsSrvRecord(GraphObject proxy);
    public string get_nameTarget();
    public void set_nameTarget(string value);
    public Nullable`1<int> get_port();
    public void set_port(Nullable`1<int> value);
    public Nullable`1<int> get_priority();
    public void set_priority(Nullable`1<int> value);
    public string get_protocol();
    public void set_protocol(string value);
    public string get_service();
    public void set_service(string value);
    public Nullable`1<int> get_weight();
    public void set_weight(Nullable`1<int> value);
}
[DataServiceKeyAttribute("recordType")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.DomainDnsTxtRecord : DomainDnsRecord {
    public string text { get; public set; }
    internal DomainDnsTxtRecord(bool dontCreateProxy);
    protected DomainDnsTxtRecord(GraphObject proxy);
    public string get_text();
    public void set_text(string value);
}
[DataServiceKeyAttribute("recordType")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.DomainDnsUnavailableRecord : DomainDnsRecord {
    public string description { get; public set; }
    internal DomainDnsUnavailableRecord(bool dontCreateProxy);
    protected DomainDnsUnavailableRecord(GraphObject proxy);
    public string get_description();
    public void set_description(string value);
}
[DataServiceKeyAttribute("objectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.ExtensionProperty : DirectoryObject {
    public string appDisplayName { get; public set; }
    public string name { get; public set; }
    public string dataType { get; public set; }
    public Nullable`1<bool> isSyncedFromOnPremises { get; public set; }
    public IList`1<string> targetObjects { get; public set; }
    internal ExtensionProperty(bool dontCreateProxy);
    protected ExtensionProperty(GraphObject proxy);
    public string get_appDisplayName();
    public void set_appDisplayName(string value);
    public string get_name();
    public void set_name(string value);
    public string get_dataType();
    public void set_dataType(string value);
    public Nullable`1<bool> get_isSyncedFromOnPremises();
    public void set_isSyncedFromOnPremises(Nullable`1<bool> value);
    public IList`1<string> get_targetObjects();
    public void set_targetObjects(IList`1<string> value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.ForceDeleteState : ComplexTypeBase {
    public string Status { get; public set; }
    public Nullable`1<DateTime> LastActionDateTime { get; public set; }
    internal ForceDeleteState(bool dontCreateProxy);
    protected ForceDeleteState(ComplexTypeBase proxy);
    public string get_Status();
    public void set_Status(string value);
    public Nullable`1<DateTime> get_LastActionDateTime();
    public void set_LastActionDateTime(Nullable`1<DateTime> value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.GraphObject : GraphObject {
    protected GraphObject(bool dontCreateProxy);
    protected GraphObject(GraphObject proxy);
}
[DataServiceKeyAttribute("objectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.Group : DirectoryObject {
    public string description { get; public set; }
    public Nullable`1<bool> dirSyncEnabled { get; public set; }
    public string displayName { get; public set; }
    public Nullable`1<DateTime> lastDirSyncTime { get; public set; }
    public string mail { get; public set; }
    public string mailNickname { get; public set; }
    public Nullable`1<bool> mailEnabled { get; public set; }
    public string onPremisesSecurityIdentifier { get; public set; }
    public IList`1<ProvisioningError> provisioningErrors { get; public set; }
    public IList`1<string> proxyAddresses { get; public set; }
    public Nullable`1<bool> securityEnabled { get; public set; }
    public IList`1<AppRoleAssignment> appRoleAssignments { get; public set; }
    internal Group(bool dontCreateProxy);
    protected Group(GraphObject proxy);
    public string get_description();
    public void set_description(string value);
    public Nullable`1<bool> get_dirSyncEnabled();
    public void set_dirSyncEnabled(Nullable`1<bool> value);
    public string get_displayName();
    public void set_displayName(string value);
    public Nullable`1<DateTime> get_lastDirSyncTime();
    public void set_lastDirSyncTime(Nullable`1<DateTime> value);
    public string get_mail();
    public void set_mail(string value);
    public string get_mailNickname();
    public void set_mailNickname(string value);
    public Nullable`1<bool> get_mailEnabled();
    public void set_mailEnabled(Nullable`1<bool> value);
    public string get_onPremisesSecurityIdentifier();
    public void set_onPremisesSecurityIdentifier(string value);
    public IList`1<ProvisioningError> get_provisioningErrors();
    public void set_provisioningErrors(IList`1<ProvisioningError> value);
    public IList`1<string> get_proxyAddresses();
    public void set_proxyAddresses(IList`1<string> value);
    public Nullable`1<bool> get_securityEnabled();
    public void set_securityEnabled(Nullable`1<bool> value);
    public IList`1<AppRoleAssignment> get_appRoleAssignments();
    public void set_appRoleAssignments(IList`1<AppRoleAssignment> value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.KeyCredential : ComplexTypeBase {
    public Byte[] customKeyIdentifier { get; public set; }
    public Nullable`1<DateTime> endDate { get; public set; }
    public Nullable`1<Guid> keyId { get; public set; }
    public Nullable`1<DateTime> startDate { get; public set; }
    public string type { get; public set; }
    public string usage { get; public set; }
    public Byte[] value { get; public set; }
    internal KeyCredential(bool dontCreateProxy);
    protected KeyCredential(ComplexTypeBase proxy);
    public Byte[] get_customKeyIdentifier();
    public void set_customKeyIdentifier(Byte[] value);
    public Nullable`1<DateTime> get_endDate();
    public void set_endDate(Nullable`1<DateTime> value);
    public Nullable`1<Guid> get_keyId();
    public void set_keyId(Nullable`1<Guid> value);
    public Nullable`1<DateTime> get_startDate();
    public void set_startDate(Nullable`1<DateTime> value);
    public string get_type();
    public void set_type(string value);
    public string get_usage();
    public void set_usage(string value);
    public Byte[] get_value();
    public void set_value(Byte[] value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.KeyValue : ComplexTypeBase {
    public string key { get; public set; }
    public string value { get; public set; }
    internal KeyValue(bool dontCreateProxy);
    protected KeyValue(ComplexTypeBase proxy);
    public string get_key();
    public void set_key(string value);
    public string get_value();
    public void set_value(string value);
}
[DataServiceKeyAttribute("objectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.LicenseDetail : GraphObject {
    public string objectId { get; public set; }
    public IList`1<ServicePlanInfo> servicePlans { get; public set; }
    public Nullable`1<Guid> skuId { get; public set; }
    public string skuPartNumber { get; public set; }
    internal LicenseDetail(bool dontCreateProxy);
    protected LicenseDetail(GraphObject proxy);
    public string get_objectId();
    public void set_objectId(string value);
    public IList`1<ServicePlanInfo> get_servicePlans();
    public void set_servicePlans(IList`1<ServicePlanInfo> value);
    public Nullable`1<Guid> get_skuId();
    public void set_skuId(Nullable`1<Guid> value);
    public string get_skuPartNumber();
    public void set_skuPartNumber(string value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.LicenseUnitsDetail : ComplexTypeBase {
    public Nullable`1<int> enabled { get; public set; }
    public Nullable`1<int> suspended { get; public set; }
    public Nullable`1<int> warning { get; public set; }
    internal LicenseUnitsDetail(bool dontCreateProxy);
    protected LicenseUnitsDetail(ComplexTypeBase proxy);
    public Nullable`1<int> get_enabled();
    public void set_enabled(Nullable`1<int> value);
    public Nullable`1<int> get_suspended();
    public void set_suspended(Nullable`1<int> value);
    public Nullable`1<int> get_warning();
    public void set_warning(Nullable`1<int> value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.OAuth2Permission : ComplexTypeBase {
    public string adminConsentDescription { get; public set; }
    public string adminConsentDisplayName { get; public set; }
    public Guid id { get; public set; }
    public bool isEnabled { get; public set; }
    public string type { get; public set; }
    public string userConsentDescription { get; public set; }
    public string userConsentDisplayName { get; public set; }
    public string value { get; public set; }
    internal OAuth2Permission(bool dontCreateProxy);
    protected OAuth2Permission(ComplexTypeBase proxy);
    public string get_adminConsentDescription();
    public void set_adminConsentDescription(string value);
    public string get_adminConsentDisplayName();
    public void set_adminConsentDisplayName(string value);
    public Guid get_id();
    public void set_id(Guid value);
    public bool get_isEnabled();
    public void set_isEnabled(bool value);
    public string get_type();
    public void set_type(string value);
    public string get_userConsentDescription();
    public void set_userConsentDescription(string value);
    public string get_userConsentDisplayName();
    public void set_userConsentDisplayName(string value);
    public string get_value();
    public void set_value(string value);
}
[DataServiceKeyAttribute("objectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.OAuth2PermissionGrant : GraphObject {
    public string clientId { get; public set; }
    public string consentType { get; public set; }
    public Nullable`1<DateTime> expiryTime { get; public set; }
    public string objectId { get; public set; }
    public string principalId { get; public set; }
    public string resourceId { get; public set; }
    public string scope { get; public set; }
    public Nullable`1<DateTime> startTime { get; public set; }
    internal OAuth2PermissionGrant(bool dontCreateProxy);
    protected OAuth2PermissionGrant(GraphObject proxy);
    public string get_clientId();
    public void set_clientId(string value);
    public string get_consentType();
    public void set_consentType(string value);
    public Nullable`1<DateTime> get_expiryTime();
    public void set_expiryTime(Nullable`1<DateTime> value);
    public string get_objectId();
    public void set_objectId(string value);
    public string get_principalId();
    public void set_principalId(string value);
    public string get_resourceId();
    public void set_resourceId(string value);
    public string get_scope();
    public void set_scope(string value);
    public Nullable`1<DateTime> get_startTime();
    public void set_startTime(Nullable`1<DateTime> value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.PasswordCredential : ComplexTypeBase {
    public Byte[] customKeyIdentifier { get; public set; }
    public Nullable`1<DateTime> endDate { get; public set; }
    public Nullable`1<Guid> keyId { get; public set; }
    public Nullable`1<DateTime> startDate { get; public set; }
    public string value { get; public set; }
    internal PasswordCredential(bool dontCreateProxy);
    protected PasswordCredential(ComplexTypeBase proxy);
    public Byte[] get_customKeyIdentifier();
    public void set_customKeyIdentifier(Byte[] value);
    public Nullable`1<DateTime> get_endDate();
    public void set_endDate(Nullable`1<DateTime> value);
    public Nullable`1<Guid> get_keyId();
    public void set_keyId(Nullable`1<Guid> value);
    public Nullable`1<DateTime> get_startDate();
    public void set_startDate(Nullable`1<DateTime> value);
    public string get_value();
    public void set_value(string value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.PasswordProfile : ComplexTypeBase {
    public string password { get; public set; }
    public Nullable`1<bool> forceChangePasswordNextLogin { get; public set; }
    public Nullable`1<bool> enforceChangePasswordPolicy { get; public set; }
    internal PasswordProfile(bool dontCreateProxy);
    protected PasswordProfile(ComplexTypeBase proxy);
    public string get_password();
    public void set_password(string value);
    public Nullable`1<bool> get_forceChangePasswordNextLogin();
    public void set_forceChangePasswordNextLogin(Nullable`1<bool> value);
    public Nullable`1<bool> get_enforceChangePasswordPolicy();
    public void set_enforceChangePasswordPolicy(Nullable`1<bool> value);
}
[DataServiceKeyAttribute("objectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.Policy : DirectoryObject {
    public string alternativeIdentifier { get; public set; }
    public IList`1<string> definition { get; public set; }
    public string displayName { get; public set; }
    public Nullable`1<bool> isTenantDefault { get; public set; }
    public IList`1<KeyCredential> keyCredentials { get; public set; }
    public string type { get; public set; }
    public IList`1<DirectoryObject> appliesTo { get; public set; }
    internal Policy(bool dontCreateProxy);
    protected Policy(GraphObject proxy);
    public string get_alternativeIdentifier();
    public void set_alternativeIdentifier(string value);
    public IList`1<string> get_definition();
    public void set_definition(IList`1<string> value);
    public string get_displayName();
    public void set_displayName(string value);
    public Nullable`1<bool> get_isTenantDefault();
    public void set_isTenantDefault(Nullable`1<bool> value);
    public IList`1<KeyCredential> get_keyCredentials();
    public void set_keyCredentials(IList`1<KeyCredential> value);
    public string get_type();
    public void set_type(string value);
    public IList`1<DirectoryObject> get_appliesTo();
    public void set_appliesTo(IList`1<DirectoryObject> value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.ProvisionedPlan : ComplexTypeBase {
    public string capabilityStatus { get; public set; }
    public string provisioningStatus { get; public set; }
    public string service { get; public set; }
    internal ProvisionedPlan(bool dontCreateProxy);
    protected ProvisionedPlan(ComplexTypeBase proxy);
    public string get_capabilityStatus();
    public void set_capabilityStatus(string value);
    public string get_provisioningStatus();
    public void set_provisioningStatus(string value);
    public string get_service();
    public void set_service(string value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.ProvisioningError : ComplexTypeBase {
    public string errorDetail { get; public set; }
    public Nullable`1<bool> resolved { get; public set; }
    public string service { get; public set; }
    public Nullable`1<DateTime> timestamp { get; public set; }
    internal ProvisioningError(bool dontCreateProxy);
    protected ProvisioningError(ComplexTypeBase proxy);
    public string get_errorDetail();
    public void set_errorDetail(string value);
    public Nullable`1<bool> get_resolved();
    public void set_resolved(Nullable`1<bool> value);
    public string get_service();
    public void set_service(string value);
    public Nullable`1<DateTime> get_timestamp();
    public void set_timestamp(Nullable`1<DateTime> value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.RequiredResourceAccess : ComplexTypeBase {
    public string resourceAppId { get; public set; }
    public IList`1<ResourceAccess> resourceAccess { get; public set; }
    internal RequiredResourceAccess(bool dontCreateProxy);
    protected RequiredResourceAccess(ComplexTypeBase proxy);
    public string get_resourceAppId();
    public void set_resourceAppId(string value);
    public IList`1<ResourceAccess> get_resourceAccess();
    public void set_resourceAccess(IList`1<ResourceAccess> value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.ResourceAccess : ComplexTypeBase {
    public Guid id { get; public set; }
    public string type { get; public set; }
    internal ResourceAccess(bool dontCreateProxy);
    protected ResourceAccess(ComplexTypeBase proxy);
    public Guid get_id();
    public void set_id(Guid value);
    public string get_type();
    public void set_type(string value);
}
[DataServiceKeyAttribute("objectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.ServiceEndpoint : DirectoryObject {
    public string capability { get; public set; }
    public string serviceId { get; public set; }
    public string serviceName { get; public set; }
    public string uri { get; public set; }
    public string resourceId { get; public set; }
    internal ServiceEndpoint(bool dontCreateProxy);
    protected ServiceEndpoint(GraphObject proxy);
    public string get_capability();
    public void set_capability(string value);
    public string get_serviceId();
    public void set_serviceId(string value);
    public string get_serviceName();
    public void set_serviceName(string value);
    public string get_uri();
    public void set_uri(string value);
    public string get_resourceId();
    public void set_resourceId(string value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.ServicePlanInfo : ComplexTypeBase {
    public Nullable`1<Guid> servicePlanId { get; public set; }
    public string servicePlanName { get; public set; }
    public string provisioningStatus { get; public set; }
    public string appliesTo { get; public set; }
    internal ServicePlanInfo(bool dontCreateProxy);
    protected ServicePlanInfo(ComplexTypeBase proxy);
    public Nullable`1<Guid> get_servicePlanId();
    public void set_servicePlanId(Nullable`1<Guid> value);
    public string get_servicePlanName();
    public void set_servicePlanName(string value);
    public string get_provisioningStatus();
    public void set_provisioningStatus(string value);
    public string get_appliesTo();
    public void set_appliesTo(string value);
}
[DataServiceKeyAttribute("objectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.ServicePrincipal : DirectoryObject {
    public Nullable`1<bool> accountEnabled { get; public set; }
    public IList`1<AddIn> addIns { get; public set; }
    public IList`1<string> alternativeNames { get; public set; }
    public string appDisplayName { get; public set; }
    public string appId { get; public set; }
    public Nullable`1<Guid> appOwnerTenantId { get; public set; }
    public bool appRoleAssignmentRequired { get; public set; }
    public IList`1<AppRole> appRoles { get; public set; }
    public string displayName { get; public set; }
    public string errorUrl { get; public set; }
    public string homepage { get; public set; }
    public IList`1<KeyCredential> keyCredentials { get; public set; }
    public string logoutUrl { get; public set; }
    public IList`1<OAuth2Permission> oauth2Permissions { get; public set; }
    public IList`1<PasswordCredential> passwordCredentials { get; public set; }
    public string preferredTokenSigningKeyThumbprint { get; public set; }
    public string publisherName { get; public set; }
    public IList`1<string> replyUrls { get; public set; }
    public string samlMetadataUrl { get; public set; }
    public IList`1<string> servicePrincipalNames { get; public set; }
    public string servicePrincipalType { get; public set; }
    public IList`1<string> tags { get; public set; }
    public IList`1<AppRoleAssignment> appRoleAssignedTo { get; public set; }
    public IList`1<AppRoleAssignment> appRoleAssignments { get; public set; }
    public IList`1<OAuth2PermissionGrant> oauth2PermissionGrants { get; public set; }
    public IList`1<DirectoryObject> policies { get; public set; }
    public IList`1<ServiceEndpoint> serviceEndpoints { get; public set; }
    internal ServicePrincipal(bool dontCreateProxy);
    protected ServicePrincipal(GraphObject proxy);
    public Nullable`1<bool> get_accountEnabled();
    public void set_accountEnabled(Nullable`1<bool> value);
    public IList`1<AddIn> get_addIns();
    public void set_addIns(IList`1<AddIn> value);
    public IList`1<string> get_alternativeNames();
    public void set_alternativeNames(IList`1<string> value);
    public string get_appDisplayName();
    public void set_appDisplayName(string value);
    public string get_appId();
    public void set_appId(string value);
    public Nullable`1<Guid> get_appOwnerTenantId();
    public void set_appOwnerTenantId(Nullable`1<Guid> value);
    public bool get_appRoleAssignmentRequired();
    public void set_appRoleAssignmentRequired(bool value);
    public IList`1<AppRole> get_appRoles();
    public void set_appRoles(IList`1<AppRole> value);
    public string get_displayName();
    public void set_displayName(string value);
    public string get_errorUrl();
    public void set_errorUrl(string value);
    public string get_homepage();
    public void set_homepage(string value);
    public IList`1<KeyCredential> get_keyCredentials();
    public void set_keyCredentials(IList`1<KeyCredential> value);
    public string get_logoutUrl();
    public void set_logoutUrl(string value);
    public IList`1<OAuth2Permission> get_oauth2Permissions();
    public void set_oauth2Permissions(IList`1<OAuth2Permission> value);
    public IList`1<PasswordCredential> get_passwordCredentials();
    public void set_passwordCredentials(IList`1<PasswordCredential> value);
    public string get_preferredTokenSigningKeyThumbprint();
    public void set_preferredTokenSigningKeyThumbprint(string value);
    public string get_publisherName();
    public void set_publisherName(string value);
    public IList`1<string> get_replyUrls();
    public void set_replyUrls(IList`1<string> value);
    public string get_samlMetadataUrl();
    public void set_samlMetadataUrl(string value);
    public IList`1<string> get_servicePrincipalNames();
    public void set_servicePrincipalNames(IList`1<string> value);
    public string get_servicePrincipalType();
    public void set_servicePrincipalType(string value);
    public IList`1<string> get_tags();
    public void set_tags(IList`1<string> value);
    public IList`1<AppRoleAssignment> get_appRoleAssignedTo();
    public void set_appRoleAssignedTo(IList`1<AppRoleAssignment> value);
    public IList`1<AppRoleAssignment> get_appRoleAssignments();
    public void set_appRoleAssignments(IList`1<AppRoleAssignment> value);
    public IList`1<OAuth2PermissionGrant> get_oauth2PermissionGrants();
    public void set_oauth2PermissionGrants(IList`1<OAuth2PermissionGrant> value);
    public IList`1<DirectoryObject> get_policies();
    public void set_policies(IList`1<DirectoryObject> value);
    public IList`1<ServiceEndpoint> get_serviceEndpoints();
    public void set_serviceEndpoints(IList`1<ServiceEndpoint> value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.SignInName : ComplexTypeBase {
    public string type { get; public set; }
    public string value { get; public set; }
    internal SignInName(bool dontCreateProxy);
    protected SignInName(ComplexTypeBase proxy);
    public string get_type();
    public void set_type(string value);
    public string get_value();
    public void set_value(string value);
}
[DataServiceKeyAttribute("objectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.SubscribedSku : GraphObject {
    public string capabilityStatus { get; public set; }
    public Nullable`1<int> consumedUnits { get; public set; }
    public string objectId { get; public set; }
    public LicenseUnitsDetail prepaidUnits { get; public set; }
    public IList`1<ServicePlanInfo> servicePlans { get; public set; }
    public Nullable`1<Guid> skuId { get; public set; }
    public string skuPartNumber { get; public set; }
    public string appliesTo { get; public set; }
    internal SubscribedSku(bool dontCreateProxy);
    protected SubscribedSku(GraphObject proxy);
    public string get_capabilityStatus();
    public void set_capabilityStatus(string value);
    public Nullable`1<int> get_consumedUnits();
    public void set_consumedUnits(Nullable`1<int> value);
    public string get_objectId();
    public void set_objectId(string value);
    public LicenseUnitsDetail get_prepaidUnits();
    public void set_prepaidUnits(LicenseUnitsDetail value);
    public IList`1<ServicePlanInfo> get_servicePlans();
    public void set_servicePlans(IList`1<ServicePlanInfo> value);
    public Nullable`1<Guid> get_skuId();
    public void set_skuId(Nullable`1<Guid> value);
    public string get_skuPartNumber();
    public void set_skuPartNumber(string value);
    public string get_appliesTo();
    public void set_appliesTo(string value);
}
[DataServiceKeyAttribute("objectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.TenantDetail : DirectoryObject {
    public IList`1<AssignedPlan> assignedPlans { get; public set; }
    public string city { get; public set; }
    public Nullable`1<DateTime> companyLastDirSyncTime { get; public set; }
    public string country { get; public set; }
    public string countryLetterCode { get; public set; }
    public Nullable`1<bool> dirSyncEnabled { get; public set; }
    public string displayName { get; public set; }
    public IList`1<string> marketingNotificationEmails { get; public set; }
    public string postalCode { get; public set; }
    public string preferredLanguage { get; public set; }
    public IList`1<ProvisionedPlan> provisionedPlans { get; public set; }
    public IList`1<ProvisioningError> provisioningErrors { get; public set; }
    public IList`1<string> securityComplianceNotificationMails { get; public set; }
    public IList`1<string> securityComplianceNotificationPhones { get; public set; }
    public string state { get; public set; }
    public string street { get; public set; }
    public IList`1<string> technicalNotificationMails { get; public set; }
    public string telephoneNumber { get; public set; }
    public IList`1<VerifiedDomain> verifiedDomains { get; public set; }
    public IList`1<TrustedCAsForPasswordlessAuth> trustedCAsForPasswordlessAuth { get; public set; }
    internal TenantDetail(bool dontCreateProxy);
    protected TenantDetail(GraphObject proxy);
    public IList`1<AssignedPlan> get_assignedPlans();
    public void set_assignedPlans(IList`1<AssignedPlan> value);
    public string get_city();
    public void set_city(string value);
    public Nullable`1<DateTime> get_companyLastDirSyncTime();
    public void set_companyLastDirSyncTime(Nullable`1<DateTime> value);
    public string get_country();
    public void set_country(string value);
    public string get_countryLetterCode();
    public void set_countryLetterCode(string value);
    public Nullable`1<bool> get_dirSyncEnabled();
    public void set_dirSyncEnabled(Nullable`1<bool> value);
    public string get_displayName();
    public void set_displayName(string value);
    public IList`1<string> get_marketingNotificationEmails();
    public void set_marketingNotificationEmails(IList`1<string> value);
    public string get_postalCode();
    public void set_postalCode(string value);
    public string get_preferredLanguage();
    public void set_preferredLanguage(string value);
    public IList`1<ProvisionedPlan> get_provisionedPlans();
    public void set_provisionedPlans(IList`1<ProvisionedPlan> value);
    public IList`1<ProvisioningError> get_provisioningErrors();
    public void set_provisioningErrors(IList`1<ProvisioningError> value);
    public IList`1<string> get_securityComplianceNotificationMails();
    public void set_securityComplianceNotificationMails(IList`1<string> value);
    public IList`1<string> get_securityComplianceNotificationPhones();
    public void set_securityComplianceNotificationPhones(IList`1<string> value);
    public string get_state();
    public void set_state(string value);
    public string get_street();
    public void set_street(string value);
    public IList`1<string> get_technicalNotificationMails();
    public void set_technicalNotificationMails(IList`1<string> value);
    public string get_telephoneNumber();
    public void set_telephoneNumber(string value);
    public IList`1<VerifiedDomain> get_verifiedDomains();
    public void set_verifiedDomains(IList`1<VerifiedDomain> value);
    public IList`1<TrustedCAsForPasswordlessAuth> get_trustedCAsForPasswordlessAuth();
    public void set_trustedCAsForPasswordlessAuth(IList`1<TrustedCAsForPasswordlessAuth> value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.TranslatingComplexTypeList`2 : object {
    private IList`1<TSource> _source;
    public TISource Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal TranslatingComplexTypeList`2(IList`1<TSource> source);
    private TSource convert(TISource item);
    private TISource convert(TSource item);
    public sealed virtual int IndexOf(TISource item);
    public sealed virtual void Insert(int index, TISource item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual TISource get_Item(int index);
    public sealed virtual void set_Item(int index, TISource value);
    public sealed virtual void Add(TISource item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TISource item);
    public sealed virtual void CopyTo(TISource[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(TISource item);
    public sealed virtual IEnumerator`1<TISource> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.TranslatingEntityList`2 : object {
    private IList`1<TSource> _source;
    public TISource Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal TranslatingEntityList`2(IList`1<TSource> source);
    private TSource convert(TISource item);
    private TISource convert(TSource item);
    public sealed virtual int IndexOf(TISource item);
    public sealed virtual void Insert(int index, TISource item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual TISource get_Item(int index);
    public sealed virtual void set_Item(int index, TISource value);
    public sealed virtual void Add(TISource item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TISource item);
    public sealed virtual void CopyTo(TISource[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(TISource item);
    public sealed virtual IEnumerator`1<TISource> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DataServiceKeyAttribute("id")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.TrustedCAsForPasswordlessAuth : GraphObject {
    public string id { get; public set; }
    public IList`1<CertificateAuthorityInformation> certificateAuthorities { get; public set; }
    internal TrustedCAsForPasswordlessAuth(bool dontCreateProxy);
    protected TrustedCAsForPasswordlessAuth(GraphObject proxy);
    public string get_id();
    public void set_id(string value);
    public IList`1<CertificateAuthorityInformation> get_certificateAuthorities();
    public void set_certificateAuthorities(IList`1<CertificateAuthorityInformation> value);
}
[DataServiceKeyAttribute("objectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.User : DirectoryObject {
    private DataServiceStreamLink _thumbnailPhoto;
    public Nullable`1<bool> accountEnabled { get; public set; }
    public IList`1<SignInName> signInNames { get; public set; }
    public IList`1<AssignedLicense> assignedLicenses { get; public set; }
    public IList`1<AssignedPlan> assignedPlans { get; public set; }
    public string city { get; public set; }
    public string companyName { get; public set; }
    public string country { get; public set; }
    public string creationType { get; public set; }
    public string department { get; public set; }
    public Nullable`1<bool> dirSyncEnabled { get; public set; }
    public string displayName { get; public set; }
    public string facsimileTelephoneNumber { get; public set; }
    public string givenName { get; public set; }
    public string immutableId { get; public set; }
    public Nullable`1<bool> isCompromised { get; public set; }
    public string jobTitle { get; public set; }
    public Nullable`1<DateTime> lastDirSyncTime { get; public set; }
    public string mail { get; public set; }
    public string mailNickname { get; public set; }
    public string mobile { get; public set; }
    public string onPremisesSecurityIdentifier { get; public set; }
    public IList`1<string> otherMails { get; public set; }
    public string passwordPolicies { get; public set; }
    public PasswordProfile passwordProfile { get; public set; }
    public string physicalDeliveryOfficeName { get; public set; }
    public string postalCode { get; public set; }
    public string preferredLanguage { get; public set; }
    public IList`1<ProvisionedPlan> provisionedPlans { get; public set; }
    public IList`1<ProvisioningError> provisioningErrors { get; public set; }
    public IList`1<string> proxyAddresses { get; public set; }
    public Nullable`1<DateTime> refreshTokensValidFromDateTime { get; public set; }
    public string sipProxyAddress { get; public set; }
    public string state { get; public set; }
    public string streetAddress { get; public set; }
    public string surname { get; public set; }
    public string telephoneNumber { get; public set; }
    public DataServiceStreamLink thumbnailPhoto { get; public set; }
    public string usageLocation { get; public set; }
    public string userPrincipalName { get; public set; }
    public string userType { get; public set; }
    public IList`1<AppRoleAssignment> appRoleAssignments { get; public set; }
    public IList`1<LicenseDetail> licenseDetails { get; public set; }
    public IList`1<OAuth2PermissionGrant> oauth2PermissionGrants { get; public set; }
    public IList`1<DirectoryObject> ownedDevices { get; public set; }
    public IList`1<DirectoryObject> registeredDevices { get; public set; }
    internal User(bool dontCreateProxy);
    protected User(GraphObject proxy);
    public Nullable`1<bool> get_accountEnabled();
    public void set_accountEnabled(Nullable`1<bool> value);
    public IList`1<SignInName> get_signInNames();
    public void set_signInNames(IList`1<SignInName> value);
    public IList`1<AssignedLicense> get_assignedLicenses();
    public void set_assignedLicenses(IList`1<AssignedLicense> value);
    public IList`1<AssignedPlan> get_assignedPlans();
    public void set_assignedPlans(IList`1<AssignedPlan> value);
    public string get_city();
    public void set_city(string value);
    public string get_companyName();
    public void set_companyName(string value);
    public string get_country();
    public void set_country(string value);
    public string get_creationType();
    public void set_creationType(string value);
    public string get_department();
    public void set_department(string value);
    public Nullable`1<bool> get_dirSyncEnabled();
    public void set_dirSyncEnabled(Nullable`1<bool> value);
    public string get_displayName();
    public void set_displayName(string value);
    public string get_facsimileTelephoneNumber();
    public void set_facsimileTelephoneNumber(string value);
    public string get_givenName();
    public void set_givenName(string value);
    public string get_immutableId();
    public void set_immutableId(string value);
    public Nullable`1<bool> get_isCompromised();
    public void set_isCompromised(Nullable`1<bool> value);
    public string get_jobTitle();
    public void set_jobTitle(string value);
    public Nullable`1<DateTime> get_lastDirSyncTime();
    public void set_lastDirSyncTime(Nullable`1<DateTime> value);
    public string get_mail();
    public void set_mail(string value);
    public string get_mailNickname();
    public void set_mailNickname(string value);
    public string get_mobile();
    public void set_mobile(string value);
    public string get_onPremisesSecurityIdentifier();
    public void set_onPremisesSecurityIdentifier(string value);
    public IList`1<string> get_otherMails();
    public void set_otherMails(IList`1<string> value);
    public string get_passwordPolicies();
    public void set_passwordPolicies(string value);
    public PasswordProfile get_passwordProfile();
    public void set_passwordProfile(PasswordProfile value);
    public string get_physicalDeliveryOfficeName();
    public void set_physicalDeliveryOfficeName(string value);
    public string get_postalCode();
    public void set_postalCode(string value);
    public string get_preferredLanguage();
    public void set_preferredLanguage(string value);
    public IList`1<ProvisionedPlan> get_provisionedPlans();
    public void set_provisionedPlans(IList`1<ProvisionedPlan> value);
    public IList`1<ProvisioningError> get_provisioningErrors();
    public void set_provisioningErrors(IList`1<ProvisioningError> value);
    public IList`1<string> get_proxyAddresses();
    public void set_proxyAddresses(IList`1<string> value);
    public Nullable`1<DateTime> get_refreshTokensValidFromDateTime();
    public void set_refreshTokensValidFromDateTime(Nullable`1<DateTime> value);
    public string get_sipProxyAddress();
    public void set_sipProxyAddress(string value);
    public string get_state();
    public void set_state(string value);
    public string get_streetAddress();
    public void set_streetAddress(string value);
    public string get_surname();
    public void set_surname(string value);
    public string get_telephoneNumber();
    public void set_telephoneNumber(string value);
    public DataServiceStreamLink get_thumbnailPhoto();
    public void set_thumbnailPhoto(DataServiceStreamLink value);
    public string get_usageLocation();
    public void set_usageLocation(string value);
    public string get_userPrincipalName();
    public void set_userPrincipalName(string value);
    public string get_userType();
    public void set_userType(string value);
    public IList`1<AppRoleAssignment> get_appRoleAssignments();
    public void set_appRoleAssignments(IList`1<AppRoleAssignment> value);
    public IList`1<LicenseDetail> get_licenseDetails();
    public void set_licenseDetails(IList`1<LicenseDetail> value);
    public IList`1<OAuth2PermissionGrant> get_oauth2PermissionGrants();
    public void set_oauth2PermissionGrants(IList`1<OAuth2PermissionGrant> value);
    public IList`1<DirectoryObject> get_ownedDevices();
    public void set_ownedDevices(IList`1<DirectoryObject> value);
    public IList`1<DirectoryObject> get_registeredDevices();
    public void set_registeredDevices(IList`1<DirectoryObject> value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Internal.VerifiedDomain : ComplexTypeBase {
    public string capabilities { get; public set; }
    public Nullable`1<bool> default { get; public set; }
    public string id { get; public set; }
    public Nullable`1<bool> initial { get; public set; }
    public string name { get; public set; }
    public string type { get; public set; }
    internal VerifiedDomain(bool dontCreateProxy);
    protected VerifiedDomain(ComplexTypeBase proxy);
    public string get_capabilities();
    public void set_capabilities(string value);
    public Nullable`1<bool> get_default();
    public void set_default(Nullable`1<bool> value);
    public string get_id();
    public void set_id(string value);
    public Nullable`1<bool> get_initial();
    public void set_initial(Nullable`1<bool> value);
    public string get_name();
    public void set_name(string value);
    public string get_type();
    public void set_type(string value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.InternalServerErrorException : GraphException {
    public InternalServerErrorException(HttpStatusCode httpStatusCode, string message);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.InvalidApiVersionException : GraphException {
    public InvalidApiVersionException(HttpStatusCode httpStatusCode, string message);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.InvalidHeaderException : GraphException {
    public InvalidHeaderException(HttpStatusCode httpStatusCode, string message);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IOAuth2PermissionGrant {
    [LowerCasePropertyAttribute]
public string ClientId { get; public set; }
    [LowerCasePropertyAttribute]
public string ConsentType { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> ExpiryTime { get; public set; }
    [LowerCasePropertyAttribute]
public string ObjectId { get; public set; }
    [LowerCasePropertyAttribute]
public string PrincipalId { get; public set; }
    [LowerCasePropertyAttribute]
public string ResourceId { get; public set; }
    [LowerCasePropertyAttribute]
public string Scope { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> StartTime { get; public set; }
    public abstract virtual string get_ClientId();
    public abstract virtual void set_ClientId(string value);
    public abstract virtual string get_ConsentType();
    public abstract virtual void set_ConsentType(string value);
    public abstract virtual Nullable`1<DateTime> get_ExpiryTime();
    public abstract virtual void set_ExpiryTime(Nullable`1<DateTime> value);
    public abstract virtual string get_ObjectId();
    public abstract virtual void set_ObjectId(string value);
    public abstract virtual string get_PrincipalId();
    public abstract virtual void set_PrincipalId(string value);
    public abstract virtual string get_ResourceId();
    public abstract virtual void set_ResourceId(string value);
    public abstract virtual string get_Scope();
    public abstract virtual void set_Scope(string value);
    public abstract virtual Nullable`1<DateTime> get_StartTime();
    public abstract virtual void set_StartTime(Nullable`1<DateTime> value);
}
[LowerCasePropertyAttribute]
[DefaultMemberAttribute("Item")]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IOAuth2PermissionGrantCollection {
    public IOAuth2PermissionGrantFetcher Item { get; }
    public abstract virtual IOAuth2PermissionGrantFetcher GetByObjectId(string objectId);
    public abstract virtual IOAuth2PermissionGrantFetcher get_Item(string objectId);
    public abstract virtual Task`1<IPagedCollection`1<IOAuth2PermissionGrant>> ExecuteAsync();
    public abstract virtual Task AddOAuth2PermissionGrantAsync(IOAuth2PermissionGrant item, bool deferredSave);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IOAuth2PermissionGrantFetcher {
    public abstract virtual Task`1<IOAuth2PermissionGrant> ExecuteAsync();
    public abstract virtual IOAuth2PermissionGrantFetcher Expand(Expression`1<Func`2<IOAuth2PermissionGrant, TTarget>> navigationPropertyAccessor);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IPolicy {
    [LowerCasePropertyAttribute]
public string AlternativeIdentifier { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> Definition { get; }
    [LowerCasePropertyAttribute]
public string DisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> IsTenantDefault { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<KeyCredential> KeyCredentials { get; }
    [LowerCasePropertyAttribute]
public string Type { get; public set; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IDirectoryObject> AppliesTo { get; }
    public abstract virtual string get_AlternativeIdentifier();
    public abstract virtual void set_AlternativeIdentifier(string value);
    public abstract virtual IList`1<string> get_Definition();
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
    public abstract virtual Nullable`1<bool> get_IsTenantDefault();
    public abstract virtual void set_IsTenantDefault(Nullable`1<bool> value);
    public abstract virtual IList`1<KeyCredential> get_KeyCredentials();
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
    public abstract virtual IPagedCollection`1<IDirectoryObject> get_AppliesTo();
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IPolicyFetcher {
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection AppliesTo { get; }
    public abstract virtual Task`1<IPolicy> ExecuteAsync();
    public abstract virtual IPolicyFetcher Expand(Expression`1<Func`2<IPolicy, TTarget>> navigationPropertyAccessor);
    public abstract virtual IDirectoryObjectCollection get_AppliesTo();
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IServiceEndpoint {
    [LowerCasePropertyAttribute]
public string Capability { get; public set; }
    [LowerCasePropertyAttribute]
public string ServiceId { get; public set; }
    [LowerCasePropertyAttribute]
public string ServiceName { get; public set; }
    [LowerCasePropertyAttribute]
public string Uri { get; public set; }
    [LowerCasePropertyAttribute]
public string ResourceId { get; public set; }
    public abstract virtual string get_Capability();
    public abstract virtual void set_Capability(string value);
    public abstract virtual string get_ServiceId();
    public abstract virtual void set_ServiceId(string value);
    public abstract virtual string get_ServiceName();
    public abstract virtual void set_ServiceName(string value);
    public abstract virtual string get_Uri();
    public abstract virtual void set_Uri(string value);
    public abstract virtual string get_ResourceId();
    public abstract virtual void set_ResourceId(string value);
}
[DefaultMemberAttribute("Item")]
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IServiceEndpointCollection {
    public IServiceEndpointFetcher Item { get; }
    public abstract virtual IServiceEndpointFetcher GetByObjectId(string objectId);
    public abstract virtual IServiceEndpointFetcher get_Item(string objectId);
    public abstract virtual Task`1<IPagedCollection`1<IServiceEndpoint>> ExecuteAsync();
    public abstract virtual Task AddServiceEndpointAsync(IServiceEndpoint item, bool deferredSave);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IServiceEndpointFetcher {
    public abstract virtual Task`1<IServiceEndpoint> ExecuteAsync();
    public abstract virtual IServiceEndpointFetcher Expand(Expression`1<Func`2<IServiceEndpoint, TTarget>> navigationPropertyAccessor);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipal {
    [LowerCasePropertyAttribute]
public Nullable`1<bool> AccountEnabled { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<AddIn> AddIns { get; }
    [LowerCasePropertyAttribute]
public IList`1<string> AlternativeNames { get; }
    [LowerCasePropertyAttribute]
public string AppDisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public string AppId { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<Guid> AppOwnerTenantId { get; public set; }
    [LowerCasePropertyAttribute]
public bool AppRoleAssignmentRequired { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<AppRole> AppRoles { get; }
    [LowerCasePropertyAttribute]
public string DisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public string ErrorUrl { get; public set; }
    [LowerCasePropertyAttribute]
public string Homepage { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<KeyCredential> KeyCredentials { get; }
    [LowerCasePropertyAttribute]
public string LogoutUrl { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<OAuth2Permission> Oauth2Permissions { get; }
    [LowerCasePropertyAttribute]
public IList`1<PasswordCredential> PasswordCredentials { get; }
    [LowerCasePropertyAttribute]
public string PreferredTokenSigningKeyThumbprint { get; public set; }
    [LowerCasePropertyAttribute]
public string PublisherName { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> ReplyUrls { get; }
    [LowerCasePropertyAttribute]
public string SamlMetadataUrl { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> ServicePrincipalNames { get; }
    [LowerCasePropertyAttribute]
public string ServicePrincipalType { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> Tags { get; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IAppRoleAssignment> AppRoleAssignedTo { get; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IAppRoleAssignment> AppRoleAssignments { get; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IOAuth2PermissionGrant> Oauth2PermissionGrants { get; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IDirectoryObject> Policies { get; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IServiceEndpoint> ServiceEndpoints { get; }
    public abstract virtual Nullable`1<bool> get_AccountEnabled();
    public abstract virtual void set_AccountEnabled(Nullable`1<bool> value);
    public abstract virtual IList`1<AddIn> get_AddIns();
    public abstract virtual IList`1<string> get_AlternativeNames();
    public abstract virtual string get_AppDisplayName();
    public abstract virtual void set_AppDisplayName(string value);
    public abstract virtual string get_AppId();
    public abstract virtual void set_AppId(string value);
    public abstract virtual Nullable`1<Guid> get_AppOwnerTenantId();
    public abstract virtual void set_AppOwnerTenantId(Nullable`1<Guid> value);
    public abstract virtual bool get_AppRoleAssignmentRequired();
    public abstract virtual void set_AppRoleAssignmentRequired(bool value);
    public abstract virtual IList`1<AppRole> get_AppRoles();
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
    public abstract virtual string get_ErrorUrl();
    public abstract virtual void set_ErrorUrl(string value);
    public abstract virtual string get_Homepage();
    public abstract virtual void set_Homepage(string value);
    public abstract virtual IList`1<KeyCredential> get_KeyCredentials();
    public abstract virtual string get_LogoutUrl();
    public abstract virtual void set_LogoutUrl(string value);
    public abstract virtual IList`1<OAuth2Permission> get_Oauth2Permissions();
    public abstract virtual IList`1<PasswordCredential> get_PasswordCredentials();
    public abstract virtual string get_PreferredTokenSigningKeyThumbprint();
    public abstract virtual void set_PreferredTokenSigningKeyThumbprint(string value);
    public abstract virtual string get_PublisherName();
    public abstract virtual void set_PublisherName(string value);
    public abstract virtual IList`1<string> get_ReplyUrls();
    public abstract virtual string get_SamlMetadataUrl();
    public abstract virtual void set_SamlMetadataUrl(string value);
    public abstract virtual IList`1<string> get_ServicePrincipalNames();
    public abstract virtual string get_ServicePrincipalType();
    public abstract virtual void set_ServicePrincipalType(string value);
    public abstract virtual IList`1<string> get_Tags();
    public abstract virtual IPagedCollection`1<IAppRoleAssignment> get_AppRoleAssignedTo();
    public abstract virtual IPagedCollection`1<IAppRoleAssignment> get_AppRoleAssignments();
    public abstract virtual IPagedCollection`1<IOAuth2PermissionGrant> get_Oauth2PermissionGrants();
    public abstract virtual IPagedCollection`1<IDirectoryObject> get_Policies();
    public abstract virtual IPagedCollection`1<IServiceEndpoint> get_ServiceEndpoints();
}
[DefaultMemberAttribute("Item")]
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipalCollection {
    public IServicePrincipalFetcher Item { get; }
    public abstract virtual IServicePrincipalFetcher GetByObjectId(string objectId);
    public abstract virtual IServicePrincipalFetcher get_Item(string objectId);
    public abstract virtual Task`1<IPagedCollection`1<IServicePrincipal>> ExecuteAsync();
    public abstract virtual Task AddServicePrincipalAsync(IServicePrincipal item, bool deferredSave);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipalFetcher {
    [LowerCasePropertyAttribute]
public IAppRoleAssignmentCollection AppRoleAssignedTo { get; }
    [LowerCasePropertyAttribute]
public IAppRoleAssignmentCollection AppRoleAssignments { get; }
    [LowerCasePropertyAttribute]
public IOAuth2PermissionGrantCollection Oauth2PermissionGrants { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection Policies { get; }
    [LowerCasePropertyAttribute]
public IServiceEndpointCollection ServiceEndpoints { get; }
    public abstract virtual Task`1<IServicePrincipal> ExecuteAsync();
    public abstract virtual IServicePrincipalFetcher Expand(Expression`1<Func`2<IServicePrincipal, TTarget>> navigationPropertyAccessor);
    public abstract virtual IAppRoleAssignmentCollection get_AppRoleAssignedTo();
    public abstract virtual IAppRoleAssignmentCollection get_AppRoleAssignments();
    public abstract virtual IOAuth2PermissionGrantCollection get_Oauth2PermissionGrants();
    public abstract virtual IDirectoryObjectCollection get_Policies();
    public abstract virtual IServiceEndpointCollection get_ServiceEndpoints();
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.ISubscribedSku {
    [LowerCasePropertyAttribute]
public string CapabilityStatus { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<int> ConsumedUnits { get; public set; }
    [LowerCasePropertyAttribute]
public string ObjectId { get; public set; }
    [LowerCasePropertyAttribute]
public LicenseUnitsDetail PrepaidUnits { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<ServicePlanInfo> ServicePlans { get; }
    [LowerCasePropertyAttribute]
public Nullable`1<Guid> SkuId { get; public set; }
    [LowerCasePropertyAttribute]
public string SkuPartNumber { get; public set; }
    [LowerCasePropertyAttribute]
public string AppliesTo { get; public set; }
    public abstract virtual string get_CapabilityStatus();
    public abstract virtual void set_CapabilityStatus(string value);
    public abstract virtual Nullable`1<int> get_ConsumedUnits();
    public abstract virtual void set_ConsumedUnits(Nullable`1<int> value);
    public abstract virtual string get_ObjectId();
    public abstract virtual void set_ObjectId(string value);
    public abstract virtual LicenseUnitsDetail get_PrepaidUnits();
    public abstract virtual void set_PrepaidUnits(LicenseUnitsDetail value);
    public abstract virtual IList`1<ServicePlanInfo> get_ServicePlans();
    public abstract virtual Nullable`1<Guid> get_SkuId();
    public abstract virtual void set_SkuId(Nullable`1<Guid> value);
    public abstract virtual string get_SkuPartNumber();
    public abstract virtual void set_SkuPartNumber(string value);
    public abstract virtual string get_AppliesTo();
    public abstract virtual void set_AppliesTo(string value);
}
[LowerCasePropertyAttribute]
[DefaultMemberAttribute("Item")]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.ISubscribedSkuCollection {
    public ISubscribedSkuFetcher Item { get; }
    public abstract virtual ISubscribedSkuFetcher GetByObjectId(string objectId);
    public abstract virtual ISubscribedSkuFetcher get_Item(string objectId);
    public abstract virtual Task`1<IPagedCollection`1<ISubscribedSku>> ExecuteAsync();
    public abstract virtual Task AddSubscribedSkuAsync(ISubscribedSku item, bool deferredSave);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.ISubscribedSkuFetcher {
    public abstract virtual Task`1<ISubscribedSku> ExecuteAsync();
    public abstract virtual ISubscribedSkuFetcher Expand(Expression`1<Func`2<ISubscribedSku, TTarget>> navigationPropertyAccessor);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.ITenantDetail {
    [LowerCasePropertyAttribute]
public IList`1<AssignedPlan> AssignedPlans { get; }
    [LowerCasePropertyAttribute]
public string City { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> CompanyLastDirSyncTime { get; public set; }
    [LowerCasePropertyAttribute]
public string Country { get; public set; }
    [LowerCasePropertyAttribute]
public string CountryLetterCode { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> DirSyncEnabled { get; public set; }
    [LowerCasePropertyAttribute]
public string DisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> MarketingNotificationEmails { get; }
    [LowerCasePropertyAttribute]
public string PostalCode { get; public set; }
    [LowerCasePropertyAttribute]
public string PreferredLanguage { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<ProvisionedPlan> ProvisionedPlans { get; }
    [LowerCasePropertyAttribute]
public IList`1<ProvisioningError> ProvisioningErrors { get; }
    [LowerCasePropertyAttribute]
public IList`1<string> SecurityComplianceNotificationMails { get; }
    [LowerCasePropertyAttribute]
public IList`1<string> SecurityComplianceNotificationPhones { get; }
    [LowerCasePropertyAttribute]
public string State { get; public set; }
    [LowerCasePropertyAttribute]
public string Street { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> TechnicalNotificationMails { get; }
    [LowerCasePropertyAttribute]
public string TelephoneNumber { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<VerifiedDomain> VerifiedDomains { get; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<ITrustedCAsForPasswordlessAuth> TrustedCAsForPasswordlessAuth { get; }
    public abstract virtual IList`1<AssignedPlan> get_AssignedPlans();
    public abstract virtual string get_City();
    public abstract virtual void set_City(string value);
    public abstract virtual Nullable`1<DateTime> get_CompanyLastDirSyncTime();
    public abstract virtual void set_CompanyLastDirSyncTime(Nullable`1<DateTime> value);
    public abstract virtual string get_Country();
    public abstract virtual void set_Country(string value);
    public abstract virtual string get_CountryLetterCode();
    public abstract virtual void set_CountryLetterCode(string value);
    public abstract virtual Nullable`1<bool> get_DirSyncEnabled();
    public abstract virtual void set_DirSyncEnabled(Nullable`1<bool> value);
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
    public abstract virtual IList`1<string> get_MarketingNotificationEmails();
    public abstract virtual string get_PostalCode();
    public abstract virtual void set_PostalCode(string value);
    public abstract virtual string get_PreferredLanguage();
    public abstract virtual void set_PreferredLanguage(string value);
    public abstract virtual IList`1<ProvisionedPlan> get_ProvisionedPlans();
    public abstract virtual IList`1<ProvisioningError> get_ProvisioningErrors();
    public abstract virtual IList`1<string> get_SecurityComplianceNotificationMails();
    public abstract virtual IList`1<string> get_SecurityComplianceNotificationPhones();
    public abstract virtual string get_State();
    public abstract virtual void set_State(string value);
    public abstract virtual string get_Street();
    public abstract virtual void set_Street(string value);
    public abstract virtual IList`1<string> get_TechnicalNotificationMails();
    public abstract virtual string get_TelephoneNumber();
    public abstract virtual void set_TelephoneNumber(string value);
    public abstract virtual IList`1<VerifiedDomain> get_VerifiedDomains();
    public abstract virtual IPagedCollection`1<ITrustedCAsForPasswordlessAuth> get_TrustedCAsForPasswordlessAuth();
}
[DefaultMemberAttribute("Item")]
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.ITenantDetailCollection {
    public ITenantDetailFetcher Item { get; }
    public abstract virtual ITenantDetailFetcher GetByObjectId(string objectId);
    public abstract virtual ITenantDetailFetcher get_Item(string objectId);
    public abstract virtual Task`1<IPagedCollection`1<ITenantDetail>> ExecuteAsync();
    public abstract virtual Task AddTenantDetailAsync(ITenantDetail item, bool deferredSave);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.ITenantDetailFetcher {
    [LowerCasePropertyAttribute]
public ITrustedCAsForPasswordlessAuthCollection TrustedCAsForPasswordlessAuth { get; }
    public abstract virtual Task`1<ITenantDetail> ExecuteAsync();
    public abstract virtual ITenantDetailFetcher Expand(Expression`1<Func`2<ITenantDetail, TTarget>> navigationPropertyAccessor);
    public abstract virtual ITrustedCAsForPasswordlessAuthCollection get_TrustedCAsForPasswordlessAuth();
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.ITrustedCAsForPasswordlessAuth {
    [LowerCasePropertyAttribute]
public string Id { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<CertificateAuthorityInformation> CertificateAuthorities { get; }
    public abstract virtual string get_Id();
    public abstract virtual void set_Id(string value);
    public abstract virtual IList`1<CertificateAuthorityInformation> get_CertificateAuthorities();
}
[DefaultMemberAttribute("Item")]
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.ITrustedCAsForPasswordlessAuthCollection {
    public ITrustedCAsForPasswordlessAuthFetcher Item { get; }
    public abstract virtual ITrustedCAsForPasswordlessAuthFetcher GetById(string id);
    public abstract virtual ITrustedCAsForPasswordlessAuthFetcher get_Item(string id);
    public abstract virtual Task`1<IPagedCollection`1<ITrustedCAsForPasswordlessAuth>> ExecuteAsync();
    public abstract virtual Task AddTrustedCAsForPasswordlessAuthAsync(ITrustedCAsForPasswordlessAuth item, bool deferredSave);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.ITrustedCAsForPasswordlessAuthFetcher {
    public abstract virtual Task`1<ITrustedCAsForPasswordlessAuth> ExecuteAsync();
    public abstract virtual ITrustedCAsForPasswordlessAuthFetcher Expand(Expression`1<Func`2<ITrustedCAsForPasswordlessAuth, TTarget>> navigationPropertyAccessor);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IUser {
    [LowerCasePropertyAttribute]
public Nullable`1<bool> AccountEnabled { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<SignInName> SignInNames { get; }
    [LowerCasePropertyAttribute]
public IList`1<AssignedLicense> AssignedLicenses { get; }
    [LowerCasePropertyAttribute]
public IList`1<AssignedPlan> AssignedPlans { get; }
    [LowerCasePropertyAttribute]
public string City { get; public set; }
    [LowerCasePropertyAttribute]
public string CompanyName { get; public set; }
    [LowerCasePropertyAttribute]
public string Country { get; public set; }
    [LowerCasePropertyAttribute]
public string CreationType { get; public set; }
    [LowerCasePropertyAttribute]
public string Department { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> DirSyncEnabled { get; public set; }
    [LowerCasePropertyAttribute]
public string DisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public string FacsimileTelephoneNumber { get; public set; }
    [LowerCasePropertyAttribute]
public string GivenName { get; public set; }
    [LowerCasePropertyAttribute]
public string ImmutableId { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> IsCompromised { get; public set; }
    [LowerCasePropertyAttribute]
public string JobTitle { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> LastDirSyncTime { get; public set; }
    [LowerCasePropertyAttribute]
public string Mail { get; public set; }
    [LowerCasePropertyAttribute]
public string MailNickname { get; public set; }
    [LowerCasePropertyAttribute]
public string Mobile { get; public set; }
    [LowerCasePropertyAttribute]
public string OnPremisesSecurityIdentifier { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> OtherMails { get; }
    [LowerCasePropertyAttribute]
public string PasswordPolicies { get; public set; }
    [LowerCasePropertyAttribute]
public PasswordProfile PasswordProfile { get; public set; }
    [LowerCasePropertyAttribute]
public string PhysicalDeliveryOfficeName { get; public set; }
    [LowerCasePropertyAttribute]
public string PostalCode { get; public set; }
    [LowerCasePropertyAttribute]
public string PreferredLanguage { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<ProvisionedPlan> ProvisionedPlans { get; }
    [LowerCasePropertyAttribute]
public IList`1<ProvisioningError> ProvisioningErrors { get; }
    [LowerCasePropertyAttribute]
public IList`1<string> ProxyAddresses { get; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> RefreshTokensValidFromDateTime { get; public set; }
    [LowerCasePropertyAttribute]
public string SipProxyAddress { get; public set; }
    [LowerCasePropertyAttribute]
public string State { get; public set; }
    [LowerCasePropertyAttribute]
public string StreetAddress { get; public set; }
    [LowerCasePropertyAttribute]
public string Surname { get; public set; }
    [LowerCasePropertyAttribute]
public string TelephoneNumber { get; public set; }
    [LowerCasePropertyAttribute]
public IStreamFetcher ThumbnailPhoto { get; }
    [LowerCasePropertyAttribute]
public string UsageLocation { get; public set; }
    [LowerCasePropertyAttribute]
public string UserPrincipalName { get; public set; }
    [LowerCasePropertyAttribute]
public string UserType { get; public set; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IAppRoleAssignment> AppRoleAssignments { get; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<ILicenseDetail> LicenseDetails { get; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IOAuth2PermissionGrant> Oauth2PermissionGrants { get; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IDirectoryObject> OwnedDevices { get; }
    [LowerCasePropertyAttribute]
public IPagedCollection`1<IDirectoryObject> RegisteredDevices { get; }
    public abstract virtual Nullable`1<bool> get_AccountEnabled();
    public abstract virtual void set_AccountEnabled(Nullable`1<bool> value);
    public abstract virtual IList`1<SignInName> get_SignInNames();
    public abstract virtual IList`1<AssignedLicense> get_AssignedLicenses();
    public abstract virtual IList`1<AssignedPlan> get_AssignedPlans();
    public abstract virtual string get_City();
    public abstract virtual void set_City(string value);
    public abstract virtual string get_CompanyName();
    public abstract virtual void set_CompanyName(string value);
    public abstract virtual string get_Country();
    public abstract virtual void set_Country(string value);
    public abstract virtual string get_CreationType();
    public abstract virtual void set_CreationType(string value);
    public abstract virtual string get_Department();
    public abstract virtual void set_Department(string value);
    public abstract virtual Nullable`1<bool> get_DirSyncEnabled();
    public abstract virtual void set_DirSyncEnabled(Nullable`1<bool> value);
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
    public abstract virtual string get_FacsimileTelephoneNumber();
    public abstract virtual void set_FacsimileTelephoneNumber(string value);
    public abstract virtual string get_GivenName();
    public abstract virtual void set_GivenName(string value);
    public abstract virtual string get_ImmutableId();
    public abstract virtual void set_ImmutableId(string value);
    public abstract virtual Nullable`1<bool> get_IsCompromised();
    public abstract virtual void set_IsCompromised(Nullable`1<bool> value);
    public abstract virtual string get_JobTitle();
    public abstract virtual void set_JobTitle(string value);
    public abstract virtual Nullable`1<DateTime> get_LastDirSyncTime();
    public abstract virtual void set_LastDirSyncTime(Nullable`1<DateTime> value);
    public abstract virtual string get_Mail();
    public abstract virtual void set_Mail(string value);
    public abstract virtual string get_MailNickname();
    public abstract virtual void set_MailNickname(string value);
    public abstract virtual string get_Mobile();
    public abstract virtual void set_Mobile(string value);
    public abstract virtual string get_OnPremisesSecurityIdentifier();
    public abstract virtual void set_OnPremisesSecurityIdentifier(string value);
    public abstract virtual IList`1<string> get_OtherMails();
    public abstract virtual string get_PasswordPolicies();
    public abstract virtual void set_PasswordPolicies(string value);
    public abstract virtual PasswordProfile get_PasswordProfile();
    public abstract virtual void set_PasswordProfile(PasswordProfile value);
    public abstract virtual string get_PhysicalDeliveryOfficeName();
    public abstract virtual void set_PhysicalDeliveryOfficeName(string value);
    public abstract virtual string get_PostalCode();
    public abstract virtual void set_PostalCode(string value);
    public abstract virtual string get_PreferredLanguage();
    public abstract virtual void set_PreferredLanguage(string value);
    public abstract virtual IList`1<ProvisionedPlan> get_ProvisionedPlans();
    public abstract virtual IList`1<ProvisioningError> get_ProvisioningErrors();
    public abstract virtual IList`1<string> get_ProxyAddresses();
    public abstract virtual Nullable`1<DateTime> get_RefreshTokensValidFromDateTime();
    public abstract virtual void set_RefreshTokensValidFromDateTime(Nullable`1<DateTime> value);
    public abstract virtual string get_SipProxyAddress();
    public abstract virtual void set_SipProxyAddress(string value);
    public abstract virtual string get_State();
    public abstract virtual void set_State(string value);
    public abstract virtual string get_StreetAddress();
    public abstract virtual void set_StreetAddress(string value);
    public abstract virtual string get_Surname();
    public abstract virtual void set_Surname(string value);
    public abstract virtual string get_TelephoneNumber();
    public abstract virtual void set_TelephoneNumber(string value);
    public abstract virtual IStreamFetcher get_ThumbnailPhoto();
    public abstract virtual string get_UsageLocation();
    public abstract virtual void set_UsageLocation(string value);
    public abstract virtual string get_UserPrincipalName();
    public abstract virtual void set_UserPrincipalName(string value);
    public abstract virtual string get_UserType();
    public abstract virtual void set_UserType(string value);
    public abstract virtual IPagedCollection`1<IAppRoleAssignment> get_AppRoleAssignments();
    public abstract virtual IPagedCollection`1<ILicenseDetail> get_LicenseDetails();
    public abstract virtual IPagedCollection`1<IOAuth2PermissionGrant> get_Oauth2PermissionGrants();
    public abstract virtual IPagedCollection`1<IDirectoryObject> get_OwnedDevices();
    public abstract virtual IPagedCollection`1<IDirectoryObject> get_RegisteredDevices();
    public abstract virtual Task`1<IUser> AssignLicenseAsync(ICollection`1<AssignedLicense> addLicenses, ICollection`1<Guid> removeLicenses);
    public abstract virtual Task ChangePasswordAsync(string currentPassword, string newPassword);
    public abstract virtual Task`1<Nullable`1<bool>> InvalidateAllRefreshTokensAsync();
}
[DefaultMemberAttribute("Item")]
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IUserCollection {
    public IUserFetcher Item { get; }
    public abstract virtual IUserFetcher GetByObjectId(string objectId);
    public abstract virtual IUserFetcher get_Item(string objectId);
    public abstract virtual Task`1<IPagedCollection`1<IUser>> ExecuteAsync();
    public abstract virtual Task AddUserAsync(IUser item, bool deferredSave);
}
[LowerCasePropertyAttribute]
public interface Microsoft.Azure.ActiveDirectory.GraphClient.IUserFetcher {
    [LowerCasePropertyAttribute]
public IAppRoleAssignmentCollection AppRoleAssignments { get; }
    [LowerCasePropertyAttribute]
public ILicenseDetailCollection LicenseDetails { get; }
    [LowerCasePropertyAttribute]
public IOAuth2PermissionGrantCollection Oauth2PermissionGrants { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection OwnedDevices { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection RegisteredDevices { get; }
    public abstract virtual Task`1<IUser> ExecuteAsync();
    public abstract virtual IUserFetcher Expand(Expression`1<Func`2<IUser, TTarget>> navigationPropertyAccessor);
    public abstract virtual IAppRoleAssignmentCollection get_AppRoleAssignments();
    public abstract virtual ILicenseDetailCollection get_LicenseDetails();
    public abstract virtual IOAuth2PermissionGrantCollection get_Oauth2PermissionGrants();
    public abstract virtual IDirectoryObjectCollection get_OwnedDevices();
    public abstract virtual IDirectoryObjectCollection get_RegisteredDevices();
    public abstract virtual Task`1<IUser> AssignLicenseAsync(ICollection`1<AssignedLicense> addLicenses, ICollection`1<Guid> removeLicenses);
    public abstract virtual Task ChangePasswordAsync(string currentPassword, string newPassword);
    public abstract virtual Task`1<Nullable`1<bool>> InvalidateAllRefreshTokensAsync();
}
[AttributeUsageAttribute("128")]
internal class Microsoft.Azure.ActiveDirectory.GraphClient.KeyAttribute : Attribute {
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.KeyCredential : ComplexTypeBase {
    private Byte[] _customKeyIdentifier;
    private Nullable`1<DateTime> _endDate;
    private Nullable`1<Guid> _keyId;
    private Nullable`1<DateTime> _startDate;
    private string _type;
    private string _usage;
    private Byte[] _value;
    [LowerCasePropertyAttribute]
public Byte[] CustomKeyIdentifier { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> EndDate { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<Guid> KeyId { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> StartDate { get; public set; }
    [LowerCasePropertyAttribute]
public string Type { get; public set; }
    [LowerCasePropertyAttribute]
public string Usage { get; public set; }
    [LowerCasePropertyAttribute]
public Byte[] Value { get; public set; }
    internal KeyCredential(bool dontCreateProxy);
    protected KeyCredential(ComplexTypeBase proxy);
    public Byte[] get_CustomKeyIdentifier();
    public void set_CustomKeyIdentifier(Byte[] value);
    public Nullable`1<DateTime> get_EndDate();
    public void set_EndDate(Nullable`1<DateTime> value);
    public Nullable`1<Guid> get_KeyId();
    public void set_KeyId(Nullable`1<Guid> value);
    public Nullable`1<DateTime> get_StartDate();
    public void set_StartDate(Nullable`1<DateTime> value);
    public string get_Type();
    public void set_Type(string value);
    public string get_Usage();
    public void set_Usage(string value);
    public Byte[] get_Value();
    public void set_Value(Byte[] value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.KeyValue : ComplexTypeBase {
    private string _key;
    private string _value;
    [LowerCasePropertyAttribute]
public string Key { get; public set; }
    [LowerCasePropertyAttribute]
public string Value { get; public set; }
    internal KeyValue(bool dontCreateProxy);
    protected KeyValue(ComplexTypeBase proxy);
    public string get_Key();
    public void set_Key(string value);
    public string get_Value();
    public void set_Value(string value);
}
[DataServiceKeyAttribute("ObjectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.LicenseDetail : GraphObject {
    private string _objectId;
    private NonEntityTypeCollectionImpl`1<ServicePlanInfo> _servicePlans;
    private Nullable`1<Guid> _skuId;
    private string _skuPartNumber;
    [LowerCasePropertyAttribute]
public string ObjectId { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<ServicePlanInfo> ServicePlans { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<Guid> SkuId { get; public set; }
    [LowerCasePropertyAttribute]
public string SkuPartNumber { get; public set; }
    internal LicenseDetail(bool dontCreateProxy);
    protected LicenseDetail(GraphObject proxy);
    protected Uri UpcastUri(Uri uri, string type);
    protected string UpcastPath(string path, string type);
    private string UpcastInternal(string path, string type);
    public sealed virtual string get_ObjectId();
    public sealed virtual void set_ObjectId(string value);
    public sealed virtual IList`1<ServicePlanInfo> get_ServicePlans();
    public void set_ServicePlans(IList`1<ServicePlanInfo> value);
    public sealed virtual Nullable`1<Guid> get_SkuId();
    public sealed virtual void set_SkuId(Nullable`1<Guid> value);
    public sealed virtual string get_SkuPartNumber();
    public sealed virtual void set_SkuPartNumber(string value);
    private sealed virtual override Task`1<ILicenseDetail> Microsoft.Azure.ActiveDirectory.GraphClient.ILicenseDetailFetcher.ExecuteAsync();
    private sealed virtual override ILicenseDetailFetcher Microsoft.Azure.ActiveDirectory.GraphClient.ILicenseDetailFetcher.Expand(Expression`1<Func`2<ILicenseDetail, TTarget>> navigationPropertyAccessor);
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_ServicePlans>b__0();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_ServicePlans>b__2();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.ActiveDirectory.GraphClient.LicenseDetailCollection : QueryableSet`2<ILicenseDetail, LicenseDetail> {
    public ILicenseDetailFetcher Item { get; }
    internal LicenseDetailCollection(DataServiceQuery inner, DataServiceContextWrapper context, object entity, string path);
    public sealed virtual ILicenseDetailFetcher GetByObjectId(string objectId);
    public sealed virtual ILicenseDetailFetcher get_Item(string objectId);
    public sealed virtual Task`1<IPagedCollection`1<ILicenseDetail>> ExecuteAsync();
    public sealed virtual Task AddLicenseDetailAsync(ILicenseDetail item, bool deferredSave);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.LicenseDetailCollection/<<ExecuteAsync>b__2>d__3")]
[CompilerGeneratedAttribute]
private Task`1<IPagedCollection`1<ILicenseDetail>> <ExecuteAsync>b__2();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.LicenseDetailFetcher : RestShallowObjectFetcher {
    private IReadOnlyQueryableSet`1<ILicenseDetail> _query;
    protected Uri UpcastUri(Uri uri, string type);
    protected string UpcastPath(string path, string type);
    private string UpcastInternal(string path, string type);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.LicenseDetailFetcher/<ExecuteAsync>d__0")]
public sealed virtual Task`1<ILicenseDetail> ExecuteAsync();
    public sealed virtual ILicenseDetailFetcher Expand(Expression`1<Func`2<ILicenseDetail, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<ILicenseDetail> EnsureQuery();
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.LicenseUnitsDetail : ComplexTypeBase {
    private Nullable`1<int> _enabled;
    private Nullable`1<int> _suspended;
    private Nullable`1<int> _warning;
    [LowerCasePropertyAttribute]
public Nullable`1<int> Enabled { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<int> Suspended { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<int> Warning { get; public set; }
    internal LicenseUnitsDetail(bool dontCreateProxy);
    protected LicenseUnitsDetail(ComplexTypeBase proxy);
    public Nullable`1<int> get_Enabled();
    public void set_Enabled(Nullable`1<int> value);
    public Nullable`1<int> get_Suspended();
    public void set_Suspended(Nullable`1<int> value);
    public Nullable`1<int> get_Warning();
    public void set_Warning(Nullable`1<int> value);
}
[AttributeUsageAttribute("128")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.LinkAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSingleValued>k__BackingField;
    public string Name { get; public set; }
    public bool IsSingleValued { get; public set; }
    public LinkAttribute(string name, bool isSingleValued);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsSingleValued();
    [CompilerGeneratedAttribute]
public void set_IsSingleValued(bool value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.LinkNameMap : object {
    public static List`1<string> NameMap;
    private static LinkNameMap();
}
public enum Microsoft.Azure.ActiveDirectory.GraphClient.LinkProperty : Enum {
    public int value__;
    public static LinkProperty None;
    public static LinkProperty CreatedObjects;
    public static LinkProperty CreatedOnBehalfOf;
    public static LinkProperty DirectReports;
    public static LinkProperty Manager;
    public static LinkProperty MemberOf;
    public static LinkProperty Members;
    public static LinkProperty OwnedDevices;
    public static LinkProperty OwnedObjects;
    public static LinkProperty Owners;
    public static LinkProperty Permissions;
    public static LinkProperty RegisteredDevices;
    public static LinkProperty RegisteredOwners;
    public static LinkProperty RegisteredUsers;
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Main : object {
    public void RunGraphRequest();
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.OAuth2Permission : ComplexTypeBase {
    private string _adminConsentDescription;
    private string _adminConsentDisplayName;
    private Guid _id;
    private bool _isEnabled;
    private string _type;
    private string _userConsentDescription;
    private string _userConsentDisplayName;
    private string _value;
    [LowerCasePropertyAttribute]
public string AdminConsentDescription { get; public set; }
    [LowerCasePropertyAttribute]
public string AdminConsentDisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public Guid Id { get; public set; }
    [LowerCasePropertyAttribute]
public bool IsEnabled { get; public set; }
    [LowerCasePropertyAttribute]
public string Type { get; public set; }
    [LowerCasePropertyAttribute]
public string UserConsentDescription { get; public set; }
    [LowerCasePropertyAttribute]
public string UserConsentDisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public string Value { get; public set; }
    internal OAuth2Permission(bool dontCreateProxy);
    protected OAuth2Permission(ComplexTypeBase proxy);
    public string get_AdminConsentDescription();
    public void set_AdminConsentDescription(string value);
    public string get_AdminConsentDisplayName();
    public void set_AdminConsentDisplayName(string value);
    public Guid get_Id();
    public void set_Id(Guid value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public string get_Type();
    public void set_Type(string value);
    public string get_UserConsentDescription();
    public void set_UserConsentDescription(string value);
    public string get_UserConsentDisplayName();
    public void set_UserConsentDisplayName(string value);
    public string get_Value();
    public void set_Value(string value);
}
[DataServiceKeyAttribute("ObjectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.OAuth2PermissionGrant : GraphObject {
    private string _clientId;
    private string _consentType;
    private Nullable`1<DateTime> _expiryTime;
    private string _objectId;
    private string _principalId;
    private string _resourceId;
    private string _scope;
    private Nullable`1<DateTime> _startTime;
    [LowerCasePropertyAttribute]
public string ClientId { get; public set; }
    [LowerCasePropertyAttribute]
public string ConsentType { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> ExpiryTime { get; public set; }
    [LowerCasePropertyAttribute]
public string ObjectId { get; public set; }
    [LowerCasePropertyAttribute]
public string PrincipalId { get; public set; }
    [LowerCasePropertyAttribute]
public string ResourceId { get; public set; }
    [LowerCasePropertyAttribute]
public string Scope { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> StartTime { get; public set; }
    internal OAuth2PermissionGrant(bool dontCreateProxy);
    protected OAuth2PermissionGrant(GraphObject proxy);
    protected Uri UpcastUri(Uri uri, string type);
    protected string UpcastPath(string path, string type);
    private string UpcastInternal(string path, string type);
    public sealed virtual string get_ClientId();
    public sealed virtual void set_ClientId(string value);
    public sealed virtual string get_ConsentType();
    public sealed virtual void set_ConsentType(string value);
    public sealed virtual Nullable`1<DateTime> get_ExpiryTime();
    public sealed virtual void set_ExpiryTime(Nullable`1<DateTime> value);
    public sealed virtual string get_ObjectId();
    public sealed virtual void set_ObjectId(string value);
    public sealed virtual string get_PrincipalId();
    public sealed virtual void set_PrincipalId(string value);
    public sealed virtual string get_ResourceId();
    public sealed virtual void set_ResourceId(string value);
    public sealed virtual string get_Scope();
    public sealed virtual void set_Scope(string value);
    public sealed virtual Nullable`1<DateTime> get_StartTime();
    public sealed virtual void set_StartTime(Nullable`1<DateTime> value);
    private sealed virtual override Task`1<IOAuth2PermissionGrant> Microsoft.Azure.ActiveDirectory.GraphClient.IOAuth2PermissionGrantFetcher.ExecuteAsync();
    private sealed virtual override IOAuth2PermissionGrantFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IOAuth2PermissionGrantFetcher.Expand(Expression`1<Func`2<IOAuth2PermissionGrant, TTarget>> navigationPropertyAccessor);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.ActiveDirectory.GraphClient.OAuth2PermissionGrantCollection : QueryableSet`2<IOAuth2PermissionGrant, OAuth2PermissionGrant> {
    public IOAuth2PermissionGrantFetcher Item { get; }
    internal OAuth2PermissionGrantCollection(DataServiceQuery inner, DataServiceContextWrapper context, object entity, string path);
    public sealed virtual IOAuth2PermissionGrantFetcher GetByObjectId(string objectId);
    public sealed virtual IOAuth2PermissionGrantFetcher get_Item(string objectId);
    public sealed virtual Task`1<IPagedCollection`1<IOAuth2PermissionGrant>> ExecuteAsync();
    public sealed virtual Task AddOAuth2PermissionGrantAsync(IOAuth2PermissionGrant item, bool deferredSave);
    [CompilerGeneratedAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.OAuth2PermissionGrantCollection/<<ExecuteAsync>b__2>d__3")]
[DebuggerStepThroughAttribute]
private Task`1<IPagedCollection`1<IOAuth2PermissionGrant>> <ExecuteAsync>b__2();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.OAuth2PermissionGrantFetcher : RestShallowObjectFetcher {
    private IReadOnlyQueryableSet`1<IOAuth2PermissionGrant> _query;
    protected Uri UpcastUri(Uri uri, string type);
    protected string UpcastPath(string path, string type);
    private string UpcastInternal(string path, string type);
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.OAuth2PermissionGrantFetcher/<ExecuteAsync>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IOAuth2PermissionGrant> ExecuteAsync();
    public sealed virtual IOAuth2PermissionGrantFetcher Expand(Expression`1<Func`2<IOAuth2PermissionGrant, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IOAuth2PermissionGrant> EnsureQuery();
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.ObjectNotFoundException : GraphException {
    public ObjectNotFoundException(string message);
    public ObjectNotFoundException(HttpStatusCode statusCode, string message);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.ODataError : object {
    [CompilerGeneratedAttribute]
private ODataErrorCodeMessage <Error>k__BackingField;
    public ODataErrorCodeMessage Error { get; public set; }
    [CompilerGeneratedAttribute]
public ODataErrorCodeMessage get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(ODataErrorCodeMessage value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.ODataErrorCodeMessage : object {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataErrorMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ExtendedErrorValue> <Values>k__BackingField;
    public string Code { get; public set; }
    public ODataErrorMessage Message { get; public set; }
    public List`1<ExtendedErrorValue> Values { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public ODataErrorMessage get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(ODataErrorMessage value);
    [CompilerGeneratedAttribute]
public List`1<ExtendedErrorValue> get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(List`1<ExtendedErrorValue> value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.ODataErrorMessage : object {
    [CompilerGeneratedAttribute]
private string <Lang>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageValue>k__BackingField;
    public string Lang { get; public set; }
    public string MessageValue { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Lang();
    [CompilerGeneratedAttribute]
public void set_Lang(string value);
    [CompilerGeneratedAttribute]
public string get_MessageValue();
    [CompilerGeneratedAttribute]
public void set_MessageValue(string value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.PagedResults`1 : object {
    [CompilerGeneratedAttribute]
private IList`1<T> <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <MixedResults>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <RequestUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ODataMetadataType>k__BackingField;
    public IList`1<T> Results { get; private set; }
    public IList`1<string> MixedResults { get; private set; }
    public Uri RequestUri { get; internal set; }
    public string PageToken { get; public set; }
    public string ODataMetadataType { get; public set; }
    public bool IsLastPage { get; }
    [CompilerGeneratedAttribute]
public IList`1<T> get_Results();
    [CompilerGeneratedAttribute]
private void set_Results(IList`1<T> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_MixedResults();
    [CompilerGeneratedAttribute]
private void set_MixedResults(IList`1<string> value);
    [CompilerGeneratedAttribute]
public Uri get_RequestUri();
    [CompilerGeneratedAttribute]
internal void set_RequestUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_PageToken();
    [CompilerGeneratedAttribute]
public void set_PageToken(string value);
    [CompilerGeneratedAttribute]
public string get_ODataMetadataType();
    [CompilerGeneratedAttribute]
public void set_ODataMetadataType(string value);
    public bool get_IsLastPage();
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.PageNotAvailableException : GraphException {
    public PageNotAvailableException(HttpStatusCode httpStatusCode, string message);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.PasswordCredential : ComplexTypeBase {
    private Byte[] _customKeyIdentifier;
    private Nullable`1<DateTime> _endDate;
    private Nullable`1<Guid> _keyId;
    private Nullable`1<DateTime> _startDate;
    private string _value;
    [LowerCasePropertyAttribute]
public Byte[] CustomKeyIdentifier { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> EndDate { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<Guid> KeyId { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> StartDate { get; public set; }
    [LowerCasePropertyAttribute]
public string Value { get; public set; }
    internal PasswordCredential(bool dontCreateProxy);
    protected PasswordCredential(ComplexTypeBase proxy);
    public Byte[] get_CustomKeyIdentifier();
    public void set_CustomKeyIdentifier(Byte[] value);
    public Nullable`1<DateTime> get_EndDate();
    public void set_EndDate(Nullable`1<DateTime> value);
    public Nullable`1<Guid> get_KeyId();
    public void set_KeyId(Nullable`1<Guid> value);
    public Nullable`1<DateTime> get_StartDate();
    public void set_StartDate(Nullable`1<DateTime> value);
    public string get_Value();
    public void set_Value(string value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.PasswordProfile : ComplexTypeBase {
    private string _password;
    private Nullable`1<bool> _forceChangePasswordNextLogin;
    private Nullable`1<bool> _enforceChangePasswordPolicy;
    [LowerCasePropertyAttribute]
public string Password { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> ForceChangePasswordNextLogin { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> EnforceChangePasswordPolicy { get; public set; }
    internal PasswordProfile(bool dontCreateProxy);
    protected PasswordProfile(ComplexTypeBase proxy);
    public string get_Password();
    public void set_Password(string value);
    public Nullable`1<bool> get_ForceChangePasswordNextLogin();
    public void set_ForceChangePasswordNextLogin(Nullable`1<bool> value);
    public Nullable`1<bool> get_EnforceChangePasswordPolicy();
    public void set_EnforceChangePasswordPolicy(Nullable`1<bool> value);
}
[DataServiceKeyAttribute("ObjectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.Policy : DirectoryObject {
    private string _alternativeIdentifier;
    private NonEntityTypeCollectionImpl`1<string> _definition;
    private string _displayName;
    private Nullable`1<bool> _isTenantDefault;
    private NonEntityTypeCollectionImpl`1<KeyCredential> _keyCredentials;
    private string _type;
    private IDirectoryObjectCollection _appliesToFetcher;
    private EntityCollectionImpl`1<DirectoryObject> _appliesTo;
    [LowerCasePropertyAttribute]
public string AlternativeIdentifier { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> Definition { get; public set; }
    [LowerCasePropertyAttribute]
public string DisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> IsTenantDefault { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<KeyCredential> KeyCredentials { get; public set; }
    [LowerCasePropertyAttribute]
public string Type { get; public set; }
    [LowerCasePropertyAttribute]
private IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IPolicyFetcher.AppliesTo { get; }
    [LowerCasePropertyAttribute]
public IList`1<DirectoryObject> AppliesTo { get; public set; }
    private IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IPolicy.AppliesTo { get; }
    internal Policy(bool dontCreateProxy);
    protected Policy(GraphObject proxy);
    public sealed virtual string get_AlternativeIdentifier();
    public sealed virtual void set_AlternativeIdentifier(string value);
    public sealed virtual IList`1<string> get_Definition();
    public void set_Definition(IList`1<string> value);
    public sealed virtual string get_DisplayName();
    public sealed virtual void set_DisplayName(string value);
    public sealed virtual Nullable`1<bool> get_IsTenantDefault();
    public sealed virtual void set_IsTenantDefault(Nullable`1<bool> value);
    public sealed virtual IList`1<KeyCredential> get_KeyCredentials();
    public void set_KeyCredentials(IList`1<KeyCredential> value);
    public sealed virtual string get_Type();
    public sealed virtual void set_Type(string value);
    private sealed virtual override IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IPolicyFetcher.get_AppliesTo();
    public IList`1<DirectoryObject> get_AppliesTo();
    public void set_AppliesTo(IList`1<DirectoryObject> value);
    private sealed virtual override IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IPolicy.get_AppliesTo();
    private sealed virtual override Task`1<IPolicy> Microsoft.Azure.ActiveDirectory.GraphClient.IPolicyFetcher.ExecuteAsync();
    private sealed virtual override IPolicyFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IPolicyFetcher.Expand(Expression`1<Func`2<IPolicy, TTarget>> navigationPropertyAccessor);
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_Definition>b__0();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_Definition>b__2();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_KeyCredentials>b__4();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_KeyCredentials>b__6();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_AppliesTo>b__8();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_AppliesTo>b__a();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.PolicyFetcher : DirectoryObjectFetcher {
    private IDirectoryObjectCollection _appliesTo;
    private IReadOnlyQueryableSet`1<IPolicy> _query;
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection AppliesTo { get; }
    public sealed virtual IDirectoryObjectCollection get_AppliesTo();
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.PolicyFetcher/<ExecuteAsync>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IPolicy> ExecuteAsync();
    public sealed virtual IPolicyFetcher Expand(Expression`1<Func`2<IPolicy, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IPolicy> EnsureQuery();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.PropertyNameMap : object {
    internal static List`1<string> NameMap;
    private static PropertyNameMap();
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.PropertyValidationException : GraphException {
    public PropertyValidationException(string message);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.ProvisionedPlan : ComplexTypeBase {
    private string _capabilityStatus;
    private string _provisioningStatus;
    private string _service;
    [LowerCasePropertyAttribute]
public string CapabilityStatus { get; public set; }
    [LowerCasePropertyAttribute]
public string ProvisioningStatus { get; public set; }
    [LowerCasePropertyAttribute]
public string Service { get; public set; }
    internal ProvisionedPlan(bool dontCreateProxy);
    protected ProvisionedPlan(ComplexTypeBase proxy);
    public string get_CapabilityStatus();
    public void set_CapabilityStatus(string value);
    public string get_ProvisioningStatus();
    public void set_ProvisioningStatus(string value);
    public string get_Service();
    public void set_Service(string value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.ProvisioningError : ComplexTypeBase {
    private string _errorDetail;
    private Nullable`1<bool> _resolved;
    private string _service;
    private Nullable`1<DateTime> _timestamp;
    [LowerCasePropertyAttribute]
public string ErrorDetail { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> Resolved { get; public set; }
    [LowerCasePropertyAttribute]
public string Service { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> Timestamp { get; public set; }
    internal ProvisioningError(bool dontCreateProxy);
    protected ProvisioningError(ComplexTypeBase proxy);
    public string get_ErrorDetail();
    public void set_ErrorDetail(string value);
    public Nullable`1<bool> get_Resolved();
    public void set_Resolved(Nullable`1<bool> value);
    public string get_Service();
    public void set_Service(string value);
    public Nullable`1<DateTime> get_Timestamp();
    public void set_Timestamp(Nullable`1<DateTime> value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.QueryParameter : object {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterValue>k__BackingField;
    public string ParameterName { get; public set; }
    public string ParameterValue { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
public void set_ParameterName(string value);
    [CompilerGeneratedAttribute]
public string get_ParameterValue();
    [CompilerGeneratedAttribute]
public void set_ParameterValue(string value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.QuotaExceededException : GraphException {
    public QuotaExceededException(HttpStatusCode httpStatusCode, string message);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.RequestOptions : object {
    internal IList`1<QueryParameter> queryParameters;
    internal WebHeaderCollection responseHeaders;
    public IList`1<QueryParameter> QueryParameters { get; }
    public WebHeaderCollection ResponseHeaders { get; }
    public IList`1<QueryParameter> get_QueryParameters();
    public WebHeaderCollection get_ResponseHeaders();
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.RequestThrottledException : GraphException {
    public RequestThrottledException(HttpStatusCode httpStatusCode, string message);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.RequiredResourceAccess : ComplexTypeBase {
    private string _resourceAppId;
    private NonEntityTypeCollectionImpl`1<ResourceAccess> _resourceAccess;
    [LowerCasePropertyAttribute]
public string ResourceAppId { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<ResourceAccess> ResourceAccess { get; public set; }
    internal RequiredResourceAccess(bool dontCreateProxy);
    protected RequiredResourceAccess(ComplexTypeBase proxy);
    public string get_ResourceAppId();
    public void set_ResourceAppId(string value);
    public IList`1<ResourceAccess> get_ResourceAccess();
    public void set_ResourceAccess(IList`1<ResourceAccess> value);
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_ResourceAccess>b__0();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_ResourceAccess>b__2();
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.ResourceAccess : ComplexTypeBase {
    private Guid _id;
    private string _type;
    [LowerCasePropertyAttribute]
public Guid Id { get; public set; }
    [LowerCasePropertyAttribute]
public string Type { get; public set; }
    internal ResourceAccess(bool dontCreateProxy);
    protected ResourceAccess(ComplexTypeBase proxy);
    public Guid get_Id();
    public void set_Id(Guid value);
    public string get_Type();
    public void set_Type(string value);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.SerializationHelper : object {
    private static Type[] availableTypes;
    private static Dictionary`2<string, Type> typeImplementations;
    private static Dictionary`2<string, Type> entitySetTypeMap;
    private static SerializationHelper();
    public static string SerializeToJson(object serializableObject);
    public static List`1<BatchResponseItem> DeserializeBatchResponse(string contentTypeHeader, string responseString, IList`1<BatchRequestItem> batchRequestItems);
    public static void ParseMetadataType(string metadataKey, Type& targetObjectType, Boolean& isGraphObject, Boolean& isCollection);
    public static bool TryGetTypeForEntitySet(string entitySet, Type& implementationType);
    public static bool TryGetImplementationForAadType(string aadType, Type& implementationType);
    private static void PopulateAvailableTypes();
}
[DataServiceKeyAttribute("ObjectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.ServiceEndpoint : DirectoryObject {
    private string _capability;
    private string _serviceId;
    private string _serviceName;
    private string _uri;
    private string _resourceId;
    [LowerCasePropertyAttribute]
public string Capability { get; public set; }
    [LowerCasePropertyAttribute]
public string ServiceId { get; public set; }
    [LowerCasePropertyAttribute]
public string ServiceName { get; public set; }
    [LowerCasePropertyAttribute]
public string Uri { get; public set; }
    [LowerCasePropertyAttribute]
public string ResourceId { get; public set; }
    internal ServiceEndpoint(bool dontCreateProxy);
    protected ServiceEndpoint(GraphObject proxy);
    public sealed virtual string get_Capability();
    public sealed virtual void set_Capability(string value);
    public sealed virtual string get_ServiceId();
    public sealed virtual void set_ServiceId(string value);
    public sealed virtual string get_ServiceName();
    public sealed virtual void set_ServiceName(string value);
    public sealed virtual string get_Uri();
    public sealed virtual void set_Uri(string value);
    public sealed virtual string get_ResourceId();
    public sealed virtual void set_ResourceId(string value);
    private sealed virtual override Task`1<IServiceEndpoint> Microsoft.Azure.ActiveDirectory.GraphClient.IServiceEndpointFetcher.ExecuteAsync();
    private sealed virtual override IServiceEndpointFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IServiceEndpointFetcher.Expand(Expression`1<Func`2<IServiceEndpoint, TTarget>> navigationPropertyAccessor);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.ActiveDirectory.GraphClient.ServiceEndpointCollection : QueryableSet`2<IServiceEndpoint, ServiceEndpoint> {
    public IServiceEndpointFetcher Item { get; }
    internal ServiceEndpointCollection(DataServiceQuery inner, DataServiceContextWrapper context, object entity, string path);
    public sealed virtual IServiceEndpointFetcher GetByObjectId(string objectId);
    public sealed virtual IServiceEndpointFetcher get_Item(string objectId);
    public sealed virtual Task`1<IPagedCollection`1<IServiceEndpoint>> ExecuteAsync();
    public sealed virtual Task AddServiceEndpointAsync(IServiceEndpoint item, bool deferredSave);
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.ServiceEndpointCollection/<<ExecuteAsync>b__2>d__3")]
[DebuggerStepThroughAttribute]
[CompilerGeneratedAttribute]
private Task`1<IPagedCollection`1<IServiceEndpoint>> <ExecuteAsync>b__2();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.ServiceEndpointFetcher : DirectoryObjectFetcher {
    private IReadOnlyQueryableSet`1<IServiceEndpoint> _query;
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.ServiceEndpointFetcher/<ExecuteAsync>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IServiceEndpoint> ExecuteAsync();
    public sealed virtual IServiceEndpointFetcher Expand(Expression`1<Func`2<IServiceEndpoint, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IServiceEndpoint> EnsureQuery();
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.ServicePlanInfo : ComplexTypeBase {
    private Nullable`1<Guid> _servicePlanId;
    private string _servicePlanName;
    private string _provisioningStatus;
    private string _appliesTo;
    [LowerCasePropertyAttribute]
public Nullable`1<Guid> ServicePlanId { get; public set; }
    [LowerCasePropertyAttribute]
public string ServicePlanName { get; public set; }
    [LowerCasePropertyAttribute]
public string ProvisioningStatus { get; public set; }
    [LowerCasePropertyAttribute]
public string AppliesTo { get; public set; }
    internal ServicePlanInfo(bool dontCreateProxy);
    protected ServicePlanInfo(ComplexTypeBase proxy);
    public Nullable`1<Guid> get_ServicePlanId();
    public void set_ServicePlanId(Nullable`1<Guid> value);
    public string get_ServicePlanName();
    public void set_ServicePlanName(string value);
    public string get_ProvisioningStatus();
    public void set_ProvisioningStatus(string value);
    public string get_AppliesTo();
    public void set_AppliesTo(string value);
}
[DataServiceKeyAttribute("ObjectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.ServicePrincipal : DirectoryObject {
    private Nullable`1<bool> _accountEnabled;
    private NonEntityTypeCollectionImpl`1<AddIn> _addIns;
    private NonEntityTypeCollectionImpl`1<string> _alternativeNames;
    private string _appDisplayName;
    private string _appId;
    private Nullable`1<Guid> _appOwnerTenantId;
    private bool _appRoleAssignmentRequired;
    private NonEntityTypeCollectionImpl`1<AppRole> _appRoles;
    private string _displayName;
    private string _errorUrl;
    private string _homepage;
    private NonEntityTypeCollectionImpl`1<KeyCredential> _keyCredentials;
    private string _logoutUrl;
    private NonEntityTypeCollectionImpl`1<OAuth2Permission> _oauth2Permissions;
    private NonEntityTypeCollectionImpl`1<PasswordCredential> _passwordCredentials;
    private string _preferredTokenSigningKeyThumbprint;
    private string _publisherName;
    private NonEntityTypeCollectionImpl`1<string> _replyUrls;
    private string _samlMetadataUrl;
    private NonEntityTypeCollectionImpl`1<string> _servicePrincipalNames;
    private string _servicePrincipalType;
    private NonEntityTypeCollectionImpl`1<string> _tags;
    private IAppRoleAssignmentCollection _appRoleAssignedToFetcher;
    private EntityCollectionImpl`1<AppRoleAssignment> _appRoleAssignedTo;
    private IAppRoleAssignmentCollection _appRoleAssignmentsFetcher;
    private EntityCollectionImpl`1<AppRoleAssignment> _appRoleAssignments;
    private IOAuth2PermissionGrantCollection _oauth2PermissionGrantsFetcher;
    private EntityCollectionImpl`1<OAuth2PermissionGrant> _oauth2PermissionGrants;
    private IDirectoryObjectCollection _policiesFetcher;
    private EntityCollectionImpl`1<DirectoryObject> _policies;
    private IServiceEndpointCollection _serviceEndpointsFetcher;
    private EntityCollectionImpl`1<ServiceEndpoint> _serviceEndpoints;
    [LowerCasePropertyAttribute]
public Nullable`1<bool> AccountEnabled { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<AddIn> AddIns { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> AlternativeNames { get; public set; }
    [LowerCasePropertyAttribute]
public string AppDisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public string AppId { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<Guid> AppOwnerTenantId { get; public set; }
    [LowerCasePropertyAttribute]
public bool AppRoleAssignmentRequired { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<AppRole> AppRoles { get; public set; }
    [LowerCasePropertyAttribute]
public string DisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public string ErrorUrl { get; public set; }
    [LowerCasePropertyAttribute]
public string Homepage { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<KeyCredential> KeyCredentials { get; public set; }
    [LowerCasePropertyAttribute]
public string LogoutUrl { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<OAuth2Permission> Oauth2Permissions { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<PasswordCredential> PasswordCredentials { get; public set; }
    [LowerCasePropertyAttribute]
public string PreferredTokenSigningKeyThumbprint { get; public set; }
    [LowerCasePropertyAttribute]
public string PublisherName { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> ReplyUrls { get; public set; }
    [LowerCasePropertyAttribute]
public string SamlMetadataUrl { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> ServicePrincipalNames { get; public set; }
    [LowerCasePropertyAttribute]
public string ServicePrincipalType { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> Tags { get; public set; }
    [LowerCasePropertyAttribute]
private IAppRoleAssignmentCollection Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipalFetcher.AppRoleAssignedTo { get; }
    [LowerCasePropertyAttribute]
public IList`1<AppRoleAssignment> AppRoleAssignedTo { get; public set; }
    private IPagedCollection`1<IAppRoleAssignment> Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipal.AppRoleAssignedTo { get; }
    [LowerCasePropertyAttribute]
private IAppRoleAssignmentCollection Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipalFetcher.AppRoleAssignments { get; }
    [LowerCasePropertyAttribute]
public IList`1<AppRoleAssignment> AppRoleAssignments { get; public set; }
    private IPagedCollection`1<IAppRoleAssignment> Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipal.AppRoleAssignments { get; }
    [LowerCasePropertyAttribute]
private IOAuth2PermissionGrantCollection Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipalFetcher.Oauth2PermissionGrants { get; }
    [LowerCasePropertyAttribute]
public IList`1<OAuth2PermissionGrant> Oauth2PermissionGrants { get; public set; }
    private IPagedCollection`1<IOAuth2PermissionGrant> Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipal.Oauth2PermissionGrants { get; }
    [LowerCasePropertyAttribute]
private IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipalFetcher.Policies { get; }
    [LowerCasePropertyAttribute]
public IList`1<DirectoryObject> Policies { get; public set; }
    private IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipal.Policies { get; }
    [LowerCasePropertyAttribute]
private IServiceEndpointCollection Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipalFetcher.ServiceEndpoints { get; }
    [LowerCasePropertyAttribute]
public IList`1<ServiceEndpoint> ServiceEndpoints { get; public set; }
    private IPagedCollection`1<IServiceEndpoint> Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipal.ServiceEndpoints { get; }
    internal ServicePrincipal(bool dontCreateProxy);
    protected ServicePrincipal(GraphObject proxy);
    public sealed virtual Nullable`1<bool> get_AccountEnabled();
    public sealed virtual void set_AccountEnabled(Nullable`1<bool> value);
    public sealed virtual IList`1<AddIn> get_AddIns();
    public void set_AddIns(IList`1<AddIn> value);
    public sealed virtual IList`1<string> get_AlternativeNames();
    public void set_AlternativeNames(IList`1<string> value);
    public sealed virtual string get_AppDisplayName();
    public sealed virtual void set_AppDisplayName(string value);
    public sealed virtual string get_AppId();
    public sealed virtual void set_AppId(string value);
    public sealed virtual Nullable`1<Guid> get_AppOwnerTenantId();
    public sealed virtual void set_AppOwnerTenantId(Nullable`1<Guid> value);
    public sealed virtual bool get_AppRoleAssignmentRequired();
    public sealed virtual void set_AppRoleAssignmentRequired(bool value);
    public sealed virtual IList`1<AppRole> get_AppRoles();
    public void set_AppRoles(IList`1<AppRole> value);
    public sealed virtual string get_DisplayName();
    public sealed virtual void set_DisplayName(string value);
    public sealed virtual string get_ErrorUrl();
    public sealed virtual void set_ErrorUrl(string value);
    public sealed virtual string get_Homepage();
    public sealed virtual void set_Homepage(string value);
    public sealed virtual IList`1<KeyCredential> get_KeyCredentials();
    public void set_KeyCredentials(IList`1<KeyCredential> value);
    public sealed virtual string get_LogoutUrl();
    public sealed virtual void set_LogoutUrl(string value);
    public sealed virtual IList`1<OAuth2Permission> get_Oauth2Permissions();
    public void set_Oauth2Permissions(IList`1<OAuth2Permission> value);
    public sealed virtual IList`1<PasswordCredential> get_PasswordCredentials();
    public void set_PasswordCredentials(IList`1<PasswordCredential> value);
    public sealed virtual string get_PreferredTokenSigningKeyThumbprint();
    public sealed virtual void set_PreferredTokenSigningKeyThumbprint(string value);
    public sealed virtual string get_PublisherName();
    public sealed virtual void set_PublisherName(string value);
    public sealed virtual IList`1<string> get_ReplyUrls();
    public void set_ReplyUrls(IList`1<string> value);
    public sealed virtual string get_SamlMetadataUrl();
    public sealed virtual void set_SamlMetadataUrl(string value);
    public sealed virtual IList`1<string> get_ServicePrincipalNames();
    public void set_ServicePrincipalNames(IList`1<string> value);
    public sealed virtual string get_ServicePrincipalType();
    public sealed virtual void set_ServicePrincipalType(string value);
    public sealed virtual IList`1<string> get_Tags();
    public void set_Tags(IList`1<string> value);
    private sealed virtual override IAppRoleAssignmentCollection Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipalFetcher.get_AppRoleAssignedTo();
    public IList`1<AppRoleAssignment> get_AppRoleAssignedTo();
    public void set_AppRoleAssignedTo(IList`1<AppRoleAssignment> value);
    private sealed virtual override IPagedCollection`1<IAppRoleAssignment> Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipal.get_AppRoleAssignedTo();
    private sealed virtual override IAppRoleAssignmentCollection Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipalFetcher.get_AppRoleAssignments();
    public IList`1<AppRoleAssignment> get_AppRoleAssignments();
    public void set_AppRoleAssignments(IList`1<AppRoleAssignment> value);
    private sealed virtual override IPagedCollection`1<IAppRoleAssignment> Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipal.get_AppRoleAssignments();
    private sealed virtual override IOAuth2PermissionGrantCollection Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipalFetcher.get_Oauth2PermissionGrants();
    public IList`1<OAuth2PermissionGrant> get_Oauth2PermissionGrants();
    public void set_Oauth2PermissionGrants(IList`1<OAuth2PermissionGrant> value);
    private sealed virtual override IPagedCollection`1<IOAuth2PermissionGrant> Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipal.get_Oauth2PermissionGrants();
    private sealed virtual override IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipalFetcher.get_Policies();
    public IList`1<DirectoryObject> get_Policies();
    public void set_Policies(IList`1<DirectoryObject> value);
    private sealed virtual override IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipal.get_Policies();
    private sealed virtual override IServiceEndpointCollection Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipalFetcher.get_ServiceEndpoints();
    public IList`1<ServiceEndpoint> get_ServiceEndpoints();
    public void set_ServiceEndpoints(IList`1<ServiceEndpoint> value);
    private sealed virtual override IPagedCollection`1<IServiceEndpoint> Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipal.get_ServiceEndpoints();
    private sealed virtual override Task`1<IServicePrincipal> Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipalFetcher.ExecuteAsync();
    private sealed virtual override IServicePrincipalFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IServicePrincipalFetcher.Expand(Expression`1<Func`2<IServicePrincipal, TTarget>> navigationPropertyAccessor);
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_AddIns>b__0();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_AddIns>b__2();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_AlternativeNames>b__4();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_AlternativeNames>b__6();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_AppRoles>b__8();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_AppRoles>b__a();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_KeyCredentials>b__c();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_KeyCredentials>b__e();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_Oauth2Permissions>b__10();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_Oauth2Permissions>b__12();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_PasswordCredentials>b__14();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_PasswordCredentials>b__16();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_ReplyUrls>b__18();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_ReplyUrls>b__1a();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_ServicePrincipalNames>b__1c();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_ServicePrincipalNames>b__1e();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_Tags>b__20();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_Tags>b__22();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_AppRoleAssignedTo>b__24();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_AppRoleAssignedTo>b__26();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_AppRoleAssignments>b__28();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_AppRoleAssignments>b__2a();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_Oauth2PermissionGrants>b__2c();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_Oauth2PermissionGrants>b__2e();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_Policies>b__30();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_Policies>b__32();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_ServiceEndpoints>b__34();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_ServiceEndpoints>b__36();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.ActiveDirectory.GraphClient.ServicePrincipalCollection : QueryableSet`2<IServicePrincipal, ServicePrincipal> {
    public IServicePrincipalFetcher Item { get; }
    internal ServicePrincipalCollection(DataServiceQuery inner, DataServiceContextWrapper context, object entity, string path);
    public sealed virtual IServicePrincipalFetcher GetByObjectId(string objectId);
    public sealed virtual IServicePrincipalFetcher get_Item(string objectId);
    public sealed virtual Task`1<IPagedCollection`1<IServicePrincipal>> ExecuteAsync();
    public sealed virtual Task AddServicePrincipalAsync(IServicePrincipal item, bool deferredSave);
    [CompilerGeneratedAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.ServicePrincipalCollection/<<ExecuteAsync>b__2>d__3")]
[DebuggerStepThroughAttribute]
private Task`1<IPagedCollection`1<IServicePrincipal>> <ExecuteAsync>b__2();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.ServicePrincipalFetcher : DirectoryObjectFetcher {
    private IAppRoleAssignmentCollection _appRoleAssignedTo;
    private IAppRoleAssignmentCollection _appRoleAssignments;
    private IOAuth2PermissionGrantCollection _oauth2PermissionGrants;
    private IDirectoryObjectCollection _policies;
    private IServiceEndpointCollection _serviceEndpoints;
    private IReadOnlyQueryableSet`1<IServicePrincipal> _query;
    [LowerCasePropertyAttribute]
public IAppRoleAssignmentCollection AppRoleAssignedTo { get; }
    [LowerCasePropertyAttribute]
public IAppRoleAssignmentCollection AppRoleAssignments { get; }
    [LowerCasePropertyAttribute]
public IOAuth2PermissionGrantCollection Oauth2PermissionGrants { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection Policies { get; }
    [LowerCasePropertyAttribute]
public IServiceEndpointCollection ServiceEndpoints { get; }
    public sealed virtual IAppRoleAssignmentCollection get_AppRoleAssignedTo();
    public sealed virtual IAppRoleAssignmentCollection get_AppRoleAssignments();
    public sealed virtual IOAuth2PermissionGrantCollection get_Oauth2PermissionGrants();
    public sealed virtual IDirectoryObjectCollection get_Policies();
    public sealed virtual IServiceEndpointCollection get_ServiceEndpoints();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.ServicePrincipalFetcher/<ExecuteAsync>d__0")]
public sealed virtual Task`1<IServicePrincipal> ExecuteAsync();
    public sealed virtual IServicePrincipalFetcher Expand(Expression`1<Func`2<IServicePrincipal, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IServicePrincipal> EnsureQuery();
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.ServiceUnavailableException : GraphException {
    public ServiceUnavailableException(HttpStatusCode httpStatusCode, string message);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.SignInName : ComplexTypeBase {
    private string _type;
    private string _value;
    [LowerCasePropertyAttribute]
public string Type { get; public set; }
    [LowerCasePropertyAttribute]
public string Value { get; public set; }
    internal SignInName(bool dontCreateProxy);
    protected SignInName(ComplexTypeBase proxy);
    public string get_Type();
    public void set_Type(string value);
    public string get_Value();
    public void set_Value(string value);
}
[DataServiceKeyAttribute("ObjectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.SubscribedSku : GraphObject {
    private string _capabilityStatus;
    private Nullable`1<int> _consumedUnits;
    private string _objectId;
    private LicenseUnitsDetail _prepaidUnits;
    private NonEntityTypeCollectionImpl`1<ServicePlanInfo> _servicePlans;
    private Nullable`1<Guid> _skuId;
    private string _skuPartNumber;
    private string _appliesTo;
    [LowerCasePropertyAttribute]
public string CapabilityStatus { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<int> ConsumedUnits { get; public set; }
    [LowerCasePropertyAttribute]
public string ObjectId { get; public set; }
    [LowerCasePropertyAttribute]
public LicenseUnitsDetail PrepaidUnits { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<ServicePlanInfo> ServicePlans { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<Guid> SkuId { get; public set; }
    [LowerCasePropertyAttribute]
public string SkuPartNumber { get; public set; }
    [LowerCasePropertyAttribute]
public string AppliesTo { get; public set; }
    internal SubscribedSku(bool dontCreateProxy);
    protected SubscribedSku(GraphObject proxy);
    protected Uri UpcastUri(Uri uri, string type);
    protected string UpcastPath(string path, string type);
    private string UpcastInternal(string path, string type);
    public sealed virtual string get_CapabilityStatus();
    public sealed virtual void set_CapabilityStatus(string value);
    public sealed virtual Nullable`1<int> get_ConsumedUnits();
    public sealed virtual void set_ConsumedUnits(Nullable`1<int> value);
    public sealed virtual string get_ObjectId();
    public sealed virtual void set_ObjectId(string value);
    public sealed virtual LicenseUnitsDetail get_PrepaidUnits();
    public sealed virtual void set_PrepaidUnits(LicenseUnitsDetail value);
    public sealed virtual IList`1<ServicePlanInfo> get_ServicePlans();
    public void set_ServicePlans(IList`1<ServicePlanInfo> value);
    public sealed virtual Nullable`1<Guid> get_SkuId();
    public sealed virtual void set_SkuId(Nullable`1<Guid> value);
    public sealed virtual string get_SkuPartNumber();
    public sealed virtual void set_SkuPartNumber(string value);
    public sealed virtual string get_AppliesTo();
    public sealed virtual void set_AppliesTo(string value);
    private sealed virtual override Task`1<ISubscribedSku> Microsoft.Azure.ActiveDirectory.GraphClient.ISubscribedSkuFetcher.ExecuteAsync();
    private sealed virtual override ISubscribedSkuFetcher Microsoft.Azure.ActiveDirectory.GraphClient.ISubscribedSkuFetcher.Expand(Expression`1<Func`2<ISubscribedSku, TTarget>> navigationPropertyAccessor);
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_ServicePlans>b__0();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_ServicePlans>b__2();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.ActiveDirectory.GraphClient.SubscribedSkuCollection : QueryableSet`2<ISubscribedSku, SubscribedSku> {
    public ISubscribedSkuFetcher Item { get; }
    internal SubscribedSkuCollection(DataServiceQuery inner, DataServiceContextWrapper context, object entity, string path);
    public sealed virtual ISubscribedSkuFetcher GetByObjectId(string objectId);
    public sealed virtual ISubscribedSkuFetcher get_Item(string objectId);
    public sealed virtual Task`1<IPagedCollection`1<ISubscribedSku>> ExecuteAsync();
    public sealed virtual Task AddSubscribedSkuAsync(ISubscribedSku item, bool deferredSave);
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.SubscribedSkuCollection/<<ExecuteAsync>b__2>d__3")]
[CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
private Task`1<IPagedCollection`1<ISubscribedSku>> <ExecuteAsync>b__2();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.SubscribedSkuFetcher : RestShallowObjectFetcher {
    private IReadOnlyQueryableSet`1<ISubscribedSku> _query;
    protected Uri UpcastUri(Uri uri, string type);
    protected string UpcastPath(string path, string type);
    private string UpcastInternal(string path, string type);
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.SubscribedSkuFetcher/<ExecuteAsync>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<ISubscribedSku> ExecuteAsync();
    public sealed virtual ISubscribedSkuFetcher Expand(Expression`1<Func`2<ISubscribedSku, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<ISubscribedSku> EnsureQuery();
}
[DataServiceKeyAttribute("ObjectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.TenantDetail : DirectoryObject {
    private NonEntityTypeCollectionImpl`1<AssignedPlan> _assignedPlans;
    private string _city;
    private Nullable`1<DateTime> _companyLastDirSyncTime;
    private string _country;
    private string _countryLetterCode;
    private Nullable`1<bool> _dirSyncEnabled;
    private string _displayName;
    private NonEntityTypeCollectionImpl`1<string> _marketingNotificationEmails;
    private string _postalCode;
    private string _preferredLanguage;
    private NonEntityTypeCollectionImpl`1<ProvisionedPlan> _provisionedPlans;
    private NonEntityTypeCollectionImpl`1<ProvisioningError> _provisioningErrors;
    private NonEntityTypeCollectionImpl`1<string> _securityComplianceNotificationMails;
    private NonEntityTypeCollectionImpl`1<string> _securityComplianceNotificationPhones;
    private string _state;
    private string _street;
    private NonEntityTypeCollectionImpl`1<string> _technicalNotificationMails;
    private string _telephoneNumber;
    private NonEntityTypeCollectionImpl`1<VerifiedDomain> _verifiedDomains;
    private ITrustedCAsForPasswordlessAuthCollection _trustedCAsForPasswordlessAuthFetcher;
    private EntityCollectionImpl`1<TrustedCAsForPasswordlessAuth> _trustedCAsForPasswordlessAuth;
    [LowerCasePropertyAttribute]
public IList`1<AssignedPlan> AssignedPlans { get; public set; }
    [LowerCasePropertyAttribute]
public string City { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> CompanyLastDirSyncTime { get; public set; }
    [LowerCasePropertyAttribute]
public string Country { get; public set; }
    [LowerCasePropertyAttribute]
public string CountryLetterCode { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> DirSyncEnabled { get; public set; }
    [LowerCasePropertyAttribute]
public string DisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> MarketingNotificationEmails { get; public set; }
    [LowerCasePropertyAttribute]
public string PostalCode { get; public set; }
    [LowerCasePropertyAttribute]
public string PreferredLanguage { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<ProvisionedPlan> ProvisionedPlans { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<ProvisioningError> ProvisioningErrors { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> SecurityComplianceNotificationMails { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> SecurityComplianceNotificationPhones { get; public set; }
    [LowerCasePropertyAttribute]
public string State { get; public set; }
    [LowerCasePropertyAttribute]
public string Street { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> TechnicalNotificationMails { get; public set; }
    [LowerCasePropertyAttribute]
public string TelephoneNumber { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<VerifiedDomain> VerifiedDomains { get; public set; }
    [LowerCasePropertyAttribute]
private ITrustedCAsForPasswordlessAuthCollection Microsoft.Azure.ActiveDirectory.GraphClient.ITenantDetailFetcher.TrustedCAsForPasswordlessAuth { get; }
    [LowerCasePropertyAttribute]
public IList`1<TrustedCAsForPasswordlessAuth> TrustedCAsForPasswordlessAuth { get; public set; }
    private IPagedCollection`1<ITrustedCAsForPasswordlessAuth> Microsoft.Azure.ActiveDirectory.GraphClient.ITenantDetail.TrustedCAsForPasswordlessAuth { get; }
    internal TenantDetail(bool dontCreateProxy);
    protected TenantDetail(GraphObject proxy);
    public sealed virtual IList`1<AssignedPlan> get_AssignedPlans();
    public void set_AssignedPlans(IList`1<AssignedPlan> value);
    public sealed virtual string get_City();
    public sealed virtual void set_City(string value);
    public sealed virtual Nullable`1<DateTime> get_CompanyLastDirSyncTime();
    public sealed virtual void set_CompanyLastDirSyncTime(Nullable`1<DateTime> value);
    public sealed virtual string get_Country();
    public sealed virtual void set_Country(string value);
    public sealed virtual string get_CountryLetterCode();
    public sealed virtual void set_CountryLetterCode(string value);
    public sealed virtual Nullable`1<bool> get_DirSyncEnabled();
    public sealed virtual void set_DirSyncEnabled(Nullable`1<bool> value);
    public sealed virtual string get_DisplayName();
    public sealed virtual void set_DisplayName(string value);
    public sealed virtual IList`1<string> get_MarketingNotificationEmails();
    public void set_MarketingNotificationEmails(IList`1<string> value);
    public sealed virtual string get_PostalCode();
    public sealed virtual void set_PostalCode(string value);
    public sealed virtual string get_PreferredLanguage();
    public sealed virtual void set_PreferredLanguage(string value);
    public sealed virtual IList`1<ProvisionedPlan> get_ProvisionedPlans();
    public void set_ProvisionedPlans(IList`1<ProvisionedPlan> value);
    public sealed virtual IList`1<ProvisioningError> get_ProvisioningErrors();
    public void set_ProvisioningErrors(IList`1<ProvisioningError> value);
    public sealed virtual IList`1<string> get_SecurityComplianceNotificationMails();
    public void set_SecurityComplianceNotificationMails(IList`1<string> value);
    public sealed virtual IList`1<string> get_SecurityComplianceNotificationPhones();
    public void set_SecurityComplianceNotificationPhones(IList`1<string> value);
    public sealed virtual string get_State();
    public sealed virtual void set_State(string value);
    public sealed virtual string get_Street();
    public sealed virtual void set_Street(string value);
    public sealed virtual IList`1<string> get_TechnicalNotificationMails();
    public void set_TechnicalNotificationMails(IList`1<string> value);
    public sealed virtual string get_TelephoneNumber();
    public sealed virtual void set_TelephoneNumber(string value);
    public sealed virtual IList`1<VerifiedDomain> get_VerifiedDomains();
    public void set_VerifiedDomains(IList`1<VerifiedDomain> value);
    private sealed virtual override ITrustedCAsForPasswordlessAuthCollection Microsoft.Azure.ActiveDirectory.GraphClient.ITenantDetailFetcher.get_TrustedCAsForPasswordlessAuth();
    public IList`1<TrustedCAsForPasswordlessAuth> get_TrustedCAsForPasswordlessAuth();
    public void set_TrustedCAsForPasswordlessAuth(IList`1<TrustedCAsForPasswordlessAuth> value);
    private sealed virtual override IPagedCollection`1<ITrustedCAsForPasswordlessAuth> Microsoft.Azure.ActiveDirectory.GraphClient.ITenantDetail.get_TrustedCAsForPasswordlessAuth();
    private sealed virtual override Task`1<ITenantDetail> Microsoft.Azure.ActiveDirectory.GraphClient.ITenantDetailFetcher.ExecuteAsync();
    private sealed virtual override ITenantDetailFetcher Microsoft.Azure.ActiveDirectory.GraphClient.ITenantDetailFetcher.Expand(Expression`1<Func`2<ITenantDetail, TTarget>> navigationPropertyAccessor);
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_AssignedPlans>b__0();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_AssignedPlans>b__2();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_MarketingNotificationEmails>b__4();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_MarketingNotificationEmails>b__6();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_ProvisionedPlans>b__8();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_ProvisionedPlans>b__a();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_ProvisioningErrors>b__c();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_ProvisioningErrors>b__e();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_SecurityComplianceNotificationMails>b__10();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_SecurityComplianceNotificationMails>b__12();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_SecurityComplianceNotificationPhones>b__14();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_SecurityComplianceNotificationPhones>b__16();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_TechnicalNotificationMails>b__18();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_TechnicalNotificationMails>b__1a();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_VerifiedDomains>b__1c();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_VerifiedDomains>b__1e();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_TrustedCAsForPasswordlessAuth>b__20();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_TrustedCAsForPasswordlessAuth>b__22();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.ActiveDirectory.GraphClient.TenantDetailCollection : QueryableSet`2<ITenantDetail, TenantDetail> {
    public ITenantDetailFetcher Item { get; }
    internal TenantDetailCollection(DataServiceQuery inner, DataServiceContextWrapper context, object entity, string path);
    public sealed virtual ITenantDetailFetcher GetByObjectId(string objectId);
    public sealed virtual ITenantDetailFetcher get_Item(string objectId);
    public sealed virtual Task`1<IPagedCollection`1<ITenantDetail>> ExecuteAsync();
    public sealed virtual Task AddTenantDetailAsync(ITenantDetail item, bool deferredSave);
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.TenantDetailCollection/<<ExecuteAsync>b__2>d__3")]
[CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
private Task`1<IPagedCollection`1<ITenantDetail>> <ExecuteAsync>b__2();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.TenantDetailFetcher : DirectoryObjectFetcher {
    private ITrustedCAsForPasswordlessAuthCollection _trustedCAsForPasswordlessAuth;
    private IReadOnlyQueryableSet`1<ITenantDetail> _query;
    [LowerCasePropertyAttribute]
public ITrustedCAsForPasswordlessAuthCollection TrustedCAsForPasswordlessAuth { get; }
    public sealed virtual ITrustedCAsForPasswordlessAuthCollection get_TrustedCAsForPasswordlessAuth();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.TenantDetailFetcher/<ExecuteAsync>d__0")]
public sealed virtual Task`1<ITenantDetail> ExecuteAsync();
    public sealed virtual ITenantDetailFetcher Expand(Expression`1<Func`2<ITenantDetail, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<ITenantDetail> EnsureQuery();
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.TokenHelper : object {
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public static string GetDomainName(string userPrincipalName);
    public static string GetUserAccessToken(string userPrincipalName, string password);
    [CompilerGeneratedAttribute]
private static bool <GetUserAccessToken>b__0(string x);
}
[DataServiceKeyAttribute("Id")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.TrustedCAsForPasswordlessAuth : GraphObject {
    private string _id;
    private NonEntityTypeCollectionImpl`1<CertificateAuthorityInformation> _certificateAuthorities;
    [LowerCasePropertyAttribute]
public string Id { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<CertificateAuthorityInformation> CertificateAuthorities { get; public set; }
    internal TrustedCAsForPasswordlessAuth(bool dontCreateProxy);
    protected TrustedCAsForPasswordlessAuth(GraphObject proxy);
    protected Uri UpcastUri(Uri uri, string type);
    protected string UpcastPath(string path, string type);
    private string UpcastInternal(string path, string type);
    public sealed virtual string get_Id();
    public sealed virtual void set_Id(string value);
    public sealed virtual IList`1<CertificateAuthorityInformation> get_CertificateAuthorities();
    public void set_CertificateAuthorities(IList`1<CertificateAuthorityInformation> value);
    private sealed virtual override Task`1<ITrustedCAsForPasswordlessAuth> Microsoft.Azure.ActiveDirectory.GraphClient.ITrustedCAsForPasswordlessAuthFetcher.ExecuteAsync();
    private sealed virtual override ITrustedCAsForPasswordlessAuthFetcher Microsoft.Azure.ActiveDirectory.GraphClient.ITrustedCAsForPasswordlessAuthFetcher.Expand(Expression`1<Func`2<ITrustedCAsForPasswordlessAuth, TTarget>> navigationPropertyAccessor);
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_CertificateAuthorities>b__0();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_CertificateAuthorities>b__2();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.ActiveDirectory.GraphClient.TrustedCAsForPasswordlessAuthCollection : QueryableSet`2<ITrustedCAsForPasswordlessAuth, TrustedCAsForPasswordlessAuth> {
    public ITrustedCAsForPasswordlessAuthFetcher Item { get; }
    internal TrustedCAsForPasswordlessAuthCollection(DataServiceQuery inner, DataServiceContextWrapper context, object entity, string path);
    public sealed virtual ITrustedCAsForPasswordlessAuthFetcher GetById(string id);
    public sealed virtual ITrustedCAsForPasswordlessAuthFetcher get_Item(string id);
    public sealed virtual Task`1<IPagedCollection`1<ITrustedCAsForPasswordlessAuth>> ExecuteAsync();
    public sealed virtual Task AddTrustedCAsForPasswordlessAuthAsync(ITrustedCAsForPasswordlessAuth item, bool deferredSave);
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.TrustedCAsForPasswordlessAuthCollection/<<ExecuteAsync>b__2>d__3")]
[CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
private Task`1<IPagedCollection`1<ITrustedCAsForPasswordlessAuth>> <ExecuteAsync>b__2();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.TrustedCAsForPasswordlessAuthFetcher : RestShallowObjectFetcher {
    private IReadOnlyQueryableSet`1<ITrustedCAsForPasswordlessAuth> _query;
    protected Uri UpcastUri(Uri uri, string type);
    protected string UpcastPath(string path, string type);
    private string UpcastInternal(string path, string type);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.TrustedCAsForPasswordlessAuthFetcher/<ExecuteAsync>d__0")]
public sealed virtual Task`1<ITrustedCAsForPasswordlessAuth> ExecuteAsync();
    public sealed virtual ITrustedCAsForPasswordlessAuthFetcher Expand(Expression`1<Func`2<ITrustedCAsForPasswordlessAuth, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<ITrustedCAsForPasswordlessAuth> EnsureQuery();
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.UnsupportedQueryException : GraphException {
    public UnsupportedQueryException(HttpStatusCode httpStatusCode, string message);
}
[DataServiceKeyAttribute("ObjectId")]
public class Microsoft.Azure.ActiveDirectory.GraphClient.User : DirectoryObject {
    private Nullable`1<bool> _accountEnabled;
    private NonEntityTypeCollectionImpl`1<SignInName> _signInNames;
    private NonEntityTypeCollectionImpl`1<AssignedLicense> _assignedLicenses;
    private NonEntityTypeCollectionImpl`1<AssignedPlan> _assignedPlans;
    private string _city;
    private string _companyName;
    private string _country;
    private string _creationType;
    private string _department;
    private Nullable`1<bool> _dirSyncEnabled;
    private string _displayName;
    private string _facsimileTelephoneNumber;
    private string _givenName;
    private string _immutableId;
    private Nullable`1<bool> _isCompromised;
    private string _jobTitle;
    private Nullable`1<DateTime> _lastDirSyncTime;
    private string _mail;
    private string _mailNickname;
    private string _mobile;
    private string _onPremisesSecurityIdentifier;
    private NonEntityTypeCollectionImpl`1<string> _otherMails;
    private string _passwordPolicies;
    private PasswordProfile _passwordProfile;
    private string _physicalDeliveryOfficeName;
    private string _postalCode;
    private string _preferredLanguage;
    private NonEntityTypeCollectionImpl`1<ProvisionedPlan> _provisionedPlans;
    private NonEntityTypeCollectionImpl`1<ProvisioningError> _provisioningErrors;
    private NonEntityTypeCollectionImpl`1<string> _proxyAddresses;
    private Nullable`1<DateTime> _refreshTokensValidFromDateTime;
    private string _sipProxyAddress;
    private string _state;
    private string _streetAddress;
    private string _surname;
    private string _telephoneNumber;
    private IStreamFetcher _thumbnailPhotoFetcher;
    private string _usageLocation;
    private string _userPrincipalName;
    private string _userType;
    private IAppRoleAssignmentCollection _appRoleAssignmentsFetcher;
    private EntityCollectionImpl`1<AppRoleAssignment> _appRoleAssignments;
    private ILicenseDetailCollection _licenseDetailsFetcher;
    private EntityCollectionImpl`1<LicenseDetail> _licenseDetails;
    private IOAuth2PermissionGrantCollection _oauth2PermissionGrantsFetcher;
    private EntityCollectionImpl`1<OAuth2PermissionGrant> _oauth2PermissionGrants;
    private IDirectoryObjectCollection _ownedDevicesFetcher;
    private EntityCollectionImpl`1<DirectoryObject> _ownedDevices;
    private IDirectoryObjectCollection _registeredDevicesFetcher;
    private EntityCollectionImpl`1<DirectoryObject> _registeredDevices;
    [LowerCasePropertyAttribute]
public Nullable`1<bool> AccountEnabled { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<SignInName> SignInNames { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<AssignedLicense> AssignedLicenses { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<AssignedPlan> AssignedPlans { get; public set; }
    [LowerCasePropertyAttribute]
public string City { get; public set; }
    [LowerCasePropertyAttribute]
public string CompanyName { get; public set; }
    [LowerCasePropertyAttribute]
public string Country { get; public set; }
    [LowerCasePropertyAttribute]
public string CreationType { get; public set; }
    [LowerCasePropertyAttribute]
public string Department { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> DirSyncEnabled { get; public set; }
    [LowerCasePropertyAttribute]
public string DisplayName { get; public set; }
    [LowerCasePropertyAttribute]
public string FacsimileTelephoneNumber { get; public set; }
    [LowerCasePropertyAttribute]
public string GivenName { get; public set; }
    [LowerCasePropertyAttribute]
public string ImmutableId { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> IsCompromised { get; public set; }
    [LowerCasePropertyAttribute]
public string JobTitle { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> LastDirSyncTime { get; public set; }
    [LowerCasePropertyAttribute]
public string Mail { get; public set; }
    [LowerCasePropertyAttribute]
public string MailNickname { get; public set; }
    [LowerCasePropertyAttribute]
public string Mobile { get; public set; }
    [LowerCasePropertyAttribute]
public string OnPremisesSecurityIdentifier { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> OtherMails { get; public set; }
    [LowerCasePropertyAttribute]
public string PasswordPolicies { get; public set; }
    [LowerCasePropertyAttribute]
public PasswordProfile PasswordProfile { get; public set; }
    [LowerCasePropertyAttribute]
public string PhysicalDeliveryOfficeName { get; public set; }
    [LowerCasePropertyAttribute]
public string PostalCode { get; public set; }
    [LowerCasePropertyAttribute]
public string PreferredLanguage { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<ProvisionedPlan> ProvisionedPlans { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<ProvisioningError> ProvisioningErrors { get; public set; }
    [LowerCasePropertyAttribute]
public IList`1<string> ProxyAddresses { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<DateTime> RefreshTokensValidFromDateTime { get; public set; }
    [LowerCasePropertyAttribute]
public string SipProxyAddress { get; public set; }
    [LowerCasePropertyAttribute]
public string State { get; public set; }
    [LowerCasePropertyAttribute]
public string StreetAddress { get; public set; }
    [LowerCasePropertyAttribute]
public string Surname { get; public set; }
    [LowerCasePropertyAttribute]
public string TelephoneNumber { get; public set; }
    private IStreamFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IUser.ThumbnailPhoto { get; }
    [LowerCasePropertyAttribute]
public string UsageLocation { get; public set; }
    [LowerCasePropertyAttribute]
public string UserPrincipalName { get; public set; }
    [LowerCasePropertyAttribute]
public string UserType { get; public set; }
    [LowerCasePropertyAttribute]
private IAppRoleAssignmentCollection Microsoft.Azure.ActiveDirectory.GraphClient.IUserFetcher.AppRoleAssignments { get; }
    [LowerCasePropertyAttribute]
public IList`1<AppRoleAssignment> AppRoleAssignments { get; public set; }
    private IPagedCollection`1<IAppRoleAssignment> Microsoft.Azure.ActiveDirectory.GraphClient.IUser.AppRoleAssignments { get; }
    [LowerCasePropertyAttribute]
private ILicenseDetailCollection Microsoft.Azure.ActiveDirectory.GraphClient.IUserFetcher.LicenseDetails { get; }
    [LowerCasePropertyAttribute]
public IList`1<LicenseDetail> LicenseDetails { get; public set; }
    private IPagedCollection`1<ILicenseDetail> Microsoft.Azure.ActiveDirectory.GraphClient.IUser.LicenseDetails { get; }
    [LowerCasePropertyAttribute]
private IOAuth2PermissionGrantCollection Microsoft.Azure.ActiveDirectory.GraphClient.IUserFetcher.Oauth2PermissionGrants { get; }
    [LowerCasePropertyAttribute]
public IList`1<OAuth2PermissionGrant> Oauth2PermissionGrants { get; public set; }
    private IPagedCollection`1<IOAuth2PermissionGrant> Microsoft.Azure.ActiveDirectory.GraphClient.IUser.Oauth2PermissionGrants { get; }
    [LowerCasePropertyAttribute]
private IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IUserFetcher.OwnedDevices { get; }
    [LowerCasePropertyAttribute]
public IList`1<DirectoryObject> OwnedDevices { get; public set; }
    private IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IUser.OwnedDevices { get; }
    [LowerCasePropertyAttribute]
private IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IUserFetcher.RegisteredDevices { get; }
    [LowerCasePropertyAttribute]
public IList`1<DirectoryObject> RegisteredDevices { get; public set; }
    private IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IUser.RegisteredDevices { get; }
    internal User(bool dontCreateProxy);
    protected User(GraphObject proxy);
    public sealed virtual Nullable`1<bool> get_AccountEnabled();
    public sealed virtual void set_AccountEnabled(Nullable`1<bool> value);
    public sealed virtual IList`1<SignInName> get_SignInNames();
    public void set_SignInNames(IList`1<SignInName> value);
    public sealed virtual IList`1<AssignedLicense> get_AssignedLicenses();
    public void set_AssignedLicenses(IList`1<AssignedLicense> value);
    public sealed virtual IList`1<AssignedPlan> get_AssignedPlans();
    public void set_AssignedPlans(IList`1<AssignedPlan> value);
    public sealed virtual string get_City();
    public sealed virtual void set_City(string value);
    public sealed virtual string get_CompanyName();
    public sealed virtual void set_CompanyName(string value);
    public sealed virtual string get_Country();
    public sealed virtual void set_Country(string value);
    public sealed virtual string get_CreationType();
    public sealed virtual void set_CreationType(string value);
    public sealed virtual string get_Department();
    public sealed virtual void set_Department(string value);
    public sealed virtual Nullable`1<bool> get_DirSyncEnabled();
    public sealed virtual void set_DirSyncEnabled(Nullable`1<bool> value);
    public sealed virtual string get_DisplayName();
    public sealed virtual void set_DisplayName(string value);
    public sealed virtual string get_FacsimileTelephoneNumber();
    public sealed virtual void set_FacsimileTelephoneNumber(string value);
    public sealed virtual string get_GivenName();
    public sealed virtual void set_GivenName(string value);
    public sealed virtual string get_ImmutableId();
    public sealed virtual void set_ImmutableId(string value);
    public sealed virtual Nullable`1<bool> get_IsCompromised();
    public sealed virtual void set_IsCompromised(Nullable`1<bool> value);
    public sealed virtual string get_JobTitle();
    public sealed virtual void set_JobTitle(string value);
    public sealed virtual Nullable`1<DateTime> get_LastDirSyncTime();
    public sealed virtual void set_LastDirSyncTime(Nullable`1<DateTime> value);
    public sealed virtual string get_Mail();
    public sealed virtual void set_Mail(string value);
    public sealed virtual string get_MailNickname();
    public sealed virtual void set_MailNickname(string value);
    public sealed virtual string get_Mobile();
    public sealed virtual void set_Mobile(string value);
    public sealed virtual string get_OnPremisesSecurityIdentifier();
    public sealed virtual void set_OnPremisesSecurityIdentifier(string value);
    public sealed virtual IList`1<string> get_OtherMails();
    public void set_OtherMails(IList`1<string> value);
    public sealed virtual string get_PasswordPolicies();
    public sealed virtual void set_PasswordPolicies(string value);
    public sealed virtual PasswordProfile get_PasswordProfile();
    public sealed virtual void set_PasswordProfile(PasswordProfile value);
    public sealed virtual string get_PhysicalDeliveryOfficeName();
    public sealed virtual void set_PhysicalDeliveryOfficeName(string value);
    public sealed virtual string get_PostalCode();
    public sealed virtual void set_PostalCode(string value);
    public sealed virtual string get_PreferredLanguage();
    public sealed virtual void set_PreferredLanguage(string value);
    public sealed virtual IList`1<ProvisionedPlan> get_ProvisionedPlans();
    public void set_ProvisionedPlans(IList`1<ProvisionedPlan> value);
    public sealed virtual IList`1<ProvisioningError> get_ProvisioningErrors();
    public void set_ProvisioningErrors(IList`1<ProvisioningError> value);
    public sealed virtual IList`1<string> get_ProxyAddresses();
    public void set_ProxyAddresses(IList`1<string> value);
    public sealed virtual Nullable`1<DateTime> get_RefreshTokensValidFromDateTime();
    public sealed virtual void set_RefreshTokensValidFromDateTime(Nullable`1<DateTime> value);
    public sealed virtual string get_SipProxyAddress();
    public sealed virtual void set_SipProxyAddress(string value);
    public sealed virtual string get_State();
    public sealed virtual void set_State(string value);
    public sealed virtual string get_StreetAddress();
    public sealed virtual void set_StreetAddress(string value);
    public sealed virtual string get_Surname();
    public sealed virtual void set_Surname(string value);
    public sealed virtual string get_TelephoneNumber();
    public sealed virtual void set_TelephoneNumber(string value);
    private sealed virtual override IStreamFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IUser.get_ThumbnailPhoto();
    public sealed virtual string get_UsageLocation();
    public sealed virtual void set_UsageLocation(string value);
    public sealed virtual string get_UserPrincipalName();
    public sealed virtual void set_UserPrincipalName(string value);
    public sealed virtual string get_UserType();
    public sealed virtual void set_UserType(string value);
    private sealed virtual override IAppRoleAssignmentCollection Microsoft.Azure.ActiveDirectory.GraphClient.IUserFetcher.get_AppRoleAssignments();
    public IList`1<AppRoleAssignment> get_AppRoleAssignments();
    public void set_AppRoleAssignments(IList`1<AppRoleAssignment> value);
    private sealed virtual override IPagedCollection`1<IAppRoleAssignment> Microsoft.Azure.ActiveDirectory.GraphClient.IUser.get_AppRoleAssignments();
    private sealed virtual override ILicenseDetailCollection Microsoft.Azure.ActiveDirectory.GraphClient.IUserFetcher.get_LicenseDetails();
    public IList`1<LicenseDetail> get_LicenseDetails();
    public void set_LicenseDetails(IList`1<LicenseDetail> value);
    private sealed virtual override IPagedCollection`1<ILicenseDetail> Microsoft.Azure.ActiveDirectory.GraphClient.IUser.get_LicenseDetails();
    private sealed virtual override IOAuth2PermissionGrantCollection Microsoft.Azure.ActiveDirectory.GraphClient.IUserFetcher.get_Oauth2PermissionGrants();
    public IList`1<OAuth2PermissionGrant> get_Oauth2PermissionGrants();
    public void set_Oauth2PermissionGrants(IList`1<OAuth2PermissionGrant> value);
    private sealed virtual override IPagedCollection`1<IOAuth2PermissionGrant> Microsoft.Azure.ActiveDirectory.GraphClient.IUser.get_Oauth2PermissionGrants();
    private sealed virtual override IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IUserFetcher.get_OwnedDevices();
    public IList`1<DirectoryObject> get_OwnedDevices();
    public void set_OwnedDevices(IList`1<DirectoryObject> value);
    private sealed virtual override IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IUser.get_OwnedDevices();
    private sealed virtual override IDirectoryObjectCollection Microsoft.Azure.ActiveDirectory.GraphClient.IUserFetcher.get_RegisteredDevices();
    public IList`1<DirectoryObject> get_RegisteredDevices();
    public void set_RegisteredDevices(IList`1<DirectoryObject> value);
    private sealed virtual override IPagedCollection`1<IDirectoryObject> Microsoft.Azure.ActiveDirectory.GraphClient.IUser.get_RegisteredDevices();
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.User/<AssignLicenseAsync>d__30")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IUser> AssignLicenseAsync(ICollection`1<AssignedLicense> addLicenses, ICollection`1<Guid> removeLicenses);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.User/<ChangePasswordAsync>d__36")]
public sealed virtual Task ChangePasswordAsync(string currentPassword, string newPassword);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.User/<InvalidateAllRefreshTokensAsync>d__3b")]
public sealed virtual Task`1<Nullable`1<bool>> InvalidateAllRefreshTokensAsync();
    private sealed virtual override Task`1<IUser> Microsoft.Azure.ActiveDirectory.GraphClient.IUserFetcher.ExecuteAsync();
    private sealed virtual override IUserFetcher Microsoft.Azure.ActiveDirectory.GraphClient.IUserFetcher.Expand(Expression`1<Func`2<IUser, TTarget>> navigationPropertyAccessor);
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_SignInNames>b__0();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_SignInNames>b__2();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_AssignedLicenses>b__4();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_AssignedLicenses>b__6();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_AssignedPlans>b__8();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_AssignedPlans>b__a();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_OtherMails>b__c();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_OtherMails>b__e();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_ProvisionedPlans>b__10();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_ProvisionedPlans>b__12();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_ProvisioningErrors>b__14();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_ProvisioningErrors>b__16();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_ProxyAddresses>b__18();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_ProxyAddresses>b__1a();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_AppRoleAssignments>b__1c();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_AppRoleAssignments>b__1e();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_LicenseDetails>b__20();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_LicenseDetails>b__22();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_Oauth2PermissionGrants>b__24();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_Oauth2PermissionGrants>b__26();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_OwnedDevices>b__28();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_OwnedDevices>b__2a();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <get_RegisteredDevices>b__2c();
    [CompilerGeneratedAttribute]
private Tuple`2<GraphObject, string> <set_RegisteredDevices>b__2e();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.ActiveDirectory.GraphClient.UserCollection : QueryableSet`2<IUser, User> {
    public IUserFetcher Item { get; }
    internal UserCollection(DataServiceQuery inner, DataServiceContextWrapper context, object entity, string path);
    public sealed virtual IUserFetcher GetByObjectId(string objectId);
    public sealed virtual IUserFetcher get_Item(string objectId);
    public sealed virtual Task`1<IPagedCollection`1<IUser>> ExecuteAsync();
    public sealed virtual Task AddUserAsync(IUser item, bool deferredSave);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.UserCollection/<<ExecuteAsync>b__2>d__3")]
private Task`1<IPagedCollection`1<IUser>> <ExecuteAsync>b__2();
}
internal class Microsoft.Azure.ActiveDirectory.GraphClient.UserFetcher : DirectoryObjectFetcher {
    private IAppRoleAssignmentCollection _appRoleAssignments;
    private ILicenseDetailCollection _licenseDetails;
    private IOAuth2PermissionGrantCollection _oauth2PermissionGrants;
    private IDirectoryObjectCollection _ownedDevices;
    private IDirectoryObjectCollection _registeredDevices;
    private IReadOnlyQueryableSet`1<IUser> _query;
    [LowerCasePropertyAttribute]
public IAppRoleAssignmentCollection AppRoleAssignments { get; }
    [LowerCasePropertyAttribute]
public ILicenseDetailCollection LicenseDetails { get; }
    [LowerCasePropertyAttribute]
public IOAuth2PermissionGrantCollection Oauth2PermissionGrants { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection OwnedDevices { get; }
    [LowerCasePropertyAttribute]
public IDirectoryObjectCollection RegisteredDevices { get; }
    public sealed virtual IAppRoleAssignmentCollection get_AppRoleAssignments();
    public sealed virtual ILicenseDetailCollection get_LicenseDetails();
    public sealed virtual IOAuth2PermissionGrantCollection get_Oauth2PermissionGrants();
    public sealed virtual IDirectoryObjectCollection get_OwnedDevices();
    public sealed virtual IDirectoryObjectCollection get_RegisteredDevices();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.UserFetcher/<ExecuteAsync>d__0")]
public sealed virtual Task`1<IUser> ExecuteAsync();
    public sealed virtual IUserFetcher Expand(Expression`1<Func`2<IUser, TTarget>> navigationPropertyAccessor);
    private IReadOnlyQueryableSet`1<IUser> EnsureQuery();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.UserFetcher/<AssignLicenseAsync>d__4")]
public sealed virtual Task`1<IUser> AssignLicenseAsync(ICollection`1<AssignedLicense> addLicenses, ICollection`1<Guid> removeLicenses);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.UserFetcher/<ChangePasswordAsync>d__a")]
public sealed virtual Task ChangePasswordAsync(string currentPassword, string newPassword);
    [AsyncStateMachineAttribute("Microsoft.Azure.ActiveDirectory.GraphClient.UserFetcher/<InvalidateAllRefreshTokensAsync>d__f")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Nullable`1<bool>> InvalidateAllRefreshTokensAsync();
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.Utils : object {
    private static Dictionary`2<string, IList`1<PropertyInfo>> entityToKeysMap;
    private static Utils();
    public static string GetUniqueKeyValue(DirectoryObject graphObject);
    public static IDictionary`2<string, object> GetSerializableGraphObject(DirectoryObject graphObject);
    public static Uri GetListUri(DirectoryObject parent, Type objectType, GraphConnection graphConnection, string nextLink, FilterGenerator filter);
    public static Uri GetListUri(Type objectType, GraphConnection graphConnection, string nextLink, FilterGenerator filter);
    public static Uri GetListUri(GraphConnection graphConnection, string nextLink, FilterGenerator filter);
    public static Uri GetRequestUri(GraphConnection graphConnection, string objectId, String[] fragments);
    public static Uri GetRequestUri(GraphConnection graphConnection, string objectId, string nextLink, int top, String[] fragments);
    public static Uri GetRequestUri(GraphConnection graphConnection, Type typeOfEntityObject, string objectId, String[] fragments);
    public static Uri GetRequestUri(GraphConnection graphConnection, Type typeOfEntityObject, string objectId, IList`1<QueryParameter> queryParameters, String[] fragments);
    public static Uri GetRequestUri(GraphConnection graphConnection, Type parentType, string parentObjectId, Type containmentType, string containmentObjectId, String[] fragments);
    public static Uri GetRequestUri(GraphConnection graphConnection, Type typeOfEntityObject, string objectId, string nextLink, int top, IList`1<QueryParameter> queryParameters, String[] fragments);
    private static string getEntityName(Type objectType);
    public static void AddQueryParameter(UriBuilder uriBuilder, string name, string value, bool overwriteExisting);
    public static void BuildQueryFromFilter(UriBuilder uriBuilder, FilterGenerator filter);
    public static string GetFilterQueryString(Expression expression);
    public static string GetTenantId(string accessToken);
    public static string DecodeTenantId();
    public static T GetCustomAttribute(Type sourceType, bool isRequired);
    public static T GetCustomAttribute(PropertyInfo propertyInfo, bool isRequired);
    public static T GetCustomAttribute(MethodInfo methodInfo, bool isRequired);
    public static void ValidateGraphObject(DirectoryObject graphObject, string parameterName);
    public static void ThrowIfNull(object toBeChecked, string parameterName);
    public static void ThrowIfNullOrEmpty(object toBeChecked, string parameterName);
    public static void ThrowArgumentExceptionIfNullOrEmpty(object toBeChecked, string parameterName);
    public static string GetPropertyName(GraphProperty graphProperty);
    public static string GetGraphObjectPropertyName(string propertyName);
    public static string GetLinkName(LinkProperty linkProperty);
    public static LinkAttribute GetLinkAttribute(Type entityType, LinkProperty linkProperty);
    public static LinkAttribute GetLinkAttribute(Type entityType, string linkProperty);
    public static string BinToHexEncode(IEnumerable`1<byte> bytes);
    public static Byte[] HexToBinDecode(string hexString);
}
public class Microsoft.Azure.ActiveDirectory.GraphClient.VerifiedDomain : ComplexTypeBase {
    private string _capabilities;
    private Nullable`1<bool> _default;
    private string _id;
    private Nullable`1<bool> _initial;
    private string _name;
    private string _type;
    [LowerCasePropertyAttribute]
public string Capabilities { get; public set; }
    public Nullable`1<bool> default { get; public set; }
    [LowerCasePropertyAttribute]
public string Id { get; public set; }
    [LowerCasePropertyAttribute]
public Nullable`1<bool> Initial { get; public set; }
    [LowerCasePropertyAttribute]
public string Name { get; public set; }
    [LowerCasePropertyAttribute]
public string Type { get; public set; }
    internal VerifiedDomain(bool dontCreateProxy);
    protected VerifiedDomain(ComplexTypeBase proxy);
    public string get_Capabilities();
    public void set_Capabilities(string value);
    public Nullable`1<bool> get_default();
    public void set_default(Nullable`1<bool> value);
    public string get_Id();
    public void set_Id(string value);
    public Nullable`1<bool> get_Initial();
    public void set_Initial(Nullable`1<bool> value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Type();
    public void set_Type(string value);
}
