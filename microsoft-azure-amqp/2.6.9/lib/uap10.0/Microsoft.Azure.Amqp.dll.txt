internal static class Microsoft.Azure.Amqp.ActionItem : object {
    public static void Schedule(WaitCallback callback, object state);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Azure.Amqp.Amqp.Resources : object {
    private static CultureInfo resourceCulture;
    private static ResourceManagerImpl ResourceManager;
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; }
    internal static string AmqpApplicationProperties { get; }
    internal static string AmqpBufferAlreadyReclaimed { get; }
    internal static string AmqpCannotCloneSentMessage { get; }
    internal static string AmqpCannotResendMessage { get; }
    internal static string AmqpCbsLinkAlreadyOpen { get; }
    internal static string AmqpChannelNotFound { get; }
    internal static string AmqpConnectionInactive { get; }
    internal static string AmqpDeliveryIDInUse { get; }
    internal static string AmqpDuplicateMemberOrder { get; }
    internal static string AmqpDynamicTerminusNotSupported { get; }
    internal static string AmqpEmptyMessageNotAllowed { get; }
    internal static string AmqpEncodingTypeMismatch { get; }
    internal static string AmqpErrorOccurred { get; }
    internal static string AmqpFieldSessionId { get; }
    internal static string AmqpFramingError { get; }
    internal static string AmqpGlobalOpaqueAddressesNotSupported { get; }
    internal static string AmqpHandleExceeded { get; }
    internal static string AmqpHandleInUse { get; }
    internal static string AmqpHandleNotFound { get; }
    internal static string AmqpIdleTimeoutNotSupported { get; }
    internal static string AmqpIllegalOperationState { get; }
    internal static string AmqpInsufficientBufferSize { get; }
    internal static string AmqpInvalidCommand { get; }
    internal static string AmqpInvalidFormatCode { get; }
    internal static string AmqpInvalidLinkAttachAddress { get; }
    internal static string AmqpInvalidLinkAttachScheme { get; }
    internal static string AmqpInvalidMessageBodyType { get; }
    internal static string AmqpInvalidMessageSectionCode { get; }
    internal static string AmqpInvalidPerformativeCode { get; }
    internal static string AmqpInvalidPropertyType { get; }
    internal static string AmqpInvalidPropertyValue { get; }
    internal static string AmqpInvalidPublisherOperationForMessagingSku { get; }
    internal static string AmqpInvalidRemoteIp { get; }
    internal static string AmqpInvalidReOpenOperation { get; }
    internal static string AmqpInvalidSequenceNumberComparison { get; }
    internal static string AmqpInvalidType { get; }
    internal static string AmqpLinkNameInUse { get; }
    internal static string AmqpManagementLinkAlreadyOpen { get; }
    internal static string AmqpManagementOperationFailed { get; }
    internal static string AmqpMessageSizeExceeded { get; }
    internal static string AmqpMissingOrInvalidProperty { get; }
    internal static string AmqpMissingProperty { get; }
    internal static string AmqpNotSupportMechanism { get; }
    internal static string AmqpNoValidAddressForHost { get; }
    internal static string AmqpObjectAborted { get; }
    internal static string AmqpOperationNotSupported { get; }
    internal static string AmqpProtocolVersionNotSet { get; }
    internal static string AmqpProtocolVersionNotSupported { get; }
    internal static string AmqpPutTokenAudienceMismatch { get; }
    internal static string AmqpPutTokenFailed { get; }
    internal static string AmqpRequiredFieldNotSet { get; }
    internal static string AmqpTimeout { get; }
    internal static string AmqpTransferLimitExceeded { get; }
    internal static string AmqpTransportClosed { get; }
    internal static string AmqpTransportNotSecure { get; }
    internal static string AmqpTransportUpgradeNotAllowed { get; }
    internal static string AmqpUnknownDescriptor { get; }
    internal static string AmqpUnopenObject { get; }
    internal static string AmqpUnsupportedTokenType { get; }
    private static Resources();
    internal static CultureInfo get_Culture();
    internal static string get_AmqpApplicationProperties();
    internal static string get_AmqpBufferAlreadyReclaimed();
    internal static string get_AmqpCannotCloneSentMessage();
    internal static string get_AmqpCannotResendMessage();
    internal static string get_AmqpCbsLinkAlreadyOpen();
    internal static string get_AmqpChannelNotFound();
    internal static string get_AmqpConnectionInactive();
    internal static string get_AmqpDeliveryIDInUse();
    internal static string get_AmqpDuplicateMemberOrder();
    internal static string get_AmqpDynamicTerminusNotSupported();
    internal static string get_AmqpEmptyMessageNotAllowed();
    internal static string get_AmqpEncodingTypeMismatch();
    internal static string get_AmqpErrorOccurred();
    internal static string get_AmqpFieldSessionId();
    internal static string get_AmqpFramingError();
    internal static string get_AmqpGlobalOpaqueAddressesNotSupported();
    internal static string get_AmqpHandleExceeded();
    internal static string get_AmqpHandleInUse();
    internal static string get_AmqpHandleNotFound();
    internal static string get_AmqpIdleTimeoutNotSupported();
    internal static string get_AmqpIllegalOperationState();
    internal static string get_AmqpInsufficientBufferSize();
    internal static string get_AmqpInvalidCommand();
    internal static string get_AmqpInvalidFormatCode();
    internal static string get_AmqpInvalidLinkAttachAddress();
    internal static string get_AmqpInvalidLinkAttachScheme();
    internal static string get_AmqpInvalidMessageBodyType();
    internal static string get_AmqpInvalidMessageSectionCode();
    internal static string get_AmqpInvalidPerformativeCode();
    internal static string get_AmqpInvalidPropertyType();
    internal static string get_AmqpInvalidPropertyValue();
    internal static string get_AmqpInvalidPublisherOperationForMessagingSku();
    internal static string get_AmqpInvalidRemoteIp();
    internal static string get_AmqpInvalidReOpenOperation();
    internal static string get_AmqpInvalidSequenceNumberComparison();
    internal static string get_AmqpInvalidType();
    internal static string get_AmqpLinkNameInUse();
    internal static string get_AmqpManagementLinkAlreadyOpen();
    internal static string get_AmqpManagementOperationFailed();
    internal static string get_AmqpMessageSizeExceeded();
    internal static string get_AmqpMissingOrInvalidProperty();
    internal static string get_AmqpMissingProperty();
    internal static string get_AmqpNotSupportMechanism();
    internal static string get_AmqpNoValidAddressForHost();
    internal static string get_AmqpObjectAborted();
    internal static string get_AmqpOperationNotSupported();
    internal static string get_AmqpProtocolVersionNotSet();
    internal static string get_AmqpProtocolVersionNotSupported();
    internal static string get_AmqpPutTokenAudienceMismatch();
    internal static string get_AmqpPutTokenFailed();
    internal static string get_AmqpRequiredFieldNotSet();
    internal static string get_AmqpTimeout();
    internal static string get_AmqpTransferLimitExceeded();
    internal static string get_AmqpTransportClosed();
    internal static string get_AmqpTransportNotSecure();
    internal static string get_AmqpTransportUpgradeNotAllowed();
    internal static string get_AmqpUnknownDescriptor();
    internal static string get_AmqpUnopenObject();
    internal static string get_AmqpUnsupportedTokenType();
}
public class Microsoft.Azure.Amqp.AmqpCbsLink : object {
    private AmqpConnection connection;
    private CbsSingleton cbsSingleton;
    public AmqpCbsLink(AmqpConnection connection);
    public void Close();
    public Task`1<DateTime> SendTokenAsync(ICbsTokenProvider tokenProvider, Uri namespaceAddress, string audience, string resource, String[] requiredClaims, TimeSpan timeout);
    public Task`1<DateTime> SendTokenAsync(ICbsTokenProvider tokenProvider, Uri namespaceAddress, string audience, string resource, String[] requiredClaims, CancellationToken cancellationToken);
    public IAsyncResult BeginSendToken(ICbsTokenProvider tokenProvider, Uri namespaceAddress, string audience, string resource, String[] requiredClaims, TimeSpan timeout, AsyncCallback callback, object state);
    public DateTime EndSendToken(IAsyncResult result);
    private static void ThrowIfNull(T arg, string name);
    private IAsyncResult BeginSendToken(ICbsTokenProvider tokenProvider, Uri namespaceAddress, string audience, string resource, String[] requiredClaims, TimeSpan timeout, CancellationToken cancellationToken, AsyncCallback callback, object state);
}
public static class Microsoft.Azure.Amqp.AmqpCodec : object {
    private static Dictionary`2<string, Func`1<AmqpDescribed>> knownTypesByName;
    private static Dictionary`2<ulong, Func`1<AmqpDescribed>> knownTypesByCode;
    public static int MinimumFrameDecodeSize { get; }
    private static AmqpCodec();
    public static int get_MinimumFrameDecodeSize();
    public static int GetFrameSize(ByteBuffer buffer);
    public static void RegisterKnownTypes(string name, ulong code, Func`1<AmqpDescribed> ctor);
    public static int GetBooleanEncodeSize(Nullable`1<bool> value);
    public static int GetUByteEncodeSize(Nullable`1<byte> value);
    public static int GetUShortEncodeSize(Nullable`1<ushort> value);
    public static int GetUIntEncodeSize(Nullable`1<UInt32> value);
    public static int GetULongEncodeSize(Nullable`1<ulong> value);
    public static int GetByteEncodeSize(Nullable`1<sbyte> value);
    public static int GetShortEncodeSize(Nullable`1<short> value);
    public static int GetIntEncodeSize(Nullable`1<int> value);
    public static int GetLongEncodeSize(Nullable`1<long> value);
    public static int GetFloatEncodeSize(Nullable`1<float> value);
    public static int GetDoubleEncodeSize(Nullable`1<double> value);
    public static int GetCharEncodeSize(Nullable`1<char> value);
    public static int GetTimeStampEncodeSize(Nullable`1<DateTime> value);
    public static int GetUuidEncodeSize(Nullable`1<Guid> value);
    public static int GetBinaryEncodeSize(ArraySegment`1<byte> value);
    public static int GetSymbolEncodeSize(AmqpSymbol value);
    public static int GetStringEncodeSize(string value);
    public static int GetListEncodeSize(IList value);
    public static int GetMapEncodeSize(AmqpMap value);
    public static int GetArrayEncodeSize(T[] value);
    public static int GetSerializableEncodeSize(IAmqpSerializable value);
    public static int GetMultipleEncodeSize(Multiple`1<T> value);
    public static int GetObjectEncodeSize(object value);
    public static void EncodeBoolean(Nullable`1<bool> data, ByteBuffer buffer);
    public static void EncodeUByte(Nullable`1<byte> data, ByteBuffer buffer);
    public static void EncodeUShort(Nullable`1<ushort> data, ByteBuffer buffer);
    public static void EncodeUInt(Nullable`1<UInt32> data, ByteBuffer buffer);
    public static void EncodeULong(Nullable`1<ulong> data, ByteBuffer buffer);
    public static void EncodeByte(Nullable`1<sbyte> data, ByteBuffer buffer);
    public static void EncodeShort(Nullable`1<short> data, ByteBuffer buffer);
    public static void EncodeInt(Nullable`1<int> data, ByteBuffer buffer);
    public static void EncodeLong(Nullable`1<long> data, ByteBuffer buffer);
    public static void EncodeChar(Nullable`1<char> data, ByteBuffer buffer);
    public static void EncodeFloat(Nullable`1<float> data, ByteBuffer buffer);
    public static void EncodeDouble(Nullable`1<double> data, ByteBuffer buffer);
    public static void EncodeDecimal(Nullable`1<decimal> data, ByteBuffer buffer);
    public static void EncodeTimeStamp(Nullable`1<DateTime> data, ByteBuffer buffer);
    public static void EncodeUuid(Nullable`1<Guid> data, ByteBuffer buffer);
    public static void EncodeBinary(ArraySegment`1<byte> data, ByteBuffer buffer);
    public static void EncodeString(string data, ByteBuffer buffer);
    public static void EncodeSymbol(AmqpSymbol data, ByteBuffer buffer);
    public static void EncodeList(IList data, ByteBuffer buffer);
    public static void EncodeMap(AmqpMap data, ByteBuffer buffer);
    public static void EncodeArray(T[] data, ByteBuffer buffer);
    public static void EncodeSerializable(IAmqpSerializable data, ByteBuffer buffer);
    public static void EncodeMultiple(Multiple`1<T> data, ByteBuffer buffer);
    public static void EncodeObject(object data, ByteBuffer buffer);
    public static Nullable`1<bool> DecodeBoolean(ByteBuffer buffer);
    public static Nullable`1<byte> DecodeUByte(ByteBuffer buffer);
    public static Nullable`1<ushort> DecodeUShort(ByteBuffer buffer);
    public static Nullable`1<UInt32> DecodeUInt(ByteBuffer buffer);
    public static Nullable`1<ulong> DecodeULong(ByteBuffer buffer);
    public static Nullable`1<sbyte> DecodeByte(ByteBuffer buffer);
    public static Nullable`1<short> DecodeShort(ByteBuffer buffer);
    public static Nullable`1<int> DecodeInt(ByteBuffer buffer);
    public static Nullable`1<long> DecodeLong(ByteBuffer buffer);
    public static Nullable`1<float> DecodeFloat(ByteBuffer buffer);
    public static Nullable`1<double> DecodeDouble(ByteBuffer buffer);
    public static Nullable`1<decimal> DecodeDecimal(ByteBuffer buffer);
    public static Nullable`1<char> DecodeChar(ByteBuffer buffer);
    public static Nullable`1<DateTime> DecodeTimeStamp(ByteBuffer buffer);
    public static Nullable`1<Guid> DecodeUuid(ByteBuffer buffer);
    public static ArraySegment`1<byte> DecodeBinary(ByteBuffer buffer);
    public static string DecodeString(ByteBuffer buffer);
    public static AmqpSymbol DecodeSymbol(ByteBuffer buffer);
    public static IList DecodeList(ByteBuffer buffer);
    public static AmqpMap DecodeMap(ByteBuffer buffer);
    public static T DecodeMap(ByteBuffer buffer);
    public static T[] DecodeArray(ByteBuffer buffer);
    public static Multiple`1<T> DecodeMultiple(ByteBuffer buffer);
    public static object DecodeObject(ByteBuffer buffer);
    public static AmqpDescribed DecodeAmqpDescribed(ByteBuffer buffer);
    public static AmqpDescribed DecodeAmqpDescribed(ByteBuffer buffer, Dictionary`2<string, Func`1<AmqpDescribed>> byName, Dictionary`2<ulong, Func`1<AmqpDescribed>> byCode);
    public static AmqpDescribed CreateAmqpDescribed(ByteBuffer buffer);
    public static AmqpDescribed CreateAmqpDescribed(ByteBuffer buffer, Dictionary`2<string, Func`1<AmqpDescribed>> byName, Dictionary`2<ulong, Func`1<AmqpDescribed>> byCode);
    public static T DecodeKnownType(ByteBuffer buffer);
}
public class Microsoft.Azure.Amqp.AmqpConnection : AmqpConnectionBase {
    private static EventHandler onSessionClosed;
    private static AmqpConnectionFactory defaultFactory;
    private bool isInitiator;
    private ProtocolHeader initialHeader;
    private AmqpSettings amqpSettings;
    private HandleTable`1<AmqpSession> sessionsByLocalHandle;
    private HandleTable`1<AmqpSession> sessionsByRemoteHandle;
    private HeartBeat heartBeat;
    [CompilerGeneratedAttribute]
private ISessionFactory <SessionFactory>k__BackingField;
    private KeyedByTypeCollection`1<object> extensions;
    public static AmqpConnectionFactory Factory { get; }
    public AmqpSettings AmqpSettings { get; }
    public ISessionFactory SessionFactory { get; public set; }
    public KeyedByTypeCollection`1<object> Extensions { get; }
    public bool IsInitiator { get; }
    public IEnumerable`1<AmqpSession> Sessions { get; }
    public AmqpConnection(TransportBase transport, AmqpSettings amqpSettings, AmqpConnectionSettings connectionSettings);
    public AmqpConnection(TransportBase transport, ProtocolHeader protocolHeader, AmqpSettings amqpSettings, AmqpConnectionSettings connectionSettings);
    public AmqpConnection(TransportBase transport, ProtocolHeader protocolHeader, bool isInitiator, AmqpSettings amqpSettings, AmqpConnectionSettings connectionSettings);
    protected AmqpConnection(string type, TransportBase transport, ProtocolHeader protocolHeader, bool isInitiator, AmqpSettings amqpSettings, AmqpConnectionSettings connectionSettings);
    private static AmqpConnection();
    public static AmqpConnectionFactory get_Factory();
    public AmqpSettings get_AmqpSettings();
    [CompilerGeneratedAttribute]
public ISessionFactory get_SessionFactory();
    [CompilerGeneratedAttribute]
public void set_SessionFactory(ISessionFactory value);
    public KeyedByTypeCollection`1<object> get_Extensions();
    public bool get_IsInitiator();
    public IEnumerable`1<AmqpSession> get_Sessions();
    public AmqpSession CreateSession(AmqpSessionSettings sessionSettings);
    public void SendCommand(Performative command, ushort channel, ArraySegment`1[] payload);
    protected virtual bool OpenInternal();
    protected virtual bool CloseInternal();
    protected virtual void AbortInternal();
    protected virtual void OnProtocolHeader(ProtocolHeader header);
    protected virtual void OnFrameBuffer(ByteBuffer buffer);
    protected virtual void HandleIoEvent(IoEvent ioEvent);
    private bool SessionFrameAllowed();
    private void CloseSessions(bool abort);
    private void ProcessFrame(Frame frame);
    private void SendProtocolHeader(ProtocolHeader header);
    private void SendOpen();
    private void SendClose();
    private void OnReceiveOpen(Open open);
    private void OnReceiveClose(Close close);
    private void OnReceiveSessionFrame(Frame frame);
    private void Negotiate(Open open);
    private sealed virtual override AmqpSession Microsoft.Azure.Amqp.ISessionFactory.CreateSession(AmqpConnection connection, AmqpSessionSettings sessionSettings);
    public void AddSession(AmqpSession session, Nullable`1<ushort> channel);
    private static void OnSessionClosed(object sender, EventArgs e);
}
public abstract class Microsoft.Azure.Amqp.AmqpConnectionBase : AmqpObject {
    private AmqpConnectionSettings settings;
    private AsyncIO asyncIO;
    private IAmqpUsageMeter usageMeter;
    public AmqpConnectionSettings Settings { get; }
    public IPrincipal Principal { get; }
    public string LocalEndpoint { get; }
    public string RemoteEndpoint { get; }
    public IAmqpUsageMeter UsageMeter { get; public set; }
    protected AsyncIO AsyncIO { get; }
    internal TimeSpan OperationTimeout { get; }
    protected AmqpConnectionBase(string type, TransportBase transport, AmqpConnectionSettings settings, bool isInitiator);
    public AmqpConnectionSettings get_Settings();
    public IPrincipal get_Principal();
    public string get_LocalEndpoint();
    public string get_RemoteEndpoint();
    public IAmqpUsageMeter get_UsageMeter();
    public void set_UsageMeter(IAmqpUsageMeter value);
    protected AsyncIO get_AsyncIO();
    internal virtual TimeSpan get_OperationTimeout();
    public void SendDatablock(IAmqpSerializable dataBlock);
    public void SendBuffer(ByteBuffer buffer);
    public void SendBuffers(ByteBuffer[] buffers);
    protected abstract virtual void OnProtocolHeader(ProtocolHeader header);
    protected abstract virtual void OnFrameBuffer(ByteBuffer buffer);
    protected virtual void HandleIoEvent(IoEvent ioEvent);
    private sealed virtual override void Microsoft.Azure.Amqp.ITransportMonitor.OnTransportWrite(int bufferSize, int writeSize, long queueSize, long latencyTicks);
    private sealed virtual override void Microsoft.Azure.Amqp.ITransportMonitor.OnTransportRead(int bufferSize, int readSize, int cacheHits, long latencyTicks);
    private sealed virtual override void Microsoft.Azure.Amqp.IIoHandler.OnReceiveBuffer(ByteBuffer buffer);
    private sealed virtual override void Microsoft.Azure.Amqp.IIoHandler.OnIoFault(Exception exception);
    private sealed virtual override void Microsoft.Azure.Amqp.IIoHandler.OnIoEvent(IoEvent ioEvent, long queueSize);
    private void OnReceiveFrameBuffer(ByteBuffer buffer);
}
public class Microsoft.Azure.Amqp.AmqpConnectionFactory : object {
    private TlsTransportSettings tlsSettings;
    public TlsTransportSettings TlsSettings { get; }
    public TlsTransportSettings get_TlsSettings();
    public Task`1<AmqpConnection> OpenConnectionAsync(string address);
    public Task`1<AmqpConnection> OpenConnectionAsync(string address, TimeSpan timeout);
    public Task`1<AmqpConnection> OpenConnectionAsync(Uri addressUri, TimeSpan timeout);
    public Task`1<AmqpConnection> OpenConnectionAsync(Uri addressUri, SaslHandler saslHandler, TimeSpan timeout);
    public Task`1<AmqpConnection> OpenConnectionAsync(Uri addressUri, CancellationToken cancellationToken);
    public Task`1<AmqpConnection> OpenConnectionAsync(Uri addressUri, SaslHandler saslHandler, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Amqp.AmqpConnectionFactory/<OpenConnectionAsync>d__9")]
private Task`1<AmqpConnection> OpenConnectionAsync(Uri addressUri, string userInfo, SaslHandler saslHandler, TimeSpan timeout, CancellationToken cancellationToken);
}
public class Microsoft.Azure.Amqp.AmqpConnectionSettings : Open {
    [CompilerGeneratedAttribute]
private string <RemoteContainerId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteHostName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SendBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReceiveBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreMissingSessions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WriteBufferFullLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WriteBufferEmptyLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MinIdleTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <OperationTimeout>k__BackingField;
    public string RemoteContainerId { get; public set; }
    public string RemoteHostName { get; public set; }
    public int SendBufferSize { get; public set; }
    public int ReceiveBufferSize { get; public set; }
    public bool IgnoreMissingSessions { get; public set; }
    public int WriteBufferFullLimit { get; public set; }
    public int WriteBufferEmptyLimit { get; public set; }
    public UInt32 MinIdleTimeout { get; public set; }
    public TimeSpan OperationTimeout { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RemoteContainerId();
    [CompilerGeneratedAttribute]
public void set_RemoteContainerId(string value);
    [CompilerGeneratedAttribute]
public string get_RemoteHostName();
    [CompilerGeneratedAttribute]
public void set_RemoteHostName(string value);
    [CompilerGeneratedAttribute]
public int get_SendBufferSize();
    [CompilerGeneratedAttribute]
public void set_SendBufferSize(int value);
    [CompilerGeneratedAttribute]
public int get_ReceiveBufferSize();
    [CompilerGeneratedAttribute]
public void set_ReceiveBufferSize(int value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreMissingSessions();
    [CompilerGeneratedAttribute]
public void set_IgnoreMissingSessions(bool value);
    [CompilerGeneratedAttribute]
public int get_WriteBufferFullLimit();
    [CompilerGeneratedAttribute]
public void set_WriteBufferFullLimit(int value);
    [CompilerGeneratedAttribute]
public int get_WriteBufferEmptyLimit();
    [CompilerGeneratedAttribute]
public void set_WriteBufferEmptyLimit(int value);
    [CompilerGeneratedAttribute]
public UInt32 get_MinIdleTimeout();
    [CompilerGeneratedAttribute]
public void set_MinIdleTimeout(UInt32 value);
    [CompilerGeneratedAttribute]
public TimeSpan get_OperationTimeout();
    [CompilerGeneratedAttribute]
public void set_OperationTimeout(TimeSpan value);
    public AmqpConnectionSettings Clone();
}
public static class Microsoft.Azure.Amqp.AmqpConstants : object {
    public static string Apache;
    public static string Vendor;
    public static string SchemeAmqp;
    public static string SchemeAmqps;
    public static string TimeSpanName;
    public static string UriName;
    public static string DateTimeOffsetName;
    public static string OpenErrorName;
    public static string BadCommand;
    public static string AddRule;
    public static string DeleteRule;
    public static string GetMessageSessions;
    public static string Publish;
    public static string Consume;
    public static string Dispose;
    public static AmqpSymbol BatchedMessageFormat;
    public static AmqpSymbol SimpleWebTokenPropertyName;
    public static AmqpSymbol HostName;
    public static AmqpSymbol NetworkHost;
    public static AmqpSymbol Port;
    public static AmqpSymbol Address;
    public static AmqpSymbol PublisherId;
    public static AmqpSymbol IoEvent;
    public static ArraySegment`1<byte> NullBinary;
    public static ArraySegment`1<byte> EmptyBinary;
    public static AmqpVersion DefaultProtocolVersion;
    public static DateTime StartOfEpoch;
    public static DateTime MaxAbsoluteExpiryTime;
    public static Accepted AcceptedOutcome;
    public static Released ReleasedOutcome;
    public static Rejected RejectedOutcome;
    public static Rejected RejectedNotFoundOutcome;
    public static Received ReceivedOutcome;
    public static UInt32 AmqpBatchedMessageFormat;
    public static UInt32 AmqpMessageFormat;
    public static int DefaultPort;
    public static int DefaultSecurePort;
    public static int ProtocolHeaderSize;
    public static int TransportBufferSize;
    public static int MinMaxFrameSize;
    public static UInt32 DefaultMaxFrameSize;
    public static ushort DefaultMaxConcurrentChannels;
    public static UInt32 DefaultMaxLinkHandles;
    public static UInt32 DefaultHeartBeatInterval;
    public static UInt32 MinimumHeartBeatIntervalMs;
    public static TimeSpan DefaultTimeout;
    public static UInt32 DefaultWindowSize;
    public static UInt32 DefaultLinkCredit;
    public static UInt32 DefaultNextTransferId;
    public static int SegmentSize;
    public static byte AmqpFormat;
    internal static List`1<AmqpMessage> EmptyMessages;
    private static AmqpConstants();
}
internal static class Microsoft.Azure.Amqp.AmqpDebug : object {
    [ConditionalAttribute("AMQP_DEBUG")]
public static void Log(object source, bool send, Performative command);
    [ConditionalAttribute("AMQP_DEBUG")]
public static void Log(object source, bool send, ulong code, UInt32 p1, UInt32 p2);
    [ConditionalAttribute("AMQP_DEBUG")]
public static void Dump(object source);
}
public static class Microsoft.Azure.Amqp.AmqpErrorCode : object {
    public static AmqpSymbol InternalError;
    public static AmqpSymbol NotFound;
    public static AmqpSymbol UnauthorizedAccess;
    public static AmqpSymbol DecodeError;
    public static AmqpSymbol ResourceLimitExceeded;
    public static AmqpSymbol NotAllowed;
    public static AmqpSymbol InvalidField;
    public static AmqpSymbol NotImplemented;
    public static AmqpSymbol ResourceLocked;
    public static AmqpSymbol PreconditionFailed;
    public static AmqpSymbol ResourceDeleted;
    public static AmqpSymbol IllegalState;
    public static AmqpSymbol FrameSizeTooSmall;
    public static AmqpSymbol ConnectionForced;
    public static AmqpSymbol FramingError;
    public static AmqpSymbol ConnectionRedirect;
    public static AmqpSymbol WindowViolation;
    public static AmqpSymbol ErrantLink;
    public static AmqpSymbol HandleInUse;
    public static AmqpSymbol UnattachedHandle;
    public static AmqpSymbol DetachForced;
    public static AmqpSymbol TransferLimitExceeded;
    public static AmqpSymbol MessageSizeExceeded;
    public static AmqpSymbol LinkRedirect;
    public static AmqpSymbol Stolen;
    public static AmqpSymbol TransactionUnknownId;
    public static AmqpSymbol TransactionRollback;
    public static AmqpSymbol TransactionTimeout;
    private static AmqpErrorCode();
}
[EventSourceAttribute]
internal class Microsoft.Azure.Amqp.AmqpEventSource : EventSource {
    public static AmqpEventSource Log;
    private static AmqpEventSource();
    [EventAttribute("1")]
public void AmqpOpenConnection(string source, string connection);
    [EventAttribute("2")]
public void AmqpCloseConnection(string source, string connection, bool abort);
    [EventAttribute("3")]
public void AmqpAddSession(string source, string session, ushort localChannel, ushort remoteChannel);
    [EventAttribute("4")]
public void AmqpAttachLink(string connection, string session, string link, UInt32 localHandle, UInt32 remoteHandle, string linkName, string role, string address);
    [EventAttribute("5")]
public void AmqpDeliveryNotFound(string source, string deliveryTag);
    [EventAttribute("6")]
public void AmqpDispose(string source, UInt32 deliveryId, bool settled, string state);
    [EventAttribute("7")]
public void AmqpDynamicBufferSizeChange(string source, string type, int oldSize, int newSize);
    [EventAttribute("8")]
public void AmqpInsecureTransport(string source, string transport, bool isSecure, bool isAuthenticated);
    [EventAttribute("9")]
public void AmqpLinkDetach(string source, string name, UInt32 handle, string action, string error);
    [EventAttribute("10")]
public void AmqpListenSocketAcceptError(string source, bool willRetry, string error);
    [EventAttribute("11")]
public void AmqpLogError(string source, string operation, string message);
    [EventAttribute("12")]
public void AmqpLogOperationInformational(string source, TraceOperation operation, string detail);
    [EventAttribute("13")]
public void AmqpLogOperationVerbose(string source, TraceOperation operation, string detail);
    [EventAttribute("14")]
public void AmqpMissingHandle(string source, string type, UInt32 handle);
    [EventAttribute("15")]
public void AmqpOpenEntityFailed(string source, string obj, string name, string entityName, string error);
    [EventAttribute("16")]
public void AmqpOpenEntitySucceeded(string source, string obj, string name, string entityName);
    [EventAttribute("17")]
public void AmqpReceiveMessage(string source, UInt32 deliveryId, int transferCount);
    [EventAttribute("18")]
public void AmqpRemoveLink(string connection, string session, string link, UInt32 localHandle, UInt32 remoteHandle, string linkName);
    [EventAttribute("19")]
public void AmqpRemoveSession(string connection, string session, ushort localChannel, ushort remoteChannel);
    [EventAttribute("20")]
public void AmqpSessionWindowClosed(string source, int nextId);
    [EventAttribute("21")]
public void AmqpStateTransition(string source, string operation, string fromState, string toState);
    [EventAttribute("22")]
public void AmqpUpgradeTransport(string source, string from, string to);
    [EventAttribute("23")]
public void AmqpAbortThrowingException(string exception);
    [EventAttribute("24")]
public void AmqpCacheMessage(string source, UInt32 deliveryId, int count, bool isPrefecthingBySize, long totalCacheSizeInBytes, UInt32 totalLinkCredit, UInt32 linkCredit);
    [EventAttribute("25")]
public void AmqpIoEvent(string source, int ioEvent, long queueSize);
    [EventAttribute("26")]
public void AmqpHandleException(string exception, string traceInfo);
    [EventAttribute("27")]
public void AmqpSentMessage(string source, UInt32 deliveryId, long bytes);
    [NonEventAttribute]
private void WriteEvent(int eventId, IntPtr a1, int size1, IntPtr a2, int size2);
    [NonEventAttribute]
private void WriteEvent(int eventId, IntPtr a1, int size1, IntPtr a2, int size2, IntPtr a3, int size3);
    [NonEventAttribute]
private void WriteEvent(int eventId, IntPtr a1, int size1, IntPtr a2, int size2, IntPtr a3, int size3, IntPtr a4, int size4);
    [NonEventAttribute]
private void WriteEvent(int eventId, IntPtr a1, int size1, IntPtr a2, int size2, IntPtr a3, int size3, IntPtr a4, int size4, IntPtr a5, int size5);
    [NonEventAttribute]
private void WriteEvent(int eventId, IntPtr a1, int size1, IntPtr a2, int size2, IntPtr a3, int size3, IntPtr a4, int size4, IntPtr a5, int size5, IntPtr a6, int size6);
    [NonEventAttribute]
private void WriteEvent(int eventId, IntPtr a1, int size1, IntPtr a2, int size2, IntPtr a3, int size3, IntPtr a4, int size4, IntPtr a5, int size5, IntPtr a6, int size6, IntPtr a7, int size7);
    [NonEventAttribute]
private void WriteEvent(int eventId, IntPtr a1, int size1, IntPtr a2, int size2, IntPtr a3, int size3, IntPtr a4, int size4, IntPtr a5, int size5, IntPtr a6, int size6, IntPtr a7, int size7, IntPtr a8, int size8);
}
public class Microsoft.Azure.Amqp.AmqpException : Exception {
    [CompilerGeneratedAttribute]
private Error <Error>k__BackingField;
    public Error Error { get; private set; }
    public AmqpException(Error error);
    public AmqpException(AmqpSymbol condition, string description);
    [CompilerGeneratedAttribute]
public Error get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(Error value);
    public static AmqpException FromError(Error error);
}
public abstract class Microsoft.Azure.Amqp.AmqpLink : AmqpObject {
    private static AsyncCallback onProviderLinkOpened;
    private object syncRoot;
    private AmqpLinkSettings settings;
    private Outcome defaultOutcome;
    private Dictionary`2<ArraySegment`1<byte>, Delivery> unsettledMap;
    private SerializedWorker`1<Delivery> inflightDeliveries;
    private int references;
    private SequenceNumber deliveryCount;
    private UInt32 available;
    private UInt32 linkCredit;
    private bool drain;
    private UInt32 needFlowCount;
    private int sendingFlow;
    private Nullable`1<UInt32> tempTotalCredit;
    private UInt32 bufferedCredit;
    [CompilerGeneratedAttribute]
private EventHandler PropertyReceived;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <RemoteHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpSession <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MaxFrameSize>k__BackingField;
    public string Name { get; }
    public Nullable`1<UInt32> LocalHandle { get; public set; }
    public Nullable`1<UInt32> RemoteHandle { get; public set; }
    public AmqpSession Session { get; private set; }
    public AmqpLinkSettings Settings { get; }
    public bool IsReceiver { get; }
    public UInt32 LinkCredit { get; protected set; }
    public UInt32 Available { get; }
    public UInt32 MaxFrameSize { get; public set; }
    protected Dictionary`2<ArraySegment`1<byte>, Delivery> UnsettledMap { get; }
    protected object SyncRoot { get; }
    internal TimeSpan OperationTimeout { get; }
    internal bool Drain { get; }
    protected AmqpLink(AmqpSession session, AmqpLinkSettings linkSettings);
    protected AmqpLink(string type, AmqpSession session, AmqpLinkSettings linkSettings);
    private static AmqpLink();
    [CompilerGeneratedAttribute]
internal void add_PropertyReceived(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_PropertyReceived(EventHandler value);
    public string get_Name();
    public Nullable`1<UInt32> get_LocalHandle();
    public void set_LocalHandle(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_RemoteHandle();
    [CompilerGeneratedAttribute]
public void set_RemoteHandle(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public AmqpSession get_Session();
    [CompilerGeneratedAttribute]
private void set_Session(AmqpSession value);
    public AmqpLinkSettings get_Settings();
    public bool get_IsReceiver();
    public UInt32 get_LinkCredit();
    protected void set_LinkCredit(UInt32 value);
    public virtual UInt32 get_Available();
    [CompilerGeneratedAttribute]
public UInt32 get_MaxFrameSize();
    [CompilerGeneratedAttribute]
public void set_MaxFrameSize(UInt32 value);
    protected Dictionary`2<ArraySegment`1<byte>, Delivery> get_UnsettledMap();
    protected object get_SyncRoot();
    internal virtual TimeSpan get_OperationTimeout();
    internal bool get_Drain();
    public void AttachTo(AmqpSession session);
    public void ProcessFrame(Frame frame);
    public void OnFlow(Flow flow);
    public bool TrySendDelivery(Delivery delivery);
    public void ForceSendDelivery(Delivery delivery);
    public void DisposeDelivery(Delivery delivery, bool settled, DeliveryState state);
    public void DisposeDelivery(Delivery delivery, bool settled, DeliveryState state, bool noFlush);
    public bool DisposeDelivery(ArraySegment`1<byte> deliveryTag, bool settled, DeliveryState state, bool batchable);
    public void SetTotalLinkCredit(UInt32 totalCredit, bool applyNow, bool updateAutoFlow);
    public void IssueCredit(UInt32 credit, bool drain, ArraySegment`1<byte> txnId);
    public void NotifySessionCredit(int credit);
    public void OnDisposeDelivery(Delivery delivery);
    public void CompleteDelivery(ArraySegment`1<byte> deliveryTag);
    public void SendProperties(Fields properties);
    public UInt32 ProcessFlow(Flow flow);
    public abstract virtual bool CreateDelivery(Transfer transfer, Delivery& delivery);
    internal virtual void OnIoEvent(IoEvent ioEvent);
    private sealed virtual override bool Microsoft.Azure.Amqp.IWorkDelegate<Microsoft.Azure.Amqp.Delivery>.Invoke(Delivery delivery);
    protected virtual bool OpenInternal();
    protected virtual bool CloseInternal();
    protected virtual void AbortInternal();
    protected void SendFlow(bool echo);
    protected void ProcessTransfer(Transfer transfer, Frame rawFrame, Delivery delivery, bool newDelivery);
    protected virtual void OnReceiveFlow(Flow flow);
    protected abstract virtual void OnProcessTransfer(Delivery delivery, Transfer transfer, Frame rawFrame);
    protected abstract virtual void OnCreditAvailable(int session, UInt32 link, bool drain, ArraySegment`1<byte> txnId);
    protected abstract virtual void OnDisposeDeliveryInternal(Delivery delivery);
    protected virtual void OnReceiveStateOpenSent(Attach attach);
    protected bool SendDelivery(Delivery delivery);
    protected bool DoActionIfNotClosed(Func`6<AmqpLink, T1, T2, T3, T4, bool> action, T1 p1, T2 p2, T3 p3, T4 p4);
    private void StartSendDelivery(Delivery delivery);
    private void DisposeDeliveryInternal(Delivery delivery, bool settled, DeliveryState state, bool noFlush);
    private void OnDeliverySettled();
    private AmqpObjectState SendAttach();
    private AmqpObjectState SendDetach();
    private void OnReceiveAttach(Attach attach);
    private void OnReceiveDetach(Detach detach);
    private void OnReceiveTransfer(Transfer transfer, Frame rawFrame);
    private ArraySegment`1<byte> GetTxnIdFromFlow(Flow flow);
    private Error Negotiate(Attach attach);
    private static void OnProviderLinkOpened(IAsyncResult result);
    private void OnLinkOpenFailed(Exception exception);
    private bool ApplyTempTotalLinkCredit();
    private void SendFlow(bool echo, bool drain, ArraySegment`1<byte> txnId);
    protected void SendFlow(bool echo, bool drain, Fields properties);
    private void SendFlowInternal(bool echo, bool drain, Fields properties);
    [CompilerGeneratedAttribute]
private bool <CloseInternal>b__73_0();
}
public class Microsoft.Azure.Amqp.AmqpLinkSettings : Attach {
    private UInt32 linkCredit;
    private TimeSpan operationTimeout;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <TotalCacheSizeInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FlowThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoSendFlow>k__BackingField;
    public UInt32 TotalLinkCredit { get; public set; }
    public Nullable`1<long> TotalCacheSizeInBytes { get; public set; }
    public int FlowThreshold { get; public set; }
    public bool AutoSendFlow { get; public set; }
    public SettleMode SettleType { get; public set; }
    public TimeSpan OperationTimeout { get; public set; }
    internal TimeSpan OperationTimeoutInternal { get; }
    public UInt32 get_TotalLinkCredit();
    public void set_TotalLinkCredit(UInt32 value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_TotalCacheSizeInBytes();
    [CompilerGeneratedAttribute]
public void set_TotalCacheSizeInBytes(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public int get_FlowThreshold();
    [CompilerGeneratedAttribute]
public void set_FlowThreshold(int value);
    [CompilerGeneratedAttribute]
public bool get_AutoSendFlow();
    [CompilerGeneratedAttribute]
public void set_AutoSendFlow(bool value);
    public SettleMode get_SettleType();
    public void set_SettleType(SettleMode value);
    public TimeSpan get_OperationTimeout();
    public void set_OperationTimeout(TimeSpan value);
    internal TimeSpan get_OperationTimeoutInternal();
    public static AmqpLinkSettings Create(Attach attach);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class Microsoft.Azure.Amqp.AmqpMessage : Delivery {
    private Header header;
    private DeliveryAnnotations deliveryAnnotations;
    private MessageAnnotations messageAnnotations;
    private Properties properties;
    private ApplicationProperties applicationProperties;
    private Footer footer;
    private SectionFlag sectionFlags;
    private bool disposed;
    [CompilerGeneratedAttribute]
private long <BodySectionOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BodySectionLength>k__BackingField;
    public Header Header { get; protected set; }
    public DeliveryAnnotations DeliveryAnnotations { get; protected set; }
    public MessageAnnotations MessageAnnotations { get; public set; }
    public Properties Properties { get; protected set; }
    public ApplicationProperties ApplicationProperties { get; public set; }
    public IEnumerable`1<Data> DataBody { get; public set; }
    public IEnumerable`1<AmqpSequence> SequenceBody { get; public set; }
    public AmqpValue ValueBody { get; public set; }
    public Stream BodyStream { get; public set; }
    public Footer Footer { get; protected set; }
    public SectionFlag Sections { get; }
    public SectionFlag BodyType { get; }
    internal long BodySectionOffset { get; internal set; }
    internal long BodySectionLength { get; internal set; }
    public long SerializedMessageSize { get; }
    public Header get_Header();
    protected void set_Header(Header value);
    public DeliveryAnnotations get_DeliveryAnnotations();
    protected void set_DeliveryAnnotations(DeliveryAnnotations value);
    public MessageAnnotations get_MessageAnnotations();
    public void set_MessageAnnotations(MessageAnnotations value);
    public Properties get_Properties();
    protected void set_Properties(Properties value);
    public ApplicationProperties get_ApplicationProperties();
    public void set_ApplicationProperties(ApplicationProperties value);
    public virtual IEnumerable`1<Data> get_DataBody();
    public virtual void set_DataBody(IEnumerable`1<Data> value);
    public virtual IEnumerable`1<AmqpSequence> get_SequenceBody();
    public virtual void set_SequenceBody(IEnumerable`1<AmqpSequence> value);
    public virtual AmqpValue get_ValueBody();
    public virtual void set_ValueBody(AmqpValue value);
    public virtual Stream get_BodyStream();
    public virtual void set_BodyStream(Stream value);
    public Footer get_Footer();
    protected void set_Footer(Footer value);
    public SectionFlag get_Sections();
    public SectionFlag get_BodyType();
    [CompilerGeneratedAttribute]
internal long get_BodySectionOffset();
    [CompilerGeneratedAttribute]
internal void set_BodySectionOffset(long value);
    [CompilerGeneratedAttribute]
internal long get_BodySectionLength();
    [CompilerGeneratedAttribute]
internal void set_BodySectionLength(long value);
    public abstract virtual long get_SerializedMessageSize();
    public ArraySegment`1[] GetPayload();
    public static AmqpMessage Create();
    public static AmqpMessage Create(Data data);
    public static AmqpMessage Create(IEnumerable`1<Data> dataList);
    public static AmqpMessage Create(AmqpValue value);
    public static AmqpMessage Create(IEnumerable`1<AmqpSequence> amqpSequence);
    public static AmqpMessage Create(Stream stream, bool ownStream);
    public static AmqpMessage CreateReceivedMessage();
    public static AmqpMessage CreateAmqpStreamMessageBody(Stream bodyStream);
    public static AmqpMessage CreateAmqpStreamMessageHeader(BufferListStream nonBodyStream);
    public static AmqpMessage CreateAmqpStreamMessage(BufferListStream messageStream);
    public static AmqpMessage CreateAmqpStreamMessage(BufferListStream messagerStream, bool payloadInitialized);
    public static AmqpMessage CreateAmqpStreamMessage(Stream nonBodyStream, Stream bodyStream, bool forceCopyStream);
    public static AmqpMessage CreateInputMessage(BufferListStream stream);
    public static AmqpMessage CreateOutputMessage(BufferListStream stream, bool ownStream);
    public AmqpMessage Clone();
    public void Modify(Modified modified);
    public virtual Stream ToStream();
    public virtual void Deserialize(SectionFlag desiredSections);
    protected virtual void Dispose(bool disposing);
    public void ThrowIfDisposed();
    protected virtual void EnsureInitialized(T& obj, SectionFlag section);
    internal virtual long Write(XmlWriter writer);
    internal virtual Stream GetBodySectionStream();
    internal virtual Stream GetNonBodySectionsStream();
    private static bool EnsureInitialized(T& obj);
    private int GetSectionSize(IAmqpSerializable section);
    private void EncodeSection(ByteBuffer buffer, IAmqpSerializable section);
    private void UpdateSectionFlag(bool set, SectionFlag flag);
}
public abstract class Microsoft.Azure.Amqp.AmqpObject : object {
    private static AsyncCallback onSafeCloseComplete;
    private static int nextId;
    private SequenceNumber identifier;
    private object thisLock;
    private string name;
    private OpenAsyncResult pendingOpen;
    private CloseAsyncResult pendingClose;
    private bool openCalled;
    private bool closeCalled;
    private bool abortCalled;
    private bool closedHandlerInvoked;
    private IList`1<AmqpSymbol> mutualCapabilities;
    [CompilerGeneratedAttribute]
private EventHandler`1<OpenEventArgs> Opening;
    [CompilerGeneratedAttribute]
private EventHandler Opened;
    [CompilerGeneratedAttribute]
private EventHandler Closed;
    [CompilerGeneratedAttribute]
private AmqpObjectState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <TerminalException>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DefaultOpenTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DefaultCloseTimeout>k__BackingField;
    public SequenceNumber Identifier { get; }
    public AmqpObjectState State { get; protected set; }
    public Exception TerminalException { get; protected set; }
    [ObsoleteAttribute("Use connection or link settings operation timeout.")]
public TimeSpan DefaultOpenTimeout { get; protected set; }
    [ObsoleteAttribute("Use connection or link settings operation timeout.")]
public TimeSpan DefaultCloseTimeout { get; protected set; }
    public IList`1<AmqpSymbol> MutualCapabilities { get; }
    protected object ThisLock { get; }
    internal bool CloseCalled { get; }
    internal TimeSpan OperationTimeout { get; }
    protected AmqpObject(string type);
    protected AmqpObject(string type, SequenceNumber identifier);
    private static AmqpObject();
    [CompilerGeneratedAttribute]
public void add_Opening(EventHandler`1<OpenEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Opening(EventHandler`1<OpenEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Opened(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Opened(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Closed(EventHandler value);
    public SequenceNumber get_Identifier();
    [CompilerGeneratedAttribute]
public AmqpObjectState get_State();
    [CompilerGeneratedAttribute]
protected void set_State(AmqpObjectState value);
    [CompilerGeneratedAttribute]
public Exception get_TerminalException();
    [CompilerGeneratedAttribute]
protected void set_TerminalException(Exception value);
    [CompilerGeneratedAttribute]
public TimeSpan get_DefaultOpenTimeout();
    [CompilerGeneratedAttribute]
protected void set_DefaultOpenTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_DefaultCloseTimeout();
    [CompilerGeneratedAttribute]
protected void set_DefaultCloseTimeout(TimeSpan value);
    public IList`1<AmqpSymbol> get_MutualCapabilities();
    protected object get_ThisLock();
    internal bool get_CloseCalled();
    internal virtual TimeSpan get_OperationTimeout();
    public void Open();
    public void Open(TimeSpan timeout);
    internal void SetName(string name);
    public Task OpenAsync(TimeSpan timeout);
    public Task OpenAsync(CancellationToken cancellationToken);
    public Task CloseAsync(CancellationToken cancellationToken);
    public IAsyncResult BeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    public void EndOpen(IAsyncResult result);
    public void Close();
    public void Close(TimeSpan timeout);
    public Task CloseAsync(TimeSpan timeout);
    public IAsyncResult BeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    public void EndClose(IAsyncResult result);
    public void Abort();
    public void SafeClose();
    public void SafeClose(Exception exception);
    public virtual string ToString();
    public void SafeAddClosed(EventHandler handler);
    public bool IsClosing();
    protected virtual void OnOpen(TimeSpan timeout);
    protected virtual void OnClose(TimeSpan timeout);
    protected abstract virtual bool OpenInternal();
    protected abstract virtual bool CloseInternal();
    protected abstract virtual void AbortInternal();
    protected void FindMutualCapabilites(Multiple`1<AmqpSymbol> desired, Multiple`1<AmqpSymbol> offered);
    protected void NotifyOpening(Performative command);
    protected void CompleteOpen(bool syncComplete, Exception exception);
    protected void CompleteClose(bool syncComplete, Exception exception);
    protected StateTransition TransitState(string operation, StateTransition[] states);
    protected void OnReceiveCloseCommand(string command, Error error);
    protected void ThrowIfClosed();
    private static void OnSafeCloseComplete(IAsyncResult result);
    internal IAsyncResult BeginOpen(TimeSpan timeout, CancellationToken cancellationToken, AsyncCallback callback, object state);
    private IAsyncResult BeginClose(TimeSpan timeout, CancellationToken cancellationToken, AsyncCallback callback, object state);
    private void NotifyOpened();
    private void NotifyClosed();
}
public enum Microsoft.Azure.Amqp.AmqpObjectState : Enum {
    public int value__;
    public static AmqpObjectState Start;
    public static AmqpObjectState HeaderSent;
    public static AmqpObjectState OpenPipe;
    public static AmqpObjectState OpenClosePipe;
    public static AmqpObjectState HeaderReceived;
    public static AmqpObjectState HeaderExchanged;
    public static AmqpObjectState OpenSent;
    public static AmqpObjectState OpenReceived;
    public static AmqpObjectState ClosePipe;
    public static AmqpObjectState Opened;
    public static AmqpObjectState CloseSent;
    public static AmqpObjectState CloseReceived;
    public static AmqpObjectState End;
    public static AmqpObjectState Faulted;
}
internal class Microsoft.Azure.Amqp.AmqpResources : Resources {
    internal static string GetString(string value, Object[] args);
}
public enum Microsoft.Azure.Amqp.AmqpResponseStatusCode : Enum {
    public int value__;
    public static AmqpResponseStatusCode Accepted;
    public static AmqpResponseStatusCode Ambiguous;
    public static AmqpResponseStatusCode BadGateway;
    public static AmqpResponseStatusCode BadRequest;
    public static AmqpResponseStatusCode Conflict;
    public static AmqpResponseStatusCode Continue;
    public static AmqpResponseStatusCode Created;
    public static AmqpResponseStatusCode ExpectationFailed;
    public static AmqpResponseStatusCode Forbidden;
    public static AmqpResponseStatusCode Found;
    public static AmqpResponseStatusCode GatewayTimeout;
    public static AmqpResponseStatusCode Gone;
    public static AmqpResponseStatusCode HttpVersionNotSupported;
    public static AmqpResponseStatusCode InternalServerError;
    public static AmqpResponseStatusCode LengthRequired;
    public static AmqpResponseStatusCode MethodNotAllowed;
    public static AmqpResponseStatusCode Moved;
    public static AmqpResponseStatusCode MovedPermanently;
    public static AmqpResponseStatusCode MultipleChoices;
    public static AmqpResponseStatusCode NoContent;
    public static AmqpResponseStatusCode NonAuthoritativeInformation;
    public static AmqpResponseStatusCode NotAcceptable;
    public static AmqpResponseStatusCode NotFound;
    public static AmqpResponseStatusCode NotImplemented;
    public static AmqpResponseStatusCode NotModified;
    public static AmqpResponseStatusCode OK;
    public static AmqpResponseStatusCode PartialContent;
    public static AmqpResponseStatusCode PaymentRequired;
    public static AmqpResponseStatusCode PreconditionFailed;
    public static AmqpResponseStatusCode ProxyAuthenticationRequired;
    public static AmqpResponseStatusCode Redirect;
    public static AmqpResponseStatusCode RedirectKeepVerb;
    public static AmqpResponseStatusCode RedirectMethod;
    public static AmqpResponseStatusCode RequestedRangeNotSatisfiable;
    public static AmqpResponseStatusCode RequestEntityTooLarge;
    public static AmqpResponseStatusCode RequestTimeout;
    public static AmqpResponseStatusCode RequestUriTooLong;
    public static AmqpResponseStatusCode ResetContent;
    public static AmqpResponseStatusCode SeeOther;
    public static AmqpResponseStatusCode ServiceUnavailable;
    public static AmqpResponseStatusCode SwitchingProtocols;
    public static AmqpResponseStatusCode TemporaryRedirect;
    public static AmqpResponseStatusCode Unauthorized;
    public static AmqpResponseStatusCode UnsupportedMediaType;
    public static AmqpResponseStatusCode Unused;
    public static AmqpResponseStatusCode UpgradeRequired;
    public static AmqpResponseStatusCode UseProxy;
}
public class Microsoft.Azure.Amqp.AmqpSession : AmqpObject {
    private static EventHandler onLinkClosed;
    private AmqpConnection connection;
    private AmqpSessionSettings settings;
    private ILinkFactory linkFactory;
    private Dictionary`2<string, AmqpLink> links;
    private HandleTable`1<AmqpLink> linksByLocalHandle;
    private HandleTable`1<AmqpLink> linksByRemoteHandle;
    private OutgoingSessionChannel outgoingChannel;
    private IncomingSessionChannel incomingChannel;
    private ushort cachedRemoteChannel;
    [CompilerGeneratedAttribute]
private ushort <LocalChannel>k__BackingField;
    public AmqpSessionSettings Settings { get; }
    public AmqpConnection Connection { get; }
    public ushort LocalChannel { get; public set; }
    public Nullable`1<ushort> RemoteChannel { get; public set; }
    public ushort CachedRemoteChannel { get; }
    public ILinkFactory LinkFactory { get; }
    protected Dictionary`2<string, AmqpLink> Links { get; }
    protected HandleTable`1<AmqpLink> LinksByRemoteHandle { get; }
    internal TimeSpan OperationTimeout { get; }
    public AmqpSession(AmqpConnection connection, AmqpSessionSettings settings, ILinkFactory linkFactory);
    protected AmqpSession(string type, AmqpConnection connection, AmqpSessionSettings settings, ILinkFactory linkFactory);
    private static AmqpSession();
    public AmqpSessionSettings get_Settings();
    public AmqpConnection get_Connection();
    [CompilerGeneratedAttribute]
public ushort get_LocalChannel();
    [CompilerGeneratedAttribute]
public void set_LocalChannel(ushort value);
    public Nullable`1<ushort> get_RemoteChannel();
    public void set_RemoteChannel(Nullable`1<ushort> value);
    public ushort get_CachedRemoteChannel();
    public ILinkFactory get_LinkFactory();
    protected Dictionary`2<string, AmqpLink> get_Links();
    protected HandleTable`1<AmqpLink> get_LinksByRemoteHandle();
    internal virtual TimeSpan get_OperationTimeout();
    public void AttachLink(AmqpLink link);
    public virtual void ProcessFrame(Frame frame);
    public void SendFlow(Flow flow);
    public void SendCommand(Performative command);
    public void SendCommand(Performative command, ArraySegment`1[] payload);
    public bool TrySendTransfer(Delivery delivery, Transfer transfer, ArraySegment`1[] payload);
    public void DisposeDelivery(AmqpLink link, Delivery delivery, bool settled, DeliveryState state, bool noFlush);
    public bool OnAcceptTransfer(Delivery delivery, Transfer transfer, bool newDelivery);
    public void Flush();
    internal void OnIoEvent(IoEvent ioEvent);
    protected virtual bool OpenInternal();
    protected virtual bool CloseInternal();
    protected virtual void AbortInternal();
    protected AmqpObjectState SendBegin();
    protected AmqpObjectState SendEnd();
    protected bool TryCreateRemoteLink(Attach attach, AmqpLink& link);
    private void CloseLinks(bool abort);
    private bool LinkFrameAllowed();
    private void SendFlow();
    private void OnReceiveBegin(Begin begin);
    private void OnReceiveEnd(End end);
    private void OnReceiveDisposition(Disposition disposition);
    protected virtual void OnReceiveFlow(Flow flow);
    private void OnReceiveLinkFrame(Frame frame);
    private void UpdateHandleTable(Begin begin);
    private Error Negotiate(Begin begin);
    private void NotifyCreditAvailable(int credit);
    private static void OnLinkClosed(object sender, EventArgs e);
}
public class Microsoft.Azure.Amqp.AmqpSessionSettings : Begin {
    [CompilerGeneratedAttribute]
private int <DispositionThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DispositionInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private SequenceNumber <InitialDeliveryId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreMissingLinks>k__BackingField;
    public int DispositionThreshold { get; public set; }
    public TimeSpan DispositionInterval { get; public set; }
    public SequenceNumber InitialDeliveryId { get; public set; }
    public bool IgnoreMissingLinks { get; public set; }
    [CompilerGeneratedAttribute]
public int get_DispositionThreshold();
    [CompilerGeneratedAttribute]
public void set_DispositionThreshold(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_DispositionInterval();
    [CompilerGeneratedAttribute]
public void set_DispositionInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public SequenceNumber get_InitialDeliveryId();
    [CompilerGeneratedAttribute]
public void set_InitialDeliveryId(SequenceNumber value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreMissingLinks();
    [CompilerGeneratedAttribute]
public void set_IgnoreMissingLinks(bool value);
    public static AmqpSessionSettings Create(Begin begin);
    public AmqpSessionSettings Clone();
}
public class Microsoft.Azure.Amqp.AmqpSettings : object {
    private List`1<TransportProvider> transportProviders;
    [CompilerGeneratedAttribute]
private int <MaxConcurrentConnections>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxLinksPerSession>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <DefaultLinkCredit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireSecureTransport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAnonymousConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private IRuntimeProvider <RuntimeProvider>k__BackingField;
    public int MaxConcurrentConnections { get; public set; }
    public int MaxLinksPerSession { get; public set; }
    public UInt32 DefaultLinkCredit { get; public set; }
    public bool RequireSecureTransport { get; public set; }
    public bool AllowAnonymousConnection { get; public set; }
    public IList`1<TransportProvider> TransportProviders { get; }
    public IRuntimeProvider RuntimeProvider { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaxConcurrentConnections();
    [CompilerGeneratedAttribute]
public void set_MaxConcurrentConnections(int value);
    [CompilerGeneratedAttribute]
public int get_MaxLinksPerSession();
    [CompilerGeneratedAttribute]
public void set_MaxLinksPerSession(int value);
    [CompilerGeneratedAttribute]
public UInt32 get_DefaultLinkCredit();
    [CompilerGeneratedAttribute]
public void set_DefaultLinkCredit(UInt32 value);
    [CompilerGeneratedAttribute]
public bool get_RequireSecureTransport();
    [CompilerGeneratedAttribute]
public void set_RequireSecureTransport(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowAnonymousConnection();
    [CompilerGeneratedAttribute]
public void set_AllowAnonymousConnection(bool value);
    public IList`1<TransportProvider> get_TransportProviders();
    [CompilerGeneratedAttribute]
public IRuntimeProvider get_RuntimeProvider();
    [CompilerGeneratedAttribute]
public void set_RuntimeProvider(IRuntimeProvider value);
    public T GetTransportProvider();
    public bool TryGetTransportProvider(ProtocolHeader header, TransportProvider& provider);
    public ProtocolHeader GetDefaultHeader();
    public ProtocolHeader GetSupportedHeader(ProtocolHeader requestedHeader);
    public AmqpSettings Clone();
    public void ValidateInitiatorSettings();
    public void ValidateListenerSettings();
    private TransportProvider GetDefaultProvider();
}
public class Microsoft.Azure.Amqp.AmqpTrace : object {
    public static AmqpTrace Provider;
    [CompilerGeneratedAttribute]
private static Action`1<string> <FrameLogger>k__BackingField;
    public static Action`1<string> FrameLogger { get; public set; }
    private static AmqpTrace();
    [CompilerGeneratedAttribute]
public static Action`1<string> get_FrameLogger();
    [CompilerGeneratedAttribute]
public static void set_FrameLogger(Action`1<string> value);
    public virtual void AmqpOpenConnection(object source, object connection);
    public virtual void AmqpCloseConnection(object source, object connection, bool abort);
    public virtual void AmqpAddSession(object source, object session, ushort localChannel, ushort remoteChannel);
    public virtual void AmqpAttachLink(object connection, object session, object link, UInt32 localHandle, UInt32 remoteHandle, string linkName, string role, object source, object target);
    public virtual void AmqpDeliveryNotFound(object source, string deliveryTag);
    public virtual void AmqpDispose(object source, UInt32 deliveryId, bool settled, object state);
    public virtual void AmqpDynamicBufferSizeChange(object source, string type, int oldSize, int newSize);
    public virtual void AmqpInsecureTransport(object source, object transport, bool isSecure, bool isAuthenticated);
    public virtual void AmqpLinkDetach(object source, string name, UInt32 handle, string action, string error);
    public virtual void AmqpListenSocketAcceptError(object source, bool willRetry, string error);
    public virtual void AmqpLogError(object source, string operation, string message);
    public virtual void AmqpLogOperationInformational(object source, TraceOperation operation, object detail);
    public virtual void AmqpLogOperationVerbose(object source, TraceOperation operation, object detail);
    public virtual void AmqpMissingHandle(object source, string type, UInt32 handle);
    public virtual void AmqpOpenEntityFailed(object source, object obj, string name, string entityName, string error);
    public virtual void AmqpOpenEntitySucceeded(object source, object obj, string name, string entityName);
    public virtual void AmqpSentMessage(object source, UInt32 deliveryId, long bytes);
    public virtual void AmqpReceiveMessage(object source, UInt32 deliveryId, int transferCount);
    public virtual void AmqpRemoveLink(object connection, object session, object link, UInt32 localHandle, UInt32 remoteHandle, string linkName);
    public virtual void AmqpRemoveSession(object source, object session, ushort localChannel, ushort remoteChannel);
    public virtual void AmqpSessionWindowClosed(object source, int nextId);
    public virtual void AmqpStateTransition(object source, string operation, object fromState, object toState);
    public virtual void AmqpUpgradeTransport(object source, object from, object to);
    public virtual void AmqpAbortThrowingException(string exception);
    public virtual void AmqpCacheMessage(object source, UInt32 deliveryId, int count, bool isPrefecthingBySize, long totalCacheSizeInBytes, UInt32 totalLinkCredit, UInt32 linkCredit);
    public virtual void AmqpIoEvent(object source, int ioEvent, long queueSize);
    public virtual void AmqpHandleException(Exception exception, string traceInfo);
    internal static void AmqpSendReceiveHeader(ProtocolHeader header, bool send);
    internal static void AmqpSendReceiveFrame(FrameType type, ushort channel, Performative command, bool send, int frameSize);
    private static void TraceHeader(ProtocolHeader header, bool send);
    private static void TraceFrame(FrameType type, ushort channel, Performative command, bool send, int frameSize);
    private static void AppendCommon(StringBuilder sb, bool send);
}
public class Microsoft.Azure.Amqp.AmqpVersion : ValueType {
    private byte major;
    private byte minor;
    private byte revision;
    public byte Major { get; }
    public byte Minor { get; }
    public byte Revision { get; }
    public AmqpVersion(byte major, byte minor, byte revision);
    public AmqpVersion(Version version);
    public byte get_Major();
    public byte get_Minor();
    public byte get_Revision();
    public sealed virtual bool Equals(AmqpVersion other);
    public virtual string ToString();
}
internal class Microsoft.Azure.Amqp.AssertionFailedException : Exception {
    public AssertionFailedException(string description);
}
public class Microsoft.Azure.Amqp.AsyncIO : AmqpObject {
    private IIoHandler ioHandler;
    private TransportBase transport;
    private AsyncWriter writer;
    private AsyncReader reader;
    public TransportBase Transport { get; }
    public long WriteBufferQueueSize { get; }
    public AsyncIO(IIoHandler parent, int maxFrameSize, int writeQueueFullLimit, int writeQueueEmptyLimit, TransportBase transport, bool isInitiator);
    public TransportBase get_Transport();
    public long get_WriteBufferQueueSize();
    public void WriteBuffer(ByteBuffer buffer);
    public void WriteBuffer(IList`1<ByteBuffer> buffers);
    protected virtual void OnOpen(TimeSpan timeout);
    protected virtual void OnClose(TimeSpan timeout);
    protected virtual bool OpenInternal();
    protected virtual bool CloseInternal();
    protected virtual void AbortInternal();
}
[DebuggerStepThroughAttribute]
internal abstract class Microsoft.Azure.Amqp.AsyncResult : object {
    public static string DisablePrepareForRethrow;
    private static AsyncCallback asyncCompletionWrapperCallback;
    private AsyncCallback callback;
    private bool completedSynchronously;
    private bool endCalled;
    private Exception exception;
    private bool isCompleted;
    private AsyncCompletion nextAsyncCompletion;
    private IAsyncResult deferredTransactionalResult;
    private object state;
    private ManualResetEvent manualResetEvent;
    private object thisLock;
    [CompilerGeneratedAttribute]
private Action`2<AsyncResult, Exception> <OnCompleting>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<AsyncCallback, IAsyncResult> <VirtualCallback>k__BackingField;
    public object AsyncState { get; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; }
    public bool HasCallback { get; }
    public bool IsCompleted { get; }
    protected Action`2<AsyncResult, Exception> OnCompleting { get; protected set; }
    protected object ThisLock { get; }
    protected Action`2<AsyncCallback, IAsyncResult> VirtualCallback { get; protected set; }
    protected AsyncResult(AsyncCallback callback, object state);
    public sealed virtual object get_AsyncState();
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    public sealed virtual bool get_CompletedSynchronously();
    public bool get_HasCallback();
    public sealed virtual bool get_IsCompleted();
    [CompilerGeneratedAttribute]
protected Action`2<AsyncResult, Exception> get_OnCompleting();
    [CompilerGeneratedAttribute]
protected void set_OnCompleting(Action`2<AsyncResult, Exception> value);
    protected object get_ThisLock();
    [CompilerGeneratedAttribute]
protected Action`2<AsyncCallback, IAsyncResult> get_VirtualCallback();
    [CompilerGeneratedAttribute]
protected void set_VirtualCallback(Action`2<AsyncCallback, IAsyncResult> value);
    protected bool TryComplete(bool didCompleteSynchronously, Exception exception);
    protected bool TryComplete(bool didcompleteSynchronously);
    protected void Complete(bool didCompleteSynchronously);
    protected void Complete(bool didCompleteSynchronously, Exception e);
    private static void AsyncCompletionWrapperCallback(IAsyncResult result);
    protected AsyncCallback PrepareAsyncCompletion(AsyncCompletion callback);
    protected bool CheckSyncContinue(IAsyncResult result);
    protected bool SyncContinue(IAsyncResult result);
    private bool TryContinueHelper(IAsyncResult result, AsyncCompletion& callback);
    private AsyncCompletion GetNextCompletion();
    protected static void ThrowInvalidAsyncResult(IAsyncResult result);
    protected static void ThrowInvalidAsyncResult(string debugText);
    protected static TAsyncResult End(IAsyncResult result);
}
internal abstract class Microsoft.Azure.Amqp.AsyncResult`1 : AsyncResult {
    protected AsyncResult`1(AsyncCallback callback, object state);
    public static TAsyncResult End(IAsyncResult asyncResult);
}
public class Microsoft.Azure.Amqp.BufferListStream : Stream {
    private IList`1<ArraySegment`1<byte>> bufferList;
    private int readArray;
    private int readOffset;
    private long length;
    private long position;
    private bool disposed;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public BufferListStream(IList`1<ArraySegment`1<byte>> arraySegments);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public object Clone();
    public virtual void Flush();
    public virtual int ReadByte();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public ArraySegment`1<byte> ReadBytes(int count);
    public ArraySegment`1[] ReadBuffers(int count, bool advance, Boolean& more);
    protected virtual void Dispose(bool disposing);
    private void ThrowIfDisposed();
    private void SetPosition(long pos);
    private void Advance(int count, int segmentCount);
    public static BufferListStream Create(Stream stream, int segmentSize);
    public static BufferListStream Create(Stream stream, int segmentSize, bool forceCopyStream);
    public static ArraySegment`1[] ReadStream(Stream stream, int segmentSize, Int32& length);
}
internal class Microsoft.Azure.Amqp.ByteArrayComparer : object {
    private static ByteArrayComparer instance;
    public static ByteArrayComparer Instance { get; }
    private static ByteArrayComparer();
    public static ByteArrayComparer get_Instance();
    public sealed virtual bool Equals(ArraySegment`1<byte> x, ArraySegment`1<byte> y);
    public sealed virtual int GetHashCode(ArraySegment`1<byte> obj);
    public static bool AreEqual(ArraySegment`1<byte> x, ArraySegment`1<byte> y);
}
public class Microsoft.Azure.Amqp.ByteBuffer : object {
    private static InternalBufferManager BufferManager;
    internal static InternalBufferManager TransportBufferManager;
    private static object syncRoot;
    private Byte[] buffer;
    private int start;
    private int read;
    private int write;
    private int end;
    private bool autoGrow;
    private int references;
    private InternalBufferManager bufferManager;
    private ByteBuffer innerBuffer;
    public Byte[] Buffer { get; }
    public int Capacity { get; }
    public int Offset { get; }
    public int Size { get; }
    public int Length { get; }
    public int WritePos { get; }
    private int Microsoft.Azure.Amqp.Encoding.IAmqpSerializable.EncodeSize { get; }
    public ByteBuffer(Byte[] buffer);
    public ByteBuffer(Byte[] buffer, bool autoGrow);
    public ByteBuffer(ArraySegment`1<byte> array);
    public ByteBuffer(int size, bool autoGrow);
    public ByteBuffer(int size, bool autoGrow, bool isTransportBuffer);
    public ByteBuffer(Byte[] buffer, int offset, int count);
    private ByteBuffer(ManagedBuffer bufferReference, bool autoGrow, int size);
    private ByteBuffer(Byte[] buffer, int offset, int count, int size, bool autoGrow, InternalBufferManager bufferManager);
    private static ByteBuffer();
    public static void InitBufferManagers();
    public static void InitBufferManagers(long maxPoolSizeInBytes);
    private static ManagedBuffer AllocateBufferFromPool(int size, bool isTransportBuffer);
    private static ManagedBuffer AllocateBuffer(int size, InternalBufferManager bufferManager);
    public Byte[] get_Buffer();
    public int get_Capacity();
    public int get_Offset();
    public int get_Size();
    public int get_Length();
    public int get_WritePos();
    public void Validate(bool write, int dataSize);
    public void Append(int size);
    public void Complete(int size);
    public void Seek(int seekPosition);
    public void Reset();
    [ObsoleteAttribute("Call AddReference instead.")]
public object Clone();
    public ByteBuffer GetSlice(int position, int length);
    public void AdjustPosition(int offset, int length);
    public sealed virtual void Dispose();
    internal bool TryAddReference();
    public ByteBuffer AddReference();
    public void RemoveReference();
    private sealed virtual override int Microsoft.Azure.Amqp.Encoding.IAmqpSerializable.get_EncodeSize();
    private sealed virtual override void Microsoft.Azure.Amqp.Encoding.IAmqpSerializable.Encode(ByteBuffer buffer);
    private sealed virtual override void Microsoft.Azure.Amqp.Encoding.IAmqpSerializable.Decode(ByteBuffer buffer);
}
internal class Microsoft.Azure.Amqp.CallbackException : FatalException {
    public CallbackException(string message, Exception innerException);
}
public static class Microsoft.Azure.Amqp.CbsConstants : object {
    public static AmqpSymbol TimeoutName;
    public static string CbsAddress;
    public static string IotHubSasTokenType;
    public static string ServiceBusSasTokenType;
    public static String[] SupportedTokenTypes;
    public static string Operation;
    private static CbsConstants();
}
public class Microsoft.Azure.Amqp.CbsToken : object {
    [CompilerGeneratedAttribute]
private object <TokenValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ExpiresAtUtc>k__BackingField;
    public object TokenValue { get; private set; }
    public string TokenType { get; private set; }
    public DateTime ExpiresAtUtc { get; private set; }
    public CbsToken(object tokenValue, string tokenType, DateTime expiresAtUtc);
    [CompilerGeneratedAttribute]
public object get_TokenValue();
    [CompilerGeneratedAttribute]
private void set_TokenValue(object value);
    [CompilerGeneratedAttribute]
public string get_TokenType();
    [CompilerGeneratedAttribute]
private void set_TokenType(string value);
    [CompilerGeneratedAttribute]
public DateTime get_ExpiresAtUtc();
    [CompilerGeneratedAttribute]
private void set_ExpiresAtUtc(DateTime value);
}
internal class Microsoft.Azure.Amqp.CommonResources : ResourcesGeneric {
    internal static string GetString(string value, Object[] args);
}
internal class Microsoft.Azure.Amqp.CompletedAsyncResult : AsyncResult {
    public CompletedAsyncResult(AsyncCallback callback, object state);
    public CompletedAsyncResult(Exception exception, AsyncCallback callback, object state);
    public static void End(IAsyncResult result);
}
internal class Microsoft.Azure.Amqp.CompletedAsyncResult`1 : AsyncResult {
    private T data;
    public CompletedAsyncResult`1(T data, AsyncCallback callback, object state);
    public static T End(IAsyncResult result);
}
internal class Microsoft.Azure.Amqp.CompletedAsyncResult`2 : AsyncResult {
    private TResult resultData;
    private TParameter parameter;
    public CompletedAsyncResult`2(TResult resultData, TParameter parameter, AsyncCallback callback, object state);
    public static TResult End(IAsyncResult result, TParameter& parameter);
}
internal static class Microsoft.Azure.Amqp.CurrentProcess : object {
    public static int ID { get; }
    public static int get_ID();
}
public abstract class Microsoft.Azure.Amqp.Delivery : object {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) settled;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) stateChanged;
    [CompilerGeneratedAttribute]
private List`1<ByteBuffer> <RawByteBuffers>k__BackingField;
    [CompilerGeneratedAttribute]
private ArraySegment`1<byte> <DeliveryTag>k__BackingField;
    [CompilerGeneratedAttribute]
private SequenceNumber <DeliveryId>k__BackingField;
    [CompilerGeneratedAttribute]
private ArraySegment`1<byte> <TxnId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Batchable>k__BackingField;
    [CompilerGeneratedAttribute]
private DeliveryState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpLink <Link>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BytesTransfered>k__BackingField;
    [CompilerGeneratedAttribute]
private Delivery <Previous>k__BackingField;
    [CompilerGeneratedAttribute]
private Delivery <Next>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <MessageFormat>k__BackingField;
    public List`1<ByteBuffer> RawByteBuffers { get; protected set; }
    public ArraySegment`1<byte> DeliveryTag { get; public set; }
    public SequenceNumber DeliveryId { get; public set; }
    public ArraySegment`1<byte> TxnId { get; public set; }
    public bool Settled { get; public set; }
    public bool Batchable { get; public set; }
    public DeliveryState State { get; public set; }
    public bool StateChanged { get; public set; }
    public AmqpLink Link { get; public set; }
    public long BytesTransfered { get; protected set; }
    public Delivery Previous { get; public set; }
    public Delivery Next { get; public set; }
    public Nullable`1<UInt32> MessageFormat { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<ByteBuffer> get_RawByteBuffers();
    [CompilerGeneratedAttribute]
protected void set_RawByteBuffers(List`1<ByteBuffer> value);
    [CompilerGeneratedAttribute]
public ArraySegment`1<byte> get_DeliveryTag();
    [CompilerGeneratedAttribute]
public void set_DeliveryTag(ArraySegment`1<byte> value);
    [CompilerGeneratedAttribute]
public SequenceNumber get_DeliveryId();
    [CompilerGeneratedAttribute]
public void set_DeliveryId(SequenceNumber value);
    [CompilerGeneratedAttribute]
public ArraySegment`1<byte> get_TxnId();
    [CompilerGeneratedAttribute]
public void set_TxnId(ArraySegment`1<byte> value);
    public bool get_Settled();
    public void set_Settled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Batchable();
    [CompilerGeneratedAttribute]
public void set_Batchable(bool value);
    [CompilerGeneratedAttribute]
public DeliveryState get_State();
    [CompilerGeneratedAttribute]
public void set_State(DeliveryState value);
    public bool get_StateChanged();
    public void set_StateChanged(bool value);
    [CompilerGeneratedAttribute]
public AmqpLink get_Link();
    [CompilerGeneratedAttribute]
public void set_Link(AmqpLink value);
    [CompilerGeneratedAttribute]
public long get_BytesTransfered();
    [CompilerGeneratedAttribute]
protected void set_BytesTransfered(long value);
    [CompilerGeneratedAttribute]
public Delivery get_Previous();
    [CompilerGeneratedAttribute]
public void set_Previous(Delivery value);
    [CompilerGeneratedAttribute]
public Delivery get_Next();
    [CompilerGeneratedAttribute]
public void set_Next(Delivery value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_MessageFormat();
    [CompilerGeneratedAttribute]
public void set_MessageFormat(Nullable`1<UInt32> value);
    public static void Add(Delivery& first, Delivery& last, Delivery delivery);
    public static void Remove(Delivery& first, Delivery& last, Delivery delivery);
    public void CompletePayload(int payloadSize);
    public virtual void AddPayload(ByteBuffer payload, bool isLast);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void PrepareForSend();
    public abstract virtual ArraySegment`1[] GetPayload(int payloadSize, Boolean& more);
    protected abstract virtual void OnCompletePayload(int payloadSize);
}
public static class Microsoft.Azure.Amqp.Encoding.AmqpBitConverter : object {
    public static sbyte ReadByte(ByteBuffer buffer);
    public static byte ReadUByte(ByteBuffer buffer);
    public static short ReadShort(ByteBuffer buffer);
    public static ushort ReadUShort(ByteBuffer buffer);
    public static int ReadInt(ByteBuffer buffer);
    public static UInt32 PeekUInt(ByteBuffer buffer);
    public static UInt32 ReadUInt(ByteBuffer buffer);
    public static UInt32 ReadUInt(Byte[] buffer, int offset, int count);
    public static long ReadLong(ByteBuffer buffer);
    public static ulong ReadULong(ByteBuffer buffer);
    public static ulong ReadULong(Byte[] buffer, int offset, int count);
    public static float ReadFloat(ByteBuffer buffer);
    public static double ReadDouble(ByteBuffer buffer);
    public static Guid ReadUuid(ByteBuffer buffer);
    public static void ReadBytes(ByteBuffer buffer, Byte[] data, int offset, int count);
    public static void WriteByte(ByteBuffer buffer, sbyte data);
    public static void WriteUByte(ByteBuffer buffer, byte data);
    public static void WriteUByte(Byte[] buffer, int offset, byte data);
    public static void WriteShort(ByteBuffer buffer, short data);
    public static void WriteUShort(ByteBuffer buffer, ushort data);
    public static void WriteUShort(Byte[] buffer, int offset, ushort data);
    public static void WriteInt(ByteBuffer buffer, int data);
    public static void WriteUInt(ByteBuffer buffer, UInt32 data);
    public static void WriteUInt(Byte[] buffer, int offset, UInt32 data);
    public static void WriteLong(ByteBuffer buffer, long data);
    public static void WriteULong(ByteBuffer buffer, ulong data);
    internal static void WriteULong(Byte[] buffer, int offset, ulong data);
    public static void WriteFloat(ByteBuffer buffer, float data);
    public static void WriteDouble(ByteBuffer buffer, double data);
    public static void WriteUuid(ByteBuffer buffer, Guid data);
    public static void WriteBytes(ByteBuffer buffer, Byte[] data, int offset, int count);
}
public static class Microsoft.Azure.Amqp.Encoding.AmqpEncoding : object {
    private static Dictionary`2<Type, EncodingBase> encodingsByType;
    private static Dictionary`2<FormatCode, EncodingBase> encodingsByCode;
    private static BooleanEncoding booleanEncoding;
    private static UByteEncoding ubyteEncoding;
    private static UShortEncoding ushortEncoding;
    private static UIntEncoding uintEncoding;
    private static ULongEncoding ulongEncoding;
    private static ByteEncoding byteEncoding;
    private static ShortEncoding shortEncoding;
    private static IntEncoding intEncoding;
    private static LongEncoding longEncoding;
    private static FloatEncoding floatEncoding;
    private static DoubleEncoding doubleEncoding;
    private static DecimalEncoding decimal128Encoding;
    private static CharEncoding charEncoding;
    private static TimeStampEncoding timeStampEncoding;
    private static UuidEncoding uuidEncoding;
    private static BinaryEncoding binaryEncoding;
    private static SymbolEncoding symbolEncoding;
    private static StringEncoding stringEncoding;
    private static ListEncoding listEncoding;
    private static MapEncoding mapEncoding;
    private static ArrayEncoding arrayEncoding;
    private static DescribedEncoding describedTypeEncoding;
    private static AmqpEncoding();
    public static EncodingBase GetEncoding(object value);
    public static EncodingBase GetEncoding(Type type);
    public static EncodingBase GetEncoding(FormatCode formatCode);
    public static int GetEncodeWidthBySize(int size);
    public static int GetEncodeWidthByCountAndSize(int count, int valueSize);
    public static FormatCode ReadFormatCode(ByteBuffer buffer);
    public static void ReadCount(ByteBuffer buffer, FormatCode formatCode, FormatCode formatCode8, FormatCode formatCode32, Int32& count);
    public static void ReadSizeAndCount(ByteBuffer buffer, FormatCode formatCode, FormatCode formatCode8, FormatCode formatCode32, Int32& size, Int32& count);
    public static int GetObjectEncodeSize(object value);
    public static void EncodeNull(ByteBuffer buffer);
    public static void EncodeObject(object value, ByteBuffer buffer);
    public static object DecodeObject(ByteBuffer buffer);
    public static object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
    public static AmqpException GetEncodingException(string message);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Azure.Amqp.Encoding.AmqpMap : object {
    private Dictionary`2<MapKey, object> value;
    public int Count { get; }
    public int ValueSize { get; }
    public object Item { get; public set; }
    public AmqpMap(IDictionary`2<MapKey, object> value);
    public AmqpMap(IDictionary value);
    public int get_Count();
    public int get_ValueSize();
    public object get_Item(MapKey key);
    public void set_Item(MapKey key, object value);
    public bool TryGetValue(MapKey key, TValue& value);
    public bool TryRemoveValue(MapKey key, TValue& value);
    public void Add(MapKey key, object value);
    public virtual string ToString();
    public Enumerator<MapKey, object> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<MapKey, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<Microsoft.Azure.Amqp.Encoding.MapKey,System.Object>>.GetEnumerator();
}
public class Microsoft.Azure.Amqp.Encoding.AmqpSymbol : ValueType {
    private int valueSize;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; private set; }
    public int ValueSize { get; }
    public AmqpSymbol(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    public int get_ValueSize();
    public static AmqpSymbol op_Implicit(string value);
    public sealed virtual bool Equals(AmqpSymbol other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class Microsoft.Azure.Amqp.Encoding.ArrayEncoding : EncodingBase {
    public static int GetEncodeSize(T[] value);
    public static void Encode(T[] value, ByteBuffer buffer);
    public static T[] Decode(ByteBuffer buffer, FormatCode formatCode);
    public virtual int GetObjectEncodeSize(object value, bool arrayEncoding);
    public virtual void EncodeObject(object value, bool arrayEncoding, ByteBuffer buffer);
    public virtual object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
    private static int GetEncodeSize(Array array, bool arrayEncoding);
    private static int GetEncodeSize(Array array, bool arrayEncoding, Int32& width);
    private static int GetValueSize(Array value, Type type);
    private static void Encode(Array value, int width, int encodeSize, ByteBuffer buffer);
    private static T[] Decode(ByteBuffer buffer, int size, int count, FormatCode formatCode);
}
internal class Microsoft.Azure.Amqp.Encoding.BinaryEncoding : EncodingBase {
    public static int GetEncodeSize(ArraySegment`1<byte> value);
    public static void Encode(ArraySegment`1<byte> value, ByteBuffer buffer);
    public static ArraySegment`1<byte> Decode(ByteBuffer buffer, FormatCode formatCode);
    public static ArraySegment`1<byte> Decode(ByteBuffer buffer, FormatCode formatCode, bool copy);
    public virtual int GetObjectEncodeSize(object value, bool arrayEncoding);
    public virtual void EncodeObject(object value, bool arrayEncoding, ByteBuffer buffer);
    public virtual object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
}
internal class Microsoft.Azure.Amqp.Encoding.BooleanEncoding : EncodingBase {
    public static int GetEncodeSize(Nullable`1<bool> value);
    public static void Encode(Nullable`1<bool> value, ByteBuffer buffer);
    public static Nullable`1<bool> Decode(ByteBuffer buffer, FormatCode formatCode);
    public virtual int GetObjectEncodeSize(object value, bool arrayEncoding);
    public virtual void EncodeObject(object value, bool arrayEncoding, ByteBuffer buffer);
    public virtual object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
}
internal class Microsoft.Azure.Amqp.Encoding.ByteEncoding : EncodingBase {
    public static int GetEncodeSize(Nullable`1<sbyte> value);
    public static void Encode(Nullable`1<sbyte> value, ByteBuffer buffer);
    public static Nullable`1<sbyte> Decode(ByteBuffer buffer, FormatCode formatCode);
    public virtual int GetObjectEncodeSize(object value, bool arrayEncoding);
    public virtual void EncodeObject(object value, bool arrayEncoding, ByteBuffer buffer);
    public virtual object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
}
internal class Microsoft.Azure.Amqp.Encoding.CharEncoding : EncodingBase {
    public static int GetEncodeSize(Nullable`1<char> value);
    public static void Encode(Nullable`1<char> value, ByteBuffer buffer);
    public static Nullable`1<char> Decode(ByteBuffer buffer, FormatCode formatCode);
    public virtual int GetObjectEncodeSize(object value, bool arrayEncoding);
    public virtual void EncodeObject(object value, bool arrayEncoding, ByteBuffer buffer);
    public virtual object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
}
internal class Microsoft.Azure.Amqp.Encoding.DecimalEncoding : EncodingBase {
    private static int Decimal32Bias;
    private static int Decimal64Bias;
    private static int Decimal128Bias;
    public static int GetEncodeSize(Nullable`1<decimal> value);
    public static void Encode(Nullable`1<decimal> value, ByteBuffer buffer);
    public static Nullable`1<decimal> Decode(ByteBuffer buffer, FormatCode formatCode);
    public virtual int GetObjectEncodeSize(object value, bool arrayEncoding);
    public virtual void EncodeObject(object value, bool arrayEncoding, ByteBuffer buffer);
    public virtual object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
    private static void EncodeValue(decimal value, ByteBuffer buffer);
    private static decimal DecodeValue(ByteBuffer buffer, FormatCode formatCode);
    private static decimal DecodeDecimal32(ByteBuffer buffer);
    private static decimal DecodeDecimal64(ByteBuffer buffer);
    private static decimal DecodeDecimal128(ByteBuffer buffer);
    private static decimal CreateDecimal(int low, int middle, int high, int sign, int exponent);
}
internal class Microsoft.Azure.Amqp.Encoding.DescribedEncoding : EncodingBase {
    public static int GetEncodeSize(DescribedType value);
    public static void Encode(DescribedType value, ByteBuffer buffer);
    public static DescribedType Decode(ByteBuffer buffer);
    public virtual int GetObjectEncodeSize(object value, bool arrayEncoding);
    public virtual void EncodeObject(object value, bool arrayEncoding, ByteBuffer buffer);
    public virtual object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
    private static DescribedType Decode(ByteBuffer buffer, FormatCode formatCode);
}
public class Microsoft.Azure.Amqp.Encoding.DescribedType : object {
    [CompilerGeneratedAttribute]
private object <Descriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public object Descriptor { get; public set; }
    public object Value { get; public set; }
    public DescribedType(object descriptor, object value);
    [CompilerGeneratedAttribute]
public object get_Descriptor();
    [CompilerGeneratedAttribute]
public void set_Descriptor(object value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    public virtual string ToString();
}
internal class Microsoft.Azure.Amqp.Encoding.DoubleEncoding : EncodingBase {
    public static int GetEncodeSize(Nullable`1<double> value);
    public static void Encode(Nullable`1<double> value, ByteBuffer buffer);
    public static Nullable`1<double> Decode(ByteBuffer buffer, FormatCode formatCode);
    public virtual int GetObjectEncodeSize(object value, bool arrayEncoding);
    public virtual void EncodeObject(object value, bool arrayEncoding, ByteBuffer buffer);
    public virtual object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
}
public abstract class Microsoft.Azure.Amqp.Encoding.EncodingBase : object {
    private FormatCode formatCode;
    public FormatCode FormatCode { get; }
    protected EncodingBase(FormatCode formatCode);
    public FormatCode get_FormatCode();
    public abstract virtual int GetObjectEncodeSize(object value, bool arrayEncoding);
    public abstract virtual void EncodeObject(object value, bool arrayEncoding, ByteBuffer buffer);
    public abstract virtual object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
    public static void VerifyFormatCode(FormatCode formatCode, int offset, FormatCode expected);
    public static void VerifyFormatCode(FormatCode formatCode, int offset, FormatCode expected1, FormatCode expected2);
    public static void VerifyFormatCode(FormatCode formatCode, int offset, FormatCode expected1, FormatCode expected2, FormatCode expected3);
    private static void ThrowInvalidFormatCodeException(FormatCode formatCode, int offset);
}
internal static class Microsoft.Azure.Amqp.Encoding.FixedWidth : object {
    public static int FormatCode;
    public static int Null;
    public static int Boolean;
    public static int BooleanVar;
    public static int Zero;
    public static int UByte;
    public static int UShort;
    public static int UInt;
    public static int ULong;
    public static int Byte;
    public static int Short;
    public static int Int;
    public static int Long;
    public static int Float;
    public static int Double;
    public static int Decimal32;
    public static int Decimal64;
    public static int Decimal128;
    public static int Char;
    public static int TimeStamp;
    public static int Uuid;
    public static int NullEncoded;
    public static int BooleanEncoded;
    public static int BooleanVarEncoded;
    public static int ZeroEncoded;
    public static int UByteEncoded;
    public static int UShortEncoded;
    public static int UIntEncoded;
    public static int ULongEncoded;
    public static int ByteEncoded;
    public static int ShortEncoded;
    public static int IntEncoded;
    public static int LongEncoded;
    public static int FloatEncoded;
    public static int DoubleEncoded;
    public static int Decimal32Encoded;
    public static int Decimal64Encoded;
    public static int Decimal128Encoded;
    public static int CharEncoded;
    public static int TimeStampEncoded;
    public static int UuidEncoded;
}
internal class Microsoft.Azure.Amqp.Encoding.FloatEncoding : EncodingBase {
    public static int GetEncodeSize(Nullable`1<float> value);
    public static void Encode(Nullable`1<float> value, ByteBuffer buffer);
    public static Nullable`1<float> Decode(ByteBuffer buffer, FormatCode formatCode);
    public virtual int GetObjectEncodeSize(object value, bool arrayEncoding);
    public virtual void EncodeObject(object value, bool arrayEncoding, ByteBuffer buffer);
    public virtual object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
}
public class Microsoft.Azure.Amqp.Encoding.FormatCode : ValueType {
    public static byte Described;
    public static byte Null;
    public static byte Boolean;
    public static byte BooleanTrue;
    public static byte BooleanFalse;
    public static byte UInt0;
    public static byte ULong0;
    public static byte UByte;
    public static byte UShort;
    public static byte UInt;
    public static byte ULong;
    public static byte Byte;
    public static byte Short;
    public static byte Int;
    public static byte Long;
    public static byte SmallUInt;
    public static byte SmallULong;
    public static byte SmallInt;
    public static byte SmallLong;
    public static byte Float;
    public static byte Double;
    public static byte Decimal32;
    public static byte Decimal64;
    public static byte Decimal128;
    public static byte Char;
    public static byte TimeStamp;
    public static byte Uuid;
    public static byte Binary8;
    public static byte Binary32;
    public static byte String8Utf8;
    public static byte String32Utf8;
    public static byte Symbol8;
    public static byte Symbol32;
    public static byte List0;
    public static byte List8;
    public static byte List32;
    public static byte Map8;
    public static byte Map32;
    public static byte Array8;
    public static byte Array32;
    private byte type;
    private byte extType;
    public byte Type { get; }
    public byte SubType { get; }
    public byte SubCategory { get; }
    public byte ExtType { get; }
    public FormatCode(byte type);
    public FormatCode(byte type, byte extType);
    public byte get_Type();
    public byte get_SubType();
    public byte get_SubCategory();
    public byte get_ExtType();
    public static bool HasExtType(byte type);
    public static FormatCode op_Implicit(byte value);
    public static byte op_Implicit(FormatCode value);
    public static bool op_Equality(FormatCode fc1, FormatCode fc2);
    public static bool op_Inequality(FormatCode fc1, FormatCode fc2);
    public bool HasExtType();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    private sealed virtual override bool System.IEquatable<Microsoft.Azure.Amqp.Encoding.FormatCode>.Equals(FormatCode other);
}
public interface Microsoft.Azure.Amqp.Encoding.IAmqpSerializable {
    public int EncodeSize { get; }
    public abstract virtual int get_EncodeSize();
    public abstract virtual void Encode(ByteBuffer buffer);
    public abstract virtual void Decode(ByteBuffer buffer);
}
internal class Microsoft.Azure.Amqp.Encoding.IntEncoding : EncodingBase {
    public static int GetEncodeSize(Nullable`1<int> value);
    public static void Encode(Nullable`1<int> value, ByteBuffer buffer);
    public static Nullable`1<int> Decode(ByteBuffer buffer, FormatCode formatCode);
    public virtual int GetObjectEncodeSize(object value, bool arrayEncoding);
    public virtual void EncodeObject(object value, bool arrayEncoding, ByteBuffer buffer);
    public virtual object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
}
internal class Microsoft.Azure.Amqp.Encoding.ListEncoding : EncodingBase {
    public static int GetEncodeSize(IList value);
    public static void Encode(IList value, ByteBuffer buffer);
    public static IList Decode(ByteBuffer buffer, FormatCode formatCode);
    public virtual int GetObjectEncodeSize(object value, bool arrayEncoding);
    public virtual void EncodeObject(object value, bool arrayEncoding, ByteBuffer buffer);
    public virtual object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
    public static int GetValueSize(IList value);
    private static void Encode(IList value, int width, int size, ByteBuffer buffer);
}
internal class Microsoft.Azure.Amqp.Encoding.LongEncoding : EncodingBase {
    public static int GetEncodeSize(Nullable`1<long> value);
    public static void Encode(Nullable`1<long> value, ByteBuffer buffer);
    public static Nullable`1<long> Decode(ByteBuffer buffer, FormatCode formatCode);
    public virtual int GetObjectEncodeSize(object value, bool arrayEncoding);
    public virtual void EncodeObject(object value, bool arrayEncoding, ByteBuffer buffer);
    public virtual object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
}
internal class Microsoft.Azure.Amqp.Encoding.MapEncoding : EncodingBase {
    public static int GetValueSize(AmqpMap value);
    public static int GetEncodeSize(AmqpMap value);
    public static void Encode(AmqpMap value, ByteBuffer buffer);
    public static AmqpMap Decode(ByteBuffer buffer, FormatCode formatCode);
    public static void ReadMapValue(ByteBuffer buffer, AmqpMap map, int size, int count);
    private static int GetEncodeWidth(AmqpMap value);
    public virtual int GetObjectEncodeSize(object value, bool arrayEncoding);
    public virtual void EncodeObject(object value, bool arrayEncoding, ByteBuffer buffer);
    public virtual object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
    private static void Encode(AmqpMap value, int width, int size, ByteBuffer buffer);
}
public class Microsoft.Azure.Amqp.Encoding.MapKey : ValueType {
    private object key;
    public object Key { get; }
    public MapKey(object key);
    public object get_Key();
    public sealed virtual bool Equals(MapKey other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class Microsoft.Azure.Amqp.Encoding.ShortEncoding : EncodingBase {
    public static int GetEncodeSize(Nullable`1<short> value);
    public static void Encode(Nullable`1<short> value, ByteBuffer buffer);
    public static Nullable`1<short> Decode(ByteBuffer buffer, FormatCode formatCode);
    public virtual int GetObjectEncodeSize(object value, bool arrayEncoding);
    public virtual void EncodeObject(object value, bool arrayEncoding, ByteBuffer buffer);
    public virtual object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
}
internal class Microsoft.Azure.Amqp.Encoding.StringEncoding : EncodingBase {
    public static int GetEncodeSize(string value);
    public static void Encode(string value, ByteBuffer buffer);
    public static string Decode(ByteBuffer buffer, FormatCode formatCode);
    public virtual int GetObjectEncodeSize(object value, bool arrayEncoding);
    public virtual void EncodeObject(object value, bool arrayEncoding, ByteBuffer buffer);
    public virtual object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
}
internal class Microsoft.Azure.Amqp.Encoding.SymbolEncoding : EncodingBase {
    public static int GetValueSize(AmqpSymbol value);
    public static int GetEncodeSize(AmqpSymbol value);
    public static void Encode(AmqpSymbol value, ByteBuffer buffer);
    public static AmqpSymbol Decode(ByteBuffer buffer, FormatCode formatCode);
    public virtual int GetObjectEncodeSize(object value, bool arrayEncoding);
    public virtual void EncodeObject(object value, bool arrayEncoding, ByteBuffer buffer);
    public virtual object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
}
internal class Microsoft.Azure.Amqp.Encoding.TimeStampEncoding : EncodingBase {
    private static long MaxMilliseconds;
    private static TimeStampEncoding();
    public static int GetEncodeSize(Nullable`1<DateTime> value);
    public static void Encode(Nullable`1<DateTime> value, ByteBuffer buffer);
    public static Nullable`1<DateTime> Decode(ByteBuffer buffer, FormatCode formatCode);
    public virtual int GetObjectEncodeSize(object value, bool arrayEncoding);
    public virtual void EncodeObject(object value, bool arrayEncoding, ByteBuffer buffer);
    public virtual object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
    public static long GetMilliseconds(DateTime value);
    public static DateTime ToDateTime(long milliseconds);
}
internal class Microsoft.Azure.Amqp.Encoding.UByteEncoding : EncodingBase {
    public static int GetEncodeSize(Nullable`1<byte> value);
    public static void Encode(Nullable`1<byte> value, ByteBuffer buffer);
    public static Nullable`1<byte> Decode(ByteBuffer buffer, FormatCode formatCode);
    public virtual int GetObjectEncodeSize(object value, bool arrayEncoding);
    public virtual void EncodeObject(object value, bool arrayEncoding, ByteBuffer buffer);
    public virtual object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
}
internal class Microsoft.Azure.Amqp.Encoding.UIntEncoding : EncodingBase {
    public static int GetEncodeSize(Nullable`1<UInt32> value);
    public static void Encode(Nullable`1<UInt32> value, ByteBuffer buffer);
    public static Nullable`1<UInt32> Decode(ByteBuffer buffer, FormatCode formatCode);
    public virtual int GetObjectEncodeSize(object value, bool arrayEncoding);
    public virtual void EncodeObject(object value, bool arrayEncoding, ByteBuffer buffer);
    public virtual object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
}
internal class Microsoft.Azure.Amqp.Encoding.ULongEncoding : EncodingBase {
    public static int GetEncodeSize(Nullable`1<ulong> value);
    public static void Encode(Nullable`1<ulong> value, ByteBuffer buffer);
    public static Nullable`1<ulong> Decode(ByteBuffer buffer, FormatCode formatCode);
    public virtual int GetObjectEncodeSize(object value, bool arrayEncoding);
    public virtual void EncodeObject(object value, bool arrayEncoding, ByteBuffer buffer);
    public virtual object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
}
internal class Microsoft.Azure.Amqp.Encoding.UShortEncoding : EncodingBase {
    public static int GetEncodeSize(Nullable`1<ushort> value);
    public static void Encode(Nullable`1<ushort> value, ByteBuffer buffer);
    public static Nullable`1<ushort> Decode(ByteBuffer buffer, FormatCode formatCode);
    public virtual int GetObjectEncodeSize(object value, bool arrayEncoding);
    public virtual void EncodeObject(object value, bool arrayEncoding, ByteBuffer buffer);
    public virtual object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
}
internal class Microsoft.Azure.Amqp.Encoding.UuidEncoding : EncodingBase {
    public static int GetEncodeSize(Nullable`1<Guid> value);
    public static void Encode(Nullable`1<Guid> value, ByteBuffer buffer);
    public static Nullable`1<Guid> Decode(ByteBuffer buffer, FormatCode formatCode);
    public virtual int GetObjectEncodeSize(object value, bool arrayEncoding);
    public virtual void EncodeObject(object value, bool arrayEncoding, ByteBuffer buffer);
    public virtual object DecodeObject(ByteBuffer buffer, FormatCode formatCode);
}
internal static class Microsoft.Azure.Amqp.EncodingCache : object {
    private static Object[] boolCache;
    private static Object[] intCache;
    private static KeyValueCache`2<AmqpSymbol, object> boxedSymbolCache;
    private static KeyValueCache`2<ArraySegment`1<byte>, string> encodedSymbolCache;
    private static UlongCache performativeCodes;
    private static UlongCache outcomeCodes;
    private static UlongCache saslCodes;
    private static UlongCache messageCodes;
    private static UlongCache txnCodes;
    private static UlongCache errorCode;
    private static EncodingCache();
    public static object Box(bool value);
    public static object Box(int value);
    public static object Box(AmqpSymbol symbol);
    public static object Box(ulong code);
    public static AmqpSymbol GetSymbol(ArraySegment`1<byte> bytes);
    private static ArraySegment`1<byte> Copy(ArraySegment`1<byte> a);
}
internal class Microsoft.Azure.Amqp.ExceptionDispatcher : object {
    public static void Throw(Exception exception);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Amqp.ExceptionExtensions : object {
    private static string ExceptionIdentifierName;
    [ExtensionAttribute]
public static string ToStringSlim(Exception exception);
}
[ExtensionAttribute]
public static class Microsoft.Azure.Amqp.Extensions : object {
    [ExtensionAttribute]
public static string GetString(ArraySegment`1<byte> binary);
    [ExtensionAttribute]
public static UInt32 MaxFrameSize(Open open);
    [ExtensionAttribute]
public static ushort ChannelMax(Open open);
    [ExtensionAttribute]
public static UInt32 IdleTimeOut(Open open);
    [ExtensionAttribute]
public static ushort RemoteChannel(Begin begin);
    [ExtensionAttribute]
public static UInt32 HandleMax(Begin begin);
    [ExtensionAttribute]
public static UInt32 OutgoingWindow(Begin begin);
    [ExtensionAttribute]
public static UInt32 IncomingWindow(Begin begin);
    [ExtensionAttribute]
public static bool IsReceiver(Attach attach);
    [ExtensionAttribute]
public static bool IncompleteUnsettled(Attach attach);
    [ExtensionAttribute]
public static ulong MaxMessageSize(Attach attach);
    [ExtensionAttribute]
public static Terminus Terminus(Attach attach);
    [ExtensionAttribute]
public static Address Address(Attach attach);
    [ExtensionAttribute]
public static Address Address(Attach attach, bool role);
    [ExtensionAttribute]
public static bool Dynamic(Attach attach);
    [ExtensionAttribute]
public static SettleMode SettleType(Attach attach);
    [ExtensionAttribute]
public static Attach Clone(Attach attach);
    [ExtensionAttribute]
public static AmqpLinkSettings Clone(AmqpLinkSettings settings, bool deepClone);
    [ExtensionAttribute]
public static Source Clone(Source source);
    [ExtensionAttribute]
public static Target Clone(Target target);
    [ExtensionAttribute]
public static bool Settled(Transfer transfer);
    [ExtensionAttribute]
public static bool More(Transfer transfer);
    [ExtensionAttribute]
public static bool Resume(Transfer transfer);
    [ExtensionAttribute]
public static bool Aborted(Transfer transfer);
    [ExtensionAttribute]
public static bool Batchable(Transfer transfer);
    [ExtensionAttribute]
public static bool Settled(Disposition disposition);
    [ExtensionAttribute]
public static bool Batchable(Disposition disposition);
    [ExtensionAttribute]
public static UInt32 LinkCredit(Flow flow);
    [ExtensionAttribute]
public static bool Echo(Flow flow);
    [ExtensionAttribute]
public static bool Closed(Detach detach);
    [ExtensionAttribute]
public static bool Durable(Header header);
    [ExtensionAttribute]
public static byte Priority(Header header);
    [ExtensionAttribute]
public static UInt32 Ttl(Header header);
    [ExtensionAttribute]
public static bool FirstAcquirer(Header header);
    [ExtensionAttribute]
public static UInt32 DeliveryCount(Header header);
    [ExtensionAttribute]
public static DateTime AbsoluteExpiryTime(Properties properties);
    [ExtensionAttribute]
public static DateTime CreationTime(Properties properties);
    [ExtensionAttribute]
public static SequenceNumber GroupSequence(Properties properties);
    [ExtensionAttribute]
public static string TrackingId(Properties properties);
    [ExtensionAttribute]
public static bool Transactional(Delivery delivery);
    [ExtensionAttribute]
public static bool IsReceivedDeliveryState(Delivery delivery);
    [ExtensionAttribute]
public static bool Dynamic(Source source);
    [ExtensionAttribute]
public static bool Dynamic(Target target);
    [ExtensionAttribute]
public static bool Durable(Source source);
    [ExtensionAttribute]
public static bool Durable(Target target);
    [ExtensionAttribute]
public static void UpsertProperty(Begin begin, AmqpSymbol symbol, object value);
    [ExtensionAttribute]
public static void AddProperty(Attach attach, AmqpSymbol symbol, object value);
    [ExtensionAttribute]
public static void UpsertProperty(Attach attach, AmqpSymbol symbol, object value);
    [ExtensionAttribute]
public static void UpsertPropertyIfNotDefault(Attach attach, AmqpSymbol symbol, T value);
    [ExtensionAttribute]
public static void AddProperty(Open open, AmqpSymbol symbol, object value);
    [ExtensionAttribute]
public static TValue GetSettingPropertyOrDefault(AmqpLink thisPtr, AmqpSymbol key, TValue defaultValue);
    [ExtensionAttribute]
public static TValue ExtractSettingPropertyValueOrDefault(AmqpLink thisPtr, AmqpSymbol key, TValue defaultValue);
}
internal class Microsoft.Azure.Amqp.FatalException : Exception {
    public FatalException(string message);
    public FatalException(string message, Exception innerException);
}
public class Microsoft.Azure.Amqp.FaultTolerantAmqpObject`1 : Singleton`1<T> {
    private Func`2<TimeSpan, Task`1<T>> createObjectAsync;
    private Action`1<T> closeObject;
    private EventHandler onObjectClosed;
    public FaultTolerantAmqpObject`1(Func`2<TimeSpan, Task`1<T>> createObjectAsync, Action`1<T> closeObject);
    public bool TryGetOpenedObject(T& openedAmqpObject);
    protected virtual bool IsValid(T value);
    [AsyncStateMachineAttribute("Microsoft.Azure.Amqp.FaultTolerantAmqpObject`1/<OnCreateAsync>d__6")]
protected virtual Task`1<T> OnCreateAsync(TimeSpan timeout, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
protected virtual Task`1<T> OnCreateAsync(TimeSpan timeout);
    protected virtual void OnSafeClose(T value);
    private void OnObjectClosed(object sender, EventArgs e);
}
internal class Microsoft.Azure.Amqp.FrameDecoder : object {
    private int maxFrameSize;
    private ByteBuffer currentFrameBuffer;
    public FrameDecoder(int maxFrameSize);
    public ProtocolHeader ExtractProtocolHeader(ByteBuffer buffer);
    public void ExtractFrameBuffers(ByteBuffer buffer, SerializedWorker`1<ByteBuffer> bufferHandler);
}
public class Microsoft.Azure.Amqp.Framing.Accepted : Outcome {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    protected int FieldCount { get; }
    private static Accepted();
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public abstract class Microsoft.Azure.Amqp.Framing.Address : object {
    public int EncodeSize { get; }
    public abstract virtual int get_EncodeSize();
    public static Address op_Implicit(string value);
    public static int GetEncodeSize(Address address);
    public static void Encode(ByteBuffer buffer, Address address);
    public static Address Decode(ByteBuffer buffer);
    public abstract virtual void OnEncode(ByteBuffer buffer);
}
public class Microsoft.Azure.Amqp.Framing.AmqpDescribed : DescribedType {
    private AmqpSymbol name;
    private ulong code;
    [CompilerGeneratedAttribute]
private long <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Length>k__BackingField;
    public AmqpSymbol DescriptorName { get; }
    public ulong DescriptorCode { get; }
    public int EncodeSize { get; }
    public long Offset { get; public set; }
    public long Length { get; public set; }
    public AmqpDescribed(AmqpSymbol name, ulong code);
    public AmqpSymbol get_DescriptorName();
    public ulong get_DescriptorCode();
    public sealed virtual int get_EncodeSize();
    [CompilerGeneratedAttribute]
public long get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(long value);
    [CompilerGeneratedAttribute]
public long get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(long value);
    public static void DecodeDescriptor(ByteBuffer buffer, AmqpSymbol& name, UInt64& code);
    public virtual string ToString();
    public sealed virtual void Encode(ByteBuffer buffer);
    public sealed virtual void Decode(ByteBuffer buffer);
    public virtual int GetValueEncodeSize();
    public virtual void EncodeValue(ByteBuffer buffer);
    public virtual void DecodeValue(ByteBuffer buffer);
    protected void AddFieldToString(bool condition, StringBuilder sb, string fieldName, object value, Int32& count);
}
public class Microsoft.Azure.Amqp.Framing.AmqpSequence : DescribedList {
    public static string Name;
    public static ulong Code;
    private IList innerList;
    public IList List { get; }
    protected int FieldCount { get; }
    public AmqpSequence(IList innerList);
    private static AmqpSequence();
    public IList get_List();
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual int OnValueSize();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
}
public class Microsoft.Azure.Amqp.Framing.AmqpValue : AmqpDescribed {
    public static string Name;
    public static ulong Code;
    private static AmqpValue();
    public virtual int GetValueEncodeSize();
    public virtual void EncodeValue(ByteBuffer buffer);
    public virtual void DecodeValue(ByteBuffer buffer);
    public virtual string ToString();
}
public class Microsoft.Azure.Amqp.Framing.Annotations : RestrictedMap`1<AmqpSymbol> {
    protected virtual MapKey GetKey(AmqpSymbol key);
}
public class Microsoft.Azure.Amqp.Framing.ApplicationProperties : DescribedMap {
    public static string Name;
    public static ulong Code;
    private PropertiesMap propMap;
    public PropertiesMap Map { get; }
    internal AmqpMap InnerMap { get; }
    private static ApplicationProperties();
    public PropertiesMap get_Map();
    internal virtual AmqpMap get_InnerMap();
}
public class Microsoft.Azure.Amqp.Framing.Attach : LinkPerformative {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private string <LinkName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <SndSettleMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <RcvSettleMode>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpMap <Unsettled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IncompleteUnsettled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <InitialDeliveryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <MaxMessageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Multiple`1<AmqpSymbol> <OfferedCapabilities>k__BackingField;
    [CompilerGeneratedAttribute]
private Multiple`1<AmqpSymbol> <DesiredCapabilities>k__BackingField;
    [CompilerGeneratedAttribute]
private Fields <Properties>k__BackingField;
    public string LinkName { get; public set; }
    public Nullable`1<bool> Role { get; public set; }
    public Nullable`1<byte> SndSettleMode { get; public set; }
    public Nullable`1<byte> RcvSettleMode { get; public set; }
    public object Source { get; public set; }
    public object Target { get; public set; }
    public AmqpMap Unsettled { get; public set; }
    public Nullable`1<bool> IncompleteUnsettled { get; public set; }
    public Nullable`1<UInt32> InitialDeliveryCount { get; public set; }
    public Nullable`1<ulong> MaxMessageSize { get; public set; }
    public Multiple`1<AmqpSymbol> OfferedCapabilities { get; public set; }
    public Multiple`1<AmqpSymbol> DesiredCapabilities { get; public set; }
    public Fields Properties { get; public set; }
    protected int FieldCount { get; }
    private static Attach();
    [CompilerGeneratedAttribute]
public string get_LinkName();
    [CompilerGeneratedAttribute]
public void set_LinkName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Role();
    [CompilerGeneratedAttribute]
public void set_Role(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<byte> get_SndSettleMode();
    [CompilerGeneratedAttribute]
public void set_SndSettleMode(Nullable`1<byte> value);
    [CompilerGeneratedAttribute]
public Nullable`1<byte> get_RcvSettleMode();
    [CompilerGeneratedAttribute]
public void set_RcvSettleMode(Nullable`1<byte> value);
    [CompilerGeneratedAttribute]
public object get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(object value);
    [CompilerGeneratedAttribute]
public object get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(object value);
    [CompilerGeneratedAttribute]
public AmqpMap get_Unsettled();
    [CompilerGeneratedAttribute]
public void set_Unsettled(AmqpMap value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IncompleteUnsettled();
    [CompilerGeneratedAttribute]
public void set_IncompleteUnsettled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_InitialDeliveryCount();
    [CompilerGeneratedAttribute]
public void set_InitialDeliveryCount(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_MaxMessageSize();
    [CompilerGeneratedAttribute]
public void set_MaxMessageSize(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public Multiple`1<AmqpSymbol> get_OfferedCapabilities();
    [CompilerGeneratedAttribute]
public void set_OfferedCapabilities(Multiple`1<AmqpSymbol> value);
    [CompilerGeneratedAttribute]
public Multiple`1<AmqpSymbol> get_DesiredCapabilities();
    [CompilerGeneratedAttribute]
public void set_DesiredCapabilities(Multiple`1<AmqpSymbol> value);
    [CompilerGeneratedAttribute]
public Fields get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(Fields value);
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void EnsureRequired();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public class Microsoft.Azure.Amqp.Framing.Begin : Performative {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private Nullable`1<ushort> <RemoteChannel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <NextOutgoingId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <IncomingWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <OutgoingWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <HandleMax>k__BackingField;
    [CompilerGeneratedAttribute]
private Multiple`1<AmqpSymbol> <OfferedCapabilities>k__BackingField;
    [CompilerGeneratedAttribute]
private Multiple`1<AmqpSymbol> <DesiredCapabilities>k__BackingField;
    [CompilerGeneratedAttribute]
private Fields <Properties>k__BackingField;
    public Nullable`1<ushort> RemoteChannel { get; public set; }
    public Nullable`1<UInt32> NextOutgoingId { get; public set; }
    public Nullable`1<UInt32> IncomingWindow { get; public set; }
    public Nullable`1<UInt32> OutgoingWindow { get; public set; }
    public Nullable`1<UInt32> HandleMax { get; public set; }
    public Multiple`1<AmqpSymbol> OfferedCapabilities { get; public set; }
    public Multiple`1<AmqpSymbol> DesiredCapabilities { get; public set; }
    public Fields Properties { get; public set; }
    protected int FieldCount { get; }
    private static Begin();
    [CompilerGeneratedAttribute]
public Nullable`1<ushort> get_RemoteChannel();
    [CompilerGeneratedAttribute]
public void set_RemoteChannel(Nullable`1<ushort> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_NextOutgoingId();
    [CompilerGeneratedAttribute]
public void set_NextOutgoingId(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_IncomingWindow();
    [CompilerGeneratedAttribute]
public void set_IncomingWindow(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_OutgoingWindow();
    [CompilerGeneratedAttribute]
public void set_OutgoingWindow(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_HandleMax();
    [CompilerGeneratedAttribute]
public void set_HandleMax(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Multiple`1<AmqpSymbol> get_OfferedCapabilities();
    [CompilerGeneratedAttribute]
public void set_OfferedCapabilities(Multiple`1<AmqpSymbol> value);
    [CompilerGeneratedAttribute]
public Multiple`1<AmqpSymbol> get_DesiredCapabilities();
    [CompilerGeneratedAttribute]
public void set_DesiredCapabilities(Multiple`1<AmqpSymbol> value);
    [CompilerGeneratedAttribute]
public Fields get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(Fields value);
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void EnsureRequired();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public class Microsoft.Azure.Amqp.Framing.Close : Performative {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private Error <Error>k__BackingField;
    public Error Error { get; public set; }
    protected int FieldCount { get; }
    private static Close();
    [CompilerGeneratedAttribute]
public Error get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(Error value);
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public class Microsoft.Azure.Amqp.Framing.Data : AmqpDescribed {
    public static string Name;
    public static ulong Code;
    private static Data();
    public static ArraySegment`1<byte> GetEncodedPrefix(int valueLength);
    public virtual int GetValueEncodeSize();
    public virtual void EncodeValue(ByteBuffer buffer);
    public virtual void DecodeValue(ByteBuffer buffer);
    public virtual string ToString();
}
public class Microsoft.Azure.Amqp.Framing.DeleteOnClose : LifeTimePolicy {
    public static string Name;
    public static ulong Code;
    private static DeleteOnClose();
    public virtual string ToString();
}
public class Microsoft.Azure.Amqp.Framing.DeleteOnNoLinks : LifeTimePolicy {
    public static string Name;
    public static ulong Code;
    private static DeleteOnNoLinks();
    public virtual string ToString();
}
public class Microsoft.Azure.Amqp.Framing.DeleteOnNoLinksOrMessages : LifeTimePolicy {
    public static string Name;
    public static ulong Code;
    private static DeleteOnNoLinksOrMessages();
    public virtual string ToString();
}
public class Microsoft.Azure.Amqp.Framing.DeleteOnNoMessages : LifeTimePolicy {
    public static string Name;
    public static ulong Code;
    private static DeleteOnNoMessages();
    public virtual string ToString();
}
public class Microsoft.Azure.Amqp.Framing.DeliveryAnnotations : DescribedAnnotations {
    public static string Name;
    public static ulong Code;
    private static DeliveryAnnotations();
}
public abstract class Microsoft.Azure.Amqp.Framing.DeliveryState : DescribedList {
    public DeliveryState(AmqpSymbol name, ulong code);
}
public abstract class Microsoft.Azure.Amqp.Framing.DescribedAnnotations : DescribedMap {
    private Annotations annotations;
    public Annotations Map { get; }
    internal AmqpMap InnerMap { get; }
    protected DescribedAnnotations(AmqpSymbol name, ulong code);
    public Annotations get_Map();
    internal virtual AmqpMap get_InnerMap();
}
public abstract class Microsoft.Azure.Amqp.Framing.DescribedList : AmqpDescribed {
    protected int FieldCount { get; }
    public DescribedList(AmqpSymbol name, ulong code);
    protected abstract virtual int get_FieldCount();
    public virtual int GetValueEncodeSize();
    public virtual void EncodeValue(ByteBuffer buffer);
    public virtual void DecodeValue(ByteBuffer buffer);
    public void DecodeValue(ByteBuffer buffer, int size, int count);
    protected virtual void EnsureRequired();
    protected abstract virtual int OnValueSize();
    protected abstract virtual void OnEncode(ByteBuffer buffer);
    protected abstract virtual void OnDecode(ByteBuffer buffer, int count);
}
public abstract class Microsoft.Azure.Amqp.Framing.DescribedMap : AmqpDescribed {
    internal AmqpMap InnerMap { get; }
    public DescribedMap(AmqpSymbol name, ulong code);
    internal abstract virtual AmqpMap get_InnerMap();
    public virtual int GetValueEncodeSize();
    public virtual void EncodeValue(ByteBuffer buffer);
    public virtual void DecodeValue(ByteBuffer buffer);
    public void DecodeValue(ByteBuffer buffer, int size, int count);
}
public class Microsoft.Azure.Amqp.Framing.Detach : LinkPerformative {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Closed>k__BackingField;
    [CompilerGeneratedAttribute]
private Error <Error>k__BackingField;
    public Nullable`1<bool> Closed { get; public set; }
    public Error Error { get; public set; }
    protected int FieldCount { get; }
    private static Detach();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Closed();
    [CompilerGeneratedAttribute]
public void set_Closed(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Error get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(Error value);
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void EnsureRequired();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public class Microsoft.Azure.Amqp.Framing.Disposition : Performative {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <First>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <Last>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Settled>k__BackingField;
    [CompilerGeneratedAttribute]
private DeliveryState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Batchable>k__BackingField;
    public Nullable`1<bool> Role { get; public set; }
    public Nullable`1<UInt32> First { get; public set; }
    public Nullable`1<UInt32> Last { get; public set; }
    public Nullable`1<bool> Settled { get; public set; }
    public DeliveryState State { get; public set; }
    public Nullable`1<bool> Batchable { get; public set; }
    protected int FieldCount { get; }
    private static Disposition();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Role();
    [CompilerGeneratedAttribute]
public void set_Role(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_First();
    [CompilerGeneratedAttribute]
public void set_First(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_Last();
    [CompilerGeneratedAttribute]
public void set_Last(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Settled();
    [CompilerGeneratedAttribute]
public void set_Settled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public DeliveryState get_State();
    [CompilerGeneratedAttribute]
public void set_State(DeliveryState value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Batchable();
    [CompilerGeneratedAttribute]
public void set_Batchable(Nullable`1<bool> value);
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void EnsureRequired();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
internal class Microsoft.Azure.Amqp.Framing.DistributionMode : object {
    public static AmqpSymbol Move;
    public static AmqpSymbol Copy;
    private static DistributionMode();
}
public class Microsoft.Azure.Amqp.Framing.End : Performative {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private Error <Error>k__BackingField;
    public Error Error { get; public set; }
    protected int FieldCount { get; }
    private static End();
    [CompilerGeneratedAttribute]
public Error get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(Error value);
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public class Microsoft.Azure.Amqp.Framing.Error : DescribedList {
    public static string Name;
    public static ulong Code;
    public static bool IncludeErrorDetails;
    private static int Fields;
    private static int MaxSizeInInfoMap;
    [CompilerGeneratedAttribute]
private AmqpSymbol <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Fields <Info>k__BackingField;
    public AmqpSymbol Condition { get; public set; }
    public string Description { get; public set; }
    public Fields Info { get; public set; }
    protected int FieldCount { get; }
    private static Error();
    [CompilerGeneratedAttribute]
public AmqpSymbol get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(AmqpSymbol value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Fields get_Info();
    [CompilerGeneratedAttribute]
public void set_Info(Fields value);
    protected virtual int get_FieldCount();
    public static Error FromException(Exception exception);
    public virtual string ToString();
    protected virtual void EnsureRequired();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public class Microsoft.Azure.Amqp.Framing.Fields : RestrictedMap`1<AmqpSymbol> {
    protected virtual MapKey GetKey(AmqpSymbol key);
}
public class Microsoft.Azure.Amqp.Framing.FilterSet : RestrictedMap`1<AmqpSymbol> {
    protected virtual MapKey GetKey(AmqpSymbol key);
}
public class Microsoft.Azure.Amqp.Framing.Flow : LinkPerformative {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <NextIncomingId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <IncomingWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <NextOutgoingId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <OutgoingWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <DeliveryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <LinkCredit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <Available>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Drain>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Echo>k__BackingField;
    [CompilerGeneratedAttribute]
private Fields <Properties>k__BackingField;
    public Nullable`1<UInt32> NextIncomingId { get; public set; }
    public Nullable`1<UInt32> IncomingWindow { get; public set; }
    public Nullable`1<UInt32> NextOutgoingId { get; public set; }
    public Nullable`1<UInt32> OutgoingWindow { get; public set; }
    public Nullable`1<UInt32> DeliveryCount { get; public set; }
    public Nullable`1<UInt32> LinkCredit { get; public set; }
    public Nullable`1<UInt32> Available { get; public set; }
    public Nullable`1<bool> Drain { get; public set; }
    public Nullable`1<bool> Echo { get; public set; }
    public Fields Properties { get; public set; }
    protected int FieldCount { get; }
    private static Flow();
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_NextIncomingId();
    [CompilerGeneratedAttribute]
public void set_NextIncomingId(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_IncomingWindow();
    [CompilerGeneratedAttribute]
public void set_IncomingWindow(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_NextOutgoingId();
    [CompilerGeneratedAttribute]
public void set_NextOutgoingId(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_OutgoingWindow();
    [CompilerGeneratedAttribute]
public void set_OutgoingWindow(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_DeliveryCount();
    [CompilerGeneratedAttribute]
public void set_DeliveryCount(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_LinkCredit();
    [CompilerGeneratedAttribute]
public void set_LinkCredit(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_Available();
    [CompilerGeneratedAttribute]
public void set_Available(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Drain();
    [CompilerGeneratedAttribute]
public void set_Drain(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Echo();
    [CompilerGeneratedAttribute]
public void set_Echo(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Fields get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(Fields value);
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void EnsureRequired();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public class Microsoft.Azure.Amqp.Framing.Footer : DescribedAnnotations {
    public static string Name;
    public static ulong Code;
    private static Footer();
    public virtual string ToString();
}
public class Microsoft.Azure.Amqp.Framing.Frame : object {
    public static int HeaderSize;
    private static byte DefaultDataOffset;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <DataOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private FrameType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Channel>k__BackingField;
    [CompilerGeneratedAttribute]
private Performative <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private ArraySegment`1<byte> <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private ByteBuffer <RawByteBuffer>k__BackingField;
    public int Size { get; private set; }
    public byte DataOffset { get; private set; }
    public FrameType Type { get; private set; }
    public ushort Channel { get; public set; }
    public Performative Command { get; public set; }
    public ArraySegment`1<byte> Payload { get; public set; }
    public ByteBuffer RawByteBuffer { get; private set; }
    public Frame(FrameType type);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(int value);
    [CompilerGeneratedAttribute]
public byte get_DataOffset();
    [CompilerGeneratedAttribute]
private void set_DataOffset(byte value);
    [CompilerGeneratedAttribute]
public FrameType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(FrameType value);
    [CompilerGeneratedAttribute]
public ushort get_Channel();
    [CompilerGeneratedAttribute]
public void set_Channel(ushort value);
    [CompilerGeneratedAttribute]
public Performative get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(Performative value);
    [CompilerGeneratedAttribute]
public ArraySegment`1<byte> get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(ArraySegment`1<byte> value);
    [CompilerGeneratedAttribute]
public ByteBuffer get_RawByteBuffer();
    [CompilerGeneratedAttribute]
private void set_RawByteBuffer(ByteBuffer value);
    public static ByteBuffer EncodeCommand(FrameType type, ushort channel, Performative command, int payloadSize);
    public void Decode(ByteBuffer buffer);
    public virtual string ToString();
    private void DecodeHeader(ByteBuffer buffer);
    private void DecodeCommand(ByteBuffer buffer);
    private void DecodePayload(ByteBuffer buffer);
    public sealed virtual void Dispose();
}
public enum Microsoft.Azure.Amqp.Framing.FrameType : Enum {
    public byte value__;
    public static FrameType Amqp;
    public static FrameType Sasl;
}
public class Microsoft.Azure.Amqp.Framing.Header : DescribedList {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Durable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <Ttl>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <FirstAcquirer>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <DeliveryCount>k__BackingField;
    public Nullable`1<bool> Durable { get; public set; }
    public Nullable`1<byte> Priority { get; public set; }
    public Nullable`1<UInt32> Ttl { get; public set; }
    public Nullable`1<bool> FirstAcquirer { get; public set; }
    public Nullable`1<UInt32> DeliveryCount { get; public set; }
    protected int FieldCount { get; }
    private static Header();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Durable();
    [CompilerGeneratedAttribute]
public void set_Durable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<byte> get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(Nullable`1<byte> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_Ttl();
    [CompilerGeneratedAttribute]
public void set_Ttl(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_FirstAcquirer();
    [CompilerGeneratedAttribute]
public void set_FirstAcquirer(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_DeliveryCount();
    [CompilerGeneratedAttribute]
public void set_DeliveryCount(Nullable`1<UInt32> value);
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public abstract class Microsoft.Azure.Amqp.Framing.LifeTimePolicy : DescribedList {
    private static int Fields;
    protected int FieldCount { get; }
    protected LifeTimePolicy(AmqpSymbol name, ulong code);
    protected virtual int get_FieldCount();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public abstract class Microsoft.Azure.Amqp.Framing.LinkPerformative : Performative {
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <Handle>k__BackingField;
    public Nullable`1<UInt32> Handle { get; public set; }
    protected LinkPerformative(AmqpSymbol name, ulong code);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_Handle();
    [CompilerGeneratedAttribute]
public void set_Handle(Nullable`1<UInt32> value);
}
public class Microsoft.Azure.Amqp.Framing.MessageAnnotations : DescribedAnnotations {
    public static string Name;
    public static ulong Code;
    private static MessageAnnotations();
}
public abstract class Microsoft.Azure.Amqp.Framing.MessageId : object {
    public int EncodeSize { get; }
    public abstract virtual int get_EncodeSize();
    public static MessageId op_Implicit(ulong value);
    public static MessageId op_Implicit(Guid value);
    public static MessageId op_Implicit(ArraySegment`1<byte> value);
    public static MessageId op_Implicit(string value);
    public static int GetEncodeSize(MessageId messageId);
    public static void Encode(ByteBuffer buffer, MessageId messageId);
    public static MessageId Decode(ByteBuffer buffer);
    public abstract virtual void OnEncode(ByteBuffer buffer);
}
public class Microsoft.Azure.Amqp.Framing.Modified : Outcome {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DeliveryFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UndeliverableHere>k__BackingField;
    [CompilerGeneratedAttribute]
private Fields <MessageAnnotations>k__BackingField;
    public Nullable`1<bool> DeliveryFailed { get; public set; }
    public Nullable`1<bool> UndeliverableHere { get; public set; }
    public Fields MessageAnnotations { get; public set; }
    protected int FieldCount { get; }
    private static Modified();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DeliveryFailed();
    [CompilerGeneratedAttribute]
public void set_DeliveryFailed(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UndeliverableHere();
    [CompilerGeneratedAttribute]
public void set_UndeliverableHere(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Fields get_MessageAnnotations();
    [CompilerGeneratedAttribute]
public void set_MessageAnnotations(Fields value);
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public class Microsoft.Azure.Amqp.Framing.Multiple`1 : object {
    private List`1<T> value;
    public Multiple`1(IList`1<T> value);
    public void Add(T item);
    public bool Contains(T item);
    public static int GetEncodeSize(Multiple`1<T> multiple);
    public static void Encode(Multiple`1<T> multiple, ByteBuffer buffer);
    public static Multiple`1<T> Decode(ByteBuffer buffer);
    public static IList`1<T> Intersect(Multiple`1<T> multiple1, Multiple`1<T> multiple2);
    public virtual string ToString();
}
public class Microsoft.Azure.Amqp.Framing.Open : Performative {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    private Nullable`1<UInt32> idleTimeOut;
    private bool isUserIdleTimeOut;
    [CompilerGeneratedAttribute]
private string <ContainerId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <MaxFrameSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ushort> <ChannelMax>k__BackingField;
    [CompilerGeneratedAttribute]
private Multiple`1<AmqpSymbol> <OutgoingLocales>k__BackingField;
    [CompilerGeneratedAttribute]
private Multiple`1<AmqpSymbol> <IncomingLocales>k__BackingField;
    [CompilerGeneratedAttribute]
private Multiple`1<AmqpSymbol> <OfferedCapabilities>k__BackingField;
    [CompilerGeneratedAttribute]
private Multiple`1<AmqpSymbol> <DesiredCapabilities>k__BackingField;
    [CompilerGeneratedAttribute]
private Fields <Properties>k__BackingField;
    public string ContainerId { get; public set; }
    public string HostName { get; public set; }
    public Nullable`1<UInt32> MaxFrameSize { get; public set; }
    public Nullable`1<ushort> ChannelMax { get; public set; }
    public Nullable`1<UInt32> IdleTimeOut { get; public set; }
    public Multiple`1<AmqpSymbol> OutgoingLocales { get; public set; }
    public Multiple`1<AmqpSymbol> IncomingLocales { get; public set; }
    public Multiple`1<AmqpSymbol> OfferedCapabilities { get; public set; }
    public Multiple`1<AmqpSymbol> DesiredCapabilities { get; public set; }
    public Fields Properties { get; public set; }
    protected int FieldCount { get; }
    private Nullable`1<UInt32> ProtocolIdleTimeout { get; }
    private static Open();
    [CompilerGeneratedAttribute]
public string get_ContainerId();
    [CompilerGeneratedAttribute]
public void set_ContainerId(string value);
    [CompilerGeneratedAttribute]
public string get_HostName();
    [CompilerGeneratedAttribute]
public void set_HostName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_MaxFrameSize();
    [CompilerGeneratedAttribute]
public void set_MaxFrameSize(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ushort> get_ChannelMax();
    [CompilerGeneratedAttribute]
public void set_ChannelMax(Nullable`1<ushort> value);
    public Nullable`1<UInt32> get_IdleTimeOut();
    public void set_IdleTimeOut(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Multiple`1<AmqpSymbol> get_OutgoingLocales();
    [CompilerGeneratedAttribute]
public void set_OutgoingLocales(Multiple`1<AmqpSymbol> value);
    [CompilerGeneratedAttribute]
public Multiple`1<AmqpSymbol> get_IncomingLocales();
    [CompilerGeneratedAttribute]
public void set_IncomingLocales(Multiple`1<AmqpSymbol> value);
    [CompilerGeneratedAttribute]
public Multiple`1<AmqpSymbol> get_OfferedCapabilities();
    [CompilerGeneratedAttribute]
public void set_OfferedCapabilities(Multiple`1<AmqpSymbol> value);
    [CompilerGeneratedAttribute]
public Multiple`1<AmqpSymbol> get_DesiredCapabilities();
    [CompilerGeneratedAttribute]
public void set_DesiredCapabilities(Multiple`1<AmqpSymbol> value);
    [CompilerGeneratedAttribute]
public Fields get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(Fields value);
    protected virtual int get_FieldCount();
    private Nullable`1<UInt32> get_ProtocolIdleTimeout();
    public virtual string ToString();
    protected virtual void EnsureRequired();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
    internal void CopyIdleTimeOut(Open source);
}
public abstract class Microsoft.Azure.Amqp.Framing.Outcome : DeliveryState {
    protected Outcome(AmqpSymbol name, ulong code);
}
public abstract class Microsoft.Azure.Amqp.Framing.Performative : DescribedList {
    protected Performative(AmqpSymbol name, ulong code);
}
public class Microsoft.Azure.Amqp.Framing.Properties : DescribedList {
    public static string Name;
    public static ulong Code;
    public static string MessageIdName;
    public static string UserIdName;
    public static string ToName;
    public static string SubjectName;
    public static string ReplyToName;
    public static string CorrelationIdName;
    public static string ContentTypeName;
    public static string ContentEncodingName;
    public static string AbsoluteExpiryTimeName;
    public static string CreationTimeName;
    public static string GroupIdName;
    public static string GroupSequenceName;
    public static string ReplyToGroupIdName;
    private static int Fields;
    [CompilerGeneratedAttribute]
private MessageId <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private ArraySegment`1<byte> <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private Address <To>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private Address <ReplyTo>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageId <CorrelationId>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpSymbol <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpSymbol <ContentEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <AbsoluteExpiryTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <GroupSequence>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplyToGroupId>k__BackingField;
    public MessageId MessageId { get; public set; }
    public ArraySegment`1<byte> UserId { get; public set; }
    public Address To { get; public set; }
    public string Subject { get; public set; }
    public Address ReplyTo { get; public set; }
    public MessageId CorrelationId { get; public set; }
    public AmqpSymbol ContentType { get; public set; }
    public AmqpSymbol ContentEncoding { get; public set; }
    public Nullable`1<DateTime> AbsoluteExpiryTime { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    public string GroupId { get; public set; }
    public Nullable`1<UInt32> GroupSequence { get; public set; }
    public string ReplyToGroupId { get; public set; }
    protected int FieldCount { get; }
    private static Properties();
    [CompilerGeneratedAttribute]
public MessageId get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(MessageId value);
    [CompilerGeneratedAttribute]
public ArraySegment`1<byte> get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(ArraySegment`1<byte> value);
    [CompilerGeneratedAttribute]
public Address get_To();
    [CompilerGeneratedAttribute]
public void set_To(Address value);
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public Address get_ReplyTo();
    [CompilerGeneratedAttribute]
public void set_ReplyTo(Address value);
    [CompilerGeneratedAttribute]
public MessageId get_CorrelationId();
    [CompilerGeneratedAttribute]
public void set_CorrelationId(MessageId value);
    [CompilerGeneratedAttribute]
public AmqpSymbol get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(AmqpSymbol value);
    [CompilerGeneratedAttribute]
public AmqpSymbol get_ContentEncoding();
    [CompilerGeneratedAttribute]
public void set_ContentEncoding(AmqpSymbol value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_AbsoluteExpiryTime();
    [CompilerGeneratedAttribute]
public void set_AbsoluteExpiryTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_CreationTime();
    [CompilerGeneratedAttribute]
public void set_CreationTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_GroupId();
    [CompilerGeneratedAttribute]
public void set_GroupId(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_GroupSequence();
    [CompilerGeneratedAttribute]
public void set_GroupSequence(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public string get_ReplyToGroupId();
    [CompilerGeneratedAttribute]
public void set_ReplyToGroupId(string value);
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public class Microsoft.Azure.Amqp.Framing.PropertiesMap : RestrictedMap`1<string> {
}
public class Microsoft.Azure.Amqp.Framing.ProtocolHeader : object {
    public static ProtocolHeader Amqp100;
    public static ProtocolHeader AmqpTls100;
    public static ProtocolHeader AmqpSasl100;
    private static UInt32 AmqpPrefix;
    private ProtocolId protocolId;
    private AmqpVersion version;
    public ProtocolId ProtocolId { get; }
    public AmqpVersion Version { get; }
    public int EncodeSize { get; }
    public ProtocolHeader(ProtocolId id, AmqpVersion version);
    private static ProtocolHeader();
    public ProtocolId get_ProtocolId();
    public AmqpVersion get_Version();
    public sealed virtual int get_EncodeSize();
    public sealed virtual void Encode(ByteBuffer buffer);
    public sealed virtual void Decode(ByteBuffer buffer);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Microsoft.Azure.Amqp.Framing.Received : DeliveryState {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <SectionNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <SectionOffset>k__BackingField;
    public Nullable`1<UInt32> SectionNumber { get; public set; }
    public Nullable`1<ulong> SectionOffset { get; public set; }
    protected int FieldCount { get; }
    private static Received();
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_SectionNumber();
    [CompilerGeneratedAttribute]
public void set_SectionNumber(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_SectionOffset();
    [CompilerGeneratedAttribute]
public void set_SectionOffset(Nullable`1<ulong> value);
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public enum Microsoft.Azure.Amqp.Framing.ReceiverSettleMode : Enum {
    public byte value__;
    public static ReceiverSettleMode First;
    public static ReceiverSettleMode Second;
}
public class Microsoft.Azure.Amqp.Framing.Rejected : Outcome {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private Error <Error>k__BackingField;
    public Error Error { get; public set; }
    protected int FieldCount { get; }
    private static Rejected();
    [CompilerGeneratedAttribute]
public Error get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(Error value);
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public class Microsoft.Azure.Amqp.Framing.Released : Outcome {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    protected int FieldCount { get; }
    private static Released();
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public abstract class Microsoft.Azure.Amqp.Framing.RestrictedMap : AmqpMap {
    [ObsoleteAttribute]
protected AmqpMap InnerMap { get; }
    protected AmqpMap get_InnerMap();
    [ObsoleteAttribute]
public void SetMap(AmqpMap map);
    public IEnumerator`1<KeyValuePair`2<MapKey, object>> GetEnumerator();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.Azure.Amqp.Framing.RestrictedMap`1 : RestrictedMap {
    public object Item { get; public set; }
    public object get_Item(TKey key);
    public void set_Item(TKey key, object value);
    public bool TryGetValue(TKey key, TValue& value);
    public bool TryRemoveValue(TKey key, TValue& value);
    public void Add(TKey key, object value);
    public void Merge(RestrictedMap`1<TKey> map);
    protected virtual MapKey GetKey(TKey key);
}
public enum Microsoft.Azure.Amqp.Framing.SenderSettleMode : Enum {
    public byte value__;
    public static SenderSettleMode Unsettled;
    public static SenderSettleMode Settled;
    public static SenderSettleMode Mixed;
}
public class Microsoft.Azure.Amqp.Framing.Source : DescribedList {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private Address <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <Durable>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpSymbol <ExpiryPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Dynamic>k__BackingField;
    [CompilerGeneratedAttribute]
private Fields <DynamicNodeProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpSymbol <DistributionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterSet <FilterSet>k__BackingField;
    [CompilerGeneratedAttribute]
private Outcome <DefaultOutcome>k__BackingField;
    [CompilerGeneratedAttribute]
private Multiple`1<AmqpSymbol> <Outcomes>k__BackingField;
    [CompilerGeneratedAttribute]
private Multiple`1<AmqpSymbol> <Capabilities>k__BackingField;
    public Address Address { get; public set; }
    public Nullable`1<UInt32> Durable { get; public set; }
    public AmqpSymbol ExpiryPolicy { get; public set; }
    public Nullable`1<UInt32> Timeout { get; public set; }
    public Nullable`1<bool> Dynamic { get; public set; }
    public Fields DynamicNodeProperties { get; public set; }
    public AmqpSymbol DistributionMode { get; public set; }
    public FilterSet FilterSet { get; public set; }
    public Outcome DefaultOutcome { get; public set; }
    public Multiple`1<AmqpSymbol> Outcomes { get; public set; }
    public Multiple`1<AmqpSymbol> Capabilities { get; public set; }
    protected int FieldCount { get; }
    public Source(Uri uri);
    private static Source();
    [CompilerGeneratedAttribute]
public Address get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(Address value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_Durable();
    [CompilerGeneratedAttribute]
public void set_Durable(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public AmqpSymbol get_ExpiryPolicy();
    [CompilerGeneratedAttribute]
public void set_ExpiryPolicy(AmqpSymbol value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Dynamic();
    [CompilerGeneratedAttribute]
public void set_Dynamic(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Fields get_DynamicNodeProperties();
    [CompilerGeneratedAttribute]
public void set_DynamicNodeProperties(Fields value);
    [CompilerGeneratedAttribute]
public AmqpSymbol get_DistributionMode();
    [CompilerGeneratedAttribute]
public void set_DistributionMode(AmqpSymbol value);
    [CompilerGeneratedAttribute]
public FilterSet get_FilterSet();
    [CompilerGeneratedAttribute]
public void set_FilterSet(FilterSet value);
    [CompilerGeneratedAttribute]
public Outcome get_DefaultOutcome();
    [CompilerGeneratedAttribute]
public void set_DefaultOutcome(Outcome value);
    [CompilerGeneratedAttribute]
public Multiple`1<AmqpSymbol> get_Outcomes();
    [CompilerGeneratedAttribute]
public void set_Outcomes(Multiple`1<AmqpSymbol> value);
    [CompilerGeneratedAttribute]
public Multiple`1<AmqpSymbol> get_Capabilities();
    [CompilerGeneratedAttribute]
public void set_Capabilities(Multiple`1<AmqpSymbol> value);
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public class Microsoft.Azure.Amqp.Framing.Target : DescribedList {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private Address <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <Durable>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpSymbol <ExpiryPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Dynamic>k__BackingField;
    [CompilerGeneratedAttribute]
private Fields <DynamicNodeProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private Multiple`1<AmqpSymbol> <Capabilities>k__BackingField;
    public Address Address { get; public set; }
    public Nullable`1<UInt32> Durable { get; public set; }
    public AmqpSymbol ExpiryPolicy { get; public set; }
    public Nullable`1<UInt32> Timeout { get; public set; }
    public Nullable`1<bool> Dynamic { get; public set; }
    public Fields DynamicNodeProperties { get; public set; }
    public Multiple`1<AmqpSymbol> Capabilities { get; public set; }
    protected int FieldCount { get; }
    public Target(Uri uri);
    private static Target();
    [CompilerGeneratedAttribute]
public Address get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(Address value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_Durable();
    [CompilerGeneratedAttribute]
public void set_Durable(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public AmqpSymbol get_ExpiryPolicy();
    [CompilerGeneratedAttribute]
public void set_ExpiryPolicy(AmqpSymbol value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Dynamic();
    [CompilerGeneratedAttribute]
public void set_Dynamic(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Fields get_DynamicNodeProperties();
    [CompilerGeneratedAttribute]
public void set_DynamicNodeProperties(Fields value);
    [CompilerGeneratedAttribute]
public Multiple`1<AmqpSymbol> get_Capabilities();
    [CompilerGeneratedAttribute]
public void set_Capabilities(Multiple`1<AmqpSymbol> value);
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public class Microsoft.Azure.Amqp.Framing.Terminus : object {
    private Source source;
    private Target target;
    public Address Address { get; }
    public TerminusDurability Durable { get; }
    public AmqpSymbol ExpiryPolicy { get; }
    public Nullable`1<UInt32> Timeout { get; }
    public Nullable`1<bool> Dynamic { get; }
    public AmqpMap DynamicNodeProperties { get; }
    public Multiple`1<AmqpSymbol> Capabilities { get; }
    public Terminus(Source source);
    public Terminus(Target target);
    public Address get_Address();
    public TerminusDurability get_Durable();
    public AmqpSymbol get_ExpiryPolicy();
    public Nullable`1<UInt32> get_Timeout();
    public Nullable`1<bool> get_Dynamic();
    public AmqpMap get_DynamicNodeProperties();
    public Multiple`1<AmqpSymbol> get_Capabilities();
}
public enum Microsoft.Azure.Amqp.Framing.TerminusDurability : Enum {
    public UInt32 value__;
    public static TerminusDurability None;
    public static TerminusDurability Configuration;
    public static TerminusDurability UnsettledState;
}
public class Microsoft.Azure.Amqp.Framing.TerminusExpiryPolicy : object {
    public static AmqpSymbol LinkDetach;
    public static AmqpSymbol SessionEnd;
    public static AmqpSymbol ConnectionClose;
    public static AmqpSymbol Never;
    private static TerminusExpiryPolicy();
}
public class Microsoft.Azure.Amqp.Framing.Transfer : LinkPerformative {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <DeliveryId>k__BackingField;
    [CompilerGeneratedAttribute]
private ArraySegment`1<byte> <DeliveryTag>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <MessageFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Settled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <More>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <RcvSettleMode>k__BackingField;
    [CompilerGeneratedAttribute]
private DeliveryState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Resume>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Aborted>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Batchable>k__BackingField;
    public Nullable`1<UInt32> DeliveryId { get; public set; }
    public ArraySegment`1<byte> DeliveryTag { get; public set; }
    public Nullable`1<UInt32> MessageFormat { get; public set; }
    public Nullable`1<bool> Settled { get; public set; }
    public Nullable`1<bool> More { get; public set; }
    public Nullable`1<byte> RcvSettleMode { get; public set; }
    public DeliveryState State { get; public set; }
    public Nullable`1<bool> Resume { get; public set; }
    public Nullable`1<bool> Aborted { get; public set; }
    public Nullable`1<bool> Batchable { get; public set; }
    protected int FieldCount { get; }
    private static Transfer();
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_DeliveryId();
    [CompilerGeneratedAttribute]
public void set_DeliveryId(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public ArraySegment`1<byte> get_DeliveryTag();
    [CompilerGeneratedAttribute]
public void set_DeliveryTag(ArraySegment`1<byte> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_MessageFormat();
    [CompilerGeneratedAttribute]
public void set_MessageFormat(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Settled();
    [CompilerGeneratedAttribute]
public void set_Settled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_More();
    [CompilerGeneratedAttribute]
public void set_More(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<byte> get_RcvSettleMode();
    [CompilerGeneratedAttribute]
public void set_RcvSettleMode(Nullable`1<byte> value);
    [CompilerGeneratedAttribute]
public DeliveryState get_State();
    [CompilerGeneratedAttribute]
public void set_State(DeliveryState value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Resume();
    [CompilerGeneratedAttribute]
public void set_Resume(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Aborted();
    [CompilerGeneratedAttribute]
public void set_Aborted(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Batchable();
    [CompilerGeneratedAttribute]
public void set_Batchable(Nullable`1<bool> value);
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void EnsureRequired();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
internal static class Microsoft.Azure.Amqp.Fx : object {
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool condition, string description);
    [ConditionalAttribute("DEBUG")]
public static void Assert(string description);
    public static void AssertAndThrow(bool condition, string description);
    public static void AssertIsNotNull(object objectMayBeNull, string description);
    public static Exception AssertAndThrow(string description);
    public static void AssertAndThrowFatal(bool condition, string description);
    public static Exception AssertAndThrowFatal(string description);
    public static bool IsFatal(Exception exception);
}
public class Microsoft.Azure.Amqp.HandleTable`1 : object {
    private static int InitialCapacity;
    private static int ResetThreshold;
    private UInt32 maxHandle;
    private T[] handleArray;
    private int count;
    public IEnumerable`1<T> Values { get; }
    public HandleTable`1(UInt32 maxHandle);
    public IEnumerable`1<T> get_Values();
    public void SetMaxHandle(UInt32 maxHandle);
    public IEnumerator`1<T> GetSafeEnumerator();
    public bool TryGetObject(UInt32 handle, T& value);
    public UInt32 Add(T value);
    public void Add(UInt32 handle, T value);
    public void Remove(UInt32 handle);
    public void Clear();
    private void GrowHandleArray(int capacity);
    private static int UpperPowerOfTwo(int from, int num);
}
public interface Microsoft.Azure.Amqp.IAmqpProvider {
}
public interface Microsoft.Azure.Amqp.IAmqpUsageMeter {
    public abstract virtual void OnRead(AmqpConnection connection, ulong frameCode, int numberOfBytes);
    public abstract virtual void OnWrite(AmqpConnection connection, ulong frameCode, int numberOfBytes);
}
public interface Microsoft.Azure.Amqp.ICbsTokenProvider {
    public abstract virtual Task`1<CbsToken> GetTokenAsync(Uri namespaceAddress, string appliesTo, String[] requiredClaims);
}
public interface Microsoft.Azure.Amqp.IConnectionFactory {
    public abstract virtual AmqpConnection CreateConnection(TransportBase transport, ProtocolHeader protocolHeader, bool isInitiator, AmqpSettings amqpSettings, AmqpConnectionSettings connectionSettings);
}
public interface Microsoft.Azure.Amqp.IIoHandler {
    public abstract virtual void OnReceiveBuffer(ByteBuffer buffer);
    public abstract virtual void OnIoFault(Exception exception);
    public abstract virtual void OnIoEvent(IoEvent ioEvent, long queueSize);
}
public interface Microsoft.Azure.Amqp.ILinkFactory {
    public abstract virtual AmqpLink CreateLink(AmqpSession session, AmqpLinkSettings settings);
    public abstract virtual IAsyncResult BeginOpenLink(AmqpLink link, TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual void EndOpenLink(IAsyncResult result);
}
public interface Microsoft.Azure.Amqp.INodeFactory {
    public abstract virtual IAsyncResult BeginCreateNode(string address, Fields properties, TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual void EndCreateNode(IAsyncResult result);
    public abstract virtual IAsyncResult BeginDeleteNode(string address, TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual void EndDeleteNode(IAsyncResult result);
}
internal abstract class Microsoft.Azure.Amqp.InternalBufferManager : object {
    public abstract virtual Byte[] TakeBuffer(int bufferSize);
    public abstract virtual void ReturnBuffer(Byte[] buffer);
    public abstract virtual void Clear();
    public static InternalBufferManager Create(long maxBufferPoolSize, int maxBufferSize, bool isTransportBufferPool);
    public static Byte[] AllocateByteArray(int size);
}
public enum Microsoft.Azure.Amqp.IoEvent : Enum {
    public int value__;
    public static IoEvent WriteBufferQueueFull;
    public static IoEvent WriteBufferQueueEmpty;
}
public interface Microsoft.Azure.Amqp.IRuntimeProvider {
}
public interface Microsoft.Azure.Amqp.ISessionFactory {
    public abstract virtual AmqpSession CreateSession(AmqpConnection connection, AmqpSessionSettings settings);
}
[DebuggerStepThroughAttribute]
internal abstract class Microsoft.Azure.Amqp.IteratorAsyncResult`1 : AsyncResult`1<TIteratorAsyncResult> {
    private static Action`2<AsyncResult, Exception> onFinally;
    private static AsyncCompletion stepCallbackDelegate;
    private TimeoutHelper timeoutHelper;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) everCompletedAsynchronously;
    private IEnumerator`1<AsyncStep<TIteratorAsyncResult>> steps;
    private Exception lastAsyncStepException;
    protected Exception LastAsyncStepException { get; protected set; }
    public TimeSpan OriginalTimeout { get; }
    private static AsyncCompletion StepCallbackDelegate { get; }
    protected IteratorAsyncResult`1(TimeSpan timeout, AsyncCallback callback, object state);
    private static IteratorAsyncResult`1();
    protected Exception get_LastAsyncStepException();
    protected void set_LastAsyncStepException(Exception value);
    public TimeSpan get_OriginalTimeout();
    private static AsyncCompletion get_StepCallbackDelegate();
    public IAsyncResult Start();
    public TIteratorAsyncResult RunSynchronously();
    protected AsyncStep<TIteratorAsyncResult> CallAsync(BeginCall<TIteratorAsyncResult> beginCall, EndCall<TIteratorAsyncResult> endCall, Call<TIteratorAsyncResult> call, ExceptionPolicy<TIteratorAsyncResult> policy);
    protected AsyncStep<TIteratorAsyncResult> CallAsync(BeginCall<TIteratorAsyncResult> beginCall, EndCall<TIteratorAsyncResult> endCall, ExceptionPolicy<TIteratorAsyncResult> policy);
    protected AsyncStep<TIteratorAsyncResult> CallParallelAsync(ICollection`1<TWorkItem> workItems, BeginCall`1<TIteratorAsyncResult, TWorkItem> beginCall, EndCall`1<TIteratorAsyncResult, TWorkItem> endCall, ExceptionPolicy<TIteratorAsyncResult> policy);
    protected AsyncStep<TIteratorAsyncResult> CallParallelAsync(ICollection`1<TWorkItem> workItems, BeginCall`1<TIteratorAsyncResult, TWorkItem> beginCall, EndCall`1<TIteratorAsyncResult, TWorkItem> endCall, TimeSpan timeout, ExceptionPolicy<TIteratorAsyncResult> policy);
    protected AsyncStep<TIteratorAsyncResult> CallTask(Func`3<TIteratorAsyncResult, TimeSpan, Task> taskFunc, ExceptionPolicy<TIteratorAsyncResult> policy);
    protected AsyncStep<TIteratorAsyncResult> CallAsyncSleep(TimeSpan amountToSleep);
    protected AsyncStep<TIteratorAsyncResult> CallAsyncSleep(TimeSpan amountToSleep, CancellationToken cancellationToken);
    protected AsyncStep<TIteratorAsyncResult> CallCompletedAsyncStep();
    protected TimeSpan RemainingTime();
    protected abstract virtual IEnumerator`1<AsyncStep<TIteratorAsyncResult>> GetAsyncSteps();
    protected void Complete(Exception operationException);
    private static bool StepCallback(IAsyncResult result);
    private static void Finally(AsyncResult result, Exception exception);
    private bool MoveNextStep();
    private void EnumerateSteps(CurrentThreadType<TIteratorAsyncResult> state);
    private bool HandleException(Exception e);
}
public interface Microsoft.Azure.Amqp.ITransportMonitor {
    public abstract virtual void OnTransportWrite(int bufferSize, int writeSize, long queueSize, long latencyTicks);
    public abstract virtual void OnTransportRead(int bufferSize, int readSize, int cacheHits, long latencyTicks);
}
internal interface Microsoft.Azure.Amqp.IWork`1 {
    public abstract virtual void Start();
    public abstract virtual void Done(bool completedSynchronously, TOutcome outcome);
    public abstract virtual void Cancel(bool completedSynchronously, Exception exception);
}
public interface Microsoft.Azure.Amqp.IWorkDelegate`1 {
    public abstract virtual bool Invoke(T work);
}
public class Microsoft.Azure.Amqp.OpenEventArgs : EventArgs {
    private Performative command;
    public Performative Command { get; }
    public OpenEventArgs(Performative command);
    public Performative get_Command();
}
public enum Microsoft.Azure.Amqp.ProtocolId : Enum {
    public byte value__;
    public static ProtocolId Amqp;
    public static ProtocolId AmqpTls;
    public static ProtocolId AmqpSasl;
}
public class Microsoft.Azure.Amqp.ReceivingAmqpLink : AmqpLink {
    private static TimeSpan MinReceiveTimeout;
    private static int MaxCreditForOnDemandReceive;
    private static int CreditBatchThreshold;
    private static int PendingReceiversThreshold;
    private Action`1<AmqpMessage> messageListener;
    private SizeBasedFlowQueue messageQueue;
    private WorkCollection`3<ArraySegment`1<byte>, DisposeAsyncResult, DeliveryState> pendingDispositions;
    private AmqpMessage currentMessage;
    private LinkedList`1<ReceiveAsyncResult> waiterList;
    private HashSet`1<DrainAsyncResult> drainTasks;
    public Nullable`1<long> TotalCacheSizeInBytes { get; }
    internal int MessageQueueCount { get; }
    internal long AvgMessageSize { get; }
    internal long MessageQueueSize { get; }
    public ReceivingAmqpLink(AmqpLinkSettings settings);
    public ReceivingAmqpLink(AmqpSession session, AmqpLinkSettings settings);
    private static ReceivingAmqpLink();
    public Nullable`1<long> get_TotalCacheSizeInBytes();
    internal int get_MessageQueueCount();
    internal long get_AvgMessageSize();
    internal long get_MessageQueueSize();
    public void SetCacheSizeInBytes(Nullable`1<long> cacheSizeInBytes);
    public void RegisterMessageListener(Action`1<AmqpMessage> messageListener);
    public IAsyncResult BeginReceiveRemoteMessages(int messageCount, TimeSpan batchWaitTimeout, TimeSpan timeout, AsyncCallback callback, object state);
    public Task`1<AmqpMessage> ReceiveMessageAsync(TimeSpan timeout);
    public Task`1<AmqpMessage> ReceiveMessageAsync(CancellationToken cancellationToken);
    public Task`1<AmqpMessage> ReceiveMessageAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public Task`1<IEnumerable`1<AmqpMessage>> ReceiveMessagesAsync(int messageCount, TimeSpan batchWaitTimeout);
    public Task`1<IEnumerable`1<AmqpMessage>> ReceiveMessagesAsync(int messageCount, TimeSpan batchWaitTimeout, CancellationToken cancellationToken);
    public Task`1<IEnumerable`1<AmqpMessage>> ReceiveMessagesAsync(int messageCount, TimeSpan batchWaitTimeout, TimeSpan timeout, CancellationToken cancellationToken);
    public IAsyncResult BeginReceiveMessage(TimeSpan timeout, AsyncCallback callback, object state);
    public bool EndReceiveMessage(IAsyncResult result, AmqpMessage& message);
    public IAsyncResult BeginReceiveMessages(int messageCount, TimeSpan timeout, AsyncCallback callback, object state);
    private IAsyncResult BeginReceiveMessages(int messageCount, TimeSpan batchWaitTimeout, TimeSpan timeout, CancellationToken cancellationToken, AsyncCallback callback, object state);
    protected virtual void OnReceiveStateOpenSent(Attach attach);
    public bool EndReceiveMessages(IAsyncResult result, IEnumerable`1& messages);
    public Task DrainAsyc(CancellationToken cancellationToken);
    public Task`1<Outcome> DisposeMessageAsync(ArraySegment`1<byte> deliveryTag, Outcome outcome, bool batchable, TimeSpan timeout);
    public Task`1<Outcome> DisposeMessageAsync(ArraySegment`1<byte> deliveryTag, ArraySegment`1<byte> txnId, Outcome outcome, bool batchable, TimeSpan timeout);
    public Task`1<Outcome> DisposeMessageAsync(ArraySegment`1<byte> deliveryTag, Outcome outcome, bool batchable, CancellationToken cancellationToken);
    public Task`1<Outcome> DisposeMessageAsync(ArraySegment`1<byte> deliveryTag, ArraySegment`1<byte> txnId, Outcome outcome, bool batchable, CancellationToken cancellationToken);
    public IAsyncResult BeginDisposeMessage(ArraySegment`1<byte> deliveryTag, Outcome outcome, bool batchable, TimeSpan timeout, AsyncCallback callback, object state);
    public IAsyncResult BeginDisposeMessage(ArraySegment`1<byte> deliveryTag, ArraySegment`1<byte> txnId, Outcome outcome, bool batchable, TimeSpan timeout, AsyncCallback callback, object state);
    public Outcome EndDisposeMessage(IAsyncResult result);
    public void AcceptMessage(AmqpMessage message, bool batchable);
    public void AcceptMessage(AmqpMessage message, bool settled, bool batchable);
    public void RejectMessage(AmqpMessage message, Exception exception);
    public void ReleaseMessage(AmqpMessage message);
    public void ModifyMessage(AmqpMessage message, bool deliveryFailed, bool deliverElseWhere, Fields messageAttributes);
    public void DisposeMessage(AmqpMessage message, DeliveryState state, bool settled, bool batchable);
    public virtual bool CreateDelivery(Transfer transfer, Delivery& delivery);
    protected virtual bool OpenInternal();
    protected virtual void OnDisposeDeliveryInternal(Delivery delivery);
    protected virtual void OnProcessTransfer(Delivery delivery, Transfer transfer, Frame frame);
    protected virtual void OnCreditAvailable(int session, UInt32 link, bool drain, ArraySegment`1<byte> txnId);
    protected virtual void AbortInternal();
    protected virtual bool CloseInternal();
    protected virtual void OnReceiveFlow(Flow flow);
    private IAsyncResult BeginDisposeMessage(ArraySegment`1<byte> deliveryTag, ArraySegment`1<byte> txnId, Outcome outcome, bool batchable, TimeSpan timeout, CancellationToken cancellationToken, AsyncCallback callback, object state);
    private void CancelPendingOperations(bool aborted, Queue`1& messagesToRelease);
    private void OnReceiveMessage(AmqpMessage message);
    private int GetOnDemandReceiveCredit();
}
public class Microsoft.Azure.Amqp.RequestResponseAmqpLink : AmqpObject {
    private static AsyncCallback onSenderOpen;
    private static AsyncCallback onReceiverOpen;
    private static AsyncCallback onSenderClose;
    private static AsyncCallback onReceiverClose;
    private Address replyTo;
    private SendingAmqpLink sender;
    private ReceivingAmqpLink receiver;
    private WorkCollection`3<MessageId, RequestAsyncResult, AmqpMessage> inflightRequests;
    private Dictionary`2<string, object> requestProperties;
    private long nextRequestId;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public SendingAmqpLink SendingLink { get; }
    public ReceivingAmqpLink ReceivingLink { get; }
    public Dictionary`2<string, object> RequestProperties { get; }
    public AmqpSession Session { get; }
    internal TimeSpan OperationTimeout { get; }
    public RequestResponseAmqpLink(string type, AmqpSession session, string address, Fields properties);
    public RequestResponseAmqpLink(string type, string name, AmqpSession session, string address);
    public RequestResponseAmqpLink(string type, string name, AmqpSession session, string address, Fields properties);
    private static RequestResponseAmqpLink();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public SendingAmqpLink get_SendingLink();
    public ReceivingAmqpLink get_ReceivingLink();
    public Dictionary`2<string, object> get_RequestProperties();
    public AmqpSession get_Session();
    internal virtual TimeSpan get_OperationTimeout();
    public Task`1<AmqpMessage> RequestAsync(AmqpMessage request, TimeSpan timeout);
    public Task`1<AmqpMessage> RequestAsync(AmqpMessage request, ArraySegment`1<byte> txnId, TimeSpan timeout);
    public Task`1<AmqpMessage> RequestAsync(AmqpMessage request, CancellationToken cancellationToken);
    public Task`1<AmqpMessage> RequestAsync(AmqpMessage request, ArraySegment`1<byte> txnId, CancellationToken cancellationToken);
    public IAsyncResult BeginRequest(AmqpMessage request, TimeSpan timeout, AsyncCallback callback, object state);
    public IAsyncResult BeginRequest(AmqpMessage request, ArraySegment`1<byte> txnId, TimeSpan timeout, AsyncCallback callback, object state);
    public AmqpMessage EndRequest(IAsyncResult result);
    public void SendProperties(Fields fields);
    protected virtual bool OpenInternal();
    protected virtual bool CloseInternal();
    protected virtual void AbortInternal();
    internal IAsyncResult BeginRequest(AmqpMessage request, ArraySegment`1<byte> txnId, TimeSpan timeout, CancellationToken cancellationToken, AsyncCallback callback, object state);
    private static void OnSenderOpen(IAsyncResult result);
    private static void OnReceiverOpen(IAsyncResult result);
    private static void OnSenderClose(IAsyncResult result);
    private static void OnReceiverClose(IAsyncResult result);
    private void OnLinkClosed(object sender, EventArgs e);
    private static void OnOperationComplete(IAsyncResult result, bool isSender, bool isOpen);
    private void OnResponseMessage(AmqpMessage response);
}
internal class Microsoft.Azure.Amqp.ResourceManagerImpl : object {
    private string resourceName;
    private ResourceMap stringResourceMap;
    private ResourceContext resourceContext;
    public ResourceManagerImpl(string resourceName);
    public string GetString(string name, CultureInfo culture);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Azure.Amqp.ResourcesGeneric : object {
    private static CultureInfo resourceCulture;
    private static ResourceManagerImpl ResourceManager;
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActionItemIsAlreadyScheduled { get; }
    internal static string ArgumentNullOrEmpty { get; }
    internal static string ArgumentNullOrWhiteSpace { get; }
    internal static string ArgumentOutOfRange { get; }
    internal static string AsyncCallbackThrewException { get; }
    internal static string AsyncResultAlreadyEnded { get; }
    internal static string AsyncResultCompletedTwice { get; }
    internal static string AsyncTransactionException { get; }
    internal static string BufferAllocationFailed { get; }
    internal static string BufferAlreadyReclaimed { get; }
    internal static string BufferIsNotRightSizeForBufferManager { get; }
    internal static string CreateSessionOnClosingConnection { get; }
    internal static string CreditListenerAlreadyRegistered { get; }
    internal static string DispositionListenerAlreadyRegistered { get; }
    internal static string DispositionListenerSetNotSupported { get; }
    internal static string ErrorConvertingToChar { get; }
    internal static string FailFastMessage { get; }
    internal static string InvalidAsyncResult { get; }
    internal static string InvalidAsyncResultImplementation { get; }
    internal static string InvalidAsyncResultImplementationGeneric { get; }
    internal static string InvalidBufferSize { get; }
    internal static string InvalidFrameSize { get; }
    internal static string InvalidNullAsyncResult { get; }
    internal static string InvalidSemaphoreExit { get; }
    internal static string IOThreadTimerCannotAcceptMaxTimeSpan { get; }
    internal static string MessageListenerAlreadyRegistered { get; }
    internal static string NotSupportFrameCode { get; }
    internal static string ObjectIsReadOnly { get; }
    internal static string OperationTimedOut { get; }
    internal static string ServerCertificateNotSet { get; }
    internal static string ShipAssertExceptionMessage { get; }
    internal static string StringIsNotBase64 { get; }
    internal static string TargetHostNotSet { get; }
    internal static string TimeoutMustBeNonNegative { get; }
    internal static string TimeoutMustBePositive { get; }
    internal static string UnspecifiedError { get; }
    internal static string UserErrorFormat { get; }
    internal static string ValueMustBeNonNegative { get; }
    private static ResourcesGeneric();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActionItemIsAlreadyScheduled();
    internal static string get_ArgumentNullOrEmpty();
    internal static string get_ArgumentNullOrWhiteSpace();
    internal static string get_ArgumentOutOfRange();
    internal static string get_AsyncCallbackThrewException();
    internal static string get_AsyncResultAlreadyEnded();
    internal static string get_AsyncResultCompletedTwice();
    internal static string get_AsyncTransactionException();
    internal static string get_BufferAllocationFailed();
    internal static string get_BufferAlreadyReclaimed();
    internal static string get_BufferIsNotRightSizeForBufferManager();
    internal static string get_CreateSessionOnClosingConnection();
    internal static string get_CreditListenerAlreadyRegistered();
    internal static string get_DispositionListenerAlreadyRegistered();
    internal static string get_DispositionListenerSetNotSupported();
    internal static string get_ErrorConvertingToChar();
    internal static string get_FailFastMessage();
    internal static string get_InvalidAsyncResult();
    internal static string get_InvalidAsyncResultImplementation();
    internal static string get_InvalidAsyncResultImplementationGeneric();
    internal static string get_InvalidBufferSize();
    internal static string get_InvalidFrameSize();
    internal static string get_InvalidNullAsyncResult();
    internal static string get_InvalidSemaphoreExit();
    internal static string get_IOThreadTimerCannotAcceptMaxTimeSpan();
    internal static string get_MessageListenerAlreadyRegistered();
    internal static string get_NotSupportFrameCode();
    internal static string get_ObjectIsReadOnly();
    internal static string get_OperationTimedOut();
    internal static string get_ServerCertificateNotSet();
    internal static string get_ShipAssertExceptionMessage();
    internal static string get_StringIsNotBase64();
    internal static string get_TargetHostNotSet();
    internal static string get_TimeoutMustBeNonNegative();
    internal static string get_TimeoutMustBePositive();
    internal static string get_UnspecifiedError();
    internal static string get_UserErrorFormat();
    internal static string get_ValueMustBeNonNegative();
}
public interface Microsoft.Azure.Amqp.Sasl.ISaslPlainAuthenticator {
    public abstract virtual Task`1<IPrincipal> AuthenticateAsync(string identity, string password);
}
public class Microsoft.Azure.Amqp.Sasl.SaslAnonymousHandler : SaslHandler {
    public static string Name;
    [CompilerGeneratedAttribute]
private string <Identity>k__BackingField;
    public string Identity { get; public set; }
    public SaslAnonymousHandler(string name);
    private static SaslAnonymousHandler();
    [CompilerGeneratedAttribute]
public string get_Identity();
    [CompilerGeneratedAttribute]
public void set_Identity(string value);
    public virtual SaslHandler Clone();
    public virtual void OnChallenge(SaslChallenge challenge);
    public virtual void OnResponse(SaslResponse response);
    protected virtual void OnStart(SaslInit init, bool isClient);
}
public class Microsoft.Azure.Amqp.Sasl.SaslChallenge : Performative {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private ArraySegment`1<byte> <Challenge>k__BackingField;
    protected int FieldCount { get; }
    public ArraySegment`1<byte> Challenge { get; public set; }
    private static SaslChallenge();
    protected virtual int get_FieldCount();
    [CompilerGeneratedAttribute]
public ArraySegment`1<byte> get_Challenge();
    [CompilerGeneratedAttribute]
public void set_Challenge(ArraySegment`1<byte> value);
    public virtual string ToString();
    protected virtual void EnsureRequired();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public enum Microsoft.Azure.Amqp.Sasl.SaslCode : Enum {
    public byte value__;
    public static SaslCode Ok;
    public static SaslCode Auth;
    public static SaslCode Sys;
    public static SaslCode SysPerm;
    public static SaslCode SysTemp;
}
public class Microsoft.Azure.Amqp.Sasl.SaslExternalHandler : SaslHandler {
    public static string Name;
    private static SaslExternalHandler();
    public virtual SaslHandler Clone();
    public virtual void OnChallenge(SaslChallenge challenge);
    public virtual void OnResponse(SaslResponse response);
    protected virtual void OnStart(SaslInit init, bool isClient);
}
public abstract class Microsoft.Azure.Amqp.Sasl.SaslHandler : object {
    private SaslNegotiator saslNegotiator;
    [CompilerGeneratedAttribute]
private string <Mechanism>k__BackingField;
    [CompilerGeneratedAttribute]
private IPrincipal <Principal>k__BackingField;
    public string Mechanism { get; protected set; }
    public IPrincipal Principal { get; protected set; }
    protected SaslNegotiator Negotiator { get; }
    [CompilerGeneratedAttribute]
public string get_Mechanism();
    [CompilerGeneratedAttribute]
protected void set_Mechanism(string value);
    [CompilerGeneratedAttribute]
public IPrincipal get_Principal();
    [CompilerGeneratedAttribute]
protected void set_Principal(IPrincipal value);
    protected SaslNegotiator get_Negotiator();
    public void Start(SaslNegotiator saslNegotiator, SaslInit init, bool isClient);
    public virtual string ToString();
    public abstract virtual SaslHandler Clone();
    public abstract virtual void OnChallenge(SaslChallenge challenge);
    public abstract virtual void OnResponse(SaslResponse response);
    protected abstract virtual void OnStart(SaslInit init, bool isClient);
}
public class Microsoft.Azure.Amqp.Sasl.SaslInit : Performative {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private AmqpSymbol <Mechanism>k__BackingField;
    [CompilerGeneratedAttribute]
private ArraySegment`1<byte> <InitialResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostName>k__BackingField;
    protected int FieldCount { get; }
    public AmqpSymbol Mechanism { get; public set; }
    public ArraySegment`1<byte> InitialResponse { get; public set; }
    public string HostName { get; public set; }
    private static SaslInit();
    protected virtual int get_FieldCount();
    [CompilerGeneratedAttribute]
public AmqpSymbol get_Mechanism();
    [CompilerGeneratedAttribute]
public void set_Mechanism(AmqpSymbol value);
    [CompilerGeneratedAttribute]
public ArraySegment`1<byte> get_InitialResponse();
    [CompilerGeneratedAttribute]
public void set_InitialResponse(ArraySegment`1<byte> value);
    [CompilerGeneratedAttribute]
public string get_HostName();
    [CompilerGeneratedAttribute]
public void set_HostName(string value);
    public virtual string ToString();
    protected virtual void EnsureRequired();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public class Microsoft.Azure.Amqp.Sasl.SaslMechanisms : Performative {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private Multiple`1<AmqpSymbol> <SaslServerMechanisms>k__BackingField;
    protected int FieldCount { get; }
    public Multiple`1<AmqpSymbol> SaslServerMechanisms { get; public set; }
    private static SaslMechanisms();
    protected virtual int get_FieldCount();
    [CompilerGeneratedAttribute]
public Multiple`1<AmqpSymbol> get_SaslServerMechanisms();
    [CompilerGeneratedAttribute]
public void set_SaslServerMechanisms(Multiple`1<AmqpSymbol> value);
    public virtual string ToString();
    protected virtual void EnsureRequired();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public class Microsoft.Azure.Amqp.Sasl.SaslNegotiator : object {
    private static string welcome;
    private static Action`1<TransportAsyncCallbackArgs> onWriteFrameComplete;
    private SaslTransport transport;
    private SaslTransportProvider provider;
    private bool isInitiator;
    private SaslState state;
    private SaslHandler saslHandler;
    private FrameBufferReader reader;
    private AsyncBufferWriter writer;
    private Exception completeException;
    private int completeTransport;
    public SaslNegotiator(SaslTransport transport, SaslTransportProvider provider, bool isInitiator);
    private static SaslNegotiator();
    public bool Start();
    public void ReadFrame();
    public void WriteFrame(Performative command, bool needReply);
    public void CompleteNegotiation(SaslCode code, Exception exception);
    public virtual string ToString();
    private static void OnWriteFrameComplete(TransportAsyncCallbackArgs args);
    private void CompleteTransport();
    private void HandleException(string action, Exception exception);
    private void SendServerMechanisms();
    private sealed virtual override void Microsoft.Azure.Amqp.IIoHandler.OnIoFault(Exception exception);
    private sealed virtual override void Microsoft.Azure.Amqp.IIoHandler.OnReceiveBuffer(ByteBuffer buffer);
    private sealed virtual override void Microsoft.Azure.Amqp.IIoHandler.OnIoEvent(IoEvent ioEvent, long queueSize);
    private void HandleSaslCommand(Performative command);
    private void OnSaslServerMechanisms(SaslMechanisms mechanisms);
    private void OnSaslInit(SaslInit init);
    private void OnSaslOutcome(SaslOutcome outcome);
}
public class Microsoft.Azure.Amqp.Sasl.SaslOutcome : Performative {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private Nullable`1<SaslCode> <OutcomeCode>k__BackingField;
    [CompilerGeneratedAttribute]
private ArraySegment`1<byte> <AdditionalData>k__BackingField;
    protected int FieldCount { get; }
    public Nullable`1<SaslCode> OutcomeCode { get; public set; }
    public ArraySegment`1<byte> AdditionalData { get; public set; }
    private static SaslOutcome();
    protected virtual int get_FieldCount();
    [CompilerGeneratedAttribute]
public Nullable`1<SaslCode> get_OutcomeCode();
    [CompilerGeneratedAttribute]
public void set_OutcomeCode(Nullable`1<SaslCode> value);
    [CompilerGeneratedAttribute]
public ArraySegment`1<byte> get_AdditionalData();
    [CompilerGeneratedAttribute]
public void set_AdditionalData(ArraySegment`1<byte> value);
    public virtual string ToString();
    protected virtual void EnsureRequired();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public class Microsoft.Azure.Amqp.Sasl.SaslPlainHandler : SaslHandler {
    public static string Name;
    private static string InvalidCredential;
    private ISaslPlainAuthenticator authenticator;
    [CompilerGeneratedAttribute]
private string <AuthorizationIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    public string AuthorizationIdentity { get; public set; }
    public string AuthenticationIdentity { get; public set; }
    public string Password { get; public set; }
    public SaslPlainHandler(ISaslPlainAuthenticator authenticator);
    private static SaslPlainHandler();
    [CompilerGeneratedAttribute]
public string get_AuthorizationIdentity();
    [CompilerGeneratedAttribute]
public void set_AuthorizationIdentity(string value);
    [CompilerGeneratedAttribute]
public string get_AuthenticationIdentity();
    [CompilerGeneratedAttribute]
public void set_AuthenticationIdentity(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    public virtual SaslHandler Clone();
    public virtual void OnChallenge(SaslChallenge challenge);
    public virtual void OnResponse(SaslResponse response);
    protected virtual void OnStart(SaslInit init, bool isClient);
    private void OnInit(SaslInit init);
    private void CompleteNegotiation(Task`1<IPrincipal> authenticateTask);
    private string GetClientMessage();
    [CompilerGeneratedAttribute]
private void <OnInit>b__21_0(Task`1<IPrincipal> t);
}
public class Microsoft.Azure.Amqp.Sasl.SaslResponse : Performative {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private ArraySegment`1<byte> <Response>k__BackingField;
    protected int FieldCount { get; }
    public ArraySegment`1<byte> Response { get; public set; }
    private static SaslResponse();
    protected virtual int get_FieldCount();
    [CompilerGeneratedAttribute]
public ArraySegment`1<byte> get_Response();
    [CompilerGeneratedAttribute]
public void set_Response(ArraySegment`1<byte> value);
    public virtual string ToString();
    protected virtual void EnsureRequired();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public class Microsoft.Azure.Amqp.Sasl.SaslTransport : TransportBase {
    protected TransportBase innerTransport;
    private SaslNegotiator negotiator;
    public string LocalEndPoint { get; }
    public string RemoteEndPoint { get; }
    public bool IsSecure { get; }
    public bool RequiresCompleteFrames { get; }
    public SaslTransport(TransportBase transport, SaslTransportProvider provider, bool isInitiator);
    public virtual string get_LocalEndPoint();
    public virtual string get_RemoteEndPoint();
    public virtual bool get_IsSecure();
    public virtual bool get_RequiresCompleteFrames();
    public virtual void SetMonitor(ITransportMonitor usageMeter);
    public virtual bool WriteAsync(TransportAsyncCallbackArgs args);
    public virtual bool ReadAsync(TransportAsyncCallbackArgs args);
    public void OnNegotiationSucceed(IPrincipal principal);
    public void OnNegotiationFail(Exception exception);
    protected virtual bool OpenInternal();
    protected virtual void AbortInternal();
    protected virtual bool CloseInternal();
}
public class Microsoft.Azure.Amqp.Sasl.SaslTransportProvider : TransportProvider {
    private Dictionary`2<string, SaslHandler> handlers;
    [CompilerGeneratedAttribute]
private int <MaxFrameSize>k__BackingField;
    public int MaxFrameSize { get; public set; }
    public IEnumerable`1<string> Mechanisms { get; }
    [CompilerGeneratedAttribute]
public int get_MaxFrameSize();
    [CompilerGeneratedAttribute]
public void set_MaxFrameSize(int value);
    public IEnumerable`1<string> get_Mechanisms();
    public void AddHandler(SaslHandler handler);
    public SaslHandler GetHandler(string mechanism, bool clone);
    public virtual string ToString();
    protected virtual TransportBase OnCreateTransport(TransportBase innerTransport, bool isInitiator);
}
[FlagsAttribute]
public enum Microsoft.Azure.Amqp.SectionFlag : Enum {
    public int value__;
    public static SectionFlag Header;
    public static SectionFlag DeliveryAnnotations;
    public static SectionFlag MessageAnnotations;
    public static SectionFlag Properties;
    public static SectionFlag ApplicationProperties;
    public static SectionFlag Data;
    public static SectionFlag AmqpSequence;
    public static SectionFlag AmqpValue;
    public static SectionFlag Footer;
    public static SectionFlag All;
    public static SectionFlag Body;
    public static SectionFlag NonBody;
    public static SectionFlag Mutable;
    public static SectionFlag Immutable;
}
internal class Microsoft.Azure.Amqp.SegmentBufferPool : object {
    private int segmentSize;
    private int maxCount;
    private object lockObject;
    private Byte[] heap;
    private Int32[] offsets;
    private int top;
    public int SegmentSize { get; }
    public SegmentBufferPool(int segmentSize, int maxCount);
    public int get_SegmentSize();
    public ArraySegment`1<byte> TakeBuffer(int bufferSize);
    public void ReturnBuffer(ArraySegment`1<byte> buffer);
    private void Initialize(int count);
}
public class Microsoft.Azure.Amqp.SendingAmqpLink : AmqpLink {
    private static TimeSpan MinRequestCreditWindow;
    private SerializedWorker`1<AmqpMessage> pendingDeliveries;
    private WorkCollection`3<ArraySegment`1<byte>, SendAsyncResult, Outcome> inflightSends;
    private Action`1<Delivery> dispositionListener;
    private Action`3<UInt32, bool, ArraySegment`1<byte>> creditListener;
    private DateTime lastFlowRequestTime;
    public UInt32 Available { get; }
    public SendingAmqpLink(AmqpLinkSettings settings);
    public SendingAmqpLink(AmqpSession session, AmqpLinkSettings settings);
    private static SendingAmqpLink();
    public void RegisterCreditListener(Action`3<UInt32, bool, ArraySegment`1<byte>> creditListener);
    public void RegisterDispositionListener(Action`1<Delivery> dispositionListener);
    public void SendMessageNoWait(AmqpMessage message, ArraySegment`1<byte> deliveryTag, ArraySegment`1<byte> txnId);
    public Task`1<Outcome> SendMessageAsync(AmqpMessage message, ArraySegment`1<byte> deliveryTag, ArraySegment`1<byte> txnId, TimeSpan timeout);
    public Task`1<Outcome> SendMessageAsync(AmqpMessage message, ArraySegment`1<byte> deliveryTag, ArraySegment`1<byte> txnId, CancellationToken cancellationToken);
    public IAsyncResult BeginSendMessage(AmqpMessage message, ArraySegment`1<byte> deliveryTag, ArraySegment`1<byte> txnId, TimeSpan timeout, AsyncCallback callback, object state);
    internal IAsyncResult BeginSendMessage(AmqpMessage message, ArraySegment`1<byte> deliveryTag, ArraySegment`1<byte> txnId, TimeSpan timeout, CancellationToken cancellationToken, AsyncCallback callback, object state);
    public Outcome EndSendMessage(IAsyncResult result);
    public virtual bool CreateDelivery(Transfer transfer, Delivery& delivery);
    public virtual UInt32 get_Available();
    protected virtual void OnDisposeDeliveryInternal(Delivery delivery);
    protected virtual void OnProcessTransfer(Delivery delivery, Transfer transfer, Frame frame);
    protected virtual void OnCreditAvailable(int session, UInt32 link, bool drain, ArraySegment`1<byte> txnId);
    protected virtual bool CloseInternal();
    protected virtual void AbortInternal();
    private static void OnRequestCredit(object state);
    private void AbortDeliveries();
    private void SendMessageInternal(AmqpMessage message, ArraySegment`1<byte> deliveryTag, ArraySegment`1<byte> txnId);
    private sealed virtual override bool Microsoft.Azure.Amqp.IWorkDelegate<Microsoft.Azure.Amqp.AmqpMessage>.Invoke(AmqpMessage message);
}
public class Microsoft.Azure.Amqp.SequenceNumber : ValueType {
    private int sequenceNumber;
    public UInt32 Value { get; }
    public SequenceNumber(UInt32 value);
    public UInt32 get_Value();
    public static SequenceNumber Increment(Int32& sn);
    public static int Compare(int x, int y);
    public sealed virtual int CompareTo(SequenceNumber value);
    public sealed virtual bool Equals(SequenceNumber obj);
    public static SequenceNumber op_Implicit(UInt32 value);
    public static SequenceNumber op_Addition(SequenceNumber value1, int delta);
    public static SequenceNumber op_Subtraction(SequenceNumber value1, int delta);
    public static int op_Subtraction(SequenceNumber value1, SequenceNumber value2);
    public static bool op_Equality(SequenceNumber value1, SequenceNumber value2);
    public static bool op_Inequality(SequenceNumber value1, SequenceNumber value2);
    public static bool op_GreaterThan(SequenceNumber value1, SequenceNumber value2);
    public static bool op_GreaterThanOrEqual(SequenceNumber value1, SequenceNumber value2);
    public static bool op_LessThan(SequenceNumber value1, SequenceNumber value2);
    public static bool op_LessThanOrEqual(SequenceNumber value1, SequenceNumber value2);
    public UInt32 Increment();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
public class Microsoft.Azure.Amqp.SerializedWorker`1 : object {
    private IWorkDelegate`1<T> workDelegate;
    private LinkedList`1<T> pendingWorkList;
    private State<T> state;
    public int Count { get; }
    private object SyncRoot { get; }
    public SerializedWorker`1(IWorkDelegate`1<T> workProcessor);
    public int get_Count();
    private object get_SyncRoot();
    public void DoWork(T work);
    public void ContinueWork();
    public void Abort();
    private void DoWorkInternal(T work, bool fromList);
}
public enum Microsoft.Azure.Amqp.SettleMode : Enum {
    public byte value__;
    public static SettleMode SettleOnSend;
    public static SettleMode SettleOnReceive;
    public static SettleMode SettleOnDispose;
}
public abstract class Microsoft.Azure.Amqp.Singleton`1 : object {
    private object syncLock;
    private TaskCompletionSource`1<TValue> taskCompletionSource;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) disposed;
    protected TaskCompletionSource`1<TValue> TaskCompletionSource { get; }
    internal TValue Value { get; }
    protected TaskCompletionSource`1<TValue> get_TaskCompletionSource();
    internal TValue get_Value();
    public Task OpenAsync();
    [EditorBrowsableAttribute("1")]
public Task OpenAsync(TimeSpan timeout);
    public Task OpenAsync(CancellationToken cancellationToken);
    public Task CloseAsync();
    public Task CloseAsync(CancellationToken cancellationToken);
    public void Close();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public Task`1<TValue> GetOrCreateAsync(TimeSpan timeout);
    public Task`1<TValue> GetOrCreateAsync(CancellationToken cancellationToken);
    protected void Invalidate(TValue instance);
    protected virtual bool IsValid(TValue value);
    [EditorBrowsableAttribute("1")]
protected virtual Task`1<TValue> OnCreateAsync(TimeSpan timeout);
    protected virtual Task`1<TValue> OnCreateAsync(TimeSpan timeout, CancellationToken cancellationToken);
    protected abstract virtual void OnSafeClose(TValue value);
    internal bool TryGet(TValue& value, Func`2<TValue, bool> condition);
    [AsyncStateMachineAttribute("Microsoft.Azure.Amqp.Singleton`1/<GetOrCreateAsync>d__24")]
[EditorBrowsableAttribute("1")]
public Task`1<TValue> GetOrCreateAsync(TimeSpan timeout, CancellationToken cancellationToken);
    private bool TryGet(TaskCompletionSource`1& tcs);
    private bool TrySet(TaskCompletionSource`1<TValue> tcs);
    private bool TryRemove();
}
public class Microsoft.Azure.Amqp.StateTransition : object {
    private static StateTransition[] sendHeader;
    private static StateTransition[] sendOpen;
    private static StateTransition[] sendClose;
    private static StateTransition[] receiveHeader;
    private static StateTransition[] receiveOpen;
    private static StateTransition[] receiveClose;
    [CompilerGeneratedAttribute]
private AmqpObjectState <From>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpObjectState <To>k__BackingField;
    public static StateTransition[] SendHeader { get; }
    public static StateTransition[] SendOpen { get; }
    public static StateTransition[] SendClose { get; }
    public static StateTransition[] ReceiveHeader { get; }
    public static StateTransition[] ReceiveOpen { get; }
    public static StateTransition[] ReceiveClose { get; }
    public AmqpObjectState From { get; private set; }
    public AmqpObjectState To { get; private set; }
    public StateTransition(AmqpObjectState from, AmqpObjectState to);
    private static StateTransition();
    public static StateTransition[] get_SendHeader();
    public static StateTransition[] get_SendOpen();
    public static StateTransition[] get_SendClose();
    public static StateTransition[] get_ReceiveHeader();
    public static StateTransition[] get_ReceiveOpen();
    public static StateTransition[] get_ReceiveClose();
    [CompilerGeneratedAttribute]
public AmqpObjectState get_From();
    [CompilerGeneratedAttribute]
private void set_From(AmqpObjectState value);
    [CompilerGeneratedAttribute]
public AmqpObjectState get_To();
    [CompilerGeneratedAttribute]
private void set_To(AmqpObjectState value);
    public static bool CanTransite(AmqpObjectState from, StateTransition[] states);
}
internal class Microsoft.Azure.Amqp.SynchronizedPool`1 : object {
    private static int maxPendingEntries;
    private static int maxPromotionFailures;
    private static int maxReturnsBeforePromotion;
    private static int maxThreadItemsPerProcessor;
    private GlobalPool<T> globalPool;
    private int maxCount;
    private Entry[] entries;
    private PendingEntry[] pending;
    private int promotionFailures;
    private object ThisLock { get; }
    public SynchronizedPool`1(int maxCount);
    private object get_ThisLock();
    public void Clear();
    private void HandlePromotionFailure(int thisThreadID);
    private bool PromoteThread(int thisThreadID);
    private void RecordReturnToGlobalPool(int thisThreadID);
    private void RecordTakeFromGlobalPool(int thisThreadID);
    public bool Return(T value);
    private bool ReturnToPerThreadPool(int thisThreadID, T value);
    private bool ReturnToGlobalPool(int thisThreadID, T value);
    public T Take();
    private T TakeFromPerThreadPool(int thisThreadID);
    private T TakeFromGlobalPool(int thisThreadID);
}
internal class Microsoft.Azure.Amqp.SystemEncoding : object {
    public static Encoding ASCII { get; }
    public static Encoding get_ASCII();
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Amqp.TaskHelpers : object {
    public static Task CompletedTask;
    private static TaskHelpers();
    public static Task CreateTask(Func`3<AsyncCallback, object, IAsyncResult> begin, Action`1<IAsyncResult> end, object state);
    public static Task`1<T> CreateTask(Func`3<AsyncCallback, object, IAsyncResult> begin, Func`2<IAsyncResult, T> end, object state);
    [ExtensionAttribute]
public static IAsyncResult ToAsyncResult(Task task, AsyncCallback callback, object state);
    [ExtensionAttribute]
public static IAsyncResult ToAsyncResult(Task`1<TResult> task, AsyncCallback callback, object state);
    public static void EndAsyncResult(IAsyncResult asyncResult);
    public static TResult EndAsyncResult(IAsyncResult asyncResult);
}
internal static class Microsoft.Azure.Amqp.Ticks : object {
    public static long Now { get; }
    public static long get_Now();
    public static long FromMilliseconds(int milliseconds);
    public static int ToMilliseconds(long ticks);
    public static long FromTimeSpan(TimeSpan duration);
    public static TimeSpan ToTimeSpan(long ticks);
    public static long Add(long firstTicks, long secondTicks);
}
internal abstract class Microsoft.Azure.Amqp.TimeoutAsyncResult`1 : AsyncResult {
    private TimeSpan timeout;
    private CancellationToken cancellationToken;
    private CancellationTokenRegistration cancellationTokenRegistration;
    private Timer timer;
    private int state;
    protected T Target { get; }
    protected TimeoutAsyncResult`1(TimeSpan timeout, CancellationToken cancellationToken, AsyncCallback callback, object state);
    protected abstract virtual T get_Target();
    public abstract virtual void Cancel(bool isSynchronous);
    protected void StartTracking();
    protected virtual void CompleteOnTimer();
    protected bool CompleteSelf(bool syncComplete);
    protected bool CompleteSelf(bool syncComplete, Exception exception);
    private static void OnTimerCallback(object state);
    private bool CompleteInternal(bool syncComplete, Exception exception);
    private void Dispose();
}
[DebuggerStepThroughAttribute]
internal class Microsoft.Azure.Amqp.TimeoutHelper : ValueType {
    public static TimeSpan MaxWait;
    private TimeSpan originalTimeout;
    private DateTime deadline;
    private bool deadlineSet;
    public TimeSpan OriginalTimeout { get; }
    public TimeoutHelper(TimeSpan timeout);
    public TimeoutHelper(TimeSpan timeout, bool startTimeout);
    private static TimeoutHelper();
    public TimeSpan get_OriginalTimeout();
    public static bool IsTooLarge(TimeSpan timeout);
    public static TimeSpan FromMilliseconds(int milliseconds);
    public static int ToMilliseconds(TimeSpan timeout);
    public static TimeSpan Min(TimeSpan val1, TimeSpan val2);
    public static DateTime Min(DateTime val1, DateTime val2);
    public static TimeSpan Add(TimeSpan timeout1, TimeSpan timeout2);
    public static DateTime Add(DateTime time, TimeSpan timeout);
    public static DateTime Subtract(DateTime time, TimeSpan timeout);
    public static TimeSpan Divide(TimeSpan timeout, int factor);
    public TimeSpan RemainingTime();
    public TimeSpan ElapsedTime();
    private void SetDeadline();
    public static void ThrowIfNegativeArgument(TimeSpan timeout);
    public static void ThrowIfNegativeArgument(TimeSpan timeout, string argumentName);
    public static void ThrowIfNonPositiveArgument(TimeSpan timeout);
    public static void ThrowIfNonPositiveArgument(TimeSpan timeout, string argumentName);
    public static bool WaitOne(WaitHandle waitHandle, TimeSpan timeout);
}
internal class Microsoft.Azure.Amqp.Timestamp : ValueType {
    private static double TickFrequency;
    private long timestamp;
    public static Timestamp Now { get; }
    public TimeSpan Elapsed { get; }
    public long ElapsedTicks { get; }
    private Timestamp(long timestamp);
    private static Timestamp();
    public static Timestamp get_Now();
    public TimeSpan get_Elapsed();
    public long get_ElapsedTicks();
    private static long ConvertRawTicksToTicks(long rawTicks);
    private long GetRawElapsedTicks();
    private long GetElapsedDateTimeTicks();
    public sealed virtual int CompareTo(Timestamp other);
    public sealed virtual bool Equals(Timestamp other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(Timestamp t1, Timestamp t2);
    public static bool op_Inequality(Timestamp t1, Timestamp t2);
    public static bool op_GreaterThan(Timestamp t1, Timestamp t2);
    public static bool op_LessThan(Timestamp t1, Timestamp t2);
    public static bool op_GreaterThanOrEqual(Timestamp t1, Timestamp t2);
    public static bool op_LessThanOrEqual(Timestamp t1, Timestamp t2);
    public static Timestamp op_Addition(Timestamp t, TimeSpan duration);
    public static Timestamp op_Subtraction(Timestamp t, TimeSpan duration);
    public static TimeSpan op_Subtraction(Timestamp t1, Timestamp t2);
}
public enum Microsoft.Azure.Amqp.TraceOperation : Enum {
    public int value__;
    public static TraceOperation Initialize;
    public static TraceOperation Create;
    public static TraceOperation Delete;
    public static TraceOperation Add;
    public static TraceOperation Remove;
    public static TraceOperation Open;
    public static TraceOperation Close;
    public static TraceOperation Send;
    public static TraceOperation Receive;
    public static TraceOperation Connect;
    public static TraceOperation Accept;
    public static TraceOperation Execute;
    public static TraceOperation Bind;
    public static TraceOperation Attach;
    public static TraceOperation Abort;
    public static TraceOperation Flow;
    public static TraceOperation ActiveLinkRegistered;
    public static TraceOperation ActiveLinkUpdated;
    public static TraceOperation ActiveLinkExpired;
    public static TraceOperation ActiveLinkRefreshed;
}
public class Microsoft.Azure.Amqp.Transaction.Controller : AmqpObject {
    private SendingAmqpLink controllerLink;
    private long messageTag;
    private TimeSpan operationTimeout;
    public Controller(AmqpSession amqpSession, TimeSpan operationTimeout);
    public Task`1<ArraySegment`1<byte>> DeclareAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Amqp.Transaction.Controller/<DeclareAsync>d__5")]
public Task`1<ArraySegment`1<byte>> DeclareAsync(CancellationToken cancellationToken);
    public Task DischargeAsync(ArraySegment`1<byte> txnId, bool fail);
    [AsyncStateMachineAttribute("Microsoft.Azure.Amqp.Transaction.Controller/<DischargeAsync>d__7")]
public Task DischargeAsync(ArraySegment`1<byte> txnId, bool fail, CancellationToken cancellationToken);
    public virtual string ToString();
    protected virtual bool OpenInternal();
    protected virtual bool CloseInternal();
    protected virtual void AbortInternal();
    private static AmqpMessage CreateCommandMessage(IAmqpSerializable command);
    private static void OnLinkOpen(IAsyncResult asyncResult);
    private void ThrowIfRejected(DeliveryState deliveryState);
    private ArraySegment`1<byte> GetDeliveryTag();
}
public class Microsoft.Azure.Amqp.Transaction.Coordinator : DescribedList {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private Multiple`1<AmqpSymbol> <Capabilities>k__BackingField;
    public Multiple`1<AmqpSymbol> Capabilities { get; public set; }
    protected int FieldCount { get; }
    private static Coordinator();
    [CompilerGeneratedAttribute]
public Multiple`1<AmqpSymbol> get_Capabilities();
    [CompilerGeneratedAttribute]
public void set_Capabilities(Multiple`1<AmqpSymbol> value);
    protected virtual int get_FieldCount();
    protected virtual void EnsureRequired();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public class Microsoft.Azure.Amqp.Transaction.Declare : Performative {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private object <GlobalId>k__BackingField;
    public object GlobalId { get; public set; }
    protected int FieldCount { get; }
    private static Declare();
    [CompilerGeneratedAttribute]
public object get_GlobalId();
    [CompilerGeneratedAttribute]
public void set_GlobalId(object value);
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public class Microsoft.Azure.Amqp.Transaction.Declared : Outcome {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private ArraySegment`1<byte> <TxnId>k__BackingField;
    public ArraySegment`1<byte> TxnId { get; public set; }
    protected int FieldCount { get; }
    private static Declared();
    [CompilerGeneratedAttribute]
public ArraySegment`1<byte> get_TxnId();
    [CompilerGeneratedAttribute]
public void set_TxnId(ArraySegment`1<byte> value);
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public class Microsoft.Azure.Amqp.Transaction.Discharge : Performative {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private ArraySegment`1<byte> <TxnId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Fail>k__BackingField;
    public ArraySegment`1<byte> TxnId { get; public set; }
    public Nullable`1<bool> Fail { get; public set; }
    protected int FieldCount { get; }
    private static Discharge();
    [CompilerGeneratedAttribute]
public ArraySegment`1<byte> get_TxnId();
    [CompilerGeneratedAttribute]
public void set_TxnId(ArraySegment`1<byte> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Fail();
    [CompilerGeneratedAttribute]
public void set_Fail(Nullable`1<bool> value);
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
public class Microsoft.Azure.Amqp.Transaction.TransactionalState : DeliveryState {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private ArraySegment`1<byte> <TxnId>k__BackingField;
    [CompilerGeneratedAttribute]
private Outcome <Outcome>k__BackingField;
    public ArraySegment`1<byte> TxnId { get; public set; }
    public Outcome Outcome { get; public set; }
    protected int FieldCount { get; }
    private static TransactionalState();
    [CompilerGeneratedAttribute]
public ArraySegment`1<byte> get_TxnId();
    [CompilerGeneratedAttribute]
public void set_TxnId(ArraySegment`1<byte> value);
    [CompilerGeneratedAttribute]
public Outcome get_Outcome();
    [CompilerGeneratedAttribute]
public void set_Outcome(Outcome value);
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
internal static class Microsoft.Azure.Amqp.Transaction.TxnCapabilities : object {
    public static AmqpSymbol LocalTransactions;
    public static AmqpSymbol DistributedTxn;
    public static AmqpSymbol PromotableTransactions;
    public static AmqpSymbol MultiTxnsPerSsn;
    public static AmqpSymbol MultiSsnsPerTxn;
    private static TxnCapabilities();
}
public class Microsoft.Azure.Amqp.Transport.AmqpTransportInitiator : TransportInitiator {
    private AmqpSettings settings;
    private TransportSettings transportSettings;
    private AsyncBufferWriter writer;
    private AsyncBufferReader reader;
    private TimeoutHelper timeoutHelper;
    private int providerIndex;
    private ProtocolHeader sentHeader;
    private int completingThread;
    private static int CurrentThreadId { get; }
    public AmqpTransportInitiator(AmqpSettings settings, TransportSettings transportSettings);
    private static int get_CurrentThreadId();
    public virtual bool ConnectAsync(TimeSpan timeout, TransportAsyncCallbackArgs callbackArgs);
    public IAsyncResult BeginConnect(TimeSpan timeout, AsyncCallback callback, object state);
    public TransportBase EndConnect(IAsyncResult result);
    public virtual string ToString();
    public Task`1<TransportBase> ConnectTaskAsync(TimeSpan timeout);
    public Task`1<TransportBase> ConnectAsync(CancellationToken cancellationToken);
    internal Task`1<TransportBase> ConnectAsync(TimeSpan timeout, CancellationToken cancellationToken);
    private void OnConnectComplete(TransportAsyncCallbackArgs args);
    private void WriteSecurityHeader(TransportAsyncCallbackArgs args);
    private void OnWriteHeaderComplete(TransportAsyncCallbackArgs args);
    private void OnReadHeaderComplete(TransportAsyncCallbackArgs args);
    private void OnTransportOpenCompete(IAsyncResult result);
    private void HandleTransportOpened(IAsyncResult result);
    private void Complete(TransportAsyncCallbackArgs args);
}
public class Microsoft.Azure.Amqp.Transport.AmqpTransportProvider : TransportProvider {
    internal AmqpTransportProvider(AmqpVersion version);
    protected virtual TransportBase OnCreateTransport(TransportBase innerTransport, bool isInitiator);
}
public class Microsoft.Azure.Amqp.Transport.CustomSslStream : SslStream {
    [CompilerGeneratedAttribute]
private bool <IsClient>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireMutualAuthentication>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRemoteCertificateValid>k__BackingField;
    public bool IsClient { get; private set; }
    public bool RequireMutualAuthentication { get; private set; }
    public bool IsRemoteCertificateValid { get; internal set; }
    public CustomSslStream(Stream innerStream, bool leaveInnerStreamOpen, bool isClient);
    public CustomSslStream(Stream innerStream, bool leaveInnerStreamOpen, RemoteCertificateValidationCallback userCertificateValidationCallback, bool isClient);
    [CompilerGeneratedAttribute]
public bool get_IsClient();
    [CompilerGeneratedAttribute]
private void set_IsClient(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireMutualAuthentication();
    [CompilerGeneratedAttribute]
private void set_RequireMutualAuthentication(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsRemoteCertificateValid();
    [CompilerGeneratedAttribute]
internal void set_IsRemoteCertificateValid(bool value);
}
internal class Microsoft.Azure.Amqp.Transport.TcpTransport : TransportBase {
    private static SegmentBufferPool SmallBufferPool;
    private static EventHandler`1<SocketAsyncEventArgs> onWriteComplete;
    private static EventHandler`1<SocketAsyncEventArgs> onReadComplete;
    private static int MinSocketBufferSize;
    private Socket socket;
    private string localEndPoint;
    private string remoteEndPoint;
    private WriteAsyncEventArgs sendEventArgs;
    private ReadAsyncEventArgs receiveEventArgs;
    private ITransportMonitor monitor;
    public string LocalEndPoint { get; }
    public string RemoteEndPoint { get; }
    public TcpTransport(Socket socket, TcpTransportSettings transportSettings);
    private static TcpTransport();
    public virtual string get_LocalEndPoint();
    public virtual string get_RemoteEndPoint();
    public virtual void SetMonitor(ITransportMonitor monitor);
    public sealed virtual bool WriteAsync(TransportAsyncCallbackArgs args);
    public sealed virtual bool ReadAsync(TransportAsyncCallbackArgs args);
    protected virtual bool CloseInternal();
    protected virtual void AbortInternal();
    private static void OnWriteComplete(object sender, SocketAsyncEventArgs socketArgs);
    private static void OnReadComplete(object sender, SocketAsyncEventArgs socketArgs);
    private void HandleWriteComplete(TransportAsyncCallbackArgs args, bool syncCompleted);
    private void HandleReadComplete(TransportAsyncCallbackArgs args, bool fromCache, bool completedSynchronously);
}
internal class Microsoft.Azure.Amqp.Transport.TcpTransportInitiator : TransportInitiator {
    private TcpTransportSettings transportSettings;
    private TransportAsyncCallbackArgs callbackArgs;
    private SocketAsyncEventArgs connectEventArgs;
    private Timer timer;
    private int state;
    internal TcpTransportInitiator(TcpTransportSettings transportSettings);
    public virtual bool ConnectAsync(TimeSpan timeout, TransportAsyncCallbackArgs callbackArgs);
    private static void OnConnectComplete(object sender, SocketAsyncEventArgs e);
    private static void OnTimer(object obj);
    private void Complete(SocketAsyncEventArgs e, bool completeSynchronously);
}
public class Microsoft.Azure.Amqp.Transport.TcpTransportSettings : TransportSettings {
    private static int DefaultTcpBacklog;
    private static int DefaultTcpAcceptorCount;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TcpBacklog>k__BackingField;
    public string Host { get; public set; }
    public int Port { get; public set; }
    public int TcpBacklog { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public int get_TcpBacklog();
    [CompilerGeneratedAttribute]
public void set_TcpBacklog(int value);
    public virtual TransportInitiator CreateInitiator();
    public virtual string ToString();
}
public class Microsoft.Azure.Amqp.Transport.TlsTransport : TransportBase {
    private static AsyncCallback onOpenComplete;
    private static AsyncCallback onWriteComplete;
    private static AsyncCallback onReadComplete;
    private TransportBase innerTransport;
    protected CustomSslStream sslStream;
    private TlsTransportSettings tlsSettings;
    private OperationState writeState;
    private OperationState readState;
    public string LocalEndPoint { get; }
    public string RemoteEndPoint { get; }
    public bool IsSecure { get; }
    protected TlsTransportSettings TlsSettings { get; }
    public TlsTransport(TransportBase innerTransport, TlsTransportSettings tlsSettings);
    private static TlsTransport();
    public virtual string get_LocalEndPoint();
    public virtual string get_RemoteEndPoint();
    public virtual bool get_IsSecure();
    public virtual void SetMonitor(ITransportMonitor usageMeter);
    public virtual bool WriteAsync(TransportAsyncCallbackArgs args);
    public virtual bool ReadAsync(TransportAsyncCallbackArgs args);
    protected TlsTransportSettings get_TlsSettings();
    protected virtual bool OpenInternal();
    protected virtual bool CloseInternal();
    protected virtual void AbortInternal();
    protected virtual X509Principal CreateX509Principal(X509Certificate2 certificate);
    protected virtual bool ValidateRemoteCertificate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    private IAsyncResult BeginAuthenticateWithRetry(SslProtocols sslProtocols, T1 t1, T2 t2, Func`5<TlsTransport, SslProtocols, T1, T2, IAsyncResult> func);
    private static void OnOpenComplete(IAsyncResult result);
    private static void OnReadComplete(IAsyncResult result);
    private static void OnWriteComplete(IAsyncResult result);
    private void HandleOpenComplete(IAsyncResult result, bool syncComplete);
    private void HandleOperationComplete(IAsyncResult result, bool write, bool syncComplete);
    public sealed virtual void Dispose();
}
public class Microsoft.Azure.Amqp.Transport.TlsTransportInitiator : TransportInitiator {
    private static AsyncCallback onTransportOpened;
    private TlsTransportSettings transportSettings;
    private TransportAsyncCallbackArgs callbackArgs;
    private TimeoutHelper timeoutHelper;
    public TlsTransportInitiator(TlsTransportSettings transportSettings);
    private static TlsTransportInitiator();
    public virtual string ToString();
    public virtual bool ConnectAsync(TimeSpan timeout, TransportAsyncCallbackArgs callbackArgs);
    protected virtual TlsTransport OnCreateTransport(TransportBase innerTransport, TlsTransportSettings tlsTransportSettings);
    private static void OnInnerTransportConnected(TransportAsyncCallbackArgs innerArgs);
    private static void OnTransportOpened(IAsyncResult result);
    private void HandleInnerTransportConnected(TransportAsyncCallbackArgs innerArgs);
    private void HandleTransportOpened(IAsyncResult result);
    private void Complete();
}
public class Microsoft.Azure.Amqp.Transport.TlsTransportProvider : TransportProvider {
    private TlsTransportSettings tlsSettings;
    public TlsTransportSettings Settings { get; }
    public TlsTransportProvider(TlsTransportSettings tlsSettings);
    public TlsTransportSettings get_Settings();
    public virtual string ToString();
    protected virtual TransportBase OnCreateTransport(TransportBase innerTransport, bool isInitiator);
}
public class Microsoft.Azure.Amqp.Transport.TlsTransportSettings : TransportSettings {
    private static SslProtocols LegacyDefaultSslProtocols;
    private static Nullable`1<SslProtocols> systemSslProtocols;
    private Nullable`1<SslProtocols> userSslProtocols;
    protected TransportSettings innerSettings;
    [CompilerGeneratedAttribute]
private bool <IsInitiator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetHost>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <CertificateValidationCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckCertificateRevocation>k__BackingField;
    public bool IsInitiator { get; public set; }
    public string TargetHost { get; public set; }
    public SslProtocols Protocols { get; public set; }
    public X509Certificate2 Certificate { get; public set; }
    public RemoteCertificateValidationCallback CertificateValidationCallback { get; public set; }
    internal Nullable`1<SslProtocols> UserProtocols { get; internal set; }
    internal SslProtocols InternalProtocols { get; }
    public TransportSettings InnerTransportSettings { get; }
    public bool CheckCertificateRevocation { get; public set; }
    public TlsTransportSettings(TransportSettings innerSettings);
    public TlsTransportSettings(TransportSettings innerSettings, bool isInitiator);
    [CompilerGeneratedAttribute]
public bool get_IsInitiator();
    [CompilerGeneratedAttribute]
public void set_IsInitiator(bool value);
    [CompilerGeneratedAttribute]
public string get_TargetHost();
    [CompilerGeneratedAttribute]
public void set_TargetHost(string value);
    public SslProtocols get_Protocols();
    public void set_Protocols(SslProtocols value);
    [CompilerGeneratedAttribute]
public X509Certificate2 get_Certificate();
    [CompilerGeneratedAttribute]
public void set_Certificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
public RemoteCertificateValidationCallback get_CertificateValidationCallback();
    [CompilerGeneratedAttribute]
public void set_CertificateValidationCallback(RemoteCertificateValidationCallback value);
    internal Nullable`1<SslProtocols> get_UserProtocols();
    internal void set_UserProtocols(Nullable`1<SslProtocols> value);
    internal SslProtocols get_InternalProtocols();
    internal SslProtocols RefreshProtocolsOnArgumentError();
    public TransportSettings get_InnerTransportSettings();
    [CompilerGeneratedAttribute]
public bool get_CheckCertificateRevocation();
    [CompilerGeneratedAttribute]
public void set_CheckCertificateRevocation(bool value);
    public virtual TransportInitiator CreateInitiator();
    public virtual string ToString();
}
public class Microsoft.Azure.Amqp.Transport.TransportAsyncCallbackArgs : object {
    [CompilerGeneratedAttribute]
private Byte[] <Buffer>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private ByteBuffer <ByteBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ByteBuffer> <ByteBufferList>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<TransportAsyncCallbackArgs> <CompletedCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private TransportBase <Transport>k__BackingField;
    [CompilerGeneratedAttribute]
private object <UserToken>k__BackingField;
    [CompilerGeneratedAttribute]
private object <UserToken2>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompletedSynchronously>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BytesTransfered>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Byte[] Buffer { get; private set; }
    public int Offset { get; private set; }
    public int Count { get; private set; }
    public ByteBuffer ByteBuffer { get; private set; }
    public IList`1<ByteBuffer> ByteBufferList { get; private set; }
    public Action`1<TransportAsyncCallbackArgs> CompletedCallback { get; public set; }
    public TransportBase Transport { get; public set; }
    public object UserToken { get; public set; }
    public object UserToken2 { get; public set; }
    public bool CompletedSynchronously { get; public set; }
    public int BytesTransfered { get; public set; }
    public Exception Exception { get; public set; }
    private object System.IAsyncResult.AsyncState { get; }
    private WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }
    private bool System.IAsyncResult.CompletedSynchronously { get; }
    private bool System.IAsyncResult.IsCompleted { get; }
    [CompilerGeneratedAttribute]
public Byte[] get_Buffer();
    [CompilerGeneratedAttribute]
private void set_Buffer(Byte[] value);
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(int value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    [CompilerGeneratedAttribute]
public ByteBuffer get_ByteBuffer();
    [CompilerGeneratedAttribute]
private void set_ByteBuffer(ByteBuffer value);
    [CompilerGeneratedAttribute]
public IList`1<ByteBuffer> get_ByteBufferList();
    [CompilerGeneratedAttribute]
private void set_ByteBufferList(IList`1<ByteBuffer> value);
    [CompilerGeneratedAttribute]
public Action`1<TransportAsyncCallbackArgs> get_CompletedCallback();
    [CompilerGeneratedAttribute]
public void set_CompletedCallback(Action`1<TransportAsyncCallbackArgs> value);
    [CompilerGeneratedAttribute]
public TransportBase get_Transport();
    [CompilerGeneratedAttribute]
public void set_Transport(TransportBase value);
    [CompilerGeneratedAttribute]
public object get_UserToken();
    [CompilerGeneratedAttribute]
public void set_UserToken(object value);
    [CompilerGeneratedAttribute]
public object get_UserToken2();
    [CompilerGeneratedAttribute]
public void set_UserToken2(object value);
    [CompilerGeneratedAttribute]
public bool get_CompletedSynchronously();
    [CompilerGeneratedAttribute]
public void set_CompletedSynchronously(bool value);
    [CompilerGeneratedAttribute]
public int get_BytesTransfered();
    [CompilerGeneratedAttribute]
public void set_BytesTransfered(int value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    private sealed virtual override object System.IAsyncResult.get_AsyncState();
    private sealed virtual override WaitHandle System.IAsyncResult.get_AsyncWaitHandle();
    private sealed virtual override bool System.IAsyncResult.get_CompletedSynchronously();
    private sealed virtual override bool System.IAsyncResult.get_IsCompleted();
    public void SetBuffer(Byte[] buffer, int offset, int count);
    public void SetBuffer(ByteBuffer byteBuffer);
    public void SetBuffer(IList`1<ByteBuffer> byteBufferList);
    public void Reset();
}
public abstract class Microsoft.Azure.Amqp.Transport.TransportBase : AmqpObject {
    [CompilerGeneratedAttribute]
private IPrincipal <Principal>k__BackingField;
    public string LocalEndPoint { get; }
    public string RemoteEndPoint { get; }
    public IPrincipal Principal { get; protected set; }
    public bool IsSecure { get; }
    public bool IsAuthenticated { get; }
    public bool RequiresCompleteFrames { get; }
    protected TransportBase(string type);
    protected TransportBase(string type, SequenceNumber identifier);
    public abstract virtual string get_LocalEndPoint();
    public abstract virtual string get_RemoteEndPoint();
    [CompilerGeneratedAttribute]
public IPrincipal get_Principal();
    [CompilerGeneratedAttribute]
protected void set_Principal(IPrincipal value);
    public virtual bool get_IsSecure();
    public bool get_IsAuthenticated();
    public virtual bool get_RequiresCompleteFrames();
    public abstract virtual void SetMonitor(ITransportMonitor usageMeter);
    public abstract virtual bool WriteAsync(TransportAsyncCallbackArgs args);
    public abstract virtual bool ReadAsync(TransportAsyncCallbackArgs args);
    protected virtual void OnOpen(TimeSpan timeout);
    protected virtual void OnClose(TimeSpan timeout);
    protected virtual bool OpenInternal();
}
public abstract class Microsoft.Azure.Amqp.Transport.TransportInitiator : object {
    public abstract virtual bool ConnectAsync(TimeSpan timeout, TransportAsyncCallbackArgs callbackArgs);
}
public abstract class Microsoft.Azure.Amqp.Transport.TransportProvider : object {
    private List`1<AmqpVersion> versions;
    [CompilerGeneratedAttribute]
private ProtocolId <ProtocolId>k__BackingField;
    public ProtocolId ProtocolId { get; protected set; }
    public IList`1<AmqpVersion> Versions { get; }
    public AmqpVersion DefaultVersion { get; }
    [CompilerGeneratedAttribute]
public ProtocolId get_ProtocolId();
    [CompilerGeneratedAttribute]
protected void set_ProtocolId(ProtocolId value);
    public IList`1<AmqpVersion> get_Versions();
    public AmqpVersion get_DefaultVersion();
    public bool TryGetVersion(AmqpVersion requestedVersion, AmqpVersion& supportedVersion);
    public TransportBase CreateTransport(TransportBase innerTransport, bool isInitiator);
    protected abstract virtual TransportBase OnCreateTransport(TransportBase innerTransport, bool isInitiator);
}
public abstract class Microsoft.Azure.Amqp.Transport.TransportSettings : object {
    private int sendBufferSize;
    private int receiveBufferSize;
    [CompilerGeneratedAttribute]
private int <ListenerAcceptorCount>k__BackingField;
    public int ListenerAcceptorCount { get; public set; }
    public int SendBufferSize { get; public set; }
    public int ReceiveBufferSize { get; public set; }
    internal int InternalSendBufferSize { get; }
    internal int InternalReceiveBufferSize { get; }
    [CompilerGeneratedAttribute]
public int get_ListenerAcceptorCount();
    [CompilerGeneratedAttribute]
public void set_ListenerAcceptorCount(int value);
    public int get_SendBufferSize();
    public void set_SendBufferSize(int value);
    public int get_ReceiveBufferSize();
    public void set_ReceiveBufferSize(int value);
    internal int get_InternalSendBufferSize();
    internal int get_InternalReceiveBufferSize();
    public abstract virtual TransportInitiator CreateInitiator();
}
internal class Microsoft.Azure.Amqp.Transport.TransportStream : Stream {
    private static Action`1<TransportAsyncCallbackArgs> onIOComplete;
    private TransportBase transport;
    public bool CanSeek { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public TransportStream(TransportBase transport);
    private static TransportStream();
    public virtual bool get_CanSeek();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    protected virtual void Dispose(bool disposing);
    private static void OnIOComplete(TransportAsyncCallbackArgs args);
    private void CompleteOperation(TransportAsyncCallbackArgs args);
}
public class Microsoft.Azure.Amqp.Transport.WebSocketTransport : TransportBase {
    private StreamWebSocket webSocket;
    private Uri uri;
    private ITransportMonitor usageMeter;
    public string LocalEndPoint { get; }
    public string RemoteEndPoint { get; }
    internal WebSocketTransport(StreamWebSocket webSocket, Uri uri);
    public virtual string get_LocalEndPoint();
    public virtual string get_RemoteEndPoint();
    public sealed virtual bool WriteAsync(TransportAsyncCallbackArgs args);
    public sealed virtual bool ReadAsync(TransportAsyncCallbackArgs args);
    protected virtual bool OpenInternal();
    protected virtual bool CloseInternal();
    protected virtual void AbortInternal();
    public virtual void SetMonitor(ITransportMonitor usageMeter);
    private void OnWriteComplete(TransportAsyncCallbackArgs args, ArraySegment`1<byte> buffer, ByteBuffer byteBuffer, DateTime startTime);
    private void OnReadComplete(TransportAsyncCallbackArgs args, int count, DateTime startTime);
}
internal class Microsoft.Azure.Amqp.Transport.WebSocketTransportInitiator : TransportInitiator {
    private WebSocketTransportSettings settings;
    internal WebSocketTransportInitiator(WebSocketTransportSettings settings);
    public virtual bool ConnectAsync(TimeSpan timeout, TransportAsyncCallbackArgs callbackArgs);
    private void OnConnect(TransportAsyncCallbackArgs callbackArgs, Task t, StreamWebSocket sws, CancellationTokenSource cts);
}
public class Microsoft.Azure.Amqp.Transport.WebSocketTransportSettings : TransportSettings {
    internal static string WebSocketSubProtocol;
    internal static string WebSockets;
    internal static string SecureWebSockets;
    internal static int WebSocketsPort;
    internal static int SecureWebSocketsPort;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubProtocol>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebProxy <Proxy>k__BackingField;
    public Uri Uri { get; public set; }
    public string SubProtocol { get; public set; }
    public IWebProxy Proxy { get; public set; }
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public string get_SubProtocol();
    [CompilerGeneratedAttribute]
public void set_SubProtocol(string value);
    [CompilerGeneratedAttribute]
public IWebProxy get_Proxy();
    [CompilerGeneratedAttribute]
public void set_Proxy(IWebProxy value);
    public virtual TransportInitiator CreateInitiator();
}
internal class Microsoft.Azure.Amqp.Win32 : object {
    public static int GetCurrentProcessId();
}
internal class Microsoft.Azure.Amqp.WorkCollection`3 : object {
    private ConcurrentDictionary`2<TKey, TWork> pendingWork;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) closed;
    public WorkCollection`3(IEqualityComparer`1<TKey> comparer);
    public void StartWork(TKey key, TWork work);
    public void CompleteWork(TKey key, bool syncComplete, TOutcome outcome);
    public bool RemoveWork(TKey key, TWork work);
    public void Abort();
}
public class Microsoft.Azure.Amqp.X509.X509CertificateIdentity : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAuthenticated>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <Certificate>k__BackingField;
    public string Name { get; }
    public string AuthenticationType { get; }
    public bool IsAuthenticated { get; }
    public X509Certificate2 Certificate { get; }
    public X509CertificateIdentity(X509Certificate2 certificate, bool isAuthenticated);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_AuthenticationType();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAuthenticated();
    [CompilerGeneratedAttribute]
public X509Certificate2 get_Certificate();
}
public class Microsoft.Azure.Amqp.X509.X509Principal : object {
    [CompilerGeneratedAttribute]
private X509CertificateIdentity <CertificateIdentity>k__BackingField;
    public IIdentity Identity { get; }
    public X509CertificateIdentity CertificateIdentity { get; }
    public X509Principal(X509CertificateIdentity identity);
    public sealed virtual IIdentity get_Identity();
    [CompilerGeneratedAttribute]
public X509CertificateIdentity get_CertificateIdentity();
    public sealed virtual bool IsInRole(string role);
}
public class System.Collections.Generic.KeyedByTypeCollection`1 : KeyedCollection`2<Type, TItem> {
    public KeyedByTypeCollection`1(IEnumerable`1<TItem> items);
    public T Find();
    public T Remove();
    private T Find(bool remove);
    public Collection`1<T> FindAll();
    public Collection`1<T> RemoveAll();
    private Collection`1<T> FindAll(bool remove);
    protected virtual Type GetKeyForItem(TItem item);
    protected virtual void InsertItem(int index, TItem item);
    protected virtual void SetItem(int index, TItem item);
}
